"""
flux_image_gen.py
-----------------
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Flux API.
–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""
import time
import requests
import random
from pathlib import Path
from typing import List, Dict, Any, Optional, Set
from dataclasses import dataclass

from autovid.backend.config import FLUX_API_URL, FLUX_CONFIG
from autovid.backend.models.db import get_session


@dataclass
class FluxConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Flux API"""
    api_url: str = FLUX_API_URL
    timeout: int = FLUX_CONFIG["timeout"]
    max_retries: int = FLUX_CONFIG["max_retries"]
    api_key: str = FLUX_CONFIG["api_key"]
    model: str = FLUX_CONFIG["model"]


class FluxAPIClient:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Flux API"""
    
    def __init__(self, config: Optional[FluxConfig] = None):
        self.config = config or FluxConfig()
    
    def generate_image_local(self, prompt, filename, video_format="long", priority: str = "low"):
        seed = random.randint(1, 100000)
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º—Ç—É: '{prompt}' (seed: {seed}, format: {video_format}, priority: {priority})")

        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            payload = {"prompt": prompt, "seed": seed, "format": video_format, "priority": priority, "wait": True}
            resp = requests.post(
                f"{self.config.api_url}/enqueue",
                json=payload,
                timeout=None  # –∂–¥—ë–º –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –±–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
            )
            resp.raise_for_status()

            data = resp.json()
            if data.get("status") != "completed":
                raise RuntimeError(f"Flux –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—Ö: {data}")

            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º url, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º –ø–æ file
            url = data.get("url") or data.get("file")
            if not url:
                raise RuntimeError("Flux –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")

            # –°–æ–±–∏—Ä–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL
            if url.startswith("http://") or url.startswith("https://"):
                img_url = url
            else:
                base = self.config.api_url.rstrip("/")
                path = url if url.startswith("/") else f"/{url}"
                img_url = f"{base}{path}"

            img_resp = requests.get(img_url, timeout=30)
            img_resp.raise_for_status()
            img_bytes = img_resp.content
            print(f"üîó –ü–æ–ª—É—á–µ–Ω URL: {img_url} | —Ä–∞–∑–º–µ—Ä={len(img_bytes)} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Flux –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                task_id = data.get("id")
                if task_id:
                    delete_url = f"{self.config.api_url}/file/{task_id}"
                    delete_resp = requests.delete(delete_url, timeout=10)
                    if delete_resp.status_code == 200:
                        print(f"üóëÔ∏è –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ Flux (task_id: {task_id})")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Flux: {delete_resp.status_code}")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            except Exception as delete_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ Flux: {delete_error}")
            
            return img_bytes

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
    def generate_image(self, prompt: str, aspect_ratio: str = "16:9", polling_delay: int = 2, max_retries: int = 60) -> bytes:
        import time
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Flux API (c polling)"""

        headers = {
            "x-key": "9010f035-4f97-42a5-a650-2ffdcd1c4cce",
            "accept": "application/json",
            "Content-Type": "application/json"
        }

        data = {
            "prompt": prompt,
            "aspect_ratio": aspect_ratio
        }

        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        response = requests.post(
            "https://api.bfl.ai/v1/flux-dev",
            headers=headers,
            json=data,
            timeout=self.config.timeout
        )
        response.raise_for_status()
        result = response.json()

        polling_url = result.get("polling_url")
        request_id = result.get("id")
        if not polling_url:
            raise ValueError("‚ùå polling_url –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")

        print(f"üì° –ü–æ–ª—É—á–µ–Ω polling_url: {polling_url}")

        # Polling loop
        start_time = time.time()
        while True:
            if time.time() - start_time > max_retries * polling_delay:
                raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({max_retries * polling_delay} —Å–µ–∫—É–Ω–¥)")
                
            time.sleep(polling_delay)
            result = requests.get(
                polling_url,
                headers={
                    'accept': 'application/json',
                    'x-key': "9010f035-4f97-42a5-a650-2ffdcd1c4cce",
                },
                params={
                    'id': request_id,
                },
            ).json()
            
            status = result["status"]
            print(f"Status: {status}")
            
            if status == "Ready":
                image_url = result['result']['sample']
                print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL: {image_url}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
                img_response = requests.get(image_url, timeout=self.config.timeout)
                img_response.raise_for_status()
                
                return img_response.content
            elif status in ["Error", "Failed"]:
                print(f"Generation failed: {result}")
                raise Exception(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result}")
            
        raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

class FileManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, project_id: int, scenes_dir: Path):
        self.project_id = project_id
        self.scenes_dir = scenes_dir
    
    def get_existing_scenes(self) -> Set[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω"""
        existing = sorted(
            self.scenes_dir.glob("scene_*.jpg"), 
            key=lambda p: int(p.stem.split("_")[-1])
        )
        return {int(p.stem.split("_")[-1]) for p in existing}
    
    def save_image(self, image_data: bytes, filename: str) -> Path:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        save_path = self.scenes_dir / filename
        with open(save_path, "wb") as f:
            f.write(image_data)
        return save_path
    
    def get_scene_filename(self, scene_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ü–µ–Ω—ã"""
        return f"scene_{scene_id:02}.jpg"


class ImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, config: Optional[FluxConfig] = None):
        self.config = config or FluxConfig()
        self.api_client = FluxAPIClient(config)
    
    def generate_single_image(self, prompt: str, filename: str, video_format: str = "long", priority: str = "low") -> Optional[Path]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        seed = random.randint(1, 100000)
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º—Ç—É: '{prompt}' (seed: {seed}, format: {video_format})")

        try:
            image_data = self.api_client.generate_image_local(prompt, filename, video_format, priority=priority)
            save_path = Path(filename)
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            save_path.parent.mkdir(parents=True, exist_ok=True)
            with open(save_path, "wb") as f:
                f.write(image_data)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
            return save_path
            
        except Exception as e:
            print(f"‚ùå FLUX_IMAGE_EXCEPTION: {e} | filename={filename}")
            import traceback
            print(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return None


class MissingSceneDetector:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω"""
    
    @staticmethod
    def find_missing_scenes(prompts: List[Dict[str, Any]], existing_ids: Set[int]) -> List[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã"""
        missing_scenes = []
        for item in prompts:
            idx = item["id"]
            if idx not in existing_ids:
                missing_scenes.append(idx)
        return missing_scenes


class FluxImageManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, project_id: int, video_format: str = "long", prompts: List[Dict[str, Any]] = None, scenes_dir: Path = None, config: Optional[FluxConfig] = None):
        self.project_id = project_id
        self.video_format = video_format
        self.config = config or FluxConfig()
        
        self.prompts = prompts
        self.file_manager = FileManager(project_id, scenes_dir)
        self.image_generator = ImageGenerator(config)
        self.scene_detector = MissingSceneDetector()
    
    def generate(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        if not self.prompts:
            print(f"‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {self.project_id}")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã
        existing_ids = self.file_manager.get_existing_scenes()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
        missing_scenes = self.scene_detector.find_missing_scenes(self.prompts, existing_ids)
        
        if missing_scenes:
            print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã: {missing_scenes}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
            generated_count = 0
            failed_count = 0
            
            for idx in missing_scenes:
                prompt = next(item["image_prompt"] for item in self.prompts if item["id"] == idx)
                filename = self.file_manager.get_scene_filename(idx)
                print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã {idx}")
                
                result = self.image_generator.generate_single_image(
                    prompt, 
                    str(self.file_manager.scenes_dir / filename), 
                    self.video_format
                )
                
                if result:
                    generated_count += 1
                else:
                    failed_count += 1
        else:
            print("‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            generated_count = 0
            failed_count = 0
        
        return {
            "project_id": self.project_id,
            "video_format": self.video_format,
            "total_prompts": len(self.prompts),
            "existing_scenes": len(existing_ids),
            "missing_scenes": len(missing_scenes),
            "generated": generated_count,
            "failed": failed_count
        }
        
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Flux API")
    parser.add_argument("--project_id", type=int, default=1, help="ID –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--scene_id", type=int, default=0, help="ID —Å—Ü–µ–Ω—ã")
    parser.add_argument("--prompt", type=str, required=True, help="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    parser.add_argument("--scenes_dir", type=str, default="assets/scenes", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    parser.add_argument("--video_format", type=str, default="long", help="–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ (long / short)")

    args = parser.parse_args()

    scenes_path = Path(args.scenes_dir) / str(args.project_id)
    scenes_path.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    image_generator = ImageGenerator()
    filename = scenes_path / f"scene_{args.scene_id:02}.jpg"

    result_path = image_generator.generate_single_image(
        prompt=args.prompt,
        filename=str(filename),
        video_format=args.video_format
    )

    if result_path:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result_path}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")