#!/usr/bin/env python3
"""
–ú–∏–Ω–∏‚Äë—Ç–µ—Å—Ç –≤–∞—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ `generate_image_local`.

‚ùØ python test_local_flux.py -p "blue car" -f long -o blue.png
"""

import argparse, random, requests
from pathlib import Path

def generate_image_local(prompt: str, video_format: str = "long") -> bytes:
    """–ì—Ä—É–±–∞—è –∫–æ–ø–∏—è –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw‚Äë–±–∞–π—Ç—ã PNG."""
    seed = random.randint(1, 100_000)
    print(f"üñºÔ∏è  –ó–∞–ø—Ä–æ—Å: '{prompt}'  seed={seed}  format={video_format}")

    # 1) /generate
    params = {"prompt": prompt, "seed": seed, "format": video_format}
    resp = requests.get("http://localhost:8000/generate", params=params, timeout=300)
    resp.raise_for_status()

    # 2) –±–µ—Ä—ë–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    rel_path = resp.json()["file"].lstrip("/")           # –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ /
    img_url  = f"http://localhost:8000/{rel_path}"

    # 3) —Å–∫–∞—á–∏–≤–∞–µ–º png‚Äë–±–∞–π—Ç—ã
    img_bytes = requests.get(img_url, timeout=300).content
    if not img_bytes:
        raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç /static")

    return img_bytes

def main():
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ FastAPI‚Äëservice")
    parser.add_argument("-p", "--prompt", default="blue car", help="–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
    parser.add_argument("-f", "--format", default="long", choices=["long", "shorts"], help="–§–æ—Ä–º–∞—Ç")
    parser.add_argument("-o", "--output", type=Path, default=Path("out.png"), help="–ò–º—è png‚Äë—Ñ–∞–π–ª–∞")
    args = parser.parse_args()

    png_bytes = generate_image_local(args.prompt, args.format)
    args.output.write_bytes(png_bytes)
    print(f"‚úì  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {args.output.resolve()}  ({len(png_bytes):,} bytes)")

if __name__ == "__main__":
    main()
