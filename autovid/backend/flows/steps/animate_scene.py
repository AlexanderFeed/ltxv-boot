from __future__ import annotations
import sys
import json
import os
import shutil
import subprocess
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
import requests
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional, Tuple

import cv2
from mutagen.mp3 import MP3

from autovid.backend.config import VIDEO_FORMATS, LTX_VIDEO_CONFIG
from autovid.backend.flows.steps.ltx_video_animate import LTXVideoAPIClient

os.environ["PATH"] = "/workspace/bin:" + os.environ.get("PATH", "")
WAIT_TIME_SECONDS = 5


def ffprobe_duration(path: Path) -> float:
    try:
        out = subprocess.check_output(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration",
             "-of", "default=noprint_wrappers=1:nokey=1", str(path)], text=True
        )
        return float(out.strip())
    except Exception:
        return 0.0


def mp4_quick_check(path: Path) -> bool:
    return path.exists() and path.stat().st_size > 100_000 and b"ftyp" in path.read_bytes()[:12]


@dataclass
class SceneInfo:
    scene_num: str
    image_path: Path
    audio_path: Path
    output_path: Path
    subtitle_path: Optional[Path] = None
    duration: Optional[float] = None


# -------------------------- Frame + Video Builders --------------------------

def generate_zoom_video(scene: SceneInfo, width: int, height: int, fps: int = 25,
                        zoom_start: float = 1.0, zoom_end: float = 1.2) -> None:
    print(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º zoom –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene.scene_num} –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ {width}x{height}")
    temp_dir = scene.output_path.parent / f"tmp_{scene.scene_num}"
    temp_dir.mkdir(parents=True, exist_ok=True)

    img = cv2.imread(str(scene.image_path))
    if img is None:
        raise RuntimeError(f"Cannot read image {scene.image_path}")
    h, w = img.shape[:2]
    cx, cy = w / 2, h / 2
    frames = int(scene.duration * fps)

    for i in range(frames):
        scale = zoom_start + (zoom_end - zoom_start) * (i / max(frames - 1, 1))
        M = cv2.getRotationMatrix2D((cx, cy), 0, scale)
        frame = cv2.warpAffine(img, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REFLECT)
        if (w, h) != (width, height):
            frame = cv2.resize(frame, (width, height), interpolation=cv2.INTER_CUBIC)
        cv2.imwrite(str(temp_dir / f"frame_{i:04d}.jpg"), frame, [cv2.IMWRITE_JPEG_QUALITY, 100])

    temp_video = scene.output_path.with_name(scene.output_path.stem + "_tmp.mp4")

    subprocess.run([
        "ffmpeg", "-y", "-framerate", str(fps),
        "-i", str(temp_dir / "frame_%04d.jpg"),
        "-i", str(scene.audio_path),
        "-c:v", "libx264", "-preset", "veryfast", "-b:v", "8M",
        "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "192k", "-shortest",
        str(temp_video)
    ], check=True)

    temp_video.replace(scene.output_path)
    shutil.rmtree(temp_dir, ignore_errors=True)



def overlay_subs(video: Path, subs: Path, out: Path) -> None:
    subprocess.run([
        "ffmpeg", "-y", "-i", str(video),
        "-vf", f"subtitles='{subs}:fontsdir=fonts'",
        "-c:v", "libx264", "-preset", "veryfast", "-b:v", "8M",
        "-c:a", "copy", str(out)
    ], check=True)


# -------------------------- Manager --------------------------

class SceneAnimationManager:
    def __init__(self, project_id: str, video_format: str):
        self.project_id = project_id
        self.video_format = video_format
        params = VIDEO_FORMATS.get(video_format, VIDEO_FORMATS["long"])
        self.width, self.height = params["WIDTH"], params["HEIGHT"]
        self.fps = params.get("FPS", 25)
        
        print(f"üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SceneAnimationManager:")
        print(f"  –ü—Ä–æ–µ–∫—Ç: {project_id}")
        print(f"  –§–æ—Ä–º–∞—Ç: {video_format}")
        print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {self.width}x{self.height}")
        print(f"  FPS: {self.fps}")

        assets_dir = Path(os.getenv("ASSETS_DIR", "assets"))
        self.scenes_dir = assets_dir / "scenes" / str(project_id)
        self.audio_dir = assets_dir / "audio" / str(project_id)
        self.output_dir = assets_dir / "video" / str(project_id)
        self.chunks_file = assets_dir / "chunks" / str(project_id) / "chunks.json"
        self.subtitle_dir = assets_dir / "scripts" / str(project_id) / "subtitles"
        self.output_dir.mkdir(parents=True, exist_ok=True)

        with open(self.chunks_file, "r", encoding="utf-8") as fp:
            self.chunks = json.load(fp)
        self.scene_ids = [str(c["id"]) for c in self.chunks]
        self.start = time.time()

    def run(self) -> None:
        print(f"\U0001F3AC start video generation {self.project_id} ({self.video_format})")
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LTX —Å–µ—Ä–≤–∏—Å–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
        if LTX_VIDEO_CONFIG["enabled"]:
            self._validate_ltx_connectivity()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º LTX –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ —Å—Ä–∞–∑—É
        if LTX_VIDEO_CONFIG["enabled"]:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º LTX –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏...")
            self._start_ltx_animations_in_background()
        
        while True:
            todo, missing = self._scan_scenes()
            if missing:
                print("waiting for images", missing)
            if not todo:
                if self._all_done():
                    break
                time.sleep(WAIT_TIME_SECONDS)
                continue
            self._animate_parallel(todo)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
        if LTX_VIDEO_CONFIG["enabled"]:
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏...")
            self._wait_for_ltx_animation()
        
        self._concat()
        print(f"‚úÖ finished in {time.time() - self.start:.1f}s")

    def _validate_ltx_connectivity(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å RUNPOD_LTX_ID –∏ –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LTX.
        –ù–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è /health: –¥–æ–ø—É—Å–∫–∞–µ—Ç 200/403/404/405, —Ñ–µ–π–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö.
        """
        try:
            runpod_id = os.environ.get("RUNPOD_LTX_ID", "").strip()
            if not runpod_id or runpod_id == "unknown":
                raise RuntimeError(
                    "RUNPOD_LTX_ID –Ω–µ –∑–∞–¥–∞–Ω (unknown/empty). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤–∏–¥–µ–æ—ç—Ç–∞–ø–∞."
                )

            client = LTXVideoAPIClient()
            base_url = client.base_url.rstrip("/")
            print(f"üîß LTX validation: RUNPOD_LTX_ID={runpod_id}, base_url={base_url}")

            allowed_status = {200, 201, 202, 203, 204, 301, 302, 303, 307, 308, 403, 404, 405}

            def ok_status(code: int) -> bool:
                return code in allowed_status

            # 1) –ü–∏–Ω–≥—É–µ–º –∫–æ—Ä–µ–Ω—å
            try:
                r1 = requests.get(base_url + "/", timeout=8)
                if ok_status(r1.status_code):
                    print(f"‚úÖ LTX base reachable: HTTP {r1.status_code}")
                    return
            except Exception as e:
                print(f"‚ö†Ô∏è LTX root GET –æ—à–∏–±–∫–∞: {e}")

            # 2) –ü—Ä–æ–±—É–µ–º OPTIONS /generate (–º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º)
            try:
                r2 = requests.options(base_url + "/generate", timeout=8)
                if ok_status(r2.status_code):
                    print(f"‚úÖ LTX /generate reachable: HTTP {r2.status_code}")
                    return
                else:
                    print(f"‚ö†Ô∏è LTX /generate unexpected status: HTTP {r2.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è LTX /generate OPTIONS –æ—à–∏–±–∫–∞: {e}")

            # –ï—Å–ª–∏ –¥–æ —Å—é–¥–∞ –¥–æ—à–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ —Å–µ—Ç–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
            raise RuntimeError(
                f"LTX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {base_url}/ –∏–ª–∏ OPTIONS {base_url}/generate). RUNPOD_LTX_ID={runpod_id}"
            )
        except RuntimeError:
            raise
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LTX: {e}")

    def _scan_scenes(self) -> Tuple[List[SceneInfo], List[str]]:
        todo, missing = [], []
        for sid in self.scene_ids:
            img = self._find(self.scenes_dir, sid, "jpg")
            aud = self._find(self.audio_dir, sid, "mp3")
            out = self._find(self.output_dir, sid, "mp4") or self.output_dir / f"scene_{sid.zfill(3)}.mp4"
            
            if not (img and aud):
                missing.append(sid)
                print(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {sid}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if not img else '–∞—É–¥–∏–æ'}")
                continue
                
            if mp4_quick_check(out):
                print(f"‚úÖ –°—Ü–µ–Ω–∞ {sid}: —É–∂–µ –≥–æ—Ç–æ–≤–∞")
                continue
                
            duration = MP3(aud).info.length
            sub = self._find(self.subtitle_dir, sid, "ass") if self.video_format == "shorts" else None
            todo.append(SceneInfo(sid, img, aud, out, sub, duration))
            print(f"üé¨ –°—Ü–µ–Ω–∞ {sid}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å)")
            
        print(f"üìã –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω: {len(todo)} –≤ –æ—á–µ—Ä–µ–¥–∏, {len(missing)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return todo, missing

    @staticmethod
    def _find(folder: Path, sid: str, ext: str) -> Optional[Path]:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        for z in (3, 2, 1):
            p = folder / f"scene_{sid.zfill(z)}.{ext}"
            if p.exists():
                return p
        return None

    def _animate_parallel(self, scenes: List[SceneInfo]) -> None:
        with ThreadPoolExecutor(max_workers=4) as ex:
            futs = [
                ex.submit(self._animate_scene, sc)
                for sc in scenes
            ]
            for f in as_completed(futs):
                f.result()

    def _animate_scene(self, scene: SceneInfo) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ LTX –∞–Ω–∏–º–∞—Ü–∏–∏)"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
        generate_zoom_video(scene, self.width, self.height, fps=self.fps)
        if self.video_format == "shorts" and scene.subtitle_path:
            final_path = scene.output_path.parent / f"final_{scene.output_path.name}"
            overlay_subs(scene.output_path, scene.subtitle_path, final_path)
            scene.output_path.unlink(missing_ok=True)
            final_path.rename(scene.output_path)
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ü–µ–Ω–∞ {scene.scene_num} –≥–æ—Ç–æ–≤–∞")
        
        # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º LTX –∞–Ω–∏–º–∞—Ü–∏—é –∑–¥–µ—Å—å - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        # self._start_ltx_animation_if_needed(scene)

    def _all_done(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ü–µ–Ω (–±–∞–∑–æ–≤—ã—Ö) - LTX –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ"""
        for sid in self.scene_ids:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É
            base_path = self._find(self.output_dir, sid, "mp4")
            if not base_path or not mp4_quick_check(base_path):
                return False
        return True

    def _concat(self) -> None:
        concat = self.output_dir / "file_list.txt"
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {self.video_format} ({self.width}x{self.height})")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print(f"üîç –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.output_dir}:")
        for file_path in sorted(self.output_dir.glob("*.mp4")):
            print(f"  {file_path.name}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–ø—ã: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç animated, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–π
        id_to_clip: dict[int, Path] = {}

        # –°–Ω–∞—á–∞–ª–∞ animated
        for clip in self.output_dir.glob("scene_*_animated.mp4"):
            try:
                sid_part = clip.stem.split("_")[-2]  # scene_XXX_animated -> XXX
                sid = int(sid_part)
                id_to_clip[sid] = clip
                print(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ü–µ–Ω—É {sid}: {clip.name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã {clip.name}: {e}")
                continue

        # –ó–∞—Ç–µ–º –±–∞–∑–æ–≤—ã–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç animated
        for clip in self.output_dir.glob("scene_*.mp4"):
            name = clip.stem
            if "_animated" in name or "_part_" in name or ".normalized" in name:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ scene_XXX.mp4
                # –£–±–∏—Ä–∞–µ–º "scene_" –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                scene_id_str = name.replace("scene_", "")
                sid = int(scene_id_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                if sid not in id_to_clip:
                    id_to_clip[sid] = clip
                    print(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É {sid}: {clip.name}")
                else:
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É {sid} (–µ—Å—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑–æ–≤–æ–π —Å—Ü–µ–Ω—ã {clip.name}: {e}")
                continue

        print(f"üìã –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ {len(id_to_clip)} —Å—Ü–µ–Ω:")
        for sid in sorted(id_to_clip.keys()):
            clip_name = id_to_clip[sid].name
            clip_type = "–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è" if clip_name.endswith("_animated.mp4") else "–±–∞–∑–æ–≤–∞—è"
            print(f"  –°—Ü–µ–Ω–∞ {sid}: {clip_name} ({clip_type})")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è LTX-–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        target_width, target_height = self.width, self.height
        temp_dir = self.output_dir / "temp_normalized"
        temp_dir.mkdir(exist_ok=True)
        normalized_overrides: dict[int, Path] = {}

        for sid, clip in sorted(id_to_clip.items()):
            if not clip.name.endswith("_animated.mp4"):
                continue
            try:
                # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É, –≤—ã—Å–æ—Ç—É –∏ fps
                dim_res = subprocess.run([
                    "ffprobe", "-v", "quiet", "-select_streams", "v:0",
                    "-show_entries", "stream=width,height", "-of", "csv=p=0",
                    str(clip)
                ], capture_output=True, text=True, check=True)
                width_str, height_str = dim_res.stdout.strip().split(',')
                width, height = int(width_str), int(height_str)

                fps_res = subprocess.run([
                    "ffprobe", "-v", "quiet", "-select_streams", "v:0",
                    "-show_entries", "stream=avg_frame_rate", "-of", "csv=p=0",
                    str(clip)
                ], capture_output=True, text=True, check=True)
                avg_fr = fps_res.stdout.strip()
                try:
                    num, den = avg_fr.split('/')
                    clip_fps = int(round(float(num) / float(den))) if den != '0' else self.fps
                except Exception:
                    clip_fps = self.fps

                needs_resize = (width != target_width or height != target_height)
                needs_fps = (clip_fps != self.fps)

                if needs_resize or needs_fps:
                    normalized_file = temp_dir / f"normalized_{sid:03d}.mp4"
                    vf_filters = [
                        f"scale={target_width}:{target_height}:force_original_aspect_ratio=decrease",
                        f"pad={target_width}:{target_height}:(ow-iw)/2:(oh-ih)/2"
                    ] if needs_resize else []
                    cmd = [
                        "ffmpeg", "-y", "-i", str(clip),
                        "-c:v", "libx264", "-preset", "fast", "-crf", "23",
                        "-c:a", "aac", "-b:a", "128k",
                        "-pix_fmt", "yuv420p",
                    ]
                    if vf_filters:
                        cmd += ["-vf", ",".join(vf_filters)]
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ü–µ–ª–µ–≤–æ–º—É fps –∏ CFR
                    cmd += [
                        "-r", str(self.fps),
                        "-vsync", "cfr",
                        "-avoid_negative_ts", "make_zero",
                        "-fflags", "+genpts",
                        str(normalized_file)
                    ]
                    subprocess.run(cmd, check=True, capture_output=True)
                    normalized_overrides[sid] = normalized_file
                    print(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ {sid} -> {target_width}x{target_height}@{self.fps}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å {clip.name}: {e}")

        # –ü–∏—à–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∏–ø–æ–≤
        with concat.open("w") as fp:
            for sid in sorted(id_to_clip.keys()):
                final_clip = normalized_overrides.get(sid, id_to_clip[sid])
                fp.write(f"file '{final_clip.resolve()}'\n")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–ª–µ–π–∫–∞
        final_path = self.output_dir / "final_video.mp4"
        subprocess.run([
            "ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i", str(concat),
            "-c", "copy",
            str(final_path)
        ], check=True)
        if not final_path.exists() or final_path.stat().st_size == 0:
            raise RuntimeError("–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª final_video.mp4 –Ω–µ —Å–æ–∑–¥–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ –ø–æ –∏—Ç–æ–≥–æ–≤—ã–º –∫–ª–∏–ø–∞–º
        durs = []
        for sid in sorted(id_to_clip.keys()):
            clip = normalized_overrides.get(sid, id_to_clip[sid])
            if mp4_quick_check(clip):
                durs.append((sid, ffprobe_duration(clip)))
        cur = 0.0
        for scid, dur in sorted(durs):
            for ch in self.chunks:
                if int(ch["id"]) == scid:
                    ch["time"] = f"{self._fmt(cur)}-{self._fmt(cur + dur)}"
                    break
            cur += dur
        with open(self.chunks_file, "w", encoding="utf-8") as fp:
            json.dump(self.chunks, fp, ensure_ascii=False, indent=2)

        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        try:
            import shutil
            shutil.rmtree(temp_dir)
        except Exception:
            pass

    @staticmethod
    def _fmt(s: float) -> str:
        ms = int((s - int(s)) * 1000)
        h = int(s // 3600)
        m = int((s % 3600) // 60)
        sec = int(s % 60)
        return f"{h:02}:{m:02}:{sec:02}.{ms:03}"
    
    def _start_ltx_animations_in_background(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç LTX Video –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω –≤ —Ñ–æ–Ω–µ"""
        if not LTX_VIDEO_CONFIG["enabled"]:
            print("‚è∏Ô∏è LTX Video –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        print("üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º LTX Video –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ü–µ–Ω—ã –Ω—É–∂–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å
        strategy = LTX_VIDEO_CONFIG["scene_selection"]["strategy"]
        scenes_to_animate = []
        
        for scene_id in self.scene_ids:
            scene_num = int(scene_id)
            should_animate = False
            
            if strategy == "first_n":
                count = LTX_VIDEO_CONFIG["scene_selection"]["count"]
                if self.video_format == "shorts":
                    count = min(count, LTX_VIDEO_CONFIG["scene_selection"]["max_scenes_for_shorts"])
                should_animate = scene_num <= count
                
            elif strategy == "every_nth":
                step = LTX_VIDEO_CONFIG["scene_selection"]["step"]
                should_animate = scene_num % step == 0
                
            elif strategy == "custom_list":
                custom_scenes = LTX_VIDEO_CONFIG["scene_selection"]["custom_scenes"]
                should_animate = scene_num in custom_scenes
            
            if should_animate:
                scenes_to_animate.append(scene_num)
        
        if not scenes_to_animate:
            print("‚è≠Ô∏è –ù–µ—Ç —Å—Ü–µ–Ω –¥–ª—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏")
            return
        
        print(f"üéØ –°—Ü–µ–Ω—ã –¥–ª—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏: {scenes_to_animate}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º LTX –∞–Ω–∏–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        
        def run_ltx_animation():
            try:
                from autovid.backend.flows.steps.ltx_video_animate import LTXVideoManager
                manager = LTXVideoManager(int(self.project_id), self.video_format)
                
                # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å—Ü–µ–Ω –¥–ª—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏
                print("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å—Ü–µ–Ω –¥–ª—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏...")
                
                from concurrent.futures import ThreadPoolExecutor, as_completed
                
                def wait_and_animate(sn: int) -> bool:
                    print(f"üé¨ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–π —Å—Ü–µ–Ω—ã {sn} –¥–ª—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏...")
                    while True:
                        base_scene_path = self.output_dir / f"scene_{str(sn).zfill(3)}.mp4"
                        if base_scene_path.exists() and mp4_quick_check(base_scene_path):
                            print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ü–µ–Ω–∞ {sn} –≥–æ—Ç–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LTX")
                            break
                        time.sleep(2)
                    return manager.animate_scene(sn)
                
                with ThreadPoolExecutor(max_workers=4) as pool:
                    futures = {pool.submit(wait_and_animate, scene_num): scene_num for scene_num in scenes_to_animate}
                    for fut in as_completed(futures):
                        sn = futures[fut]
                        try:
                            ok = fut.result()
                            print(f"‚úÖ LTX –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã {sn} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {ok}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ LTX –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω—ã {sn}: {e}")
                
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ LTX –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        ltx_thread = threading.Thread(target=run_ltx_animation, daemon=True)
        ltx_thread.start()
        print(f"üöÄ LTX –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ –¥–ª—è {len(scenes_to_animate)} —Å—Ü–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏—è—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.ltx_animations = scenes_to_animate
    
    def _wait_for_ltx_animation(self) -> None:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö LTX –∞–Ω–∏–º–∞—Ü–∏–π —Å fail-fast –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π."""
        if not hasattr(self, 'ltx_animations') or not self.ltx_animations:
            print("‚è≠Ô∏è –ù–µ—Ç LTX –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return
        
        print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω: {self.ltx_animations}")
        
        # –ñ–¥–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º RUNPOD_LTX_ID
        check_interval = 3
        max_wait_seconds = 15 * 60  # 15 –º–∏–Ω—É—Ç
        waited = 0
        while True:
            completed_scenes = []
            
            for scene_id in self.ltx_animations:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                animated_path = self.output_dir / f"scene_{str(scene_id).zfill(3)}_animated.mp4"
                if animated_path.exists():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π –∏ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å
                    try:
                        if animated_path.stat().st_size > 0 and mp4_quick_check(animated_path):
                            completed_scenes.append(scene_id)
                            print(f"‚úÖ LTX –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        else:
                            print(f"‚è≥ LTX –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤)")
                    except Exception as e:
                        print(f"‚è≥ LTX –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e})")
                else:
                    print(f"‚è≥ LTX –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            # –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            if len(completed_scenes) == len(self.ltx_animations):
                print(f"üéâ –í—Å–µ LTX –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –°—Ü–µ–Ω—ã: {completed_scenes}")
                break
            
            remaining = set(self.ltx_animations) - set(completed_scenes)
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω: {sorted(remaining)}")
            time.sleep(check_interval)
            waited += check_interval

            if waited >= max_wait_seconds:
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è LTX
                ltx_id = os.getenv("RUNPOD_LTX_ID", "unknown")
                base_url = f"https://{ltx_id}-8000.proxy.runpod.net"
                raise RuntimeError(
                    "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è LTX –∞–Ω–∏–º–∞—Ü–∏–∏. "
                    f"RUNPOD_LTX_ID={ltx_id}, base_url={base_url}. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LTX —Å–µ—Ä–≤–∏—Å–∞."
                )
    
    def _start_ltx_animation_if_needed(self, scene: SceneInfo) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç LTX Video –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Å—Ü–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not LTX_VIDEO_CONFIG["enabled"]:
            return
        
        scene_num = int(scene.scene_num)
        strategy = LTX_VIDEO_CONFIG["scene_selection"]["strategy"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–∂–Ω–∞ –ª–∏ —ç—Ç–∞ —Å—Ü–µ–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
        should_animate = False
        
        if strategy == "first_n":
            count = LTX_VIDEO_CONFIG["scene_selection"]["count"]
            if self.video_format == "shorts":
                count = min(count, LTX_VIDEO_CONFIG["scene_selection"]["max_scenes_for_shorts"])
            should_animate = scene_num <= count
            
        elif strategy == "every_nth":
            step = LTX_VIDEO_CONFIG["scene_selection"]["step"]
            should_animate = scene_num % step == 0
            
        elif strategy == "custom_list":
            custom_scenes = LTX_VIDEO_CONFIG["scene_selection"]["custom_scenes"]
            should_animate = scene_num in custom_scenes
        
        if should_animate:
            print(f"üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º LTX Video –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Å—Ü–µ–Ω—ã {scene_num}")
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from autovid.backend.flows.steps.ltx_video_animate import LTXVideoManager
            manager = LTXVideoManager(int(self.project_id), self.video_format)
            manager.animate_scene(scene_num)
        else:
            print(f"‚è≠Ô∏è –°—Ü–µ–Ω–∞ {scene_num} –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è LTX Video –∞–Ω–∏–º–∞—Ü–∏–∏")
    
if __name__ == "__main__":
    project_id = sys.argv[1]
    video_format = sys.argv[2] if len(sys.argv) > 2 else "long"
    SceneAnimationManager(project_id, video_format).run()