"""
ltx_video_animate.py
-------------------
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ LTX-Video API.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è image-to-video –∞–Ω–∏–º–∞—Ü–∏–∏.
"""
import time
import json
import requests
import shutil
import subprocess
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from mutagen.mp3 import MP3
import os

from autovid.backend.config import LTX_VIDEO_CONFIG, VIDEO_FORMATS

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Å—Å–µ—Ç–æ–≤ (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "assets"
ASSETS_DIR = Path(os.getenv("ASSETS_DIR", "assets"))


@dataclass
class ScenePart:
    """–ß–∞—Å—Ç—å —Å—Ü–µ–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
    scene_id: int
    part_index: int
    start_time: float
    duration: float
    image_path: Path
    output_path: Path
    prompt: str
    seed: int


@dataclass
class LTXVideoRequest:
    """–ó–∞–ø—Ä–æ—Å –∫ LTX-Video API"""
    scene_id: str
    image_path: Path
    task_id: Optional[str] = None
    status: str = "pending"  # pending, started, success, failure
    result_path: Optional[str] = None
    retry_count: int = 0


class PromptManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, project_id: int):
        self.project_id = project_id
        self.prompts_file = ASSETS_DIR / "prompts" / str(project_id) / "image_prompts.json"
        self.prompts_cache = None
    
    def load_prompts(self) -> Dict[int, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {scene_id: prompt}"""
        if self.prompts_cache is not None:
            return self.prompts_cache
        
        try:
            if not self.prompts_file.exists():
                print(f"‚ùå –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.prompts_file}")
                return {}
            
            with open(self.prompts_file, 'r', encoding='utf-8') as f:
                prompts_data = json.load(f)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å {scene_id: prompt}
            prompts_dict = {}
            for item in prompts_data:
                if isinstance(item, dict) and "id" in item and "image_prompt" in item:
                    prompts_dict[item["id"]] = item["image_prompt"]
            
            self.prompts_cache = prompts_dict
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(prompts_dict)} –ø—Ä–æ–º–ø—Ç–æ–≤")
            return prompts_dict
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return {}
    
    def get_scene_prompt(self, scene_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ü–µ–Ω—ã"""
        prompts = self.load_prompts()
        
        if LTX_VIDEO_CONFIG["prompt_settings"]["use_original_prompts"]:
            original_prompt = prompts.get(scene_id, "")
            if original_prompt and not original_prompt.startswith("[ERROR]"):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                animation_suffix = LTX_VIDEO_CONFIG["prompt_settings"]["animation_style_suffix"]
                return f"{original_prompt}{animation_suffix}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        return LTX_VIDEO_CONFIG["prompt_settings"]["universal_prompt"]


class SceneDurationAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω"""
    
    def __init__(self, project_id: int):
        self.project_id = project_id
        self.audio_dir = ASSETS_DIR / "audio" / str(project_id)
    
    def get_scene_duration(self, scene_id: int) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        scene_formats = [
            str(scene_id).zfill(2),  # 01, 02, 03...
            str(scene_id).zfill(3),  # 001, 002, 003...
            str(scene_id)             # 1, 2, 3...
        ]
        
        for scene_format in scene_formats:
            audio_path = self.audio_dir / f"scene_{scene_format}.mp3"
            if audio_path.exists():
                try:
                    audio = MP3(audio_path)
                    duration = audio.info.length
                    print(f"üìä –°—Ü–µ–Ω–∞ {scene_id}: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration:.2f}—Å")
                    return duration
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}: {e}")
                    return 0.0
        
        print(f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}")
        return 0.0
    
    def should_split_scene(self, scene_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Å—Ü–µ–Ω—É –Ω–∞ —á–∞—Å—Ç–∏"""
        duration = self.get_scene_duration(scene_id)
        threshold = LTX_VIDEO_CONFIG["duration_settings"]["scene_split_threshold"]
        return duration > threshold
    
    def calculate_scene_parts(self, scene_id: int) -> List[Tuple[float, float]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (start_time, duration) –¥–ª—è —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã"""
        total_duration = self.get_scene_duration(scene_id)
        if total_duration <= 0:
            return []
        
        target_duration = LTX_VIDEO_CONFIG["duration_settings"]["target_animation_duration"]
        max_duration = LTX_VIDEO_CONFIG["duration_settings"]["max_animation_duration"]
        overlap = LTX_VIDEO_CONFIG["duration_settings"]["overlap_duration"]
        
        # –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, –∞–Ω–∏–º–∏—Ä—É–µ–º —Ü–µ–ª–∏–∫–æ–º
        if total_duration <= max_duration:
            return [(0.0, total_duration)]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_start = 0.0
        
        while current_start < total_duration:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞—Å—Ç–∏
            remaining = total_duration - current_start
            part_duration = min(target_duration, remaining)
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç—å—é
            if remaining - part_duration < target_duration * 0.5:
                part_duration = remaining
            
            parts.append((current_start, part_duration))
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
            if current_start + part_duration >= total_duration:
                break
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            current_start += part_duration - overlap
        
        print(f"üîÑ –°—Ü–µ–Ω–∞ {scene_id} ({total_duration:.1f}—Å) —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π:")
        for i, (start, duration) in enumerate(parts):
            print(f"  –ß–∞—Å—Ç—å {i}: {start:.1f}s - {start + duration:.1f}s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s)")
        return parts


class AdditionalImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã"""
    
    def __init__(self, project_id: int, video_format: str):
        self.project_id = project_id
        self.video_format = video_format
        self.scenes_dir = ASSETS_DIR / "scenes" / str(project_id)
        
    def generate_part_image(self, scene_id: int, part_index: int, prompt: str) -> Optional[Path]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ —Å—Ü–µ–Ω—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º seed"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flux –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            from autovid.backend.flows.steps.flux_image_gen import ImageGenerator
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —á–∞—Å—Ç–∏
            base_seed = LTX_VIDEO_CONFIG["video_params"]["seed"]
            if LTX_VIDEO_CONFIG["prompt_settings"]["vary_seeds_for_parts"]:
                part_seed = base_seed + (scene_id * 1000) + (part_index * 100)
            else:
                part_seed = base_seed
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã (–∫–∞–∫ –≤ get_or_create_part_image)
            scene_formats = [
                str(scene_id).zfill(2),  # 01, 02, 03...
                str(scene_id).zfill(3),  # 001, 002, 003...
                str(scene_id)             # 1, 2, 3...
            ]
            
            scene_format = None
            for fmt in scene_formats:
                test_image = self.scenes_dir / f"scene_{fmt}.jpg"
                if test_image.exists():
                    scene_format = fmt
                    break
            
            if not scene_format:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}")
                return None
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç)
            part_filename = f"scene_{scene_format}_part_{part_index:02d}.jpg"
            output_path = self.scenes_dir / part_filename
            
            print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}, —á–∞—Å—Ç—å {part_index} (seed: {part_seed})")
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è—é –≤: {output_path}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Flux (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            image_generator = ImageGenerator()
            result_path = image_generator.generate_single_image(
                prompt=prompt,
                filename=str(output_path),
                video_format=self.video_format,
                priority="high"
            )
            
            if result_path and result_path.exists():
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–æ: {result_path}")
                return result_path
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ {part_index} —Å—Ü–µ–Ω—ã {scene_id}")
                if output_path.exists():
                    print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ä–∞–∑–º–µ—Ä: {output_path.stat().st_size} –±–∞–π—Ç")
                    if output_path.stat().st_size == 0:
                        print(f"‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π - –≤–æ–∑–º–æ–∂–Ω–æ Flux API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏: {e}")
            import traceback
            print(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return None
    
    def get_or_create_part_image(self, scene_id: int, part_index: int, prompt: str) -> Optional[Path]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        scene_formats = [
            str(scene_id).zfill(2),  # 01, 02, 03...
            str(scene_id).zfill(3),  # 001, 002, 003...
            str(scene_id)             # 1, 2, 3...
        ]
        
        if part_index == 0:
            # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for scene_format in scene_formats:
                original_image = self.scenes_dir / f"scene_{scene_format}.jpg"
                if original_image.exists():
                    return original_image
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç —á—Ç–æ –∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for scene_format in scene_formats:
            original_image = self.scenes_dir / f"scene_{scene_format}.jpg"
            if original_image.exists():
                part_image = self.scenes_dir / f"scene_{scene_format}_part_{part_index:02d}.jpg"
                
                if part_image.exists():
                    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏: {part_image}")
                    return part_image
                
                generated = self.generate_part_image(scene_id, part_index, prompt)
                if generated is not None:
                    return generated
                # Fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                print(
                    f"‚ö†Ô∏è Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª: flux –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª scene_{scene_format}_part_{part_index:02d}.jpg; "
                    f"–∏—Å–ø–æ–ª—å–∑—É–µ–º {original_image.name}"
                )
                return original_image
        
        return None


class ScenePartManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏ —Å—Ü–µ–Ω"""
    
    def __init__(self, project_id: int, video_format: str):
        self.project_id = project_id
        self.video_format = video_format
        self.duration_analyzer = SceneDurationAnalyzer(project_id)
        self.prompt_manager = PromptManager(project_id)
        self.image_generator = AdditionalImageGenerator(project_id, video_format)
        self.output_dir = ASSETS_DIR / "video" / str(project_id)
    
    def create_scene_parts(self, scene_id: int) -> List[ScenePart]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã"""
        parts_info = self.duration_analyzer.calculate_scene_parts(scene_id)
        if not parts_info:
            print(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {scene_id}: –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å—Ç—è—Ö")
            return []
        
        print(f"üîç –°—Ü–µ–Ω–∞ {scene_id}: —Å–æ–∑–¥–∞–µ–º {len(parts_info)} —á–∞—Å—Ç–µ–π:")
        for i, (start, duration) in enumerate(parts_info):
            print(f"  –ß–∞—Å—Ç—å {i}: {start:.1f}s - {start + duration:.1f}s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s)")
        
        prompt = self.prompt_manager.get_scene_prompt(scene_id)
        parts = []
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        scene_formats = [
            str(scene_id).zfill(2),  # 01, 02, 03...
            str(scene_id).zfill(3),  # 001, 002, 003...
            str(scene_id)             # 1, 2, 3...
        ]
        
        scene_format = None
        for fmt in scene_formats:
            test_image = self.image_generator.scenes_dir / f"scene_{fmt}.jpg"
            if test_image.exists():
                scene_format = fmt
                break
        
        if not scene_format:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}")
            return []
        
        print(f"üì∏ –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã {scene_id}: {scene_format}")
        
        for part_index, (start_time, duration) in enumerate(parts_info):
            print(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å {part_index} —Å—Ü–µ–Ω—ã {scene_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏
            image_path = self.image_generator.get_or_create_part_image(scene_id, part_index, prompt)
            if not image_path:
                print(f"‚ùå –ß–∞—Å—Ç—å {part_index} —Å—Ü–µ–Ω—ã {scene_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
            scene_num_padded = str(scene_id).zfill(3)
            output_filename = f"scene_{scene_num_padded}_part_{part_index:02d}_animated.mp4"
            output_path = self.output_dir / output_filename
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —á–∞—Å—Ç–∏
            base_seed = LTX_VIDEO_CONFIG["video_params"]["seed"]
            part_seed = base_seed + (scene_id * 1000) + (part_index * 100)
            
            part = ScenePart(
                scene_id=scene_id,
                part_index=part_index,
                start_time=start_time,
                duration=duration,
                image_path=image_path,
                output_path=output_path,
                prompt=prompt,
                seed=part_seed
            )
            parts.append(part)
            print(f"‚úÖ –ß–∞—Å—Ç—å {part_index} —Å—Ü–µ–Ω—ã {scene_id} —Å–æ–∑–¥–∞–Ω–∞: {output_filename}")
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}")
        return parts
    
    def merge_scene_parts(self, scene_id: int, parts: List[ScenePart]) -> bool:
        """–°–∫–ª–µ–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É"""
        if not parts:
            return False
        
        try:
            # –ï–¥–∏–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π LTX-—Ä–µ–∑—É–ª—å—Ç–∞—Ç: scene_XXX_animated.mp4 (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∏–ø)
            scene_num_padded = str(scene_id).zfill(3)
            final_output = self.output_dir / f"scene_{scene_num_padded}_animated.mp4"
            
            if len(parts) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                parts[0].output_path.rename(final_output)
                print(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_id}: –æ–¥–Ω–∞ —á–∞—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {final_output}")
                # –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫
                self._mux_audio_into_video(final_output, scene_id)
                
                # –ï–¥–∏–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: FPS + —Ü–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                print(f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ü–µ–Ω—É {scene_id} –∫ —Ü–µ–ª–µ–≤–æ–º—É FPS/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é...")
                from autovid.backend.config import VIDEO_FORMATS
                target = VIDEO_FORMATS.get(self.video_format, VIDEO_FORMATS["long"])
                temp_normalized = final_output.with_suffix('.normalized.mp4')
                if normalize_video_to_target(final_output, temp_normalized, target["WIDTH"], target["HEIGHT"], target.get("FPS", 25)):
                    final_output.unlink()
                    temp_normalized.rename(final_output)
                    print(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_id} –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞: {final_output}")
                else:
                    print(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {scene_id} –Ω–µ –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                
                return True
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –¥–ª—è ffmpeg
            concat_file = self.output_dir / f"concat_scene_{scene_num_padded}.txt"
            
            with open(concat_file, 'w', encoding='utf-8') as f:
                for part in sorted(parts, key=lambda p: p.part_index):
                    if part.output_path.exists():
                        f.write(f"file '{part.output_path.absolute()}'\n")
            
            # –°–∫–ª–µ–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ ffmpeg
            cmd = [
                'ffmpeg', '-y',
                '-f', 'concat',
                '-safe', '0',
                '-i', str(concat_file),
                '-c', 'copy',
                str(final_output)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_id}: {len(parts)} —á–∞—Å—Ç–µ–π —Å–∫–ª–µ–µ–Ω—ã –≤ {final_output}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                concat_file.unlink(missing_ok=True)
                for part in parts:
                    part.output_path.unlink(missing_ok=True)
                
                # –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫
                self._mux_audio_into_video(final_output, scene_id)
                
                # –ï–¥–∏–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: FPS + —Ü–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                print(f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É {scene_id} –∫ —Ü–µ–ª–µ–≤–æ–º—É FPS/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é...")
                from autovid.backend.config import VIDEO_FORMATS
                target = VIDEO_FORMATS.get(self.video_format, VIDEO_FORMATS["long"])
                temp_normalized = final_output.with_suffix('.normalized.mp4')
                if normalize_video_to_target(final_output, temp_normalized, target["WIDTH"], target["HEIGHT"], target.get("FPS", 25)):
                    final_output.unlink()
                    temp_normalized.rename(final_output)
                    print(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_id} –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞: {final_output}")
                else:
                    print(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞ {scene_id} –Ω–µ –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏ —Å—Ü–µ–Ω—ã {scene_id}: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–ª–µ–π–∫–µ —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã {scene_id}: {e}")
            return False

    def _mux_audio_into_video(self, video_path: Path, scene_id: int) -> None:
        """–ü–æ–¥–º–µ—à–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ–∑–≤—É—á–∫—É —Å—Ü–µ–Ω—ã –≤ –≥–æ—Ç–æ–≤–æ–µ LTX-–≤–∏–¥–µ–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ)."""
        try:
            # –ò—â–µ–º –∞—É–¥–∏–æ –≤ 3/2-–∑–Ω–∞—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            audio_dir = self.duration_analyzer.audio_dir
            audio_path = None
            for fmt in (str(scene_id).zfill(3), str(scene_id).zfill(2), str(scene_id)):
                candidate = audio_dir / f"scene_{fmt}.mp3"
                if candidate.exists():
                    audio_path = candidate
                    break
            if not audio_path:
                print(f"‚ö†Ô∏è –ê—É–¥–∏–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞")
                return

            temp_with_audio = video_path.with_suffix(".with_audio.tmp.mp4")
            cmd = [
                'ffmpeg', '-y',
                '-i', str(video_path),
                '-i', str(audio_path),
                '-map', '0:v:0', '-map', '1:a:0',
                '-c:v', 'copy', '-c:a', 'aac',
                '-shortest', str(temp_with_audio)
            ]
            res = subprocess.run(cmd, capture_output=True, text=True)
            if res.returncode == 0 and temp_with_audio.exists():
                video_path.unlink(missing_ok=True)
                temp_with_audio.rename(video_path)
                print(f"üîä –î–æ–±–∞–≤–ª–µ–Ω –∑–≤—É–∫ –≤ —Å—Ü–µ–Ω—É {scene_id}: {video_path}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}: {res.stderr}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")


class SceneSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
    
    @staticmethod
    def get_scenes_to_animate(project_id: int, video_format: str, total_scenes: int) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ü–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        config = LTX_VIDEO_CONFIG["scene_selection"]
        strategy = config["strategy"]
        
        if strategy == "first_n":
            count = config["count"]
            if video_format == "shorts":
                count = min(count, config["max_scenes_for_shorts"], total_scenes)
            else:
                count = min(count, total_scenes)
            return list(range(1, count + 1))
        
        elif strategy == "every_nth":
            step = config["step"]
            return [i for i in range(1, total_scenes + 1) if i % step == 0]
        
        elif strategy == "custom_list":
            custom_scenes = config["custom_scenes"]
            return [s for s in custom_scenes if s <= total_scenes]
        
        else:
            return []  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è


class LTXVideoAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LTX-Video API"""
    
    def __init__(self):
        # –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π RUNPOD_LTX_ID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞,
        # –∞ –Ω–µ –∏–∑ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        ltx_id = os.getenv("RUNPOD_LTX_ID", "unknown")
        self.base_url = f"https://{ltx_id}-8000.proxy.runpod.net"
        self.timeout = LTX_VIDEO_CONFIG["timeout"]
        self.max_retries = LTX_VIDEO_CONFIG["max_retries"]
        try:
            print(f"üîß LTX API: base_url={self.base_url} (RUNPOD_LTX_ID={ltx_id})")
        except Exception:
            pass
    
    def submit_video_request(self, image_path: Path, prompt: str, video_format: str, duration: float, seed: int = None) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç task_id"""
        format_config = VIDEO_FORMATS.get(video_format, VIDEO_FORMATS["long"])

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞ –¥–ª—è LTX: –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è LTX-–∑–∞–ø—Ä–æ—Å–∞
        if video_format == "shorts":
            ltx_width, ltx_height = 720, 1280
        elif video_format == "long":
            ltx_width, ltx_height = 1280, 720
        else:
            ltx_width, ltx_height = format_config["WIDTH"], format_config["HEIGHT"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        fps = format_config.get("FPS", 25)
        # –¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ FPS
        target_frames = max(1, round(duration * fps))
        
        try:
            with open(image_path, 'rb') as image_file:
                files = {'image': image_file}
                data = {
                    'prompt': prompt,
                    'negative_prompt': LTX_VIDEO_CONFIG["video_params"]["negative_prompt"],
                    'expected_width': ltx_width,
                    'expected_height': ltx_height,
                    'num_frames': target_frames,
                    'seed': seed or LTX_VIDEO_CONFIG["video_params"]["seed"]
                }
                
                response = requests.post(
                    f"{self.base_url}/generate",
                    files=files,
                    data=data,
                    timeout=self.timeout
                )
                response.raise_for_status()
                
                result = response.json()
                task_id = result.get("task_id")
                print(f"üé¨ LTX-Video –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {task_id} (—Ä–∞–∑–º–µ—Ä: {ltx_width}x{ltx_height}, –∫–∞–¥—Ä–æ–≤: {target_frames}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å)")
                return task_id
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ LTX-Video –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def check_status(self, task_id: str) -> Tuple[str, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, result_path)"""
        try:
            response = requests.get(
                f"{self.base_url}/status/{task_id}",
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            status = result.get("status", "UNKNOWN")
            result_path = result.get("result") if status == "SUCCESS" else None
            
            return status, result_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {task_id}: {e}")
            return "ERROR", None
    
    def download_video(self, result_path: str, output_path: Path) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—à–µ –ø–æ —É—Ä–æ–≤–Ω—é)."""
        try:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL c —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ result_path
            def build_url(base_url: str, rp: str) -> str:
                if rp.startswith("http://") or rp.startswith("https://"):
                    return rp
                path = rp.lstrip("/")
                if path.startswith("video/"):
                    return f"{base_url}/{path}"
                if path.startswith("task_results/"):
                    return f"{base_url}/video/{path}"
                # –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞
                return f"{base_url}/video/task_results/{path}"

            url = build_url(self.base_url, result_path)

            response = requests.get(url, stream=True, timeout=self.timeout)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ—â–∞–µ–º
            temp_path = output_path.with_suffix('.tmp')
            with open(temp_path, 'wb') as f:
                shutil.copyfileobj(response.raw, f)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞
            temp_path.rename(output_path)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return False


class LTXVideoManager:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è image-to-video –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, project_id: int, video_format: str):
        self.project_id = project_id
        self.video_format = video_format
        self.api_client = LTXVideoAPIClient()
        self.part_manager = ScenePartManager(project_id, video_format)
        
        self.scenes_dir = ASSETS_DIR / "scenes" / str(project_id)
        self.video_dir = ASSETS_DIR / "video" / str(project_id)
        self.chunks_file = ASSETS_DIR / "chunks" / str(project_id) / "chunks.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ö
        with open(self.chunks_file, 'r', encoding='utf-8') as f:
            self.chunks = json.load(f)
        
        self.total_scenes = len(self.chunks)
        self.scenes_to_animate = SceneSelector.get_scenes_to_animate(
            project_id, video_format, self.total_scenes
        )
        
        print(f"üéØ LTX-Video: –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–æ {len(self.scenes_to_animate)} —Å—Ü–µ–Ω –∏–∑ {self.total_scenes}")
        print(f"üìã –°—Ü–µ–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏: {self.scenes_to_animate}")
    
    def should_animate_scene(self, scene_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Å—Ü–µ–Ω—É"""
        return scene_id in self.scenes_to_animate
    
    def find_scene_files(self, scene_id: int) -> Tuple[Optional[Path], Optional[Path]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å 2 –∏ 3 —Ü–∏—Ñ—Ä–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º —Ä–µ–Ω–¥–µ—Ä–æ–º."""
        # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        scene_formats = [
            str(scene_id).zfill(2),  # 01, 02, 03...
            str(scene_id).zfill(3),  # 001, 002, 003...
            str(scene_id)             # 1, 2, 3...
        ]

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path: Optional[Path] = None
        discovered_format: Optional[str] = None
        for fmt in scene_formats:
            for ext in ["jpg", "jpeg", "png"]:
                potential_path = self.scenes_dir / f"scene_{fmt}.{ext}"
                if potential_path.exists():
                    image_path = potential_path
                    discovered_format = fmt
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
                    break
            if image_path:
                break

        # –ò—â–µ–º –≤–∏–¥–µ–æ: –ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2- –∏ 3-–∑–Ω–∞—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        video_path: Optional[Path] = None
        video_candidates: List[Path] = []

        if discovered_format:
            # –ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            video_candidates.append(self.video_dir / f"scene_{discovered_format}.mp4")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–π –∂–µ —Å—Ü–µ–Ω—ã (2 <-> 3 —Ü–∏—Ñ—Ä—ã)
            if len(discovered_format) == 2:
                video_candidates.append(self.video_dir / f"scene_{str(scene_id).zfill(3)}.mp4")
            elif len(discovered_format) == 3:
                video_candidates.append(self.video_dir / f"scene_{str(scene_id).zfill(2)}.mp4")
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ
            video_candidates.extend([
                self.video_dir / f"scene_{str(scene_id).zfill(3)}.mp4",
                self.video_dir / f"scene_{str(scene_id).zfill(2)}.mp4",
            ])

        for candidate in video_candidates:
            if candidate.exists():
                video_path = candidate
                break

        return image_path, video_path
    
    def animate_scene_part(self, part: ScenePart) -> bool:
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –æ–¥–Ω—É —á–∞—Å—Ç—å —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ LTX-Video API"""
        print(f"üé¨ –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç—å {part.part_index} —Å—Ü–µ–Ω—ã {part.scene_id} ({part.duration:.1f}—Å)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        task_id = self.api_client.submit_video_request(
            part.image_path, 
            part.prompt, 
            self.video_format,
            part.duration,
            part.seed
        )
        
        if not task_id:
            return False
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å polling
        polling_interval = LTX_VIDEO_CONFIG["polling_interval"]
        max_wait_time = 600  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        elapsed = 0
        
        while elapsed < max_wait_time:
            time.sleep(polling_interval)
            elapsed += polling_interval
            
            status, result_path = self.api_client.check_status(task_id)
            print(f"üìä –ß–∞—Å—Ç—å {part.part_index} —Å—Ü–µ–Ω—ã {part.scene_id}: —Å—Ç–∞—Ç—É—Å {status}")
            
            if status == "SUCCESS" and result_path:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å
                success = self.api_client.download_video(result_path, part.output_path)
                if success:
                    print(f"‚úÖ –ß–∞—Å—Ç—å {part.part_index} —Å—Ü–µ–Ω—ã {part.scene_id} —É—Å–ø–µ—à–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å")
                    return False
                    
            elif status == "FAILURE":
                print(f"‚ùå LTX-Video –æ—à–∏–±–∫–∞ –¥–ª—è —á–∞—Å—Ç–∏ {part.part_index} —Å—Ü–µ–Ω—ã {part.scene_id}")
                return False
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏ {part.part_index} —Å—Ü–µ–Ω—ã {part.scene_id}")
        return False
    
    def animate_scene(self, scene_id: int) -> bool:
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω—É (–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—É—é –Ω–∞ —á–∞—Å—Ç–∏) —á–µ—Ä–µ–∑ LTX-Video API"""
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å—Ü–µ–Ω—ã {scene_id}")
        
        if not LTX_VIDEO_CONFIG["enabled"]:
            print(f"‚è∏Ô∏è LTX-Video –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if not self.should_animate_scene(scene_id):
            print(f"‚è≠Ô∏è –°—Ü–µ–Ω–∞ {scene_id} –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
            return False
        
        image_path, video_path = self.find_scene_files(scene_id)
        
        if not image_path or not image_path.exists():
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        if not video_path or not video_path.exists():
            print(f"‚è≥ –í–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ")
            return False
        
        print(f"üìÅ –°—Ü–µ–Ω–∞ {scene_id}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path.name}, –≤–∏–¥–µ–æ {video_path.name}")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏ —Å—Ü–µ–Ω—ã
        scene_parts = self.part_manager.create_scene_parts(scene_id)
        if not scene_parts:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Å—Ç–∏ –¥–ª—è —Å—Ü–µ–Ω—ã {scene_id}")
            return False
        
        print(f"üéØ –°—Ü–µ–Ω–∞ {scene_id}: –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–æ {len(scene_parts)} —á–∞—Å—Ç–µ–π")
        
        # –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        animated_parts = []
        for part in scene_parts:
            print(f"üîÑ –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç—å {part.part_index + 1}/{len(scene_parts)} —Å—Ü–µ–Ω—ã {scene_id}")
            success = self.animate_scene_part(part)
            if success:
                animated_parts.append(part)
                print(f"‚úÖ –ß–∞—Å—Ç—å {part.part_index} —Å—Ü–µ–Ω—ã {scene_id} —É—Å–ø–µ—à–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å {part.part_index} —Å—Ü–µ–Ω—ã {scene_id}")
        
        print(f"üìä –°—Ü–µ–Ω–∞ {scene_id}: –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–æ {len(animated_parts)} –∏–∑ {len(scene_parts)} —á–∞—Å—Ç–µ–π")
        
        # –ï—Å–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏, —Å–∫–ª–µ–∏–≤–∞–µ–º –∏—Ö
        if len(animated_parts) == len(scene_parts):
            print(f"üîó –°–∫–ª–µ–∏–≤–∞–µ–º {len(scene_parts)} —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã {scene_id}")
            success = self.part_manager.merge_scene_parts(scene_id, animated_parts)
            if success:
                print(f"‚úÖ –°—Ü–µ–Ω–∞ {scene_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞ ({len(scene_parts)} —á–∞—Å—Ç–µ–π)")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–ª–µ–∏—Ç—å —á–∞—Å—Ç–∏ —Å—Ü–µ–Ω—ã {scene_id}")
                return False
        else:
            print(f"‚ùå –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ {len(animated_parts)} –∏–∑ {len(scene_parts)} —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã {scene_id}")
            return False


def normalize_video_to_target(input_path: Path, output_path: Path, target_width: int, target_height: int, target_fps: int = 25) -> bool:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–∏–¥–µ–æ –∫ –∑–∞–¥–∞–Ω–Ω—ã–º FPS –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (scale+pad) –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∫–ª–µ–π–∫–∏."""
    try:
        cmd = [
            'ffmpeg', '-y',
            '-i', str(input_path),
            '-c:v', 'libx264', '-preset', 'superfast', '-crf', '23',
            '-c:a', 'aac', '-b:a', '128k',
            '-pix_fmt', 'yuv420p',
            '-vf', f'scale={target_width}:{target_height}:force_original_aspect_ratio=decrease,pad={target_width}:{target_height}:(ow-iw)/2:(oh-ih)/2',
            '-r', str(target_fps),
            str(output_path)
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ {target_width}x{target_height}@{target_fps}: {input_path.name}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ {input_path.name}: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ {input_path.name}: {e}")
        return False


def animate_scenes_for_project(project_id: int, video_format: str) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ü–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞"""
    manager = LTXVideoManager(project_id, video_format)
    
    results = {
        "total_scenes": manager.total_scenes,
        "scenes_to_animate": manager.scenes_to_animate,
        "animated_scenes": [],
        "failed_scenes": [],
        "skipped_scenes": []
    }
    
    for scene_id in manager.scenes_to_animate:
        print(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ü–µ–Ω—É {scene_id}")
        
        success = manager.animate_scene(scene_id)
        if success:
            results["animated_scenes"].append(scene_id)
        else:
            results["failed_scenes"].append(scene_id)
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
    all_scene_ids = set(range(1, manager.total_scenes + 1))
    processed_scenes = set(manager.scenes_to_animate)
    results["skipped_scenes"] = list(all_scene_ids - processed_scenes)
    
    print(f"üéØ LTX-Video —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–æ {len(results['animated_scenes'])}, "
          f"–æ—à–∏–±–æ–∫ {len(results['failed_scenes'])}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {len(results['skipped_scenes'])}")
    
    return results 