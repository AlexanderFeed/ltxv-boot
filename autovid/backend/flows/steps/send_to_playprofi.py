"""
send_to_playprofi.py
-------------------
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ PlayProfi.
–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""
import requests
from pathlib import Path
import time
import json
from requests_toolbelt.multipart.encoder import MultipartEncoder, MultipartEncoderMonitor
import urllib3
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from typing import Dict, Any, Optional
from dataclasses import dataclass

from autovid.backend.config import PLAYPROFI_CONFIG

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


@dataclass
class PlayProfiConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ PlayProfi"""
    api_url: str = PLAYPROFI_CONFIG["api_url"]
    timeout: int = PLAYPROFI_CONFIG["timeout"]
    max_retries: int = PLAYPROFI_CONFIG["max_retries"]
    backoff_factor: int = PLAYPROFI_CONFIG["backoff_factor"]
    pool_connections: int = PLAYPROFI_CONFIG["pool_connections"]
    pool_maxsize: int = PLAYPROFI_CONFIG["pool_maxsize"]
    verify_ssl: bool = PLAYPROFI_CONFIG["verify_ssl"]  

class FileValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_id: int, required_files: Dict[str, Path]):
        self.project_id = project_id
        self.required_files = required_files
    
    def validate_files(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        missing_files = []
        for name, path in self.required_files.items():
            if not path.exists():
                missing_files.append(f"{name} ({path})")
        
        if missing_files:
            raise FileNotFoundError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    
    def validate_project_data(self, project_data: Dict[str, Any]) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
        required_fields = ["prefix_code"]
        missing_fields = []
        for field in required_fields:
            if field not in project_data or not project_data[field]:
                missing_fields.append(field)
        
        if missing_fields:
            raise ValueError(f"–í –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
    
    def get_file_paths(self) -> Dict[str, Path]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"""
        return self.required_files.copy()


class UploadSessionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    def __init__(self, config: Optional[PlayProfiConfig] = None):
        self.config = config or PlayProfiConfig()
        self.session = self._create_session()
    
    def _create_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        retry_strategy = Retry(
            total=self.config.max_retries,
            backoff_factor=self.config.backoff_factor,
            status_forcelist=[500, 502, 503, 504]
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = HTTPAdapter(
            max_retries=retry_strategy,
            pool_connections=self.config.pool_connections,
            pool_maxsize=self.config.pool_maxsize
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∫ —Å–µ—Å—Å–∏–∏
        session.mount("https://", adapter)
        session.mount("http://", adapter)
        
        return session


class ProgressCallback:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    def __init__(self, total_size: int):
        self.total_size = total_size
        self.start_time = time.time()
    
    def __call__(self, monitor: MultipartEncoderMonitor) -> None:
        """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        percent = monitor.bytes_read / self.total_size * 100
        speed = monitor.bytes_read / 1024 / 1024 / (time.time() - self.start_time)
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5% –∏–ª–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        if percent - getattr(self, '_last_percent', 0) >= 5 or current_time - getattr(self, '_last_time', 0) >= 5:
            print(f"\r–ó–∞–≥—Ä—É–∑–∫–∞: {percent:.1f}% ({monitor.bytes_read/1024/1024:.2f} –ú–ë / {self.total_size/1024/1024:.2f} –ú–ë) | {speed:.2f} –ú–ë/—Å–µ–∫", end="")
            self._last_percent = percent
            self._last_time = current_time


class PlayProfiUploader:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ PlayProfi"""
    
    def __init__(self, project_data: Dict[str, Any], required_files: Dict[str, Path], config: Optional[PlayProfiConfig] = None):
        self.config = config or PlayProfiConfig()
        self.project_data = project_data
        self.file_validator = FileValidator(project_data["project_id"], required_files)
        self.session_manager = UploadSessionManager(config)
    
    def prepare_upload_data(self, project_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        file_paths = self.file_validator.get_file_paths()
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º metadata –≤ JSON —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        metadata = project_data.get("project_metadata", {})
        if isinstance(metadata, dict):
            metadata = json.dumps(metadata, ensure_ascii=False)
        elif metadata is None:
            metadata = "{}"
        
        return {
            "channel_id": str(project_data["channel_id"]),
            "prefix_code": str(project_data["prefix_code"]),
            "task_id": str(project_data["task_id"]),
            "project_metadata": metadata,
            "montage_file": ("video", file_paths["video"].open("rb"), "video/mp4"),
            "scenario_file": ("script.txt", file_paths["script"].open("rb"), "text/plain"),
            "preview_file": ("thumbnail.jpg", file_paths["thumbnail"].open("rb"), "image/jpeg"),
            "chunks_file": ("chunks.json", file_paths["chunks"].open("rb"), "application/json"),
            "image_prompts_file": ("prompts.json", file_paths["prompts"].open("rb"), "application/json"),
            "voiceover_file": ("voiceover.mp3", file_paths["voiceover"].open("rb"), "audio/mpeg")
        }
    
    def upload_files(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –Ω–∞ PlayProfi"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
        self.file_validator.validate_files()
        self.file_validator.validate_project_data(self.project_data)
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {self.project_data['project_id']} –Ω–∞ PlayProfi...")
        print(f"üì∫ –ö–∞–Ω–∞–ª ID: {self.project_data['channel_id']}")
        print(f"üé¨ –ü—Ä–µ—Ñ–∏–∫—Å: {self.project_data['prefix_code']}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_data = self.prepare_upload_data(self.project_data)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ project_metadata –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        try:
            metadata_str = upload_data.get("project_metadata", "")
            meta_keys = []
            title = None
            desc_len = 0
            tags_count = 0
            try:
                meta_obj = json.loads(metadata_str) if isinstance(metadata_str, str) else metadata_str
                if isinstance(meta_obj, dict):
                    meta_keys = list(meta_obj.keys())
                    title = meta_obj.get("title")
                    desc_len = len(meta_obj.get("description", ""))
                    tags = meta_obj.get("tags", [])
                    tags_count = len(tags) if isinstance(tags, list) else 0
            except Exception as e:
                print(f"‚ö†Ô∏è project_metadata JSON parse error: {e}")
            print(
                f"üßæ project_metadata: len={len(metadata_str) if isinstance(metadata_str, str) else 'n/a'}",
                f"keys={meta_keys}",
                f"title={title!r}",
                f"description_len={desc_len}",
                f"tags_count={tags_count}",
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Logging project_metadata failed: {e}")
        
        # –°–æ–∑–¥–∞–µ–º multipart encoder
        encoder = MultipartEncoder(fields=upload_data)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ POST
        try:
            print(f"üåê PlayProfi URL: {self.config.api_url}")
            print(f"üîê verify_ssl={self.config.verify_ssl} | timeout={self.config.timeout}s | content_length={encoder.len} | content_type={encoder.content_type}")
        except Exception as e:
            print(f"‚ö†Ô∏è Logging network params failed: {e}")
        
        # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        callback = ProgressCallback(encoder.len)
        monitor = MultipartEncoderMonitor(encoder, callback)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        try:
            response = self.session_manager.session.post(
                self.config.api_url,
                data=monitor,
                headers={
                    "Content-Type": monitor.content_type,
                    "Accept": "application/json",
                    "Connection": "close",
                },
                timeout=self.config.timeout,
                verify=self.config.verify_ssl
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ PlayProfi")
                print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                
                return {
                    "success": True,
                    "project_id": self.project_data["project_id"],
                    "response": result
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ PlayProfi: {response.status_code}")
                print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                
                return {
                    "success": False,
                    "project_id": self.project_data["project_id"],
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ PlayProfi: {e}")
            
            return {
                "success": False,
                "project_id": self.project_data["project_id"],
                "error": str(e)
            }
