import json
import os
import re
from pathlib import Path
from typing import Optional, List, Dict, Any
from pydub import AudioSegment
from autovid.backend.flows.config.celery_app import app
    
from autovid.backend.flows.steps.voiceover import VoiceoverManager
from autovid.backend.flows.utils.logging import with_stage_logging

class AudioFileManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, project_id: int, chunks_path: Path):
        self.project_id = project_id
        self.chunks_path = chunks_path   
    
    def load_chunks(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.chunks_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª —á–∞–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.chunks_path}")
        
        with open(self.chunks_path, "r", encoding="utf-8") as f:
            return json.load(f)
    
    def merge_audio_files(self, audio_dir: Path, output_filename: str = "merged_output.mp3") -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        if not audio_dir.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {audio_dir}")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        def extract_number(filename):
            match = re.search(r"(\d+)", filename)
            return int(match.group(1)) if match else -1
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ–º–µ—Ä—É
        files = sorted(
            [f for f in os.listdir(audio_dir) if f.endswith(".mp3")],
            key=extract_number
        )
        
        if not files:
            raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {audio_dir}")
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        combined = AudioSegment.empty()
        for filename in files:
            file_path = audio_dir / filename
            audio = AudioSegment.from_file(str(file_path))
            combined += audio
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        output_path = audio_dir / output_filename
        combined.export(str(output_path), format="mp3", bitrate="192k")
        
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ {output_path}")
        return str(output_path)

@app.task(queue="autovid_voiceover")
@with_stage_logging("voiceover")
def generate_voiceover(project_id: int, specific_chunk_id: Optional[int] = None, merge_audio: bool = True):
    try:
        assets_dir = Path(os.getenv("ASSETS_DIR", "assets"))
        chunks_path = assets_dir / "chunks" / str(project_id) / "chunks.json"
        audio_dir = assets_dir / "audio" / str(project_id)
        audio_dir.mkdir(parents=True, exist_ok=True)
        
        audio_manager = AudioFileManager(project_id, chunks_path)
        chunks = audio_manager.load_chunks()

        audio_files = VoiceoverManager(project_id, chunks, audio_dir).generate_all_voiceovers(specific_chunk_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        merged_file_path = None
        if merge_audio and audio_files:
            try:
                merged_file_path = audio_manager.merge_audio_files(audio_dir)
                print(f"üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {merged_file_path}")
            except Exception as merge_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {merge_error}")
        
        return audio_files
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏: {e}")
        raise