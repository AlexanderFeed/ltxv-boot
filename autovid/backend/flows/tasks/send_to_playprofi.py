from typing import Dict, Any
from pathlib import Path
import os
import shutil
from autovid.backend.flows.config.celery_app import app
from autovid.backend.flows.steps.send_to_playprofi import PlayProfiUploader
from autovid.backend.flows.utils.logging import with_stage_logging
from autovid.backend.models.db_utils import get_project_by_id, get_db_session

class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, project_id: int):
        self.project_id = project_id
    
    def load_project_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            project = get_project_by_id(self.project_id)
            if not project:
                raise ValueError(f"–ü—Ä–æ–µ–∫—Ç {self.project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            project_data = {
                "project_id": self.project_id,
                "title": project.title,
                "description": project.description,
                "channel_id": project.channel_id,
                "prefix_code": project.prefix_code,
                "task_id": project.task_id,
                "video_format": project.video_format,
                "project_metadata": project.project_metadata,
                "metadata": project.project_metadata or {}
            }
            
            return project_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î: {e}")
            raise
        
    def update_playprofi_status(self, uploaded: bool = True) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ PlayProfi –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            project = get_project_by_id(self.project_id)
            if not project:
                raise ValueError(f"–ü—Ä–æ–µ–∫—Ç {self.project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if not project.project_metadata:
                project.project_metadata = {}
            
            project.project_metadata["playprofi_uploaded"] = uploaded
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with get_db_session() as session:
                session.merge(project)
                session.commit()
                
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å PlayProfi –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: uploaded={uploaded}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PlayProfi –≤ –ë–î: {e}")
            raise
    
    def cleanup_project_files(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ assets –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            assets_dir = Path(os.getenv("ASSETS_DIR", "assets"))
            project_id_str = str(self.project_id)
            
            # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            paths_to_remove = [
                assets_dir / "video" / project_id_str,
                assets_dir / "scripts" / project_id_str,
                assets_dir / "chunks" / project_id_str,
                assets_dir / "prompts" / project_id_str,
                assets_dir / "audio" / project_id_str,
                assets_dir / "scripts" / project_id_str,
                assets_dir / "thumbnail" / f"thumbnail_{self.project_id}.jpg",
            ]
            
            for path in paths_to_remove:
                if path.exists():
                    if path.is_file():
                        path.unlink()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}")
                    elif path.is_dir():
                        shutil.rmtree(path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path}")
            
            print(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ {self.project_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ assets")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")

@app.task(queue="send_to_cdn")
@with_stage_logging("send_to_cdn")
def send_to_cdn(project_id: int):
    db_manager = DatabaseManager(project_id)
    
    assets_dir = Path(os.getenv("ASSETS_DIR", "assets"))
    required_files = {
        "video": assets_dir / "video" / str(project_id) / "final_video.mp4",
        "script": assets_dir / "scripts" / str(project_id) / "script.txt",
        "thumbnail": assets_dir / "thumbnail" / f"thumbnail_{project_id}.jpg",
        "chunks": assets_dir / "chunks" / str(project_id) / "chunks.json",
        "prompts": assets_dir / "prompts" / str(project_id) / "image_prompts.json",
        "voiceover": assets_dir / "audio" / str(project_id) / "merged_output.mp3",
    }

    try:
        project_data = db_manager.load_project_data()
        if not project_data:
            print(f"‚ùå –ü—Ä–æ–µ–∫—Ç {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        result = PlayProfiUploader(project_data, required_files).upload_files()
        db_manager.update_playprofi_status(result["success"])
        
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        if result.get("success", False):
            db_manager.cleanup_project_files()
        
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ PlayProfi: {e}")
        raise