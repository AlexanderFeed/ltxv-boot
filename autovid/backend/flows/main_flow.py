from celery import chain, group
import redis

from autovid.backend.flows.config.celery_app import app
from autovid.backend.models.db_utils import update_project_status
from autovid.backend.flows.tasks.generate_script import generate_script
from autovid.backend.flows.tasks.generate_metadata import generate_metadata
from autovid.backend.flows.tasks.generate_chunks import generate_chunks
from autovid.backend.flows.tasks.generate_video import generate_video
from autovid.backend.flows.tasks.send_to_playprofi import send_to_cdn


# Redis –¥–ª—è —Ñ–ª–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
r = redis.Redis(host='localhost', port=6379, db=5, decode_responses=True)

@app.task
def mark_done(key):
    r.set(key, '1')

def is_paused(project_id):
    return r.get(f"{project_id}:paused") == '1'

def acquire_once(key: str, ttl_seconds: int = 6 * 3600) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–¥–∏–Ω —Ä–∞–∑ (–∞—Ç–æ–º–∞—Ä–Ω–æ). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ."""
    try:
        return bool(r.set(key, '1', nx=True, ex=ttl_seconds))
    except Exception:
        # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å Redis –ª—É—á—à–µ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω
        return True

@app.task
def try_generate_video(project_id, video_format):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã voiceover –∏ images"""
    if is_paused(project_id):
        print(f"‚è∏ Project {project_id} is paused. Skipping video generation.")
        return
    voiceover_ready = r.get(f"{project_id}:voiceover_ready")
    images_ready = r.get(f"{project_id}:images_ready")
    if voiceover_ready and images_ready:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑
        if not acquire_once(f"{project_id}:video_started"):
            print(f"‚è≠Ô∏è Video already started for project {project_id}, skipping duplicate launch")
            return
        print(f"‚úÖ Conditions met. Generating video for project {project_id}")
        # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ CDN
        chain(
            generate_video.si(project_id, video_format),
            try_generate_final_video.si(project_id, video_format)
        ).apply_async()
    else:
        print(f"‚è≥ Waiting for other parts. Current: voiceover={voiceover_ready}, images={images_ready}")

@app.task
def try_generate_final_video(project_id, video_format):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ CDN –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ"""
    if is_paused(project_id):
        print(f"‚è∏ Project {project_id} is paused. Skipping final video generation.")
        return
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ CDN
    if not acquire_once(f"{project_id}:cdn_enqueued"):
        print(f"‚è≠Ô∏è CDN already enqueued for project {project_id}, skipping duplicate send")
        return

    print(f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ CDN –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    send_to_cdn.delay(project_id)

@app.task
def start_post_chunks_branches(project_id, video_format):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç voiceover_branch –∏ prompts_branch –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è chunks"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º post_chunks –≤–µ—Ç–≤–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from autovid.backend.flows.tasks.generate_voiceover import generate_voiceover
    from autovid.backend.flows.tasks.generate_prompts import generate_prompts
    from autovid.backend.flows.tasks.generate_images import generate_images
    from autovid.backend.flows.tasks.generate_thumbnail import generate_thumbnail
    
    # –í–µ—Ç–≤–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ—Å–ª–µ generate_chunks
    voiceover_branch = chain(
        generate_voiceover.si(project_id, specific_chunk_id=None),
        mark_done.si(f"{project_id}:voiceover_ready"),
        try_generate_video.si(project_id, video_format)
    )

    # –Ø–≤–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –æ—á–µ—Ä–µ–¥—è–º –∏ –¥–µ–ª–∞–µ–º –∏—Ö immutable, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ
    prompts_branch = chain(
        generate_prompts.si(project_id).set(queue="prompts"),
        generate_thumbnail.si(project_id, video_format).set(queue="thumbnails"),
        generate_images.si(project_id, video_format).set(queue="images"),
        mark_done.si(f"{project_id}:images_ready"),
        try_generate_video.si(project_id, video_format)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –≤–µ—Ç–≤–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    print(f"üì¢ –ó–∞–ø—É—Å–∫–∞–µ–º voiceover –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    voiceover_branch.apply_async()
    print(f"üñºÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º prompts –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    prompts_branch.apply_async()

@app.task
def video_pipeline(topic, chapters, project_id, video_format="long"):
    if is_paused(project_id):
        print(f"‚è∏ Project {project_id} is paused. Skipping pipeline.")
        return
    print(f"üöÄ Starting pipeline for project {project_id}")

    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    r.delete(f"{project_id}:voiceover_ready")
    r.delete(f"{project_id}:images_ready")
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    r.delete(f"{project_id}:video_started")
    r.delete(f"{project_id}:cdn_enqueued")

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ø–æ—á–∫—É —Å –∑–∞–ø—É—Å–∫–æ–º post_chunks –≤ –∫–æ–Ω—Ü–µ
    main_chain = chain(
        generate_script.si(project_id, topic, chapters, video_format),
        generate_metadata.si(project_id),
        generate_chunks.si(project_id),
        start_post_chunks_branches.si(project_id, video_format)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    main_chain.apply_async()
    
    update_project_status(project_id, True)

@app.task
def add_to_queue(project_id, topic, chapters, video_format):
    
    video_pipeline.delay(topic, chapters, project_id, video_format)
