; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = shl i32 %21, 2, !dbg !11
  %24 = and i32 %23, 1020, !dbg !11
  %25 = mul i32 %19, 3072, !dbg !12
  %26 = or disjoint i32 %24, %25
  %27 = sext i32 %26 to i64, !dbg !13
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !13
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %20) #5, !dbg !14
  %30 = extractvalue { i32, i32 } %29, 1, !dbg !14
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !14
  %32 = extractelement <2 x bfloat> %31, i64 1, !dbg !14
  %33 = fpext bfloat %32 to float, !dbg !15
  %34 = extractelement <2 x bfloat> %31, i64 0, !dbg !14
  %35 = fpext bfloat %34 to float, !dbg !15
  %36 = extractvalue { i32, i32 } %29, 0, !dbg !14
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !14
  %38 = extractelement <2 x bfloat> %37, i64 1, !dbg !14
  %39 = fpext bfloat %38 to float, !dbg !15
  %40 = extractelement <2 x bfloat> %37, i64 0, !dbg !14
  %41 = fpext bfloat %40 to float, !dbg !15
  %42 = select i1 %20, float %41, float 0.000000e+00, !dbg !16
  %43 = select i1 %20, float %39, float 0.000000e+00, !dbg !16
  %44 = select i1 %20, float %35, float 0.000000e+00, !dbg !16
  %45 = select i1 %20, float %33, float 0.000000e+00, !dbg !16
  %46 = add i32 %26, 1024, !dbg !17
  %47 = sext i32 %46 to i64, !dbg !13
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !13
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %20) #5, !dbg !14
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !14
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !14
  %52 = extractelement <2 x bfloat> %51, i64 0, !dbg !14
  %53 = fpext bfloat %52 to float, !dbg !15
  %54 = fsub float %53, %42, !dbg !18
  %55 = select i1 %20, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %56 = tail call float @llvm.nvvm.div.full(float %54, float %55), !dbg !23
  %57 = fadd float %42, %56, !dbg !24
  %58 = fsub float %53, %57, !dbg !25
  %59 = fmul float %54, %58, !dbg !26
  %60 = fadd float %59, 0.000000e+00, !dbg !27
  %61 = extractelement <2 x bfloat> %51, i64 1, !dbg !14
  %62 = fpext bfloat %61 to float, !dbg !15
  %63 = fsub float %62, %43, !dbg !18
  %64 = tail call float @llvm.nvvm.div.full(float %63, float %55), !dbg !23
  %65 = fadd float %43, %64, !dbg !24
  %66 = fsub float %62, %65, !dbg !25
  %67 = fmul float %63, %66, !dbg !26
  %68 = fadd float %67, 0.000000e+00, !dbg !27
  %69 = extractvalue { i32, i32 } %49, 1, !dbg !14
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !14
  %71 = extractelement <2 x bfloat> %70, i64 0, !dbg !14
  %72 = fpext bfloat %71 to float, !dbg !15
  %73 = fsub float %72, %44, !dbg !18
  %74 = tail call float @llvm.nvvm.div.full(float %73, float %55), !dbg !23
  %75 = fadd float %44, %74, !dbg !24
  %76 = fsub float %72, %75, !dbg !25
  %77 = fmul float %73, %76, !dbg !26
  %78 = fadd float %77, 0.000000e+00, !dbg !27
  %79 = extractelement <2 x bfloat> %70, i64 1, !dbg !14
  %80 = fpext bfloat %79 to float, !dbg !15
  %81 = fsub float %80, %45, !dbg !18
  %82 = tail call float @llvm.nvvm.div.full(float %81, float %55), !dbg !23
  %83 = fadd float %45, %82, !dbg !24
  %84 = fsub float %80, %83, !dbg !25
  %85 = fmul float %81, %84, !dbg !26
  %86 = fadd float %85, 0.000000e+00, !dbg !27
  %87 = select i1 %20, float %57, float 0.000000e+00, !dbg !16
  %88 = select i1 %20, float %65, float 0.000000e+00, !dbg !16
  %89 = select i1 %20, float %75, float 0.000000e+00, !dbg !16
  %90 = select i1 %20, float %83, float 0.000000e+00, !dbg !16
  %91 = add i32 %26, 2048, !dbg !17
  %92 = sext i32 %91 to i64, !dbg !13
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !13
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %93, i1 %20) #5, !dbg !14
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !14
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !14
  %97 = extractelement <2 x bfloat> %96, i64 0, !dbg !14
  %98 = fpext bfloat %97 to float, !dbg !15
  %99 = fsub float %98, %87, !dbg !18
  %100 = select i1 %20, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %101 = tail call float @llvm.nvvm.div.full(float %99, float %100), !dbg !23
  %102 = fadd float %87, %101, !dbg !24
  %103 = fsub float %98, %102, !dbg !25
  %104 = fmul float %99, %103, !dbg !26
  %105 = fadd float %60, %104, !dbg !27
  %106 = extractelement <2 x bfloat> %96, i64 1, !dbg !14
  %107 = fpext bfloat %106 to float, !dbg !15
  %108 = fsub float %107, %88, !dbg !18
  %109 = select i1 %20, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %110 = tail call float @llvm.nvvm.div.full(float %108, float %109), !dbg !23
  %111 = fadd float %88, %110, !dbg !24
  %112 = fsub float %107, %111, !dbg !25
  %113 = fmul float %108, %112, !dbg !26
  %114 = fadd float %68, %113, !dbg !27
  %115 = extractvalue { i32, i32 } %94, 1, !dbg !14
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !14
  %117 = extractelement <2 x bfloat> %116, i64 0, !dbg !14
  %118 = fpext bfloat %117 to float, !dbg !15
  %119 = fsub float %118, %89, !dbg !18
  %120 = select i1 %20, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %121 = tail call float @llvm.nvvm.div.full(float %119, float %120), !dbg !23
  %122 = fadd float %89, %121, !dbg !24
  %123 = fsub float %118, %122, !dbg !25
  %124 = fmul float %119, %123, !dbg !26
  %125 = fadd float %78, %124, !dbg !27
  %126 = extractelement <2 x bfloat> %116, i64 1, !dbg !14
  %127 = fpext bfloat %126 to float, !dbg !15
  %128 = fsub float %127, %90, !dbg !18
  %129 = select i1 %20, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %130 = tail call float @llvm.nvvm.div.full(float %128, float %129), !dbg !23
  %131 = fadd float %90, %130, !dbg !24
  %132 = fsub float %127, %131, !dbg !25
  %133 = fmul float %128, %132, !dbg !26
  %134 = fadd float %86, %133, !dbg !27
  %135 = select i1 %20, float %102, float 0.000000e+00, !dbg !16
  %136 = select i1 %20, float %111, float 0.000000e+00, !dbg !16
  %137 = select i1 %20, float %122, float 0.000000e+00, !dbg !16
  %138 = select i1 %20, float %131, float 0.000000e+00, !dbg !16
  %139 = select i1 %20, float %125, float 0.000000e+00, !dbg !28
  %140 = select i1 %20, float %134, float 0.000000e+00, !dbg !28
  %141 = select i1 %20, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %142 = select i1 %20, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %143 = select i1 %20, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %144 = select i1 %20, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %145 = lshr i32 %21, 5, !dbg !11
  %146 = fsub float %136, %135, !dbg !29
  %147 = select i1 %20, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !33
  %149 = tail call float @llvm.nvvm.div.full(float %142, float %147), !dbg !34
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !35
  %151 = fmul float %146, %150, !dbg !36
  %152 = fadd float %135, %151, !dbg !37
  %153 = fadd float %105, %114, !dbg !38
  %154 = select i1 %20, float %153, float 0.000000e+00, !dbg !38
  %155 = fmul float %146, %146, !dbg !39
  %156 = fmul float %155, %141, !dbg !40
  %157 = fmul float %156, %150, !dbg !41
  %158 = fadd float %154, %157, !dbg !42
  %159 = fsub float %137, %152, !dbg !29
  %160 = select i1 %20, float 9.000000e+00, float 0.000000e+00, !dbg !32
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !33
  %162 = tail call float @llvm.nvvm.div.full(float %143, float %160), !dbg !34
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !35
  %164 = fmul float %163, %159, !dbg !36
  %165 = fadd float %152, %164, !dbg !37
  %166 = fadd float %139, %158, !dbg !38
  %167 = fmul float %159, %159, !dbg !39
  %168 = fmul float %147, %167, !dbg !40
  %169 = fmul float %163, %168, !dbg !41
  %170 = fadd float %166, %169, !dbg !42
  %171 = fsub float %138, %165, !dbg !29
  %172 = select i1 %20, float 1.200000e+01, float 0.000000e+00, !dbg !32
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !33
  %174 = tail call float @llvm.nvvm.div.full(float %144, float %172), !dbg !34
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !35
  %176 = fmul float %175, %171, !dbg !36
  %177 = fadd float %165, %176, !dbg !37
  %178 = fadd float %140, %170, !dbg !38
  %179 = fmul float %171, %171, !dbg !39
  %180 = fmul float %160, %179, !dbg !40
  %181 = fmul float %175, %180, !dbg !41
  %182 = fadd float %178, %181, !dbg !42
  %183 = bitcast float %177 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = bitcast float %182 to i32, !dbg !43
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !43
  %188 = bitcast i32 %187 to float, !dbg !43
  %189 = bitcast float %172 to i32, !dbg !43
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !43
  %191 = bitcast i32 %190 to float, !dbg !43
  %192 = fsub float %185, %177, !dbg !29
  %193 = fadd float %172, %191, !dbg !32
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !33
  %195 = tail call float @llvm.nvvm.div.full(float %191, float %193), !dbg !34
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !35
  %197 = fmul float %196, %192, !dbg !36
  %198 = fadd float %177, %197, !dbg !37
  %199 = fadd float %182, %188, !dbg !38
  %200 = fmul float %192, %192, !dbg !39
  %201 = fmul float %172, %200, !dbg !40
  %202 = fmul float %196, %201, !dbg !41
  %203 = fadd float %199, %202, !dbg !42
  %204 = bitcast float %198 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = bitcast float %203 to i32, !dbg !43
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !43
  %209 = bitcast i32 %208 to float, !dbg !43
  %210 = bitcast float %193 to i32, !dbg !43
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !43
  %212 = bitcast i32 %211 to float, !dbg !43
  %213 = fsub float %206, %198, !dbg !29
  %214 = fadd float %193, %212, !dbg !32
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !33
  %216 = tail call float @llvm.nvvm.div.full(float %212, float %214), !dbg !34
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !35
  %218 = fmul float %213, %217, !dbg !36
  %219 = fadd float %198, %218, !dbg !37
  %220 = fadd float %203, %209, !dbg !38
  %221 = fmul float %213, %213, !dbg !39
  %222 = fmul float %193, %221, !dbg !40
  %223 = fmul float %217, %222, !dbg !41
  %224 = fadd float %220, %223, !dbg !42
  %225 = bitcast float %219 to i32, !dbg !43
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = bitcast float %224 to i32, !dbg !43
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = bitcast float %214 to i32, !dbg !43
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = fsub float %227, %219, !dbg !29
  %235 = fadd float %214, %233, !dbg !32
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !33
  %237 = tail call float @llvm.nvvm.div.full(float %233, float %235), !dbg !34
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !35
  %239 = fmul float %234, %238, !dbg !36
  %240 = fadd float %219, %239, !dbg !37
  %241 = fadd float %224, %230, !dbg !38
  %242 = fmul float %234, %234, !dbg !39
  %243 = fmul float %214, %242, !dbg !40
  %244 = fmul float %238, %243, !dbg !41
  %245 = fadd float %241, %244, !dbg !42
  %246 = bitcast float %240 to i32, !dbg !43
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !43
  %248 = bitcast i32 %247 to float, !dbg !43
  %249 = bitcast float %245 to i32, !dbg !43
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !43
  %251 = bitcast i32 %250 to float, !dbg !43
  %252 = bitcast float %235 to i32, !dbg !43
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !43
  %254 = bitcast i32 %253 to float, !dbg !43
  %255 = fsub float %248, %240, !dbg !29
  %256 = fadd float %235, %254, !dbg !32
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !33
  %258 = tail call float @llvm.nvvm.div.full(float %254, float %256), !dbg !34
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !35
  %260 = fmul float %255, %259, !dbg !36
  %261 = fadd float %240, %260, !dbg !37
  %262 = fadd float %245, %251, !dbg !38
  %263 = fmul float %255, %255, !dbg !39
  %264 = fmul float %235, %263, !dbg !40
  %265 = fmul float %259, %264, !dbg !41
  %266 = fadd float %262, %265, !dbg !42
  %267 = bitcast float %261 to i32, !dbg !43
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !43
  %269 = bitcast i32 %268 to float, !dbg !43
  %270 = bitcast float %266 to i32, !dbg !43
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !43
  %272 = bitcast i32 %271 to float, !dbg !43
  %273 = bitcast float %256 to i32, !dbg !43
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !43
  %275 = bitcast i32 %274 to float, !dbg !43
  %276 = fsub float %269, %261, !dbg !29
  %277 = fadd float %256, %275, !dbg !32
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !33
  %279 = tail call float @llvm.nvvm.div.full(float %275, float %277), !dbg !34
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !35
  %281 = fmul float %276, %280, !dbg !36
  %282 = fadd float %261, %281, !dbg !37
  %283 = fadd float %266, %272, !dbg !38
  %284 = fmul float %276, %276, !dbg !39
  %285 = fmul float %256, %284, !dbg !40
  %286 = fmul float %280, %285, !dbg !41
  %287 = fadd float %283, %286, !dbg !42
  %288 = and i32 %145, 7, !dbg !43
  %289 = icmp eq i32 %22, 0, !dbg !43
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !43
  %291 = bitcast float %282 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %289) #5, !dbg !43
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %288, !dbg !43
  %293 = bitcast float %287 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 %289) #5, !dbg !43
  %294 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %288, !dbg !43
  %295 = bitcast float %277 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 %289) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %296 = icmp slt i32 %21, 8, !dbg !43
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !43
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %296) #5, !dbg !43
  %299 = bitcast i32 %298 to float, !dbg !43
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !43
  %301 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %300, i1 %296) #5, !dbg !43
  %302 = bitcast i32 %301 to float, !dbg !43
  %303 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !43
  %304 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %303, i1 %296) #5, !dbg !43
  %305 = bitcast i32 %304 to float, !dbg !43
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !43
  %307 = bitcast i32 %306 to float, !dbg !43
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !43
  %309 = bitcast i32 %308 to float, !dbg !43
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !43
  %311 = bitcast i32 %310 to float, !dbg !43
  %312 = fsub float %307, %299, !dbg !29
  %313 = fadd float %305, %311, !dbg !32
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !33
  %315 = tail call float @llvm.nvvm.div.full(float %311, float %313), !dbg !34
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !35
  %317 = fmul float %312, %316, !dbg !36
  %318 = fadd float %317, %299, !dbg !37
  %319 = fadd float %302, %309, !dbg !38
  %320 = fmul float %312, %312, !dbg !39
  %321 = fmul float %320, %305, !dbg !40
  %322 = fmul float %321, %316, !dbg !41
  %323 = fadd float %319, %322, !dbg !42
  %324 = bitcast float %318 to i32, !dbg !43
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 2, i32 31), !dbg !43
  %326 = bitcast i32 %325 to float, !dbg !43
  %327 = bitcast float %323 to i32, !dbg !43
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !43
  %329 = bitcast i32 %328 to float, !dbg !43
  %330 = bitcast float %313 to i32, !dbg !43
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !43
  %332 = bitcast i32 %331 to float, !dbg !43
  %333 = fsub float %326, %318, !dbg !29
  %334 = fadd float %313, %332, !dbg !32
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !33
  %336 = tail call float @llvm.nvvm.div.full(float %332, float %334), !dbg !34
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !35
  %338 = fmul float %333, %337, !dbg !36
  %339 = fadd float %318, %338, !dbg !37
  %340 = fadd float %323, %329, !dbg !38
  %341 = fmul float %333, %333, !dbg !39
  %342 = fmul float %313, %341, !dbg !40
  %343 = fmul float %337, %342, !dbg !41
  %344 = fadd float %340, %343, !dbg !42
  %345 = bitcast float %339 to i32, !dbg !43
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !43
  %347 = bitcast i32 %346 to float, !dbg !43
  %348 = bitcast float %344 to i32, !dbg !43
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !43
  %350 = bitcast i32 %349 to float, !dbg !43
  %351 = bitcast float %334 to i32, !dbg !43
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !43
  %353 = bitcast i32 %352 to float, !dbg !43
  %354 = fsub float %347, %339, !dbg !29
  %355 = fadd float %334, %353, !dbg !32
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !33
  %357 = tail call float @llvm.nvvm.div.full(float %353, float %355), !dbg !34
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !35
  %359 = fmul float %354, %358, !dbg !36
  %360 = fadd float %339, %359, !dbg !37
  %361 = fadd float %344, %350, !dbg !38
  %362 = fmul float %354, %354, !dbg !39
  %363 = fmul float %334, %362, !dbg !40
  %364 = fmul float %358, %363, !dbg !41
  %365 = fadd float %361, %364, !dbg !42
  %366 = and i32 %21, 7, !dbg !43
  %367 = icmp eq i32 %366, 0, !dbg !43
  %368 = and i1 %296, %367, !dbg !43
  %369 = bitcast float %360 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %369, i1 %368) #5, !dbg !43
  %370 = bitcast float %365 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %370, i1 %368) #5, !dbg !43
  %371 = bitcast float %355 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %371, i1 %368) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %372 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %373 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !43
  %374 = tail call float @llvm.nvvm.div.full(float %373, float 3.072000e+03), !dbg !44
  %375 = fadd float %374, 0x3EB0C6F7A0000000, !dbg !45
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i17 = icmp eq i32 %379, 0, !dbg !46
  br i1 %.not.i17, label %382, label %380, !dbg !46

380:                                              ; preds = %__nv_rsqrtf.exit
  %381 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %375), !dbg !46
  br label %__nv_rsqrtf.exit19, !dbg !46

382:                                              ; preds = %__nv_rsqrtf.exit
  %383 = tail call float @llvm.nvvm.rsqrt.approx.f(float %375), !dbg !46
  br label %__nv_rsqrtf.exit19, !dbg !46

__nv_rsqrtf.exit19:                               ; preds = %380, %382
  %.0.i18 = phi float [ %381, %380 ], [ %383, %382 ], !dbg !46
  %384 = zext nneg i32 %24 to i64, !dbg !47
  %385 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !48
  %386 = shufflevector <2 x i1> %385, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !48
  %387 = insertelement <2 x float> poison, float %.0.i18, i64 0, !dbg !49
  %388 = shufflevector <2 x float> %387, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %389 = insertelement <2 x float> poison, float %372, i64 0, !dbg !50
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %391 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !51
  %392 = shufflevector <4 x i1> %391, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !51
  br label %393, !dbg !47

393:                                              ; preds = %__nv_rsqrtf.exit19, %393
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit19 ], [ %indvars.iv.next, %393 ]
  %394 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %483, %393 ]
  %395 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %484, %393 ]
  %396 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit19 ], [ %455, %393 ]
  %397 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit19 ], [ %489, %393 ]
  %398 = or disjoint i64 %indvars.iv, %384, !dbg !52
  %399 = trunc nuw nsw i64 %398 to i32, !dbg !53
  %400 = add i32 %25, %399, !dbg !53
  %401 = sext i32 %400 to i64, !dbg !54
  %402 = getelementptr bfloat, ptr addrspace(1) %0, i64 %401, !dbg !54
  %403 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %402, i1 %20) #5, !dbg !55
  %404 = extractvalue { i32, i32 } %403, 0, !dbg !55
  %405 = bitcast i32 %404 to <2 x bfloat>, !dbg !55
  %406 = extractvalue { i32, i32 } %403, 1, !dbg !55
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !55
  %408 = add nuw nsw i64 %398, 3072, !dbg !56
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %408, !dbg !57
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %409, i1 true) #5, !dbg !58
  %411 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !58
  %412 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !58
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !58
  %414 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !58
  %415 = getelementptr bfloat, ptr addrspace(1) %2, i64 %408, !dbg !59
  %416 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %415, i1 true) #5, !dbg !60
  %417 = extractvalue { i32, i32 } %416, 0, !dbg !60
  %418 = bitcast i32 %417 to <2 x bfloat>, !dbg !60
  %419 = extractvalue { i32, i32 } %416, 1, !dbg !60
  %420 = bitcast i32 %419 to <2 x bfloat>, !dbg !60
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %398, !dbg !61
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %421, i1 true) #5, !dbg !62
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !62
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !62
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !62
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !62
  %427 = getelementptr bfloat, ptr addrspace(1) %2, i64 %398, !dbg !63
  %428 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %427, i1 true) #5, !dbg !64
  %429 = extractvalue { i32, i32 } %428, 0, !dbg !64
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !64
  %431 = extractvalue { i32, i32 } %428, 1, !dbg !64
  %432 = bitcast i32 %431 to <2 x bfloat>, !dbg !64
  %433 = fcmp uno <2 x float> %396, zeroinitializer, !dbg !65
  %434 = fcmp uno float %394, 0.000000e+00, !dbg !65
  %435 = fcmp uno float %395, 0.000000e+00, !dbg !65
  %436 = fpext <2 x bfloat> %405 to <2 x float>, !dbg !67
  %437 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !58
  %438 = insertelement <2 x i32> %437, i32 %412, i64 1, !dbg !58
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !58
  %440 = fpext <2 x bfloat> %418 to <2 x float>, !dbg !68
  %441 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !62
  %442 = insertelement <2 x i32> %441, i32 %424, i64 1, !dbg !62
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !62
  %444 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !69
  %445 = fsub <2 x float> %436, %390, !dbg !50
  %446 = fmul <2 x float> %388, %445, !dbg !49
  %447 = fadd <2 x float> %439, %440, !dbg !70
  %448 = fadd <2 x float> %447, splat (float 1.000000e+00), !dbg !71
  %449 = fmul <2 x float> %446, %448, !dbg !72
  %450 = fadd <2 x float> %443, %444, !dbg !73
  %451 = fadd <2 x float> %449, %450, !dbg !74
  %452 = fcmp olt <2 x float> %396, %451, !dbg !75
  %453 = or <2 x i1> %433, %452, !dbg !76
  %454 = select <2 x i1> %453, <2 x float> %396, <2 x float> %451, !dbg !77
  %455 = select <2 x i1> %386, <2 x float> %454, <2 x float> %396, !dbg !48
  %456 = fcmp uno <4 x float> %397, zeroinitializer, !dbg !78
  %457 = getelementptr bfloat, ptr addrspace(1) %3, i64 %401, !dbg !80
  %458 = fptrunc <2 x float> %451 to <2 x bfloat>, !dbg !81
  %459 = fpext <2 x bfloat> %407 to <2 x float>, !dbg !67
  %460 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !58
  %461 = insertelement <2 x i32> %460, i32 %414, i64 1, !dbg !58
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !58
  %463 = fpext <2 x bfloat> %420 to <2 x float>, !dbg !68
  %464 = insertelement <2 x i32> poison, i32 %425, i64 0, !dbg !62
  %465 = insertelement <2 x i32> %464, i32 %426, i64 1, !dbg !62
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !62
  %467 = fpext <2 x bfloat> %432 to <2 x float>, !dbg !69
  %468 = fsub <2 x float> %459, %390, !dbg !50
  %469 = fmul <2 x float> %388, %468, !dbg !49
  %470 = fadd <2 x float> %462, %463, !dbg !70
  %471 = fadd <2 x float> %470, splat (float 1.000000e+00), !dbg !71
  %472 = fmul <2 x float> %469, %471, !dbg !72
  %473 = fadd <2 x float> %466, %467, !dbg !73
  %474 = fadd <2 x float> %472, %473, !dbg !74
  %475 = extractelement <2 x float> %474, i64 0, !dbg !77
  %476 = fcmp olt float %394, %475, !dbg !75
  %477 = extractelement <2 x float> %474, i64 1, !dbg !77
  %478 = fcmp olt float %395, %477, !dbg !75
  %479 = or i1 %434, %476, !dbg !76
  %480 = or i1 %435, %478, !dbg !76
  %481 = select i1 %479, float %394, float %475, !dbg !77
  %482 = select i1 %480, float %395, float %477, !dbg !77
  %483 = select i1 %20, float %481, float %394, !dbg !48
  %484 = select i1 %20, float %482, float %395, !dbg !48
  %485 = shufflevector <2 x float> %451, <2 x float> %474, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !82
  %486 = fcmp ogt <4 x float> %397, %485, !dbg !82
  %487 = or <4 x i1> %456, %486, !dbg !83
  %488 = select <4 x i1> %487, <4 x float> %397, <4 x float> %485, !dbg !84
  %489 = select <4 x i1> %392, <4 x float> %488, <4 x float> %397, !dbg !51
  %490 = fptrunc <2 x float> %474 to <2 x bfloat>, !dbg !81
  %491 = bitcast <2 x bfloat> %458 to i32, !dbg !81
  %492 = bitcast <2 x bfloat> %490 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %491, i32 %492, ptr addrspace(1) %457, i1 %20) #5, !dbg !81
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !47
  %493 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !47
  br i1 %493, label %393, label %494, !dbg !47

494:                                              ; preds = %393
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %495 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %455, <2 x i32> <i32 0, i32 2>, !dbg !87
  %496 = fcmp olt <2 x float> %495, %455, !dbg !87
  %497 = fcmp uno <2 x float> %495, %455, !dbg !87
  %shift = shufflevector <2 x i1> %496, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %498 = or <2 x i1> %shift, %497, !dbg !88
  %499 = extractelement <2 x i1> %498, i64 0, !dbg !88
  %500 = extractelement <2 x float> %455, i64 0, !dbg !89
  %501 = extractelement <2 x float> %455, i64 1, !dbg !89
  %502 = select i1 %499, float %500, float %501, !dbg !89
  %503 = fcmp olt float %502, %483, !dbg !87
  %504 = fcmp uno float %502, 0.000000e+00, !dbg !90
  %505 = or i1 %503, %504, !dbg !88
  %506 = select i1 %505, float %502, float %483, !dbg !89
  %507 = fcmp olt float %506, %484, !dbg !87
  %508 = fcmp uno float %506, 0.000000e+00, !dbg !90
  %509 = or i1 %507, %508, !dbg !88
  %510 = select i1 %509, float %506, float %484, !dbg !89
  %511 = bitcast float %510 to i32, !dbg !85
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 16, i32 31), !dbg !85
  %513 = bitcast i32 %512 to float, !dbg !85
  %514 = fcmp olt float %510, %513, !dbg !87
  %515 = fcmp uno float %510, 0.000000e+00, !dbg !90
  %516 = or i1 %515, %514, !dbg !88
  %517 = select i1 %516, float %510, float %513, !dbg !89
  %518 = bitcast float %517 to i32, !dbg !85
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 8, i32 31), !dbg !85
  %520 = bitcast i32 %519 to float, !dbg !85
  %521 = fcmp olt float %517, %520, !dbg !87
  %522 = fcmp uno float %517, 0.000000e+00, !dbg !90
  %523 = or i1 %521, %522, !dbg !88
  %524 = select i1 %523, float %517, float %520, !dbg !89
  %525 = bitcast float %524 to i32, !dbg !85
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !85
  %527 = bitcast i32 %526 to float, !dbg !85
  %528 = fcmp olt float %524, %527, !dbg !87
  %529 = fcmp uno float %524, 0.000000e+00, !dbg !90
  %530 = or i1 %528, %529, !dbg !88
  %531 = select i1 %530, float %524, float %527, !dbg !89
  %532 = bitcast float %531 to i32, !dbg !85
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 2, i32 31), !dbg !85
  %534 = bitcast i32 %533 to float, !dbg !85
  %535 = fcmp olt float %531, %534, !dbg !87
  %536 = fcmp uno float %531, 0.000000e+00, !dbg !90
  %537 = or i1 %535, %536, !dbg !88
  %538 = select i1 %537, float %531, float %534, !dbg !89
  %539 = bitcast float %538 to i32, !dbg !85
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !85
  %541 = bitcast i32 %540 to float, !dbg !85
  %542 = fcmp olt float %538, %541, !dbg !87
  %543 = fcmp uno float %538, 0.000000e+00, !dbg !90
  %544 = or i1 %542, %543, !dbg !88
  %545 = select i1 %544, i32 %539, i32 %540, !dbg !89
  %546 = insertelement <1 x i32> poison, i32 %545, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %546, i1 %289) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %547 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %296) #5, !dbg !85
  %548 = bitcast i32 %547 to float, !dbg !85
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 4, i32 31), !dbg !85
  %550 = bitcast i32 %549 to float, !dbg !85
  %551 = fcmp olt float %548, %550, !dbg !87
  %552 = fcmp uno float %548, 0.000000e+00, !dbg !90
  %553 = or i1 %552, %551, !dbg !88
  %554 = select i1 %553, float %548, float %550, !dbg !89
  %555 = bitcast float %554 to i32, !dbg !85
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 2, i32 31), !dbg !85
  %557 = bitcast i32 %556 to float, !dbg !85
  %558 = fcmp olt float %554, %557, !dbg !87
  %559 = fcmp uno float %554, 0.000000e+00, !dbg !90
  %560 = or i1 %558, %559, !dbg !88
  %561 = select i1 %560, float %554, float %557, !dbg !89
  %562 = bitcast float %561 to i32, !dbg !85
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 1, i32 31), !dbg !85
  %564 = bitcast i32 %563 to float, !dbg !85
  %565 = fcmp olt float %561, %564, !dbg !87
  %566 = fcmp uno float %561, 0.000000e+00, !dbg !90
  %567 = or i1 %565, %566, !dbg !88
  %568 = select i1 %567, i32 %562, i32 %563, !dbg !89
  %569 = insertelement <1 x i32> poison, i32 %568, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %569, i1 %368) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %570 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %571 = extractelement <4 x float> %489, i64 0, !dbg !93
  %572 = extractelement <4 x float> %489, i64 1, !dbg !93
  %573 = fcmp ogt float %571, %572, !dbg !93
  %574 = fcmp uno float %571, 0.000000e+00, !dbg !94
  %575 = or i1 %573, %574, !dbg !95
  %576 = select i1 %575, float %571, float %572, !dbg !96
  %577 = extractelement <4 x float> %489, i64 2, !dbg !93
  %578 = fcmp ogt float %576, %577, !dbg !93
  %579 = fcmp uno float %576, 0.000000e+00, !dbg !94
  %580 = or i1 %578, %579, !dbg !95
  %581 = select i1 %580, float %576, float %577, !dbg !96
  %582 = extractelement <4 x float> %489, i64 3, !dbg !93
  %583 = fcmp ogt float %581, %582, !dbg !93
  %584 = fcmp uno float %581, 0.000000e+00, !dbg !94
  %585 = or i1 %583, %584, !dbg !95
  %586 = select i1 %585, float %581, float %582, !dbg !96
  %587 = bitcast float %586 to i32, !dbg !91
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 16, i32 31), !dbg !91
  %589 = bitcast i32 %588 to float, !dbg !91
  %590 = fcmp ogt float %586, %589, !dbg !93
  %591 = fcmp uno float %586, 0.000000e+00, !dbg !94
  %592 = or i1 %591, %590, !dbg !95
  %593 = select i1 %592, float %586, float %589, !dbg !96
  %594 = bitcast float %593 to i32, !dbg !91
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 8, i32 31), !dbg !91
  %596 = bitcast i32 %595 to float, !dbg !91
  %597 = fcmp ogt float %593, %596, !dbg !93
  %598 = fcmp uno float %593, 0.000000e+00, !dbg !94
  %599 = or i1 %597, %598, !dbg !95
  %600 = select i1 %599, float %593, float %596, !dbg !96
  %601 = bitcast float %600 to i32, !dbg !91
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 4, i32 31), !dbg !91
  %603 = bitcast i32 %602 to float, !dbg !91
  %604 = fcmp ogt float %600, %603, !dbg !93
  %605 = fcmp uno float %600, 0.000000e+00, !dbg !94
  %606 = or i1 %604, %605, !dbg !95
  %607 = select i1 %606, float %600, float %603, !dbg !96
  %608 = bitcast float %607 to i32, !dbg !91
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 2, i32 31), !dbg !91
  %610 = bitcast i32 %609 to float, !dbg !91
  %611 = fcmp ogt float %607, %610, !dbg !93
  %612 = fcmp uno float %607, 0.000000e+00, !dbg !94
  %613 = or i1 %611, %612, !dbg !95
  %614 = select i1 %613, float %607, float %610, !dbg !96
  %615 = bitcast float %614 to i32, !dbg !91
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !91
  %617 = bitcast i32 %616 to float, !dbg !91
  %618 = fcmp ogt float %614, %617, !dbg !93
  %619 = fcmp uno float %614, 0.000000e+00, !dbg !94
  %620 = or i1 %618, %619, !dbg !95
  %621 = select i1 %620, i32 %615, i32 %616, !dbg !96
  %622 = insertelement <1 x i32> poison, i32 %621, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %622, i1 %289) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %623 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %296) #5, !dbg !91
  %624 = bitcast i32 %623 to float, !dbg !91
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 4, i32 31), !dbg !91
  %626 = bitcast i32 %625 to float, !dbg !91
  %627 = fcmp ogt float %624, %626, !dbg !93
  %628 = fcmp uno float %624, 0.000000e+00, !dbg !94
  %629 = or i1 %628, %627, !dbg !95
  %630 = select i1 %629, float %624, float %626, !dbg !96
  %631 = bitcast float %630 to i32, !dbg !91
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !91
  %633 = bitcast i32 %632 to float, !dbg !91
  %634 = fcmp ogt float %630, %633, !dbg !93
  %635 = fcmp uno float %630, 0.000000e+00, !dbg !94
  %636 = or i1 %634, %635, !dbg !95
  %637 = select i1 %636, float %630, float %633, !dbg !96
  %638 = bitcast float %637 to i32, !dbg !91
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 1, i32 31), !dbg !91
  %640 = bitcast i32 %639 to float, !dbg !91
  %641 = fcmp ogt float %637, %640, !dbg !93
  %642 = fcmp uno float %637, 0.000000e+00, !dbg !94
  %643 = or i1 %641, %642, !dbg !95
  %644 = select i1 %643, i32 %638, i32 %639, !dbg !96
  %645 = insertelement <1 x i32> poison, i32 %644, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %645, i1 %368) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %646 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %647 = sext i32 %19 to i64, !dbg !97
  %648 = getelementptr bfloat, ptr addrspace(1) %4, i64 %647, !dbg !97
  %649 = fptrunc float %570 to bfloat, !dbg !98
  %650 = and i32 %21, 255, !dbg !98
  %651 = icmp eq i32 %650, 0, !dbg !98
  %652 = bitcast bfloat %649 to i16, !dbg !98
  %653 = and i1 %20, %651, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %648, i1 %653) #5, !dbg !98
  %654 = getelementptr bfloat, ptr addrspace(1) %5, i64 %647, !dbg !99
  %655 = fptrunc float %646 to bfloat, !dbg !100
  %656 = bitcast bfloat %655 to i16, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %656, ptr addrspace(1) %654, i1 %653) #5, !dbg !100
  %657 = getelementptr bfloat, ptr addrspace(1) %6, i64 %647, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %657, i1 %653) #5, !dbg !102
  %658 = getelementptr bfloat, ptr addrspace(1) %7, i64 %647, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %656, ptr addrspace(1) %658, i1 %653) #5, !dbg !104
  %659 = getelementptr bfloat, ptr addrspace(1) %8, i64 %647, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %659, i1 %653) #5, !dbg !106
  %660 = getelementptr bfloat, ptr addrspace(1) %9, i64 %647, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %656, ptr addrspace(1) %660, i1 %653) #5, !dbg !108
  %661 = getelementptr bfloat, ptr addrspace(1) %10, i64 %647, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %661, i1 %653) #5, !dbg !110
  %662 = getelementptr bfloat, ptr addrspace(1) %11, i64 %647, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %656, ptr addrspace(1) %662, i1 %653) #5, !dbg !112
  %.inv = fcmp oge float %570, 0.000000e+00, !dbg !113
  %663 = select i1 %.inv, float 0.000000e+00, float %570, !dbg !113
  %664 = fsub float 0.000000e+00, %663, !dbg !115
  %.inv3 = fcmp ole float %646, 0.000000e+00, !dbg !116
  %665 = select i1 %.inv3, float 0.000000e+00, float %646, !dbg !116
  %666 = fcmp ogt float %664, %665, !dbg !118
  %667 = fcmp uno float %664, 0.000000e+00, !dbg !120
  %668 = or i1 %667, %666, !dbg !121
  %669 = select i1 %668, float %664, float %665, !dbg !122
  %670 = fmul float %669, 0x3F80204080000000, !dbg !123
  %671 = fcmp ogt float %670, 0x3EE4F8B580000000, !dbg !124
  %672 = fcmp uno float %670, 0.000000e+00, !dbg !126
  %673 = or i1 %671, %672, !dbg !127
  %674 = select i1 %673, float %670, float 0x3EE4F8B580000000, !dbg !128
  %675 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %674), !dbg !129
  %676 = getelementptr bfloat, ptr addrspace(1) %3, i64 %27, !dbg !130
  %677 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %676, i1 %20) #5, !dbg !131
  %678 = extractvalue { i32, i32 } %677, 0, !dbg !131
  %679 = bitcast i32 %678 to <2 x bfloat>, !dbg !131
  %680 = extractvalue { i32, i32 } %677, 1, !dbg !131
  %681 = bitcast i32 %680 to <2 x bfloat>, !dbg !131
  %682 = extractelement <2 x bfloat> %679, i64 0, !dbg !131
  %683 = extractelement <2 x bfloat> %679, i64 1, !dbg !131
  %684 = extractelement <2 x bfloat> %681, i64 0, !dbg !131
  %685 = extractelement <2 x bfloat> %681, i64 1, !dbg !131
  %686 = fpext bfloat %682 to float, !dbg !132
  %687 = fpext bfloat %683 to float, !dbg !132
  %688 = fpext bfloat %684 to float, !dbg !132
  %689 = fpext bfloat %685 to float, !dbg !132
  %690 = fmul float %675, %686, !dbg !133
  %691 = fmul float %675, %687, !dbg !133
  %692 = fmul float %675, %688, !dbg !133
  %693 = fmul float %675, %689, !dbg !133
  %694 = tail call float @llvm.nvvm.round.f(float %690) #5, !dbg !134
  %695 = tail call float @llvm.nvvm.round.f(float %691) #5, !dbg !134
  %696 = tail call float @llvm.nvvm.round.f(float %692) #5, !dbg !134
  %697 = tail call float @llvm.nvvm.round.f(float %693) #5, !dbg !134
  %698 = insertelement <4 x float> poison, float %694, i64 0, !dbg !135
  %699 = insertelement <4 x float> %698, float %695, i64 1, !dbg !135
  %700 = insertelement <4 x float> %699, float %696, i64 2, !dbg !135
  %701 = insertelement <4 x float> %700, float %697, i64 3, !dbg !135
  %702 = fcmp ogt <4 x float> %701, splat (float -1.270000e+02), !dbg !135
  %703 = fcmp uno <4 x float> %701, zeroinitializer, !dbg !137
  %704 = or <4 x i1> %702, %703, !dbg !138
  %705 = select <4 x i1> %704, <4 x float> %701, <4 x float> splat (float -1.270000e+02), !dbg !139
  %706 = fcmp olt <4 x float> %705, splat (float 1.270000e+02), !dbg !140
  %707 = fcmp uno <4 x float> %705, zeroinitializer, !dbg !142
  %708 = or <4 x i1> %706, %707, !dbg !143
  %709 = fptosi <4 x float> %705 to <4 x i8>, !dbg !144
  %710 = select <4 x i1> %708, <4 x i8> %709, <4 x i8> splat (i8 127), !dbg !145
  %711 = getelementptr i8, ptr addrspace(1) %12, i64 %27, !dbg !146
  %712 = bitcast <4 x i8> %710 to i32, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %712, ptr addrspace(1) %711, i1 %20) #5, !dbg !147
  %713 = getelementptr i8, ptr addrspace(1) %13, i64 %27, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %712, ptr addrspace(1) %713, i1 %20) #5, !dbg !149
  %714 = getelementptr i8, ptr addrspace(1) %14, i64 %27, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %712, ptr addrspace(1) %714, i1 %20) #5, !dbg !151
  %715 = getelementptr i8, ptr addrspace(1) %15, i64 %27, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %712, ptr addrspace(1) %715, i1 %20) #5, !dbg !153
  %716 = getelementptr bfloat, ptr addrspace(1) %3, i64 %47, !dbg !130
  %717 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %716, i1 %20) #5, !dbg !131
  %718 = extractvalue { i32, i32 } %717, 0, !dbg !131
  %719 = bitcast i32 %718 to <2 x bfloat>, !dbg !131
  %720 = extractvalue { i32, i32 } %717, 1, !dbg !131
  %721 = bitcast i32 %720 to <2 x bfloat>, !dbg !131
  %722 = extractelement <2 x bfloat> %719, i64 0, !dbg !131
  %723 = extractelement <2 x bfloat> %719, i64 1, !dbg !131
  %724 = extractelement <2 x bfloat> %721, i64 0, !dbg !131
  %725 = extractelement <2 x bfloat> %721, i64 1, !dbg !131
  %726 = fpext bfloat %722 to float, !dbg !132
  %727 = fpext bfloat %723 to float, !dbg !132
  %728 = fpext bfloat %724 to float, !dbg !132
  %729 = fpext bfloat %725 to float, !dbg !132
  %730 = fmul float %675, %726, !dbg !133
  %731 = fmul float %675, %727, !dbg !133
  %732 = fmul float %675, %728, !dbg !133
  %733 = fmul float %675, %729, !dbg !133
  %734 = tail call float @llvm.nvvm.round.f(float %730) #5, !dbg !134
  %735 = tail call float @llvm.nvvm.round.f(float %731) #5, !dbg !134
  %736 = tail call float @llvm.nvvm.round.f(float %732) #5, !dbg !134
  %737 = tail call float @llvm.nvvm.round.f(float %733) #5, !dbg !134
  %738 = insertelement <4 x float> poison, float %734, i64 0, !dbg !135
  %739 = insertelement <4 x float> %738, float %735, i64 1, !dbg !135
  %740 = insertelement <4 x float> %739, float %736, i64 2, !dbg !135
  %741 = insertelement <4 x float> %740, float %737, i64 3, !dbg !135
  %742 = fcmp ogt <4 x float> %741, splat (float -1.270000e+02), !dbg !135
  %743 = fcmp uno <4 x float> %741, zeroinitializer, !dbg !137
  %744 = or <4 x i1> %742, %743, !dbg !138
  %745 = select <4 x i1> %744, <4 x float> %741, <4 x float> splat (float -1.270000e+02), !dbg !139
  %746 = fcmp olt <4 x float> %745, splat (float 1.270000e+02), !dbg !140
  %747 = fcmp uno <4 x float> %745, zeroinitializer, !dbg !142
  %748 = or <4 x i1> %746, %747, !dbg !143
  %749 = fptosi <4 x float> %745 to <4 x i8>, !dbg !144
  %750 = select <4 x i1> %748, <4 x i8> %749, <4 x i8> splat (i8 127), !dbg !145
  %751 = getelementptr i8, ptr addrspace(1) %12, i64 %47, !dbg !146
  %752 = bitcast <4 x i8> %750 to i32, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %752, ptr addrspace(1) %751, i1 %20) #5, !dbg !147
  %753 = getelementptr i8, ptr addrspace(1) %13, i64 %47, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %752, ptr addrspace(1) %753, i1 %20) #5, !dbg !149
  %754 = getelementptr i8, ptr addrspace(1) %14, i64 %47, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %752, ptr addrspace(1) %754, i1 %20) #5, !dbg !151
  %755 = getelementptr i8, ptr addrspace(1) %15, i64 %47, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %752, ptr addrspace(1) %755, i1 %20) #5, !dbg !153
  %756 = getelementptr bfloat, ptr addrspace(1) %3, i64 %92, !dbg !130
  %757 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %756, i1 %20) #5, !dbg !131
  %758 = extractvalue { i32, i32 } %757, 0, !dbg !131
  %759 = bitcast i32 %758 to <2 x bfloat>, !dbg !131
  %760 = extractvalue { i32, i32 } %757, 1, !dbg !131
  %761 = bitcast i32 %760 to <2 x bfloat>, !dbg !131
  %762 = extractelement <2 x bfloat> %759, i64 0, !dbg !131
  %763 = extractelement <2 x bfloat> %759, i64 1, !dbg !131
  %764 = extractelement <2 x bfloat> %761, i64 0, !dbg !131
  %765 = extractelement <2 x bfloat> %761, i64 1, !dbg !131
  %766 = fpext bfloat %762 to float, !dbg !132
  %767 = fpext bfloat %763 to float, !dbg !132
  %768 = fpext bfloat %764 to float, !dbg !132
  %769 = fpext bfloat %765 to float, !dbg !132
  %770 = fmul float %675, %766, !dbg !133
  %771 = fmul float %675, %767, !dbg !133
  %772 = fmul float %675, %768, !dbg !133
  %773 = fmul float %675, %769, !dbg !133
  %774 = tail call float @llvm.nvvm.round.f(float %770) #5, !dbg !134
  %775 = tail call float @llvm.nvvm.round.f(float %771) #5, !dbg !134
  %776 = tail call float @llvm.nvvm.round.f(float %772) #5, !dbg !134
  %777 = tail call float @llvm.nvvm.round.f(float %773) #5, !dbg !134
  %778 = insertelement <4 x float> poison, float %774, i64 0, !dbg !135
  %779 = insertelement <4 x float> %778, float %775, i64 1, !dbg !135
  %780 = insertelement <4 x float> %779, float %776, i64 2, !dbg !135
  %781 = insertelement <4 x float> %780, float %777, i64 3, !dbg !135
  %782 = fcmp ogt <4 x float> %781, splat (float -1.270000e+02), !dbg !135
  %783 = fcmp uno <4 x float> %781, zeroinitializer, !dbg !137
  %784 = or <4 x i1> %782, %783, !dbg !138
  %785 = select <4 x i1> %784, <4 x float> %781, <4 x float> splat (float -1.270000e+02), !dbg !139
  %786 = fcmp olt <4 x float> %785, splat (float 1.270000e+02), !dbg !140
  %787 = fcmp uno <4 x float> %785, zeroinitializer, !dbg !142
  %788 = or <4 x i1> %786, %787, !dbg !143
  %789 = fptosi <4 x float> %785 to <4 x i8>, !dbg !144
  %790 = select <4 x i1> %788, <4 x i8> %789, <4 x i8> splat (i8 127), !dbg !145
  %791 = getelementptr i8, ptr addrspace(1) %12, i64 %92, !dbg !146
  %792 = bitcast <4 x i8> %790 to i32, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %792, ptr addrspace(1) %791, i1 %20) #5, !dbg !147
  %793 = getelementptr i8, ptr addrspace(1) %13, i64 %92, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %792, ptr addrspace(1) %793, i1 %20) #5, !dbg !149
  %794 = getelementptr i8, ptr addrspace(1) %14, i64 %92, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %792, ptr addrspace(1) %794, i1 %20) #5, !dbg !151
  %795 = getelementptr i8, ptr addrspace(1) %15, i64 %92, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %792, ptr addrspace(1) %795, i1 %20) #5, !dbg !153
  ret void, !dbg !154
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 112, scope: !6)
!16 = !DILocation(line: 44, column: 62, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 208, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 42, column: 51, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 210, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 211, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 211, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 211, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 45, column: 58, scope: !6)
!29 = !DILocation(line: 217, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 47, column: 79, scope: !6)
!32 = !DILocation(line: 218, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 219, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 219, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 219, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 221, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 221, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 222, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 222, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 222, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 222, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 222, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 229, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 67, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 70, column: 32, scope: !6)
!47 = !DILocation(line: 53, column: 40, scope: !6)
!48 = !DILocation(line: 83, column: 50, scope: !6)
!49 = !DILocation(line: 71, column: 24, scope: !6)
!50 = !DILocation(line: 65, column: 24, scope: !6)
!51 = !DILocation(line: 85, column: 50, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 59, column: 41, scope: !6)
!54 = !DILocation(line: 59, column: 34, scope: !6)
!55 = !DILocation(line: 59, column: 51, scope: !6)
!56 = !DILocation(line: 60, column: 42, scope: !6)
!57 = !DILocation(line: 60, column: 35, scope: !6)
!58 = !DILocation(line: 60, column: 49, scope: !6)
!59 = !DILocation(line: 61, column: 35, scope: !6)
!60 = !DILocation(line: 61, column: 49, scope: !6)
!61 = !DILocation(line: 62, column: 35, scope: !6)
!62 = !DILocation(line: 62, column: 42, scope: !6)
!63 = !DILocation(line: 63, column: 35, scope: !6)
!64 = !DILocation(line: 63, column: 42, scope: !6)
!65 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !66)
!66 = !DILocation(line: 82, column: 47, scope: !6)
!67 = !DILocation(line: 59, column: 113, scope: !6)
!68 = !DILocation(line: 61, column: 102, scope: !6)
!69 = !DILocation(line: 63, column: 95, scope: !6)
!70 = !DILocation(line: 74, column: 24, scope: !6)
!71 = !DILocation(line: 76, column: 24, scope: !6)
!72 = !DILocation(line: 77, column: 24, scope: !6)
!73 = !DILocation(line: 79, column: 24, scope: !6)
!74 = !DILocation(line: 80, column: 24, scope: !6)
!75 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !66)
!76 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !66)
!77 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !66)
!78 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !79)
!79 = !DILocation(line: 84, column: 47, scope: !6)
!80 = !DILocation(line: 86, column: 29, scope: !6)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !79)
!83 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !79)
!84 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !79)
!85 = !DILocation(line: 110, column: 29, scope: !19, inlinedAt: !86)
!86 = !DILocation(line: 87, column: 40, scope: !6)
!87 = !DILocation(line: 94, column: 15, scope: !30, inlinedAt: !86)
!88 = !DILocation(line: 96, column: 16, scope: !30, inlinedAt: !86)
!89 = !DILocation(line: 97, column: 29, scope: !30, inlinedAt: !86)
!90 = !DILocation(line: 96, column: 21, scope: !30, inlinedAt: !86)
!91 = !DILocation(line: 115, column: 29, scope: !19, inlinedAt: !92)
!92 = !DILocation(line: 88, column: 40, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !30, inlinedAt: !92)
!94 = !DILocation(line: 104, column: 21, scope: !30, inlinedAt: !92)
!95 = !DILocation(line: 104, column: 16, scope: !30, inlinedAt: !92)
!96 = !DILocation(line: 105, column: 29, scope: !30, inlinedAt: !92)
!97 = !DILocation(line: 89, column: 25, scope: !6)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 90, column: 25, scope: !6)
!100 = !DILocation(line: 90, column: 37, scope: !6)
!101 = !DILocation(line: 91, column: 25, scope: !6)
!102 = !DILocation(line: 91, column: 37, scope: !6)
!103 = !DILocation(line: 92, column: 25, scope: !6)
!104 = !DILocation(line: 92, column: 37, scope: !6)
!105 = !DILocation(line: 93, column: 25, scope: !6)
!106 = !DILocation(line: 93, column: 37, scope: !6)
!107 = !DILocation(line: 94, column: 25, scope: !6)
!108 = !DILocation(line: 94, column: 37, scope: !6)
!109 = !DILocation(line: 95, column: 25, scope: !6)
!110 = !DILocation(line: 95, column: 37, scope: !6)
!111 = !DILocation(line: 96, column: 26, scope: !6)
!112 = !DILocation(line: 96, column: 38, scope: !6)
!113 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !114)
!114 = !DILocation(line: 105, column: 46, scope: !6)
!115 = !DILocation(line: 106, column: 17, scope: !6)
!116 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !117)
!117 = !DILocation(line: 107, column: 46, scope: !6)
!118 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !119)
!119 = !DILocation(line: 108, column: 46, scope: !6)
!120 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !119)
!121 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !119)
!122 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !119)
!123 = !DILocation(line: 110, column: 24, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !125)
!125 = !DILocation(line: 113, column: 46, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !125)
!129 = !DILocation(line: 116, column: 25, scope: !6)
!130 = !DILocation(line: 103, column: 36, scope: !6)
!131 = !DILocation(line: 103, column: 53, scope: !6)
!132 = !DILocation(line: 103, column: 115, scope: !6)
!133 = !DILocation(line: 119, column: 24, scope: !6)
!134 = !DILocation(line: 120, column: 36, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !136)
!136 = !DILocation(line: 123, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !136)
!140 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !141)
!141 = !DILocation(line: 125, column: 46, scope: !6)
!142 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !141)
!144 = !DILocation(line: 127, column: 25, scope: !6)
!145 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !141)
!146 = !DILocation(line: 128, column: 30, scope: !6)
!147 = !DILocation(line: 128, column: 54, scope: !6)
!148 = !DILocation(line: 129, column: 30, scope: !6)
!149 = !DILocation(line: 129, column: 54, scope: !6)
!150 = !DILocation(line: 130, column: 30, scope: !6)
!151 = !DILocation(line: 130, column: 54, scope: !6)
!152 = !DILocation(line: 131, column: 30, scope: !6)
!153 = !DILocation(line: 131, column: 54, scope: !6)
!154 = !DILocation(line: 97, column: 4, scope: !6)
