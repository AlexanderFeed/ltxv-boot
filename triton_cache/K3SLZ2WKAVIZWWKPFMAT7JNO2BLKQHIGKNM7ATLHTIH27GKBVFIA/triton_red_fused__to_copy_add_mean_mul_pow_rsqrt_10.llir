; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 2, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 512, !dbg !13
  %16 = and i32 %11, 3, !dbg !14
  %17 = shl i32 %14, 12, !dbg !15
  %18 = or disjoint i32 %17, %16
  br i1 %15, label %.split.us, label %.split

.split.us:                                        ; preds = %8, %.split.us
  %19 = phi float [ %38, %.split.us ], [ 0.000000e+00, %8 ]
  %20 = phi i32 [ %39, %.split.us ], [ 0, %8 ]
  %21 = or i32 %18, %20, !dbg !16
  %22 = sext i32 %21 to i64, !dbg !17
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %23, i1 true) #4, !dbg !18
  %25 = bitcast i16 %24 to bfloat, !dbg !18
  %26 = fpext bfloat %25 to float, !dbg !19
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %22, !dbg !20
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 true) #4, !dbg !21
  %29 = bitcast i16 %28 to bfloat, !dbg !21
  %30 = fpext bfloat %29 to float, !dbg !22
  %31 = getelementptr bfloat, ptr addrspace(1) %2, i64 %22, !dbg !23
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 true) #4, !dbg !24
  %33 = bitcast i16 %32 to bfloat, !dbg !24
  %34 = fpext bfloat %33 to float, !dbg !25
  %35 = fadd float %26, %30, !dbg !26
  %36 = fadd float %35, %34, !dbg !27
  %37 = fmul float %36, %36, !dbg !28
  %38 = fadd float %19, %37, !dbg !29
  %39 = add nuw nsw i32 %20, 4, !dbg !30
  %40 = icmp samesign ult i32 %20, 4092, !dbg !30
  br i1 %40, label %.split.us, label %.split3.us, !dbg !30

.split:                                           ; preds = %8, %.split
  %41 = phi i32 [ %50, %.split ], [ 0, %8 ]
  %42 = or i32 %18, %41, !dbg !16
  %43 = sext i32 %42 to i64, !dbg !17
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !17
  %45 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 false) #4, !dbg !18
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %43, !dbg !20
  %47 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %46, i1 false) #4, !dbg !21
  %48 = getelementptr bfloat, ptr addrspace(1) %2, i64 %43, !dbg !23
  %49 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %48, i1 false) #4, !dbg !24
  %50 = add nuw nsw i32 %41, 4, !dbg !30
  %51 = icmp samesign ult i32 %41, 4092, !dbg !30
  br i1 %51, label %.split, label %.split3.us, !dbg !30

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %38, %.split.us ], [ 0.000000e+00, %.split ], !dbg !31
  %52 = bitcast float %.us-phi to i32, !dbg !31
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = fadd float %.us-phi, %54, !dbg !35
  %56 = bitcast float %55 to i32, !dbg !31
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = fadd float %55, %58, !dbg !35
  %60 = tail call float @llvm.nvvm.div.full(float %59, float 4.096000e+03), !dbg !37
  %61 = fadd float %60, 0x3EB0C6F7A0000000, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %62, 0, !dbg !39
  br i1 %.not.i, label %65, label %63, !dbg !39

63:                                               ; preds = %.split3.us
  %64 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

65:                                               ; preds = %.split3.us
  %66 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %63, %65
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], !dbg !39
  %67 = zext nneg i32 %16 to i64, !dbg !40
  br label %68, !dbg !40

68:                                               ; preds = %__nv_rsqrtf.exit, %68
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next, %68 ]
  %69 = or disjoint i64 %indvars.iv, %67, !dbg !41
  %70 = getelementptr bfloat, ptr addrspace(1) %3, i64 %69, !dbg !42
  %71 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %70, i1 true) #4, !dbg !43
  %72 = bitcast i16 %71 to bfloat, !dbg !43
  %73 = fpext bfloat %72 to float, !dbg !44
  %74 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %18, %74
  %75 = sext i32 %.reass to i64, !dbg !45
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !45
  %77 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %76, i1 %15) #4, !dbg !46
  %78 = bitcast i16 %77 to bfloat, !dbg !46
  %79 = fpext bfloat %78 to float, !dbg !47
  %80 = getelementptr bfloat, ptr addrspace(1) %1, i64 %75, !dbg !48
  %81 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %80, i1 %15) #4, !dbg !49
  %82 = bitcast i16 %81 to bfloat, !dbg !49
  %83 = fpext bfloat %82 to float, !dbg !50
  %84 = getelementptr bfloat, ptr addrspace(1) %2, i64 %75, !dbg !51
  %85 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %84, i1 %15) #4, !dbg !52
  %86 = bitcast i16 %85 to bfloat, !dbg !52
  %87 = fpext bfloat %86 to float, !dbg !53
  %88 = fadd float %79, %83, !dbg !54
  %89 = fadd float %88, %87, !dbg !55
  %90 = fmul float %.0.i, %89, !dbg !56
  %91 = fmul float %90, %73, !dbg !57
  %92 = getelementptr bfloat, ptr addrspace(1) %4, i64 %75, !dbg !58
  %93 = fptrunc float %91 to bfloat, !dbg !59
  %94 = bitcast bfloat %93 to i16, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %94, ptr addrspace(1) %92, i1 %15) #4, !dbg !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !40
  %95 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !40
  br i1 %95, label %68, label %96, !dbg !40

96:                                               ; preds = %68
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6asjslmly5ocj3s6mh3iu62oswtuony7ojqrjyoleomizjp2in.py", directory: "/tmp/torchinductor_root/m6")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 36, column: 41, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 112, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 112, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 112, scope: !6)
!26 = !DILocation(line: 39, column: 22, scope: !6)
!27 = !DILocation(line: 40, column: 22, scope: !6)
!28 = !DILocation(line: 42, column: 22, scope: !6)
!29 = !DILocation(line: 44, column: 23, scope: !6)
!30 = !DILocation(line: 30, column: 40, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 61, column: 24, scope: !6)
!38 = !DILocation(line: 63, column: 24, scope: !6)
!39 = !DILocation(line: 64, column: 32, scope: !6)
!40 = !DILocation(line: 47, column: 40, scope: !6)
!41 = !DILocation(line: 48, column: 31, scope: !6)
!42 = !DILocation(line: 53, column: 35, scope: !6)
!43 = !DILocation(line: 53, column: 42, scope: !6)
!44 = !DILocation(line: 53, column: 95, scope: !6)
!45 = !DILocation(line: 54, column: 35, scope: !6)
!46 = !DILocation(line: 54, column: 52, scope: !6)
!47 = !DILocation(line: 54, column: 114, scope: !6)
!48 = !DILocation(line: 55, column: 35, scope: !6)
!49 = !DILocation(line: 55, column: 52, scope: !6)
!50 = !DILocation(line: 55, column: 114, scope: !6)
!51 = !DILocation(line: 56, column: 35, scope: !6)
!52 = !DILocation(line: 56, column: 52, scope: !6)
!53 = !DILocation(line: 56, column: 114, scope: !6)
!54 = !DILocation(line: 57, column: 24, scope: !6)
!55 = !DILocation(line: 58, column: 24, scope: !6)
!56 = !DILocation(line: 65, column: 24, scope: !6)
!57 = !DILocation(line: 67, column: 24, scope: !6)
!58 = !DILocation(line: 68, column: 29, scope: !6)
!59 = !DILocation(line: 68, column: 53, scope: !6)
!60 = !DILocation(line: 47, column: 4, scope: !6)
