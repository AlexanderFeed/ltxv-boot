; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 128, !dbg !11
  %.lobit = lshr exact i32 %20, 7, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %18, 512, !dbg !13
  %25 = shl i32 %19, 2, !dbg !14
  %26 = and i32 %25, 1020, !dbg !14
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = sext i32 %22 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !20
  %52 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !20
  %53 = fpext bfloat %52 to float, !dbg !20
  %54 = fsub float 0.000000e+00, %53, !dbg !24
  %.inv4 = fcmp ole bfloat %50, 0xR0000, !dbg !25
  %55 = select i1 %.inv4, bfloat 0xR0000, bfloat %50, !dbg !25
  %56 = fpext bfloat %55 to float, !dbg !25
  %57 = fcmp ogt float %54, %56, !dbg !27
  %58 = fcmp uno float %54, 0.000000e+00, !dbg !29
  %59 = or i1 %58, %57, !dbg !30
  %60 = select i1 %59, float %54, float %56, !dbg !31
  %61 = fmul float %60, 0x3F80204080000000, !dbg !32
  %62 = fcmp ogt float %61, 0x3EE4F8B580000000, !dbg !33
  %63 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %64 = or i1 %62, %63, !dbg !36
  %65 = select i1 %64, float %61, float 0x3EE4F8B580000000, !dbg !37
  %66 = or disjoint i32 %51, %28
  %67 = or disjoint i32 %51, %29
  %68 = and i32 %27, 2040
  %69 = lshr i32 %27, 6
  %.idx = and i32 %69, 16
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %71 = getelementptr bfloat, ptr addrspace(3) %70, i32 %68
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 2064
  %74 = getelementptr float, ptr addrspace(3) %70, i32 %68
  %75 = or disjoint i32 %68, 4
  %76 = lshr i32 %27, 8
  %77 = and i32 %76, 4
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75
  %80 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %81 = getelementptr inbounds nuw i8, ptr addrspace(3) %80, i32 4112
  %82 = zext nneg i32 %26 to i64, !dbg !38
  %83 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 4
  %84 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !39
  %85 = shufflevector <8 x i1> %84, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %86 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 4
  %87 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 8
  %88 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 12
  br label %89, !dbg !38

89:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %106 = phi <8 x float> [ zeroinitializer, %16 ], [ %298, %._crit_edge ]
  %107 = or disjoint i64 %indvars.iv, %82, !dbg !40
  %108 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %109 = add i32 %66, %108, !dbg !41
  %110 = add i32 %67, %108, !dbg !41
  %111 = sext i32 %109 to i64, !dbg !42
  %112 = getelementptr bfloat, ptr addrspace(1) %0, i64 %111, !dbg !42
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %23) #5, !dbg !43
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !43
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !43
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !43
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %114, i32 %115, i32 %116, i32 %117, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %118 = add nuw nsw i64 %107, 6144, !dbg !45
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !46
  %120 = getelementptr bfloat, ptr addrspace(1) %2, i64 %118, !dbg !47
  %121 = getelementptr i32, ptr addrspace(1) %3, i64 %111, !dbg !48
  %122 = sext i32 %110 to i64, !dbg !48
  %123 = getelementptr i32, ptr addrspace(1) %3, i64 %122, !dbg !48
  %124 = getelementptr bfloat, ptr addrspace(1) %6, i64 %107, !dbg !49
  %125 = getelementptr bfloat, ptr addrspace(1) %7, i64 %107, !dbg !50
  %126 = load <4 x bfloat>, ptr addrspace(3) %72, align 8, !dbg !44
  %127 = load <4 x bfloat>, ptr addrspace(3) %73, align 8, !dbg !44
  %128 = shufflevector <4 x bfloat> %126, <4 x bfloat> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !44
  %129 = fpext <8 x bfloat> %128 to <8 x float>, !dbg !44
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %119, i1 true) #5, !dbg !51
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !51
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !51
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !51
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !51
  %135 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !51
  %136 = insertelement <4 x i32> %135, i32 %132, i64 1, !dbg !51
  %137 = insertelement <4 x i32> %136, i32 %133, i64 2, !dbg !51
  %138 = insertelement <4 x i32> %137, i32 %134, i64 3, !dbg !51
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !51
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %120, i1 true) #5, !dbg !52
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !52
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !52
  %143 = extractvalue { i32, i32 } %140, 1, !dbg !52
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !52
  %145 = shufflevector <2 x bfloat> %142, <2 x bfloat> %144, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %146 = fpext <4 x bfloat> %145 to <4 x float>, !dbg !53
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %23) #5, !dbg !54
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !54
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !54
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !54
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !54
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %23) #5, !dbg !54
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !54
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !54
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !54
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !54
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %124, i1 true) #5, !dbg !55
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !55
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !55
  %160 = extractvalue { i32, i32 } %157, 1, !dbg !55
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !55
  %162 = shufflevector <2 x bfloat> %159, <2 x bfloat> %161, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %163 = fpext <4 x bfloat> %162 to <4 x float>, !dbg !56
  %164 = shufflevector <4 x float> %163, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %125, i1 true) #5, !dbg !57
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !57
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !57
  %168 = extractvalue { i32, i32 } %165, 1, !dbg !57
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !57
  %170 = shufflevector <2 x bfloat> %167, <2 x bfloat> %169, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %171 = fpext <4 x bfloat> %170 to <4 x float>, !dbg !58
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %173 = fadd <4 x float> %139, %146, !dbg !59
  %174 = shufflevector <4 x float> %173, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %175 = sitofp i32 %148 to float, !dbg !60
  %176 = sitofp i32 %149 to float, !dbg !60
  %177 = sitofp i32 %150 to float, !dbg !60
  %178 = sitofp i32 %151 to float, !dbg !60
  %179 = sitofp i32 %153 to float, !dbg !60
  %180 = sitofp i32 %154 to float, !dbg !60
  %181 = sitofp i32 %155 to float, !dbg !60
  %182 = sitofp i32 %156 to float, !dbg !60
  %183 = fmul float %65, %175, !dbg !61
  %184 = fmul float %65, %176, !dbg !61
  %185 = fmul float %65, %177, !dbg !61
  %186 = fmul float %65, %178, !dbg !61
  %187 = fmul float %65, %179, !dbg !61
  %188 = fmul float %65, %180, !dbg !61
  %189 = fmul float %65, %181, !dbg !61
  %190 = fmul float %65, %182, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %191 = bitcast float %183 to i32, !dbg !61
  %192 = bitcast float %184 to i32, !dbg !61
  %193 = bitcast float %185 to i32, !dbg !61
  %194 = bitcast float %186 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %191, i32 %192, i32 %193, i32 %194, i1 true) #5, !dbg !61
  %195 = bitcast float %187 to i32, !dbg !61
  %196 = bitcast float %188 to i32, !dbg !61
  %197 = bitcast float %189 to i32, !dbg !61
  %198 = bitcast float %190 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %195, i32 %196, i32 %197, i32 %198, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %199 = load <4 x float>, ptr addrspace(3) %80, align 16, !dbg !61
  %200 = load <4 x float>, ptr addrspace(3) %81, align 16, !dbg !61
  %201 = shufflevector <4 x float> %199, <4 x float> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !62
  %202 = fmul <8 x float> %201, %164, !dbg !62
  %203 = fadd <8 x float> %202, %172, !dbg !63
  %204 = fmul <8 x float> %174, %203, !dbg !64
  %205 = fadd <8 x float> %204, %129, !dbg !65
  %206 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %206, label %._crit_edge, label %207, !dbg !67

207:                                              ; preds = %89
  %208 = fsub <8 x float> %205, %106, !dbg !69
  %209 = extractelement <8 x float> %208, i64 0, !dbg !69
  %210 = fsub <8 x float> %205, %106, !dbg !69
  %211 = extractelement <8 x float> %210, i64 1, !dbg !69
  %212 = fsub <8 x float> %205, %106, !dbg !69
  %213 = extractelement <8 x float> %212, i64 2, !dbg !69
  %214 = fsub <8 x float> %205, %106, !dbg !69
  %215 = extractelement <8 x float> %214, i64 3, !dbg !69
  %216 = fsub <8 x float> %205, %106, !dbg !69
  %217 = extractelement <8 x float> %216, i64 4, !dbg !69
  %218 = fsub <8 x float> %205, %106, !dbg !69
  %219 = extractelement <8 x float> %218, i64 5, !dbg !69
  %220 = fsub <8 x float> %205, %106, !dbg !69
  %221 = extractelement <8 x float> %220, i64 6, !dbg !69
  %222 = fsub <8 x float> %205, %106, !dbg !69
  %223 = extractelement <8 x float> %222, i64 7, !dbg !69
  %224 = fadd float %90, 1.000000e+00, !dbg !70
  %225 = fadd float %91, 1.000000e+00, !dbg !70
  %226 = fadd float %92, 1.000000e+00, !dbg !70
  %227 = fadd float %93, 1.000000e+00, !dbg !70
  %228 = fadd float %94, 1.000000e+00, !dbg !70
  %229 = fadd float %95, 1.000000e+00, !dbg !70
  %230 = fadd float %96, 1.000000e+00, !dbg !70
  %231 = fadd float %97, 1.000000e+00, !dbg !70
  %232 = tail call float @llvm.nvvm.div.full(float %209, float %224), !dbg !71
  %233 = tail call float @llvm.nvvm.div.full(float %211, float %225), !dbg !71
  %234 = tail call float @llvm.nvvm.div.full(float %213, float %226), !dbg !71
  %235 = tail call float @llvm.nvvm.div.full(float %215, float %227), !dbg !71
  %236 = tail call float @llvm.nvvm.div.full(float %217, float %228), !dbg !71
  %237 = tail call float @llvm.nvvm.div.full(float %219, float %229), !dbg !71
  %238 = tail call float @llvm.nvvm.div.full(float %221, float %230), !dbg !71
  %239 = tail call float @llvm.nvvm.div.full(float %223, float %231), !dbg !71
  %240 = insertelement <8 x float> poison, float %232, i64 0, !dbg !72
  %241 = insertelement <8 x float> %240, float %233, i64 1, !dbg !72
  %242 = insertelement <8 x float> %241, float %234, i64 2, !dbg !72
  %243 = insertelement <8 x float> %242, float %235, i64 3, !dbg !72
  %244 = insertelement <8 x float> %243, float %236, i64 4, !dbg !72
  %245 = insertelement <8 x float> %244, float %237, i64 5, !dbg !72
  %246 = insertelement <8 x float> %245, float %238, i64 6, !dbg !72
  %247 = insertelement <8 x float> %246, float %239, i64 7, !dbg !72
  %248 = fadd <8 x float> %106, %247, !dbg !72
  %249 = fsub <8 x float> %205, %248, !dbg !73
  %250 = fsub <8 x float> %205, %248, !dbg !73
  %251 = fsub <8 x float> %205, %248, !dbg !73
  %252 = fsub <8 x float> %205, %248, !dbg !73
  %253 = fsub <8 x float> %205, %248, !dbg !73
  %254 = fsub <8 x float> %205, %248, !dbg !73
  %255 = fsub <8 x float> %205, %248, !dbg !73
  %256 = fsub <8 x float> %205, %248, !dbg !73
  %257 = fmul <8 x float> %208, %249, !dbg !74
  %258 = extractelement <8 x float> %257, i64 0, !dbg !74
  %259 = fmul <8 x float> %210, %250, !dbg !74
  %260 = extractelement <8 x float> %259, i64 1, !dbg !74
  %261 = fmul <8 x float> %212, %251, !dbg !74
  %262 = extractelement <8 x float> %261, i64 2, !dbg !74
  %263 = fmul <8 x float> %214, %252, !dbg !74
  %264 = extractelement <8 x float> %263, i64 3, !dbg !74
  %265 = fmul <8 x float> %216, %253, !dbg !74
  %266 = extractelement <8 x float> %265, i64 4, !dbg !74
  %267 = fmul <8 x float> %218, %254, !dbg !74
  %268 = extractelement <8 x float> %267, i64 5, !dbg !74
  %269 = fmul <8 x float> %220, %255, !dbg !74
  %270 = extractelement <8 x float> %269, i64 6, !dbg !74
  %271 = fmul <8 x float> %222, %256, !dbg !74
  %272 = extractelement <8 x float> %271, i64 7, !dbg !74
  %273 = fadd float %98, %258, !dbg !75
  %274 = fadd float %99, %260, !dbg !75
  %275 = fadd float %100, %262, !dbg !75
  %276 = fadd float %101, %264, !dbg !75
  %277 = fadd float %102, %266, !dbg !75
  %278 = fadd float %103, %268, !dbg !75
  %279 = fadd float %104, %270, !dbg !75
  %280 = fadd float %105, %272, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %89, %207
  %281 = phi float [ %273, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %282 = phi float [ %274, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %283 = phi float [ %275, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %284 = phi float [ %276, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %285 = phi float [ %277, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %286 = phi float [ %278, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %287 = phi float [ %279, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %288 = phi float [ %280, %207 ], [ 0.000000e+00, %89 ], !dbg !68
  %289 = phi float [ %224, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %290 = phi float [ %225, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %291 = phi float [ %226, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %292 = phi float [ %227, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %293 = phi float [ %228, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %294 = phi float [ %229, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %295 = phi float [ %230, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %296 = phi float [ %231, %207 ], [ 1.000000e+00, %89 ], !dbg !68
  %297 = phi <8 x float> [ %248, %207 ], [ %205, %89 ]
  %298 = select <8 x i1> %85, <8 x float> %297, <8 x float> %106, !dbg !39
  %299 = select i1 %24, float %281, float %98, !dbg !76
  %300 = select i1 %24, float %282, float %99, !dbg !76
  %301 = select i1 %24, float %283, float %100, !dbg !76
  %302 = select i1 %24, float %284, float %101, !dbg !76
  %303 = select i1 %24, float %285, float %102, !dbg !76
  %304 = select i1 %24, float %286, float %103, !dbg !76
  %305 = select i1 %24, float %287, float %104, !dbg !76
  %306 = select i1 %24, float %288, float %105, !dbg !76
  %307 = select i1 %24, float %289, float %90, !dbg !77
  %308 = select i1 %24, float %290, float %91, !dbg !77
  %309 = select i1 %24, float %291, float %92, !dbg !77
  %310 = select i1 %24, float %292, float %93, !dbg !77
  %311 = select i1 %24, float %293, float %94, !dbg !77
  %312 = select i1 %24, float %294, float %95, !dbg !77
  %313 = select i1 %24, float %295, float %96, !dbg !77
  %314 = select i1 %24, float %296, float %97, !dbg !77
  %315 = getelementptr bfloat, ptr addrspace(1) %8, i64 %111, !dbg !78
  %316 = extractelement <8 x float> %205, i64 0, !dbg !79
  %317 = fptrunc float %316 to bfloat, !dbg !79
  %318 = extractelement <8 x float> %205, i64 1, !dbg !79
  %319 = fptrunc float %318 to bfloat, !dbg !79
  %320 = extractelement <8 x float> %205, i64 2, !dbg !79
  %321 = fptrunc float %320 to bfloat, !dbg !79
  %322 = extractelement <8 x float> %205, i64 3, !dbg !79
  %323 = fptrunc float %322 to bfloat, !dbg !79
  %324 = extractelement <8 x float> %205, i64 4, !dbg !79
  %325 = fptrunc float %324 to bfloat, !dbg !79
  %326 = extractelement <8 x float> %205, i64 5, !dbg !79
  %327 = fptrunc float %326 to bfloat, !dbg !79
  %328 = extractelement <8 x float> %205, i64 6, !dbg !79
  %329 = fptrunc float %328 to bfloat, !dbg !79
  %330 = extractelement <8 x float> %205, i64 7, !dbg !79
  %331 = fptrunc float %330 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %332 = bitcast bfloat %317 to i16, !dbg !79
  %333 = bitcast bfloat %319 to i16, !dbg !79
  %334 = bitcast bfloat %321 to i16, !dbg !79
  %335 = bitcast bfloat %323 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %72, i16 %332, i16 %333, i16 %334, i16 %335, i1 true) #5, !dbg !79
  %336 = bitcast bfloat %325 to i16, !dbg !79
  %337 = bitcast bfloat %327 to i16, !dbg !79
  %338 = bitcast bfloat %329 to i16, !dbg !79
  %339 = bitcast bfloat %331 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %73, i16 %336, i16 %337, i16 %338, i16 %339, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.extract110 = load i32, ptr addrspace(3) %71, align 16, !dbg !79
  %.extract112 = load i32, ptr addrspace(3) %86, align 4, !dbg !79
  %.extract114 = load i32, ptr addrspace(3) %87, align 8, !dbg !79
  %.extract116 = load i32, ptr addrspace(3) %88, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract110, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %315, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %340 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %340, label %89, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %341 = lshr i32 %19, 5, !dbg !11
  %342 = and i32 %19, 1, !dbg !11
  %343 = or disjoint i32 %18, %342, !dbg !12
  %344 = icmp slt i32 %343, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %345 = extractelement <8 x float> %298, i64 0, !dbg !82
  %346 = extractelement <8 x float> %298, i64 1, !dbg !82
  %347 = fsub float %346, %345, !dbg !82
  %348 = fadd float %307, %308, !dbg !84
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !85
  %350 = tail call float @llvm.nvvm.div.full(float %308, float %348), !dbg !86
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !87
  %352 = fmul float %347, %351, !dbg !88
  %353 = fadd float %345, %352, !dbg !89
  %354 = fadd float %299, %300, !dbg !90
  %355 = fmul float %347, %347, !dbg !91
  %356 = fmul float %355, %307, !dbg !92
  %357 = fmul float %356, %351, !dbg !93
  %358 = fadd float %354, %357, !dbg !94
  %359 = extractelement <8 x float> %298, i64 2, !dbg !82
  %360 = fsub float %359, %353, !dbg !82
  %361 = fadd float %309, %348, !dbg !84
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !85
  %363 = tail call float @llvm.nvvm.div.full(float %309, float %361), !dbg !86
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !87
  %365 = fmul float %364, %360, !dbg !88
  %366 = fadd float %353, %365, !dbg !89
  %367 = fadd float %301, %358, !dbg !90
  %368 = fmul float %360, %360, !dbg !91
  %369 = fmul float %348, %368, !dbg !92
  %370 = fmul float %364, %369, !dbg !93
  %371 = fadd float %367, %370, !dbg !94
  %372 = extractelement <8 x float> %298, i64 3, !dbg !82
  %373 = fsub float %372, %366, !dbg !82
  %374 = fadd float %310, %361, !dbg !84
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !85
  %376 = tail call float @llvm.nvvm.div.full(float %310, float %374), !dbg !86
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !87
  %378 = fmul float %377, %373, !dbg !88
  %379 = fadd float %366, %378, !dbg !89
  %380 = fadd float %302, %371, !dbg !90
  %381 = fmul float %373, %373, !dbg !91
  %382 = fmul float %361, %381, !dbg !92
  %383 = fmul float %377, %382, !dbg !93
  %384 = fadd float %380, %383, !dbg !94
  %385 = extractelement <8 x float> %298, i64 4, !dbg !82
  %386 = extractelement <8 x float> %298, i64 5, !dbg !82
  %387 = fsub float %386, %385, !dbg !82
  %388 = fadd float %311, %312, !dbg !84
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !85
  %390 = tail call float @llvm.nvvm.div.full(float %312, float %388), !dbg !86
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !87
  %392 = fmul float %387, %391, !dbg !88
  %393 = fadd float %385, %392, !dbg !89
  %394 = fadd float %303, %304, !dbg !90
  %395 = fmul float %387, %387, !dbg !91
  %396 = fmul float %395, %311, !dbg !92
  %397 = fmul float %396, %391, !dbg !93
  %398 = fadd float %394, %397, !dbg !94
  %399 = extractelement <8 x float> %298, i64 6, !dbg !82
  %400 = fsub float %399, %393, !dbg !82
  %401 = fadd float %313, %388, !dbg !84
  %402 = fcmp oeq float %401, 0.000000e+00, !dbg !85
  %403 = tail call float @llvm.nvvm.div.full(float %313, float %401), !dbg !86
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !87
  %405 = fmul float %404, %400, !dbg !88
  %406 = fadd float %393, %405, !dbg !89
  %407 = fadd float %305, %398, !dbg !90
  %408 = fmul float %400, %400, !dbg !91
  %409 = fmul float %388, %408, !dbg !92
  %410 = fmul float %404, %409, !dbg !93
  %411 = fadd float %407, %410, !dbg !94
  %412 = extractelement <8 x float> %298, i64 7, !dbg !82
  %413 = fsub float %412, %406, !dbg !82
  %414 = fadd float %314, %401, !dbg !84
  %415 = fcmp oeq float %414, 0.000000e+00, !dbg !85
  %416 = tail call float @llvm.nvvm.div.full(float %314, float %414), !dbg !86
  %417 = select i1 %415, float 0.000000e+00, float %416, !dbg !87
  %418 = fmul float %417, %413, !dbg !88
  %419 = fadd float %406, %418, !dbg !89
  %420 = fadd float %306, %411, !dbg !90
  %421 = fmul float %413, %413, !dbg !91
  %422 = fmul float %401, %421, !dbg !92
  %423 = fmul float %417, %422, !dbg !93
  %424 = fadd float %420, %423, !dbg !94
  %425 = bitcast float %379 to i32, !dbg !80
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 16, i32 31), !dbg !80
  %427 = bitcast i32 %426 to float, !dbg !80
  %428 = bitcast float %384 to i32, !dbg !80
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 16, i32 31), !dbg !80
  %430 = bitcast i32 %429 to float, !dbg !80
  %431 = bitcast float %374 to i32, !dbg !80
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 16, i32 31), !dbg !80
  %433 = bitcast i32 %432 to float, !dbg !80
  %434 = fsub float %427, %379, !dbg !82
  %435 = fadd float %374, %433, !dbg !84
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !85
  %437 = tail call float @llvm.nvvm.div.full(float %433, float %435), !dbg !86
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !87
  %439 = fmul float %434, %438, !dbg !88
  %440 = fadd float %379, %439, !dbg !89
  %441 = fadd float %384, %430, !dbg !90
  %442 = fmul float %434, %434, !dbg !91
  %443 = fmul float %374, %442, !dbg !92
  %444 = fmul float %443, %438, !dbg !93
  %445 = fadd float %441, %444, !dbg !94
  %446 = bitcast float %440 to i32, !dbg !80
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !80
  %448 = bitcast i32 %447 to float, !dbg !80
  %449 = bitcast float %445 to i32, !dbg !80
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 8, i32 31), !dbg !80
  %451 = bitcast i32 %450 to float, !dbg !80
  %452 = bitcast float %435 to i32, !dbg !80
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 8, i32 31), !dbg !80
  %454 = bitcast i32 %453 to float, !dbg !80
  %455 = fsub float %448, %440, !dbg !82
  %456 = fadd float %435, %454, !dbg !84
  %457 = fcmp oeq float %456, 0.000000e+00, !dbg !85
  %458 = tail call float @llvm.nvvm.div.full(float %454, float %456), !dbg !86
  %459 = select i1 %457, float 0.000000e+00, float %458, !dbg !87
  %460 = fmul float %455, %459, !dbg !88
  %461 = fadd float %440, %460, !dbg !89
  %462 = fadd float %445, %451, !dbg !90
  %463 = fmul float %455, %455, !dbg !91
  %464 = fmul float %435, %463, !dbg !92
  %465 = fmul float %459, %464, !dbg !93
  %466 = fadd float %462, %465, !dbg !94
  %467 = bitcast float %461 to i32, !dbg !80
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 4, i32 31), !dbg !80
  %469 = bitcast i32 %468 to float, !dbg !80
  %470 = bitcast float %466 to i32, !dbg !80
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 4, i32 31), !dbg !80
  %472 = bitcast i32 %471 to float, !dbg !80
  %473 = bitcast float %456 to i32, !dbg !80
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 4, i32 31), !dbg !80
  %475 = bitcast i32 %474 to float, !dbg !80
  %476 = fsub float %469, %461, !dbg !82
  %477 = fadd float %456, %475, !dbg !84
  %478 = fcmp oeq float %477, 0.000000e+00, !dbg !85
  %479 = tail call float @llvm.nvvm.div.full(float %475, float %477), !dbg !86
  %480 = select i1 %478, float 0.000000e+00, float %479, !dbg !87
  %481 = fmul float %476, %480, !dbg !88
  %482 = fadd float %461, %481, !dbg !89
  %483 = fadd float %466, %472, !dbg !90
  %484 = fmul float %476, %476, !dbg !91
  %485 = fmul float %456, %484, !dbg !92
  %486 = fmul float %480, %485, !dbg !93
  %487 = fadd float %483, %486, !dbg !94
  %488 = bitcast float %482 to i32, !dbg !80
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 2, i32 31), !dbg !80
  %490 = bitcast i32 %489 to float, !dbg !80
  %491 = bitcast float %487 to i32, !dbg !80
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 2, i32 31), !dbg !80
  %493 = bitcast i32 %492 to float, !dbg !80
  %494 = bitcast float %477 to i32, !dbg !80
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !80
  %496 = bitcast i32 %495 to float, !dbg !80
  %497 = fsub float %490, %482, !dbg !82
  %498 = fadd float %477, %496, !dbg !84
  %499 = fcmp oeq float %498, 0.000000e+00, !dbg !85
  %500 = tail call float @llvm.nvvm.div.full(float %496, float %498), !dbg !86
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !87
  %502 = fmul float %497, %501, !dbg !88
  %503 = fadd float %482, %502, !dbg !89
  %504 = fadd float %487, %493, !dbg !90
  %505 = fmul float %497, %497, !dbg !91
  %506 = fmul float %477, %505, !dbg !92
  %507 = fmul float %501, %506, !dbg !93
  %508 = fadd float %504, %507, !dbg !94
  %509 = bitcast float %503 to i32, !dbg !80
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 1, i32 31), !dbg !80
  %511 = bitcast i32 %510 to float, !dbg !80
  %512 = bitcast float %508 to i32, !dbg !80
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !80
  %514 = bitcast i32 %513 to float, !dbg !80
  %515 = bitcast float %498 to i32, !dbg !80
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 1, i32 31), !dbg !80
  %517 = bitcast i32 %516 to float, !dbg !80
  %518 = fsub float %511, %503, !dbg !82
  %519 = fadd float %498, %517, !dbg !84
  %520 = fcmp oeq float %519, 0.000000e+00, !dbg !85
  %521 = tail call float @llvm.nvvm.div.full(float %517, float %519), !dbg !86
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !87
  %523 = fmul float %518, %522, !dbg !88
  %524 = fadd float %503, %523, !dbg !89
  %525 = fadd float %508, %514, !dbg !90
  %526 = fmul float %518, %518, !dbg !91
  %527 = fmul float %498, %526, !dbg !92
  %528 = fmul float %522, %527, !dbg !93
  %529 = fadd float %525, %528, !dbg !94
  %530 = bitcast float %419 to i32, !dbg !80
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 16, i32 31), !dbg !80
  %532 = bitcast i32 %531 to float, !dbg !80
  %533 = bitcast float %424 to i32, !dbg !80
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 16, i32 31), !dbg !80
  %535 = bitcast i32 %534 to float, !dbg !80
  %536 = bitcast float %414 to i32, !dbg !80
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 16, i32 31), !dbg !80
  %538 = bitcast i32 %537 to float, !dbg !80
  %539 = fsub float %532, %419, !dbg !82
  %540 = fadd float %414, %538, !dbg !84
  %541 = fcmp oeq float %540, 0.000000e+00, !dbg !85
  %542 = tail call float @llvm.nvvm.div.full(float %538, float %540), !dbg !86
  %543 = select i1 %541, float 0.000000e+00, float %542, !dbg !87
  %544 = fmul float %539, %543, !dbg !88
  %545 = fadd float %419, %544, !dbg !89
  %546 = fadd float %424, %535, !dbg !90
  %547 = fmul float %539, %539, !dbg !91
  %548 = fmul float %414, %547, !dbg !92
  %549 = fmul float %548, %543, !dbg !93
  %550 = fadd float %546, %549, !dbg !94
  %551 = bitcast float %545 to i32, !dbg !80
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 8, i32 31), !dbg !80
  %553 = bitcast i32 %552 to float, !dbg !80
  %554 = bitcast float %550 to i32, !dbg !80
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 8, i32 31), !dbg !80
  %556 = bitcast i32 %555 to float, !dbg !80
  %557 = bitcast float %540 to i32, !dbg !80
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 8, i32 31), !dbg !80
  %559 = bitcast i32 %558 to float, !dbg !80
  %560 = fsub float %553, %545, !dbg !82
  %561 = fadd float %540, %559, !dbg !84
  %562 = fcmp oeq float %561, 0.000000e+00, !dbg !85
  %563 = tail call float @llvm.nvvm.div.full(float %559, float %561), !dbg !86
  %564 = select i1 %562, float 0.000000e+00, float %563, !dbg !87
  %565 = fmul float %560, %564, !dbg !88
  %566 = fadd float %545, %565, !dbg !89
  %567 = fadd float %550, %556, !dbg !90
  %568 = fmul float %560, %560, !dbg !91
  %569 = fmul float %540, %568, !dbg !92
  %570 = fmul float %564, %569, !dbg !93
  %571 = fadd float %567, %570, !dbg !94
  %572 = bitcast float %566 to i32, !dbg !80
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 4, i32 31), !dbg !80
  %574 = bitcast i32 %573 to float, !dbg !80
  %575 = bitcast float %571 to i32, !dbg !80
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 4, i32 31), !dbg !80
  %577 = bitcast i32 %576 to float, !dbg !80
  %578 = bitcast float %561 to i32, !dbg !80
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 4, i32 31), !dbg !80
  %580 = bitcast i32 %579 to float, !dbg !80
  %581 = fsub float %574, %566, !dbg !82
  %582 = fadd float %561, %580, !dbg !84
  %583 = fcmp oeq float %582, 0.000000e+00, !dbg !85
  %584 = tail call float @llvm.nvvm.div.full(float %580, float %582), !dbg !86
  %585 = select i1 %583, float 0.000000e+00, float %584, !dbg !87
  %586 = fmul float %581, %585, !dbg !88
  %587 = fadd float %566, %586, !dbg !89
  %588 = fadd float %571, %577, !dbg !90
  %589 = fmul float %581, %581, !dbg !91
  %590 = fmul float %561, %589, !dbg !92
  %591 = fmul float %585, %590, !dbg !93
  %592 = fadd float %588, %591, !dbg !94
  %593 = bitcast float %587 to i32, !dbg !80
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 2, i32 31), !dbg !80
  %595 = bitcast i32 %594 to float, !dbg !80
  %596 = bitcast float %592 to i32, !dbg !80
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !80
  %598 = bitcast i32 %597 to float, !dbg !80
  %599 = bitcast float %582 to i32, !dbg !80
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %599, i32 2, i32 31), !dbg !80
  %601 = bitcast i32 %600 to float, !dbg !80
  %602 = fsub float %595, %587, !dbg !82
  %603 = fadd float %582, %601, !dbg !84
  %604 = fcmp oeq float %603, 0.000000e+00, !dbg !85
  %605 = tail call float @llvm.nvvm.div.full(float %601, float %603), !dbg !86
  %606 = select i1 %604, float 0.000000e+00, float %605, !dbg !87
  %607 = fmul float %602, %606, !dbg !88
  %608 = fadd float %587, %607, !dbg !89
  %609 = fadd float %592, %598, !dbg !90
  %610 = fmul float %602, %602, !dbg !91
  %611 = fmul float %582, %610, !dbg !92
  %612 = fmul float %606, %611, !dbg !93
  %613 = fadd float %609, %612, !dbg !94
  %614 = bitcast float %608 to i32, !dbg !80
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 1, i32 31), !dbg !80
  %616 = bitcast i32 %615 to float, !dbg !80
  %617 = bitcast float %613 to i32, !dbg !80
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 1, i32 31), !dbg !80
  %619 = bitcast i32 %618 to float, !dbg !80
  %620 = bitcast float %603 to i32, !dbg !80
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 1, i32 31), !dbg !80
  %622 = bitcast i32 %621 to float, !dbg !80
  %623 = fsub float %616, %608, !dbg !82
  %624 = fadd float %603, %622, !dbg !84
  %625 = fcmp oeq float %624, 0.000000e+00, !dbg !85
  %626 = tail call float @llvm.nvvm.div.full(float %622, float %624), !dbg !86
  %627 = select i1 %625, float 0.000000e+00, float %626, !dbg !87
  %628 = fmul float %623, %627, !dbg !88
  %629 = fadd float %608, %628, !dbg !89
  %630 = fadd float %613, %619, !dbg !90
  %631 = fmul float %623, %623, !dbg !91
  %632 = fmul float %603, %631, !dbg !92
  %633 = fmul float %627, %632, !dbg !93
  %634 = fadd float %630, %633, !dbg !94
  %635 = and i32 %341, 7, !dbg !80
  %636 = icmp eq i32 %21, 0, !dbg !80
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i32 %635, !dbg !80
  %638 = bitcast float %524 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %638, i1 %636) #5, !dbg !80
  %639 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %635, !dbg !80
  %640 = bitcast float %529 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %639, <1 x i32> %640, i1 %636) #5, !dbg !80
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %635, !dbg !80
  %642 = bitcast float %519 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 %636) #5, !dbg !80
  %643 = or disjoint i32 %635, 8, !dbg !80
  %644 = getelementptr float, ptr addrspace(3) @global_smem, i32 %643, !dbg !80
  %645 = bitcast float %629 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 %636) #5, !dbg !80
  %646 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %643, !dbg !80
  %647 = bitcast float %634 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %647, i1 %636) #5, !dbg !80
  %648 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %643, !dbg !80
  %649 = bitcast float %624 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %649, i1 %636) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %650 = icmp slt i32 %19, 16, !dbg !80
  %651 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %652 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %651, i1 %650) #5, !dbg !80
  %653 = bitcast i32 %652 to float, !dbg !80
  %654 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !80
  %655 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %654, i1 %650) #5, !dbg !80
  %656 = bitcast i32 %655 to float, !dbg !80
  %657 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %658 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %657, i1 %650) #5, !dbg !80
  %659 = bitcast i32 %658 to float, !dbg !80
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 4, i32 31), !dbg !80
  %661 = bitcast i32 %660 to float, !dbg !80
  %662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 4, i32 31), !dbg !80
  %663 = bitcast i32 %662 to float, !dbg !80
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 4, i32 31), !dbg !80
  %665 = bitcast i32 %664 to float, !dbg !80
  %666 = fsub float %661, %653, !dbg !82
  %667 = fadd float %659, %665, !dbg !84
  %668 = fcmp oeq float %667, 0.000000e+00, !dbg !85
  %669 = tail call float @llvm.nvvm.div.full(float %665, float %667), !dbg !86
  %670 = select i1 %668, float 0.000000e+00, float %669, !dbg !87
  %671 = fmul float %666, %670, !dbg !88
  %672 = fadd float %671, %653, !dbg !89
  %673 = fadd float %656, %663, !dbg !90
  %674 = fmul float %666, %666, !dbg !91
  %675 = fmul float %674, %659, !dbg !92
  %676 = fmul float %675, %670, !dbg !93
  %677 = fadd float %673, %676, !dbg !94
  %678 = bitcast float %672 to i32, !dbg !80
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 2, i32 31), !dbg !80
  %680 = bitcast i32 %679 to float, !dbg !80
  %681 = bitcast float %677 to i32, !dbg !80
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 2, i32 31), !dbg !80
  %683 = bitcast i32 %682 to float, !dbg !80
  %684 = bitcast float %667 to i32, !dbg !80
  %685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 2, i32 31), !dbg !80
  %686 = bitcast i32 %685 to float, !dbg !80
  %687 = fsub float %680, %672, !dbg !82
  %688 = fadd float %667, %686, !dbg !84
  %689 = fcmp oeq float %688, 0.000000e+00, !dbg !85
  %690 = tail call float @llvm.nvvm.div.full(float %686, float %688), !dbg !86
  %691 = select i1 %689, float 0.000000e+00, float %690, !dbg !87
  %692 = fmul float %687, %691, !dbg !88
  %693 = fadd float %672, %692, !dbg !89
  %694 = fadd float %677, %683, !dbg !90
  %695 = fmul float %687, %687, !dbg !91
  %696 = fmul float %667, %695, !dbg !92
  %697 = fmul float %691, %696, !dbg !93
  %698 = fadd float %694, %697, !dbg !94
  %699 = bitcast float %693 to i32, !dbg !80
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 1, i32 31), !dbg !80
  %701 = bitcast i32 %700 to float, !dbg !80
  %702 = bitcast float %698 to i32, !dbg !80
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 1, i32 31), !dbg !80
  %704 = bitcast i32 %703 to float, !dbg !80
  %705 = bitcast float %688 to i32, !dbg !80
  %706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %705, i32 1, i32 31), !dbg !80
  %707 = bitcast i32 %706 to float, !dbg !80
  %708 = fsub float %701, %693, !dbg !82
  %709 = fadd float %688, %707, !dbg !84
  %710 = fcmp oeq float %709, 0.000000e+00, !dbg !85
  %711 = tail call float @llvm.nvvm.div.full(float %707, float %709), !dbg !86
  %712 = select i1 %710, float 0.000000e+00, float %711, !dbg !87
  %713 = fmul float %708, %712, !dbg !88
  %714 = fadd float %693, %713, !dbg !89
  %715 = fadd float %698, %704, !dbg !90
  %716 = fmul float %708, %708, !dbg !91
  %717 = fmul float %688, %716, !dbg !92
  %718 = fmul float %712, %717, !dbg !93
  %719 = fadd float %715, %718, !dbg !94
  %720 = and i32 %19, 7, !dbg !80
  %721 = icmp eq i32 %720, 0, !dbg !80
  %722 = and i1 %650, %721, !dbg !80
  %723 = bitcast float %714 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %723, i1 %722) #5, !dbg !80
  %724 = bitcast float %719 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %654, <1 x i32> %724, i1 %722) #5, !dbg !80
  %725 = bitcast float %709 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %657, <1 x i32> %725, i1 %722) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %726 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %727 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %728 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %729 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %730 = tail call float @llvm.nvvm.div.full(float %728, float 3.072000e+03), !dbg !95
  %731 = tail call float @llvm.nvvm.div.full(float %729, float 3.072000e+03), !dbg !95
  %732 = fadd float %730, 0x3EB0C6F7A0000000, !dbg !96
  %733 = fadd float %731, 0x3EB0C6F7A0000000, !dbg !96
  %734 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %735 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %736 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %737 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i88 = icmp eq i32 %737, 0, !dbg !97
  br i1 %.not.i88, label %740, label %738, !dbg !97

738:                                              ; preds = %__nv_rsqrtf.exit
  %739 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %732), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

740:                                              ; preds = %__nv_rsqrtf.exit
  %741 = tail call float @llvm.nvvm.rsqrt.approx.f(float %732), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

__nv_rsqrtf.exit90:                               ; preds = %738, %740
  %.0.i89 = phi float [ %739, %738 ], [ %741, %740 ], !dbg !97
  %742 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %743 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %744 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i100 = icmp eq i32 %745, 0, !dbg !97
  br i1 %.not.i100, label %748, label %746, !dbg !97

746:                                              ; preds = %__nv_rsqrtf.exit90
  %747 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %733), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

748:                                              ; preds = %__nv_rsqrtf.exit90
  %749 = tail call float @llvm.nvvm.rsqrt.approx.f(float %733), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

__nv_rsqrtf.exit102:                              ; preds = %746, %748
  %.0.i101 = phi float [ %747, %746 ], [ %749, %748 ], !dbg !97
  %750 = lshr i32 %27, 7
  %751 = and i32 %750, 8
  %752 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %751
  %753 = getelementptr bfloat, ptr addrspace(3) %752, i32 %68
  %754 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !98
  %755 = shufflevector <2 x i1> %754, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %756 = insertelement <2 x float> poison, float %.0.i89, i64 0, !dbg !99
  %757 = shufflevector <2 x float> %756, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %758 = insertelement <2 x float> poison, float %726, i64 0, !dbg !100
  %759 = shufflevector <2 x float> %758, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %760 = insertelement <4 x float> poison, float %.0.i101, i64 0, !dbg !99
  %761 = shufflevector <4 x float> %760, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !99
  %762 = insertelement <4 x float> poison, float %727, i64 0, !dbg !100
  %763 = shufflevector <4 x float> %762, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !100
  %764 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !98
  %765 = shufflevector <4 x i1> %764, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !98
  %invariant.op = or i32 %26, 12288, !dbg !101
  %766 = getelementptr inbounds nuw i8, ptr addrspace(3) %753, i32 4
  %767 = getelementptr inbounds nuw i8, ptr addrspace(3) %753, i32 8
  %768 = getelementptr inbounds nuw i8, ptr addrspace(3) %753, i32 12
  br label %769, !dbg !101

769:                                              ; preds = %__nv_rsqrtf.exit102, %769
  %indvars.iv160 = phi i64 [ 0, %__nv_rsqrtf.exit102 ], [ %indvars.iv.next161, %769 ]
  %770 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit102 ], [ %873, %769 ]
  %771 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit102 ], [ %874, %769 ]
  %772 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit102 ], [ %872, %769 ]
  %773 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit102 ], [ %884, %769 ]
  %774 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit102 ], [ %875, %769 ]
  %775 = or disjoint i64 %indvars.iv160, %82, !dbg !102
  %776 = trunc nuw nsw i64 %indvars.iv160 to i32, !dbg !103
  %777 = add i32 %66, %776, !dbg !103
  %778 = sext i32 %777 to i64, !dbg !104
  %779 = getelementptr bfloat, ptr addrspace(1) %8, i64 %778, !dbg !104
  %780 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %779, i1 %23) #5, !dbg !105
  %781 = extractvalue { i32, i32, i32, i32 } %780, 0, !dbg !105
  %782 = extractvalue { i32, i32, i32, i32 } %780, 1, !dbg !105
  %783 = extractvalue { i32, i32, i32, i32 } %780, 2, !dbg !105
  %784 = extractvalue { i32, i32, i32, i32 } %780, 3, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %753, i32 %781, i32 %782, i32 %783, i32 %784, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %.reass.reass.reass = or i32 %776, %invariant.op
  %785 = zext nneg i32 %.reass.reass.reass to i64, !dbg !106
  %786 = getelementptr float, ptr addrspace(1) %1, i64 %785, !dbg !106
  %787 = getelementptr bfloat, ptr addrspace(1) %2, i64 %785, !dbg !107
  %788 = add nuw nsw i64 %775, 9216, !dbg !108
  %789 = getelementptr float, ptr addrspace(1) %1, i64 %788, !dbg !109
  %790 = getelementptr bfloat, ptr addrspace(1) %2, i64 %788, !dbg !110
  %791 = fcmp uno <2 x float> %772, zeroinitializer, !dbg !111
  %792 = fcmp uno float %770, 0.000000e+00, !dbg !111
  %793 = fcmp uno float %771, 0.000000e+00, !dbg !111
  %794 = fcmp uno <4 x float> %774, zeroinitializer, !dbg !111
  %795 = load <2 x bfloat>, ptr addrspace(3) %72, align 8, !dbg !99
  %796 = fpext <2 x bfloat> %795 to <2 x float>, !dbg !113
  %797 = fsub <2 x float> %796, %759, !dbg !100
  %798 = fmul <2 x float> %757, %797, !dbg !99
  %799 = fcmp uno <8 x float> %773, zeroinitializer, !dbg !114
  %800 = load <4 x bfloat>, ptr addrspace(3) %73, align 8, !dbg !99
  %801 = fpext <4 x bfloat> %800 to <4 x float>, !dbg !113
  %802 = fsub <4 x float> %801, %763, !dbg !100
  %803 = fmul <4 x float> %761, %802, !dbg !99
  %804 = load <2 x bfloat>, ptr addrspace(3) %83, align 4, !dbg !99
  %805 = fpext <2 x bfloat> %804 to <2 x float>, !dbg !113
  %806 = fsub <2 x float> %805, %759, !dbg !100
  %807 = fmul <2 x float> %757, %806, !dbg !99
  %808 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %786, i1 true) #5, !dbg !116
  %809 = extractvalue { i32, i32, i32, i32 } %808, 0, !dbg !116
  %810 = extractvalue { i32, i32, i32, i32 } %808, 1, !dbg !116
  %811 = extractvalue { i32, i32, i32, i32 } %808, 2, !dbg !116
  %812 = extractvalue { i32, i32, i32, i32 } %808, 3, !dbg !116
  %813 = insertelement <2 x i32> poison, i32 %809, i64 0, !dbg !116
  %814 = insertelement <2 x i32> %813, i32 %810, i64 1, !dbg !116
  %815 = bitcast <2 x i32> %814 to <2 x float>, !dbg !116
  %816 = insertelement <2 x i32> poison, i32 %811, i64 0, !dbg !116
  %817 = insertelement <2 x i32> %816, i32 %812, i64 1, !dbg !116
  %818 = bitcast <2 x i32> %817 to <2 x float>, !dbg !116
  %819 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %787, i1 true) #5, !dbg !117
  %820 = extractvalue { i32, i32 } %819, 0, !dbg !117
  %821 = bitcast i32 %820 to <2 x bfloat>, !dbg !117
  %822 = extractvalue { i32, i32 } %819, 1, !dbg !117
  %823 = bitcast i32 %822 to <2 x bfloat>, !dbg !117
  %824 = fpext <2 x bfloat> %821 to <2 x float>, !dbg !118
  %825 = fpext <2 x bfloat> %823 to <2 x float>, !dbg !118
  %826 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %789, i1 true) #5, !dbg !119
  %827 = extractvalue { i32, i32, i32, i32 } %826, 0, !dbg !119
  %828 = extractvalue { i32, i32, i32, i32 } %826, 1, !dbg !119
  %829 = extractvalue { i32, i32, i32, i32 } %826, 2, !dbg !119
  %830 = extractvalue { i32, i32, i32, i32 } %826, 3, !dbg !119
  %831 = insertelement <2 x i32> poison, i32 %827, i64 0, !dbg !119
  %832 = insertelement <2 x i32> %831, i32 %828, i64 1, !dbg !119
  %833 = bitcast <2 x i32> %832 to <2 x float>, !dbg !119
  %834 = insertelement <2 x i32> poison, i32 %829, i64 0, !dbg !119
  %835 = insertelement <2 x i32> %834, i32 %830, i64 1, !dbg !119
  %836 = bitcast <2 x i32> %835 to <2 x float>, !dbg !119
  %837 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %790, i1 true) #5, !dbg !120
  %838 = extractvalue { i32, i32 } %837, 0, !dbg !120
  %839 = bitcast i32 %838 to <2 x bfloat>, !dbg !120
  %840 = extractvalue { i32, i32 } %837, 1, !dbg !120
  %841 = bitcast i32 %840 to <2 x bfloat>, !dbg !120
  %842 = fpext <2 x bfloat> %839 to <2 x float>, !dbg !121
  %843 = fpext <2 x bfloat> %841 to <2 x float>, !dbg !121
  %844 = fadd <2 x float> %815, %824, !dbg !122
  %845 = fadd <2 x float> %818, %825, !dbg !122
  %846 = fadd <2 x float> %844, splat (float 1.000000e+00), !dbg !123
  %847 = fadd <2 x float> %845, splat (float 1.000000e+00), !dbg !123
  %848 = fmul <2 x float> %798, %846, !dbg !124
  %849 = fmul <2 x float> %807, %847, !dbg !124
  %850 = shufflevector <2 x float> %846, <2 x float> %847, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !124
  %851 = fmul <4 x float> %803, %850, !dbg !124
  %852 = fadd <2 x float> %833, %842, !dbg !125
  %853 = fadd <2 x float> %836, %843, !dbg !125
  %854 = fadd <2 x float> %848, %852, !dbg !126
  %855 = fadd <2 x float> %849, %853, !dbg !126
  %856 = shufflevector <2 x float> %852, <2 x float> %853, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !126
  %857 = fadd <4 x float> %851, %856, !dbg !126
  %858 = fcmp olt <2 x float> %772, %854, !dbg !127
  %859 = extractelement <2 x float> %855, i64 0, !dbg !128
  %860 = fcmp olt float %770, %859, !dbg !127
  %861 = extractelement <2 x float> %855, i64 1, !dbg !128
  %862 = fcmp olt float %771, %861, !dbg !127
  %863 = or <2 x i1> %791, %858, !dbg !129
  %864 = or i1 %792, %860, !dbg !129
  %865 = or i1 %793, %862, !dbg !129
  %866 = select <2 x i1> %863, <2 x float> %772, <2 x float> %854, !dbg !130
  %867 = select i1 %864, float %770, float %859, !dbg !130
  %868 = select i1 %865, float %771, float %861, !dbg !130
  %869 = fcmp olt <4 x float> %774, %857, !dbg !127
  %870 = or <4 x i1> %794, %869, !dbg !129
  %871 = select <4 x i1> %870, <4 x float> %774, <4 x float> %857, !dbg !130
  %872 = select <2 x i1> %755, <2 x float> %866, <2 x float> %772, !dbg !98
  %873 = select i1 %24, float %867, float %770, !dbg !98
  %874 = select i1 %24, float %868, float %771, !dbg !98
  %875 = select <4 x i1> %765, <4 x float> %871, <4 x float> %774, !dbg !98
  %876 = extractelement <2 x float> %854, i64 0, !dbg !128
  %877 = extractelement <2 x float> %854, i64 1, !dbg !128
  %878 = shufflevector <2 x float> %854, <2 x float> %855, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !131
  %879 = shufflevector <4 x float> %857, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !131
  %880 = shufflevector <8 x float> %878, <8 x float> %879, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !131
  %881 = fcmp ogt <8 x float> %773, %880, !dbg !131
  %882 = or <8 x i1> %799, %881, !dbg !132
  %883 = select <8 x i1> %882, <8 x float> %773, <8 x float> %880, !dbg !133
  %884 = select <8 x i1> %85, <8 x float> %883, <8 x float> %773, !dbg !134
  %885 = getelementptr bfloat, ptr addrspace(1) %9, i64 %778, !dbg !135
  %886 = fptrunc float %876 to bfloat, !dbg !128
  %887 = fptrunc float %877 to bfloat, !dbg !128
  %888 = fptrunc float %859 to bfloat, !dbg !128
  %889 = fptrunc float %861 to bfloat, !dbg !128
  %890 = extractelement <4 x float> %857, i64 0, !dbg !128
  %891 = fptrunc float %890 to bfloat, !dbg !128
  %892 = extractelement <4 x float> %857, i64 1, !dbg !128
  %893 = fptrunc float %892 to bfloat, !dbg !128
  %894 = extractelement <4 x float> %857, i64 2, !dbg !128
  %895 = fptrunc float %894 to bfloat, !dbg !128
  %896 = extractelement <4 x float> %857, i64 3, !dbg !128
  %897 = fptrunc float %896 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %898 = bitcast bfloat %886 to i16, !dbg !128
  %899 = bitcast bfloat %887 to i16, !dbg !128
  %900 = bitcast bfloat %888 to i16, !dbg !128
  %901 = bitcast bfloat %889 to i16, !dbg !128
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %72, i16 %898, i16 %899, i16 %900, i16 %901, i1 true) #5, !dbg !128
  %902 = bitcast bfloat %891 to i16, !dbg !128
  %903 = bitcast bfloat %893 to i16, !dbg !128
  %904 = bitcast bfloat %895 to i16, !dbg !128
  %905 = bitcast bfloat %897 to i16, !dbg !128
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %73, i16 %902, i16 %903, i16 %904, i16 %905, i1 true) #5, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %.extract = load i32, ptr addrspace(3) %753, align 16, !dbg !128
  %.extract104 = load i32, ptr addrspace(3) %766, align 4, !dbg !128
  %.extract106 = load i32, ptr addrspace(3) %767, align 8, !dbg !128
  %.extract108 = load i32, ptr addrspace(3) %768, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %885, i1 %23) #5, !dbg !128
  %indvars.iv.next161 = add nuw nsw i64 %indvars.iv160, 1024, !dbg !101
  %906 = icmp samesign ult i64 %indvars.iv160, 2048, !dbg !101
  br i1 %906, label %769, label %907, !dbg !101

907:                                              ; preds = %769
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %908 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %872, <2 x i32> <i32 0, i32 2>, !dbg !138
  %909 = fcmp olt <2 x float> %908, %872, !dbg !138
  %910 = fcmp uno <2 x float> %908, %872, !dbg !138
  %shift = shufflevector <2 x i1> %909, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %911 = or <2 x i1> %shift, %910, !dbg !139
  %912 = extractelement <2 x i1> %911, i64 0, !dbg !139
  %913 = extractelement <2 x float> %872, i64 0, !dbg !140
  %914 = extractelement <2 x float> %872, i64 1, !dbg !140
  %915 = select i1 %912, float %913, float %914, !dbg !140
  %916 = fcmp olt float %915, %873, !dbg !138
  %917 = fcmp uno float %915, 0.000000e+00, !dbg !141
  %918 = or i1 %916, %917, !dbg !139
  %919 = select i1 %918, float %915, float %873, !dbg !140
  %920 = fcmp olt float %919, %874, !dbg !138
  %921 = fcmp uno float %919, 0.000000e+00, !dbg !141
  %922 = or i1 %920, %921, !dbg !139
  %923 = select i1 %922, float %919, float %874, !dbg !140
  %924 = extractelement <4 x float> %875, i64 0, !dbg !138
  %925 = extractelement <4 x float> %875, i64 1, !dbg !138
  %926 = fcmp olt float %924, %925, !dbg !138
  %927 = fcmp uno float %924, 0.000000e+00, !dbg !141
  %928 = or i1 %926, %927, !dbg !139
  %929 = select i1 %928, float %924, float %925, !dbg !140
  %930 = extractelement <4 x float> %875, i64 2, !dbg !138
  %931 = fcmp olt float %929, %930, !dbg !138
  %932 = fcmp uno float %929, 0.000000e+00, !dbg !141
  %933 = or i1 %931, %932, !dbg !139
  %934 = select i1 %933, float %929, float %930, !dbg !140
  %935 = extractelement <4 x float> %875, i64 3, !dbg !138
  %936 = fcmp olt float %934, %935, !dbg !138
  %937 = fcmp uno float %934, 0.000000e+00, !dbg !141
  %938 = or i1 %936, %937, !dbg !139
  %939 = select i1 %938, float %934, float %935, !dbg !140
  %940 = bitcast float %923 to i32, !dbg !136
  %941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %940, i32 16, i32 31), !dbg !136
  %942 = bitcast i32 %941 to float, !dbg !136
  %943 = fcmp olt float %923, %942, !dbg !138
  %944 = fcmp uno float %923, 0.000000e+00, !dbg !141
  %945 = or i1 %944, %943, !dbg !139
  %946 = select i1 %945, float %923, float %942, !dbg !140
  %947 = bitcast float %946 to i32, !dbg !136
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 8, i32 31), !dbg !136
  %949 = bitcast i32 %948 to float, !dbg !136
  %950 = fcmp olt float %946, %949, !dbg !138
  %951 = fcmp uno float %946, 0.000000e+00, !dbg !141
  %952 = or i1 %950, %951, !dbg !139
  %953 = select i1 %952, float %946, float %949, !dbg !140
  %954 = bitcast float %953 to i32, !dbg !136
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 4, i32 31), !dbg !136
  %956 = bitcast i32 %955 to float, !dbg !136
  %957 = fcmp olt float %953, %956, !dbg !138
  %958 = fcmp uno float %953, 0.000000e+00, !dbg !141
  %959 = or i1 %957, %958, !dbg !139
  %960 = select i1 %959, float %953, float %956, !dbg !140
  %961 = bitcast float %960 to i32, !dbg !136
  %962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %961, i32 2, i32 31), !dbg !136
  %963 = bitcast i32 %962 to float, !dbg !136
  %964 = fcmp olt float %960, %963, !dbg !138
  %965 = fcmp uno float %960, 0.000000e+00, !dbg !141
  %966 = or i1 %964, %965, !dbg !139
  %967 = select i1 %966, float %960, float %963, !dbg !140
  %968 = bitcast float %967 to i32, !dbg !136
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 1, i32 31), !dbg !136
  %970 = bitcast i32 %969 to float, !dbg !136
  %971 = fcmp olt float %967, %970, !dbg !138
  %972 = fcmp uno float %967, 0.000000e+00, !dbg !141
  %973 = or i1 %971, %972, !dbg !139
  %974 = bitcast float %939 to i32, !dbg !136
  %975 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %974, i32 16, i32 31), !dbg !136
  %976 = bitcast i32 %975 to float, !dbg !136
  %977 = fcmp olt float %939, %976, !dbg !138
  %978 = fcmp uno float %939, 0.000000e+00, !dbg !141
  %979 = or i1 %978, %977, !dbg !139
  %980 = select i1 %979, float %939, float %976, !dbg !140
  %981 = bitcast float %980 to i32, !dbg !136
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 8, i32 31), !dbg !136
  %983 = bitcast i32 %982 to float, !dbg !136
  %984 = fcmp olt float %980, %983, !dbg !138
  %985 = fcmp uno float %980, 0.000000e+00, !dbg !141
  %986 = or i1 %984, %985, !dbg !139
  %987 = select i1 %986, float %980, float %983, !dbg !140
  %988 = bitcast float %987 to i32, !dbg !136
  %989 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %988, i32 4, i32 31), !dbg !136
  %990 = bitcast i32 %989 to float, !dbg !136
  %991 = fcmp olt float %987, %990, !dbg !138
  %992 = fcmp uno float %987, 0.000000e+00, !dbg !141
  %993 = or i1 %991, %992, !dbg !139
  %994 = select i1 %993, float %987, float %990, !dbg !140
  %995 = bitcast float %994 to i32, !dbg !136
  %996 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %995, i32 2, i32 31), !dbg !136
  %997 = bitcast i32 %996 to float, !dbg !136
  %998 = fcmp olt float %994, %997, !dbg !138
  %999 = fcmp uno float %994, 0.000000e+00, !dbg !141
  %1000 = or i1 %998, %999, !dbg !139
  %1001 = select i1 %1000, float %994, float %997, !dbg !140
  %1002 = bitcast float %1001 to i32, !dbg !136
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 1, i32 31), !dbg !136
  %1004 = bitcast i32 %1003 to float, !dbg !136
  %1005 = fcmp olt float %1001, %1004, !dbg !138
  %1006 = fcmp uno float %1001, 0.000000e+00, !dbg !141
  %1007 = or i1 %1005, %1006, !dbg !139
  %1008 = select i1 %973, i32 %968, i32 %969, !dbg !140
  %1009 = insertelement <1 x i32> poison, i32 %1008, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %1009, i1 %636) #5, !dbg !136
  %1010 = select i1 %1007, i32 %1002, i32 %1003, !dbg !140
  %1011 = insertelement <1 x i32> poison, i32 %1010, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %1011, i1 %636) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1012 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %651, i1 %650) #5, !dbg !136
  %1013 = bitcast i32 %1012 to float, !dbg !136
  %1014 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1012, i32 4, i32 31), !dbg !136
  %1015 = bitcast i32 %1014 to float, !dbg !136
  %1016 = fcmp olt float %1013, %1015, !dbg !138
  %1017 = fcmp uno float %1013, 0.000000e+00, !dbg !141
  %1018 = or i1 %1017, %1016, !dbg !139
  %1019 = select i1 %1018, float %1013, float %1015, !dbg !140
  %1020 = bitcast float %1019 to i32, !dbg !136
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 2, i32 31), !dbg !136
  %1022 = bitcast i32 %1021 to float, !dbg !136
  %1023 = fcmp olt float %1019, %1022, !dbg !138
  %1024 = fcmp uno float %1019, 0.000000e+00, !dbg !141
  %1025 = or i1 %1023, %1024, !dbg !139
  %1026 = select i1 %1025, float %1019, float %1022, !dbg !140
  %1027 = bitcast float %1026 to i32, !dbg !136
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 1, i32 31), !dbg !136
  %1029 = bitcast i32 %1028 to float, !dbg !136
  %1030 = fcmp olt float %1026, %1029, !dbg !138
  %1031 = fcmp uno float %1026, 0.000000e+00, !dbg !141
  %1032 = or i1 %1030, %1031, !dbg !139
  %1033 = select i1 %1032, i32 %1027, i32 %1028, !dbg !140
  %1034 = insertelement <1 x i32> poison, i32 %1033, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %1034, i1 %722) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1035 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %1036 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1037 = bitcast float %1035 to i32, !dbg !142
  %1038 = bitcast float %1036 to i32, !dbg !142
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1037, i32 %1038, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1039 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %342, !dbg !142
  %1040 = load float, ptr addrspace(3) %1039, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1041 = extractelement <8 x float> %884, i64 0, !dbg !145
  %1042 = extractelement <8 x float> %884, i64 1, !dbg !145
  %1043 = fcmp ogt float %1041, %1042, !dbg !145
  %1044 = fcmp uno float %1041, 0.000000e+00, !dbg !146
  %1045 = or i1 %1043, %1044, !dbg !147
  %1046 = select i1 %1045, float %1041, float %1042, !dbg !148
  %1047 = extractelement <8 x float> %884, i64 2, !dbg !145
  %1048 = fcmp ogt float %1046, %1047, !dbg !145
  %1049 = fcmp uno float %1046, 0.000000e+00, !dbg !146
  %1050 = or i1 %1048, %1049, !dbg !147
  %1051 = select i1 %1050, float %1046, float %1047, !dbg !148
  %1052 = extractelement <8 x float> %884, i64 3, !dbg !145
  %1053 = fcmp ogt float %1051, %1052, !dbg !145
  %1054 = fcmp uno float %1051, 0.000000e+00, !dbg !146
  %1055 = or i1 %1053, %1054, !dbg !147
  %1056 = select i1 %1055, float %1051, float %1052, !dbg !148
  %1057 = extractelement <8 x float> %884, i64 4, !dbg !145
  %1058 = extractelement <8 x float> %884, i64 5, !dbg !145
  %1059 = fcmp ogt float %1057, %1058, !dbg !145
  %1060 = fcmp uno float %1057, 0.000000e+00, !dbg !146
  %1061 = or i1 %1059, %1060, !dbg !147
  %1062 = select i1 %1061, float %1057, float %1058, !dbg !148
  %1063 = extractelement <8 x float> %884, i64 6, !dbg !145
  %1064 = fcmp ogt float %1062, %1063, !dbg !145
  %1065 = fcmp uno float %1062, 0.000000e+00, !dbg !146
  %1066 = or i1 %1064, %1065, !dbg !147
  %1067 = select i1 %1066, float %1062, float %1063, !dbg !148
  %1068 = extractelement <8 x float> %884, i64 7, !dbg !145
  %1069 = fcmp ogt float %1067, %1068, !dbg !145
  %1070 = fcmp uno float %1067, 0.000000e+00, !dbg !146
  %1071 = or i1 %1069, %1070, !dbg !147
  %1072 = select i1 %1071, float %1067, float %1068, !dbg !148
  %1073 = bitcast float %1056 to i32, !dbg !143
  %1074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1073, i32 16, i32 31), !dbg !143
  %1075 = bitcast i32 %1074 to float, !dbg !143
  %1076 = fcmp ogt float %1056, %1075, !dbg !145
  %1077 = fcmp uno float %1056, 0.000000e+00, !dbg !146
  %1078 = or i1 %1077, %1076, !dbg !147
  %1079 = select i1 %1078, float %1056, float %1075, !dbg !148
  %1080 = bitcast float %1079 to i32, !dbg !143
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 8, i32 31), !dbg !143
  %1082 = bitcast i32 %1081 to float, !dbg !143
  %1083 = fcmp ogt float %1079, %1082, !dbg !145
  %1084 = fcmp uno float %1079, 0.000000e+00, !dbg !146
  %1085 = or i1 %1083, %1084, !dbg !147
  %1086 = select i1 %1085, float %1079, float %1082, !dbg !148
  %1087 = bitcast float %1086 to i32, !dbg !143
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 4, i32 31), !dbg !143
  %1089 = bitcast i32 %1088 to float, !dbg !143
  %1090 = fcmp ogt float %1086, %1089, !dbg !145
  %1091 = fcmp uno float %1086, 0.000000e+00, !dbg !146
  %1092 = or i1 %1090, %1091, !dbg !147
  %1093 = select i1 %1092, float %1086, float %1089, !dbg !148
  %1094 = bitcast float %1093 to i32, !dbg !143
  %1095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1094, i32 2, i32 31), !dbg !143
  %1096 = bitcast i32 %1095 to float, !dbg !143
  %1097 = fcmp ogt float %1093, %1096, !dbg !145
  %1098 = fcmp uno float %1093, 0.000000e+00, !dbg !146
  %1099 = or i1 %1097, %1098, !dbg !147
  %1100 = select i1 %1099, float %1093, float %1096, !dbg !148
  %1101 = bitcast float %1100 to i32, !dbg !143
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 1, i32 31), !dbg !143
  %1103 = bitcast i32 %1102 to float, !dbg !143
  %1104 = fcmp ogt float %1100, %1103, !dbg !145
  %1105 = fcmp uno float %1100, 0.000000e+00, !dbg !146
  %1106 = or i1 %1104, %1105, !dbg !147
  %1107 = bitcast float %1072 to i32, !dbg !143
  %1108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 16, i32 31), !dbg !143
  %1109 = bitcast i32 %1108 to float, !dbg !143
  %1110 = fcmp ogt float %1072, %1109, !dbg !145
  %1111 = fcmp uno float %1072, 0.000000e+00, !dbg !146
  %1112 = or i1 %1111, %1110, !dbg !147
  %1113 = select i1 %1112, float %1072, float %1109, !dbg !148
  %1114 = bitcast float %1113 to i32, !dbg !143
  %1115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1114, i32 8, i32 31), !dbg !143
  %1116 = bitcast i32 %1115 to float, !dbg !143
  %1117 = fcmp ogt float %1113, %1116, !dbg !145
  %1118 = fcmp uno float %1113, 0.000000e+00, !dbg !146
  %1119 = or i1 %1117, %1118, !dbg !147
  %1120 = select i1 %1119, float %1113, float %1116, !dbg !148
  %1121 = bitcast float %1120 to i32, !dbg !143
  %1122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1121, i32 4, i32 31), !dbg !143
  %1123 = bitcast i32 %1122 to float, !dbg !143
  %1124 = fcmp ogt float %1120, %1123, !dbg !145
  %1125 = fcmp uno float %1120, 0.000000e+00, !dbg !146
  %1126 = or i1 %1124, %1125, !dbg !147
  %1127 = select i1 %1126, float %1120, float %1123, !dbg !148
  %1128 = bitcast float %1127 to i32, !dbg !143
  %1129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1128, i32 2, i32 31), !dbg !143
  %1130 = bitcast i32 %1129 to float, !dbg !143
  %1131 = fcmp ogt float %1127, %1130, !dbg !145
  %1132 = fcmp uno float %1127, 0.000000e+00, !dbg !146
  %1133 = or i1 %1131, %1132, !dbg !147
  %1134 = select i1 %1133, float %1127, float %1130, !dbg !148
  %1135 = bitcast float %1134 to i32, !dbg !143
  %1136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1135, i32 1, i32 31), !dbg !143
  %1137 = bitcast i32 %1136 to float, !dbg !143
  %1138 = fcmp ogt float %1134, %1137, !dbg !145
  %1139 = fcmp uno float %1134, 0.000000e+00, !dbg !146
  %1140 = or i1 %1138, %1139, !dbg !147
  %1141 = select i1 %1106, i32 %1101, i32 %1102, !dbg !148
  %1142 = insertelement <1 x i32> poison, i32 %1141, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %1142, i1 %636) #5, !dbg !143
  %1143 = select i1 %1140, i32 %1135, i32 %1136, !dbg !148
  %1144 = insertelement <1 x i32> poison, i32 %1143, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %1144, i1 %636) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1145 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %651, i1 %650) #5, !dbg !143
  %1146 = bitcast i32 %1145 to float, !dbg !143
  %1147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1145, i32 4, i32 31), !dbg !143
  %1148 = bitcast i32 %1147 to float, !dbg !143
  %1149 = fcmp ogt float %1146, %1148, !dbg !145
  %1150 = fcmp uno float %1146, 0.000000e+00, !dbg !146
  %1151 = or i1 %1150, %1149, !dbg !147
  %1152 = select i1 %1151, float %1146, float %1148, !dbg !148
  %1153 = bitcast float %1152 to i32, !dbg !143
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 2, i32 31), !dbg !143
  %1155 = bitcast i32 %1154 to float, !dbg !143
  %1156 = fcmp ogt float %1152, %1155, !dbg !145
  %1157 = fcmp uno float %1152, 0.000000e+00, !dbg !146
  %1158 = or i1 %1156, %1157, !dbg !147
  %1159 = select i1 %1158, float %1152, float %1155, !dbg !148
  %1160 = bitcast float %1159 to i32, !dbg !143
  %1161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1160, i32 1, i32 31), !dbg !143
  %1162 = bitcast i32 %1161 to float, !dbg !143
  %1163 = fcmp ogt float %1159, %1162, !dbg !145
  %1164 = fcmp uno float %1159, 0.000000e+00, !dbg !146
  %1165 = or i1 %1163, %1164, !dbg !147
  %1166 = select i1 %1165, i32 %1160, i32 %1161, !dbg !148
  %1167 = insertelement <1 x i32> poison, i32 %1166, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %1167, i1 %722) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1168 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %1169 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1170 = bitcast float %1168 to i32, !dbg !149
  %1171 = bitcast float %1169 to i32, !dbg !149
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1170, i32 %1171, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1172 = load float, ptr addrspace(3) %1039, align 4, !dbg !149
  %1173 = sext i32 %343 to i64, !dbg !150
  %1174 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1173, !dbg !150
  %1175 = fptrunc float %1040 to bfloat, !dbg !142
  %1176 = and i32 %19, 254, !dbg !142
  %1177 = icmp eq i32 %1176, 0, !dbg !142
  %1178 = bitcast bfloat %1175 to i16, !dbg !142
  %1179 = and i1 %1177, %344, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1178, ptr addrspace(1) %1174, i1 %1179) #5, !dbg !142
  %1180 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1173, !dbg !151
  %1181 = fptrunc float %1172 to bfloat, !dbg !149
  %1182 = bitcast bfloat %1181 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1182, ptr addrspace(1) %1180, i1 %1179) #5, !dbg !149
  %.inv5 = fcmp oge float %1035, 0.000000e+00, !dbg !152
  %1183 = select i1 %.inv5, float 0.000000e+00, float %1035, !dbg !152
  %.inv6 = fcmp oge float %1036, 0.000000e+00, !dbg !152
  %1184 = select i1 %.inv6, float 0.000000e+00, float %1036, !dbg !152
  %1185 = fsub float 0.000000e+00, %1183, !dbg !154
  %1186 = fsub float 0.000000e+00, %1184, !dbg !154
  %.inv7 = fcmp ole float %1168, 0.000000e+00, !dbg !155
  %1187 = select i1 %.inv7, float 0.000000e+00, float %1168, !dbg !155
  %.inv8 = fcmp ole float %1169, 0.000000e+00, !dbg !155
  %1188 = select i1 %.inv8, float 0.000000e+00, float %1169, !dbg !155
  %1189 = fcmp ogt float %1185, %1187, !dbg !157
  %1190 = fcmp ogt float %1186, %1188, !dbg !157
  %1191 = fcmp uno float %1185, 0.000000e+00, !dbg !159
  %1192 = fcmp uno float %1186, 0.000000e+00, !dbg !159
  %1193 = or i1 %1191, %1189, !dbg !160
  %1194 = or i1 %1192, %1190, !dbg !160
  %1195 = select i1 %1193, float %1185, float %1187, !dbg !161
  %1196 = select i1 %1194, float %1186, float %1188, !dbg !161
  %1197 = fmul float %1195, 0x3F80204080000000, !dbg !162
  %1198 = fmul float %1196, 0x3F80204080000000, !dbg !162
  %1199 = fcmp ogt float %1197, 0x3EE4F8B580000000, !dbg !163
  %1200 = fcmp ogt float %1198, 0x3EE4F8B580000000, !dbg !163
  %1201 = fcmp uno float %1197, 0.000000e+00, !dbg !165
  %1202 = fcmp uno float %1198, 0.000000e+00, !dbg !165
  %1203 = or i1 %1199, %1201, !dbg !166
  %1204 = or i1 %1200, %1202, !dbg !166
  %1205 = select i1 %1203, float %1197, float 0x3EE4F8B580000000, !dbg !167
  %1206 = select i1 %1204, float %1198, float 0x3EE4F8B580000000, !dbg !167
  %1207 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1205), !dbg !168
  %1208 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1206), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %1209 = bitcast float %1207 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1209, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1209, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1209, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1209, i1 true) #5, !dbg !169
  %1210 = bitcast float %1208 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1210, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1210, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1210, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1210, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %1211 = lshr exact i32 %20, 4, !dbg !169
  %1212 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1211, !dbg !169
  %1213 = load float, ptr addrspace(3) %1212, align 8, !dbg !169
  %1214 = sext i32 %66 to i64, !dbg !170
  %1215 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1214, !dbg !170
  %1216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1215, i1 %23) #5, !dbg !171
  %1217 = extractvalue { i32, i32, i32, i32 } %1216, 0, !dbg !171
  %1218 = bitcast i32 %1217 to <2 x bfloat>, !dbg !171
  %1219 = extractvalue { i32, i32, i32, i32 } %1216, 1, !dbg !171
  %1220 = bitcast i32 %1219 to <2 x bfloat>, !dbg !171
  %1221 = extractvalue { i32, i32, i32, i32 } %1216, 2, !dbg !171
  %1222 = bitcast i32 %1221 to <2 x bfloat>, !dbg !171
  %1223 = extractvalue { i32, i32, i32, i32 } %1216, 3, !dbg !171
  %1224 = bitcast i32 %1223 to <2 x bfloat>, !dbg !171
  %1225 = extractelement <2 x bfloat> %1218, i64 0, !dbg !171
  %1226 = extractelement <2 x bfloat> %1218, i64 1, !dbg !171
  %1227 = extractelement <2 x bfloat> %1220, i64 0, !dbg !171
  %1228 = extractelement <2 x bfloat> %1220, i64 1, !dbg !171
  %1229 = extractelement <2 x bfloat> %1222, i64 0, !dbg !171
  %1230 = extractelement <2 x bfloat> %1222, i64 1, !dbg !171
  %1231 = extractelement <2 x bfloat> %1224, i64 0, !dbg !171
  %1232 = extractelement <2 x bfloat> %1224, i64 1, !dbg !171
  %1233 = fpext bfloat %1225 to float, !dbg !172
  %1234 = fpext bfloat %1226 to float, !dbg !172
  %1235 = fpext bfloat %1227 to float, !dbg !172
  %1236 = fpext bfloat %1228 to float, !dbg !172
  %1237 = fpext bfloat %1229 to float, !dbg !172
  %1238 = fpext bfloat %1230 to float, !dbg !172
  %1239 = fpext bfloat %1231 to float, !dbg !172
  %1240 = fpext bfloat %1232 to float, !dbg !172
  %1241 = fmul float %1213, %1233, !dbg !169
  %1242 = fmul float %1213, %1234, !dbg !169
  %1243 = fmul float %1213, %1235, !dbg !169
  %1244 = fmul float %1213, %1236, !dbg !169
  %1245 = fmul float %1213, %1237, !dbg !169
  %1246 = fmul float %1213, %1238, !dbg !169
  %1247 = fmul float %1213, %1239, !dbg !169
  %1248 = fmul float %1213, %1240, !dbg !169
  %1249 = tail call float @llvm.nvvm.round.f(float %1241) #5, !dbg !173
  %1250 = tail call float @llvm.nvvm.round.f(float %1242) #5, !dbg !173
  %1251 = tail call float @llvm.nvvm.round.f(float %1243) #5, !dbg !173
  %1252 = tail call float @llvm.nvvm.round.f(float %1244) #5, !dbg !173
  %1253 = tail call float @llvm.nvvm.round.f(float %1245) #5, !dbg !173
  %1254 = tail call float @llvm.nvvm.round.f(float %1246) #5, !dbg !173
  %1255 = tail call float @llvm.nvvm.round.f(float %1247) #5, !dbg !173
  %1256 = tail call float @llvm.nvvm.round.f(float %1248) #5, !dbg !173
  %1257 = insertelement <4 x float> poison, float %1249, i64 0, !dbg !174
  %1258 = insertelement <4 x float> %1257, float %1250, i64 1, !dbg !174
  %1259 = insertelement <4 x float> %1258, float %1251, i64 2, !dbg !174
  %1260 = insertelement <4 x float> %1259, float %1252, i64 3, !dbg !174
  %1261 = fcmp ogt <4 x float> %1260, splat (float -1.270000e+02), !dbg !174
  %1262 = fcmp uno <4 x float> %1260, zeroinitializer, !dbg !176
  %1263 = or <4 x i1> %1261, %1262, !dbg !177
  %1264 = select <4 x i1> %1263, <4 x float> %1260, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1265 = fcmp olt <4 x float> %1264, splat (float 1.270000e+02), !dbg !179
  %1266 = fcmp uno <4 x float> %1264, zeroinitializer, !dbg !181
  %1267 = or <4 x i1> %1265, %1266, !dbg !182
  %1268 = fptosi <4 x float> %1264 to <4 x i8>, !dbg !183
  %1269 = select <4 x i1> %1267, <4 x i8> %1268, <4 x i8> splat (i8 127), !dbg !184
  %1270 = insertelement <4 x float> poison, float %1253, i64 0, !dbg !174
  %1271 = insertelement <4 x float> %1270, float %1254, i64 1, !dbg !174
  %1272 = insertelement <4 x float> %1271, float %1255, i64 2, !dbg !174
  %1273 = insertelement <4 x float> %1272, float %1256, i64 3, !dbg !174
  %1274 = fcmp ogt <4 x float> %1273, splat (float -1.270000e+02), !dbg !174
  %1275 = fcmp uno <4 x float> %1273, zeroinitializer, !dbg !176
  %1276 = or <4 x i1> %1274, %1275, !dbg !177
  %1277 = select <4 x i1> %1276, <4 x float> %1273, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1278 = fcmp olt <4 x float> %1277, splat (float 1.270000e+02), !dbg !179
  %1279 = fcmp uno <4 x float> %1277, zeroinitializer, !dbg !181
  %1280 = or <4 x i1> %1278, %1279, !dbg !182
  %1281 = fptosi <4 x float> %1277 to <4 x i8>, !dbg !183
  %1282 = select <4 x i1> %1280, <4 x i8> %1281, <4 x i8> splat (i8 127), !dbg !184
  %1283 = getelementptr i8, ptr addrspace(1) %12, i64 %1214, !dbg !185
  %1284 = bitcast <4 x i8> %1269 to i32, !dbg !186
  %1285 = bitcast <4 x i8> %1282 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1284, i32 %1285, ptr addrspace(1) %1283, i1 %23) #5, !dbg !186
  %1286 = add i32 %66, 1024, !dbg !187
  %1287 = sext i32 %1286 to i64, !dbg !170
  %1288 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1287, !dbg !170
  %1289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1288, i1 %23) #5, !dbg !171
  %1290 = extractvalue { i32, i32, i32, i32 } %1289, 0, !dbg !171
  %1291 = bitcast i32 %1290 to <2 x bfloat>, !dbg !171
  %1292 = extractvalue { i32, i32, i32, i32 } %1289, 1, !dbg !171
  %1293 = bitcast i32 %1292 to <2 x bfloat>, !dbg !171
  %1294 = extractvalue { i32, i32, i32, i32 } %1289, 2, !dbg !171
  %1295 = bitcast i32 %1294 to <2 x bfloat>, !dbg !171
  %1296 = extractvalue { i32, i32, i32, i32 } %1289, 3, !dbg !171
  %1297 = bitcast i32 %1296 to <2 x bfloat>, !dbg !171
  %1298 = extractelement <2 x bfloat> %1291, i64 0, !dbg !171
  %1299 = extractelement <2 x bfloat> %1291, i64 1, !dbg !171
  %1300 = extractelement <2 x bfloat> %1293, i64 0, !dbg !171
  %1301 = extractelement <2 x bfloat> %1293, i64 1, !dbg !171
  %1302 = extractelement <2 x bfloat> %1295, i64 0, !dbg !171
  %1303 = extractelement <2 x bfloat> %1295, i64 1, !dbg !171
  %1304 = extractelement <2 x bfloat> %1297, i64 0, !dbg !171
  %1305 = extractelement <2 x bfloat> %1297, i64 1, !dbg !171
  %1306 = fpext bfloat %1298 to float, !dbg !172
  %1307 = fpext bfloat %1299 to float, !dbg !172
  %1308 = fpext bfloat %1300 to float, !dbg !172
  %1309 = fpext bfloat %1301 to float, !dbg !172
  %1310 = fpext bfloat %1302 to float, !dbg !172
  %1311 = fpext bfloat %1303 to float, !dbg !172
  %1312 = fpext bfloat %1304 to float, !dbg !172
  %1313 = fpext bfloat %1305 to float, !dbg !172
  %1314 = fmul float %1213, %1306, !dbg !169
  %1315 = fmul float %1213, %1307, !dbg !169
  %1316 = fmul float %1213, %1308, !dbg !169
  %1317 = fmul float %1213, %1309, !dbg !169
  %1318 = fmul float %1213, %1310, !dbg !169
  %1319 = fmul float %1213, %1311, !dbg !169
  %1320 = fmul float %1213, %1312, !dbg !169
  %1321 = fmul float %1213, %1313, !dbg !169
  %1322 = tail call float @llvm.nvvm.round.f(float %1314) #5, !dbg !173
  %1323 = tail call float @llvm.nvvm.round.f(float %1315) #5, !dbg !173
  %1324 = tail call float @llvm.nvvm.round.f(float %1316) #5, !dbg !173
  %1325 = tail call float @llvm.nvvm.round.f(float %1317) #5, !dbg !173
  %1326 = tail call float @llvm.nvvm.round.f(float %1318) #5, !dbg !173
  %1327 = tail call float @llvm.nvvm.round.f(float %1319) #5, !dbg !173
  %1328 = tail call float @llvm.nvvm.round.f(float %1320) #5, !dbg !173
  %1329 = tail call float @llvm.nvvm.round.f(float %1321) #5, !dbg !173
  %1330 = insertelement <4 x float> poison, float %1322, i64 0, !dbg !174
  %1331 = insertelement <4 x float> %1330, float %1323, i64 1, !dbg !174
  %1332 = insertelement <4 x float> %1331, float %1324, i64 2, !dbg !174
  %1333 = insertelement <4 x float> %1332, float %1325, i64 3, !dbg !174
  %1334 = fcmp ogt <4 x float> %1333, splat (float -1.270000e+02), !dbg !174
  %1335 = fcmp uno <4 x float> %1333, zeroinitializer, !dbg !176
  %1336 = or <4 x i1> %1334, %1335, !dbg !177
  %1337 = select <4 x i1> %1336, <4 x float> %1333, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1338 = fcmp olt <4 x float> %1337, splat (float 1.270000e+02), !dbg !179
  %1339 = fcmp uno <4 x float> %1337, zeroinitializer, !dbg !181
  %1340 = or <4 x i1> %1338, %1339, !dbg !182
  %1341 = fptosi <4 x float> %1337 to <4 x i8>, !dbg !183
  %1342 = select <4 x i1> %1340, <4 x i8> %1341, <4 x i8> splat (i8 127), !dbg !184
  %1343 = insertelement <4 x float> poison, float %1326, i64 0, !dbg !174
  %1344 = insertelement <4 x float> %1343, float %1327, i64 1, !dbg !174
  %1345 = insertelement <4 x float> %1344, float %1328, i64 2, !dbg !174
  %1346 = insertelement <4 x float> %1345, float %1329, i64 3, !dbg !174
  %1347 = fcmp ogt <4 x float> %1346, splat (float -1.270000e+02), !dbg !174
  %1348 = fcmp uno <4 x float> %1346, zeroinitializer, !dbg !176
  %1349 = or <4 x i1> %1347, %1348, !dbg !177
  %1350 = select <4 x i1> %1349, <4 x float> %1346, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1351 = fcmp olt <4 x float> %1350, splat (float 1.270000e+02), !dbg !179
  %1352 = fcmp uno <4 x float> %1350, zeroinitializer, !dbg !181
  %1353 = or <4 x i1> %1351, %1352, !dbg !182
  %1354 = fptosi <4 x float> %1350 to <4 x i8>, !dbg !183
  %1355 = select <4 x i1> %1353, <4 x i8> %1354, <4 x i8> splat (i8 127), !dbg !184
  %1356 = getelementptr i8, ptr addrspace(1) %12, i64 %1287, !dbg !185
  %1357 = bitcast <4 x i8> %1342 to i32, !dbg !186
  %1358 = bitcast <4 x i8> %1355 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1357, i32 %1358, ptr addrspace(1) %1356, i1 %23) #5, !dbg !186
  %1359 = add i32 %66, 2048, !dbg !187
  %1360 = sext i32 %1359 to i64, !dbg !170
  %1361 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1360, !dbg !170
  %1362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1361, i1 %23) #5, !dbg !171
  %1363 = extractvalue { i32, i32, i32, i32 } %1362, 0, !dbg !171
  %1364 = bitcast i32 %1363 to <2 x bfloat>, !dbg !171
  %1365 = extractvalue { i32, i32, i32, i32 } %1362, 1, !dbg !171
  %1366 = bitcast i32 %1365 to <2 x bfloat>, !dbg !171
  %1367 = extractvalue { i32, i32, i32, i32 } %1362, 2, !dbg !171
  %1368 = bitcast i32 %1367 to <2 x bfloat>, !dbg !171
  %1369 = extractvalue { i32, i32, i32, i32 } %1362, 3, !dbg !171
  %1370 = bitcast i32 %1369 to <2 x bfloat>, !dbg !171
  %1371 = extractelement <2 x bfloat> %1364, i64 0, !dbg !171
  %1372 = extractelement <2 x bfloat> %1364, i64 1, !dbg !171
  %1373 = extractelement <2 x bfloat> %1366, i64 0, !dbg !171
  %1374 = extractelement <2 x bfloat> %1366, i64 1, !dbg !171
  %1375 = extractelement <2 x bfloat> %1368, i64 0, !dbg !171
  %1376 = extractelement <2 x bfloat> %1368, i64 1, !dbg !171
  %1377 = extractelement <2 x bfloat> %1370, i64 0, !dbg !171
  %1378 = extractelement <2 x bfloat> %1370, i64 1, !dbg !171
  %1379 = fpext bfloat %1371 to float, !dbg !172
  %1380 = fpext bfloat %1372 to float, !dbg !172
  %1381 = fpext bfloat %1373 to float, !dbg !172
  %1382 = fpext bfloat %1374 to float, !dbg !172
  %1383 = fpext bfloat %1375 to float, !dbg !172
  %1384 = fpext bfloat %1376 to float, !dbg !172
  %1385 = fpext bfloat %1377 to float, !dbg !172
  %1386 = fpext bfloat %1378 to float, !dbg !172
  %1387 = fmul float %1213, %1379, !dbg !169
  %1388 = fmul float %1213, %1380, !dbg !169
  %1389 = fmul float %1213, %1381, !dbg !169
  %1390 = fmul float %1213, %1382, !dbg !169
  %1391 = fmul float %1213, %1383, !dbg !169
  %1392 = fmul float %1213, %1384, !dbg !169
  %1393 = fmul float %1213, %1385, !dbg !169
  %1394 = fmul float %1213, %1386, !dbg !169
  %1395 = tail call float @llvm.nvvm.round.f(float %1387) #5, !dbg !173
  %1396 = tail call float @llvm.nvvm.round.f(float %1388) #5, !dbg !173
  %1397 = tail call float @llvm.nvvm.round.f(float %1389) #5, !dbg !173
  %1398 = tail call float @llvm.nvvm.round.f(float %1390) #5, !dbg !173
  %1399 = tail call float @llvm.nvvm.round.f(float %1391) #5, !dbg !173
  %1400 = tail call float @llvm.nvvm.round.f(float %1392) #5, !dbg !173
  %1401 = tail call float @llvm.nvvm.round.f(float %1393) #5, !dbg !173
  %1402 = tail call float @llvm.nvvm.round.f(float %1394) #5, !dbg !173
  %1403 = insertelement <4 x float> poison, float %1395, i64 0, !dbg !174
  %1404 = insertelement <4 x float> %1403, float %1396, i64 1, !dbg !174
  %1405 = insertelement <4 x float> %1404, float %1397, i64 2, !dbg !174
  %1406 = insertelement <4 x float> %1405, float %1398, i64 3, !dbg !174
  %1407 = fcmp ogt <4 x float> %1406, splat (float -1.270000e+02), !dbg !174
  %1408 = fcmp uno <4 x float> %1406, zeroinitializer, !dbg !176
  %1409 = or <4 x i1> %1407, %1408, !dbg !177
  %1410 = select <4 x i1> %1409, <4 x float> %1406, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1411 = fcmp olt <4 x float> %1410, splat (float 1.270000e+02), !dbg !179
  %1412 = fcmp uno <4 x float> %1410, zeroinitializer, !dbg !181
  %1413 = or <4 x i1> %1411, %1412, !dbg !182
  %1414 = fptosi <4 x float> %1410 to <4 x i8>, !dbg !183
  %1415 = select <4 x i1> %1413, <4 x i8> %1414, <4 x i8> splat (i8 127), !dbg !184
  %1416 = insertelement <4 x float> poison, float %1399, i64 0, !dbg !174
  %1417 = insertelement <4 x float> %1416, float %1400, i64 1, !dbg !174
  %1418 = insertelement <4 x float> %1417, float %1401, i64 2, !dbg !174
  %1419 = insertelement <4 x float> %1418, float %1402, i64 3, !dbg !174
  %1420 = fcmp ogt <4 x float> %1419, splat (float -1.270000e+02), !dbg !174
  %1421 = fcmp uno <4 x float> %1419, zeroinitializer, !dbg !176
  %1422 = or <4 x i1> %1420, %1421, !dbg !177
  %1423 = select <4 x i1> %1422, <4 x float> %1419, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1424 = fcmp olt <4 x float> %1423, splat (float 1.270000e+02), !dbg !179
  %1425 = fcmp uno <4 x float> %1423, zeroinitializer, !dbg !181
  %1426 = or <4 x i1> %1424, %1425, !dbg !182
  %1427 = fptosi <4 x float> %1423 to <4 x i8>, !dbg !183
  %1428 = select <4 x i1> %1426, <4 x i8> %1427, <4 x i8> splat (i8 127), !dbg !184
  %1429 = getelementptr i8, ptr addrspace(1) %12, i64 %1360, !dbg !185
  %1430 = bitcast <4 x i8> %1415 to i32, !dbg !186
  %1431 = bitcast <4 x i8> %1428 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1430, i32 %1431, ptr addrspace(1) %1429, i1 %23) #5, !dbg !186
  ret void, !dbg !188
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 90, column: 35, scope: !6)
!111 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !112)
!112 = !DILocation(line: 109, column: 47, scope: !6)
!113 = !DILocation(line: 86, column: 115, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !115)
!115 = !DILocation(line: 111, column: 47, scope: !6)
!116 = !DILocation(line: 87, column: 50, scope: !6)
!117 = !DILocation(line: 88, column: 50, scope: !6)
!118 = !DILocation(line: 88, column: 103, scope: !6)
!119 = !DILocation(line: 89, column: 49, scope: !6)
!120 = !DILocation(line: 90, column: 49, scope: !6)
!121 = !DILocation(line: 90, column: 102, scope: !6)
!122 = !DILocation(line: 101, column: 24, scope: !6)
!123 = !DILocation(line: 103, column: 24, scope: !6)
!124 = !DILocation(line: 104, column: 24, scope: !6)
!125 = !DILocation(line: 106, column: 24, scope: !6)
!126 = !DILocation(line: 107, column: 24, scope: !6)
!127 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !112)
!128 = !DILocation(line: 113, column: 53, scope: !6)
!129 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !112)
!130 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !112)
!131 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !115)
!132 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !115)
!133 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !115)
!134 = !DILocation(line: 112, column: 50, scope: !6)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 124, column: 36, scope: !6)
!171 = !DILocation(line: 124, column: 53, scope: !6)
!172 = !DILocation(line: 124, column: 115, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 124, column: 43, scope: !6)
!188 = !DILocation(line: 118, column: 4, scope: !6)
