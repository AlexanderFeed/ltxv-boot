; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !10 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = shl i32 %9, 6, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = lshr i32 %11, 3, !dbg !13
  %13 = and i32 %12, 63, !dbg !13
  %14 = lshr i32 %11, 6, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = or disjoint i32 %13, %10, !dbg !14
  %17 = or disjoint i32 %15, %10, !dbg !14
  %18 = or disjoint i32 %17, 8, !dbg !14
  %19 = or disjoint i32 %17, 16, !dbg !14
  %20 = or disjoint i32 %17, 24, !dbg !14
  %21 = or disjoint i32 %17, 32, !dbg !14
  %22 = or disjoint i32 %17, 40, !dbg !14
  %23 = or disjoint i32 %17, 48, !dbg !14
  %24 = or disjoint i32 %17, 56, !dbg !14
  %25 = icmp slt i32 %16, 512, !dbg !15
  %26 = icmp slt i32 %17, 512, !dbg !15
  %27 = icmp slt i32 %18, 512, !dbg !15
  %28 = icmp slt i32 %19, 512, !dbg !15
  %29 = icmp slt i32 %20, 512, !dbg !15
  %30 = icmp slt i32 %21, 512, !dbg !15
  %31 = icmp slt i32 %22, 512, !dbg !15
  %32 = icmp slt i32 %23, 512, !dbg !15
  %33 = icmp slt i32 %24, 512, !dbg !15
  %34 = shl i32 %11, 3, !dbg !16
  %35 = and i32 %34, 56, !dbg !16
  %36 = sext i32 %16 to i64, !dbg !17
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = sext i32 %17 to i64, !dbg !17
  %39 = getelementptr i64, ptr addrspace(1) %0, i64 %38, !dbg !17
  %40 = sext i32 %18 to i64, !dbg !17
  %41 = getelementptr i64, ptr addrspace(1) %0, i64 %40, !dbg !17
  %42 = sext i32 %19 to i64, !dbg !17
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = sext i32 %20 to i64, !dbg !17
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = sext i32 %21 to i64, !dbg !17
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46, !dbg !17
  %48 = sext i32 %22 to i64, !dbg !17
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !17
  %50 = sext i32 %23 to i64, !dbg !17
  %51 = getelementptr i64, ptr addrspace(1) %0, i64 %50, !dbg !17
  %52 = sext i32 %24 to i64, !dbg !17
  %53 = getelementptr i64, ptr addrspace(1) %0, i64 %52, !dbg !17
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %26) #6, !dbg !18
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %27) #6, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %28) #6, !dbg !18
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %29) #6, !dbg !18
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %30) #6, !dbg !18
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %31) #6, !dbg !18
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 %32) #6, !dbg !18
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %33) #6, !dbg !18
  %70 = shl i32 %16, 12, !dbg !19
  %71 = icmp slt i64 %61, 0, !dbg !20
  %72 = insertelement <8 x i64> poison, i64 %69, i64 0, !dbg !21
  %73 = insertelement <8 x i64> %72, i64 %68, i64 1, !dbg !21
  %74 = insertelement <8 x i64> %73, i64 %67, i64 2, !dbg !21
  %75 = insertelement <8 x i64> %74, i64 %66, i64 3, !dbg !21
  %76 = insertelement <8 x i64> %75, i64 %65, i64 4, !dbg !21
  %77 = insertelement <8 x i64> %76, i64 %64, i64 5, !dbg !21
  %78 = insertelement <8 x i64> %77, i64 %63, i64 6, !dbg !21
  %79 = insertelement <8 x i64> %78, i64 %62, i64 7, !dbg !21
  %80 = add <8 x i64> %79, splat (i64 32128), !dbg !21
  %81 = icmp slt <8 x i64> %79, zeroinitializer, !dbg !20
  %82 = select <8 x i1> %81, <8 x i64> %80, <8 x i64> %79, !dbg !22
  %83 = icmp ult <8 x i64> %82, splat (i64 32128), !dbg !23
  %84 = xor i1 %26, true, !dbg !24
  %85 = xor i1 %27, true, !dbg !24
  %86 = xor i1 %28, true, !dbg !24
  %87 = xor i1 %29, true, !dbg !24
  %88 = xor i1 %30, true, !dbg !24
  %89 = xor i1 %31, true, !dbg !24
  %90 = xor i1 %32, true, !dbg !24
  %91 = xor i1 %33, true, !dbg !24
  %92 = extractelement <8 x i1> %83, i64 7, !dbg !25
  %93 = or i1 %92, %84, !dbg !25
  %94 = extractelement <8 x i1> %83, i64 6, !dbg !25
  %95 = or i1 %94, %85, !dbg !25
  %96 = extractelement <8 x i1> %83, i64 5, !dbg !25
  %97 = or i1 %96, %86, !dbg !25
  %98 = extractelement <8 x i1> %83, i64 4, !dbg !25
  %99 = or i1 %98, %87, !dbg !25
  %100 = extractelement <8 x i1> %83, i64 3, !dbg !25
  %101 = or i1 %100, %88, !dbg !25
  %102 = extractelement <8 x i1> %83, i64 2, !dbg !25
  %103 = or i1 %102, %89, !dbg !25
  %104 = extractelement <8 x i1> %83, i64 1, !dbg !25
  %105 = or i1 %104, %90, !dbg !25
  %106 = extractelement <8 x i1> %83, i64 0, !dbg !25
  %107 = or i1 %106, %91, !dbg !25
  %108 = shl i64 %61, 12, !dbg !26
  %109 = add i64 %108, 131596288, !dbg !26
  %110 = select i1 %71, i64 %109, i64 %108, !dbg !26
  %invariant.op = or disjoint i32 %35, %70, !dbg !27
  %invariant.op38 = and i1 %97, %99, !dbg !27
  %invariant.op39 = and i1 %invariant.op38, %101, !dbg !27
  %invariant.op40 = and i1 %invariant.op39, %103, !dbg !27
  %invariant.op41 = and i1 %invariant.op40, %105, !dbg !27
  %invariant.op42 = and i1 %invariant.op41, %107, !dbg !27
  %111 = and i1 %95, %invariant.op42
  %.demorgan15.reass = and i1 %111, %93
  %112 = zext nneg i32 %35 to i64, !dbg !27
  %invariant.op66 = or disjoint i64 %110, %112, !dbg !27
  %113 = insertelement <8 x i1> poison, i1 %25, i64 0, !dbg !28
  %114 = shufflevector <8 x i1> %113, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !28
  br label %115, !dbg !27

115:                                              ; preds = %8, %122
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %122 ]
  %116 = phi <8 x float> [ zeroinitializer, %8 ], [ %164, %122 ]
  %117 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %117
  %118 = sext i32 %.reass to i64, !dbg !29
  %119 = getelementptr bfloat, ptr addrspace(1) %2, i64 %118, !dbg !29
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %119, i1 %25) #6, !dbg !30
  br i1 %.demorgan15.reass, label %122, label %121, !dbg !31

121:                                              ; preds = %115
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

122:                                              ; preds = %115
  %123 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !30
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !30
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !30
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !30
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.reass67 = or i64 %indvars.iv, %invariant.op66
  %131 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass67, !dbg !32
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %131, i1 %25) #6, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !33
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !33
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !33
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !33
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !33
  %141 = shufflevector <2 x bfloat> %130, <2 x bfloat> %128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %142 = shufflevector <2 x bfloat> %126, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %143 = shufflevector <8 x bfloat> %141, <8 x bfloat> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !34
  %144 = shufflevector <2 x bfloat> %126, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %145 = shufflevector <8 x bfloat> %143, <8 x bfloat> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !34
  %146 = shufflevector <2 x bfloat> %124, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %147 = shufflevector <8 x bfloat> %145, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !34
  %148 = shufflevector <2 x bfloat> %124, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %149 = shufflevector <8 x bfloat> %147, <8 x bfloat> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !34
  %150 = fpext <8 x bfloat> %149 to <8 x float>, !dbg !34
  %151 = shufflevector <2 x bfloat> %134, <2 x bfloat> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %152 = shufflevector <2 x bfloat> %138, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %153 = shufflevector <8 x bfloat> %151, <8 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !35
  %154 = shufflevector <2 x bfloat> %138, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %155 = shufflevector <8 x bfloat> %153, <8 x bfloat> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !35
  %156 = shufflevector <2 x bfloat> %140, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %157 = shufflevector <8 x bfloat> %155, <8 x bfloat> %156, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !35
  %158 = shufflevector <2 x bfloat> %140, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %159 = shufflevector <8 x bfloat> %157, <8 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !35
  %160 = fpext <8 x bfloat> %159 to <8 x float>, !dbg !35
  %161 = fadd <8 x float> %150, %160, !dbg !36
  %162 = fmul <8 x float> %161, %161, !dbg !37
  %163 = fadd <8 x float> %116, %162, !dbg !38
  %164 = select <8 x i1> %114, <8 x float> %163, <8 x float> %116, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !27
  %165 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !27
  br i1 %165, label %115, label %__nv_rsqrtf.exit, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %122
  %shift = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %166 = fadd <8 x float> %164, %shift, !dbg !39
  %shift77 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %167 = fadd <8 x float> %shift77, %166, !dbg !39
  %shift78 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %168 = fadd <8 x float> %shift78, %167, !dbg !39
  %shift79 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %169 = fadd <8 x float> %shift79, %168, !dbg !39
  %shift80 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %170 = fadd <8 x float> %shift80, %169, !dbg !39
  %shift81 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %171 = fadd <8 x float> %shift81, %170, !dbg !39
  %shift82 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %172 = fadd <8 x float> %shift82, %171, !dbg !39
  %173 = extractelement <8 x float> %172, i64 0, !dbg !39
  %174 = bitcast float %173 to i32, !dbg !44
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !44
  %176 = bitcast i32 %175 to float, !dbg !44
  %177 = fadd float %173, %176, !dbg !39
  %178 = bitcast float %177 to i32, !dbg !44
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !44
  %180 = bitcast i32 %179 to float, !dbg !44
  %181 = fadd float %177, %180, !dbg !39
  %182 = bitcast float %181 to i32, !dbg !44
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !44
  %184 = bitcast i32 %183 to float, !dbg !44
  %185 = fadd float %181, %184, !dbg !39
  %186 = tail call float @llvm.nvvm.div.full(float %185, float 4.096000e+03), !dbg !45
  %187 = fadd float %186, 0x3EB0C6F7A0000000, !dbg !46
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i34 = icmp eq i32 %195, 0, !dbg !47
  br i1 %.not.i34, label %198, label %196, !dbg !47

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !47
  br label %__nv_rsqrtf.exit36, !dbg !47

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !47
  br label %__nv_rsqrtf.exit36, !dbg !47

__nv_rsqrtf.exit36:                               ; preds = %196, %198
  %.0.i35 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !47
  %invariant.op68 = or disjoint i64 %110, %112, !dbg !48
  %200 = insertelement <2 x float> poison, float %.0.i35, i64 0, !dbg !49
  %201 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %202, !dbg !48

202:                                              ; preds = %202, %__nv_rsqrtf.exit36
  %indvars.iv57 = phi i64 [ 0, %__nv_rsqrtf.exit36 ], [ %indvars.iv.next58, %202 ]
  %203 = or disjoint i64 %indvars.iv57, %112, !dbg !50
  %204 = getelementptr bfloat, ptr addrspace(1) %3, i64 %203, !dbg !51
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %204, i1 true) #6, !dbg !52
  %206 = trunc nuw nsw i64 %indvars.iv57 to i32
  %.reass44 = or i32 %invariant.op, %206
  %207 = sext i32 %.reass44 to i64, !dbg !53
  %208 = getelementptr bfloat, ptr addrspace(1) %2, i64 %207, !dbg !53
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %208, i1 %25) #6, !dbg !54
  %210 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !54
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !54
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !54
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !54
  %214 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !54
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !54
  %216 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !54
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !54
  %218 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !52
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !52
  %220 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !52
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !52
  %222 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !52
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !52
  %224 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !52
  %225 = bitcast i32 %224 to <2 x bfloat>, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.reass69 = or i64 %indvars.iv57, %invariant.op68
  %226 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass69, !dbg !56
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %226, i1 %25) #6, !dbg !57
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !57
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !57
  %230 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !57
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !57
  %232 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !57
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !57
  %234 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !57
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !57
  %236 = getelementptr bfloat, ptr addrspace(1) %4, i64 %207, !dbg !58
  %237 = fpext <2 x bfloat> %217 to <2 x float>, !dbg !59
  %238 = fpext <2 x bfloat> %225 to <2 x float>, !dbg !60
  %239 = fpext <2 x bfloat> %229 to <2 x float>, !dbg !61
  %240 = fadd <2 x float> %237, %239, !dbg !62
  %241 = fmul <2 x float> %201, %240, !dbg !49
  %242 = fmul <2 x float> %241, %238, !dbg !63
  %243 = fptrunc <2 x float> %242 to <2 x bfloat>, !dbg !64
  %244 = fpext <2 x bfloat> %215 to <2 x float>, !dbg !59
  %245 = fpext <2 x bfloat> %223 to <2 x float>, !dbg !60
  %246 = fpext <2 x bfloat> %231 to <2 x float>, !dbg !61
  %247 = fadd <2 x float> %244, %246, !dbg !62
  %248 = fmul <2 x float> %201, %247, !dbg !49
  %249 = fmul <2 x float> %248, %245, !dbg !63
  %250 = fptrunc <2 x float> %249 to <2 x bfloat>, !dbg !64
  %251 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !59
  %252 = fpext <2 x bfloat> %221 to <2 x float>, !dbg !60
  %253 = fpext <2 x bfloat> %233 to <2 x float>, !dbg !61
  %254 = fadd <2 x float> %251, %253, !dbg !62
  %255 = fmul <2 x float> %201, %254, !dbg !49
  %256 = fmul <2 x float> %255, %252, !dbg !63
  %257 = fptrunc <2 x float> %256 to <2 x bfloat>, !dbg !64
  %258 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !59
  %259 = fpext <2 x bfloat> %219 to <2 x float>, !dbg !60
  %260 = fpext <2 x bfloat> %235 to <2 x float>, !dbg !61
  %261 = fadd <2 x float> %258, %260, !dbg !62
  %262 = fmul <2 x float> %201, %261, !dbg !49
  %263 = fmul <2 x float> %262, %259, !dbg !63
  %264 = fptrunc <2 x float> %263 to <2 x bfloat>, !dbg !64
  %265 = bitcast <2 x bfloat> %243 to i32, !dbg !64
  %266 = bitcast <2 x bfloat> %250 to i32, !dbg !64
  %267 = bitcast <2 x bfloat> %257 to i32, !dbg !64
  %268 = bitcast <2 x bfloat> %264 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %266, i32 %267, i32 %268, ptr addrspace(1) %236, i1 %25) #6, !dbg !64
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 64, !dbg !48
  %269 = icmp samesign ult i64 %indvars.iv57, 4032, !dbg !48
  br i1 %269, label %202, label %270, !dbg !48

270:                                              ; preds = %202
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 40, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 22, scope: !10)
!22 = !DILocation(line: 41, column: 36, scope: !10)
!23 = !DILocation(line: 42, column: 41, scope: !10)
!24 = !DILocation(line: 42, column: 60, scope: !10)
!25 = !DILocation(line: 42, column: 58, scope: !10)
!26 = !DILocation(line: 43, column: 46, scope: !10)
!27 = !DILocation(line: 31, column: 40, scope: !10)
!28 = !DILocation(line: 49, column: 50, scope: !10)
!29 = !DILocation(line: 37, column: 34, scope: !10)
!30 = !DILocation(line: 37, column: 51, scope: !10)
!31 = !DILocation(line: 42, column: 68, scope: !10)
!32 = !DILocation(line: 43, column: 34, scope: !10)
!33 = !DILocation(line: 43, column: 53, scope: !10)
!34 = !DILocation(line: 37, column: 112, scope: !10)
!35 = !DILocation(line: 43, column: 114, scope: !10)
!36 = !DILocation(line: 44, column: 22, scope: !10)
!37 = !DILocation(line: 46, column: 23, scope: !10)
!38 = !DILocation(line: 48, column: 25, scope: !10)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !10, file: !41, discriminator: 0)
!43 = !DILocation(line: 50, column: 27, scope: !10)
!44 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 68, column: 25, scope: !10)
!46 = !DILocation(line: 70, column: 24, scope: !10)
!47 = !DILocation(line: 71, column: 32, scope: !10)
!48 = !DILocation(line: 51, column: 40, scope: !10)
!49 = !DILocation(line: 72, column: 24, scope: !10)
!50 = !DILocation(line: 52, column: 31, scope: !10)
!51 = !DILocation(line: 57, column: 35, scope: !10)
!52 = !DILocation(line: 57, column: 42, scope: !10)
!53 = !DILocation(line: 58, column: 35, scope: !10)
!54 = !DILocation(line: 58, column: 52, scope: !10)
!55 = !DILocation(line: 63, column: 70, scope: !10)
!56 = !DILocation(line: 64, column: 35, scope: !10)
!57 = !DILocation(line: 64, column: 55, scope: !10)
!58 = !DILocation(line: 75, column: 29, scope: !10)
!59 = !DILocation(line: 58, column: 114, scope: !10)
!60 = !DILocation(line: 57, column: 95, scope: !10)
!61 = !DILocation(line: 64, column: 117, scope: !10)
!62 = !DILocation(line: 65, column: 24, scope: !10)
!63 = !DILocation(line: 74, column: 24, scope: !10)
!64 = !DILocation(line: 75, column: 53, scope: !10)
!65 = !DILocation(line: 51, column: 4, scope: !10)
