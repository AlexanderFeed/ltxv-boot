; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = lshr i32 %21, 5, !dbg !11
  %24 = shl i32 %21, 3, !dbg !11
  %25 = and i32 %24, 4088, !dbg !11
  %26 = or disjoint i32 %25, 4, !dbg !11
  %27 = icmp samesign ult i32 %25, 3072, !dbg !12
  %28 = mul i32 %19, 3072, !dbg !13
  %29 = add i32 %25, %28, !dbg !14
  %30 = sext i32 %29 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !15
  %32 = and i1 %20, %27, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %32) #5, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !17
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !17
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %48 = extractelement <2 x bfloat> %41, i64 0, !dbg !17
  %49 = extractelement <2 x bfloat> %41, i64 1, !dbg !17
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = fpext bfloat %48 to float, !dbg !18
  %57 = fpext bfloat %49 to float, !dbg !18
  %58 = select i1 %32, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %32, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %32, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %32, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %32, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %32, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %32, float %56, float 0.000000e+00, !dbg !19
  %65 = select i1 %32, float %57, float 0.000000e+00, !dbg !19
  %66 = select i1 %32, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = fsub float %59, %58, !dbg !21
  %68 = select i1 %32, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %69 = fcmp oeq float %68, 0.000000e+00, !dbg !27
  %70 = tail call float @llvm.nvvm.div.full(float %66, float %68), !dbg !28
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !29
  %72 = fmul float %71, %67, !dbg !30
  %73 = fadd float %58, %72, !dbg !31
  %74 = fmul float %67, %67, !dbg !32
  %75 = fmul float %66, %74, !dbg !33
  %76 = fmul float %71, %75, !dbg !34
  %77 = fadd float %76, 0.000000e+00, !dbg !35
  %78 = fsub float %60, %73, !dbg !21
  %79 = select i1 %32, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %80 = fcmp oeq float %79, 0.000000e+00, !dbg !27
  %81 = tail call float @llvm.nvvm.div.full(float %66, float %79), !dbg !28
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !29
  %83 = fmul float %82, %78, !dbg !30
  %84 = fadd float %73, %83, !dbg !31
  %85 = fmul float %78, %78, !dbg !32
  %86 = fmul float %68, %85, !dbg !33
  %87 = fmul float %82, %86, !dbg !34
  %88 = fadd float %77, %87, !dbg !35
  %89 = fsub float %61, %84, !dbg !21
  %90 = select i1 %32, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %91 = fcmp oeq float %90, 0.000000e+00, !dbg !27
  %92 = tail call float @llvm.nvvm.div.full(float %66, float %90), !dbg !28
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !29
  %94 = fmul float %93, %89, !dbg !30
  %95 = fadd float %84, %94, !dbg !31
  %96 = fmul float %89, %89, !dbg !32
  %97 = fmul float %79, %96, !dbg !33
  %98 = fmul float %93, %97, !dbg !34
  %99 = fadd float %88, %98, !dbg !35
  %100 = fsub float %62, %95, !dbg !21
  %101 = select i1 %32, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %102 = fcmp oeq float %101, 0.000000e+00, !dbg !27
  %103 = tail call float @llvm.nvvm.div.full(float %66, float %101), !dbg !28
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !29
  %105 = fmul float %104, %100, !dbg !30
  %106 = fadd float %95, %105, !dbg !31
  %107 = fmul float %100, %100, !dbg !32
  %108 = fmul float %90, %107, !dbg !33
  %109 = fmul float %104, %108, !dbg !34
  %110 = fadd float %99, %109, !dbg !35
  %111 = fsub float %63, %106, !dbg !21
  %112 = select i1 %32, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !27
  %114 = tail call float @llvm.nvvm.div.full(float %66, float %112), !dbg !28
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !29
  %116 = fmul float %115, %111, !dbg !30
  %117 = fadd float %106, %116, !dbg !31
  %118 = fmul float %111, %111, !dbg !32
  %119 = fmul float %101, %118, !dbg !33
  %120 = fmul float %115, %119, !dbg !34
  %121 = fadd float %110, %120, !dbg !35
  %122 = fsub float %64, %117, !dbg !21
  %123 = select i1 %32, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !27
  %125 = tail call float @llvm.nvvm.div.full(float %66, float %123), !dbg !28
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !29
  %127 = fmul float %126, %122, !dbg !30
  %128 = fadd float %117, %127, !dbg !31
  %129 = fmul float %122, %122, !dbg !32
  %130 = fmul float %112, %129, !dbg !33
  %131 = fmul float %126, %130, !dbg !34
  %132 = fadd float %121, %131, !dbg !35
  %133 = fsub float %65, %128, !dbg !21
  %134 = select i1 %32, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !27
  %136 = tail call float @llvm.nvvm.div.full(float %66, float %134), !dbg !28
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !29
  %138 = fmul float %137, %133, !dbg !30
  %139 = fadd float %128, %138, !dbg !31
  %140 = fmul float %133, %133, !dbg !32
  %141 = fmul float %123, %140, !dbg !33
  %142 = fmul float %137, %141, !dbg !34
  %143 = fadd float %132, %142, !dbg !35
  %144 = bitcast float %139 to i32, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = bitcast float %143 to i32, !dbg !36
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = bitcast float %134 to i32, !dbg !36
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = fsub float %146, %139, !dbg !21
  %154 = fadd float %134, %152, !dbg !26
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !27
  %156 = tail call float @llvm.nvvm.div.full(float %152, float %154), !dbg !28
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !29
  %158 = fmul float %157, %153, !dbg !30
  %159 = fadd float %139, %158, !dbg !31
  %160 = fadd float %143, %149, !dbg !37
  %161 = fmul float %153, %153, !dbg !32
  %162 = fmul float %134, %161, !dbg !33
  %163 = fmul float %157, %162, !dbg !34
  %164 = fadd float %160, %163, !dbg !35
  %165 = bitcast float %159 to i32, !dbg !36
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !36
  %167 = bitcast i32 %166 to float, !dbg !36
  %168 = bitcast float %164 to i32, !dbg !36
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !36
  %170 = bitcast i32 %169 to float, !dbg !36
  %171 = bitcast float %154 to i32, !dbg !36
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !36
  %173 = bitcast i32 %172 to float, !dbg !36
  %174 = fsub float %167, %159, !dbg !21
  %175 = fadd float %154, %173, !dbg !26
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !27
  %177 = tail call float @llvm.nvvm.div.full(float %173, float %175), !dbg !28
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !29
  %179 = fmul float %178, %174, !dbg !30
  %180 = fadd float %159, %179, !dbg !31
  %181 = fadd float %164, %170, !dbg !37
  %182 = fmul float %174, %174, !dbg !32
  %183 = fmul float %154, %182, !dbg !33
  %184 = fmul float %178, %183, !dbg !34
  %185 = fadd float %181, %184, !dbg !35
  %186 = bitcast float %180 to i32, !dbg !36
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !36
  %188 = bitcast i32 %187 to float, !dbg !36
  %189 = bitcast float %185 to i32, !dbg !36
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !36
  %191 = bitcast i32 %190 to float, !dbg !36
  %192 = bitcast float %175 to i32, !dbg !36
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !36
  %194 = bitcast i32 %193 to float, !dbg !36
  %195 = fsub float %188, %180, !dbg !21
  %196 = fadd float %175, %194, !dbg !26
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !27
  %198 = tail call float @llvm.nvvm.div.full(float %194, float %196), !dbg !28
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !29
  %200 = fmul float %199, %195, !dbg !30
  %201 = fadd float %180, %200, !dbg !31
  %202 = fadd float %185, %191, !dbg !37
  %203 = fmul float %195, %195, !dbg !32
  %204 = fmul float %175, %203, !dbg !33
  %205 = fmul float %199, %204, !dbg !34
  %206 = fadd float %202, %205, !dbg !35
  %207 = bitcast float %201 to i32, !dbg !36
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !36
  %209 = bitcast i32 %208 to float, !dbg !36
  %210 = bitcast float %206 to i32, !dbg !36
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !36
  %212 = bitcast i32 %211 to float, !dbg !36
  %213 = bitcast float %196 to i32, !dbg !36
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !36
  %215 = bitcast i32 %214 to float, !dbg !36
  %216 = fsub float %209, %201, !dbg !21
  %217 = fadd float %196, %215, !dbg !26
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !27
  %219 = tail call float @llvm.nvvm.div.full(float %215, float %217), !dbg !28
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !29
  %221 = fmul float %220, %216, !dbg !30
  %222 = fadd float %201, %221, !dbg !31
  %223 = fadd float %206, %212, !dbg !37
  %224 = fmul float %216, %216, !dbg !32
  %225 = fmul float %196, %224, !dbg !33
  %226 = fmul float %220, %225, !dbg !34
  %227 = fadd float %223, %226, !dbg !35
  %228 = bitcast float %222 to i32, !dbg !36
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !36
  %230 = bitcast i32 %229 to float, !dbg !36
  %231 = bitcast float %227 to i32, !dbg !36
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = bitcast float %217 to i32, !dbg !36
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !36
  %236 = bitcast i32 %235 to float, !dbg !36
  %237 = fsub float %230, %222, !dbg !21
  %238 = fadd float %217, %236, !dbg !26
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !27
  %240 = tail call float @llvm.nvvm.div.full(float %236, float %238), !dbg !28
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !29
  %242 = fmul float %241, %237, !dbg !30
  %243 = fadd float %222, %242, !dbg !31
  %244 = fadd float %227, %233, !dbg !37
  %245 = fmul float %237, %237, !dbg !32
  %246 = fmul float %217, %245, !dbg !33
  %247 = fmul float %241, %246, !dbg !34
  %248 = fadd float %244, %247, !dbg !35
  %249 = and i32 %23, 15, !dbg !36
  %250 = icmp eq i32 %22, 0, !dbg !36
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !36
  %252 = bitcast float %243 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 %250) #5, !dbg !36
  %253 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %249, !dbg !36
  %254 = bitcast float %248 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 %250) #5, !dbg !36
  %255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %249, !dbg !36
  %256 = bitcast float %238 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 %250) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %257 = icmp slt i32 %21, 16, !dbg !36
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !36
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %257) #5, !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !36
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %257) #5, !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !36
  %265 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %264, i1 %257) #5, !dbg !36
  %266 = bitcast i32 %265 to float, !dbg !36
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !36
  %268 = bitcast i32 %267 to float, !dbg !36
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !36
  %270 = bitcast i32 %269 to float, !dbg !36
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !36
  %272 = bitcast i32 %271 to float, !dbg !36
  %273 = fsub float %268, %260, !dbg !21
  %274 = fadd float %266, %272, !dbg !26
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !27
  %276 = tail call float @llvm.nvvm.div.full(float %272, float %274), !dbg !28
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !29
  %278 = fmul float %273, %277, !dbg !30
  %279 = fadd float %278, %260, !dbg !31
  %280 = fadd float %263, %270, !dbg !37
  %281 = fmul float %273, %273, !dbg !32
  %282 = fmul float %281, %266, !dbg !33
  %283 = fmul float %282, %277, !dbg !34
  %284 = fadd float %280, %283, !dbg !35
  %285 = bitcast float %279 to i32, !dbg !36
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !36
  %287 = bitcast i32 %286 to float, !dbg !36
  %288 = bitcast float %284 to i32, !dbg !36
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !36
  %290 = bitcast i32 %289 to float, !dbg !36
  %291 = bitcast float %274 to i32, !dbg !36
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 4, i32 31), !dbg !36
  %293 = bitcast i32 %292 to float, !dbg !36
  %294 = fsub float %287, %279, !dbg !21
  %295 = fadd float %274, %293, !dbg !26
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !27
  %297 = tail call float @llvm.nvvm.div.full(float %293, float %295), !dbg !28
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !29
  %299 = fmul float %294, %298, !dbg !30
  %300 = fadd float %279, %299, !dbg !31
  %301 = fadd float %284, %290, !dbg !37
  %302 = fmul float %294, %294, !dbg !32
  %303 = fmul float %274, %302, !dbg !33
  %304 = fmul float %298, %303, !dbg !34
  %305 = fadd float %301, %304, !dbg !35
  %306 = bitcast float %300 to i32, !dbg !36
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !36
  %308 = bitcast i32 %307 to float, !dbg !36
  %309 = bitcast float %305 to i32, !dbg !36
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !36
  %311 = bitcast i32 %310 to float, !dbg !36
  %312 = bitcast float %295 to i32, !dbg !36
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !36
  %314 = bitcast i32 %313 to float, !dbg !36
  %315 = fsub float %308, %300, !dbg !21
  %316 = fadd float %295, %314, !dbg !26
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !27
  %318 = tail call float @llvm.nvvm.div.full(float %314, float %316), !dbg !28
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !29
  %320 = fmul float %315, %319, !dbg !30
  %321 = fadd float %300, %320, !dbg !31
  %322 = fadd float %305, %311, !dbg !37
  %323 = fmul float %315, %315, !dbg !32
  %324 = fmul float %295, %323, !dbg !33
  %325 = fmul float %319, %324, !dbg !34
  %326 = fadd float %322, %325, !dbg !35
  %327 = bitcast float %321 to i32, !dbg !36
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !36
  %329 = bitcast i32 %328 to float, !dbg !36
  %330 = bitcast float %326 to i32, !dbg !36
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !36
  %332 = bitcast i32 %331 to float, !dbg !36
  %333 = bitcast float %316 to i32, !dbg !36
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !36
  %335 = bitcast i32 %334 to float, !dbg !36
  %336 = fsub float %329, %321, !dbg !21
  %337 = fadd float %316, %335, !dbg !26
  %338 = fcmp oeq float %337, 0.000000e+00, !dbg !27
  %339 = tail call float @llvm.nvvm.div.full(float %335, float %337), !dbg !28
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !29
  %341 = fmul float %336, %340, !dbg !30
  %342 = fadd float %321, %341, !dbg !31
  %343 = fadd float %326, %332, !dbg !37
  %344 = fmul float %336, %336, !dbg !32
  %345 = fmul float %316, %344, !dbg !33
  %346 = fmul float %340, %345, !dbg !34
  %347 = fadd float %343, %346, !dbg !35
  %348 = and i32 %21, 15, !dbg !36
  %349 = icmp eq i32 %348, 0, !dbg !36
  %350 = and i1 %257, %349, !dbg !36
  %351 = bitcast float %342 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %351, i1 %350) #5, !dbg !36
  %352 = bitcast float %347 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %352, i1 %350) #5, !dbg !36
  %353 = bitcast float %337 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %353, i1 %350) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %354 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %355 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %32) #5, !dbg !38
  %357 = add nuw nsw i32 %25, 3072, !dbg !39
  %358 = zext nneg i32 %357 to i64, !dbg !40
  %359 = getelementptr float, ptr addrspace(1) %1, i64 %358, !dbg !40
  %360 = zext nneg i32 %26 to i64, !dbg !40
  %361 = getelementptr float, ptr addrspace(1) %1, i64 %360, !dbg !40
  %362 = getelementptr i8, ptr addrspace(1) %361, i64 12288, !dbg !40
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %359, i1 %27) #5, !dbg !41
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %362, i1 %27) #5, !dbg !41
  %365 = getelementptr bfloat, ptr addrspace(1) %2, i64 %358, !dbg !42
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %365, i1 %27) #5, !dbg !43
  %367 = zext nneg i32 %25 to i64, !dbg !44
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !44
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %368, i1 %27) #5, !dbg !45
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %361, i1 %27) #5, !dbg !45
  %371 = getelementptr bfloat, ptr addrspace(1) %2, i64 %367, !dbg !46
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %371, i1 %27) #5, !dbg !47
  %373 = tail call float @llvm.nvvm.div.full(float %355, float 3.072000e+03), !dbg !48
  %374 = fadd float %373, 0x3EB0C6F7A0000000, !dbg !49
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i20 = icmp eq i32 %382, 0, !dbg !50
  br i1 %.not.i20, label %385, label %383, !dbg !50

383:                                              ; preds = %__nv_rsqrtf.exit
  %384 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %374), !dbg !50
  br label %__nv_rsqrtf.exit22, !dbg !50

385:                                              ; preds = %__nv_rsqrtf.exit
  %386 = tail call float @llvm.nvvm.rsqrt.approx.f(float %374), !dbg !50
  br label %__nv_rsqrtf.exit22, !dbg !50

__nv_rsqrtf.exit22:                               ; preds = %383, %385
  %.0.i21 = phi float [ %384, %383 ], [ %386, %385 ], !dbg !50
  %387 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !38
  %388 = bitcast i32 %387 to <2 x bfloat>, !dbg !38
  %389 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !38
  %390 = bitcast i32 %389 to <2 x bfloat>, !dbg !38
  %391 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !38
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !38
  %393 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !38
  %394 = bitcast i32 %393 to <2 x bfloat>, !dbg !38
  %395 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !47
  %396 = bitcast i32 %395 to <2 x bfloat>, !dbg !47
  %397 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !47
  %398 = bitcast i32 %397 to <2 x bfloat>, !dbg !47
  %399 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !47
  %400 = bitcast i32 %399 to <2 x bfloat>, !dbg !47
  %401 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !47
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !47
  %403 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !45
  %404 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !45
  %405 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !45
  %406 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !45
  %407 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !45
  %408 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !45
  %409 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !45
  %410 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !45
  %411 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !43
  %412 = bitcast i32 %411 to <2 x bfloat>, !dbg !43
  %413 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !43
  %414 = bitcast i32 %413 to <2 x bfloat>, !dbg !43
  %415 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !43
  %416 = bitcast i32 %415 to <2 x bfloat>, !dbg !43
  %417 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !43
  %418 = bitcast i32 %417 to <2 x bfloat>, !dbg !43
  %419 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !41
  %420 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !41
  %421 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !41
  %422 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !41
  %423 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !41
  %424 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !41
  %425 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !41
  %426 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !41
  %427 = getelementptr bfloat, ptr addrspace(1) %3, i64 %30, !dbg !51
  %428 = fpext <2 x bfloat> %394 to <2 x float>, !dbg !52
  %429 = insertelement <2 x float> poison, float %354, i64 0, !dbg !53
  %430 = shufflevector <2 x float> %429, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %431 = fsub <2 x float> %428, %430, !dbg !53
  %432 = fpext <2 x bfloat> %402 to <2 x float>, !dbg !54
  %433 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !45
  %434 = insertelement <2 x i32> %433, i32 %409, i64 1, !dbg !45
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !45
  %436 = fpext <2 x bfloat> %418 to <2 x float>, !dbg !55
  %437 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !41
  %438 = insertelement <2 x i32> %437, i32 %425, i64 1, !dbg !41
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !41
  %440 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !56
  %441 = shufflevector <2 x float> %440, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %442 = fmul <2 x float> %431, %441, !dbg !56
  %443 = fadd <2 x float> %439, %436, !dbg !57
  %444 = fadd <2 x float> %443, splat (float 1.000000e+00), !dbg !58
  %445 = fmul <2 x float> %444, %442, !dbg !59
  %446 = fadd <2 x float> %435, %432, !dbg !60
  %447 = fadd <2 x float> %446, %445, !dbg !61
  %448 = extractelement <2 x float> %447, i64 0, !dbg !62
  %449 = select i1 %32, float %448, float 0x7FF0000000000000, !dbg !63
  %450 = extractelement <2 x float> %447, i64 1, !dbg !62
  %451 = select i1 %32, float %450, float 0x7FF0000000000000, !dbg !63
  %452 = select i1 %32, float %448, float 0xFFF0000000000000, !dbg !62
  %453 = select i1 %32, float %450, float 0xFFF0000000000000, !dbg !62
  %454 = fptrunc <2 x float> %447 to <2 x bfloat>, !dbg !64
  %455 = fpext <2 x bfloat> %392 to <2 x float>, !dbg !52
  %456 = fsub <2 x float> %455, %430, !dbg !53
  %457 = fpext <2 x bfloat> %400 to <2 x float>, !dbg !54
  %458 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !45
  %459 = insertelement <2 x i32> %458, i32 %407, i64 1, !dbg !45
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !45
  %461 = fpext <2 x bfloat> %416 to <2 x float>, !dbg !55
  %462 = insertelement <2 x i32> poison, i32 %424, i64 0, !dbg !41
  %463 = insertelement <2 x i32> %462, i32 %423, i64 1, !dbg !41
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !41
  %465 = fmul <2 x float> %456, %441, !dbg !56
  %466 = fadd <2 x float> %464, %461, !dbg !57
  %467 = fadd <2 x float> %466, splat (float 1.000000e+00), !dbg !58
  %468 = fmul <2 x float> %467, %465, !dbg !59
  %469 = fadd <2 x float> %460, %457, !dbg !60
  %470 = fadd <2 x float> %469, %468, !dbg !61
  %471 = extractelement <2 x float> %470, i64 0, !dbg !62
  %472 = select i1 %32, float %471, float 0x7FF0000000000000, !dbg !63
  %473 = extractelement <2 x float> %470, i64 1, !dbg !62
  %474 = select i1 %32, float %473, float 0x7FF0000000000000, !dbg !63
  %475 = select i1 %32, float %471, float 0xFFF0000000000000, !dbg !62
  %476 = select i1 %32, float %473, float 0xFFF0000000000000, !dbg !62
  %477 = fptrunc <2 x float> %470 to <2 x bfloat>, !dbg !64
  %478 = fpext <2 x bfloat> %390 to <2 x float>, !dbg !52
  %479 = fsub <2 x float> %478, %430, !dbg !53
  %480 = fpext <2 x bfloat> %398 to <2 x float>, !dbg !54
  %481 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !45
  %482 = insertelement <2 x i32> %481, i32 %405, i64 1, !dbg !45
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !45
  %484 = fpext <2 x bfloat> %414 to <2 x float>, !dbg !55
  %485 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !41
  %486 = insertelement <2 x i32> %485, i32 %421, i64 1, !dbg !41
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !41
  %488 = fmul <2 x float> %479, %441, !dbg !56
  %489 = fadd <2 x float> %487, %484, !dbg !57
  %490 = fadd <2 x float> %489, splat (float 1.000000e+00), !dbg !58
  %491 = fmul <2 x float> %490, %488, !dbg !59
  %492 = fadd <2 x float> %483, %480, !dbg !60
  %493 = fadd <2 x float> %492, %491, !dbg !61
  %494 = extractelement <2 x float> %493, i64 0, !dbg !62
  %495 = select i1 %32, float %494, float 0x7FF0000000000000, !dbg !63
  %496 = extractelement <2 x float> %493, i64 1, !dbg !62
  %497 = select i1 %32, float %496, float 0x7FF0000000000000, !dbg !63
  %498 = select i1 %32, float %494, float 0xFFF0000000000000, !dbg !62
  %499 = select i1 %32, float %496, float 0xFFF0000000000000, !dbg !62
  %500 = fptrunc <2 x float> %493 to <2 x bfloat>, !dbg !64
  %501 = fpext <2 x bfloat> %388 to <2 x float>, !dbg !52
  %502 = fsub <2 x float> %501, %430, !dbg !53
  %503 = fpext <2 x bfloat> %396 to <2 x float>, !dbg !54
  %504 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !45
  %505 = insertelement <2 x i32> %504, i32 %403, i64 1, !dbg !45
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !45
  %507 = fpext <2 x bfloat> %412 to <2 x float>, !dbg !55
  %508 = insertelement <2 x i32> poison, i32 %420, i64 0, !dbg !41
  %509 = insertelement <2 x i32> %508, i32 %419, i64 1, !dbg !41
  %510 = bitcast <2 x i32> %509 to <2 x float>, !dbg !41
  %511 = fmul <2 x float> %502, %441, !dbg !56
  %512 = fadd <2 x float> %510, %507, !dbg !57
  %513 = fadd <2 x float> %512, splat (float 1.000000e+00), !dbg !58
  %514 = fmul <2 x float> %513, %511, !dbg !59
  %515 = fadd <2 x float> %506, %503, !dbg !60
  %516 = fadd <2 x float> %515, %514, !dbg !61
  %517 = extractelement <2 x float> %516, i64 0, !dbg !62
  %518 = select i1 %32, float %517, float 0x7FF0000000000000, !dbg !63
  %519 = extractelement <2 x float> %516, i64 1, !dbg !62
  %520 = select i1 %32, float %519, float 0x7FF0000000000000, !dbg !63
  %521 = select i1 %32, float %517, float 0xFFF0000000000000, !dbg !62
  %522 = select i1 %32, float %519, float 0xFFF0000000000000, !dbg !62
  %523 = fptrunc <2 x float> %516 to <2 x bfloat>, !dbg !64
  %524 = bitcast <2 x bfloat> %454 to i32, !dbg !64
  %525 = bitcast <2 x bfloat> %477 to i32, !dbg !64
  %526 = bitcast <2 x bfloat> %500 to i32, !dbg !64
  %527 = bitcast <2 x bfloat> %523 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %524, i32 %525, i32 %526, i32 %527, ptr addrspace(1) %427, i1 %32) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %528 = fcmp olt float %449, %451, !dbg !67
  %529 = fcmp uno float %449, 0.000000e+00, !dbg !68
  %530 = or i1 %528, %529, !dbg !69
  %531 = select i1 %530, float %449, float %451, !dbg !70
  %532 = fcmp olt float %531, %472, !dbg !67
  %533 = fcmp uno float %531, 0.000000e+00, !dbg !68
  %534 = or i1 %532, %533, !dbg !69
  %535 = select i1 %534, float %531, float %472, !dbg !70
  %536 = fcmp olt float %535, %474, !dbg !67
  %537 = fcmp uno float %535, 0.000000e+00, !dbg !68
  %538 = or i1 %536, %537, !dbg !69
  %539 = select i1 %538, float %535, float %474, !dbg !70
  %540 = fcmp olt float %539, %495, !dbg !67
  %541 = fcmp uno float %539, 0.000000e+00, !dbg !68
  %542 = or i1 %540, %541, !dbg !69
  %543 = select i1 %542, float %539, float %495, !dbg !70
  %544 = fcmp olt float %543, %497, !dbg !67
  %545 = fcmp uno float %543, 0.000000e+00, !dbg !68
  %546 = or i1 %544, %545, !dbg !69
  %547 = select i1 %546, float %543, float %497, !dbg !70
  %548 = fcmp olt float %547, %518, !dbg !67
  %549 = fcmp uno float %547, 0.000000e+00, !dbg !68
  %550 = or i1 %548, %549, !dbg !69
  %551 = select i1 %550, float %547, float %518, !dbg !70
  %552 = fcmp olt float %551, %520, !dbg !67
  %553 = fcmp uno float %551, 0.000000e+00, !dbg !68
  %554 = or i1 %552, %553, !dbg !69
  %555 = select i1 %554, float %551, float %520, !dbg !70
  %556 = bitcast float %555 to i32, !dbg !65
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %556, i32 16, i32 31), !dbg !65
  %558 = bitcast i32 %557 to float, !dbg !65
  %559 = fcmp olt float %555, %558, !dbg !67
  %560 = fcmp uno float %555, 0.000000e+00, !dbg !68
  %561 = or i1 %559, %560, !dbg !69
  %562 = select i1 %561, float %555, float %558, !dbg !70
  %563 = bitcast float %562 to i32, !dbg !65
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 8, i32 31), !dbg !65
  %565 = bitcast i32 %564 to float, !dbg !65
  %566 = fcmp olt float %562, %565, !dbg !67
  %567 = fcmp uno float %562, 0.000000e+00, !dbg !68
  %568 = or i1 %566, %567, !dbg !69
  %569 = select i1 %568, float %562, float %565, !dbg !70
  %570 = bitcast float %569 to i32, !dbg !65
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 4, i32 31), !dbg !65
  %572 = bitcast i32 %571 to float, !dbg !65
  %573 = fcmp olt float %569, %572, !dbg !67
  %574 = fcmp uno float %569, 0.000000e+00, !dbg !68
  %575 = or i1 %573, %574, !dbg !69
  %576 = select i1 %575, float %569, float %572, !dbg !70
  %577 = bitcast float %576 to i32, !dbg !65
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %577, i32 2, i32 31), !dbg !65
  %579 = bitcast i32 %578 to float, !dbg !65
  %580 = fcmp olt float %576, %579, !dbg !67
  %581 = fcmp uno float %576, 0.000000e+00, !dbg !68
  %582 = or i1 %580, %581, !dbg !69
  %583 = select i1 %582, float %576, float %579, !dbg !70
  %584 = bitcast float %583 to i32, !dbg !65
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 1, i32 31), !dbg !65
  %586 = bitcast i32 %585 to float, !dbg !65
  %587 = fcmp olt float %583, %586, !dbg !67
  %588 = fcmp uno float %583, 0.000000e+00, !dbg !68
  %589 = or i1 %587, %588, !dbg !69
  %590 = select i1 %589, i32 %584, i32 %585, !dbg !70
  %591 = insertelement <1 x i32> poison, i32 %590, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %591, i1 %250) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %592 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %257) #5, !dbg !65
  %593 = bitcast i32 %592 to float, !dbg !65
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 8, i32 31), !dbg !65
  %595 = bitcast i32 %594 to float, !dbg !65
  %596 = fcmp olt float %593, %595, !dbg !67
  %597 = fcmp uno float %593, 0.000000e+00, !dbg !68
  %598 = or i1 %597, %596, !dbg !69
  %599 = select i1 %598, float %593, float %595, !dbg !70
  %600 = bitcast float %599 to i32, !dbg !65
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 4, i32 31), !dbg !65
  %602 = bitcast i32 %601 to float, !dbg !65
  %603 = fcmp olt float %599, %602, !dbg !67
  %604 = fcmp uno float %599, 0.000000e+00, !dbg !68
  %605 = or i1 %603, %604, !dbg !69
  %606 = select i1 %605, float %599, float %602, !dbg !70
  %607 = bitcast float %606 to i32, !dbg !65
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 2, i32 31), !dbg !65
  %609 = bitcast i32 %608 to float, !dbg !65
  %610 = fcmp olt float %606, %609, !dbg !67
  %611 = fcmp uno float %606, 0.000000e+00, !dbg !68
  %612 = or i1 %610, %611, !dbg !69
  %613 = select i1 %612, float %606, float %609, !dbg !70
  %614 = bitcast float %613 to i32, !dbg !65
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 1, i32 31), !dbg !65
  %616 = bitcast i32 %615 to float, !dbg !65
  %617 = fcmp olt float %613, %616, !dbg !67
  %618 = fcmp uno float %613, 0.000000e+00, !dbg !68
  %619 = or i1 %617, %618, !dbg !69
  %620 = select i1 %619, i32 %614, i32 %615, !dbg !70
  %621 = insertelement <1 x i32> poison, i32 %620, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %621, i1 %350) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %622 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %623 = fcmp ogt float %452, %453, !dbg !73
  %624 = fcmp uno float %452, 0.000000e+00, !dbg !74
  %625 = or i1 %623, %624, !dbg !75
  %626 = select i1 %625, float %452, float %453, !dbg !76
  %627 = fcmp ogt float %626, %475, !dbg !73
  %628 = fcmp uno float %626, 0.000000e+00, !dbg !74
  %629 = or i1 %627, %628, !dbg !75
  %630 = select i1 %629, float %626, float %475, !dbg !76
  %631 = fcmp ogt float %630, %476, !dbg !73
  %632 = fcmp uno float %630, 0.000000e+00, !dbg !74
  %633 = or i1 %631, %632, !dbg !75
  %634 = select i1 %633, float %630, float %476, !dbg !76
  %635 = fcmp ogt float %634, %498, !dbg !73
  %636 = fcmp uno float %634, 0.000000e+00, !dbg !74
  %637 = or i1 %635, %636, !dbg !75
  %638 = select i1 %637, float %634, float %498, !dbg !76
  %639 = fcmp ogt float %638, %499, !dbg !73
  %640 = fcmp uno float %638, 0.000000e+00, !dbg !74
  %641 = or i1 %639, %640, !dbg !75
  %642 = select i1 %641, float %638, float %499, !dbg !76
  %643 = fcmp ogt float %642, %521, !dbg !73
  %644 = fcmp uno float %642, 0.000000e+00, !dbg !74
  %645 = or i1 %643, %644, !dbg !75
  %646 = select i1 %645, float %642, float %521, !dbg !76
  %647 = fcmp ogt float %646, %522, !dbg !73
  %648 = fcmp uno float %646, 0.000000e+00, !dbg !74
  %649 = or i1 %647, %648, !dbg !75
  %650 = select i1 %649, float %646, float %522, !dbg !76
  %651 = bitcast float %650 to i32, !dbg !71
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 16, i32 31), !dbg !71
  %653 = bitcast i32 %652 to float, !dbg !71
  %654 = fcmp ogt float %650, %653, !dbg !73
  %655 = fcmp uno float %650, 0.000000e+00, !dbg !74
  %656 = or i1 %654, %655, !dbg !75
  %657 = select i1 %656, float %650, float %653, !dbg !76
  %658 = bitcast float %657 to i32, !dbg !71
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 8, i32 31), !dbg !71
  %660 = bitcast i32 %659 to float, !dbg !71
  %661 = fcmp ogt float %657, %660, !dbg !73
  %662 = fcmp uno float %657, 0.000000e+00, !dbg !74
  %663 = or i1 %661, %662, !dbg !75
  %664 = select i1 %663, float %657, float %660, !dbg !76
  %665 = bitcast float %664 to i32, !dbg !71
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 4, i32 31), !dbg !71
  %667 = bitcast i32 %666 to float, !dbg !71
  %668 = fcmp ogt float %664, %667, !dbg !73
  %669 = fcmp uno float %664, 0.000000e+00, !dbg !74
  %670 = or i1 %668, %669, !dbg !75
  %671 = select i1 %670, float %664, float %667, !dbg !76
  %672 = bitcast float %671 to i32, !dbg !71
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 2, i32 31), !dbg !71
  %674 = bitcast i32 %673 to float, !dbg !71
  %675 = fcmp ogt float %671, %674, !dbg !73
  %676 = fcmp uno float %671, 0.000000e+00, !dbg !74
  %677 = or i1 %675, %676, !dbg !75
  %678 = select i1 %677, float %671, float %674, !dbg !76
  %679 = bitcast float %678 to i32, !dbg !71
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %679, i32 1, i32 31), !dbg !71
  %681 = bitcast i32 %680 to float, !dbg !71
  %682 = fcmp ogt float %678, %681, !dbg !73
  %683 = fcmp uno float %678, 0.000000e+00, !dbg !74
  %684 = or i1 %682, %683, !dbg !75
  %685 = select i1 %684, i32 %679, i32 %680, !dbg !76
  %686 = insertelement <1 x i32> poison, i32 %685, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %686, i1 %250) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %687 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %257) #5, !dbg !71
  %688 = bitcast i32 %687 to float, !dbg !71
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 8, i32 31), !dbg !71
  %690 = bitcast i32 %689 to float, !dbg !71
  %691 = fcmp ogt float %688, %690, !dbg !73
  %692 = fcmp uno float %688, 0.000000e+00, !dbg !74
  %693 = or i1 %692, %691, !dbg !75
  %694 = select i1 %693, float %688, float %690, !dbg !76
  %695 = bitcast float %694 to i32, !dbg !71
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 4, i32 31), !dbg !71
  %697 = bitcast i32 %696 to float, !dbg !71
  %698 = fcmp ogt float %694, %697, !dbg !73
  %699 = fcmp uno float %694, 0.000000e+00, !dbg !74
  %700 = or i1 %698, %699, !dbg !75
  %701 = select i1 %700, float %694, float %697, !dbg !76
  %702 = bitcast float %701 to i32, !dbg !71
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 2, i32 31), !dbg !71
  %704 = bitcast i32 %703 to float, !dbg !71
  %705 = fcmp ogt float %701, %704, !dbg !73
  %706 = fcmp uno float %701, 0.000000e+00, !dbg !74
  %707 = or i1 %705, %706, !dbg !75
  %708 = select i1 %707, float %701, float %704, !dbg !76
  %709 = bitcast float %708 to i32, !dbg !71
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 1, i32 31), !dbg !71
  %711 = bitcast i32 %710 to float, !dbg !71
  %712 = fcmp ogt float %708, %711, !dbg !73
  %713 = fcmp uno float %708, 0.000000e+00, !dbg !74
  %714 = or i1 %712, %713, !dbg !75
  %715 = select i1 %714, i32 %709, i32 %710, !dbg !76
  %716 = insertelement <1 x i32> poison, i32 %715, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %716, i1 %350) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %717 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %718 = sext i32 %19 to i64, !dbg !77
  %719 = getelementptr bfloat, ptr addrspace(1) %4, i64 %718, !dbg !77
  %720 = fptrunc float %622 to bfloat, !dbg !78
  %721 = and i32 %21, 511, !dbg !78
  %722 = icmp eq i32 %721, 0, !dbg !78
  %723 = bitcast bfloat %720 to i16, !dbg !78
  %724 = and i1 %20, %722, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %719, i1 %724) #5, !dbg !78
  %725 = getelementptr bfloat, ptr addrspace(1) %5, i64 %718, !dbg !79
  %726 = fptrunc float %717 to bfloat, !dbg !80
  %727 = bitcast bfloat %726 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %727, ptr addrspace(1) %725, i1 %724) #5, !dbg !80
  %728 = getelementptr bfloat, ptr addrspace(1) %6, i64 %718, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %728, i1 %724) #5, !dbg !82
  %729 = getelementptr bfloat, ptr addrspace(1) %7, i64 %718, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %727, ptr addrspace(1) %729, i1 %724) #5, !dbg !84
  %730 = getelementptr bfloat, ptr addrspace(1) %8, i64 %718, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %730, i1 %724) #5, !dbg !86
  %731 = getelementptr bfloat, ptr addrspace(1) %9, i64 %718, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %727, ptr addrspace(1) %731, i1 %724) #5, !dbg !88
  %732 = getelementptr bfloat, ptr addrspace(1) %10, i64 %718, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %732, i1 %724) #5, !dbg !90
  %733 = getelementptr bfloat, ptr addrspace(1) %11, i64 %718, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %727, ptr addrspace(1) %733, i1 %724) #5, !dbg !92
  %734 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %427, i1 %32) #5, !dbg !93
  %735 = extractvalue { i32, i32, i32, i32 } %734, 0, !dbg !93
  %736 = bitcast i32 %735 to <2 x bfloat>, !dbg !93
  %737 = extractvalue { i32, i32, i32, i32 } %734, 1, !dbg !93
  %738 = bitcast i32 %737 to <2 x bfloat>, !dbg !93
  %739 = extractvalue { i32, i32, i32, i32 } %734, 2, !dbg !93
  %740 = bitcast i32 %739 to <2 x bfloat>, !dbg !93
  %741 = extractvalue { i32, i32, i32, i32 } %734, 3, !dbg !93
  %742 = bitcast i32 %741 to <2 x bfloat>, !dbg !93
  %743 = extractelement <2 x bfloat> %736, i64 0, !dbg !93
  %744 = extractelement <2 x bfloat> %736, i64 1, !dbg !93
  %745 = extractelement <2 x bfloat> %738, i64 0, !dbg !93
  %746 = extractelement <2 x bfloat> %738, i64 1, !dbg !93
  %747 = extractelement <2 x bfloat> %740, i64 0, !dbg !93
  %748 = extractelement <2 x bfloat> %740, i64 1, !dbg !93
  %749 = extractelement <2 x bfloat> %742, i64 0, !dbg !93
  %750 = extractelement <2 x bfloat> %742, i64 1, !dbg !93
  %751 = fpext bfloat %743 to float, !dbg !94
  %752 = fpext bfloat %744 to float, !dbg !94
  %753 = fpext bfloat %745 to float, !dbg !94
  %754 = fpext bfloat %746 to float, !dbg !94
  %755 = fpext bfloat %747 to float, !dbg !94
  %756 = fpext bfloat %748 to float, !dbg !94
  %757 = fpext bfloat %749 to float, !dbg !94
  %758 = fpext bfloat %750 to float, !dbg !94
  %.inv = fcmp oge float %622, 0.000000e+00, !dbg !95
  %759 = select i1 %.inv, float 0.000000e+00, float %622, !dbg !95
  %760 = fsub float 0.000000e+00, %759, !dbg !97
  %.inv1 = fcmp ole float %717, 0.000000e+00, !dbg !98
  %761 = select i1 %.inv1, float 0.000000e+00, float %717, !dbg !98
  %762 = fcmp ogt float %760, %761, !dbg !100
  %763 = fcmp uno float %760, 0.000000e+00, !dbg !102
  %764 = or i1 %763, %762, !dbg !103
  %765 = select i1 %764, float %760, float %761, !dbg !104
  %766 = fmul float %765, 0x3F80204080000000, !dbg !105
  %767 = fcmp ogt float %766, 0x3EE4F8B580000000, !dbg !106
  %768 = fcmp uno float %766, 0.000000e+00, !dbg !108
  %769 = or i1 %767, %768, !dbg !109
  %770 = select i1 %769, float %766, float 0x3EE4F8B580000000, !dbg !110
  %771 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %770), !dbg !111
  %772 = fmul float %771, %751, !dbg !112
  %773 = fmul float %771, %752, !dbg !112
  %774 = fmul float %771, %753, !dbg !112
  %775 = fmul float %771, %754, !dbg !112
  %776 = fmul float %771, %755, !dbg !112
  %777 = fmul float %771, %756, !dbg !112
  %778 = fmul float %771, %757, !dbg !112
  %779 = fmul float %771, %758, !dbg !112
  %780 = tail call float @llvm.nvvm.round.f(float %772) #5, !dbg !113
  %781 = tail call float @llvm.nvvm.round.f(float %773) #5, !dbg !113
  %782 = tail call float @llvm.nvvm.round.f(float %774) #5, !dbg !113
  %783 = tail call float @llvm.nvvm.round.f(float %775) #5, !dbg !113
  %784 = tail call float @llvm.nvvm.round.f(float %776) #5, !dbg !113
  %785 = tail call float @llvm.nvvm.round.f(float %777) #5, !dbg !113
  %786 = tail call float @llvm.nvvm.round.f(float %778) #5, !dbg !113
  %787 = tail call float @llvm.nvvm.round.f(float %779) #5, !dbg !113
  %788 = insertelement <4 x float> poison, float %780, i64 0, !dbg !114
  %789 = insertelement <4 x float> %788, float %781, i64 1, !dbg !114
  %790 = insertelement <4 x float> %789, float %782, i64 2, !dbg !114
  %791 = insertelement <4 x float> %790, float %783, i64 3, !dbg !114
  %792 = fcmp ogt <4 x float> %791, splat (float -1.270000e+02), !dbg !114
  %793 = fcmp uno <4 x float> %791, zeroinitializer, !dbg !116
  %794 = or <4 x i1> %792, %793, !dbg !117
  %795 = select <4 x i1> %794, <4 x float> %791, <4 x float> splat (float -1.270000e+02), !dbg !118
  %796 = fcmp olt <4 x float> %795, splat (float 1.270000e+02), !dbg !119
  %797 = fcmp uno <4 x float> %795, zeroinitializer, !dbg !121
  %798 = or <4 x i1> %796, %797, !dbg !122
  %799 = fptosi <4 x float> %795 to <4 x i8>, !dbg !123
  %800 = select <4 x i1> %798, <4 x i8> %799, <4 x i8> splat (i8 127), !dbg !124
  %801 = insertelement <4 x float> poison, float %784, i64 0, !dbg !114
  %802 = insertelement <4 x float> %801, float %785, i64 1, !dbg !114
  %803 = insertelement <4 x float> %802, float %786, i64 2, !dbg !114
  %804 = insertelement <4 x float> %803, float %787, i64 3, !dbg !114
  %805 = fcmp ogt <4 x float> %804, splat (float -1.270000e+02), !dbg !114
  %806 = fcmp uno <4 x float> %804, zeroinitializer, !dbg !116
  %807 = or <4 x i1> %805, %806, !dbg !117
  %808 = select <4 x i1> %807, <4 x float> %804, <4 x float> splat (float -1.270000e+02), !dbg !118
  %809 = fcmp olt <4 x float> %808, splat (float 1.270000e+02), !dbg !119
  %810 = fcmp uno <4 x float> %808, zeroinitializer, !dbg !121
  %811 = or <4 x i1> %809, %810, !dbg !122
  %812 = fptosi <4 x float> %808 to <4 x i8>, !dbg !123
  %813 = select <4 x i1> %811, <4 x i8> %812, <4 x i8> splat (i8 127), !dbg !124
  %814 = getelementptr i8, ptr addrspace(1) %12, i64 %30, !dbg !125
  %815 = bitcast <4 x i8> %800 to i32, !dbg !126
  %816 = bitcast <4 x i8> %813 to i32, !dbg !126
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %815, i32 %816, ptr addrspace(1) %814, i1 %32) #5, !dbg !126
  %817 = getelementptr i8, ptr addrspace(1) %13, i64 %30, !dbg !127
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %815, i32 %816, ptr addrspace(1) %817, i1 %32) #5, !dbg !128
  %818 = getelementptr i8, ptr addrspace(1) %14, i64 %30, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %815, i32 %816, ptr addrspace(1) %818, i1 %32) #5, !dbg !130
  %819 = getelementptr i8, ptr addrspace(1) %15, i64 %30, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %815, i32 %816, ptr addrspace(1) %819, i1 %32) #5, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!37 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 95, column: 25, scope: !6)
!90 = !DILocation(line: 95, column: 37, scope: !6)
!91 = !DILocation(line: 96, column: 26, scope: !6)
!92 = !DILocation(line: 96, column: 38, scope: !6)
!93 = !DILocation(line: 103, column: 53, scope: !6)
!94 = !DILocation(line: 103, column: 115, scope: !6)
!95 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !96)
!96 = !DILocation(line: 105, column: 46, scope: !6)
!97 = !DILocation(line: 106, column: 17, scope: !6)
!98 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !101)
!101 = !DILocation(line: 108, column: 46, scope: !6)
!102 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !101)
!104 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !101)
!105 = !DILocation(line: 110, column: 24, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !107)
!107 = !DILocation(line: 113, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !107)
!109 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !107)
!110 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !107)
!111 = !DILocation(line: 116, column: 25, scope: !6)
!112 = !DILocation(line: 119, column: 24, scope: !6)
!113 = !DILocation(line: 120, column: 36, scope: !6)
!114 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !115)
!115 = !DILocation(line: 123, column: 46, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !115)
!117 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !115)
!118 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !115)
!119 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 125, column: 46, scope: !6)
!121 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !120)
!122 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !120)
!123 = !DILocation(line: 127, column: 25, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !120)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 129, column: 30, scope: !6)
!128 = !DILocation(line: 129, column: 54, scope: !6)
!129 = !DILocation(line: 130, column: 30, scope: !6)
!130 = !DILocation(line: 130, column: 54, scope: !6)
!131 = !DILocation(line: 131, column: 30, scope: !6)
!132 = !DILocation(line: 131, column: 54, scope: !6)
!133 = !DILocation(line: 97, column: 4, scope: !6)
