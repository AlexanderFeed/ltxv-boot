; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 9, !dbg !11
  %.lobit = and i32 %12, 1, !dbg !11
  %13 = and i32 %11, 31, !dbg !11
  %14 = or disjoint i32 %.lobit, %10, !dbg !12
  %15 = icmp slt i32 %14, 4112, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 4088, !dbg !14
  %18 = or disjoint i32 %17, 4, !dbg !14
  %19 = mul i32 %14, 3072, !dbg !15
  %20 = mul i32 %14, 12288, !dbg !16
  %21 = add i32 %20, -3072
  %22 = add i32 %21, %18
  %23 = zext nneg i32 %17 to i64, !dbg !17
  br label %24, !dbg !17

24:                                               ; preds = %8, %__nv_tanhf.exit287
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit287 ]
  %25 = phi <8 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %420, %__nv_tanhf.exit287 ]
  %26 = phi <8 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %416, %__nv_tanhf.exit287 ]
  %27 = or disjoint i64 %indvars.iv, %23, !dbg !18
  %28 = icmp samesign ult i64 %27, 15360, !dbg !19
  %29 = icmp samesign ult i64 %27, 3072, !dbg !20
  %30 = trunc nuw nsw i64 %27 to i32, !dbg !21
  %31 = add i32 %19, %30, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = and i1 %15, %28, !dbg !23
  %35 = and i1 %15, %29, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %35) #5, !dbg !25
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !25
  %45 = shufflevector <2 x bfloat> %44, <2 x bfloat> %42, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %46 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %47 = shufflevector <8 x bfloat> %45, <8 x bfloat> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !26
  %48 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %49 = shufflevector <8 x bfloat> %47, <8 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !26
  %50 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !26
  %52 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %53 = shufflevector <8 x bfloat> %51, <8 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !26
  %54 = fpext <8 x bfloat> %53 to <8 x float>, !dbg !26
  %55 = icmp samesign ugt i64 %27, 3071, !dbg !27
  %56 = add i32 %21, %30, !dbg !28
  %57 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !28
  %58 = add i32 %22, %57, !dbg !28
  %59 = sext i32 %56 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !29
  %61 = sext i32 %58 to i64, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !29
  %63 = and i1 %55, %34, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %63) #5, !dbg !31
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %63) #5, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !31
  %74 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !31
  %75 = insertelement <8 x i32> %74, i32 %72, i64 1, !dbg !31
  %76 = insertelement <8 x i32> %75, i32 %71, i64 2, !dbg !31
  %77 = insertelement <8 x i32> %76, i32 %70, i64 3, !dbg !31
  %78 = insertelement <8 x i32> %77, i32 %68, i64 4, !dbg !31
  %79 = insertelement <8 x i32> %78, i32 %67, i64 5, !dbg !31
  %80 = insertelement <8 x i32> %79, i32 %66, i64 6, !dbg !31
  %81 = insertelement <8 x i32> %80, i32 %65, i64 7, !dbg !31
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !31
  %83 = fmul <8 x float> %82, splat (float 5.000000e-01), !dbg !32
  %84 = bitcast i32 %65 to float, !dbg !33
  %85 = fmul float %84, %84, !dbg !33
  %86 = bitcast i32 %66 to float, !dbg !33
  %87 = fmul float %86, %86, !dbg !33
  %88 = bitcast i32 %67 to float, !dbg !33
  %89 = fmul float %88, %88, !dbg !33
  %90 = bitcast i32 %68 to float, !dbg !33
  %91 = fmul float %90, %90, !dbg !33
  %92 = bitcast i32 %70 to float, !dbg !33
  %93 = fmul float %92, %92, !dbg !33
  %94 = bitcast i32 %71 to float, !dbg !33
  %95 = fmul float %94, %94, !dbg !33
  %96 = bitcast i32 %72 to float, !dbg !33
  %97 = fmul float %96, %96, !dbg !33
  %98 = bitcast i32 %73 to float, !dbg !33
  %99 = fmul float %98, %98, !dbg !33
  %100 = fmul float %85, %84, !dbg !34
  %101 = fmul float %87, %86, !dbg !34
  %102 = fmul float %89, %88, !dbg !34
  %103 = fmul float %91, %90, !dbg !34
  %104 = fmul float %93, %92, !dbg !34
  %105 = fmul float %95, %94, !dbg !34
  %106 = fmul float %97, %96, !dbg !34
  %107 = fmul float %99, %98, !dbg !34
  %108 = fmul float %100, 0x3FA6E4E260000000, !dbg !35
  %109 = fmul float %101, 0x3FA6E4E260000000, !dbg !35
  %110 = fmul float %102, 0x3FA6E4E260000000, !dbg !35
  %111 = fmul float %103, 0x3FA6E4E260000000, !dbg !35
  %112 = fmul float %104, 0x3FA6E4E260000000, !dbg !35
  %113 = fmul float %105, 0x3FA6E4E260000000, !dbg !35
  %114 = fmul float %106, 0x3FA6E4E260000000, !dbg !35
  %115 = fmul float %107, 0x3FA6E4E260000000, !dbg !35
  %116 = fadd float %108, %84, !dbg !36
  %117 = fadd float %109, %86, !dbg !36
  %118 = fadd float %110, %88, !dbg !36
  %119 = fadd float %111, %90, !dbg !36
  %120 = fadd float %112, %92, !dbg !36
  %121 = fadd float %113, %94, !dbg !36
  %122 = fadd float %114, %96, !dbg !36
  %123 = fadd float %115, %98, !dbg !36
  %124 = fmul float %116, 0x3FE9884540000000, !dbg !37
  %125 = fmul float %117, 0x3FE9884540000000, !dbg !37
  %126 = fmul float %118, 0x3FE9884540000000, !dbg !37
  %127 = fmul float %119, 0x3FE9884540000000, !dbg !37
  %128 = fmul float %120, 0x3FE9884540000000, !dbg !37
  %129 = fmul float %121, 0x3FE9884540000000, !dbg !37
  %130 = fmul float %122, 0x3FE9884540000000, !dbg !37
  %131 = fmul float %123, 0x3FE9884540000000, !dbg !37
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i136 = icmp eq i32 %132, 0, !dbg !38
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !38
  %134 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !38
  %.01.i137 = select i1 %.not.i136, float %134, float %133, !dbg !38
  %135 = fcmp ult float %.01.i137, 0x3FE3333340000000, !dbg !38
  br i1 %135, label %__internal_fmad.exit3.i143, label %__internal_fmad.exit1.i138, !dbg !38

__internal_fmad.exit1.i138:                       ; preds = %24
  %136 = fmul float %.01.i137, 0x4007154760000000, !dbg !38
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %136) #5, !dbg !38
  %138 = fadd float %137, 1.000000e+00, !dbg !38
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #6, !dbg !38, !srcloc !39
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i139 = icmp eq i32 %140, 0, !dbg !38
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i140 = select i1 %.not6.i139, float %142, float %141, !dbg !38
  %143 = fcmp oge float %.01.i137, 0x4022059680000000, !dbg !38
  %s.0.i141 = select i1 %143, float 1.000000e+00, float %.03.i140, !dbg !38
  %144 = bitcast float %s.0.i141 to i32, !dbg !38
  %145 = bitcast float %124 to i32, !dbg !38
  %146 = and i32 %145, -2147483648, !dbg !38
  %147 = or i32 %146, %144, !dbg !38
  %148 = bitcast i32 %147 to float, !dbg !38
  br label %__nv_tanhf.exit154, !dbg !38

__internal_fmad.exit3.i143:                       ; preds = %24
  %149 = fmul float %124, %124, !dbg !38
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i144 = icmp eq i32 %150, 0, !dbg !38
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !38
  %152 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i145 = select i1 %.not1.i144, float %152, float %151, !dbg !38
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i146 = icmp eq i32 %153, 0, !dbg !38
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i145, float %149, float 0x3FC10B2820000000) #5, !dbg !38
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i145, float %149, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i147 = select i1 %.not2.i146, float %155, float %154, !dbg !38
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i148 = icmp eq i32 %156, 0, !dbg !38
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i147, float %149, float 0xBFD5553DA0000000) #5, !dbg !38
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i147, float %149, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i149 = select i1 %.not3.i148, float %158, float %157, !dbg !38
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i150 = icmp eq i32 %159, 0, !dbg !38
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i149, float %149, float 0.000000e+00) #5, !dbg !38
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i149, float %149, float 0.000000e+00) #5, !dbg !38
  %.04.i151 = select i1 %.not4.i150, float %161, float %160, !dbg !38
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i152 = icmp eq i32 %162, 0, !dbg !38
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i151, float %124, float %124) #5, !dbg !38
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i151, float %124, float %124) #5, !dbg !38
  %.02.i153 = select i1 %.not5.i152, float %164, float %163, !dbg !38
  br label %__nv_tanhf.exit154, !dbg !38

__nv_tanhf.exit154:                               ; preds = %__internal_fmad.exit1.i138, %__internal_fmad.exit3.i143
  %s.1.i142 = phi float [ %148, %__internal_fmad.exit1.i138 ], [ %.02.i153, %__internal_fmad.exit3.i143 ], !dbg !38
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i155 = icmp eq i32 %165, 0, !dbg !38
  %166 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !38
  %167 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !38
  %.01.i156 = select i1 %.not.i155, float %167, float %166, !dbg !38
  %168 = fcmp ult float %.01.i156, 0x3FE3333340000000, !dbg !38
  br i1 %168, label %__internal_fmad.exit3.i162, label %__internal_fmad.exit1.i157, !dbg !38

__internal_fmad.exit1.i157:                       ; preds = %__nv_tanhf.exit154
  %169 = fmul float %.01.i156, 0x4007154760000000, !dbg !38
  %170 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %169) #5, !dbg !38
  %171 = fadd float %170, 1.000000e+00, !dbg !38
  %172 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %171) #6, !dbg !38, !srcloc !39
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i158 = icmp eq i32 %173, 0, !dbg !38
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i159 = select i1 %.not6.i158, float %175, float %174, !dbg !38
  %176 = fcmp oge float %.01.i156, 0x4022059680000000, !dbg !38
  %s.0.i160 = select i1 %176, float 1.000000e+00, float %.03.i159, !dbg !38
  %177 = bitcast float %s.0.i160 to i32, !dbg !38
  %178 = bitcast float %125 to i32, !dbg !38
  %179 = and i32 %178, -2147483648, !dbg !38
  %180 = or i32 %179, %177, !dbg !38
  %181 = bitcast i32 %180 to float, !dbg !38
  br label %__nv_tanhf.exit173, !dbg !38

__internal_fmad.exit3.i162:                       ; preds = %__nv_tanhf.exit154
  %182 = fmul float %125, %125, !dbg !38
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i163 = icmp eq i32 %183, 0, !dbg !38
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !38
  %185 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i164 = select i1 %.not1.i163, float %185, float %184, !dbg !38
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i165 = icmp eq i32 %186, 0, !dbg !38
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i164, float %182, float 0x3FC10B2820000000) #5, !dbg !38
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i164, float %182, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i166 = select i1 %.not2.i165, float %188, float %187, !dbg !38
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i167 = icmp eq i32 %189, 0, !dbg !38
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i166, float %182, float 0xBFD5553DA0000000) #5, !dbg !38
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i166, float %182, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i168 = select i1 %.not3.i167, float %191, float %190, !dbg !38
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i169 = icmp eq i32 %192, 0, !dbg !38
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i168, float %182, float 0.000000e+00) #5, !dbg !38
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i168, float %182, float 0.000000e+00) #5, !dbg !38
  %.04.i170 = select i1 %.not4.i169, float %194, float %193, !dbg !38
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i171 = icmp eq i32 %195, 0, !dbg !38
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i170, float %125, float %125) #5, !dbg !38
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i170, float %125, float %125) #5, !dbg !38
  %.02.i172 = select i1 %.not5.i171, float %197, float %196, !dbg !38
  br label %__nv_tanhf.exit173, !dbg !38

__nv_tanhf.exit173:                               ; preds = %__internal_fmad.exit1.i157, %__internal_fmad.exit3.i162
  %s.1.i161 = phi float [ %181, %__internal_fmad.exit1.i157 ], [ %.02.i172, %__internal_fmad.exit3.i162 ], !dbg !38
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i174 = icmp eq i32 %198, 0, !dbg !38
  %199 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !38
  %200 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !38
  %.01.i175 = select i1 %.not.i174, float %200, float %199, !dbg !38
  %201 = fcmp ult float %.01.i175, 0x3FE3333340000000, !dbg !38
  br i1 %201, label %__internal_fmad.exit3.i181, label %__internal_fmad.exit1.i176, !dbg !38

__internal_fmad.exit1.i176:                       ; preds = %__nv_tanhf.exit173
  %202 = fmul float %.01.i175, 0x4007154760000000, !dbg !38
  %203 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %202) #5, !dbg !38
  %204 = fadd float %203, 1.000000e+00, !dbg !38
  %205 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %204) #6, !dbg !38, !srcloc !39
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i177 = icmp eq i32 %206, 0, !dbg !38
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i178 = select i1 %.not6.i177, float %208, float %207, !dbg !38
  %209 = fcmp oge float %.01.i175, 0x4022059680000000, !dbg !38
  %s.0.i179 = select i1 %209, float 1.000000e+00, float %.03.i178, !dbg !38
  %210 = bitcast float %s.0.i179 to i32, !dbg !38
  %211 = bitcast float %126 to i32, !dbg !38
  %212 = and i32 %211, -2147483648, !dbg !38
  %213 = or i32 %212, %210, !dbg !38
  %214 = bitcast i32 %213 to float, !dbg !38
  br label %__nv_tanhf.exit192, !dbg !38

__internal_fmad.exit3.i181:                       ; preds = %__nv_tanhf.exit173
  %215 = fmul float %126, %126, !dbg !38
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i182 = icmp eq i32 %216, 0, !dbg !38
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !38
  %218 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i183 = select i1 %.not1.i182, float %218, float %217, !dbg !38
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i184 = icmp eq i32 %219, 0, !dbg !38
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i183, float %215, float 0x3FC10B2820000000) #5, !dbg !38
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i183, float %215, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i185 = select i1 %.not2.i184, float %221, float %220, !dbg !38
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i186 = icmp eq i32 %222, 0, !dbg !38
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i185, float %215, float 0xBFD5553DA0000000) #5, !dbg !38
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i185, float %215, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i187 = select i1 %.not3.i186, float %224, float %223, !dbg !38
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i188 = icmp eq i32 %225, 0, !dbg !38
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i187, float %215, float 0.000000e+00) #5, !dbg !38
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i187, float %215, float 0.000000e+00) #5, !dbg !38
  %.04.i189 = select i1 %.not4.i188, float %227, float %226, !dbg !38
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i190 = icmp eq i32 %228, 0, !dbg !38
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i189, float %126, float %126) #5, !dbg !38
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i189, float %126, float %126) #5, !dbg !38
  %.02.i191 = select i1 %.not5.i190, float %230, float %229, !dbg !38
  br label %__nv_tanhf.exit192, !dbg !38

__nv_tanhf.exit192:                               ; preds = %__internal_fmad.exit1.i176, %__internal_fmad.exit3.i181
  %s.1.i180 = phi float [ %214, %__internal_fmad.exit1.i176 ], [ %.02.i191, %__internal_fmad.exit3.i181 ], !dbg !38
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i193 = icmp eq i32 %231, 0, !dbg !38
  %232 = tail call float @llvm.nvvm.fabs.ftz.f(float %127) #5, !dbg !38
  %233 = tail call float @llvm.nvvm.fabs.f(float %127) #5, !dbg !38
  %.01.i194 = select i1 %.not.i193, float %233, float %232, !dbg !38
  %234 = fcmp ult float %.01.i194, 0x3FE3333340000000, !dbg !38
  br i1 %234, label %__internal_fmad.exit3.i200, label %__internal_fmad.exit1.i195, !dbg !38

__internal_fmad.exit1.i195:                       ; preds = %__nv_tanhf.exit192
  %235 = fmul float %.01.i194, 0x4007154760000000, !dbg !38
  %236 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %235) #5, !dbg !38
  %237 = fadd float %236, 1.000000e+00, !dbg !38
  %238 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %237) #6, !dbg !38, !srcloc !39
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i196 = icmp eq i32 %239, 0, !dbg !38
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i197 = select i1 %.not6.i196, float %241, float %240, !dbg !38
  %242 = fcmp oge float %.01.i194, 0x4022059680000000, !dbg !38
  %s.0.i198 = select i1 %242, float 1.000000e+00, float %.03.i197, !dbg !38
  %243 = bitcast float %s.0.i198 to i32, !dbg !38
  %244 = bitcast float %127 to i32, !dbg !38
  %245 = and i32 %244, -2147483648, !dbg !38
  %246 = or i32 %245, %243, !dbg !38
  %247 = bitcast i32 %246 to float, !dbg !38
  br label %__nv_tanhf.exit211, !dbg !38

__internal_fmad.exit3.i200:                       ; preds = %__nv_tanhf.exit192
  %248 = fmul float %127, %127, !dbg !38
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i201 = icmp eq i32 %249, 0, !dbg !38
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !38
  %251 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i202 = select i1 %.not1.i201, float %251, float %250, !dbg !38
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i203 = icmp eq i32 %252, 0, !dbg !38
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i202, float %248, float 0x3FC10B2820000000) #5, !dbg !38
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i202, float %248, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i204 = select i1 %.not2.i203, float %254, float %253, !dbg !38
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i205 = icmp eq i32 %255, 0, !dbg !38
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i204, float %248, float 0xBFD5553DA0000000) #5, !dbg !38
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i204, float %248, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i206 = select i1 %.not3.i205, float %257, float %256, !dbg !38
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i207 = icmp eq i32 %258, 0, !dbg !38
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i206, float %248, float 0.000000e+00) #5, !dbg !38
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i206, float %248, float 0.000000e+00) #5, !dbg !38
  %.04.i208 = select i1 %.not4.i207, float %260, float %259, !dbg !38
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i209 = icmp eq i32 %261, 0, !dbg !38
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i208, float %127, float %127) #5, !dbg !38
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i208, float %127, float %127) #5, !dbg !38
  %.02.i210 = select i1 %.not5.i209, float %263, float %262, !dbg !38
  br label %__nv_tanhf.exit211, !dbg !38

__nv_tanhf.exit211:                               ; preds = %__internal_fmad.exit1.i195, %__internal_fmad.exit3.i200
  %s.1.i199 = phi float [ %247, %__internal_fmad.exit1.i195 ], [ %.02.i210, %__internal_fmad.exit3.i200 ], !dbg !38
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i212 = icmp eq i32 %264, 0, !dbg !38
  %265 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !38
  %266 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !38
  %.01.i213 = select i1 %.not.i212, float %266, float %265, !dbg !38
  %267 = fcmp ult float %.01.i213, 0x3FE3333340000000, !dbg !38
  br i1 %267, label %__internal_fmad.exit3.i219, label %__internal_fmad.exit1.i214, !dbg !38

__internal_fmad.exit1.i214:                       ; preds = %__nv_tanhf.exit211
  %268 = fmul float %.01.i213, 0x4007154760000000, !dbg !38
  %269 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %268) #5, !dbg !38
  %270 = fadd float %269, 1.000000e+00, !dbg !38
  %271 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %270) #6, !dbg !38, !srcloc !39
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i215 = icmp eq i32 %272, 0, !dbg !38
  %273 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %271, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %274 = tail call float @llvm.nvvm.fma.rn.f(float %271, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i216 = select i1 %.not6.i215, float %274, float %273, !dbg !38
  %275 = fcmp oge float %.01.i213, 0x4022059680000000, !dbg !38
  %s.0.i217 = select i1 %275, float 1.000000e+00, float %.03.i216, !dbg !38
  %276 = bitcast float %s.0.i217 to i32, !dbg !38
  %277 = bitcast float %128 to i32, !dbg !38
  %278 = and i32 %277, -2147483648, !dbg !38
  %279 = or i32 %278, %276, !dbg !38
  %280 = bitcast i32 %279 to float, !dbg !38
  br label %__nv_tanhf.exit230, !dbg !38

__internal_fmad.exit3.i219:                       ; preds = %__nv_tanhf.exit211
  %281 = fmul float %128, %128, !dbg !38
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i220 = icmp eq i32 %282, 0, !dbg !38
  %283 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %281, float 0xBFAAC795C0000000) #5, !dbg !38
  %284 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %281, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i221 = select i1 %.not1.i220, float %284, float %283, !dbg !38
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i222 = icmp eq i32 %285, 0, !dbg !38
  %286 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i221, float %281, float 0x3FC10B2820000000) #5, !dbg !38
  %287 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i221, float %281, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i223 = select i1 %.not2.i222, float %287, float %286, !dbg !38
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i224 = icmp eq i32 %288, 0, !dbg !38
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i223, float %281, float 0xBFD5553DA0000000) #5, !dbg !38
  %290 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i223, float %281, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i225 = select i1 %.not3.i224, float %290, float %289, !dbg !38
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i226 = icmp eq i32 %291, 0, !dbg !38
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i225, float %281, float 0.000000e+00) #5, !dbg !38
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i225, float %281, float 0.000000e+00) #5, !dbg !38
  %.04.i227 = select i1 %.not4.i226, float %293, float %292, !dbg !38
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i228 = icmp eq i32 %294, 0, !dbg !38
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i227, float %128, float %128) #5, !dbg !38
  %296 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i227, float %128, float %128) #5, !dbg !38
  %.02.i229 = select i1 %.not5.i228, float %296, float %295, !dbg !38
  br label %__nv_tanhf.exit230, !dbg !38

__nv_tanhf.exit230:                               ; preds = %__internal_fmad.exit1.i214, %__internal_fmad.exit3.i219
  %s.1.i218 = phi float [ %280, %__internal_fmad.exit1.i214 ], [ %.02.i229, %__internal_fmad.exit3.i219 ], !dbg !38
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i231 = icmp eq i32 %297, 0, !dbg !38
  %298 = tail call float @llvm.nvvm.fabs.ftz.f(float %129) #5, !dbg !38
  %299 = tail call float @llvm.nvvm.fabs.f(float %129) #5, !dbg !38
  %.01.i232 = select i1 %.not.i231, float %299, float %298, !dbg !38
  %300 = fcmp ult float %.01.i232, 0x3FE3333340000000, !dbg !38
  br i1 %300, label %__internal_fmad.exit3.i238, label %__internal_fmad.exit1.i233, !dbg !38

__internal_fmad.exit1.i233:                       ; preds = %__nv_tanhf.exit230
  %301 = fmul float %.01.i232, 0x4007154760000000, !dbg !38
  %302 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %301) #5, !dbg !38
  %303 = fadd float %302, 1.000000e+00, !dbg !38
  %304 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %303) #6, !dbg !38, !srcloc !39
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i234 = icmp eq i32 %305, 0, !dbg !38
  %306 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %304, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %307 = tail call float @llvm.nvvm.fma.rn.f(float %304, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i235 = select i1 %.not6.i234, float %307, float %306, !dbg !38
  %308 = fcmp oge float %.01.i232, 0x4022059680000000, !dbg !38
  %s.0.i236 = select i1 %308, float 1.000000e+00, float %.03.i235, !dbg !38
  %309 = bitcast float %s.0.i236 to i32, !dbg !38
  %310 = bitcast float %129 to i32, !dbg !38
  %311 = and i32 %310, -2147483648, !dbg !38
  %312 = or i32 %311, %309, !dbg !38
  %313 = bitcast i32 %312 to float, !dbg !38
  br label %__nv_tanhf.exit249, !dbg !38

__internal_fmad.exit3.i238:                       ; preds = %__nv_tanhf.exit230
  %314 = fmul float %129, %129, !dbg !38
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i239 = icmp eq i32 %315, 0, !dbg !38
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %314, float 0xBFAAC795C0000000) #5, !dbg !38
  %317 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %314, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i240 = select i1 %.not1.i239, float %317, float %316, !dbg !38
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i241 = icmp eq i32 %318, 0, !dbg !38
  %319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i240, float %314, float 0x3FC10B2820000000) #5, !dbg !38
  %320 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i240, float %314, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i242 = select i1 %.not2.i241, float %320, float %319, !dbg !38
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i243 = icmp eq i32 %321, 0, !dbg !38
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i242, float %314, float 0xBFD5553DA0000000) #5, !dbg !38
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i242, float %314, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i244 = select i1 %.not3.i243, float %323, float %322, !dbg !38
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i245 = icmp eq i32 %324, 0, !dbg !38
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i244, float %314, float 0.000000e+00) #5, !dbg !38
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i244, float %314, float 0.000000e+00) #5, !dbg !38
  %.04.i246 = select i1 %.not4.i245, float %326, float %325, !dbg !38
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i247 = icmp eq i32 %327, 0, !dbg !38
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i246, float %129, float %129) #5, !dbg !38
  %329 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i246, float %129, float %129) #5, !dbg !38
  %.02.i248 = select i1 %.not5.i247, float %329, float %328, !dbg !38
  br label %__nv_tanhf.exit249, !dbg !38

__nv_tanhf.exit249:                               ; preds = %__internal_fmad.exit1.i233, %__internal_fmad.exit3.i238
  %s.1.i237 = phi float [ %313, %__internal_fmad.exit1.i233 ], [ %.02.i248, %__internal_fmad.exit3.i238 ], !dbg !38
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i250 = icmp eq i32 %330, 0, !dbg !38
  %331 = tail call float @llvm.nvvm.fabs.ftz.f(float %130) #5, !dbg !38
  %332 = tail call float @llvm.nvvm.fabs.f(float %130) #5, !dbg !38
  %.01.i251 = select i1 %.not.i250, float %332, float %331, !dbg !38
  %333 = fcmp ult float %.01.i251, 0x3FE3333340000000, !dbg !38
  br i1 %333, label %__internal_fmad.exit3.i257, label %__internal_fmad.exit1.i252, !dbg !38

__internal_fmad.exit1.i252:                       ; preds = %__nv_tanhf.exit249
  %334 = fmul float %.01.i251, 0x4007154760000000, !dbg !38
  %335 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %334) #5, !dbg !38
  %336 = fadd float %335, 1.000000e+00, !dbg !38
  %337 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %336) #6, !dbg !38, !srcloc !39
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i253 = icmp eq i32 %338, 0, !dbg !38
  %339 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %337, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %340 = tail call float @llvm.nvvm.fma.rn.f(float %337, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i254 = select i1 %.not6.i253, float %340, float %339, !dbg !38
  %341 = fcmp oge float %.01.i251, 0x4022059680000000, !dbg !38
  %s.0.i255 = select i1 %341, float 1.000000e+00, float %.03.i254, !dbg !38
  %342 = bitcast float %s.0.i255 to i32, !dbg !38
  %343 = bitcast float %130 to i32, !dbg !38
  %344 = and i32 %343, -2147483648, !dbg !38
  %345 = or i32 %344, %342, !dbg !38
  %346 = bitcast i32 %345 to float, !dbg !38
  br label %__nv_tanhf.exit268, !dbg !38

__internal_fmad.exit3.i257:                       ; preds = %__nv_tanhf.exit249
  %347 = fmul float %130, %130, !dbg !38
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i258 = icmp eq i32 %348, 0, !dbg !38
  %349 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %347, float 0xBFAAC795C0000000) #5, !dbg !38
  %350 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %347, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i259 = select i1 %.not1.i258, float %350, float %349, !dbg !38
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i260 = icmp eq i32 %351, 0, !dbg !38
  %352 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i259, float %347, float 0x3FC10B2820000000) #5, !dbg !38
  %353 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i259, float %347, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i261 = select i1 %.not2.i260, float %353, float %352, !dbg !38
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i262 = icmp eq i32 %354, 0, !dbg !38
  %355 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i261, float %347, float 0xBFD5553DA0000000) #5, !dbg !38
  %356 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i261, float %347, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i263 = select i1 %.not3.i262, float %356, float %355, !dbg !38
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i264 = icmp eq i32 %357, 0, !dbg !38
  %358 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i263, float %347, float 0.000000e+00) #5, !dbg !38
  %359 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i263, float %347, float 0.000000e+00) #5, !dbg !38
  %.04.i265 = select i1 %.not4.i264, float %359, float %358, !dbg !38
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i266 = icmp eq i32 %360, 0, !dbg !38
  %361 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i265, float %130, float %130) #5, !dbg !38
  %362 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i265, float %130, float %130) #5, !dbg !38
  %.02.i267 = select i1 %.not5.i266, float %362, float %361, !dbg !38
  br label %__nv_tanhf.exit268, !dbg !38

__nv_tanhf.exit268:                               ; preds = %__internal_fmad.exit1.i252, %__internal_fmad.exit3.i257
  %s.1.i256 = phi float [ %346, %__internal_fmad.exit1.i252 ], [ %.02.i267, %__internal_fmad.exit3.i257 ], !dbg !38
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i269 = icmp eq i32 %363, 0, !dbg !38
  %364 = tail call float @llvm.nvvm.fabs.ftz.f(float %131) #5, !dbg !38
  %365 = tail call float @llvm.nvvm.fabs.f(float %131) #5, !dbg !38
  %.01.i270 = select i1 %.not.i269, float %365, float %364, !dbg !38
  %366 = fcmp ult float %.01.i270, 0x3FE3333340000000, !dbg !38
  br i1 %366, label %__internal_fmad.exit3.i276, label %__internal_fmad.exit1.i271, !dbg !38

__internal_fmad.exit1.i271:                       ; preds = %__nv_tanhf.exit268
  %367 = fmul float %.01.i270, 0x4007154760000000, !dbg !38
  %368 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %367) #5, !dbg !38
  %369 = fadd float %368, 1.000000e+00, !dbg !38
  %370 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %369) #6, !dbg !38, !srcloc !39
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not6.i272 = icmp eq i32 %371, 0, !dbg !38
  %372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %370, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %373 = tail call float @llvm.nvvm.fma.rn.f(float %370, float -2.000000e+00, float 1.000000e+00) #5, !dbg !38
  %.03.i273 = select i1 %.not6.i272, float %373, float %372, !dbg !38
  %374 = fcmp oge float %.01.i270, 0x4022059680000000, !dbg !38
  %s.0.i274 = select i1 %374, float 1.000000e+00, float %.03.i273, !dbg !38
  %375 = bitcast float %s.0.i274 to i32, !dbg !38
  %376 = bitcast float %131 to i32, !dbg !38
  %377 = and i32 %376, -2147483648, !dbg !38
  %378 = or i32 %377, %375, !dbg !38
  %379 = bitcast i32 %378 to float, !dbg !38
  br label %__nv_tanhf.exit287, !dbg !38

__internal_fmad.exit3.i276:                       ; preds = %__nv_tanhf.exit268
  %380 = fmul float %131, %131, !dbg !38
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not1.i277 = icmp eq i32 %381, 0, !dbg !38
  %382 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %380, float 0xBFAAC795C0000000) #5, !dbg !38
  %383 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %380, float 0xBFAAC795C0000000) #5, !dbg !38
  %.06.i278 = select i1 %.not1.i277, float %383, float %382, !dbg !38
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not2.i279 = icmp eq i32 %384, 0, !dbg !38
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i278, float %380, float 0x3FC10B2820000000) #5, !dbg !38
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i278, float %380, float 0x3FC10B2820000000) #5, !dbg !38
  %.05.i280 = select i1 %.not2.i279, float %386, float %385, !dbg !38
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not3.i281 = icmp eq i32 %387, 0, !dbg !38
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i280, float %380, float 0xBFD5553DA0000000) #5, !dbg !38
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i280, float %380, float 0xBFD5553DA0000000) #5, !dbg !38
  %.0.i282 = select i1 %.not3.i281, float %389, float %388, !dbg !38
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not4.i283 = icmp eq i32 %390, 0, !dbg !38
  %391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i282, float %380, float 0.000000e+00) #5, !dbg !38
  %392 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i282, float %380, float 0.000000e+00) #5, !dbg !38
  %.04.i284 = select i1 %.not4.i283, float %392, float %391, !dbg !38
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not5.i285 = icmp eq i32 %393, 0, !dbg !38
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i284, float %131, float %131) #5, !dbg !38
  %395 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i284, float %131, float %131) #5, !dbg !38
  %.02.i286 = select i1 %.not5.i285, float %395, float %394, !dbg !38
  br label %__nv_tanhf.exit287, !dbg !38

__nv_tanhf.exit287:                               ; preds = %__internal_fmad.exit1.i271, %__internal_fmad.exit3.i276
  %s.1.i275 = phi float [ %379, %__internal_fmad.exit1.i271 ], [ %.02.i286, %__internal_fmad.exit3.i276 ], !dbg !38
  %396 = insertelement <8 x float> poison, float %s.1.i275, i64 0, !dbg !40
  %397 = insertelement <8 x float> %396, float %s.1.i256, i64 1, !dbg !40
  %398 = insertelement <8 x float> %397, float %s.1.i237, i64 2, !dbg !40
  %399 = insertelement <8 x float> %398, float %s.1.i218, i64 3, !dbg !40
  %400 = insertelement <8 x float> %399, float %s.1.i199, i64 4, !dbg !40
  %401 = insertelement <8 x float> %400, float %s.1.i180, i64 5, !dbg !40
  %402 = insertelement <8 x float> %401, float %s.1.i161, i64 6, !dbg !40
  %403 = insertelement <8 x float> %402, float %s.1.i142, i64 7, !dbg !40
  %404 = fadd <8 x float> %403, splat (float 1.000000e+00), !dbg !40
  %405 = fcmp uno <8 x float> %26, zeroinitializer, !dbg !41
  %406 = fcmp uno <8 x float> %25, zeroinitializer, !dbg !45
  %407 = fmul <8 x float> %83, %404, !dbg !47
  %408 = insertelement <8 x i1> poison, i1 %29, i64 0, !dbg !48
  %409 = shufflevector <8 x i1> %408, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !48
  %410 = select <8 x i1> %409, <8 x float> %54, <8 x float> %407, !dbg !48
  %411 = fcmp olt <8 x float> %26, %410, !dbg !49
  %412 = or <8 x i1> %405, %411, !dbg !50
  %413 = select <8 x i1> %412, <8 x float> %26, <8 x float> %410, !dbg !51
  %414 = insertelement <8 x i1> poison, i1 %34, i64 0, !dbg !52
  %415 = shufflevector <8 x i1> %414, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !52
  %416 = select <8 x i1> %415, <8 x float> %413, <8 x float> %26, !dbg !52
  %417 = fcmp ogt <8 x float> %25, %410, !dbg !53
  %418 = or <8 x i1> %406, %417, !dbg !54
  %419 = select <8 x i1> %418, <8 x float> %25, <8 x float> %410, !dbg !55
  %420 = select <8 x i1> %415, <8 x float> %419, <8 x float> %25, !dbg !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4096, !dbg !17
  %421 = icmp samesign ult i64 %indvars.iv, 11264, !dbg !17
  br i1 %421, label %24, label %422, !dbg !17

422:                                              ; preds = %__nv_tanhf.exit287
  %423 = lshr i32 %11, 5, !dbg !11
  %424 = and i32 %11, 1, !dbg !11
  %425 = or disjoint i32 %10, %424, !dbg !12
  %426 = icmp slt i32 %425, 4112, !dbg !13
  %427 = extractelement <8 x float> %416, i64 6, !dbg !57
  %428 = extractelement <8 x float> %416, i64 7, !dbg !57
  %429 = fcmp olt float %428, %427, !dbg !57
  %430 = fcmp uno float %428, 0.000000e+00, !dbg !60
  %431 = or i1 %429, %430, !dbg !61
  %432 = select i1 %431, float %428, float %427, !dbg !62
  %433 = extractelement <8 x float> %416, i64 5, !dbg !57
  %434 = fcmp olt float %432, %433, !dbg !57
  %435 = fcmp uno float %432, 0.000000e+00, !dbg !60
  %436 = or i1 %434, %435, !dbg !61
  %437 = select i1 %436, float %432, float %433, !dbg !62
  %438 = extractelement <8 x float> %416, i64 4, !dbg !57
  %439 = fcmp olt float %437, %438, !dbg !57
  %440 = fcmp uno float %437, 0.000000e+00, !dbg !60
  %441 = or i1 %439, %440, !dbg !61
  %442 = select i1 %441, float %437, float %438, !dbg !62
  %443 = extractelement <8 x float> %416, i64 3, !dbg !57
  %444 = fcmp olt float %442, %443, !dbg !57
  %445 = fcmp uno float %442, 0.000000e+00, !dbg !60
  %446 = or i1 %444, %445, !dbg !61
  %447 = select i1 %446, float %442, float %443, !dbg !62
  %448 = extractelement <8 x float> %416, i64 2, !dbg !57
  %449 = fcmp olt float %447, %448, !dbg !57
  %450 = fcmp uno float %447, 0.000000e+00, !dbg !60
  %451 = or i1 %449, %450, !dbg !61
  %452 = select i1 %451, float %447, float %448, !dbg !62
  %453 = extractelement <8 x float> %416, i64 1, !dbg !57
  %454 = fcmp olt float %452, %453, !dbg !57
  %455 = fcmp uno float %452, 0.000000e+00, !dbg !60
  %456 = or i1 %454, %455, !dbg !61
  %457 = select i1 %456, float %452, float %453, !dbg !62
  %458 = extractelement <8 x float> %416, i64 0, !dbg !57
  %459 = fcmp olt float %457, %458, !dbg !57
  %460 = fcmp uno float %457, 0.000000e+00, !dbg !60
  %461 = or i1 %459, %460, !dbg !61
  %462 = select i1 %461, float %457, float %458, !dbg !62
  %463 = bitcast float %462 to i32, !dbg !63
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 16, i32 31), !dbg !63
  %465 = bitcast i32 %464 to float, !dbg !63
  %466 = fcmp olt float %462, %465, !dbg !57
  %467 = fcmp uno float %462, 0.000000e+00, !dbg !60
  %468 = or i1 %467, %466, !dbg !61
  %469 = select i1 %468, float %462, float %465, !dbg !62
  %470 = bitcast float %469 to i32, !dbg !63
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 8, i32 31), !dbg !63
  %472 = bitcast i32 %471 to float, !dbg !63
  %473 = fcmp olt float %469, %472, !dbg !57
  %474 = fcmp uno float %469, 0.000000e+00, !dbg !60
  %475 = or i1 %473, %474, !dbg !61
  %476 = select i1 %475, float %469, float %472, !dbg !62
  %477 = bitcast float %476 to i32, !dbg !63
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 4, i32 31), !dbg !63
  %479 = bitcast i32 %478 to float, !dbg !63
  %480 = fcmp olt float %476, %479, !dbg !57
  %481 = fcmp uno float %476, 0.000000e+00, !dbg !60
  %482 = or i1 %480, %481, !dbg !61
  %483 = select i1 %482, float %476, float %479, !dbg !62
  %484 = bitcast float %483 to i32, !dbg !63
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 2, i32 31), !dbg !63
  %486 = bitcast i32 %485 to float, !dbg !63
  %487 = fcmp olt float %483, %486, !dbg !57
  %488 = fcmp uno float %483, 0.000000e+00, !dbg !60
  %489 = or i1 %487, %488, !dbg !61
  %490 = select i1 %489, float %483, float %486, !dbg !62
  %491 = bitcast float %490 to i32, !dbg !63
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !63
  %493 = bitcast i32 %492 to float, !dbg !63
  %494 = fcmp olt float %490, %493, !dbg !57
  %495 = fcmp uno float %490, 0.000000e+00, !dbg !60
  %496 = or i1 %494, %495, !dbg !61
  %497 = and i32 %423, 15, !dbg !63
  %498 = icmp eq i32 %13, 0, !dbg !63
  %499 = shl nuw nsw i32 %.lobit, 4, !dbg !63
  %500 = or disjoint i32 %499, %497, !dbg !63
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %500, !dbg !63
  %502 = select i1 %496, i32 %491, i32 %492, !dbg !62
  %503 = insertelement <1 x i32> poison, i32 %502, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %503, i1 %498) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %504 = icmp slt i32 %11, 32, !dbg !63
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !63
  %506 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %505, i1 %504) #5, !dbg !63
  %507 = bitcast i32 %506 to float, !dbg !63
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 8, i32 31), !dbg !63
  %509 = bitcast i32 %508 to float, !dbg !63
  %510 = fcmp olt float %507, %509, !dbg !57
  %511 = fcmp uno float %507, 0.000000e+00, !dbg !60
  %512 = or i1 %511, %510, !dbg !61
  %513 = select i1 %512, float %507, float %509, !dbg !62
  %514 = bitcast float %513 to i32, !dbg !63
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 4, i32 31), !dbg !63
  %516 = bitcast i32 %515 to float, !dbg !63
  %517 = fcmp olt float %513, %516, !dbg !57
  %518 = fcmp uno float %513, 0.000000e+00, !dbg !60
  %519 = or i1 %517, %518, !dbg !61
  %520 = select i1 %519, float %513, float %516, !dbg !62
  %521 = bitcast float %520 to i32, !dbg !63
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !63
  %523 = bitcast i32 %522 to float, !dbg !63
  %524 = fcmp olt float %520, %523, !dbg !57
  %525 = fcmp uno float %520, 0.000000e+00, !dbg !60
  %526 = or i1 %524, %525, !dbg !61
  %527 = select i1 %526, float %520, float %523, !dbg !62
  %528 = bitcast float %527 to i32, !dbg !63
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 1, i32 31), !dbg !63
  %530 = bitcast i32 %529 to float, !dbg !63
  %531 = fcmp olt float %527, %530, !dbg !57
  %532 = fcmp uno float %527, 0.000000e+00, !dbg !60
  %533 = or i1 %531, %532, !dbg !61
  %534 = and i32 %11, 15, !dbg !63
  %535 = icmp eq i32 %534, 0, !dbg !63
  %536 = and i1 %504, %535, !dbg !63
  %537 = select i1 %533, i32 %528, i32 %529, !dbg !62
  %538 = insertelement <1 x i32> poison, i32 %537, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %538, i1 %536) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !63
  %540 = load float, ptr addrspace(3) %539, align 16, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %541 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !64
  %542 = bitcast float %540 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %542, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %543 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %424, !dbg !64
  %544 = load float, ptr addrspace(3) %543, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %545 = extractelement <8 x float> %420, i64 6, !dbg !67
  %546 = extractelement <8 x float> %420, i64 7, !dbg !67
  %547 = fcmp ogt float %546, %545, !dbg !67
  %548 = fcmp uno float %546, 0.000000e+00, !dbg !68
  %549 = or i1 %547, %548, !dbg !69
  %550 = select i1 %549, float %546, float %545, !dbg !70
  %551 = extractelement <8 x float> %420, i64 5, !dbg !67
  %552 = fcmp ogt float %550, %551, !dbg !67
  %553 = fcmp uno float %550, 0.000000e+00, !dbg !68
  %554 = or i1 %552, %553, !dbg !69
  %555 = select i1 %554, float %550, float %551, !dbg !70
  %556 = extractelement <8 x float> %420, i64 4, !dbg !67
  %557 = fcmp ogt float %555, %556, !dbg !67
  %558 = fcmp uno float %555, 0.000000e+00, !dbg !68
  %559 = or i1 %557, %558, !dbg !69
  %560 = select i1 %559, float %555, float %556, !dbg !70
  %561 = extractelement <8 x float> %420, i64 3, !dbg !67
  %562 = fcmp ogt float %560, %561, !dbg !67
  %563 = fcmp uno float %560, 0.000000e+00, !dbg !68
  %564 = or i1 %562, %563, !dbg !69
  %565 = select i1 %564, float %560, float %561, !dbg !70
  %566 = extractelement <8 x float> %420, i64 2, !dbg !67
  %567 = fcmp ogt float %565, %566, !dbg !67
  %568 = fcmp uno float %565, 0.000000e+00, !dbg !68
  %569 = or i1 %567, %568, !dbg !69
  %570 = select i1 %569, float %565, float %566, !dbg !70
  %571 = extractelement <8 x float> %420, i64 1, !dbg !67
  %572 = fcmp ogt float %570, %571, !dbg !67
  %573 = fcmp uno float %570, 0.000000e+00, !dbg !68
  %574 = or i1 %572, %573, !dbg !69
  %575 = select i1 %574, float %570, float %571, !dbg !70
  %576 = extractelement <8 x float> %420, i64 0, !dbg !67
  %577 = fcmp ogt float %575, %576, !dbg !67
  %578 = fcmp uno float %575, 0.000000e+00, !dbg !68
  %579 = or i1 %577, %578, !dbg !69
  %580 = select i1 %579, float %575, float %576, !dbg !70
  %581 = bitcast float %580 to i32, !dbg !65
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 16, i32 31), !dbg !65
  %583 = bitcast i32 %582 to float, !dbg !65
  %584 = fcmp ogt float %580, %583, !dbg !67
  %585 = fcmp uno float %580, 0.000000e+00, !dbg !68
  %586 = or i1 %585, %584, !dbg !69
  %587 = select i1 %586, float %580, float %583, !dbg !70
  %588 = bitcast float %587 to i32, !dbg !65
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 8, i32 31), !dbg !65
  %590 = bitcast i32 %589 to float, !dbg !65
  %591 = fcmp ogt float %587, %590, !dbg !67
  %592 = fcmp uno float %587, 0.000000e+00, !dbg !68
  %593 = or i1 %591, %592, !dbg !69
  %594 = select i1 %593, float %587, float %590, !dbg !70
  %595 = bitcast float %594 to i32, !dbg !65
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 4, i32 31), !dbg !65
  %597 = bitcast i32 %596 to float, !dbg !65
  %598 = fcmp ogt float %594, %597, !dbg !67
  %599 = fcmp uno float %594, 0.000000e+00, !dbg !68
  %600 = or i1 %598, %599, !dbg !69
  %601 = select i1 %600, float %594, float %597, !dbg !70
  %602 = bitcast float %601 to i32, !dbg !65
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 2, i32 31), !dbg !65
  %604 = bitcast i32 %603 to float, !dbg !65
  %605 = fcmp ogt float %601, %604, !dbg !67
  %606 = fcmp uno float %601, 0.000000e+00, !dbg !68
  %607 = or i1 %605, %606, !dbg !69
  %608 = select i1 %607, float %601, float %604, !dbg !70
  %609 = bitcast float %608 to i32, !dbg !65
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !65
  %611 = bitcast i32 %610 to float, !dbg !65
  %612 = fcmp ogt float %608, %611, !dbg !67
  %613 = fcmp uno float %608, 0.000000e+00, !dbg !68
  %614 = or i1 %612, %613, !dbg !69
  %615 = select i1 %614, i32 %609, i32 %610, !dbg !70
  %616 = insertelement <1 x i32> poison, i32 %615, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %616, i1 %498) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %617 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %505, i1 %504) #5, !dbg !65
  %618 = bitcast i32 %617 to float, !dbg !65
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !65
  %620 = bitcast i32 %619 to float, !dbg !65
  %621 = fcmp ogt float %618, %620, !dbg !67
  %622 = fcmp uno float %618, 0.000000e+00, !dbg !68
  %623 = or i1 %622, %621, !dbg !69
  %624 = select i1 %623, float %618, float %620, !dbg !70
  %625 = bitcast float %624 to i32, !dbg !65
  %626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %625, i32 4, i32 31), !dbg !65
  %627 = bitcast i32 %626 to float, !dbg !65
  %628 = fcmp ogt float %624, %627, !dbg !67
  %629 = fcmp uno float %624, 0.000000e+00, !dbg !68
  %630 = or i1 %628, %629, !dbg !69
  %631 = select i1 %630, float %624, float %627, !dbg !70
  %632 = bitcast float %631 to i32, !dbg !65
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 2, i32 31), !dbg !65
  %634 = bitcast i32 %633 to float, !dbg !65
  %635 = fcmp ogt float %631, %634, !dbg !67
  %636 = fcmp uno float %631, 0.000000e+00, !dbg !68
  %637 = or i1 %635, %636, !dbg !69
  %638 = select i1 %637, float %631, float %634, !dbg !70
  %639 = bitcast float %638 to i32, !dbg !65
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !65
  %641 = bitcast i32 %640 to float, !dbg !65
  %642 = fcmp ogt float %638, %641, !dbg !67
  %643 = fcmp uno float %638, 0.000000e+00, !dbg !68
  %644 = or i1 %642, %643, !dbg !69
  %645 = select i1 %644, i32 %639, i32 %640, !dbg !70
  %646 = insertelement <1 x i32> poison, i32 %645, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %646, i1 %536) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %647 = load float, ptr addrspace(3) %539, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %648 = bitcast float %647 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %648, i1 true) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %649 = load float, ptr addrspace(3) %543, align 4, !dbg !71
  %650 = sext i32 %425 to i64, !dbg !72
  %651 = getelementptr bfloat, ptr addrspace(1) %2, i64 %650, !dbg !72
  %652 = fptrunc float %544 to bfloat, !dbg !64
  %653 = and i32 %11, 1022, !dbg !64
  %654 = icmp eq i32 %653, 0, !dbg !64
  %655 = bitcast bfloat %652 to i16, !dbg !64
  %656 = and i1 %654, %426, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %655, ptr addrspace(1) %651, i1 %656) #5, !dbg !64
  %657 = getelementptr bfloat, ptr addrspace(1) %3, i64 %650, !dbg !73
  %658 = fptrunc float %649 to bfloat, !dbg !71
  %659 = bitcast bfloat %658 to i16, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %659, ptr addrspace(1) %657, i1 %656) #5, !dbg !71
  %.inv = fcmp oge float %540, 0.000000e+00, !dbg !74
  %660 = select i1 %.inv, float 0.000000e+00, float %540, !dbg !74
  %661 = fsub float 0.000000e+00, %660, !dbg !76
  %.inv2 = fcmp ole float %647, 0.000000e+00, !dbg !77
  %662 = select i1 %.inv2, float 0.000000e+00, float %647, !dbg !77
  %663 = fcmp ogt float %661, %662, !dbg !79
  %664 = fcmp uno float %661, 0.000000e+00, !dbg !81
  %665 = or i1 %664, %663, !dbg !82
  %666 = select i1 %665, float %661, float %662, !dbg !83
  %667 = fmul float %666, 0x3F80204080000000, !dbg !84
  %668 = fcmp ogt float %667, 0x3EE4F8B580000000, !dbg !85
  %669 = fcmp uno float %667, 0.000000e+00, !dbg !87
  %670 = or i1 %668, %669, !dbg !88
  %671 = select i1 %670, float %667, float 0x3EE4F8B580000000, !dbg !89
  %672 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %671), !dbg !90
  %673 = mul i32 %14, 15360, !dbg !91
  br label %674, !dbg !92

674:                                              ; preds = %422, %__nv_tanhf.exit135
  %indvars.iv304 = phi i64 [ 0, %422 ], [ %indvars.iv.next305, %__nv_tanhf.exit135 ]
  %675 = or disjoint i64 %indvars.iv304, %23, !dbg !93
  %676 = icmp samesign ult i64 %675, 15360, !dbg !94
  %677 = icmp samesign ult i64 %675, 3072, !dbg !95
  %678 = trunc nuw nsw i64 %675 to i32, !dbg !96
  %679 = add i32 %19, %678, !dbg !96
  %680 = sext i32 %679 to i64, !dbg !97
  %681 = getelementptr bfloat, ptr addrspace(1) %0, i64 %680, !dbg !97
  %682 = and i1 %15, %676, !dbg !98
  %683 = and i1 %15, %677, !dbg !99
  %684 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %681, i1 %683) #5, !dbg !100
  %685 = extractvalue { i32, i32, i32, i32 } %684, 0, !dbg !100
  %686 = bitcast i32 %685 to <2 x bfloat>, !dbg !100
  %687 = extractvalue { i32, i32, i32, i32 } %684, 1, !dbg !100
  %688 = bitcast i32 %687 to <2 x bfloat>, !dbg !100
  %689 = extractvalue { i32, i32, i32, i32 } %684, 2, !dbg !100
  %690 = bitcast i32 %689 to <2 x bfloat>, !dbg !100
  %691 = extractvalue { i32, i32, i32, i32 } %684, 3, !dbg !100
  %692 = bitcast i32 %691 to <2 x bfloat>, !dbg !100
  %693 = extractelement <2 x bfloat> %686, i64 0, !dbg !100
  %694 = extractelement <2 x bfloat> %686, i64 1, !dbg !100
  %695 = extractelement <2 x bfloat> %688, i64 0, !dbg !100
  %696 = extractelement <2 x bfloat> %688, i64 1, !dbg !100
  %697 = extractelement <2 x bfloat> %690, i64 0, !dbg !100
  %698 = extractelement <2 x bfloat> %690, i64 1, !dbg !100
  %699 = extractelement <2 x bfloat> %692, i64 0, !dbg !100
  %700 = extractelement <2 x bfloat> %692, i64 1, !dbg !100
  %701 = fpext bfloat %693 to float, !dbg !101
  %702 = fpext bfloat %694 to float, !dbg !101
  %703 = fpext bfloat %695 to float, !dbg !101
  %704 = fpext bfloat %696 to float, !dbg !101
  %705 = fpext bfloat %697 to float, !dbg !101
  %706 = fpext bfloat %698 to float, !dbg !101
  %707 = fpext bfloat %699 to float, !dbg !101
  %708 = fpext bfloat %700 to float, !dbg !101
  %709 = icmp samesign ugt i64 %675, 3071, !dbg !102
  %710 = add i32 %21, %678, !dbg !103
  %711 = trunc nuw nsw i64 %indvars.iv304 to i32, !dbg !103
  %712 = add i32 %22, %711, !dbg !103
  %713 = sext i32 %710 to i64, !dbg !104
  %714 = getelementptr float, ptr addrspace(1) %1, i64 %713, !dbg !104
  %715 = sext i32 %712 to i64, !dbg !104
  %716 = getelementptr float, ptr addrspace(1) %1, i64 %715, !dbg !104
  %717 = and i1 %709, %682, !dbg !105
  %718 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %714, i1 %717) #5, !dbg !106
  %719 = extractvalue { i32, i32, i32, i32 } %718, 0, !dbg !106
  %720 = extractvalue { i32, i32, i32, i32 } %718, 1, !dbg !106
  %721 = extractvalue { i32, i32, i32, i32 } %718, 2, !dbg !106
  %722 = extractvalue { i32, i32, i32, i32 } %718, 3, !dbg !106
  %723 = bitcast i32 %719 to float, !dbg !106
  %724 = bitcast i32 %720 to float, !dbg !106
  %725 = bitcast i32 %721 to float, !dbg !106
  %726 = bitcast i32 %722 to float, !dbg !106
  %727 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %716, i1 %717) #5, !dbg !106
  %728 = extractvalue { i32, i32, i32, i32 } %727, 0, !dbg !106
  %729 = extractvalue { i32, i32, i32, i32 } %727, 1, !dbg !106
  %730 = extractvalue { i32, i32, i32, i32 } %727, 2, !dbg !106
  %731 = extractvalue { i32, i32, i32, i32 } %727, 3, !dbg !106
  %732 = bitcast i32 %728 to float, !dbg !106
  %733 = bitcast i32 %729 to float, !dbg !106
  %734 = bitcast i32 %730 to float, !dbg !106
  %735 = bitcast i32 %731 to float, !dbg !106
  %736 = fmul float %723, 5.000000e-01, !dbg !107
  %737 = fmul float %724, 5.000000e-01, !dbg !107
  %738 = fmul float %725, 5.000000e-01, !dbg !107
  %739 = fmul float %726, 5.000000e-01, !dbg !107
  %740 = fmul float %732, 5.000000e-01, !dbg !107
  %741 = fmul float %733, 5.000000e-01, !dbg !107
  %742 = fmul float %734, 5.000000e-01, !dbg !107
  %743 = fmul float %735, 5.000000e-01, !dbg !107
  %744 = fmul float %723, %723, !dbg !108
  %745 = fmul float %724, %724, !dbg !108
  %746 = fmul float %725, %725, !dbg !108
  %747 = fmul float %726, %726, !dbg !108
  %748 = fmul float %732, %732, !dbg !108
  %749 = fmul float %733, %733, !dbg !108
  %750 = fmul float %734, %734, !dbg !108
  %751 = fmul float %735, %735, !dbg !108
  %752 = fmul float %744, %723, !dbg !109
  %753 = fmul float %745, %724, !dbg !109
  %754 = fmul float %746, %725, !dbg !109
  %755 = fmul float %747, %726, !dbg !109
  %756 = fmul float %748, %732, !dbg !109
  %757 = fmul float %749, %733, !dbg !109
  %758 = fmul float %750, %734, !dbg !109
  %759 = fmul float %751, %735, !dbg !109
  %760 = fmul float %752, 0x3FA6E4E260000000, !dbg !110
  %761 = fmul float %753, 0x3FA6E4E260000000, !dbg !110
  %762 = fmul float %754, 0x3FA6E4E260000000, !dbg !110
  %763 = fmul float %755, 0x3FA6E4E260000000, !dbg !110
  %764 = fmul float %756, 0x3FA6E4E260000000, !dbg !110
  %765 = fmul float %757, 0x3FA6E4E260000000, !dbg !110
  %766 = fmul float %758, 0x3FA6E4E260000000, !dbg !110
  %767 = fmul float %759, 0x3FA6E4E260000000, !dbg !110
  %768 = fadd float %760, %723, !dbg !111
  %769 = fadd float %761, %724, !dbg !111
  %770 = fadd float %762, %725, !dbg !111
  %771 = fadd float %763, %726, !dbg !111
  %772 = fadd float %764, %732, !dbg !111
  %773 = fadd float %765, %733, !dbg !111
  %774 = fadd float %766, %734, !dbg !111
  %775 = fadd float %767, %735, !dbg !111
  %776 = fmul float %768, 0x3FE9884540000000, !dbg !112
  %777 = fmul float %769, 0x3FE9884540000000, !dbg !112
  %778 = fmul float %770, 0x3FE9884540000000, !dbg !112
  %779 = fmul float %771, 0x3FE9884540000000, !dbg !112
  %780 = fmul float %772, 0x3FE9884540000000, !dbg !112
  %781 = fmul float %773, 0x3FE9884540000000, !dbg !112
  %782 = fmul float %774, 0x3FE9884540000000, !dbg !112
  %783 = fmul float %775, 0x3FE9884540000000, !dbg !112
  %784 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i = icmp eq i32 %784, 0, !dbg !113
  %785 = tail call float @llvm.nvvm.fabs.ftz.f(float %776) #5, !dbg !113
  %786 = tail call float @llvm.nvvm.fabs.f(float %776) #5, !dbg !113
  %.01.i = select i1 %.not.i, float %786, float %785, !dbg !113
  %787 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !113
  br i1 %787, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !113

__internal_fmad.exit1.i:                          ; preds = %674
  %788 = fmul float %.01.i, 0x4007154760000000, !dbg !113
  %789 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %788) #5, !dbg !113
  %790 = fadd float %789, 1.000000e+00, !dbg !113
  %791 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %790) #6, !dbg !113, !srcloc !39
  %792 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i = icmp eq i32 %792, 0, !dbg !113
  %793 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %791, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %794 = tail call float @llvm.nvvm.fma.rn.f(float %791, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i = select i1 %.not6.i, float %794, float %793, !dbg !113
  %795 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !113
  %s.0.i = select i1 %795, float 1.000000e+00, float %.03.i, !dbg !113
  %796 = bitcast float %s.0.i to i32, !dbg !113
  %797 = bitcast float %776 to i32, !dbg !113
  %798 = and i32 %797, -2147483648, !dbg !113
  %799 = or i32 %798, %796, !dbg !113
  %800 = bitcast i32 %799 to float, !dbg !113
  br label %__nv_tanhf.exit, !dbg !113

__internal_fmad.exit3.i:                          ; preds = %674
  %801 = fmul float %776, %776, !dbg !113
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i = icmp eq i32 %802, 0, !dbg !113
  %803 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %801, float 0xBFAAC795C0000000) #5, !dbg !113
  %804 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %801, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i = select i1 %.not1.i, float %804, float %803, !dbg !113
  %805 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i = icmp eq i32 %805, 0, !dbg !113
  %806 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %801, float 0x3FC10B2820000000) #5, !dbg !113
  %807 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %801, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i = select i1 %.not2.i, float %807, float %806, !dbg !113
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i = icmp eq i32 %808, 0, !dbg !113
  %809 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %801, float 0xBFD5553DA0000000) #5, !dbg !113
  %810 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %801, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i = select i1 %.not3.i, float %810, float %809, !dbg !113
  %811 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i = icmp eq i32 %811, 0, !dbg !113
  %812 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %801, float 0.000000e+00) #5, !dbg !113
  %813 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %801, float 0.000000e+00) #5, !dbg !113
  %.04.i = select i1 %.not4.i, float %813, float %812, !dbg !113
  %814 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i = icmp eq i32 %814, 0, !dbg !113
  %815 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %776, float %776) #5, !dbg !113
  %816 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %776, float %776) #5, !dbg !113
  %.02.i = select i1 %.not5.i, float %816, float %815, !dbg !113
  br label %__nv_tanhf.exit, !dbg !113

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %800, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !113
  %817 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i3 = icmp eq i32 %817, 0, !dbg !113
  %818 = tail call float @llvm.nvvm.fabs.ftz.f(float %777) #5, !dbg !113
  %819 = tail call float @llvm.nvvm.fabs.f(float %777) #5, !dbg !113
  %.01.i4 = select i1 %.not.i3, float %819, float %818, !dbg !113
  %820 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !113
  br i1 %820, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !113

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %821 = fmul float %.01.i4, 0x4007154760000000, !dbg !113
  %822 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %821) #5, !dbg !113
  %823 = fadd float %822, 1.000000e+00, !dbg !113
  %824 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %823) #6, !dbg !113, !srcloc !39
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i6 = icmp eq i32 %825, 0, !dbg !113
  %826 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %824, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %827 = tail call float @llvm.nvvm.fma.rn.f(float %824, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i7 = select i1 %.not6.i6, float %827, float %826, !dbg !113
  %828 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !113
  %s.0.i8 = select i1 %828, float 1.000000e+00, float %.03.i7, !dbg !113
  %829 = bitcast float %s.0.i8 to i32, !dbg !113
  %830 = bitcast float %777 to i32, !dbg !113
  %831 = and i32 %830, -2147483648, !dbg !113
  %832 = or i32 %831, %829, !dbg !113
  %833 = bitcast i32 %832 to float, !dbg !113
  br label %__nv_tanhf.exit21, !dbg !113

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %834 = fmul float %777, %777, !dbg !113
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i11 = icmp eq i32 %835, 0, !dbg !113
  %836 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %834, float 0xBFAAC795C0000000) #5, !dbg !113
  %837 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %834, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i12 = select i1 %.not1.i11, float %837, float %836, !dbg !113
  %838 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i13 = icmp eq i32 %838, 0, !dbg !113
  %839 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %834, float 0x3FC10B2820000000) #5, !dbg !113
  %840 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %834, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i14 = select i1 %.not2.i13, float %840, float %839, !dbg !113
  %841 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i15 = icmp eq i32 %841, 0, !dbg !113
  %842 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %834, float 0xBFD5553DA0000000) #5, !dbg !113
  %843 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %834, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i16 = select i1 %.not3.i15, float %843, float %842, !dbg !113
  %844 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i17 = icmp eq i32 %844, 0, !dbg !113
  %845 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %834, float 0.000000e+00) #5, !dbg !113
  %846 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %834, float 0.000000e+00) #5, !dbg !113
  %.04.i18 = select i1 %.not4.i17, float %846, float %845, !dbg !113
  %847 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i19 = icmp eq i32 %847, 0, !dbg !113
  %848 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %777, float %777) #5, !dbg !113
  %849 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %777, float %777) #5, !dbg !113
  %.02.i20 = select i1 %.not5.i19, float %849, float %848, !dbg !113
  br label %__nv_tanhf.exit21, !dbg !113

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %833, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !113
  %850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i22 = icmp eq i32 %850, 0, !dbg !113
  %851 = tail call float @llvm.nvvm.fabs.ftz.f(float %778) #5, !dbg !113
  %852 = tail call float @llvm.nvvm.fabs.f(float %778) #5, !dbg !113
  %.01.i23 = select i1 %.not.i22, float %852, float %851, !dbg !113
  %853 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !113
  br i1 %853, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !113

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %854 = fmul float %.01.i23, 0x4007154760000000, !dbg !113
  %855 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %854) #5, !dbg !113
  %856 = fadd float %855, 1.000000e+00, !dbg !113
  %857 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %856) #6, !dbg !113, !srcloc !39
  %858 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i25 = icmp eq i32 %858, 0, !dbg !113
  %859 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %857, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %860 = tail call float @llvm.nvvm.fma.rn.f(float %857, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i26 = select i1 %.not6.i25, float %860, float %859, !dbg !113
  %861 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !113
  %s.0.i27 = select i1 %861, float 1.000000e+00, float %.03.i26, !dbg !113
  %862 = bitcast float %s.0.i27 to i32, !dbg !113
  %863 = bitcast float %778 to i32, !dbg !113
  %864 = and i32 %863, -2147483648, !dbg !113
  %865 = or i32 %864, %862, !dbg !113
  %866 = bitcast i32 %865 to float, !dbg !113
  br label %__nv_tanhf.exit40, !dbg !113

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %867 = fmul float %778, %778, !dbg !113
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i30 = icmp eq i32 %868, 0, !dbg !113
  %869 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %867, float 0xBFAAC795C0000000) #5, !dbg !113
  %870 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %867, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i31 = select i1 %.not1.i30, float %870, float %869, !dbg !113
  %871 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i32 = icmp eq i32 %871, 0, !dbg !113
  %872 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %867, float 0x3FC10B2820000000) #5, !dbg !113
  %873 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %867, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i33 = select i1 %.not2.i32, float %873, float %872, !dbg !113
  %874 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i34 = icmp eq i32 %874, 0, !dbg !113
  %875 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %867, float 0xBFD5553DA0000000) #5, !dbg !113
  %876 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %867, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i35 = select i1 %.not3.i34, float %876, float %875, !dbg !113
  %877 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i36 = icmp eq i32 %877, 0, !dbg !113
  %878 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %867, float 0.000000e+00) #5, !dbg !113
  %879 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %867, float 0.000000e+00) #5, !dbg !113
  %.04.i37 = select i1 %.not4.i36, float %879, float %878, !dbg !113
  %880 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i38 = icmp eq i32 %880, 0, !dbg !113
  %881 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %778, float %778) #5, !dbg !113
  %882 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %778, float %778) #5, !dbg !113
  %.02.i39 = select i1 %.not5.i38, float %882, float %881, !dbg !113
  br label %__nv_tanhf.exit40, !dbg !113

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %866, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !113
  %883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i41 = icmp eq i32 %883, 0, !dbg !113
  %884 = tail call float @llvm.nvvm.fabs.ftz.f(float %779) #5, !dbg !113
  %885 = tail call float @llvm.nvvm.fabs.f(float %779) #5, !dbg !113
  %.01.i42 = select i1 %.not.i41, float %885, float %884, !dbg !113
  %886 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !113
  br i1 %886, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !113

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %887 = fmul float %.01.i42, 0x4007154760000000, !dbg !113
  %888 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %887) #5, !dbg !113
  %889 = fadd float %888, 1.000000e+00, !dbg !113
  %890 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %889) #6, !dbg !113, !srcloc !39
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i44 = icmp eq i32 %891, 0, !dbg !113
  %892 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %890, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %893 = tail call float @llvm.nvvm.fma.rn.f(float %890, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i45 = select i1 %.not6.i44, float %893, float %892, !dbg !113
  %894 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !113
  %s.0.i46 = select i1 %894, float 1.000000e+00, float %.03.i45, !dbg !113
  %895 = bitcast float %s.0.i46 to i32, !dbg !113
  %896 = bitcast float %779 to i32, !dbg !113
  %897 = and i32 %896, -2147483648, !dbg !113
  %898 = or i32 %897, %895, !dbg !113
  %899 = bitcast i32 %898 to float, !dbg !113
  br label %__nv_tanhf.exit59, !dbg !113

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %900 = fmul float %779, %779, !dbg !113
  %901 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i49 = icmp eq i32 %901, 0, !dbg !113
  %902 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %900, float 0xBFAAC795C0000000) #5, !dbg !113
  %903 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %900, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i50 = select i1 %.not1.i49, float %903, float %902, !dbg !113
  %904 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i51 = icmp eq i32 %904, 0, !dbg !113
  %905 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %900, float 0x3FC10B2820000000) #5, !dbg !113
  %906 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %900, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i52 = select i1 %.not2.i51, float %906, float %905, !dbg !113
  %907 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i53 = icmp eq i32 %907, 0, !dbg !113
  %908 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %900, float 0xBFD5553DA0000000) #5, !dbg !113
  %909 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %900, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i54 = select i1 %.not3.i53, float %909, float %908, !dbg !113
  %910 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i55 = icmp eq i32 %910, 0, !dbg !113
  %911 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %900, float 0.000000e+00) #5, !dbg !113
  %912 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %900, float 0.000000e+00) #5, !dbg !113
  %.04.i56 = select i1 %.not4.i55, float %912, float %911, !dbg !113
  %913 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i57 = icmp eq i32 %913, 0, !dbg !113
  %914 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %779, float %779) #5, !dbg !113
  %915 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %779, float %779) #5, !dbg !113
  %.02.i58 = select i1 %.not5.i57, float %915, float %914, !dbg !113
  br label %__nv_tanhf.exit59, !dbg !113

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %899, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !113
  %916 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i60 = icmp eq i32 %916, 0, !dbg !113
  %917 = tail call float @llvm.nvvm.fabs.ftz.f(float %780) #5, !dbg !113
  %918 = tail call float @llvm.nvvm.fabs.f(float %780) #5, !dbg !113
  %.01.i61 = select i1 %.not.i60, float %918, float %917, !dbg !113
  %919 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !113
  br i1 %919, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !113

__internal_fmad.exit1.i62:                        ; preds = %__nv_tanhf.exit59
  %920 = fmul float %.01.i61, 0x4007154760000000, !dbg !113
  %921 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %920) #5, !dbg !113
  %922 = fadd float %921, 1.000000e+00, !dbg !113
  %923 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %922) #6, !dbg !113, !srcloc !39
  %924 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i63 = icmp eq i32 %924, 0, !dbg !113
  %925 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %923, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %926 = tail call float @llvm.nvvm.fma.rn.f(float %923, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i64 = select i1 %.not6.i63, float %926, float %925, !dbg !113
  %927 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !113
  %s.0.i65 = select i1 %927, float 1.000000e+00, float %.03.i64, !dbg !113
  %928 = bitcast float %s.0.i65 to i32, !dbg !113
  %929 = bitcast float %780 to i32, !dbg !113
  %930 = and i32 %929, -2147483648, !dbg !113
  %931 = or i32 %930, %928, !dbg !113
  %932 = bitcast i32 %931 to float, !dbg !113
  br label %__nv_tanhf.exit78, !dbg !113

__internal_fmad.exit3.i67:                        ; preds = %__nv_tanhf.exit59
  %933 = fmul float %780, %780, !dbg !113
  %934 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i68 = icmp eq i32 %934, 0, !dbg !113
  %935 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %933, float 0xBFAAC795C0000000) #5, !dbg !113
  %936 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %933, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i69 = select i1 %.not1.i68, float %936, float %935, !dbg !113
  %937 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i70 = icmp eq i32 %937, 0, !dbg !113
  %938 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %933, float 0x3FC10B2820000000) #5, !dbg !113
  %939 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %933, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i71 = select i1 %.not2.i70, float %939, float %938, !dbg !113
  %940 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i72 = icmp eq i32 %940, 0, !dbg !113
  %941 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %933, float 0xBFD5553DA0000000) #5, !dbg !113
  %942 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %933, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i73 = select i1 %.not3.i72, float %942, float %941, !dbg !113
  %943 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i74 = icmp eq i32 %943, 0, !dbg !113
  %944 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %933, float 0.000000e+00) #5, !dbg !113
  %945 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %933, float 0.000000e+00) #5, !dbg !113
  %.04.i75 = select i1 %.not4.i74, float %945, float %944, !dbg !113
  %946 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i76 = icmp eq i32 %946, 0, !dbg !113
  %947 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %780, float %780) #5, !dbg !113
  %948 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %780, float %780) #5, !dbg !113
  %.02.i77 = select i1 %.not5.i76, float %948, float %947, !dbg !113
  br label %__nv_tanhf.exit78, !dbg !113

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %932, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !113
  %949 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i79 = icmp eq i32 %949, 0, !dbg !113
  %950 = tail call float @llvm.nvvm.fabs.ftz.f(float %781) #5, !dbg !113
  %951 = tail call float @llvm.nvvm.fabs.f(float %781) #5, !dbg !113
  %.01.i80 = select i1 %.not.i79, float %951, float %950, !dbg !113
  %952 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !113
  br i1 %952, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !113

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %953 = fmul float %.01.i80, 0x4007154760000000, !dbg !113
  %954 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %953) #5, !dbg !113
  %955 = fadd float %954, 1.000000e+00, !dbg !113
  %956 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %955) #6, !dbg !113, !srcloc !39
  %957 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i82 = icmp eq i32 %957, 0, !dbg !113
  %958 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %956, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %959 = tail call float @llvm.nvvm.fma.rn.f(float %956, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i83 = select i1 %.not6.i82, float %959, float %958, !dbg !113
  %960 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !113
  %s.0.i84 = select i1 %960, float 1.000000e+00, float %.03.i83, !dbg !113
  %961 = bitcast float %s.0.i84 to i32, !dbg !113
  %962 = bitcast float %781 to i32, !dbg !113
  %963 = and i32 %962, -2147483648, !dbg !113
  %964 = or i32 %963, %961, !dbg !113
  %965 = bitcast i32 %964 to float, !dbg !113
  br label %__nv_tanhf.exit97, !dbg !113

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %966 = fmul float %781, %781, !dbg !113
  %967 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i87 = icmp eq i32 %967, 0, !dbg !113
  %968 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %966, float 0xBFAAC795C0000000) #5, !dbg !113
  %969 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %966, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i88 = select i1 %.not1.i87, float %969, float %968, !dbg !113
  %970 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i89 = icmp eq i32 %970, 0, !dbg !113
  %971 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %966, float 0x3FC10B2820000000) #5, !dbg !113
  %972 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %966, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i90 = select i1 %.not2.i89, float %972, float %971, !dbg !113
  %973 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i91 = icmp eq i32 %973, 0, !dbg !113
  %974 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %966, float 0xBFD5553DA0000000) #5, !dbg !113
  %975 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %966, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i92 = select i1 %.not3.i91, float %975, float %974, !dbg !113
  %976 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i93 = icmp eq i32 %976, 0, !dbg !113
  %977 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %966, float 0.000000e+00) #5, !dbg !113
  %978 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %966, float 0.000000e+00) #5, !dbg !113
  %.04.i94 = select i1 %.not4.i93, float %978, float %977, !dbg !113
  %979 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i95 = icmp eq i32 %979, 0, !dbg !113
  %980 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %781, float %781) #5, !dbg !113
  %981 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %781, float %781) #5, !dbg !113
  %.02.i96 = select i1 %.not5.i95, float %981, float %980, !dbg !113
  br label %__nv_tanhf.exit97, !dbg !113

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %965, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !113
  %982 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i98 = icmp eq i32 %982, 0, !dbg !113
  %983 = tail call float @llvm.nvvm.fabs.ftz.f(float %782) #5, !dbg !113
  %984 = tail call float @llvm.nvvm.fabs.f(float %782) #5, !dbg !113
  %.01.i99 = select i1 %.not.i98, float %984, float %983, !dbg !113
  %985 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !113
  br i1 %985, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !113

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %986 = fmul float %.01.i99, 0x4007154760000000, !dbg !113
  %987 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %986) #5, !dbg !113
  %988 = fadd float %987, 1.000000e+00, !dbg !113
  %989 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %988) #6, !dbg !113, !srcloc !39
  %990 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i101 = icmp eq i32 %990, 0, !dbg !113
  %991 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %989, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %992 = tail call float @llvm.nvvm.fma.rn.f(float %989, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i102 = select i1 %.not6.i101, float %992, float %991, !dbg !113
  %993 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !113
  %s.0.i103 = select i1 %993, float 1.000000e+00, float %.03.i102, !dbg !113
  %994 = bitcast float %s.0.i103 to i32, !dbg !113
  %995 = bitcast float %782 to i32, !dbg !113
  %996 = and i32 %995, -2147483648, !dbg !113
  %997 = or i32 %996, %994, !dbg !113
  %998 = bitcast i32 %997 to float, !dbg !113
  br label %__nv_tanhf.exit116, !dbg !113

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %999 = fmul float %782, %782, !dbg !113
  %1000 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i106 = icmp eq i32 %1000, 0, !dbg !113
  %1001 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %999, float 0xBFAAC795C0000000) #5, !dbg !113
  %1002 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %999, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i107 = select i1 %.not1.i106, float %1002, float %1001, !dbg !113
  %1003 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i108 = icmp eq i32 %1003, 0, !dbg !113
  %1004 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %999, float 0x3FC10B2820000000) #5, !dbg !113
  %1005 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %999, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i109 = select i1 %.not2.i108, float %1005, float %1004, !dbg !113
  %1006 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i110 = icmp eq i32 %1006, 0, !dbg !113
  %1007 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %999, float 0xBFD5553DA0000000) #5, !dbg !113
  %1008 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %999, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i111 = select i1 %.not3.i110, float %1008, float %1007, !dbg !113
  %1009 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i112 = icmp eq i32 %1009, 0, !dbg !113
  %1010 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %999, float 0.000000e+00) #5, !dbg !113
  %1011 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %999, float 0.000000e+00) #5, !dbg !113
  %.04.i113 = select i1 %.not4.i112, float %1011, float %1010, !dbg !113
  %1012 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i114 = icmp eq i32 %1012, 0, !dbg !113
  %1013 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %782, float %782) #5, !dbg !113
  %1014 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %782, float %782) #5, !dbg !113
  %.02.i115 = select i1 %.not5.i114, float %1014, float %1013, !dbg !113
  br label %__nv_tanhf.exit116, !dbg !113

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %998, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !113
  %1015 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not.i117 = icmp eq i32 %1015, 0, !dbg !113
  %1016 = tail call float @llvm.nvvm.fabs.ftz.f(float %783) #5, !dbg !113
  %1017 = tail call float @llvm.nvvm.fabs.f(float %783) #5, !dbg !113
  %.01.i118 = select i1 %.not.i117, float %1017, float %1016, !dbg !113
  %1018 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !113
  br i1 %1018, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !113

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %1019 = fmul float %.01.i118, 0x4007154760000000, !dbg !113
  %1020 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1019) #5, !dbg !113
  %1021 = fadd float %1020, 1.000000e+00, !dbg !113
  %1022 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1021) #6, !dbg !113, !srcloc !39
  %1023 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not6.i120 = icmp eq i32 %1023, 0, !dbg !113
  %1024 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1022, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %1025 = tail call float @llvm.nvvm.fma.rn.f(float %1022, float -2.000000e+00, float 1.000000e+00) #5, !dbg !113
  %.03.i121 = select i1 %.not6.i120, float %1025, float %1024, !dbg !113
  %1026 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !113
  %s.0.i122 = select i1 %1026, float 1.000000e+00, float %.03.i121, !dbg !113
  %1027 = bitcast float %s.0.i122 to i32, !dbg !113
  %1028 = bitcast float %783 to i32, !dbg !113
  %1029 = and i32 %1028, -2147483648, !dbg !113
  %1030 = or i32 %1029, %1027, !dbg !113
  %1031 = bitcast i32 %1030 to float, !dbg !113
  br label %__nv_tanhf.exit135, !dbg !113

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %1032 = fmul float %783, %783, !dbg !113
  %1033 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not1.i125 = icmp eq i32 %1033, 0, !dbg !113
  %1034 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1032, float 0xBFAAC795C0000000) #5, !dbg !113
  %1035 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1032, float 0xBFAAC795C0000000) #5, !dbg !113
  %.06.i126 = select i1 %.not1.i125, float %1035, float %1034, !dbg !113
  %1036 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not2.i127 = icmp eq i32 %1036, 0, !dbg !113
  %1037 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %1032, float 0x3FC10B2820000000) #5, !dbg !113
  %1038 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %1032, float 0x3FC10B2820000000) #5, !dbg !113
  %.05.i128 = select i1 %.not2.i127, float %1038, float %1037, !dbg !113
  %1039 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not3.i129 = icmp eq i32 %1039, 0, !dbg !113
  %1040 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %1032, float 0xBFD5553DA0000000) #5, !dbg !113
  %1041 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %1032, float 0xBFD5553DA0000000) #5, !dbg !113
  %.0.i130 = select i1 %.not3.i129, float %1041, float %1040, !dbg !113
  %1042 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not4.i131 = icmp eq i32 %1042, 0, !dbg !113
  %1043 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %1032, float 0.000000e+00) #5, !dbg !113
  %1044 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %1032, float 0.000000e+00) #5, !dbg !113
  %.04.i132 = select i1 %.not4.i131, float %1044, float %1043, !dbg !113
  %1045 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !113
  %.not5.i133 = icmp eq i32 %1045, 0, !dbg !113
  %1046 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %783, float %783) #5, !dbg !113
  %1047 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %783, float %783) #5, !dbg !113
  %.02.i134 = select i1 %.not5.i133, float %1047, float %1046, !dbg !113
  br label %__nv_tanhf.exit135, !dbg !113

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %1031, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !113
  %1048 = fadd float %s.1.i, 1.000000e+00, !dbg !114
  %1049 = fadd float %s.1.i9, 1.000000e+00, !dbg !114
  %1050 = fadd float %s.1.i28, 1.000000e+00, !dbg !114
  %1051 = fadd float %s.1.i47, 1.000000e+00, !dbg !114
  %1052 = fadd float %s.1.i66, 1.000000e+00, !dbg !114
  %1053 = fadd float %s.1.i85, 1.000000e+00, !dbg !114
  %1054 = fadd float %s.1.i104, 1.000000e+00, !dbg !114
  %1055 = fadd float %s.1.i123, 1.000000e+00, !dbg !114
  %1056 = fmul float %736, %1048, !dbg !115
  %1057 = fmul float %737, %1049, !dbg !115
  %1058 = fmul float %738, %1050, !dbg !115
  %1059 = fmul float %739, %1051, !dbg !115
  %1060 = fmul float %740, %1052, !dbg !115
  %1061 = fmul float %741, %1053, !dbg !115
  %1062 = fmul float %742, %1054, !dbg !115
  %1063 = fmul float %743, %1055, !dbg !115
  %1064 = select i1 %677, float %701, float %1056, !dbg !116
  %1065 = select i1 %677, float %702, float %1057, !dbg !116
  %1066 = select i1 %677, float %703, float %1058, !dbg !116
  %1067 = select i1 %677, float %704, float %1059, !dbg !116
  %1068 = select i1 %677, float %705, float %1060, !dbg !116
  %1069 = select i1 %677, float %706, float %1061, !dbg !116
  %1070 = select i1 %677, float %707, float %1062, !dbg !116
  %1071 = select i1 %677, float %708, float %1063, !dbg !116
  %1072 = fmul float %672, %1064, !dbg !117
  %1073 = fmul float %672, %1065, !dbg !117
  %1074 = fmul float %672, %1066, !dbg !117
  %1075 = fmul float %672, %1067, !dbg !117
  %1076 = fmul float %672, %1068, !dbg !117
  %1077 = fmul float %672, %1069, !dbg !117
  %1078 = fmul float %672, %1070, !dbg !117
  %1079 = fmul float %672, %1071, !dbg !117
  %1080 = tail call float @llvm.nvvm.round.f(float %1072) #5, !dbg !118
  %1081 = tail call float @llvm.nvvm.round.f(float %1073) #5, !dbg !118
  %1082 = tail call float @llvm.nvvm.round.f(float %1074) #5, !dbg !118
  %1083 = tail call float @llvm.nvvm.round.f(float %1075) #5, !dbg !118
  %1084 = tail call float @llvm.nvvm.round.f(float %1076) #5, !dbg !118
  %1085 = tail call float @llvm.nvvm.round.f(float %1077) #5, !dbg !118
  %1086 = tail call float @llvm.nvvm.round.f(float %1078) #5, !dbg !118
  %1087 = tail call float @llvm.nvvm.round.f(float %1079) #5, !dbg !118
  %1088 = insertelement <4 x float> poison, float %1080, i64 0, !dbg !119
  %1089 = insertelement <4 x float> %1088, float %1081, i64 1, !dbg !119
  %1090 = insertelement <4 x float> %1089, float %1082, i64 2, !dbg !119
  %1091 = insertelement <4 x float> %1090, float %1083, i64 3, !dbg !119
  %1092 = fcmp ogt <4 x float> %1091, splat (float -1.270000e+02), !dbg !119
  %1093 = fcmp uno <4 x float> %1091, zeroinitializer, !dbg !121
  %1094 = or <4 x i1> %1092, %1093, !dbg !122
  %1095 = select <4 x i1> %1094, <4 x float> %1091, <4 x float> splat (float -1.270000e+02), !dbg !123
  %1096 = fcmp olt <4 x float> %1095, splat (float 1.270000e+02), !dbg !124
  %1097 = fcmp uno <4 x float> %1095, zeroinitializer, !dbg !126
  %1098 = or <4 x i1> %1096, %1097, !dbg !127
  %1099 = fptosi <4 x float> %1095 to <4 x i8>, !dbg !128
  %1100 = select <4 x i1> %1098, <4 x i8> %1099, <4 x i8> splat (i8 127), !dbg !129
  %1101 = insertelement <4 x float> poison, float %1084, i64 0, !dbg !119
  %1102 = insertelement <4 x float> %1101, float %1085, i64 1, !dbg !119
  %1103 = insertelement <4 x float> %1102, float %1086, i64 2, !dbg !119
  %1104 = insertelement <4 x float> %1103, float %1087, i64 3, !dbg !119
  %1105 = fcmp ogt <4 x float> %1104, splat (float -1.270000e+02), !dbg !119
  %1106 = fcmp uno <4 x float> %1104, zeroinitializer, !dbg !121
  %1107 = or <4 x i1> %1105, %1106, !dbg !122
  %1108 = select <4 x i1> %1107, <4 x float> %1104, <4 x float> splat (float -1.270000e+02), !dbg !123
  %1109 = fcmp olt <4 x float> %1108, splat (float 1.270000e+02), !dbg !124
  %1110 = fcmp uno <4 x float> %1108, zeroinitializer, !dbg !126
  %1111 = or <4 x i1> %1109, %1110, !dbg !127
  %1112 = fptosi <4 x float> %1108 to <4 x i8>, !dbg !128
  %1113 = select <4 x i1> %1111, <4 x i8> %1112, <4 x i8> splat (i8 127), !dbg !129
  %1114 = add i32 %673, %678, !dbg !130
  %1115 = sext i32 %1114 to i64, !dbg !131
  %1116 = getelementptr i8, ptr addrspace(1) %4, i64 %1115, !dbg !131
  %1117 = bitcast <4 x i8> %1100 to i32, !dbg !132
  %1118 = bitcast <4 x i8> %1113 to i32, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1117, i32 %1118, ptr addrspace(1) %1116, i1 %682) #5, !dbg !132
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 4096, !dbg !92
  %1119 = icmp samesign ult i64 %indvars.iv304, 11264, !dbg !92
  br i1 %1119, label %674, label %1120, !dbg !92

1120:                                             ; preds = %__nv_tanhf.exit135
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 42, column: 39, scope: !6)
!16 = !DILocation(line: 46, column: 40, scope: !6)
!17 = !DILocation(line: 31, column: 40, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 33, column: 29, scope: !6)
!20 = !DILocation(line: 41, column: 22, scope: !6)
!21 = !DILocation(line: 42, column: 45, scope: !6)
!22 = !DILocation(line: 42, column: 34, scope: !6)
!23 = !DILocation(line: 42, column: 63, scope: !6)
!24 = !DILocation(line: 42, column: 71, scope: !6)
!25 = !DILocation(line: 42, column: 53, scope: !6)
!26 = !DILocation(line: 42, column: 121, scope: !6)
!27 = !DILocation(line: 43, column: 23, scope: !6)
!28 = !DILocation(line: 46, column: 46, scope: !6)
!29 = !DILocation(line: 46, column: 34, scope: !6)
!30 = !DILocation(line: 46, column: 82, scope: !6)
!31 = !DILocation(line: 46, column: 64, scope: !6)
!32 = !DILocation(line: 48, column: 23, scope: !6)
!33 = !DILocation(line: 49, column: 23, scope: !6)
!34 = !DILocation(line: 50, column: 24, scope: !6)
!35 = !DILocation(line: 52, column: 24, scope: !6)
!36 = !DILocation(line: 53, column: 23, scope: !6)
!37 = !DILocation(line: 55, column: 24, scope: !6)
!38 = !DILocation(line: 56, column: 31, scope: !6)
!39 = !{i32 21046}
!40 = !DILocation(line: 58, column: 24, scope: !6)
!41 = !DILocation(line: 96, column: 21, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !6, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 65, column: 47, scope: !6)
!45 = !DILocation(line: 104, column: 21, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 67, column: 47, scope: !6)
!47 = !DILocation(line: 59, column: 24, scope: !6)
!48 = !DILocation(line: 63, column: 37, scope: !6)
!49 = !DILocation(line: 94, column: 15, scope: !42, inlinedAt: !44)
!50 = !DILocation(line: 96, column: 16, scope: !42, inlinedAt: !44)
!51 = !DILocation(line: 97, column: 29, scope: !42, inlinedAt: !44)
!52 = !DILocation(line: 66, column: 50, scope: !6)
!53 = !DILocation(line: 102, column: 15, scope: !42, inlinedAt: !46)
!54 = !DILocation(line: 104, column: 16, scope: !42, inlinedAt: !46)
!55 = !DILocation(line: 105, column: 29, scope: !42, inlinedAt: !46)
!56 = !DILocation(line: 68, column: 50, scope: !6)
!57 = !DILocation(line: 94, column: 15, scope: !58, inlinedAt: !59)
!58 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!59 = !DILocation(line: 69, column: 40, scope: !6)
!60 = !DILocation(line: 96, column: 21, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 96, column: 16, scope: !58, inlinedAt: !59)
!62 = !DILocation(line: 97, column: 29, scope: !58, inlinedAt: !59)
!63 = !DILocation(line: 110, column: 29, scope: !42, inlinedAt: !59)
!64 = !DILocation(line: 71, column: 37, scope: !6)
!65 = !DILocation(line: 115, column: 29, scope: !42, inlinedAt: !66)
!66 = !DILocation(line: 70, column: 40, scope: !6)
!67 = !DILocation(line: 102, column: 15, scope: !58, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 21, scope: !58, inlinedAt: !66)
!69 = !DILocation(line: 104, column: 16, scope: !58, inlinedAt: !66)
!70 = !DILocation(line: 105, column: 29, scope: !58, inlinedAt: !66)
!71 = !DILocation(line: 72, column: 37, scope: !6)
!72 = !DILocation(line: 71, column: 25, scope: !6)
!73 = !DILocation(line: 72, column: 25, scope: !6)
!74 = !DILocation(line: 97, column: 29, scope: !42, inlinedAt: !75)
!75 = !DILocation(line: 107, column: 46, scope: !6)
!76 = !DILocation(line: 108, column: 17, scope: !6)
!77 = !DILocation(line: 105, column: 29, scope: !42, inlinedAt: !78)
!78 = !DILocation(line: 109, column: 46, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !42, inlinedAt: !80)
!80 = !DILocation(line: 110, column: 46, scope: !6)
!81 = !DILocation(line: 104, column: 21, scope: !42, inlinedAt: !80)
!82 = !DILocation(line: 104, column: 16, scope: !42, inlinedAt: !80)
!83 = !DILocation(line: 105, column: 29, scope: !42, inlinedAt: !80)
!84 = !DILocation(line: 112, column: 24, scope: !6)
!85 = !DILocation(line: 102, column: 15, scope: !42, inlinedAt: !86)
!86 = !DILocation(line: 115, column: 46, scope: !6)
!87 = !DILocation(line: 104, column: 21, scope: !42, inlinedAt: !86)
!88 = !DILocation(line: 104, column: 16, scope: !42, inlinedAt: !86)
!89 = !DILocation(line: 105, column: 29, scope: !42, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 25, scope: !6)
!91 = !DILocation(line: 130, column: 42, scope: !6)
!92 = !DILocation(line: 73, column: 40, scope: !6)
!93 = !DILocation(line: 74, column: 31, scope: !6)
!94 = !DILocation(line: 75, column: 29, scope: !6)
!95 = !DILocation(line: 83, column: 24, scope: !6)
!96 = !DILocation(line: 84, column: 46, scope: !6)
!97 = !DILocation(line: 84, column: 35, scope: !6)
!98 = !DILocation(line: 84, column: 64, scope: !6)
!99 = !DILocation(line: 84, column: 72, scope: !6)
!100 = !DILocation(line: 84, column: 54, scope: !6)
!101 = !DILocation(line: 84, column: 123, scope: !6)
!102 = !DILocation(line: 85, column: 25, scope: !6)
!103 = !DILocation(line: 88, column: 47, scope: !6)
!104 = !DILocation(line: 88, column: 35, scope: !6)
!105 = !DILocation(line: 88, column: 83, scope: !6)
!106 = !DILocation(line: 88, column: 65, scope: !6)
!107 = !DILocation(line: 90, column: 24, scope: !6)
!108 = !DILocation(line: 91, column: 24, scope: !6)
!109 = !DILocation(line: 92, column: 24, scope: !6)
!110 = !DILocation(line: 94, column: 24, scope: !6)
!111 = !DILocation(line: 95, column: 24, scope: !6)
!112 = !DILocation(line: 97, column: 24, scope: !6)
!113 = !DILocation(line: 98, column: 31, scope: !6)
!114 = !DILocation(line: 100, column: 24, scope: !6)
!115 = !DILocation(line: 101, column: 24, scope: !6)
!116 = !DILocation(line: 105, column: 39, scope: !6)
!117 = !DILocation(line: 121, column: 24, scope: !6)
!118 = !DILocation(line: 122, column: 36, scope: !6)
!119 = !DILocation(line: 102, column: 15, scope: !42, inlinedAt: !120)
!120 = !DILocation(line: 125, column: 46, scope: !6)
!121 = !DILocation(line: 104, column: 21, scope: !42, inlinedAt: !120)
!122 = !DILocation(line: 104, column: 16, scope: !42, inlinedAt: !120)
!123 = !DILocation(line: 105, column: 29, scope: !42, inlinedAt: !120)
!124 = !DILocation(line: 94, column: 15, scope: !42, inlinedAt: !125)
!125 = !DILocation(line: 127, column: 46, scope: !6)
!126 = !DILocation(line: 96, column: 21, scope: !42, inlinedAt: !125)
!127 = !DILocation(line: 96, column: 16, scope: !42, inlinedAt: !125)
!128 = !DILocation(line: 129, column: 25, scope: !6)
!129 = !DILocation(line: 97, column: 29, scope: !42, inlinedAt: !125)
!130 = !DILocation(line: 130, column: 36, scope: !6)
!131 = !DILocation(line: 130, column: 29, scope: !6)
!132 = !DILocation(line: 130, column: 54, scope: !6)
!133 = !DILocation(line: 73, column: 4, scope: !6)
