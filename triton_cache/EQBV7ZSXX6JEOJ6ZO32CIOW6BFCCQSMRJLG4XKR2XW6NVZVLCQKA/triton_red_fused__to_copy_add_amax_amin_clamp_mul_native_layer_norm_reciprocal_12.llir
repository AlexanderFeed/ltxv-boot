; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 128, !dbg !11
  %.lobit = lshr exact i32 %19, 7, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 512, !dbg !13
  %23 = icmp slt i32 %17, 512, !dbg !13
  %24 = shl i32 %18, 1, !dbg !14
  %25 = and i32 %24, 254, !dbg !14
  %26 = and i32 %18, 255, !dbg !14
  %27 = sext i32 %21 to i64, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !15
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %22) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %22) #5, !dbg !16
  %31 = bitcast i16 %30 to bfloat, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !17
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %22) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %22) #5, !dbg !18
  %35 = bitcast i16 %34 to bfloat, !dbg !18
  %36 = mul i32 %21, 3072, !dbg !19
  %.inv = fcmp oge bfloat %31, 0xR0000, !dbg !20
  %37 = select i1 %.inv, bfloat 0xR0000, bfloat %31, !dbg !20
  %38 = fpext bfloat %37 to float, !dbg !20
  %39 = fsub float 0.000000e+00, %38, !dbg !24
  %.inv4 = fcmp ole bfloat %35, 0xR0000, !dbg !25
  %40 = select i1 %.inv4, bfloat 0xR0000, bfloat %35, !dbg !25
  %41 = fpext bfloat %40 to float, !dbg !25
  %42 = fcmp ogt float %39, %41, !dbg !27
  %43 = fcmp uno float %39, 0.000000e+00, !dbg !29
  %44 = or i1 %43, %42, !dbg !30
  %45 = select i1 %44, float %39, float %41, !dbg !31
  %46 = fmul float %45, 0x3F80204080000000, !dbg !32
  %47 = fcmp ogt float %46, 0x3EE4F8B580000000, !dbg !33
  %48 = fcmp uno float %46, 0.000000e+00, !dbg !35
  %49 = or i1 %47, %48, !dbg !36
  %50 = select i1 %49, float %46, float 0x3EE4F8B580000000, !dbg !37
  %51 = or disjoint i32 %36, %25
  %invariant.op = or disjoint i32 %.lobit, 2, !dbg !38
  %52 = shl i32 %18, 2
  %53 = and i32 %52, 508
  %54 = or disjoint i32 %53, %.lobit
  %55 = and i32 %24, 510
  %56 = lshr exact i32 %53, 1
  %57 = add nuw nsw i32 %56, %54
  %58 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %57
  %.reass = or disjoint i32 %53, %invariant.op
  %59 = lshr i32 %.reass, 1
  %60 = add nuw nsw i32 %59, %.reass
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %60
  %62 = lshr exact i32 %55, 1
  %63 = add nuw nsw i32 %62, %55
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63
  %65 = or disjoint i32 %55, 1
  %66 = add nuw nsw i32 %62, %65
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %57
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %60
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63
  %71 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %66
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 516
  %74 = lshr i32 %24, 7
  %75 = and i32 %74, 2
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %76, i32 %55
  %78 = zext nneg i32 %26 to i64, !dbg !38
  %79 = sext i32 %51 to i64, !dbg !39
  %80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %79, !dbg !39
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %80, i1 %22) #5, !dbg !40
  %extelt.offset10.peel = lshr i32 %81, 16, !dbg !40
  %82 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %83 = trunc i32 %81 to i16, !dbg !41
  %84 = insertelement <1 x i16> poison, i16 %83, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %58, <1 x i16> %84, i1 true) #5, !dbg !41
  %85 = insertelement <1 x i16> poison, i16 %82, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %61, <1 x i16> %85, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %86 = load bfloat, ptr addrspace(3) %64, align 2, !dbg !41
  %87 = load bfloat, ptr addrspace(3) %67, align 2, !dbg !41
  %88 = or disjoint i64 %78, 6144, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !43
  %90 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %89, i1 true) #5, !dbg !44
  %91 = getelementptr bfloat, ptr addrspace(1) %2, i64 %88, !dbg !45
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 true) #5, !dbg !46
  %93 = getelementptr i32, ptr addrspace(1) %3, i64 %79, !dbg !47
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 %22) #5, !dbg !48
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !48
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !48
  %97 = getelementptr bfloat, ptr addrspace(1) %6, i64 %78, !dbg !49
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 true) #5, !dbg !50
  %99 = getelementptr bfloat, ptr addrspace(1) %7, i64 %78, !dbg !51
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 true) #5, !dbg !52
  %101 = sitofp i32 %95 to float, !dbg !53
  %102 = sitofp i32 %96 to float, !dbg !53
  %103 = fmul float %50, %101, !dbg !54
  %104 = fmul float %50, %102, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %105 = bitcast float %103 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %105, i1 true) #5, !dbg !54
  %106 = bitcast float %104 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %69, <1 x i32> %106, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %107 = bitcast i32 %90 to float, !dbg !44
  %108 = bitcast i16 %92 to bfloat, !dbg !46
  %109 = fpext bfloat %108 to float, !dbg !55
  %110 = fadd float %107, %109, !dbg !56
  %111 = load float, ptr addrspace(3) %71, align 4, !dbg !54
  %112 = bitcast i16 %98 to bfloat, !dbg !50
  %113 = fpext bfloat %112 to float, !dbg !57
  %114 = fmul float %111, %113, !dbg !58
  %115 = bitcast i16 %100 to bfloat, !dbg !52
  %116 = fpext bfloat %115 to float, !dbg !59
  %117 = fadd float %114, %116, !dbg !60
  %118 = fmul float %110, %117, !dbg !61
  %119 = fpext bfloat %87 to float, !dbg !41
  %120 = fadd float %118, %119, !dbg !62
  %121 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %122 = fmul float %121, %113, !dbg !58
  %123 = fadd float %122, %116, !dbg !60
  %124 = fmul float %110, %123, !dbg !61
  %125 = fpext bfloat %86 to float, !dbg !41
  %126 = fadd float %124, %125, !dbg !62
  %127 = getelementptr bfloat, ptr addrspace(1) %8, i64 %79, !dbg !63
  %128 = fptrunc float %126 to bfloat, !dbg !64
  %129 = fptrunc float %120 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %130 = bitcast bfloat %128 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %130, i1 true) #5, !dbg !64
  %131 = bitcast bfloat %129 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %131, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %132 = load i32, ptr addrspace(3) %77, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %127, i1 %22) #5, !dbg !64
  %133 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %134 = select i1 %23, float %126, float 0.000000e+00, !dbg !66
  %135 = select i1 %23, float %120, float 0.000000e+00, !dbg !66
  br label %136, !dbg !38

136:                                              ; preds = %.peel.next, %136
  %indvars.iv = phi i64 [ 256, %.peel.next ], [ %indvars.iv.next, %136 ]
  %.pn53 = phi float [ %133, %.peel.next ], [ %208, %136 ]
  %.pn51 = phi float [ %133, %.peel.next ], [ %209, %136 ]
  %137 = phi float [ 0.000000e+00, %.peel.next ], [ %206, %136 ]
  %138 = phi float [ 0.000000e+00, %.peel.next ], [ %207, %136 ]
  %.pn57 = phi float [ %134, %.peel.next ], [ %204, %136 ]
  %.pn55 = phi float [ %135, %.peel.next ], [ %205, %136 ]
  %139 = or disjoint i64 %indvars.iv, %78, !dbg !67
  %140 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !68
  %141 = add i32 %51, %140, !dbg !68
  %142 = sext i32 %141 to i64, !dbg !39
  %143 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !39
  %144 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %143, i1 %22) #5, !dbg !40
  %extelt.offset10 = lshr i32 %144, 16, !dbg !40
  %145 = trunc nuw i32 %extelt.offset10 to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %146 = trunc i32 %144 to i16, !dbg !41
  %147 = insertelement <1 x i16> poison, i16 %146, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %58, <1 x i16> %147, i1 true) #5, !dbg !41
  %148 = insertelement <1 x i16> poison, i16 %145, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %61, <1 x i16> %148, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %149 = load bfloat, ptr addrspace(3) %64, align 2, !dbg !41
  %150 = load bfloat, ptr addrspace(3) %67, align 2, !dbg !41
  %151 = fpext bfloat %149 to float, !dbg !41
  %152 = fpext bfloat %150 to float, !dbg !41
  %153 = add nuw nsw i64 %139, 6144, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !43
  %155 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %154, i1 true) #5, !dbg !44
  %156 = bitcast i32 %155 to float, !dbg !44
  %157 = getelementptr bfloat, ptr addrspace(1) %2, i64 %153, !dbg !45
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %157, i1 true) #5, !dbg !46
  %159 = bitcast i16 %158 to bfloat, !dbg !46
  %160 = fpext bfloat %159 to float, !dbg !55
  %161 = getelementptr i32, ptr addrspace(1) %3, i64 %142, !dbg !47
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %161, i1 %22) #5, !dbg !48
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !48
  %164 = extractvalue { i32, i32 } %162, 1, !dbg !48
  %165 = getelementptr bfloat, ptr addrspace(1) %6, i64 %139, !dbg !49
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 true) #5, !dbg !50
  %167 = bitcast i16 %166 to bfloat, !dbg !50
  %168 = fpext bfloat %167 to float, !dbg !57
  %169 = getelementptr bfloat, ptr addrspace(1) %7, i64 %139, !dbg !51
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #5, !dbg !52
  %171 = bitcast i16 %170 to bfloat, !dbg !52
  %172 = fpext bfloat %171 to float, !dbg !59
  %173 = fadd float %156, %160, !dbg !56
  %174 = sitofp i32 %163 to float, !dbg !53
  %175 = sitofp i32 %164 to float, !dbg !53
  %176 = fmul float %50, %174, !dbg !54
  %177 = fmul float %50, %175, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %178 = bitcast float %176 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %178, i1 true) #5, !dbg !54
  %179 = bitcast float %177 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %69, <1 x i32> %179, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %180 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %181 = load float, ptr addrspace(3) %71, align 4, !dbg !54
  %182 = fmul float %180, %168, !dbg !58
  %183 = fmul float %181, %168, !dbg !58
  %184 = fadd float %182, %172, !dbg !60
  %185 = fadd float %183, %172, !dbg !60
  %186 = fmul float %173, %184, !dbg !61
  %187 = fmul float %173, %185, !dbg !61
  %188 = fadd float %186, %151, !dbg !62
  %189 = fadd float %187, %152, !dbg !62
  %190 = fsub float %188, %.pn57, !dbg !69
  %191 = fadd float %.pn53, 1.000000e+00, !dbg !71
  %192 = tail call float @llvm.nvvm.div.full(float %190, float %191), !dbg !72
  %193 = fadd float %.pn57, %192, !dbg !73
  %194 = fsub float %188, %193, !dbg !74
  %195 = fmul float %190, %194, !dbg !75
  %196 = fadd float %137, %195, !dbg !76
  %197 = fsub float %189, %.pn55, !dbg !69
  %198 = fadd float %.pn51, 1.000000e+00, !dbg !71
  %199 = tail call float @llvm.nvvm.div.full(float %197, float %198), !dbg !72
  %200 = fadd float %.pn55, %199, !dbg !73
  %201 = fsub float %189, %200, !dbg !74
  %202 = fmul float %197, %201, !dbg !75
  %203 = fadd float %138, %202, !dbg !76
  %204 = select i1 %23, float %193, float %.pn57, !dbg !66
  %205 = select i1 %23, float %200, float %.pn55, !dbg !66
  %206 = select i1 %23, float %196, float %137, !dbg !77
  %207 = select i1 %23, float %203, float %138, !dbg !77
  %208 = select i1 %23, float %191, float %.pn53, !dbg !65
  %209 = select i1 %23, float %198, float %.pn51, !dbg !65
  %210 = getelementptr bfloat, ptr addrspace(1) %8, i64 %142, !dbg !63
  %211 = fptrunc float %188 to bfloat, !dbg !64
  %212 = fptrunc float %189 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %213 = bitcast bfloat %211 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %213, i1 true) #5, !dbg !64
  %214 = bitcast bfloat %212 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %214, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %215 = load i32, ptr addrspace(3) %77, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %210, i1 %22) #5, !dbg !64
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !38
  %216 = icmp samesign ult i64 %indvars.iv, 2816, !dbg !38
  br i1 %216, label %136, label %.loopexit, !dbg !38, !llvm.loop !78

.loopexit:                                        ; preds = %136
  %217 = lshr i32 %18, 5, !dbg !11
  %218 = and i32 %18, 1, !dbg !11
  %219 = or disjoint i32 %17, %218, !dbg !12
  %220 = icmp slt i32 %219, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %221 = bitcast float %204 to i32, !dbg !80
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !80
  %223 = bitcast i32 %222 to float, !dbg !80
  %224 = bitcast float %206 to i32, !dbg !80
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !80
  %226 = bitcast i32 %225 to float, !dbg !80
  %227 = bitcast float %208 to i32, !dbg !80
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !80
  %229 = bitcast i32 %228 to float, !dbg !80
  %230 = fsub float %223, %204, !dbg !82
  %231 = fadd float %208, %229, !dbg !84
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !85
  %233 = tail call float @llvm.nvvm.div.full(float %229, float %231), !dbg !86
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !87
  %235 = fmul float %230, %234, !dbg !88
  %236 = fadd float %204, %235, !dbg !89
  %237 = fadd float %206, %226, !dbg !90
  %238 = fmul float %230, %230, !dbg !91
  %239 = fmul float %208, %238, !dbg !92
  %240 = fmul float %239, %234, !dbg !93
  %241 = fadd float %237, %240, !dbg !94
  %242 = bitcast float %236 to i32, !dbg !80
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !80
  %244 = bitcast i32 %243 to float, !dbg !80
  %245 = bitcast float %241 to i32, !dbg !80
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !80
  %247 = bitcast i32 %246 to float, !dbg !80
  %248 = bitcast float %231 to i32, !dbg !80
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !80
  %250 = bitcast i32 %249 to float, !dbg !80
  %251 = fsub float %244, %236, !dbg !82
  %252 = fadd float %231, %250, !dbg !84
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !85
  %254 = tail call float @llvm.nvvm.div.full(float %250, float %252), !dbg !86
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !87
  %256 = fmul float %251, %255, !dbg !88
  %257 = fadd float %236, %256, !dbg !89
  %258 = fadd float %241, %247, !dbg !90
  %259 = fmul float %251, %251, !dbg !91
  %260 = fmul float %231, %259, !dbg !92
  %261 = fmul float %255, %260, !dbg !93
  %262 = fadd float %258, %261, !dbg !94
  %263 = bitcast float %257 to i32, !dbg !80
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !80
  %265 = bitcast i32 %264 to float, !dbg !80
  %266 = bitcast float %262 to i32, !dbg !80
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !80
  %268 = bitcast i32 %267 to float, !dbg !80
  %269 = bitcast float %252 to i32, !dbg !80
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !80
  %271 = bitcast i32 %270 to float, !dbg !80
  %272 = fsub float %265, %257, !dbg !82
  %273 = fadd float %252, %271, !dbg !84
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !85
  %275 = tail call float @llvm.nvvm.div.full(float %271, float %273), !dbg !86
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !87
  %277 = fmul float %272, %276, !dbg !88
  %278 = fadd float %257, %277, !dbg !89
  %279 = fadd float %262, %268, !dbg !90
  %280 = fmul float %272, %272, !dbg !91
  %281 = fmul float %252, %280, !dbg !92
  %282 = fmul float %276, %281, !dbg !93
  %283 = fadd float %279, %282, !dbg !94
  %284 = bitcast float %278 to i32, !dbg !80
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !80
  %286 = bitcast i32 %285 to float, !dbg !80
  %287 = bitcast float %283 to i32, !dbg !80
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !80
  %289 = bitcast i32 %288 to float, !dbg !80
  %290 = bitcast float %273 to i32, !dbg !80
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !80
  %292 = bitcast i32 %291 to float, !dbg !80
  %293 = fsub float %286, %278, !dbg !82
  %294 = fadd float %273, %292, !dbg !84
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !85
  %296 = tail call float @llvm.nvvm.div.full(float %292, float %294), !dbg !86
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !87
  %298 = fmul float %293, %297, !dbg !88
  %299 = fadd float %278, %298, !dbg !89
  %300 = fadd float %283, %289, !dbg !90
  %301 = fmul float %293, %293, !dbg !91
  %302 = fmul float %273, %301, !dbg !92
  %303 = fmul float %297, %302, !dbg !93
  %304 = fadd float %300, %303, !dbg !94
  %305 = bitcast float %299 to i32, !dbg !80
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !80
  %307 = bitcast i32 %306 to float, !dbg !80
  %308 = bitcast float %304 to i32, !dbg !80
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !80
  %310 = bitcast i32 %309 to float, !dbg !80
  %311 = bitcast float %294 to i32, !dbg !80
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !80
  %313 = bitcast i32 %312 to float, !dbg !80
  %314 = fsub float %307, %299, !dbg !82
  %315 = fadd float %294, %313, !dbg !84
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !85
  %317 = tail call float @llvm.nvvm.div.full(float %313, float %315), !dbg !86
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !87
  %319 = fmul float %314, %318, !dbg !88
  %320 = fadd float %299, %319, !dbg !89
  %321 = fadd float %304, %310, !dbg !90
  %322 = fmul float %314, %314, !dbg !91
  %323 = fmul float %294, %322, !dbg !92
  %324 = fmul float %318, %323, !dbg !93
  %325 = fadd float %321, %324, !dbg !94
  %326 = bitcast float %205 to i32, !dbg !80
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 16, i32 31), !dbg !80
  %328 = bitcast i32 %327 to float, !dbg !80
  %329 = bitcast float %207 to i32, !dbg !80
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 16, i32 31), !dbg !80
  %331 = bitcast i32 %330 to float, !dbg !80
  %332 = bitcast float %209 to i32, !dbg !80
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 16, i32 31), !dbg !80
  %334 = bitcast i32 %333 to float, !dbg !80
  %335 = fsub float %328, %205, !dbg !82
  %336 = fadd float %209, %334, !dbg !84
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !85
  %338 = tail call float @llvm.nvvm.div.full(float %334, float %336), !dbg !86
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !87
  %340 = fmul float %335, %339, !dbg !88
  %341 = fadd float %205, %340, !dbg !89
  %342 = fadd float %207, %331, !dbg !90
  %343 = fmul float %335, %335, !dbg !91
  %344 = fmul float %209, %343, !dbg !92
  %345 = fmul float %344, %339, !dbg !93
  %346 = fadd float %342, %345, !dbg !94
  %347 = bitcast float %341 to i32, !dbg !80
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 8, i32 31), !dbg !80
  %349 = bitcast i32 %348 to float, !dbg !80
  %350 = bitcast float %346 to i32, !dbg !80
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !80
  %352 = bitcast i32 %351 to float, !dbg !80
  %353 = bitcast float %336 to i32, !dbg !80
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !80
  %355 = bitcast i32 %354 to float, !dbg !80
  %356 = fsub float %349, %341, !dbg !82
  %357 = fadd float %336, %355, !dbg !84
  %358 = fcmp oeq float %357, 0.000000e+00, !dbg !85
  %359 = tail call float @llvm.nvvm.div.full(float %355, float %357), !dbg !86
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !87
  %361 = fmul float %356, %360, !dbg !88
  %362 = fadd float %341, %361, !dbg !89
  %363 = fadd float %346, %352, !dbg !90
  %364 = fmul float %356, %356, !dbg !91
  %365 = fmul float %336, %364, !dbg !92
  %366 = fmul float %360, %365, !dbg !93
  %367 = fadd float %363, %366, !dbg !94
  %368 = bitcast float %362 to i32, !dbg !80
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !80
  %370 = bitcast i32 %369 to float, !dbg !80
  %371 = bitcast float %367 to i32, !dbg !80
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !80
  %373 = bitcast i32 %372 to float, !dbg !80
  %374 = bitcast float %357 to i32, !dbg !80
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 4, i32 31), !dbg !80
  %376 = bitcast i32 %375 to float, !dbg !80
  %377 = fsub float %370, %362, !dbg !82
  %378 = fadd float %357, %376, !dbg !84
  %379 = fcmp oeq float %378, 0.000000e+00, !dbg !85
  %380 = tail call float @llvm.nvvm.div.full(float %376, float %378), !dbg !86
  %381 = select i1 %379, float 0.000000e+00, float %380, !dbg !87
  %382 = fmul float %377, %381, !dbg !88
  %383 = fadd float %362, %382, !dbg !89
  %384 = fadd float %367, %373, !dbg !90
  %385 = fmul float %377, %377, !dbg !91
  %386 = fmul float %357, %385, !dbg !92
  %387 = fmul float %381, %386, !dbg !93
  %388 = fadd float %384, %387, !dbg !94
  %389 = bitcast float %383 to i32, !dbg !80
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 2, i32 31), !dbg !80
  %391 = bitcast i32 %390 to float, !dbg !80
  %392 = bitcast float %388 to i32, !dbg !80
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !80
  %394 = bitcast i32 %393 to float, !dbg !80
  %395 = bitcast float %378 to i32, !dbg !80
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !80
  %397 = bitcast i32 %396 to float, !dbg !80
  %398 = fsub float %391, %383, !dbg !82
  %399 = fadd float %378, %397, !dbg !84
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !85
  %401 = tail call float @llvm.nvvm.div.full(float %397, float %399), !dbg !86
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !87
  %403 = fmul float %398, %402, !dbg !88
  %404 = fadd float %383, %403, !dbg !89
  %405 = fadd float %388, %394, !dbg !90
  %406 = fmul float %398, %398, !dbg !91
  %407 = fmul float %378, %406, !dbg !92
  %408 = fmul float %402, %407, !dbg !93
  %409 = fadd float %405, %408, !dbg !94
  %410 = bitcast float %404 to i32, !dbg !80
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !80
  %412 = bitcast i32 %411 to float, !dbg !80
  %413 = bitcast float %409 to i32, !dbg !80
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !80
  %415 = bitcast i32 %414 to float, !dbg !80
  %416 = bitcast float %399 to i32, !dbg !80
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !80
  %418 = bitcast i32 %417 to float, !dbg !80
  %419 = fsub float %412, %404, !dbg !82
  %420 = fadd float %399, %418, !dbg !84
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !85
  %422 = tail call float @llvm.nvvm.div.full(float %418, float %420), !dbg !86
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !87
  %424 = fmul float %419, %423, !dbg !88
  %425 = fadd float %404, %424, !dbg !89
  %426 = fadd float %409, %415, !dbg !90
  %427 = fmul float %419, %419, !dbg !91
  %428 = fmul float %399, %427, !dbg !92
  %429 = fmul float %423, %428, !dbg !93
  %430 = fadd float %426, %429, !dbg !94
  %431 = and i32 %217, 7, !dbg !80
  %432 = icmp eq i32 %20, 0, !dbg !80
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !80
  %434 = bitcast float %320 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 %432) #5, !dbg !80
  %435 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %431, !dbg !80
  %436 = bitcast float %325 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 %432) #5, !dbg !80
  %437 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %431, !dbg !80
  %438 = bitcast float %315 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 %432) #5, !dbg !80
  %439 = or disjoint i32 %431, 8, !dbg !80
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !80
  %441 = bitcast float %425 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 %432) #5, !dbg !80
  %442 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %439, !dbg !80
  %443 = bitcast float %430 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 %432) #5, !dbg !80
  %444 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %439, !dbg !80
  %445 = bitcast float %420 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %445, i1 %432) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %446 = icmp slt i32 %18, 16, !dbg !80
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !80
  %448 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %446) #5, !dbg !80
  %449 = bitcast i32 %448 to float, !dbg !80
  %450 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !80
  %451 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %450, i1 %446) #5, !dbg !80
  %452 = bitcast i32 %451 to float, !dbg !80
  %453 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !80
  %454 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %453, i1 %446) #5, !dbg !80
  %455 = bitcast i32 %454 to float, !dbg !80
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 4, i32 31), !dbg !80
  %457 = bitcast i32 %456 to float, !dbg !80
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 4, i32 31), !dbg !80
  %459 = bitcast i32 %458 to float, !dbg !80
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 4, i32 31), !dbg !80
  %461 = bitcast i32 %460 to float, !dbg !80
  %462 = fsub float %457, %449, !dbg !82
  %463 = fadd float %455, %461, !dbg !84
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !85
  %465 = tail call float @llvm.nvvm.div.full(float %461, float %463), !dbg !86
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !87
  %467 = fmul float %462, %466, !dbg !88
  %468 = fadd float %467, %449, !dbg !89
  %469 = fadd float %452, %459, !dbg !90
  %470 = fmul float %462, %462, !dbg !91
  %471 = fmul float %470, %455, !dbg !92
  %472 = fmul float %471, %466, !dbg !93
  %473 = fadd float %469, %472, !dbg !94
  %474 = bitcast float %468 to i32, !dbg !80
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 2, i32 31), !dbg !80
  %476 = bitcast i32 %475 to float, !dbg !80
  %477 = bitcast float %473 to i32, !dbg !80
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 2, i32 31), !dbg !80
  %479 = bitcast i32 %478 to float, !dbg !80
  %480 = bitcast float %463 to i32, !dbg !80
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 2, i32 31), !dbg !80
  %482 = bitcast i32 %481 to float, !dbg !80
  %483 = fsub float %476, %468, !dbg !82
  %484 = fadd float %463, %482, !dbg !84
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !85
  %486 = tail call float @llvm.nvvm.div.full(float %482, float %484), !dbg !86
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !87
  %488 = fmul float %483, %487, !dbg !88
  %489 = fadd float %468, %488, !dbg !89
  %490 = fadd float %473, %479, !dbg !90
  %491 = fmul float %483, %483, !dbg !91
  %492 = fmul float %463, %491, !dbg !92
  %493 = fmul float %487, %492, !dbg !93
  %494 = fadd float %490, %493, !dbg !94
  %495 = bitcast float %489 to i32, !dbg !80
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 1, i32 31), !dbg !80
  %497 = bitcast i32 %496 to float, !dbg !80
  %498 = bitcast float %494 to i32, !dbg !80
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 1, i32 31), !dbg !80
  %500 = bitcast i32 %499 to float, !dbg !80
  %501 = bitcast float %484 to i32, !dbg !80
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 1, i32 31), !dbg !80
  %503 = bitcast i32 %502 to float, !dbg !80
  %504 = fsub float %497, %489, !dbg !82
  %505 = fadd float %484, %503, !dbg !84
  %506 = fcmp oeq float %505, 0.000000e+00, !dbg !85
  %507 = tail call float @llvm.nvvm.div.full(float %503, float %505), !dbg !86
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !87
  %509 = fmul float %504, %508, !dbg !88
  %510 = fadd float %489, %509, !dbg !89
  %511 = fadd float %494, %500, !dbg !90
  %512 = fmul float %504, %504, !dbg !91
  %513 = fmul float %484, %512, !dbg !92
  %514 = fmul float %508, %513, !dbg !93
  %515 = fadd float %511, %514, !dbg !94
  %516 = and i32 %18, 7, !dbg !80
  %517 = icmp eq i32 %516, 0, !dbg !80
  %518 = and i1 %446, %517, !dbg !80
  %519 = bitcast float %510 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %519, i1 %518) #5, !dbg !80
  %520 = bitcast float %515 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %520, i1 %518) #5, !dbg !80
  %521 = bitcast float %505 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %521, i1 %518) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %522 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %523 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %524 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %525 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %526 = tail call float @llvm.nvvm.div.full(float %524, float 3.072000e+03), !dbg !95
  %527 = tail call float @llvm.nvvm.div.full(float %525, float 3.072000e+03), !dbg !95
  %528 = fadd float %526, 0x3EB0C6F7A0000000, !dbg !96
  %529 = fadd float %527, 0x3EB0C6F7A0000000, !dbg !96
  %530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i = icmp eq i32 %530, 0, !dbg !97
  br i1 %.not.i, label %533, label %531, !dbg !97

531:                                              ; preds = %.loopexit
  %532 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %528), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

533:                                              ; preds = %.loopexit
  %534 = tail call float @llvm.nvvm.rsqrt.approx.f(float %528), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

__nv_rsqrtf.exit:                                 ; preds = %531, %533
  %.0.i = phi float [ %532, %531 ], [ %534, %533 ], !dbg !97
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i15 = icmp eq i32 %535, 0, !dbg !97
  br i1 %.not.i15, label %538, label %536, !dbg !97

536:                                              ; preds = %__nv_rsqrtf.exit
  %537 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %529), !dbg !97
  br label %__nv_rsqrtf.exit17, !dbg !97

538:                                              ; preds = %__nv_rsqrtf.exit
  %539 = tail call float @llvm.nvvm.rsqrt.approx.f(float %529), !dbg !97
  br label %__nv_rsqrtf.exit17, !dbg !97

__nv_rsqrtf.exit17:                               ; preds = %536, %538
  %.0.i16 = phi float [ %537, %536 ], [ %539, %538 ], !dbg !97
  %540 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %53
  %541 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %540, i32 %54
  %542 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %59
  %543 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %542, i32 %.reass
  %544 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %55
  %545 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %544, i32 %55
  %546 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !98
  %547 = shufflevector <4 x i1> %546, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !98
  %548 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !99
  %549 = insertelement <2 x float> %548, float %.0.i16, i64 1, !dbg !99
  %550 = insertelement <2 x float> poison, float %522, i64 0, !dbg !100
  %551 = insertelement <2 x float> %550, float %523, i64 1, !dbg !100
  %invariant.op89 = or i32 %26, 12288, !dbg !101
  br label %552, !dbg !101

552:                                              ; preds = %__nv_rsqrtf.exit17, %552
  %indvars.iv36 = phi i64 [ 0, %__nv_rsqrtf.exit17 ], [ %indvars.iv.next37, %552 ]
  %553 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit17 ], [ %600, %552 ]
  %554 = or disjoint i64 %indvars.iv36, %78, !dbg !102
  %555 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !103
  %556 = add i32 %51, %555, !dbg !103
  %557 = sext i32 %556 to i64, !dbg !104
  %558 = getelementptr bfloat, ptr addrspace(1) %8, i64 %557, !dbg !104
  %559 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %558, i1 %22) #5, !dbg !105
  %extelt.offset = lshr i32 %559, 16, !dbg !105
  %560 = trunc nuw i32 %extelt.offset to i16, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %561 = trunc i32 %559 to i16, !dbg !99
  %562 = insertelement <1 x i16> poison, i16 %561, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %541, <1 x i16> %562, i1 true) #5, !dbg !99
  %563 = insertelement <1 x i16> poison, i16 %560, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %543, <1 x i16> %563, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %.reass25.reass.reass = or i32 %555, %invariant.op89
  %564 = zext nneg i32 %.reass25.reass.reass to i64, !dbg !106
  %565 = getelementptr float, ptr addrspace(1) %1, i64 %564, !dbg !106
  %566 = getelementptr bfloat, ptr addrspace(1) %2, i64 %564, !dbg !107
  %567 = add nuw nsw i64 %554, 9216, !dbg !108
  %568 = getelementptr float, ptr addrspace(1) %1, i64 %567, !dbg !109
  %569 = getelementptr bfloat, ptr addrspace(1) %2, i64 %567, !dbg !110
  %570 = fcmp uno <4 x float> %553, zeroinitializer, !dbg !111
  %571 = load <2 x bfloat>, ptr addrspace(3) %545, align 2, !dbg !99
  %572 = fpext <2 x bfloat> %571 to <2 x float>, !dbg !113
  %573 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %565, i1 true) #5, !dbg !114
  %574 = bitcast i32 %573 to float, !dbg !114
  %575 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %566, i1 true) #5, !dbg !115
  %576 = bitcast i16 %575 to bfloat, !dbg !115
  %577 = fpext bfloat %576 to float, !dbg !116
  %578 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %568, i1 true) #5, !dbg !117
  %579 = bitcast i32 %578 to float, !dbg !117
  %580 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %569, i1 true) #5, !dbg !118
  %581 = bitcast i16 %580 to bfloat, !dbg !118
  %582 = fpext bfloat %581 to float, !dbg !119
  %583 = fsub <2 x float> %572, %551, !dbg !100
  %584 = fmul <2 x float> %549, %583, !dbg !99
  %585 = fadd float %574, %577, !dbg !120
  %586 = fadd float %585, 1.000000e+00, !dbg !121
  %587 = insertelement <2 x float> poison, float %586, i64 0, !dbg !122
  %588 = shufflevector <2 x float> %587, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !122
  %589 = fmul <2 x float> %584, %588, !dbg !122
  %590 = fadd float %579, %582, !dbg !123
  %591 = insertelement <2 x float> poison, float %590, i64 0, !dbg !124
  %592 = shufflevector <2 x float> %589, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !124
  %593 = shufflevector <2 x float> %591, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !124
  %594 = fadd <4 x float> %592, %593, !dbg !124
  %595 = fcmp ogt <4 x float> %553, %594, !dbg !125
  %596 = fcmp olt <4 x float> %553, %594, !dbg !125
  %597 = shufflevector <4 x i1> %595, <4 x i1> %596, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !125
  %598 = or <4 x i1> %570, %597, !dbg !126
  %599 = select <4 x i1> %598, <4 x float> %553, <4 x float> %594, !dbg !127
  %600 = select <4 x i1> %547, <4 x float> %599, <4 x float> %553, !dbg !98
  %601 = getelementptr bfloat, ptr addrspace(1) %9, i64 %557, !dbg !128
  %602 = extractelement <4 x float> %594, i64 1, !dbg !129
  %603 = fptrunc float %602 to bfloat, !dbg !129
  %604 = extractelement <4 x float> %594, i64 0, !dbg !129
  %605 = fptrunc float %604 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %606 = bitcast bfloat %603 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %606, i1 true) #5, !dbg !129
  %607 = bitcast bfloat %605 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %607, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %608 = load i32, ptr addrspace(3) %77, align 4, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %608, ptr addrspace(1) %601, i1 %22) #5, !dbg !129
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 256, !dbg !101
  %609 = icmp samesign ult i64 %indvars.iv36, 2816, !dbg !101
  br i1 %609, label %552, label %610, !dbg !101

610:                                              ; preds = %552
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %611 = extractelement <4 x float> %600, i64 3, !dbg !130
  %612 = bitcast float %611 to i32, !dbg !130
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 16, i32 31), !dbg !130
  %614 = bitcast i32 %613 to float, !dbg !130
  %615 = fcmp olt float %611, %614, !dbg !132
  %616 = fcmp uno <4 x float> %600, zeroinitializer, !dbg !133
  %617 = extractelement <4 x i1> %616, i64 3, !dbg !135
  %618 = or i1 %617, %615, !dbg !135
  %619 = select i1 %618, float %611, float %614, !dbg !136
  %620 = bitcast float %619 to i32, !dbg !130
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 8, i32 31), !dbg !130
  %622 = bitcast i32 %621 to float, !dbg !130
  %623 = fcmp olt float %619, %622, !dbg !132
  %624 = fcmp uno float %619, 0.000000e+00, !dbg !137
  %625 = or i1 %623, %624, !dbg !135
  %626 = select i1 %625, float %619, float %622, !dbg !136
  %627 = bitcast float %626 to i32, !dbg !130
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 4, i32 31), !dbg !130
  %629 = bitcast i32 %628 to float, !dbg !130
  %630 = fcmp olt float %626, %629, !dbg !132
  %631 = fcmp uno float %626, 0.000000e+00, !dbg !137
  %632 = or i1 %630, %631, !dbg !135
  %633 = select i1 %632, float %626, float %629, !dbg !136
  %634 = bitcast float %633 to i32, !dbg !130
  %635 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %634, i32 2, i32 31), !dbg !130
  %636 = bitcast i32 %635 to float, !dbg !130
  %637 = fcmp olt float %633, %636, !dbg !132
  %638 = fcmp uno float %633, 0.000000e+00, !dbg !137
  %639 = or i1 %637, %638, !dbg !135
  %640 = select i1 %639, float %633, float %636, !dbg !136
  %641 = bitcast float %640 to i32, !dbg !130
  %642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %641, i32 1, i32 31), !dbg !130
  %643 = bitcast i32 %642 to float, !dbg !130
  %644 = fcmp olt float %640, %643, !dbg !132
  %645 = fcmp uno float %640, 0.000000e+00, !dbg !137
  %646 = or i1 %644, %645, !dbg !135
  %647 = extractelement <4 x float> %600, i64 2, !dbg !130
  %648 = bitcast float %647 to i32, !dbg !130
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 16, i32 31), !dbg !130
  %650 = bitcast i32 %649 to float, !dbg !130
  %651 = fcmp olt float %647, %650, !dbg !132
  %652 = extractelement <4 x i1> %616, i64 2, !dbg !135
  %653 = or i1 %652, %651, !dbg !135
  %654 = select i1 %653, float %647, float %650, !dbg !136
  %655 = bitcast float %654 to i32, !dbg !130
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 8, i32 31), !dbg !130
  %657 = bitcast i32 %656 to float, !dbg !130
  %658 = fcmp olt float %654, %657, !dbg !132
  %659 = fcmp uno float %654, 0.000000e+00, !dbg !137
  %660 = or i1 %658, %659, !dbg !135
  %661 = select i1 %660, float %654, float %657, !dbg !136
  %662 = bitcast float %661 to i32, !dbg !130
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 4, i32 31), !dbg !130
  %664 = bitcast i32 %663 to float, !dbg !130
  %665 = fcmp olt float %661, %664, !dbg !132
  %666 = fcmp uno float %661, 0.000000e+00, !dbg !137
  %667 = or i1 %665, %666, !dbg !135
  %668 = select i1 %667, float %661, float %664, !dbg !136
  %669 = bitcast float %668 to i32, !dbg !130
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 2, i32 31), !dbg !130
  %671 = bitcast i32 %670 to float, !dbg !130
  %672 = fcmp olt float %668, %671, !dbg !132
  %673 = fcmp uno float %668, 0.000000e+00, !dbg !137
  %674 = or i1 %672, %673, !dbg !135
  %675 = select i1 %674, float %668, float %671, !dbg !136
  %676 = bitcast float %675 to i32, !dbg !130
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 1, i32 31), !dbg !130
  %678 = bitcast i32 %677 to float, !dbg !130
  %679 = fcmp olt float %675, %678, !dbg !132
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !137
  %681 = or i1 %679, %680, !dbg !135
  %682 = select i1 %646, i32 %641, i32 %642, !dbg !136
  %683 = insertelement <1 x i32> poison, i32 %682, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %683, i1 %432) #5, !dbg !130
  %684 = select i1 %681, i32 %676, i32 %677, !dbg !136
  %685 = insertelement <1 x i32> poison, i32 %684, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %685, i1 %432) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %686 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %446) #5, !dbg !130
  %687 = bitcast i32 %686 to float, !dbg !130
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 4, i32 31), !dbg !130
  %689 = bitcast i32 %688 to float, !dbg !130
  %690 = fcmp olt float %687, %689, !dbg !132
  %691 = fcmp uno float %687, 0.000000e+00, !dbg !137
  %692 = or i1 %691, %690, !dbg !135
  %693 = select i1 %692, float %687, float %689, !dbg !136
  %694 = bitcast float %693 to i32, !dbg !130
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 2, i32 31), !dbg !130
  %696 = bitcast i32 %695 to float, !dbg !130
  %697 = fcmp olt float %693, %696, !dbg !132
  %698 = fcmp uno float %693, 0.000000e+00, !dbg !137
  %699 = or i1 %697, %698, !dbg !135
  %700 = select i1 %699, float %693, float %696, !dbg !136
  %701 = bitcast float %700 to i32, !dbg !130
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 1, i32 31), !dbg !130
  %703 = bitcast i32 %702 to float, !dbg !130
  %704 = fcmp olt float %700, %703, !dbg !132
  %705 = fcmp uno float %700, 0.000000e+00, !dbg !137
  %706 = or i1 %704, %705, !dbg !135
  %707 = select i1 %706, i32 %701, i32 %702, !dbg !136
  %708 = insertelement <1 x i32> poison, i32 %707, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %708, i1 %518) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %709 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !130
  %710 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %711 = bitcast float %709 to i32, !dbg !138
  %712 = bitcast float %710 to i32, !dbg !138
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %711, i32 %712, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %713 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %218, !dbg !138
  %714 = load float, ptr addrspace(3) %713, align 4, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %715 = extractelement <4 x float> %600, i64 1, !dbg !139
  %716 = bitcast float %715 to i32, !dbg !139
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 16, i32 31), !dbg !139
  %718 = bitcast i32 %717 to float, !dbg !139
  %719 = fcmp ogt float %715, %718, !dbg !140
  %720 = extractelement <4 x i1> %616, i64 1, !dbg !141
  %721 = or i1 %720, %719, !dbg !141
  %722 = select i1 %721, float %715, float %718, !dbg !142
  %723 = bitcast float %722 to i32, !dbg !139
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 8, i32 31), !dbg !139
  %725 = bitcast i32 %724 to float, !dbg !139
  %726 = fcmp ogt float %722, %725, !dbg !140
  %727 = fcmp uno float %722, 0.000000e+00, !dbg !133
  %728 = or i1 %726, %727, !dbg !141
  %729 = select i1 %728, float %722, float %725, !dbg !142
  %730 = bitcast float %729 to i32, !dbg !139
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 4, i32 31), !dbg !139
  %732 = bitcast i32 %731 to float, !dbg !139
  %733 = fcmp ogt float %729, %732, !dbg !140
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !133
  %735 = or i1 %733, %734, !dbg !141
  %736 = select i1 %735, float %729, float %732, !dbg !142
  %737 = bitcast float %736 to i32, !dbg !139
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 2, i32 31), !dbg !139
  %739 = bitcast i32 %738 to float, !dbg !139
  %740 = fcmp ogt float %736, %739, !dbg !140
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !133
  %742 = or i1 %740, %741, !dbg !141
  %743 = select i1 %742, float %736, float %739, !dbg !142
  %744 = bitcast float %743 to i32, !dbg !139
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 1, i32 31), !dbg !139
  %746 = bitcast i32 %745 to float, !dbg !139
  %747 = fcmp ogt float %743, %746, !dbg !140
  %748 = fcmp uno float %743, 0.000000e+00, !dbg !133
  %749 = or i1 %747, %748, !dbg !141
  %750 = extractelement <4 x float> %600, i64 0, !dbg !139
  %751 = bitcast float %750 to i32, !dbg !139
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 16, i32 31), !dbg !139
  %753 = bitcast i32 %752 to float, !dbg !139
  %754 = fcmp ogt float %750, %753, !dbg !140
  %755 = extractelement <4 x i1> %616, i64 0, !dbg !141
  %756 = or i1 %755, %754, !dbg !141
  %757 = select i1 %756, float %750, float %753, !dbg !142
  %758 = bitcast float %757 to i32, !dbg !139
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 8, i32 31), !dbg !139
  %760 = bitcast i32 %759 to float, !dbg !139
  %761 = fcmp ogt float %757, %760, !dbg !140
  %762 = fcmp uno float %757, 0.000000e+00, !dbg !133
  %763 = or i1 %761, %762, !dbg !141
  %764 = select i1 %763, float %757, float %760, !dbg !142
  %765 = bitcast float %764 to i32, !dbg !139
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 4, i32 31), !dbg !139
  %767 = bitcast i32 %766 to float, !dbg !139
  %768 = fcmp ogt float %764, %767, !dbg !140
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !133
  %770 = or i1 %768, %769, !dbg !141
  %771 = select i1 %770, float %764, float %767, !dbg !142
  %772 = bitcast float %771 to i32, !dbg !139
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 2, i32 31), !dbg !139
  %774 = bitcast i32 %773 to float, !dbg !139
  %775 = fcmp ogt float %771, %774, !dbg !140
  %776 = fcmp uno float %771, 0.000000e+00, !dbg !133
  %777 = or i1 %775, %776, !dbg !141
  %778 = select i1 %777, float %771, float %774, !dbg !142
  %779 = bitcast float %778 to i32, !dbg !139
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !139
  %781 = bitcast i32 %780 to float, !dbg !139
  %782 = fcmp ogt float %778, %781, !dbg !140
  %783 = fcmp uno float %778, 0.000000e+00, !dbg !133
  %784 = or i1 %782, %783, !dbg !141
  %785 = select i1 %749, i32 %744, i32 %745, !dbg !142
  %786 = insertelement <1 x i32> poison, i32 %785, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %786, i1 %432) #5, !dbg !139
  %787 = select i1 %784, i32 %779, i32 %780, !dbg !142
  %788 = insertelement <1 x i32> poison, i32 %787, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %788, i1 %432) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %789 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %446) #5, !dbg !139
  %790 = bitcast i32 %789 to float, !dbg !139
  %791 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %789, i32 4, i32 31), !dbg !139
  %792 = bitcast i32 %791 to float, !dbg !139
  %793 = fcmp ogt float %790, %792, !dbg !140
  %794 = fcmp uno float %790, 0.000000e+00, !dbg !133
  %795 = or i1 %794, %793, !dbg !141
  %796 = select i1 %795, float %790, float %792, !dbg !142
  %797 = bitcast float %796 to i32, !dbg !139
  %798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %797, i32 2, i32 31), !dbg !139
  %799 = bitcast i32 %798 to float, !dbg !139
  %800 = fcmp ogt float %796, %799, !dbg !140
  %801 = fcmp uno float %796, 0.000000e+00, !dbg !133
  %802 = or i1 %800, %801, !dbg !141
  %803 = select i1 %802, float %796, float %799, !dbg !142
  %804 = bitcast float %803 to i32, !dbg !139
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 1, i32 31), !dbg !139
  %806 = bitcast i32 %805 to float, !dbg !139
  %807 = fcmp ogt float %803, %806, !dbg !140
  %808 = fcmp uno float %803, 0.000000e+00, !dbg !133
  %809 = or i1 %807, %808, !dbg !141
  %810 = select i1 %809, i32 %804, i32 %805, !dbg !142
  %811 = insertelement <1 x i32> poison, i32 %810, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %811, i1 %518) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %812 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !139
  %813 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %814 = bitcast float %812 to i32, !dbg !143
  %815 = bitcast float %813 to i32, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %814, i32 %815, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %816 = load float, ptr addrspace(3) %713, align 4, !dbg !143
  %817 = sext i32 %219 to i64, !dbg !144
  %818 = getelementptr bfloat, ptr addrspace(1) %10, i64 %817, !dbg !144
  %819 = fptrunc float %714 to bfloat, !dbg !138
  %820 = and i32 %18, 254, !dbg !138
  %821 = icmp eq i32 %820, 0, !dbg !138
  %822 = bitcast bfloat %819 to i16, !dbg !138
  %823 = and i1 %821, %220, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %822, ptr addrspace(1) %818, i1 %823) #5, !dbg !138
  %824 = getelementptr bfloat, ptr addrspace(1) %11, i64 %817, !dbg !145
  %825 = fptrunc float %816 to bfloat, !dbg !143
  %826 = bitcast bfloat %825 to i16, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %826, ptr addrspace(1) %824, i1 %823) #5, !dbg !143
  %.inv5 = fcmp oge float %709, 0.000000e+00, !dbg !146
  %827 = select i1 %.inv5, float 0.000000e+00, float %709, !dbg !146
  %.inv6 = fcmp oge float %710, 0.000000e+00, !dbg !146
  %828 = select i1 %.inv6, float 0.000000e+00, float %710, !dbg !146
  %829 = fsub float 0.000000e+00, %827, !dbg !148
  %830 = fsub float 0.000000e+00, %828, !dbg !148
  %.inv7 = fcmp ole float %812, 0.000000e+00, !dbg !149
  %831 = select i1 %.inv7, float 0.000000e+00, float %812, !dbg !149
  %.inv8 = fcmp ole float %813, 0.000000e+00, !dbg !149
  %832 = select i1 %.inv8, float 0.000000e+00, float %813, !dbg !149
  %833 = fcmp ogt float %829, %831, !dbg !151
  %834 = fcmp ogt float %830, %832, !dbg !151
  %835 = fcmp uno float %829, 0.000000e+00, !dbg !153
  %836 = fcmp uno float %830, 0.000000e+00, !dbg !153
  %837 = or i1 %835, %833, !dbg !154
  %838 = or i1 %836, %834, !dbg !154
  %839 = select i1 %837, float %829, float %831, !dbg !155
  %840 = select i1 %838, float %830, float %832, !dbg !155
  %841 = fmul float %839, 0x3F80204080000000, !dbg !156
  %842 = fmul float %840, 0x3F80204080000000, !dbg !156
  %843 = fcmp ogt float %841, 0x3EE4F8B580000000, !dbg !157
  %844 = fcmp ogt float %842, 0x3EE4F8B580000000, !dbg !157
  %845 = fcmp uno float %841, 0.000000e+00, !dbg !159
  %846 = fcmp uno float %842, 0.000000e+00, !dbg !159
  %847 = or i1 %843, %845, !dbg !160
  %848 = or i1 %844, %846, !dbg !160
  %849 = select i1 %847, float %841, float 0x3EE4F8B580000000, !dbg !161
  %850 = select i1 %848, float %842, float 0x3EE4F8B580000000, !dbg !161
  %851 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %849), !dbg !162
  %852 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %850), !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %853 = bitcast float %851 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %853, i1 true) #5, !dbg !163
  %854 = bitcast float %852 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %854, i1 true) #5, !dbg !163
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %855 = lshr exact i32 %19, 4, !dbg !163
  %856 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %855, !dbg !163
  %857 = load float, ptr addrspace(3) %856, align 8, !dbg !163
  br label %858, !dbg !164

858:                                              ; preds = %610, %858
  %indvars.iv38 = phi i64 [ 0, %610 ], [ %indvars.iv.next39, %858 ]
  %859 = trunc nuw nsw i64 %indvars.iv38 to i32, !dbg !165
  %860 = add i32 %51, %859, !dbg !165
  %861 = sext i32 %860 to i64, !dbg !166
  %862 = getelementptr bfloat, ptr addrspace(1) %9, i64 %861, !dbg !166
  %863 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %862, i1 %22) #5, !dbg !167
  %864 = bitcast i32 %863 to <2 x bfloat>, !dbg !167
  %865 = extractelement <2 x bfloat> %864, i64 0, !dbg !167
  %866 = extractelement <2 x bfloat> %864, i64 1, !dbg !167
  %867 = fpext bfloat %865 to float, !dbg !168
  %868 = fpext bfloat %866 to float, !dbg !168
  %869 = fmul float %857, %867, !dbg !163
  %870 = fmul float %857, %868, !dbg !163
  %871 = tail call float @llvm.nvvm.round.f(float %869) #5, !dbg !169
  %872 = tail call float @llvm.nvvm.round.f(float %870) #5, !dbg !169
  %873 = insertelement <2 x float> poison, float %871, i64 0, !dbg !170
  %874 = insertelement <2 x float> %873, float %872, i64 1, !dbg !170
  %875 = fcmp ogt <2 x float> %874, splat (float -1.270000e+02), !dbg !170
  %876 = fcmp uno <2 x float> %874, zeroinitializer, !dbg !172
  %877 = or <2 x i1> %875, %876, !dbg !173
  %878 = select <2 x i1> %877, <2 x float> %874, <2 x float> splat (float -1.270000e+02), !dbg !174
  %879 = fcmp olt <2 x float> %878, splat (float 1.270000e+02), !dbg !175
  %880 = fcmp uno <2 x float> %878, zeroinitializer, !dbg !177
  %881 = or <2 x i1> %879, %880, !dbg !178
  %882 = fptosi <2 x float> %878 to <2 x i8>, !dbg !179
  %883 = select <2 x i1> %881, <2 x i8> %882, <2 x i8> splat (i8 127), !dbg !180
  %884 = getelementptr i8, ptr addrspace(1) %12, i64 %861, !dbg !181
  %885 = bitcast <2 x i8> %883 to i16, !dbg !182
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %885, ptr addrspace(1) %884, i1 %22) #5, !dbg !182
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 256, !dbg !164
  %886 = icmp samesign ult i64 %indvars.iv38, 2816, !dbg !164
  br i1 %886, label %858, label %887, !dbg !164

887:                                              ; preds = %858
  ret void, !dbg !183
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 40, column: 34, scope: !6)
!40 = !DILocation(line: 40, column: 51, scope: !6)
!41 = !DILocation(line: 40, column: 113, scope: !6)
!42 = !DILocation(line: 41, column: 41, scope: !6)
!43 = !DILocation(line: 41, column: 34, scope: !6)
!44 = !DILocation(line: 41, column: 48, scope: !6)
!45 = !DILocation(line: 42, column: 34, scope: !6)
!46 = !DILocation(line: 42, column: 48, scope: !6)
!47 = !DILocation(line: 43, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 51, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 44, column: 42, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 45, column: 42, scope: !6)
!53 = !DILocation(line: 48, column: 23, scope: !6)
!54 = !DILocation(line: 60, column: 23, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 47, column: 22, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 62, column: 24, scope: !6)
!61 = !DILocation(line: 63, column: 23, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 73, column: 29, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 72, column: 68, scope: !6)
!66 = !DILocation(line: 70, column: 64, scope: !6)
!67 = !DILocation(line: 35, column: 31, scope: !6)
!68 = !DILocation(line: 40, column: 41, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 68, column: 55, scope: !6)
!71 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !70)
!72 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !70)
!73 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !70)
!74 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !70)
!75 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !70)
!76 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !70)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = distinct !{!78, !79}
!79 = !{!"llvm.loop.peeled.count", i32 1}
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 112, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 90, column: 35, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !112)
!112 = !DILocation(line: 111, column: 47, scope: !6)
!113 = !DILocation(line: 86, column: 115, scope: !6)
!114 = !DILocation(line: 87, column: 50, scope: !6)
!115 = !DILocation(line: 88, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 89, column: 49, scope: !6)
!118 = !DILocation(line: 90, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 102, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 103, column: 24, scope: !6)
!122 = !DILocation(line: 104, column: 24, scope: !6)
!123 = !DILocation(line: 106, column: 24, scope: !6)
!124 = !DILocation(line: 107, column: 24, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !112)
!126 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !112)
!127 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !112)
!128 = !DILocation(line: 113, column: 29, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !131)
!131 = !DILocation(line: 114, column: 40, scope: !6)
!132 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !134)
!134 = !DILocation(line: 115, column: 40, scope: !6)
!135 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !131)
!136 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !131)
!137 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !131)
!138 = !DILocation(line: 116, column: 37, scope: !6)
!139 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !134)
!140 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !134)
!141 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !134)
!142 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !134)
!143 = !DILocation(line: 117, column: 37, scope: !6)
!144 = !DILocation(line: 116, column: 25, scope: !6)
!145 = !DILocation(line: 117, column: 25, scope: !6)
!146 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !147)
!147 = !DILocation(line: 126, column: 46, scope: !6)
!148 = !DILocation(line: 127, column: 17, scope: !6)
!149 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !150)
!150 = !DILocation(line: 128, column: 46, scope: !6)
!151 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !152)
!152 = !DILocation(line: 129, column: 46, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !152)
!154 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !152)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !152)
!156 = !DILocation(line: 131, column: 24, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 134, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 137, column: 25, scope: !6)
!163 = !DILocation(line: 140, column: 24, scope: !6)
!164 = !DILocation(line: 118, column: 40, scope: !6)
!165 = !DILocation(line: 124, column: 43, scope: !6)
!166 = !DILocation(line: 124, column: 36, scope: !6)
!167 = !DILocation(line: 124, column: 53, scope: !6)
!168 = !DILocation(line: 124, column: 115, scope: !6)
!169 = !DILocation(line: 141, column: 36, scope: !6)
!170 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !171)
!171 = !DILocation(line: 144, column: 46, scope: !6)
!172 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !171)
!173 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !171)
!174 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !171)
!175 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !176)
!176 = !DILocation(line: 146, column: 46, scope: !6)
!177 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !176)
!178 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !176)
!179 = !DILocation(line: 148, column: 25, scope: !6)
!180 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !176)
!181 = !DILocation(line: 149, column: 29, scope: !6)
!182 = !DILocation(line: 149, column: 53, scope: !6)
!183 = !DILocation(line: 118, column: 4, scope: !6)
