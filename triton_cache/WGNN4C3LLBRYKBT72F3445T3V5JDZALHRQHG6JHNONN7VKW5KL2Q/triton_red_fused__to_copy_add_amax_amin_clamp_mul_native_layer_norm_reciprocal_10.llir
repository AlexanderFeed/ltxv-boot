; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 7, !dbg !11
  %21 = and i32 %20, 3, !dbg !11
  %22 = and i32 %19, 31, !dbg !11
  %23 = or disjoint i32 %21, %18, !dbg !12
  %24 = icmp slt i32 %23, 3600, !dbg !13
  %25 = icmp slt i32 %18, 3600, !dbg !13
  %26 = shl i32 %19, 2, !dbg !14
  %27 = and i32 %26, 508, !dbg !14
  %28 = and i32 %19, 511, !dbg !14
  %29 = sext i32 %23 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %24) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %24) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %24) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %24) #5, !dbg !16
  %35 = bitcast i16 %34 to bfloat, !dbg !16
  %36 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %24) #5, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %24) #5, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %24) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %24) #5, !dbg !18
  %41 = bitcast i16 %40 to bfloat, !dbg !18
  %42 = mul i32 %23, 3072, !dbg !19
  %.inv = fcmp oge bfloat %35, 0xR0000, !dbg !20
  %43 = select i1 %.inv, bfloat 0xR0000, bfloat %35, !dbg !20
  %44 = fpext bfloat %43 to float, !dbg !20
  %45 = fsub float 0.000000e+00, %44, !dbg !24
  %.inv4 = fcmp ole bfloat %41, 0xR0000, !dbg !25
  %46 = select i1 %.inv4, bfloat 0xR0000, bfloat %41, !dbg !25
  %47 = fpext bfloat %46 to float, !dbg !25
  %48 = fcmp ogt float %45, %47, !dbg !27
  %49 = fcmp uno float %45, 0.000000e+00, !dbg !29
  %50 = or i1 %49, %48, !dbg !30
  %51 = select i1 %50, float %45, float %47, !dbg !31
  %52 = fmul float %51, 0x3F80204080000000, !dbg !32
  %53 = fcmp ogt float %52, 0x3EE4F8B580000000, !dbg !33
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !35
  %55 = or i1 %53, %54, !dbg !36
  %56 = select i1 %55, float %52, float 0x3EE4F8B580000000, !dbg !37
  %57 = or disjoint i32 %42, %27
  %58 = shl i32 %19, 4
  %59 = and i32 %58, 2032
  %.reass = or disjoint i32 %59, %21
  %60 = and i32 %26, 2044
  %61 = lshr exact i32 %59, 2
  %62 = add nuw nsw i32 %.reass, %61
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %62
  %64 = or disjoint i32 %.reass, 4
  %65 = lshr i32 %64, 2
  %66 = add nuw nsw i32 %65, %64
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %66
  %68 = or disjoint i32 %.reass, 8
  %69 = lshr i32 %68, 2
  %70 = add nuw nsw i32 %69, %68
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %70
  %72 = or disjoint i32 %.reass, 12
  %73 = lshr i32 %72, 2
  %74 = add nuw nsw i32 %73, %72
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74
  %76 = lshr exact i32 %60, 2
  %77 = add nuw nsw i32 %76, %60
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %62
  %80 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %66
  %81 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %70
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %74
  %83 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %77
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %85 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 1032
  %86 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 2064
  %87 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 3096
  %88 = lshr i32 %26, 7
  %89 = and i32 %88, 12
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %90, i32 %60
  %92 = zext nneg i32 %28 to i64, !dbg !38
  %93 = getelementptr inbounds nuw i8, ptr addrspace(3) %91, i32 4
  %94 = insertelement <8 x i1> poison, i1 %25, i64 0, !dbg !39
  %95 = shufflevector <8 x i1> %94, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  br label %96, !dbg !38

96:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %224, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %225, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %226, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %227, %._crit_edge ]
  %101 = phi <8 x float> [ zeroinitializer, %16 ], [ %223, %._crit_edge ]
  %102 = or disjoint i64 %indvars.iv, %92, !dbg !40
  %103 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %104 = add i32 %57, %103, !dbg !41
  %105 = sext i32 %104 to i64, !dbg !42
  %106 = getelementptr bfloat, ptr addrspace(1) %0, i64 %105, !dbg !42
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %106, i1 %24) #5, !dbg !43
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !43
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !43
  %extelt.offset19 = lshr i32 %108, 16, !dbg !43
  %110 = trunc nuw i32 %extelt.offset19 to i16, !dbg !43
  %extelt.offset20 = lshr i32 %109, 16, !dbg !43
  %111 = trunc nuw i32 %extelt.offset20 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %112 = trunc i32 %108 to i16, !dbg !44
  %113 = insertelement <1 x i16> poison, i16 %112, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %63, <1 x i16> %113, i1 true) #5, !dbg !44
  %114 = insertelement <1 x i16> poison, i16 %110, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %67, <1 x i16> %114, i1 true) #5, !dbg !44
  %115 = trunc i32 %109 to i16, !dbg !44
  %116 = insertelement <1 x i16> poison, i16 %115, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %71, <1 x i16> %116, i1 true) #5, !dbg !44
  %117 = insertelement <1 x i16> poison, i16 %111, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %75, <1 x i16> %117, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %118 = add nuw nsw i64 %102, 6144, !dbg !45
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !46
  %120 = getelementptr bfloat, ptr addrspace(1) %2, i64 %118, !dbg !47
  %121 = getelementptr i32, ptr addrspace(1) %3, i64 %105, !dbg !48
  %122 = getelementptr bfloat, ptr addrspace(1) %6, i64 %102, !dbg !49
  %123 = getelementptr bfloat, ptr addrspace(1) %7, i64 %102, !dbg !50
  %124 = load <4 x bfloat>, ptr addrspace(3) %78, align 2, !dbg !44
  %125 = fpext <4 x bfloat> %124 to <4 x float>, !dbg !44
  %126 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %119, i1 true) #5, !dbg !51
  %127 = bitcast i32 %126 to float, !dbg !51
  %128 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %120, i1 true) #5, !dbg !52
  %129 = bitcast i16 %128 to bfloat, !dbg !52
  %130 = fpext bfloat %129 to float, !dbg !53
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %24) #5, !dbg !54
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !54
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !54
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !54
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !54
  %136 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %122, i1 true) #5, !dbg !55
  %137 = bitcast i16 %136 to bfloat, !dbg !55
  %138 = fpext bfloat %137 to float, !dbg !56
  %139 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %123, i1 true) #5, !dbg !57
  %140 = bitcast i16 %139 to bfloat, !dbg !57
  %141 = fpext bfloat %140 to float, !dbg !58
  %142 = fadd float %127, %130, !dbg !59
  %143 = sitofp i32 %132 to float, !dbg !60
  %144 = sitofp i32 %133 to float, !dbg !60
  %145 = sitofp i32 %134 to float, !dbg !60
  %146 = sitofp i32 %135 to float, !dbg !60
  %147 = fmul float %56, %143, !dbg !61
  %148 = fmul float %56, %144, !dbg !61
  %149 = fmul float %56, %145, !dbg !61
  %150 = fmul float %56, %146, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %151 = bitcast float %147 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %151, i1 true) #5, !dbg !61
  %152 = bitcast float %148 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %80, <1 x i32> %152, i1 true) #5, !dbg !61
  %153 = bitcast float %149 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %81, <1 x i32> %153, i1 true) #5, !dbg !61
  %154 = bitcast float %150 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %82, <1 x i32> %154, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %155 = load <4 x float>, ptr addrspace(3) %83, align 4, !dbg !61
  %156 = insertelement <4 x float> poison, float %138, i64 0, !dbg !62
  %157 = shufflevector <4 x float> %156, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !62
  %158 = fmul <4 x float> %155, %157, !dbg !62
  %159 = insertelement <4 x float> poison, float %141, i64 0, !dbg !63
  %160 = shufflevector <4 x float> %159, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !63
  %161 = fadd <4 x float> %158, %160, !dbg !63
  %162 = insertelement <4 x float> poison, float %142, i64 0, !dbg !64
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !64
  %164 = fmul <4 x float> %163, %161, !dbg !64
  %165 = fadd <4 x float> %164, %125, !dbg !65
  %166 = icmp eq i64 %indvars.iv, 0, !dbg !66
  %167 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !67
  %168 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float poison, float poison, float poison, float poison>, <8 x float> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !67
  br i1 %166, label %._crit_edge, label %169, !dbg !68

169:                                              ; preds = %96
  %170 = extractelement <8 x float> %101, i64 4, !dbg !69
  %171 = extractelement <4 x float> %165, i64 0, !dbg !70
  %172 = fsub float %171, %170, !dbg !71
  %173 = extractelement <8 x float> %101, i64 5, !dbg !69
  %174 = extractelement <4 x float> %165, i64 1, !dbg !70
  %175 = fsub float %174, %173, !dbg !71
  %176 = extractelement <8 x float> %101, i64 6, !dbg !69
  %177 = extractelement <4 x float> %165, i64 2, !dbg !70
  %178 = fsub float %177, %176, !dbg !71
  %179 = extractelement <8 x float> %101, i64 7, !dbg !69
  %180 = extractelement <4 x float> %165, i64 3, !dbg !70
  %181 = fsub float %180, %179, !dbg !71
  %182 = fadd float %97, 1.000000e+00, !dbg !72
  %183 = fadd float %98, 1.000000e+00, !dbg !72
  %184 = fadd float %99, 1.000000e+00, !dbg !72
  %185 = fadd float %100, 1.000000e+00, !dbg !72
  %186 = tail call float @llvm.nvvm.div.full(float %172, float %182), !dbg !73
  %187 = tail call float @llvm.nvvm.div.full(float %175, float %183), !dbg !73
  %188 = tail call float @llvm.nvvm.div.full(float %178, float %184), !dbg !73
  %189 = tail call float @llvm.nvvm.div.full(float %181, float %185), !dbg !73
  %190 = fadd float %170, %186, !dbg !69
  %191 = fadd float %173, %187, !dbg !69
  %192 = fadd float %176, %188, !dbg !69
  %193 = fadd float %179, %189, !dbg !69
  %194 = fsub float %171, %190, !dbg !70
  %195 = fsub float %174, %191, !dbg !70
  %196 = fsub float %177, %192, !dbg !70
  %197 = fsub float %180, %193, !dbg !70
  %198 = fmul float %172, %194, !dbg !74
  %199 = fmul float %175, %195, !dbg !74
  %200 = fmul float %178, %196, !dbg !74
  %201 = fmul float %181, %197, !dbg !74
  %202 = extractelement <8 x float> %101, i64 0, !dbg !75
  %203 = fadd float %202, %198, !dbg !75
  %204 = extractelement <8 x float> %101, i64 1, !dbg !75
  %205 = fadd float %204, %199, !dbg !75
  %206 = extractelement <8 x float> %101, i64 2, !dbg !75
  %207 = fadd float %206, %200, !dbg !75
  %208 = extractelement <8 x float> %101, i64 3, !dbg !75
  %209 = fadd float %208, %201, !dbg !75
  %210 = insertelement <8 x float> poison, float %203, i64 0, !dbg !67
  %211 = insertelement <8 x float> %210, float %205, i64 1, !dbg !67
  %212 = insertelement <8 x float> %211, float %207, i64 2, !dbg !67
  %213 = insertelement <8 x float> %212, float %209, i64 3, !dbg !67
  %214 = insertelement <8 x float> %213, float %190, i64 4, !dbg !67
  %215 = insertelement <8 x float> %214, float %191, i64 5, !dbg !67
  %216 = insertelement <8 x float> %215, float %192, i64 6, !dbg !67
  %217 = insertelement <8 x float> %216, float %193, i64 7, !dbg !67
  br label %._crit_edge, !dbg !68

._crit_edge:                                      ; preds = %96, %169
  %218 = phi float [ %182, %169 ], [ 1.000000e+00, %96 ], !dbg !67
  %219 = phi float [ %183, %169 ], [ 1.000000e+00, %96 ], !dbg !67
  %220 = phi float [ %184, %169 ], [ 1.000000e+00, %96 ], !dbg !67
  %221 = phi float [ %185, %169 ], [ 1.000000e+00, %96 ], !dbg !67
  %222 = phi <8 x float> [ %217, %169 ], [ %168, %96 ], !dbg !67
  %223 = select <8 x i1> %95, <8 x float> %222, <8 x float> %101, !dbg !39
  %224 = select i1 %25, float %218, float %97, !dbg !76
  %225 = select i1 %25, float %219, float %98, !dbg !76
  %226 = select i1 %25, float %220, float %99, !dbg !76
  %227 = select i1 %25, float %221, float %100, !dbg !76
  %228 = getelementptr bfloat, ptr addrspace(1) %8, i64 %105, !dbg !77
  %229 = extractelement <4 x float> %165, i64 0, !dbg !78
  %230 = fptrunc float %229 to bfloat, !dbg !78
  %231 = extractelement <4 x float> %165, i64 1, !dbg !78
  %232 = fptrunc float %231 to bfloat, !dbg !78
  %233 = extractelement <4 x float> %165, i64 2, !dbg !78
  %234 = fptrunc float %233 to bfloat, !dbg !78
  %235 = extractelement <4 x float> %165, i64 3, !dbg !78
  %236 = fptrunc float %235 to bfloat, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %237 = bitcast bfloat %230 to <1 x i16>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %84, <1 x i16> %237, i1 true) #5, !dbg !78
  %238 = bitcast bfloat %232 to <1 x i16>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %85, <1 x i16> %238, i1 true) #5, !dbg !78
  %239 = bitcast bfloat %234 to <1 x i16>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %86, <1 x i16> %239, i1 true) #5, !dbg !78
  %240 = bitcast bfloat %236 to <1 x i16>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %87, <1 x i16> %240, i1 true) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %.uncasted.extract32 = load i32, ptr addrspace(3) %91, align 8, !dbg !78
  %.uncasted.extract34 = load i32, ptr addrspace(3) %93, align 4, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract32, i32 %.uncasted.extract34, ptr addrspace(1) %228, i1 %24) #5, !dbg !78
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %241 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %241, label %96, label %242, !dbg !38

242:                                              ; preds = %._crit_edge
  %243 = lshr i32 %19, 5, !dbg !11
  %244 = and i32 %19, 3, !dbg !11
  %245 = or disjoint i32 %18, %244, !dbg !12
  %246 = icmp slt i32 %245, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %247 = extractelement <8 x float> %223, i64 4, !dbg !79
  %248 = bitcast float %247 to i32, !dbg !79
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !79
  %250 = bitcast i32 %249 to float, !dbg !79
  %251 = extractelement <8 x float> %223, i64 0, !dbg !79
  %252 = bitcast float %251 to i32, !dbg !79
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !79
  %254 = bitcast i32 %253 to float, !dbg !79
  %255 = bitcast float %224 to i32, !dbg !79
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !79
  %257 = bitcast i32 %256 to float, !dbg !79
  %258 = fsub float %250, %247, !dbg !81
  %259 = fadd float %224, %257, !dbg !83
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !84
  %261 = tail call float @llvm.nvvm.div.full(float %257, float %259), !dbg !85
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !86
  %263 = fmul float %258, %262, !dbg !87
  %264 = fadd float %247, %263, !dbg !88
  %265 = fadd float %251, %254, !dbg !89
  %266 = fmul float %258, %258, !dbg !90
  %267 = fmul float %224, %266, !dbg !91
  %268 = fmul float %267, %262, !dbg !92
  %269 = fadd float %265, %268, !dbg !93
  %270 = bitcast float %264 to i32, !dbg !79
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !79
  %272 = bitcast i32 %271 to float, !dbg !79
  %273 = bitcast float %269 to i32, !dbg !79
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !79
  %275 = bitcast i32 %274 to float, !dbg !79
  %276 = bitcast float %259 to i32, !dbg !79
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !79
  %278 = bitcast i32 %277 to float, !dbg !79
  %279 = fsub float %272, %264, !dbg !81
  %280 = fadd float %259, %278, !dbg !83
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !84
  %282 = tail call float @llvm.nvvm.div.full(float %278, float %280), !dbg !85
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !86
  %284 = fmul float %279, %283, !dbg !87
  %285 = fadd float %264, %284, !dbg !88
  %286 = fadd float %269, %275, !dbg !89
  %287 = fmul float %279, %279, !dbg !90
  %288 = fmul float %259, %287, !dbg !91
  %289 = fmul float %283, %288, !dbg !92
  %290 = fadd float %286, %289, !dbg !93
  %291 = bitcast float %285 to i32, !dbg !79
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 4, i32 31), !dbg !79
  %293 = bitcast i32 %292 to float, !dbg !79
  %294 = bitcast float %290 to i32, !dbg !79
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !79
  %296 = bitcast i32 %295 to float, !dbg !79
  %297 = bitcast float %280 to i32, !dbg !79
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !79
  %299 = bitcast i32 %298 to float, !dbg !79
  %300 = fsub float %293, %285, !dbg !81
  %301 = fadd float %280, %299, !dbg !83
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !84
  %303 = tail call float @llvm.nvvm.div.full(float %299, float %301), !dbg !85
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !86
  %305 = fmul float %300, %304, !dbg !87
  %306 = fadd float %285, %305, !dbg !88
  %307 = fadd float %290, %296, !dbg !89
  %308 = fmul float %300, %300, !dbg !90
  %309 = fmul float %280, %308, !dbg !91
  %310 = fmul float %304, %309, !dbg !92
  %311 = fadd float %307, %310, !dbg !93
  %312 = bitcast float %306 to i32, !dbg !79
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !79
  %314 = bitcast i32 %313 to float, !dbg !79
  %315 = bitcast float %311 to i32, !dbg !79
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !79
  %317 = bitcast i32 %316 to float, !dbg !79
  %318 = bitcast float %301 to i32, !dbg !79
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !79
  %320 = bitcast i32 %319 to float, !dbg !79
  %321 = fsub float %314, %306, !dbg !81
  %322 = fadd float %301, %320, !dbg !83
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !84
  %324 = tail call float @llvm.nvvm.div.full(float %320, float %322), !dbg !85
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !86
  %326 = fmul float %321, %325, !dbg !87
  %327 = fadd float %306, %326, !dbg !88
  %328 = fadd float %311, %317, !dbg !89
  %329 = fmul float %321, %321, !dbg !90
  %330 = fmul float %301, %329, !dbg !91
  %331 = fmul float %325, %330, !dbg !92
  %332 = fadd float %328, %331, !dbg !93
  %333 = bitcast float %327 to i32, !dbg !79
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !79
  %335 = bitcast i32 %334 to float, !dbg !79
  %336 = bitcast float %332 to i32, !dbg !79
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !79
  %338 = bitcast i32 %337 to float, !dbg !79
  %339 = bitcast float %322 to i32, !dbg !79
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !79
  %341 = bitcast i32 %340 to float, !dbg !79
  %342 = fsub float %335, %327, !dbg !81
  %343 = fadd float %322, %341, !dbg !83
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !84
  %345 = tail call float @llvm.nvvm.div.full(float %341, float %343), !dbg !85
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !86
  %347 = fmul float %342, %346, !dbg !87
  %348 = fadd float %327, %347, !dbg !88
  %349 = fadd float %332, %338, !dbg !89
  %350 = fmul float %342, %342, !dbg !90
  %351 = fmul float %322, %350, !dbg !91
  %352 = fmul float %346, %351, !dbg !92
  %353 = fadd float %349, %352, !dbg !93
  %354 = extractelement <8 x float> %223, i64 5, !dbg !79
  %355 = bitcast float %354 to i32, !dbg !79
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 16, i32 31), !dbg !79
  %357 = bitcast i32 %356 to float, !dbg !79
  %358 = extractelement <8 x float> %223, i64 1, !dbg !79
  %359 = bitcast float %358 to i32, !dbg !79
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !79
  %361 = bitcast i32 %360 to float, !dbg !79
  %362 = bitcast float %225 to i32, !dbg !79
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 16, i32 31), !dbg !79
  %364 = bitcast i32 %363 to float, !dbg !79
  %365 = fsub float %357, %354, !dbg !81
  %366 = fadd float %225, %364, !dbg !83
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !84
  %368 = tail call float @llvm.nvvm.div.full(float %364, float %366), !dbg !85
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !86
  %370 = fmul float %365, %369, !dbg !87
  %371 = fadd float %354, %370, !dbg !88
  %372 = fadd float %358, %361, !dbg !89
  %373 = fmul float %365, %365, !dbg !90
  %374 = fmul float %225, %373, !dbg !91
  %375 = fmul float %374, %369, !dbg !92
  %376 = fadd float %372, %375, !dbg !93
  %377 = bitcast float %371 to i32, !dbg !79
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 8, i32 31), !dbg !79
  %379 = bitcast i32 %378 to float, !dbg !79
  %380 = bitcast float %376 to i32, !dbg !79
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 8, i32 31), !dbg !79
  %382 = bitcast i32 %381 to float, !dbg !79
  %383 = bitcast float %366 to i32, !dbg !79
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 8, i32 31), !dbg !79
  %385 = bitcast i32 %384 to float, !dbg !79
  %386 = fsub float %379, %371, !dbg !81
  %387 = fadd float %366, %385, !dbg !83
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !84
  %389 = tail call float @llvm.nvvm.div.full(float %385, float %387), !dbg !85
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !86
  %391 = fmul float %386, %390, !dbg !87
  %392 = fadd float %371, %391, !dbg !88
  %393 = fadd float %376, %382, !dbg !89
  %394 = fmul float %386, %386, !dbg !90
  %395 = fmul float %366, %394, !dbg !91
  %396 = fmul float %390, %395, !dbg !92
  %397 = fadd float %393, %396, !dbg !93
  %398 = bitcast float %392 to i32, !dbg !79
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !79
  %400 = bitcast i32 %399 to float, !dbg !79
  %401 = bitcast float %397 to i32, !dbg !79
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !79
  %403 = bitcast i32 %402 to float, !dbg !79
  %404 = bitcast float %387 to i32, !dbg !79
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 4, i32 31), !dbg !79
  %406 = bitcast i32 %405 to float, !dbg !79
  %407 = fsub float %400, %392, !dbg !81
  %408 = fadd float %387, %406, !dbg !83
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !84
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !85
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !86
  %412 = fmul float %407, %411, !dbg !87
  %413 = fadd float %392, %412, !dbg !88
  %414 = fadd float %397, %403, !dbg !89
  %415 = fmul float %407, %407, !dbg !90
  %416 = fmul float %387, %415, !dbg !91
  %417 = fmul float %411, %416, !dbg !92
  %418 = fadd float %414, %417, !dbg !93
  %419 = bitcast float %413 to i32, !dbg !79
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !79
  %421 = bitcast i32 %420 to float, !dbg !79
  %422 = bitcast float %418 to i32, !dbg !79
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !79
  %424 = bitcast i32 %423 to float, !dbg !79
  %425 = bitcast float %408 to i32, !dbg !79
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !79
  %427 = bitcast i32 %426 to float, !dbg !79
  %428 = fsub float %421, %413, !dbg !81
  %429 = fadd float %408, %427, !dbg !83
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !84
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !85
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !86
  %433 = fmul float %428, %432, !dbg !87
  %434 = fadd float %413, %433, !dbg !88
  %435 = fadd float %418, %424, !dbg !89
  %436 = fmul float %428, %428, !dbg !90
  %437 = fmul float %408, %436, !dbg !91
  %438 = fmul float %432, %437, !dbg !92
  %439 = fadd float %435, %438, !dbg !93
  %440 = bitcast float %434 to i32, !dbg !79
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !79
  %442 = bitcast i32 %441 to float, !dbg !79
  %443 = bitcast float %439 to i32, !dbg !79
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !79
  %445 = bitcast i32 %444 to float, !dbg !79
  %446 = bitcast float %429 to i32, !dbg !79
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !79
  %448 = bitcast i32 %447 to float, !dbg !79
  %449 = fsub float %442, %434, !dbg !81
  %450 = fadd float %429, %448, !dbg !83
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !84
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !85
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !86
  %454 = fmul float %449, %453, !dbg !87
  %455 = fadd float %434, %454, !dbg !88
  %456 = fadd float %439, %445, !dbg !89
  %457 = fmul float %449, %449, !dbg !90
  %458 = fmul float %429, %457, !dbg !91
  %459 = fmul float %453, %458, !dbg !92
  %460 = fadd float %456, %459, !dbg !93
  %461 = extractelement <8 x float> %223, i64 6, !dbg !79
  %462 = bitcast float %461 to i32, !dbg !79
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 16, i32 31), !dbg !79
  %464 = bitcast i32 %463 to float, !dbg !79
  %465 = extractelement <8 x float> %223, i64 2, !dbg !79
  %466 = bitcast float %465 to i32, !dbg !79
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 16, i32 31), !dbg !79
  %468 = bitcast i32 %467 to float, !dbg !79
  %469 = bitcast float %226 to i32, !dbg !79
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 16, i32 31), !dbg !79
  %471 = bitcast i32 %470 to float, !dbg !79
  %472 = fsub float %464, %461, !dbg !81
  %473 = fadd float %226, %471, !dbg !83
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !84
  %475 = tail call float @llvm.nvvm.div.full(float %471, float %473), !dbg !85
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !86
  %477 = fmul float %472, %476, !dbg !87
  %478 = fadd float %461, %477, !dbg !88
  %479 = fadd float %465, %468, !dbg !89
  %480 = fmul float %472, %472, !dbg !90
  %481 = fmul float %226, %480, !dbg !91
  %482 = fmul float %481, %476, !dbg !92
  %483 = fadd float %479, %482, !dbg !93
  %484 = bitcast float %478 to i32, !dbg !79
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 8, i32 31), !dbg !79
  %486 = bitcast i32 %485 to float, !dbg !79
  %487 = bitcast float %483 to i32, !dbg !79
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 8, i32 31), !dbg !79
  %489 = bitcast i32 %488 to float, !dbg !79
  %490 = bitcast float %473 to i32, !dbg !79
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 8, i32 31), !dbg !79
  %492 = bitcast i32 %491 to float, !dbg !79
  %493 = fsub float %486, %478, !dbg !81
  %494 = fadd float %473, %492, !dbg !83
  %495 = fcmp oeq float %494, 0.000000e+00, !dbg !84
  %496 = tail call float @llvm.nvvm.div.full(float %492, float %494), !dbg !85
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !86
  %498 = fmul float %493, %497, !dbg !87
  %499 = fadd float %478, %498, !dbg !88
  %500 = fadd float %483, %489, !dbg !89
  %501 = fmul float %493, %493, !dbg !90
  %502 = fmul float %473, %501, !dbg !91
  %503 = fmul float %497, %502, !dbg !92
  %504 = fadd float %500, %503, !dbg !93
  %505 = bitcast float %499 to i32, !dbg !79
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 4, i32 31), !dbg !79
  %507 = bitcast i32 %506 to float, !dbg !79
  %508 = bitcast float %504 to i32, !dbg !79
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 4, i32 31), !dbg !79
  %510 = bitcast i32 %509 to float, !dbg !79
  %511 = bitcast float %494 to i32, !dbg !79
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 4, i32 31), !dbg !79
  %513 = bitcast i32 %512 to float, !dbg !79
  %514 = fsub float %507, %499, !dbg !81
  %515 = fadd float %494, %513, !dbg !83
  %516 = fcmp oeq float %515, 0.000000e+00, !dbg !84
  %517 = tail call float @llvm.nvvm.div.full(float %513, float %515), !dbg !85
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !86
  %519 = fmul float %514, %518, !dbg !87
  %520 = fadd float %499, %519, !dbg !88
  %521 = fadd float %504, %510, !dbg !89
  %522 = fmul float %514, %514, !dbg !90
  %523 = fmul float %494, %522, !dbg !91
  %524 = fmul float %518, %523, !dbg !92
  %525 = fadd float %521, %524, !dbg !93
  %526 = bitcast float %520 to i32, !dbg !79
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !79
  %528 = bitcast i32 %527 to float, !dbg !79
  %529 = bitcast float %525 to i32, !dbg !79
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 2, i32 31), !dbg !79
  %531 = bitcast i32 %530 to float, !dbg !79
  %532 = bitcast float %515 to i32, !dbg !79
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 2, i32 31), !dbg !79
  %534 = bitcast i32 %533 to float, !dbg !79
  %535 = fsub float %528, %520, !dbg !81
  %536 = fadd float %515, %534, !dbg !83
  %537 = fcmp oeq float %536, 0.000000e+00, !dbg !84
  %538 = tail call float @llvm.nvvm.div.full(float %534, float %536), !dbg !85
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !86
  %540 = fmul float %535, %539, !dbg !87
  %541 = fadd float %520, %540, !dbg !88
  %542 = fadd float %525, %531, !dbg !89
  %543 = fmul float %535, %535, !dbg !90
  %544 = fmul float %515, %543, !dbg !91
  %545 = fmul float %539, %544, !dbg !92
  %546 = fadd float %542, %545, !dbg !93
  %547 = bitcast float %541 to i32, !dbg !79
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 1, i32 31), !dbg !79
  %549 = bitcast i32 %548 to float, !dbg !79
  %550 = bitcast float %546 to i32, !dbg !79
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 1, i32 31), !dbg !79
  %552 = bitcast i32 %551 to float, !dbg !79
  %553 = bitcast float %536 to i32, !dbg !79
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 1, i32 31), !dbg !79
  %555 = bitcast i32 %554 to float, !dbg !79
  %556 = fsub float %549, %541, !dbg !81
  %557 = fadd float %536, %555, !dbg !83
  %558 = fcmp oeq float %557, 0.000000e+00, !dbg !84
  %559 = tail call float @llvm.nvvm.div.full(float %555, float %557), !dbg !85
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !86
  %561 = fmul float %556, %560, !dbg !87
  %562 = fadd float %541, %561, !dbg !88
  %563 = fadd float %546, %552, !dbg !89
  %564 = fmul float %556, %556, !dbg !90
  %565 = fmul float %536, %564, !dbg !91
  %566 = fmul float %560, %565, !dbg !92
  %567 = fadd float %563, %566, !dbg !93
  %568 = extractelement <8 x float> %223, i64 7, !dbg !79
  %569 = bitcast float %568 to i32, !dbg !79
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 16, i32 31), !dbg !79
  %571 = bitcast i32 %570 to float, !dbg !79
  %572 = extractelement <8 x float> %223, i64 3, !dbg !79
  %573 = bitcast float %572 to i32, !dbg !79
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 16, i32 31), !dbg !79
  %575 = bitcast i32 %574 to float, !dbg !79
  %576 = bitcast float %227 to i32, !dbg !79
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 16, i32 31), !dbg !79
  %578 = bitcast i32 %577 to float, !dbg !79
  %579 = fsub float %571, %568, !dbg !81
  %580 = fadd float %227, %578, !dbg !83
  %581 = fcmp oeq float %580, 0.000000e+00, !dbg !84
  %582 = tail call float @llvm.nvvm.div.full(float %578, float %580), !dbg !85
  %583 = select i1 %581, float 0.000000e+00, float %582, !dbg !86
  %584 = fmul float %579, %583, !dbg !87
  %585 = fadd float %568, %584, !dbg !88
  %586 = fadd float %572, %575, !dbg !89
  %587 = fmul float %579, %579, !dbg !90
  %588 = fmul float %227, %587, !dbg !91
  %589 = fmul float %588, %583, !dbg !92
  %590 = fadd float %586, %589, !dbg !93
  %591 = bitcast float %585 to i32, !dbg !79
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 8, i32 31), !dbg !79
  %593 = bitcast i32 %592 to float, !dbg !79
  %594 = bitcast float %590 to i32, !dbg !79
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 8, i32 31), !dbg !79
  %596 = bitcast i32 %595 to float, !dbg !79
  %597 = bitcast float %580 to i32, !dbg !79
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 8, i32 31), !dbg !79
  %599 = bitcast i32 %598 to float, !dbg !79
  %600 = fsub float %593, %585, !dbg !81
  %601 = fadd float %580, %599, !dbg !83
  %602 = fcmp oeq float %601, 0.000000e+00, !dbg !84
  %603 = tail call float @llvm.nvvm.div.full(float %599, float %601), !dbg !85
  %604 = select i1 %602, float 0.000000e+00, float %603, !dbg !86
  %605 = fmul float %600, %604, !dbg !87
  %606 = fadd float %585, %605, !dbg !88
  %607 = fadd float %590, %596, !dbg !89
  %608 = fmul float %600, %600, !dbg !90
  %609 = fmul float %580, %608, !dbg !91
  %610 = fmul float %604, %609, !dbg !92
  %611 = fadd float %607, %610, !dbg !93
  %612 = bitcast float %606 to i32, !dbg !79
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 4, i32 31), !dbg !79
  %614 = bitcast i32 %613 to float, !dbg !79
  %615 = bitcast float %611 to i32, !dbg !79
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 4, i32 31), !dbg !79
  %617 = bitcast i32 %616 to float, !dbg !79
  %618 = bitcast float %601 to i32, !dbg !79
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 4, i32 31), !dbg !79
  %620 = bitcast i32 %619 to float, !dbg !79
  %621 = fsub float %614, %606, !dbg !81
  %622 = fadd float %601, %620, !dbg !83
  %623 = fcmp oeq float %622, 0.000000e+00, !dbg !84
  %624 = tail call float @llvm.nvvm.div.full(float %620, float %622), !dbg !85
  %625 = select i1 %623, float 0.000000e+00, float %624, !dbg !86
  %626 = fmul float %621, %625, !dbg !87
  %627 = fadd float %606, %626, !dbg !88
  %628 = fadd float %611, %617, !dbg !89
  %629 = fmul float %621, %621, !dbg !90
  %630 = fmul float %601, %629, !dbg !91
  %631 = fmul float %625, %630, !dbg !92
  %632 = fadd float %628, %631, !dbg !93
  %633 = bitcast float %627 to i32, !dbg !79
  %634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 2, i32 31), !dbg !79
  %635 = bitcast i32 %634 to float, !dbg !79
  %636 = bitcast float %632 to i32, !dbg !79
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 2, i32 31), !dbg !79
  %638 = bitcast i32 %637 to float, !dbg !79
  %639 = bitcast float %622 to i32, !dbg !79
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !79
  %641 = bitcast i32 %640 to float, !dbg !79
  %642 = fsub float %635, %627, !dbg !81
  %643 = fadd float %622, %641, !dbg !83
  %644 = fcmp oeq float %643, 0.000000e+00, !dbg !84
  %645 = tail call float @llvm.nvvm.div.full(float %641, float %643), !dbg !85
  %646 = select i1 %644, float 0.000000e+00, float %645, !dbg !86
  %647 = fmul float %642, %646, !dbg !87
  %648 = fadd float %627, %647, !dbg !88
  %649 = fadd float %632, %638, !dbg !89
  %650 = fmul float %642, %642, !dbg !90
  %651 = fmul float %622, %650, !dbg !91
  %652 = fmul float %646, %651, !dbg !92
  %653 = fadd float %649, %652, !dbg !93
  %654 = bitcast float %648 to i32, !dbg !79
  %655 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %654, i32 1, i32 31), !dbg !79
  %656 = bitcast i32 %655 to float, !dbg !79
  %657 = bitcast float %653 to i32, !dbg !79
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %657, i32 1, i32 31), !dbg !79
  %659 = bitcast i32 %658 to float, !dbg !79
  %660 = bitcast float %643 to i32, !dbg !79
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 1, i32 31), !dbg !79
  %662 = bitcast i32 %661 to float, !dbg !79
  %663 = fsub float %656, %648, !dbg !81
  %664 = fadd float %643, %662, !dbg !83
  %665 = fcmp oeq float %664, 0.000000e+00, !dbg !84
  %666 = tail call float @llvm.nvvm.div.full(float %662, float %664), !dbg !85
  %667 = select i1 %665, float 0.000000e+00, float %666, !dbg !86
  %668 = fmul float %663, %667, !dbg !87
  %669 = fadd float %648, %668, !dbg !88
  %670 = fadd float %653, %659, !dbg !89
  %671 = fmul float %663, %663, !dbg !90
  %672 = fmul float %643, %671, !dbg !91
  %673 = fmul float %667, %672, !dbg !92
  %674 = fadd float %670, %673, !dbg !93
  %675 = and i32 %243, 15, !dbg !79
  %676 = icmp eq i32 %22, 0, !dbg !79
  %677 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !79
  %678 = bitcast float %348 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 %676) #5, !dbg !79
  %679 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %675, !dbg !79
  %680 = bitcast float %353 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %679, <1 x i32> %680, i1 %676) #5, !dbg !79
  %681 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %675, !dbg !79
  %682 = bitcast float %343 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %681, <1 x i32> %682, i1 %676) #5, !dbg !79
  %683 = or disjoint i32 %675, 16, !dbg !79
  %684 = getelementptr float, ptr addrspace(3) @global_smem, i32 %683, !dbg !79
  %685 = bitcast float %455 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %684, <1 x i32> %685, i1 %676) #5, !dbg !79
  %686 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %683, !dbg !79
  %687 = bitcast float %460 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %687, i1 %676) #5, !dbg !79
  %688 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %683, !dbg !79
  %689 = bitcast float %450 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %688, <1 x i32> %689, i1 %676) #5, !dbg !79
  %690 = or disjoint i32 %675, 32, !dbg !79
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i32 %690, !dbg !79
  %692 = bitcast float %562 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %691, <1 x i32> %692, i1 %676) #5, !dbg !79
  %693 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %690, !dbg !79
  %694 = bitcast float %567 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %693, <1 x i32> %694, i1 %676) #5, !dbg !79
  %695 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %690, !dbg !79
  %696 = bitcast float %557 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %695, <1 x i32> %696, i1 %676) #5, !dbg !79
  %697 = or disjoint i32 %675, 48, !dbg !79
  %698 = getelementptr float, ptr addrspace(3) @global_smem, i32 %697, !dbg !79
  %699 = bitcast float %669 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %699, i1 %676) #5, !dbg !79
  %700 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %697, !dbg !79
  %701 = bitcast float %674 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %700, <1 x i32> %701, i1 %676) #5, !dbg !79
  %702 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %697, !dbg !79
  %703 = bitcast float %664 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %702, <1 x i32> %703, i1 %676) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %704 = icmp slt i32 %19, 64, !dbg !79
  %705 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !79
  %706 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %705, i1 %704) #5, !dbg !79
  %707 = bitcast i32 %706 to float, !dbg !79
  %708 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !79
  %709 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %708, i1 %704) #5, !dbg !79
  %710 = bitcast i32 %709 to float, !dbg !79
  %711 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %19, !dbg !79
  %712 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %711, i1 %704) #5, !dbg !79
  %713 = bitcast i32 %712 to float, !dbg !79
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 8, i32 31), !dbg !79
  %715 = bitcast i32 %714 to float, !dbg !79
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 8, i32 31), !dbg !79
  %717 = bitcast i32 %716 to float, !dbg !79
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %712, i32 8, i32 31), !dbg !79
  %719 = bitcast i32 %718 to float, !dbg !79
  %720 = fsub float %715, %707, !dbg !81
  %721 = fadd float %713, %719, !dbg !83
  %722 = fcmp oeq float %721, 0.000000e+00, !dbg !84
  %723 = tail call float @llvm.nvvm.div.full(float %719, float %721), !dbg !85
  %724 = select i1 %722, float 0.000000e+00, float %723, !dbg !86
  %725 = fmul float %720, %724, !dbg !87
  %726 = fadd float %725, %707, !dbg !88
  %727 = fadd float %710, %717, !dbg !89
  %728 = fmul float %720, %720, !dbg !90
  %729 = fmul float %728, %713, !dbg !91
  %730 = fmul float %729, %724, !dbg !92
  %731 = fadd float %727, %730, !dbg !93
  %732 = bitcast float %726 to i32, !dbg !79
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !79
  %734 = bitcast i32 %733 to float, !dbg !79
  %735 = bitcast float %731 to i32, !dbg !79
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 4, i32 31), !dbg !79
  %737 = bitcast i32 %736 to float, !dbg !79
  %738 = bitcast float %721 to i32, !dbg !79
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 4, i32 31), !dbg !79
  %740 = bitcast i32 %739 to float, !dbg !79
  %741 = fsub float %734, %726, !dbg !81
  %742 = fadd float %721, %740, !dbg !83
  %743 = fcmp oeq float %742, 0.000000e+00, !dbg !84
  %744 = tail call float @llvm.nvvm.div.full(float %740, float %742), !dbg !85
  %745 = select i1 %743, float 0.000000e+00, float %744, !dbg !86
  %746 = fmul float %741, %745, !dbg !87
  %747 = fadd float %726, %746, !dbg !88
  %748 = fadd float %731, %737, !dbg !89
  %749 = fmul float %741, %741, !dbg !90
  %750 = fmul float %721, %749, !dbg !91
  %751 = fmul float %745, %750, !dbg !92
  %752 = fadd float %748, %751, !dbg !93
  %753 = bitcast float %747 to i32, !dbg !79
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 2, i32 31), !dbg !79
  %755 = bitcast i32 %754 to float, !dbg !79
  %756 = bitcast float %752 to i32, !dbg !79
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 2, i32 31), !dbg !79
  %758 = bitcast i32 %757 to float, !dbg !79
  %759 = bitcast float %742 to i32, !dbg !79
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 2, i32 31), !dbg !79
  %761 = bitcast i32 %760 to float, !dbg !79
  %762 = fsub float %755, %747, !dbg !81
  %763 = fadd float %742, %761, !dbg !83
  %764 = fcmp oeq float %763, 0.000000e+00, !dbg !84
  %765 = tail call float @llvm.nvvm.div.full(float %761, float %763), !dbg !85
  %766 = select i1 %764, float 0.000000e+00, float %765, !dbg !86
  %767 = fmul float %762, %766, !dbg !87
  %768 = fadd float %747, %767, !dbg !88
  %769 = fadd float %752, %758, !dbg !89
  %770 = fmul float %762, %762, !dbg !90
  %771 = fmul float %742, %770, !dbg !91
  %772 = fmul float %766, %771, !dbg !92
  %773 = fadd float %769, %772, !dbg !93
  %774 = bitcast float %768 to i32, !dbg !79
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 1, i32 31), !dbg !79
  %776 = bitcast i32 %775 to float, !dbg !79
  %777 = bitcast float %773 to i32, !dbg !79
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 1, i32 31), !dbg !79
  %779 = bitcast i32 %778 to float, !dbg !79
  %780 = bitcast float %763 to i32, !dbg !79
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 1, i32 31), !dbg !79
  %782 = bitcast i32 %781 to float, !dbg !79
  %783 = fsub float %776, %768, !dbg !81
  %784 = fadd float %763, %782, !dbg !83
  %785 = fcmp oeq float %784, 0.000000e+00, !dbg !84
  %786 = tail call float @llvm.nvvm.div.full(float %782, float %784), !dbg !85
  %787 = select i1 %785, float 0.000000e+00, float %786, !dbg !86
  %788 = fmul float %783, %787, !dbg !87
  %789 = fadd float %768, %788, !dbg !88
  %790 = fadd float %773, %779, !dbg !89
  %791 = fmul float %783, %783, !dbg !90
  %792 = fmul float %763, %791, !dbg !91
  %793 = fmul float %787, %792, !dbg !92
  %794 = fadd float %790, %793, !dbg !93
  %795 = and i32 %19, 15, !dbg !79
  %796 = icmp eq i32 %795, 0, !dbg !79
  %797 = and i1 %704, %796, !dbg !79
  %798 = bitcast float %789 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %798, i1 %797) #5, !dbg !79
  %799 = bitcast float %794 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %708, <1 x i32> %799, i1 %797) #5, !dbg !79
  %800 = bitcast float %784 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %711, <1 x i32> %800, i1 %797) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %801 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %802 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !79
  %803 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !79
  %804 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !79
  %805 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !79
  %806 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !79
  %807 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !79
  %808 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !79
  %809 = tail call float @llvm.nvvm.div.full(float %805, float 3.072000e+03), !dbg !94
  %810 = tail call float @llvm.nvvm.div.full(float %806, float 3.072000e+03), !dbg !94
  %811 = tail call float @llvm.nvvm.div.full(float %807, float 3.072000e+03), !dbg !94
  %812 = tail call float @llvm.nvvm.div.full(float %808, float 3.072000e+03), !dbg !94
  %813 = fadd float %809, 0x3EB0C6F7A0000000, !dbg !95
  %814 = fadd float %810, 0x3EB0C6F7A0000000, !dbg !95
  %815 = fadd float %811, 0x3EB0C6F7A0000000, !dbg !95
  %816 = fadd float %812, 0x3EB0C6F7A0000000, !dbg !95
  %817 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %.not.i = icmp eq i32 %817, 0, !dbg !96
  br i1 %.not.i, label %820, label %818, !dbg !96

818:                                              ; preds = %242
  %819 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %813), !dbg !96
  br label %__nv_rsqrtf.exit, !dbg !96

820:                                              ; preds = %242
  %821 = tail call float @llvm.nvvm.rsqrt.approx.f(float %813), !dbg !96
  br label %__nv_rsqrtf.exit, !dbg !96

__nv_rsqrtf.exit:                                 ; preds = %818, %820
  %.0.i = phi float [ %819, %818 ], [ %821, %820 ], !dbg !96
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %.not.i35 = icmp eq i32 %822, 0, !dbg !96
  br i1 %.not.i35, label %825, label %823, !dbg !96

823:                                              ; preds = %__nv_rsqrtf.exit
  %824 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %814), !dbg !96
  br label %__nv_rsqrtf.exit37, !dbg !96

825:                                              ; preds = %__nv_rsqrtf.exit
  %826 = tail call float @llvm.nvvm.rsqrt.approx.f(float %814), !dbg !96
  br label %__nv_rsqrtf.exit37, !dbg !96

__nv_rsqrtf.exit37:                               ; preds = %823, %825
  %.0.i36 = phi float [ %824, %823 ], [ %826, %825 ], !dbg !96
  %827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %.not.i38 = icmp eq i32 %827, 0, !dbg !96
  br i1 %.not.i38, label %830, label %828, !dbg !96

828:                                              ; preds = %__nv_rsqrtf.exit37
  %829 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %815), !dbg !96
  br label %__nv_rsqrtf.exit40, !dbg !96

830:                                              ; preds = %__nv_rsqrtf.exit37
  %831 = tail call float @llvm.nvvm.rsqrt.approx.f(float %815), !dbg !96
  br label %__nv_rsqrtf.exit40, !dbg !96

__nv_rsqrtf.exit40:                               ; preds = %828, %830
  %.0.i39 = phi float [ %829, %828 ], [ %831, %830 ], !dbg !96
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %.not.i41 = icmp eq i32 %832, 0, !dbg !96
  br i1 %.not.i41, label %835, label %833, !dbg !96

833:                                              ; preds = %__nv_rsqrtf.exit40
  %834 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %816), !dbg !96
  br label %__nv_rsqrtf.exit43, !dbg !96

835:                                              ; preds = %__nv_rsqrtf.exit40
  %836 = tail call float @llvm.nvvm.rsqrt.approx.f(float %816), !dbg !96
  br label %__nv_rsqrtf.exit43, !dbg !96

__nv_rsqrtf.exit43:                               ; preds = %833, %835
  %.0.i42 = phi float [ %834, %833 ], [ %836, %835 ], !dbg !96
  %837 = lshr exact i32 %59, 1
  %838 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %837
  %839 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %838, i32 %.reass
  %840 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %65
  %841 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %840, i32 %64
  %842 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %69
  %843 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %842, i32 %68
  %844 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %73
  %845 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %844, i32 %72
  %846 = lshr exact i32 %60, 1
  %847 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %846
  %848 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %847, i32 %60
  %849 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !97
  %850 = insertelement <4 x float> %849, float %.0.i36, i64 1, !dbg !97
  %851 = insertelement <4 x float> %850, float %.0.i39, i64 2, !dbg !97
  %852 = insertelement <4 x float> %851, float %.0.i42, i64 3, !dbg !97
  %853 = insertelement <4 x float> poison, float %801, i64 0, !dbg !98
  %854 = insertelement <4 x float> %853, float %802, i64 1, !dbg !98
  %855 = insertelement <4 x float> %854, float %803, i64 2, !dbg !98
  %856 = insertelement <4 x float> %855, float %804, i64 3, !dbg !98
  %invariant.op146 = or i32 %28, 12288, !dbg !99
  br label %857, !dbg !99

857:                                              ; preds = %__nv_rsqrtf.exit43, %857
  %indvars.iv71 = phi i64 [ 0, %__nv_rsqrtf.exit43 ], [ %indvars.iv.next72, %857 ]
  %858 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit43 ], [ %911, %857 ]
  %859 = or disjoint i64 %indvars.iv71, %92, !dbg !100
  %860 = trunc nuw nsw i64 %indvars.iv71 to i32, !dbg !101
  %861 = add i32 %57, %860, !dbg !101
  %862 = sext i32 %861 to i64, !dbg !102
  %863 = getelementptr bfloat, ptr addrspace(1) %8, i64 %862, !dbg !102
  %864 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %863, i1 %24) #5, !dbg !103
  %865 = extractvalue { i32, i32 } %864, 0, !dbg !103
  %866 = extractvalue { i32, i32 } %864, 1, !dbg !103
  %extelt.offset = lshr i32 %865, 16, !dbg !103
  %867 = trunc nuw i32 %extelt.offset to i16, !dbg !103
  %extelt.offset13 = lshr i32 %866, 16, !dbg !103
  %868 = trunc nuw i32 %extelt.offset13 to i16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %869 = trunc i32 %865 to i16, !dbg !97
  %870 = insertelement <1 x i16> poison, i16 %869, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %839, <1 x i16> %870, i1 true) #5, !dbg !97
  %871 = insertelement <1 x i16> poison, i16 %867, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %841, <1 x i16> %871, i1 true) #5, !dbg !97
  %872 = trunc i32 %866 to i16, !dbg !97
  %873 = insertelement <1 x i16> poison, i16 %872, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %843, <1 x i16> %873, i1 true) #5, !dbg !97
  %874 = insertelement <1 x i16> poison, i16 %868, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %845, <1 x i16> %874, i1 true) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %.reass51.reass.reass = or i32 %860, %invariant.op146
  %875 = zext nneg i32 %.reass51.reass.reass to i64, !dbg !104
  %876 = getelementptr float, ptr addrspace(1) %1, i64 %875, !dbg !104
  %877 = getelementptr bfloat, ptr addrspace(1) %2, i64 %875, !dbg !105
  %878 = add nuw nsw i64 %859, 9216, !dbg !106
  %879 = getelementptr float, ptr addrspace(1) %1, i64 %878, !dbg !107
  %880 = getelementptr bfloat, ptr addrspace(1) %2, i64 %878, !dbg !108
  %881 = fcmp uno <8 x float> %858, zeroinitializer, !dbg !109
  %882 = load <4 x bfloat>, ptr addrspace(3) %848, align 2, !dbg !97
  %883 = fpext <4 x bfloat> %882 to <4 x float>, !dbg !111
  %884 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %876, i1 true) #5, !dbg !112
  %885 = bitcast i32 %884 to float, !dbg !112
  %886 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %877, i1 true) #5, !dbg !113
  %887 = bitcast i16 %886 to bfloat, !dbg !113
  %888 = fpext bfloat %887 to float, !dbg !114
  %889 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %879, i1 true) #5, !dbg !115
  %890 = bitcast i32 %889 to float, !dbg !115
  %891 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %880, i1 true) #5, !dbg !116
  %892 = bitcast i16 %891 to bfloat, !dbg !116
  %893 = fpext bfloat %892 to float, !dbg !117
  %894 = fsub <4 x float> %883, %856, !dbg !98
  %895 = fmul <4 x float> %852, %894, !dbg !97
  %896 = fadd float %885, %888, !dbg !118
  %897 = fadd float %896, 1.000000e+00, !dbg !119
  %898 = insertelement <4 x float> poison, float %897, i64 0, !dbg !120
  %899 = shufflevector <4 x float> %898, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !120
  %900 = fmul <4 x float> %895, %899, !dbg !120
  %901 = fadd float %890, %893, !dbg !121
  %902 = insertelement <4 x float> poison, float %901, i64 0, !dbg !122
  %903 = shufflevector <4 x float> %900, <4 x float> poison, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0>, !dbg !122
  %904 = shufflevector <4 x float> %902, <4 x float> poison, <8 x i32> zeroinitializer, !dbg !122
  %905 = fadd <8 x float> %903, %904, !dbg !122
  %906 = fcmp ogt <8 x float> %858, %905, !dbg !123
  %907 = fcmp olt <8 x float> %858, %905, !dbg !123
  %908 = shufflevector <8 x i1> %906, <8 x i1> %907, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !123
  %909 = or <8 x i1> %881, %908, !dbg !124
  %910 = select <8 x i1> %909, <8 x float> %858, <8 x float> %905, !dbg !125
  %911 = select <8 x i1> %95, <8 x float> %910, <8 x float> %858, !dbg !126
  %912 = getelementptr bfloat, ptr addrspace(1) %9, i64 %862, !dbg !127
  %913 = extractelement <8 x float> %905, i64 3, !dbg !128
  %914 = fptrunc float %913 to bfloat, !dbg !128
  %915 = extractelement <8 x float> %905, i64 2, !dbg !128
  %916 = fptrunc float %915 to bfloat, !dbg !128
  %917 = extractelement <8 x float> %905, i64 1, !dbg !128
  %918 = fptrunc float %917 to bfloat, !dbg !128
  %919 = extractelement <8 x float> %905, i64 0, !dbg !128
  %920 = fptrunc float %919 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %921 = bitcast bfloat %914 to <1 x i16>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %84, <1 x i16> %921, i1 true) #5, !dbg !128
  %922 = bitcast bfloat %916 to <1 x i16>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %85, <1 x i16> %922, i1 true) #5, !dbg !128
  %923 = bitcast bfloat %918 to <1 x i16>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %86, <1 x i16> %923, i1 true) #5, !dbg !128
  %924 = bitcast bfloat %920 to <1 x i16>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %87, <1 x i16> %924, i1 true) #5, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %.uncasted.extract = load i32, ptr addrspace(3) %91, align 8, !dbg !128
  %.uncasted.extract18 = load i32, ptr addrspace(3) %93, align 4, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract18, ptr addrspace(1) %912, i1 %24) #5, !dbg !128
  %indvars.iv.next72 = add nuw nsw i64 %indvars.iv71, 512, !dbg !99
  %925 = icmp samesign ult i64 %indvars.iv71, 2560, !dbg !99
  br i1 %925, label %857, label %926, !dbg !99

926:                                              ; preds = %857
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %927 = extractelement <8 x float> %911, i64 7, !dbg !129
  %928 = bitcast float %927 to i32, !dbg !129
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %928, i32 16, i32 31), !dbg !129
  %930 = bitcast i32 %929 to float, !dbg !129
  %931 = fcmp olt float %927, %930, !dbg !131
  %932 = fcmp uno <8 x float> %911, zeroinitializer, !dbg !132
  %933 = extractelement <8 x i1> %932, i64 7, !dbg !134
  %934 = or i1 %933, %931, !dbg !134
  %935 = select i1 %934, float %927, float %930, !dbg !135
  %936 = bitcast float %935 to i32, !dbg !129
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 8, i32 31), !dbg !129
  %938 = bitcast i32 %937 to float, !dbg !129
  %939 = fcmp olt float %935, %938, !dbg !131
  %940 = fcmp uno float %935, 0.000000e+00, !dbg !136
  %941 = or i1 %939, %940, !dbg !134
  %942 = select i1 %941, float %935, float %938, !dbg !135
  %943 = bitcast float %942 to i32, !dbg !129
  %944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %943, i32 4, i32 31), !dbg !129
  %945 = bitcast i32 %944 to float, !dbg !129
  %946 = fcmp olt float %942, %945, !dbg !131
  %947 = fcmp uno float %942, 0.000000e+00, !dbg !136
  %948 = or i1 %946, %947, !dbg !134
  %949 = select i1 %948, float %942, float %945, !dbg !135
  %950 = bitcast float %949 to i32, !dbg !129
  %951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %950, i32 2, i32 31), !dbg !129
  %952 = bitcast i32 %951 to float, !dbg !129
  %953 = fcmp olt float %949, %952, !dbg !131
  %954 = fcmp uno float %949, 0.000000e+00, !dbg !136
  %955 = or i1 %953, %954, !dbg !134
  %956 = select i1 %955, float %949, float %952, !dbg !135
  %957 = bitcast float %956 to i32, !dbg !129
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 1, i32 31), !dbg !129
  %959 = bitcast i32 %958 to float, !dbg !129
  %960 = fcmp olt float %956, %959, !dbg !131
  %961 = fcmp uno float %956, 0.000000e+00, !dbg !136
  %962 = or i1 %960, %961, !dbg !134
  %963 = extractelement <8 x float> %911, i64 6, !dbg !129
  %964 = bitcast float %963 to i32, !dbg !129
  %965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 16, i32 31), !dbg !129
  %966 = bitcast i32 %965 to float, !dbg !129
  %967 = fcmp olt float %963, %966, !dbg !131
  %968 = extractelement <8 x i1> %932, i64 6, !dbg !134
  %969 = or i1 %968, %967, !dbg !134
  %970 = select i1 %969, float %963, float %966, !dbg !135
  %971 = bitcast float %970 to i32, !dbg !129
  %972 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %971, i32 8, i32 31), !dbg !129
  %973 = bitcast i32 %972 to float, !dbg !129
  %974 = fcmp olt float %970, %973, !dbg !131
  %975 = fcmp uno float %970, 0.000000e+00, !dbg !136
  %976 = or i1 %974, %975, !dbg !134
  %977 = select i1 %976, float %970, float %973, !dbg !135
  %978 = bitcast float %977 to i32, !dbg !129
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 4, i32 31), !dbg !129
  %980 = bitcast i32 %979 to float, !dbg !129
  %981 = fcmp olt float %977, %980, !dbg !131
  %982 = fcmp uno float %977, 0.000000e+00, !dbg !136
  %983 = or i1 %981, %982, !dbg !134
  %984 = select i1 %983, float %977, float %980, !dbg !135
  %985 = bitcast float %984 to i32, !dbg !129
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 2, i32 31), !dbg !129
  %987 = bitcast i32 %986 to float, !dbg !129
  %988 = fcmp olt float %984, %987, !dbg !131
  %989 = fcmp uno float %984, 0.000000e+00, !dbg !136
  %990 = or i1 %988, %989, !dbg !134
  %991 = select i1 %990, float %984, float %987, !dbg !135
  %992 = bitcast float %991 to i32, !dbg !129
  %993 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %992, i32 1, i32 31), !dbg !129
  %994 = bitcast i32 %993 to float, !dbg !129
  %995 = fcmp olt float %991, %994, !dbg !131
  %996 = fcmp uno float %991, 0.000000e+00, !dbg !136
  %997 = or i1 %995, %996, !dbg !134
  %998 = extractelement <8 x float> %911, i64 5, !dbg !129
  %999 = bitcast float %998 to i32, !dbg !129
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 16, i32 31), !dbg !129
  %1001 = bitcast i32 %1000 to float, !dbg !129
  %1002 = fcmp olt float %998, %1001, !dbg !131
  %1003 = extractelement <8 x i1> %932, i64 5, !dbg !134
  %1004 = or i1 %1003, %1002, !dbg !134
  %1005 = select i1 %1004, float %998, float %1001, !dbg !135
  %1006 = bitcast float %1005 to i32, !dbg !129
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 8, i32 31), !dbg !129
  %1008 = bitcast i32 %1007 to float, !dbg !129
  %1009 = fcmp olt float %1005, %1008, !dbg !131
  %1010 = fcmp uno float %1005, 0.000000e+00, !dbg !136
  %1011 = or i1 %1009, %1010, !dbg !134
  %1012 = select i1 %1011, float %1005, float %1008, !dbg !135
  %1013 = bitcast float %1012 to i32, !dbg !129
  %1014 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1013, i32 4, i32 31), !dbg !129
  %1015 = bitcast i32 %1014 to float, !dbg !129
  %1016 = fcmp olt float %1012, %1015, !dbg !131
  %1017 = fcmp uno float %1012, 0.000000e+00, !dbg !136
  %1018 = or i1 %1016, %1017, !dbg !134
  %1019 = select i1 %1018, float %1012, float %1015, !dbg !135
  %1020 = bitcast float %1019 to i32, !dbg !129
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 2, i32 31), !dbg !129
  %1022 = bitcast i32 %1021 to float, !dbg !129
  %1023 = fcmp olt float %1019, %1022, !dbg !131
  %1024 = fcmp uno float %1019, 0.000000e+00, !dbg !136
  %1025 = or i1 %1023, %1024, !dbg !134
  %1026 = select i1 %1025, float %1019, float %1022, !dbg !135
  %1027 = bitcast float %1026 to i32, !dbg !129
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 1, i32 31), !dbg !129
  %1029 = bitcast i32 %1028 to float, !dbg !129
  %1030 = fcmp olt float %1026, %1029, !dbg !131
  %1031 = fcmp uno float %1026, 0.000000e+00, !dbg !136
  %1032 = or i1 %1030, %1031, !dbg !134
  %1033 = extractelement <8 x float> %911, i64 4, !dbg !129
  %1034 = bitcast float %1033 to i32, !dbg !129
  %1035 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1034, i32 16, i32 31), !dbg !129
  %1036 = bitcast i32 %1035 to float, !dbg !129
  %1037 = fcmp olt float %1033, %1036, !dbg !131
  %1038 = extractelement <8 x i1> %932, i64 4, !dbg !134
  %1039 = or i1 %1038, %1037, !dbg !134
  %1040 = select i1 %1039, float %1033, float %1036, !dbg !135
  %1041 = bitcast float %1040 to i32, !dbg !129
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1041, i32 8, i32 31), !dbg !129
  %1043 = bitcast i32 %1042 to float, !dbg !129
  %1044 = fcmp olt float %1040, %1043, !dbg !131
  %1045 = fcmp uno float %1040, 0.000000e+00, !dbg !136
  %1046 = or i1 %1044, %1045, !dbg !134
  %1047 = select i1 %1046, float %1040, float %1043, !dbg !135
  %1048 = bitcast float %1047 to i32, !dbg !129
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 4, i32 31), !dbg !129
  %1050 = bitcast i32 %1049 to float, !dbg !129
  %1051 = fcmp olt float %1047, %1050, !dbg !131
  %1052 = fcmp uno float %1047, 0.000000e+00, !dbg !136
  %1053 = or i1 %1051, %1052, !dbg !134
  %1054 = select i1 %1053, float %1047, float %1050, !dbg !135
  %1055 = bitcast float %1054 to i32, !dbg !129
  %1056 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1055, i32 2, i32 31), !dbg !129
  %1057 = bitcast i32 %1056 to float, !dbg !129
  %1058 = fcmp olt float %1054, %1057, !dbg !131
  %1059 = fcmp uno float %1054, 0.000000e+00, !dbg !136
  %1060 = or i1 %1058, %1059, !dbg !134
  %1061 = select i1 %1060, float %1054, float %1057, !dbg !135
  %1062 = bitcast float %1061 to i32, !dbg !129
  %1063 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1062, i32 1, i32 31), !dbg !129
  %1064 = bitcast i32 %1063 to float, !dbg !129
  %1065 = fcmp olt float %1061, %1064, !dbg !131
  %1066 = fcmp uno float %1061, 0.000000e+00, !dbg !136
  %1067 = or i1 %1065, %1066, !dbg !134
  %1068 = select i1 %962, i32 %957, i32 %958, !dbg !135
  %1069 = insertelement <1 x i32> poison, i32 %1068, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %1069, i1 %676) #5, !dbg !129
  %1070 = select i1 %997, i32 %992, i32 %993, !dbg !135
  %1071 = insertelement <1 x i32> poison, i32 %1070, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %684, <1 x i32> %1071, i1 %676) #5, !dbg !129
  %1072 = select i1 %1032, i32 %1027, i32 %1028, !dbg !135
  %1073 = insertelement <1 x i32> poison, i32 %1072, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %691, <1 x i32> %1073, i1 %676) #5, !dbg !129
  %1074 = select i1 %1067, i32 %1062, i32 %1063, !dbg !135
  %1075 = insertelement <1 x i32> poison, i32 %1074, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %1075, i1 %676) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1076 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %705, i1 %704) #5, !dbg !129
  %1077 = bitcast i32 %1076 to float, !dbg !129
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1076, i32 8, i32 31), !dbg !129
  %1079 = bitcast i32 %1078 to float, !dbg !129
  %1080 = fcmp olt float %1077, %1079, !dbg !131
  %1081 = fcmp uno float %1077, 0.000000e+00, !dbg !136
  %1082 = or i1 %1081, %1080, !dbg !134
  %1083 = select i1 %1082, float %1077, float %1079, !dbg !135
  %1084 = bitcast float %1083 to i32, !dbg !129
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 4, i32 31), !dbg !129
  %1086 = bitcast i32 %1085 to float, !dbg !129
  %1087 = fcmp olt float %1083, %1086, !dbg !131
  %1088 = fcmp uno float %1083, 0.000000e+00, !dbg !136
  %1089 = or i1 %1087, %1088, !dbg !134
  %1090 = select i1 %1089, float %1083, float %1086, !dbg !135
  %1091 = bitcast float %1090 to i32, !dbg !129
  %1092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1091, i32 2, i32 31), !dbg !129
  %1093 = bitcast i32 %1092 to float, !dbg !129
  %1094 = fcmp olt float %1090, %1093, !dbg !131
  %1095 = fcmp uno float %1090, 0.000000e+00, !dbg !136
  %1096 = or i1 %1094, %1095, !dbg !134
  %1097 = select i1 %1096, float %1090, float %1093, !dbg !135
  %1098 = bitcast float %1097 to i32, !dbg !129
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 1, i32 31), !dbg !129
  %1100 = bitcast i32 %1099 to float, !dbg !129
  %1101 = fcmp olt float %1097, %1100, !dbg !131
  %1102 = fcmp uno float %1097, 0.000000e+00, !dbg !136
  %1103 = or i1 %1101, %1102, !dbg !134
  %1104 = select i1 %1103, i32 %1098, i32 %1099, !dbg !135
  %1105 = insertelement <1 x i32> poison, i32 %1104, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %1105, i1 %797) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !129
  %1107 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !129
  %1108 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !129
  %1109 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1110 = bitcast float %1106 to i32, !dbg !137
  %1111 = bitcast float %1107 to i32, !dbg !137
  %1112 = bitcast float %1108 to i32, !dbg !137
  %1113 = bitcast float %1109 to i32, !dbg !137
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i1 true) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1114 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %244, !dbg !137
  %1115 = load float, ptr addrspace(3) %1114, align 4, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1116 = extractelement <8 x float> %911, i64 3, !dbg !138
  %1117 = bitcast float %1116 to i32, !dbg !138
  %1118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1117, i32 16, i32 31), !dbg !138
  %1119 = bitcast i32 %1118 to float, !dbg !138
  %1120 = fcmp ogt float %1116, %1119, !dbg !139
  %1121 = extractelement <8 x i1> %932, i64 3, !dbg !140
  %1122 = or i1 %1121, %1120, !dbg !140
  %1123 = select i1 %1122, float %1116, float %1119, !dbg !141
  %1124 = bitcast float %1123 to i32, !dbg !138
  %1125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1124, i32 8, i32 31), !dbg !138
  %1126 = bitcast i32 %1125 to float, !dbg !138
  %1127 = fcmp ogt float %1123, %1126, !dbg !139
  %1128 = fcmp uno float %1123, 0.000000e+00, !dbg !132
  %1129 = or i1 %1127, %1128, !dbg !140
  %1130 = select i1 %1129, float %1123, float %1126, !dbg !141
  %1131 = bitcast float %1130 to i32, !dbg !138
  %1132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1131, i32 4, i32 31), !dbg !138
  %1133 = bitcast i32 %1132 to float, !dbg !138
  %1134 = fcmp ogt float %1130, %1133, !dbg !139
  %1135 = fcmp uno float %1130, 0.000000e+00, !dbg !132
  %1136 = or i1 %1134, %1135, !dbg !140
  %1137 = select i1 %1136, float %1130, float %1133, !dbg !141
  %1138 = bitcast float %1137 to i32, !dbg !138
  %1139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1138, i32 2, i32 31), !dbg !138
  %1140 = bitcast i32 %1139 to float, !dbg !138
  %1141 = fcmp ogt float %1137, %1140, !dbg !139
  %1142 = fcmp uno float %1137, 0.000000e+00, !dbg !132
  %1143 = or i1 %1141, %1142, !dbg !140
  %1144 = select i1 %1143, float %1137, float %1140, !dbg !141
  %1145 = bitcast float %1144 to i32, !dbg !138
  %1146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1145, i32 1, i32 31), !dbg !138
  %1147 = bitcast i32 %1146 to float, !dbg !138
  %1148 = fcmp ogt float %1144, %1147, !dbg !139
  %1149 = fcmp uno float %1144, 0.000000e+00, !dbg !132
  %1150 = or i1 %1148, %1149, !dbg !140
  %1151 = extractelement <8 x float> %911, i64 2, !dbg !138
  %1152 = bitcast float %1151 to i32, !dbg !138
  %1153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1152, i32 16, i32 31), !dbg !138
  %1154 = bitcast i32 %1153 to float, !dbg !138
  %1155 = fcmp ogt float %1151, %1154, !dbg !139
  %1156 = extractelement <8 x i1> %932, i64 2, !dbg !140
  %1157 = or i1 %1156, %1155, !dbg !140
  %1158 = select i1 %1157, float %1151, float %1154, !dbg !141
  %1159 = bitcast float %1158 to i32, !dbg !138
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 8, i32 31), !dbg !138
  %1161 = bitcast i32 %1160 to float, !dbg !138
  %1162 = fcmp ogt float %1158, %1161, !dbg !139
  %1163 = fcmp uno float %1158, 0.000000e+00, !dbg !132
  %1164 = or i1 %1162, %1163, !dbg !140
  %1165 = select i1 %1164, float %1158, float %1161, !dbg !141
  %1166 = bitcast float %1165 to i32, !dbg !138
  %1167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1166, i32 4, i32 31), !dbg !138
  %1168 = bitcast i32 %1167 to float, !dbg !138
  %1169 = fcmp ogt float %1165, %1168, !dbg !139
  %1170 = fcmp uno float %1165, 0.000000e+00, !dbg !132
  %1171 = or i1 %1169, %1170, !dbg !140
  %1172 = select i1 %1171, float %1165, float %1168, !dbg !141
  %1173 = bitcast float %1172 to i32, !dbg !138
  %1174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1173, i32 2, i32 31), !dbg !138
  %1175 = bitcast i32 %1174 to float, !dbg !138
  %1176 = fcmp ogt float %1172, %1175, !dbg !139
  %1177 = fcmp uno float %1172, 0.000000e+00, !dbg !132
  %1178 = or i1 %1176, %1177, !dbg !140
  %1179 = select i1 %1178, float %1172, float %1175, !dbg !141
  %1180 = bitcast float %1179 to i32, !dbg !138
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 1, i32 31), !dbg !138
  %1182 = bitcast i32 %1181 to float, !dbg !138
  %1183 = fcmp ogt float %1179, %1182, !dbg !139
  %1184 = fcmp uno float %1179, 0.000000e+00, !dbg !132
  %1185 = or i1 %1183, %1184, !dbg !140
  %1186 = extractelement <8 x float> %911, i64 1, !dbg !138
  %1187 = bitcast float %1186 to i32, !dbg !138
  %1188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1187, i32 16, i32 31), !dbg !138
  %1189 = bitcast i32 %1188 to float, !dbg !138
  %1190 = fcmp ogt float %1186, %1189, !dbg !139
  %1191 = extractelement <8 x i1> %932, i64 1, !dbg !140
  %1192 = or i1 %1191, %1190, !dbg !140
  %1193 = select i1 %1192, float %1186, float %1189, !dbg !141
  %1194 = bitcast float %1193 to i32, !dbg !138
  %1195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1194, i32 8, i32 31), !dbg !138
  %1196 = bitcast i32 %1195 to float, !dbg !138
  %1197 = fcmp ogt float %1193, %1196, !dbg !139
  %1198 = fcmp uno float %1193, 0.000000e+00, !dbg !132
  %1199 = or i1 %1197, %1198, !dbg !140
  %1200 = select i1 %1199, float %1193, float %1196, !dbg !141
  %1201 = bitcast float %1200 to i32, !dbg !138
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 4, i32 31), !dbg !138
  %1203 = bitcast i32 %1202 to float, !dbg !138
  %1204 = fcmp ogt float %1200, %1203, !dbg !139
  %1205 = fcmp uno float %1200, 0.000000e+00, !dbg !132
  %1206 = or i1 %1204, %1205, !dbg !140
  %1207 = select i1 %1206, float %1200, float %1203, !dbg !141
  %1208 = bitcast float %1207 to i32, !dbg !138
  %1209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1208, i32 2, i32 31), !dbg !138
  %1210 = bitcast i32 %1209 to float, !dbg !138
  %1211 = fcmp ogt float %1207, %1210, !dbg !139
  %1212 = fcmp uno float %1207, 0.000000e+00, !dbg !132
  %1213 = or i1 %1211, %1212, !dbg !140
  %1214 = select i1 %1213, float %1207, float %1210, !dbg !141
  %1215 = bitcast float %1214 to i32, !dbg !138
  %1216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1215, i32 1, i32 31), !dbg !138
  %1217 = bitcast i32 %1216 to float, !dbg !138
  %1218 = fcmp ogt float %1214, %1217, !dbg !139
  %1219 = fcmp uno float %1214, 0.000000e+00, !dbg !132
  %1220 = or i1 %1218, %1219, !dbg !140
  %1221 = extractelement <8 x float> %911, i64 0, !dbg !138
  %1222 = bitcast float %1221 to i32, !dbg !138
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1222, i32 16, i32 31), !dbg !138
  %1224 = bitcast i32 %1223 to float, !dbg !138
  %1225 = fcmp ogt float %1221, %1224, !dbg !139
  %1226 = extractelement <8 x i1> %932, i64 0, !dbg !140
  %1227 = or i1 %1226, %1225, !dbg !140
  %1228 = select i1 %1227, float %1221, float %1224, !dbg !141
  %1229 = bitcast float %1228 to i32, !dbg !138
  %1230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1229, i32 8, i32 31), !dbg !138
  %1231 = bitcast i32 %1230 to float, !dbg !138
  %1232 = fcmp ogt float %1228, %1231, !dbg !139
  %1233 = fcmp uno float %1228, 0.000000e+00, !dbg !132
  %1234 = or i1 %1232, %1233, !dbg !140
  %1235 = select i1 %1234, float %1228, float %1231, !dbg !141
  %1236 = bitcast float %1235 to i32, !dbg !138
  %1237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1236, i32 4, i32 31), !dbg !138
  %1238 = bitcast i32 %1237 to float, !dbg !138
  %1239 = fcmp ogt float %1235, %1238, !dbg !139
  %1240 = fcmp uno float %1235, 0.000000e+00, !dbg !132
  %1241 = or i1 %1239, %1240, !dbg !140
  %1242 = select i1 %1241, float %1235, float %1238, !dbg !141
  %1243 = bitcast float %1242 to i32, !dbg !138
  %1244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1243, i32 2, i32 31), !dbg !138
  %1245 = bitcast i32 %1244 to float, !dbg !138
  %1246 = fcmp ogt float %1242, %1245, !dbg !139
  %1247 = fcmp uno float %1242, 0.000000e+00, !dbg !132
  %1248 = or i1 %1246, %1247, !dbg !140
  %1249 = select i1 %1248, float %1242, float %1245, !dbg !141
  %1250 = bitcast float %1249 to i32, !dbg !138
  %1251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1250, i32 1, i32 31), !dbg !138
  %1252 = bitcast i32 %1251 to float, !dbg !138
  %1253 = fcmp ogt float %1249, %1252, !dbg !139
  %1254 = fcmp uno float %1249, 0.000000e+00, !dbg !132
  %1255 = or i1 %1253, %1254, !dbg !140
  %1256 = select i1 %1150, i32 %1145, i32 %1146, !dbg !141
  %1257 = insertelement <1 x i32> poison, i32 %1256, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %1257, i1 %676) #5, !dbg !138
  %1258 = select i1 %1185, i32 %1180, i32 %1181, !dbg !141
  %1259 = insertelement <1 x i32> poison, i32 %1258, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %684, <1 x i32> %1259, i1 %676) #5, !dbg !138
  %1260 = select i1 %1220, i32 %1215, i32 %1216, !dbg !141
  %1261 = insertelement <1 x i32> poison, i32 %1260, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %691, <1 x i32> %1261, i1 %676) #5, !dbg !138
  %1262 = select i1 %1255, i32 %1250, i32 %1251, !dbg !141
  %1263 = insertelement <1 x i32> poison, i32 %1262, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %1263, i1 %676) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %705, i1 %704) #5, !dbg !138
  %1265 = bitcast i32 %1264 to float, !dbg !138
  %1266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 8, i32 31), !dbg !138
  %1267 = bitcast i32 %1266 to float, !dbg !138
  %1268 = fcmp ogt float %1265, %1267, !dbg !139
  %1269 = fcmp uno float %1265, 0.000000e+00, !dbg !132
  %1270 = or i1 %1269, %1268, !dbg !140
  %1271 = select i1 %1270, float %1265, float %1267, !dbg !141
  %1272 = bitcast float %1271 to i32, !dbg !138
  %1273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 4, i32 31), !dbg !138
  %1274 = bitcast i32 %1273 to float, !dbg !138
  %1275 = fcmp ogt float %1271, %1274, !dbg !139
  %1276 = fcmp uno float %1271, 0.000000e+00, !dbg !132
  %1277 = or i1 %1275, %1276, !dbg !140
  %1278 = select i1 %1277, float %1271, float %1274, !dbg !141
  %1279 = bitcast float %1278 to i32, !dbg !138
  %1280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1279, i32 2, i32 31), !dbg !138
  %1281 = bitcast i32 %1280 to float, !dbg !138
  %1282 = fcmp ogt float %1278, %1281, !dbg !139
  %1283 = fcmp uno float %1278, 0.000000e+00, !dbg !132
  %1284 = or i1 %1282, %1283, !dbg !140
  %1285 = select i1 %1284, float %1278, float %1281, !dbg !141
  %1286 = bitcast float %1285 to i32, !dbg !138
  %1287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1286, i32 1, i32 31), !dbg !138
  %1288 = bitcast i32 %1287 to float, !dbg !138
  %1289 = fcmp ogt float %1285, %1288, !dbg !139
  %1290 = fcmp uno float %1285, 0.000000e+00, !dbg !132
  %1291 = or i1 %1289, %1290, !dbg !140
  %1292 = select i1 %1291, i32 %1286, i32 %1287, !dbg !141
  %1293 = insertelement <1 x i32> poison, i32 %1292, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %1293, i1 %797) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1294 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !138
  %1295 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !138
  %1296 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !138
  %1297 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1298 = bitcast float %1294 to i32, !dbg !142
  %1299 = bitcast float %1295 to i32, !dbg !142
  %1300 = bitcast float %1296 to i32, !dbg !142
  %1301 = bitcast float %1297 to i32, !dbg !142
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1298, i32 %1299, i32 %1300, i32 %1301, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1302 = load float, ptr addrspace(3) %1114, align 4, !dbg !142
  %1303 = sext i32 %245 to i64, !dbg !143
  %1304 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1303, !dbg !143
  %1305 = fptrunc float %1115 to bfloat, !dbg !137
  %1306 = and i32 %19, 508, !dbg !137
  %1307 = icmp eq i32 %1306, 0, !dbg !137
  %1308 = bitcast bfloat %1305 to i16, !dbg !137
  %1309 = and i1 %1307, %246, !dbg !137
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1308, ptr addrspace(1) %1304, i1 %1309) #5, !dbg !137
  %1310 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1303, !dbg !144
  %1311 = fptrunc float %1302 to bfloat, !dbg !142
  %1312 = bitcast bfloat %1311 to i16, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1312, ptr addrspace(1) %1310, i1 %1309) #5, !dbg !142
  %1313 = insertelement <4 x float> poison, float %1109, i64 0, !dbg !145
  %1314 = insertelement <4 x float> %1313, float %1108, i64 1, !dbg !145
  %1315 = insertelement <4 x float> %1314, float %1107, i64 2, !dbg !145
  %1316 = insertelement <4 x float> %1315, float %1106, i64 3, !dbg !145
  %1317 = fcmp oge <4 x float> %1316, zeroinitializer, !dbg !145
  %1318 = select <4 x i1> %1317, <4 x float> zeroinitializer, <4 x float> %1316, !dbg !145
  %1319 = fsub <4 x float> zeroinitializer, %1318, !dbg !147
  %1320 = insertelement <4 x float> poison, float %1297, i64 0, !dbg !148
  %1321 = insertelement <4 x float> %1320, float %1296, i64 1, !dbg !148
  %1322 = insertelement <4 x float> %1321, float %1295, i64 2, !dbg !148
  %1323 = insertelement <4 x float> %1322, float %1294, i64 3, !dbg !148
  %1324 = fcmp ole <4 x float> %1323, zeroinitializer, !dbg !148
  %1325 = select <4 x i1> %1324, <4 x float> zeroinitializer, <4 x float> %1323, !dbg !148
  %1326 = fcmp ogt <4 x float> %1319, %1325, !dbg !150
  %1327 = fcmp uno <4 x float> %1319, zeroinitializer, !dbg !152
  %1328 = or <4 x i1> %1327, %1326, !dbg !153
  %1329 = select <4 x i1> %1328, <4 x float> %1319, <4 x float> %1325, !dbg !154
  %1330 = fmul <4 x float> %1329, splat (float 0x3F80204080000000), !dbg !155
  %1331 = fcmp ogt <4 x float> %1330, splat (float 0x3EE4F8B580000000), !dbg !156
  %1332 = extractelement <4 x float> %1330, i64 3, !dbg !158
  %1333 = fcmp uno float %1332, 0.000000e+00, !dbg !159
  %1334 = extractelement <4 x float> %1330, i64 2, !dbg !158
  %1335 = fcmp uno float %1334, 0.000000e+00, !dbg !159
  %1336 = extractelement <4 x float> %1330, i64 1, !dbg !158
  %1337 = fcmp uno float %1336, 0.000000e+00, !dbg !159
  %1338 = extractelement <4 x float> %1330, i64 0, !dbg !158
  %1339 = fcmp uno float %1338, 0.000000e+00, !dbg !159
  %1340 = extractelement <4 x i1> %1331, i64 3, !dbg !160
  %1341 = or i1 %1340, %1333, !dbg !160
  %1342 = extractelement <4 x i1> %1331, i64 2, !dbg !160
  %1343 = or i1 %1342, %1335, !dbg !160
  %1344 = extractelement <4 x i1> %1331, i64 1, !dbg !160
  %1345 = or i1 %1344, %1337, !dbg !160
  %1346 = extractelement <4 x i1> %1331, i64 0, !dbg !160
  %1347 = or i1 %1346, %1339, !dbg !160
  %1348 = select i1 %1341, float %1332, float 0x3EE4F8B580000000, !dbg !158
  %1349 = select i1 %1343, float %1334, float 0x3EE4F8B580000000, !dbg !158
  %1350 = select i1 %1345, float %1336, float 0x3EE4F8B580000000, !dbg !158
  %1351 = select i1 %1347, float %1338, float 0x3EE4F8B580000000, !dbg !158
  %1352 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1348), !dbg !161
  %1353 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1349), !dbg !161
  %1354 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1350), !dbg !161
  %1355 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1351), !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !162
  %1356 = bitcast float %1352 to <1 x i32>, !dbg !162
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1356, i1 true) #5, !dbg !162
  %1357 = bitcast float %1353 to <1 x i32>, !dbg !162
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1357, i1 true) #5, !dbg !162
  %1358 = bitcast float %1354 to <1 x i32>, !dbg !162
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1358, i1 true) #5, !dbg !162
  %1359 = bitcast float %1355 to <1 x i32>, !dbg !162
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1359, i1 true) #5, !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !162
  %.idx = shl nuw nsw i32 %21, 3, !dbg !162
  %1360 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !162
  %1361 = load float, ptr addrspace(3) %1360, align 8, !dbg !162
  %1362 = sext i32 %57 to i64, !dbg !163
  %1363 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1362, !dbg !163
  %1364 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1363, i1 %24) #5, !dbg !164
  %1365 = extractvalue { i32, i32 } %1364, 0, !dbg !164
  %1366 = bitcast i32 %1365 to <2 x bfloat>, !dbg !164
  %1367 = extractvalue { i32, i32 } %1364, 1, !dbg !164
  %1368 = bitcast i32 %1367 to <2 x bfloat>, !dbg !164
  %1369 = extractelement <2 x bfloat> %1366, i64 0, !dbg !164
  %1370 = extractelement <2 x bfloat> %1366, i64 1, !dbg !164
  %1371 = extractelement <2 x bfloat> %1368, i64 0, !dbg !164
  %1372 = extractelement <2 x bfloat> %1368, i64 1, !dbg !164
  %1373 = fpext bfloat %1369 to float, !dbg !165
  %1374 = fpext bfloat %1370 to float, !dbg !165
  %1375 = fpext bfloat %1371 to float, !dbg !165
  %1376 = fpext bfloat %1372 to float, !dbg !165
  %1377 = fmul float %1361, %1373, !dbg !162
  %1378 = fmul float %1361, %1374, !dbg !162
  %1379 = fmul float %1361, %1375, !dbg !162
  %1380 = fmul float %1361, %1376, !dbg !162
  %1381 = tail call float @llvm.nvvm.round.f(float %1377) #5, !dbg !166
  %1382 = tail call float @llvm.nvvm.round.f(float %1378) #5, !dbg !166
  %1383 = tail call float @llvm.nvvm.round.f(float %1379) #5, !dbg !166
  %1384 = tail call float @llvm.nvvm.round.f(float %1380) #5, !dbg !166
  %1385 = insertelement <4 x float> poison, float %1381, i64 0, !dbg !167
  %1386 = insertelement <4 x float> %1385, float %1382, i64 1, !dbg !167
  %1387 = insertelement <4 x float> %1386, float %1383, i64 2, !dbg !167
  %1388 = insertelement <4 x float> %1387, float %1384, i64 3, !dbg !167
  %1389 = fcmp ogt <4 x float> %1388, splat (float -1.270000e+02), !dbg !167
  %1390 = fcmp uno <4 x float> %1388, zeroinitializer, !dbg !169
  %1391 = or <4 x i1> %1389, %1390, !dbg !170
  %1392 = select <4 x i1> %1391, <4 x float> %1388, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1393 = fcmp olt <4 x float> %1392, splat (float 1.270000e+02), !dbg !172
  %1394 = fcmp uno <4 x float> %1392, zeroinitializer, !dbg !174
  %1395 = or <4 x i1> %1393, %1394, !dbg !175
  %1396 = fptosi <4 x float> %1392 to <4 x i8>, !dbg !176
  %1397 = select <4 x i1> %1395, <4 x i8> %1396, <4 x i8> splat (i8 127), !dbg !177
  %1398 = getelementptr i8, ptr addrspace(1) %12, i64 %1362, !dbg !178
  %1399 = bitcast <4 x i8> %1397 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1399, ptr addrspace(1) %1398, i1 %24) #5, !dbg !179
  %1400 = or disjoint i32 %57, 512, !dbg !180
  %1401 = sext i32 %1400 to i64, !dbg !163
  %1402 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1401, !dbg !163
  %1403 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1402, i1 %24) #5, !dbg !164
  %1404 = extractvalue { i32, i32 } %1403, 0, !dbg !164
  %1405 = bitcast i32 %1404 to <2 x bfloat>, !dbg !164
  %1406 = extractvalue { i32, i32 } %1403, 1, !dbg !164
  %1407 = bitcast i32 %1406 to <2 x bfloat>, !dbg !164
  %1408 = extractelement <2 x bfloat> %1405, i64 0, !dbg !164
  %1409 = extractelement <2 x bfloat> %1405, i64 1, !dbg !164
  %1410 = extractelement <2 x bfloat> %1407, i64 0, !dbg !164
  %1411 = extractelement <2 x bfloat> %1407, i64 1, !dbg !164
  %1412 = fpext bfloat %1408 to float, !dbg !165
  %1413 = fpext bfloat %1409 to float, !dbg !165
  %1414 = fpext bfloat %1410 to float, !dbg !165
  %1415 = fpext bfloat %1411 to float, !dbg !165
  %1416 = fmul float %1361, %1412, !dbg !162
  %1417 = fmul float %1361, %1413, !dbg !162
  %1418 = fmul float %1361, %1414, !dbg !162
  %1419 = fmul float %1361, %1415, !dbg !162
  %1420 = tail call float @llvm.nvvm.round.f(float %1416) #5, !dbg !166
  %1421 = tail call float @llvm.nvvm.round.f(float %1417) #5, !dbg !166
  %1422 = tail call float @llvm.nvvm.round.f(float %1418) #5, !dbg !166
  %1423 = tail call float @llvm.nvvm.round.f(float %1419) #5, !dbg !166
  %1424 = insertelement <4 x float> poison, float %1420, i64 0, !dbg !167
  %1425 = insertelement <4 x float> %1424, float %1421, i64 1, !dbg !167
  %1426 = insertelement <4 x float> %1425, float %1422, i64 2, !dbg !167
  %1427 = insertelement <4 x float> %1426, float %1423, i64 3, !dbg !167
  %1428 = fcmp ogt <4 x float> %1427, splat (float -1.270000e+02), !dbg !167
  %1429 = fcmp uno <4 x float> %1427, zeroinitializer, !dbg !169
  %1430 = or <4 x i1> %1428, %1429, !dbg !170
  %1431 = select <4 x i1> %1430, <4 x float> %1427, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1432 = fcmp olt <4 x float> %1431, splat (float 1.270000e+02), !dbg !172
  %1433 = fcmp uno <4 x float> %1431, zeroinitializer, !dbg !174
  %1434 = or <4 x i1> %1432, %1433, !dbg !175
  %1435 = fptosi <4 x float> %1431 to <4 x i8>, !dbg !176
  %1436 = select <4 x i1> %1434, <4 x i8> %1435, <4 x i8> splat (i8 127), !dbg !177
  %1437 = getelementptr i8, ptr addrspace(1) %12, i64 %1401, !dbg !178
  %1438 = bitcast <4 x i8> %1436 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1438, ptr addrspace(1) %1437, i1 %24) #5, !dbg !179
  %1439 = add i32 %57, 1024, !dbg !180
  %1440 = sext i32 %1439 to i64, !dbg !163
  %1441 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1440, !dbg !163
  %1442 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1441, i1 %24) #5, !dbg !164
  %1443 = extractvalue { i32, i32 } %1442, 0, !dbg !164
  %1444 = bitcast i32 %1443 to <2 x bfloat>, !dbg !164
  %1445 = extractvalue { i32, i32 } %1442, 1, !dbg !164
  %1446 = bitcast i32 %1445 to <2 x bfloat>, !dbg !164
  %1447 = extractelement <2 x bfloat> %1444, i64 0, !dbg !164
  %1448 = extractelement <2 x bfloat> %1444, i64 1, !dbg !164
  %1449 = extractelement <2 x bfloat> %1446, i64 0, !dbg !164
  %1450 = extractelement <2 x bfloat> %1446, i64 1, !dbg !164
  %1451 = fpext bfloat %1447 to float, !dbg !165
  %1452 = fpext bfloat %1448 to float, !dbg !165
  %1453 = fpext bfloat %1449 to float, !dbg !165
  %1454 = fpext bfloat %1450 to float, !dbg !165
  %1455 = fmul float %1361, %1451, !dbg !162
  %1456 = fmul float %1361, %1452, !dbg !162
  %1457 = fmul float %1361, %1453, !dbg !162
  %1458 = fmul float %1361, %1454, !dbg !162
  %1459 = tail call float @llvm.nvvm.round.f(float %1455) #5, !dbg !166
  %1460 = tail call float @llvm.nvvm.round.f(float %1456) #5, !dbg !166
  %1461 = tail call float @llvm.nvvm.round.f(float %1457) #5, !dbg !166
  %1462 = tail call float @llvm.nvvm.round.f(float %1458) #5, !dbg !166
  %1463 = insertelement <4 x float> poison, float %1459, i64 0, !dbg !167
  %1464 = insertelement <4 x float> %1463, float %1460, i64 1, !dbg !167
  %1465 = insertelement <4 x float> %1464, float %1461, i64 2, !dbg !167
  %1466 = insertelement <4 x float> %1465, float %1462, i64 3, !dbg !167
  %1467 = fcmp ogt <4 x float> %1466, splat (float -1.270000e+02), !dbg !167
  %1468 = fcmp uno <4 x float> %1466, zeroinitializer, !dbg !169
  %1469 = or <4 x i1> %1467, %1468, !dbg !170
  %1470 = select <4 x i1> %1469, <4 x float> %1466, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1471 = fcmp olt <4 x float> %1470, splat (float 1.270000e+02), !dbg !172
  %1472 = fcmp uno <4 x float> %1470, zeroinitializer, !dbg !174
  %1473 = or <4 x i1> %1471, %1472, !dbg !175
  %1474 = fptosi <4 x float> %1470 to <4 x i8>, !dbg !176
  %1475 = select <4 x i1> %1473, <4 x i8> %1474, <4 x i8> splat (i8 127), !dbg !177
  %1476 = getelementptr i8, ptr addrspace(1) %12, i64 %1440, !dbg !178
  %1477 = bitcast <4 x i8> %1475 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1477, ptr addrspace(1) %1476, i1 %24) #5, !dbg !179
  %1478 = add i32 %57, 1536, !dbg !180
  %1479 = sext i32 %1478 to i64, !dbg !163
  %1480 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1479, !dbg !163
  %1481 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1480, i1 %24) #5, !dbg !164
  %1482 = extractvalue { i32, i32 } %1481, 0, !dbg !164
  %1483 = bitcast i32 %1482 to <2 x bfloat>, !dbg !164
  %1484 = extractvalue { i32, i32 } %1481, 1, !dbg !164
  %1485 = bitcast i32 %1484 to <2 x bfloat>, !dbg !164
  %1486 = extractelement <2 x bfloat> %1483, i64 0, !dbg !164
  %1487 = extractelement <2 x bfloat> %1483, i64 1, !dbg !164
  %1488 = extractelement <2 x bfloat> %1485, i64 0, !dbg !164
  %1489 = extractelement <2 x bfloat> %1485, i64 1, !dbg !164
  %1490 = fpext bfloat %1486 to float, !dbg !165
  %1491 = fpext bfloat %1487 to float, !dbg !165
  %1492 = fpext bfloat %1488 to float, !dbg !165
  %1493 = fpext bfloat %1489 to float, !dbg !165
  %1494 = fmul float %1361, %1490, !dbg !162
  %1495 = fmul float %1361, %1491, !dbg !162
  %1496 = fmul float %1361, %1492, !dbg !162
  %1497 = fmul float %1361, %1493, !dbg !162
  %1498 = tail call float @llvm.nvvm.round.f(float %1494) #5, !dbg !166
  %1499 = tail call float @llvm.nvvm.round.f(float %1495) #5, !dbg !166
  %1500 = tail call float @llvm.nvvm.round.f(float %1496) #5, !dbg !166
  %1501 = tail call float @llvm.nvvm.round.f(float %1497) #5, !dbg !166
  %1502 = insertelement <4 x float> poison, float %1498, i64 0, !dbg !167
  %1503 = insertelement <4 x float> %1502, float %1499, i64 1, !dbg !167
  %1504 = insertelement <4 x float> %1503, float %1500, i64 2, !dbg !167
  %1505 = insertelement <4 x float> %1504, float %1501, i64 3, !dbg !167
  %1506 = fcmp ogt <4 x float> %1505, splat (float -1.270000e+02), !dbg !167
  %1507 = fcmp uno <4 x float> %1505, zeroinitializer, !dbg !169
  %1508 = or <4 x i1> %1506, %1507, !dbg !170
  %1509 = select <4 x i1> %1508, <4 x float> %1505, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1510 = fcmp olt <4 x float> %1509, splat (float 1.270000e+02), !dbg !172
  %1511 = fcmp uno <4 x float> %1509, zeroinitializer, !dbg !174
  %1512 = or <4 x i1> %1510, %1511, !dbg !175
  %1513 = fptosi <4 x float> %1509 to <4 x i8>, !dbg !176
  %1514 = select <4 x i1> %1512, <4 x i8> %1513, <4 x i8> splat (i8 127), !dbg !177
  %1515 = getelementptr i8, ptr addrspace(1) %12, i64 %1479, !dbg !178
  %1516 = bitcast <4 x i8> %1514 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1516, ptr addrspace(1) %1515, i1 %24) #5, !dbg !179
  %1517 = add i32 %57, 2048, !dbg !180
  %1518 = sext i32 %1517 to i64, !dbg !163
  %1519 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1518, !dbg !163
  %1520 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1519, i1 %24) #5, !dbg !164
  %1521 = extractvalue { i32, i32 } %1520, 0, !dbg !164
  %1522 = bitcast i32 %1521 to <2 x bfloat>, !dbg !164
  %1523 = extractvalue { i32, i32 } %1520, 1, !dbg !164
  %1524 = bitcast i32 %1523 to <2 x bfloat>, !dbg !164
  %1525 = extractelement <2 x bfloat> %1522, i64 0, !dbg !164
  %1526 = extractelement <2 x bfloat> %1522, i64 1, !dbg !164
  %1527 = extractelement <2 x bfloat> %1524, i64 0, !dbg !164
  %1528 = extractelement <2 x bfloat> %1524, i64 1, !dbg !164
  %1529 = fpext bfloat %1525 to float, !dbg !165
  %1530 = fpext bfloat %1526 to float, !dbg !165
  %1531 = fpext bfloat %1527 to float, !dbg !165
  %1532 = fpext bfloat %1528 to float, !dbg !165
  %1533 = fmul float %1361, %1529, !dbg !162
  %1534 = fmul float %1361, %1530, !dbg !162
  %1535 = fmul float %1361, %1531, !dbg !162
  %1536 = fmul float %1361, %1532, !dbg !162
  %1537 = tail call float @llvm.nvvm.round.f(float %1533) #5, !dbg !166
  %1538 = tail call float @llvm.nvvm.round.f(float %1534) #5, !dbg !166
  %1539 = tail call float @llvm.nvvm.round.f(float %1535) #5, !dbg !166
  %1540 = tail call float @llvm.nvvm.round.f(float %1536) #5, !dbg !166
  %1541 = insertelement <4 x float> poison, float %1537, i64 0, !dbg !167
  %1542 = insertelement <4 x float> %1541, float %1538, i64 1, !dbg !167
  %1543 = insertelement <4 x float> %1542, float %1539, i64 2, !dbg !167
  %1544 = insertelement <4 x float> %1543, float %1540, i64 3, !dbg !167
  %1545 = fcmp ogt <4 x float> %1544, splat (float -1.270000e+02), !dbg !167
  %1546 = fcmp uno <4 x float> %1544, zeroinitializer, !dbg !169
  %1547 = or <4 x i1> %1545, %1546, !dbg !170
  %1548 = select <4 x i1> %1547, <4 x float> %1544, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1549 = fcmp olt <4 x float> %1548, splat (float 1.270000e+02), !dbg !172
  %1550 = fcmp uno <4 x float> %1548, zeroinitializer, !dbg !174
  %1551 = or <4 x i1> %1549, %1550, !dbg !175
  %1552 = fptosi <4 x float> %1548 to <4 x i8>, !dbg !176
  %1553 = select <4 x i1> %1551, <4 x i8> %1552, <4 x i8> splat (i8 127), !dbg !177
  %1554 = getelementptr i8, ptr addrspace(1) %12, i64 %1518, !dbg !178
  %1555 = bitcast <4 x i8> %1553 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1555, ptr addrspace(1) %1554, i1 %24) #5, !dbg !179
  %1556 = add i32 %57, 2560, !dbg !180
  %1557 = sext i32 %1556 to i64, !dbg !163
  %1558 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1557, !dbg !163
  %1559 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1558, i1 %24) #5, !dbg !164
  %1560 = extractvalue { i32, i32 } %1559, 0, !dbg !164
  %1561 = bitcast i32 %1560 to <2 x bfloat>, !dbg !164
  %1562 = extractvalue { i32, i32 } %1559, 1, !dbg !164
  %1563 = bitcast i32 %1562 to <2 x bfloat>, !dbg !164
  %1564 = extractelement <2 x bfloat> %1561, i64 0, !dbg !164
  %1565 = extractelement <2 x bfloat> %1561, i64 1, !dbg !164
  %1566 = extractelement <2 x bfloat> %1563, i64 0, !dbg !164
  %1567 = extractelement <2 x bfloat> %1563, i64 1, !dbg !164
  %1568 = fpext bfloat %1564 to float, !dbg !165
  %1569 = fpext bfloat %1565 to float, !dbg !165
  %1570 = fpext bfloat %1566 to float, !dbg !165
  %1571 = fpext bfloat %1567 to float, !dbg !165
  %1572 = fmul float %1361, %1568, !dbg !162
  %1573 = fmul float %1361, %1569, !dbg !162
  %1574 = fmul float %1361, %1570, !dbg !162
  %1575 = fmul float %1361, %1571, !dbg !162
  %1576 = tail call float @llvm.nvvm.round.f(float %1572) #5, !dbg !166
  %1577 = tail call float @llvm.nvvm.round.f(float %1573) #5, !dbg !166
  %1578 = tail call float @llvm.nvvm.round.f(float %1574) #5, !dbg !166
  %1579 = tail call float @llvm.nvvm.round.f(float %1575) #5, !dbg !166
  %1580 = insertelement <4 x float> poison, float %1576, i64 0, !dbg !167
  %1581 = insertelement <4 x float> %1580, float %1577, i64 1, !dbg !167
  %1582 = insertelement <4 x float> %1581, float %1578, i64 2, !dbg !167
  %1583 = insertelement <4 x float> %1582, float %1579, i64 3, !dbg !167
  %1584 = fcmp ogt <4 x float> %1583, splat (float -1.270000e+02), !dbg !167
  %1585 = fcmp uno <4 x float> %1583, zeroinitializer, !dbg !169
  %1586 = or <4 x i1> %1584, %1585, !dbg !170
  %1587 = select <4 x i1> %1586, <4 x float> %1583, <4 x float> splat (float -1.270000e+02), !dbg !171
  %1588 = fcmp olt <4 x float> %1587, splat (float 1.270000e+02), !dbg !172
  %1589 = fcmp uno <4 x float> %1587, zeroinitializer, !dbg !174
  %1590 = or <4 x i1> %1588, %1589, !dbg !175
  %1591 = fptosi <4 x float> %1587 to <4 x i8>, !dbg !176
  %1592 = select <4 x i1> %1590, <4 x i8> %1591, <4 x i8> splat (i8 127), !dbg !177
  %1593 = getelementptr i8, ptr addrspace(1) %12, i64 %1557, !dbg !178
  %1594 = bitcast <4 x i8> %1592 to i32, !dbg !179
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1594, ptr addrspace(1) %1593, i1 %24) #5, !dbg !179
  ret void, !dbg !181
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 71, column: 60, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 68, column: 55, scope: !6)
!68 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !67)
!69 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !67)
!70 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !67)
!71 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !67)
!72 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !67)
!73 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !67)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !67)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !67)
!76 = !DILocation(line: 72, column: 68, scope: !6)
!77 = !DILocation(line: 73, column: 29, scope: !6)
!78 = !DILocation(line: 73, column: 53, scope: !6)
!79 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !80)
!80 = !DILocation(line: 74, column: 85, scope: !6)
!81 = !DILocation(line: 217, column: 21, scope: !82, inlinedAt: !80)
!82 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!83 = !DILocation(line: 218, column: 28, scope: !82, inlinedAt: !80)
!84 = !DILocation(line: 219, column: 39, scope: !82, inlinedAt: !80)
!85 = !DILocation(line: 219, column: 60, scope: !82, inlinedAt: !80)
!86 = !DILocation(line: 219, column: 49, scope: !82, inlinedAt: !80)
!87 = !DILocation(line: 221, column: 25, scope: !82, inlinedAt: !80)
!88 = !DILocation(line: 221, column: 17, scope: !82, inlinedAt: !80)
!89 = !DILocation(line: 222, column: 15, scope: !82, inlinedAt: !80)
!90 = !DILocation(line: 222, column: 30, scope: !82, inlinedAt: !80)
!91 = !DILocation(line: 222, column: 38, scope: !82, inlinedAt: !80)
!92 = !DILocation(line: 222, column: 49, scope: !82, inlinedAt: !80)
!93 = !DILocation(line: 222, column: 22, scope: !82, inlinedAt: !80)
!94 = !DILocation(line: 94, column: 25, scope: !6)
!95 = !DILocation(line: 96, column: 24, scope: !6)
!96 = !DILocation(line: 97, column: 32, scope: !6)
!97 = !DILocation(line: 98, column: 24, scope: !6)
!98 = !DILocation(line: 92, column: 24, scope: !6)
!99 = !DILocation(line: 80, column: 40, scope: !6)
!100 = !DILocation(line: 81, column: 31, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 53, scope: !6)
!104 = !DILocation(line: 87, column: 35, scope: !6)
!105 = !DILocation(line: 88, column: 35, scope: !6)
!106 = !DILocation(line: 89, column: 42, scope: !6)
!107 = !DILocation(line: 89, column: 35, scope: !6)
!108 = !DILocation(line: 90, column: 35, scope: !6)
!109 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !110)
!110 = !DILocation(line: 111, column: 47, scope: !6)
!111 = !DILocation(line: 86, column: 115, scope: !6)
!112 = !DILocation(line: 87, column: 50, scope: !6)
!113 = !DILocation(line: 88, column: 50, scope: !6)
!114 = !DILocation(line: 88, column: 103, scope: !6)
!115 = !DILocation(line: 89, column: 49, scope: !6)
!116 = !DILocation(line: 90, column: 49, scope: !6)
!117 = !DILocation(line: 90, column: 102, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 103, column: 24, scope: !6)
!120 = !DILocation(line: 104, column: 24, scope: !6)
!121 = !DILocation(line: 106, column: 24, scope: !6)
!122 = !DILocation(line: 107, column: 24, scope: !6)
!123 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !110)
!124 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !110)
!125 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !110)
!126 = !DILocation(line: 112, column: 50, scope: !6)
!127 = !DILocation(line: 113, column: 29, scope: !6)
!128 = !DILocation(line: 113, column: 53, scope: !6)
!129 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 114, column: 40, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !82, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 21, scope: !82, inlinedAt: !133)
!133 = !DILocation(line: 115, column: 40, scope: !6)
!134 = !DILocation(line: 96, column: 16, scope: !82, inlinedAt: !130)
!135 = !DILocation(line: 97, column: 29, scope: !82, inlinedAt: !130)
!136 = !DILocation(line: 96, column: 21, scope: !82, inlinedAt: !130)
!137 = !DILocation(line: 116, column: 37, scope: !6)
!138 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !133)
!139 = !DILocation(line: 102, column: 15, scope: !82, inlinedAt: !133)
!140 = !DILocation(line: 104, column: 16, scope: !82, inlinedAt: !133)
!141 = !DILocation(line: 105, column: 29, scope: !82, inlinedAt: !133)
!142 = !DILocation(line: 117, column: 37, scope: !6)
!143 = !DILocation(line: 116, column: 25, scope: !6)
!144 = !DILocation(line: 117, column: 25, scope: !6)
!145 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !146)
!146 = !DILocation(line: 126, column: 46, scope: !6)
!147 = !DILocation(line: 127, column: 17, scope: !6)
!148 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !149)
!149 = !DILocation(line: 128, column: 46, scope: !6)
!150 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !151)
!151 = !DILocation(line: 129, column: 46, scope: !6)
!152 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !151)
!153 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !151)
!154 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !151)
!155 = !DILocation(line: 131, column: 24, scope: !6)
!156 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 134, column: 46, scope: !6)
!158 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !157)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !157)
!161 = !DILocation(line: 137, column: 25, scope: !6)
!162 = !DILocation(line: 140, column: 24, scope: !6)
!163 = !DILocation(line: 124, column: 36, scope: !6)
!164 = !DILocation(line: 124, column: 53, scope: !6)
!165 = !DILocation(line: 124, column: 115, scope: !6)
!166 = !DILocation(line: 141, column: 36, scope: !6)
!167 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !168)
!168 = !DILocation(line: 144, column: 46, scope: !6)
!169 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !168)
!170 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !168)
!171 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !168)
!172 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !173)
!173 = !DILocation(line: 146, column: 46, scope: !6)
!174 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !173)
!175 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !173)
!176 = !DILocation(line: 148, column: 25, scope: !6)
!177 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !173)
!178 = !DILocation(line: 149, column: 29, scope: !6)
!179 = !DILocation(line: 149, column: 53, scope: !6)
!180 = !DILocation(line: 124, column: 43, scope: !6)
!181 = !DILocation(line: 118, column: 4, scope: !6)
