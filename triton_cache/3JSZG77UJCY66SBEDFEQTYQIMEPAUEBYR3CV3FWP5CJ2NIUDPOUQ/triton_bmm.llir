; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 32, !dbg !19
  %18 = lshr i32 %15, 3, !dbg !19
  %19 = and i32 %18, 15, !dbg !19
  %20 = or disjoint i32 %19, 16, !dbg !19
  %21 = or disjoint i32 %19, 32, !dbg !19
  %22 = or disjoint i32 %19, 48, !dbg !19
  %23 = shl i32 %15, 3, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = and i32 %23, 16, !dbg !19
  %26 = and i32 %23, 24, !dbg !19
  %27 = and i32 %23, 32, !dbg !19
  %28 = and i32 %23, 56, !dbg !19
  %29 = or disjoint i32 %14, %19, !dbg !20
  %30 = or disjoint i32 %14, %20, !dbg !20
  %31 = or disjoint i32 %14, %21, !dbg !20
  %32 = or disjoint i32 %14, %22, !dbg !20
  %33 = shl nsw i32 %13, 6, !dbg !21
  %34 = or disjoint i32 %33, %19, !dbg !22
  %35 = or disjoint i32 %33, %20, !dbg !22
  %36 = or disjoint i32 %33, %21, !dbg !22
  %37 = or disjoint i32 %33, %22, !dbg !22
  %38 = or disjoint i32 %33, %28, !dbg !22
  %39 = srem i32 %29, 512, !dbg !23
  %40 = srem i32 %30, 512, !dbg !23
  %41 = srem i32 %31, 512, !dbg !23
  %42 = srem i32 %32, 512, !dbg !23
  %43 = srem i32 %34, 512, !dbg !24
  %44 = srem i32 %35, 512, !dbg !24
  %45 = srem i32 %36, 512, !dbg !24
  %46 = srem i32 %37, 512, !dbg !24
  %47 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %48 = shl nsw i32 %39, 12, !dbg !26
  %49 = shl nsw i32 %40, 12, !dbg !26
  %50 = shl nsw i32 %41, 12, !dbg !26
  %51 = shl nsw i32 %42, 12, !dbg !26
  %52 = shl i32 %47, 6, !dbg !27
  %53 = or disjoint i32 %28, %52, !dbg !28
  %54 = add i32 %53, %48, !dbg !29
  %55 = add i32 %53, %49, !dbg !29
  %56 = add i32 %53, %50, !dbg !29
  %57 = add i32 %53, %51, !dbg !29
  %58 = sext i32 %54 to i64, !dbg !30
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !30
  %60 = sext i32 %55 to i64, !dbg !30
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !30
  %62 = sext i32 %56 to i64, !dbg !30
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !30
  %64 = sext i32 %57 to i64, !dbg !30
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !30
  %66 = shl nsw i32 %43, 12, !dbg !31
  %67 = shl nsw i32 %44, 12, !dbg !31
  %68 = shl nsw i32 %45, 12, !dbg !31
  %69 = shl nsw i32 %46, 12, !dbg !31
  %70 = add i32 %53, %66, !dbg !32
  %71 = add i32 %53, %67, !dbg !32
  %72 = add i32 %53, %68, !dbg !32
  %73 = add i32 %53, %69, !dbg !32
  %74 = sext i32 %70 to i64, !dbg !33
  %75 = getelementptr bfloat, ptr addrspace(1) %1, i64 %74, !dbg !33
  %76 = sext i32 %71 to i64, !dbg !33
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !33
  %78 = sext i32 %72 to i64, !dbg !33
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %78, !dbg !33
  %80 = sext i32 %73 to i64, !dbg !33
  %81 = getelementptr bfloat, ptr addrspace(1) %1, i64 %80, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %59) #2, !dbg !34
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !34
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !34
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !34
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !34
  %89 = shufflevector <2 x bfloat> %88, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %90 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !34
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !34
  %92 = shufflevector <2 x bfloat> %91, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %61) #2, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !34
  %100 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %101 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !34
  %103 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %63) #2, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !34
  %111 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %112 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !34
  %114 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %65) #2, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !34
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !34
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !34
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !34
  %122 = shufflevector <2 x bfloat> %121, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %123 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !34
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !34
  %125 = shufflevector <2 x bfloat> %124, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !34
  %126 = xor i32 %28, %and.ra, !dbg !34
  %127 = xor i32 %126, %17, !dbg !34
  %128 = shl nuw nsw i32 %19, 6, !dbg !34
  %129 = or disjoint i32 %127, %128, !dbg !34
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %129, !dbg !34
  %131 = shufflevector <2 x bfloat> %84, <2 x bfloat> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %132 = shufflevector <8 x bfloat> %131, <8 x bfloat> %89, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %133 = shufflevector <8 x bfloat> %132, <8 x bfloat> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %133, ptr addrspace(3) %130, align 16, !dbg !34
  %134 = or disjoint i32 %129, 1024, !dbg !34
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %134, !dbg !34
  %136 = shufflevector <2 x bfloat> %95, <2 x bfloat> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %137 = shufflevector <8 x bfloat> %136, <8 x bfloat> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %138 = shufflevector <8 x bfloat> %137, <8 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %138, ptr addrspace(3) %135, align 16, !dbg !34
  %139 = or disjoint i32 %129, 2048, !dbg !34
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139, !dbg !34
  %141 = shufflevector <2 x bfloat> %106, <2 x bfloat> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %142 = shufflevector <8 x bfloat> %141, <8 x bfloat> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %143 = shufflevector <8 x bfloat> %142, <8 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %143, ptr addrspace(3) %140, align 16, !dbg !34
  %144 = or disjoint i32 %129, 3072, !dbg !34
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %144, !dbg !34
  %146 = shufflevector <2 x bfloat> %117, <2 x bfloat> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %147 = shufflevector <8 x bfloat> %146, <8 x bfloat> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %148 = shufflevector <8 x bfloat> %147, <8 x bfloat> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %148, ptr addrspace(3) %145, align 16, !dbg !34
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %75) #2, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !35
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !35
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !35
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !35
  %156 = shufflevector <2 x bfloat> %155, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %157 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !35
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !35
  %159 = shufflevector <2 x bfloat> %158, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %77) #2, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !35
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !35
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !35
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !35
  %167 = shufflevector <2 x bfloat> %166, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %168 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !35
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !35
  %170 = shufflevector <2 x bfloat> %169, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %79) #2, !dbg !35
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !35
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !35
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !35
  %176 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !35
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !35
  %178 = shufflevector <2 x bfloat> %177, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %179 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !35
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !35
  %181 = shufflevector <2 x bfloat> %180, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #2, !dbg !35
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !35
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !35
  %185 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !35
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !35
  %187 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !35
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !35
  %189 = shufflevector <2 x bfloat> %188, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %190 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !35
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !35
  %192 = shufflevector <2 x bfloat> %191, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %193 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %129, !dbg !35
  %194 = shufflevector <2 x bfloat> %151, <2 x bfloat> %153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %195 = shufflevector <8 x bfloat> %194, <8 x bfloat> %156, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %196 = shufflevector <8 x bfloat> %195, <8 x bfloat> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %196, ptr addrspace(3) %193, align 16, !dbg !35
  %197 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %134, !dbg !35
  %198 = shufflevector <2 x bfloat> %162, <2 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %199 = shufflevector <8 x bfloat> %198, <8 x bfloat> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %200 = shufflevector <8 x bfloat> %199, <8 x bfloat> %170, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %200, ptr addrspace(3) %197, align 16, !dbg !35
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %139, !dbg !35
  %202 = shufflevector <2 x bfloat> %173, <2 x bfloat> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %203 = shufflevector <8 x bfloat> %202, <8 x bfloat> %178, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %204 = shufflevector <8 x bfloat> %203, <8 x bfloat> %181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %204, ptr addrspace(3) %201, align 16, !dbg !35
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %144, !dbg !35
  %206 = shufflevector <2 x bfloat> %184, <2 x bfloat> %186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %207 = shufflevector <8 x bfloat> %206, <8 x bfloat> %189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %208 = shufflevector <8 x bfloat> %207, <8 x bfloat> %192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %208, ptr addrspace(3) %205, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %209 = and i32 %15, 7, !dbg !34
  %210 = and i32 %15, 15, !dbg !34
  %211 = lshr i32 %15, 1, !dbg !34
  %212 = and i32 %211, 8, !dbg !34
  %213 = xor i32 %28, %212, !dbg !34
  %214 = lshr i32 %15, 2, !dbg !34
  %215 = and i32 %214, 16, !dbg !34
  %216 = or disjoint i32 %215, %210, !dbg !34
  %217 = shl nuw nsw i32 %216, 6, !dbg !34
  %218 = or disjoint i32 %217, %213, !dbg !34
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %218, !dbg !34
  %220 = ptrtoint ptr addrspace(3) %219 to i32, !dbg !34
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %220) #2, !dbg !34
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !34
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !34
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !34
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !34
  %226 = or disjoint i32 %24, 16, !dbg !34
  %227 = xor i32 %226, %25, !dbg !34
  %228 = or disjoint i32 %227, %27, !dbg !34
  %229 = xor i32 %228, %212, !dbg !34
  %230 = or disjoint i32 %229, %217, !dbg !34
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %230, !dbg !34
  %232 = ptrtoint ptr addrspace(3) %231 to i32, !dbg !34
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %232) #2, !dbg !34
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !34
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !34
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !34
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !34
  %238 = or disjoint i32 %26, 32, !dbg !34
  %239 = xor i32 %238, %27, !dbg !34
  %240 = xor i32 %239, %212, !dbg !34
  %241 = or disjoint i32 %240, %217, !dbg !34
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %241, !dbg !34
  %243 = ptrtoint ptr addrspace(3) %242 to i32, !dbg !34
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %243) #2, !dbg !34
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !34
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !34
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !34
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !34
  %249 = or disjoint i32 %24, 48, !dbg !34
  %and.ra79 = and i32 %23, 48, !dbg !34
  %250 = or disjoint i32 %212, %and.ra79, !dbg !34
  %251 = xor i32 %250, %249, !dbg !34
  %252 = or disjoint i32 %251, %217, !dbg !34
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %252, !dbg !34
  %254 = ptrtoint ptr addrspace(3) %253 to i32, !dbg !34
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %254) #2, !dbg !34
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !34
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !34
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !34
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !34
  %260 = or disjoint i32 %209, 32, !dbg !34
  %261 = or disjoint i32 %260, %16, !dbg !34
  %262 = or disjoint i32 %261, %215, !dbg !34
  %263 = shl nuw nsw i32 %262, 6, !dbg !34
  %264 = or disjoint i32 %263, %213, !dbg !34
  %265 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %264, !dbg !34
  %266 = ptrtoint ptr addrspace(3) %265 to i32, !dbg !34
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %266) #2, !dbg !34
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !34
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !34
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !34
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !34
  %272 = or disjoint i32 %229, %263, !dbg !34
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %272, !dbg !34
  %274 = ptrtoint ptr addrspace(3) %273 to i32, !dbg !34
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %274) #2, !dbg !34
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !34
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !34
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !34
  %280 = or disjoint i32 %240, %263, !dbg !34
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %280, !dbg !34
  %282 = ptrtoint ptr addrspace(3) %281 to i32, !dbg !34
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %282) #2, !dbg !34
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !34
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !34
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !34
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !34
  %288 = or disjoint i32 %251, %263, !dbg !34
  %289 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %288, !dbg !34
  %290 = ptrtoint ptr addrspace(3) %289 to i32, !dbg !34
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %290) #2, !dbg !34
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !34
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !34
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !34
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !34
  %296 = lshr exact i32 %17, 2, !dbg !35
  %297 = or disjoint i32 %296, %209, !dbg !35
  %298 = shl nuw nsw i32 %297, 6, !dbg !35
  %299 = or disjoint i32 %298, %126, !dbg !35
  %300 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %299, !dbg !35
  %301 = ptrtoint ptr addrspace(3) %300 to i32, !dbg !35
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %301) #2, !dbg !35
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !35
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !35
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !35
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !35
  %307 = xor i32 %239, %and.ra, !dbg !35
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %307, !dbg !35
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %308, i32 %298, !dbg !35
  %310 = ptrtoint ptr addrspace(3) %309 to i32, !dbg !35
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %310) #2, !dbg !35
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !35
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !35
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !35
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !35
  %316 = or disjoint i32 %298, 1024, !dbg !35
  %317 = or disjoint i32 %316, %126, !dbg !35
  %318 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %317, !dbg !35
  %319 = ptrtoint ptr addrspace(3) %318 to i32, !dbg !35
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %319) #2, !dbg !35
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !35
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !35
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !35
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !35
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %308, i32 %316, !dbg !35
  %326 = ptrtoint ptr addrspace(3) %325 to i32, !dbg !35
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %326) #2, !dbg !35
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !35
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !35
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !35
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !35
  %332 = or disjoint i32 %260, %296, !dbg !35
  %333 = shl nuw nsw i32 %332, 6, !dbg !35
  %334 = or disjoint i32 %333, %126, !dbg !35
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %334, !dbg !35
  %336 = ptrtoint ptr addrspace(3) %335 to i32, !dbg !35
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %336) #2, !dbg !35
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !35
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !35
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !35
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !35
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %308, i32 %333, !dbg !35
  %343 = ptrtoint ptr addrspace(3) %342 to i32, !dbg !35
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %343) #2, !dbg !35
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !35
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !35
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !35
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !35
  %349 = or disjoint i32 %298, 3072, !dbg !35
  %350 = or disjoint i32 %349, %126, !dbg !35
  %351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %350, !dbg !35
  %352 = ptrtoint ptr addrspace(3) %351 to i32, !dbg !35
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %352) #2, !dbg !35
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !35
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !35
  %358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %308, i32 %349, !dbg !35
  %359 = ptrtoint ptr addrspace(3) %358 to i32, !dbg !35
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %359) #2, !dbg !35
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !35
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !35
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !35
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %222, i32 %223, i32 %224, i32 %225, i32 %303, i32 %304) #2, !dbg !36
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !36
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !36
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !36
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !36
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %222, i32 %223, i32 %224, i32 %225, i32 %321, i32 %322) #2, !dbg !36
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !36
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !36
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !36
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !36
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %222, i32 %223, i32 %224, i32 %225, i32 %338, i32 %339) #2, !dbg !36
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !36
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !36
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !36
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !36
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %222, i32 %223, i32 %224, i32 %225, i32 %354, i32 %355) #2, !dbg !36
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !36
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !36
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !36
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !36
  %385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %268, i32 %269, i32 %270, i32 %271, i32 %303, i32 %304) #2, !dbg !36
  %386 = extractvalue { float, float, float, float } %385, 0, !dbg !36
  %387 = extractvalue { float, float, float, float } %385, 1, !dbg !36
  %388 = extractvalue { float, float, float, float } %385, 2, !dbg !36
  %389 = extractvalue { float, float, float, float } %385, 3, !dbg !36
  %390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %268, i32 %269, i32 %270, i32 %271, i32 %321, i32 %322) #2, !dbg !36
  %391 = extractvalue { float, float, float, float } %390, 0, !dbg !36
  %392 = extractvalue { float, float, float, float } %390, 1, !dbg !36
  %393 = extractvalue { float, float, float, float } %390, 2, !dbg !36
  %394 = extractvalue { float, float, float, float } %390, 3, !dbg !36
  %395 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %268, i32 %269, i32 %270, i32 %271, i32 %338, i32 %339) #2, !dbg !36
  %396 = extractvalue { float, float, float, float } %395, 0, !dbg !36
  %397 = extractvalue { float, float, float, float } %395, 1, !dbg !36
  %398 = extractvalue { float, float, float, float } %395, 2, !dbg !36
  %399 = extractvalue { float, float, float, float } %395, 3, !dbg !36
  %400 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %268, i32 %269, i32 %270, i32 %271, i32 %354, i32 %355) #2, !dbg !36
  %401 = extractvalue { float, float, float, float } %400, 0, !dbg !36
  %402 = extractvalue { float, float, float, float } %400, 1, !dbg !36
  %403 = extractvalue { float, float, float, float } %400, 2, !dbg !36
  %404 = extractvalue { float, float, float, float } %400, 3, !dbg !36
  %405 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %366, float %367, float %368, float %369, i32 %234, i32 %235, i32 %236, i32 %237, i32 %305, i32 %306) #2, !dbg !36
  %406 = extractvalue { float, float, float, float } %405, 0, !dbg !36
  %407 = extractvalue { float, float, float, float } %405, 1, !dbg !36
  %408 = extractvalue { float, float, float, float } %405, 2, !dbg !36
  %409 = extractvalue { float, float, float, float } %405, 3, !dbg !36
  %410 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %234, i32 %235, i32 %236, i32 %237, i32 %323, i32 %324) #2, !dbg !36
  %411 = extractvalue { float, float, float, float } %410, 0, !dbg !36
  %412 = extractvalue { float, float, float, float } %410, 1, !dbg !36
  %413 = extractvalue { float, float, float, float } %410, 2, !dbg !36
  %414 = extractvalue { float, float, float, float } %410, 3, !dbg !36
  %415 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %376, float %377, float %378, float %379, i32 %234, i32 %235, i32 %236, i32 %237, i32 %340, i32 %341) #2, !dbg !36
  %416 = extractvalue { float, float, float, float } %415, 0, !dbg !36
  %417 = extractvalue { float, float, float, float } %415, 1, !dbg !36
  %418 = extractvalue { float, float, float, float } %415, 2, !dbg !36
  %419 = extractvalue { float, float, float, float } %415, 3, !dbg !36
  %420 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %381, float %382, float %383, float %384, i32 %234, i32 %235, i32 %236, i32 %237, i32 %356, i32 %357) #2, !dbg !36
  %421 = extractvalue { float, float, float, float } %420, 0, !dbg !36
  %422 = extractvalue { float, float, float, float } %420, 1, !dbg !36
  %423 = extractvalue { float, float, float, float } %420, 2, !dbg !36
  %424 = extractvalue { float, float, float, float } %420, 3, !dbg !36
  %425 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %386, float %387, float %388, float %389, i32 %276, i32 %277, i32 %278, i32 %279, i32 %305, i32 %306) #2, !dbg !36
  %426 = extractvalue { float, float, float, float } %425, 0, !dbg !36
  %427 = extractvalue { float, float, float, float } %425, 1, !dbg !36
  %428 = extractvalue { float, float, float, float } %425, 2, !dbg !36
  %429 = extractvalue { float, float, float, float } %425, 3, !dbg !36
  %430 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %391, float %392, float %393, float %394, i32 %276, i32 %277, i32 %278, i32 %279, i32 %323, i32 %324) #2, !dbg !36
  %431 = extractvalue { float, float, float, float } %430, 0, !dbg !36
  %432 = extractvalue { float, float, float, float } %430, 1, !dbg !36
  %433 = extractvalue { float, float, float, float } %430, 2, !dbg !36
  %434 = extractvalue { float, float, float, float } %430, 3, !dbg !36
  %435 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %396, float %397, float %398, float %399, i32 %276, i32 %277, i32 %278, i32 %279, i32 %340, i32 %341) #2, !dbg !36
  %436 = extractvalue { float, float, float, float } %435, 0, !dbg !36
  %437 = extractvalue { float, float, float, float } %435, 1, !dbg !36
  %438 = extractvalue { float, float, float, float } %435, 2, !dbg !36
  %439 = extractvalue { float, float, float, float } %435, 3, !dbg !36
  %440 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %401, float %402, float %403, float %404, i32 %276, i32 %277, i32 %278, i32 %279, i32 %356, i32 %357) #2, !dbg !36
  %441 = extractvalue { float, float, float, float } %440, 0, !dbg !36
  %442 = extractvalue { float, float, float, float } %440, 1, !dbg !36
  %443 = extractvalue { float, float, float, float } %440, 2, !dbg !36
  %444 = extractvalue { float, float, float, float } %440, 3, !dbg !36
  %445 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %406, float %407, float %408, float %409, i32 %245, i32 %246, i32 %247, i32 %248, i32 %312, i32 %313) #2, !dbg !36
  %446 = extractvalue { float, float, float, float } %445, 0, !dbg !36
  %447 = extractvalue { float, float, float, float } %445, 1, !dbg !36
  %448 = extractvalue { float, float, float, float } %445, 2, !dbg !36
  %449 = extractvalue { float, float, float, float } %445, 3, !dbg !36
  %450 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %411, float %412, float %413, float %414, i32 %245, i32 %246, i32 %247, i32 %248, i32 %328, i32 %329) #2, !dbg !36
  %451 = extractvalue { float, float, float, float } %450, 0, !dbg !36
  %452 = extractvalue { float, float, float, float } %450, 1, !dbg !36
  %453 = extractvalue { float, float, float, float } %450, 2, !dbg !36
  %454 = extractvalue { float, float, float, float } %450, 3, !dbg !36
  %455 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %416, float %417, float %418, float %419, i32 %245, i32 %246, i32 %247, i32 %248, i32 %345, i32 %346) #2, !dbg !36
  %456 = extractvalue { float, float, float, float } %455, 0, !dbg !36
  %457 = extractvalue { float, float, float, float } %455, 1, !dbg !36
  %458 = extractvalue { float, float, float, float } %455, 2, !dbg !36
  %459 = extractvalue { float, float, float, float } %455, 3, !dbg !36
  %460 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %421, float %422, float %423, float %424, i32 %245, i32 %246, i32 %247, i32 %248, i32 %361, i32 %362) #2, !dbg !36
  %461 = extractvalue { float, float, float, float } %460, 0, !dbg !36
  %462 = extractvalue { float, float, float, float } %460, 1, !dbg !36
  %463 = extractvalue { float, float, float, float } %460, 2, !dbg !36
  %464 = extractvalue { float, float, float, float } %460, 3, !dbg !36
  %465 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %426, float %427, float %428, float %429, i32 %284, i32 %285, i32 %286, i32 %287, i32 %312, i32 %313) #2, !dbg !36
  %466 = extractvalue { float, float, float, float } %465, 0, !dbg !36
  %467 = extractvalue { float, float, float, float } %465, 1, !dbg !36
  %468 = extractvalue { float, float, float, float } %465, 2, !dbg !36
  %469 = extractvalue { float, float, float, float } %465, 3, !dbg !36
  %470 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %431, float %432, float %433, float %434, i32 %284, i32 %285, i32 %286, i32 %287, i32 %328, i32 %329) #2, !dbg !36
  %471 = extractvalue { float, float, float, float } %470, 0, !dbg !36
  %472 = extractvalue { float, float, float, float } %470, 1, !dbg !36
  %473 = extractvalue { float, float, float, float } %470, 2, !dbg !36
  %474 = extractvalue { float, float, float, float } %470, 3, !dbg !36
  %475 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %436, float %437, float %438, float %439, i32 %284, i32 %285, i32 %286, i32 %287, i32 %345, i32 %346) #2, !dbg !36
  %476 = extractvalue { float, float, float, float } %475, 0, !dbg !36
  %477 = extractvalue { float, float, float, float } %475, 1, !dbg !36
  %478 = extractvalue { float, float, float, float } %475, 2, !dbg !36
  %479 = extractvalue { float, float, float, float } %475, 3, !dbg !36
  %480 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %441, float %442, float %443, float %444, i32 %284, i32 %285, i32 %286, i32 %287, i32 %361, i32 %362) #2, !dbg !36
  %481 = extractvalue { float, float, float, float } %480, 0, !dbg !36
  %482 = extractvalue { float, float, float, float } %480, 1, !dbg !36
  %483 = extractvalue { float, float, float, float } %480, 2, !dbg !36
  %484 = extractvalue { float, float, float, float } %480, 3, !dbg !36
  %485 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %446, float %447, float %448, float %449, i32 %256, i32 %257, i32 %258, i32 %259, i32 %314, i32 %315) #2, !dbg !36
  %486 = extractvalue { float, float, float, float } %485, 0, !dbg !36
  %487 = extractvalue { float, float, float, float } %485, 1, !dbg !36
  %488 = extractvalue { float, float, float, float } %485, 2, !dbg !36
  %489 = extractvalue { float, float, float, float } %485, 3, !dbg !36
  %490 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %451, float %452, float %453, float %454, i32 %256, i32 %257, i32 %258, i32 %259, i32 %330, i32 %331) #2, !dbg !36
  %491 = extractvalue { float, float, float, float } %490, 0, !dbg !36
  %492 = extractvalue { float, float, float, float } %490, 1, !dbg !36
  %493 = extractvalue { float, float, float, float } %490, 2, !dbg !36
  %494 = extractvalue { float, float, float, float } %490, 3, !dbg !36
  %495 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %456, float %457, float %458, float %459, i32 %256, i32 %257, i32 %258, i32 %259, i32 %347, i32 %348) #2, !dbg !36
  %496 = extractvalue { float, float, float, float } %495, 0, !dbg !36
  %497 = extractvalue { float, float, float, float } %495, 1, !dbg !36
  %498 = extractvalue { float, float, float, float } %495, 2, !dbg !36
  %499 = extractvalue { float, float, float, float } %495, 3, !dbg !36
  %500 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %461, float %462, float %463, float %464, i32 %256, i32 %257, i32 %258, i32 %259, i32 %363, i32 %364) #2, !dbg !36
  %501 = extractvalue { float, float, float, float } %500, 0, !dbg !36
  %502 = extractvalue { float, float, float, float } %500, 1, !dbg !36
  %503 = extractvalue { float, float, float, float } %500, 2, !dbg !36
  %504 = extractvalue { float, float, float, float } %500, 3, !dbg !36
  %505 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %466, float %467, float %468, float %469, i32 %292, i32 %293, i32 %294, i32 %295, i32 %314, i32 %315) #2, !dbg !36
  %506 = extractvalue { float, float, float, float } %505, 0, !dbg !36
  %507 = extractvalue { float, float, float, float } %505, 1, !dbg !36
  %508 = extractvalue { float, float, float, float } %505, 2, !dbg !36
  %509 = extractvalue { float, float, float, float } %505, 3, !dbg !36
  %510 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %471, float %472, float %473, float %474, i32 %292, i32 %293, i32 %294, i32 %295, i32 %330, i32 %331) #2, !dbg !36
  %511 = extractvalue { float, float, float, float } %510, 0, !dbg !36
  %512 = extractvalue { float, float, float, float } %510, 1, !dbg !36
  %513 = extractvalue { float, float, float, float } %510, 2, !dbg !36
  %514 = extractvalue { float, float, float, float } %510, 3, !dbg !36
  %515 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %476, float %477, float %478, float %479, i32 %292, i32 %293, i32 %294, i32 %295, i32 %347, i32 %348) #2, !dbg !36
  %516 = extractvalue { float, float, float, float } %515, 0, !dbg !36
  %517 = extractvalue { float, float, float, float } %515, 1, !dbg !36
  %518 = extractvalue { float, float, float, float } %515, 2, !dbg !36
  %519 = extractvalue { float, float, float, float } %515, 3, !dbg !36
  %520 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %481, float %482, float %483, float %484, i32 %292, i32 %293, i32 %294, i32 %295, i32 %363, i32 %364) #2, !dbg !36
  %521 = extractvalue { float, float, float, float } %520, 0, !dbg !36
  %522 = extractvalue { float, float, float, float } %520, 1, !dbg !36
  %523 = extractvalue { float, float, float, float } %520, 2, !dbg !36
  %524 = extractvalue { float, float, float, float } %520, 3, !dbg !36
  %525 = icmp slt i32 %29, 512, !dbg !37
  %526 = icmp slt i32 %30, 512, !dbg !37
  %527 = icmp slt i32 %31, 512, !dbg !37
  %528 = icmp slt i32 %32, 512, !dbg !37
  %529 = icmp slt i32 %38, 512, !dbg !38
  %530 = and i1 %525, %529, !dbg !39
  %531 = and i1 %526, %529, !dbg !39
  %532 = and i1 %527, %529, !dbg !39
  %533 = and i1 %528, %529, !dbg !39
  %534 = shl i32 %29, 9, !dbg !40
  %535 = shl i32 %30, 9, !dbg !40
  %536 = shl i32 %31, 9, !dbg !40
  %537 = shl i32 %32, 9, !dbg !40
  %538 = shl i32 %47, 18, !dbg !41
  %539 = add i32 %38, %538, !dbg !42
  %540 = add i32 %539, %534, !dbg !43
  %541 = add i32 %539, %535, !dbg !43
  %542 = add i32 %539, %536, !dbg !43
  %543 = add i32 %539, %537, !dbg !43
  %544 = sext i32 %540 to i64, !dbg !44
  %545 = getelementptr bfloat, ptr addrspace(1) %2, i64 %544, !dbg !44
  %546 = sext i32 %541 to i64, !dbg !44
  %547 = getelementptr bfloat, ptr addrspace(1) %2, i64 %546, !dbg !44
  %548 = sext i32 %542 to i64, !dbg !44
  %549 = getelementptr bfloat, ptr addrspace(1) %2, i64 %548, !dbg !44
  %550 = sext i32 %543 to i64, !dbg !44
  %551 = getelementptr bfloat, ptr addrspace(1) %2, i64 %550, !dbg !44
  %552 = fptrunc float %486 to bfloat, !dbg !45
  %553 = fptrunc float %487 to bfloat, !dbg !45
  %554 = fptrunc float %488 to bfloat, !dbg !45
  %555 = fptrunc float %489 to bfloat, !dbg !45
  %556 = fptrunc float %491 to bfloat, !dbg !45
  %557 = fptrunc float %492 to bfloat, !dbg !45
  %558 = fptrunc float %493 to bfloat, !dbg !45
  %559 = fptrunc float %494 to bfloat, !dbg !45
  %560 = fptrunc float %496 to bfloat, !dbg !45
  %561 = fptrunc float %497 to bfloat, !dbg !45
  %562 = fptrunc float %498 to bfloat, !dbg !45
  %563 = fptrunc float %499 to bfloat, !dbg !45
  %564 = fptrunc float %501 to bfloat, !dbg !45
  %565 = fptrunc float %502 to bfloat, !dbg !45
  %566 = fptrunc float %503 to bfloat, !dbg !45
  %567 = fptrunc float %504 to bfloat, !dbg !45
  %568 = fptrunc float %506 to bfloat, !dbg !45
  %569 = fptrunc float %507 to bfloat, !dbg !45
  %570 = fptrunc float %508 to bfloat, !dbg !45
  %571 = fptrunc float %509 to bfloat, !dbg !45
  %572 = fptrunc float %511 to bfloat, !dbg !45
  %573 = fptrunc float %512 to bfloat, !dbg !45
  %574 = fptrunc float %513 to bfloat, !dbg !45
  %575 = fptrunc float %514 to bfloat, !dbg !45
  %576 = fptrunc float %516 to bfloat, !dbg !45
  %577 = fptrunc float %517 to bfloat, !dbg !45
  %578 = fptrunc float %518 to bfloat, !dbg !45
  %579 = fptrunc float %519 to bfloat, !dbg !45
  %580 = fptrunc float %521 to bfloat, !dbg !45
  %581 = fptrunc float %522 to bfloat, !dbg !45
  %582 = fptrunc float %523 to bfloat, !dbg !45
  %583 = fptrunc float %524 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %584 = shl i32 %15, 1, !dbg !45
  %585 = and i32 %584, 6, !dbg !45
  %586 = shl i32 %15, 4, !dbg !45
  %587 = and i32 %586, 1472, !dbg !45
  %588 = or disjoint i32 %587, %585, !dbg !45
  %589 = or disjoint i32 %588, %296, !dbg !45
  %590 = and i32 %23, 1016, !dbg !45
  %591 = lshr exact i32 %587, 2, !dbg !45
  %592 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %591, !dbg !45
  %593 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %592, i32 %589, !dbg !45
  %594 = bitcast bfloat %552 to i16, !dbg !45
  %595 = bitcast bfloat %553 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %593, i16 %594, i16 %595, i1 true) #2, !dbg !45
  %596 = or disjoint i32 %589, 512, !dbg !45
  %597 = lshr i32 %596, 3, !dbg !45
  %598 = and i32 %597, 248, !dbg !45
  %599 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %598, !dbg !45
  %600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %599, i32 %596, !dbg !45
  %601 = bitcast bfloat %554 to i16, !dbg !45
  %602 = bitcast bfloat %555 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %600, i16 %601, i16 %602, i1 true) #2, !dbg !45
  %603 = or disjoint i32 %589, 16, !dbg !45
  %604 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %592, i32 %603, !dbg !45
  %605 = bitcast bfloat %556 to i16, !dbg !45
  %606 = bitcast bfloat %557 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %604, i16 %605, i16 %606, i1 true) #2, !dbg !45
  %607 = or disjoint i32 %589, 528, !dbg !45
  %608 = lshr i32 %607, 3, !dbg !45
  %609 = and i32 %608, 248, !dbg !45
  %610 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %609, !dbg !45
  %611 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %610, i32 %607, !dbg !45
  %612 = bitcast bfloat %558 to i16, !dbg !45
  %613 = bitcast bfloat %559 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %611, i16 %612, i16 %613, i1 true) #2, !dbg !45
  %614 = or disjoint i32 %589, 32, !dbg !45
  %615 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %592, i32 %614, !dbg !45
  %616 = bitcast bfloat %560 to i16, !dbg !45
  %617 = bitcast bfloat %561 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %615, i16 %616, i16 %617, i1 true) #2, !dbg !45
  %618 = or disjoint i32 %589, 544, !dbg !45
  %619 = lshr i32 %618, 3, !dbg !45
  %620 = and i32 %619, 248, !dbg !45
  %621 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %620, !dbg !45
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %621, i32 %618, !dbg !45
  %623 = bitcast bfloat %562 to i16, !dbg !45
  %624 = bitcast bfloat %563 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %623, i16 %624, i1 true) #2, !dbg !45
  %625 = or disjoint i32 %589, 48, !dbg !45
  %626 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %592, i32 %625, !dbg !45
  %627 = bitcast bfloat %564 to i16, !dbg !45
  %628 = bitcast bfloat %565 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %626, i16 %627, i16 %628, i1 true) #2, !dbg !45
  %629 = or disjoint i32 %589, 560, !dbg !45
  %630 = lshr i32 %629, 3, !dbg !45
  %631 = and i32 %630, 248, !dbg !45
  %632 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %631, !dbg !45
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %632, i32 %629, !dbg !45
  %634 = bitcast bfloat %566 to i16, !dbg !45
  %635 = bitcast bfloat %567 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %633, i16 %634, i16 %635, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %636 = lshr exact i32 %23, 2, !dbg !45
  %637 = and i32 %636, 240, !dbg !45
  %638 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %637, !dbg !45
  %639 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %638, i32 %590, !dbg !45
  %640 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !45
  %641 = or disjoint i32 %590, 1024, !dbg !45
  %642 = lshr exact i32 %641, 3, !dbg !45
  %643 = and i32 %642, 248, !dbg !45
  %644 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %643, !dbg !45
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %644, i32 %641, !dbg !45
  %646 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %647 = bitcast bfloat %568 to i16, !dbg !45
  %648 = bitcast bfloat %569 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %593, i16 %647, i16 %648, i1 true) #2, !dbg !45
  %649 = bitcast bfloat %570 to i16, !dbg !45
  %650 = bitcast bfloat %571 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %600, i16 %649, i16 %650, i1 true) #2, !dbg !45
  %651 = bitcast bfloat %572 to i16, !dbg !45
  %652 = bitcast bfloat %573 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %604, i16 %651, i16 %652, i1 true) #2, !dbg !45
  %653 = bitcast bfloat %574 to i16, !dbg !45
  %654 = bitcast bfloat %575 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %611, i16 %653, i16 %654, i1 true) #2, !dbg !45
  %655 = bitcast bfloat %576 to i16, !dbg !45
  %656 = bitcast bfloat %577 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %615, i16 %655, i16 %656, i1 true) #2, !dbg !45
  %657 = bitcast bfloat %578 to i16, !dbg !45
  %658 = bitcast bfloat %579 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %657, i16 %658, i1 true) #2, !dbg !45
  %659 = bitcast bfloat %580 to i16, !dbg !45
  %660 = bitcast bfloat %581 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %626, i16 %659, i16 %660, i1 true) #2, !dbg !45
  %661 = bitcast bfloat %582 to i16, !dbg !45
  %662 = bitcast bfloat %583 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %633, i16 %661, i16 %662, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %663 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !45
  %664 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %640, i64 0, !dbg !45
  %.extract50 = extractelement <4 x i32> %640, i64 1, !dbg !45
  %.extract52 = extractelement <4 x i32> %640, i64 2, !dbg !45
  %.extract54 = extractelement <4 x i32> %640, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract50, i32 %.extract52, i32 %.extract54, ptr addrspace(1) %545, i1 %530) #2, !dbg !45
  %.extract56 = extractelement <4 x i32> %646, i64 0, !dbg !45
  %.extract58 = extractelement <4 x i32> %646, i64 1, !dbg !45
  %.extract60 = extractelement <4 x i32> %646, i64 2, !dbg !45
  %.extract62 = extractelement <4 x i32> %646, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %547, i1 %531) #2, !dbg !45
  %.extract64 = extractelement <4 x i32> %663, i64 0, !dbg !45
  %.extract66 = extractelement <4 x i32> %663, i64 1, !dbg !45
  %.extract68 = extractelement <4 x i32> %663, i64 2, !dbg !45
  %.extract70 = extractelement <4 x i32> %663, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract64, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %549, i1 %532) #2, !dbg !45
  %.extract72 = extractelement <4 x i32> %664, i64 0, !dbg !45
  %.extract74 = extractelement <4 x i32> %664, i64 1, !dbg !45
  %.extract76 = extractelement <4 x i32> %664, i64 2, !dbg !45
  %.extract78 = extractelement <4 x i32> %664, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract72, i32 %.extract74, i32 %.extract76, i32 %.extract78, ptr addrspace(1) %551, i1 %533) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwtlzda76apg2mwegtzo7gvzmor7g45kic3d7s52hgonxe7of6og.py", directory: "/tmp/torchinductor_root/wt")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 77, column: 25, scope: !6)
!37 = !DILocation(line: 87, column: 20, scope: !6)
!38 = !DILocation(line: 87, column: 34, scope: !6)
!39 = !DILocation(line: 87, column: 26, scope: !6)
!40 = !DILocation(line: 90, column: 25, scope: !6)
!41 = !DILocation(line: 90, column: 40, scope: !6)
!42 = !DILocation(line: 90, column: 21, scope: !6)
!43 = !DILocation(line: 90, column: 33, scope: !6)
!44 = !DILocation(line: 91, column: 25, scope: !6)
!45 = !DILocation(line: 91, column: 67, scope: !6)
!46 = !DILocation(line: 91, column: 4, scope: !6)
