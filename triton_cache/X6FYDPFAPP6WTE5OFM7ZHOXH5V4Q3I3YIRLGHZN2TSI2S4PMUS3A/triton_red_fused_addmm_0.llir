; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 18432, !dbg !13
  %16 = shl i32 %11, 2, !dbg !14
  %17 = and i32 %16, 252, !dbg !14
  %18 = mul i32 %14, 3072, !dbg !15
  %19 = zext nneg i32 %17 to i64, !dbg !16
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !17
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %22, !dbg !16

22:                                               ; preds = %8, %22
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %22 ]
  %23 = phi <8 x float> [ zeroinitializer, %8 ], [ %90, %22 ]
  %24 = or disjoint i64 %indvars.iv, %19, !dbg !18
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 true) #4, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = trunc nuw nsw i64 %24 to i32, !dbg !21
  %32 = add i32 %18, %31, !dbg !21
  %33 = sext i32 %32 to i64, !dbg !22
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %15) #4, !dbg !23
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !23
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !23
  %40 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %15) #4, !dbg !25
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !25
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !25
  %44 = extractvalue { i32, i32 } %41, 1, !dbg !25
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !25
  %46 = shufflevector <2 x bfloat> %28, <2 x bfloat> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %47 = fpext <4 x bfloat> %46 to <4 x float>, !dbg !26
  %48 = shufflevector <2 x bfloat> %43, <2 x bfloat> %45, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %49 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %51 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %52 = shufflevector <8 x bfloat> %50, <8 x bfloat> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %53 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %54 = shufflevector <8 x bfloat> %52, <8 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %55 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %56 = shufflevector <8 x bfloat> %54, <8 x bfloat> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %57 = fpext <8 x bfloat> %56 to <8 x float>, !dbg !27
  %58 = extractelement <4 x float> %47, i64 0, !dbg !28
  %59 = fsub float 0.000000e+00, %58, !dbg !28
  %60 = extractelement <4 x float> %47, i64 1, !dbg !28
  %61 = fsub float 0.000000e+00, %60, !dbg !28
  %62 = extractelement <4 x float> %47, i64 2, !dbg !28
  %63 = fsub float 0.000000e+00, %62, !dbg !28
  %64 = extractelement <4 x float> %47, i64 3, !dbg !28
  %65 = fsub float 0.000000e+00, %64, !dbg !28
  %66 = fmul float %59, 0x3FF7154760000000, !dbg !32
  %67 = tail call float @llvm.nvvm.ex2.approx.f(float %66), !dbg !32
  %68 = fmul float %61, 0x3FF7154760000000, !dbg !32
  %69 = tail call float @llvm.nvvm.ex2.approx.f(float %68), !dbg !32
  %70 = fmul float %63, 0x3FF7154760000000, !dbg !32
  %71 = tail call float @llvm.nvvm.ex2.approx.f(float %70), !dbg !32
  %72 = fmul float %65, 0x3FF7154760000000, !dbg !32
  %73 = tail call float @llvm.nvvm.ex2.approx.f(float %72), !dbg !32
  %74 = fadd float %67, 1.000000e+00, !dbg !33
  %75 = fadd float %69, 1.000000e+00, !dbg !33
  %76 = fadd float %71, 1.000000e+00, !dbg !33
  %77 = fadd float %73, 1.000000e+00, !dbg !33
  %78 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %74), !dbg !34
  %79 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !34
  %80 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %76), !dbg !34
  %81 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %77), !dbg !34
  %82 = insertelement <4 x float> poison, float %78, i64 0, !dbg !35
  %83 = insertelement <4 x float> %82, float %79, i64 1, !dbg !35
  %84 = insertelement <4 x float> %83, float %80, i64 2, !dbg !35
  %85 = insertelement <4 x float> %84, float %81, i64 3, !dbg !35
  %86 = fmul <4 x float> %85, %47, !dbg !35
  %87 = shufflevector <4 x float> %86, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %88 = fmul <8 x float> %87, %57, !dbg !36
  %89 = fadd <8 x float> %23, %88, !dbg !37
  %90 = select <8 x i1> %21, <8 x float> %89, <8 x float> %23, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !16
  %91 = icmp samesign ult i64 %indvars.iv, 2816, !dbg !16
  br i1 %91, label %22, label %92, !dbg !16

92:                                               ; preds = %22
  %93 = lshr i32 %11, 5, !dbg !11
  %94 = and i32 %11, 31, !dbg !11
  %95 = and i32 %11, 7, !dbg !11
  %96 = or disjoint i32 %10, %95, !dbg !12
  %97 = icmp slt i32 %96, 18432, !dbg !13
  %shift = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !38
  %98 = fadd <8 x float> %90, %shift, !dbg !38
  %shift23 = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !38
  %99 = fadd <8 x float> %shift23, %98, !dbg !38
  %shift24 = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !38
  %100 = fadd <8 x float> %shift24, %99, !dbg !38
  %101 = extractelement <8 x float> %100, i64 4, !dbg !38
  %102 = bitcast float %101 to i32, !dbg !41
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !41
  %104 = bitcast i32 %103 to float, !dbg !41
  %105 = fadd float %101, %104, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !41
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !41
  %108 = bitcast i32 %107 to float, !dbg !41
  %109 = fadd float %105, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !41
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !41
  %112 = bitcast i32 %111 to float, !dbg !41
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !41
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !41
  %116 = bitcast i32 %115 to float, !dbg !41
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !41
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !41
  %120 = bitcast i32 %119 to float, !dbg !41
  %121 = fadd float %117, %120, !dbg !38
  %122 = and i32 %93, 1, !dbg !41
  %123 = icmp eq i32 %94, 0, !dbg !41
  %124 = shl nuw nsw i32 %13, 1, !dbg !41
  %125 = or disjoint i32 %124, %122, !dbg !41
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !41
  %127 = bitcast float %121 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 %123) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %128 = icmp slt i32 %11, 16, !dbg !41
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %128) #4, !dbg !41
  %131 = bitcast i32 %130 to float, !dbg !41
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !41
  %133 = bitcast i32 %132 to float, !dbg !41
  %134 = fadd float %131, %133, !dbg !38
  %135 = and i32 %11, 1, !dbg !41
  %136 = icmp eq i32 %135, 0, !dbg !41
  %137 = and i1 %128, %136, !dbg !41
  %138 = bitcast float %134 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %138, i1 %137) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !41
  %140 = load i32, ptr addrspace(3) %139, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %142 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %143 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %95, !dbg !42
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %shift25 = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %145 = fadd <8 x float> %90, %shift25, !dbg !45
  %shift26 = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %146 = fadd <8 x float> %shift26, %145, !dbg !45
  %shift27 = shufflevector <8 x float> %90, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %147 = fadd <8 x float> %shift27, %146, !dbg !45
  %148 = extractelement <8 x float> %147, i64 0, !dbg !45
  %149 = bitcast float %148 to i32, !dbg !43
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !43
  %151 = bitcast i32 %150 to float, !dbg !43
  %152 = fadd float %148, %151, !dbg !45
  %153 = bitcast float %152 to i32, !dbg !43
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !43
  %155 = bitcast i32 %154 to float, !dbg !43
  %156 = fadd float %152, %155, !dbg !45
  %157 = bitcast float %156 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = fadd float %156, %159, !dbg !45
  %161 = bitcast float %160 to i32, !dbg !43
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !43
  %163 = bitcast i32 %162 to float, !dbg !43
  %164 = fadd float %160, %163, !dbg !45
  %165 = bitcast float %164 to i32, !dbg !43
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !43
  %167 = bitcast i32 %166 to float, !dbg !43
  %168 = fadd float %164, %167, !dbg !45
  %169 = bitcast float %168 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %169, i1 %123) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %128) #4, !dbg !43
  %171 = bitcast i32 %170 to float, !dbg !43
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !43
  %173 = bitcast i32 %172 to float, !dbg !43
  %174 = fadd float %171, %173, !dbg !45
  %175 = bitcast float %174 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %175, i1 %137) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %176 = load i32, ptr addrspace(3) %139, align 8, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %177 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %177, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %178 = load i32, ptr addrspace(3) %143, align 4, !dbg !46
  %179 = sext i32 %96 to i64, !dbg !47
  %180 = getelementptr float, ptr addrspace(1) %3, i64 %179, !dbg !47
  %181 = and i32 %11, 504, !dbg !48
  %182 = icmp eq i32 %181, 0, !dbg !48
  %183 = and i1 %182, %97, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %180, i1 %183) #4, !dbg !48
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %179, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %184, i1 %183) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdejrfyv2kwed44vpldu3lq3fqyqqztaloewcb735r6wirux7ab.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 54, column: 50, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 41, scope: !6)
!21 = !DILocation(line: 38, column: 41, scope: !6)
!22 = !DILocation(line: 38, column: 34, scope: !6)
!23 = !DILocation(line: 38, column: 51, scope: !6)
!24 = !DILocation(line: 39, column: 35, scope: !6)
!25 = !DILocation(line: 39, column: 52, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 39, column: 114, scope: !6)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = !DILocation(line: 41, column: 26, scope: !6)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 42, column: 22, scope: !6)
!36 = !DILocation(line: 51, column: 23, scope: !6)
!37 = !DILocation(line: 53, column: 25, scope: !6)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!40 = !DILocation(line: 55, column: 27, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !40)
!42 = !DILocation(line: 55, column: 30, scope: !6)
!43 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !44)
!44 = !DILocation(line: 56, column: 27, scope: !6)
!45 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !44)
!46 = !DILocation(line: 56, column: 30, scope: !6)
!47 = !DILocation(line: 57, column: 25, scope: !6)
!48 = !DILocation(line: 57, column: 37, scope: !6)
!49 = !DILocation(line: 58, column: 25, scope: !6)
!50 = !DILocation(line: 58, column: 37, scope: !6)
!51 = !DILocation(line: 58, column: 4, scope: !6)
