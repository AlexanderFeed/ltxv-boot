; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 5, !dbg !11
  %13 = lshr i32 %11, 9, !dbg !11
  %.lobit = and i32 %13, 1, !dbg !11
  %14 = and i32 %11, 31, !dbg !11
  %15 = and i32 %11, 1, !dbg !11
  %16 = or disjoint i32 %.lobit, %10, !dbg !12
  %17 = or disjoint i32 %10, %15, !dbg !12
  %18 = icmp slt i32 %16, 18432, !dbg !13
  %19 = icmp slt i32 %17, 18432, !dbg !13
  %20 = shl i32 %11, 2, !dbg !14
  %21 = and i32 %20, 4092, !dbg !14
  %22 = shl i32 %11, 3, !dbg !14
  %23 = and i32 %22, 4088, !dbg !14
  %24 = icmp samesign ult i32 %21, 3072, !dbg !15
  %25 = icmp samesign ult i32 %23, 3072, !dbg !15
  %26 = zext nneg i32 %21 to i64, !dbg !16
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %27, i1 %24) #4, !dbg !17
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !17
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !17
  %31 = extractvalue { i32, i32 } %28, 1, !dbg !17
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !17
  %33 = extractelement <2 x bfloat> %30, i64 0, !dbg !17
  %34 = extractelement <2 x bfloat> %30, i64 1, !dbg !17
  %35 = extractelement <2 x bfloat> %32, i64 0, !dbg !17
  %36 = extractelement <2 x bfloat> %32, i64 1, !dbg !17
  %37 = fpext bfloat %33 to float, !dbg !18
  %38 = fpext bfloat %34 to float, !dbg !18
  %39 = fpext bfloat %35 to float, !dbg !18
  %40 = fpext bfloat %36 to float, !dbg !18
  %41 = mul i32 %16, 3072, !dbg !19
  %42 = add i32 %41, %23, !dbg !20
  %43 = sext i32 %42 to i64, !dbg !21
  %44 = getelementptr bfloat, ptr addrspace(1) %1, i64 %43, !dbg !21
  %45 = and i1 %25, %18, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %45) #4, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !23
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !23
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !23
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !23
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !23
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !23
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !23
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !23
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !23
  %63 = fpext bfloat %55 to float, !dbg !24
  %64 = fpext bfloat %56 to float, !dbg !24
  %65 = fpext bfloat %57 to float, !dbg !24
  %66 = fpext bfloat %58 to float, !dbg !24
  %67 = fpext bfloat %59 to float, !dbg !24
  %68 = fpext bfloat %60 to float, !dbg !24
  %69 = fpext bfloat %61 to float, !dbg !24
  %70 = fpext bfloat %62 to float, !dbg !24
  %71 = getelementptr bfloat, ptr addrspace(1) %2, i64 %43, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %71, i1 %45) #4, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !26
  %81 = extractelement <2 x bfloat> %74, i64 0, !dbg !26
  %82 = extractelement <2 x bfloat> %74, i64 1, !dbg !26
  %83 = extractelement <2 x bfloat> %76, i64 0, !dbg !26
  %84 = extractelement <2 x bfloat> %76, i64 1, !dbg !26
  %85 = extractelement <2 x bfloat> %78, i64 0, !dbg !26
  %86 = extractelement <2 x bfloat> %78, i64 1, !dbg !26
  %87 = extractelement <2 x bfloat> %80, i64 0, !dbg !26
  %88 = extractelement <2 x bfloat> %80, i64 1, !dbg !26
  %89 = fpext bfloat %81 to float, !dbg !27
  %90 = fpext bfloat %82 to float, !dbg !27
  %91 = fpext bfloat %83 to float, !dbg !27
  %92 = fpext bfloat %84 to float, !dbg !27
  %93 = fpext bfloat %85 to float, !dbg !27
  %94 = fpext bfloat %86 to float, !dbg !27
  %95 = fpext bfloat %87 to float, !dbg !27
  %96 = fpext bfloat %88 to float, !dbg !27
  %97 = fsub float 0.000000e+00, %37, !dbg !28
  %98 = fsub float 0.000000e+00, %38, !dbg !28
  %99 = fsub float 0.000000e+00, %39, !dbg !28
  %100 = fsub float 0.000000e+00, %40, !dbg !28
  %101 = fmul float %97, 0x3FF7154760000000, !dbg !32
  %102 = tail call float @llvm.nvvm.ex2.approx.f(float %101), !dbg !32
  %103 = fmul float %98, 0x3FF7154760000000, !dbg !32
  %104 = tail call float @llvm.nvvm.ex2.approx.f(float %103), !dbg !32
  %105 = fmul float %99, 0x3FF7154760000000, !dbg !32
  %106 = tail call float @llvm.nvvm.ex2.approx.f(float %105), !dbg !32
  %107 = fmul float %100, 0x3FF7154760000000, !dbg !32
  %108 = tail call float @llvm.nvvm.ex2.approx.f(float %107), !dbg !32
  %109 = fadd float %102, 1.000000e+00, !dbg !33
  %110 = fadd float %104, 1.000000e+00, !dbg !33
  %111 = fadd float %106, 1.000000e+00, !dbg !33
  %112 = fadd float %108, 1.000000e+00, !dbg !33
  %113 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %109), !dbg !34
  %114 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %110), !dbg !34
  %115 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %111), !dbg !34
  %116 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %112), !dbg !34
  %117 = fmul float %113, %37, !dbg !35
  %118 = fmul float %114, %38, !dbg !35
  %119 = fmul float %115, %39, !dbg !35
  %120 = fmul float %116, %40, !dbg !35
  %121 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %26, !dbg !36
  %122 = bitcast float %117 to i32, !dbg !36
  %123 = bitcast float %118 to i32, !dbg !36
  %124 = bitcast float %119 to i32, !dbg !36
  %125 = bitcast float %120 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %121, i32 %122, i32 %123, i32 %124, i32 %125, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %126 = zext nneg i32 %23 to i64, !dbg !36
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %126, !dbg !36
  %128 = load float, ptr addrspace(3) %127, align 16, !dbg !36
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i64 4, !dbg !36
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !36
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i64 8, !dbg !36
  %132 = load float, ptr addrspace(3) %131, align 8, !dbg !36
  %133 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i64 12, !dbg !36
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !36
  %135 = or disjoint i32 %23, 4, !dbg !36
  %136 = zext nneg i32 %135 to i64, !dbg !36
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %136, !dbg !36
  %138 = load float, ptr addrspace(3) %137, align 16, !dbg !36
  %139 = getelementptr inbounds nuw i8, ptr addrspace(3) %137, i64 4, !dbg !36
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !36
  %141 = getelementptr inbounds nuw i8, ptr addrspace(3) %137, i64 8, !dbg !36
  %142 = load float, ptr addrspace(3) %141, align 8, !dbg !36
  %143 = getelementptr inbounds nuw i8, ptr addrspace(3) %137, i64 12, !dbg !36
  %144 = load float, ptr addrspace(3) %143, align 4, !dbg !36
  %145 = fmul float %128, %63, !dbg !36
  %146 = fmul float %130, %64, !dbg !36
  %147 = fmul float %132, %65, !dbg !36
  %148 = fmul float %134, %66, !dbg !36
  %149 = fmul float %138, %67, !dbg !36
  %150 = fmul float %140, %68, !dbg !36
  %151 = fmul float %142, %69, !dbg !36
  %152 = fmul float %144, %70, !dbg !36
  %153 = fadd float %145, 0.000000e+00, !dbg !37
  %154 = fadd float %146, 0.000000e+00, !dbg !37
  %155 = fadd float %147, 0.000000e+00, !dbg !37
  %156 = fadd float %148, 0.000000e+00, !dbg !37
  %157 = fadd float %149, 0.000000e+00, !dbg !37
  %158 = fadd float %150, 0.000000e+00, !dbg !37
  %159 = fadd float %151, 0.000000e+00, !dbg !37
  %160 = fadd float %152, 0.000000e+00, !dbg !37
  %161 = fmul float %128, %89, !dbg !38
  %162 = fmul float %130, %90, !dbg !38
  %163 = fmul float %132, %91, !dbg !38
  %164 = fmul float %134, %92, !dbg !38
  %165 = fmul float %138, %93, !dbg !38
  %166 = fmul float %140, %94, !dbg !38
  %167 = fmul float %142, %95, !dbg !38
  %168 = fmul float %144, %96, !dbg !38
  %169 = fadd float %161, 0.000000e+00, !dbg !39
  %170 = fadd float %162, 0.000000e+00, !dbg !39
  %171 = fadd float %163, 0.000000e+00, !dbg !39
  %172 = fadd float %164, 0.000000e+00, !dbg !39
  %173 = fadd float %165, 0.000000e+00, !dbg !39
  %174 = fadd float %166, 0.000000e+00, !dbg !39
  %175 = fadd float %167, 0.000000e+00, !dbg !39
  %176 = fadd float %168, 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %177 = fadd float %153, %154, !dbg !42
  %178 = fadd float %155, %177, !dbg !42
  %179 = fadd float %156, %178, !dbg !42
  %180 = fadd float %157, %179, !dbg !42
  %181 = fadd float %158, %180, !dbg !42
  %182 = fadd float %159, %181, !dbg !42
  %183 = fadd float %160, %182, !dbg !42
  %184 = select i1 %45, float %183, float 0.000000e+00, !dbg !42
  %185 = bitcast float %184 to i32, !dbg !40
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !40
  %187 = bitcast i32 %186 to float, !dbg !40
  %188 = fadd float %184, %187, !dbg !42
  %189 = bitcast float %188 to i32, !dbg !40
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !40
  %191 = bitcast i32 %190 to float, !dbg !40
  %192 = fadd float %188, %191, !dbg !42
  %193 = bitcast float %192 to i32, !dbg !40
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !40
  %195 = bitcast i32 %194 to float, !dbg !40
  %196 = fadd float %192, %195, !dbg !42
  %197 = bitcast float %196 to i32, !dbg !40
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !40
  %199 = bitcast i32 %198 to float, !dbg !40
  %200 = fadd float %196, %199, !dbg !42
  %201 = bitcast float %200 to i32, !dbg !40
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !40
  %203 = bitcast i32 %202 to float, !dbg !40
  %204 = fadd float %200, %203, !dbg !42
  %205 = and i32 %12, 15, !dbg !40
  %206 = icmp eq i32 %14, 0, !dbg !40
  %207 = shl nuw nsw i32 %.lobit, 4, !dbg !40
  %208 = or disjoint i32 %207, %205, !dbg !40
  %209 = zext nneg i32 %208 to i64, !dbg !40
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !40
  %211 = bitcast float %204 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 %206) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %212 = icmp slt i32 %11, 32, !dbg !40
  %213 = sext i32 %11 to i64, !dbg !40
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213, !dbg !40
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %212) #4, !dbg !40
  %216 = bitcast i32 %215 to float, !dbg !40
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !40
  %218 = bitcast i32 %217 to float, !dbg !40
  %219 = fadd float %216, %218, !dbg !42
  %220 = bitcast float %219 to i32, !dbg !40
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !40
  %222 = bitcast i32 %221 to float, !dbg !40
  %223 = fadd float %219, %222, !dbg !42
  %224 = bitcast float %223 to i32, !dbg !40
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !40
  %226 = bitcast i32 %225 to float, !dbg !40
  %227 = fadd float %223, %226, !dbg !42
  %228 = bitcast float %227 to i32, !dbg !40
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !40
  %230 = bitcast i32 %229 to float, !dbg !40
  %231 = fadd float %227, %230, !dbg !42
  %232 = and i32 %11, 15, !dbg !40
  %233 = icmp eq i32 %232, 0, !dbg !40
  %234 = and i1 %212, %233, !dbg !40
  %235 = bitcast float %231 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %235, i1 %234) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %236 = zext nneg i32 %207 to i64, !dbg !40
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i64 %236, !dbg !40
  %238 = load i32, ptr addrspace(3) %237, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %239 = zext nneg i32 %.lobit to i64, !dbg !44
  %240 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %239, !dbg !44
  %241 = insertelement <1 x i32> poison, i32 %238, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %242 = zext nneg i32 %15 to i64, !dbg !44
  %243 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %242, !dbg !44
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %245 = fadd float %169, %170, !dbg !47
  %246 = fadd float %171, %245, !dbg !47
  %247 = fadd float %172, %246, !dbg !47
  %248 = fadd float %173, %247, !dbg !47
  %249 = fadd float %174, %248, !dbg !47
  %250 = fadd float %175, %249, !dbg !47
  %251 = fadd float %176, %250, !dbg !47
  %252 = select i1 %45, float %251, float 0.000000e+00, !dbg !47
  %253 = bitcast float %252 to i32, !dbg !45
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 16, i32 31), !dbg !45
  %255 = bitcast i32 %254 to float, !dbg !45
  %256 = fadd float %252, %255, !dbg !47
  %257 = bitcast float %256 to i32, !dbg !45
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !45
  %259 = bitcast i32 %258 to float, !dbg !45
  %260 = fadd float %256, %259, !dbg !47
  %261 = bitcast float %260 to i32, !dbg !45
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !45
  %263 = bitcast i32 %262 to float, !dbg !45
  %264 = fadd float %260, %263, !dbg !47
  %265 = bitcast float %264 to i32, !dbg !45
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !45
  %267 = bitcast i32 %266 to float, !dbg !45
  %268 = fadd float %264, %267, !dbg !47
  %269 = bitcast float %268 to i32, !dbg !45
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !45
  %271 = bitcast i32 %270 to float, !dbg !45
  %272 = fadd float %268, %271, !dbg !47
  %273 = bitcast float %272 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %273, i1 %206) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %274 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %212) #4, !dbg !45
  %275 = bitcast i32 %274 to float, !dbg !45
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 8, i32 31), !dbg !45
  %277 = bitcast i32 %276 to float, !dbg !45
  %278 = fadd float %275, %277, !dbg !47
  %279 = bitcast float %278 to i32, !dbg !45
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 4, i32 31), !dbg !45
  %281 = bitcast i32 %280 to float, !dbg !45
  %282 = fadd float %278, %281, !dbg !47
  %283 = bitcast float %282 to i32, !dbg !45
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !45
  %285 = bitcast i32 %284 to float, !dbg !45
  %286 = fadd float %282, %285, !dbg !47
  %287 = bitcast float %286 to i32, !dbg !45
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !45
  %289 = bitcast i32 %288 to float, !dbg !45
  %290 = fadd float %286, %289, !dbg !47
  %291 = bitcast float %290 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %291, i1 %234) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %292 = load i32, ptr addrspace(3) %237, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %293, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %294 = load i32, ptr addrspace(3) %243, align 4, !dbg !48
  %295 = sext i32 %17 to i64, !dbg !49
  %296 = getelementptr float, ptr addrspace(1) %3, i64 %295, !dbg !49
  %297 = and i32 %11, 1022, !dbg !50
  %298 = icmp eq i32 %297, 0, !dbg !50
  %299 = and i1 %298, %19, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %244, ptr addrspace(1) %296, i1 %299) #4, !dbg !50
  %300 = getelementptr float, ptr addrspace(1) %4, i64 %295, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %300, i1 %299) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdejrfyv2kwed44vpldu3lq3fqyqqztaloewcb735r6wirux7ab.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 33, column: 29, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 41, scope: !6)
!18 = !DILocation(line: 37, column: 94, scope: !6)
!19 = !DILocation(line: 38, column: 46, scope: !6)
!20 = !DILocation(line: 38, column: 41, scope: !6)
!21 = !DILocation(line: 38, column: 34, scope: !6)
!22 = !DILocation(line: 38, column: 59, scope: !6)
!23 = !DILocation(line: 38, column: 51, scope: !6)
!24 = !DILocation(line: 38, column: 113, scope: !6)
!25 = !DILocation(line: 39, column: 35, scope: !6)
!26 = !DILocation(line: 39, column: 52, scope: !6)
!27 = !DILocation(line: 39, column: 114, scope: !6)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = !DILocation(line: 41, column: 26, scope: !6)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 42, column: 22, scope: !6)
!36 = !DILocation(line: 46, column: 22, scope: !6)
!37 = !DILocation(line: 48, column: 25, scope: !6)
!38 = !DILocation(line: 51, column: 23, scope: !6)
!39 = !DILocation(line: 53, column: 25, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !41)
!41 = !DILocation(line: 55, column: 27, scope: !6)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!44 = !DILocation(line: 55, column: 30, scope: !6)
!45 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !46)
!46 = !DILocation(line: 56, column: 27, scope: !6)
!47 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!48 = !DILocation(line: 56, column: 30, scope: !6)
!49 = !DILocation(line: 57, column: 25, scope: !6)
!50 = !DILocation(line: 57, column: 37, scope: !6)
!51 = !DILocation(line: 58, column: 25, scope: !6)
!52 = !DILocation(line: 58, column: 37, scope: !6)
!53 = !DILocation(line: 58, column: 4, scope: !6)
