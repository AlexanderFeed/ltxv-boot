; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 2, !dbg !11
  %13 = and i32 %12, 1020, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = sdiv i32 %14, 12288, !dbg !13
  %16 = mul i32 %15, 12288, !dbg !14
  %.decomposed = sub i32 %14, %16, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr i32, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %18) #1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = sext i32 %15 to i64, !dbg !17
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %25) #1, !dbg !18
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %25) #1, !dbg !18
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %25) #1, !dbg !18
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %25) #1, !dbg !18
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %24, !dbg !19
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %30) #1, !dbg !20
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %30) #1, !dbg !20
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %30) #1, !dbg !20
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %30) #1, !dbg !20
  %35 = sext i32 %.decomposed to i64, !dbg !21
  %36 = getelementptr bfloat, ptr addrspace(1) %3, i64 %35, !dbg !21
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %36) #1, !dbg !22
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !22
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = extractelement <2 x bfloat> %39, i64 0, !dbg !22
  %43 = extractelement <2 x bfloat> %39, i64 1, !dbg !22
  %44 = extractelement <2 x bfloat> %41, i64 0, !dbg !22
  %45 = extractelement <2 x bfloat> %41, i64 1, !dbg !22
  %46 = fpext bfloat %42 to float, !dbg !23
  %47 = fpext bfloat %43 to float, !dbg !23
  %48 = fpext bfloat %44 to float, !dbg !23
  %49 = fpext bfloat %45 to float, !dbg !23
  %50 = getelementptr bfloat, ptr addrspace(1) %4, i64 %35, !dbg !24
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %50) #1, !dbg !25
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !25
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !25
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !25
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !25
  %56 = extractelement <2 x bfloat> %53, i64 0, !dbg !25
  %57 = extractelement <2 x bfloat> %53, i64 1, !dbg !25
  %58 = extractelement <2 x bfloat> %55, i64 0, !dbg !25
  %59 = extractelement <2 x bfloat> %55, i64 1, !dbg !25
  %60 = fpext bfloat %56 to float, !dbg !26
  %61 = fpext bfloat %57 to float, !dbg !26
  %62 = fpext bfloat %58 to float, !dbg !26
  %63 = fpext bfloat %59 to float, !dbg !26
  %64 = sitofp i32 %20 to float, !dbg !27
  %65 = sitofp i32 %21 to float, !dbg !27
  %66 = sitofp i32 %22 to float, !dbg !27
  %67 = sitofp i32 %23 to float, !dbg !27
  %68 = insertelement <4 x i16> poison, i16 %29, i64 0, !dbg !18
  %69 = insertelement <4 x i16> %68, i16 %28, i64 1, !dbg !18
  %70 = insertelement <4 x i16> %69, i16 %27, i64 2, !dbg !18
  %71 = insertelement <4 x i16> %70, i16 %26, i64 3, !dbg !18
  %72 = bitcast <4 x i16> %71 to <4 x bfloat>, !dbg !18
  %73 = insertelement <4 x i16> poison, i16 %34, i64 0, !dbg !20
  %74 = insertelement <4 x i16> %73, i16 %33, i64 1, !dbg !20
  %75 = insertelement <4 x i16> %74, i16 %32, i64 2, !dbg !20
  %76 = insertelement <4 x i16> %75, i16 %31, i64 3, !dbg !20
  %77 = bitcast <4 x i16> %76 to <4 x bfloat>, !dbg !20
  %78 = fcmp oge <4 x bfloat> %72, zeroinitializer, !dbg !28
  %79 = select <4 x i1> %78, <4 x bfloat> zeroinitializer, <4 x bfloat> %72, !dbg !28
  %80 = fpext <4 x bfloat> %79 to <4 x float>, !dbg !28
  %81 = fsub <4 x float> zeroinitializer, %80, !dbg !32
  %82 = fcmp ole <4 x bfloat> %77, zeroinitializer, !dbg !33
  %83 = select <4 x i1> %82, <4 x bfloat> zeroinitializer, <4 x bfloat> %77, !dbg !33
  %84 = fpext <4 x bfloat> %83 to <4 x float>, !dbg !33
  %85 = fcmp ogt <4 x float> %81, %84, !dbg !35
  %86 = fcmp uno <4 x float> %81, zeroinitializer, !dbg !37
  %87 = or <4 x i1> %86, %85, !dbg !38
  %88 = select <4 x i1> %87, <4 x float> %81, <4 x float> %84, !dbg !39
  %89 = fmul <4 x float> %88, splat (float 0x3F80204080000000), !dbg !40
  %90 = fcmp ogt <4 x float> %89, splat (float 0x3EE4F8B580000000), !dbg !41
  %91 = extractelement <4 x float> %89, i64 3, !dbg !43
  %92 = fcmp uno float %91, 0.000000e+00, !dbg !44
  %93 = extractelement <4 x float> %89, i64 2, !dbg !43
  %94 = fcmp uno float %93, 0.000000e+00, !dbg !44
  %95 = extractelement <4 x float> %89, i64 1, !dbg !43
  %96 = fcmp uno float %95, 0.000000e+00, !dbg !44
  %97 = extractelement <4 x float> %89, i64 0, !dbg !43
  %98 = fcmp uno float %97, 0.000000e+00, !dbg !44
  %99 = extractelement <4 x i1> %90, i64 3, !dbg !45
  %100 = or i1 %99, %92, !dbg !45
  %101 = extractelement <4 x i1> %90, i64 2, !dbg !45
  %102 = or i1 %101, %94, !dbg !45
  %103 = extractelement <4 x i1> %90, i64 1, !dbg !45
  %104 = or i1 %103, %96, !dbg !45
  %105 = extractelement <4 x i1> %90, i64 0, !dbg !45
  %106 = or i1 %105, %98, !dbg !45
  %107 = select i1 %100, float %91, float 0x3EE4F8B580000000, !dbg !43
  %108 = select i1 %102, float %93, float 0x3EE4F8B580000000, !dbg !43
  %109 = select i1 %104, float %95, float 0x3EE4F8B580000000, !dbg !43
  %110 = select i1 %106, float %97, float 0x3EE4F8B580000000, !dbg !43
  %111 = fmul float %107, %64, !dbg !46
  %112 = fmul float %108, %65, !dbg !46
  %113 = fmul float %109, %66, !dbg !46
  %114 = fmul float %110, %67, !dbg !46
  %115 = fmul float %111, %46, !dbg !47
  %116 = fmul float %112, %47, !dbg !47
  %117 = fmul float %113, %48, !dbg !47
  %118 = fmul float %114, %49, !dbg !47
  %119 = fadd float %115, %60, !dbg !48
  %120 = fadd float %116, %61, !dbg !48
  %121 = fadd float %117, %62, !dbg !48
  %122 = fadd float %118, %63, !dbg !48
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !49
  %124 = bitcast float %119 to i32, !dbg !50
  %125 = bitcast float %120 to i32, !dbg !50
  %126 = bitcast float %121 to i32, !dbg !50
  %127 = bitcast float %122 to i32, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %124, i32 %125, i32 %126, i32 %127, ptr addrspace(1) %123) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caryk6d7c3hobidnlgz4bgme5erjqj5rswnko6bmmu26ylszour7.py", directory: "/tmp/torchinductor_root/ar")
!4 = !{ptr @triton_, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 28, column: 19, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 30, scope: !6)
!16 = !DILocation(line: 30, column: 35, scope: !6)
!17 = !DILocation(line: 31, column: 30, scope: !6)
!18 = !DILocation(line: 31, column: 35, scope: !6)
!19 = !DILocation(line: 32, column: 30, scope: !6)
!20 = !DILocation(line: 32, column: 35, scope: !6)
!21 = !DILocation(line: 33, column: 31, scope: !6)
!22 = !DILocation(line: 33, column: 36, scope: !6)
!23 = !DILocation(line: 33, column: 75, scope: !6)
!24 = !DILocation(line: 34, column: 31, scope: !6)
!25 = !DILocation(line: 34, column: 36, scope: !6)
!26 = !DILocation(line: 34, column: 75, scope: !6)
!27 = !DILocation(line: 35, column: 19, scope: !6)
!28 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 37, column: 40, scope: !6)
!32 = !DILocation(line: 38, column: 12, scope: !6)
!33 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 39, column: 40, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 40, column: 40, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 42, column: 19, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 45, column: 42, scope: !6)
!43 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !42)
!46 = !DILocation(line: 47, column: 19, scope: !6)
!47 = !DILocation(line: 48, column: 20, scope: !6)
!48 = !DILocation(line: 49, column: 20, scope: !6)
!49 = !DILocation(line: 51, column: 25, scope: !6)
!50 = !DILocation(line: 51, column: 37, scope: !6)
!51 = !DILocation(line: 51, column: 4, scope: !6)
