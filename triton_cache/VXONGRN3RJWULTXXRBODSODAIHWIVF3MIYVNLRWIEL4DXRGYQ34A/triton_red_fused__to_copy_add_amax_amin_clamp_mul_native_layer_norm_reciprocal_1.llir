; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 1, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 64, !dbg !11
  %.lobit = lshr exact i32 %23, 6, !dbg !11
  %24 = and i32 %22, 31, !dbg !11
  %25 = or disjoint i32 %.lobit, %21, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = icmp slt i32 %21, 4112, !dbg !13
  %28 = shl i32 %22, 4, !dbg !14
  %29 = and i32 %28, 1008, !dbg !14
  %30 = or disjoint i32 %29, 8, !dbg !14
  %31 = shl i32 %22, 3, !dbg !14
  %32 = and i32 %31, 1016, !dbg !14
  %33 = mul i32 %25, 3072, !dbg !15
  %34 = or disjoint i32 %33, %29
  %35 = or disjoint i32 %33, %30
  br label %36, !dbg !16

36:                                               ; preds = %19, %._crit_edge
  %indvars.iv = phi i64 [ 0, %19 ], [ %indvars.iv.next, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %19 ], [ %320, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %19 ], [ %321, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %19 ], [ %322, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %19 ], [ %323, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %324, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %325, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %326, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %327, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %328, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %329, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %330, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %331, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %332, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %333, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %334, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %335, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %304, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %305, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %306, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %307, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %308, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %309, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %310, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %311, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %312, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %313, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %314, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %315, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %316, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %317, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %318, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %319, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %288, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %289, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %290, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %291, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %292, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %293, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %294, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %295, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %296, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %297, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %298, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %299, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %300, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %301, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %302, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %303, %._crit_edge ]
  %85 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %86 = add i32 %34, %85, !dbg !17
  %87 = add i32 %35, %85, !dbg !17
  %88 = sext i32 %86 to i64, !dbg !18
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !18
  %90 = sext i32 %87 to i64, !dbg !18
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !18
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %89, i1 %26) #5, !dbg !19
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !19
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !19
  %95 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !19
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !19
  %97 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !19
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !19
  %99 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !19
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !19
  %101 = extractelement <2 x bfloat> %94, i64 0, !dbg !19
  %102 = extractelement <2 x bfloat> %94, i64 1, !dbg !19
  %103 = extractelement <2 x bfloat> %96, i64 0, !dbg !19
  %104 = extractelement <2 x bfloat> %96, i64 1, !dbg !19
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !19
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !19
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !19
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !19
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %91, i1 %26) #5, !dbg !19
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !19
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !19
  %112 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !19
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !19
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !19
  %116 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !19
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !19
  %118 = extractelement <2 x bfloat> %111, i64 0, !dbg !19
  %119 = extractelement <2 x bfloat> %111, i64 1, !dbg !19
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !19
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !19
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !19
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !19
  %124 = extractelement <2 x bfloat> %117, i64 0, !dbg !19
  %125 = extractelement <2 x bfloat> %117, i64 1, !dbg !19
  %126 = fpext bfloat %101 to float, !dbg !20
  %127 = fpext bfloat %102 to float, !dbg !20
  %128 = fpext bfloat %103 to float, !dbg !20
  %129 = fpext bfloat %104 to float, !dbg !20
  %130 = fpext bfloat %105 to float, !dbg !20
  %131 = fpext bfloat %106 to float, !dbg !20
  %132 = fpext bfloat %107 to float, !dbg !20
  %133 = fpext bfloat %108 to float, !dbg !20
  %134 = fpext bfloat %118 to float, !dbg !20
  %135 = fpext bfloat %119 to float, !dbg !20
  %136 = fpext bfloat %120 to float, !dbg !20
  %137 = fpext bfloat %121 to float, !dbg !20
  %138 = fpext bfloat %122 to float, !dbg !20
  %139 = fpext bfloat %123 to float, !dbg !20
  %140 = fpext bfloat %124 to float, !dbg !20
  %141 = fpext bfloat %125 to float, !dbg !20
  %142 = icmp eq i64 %indvars.iv, 0, !dbg !21
  br i1 %142, label %._crit_edge, label %143, !dbg !22

143:                                              ; preds = %36
  %144 = fsub float %126, %69, !dbg !26
  %145 = fsub float %127, %70, !dbg !26
  %146 = fsub float %128, %71, !dbg !26
  %147 = fsub float %129, %72, !dbg !26
  %148 = fsub float %130, %73, !dbg !26
  %149 = fsub float %131, %74, !dbg !26
  %150 = fsub float %132, %75, !dbg !26
  %151 = fsub float %133, %76, !dbg !26
  %152 = fsub float %134, %77, !dbg !26
  %153 = fsub float %135, %78, !dbg !26
  %154 = fsub float %136, %79, !dbg !26
  %155 = fsub float %137, %80, !dbg !26
  %156 = fsub float %138, %81, !dbg !26
  %157 = fsub float %139, %82, !dbg !26
  %158 = fsub float %140, %83, !dbg !26
  %159 = fsub float %141, %84, !dbg !26
  %160 = fadd float %37, 1.000000e+00, !dbg !27
  %161 = fadd float %38, 1.000000e+00, !dbg !27
  %162 = fadd float %39, 1.000000e+00, !dbg !27
  %163 = fadd float %40, 1.000000e+00, !dbg !27
  %164 = fadd float %41, 1.000000e+00, !dbg !27
  %165 = fadd float %42, 1.000000e+00, !dbg !27
  %166 = fadd float %43, 1.000000e+00, !dbg !27
  %167 = fadd float %44, 1.000000e+00, !dbg !27
  %168 = fadd float %45, 1.000000e+00, !dbg !27
  %169 = fadd float %46, 1.000000e+00, !dbg !27
  %170 = fadd float %47, 1.000000e+00, !dbg !27
  %171 = fadd float %48, 1.000000e+00, !dbg !27
  %172 = fadd float %49, 1.000000e+00, !dbg !27
  %173 = fadd float %50, 1.000000e+00, !dbg !27
  %174 = fadd float %51, 1.000000e+00, !dbg !27
  %175 = fadd float %52, 1.000000e+00, !dbg !27
  %176 = tail call float @llvm.nvvm.div.full(float %144, float %160), !dbg !28
  %177 = tail call float @llvm.nvvm.div.full(float %145, float %161), !dbg !28
  %178 = tail call float @llvm.nvvm.div.full(float %146, float %162), !dbg !28
  %179 = tail call float @llvm.nvvm.div.full(float %147, float %163), !dbg !28
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !28
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !28
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !28
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !28
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !28
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !28
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !28
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !28
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !28
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !28
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !28
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !28
  %192 = fadd float %69, %176, !dbg !29
  %193 = fadd float %70, %177, !dbg !29
  %194 = fadd float %71, %178, !dbg !29
  %195 = fadd float %72, %179, !dbg !29
  %196 = fadd float %73, %180, !dbg !29
  %197 = fadd float %74, %181, !dbg !29
  %198 = fadd float %75, %182, !dbg !29
  %199 = fadd float %76, %183, !dbg !29
  %200 = fadd float %77, %184, !dbg !29
  %201 = fadd float %78, %185, !dbg !29
  %202 = fadd float %79, %186, !dbg !29
  %203 = fadd float %80, %187, !dbg !29
  %204 = fadd float %81, %188, !dbg !29
  %205 = fadd float %82, %189, !dbg !29
  %206 = fadd float %83, %190, !dbg !29
  %207 = fadd float %84, %191, !dbg !29
  %208 = fsub float %126, %192, !dbg !30
  %209 = fsub float %127, %193, !dbg !30
  %210 = fsub float %128, %194, !dbg !30
  %211 = fsub float %129, %195, !dbg !30
  %212 = fsub float %130, %196, !dbg !30
  %213 = fsub float %131, %197, !dbg !30
  %214 = fsub float %132, %198, !dbg !30
  %215 = fsub float %133, %199, !dbg !30
  %216 = fsub float %134, %200, !dbg !30
  %217 = fsub float %135, %201, !dbg !30
  %218 = fsub float %136, %202, !dbg !30
  %219 = fsub float %137, %203, !dbg !30
  %220 = fsub float %138, %204, !dbg !30
  %221 = fsub float %139, %205, !dbg !30
  %222 = fsub float %140, %206, !dbg !30
  %223 = fsub float %141, %207, !dbg !30
  %224 = fmul float %144, %208, !dbg !31
  %225 = fmul float %145, %209, !dbg !31
  %226 = fmul float %146, %210, !dbg !31
  %227 = fmul float %147, %211, !dbg !31
  %228 = fmul float %148, %212, !dbg !31
  %229 = fmul float %149, %213, !dbg !31
  %230 = fmul float %150, %214, !dbg !31
  %231 = fmul float %151, %215, !dbg !31
  %232 = fmul float %152, %216, !dbg !31
  %233 = fmul float %153, %217, !dbg !31
  %234 = fmul float %154, %218, !dbg !31
  %235 = fmul float %155, %219, !dbg !31
  %236 = fmul float %156, %220, !dbg !31
  %237 = fmul float %157, %221, !dbg !31
  %238 = fmul float %158, %222, !dbg !31
  %239 = fmul float %159, %223, !dbg !31
  %240 = fadd float %53, %224, !dbg !32
  %241 = fadd float %54, %225, !dbg !32
  %242 = fadd float %55, %226, !dbg !32
  %243 = fadd float %56, %227, !dbg !32
  %244 = fadd float %57, %228, !dbg !32
  %245 = fadd float %58, %229, !dbg !32
  %246 = fadd float %59, %230, !dbg !32
  %247 = fadd float %60, %231, !dbg !32
  %248 = fadd float %61, %232, !dbg !32
  %249 = fadd float %62, %233, !dbg !32
  %250 = fadd float %63, %234, !dbg !32
  %251 = fadd float %64, %235, !dbg !32
  %252 = fadd float %65, %236, !dbg !32
  %253 = fadd float %66, %237, !dbg !32
  %254 = fadd float %67, %238, !dbg !32
  %255 = fadd float %68, %239, !dbg !32
  br label %._crit_edge, !dbg !22

._crit_edge:                                      ; preds = %36, %143
  %256 = phi float [ %240, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %257 = phi float [ %241, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %258 = phi float [ %242, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %259 = phi float [ %243, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %260 = phi float [ %244, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %261 = phi float [ %245, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %262 = phi float [ %246, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %263 = phi float [ %247, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %264 = phi float [ %248, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %265 = phi float [ %249, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %266 = phi float [ %250, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %267 = phi float [ %251, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %268 = phi float [ %252, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %269 = phi float [ %253, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %270 = phi float [ %254, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %271 = phi float [ %255, %143 ], [ 0.000000e+00, %36 ], !dbg !25
  %.pn52 = phi float [ %192, %143 ], [ %126, %36 ]
  %.pn50 = phi float [ %193, %143 ], [ %127, %36 ]
  %.pn48 = phi float [ %194, %143 ], [ %128, %36 ]
  %.pn46 = phi float [ %195, %143 ], [ %129, %36 ]
  %.pn44 = phi float [ %196, %143 ], [ %130, %36 ]
  %.pn42 = phi float [ %197, %143 ], [ %131, %36 ]
  %.pn40 = phi float [ %198, %143 ], [ %132, %36 ]
  %.pn38 = phi float [ %199, %143 ], [ %133, %36 ]
  %.pn36 = phi float [ %200, %143 ], [ %134, %36 ]
  %.pn34 = phi float [ %201, %143 ], [ %135, %36 ]
  %.pn32 = phi float [ %202, %143 ], [ %136, %36 ]
  %.pn30 = phi float [ %203, %143 ], [ %137, %36 ]
  %.pn28 = phi float [ %204, %143 ], [ %138, %36 ]
  %.pn26 = phi float [ %205, %143 ], [ %139, %36 ]
  %.pn24 = phi float [ %206, %143 ], [ %140, %36 ]
  %.pn22 = phi float [ %207, %143 ], [ %141, %36 ]
  %272 = phi float [ %160, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %273 = phi float [ %161, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %274 = phi float [ %162, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %275 = phi float [ %163, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %276 = phi float [ %164, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %277 = phi float [ %165, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %278 = phi float [ %166, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %279 = phi float [ %167, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %280 = phi float [ %168, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %281 = phi float [ %169, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %282 = phi float [ %170, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %283 = phi float [ %171, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %284 = phi float [ %172, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %285 = phi float [ %173, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %286 = phi float [ %174, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %287 = phi float [ %175, %143 ], [ 1.000000e+00, %36 ], !dbg !25
  %288 = select i1 %26, float %.pn52, float %69, !dbg !33
  %289 = select i1 %26, float %.pn50, float %70, !dbg !33
  %290 = select i1 %26, float %.pn48, float %71, !dbg !33
  %291 = select i1 %26, float %.pn46, float %72, !dbg !33
  %292 = select i1 %26, float %.pn44, float %73, !dbg !33
  %293 = select i1 %26, float %.pn42, float %74, !dbg !33
  %294 = select i1 %26, float %.pn40, float %75, !dbg !33
  %295 = select i1 %26, float %.pn38, float %76, !dbg !33
  %296 = select i1 %26, float %.pn36, float %77, !dbg !33
  %297 = select i1 %26, float %.pn34, float %78, !dbg !33
  %298 = select i1 %26, float %.pn32, float %79, !dbg !33
  %299 = select i1 %26, float %.pn30, float %80, !dbg !33
  %300 = select i1 %26, float %.pn28, float %81, !dbg !33
  %301 = select i1 %26, float %.pn26, float %82, !dbg !33
  %302 = select i1 %26, float %.pn24, float %83, !dbg !33
  %303 = select i1 %26, float %.pn22, float %84, !dbg !33
  %304 = select i1 %26, float %256, float %53, !dbg !34
  %305 = select i1 %26, float %257, float %54, !dbg !34
  %306 = select i1 %26, float %258, float %55, !dbg !34
  %307 = select i1 %26, float %259, float %56, !dbg !34
  %308 = select i1 %26, float %260, float %57, !dbg !34
  %309 = select i1 %26, float %261, float %58, !dbg !34
  %310 = select i1 %26, float %262, float %59, !dbg !34
  %311 = select i1 %26, float %263, float %60, !dbg !34
  %312 = select i1 %26, float %264, float %61, !dbg !34
  %313 = select i1 %26, float %265, float %62, !dbg !34
  %314 = select i1 %26, float %266, float %63, !dbg !34
  %315 = select i1 %26, float %267, float %64, !dbg !34
  %316 = select i1 %26, float %268, float %65, !dbg !34
  %317 = select i1 %26, float %269, float %66, !dbg !34
  %318 = select i1 %26, float %270, float %67, !dbg !34
  %319 = select i1 %26, float %271, float %68, !dbg !34
  %320 = select i1 %26, float %272, float %37, !dbg !35
  %321 = select i1 %26, float %273, float %38, !dbg !35
  %322 = select i1 %26, float %274, float %39, !dbg !35
  %323 = select i1 %26, float %275, float %40, !dbg !35
  %324 = select i1 %26, float %276, float %41, !dbg !35
  %325 = select i1 %26, float %277, float %42, !dbg !35
  %326 = select i1 %26, float %278, float %43, !dbg !35
  %327 = select i1 %26, float %279, float %44, !dbg !35
  %328 = select i1 %26, float %280, float %45, !dbg !35
  %329 = select i1 %26, float %281, float %46, !dbg !35
  %330 = select i1 %26, float %282, float %47, !dbg !35
  %331 = select i1 %26, float %283, float %48, !dbg !35
  %332 = select i1 %26, float %284, float %49, !dbg !35
  %333 = select i1 %26, float %285, float %50, !dbg !35
  %334 = select i1 %26, float %286, float %51, !dbg !35
  %335 = select i1 %26, float %287, float %52, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !16
  %336 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !16
  br i1 %336, label %36, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %337 = lshr i32 %22, 5, !dbg !11
  %338 = and i32 %22, 1, !dbg !11
  %339 = or disjoint i32 %21, %338, !dbg !12
  %340 = icmp slt i32 %339, 4112, !dbg !13
  %341 = or disjoint i32 %32, 4, !dbg !14
  %342 = fsub float %289, %288, !dbg !36
  %343 = fadd float %320, %321, !dbg !39
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !40
  %345 = tail call float @llvm.nvvm.div.full(float %321, float %343), !dbg !41
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !42
  %347 = fmul float %342, %346, !dbg !43
  %348 = fadd float %288, %347, !dbg !44
  %349 = fadd float %304, %305, !dbg !45
  %350 = fmul float %342, %342, !dbg !46
  %351 = fmul float %350, %320, !dbg !47
  %352 = fmul float %351, %346, !dbg !48
  %353 = fadd float %349, %352, !dbg !49
  %354 = fsub float %290, %348, !dbg !36
  %355 = fadd float %322, %343, !dbg !39
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !40
  %357 = tail call float @llvm.nvvm.div.full(float %322, float %355), !dbg !41
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !42
  %359 = fmul float %358, %354, !dbg !43
  %360 = fadd float %348, %359, !dbg !44
  %361 = fadd float %306, %353, !dbg !45
  %362 = fmul float %354, %354, !dbg !46
  %363 = fmul float %343, %362, !dbg !47
  %364 = fmul float %358, %363, !dbg !48
  %365 = fadd float %361, %364, !dbg !49
  %366 = fsub float %291, %360, !dbg !36
  %367 = fadd float %323, %355, !dbg !39
  %368 = fcmp oeq float %367, 0.000000e+00, !dbg !40
  %369 = tail call float @llvm.nvvm.div.full(float %323, float %367), !dbg !41
  %370 = select i1 %368, float 0.000000e+00, float %369, !dbg !42
  %371 = fmul float %370, %366, !dbg !43
  %372 = fadd float %360, %371, !dbg !44
  %373 = fadd float %307, %365, !dbg !45
  %374 = fmul float %366, %366, !dbg !46
  %375 = fmul float %355, %374, !dbg !47
  %376 = fmul float %370, %375, !dbg !48
  %377 = fadd float %373, %376, !dbg !49
  %378 = fsub float %292, %372, !dbg !36
  %379 = fadd float %324, %367, !dbg !39
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !40
  %381 = tail call float @llvm.nvvm.div.full(float %324, float %379), !dbg !41
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !42
  %383 = fmul float %382, %378, !dbg !43
  %384 = fadd float %372, %383, !dbg !44
  %385 = fadd float %308, %377, !dbg !45
  %386 = fmul float %378, %378, !dbg !46
  %387 = fmul float %367, %386, !dbg !47
  %388 = fmul float %382, %387, !dbg !48
  %389 = fadd float %385, %388, !dbg !49
  %390 = fsub float %293, %384, !dbg !36
  %391 = fadd float %325, %379, !dbg !39
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !40
  %393 = tail call float @llvm.nvvm.div.full(float %325, float %391), !dbg !41
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !42
  %395 = fmul float %394, %390, !dbg !43
  %396 = fadd float %384, %395, !dbg !44
  %397 = fadd float %309, %389, !dbg !45
  %398 = fmul float %390, %390, !dbg !46
  %399 = fmul float %379, %398, !dbg !47
  %400 = fmul float %394, %399, !dbg !48
  %401 = fadd float %397, %400, !dbg !49
  %402 = fsub float %294, %396, !dbg !36
  %403 = fadd float %326, %391, !dbg !39
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !40
  %405 = tail call float @llvm.nvvm.div.full(float %326, float %403), !dbg !41
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !42
  %407 = fmul float %406, %402, !dbg !43
  %408 = fadd float %396, %407, !dbg !44
  %409 = fadd float %310, %401, !dbg !45
  %410 = fmul float %402, %402, !dbg !46
  %411 = fmul float %391, %410, !dbg !47
  %412 = fmul float %406, %411, !dbg !48
  %413 = fadd float %409, %412, !dbg !49
  %414 = fsub float %295, %408, !dbg !36
  %415 = fadd float %327, %403, !dbg !39
  %416 = fcmp oeq float %415, 0.000000e+00, !dbg !40
  %417 = tail call float @llvm.nvvm.div.full(float %327, float %415), !dbg !41
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !42
  %419 = fmul float %418, %414, !dbg !43
  %420 = fadd float %408, %419, !dbg !44
  %421 = fadd float %311, %413, !dbg !45
  %422 = fmul float %414, %414, !dbg !46
  %423 = fmul float %403, %422, !dbg !47
  %424 = fmul float %418, %423, !dbg !48
  %425 = fadd float %421, %424, !dbg !49
  %426 = fsub float %296, %420, !dbg !36
  %427 = fadd float %328, %415, !dbg !39
  %428 = fcmp oeq float %427, 0.000000e+00, !dbg !40
  %429 = tail call float @llvm.nvvm.div.full(float %328, float %427), !dbg !41
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !42
  %431 = fmul float %430, %426, !dbg !43
  %432 = fadd float %420, %431, !dbg !44
  %433 = fadd float %312, %425, !dbg !45
  %434 = fmul float %426, %426, !dbg !46
  %435 = fmul float %415, %434, !dbg !47
  %436 = fmul float %430, %435, !dbg !48
  %437 = fadd float %433, %436, !dbg !49
  %438 = fsub float %297, %432, !dbg !36
  %439 = fadd float %329, %427, !dbg !39
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !40
  %441 = tail call float @llvm.nvvm.div.full(float %329, float %439), !dbg !41
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !42
  %443 = fmul float %442, %438, !dbg !43
  %444 = fadd float %432, %443, !dbg !44
  %445 = fadd float %313, %437, !dbg !45
  %446 = fmul float %438, %438, !dbg !46
  %447 = fmul float %427, %446, !dbg !47
  %448 = fmul float %442, %447, !dbg !48
  %449 = fadd float %445, %448, !dbg !49
  %450 = fsub float %298, %444, !dbg !36
  %451 = fadd float %330, %439, !dbg !39
  %452 = fcmp oeq float %451, 0.000000e+00, !dbg !40
  %453 = tail call float @llvm.nvvm.div.full(float %330, float %451), !dbg !41
  %454 = select i1 %452, float 0.000000e+00, float %453, !dbg !42
  %455 = fmul float %454, %450, !dbg !43
  %456 = fadd float %444, %455, !dbg !44
  %457 = fadd float %314, %449, !dbg !45
  %458 = fmul float %450, %450, !dbg !46
  %459 = fmul float %439, %458, !dbg !47
  %460 = fmul float %454, %459, !dbg !48
  %461 = fadd float %457, %460, !dbg !49
  %462 = fsub float %299, %456, !dbg !36
  %463 = fadd float %331, %451, !dbg !39
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !40
  %465 = tail call float @llvm.nvvm.div.full(float %331, float %463), !dbg !41
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !42
  %467 = fmul float %466, %462, !dbg !43
  %468 = fadd float %456, %467, !dbg !44
  %469 = fadd float %315, %461, !dbg !45
  %470 = fmul float %462, %462, !dbg !46
  %471 = fmul float %451, %470, !dbg !47
  %472 = fmul float %466, %471, !dbg !48
  %473 = fadd float %469, %472, !dbg !49
  %474 = fsub float %300, %468, !dbg !36
  %475 = fadd float %332, %463, !dbg !39
  %476 = fcmp oeq float %475, 0.000000e+00, !dbg !40
  %477 = tail call float @llvm.nvvm.div.full(float %332, float %475), !dbg !41
  %478 = select i1 %476, float 0.000000e+00, float %477, !dbg !42
  %479 = fmul float %478, %474, !dbg !43
  %480 = fadd float %468, %479, !dbg !44
  %481 = fadd float %316, %473, !dbg !45
  %482 = fmul float %474, %474, !dbg !46
  %483 = fmul float %463, %482, !dbg !47
  %484 = fmul float %478, %483, !dbg !48
  %485 = fadd float %481, %484, !dbg !49
  %486 = fsub float %301, %480, !dbg !36
  %487 = fadd float %333, %475, !dbg !39
  %488 = fcmp oeq float %487, 0.000000e+00, !dbg !40
  %489 = tail call float @llvm.nvvm.div.full(float %333, float %487), !dbg !41
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !42
  %491 = fmul float %490, %486, !dbg !43
  %492 = fadd float %480, %491, !dbg !44
  %493 = fadd float %317, %485, !dbg !45
  %494 = fmul float %486, %486, !dbg !46
  %495 = fmul float %475, %494, !dbg !47
  %496 = fmul float %490, %495, !dbg !48
  %497 = fadd float %493, %496, !dbg !49
  %498 = fsub float %302, %492, !dbg !36
  %499 = fadd float %334, %487, !dbg !39
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !40
  %501 = tail call float @llvm.nvvm.div.full(float %334, float %499), !dbg !41
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !42
  %503 = fmul float %502, %498, !dbg !43
  %504 = fadd float %492, %503, !dbg !44
  %505 = fadd float %318, %497, !dbg !45
  %506 = fmul float %498, %498, !dbg !46
  %507 = fmul float %487, %506, !dbg !47
  %508 = fmul float %502, %507, !dbg !48
  %509 = fadd float %505, %508, !dbg !49
  %510 = fsub float %303, %504, !dbg !36
  %511 = fadd float %335, %499, !dbg !39
  %512 = fcmp oeq float %511, 0.000000e+00, !dbg !40
  %513 = tail call float @llvm.nvvm.div.full(float %335, float %511), !dbg !41
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !42
  %515 = fmul float %514, %510, !dbg !43
  %516 = fadd float %504, %515, !dbg !44
  %517 = fadd float %319, %509, !dbg !45
  %518 = fmul float %510, %510, !dbg !46
  %519 = fmul float %499, %518, !dbg !47
  %520 = fmul float %514, %519, !dbg !48
  %521 = fadd float %517, %520, !dbg !49
  %522 = bitcast float %516 to i32, !dbg !50
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 16, i32 31), !dbg !50
  %524 = bitcast i32 %523 to float, !dbg !50
  %525 = bitcast float %521 to i32, !dbg !50
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 16, i32 31), !dbg !50
  %527 = bitcast i32 %526 to float, !dbg !50
  %528 = bitcast float %511 to i32, !dbg !50
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 16, i32 31), !dbg !50
  %530 = bitcast i32 %529 to float, !dbg !50
  %531 = fsub float %524, %516, !dbg !36
  %532 = fadd float %511, %530, !dbg !39
  %533 = fcmp oeq float %532, 0.000000e+00, !dbg !40
  %534 = tail call float @llvm.nvvm.div.full(float %530, float %532), !dbg !41
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !42
  %536 = fmul float %535, %531, !dbg !43
  %537 = fadd float %516, %536, !dbg !44
  %538 = fadd float %521, %527, !dbg !45
  %539 = fmul float %531, %531, !dbg !46
  %540 = fmul float %511, %539, !dbg !47
  %541 = fmul float %535, %540, !dbg !48
  %542 = fadd float %538, %541, !dbg !49
  %543 = bitcast float %537 to i32, !dbg !50
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 8, i32 31), !dbg !50
  %545 = bitcast i32 %544 to float, !dbg !50
  %546 = bitcast float %542 to i32, !dbg !50
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !50
  %548 = bitcast i32 %547 to float, !dbg !50
  %549 = bitcast float %532 to i32, !dbg !50
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 8, i32 31), !dbg !50
  %551 = bitcast i32 %550 to float, !dbg !50
  %552 = fsub float %545, %537, !dbg !36
  %553 = fadd float %532, %551, !dbg !39
  %554 = fcmp oeq float %553, 0.000000e+00, !dbg !40
  %555 = tail call float @llvm.nvvm.div.full(float %551, float %553), !dbg !41
  %556 = select i1 %554, float 0.000000e+00, float %555, !dbg !42
  %557 = fmul float %556, %552, !dbg !43
  %558 = fadd float %537, %557, !dbg !44
  %559 = fadd float %542, %548, !dbg !45
  %560 = fmul float %552, %552, !dbg !46
  %561 = fmul float %532, %560, !dbg !47
  %562 = fmul float %556, %561, !dbg !48
  %563 = fadd float %559, %562, !dbg !49
  %564 = bitcast float %558 to i32, !dbg !50
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !50
  %566 = bitcast i32 %565 to float, !dbg !50
  %567 = bitcast float %563 to i32, !dbg !50
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !50
  %569 = bitcast i32 %568 to float, !dbg !50
  %570 = bitcast float %553 to i32, !dbg !50
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 4, i32 31), !dbg !50
  %572 = bitcast i32 %571 to float, !dbg !50
  %573 = fsub float %566, %558, !dbg !36
  %574 = fadd float %553, %572, !dbg !39
  %575 = fcmp oeq float %574, 0.000000e+00, !dbg !40
  %576 = tail call float @llvm.nvvm.div.full(float %572, float %574), !dbg !41
  %577 = select i1 %575, float 0.000000e+00, float %576, !dbg !42
  %578 = fmul float %577, %573, !dbg !43
  %579 = fadd float %558, %578, !dbg !44
  %580 = fadd float %563, %569, !dbg !45
  %581 = fmul float %573, %573, !dbg !46
  %582 = fmul float %553, %581, !dbg !47
  %583 = fmul float %577, %582, !dbg !48
  %584 = fadd float %580, %583, !dbg !49
  %585 = bitcast float %579 to i32, !dbg !50
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !50
  %587 = bitcast i32 %586 to float, !dbg !50
  %588 = bitcast float %584 to i32, !dbg !50
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !50
  %590 = bitcast i32 %589 to float, !dbg !50
  %591 = bitcast float %574 to i32, !dbg !50
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 2, i32 31), !dbg !50
  %593 = bitcast i32 %592 to float, !dbg !50
  %594 = fsub float %587, %579, !dbg !36
  %595 = fadd float %574, %593, !dbg !39
  %596 = fcmp oeq float %595, 0.000000e+00, !dbg !40
  %597 = tail call float @llvm.nvvm.div.full(float %593, float %595), !dbg !41
  %598 = select i1 %596, float 0.000000e+00, float %597, !dbg !42
  %599 = fmul float %598, %594, !dbg !43
  %600 = fadd float %579, %599, !dbg !44
  %601 = fadd float %584, %590, !dbg !45
  %602 = fmul float %594, %594, !dbg !46
  %603 = fmul float %574, %602, !dbg !47
  %604 = fmul float %598, %603, !dbg !48
  %605 = fadd float %601, %604, !dbg !49
  %606 = bitcast float %600 to i32, !dbg !50
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !50
  %608 = bitcast i32 %607 to float, !dbg !50
  %609 = bitcast float %605 to i32, !dbg !50
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !50
  %611 = bitcast i32 %610 to float, !dbg !50
  %612 = bitcast float %595 to i32, !dbg !50
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !50
  %614 = bitcast i32 %613 to float, !dbg !50
  %615 = fsub float %608, %600, !dbg !36
  %616 = fadd float %595, %614, !dbg !39
  %617 = fcmp oeq float %616, 0.000000e+00, !dbg !40
  %618 = tail call float @llvm.nvvm.div.full(float %614, float %616), !dbg !41
  %619 = select i1 %617, float 0.000000e+00, float %618, !dbg !42
  %620 = fmul float %619, %615, !dbg !43
  %621 = fadd float %600, %620, !dbg !44
  %622 = fadd float %605, %611, !dbg !45
  %623 = fmul float %615, %615, !dbg !46
  %624 = fmul float %595, %623, !dbg !47
  %625 = fmul float %619, %624, !dbg !48
  %626 = fadd float %622, %625, !dbg !49
  %627 = and i32 %337, 1, !dbg !50
  %628 = icmp eq i32 %24, 0, !dbg !50
  %629 = lshr exact i32 %23, 5, !dbg !50
  %630 = or disjoint i32 %629, %627, !dbg !50
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %630, !dbg !50
  %632 = bitcast float %621 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %631, <1 x i32> %632, i1 %628) #5, !dbg !50
  %633 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %630, !dbg !50
  %634 = bitcast float %626 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %633, <1 x i32> %634, i1 %628) #5, !dbg !50
  %635 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %630, !dbg !50
  %636 = bitcast float %616 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %636, i1 %628) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %637 = icmp slt i32 %22, 4, !dbg !50
  %638 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !50
  %639 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %637) #5, !dbg !50
  %640 = bitcast i32 %639 to float, !dbg !50
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %22, !dbg !50
  %642 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %637) #5, !dbg !50
  %643 = bitcast i32 %642 to float, !dbg !50
  %644 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %22, !dbg !50
  %645 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %637) #5, !dbg !50
  %646 = bitcast i32 %645 to float, !dbg !50
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !50
  %648 = bitcast i32 %647 to float, !dbg !50
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 1, i32 31), !dbg !50
  %650 = bitcast i32 %649 to float, !dbg !50
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 1, i32 31), !dbg !50
  %652 = bitcast i32 %651 to float, !dbg !50
  %653 = fsub float %648, %640, !dbg !36
  %654 = fadd float %646, %652, !dbg !39
  %655 = fcmp oeq float %654, 0.000000e+00, !dbg !40
  %656 = tail call float @llvm.nvvm.div.full(float %652, float %654), !dbg !41
  %657 = select i1 %655, float 0.000000e+00, float %656, !dbg !42
  %658 = fmul float %653, %657, !dbg !43
  %659 = fadd float %658, %640, !dbg !44
  %660 = fadd float %643, %650, !dbg !45
  %661 = fmul float %653, %653, !dbg !46
  %662 = fmul float %661, %646, !dbg !47
  %663 = fmul float %662, %657, !dbg !48
  %664 = fadd float %660, %663, !dbg !49
  %665 = icmp eq i32 %338, 0, !dbg !50
  %666 = and i1 %637, %665, !dbg !50
  %667 = bitcast float %659 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %667, i1 %666) #5, !dbg !50
  %668 = bitcast float %664 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %668, i1 %666) #5, !dbg !50
  %669 = bitcast float %654 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %669, i1 %666) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %670 = getelementptr float, ptr addrspace(3) @global_smem, i32 %629, !dbg !50
  %671 = load float, ptr addrspace(3) %670, align 8, !dbg !50
  %672 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %629, !dbg !50
  %673 = load float, ptr addrspace(3) %672, align 8, !dbg !50
  %674 = mul i32 %20, 6144, !dbg !51
  %675 = add i32 %674, 3072, !dbg !51
  %676 = tail call float @llvm.nvvm.div.full(float %673, float 3.072000e+03), !dbg !52
  %677 = fadd float %676, 0x3EB0C6F7A0000000, !dbg !53
  %678 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %681 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %682 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %683 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %684 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %686 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %693 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i95 = icmp eq i32 %693, 0, !dbg !54
  br i1 %.not.i95, label %696, label %694, !dbg !54

694:                                              ; preds = %__nv_rsqrtf.exit
  %695 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %677), !dbg !54
  br label %__nv_rsqrtf.exit97, !dbg !54

696:                                              ; preds = %__nv_rsqrtf.exit
  %697 = tail call float @llvm.nvvm.rsqrt.approx.f(float %677), !dbg !54
  br label %__nv_rsqrtf.exit97, !dbg !54

__nv_rsqrtf.exit97:                               ; preds = %694, %696
  %.0.i96 = phi float [ %695, %694 ], [ %697, %696 ], !dbg !54
  %698 = and i32 %28, 2032
  %699 = lshr i32 %28, 8
  %700 = and i32 %699, 4
  %701 = or disjoint i32 %700, %698
  %702 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %701
  %703 = or disjoint i32 %698, 4
  %704 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %700
  %705 = getelementptr inbounds nuw float, ptr addrspace(3) %704, i32 %703
  %706 = or disjoint i32 %701, 8
  %707 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %706
  %708 = or disjoint i32 %698, 12
  %709 = getelementptr inbounds nuw float, ptr addrspace(3) %704, i32 %708
  %710 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %711 = or disjoint i32 %32, 1024
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %711
  %712 = or disjoint i32 %32, 1028
  %gep102 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %712
  %713 = zext nneg i32 %341 to i64, !dbg !55
  %714 = zext nneg i32 %32 to i64, !dbg !55
  %715 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep, i32 8
  %716 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep102, i32 8
  %717 = insertelement <2 x i1> poison, i1 %27, i64 0, !dbg !56
  %718 = shufflevector <2 x i1> %717, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !56
  %719 = insertelement <16 x i1> poison, i1 %27, i64 0, !dbg !56
  %720 = shufflevector <16 x i1> %719, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !56
  %721 = insertelement <8 x i1> poison, i1 %27, i64 0, !dbg !57
  %722 = shufflevector <8 x i1> %721, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !57
  %723 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !57
  %724 = shufflevector <4 x i1> %723, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  br label %725, !dbg !55

725:                                              ; preds = %__nv_rsqrtf.exit97, %725
  %indvars.iv182 = phi i64 [ 0, %__nv_rsqrtf.exit97 ], [ %indvars.iv.next183, %725 ]
  %726 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %991, %725 ]
  %727 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %992, %725 ]
  %728 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit97 ], [ %1000, %725 ]
  %729 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit97 ], [ %1001, %725 ]
  %730 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %994, %725 ]
  %731 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %993, %725 ]
  %732 = or disjoint i64 %indvars.iv182, %714, !dbg !58
  %733 = or disjoint i64 %indvars.iv182, %713, !dbg !58
  %734 = trunc nuw nsw i64 %indvars.iv182 to i32, !dbg !59
  %735 = add i32 %34, %734, !dbg !59
  %736 = add i32 %35, %734, !dbg !59
  %737 = trunc nuw nsw i64 %732 to i32, !dbg !59
  %738 = add i32 %674, %737, !dbg !59
  %739 = add i32 %675, %737, !dbg !59
  %740 = sext i32 %735 to i64, !dbg !60
  %741 = getelementptr bfloat, ptr addrspace(1) %0, i64 %740, !dbg !60
  %742 = sext i32 %736 to i64, !dbg !60
  %743 = getelementptr bfloat, ptr addrspace(1) %0, i64 %742, !dbg !60
  %744 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %741, i1 %26) #5, !dbg !61
  %745 = extractvalue { i32, i32, i32, i32 } %744, 0, !dbg !61
  %746 = bitcast i32 %745 to <2 x bfloat>, !dbg !61
  %747 = extractvalue { i32, i32, i32, i32 } %744, 1, !dbg !61
  %748 = bitcast i32 %747 to <2 x bfloat>, !dbg !61
  %749 = extractvalue { i32, i32, i32, i32 } %744, 2, !dbg !61
  %750 = bitcast i32 %749 to <2 x bfloat>, !dbg !61
  %751 = extractvalue { i32, i32, i32, i32 } %744, 3, !dbg !61
  %752 = bitcast i32 %751 to <2 x bfloat>, !dbg !61
  %753 = extractelement <2 x bfloat> %746, i64 0, !dbg !61
  %754 = extractelement <2 x bfloat> %746, i64 1, !dbg !61
  %755 = extractelement <2 x bfloat> %748, i64 0, !dbg !61
  %756 = extractelement <2 x bfloat> %748, i64 1, !dbg !61
  %757 = extractelement <2 x bfloat> %750, i64 0, !dbg !61
  %758 = extractelement <2 x bfloat> %750, i64 1, !dbg !61
  %759 = extractelement <2 x bfloat> %752, i64 0, !dbg !61
  %760 = extractelement <2 x bfloat> %752, i64 1, !dbg !61
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %743, i1 %26) #5, !dbg !61
  %762 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !61
  %763 = bitcast i32 %762 to <2 x bfloat>, !dbg !61
  %764 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !61
  %765 = bitcast i32 %764 to <2 x bfloat>, !dbg !61
  %766 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !61
  %767 = bitcast i32 %766 to <2 x bfloat>, !dbg !61
  %768 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !61
  %769 = bitcast i32 %768 to <2 x bfloat>, !dbg !61
  %770 = extractelement <2 x bfloat> %763, i64 0, !dbg !61
  %771 = extractelement <2 x bfloat> %763, i64 1, !dbg !61
  %772 = extractelement <2 x bfloat> %765, i64 0, !dbg !61
  %773 = extractelement <2 x bfloat> %765, i64 1, !dbg !61
  %774 = extractelement <2 x bfloat> %767, i64 0, !dbg !61
  %775 = extractelement <2 x bfloat> %767, i64 1, !dbg !61
  %776 = extractelement <2 x bfloat> %769, i64 0, !dbg !61
  %777 = extractelement <2 x bfloat> %769, i64 1, !dbg !61
  %778 = fpext bfloat %753 to float, !dbg !62
  %779 = fpext bfloat %754 to float, !dbg !62
  %780 = fpext bfloat %755 to float, !dbg !62
  %781 = fpext bfloat %756 to float, !dbg !62
  %782 = fpext bfloat %757 to float, !dbg !62
  %783 = fpext bfloat %758 to float, !dbg !62
  %784 = fpext bfloat %759 to float, !dbg !62
  %785 = fpext bfloat %760 to float, !dbg !62
  %786 = fpext bfloat %770 to float, !dbg !62
  %787 = fpext bfloat %771 to float, !dbg !62
  %788 = fpext bfloat %772 to float, !dbg !62
  %789 = fpext bfloat %773 to float, !dbg !62
  %790 = fpext bfloat %774 to float, !dbg !62
  %791 = fpext bfloat %775 to float, !dbg !62
  %792 = fpext bfloat %776 to float, !dbg !62
  %793 = fpext bfloat %777 to float, !dbg !62
  %794 = add nuw nsw i64 %732, 3072, !dbg !63
  %795 = getelementptr float, ptr addrspace(1) %1, i64 %794, !dbg !64
  %796 = getelementptr float, ptr addrspace(1) %1, i64 %733, !dbg !64
  %797 = getelementptr i8, ptr addrspace(1) %796, i64 12288, !dbg !64
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %795, i1 true) #5, !dbg !65
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !65
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !65
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !65
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !65
  %803 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %797, i1 true) #5, !dbg !65
  %804 = extractvalue { i32, i32, i32, i32 } %803, 0, !dbg !65
  %805 = extractvalue { i32, i32, i32, i32 } %803, 1, !dbg !65
  %806 = extractvalue { i32, i32, i32, i32 } %803, 2, !dbg !65
  %807 = extractvalue { i32, i32, i32, i32 } %803, 3, !dbg !65
  %808 = getelementptr bfloat, ptr addrspace(1) %2, i64 %794, !dbg !66
  %809 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %808, i1 true) #5, !dbg !67
  %810 = extractvalue { i32, i32, i32, i32 } %809, 0, !dbg !67
  %811 = bitcast i32 %810 to <2 x bfloat>, !dbg !67
  %812 = extractvalue { i32, i32, i32, i32 } %809, 1, !dbg !67
  %813 = bitcast i32 %812 to <2 x bfloat>, !dbg !67
  %814 = extractvalue { i32, i32, i32, i32 } %809, 2, !dbg !67
  %815 = bitcast i32 %814 to <2 x bfloat>, !dbg !67
  %816 = extractvalue { i32, i32, i32, i32 } %809, 3, !dbg !67
  %817 = bitcast i32 %816 to <2 x bfloat>, !dbg !67
  %818 = getelementptr float, ptr addrspace(1) %1, i64 %732, !dbg !68
  %819 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %818, i1 true) #5, !dbg !69
  %820 = extractvalue { i32, i32, i32, i32 } %819, 0, !dbg !69
  %821 = extractvalue { i32, i32, i32, i32 } %819, 1, !dbg !69
  %822 = extractvalue { i32, i32, i32, i32 } %819, 2, !dbg !69
  %823 = extractvalue { i32, i32, i32, i32 } %819, 3, !dbg !69
  %824 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %796, i1 true) #5, !dbg !69
  %825 = extractvalue { i32, i32, i32, i32 } %824, 0, !dbg !69
  %826 = extractvalue { i32, i32, i32, i32 } %824, 1, !dbg !69
  %827 = extractvalue { i32, i32, i32, i32 } %824, 2, !dbg !69
  %828 = extractvalue { i32, i32, i32, i32 } %824, 3, !dbg !69
  %829 = getelementptr bfloat, ptr addrspace(1) %2, i64 %732, !dbg !70
  %830 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %829, i1 true) #5, !dbg !71
  %831 = extractvalue { i32, i32, i32, i32 } %830, 0, !dbg !71
  %832 = bitcast i32 %831 to <2 x bfloat>, !dbg !71
  %833 = extractvalue { i32, i32, i32, i32 } %830, 1, !dbg !71
  %834 = bitcast i32 %833 to <2 x bfloat>, !dbg !71
  %835 = extractvalue { i32, i32, i32, i32 } %830, 2, !dbg !71
  %836 = bitcast i32 %835 to <2 x bfloat>, !dbg !71
  %837 = extractvalue { i32, i32, i32, i32 } %830, 3, !dbg !71
  %838 = bitcast i32 %837 to <2 x bfloat>, !dbg !71
  %839 = fsub float %778, %671, !dbg !72
  %840 = fsub float %779, %671, !dbg !72
  %841 = fsub float %780, %671, !dbg !72
  %842 = fsub float %781, %671, !dbg !72
  %843 = fsub float %782, %671, !dbg !72
  %844 = fsub float %783, %671, !dbg !72
  %845 = fsub float %784, %671, !dbg !72
  %846 = fsub float %785, %671, !dbg !72
  %847 = fsub float %786, %671, !dbg !72
  %848 = fsub float %787, %671, !dbg !72
  %849 = fsub float %788, %671, !dbg !72
  %850 = fsub float %789, %671, !dbg !72
  %851 = fsub float %790, %671, !dbg !72
  %852 = fsub float %791, %671, !dbg !72
  %853 = fsub float %792, %671, !dbg !72
  %854 = fsub float %793, %671, !dbg !72
  %855 = fmul float %.0.i96, %839, !dbg !73
  %856 = fmul float %.0.i96, %840, !dbg !73
  %857 = fmul float %.0.i96, %841, !dbg !73
  %858 = fmul float %.0.i96, %842, !dbg !73
  %859 = fmul float %.0.i96, %843, !dbg !73
  %860 = fmul float %.0.i96, %844, !dbg !73
  %861 = fmul float %.0.i96, %845, !dbg !73
  %862 = fmul float %.0.i96, %846, !dbg !73
  %863 = fmul float %.0.i96, %847, !dbg !73
  %864 = fmul float %.0.i96, %848, !dbg !73
  %865 = fmul float %.0.i96, %849, !dbg !73
  %866 = fmul float %.0.i96, %850, !dbg !73
  %867 = fmul float %.0.i96, %851, !dbg !73
  %868 = fmul float %.0.i96, %852, !dbg !73
  %869 = fmul float %.0.i96, %853, !dbg !73
  %870 = fmul float %.0.i96, %854, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %871 = bitcast float %855 to i32, !dbg !73
  %872 = bitcast float %856 to i32, !dbg !73
  %873 = bitcast float %857 to i32, !dbg !73
  %874 = bitcast float %858 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %702, i32 %871, i32 %872, i32 %873, i32 %874, i1 true) #5, !dbg !73
  %875 = bitcast float %859 to i32, !dbg !73
  %876 = bitcast float %860 to i32, !dbg !73
  %877 = bitcast float %861 to i32, !dbg !73
  %878 = bitcast float %862 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %705, i32 %875, i32 %876, i32 %877, i32 %878, i1 true) #5, !dbg !73
  %879 = bitcast float %863 to i32, !dbg !73
  %880 = bitcast float %864 to i32, !dbg !73
  %881 = bitcast float %865 to i32, !dbg !73
  %882 = bitcast float %866 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %707, i32 %879, i32 %880, i32 %881, i32 %882, i1 true) #5, !dbg !73
  %883 = bitcast float %867 to i32, !dbg !73
  %884 = bitcast float %868 to i32, !dbg !73
  %885 = bitcast float %869 to i32, !dbg !73
  %886 = bitcast float %870 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %709, i32 %883, i32 %884, i32 %885, i32 %886, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %887 = fcmp uno <16 x float> %729, zeroinitializer, !dbg !74
  %888 = fcmp uno float %726, 0.000000e+00, !dbg !76
  %889 = fcmp uno float %727, 0.000000e+00, !dbg !76
  %890 = fcmp uno <4 x float> %731, zeroinitializer, !dbg !76
  %891 = fcmp uno <8 x float> %730, zeroinitializer, !dbg !76
  %892 = fcmp uno <2 x float> %728, zeroinitializer, !dbg !74
  %893 = insertelement <2 x i32> poison, i32 %799, i64 0, !dbg !65
  %894 = insertelement <2 x i32> %893, i32 %800, i64 1, !dbg !65
  %895 = bitcast <2 x i32> %894 to <2 x float>, !dbg !65
  %896 = fpext <2 x bfloat> %811 to <2 x float>, !dbg !78
  %897 = insertelement <2 x i32> poison, i32 %820, i64 0, !dbg !69
  %898 = insertelement <2 x i32> %897, i32 %821, i64 1, !dbg !69
  %899 = bitcast <2 x i32> %898 to <2 x float>, !dbg !69
  %900 = fpext <2 x bfloat> %832 to <2 x float>, !dbg !79
  %901 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !73
  %902 = fadd <2 x float> %895, %896, !dbg !80
  %903 = fadd <2 x float> %902, splat (float 1.000000e+00), !dbg !81
  %904 = fmul <2 x float> %903, %901, !dbg !82
  %905 = fadd <2 x float> %899, %900, !dbg !83
  %906 = fadd <2 x float> %905, %904, !dbg !84
  %907 = extractelement <2 x float> %906, i64 0, !dbg !85
  %908 = extractelement <2 x float> %906, i64 1, !dbg !85
  %909 = fcmp ogt <2 x float> %728, %906, !dbg !86
  %910 = or <2 x i1> %892, %909, !dbg !87
  %911 = select <2 x i1> %910, <2 x float> %728, <2 x float> %906, !dbg !88
  %912 = insertelement <2 x i32> poison, i32 %801, i64 0, !dbg !65
  %913 = insertelement <2 x i32> %912, i32 %802, i64 1, !dbg !65
  %914 = bitcast <2 x i32> %913 to <2 x float>, !dbg !65
  %915 = insertelement <4 x i32> poison, i32 %804, i64 0, !dbg !65
  %916 = insertelement <4 x i32> %915, i32 %805, i64 1, !dbg !65
  %917 = insertelement <4 x i32> %916, i32 %806, i64 2, !dbg !65
  %918 = insertelement <4 x i32> %917, i32 %807, i64 3, !dbg !65
  %919 = bitcast <4 x i32> %918 to <4 x float>, !dbg !65
  %920 = fpext <2 x bfloat> %813 to <2 x float>, !dbg !78
  %921 = shufflevector <2 x bfloat> %815, <2 x bfloat> %817, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !78
  %922 = fpext <4 x bfloat> %921 to <4 x float>, !dbg !78
  %923 = insertelement <2 x i32> poison, i32 %822, i64 0, !dbg !69
  %924 = insertelement <2 x i32> %923, i32 %823, i64 1, !dbg !69
  %925 = bitcast <2 x i32> %924 to <2 x float>, !dbg !69
  %926 = insertelement <4 x i32> poison, i32 %825, i64 0, !dbg !69
  %927 = insertelement <4 x i32> %926, i32 %826, i64 1, !dbg !69
  %928 = insertelement <4 x i32> %927, i32 %827, i64 2, !dbg !69
  %929 = insertelement <4 x i32> %928, i32 %828, i64 3, !dbg !69
  %930 = bitcast <4 x i32> %929 to <4 x float>, !dbg !69
  %931 = fpext <2 x bfloat> %834 to <2 x float>, !dbg !79
  %932 = shufflevector <2 x bfloat> %836, <2 x bfloat> %838, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %933 = fpext <4 x bfloat> %932 to <4 x float>, !dbg !79
  %934 = load <8 x float>, ptr addrspace(3) %710, align 16, !dbg !73
  %935 = load <4 x float>, ptr addrspace(3) %715, align 8, !dbg !73
  %936 = load <2 x float>, ptr addrspace(3) %716, align 8, !dbg !73
  %937 = fadd <2 x float> %914, %920, !dbg !80
  %938 = fadd <4 x float> %919, %922, !dbg !80
  %939 = fadd <2 x float> %937, splat (float 1.000000e+00), !dbg !81
  %940 = fadd <4 x float> %938, splat (float 1.000000e+00), !dbg !81
  %941 = fadd <2 x float> %925, %931, !dbg !83
  %942 = fadd <4 x float> %930, %933, !dbg !83
  %943 = shufflevector <2 x float> %903, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %944 = shufflevector <4 x float> %940, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %945 = shufflevector <8 x float> %943, <8 x float> %944, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !82
  %946 = shufflevector <2 x float> %939, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %947 = shufflevector <8 x float> %945, <8 x float> %946, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !82
  %948 = shufflevector <8 x float> %947, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !82
  %949 = shufflevector <8 x float> %934, <8 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !82
  %950 = shufflevector <8 x float> %934, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %951 = shufflevector <16 x float> %950, <16 x float> %949, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !82
  %952 = shufflevector <4 x float> %935, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %953 = shufflevector <16 x float> %951, <16 x float> %952, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !82
  %954 = shufflevector <2 x float> %936, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %955 = shufflevector <16 x float> %953, <16 x float> %954, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !82
  %956 = fmul <16 x float> %948, %955, !dbg !82
  %957 = shufflevector <2 x float> %905, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %958 = shufflevector <4 x float> %942, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %959 = shufflevector <8 x float> %957, <8 x float> %958, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !84
  %960 = shufflevector <2 x float> %941, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %961 = shufflevector <8 x float> %959, <8 x float> %960, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !84
  %962 = shufflevector <8 x float> %961, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !84
  %963 = fadd <16 x float> %962, %956, !dbg !84
  %964 = extractelement <16 x float> %963, i64 2, !dbg !85
  %965 = fcmp olt float %726, %964, !dbg !89
  %966 = extractelement <16 x float> %963, i64 3, !dbg !85
  %967 = fcmp olt float %727, %966, !dbg !89
  %968 = extractelement <16 x float> %963, i64 4, !dbg !85
  %969 = extractelement <16 x float> %963, i64 5, !dbg !85
  %970 = extractelement <16 x float> %963, i64 6, !dbg !85
  %971 = extractelement <16 x float> %963, i64 7, !dbg !85
  %972 = extractelement <16 x float> %963, i64 8, !dbg !85
  %973 = extractelement <16 x float> %963, i64 9, !dbg !85
  %974 = extractelement <16 x float> %963, i64 10, !dbg !85
  %975 = extractelement <16 x float> %963, i64 11, !dbg !85
  %976 = extractelement <16 x float> %963, i64 12, !dbg !85
  %977 = extractelement <16 x float> %963, i64 13, !dbg !85
  %978 = or i1 %888, %965, !dbg !90
  %979 = or i1 %889, %967, !dbg !90
  %980 = select i1 %978, float %726, float %964, !dbg !91
  %981 = select i1 %979, float %727, float %966, !dbg !91
  %982 = shufflevector <2 x float> %906, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %983 = shufflevector <16 x float> %982, <16 x float> %963, <4 x i32> <i32 1, i32 0, i32 21, i32 20>, !dbg !89
  %984 = fcmp olt <4 x float> %731, %983, !dbg !89
  %985 = or <4 x i1> %890, %984, !dbg !90
  %986 = select <4 x i1> %985, <4 x float> %731, <4 x float> %983, !dbg !91
  %987 = shufflevector <16 x float> %963, <16 x float> poison, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>, !dbg !89
  %988 = fcmp olt <8 x float> %730, %987, !dbg !89
  %989 = or <8 x i1> %891, %988, !dbg !90
  %990 = select <8 x i1> %989, <8 x float> %730, <8 x float> %987, !dbg !91
  %991 = select i1 %27, float %980, float %726, !dbg !57
  %992 = select i1 %27, float %981, float %727, !dbg !57
  %993 = select <4 x i1> %724, <4 x float> %986, <4 x float> %731, !dbg !57
  %994 = select <8 x i1> %722, <8 x float> %990, <8 x float> %730, !dbg !57
  %995 = fcmp ogt <16 x float> %729, %963, !dbg !86
  %996 = fcmp olt <16 x float> %729, %963, !dbg !86
  %997 = shufflevector <16 x i1> %995, <16 x i1> %996, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !86
  %998 = or <16 x i1> %887, %997, !dbg !87
  %999 = select <16 x i1> %998, <16 x float> %729, <16 x float> %963, !dbg !88
  %1000 = select <2 x i1> %718, <2 x float> %911, <2 x float> %728, !dbg !56
  %1001 = select <16 x i1> %720, <16 x float> %999, <16 x float> %729, !dbg !56
  %1002 = sext i32 %738 to i64, !dbg !92
  %1003 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1002, !dbg !92
  %1004 = sext i32 %739 to i64, !dbg !92
  %1005 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1004, !dbg !92
  %1006 = extractelement <16 x float> %963, i64 0, !dbg !85
  %1007 = fptrunc float %1006 to bfloat, !dbg !85
  %1008 = extractelement <16 x float> %963, i64 1, !dbg !85
  %1009 = fptrunc float %1008 to bfloat, !dbg !85
  %1010 = fptrunc float %964 to bfloat, !dbg !85
  %1011 = fptrunc float %966 to bfloat, !dbg !85
  %1012 = fptrunc float %968 to bfloat, !dbg !85
  %1013 = fptrunc float %969 to bfloat, !dbg !85
  %1014 = fptrunc float %970 to bfloat, !dbg !85
  %1015 = fptrunc float %971 to bfloat, !dbg !85
  %1016 = fptrunc float %907 to bfloat, !dbg !85
  %1017 = fptrunc float %908 to bfloat, !dbg !85
  %1018 = fptrunc float %972 to bfloat, !dbg !85
  %1019 = fptrunc float %973 to bfloat, !dbg !85
  %1020 = fptrunc float %974 to bfloat, !dbg !85
  %1021 = fptrunc float %975 to bfloat, !dbg !85
  %1022 = fptrunc float %976 to bfloat, !dbg !85
  %1023 = fptrunc float %977 to bfloat, !dbg !85
  %1024 = insertelement <2 x bfloat> poison, bfloat %1007, i64 0, !dbg !85
  %1025 = insertelement <2 x bfloat> %1024, bfloat %1009, i64 1, !dbg !85
  %1026 = bitcast <2 x bfloat> %1025 to i32, !dbg !85
  %1027 = insertelement <2 x bfloat> poison, bfloat %1010, i64 0, !dbg !85
  %1028 = insertelement <2 x bfloat> %1027, bfloat %1011, i64 1, !dbg !85
  %1029 = bitcast <2 x bfloat> %1028 to i32, !dbg !85
  %1030 = insertelement <2 x bfloat> poison, bfloat %1012, i64 0, !dbg !85
  %1031 = insertelement <2 x bfloat> %1030, bfloat %1013, i64 1, !dbg !85
  %1032 = bitcast <2 x bfloat> %1031 to i32, !dbg !85
  %1033 = insertelement <2 x bfloat> poison, bfloat %1014, i64 0, !dbg !85
  %1034 = insertelement <2 x bfloat> %1033, bfloat %1015, i64 1, !dbg !85
  %1035 = bitcast <2 x bfloat> %1034 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1026, i32 %1029, i32 %1032, i32 %1035, ptr addrspace(1) %1003, i1 %27) #5, !dbg !85
  %1036 = insertelement <2 x bfloat> poison, bfloat %1016, i64 0, !dbg !85
  %1037 = insertelement <2 x bfloat> %1036, bfloat %1017, i64 1, !dbg !85
  %1038 = bitcast <2 x bfloat> %1037 to i32, !dbg !85
  %1039 = insertelement <2 x bfloat> poison, bfloat %1018, i64 0, !dbg !85
  %1040 = insertelement <2 x bfloat> %1039, bfloat %1019, i64 1, !dbg !85
  %1041 = bitcast <2 x bfloat> %1040 to i32, !dbg !85
  %1042 = insertelement <2 x bfloat> poison, bfloat %1020, i64 0, !dbg !85
  %1043 = insertelement <2 x bfloat> %1042, bfloat %1021, i64 1, !dbg !85
  %1044 = bitcast <2 x bfloat> %1043 to i32, !dbg !85
  %1045 = insertelement <2 x bfloat> poison, bfloat %1022, i64 0, !dbg !85
  %1046 = insertelement <2 x bfloat> %1045, bfloat %1023, i64 1, !dbg !85
  %1047 = bitcast <2 x bfloat> %1046 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1038, i32 %1041, i32 %1044, i32 %1047, ptr addrspace(1) %1005, i1 %27) #5, !dbg !85
  %indvars.iv.next183 = add nuw nsw i64 %indvars.iv182, 1024, !dbg !55
  %1048 = icmp samesign ult i64 %indvars.iv182, 2048, !dbg !55
  br i1 %1048, label %725, label %1049, !dbg !55

1049:                                             ; preds = %725
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1050 = extractelement <16 x float> %1001, i64 14, !dbg !95
  %1051 = extractelement <16 x float> %1001, i64 15, !dbg !95
  %1052 = fcmp olt float %1050, %1051, !dbg !95
  %1053 = fcmp uno float %1050, 0.000000e+00, !dbg !96
  %1054 = or i1 %1052, %1053, !dbg !97
  %1055 = select i1 %1054, float %1050, float %1051, !dbg !98
  %1056 = fcmp olt float %1055, %991, !dbg !95
  %1057 = fcmp uno float %1055, 0.000000e+00, !dbg !96
  %1058 = or i1 %1056, %1057, !dbg !97
  %1059 = select i1 %1058, float %1055, float %991, !dbg !98
  %1060 = fcmp olt float %1059, %992, !dbg !95
  %1061 = fcmp uno float %1059, 0.000000e+00, !dbg !96
  %1062 = or i1 %1060, %1061, !dbg !97
  %1063 = select i1 %1062, float %1059, float %992, !dbg !98
  %1064 = extractelement <4 x float> %993, i64 3, !dbg !95
  %1065 = fcmp olt float %1063, %1064, !dbg !95
  %1066 = fcmp uno float %1063, 0.000000e+00, !dbg !96
  %1067 = or i1 %1065, %1066, !dbg !97
  %1068 = select i1 %1067, float %1063, float %1064, !dbg !98
  %1069 = extractelement <4 x float> %993, i64 2, !dbg !95
  %1070 = fcmp olt float %1068, %1069, !dbg !95
  %1071 = fcmp uno float %1068, 0.000000e+00, !dbg !96
  %1072 = or i1 %1070, %1071, !dbg !97
  %1073 = select i1 %1072, float %1068, float %1069, !dbg !98
  %1074 = extractelement <8 x float> %994, i64 0, !dbg !95
  %1075 = fcmp olt float %1073, %1074, !dbg !95
  %1076 = fcmp uno float %1073, 0.000000e+00, !dbg !96
  %1077 = or i1 %1075, %1076, !dbg !97
  %1078 = select i1 %1077, float %1073, float %1074, !dbg !98
  %1079 = extractelement <8 x float> %994, i64 1, !dbg !95
  %1080 = fcmp olt float %1078, %1079, !dbg !95
  %1081 = fcmp uno float %1078, 0.000000e+00, !dbg !96
  %1082 = or i1 %1080, %1081, !dbg !97
  %1083 = select i1 %1082, float %1078, float %1079, !dbg !98
  %1084 = extractelement <4 x float> %993, i64 0, !dbg !95
  %1085 = extractelement <4 x float> %993, i64 1, !dbg !95
  %1086 = fcmp olt float %1085, %1084, !dbg !95
  %1087 = fcmp uno float %1085, 0.000000e+00, !dbg !96
  %1088 = or i1 %1086, %1087, !dbg !97
  %1089 = select i1 %1088, float %1085, float %1084, !dbg !98
  %1090 = extractelement <8 x float> %994, i64 2, !dbg !95
  %1091 = fcmp olt float %1089, %1090, !dbg !95
  %1092 = fcmp uno float %1089, 0.000000e+00, !dbg !96
  %1093 = or i1 %1091, %1092, !dbg !97
  %1094 = select i1 %1093, float %1089, float %1090, !dbg !98
  %1095 = extractelement <8 x float> %994, i64 3, !dbg !95
  %1096 = fcmp olt float %1094, %1095, !dbg !95
  %1097 = fcmp uno float %1094, 0.000000e+00, !dbg !96
  %1098 = or i1 %1096, %1097, !dbg !97
  %1099 = select i1 %1098, float %1094, float %1095, !dbg !98
  %1100 = extractelement <8 x float> %994, i64 4, !dbg !95
  %1101 = fcmp olt float %1099, %1100, !dbg !95
  %1102 = fcmp uno float %1099, 0.000000e+00, !dbg !96
  %1103 = or i1 %1101, %1102, !dbg !97
  %1104 = select i1 %1103, float %1099, float %1100, !dbg !98
  %1105 = extractelement <8 x float> %994, i64 5, !dbg !95
  %1106 = fcmp olt float %1104, %1105, !dbg !95
  %1107 = fcmp uno float %1104, 0.000000e+00, !dbg !96
  %1108 = or i1 %1106, %1107, !dbg !97
  %1109 = select i1 %1108, float %1104, float %1105, !dbg !98
  %1110 = extractelement <8 x float> %994, i64 6, !dbg !95
  %1111 = fcmp olt float %1109, %1110, !dbg !95
  %1112 = fcmp uno float %1109, 0.000000e+00, !dbg !96
  %1113 = or i1 %1111, %1112, !dbg !97
  %1114 = select i1 %1113, float %1109, float %1110, !dbg !98
  %1115 = extractelement <8 x float> %994, i64 7, !dbg !95
  %1116 = fcmp olt float %1114, %1115, !dbg !95
  %1117 = fcmp uno float %1114, 0.000000e+00, !dbg !96
  %1118 = or i1 %1116, %1117, !dbg !97
  %1119 = select i1 %1118, float %1114, float %1115, !dbg !98
  %1120 = bitcast float %1083 to i32, !dbg !93
  %1121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1120, i32 16, i32 31), !dbg !93
  %1122 = bitcast i32 %1121 to float, !dbg !93
  %1123 = fcmp olt float %1083, %1122, !dbg !95
  %1124 = fcmp uno float %1083, 0.000000e+00, !dbg !96
  %1125 = or i1 %1124, %1123, !dbg !97
  %1126 = select i1 %1125, float %1083, float %1122, !dbg !98
  %1127 = bitcast float %1126 to i32, !dbg !93
  %1128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1127, i32 8, i32 31), !dbg !93
  %1129 = bitcast i32 %1128 to float, !dbg !93
  %1130 = fcmp olt float %1126, %1129, !dbg !95
  %1131 = fcmp uno float %1126, 0.000000e+00, !dbg !96
  %1132 = or i1 %1130, %1131, !dbg !97
  %1133 = select i1 %1132, float %1126, float %1129, !dbg !98
  %1134 = bitcast float %1133 to i32, !dbg !93
  %1135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1134, i32 4, i32 31), !dbg !93
  %1136 = bitcast i32 %1135 to float, !dbg !93
  %1137 = fcmp olt float %1133, %1136, !dbg !95
  %1138 = fcmp uno float %1133, 0.000000e+00, !dbg !96
  %1139 = or i1 %1137, %1138, !dbg !97
  %1140 = select i1 %1139, float %1133, float %1136, !dbg !98
  %1141 = bitcast float %1140 to i32, !dbg !93
  %1142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1141, i32 2, i32 31), !dbg !93
  %1143 = bitcast i32 %1142 to float, !dbg !93
  %1144 = fcmp olt float %1140, %1143, !dbg !95
  %1145 = fcmp uno float %1140, 0.000000e+00, !dbg !96
  %1146 = or i1 %1144, %1145, !dbg !97
  %1147 = select i1 %1146, float %1140, float %1143, !dbg !98
  %1148 = bitcast float %1147 to i32, !dbg !93
  %1149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1148, i32 1, i32 31), !dbg !93
  %1150 = bitcast i32 %1149 to float, !dbg !93
  %1151 = fcmp olt float %1147, %1150, !dbg !95
  %1152 = fcmp uno float %1147, 0.000000e+00, !dbg !96
  %1153 = or i1 %1151, %1152, !dbg !97
  %1154 = bitcast float %1119 to i32, !dbg !93
  %1155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1154, i32 16, i32 31), !dbg !93
  %1156 = bitcast i32 %1155 to float, !dbg !93
  %1157 = fcmp olt float %1119, %1156, !dbg !95
  %1158 = fcmp uno float %1119, 0.000000e+00, !dbg !96
  %1159 = or i1 %1158, %1157, !dbg !97
  %1160 = select i1 %1159, float %1119, float %1156, !dbg !98
  %1161 = bitcast float %1160 to i32, !dbg !93
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 8, i32 31), !dbg !93
  %1163 = bitcast i32 %1162 to float, !dbg !93
  %1164 = fcmp olt float %1160, %1163, !dbg !95
  %1165 = fcmp uno float %1160, 0.000000e+00, !dbg !96
  %1166 = or i1 %1164, %1165, !dbg !97
  %1167 = select i1 %1166, float %1160, float %1163, !dbg !98
  %1168 = bitcast float %1167 to i32, !dbg !93
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 4, i32 31), !dbg !93
  %1170 = bitcast i32 %1169 to float, !dbg !93
  %1171 = fcmp olt float %1167, %1170, !dbg !95
  %1172 = fcmp uno float %1167, 0.000000e+00, !dbg !96
  %1173 = or i1 %1171, %1172, !dbg !97
  %1174 = select i1 %1173, float %1167, float %1170, !dbg !98
  %1175 = bitcast float %1174 to i32, !dbg !93
  %1176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1175, i32 2, i32 31), !dbg !93
  %1177 = bitcast i32 %1176 to float, !dbg !93
  %1178 = fcmp olt float %1174, %1177, !dbg !95
  %1179 = fcmp uno float %1174, 0.000000e+00, !dbg !96
  %1180 = or i1 %1178, %1179, !dbg !97
  %1181 = select i1 %1180, float %1174, float %1177, !dbg !98
  %1182 = bitcast float %1181 to i32, !dbg !93
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 1, i32 31), !dbg !93
  %1184 = bitcast i32 %1183 to float, !dbg !93
  %1185 = fcmp olt float %1181, %1184, !dbg !95
  %1186 = fcmp uno float %1181, 0.000000e+00, !dbg !96
  %1187 = or i1 %1185, %1186, !dbg !97
  %1188 = and i32 %337, 3, !dbg !93
  %1189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1188, !dbg !93
  %1190 = select i1 %1153, i32 %1148, i32 %1149, !dbg !98
  %1191 = insertelement <1 x i32> poison, i32 %1190, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1189, <1 x i32> %1191, i1 %628) #5, !dbg !93
  %1192 = or disjoint i32 %1188, 4, !dbg !93
  %1193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1192, !dbg !93
  %1194 = select i1 %1187, i32 %1182, i32 %1183, !dbg !98
  %1195 = insertelement <1 x i32> poison, i32 %1194, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1195, i1 %628) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1196 = icmp slt i32 %22, 8, !dbg !93
  %1197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %1196) #5, !dbg !93
  %1198 = bitcast i32 %1197 to float, !dbg !93
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1197, i32 2, i32 31), !dbg !93
  %1200 = bitcast i32 %1199 to float, !dbg !93
  %1201 = fcmp olt float %1198, %1200, !dbg !95
  %1202 = fcmp uno float %1198, 0.000000e+00, !dbg !96
  %1203 = or i1 %1202, %1201, !dbg !97
  %1204 = select i1 %1203, float %1198, float %1200, !dbg !98
  %1205 = bitcast float %1204 to i32, !dbg !93
  %1206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1205, i32 1, i32 31), !dbg !93
  %1207 = bitcast i32 %1206 to float, !dbg !93
  %1208 = fcmp olt float %1204, %1207, !dbg !95
  %1209 = fcmp uno float %1204, 0.000000e+00, !dbg !96
  %1210 = or i1 %1208, %1209, !dbg !97
  %1211 = and i32 %22, 3, !dbg !93
  %1212 = icmp eq i32 %1211, 0, !dbg !93
  %1213 = and i1 %1196, %1212, !dbg !93
  %1214 = select i1 %1210, i32 %1205, i32 %1206, !dbg !98
  %1215 = insertelement <1 x i32> poison, i32 %1214, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1215, i1 %1213) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1216 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  %1217 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1218 = bitcast float %1216 to i32, !dbg !99
  %1219 = bitcast float %1217 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1218, i32 %1219, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1220 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %338, !dbg !99
  %1221 = load float, ptr addrspace(3) %1220, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1222 = extractelement <16 x float> %1001, i64 0, !dbg !102
  %1223 = extractelement <16 x float> %1001, i64 1, !dbg !102
  %1224 = fcmp ogt float %1222, %1223, !dbg !102
  %1225 = fcmp uno float %1222, 0.000000e+00, !dbg !103
  %1226 = or i1 %1224, %1225, !dbg !104
  %1227 = select i1 %1226, float %1222, float %1223, !dbg !105
  %1228 = extractelement <16 x float> %1001, i64 2, !dbg !102
  %1229 = fcmp ogt float %1227, %1228, !dbg !102
  %1230 = fcmp uno float %1227, 0.000000e+00, !dbg !103
  %1231 = or i1 %1229, %1230, !dbg !104
  %1232 = select i1 %1231, float %1227, float %1228, !dbg !105
  %1233 = extractelement <16 x float> %1001, i64 3, !dbg !102
  %1234 = fcmp ogt float %1232, %1233, !dbg !102
  %1235 = fcmp uno float %1232, 0.000000e+00, !dbg !103
  %1236 = or i1 %1234, %1235, !dbg !104
  %1237 = select i1 %1236, float %1232, float %1233, !dbg !105
  %1238 = extractelement <16 x float> %1001, i64 4, !dbg !102
  %1239 = fcmp ogt float %1237, %1238, !dbg !102
  %1240 = fcmp uno float %1237, 0.000000e+00, !dbg !103
  %1241 = or i1 %1239, %1240, !dbg !104
  %1242 = select i1 %1241, float %1237, float %1238, !dbg !105
  %1243 = extractelement <16 x float> %1001, i64 5, !dbg !102
  %1244 = fcmp ogt float %1242, %1243, !dbg !102
  %1245 = fcmp uno float %1242, 0.000000e+00, !dbg !103
  %1246 = or i1 %1244, %1245, !dbg !104
  %1247 = select i1 %1246, float %1242, float %1243, !dbg !105
  %1248 = extractelement <16 x float> %1001, i64 6, !dbg !102
  %1249 = fcmp ogt float %1247, %1248, !dbg !102
  %1250 = fcmp uno float %1247, 0.000000e+00, !dbg !103
  %1251 = or i1 %1249, %1250, !dbg !104
  %1252 = select i1 %1251, float %1247, float %1248, !dbg !105
  %1253 = extractelement <16 x float> %1001, i64 7, !dbg !102
  %1254 = fcmp ogt float %1252, %1253, !dbg !102
  %1255 = fcmp uno float %1252, 0.000000e+00, !dbg !103
  %1256 = or i1 %1254, %1255, !dbg !104
  %1257 = select i1 %1256, float %1252, float %1253, !dbg !105
  %1258 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1000, <2 x i32> <i32 0, i32 2>, !dbg !102
  %1259 = fcmp ogt <2 x float> %1258, %1000, !dbg !102
  %1260 = fcmp uno <2 x float> %1258, %1000, !dbg !102
  %shift = shufflevector <2 x i1> %1259, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !104
  %1261 = or <2 x i1> %shift, %1260, !dbg !104
  %1262 = extractelement <2 x i1> %1261, i64 0, !dbg !104
  %1263 = extractelement <2 x float> %1000, i64 0, !dbg !105
  %1264 = extractelement <2 x float> %1000, i64 1, !dbg !105
  %1265 = select i1 %1262, float %1263, float %1264, !dbg !105
  %1266 = extractelement <16 x float> %1001, i64 8, !dbg !102
  %1267 = fcmp ogt float %1265, %1266, !dbg !102
  %1268 = fcmp uno float %1265, 0.000000e+00, !dbg !103
  %1269 = or i1 %1267, %1268, !dbg !104
  %1270 = select i1 %1269, float %1265, float %1266, !dbg !105
  %1271 = extractelement <16 x float> %1001, i64 9, !dbg !102
  %1272 = fcmp ogt float %1270, %1271, !dbg !102
  %1273 = fcmp uno float %1270, 0.000000e+00, !dbg !103
  %1274 = or i1 %1272, %1273, !dbg !104
  %1275 = select i1 %1274, float %1270, float %1271, !dbg !105
  %1276 = extractelement <16 x float> %1001, i64 10, !dbg !102
  %1277 = fcmp ogt float %1275, %1276, !dbg !102
  %1278 = fcmp uno float %1275, 0.000000e+00, !dbg !103
  %1279 = or i1 %1277, %1278, !dbg !104
  %1280 = select i1 %1279, float %1275, float %1276, !dbg !105
  %1281 = extractelement <16 x float> %1001, i64 11, !dbg !102
  %1282 = fcmp ogt float %1280, %1281, !dbg !102
  %1283 = fcmp uno float %1280, 0.000000e+00, !dbg !103
  %1284 = or i1 %1282, %1283, !dbg !104
  %1285 = select i1 %1284, float %1280, float %1281, !dbg !105
  %1286 = extractelement <16 x float> %1001, i64 12, !dbg !102
  %1287 = fcmp ogt float %1285, %1286, !dbg !102
  %1288 = fcmp uno float %1285, 0.000000e+00, !dbg !103
  %1289 = or i1 %1287, %1288, !dbg !104
  %1290 = select i1 %1289, float %1285, float %1286, !dbg !105
  %1291 = extractelement <16 x float> %1001, i64 13, !dbg !102
  %1292 = fcmp ogt float %1290, %1291, !dbg !102
  %1293 = fcmp uno float %1290, 0.000000e+00, !dbg !103
  %1294 = or i1 %1292, %1293, !dbg !104
  %1295 = select i1 %1294, float %1290, float %1291, !dbg !105
  %1296 = bitcast float %1257 to i32, !dbg !100
  %1297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1296, i32 16, i32 31), !dbg !100
  %1298 = bitcast i32 %1297 to float, !dbg !100
  %1299 = fcmp ogt float %1257, %1298, !dbg !102
  %1300 = fcmp uno float %1257, 0.000000e+00, !dbg !103
  %1301 = or i1 %1300, %1299, !dbg !104
  %1302 = select i1 %1301, float %1257, float %1298, !dbg !105
  %1303 = bitcast float %1302 to i32, !dbg !100
  %1304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1303, i32 8, i32 31), !dbg !100
  %1305 = bitcast i32 %1304 to float, !dbg !100
  %1306 = fcmp ogt float %1302, %1305, !dbg !102
  %1307 = fcmp uno float %1302, 0.000000e+00, !dbg !103
  %1308 = or i1 %1306, %1307, !dbg !104
  %1309 = select i1 %1308, float %1302, float %1305, !dbg !105
  %1310 = bitcast float %1309 to i32, !dbg !100
  %1311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1310, i32 4, i32 31), !dbg !100
  %1312 = bitcast i32 %1311 to float, !dbg !100
  %1313 = fcmp ogt float %1309, %1312, !dbg !102
  %1314 = fcmp uno float %1309, 0.000000e+00, !dbg !103
  %1315 = or i1 %1313, %1314, !dbg !104
  %1316 = select i1 %1315, float %1309, float %1312, !dbg !105
  %1317 = bitcast float %1316 to i32, !dbg !100
  %1318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1317, i32 2, i32 31), !dbg !100
  %1319 = bitcast i32 %1318 to float, !dbg !100
  %1320 = fcmp ogt float %1316, %1319, !dbg !102
  %1321 = fcmp uno float %1316, 0.000000e+00, !dbg !103
  %1322 = or i1 %1320, %1321, !dbg !104
  %1323 = select i1 %1322, float %1316, float %1319, !dbg !105
  %1324 = bitcast float %1323 to i32, !dbg !100
  %1325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1324, i32 1, i32 31), !dbg !100
  %1326 = bitcast i32 %1325 to float, !dbg !100
  %1327 = fcmp ogt float %1323, %1326, !dbg !102
  %1328 = fcmp uno float %1323, 0.000000e+00, !dbg !103
  %1329 = or i1 %1327, %1328, !dbg !104
  %1330 = bitcast float %1295 to i32, !dbg !100
  %1331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1330, i32 16, i32 31), !dbg !100
  %1332 = bitcast i32 %1331 to float, !dbg !100
  %1333 = fcmp ogt float %1295, %1332, !dbg !102
  %1334 = fcmp uno float %1295, 0.000000e+00, !dbg !103
  %1335 = or i1 %1334, %1333, !dbg !104
  %1336 = select i1 %1335, float %1295, float %1332, !dbg !105
  %1337 = bitcast float %1336 to i32, !dbg !100
  %1338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1337, i32 8, i32 31), !dbg !100
  %1339 = bitcast i32 %1338 to float, !dbg !100
  %1340 = fcmp ogt float %1336, %1339, !dbg !102
  %1341 = fcmp uno float %1336, 0.000000e+00, !dbg !103
  %1342 = or i1 %1340, %1341, !dbg !104
  %1343 = select i1 %1342, float %1336, float %1339, !dbg !105
  %1344 = bitcast float %1343 to i32, !dbg !100
  %1345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1344, i32 4, i32 31), !dbg !100
  %1346 = bitcast i32 %1345 to float, !dbg !100
  %1347 = fcmp ogt float %1343, %1346, !dbg !102
  %1348 = fcmp uno float %1343, 0.000000e+00, !dbg !103
  %1349 = or i1 %1347, %1348, !dbg !104
  %1350 = select i1 %1349, float %1343, float %1346, !dbg !105
  %1351 = bitcast float %1350 to i32, !dbg !100
  %1352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1351, i32 2, i32 31), !dbg !100
  %1353 = bitcast i32 %1352 to float, !dbg !100
  %1354 = fcmp ogt float %1350, %1353, !dbg !102
  %1355 = fcmp uno float %1350, 0.000000e+00, !dbg !103
  %1356 = or i1 %1354, %1355, !dbg !104
  %1357 = select i1 %1356, float %1350, float %1353, !dbg !105
  %1358 = bitcast float %1357 to i32, !dbg !100
  %1359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1358, i32 1, i32 31), !dbg !100
  %1360 = bitcast i32 %1359 to float, !dbg !100
  %1361 = fcmp ogt float %1357, %1360, !dbg !102
  %1362 = fcmp uno float %1357, 0.000000e+00, !dbg !103
  %1363 = or i1 %1361, %1362, !dbg !104
  %1364 = select i1 %1329, i32 %1324, i32 %1325, !dbg !105
  %1365 = insertelement <1 x i32> poison, i32 %1364, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1189, <1 x i32> %1365, i1 %628) #5, !dbg !100
  %1366 = select i1 %1363, i32 %1358, i32 %1359, !dbg !105
  %1367 = insertelement <1 x i32> poison, i32 %1366, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1367, i1 %628) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1368 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %1196) #5, !dbg !100
  %1369 = bitcast i32 %1368 to float, !dbg !100
  %1370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1368, i32 2, i32 31), !dbg !100
  %1371 = bitcast i32 %1370 to float, !dbg !100
  %1372 = fcmp ogt float %1369, %1371, !dbg !102
  %1373 = fcmp uno float %1369, 0.000000e+00, !dbg !103
  %1374 = or i1 %1373, %1372, !dbg !104
  %1375 = select i1 %1374, float %1369, float %1371, !dbg !105
  %1376 = bitcast float %1375 to i32, !dbg !100
  %1377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1376, i32 1, i32 31), !dbg !100
  %1378 = bitcast i32 %1377 to float, !dbg !100
  %1379 = fcmp ogt float %1375, %1378, !dbg !102
  %1380 = fcmp uno float %1375, 0.000000e+00, !dbg !103
  %1381 = or i1 %1379, %1380, !dbg !104
  %1382 = select i1 %1381, i32 %1376, i32 %1377, !dbg !105
  %1383 = insertelement <1 x i32> poison, i32 %1382, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1383, i1 %1213) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1384 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !100
  %1385 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1386 = bitcast float %1384 to i32, !dbg !106
  %1387 = bitcast float %1385 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1386, i32 %1387, i1 true) #5, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1388 = load float, ptr addrspace(3) %1220, align 4, !dbg !106
  %1389 = sext i32 %339 to i64, !dbg !107
  %1390 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1389, !dbg !107
  %1391 = fptrunc float %1221 to bfloat, !dbg !99
  %1392 = and i32 %22, 126, !dbg !99
  %1393 = icmp eq i32 %1392, 0, !dbg !99
  %1394 = bitcast bfloat %1391 to i16, !dbg !99
  %1395 = and i1 %1393, %340, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1394, ptr addrspace(1) %1390, i1 %1395) #5, !dbg !99
  %1396 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1389, !dbg !108
  %1397 = fptrunc float %1388 to bfloat, !dbg !106
  %1398 = bitcast bfloat %1397 to i16, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1398, ptr addrspace(1) %1396, i1 %1395) #5, !dbg !106
  %1399 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1389, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1394, ptr addrspace(1) %1399, i1 %1395) #5, !dbg !110
  %1400 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1389, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1398, ptr addrspace(1) %1400, i1 %1395) #5, !dbg !112
  %1401 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1389, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1394, ptr addrspace(1) %1401, i1 %1395) #5, !dbg !114
  %1402 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1389, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1398, ptr addrspace(1) %1402, i1 %1395) #5, !dbg !116
  %1403 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1389, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1394, ptr addrspace(1) %1403, i1 %1395) #5, !dbg !118
  %1404 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1389, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1398, ptr addrspace(1) %1404, i1 %1395) #5, !dbg !120
  %.inv = fcmp oge float %1216, 0.000000e+00, !dbg !121
  %1405 = select i1 %.inv, float 0.000000e+00, float %1216, !dbg !121
  %.inv4 = fcmp oge float %1217, 0.000000e+00, !dbg !121
  %1406 = select i1 %.inv4, float 0.000000e+00, float %1217, !dbg !121
  %1407 = fsub float 0.000000e+00, %1405, !dbg !123
  %1408 = fsub float 0.000000e+00, %1406, !dbg !123
  %.inv5 = fcmp ole float %1384, 0.000000e+00, !dbg !124
  %1409 = select i1 %.inv5, float 0.000000e+00, float %1384, !dbg !124
  %.inv6 = fcmp ole float %1385, 0.000000e+00, !dbg !124
  %1410 = select i1 %.inv6, float 0.000000e+00, float %1385, !dbg !124
  %1411 = fcmp ogt float %1407, %1409, !dbg !126
  %1412 = fcmp ogt float %1408, %1410, !dbg !126
  %1413 = fcmp uno float %1407, 0.000000e+00, !dbg !128
  %1414 = fcmp uno float %1408, 0.000000e+00, !dbg !128
  %1415 = or i1 %1413, %1411, !dbg !129
  %1416 = or i1 %1414, %1412, !dbg !129
  %1417 = select i1 %1415, float %1407, float %1409, !dbg !130
  %1418 = select i1 %1416, float %1408, float %1410, !dbg !130
  %1419 = fmul float %1417, 0x3F80204080000000, !dbg !131
  %1420 = fmul float %1418, 0x3F80204080000000, !dbg !131
  %1421 = fcmp ogt float %1419, 0x3EE4F8B580000000, !dbg !132
  %1422 = fcmp ogt float %1420, 0x3EE4F8B580000000, !dbg !132
  %1423 = fcmp uno float %1419, 0.000000e+00, !dbg !134
  %1424 = fcmp uno float %1420, 0.000000e+00, !dbg !134
  %1425 = or i1 %1421, %1423, !dbg !135
  %1426 = or i1 %1422, %1424, !dbg !135
  %1427 = select i1 %1425, float %1419, float 0x3EE4F8B580000000, !dbg !136
  %1428 = select i1 %1426, float %1420, float 0x3EE4F8B580000000, !dbg !136
  %1429 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1427), !dbg !137
  %1430 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1428), !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1431 = bitcast float %1429 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !138
  %1432 = bitcast float %1430 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1433 = lshr exact i32 %23, 3, !dbg !138
  %1434 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1433, !dbg !138
  %1435 = load float, ptr addrspace(3) %1434, align 8, !dbg !138
  br label %1436, !dbg !139

1436:                                             ; preds = %1049, %1436
  %indvars.iv184 = phi i64 [ 0, %1049 ], [ %indvars.iv.next185, %1436 ]
  %1437 = trunc nuw nsw i64 %indvars.iv184 to i32, !dbg !140
  %1438 = add i32 %34, %1437, !dbg !140
  %1439 = add i32 %35, %1437, !dbg !140
  %1440 = sext i32 %1438 to i64, !dbg !141
  %1441 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1440, !dbg !141
  %1442 = sext i32 %1439 to i64, !dbg !141
  %1443 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1442, !dbg !141
  %1444 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1441, i1 %26) #5, !dbg !142
  %1445 = extractvalue { i32, i32, i32, i32 } %1444, 0, !dbg !142
  %1446 = bitcast i32 %1445 to <2 x bfloat>, !dbg !142
  %1447 = extractvalue { i32, i32, i32, i32 } %1444, 1, !dbg !142
  %1448 = bitcast i32 %1447 to <2 x bfloat>, !dbg !142
  %1449 = extractvalue { i32, i32, i32, i32 } %1444, 2, !dbg !142
  %1450 = bitcast i32 %1449 to <2 x bfloat>, !dbg !142
  %1451 = extractvalue { i32, i32, i32, i32 } %1444, 3, !dbg !142
  %1452 = bitcast i32 %1451 to <2 x bfloat>, !dbg !142
  %1453 = extractelement <2 x bfloat> %1446, i64 0, !dbg !142
  %1454 = extractelement <2 x bfloat> %1446, i64 1, !dbg !142
  %1455 = extractelement <2 x bfloat> %1448, i64 0, !dbg !142
  %1456 = extractelement <2 x bfloat> %1448, i64 1, !dbg !142
  %1457 = extractelement <2 x bfloat> %1450, i64 0, !dbg !142
  %1458 = extractelement <2 x bfloat> %1450, i64 1, !dbg !142
  %1459 = extractelement <2 x bfloat> %1452, i64 0, !dbg !142
  %1460 = extractelement <2 x bfloat> %1452, i64 1, !dbg !142
  %1461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1443, i1 %26) #5, !dbg !142
  %1462 = extractvalue { i32, i32, i32, i32 } %1461, 0, !dbg !142
  %1463 = bitcast i32 %1462 to <2 x bfloat>, !dbg !142
  %1464 = extractvalue { i32, i32, i32, i32 } %1461, 1, !dbg !142
  %1465 = bitcast i32 %1464 to <2 x bfloat>, !dbg !142
  %1466 = extractvalue { i32, i32, i32, i32 } %1461, 2, !dbg !142
  %1467 = bitcast i32 %1466 to <2 x bfloat>, !dbg !142
  %1468 = extractvalue { i32, i32, i32, i32 } %1461, 3, !dbg !142
  %1469 = bitcast i32 %1468 to <2 x bfloat>, !dbg !142
  %1470 = extractelement <2 x bfloat> %1463, i64 0, !dbg !142
  %1471 = extractelement <2 x bfloat> %1463, i64 1, !dbg !142
  %1472 = extractelement <2 x bfloat> %1465, i64 0, !dbg !142
  %1473 = extractelement <2 x bfloat> %1465, i64 1, !dbg !142
  %1474 = extractelement <2 x bfloat> %1467, i64 0, !dbg !142
  %1475 = extractelement <2 x bfloat> %1467, i64 1, !dbg !142
  %1476 = extractelement <2 x bfloat> %1469, i64 0, !dbg !142
  %1477 = extractelement <2 x bfloat> %1469, i64 1, !dbg !142
  %1478 = fpext bfloat %1453 to float, !dbg !143
  %1479 = fpext bfloat %1454 to float, !dbg !143
  %1480 = fpext bfloat %1455 to float, !dbg !143
  %1481 = fpext bfloat %1456 to float, !dbg !143
  %1482 = fpext bfloat %1457 to float, !dbg !143
  %1483 = fpext bfloat %1458 to float, !dbg !143
  %1484 = fpext bfloat %1459 to float, !dbg !143
  %1485 = fpext bfloat %1460 to float, !dbg !143
  %1486 = fpext bfloat %1470 to float, !dbg !143
  %1487 = fpext bfloat %1471 to float, !dbg !143
  %1488 = fpext bfloat %1472 to float, !dbg !143
  %1489 = fpext bfloat %1473 to float, !dbg !143
  %1490 = fpext bfloat %1474 to float, !dbg !143
  %1491 = fpext bfloat %1475 to float, !dbg !143
  %1492 = fpext bfloat %1476 to float, !dbg !143
  %1493 = fpext bfloat %1477 to float, !dbg !143
  %1494 = fmul float %1435, %1478, !dbg !138
  %1495 = fmul float %1435, %1479, !dbg !138
  %1496 = fmul float %1435, %1480, !dbg !138
  %1497 = fmul float %1435, %1481, !dbg !138
  %1498 = fmul float %1435, %1482, !dbg !138
  %1499 = fmul float %1435, %1483, !dbg !138
  %1500 = fmul float %1435, %1484, !dbg !138
  %1501 = fmul float %1435, %1485, !dbg !138
  %1502 = fmul float %1435, %1486, !dbg !138
  %1503 = fmul float %1435, %1487, !dbg !138
  %1504 = fmul float %1435, %1488, !dbg !138
  %1505 = fmul float %1435, %1489, !dbg !138
  %1506 = fmul float %1435, %1490, !dbg !138
  %1507 = fmul float %1435, %1491, !dbg !138
  %1508 = fmul float %1435, %1492, !dbg !138
  %1509 = fmul float %1435, %1493, !dbg !138
  %1510 = tail call float @llvm.nvvm.round.f(float %1494) #5, !dbg !144
  %1511 = tail call float @llvm.nvvm.round.f(float %1495) #5, !dbg !144
  %1512 = tail call float @llvm.nvvm.round.f(float %1496) #5, !dbg !144
  %1513 = tail call float @llvm.nvvm.round.f(float %1497) #5, !dbg !144
  %1514 = tail call float @llvm.nvvm.round.f(float %1498) #5, !dbg !144
  %1515 = tail call float @llvm.nvvm.round.f(float %1499) #5, !dbg !144
  %1516 = tail call float @llvm.nvvm.round.f(float %1500) #5, !dbg !144
  %1517 = tail call float @llvm.nvvm.round.f(float %1501) #5, !dbg !144
  %1518 = tail call float @llvm.nvvm.round.f(float %1502) #5, !dbg !144
  %1519 = tail call float @llvm.nvvm.round.f(float %1503) #5, !dbg !144
  %1520 = tail call float @llvm.nvvm.round.f(float %1504) #5, !dbg !144
  %1521 = tail call float @llvm.nvvm.round.f(float %1505) #5, !dbg !144
  %1522 = tail call float @llvm.nvvm.round.f(float %1506) #5, !dbg !144
  %1523 = tail call float @llvm.nvvm.round.f(float %1507) #5, !dbg !144
  %1524 = tail call float @llvm.nvvm.round.f(float %1508) #5, !dbg !144
  %1525 = tail call float @llvm.nvvm.round.f(float %1509) #5, !dbg !144
  %1526 = insertelement <4 x float> poison, float %1510, i64 0, !dbg !145
  %1527 = insertelement <4 x float> %1526, float %1511, i64 1, !dbg !145
  %1528 = insertelement <4 x float> %1527, float %1512, i64 2, !dbg !145
  %1529 = insertelement <4 x float> %1528, float %1513, i64 3, !dbg !145
  %1530 = fcmp ogt <4 x float> %1529, splat (float -1.270000e+02), !dbg !145
  %1531 = fcmp uno <4 x float> %1529, zeroinitializer, !dbg !147
  %1532 = or <4 x i1> %1530, %1531, !dbg !148
  %1533 = select <4 x i1> %1532, <4 x float> %1529, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1534 = fcmp olt <4 x float> %1533, splat (float 1.270000e+02), !dbg !150
  %1535 = fcmp uno <4 x float> %1533, zeroinitializer, !dbg !152
  %1536 = or <4 x i1> %1534, %1535, !dbg !153
  %1537 = fptosi <4 x float> %1533 to <4 x i8>, !dbg !154
  %1538 = select <4 x i1> %1536, <4 x i8> %1537, <4 x i8> splat (i8 127), !dbg !155
  %1539 = insertelement <4 x float> poison, float %1514, i64 0, !dbg !145
  %1540 = insertelement <4 x float> %1539, float %1515, i64 1, !dbg !145
  %1541 = insertelement <4 x float> %1540, float %1516, i64 2, !dbg !145
  %1542 = insertelement <4 x float> %1541, float %1517, i64 3, !dbg !145
  %1543 = fcmp ogt <4 x float> %1542, splat (float -1.270000e+02), !dbg !145
  %1544 = fcmp uno <4 x float> %1542, zeroinitializer, !dbg !147
  %1545 = or <4 x i1> %1543, %1544, !dbg !148
  %1546 = select <4 x i1> %1545, <4 x float> %1542, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1547 = fcmp olt <4 x float> %1546, splat (float 1.270000e+02), !dbg !150
  %1548 = fcmp uno <4 x float> %1546, zeroinitializer, !dbg !152
  %1549 = or <4 x i1> %1547, %1548, !dbg !153
  %1550 = fptosi <4 x float> %1546 to <4 x i8>, !dbg !154
  %1551 = select <4 x i1> %1549, <4 x i8> %1550, <4 x i8> splat (i8 127), !dbg !155
  %1552 = insertelement <4 x float> poison, float %1518, i64 0, !dbg !145
  %1553 = insertelement <4 x float> %1552, float %1519, i64 1, !dbg !145
  %1554 = insertelement <4 x float> %1553, float %1520, i64 2, !dbg !145
  %1555 = insertelement <4 x float> %1554, float %1521, i64 3, !dbg !145
  %1556 = fcmp ogt <4 x float> %1555, splat (float -1.270000e+02), !dbg !145
  %1557 = fcmp uno <4 x float> %1555, zeroinitializer, !dbg !147
  %1558 = or <4 x i1> %1556, %1557, !dbg !148
  %1559 = select <4 x i1> %1558, <4 x float> %1555, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1560 = fcmp olt <4 x float> %1559, splat (float 1.270000e+02), !dbg !150
  %1561 = fcmp uno <4 x float> %1559, zeroinitializer, !dbg !152
  %1562 = or <4 x i1> %1560, %1561, !dbg !153
  %1563 = fptosi <4 x float> %1559 to <4 x i8>, !dbg !154
  %1564 = select <4 x i1> %1562, <4 x i8> %1563, <4 x i8> splat (i8 127), !dbg !155
  %1565 = insertelement <4 x float> poison, float %1522, i64 0, !dbg !145
  %1566 = insertelement <4 x float> %1565, float %1523, i64 1, !dbg !145
  %1567 = insertelement <4 x float> %1566, float %1524, i64 2, !dbg !145
  %1568 = insertelement <4 x float> %1567, float %1525, i64 3, !dbg !145
  %1569 = fcmp ogt <4 x float> %1568, splat (float -1.270000e+02), !dbg !145
  %1570 = fcmp uno <4 x float> %1568, zeroinitializer, !dbg !147
  %1571 = or <4 x i1> %1569, %1570, !dbg !148
  %1572 = select <4 x i1> %1571, <4 x float> %1568, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1573 = fcmp olt <4 x float> %1572, splat (float 1.270000e+02), !dbg !150
  %1574 = fcmp uno <4 x float> %1572, zeroinitializer, !dbg !152
  %1575 = or <4 x i1> %1573, %1574, !dbg !153
  %1576 = fptosi <4 x float> %1572 to <4 x i8>, !dbg !154
  %1577 = select <4 x i1> %1575, <4 x i8> %1576, <4 x i8> splat (i8 127), !dbg !155
  %1578 = getelementptr i8, ptr addrspace(1) %12, i64 %1440, !dbg !156
  %1579 = bitcast <4 x i8> %1538 to i32, !dbg !157
  %1580 = bitcast <4 x i8> %1551 to i32, !dbg !157
  %1581 = bitcast <4 x i8> %1564 to i32, !dbg !157
  %1582 = bitcast <4 x i8> %1577 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1579, i32 %1580, i32 %1581, i32 %1582, ptr addrspace(1) %1578, i1 %26) #5, !dbg !157
  %1583 = getelementptr i8, ptr addrspace(1) %13, i64 %1440, !dbg !158
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1579, i32 %1580, i32 %1581, i32 %1582, ptr addrspace(1) %1583, i1 %26) #5, !dbg !159
  %1584 = getelementptr i8, ptr addrspace(1) %14, i64 %1440, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1579, i32 %1580, i32 %1581, i32 %1582, ptr addrspace(1) %1584, i1 %26) #5, !dbg !161
  %1585 = getelementptr i8, ptr addrspace(1) %15, i64 %1440, !dbg !162
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1579, i32 %1580, i32 %1581, i32 %1582, ptr addrspace(1) %1585, i1 %26) #5, !dbg !163
  %indvars.iv.next185 = add nuw nsw i64 %indvars.iv184, 1024, !dbg !139
  %1586 = icmp samesign ult i64 %indvars.iv184, 2048, !dbg !139
  br i1 %1586, label %1436, label %1587, !dbg !139

1587:                                             ; preds = %1436
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 42, column: 62, scope: !6)
!22 = !DILocation(line: 203, column: 7, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 42, column: 51, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 209, column: 30, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 210, column: 34, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 210, column: 26, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 211, column: 39, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 211, column: 31, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 211, column: 22, scope: !23, inlinedAt: !25)
!33 = !DILocation(line: 44, column: 62, scope: !6)
!34 = !DILocation(line: 45, column: 58, scope: !6)
!35 = !DILocation(line: 46, column: 66, scope: !6)
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !23, inlinedAt: !38)
!51 = !DILocation(line: 59, column: 46, scope: !6)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 32, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 83, column: 50, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 59, column: 113, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !75)
!75 = !DILocation(line: 84, column: 47, scope: !6)
!76 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 82, column: 47, scope: !6)
!78 = !DILocation(line: 61, column: 102, scope: !6)
!79 = !DILocation(line: 63, column: 95, scope: !6)
!80 = !DILocation(line: 74, column: 24, scope: !6)
!81 = !DILocation(line: 76, column: 24, scope: !6)
!82 = !DILocation(line: 77, column: 24, scope: !6)
!83 = !DILocation(line: 79, column: 24, scope: !6)
!84 = !DILocation(line: 80, column: 24, scope: !6)
!85 = !DILocation(line: 86, column: 53, scope: !6)
!86 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !75)
!87 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !75)
!88 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !75)
!89 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !77)
!90 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !77)
!91 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !77)
!92 = !DILocation(line: 86, column: 29, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !94)
!99 = !DILocation(line: 89, column: 37, scope: !6)
!100 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !101)
!101 = !DILocation(line: 88, column: 40, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !101)
!104 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !101)
!105 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !101)
!106 = !DILocation(line: 90, column: 37, scope: !6)
!107 = !DILocation(line: 89, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 95, column: 25, scope: !6)
!118 = !DILocation(line: 95, column: 37, scope: !6)
!119 = !DILocation(line: 96, column: 26, scope: !6)
!120 = !DILocation(line: 96, column: 38, scope: !6)
!121 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !122)
!122 = !DILocation(line: 105, column: 46, scope: !6)
!123 = !DILocation(line: 106, column: 17, scope: !6)
!124 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !125)
!125 = !DILocation(line: 107, column: 46, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !127)
!127 = !DILocation(line: 108, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !127)
!131 = !DILocation(line: 110, column: 24, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !133)
!133 = !DILocation(line: 113, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !133)
!137 = !DILocation(line: 116, column: 25, scope: !6)
!138 = !DILocation(line: 119, column: 24, scope: !6)
!139 = !DILocation(line: 97, column: 40, scope: !6)
!140 = !DILocation(line: 103, column: 43, scope: !6)
!141 = !DILocation(line: 103, column: 36, scope: !6)
!142 = !DILocation(line: 103, column: 53, scope: !6)
!143 = !DILocation(line: 103, column: 115, scope: !6)
!144 = !DILocation(line: 120, column: 36, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !146)
!148 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !146)
!149 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !146)
!150 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !151)
!151 = !DILocation(line: 125, column: 46, scope: !6)
!152 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !151)
!153 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !151)
!154 = !DILocation(line: 127, column: 25, scope: !6)
!155 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !151)
!156 = !DILocation(line: 128, column: 30, scope: !6)
!157 = !DILocation(line: 128, column: 54, scope: !6)
!158 = !DILocation(line: 129, column: 30, scope: !6)
!159 = !DILocation(line: 129, column: 54, scope: !6)
!160 = !DILocation(line: 130, column: 30, scope: !6)
!161 = !DILocation(line: 130, column: 54, scope: !6)
!162 = !DILocation(line: 131, column: 30, scope: !6)
!163 = !DILocation(line: 131, column: 54, scope: !6)
!164 = !DILocation(line: 97, column: 4, scope: !6)
