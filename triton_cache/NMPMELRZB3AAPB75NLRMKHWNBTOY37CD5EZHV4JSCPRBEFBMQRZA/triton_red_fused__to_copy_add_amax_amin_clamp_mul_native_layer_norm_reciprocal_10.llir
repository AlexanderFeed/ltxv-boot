; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 5, !dbg !11
  %21 = and i32 %20, 3, !dbg !11
  %22 = and i32 %19, 31, !dbg !11
  %23 = lshr i32 %19, 6, !dbg !11
  %.lobit = and i32 %23, 1, !dbg !11
  %24 = or disjoint i32 %21, %18, !dbg !12
  %25 = or disjoint i32 %.lobit, %18, !dbg !12
  %26 = or disjoint i32 %25, 2, !dbg !12
  %27 = icmp slt i32 %24, 3600, !dbg !13
  %28 = icmp slt i32 %18, 3600, !dbg !13
  %29 = icmp slt i32 %25, 3600, !dbg !13
  %30 = icmp slt i32 %26, 3600, !dbg !13
  %31 = shl i32 %19, 2, !dbg !14
  %32 = and i32 %31, 508, !dbg !14
  %33 = shl i32 %19, 4, !dbg !14
  %34 = and i32 %33, 496, !dbg !14
  %35 = or disjoint i32 %34, 4, !dbg !14
  %36 = or disjoint i32 %34, 8, !dbg !14
  %37 = or disjoint i32 %34, 12, !dbg !14
  %38 = shl i32 %19, 3, !dbg !14
  %39 = and i32 %38, 504, !dbg !14
  %40 = sext i32 %24 to i64, !dbg !15
  %41 = getelementptr bfloat, ptr addrspace(1) %4, i64 %40, !dbg !15
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %27) #5, !dbg !16
  %58 = bitcast i16 %57 to bfloat, !dbg !16
  %59 = getelementptr bfloat, ptr addrspace(1) %5, i64 %40, !dbg !17
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %27) #5, !dbg !18
  %76 = bitcast i16 %75 to bfloat, !dbg !18
  %77 = mul i32 %24, 3072, !dbg !19
  %78 = mul i32 %25, 3072, !dbg !19
  %79 = mul i32 %26, 3072, !dbg !19
  %.inv = fcmp oge bfloat %58, 0xR0000, !dbg !20
  %80 = select i1 %.inv, bfloat 0xR0000, bfloat %58, !dbg !20
  %81 = fpext bfloat %80 to float, !dbg !20
  %82 = fsub float 0.000000e+00, %81, !dbg !24
  %.inv6 = fcmp ole bfloat %76, 0xR0000, !dbg !25
  %83 = select i1 %.inv6, bfloat 0xR0000, bfloat %76, !dbg !25
  %84 = fpext bfloat %83 to float, !dbg !25
  %85 = fcmp ogt float %82, %84, !dbg !27
  %86 = fcmp uno float %82, 0.000000e+00, !dbg !29
  %87 = or i1 %86, %85, !dbg !30
  %88 = select i1 %87, float %82, float %84, !dbg !31
  %89 = fmul float %88, 0x3F80204080000000, !dbg !32
  %90 = fcmp ogt float %89, 0x3EE4F8B580000000, !dbg !33
  %91 = fcmp uno float %89, 0.000000e+00, !dbg !35
  %92 = or i1 %90, %91, !dbg !36
  %93 = select i1 %92, float %89, float 0x3EE4F8B580000000, !dbg !37
  %94 = or disjoint i32 %77, %34
  %95 = or disjoint i32 %77, %35
  %96 = or disjoint i32 %77, %36
  %97 = or disjoint i32 %77, %37
  %98 = and i32 %33, 2032
  %99 = lshr i32 %98, 9
  %.idx60 = shl nuw nsw i32 %99, 4
  %100 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx60
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %100, i32 %98
  %102 = or disjoint i32 %98, 8
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %100, i32 %102
  %104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %32
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 1040
  %106 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 2080
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 3120
  %108 = shl nuw nsw i32 %99, 2
  %109 = or disjoint i32 %108, %98
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %109
  %111 = or disjoint i32 %98, 4
  %112 = lshr i32 %33, 7
  %113 = and i32 %112, 12
  %114 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %113
  %115 = getelementptr inbounds nuw float, ptr addrspace(3) %114, i32 %111
  %116 = getelementptr inbounds nuw float, ptr addrspace(3) %100, i32 %102
  %117 = or disjoint i32 %98, 12
  %118 = getelementptr inbounds nuw float, ptr addrspace(3) %114, i32 %117
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %119, i32 2064
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) %119, i32 4128
  %122 = getelementptr inbounds nuw i8, ptr addrspace(3) %119, i32 6192
  %123 = and i32 %38, 1016
  %124 = lshr i32 %38, 6
  %125 = and i32 %124, 8
  %126 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %125
  %127 = getelementptr bfloat, ptr addrspace(3) %126, i32 %123
  %128 = zext nneg i32 %32 to i64, !dbg !38
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 4
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 1044
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 2084
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 3122
  %133 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 3124
  %134 = insertelement <16 x i1> poison, i1 %28, i64 0, !dbg !39
  %135 = shufflevector <16 x i1> %134, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !39
  br label %136, !dbg !38

136:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %528, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %529, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %530, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %531, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %150 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %151 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %152 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %153 = phi float [ 0.000000e+00, %16 ], [ %512, %._crit_edge ]
  %154 = phi float [ 0.000000e+00, %16 ], [ %513, %._crit_edge ]
  %155 = phi float [ 0.000000e+00, %16 ], [ %514, %._crit_edge ]
  %156 = phi float [ 0.000000e+00, %16 ], [ %515, %._crit_edge ]
  %157 = phi float [ 0.000000e+00, %16 ], [ %516, %._crit_edge ]
  %158 = phi float [ 0.000000e+00, %16 ], [ %517, %._crit_edge ]
  %159 = phi float [ 0.000000e+00, %16 ], [ %518, %._crit_edge ]
  %160 = phi float [ 0.000000e+00, %16 ], [ %519, %._crit_edge ]
  %161 = phi float [ 0.000000e+00, %16 ], [ %520, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %16 ], [ %521, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %16 ], [ %522, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %16 ], [ %523, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %16 ], [ %524, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %16 ], [ %525, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %16 ], [ %526, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %16 ], [ %527, %._crit_edge ]
  %169 = phi <16 x float> [ zeroinitializer, %16 ], [ %511, %._crit_edge ]
  %170 = or disjoint i64 %indvars.iv, %128, !dbg !40
  %171 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %172 = add i32 %94, %171, !dbg !41
  %173 = add i32 %95, %171, !dbg !41
  %174 = add i32 %96, %171, !dbg !41
  %175 = add i32 %97, %171, !dbg !41
  %176 = trunc i64 %indvars.iv to i32, !dbg !41
  %177 = or disjoint i32 %39, %176, !dbg !41
  %178 = add i32 %177, %78, !dbg !41
  %179 = add i32 %177, %79, !dbg !41
  %180 = sext i32 %172 to i64, !dbg !42
  %181 = getelementptr bfloat, ptr addrspace(1) %0, i64 %180, !dbg !42
  %182 = sext i32 %174 to i64, !dbg !42
  %183 = getelementptr bfloat, ptr addrspace(1) %0, i64 %182, !dbg !42
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %181, i1 %27) #5, !dbg !43
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !43
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !43
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !43
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !43
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %183, i1 %27) #5, !dbg !43
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !43
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !43
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !43
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %101, i32 %185, i32 %186, i32 %187, i32 %188, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %103, i32 %190, i32 %191, i32 %192, i32 %193, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %194 = add nuw nsw i64 %170, 6144, !dbg !45
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !46
  %196 = getelementptr bfloat, ptr addrspace(1) %2, i64 %194, !dbg !47
  %197 = getelementptr i32, ptr addrspace(1) %3, i64 %180, !dbg !48
  %198 = sext i32 %173 to i64, !dbg !48
  %199 = getelementptr i32, ptr addrspace(1) %3, i64 %198, !dbg !48
  %200 = getelementptr i32, ptr addrspace(1) %3, i64 %182, !dbg !48
  %201 = sext i32 %175 to i64, !dbg !48
  %202 = getelementptr i32, ptr addrspace(1) %3, i64 %201, !dbg !48
  %203 = getelementptr bfloat, ptr addrspace(1) %6, i64 %170, !dbg !49
  %204 = getelementptr bfloat, ptr addrspace(1) %7, i64 %170, !dbg !50
  %205 = load <4 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !44
  %206 = load <4 x bfloat>, ptr addrspace(3) %105, align 8, !dbg !44
  %207 = load <4 x bfloat>, ptr addrspace(3) %106, align 8, !dbg !44
  %208 = load <4 x bfloat>, ptr addrspace(3) %107, align 8, !dbg !44
  %209 = shufflevector <4 x bfloat> %205, <4 x bfloat> %206, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %210 = shufflevector <4 x bfloat> %207, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %211 = shufflevector <16 x bfloat> %209, <16 x bfloat> %210, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %212 = shufflevector <4 x bfloat> %208, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %213 = shufflevector <16 x bfloat> %211, <16 x bfloat> %212, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !44
  %214 = fpext <16 x bfloat> %213 to <16 x float>, !dbg !44
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %195, i1 true) #5, !dbg !51
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !51
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !51
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !51
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !51
  %220 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !51
  %221 = insertelement <4 x i32> %220, i32 %217, i64 1, !dbg !51
  %222 = insertelement <4 x i32> %221, i32 %218, i64 2, !dbg !51
  %223 = insertelement <4 x i32> %222, i32 %219, i64 3, !dbg !51
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !51
  %225 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %196, i1 true) #5, !dbg !52
  %226 = extractvalue { i32, i32 } %225, 0, !dbg !52
  %227 = bitcast i32 %226 to <2 x bfloat>, !dbg !52
  %228 = extractvalue { i32, i32 } %225, 1, !dbg !52
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !52
  %230 = shufflevector <2 x bfloat> %227, <2 x bfloat> %229, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %231 = fpext <4 x bfloat> %230 to <4 x float>, !dbg !53
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %27) #5, !dbg !54
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !54
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !54
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !54
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !54
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %27) #5, !dbg !54
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !54
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !54
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !54
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !54
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %27) #5, !dbg !54
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !54
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !54
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !54
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !54
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %202, i1 %27) #5, !dbg !54
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !54
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !54
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !54
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !54
  %252 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %203, i1 true) #5, !dbg !55
  %253 = extractvalue { i32, i32 } %252, 0, !dbg !55
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !55
  %255 = extractvalue { i32, i32 } %252, 1, !dbg !55
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !55
  %257 = shufflevector <2 x bfloat> %254, <2 x bfloat> %256, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %258 = fpext <4 x bfloat> %257 to <4 x float>, !dbg !56
  %259 = shufflevector <4 x float> %258, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %260 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %204, i1 true) #5, !dbg !57
  %261 = extractvalue { i32, i32 } %260, 0, !dbg !57
  %262 = bitcast i32 %261 to <2 x bfloat>, !dbg !57
  %263 = extractvalue { i32, i32 } %260, 1, !dbg !57
  %264 = bitcast i32 %263 to <2 x bfloat>, !dbg !57
  %265 = shufflevector <2 x bfloat> %262, <2 x bfloat> %264, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %266 = fpext <4 x bfloat> %265 to <4 x float>, !dbg !58
  %267 = shufflevector <4 x float> %266, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %268 = fadd <4 x float> %224, %231, !dbg !59
  %269 = shufflevector <4 x float> %268, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %270 = sitofp i32 %233 to float, !dbg !60
  %271 = sitofp i32 %234 to float, !dbg !60
  %272 = sitofp i32 %235 to float, !dbg !60
  %273 = sitofp i32 %236 to float, !dbg !60
  %274 = sitofp i32 %238 to float, !dbg !60
  %275 = sitofp i32 %239 to float, !dbg !60
  %276 = sitofp i32 %240 to float, !dbg !60
  %277 = sitofp i32 %241 to float, !dbg !60
  %278 = sitofp i32 %243 to float, !dbg !60
  %279 = sitofp i32 %244 to float, !dbg !60
  %280 = sitofp i32 %245 to float, !dbg !60
  %281 = sitofp i32 %246 to float, !dbg !60
  %282 = sitofp i32 %248 to float, !dbg !60
  %283 = sitofp i32 %249 to float, !dbg !60
  %284 = sitofp i32 %250 to float, !dbg !60
  %285 = sitofp i32 %251 to float, !dbg !60
  %286 = fmul float %93, %270, !dbg !61
  %287 = fmul float %93, %271, !dbg !61
  %288 = fmul float %93, %272, !dbg !61
  %289 = fmul float %93, %273, !dbg !61
  %290 = fmul float %93, %274, !dbg !61
  %291 = fmul float %93, %275, !dbg !61
  %292 = fmul float %93, %276, !dbg !61
  %293 = fmul float %93, %277, !dbg !61
  %294 = fmul float %93, %278, !dbg !61
  %295 = fmul float %93, %279, !dbg !61
  %296 = fmul float %93, %280, !dbg !61
  %297 = fmul float %93, %281, !dbg !61
  %298 = fmul float %93, %282, !dbg !61
  %299 = fmul float %93, %283, !dbg !61
  %300 = fmul float %93, %284, !dbg !61
  %301 = fmul float %93, %285, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %302 = bitcast float %286 to i32, !dbg !61
  %303 = bitcast float %287 to i32, !dbg !61
  %304 = bitcast float %288 to i32, !dbg !61
  %305 = bitcast float %289 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %110, i32 %302, i32 %303, i32 %304, i32 %305, i1 true) #5, !dbg !61
  %306 = bitcast float %290 to i32, !dbg !61
  %307 = bitcast float %291 to i32, !dbg !61
  %308 = bitcast float %292 to i32, !dbg !61
  %309 = bitcast float %293 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %115, i32 %306, i32 %307, i32 %308, i32 %309, i1 true) #5, !dbg !61
  %310 = bitcast float %294 to i32, !dbg !61
  %311 = bitcast float %295 to i32, !dbg !61
  %312 = bitcast float %296 to i32, !dbg !61
  %313 = bitcast float %297 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %116, i32 %310, i32 %311, i32 %312, i32 %313, i1 true) #5, !dbg !61
  %314 = bitcast float %298 to i32, !dbg !61
  %315 = bitcast float %299 to i32, !dbg !61
  %316 = bitcast float %300 to i32, !dbg !61
  %317 = bitcast float %301 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %118, i32 %314, i32 %315, i32 %316, i32 %317, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %318 = load <4 x float>, ptr addrspace(3) %119, align 16, !dbg !61
  %319 = load <4 x float>, ptr addrspace(3) %120, align 16, !dbg !61
  %320 = load <4 x float>, ptr addrspace(3) %121, align 16, !dbg !61
  %321 = load <4 x float>, ptr addrspace(3) %122, align 16, !dbg !61
  %322 = shufflevector <4 x float> %318, <4 x float> %319, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %323 = shufflevector <4 x float> %320, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %324 = shufflevector <16 x float> %322, <16 x float> %323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %325 = shufflevector <4 x float> %321, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %326 = shufflevector <16 x float> %324, <16 x float> %325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !62
  %327 = fmul <16 x float> %326, %259, !dbg !62
  %328 = fadd <16 x float> %327, %267, !dbg !63
  %329 = fmul <16 x float> %269, %328, !dbg !64
  %330 = fadd <16 x float> %329, %214, !dbg !65
  %331 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %331, label %._crit_edge, label %332, !dbg !67

332:                                              ; preds = %136
  %333 = fsub <16 x float> %330, %169, !dbg !69
  %334 = extractelement <16 x float> %333, i64 0, !dbg !69
  %335 = fsub <16 x float> %330, %169, !dbg !69
  %336 = extractelement <16 x float> %335, i64 1, !dbg !69
  %337 = fsub <16 x float> %330, %169, !dbg !69
  %338 = extractelement <16 x float> %337, i64 2, !dbg !69
  %339 = fsub <16 x float> %330, %169, !dbg !69
  %340 = extractelement <16 x float> %339, i64 3, !dbg !69
  %341 = fsub <16 x float> %330, %169, !dbg !69
  %342 = extractelement <16 x float> %341, i64 4, !dbg !69
  %343 = fsub <16 x float> %330, %169, !dbg !69
  %344 = extractelement <16 x float> %343, i64 5, !dbg !69
  %345 = fsub <16 x float> %330, %169, !dbg !69
  %346 = extractelement <16 x float> %345, i64 6, !dbg !69
  %347 = fsub <16 x float> %330, %169, !dbg !69
  %348 = extractelement <16 x float> %347, i64 7, !dbg !69
  %349 = fsub <16 x float> %330, %169, !dbg !69
  %350 = extractelement <16 x float> %349, i64 8, !dbg !69
  %351 = fsub <16 x float> %330, %169, !dbg !69
  %352 = extractelement <16 x float> %351, i64 9, !dbg !69
  %353 = fsub <16 x float> %330, %169, !dbg !69
  %354 = extractelement <16 x float> %353, i64 10, !dbg !69
  %355 = fsub <16 x float> %330, %169, !dbg !69
  %356 = extractelement <16 x float> %355, i64 11, !dbg !69
  %357 = fsub <16 x float> %330, %169, !dbg !69
  %358 = extractelement <16 x float> %357, i64 12, !dbg !69
  %359 = fsub <16 x float> %330, %169, !dbg !69
  %360 = extractelement <16 x float> %359, i64 13, !dbg !69
  %361 = fsub <16 x float> %330, %169, !dbg !69
  %362 = extractelement <16 x float> %361, i64 14, !dbg !69
  %363 = fsub <16 x float> %330, %169, !dbg !69
  %364 = extractelement <16 x float> %363, i64 15, !dbg !69
  %365 = fadd float %137, 1.000000e+00, !dbg !70
  %366 = fadd float %138, 1.000000e+00, !dbg !70
  %367 = fadd float %139, 1.000000e+00, !dbg !70
  %368 = fadd float %140, 1.000000e+00, !dbg !70
  %369 = fadd float %141, 1.000000e+00, !dbg !70
  %370 = fadd float %142, 1.000000e+00, !dbg !70
  %371 = fadd float %143, 1.000000e+00, !dbg !70
  %372 = fadd float %144, 1.000000e+00, !dbg !70
  %373 = fadd float %145, 1.000000e+00, !dbg !70
  %374 = fadd float %146, 1.000000e+00, !dbg !70
  %375 = fadd float %147, 1.000000e+00, !dbg !70
  %376 = fadd float %148, 1.000000e+00, !dbg !70
  %377 = fadd float %149, 1.000000e+00, !dbg !70
  %378 = fadd float %150, 1.000000e+00, !dbg !70
  %379 = fadd float %151, 1.000000e+00, !dbg !70
  %380 = fadd float %152, 1.000000e+00, !dbg !70
  %381 = tail call float @llvm.nvvm.div.full(float %334, float %365), !dbg !71
  %382 = tail call float @llvm.nvvm.div.full(float %336, float %366), !dbg !71
  %383 = tail call float @llvm.nvvm.div.full(float %338, float %367), !dbg !71
  %384 = tail call float @llvm.nvvm.div.full(float %340, float %368), !dbg !71
  %385 = tail call float @llvm.nvvm.div.full(float %342, float %369), !dbg !71
  %386 = tail call float @llvm.nvvm.div.full(float %344, float %370), !dbg !71
  %387 = tail call float @llvm.nvvm.div.full(float %346, float %371), !dbg !71
  %388 = tail call float @llvm.nvvm.div.full(float %348, float %372), !dbg !71
  %389 = tail call float @llvm.nvvm.div.full(float %350, float %373), !dbg !71
  %390 = tail call float @llvm.nvvm.div.full(float %352, float %374), !dbg !71
  %391 = tail call float @llvm.nvvm.div.full(float %354, float %375), !dbg !71
  %392 = tail call float @llvm.nvvm.div.full(float %356, float %376), !dbg !71
  %393 = tail call float @llvm.nvvm.div.full(float %358, float %377), !dbg !71
  %394 = tail call float @llvm.nvvm.div.full(float %360, float %378), !dbg !71
  %395 = tail call float @llvm.nvvm.div.full(float %362, float %379), !dbg !71
  %396 = tail call float @llvm.nvvm.div.full(float %364, float %380), !dbg !71
  %397 = insertelement <16 x float> poison, float %381, i64 0, !dbg !72
  %398 = insertelement <16 x float> %397, float %382, i64 1, !dbg !72
  %399 = insertelement <16 x float> %398, float %383, i64 2, !dbg !72
  %400 = insertelement <16 x float> %399, float %384, i64 3, !dbg !72
  %401 = insertelement <16 x float> %400, float %385, i64 4, !dbg !72
  %402 = insertelement <16 x float> %401, float %386, i64 5, !dbg !72
  %403 = insertelement <16 x float> %402, float %387, i64 6, !dbg !72
  %404 = insertelement <16 x float> %403, float %388, i64 7, !dbg !72
  %405 = insertelement <16 x float> %404, float %389, i64 8, !dbg !72
  %406 = insertelement <16 x float> %405, float %390, i64 9, !dbg !72
  %407 = insertelement <16 x float> %406, float %391, i64 10, !dbg !72
  %408 = insertelement <16 x float> %407, float %392, i64 11, !dbg !72
  %409 = insertelement <16 x float> %408, float %393, i64 12, !dbg !72
  %410 = insertelement <16 x float> %409, float %394, i64 13, !dbg !72
  %411 = insertelement <16 x float> %410, float %395, i64 14, !dbg !72
  %412 = insertelement <16 x float> %411, float %396, i64 15, !dbg !72
  %413 = fadd <16 x float> %169, %412, !dbg !72
  %414 = fsub <16 x float> %330, %413, !dbg !73
  %415 = fsub <16 x float> %330, %413, !dbg !73
  %416 = fsub <16 x float> %330, %413, !dbg !73
  %417 = fsub <16 x float> %330, %413, !dbg !73
  %418 = fsub <16 x float> %330, %413, !dbg !73
  %419 = fsub <16 x float> %330, %413, !dbg !73
  %420 = fsub <16 x float> %330, %413, !dbg !73
  %421 = fsub <16 x float> %330, %413, !dbg !73
  %422 = fsub <16 x float> %330, %413, !dbg !73
  %423 = fsub <16 x float> %330, %413, !dbg !73
  %424 = fsub <16 x float> %330, %413, !dbg !73
  %425 = fsub <16 x float> %330, %413, !dbg !73
  %426 = fsub <16 x float> %330, %413, !dbg !73
  %427 = fsub <16 x float> %330, %413, !dbg !73
  %428 = fsub <16 x float> %330, %413, !dbg !73
  %429 = fsub <16 x float> %330, %413, !dbg !73
  %430 = fmul <16 x float> %333, %414, !dbg !74
  %431 = extractelement <16 x float> %430, i64 0, !dbg !74
  %432 = fmul <16 x float> %335, %415, !dbg !74
  %433 = extractelement <16 x float> %432, i64 1, !dbg !74
  %434 = fmul <16 x float> %337, %416, !dbg !74
  %435 = extractelement <16 x float> %434, i64 2, !dbg !74
  %436 = fmul <16 x float> %339, %417, !dbg !74
  %437 = extractelement <16 x float> %436, i64 3, !dbg !74
  %438 = fmul <16 x float> %341, %418, !dbg !74
  %439 = extractelement <16 x float> %438, i64 4, !dbg !74
  %440 = fmul <16 x float> %343, %419, !dbg !74
  %441 = extractelement <16 x float> %440, i64 5, !dbg !74
  %442 = fmul <16 x float> %345, %420, !dbg !74
  %443 = extractelement <16 x float> %442, i64 6, !dbg !74
  %444 = fmul <16 x float> %347, %421, !dbg !74
  %445 = extractelement <16 x float> %444, i64 7, !dbg !74
  %446 = fmul <16 x float> %349, %422, !dbg !74
  %447 = extractelement <16 x float> %446, i64 8, !dbg !74
  %448 = fmul <16 x float> %351, %423, !dbg !74
  %449 = extractelement <16 x float> %448, i64 9, !dbg !74
  %450 = fmul <16 x float> %353, %424, !dbg !74
  %451 = extractelement <16 x float> %450, i64 10, !dbg !74
  %452 = fmul <16 x float> %355, %425, !dbg !74
  %453 = extractelement <16 x float> %452, i64 11, !dbg !74
  %454 = fmul <16 x float> %357, %426, !dbg !74
  %455 = extractelement <16 x float> %454, i64 12, !dbg !74
  %456 = fmul <16 x float> %359, %427, !dbg !74
  %457 = extractelement <16 x float> %456, i64 13, !dbg !74
  %458 = fmul <16 x float> %361, %428, !dbg !74
  %459 = extractelement <16 x float> %458, i64 14, !dbg !74
  %460 = fmul <16 x float> %363, %429, !dbg !74
  %461 = extractelement <16 x float> %460, i64 15, !dbg !74
  %462 = fadd float %153, %431, !dbg !75
  %463 = fadd float %154, %433, !dbg !75
  %464 = fadd float %155, %435, !dbg !75
  %465 = fadd float %156, %437, !dbg !75
  %466 = fadd float %157, %439, !dbg !75
  %467 = fadd float %158, %441, !dbg !75
  %468 = fadd float %159, %443, !dbg !75
  %469 = fadd float %160, %445, !dbg !75
  %470 = fadd float %161, %447, !dbg !75
  %471 = fadd float %162, %449, !dbg !75
  %472 = fadd float %163, %451, !dbg !75
  %473 = fadd float %164, %453, !dbg !75
  %474 = fadd float %165, %455, !dbg !75
  %475 = fadd float %166, %457, !dbg !75
  %476 = fadd float %167, %459, !dbg !75
  %477 = fadd float %168, %461, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %136, %332
  %478 = phi float [ %462, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %479 = phi float [ %463, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %480 = phi float [ %464, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %481 = phi float [ %465, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %482 = phi float [ %466, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %483 = phi float [ %467, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %484 = phi float [ %468, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %485 = phi float [ %469, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %486 = phi float [ %470, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %487 = phi float [ %471, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %488 = phi float [ %472, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %489 = phi float [ %473, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %490 = phi float [ %474, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %491 = phi float [ %475, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %492 = phi float [ %476, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %493 = phi float [ %477, %332 ], [ 0.000000e+00, %136 ], !dbg !68
  %494 = phi float [ %365, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %495 = phi float [ %366, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %496 = phi float [ %367, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %497 = phi float [ %368, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %498 = phi float [ %369, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %499 = phi float [ %370, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %500 = phi float [ %371, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %501 = phi float [ %372, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %502 = phi float [ %373, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %503 = phi float [ %374, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %504 = phi float [ %375, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %505 = phi float [ %376, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %506 = phi float [ %377, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %507 = phi float [ %378, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %508 = phi float [ %379, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %509 = phi float [ %380, %332 ], [ 1.000000e+00, %136 ], !dbg !68
  %510 = phi <16 x float> [ %413, %332 ], [ %330, %136 ]
  %511 = select <16 x i1> %135, <16 x float> %510, <16 x float> %169, !dbg !39
  %512 = select i1 %28, float %478, float %153, !dbg !76
  %513 = select i1 %28, float %479, float %154, !dbg !76
  %514 = select i1 %28, float %480, float %155, !dbg !76
  %515 = select i1 %28, float %481, float %156, !dbg !76
  %516 = select i1 %28, float %482, float %157, !dbg !76
  %517 = select i1 %28, float %483, float %158, !dbg !76
  %518 = select i1 %28, float %484, float %159, !dbg !76
  %519 = select i1 %28, float %485, float %160, !dbg !76
  %520 = select i1 %28, float %486, float %161, !dbg !76
  %521 = select i1 %28, float %487, float %162, !dbg !76
  %522 = select i1 %28, float %488, float %163, !dbg !76
  %523 = select i1 %28, float %489, float %164, !dbg !76
  %524 = select i1 %28, float %490, float %165, !dbg !76
  %525 = select i1 %28, float %491, float %166, !dbg !76
  %526 = select i1 %28, float %492, float %167, !dbg !76
  %527 = select i1 %28, float %493, float %168, !dbg !76
  %528 = select i1 %28, float %494, float %137, !dbg !77
  %529 = select i1 %28, float %495, float %138, !dbg !77
  %530 = select i1 %28, float %496, float %139, !dbg !77
  %531 = select i1 %28, float %497, float %140, !dbg !77
  %532 = select i1 %28, float %498, float %141, !dbg !77
  %533 = select i1 %28, float %499, float %142, !dbg !77
  %534 = select i1 %28, float %500, float %143, !dbg !77
  %535 = select i1 %28, float %501, float %144, !dbg !77
  %536 = select i1 %28, float %502, float %145, !dbg !77
  %537 = select i1 %28, float %503, float %146, !dbg !77
  %538 = select i1 %28, float %504, float %147, !dbg !77
  %539 = select i1 %28, float %505, float %148, !dbg !77
  %540 = select i1 %28, float %506, float %149, !dbg !77
  %541 = select i1 %28, float %507, float %150, !dbg !77
  %542 = select i1 %28, float %508, float %151, !dbg !77
  %543 = select i1 %28, float %509, float %152, !dbg !77
  %544 = sext i32 %178 to i64, !dbg !78
  %545 = getelementptr bfloat, ptr addrspace(1) %8, i64 %544, !dbg !78
  %546 = sext i32 %179 to i64, !dbg !78
  %547 = getelementptr bfloat, ptr addrspace(1) %8, i64 %546, !dbg !78
  %548 = extractelement <16 x float> %330, i64 0, !dbg !79
  %549 = fptrunc float %548 to bfloat, !dbg !79
  %550 = extractelement <16 x float> %330, i64 1, !dbg !79
  %551 = fptrunc float %550 to bfloat, !dbg !79
  %552 = extractelement <16 x float> %330, i64 2, !dbg !79
  %553 = fptrunc float %552 to bfloat, !dbg !79
  %554 = extractelement <16 x float> %330, i64 3, !dbg !79
  %555 = fptrunc float %554 to bfloat, !dbg !79
  %556 = extractelement <16 x float> %330, i64 4, !dbg !79
  %557 = fptrunc float %556 to bfloat, !dbg !79
  %558 = extractelement <16 x float> %330, i64 5, !dbg !79
  %559 = fptrunc float %558 to bfloat, !dbg !79
  %560 = extractelement <16 x float> %330, i64 6, !dbg !79
  %561 = fptrunc float %560 to bfloat, !dbg !79
  %562 = extractelement <16 x float> %330, i64 7, !dbg !79
  %563 = fptrunc float %562 to bfloat, !dbg !79
  %564 = extractelement <16 x float> %330, i64 8, !dbg !79
  %565 = fptrunc float %564 to bfloat, !dbg !79
  %566 = extractelement <16 x float> %330, i64 9, !dbg !79
  %567 = fptrunc float %566 to bfloat, !dbg !79
  %568 = extractelement <16 x float> %330, i64 10, !dbg !79
  %569 = fptrunc float %568 to bfloat, !dbg !79
  %570 = extractelement <16 x float> %330, i64 11, !dbg !79
  %571 = fptrunc float %570 to bfloat, !dbg !79
  %572 = extractelement <16 x float> %330, i64 12, !dbg !79
  %573 = fptrunc float %572 to bfloat, !dbg !79
  %574 = extractelement <16 x float> %330, i64 13, !dbg !79
  %575 = fptrunc float %574 to bfloat, !dbg !79
  %576 = extractelement <16 x float> %330, i64 14, !dbg !79
  %577 = fptrunc float %576 to bfloat, !dbg !79
  %578 = extractelement <16 x float> %330, i64 15, !dbg !79
  %579 = fptrunc float %578 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %580 = bitcast bfloat %549 to i16, !dbg !79
  %581 = bitcast bfloat %551 to i16, !dbg !79
  %582 = bitcast bfloat %553 to i16, !dbg !79
  %583 = bitcast bfloat %555 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %104, i16 %580, i16 %581, i16 %582, i16 %583, i1 true) #5, !dbg !79
  %584 = bitcast bfloat %557 to i16, !dbg !79
  %585 = bitcast bfloat %559 to i16, !dbg !79
  %586 = bitcast bfloat %561 to i16, !dbg !79
  %587 = bitcast bfloat %563 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %105, i16 %584, i16 %585, i16 %586, i16 %587, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %588 = load <4 x i32>, ptr addrspace(3) %127, align 16, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %589 = bitcast bfloat %565 to i16, !dbg !79
  %590 = bitcast bfloat %567 to i16, !dbg !79
  %591 = bitcast bfloat %569 to i16, !dbg !79
  %592 = bitcast bfloat %571 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %104, i16 %589, i16 %590, i16 %591, i16 %592, i1 true) #5, !dbg !79
  %593 = bitcast bfloat %573 to i16, !dbg !79
  %594 = bitcast bfloat %575 to i16, !dbg !79
  %595 = bitcast bfloat %577 to i16, !dbg !79
  %596 = bitcast bfloat %579 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %105, i16 %593, i16 %594, i16 %595, i16 %596, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %597 = load <4 x i32>, ptr addrspace(3) %127, align 16, !dbg !79
  %.extract224 = extractelement <4 x i32> %588, i64 0, !dbg !79
  %.extract226 = extractelement <4 x i32> %588, i64 1, !dbg !79
  %.extract228 = extractelement <4 x i32> %588, i64 2, !dbg !79
  %.extract230 = extractelement <4 x i32> %588, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract224, i32 %.extract226, i32 %.extract228, i32 %.extract230, ptr addrspace(1) %545, i1 %29) #5, !dbg !79
  %.extract232 = extractelement <4 x i32> %597, i64 0, !dbg !79
  %.extract234 = extractelement <4 x i32> %597, i64 1, !dbg !79
  %.extract236 = extractelement <4 x i32> %597, i64 2, !dbg !79
  %.extract238 = extractelement <4 x i32> %597, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract232, i32 %.extract234, i32 %.extract236, i32 %.extract238, ptr addrspace(1) %547, i1 %30) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %598 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %598, label %136, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %599 = and i32 %19, 3, !dbg !11
  %600 = or disjoint i32 %18, %599, !dbg !12
  %601 = icmp slt i32 %600, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %602 = extractelement <16 x float> %511, i64 0, !dbg !82
  %603 = extractelement <16 x float> %511, i64 1, !dbg !82
  %604 = fsub float %603, %602, !dbg !82
  %605 = fadd float %528, %529, !dbg !84
  %606 = fcmp oeq float %605, 0.000000e+00, !dbg !85
  %607 = tail call float @llvm.nvvm.div.full(float %529, float %605), !dbg !86
  %608 = select i1 %606, float 0.000000e+00, float %607, !dbg !87
  %609 = fmul float %604, %608, !dbg !88
  %610 = fadd float %602, %609, !dbg !89
  %611 = fadd float %512, %513, !dbg !90
  %612 = fmul float %604, %604, !dbg !91
  %613 = fmul float %612, %528, !dbg !92
  %614 = fmul float %613, %608, !dbg !93
  %615 = fadd float %611, %614, !dbg !94
  %616 = extractelement <16 x float> %511, i64 2, !dbg !82
  %617 = fsub float %616, %610, !dbg !82
  %618 = fadd float %530, %605, !dbg !84
  %619 = fcmp oeq float %618, 0.000000e+00, !dbg !85
  %620 = tail call float @llvm.nvvm.div.full(float %530, float %618), !dbg !86
  %621 = select i1 %619, float 0.000000e+00, float %620, !dbg !87
  %622 = fmul float %621, %617, !dbg !88
  %623 = fadd float %610, %622, !dbg !89
  %624 = fadd float %514, %615, !dbg !90
  %625 = fmul float %617, %617, !dbg !91
  %626 = fmul float %605, %625, !dbg !92
  %627 = fmul float %621, %626, !dbg !93
  %628 = fadd float %624, %627, !dbg !94
  %629 = extractelement <16 x float> %511, i64 3, !dbg !82
  %630 = fsub float %629, %623, !dbg !82
  %631 = fadd float %531, %618, !dbg !84
  %632 = fcmp oeq float %631, 0.000000e+00, !dbg !85
  %633 = tail call float @llvm.nvvm.div.full(float %531, float %631), !dbg !86
  %634 = select i1 %632, float 0.000000e+00, float %633, !dbg !87
  %635 = fmul float %634, %630, !dbg !88
  %636 = fadd float %623, %635, !dbg !89
  %637 = fadd float %515, %628, !dbg !90
  %638 = fmul float %630, %630, !dbg !91
  %639 = fmul float %618, %638, !dbg !92
  %640 = fmul float %634, %639, !dbg !93
  %641 = fadd float %637, %640, !dbg !94
  %642 = extractelement <16 x float> %511, i64 4, !dbg !82
  %643 = extractelement <16 x float> %511, i64 5, !dbg !82
  %644 = fsub float %643, %642, !dbg !82
  %645 = fadd float %532, %533, !dbg !84
  %646 = fcmp oeq float %645, 0.000000e+00, !dbg !85
  %647 = tail call float @llvm.nvvm.div.full(float %533, float %645), !dbg !86
  %648 = select i1 %646, float 0.000000e+00, float %647, !dbg !87
  %649 = fmul float %644, %648, !dbg !88
  %650 = fadd float %642, %649, !dbg !89
  %651 = fadd float %516, %517, !dbg !90
  %652 = fmul float %644, %644, !dbg !91
  %653 = fmul float %652, %532, !dbg !92
  %654 = fmul float %653, %648, !dbg !93
  %655 = fadd float %651, %654, !dbg !94
  %656 = extractelement <16 x float> %511, i64 6, !dbg !82
  %657 = fsub float %656, %650, !dbg !82
  %658 = fadd float %534, %645, !dbg !84
  %659 = fcmp oeq float %658, 0.000000e+00, !dbg !85
  %660 = tail call float @llvm.nvvm.div.full(float %534, float %658), !dbg !86
  %661 = select i1 %659, float 0.000000e+00, float %660, !dbg !87
  %662 = fmul float %661, %657, !dbg !88
  %663 = fadd float %650, %662, !dbg !89
  %664 = fadd float %518, %655, !dbg !90
  %665 = fmul float %657, %657, !dbg !91
  %666 = fmul float %645, %665, !dbg !92
  %667 = fmul float %661, %666, !dbg !93
  %668 = fadd float %664, %667, !dbg !94
  %669 = extractelement <16 x float> %511, i64 7, !dbg !82
  %670 = fsub float %669, %663, !dbg !82
  %671 = fadd float %535, %658, !dbg !84
  %672 = fcmp oeq float %671, 0.000000e+00, !dbg !85
  %673 = tail call float @llvm.nvvm.div.full(float %535, float %671), !dbg !86
  %674 = select i1 %672, float 0.000000e+00, float %673, !dbg !87
  %675 = fmul float %674, %670, !dbg !88
  %676 = fadd float %663, %675, !dbg !89
  %677 = fadd float %519, %668, !dbg !90
  %678 = fmul float %670, %670, !dbg !91
  %679 = fmul float %658, %678, !dbg !92
  %680 = fmul float %674, %679, !dbg !93
  %681 = fadd float %677, %680, !dbg !94
  %682 = extractelement <16 x float> %511, i64 8, !dbg !82
  %683 = extractelement <16 x float> %511, i64 9, !dbg !82
  %684 = fsub float %683, %682, !dbg !82
  %685 = fadd float %536, %537, !dbg !84
  %686 = fcmp oeq float %685, 0.000000e+00, !dbg !85
  %687 = tail call float @llvm.nvvm.div.full(float %537, float %685), !dbg !86
  %688 = select i1 %686, float 0.000000e+00, float %687, !dbg !87
  %689 = fmul float %684, %688, !dbg !88
  %690 = fadd float %682, %689, !dbg !89
  %691 = fadd float %520, %521, !dbg !90
  %692 = fmul float %684, %684, !dbg !91
  %693 = fmul float %692, %536, !dbg !92
  %694 = fmul float %693, %688, !dbg !93
  %695 = fadd float %691, %694, !dbg !94
  %696 = extractelement <16 x float> %511, i64 10, !dbg !82
  %697 = fsub float %696, %690, !dbg !82
  %698 = fadd float %538, %685, !dbg !84
  %699 = fcmp oeq float %698, 0.000000e+00, !dbg !85
  %700 = tail call float @llvm.nvvm.div.full(float %538, float %698), !dbg !86
  %701 = select i1 %699, float 0.000000e+00, float %700, !dbg !87
  %702 = fmul float %701, %697, !dbg !88
  %703 = fadd float %690, %702, !dbg !89
  %704 = fadd float %522, %695, !dbg !90
  %705 = fmul float %697, %697, !dbg !91
  %706 = fmul float %685, %705, !dbg !92
  %707 = fmul float %701, %706, !dbg !93
  %708 = fadd float %704, %707, !dbg !94
  %709 = extractelement <16 x float> %511, i64 11, !dbg !82
  %710 = fsub float %709, %703, !dbg !82
  %711 = fadd float %539, %698, !dbg !84
  %712 = fcmp oeq float %711, 0.000000e+00, !dbg !85
  %713 = tail call float @llvm.nvvm.div.full(float %539, float %711), !dbg !86
  %714 = select i1 %712, float 0.000000e+00, float %713, !dbg !87
  %715 = fmul float %714, %710, !dbg !88
  %716 = fadd float %703, %715, !dbg !89
  %717 = fadd float %523, %708, !dbg !90
  %718 = fmul float %710, %710, !dbg !91
  %719 = fmul float %698, %718, !dbg !92
  %720 = fmul float %714, %719, !dbg !93
  %721 = fadd float %717, %720, !dbg !94
  %722 = extractelement <16 x float> %511, i64 12, !dbg !82
  %723 = extractelement <16 x float> %511, i64 13, !dbg !82
  %724 = fsub float %723, %722, !dbg !82
  %725 = fadd float %540, %541, !dbg !84
  %726 = fcmp oeq float %725, 0.000000e+00, !dbg !85
  %727 = tail call float @llvm.nvvm.div.full(float %541, float %725), !dbg !86
  %728 = select i1 %726, float 0.000000e+00, float %727, !dbg !87
  %729 = fmul float %724, %728, !dbg !88
  %730 = fadd float %722, %729, !dbg !89
  %731 = fadd float %524, %525, !dbg !90
  %732 = fmul float %724, %724, !dbg !91
  %733 = fmul float %732, %540, !dbg !92
  %734 = fmul float %733, %728, !dbg !93
  %735 = fadd float %731, %734, !dbg !94
  %736 = extractelement <16 x float> %511, i64 14, !dbg !82
  %737 = fsub float %736, %730, !dbg !82
  %738 = fadd float %542, %725, !dbg !84
  %739 = fcmp oeq float %738, 0.000000e+00, !dbg !85
  %740 = tail call float @llvm.nvvm.div.full(float %542, float %738), !dbg !86
  %741 = select i1 %739, float 0.000000e+00, float %740, !dbg !87
  %742 = fmul float %741, %737, !dbg !88
  %743 = fadd float %730, %742, !dbg !89
  %744 = fadd float %526, %735, !dbg !90
  %745 = fmul float %737, %737, !dbg !91
  %746 = fmul float %725, %745, !dbg !92
  %747 = fmul float %741, %746, !dbg !93
  %748 = fadd float %744, %747, !dbg !94
  %749 = extractelement <16 x float> %511, i64 15, !dbg !82
  %750 = fsub float %749, %743, !dbg !82
  %751 = fadd float %543, %738, !dbg !84
  %752 = fcmp oeq float %751, 0.000000e+00, !dbg !85
  %753 = tail call float @llvm.nvvm.div.full(float %543, float %751), !dbg !86
  %754 = select i1 %752, float 0.000000e+00, float %753, !dbg !87
  %755 = fmul float %754, %750, !dbg !88
  %756 = fadd float %743, %755, !dbg !89
  %757 = fadd float %527, %748, !dbg !90
  %758 = fmul float %750, %750, !dbg !91
  %759 = fmul float %738, %758, !dbg !92
  %760 = fmul float %754, %759, !dbg !93
  %761 = fadd float %757, %760, !dbg !94
  %762 = bitcast float %636 to i32, !dbg !80
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 16, i32 31), !dbg !80
  %764 = bitcast i32 %763 to float, !dbg !80
  %765 = bitcast float %641 to i32, !dbg !80
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 16, i32 31), !dbg !80
  %767 = bitcast i32 %766 to float, !dbg !80
  %768 = bitcast float %631 to i32, !dbg !80
  %769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %768, i32 16, i32 31), !dbg !80
  %770 = bitcast i32 %769 to float, !dbg !80
  %771 = fsub float %764, %636, !dbg !82
  %772 = fadd float %631, %770, !dbg !84
  %773 = fcmp oeq float %772, 0.000000e+00, !dbg !85
  %774 = tail call float @llvm.nvvm.div.full(float %770, float %772), !dbg !86
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !87
  %776 = fmul float %771, %775, !dbg !88
  %777 = fadd float %636, %776, !dbg !89
  %778 = fadd float %641, %767, !dbg !90
  %779 = fmul float %771, %771, !dbg !91
  %780 = fmul float %631, %779, !dbg !92
  %781 = fmul float %780, %775, !dbg !93
  %782 = fadd float %778, %781, !dbg !94
  %783 = bitcast float %777 to i32, !dbg !80
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 8, i32 31), !dbg !80
  %785 = bitcast i32 %784 to float, !dbg !80
  %786 = bitcast float %782 to i32, !dbg !80
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 8, i32 31), !dbg !80
  %788 = bitcast i32 %787 to float, !dbg !80
  %789 = bitcast float %772 to i32, !dbg !80
  %790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %789, i32 8, i32 31), !dbg !80
  %791 = bitcast i32 %790 to float, !dbg !80
  %792 = fsub float %785, %777, !dbg !82
  %793 = fadd float %772, %791, !dbg !84
  %794 = fcmp oeq float %793, 0.000000e+00, !dbg !85
  %795 = tail call float @llvm.nvvm.div.full(float %791, float %793), !dbg !86
  %796 = select i1 %794, float 0.000000e+00, float %795, !dbg !87
  %797 = fmul float %792, %796, !dbg !88
  %798 = fadd float %777, %797, !dbg !89
  %799 = fadd float %782, %788, !dbg !90
  %800 = fmul float %792, %792, !dbg !91
  %801 = fmul float %772, %800, !dbg !92
  %802 = fmul float %796, %801, !dbg !93
  %803 = fadd float %799, %802, !dbg !94
  %804 = bitcast float %798 to i32, !dbg !80
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 4, i32 31), !dbg !80
  %806 = bitcast i32 %805 to float, !dbg !80
  %807 = bitcast float %803 to i32, !dbg !80
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 4, i32 31), !dbg !80
  %809 = bitcast i32 %808 to float, !dbg !80
  %810 = bitcast float %793 to i32, !dbg !80
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 4, i32 31), !dbg !80
  %812 = bitcast i32 %811 to float, !dbg !80
  %813 = fsub float %806, %798, !dbg !82
  %814 = fadd float %793, %812, !dbg !84
  %815 = fcmp oeq float %814, 0.000000e+00, !dbg !85
  %816 = tail call float @llvm.nvvm.div.full(float %812, float %814), !dbg !86
  %817 = select i1 %815, float 0.000000e+00, float %816, !dbg !87
  %818 = fmul float %813, %817, !dbg !88
  %819 = fadd float %798, %818, !dbg !89
  %820 = fadd float %803, %809, !dbg !90
  %821 = fmul float %813, %813, !dbg !91
  %822 = fmul float %793, %821, !dbg !92
  %823 = fmul float %817, %822, !dbg !93
  %824 = fadd float %820, %823, !dbg !94
  %825 = bitcast float %819 to i32, !dbg !80
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 2, i32 31), !dbg !80
  %827 = bitcast i32 %826 to float, !dbg !80
  %828 = bitcast float %824 to i32, !dbg !80
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 2, i32 31), !dbg !80
  %830 = bitcast i32 %829 to float, !dbg !80
  %831 = bitcast float %814 to i32, !dbg !80
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 2, i32 31), !dbg !80
  %833 = bitcast i32 %832 to float, !dbg !80
  %834 = fsub float %827, %819, !dbg !82
  %835 = fadd float %814, %833, !dbg !84
  %836 = fcmp oeq float %835, 0.000000e+00, !dbg !85
  %837 = tail call float @llvm.nvvm.div.full(float %833, float %835), !dbg !86
  %838 = select i1 %836, float 0.000000e+00, float %837, !dbg !87
  %839 = fmul float %834, %838, !dbg !88
  %840 = fadd float %819, %839, !dbg !89
  %841 = fadd float %824, %830, !dbg !90
  %842 = fmul float %834, %834, !dbg !91
  %843 = fmul float %814, %842, !dbg !92
  %844 = fmul float %838, %843, !dbg !93
  %845 = fadd float %841, %844, !dbg !94
  %846 = bitcast float %840 to i32, !dbg !80
  %847 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %846, i32 1, i32 31), !dbg !80
  %848 = bitcast i32 %847 to float, !dbg !80
  %849 = bitcast float %845 to i32, !dbg !80
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 1, i32 31), !dbg !80
  %851 = bitcast i32 %850 to float, !dbg !80
  %852 = bitcast float %835 to i32, !dbg !80
  %853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 1, i32 31), !dbg !80
  %854 = bitcast i32 %853 to float, !dbg !80
  %855 = fsub float %848, %840, !dbg !82
  %856 = fadd float %835, %854, !dbg !84
  %857 = fcmp oeq float %856, 0.000000e+00, !dbg !85
  %858 = tail call float @llvm.nvvm.div.full(float %854, float %856), !dbg !86
  %859 = select i1 %857, float 0.000000e+00, float %858, !dbg !87
  %860 = fmul float %855, %859, !dbg !88
  %861 = fadd float %840, %860, !dbg !89
  %862 = fadd float %845, %851, !dbg !90
  %863 = fmul float %855, %855, !dbg !91
  %864 = fmul float %835, %863, !dbg !92
  %865 = fmul float %859, %864, !dbg !93
  %866 = fadd float %862, %865, !dbg !94
  %867 = bitcast float %676 to i32, !dbg !80
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 16, i32 31), !dbg !80
  %869 = bitcast i32 %868 to float, !dbg !80
  %870 = bitcast float %681 to i32, !dbg !80
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 16, i32 31), !dbg !80
  %872 = bitcast i32 %871 to float, !dbg !80
  %873 = bitcast float %671 to i32, !dbg !80
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 16, i32 31), !dbg !80
  %875 = bitcast i32 %874 to float, !dbg !80
  %876 = fsub float %869, %676, !dbg !82
  %877 = fadd float %671, %875, !dbg !84
  %878 = fcmp oeq float %877, 0.000000e+00, !dbg !85
  %879 = tail call float @llvm.nvvm.div.full(float %875, float %877), !dbg !86
  %880 = select i1 %878, float 0.000000e+00, float %879, !dbg !87
  %881 = fmul float %876, %880, !dbg !88
  %882 = fadd float %676, %881, !dbg !89
  %883 = fadd float %681, %872, !dbg !90
  %884 = fmul float %876, %876, !dbg !91
  %885 = fmul float %671, %884, !dbg !92
  %886 = fmul float %885, %880, !dbg !93
  %887 = fadd float %883, %886, !dbg !94
  %888 = bitcast float %882 to i32, !dbg !80
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 8, i32 31), !dbg !80
  %890 = bitcast i32 %889 to float, !dbg !80
  %891 = bitcast float %887 to i32, !dbg !80
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 8, i32 31), !dbg !80
  %893 = bitcast i32 %892 to float, !dbg !80
  %894 = bitcast float %877 to i32, !dbg !80
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 8, i32 31), !dbg !80
  %896 = bitcast i32 %895 to float, !dbg !80
  %897 = fsub float %890, %882, !dbg !82
  %898 = fadd float %877, %896, !dbg !84
  %899 = fcmp oeq float %898, 0.000000e+00, !dbg !85
  %900 = tail call float @llvm.nvvm.div.full(float %896, float %898), !dbg !86
  %901 = select i1 %899, float 0.000000e+00, float %900, !dbg !87
  %902 = fmul float %897, %901, !dbg !88
  %903 = fadd float %882, %902, !dbg !89
  %904 = fadd float %887, %893, !dbg !90
  %905 = fmul float %897, %897, !dbg !91
  %906 = fmul float %877, %905, !dbg !92
  %907 = fmul float %901, %906, !dbg !93
  %908 = fadd float %904, %907, !dbg !94
  %909 = bitcast float %903 to i32, !dbg !80
  %910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 4, i32 31), !dbg !80
  %911 = bitcast i32 %910 to float, !dbg !80
  %912 = bitcast float %908 to i32, !dbg !80
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 4, i32 31), !dbg !80
  %914 = bitcast i32 %913 to float, !dbg !80
  %915 = bitcast float %898 to i32, !dbg !80
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 4, i32 31), !dbg !80
  %917 = bitcast i32 %916 to float, !dbg !80
  %918 = fsub float %911, %903, !dbg !82
  %919 = fadd float %898, %917, !dbg !84
  %920 = fcmp oeq float %919, 0.000000e+00, !dbg !85
  %921 = tail call float @llvm.nvvm.div.full(float %917, float %919), !dbg !86
  %922 = select i1 %920, float 0.000000e+00, float %921, !dbg !87
  %923 = fmul float %918, %922, !dbg !88
  %924 = fadd float %903, %923, !dbg !89
  %925 = fadd float %908, %914, !dbg !90
  %926 = fmul float %918, %918, !dbg !91
  %927 = fmul float %898, %926, !dbg !92
  %928 = fmul float %922, %927, !dbg !93
  %929 = fadd float %925, %928, !dbg !94
  %930 = bitcast float %924 to i32, !dbg !80
  %931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %930, i32 2, i32 31), !dbg !80
  %932 = bitcast i32 %931 to float, !dbg !80
  %933 = bitcast float %929 to i32, !dbg !80
  %934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %933, i32 2, i32 31), !dbg !80
  %935 = bitcast i32 %934 to float, !dbg !80
  %936 = bitcast float %919 to i32, !dbg !80
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 2, i32 31), !dbg !80
  %938 = bitcast i32 %937 to float, !dbg !80
  %939 = fsub float %932, %924, !dbg !82
  %940 = fadd float %919, %938, !dbg !84
  %941 = fcmp oeq float %940, 0.000000e+00, !dbg !85
  %942 = tail call float @llvm.nvvm.div.full(float %938, float %940), !dbg !86
  %943 = select i1 %941, float 0.000000e+00, float %942, !dbg !87
  %944 = fmul float %939, %943, !dbg !88
  %945 = fadd float %924, %944, !dbg !89
  %946 = fadd float %929, %935, !dbg !90
  %947 = fmul float %939, %939, !dbg !91
  %948 = fmul float %919, %947, !dbg !92
  %949 = fmul float %943, %948, !dbg !93
  %950 = fadd float %946, %949, !dbg !94
  %951 = bitcast float %945 to i32, !dbg !80
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 1, i32 31), !dbg !80
  %953 = bitcast i32 %952 to float, !dbg !80
  %954 = bitcast float %950 to i32, !dbg !80
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 1, i32 31), !dbg !80
  %956 = bitcast i32 %955 to float, !dbg !80
  %957 = bitcast float %940 to i32, !dbg !80
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 1, i32 31), !dbg !80
  %959 = bitcast i32 %958 to float, !dbg !80
  %960 = fsub float %953, %945, !dbg !82
  %961 = fadd float %940, %959, !dbg !84
  %962 = fcmp oeq float %961, 0.000000e+00, !dbg !85
  %963 = tail call float @llvm.nvvm.div.full(float %959, float %961), !dbg !86
  %964 = select i1 %962, float 0.000000e+00, float %963, !dbg !87
  %965 = fmul float %960, %964, !dbg !88
  %966 = fadd float %945, %965, !dbg !89
  %967 = fadd float %950, %956, !dbg !90
  %968 = fmul float %960, %960, !dbg !91
  %969 = fmul float %940, %968, !dbg !92
  %970 = fmul float %964, %969, !dbg !93
  %971 = fadd float %967, %970, !dbg !94
  %972 = bitcast float %716 to i32, !dbg !80
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 16, i32 31), !dbg !80
  %974 = bitcast i32 %973 to float, !dbg !80
  %975 = bitcast float %721 to i32, !dbg !80
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %975, i32 16, i32 31), !dbg !80
  %977 = bitcast i32 %976 to float, !dbg !80
  %978 = bitcast float %711 to i32, !dbg !80
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 16, i32 31), !dbg !80
  %980 = bitcast i32 %979 to float, !dbg !80
  %981 = fsub float %974, %716, !dbg !82
  %982 = fadd float %711, %980, !dbg !84
  %983 = fcmp oeq float %982, 0.000000e+00, !dbg !85
  %984 = tail call float @llvm.nvvm.div.full(float %980, float %982), !dbg !86
  %985 = select i1 %983, float 0.000000e+00, float %984, !dbg !87
  %986 = fmul float %981, %985, !dbg !88
  %987 = fadd float %716, %986, !dbg !89
  %988 = fadd float %721, %977, !dbg !90
  %989 = fmul float %981, %981, !dbg !91
  %990 = fmul float %711, %989, !dbg !92
  %991 = fmul float %990, %985, !dbg !93
  %992 = fadd float %988, %991, !dbg !94
  %993 = bitcast float %987 to i32, !dbg !80
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 8, i32 31), !dbg !80
  %995 = bitcast i32 %994 to float, !dbg !80
  %996 = bitcast float %992 to i32, !dbg !80
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 8, i32 31), !dbg !80
  %998 = bitcast i32 %997 to float, !dbg !80
  %999 = bitcast float %982 to i32, !dbg !80
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 8, i32 31), !dbg !80
  %1001 = bitcast i32 %1000 to float, !dbg !80
  %1002 = fsub float %995, %987, !dbg !82
  %1003 = fadd float %982, %1001, !dbg !84
  %1004 = fcmp oeq float %1003, 0.000000e+00, !dbg !85
  %1005 = tail call float @llvm.nvvm.div.full(float %1001, float %1003), !dbg !86
  %1006 = select i1 %1004, float 0.000000e+00, float %1005, !dbg !87
  %1007 = fmul float %1002, %1006, !dbg !88
  %1008 = fadd float %987, %1007, !dbg !89
  %1009 = fadd float %992, %998, !dbg !90
  %1010 = fmul float %1002, %1002, !dbg !91
  %1011 = fmul float %982, %1010, !dbg !92
  %1012 = fmul float %1006, %1011, !dbg !93
  %1013 = fadd float %1009, %1012, !dbg !94
  %1014 = bitcast float %1008 to i32, !dbg !80
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 4, i32 31), !dbg !80
  %1016 = bitcast i32 %1015 to float, !dbg !80
  %1017 = bitcast float %1013 to i32, !dbg !80
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 4, i32 31), !dbg !80
  %1019 = bitcast i32 %1018 to float, !dbg !80
  %1020 = bitcast float %1003 to i32, !dbg !80
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 4, i32 31), !dbg !80
  %1022 = bitcast i32 %1021 to float, !dbg !80
  %1023 = fsub float %1016, %1008, !dbg !82
  %1024 = fadd float %1003, %1022, !dbg !84
  %1025 = fcmp oeq float %1024, 0.000000e+00, !dbg !85
  %1026 = tail call float @llvm.nvvm.div.full(float %1022, float %1024), !dbg !86
  %1027 = select i1 %1025, float 0.000000e+00, float %1026, !dbg !87
  %1028 = fmul float %1023, %1027, !dbg !88
  %1029 = fadd float %1008, %1028, !dbg !89
  %1030 = fadd float %1013, %1019, !dbg !90
  %1031 = fmul float %1023, %1023, !dbg !91
  %1032 = fmul float %1003, %1031, !dbg !92
  %1033 = fmul float %1027, %1032, !dbg !93
  %1034 = fadd float %1030, %1033, !dbg !94
  %1035 = bitcast float %1029 to i32, !dbg !80
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 2, i32 31), !dbg !80
  %1037 = bitcast i32 %1036 to float, !dbg !80
  %1038 = bitcast float %1034 to i32, !dbg !80
  %1039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1038, i32 2, i32 31), !dbg !80
  %1040 = bitcast i32 %1039 to float, !dbg !80
  %1041 = bitcast float %1024 to i32, !dbg !80
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1041, i32 2, i32 31), !dbg !80
  %1043 = bitcast i32 %1042 to float, !dbg !80
  %1044 = fsub float %1037, %1029, !dbg !82
  %1045 = fadd float %1024, %1043, !dbg !84
  %1046 = fcmp oeq float %1045, 0.000000e+00, !dbg !85
  %1047 = tail call float @llvm.nvvm.div.full(float %1043, float %1045), !dbg !86
  %1048 = select i1 %1046, float 0.000000e+00, float %1047, !dbg !87
  %1049 = fmul float %1044, %1048, !dbg !88
  %1050 = fadd float %1029, %1049, !dbg !89
  %1051 = fadd float %1034, %1040, !dbg !90
  %1052 = fmul float %1044, %1044, !dbg !91
  %1053 = fmul float %1024, %1052, !dbg !92
  %1054 = fmul float %1048, %1053, !dbg !93
  %1055 = fadd float %1051, %1054, !dbg !94
  %1056 = bitcast float %1050 to i32, !dbg !80
  %1057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1056, i32 1, i32 31), !dbg !80
  %1058 = bitcast i32 %1057 to float, !dbg !80
  %1059 = bitcast float %1055 to i32, !dbg !80
  %1060 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1059, i32 1, i32 31), !dbg !80
  %1061 = bitcast i32 %1060 to float, !dbg !80
  %1062 = bitcast float %1045 to i32, !dbg !80
  %1063 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1062, i32 1, i32 31), !dbg !80
  %1064 = bitcast i32 %1063 to float, !dbg !80
  %1065 = fsub float %1058, %1050, !dbg !82
  %1066 = fadd float %1045, %1064, !dbg !84
  %1067 = fcmp oeq float %1066, 0.000000e+00, !dbg !85
  %1068 = tail call float @llvm.nvvm.div.full(float %1064, float %1066), !dbg !86
  %1069 = select i1 %1067, float 0.000000e+00, float %1068, !dbg !87
  %1070 = fmul float %1065, %1069, !dbg !88
  %1071 = fadd float %1050, %1070, !dbg !89
  %1072 = fadd float %1055, %1061, !dbg !90
  %1073 = fmul float %1065, %1065, !dbg !91
  %1074 = fmul float %1045, %1073, !dbg !92
  %1075 = fmul float %1069, %1074, !dbg !93
  %1076 = fadd float %1072, %1075, !dbg !94
  %1077 = bitcast float %756 to i32, !dbg !80
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1077, i32 16, i32 31), !dbg !80
  %1079 = bitcast i32 %1078 to float, !dbg !80
  %1080 = bitcast float %761 to i32, !dbg !80
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 16, i32 31), !dbg !80
  %1082 = bitcast i32 %1081 to float, !dbg !80
  %1083 = bitcast float %751 to i32, !dbg !80
  %1084 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1083, i32 16, i32 31), !dbg !80
  %1085 = bitcast i32 %1084 to float, !dbg !80
  %1086 = fsub float %1079, %756, !dbg !82
  %1087 = fadd float %751, %1085, !dbg !84
  %1088 = fcmp oeq float %1087, 0.000000e+00, !dbg !85
  %1089 = tail call float @llvm.nvvm.div.full(float %1085, float %1087), !dbg !86
  %1090 = select i1 %1088, float 0.000000e+00, float %1089, !dbg !87
  %1091 = fmul float %1086, %1090, !dbg !88
  %1092 = fadd float %756, %1091, !dbg !89
  %1093 = fadd float %761, %1082, !dbg !90
  %1094 = fmul float %1086, %1086, !dbg !91
  %1095 = fmul float %751, %1094, !dbg !92
  %1096 = fmul float %1095, %1090, !dbg !93
  %1097 = fadd float %1093, %1096, !dbg !94
  %1098 = bitcast float %1092 to i32, !dbg !80
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 8, i32 31), !dbg !80
  %1100 = bitcast i32 %1099 to float, !dbg !80
  %1101 = bitcast float %1097 to i32, !dbg !80
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 8, i32 31), !dbg !80
  %1103 = bitcast i32 %1102 to float, !dbg !80
  %1104 = bitcast float %1087 to i32, !dbg !80
  %1105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1104, i32 8, i32 31), !dbg !80
  %1106 = bitcast i32 %1105 to float, !dbg !80
  %1107 = fsub float %1100, %1092, !dbg !82
  %1108 = fadd float %1087, %1106, !dbg !84
  %1109 = fcmp oeq float %1108, 0.000000e+00, !dbg !85
  %1110 = tail call float @llvm.nvvm.div.full(float %1106, float %1108), !dbg !86
  %1111 = select i1 %1109, float 0.000000e+00, float %1110, !dbg !87
  %1112 = fmul float %1107, %1111, !dbg !88
  %1113 = fadd float %1092, %1112, !dbg !89
  %1114 = fadd float %1097, %1103, !dbg !90
  %1115 = fmul float %1107, %1107, !dbg !91
  %1116 = fmul float %1087, %1115, !dbg !92
  %1117 = fmul float %1111, %1116, !dbg !93
  %1118 = fadd float %1114, %1117, !dbg !94
  %1119 = bitcast float %1113 to i32, !dbg !80
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 4, i32 31), !dbg !80
  %1121 = bitcast i32 %1120 to float, !dbg !80
  %1122 = bitcast float %1118 to i32, !dbg !80
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 4, i32 31), !dbg !80
  %1124 = bitcast i32 %1123 to float, !dbg !80
  %1125 = bitcast float %1108 to i32, !dbg !80
  %1126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1125, i32 4, i32 31), !dbg !80
  %1127 = bitcast i32 %1126 to float, !dbg !80
  %1128 = fsub float %1121, %1113, !dbg !82
  %1129 = fadd float %1108, %1127, !dbg !84
  %1130 = fcmp oeq float %1129, 0.000000e+00, !dbg !85
  %1131 = tail call float @llvm.nvvm.div.full(float %1127, float %1129), !dbg !86
  %1132 = select i1 %1130, float 0.000000e+00, float %1131, !dbg !87
  %1133 = fmul float %1128, %1132, !dbg !88
  %1134 = fadd float %1113, %1133, !dbg !89
  %1135 = fadd float %1118, %1124, !dbg !90
  %1136 = fmul float %1128, %1128, !dbg !91
  %1137 = fmul float %1108, %1136, !dbg !92
  %1138 = fmul float %1132, %1137, !dbg !93
  %1139 = fadd float %1135, %1138, !dbg !94
  %1140 = bitcast float %1134 to i32, !dbg !80
  %1141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1140, i32 2, i32 31), !dbg !80
  %1142 = bitcast i32 %1141 to float, !dbg !80
  %1143 = bitcast float %1139 to i32, !dbg !80
  %1144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1143, i32 2, i32 31), !dbg !80
  %1145 = bitcast i32 %1144 to float, !dbg !80
  %1146 = bitcast float %1129 to i32, !dbg !80
  %1147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1146, i32 2, i32 31), !dbg !80
  %1148 = bitcast i32 %1147 to float, !dbg !80
  %1149 = fsub float %1142, %1134, !dbg !82
  %1150 = fadd float %1129, %1148, !dbg !84
  %1151 = fcmp oeq float %1150, 0.000000e+00, !dbg !85
  %1152 = tail call float @llvm.nvvm.div.full(float %1148, float %1150), !dbg !86
  %1153 = select i1 %1151, float 0.000000e+00, float %1152, !dbg !87
  %1154 = fmul float %1149, %1153, !dbg !88
  %1155 = fadd float %1134, %1154, !dbg !89
  %1156 = fadd float %1139, %1145, !dbg !90
  %1157 = fmul float %1149, %1149, !dbg !91
  %1158 = fmul float %1129, %1157, !dbg !92
  %1159 = fmul float %1153, %1158, !dbg !93
  %1160 = fadd float %1156, %1159, !dbg !94
  %1161 = bitcast float %1155 to i32, !dbg !80
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 1, i32 31), !dbg !80
  %1163 = bitcast i32 %1162 to float, !dbg !80
  %1164 = bitcast float %1160 to i32, !dbg !80
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 1, i32 31), !dbg !80
  %1166 = bitcast i32 %1165 to float, !dbg !80
  %1167 = bitcast float %1150 to i32, !dbg !80
  %1168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1167, i32 1, i32 31), !dbg !80
  %1169 = bitcast i32 %1168 to float, !dbg !80
  %1170 = fsub float %1163, %1155, !dbg !82
  %1171 = fadd float %1150, %1169, !dbg !84
  %1172 = fcmp oeq float %1171, 0.000000e+00, !dbg !85
  %1173 = tail call float @llvm.nvvm.div.full(float %1169, float %1171), !dbg !86
  %1174 = select i1 %1172, float 0.000000e+00, float %1173, !dbg !87
  %1175 = fmul float %1170, %1174, !dbg !88
  %1176 = fadd float %1155, %1175, !dbg !89
  %1177 = fadd float %1160, %1166, !dbg !90
  %1178 = fmul float %1170, %1170, !dbg !91
  %1179 = fmul float %1150, %1178, !dbg !92
  %1180 = fmul float %1174, %1179, !dbg !93
  %1181 = fadd float %1177, %1180, !dbg !94
  %1182 = icmp eq i32 %22, 0, !dbg !80
  %1183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !80
  %1184 = bitcast float %861 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, <1 x i32> %1184, i1 %1182) #5, !dbg !80
  %1185 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !80
  %1186 = bitcast float %866 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1185, <1 x i32> %1186, i1 %1182) #5, !dbg !80
  %1187 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !80
  %1188 = bitcast float %856 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1187, <1 x i32> %1188, i1 %1182) #5, !dbg !80
  %1189 = or disjoint i32 %21, 4, !dbg !80
  %1190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1189, !dbg !80
  %1191 = bitcast float %966 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1190, <1 x i32> %1191, i1 %1182) #5, !dbg !80
  %1192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1189, !dbg !80
  %1193 = bitcast float %971 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1192, <1 x i32> %1193, i1 %1182) #5, !dbg !80
  %1194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1189, !dbg !80
  %1195 = bitcast float %961 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1194, <1 x i32> %1195, i1 %1182) #5, !dbg !80
  %1196 = or disjoint i32 %21, 8, !dbg !80
  %1197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1196, !dbg !80
  %1198 = bitcast float %1071 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %1198, i1 %1182) #5, !dbg !80
  %1199 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1196, !dbg !80
  %1200 = bitcast float %1076 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1199, <1 x i32> %1200, i1 %1182) #5, !dbg !80
  %1201 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1196, !dbg !80
  %1202 = bitcast float %1066 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1201, <1 x i32> %1202, i1 %1182) #5, !dbg !80
  %1203 = or disjoint i32 %21, 12, !dbg !80
  %1204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1203, !dbg !80
  %1205 = bitcast float %1176 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1204, <1 x i32> %1205, i1 %1182) #5, !dbg !80
  %1206 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1203, !dbg !80
  %1207 = bitcast float %1181 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1206, <1 x i32> %1207, i1 %1182) #5, !dbg !80
  %1208 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1203, !dbg !80
  %1209 = bitcast float %1171 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1208, <1 x i32> %1209, i1 %1182) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1210 = icmp slt i32 %19, 16, !dbg !80
  %1211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1212 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1211, i1 %1210) #5, !dbg !80
  %1213 = bitcast i32 %1212 to float, !dbg !80
  %1214 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !80
  %1215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1214, i1 %1210) #5, !dbg !80
  %1216 = bitcast i32 %1215 to float, !dbg !80
  %1217 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %1218 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1217, i1 %1210) #5, !dbg !80
  %1219 = bitcast i32 %1218 to float, !dbg !80
  %1220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1212, i32 2, i32 31), !dbg !80
  %1221 = bitcast i32 %1220 to float, !dbg !80
  %1222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1215, i32 2, i32 31), !dbg !80
  %1223 = bitcast i32 %1222 to float, !dbg !80
  %1224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1218, i32 2, i32 31), !dbg !80
  %1225 = bitcast i32 %1224 to float, !dbg !80
  %1226 = fsub float %1221, %1213, !dbg !82
  %1227 = fadd float %1219, %1225, !dbg !84
  %1228 = fcmp oeq float %1227, 0.000000e+00, !dbg !85
  %1229 = tail call float @llvm.nvvm.div.full(float %1225, float %1227), !dbg !86
  %1230 = select i1 %1228, float 0.000000e+00, float %1229, !dbg !87
  %1231 = fmul float %1226, %1230, !dbg !88
  %1232 = fadd float %1231, %1213, !dbg !89
  %1233 = fadd float %1216, %1223, !dbg !90
  %1234 = fmul float %1226, %1226, !dbg !91
  %1235 = fmul float %1234, %1219, !dbg !92
  %1236 = fmul float %1235, %1230, !dbg !93
  %1237 = fadd float %1233, %1236, !dbg !94
  %1238 = bitcast float %1232 to i32, !dbg !80
  %1239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1238, i32 1, i32 31), !dbg !80
  %1240 = bitcast i32 %1239 to float, !dbg !80
  %1241 = bitcast float %1237 to i32, !dbg !80
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1241, i32 1, i32 31), !dbg !80
  %1243 = bitcast i32 %1242 to float, !dbg !80
  %1244 = bitcast float %1227 to i32, !dbg !80
  %1245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1244, i32 1, i32 31), !dbg !80
  %1246 = bitcast i32 %1245 to float, !dbg !80
  %1247 = fsub float %1240, %1232, !dbg !82
  %1248 = fadd float %1227, %1246, !dbg !84
  %1249 = fcmp oeq float %1248, 0.000000e+00, !dbg !85
  %1250 = tail call float @llvm.nvvm.div.full(float %1246, float %1248), !dbg !86
  %1251 = select i1 %1249, float 0.000000e+00, float %1250, !dbg !87
  %1252 = fmul float %1247, %1251, !dbg !88
  %1253 = fadd float %1232, %1252, !dbg !89
  %1254 = fadd float %1237, %1243, !dbg !90
  %1255 = fmul float %1247, %1247, !dbg !91
  %1256 = fmul float %1227, %1255, !dbg !92
  %1257 = fmul float %1251, %1256, !dbg !93
  %1258 = fadd float %1254, %1257, !dbg !94
  %1259 = icmp eq i32 %599, 0, !dbg !80
  %1260 = and i1 %1210, %1259, !dbg !80
  %1261 = bitcast float %1253 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1211, <1 x i32> %1261, i1 %1260) #5, !dbg !80
  %1262 = bitcast float %1258 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1214, <1 x i32> %1262, i1 %1260) #5, !dbg !80
  %1263 = bitcast float %1248 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1217, <1 x i32> %1263, i1 %1260) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1264 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1265 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !80
  %1266 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %1267 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !80
  %1268 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %1269 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 80), align 16, !dbg !80
  %1270 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %1271 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 112), align 16, !dbg !80
  %1272 = tail call float @llvm.nvvm.div.full(float %1268, float 3.072000e+03), !dbg !95
  %1273 = tail call float @llvm.nvvm.div.full(float %1269, float 3.072000e+03), !dbg !95
  %1274 = tail call float @llvm.nvvm.div.full(float %1270, float 3.072000e+03), !dbg !95
  %1275 = tail call float @llvm.nvvm.div.full(float %1271, float 3.072000e+03), !dbg !95
  %1276 = fadd float %1272, 0x3EB0C6F7A0000000, !dbg !96
  %1277 = fadd float %1273, 0x3EB0C6F7A0000000, !dbg !96
  %1278 = fadd float %1274, 0x3EB0C6F7A0000000, !dbg !96
  %1279 = fadd float %1275, 0x3EB0C6F7A0000000, !dbg !96
  %1280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i170 = icmp eq i32 %1283, 0, !dbg !97
  br i1 %.not.i170, label %1286, label %1284, !dbg !97

1284:                                             ; preds = %__nv_rsqrtf.exit
  %1285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1276), !dbg !97
  br label %__nv_rsqrtf.exit172, !dbg !97

1286:                                             ; preds = %__nv_rsqrtf.exit
  %1287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1276), !dbg !97
  br label %__nv_rsqrtf.exit172, !dbg !97

__nv_rsqrtf.exit172:                              ; preds = %1284, %1286
  %.0.i171 = phi float [ %1285, %1284 ], [ %1287, %1286 ], !dbg !97
  %1288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i182 = icmp eq i32 %1291, 0, !dbg !97
  br i1 %.not.i182, label %1294, label %1292, !dbg !97

1292:                                             ; preds = %__nv_rsqrtf.exit172
  %1293 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1277), !dbg !97
  br label %__nv_rsqrtf.exit184, !dbg !97

1294:                                             ; preds = %__nv_rsqrtf.exit172
  %1295 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1277), !dbg !97
  br label %__nv_rsqrtf.exit184, !dbg !97

__nv_rsqrtf.exit184:                              ; preds = %1292, %1294
  %.0.i183 = phi float [ %1293, %1292 ], [ %1295, %1294 ], !dbg !97
  %1296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i194 = icmp eq i32 %1299, 0, !dbg !97
  br i1 %.not.i194, label %1302, label %1300, !dbg !97

1300:                                             ; preds = %__nv_rsqrtf.exit184
  %1301 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1278), !dbg !97
  br label %__nv_rsqrtf.exit196, !dbg !97

1302:                                             ; preds = %__nv_rsqrtf.exit184
  %1303 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1278), !dbg !97
  br label %__nv_rsqrtf.exit196, !dbg !97

__nv_rsqrtf.exit196:                              ; preds = %1300, %1302
  %.0.i195 = phi float [ %1301, %1300 ], [ %1303, %1302 ], !dbg !97
  %1304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i206 = icmp eq i32 %1307, 0, !dbg !97
  br i1 %.not.i206, label %1310, label %1308, !dbg !97

1308:                                             ; preds = %__nv_rsqrtf.exit196
  %1309 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1279), !dbg !97
  br label %__nv_rsqrtf.exit208, !dbg !97

1310:                                             ; preds = %__nv_rsqrtf.exit196
  %1311 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1279), !dbg !97
  br label %__nv_rsqrtf.exit208, !dbg !97

__nv_rsqrtf.exit208:                              ; preds = %1308, %1310
  %.0.i207 = phi float [ %1309, %1308 ], [ %1311, %1310 ], !dbg !97
  %1312 = lshr i32 %33, 6
  %1313 = and i32 %1312, 24
  %1314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1313
  %1315 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1314, i32 %98
  %1316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1314, i32 %102
  %1317 = insertelement <2 x i1> poison, i1 %28, i64 0, !dbg !98
  %1318 = shufflevector <2 x i1> %1317, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %1319 = insertelement <2 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1320 = shufflevector <2 x float> %1319, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %1321 = insertelement <2 x float> poison, float %1264, i64 0, !dbg !100
  %1322 = shufflevector <2 x float> %1321, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1323 = insertelement <4 x i1> poison, i1 %28, i64 0, !dbg !101
  %1324 = shufflevector <4 x i1> %1323, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !101
  %1325 = insertelement <16 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1326 = insertelement <16 x float> %1325, float %.0.i183, i64 1, !dbg !99
  %1327 = insertelement <16 x float> %1326, float %.0.i195, i64 2, !dbg !99
  %1328 = insertelement <16 x float> %1327, float %.0.i207, i64 3, !dbg !99
  %1329 = shufflevector <16 x float> %1328, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !99
  %1330 = insertelement <16 x float> poison, float %1264, i64 0, !dbg !100
  %1331 = insertelement <16 x float> %1330, float %1265, i64 1, !dbg !100
  %1332 = insertelement <16 x float> %1331, float %1266, i64 2, !dbg !100
  %1333 = insertelement <16 x float> %1332, float %1267, i64 3, !dbg !100
  %1334 = shufflevector <16 x float> %1333, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !100
  %invariant.op = or i32 %32, 12288, !dbg !102
  br label %1335, !dbg !102

1335:                                             ; preds = %__nv_rsqrtf.exit208, %1335
  %indvars.iv322 = phi i64 [ 0, %__nv_rsqrtf.exit208 ], [ %indvars.iv.next323, %1335 ]
  %1336 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1497, %1335 ]
  %1337 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1498, %1335 ]
  %1338 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1491, %1335 ]
  %1339 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1516, %1335 ]
  %1340 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1517, %1335 ]
  %1341 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit208 ], [ %1518, %1335 ]
  %1342 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1499, %1335 ]
  %1343 = or disjoint i64 %indvars.iv322, %128, !dbg !103
  %1344 = trunc nuw nsw i64 %indvars.iv322 to i32, !dbg !104
  %1345 = add i32 %94, %1344, !dbg !104
  %1346 = add i32 %96, %1344, !dbg !104
  %1347 = trunc i64 %indvars.iv322 to i32, !dbg !104
  %1348 = or disjoint i32 %39, %1347, !dbg !104
  %1349 = add i32 %1348, %78, !dbg !104
  %1350 = add i32 %1348, %79, !dbg !104
  %1351 = sext i32 %1345 to i64, !dbg !105
  %1352 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1351, !dbg !105
  %1353 = sext i32 %1346 to i64, !dbg !105
  %1354 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1353, !dbg !105
  %1355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1352, i1 %27) #5, !dbg !106
  %1356 = extractvalue { i32, i32, i32, i32 } %1355, 0, !dbg !106
  %1357 = extractvalue { i32, i32, i32, i32 } %1355, 1, !dbg !106
  %1358 = extractvalue { i32, i32, i32, i32 } %1355, 2, !dbg !106
  %1359 = extractvalue { i32, i32, i32, i32 } %1355, 3, !dbg !106
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1354, i1 %27) #5, !dbg !106
  %1361 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !106
  %1362 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !106
  %1363 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !106
  %1364 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1315, i32 %1356, i32 %1357, i32 %1358, i32 %1359, i1 true) #5, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1316, i32 %1361, i32 %1362, i32 %1363, i32 %1364, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1365 = load bfloat, ptr addrspace(3) %107, align 8, !dbg !99
  %1366 = load bfloat, ptr addrspace(3) %132, align 2, !dbg !99
  %1367 = fpext bfloat %1365 to float, !dbg !107
  %1368 = fpext bfloat %1366 to float, !dbg !107
  %.reass.reass.reass = or i32 %1344, %invariant.op
  %1369 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1370 = getelementptr float, ptr addrspace(1) %1, i64 %1369, !dbg !108
  %1371 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1369, !dbg !109
  %1372 = add nuw nsw i64 %1343, 9216, !dbg !110
  %1373 = getelementptr float, ptr addrspace(1) %1, i64 %1372, !dbg !111
  %1374 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1372, !dbg !112
  %1375 = fsub float %1367, %1267, !dbg !100
  %1376 = fsub float %1368, %1267, !dbg !100
  %1377 = fmul float %.0.i207, %1375, !dbg !99
  %1378 = fmul float %.0.i207, %1376, !dbg !99
  %1379 = fcmp uno <2 x float> %1338, zeroinitializer, !dbg !113
  %1380 = fcmp uno <16 x float> %1341, zeroinitializer, !dbg !115
  %1381 = fcmp uno <4 x float> %1342, zeroinitializer, !dbg !113
  %1382 = fcmp uno float %1336, 0.000000e+00, !dbg !113
  %1383 = fcmp uno float %1337, 0.000000e+00, !dbg !113
  %1384 = load <2 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !99
  %1385 = fpext <2 x bfloat> %1384 to <2 x float>, !dbg !107
  %1386 = fsub <2 x float> %1385, %1322, !dbg !100
  %1387 = fmul <2 x float> %1320, %1386, !dbg !99
  %1388 = fcmp uno <4 x float> %1339, zeroinitializer, !dbg !115
  %1389 = fcmp uno <4 x float> %1340, zeroinitializer, !dbg !115
  %1390 = load <2 x bfloat>, ptr addrspace(3) %129, align 4, !dbg !99
  %1391 = load <2 x bfloat>, ptr addrspace(3) %105, align 8, !dbg !99
  %1392 = load <2 x bfloat>, ptr addrspace(3) %130, align 4, !dbg !99
  %1393 = load <2 x bfloat>, ptr addrspace(3) %106, align 8, !dbg !99
  %1394 = load <2 x bfloat>, ptr addrspace(3) %131, align 4, !dbg !99
  %1395 = load <2 x bfloat>, ptr addrspace(3) %133, align 4, !dbg !99
  %1396 = shufflevector <2 x bfloat> %1390, <2 x bfloat> %1392, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1397 = shufflevector <2 x bfloat> %1394, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1398 = shufflevector <16 x bfloat> %1396, <16 x bfloat> %1397, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1399 = shufflevector <2 x bfloat> %1395, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1400 = shufflevector <16 x bfloat> %1398, <16 x bfloat> %1399, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1401 = shufflevector <2 x bfloat> %1390, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1402 = shufflevector <16 x bfloat> %1400, <16 x bfloat> %1401, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1403 = shufflevector <2 x bfloat> %1391, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1404 = shufflevector <16 x bfloat> %1402, <16 x bfloat> %1403, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1405 = shufflevector <2 x bfloat> %1392, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1406 = shufflevector <16 x bfloat> %1404, <16 x bfloat> %1405, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !107
  %1407 = shufflevector <2 x bfloat> %1393, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1408 = shufflevector <16 x bfloat> %1406, <16 x bfloat> %1407, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !107
  %1409 = fpext <16 x bfloat> %1408 to <16 x float>, !dbg !107
  %1410 = fsub <16 x float> %1409, %1334, !dbg !100
  %1411 = fmul <16 x float> %1329, %1410, !dbg !99
  %1412 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1370, i1 true) #5, !dbg !117
  %1413 = extractvalue { i32, i32, i32, i32 } %1412, 0, !dbg !117
  %1414 = extractvalue { i32, i32, i32, i32 } %1412, 1, !dbg !117
  %1415 = extractvalue { i32, i32, i32, i32 } %1412, 2, !dbg !117
  %1416 = extractvalue { i32, i32, i32, i32 } %1412, 3, !dbg !117
  %1417 = insertelement <2 x i32> poison, i32 %1413, i64 0, !dbg !117
  %1418 = insertelement <2 x i32> %1417, i32 %1414, i64 1, !dbg !117
  %1419 = bitcast <2 x i32> %1418 to <2 x float>, !dbg !117
  %1420 = insertelement <2 x i32> poison, i32 %1415, i64 0, !dbg !117
  %1421 = insertelement <2 x i32> %1420, i32 %1416, i64 1, !dbg !117
  %1422 = bitcast <2 x i32> %1421 to <2 x float>, !dbg !117
  %1423 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1371, i1 true) #5, !dbg !118
  %1424 = extractvalue { i32, i32 } %1423, 0, !dbg !118
  %1425 = bitcast i32 %1424 to <2 x bfloat>, !dbg !118
  %1426 = extractvalue { i32, i32 } %1423, 1, !dbg !118
  %1427 = bitcast i32 %1426 to <2 x bfloat>, !dbg !118
  %1428 = fpext <2 x bfloat> %1425 to <2 x float>, !dbg !119
  %1429 = fpext <2 x bfloat> %1427 to <2 x float>, !dbg !119
  %1430 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1373, i1 true) #5, !dbg !120
  %1431 = extractvalue { i32, i32, i32, i32 } %1430, 0, !dbg !120
  %1432 = extractvalue { i32, i32, i32, i32 } %1430, 1, !dbg !120
  %1433 = extractvalue { i32, i32, i32, i32 } %1430, 2, !dbg !120
  %1434 = extractvalue { i32, i32, i32, i32 } %1430, 3, !dbg !120
  %1435 = insertelement <2 x i32> poison, i32 %1431, i64 0, !dbg !120
  %1436 = insertelement <2 x i32> %1435, i32 %1432, i64 1, !dbg !120
  %1437 = bitcast <2 x i32> %1436 to <2 x float>, !dbg !120
  %1438 = insertelement <2 x i32> poison, i32 %1433, i64 0, !dbg !120
  %1439 = insertelement <2 x i32> %1438, i32 %1434, i64 1, !dbg !120
  %1440 = bitcast <2 x i32> %1439 to <2 x float>, !dbg !120
  %1441 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1374, i1 true) #5, !dbg !121
  %1442 = extractvalue { i32, i32 } %1441, 0, !dbg !121
  %1443 = bitcast i32 %1442 to <2 x bfloat>, !dbg !121
  %1444 = extractvalue { i32, i32 } %1441, 1, !dbg !121
  %1445 = bitcast i32 %1444 to <2 x bfloat>, !dbg !121
  %1446 = fpext <2 x bfloat> %1443 to <2 x float>, !dbg !122
  %1447 = fpext <2 x bfloat> %1445 to <2 x float>, !dbg !122
  %1448 = fadd <2 x float> %1419, %1428, !dbg !123
  %1449 = fadd <2 x float> %1422, %1429, !dbg !123
  %1450 = fadd <2 x float> %1448, splat (float 1.000000e+00), !dbg !124
  %1451 = fadd <2 x float> %1449, splat (float 1.000000e+00), !dbg !124
  %1452 = fmul <2 x float> %1387, %1450, !dbg !125
  %1453 = extractelement <2 x float> %1450, i64 0, !dbg !125
  %1454 = extractelement <2 x float> %1450, i64 1, !dbg !125
  %1455 = fmul float %1377, %1453, !dbg !125
  %1456 = fmul float %1378, %1454, !dbg !125
  %1457 = shufflevector <2 x float> %1450, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !125
  %1458 = shufflevector <2 x float> %1451, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !125
  %1459 = shufflevector <4 x float> %1458, <4 x float> %1457, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !125
  %1460 = shufflevector <4 x float> %1459, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !125
  %1461 = fmul <16 x float> %1411, %1460, !dbg !125
  %1462 = fadd <2 x float> %1437, %1446, !dbg !126
  %1463 = fadd <2 x float> %1440, %1447, !dbg !126
  %1464 = fadd <2 x float> %1452, %1462, !dbg !127
  %1465 = extractelement <2 x float> %1462, i64 0, !dbg !127
  %1466 = extractelement <2 x float> %1462, i64 1, !dbg !127
  %1467 = fadd float %1455, %1465, !dbg !127
  %1468 = fadd float %1456, %1466, !dbg !127
  %1469 = shufflevector <2 x float> %1462, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !127
  %1470 = shufflevector <2 x float> %1463, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !127
  %1471 = shufflevector <4 x float> %1470, <4 x float> %1469, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !127
  %1472 = shufflevector <4 x float> %1471, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !127
  %1473 = fadd <16 x float> %1461, %1472, !dbg !127
  %1474 = fcmp olt <2 x float> %1338, %1464, !dbg !128
  %1475 = extractelement <16 x float> %1473, i64 4, !dbg !129
  %1476 = extractelement <16 x float> %1473, i64 5, !dbg !129
  %1477 = fcmp olt float %1336, %1467, !dbg !128
  %1478 = fcmp olt float %1337, %1468, !dbg !128
  %1479 = extractelement <16 x float> %1473, i64 6, !dbg !129
  %1480 = extractelement <16 x float> %1473, i64 7, !dbg !129
  %1481 = or <2 x i1> %1379, %1474, !dbg !130
  %1482 = or i1 %1382, %1477, !dbg !130
  %1483 = or i1 %1383, %1478, !dbg !130
  %1484 = select <2 x i1> %1481, <2 x float> %1338, <2 x float> %1464, !dbg !131
  %1485 = select i1 %1482, float %1336, float %1467, !dbg !131
  %1486 = select i1 %1483, float %1337, float %1468, !dbg !131
  %1487 = shufflevector <16 x float> %1473, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !128
  %1488 = fcmp olt <4 x float> %1342, %1487, !dbg !128
  %1489 = or <4 x i1> %1381, %1488, !dbg !130
  %1490 = select <4 x i1> %1489, <4 x float> %1342, <4 x float> %1487, !dbg !131
  %1491 = select <2 x i1> %1318, <2 x float> %1484, <2 x float> %1338, !dbg !98
  %1492 = fcmp ogt <16 x float> %1341, %1473, !dbg !132
  %1493 = fcmp olt <16 x float> %1341, %1473, !dbg !132
  %1494 = shufflevector <16 x i1> %1492, <16 x i1> %1493, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !132
  %1495 = or <16 x i1> %1380, %1494, !dbg !133
  %1496 = select <16 x i1> %1495, <16 x float> %1341, <16 x float> %1473, !dbg !134
  %1497 = select i1 %28, float %1485, float %1336, !dbg !98
  %1498 = select i1 %28, float %1486, float %1337, !dbg !98
  %1499 = select <4 x i1> %1324, <4 x float> %1490, <4 x float> %1342, !dbg !98
  %1500 = extractelement <2 x float> %1464, i64 0, !dbg !129
  %1501 = extractelement <2 x float> %1464, i64 1, !dbg !129
  %1502 = shufflevector <2 x float> %1464, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !132
  %1503 = insertelement <4 x float> %1502, float %1467, i64 0, !dbg !132
  %1504 = shufflevector <16 x float> %1473, <16 x float> poison, <4 x i32> <i32 poison, i32 14, i32 10, i32 poison>, !dbg !132
  %1505 = shufflevector <4 x float> %1503, <4 x float> %1504, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !132
  %1506 = fcmp ogt <4 x float> %1339, %1505, !dbg !132
  %1507 = shufflevector <2 x float> %1464, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !132
  %1508 = insertelement <4 x float> %1507, float %1468, i64 0, !dbg !132
  %1509 = shufflevector <16 x float> %1473, <16 x float> poison, <4 x i32> <i32 poison, i32 15, i32 11, i32 poison>, !dbg !132
  %1510 = shufflevector <4 x float> %1508, <4 x float> %1509, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !132
  %1511 = fcmp ogt <4 x float> %1340, %1510, !dbg !132
  %1512 = or <4 x i1> %1388, %1506, !dbg !133
  %1513 = or <4 x i1> %1389, %1511, !dbg !133
  %1514 = select <4 x i1> %1512, <4 x float> %1339, <4 x float> %1505, !dbg !134
  %1515 = select <4 x i1> %1513, <4 x float> %1340, <4 x float> %1510, !dbg !134
  %1516 = select <4 x i1> %1324, <4 x float> %1514, <4 x float> %1339, !dbg !101
  %1517 = select <4 x i1> %1324, <4 x float> %1515, <4 x float> %1340, !dbg !101
  %1518 = select <16 x i1> %135, <16 x float> %1496, <16 x float> %1341, !dbg !101
  %1519 = sext i32 %1349 to i64, !dbg !135
  %1520 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1519, !dbg !135
  %1521 = sext i32 %1350 to i64, !dbg !135
  %1522 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1521, !dbg !135
  %1523 = fptrunc float %1500 to bfloat, !dbg !129
  %1524 = fptrunc float %1501 to bfloat, !dbg !129
  %1525 = extractelement <16 x float> %1473, i64 0, !dbg !129
  %1526 = fptrunc float %1525 to bfloat, !dbg !129
  %1527 = extractelement <16 x float> %1473, i64 1, !dbg !129
  %1528 = fptrunc float %1527 to bfloat, !dbg !129
  %1529 = extractelement <16 x float> %1473, i64 10, !dbg !129
  %1530 = fptrunc float %1529 to bfloat, !dbg !129
  %1531 = extractelement <16 x float> %1473, i64 11, !dbg !129
  %1532 = fptrunc float %1531 to bfloat, !dbg !129
  %1533 = extractelement <16 x float> %1473, i64 2, !dbg !129
  %1534 = fptrunc float %1533 to bfloat, !dbg !129
  %1535 = extractelement <16 x float> %1473, i64 3, !dbg !129
  %1536 = fptrunc float %1535 to bfloat, !dbg !129
  %1537 = extractelement <16 x float> %1473, i64 14, !dbg !129
  %1538 = fptrunc float %1537 to bfloat, !dbg !129
  %1539 = extractelement <16 x float> %1473, i64 15, !dbg !129
  %1540 = fptrunc float %1539 to bfloat, !dbg !129
  %1541 = fptrunc float %1475 to bfloat, !dbg !129
  %1542 = fptrunc float %1476 to bfloat, !dbg !129
  %1543 = fptrunc float %1467 to bfloat, !dbg !129
  %1544 = fptrunc float %1468 to bfloat, !dbg !129
  %1545 = fptrunc float %1479 to bfloat, !dbg !129
  %1546 = fptrunc float %1480 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1547 = bitcast bfloat %1523 to i16, !dbg !129
  %1548 = bitcast bfloat %1524 to i16, !dbg !129
  %1549 = bitcast bfloat %1526 to i16, !dbg !129
  %1550 = bitcast bfloat %1528 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %104, i16 %1547, i16 %1548, i16 %1549, i16 %1550, i1 true) #5, !dbg !129
  %1551 = bitcast bfloat %1530 to i16, !dbg !129
  %1552 = bitcast bfloat %1532 to i16, !dbg !129
  %1553 = bitcast bfloat %1534 to i16, !dbg !129
  %1554 = bitcast bfloat %1536 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %105, i16 %1551, i16 %1552, i16 %1553, i16 %1554, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1555 = load <4 x i32>, ptr addrspace(3) %127, align 16, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1556 = bitcast bfloat %1538 to i16, !dbg !129
  %1557 = bitcast bfloat %1540 to i16, !dbg !129
  %1558 = bitcast bfloat %1541 to i16, !dbg !129
  %1559 = bitcast bfloat %1542 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %104, i16 %1556, i16 %1557, i16 %1558, i16 %1559, i1 true) #5, !dbg !129
  %1560 = bitcast bfloat %1543 to i16, !dbg !129
  %1561 = bitcast bfloat %1544 to i16, !dbg !129
  %1562 = bitcast bfloat %1545 to i16, !dbg !129
  %1563 = bitcast bfloat %1546 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %105, i16 %1560, i16 %1561, i16 %1562, i16 %1563, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1564 = load <4 x i32>, ptr addrspace(3) %127, align 16, !dbg !129
  %.extract = extractelement <4 x i32> %1555, i64 0, !dbg !129
  %.extract210 = extractelement <4 x i32> %1555, i64 1, !dbg !129
  %.extract212 = extractelement <4 x i32> %1555, i64 2, !dbg !129
  %.extract214 = extractelement <4 x i32> %1555, i64 3, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract210, i32 %.extract212, i32 %.extract214, ptr addrspace(1) %1520, i1 %29) #5, !dbg !129
  %.extract216 = extractelement <4 x i32> %1564, i64 0, !dbg !129
  %.extract218 = extractelement <4 x i32> %1564, i64 1, !dbg !129
  %.extract220 = extractelement <4 x i32> %1564, i64 2, !dbg !129
  %.extract222 = extractelement <4 x i32> %1564, i64 3, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract216, i32 %.extract218, i32 %.extract220, i32 %.extract222, ptr addrspace(1) %1522, i1 %30) #5, !dbg !129
  %indvars.iv.next323 = add nuw nsw i64 %indvars.iv322, 512, !dbg !102
  %1565 = icmp samesign ult i64 %indvars.iv322, 2560, !dbg !102
  br i1 %1565, label %1335, label %1566, !dbg !102

1566:                                             ; preds = %1335
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1567 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1491, <2 x i32> <i32 0, i32 2>, !dbg !138
  %1568 = fcmp olt <2 x float> %1567, %1491, !dbg !138
  %1569 = fcmp uno <2 x float> %1567, %1491, !dbg !138
  %shift = shufflevector <2 x i1> %1568, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %1570 = or <2 x i1> %shift, %1569, !dbg !139
  %1571 = extractelement <2 x i1> %1570, i64 0, !dbg !139
  %1572 = extractelement <2 x float> %1491, i64 0, !dbg !140
  %1573 = extractelement <2 x float> %1491, i64 1, !dbg !140
  %1574 = select i1 %1571, float %1572, float %1573, !dbg !140
  %1575 = extractelement <16 x float> %1518, i64 8, !dbg !138
  %1576 = fcmp olt float %1574, %1575, !dbg !138
  %1577 = fcmp uno float %1574, 0.000000e+00, !dbg !141
  %1578 = or i1 %1576, %1577, !dbg !139
  %1579 = select i1 %1578, float %1574, float %1575, !dbg !140
  %1580 = extractelement <16 x float> %1518, i64 9, !dbg !138
  %1581 = fcmp olt float %1579, %1580, !dbg !138
  %1582 = fcmp uno float %1579, 0.000000e+00, !dbg !141
  %1583 = or i1 %1581, %1582, !dbg !139
  %1584 = select i1 %1583, float %1579, float %1580, !dbg !140
  %1585 = extractelement <16 x float> %1518, i64 10, !dbg !138
  %1586 = extractelement <16 x float> %1518, i64 11, !dbg !138
  %1587 = fcmp olt float %1585, %1586, !dbg !138
  %1588 = fcmp uno float %1585, 0.000000e+00, !dbg !141
  %1589 = or i1 %1587, %1588, !dbg !139
  %1590 = select i1 %1589, float %1585, float %1586, !dbg !140
  %1591 = extractelement <16 x float> %1518, i64 12, !dbg !138
  %1592 = fcmp olt float %1590, %1591, !dbg !138
  %1593 = fcmp uno float %1590, 0.000000e+00, !dbg !141
  %1594 = or i1 %1592, %1593, !dbg !139
  %1595 = select i1 %1594, float %1590, float %1591, !dbg !140
  %1596 = extractelement <16 x float> %1518, i64 13, !dbg !138
  %1597 = fcmp olt float %1595, %1596, !dbg !138
  %1598 = fcmp uno float %1595, 0.000000e+00, !dbg !141
  %1599 = or i1 %1597, %1598, !dbg !139
  %1600 = select i1 %1599, float %1595, float %1596, !dbg !140
  %1601 = extractelement <16 x float> %1518, i64 14, !dbg !138
  %1602 = extractelement <16 x float> %1518, i64 15, !dbg !138
  %1603 = fcmp olt float %1601, %1602, !dbg !138
  %1604 = fcmp uno float %1601, 0.000000e+00, !dbg !141
  %1605 = or i1 %1603, %1604, !dbg !139
  %1606 = select i1 %1605, float %1601, float %1602, !dbg !140
  %1607 = extractelement <4 x float> %1499, i64 0, !dbg !138
  %1608 = fcmp olt float %1606, %1607, !dbg !138
  %1609 = fcmp uno float %1606, 0.000000e+00, !dbg !141
  %1610 = or i1 %1608, %1609, !dbg !139
  %1611 = select i1 %1610, float %1606, float %1607, !dbg !140
  %1612 = extractelement <4 x float> %1499, i64 1, !dbg !138
  %1613 = fcmp olt float %1611, %1612, !dbg !138
  %1614 = fcmp uno float %1611, 0.000000e+00, !dbg !141
  %1615 = or i1 %1613, %1614, !dbg !139
  %1616 = select i1 %1615, float %1611, float %1612, !dbg !140
  %1617 = fcmp olt float %1497, %1498, !dbg !138
  %1618 = fcmp uno float %1497, 0.000000e+00, !dbg !141
  %1619 = or i1 %1617, %1618, !dbg !139
  %1620 = select i1 %1619, float %1497, float %1498, !dbg !140
  %1621 = extractelement <4 x float> %1499, i64 2, !dbg !138
  %1622 = fcmp olt float %1620, %1621, !dbg !138
  %1623 = fcmp uno float %1620, 0.000000e+00, !dbg !141
  %1624 = or i1 %1622, %1623, !dbg !139
  %1625 = select i1 %1624, float %1620, float %1621, !dbg !140
  %1626 = extractelement <4 x float> %1499, i64 3, !dbg !138
  %1627 = fcmp olt float %1625, %1626, !dbg !138
  %1628 = fcmp uno float %1625, 0.000000e+00, !dbg !141
  %1629 = or i1 %1627, %1628, !dbg !139
  %1630 = select i1 %1629, float %1625, float %1626, !dbg !140
  %1631 = bitcast float %1584 to i32, !dbg !136
  %1632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1631, i32 16, i32 31), !dbg !136
  %1633 = bitcast i32 %1632 to float, !dbg !136
  %1634 = fcmp olt float %1584, %1633, !dbg !138
  %1635 = fcmp uno float %1584, 0.000000e+00, !dbg !141
  %1636 = or i1 %1635, %1634, !dbg !139
  %1637 = select i1 %1636, float %1584, float %1633, !dbg !140
  %1638 = bitcast float %1637 to i32, !dbg !136
  %1639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1638, i32 8, i32 31), !dbg !136
  %1640 = bitcast i32 %1639 to float, !dbg !136
  %1641 = fcmp olt float %1637, %1640, !dbg !138
  %1642 = fcmp uno float %1637, 0.000000e+00, !dbg !141
  %1643 = or i1 %1641, %1642, !dbg !139
  %1644 = select i1 %1643, float %1637, float %1640, !dbg !140
  %1645 = bitcast float %1644 to i32, !dbg !136
  %1646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1645, i32 4, i32 31), !dbg !136
  %1647 = bitcast i32 %1646 to float, !dbg !136
  %1648 = fcmp olt float %1644, %1647, !dbg !138
  %1649 = fcmp uno float %1644, 0.000000e+00, !dbg !141
  %1650 = or i1 %1648, %1649, !dbg !139
  %1651 = select i1 %1650, float %1644, float %1647, !dbg !140
  %1652 = bitcast float %1651 to i32, !dbg !136
  %1653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1652, i32 2, i32 31), !dbg !136
  %1654 = bitcast i32 %1653 to float, !dbg !136
  %1655 = fcmp olt float %1651, %1654, !dbg !138
  %1656 = fcmp uno float %1651, 0.000000e+00, !dbg !141
  %1657 = or i1 %1655, %1656, !dbg !139
  %1658 = select i1 %1657, float %1651, float %1654, !dbg !140
  %1659 = bitcast float %1658 to i32, !dbg !136
  %1660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1659, i32 1, i32 31), !dbg !136
  %1661 = bitcast i32 %1660 to float, !dbg !136
  %1662 = fcmp olt float %1658, %1661, !dbg !138
  %1663 = fcmp uno float %1658, 0.000000e+00, !dbg !141
  %1664 = or i1 %1662, %1663, !dbg !139
  %1665 = bitcast float %1600 to i32, !dbg !136
  %1666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1665, i32 16, i32 31), !dbg !136
  %1667 = bitcast i32 %1666 to float, !dbg !136
  %1668 = fcmp olt float %1600, %1667, !dbg !138
  %1669 = fcmp uno float %1600, 0.000000e+00, !dbg !141
  %1670 = or i1 %1669, %1668, !dbg !139
  %1671 = select i1 %1670, float %1600, float %1667, !dbg !140
  %1672 = bitcast float %1671 to i32, !dbg !136
  %1673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1672, i32 8, i32 31), !dbg !136
  %1674 = bitcast i32 %1673 to float, !dbg !136
  %1675 = fcmp olt float %1671, %1674, !dbg !138
  %1676 = fcmp uno float %1671, 0.000000e+00, !dbg !141
  %1677 = or i1 %1675, %1676, !dbg !139
  %1678 = select i1 %1677, float %1671, float %1674, !dbg !140
  %1679 = bitcast float %1678 to i32, !dbg !136
  %1680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1679, i32 4, i32 31), !dbg !136
  %1681 = bitcast i32 %1680 to float, !dbg !136
  %1682 = fcmp olt float %1678, %1681, !dbg !138
  %1683 = fcmp uno float %1678, 0.000000e+00, !dbg !141
  %1684 = or i1 %1682, %1683, !dbg !139
  %1685 = select i1 %1684, float %1678, float %1681, !dbg !140
  %1686 = bitcast float %1685 to i32, !dbg !136
  %1687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1686, i32 2, i32 31), !dbg !136
  %1688 = bitcast i32 %1687 to float, !dbg !136
  %1689 = fcmp olt float %1685, %1688, !dbg !138
  %1690 = fcmp uno float %1685, 0.000000e+00, !dbg !141
  %1691 = or i1 %1689, %1690, !dbg !139
  %1692 = select i1 %1691, float %1685, float %1688, !dbg !140
  %1693 = bitcast float %1692 to i32, !dbg !136
  %1694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1693, i32 1, i32 31), !dbg !136
  %1695 = bitcast i32 %1694 to float, !dbg !136
  %1696 = fcmp olt float %1692, %1695, !dbg !138
  %1697 = fcmp uno float %1692, 0.000000e+00, !dbg !141
  %1698 = or i1 %1696, %1697, !dbg !139
  %1699 = bitcast float %1616 to i32, !dbg !136
  %1700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1699, i32 16, i32 31), !dbg !136
  %1701 = bitcast i32 %1700 to float, !dbg !136
  %1702 = fcmp olt float %1616, %1701, !dbg !138
  %1703 = fcmp uno float %1616, 0.000000e+00, !dbg !141
  %1704 = or i1 %1703, %1702, !dbg !139
  %1705 = select i1 %1704, float %1616, float %1701, !dbg !140
  %1706 = bitcast float %1705 to i32, !dbg !136
  %1707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1706, i32 8, i32 31), !dbg !136
  %1708 = bitcast i32 %1707 to float, !dbg !136
  %1709 = fcmp olt float %1705, %1708, !dbg !138
  %1710 = fcmp uno float %1705, 0.000000e+00, !dbg !141
  %1711 = or i1 %1709, %1710, !dbg !139
  %1712 = select i1 %1711, float %1705, float %1708, !dbg !140
  %1713 = bitcast float %1712 to i32, !dbg !136
  %1714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1713, i32 4, i32 31), !dbg !136
  %1715 = bitcast i32 %1714 to float, !dbg !136
  %1716 = fcmp olt float %1712, %1715, !dbg !138
  %1717 = fcmp uno float %1712, 0.000000e+00, !dbg !141
  %1718 = or i1 %1716, %1717, !dbg !139
  %1719 = select i1 %1718, float %1712, float %1715, !dbg !140
  %1720 = bitcast float %1719 to i32, !dbg !136
  %1721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1720, i32 2, i32 31), !dbg !136
  %1722 = bitcast i32 %1721 to float, !dbg !136
  %1723 = fcmp olt float %1719, %1722, !dbg !138
  %1724 = fcmp uno float %1719, 0.000000e+00, !dbg !141
  %1725 = or i1 %1723, %1724, !dbg !139
  %1726 = select i1 %1725, float %1719, float %1722, !dbg !140
  %1727 = bitcast float %1726 to i32, !dbg !136
  %1728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1727, i32 1, i32 31), !dbg !136
  %1729 = bitcast i32 %1728 to float, !dbg !136
  %1730 = fcmp olt float %1726, %1729, !dbg !138
  %1731 = fcmp uno float %1726, 0.000000e+00, !dbg !141
  %1732 = or i1 %1730, %1731, !dbg !139
  %1733 = bitcast float %1630 to i32, !dbg !136
  %1734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1733, i32 16, i32 31), !dbg !136
  %1735 = bitcast i32 %1734 to float, !dbg !136
  %1736 = fcmp olt float %1630, %1735, !dbg !138
  %1737 = fcmp uno float %1630, 0.000000e+00, !dbg !141
  %1738 = or i1 %1737, %1736, !dbg !139
  %1739 = select i1 %1738, float %1630, float %1735, !dbg !140
  %1740 = bitcast float %1739 to i32, !dbg !136
  %1741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1740, i32 8, i32 31), !dbg !136
  %1742 = bitcast i32 %1741 to float, !dbg !136
  %1743 = fcmp olt float %1739, %1742, !dbg !138
  %1744 = fcmp uno float %1739, 0.000000e+00, !dbg !141
  %1745 = or i1 %1743, %1744, !dbg !139
  %1746 = select i1 %1745, float %1739, float %1742, !dbg !140
  %1747 = bitcast float %1746 to i32, !dbg !136
  %1748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1747, i32 4, i32 31), !dbg !136
  %1749 = bitcast i32 %1748 to float, !dbg !136
  %1750 = fcmp olt float %1746, %1749, !dbg !138
  %1751 = fcmp uno float %1746, 0.000000e+00, !dbg !141
  %1752 = or i1 %1750, %1751, !dbg !139
  %1753 = select i1 %1752, float %1746, float %1749, !dbg !140
  %1754 = bitcast float %1753 to i32, !dbg !136
  %1755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1754, i32 2, i32 31), !dbg !136
  %1756 = bitcast i32 %1755 to float, !dbg !136
  %1757 = fcmp olt float %1753, %1756, !dbg !138
  %1758 = fcmp uno float %1753, 0.000000e+00, !dbg !141
  %1759 = or i1 %1757, %1758, !dbg !139
  %1760 = select i1 %1759, float %1753, float %1756, !dbg !140
  %1761 = bitcast float %1760 to i32, !dbg !136
  %1762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1761, i32 1, i32 31), !dbg !136
  %1763 = bitcast i32 %1762 to float, !dbg !136
  %1764 = fcmp olt float %1760, %1763, !dbg !138
  %1765 = fcmp uno float %1760, 0.000000e+00, !dbg !141
  %1766 = or i1 %1764, %1765, !dbg !139
  %1767 = select i1 %1664, i32 %1659, i32 %1660, !dbg !140
  %1768 = insertelement <1 x i32> poison, i32 %1767, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, <1 x i32> %1768, i1 %1182) #5, !dbg !136
  %1769 = select i1 %1698, i32 %1693, i32 %1694, !dbg !140
  %1770 = insertelement <1 x i32> poison, i32 %1769, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1190, <1 x i32> %1770, i1 %1182) #5, !dbg !136
  %1771 = select i1 %1732, i32 %1727, i32 %1728, !dbg !140
  %1772 = insertelement <1 x i32> poison, i32 %1771, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %1772, i1 %1182) #5, !dbg !136
  %1773 = select i1 %1766, i32 %1761, i32 %1762, !dbg !140
  %1774 = insertelement <1 x i32> poison, i32 %1773, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1204, <1 x i32> %1774, i1 %1182) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1775 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1211, i1 %1210) #5, !dbg !136
  %1776 = bitcast i32 %1775 to float, !dbg !136
  %1777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1775, i32 2, i32 31), !dbg !136
  %1778 = bitcast i32 %1777 to float, !dbg !136
  %1779 = fcmp olt float %1776, %1778, !dbg !138
  %1780 = fcmp uno float %1776, 0.000000e+00, !dbg !141
  %1781 = or i1 %1780, %1779, !dbg !139
  %1782 = select i1 %1781, float %1776, float %1778, !dbg !140
  %1783 = bitcast float %1782 to i32, !dbg !136
  %1784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1783, i32 1, i32 31), !dbg !136
  %1785 = bitcast i32 %1784 to float, !dbg !136
  %1786 = fcmp olt float %1782, %1785, !dbg !138
  %1787 = fcmp uno float %1782, 0.000000e+00, !dbg !141
  %1788 = or i1 %1786, %1787, !dbg !139
  %1789 = select i1 %1788, i32 %1783, i32 %1784, !dbg !140
  %1790 = insertelement <1 x i32> poison, i32 %1789, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1211, <1 x i32> %1790, i1 %1260) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1791 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %1792 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !136
  %1793 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !136
  %1794 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1795 = bitcast float %1791 to i32, !dbg !142
  %1796 = bitcast float %1792 to i32, !dbg !142
  %1797 = bitcast float %1793 to i32, !dbg !142
  %1798 = bitcast float %1794 to i32, !dbg !142
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1795, i32 %1796, i32 %1797, i32 %1798, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1799 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %599, !dbg !142
  %1800 = load float, ptr addrspace(3) %1799, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1801 = fcmp ogt <4 x float> %1516, %1517, !dbg !145
  %1802 = extractelement <4 x float> %1516, i64 3, !dbg !146
  %1803 = fcmp uno float %1802, 0.000000e+00, !dbg !146
  %1804 = extractelement <4 x i1> %1801, i64 3, !dbg !147
  %1805 = or i1 %1804, %1803, !dbg !147
  %1806 = extractelement <4 x float> %1517, i64 3, !dbg !148
  %1807 = select i1 %1805, float %1802, float %1806, !dbg !148
  %1808 = extractelement <16 x float> %1518, i64 0, !dbg !145
  %1809 = fcmp ogt float %1807, %1808, !dbg !145
  %1810 = fcmp uno float %1807, 0.000000e+00, !dbg !146
  %1811 = or i1 %1809, %1810, !dbg !147
  %1812 = select i1 %1811, float %1807, float %1808, !dbg !148
  %1813 = extractelement <16 x float> %1518, i64 1, !dbg !145
  %1814 = fcmp ogt float %1812, %1813, !dbg !145
  %1815 = fcmp uno float %1812, 0.000000e+00, !dbg !146
  %1816 = or i1 %1814, %1815, !dbg !147
  %1817 = select i1 %1816, float %1812, float %1813, !dbg !148
  %1818 = extractelement <4 x float> %1516, i64 2, !dbg !146
  %1819 = fcmp uno float %1818, 0.000000e+00, !dbg !146
  %1820 = extractelement <4 x i1> %1801, i64 2, !dbg !147
  %1821 = or i1 %1820, %1819, !dbg !147
  %1822 = extractelement <4 x float> %1517, i64 2, !dbg !148
  %1823 = select i1 %1821, float %1818, float %1822, !dbg !148
  %1824 = extractelement <16 x float> %1518, i64 2, !dbg !145
  %1825 = fcmp ogt float %1823, %1824, !dbg !145
  %1826 = fcmp uno float %1823, 0.000000e+00, !dbg !146
  %1827 = or i1 %1825, %1826, !dbg !147
  %1828 = select i1 %1827, float %1823, float %1824, !dbg !148
  %1829 = extractelement <16 x float> %1518, i64 3, !dbg !145
  %1830 = fcmp ogt float %1828, %1829, !dbg !145
  %1831 = fcmp uno float %1828, 0.000000e+00, !dbg !146
  %1832 = or i1 %1830, %1831, !dbg !147
  %1833 = select i1 %1832, float %1828, float %1829, !dbg !148
  %1834 = extractelement <4 x float> %1516, i64 1, !dbg !146
  %1835 = fcmp uno float %1834, 0.000000e+00, !dbg !146
  %1836 = extractelement <4 x i1> %1801, i64 1, !dbg !147
  %1837 = or i1 %1836, %1835, !dbg !147
  %1838 = extractelement <4 x float> %1517, i64 1, !dbg !148
  %1839 = select i1 %1837, float %1834, float %1838, !dbg !148
  %1840 = extractelement <16 x float> %1518, i64 4, !dbg !145
  %1841 = fcmp ogt float %1839, %1840, !dbg !145
  %1842 = fcmp uno float %1839, 0.000000e+00, !dbg !146
  %1843 = or i1 %1841, %1842, !dbg !147
  %1844 = select i1 %1843, float %1839, float %1840, !dbg !148
  %1845 = extractelement <16 x float> %1518, i64 5, !dbg !145
  %1846 = fcmp ogt float %1844, %1845, !dbg !145
  %1847 = fcmp uno float %1844, 0.000000e+00, !dbg !146
  %1848 = or i1 %1846, %1847, !dbg !147
  %1849 = select i1 %1848, float %1844, float %1845, !dbg !148
  %1850 = extractelement <4 x float> %1516, i64 0, !dbg !146
  %1851 = fcmp uno float %1850, 0.000000e+00, !dbg !146
  %1852 = extractelement <4 x i1> %1801, i64 0, !dbg !147
  %1853 = or i1 %1852, %1851, !dbg !147
  %1854 = extractelement <4 x float> %1517, i64 0, !dbg !148
  %1855 = select i1 %1853, float %1850, float %1854, !dbg !148
  %1856 = extractelement <16 x float> %1518, i64 6, !dbg !145
  %1857 = fcmp ogt float %1855, %1856, !dbg !145
  %1858 = fcmp uno float %1855, 0.000000e+00, !dbg !146
  %1859 = or i1 %1857, %1858, !dbg !147
  %1860 = select i1 %1859, float %1855, float %1856, !dbg !148
  %1861 = extractelement <16 x float> %1518, i64 7, !dbg !145
  %1862 = fcmp ogt float %1860, %1861, !dbg !145
  %1863 = fcmp uno float %1860, 0.000000e+00, !dbg !146
  %1864 = or i1 %1862, %1863, !dbg !147
  %1865 = select i1 %1864, float %1860, float %1861, !dbg !148
  %1866 = bitcast float %1817 to i32, !dbg !143
  %1867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1866, i32 16, i32 31), !dbg !143
  %1868 = bitcast i32 %1867 to float, !dbg !143
  %1869 = fcmp ogt float %1817, %1868, !dbg !145
  %1870 = fcmp uno float %1817, 0.000000e+00, !dbg !146
  %1871 = or i1 %1870, %1869, !dbg !147
  %1872 = select i1 %1871, float %1817, float %1868, !dbg !148
  %1873 = bitcast float %1872 to i32, !dbg !143
  %1874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1873, i32 8, i32 31), !dbg !143
  %1875 = bitcast i32 %1874 to float, !dbg !143
  %1876 = fcmp ogt float %1872, %1875, !dbg !145
  %1877 = fcmp uno float %1872, 0.000000e+00, !dbg !146
  %1878 = or i1 %1876, %1877, !dbg !147
  %1879 = select i1 %1878, float %1872, float %1875, !dbg !148
  %1880 = bitcast float %1879 to i32, !dbg !143
  %1881 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1880, i32 4, i32 31), !dbg !143
  %1882 = bitcast i32 %1881 to float, !dbg !143
  %1883 = fcmp ogt float %1879, %1882, !dbg !145
  %1884 = fcmp uno float %1879, 0.000000e+00, !dbg !146
  %1885 = or i1 %1883, %1884, !dbg !147
  %1886 = select i1 %1885, float %1879, float %1882, !dbg !148
  %1887 = bitcast float %1886 to i32, !dbg !143
  %1888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1887, i32 2, i32 31), !dbg !143
  %1889 = bitcast i32 %1888 to float, !dbg !143
  %1890 = fcmp ogt float %1886, %1889, !dbg !145
  %1891 = fcmp uno float %1886, 0.000000e+00, !dbg !146
  %1892 = or i1 %1890, %1891, !dbg !147
  %1893 = select i1 %1892, float %1886, float %1889, !dbg !148
  %1894 = bitcast float %1893 to i32, !dbg !143
  %1895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1894, i32 1, i32 31), !dbg !143
  %1896 = bitcast i32 %1895 to float, !dbg !143
  %1897 = fcmp ogt float %1893, %1896, !dbg !145
  %1898 = fcmp uno float %1893, 0.000000e+00, !dbg !146
  %1899 = or i1 %1897, %1898, !dbg !147
  %1900 = bitcast float %1833 to i32, !dbg !143
  %1901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1900, i32 16, i32 31), !dbg !143
  %1902 = bitcast i32 %1901 to float, !dbg !143
  %1903 = fcmp ogt float %1833, %1902, !dbg !145
  %1904 = fcmp uno float %1833, 0.000000e+00, !dbg !146
  %1905 = or i1 %1904, %1903, !dbg !147
  %1906 = select i1 %1905, float %1833, float %1902, !dbg !148
  %1907 = bitcast float %1906 to i32, !dbg !143
  %1908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1907, i32 8, i32 31), !dbg !143
  %1909 = bitcast i32 %1908 to float, !dbg !143
  %1910 = fcmp ogt float %1906, %1909, !dbg !145
  %1911 = fcmp uno float %1906, 0.000000e+00, !dbg !146
  %1912 = or i1 %1910, %1911, !dbg !147
  %1913 = select i1 %1912, float %1906, float %1909, !dbg !148
  %1914 = bitcast float %1913 to i32, !dbg !143
  %1915 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1914, i32 4, i32 31), !dbg !143
  %1916 = bitcast i32 %1915 to float, !dbg !143
  %1917 = fcmp ogt float %1913, %1916, !dbg !145
  %1918 = fcmp uno float %1913, 0.000000e+00, !dbg !146
  %1919 = or i1 %1917, %1918, !dbg !147
  %1920 = select i1 %1919, float %1913, float %1916, !dbg !148
  %1921 = bitcast float %1920 to i32, !dbg !143
  %1922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1921, i32 2, i32 31), !dbg !143
  %1923 = bitcast i32 %1922 to float, !dbg !143
  %1924 = fcmp ogt float %1920, %1923, !dbg !145
  %1925 = fcmp uno float %1920, 0.000000e+00, !dbg !146
  %1926 = or i1 %1924, %1925, !dbg !147
  %1927 = select i1 %1926, float %1920, float %1923, !dbg !148
  %1928 = bitcast float %1927 to i32, !dbg !143
  %1929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1928, i32 1, i32 31), !dbg !143
  %1930 = bitcast i32 %1929 to float, !dbg !143
  %1931 = fcmp ogt float %1927, %1930, !dbg !145
  %1932 = fcmp uno float %1927, 0.000000e+00, !dbg !146
  %1933 = or i1 %1931, %1932, !dbg !147
  %1934 = bitcast float %1849 to i32, !dbg !143
  %1935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1934, i32 16, i32 31), !dbg !143
  %1936 = bitcast i32 %1935 to float, !dbg !143
  %1937 = fcmp ogt float %1849, %1936, !dbg !145
  %1938 = fcmp uno float %1849, 0.000000e+00, !dbg !146
  %1939 = or i1 %1938, %1937, !dbg !147
  %1940 = select i1 %1939, float %1849, float %1936, !dbg !148
  %1941 = bitcast float %1940 to i32, !dbg !143
  %1942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1941, i32 8, i32 31), !dbg !143
  %1943 = bitcast i32 %1942 to float, !dbg !143
  %1944 = fcmp ogt float %1940, %1943, !dbg !145
  %1945 = fcmp uno float %1940, 0.000000e+00, !dbg !146
  %1946 = or i1 %1944, %1945, !dbg !147
  %1947 = select i1 %1946, float %1940, float %1943, !dbg !148
  %1948 = bitcast float %1947 to i32, !dbg !143
  %1949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1948, i32 4, i32 31), !dbg !143
  %1950 = bitcast i32 %1949 to float, !dbg !143
  %1951 = fcmp ogt float %1947, %1950, !dbg !145
  %1952 = fcmp uno float %1947, 0.000000e+00, !dbg !146
  %1953 = or i1 %1951, %1952, !dbg !147
  %1954 = select i1 %1953, float %1947, float %1950, !dbg !148
  %1955 = bitcast float %1954 to i32, !dbg !143
  %1956 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1955, i32 2, i32 31), !dbg !143
  %1957 = bitcast i32 %1956 to float, !dbg !143
  %1958 = fcmp ogt float %1954, %1957, !dbg !145
  %1959 = fcmp uno float %1954, 0.000000e+00, !dbg !146
  %1960 = or i1 %1958, %1959, !dbg !147
  %1961 = select i1 %1960, float %1954, float %1957, !dbg !148
  %1962 = bitcast float %1961 to i32, !dbg !143
  %1963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1962, i32 1, i32 31), !dbg !143
  %1964 = bitcast i32 %1963 to float, !dbg !143
  %1965 = fcmp ogt float %1961, %1964, !dbg !145
  %1966 = fcmp uno float %1961, 0.000000e+00, !dbg !146
  %1967 = or i1 %1965, %1966, !dbg !147
  %1968 = bitcast float %1865 to i32, !dbg !143
  %1969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1968, i32 16, i32 31), !dbg !143
  %1970 = bitcast i32 %1969 to float, !dbg !143
  %1971 = fcmp ogt float %1865, %1970, !dbg !145
  %1972 = fcmp uno float %1865, 0.000000e+00, !dbg !146
  %1973 = or i1 %1972, %1971, !dbg !147
  %1974 = select i1 %1973, float %1865, float %1970, !dbg !148
  %1975 = bitcast float %1974 to i32, !dbg !143
  %1976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1975, i32 8, i32 31), !dbg !143
  %1977 = bitcast i32 %1976 to float, !dbg !143
  %1978 = fcmp ogt float %1974, %1977, !dbg !145
  %1979 = fcmp uno float %1974, 0.000000e+00, !dbg !146
  %1980 = or i1 %1978, %1979, !dbg !147
  %1981 = select i1 %1980, float %1974, float %1977, !dbg !148
  %1982 = bitcast float %1981 to i32, !dbg !143
  %1983 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1982, i32 4, i32 31), !dbg !143
  %1984 = bitcast i32 %1983 to float, !dbg !143
  %1985 = fcmp ogt float %1981, %1984, !dbg !145
  %1986 = fcmp uno float %1981, 0.000000e+00, !dbg !146
  %1987 = or i1 %1985, %1986, !dbg !147
  %1988 = select i1 %1987, float %1981, float %1984, !dbg !148
  %1989 = bitcast float %1988 to i32, !dbg !143
  %1990 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1989, i32 2, i32 31), !dbg !143
  %1991 = bitcast i32 %1990 to float, !dbg !143
  %1992 = fcmp ogt float %1988, %1991, !dbg !145
  %1993 = fcmp uno float %1988, 0.000000e+00, !dbg !146
  %1994 = or i1 %1992, %1993, !dbg !147
  %1995 = select i1 %1994, float %1988, float %1991, !dbg !148
  %1996 = bitcast float %1995 to i32, !dbg !143
  %1997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1996, i32 1, i32 31), !dbg !143
  %1998 = bitcast i32 %1997 to float, !dbg !143
  %1999 = fcmp ogt float %1995, %1998, !dbg !145
  %2000 = fcmp uno float %1995, 0.000000e+00, !dbg !146
  %2001 = or i1 %1999, %2000, !dbg !147
  %2002 = select i1 %1899, i32 %1894, i32 %1895, !dbg !148
  %2003 = insertelement <1 x i32> poison, i32 %2002, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, <1 x i32> %2003, i1 %1182) #5, !dbg !143
  %2004 = select i1 %1933, i32 %1928, i32 %1929, !dbg !148
  %2005 = insertelement <1 x i32> poison, i32 %2004, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1190, <1 x i32> %2005, i1 %1182) #5, !dbg !143
  %2006 = select i1 %1967, i32 %1962, i32 %1963, !dbg !148
  %2007 = insertelement <1 x i32> poison, i32 %2006, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %2007, i1 %1182) #5, !dbg !143
  %2008 = select i1 %2001, i32 %1996, i32 %1997, !dbg !148
  %2009 = insertelement <1 x i32> poison, i32 %2008, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1204, <1 x i32> %2009, i1 %1182) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2010 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1211, i1 %1210) #5, !dbg !143
  %2011 = bitcast i32 %2010 to float, !dbg !143
  %2012 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2010, i32 2, i32 31), !dbg !143
  %2013 = bitcast i32 %2012 to float, !dbg !143
  %2014 = fcmp ogt float %2011, %2013, !dbg !145
  %2015 = fcmp uno float %2011, 0.000000e+00, !dbg !146
  %2016 = or i1 %2015, %2014, !dbg !147
  %2017 = select i1 %2016, float %2011, float %2013, !dbg !148
  %2018 = bitcast float %2017 to i32, !dbg !143
  %2019 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2018, i32 1, i32 31), !dbg !143
  %2020 = bitcast i32 %2019 to float, !dbg !143
  %2021 = fcmp ogt float %2017, %2020, !dbg !145
  %2022 = fcmp uno float %2017, 0.000000e+00, !dbg !146
  %2023 = or i1 %2021, %2022, !dbg !147
  %2024 = select i1 %2023, i32 %2018, i32 %2019, !dbg !148
  %2025 = insertelement <1 x i32> poison, i32 %2024, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1211, <1 x i32> %2025, i1 %1260) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2026 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %2027 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !143
  %2028 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !143
  %2029 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %2030 = bitcast float %2026 to i32, !dbg !149
  %2031 = bitcast float %2027 to i32, !dbg !149
  %2032 = bitcast float %2028 to i32, !dbg !149
  %2033 = bitcast float %2029 to i32, !dbg !149
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2030, i32 %2031, i32 %2032, i32 %2033, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %2034 = load float, ptr addrspace(3) %1799, align 4, !dbg !149
  %2035 = sext i32 %600 to i64, !dbg !150
  %2036 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2035, !dbg !150
  %2037 = fptrunc float %1800 to bfloat, !dbg !142
  %2038 = and i32 %19, 124, !dbg !142
  %2039 = icmp eq i32 %2038, 0, !dbg !142
  %2040 = bitcast bfloat %2037 to i16, !dbg !142
  %2041 = and i1 %2039, %601, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2040, ptr addrspace(1) %2036, i1 %2041) #5, !dbg !142
  %2042 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2035, !dbg !151
  %2043 = fptrunc float %2034 to bfloat, !dbg !149
  %2044 = bitcast bfloat %2043 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2044, ptr addrspace(1) %2042, i1 %2041) #5, !dbg !149
  %2045 = insertelement <4 x float> poison, float %1794, i64 0, !dbg !152
  %2046 = insertelement <4 x float> %2045, float %1793, i64 1, !dbg !152
  %2047 = insertelement <4 x float> %2046, float %1792, i64 2, !dbg !152
  %2048 = insertelement <4 x float> %2047, float %1791, i64 3, !dbg !152
  %2049 = fcmp oge <4 x float> %2048, zeroinitializer, !dbg !152
  %2050 = select <4 x i1> %2049, <4 x float> zeroinitializer, <4 x float> %2048, !dbg !152
  %2051 = fsub <4 x float> zeroinitializer, %2050, !dbg !154
  %2052 = insertelement <4 x float> poison, float %2029, i64 0, !dbg !155
  %2053 = insertelement <4 x float> %2052, float %2028, i64 1, !dbg !155
  %2054 = insertelement <4 x float> %2053, float %2027, i64 2, !dbg !155
  %2055 = insertelement <4 x float> %2054, float %2026, i64 3, !dbg !155
  %2056 = fcmp ole <4 x float> %2055, zeroinitializer, !dbg !155
  %2057 = select <4 x i1> %2056, <4 x float> zeroinitializer, <4 x float> %2055, !dbg !155
  %2058 = fcmp ogt <4 x float> %2051, %2057, !dbg !157
  %2059 = fcmp uno <4 x float> %2051, zeroinitializer, !dbg !159
  %2060 = or <4 x i1> %2059, %2058, !dbg !160
  %2061 = select <4 x i1> %2060, <4 x float> %2051, <4 x float> %2057, !dbg !161
  %2062 = fmul <4 x float> %2061, splat (float 0x3F80204080000000), !dbg !162
  %2063 = fcmp ogt <4 x float> %2062, splat (float 0x3EE4F8B580000000), !dbg !163
  %2064 = extractelement <4 x float> %2062, i64 3, !dbg !165
  %2065 = fcmp uno float %2064, 0.000000e+00, !dbg !166
  %2066 = extractelement <4 x float> %2062, i64 2, !dbg !165
  %2067 = fcmp uno float %2066, 0.000000e+00, !dbg !166
  %2068 = extractelement <4 x float> %2062, i64 1, !dbg !165
  %2069 = fcmp uno float %2068, 0.000000e+00, !dbg !166
  %2070 = extractelement <4 x float> %2062, i64 0, !dbg !165
  %2071 = fcmp uno float %2070, 0.000000e+00, !dbg !166
  %2072 = extractelement <4 x i1> %2063, i64 3, !dbg !167
  %2073 = or i1 %2072, %2065, !dbg !167
  %2074 = extractelement <4 x i1> %2063, i64 2, !dbg !167
  %2075 = or i1 %2074, %2067, !dbg !167
  %2076 = extractelement <4 x i1> %2063, i64 1, !dbg !167
  %2077 = or i1 %2076, %2069, !dbg !167
  %2078 = extractelement <4 x i1> %2063, i64 0, !dbg !167
  %2079 = or i1 %2078, %2071, !dbg !167
  %2080 = select i1 %2073, float %2064, float 0x3EE4F8B580000000, !dbg !165
  %2081 = select i1 %2075, float %2066, float 0x3EE4F8B580000000, !dbg !165
  %2082 = select i1 %2077, float %2068, float 0x3EE4F8B580000000, !dbg !165
  %2083 = select i1 %2079, float %2070, float 0x3EE4F8B580000000, !dbg !165
  %2084 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2080), !dbg !168
  %2085 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2081), !dbg !168
  %2086 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2082), !dbg !168
  %2087 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2083), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %2088 = bitcast float %2084 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2088, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2088, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2088, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2088, i1 true) #5, !dbg !169
  %2089 = bitcast float %2085 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2089, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2089, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2089, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2089, i1 true) #5, !dbg !169
  %2090 = bitcast float %2086 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2090, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2090, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2090, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2090, i1 true) #5, !dbg !169
  %2091 = bitcast float %2087 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2091, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2091, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2091, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2091, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %.idx = shl nuw nsw i32 %21, 3, !dbg !169
  %2092 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !169
  %2093 = load float, ptr addrspace(3) %2092, align 8, !dbg !169
  br label %2094, !dbg !170

2094:                                             ; preds = %1566, %2094
  %indvars.iv324 = phi i64 [ 0, %1566 ], [ %indvars.iv.next325, %2094 ]
  %2095 = trunc nuw nsw i64 %indvars.iv324 to i32, !dbg !171
  %2096 = add i32 %94, %2095, !dbg !171
  %2097 = add i32 %96, %2095, !dbg !171
  %2098 = sext i32 %2096 to i64, !dbg !172
  %2099 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2098, !dbg !172
  %2100 = sext i32 %2097 to i64, !dbg !172
  %2101 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2100, !dbg !172
  %2102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2099, i1 %27) #5, !dbg !173
  %2103 = extractvalue { i32, i32, i32, i32 } %2102, 0, !dbg !173
  %2104 = bitcast i32 %2103 to <2 x bfloat>, !dbg !173
  %2105 = extractvalue { i32, i32, i32, i32 } %2102, 1, !dbg !173
  %2106 = bitcast i32 %2105 to <2 x bfloat>, !dbg !173
  %2107 = extractvalue { i32, i32, i32, i32 } %2102, 2, !dbg !173
  %2108 = bitcast i32 %2107 to <2 x bfloat>, !dbg !173
  %2109 = extractvalue { i32, i32, i32, i32 } %2102, 3, !dbg !173
  %2110 = bitcast i32 %2109 to <2 x bfloat>, !dbg !173
  %2111 = extractelement <2 x bfloat> %2104, i64 0, !dbg !173
  %2112 = extractelement <2 x bfloat> %2104, i64 1, !dbg !173
  %2113 = extractelement <2 x bfloat> %2106, i64 0, !dbg !173
  %2114 = extractelement <2 x bfloat> %2106, i64 1, !dbg !173
  %2115 = extractelement <2 x bfloat> %2108, i64 0, !dbg !173
  %2116 = extractelement <2 x bfloat> %2108, i64 1, !dbg !173
  %2117 = extractelement <2 x bfloat> %2110, i64 0, !dbg !173
  %2118 = extractelement <2 x bfloat> %2110, i64 1, !dbg !173
  %2119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2101, i1 %27) #5, !dbg !173
  %2120 = extractvalue { i32, i32, i32, i32 } %2119, 0, !dbg !173
  %2121 = bitcast i32 %2120 to <2 x bfloat>, !dbg !173
  %2122 = extractvalue { i32, i32, i32, i32 } %2119, 1, !dbg !173
  %2123 = bitcast i32 %2122 to <2 x bfloat>, !dbg !173
  %2124 = extractvalue { i32, i32, i32, i32 } %2119, 2, !dbg !173
  %2125 = bitcast i32 %2124 to <2 x bfloat>, !dbg !173
  %2126 = extractvalue { i32, i32, i32, i32 } %2119, 3, !dbg !173
  %2127 = bitcast i32 %2126 to <2 x bfloat>, !dbg !173
  %2128 = extractelement <2 x bfloat> %2121, i64 0, !dbg !173
  %2129 = extractelement <2 x bfloat> %2121, i64 1, !dbg !173
  %2130 = extractelement <2 x bfloat> %2123, i64 0, !dbg !173
  %2131 = extractelement <2 x bfloat> %2123, i64 1, !dbg !173
  %2132 = extractelement <2 x bfloat> %2125, i64 0, !dbg !173
  %2133 = extractelement <2 x bfloat> %2125, i64 1, !dbg !173
  %2134 = extractelement <2 x bfloat> %2127, i64 0, !dbg !173
  %2135 = extractelement <2 x bfloat> %2127, i64 1, !dbg !173
  %2136 = fpext bfloat %2111 to float, !dbg !174
  %2137 = fpext bfloat %2112 to float, !dbg !174
  %2138 = fpext bfloat %2113 to float, !dbg !174
  %2139 = fpext bfloat %2114 to float, !dbg !174
  %2140 = fpext bfloat %2115 to float, !dbg !174
  %2141 = fpext bfloat %2116 to float, !dbg !174
  %2142 = fpext bfloat %2117 to float, !dbg !174
  %2143 = fpext bfloat %2118 to float, !dbg !174
  %2144 = fpext bfloat %2128 to float, !dbg !174
  %2145 = fpext bfloat %2129 to float, !dbg !174
  %2146 = fpext bfloat %2130 to float, !dbg !174
  %2147 = fpext bfloat %2131 to float, !dbg !174
  %2148 = fpext bfloat %2132 to float, !dbg !174
  %2149 = fpext bfloat %2133 to float, !dbg !174
  %2150 = fpext bfloat %2134 to float, !dbg !174
  %2151 = fpext bfloat %2135 to float, !dbg !174
  %2152 = fmul float %2093, %2136, !dbg !169
  %2153 = fmul float %2093, %2137, !dbg !169
  %2154 = fmul float %2093, %2138, !dbg !169
  %2155 = fmul float %2093, %2139, !dbg !169
  %2156 = fmul float %2093, %2140, !dbg !169
  %2157 = fmul float %2093, %2141, !dbg !169
  %2158 = fmul float %2093, %2142, !dbg !169
  %2159 = fmul float %2093, %2143, !dbg !169
  %2160 = fmul float %2093, %2144, !dbg !169
  %2161 = fmul float %2093, %2145, !dbg !169
  %2162 = fmul float %2093, %2146, !dbg !169
  %2163 = fmul float %2093, %2147, !dbg !169
  %2164 = fmul float %2093, %2148, !dbg !169
  %2165 = fmul float %2093, %2149, !dbg !169
  %2166 = fmul float %2093, %2150, !dbg !169
  %2167 = fmul float %2093, %2151, !dbg !169
  %2168 = tail call float @llvm.nvvm.round.f(float %2152) #5, !dbg !175
  %2169 = tail call float @llvm.nvvm.round.f(float %2153) #5, !dbg !175
  %2170 = tail call float @llvm.nvvm.round.f(float %2154) #5, !dbg !175
  %2171 = tail call float @llvm.nvvm.round.f(float %2155) #5, !dbg !175
  %2172 = tail call float @llvm.nvvm.round.f(float %2156) #5, !dbg !175
  %2173 = tail call float @llvm.nvvm.round.f(float %2157) #5, !dbg !175
  %2174 = tail call float @llvm.nvvm.round.f(float %2158) #5, !dbg !175
  %2175 = tail call float @llvm.nvvm.round.f(float %2159) #5, !dbg !175
  %2176 = tail call float @llvm.nvvm.round.f(float %2160) #5, !dbg !175
  %2177 = tail call float @llvm.nvvm.round.f(float %2161) #5, !dbg !175
  %2178 = tail call float @llvm.nvvm.round.f(float %2162) #5, !dbg !175
  %2179 = tail call float @llvm.nvvm.round.f(float %2163) #5, !dbg !175
  %2180 = tail call float @llvm.nvvm.round.f(float %2164) #5, !dbg !175
  %2181 = tail call float @llvm.nvvm.round.f(float %2165) #5, !dbg !175
  %2182 = tail call float @llvm.nvvm.round.f(float %2166) #5, !dbg !175
  %2183 = tail call float @llvm.nvvm.round.f(float %2167) #5, !dbg !175
  %2184 = insertelement <4 x float> poison, float %2168, i64 0, !dbg !176
  %2185 = insertelement <4 x float> %2184, float %2169, i64 1, !dbg !176
  %2186 = insertelement <4 x float> %2185, float %2170, i64 2, !dbg !176
  %2187 = insertelement <4 x float> %2186, float %2171, i64 3, !dbg !176
  %2188 = fcmp ogt <4 x float> %2187, splat (float -1.270000e+02), !dbg !176
  %2189 = fcmp uno <4 x float> %2187, zeroinitializer, !dbg !178
  %2190 = or <4 x i1> %2188, %2189, !dbg !179
  %2191 = select <4 x i1> %2190, <4 x float> %2187, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2192 = fcmp olt <4 x float> %2191, splat (float 1.270000e+02), !dbg !181
  %2193 = fcmp uno <4 x float> %2191, zeroinitializer, !dbg !183
  %2194 = or <4 x i1> %2192, %2193, !dbg !184
  %2195 = fptosi <4 x float> %2191 to <4 x i8>, !dbg !185
  %2196 = select <4 x i1> %2194, <4 x i8> %2195, <4 x i8> splat (i8 127), !dbg !186
  %2197 = insertelement <4 x float> poison, float %2172, i64 0, !dbg !176
  %2198 = insertelement <4 x float> %2197, float %2173, i64 1, !dbg !176
  %2199 = insertelement <4 x float> %2198, float %2174, i64 2, !dbg !176
  %2200 = insertelement <4 x float> %2199, float %2175, i64 3, !dbg !176
  %2201 = fcmp ogt <4 x float> %2200, splat (float -1.270000e+02), !dbg !176
  %2202 = fcmp uno <4 x float> %2200, zeroinitializer, !dbg !178
  %2203 = or <4 x i1> %2201, %2202, !dbg !179
  %2204 = select <4 x i1> %2203, <4 x float> %2200, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2205 = fcmp olt <4 x float> %2204, splat (float 1.270000e+02), !dbg !181
  %2206 = fcmp uno <4 x float> %2204, zeroinitializer, !dbg !183
  %2207 = or <4 x i1> %2205, %2206, !dbg !184
  %2208 = fptosi <4 x float> %2204 to <4 x i8>, !dbg !185
  %2209 = select <4 x i1> %2207, <4 x i8> %2208, <4 x i8> splat (i8 127), !dbg !186
  %2210 = insertelement <4 x float> poison, float %2176, i64 0, !dbg !176
  %2211 = insertelement <4 x float> %2210, float %2177, i64 1, !dbg !176
  %2212 = insertelement <4 x float> %2211, float %2178, i64 2, !dbg !176
  %2213 = insertelement <4 x float> %2212, float %2179, i64 3, !dbg !176
  %2214 = fcmp ogt <4 x float> %2213, splat (float -1.270000e+02), !dbg !176
  %2215 = fcmp uno <4 x float> %2213, zeroinitializer, !dbg !178
  %2216 = or <4 x i1> %2214, %2215, !dbg !179
  %2217 = select <4 x i1> %2216, <4 x float> %2213, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2218 = fcmp olt <4 x float> %2217, splat (float 1.270000e+02), !dbg !181
  %2219 = fcmp uno <4 x float> %2217, zeroinitializer, !dbg !183
  %2220 = or <4 x i1> %2218, %2219, !dbg !184
  %2221 = fptosi <4 x float> %2217 to <4 x i8>, !dbg !185
  %2222 = select <4 x i1> %2220, <4 x i8> %2221, <4 x i8> splat (i8 127), !dbg !186
  %2223 = insertelement <4 x float> poison, float %2180, i64 0, !dbg !176
  %2224 = insertelement <4 x float> %2223, float %2181, i64 1, !dbg !176
  %2225 = insertelement <4 x float> %2224, float %2182, i64 2, !dbg !176
  %2226 = insertelement <4 x float> %2225, float %2183, i64 3, !dbg !176
  %2227 = fcmp ogt <4 x float> %2226, splat (float -1.270000e+02), !dbg !176
  %2228 = fcmp uno <4 x float> %2226, zeroinitializer, !dbg !178
  %2229 = or <4 x i1> %2227, %2228, !dbg !179
  %2230 = select <4 x i1> %2229, <4 x float> %2226, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2231 = fcmp olt <4 x float> %2230, splat (float 1.270000e+02), !dbg !181
  %2232 = fcmp uno <4 x float> %2230, zeroinitializer, !dbg !183
  %2233 = or <4 x i1> %2231, %2232, !dbg !184
  %2234 = fptosi <4 x float> %2230 to <4 x i8>, !dbg !185
  %2235 = select <4 x i1> %2233, <4 x i8> %2234, <4 x i8> splat (i8 127), !dbg !186
  %2236 = getelementptr i8, ptr addrspace(1) %12, i64 %2098, !dbg !187
  %2237 = bitcast <4 x i8> %2196 to i32, !dbg !188
  %2238 = bitcast <4 x i8> %2209 to i32, !dbg !188
  %2239 = bitcast <4 x i8> %2222 to i32, !dbg !188
  %2240 = bitcast <4 x i8> %2235 to i32, !dbg !188
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2237, i32 %2238, i32 %2239, i32 %2240, ptr addrspace(1) %2236, i1 %27) #5, !dbg !188
  %indvars.iv.next325 = add nuw nsw i64 %indvars.iv324, 512, !dbg !170
  %2241 = icmp samesign ult i64 %indvars.iv324, 2560, !dbg !170
  br i1 %2241, label %2094, label %2242, !dbg !170

2242:                                             ; preds = %2094
  ret void, !dbg !189
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 112, column: 50, scope: !6)
!102 = !DILocation(line: 80, column: 40, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 86, column: 115, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 111, column: 47, scope: !6)
!117 = !DILocation(line: 87, column: 50, scope: !6)
!118 = !DILocation(line: 88, column: 50, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 89, column: 49, scope: !6)
!121 = !DILocation(line: 90, column: 49, scope: !6)
!122 = !DILocation(line: 90, column: 102, scope: !6)
!123 = !DILocation(line: 101, column: 24, scope: !6)
!124 = !DILocation(line: 103, column: 24, scope: !6)
!125 = !DILocation(line: 104, column: 24, scope: !6)
!126 = !DILocation(line: 106, column: 24, scope: !6)
!127 = !DILocation(line: 107, column: 24, scope: !6)
!128 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !114)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !114)
!131 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !114)
!132 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !116)
!133 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !116)
!134 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !116)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 141, column: 36, scope: !6)
!176 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !177)
!177 = !DILocation(line: 144, column: 46, scope: !6)
!178 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !177)
!179 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !177)
!180 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !177)
!181 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !182)
!182 = !DILocation(line: 146, column: 46, scope: !6)
!183 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !182)
!184 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !182)
!185 = !DILocation(line: 148, column: 25, scope: !6)
!186 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !182)
!187 = !DILocation(line: 149, column: 29, scope: !6)
!188 = !DILocation(line: 149, column: 53, scope: !6)
!189 = !DILocation(line: 118, column: 4, scope: !6)
