; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 1, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %9, 2, !dbg !14
  %15 = and i32 %14, 4, !dbg !14
  %16 = shl i32 %12, 12, !dbg !15
  %17 = or disjoint i32 %16, %15
  br label %18, !dbg !16

18:                                               ; preds = %6, %18
  %19 = phi float [ 0.000000e+00, %6 ], [ %66, %18 ]
  %20 = phi float [ 0.000000e+00, %6 ], [ %67, %18 ]
  %21 = phi float [ 0.000000e+00, %6 ], [ %68, %18 ]
  %22 = phi float [ 0.000000e+00, %6 ], [ %69, %18 ]
  %23 = phi i32 [ 0, %6 ], [ %70, %18 ]
  %24 = or i32 %17, %23, !dbg !17
  %25 = sext i32 %24 to i64, !dbg !18
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %13) #4, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = extractelement <2 x bfloat> %29, i64 0, !dbg !19
  %33 = extractelement <2 x bfloat> %29, i64 1, !dbg !19
  %34 = extractelement <2 x bfloat> %31, i64 0, !dbg !19
  %35 = extractelement <2 x bfloat> %31, i64 1, !dbg !19
  %36 = fpext bfloat %32 to float, !dbg !20
  %37 = fpext bfloat %33 to float, !dbg !20
  %38 = fpext bfloat %34 to float, !dbg !20
  %39 = fpext bfloat %35 to float, !dbg !20
  %40 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !21
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %13) #4, !dbg !22
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !22
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !22
  %44 = extractvalue { i32, i32 } %41, 1, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = extractelement <2 x bfloat> %43, i64 0, !dbg !22
  %47 = extractelement <2 x bfloat> %43, i64 1, !dbg !22
  %48 = extractelement <2 x bfloat> %45, i64 0, !dbg !22
  %49 = extractelement <2 x bfloat> %45, i64 1, !dbg !22
  %50 = fpext bfloat %46 to float, !dbg !23
  %51 = fpext bfloat %47 to float, !dbg !23
  %52 = fpext bfloat %48 to float, !dbg !23
  %53 = fpext bfloat %49 to float, !dbg !23
  %54 = fadd float %36, %50, !dbg !24
  %55 = fadd float %37, %51, !dbg !24
  %56 = fadd float %38, %52, !dbg !24
  %57 = fadd float %39, %53, !dbg !24
  %58 = fmul float %54, %54, !dbg !25
  %59 = fmul float %55, %55, !dbg !25
  %60 = fmul float %56, %56, !dbg !25
  %61 = fmul float %57, %57, !dbg !25
  %62 = fadd float %19, %58, !dbg !26
  %63 = fadd float %20, %59, !dbg !26
  %64 = fadd float %21, %60, !dbg !26
  %65 = fadd float %22, %61, !dbg !26
  %66 = select i1 %13, float %62, float %19, !dbg !27
  %67 = select i1 %13, float %63, float %20, !dbg !27
  %68 = select i1 %13, float %64, float %21, !dbg !27
  %69 = select i1 %13, float %65, float %22, !dbg !27
  %70 = add nuw nsw i32 %23, 8, !dbg !16
  %71 = icmp samesign ult i32 %23, 4088, !dbg !16
  br i1 %71, label %18, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %18
  %72 = fadd float %66, %67, !dbg !28
  %73 = fadd float %68, %72, !dbg !28
  %74 = fadd float %69, %73, !dbg !28
  %75 = bitcast float %74 to i32, !dbg !33
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = fadd float %74, %77, !dbg !28
  %79 = tail call float @llvm.nvvm.div.full(float %78, float 4.096000e+03), !dbg !34
  %80 = fadd float %79, 0x3EB0C6F7A0000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %84, 0, !dbg !36
  br i1 %.not.i8, label %87, label %85, !dbg !36

85:                                               ; preds = %__nv_rsqrtf.exit
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !36
  br label %__nv_rsqrtf.exit10, !dbg !36

87:                                               ; preds = %__nv_rsqrtf.exit
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !36
  br label %__nv_rsqrtf.exit10, !dbg !36

__nv_rsqrtf.exit10:                               ; preds = %85, %87
  %.0.i9 = phi float [ %86, %85 ], [ %88, %87 ], !dbg !36
  %89 = zext nneg i32 %15 to i64, !dbg !37
  %90 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !38
  %91 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  br label %92, !dbg !37

92:                                               ; preds = %__nv_rsqrtf.exit10, %92
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit10 ], [ %indvars.iv.next, %92 ]
  %93 = or disjoint i64 %indvars.iv, %89, !dbg !39
  %94 = getelementptr bfloat, ptr addrspace(1) %2, i64 %93, !dbg !40
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %94, i1 true) #4, !dbg !41
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !41
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !41
  %98 = extractvalue { i32, i32 } %95, 1, !dbg !41
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !41
  %100 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %17, %100
  %101 = sext i32 %.reass to i64, !dbg !42
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !42
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %102, i1 %13) #4, !dbg !43
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !43
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !43
  %106 = extractvalue { i32, i32 } %103, 1, !dbg !43
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !43
  %108 = getelementptr bfloat, ptr addrspace(1) %1, i64 %101, !dbg !44
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %108, i1 %13) #4, !dbg !45
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !45
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !45
  %112 = extractvalue { i32, i32 } %109, 1, !dbg !45
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !45
  %114 = fpext <2 x bfloat> %97 to <2 x float>, !dbg !46
  %115 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !47
  %116 = fpext <2 x bfloat> %111 to <2 x float>, !dbg !48
  %117 = fadd <2 x float> %115, %116, !dbg !49
  %118 = fmul <2 x float> %91, %117, !dbg !38
  %119 = fmul <2 x float> %118, %114, !dbg !50
  %120 = fptrunc <2 x float> %119 to <2 x bfloat>, !dbg !51
  %121 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !46
  %122 = fpext <2 x bfloat> %107 to <2 x float>, !dbg !47
  %123 = fpext <2 x bfloat> %113 to <2 x float>, !dbg !48
  %124 = fadd <2 x float> %122, %123, !dbg !49
  %125 = fmul <2 x float> %91, %124, !dbg !38
  %126 = fmul <2 x float> %125, %121, !dbg !50
  %127 = fptrunc <2 x float> %126 to <2 x bfloat>, !dbg !51
  %128 = bitcast <2 x bfloat> %120 to i32, !dbg !51
  %129 = bitcast <2 x bfloat> %127 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %102, i1 %13) #4, !dbg !51
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !37
  %130 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !37
  br i1 %130, label %92, label %131, !dbg !37

131:                                              ; preds = %92
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py", directory: "/tmp/torchinductor_root/df")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 45, scope: !6)
!18 = !DILocation(line: 36, column: 38, scope: !6)
!19 = !DILocation(line: 36, column: 55, scope: !6)
!20 = !DILocation(line: 36, column: 116, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 112, scope: !6)
!24 = !DILocation(line: 38, column: 22, scope: !6)
!25 = !DILocation(line: 40, column: 22, scope: !6)
!26 = !DILocation(line: 42, column: 23, scope: !6)
!27 = !DILocation(line: 43, column: 48, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 44, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 57, column: 24, scope: !6)
!35 = !DILocation(line: 59, column: 24, scope: !6)
!36 = !DILocation(line: 60, column: 32, scope: !6)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 46, column: 31, scope: !6)
!40 = !DILocation(line: 51, column: 34, scope: !6)
!41 = !DILocation(line: 51, column: 41, scope: !6)
!42 = !DILocation(line: 52, column: 38, scope: !6)
!43 = !DILocation(line: 52, column: 55, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 52, scope: !6)
!46 = !DILocation(line: 51, column: 94, scope: !6)
!47 = !DILocation(line: 52, column: 117, scope: !6)
!48 = !DILocation(line: 53, column: 114, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 63, column: 23, scope: !6)
!51 = !DILocation(line: 64, column: 56, scope: !6)
!52 = !DILocation(line: 45, column: 4, scope: !6)
