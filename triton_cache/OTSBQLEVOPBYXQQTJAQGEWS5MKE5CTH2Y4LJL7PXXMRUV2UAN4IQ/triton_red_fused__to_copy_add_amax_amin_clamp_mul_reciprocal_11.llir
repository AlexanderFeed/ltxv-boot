; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !11
  %12 = and i32 %11, 1022, !dbg !11
  %13 = shl i32 %8, 7, !dbg !12
  %14 = and i32 %11, 126
  %invariant.op = or disjoint i32 %13, %14, !dbg !13
  %15 = zext nneg i32 %12 to i64, !dbg !13
  %16 = lshr i32 %12, 7, !dbg !14
  %17 = mul nuw nsw i32 %16, 526336, !dbg !15
  %.reass.us = add i32 %17, %invariant.op
  %18 = sext i32 %.reass.us to i64, !dbg !16
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !16
  br i1 %9, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 false) #4, !dbg !17
  %21 = or disjoint i64 %15, 1024, !dbg !18
  %22 = lshr i64 %21, 7, !dbg !14
  %23 = trunc nuw nsw i64 %22 to i32
  %24 = mul nuw nsw i32 %23, 526336
  %.reass.1 = add i32 %24, %invariant.op
  %25 = sext i32 %.reass.1 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 false) #4, !dbg !17
  %28 = or disjoint i64 %15, 2048, !dbg !18
  %29 = lshr i64 %28, 7, !dbg !14
  %30 = trunc nuw nsw i64 %29 to i32
  %31 = mul nuw nsw i32 %30, 526336
  %.reass.2 = add i32 %31, %invariant.op
  %32 = sext i32 %.reass.2 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 false) #4, !dbg !17
  br label %.split5.us, !dbg !19

.split.us.preheader:                              ; preds = %7
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 true) #4, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %38 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %39 = fpext bfloat %37 to float, !dbg !23
  %40 = fpext bfloat %38 to float, !dbg !23
  %41 = or disjoint i64 %15, 1024, !dbg !18
  %42 = lshr i64 %41, 7, !dbg !14
  %43 = trunc nuw nsw i64 %42 to i32
  %44 = mul nuw nsw i32 %43, 526336
  %.reass.us.1 = add i32 %44, %invariant.op
  %45 = sext i32 %.reass.us.1 to i64, !dbg !16
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !16
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %46, i1 true) #4, !dbg !17
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !17
  %49 = extractelement <2 x bfloat> %48, i64 0, !dbg !17
  %50 = extractelement <2 x bfloat> %48, i64 1, !dbg !17
  %51 = fpext bfloat %49 to float, !dbg !23
  %52 = fpext bfloat %50 to float, !dbg !23
  %53 = fcmp olt bfloat %37, %49, !dbg !24
  %54 = fcmp olt bfloat %38, %50, !dbg !24
  %55 = fcmp uno bfloat %37, 0xR0000, !dbg !26
  %56 = fcmp uno bfloat %38, 0xR0000, !dbg !26
  %57 = or i1 %55, %53, !dbg !27
  %58 = or i1 %56, %54, !dbg !27
  %59 = select i1 %57, float %39, float %51, !dbg !28
  %60 = select i1 %58, float %40, float %52, !dbg !28
  %61 = fcmp ogt bfloat %37, %49, !dbg !29
  %62 = fcmp ogt bfloat %38, %50, !dbg !29
  %63 = or i1 %55, %61, !dbg !31
  %64 = or i1 %56, %62, !dbg !31
  %65 = select i1 %63, float %39, float %51, !dbg !32
  %66 = select i1 %64, float %40, float %52, !dbg !32
  %67 = or disjoint i64 %15, 2048, !dbg !18
  %68 = lshr i64 %67, 7, !dbg !14
  %69 = trunc nuw nsw i64 %68 to i32
  %70 = mul nuw nsw i32 %69, 526336
  %.reass.us.2 = add i32 %70, %invariant.op
  %71 = sext i32 %.reass.us.2 to i64, !dbg !16
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !16
  %73 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 true) #4, !dbg !17
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !17
  %75 = extractelement <2 x bfloat> %74, i64 0, !dbg !17
  %76 = extractelement <2 x bfloat> %74, i64 1, !dbg !17
  %77 = fpext bfloat %75 to float, !dbg !23
  %78 = fpext bfloat %76 to float, !dbg !23
  %79 = fcmp olt float %59, %77, !dbg !24
  %80 = fcmp olt float %60, %78, !dbg !24
  %81 = fcmp uno float %59, 0.000000e+00, !dbg !26
  %82 = fcmp uno float %60, 0.000000e+00, !dbg !26
  %83 = or i1 %81, %79, !dbg !27
  %84 = or i1 %82, %80, !dbg !27
  %85 = select i1 %83, float %59, float %77, !dbg !28
  %86 = select i1 %84, float %60, float %78, !dbg !28
  %87 = fcmp ogt float %65, %77, !dbg !29
  %88 = fcmp ogt float %66, %78, !dbg !29
  %89 = fcmp uno float %65, 0.000000e+00, !dbg !33
  %90 = fcmp uno float %66, 0.000000e+00, !dbg !33
  %91 = or i1 %89, %87, !dbg !31
  %92 = or i1 %90, %88, !dbg !31
  %93 = select i1 %91, float %65, float %77, !dbg !32
  %94 = select i1 %92, float %66, float %78, !dbg !32
  br label %.split5.us, !dbg !19

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi24 = phi i64 [ %32, %.split.preheader ], [ %71, %.split.us.preheader ], !dbg !34
  %.pre-phi20 = phi i64 [ %28, %.split.preheader ], [ %67, %.split.us.preheader ], !dbg !35
  %.pre-phi19 = phi i64 [ %25, %.split.preheader ], [ %45, %.split.us.preheader ], !dbg !34
  %.pre-phi15 = phi i64 [ %21, %.split.preheader ], [ %41, %.split.us.preheader ], !dbg !35
  %95 = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %85, %.split.us.preheader ], !dbg !19
  %96 = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %86, %.split.us.preheader ], !dbg !19
  %97 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %93, %.split.us.preheader ], !dbg !19
  %98 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %94, %.split.us.preheader ], !dbg !19
  %99 = lshr i32 %10, 5, !dbg !11
  %100 = and i32 %10, 31, !dbg !11
  %101 = fcmp olt float %95, %96, !dbg !36
  %102 = fcmp uno float %95, 0.000000e+00, !dbg !38
  %103 = or i1 %101, %102, !dbg !39
  %104 = select i1 %103, float %95, float %96, !dbg !40
  %105 = bitcast float %104 to i32, !dbg !19
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !19
  %107 = bitcast i32 %106 to float, !dbg !19
  %108 = fcmp olt float %104, %107, !dbg !36
  %109 = fcmp uno float %104, 0.000000e+00, !dbg !38
  %110 = or i1 %109, %108, !dbg !39
  %111 = select i1 %110, float %104, float %107, !dbg !40
  %112 = bitcast float %111 to i32, !dbg !19
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !19
  %114 = bitcast i32 %113 to float, !dbg !19
  %115 = fcmp olt float %111, %114, !dbg !36
  %116 = fcmp uno float %111, 0.000000e+00, !dbg !38
  %117 = or i1 %115, %116, !dbg !39
  %118 = select i1 %117, float %111, float %114, !dbg !40
  %119 = bitcast float %118 to i32, !dbg !19
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !19
  %121 = bitcast i32 %120 to float, !dbg !19
  %122 = fcmp olt float %118, %121, !dbg !36
  %123 = fcmp uno float %118, 0.000000e+00, !dbg !38
  %124 = or i1 %122, %123, !dbg !39
  %125 = select i1 %124, float %118, float %121, !dbg !40
  %126 = bitcast float %125 to i32, !dbg !19
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !19
  %128 = bitcast i32 %127 to float, !dbg !19
  %129 = fcmp olt float %125, %128, !dbg !36
  %130 = fcmp uno float %125, 0.000000e+00, !dbg !38
  %131 = or i1 %129, %130, !dbg !39
  %132 = select i1 %131, float %125, float %128, !dbg !40
  %133 = bitcast float %132 to i32, !dbg !19
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !19
  %135 = bitcast i32 %134 to float, !dbg !19
  %136 = fcmp olt float %132, %135, !dbg !36
  %137 = fcmp uno float %132, 0.000000e+00, !dbg !38
  %138 = or i1 %136, %137, !dbg !39
  %139 = and i32 %99, 15, !dbg !19
  %140 = icmp eq i32 %100, 0, !dbg !19
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !19
  %142 = select i1 %138, i32 %133, i32 %134, !dbg !40
  %143 = insertelement <1 x i32> poison, i32 %142, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %143, i1 %140) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %144 = icmp slt i32 %10, 16, !dbg !19
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %146 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %145, i1 %144) #4, !dbg !19
  %147 = bitcast i32 %146 to float, !dbg !19
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = fcmp olt float %147, %149, !dbg !36
  %151 = fcmp uno float %147, 0.000000e+00, !dbg !38
  %152 = or i1 %151, %150, !dbg !39
  %153 = select i1 %152, float %147, float %149, !dbg !40
  %154 = bitcast float %153 to i32, !dbg !19
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !19
  %156 = bitcast i32 %155 to float, !dbg !19
  %157 = fcmp olt float %153, %156, !dbg !36
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !38
  %159 = or i1 %157, %158, !dbg !39
  %160 = select i1 %159, float %153, float %156, !dbg !40
  %161 = bitcast float %160 to i32, !dbg !19
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !19
  %163 = bitcast i32 %162 to float, !dbg !19
  %164 = fcmp olt float %160, %163, !dbg !36
  %165 = fcmp uno float %160, 0.000000e+00, !dbg !38
  %166 = or i1 %164, %165, !dbg !39
  %167 = select i1 %166, float %160, float %163, !dbg !40
  %168 = bitcast float %167 to i32, !dbg !19
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !19
  %170 = bitcast i32 %169 to float, !dbg !19
  %171 = fcmp olt float %167, %170, !dbg !36
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !38
  %173 = or i1 %171, %172, !dbg !39
  %174 = and i32 %10, 15, !dbg !19
  %175 = icmp eq i32 %174, 0, !dbg !19
  %176 = and i1 %144, %175, !dbg !19
  %177 = select i1 %173, i32 %168, i32 %169, !dbg !40
  %178 = insertelement <1 x i32> poison, i32 %177, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %178, i1 %176) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %179 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %180 = fcmp ogt float %97, %98, !dbg !43
  %181 = fcmp uno float %97, 0.000000e+00, !dbg !44
  %182 = or i1 %180, %181, !dbg !45
  %183 = select i1 %182, float %97, float %98, !dbg !46
  %184 = bitcast float %183 to i32, !dbg !41
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !41
  %186 = bitcast i32 %185 to float, !dbg !41
  %187 = fcmp ogt float %183, %186, !dbg !43
  %188 = fcmp uno float %183, 0.000000e+00, !dbg !44
  %189 = or i1 %188, %187, !dbg !45
  %190 = select i1 %189, float %183, float %186, !dbg !46
  %191 = bitcast float %190 to i32, !dbg !41
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !41
  %193 = bitcast i32 %192 to float, !dbg !41
  %194 = fcmp ogt float %190, %193, !dbg !43
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !44
  %196 = or i1 %194, %195, !dbg !45
  %197 = select i1 %196, float %190, float %193, !dbg !46
  %198 = bitcast float %197 to i32, !dbg !41
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !41
  %200 = bitcast i32 %199 to float, !dbg !41
  %201 = fcmp ogt float %197, %200, !dbg !43
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !44
  %203 = or i1 %201, %202, !dbg !45
  %204 = select i1 %203, float %197, float %200, !dbg !46
  %205 = bitcast float %204 to i32, !dbg !41
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !41
  %207 = bitcast i32 %206 to float, !dbg !41
  %208 = fcmp ogt float %204, %207, !dbg !43
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !44
  %210 = or i1 %208, %209, !dbg !45
  %211 = select i1 %210, float %204, float %207, !dbg !46
  %212 = bitcast float %211 to i32, !dbg !41
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !41
  %214 = bitcast i32 %213 to float, !dbg !41
  %215 = fcmp ogt float %211, %214, !dbg !43
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !44
  %217 = or i1 %215, %216, !dbg !45
  %218 = select i1 %217, i32 %212, i32 %213, !dbg !46
  %219 = insertelement <1 x i32> poison, i32 %218, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %219, i1 %140) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %145, i1 %144) #4, !dbg !41
  %221 = bitcast i32 %220 to float, !dbg !41
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !41
  %223 = bitcast i32 %222 to float, !dbg !41
  %224 = fcmp ogt float %221, %223, !dbg !43
  %225 = fcmp uno float %221, 0.000000e+00, !dbg !44
  %226 = or i1 %225, %224, !dbg !45
  %227 = select i1 %226, float %221, float %223, !dbg !46
  %228 = bitcast float %227 to i32, !dbg !41
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !41
  %230 = bitcast i32 %229 to float, !dbg !41
  %231 = fcmp ogt float %227, %230, !dbg !43
  %232 = fcmp uno float %227, 0.000000e+00, !dbg !44
  %233 = or i1 %231, %232, !dbg !45
  %234 = select i1 %233, float %227, float %230, !dbg !46
  %235 = bitcast float %234 to i32, !dbg !41
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !41
  %237 = bitcast i32 %236 to float, !dbg !41
  %238 = fcmp ogt float %234, %237, !dbg !43
  %239 = fcmp uno float %234, 0.000000e+00, !dbg !44
  %240 = or i1 %238, %239, !dbg !45
  %241 = select i1 %240, float %234, float %237, !dbg !46
  %242 = bitcast float %241 to i32, !dbg !41
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !41
  %244 = bitcast i32 %243 to float, !dbg !41
  %245 = fcmp ogt float %241, %244, !dbg !43
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !44
  %247 = or i1 %245, %246, !dbg !45
  %248 = select i1 %247, i32 %242, i32 %243, !dbg !46
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %249, i1 %176) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %250 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %251 = sext i32 %8 to i64, !dbg !47
  %252 = getelementptr bfloat, ptr addrspace(1) %1, i64 %251, !dbg !47
  %253 = fptrunc float %179 to bfloat, !dbg !48
  %254 = and i32 %10, 511, !dbg !48
  %255 = icmp eq i32 %254, 0, !dbg !48
  %256 = bitcast bfloat %253 to i16, !dbg !48
  %257 = and i1 %9, %255, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %256, ptr addrspace(1) %252, i1 %257) #4, !dbg !48
  %258 = getelementptr bfloat, ptr addrspace(1) %2, i64 %251, !dbg !49
  %259 = fptrunc float %250 to bfloat, !dbg !50
  %260 = bitcast bfloat %259 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %260, ptr addrspace(1) %258, i1 %257) #4, !dbg !50
  %.inv = fcmp oge float %179, 0.000000e+00, !dbg !51
  %261 = select i1 %.inv, float 0.000000e+00, float %179, !dbg !51
  %262 = fsub float 0.000000e+00, %261, !dbg !53
  %.inv2 = fcmp ole float %250, 0.000000e+00, !dbg !54
  %263 = select i1 %.inv2, float 0.000000e+00, float %250, !dbg !54
  %264 = fcmp ogt float %262, %263, !dbg !56
  %265 = fcmp uno float %262, 0.000000e+00, !dbg !58
  %266 = or i1 %265, %264, !dbg !59
  %267 = select i1 %266, float %262, float %263, !dbg !60
  %268 = fmul float %267, 0x3F80204080000000, !dbg !61
  %269 = fcmp ogt float %268, 0x3EE4F8B580000000, !dbg !62
  %270 = fcmp uno float %268, 0.000000e+00, !dbg !64
  %271 = or i1 %269, %270, !dbg !65
  %272 = select i1 %271, float %268, float 0x3EE4F8B580000000, !dbg !66
  %273 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %272), !dbg !67
  %274 = mul i32 %8, 3072, !dbg !68
  %275 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !34
  %276 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %275, i1 %9) #4, !dbg !69
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !69
  %278 = extractelement <2 x bfloat> %277, i64 0, !dbg !69
  %279 = extractelement <2 x bfloat> %277, i64 1, !dbg !69
  %280 = fpext bfloat %278 to float, !dbg !70
  %281 = fpext bfloat %279 to float, !dbg !70
  %282 = fmul float %273, %280, !dbg !71
  %283 = fmul float %273, %281, !dbg !71
  %284 = tail call float @llvm.nvvm.round.f(float %282) #4, !dbg !72
  %285 = tail call float @llvm.nvvm.round.f(float %283) #4, !dbg !72
  %286 = insertelement <2 x float> poison, float %284, i64 0, !dbg !73
  %287 = insertelement <2 x float> %286, float %285, i64 1, !dbg !73
  %288 = fcmp ogt <2 x float> %287, splat (float -1.270000e+02), !dbg !73
  %289 = fcmp uno <2 x float> %287, zeroinitializer, !dbg !75
  %290 = or <2 x i1> %288, %289, !dbg !76
  %291 = select <2 x i1> %290, <2 x float> %287, <2 x float> splat (float -1.270000e+02), !dbg !77
  %292 = fcmp olt <2 x float> %291, splat (float 1.270000e+02), !dbg !78
  %293 = fcmp uno <2 x float> %291, zeroinitializer, !dbg !80
  %294 = or <2 x i1> %292, %293, !dbg !81
  %295 = fptosi <2 x float> %291 to <2 x i8>, !dbg !82
  %296 = select <2 x i1> %294, <2 x i8> %295, <2 x i8> splat (i8 127), !dbg !83
  %297 = or disjoint i32 %12, %274, !dbg !84
  %298 = sext i32 %297 to i64, !dbg !85
  %299 = getelementptr i8, ptr addrspace(1) %3, i64 %298, !dbg !85
  %300 = bitcast <2 x i8> %296 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %300, ptr addrspace(1) %299, i1 %9) #4, !dbg !86
  %301 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi19, !dbg !34
  %302 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %301, i1 %9) #4, !dbg !69
  %303 = bitcast i32 %302 to <2 x bfloat>, !dbg !69
  %304 = extractelement <2 x bfloat> %303, i64 0, !dbg !69
  %305 = extractelement <2 x bfloat> %303, i64 1, !dbg !69
  %306 = fpext bfloat %304 to float, !dbg !70
  %307 = fpext bfloat %305 to float, !dbg !70
  %308 = fmul float %273, %306, !dbg !71
  %309 = fmul float %273, %307, !dbg !71
  %310 = tail call float @llvm.nvvm.round.f(float %308) #4, !dbg !72
  %311 = tail call float @llvm.nvvm.round.f(float %309) #4, !dbg !72
  %312 = insertelement <2 x float> poison, float %310, i64 0, !dbg !73
  %313 = insertelement <2 x float> %312, float %311, i64 1, !dbg !73
  %314 = fcmp ogt <2 x float> %313, splat (float -1.270000e+02), !dbg !73
  %315 = fcmp uno <2 x float> %313, zeroinitializer, !dbg !75
  %316 = or <2 x i1> %314, %315, !dbg !76
  %317 = select <2 x i1> %316, <2 x float> %313, <2 x float> splat (float -1.270000e+02), !dbg !77
  %318 = fcmp olt <2 x float> %317, splat (float 1.270000e+02), !dbg !78
  %319 = fcmp uno <2 x float> %317, zeroinitializer, !dbg !80
  %320 = or <2 x i1> %318, %319, !dbg !81
  %321 = fptosi <2 x float> %317 to <2 x i8>, !dbg !82
  %322 = select <2 x i1> %320, <2 x i8> %321, <2 x i8> splat (i8 127), !dbg !83
  %323 = trunc nuw nsw i64 %.pre-phi15 to i32, !dbg !84
  %324 = add i32 %274, %323, !dbg !84
  %325 = sext i32 %324 to i64, !dbg !85
  %326 = getelementptr i8, ptr addrspace(1) %3, i64 %325, !dbg !85
  %327 = bitcast <2 x i8> %322 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %327, ptr addrspace(1) %326, i1 %9) #4, !dbg !86
  %328 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi24, !dbg !34
  %329 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %328, i1 %9) #4, !dbg !69
  %330 = bitcast i32 %329 to <2 x bfloat>, !dbg !69
  %331 = extractelement <2 x bfloat> %330, i64 0, !dbg !69
  %332 = extractelement <2 x bfloat> %330, i64 1, !dbg !69
  %333 = fpext bfloat %331 to float, !dbg !70
  %334 = fpext bfloat %332 to float, !dbg !70
  %335 = fmul float %273, %333, !dbg !71
  %336 = fmul float %273, %334, !dbg !71
  %337 = tail call float @llvm.nvvm.round.f(float %335) #4, !dbg !72
  %338 = tail call float @llvm.nvvm.round.f(float %336) #4, !dbg !72
  %339 = insertelement <2 x float> poison, float %337, i64 0, !dbg !73
  %340 = insertelement <2 x float> %339, float %338, i64 1, !dbg !73
  %341 = fcmp ogt <2 x float> %340, splat (float -1.270000e+02), !dbg !73
  %342 = fcmp uno <2 x float> %340, zeroinitializer, !dbg !75
  %343 = or <2 x i1> %341, %342, !dbg !76
  %344 = select <2 x i1> %343, <2 x float> %340, <2 x float> splat (float -1.270000e+02), !dbg !77
  %345 = fcmp olt <2 x float> %344, splat (float 1.270000e+02), !dbg !78
  %346 = fcmp uno <2 x float> %344, zeroinitializer, !dbg !80
  %347 = or <2 x i1> %345, %346, !dbg !81
  %348 = fptosi <2 x float> %344 to <2 x i8>, !dbg !82
  %349 = select <2 x i1> %347, <2 x i8> %348, <2 x i8> splat (i8 127), !dbg !83
  %350 = trunc nuw nsw i64 %.pre-phi20 to i32, !dbg !84
  %351 = add i32 %274, %350, !dbg !84
  %352 = sext i32 %351 to i64, !dbg !85
  %353 = getelementptr i8, ptr addrspace(1) %3, i64 %352, !dbg !85
  %354 = bitcast <2 x i8> %349 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %354, ptr addrspace(1) %353, i1 %9) #4, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 43, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 144, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 39, column: 45, scope: !6)
!26 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !25)
!27 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !25)
!28 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !25)
!29 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 45, scope: !6)
!31 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !30)
!32 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !30)
!33 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !30)
!34 = !DILocation(line: 53, column: 34, scope: !6)
!35 = !DILocation(line: 48, column: 31, scope: !6)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !22)
!37 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!38 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !22)
!39 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !22)
!40 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !22)
!41 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !42)
!46 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !42)
!47 = !DILocation(line: 45, column: 25, scope: !6)
!48 = !DILocation(line: 45, column: 36, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 53, column: 83, scope: !6)
!70 = !DILocation(line: 53, column: 145, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
