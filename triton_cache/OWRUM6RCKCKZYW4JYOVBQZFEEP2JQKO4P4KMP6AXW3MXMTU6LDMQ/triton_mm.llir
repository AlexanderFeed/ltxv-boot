; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 1536, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 129, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 1536, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl nsw i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %14, %23, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = lshr exact i32 %18, 2, !dbg !22
  %27 = lshr i32 %15, 2, !dbg !22
  %28 = and i32 %27, 16, !dbg !22
  %29 = and i32 %27, 39, !dbg !22
  %30 = or disjoint i32 %26, %29, !dbg !22
  %31 = or disjoint i32 %30, %28, !dbg !22
  %32 = shl i32 %15, 2, !dbg !22
  %33 = and i32 %32, 16, !dbg !22
  %34 = and i32 %32, 28, !dbg !22
  %35 = or disjoint i32 %25, %31, !dbg !23
  %36 = srem i32 %24, 4112, !dbg !24
  %37 = srem i32 %35, 12288, !dbg !25
  %38 = shl i32 %15, 3, !dbg !26
  %39 = and i32 %38, 24, !dbg !26
  %40 = mul nsw i32 %36, 3072, !dbg !27
  %41 = mul nsw i32 %37, 3072, !dbg !28
  %42 = or disjoint i32 %40, %34, !dbg !29
  %43 = sext i32 %42 to i64, !dbg !30
  %44 = getelementptr i8, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = lshr exact i32 %18, 1, !dbg !31
  %46 = xor i32 %34, %45, !dbg !31
  %47 = shl nuw nsw i32 %23, 5, !dbg !31
  %48 = or disjoint i32 %47, %46, !dbg !31
  %49 = zext nneg i32 %48 to i64, !dbg !31
  %50 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %49, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %50, ptr addrspace(1) %44, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %51 = or disjoint i32 %41, %39, !dbg !32
  %52 = sext i32 %51 to i64, !dbg !33
  %53 = getelementptr i8, ptr addrspace(1) %1, i64 %52, !dbg !33
  %54 = xor i32 %39, %17, !dbg !34
  %55 = shl nuw nsw i32 %31, 5, !dbg !34
  %56 = or disjoint i32 %55, %54, !dbg !34
  %57 = zext nneg i32 %56 to i64, !dbg !34
  %58 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %57, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %53, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %59 = or disjoint i32 %42, 32, !dbg !29
  %60 = sext i32 %59 to i64, !dbg !30
  %61 = getelementptr i8, ptr addrspace(1) %0, i64 %60, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %62 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 9216), i64 %49, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %61, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %63 = or disjoint i32 %51, 32, !dbg !32
  %64 = sext i32 %63 to i64, !dbg !33
  %65 = getelementptr i8, ptr addrspace(1) %1, i64 %64, !dbg !33
  %66 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %57, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %65, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %67 = or disjoint i32 %42, 64, !dbg !29
  %68 = sext i32 %67 to i64, !dbg !30
  %69 = getelementptr i8, ptr addrspace(1) %0, i64 %68, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %70 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %49, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %69, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %71 = or disjoint i32 %51, 64, !dbg !32
  %72 = sext i32 %71 to i64, !dbg !33
  %73 = getelementptr i8, ptr addrspace(1) %1, i64 %72, !dbg !33
  %74 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %57, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %73, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %75 = or disjoint i32 %42, 96, !dbg !29
  %76 = sext i32 %75 to i64, !dbg !30
  %77 = getelementptr i8, ptr addrspace(1) %0, i64 %76, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %78 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %49, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %78, ptr addrspace(1) %77, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %79 = or disjoint i32 %51, 96, !dbg !32
  %80 = sext i32 %79 to i64, !dbg !33
  %81 = getelementptr i8, ptr addrspace(1) %1, i64 %80, !dbg !33
  %82 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %57, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %81, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %83 = and i32 %15, 7
  %84 = and i32 %15, 15
  %85 = xor i32 %33, %17
  %86 = or disjoint i32 %22, %84
  %87 = shl nuw nsw i32 %86, 5
  %88 = or disjoint i32 %87, %85
  %89 = zext nneg i32 %88 to i64
  %invariant.gep15 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %89, !dbg !35
  %90 = shl nuw nsw i32 %16, 1
  %91 = xor i32 %33, %90
  %92 = or disjoint i32 %26, %83
  %93 = or disjoint i32 %92, %28
  %94 = shl nuw nsw i32 %93, 5
  %95 = or disjoint i32 %94, %91
  %96 = zext nneg i32 %95 to i64
  %97 = or i32 %95, 1024
  %98 = zext nneg i32 %97 to i64
  %invariant.op = or disjoint i32 %42, 128, !dbg !35
  %invariant.op17 = or disjoint i32 %51, 128, !dbg !35
  %99 = sext i32 %invariant.op to i64, !dbg !35
  %100 = sext i32 %invariant.op17 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %99, !dbg !35
  %invariant.gep36 = getelementptr i8, ptr addrspace(1) %1, i64 %100, !dbg !35
  br label %101, !dbg !35

101:                                              ; preds = %4, %101
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %101 ]
  %102 = phi i32 [ -1, %4 ], [ %115, %101 ]
  %103 = phi i32 [ 3, %4 ], [ %152, %101 ]
  %104 = phi i32 [ 0, %4 ], [ %141, %101 ]
  %105 = phi i32 [ 0, %4 ], [ %142, %101 ]
  %106 = phi i32 [ 0, %4 ], [ %143, %101 ]
  %107 = phi i32 [ 0, %4 ], [ %144, %101 ]
  %108 = phi i32 [ 0, %4 ], [ %146, %101 ]
  %109 = phi i32 [ 0, %4 ], [ %147, %101 ]
  %110 = phi i32 [ 0, %4 ], [ %148, %101 ]
  %111 = phi i32 [ 0, %4 ], [ %149, %101 ]
  %112 = icmp samesign ult i64 %indvars.iv, 92, !dbg !35
  %113 = add i32 %102, 1, !dbg !35
  %114 = icmp slt i32 %113, 4, !dbg !35
  %115 = select i1 %114, i32 %113, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %116 = shl i32 %115, 10, !dbg !31
  %117 = sext i32 %116 to i64, !dbg !31
  %gep16 = getelementptr i8, ptr addrspace(3) %invariant.gep15, i64 %117, !dbg !31
  %118 = ptrtoint ptr addrspace(3) %gep16 to i64, !dbg !31
  %119 = trunc i64 %118 to i32, !dbg !31
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %119) #1, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !31
  %125 = shl i32 %115, 11, !dbg !34
  %126 = sext i32 %125 to i64, !dbg !34
  %127 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %126, !dbg !34
  %128 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i64 %96, !dbg !34
  %129 = ptrtoint ptr addrspace(3) %128 to i64, !dbg !34
  %130 = trunc i64 %129 to i32, !dbg !34
  %131 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %130) #1, !dbg !34
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !34
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !34
  %134 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i64 %98, !dbg !34
  %135 = ptrtoint ptr addrspace(3) %134 to i64, !dbg !34
  %136 = trunc i64 %135 to i32, !dbg !34
  %137 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %136) #1, !dbg !34
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !34
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !34
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %104, i32 %105, i32 %106, i32 %107, i32 %121, i32 %122, i32 %123, i32 %124, i32 %132, i32 %133) #1, !dbg !36
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !36
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !36
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %108, i32 %109, i32 %110, i32 %111, i32 %121, i32 %122, i32 %123, i32 %124, i32 %138, i32 %139) #1, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !36
  %150 = add i32 %103, 1, !dbg !35
  %151 = icmp slt i32 %150, 4, !dbg !35
  %152 = select i1 %151, i32 %150, i32 0, !dbg !35
  %153 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep35 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %153, !dbg !30
  %154 = shl i32 %152, 10, !dbg !31
  %155 = sext i32 %154 to i64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %50, i64 %155, !dbg !31
  %156 = select i1 %112, i32 4, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep35, i32 %156) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep37 = getelementptr i8, ptr addrspace(1) %invariant.gep36, i64 %153, !dbg !33
  %157 = shl i32 %152, 11, !dbg !34
  %158 = sext i32 %157 to i64, !dbg !34
  %gep14 = getelementptr i8, ptr addrspace(3) %58, i64 %158, !dbg !34
  %159 = select i1 %112, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep14, ptr addrspace(1) %gep37, i32 %159) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !35
  br i1 %exitcond.not, label %160, label %101, !dbg !35

160:                                              ; preds = %101
  %161 = shl nuw nsw i32 %16, 2, !dbg !22
  %162 = or disjoint i32 %34, %161, !dbg !22
  %163 = or disjoint i32 %25, %162, !dbg !23
  %164 = lshr i32 %15, 4, !dbg !19
  %165 = and i32 %164, 15, !dbg !19
  %166 = or disjoint i32 %165, %14, !dbg !20
  %167 = or disjoint i32 %166, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %168 = icmp slt i32 %166, 4112, !dbg !38
  %169 = icmp slt i32 %167, 4112, !dbg !38
  %170 = icmp slt i32 %163, 12288, !dbg !39
  %171 = and i1 %168, %170, !dbg !40
  %172 = and i1 %169, %170, !dbg !40
  %173 = mul i32 %166, 12288, !dbg !41
  %174 = mul i32 %167, 12288, !dbg !41
  %175 = add i32 %173, %163, !dbg !42
  %176 = add i32 %174, %163, !dbg !42
  %177 = sext i32 %175 to i64, !dbg !43
  %178 = getelementptr i32, ptr addrspace(1) %2, i64 %177, !dbg !43
  %179 = sext i32 %176 to i64, !dbg !43
  %180 = getelementptr i32, ptr addrspace(1) %2, i64 %179, !dbg !43
  %181 = shl i32 %15, 1, !dbg !44
  %182 = and i32 %181, 6, !dbg !44
  %183 = shl i32 %15, 4, !dbg !44
  %184 = and i32 %183, 192, !dbg !44
  %185 = or disjoint i32 %184, %182, !dbg !44
  %186 = shl nuw nsw i32 %17, 4, !dbg !44
  %187 = or disjoint i32 %185, %186, !dbg !44
  %188 = shl nuw nsw i32 %21, 3, !dbg !44
  %189 = or disjoint i32 %187, %188, !dbg !44
  %190 = or disjoint i32 %28, %26, !dbg !44
  %191 = or disjoint i32 %190, %189, !dbg !44
  %192 = and i32 %32, 1020, !dbg !44
  %193 = lshr i32 %189, 4, !dbg !44
  %194 = add nuw nsw i32 %191, %193, !dbg !44
  %195 = zext nneg i32 %194 to i64, !dbg !44
  %196 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %195, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %196, i32 %141, i32 %142, i1 true) #1, !dbg !44
  %197 = or disjoint i32 %191, 512, !dbg !44
  %198 = lshr i32 %197, 4, !dbg !44
  %199 = and i32 %198, 268435452, !dbg !44
  %200 = add nuw nsw i32 %199, %197, !dbg !44
  %201 = zext nneg i32 %200 to i64, !dbg !44
  %202 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %201, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %202, i32 %143, i32 %144, i1 true) #1, !dbg !44
  %203 = or disjoint i32 %191, 32, !dbg !44
  %204 = add nuw nsw i32 %203, %193, !dbg !44
  %205 = zext nneg i32 %204 to i64, !dbg !44
  %206 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %205, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %206, i32 %146, i32 %147, i1 true) #1, !dbg !44
  %207 = or disjoint i32 %191, 544, !dbg !44
  %208 = lshr i32 %207, 4, !dbg !44
  %209 = and i32 %208, 268435452, !dbg !44
  %210 = add nuw nsw i32 %209, %207, !dbg !44
  %211 = zext nneg i32 %210 to i64, !dbg !44
  %212 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %211, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %212, i32 %148, i32 %149, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %213 = lshr i32 %32, 4, !dbg !44
  %214 = and i32 %213, 60, !dbg !44
  %215 = add nuw nsw i32 %214, %192, !dbg !44
  %216 = zext nneg i32 %215 to i64, !dbg !44
  %217 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %216, !dbg !44
  %218 = or disjoint i32 %192, 1024, !dbg !44
  %219 = lshr i32 %218, 4, !dbg !44
  %220 = and i32 %219, 124, !dbg !44
  %221 = add nuw nsw i32 %220, %218, !dbg !44
  %222 = zext nneg i32 %221 to i64, !dbg !44
  %223 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %222, !dbg !44
  %224 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %217, align 16, !dbg !44
  %225 = getelementptr inbounds nuw i8, ptr addrspace(3) %217, i64 4, !dbg !44
  %.extract6 = load i32, ptr addrspace(3) %225, align 4, !dbg !44
  %226 = getelementptr inbounds nuw i8, ptr addrspace(3) %217, i64 8, !dbg !44
  %.extract7 = load i32, ptr addrspace(3) %226, align 8, !dbg !44
  %227 = getelementptr inbounds nuw i8, ptr addrspace(3) %217, i64 12, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %227, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %178, i1 %171) #1, !dbg !44
  %.extract9 = extractelement <4 x i32> %224, i64 0, !dbg !44
  %.extract10 = extractelement <4 x i32> %224, i64 1, !dbg !44
  %.extract11 = extractelement <4 x i32> %224, i64 2, !dbg !44
  %.extract12 = extractelement <4 x i32> %224, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract9, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %180, i1 %172) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdvlazwf4l2u6tivuhi4pqtdp3n5ywh2b7izxbs3527jw7k3roq.py", directory: "/tmp/torchinductor_root/zd")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 67, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 27, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
