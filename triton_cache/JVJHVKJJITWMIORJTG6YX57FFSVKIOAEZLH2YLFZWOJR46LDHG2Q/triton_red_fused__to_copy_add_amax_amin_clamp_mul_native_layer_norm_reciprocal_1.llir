; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 1, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = lshr i32 %22, 5, !dbg !11
  %24 = and i32 %22, 512, !dbg !11
  %.lobit = lshr exact i32 %24, 9, !dbg !11
  %25 = and i32 %22, 31, !dbg !11
  %26 = or disjoint i32 %.lobit, %21, !dbg !12
  %27 = icmp slt i32 %26, 4112, !dbg !13
  %28 = shl i32 %22, 1, !dbg !14
  %29 = and i32 %28, 1022, !dbg !14
  %30 = mul i32 %26, 3072, !dbg !15
  %31 = or disjoint i32 %30, %29
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  br i1 %27, label %__nv_rsqrtf.exit.loopexit, label %.split.preheader

.split.preheader:                                 ; preds = %19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 false) #5, !dbg !17
  %35 = add i32 %31, 1024, !dbg !18
  %36 = sext i32 %35 to i64, !dbg !16
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !16
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 false) #5, !dbg !17
  %39 = add i32 %31, 2048, !dbg !18
  %40 = sext i32 %39 to i64, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !16
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %41, i1 false) #5, !dbg !17
  br label %__nv_rsqrtf.exit, !dbg !19

__nv_rsqrtf.exit.loopexit:                        ; preds = %19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 true) #5, !dbg !17
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !17
  %45 = add i32 %31, 1024, !dbg !18
  %46 = sext i32 %45 to i64, !dbg !16
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !16
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %47, i1 true) #5, !dbg !17
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !17
  %50 = add i32 %31, 2048, !dbg !18
  %51 = sext i32 %50 to i64, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !16
  %53 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %52, i1 true) #5, !dbg !17
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !17
  %55 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !23
  %56 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !23
  %57 = fsub <2 x float> %56, %55, !dbg !24
  %58 = extractelement <2 x float> %57, i64 0, !dbg !26
  %59 = tail call float @llvm.nvvm.div.full(float %58, float 2.000000e+00), !dbg !26
  %60 = extractelement <2 x float> %57, i64 1, !dbg !26
  %61 = tail call float @llvm.nvvm.div.full(float %60, float 2.000000e+00), !dbg !26
  %62 = insertelement <2 x float> poison, float %59, i64 0, !dbg !27
  %63 = insertelement <2 x float> %62, float %61, i64 1, !dbg !27
  %64 = fadd <2 x float> %63, %55, !dbg !27
  %65 = extractelement <2 x float> %64, i64 1, !dbg !27
  %66 = fsub <2 x float> %56, %64, !dbg !28
  %67 = fmul <2 x float> %57, %66, !dbg !29
  %68 = fadd <2 x float> %67, zeroinitializer, !dbg !30
  %69 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !23
  %70 = extractelement <2 x float> %69, i64 1, !dbg !23
  %71 = extractelement <2 x float> %64, i64 0, !dbg !27
  %72 = fsub <2 x float> %69, %64, !dbg !24
  %73 = extractelement <2 x float> %72, i64 0, !dbg !24
  %74 = tail call float @llvm.nvvm.div.full(float %73, float 3.000000e+00), !dbg !26
  %75 = fadd float %71, %74, !dbg !27
  %76 = fsub float %70, %65, !dbg !24
  %77 = insertelement <2 x float> %64, float %75, i64 0, !dbg !28
  %78 = fsub <2 x float> %69, %77, !dbg !28
  %79 = tail call float @llvm.nvvm.div.full(float %76, float 3.000000e+00), !dbg !26
  %80 = fadd float %65, %79, !dbg !27
  %81 = fsub float %70, %80, !dbg !28
  %82 = insertelement <2 x float> %72, float %81, i64 1, !dbg !29
  %83 = fmul <2 x float> %78, %82, !dbg !29
  %84 = fadd <2 x float> %68, %83, !dbg !30
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %85 = fadd <2 x float> %84, %shift, !dbg !19
  %86 = extractelement <2 x float> %85, i64 0, !dbg !19
  br label %__nv_rsqrtf.exit, !dbg !19

__nv_rsqrtf.exit:                                 ; preds = %.split.preheader, %__nv_rsqrtf.exit.loopexit
  %87 = phi float [ %75, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !19
  %88 = phi float [ %80, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !19
  %89 = phi float [ 3.000000e+00, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !19
  %90 = phi float [ %86, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !31
  %91 = fsub float %88, %87, !dbg !33
  %92 = fadd float %89, %89, !dbg !34
  %93 = fcmp oeq float %92, 0.000000e+00, !dbg !35
  %94 = tail call float @llvm.nvvm.div.full(float %89, float %92), !dbg !36
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !37
  %96 = fmul float %91, %95, !dbg !38
  %97 = fadd float %87, %96, !dbg !39
  %98 = fmul float %91, %91, !dbg !40
  %99 = fmul float %98, %89, !dbg !41
  %100 = fmul float %99, %95, !dbg !42
  %101 = fadd float %90, %100, !dbg !43
  %102 = bitcast float %97 to i32, !dbg !19
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !19
  %104 = bitcast i32 %103 to float, !dbg !19
  %105 = bitcast float %101 to i32, !dbg !19
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !19
  %107 = bitcast i32 %106 to float, !dbg !19
  %108 = bitcast float %92 to i32, !dbg !19
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !19
  %110 = bitcast i32 %109 to float, !dbg !19
  %111 = fsub float %104, %97, !dbg !33
  %112 = fadd float %92, %110, !dbg !34
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !35
  %114 = tail call float @llvm.nvvm.div.full(float %110, float %112), !dbg !36
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !37
  %116 = fmul float %111, %115, !dbg !38
  %117 = fadd float %97, %116, !dbg !39
  %118 = fadd float %101, %107, !dbg !31
  %119 = fmul float %111, %111, !dbg !40
  %120 = fmul float %92, %119, !dbg !41
  %121 = fmul float %120, %115, !dbg !42
  %122 = fadd float %118, %121, !dbg !43
  %123 = bitcast float %117 to i32, !dbg !19
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !19
  %125 = bitcast i32 %124 to float, !dbg !19
  %126 = bitcast float %122 to i32, !dbg !19
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !19
  %128 = bitcast i32 %127 to float, !dbg !19
  %129 = bitcast float %112 to i32, !dbg !19
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !19
  %131 = bitcast i32 %130 to float, !dbg !19
  %132 = fsub float %125, %117, !dbg !33
  %133 = fadd float %112, %131, !dbg !34
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !35
  %135 = tail call float @llvm.nvvm.div.full(float %131, float %133), !dbg !36
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !37
  %137 = fmul float %132, %136, !dbg !38
  %138 = fadd float %117, %137, !dbg !39
  %139 = fadd float %122, %128, !dbg !31
  %140 = fmul float %132, %132, !dbg !40
  %141 = fmul float %112, %140, !dbg !41
  %142 = fmul float %136, %141, !dbg !42
  %143 = fadd float %139, %142, !dbg !43
  %144 = bitcast float %138 to i32, !dbg !19
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !19
  %146 = bitcast i32 %145 to float, !dbg !19
  %147 = bitcast float %143 to i32, !dbg !19
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = bitcast float %133 to i32, !dbg !19
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !19
  %152 = bitcast i32 %151 to float, !dbg !19
  %153 = fsub float %146, %138, !dbg !33
  %154 = fadd float %133, %152, !dbg !34
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !35
  %156 = tail call float @llvm.nvvm.div.full(float %152, float %154), !dbg !36
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !37
  %158 = fmul float %153, %157, !dbg !38
  %159 = fadd float %138, %158, !dbg !39
  %160 = fadd float %143, %149, !dbg !31
  %161 = fmul float %153, %153, !dbg !40
  %162 = fmul float %133, %161, !dbg !41
  %163 = fmul float %157, %162, !dbg !42
  %164 = fadd float %160, %163, !dbg !43
  %165 = bitcast float %159 to i32, !dbg !19
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !19
  %167 = bitcast i32 %166 to float, !dbg !19
  %168 = bitcast float %164 to i32, !dbg !19
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !19
  %170 = bitcast i32 %169 to float, !dbg !19
  %171 = bitcast float %154 to i32, !dbg !19
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !19
  %173 = bitcast i32 %172 to float, !dbg !19
  %174 = fsub float %167, %159, !dbg !33
  %175 = fadd float %154, %173, !dbg !34
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !35
  %177 = tail call float @llvm.nvvm.div.full(float %173, float %175), !dbg !36
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !37
  %179 = fmul float %174, %178, !dbg !38
  %180 = fadd float %159, %179, !dbg !39
  %181 = fadd float %164, %170, !dbg !31
  %182 = fmul float %174, %174, !dbg !40
  %183 = fmul float %154, %182, !dbg !41
  %184 = fmul float %178, %183, !dbg !42
  %185 = fadd float %181, %184, !dbg !43
  %186 = bitcast float %180 to i32, !dbg !19
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !19
  %188 = bitcast i32 %187 to float, !dbg !19
  %189 = bitcast float %185 to i32, !dbg !19
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !19
  %191 = bitcast i32 %190 to float, !dbg !19
  %192 = bitcast float %175 to i32, !dbg !19
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 1, i32 31), !dbg !19
  %194 = bitcast i32 %193 to float, !dbg !19
  %195 = fsub float %188, %180, !dbg !33
  %196 = fadd float %175, %194, !dbg !34
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !35
  %198 = tail call float @llvm.nvvm.div.full(float %194, float %196), !dbg !36
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !37
  %200 = fmul float %195, %199, !dbg !38
  %201 = fadd float %180, %200, !dbg !39
  %202 = fadd float %185, %191, !dbg !31
  %203 = fmul float %195, %195, !dbg !40
  %204 = fmul float %175, %203, !dbg !41
  %205 = fmul float %199, %204, !dbg !42
  %206 = fadd float %202, %205, !dbg !43
  %207 = and i32 %23, 15, !dbg !19
  %208 = icmp eq i32 %25, 0, !dbg !19
  %209 = lshr exact i32 %24, 5, !dbg !19
  %210 = or disjoint i32 %209, %207, !dbg !19
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !19
  %212 = bitcast float %201 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 %208) #5, !dbg !19
  %213 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %210, !dbg !19
  %214 = bitcast float %206 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 %208) #5, !dbg !19
  %215 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %210, !dbg !19
  %216 = bitcast float %196 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 %208) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %217 = icmp slt i32 %22, 32, !dbg !19
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !19
  %219 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %218, i1 %217) #5, !dbg !19
  %220 = bitcast i32 %219 to float, !dbg !19
  %221 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %22, !dbg !19
  %222 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %217) #5, !dbg !19
  %223 = bitcast i32 %222 to float, !dbg !19
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %22, !dbg !19
  %225 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %224, i1 %217) #5, !dbg !19
  %226 = bitcast i32 %225 to float, !dbg !19
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !19
  %228 = bitcast i32 %227 to float, !dbg !19
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !19
  %230 = bitcast i32 %229 to float, !dbg !19
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !19
  %232 = bitcast i32 %231 to float, !dbg !19
  %233 = fsub float %228, %220, !dbg !33
  %234 = fadd float %226, %232, !dbg !34
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !35
  %236 = tail call float @llvm.nvvm.div.full(float %232, float %234), !dbg !36
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !37
  %238 = fmul float %233, %237, !dbg !38
  %239 = fadd float %238, %220, !dbg !39
  %240 = fadd float %223, %230, !dbg !31
  %241 = fmul float %233, %233, !dbg !40
  %242 = fmul float %241, %226, !dbg !41
  %243 = fmul float %242, %237, !dbg !42
  %244 = fadd float %240, %243, !dbg !43
  %245 = bitcast float %239 to i32, !dbg !19
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !19
  %247 = bitcast i32 %246 to float, !dbg !19
  %248 = bitcast float %244 to i32, !dbg !19
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !19
  %250 = bitcast i32 %249 to float, !dbg !19
  %251 = bitcast float %234 to i32, !dbg !19
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !19
  %253 = bitcast i32 %252 to float, !dbg !19
  %254 = fsub float %247, %239, !dbg !33
  %255 = fadd float %234, %253, !dbg !34
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !35
  %257 = tail call float @llvm.nvvm.div.full(float %253, float %255), !dbg !36
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !37
  %259 = fmul float %254, %258, !dbg !38
  %260 = fadd float %239, %259, !dbg !39
  %261 = fadd float %244, %250, !dbg !31
  %262 = fmul float %254, %254, !dbg !40
  %263 = fmul float %234, %262, !dbg !41
  %264 = fmul float %258, %263, !dbg !42
  %265 = fadd float %261, %264, !dbg !43
  %266 = bitcast float %260 to i32, !dbg !19
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !19
  %268 = bitcast i32 %267 to float, !dbg !19
  %269 = bitcast float %265 to i32, !dbg !19
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !19
  %271 = bitcast i32 %270 to float, !dbg !19
  %272 = bitcast float %255 to i32, !dbg !19
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !19
  %274 = bitcast i32 %273 to float, !dbg !19
  %275 = fsub float %268, %260, !dbg !33
  %276 = fadd float %255, %274, !dbg !34
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !35
  %278 = tail call float @llvm.nvvm.div.full(float %274, float %276), !dbg !36
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !37
  %280 = fmul float %275, %279, !dbg !38
  %281 = fadd float %260, %280, !dbg !39
  %282 = fadd float %265, %271, !dbg !31
  %283 = fmul float %275, %275, !dbg !40
  %284 = fmul float %255, %283, !dbg !41
  %285 = fmul float %279, %284, !dbg !42
  %286 = fadd float %282, %285, !dbg !43
  %287 = bitcast float %281 to i32, !dbg !19
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !19
  %289 = bitcast i32 %288 to float, !dbg !19
  %290 = bitcast float %286 to i32, !dbg !19
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !19
  %292 = bitcast i32 %291 to float, !dbg !19
  %293 = bitcast float %276 to i32, !dbg !19
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !19
  %295 = bitcast i32 %294 to float, !dbg !19
  %296 = fsub float %289, %281, !dbg !33
  %297 = fadd float %276, %295, !dbg !34
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !35
  %299 = tail call float @llvm.nvvm.div.full(float %295, float %297), !dbg !36
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !37
  %301 = fmul float %296, %300, !dbg !38
  %302 = fadd float %281, %301, !dbg !39
  %303 = fadd float %286, %292, !dbg !31
  %304 = fmul float %296, %296, !dbg !40
  %305 = fmul float %276, %304, !dbg !41
  %306 = fmul float %300, %305, !dbg !42
  %307 = fadd float %303, %306, !dbg !43
  %308 = and i32 %22, 15, !dbg !19
  %309 = icmp eq i32 %308, 0, !dbg !19
  %310 = and i1 %217, %309, !dbg !19
  %311 = bitcast float %302 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %311, i1 %310) #5, !dbg !19
  %312 = bitcast float %307 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %312, i1 %310) #5, !dbg !19
  %313 = bitcast float %297 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %313, i1 %310) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !19
  %315 = load float, ptr addrspace(3) %314, align 16, !dbg !19
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %209, !dbg !19
  %317 = load float, ptr addrspace(3) %316, align 16, !dbg !19
  %318 = tail call float @llvm.nvvm.div.full(float %317, float 3.072000e+03), !dbg !44
  %319 = fadd float %318, 0x3EB0C6F7A0000000, !dbg !45
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i11 = icmp eq i32 %321, 0, !dbg !46
  br i1 %.not.i11, label %324, label %322, !dbg !46

322:                                              ; preds = %__nv_rsqrtf.exit
  %323 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %319), !dbg !46
  br label %__nv_rsqrtf.exit13, !dbg !46

324:                                              ; preds = %__nv_rsqrtf.exit
  %325 = tail call float @llvm.nvvm.rsqrt.approx.f(float %319), !dbg !46
  br label %__nv_rsqrtf.exit13, !dbg !46

__nv_rsqrtf.exit13:                               ; preds = %324, %322
  %.0.i12 = phi float [ %323, %322 ], [ %325, %324 ], !dbg !46
  %326 = icmp slt i32 %21, 4112, !dbg !13
  %327 = insertelement <4 x i1> poison, i1 %326, i64 0, !dbg !47
  %328 = shufflevector <4 x i1> %327, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !47
  %329 = and i32 %22, 1023, !dbg !14
  %330 = zext nneg i32 %329 to i64, !dbg !48
  %331 = lshr i32 %28, 9
  %332 = and i32 %331, 2
  %333 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %332
  %334 = and i32 %28, 2046
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %333, i32 %334
  %336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %329
  %337 = getelementptr inbounds nuw i8, ptr addrspace(3) %336, i32 2052
  %338 = lshr exact i32 %334, 1
  %339 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %338
  %340 = getelementptr inbounds nuw float, ptr addrspace(3) %339, i32 %334
  %341 = shl i32 %22, 2
  %342 = and i32 %341, 2044
  %invariant.op = or disjoint i32 %.lobit, 2, !dbg !48
  %.reass = or disjoint i32 %342, %invariant.op
  %343 = lshr i32 %.reass, 1
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %.reass
  %346 = lshr exact i32 %342, 1
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346
  %348 = or disjoint i32 %342, %.lobit
  %349 = getelementptr float, ptr addrspace(3) %347, i32 %348
  %350 = sext i32 %31 to i64, !dbg !49
  %351 = getelementptr bfloat, ptr addrspace(1) %0, i64 %350, !dbg !49
  %352 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %351, i1 %27) #5, !dbg !50
  %353 = bitcast i32 %352 to <2 x bfloat>, !dbg !50
  %354 = extractelement <2 x bfloat> %353, i64 0, !dbg !50
  %355 = extractelement <2 x bfloat> %353, i64 1, !dbg !50
  %356 = fpext bfloat %354 to float, !dbg !51
  %357 = fpext bfloat %355 to float, !dbg !51
  %358 = or disjoint i64 %330, 3072, !dbg !52
  %359 = getelementptr float, ptr addrspace(1) %1, i64 %358, !dbg !53
  %360 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %359, i1 true) #5, !dbg !54
  %361 = bitcast i32 %360 to float, !dbg !54
  %362 = getelementptr bfloat, ptr addrspace(1) %2, i64 %358, !dbg !55
  %363 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %362, i1 true) #5, !dbg !56
  %364 = bitcast i16 %363 to bfloat, !dbg !56
  %365 = fpext bfloat %364 to float, !dbg !57
  %366 = getelementptr float, ptr addrspace(1) %1, i64 %330, !dbg !58
  %367 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %366, i1 true) #5, !dbg !59
  %368 = bitcast i32 %367 to float, !dbg !59
  %369 = getelementptr bfloat, ptr addrspace(1) %2, i64 %330, !dbg !60
  %370 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %369, i1 true) #5, !dbg !61
  %371 = bitcast i16 %370 to bfloat, !dbg !61
  %372 = fpext bfloat %371 to float, !dbg !62
  %373 = fsub float %356, %315, !dbg !63
  %374 = fsub float %357, %315, !dbg !63
  %375 = fmul float %.0.i12, %373, !dbg !64
  %376 = fmul float %.0.i12, %374, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %377 = bitcast float %375 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %377, i1 true) #5, !dbg !64
  %378 = bitcast float %376 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %378, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %379 = fadd float %361, %365, !dbg !65
  %380 = fadd float %379, 1.000000e+00, !dbg !66
  %381 = fadd float %368, %372, !dbg !67
  %382 = load <2 x float>, ptr addrspace(3) %340, align 4, !dbg !64
  %383 = insertelement <2 x float> poison, float %380, i64 0, !dbg !68
  %384 = shufflevector <2 x float> %383, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %385 = fmul <2 x float> %384, %382, !dbg !68
  %386 = insertelement <2 x float> poison, float %381, i64 0, !dbg !69
  %387 = shufflevector <2 x float> %386, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !69
  %388 = shufflevector <2 x float> %385, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !69
  %389 = fadd <4 x float> %387, %388, !dbg !69
  %390 = fcmp olt <4 x float> %389, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !70
  %391 = fcmp ogt <4 x float> %389, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !70
  %392 = shufflevector <4 x i1> %390, <4 x i1> %391, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !70
  %393 = select <4 x i1> %392, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %389, !dbg !72
  %394 = select <4 x i1> %328, <4 x float> %393, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !47
  %395 = getelementptr bfloat, ptr addrspace(1) %3, i64 %350, !dbg !73
  %396 = extractelement <4 x float> %389, i64 1, !dbg !74
  %397 = fptrunc float %396 to bfloat, !dbg !74
  %398 = extractelement <4 x float> %389, i64 0, !dbg !74
  %399 = fptrunc float %398 to bfloat, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %400 = bitcast bfloat %397 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %336, <1 x i16> %400, i1 true) #5, !dbg !74
  %401 = bitcast bfloat %399 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %337, <1 x i16> %401, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %402 = load i32, ptr addrspace(3) %335, align 4, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %395, i1 %27) #5, !dbg !74
  %403 = or disjoint i64 %330, 1024, !dbg !75
  %404 = add i32 %31, 1024, !dbg !76
  %405 = sext i32 %404 to i64, !dbg !49
  %406 = getelementptr bfloat, ptr addrspace(1) %0, i64 %405, !dbg !49
  %407 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %406, i1 %27) #5, !dbg !50
  %408 = bitcast i32 %407 to <2 x bfloat>, !dbg !50
  %409 = extractelement <2 x bfloat> %408, i64 0, !dbg !50
  %410 = extractelement <2 x bfloat> %408, i64 1, !dbg !50
  %411 = fpext bfloat %409 to float, !dbg !51
  %412 = fpext bfloat %410 to float, !dbg !51
  %413 = or disjoint i64 %330, 4096, !dbg !52
  %414 = getelementptr float, ptr addrspace(1) %1, i64 %413, !dbg !53
  %415 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %414, i1 true) #5, !dbg !54
  %416 = bitcast i32 %415 to float, !dbg !54
  %417 = getelementptr bfloat, ptr addrspace(1) %2, i64 %413, !dbg !55
  %418 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %417, i1 true) #5, !dbg !56
  %419 = bitcast i16 %418 to bfloat, !dbg !56
  %420 = fpext bfloat %419 to float, !dbg !57
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %403, !dbg !58
  %422 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %421, i1 true) #5, !dbg !59
  %423 = bitcast i32 %422 to float, !dbg !59
  %424 = getelementptr bfloat, ptr addrspace(1) %2, i64 %403, !dbg !60
  %425 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %424, i1 true) #5, !dbg !61
  %426 = bitcast i16 %425 to bfloat, !dbg !61
  %427 = fpext bfloat %426 to float, !dbg !62
  %428 = fsub float %411, %315, !dbg !63
  %429 = fsub float %412, %315, !dbg !63
  %430 = fmul float %.0.i12, %428, !dbg !64
  %431 = fmul float %.0.i12, %429, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %432 = bitcast float %430 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %432, i1 true) #5, !dbg !64
  %433 = bitcast float %431 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %433, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %434 = fadd float %416, %420, !dbg !65
  %435 = fadd float %434, 1.000000e+00, !dbg !66
  %436 = fadd float %423, %427, !dbg !67
  %437 = fcmp uno <4 x float> %394, zeroinitializer, !dbg !77
  %438 = load <2 x float>, ptr addrspace(3) %340, align 4, !dbg !64
  %439 = insertelement <2 x float> poison, float %435, i64 0, !dbg !68
  %440 = shufflevector <2 x float> %439, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %441 = fmul <2 x float> %440, %438, !dbg !68
  %442 = insertelement <2 x float> poison, float %436, i64 0, !dbg !69
  %443 = shufflevector <2 x float> %442, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !69
  %444 = shufflevector <2 x float> %441, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !69
  %445 = fadd <4 x float> %443, %444, !dbg !69
  %446 = fcmp ogt <4 x float> %394, %445, !dbg !70
  %447 = fcmp olt <4 x float> %394, %445, !dbg !70
  %448 = shufflevector <4 x i1> %446, <4 x i1> %447, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !70
  %449 = or <4 x i1> %437, %448, !dbg !78
  %450 = select <4 x i1> %449, <4 x float> %394, <4 x float> %445, !dbg !72
  %451 = select <4 x i1> %328, <4 x float> %450, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !47
  %452 = getelementptr bfloat, ptr addrspace(1) %3, i64 %405, !dbg !73
  %453 = extractelement <4 x float> %445, i64 1, !dbg !74
  %454 = fptrunc float %453 to bfloat, !dbg !74
  %455 = extractelement <4 x float> %445, i64 0, !dbg !74
  %456 = fptrunc float %455 to bfloat, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %457 = bitcast bfloat %454 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %336, <1 x i16> %457, i1 true) #5, !dbg !74
  %458 = bitcast bfloat %456 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %337, <1 x i16> %458, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %459 = load i32, ptr addrspace(3) %335, align 4, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %459, ptr addrspace(1) %452, i1 %27) #5, !dbg !74
  %460 = or disjoint i64 %330, 2048, !dbg !75
  %461 = add i32 %31, 2048, !dbg !76
  %462 = sext i32 %461 to i64, !dbg !49
  %463 = getelementptr bfloat, ptr addrspace(1) %0, i64 %462, !dbg !49
  %464 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %463, i1 %27) #5, !dbg !50
  %465 = bitcast i32 %464 to <2 x bfloat>, !dbg !50
  %466 = extractelement <2 x bfloat> %465, i64 0, !dbg !50
  %467 = extractelement <2 x bfloat> %465, i64 1, !dbg !50
  %468 = fpext bfloat %466 to float, !dbg !51
  %469 = fpext bfloat %467 to float, !dbg !51
  %470 = or disjoint i64 %330, 5120, !dbg !52
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !53
  %472 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %471, i1 true) #5, !dbg !54
  %473 = bitcast i32 %472 to float, !dbg !54
  %474 = getelementptr bfloat, ptr addrspace(1) %2, i64 %470, !dbg !55
  %475 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %474, i1 true) #5, !dbg !56
  %476 = bitcast i16 %475 to bfloat, !dbg !56
  %477 = fpext bfloat %476 to float, !dbg !57
  %478 = getelementptr float, ptr addrspace(1) %1, i64 %460, !dbg !58
  %479 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %478, i1 true) #5, !dbg !59
  %480 = bitcast i32 %479 to float, !dbg !59
  %481 = getelementptr bfloat, ptr addrspace(1) %2, i64 %460, !dbg !60
  %482 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %481, i1 true) #5, !dbg !61
  %483 = bitcast i16 %482 to bfloat, !dbg !61
  %484 = fpext bfloat %483 to float, !dbg !62
  %485 = fsub float %468, %315, !dbg !63
  %486 = fsub float %469, %315, !dbg !63
  %487 = fmul float %.0.i12, %485, !dbg !64
  %488 = fmul float %.0.i12, %486, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %489 = bitcast float %487 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %489, i1 true) #5, !dbg !64
  %490 = bitcast float %488 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %490, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %491 = fadd float %473, %477, !dbg !65
  %492 = fadd float %491, 1.000000e+00, !dbg !66
  %493 = fadd float %480, %484, !dbg !67
  %494 = fcmp uno <4 x float> %451, zeroinitializer, !dbg !77
  %495 = load <2 x float>, ptr addrspace(3) %340, align 4, !dbg !64
  %496 = insertelement <2 x float> poison, float %492, i64 0, !dbg !68
  %497 = shufflevector <2 x float> %496, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %498 = fmul <2 x float> %497, %495, !dbg !68
  %499 = insertelement <2 x float> poison, float %493, i64 0, !dbg !69
  %500 = shufflevector <2 x float> %499, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !69
  %501 = shufflevector <2 x float> %498, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !69
  %502 = fadd <4 x float> %500, %501, !dbg !69
  %503 = fcmp ogt <4 x float> %451, %502, !dbg !70
  %504 = fcmp olt <4 x float> %451, %502, !dbg !70
  %505 = shufflevector <4 x i1> %503, <4 x i1> %504, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !70
  %506 = or <4 x i1> %494, %505, !dbg !78
  %507 = select <4 x i1> %506, <4 x float> %451, <4 x float> %502, !dbg !72
  %508 = select <4 x i1> %328, <4 x float> %507, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !47
  %509 = getelementptr bfloat, ptr addrspace(1) %3, i64 %462, !dbg !73
  %510 = extractelement <4 x float> %502, i64 1, !dbg !74
  %511 = fptrunc float %510 to bfloat, !dbg !74
  %512 = extractelement <4 x float> %502, i64 0, !dbg !74
  %513 = fptrunc float %512 to bfloat, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %514 = bitcast bfloat %511 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %336, <1 x i16> %514, i1 true) #5, !dbg !74
  %515 = bitcast bfloat %513 to <1 x i16>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %337, <1 x i16> %515, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %516 = load i32, ptr addrspace(3) %335, align 4, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %516, ptr addrspace(1) %509, i1 %27) #5, !dbg !74
  %517 = and i32 %22, 1, !dbg !11
  %518 = or disjoint i32 %21, %517, !dbg !12
  %519 = icmp slt i32 %518, 4112, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %520 = extractelement <4 x float> %508, i64 3, !dbg !79
  %521 = bitcast float %520 to i32, !dbg !79
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 16, i32 31), !dbg !79
  %523 = bitcast i32 %522 to float, !dbg !79
  %524 = fcmp olt float %520, %523, !dbg !81
  %525 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !82
  %526 = extractelement <4 x i1> %525, i64 3, !dbg !84
  %527 = or i1 %526, %524, !dbg !84
  %528 = select i1 %527, float %520, float %523, !dbg !85
  %529 = bitcast float %528 to i32, !dbg !79
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 8, i32 31), !dbg !79
  %531 = bitcast i32 %530 to float, !dbg !79
  %532 = fcmp olt float %528, %531, !dbg !81
  %533 = fcmp uno float %528, 0.000000e+00, !dbg !86
  %534 = or i1 %532, %533, !dbg !84
  %535 = select i1 %534, float %528, float %531, !dbg !85
  %536 = bitcast float %535 to i32, !dbg !79
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 4, i32 31), !dbg !79
  %538 = bitcast i32 %537 to float, !dbg !79
  %539 = fcmp olt float %535, %538, !dbg !81
  %540 = fcmp uno float %535, 0.000000e+00, !dbg !86
  %541 = or i1 %539, %540, !dbg !84
  %542 = select i1 %541, float %535, float %538, !dbg !85
  %543 = bitcast float %542 to i32, !dbg !79
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 2, i32 31), !dbg !79
  %545 = bitcast i32 %544 to float, !dbg !79
  %546 = fcmp olt float %542, %545, !dbg !81
  %547 = fcmp uno float %542, 0.000000e+00, !dbg !86
  %548 = or i1 %546, %547, !dbg !84
  %549 = select i1 %548, float %542, float %545, !dbg !85
  %550 = bitcast float %549 to i32, !dbg !79
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 1, i32 31), !dbg !79
  %552 = bitcast i32 %551 to float, !dbg !79
  %553 = fcmp olt float %549, %552, !dbg !81
  %554 = fcmp uno float %549, 0.000000e+00, !dbg !86
  %555 = or i1 %553, %554, !dbg !84
  %556 = extractelement <4 x float> %508, i64 2, !dbg !79
  %557 = bitcast float %556 to i32, !dbg !79
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 16, i32 31), !dbg !79
  %559 = bitcast i32 %558 to float, !dbg !79
  %560 = fcmp olt float %556, %559, !dbg !81
  %561 = extractelement <4 x i1> %525, i64 2, !dbg !84
  %562 = or i1 %561, %560, !dbg !84
  %563 = select i1 %562, float %556, float %559, !dbg !85
  %564 = bitcast float %563 to i32, !dbg !79
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 8, i32 31), !dbg !79
  %566 = bitcast i32 %565 to float, !dbg !79
  %567 = fcmp olt float %563, %566, !dbg !81
  %568 = fcmp uno float %563, 0.000000e+00, !dbg !86
  %569 = or i1 %567, %568, !dbg !84
  %570 = select i1 %569, float %563, float %566, !dbg !85
  %571 = bitcast float %570 to i32, !dbg !79
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !79
  %573 = bitcast i32 %572 to float, !dbg !79
  %574 = fcmp olt float %570, %573, !dbg !81
  %575 = fcmp uno float %570, 0.000000e+00, !dbg !86
  %576 = or i1 %574, %575, !dbg !84
  %577 = select i1 %576, float %570, float %573, !dbg !85
  %578 = bitcast float %577 to i32, !dbg !79
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 2, i32 31), !dbg !79
  %580 = bitcast i32 %579 to float, !dbg !79
  %581 = fcmp olt float %577, %580, !dbg !81
  %582 = fcmp uno float %577, 0.000000e+00, !dbg !86
  %583 = or i1 %581, %582, !dbg !84
  %584 = select i1 %583, float %577, float %580, !dbg !85
  %585 = bitcast float %584 to i32, !dbg !79
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 1, i32 31), !dbg !79
  %587 = bitcast i32 %586 to float, !dbg !79
  %588 = fcmp olt float %584, %587, !dbg !81
  %589 = fcmp uno float %584, 0.000000e+00, !dbg !86
  %590 = or i1 %588, %589, !dbg !84
  %591 = and i32 %23, 31, !dbg !79
  %592 = getelementptr float, ptr addrspace(3) @global_smem, i32 %591, !dbg !79
  %593 = select i1 %555, i32 %550, i32 %551, !dbg !85
  %594 = insertelement <1 x i32> poison, i32 %593, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %594, i1 %208) #5, !dbg !79
  %595 = or disjoint i32 %591, 32, !dbg !79
  %596 = getelementptr float, ptr addrspace(3) @global_smem, i32 %595, !dbg !79
  %597 = select i1 %590, i32 %585, i32 %586, !dbg !85
  %598 = insertelement <1 x i32> poison, i32 %597, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %596, <1 x i32> %598, i1 %208) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %599 = icmp slt i32 %22, 64, !dbg !79
  %600 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %218, i1 %599) #5, !dbg !79
  %601 = bitcast i32 %600 to float, !dbg !79
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 16, i32 31), !dbg !79
  %603 = bitcast i32 %602 to float, !dbg !79
  %604 = fcmp olt float %601, %603, !dbg !81
  %605 = fcmp uno float %601, 0.000000e+00, !dbg !86
  %606 = or i1 %605, %604, !dbg !84
  %607 = select i1 %606, float %601, float %603, !dbg !85
  %608 = bitcast float %607 to i32, !dbg !79
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 8, i32 31), !dbg !79
  %610 = bitcast i32 %609 to float, !dbg !79
  %611 = fcmp olt float %607, %610, !dbg !81
  %612 = fcmp uno float %607, 0.000000e+00, !dbg !86
  %613 = or i1 %611, %612, !dbg !84
  %614 = select i1 %613, float %607, float %610, !dbg !85
  %615 = bitcast float %614 to i32, !dbg !79
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 4, i32 31), !dbg !79
  %617 = bitcast i32 %616 to float, !dbg !79
  %618 = fcmp olt float %614, %617, !dbg !81
  %619 = fcmp uno float %614, 0.000000e+00, !dbg !86
  %620 = or i1 %618, %619, !dbg !84
  %621 = select i1 %620, float %614, float %617, !dbg !85
  %622 = bitcast float %621 to i32, !dbg !79
  %623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 2, i32 31), !dbg !79
  %624 = bitcast i32 %623 to float, !dbg !79
  %625 = fcmp olt float %621, %624, !dbg !81
  %626 = fcmp uno float %621, 0.000000e+00, !dbg !86
  %627 = or i1 %625, %626, !dbg !84
  %628 = select i1 %627, float %621, float %624, !dbg !85
  %629 = bitcast float %628 to i32, !dbg !79
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 1, i32 31), !dbg !79
  %631 = bitcast i32 %630 to float, !dbg !79
  %632 = fcmp olt float %628, %631, !dbg !81
  %633 = fcmp uno float %628, 0.000000e+00, !dbg !86
  %634 = or i1 %632, %633, !dbg !84
  %635 = and i1 %599, %208, !dbg !79
  %636 = select i1 %634, i32 %629, i32 %630, !dbg !85
  %637 = insertelement <1 x i32> poison, i32 %636, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %637, i1 %635) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %638 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %639 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %640 = bitcast float %638 to i32, !dbg !87
  %641 = bitcast float %639 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %640, i32 %641, i1 true) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %642 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %517, !dbg !87
  %643 = load float, ptr addrspace(3) %642, align 4, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %644 = extractelement <4 x float> %508, i64 1, !dbg !88
  %645 = bitcast float %644 to i32, !dbg !88
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 16, i32 31), !dbg !88
  %647 = bitcast i32 %646 to float, !dbg !88
  %648 = fcmp ogt float %644, %647, !dbg !89
  %649 = extractelement <4 x i1> %525, i64 1, !dbg !90
  %650 = or i1 %649, %648, !dbg !90
  %651 = select i1 %650, float %644, float %647, !dbg !91
  %652 = bitcast float %651 to i32, !dbg !88
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 8, i32 31), !dbg !88
  %654 = bitcast i32 %653 to float, !dbg !88
  %655 = fcmp ogt float %651, %654, !dbg !89
  %656 = fcmp uno float %651, 0.000000e+00, !dbg !82
  %657 = or i1 %655, %656, !dbg !90
  %658 = select i1 %657, float %651, float %654, !dbg !91
  %659 = bitcast float %658 to i32, !dbg !88
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !88
  %661 = bitcast i32 %660 to float, !dbg !88
  %662 = fcmp ogt float %658, %661, !dbg !89
  %663 = fcmp uno float %658, 0.000000e+00, !dbg !82
  %664 = or i1 %662, %663, !dbg !90
  %665 = select i1 %664, float %658, float %661, !dbg !91
  %666 = bitcast float %665 to i32, !dbg !88
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 2, i32 31), !dbg !88
  %668 = bitcast i32 %667 to float, !dbg !88
  %669 = fcmp ogt float %665, %668, !dbg !89
  %670 = fcmp uno float %665, 0.000000e+00, !dbg !82
  %671 = or i1 %669, %670, !dbg !90
  %672 = select i1 %671, float %665, float %668, !dbg !91
  %673 = bitcast float %672 to i32, !dbg !88
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 1, i32 31), !dbg !88
  %675 = bitcast i32 %674 to float, !dbg !88
  %676 = fcmp ogt float %672, %675, !dbg !89
  %677 = fcmp uno float %672, 0.000000e+00, !dbg !82
  %678 = or i1 %676, %677, !dbg !90
  %679 = extractelement <4 x float> %508, i64 0, !dbg !88
  %680 = bitcast float %679 to i32, !dbg !88
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 16, i32 31), !dbg !88
  %682 = bitcast i32 %681 to float, !dbg !88
  %683 = fcmp ogt float %679, %682, !dbg !89
  %684 = extractelement <4 x i1> %525, i64 0, !dbg !90
  %685 = or i1 %684, %683, !dbg !90
  %686 = select i1 %685, float %679, float %682, !dbg !91
  %687 = bitcast float %686 to i32, !dbg !88
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 8, i32 31), !dbg !88
  %689 = bitcast i32 %688 to float, !dbg !88
  %690 = fcmp ogt float %686, %689, !dbg !89
  %691 = fcmp uno float %686, 0.000000e+00, !dbg !82
  %692 = or i1 %690, %691, !dbg !90
  %693 = select i1 %692, float %686, float %689, !dbg !91
  %694 = bitcast float %693 to i32, !dbg !88
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 4, i32 31), !dbg !88
  %696 = bitcast i32 %695 to float, !dbg !88
  %697 = fcmp ogt float %693, %696, !dbg !89
  %698 = fcmp uno float %693, 0.000000e+00, !dbg !82
  %699 = or i1 %697, %698, !dbg !90
  %700 = select i1 %699, float %693, float %696, !dbg !91
  %701 = bitcast float %700 to i32, !dbg !88
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 2, i32 31), !dbg !88
  %703 = bitcast i32 %702 to float, !dbg !88
  %704 = fcmp ogt float %700, %703, !dbg !89
  %705 = fcmp uno float %700, 0.000000e+00, !dbg !82
  %706 = or i1 %704, %705, !dbg !90
  %707 = select i1 %706, float %700, float %703, !dbg !91
  %708 = bitcast float %707 to i32, !dbg !88
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 1, i32 31), !dbg !88
  %710 = bitcast i32 %709 to float, !dbg !88
  %711 = fcmp ogt float %707, %710, !dbg !89
  %712 = fcmp uno float %707, 0.000000e+00, !dbg !82
  %713 = or i1 %711, %712, !dbg !90
  %714 = select i1 %678, i32 %673, i32 %674, !dbg !91
  %715 = insertelement <1 x i32> poison, i32 %714, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %715, i1 %208) #5, !dbg !88
  %716 = select i1 %713, i32 %708, i32 %709, !dbg !91
  %717 = insertelement <1 x i32> poison, i32 %716, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %596, <1 x i32> %717, i1 %208) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %718 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %218, i1 %599) #5, !dbg !88
  %719 = bitcast i32 %718 to float, !dbg !88
  %720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 16, i32 31), !dbg !88
  %721 = bitcast i32 %720 to float, !dbg !88
  %722 = fcmp ogt float %719, %721, !dbg !89
  %723 = fcmp uno float %719, 0.000000e+00, !dbg !82
  %724 = or i1 %723, %722, !dbg !90
  %725 = select i1 %724, float %719, float %721, !dbg !91
  %726 = bitcast float %725 to i32, !dbg !88
  %727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %726, i32 8, i32 31), !dbg !88
  %728 = bitcast i32 %727 to float, !dbg !88
  %729 = fcmp ogt float %725, %728, !dbg !89
  %730 = fcmp uno float %725, 0.000000e+00, !dbg !82
  %731 = or i1 %729, %730, !dbg !90
  %732 = select i1 %731, float %725, float %728, !dbg !91
  %733 = bitcast float %732 to i32, !dbg !88
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %733, i32 4, i32 31), !dbg !88
  %735 = bitcast i32 %734 to float, !dbg !88
  %736 = fcmp ogt float %732, %735, !dbg !89
  %737 = fcmp uno float %732, 0.000000e+00, !dbg !82
  %738 = or i1 %736, %737, !dbg !90
  %739 = select i1 %738, float %732, float %735, !dbg !91
  %740 = bitcast float %739 to i32, !dbg !88
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 2, i32 31), !dbg !88
  %742 = bitcast i32 %741 to float, !dbg !88
  %743 = fcmp ogt float %739, %742, !dbg !89
  %744 = fcmp uno float %739, 0.000000e+00, !dbg !82
  %745 = or i1 %743, %744, !dbg !90
  %746 = select i1 %745, float %739, float %742, !dbg !91
  %747 = bitcast float %746 to i32, !dbg !88
  %748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %747, i32 1, i32 31), !dbg !88
  %749 = bitcast i32 %748 to float, !dbg !88
  %750 = fcmp ogt float %746, %749, !dbg !89
  %751 = fcmp uno float %746, 0.000000e+00, !dbg !82
  %752 = or i1 %750, %751, !dbg !90
  %753 = select i1 %752, i32 %747, i32 %748, !dbg !91
  %754 = insertelement <1 x i32> poison, i32 %753, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %754, i1 %635) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %755 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %756 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %757 = bitcast float %755 to i32, !dbg !92
  %758 = bitcast float %756 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %757, i32 %758, i1 true) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %759 = load float, ptr addrspace(3) %642, align 4, !dbg !92
  %760 = sext i32 %518 to i64, !dbg !93
  %761 = getelementptr bfloat, ptr addrspace(1) %4, i64 %760, !dbg !93
  %762 = fptrunc float %643 to bfloat, !dbg !87
  %763 = and i32 %22, 1022, !dbg !87
  %764 = icmp eq i32 %763, 0, !dbg !87
  %765 = bitcast bfloat %762 to i16, !dbg !87
  %766 = and i1 %764, %519, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %765, ptr addrspace(1) %761, i1 %766) #5, !dbg !87
  %767 = getelementptr bfloat, ptr addrspace(1) %5, i64 %760, !dbg !94
  %768 = fptrunc float %759 to bfloat, !dbg !92
  %769 = bitcast bfloat %768 to i16, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %769, ptr addrspace(1) %767, i1 %766) #5, !dbg !92
  %770 = getelementptr bfloat, ptr addrspace(1) %6, i64 %760, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %765, ptr addrspace(1) %770, i1 %766) #5, !dbg !96
  %771 = getelementptr bfloat, ptr addrspace(1) %7, i64 %760, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %769, ptr addrspace(1) %771, i1 %766) #5, !dbg !98
  %772 = getelementptr bfloat, ptr addrspace(1) %8, i64 %760, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %765, ptr addrspace(1) %772, i1 %766) #5, !dbg !100
  %773 = getelementptr bfloat, ptr addrspace(1) %9, i64 %760, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %769, ptr addrspace(1) %773, i1 %766) #5, !dbg !102
  %774 = getelementptr bfloat, ptr addrspace(1) %10, i64 %760, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %765, ptr addrspace(1) %774, i1 %766) #5, !dbg !104
  %775 = getelementptr bfloat, ptr addrspace(1) %11, i64 %760, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %769, ptr addrspace(1) %775, i1 %766) #5, !dbg !106
  %.inv = fcmp oge float %638, 0.000000e+00, !dbg !107
  %776 = select i1 %.inv, float 0.000000e+00, float %638, !dbg !107
  %.inv4 = fcmp oge float %639, 0.000000e+00, !dbg !107
  %777 = select i1 %.inv4, float 0.000000e+00, float %639, !dbg !107
  %778 = fsub float 0.000000e+00, %776, !dbg !109
  %779 = fsub float 0.000000e+00, %777, !dbg !109
  %.inv5 = fcmp ole float %755, 0.000000e+00, !dbg !110
  %780 = select i1 %.inv5, float 0.000000e+00, float %755, !dbg !110
  %.inv6 = fcmp ole float %756, 0.000000e+00, !dbg !110
  %781 = select i1 %.inv6, float 0.000000e+00, float %756, !dbg !110
  %782 = fcmp ogt float %778, %780, !dbg !112
  %783 = fcmp ogt float %779, %781, !dbg !112
  %784 = fcmp uno float %778, 0.000000e+00, !dbg !114
  %785 = fcmp uno float %779, 0.000000e+00, !dbg !114
  %786 = or i1 %784, %782, !dbg !115
  %787 = or i1 %785, %783, !dbg !115
  %788 = select i1 %786, float %778, float %780, !dbg !116
  %789 = select i1 %787, float %779, float %781, !dbg !116
  %790 = fmul float %788, 0x3F80204080000000, !dbg !117
  %791 = fmul float %789, 0x3F80204080000000, !dbg !117
  %792 = fcmp ogt float %790, 0x3EE4F8B580000000, !dbg !118
  %793 = fcmp ogt float %791, 0x3EE4F8B580000000, !dbg !118
  %794 = fcmp uno float %790, 0.000000e+00, !dbg !120
  %795 = fcmp uno float %791, 0.000000e+00, !dbg !120
  %796 = or i1 %792, %794, !dbg !121
  %797 = or i1 %793, %795, !dbg !121
  %798 = select i1 %796, float %790, float 0x3EE4F8B580000000, !dbg !122
  %799 = select i1 %797, float %791, float 0x3EE4F8B580000000, !dbg !122
  %800 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %798), !dbg !123
  %801 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %799), !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %802 = bitcast float %800 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %802, i1 true) #5, !dbg !124
  %803 = bitcast float %801 to <1 x i32>, !dbg !124
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %803, i1 true) #5, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %804 = lshr exact i32 %24, 6, !dbg !124
  %805 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %804, !dbg !124
  %806 = load float, ptr addrspace(3) %805, align 8, !dbg !124
  %807 = sext i32 %31 to i64, !dbg !125
  %808 = getelementptr bfloat, ptr addrspace(1) %3, i64 %807, !dbg !125
  %809 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %808, i1 %27) #5, !dbg !126
  %810 = bitcast i32 %809 to <2 x bfloat>, !dbg !126
  %811 = extractelement <2 x bfloat> %810, i64 0, !dbg !126
  %812 = extractelement <2 x bfloat> %810, i64 1, !dbg !126
  %813 = fpext bfloat %811 to float, !dbg !127
  %814 = fpext bfloat %812 to float, !dbg !127
  %815 = fmul float %806, %813, !dbg !124
  %816 = fmul float %806, %814, !dbg !124
  %817 = tail call float @llvm.nvvm.round.f(float %815) #5, !dbg !128
  %818 = tail call float @llvm.nvvm.round.f(float %816) #5, !dbg !128
  %819 = insertelement <2 x float> poison, float %817, i64 0, !dbg !129
  %820 = insertelement <2 x float> %819, float %818, i64 1, !dbg !129
  %821 = fcmp ogt <2 x float> %820, splat (float -1.270000e+02), !dbg !129
  %822 = fcmp uno <2 x float> %820, zeroinitializer, !dbg !131
  %823 = or <2 x i1> %821, %822, !dbg !132
  %824 = select <2 x i1> %823, <2 x float> %820, <2 x float> splat (float -1.270000e+02), !dbg !133
  %825 = fcmp olt <2 x float> %824, splat (float 1.270000e+02), !dbg !134
  %826 = fcmp uno <2 x float> %824, zeroinitializer, !dbg !136
  %827 = or <2 x i1> %825, %826, !dbg !137
  %828 = fptosi <2 x float> %824 to <2 x i8>, !dbg !138
  %829 = select <2 x i1> %827, <2 x i8> %828, <2 x i8> splat (i8 127), !dbg !139
  %830 = getelementptr i8, ptr addrspace(1) %12, i64 %807, !dbg !140
  %831 = bitcast <2 x i8> %829 to i16, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %831, ptr addrspace(1) %830, i1 %27) #5, !dbg !141
  %832 = getelementptr i8, ptr addrspace(1) %13, i64 %807, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %831, ptr addrspace(1) %832, i1 %27) #5, !dbg !143
  %833 = getelementptr i8, ptr addrspace(1) %14, i64 %807, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %831, ptr addrspace(1) %833, i1 %27) #5, !dbg !145
  %834 = getelementptr i8, ptr addrspace(1) %15, i64 %807, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %831, ptr addrspace(1) %834, i1 %27) #5, !dbg !147
  %835 = add i32 %31, 1024, !dbg !148
  %836 = sext i32 %835 to i64, !dbg !125
  %837 = getelementptr bfloat, ptr addrspace(1) %3, i64 %836, !dbg !125
  %838 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %837, i1 %27) #5, !dbg !126
  %839 = bitcast i32 %838 to <2 x bfloat>, !dbg !126
  %840 = extractelement <2 x bfloat> %839, i64 0, !dbg !126
  %841 = extractelement <2 x bfloat> %839, i64 1, !dbg !126
  %842 = fpext bfloat %840 to float, !dbg !127
  %843 = fpext bfloat %841 to float, !dbg !127
  %844 = fmul float %806, %842, !dbg !124
  %845 = fmul float %806, %843, !dbg !124
  %846 = tail call float @llvm.nvvm.round.f(float %844) #5, !dbg !128
  %847 = tail call float @llvm.nvvm.round.f(float %845) #5, !dbg !128
  %848 = insertelement <2 x float> poison, float %846, i64 0, !dbg !129
  %849 = insertelement <2 x float> %848, float %847, i64 1, !dbg !129
  %850 = fcmp ogt <2 x float> %849, splat (float -1.270000e+02), !dbg !129
  %851 = fcmp uno <2 x float> %849, zeroinitializer, !dbg !131
  %852 = or <2 x i1> %850, %851, !dbg !132
  %853 = select <2 x i1> %852, <2 x float> %849, <2 x float> splat (float -1.270000e+02), !dbg !133
  %854 = fcmp olt <2 x float> %853, splat (float 1.270000e+02), !dbg !134
  %855 = fcmp uno <2 x float> %853, zeroinitializer, !dbg !136
  %856 = or <2 x i1> %854, %855, !dbg !137
  %857 = fptosi <2 x float> %853 to <2 x i8>, !dbg !138
  %858 = select <2 x i1> %856, <2 x i8> %857, <2 x i8> splat (i8 127), !dbg !139
  %859 = getelementptr i8, ptr addrspace(1) %12, i64 %836, !dbg !140
  %860 = bitcast <2 x i8> %858 to i16, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %860, ptr addrspace(1) %859, i1 %27) #5, !dbg !141
  %861 = getelementptr i8, ptr addrspace(1) %13, i64 %836, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %860, ptr addrspace(1) %861, i1 %27) #5, !dbg !143
  %862 = getelementptr i8, ptr addrspace(1) %14, i64 %836, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %860, ptr addrspace(1) %862, i1 %27) #5, !dbg !145
  %863 = getelementptr i8, ptr addrspace(1) %15, i64 %836, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %860, ptr addrspace(1) %863, i1 %27) #5, !dbg !147
  %864 = add i32 %31, 2048, !dbg !148
  %865 = sext i32 %864 to i64, !dbg !125
  %866 = getelementptr bfloat, ptr addrspace(1) %3, i64 %865, !dbg !125
  %867 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %866, i1 %27) #5, !dbg !126
  %868 = bitcast i32 %867 to <2 x bfloat>, !dbg !126
  %869 = extractelement <2 x bfloat> %868, i64 0, !dbg !126
  %870 = extractelement <2 x bfloat> %868, i64 1, !dbg !126
  %871 = fpext bfloat %869 to float, !dbg !127
  %872 = fpext bfloat %870 to float, !dbg !127
  %873 = fmul float %806, %871, !dbg !124
  %874 = fmul float %806, %872, !dbg !124
  %875 = tail call float @llvm.nvvm.round.f(float %873) #5, !dbg !128
  %876 = tail call float @llvm.nvvm.round.f(float %874) #5, !dbg !128
  %877 = insertelement <2 x float> poison, float %875, i64 0, !dbg !129
  %878 = insertelement <2 x float> %877, float %876, i64 1, !dbg !129
  %879 = fcmp ogt <2 x float> %878, splat (float -1.270000e+02), !dbg !129
  %880 = fcmp uno <2 x float> %878, zeroinitializer, !dbg !131
  %881 = or <2 x i1> %879, %880, !dbg !132
  %882 = select <2 x i1> %881, <2 x float> %878, <2 x float> splat (float -1.270000e+02), !dbg !133
  %883 = fcmp olt <2 x float> %882, splat (float 1.270000e+02), !dbg !134
  %884 = fcmp uno <2 x float> %882, zeroinitializer, !dbg !136
  %885 = or <2 x i1> %883, %884, !dbg !137
  %886 = fptosi <2 x float> %882 to <2 x i8>, !dbg !138
  %887 = select <2 x i1> %885, <2 x i8> %886, <2 x i8> splat (i8 127), !dbg !139
  %888 = getelementptr i8, ptr addrspace(1) %12, i64 %865, !dbg !140
  %889 = bitcast <2 x i8> %887 to i16, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %889, ptr addrspace(1) %888, i1 %27) #5, !dbg !141
  %890 = getelementptr i8, ptr addrspace(1) %13, i64 %865, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %889, ptr addrspace(1) %890, i1 %27) #5, !dbg !143
  %891 = getelementptr i8, ptr addrspace(1) %14, i64 %865, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %889, ptr addrspace(1) %891, i1 %27) #5, !dbg !145
  %892 = getelementptr i8, ptr addrspace(1) %15, i64 %865, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %889, ptr addrspace(1) %892, i1 %27) #5, !dbg !147
  ret void, !dbg !149
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 41, scope: !6)
!19 = !DILocation(line: 229, column: 46, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 47, column: 79, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 208, column: 24, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 42, column: 51, scope: !6)
!26 = !DILocation(line: 210, column: 34, scope: !20, inlinedAt: !25)
!27 = !DILocation(line: 210, column: 26, scope: !20, inlinedAt: !25)
!28 = !DILocation(line: 211, column: 39, scope: !20, inlinedAt: !25)
!29 = !DILocation(line: 211, column: 31, scope: !20, inlinedAt: !25)
!30 = !DILocation(line: 211, column: 22, scope: !20, inlinedAt: !25)
!31 = !DILocation(line: 222, column: 15, scope: !32, inlinedAt: !22)
!32 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!33 = !DILocation(line: 217, column: 21, scope: !32, inlinedAt: !22)
!34 = !DILocation(line: 218, column: 28, scope: !32, inlinedAt: !22)
!35 = !DILocation(line: 219, column: 39, scope: !32, inlinedAt: !22)
!36 = !DILocation(line: 219, column: 60, scope: !32, inlinedAt: !22)
!37 = !DILocation(line: 219, column: 49, scope: !32, inlinedAt: !22)
!38 = !DILocation(line: 221, column: 25, scope: !32, inlinedAt: !22)
!39 = !DILocation(line: 221, column: 17, scope: !32, inlinedAt: !22)
!40 = !DILocation(line: 222, column: 30, scope: !32, inlinedAt: !22)
!41 = !DILocation(line: 222, column: 38, scope: !32, inlinedAt: !22)
!42 = !DILocation(line: 222, column: 49, scope: !32, inlinedAt: !22)
!43 = !DILocation(line: 222, column: 22, scope: !32, inlinedAt: !22)
!44 = !DILocation(line: 67, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 70, column: 32, scope: !6)
!47 = !DILocation(line: 85, column: 50, scope: !6)
!48 = !DILocation(line: 53, column: 40, scope: !6)
!49 = !DILocation(line: 59, column: 34, scope: !6)
!50 = !DILocation(line: 59, column: 51, scope: !6)
!51 = !DILocation(line: 59, column: 113, scope: !6)
!52 = !DILocation(line: 60, column: 42, scope: !6)
!53 = !DILocation(line: 60, column: 35, scope: !6)
!54 = !DILocation(line: 60, column: 49, scope: !6)
!55 = !DILocation(line: 61, column: 35, scope: !6)
!56 = !DILocation(line: 61, column: 49, scope: !6)
!57 = !DILocation(line: 61, column: 102, scope: !6)
!58 = !DILocation(line: 62, column: 35, scope: !6)
!59 = !DILocation(line: 62, column: 42, scope: !6)
!60 = !DILocation(line: 63, column: 35, scope: !6)
!61 = !DILocation(line: 63, column: 42, scope: !6)
!62 = !DILocation(line: 63, column: 95, scope: !6)
!63 = !DILocation(line: 65, column: 24, scope: !6)
!64 = !DILocation(line: 71, column: 24, scope: !6)
!65 = !DILocation(line: 74, column: 24, scope: !6)
!66 = !DILocation(line: 76, column: 24, scope: !6)
!67 = !DILocation(line: 79, column: 24, scope: !6)
!68 = !DILocation(line: 77, column: 24, scope: !6)
!69 = !DILocation(line: 80, column: 24, scope: !6)
!70 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !71)
!71 = !DILocation(line: 84, column: 47, scope: !6)
!72 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !71)
!73 = !DILocation(line: 86, column: 29, scope: !6)
!74 = !DILocation(line: 86, column: 53, scope: !6)
!75 = !DILocation(line: 54, column: 31, scope: !6)
!76 = !DILocation(line: 59, column: 41, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !71)
!78 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !71)
!79 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !80)
!80 = !DILocation(line: 87, column: 40, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !32, inlinedAt: !80)
!82 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !83)
!83 = !DILocation(line: 88, column: 40, scope: !6)
!84 = !DILocation(line: 96, column: 16, scope: !32, inlinedAt: !80)
!85 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !80)
!86 = !DILocation(line: 96, column: 21, scope: !32, inlinedAt: !80)
!87 = !DILocation(line: 89, column: 37, scope: !6)
!88 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !83)
!89 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !83)
!90 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !83)
!91 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !83)
!92 = !DILocation(line: 90, column: 37, scope: !6)
!93 = !DILocation(line: 89, column: 25, scope: !6)
!94 = !DILocation(line: 90, column: 25, scope: !6)
!95 = !DILocation(line: 91, column: 25, scope: !6)
!96 = !DILocation(line: 91, column: 37, scope: !6)
!97 = !DILocation(line: 92, column: 25, scope: !6)
!98 = !DILocation(line: 92, column: 37, scope: !6)
!99 = !DILocation(line: 93, column: 25, scope: !6)
!100 = !DILocation(line: 93, column: 37, scope: !6)
!101 = !DILocation(line: 94, column: 25, scope: !6)
!102 = !DILocation(line: 94, column: 37, scope: !6)
!103 = !DILocation(line: 95, column: 25, scope: !6)
!104 = !DILocation(line: 95, column: 37, scope: !6)
!105 = !DILocation(line: 96, column: 26, scope: !6)
!106 = !DILocation(line: 96, column: 38, scope: !6)
!107 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !108)
!108 = !DILocation(line: 105, column: 46, scope: !6)
!109 = !DILocation(line: 106, column: 17, scope: !6)
!110 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !111)
!111 = !DILocation(line: 107, column: 46, scope: !6)
!112 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !113)
!113 = !DILocation(line: 108, column: 46, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !113)
!115 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !113)
!116 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !113)
!117 = !DILocation(line: 110, column: 24, scope: !6)
!118 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !119)
!119 = !DILocation(line: 113, column: 46, scope: !6)
!120 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !119)
!121 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !119)
!122 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !119)
!123 = !DILocation(line: 116, column: 25, scope: !6)
!124 = !DILocation(line: 119, column: 24, scope: !6)
!125 = !DILocation(line: 103, column: 36, scope: !6)
!126 = !DILocation(line: 103, column: 53, scope: !6)
!127 = !DILocation(line: 103, column: 115, scope: !6)
!128 = !DILocation(line: 120, column: 36, scope: !6)
!129 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !130)
!130 = !DILocation(line: 123, column: 46, scope: !6)
!131 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !130)
!134 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !135)
!135 = !DILocation(line: 125, column: 46, scope: !6)
!136 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !135)
!137 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !135)
!138 = !DILocation(line: 127, column: 25, scope: !6)
!139 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !135)
!140 = !DILocation(line: 128, column: 30, scope: !6)
!141 = !DILocation(line: 128, column: 54, scope: !6)
!142 = !DILocation(line: 129, column: 30, scope: !6)
!143 = !DILocation(line: 129, column: 54, scope: !6)
!144 = !DILocation(line: 130, column: 30, scope: !6)
!145 = !DILocation(line: 130, column: 54, scope: !6)
!146 = !DILocation(line: 131, column: 30, scope: !6)
!147 = !DILocation(line: 131, column: 54, scope: !6)
!148 = !DILocation(line: 103, column: 43, scope: !6)
!149 = !DILocation(line: 97, column: 4, scope: !6)
