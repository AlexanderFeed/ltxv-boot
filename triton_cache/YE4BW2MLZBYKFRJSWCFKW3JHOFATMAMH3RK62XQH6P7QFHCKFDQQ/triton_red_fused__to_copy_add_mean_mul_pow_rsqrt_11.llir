; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 512, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 2044, !dbg !11
  %15 = shl i32 %9, 12, !dbg !12
  %16 = or disjoint i32 %14, %15
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %18, i1 %10) #5, !dbg !14
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !14
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !14
  %22 = extractvalue { i32, i32 } %19, 1, !dbg !14
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !14
  %24 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !15
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 %10) #5, !dbg !16
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !16
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !16
  %28 = extractvalue { i32, i32 } %25, 1, !dbg !16
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %17, !dbg !17
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %10) #5, !dbg !18
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !18
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !18
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !18
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !18
  %36 = getelementptr bfloat, ptr addrspace(1) %3, i64 %17, !dbg !19
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %10) #5, !dbg !20
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !20
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !20
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !20
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !20
  %42 = or disjoint i32 %16, 2048, !dbg !21
  %43 = sext i32 %42 to i64, !dbg !13
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !13
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %10) #5, !dbg !14
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !14
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !14
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !14
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !14
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %43, !dbg !15
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %10) #5, !dbg !16
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !16
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !16
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !16
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !16
  %56 = getelementptr bfloat, ptr addrspace(1) %2, i64 %43, !dbg !17
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %10) #5, !dbg !18
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !18
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !18
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !18
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !18
  %62 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !19
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %62, i1 %10) #5, !dbg !20
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !20
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !20
  %66 = extractvalue { i32, i32 } %63, 1, !dbg !20
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !20
  %68 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !22
  %69 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !23
  %70 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !24
  %71 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !25
  %72 = fadd <2 x float> %68, %69, !dbg !26
  %73 = fadd <2 x float> %72, %70, !dbg !27
  %74 = fadd <2 x float> %73, %71, !dbg !28
  %75 = fmul <2 x float> %74, %74, !dbg !29
  %76 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !22
  %77 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !23
  %78 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !24
  %79 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !25
  %80 = fadd <2 x float> %76, %77, !dbg !26
  %81 = fadd <2 x float> %80, %78, !dbg !27
  %82 = fadd <2 x float> %81, %79, !dbg !28
  %83 = fmul <2 x float> %82, %82, !dbg !29
  %84 = fadd <2 x float> %75, %83, !dbg !30
  %85 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !22
  %86 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !23
  %87 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !24
  %88 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !25
  %89 = fadd <2 x float> %85, %86, !dbg !26
  %90 = fadd <2 x float> %89, %87, !dbg !27
  %91 = fadd <2 x float> %90, %88, !dbg !28
  %92 = fmul <2 x float> %91, %91, !dbg !29
  %93 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !22
  %94 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !23
  %95 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !24
  %96 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !25
  %97 = fadd <2 x float> %93, %94, !dbg !26
  %98 = fadd <2 x float> %97, %95, !dbg !27
  %99 = fadd <2 x float> %98, %96, !dbg !28
  %100 = fmul <2 x float> %99, %99, !dbg !29
  %101 = fadd <2 x float> %92, %100, !dbg !30
  %102 = lshr i32 %11, 5, !dbg !11
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %103 = fadd <2 x float> %84, %shift, !dbg !31
  %104 = fadd <2 x float> %101, %103, !dbg !31
  %shift14 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %105 = fadd <2 x float> %shift14, %104, !dbg !31
  %106 = extractelement <2 x float> %105, i64 0, !dbg !31
  %107 = select i1 %10, float %106, float 0.000000e+00, !dbg !31
  %108 = bitcast float %107 to i32, !dbg !36
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = fadd float %107, %110, !dbg !31
  %112 = bitcast float %111 to i32, !dbg !36
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !36
  %114 = bitcast i32 %113 to float, !dbg !36
  %115 = fadd float %111, %114, !dbg !31
  %116 = bitcast float %115 to i32, !dbg !36
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !36
  %118 = bitcast i32 %117 to float, !dbg !36
  %119 = fadd float %115, %118, !dbg !31
  %120 = bitcast float %119 to i32, !dbg !36
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !36
  %122 = bitcast i32 %121 to float, !dbg !36
  %123 = fadd float %119, %122, !dbg !31
  %124 = bitcast float %123 to i32, !dbg !36
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !36
  %126 = bitcast i32 %125 to float, !dbg !36
  %127 = fadd float %123, %126, !dbg !31
  %128 = and i32 %102, 15, !dbg !36
  %129 = icmp eq i32 %12, 0, !dbg !36
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !36
  %131 = bitcast float %127 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %129) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %132 = icmp slt i32 %11, 16, !dbg !36
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !36
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %132) #5, !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fadd float %135, %137, !dbg !31
  %139 = bitcast float %138 to i32, !dbg !36
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = fadd float %138, %141, !dbg !31
  %143 = bitcast float %142 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %142, %145, !dbg !31
  %147 = bitcast float %146 to i32, !dbg !36
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = fadd float %146, %149, !dbg !31
  %151 = and i32 %11, 15, !dbg !36
  %152 = icmp eq i32 %151, 0, !dbg !36
  %153 = and i1 %132, %152, !dbg !36
  %154 = bitcast float %150 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %154, i1 %153) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %155 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %156 = tail call float @llvm.nvvm.div.full(float %155, float 4.096000e+03), !dbg !37
  %157 = fadd float %156, 0x3EB0C6F7A0000000, !dbg !38
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i8 = icmp eq i32 %161, 0, !dbg !39
  br i1 %.not.i8, label %164, label %162, !dbg !39

162:                                              ; preds = %__nv_rsqrtf.exit
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !39
  br label %__nv_rsqrtf.exit10, !dbg !39

164:                                              ; preds = %__nv_rsqrtf.exit
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !39
  br label %__nv_rsqrtf.exit10, !dbg !39

__nv_rsqrtf.exit10:                               ; preds = %162, %164
  %.0.i9 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !39
  %166 = zext nneg i32 %14 to i64, !dbg !40
  %167 = getelementptr bfloat, ptr addrspace(1) %4, i64 %166, !dbg !41
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %167, i1 true) #5, !dbg !42
  %169 = extractvalue { i32, i32 } %168, 0, !dbg !42
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !42
  %171 = extractvalue { i32, i32 } %168, 1, !dbg !42
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !42
  %173 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %18, i1 %10) #5, !dbg !43
  %174 = extractvalue { i32, i32 } %173, 0, !dbg !43
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !43
  %176 = extractvalue { i32, i32 } %173, 1, !dbg !43
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !43
  %178 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 %10) #5, !dbg !44
  %179 = extractvalue { i32, i32 } %178, 0, !dbg !44
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !44
  %181 = extractvalue { i32, i32 } %178, 1, !dbg !44
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !44
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %10) #5, !dbg !45
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !45
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !45
  %186 = extractvalue { i32, i32 } %183, 1, !dbg !45
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !45
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %10) #5, !dbg !46
  %189 = extractvalue { i32, i32 } %188, 0, !dbg !46
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !46
  %191 = extractvalue { i32, i32 } %188, 1, !dbg !46
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !46
  %193 = getelementptr bfloat, ptr addrspace(1) %5, i64 %17, !dbg !47
  %194 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !48
  %195 = fpext <2 x bfloat> %175 to <2 x float>, !dbg !49
  %196 = fpext <2 x bfloat> %180 to <2 x float>, !dbg !50
  %197 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !51
  %198 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !52
  %199 = fadd <2 x float> %195, %196, !dbg !53
  %200 = fadd <2 x float> %199, %197, !dbg !54
  %201 = fadd <2 x float> %200, %198, !dbg !55
  %202 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !56
  %203 = shufflevector <2 x float> %202, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %204 = fmul <2 x float> %203, %201, !dbg !56
  %205 = fmul <2 x float> %204, %194, !dbg !57
  %206 = fptrunc <2 x float> %205 to <2 x bfloat>, !dbg !58
  %207 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !48
  %208 = fpext <2 x bfloat> %177 to <2 x float>, !dbg !49
  %209 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !50
  %210 = fpext <2 x bfloat> %187 to <2 x float>, !dbg !51
  %211 = fpext <2 x bfloat> %192 to <2 x float>, !dbg !52
  %212 = fadd <2 x float> %208, %209, !dbg !53
  %213 = fadd <2 x float> %212, %210, !dbg !54
  %214 = fadd <2 x float> %213, %211, !dbg !55
  %215 = fmul <2 x float> %203, %214, !dbg !56
  %216 = fmul <2 x float> %215, %207, !dbg !57
  %217 = fptrunc <2 x float> %216 to <2 x bfloat>, !dbg !58
  %218 = bitcast <2 x bfloat> %206 to i32, !dbg !58
  %219 = bitcast <2 x bfloat> %217 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %218, i32 %219, ptr addrspace(1) %193, i1 %10) #5, !dbg !58
  %220 = or disjoint i64 %166, 2048, !dbg !59
  %221 = getelementptr bfloat, ptr addrspace(1) %4, i64 %220, !dbg !41
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %221, i1 true) #5, !dbg !42
  %223 = extractvalue { i32, i32 } %222, 0, !dbg !42
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !42
  %225 = extractvalue { i32, i32 } %222, 1, !dbg !42
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !42
  %227 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %10) #5, !dbg !43
  %228 = extractvalue { i32, i32 } %227, 0, !dbg !43
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !43
  %230 = extractvalue { i32, i32 } %227, 1, !dbg !43
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !43
  %232 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %10) #5, !dbg !44
  %233 = extractvalue { i32, i32 } %232, 0, !dbg !44
  %234 = bitcast i32 %233 to <2 x bfloat>, !dbg !44
  %235 = extractvalue { i32, i32 } %232, 1, !dbg !44
  %236 = bitcast i32 %235 to <2 x bfloat>, !dbg !44
  %237 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %10) #5, !dbg !45
  %238 = extractvalue { i32, i32 } %237, 0, !dbg !45
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !45
  %240 = extractvalue { i32, i32 } %237, 1, !dbg !45
  %241 = bitcast i32 %240 to <2 x bfloat>, !dbg !45
  %242 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %62, i1 %10) #5, !dbg !46
  %243 = extractvalue { i32, i32 } %242, 0, !dbg !46
  %244 = bitcast i32 %243 to <2 x bfloat>, !dbg !46
  %245 = extractvalue { i32, i32 } %242, 1, !dbg !46
  %246 = bitcast i32 %245 to <2 x bfloat>, !dbg !46
  %247 = getelementptr bfloat, ptr addrspace(1) %5, i64 %43, !dbg !47
  %248 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !48
  %249 = fpext <2 x bfloat> %229 to <2 x float>, !dbg !49
  %250 = fpext <2 x bfloat> %234 to <2 x float>, !dbg !50
  %251 = fpext <2 x bfloat> %239 to <2 x float>, !dbg !51
  %252 = fpext <2 x bfloat> %244 to <2 x float>, !dbg !52
  %253 = fadd <2 x float> %249, %250, !dbg !53
  %254 = fadd <2 x float> %253, %251, !dbg !54
  %255 = fadd <2 x float> %254, %252, !dbg !55
  %256 = fmul <2 x float> %203, %255, !dbg !56
  %257 = fmul <2 x float> %256, %248, !dbg !57
  %258 = fptrunc <2 x float> %257 to <2 x bfloat>, !dbg !58
  %259 = fpext <2 x bfloat> %226 to <2 x float>, !dbg !48
  %260 = fpext <2 x bfloat> %231 to <2 x float>, !dbg !49
  %261 = fpext <2 x bfloat> %236 to <2 x float>, !dbg !50
  %262 = fpext <2 x bfloat> %241 to <2 x float>, !dbg !51
  %263 = fpext <2 x bfloat> %246 to <2 x float>, !dbg !52
  %264 = fadd <2 x float> %260, %261, !dbg !53
  %265 = fadd <2 x float> %264, %262, !dbg !54
  %266 = fadd <2 x float> %265, %263, !dbg !55
  %267 = fmul <2 x float> %203, %266, !dbg !56
  %268 = fmul <2 x float> %267, %259, !dbg !57
  %269 = fptrunc <2 x float> %268 to <2 x bfloat>, !dbg !58
  %270 = bitcast <2 x bfloat> %258 to i32, !dbg !58
  %271 = bitcast <2 x bfloat> %269 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %270, i32 %271, ptr addrspace(1) %247, i1 %10) #5, !dbg !58
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4upwsrvkdze6mqedjhebpbnbrqt4kzathlmdnngjhyxujfmagd.py", directory: "/tmp/torchinductor_root/s4")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 36, column: 46, scope: !6)
!13 = !DILocation(line: 36, column: 34, scope: !6)
!14 = !DILocation(line: 36, column: 51, scope: !6)
!15 = !DILocation(line: 37, column: 34, scope: !6)
!16 = !DILocation(line: 37, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 51, scope: !6)
!19 = !DILocation(line: 39, column: 34, scope: !6)
!20 = !DILocation(line: 39, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 41, scope: !6)
!22 = !DILocation(line: 36, column: 112, scope: !6)
!23 = !DILocation(line: 37, column: 112, scope: !6)
!24 = !DILocation(line: 38, column: 112, scope: !6)
!25 = !DILocation(line: 39, column: 112, scope: !6)
!26 = !DILocation(line: 40, column: 22, scope: !6)
!27 = !DILocation(line: 41, column: 22, scope: !6)
!28 = !DILocation(line: 42, column: 22, scope: !6)
!29 = !DILocation(line: 44, column: 22, scope: !6)
!30 = !DILocation(line: 46, column: 25, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 65, column: 25, scope: !6)
!38 = !DILocation(line: 67, column: 24, scope: !6)
!39 = !DILocation(line: 68, column: 32, scope: !6)
!40 = !DILocation(line: 49, column: 40, scope: !6)
!41 = !DILocation(line: 55, column: 35, scope: !6)
!42 = !DILocation(line: 55, column: 42, scope: !6)
!43 = !DILocation(line: 56, column: 52, scope: !6)
!44 = !DILocation(line: 57, column: 52, scope: !6)
!45 = !DILocation(line: 58, column: 52, scope: !6)
!46 = !DILocation(line: 59, column: 52, scope: !6)
!47 = !DILocation(line: 72, column: 29, scope: !6)
!48 = !DILocation(line: 55, column: 95, scope: !6)
!49 = !DILocation(line: 56, column: 114, scope: !6)
!50 = !DILocation(line: 57, column: 114, scope: !6)
!51 = !DILocation(line: 58, column: 114, scope: !6)
!52 = !DILocation(line: 59, column: 114, scope: !6)
!53 = !DILocation(line: 60, column: 24, scope: !6)
!54 = !DILocation(line: 61, column: 24, scope: !6)
!55 = !DILocation(line: 62, column: 24, scope: !6)
!56 = !DILocation(line: 69, column: 24, scope: !6)
!57 = !DILocation(line: 71, column: 24, scope: !6)
!58 = !DILocation(line: 72, column: 53, scope: !6)
!59 = !DILocation(line: 50, column: 31, scope: !6)
!60 = !DILocation(line: 49, column: 4, scope: !6)
