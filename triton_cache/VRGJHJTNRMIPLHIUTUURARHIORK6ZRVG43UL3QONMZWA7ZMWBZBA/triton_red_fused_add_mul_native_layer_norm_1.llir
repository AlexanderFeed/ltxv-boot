; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused_add_mul_native_layer_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 4112, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = shl i32 %9, 2, !dbg !11
  %12 = and i32 %11, 2044, !dbg !11
  %13 = mul i32 %7, 3072, !dbg !12
  %14 = zext nneg i32 %12 to i64, !dbg !13
  %15 = add i32 %12, %13, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr bfloat, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %8) #5, !dbg !16
  %19 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %20 = bitcast i32 %19 to <2 x bfloat>, !dbg !16
  %21 = extractelement <2 x bfloat> %20, i64 1, !dbg !16
  %22 = fpext bfloat %21 to float, !dbg !17
  %23 = extractelement <2 x bfloat> %20, i64 0, !dbg !16
  %24 = fpext bfloat %23 to float, !dbg !17
  %25 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractelement <2 x bfloat> %26, i64 1, !dbg !16
  %28 = fpext bfloat %27 to float, !dbg !17
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !16
  %30 = fpext bfloat %29 to float, !dbg !17
  %31 = select i1 %8, float %30, float 0.000000e+00, !dbg !18
  %32 = select i1 %8, float %28, float 0.000000e+00, !dbg !18
  %33 = select i1 %8, float %24, float 0.000000e+00, !dbg !18
  %34 = select i1 %8, float %22, float 0.000000e+00, !dbg !18
  %35 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %36 = or disjoint i64 %14, 2048, !dbg !20
  %37 = icmp samesign ult i64 %36, 3072, !dbg !21
  %38 = trunc nuw nsw i64 %36 to i32, !dbg !14
  %39 = add i32 %13, %38, !dbg !14
  %40 = sext i32 %39 to i64, !dbg !15
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !15
  %42 = and i1 %8, %37, !dbg !22
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %42) #5, !dbg !16
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !16
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !16
  %46 = extractelement <2 x bfloat> %45, i64 0, !dbg !16
  %47 = fpext bfloat %46 to float, !dbg !17
  %48 = fsub float %47, %31, !dbg !23
  %49 = fadd float %35, 1.000000e+00, !dbg !27
  %50 = tail call float @llvm.nvvm.div.full(float %48, float %49), !dbg !28
  %51 = fadd float %31, %50, !dbg !29
  %52 = fsub float %47, %51, !dbg !30
  %53 = fmul float %48, %52, !dbg !31
  %54 = fadd float %53, 0.000000e+00, !dbg !32
  %55 = extractelement <2 x bfloat> %45, i64 1, !dbg !16
  %56 = fpext bfloat %55 to float, !dbg !17
  %57 = fsub float %56, %32, !dbg !23
  %58 = tail call float @llvm.nvvm.div.full(float %57, float %49), !dbg !28
  %59 = fadd float %32, %58, !dbg !29
  %60 = fsub float %56, %59, !dbg !30
  %61 = fmul float %57, %60, !dbg !31
  %62 = fadd float %61, 0.000000e+00, !dbg !32
  %63 = extractvalue { i32, i32 } %43, 1, !dbg !16
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !16
  %65 = extractelement <2 x bfloat> %64, i64 0, !dbg !16
  %66 = fpext bfloat %65 to float, !dbg !17
  %67 = fsub float %66, %33, !dbg !23
  %68 = tail call float @llvm.nvvm.div.full(float %67, float %49), !dbg !28
  %69 = fadd float %33, %68, !dbg !29
  %70 = fsub float %66, %69, !dbg !30
  %71 = fmul float %67, %70, !dbg !31
  %72 = fadd float %71, 0.000000e+00, !dbg !32
  %73 = extractelement <2 x bfloat> %64, i64 1, !dbg !16
  %74 = fpext bfloat %73 to float, !dbg !17
  %75 = fsub float %74, %34, !dbg !23
  %76 = tail call float @llvm.nvvm.div.full(float %75, float %49), !dbg !28
  %77 = fadd float %34, %76, !dbg !29
  %78 = fsub float %74, %77, !dbg !30
  %79 = fmul float %75, %78, !dbg !31
  %80 = fadd float %79, 0.000000e+00, !dbg !32
  %81 = select i1 %42, float %51, float %31, !dbg !18
  %82 = select i1 %42, float %59, float %32, !dbg !18
  %83 = select i1 %42, float %69, float %33, !dbg !18
  %84 = select i1 %42, float %77, float %34, !dbg !18
  %85 = select i1 %42, float %72, float 0.000000e+00, !dbg !33
  %86 = select i1 %42, float %80, float 0.000000e+00, !dbg !33
  %87 = select i1 %42, float %49, float %35, !dbg !19
  %88 = select i1 %42, float %49, float %35, !dbg !19
  %89 = select i1 %42, float %49, float %35, !dbg !19
  %90 = select i1 %42, float %49, float %35, !dbg !19
  %91 = lshr i32 %9, 5, !dbg !11
  %92 = fsub float %82, %81, !dbg !34
  %93 = fadd float %87, %88, !dbg !37
  %94 = fcmp oeq float %93, 0.000000e+00, !dbg !38
  %95 = tail call float @llvm.nvvm.div.full(float %88, float %93), !dbg !39
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !40
  %97 = fmul float %92, %96, !dbg !41
  %98 = fadd float %81, %97, !dbg !42
  %99 = fadd float %54, %62, !dbg !43
  %100 = select i1 %42, float %99, float 0.000000e+00, !dbg !43
  %101 = fmul float %92, %92, !dbg !44
  %102 = fmul float %101, %87, !dbg !45
  %103 = fmul float %102, %96, !dbg !46
  %104 = fadd float %100, %103, !dbg !47
  %105 = fsub float %83, %98, !dbg !34
  %106 = fadd float %89, %93, !dbg !37
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !38
  %108 = tail call float @llvm.nvvm.div.full(float %89, float %106), !dbg !39
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !40
  %110 = fmul float %109, %105, !dbg !41
  %111 = fadd float %98, %110, !dbg !42
  %112 = fadd float %85, %104, !dbg !43
  %113 = fmul float %105, %105, !dbg !44
  %114 = fmul float %93, %113, !dbg !45
  %115 = fmul float %109, %114, !dbg !46
  %116 = fadd float %112, %115, !dbg !47
  %117 = fsub float %84, %111, !dbg !34
  %118 = fadd float %90, %106, !dbg !37
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !38
  %120 = tail call float @llvm.nvvm.div.full(float %90, float %118), !dbg !39
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !40
  %122 = fmul float %121, %117, !dbg !41
  %123 = fadd float %111, %122, !dbg !42
  %124 = fadd float %86, %116, !dbg !43
  %125 = fmul float %117, %117, !dbg !44
  %126 = fmul float %106, %125, !dbg !45
  %127 = fmul float %121, %126, !dbg !46
  %128 = fadd float %124, %127, !dbg !47
  %129 = bitcast float %123 to i32, !dbg !48
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !48
  %131 = bitcast i32 %130 to float, !dbg !48
  %132 = bitcast float %128 to i32, !dbg !48
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !48
  %134 = bitcast i32 %133 to float, !dbg !48
  %135 = bitcast float %118 to i32, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fsub float %131, %123, !dbg !34
  %139 = fadd float %118, %137, !dbg !37
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !38
  %141 = tail call float @llvm.nvvm.div.full(float %137, float %139), !dbg !39
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !40
  %143 = fmul float %142, %138, !dbg !41
  %144 = fadd float %123, %143, !dbg !42
  %145 = fadd float %128, %134, !dbg !43
  %146 = fmul float %138, %138, !dbg !44
  %147 = fmul float %118, %146, !dbg !45
  %148 = fmul float %142, %147, !dbg !46
  %149 = fadd float %145, %148, !dbg !47
  %150 = bitcast float %144 to i32, !dbg !48
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !48
  %152 = bitcast i32 %151 to float, !dbg !48
  %153 = bitcast float %149 to i32, !dbg !48
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !48
  %155 = bitcast i32 %154 to float, !dbg !48
  %156 = bitcast float %139 to i32, !dbg !48
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !48
  %158 = bitcast i32 %157 to float, !dbg !48
  %159 = fsub float %152, %144, !dbg !34
  %160 = fadd float %139, %158, !dbg !37
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !38
  %162 = tail call float @llvm.nvvm.div.full(float %158, float %160), !dbg !39
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !40
  %164 = fmul float %159, %163, !dbg !41
  %165 = fadd float %144, %164, !dbg !42
  %166 = fadd float %149, %155, !dbg !43
  %167 = fmul float %159, %159, !dbg !44
  %168 = fmul float %139, %167, !dbg !45
  %169 = fmul float %163, %168, !dbg !46
  %170 = fadd float %166, %169, !dbg !47
  %171 = bitcast float %165 to i32, !dbg !48
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !48
  %173 = bitcast i32 %172 to float, !dbg !48
  %174 = bitcast float %170 to i32, !dbg !48
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !48
  %176 = bitcast i32 %175 to float, !dbg !48
  %177 = bitcast float %160 to i32, !dbg !48
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !48
  %179 = bitcast i32 %178 to float, !dbg !48
  %180 = fsub float %173, %165, !dbg !34
  %181 = fadd float %160, %179, !dbg !37
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !38
  %183 = tail call float @llvm.nvvm.div.full(float %179, float %181), !dbg !39
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !40
  %185 = fmul float %180, %184, !dbg !41
  %186 = fadd float %165, %185, !dbg !42
  %187 = fadd float %170, %176, !dbg !43
  %188 = fmul float %180, %180, !dbg !44
  %189 = fmul float %160, %188, !dbg !45
  %190 = fmul float %184, %189, !dbg !46
  %191 = fadd float %187, %190, !dbg !47
  %192 = bitcast float %186 to i32, !dbg !48
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !48
  %194 = bitcast i32 %193 to float, !dbg !48
  %195 = bitcast float %191 to i32, !dbg !48
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !48
  %197 = bitcast i32 %196 to float, !dbg !48
  %198 = bitcast float %181 to i32, !dbg !48
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !48
  %200 = bitcast i32 %199 to float, !dbg !48
  %201 = fsub float %194, %186, !dbg !34
  %202 = fadd float %181, %200, !dbg !37
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !38
  %204 = tail call float @llvm.nvvm.div.full(float %200, float %202), !dbg !39
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !40
  %206 = fmul float %201, %205, !dbg !41
  %207 = fadd float %186, %206, !dbg !42
  %208 = fadd float %191, %197, !dbg !43
  %209 = fmul float %201, %201, !dbg !44
  %210 = fmul float %181, %209, !dbg !45
  %211 = fmul float %205, %210, !dbg !46
  %212 = fadd float %208, %211, !dbg !47
  %213 = bitcast float %207 to i32, !dbg !48
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !48
  %215 = bitcast i32 %214 to float, !dbg !48
  %216 = bitcast float %212 to i32, !dbg !48
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !48
  %218 = bitcast i32 %217 to float, !dbg !48
  %219 = bitcast float %202 to i32, !dbg !48
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !48
  %221 = bitcast i32 %220 to float, !dbg !48
  %222 = fsub float %215, %207, !dbg !34
  %223 = fadd float %202, %221, !dbg !37
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !38
  %225 = tail call float @llvm.nvvm.div.full(float %221, float %223), !dbg !39
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !40
  %227 = fmul float %222, %226, !dbg !41
  %228 = fadd float %207, %227, !dbg !42
  %229 = fadd float %212, %218, !dbg !43
  %230 = fmul float %222, %222, !dbg !44
  %231 = fmul float %202, %230, !dbg !45
  %232 = fmul float %226, %231, !dbg !46
  %233 = fadd float %229, %232, !dbg !47
  %234 = and i32 %91, 15, !dbg !48
  %235 = icmp eq i32 %10, 0, !dbg !48
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !48
  %237 = bitcast float %228 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 %235) #5, !dbg !48
  %238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %234, !dbg !48
  %239 = bitcast float %233 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 %235) #5, !dbg !48
  %240 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %234, !dbg !48
  %241 = bitcast float %223 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 %235) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %242 = icmp slt i32 %9, 16, !dbg !48
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !48
  %244 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %243, i1 %242) #5, !dbg !48
  %245 = bitcast i32 %244 to float, !dbg !48
  %246 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !48
  %247 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %246, i1 %242) #5, !dbg !48
  %248 = bitcast i32 %247 to float, !dbg !48
  %249 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !48
  %250 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %249, i1 %242) #5, !dbg !48
  %251 = bitcast i32 %250 to float, !dbg !48
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !48
  %253 = bitcast i32 %252 to float, !dbg !48
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !48
  %255 = bitcast i32 %254 to float, !dbg !48
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = fsub float %253, %245, !dbg !34
  %259 = fadd float %251, %257, !dbg !37
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !38
  %261 = tail call float @llvm.nvvm.div.full(float %257, float %259), !dbg !39
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !40
  %263 = fmul float %258, %262, !dbg !41
  %264 = fadd float %263, %245, !dbg !42
  %265 = fadd float %248, %255, !dbg !43
  %266 = fmul float %258, %258, !dbg !44
  %267 = fmul float %266, %251, !dbg !45
  %268 = fmul float %267, %262, !dbg !46
  %269 = fadd float %265, %268, !dbg !47
  %270 = bitcast float %264 to i32, !dbg !48
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !48
  %272 = bitcast i32 %271 to float, !dbg !48
  %273 = bitcast float %269 to i32, !dbg !48
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !48
  %275 = bitcast i32 %274 to float, !dbg !48
  %276 = bitcast float %259 to i32, !dbg !48
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 4, i32 31), !dbg !48
  %278 = bitcast i32 %277 to float, !dbg !48
  %279 = fsub float %272, %264, !dbg !34
  %280 = fadd float %259, %278, !dbg !37
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !38
  %282 = tail call float @llvm.nvvm.div.full(float %278, float %280), !dbg !39
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !40
  %284 = fmul float %279, %283, !dbg !41
  %285 = fadd float %264, %284, !dbg !42
  %286 = fadd float %269, %275, !dbg !43
  %287 = fmul float %279, %279, !dbg !44
  %288 = fmul float %259, %287, !dbg !45
  %289 = fmul float %283, %288, !dbg !46
  %290 = fadd float %286, %289, !dbg !47
  %291 = bitcast float %285 to i32, !dbg !48
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !48
  %293 = bitcast i32 %292 to float, !dbg !48
  %294 = bitcast float %290 to i32, !dbg !48
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !48
  %296 = bitcast i32 %295 to float, !dbg !48
  %297 = bitcast float %280 to i32, !dbg !48
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 2, i32 31), !dbg !48
  %299 = bitcast i32 %298 to float, !dbg !48
  %300 = fsub float %293, %285, !dbg !34
  %301 = fadd float %280, %299, !dbg !37
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !38
  %303 = tail call float @llvm.nvvm.div.full(float %299, float %301), !dbg !39
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !40
  %305 = fmul float %300, %304, !dbg !41
  %306 = fadd float %285, %305, !dbg !42
  %307 = fadd float %290, %296, !dbg !43
  %308 = fmul float %300, %300, !dbg !44
  %309 = fmul float %280, %308, !dbg !45
  %310 = fmul float %304, %309, !dbg !46
  %311 = fadd float %307, %310, !dbg !47
  %312 = bitcast float %306 to i32, !dbg !48
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !48
  %314 = bitcast i32 %313 to float, !dbg !48
  %315 = bitcast float %311 to i32, !dbg !48
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !48
  %317 = bitcast i32 %316 to float, !dbg !48
  %318 = bitcast float %301 to i32, !dbg !48
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 1, i32 31), !dbg !48
  %320 = bitcast i32 %319 to float, !dbg !48
  %321 = fsub float %314, %306, !dbg !34
  %322 = fadd float %301, %320, !dbg !37
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !38
  %324 = tail call float @llvm.nvvm.div.full(float %320, float %322), !dbg !39
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !40
  %326 = fmul float %321, %325, !dbg !41
  %327 = fadd float %306, %326, !dbg !42
  %328 = fadd float %311, %317, !dbg !43
  %329 = fmul float %321, %321, !dbg !44
  %330 = fmul float %301, %329, !dbg !45
  %331 = fmul float %325, %330, !dbg !46
  %332 = fadd float %328, %331, !dbg !47
  %333 = and i32 %9, 15, !dbg !48
  %334 = icmp eq i32 %333, 0, !dbg !48
  %335 = and i1 %242, %334, !dbg !48
  %336 = bitcast float %327 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %336, i1 %335) #5, !dbg !48
  %337 = bitcast float %332 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %337, i1 %335) #5, !dbg !48
  %338 = bitcast float %322 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %338, i1 %335) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %339 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %340 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !48
  %341 = tail call float @llvm.nvvm.div.full(float %340, float 3.072000e+03), !dbg !49
  %342 = fadd float %341, 0x3EB0C6F7A0000000, !dbg !50
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i15 = icmp eq i32 %346, 0, !dbg !51
  br i1 %.not.i15, label %349, label %347, !dbg !51

347:                                              ; preds = %__nv_rsqrtf.exit
  %348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %342), !dbg !51
  br label %__nv_rsqrtf.exit17, !dbg !51

349:                                              ; preds = %__nv_rsqrtf.exit
  %350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %342), !dbg !51
  br label %__nv_rsqrtf.exit17, !dbg !51

__nv_rsqrtf.exit17:                               ; preds = %347, %349
  %.0.i16 = phi float [ %348, %347 ], [ %350, %349 ], !dbg !51
  %351 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %8) #5, !dbg !52
  %352 = extractvalue { i32, i32 } %351, 0, !dbg !52
  %353 = bitcast i32 %352 to <2 x bfloat>, !dbg !52
  %354 = extractvalue { i32, i32 } %351, 1, !dbg !52
  %355 = bitcast i32 %354 to <2 x bfloat>, !dbg !52
  %356 = add nuw nsw i64 %14, 3072, !dbg !53
  %357 = getelementptr bfloat, ptr addrspace(1) %1, i64 %356, !dbg !54
  %358 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %357, i1 true) #5, !dbg !55
  %359 = extractvalue { i32, i32 } %358, 0, !dbg !55
  %360 = bitcast i32 %359 to <2 x bfloat>, !dbg !55
  %361 = extractvalue { i32, i32 } %358, 1, !dbg !55
  %362 = bitcast i32 %361 to <2 x bfloat>, !dbg !55
  %363 = getelementptr bfloat, ptr addrspace(1) %2, i64 %356, !dbg !56
  %364 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %363, i1 true) #5, !dbg !57
  %365 = extractvalue { i32, i32 } %364, 0, !dbg !57
  %366 = bitcast i32 %365 to <2 x bfloat>, !dbg !57
  %367 = extractvalue { i32, i32 } %364, 1, !dbg !57
  %368 = bitcast i32 %367 to <2 x bfloat>, !dbg !57
  %369 = getelementptr bfloat, ptr addrspace(1) %1, i64 %14, !dbg !58
  %370 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %369, i1 true) #5, !dbg !59
  %371 = extractvalue { i32, i32 } %370, 0, !dbg !59
  %372 = bitcast i32 %371 to <2 x bfloat>, !dbg !59
  %373 = extractvalue { i32, i32 } %370, 1, !dbg !59
  %374 = bitcast i32 %373 to <2 x bfloat>, !dbg !59
  %375 = getelementptr bfloat, ptr addrspace(1) %2, i64 %14, !dbg !60
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !61
  %377 = extractvalue { i32, i32 } %376, 0, !dbg !61
  %378 = bitcast i32 %377 to <2 x bfloat>, !dbg !61
  %379 = extractvalue { i32, i32 } %376, 1, !dbg !61
  %380 = bitcast i32 %379 to <2 x bfloat>, !dbg !61
  %381 = getelementptr bfloat, ptr addrspace(1) %3, i64 %16, !dbg !62
  %382 = fpext <2 x bfloat> %353 to <2 x float>, !dbg !63
  %383 = fpext <2 x bfloat> %360 to <2 x float>, !dbg !64
  %384 = fpext <2 x bfloat> %366 to <2 x float>, !dbg !65
  %385 = fpext <2 x bfloat> %372 to <2 x float>, !dbg !66
  %386 = fpext <2 x bfloat> %378 to <2 x float>, !dbg !67
  %387 = insertelement <2 x float> poison, float %339, i64 0, !dbg !68
  %388 = shufflevector <2 x float> %387, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %389 = fsub <2 x float> %382, %388, !dbg !68
  %390 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !69
  %391 = shufflevector <2 x float> %390, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %392 = fmul <2 x float> %391, %389, !dbg !69
  %393 = fadd <2 x float> %383, %384, !dbg !70
  %394 = fadd <2 x float> %393, splat (float 1.000000e+00), !dbg !71
  %395 = fmul <2 x float> %392, %394, !dbg !72
  %396 = fadd <2 x float> %385, %386, !dbg !73
  %397 = fadd <2 x float> %395, %396, !dbg !74
  %398 = fptrunc <2 x float> %397 to <2 x bfloat>, !dbg !75
  %399 = fpext <2 x bfloat> %355 to <2 x float>, !dbg !63
  %400 = fpext <2 x bfloat> %362 to <2 x float>, !dbg !64
  %401 = fpext <2 x bfloat> %368 to <2 x float>, !dbg !65
  %402 = fpext <2 x bfloat> %374 to <2 x float>, !dbg !66
  %403 = fpext <2 x bfloat> %380 to <2 x float>, !dbg !67
  %404 = fsub <2 x float> %399, %388, !dbg !68
  %405 = fmul <2 x float> %391, %404, !dbg !69
  %406 = fadd <2 x float> %400, %401, !dbg !70
  %407 = fadd <2 x float> %406, splat (float 1.000000e+00), !dbg !71
  %408 = fmul <2 x float> %405, %407, !dbg !72
  %409 = fadd <2 x float> %402, %403, !dbg !73
  %410 = fadd <2 x float> %408, %409, !dbg !74
  %411 = fptrunc <2 x float> %410 to <2 x bfloat>, !dbg !75
  %412 = bitcast <2 x bfloat> %398 to i32, !dbg !75
  %413 = bitcast <2 x bfloat> %411 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %412, i32 %413, ptr addrspace(1) %381, i1 %8) #5, !dbg !75
  %414 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %42) #5, !dbg !52
  %415 = extractvalue { i32, i32 } %414, 0, !dbg !52
  %416 = bitcast i32 %415 to <2 x bfloat>, !dbg !52
  %417 = extractvalue { i32, i32 } %414, 1, !dbg !52
  %418 = bitcast i32 %417 to <2 x bfloat>, !dbg !52
  %419 = add nuw nsw i64 %14, 5120, !dbg !53
  %420 = getelementptr bfloat, ptr addrspace(1) %1, i64 %419, !dbg !54
  %421 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %420, i1 %37) #5, !dbg !55
  %422 = extractvalue { i32, i32 } %421, 0, !dbg !55
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !55
  %424 = extractvalue { i32, i32 } %421, 1, !dbg !55
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !55
  %426 = getelementptr bfloat, ptr addrspace(1) %2, i64 %419, !dbg !56
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %426, i1 %37) #5, !dbg !57
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !57
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !57
  %430 = extractvalue { i32, i32 } %427, 1, !dbg !57
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !57
  %432 = getelementptr bfloat, ptr addrspace(1) %1, i64 %36, !dbg !58
  %433 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %432, i1 %37) #5, !dbg !59
  %434 = extractvalue { i32, i32 } %433, 0, !dbg !59
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !59
  %436 = extractvalue { i32, i32 } %433, 1, !dbg !59
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !59
  %438 = getelementptr bfloat, ptr addrspace(1) %2, i64 %36, !dbg !60
  %439 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %438, i1 %37) #5, !dbg !61
  %440 = extractvalue { i32, i32 } %439, 0, !dbg !61
  %441 = bitcast i32 %440 to <2 x bfloat>, !dbg !61
  %442 = extractvalue { i32, i32 } %439, 1, !dbg !61
  %443 = bitcast i32 %442 to <2 x bfloat>, !dbg !61
  %444 = getelementptr bfloat, ptr addrspace(1) %3, i64 %40, !dbg !62
  %445 = fpext <2 x bfloat> %416 to <2 x float>, !dbg !63
  %446 = fpext <2 x bfloat> %423 to <2 x float>, !dbg !64
  %447 = fpext <2 x bfloat> %429 to <2 x float>, !dbg !65
  %448 = fpext <2 x bfloat> %435 to <2 x float>, !dbg !66
  %449 = fpext <2 x bfloat> %441 to <2 x float>, !dbg !67
  %450 = fsub <2 x float> %445, %388, !dbg !68
  %451 = fmul <2 x float> %391, %450, !dbg !69
  %452 = fadd <2 x float> %446, %447, !dbg !70
  %453 = fadd <2 x float> %452, splat (float 1.000000e+00), !dbg !71
  %454 = fmul <2 x float> %451, %453, !dbg !72
  %455 = fadd <2 x float> %448, %449, !dbg !73
  %456 = fadd <2 x float> %454, %455, !dbg !74
  %457 = fptrunc <2 x float> %456 to <2 x bfloat>, !dbg !75
  %458 = fpext <2 x bfloat> %418 to <2 x float>, !dbg !63
  %459 = fpext <2 x bfloat> %425 to <2 x float>, !dbg !64
  %460 = fpext <2 x bfloat> %431 to <2 x float>, !dbg !65
  %461 = fpext <2 x bfloat> %437 to <2 x float>, !dbg !66
  %462 = fpext <2 x bfloat> %443 to <2 x float>, !dbg !67
  %463 = fsub <2 x float> %458, %388, !dbg !68
  %464 = fmul <2 x float> %391, %463, !dbg !69
  %465 = fadd <2 x float> %459, %460, !dbg !70
  %466 = fadd <2 x float> %465, splat (float 1.000000e+00), !dbg !71
  %467 = fmul <2 x float> %464, %466, !dbg !72
  %468 = fadd <2 x float> %461, %462, !dbg !73
  %469 = fadd <2 x float> %467, %468, !dbg !74
  %470 = fptrunc <2 x float> %469 to <2 x bfloat>, !dbg !75
  %471 = bitcast <2 x bfloat> %457 to i32, !dbg !75
  %472 = bitcast <2 x bfloat> %470 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %471, i32 %472, ptr addrspace(1) %444, i1 %42) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c27p76dbjot226usmekxdmgqfz72mhnybp53dk5wolquyhp5mtle.py", directory: "/tmp/torchinductor_root/27")
!4 = !{ptr @triton_red_fused_add_mul_native_layer_norm_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_add_mul_native_layer_norm_1", linkageName: "triton_red_fused_add_mul_native_layer_norm_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 61, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = !DILocation(line: 217, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 47, column: 79, scope: !6)
!37 = !DILocation(line: 218, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 219, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 219, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 219, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 221, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 221, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 222, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 222, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 222, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 222, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 222, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !36)
!49 = !DILocation(line: 65, column: 24, scope: !6)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 68, column: 32, scope: !6)
!52 = !DILocation(line: 57, column: 51, scope: !6)
!53 = !DILocation(line: 58, column: 42, scope: !6)
!54 = !DILocation(line: 58, column: 35, scope: !6)
!55 = !DILocation(line: 58, column: 49, scope: !6)
!56 = !DILocation(line: 59, column: 35, scope: !6)
!57 = !DILocation(line: 59, column: 49, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 42, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 42, scope: !6)
!62 = !DILocation(line: 77, column: 29, scope: !6)
!63 = !DILocation(line: 57, column: 113, scope: !6)
!64 = !DILocation(line: 58, column: 102, scope: !6)
!65 = !DILocation(line: 59, column: 102, scope: !6)
!66 = !DILocation(line: 60, column: 95, scope: !6)
!67 = !DILocation(line: 61, column: 95, scope: !6)
!68 = !DILocation(line: 63, column: 24, scope: !6)
!69 = !DILocation(line: 69, column: 24, scope: !6)
!70 = !DILocation(line: 71, column: 24, scope: !6)
!71 = !DILocation(line: 73, column: 24, scope: !6)
!72 = !DILocation(line: 74, column: 24, scope: !6)
!73 = !DILocation(line: 75, column: 24, scope: !6)
!74 = !DILocation(line: 76, column: 24, scope: !6)
!75 = !DILocation(line: 77, column: 53, scope: !6)
!76 = !DILocation(line: 51, column: 4, scope: !6)
