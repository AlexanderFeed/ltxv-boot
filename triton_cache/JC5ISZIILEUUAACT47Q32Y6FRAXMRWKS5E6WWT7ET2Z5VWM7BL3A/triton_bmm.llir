; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 32, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 32, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = or disjoint i32 %20, 64, !dbg !19
  %23 = or disjoint i32 %20, 96, !dbg !19
  %24 = shl i32 %15, 3, !dbg !19
  %25 = and i32 %24, 24, !dbg !19
  %26 = or disjoint i32 %14, %20, !dbg !20
  %27 = or disjoint i32 %14, %21, !dbg !20
  %28 = or disjoint i32 %14, %22, !dbg !20
  %29 = or disjoint i32 %14, %23, !dbg !20
  %30 = shl nsw i32 %13, 7, !dbg !21
  %31 = or disjoint i32 %30, %20, !dbg !22
  %32 = or disjoint i32 %30, %21, !dbg !22
  %33 = or disjoint i32 %30, %22, !dbg !22
  %34 = or disjoint i32 %30, %23, !dbg !22
  %35 = srem i32 %26, 512, !dbg !23
  %36 = srem i32 %27, 512, !dbg !23
  %37 = srem i32 %28, 512, !dbg !23
  %38 = srem i32 %29, 512, !dbg !23
  %39 = srem i32 %31, 512, !dbg !24
  %.lhs.trunc = trunc i32 %32 to i16, !dbg !24
  %40 = srem i16 %.lhs.trunc, 512, !dbg !24
  %.sext = sext i16 %40 to i32, !dbg !24
  %.lhs.trunc321 = trunc i32 %33 to i16, !dbg !24
  %41 = srem i16 %.lhs.trunc321, 512, !dbg !24
  %.sext322 = sext i16 %41 to i32, !dbg !24
  %.lhs.trunc323 = trunc i32 %34 to i16, !dbg !24
  %42 = srem i16 %.lhs.trunc323, 512, !dbg !24
  %.sext324 = sext i16 %42 to i32, !dbg !24
  %43 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %44 = shl nsw i32 %35, 12, !dbg !26
  %45 = shl nsw i32 %36, 12, !dbg !26
  %46 = shl nsw i32 %37, 12, !dbg !26
  %47 = shl nsw i32 %38, 12, !dbg !26
  %48 = shl i32 %43, 6, !dbg !27
  %49 = or disjoint i32 %25, %48, !dbg !28
  %50 = add i32 %49, %44, !dbg !29
  %51 = add i32 %49, %45, !dbg !29
  %52 = add i32 %49, %46, !dbg !29
  %53 = add i32 %49, %47, !dbg !29
  %54 = sext i32 %50 to i64, !dbg !30
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !30
  %56 = sext i32 %51 to i64, !dbg !30
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !30
  %58 = sext i32 %52 to i64, !dbg !30
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !30
  %60 = sext i32 %53 to i64, !dbg !30
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !30
  %62 = shl nsw i32 %39, 12, !dbg !31
  %63 = shl nsw i32 %.sext, 12, !dbg !31
  %64 = shl nsw i32 %.sext322, 12, !dbg !31
  %65 = shl nsw i32 %.sext324, 12, !dbg !31
  %66 = add i32 %49, %62, !dbg !32
  %67 = add i32 %49, %63, !dbg !32
  %68 = add i32 %49, %64, !dbg !32
  %69 = add i32 %49, %65, !dbg !32
  %70 = sext i32 %66 to i64, !dbg !33
  %71 = getelementptr bfloat, ptr addrspace(1) %1, i64 %70, !dbg !33
  %72 = sext i32 %67 to i64, !dbg !33
  %73 = getelementptr bfloat, ptr addrspace(1) %1, i64 %72, !dbg !33
  %74 = sext i32 %68 to i64, !dbg !33
  %75 = getelementptr bfloat, ptr addrspace(1) %1, i64 %74, !dbg !33
  %76 = sext i32 %69 to i64, !dbg !33
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !33
  %78 = xor i32 %24, %15, !dbg !34
  %79 = and i32 %78, 24, !dbg !34
  %80 = shl nuw nsw i32 %20, 5, !dbg !34
  %81 = or disjoint i32 %80, %79, !dbg !34
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %81, !dbg !34
  %83 = or disjoint i32 %81, 1024, !dbg !34
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %83, !dbg !34
  %85 = or disjoint i32 %81, 2048, !dbg !34
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %85, !dbg !34
  %87 = or disjoint i32 %81, 3072, !dbg !34
  %88 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %87, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %55, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %84, ptr addrspace(1) %57, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %59, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %88, ptr addrspace(1) %61, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %81, !dbg !35
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %83, !dbg !35
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %85, !dbg !35
  %92 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %87, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %89, ptr addrspace(1) %71, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %90, ptr addrspace(1) %73, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %91, ptr addrspace(1) %75, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %92, ptr addrspace(1) %77, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %93 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !36
  %94 = getelementptr i8, ptr addrspace(1) %57, i64 64, !dbg !36
  %95 = getelementptr i8, ptr addrspace(1) %59, i64 64, !dbg !36
  %96 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !36
  %97 = getelementptr i8, ptr addrspace(1) %71, i64 64, !dbg !37
  %98 = getelementptr i8, ptr addrspace(1) %73, i64 64, !dbg !37
  %99 = getelementptr i8, ptr addrspace(1) %75, i64 64, !dbg !37
  %100 = getelementptr i8, ptr addrspace(1) %77, i64 64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %81, !dbg !34
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %83, !dbg !34
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %85, !dbg !34
  %104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %87, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %93, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %94, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %95, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %104, ptr addrspace(1) %96, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %105 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %81, !dbg !35
  %106 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %83, !dbg !35
  %107 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %85, !dbg !35
  %108 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %87, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %105, ptr addrspace(1) %97, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %98, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %107, ptr addrspace(1) %99, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %108, ptr addrspace(1) %100, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %invariant.op = or disjoint i32 %16, %19, !dbg !38
  %invariant.op453 = or disjoint i32 %invariant.op, 32, !dbg !38
  %invariant.op456 = or disjoint i32 %invariant.op, 64, !dbg !38
  %invariant.op459 = or disjoint i32 %invariant.op, 96, !dbg !38
  %109 = shl i32 %15, 2
  %110 = and i32 %109, 8
  %111 = and i32 %109, 16
  %112 = and i32 %109, 24
  %113 = and i32 %15, 7
  %114 = and i32 %15, 15
  %115 = lshr i32 %15, 1
  %116 = and i32 %115, 8
  %117 = xor i32 %112, %116
  %118 = or disjoint i32 %19, %114
  %119 = shl nuw nsw i32 %118, 5
  %120 = or disjoint i32 %117, %119
  %121 = or disjoint i32 %110, 16
  %122 = or disjoint i32 %116, %111
  %123 = xor i32 %122, %121
  %124 = or disjoint i32 %123, %119
  %.reass454 = or disjoint i32 %113, %invariant.op453
  %125 = shl nuw nsw i32 %.reass454, 5
  %126 = or disjoint i32 %125, %117
  %127 = or disjoint i32 %123, %125
  %.reass457 = or disjoint i32 %113, %invariant.op456
  %128 = shl nuw nsw i32 %.reass457, 5
  %129 = or disjoint i32 %128, %117
  %130 = or disjoint i32 %123, %128
  %.reass460 = or disjoint i32 %113, %invariant.op459
  %131 = shl nuw nsw i32 %.reass460, 5
  %132 = or disjoint i32 %131, %117
  %133 = or disjoint i32 %123, %131
  %134 = xor i32 %109, %15
  %135 = and i32 %134, 24
  %136 = or disjoint i32 %18, %113
  %137 = shl nuw nsw i32 %136, 5
  %138 = or disjoint i32 %135, %137
  %139 = or disjoint i32 %138, 512
  %140 = or disjoint i32 %137, 1024
  %141 = or disjoint i32 %135, %140
  %142 = or disjoint i32 %138, 1536
  %143 = or disjoint i32 %137, 2048
  %144 = or disjoint i32 %135, %143
  %145 = or disjoint i32 %138, 2560
  %146 = or disjoint i32 %137, 3072
  %147 = or disjoint i32 %135, %146
  %148 = or disjoint i32 %138, 3584
  br label %149, !dbg !38

149:                                              ; preds = %4, %149
  %150 = phi i32 [ -1, %4 ], [ %283, %149 ]
  %151 = phi i32 [ 1, %4 ], [ %729, %149 ]
  %.pn82468 = phi ptr addrspace(1) [ %100, %4 ], [ %726, %149 ]
  %.pn98467 = phi ptr addrspace(1) [ %99, %4 ], [ %725, %149 ]
  %.pn114466 = phi ptr addrspace(1) [ %98, %4 ], [ %724, %149 ]
  %.pn130465 = phi ptr addrspace(1) [ %97, %4 ], [ %723, %149 ]
  %.pn18464 = phi ptr addrspace(1) [ %96, %4 ], [ %722, %149 ]
  %.pn34463 = phi ptr addrspace(1) [ %95, %4 ], [ %721, %149 ]
  %.pn50462 = phi ptr addrspace(1) [ %94, %4 ], [ %720, %149 ]
  %.pn66461 = phi ptr addrspace(1) [ %93, %4 ], [ %719, %149 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %560, %149 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %561, %149 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %562, %149 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %563, %149 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %565, %149 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %566, %149 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %567, %149 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %568, %149 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %570, %149 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %571, %149 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %572, %149 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %573, %149 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %575, %149 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %576, %149 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %577, %149 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %578, %149 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %580, %149 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %581, %149 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %582, %149 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %583, %149 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %585, %149 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %586, %149 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %587, %149 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %588, %149 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %590, %149 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %591, %149 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %592, %149 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %593, %149 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %595, %149 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %596, %149 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %597, %149 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %598, %149 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %600, %149 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %601, %149 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %602, %149 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %603, %149 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %605, %149 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %606, %149 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %607, %149 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %608, %149 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %610, %149 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %611, %149 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %612, %149 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %613, %149 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %615, %149 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %616, %149 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %617, %149 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %618, %149 ]
  %200 = phi float [ 0.000000e+00, %4 ], [ %620, %149 ]
  %201 = phi float [ 0.000000e+00, %4 ], [ %621, %149 ]
  %202 = phi float [ 0.000000e+00, %4 ], [ %622, %149 ]
  %203 = phi float [ 0.000000e+00, %4 ], [ %623, %149 ]
  %204 = phi float [ 0.000000e+00, %4 ], [ %625, %149 ]
  %205 = phi float [ 0.000000e+00, %4 ], [ %626, %149 ]
  %206 = phi float [ 0.000000e+00, %4 ], [ %627, %149 ]
  %207 = phi float [ 0.000000e+00, %4 ], [ %628, %149 ]
  %208 = phi float [ 0.000000e+00, %4 ], [ %630, %149 ]
  %209 = phi float [ 0.000000e+00, %4 ], [ %631, %149 ]
  %210 = phi float [ 0.000000e+00, %4 ], [ %632, %149 ]
  %211 = phi float [ 0.000000e+00, %4 ], [ %633, %149 ]
  %212 = phi float [ 0.000000e+00, %4 ], [ %635, %149 ]
  %213 = phi float [ 0.000000e+00, %4 ], [ %636, %149 ]
  %214 = phi float [ 0.000000e+00, %4 ], [ %637, %149 ]
  %215 = phi float [ 0.000000e+00, %4 ], [ %638, %149 ]
  %216 = phi float [ 0.000000e+00, %4 ], [ %640, %149 ]
  %217 = phi float [ 0.000000e+00, %4 ], [ %641, %149 ]
  %218 = phi float [ 0.000000e+00, %4 ], [ %642, %149 ]
  %219 = phi float [ 0.000000e+00, %4 ], [ %643, %149 ]
  %220 = phi float [ 0.000000e+00, %4 ], [ %645, %149 ]
  %221 = phi float [ 0.000000e+00, %4 ], [ %646, %149 ]
  %222 = phi float [ 0.000000e+00, %4 ], [ %647, %149 ]
  %223 = phi float [ 0.000000e+00, %4 ], [ %648, %149 ]
  %224 = phi float [ 0.000000e+00, %4 ], [ %650, %149 ]
  %225 = phi float [ 0.000000e+00, %4 ], [ %651, %149 ]
  %226 = phi float [ 0.000000e+00, %4 ], [ %652, %149 ]
  %227 = phi float [ 0.000000e+00, %4 ], [ %653, %149 ]
  %228 = phi float [ 0.000000e+00, %4 ], [ %655, %149 ]
  %229 = phi float [ 0.000000e+00, %4 ], [ %656, %149 ]
  %230 = phi float [ 0.000000e+00, %4 ], [ %657, %149 ]
  %231 = phi float [ 0.000000e+00, %4 ], [ %658, %149 ]
  %232 = phi float [ 0.000000e+00, %4 ], [ %660, %149 ]
  %233 = phi float [ 0.000000e+00, %4 ], [ %661, %149 ]
  %234 = phi float [ 0.000000e+00, %4 ], [ %662, %149 ]
  %235 = phi float [ 0.000000e+00, %4 ], [ %663, %149 ]
  %236 = phi float [ 0.000000e+00, %4 ], [ %665, %149 ]
  %237 = phi float [ 0.000000e+00, %4 ], [ %666, %149 ]
  %238 = phi float [ 0.000000e+00, %4 ], [ %667, %149 ]
  %239 = phi float [ 0.000000e+00, %4 ], [ %668, %149 ]
  %240 = phi float [ 0.000000e+00, %4 ], [ %670, %149 ]
  %241 = phi float [ 0.000000e+00, %4 ], [ %671, %149 ]
  %242 = phi float [ 0.000000e+00, %4 ], [ %672, %149 ]
  %243 = phi float [ 0.000000e+00, %4 ], [ %673, %149 ]
  %244 = phi float [ 0.000000e+00, %4 ], [ %675, %149 ]
  %245 = phi float [ 0.000000e+00, %4 ], [ %676, %149 ]
  %246 = phi float [ 0.000000e+00, %4 ], [ %677, %149 ]
  %247 = phi float [ 0.000000e+00, %4 ], [ %678, %149 ]
  %248 = phi float [ 0.000000e+00, %4 ], [ %680, %149 ]
  %249 = phi float [ 0.000000e+00, %4 ], [ %681, %149 ]
  %250 = phi float [ 0.000000e+00, %4 ], [ %682, %149 ]
  %251 = phi float [ 0.000000e+00, %4 ], [ %683, %149 ]
  %252 = phi float [ 0.000000e+00, %4 ], [ %685, %149 ]
  %253 = phi float [ 0.000000e+00, %4 ], [ %686, %149 ]
  %254 = phi float [ 0.000000e+00, %4 ], [ %687, %149 ]
  %255 = phi float [ 0.000000e+00, %4 ], [ %688, %149 ]
  %256 = phi float [ 0.000000e+00, %4 ], [ %690, %149 ]
  %257 = phi float [ 0.000000e+00, %4 ], [ %691, %149 ]
  %258 = phi float [ 0.000000e+00, %4 ], [ %692, %149 ]
  %259 = phi float [ 0.000000e+00, %4 ], [ %693, %149 ]
  %260 = phi float [ 0.000000e+00, %4 ], [ %695, %149 ]
  %261 = phi float [ 0.000000e+00, %4 ], [ %696, %149 ]
  %262 = phi float [ 0.000000e+00, %4 ], [ %697, %149 ]
  %263 = phi float [ 0.000000e+00, %4 ], [ %698, %149 ]
  %264 = phi float [ 0.000000e+00, %4 ], [ %700, %149 ]
  %265 = phi float [ 0.000000e+00, %4 ], [ %701, %149 ]
  %266 = phi float [ 0.000000e+00, %4 ], [ %702, %149 ]
  %267 = phi float [ 0.000000e+00, %4 ], [ %703, %149 ]
  %268 = phi float [ 0.000000e+00, %4 ], [ %705, %149 ]
  %269 = phi float [ 0.000000e+00, %4 ], [ %706, %149 ]
  %270 = phi float [ 0.000000e+00, %4 ], [ %707, %149 ]
  %271 = phi float [ 0.000000e+00, %4 ], [ %708, %149 ]
  %272 = phi float [ 0.000000e+00, %4 ], [ %710, %149 ]
  %273 = phi float [ 0.000000e+00, %4 ], [ %711, %149 ]
  %274 = phi float [ 0.000000e+00, %4 ], [ %712, %149 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %713, %149 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %715, %149 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %716, %149 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %717, %149 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %718, %149 ]
  %280 = phi i1 [ true, %4 ], [ false, %149 ]
  %281 = add i32 %150, 1, !dbg !38
  %282 = icmp slt i32 %281, 2, !dbg !38
  %283 = select i1 %282, i32 %281, i32 0, !dbg !38
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %284 = shl i32 %283, 12, !dbg !34
  %285 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %284, !dbg !34
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %120, !dbg !34
  %287 = ptrtoint ptr addrspace(3) %286 to i32, !dbg !34
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %287) #1, !dbg !34
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !34
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !34
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !34
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !34
  %293 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %124, !dbg !34
  %294 = ptrtoint ptr addrspace(3) %293 to i32, !dbg !34
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %294) #1, !dbg !34
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !34
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !34
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !34
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !34
  %300 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %126, !dbg !34
  %301 = ptrtoint ptr addrspace(3) %300 to i32, !dbg !34
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %301) #1, !dbg !34
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !34
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !34
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !34
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !34
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %127, !dbg !34
  %308 = ptrtoint ptr addrspace(3) %307 to i32, !dbg !34
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %308) #1, !dbg !34
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !34
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !34
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !34
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !34
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %129, !dbg !34
  %315 = ptrtoint ptr addrspace(3) %314 to i32, !dbg !34
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #1, !dbg !34
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !34
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !34
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !34
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !34
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %130, !dbg !34
  %322 = ptrtoint ptr addrspace(3) %321 to i32, !dbg !34
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %322) #1, !dbg !34
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !34
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !34
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !34
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !34
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %132, !dbg !34
  %329 = ptrtoint ptr addrspace(3) %328 to i32, !dbg !34
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %329) #1, !dbg !34
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !34
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !34
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !34
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !34
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %133, !dbg !34
  %336 = ptrtoint ptr addrspace(3) %335 to i32, !dbg !34
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %336) #1, !dbg !34
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !34
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !34
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !34
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !34
  %342 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %284, !dbg !35
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %138, !dbg !35
  %344 = ptrtoint ptr addrspace(3) %343 to i32, !dbg !35
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %344) #1, !dbg !35
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !35
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !35
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !35
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !35
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %139, !dbg !35
  %351 = ptrtoint ptr addrspace(3) %350 to i32, !dbg !35
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #1, !dbg !35
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !35
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !35
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %141, !dbg !35
  %358 = ptrtoint ptr addrspace(3) %357 to i32, !dbg !35
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %358) #1, !dbg !35
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !35
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !35
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !35
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %142, !dbg !35
  %365 = ptrtoint ptr addrspace(3) %364 to i32, !dbg !35
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #1, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !35
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !35
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !35
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !35
  %371 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %144, !dbg !35
  %372 = ptrtoint ptr addrspace(3) %371 to i32, !dbg !35
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %372) #1, !dbg !35
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !35
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !35
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !35
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !35
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %145, !dbg !35
  %379 = ptrtoint ptr addrspace(3) %378 to i32, !dbg !35
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #1, !dbg !35
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !35
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !35
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !35
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !35
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %147, !dbg !35
  %386 = ptrtoint ptr addrspace(3) %385 to i32, !dbg !35
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %386) #1, !dbg !35
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !35
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !35
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !35
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !35
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %148, !dbg !35
  %393 = ptrtoint ptr addrspace(3) %392 to i32, !dbg !35
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %393) #1, !dbg !35
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !35
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !35
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !35
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !35
  %399 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %152, float %153, float %154, float %155, i32 %289, i32 %290, i32 %291, i32 %292, i32 %346, i32 %347) #1, !dbg !39
  %400 = extractvalue { float, float, float, float } %399, 0, !dbg !39
  %401 = extractvalue { float, float, float, float } %399, 1, !dbg !39
  %402 = extractvalue { float, float, float, float } %399, 2, !dbg !39
  %403 = extractvalue { float, float, float, float } %399, 3, !dbg !39
  %404 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %289, i32 %290, i32 %291, i32 %292, i32 %353, i32 %354) #1, !dbg !39
  %405 = extractvalue { float, float, float, float } %404, 0, !dbg !39
  %406 = extractvalue { float, float, float, float } %404, 1, !dbg !39
  %407 = extractvalue { float, float, float, float } %404, 2, !dbg !39
  %408 = extractvalue { float, float, float, float } %404, 3, !dbg !39
  %409 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %289, i32 %290, i32 %291, i32 %292, i32 %360, i32 %361) #1, !dbg !39
  %410 = extractvalue { float, float, float, float } %409, 0, !dbg !39
  %411 = extractvalue { float, float, float, float } %409, 1, !dbg !39
  %412 = extractvalue { float, float, float, float } %409, 2, !dbg !39
  %413 = extractvalue { float, float, float, float } %409, 3, !dbg !39
  %414 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %289, i32 %290, i32 %291, i32 %292, i32 %367, i32 %368) #1, !dbg !39
  %415 = extractvalue { float, float, float, float } %414, 0, !dbg !39
  %416 = extractvalue { float, float, float, float } %414, 1, !dbg !39
  %417 = extractvalue { float, float, float, float } %414, 2, !dbg !39
  %418 = extractvalue { float, float, float, float } %414, 3, !dbg !39
  %419 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %289, i32 %290, i32 %291, i32 %292, i32 %374, i32 %375) #1, !dbg !39
  %420 = extractvalue { float, float, float, float } %419, 0, !dbg !39
  %421 = extractvalue { float, float, float, float } %419, 1, !dbg !39
  %422 = extractvalue { float, float, float, float } %419, 2, !dbg !39
  %423 = extractvalue { float, float, float, float } %419, 3, !dbg !39
  %424 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %289, i32 %290, i32 %291, i32 %292, i32 %381, i32 %382) #1, !dbg !39
  %425 = extractvalue { float, float, float, float } %424, 0, !dbg !39
  %426 = extractvalue { float, float, float, float } %424, 1, !dbg !39
  %427 = extractvalue { float, float, float, float } %424, 2, !dbg !39
  %428 = extractvalue { float, float, float, float } %424, 3, !dbg !39
  %429 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %289, i32 %290, i32 %291, i32 %292, i32 %388, i32 %389) #1, !dbg !39
  %430 = extractvalue { float, float, float, float } %429, 0, !dbg !39
  %431 = extractvalue { float, float, float, float } %429, 1, !dbg !39
  %432 = extractvalue { float, float, float, float } %429, 2, !dbg !39
  %433 = extractvalue { float, float, float, float } %429, 3, !dbg !39
  %434 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %289, i32 %290, i32 %291, i32 %292, i32 %395, i32 %396) #1, !dbg !39
  %435 = extractvalue { float, float, float, float } %434, 0, !dbg !39
  %436 = extractvalue { float, float, float, float } %434, 1, !dbg !39
  %437 = extractvalue { float, float, float, float } %434, 2, !dbg !39
  %438 = extractvalue { float, float, float, float } %434, 3, !dbg !39
  %439 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %303, i32 %304, i32 %305, i32 %306, i32 %346, i32 %347) #1, !dbg !39
  %440 = extractvalue { float, float, float, float } %439, 0, !dbg !39
  %441 = extractvalue { float, float, float, float } %439, 1, !dbg !39
  %442 = extractvalue { float, float, float, float } %439, 2, !dbg !39
  %443 = extractvalue { float, float, float, float } %439, 3, !dbg !39
  %444 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %303, i32 %304, i32 %305, i32 %306, i32 %353, i32 %354) #1, !dbg !39
  %445 = extractvalue { float, float, float, float } %444, 0, !dbg !39
  %446 = extractvalue { float, float, float, float } %444, 1, !dbg !39
  %447 = extractvalue { float, float, float, float } %444, 2, !dbg !39
  %448 = extractvalue { float, float, float, float } %444, 3, !dbg !39
  %449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %303, i32 %304, i32 %305, i32 %306, i32 %360, i32 %361) #1, !dbg !39
  %450 = extractvalue { float, float, float, float } %449, 0, !dbg !39
  %451 = extractvalue { float, float, float, float } %449, 1, !dbg !39
  %452 = extractvalue { float, float, float, float } %449, 2, !dbg !39
  %453 = extractvalue { float, float, float, float } %449, 3, !dbg !39
  %454 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %196, float %197, float %198, float %199, i32 %303, i32 %304, i32 %305, i32 %306, i32 %367, i32 %368) #1, !dbg !39
  %455 = extractvalue { float, float, float, float } %454, 0, !dbg !39
  %456 = extractvalue { float, float, float, float } %454, 1, !dbg !39
  %457 = extractvalue { float, float, float, float } %454, 2, !dbg !39
  %458 = extractvalue { float, float, float, float } %454, 3, !dbg !39
  %459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %200, float %201, float %202, float %203, i32 %303, i32 %304, i32 %305, i32 %306, i32 %374, i32 %375) #1, !dbg !39
  %460 = extractvalue { float, float, float, float } %459, 0, !dbg !39
  %461 = extractvalue { float, float, float, float } %459, 1, !dbg !39
  %462 = extractvalue { float, float, float, float } %459, 2, !dbg !39
  %463 = extractvalue { float, float, float, float } %459, 3, !dbg !39
  %464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %204, float %205, float %206, float %207, i32 %303, i32 %304, i32 %305, i32 %306, i32 %381, i32 %382) #1, !dbg !39
  %465 = extractvalue { float, float, float, float } %464, 0, !dbg !39
  %466 = extractvalue { float, float, float, float } %464, 1, !dbg !39
  %467 = extractvalue { float, float, float, float } %464, 2, !dbg !39
  %468 = extractvalue { float, float, float, float } %464, 3, !dbg !39
  %469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %208, float %209, float %210, float %211, i32 %303, i32 %304, i32 %305, i32 %306, i32 %388, i32 %389) #1, !dbg !39
  %470 = extractvalue { float, float, float, float } %469, 0, !dbg !39
  %471 = extractvalue { float, float, float, float } %469, 1, !dbg !39
  %472 = extractvalue { float, float, float, float } %469, 2, !dbg !39
  %473 = extractvalue { float, float, float, float } %469, 3, !dbg !39
  %474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %212, float %213, float %214, float %215, i32 %303, i32 %304, i32 %305, i32 %306, i32 %395, i32 %396) #1, !dbg !39
  %475 = extractvalue { float, float, float, float } %474, 0, !dbg !39
  %476 = extractvalue { float, float, float, float } %474, 1, !dbg !39
  %477 = extractvalue { float, float, float, float } %474, 2, !dbg !39
  %478 = extractvalue { float, float, float, float } %474, 3, !dbg !39
  %479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %317, i32 %318, i32 %319, i32 %320, i32 %346, i32 %347) #1, !dbg !39
  %480 = extractvalue { float, float, float, float } %479, 0, !dbg !39
  %481 = extractvalue { float, float, float, float } %479, 1, !dbg !39
  %482 = extractvalue { float, float, float, float } %479, 2, !dbg !39
  %483 = extractvalue { float, float, float, float } %479, 3, !dbg !39
  %484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %220, float %221, float %222, float %223, i32 %317, i32 %318, i32 %319, i32 %320, i32 %353, i32 %354) #1, !dbg !39
  %485 = extractvalue { float, float, float, float } %484, 0, !dbg !39
  %486 = extractvalue { float, float, float, float } %484, 1, !dbg !39
  %487 = extractvalue { float, float, float, float } %484, 2, !dbg !39
  %488 = extractvalue { float, float, float, float } %484, 3, !dbg !39
  %489 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %317, i32 %318, i32 %319, i32 %320, i32 %360, i32 %361) #1, !dbg !39
  %490 = extractvalue { float, float, float, float } %489, 0, !dbg !39
  %491 = extractvalue { float, float, float, float } %489, 1, !dbg !39
  %492 = extractvalue { float, float, float, float } %489, 2, !dbg !39
  %493 = extractvalue { float, float, float, float } %489, 3, !dbg !39
  %494 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %317, i32 %318, i32 %319, i32 %320, i32 %367, i32 %368) #1, !dbg !39
  %495 = extractvalue { float, float, float, float } %494, 0, !dbg !39
  %496 = extractvalue { float, float, float, float } %494, 1, !dbg !39
  %497 = extractvalue { float, float, float, float } %494, 2, !dbg !39
  %498 = extractvalue { float, float, float, float } %494, 3, !dbg !39
  %499 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %317, i32 %318, i32 %319, i32 %320, i32 %374, i32 %375) #1, !dbg !39
  %500 = extractvalue { float, float, float, float } %499, 0, !dbg !39
  %501 = extractvalue { float, float, float, float } %499, 1, !dbg !39
  %502 = extractvalue { float, float, float, float } %499, 2, !dbg !39
  %503 = extractvalue { float, float, float, float } %499, 3, !dbg !39
  %504 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %236, float %237, float %238, float %239, i32 %317, i32 %318, i32 %319, i32 %320, i32 %381, i32 %382) #1, !dbg !39
  %505 = extractvalue { float, float, float, float } %504, 0, !dbg !39
  %506 = extractvalue { float, float, float, float } %504, 1, !dbg !39
  %507 = extractvalue { float, float, float, float } %504, 2, !dbg !39
  %508 = extractvalue { float, float, float, float } %504, 3, !dbg !39
  %509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %240, float %241, float %242, float %243, i32 %317, i32 %318, i32 %319, i32 %320, i32 %388, i32 %389) #1, !dbg !39
  %510 = extractvalue { float, float, float, float } %509, 0, !dbg !39
  %511 = extractvalue { float, float, float, float } %509, 1, !dbg !39
  %512 = extractvalue { float, float, float, float } %509, 2, !dbg !39
  %513 = extractvalue { float, float, float, float } %509, 3, !dbg !39
  %514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %317, i32 %318, i32 %319, i32 %320, i32 %395, i32 %396) #1, !dbg !39
  %515 = extractvalue { float, float, float, float } %514, 0, !dbg !39
  %516 = extractvalue { float, float, float, float } %514, 1, !dbg !39
  %517 = extractvalue { float, float, float, float } %514, 2, !dbg !39
  %518 = extractvalue { float, float, float, float } %514, 3, !dbg !39
  %519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %248, float %249, float %250, float %251, i32 %331, i32 %332, i32 %333, i32 %334, i32 %346, i32 %347) #1, !dbg !39
  %520 = extractvalue { float, float, float, float } %519, 0, !dbg !39
  %521 = extractvalue { float, float, float, float } %519, 1, !dbg !39
  %522 = extractvalue { float, float, float, float } %519, 2, !dbg !39
  %523 = extractvalue { float, float, float, float } %519, 3, !dbg !39
  %524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %331, i32 %332, i32 %333, i32 %334, i32 %353, i32 %354) #1, !dbg !39
  %525 = extractvalue { float, float, float, float } %524, 0, !dbg !39
  %526 = extractvalue { float, float, float, float } %524, 1, !dbg !39
  %527 = extractvalue { float, float, float, float } %524, 2, !dbg !39
  %528 = extractvalue { float, float, float, float } %524, 3, !dbg !39
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %256, float %257, float %258, float %259, i32 %331, i32 %332, i32 %333, i32 %334, i32 %360, i32 %361) #1, !dbg !39
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !39
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !39
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !39
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !39
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %260, float %261, float %262, float %263, i32 %331, i32 %332, i32 %333, i32 %334, i32 %367, i32 %368) #1, !dbg !39
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !39
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !39
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !39
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !39
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %264, float %265, float %266, float %267, i32 %331, i32 %332, i32 %333, i32 %334, i32 %374, i32 %375) #1, !dbg !39
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !39
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !39
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !39
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !39
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %268, float %269, float %270, float %271, i32 %331, i32 %332, i32 %333, i32 %334, i32 %381, i32 %382) #1, !dbg !39
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !39
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !39
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !39
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !39
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %272, float %273, float %274, float %275, i32 %331, i32 %332, i32 %333, i32 %334, i32 %388, i32 %389) #1, !dbg !39
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !39
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !39
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !39
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !39
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %276, float %277, float %278, float %279, i32 %331, i32 %332, i32 %333, i32 %334, i32 %395, i32 %396) #1, !dbg !39
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !39
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !39
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !39
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !39
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %400, float %401, float %402, float %403, i32 %296, i32 %297, i32 %298, i32 %299, i32 %348, i32 %349) #1, !dbg !39
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !39
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !39
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !39
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !39
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %405, float %406, float %407, float %408, i32 %296, i32 %297, i32 %298, i32 %299, i32 %355, i32 %356) #1, !dbg !39
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !39
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !39
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !39
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !39
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %410, float %411, float %412, float %413, i32 %296, i32 %297, i32 %298, i32 %299, i32 %362, i32 %363) #1, !dbg !39
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !39
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !39
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !39
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !39
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %415, float %416, float %417, float %418, i32 %296, i32 %297, i32 %298, i32 %299, i32 %369, i32 %370) #1, !dbg !39
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !39
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !39
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !39
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !39
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %420, float %421, float %422, float %423, i32 %296, i32 %297, i32 %298, i32 %299, i32 %376, i32 %377) #1, !dbg !39
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !39
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !39
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !39
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !39
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %425, float %426, float %427, float %428, i32 %296, i32 %297, i32 %298, i32 %299, i32 %383, i32 %384) #1, !dbg !39
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !39
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !39
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !39
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !39
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %430, float %431, float %432, float %433, i32 %296, i32 %297, i32 %298, i32 %299, i32 %390, i32 %391) #1, !dbg !39
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !39
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !39
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !39
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !39
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %435, float %436, float %437, float %438, i32 %296, i32 %297, i32 %298, i32 %299, i32 %397, i32 %398) #1, !dbg !39
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !39
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !39
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !39
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !39
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %440, float %441, float %442, float %443, i32 %310, i32 %311, i32 %312, i32 %313, i32 %348, i32 %349) #1, !dbg !39
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !39
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !39
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !39
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !39
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %445, float %446, float %447, float %448, i32 %310, i32 %311, i32 %312, i32 %313, i32 %355, i32 %356) #1, !dbg !39
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !39
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !39
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !39
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !39
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %450, float %451, float %452, float %453, i32 %310, i32 %311, i32 %312, i32 %313, i32 %362, i32 %363) #1, !dbg !39
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !39
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !39
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !39
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !39
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %455, float %456, float %457, float %458, i32 %310, i32 %311, i32 %312, i32 %313, i32 %369, i32 %370) #1, !dbg !39
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !39
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !39
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !39
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !39
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %460, float %461, float %462, float %463, i32 %310, i32 %311, i32 %312, i32 %313, i32 %376, i32 %377) #1, !dbg !39
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !39
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !39
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !39
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !39
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %465, float %466, float %467, float %468, i32 %310, i32 %311, i32 %312, i32 %313, i32 %383, i32 %384) #1, !dbg !39
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !39
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !39
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !39
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !39
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %470, float %471, float %472, float %473, i32 %310, i32 %311, i32 %312, i32 %313, i32 %390, i32 %391) #1, !dbg !39
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !39
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !39
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !39
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !39
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %475, float %476, float %477, float %478, i32 %310, i32 %311, i32 %312, i32 %313, i32 %397, i32 %398) #1, !dbg !39
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !39
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !39
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !39
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !39
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %480, float %481, float %482, float %483, i32 %324, i32 %325, i32 %326, i32 %327, i32 %348, i32 %349) #1, !dbg !39
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !39
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !39
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !39
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !39
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %485, float %486, float %487, float %488, i32 %324, i32 %325, i32 %326, i32 %327, i32 %355, i32 %356) #1, !dbg !39
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !39
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !39
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !39
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !39
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %490, float %491, float %492, float %493, i32 %324, i32 %325, i32 %326, i32 %327, i32 %362, i32 %363) #1, !dbg !39
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !39
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !39
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !39
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !39
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %495, float %496, float %497, float %498, i32 %324, i32 %325, i32 %326, i32 %327, i32 %369, i32 %370) #1, !dbg !39
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !39
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !39
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !39
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !39
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %500, float %501, float %502, float %503, i32 %324, i32 %325, i32 %326, i32 %327, i32 %376, i32 %377) #1, !dbg !39
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !39
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !39
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !39
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !39
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %505, float %506, float %507, float %508, i32 %324, i32 %325, i32 %326, i32 %327, i32 %383, i32 %384) #1, !dbg !39
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !39
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !39
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !39
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !39
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %324, i32 %325, i32 %326, i32 %327, i32 %390, i32 %391) #1, !dbg !39
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !39
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !39
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !39
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !39
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %515, float %516, float %517, float %518, i32 %324, i32 %325, i32 %326, i32 %327, i32 %397, i32 %398) #1, !dbg !39
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !39
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !39
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !39
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !39
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %520, float %521, float %522, float %523, i32 %338, i32 %339, i32 %340, i32 %341, i32 %348, i32 %349) #1, !dbg !39
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !39
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !39
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !39
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !39
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %338, i32 %339, i32 %340, i32 %341, i32 %355, i32 %356) #1, !dbg !39
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !39
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !39
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !39
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !39
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %338, i32 %339, i32 %340, i32 %341, i32 %362, i32 %363) #1, !dbg !39
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !39
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !39
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !39
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !39
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %338, i32 %339, i32 %340, i32 %341, i32 %369, i32 %370) #1, !dbg !39
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !39
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !39
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !39
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !39
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %338, i32 %339, i32 %340, i32 %341, i32 %376, i32 %377) #1, !dbg !39
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !39
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !39
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !39
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !39
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %338, i32 %339, i32 %340, i32 %341, i32 %383, i32 %384) #1, !dbg !39
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !39
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !39
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !39
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !39
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %338, i32 %339, i32 %340, i32 %341, i32 %390, i32 %391) #1, !dbg !39
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !39
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !39
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !39
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !39
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %338, i32 %339, i32 %340, i32 %341, i32 %397, i32 %398) #1, !dbg !39
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !39
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !39
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !39
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !39
  %719 = getelementptr i8, ptr addrspace(1) %.pn66461, i64 64, !dbg !36
  %720 = getelementptr i8, ptr addrspace(1) %.pn50462, i64 64, !dbg !36
  %721 = getelementptr i8, ptr addrspace(1) %.pn34463, i64 64, !dbg !36
  %722 = getelementptr i8, ptr addrspace(1) %.pn18464, i64 64, !dbg !36
  %723 = getelementptr i8, ptr addrspace(1) %.pn130465, i64 64, !dbg !37
  %724 = getelementptr i8, ptr addrspace(1) %.pn114466, i64 64, !dbg !37
  %725 = getelementptr i8, ptr addrspace(1) %.pn98467, i64 64, !dbg !37
  %726 = getelementptr i8, ptr addrspace(1) %.pn82468, i64 64, !dbg !37
  %727 = add i32 %151, 1, !dbg !38
  %728 = icmp slt i32 %727, 2, !dbg !38
  %729 = select i1 %728, i32 %727, i32 0, !dbg !38
  %730 = shl i32 %729, 12, !dbg !34
  %731 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %730, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %732 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %731, i32 %81, !dbg !34
  %733 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %731, i32 %83, !dbg !34
  %734 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %731, i32 %85, !dbg !34
  %735 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %731, i32 %87, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %732, ptr addrspace(1) %719, i32 0) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %733, ptr addrspace(1) %720, i32 0) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %734, ptr addrspace(1) %721, i32 0) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %735, ptr addrspace(1) %722, i32 0) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %736 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %730, !dbg !35
  %737 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %736, i32 %81, !dbg !35
  %738 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %736, i32 %83, !dbg !35
  %739 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %736, i32 %85, !dbg !35
  %740 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %736, i32 %87, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %737, ptr addrspace(1) %723, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %738, ptr addrspace(1) %724, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %739, ptr addrspace(1) %725, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %740, ptr addrspace(1) %726, i32 0) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  br i1 %280, label %149, label %741, !dbg !38

741:                                              ; preds = %149
  %742 = and i32 %24, 120, !dbg !19
  %743 = or disjoint i32 %30, %742, !dbg !22
  %744 = lshr i32 %15, 4, !dbg !19
  %745 = and i32 %744, 7, !dbg !19
  %746 = or disjoint i32 %745, %14, !dbg !20
  %747 = or disjoint i32 %746, 120, !dbg !20
  %748 = or disjoint i32 %746, 112, !dbg !20
  %749 = or disjoint i32 %746, 104, !dbg !20
  %750 = or disjoint i32 %746, 96, !dbg !20
  %751 = or disjoint i32 %746, 88, !dbg !20
  %752 = or disjoint i32 %746, 80, !dbg !20
  %753 = or disjoint i32 %746, 72, !dbg !20
  %754 = or disjoint i32 %746, 64, !dbg !20
  %755 = or disjoint i32 %746, 56, !dbg !20
  %756 = or disjoint i32 %746, 48, !dbg !20
  %757 = or disjoint i32 %746, 40, !dbg !20
  %758 = or disjoint i32 %746, 32, !dbg !20
  %759 = or disjoint i32 %746, 24, !dbg !20
  %760 = or disjoint i32 %746, 16, !dbg !20
  %761 = or disjoint i32 %746, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %762 = icmp slt i32 %746, 512, !dbg !40
  %763 = icmp slt i32 %761, 512, !dbg !40
  %764 = icmp slt i32 %760, 512, !dbg !40
  %765 = icmp slt i32 %759, 512, !dbg !40
  %766 = icmp slt i32 %758, 512, !dbg !40
  %767 = icmp slt i32 %757, 512, !dbg !40
  %768 = icmp slt i32 %756, 512, !dbg !40
  %769 = icmp slt i32 %755, 512, !dbg !40
  %770 = icmp slt i32 %754, 512, !dbg !40
  %771 = icmp slt i32 %753, 512, !dbg !40
  %772 = icmp slt i32 %752, 512, !dbg !40
  %773 = icmp slt i32 %751, 512, !dbg !40
  %774 = icmp slt i32 %750, 512, !dbg !40
  %775 = icmp slt i32 %749, 512, !dbg !40
  %776 = icmp slt i32 %748, 512, !dbg !40
  %777 = icmp slt i32 %747, 512, !dbg !40
  %778 = icmp slt i32 %743, 512, !dbg !41
  %779 = and i1 %762, %778, !dbg !42
  %780 = and i1 %763, %778, !dbg !42
  %781 = and i1 %764, %778, !dbg !42
  %782 = and i1 %765, %778, !dbg !42
  %783 = and i1 %766, %778, !dbg !42
  %784 = and i1 %767, %778, !dbg !42
  %785 = and i1 %768, %778, !dbg !42
  %786 = and i1 %769, %778, !dbg !42
  %787 = and i1 %770, %778, !dbg !42
  %788 = and i1 %771, %778, !dbg !42
  %789 = and i1 %772, %778, !dbg !42
  %790 = and i1 %773, %778, !dbg !42
  %791 = and i1 %774, %778, !dbg !42
  %792 = and i1 %775, %778, !dbg !42
  %793 = and i1 %776, %778, !dbg !42
  %794 = and i1 %777, %778, !dbg !42
  %795 = shl i32 %746, 9, !dbg !43
  %796 = shl i32 %761, 9, !dbg !43
  %797 = shl i32 %760, 9, !dbg !43
  %798 = shl i32 %759, 9, !dbg !43
  %799 = shl i32 %758, 9, !dbg !43
  %800 = shl i32 %757, 9, !dbg !43
  %801 = shl i32 %756, 9, !dbg !43
  %802 = shl i32 %755, 9, !dbg !43
  %803 = shl i32 %754, 9, !dbg !43
  %804 = shl i32 %753, 9, !dbg !43
  %805 = shl i32 %752, 9, !dbg !43
  %806 = shl i32 %751, 9, !dbg !43
  %807 = shl i32 %750, 9, !dbg !43
  %808 = shl i32 %749, 9, !dbg !43
  %809 = shl i32 %748, 9, !dbg !43
  %810 = shl i32 %747, 9, !dbg !43
  %811 = shl i32 %43, 18, !dbg !44
  %812 = add i32 %743, %811, !dbg !45
  %813 = add i32 %812, %795, !dbg !46
  %814 = add i32 %812, %796, !dbg !46
  %815 = add i32 %812, %797, !dbg !46
  %816 = add i32 %812, %798, !dbg !46
  %817 = add i32 %812, %799, !dbg !46
  %818 = add i32 %812, %800, !dbg !46
  %819 = add i32 %812, %801, !dbg !46
  %820 = add i32 %812, %802, !dbg !46
  %821 = add i32 %812, %803, !dbg !46
  %822 = add i32 %812, %804, !dbg !46
  %823 = add i32 %812, %805, !dbg !46
  %824 = add i32 %812, %806, !dbg !46
  %825 = add i32 %812, %807, !dbg !46
  %826 = add i32 %812, %808, !dbg !46
  %827 = add i32 %812, %809, !dbg !46
  %828 = add i32 %812, %810, !dbg !46
  %829 = sext i32 %813 to i64, !dbg !47
  %830 = getelementptr bfloat, ptr addrspace(1) %2, i64 %829, !dbg !47
  %831 = sext i32 %814 to i64, !dbg !47
  %832 = getelementptr bfloat, ptr addrspace(1) %2, i64 %831, !dbg !47
  %833 = sext i32 %815 to i64, !dbg !47
  %834 = getelementptr bfloat, ptr addrspace(1) %2, i64 %833, !dbg !47
  %835 = sext i32 %816 to i64, !dbg !47
  %836 = getelementptr bfloat, ptr addrspace(1) %2, i64 %835, !dbg !47
  %837 = sext i32 %817 to i64, !dbg !47
  %838 = getelementptr bfloat, ptr addrspace(1) %2, i64 %837, !dbg !47
  %839 = sext i32 %818 to i64, !dbg !47
  %840 = getelementptr bfloat, ptr addrspace(1) %2, i64 %839, !dbg !47
  %841 = sext i32 %819 to i64, !dbg !47
  %842 = getelementptr bfloat, ptr addrspace(1) %2, i64 %841, !dbg !47
  %843 = sext i32 %820 to i64, !dbg !47
  %844 = getelementptr bfloat, ptr addrspace(1) %2, i64 %843, !dbg !47
  %845 = sext i32 %821 to i64, !dbg !47
  %846 = getelementptr bfloat, ptr addrspace(1) %2, i64 %845, !dbg !47
  %847 = sext i32 %822 to i64, !dbg !47
  %848 = getelementptr bfloat, ptr addrspace(1) %2, i64 %847, !dbg !47
  %849 = sext i32 %823 to i64, !dbg !47
  %850 = getelementptr bfloat, ptr addrspace(1) %2, i64 %849, !dbg !47
  %851 = sext i32 %824 to i64, !dbg !47
  %852 = getelementptr bfloat, ptr addrspace(1) %2, i64 %851, !dbg !47
  %853 = sext i32 %825 to i64, !dbg !47
  %854 = getelementptr bfloat, ptr addrspace(1) %2, i64 %853, !dbg !47
  %855 = sext i32 %826 to i64, !dbg !47
  %856 = getelementptr bfloat, ptr addrspace(1) %2, i64 %855, !dbg !47
  %857 = sext i32 %827 to i64, !dbg !47
  %858 = getelementptr bfloat, ptr addrspace(1) %2, i64 %857, !dbg !47
  %859 = sext i32 %828 to i64, !dbg !47
  %860 = getelementptr bfloat, ptr addrspace(1) %2, i64 %859, !dbg !47
  %861 = fptrunc float %560 to bfloat, !dbg !48
  %862 = fptrunc float %561 to bfloat, !dbg !48
  %863 = fptrunc float %562 to bfloat, !dbg !48
  %864 = fptrunc float %563 to bfloat, !dbg !48
  %865 = fptrunc float %565 to bfloat, !dbg !48
  %866 = fptrunc float %566 to bfloat, !dbg !48
  %867 = fptrunc float %567 to bfloat, !dbg !48
  %868 = fptrunc float %568 to bfloat, !dbg !48
  %869 = fptrunc float %570 to bfloat, !dbg !48
  %870 = fptrunc float %571 to bfloat, !dbg !48
  %871 = fptrunc float %572 to bfloat, !dbg !48
  %872 = fptrunc float %573 to bfloat, !dbg !48
  %873 = fptrunc float %575 to bfloat, !dbg !48
  %874 = fptrunc float %576 to bfloat, !dbg !48
  %875 = fptrunc float %577 to bfloat, !dbg !48
  %876 = fptrunc float %578 to bfloat, !dbg !48
  %877 = fptrunc float %580 to bfloat, !dbg !48
  %878 = fptrunc float %581 to bfloat, !dbg !48
  %879 = fptrunc float %582 to bfloat, !dbg !48
  %880 = fptrunc float %583 to bfloat, !dbg !48
  %881 = fptrunc float %585 to bfloat, !dbg !48
  %882 = fptrunc float %586 to bfloat, !dbg !48
  %883 = fptrunc float %587 to bfloat, !dbg !48
  %884 = fptrunc float %588 to bfloat, !dbg !48
  %885 = fptrunc float %590 to bfloat, !dbg !48
  %886 = fptrunc float %591 to bfloat, !dbg !48
  %887 = fptrunc float %592 to bfloat, !dbg !48
  %888 = fptrunc float %593 to bfloat, !dbg !48
  %889 = fptrunc float %595 to bfloat, !dbg !48
  %890 = fptrunc float %596 to bfloat, !dbg !48
  %891 = fptrunc float %597 to bfloat, !dbg !48
  %892 = fptrunc float %598 to bfloat, !dbg !48
  %893 = fptrunc float %600 to bfloat, !dbg !48
  %894 = fptrunc float %601 to bfloat, !dbg !48
  %895 = fptrunc float %602 to bfloat, !dbg !48
  %896 = fptrunc float %603 to bfloat, !dbg !48
  %897 = fptrunc float %605 to bfloat, !dbg !48
  %898 = fptrunc float %606 to bfloat, !dbg !48
  %899 = fptrunc float %607 to bfloat, !dbg !48
  %900 = fptrunc float %608 to bfloat, !dbg !48
  %901 = fptrunc float %610 to bfloat, !dbg !48
  %902 = fptrunc float %611 to bfloat, !dbg !48
  %903 = fptrunc float %612 to bfloat, !dbg !48
  %904 = fptrunc float %613 to bfloat, !dbg !48
  %905 = fptrunc float %615 to bfloat, !dbg !48
  %906 = fptrunc float %616 to bfloat, !dbg !48
  %907 = fptrunc float %617 to bfloat, !dbg !48
  %908 = fptrunc float %618 to bfloat, !dbg !48
  %909 = fptrunc float %620 to bfloat, !dbg !48
  %910 = fptrunc float %621 to bfloat, !dbg !48
  %911 = fptrunc float %622 to bfloat, !dbg !48
  %912 = fptrunc float %623 to bfloat, !dbg !48
  %913 = fptrunc float %625 to bfloat, !dbg !48
  %914 = fptrunc float %626 to bfloat, !dbg !48
  %915 = fptrunc float %627 to bfloat, !dbg !48
  %916 = fptrunc float %628 to bfloat, !dbg !48
  %917 = fptrunc float %630 to bfloat, !dbg !48
  %918 = fptrunc float %631 to bfloat, !dbg !48
  %919 = fptrunc float %632 to bfloat, !dbg !48
  %920 = fptrunc float %633 to bfloat, !dbg !48
  %921 = fptrunc float %635 to bfloat, !dbg !48
  %922 = fptrunc float %636 to bfloat, !dbg !48
  %923 = fptrunc float %637 to bfloat, !dbg !48
  %924 = fptrunc float %638 to bfloat, !dbg !48
  %925 = fptrunc float %640 to bfloat, !dbg !48
  %926 = fptrunc float %641 to bfloat, !dbg !48
  %927 = fptrunc float %642 to bfloat, !dbg !48
  %928 = fptrunc float %643 to bfloat, !dbg !48
  %929 = fptrunc float %645 to bfloat, !dbg !48
  %930 = fptrunc float %646 to bfloat, !dbg !48
  %931 = fptrunc float %647 to bfloat, !dbg !48
  %932 = fptrunc float %648 to bfloat, !dbg !48
  %933 = fptrunc float %650 to bfloat, !dbg !48
  %934 = fptrunc float %651 to bfloat, !dbg !48
  %935 = fptrunc float %652 to bfloat, !dbg !48
  %936 = fptrunc float %653 to bfloat, !dbg !48
  %937 = fptrunc float %655 to bfloat, !dbg !48
  %938 = fptrunc float %656 to bfloat, !dbg !48
  %939 = fptrunc float %657 to bfloat, !dbg !48
  %940 = fptrunc float %658 to bfloat, !dbg !48
  %941 = fptrunc float %660 to bfloat, !dbg !48
  %942 = fptrunc float %661 to bfloat, !dbg !48
  %943 = fptrunc float %662 to bfloat, !dbg !48
  %944 = fptrunc float %663 to bfloat, !dbg !48
  %945 = fptrunc float %665 to bfloat, !dbg !48
  %946 = fptrunc float %666 to bfloat, !dbg !48
  %947 = fptrunc float %667 to bfloat, !dbg !48
  %948 = fptrunc float %668 to bfloat, !dbg !48
  %949 = fptrunc float %670 to bfloat, !dbg !48
  %950 = fptrunc float %671 to bfloat, !dbg !48
  %951 = fptrunc float %672 to bfloat, !dbg !48
  %952 = fptrunc float %673 to bfloat, !dbg !48
  %953 = fptrunc float %675 to bfloat, !dbg !48
  %954 = fptrunc float %676 to bfloat, !dbg !48
  %955 = fptrunc float %677 to bfloat, !dbg !48
  %956 = fptrunc float %678 to bfloat, !dbg !48
  %957 = fptrunc float %680 to bfloat, !dbg !48
  %958 = fptrunc float %681 to bfloat, !dbg !48
  %959 = fptrunc float %682 to bfloat, !dbg !48
  %960 = fptrunc float %683 to bfloat, !dbg !48
  %961 = fptrunc float %685 to bfloat, !dbg !48
  %962 = fptrunc float %686 to bfloat, !dbg !48
  %963 = fptrunc float %687 to bfloat, !dbg !48
  %964 = fptrunc float %688 to bfloat, !dbg !48
  %965 = fptrunc float %690 to bfloat, !dbg !48
  %966 = fptrunc float %691 to bfloat, !dbg !48
  %967 = fptrunc float %692 to bfloat, !dbg !48
  %968 = fptrunc float %693 to bfloat, !dbg !48
  %969 = fptrunc float %695 to bfloat, !dbg !48
  %970 = fptrunc float %696 to bfloat, !dbg !48
  %971 = fptrunc float %697 to bfloat, !dbg !48
  %972 = fptrunc float %698 to bfloat, !dbg !48
  %973 = fptrunc float %700 to bfloat, !dbg !48
  %974 = fptrunc float %701 to bfloat, !dbg !48
  %975 = fptrunc float %702 to bfloat, !dbg !48
  %976 = fptrunc float %703 to bfloat, !dbg !48
  %977 = fptrunc float %705 to bfloat, !dbg !48
  %978 = fptrunc float %706 to bfloat, !dbg !48
  %979 = fptrunc float %707 to bfloat, !dbg !48
  %980 = fptrunc float %708 to bfloat, !dbg !48
  %981 = fptrunc float %710 to bfloat, !dbg !48
  %982 = fptrunc float %711 to bfloat, !dbg !48
  %983 = fptrunc float %712 to bfloat, !dbg !48
  %984 = fptrunc float %713 to bfloat, !dbg !48
  %985 = fptrunc float %715 to bfloat, !dbg !48
  %986 = fptrunc float %716 to bfloat, !dbg !48
  %987 = fptrunc float %717 to bfloat, !dbg !48
  %988 = fptrunc float %718 to bfloat, !dbg !48
  %989 = shl i32 %15, 1, !dbg !48
  %990 = and i32 %989, 6, !dbg !48
  %991 = shl i32 %15, 5, !dbg !48
  %992 = and i32 %991, 2944, !dbg !48
  %993 = or disjoint i32 %992, %990, !dbg !48
  %994 = or disjoint i32 %993, %18, !dbg !48
  %995 = and i32 %24, 1016, !dbg !48
  %996 = lshr exact i32 %992, 3, !dbg !48
  %997 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %996, !dbg !48
  %998 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %994, !dbg !48
  %999 = bitcast bfloat %861 to i16, !dbg !48
  %1000 = bitcast bfloat %862 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %998, i16 %999, i16 %1000, i1 true) #1, !dbg !48
  %1001 = or disjoint i32 %994, 1024, !dbg !48
  %1002 = lshr i32 %1001, 4, !dbg !48
  %1003 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1002, !dbg !48
  %1004 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1003, i32 %1001, !dbg !48
  %1005 = bitcast bfloat %863 to i16, !dbg !48
  %1006 = bitcast bfloat %864 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1005, i16 %1006, i1 true) #1, !dbg !48
  %1007 = or disjoint i32 %994, 16, !dbg !48
  %1008 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1007, !dbg !48
  %1009 = bitcast bfloat %865 to i16, !dbg !48
  %1010 = bitcast bfloat %866 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1008, i16 %1009, i16 %1010, i1 true) #1, !dbg !48
  %1011 = or disjoint i32 %994, 1040, !dbg !48
  %1012 = lshr i32 %1011, 4, !dbg !48
  %1013 = and i32 %1012, 248, !dbg !48
  %1014 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1013, !dbg !48
  %1015 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1014, i32 %1011, !dbg !48
  %1016 = bitcast bfloat %867 to i16, !dbg !48
  %1017 = bitcast bfloat %868 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1016, i16 %1017, i1 true) #1, !dbg !48
  %1018 = or disjoint i32 %994, 32, !dbg !48
  %1019 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1018, !dbg !48
  %1020 = bitcast bfloat %869 to i16, !dbg !48
  %1021 = bitcast bfloat %870 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1019, i16 %1020, i16 %1021, i1 true) #1, !dbg !48
  %1022 = or disjoint i32 %994, 1056, !dbg !48
  %1023 = lshr i32 %1022, 4, !dbg !48
  %1024 = and i32 %1023, 248, !dbg !48
  %1025 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1024, !dbg !48
  %1026 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1025, i32 %1022, !dbg !48
  %1027 = bitcast bfloat %871 to i16, !dbg !48
  %1028 = bitcast bfloat %872 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1026, i16 %1027, i16 %1028, i1 true) #1, !dbg !48
  %1029 = or disjoint i32 %994, 48, !dbg !48
  %1030 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1029, !dbg !48
  %1031 = bitcast bfloat %873 to i16, !dbg !48
  %1032 = bitcast bfloat %874 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1030, i16 %1031, i16 %1032, i1 true) #1, !dbg !48
  %1033 = or disjoint i32 %994, 1072, !dbg !48
  %1034 = lshr i32 %1033, 4, !dbg !48
  %1035 = and i32 %1034, 248, !dbg !48
  %1036 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1035, !dbg !48
  %1037 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1036, i32 %1033, !dbg !48
  %1038 = bitcast bfloat %875 to i16, !dbg !48
  %1039 = bitcast bfloat %876 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1037, i16 %1038, i16 %1039, i1 true) #1, !dbg !48
  %1040 = or disjoint i32 %994, 64, !dbg !48
  %1041 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1040, !dbg !48
  %1042 = bitcast bfloat %877 to i16, !dbg !48
  %1043 = bitcast bfloat %878 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1041, i16 %1042, i16 %1043, i1 true) #1, !dbg !48
  %1044 = or disjoint i32 %994, 1088, !dbg !48
  %1045 = lshr i32 %1044, 4, !dbg !48
  %1046 = and i32 %1045, 248, !dbg !48
  %1047 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1046, !dbg !48
  %1048 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1047, i32 %1044, !dbg !48
  %1049 = bitcast bfloat %879 to i16, !dbg !48
  %1050 = bitcast bfloat %880 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1048, i16 %1049, i16 %1050, i1 true) #1, !dbg !48
  %1051 = or disjoint i32 %994, 80, !dbg !48
  %1052 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1051, !dbg !48
  %1053 = bitcast bfloat %881 to i16, !dbg !48
  %1054 = bitcast bfloat %882 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1053, i16 %1054, i1 true) #1, !dbg !48
  %1055 = or disjoint i32 %994, 1104, !dbg !48
  %1056 = lshr i32 %1055, 4, !dbg !48
  %1057 = and i32 %1056, 248, !dbg !48
  %1058 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1057, !dbg !48
  %1059 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1058, i32 %1055, !dbg !48
  %1060 = bitcast bfloat %883 to i16, !dbg !48
  %1061 = bitcast bfloat %884 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1059, i16 %1060, i16 %1061, i1 true) #1, !dbg !48
  %1062 = or disjoint i32 %994, 96, !dbg !48
  %1063 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1062, !dbg !48
  %1064 = bitcast bfloat %885 to i16, !dbg !48
  %1065 = bitcast bfloat %886 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1063, i16 %1064, i16 %1065, i1 true) #1, !dbg !48
  %1066 = or disjoint i32 %994, 1120, !dbg !48
  %1067 = lshr i32 %1066, 4, !dbg !48
  %1068 = and i32 %1067, 248, !dbg !48
  %1069 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1068, !dbg !48
  %1070 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1069, i32 %1066, !dbg !48
  %1071 = bitcast bfloat %887 to i16, !dbg !48
  %1072 = bitcast bfloat %888 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1070, i16 %1071, i16 %1072, i1 true) #1, !dbg !48
  %1073 = or disjoint i32 %994, 112, !dbg !48
  %1074 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %997, i32 %1073, !dbg !48
  %1075 = bitcast bfloat %889 to i16, !dbg !48
  %1076 = bitcast bfloat %890 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1075, i16 %1076, i1 true) #1, !dbg !48
  %1077 = or disjoint i32 %994, 1136, !dbg !48
  %1078 = lshr i32 %1077, 4, !dbg !48
  %1079 = and i32 %1078, 248, !dbg !48
  %1080 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1079, !dbg !48
  %1081 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1080, i32 %1077, !dbg !48
  %1082 = bitcast bfloat %891 to i16, !dbg !48
  %1083 = bitcast bfloat %892 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1081, i16 %1082, i16 %1083, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1084 = lshr i32 %24, 4, !dbg !48
  %1085 = and i32 %1084, 56, !dbg !48
  %1086 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1085, !dbg !48
  %1087 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1086, i32 %995, !dbg !48
  %1088 = load <4 x i32>, ptr addrspace(3) %1087, align 16, !dbg !48
  %1089 = or disjoint i32 %995, 1024, !dbg !48
  %1090 = lshr i32 %1089, 4, !dbg !48
  %1091 = and i32 %1090, 120, !dbg !48
  %1092 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1091, !dbg !48
  %1093 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1092, i32 %1089, !dbg !48
  %1094 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !48
  %1095 = or disjoint i32 %995, 2048, !dbg !48
  %1096 = lshr i32 %1095, 4, !dbg !48
  %1097 = and i32 %1096, 184, !dbg !48
  %1098 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1097, !dbg !48
  %1099 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1098, i32 %1095, !dbg !48
  %1100 = load <4 x i32>, ptr addrspace(3) %1099, align 16, !dbg !48
  %1101 = or disjoint i32 %995, 3072, !dbg !48
  %1102 = lshr i32 %1101, 4, !dbg !48
  %1103 = and i32 %1102, 248, !dbg !48
  %1104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1103, !dbg !48
  %1105 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1104, i32 %1101, !dbg !48
  %1106 = load <4 x i32>, ptr addrspace(3) %1105, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1107 = bitcast bfloat %893 to i16, !dbg !48
  %1108 = bitcast bfloat %894 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %998, i16 %1107, i16 %1108, i1 true) #1, !dbg !48
  %1109 = bitcast bfloat %895 to i16, !dbg !48
  %1110 = bitcast bfloat %896 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1109, i16 %1110, i1 true) #1, !dbg !48
  %1111 = bitcast bfloat %897 to i16, !dbg !48
  %1112 = bitcast bfloat %898 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1008, i16 %1111, i16 %1112, i1 true) #1, !dbg !48
  %1113 = bitcast bfloat %899 to i16, !dbg !48
  %1114 = bitcast bfloat %900 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1113, i16 %1114, i1 true) #1, !dbg !48
  %1115 = bitcast bfloat %901 to i16, !dbg !48
  %1116 = bitcast bfloat %902 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1019, i16 %1115, i16 %1116, i1 true) #1, !dbg !48
  %1117 = bitcast bfloat %903 to i16, !dbg !48
  %1118 = bitcast bfloat %904 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1026, i16 %1117, i16 %1118, i1 true) #1, !dbg !48
  %1119 = bitcast bfloat %905 to i16, !dbg !48
  %1120 = bitcast bfloat %906 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1030, i16 %1119, i16 %1120, i1 true) #1, !dbg !48
  %1121 = bitcast bfloat %907 to i16, !dbg !48
  %1122 = bitcast bfloat %908 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1037, i16 %1121, i16 %1122, i1 true) #1, !dbg !48
  %1123 = bitcast bfloat %909 to i16, !dbg !48
  %1124 = bitcast bfloat %910 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1041, i16 %1123, i16 %1124, i1 true) #1, !dbg !48
  %1125 = bitcast bfloat %911 to i16, !dbg !48
  %1126 = bitcast bfloat %912 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1048, i16 %1125, i16 %1126, i1 true) #1, !dbg !48
  %1127 = bitcast bfloat %913 to i16, !dbg !48
  %1128 = bitcast bfloat %914 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1127, i16 %1128, i1 true) #1, !dbg !48
  %1129 = bitcast bfloat %915 to i16, !dbg !48
  %1130 = bitcast bfloat %916 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1059, i16 %1129, i16 %1130, i1 true) #1, !dbg !48
  %1131 = bitcast bfloat %917 to i16, !dbg !48
  %1132 = bitcast bfloat %918 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1063, i16 %1131, i16 %1132, i1 true) #1, !dbg !48
  %1133 = bitcast bfloat %919 to i16, !dbg !48
  %1134 = bitcast bfloat %920 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1070, i16 %1133, i16 %1134, i1 true) #1, !dbg !48
  %1135 = bitcast bfloat %921 to i16, !dbg !48
  %1136 = bitcast bfloat %922 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1135, i16 %1136, i1 true) #1, !dbg !48
  %1137 = bitcast bfloat %923 to i16, !dbg !48
  %1138 = bitcast bfloat %924 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1081, i16 %1137, i16 %1138, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1139 = load <4 x i32>, ptr addrspace(3) %1087, align 16, !dbg !48
  %1140 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !48
  %1141 = load <4 x i32>, ptr addrspace(3) %1099, align 16, !dbg !48
  %1142 = load <4 x i32>, ptr addrspace(3) %1105, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1143 = bitcast bfloat %925 to i16, !dbg !48
  %1144 = bitcast bfloat %926 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %998, i16 %1143, i16 %1144, i1 true) #1, !dbg !48
  %1145 = bitcast bfloat %927 to i16, !dbg !48
  %1146 = bitcast bfloat %928 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1145, i16 %1146, i1 true) #1, !dbg !48
  %1147 = bitcast bfloat %929 to i16, !dbg !48
  %1148 = bitcast bfloat %930 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1008, i16 %1147, i16 %1148, i1 true) #1, !dbg !48
  %1149 = bitcast bfloat %931 to i16, !dbg !48
  %1150 = bitcast bfloat %932 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1149, i16 %1150, i1 true) #1, !dbg !48
  %1151 = bitcast bfloat %933 to i16, !dbg !48
  %1152 = bitcast bfloat %934 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1019, i16 %1151, i16 %1152, i1 true) #1, !dbg !48
  %1153 = bitcast bfloat %935 to i16, !dbg !48
  %1154 = bitcast bfloat %936 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1026, i16 %1153, i16 %1154, i1 true) #1, !dbg !48
  %1155 = bitcast bfloat %937 to i16, !dbg !48
  %1156 = bitcast bfloat %938 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1030, i16 %1155, i16 %1156, i1 true) #1, !dbg !48
  %1157 = bitcast bfloat %939 to i16, !dbg !48
  %1158 = bitcast bfloat %940 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1037, i16 %1157, i16 %1158, i1 true) #1, !dbg !48
  %1159 = bitcast bfloat %941 to i16, !dbg !48
  %1160 = bitcast bfloat %942 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1041, i16 %1159, i16 %1160, i1 true) #1, !dbg !48
  %1161 = bitcast bfloat %943 to i16, !dbg !48
  %1162 = bitcast bfloat %944 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1048, i16 %1161, i16 %1162, i1 true) #1, !dbg !48
  %1163 = bitcast bfloat %945 to i16, !dbg !48
  %1164 = bitcast bfloat %946 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1163, i16 %1164, i1 true) #1, !dbg !48
  %1165 = bitcast bfloat %947 to i16, !dbg !48
  %1166 = bitcast bfloat %948 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1059, i16 %1165, i16 %1166, i1 true) #1, !dbg !48
  %1167 = bitcast bfloat %949 to i16, !dbg !48
  %1168 = bitcast bfloat %950 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1063, i16 %1167, i16 %1168, i1 true) #1, !dbg !48
  %1169 = bitcast bfloat %951 to i16, !dbg !48
  %1170 = bitcast bfloat %952 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1070, i16 %1169, i16 %1170, i1 true) #1, !dbg !48
  %1171 = bitcast bfloat %953 to i16, !dbg !48
  %1172 = bitcast bfloat %954 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1171, i16 %1172, i1 true) #1, !dbg !48
  %1173 = bitcast bfloat %955 to i16, !dbg !48
  %1174 = bitcast bfloat %956 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1081, i16 %1173, i16 %1174, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1175 = load <4 x i32>, ptr addrspace(3) %1087, align 16, !dbg !48
  %1176 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !48
  %1177 = load <4 x i32>, ptr addrspace(3) %1099, align 16, !dbg !48
  %1178 = load <4 x i32>, ptr addrspace(3) %1105, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1179 = bitcast bfloat %957 to i16, !dbg !48
  %1180 = bitcast bfloat %958 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %998, i16 %1179, i16 %1180, i1 true) #1, !dbg !48
  %1181 = bitcast bfloat %959 to i16, !dbg !48
  %1182 = bitcast bfloat %960 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1181, i16 %1182, i1 true) #1, !dbg !48
  %1183 = bitcast bfloat %961 to i16, !dbg !48
  %1184 = bitcast bfloat %962 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1008, i16 %1183, i16 %1184, i1 true) #1, !dbg !48
  %1185 = bitcast bfloat %963 to i16, !dbg !48
  %1186 = bitcast bfloat %964 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1185, i16 %1186, i1 true) #1, !dbg !48
  %1187 = bitcast bfloat %965 to i16, !dbg !48
  %1188 = bitcast bfloat %966 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1019, i16 %1187, i16 %1188, i1 true) #1, !dbg !48
  %1189 = bitcast bfloat %967 to i16, !dbg !48
  %1190 = bitcast bfloat %968 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1026, i16 %1189, i16 %1190, i1 true) #1, !dbg !48
  %1191 = bitcast bfloat %969 to i16, !dbg !48
  %1192 = bitcast bfloat %970 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1030, i16 %1191, i16 %1192, i1 true) #1, !dbg !48
  %1193 = bitcast bfloat %971 to i16, !dbg !48
  %1194 = bitcast bfloat %972 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1037, i16 %1193, i16 %1194, i1 true) #1, !dbg !48
  %1195 = bitcast bfloat %973 to i16, !dbg !48
  %1196 = bitcast bfloat %974 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1041, i16 %1195, i16 %1196, i1 true) #1, !dbg !48
  %1197 = bitcast bfloat %975 to i16, !dbg !48
  %1198 = bitcast bfloat %976 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1048, i16 %1197, i16 %1198, i1 true) #1, !dbg !48
  %1199 = bitcast bfloat %977 to i16, !dbg !48
  %1200 = bitcast bfloat %978 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1199, i16 %1200, i1 true) #1, !dbg !48
  %1201 = bitcast bfloat %979 to i16, !dbg !48
  %1202 = bitcast bfloat %980 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1059, i16 %1201, i16 %1202, i1 true) #1, !dbg !48
  %1203 = bitcast bfloat %981 to i16, !dbg !48
  %1204 = bitcast bfloat %982 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1063, i16 %1203, i16 %1204, i1 true) #1, !dbg !48
  %1205 = bitcast bfloat %983 to i16, !dbg !48
  %1206 = bitcast bfloat %984 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1070, i16 %1205, i16 %1206, i1 true) #1, !dbg !48
  %1207 = bitcast bfloat %985 to i16, !dbg !48
  %1208 = bitcast bfloat %986 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1207, i16 %1208, i1 true) #1, !dbg !48
  %1209 = bitcast bfloat %987 to i16, !dbg !48
  %1210 = bitcast bfloat %988 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1081, i16 %1209, i16 %1210, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %1211 = load <4 x i32>, ptr addrspace(3) %1087, align 16, !dbg !48
  %1212 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !48
  %1213 = load <4 x i32>, ptr addrspace(3) %1099, align 16, !dbg !48
  %1214 = load <4 x i32>, ptr addrspace(3) %1105, align 16, !dbg !48
  %.extract = extractelement <4 x i32> %1088, i64 0, !dbg !48
  %.extract327 = extractelement <4 x i32> %1088, i64 1, !dbg !48
  %.extract329 = extractelement <4 x i32> %1088, i64 2, !dbg !48
  %.extract331 = extractelement <4 x i32> %1088, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract327, i32 %.extract329, i32 %.extract331, ptr addrspace(1) %830, i1 %779) #1, !dbg !48
  %.extract333 = extractelement <4 x i32> %1094, i64 0, !dbg !48
  %.extract335 = extractelement <4 x i32> %1094, i64 1, !dbg !48
  %.extract337 = extractelement <4 x i32> %1094, i64 2, !dbg !48
  %.extract339 = extractelement <4 x i32> %1094, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract333, i32 %.extract335, i32 %.extract337, i32 %.extract339, ptr addrspace(1) %832, i1 %780) #1, !dbg !48
  %.extract341 = extractelement <4 x i32> %1100, i64 0, !dbg !48
  %.extract343 = extractelement <4 x i32> %1100, i64 1, !dbg !48
  %.extract345 = extractelement <4 x i32> %1100, i64 2, !dbg !48
  %.extract347 = extractelement <4 x i32> %1100, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract341, i32 %.extract343, i32 %.extract345, i32 %.extract347, ptr addrspace(1) %834, i1 %781) #1, !dbg !48
  %.extract349 = extractelement <4 x i32> %1106, i64 0, !dbg !48
  %.extract351 = extractelement <4 x i32> %1106, i64 1, !dbg !48
  %.extract353 = extractelement <4 x i32> %1106, i64 2, !dbg !48
  %.extract355 = extractelement <4 x i32> %1106, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract349, i32 %.extract351, i32 %.extract353, i32 %.extract355, ptr addrspace(1) %836, i1 %782) #1, !dbg !48
  %.extract357 = extractelement <4 x i32> %1139, i64 0, !dbg !48
  %.extract359 = extractelement <4 x i32> %1139, i64 1, !dbg !48
  %.extract361 = extractelement <4 x i32> %1139, i64 2, !dbg !48
  %.extract363 = extractelement <4 x i32> %1139, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract357, i32 %.extract359, i32 %.extract361, i32 %.extract363, ptr addrspace(1) %838, i1 %783) #1, !dbg !48
  %.extract365 = extractelement <4 x i32> %1140, i64 0, !dbg !48
  %.extract367 = extractelement <4 x i32> %1140, i64 1, !dbg !48
  %.extract369 = extractelement <4 x i32> %1140, i64 2, !dbg !48
  %.extract371 = extractelement <4 x i32> %1140, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract365, i32 %.extract367, i32 %.extract369, i32 %.extract371, ptr addrspace(1) %840, i1 %784) #1, !dbg !48
  %.extract373 = extractelement <4 x i32> %1141, i64 0, !dbg !48
  %.extract375 = extractelement <4 x i32> %1141, i64 1, !dbg !48
  %.extract377 = extractelement <4 x i32> %1141, i64 2, !dbg !48
  %.extract379 = extractelement <4 x i32> %1141, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract373, i32 %.extract375, i32 %.extract377, i32 %.extract379, ptr addrspace(1) %842, i1 %785) #1, !dbg !48
  %.extract381 = extractelement <4 x i32> %1142, i64 0, !dbg !48
  %.extract383 = extractelement <4 x i32> %1142, i64 1, !dbg !48
  %.extract385 = extractelement <4 x i32> %1142, i64 2, !dbg !48
  %.extract387 = extractelement <4 x i32> %1142, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract381, i32 %.extract383, i32 %.extract385, i32 %.extract387, ptr addrspace(1) %844, i1 %786) #1, !dbg !48
  %.extract389 = extractelement <4 x i32> %1175, i64 0, !dbg !48
  %.extract391 = extractelement <4 x i32> %1175, i64 1, !dbg !48
  %.extract393 = extractelement <4 x i32> %1175, i64 2, !dbg !48
  %.extract395 = extractelement <4 x i32> %1175, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract389, i32 %.extract391, i32 %.extract393, i32 %.extract395, ptr addrspace(1) %846, i1 %787) #1, !dbg !48
  %.extract397 = extractelement <4 x i32> %1176, i64 0, !dbg !48
  %.extract399 = extractelement <4 x i32> %1176, i64 1, !dbg !48
  %.extract401 = extractelement <4 x i32> %1176, i64 2, !dbg !48
  %.extract403 = extractelement <4 x i32> %1176, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract397, i32 %.extract399, i32 %.extract401, i32 %.extract403, ptr addrspace(1) %848, i1 %788) #1, !dbg !48
  %.extract405 = extractelement <4 x i32> %1177, i64 0, !dbg !48
  %.extract407 = extractelement <4 x i32> %1177, i64 1, !dbg !48
  %.extract409 = extractelement <4 x i32> %1177, i64 2, !dbg !48
  %.extract411 = extractelement <4 x i32> %1177, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract405, i32 %.extract407, i32 %.extract409, i32 %.extract411, ptr addrspace(1) %850, i1 %789) #1, !dbg !48
  %.extract413 = extractelement <4 x i32> %1178, i64 0, !dbg !48
  %.extract415 = extractelement <4 x i32> %1178, i64 1, !dbg !48
  %.extract417 = extractelement <4 x i32> %1178, i64 2, !dbg !48
  %.extract419 = extractelement <4 x i32> %1178, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract413, i32 %.extract415, i32 %.extract417, i32 %.extract419, ptr addrspace(1) %852, i1 %790) #1, !dbg !48
  %.extract421 = extractelement <4 x i32> %1211, i64 0, !dbg !48
  %.extract423 = extractelement <4 x i32> %1211, i64 1, !dbg !48
  %.extract425 = extractelement <4 x i32> %1211, i64 2, !dbg !48
  %.extract427 = extractelement <4 x i32> %1211, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract421, i32 %.extract423, i32 %.extract425, i32 %.extract427, ptr addrspace(1) %854, i1 %791) #1, !dbg !48
  %.extract429 = extractelement <4 x i32> %1212, i64 0, !dbg !48
  %.extract431 = extractelement <4 x i32> %1212, i64 1, !dbg !48
  %.extract433 = extractelement <4 x i32> %1212, i64 2, !dbg !48
  %.extract435 = extractelement <4 x i32> %1212, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract429, i32 %.extract431, i32 %.extract433, i32 %.extract435, ptr addrspace(1) %856, i1 %792) #1, !dbg !48
  %.extract437 = extractelement <4 x i32> %1213, i64 0, !dbg !48
  %.extract439 = extractelement <4 x i32> %1213, i64 1, !dbg !48
  %.extract441 = extractelement <4 x i32> %1213, i64 2, !dbg !48
  %.extract443 = extractelement <4 x i32> %1213, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract437, i32 %.extract439, i32 %.extract441, i32 %.extract443, ptr addrspace(1) %858, i1 %793) #1, !dbg !48
  %.extract445 = extractelement <4 x i32> %1214, i64 0, !dbg !48
  %.extract447 = extractelement <4 x i32> %1214, i64 1, !dbg !48
  %.extract449 = extractelement <4 x i32> %1214, i64 2, !dbg !48
  %.extract451 = extractelement <4 x i32> %1214, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract445, i32 %.extract447, i32 %.extract449, i32 %.extract451, ptr addrspace(1) %860, i1 %794) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3xwxjn37hcqnaxp7jqu5ta7jba6q773gjc7mjhhtxqsgoo5esvv.py", directory: "/tmp/torchinductor_root/3x")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 78, column: 13, scope: !6)
!37 = !DILocation(line: 79, column: 13, scope: !6)
!38 = !DILocation(line: 70, column: 25, scope: !6)
!39 = !DILocation(line: 77, column: 25, scope: !6)
!40 = !DILocation(line: 87, column: 20, scope: !6)
!41 = !DILocation(line: 87, column: 34, scope: !6)
!42 = !DILocation(line: 87, column: 26, scope: !6)
!43 = !DILocation(line: 90, column: 25, scope: !6)
!44 = !DILocation(line: 90, column: 40, scope: !6)
!45 = !DILocation(line: 90, column: 21, scope: !6)
!46 = !DILocation(line: 90, column: 33, scope: !6)
!47 = !DILocation(line: 91, column: 25, scope: !6)
!48 = !DILocation(line: 91, column: 67, scope: !6)
!49 = !DILocation(line: 91, column: 4, scope: !6)
