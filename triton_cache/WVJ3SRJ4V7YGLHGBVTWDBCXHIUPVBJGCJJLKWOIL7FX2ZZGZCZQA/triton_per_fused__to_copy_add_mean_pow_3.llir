; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 3, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 5, !dbg !11
  %15 = and i32 %14, 7, !dbg !11
  %16 = and i32 %13, 7, !dbg !11
  %17 = or disjoint i32 %15, %12, !dbg !12
  %18 = or disjoint i32 %12, %16, !dbg !12
  %19 = shl i32 %13, 2, !dbg !13
  %20 = and i32 %19, 124, !dbg !13
  %21 = sdiv i32 %17, 24, !dbg !14
  %22 = mul i32 %21, 24, !dbg !15
  %.decomposed = sub i32 %17, %22, !dbg !15
  %23 = shl i32 %17, 7, !dbg !16
  %24 = or disjoint i32 %23, %20, !dbg !17
  %25 = sext i32 %24 to i64, !dbg !18
  %26 = getelementptr i32, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %26) #3, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = sext i32 %21 to i64, !dbg !20
  %33 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #3, !dbg !21
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #3, !dbg !21
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #3, !dbg !21
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #3, !dbg !21
  %38 = bitcast i16 %37 to bfloat, !dbg !21
  %39 = getelementptr bfloat, ptr addrspace(1) %2, i64 %32, !dbg !22
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #3, !dbg !23
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #3, !dbg !23
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #3, !dbg !23
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #3, !dbg !23
  %44 = bitcast i16 %43 to bfloat, !dbg !23
  %45 = shl nsw i32 %.decomposed, 7, !dbg !24
  %46 = or disjoint i32 %45, %20, !dbg !25
  %47 = sext i32 %46 to i64, !dbg !26
  %48 = getelementptr bfloat, ptr addrspace(1) %3, i64 %47, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %48) #3, !dbg !27
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !27
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !27
  %52 = extractvalue { i32, i32 } %49, 1, !dbg !27
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !27
  %54 = getelementptr bfloat, ptr addrspace(1) %4, i64 %47, !dbg !28
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %54) #3, !dbg !29
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !29
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !29
  %58 = extractvalue { i32, i32 } %55, 1, !dbg !29
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !29
  %.inv = fcmp oge bfloat %38, 0xR0000, !dbg !30
  %60 = select i1 %.inv, bfloat 0xR0000, bfloat %38, !dbg !30
  %61 = fpext bfloat %60 to float, !dbg !30
  %62 = fsub float 0.000000e+00, %61, !dbg !34
  %.inv1 = fcmp ole bfloat %44, 0xR0000, !dbg !35
  %63 = select i1 %.inv1, bfloat 0xR0000, bfloat %44, !dbg !35
  %64 = fpext bfloat %63 to float, !dbg !35
  %65 = fcmp ogt float %62, %64, !dbg !37
  %66 = fcmp uno float %62, 0.000000e+00, !dbg !39
  %67 = or i1 %66, %65, !dbg !40
  %68 = select i1 %67, float %62, float %64, !dbg !41
  %69 = fmul float %68, 0x3F80204080000000, !dbg !42
  %70 = fcmp ogt float %69, 0x3EE4F8B580000000, !dbg !43
  %71 = fcmp uno float %69, 0.000000e+00, !dbg !45
  %72 = or i1 %70, %71, !dbg !46
  %73 = select i1 %72, float %69, float 0x3EE4F8B580000000, !dbg !47
  %74 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !48
  %75 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !49
  %76 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !50
  %77 = insertelement <2 x i32> %76, i32 %29, i64 1, !dbg !50
  %78 = sitofp <2 x i32> %77 to <2 x float>, !dbg !50
  %79 = insertelement <2 x float> poison, float %73, i64 0, !dbg !51
  %80 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %81 = fmul <2 x float> %80, %78, !dbg !51
  %82 = fmul <2 x float> %81, %74, !dbg !52
  %83 = fadd <2 x float> %82, %75, !dbg !53
  %84 = fmul <2 x float> %83, %83, !dbg !54
  %85 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !48
  %86 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !49
  %87 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !50
  %88 = insertelement <2 x i32> %87, i32 %31, i64 1, !dbg !50
  %89 = sitofp <2 x i32> %88 to <2 x float>, !dbg !50
  %90 = fmul <2 x float> %80, %89, !dbg !51
  %91 = fmul <2 x float> %90, %85, !dbg !52
  %92 = fadd <2 x float> %91, %86, !dbg !53
  %93 = fmul <2 x float> %92, %92, !dbg !54
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %94 = fadd <2 x float> %84, %shift, !dbg !55
  %95 = fadd <2 x float> %93, %94, !dbg !55
  %shift2 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %96 = fadd <2 x float> %shift2, %95, !dbg !55
  %97 = extractelement <2 x float> %96, i64 0, !dbg !55
  %98 = bitcast float %97 to i32, !dbg !60
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !60
  %100 = bitcast i32 %99 to float, !dbg !60
  %101 = fadd float %97, %100, !dbg !55
  %102 = bitcast float %101 to i32, !dbg !60
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !60
  %104 = bitcast i32 %103 to float, !dbg !60
  %105 = fadd float %101, %104, !dbg !55
  %106 = bitcast float %105 to i32, !dbg !60
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !60
  %108 = bitcast i32 %107 to float, !dbg !60
  %109 = fadd float %105, %108, !dbg !55
  %110 = bitcast float %109 to i32, !dbg !60
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !60
  %112 = bitcast i32 %111 to float, !dbg !60
  %113 = fadd float %109, %112, !dbg !55
  %114 = bitcast float %113 to i32, !dbg !60
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !60
  %116 = bitcast i32 %115 to float, !dbg !60
  %117 = fadd float %113, %116, !dbg !55
  %118 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !61
  %119 = bitcast float %117 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !61
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !61
  %122 = getelementptr bfloat, ptr addrspace(1) %5, i64 %25, !dbg !62
  %123 = fptrunc <2 x float> %83 to <2 x bfloat>, !dbg !63
  %124 = fptrunc <2 x float> %92 to <2 x bfloat>, !dbg !63
  %125 = bitcast <2 x bfloat> %123 to i32, !dbg !63
  %126 = bitcast <2 x bfloat> %124 to i32, !dbg !63
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %125, i32 %126, ptr addrspace(1) %122) #3, !dbg !63
  %127 = sext i32 %18 to i64, !dbg !64
  %128 = getelementptr float, ptr addrspace(1) %6, i64 %127, !dbg !64
  %129 = and i32 %13, 248, !dbg !65
  %130 = icmp eq i32 %129, 0, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %128, i1 %130) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czbzrbq5on2cwjnhnqxnh2wa5zuv62z3gavdrrggg5dimaepn3e2.py", directory: "/tmp/torchinductor_root/zb")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_3", linkageName: "triton_per_fused__to_copy_add_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 27, column: 38, scope: !6)
!14 = !DILocation(line: 34, column: 19, scope: !6)
!15 = !DILocation(line: 35, column: 19, scope: !6)
!16 = !DILocation(line: 36, column: 41, scope: !6)
!17 = !DILocation(line: 36, column: 37, scope: !6)
!18 = !DILocation(line: 36, column: 30, scope: !6)
!19 = !DILocation(line: 36, column: 46, scope: !6)
!20 = !DILocation(line: 37, column: 30, scope: !6)
!21 = !DILocation(line: 37, column: 35, scope: !6)
!22 = !DILocation(line: 38, column: 30, scope: !6)
!23 = !DILocation(line: 38, column: 35, scope: !6)
!24 = !DILocation(line: 39, column: 42, scope: !6)
!25 = !DILocation(line: 39, column: 38, scope: !6)
!26 = !DILocation(line: 39, column: 31, scope: !6)
!27 = !DILocation(line: 39, column: 47, scope: !6)
!28 = !DILocation(line: 40, column: 31, scope: !6)
!29 = !DILocation(line: 40, column: 47, scope: !6)
!30 = !DILocation(line: 97, column: 29, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 43, column: 40, scope: !6)
!34 = !DILocation(line: 44, column: 12, scope: !6)
!35 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !36)
!36 = !DILocation(line: 45, column: 40, scope: !6)
!37 = !DILocation(line: 102, column: 15, scope: !31, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 40, scope: !6)
!39 = !DILocation(line: 104, column: 21, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 104, column: 16, scope: !31, inlinedAt: !38)
!41 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !38)
!42 = !DILocation(line: 48, column: 19, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !31, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 42, scope: !6)
!45 = !DILocation(line: 104, column: 21, scope: !31, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 16, scope: !31, inlinedAt: !44)
!47 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !44)
!48 = !DILocation(line: 39, column: 86, scope: !6)
!49 = !DILocation(line: 40, column: 86, scope: !6)
!50 = !DILocation(line: 41, column: 19, scope: !6)
!51 = !DILocation(line: 53, column: 19, scope: !6)
!52 = !DILocation(line: 54, column: 20, scope: !6)
!53 = !DILocation(line: 55, column: 20, scope: !6)
!54 = !DILocation(line: 57, column: 20, scope: !6)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !59)
!56 = distinct !DILexicalBlockFile(scope: !58, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!58 = distinct !DILexicalBlockFile(scope: !6, file: !57, discriminator: 0)
!59 = !DILocation(line: 59, column: 26, scope: !6)
!60 = !DILocation(line: 286, column: 36, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 59, column: 29, scope: !6)
!62 = !DILocation(line: 60, column: 25, scope: !6)
!63 = !DILocation(line: 60, column: 48, scope: !6)
!64 = !DILocation(line: 61, column: 25, scope: !6)
!65 = !DILocation(line: 61, column: 37, scope: !6)
!66 = !DILocation(line: 61, column: 4, scope: !6)
