; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused_add_mul_native_layer_norm_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
._crit_edge:
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 512, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 2044, !dbg !11
  %15 = mul i32 %9, 3072, !dbg !12
  %16 = zext nneg i32 %14 to i64, !dbg !13
  %17 = add i32 %15, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !16
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !16
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !16
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = or disjoint i64 %16, 6144, !dbg !17
  %26 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !21
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !21
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %10) #5, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !23
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !23
  %44 = getelementptr bfloat, ptr addrspace(1) %4, i64 %16, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 true) #5, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !25
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !25
  %50 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !26
  %51 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !27
  %52 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !28
  %53 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !29
  %54 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !30
  %55 = fadd <2 x float> %51, %52, !dbg !31
  %56 = fadd <2 x float> %53, %54, !dbg !32
  %57 = fmul <2 x float> %55, %56, !dbg !33
  %58 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !26
  %59 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !27
  %60 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !28
  %61 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !29
  %62 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !30
  %63 = fadd <2 x float> %59, %60, !dbg !31
  %64 = fadd <2 x float> %61, %62, !dbg !32
  %65 = fmul <2 x float> %63, %64, !dbg !33
  %66 = fadd <2 x float> %57, %50, !dbg !34
  %67 = fadd <2 x float> %65, %58, !dbg !34
  %68 = extractelement <2 x float> %67, i64 0, !dbg !35
  %69 = extractelement <2 x float> %67, i64 1, !dbg !35
  %70 = extractelement <2 x float> %66, i64 0, !dbg !35
  %71 = extractelement <2 x float> %66, i64 1, !dbg !35
  %72 = select i1 %10, float %70, float 0.000000e+00, !dbg !39
  %73 = select i1 %10, float %71, float 0.000000e+00, !dbg !39
  %74 = select i1 %10, float %68, float 0.000000e+00, !dbg !39
  %75 = select i1 %10, float %69, float 0.000000e+00, !dbg !39
  %76 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %77 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %78 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %79 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %80 = fptrunc <2 x float> %66 to <2 x bfloat>, !dbg !41
  %81 = fptrunc <2 x float> %67 to <2 x bfloat>, !dbg !41
  %82 = bitcast <2 x bfloat> %80 to i32, !dbg !41
  %83 = bitcast <2 x bfloat> %81 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %82, i32 %83, ptr addrspace(1) %38, i1 %10) #5, !dbg !41
  %84 = or disjoint i64 %16, 2048, !dbg !42
  %85 = icmp samesign ult i64 %84, 3072, !dbg !43
  %86 = trunc nuw nsw i64 %84 to i32, !dbg !14
  %87 = add i32 %15, %86, !dbg !14
  %88 = sext i32 %87 to i64, !dbg !15
  %89 = getelementptr bfloat, ptr addrspace(1) %1, i64 %88, !dbg !15
  %90 = and i1 %10, %85, !dbg !44
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %89, i1 %90) #5, !dbg !16
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !16
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !16
  %94 = extractvalue { i32, i32 } %91, 1, !dbg !16
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !16
  %96 = or disjoint i64 %16, 8192, !dbg !17
  %97 = getelementptr bfloat, ptr addrspace(1) %2, i64 %96, !dbg !18
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %97, i1 %85) #5, !dbg !19
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !19
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !19
  %101 = extractvalue { i32, i32 } %98, 1, !dbg !19
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !19
  %103 = getelementptr bfloat, ptr addrspace(1) %3, i64 %96, !dbg !20
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %103, i1 %85) #5, !dbg !21
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !21
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !21
  %107 = extractvalue { i32, i32 } %104, 1, !dbg !21
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !21
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !22
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %109, i1 %90) #5, !dbg !23
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !23
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !23
  %113 = extractvalue { i32, i32 } %110, 1, !dbg !23
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !23
  %115 = getelementptr bfloat, ptr addrspace(1) %4, i64 %84, !dbg !24
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %115, i1 %85) #5, !dbg !25
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !25
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !25
  %119 = extractvalue { i32, i32 } %116, 1, !dbg !25
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !25
  %121 = fpext <2 x bfloat> %93 to <2 x float>, !dbg !26
  %122 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !27
  %123 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !28
  %124 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !29
  %125 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !30
  %126 = fadd <2 x float> %122, %123, !dbg !31
  %127 = fadd <2 x float> %124, %125, !dbg !32
  %128 = fmul <2 x float> %126, %127, !dbg !33
  %129 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !26
  %130 = fpext <2 x bfloat> %102 to <2 x float>, !dbg !27
  %131 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !28
  %132 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !29
  %133 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !30
  %134 = fadd <2 x float> %130, %131, !dbg !31
  %135 = fadd <2 x float> %132, %133, !dbg !32
  %136 = fmul <2 x float> %134, %135, !dbg !33
  %137 = fadd <2 x float> %128, %121, !dbg !34
  %138 = fadd <2 x float> %136, %129, !dbg !34
  %139 = extractelement <2 x float> %137, i64 1, !dbg !35
  %140 = extractelement <2 x float> %137, i64 0, !dbg !35
  %141 = extractelement <2 x float> %138, i64 1, !dbg !35
  %142 = extractelement <2 x float> %138, i64 0, !dbg !35
  %143 = fsub float %140, %72, !dbg !45
  %144 = fsub float %139, %73, !dbg !45
  %145 = fsub float %142, %74, !dbg !45
  %146 = fsub float %141, %75, !dbg !45
  %147 = fadd float %76, 1.000000e+00, !dbg !46
  %148 = fadd float %77, 1.000000e+00, !dbg !46
  %149 = fadd float %78, 1.000000e+00, !dbg !46
  %150 = fadd float %79, 1.000000e+00, !dbg !46
  %151 = tail call float @llvm.nvvm.div.full(float %143, float %147), !dbg !47
  %152 = tail call float @llvm.nvvm.div.full(float %144, float %148), !dbg !47
  %153 = tail call float @llvm.nvvm.div.full(float %145, float %149), !dbg !47
  %154 = tail call float @llvm.nvvm.div.full(float %146, float %150), !dbg !47
  %155 = fadd float %72, %151, !dbg !48
  %156 = fadd float %73, %152, !dbg !48
  %157 = fadd float %74, %153, !dbg !48
  %158 = fadd float %75, %154, !dbg !48
  %159 = fsub float %140, %155, !dbg !49
  %160 = fsub float %139, %156, !dbg !49
  %161 = fsub float %142, %157, !dbg !49
  %162 = fsub float %141, %158, !dbg !49
  %163 = fmul float %143, %159, !dbg !50
  %164 = fmul float %144, %160, !dbg !50
  %165 = fmul float %145, %161, !dbg !50
  %166 = fmul float %146, %162, !dbg !50
  %167 = fadd float %163, 0.000000e+00, !dbg !51
  %168 = fadd float %164, 0.000000e+00, !dbg !51
  %169 = fadd float %165, 0.000000e+00, !dbg !51
  %170 = fadd float %166, 0.000000e+00, !dbg !51
  %171 = select i1 %90, float %155, float %72, !dbg !39
  %172 = select i1 %90, float %156, float %73, !dbg !39
  %173 = select i1 %90, float %157, float %74, !dbg !39
  %174 = select i1 %90, float %158, float %75, !dbg !39
  %175 = select i1 %90, float %169, float 0.000000e+00, !dbg !52
  %176 = select i1 %90, float %170, float 0.000000e+00, !dbg !52
  %177 = select i1 %90, float %147, float %76, !dbg !40
  %178 = select i1 %90, float %148, float %77, !dbg !40
  %179 = select i1 %90, float %149, float %78, !dbg !40
  %180 = select i1 %90, float %150, float %79, !dbg !40
  %181 = fptrunc <2 x float> %137 to <2 x bfloat>, !dbg !41
  %182 = fptrunc <2 x float> %138 to <2 x bfloat>, !dbg !41
  %183 = bitcast <2 x bfloat> %181 to i32, !dbg !41
  %184 = bitcast <2 x bfloat> %182 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %109, i1 %90) #5, !dbg !41
  %185 = lshr i32 %11, 5, !dbg !11
  %186 = fsub float %172, %171, !dbg !53
  %187 = fadd float %177, %178, !dbg !56
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !57
  %189 = tail call float @llvm.nvvm.div.full(float %178, float %187), !dbg !58
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !59
  %191 = fmul float %186, %190, !dbg !60
  %192 = fadd float %171, %191, !dbg !61
  %193 = fadd float %167, %168, !dbg !62
  %194 = select i1 %90, float %193, float 0.000000e+00, !dbg !62
  %195 = fmul float %186, %186, !dbg !63
  %196 = fmul float %195, %177, !dbg !64
  %197 = fmul float %196, %190, !dbg !65
  %198 = fadd float %194, %197, !dbg !66
  %199 = fsub float %173, %192, !dbg !53
  %200 = fadd float %179, %187, !dbg !56
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !57
  %202 = tail call float @llvm.nvvm.div.full(float %179, float %200), !dbg !58
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !59
  %204 = fmul float %203, %199, !dbg !60
  %205 = fadd float %192, %204, !dbg !61
  %206 = fadd float %175, %198, !dbg !62
  %207 = fmul float %199, %199, !dbg !63
  %208 = fmul float %187, %207, !dbg !64
  %209 = fmul float %203, %208, !dbg !65
  %210 = fadd float %206, %209, !dbg !66
  %211 = fsub float %174, %205, !dbg !53
  %212 = fadd float %180, %200, !dbg !56
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !57
  %214 = tail call float @llvm.nvvm.div.full(float %180, float %212), !dbg !58
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !59
  %216 = fmul float %215, %211, !dbg !60
  %217 = fadd float %205, %216, !dbg !61
  %218 = fadd float %176, %210, !dbg !62
  %219 = fmul float %211, %211, !dbg !63
  %220 = fmul float %200, %219, !dbg !64
  %221 = fmul float %215, %220, !dbg !65
  %222 = fadd float %218, %221, !dbg !66
  %223 = bitcast float %217 to i32, !dbg !67
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !67
  %225 = bitcast i32 %224 to float, !dbg !67
  %226 = bitcast float %222 to i32, !dbg !67
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !67
  %228 = bitcast i32 %227 to float, !dbg !67
  %229 = bitcast float %212 to i32, !dbg !67
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !67
  %231 = bitcast i32 %230 to float, !dbg !67
  %232 = fsub float %225, %217, !dbg !53
  %233 = fadd float %212, %231, !dbg !56
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !57
  %235 = tail call float @llvm.nvvm.div.full(float %231, float %233), !dbg !58
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !59
  %237 = fmul float %236, %232, !dbg !60
  %238 = fadd float %217, %237, !dbg !61
  %239 = fadd float %222, %228, !dbg !62
  %240 = fmul float %232, %232, !dbg !63
  %241 = fmul float %212, %240, !dbg !64
  %242 = fmul float %236, %241, !dbg !65
  %243 = fadd float %239, %242, !dbg !66
  %244 = bitcast float %238 to i32, !dbg !67
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !67
  %246 = bitcast i32 %245 to float, !dbg !67
  %247 = bitcast float %243 to i32, !dbg !67
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !67
  %249 = bitcast i32 %248 to float, !dbg !67
  %250 = bitcast float %233 to i32, !dbg !67
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !67
  %252 = bitcast i32 %251 to float, !dbg !67
  %253 = fsub float %246, %238, !dbg !53
  %254 = fadd float %233, %252, !dbg !56
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !57
  %256 = tail call float @llvm.nvvm.div.full(float %252, float %254), !dbg !58
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !59
  %258 = fmul float %253, %257, !dbg !60
  %259 = fadd float %238, %258, !dbg !61
  %260 = fadd float %243, %249, !dbg !62
  %261 = fmul float %253, %253, !dbg !63
  %262 = fmul float %233, %261, !dbg !64
  %263 = fmul float %257, %262, !dbg !65
  %264 = fadd float %260, %263, !dbg !66
  %265 = bitcast float %259 to i32, !dbg !67
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !67
  %267 = bitcast i32 %266 to float, !dbg !67
  %268 = bitcast float %264 to i32, !dbg !67
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !67
  %270 = bitcast i32 %269 to float, !dbg !67
  %271 = bitcast float %254 to i32, !dbg !67
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !67
  %273 = bitcast i32 %272 to float, !dbg !67
  %274 = fsub float %267, %259, !dbg !53
  %275 = fadd float %254, %273, !dbg !56
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !57
  %277 = tail call float @llvm.nvvm.div.full(float %273, float %275), !dbg !58
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !59
  %279 = fmul float %274, %278, !dbg !60
  %280 = fadd float %259, %279, !dbg !61
  %281 = fadd float %264, %270, !dbg !62
  %282 = fmul float %274, %274, !dbg !63
  %283 = fmul float %254, %282, !dbg !64
  %284 = fmul float %278, %283, !dbg !65
  %285 = fadd float %281, %284, !dbg !66
  %286 = bitcast float %280 to i32, !dbg !67
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !67
  %288 = bitcast i32 %287 to float, !dbg !67
  %289 = bitcast float %285 to i32, !dbg !67
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 2, i32 31), !dbg !67
  %291 = bitcast i32 %290 to float, !dbg !67
  %292 = bitcast float %275 to i32, !dbg !67
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !67
  %294 = bitcast i32 %293 to float, !dbg !67
  %295 = fsub float %288, %280, !dbg !53
  %296 = fadd float %275, %294, !dbg !56
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !57
  %298 = tail call float @llvm.nvvm.div.full(float %294, float %296), !dbg !58
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !59
  %300 = fmul float %295, %299, !dbg !60
  %301 = fadd float %280, %300, !dbg !61
  %302 = fadd float %285, %291, !dbg !62
  %303 = fmul float %295, %295, !dbg !63
  %304 = fmul float %275, %303, !dbg !64
  %305 = fmul float %299, %304, !dbg !65
  %306 = fadd float %302, %305, !dbg !66
  %307 = bitcast float %301 to i32, !dbg !67
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !67
  %309 = bitcast i32 %308 to float, !dbg !67
  %310 = bitcast float %306 to i32, !dbg !67
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !67
  %312 = bitcast i32 %311 to float, !dbg !67
  %313 = bitcast float %296 to i32, !dbg !67
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !67
  %315 = bitcast i32 %314 to float, !dbg !67
  %316 = fsub float %309, %301, !dbg !53
  %317 = fadd float %296, %315, !dbg !56
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !57
  %319 = tail call float @llvm.nvvm.div.full(float %315, float %317), !dbg !58
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !59
  %321 = fmul float %316, %320, !dbg !60
  %322 = fadd float %301, %321, !dbg !61
  %323 = fadd float %306, %312, !dbg !62
  %324 = fmul float %316, %316, !dbg !63
  %325 = fmul float %296, %324, !dbg !64
  %326 = fmul float %320, %325, !dbg !65
  %327 = fadd float %323, %326, !dbg !66
  %328 = and i32 %185, 15, !dbg !67
  %329 = icmp eq i32 %12, 0, !dbg !67
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %328, !dbg !67
  %331 = bitcast float %322 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 %329) #5, !dbg !67
  %332 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %328, !dbg !67
  %333 = bitcast float %327 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 %329) #5, !dbg !67
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %328, !dbg !67
  %335 = bitcast float %317 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 %329) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %336 = icmp slt i32 %11, 16, !dbg !67
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !67
  %338 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %336) #5, !dbg !67
  %339 = bitcast i32 %338 to float, !dbg !67
  %340 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !67
  %341 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %340, i1 %336) #5, !dbg !67
  %342 = bitcast i32 %341 to float, !dbg !67
  %343 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !67
  %344 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %343, i1 %336) #5, !dbg !67
  %345 = bitcast i32 %344 to float, !dbg !67
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 8, i32 31), !dbg !67
  %347 = bitcast i32 %346 to float, !dbg !67
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 8, i32 31), !dbg !67
  %349 = bitcast i32 %348 to float, !dbg !67
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !67
  %351 = bitcast i32 %350 to float, !dbg !67
  %352 = fsub float %347, %339, !dbg !53
  %353 = fadd float %345, %351, !dbg !56
  %354 = fcmp oeq float %353, 0.000000e+00, !dbg !57
  %355 = tail call float @llvm.nvvm.div.full(float %351, float %353), !dbg !58
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !59
  %357 = fmul float %352, %356, !dbg !60
  %358 = fadd float %357, %339, !dbg !61
  %359 = fadd float %342, %349, !dbg !62
  %360 = fmul float %352, %352, !dbg !63
  %361 = fmul float %360, %345, !dbg !64
  %362 = fmul float %361, %356, !dbg !65
  %363 = fadd float %359, %362, !dbg !66
  %364 = bitcast float %358 to i32, !dbg !67
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !67
  %366 = bitcast i32 %365 to float, !dbg !67
  %367 = bitcast float %363 to i32, !dbg !67
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !67
  %369 = bitcast i32 %368 to float, !dbg !67
  %370 = bitcast float %353 to i32, !dbg !67
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !67
  %372 = bitcast i32 %371 to float, !dbg !67
  %373 = fsub float %366, %358, !dbg !53
  %374 = fadd float %353, %372, !dbg !56
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !57
  %376 = tail call float @llvm.nvvm.div.full(float %372, float %374), !dbg !58
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !59
  %378 = fmul float %373, %377, !dbg !60
  %379 = fadd float %358, %378, !dbg !61
  %380 = fadd float %363, %369, !dbg !62
  %381 = fmul float %373, %373, !dbg !63
  %382 = fmul float %353, %381, !dbg !64
  %383 = fmul float %377, %382, !dbg !65
  %384 = fadd float %380, %383, !dbg !66
  %385 = bitcast float %379 to i32, !dbg !67
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !67
  %387 = bitcast i32 %386 to float, !dbg !67
  %388 = bitcast float %384 to i32, !dbg !67
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !67
  %390 = bitcast i32 %389 to float, !dbg !67
  %391 = bitcast float %374 to i32, !dbg !67
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !67
  %393 = bitcast i32 %392 to float, !dbg !67
  %394 = fsub float %387, %379, !dbg !53
  %395 = fadd float %374, %393, !dbg !56
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !57
  %397 = tail call float @llvm.nvvm.div.full(float %393, float %395), !dbg !58
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !59
  %399 = fmul float %394, %398, !dbg !60
  %400 = fadd float %379, %399, !dbg !61
  %401 = fadd float %384, %390, !dbg !62
  %402 = fmul float %394, %394, !dbg !63
  %403 = fmul float %374, %402, !dbg !64
  %404 = fmul float %398, %403, !dbg !65
  %405 = fadd float %401, %404, !dbg !66
  %406 = bitcast float %400 to i32, !dbg !67
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !67
  %408 = bitcast i32 %407 to float, !dbg !67
  %409 = bitcast float %405 to i32, !dbg !67
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 1, i32 31), !dbg !67
  %411 = bitcast i32 %410 to float, !dbg !67
  %412 = bitcast float %395 to i32, !dbg !67
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !67
  %414 = bitcast i32 %413 to float, !dbg !67
  %415 = fsub float %408, %400, !dbg !53
  %416 = fadd float %395, %414, !dbg !56
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !57
  %418 = tail call float @llvm.nvvm.div.full(float %414, float %416), !dbg !58
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !59
  %420 = fmul float %415, %419, !dbg !60
  %421 = fadd float %400, %420, !dbg !61
  %422 = fadd float %405, %411, !dbg !62
  %423 = fmul float %415, %415, !dbg !63
  %424 = fmul float %395, %423, !dbg !64
  %425 = fmul float %419, %424, !dbg !65
  %426 = fadd float %422, %425, !dbg !66
  %427 = and i32 %11, 15, !dbg !67
  %428 = icmp eq i32 %427, 0, !dbg !67
  %429 = and i1 %336, %428, !dbg !67
  %430 = bitcast float %421 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %430, i1 %429) #5, !dbg !67
  %431 = bitcast float %426 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %431, i1 %429) #5, !dbg !67
  %432 = bitcast float %416 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %432, i1 %429) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %433 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !67
  %434 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !67
  %435 = tail call float @llvm.nvvm.div.full(float %434, float 3.072000e+03), !dbg !68
  %436 = fadd float %435, 0x3EB0C6F7A0000000, !dbg !69
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %.not.i15 = icmp eq i32 %440, 0, !dbg !70
  br i1 %.not.i15, label %443, label %441, !dbg !70

441:                                              ; preds = %._crit_edge
  %442 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %436), !dbg !70
  br label %__nv_rsqrtf.exit17, !dbg !70

443:                                              ; preds = %._crit_edge
  %444 = tail call float @llvm.nvvm.rsqrt.approx.f(float %436), !dbg !70
  br label %__nv_rsqrtf.exit17, !dbg !70

__nv_rsqrtf.exit17:                               ; preds = %441, %443
  %.0.i16 = phi float [ %442, %441 ], [ %444, %443 ], !dbg !70
  %445 = add i32 %14, %15, !dbg !71
  %446 = sext i32 %445 to i64, !dbg !72
  %447 = getelementptr bfloat, ptr addrspace(1) %0, i64 %446, !dbg !72
  %448 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %447, i1 %10) #5, !dbg !73
  %449 = extractvalue { i32, i32 } %448, 0, !dbg !73
  %450 = bitcast i32 %449 to <2 x bfloat>, !dbg !73
  %451 = extractvalue { i32, i32 } %448, 1, !dbg !73
  %452 = bitcast i32 %451 to <2 x bfloat>, !dbg !73
  %453 = or disjoint i64 %16, 12288, !dbg !74
  %454 = getelementptr bfloat, ptr addrspace(1) %2, i64 %453, !dbg !75
  %455 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %454, i1 true) #5, !dbg !76
  %456 = extractvalue { i32, i32 } %455, 0, !dbg !76
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !76
  %458 = extractvalue { i32, i32 } %455, 1, !dbg !76
  %459 = bitcast i32 %458 to <2 x bfloat>, !dbg !76
  %460 = getelementptr bfloat, ptr addrspace(1) %3, i64 %453, !dbg !77
  %461 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %460, i1 true) #5, !dbg !78
  %462 = extractvalue { i32, i32 } %461, 0, !dbg !78
  %463 = bitcast i32 %462 to <2 x bfloat>, !dbg !78
  %464 = extractvalue { i32, i32 } %461, 1, !dbg !78
  %465 = bitcast i32 %464 to <2 x bfloat>, !dbg !78
  %466 = add nuw nsw i64 %16, 9216, !dbg !79
  %467 = getelementptr bfloat, ptr addrspace(1) %2, i64 %466, !dbg !80
  %468 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %467, i1 true) #5, !dbg !81
  %469 = extractvalue { i32, i32 } %468, 0, !dbg !81
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !81
  %471 = extractvalue { i32, i32 } %468, 1, !dbg !81
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !81
  %473 = getelementptr bfloat, ptr addrspace(1) %3, i64 %466, !dbg !82
  %474 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %473, i1 true) #5, !dbg !83
  %475 = extractvalue { i32, i32 } %474, 0, !dbg !83
  %476 = bitcast i32 %475 to <2 x bfloat>, !dbg !83
  %477 = extractvalue { i32, i32 } %474, 1, !dbg !83
  %478 = bitcast i32 %477 to <2 x bfloat>, !dbg !83
  %479 = getelementptr bfloat, ptr addrspace(1) %5, i64 %446, !dbg !84
  %480 = fpext <2 x bfloat> %450 to <2 x float>, !dbg !85
  %481 = fpext <2 x bfloat> %457 to <2 x float>, !dbg !86
  %482 = fpext <2 x bfloat> %463 to <2 x float>, !dbg !87
  %483 = fpext <2 x bfloat> %470 to <2 x float>, !dbg !88
  %484 = fpext <2 x bfloat> %476 to <2 x float>, !dbg !89
  %485 = insertelement <2 x float> poison, float %433, i64 0, !dbg !90
  %486 = shufflevector <2 x float> %485, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %487 = fsub <2 x float> %480, %486, !dbg !90
  %488 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !91
  %489 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !91
  %490 = fmul <2 x float> %489, %487, !dbg !91
  %491 = fadd <2 x float> %481, %482, !dbg !92
  %492 = fadd <2 x float> %491, splat (float 1.000000e+00), !dbg !93
  %493 = fmul <2 x float> %490, %492, !dbg !94
  %494 = fadd <2 x float> %483, %484, !dbg !95
  %495 = fadd <2 x float> %493, %494, !dbg !96
  %496 = fptrunc <2 x float> %495 to <2 x bfloat>, !dbg !97
  %497 = fpext <2 x bfloat> %452 to <2 x float>, !dbg !85
  %498 = fpext <2 x bfloat> %459 to <2 x float>, !dbg !86
  %499 = fpext <2 x bfloat> %465 to <2 x float>, !dbg !87
  %500 = fpext <2 x bfloat> %472 to <2 x float>, !dbg !88
  %501 = fpext <2 x bfloat> %478 to <2 x float>, !dbg !89
  %502 = fsub <2 x float> %497, %486, !dbg !90
  %503 = fmul <2 x float> %489, %502, !dbg !91
  %504 = fadd <2 x float> %498, %499, !dbg !92
  %505 = fadd <2 x float> %504, splat (float 1.000000e+00), !dbg !93
  %506 = fmul <2 x float> %503, %505, !dbg !94
  %507 = fadd <2 x float> %500, %501, !dbg !95
  %508 = fadd <2 x float> %506, %507, !dbg !96
  %509 = fptrunc <2 x float> %508 to <2 x bfloat>, !dbg !97
  %510 = bitcast <2 x bfloat> %496 to i32, !dbg !97
  %511 = bitcast <2 x bfloat> %509 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %510, i32 %511, ptr addrspace(1) %479, i1 %10) #5, !dbg !97
  %512 = or disjoint i64 %16, 2048, !dbg !98
  %513 = icmp samesign ult i64 %512, 3072, !dbg !99
  %514 = trunc nuw nsw i64 %512 to i32, !dbg !71
  %515 = add i32 %15, %514, !dbg !71
  %516 = sext i32 %515 to i64, !dbg !72
  %517 = getelementptr bfloat, ptr addrspace(1) %0, i64 %516, !dbg !72
  %518 = and i1 %10, %513, !dbg !100
  %519 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %517, i1 %518) #5, !dbg !73
  %520 = extractvalue { i32, i32 } %519, 0, !dbg !73
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !73
  %522 = extractvalue { i32, i32 } %519, 1, !dbg !73
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !73
  %524 = or disjoint i64 %16, 14336, !dbg !74
  %525 = getelementptr bfloat, ptr addrspace(1) %2, i64 %524, !dbg !75
  %526 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %525, i1 %513) #5, !dbg !76
  %527 = extractvalue { i32, i32 } %526, 0, !dbg !76
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !76
  %529 = extractvalue { i32, i32 } %526, 1, !dbg !76
  %530 = bitcast i32 %529 to <2 x bfloat>, !dbg !76
  %531 = getelementptr bfloat, ptr addrspace(1) %3, i64 %524, !dbg !77
  %532 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %531, i1 %513) #5, !dbg !78
  %533 = extractvalue { i32, i32 } %532, 0, !dbg !78
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !78
  %535 = extractvalue { i32, i32 } %532, 1, !dbg !78
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !78
  %537 = add nuw nsw i64 %16, 11264, !dbg !79
  %538 = getelementptr bfloat, ptr addrspace(1) %2, i64 %537, !dbg !80
  %539 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %538, i1 %513) #5, !dbg !81
  %540 = extractvalue { i32, i32 } %539, 0, !dbg !81
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !81
  %542 = extractvalue { i32, i32 } %539, 1, !dbg !81
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !81
  %544 = getelementptr bfloat, ptr addrspace(1) %3, i64 %537, !dbg !82
  %545 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %544, i1 %513) #5, !dbg !83
  %546 = extractvalue { i32, i32 } %545, 0, !dbg !83
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !83
  %548 = extractvalue { i32, i32 } %545, 1, !dbg !83
  %549 = bitcast i32 %548 to <2 x bfloat>, !dbg !83
  %550 = getelementptr bfloat, ptr addrspace(1) %5, i64 %516, !dbg !84
  %551 = fpext <2 x bfloat> %521 to <2 x float>, !dbg !85
  %552 = fpext <2 x bfloat> %528 to <2 x float>, !dbg !86
  %553 = fpext <2 x bfloat> %534 to <2 x float>, !dbg !87
  %554 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !88
  %555 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !89
  %556 = fsub <2 x float> %551, %486, !dbg !90
  %557 = fmul <2 x float> %489, %556, !dbg !91
  %558 = fadd <2 x float> %552, %553, !dbg !92
  %559 = fadd <2 x float> %558, splat (float 1.000000e+00), !dbg !93
  %560 = fmul <2 x float> %557, %559, !dbg !94
  %561 = fadd <2 x float> %554, %555, !dbg !95
  %562 = fadd <2 x float> %560, %561, !dbg !96
  %563 = fptrunc <2 x float> %562 to <2 x bfloat>, !dbg !97
  %564 = fpext <2 x bfloat> %523 to <2 x float>, !dbg !85
  %565 = fpext <2 x bfloat> %530 to <2 x float>, !dbg !86
  %566 = fpext <2 x bfloat> %536 to <2 x float>, !dbg !87
  %567 = fpext <2 x bfloat> %543 to <2 x float>, !dbg !88
  %568 = fpext <2 x bfloat> %549 to <2 x float>, !dbg !89
  %569 = fsub <2 x float> %564, %486, !dbg !90
  %570 = fmul <2 x float> %489, %569, !dbg !91
  %571 = fadd <2 x float> %565, %566, !dbg !92
  %572 = fadd <2 x float> %571, splat (float 1.000000e+00), !dbg !93
  %573 = fmul <2 x float> %570, %572, !dbg !94
  %574 = fadd <2 x float> %567, %568, !dbg !95
  %575 = fadd <2 x float> %573, %574, !dbg !96
  %576 = fptrunc <2 x float> %575 to <2 x bfloat>, !dbg !97
  %577 = bitcast <2 x bfloat> %563 to i32, !dbg !97
  %578 = bitcast <2 x bfloat> %576 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %577, i32 %578, ptr addrspace(1) %550, i1 %518) #5, !dbg !97
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5xpjdsrnbj64uql2iada2fsfznt2hliwyqzpbxv7qvc3buexthi.py", directory: "/tmp/torchinductor_root/5x")
!4 = !{ptr @triton_red_fused_add_mul_native_layer_norm_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_add_mul_native_layer_norm_13", linkageName: "triton_red_fused_add_mul_native_layer_norm_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 39, column: 41, scope: !6)
!18 = !DILocation(line: 39, column: 34, scope: !6)
!19 = !DILocation(line: 39, column: 48, scope: !6)
!20 = !DILocation(line: 40, column: 34, scope: !6)
!21 = !DILocation(line: 40, column: 48, scope: !6)
!22 = !DILocation(line: 41, column: 38, scope: !6)
!23 = !DILocation(line: 41, column: 55, scope: !6)
!24 = !DILocation(line: 42, column: 34, scope: !6)
!25 = !DILocation(line: 42, column: 41, scope: !6)
!26 = !DILocation(line: 38, column: 113, scope: !6)
!27 = !DILocation(line: 39, column: 101, scope: !6)
!28 = !DILocation(line: 40, column: 101, scope: !6)
!29 = !DILocation(line: 41, column: 117, scope: !6)
!30 = !DILocation(line: 42, column: 94, scope: !6)
!31 = !DILocation(line: 43, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 22, scope: !6)
!34 = !DILocation(line: 46, column: 22, scope: !6)
!35 = !DILocation(line: 203, column: 7, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 50, column: 55, scope: !6)
!39 = !DILocation(line: 52, column: 64, scope: !6)
!40 = !DILocation(line: 54, column: 68, scope: !6)
!41 = !DILocation(line: 55, column: 55, scope: !6)
!42 = !DILocation(line: 33, column: 31, scope: !6)
!43 = !DILocation(line: 34, column: 29, scope: !6)
!44 = !DILocation(line: 38, column: 61, scope: !6)
!45 = !DILocation(line: 208, column: 24, scope: !36, inlinedAt: !38)
!46 = !DILocation(line: 209, column: 30, scope: !36, inlinedAt: !38)
!47 = !DILocation(line: 210, column: 34, scope: !36, inlinedAt: !38)
!48 = !DILocation(line: 210, column: 26, scope: !36, inlinedAt: !38)
!49 = !DILocation(line: 211, column: 39, scope: !36, inlinedAt: !38)
!50 = !DILocation(line: 211, column: 31, scope: !36, inlinedAt: !38)
!51 = !DILocation(line: 211, column: 22, scope: !36, inlinedAt: !38)
!52 = !DILocation(line: 53, column: 60, scope: !6)
!53 = !DILocation(line: 217, column: 21, scope: !54, inlinedAt: !55)
!54 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!55 = !DILocation(line: 56, column: 85, scope: !6)
!56 = !DILocation(line: 218, column: 28, scope: !54, inlinedAt: !55)
!57 = !DILocation(line: 219, column: 39, scope: !54, inlinedAt: !55)
!58 = !DILocation(line: 219, column: 60, scope: !54, inlinedAt: !55)
!59 = !DILocation(line: 219, column: 49, scope: !54, inlinedAt: !55)
!60 = !DILocation(line: 221, column: 25, scope: !54, inlinedAt: !55)
!61 = !DILocation(line: 221, column: 17, scope: !54, inlinedAt: !55)
!62 = !DILocation(line: 222, column: 15, scope: !54, inlinedAt: !55)
!63 = !DILocation(line: 222, column: 30, scope: !54, inlinedAt: !55)
!64 = !DILocation(line: 222, column: 38, scope: !54, inlinedAt: !55)
!65 = !DILocation(line: 222, column: 49, scope: !54, inlinedAt: !55)
!66 = !DILocation(line: 222, column: 22, scope: !54, inlinedAt: !55)
!67 = !DILocation(line: 229, column: 46, scope: !36, inlinedAt: !55)
!68 = !DILocation(line: 74, column: 25, scope: !6)
!69 = !DILocation(line: 76, column: 24, scope: !6)
!70 = !DILocation(line: 77, column: 32, scope: !6)
!71 = !DILocation(line: 66, column: 46, scope: !6)
!72 = !DILocation(line: 66, column: 39, scope: !6)
!73 = !DILocation(line: 66, column: 56, scope: !6)
!74 = !DILocation(line: 67, column: 43, scope: !6)
!75 = !DILocation(line: 67, column: 35, scope: !6)
!76 = !DILocation(line: 67, column: 50, scope: !6)
!77 = !DILocation(line: 68, column: 35, scope: !6)
!78 = !DILocation(line: 68, column: 50, scope: !6)
!79 = !DILocation(line: 69, column: 42, scope: !6)
!80 = !DILocation(line: 69, column: 35, scope: !6)
!81 = !DILocation(line: 69, column: 49, scope: !6)
!82 = !DILocation(line: 70, column: 35, scope: !6)
!83 = !DILocation(line: 70, column: 49, scope: !6)
!84 = !DILocation(line: 86, column: 29, scope: !6)
!85 = !DILocation(line: 66, column: 118, scope: !6)
!86 = !DILocation(line: 67, column: 103, scope: !6)
!87 = !DILocation(line: 68, column: 103, scope: !6)
!88 = !DILocation(line: 69, column: 102, scope: !6)
!89 = !DILocation(line: 70, column: 102, scope: !6)
!90 = !DILocation(line: 72, column: 24, scope: !6)
!91 = !DILocation(line: 78, column: 24, scope: !6)
!92 = !DILocation(line: 80, column: 24, scope: !6)
!93 = !DILocation(line: 82, column: 24, scope: !6)
!94 = !DILocation(line: 83, column: 24, scope: !6)
!95 = !DILocation(line: 84, column: 24, scope: !6)
!96 = !DILocation(line: 85, column: 24, scope: !6)
!97 = !DILocation(line: 86, column: 53, scope: !6)
!98 = !DILocation(line: 61, column: 31, scope: !6)
!99 = !DILocation(line: 62, column: 29, scope: !6)
!100 = !DILocation(line: 66, column: 66, scope: !6)
!101 = !DILocation(line: 60, column: 4, scope: !6)
