; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 65, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = shl i32 %15, 2, !dbg !19
  %20 = and i32 %19, 16, !dbg !19
  %21 = or disjoint i32 %14, %18, !dbg !20
  %22 = shl nsw i32 %13, 6, !dbg !21
  %23 = or disjoint i32 %22, %18, !dbg !22
  %24 = srem i32 %21, 4112, !dbg !23
  %25 = srem i32 %23, 3072, !dbg !24
  %26 = shl i32 %15, 4, !dbg !25
  %27 = and i32 %26, 16, !dbg !25
  %28 = mul nsw i32 %24, 3072, !dbg !26
  %29 = mul nsw i32 %25, 3072, !dbg !27
  %30 = or disjoint i32 %28, %27, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr i8, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = shl nuw nsw i32 %16, 1, !dbg !30
  %34 = xor i32 %27, %33, !dbg !30
  %35 = shl nuw nsw i32 %18, 5, !dbg !30
  %36 = or disjoint i32 %34, %35, !dbg !30
  %37 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %36, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %37, ptr addrspace(1) %32, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %38 = or disjoint i32 %29, %27, !dbg !31
  %39 = sext i32 %38 to i64, !dbg !32
  %40 = getelementptr i8, ptr addrspace(1) %1, i64 %39, !dbg !32
  %41 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %36, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %41, ptr addrspace(1) %40, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !34
  %42 = and i32 %15, 7
  %43 = and i32 %15, 15
  %44 = xor i32 %19, %15
  %45 = and i32 %44, 16
  %46 = lshr i32 %15, 2
  %47 = and i32 %46, 16
  %48 = or disjoint i32 %47, %43
  %49 = shl nuw nsw i32 %48, 5
  %50 = or disjoint i32 %49, %45
  %.reass = or disjoint i32 %42, %invariant.op
  %51 = or disjoint i32 %.reass, %47
  %52 = shl nuw nsw i32 %51, 5
  %53 = or disjoint i32 %52, %45
  %54 = xor i32 %20, %33
  %55 = lshr i32 %15, 2
  %56 = and i32 %55, 8
  %57 = or disjoint i32 %56, %42
  %58 = shl nuw nsw i32 %57, 5
  %59 = or disjoint i32 %58, %54
  %60 = or disjoint i32 %59, 512
  %61 = or disjoint i32 %59, 1024
  %62 = or disjoint i32 %59, 1536
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %31, !dbg !34
  %invariant.gep104 = getelementptr i8, ptr addrspace(1) %1, i64 %39, !dbg !34
  br label %63, !dbg !34

63:                                               ; preds = %4, %63
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %63 ]
  %64 = phi i32 [ -1, %4 ], [ %99, %63 ]
  %65 = phi i32 [ 0, %4 ], [ %138, %63 ]
  %66 = phi i32 [ 0, %4 ], [ %139, %63 ]
  %67 = phi i32 [ 0, %4 ], [ %140, %63 ]
  %68 = phi i32 [ 0, %4 ], [ %141, %63 ]
  %69 = phi i32 [ 0, %4 ], [ %143, %63 ]
  %70 = phi i32 [ 0, %4 ], [ %144, %63 ]
  %71 = phi i32 [ 0, %4 ], [ %145, %63 ]
  %72 = phi i32 [ 0, %4 ], [ %146, %63 ]
  %73 = phi i32 [ 0, %4 ], [ %148, %63 ]
  %74 = phi i32 [ 0, %4 ], [ %149, %63 ]
  %75 = phi i32 [ 0, %4 ], [ %150, %63 ]
  %76 = phi i32 [ 0, %4 ], [ %151, %63 ]
  %77 = phi i32 [ 0, %4 ], [ %153, %63 ]
  %78 = phi i32 [ 0, %4 ], [ %154, %63 ]
  %79 = phi i32 [ 0, %4 ], [ %155, %63 ]
  %80 = phi i32 [ 0, %4 ], [ %156, %63 ]
  %81 = phi i32 [ 0, %4 ], [ %158, %63 ]
  %82 = phi i32 [ 0, %4 ], [ %159, %63 ]
  %83 = phi i32 [ 0, %4 ], [ %160, %63 ]
  %84 = phi i32 [ 0, %4 ], [ %161, %63 ]
  %85 = phi i32 [ 0, %4 ], [ %163, %63 ]
  %86 = phi i32 [ 0, %4 ], [ %164, %63 ]
  %87 = phi i32 [ 0, %4 ], [ %165, %63 ]
  %88 = phi i32 [ 0, %4 ], [ %166, %63 ]
  %89 = phi i32 [ 0, %4 ], [ %168, %63 ]
  %90 = phi i32 [ 0, %4 ], [ %169, %63 ]
  %91 = phi i32 [ 0, %4 ], [ %170, %63 ]
  %92 = phi i32 [ 0, %4 ], [ %171, %63 ]
  %93 = phi i32 [ 0, %4 ], [ %173, %63 ]
  %94 = phi i32 [ 0, %4 ], [ %174, %63 ]
  %95 = phi i32 [ 0, %4 ], [ %175, %63 ]
  %96 = phi i32 [ 0, %4 ], [ %176, %63 ]
  %.not35 = icmp eq i64 %indvars.iv, 95, !dbg !34
  %97 = add i32 %64, 1, !dbg !34
  %98 = icmp ugt i32 %64, 2147483646, !dbg !34
  %99 = select i1 %98, i32 %97, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %100 = shl i32 %99, 11, !dbg !30
  %101 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !30
  %102 = getelementptr inbounds nuw i8, ptr addrspace(3) %101, i32 %50, !dbg !30
  %103 = ptrtoint ptr addrspace(3) %102 to i32, !dbg !30
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %103) #1, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !30
  %109 = getelementptr inbounds nuw i8, ptr addrspace(3) %101, i32 %53, !dbg !30
  %110 = ptrtoint ptr addrspace(3) %109 to i32, !dbg !30
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %110) #1, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !30
  %116 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %100, !dbg !33
  %117 = getelementptr inbounds nuw i8, ptr addrspace(3) %116, i32 %59, !dbg !33
  %118 = ptrtoint ptr addrspace(3) %117 to i32, !dbg !33
  %119 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %118) #1, !dbg !33
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !33
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !33
  %122 = getelementptr inbounds nuw i8, ptr addrspace(3) %116, i32 %60, !dbg !33
  %123 = ptrtoint ptr addrspace(3) %122 to i32, !dbg !33
  %124 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %123) #1, !dbg !33
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !33
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !33
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) %116, i32 %61, !dbg !33
  %128 = ptrtoint ptr addrspace(3) %127 to i32, !dbg !33
  %129 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %128) #1, !dbg !33
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !33
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !33
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %116, i32 %62, !dbg !33
  %133 = ptrtoint ptr addrspace(3) %132 to i32, !dbg !33
  %134 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %133) #1, !dbg !33
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !33
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !33
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %65, i32 %66, i32 %67, i32 %68, i32 %105, i32 %106, i32 %107, i32 %108, i32 %120, i32 %121) #1, !dbg !35
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !35
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !35
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %69, i32 %70, i32 %71, i32 %72, i32 %105, i32 %106, i32 %107, i32 %108, i32 %125, i32 %126) #1, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !35
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %73, i32 %74, i32 %75, i32 %76, i32 %105, i32 %106, i32 %107, i32 %108, i32 %130, i32 %131) #1, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !35
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !35
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !35
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %77, i32 %78, i32 %79, i32 %80, i32 %105, i32 %106, i32 %107, i32 %108, i32 %135, i32 %136) #1, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !35
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %81, i32 %82, i32 %83, i32 %84, i32 %112, i32 %113, i32 %114, i32 %115, i32 %120, i32 %121) #1, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !35
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %85, i32 %86, i32 %87, i32 %88, i32 %112, i32 %113, i32 %114, i32 %115, i32 %125, i32 %126) #1, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !35
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %89, i32 %90, i32 %91, i32 %92, i32 %112, i32 %113, i32 %114, i32 %115, i32 %130, i32 %131) #1, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !35
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !35
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %93, i32 %94, i32 %95, i32 %96, i32 %112, i32 %113, i32 %114, i32 %115, i32 %135, i32 %136) #1, !dbg !35
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !35
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %177 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !36
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %177, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %178 = select i1 %.not35, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %37, ptr addrspace(1) %gep, i32 %178) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep105 = getelementptr i8, ptr addrspace(1) %invariant.gep104, i64 %177, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %41, ptr addrspace(1) %gep105, i32 %178) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !34
  br i1 %exitcond.not, label %179, label %63, !dbg !34

179:                                              ; preds = %63
  %180 = and i32 %19, 60, !dbg !19
  %181 = or disjoint i32 %22, %180, !dbg !22
  %182 = lshr i32 %15, 4, !dbg !19
  %183 = and i32 %182, 7, !dbg !19
  %184 = or disjoint i32 %183, %14, !dbg !20
  %185 = or disjoint i32 %184, 56, !dbg !20
  %186 = or disjoint i32 %184, 48, !dbg !20
  %187 = or disjoint i32 %184, 40, !dbg !20
  %188 = or disjoint i32 %184, 32, !dbg !20
  %189 = or disjoint i32 %184, 24, !dbg !20
  %190 = or disjoint i32 %184, 16, !dbg !20
  %191 = or disjoint i32 %184, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %192 = icmp slt i32 %184, 4112, !dbg !37
  %193 = icmp slt i32 %191, 4112, !dbg !37
  %194 = icmp slt i32 %190, 4112, !dbg !37
  %195 = icmp slt i32 %189, 4112, !dbg !37
  %196 = icmp slt i32 %188, 4112, !dbg !37
  %197 = icmp slt i32 %187, 4112, !dbg !37
  %198 = icmp slt i32 %186, 4112, !dbg !37
  %199 = icmp slt i32 %185, 4112, !dbg !37
  %200 = icmp slt i32 %181, 3072, !dbg !38
  %201 = and i1 %192, %200, !dbg !39
  %202 = and i1 %193, %200, !dbg !39
  %203 = and i1 %194, %200, !dbg !39
  %204 = and i1 %195, %200, !dbg !39
  %205 = and i1 %196, %200, !dbg !39
  %206 = and i1 %197, %200, !dbg !39
  %207 = and i1 %198, %200, !dbg !39
  %208 = and i1 %199, %200, !dbg !39
  %209 = mul i32 %184, 3072, !dbg !40
  %210 = mul i32 %191, 3072, !dbg !40
  %211 = mul i32 %190, 3072, !dbg !40
  %212 = mul i32 %189, 3072, !dbg !40
  %213 = mul i32 %188, 3072, !dbg !40
  %214 = mul i32 %187, 3072, !dbg !40
  %215 = mul i32 %186, 3072, !dbg !40
  %216 = mul i32 %185, 3072, !dbg !40
  %217 = add i32 %209, %181, !dbg !41
  %218 = add i32 %210, %181, !dbg !41
  %219 = add i32 %211, %181, !dbg !41
  %220 = add i32 %212, %181, !dbg !41
  %221 = add i32 %213, %181, !dbg !41
  %222 = add i32 %214, %181, !dbg !41
  %223 = add i32 %215, %181, !dbg !41
  %224 = add i32 %216, %181, !dbg !41
  %225 = sext i32 %217 to i64, !dbg !42
  %226 = getelementptr i32, ptr addrspace(1) %2, i64 %225, !dbg !42
  %227 = sext i32 %218 to i64, !dbg !42
  %228 = getelementptr i32, ptr addrspace(1) %2, i64 %227, !dbg !42
  %229 = sext i32 %219 to i64, !dbg !42
  %230 = getelementptr i32, ptr addrspace(1) %2, i64 %229, !dbg !42
  %231 = sext i32 %220 to i64, !dbg !42
  %232 = getelementptr i32, ptr addrspace(1) %2, i64 %231, !dbg !42
  %233 = sext i32 %221 to i64, !dbg !42
  %234 = getelementptr i32, ptr addrspace(1) %2, i64 %233, !dbg !42
  %235 = sext i32 %222 to i64, !dbg !42
  %236 = getelementptr i32, ptr addrspace(1) %2, i64 %235, !dbg !42
  %237 = sext i32 %223 to i64, !dbg !42
  %238 = getelementptr i32, ptr addrspace(1) %2, i64 %237, !dbg !42
  %239 = sext i32 %224 to i64, !dbg !42
  %240 = getelementptr i32, ptr addrspace(1) %2, i64 %239, !dbg !42
  %241 = shl i32 %15, 1, !dbg !43
  %242 = and i32 %241, 6, !dbg !43
  %243 = and i32 %26, 192, !dbg !43
  %244 = or disjoint i32 %243, %242, !dbg !43
  %245 = shl i32 %15, 4, !dbg !43
  %246 = and i32 %245, 1280, !dbg !43
  %247 = or disjoint i32 %246, %244, !dbg !43
  %248 = or disjoint i32 %247, %56, !dbg !43
  %249 = and i32 %19, 508, !dbg !43
  %250 = lshr i32 %247, 4, !dbg !43
  %251 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %250, !dbg !43
  %252 = getelementptr inbounds nuw i32, ptr addrspace(3) %251, i32 %248, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %252, i32 %138, i32 %139, i1 true) #1, !dbg !43
  %253 = or disjoint i32 %248, 512, !dbg !43
  %254 = lshr i32 %253, 4, !dbg !43
  %255 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %254, !dbg !43
  %256 = getelementptr inbounds nuw i32, ptr addrspace(3) %255, i32 %253, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %256, i32 %140, i32 %141, i1 true) #1, !dbg !43
  %257 = or disjoint i32 %248, 16, !dbg !43
  %258 = getelementptr inbounds nuw i32, ptr addrspace(3) %251, i32 %257, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %258, i32 %143, i32 %144, i1 true) #1, !dbg !43
  %259 = or disjoint i32 %248, 528, !dbg !43
  %260 = lshr i32 %259, 4, !dbg !43
  %261 = and i32 %260, 268435452, !dbg !43
  %262 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %261, !dbg !43
  %263 = getelementptr inbounds nuw i32, ptr addrspace(3) %262, i32 %259, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %263, i32 %145, i32 %146, i1 true) #1, !dbg !43
  %264 = or disjoint i32 %248, 32, !dbg !43
  %265 = getelementptr inbounds nuw i32, ptr addrspace(3) %251, i32 %264, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %265, i32 %148, i32 %149, i1 true) #1, !dbg !43
  %266 = or disjoint i32 %248, 544, !dbg !43
  %267 = lshr i32 %266, 4, !dbg !43
  %268 = and i32 %267, 268435452, !dbg !43
  %269 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %268, !dbg !43
  %270 = getelementptr inbounds nuw i32, ptr addrspace(3) %269, i32 %266, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %270, i32 %150, i32 %151, i1 true) #1, !dbg !43
  %271 = or disjoint i32 %248, 48, !dbg !43
  %272 = getelementptr inbounds nuw i32, ptr addrspace(3) %251, i32 %271, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %272, i32 %153, i32 %154, i1 true) #1, !dbg !43
  %273 = or disjoint i32 %248, 560, !dbg !43
  %274 = lshr i32 %273, 4, !dbg !43
  %275 = and i32 %274, 268435452, !dbg !43
  %276 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %275, !dbg !43
  %277 = getelementptr inbounds nuw i32, ptr addrspace(3) %276, i32 %273, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %277, i32 %155, i32 %156, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %278 = and i32 %15, 112, !dbg !43
  %279 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %278, !dbg !43
  %280 = getelementptr inbounds nuw i32, ptr addrspace(3) %279, i32 %249, !dbg !43
  %281 = load <4 x i32>, ptr addrspace(3) %280, align 16, !dbg !43
  %282 = or disjoint i32 %249, 512, !dbg !43
  %283 = lshr i32 %282, 4, !dbg !43
  %284 = and i32 %283, 60, !dbg !43
  %285 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %284, !dbg !43
  %286 = getelementptr inbounds nuw i32, ptr addrspace(3) %285, i32 %282, !dbg !43
  %287 = load <4 x i32>, ptr addrspace(3) %286, align 16, !dbg !43
  %288 = or disjoint i32 %249, 1024, !dbg !43
  %289 = lshr i32 %288, 4, !dbg !43
  %290 = and i32 %289, 92, !dbg !43
  %291 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %290, !dbg !43
  %292 = getelementptr inbounds nuw i32, ptr addrspace(3) %291, i32 %288, !dbg !43
  %293 = load <4 x i32>, ptr addrspace(3) %292, align 16, !dbg !43
  %294 = or disjoint i32 %249, 1536, !dbg !43
  %295 = lshr i32 %294, 4, !dbg !43
  %296 = and i32 %295, 124, !dbg !43
  %297 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %296, !dbg !43
  %298 = getelementptr inbounds nuw i32, ptr addrspace(3) %297, i32 %294, !dbg !43
  %299 = load <4 x i32>, ptr addrspace(3) %298, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %252, i32 %158, i32 %159, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %256, i32 %160, i32 %161, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %258, i32 %163, i32 %164, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %263, i32 %165, i32 %166, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %265, i32 %168, i32 %169, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %270, i32 %170, i32 %171, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %272, i32 %173, i32 %174, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %277, i32 %175, i32 %176, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %300 = load <4 x i32>, ptr addrspace(3) %280, align 16, !dbg !43
  %301 = load <4 x i32>, ptr addrspace(3) %286, align 16, !dbg !43
  %302 = load <4 x i32>, ptr addrspace(3) %292, align 16, !dbg !43
  %303 = load <4 x i32>, ptr addrspace(3) %298, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %281, i64 0, !dbg !43
  %.extract4 = extractelement <4 x i32> %281, i64 1, !dbg !43
  %.extract5 = extractelement <4 x i32> %281, i64 2, !dbg !43
  %.extract6 = extractelement <4 x i32> %281, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %226, i1 %201) #1, !dbg !43
  %.extract7 = extractelement <4 x i32> %287, i64 0, !dbg !43
  %.extract8 = extractelement <4 x i32> %287, i64 1, !dbg !43
  %.extract9 = extractelement <4 x i32> %287, i64 2, !dbg !43
  %.extract10 = extractelement <4 x i32> %287, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %228, i1 %202) #1, !dbg !43
  %.extract11 = extractelement <4 x i32> %293, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %293, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %293, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %293, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %230, i1 %203) #1, !dbg !43
  %.extract15 = extractelement <4 x i32> %299, i64 0, !dbg !43
  %.extract16 = extractelement <4 x i32> %299, i64 1, !dbg !43
  %.extract17 = extractelement <4 x i32> %299, i64 2, !dbg !43
  %.extract18 = extractelement <4 x i32> %299, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %232, i1 %204) #1, !dbg !43
  %.extract19 = extractelement <4 x i32> %300, i64 0, !dbg !43
  %.extract20 = extractelement <4 x i32> %300, i64 1, !dbg !43
  %.extract21 = extractelement <4 x i32> %300, i64 2, !dbg !43
  %.extract22 = extractelement <4 x i32> %300, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %234, i1 %205) #1, !dbg !43
  %.extract23 = extractelement <4 x i32> %301, i64 0, !dbg !43
  %.extract24 = extractelement <4 x i32> %301, i64 1, !dbg !43
  %.extract25 = extractelement <4 x i32> %301, i64 2, !dbg !43
  %.extract26 = extractelement <4 x i32> %301, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %236, i1 %206) #1, !dbg !43
  %.extract27 = extractelement <4 x i32> %302, i64 0, !dbg !43
  %.extract28 = extractelement <4 x i32> %302, i64 1, !dbg !43
  %.extract29 = extractelement <4 x i32> %302, i64 2, !dbg !43
  %.extract30 = extractelement <4 x i32> %302, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %238, i1 %207) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %303, i64 0, !dbg !43
  %.extract32 = extractelement <4 x i32> %303, i64 1, !dbg !43
  %.extract33 = extractelement <4 x i32> %303, i64 2, !dbg !43
  %.extract34 = extractelement <4 x i32> %303, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %240, i1 %208) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbrbbnylg2j7fa74affa6xgjrxad7zdwbz2gjnc2zkwbml2yvsbd.py", directory: "/tmp/torchinductor_root/br")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
