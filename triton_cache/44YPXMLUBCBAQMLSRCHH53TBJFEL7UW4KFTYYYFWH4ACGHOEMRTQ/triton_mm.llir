; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 48, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 1, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 48, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 16, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %18, 31, !dbg !19
  %24 = or disjoint i32 %23, %22, !dbg !19
  %25 = or disjoint i32 %24, 64, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 24, !dbg !19
  %28 = or disjoint i32 %14, %24, !dbg !20
  %29 = or disjoint i32 %14, %25, !dbg !20
  %30 = shl nsw i32 %13, 7, !dbg !21
  %31 = or disjoint i32 %30, %24, !dbg !22
  %32 = or disjoint i32 %30, %25, !dbg !22
  %33 = srem i32 %28, 77, !dbg !23
  %34 = srem i32 %29, 77, !dbg !23
  %.lhs.trunc = trunc i32 %31 to i16, !dbg !24
  %35 = srem i16 %.lhs.trunc, 768, !dbg !24
  %.sext = sext i16 %35 to i32, !dbg !24
  %.lhs.trunc99 = trunc i32 %32 to i16, !dbg !24
  %36 = srem i16 %.lhs.trunc99, 768, !dbg !24
  %.sext100 = sext i16 %36 to i32, !dbg !24
  %37 = mul nsw i32 %33, 768, !dbg !25
  %38 = mul nsw i32 %34, 768, !dbg !25
  %39 = mul nsw i32 %.sext, 768, !dbg !26
  %40 = mul nsw i32 %.sext100, 768, !dbg !26
  %41 = or disjoint i32 %37, %27, !dbg !27
  %42 = or disjoint i32 %38, %27, !dbg !27
  %43 = sext i32 %41 to i64, !dbg !28
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = sext i32 %42 to i64, !dbg !28
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = xor i32 %26, %15, !dbg !29
  %48 = and i32 %47, 24, !dbg !29
  %49 = shl nuw nsw i32 %24, 5, !dbg !29
  %50 = or disjoint i32 %49, %48, !dbg !29
  %51 = zext nneg i32 %50 to i64, !dbg !29
  %52 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %51, !dbg !29
  %53 = and i32 %18, 31, !dbg !29
  %54 = or disjoint i32 %53, %22, !dbg !29
  %55 = shl nuw nsw i32 %54, 5, !dbg !29
  %56 = or disjoint i32 %55, %48, !dbg !29
  %57 = or disjoint i32 %56, 2048, !dbg !29
  %58 = zext nneg i32 %57 to i64, !dbg !29
  %59 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %58, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %52, ptr addrspace(1) %44, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %59, ptr addrspace(1) %46, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %60 = or disjoint i32 %39, %27, !dbg !30
  %61 = or disjoint i32 %40, %27, !dbg !30
  %62 = sext i32 %60 to i64, !dbg !31
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !31
  %64 = sext i32 %61 to i64, !dbg !31
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !31
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %51, !dbg !32
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %58, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %63, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %67, ptr addrspace(1) %65, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %19, 32, !dbg !33
  %invariant.op165 = or disjoint i32 %19, 64, !dbg !33
  %invariant.op167 = or disjoint i32 %19, 96, !dbg !33
  %68 = shl i32 %15, 2
  %69 = and i32 %68, 8
  %70 = and i32 %68, 16
  %71 = and i32 %68, 24
  %72 = and i32 %15, 7
  %73 = and i32 %15, 15
  %74 = lshr exact i32 %17, 1
  %75 = xor i32 %71, %74
  %76 = lshr exact i32 %21, 3
  %77 = or disjoint i32 %76, %73
  %78 = shl nuw nsw i32 %77, 5
  %79 = or disjoint i32 %75, %78
  %80 = zext nneg i32 %79 to i64
  %81 = or disjoint i32 %69, 16
  %82 = or disjoint i32 %74, %70
  %83 = xor i32 %82, %81
  %84 = or disjoint i32 %83, %78
  %85 = zext nneg i32 %84 to i64
  %86 = or disjoint i32 %72, 32
  %87 = or disjoint i32 %16, %86
  %88 = or disjoint i32 %87, %76
  %89 = shl nuw nsw i32 %88, 5
  %90 = or disjoint i32 %89, %75
  %91 = zext nneg i32 %90 to i64
  %92 = or disjoint i32 %83, %89
  %93 = zext nneg i32 %92 to i64
  %94 = or disjoint i32 %72, 64
  %95 = or disjoint i32 %16, %94
  %96 = or disjoint i32 %95, %76
  %97 = shl nuw nsw i32 %96, 5
  %98 = or disjoint i32 %97, %75
  %99 = zext nneg i32 %98 to i64
  %100 = or disjoint i32 %83, %97
  %101 = zext nneg i32 %100 to i64
  %102 = or disjoint i32 %72, 96
  %103 = or disjoint i32 %16, %102
  %104 = or disjoint i32 %103, %76
  %105 = shl nuw nsw i32 %104, 5
  %106 = or disjoint i32 %105, %75
  %107 = zext nneg i32 %106 to i64
  %108 = or disjoint i32 %83, %105
  %109 = zext nneg i32 %108 to i64
  %110 = xor i32 %68, %15
  %111 = and i32 %110, 24
  %112 = or disjoint i32 %72, %19
  %113 = or disjoint i32 %112, %20
  %114 = shl nuw nsw i32 %113, 5
  %115 = or disjoint i32 %114, %111
  %116 = zext nneg i32 %115 to i64
  %.reass = or disjoint i32 %72, %invariant.op
  %117 = or disjoint i32 %.reass, %20
  %118 = shl nuw nsw i32 %117, 5
  %119 = or disjoint i32 %118, %111
  %120 = zext nneg i32 %119 to i64
  %.reass166 = or disjoint i32 %72, %invariant.op165
  %121 = or disjoint i32 %.reass166, %20
  %122 = shl nuw nsw i32 %121, 5
  %123 = or disjoint i32 %122, %111
  %124 = zext nneg i32 %123 to i64
  %.reass168 = or disjoint i32 %72, %invariant.op167
  %125 = or disjoint i32 %.reass168, %20
  %126 = shl nuw nsw i32 %125, 5
  %127 = or disjoint i32 %126, %111
  %128 = zext nneg i32 %127 to i64
  %129 = zext nneg i32 %27 to i64, !dbg !33
  %130 = sext i32 %40 to i64, !dbg !33
  %131 = sext i32 %39 to i64, !dbg !33
  %132 = sext i32 %38 to i64, !dbg !33
  %133 = sext i32 %37 to i64, !dbg !33
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %133, !dbg !33
  %invariant.gep295 = getelementptr bfloat, ptr addrspace(1) %0, i64 %132, !dbg !33
  %invariant.gep297 = getelementptr bfloat, ptr addrspace(1) %1, i64 %131, !dbg !33
  %invariant.gep299 = getelementptr bfloat, ptr addrspace(1) %1, i64 %130, !dbg !33
  br label %134, !dbg !33

134:                                              ; preds = %4, %134
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %134 ]
  %135 = phi i32 [ -1, %4 ], [ %202, %134 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %384, %134 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %385, %134 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %386, %134 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %387, %134 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %389, %134 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %390, %134 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %391, %134 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %392, %134 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %394, %134 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %395, %134 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %396, %134 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %397, %134 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %399, %134 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %400, %134 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %401, %134 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %402, %134 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %404, %134 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %405, %134 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %406, %134 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %407, %134 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %409, %134 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %410, %134 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %411, %134 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %412, %134 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %414, %134 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %415, %134 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %416, %134 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %417, %134 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %419, %134 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %420, %134 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %421, %134 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %422, %134 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %424, %134 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %425, %134 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %426, %134 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %427, %134 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %429, %134 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %430, %134 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %431, %134 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %432, %134 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %434, %134 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %435, %134 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %436, %134 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %437, %134 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %439, %134 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %440, %134 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %441, %134 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %442, %134 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %444, %134 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %445, %134 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %446, %134 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %447, %134 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %449, %134 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %450, %134 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %451, %134 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %452, %134 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %454, %134 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %455, %134 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %456, %134 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %457, %134 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %459, %134 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %460, %134 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %461, %134 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %462, %134 ]
  %.not98 = icmp eq i64 %indvars.iv, 23, !dbg !33
  %200 = add i32 %135, 1, !dbg !33
  %201 = icmp ugt i32 %135, 2147483646, !dbg !33
  %202 = select i1 %201, i32 %200, i32 0, !dbg !33
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %203 = shl i32 %202, 12, !dbg !29
  %204 = sext i32 %203 to i64, !dbg !29
  %205 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %204, !dbg !29
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %80, !dbg !29
  %207 = ptrtoint ptr addrspace(3) %206 to i64, !dbg !29
  %208 = trunc i64 %207 to i32, !dbg !29
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %208) #1, !dbg !29
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !29
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !29
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !29
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !29
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %85, !dbg !29
  %215 = ptrtoint ptr addrspace(3) %214 to i64, !dbg !29
  %216 = trunc i64 %215 to i32, !dbg !29
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #1, !dbg !29
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !29
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !29
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !29
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !29
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %91, !dbg !29
  %223 = ptrtoint ptr addrspace(3) %222 to i64, !dbg !29
  %224 = trunc i64 %223 to i32, !dbg !29
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !29
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !29
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !29
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !29
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %93, !dbg !29
  %231 = ptrtoint ptr addrspace(3) %230 to i64, !dbg !29
  %232 = trunc i64 %231 to i32, !dbg !29
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %232) #1, !dbg !29
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !29
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !29
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !29
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !29
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %99, !dbg !29
  %239 = ptrtoint ptr addrspace(3) %238 to i64, !dbg !29
  %240 = trunc i64 %239 to i32, !dbg !29
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !29
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !29
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !29
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !29
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %101, !dbg !29
  %247 = ptrtoint ptr addrspace(3) %246 to i64, !dbg !29
  %248 = trunc i64 %247 to i32, !dbg !29
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %248) #1, !dbg !29
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !29
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !29
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !29
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !29
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %107, !dbg !29
  %255 = ptrtoint ptr addrspace(3) %254 to i64, !dbg !29
  %256 = trunc i64 %255 to i32, !dbg !29
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %256) #1, !dbg !29
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !29
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !29
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !29
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !29
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %205, i64 %109, !dbg !29
  %263 = ptrtoint ptr addrspace(3) %262 to i64, !dbg !29
  %264 = trunc i64 %263 to i32, !dbg !29
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %264) #1, !dbg !29
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !29
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !29
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !29
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !29
  %270 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %204, !dbg !32
  %271 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %270, i64 %116, !dbg !32
  %272 = ptrtoint ptr addrspace(3) %271 to i64, !dbg !32
  %273 = trunc i64 %272 to i32, !dbg !32
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #1, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !32
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !32
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %270, i64 %120, !dbg !32
  %280 = ptrtoint ptr addrspace(3) %279 to i64, !dbg !32
  %281 = trunc i64 %280 to i32, !dbg !32
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %281) #1, !dbg !32
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !32
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !32
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !32
  %287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %270, i64 %124, !dbg !32
  %288 = ptrtoint ptr addrspace(3) %287 to i64, !dbg !32
  %289 = trunc i64 %288 to i32, !dbg !32
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %289) #1, !dbg !32
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !32
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !32
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !32
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !32
  %295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %270, i64 %128, !dbg !32
  %296 = ptrtoint ptr addrspace(3) %295 to i64, !dbg !32
  %297 = trunc i64 %296 to i32, !dbg !32
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %297) #1, !dbg !32
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !32
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !32
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !32
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !32
  %303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %136, float %137, float %138, float %139, i32 %210, i32 %211, i32 %212, i32 %213, i32 %275, i32 %276) #1, !dbg !34
  %304 = extractvalue { float, float, float, float } %303, 0, !dbg !34
  %305 = extractvalue { float, float, float, float } %303, 1, !dbg !34
  %306 = extractvalue { float, float, float, float } %303, 2, !dbg !34
  %307 = extractvalue { float, float, float, float } %303, 3, !dbg !34
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %140, float %141, float %142, float %143, i32 %210, i32 %211, i32 %212, i32 %213, i32 %283, i32 %284) #1, !dbg !34
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !34
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !34
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !34
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !34
  %313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %144, float %145, float %146, float %147, i32 %210, i32 %211, i32 %212, i32 %213, i32 %291, i32 %292) #1, !dbg !34
  %314 = extractvalue { float, float, float, float } %313, 0, !dbg !34
  %315 = extractvalue { float, float, float, float } %313, 1, !dbg !34
  %316 = extractvalue { float, float, float, float } %313, 2, !dbg !34
  %317 = extractvalue { float, float, float, float } %313, 3, !dbg !34
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %148, float %149, float %150, float %151, i32 %210, i32 %211, i32 %212, i32 %213, i32 %299, i32 %300) #1, !dbg !34
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !34
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !34
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !34
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !34
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %152, float %153, float %154, float %155, i32 %226, i32 %227, i32 %228, i32 %229, i32 %275, i32 %276) #1, !dbg !34
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !34
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !34
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !34
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !34
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %226, i32 %227, i32 %228, i32 %229, i32 %283, i32 %284) #1, !dbg !34
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !34
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !34
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !34
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !34
  %333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %226, i32 %227, i32 %228, i32 %229, i32 %291, i32 %292) #1, !dbg !34
  %334 = extractvalue { float, float, float, float } %333, 0, !dbg !34
  %335 = extractvalue { float, float, float, float } %333, 1, !dbg !34
  %336 = extractvalue { float, float, float, float } %333, 2, !dbg !34
  %337 = extractvalue { float, float, float, float } %333, 3, !dbg !34
  %338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %226, i32 %227, i32 %228, i32 %229, i32 %299, i32 %300) #1, !dbg !34
  %339 = extractvalue { float, float, float, float } %338, 0, !dbg !34
  %340 = extractvalue { float, float, float, float } %338, 1, !dbg !34
  %341 = extractvalue { float, float, float, float } %338, 2, !dbg !34
  %342 = extractvalue { float, float, float, float } %338, 3, !dbg !34
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %242, i32 %243, i32 %244, i32 %245, i32 %275, i32 %276) #1, !dbg !34
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !34
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !34
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !34
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !34
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %242, i32 %243, i32 %244, i32 %245, i32 %283, i32 %284) #1, !dbg !34
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !34
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !34
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !34
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !34
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %242, i32 %243, i32 %244, i32 %245, i32 %291, i32 %292) #1, !dbg !34
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !34
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !34
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !34
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !34
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %242, i32 %243, i32 %244, i32 %245, i32 %299, i32 %300) #1, !dbg !34
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !34
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !34
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !34
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !34
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %258, i32 %259, i32 %260, i32 %261, i32 %275, i32 %276) #1, !dbg !34
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !34
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !34
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !34
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !34
  %368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %258, i32 %259, i32 %260, i32 %261, i32 %283, i32 %284) #1, !dbg !34
  %369 = extractvalue { float, float, float, float } %368, 0, !dbg !34
  %370 = extractvalue { float, float, float, float } %368, 1, !dbg !34
  %371 = extractvalue { float, float, float, float } %368, 2, !dbg !34
  %372 = extractvalue { float, float, float, float } %368, 3, !dbg !34
  %373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %258, i32 %259, i32 %260, i32 %261, i32 %291, i32 %292) #1, !dbg !34
  %374 = extractvalue { float, float, float, float } %373, 0, !dbg !34
  %375 = extractvalue { float, float, float, float } %373, 1, !dbg !34
  %376 = extractvalue { float, float, float, float } %373, 2, !dbg !34
  %377 = extractvalue { float, float, float, float } %373, 3, !dbg !34
  %378 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %196, float %197, float %198, float %199, i32 %258, i32 %259, i32 %260, i32 %261, i32 %299, i32 %300) #1, !dbg !34
  %379 = extractvalue { float, float, float, float } %378, 0, !dbg !34
  %380 = extractvalue { float, float, float, float } %378, 1, !dbg !34
  %381 = extractvalue { float, float, float, float } %378, 2, !dbg !34
  %382 = extractvalue { float, float, float, float } %378, 3, !dbg !34
  %383 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %304, float %305, float %306, float %307, i32 %218, i32 %219, i32 %220, i32 %221, i32 %277, i32 %278) #1, !dbg !34
  %384 = extractvalue { float, float, float, float } %383, 0, !dbg !34
  %385 = extractvalue { float, float, float, float } %383, 1, !dbg !34
  %386 = extractvalue { float, float, float, float } %383, 2, !dbg !34
  %387 = extractvalue { float, float, float, float } %383, 3, !dbg !34
  %388 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %218, i32 %219, i32 %220, i32 %221, i32 %285, i32 %286) #1, !dbg !34
  %389 = extractvalue { float, float, float, float } %388, 0, !dbg !34
  %390 = extractvalue { float, float, float, float } %388, 1, !dbg !34
  %391 = extractvalue { float, float, float, float } %388, 2, !dbg !34
  %392 = extractvalue { float, float, float, float } %388, 3, !dbg !34
  %393 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %218, i32 %219, i32 %220, i32 %221, i32 %293, i32 %294) #1, !dbg !34
  %394 = extractvalue { float, float, float, float } %393, 0, !dbg !34
  %395 = extractvalue { float, float, float, float } %393, 1, !dbg !34
  %396 = extractvalue { float, float, float, float } %393, 2, !dbg !34
  %397 = extractvalue { float, float, float, float } %393, 3, !dbg !34
  %398 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %218, i32 %219, i32 %220, i32 %221, i32 %301, i32 %302) #1, !dbg !34
  %399 = extractvalue { float, float, float, float } %398, 0, !dbg !34
  %400 = extractvalue { float, float, float, float } %398, 1, !dbg !34
  %401 = extractvalue { float, float, float, float } %398, 2, !dbg !34
  %402 = extractvalue { float, float, float, float } %398, 3, !dbg !34
  %403 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %234, i32 %235, i32 %236, i32 %237, i32 %277, i32 %278) #1, !dbg !34
  %404 = extractvalue { float, float, float, float } %403, 0, !dbg !34
  %405 = extractvalue { float, float, float, float } %403, 1, !dbg !34
  %406 = extractvalue { float, float, float, float } %403, 2, !dbg !34
  %407 = extractvalue { float, float, float, float } %403, 3, !dbg !34
  %408 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %234, i32 %235, i32 %236, i32 %237, i32 %285, i32 %286) #1, !dbg !34
  %409 = extractvalue { float, float, float, float } %408, 0, !dbg !34
  %410 = extractvalue { float, float, float, float } %408, 1, !dbg !34
  %411 = extractvalue { float, float, float, float } %408, 2, !dbg !34
  %412 = extractvalue { float, float, float, float } %408, 3, !dbg !34
  %413 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %234, i32 %235, i32 %236, i32 %237, i32 %293, i32 %294) #1, !dbg !34
  %414 = extractvalue { float, float, float, float } %413, 0, !dbg !34
  %415 = extractvalue { float, float, float, float } %413, 1, !dbg !34
  %416 = extractvalue { float, float, float, float } %413, 2, !dbg !34
  %417 = extractvalue { float, float, float, float } %413, 3, !dbg !34
  %418 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %234, i32 %235, i32 %236, i32 %237, i32 %301, i32 %302) #1, !dbg !34
  %419 = extractvalue { float, float, float, float } %418, 0, !dbg !34
  %420 = extractvalue { float, float, float, float } %418, 1, !dbg !34
  %421 = extractvalue { float, float, float, float } %418, 2, !dbg !34
  %422 = extractvalue { float, float, float, float } %418, 3, !dbg !34
  %423 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %250, i32 %251, i32 %252, i32 %253, i32 %277, i32 %278) #1, !dbg !34
  %424 = extractvalue { float, float, float, float } %423, 0, !dbg !34
  %425 = extractvalue { float, float, float, float } %423, 1, !dbg !34
  %426 = extractvalue { float, float, float, float } %423, 2, !dbg !34
  %427 = extractvalue { float, float, float, float } %423, 3, !dbg !34
  %428 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %250, i32 %251, i32 %252, i32 %253, i32 %285, i32 %286) #1, !dbg !34
  %429 = extractvalue { float, float, float, float } %428, 0, !dbg !34
  %430 = extractvalue { float, float, float, float } %428, 1, !dbg !34
  %431 = extractvalue { float, float, float, float } %428, 2, !dbg !34
  %432 = extractvalue { float, float, float, float } %428, 3, !dbg !34
  %433 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %250, i32 %251, i32 %252, i32 %253, i32 %293, i32 %294) #1, !dbg !34
  %434 = extractvalue { float, float, float, float } %433, 0, !dbg !34
  %435 = extractvalue { float, float, float, float } %433, 1, !dbg !34
  %436 = extractvalue { float, float, float, float } %433, 2, !dbg !34
  %437 = extractvalue { float, float, float, float } %433, 3, !dbg !34
  %438 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %359, float %360, float %361, float %362, i32 %250, i32 %251, i32 %252, i32 %253, i32 %301, i32 %302) #1, !dbg !34
  %439 = extractvalue { float, float, float, float } %438, 0, !dbg !34
  %440 = extractvalue { float, float, float, float } %438, 1, !dbg !34
  %441 = extractvalue { float, float, float, float } %438, 2, !dbg !34
  %442 = extractvalue { float, float, float, float } %438, 3, !dbg !34
  %443 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %364, float %365, float %366, float %367, i32 %266, i32 %267, i32 %268, i32 %269, i32 %277, i32 %278) #1, !dbg !34
  %444 = extractvalue { float, float, float, float } %443, 0, !dbg !34
  %445 = extractvalue { float, float, float, float } %443, 1, !dbg !34
  %446 = extractvalue { float, float, float, float } %443, 2, !dbg !34
  %447 = extractvalue { float, float, float, float } %443, 3, !dbg !34
  %448 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %369, float %370, float %371, float %372, i32 %266, i32 %267, i32 %268, i32 %269, i32 %285, i32 %286) #1, !dbg !34
  %449 = extractvalue { float, float, float, float } %448, 0, !dbg !34
  %450 = extractvalue { float, float, float, float } %448, 1, !dbg !34
  %451 = extractvalue { float, float, float, float } %448, 2, !dbg !34
  %452 = extractvalue { float, float, float, float } %448, 3, !dbg !34
  %453 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %374, float %375, float %376, float %377, i32 %266, i32 %267, i32 %268, i32 %269, i32 %293, i32 %294) #1, !dbg !34
  %454 = extractvalue { float, float, float, float } %453, 0, !dbg !34
  %455 = extractvalue { float, float, float, float } %453, 1, !dbg !34
  %456 = extractvalue { float, float, float, float } %453, 2, !dbg !34
  %457 = extractvalue { float, float, float, float } %453, 3, !dbg !34
  %458 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %379, float %380, float %381, float %382, i32 %266, i32 %267, i32 %268, i32 %269, i32 %301, i32 %302) #1, !dbg !34
  %459 = extractvalue { float, float, float, float } %458, 0, !dbg !34
  %460 = extractvalue { float, float, float, float } %458, 1, !dbg !34
  %461 = extractvalue { float, float, float, float } %458, 2, !dbg !34
  %462 = extractvalue { float, float, float, float } %458, 3, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %463 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !35
  %464 = or disjoint i64 %463, %129, !dbg !36
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %464, !dbg !28
  %gep296 = getelementptr bfloat, ptr addrspace(1) %invariant.gep295, i64 %464, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %465 = select i1 %.not98, i32 0, i32 16, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %52, ptr addrspace(1) %gep, i32 %465) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %59, ptr addrspace(1) %gep296, i32 %465) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep298 = getelementptr bfloat, ptr addrspace(1) %invariant.gep297, i64 %464, !dbg !31
  %gep300 = getelementptr bfloat, ptr addrspace(1) %invariant.gep299, i64 %464, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %gep298, i32 %465) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %67, ptr addrspace(1) %gep300, i32 %465) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !33
  br i1 %exitcond.not, label %466, label %134, !dbg !33

466:                                              ; preds = %134
  %467 = and i32 %26, 120, !dbg !19
  %468 = or disjoint i32 %30, %467, !dbg !22
  %469 = lshr i32 %15, 4, !dbg !19
  %470 = and i32 %469, 15, !dbg !19
  %471 = or disjoint i32 %470, %14, !dbg !20
  %472 = or disjoint i32 %471, 64, !dbg !20
  %473 = or disjoint i32 %471, 48, !dbg !20
  %474 = or disjoint i32 %471, 32, !dbg !20
  %475 = or disjoint i32 %471, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %476 = icmp slt i32 %471, 77, !dbg !37
  %477 = icmp slt i32 %475, 77, !dbg !37
  %478 = icmp slt i32 %474, 77, !dbg !37
  %479 = icmp slt i32 %473, 77, !dbg !37
  %480 = icmp slt i32 %472, 77, !dbg !37
  %481 = icmp slt i32 %14, 0, !dbg !37
  %482 = icmp slt i32 %468, 768, !dbg !38
  %483 = and i1 %476, %482, !dbg !39
  %484 = and i1 %477, %482, !dbg !39
  %485 = and i1 %478, %482, !dbg !39
  %486 = and i1 %479, %482, !dbg !39
  %487 = and i1 %480, %482, !dbg !39
  %488 = and i1 %481, %482, !dbg !39
  %489 = mul i32 %471, 768, !dbg !40
  %490 = mul i32 %475, 768, !dbg !40
  %491 = mul i32 %474, 768, !dbg !40
  %492 = mul i32 %473, 768, !dbg !40
  %493 = mul i32 %472, 768, !dbg !40
  %494 = add i32 %489, 61440, !dbg !40
  %495 = add i32 %489, 73728, !dbg !40
  %496 = add i32 %489, 86016, !dbg !40
  %497 = add i32 %489, %468, !dbg !41
  %498 = add i32 %490, %468, !dbg !41
  %499 = add i32 %491, %468, !dbg !41
  %500 = add i32 %492, %468, !dbg !41
  %501 = add i32 %493, %468, !dbg !41
  %502 = add i32 %494, %468, !dbg !41
  %503 = add i32 %495, %468, !dbg !41
  %504 = add i32 %496, %468, !dbg !41
  %505 = sext i32 %497 to i64, !dbg !42
  %506 = getelementptr bfloat, ptr addrspace(1) %2, i64 %505, !dbg !42
  %507 = sext i32 %498 to i64, !dbg !42
  %508 = getelementptr bfloat, ptr addrspace(1) %2, i64 %507, !dbg !42
  %509 = sext i32 %499 to i64, !dbg !42
  %510 = getelementptr bfloat, ptr addrspace(1) %2, i64 %509, !dbg !42
  %511 = sext i32 %500 to i64, !dbg !42
  %512 = getelementptr bfloat, ptr addrspace(1) %2, i64 %511, !dbg !42
  %513 = sext i32 %501 to i64, !dbg !42
  %514 = getelementptr bfloat, ptr addrspace(1) %2, i64 %513, !dbg !42
  %515 = sext i32 %502 to i64, !dbg !42
  %516 = getelementptr bfloat, ptr addrspace(1) %2, i64 %515, !dbg !42
  %517 = sext i32 %503 to i64, !dbg !42
  %518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %517, !dbg !42
  %519 = sext i32 %504 to i64, !dbg !42
  %520 = getelementptr bfloat, ptr addrspace(1) %2, i64 %519, !dbg !42
  %521 = fptrunc float %384 to bfloat, !dbg !43
  %522 = fptrunc float %385 to bfloat, !dbg !43
  %523 = fptrunc float %386 to bfloat, !dbg !43
  %524 = fptrunc float %387 to bfloat, !dbg !43
  %525 = fptrunc float %389 to bfloat, !dbg !43
  %526 = fptrunc float %390 to bfloat, !dbg !43
  %527 = fptrunc float %391 to bfloat, !dbg !43
  %528 = fptrunc float %392 to bfloat, !dbg !43
  %529 = fptrunc float %394 to bfloat, !dbg !43
  %530 = fptrunc float %395 to bfloat, !dbg !43
  %531 = fptrunc float %396 to bfloat, !dbg !43
  %532 = fptrunc float %397 to bfloat, !dbg !43
  %533 = fptrunc float %399 to bfloat, !dbg !43
  %534 = fptrunc float %400 to bfloat, !dbg !43
  %535 = fptrunc float %401 to bfloat, !dbg !43
  %536 = fptrunc float %402 to bfloat, !dbg !43
  %537 = fptrunc float %404 to bfloat, !dbg !43
  %538 = fptrunc float %405 to bfloat, !dbg !43
  %539 = fptrunc float %406 to bfloat, !dbg !43
  %540 = fptrunc float %407 to bfloat, !dbg !43
  %541 = fptrunc float %409 to bfloat, !dbg !43
  %542 = fptrunc float %410 to bfloat, !dbg !43
  %543 = fptrunc float %411 to bfloat, !dbg !43
  %544 = fptrunc float %412 to bfloat, !dbg !43
  %545 = fptrunc float %414 to bfloat, !dbg !43
  %546 = fptrunc float %415 to bfloat, !dbg !43
  %547 = fptrunc float %416 to bfloat, !dbg !43
  %548 = fptrunc float %417 to bfloat, !dbg !43
  %549 = fptrunc float %419 to bfloat, !dbg !43
  %550 = fptrunc float %420 to bfloat, !dbg !43
  %551 = fptrunc float %421 to bfloat, !dbg !43
  %552 = fptrunc float %422 to bfloat, !dbg !43
  %553 = fptrunc float %424 to bfloat, !dbg !43
  %554 = fptrunc float %425 to bfloat, !dbg !43
  %555 = fptrunc float %426 to bfloat, !dbg !43
  %556 = fptrunc float %427 to bfloat, !dbg !43
  %557 = fptrunc float %429 to bfloat, !dbg !43
  %558 = fptrunc float %430 to bfloat, !dbg !43
  %559 = fptrunc float %431 to bfloat, !dbg !43
  %560 = fptrunc float %432 to bfloat, !dbg !43
  %561 = fptrunc float %434 to bfloat, !dbg !43
  %562 = fptrunc float %435 to bfloat, !dbg !43
  %563 = fptrunc float %436 to bfloat, !dbg !43
  %564 = fptrunc float %437 to bfloat, !dbg !43
  %565 = fptrunc float %439 to bfloat, !dbg !43
  %566 = fptrunc float %440 to bfloat, !dbg !43
  %567 = fptrunc float %441 to bfloat, !dbg !43
  %568 = fptrunc float %442 to bfloat, !dbg !43
  %569 = fptrunc float %444 to bfloat, !dbg !43
  %570 = fptrunc float %445 to bfloat, !dbg !43
  %571 = fptrunc float %446 to bfloat, !dbg !43
  %572 = fptrunc float %447 to bfloat, !dbg !43
  %573 = fptrunc float %449 to bfloat, !dbg !43
  %574 = fptrunc float %450 to bfloat, !dbg !43
  %575 = fptrunc float %451 to bfloat, !dbg !43
  %576 = fptrunc float %452 to bfloat, !dbg !43
  %577 = fptrunc float %454 to bfloat, !dbg !43
  %578 = fptrunc float %455 to bfloat, !dbg !43
  %579 = fptrunc float %456 to bfloat, !dbg !43
  %580 = fptrunc float %457 to bfloat, !dbg !43
  %581 = fptrunc float %459 to bfloat, !dbg !43
  %582 = fptrunc float %460 to bfloat, !dbg !43
  %583 = fptrunc float %461 to bfloat, !dbg !43
  %584 = fptrunc float %462 to bfloat, !dbg !43
  %585 = shl i32 %15, 1, !dbg !43
  %586 = and i32 %585, 6, !dbg !43
  %587 = shl i32 %15, 5, !dbg !43
  %588 = and i32 %587, 384, !dbg !43
  %589 = or disjoint i32 %588, %586, !dbg !43
  %590 = shl nuw nsw i32 %17, 5, !dbg !43
  %591 = or disjoint i32 %589, %590, !dbg !43
  %592 = shl nuw nsw i32 %21, 4, !dbg !43
  %593 = or disjoint i32 %591, %592, !dbg !43
  %594 = and i32 %18, 24, !dbg !43
  %595 = or disjoint i32 %594, %593, !dbg !43
  %596 = and i32 %26, 2040, !dbg !43
  %597 = lshr i32 %593, 4, !dbg !43
  %598 = add nuw nsw i32 %595, %597, !dbg !43
  %599 = zext nneg i32 %598 to i64, !dbg !43
  %600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %599, !dbg !43
  %601 = bitcast bfloat %521 to i16, !dbg !43
  %602 = bitcast bfloat %522 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %600, i16 %601, i16 %602, i1 true) #1, !dbg !43
  %603 = or disjoint i32 %595, 1024, !dbg !43
  %604 = lshr i32 %603, 4, !dbg !43
  %605 = and i32 %604, 268435448, !dbg !43
  %606 = add nuw nsw i32 %605, %603, !dbg !43
  %607 = zext nneg i32 %606 to i64, !dbg !43
  %608 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %607, !dbg !43
  %609 = bitcast bfloat %523 to i16, !dbg !43
  %610 = bitcast bfloat %524 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %608, i16 %609, i16 %610, i1 true) #1, !dbg !43
  %611 = or disjoint i32 %595, 32, !dbg !43
  %612 = add nuw nsw i32 %611, %597, !dbg !43
  %613 = zext nneg i32 %612 to i64, !dbg !43
  %614 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %613, !dbg !43
  %615 = bitcast bfloat %525 to i16, !dbg !43
  %616 = bitcast bfloat %526 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %615, i16 %616, i1 true) #1, !dbg !43
  %617 = or disjoint i32 %595, 1056, !dbg !43
  %618 = lshr i32 %617, 4, !dbg !43
  %619 = and i32 %618, 268435448, !dbg !43
  %620 = add nuw nsw i32 %619, %617, !dbg !43
  %621 = zext nneg i32 %620 to i64, !dbg !43
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %621, !dbg !43
  %623 = bitcast bfloat %527 to i16, !dbg !43
  %624 = bitcast bfloat %528 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %623, i16 %624, i1 true) #1, !dbg !43
  %625 = or disjoint i32 %595, 64, !dbg !43
  %626 = add nuw nsw i32 %625, %597, !dbg !43
  %627 = zext nneg i32 %626 to i64, !dbg !43
  %628 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %627, !dbg !43
  %629 = bitcast bfloat %529 to i16, !dbg !43
  %630 = bitcast bfloat %530 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %629, i16 %630, i1 true) #1, !dbg !43
  %631 = or disjoint i32 %595, 1088, !dbg !43
  %632 = lshr i32 %631, 4, !dbg !43
  %633 = and i32 %632, 268435448, !dbg !43
  %634 = add nuw nsw i32 %633, %631, !dbg !43
  %635 = zext nneg i32 %634 to i64, !dbg !43
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %635, !dbg !43
  %637 = bitcast bfloat %531 to i16, !dbg !43
  %638 = bitcast bfloat %532 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %637, i16 %638, i1 true) #1, !dbg !43
  %639 = or disjoint i32 %595, 96, !dbg !43
  %640 = add nuw nsw i32 %639, %597, !dbg !43
  %641 = zext nneg i32 %640 to i64, !dbg !43
  %642 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %641, !dbg !43
  %643 = bitcast bfloat %533 to i16, !dbg !43
  %644 = bitcast bfloat %534 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %642, i16 %643, i16 %644, i1 true) #1, !dbg !43
  %645 = or disjoint i32 %595, 1120, !dbg !43
  %646 = lshr i32 %645, 4, !dbg !43
  %647 = and i32 %646, 268435448, !dbg !43
  %648 = add nuw nsw i32 %647, %645, !dbg !43
  %649 = zext nneg i32 %648 to i64, !dbg !43
  %650 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %649, !dbg !43
  %651 = bitcast bfloat %535 to i16, !dbg !43
  %652 = bitcast bfloat %536 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %651, i16 %652, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %653 = lshr i32 %26, 4, !dbg !43
  %654 = and i32 %653, 120, !dbg !43
  %655 = add nuw nsw i32 %654, %596, !dbg !43
  %656 = zext nneg i32 %655 to i64, !dbg !43
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %656, !dbg !43
  %658 = load <4 x i32>, ptr addrspace(3) %657, align 16, !dbg !43
  %659 = or disjoint i32 %596, 2048, !dbg !43
  %660 = lshr i32 %659, 4, !dbg !43
  %661 = and i32 %660, 248, !dbg !43
  %662 = add nuw nsw i32 %661, %659, !dbg !43
  %663 = zext nneg i32 %662 to i64, !dbg !43
  %664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %663, !dbg !43
  %665 = load <4 x i32>, ptr addrspace(3) %664, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %666 = bitcast bfloat %537 to i16, !dbg !43
  %667 = bitcast bfloat %538 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %600, i16 %666, i16 %667, i1 true) #1, !dbg !43
  %668 = bitcast bfloat %539 to i16, !dbg !43
  %669 = bitcast bfloat %540 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %608, i16 %668, i16 %669, i1 true) #1, !dbg !43
  %670 = bitcast bfloat %541 to i16, !dbg !43
  %671 = bitcast bfloat %542 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %670, i16 %671, i1 true) #1, !dbg !43
  %672 = bitcast bfloat %543 to i16, !dbg !43
  %673 = bitcast bfloat %544 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %672, i16 %673, i1 true) #1, !dbg !43
  %674 = bitcast bfloat %545 to i16, !dbg !43
  %675 = bitcast bfloat %546 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %674, i16 %675, i1 true) #1, !dbg !43
  %676 = bitcast bfloat %547 to i16, !dbg !43
  %677 = bitcast bfloat %548 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %676, i16 %677, i1 true) #1, !dbg !43
  %678 = bitcast bfloat %549 to i16, !dbg !43
  %679 = bitcast bfloat %550 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %642, i16 %678, i16 %679, i1 true) #1, !dbg !43
  %680 = bitcast bfloat %551 to i16, !dbg !43
  %681 = bitcast bfloat %552 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %680, i16 %681, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %682 = load <4 x i32>, ptr addrspace(3) %657, align 16, !dbg !43
  %683 = load <4 x i32>, ptr addrspace(3) %664, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %684 = bitcast bfloat %553 to i16, !dbg !43
  %685 = bitcast bfloat %554 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %600, i16 %684, i16 %685, i1 true) #1, !dbg !43
  %686 = bitcast bfloat %555 to i16, !dbg !43
  %687 = bitcast bfloat %556 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %608, i16 %686, i16 %687, i1 true) #1, !dbg !43
  %688 = bitcast bfloat %557 to i16, !dbg !43
  %689 = bitcast bfloat %558 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %688, i16 %689, i1 true) #1, !dbg !43
  %690 = bitcast bfloat %559 to i16, !dbg !43
  %691 = bitcast bfloat %560 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %690, i16 %691, i1 true) #1, !dbg !43
  %692 = bitcast bfloat %561 to i16, !dbg !43
  %693 = bitcast bfloat %562 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %692, i16 %693, i1 true) #1, !dbg !43
  %694 = bitcast bfloat %563 to i16, !dbg !43
  %695 = bitcast bfloat %564 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %694, i16 %695, i1 true) #1, !dbg !43
  %696 = bitcast bfloat %565 to i16, !dbg !43
  %697 = bitcast bfloat %566 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %642, i16 %696, i16 %697, i1 true) #1, !dbg !43
  %698 = bitcast bfloat %567 to i16, !dbg !43
  %699 = bitcast bfloat %568 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %698, i16 %699, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %700 = load <4 x i32>, ptr addrspace(3) %657, align 16, !dbg !43
  %701 = load <4 x i32>, ptr addrspace(3) %664, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %702 = bitcast bfloat %569 to i16, !dbg !43
  %703 = bitcast bfloat %570 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %600, i16 %702, i16 %703, i1 true) #1, !dbg !43
  %704 = bitcast bfloat %571 to i16, !dbg !43
  %705 = bitcast bfloat %572 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %608, i16 %704, i16 %705, i1 true) #1, !dbg !43
  %706 = bitcast bfloat %573 to i16, !dbg !43
  %707 = bitcast bfloat %574 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %706, i16 %707, i1 true) #1, !dbg !43
  %708 = bitcast bfloat %575 to i16, !dbg !43
  %709 = bitcast bfloat %576 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %622, i16 %708, i16 %709, i1 true) #1, !dbg !43
  %710 = bitcast bfloat %577 to i16, !dbg !43
  %711 = bitcast bfloat %578 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %710, i16 %711, i1 true) #1, !dbg !43
  %712 = bitcast bfloat %579 to i16, !dbg !43
  %713 = bitcast bfloat %580 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %712, i16 %713, i1 true) #1, !dbg !43
  %714 = bitcast bfloat %581 to i16, !dbg !43
  %715 = bitcast bfloat %582 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %642, i16 %714, i16 %715, i1 true) #1, !dbg !43
  %716 = bitcast bfloat %583 to i16, !dbg !43
  %717 = bitcast bfloat %584 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %716, i16 %717, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %718 = load <4 x i32>, ptr addrspace(3) %657, align 16, !dbg !43
  %719 = load <4 x i32>, ptr addrspace(3) %664, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %658, i64 0, !dbg !43
  %.extract103 = extractelement <4 x i32> %658, i64 1, !dbg !43
  %.extract105 = extractelement <4 x i32> %658, i64 2, !dbg !43
  %.extract107 = extractelement <4 x i32> %658, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %506, i1 %483) #1, !dbg !43
  %.extract109 = extractelement <4 x i32> %665, i64 0, !dbg !43
  %.extract111 = extractelement <4 x i32> %665, i64 1, !dbg !43
  %.extract113 = extractelement <4 x i32> %665, i64 2, !dbg !43
  %.extract115 = extractelement <4 x i32> %665, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %508, i1 %484) #1, !dbg !43
  %.extract117 = extractelement <4 x i32> %682, i64 0, !dbg !43
  %.extract119 = extractelement <4 x i32> %682, i64 1, !dbg !43
  %.extract121 = extractelement <4 x i32> %682, i64 2, !dbg !43
  %.extract123 = extractelement <4 x i32> %682, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract117, i32 %.extract119, i32 %.extract121, i32 %.extract123, ptr addrspace(1) %510, i1 %485) #1, !dbg !43
  %.extract125 = extractelement <4 x i32> %683, i64 0, !dbg !43
  %.extract127 = extractelement <4 x i32> %683, i64 1, !dbg !43
  %.extract129 = extractelement <4 x i32> %683, i64 2, !dbg !43
  %.extract131 = extractelement <4 x i32> %683, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract125, i32 %.extract127, i32 %.extract129, i32 %.extract131, ptr addrspace(1) %512, i1 %486) #1, !dbg !43
  %.extract133 = extractelement <4 x i32> %700, i64 0, !dbg !43
  %.extract135 = extractelement <4 x i32> %700, i64 1, !dbg !43
  %.extract137 = extractelement <4 x i32> %700, i64 2, !dbg !43
  %.extract139 = extractelement <4 x i32> %700, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract133, i32 %.extract135, i32 %.extract137, i32 %.extract139, ptr addrspace(1) %514, i1 %487) #1, !dbg !43
  %.extract141 = extractelement <4 x i32> %701, i64 0, !dbg !43
  %.extract143 = extractelement <4 x i32> %701, i64 1, !dbg !43
  %.extract145 = extractelement <4 x i32> %701, i64 2, !dbg !43
  %.extract147 = extractelement <4 x i32> %701, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract141, i32 %.extract143, i32 %.extract145, i32 %.extract147, ptr addrspace(1) %516, i1 %488) #1, !dbg !43
  %.extract149 = extractelement <4 x i32> %718, i64 0, !dbg !43
  %.extract151 = extractelement <4 x i32> %718, i64 1, !dbg !43
  %.extract153 = extractelement <4 x i32> %718, i64 2, !dbg !43
  %.extract155 = extractelement <4 x i32> %718, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract149, i32 %.extract151, i32 %.extract153, i32 %.extract155, ptr addrspace(1) %518, i1 %488) #1, !dbg !43
  %.extract157 = extractelement <4 x i32> %719, i64 0, !dbg !43
  %.extract159 = extractelement <4 x i32> %719, i64 1, !dbg !43
  %.extract161 = extractelement <4 x i32> %719, i64 2, !dbg !43
  %.extract163 = extractelement <4 x i32> %719, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract159, i32 %.extract161, i32 %.extract163, ptr addrspace(1) %520, i1 %488) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7lq2sodcc3wymtrbrphnutwo4vxvnebghc5fjer27r3chufxfwm.py", directory: "/tmp/torchinductor_root/7l")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 56, column: 24, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 64, column: 26, scope: !6)
!34 = !DILocation(line: 78, column: 25, scope: !6)
!35 = !DILocation(line: 66, column: 50, scope: !6)
!36 = !DILocation(line: 66, column: 42, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 25, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
