; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 3, !dbg !11
  %21 = and i32 %20, 1016, !dbg !11
  %22 = mul i32 %16, 3072, !dbg !12
  %23 = or disjoint i32 %21, %22
  %24 = sext i32 %23 to i64, !dbg !13
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !13
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %17) #5, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !14
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !14
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !14
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !14
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !14
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !14
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !14
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !14
  %35 = extractelement <2 x bfloat> %28, i64 0, !dbg !14
  %36 = extractelement <2 x bfloat> %28, i64 1, !dbg !14
  %37 = extractelement <2 x bfloat> %30, i64 0, !dbg !14
  %38 = extractelement <2 x bfloat> %30, i64 1, !dbg !14
  %39 = extractelement <2 x bfloat> %32, i64 0, !dbg !14
  %40 = extractelement <2 x bfloat> %32, i64 1, !dbg !14
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !14
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !14
  %43 = fpext bfloat %35 to float, !dbg !15
  %44 = fpext bfloat %36 to float, !dbg !15
  %45 = fpext bfloat %37 to float, !dbg !15
  %46 = fpext bfloat %38 to float, !dbg !15
  %47 = fpext bfloat %39 to float, !dbg !15
  %48 = fpext bfloat %40 to float, !dbg !15
  %49 = fpext bfloat %41 to float, !dbg !15
  %50 = fpext bfloat %42 to float, !dbg !15
  %51 = select i1 %17, float %43, float 0.000000e+00, !dbg !16
  %52 = select i1 %17, float %44, float 0.000000e+00, !dbg !16
  %53 = select i1 %17, float %45, float 0.000000e+00, !dbg !16
  %54 = select i1 %17, float %46, float 0.000000e+00, !dbg !16
  %55 = select i1 %17, float %47, float 0.000000e+00, !dbg !16
  %56 = select i1 %17, float %48, float 0.000000e+00, !dbg !16
  %57 = select i1 %17, float %49, float 0.000000e+00, !dbg !16
  %58 = select i1 %17, float %50, float 0.000000e+00, !dbg !16
  %59 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %60 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %61 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %62 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %63 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %64 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %65 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %66 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !17
  br label %._crit_edge, !dbg !18

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %67 = phi float [ %59, %.peel.begin ], [ %192, %._crit_edge ]
  %68 = phi float [ %60, %.peel.begin ], [ %193, %._crit_edge ]
  %69 = phi float [ %61, %.peel.begin ], [ %194, %._crit_edge ]
  %70 = phi float [ %62, %.peel.begin ], [ %195, %._crit_edge ]
  %71 = phi float [ %63, %.peel.begin ], [ %196, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %.peel.begin ], [ %184, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %.peel.begin ], [ %185, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %.peel.begin ], [ %186, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %.peel.begin ], [ %187, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %.peel.begin ], [ %188, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ %51, %.peel.begin ], [ %176, %._crit_edge ]
  %84 = phi float [ %52, %.peel.begin ], [ %177, %._crit_edge ]
  %85 = phi float [ %53, %.peel.begin ], [ %178, %._crit_edge ]
  %86 = phi float [ %54, %.peel.begin ], [ %179, %._crit_edge ]
  %87 = phi float [ %55, %.peel.begin ], [ %180, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %92 = add i32 %23, %91, !dbg !19
  %93 = sext i32 %92 to i64, !dbg !13
  %94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %93, !dbg !13
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %94, i1 %17) #5, !dbg !14
  %96 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !14
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !14
  %98 = extractelement <2 x bfloat> %97, i64 1, !dbg !14
  %99 = fpext bfloat %98 to float, !dbg !15
  %100 = extractelement <2 x bfloat> %97, i64 0, !dbg !14
  %101 = fpext bfloat %100 to float, !dbg !15
  %102 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !14
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !14
  %104 = extractelement <2 x bfloat> %103, i64 1, !dbg !14
  %105 = fpext bfloat %104 to float, !dbg !15
  %106 = extractelement <2 x bfloat> %103, i64 0, !dbg !14
  %107 = fpext bfloat %106 to float, !dbg !15
  %108 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !14
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !14
  %110 = extractelement <2 x bfloat> %109, i64 1, !dbg !14
  %111 = fpext bfloat %110 to float, !dbg !15
  %112 = extractelement <2 x bfloat> %109, i64 0, !dbg !14
  %113 = fpext bfloat %112 to float, !dbg !15
  %114 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !14
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !14
  %116 = extractelement <2 x bfloat> %115, i64 1, !dbg !14
  %117 = fpext bfloat %116 to float, !dbg !15
  %118 = extractelement <2 x bfloat> %115, i64 0, !dbg !14
  %119 = fpext bfloat %118 to float, !dbg !15
  %120 = fsub float %119, %83, !dbg !20
  %121 = fsub float %117, %84, !dbg !20
  %122 = fsub float %113, %85, !dbg !20
  %123 = fsub float %111, %86, !dbg !20
  %124 = fsub float %107, %87, !dbg !20
  %125 = fsub float %105, %88, !dbg !20
  %126 = fsub float %101, %89, !dbg !20
  %127 = fsub float %99, %90, !dbg !20
  %128 = fadd float %67, 1.000000e+00, !dbg !24
  %129 = fadd float %68, 1.000000e+00, !dbg !24
  %130 = fadd float %69, 1.000000e+00, !dbg !24
  %131 = fadd float %70, 1.000000e+00, !dbg !24
  %132 = fadd float %71, 1.000000e+00, !dbg !24
  %133 = fadd float %72, 1.000000e+00, !dbg !24
  %134 = fadd float %73, 1.000000e+00, !dbg !24
  %135 = fadd float %74, 1.000000e+00, !dbg !24
  %136 = tail call float @llvm.nvvm.div.full(float %120, float %128), !dbg !25
  %137 = tail call float @llvm.nvvm.div.full(float %121, float %129), !dbg !25
  %138 = tail call float @llvm.nvvm.div.full(float %122, float %130), !dbg !25
  %139 = tail call float @llvm.nvvm.div.full(float %123, float %131), !dbg !25
  %140 = tail call float @llvm.nvvm.div.full(float %124, float %132), !dbg !25
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !25
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !25
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !25
  %144 = fadd float %83, %136, !dbg !26
  %145 = fadd float %84, %137, !dbg !26
  %146 = fadd float %85, %138, !dbg !26
  %147 = fadd float %86, %139, !dbg !26
  %148 = fadd float %87, %140, !dbg !26
  %149 = fadd float %88, %141, !dbg !26
  %150 = fadd float %89, %142, !dbg !26
  %151 = fadd float %90, %143, !dbg !26
  %152 = fsub float %119, %144, !dbg !27
  %153 = fsub float %117, %145, !dbg !27
  %154 = fsub float %113, %146, !dbg !27
  %155 = fsub float %111, %147, !dbg !27
  %156 = fsub float %107, %148, !dbg !27
  %157 = fsub float %105, %149, !dbg !27
  %158 = fsub float %101, %150, !dbg !27
  %159 = fsub float %99, %151, !dbg !27
  %160 = fmul float %120, %152, !dbg !28
  %161 = fmul float %121, %153, !dbg !28
  %162 = fmul float %122, %154, !dbg !28
  %163 = fmul float %123, %155, !dbg !28
  %164 = fmul float %124, %156, !dbg !28
  %165 = fmul float %125, %157, !dbg !28
  %166 = fmul float %126, %158, !dbg !28
  %167 = fmul float %127, %159, !dbg !28
  %168 = fadd float %75, %160, !dbg !29
  %169 = fadd float %76, %161, !dbg !29
  %170 = fadd float %77, %162, !dbg !29
  %171 = fadd float %78, %163, !dbg !29
  %172 = fadd float %79, %164, !dbg !29
  %173 = fadd float %80, %165, !dbg !29
  %174 = fadd float %81, %166, !dbg !29
  %175 = fadd float %82, %167, !dbg !29
  %176 = select i1 %17, float %144, float %83, !dbg !16
  %177 = select i1 %17, float %145, float %84, !dbg !16
  %178 = select i1 %17, float %146, float %85, !dbg !16
  %179 = select i1 %17, float %147, float %86, !dbg !16
  %180 = select i1 %17, float %148, float %87, !dbg !16
  %181 = select i1 %17, float %149, float %88, !dbg !16
  %182 = select i1 %17, float %150, float %89, !dbg !16
  %183 = select i1 %17, float %151, float %90, !dbg !16
  %184 = select i1 %17, float %168, float %75, !dbg !30
  %185 = select i1 %17, float %169, float %76, !dbg !30
  %186 = select i1 %17, float %170, float %77, !dbg !30
  %187 = select i1 %17, float %171, float %78, !dbg !30
  %188 = select i1 %17, float %172, float %79, !dbg !30
  %189 = select i1 %17, float %173, float %80, !dbg !30
  %190 = select i1 %17, float %174, float %81, !dbg !30
  %191 = select i1 %17, float %175, float %82, !dbg !30
  %192 = select i1 %17, float %128, float %67, !dbg !17
  %193 = select i1 %17, float %129, float %68, !dbg !17
  %194 = select i1 %17, float %130, float %69, !dbg !17
  %195 = select i1 %17, float %131, float %70, !dbg !17
  %196 = select i1 %17, float %132, float %71, !dbg !17
  %197 = select i1 %17, float %133, float %72, !dbg !17
  %198 = select i1 %17, float %134, float %73, !dbg !17
  %199 = select i1 %17, float %135, float %74, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !18
  %200 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !18
  br i1 %200, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !18, !llvm.loop !31

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %201 = fadd float %184, %185, !dbg !11
  %202 = lshr i32 %18, 5, !dbg !11
  %203 = fsub float %177, %176, !dbg !33
  %204 = fadd float %192, %193, !dbg !36
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !37
  %206 = tail call float @llvm.nvvm.div.full(float %193, float %204), !dbg !38
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !39
  %208 = fmul float %203, %207, !dbg !40
  %209 = fadd float %176, %208, !dbg !41
  %210 = fmul float %203, %203, !dbg !42
  %211 = fmul float %210, %192, !dbg !43
  %212 = fmul float %211, %207, !dbg !44
  %213 = fadd float %201, %212, !dbg !45
  %214 = fsub float %178, %209, !dbg !33
  %215 = fadd float %194, %204, !dbg !36
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !37
  %217 = tail call float @llvm.nvvm.div.full(float %194, float %215), !dbg !38
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !39
  %219 = fmul float %218, %214, !dbg !40
  %220 = fadd float %209, %219, !dbg !41
  %221 = fadd float %186, %213, !dbg !46
  %222 = fmul float %214, %214, !dbg !42
  %223 = fmul float %204, %222, !dbg !43
  %224 = fmul float %218, %223, !dbg !44
  %225 = fadd float %221, %224, !dbg !45
  %226 = fsub float %179, %220, !dbg !33
  %227 = fadd float %195, %215, !dbg !36
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !37
  %229 = tail call float @llvm.nvvm.div.full(float %195, float %227), !dbg !38
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !39
  %231 = fmul float %230, %226, !dbg !40
  %232 = fadd float %220, %231, !dbg !41
  %233 = fadd float %187, %225, !dbg !46
  %234 = fmul float %226, %226, !dbg !42
  %235 = fmul float %215, %234, !dbg !43
  %236 = fmul float %230, %235, !dbg !44
  %237 = fadd float %233, %236, !dbg !45
  %238 = fsub float %180, %232, !dbg !33
  %239 = fadd float %196, %227, !dbg !36
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !37
  %241 = tail call float @llvm.nvvm.div.full(float %196, float %239), !dbg !38
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !39
  %243 = fmul float %242, %238, !dbg !40
  %244 = fadd float %232, %243, !dbg !41
  %245 = fadd float %188, %237, !dbg !46
  %246 = fmul float %238, %238, !dbg !42
  %247 = fmul float %227, %246, !dbg !43
  %248 = fmul float %242, %247, !dbg !44
  %249 = fadd float %245, %248, !dbg !45
  %250 = fsub float %181, %244, !dbg !33
  %251 = fadd float %197, %239, !dbg !36
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !37
  %253 = tail call float @llvm.nvvm.div.full(float %197, float %251), !dbg !38
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !39
  %255 = fmul float %254, %250, !dbg !40
  %256 = fadd float %244, %255, !dbg !41
  %257 = fadd float %189, %249, !dbg !46
  %258 = fmul float %250, %250, !dbg !42
  %259 = fmul float %239, %258, !dbg !43
  %260 = fmul float %254, %259, !dbg !44
  %261 = fadd float %257, %260, !dbg !45
  %262 = fsub float %182, %256, !dbg !33
  %263 = fadd float %198, %251, !dbg !36
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !37
  %265 = tail call float @llvm.nvvm.div.full(float %198, float %263), !dbg !38
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !39
  %267 = fmul float %266, %262, !dbg !40
  %268 = fadd float %256, %267, !dbg !41
  %269 = fadd float %190, %261, !dbg !46
  %270 = fmul float %262, %262, !dbg !42
  %271 = fmul float %251, %270, !dbg !43
  %272 = fmul float %266, %271, !dbg !44
  %273 = fadd float %269, %272, !dbg !45
  %274 = fsub float %183, %268, !dbg !33
  %275 = fadd float %199, %263, !dbg !36
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !37
  %277 = tail call float @llvm.nvvm.div.full(float %199, float %275), !dbg !38
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !39
  %279 = fmul float %278, %274, !dbg !40
  %280 = fadd float %268, %279, !dbg !41
  %281 = fadd float %191, %273, !dbg !46
  %282 = fmul float %274, %274, !dbg !42
  %283 = fmul float %263, %282, !dbg !43
  %284 = fmul float %278, %283, !dbg !44
  %285 = fadd float %281, %284, !dbg !45
  %286 = bitcast float %280 to i32, !dbg !47
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 16, i32 31), !dbg !47
  %288 = bitcast i32 %287 to float, !dbg !47
  %289 = bitcast float %285 to i32, !dbg !47
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 16, i32 31), !dbg !47
  %291 = bitcast i32 %290 to float, !dbg !47
  %292 = bitcast float %275 to i32, !dbg !47
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 16, i32 31), !dbg !47
  %294 = bitcast i32 %293 to float, !dbg !47
  %295 = fsub float %288, %280, !dbg !33
  %296 = fadd float %275, %294, !dbg !36
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !37
  %298 = tail call float @llvm.nvvm.div.full(float %294, float %296), !dbg !38
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !39
  %300 = fmul float %299, %295, !dbg !40
  %301 = fadd float %280, %300, !dbg !41
  %302 = fadd float %285, %291, !dbg !46
  %303 = fmul float %295, %295, !dbg !42
  %304 = fmul float %275, %303, !dbg !43
  %305 = fmul float %299, %304, !dbg !44
  %306 = fadd float %302, %305, !dbg !45
  %307 = bitcast float %301 to i32, !dbg !47
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !47
  %309 = bitcast i32 %308 to float, !dbg !47
  %310 = bitcast float %306 to i32, !dbg !47
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !47
  %312 = bitcast i32 %311 to float, !dbg !47
  %313 = bitcast float %296 to i32, !dbg !47
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !47
  %315 = bitcast i32 %314 to float, !dbg !47
  %316 = fsub float %309, %301, !dbg !33
  %317 = fadd float %296, %315, !dbg !36
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !37
  %319 = tail call float @llvm.nvvm.div.full(float %315, float %317), !dbg !38
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !39
  %321 = fmul float %320, %316, !dbg !40
  %322 = fadd float %301, %321, !dbg !41
  %323 = fadd float %306, %312, !dbg !46
  %324 = fmul float %316, %316, !dbg !42
  %325 = fmul float %296, %324, !dbg !43
  %326 = fmul float %320, %325, !dbg !44
  %327 = fadd float %323, %326, !dbg !45
  %328 = bitcast float %322 to i32, !dbg !47
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !47
  %330 = bitcast i32 %329 to float, !dbg !47
  %331 = bitcast float %327 to i32, !dbg !47
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !47
  %333 = bitcast i32 %332 to float, !dbg !47
  %334 = bitcast float %317 to i32, !dbg !47
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 4, i32 31), !dbg !47
  %336 = bitcast i32 %335 to float, !dbg !47
  %337 = fsub float %330, %322, !dbg !33
  %338 = fadd float %317, %336, !dbg !36
  %339 = fcmp oeq float %338, 0.000000e+00, !dbg !37
  %340 = tail call float @llvm.nvvm.div.full(float %336, float %338), !dbg !38
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !39
  %342 = fmul float %341, %337, !dbg !40
  %343 = fadd float %322, %342, !dbg !41
  %344 = fadd float %327, %333, !dbg !46
  %345 = fmul float %337, %337, !dbg !42
  %346 = fmul float %317, %345, !dbg !43
  %347 = fmul float %341, %346, !dbg !44
  %348 = fadd float %344, %347, !dbg !45
  %349 = bitcast float %343 to i32, !dbg !47
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 2, i32 31), !dbg !47
  %351 = bitcast i32 %350 to float, !dbg !47
  %352 = bitcast float %348 to i32, !dbg !47
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !47
  %354 = bitcast i32 %353 to float, !dbg !47
  %355 = bitcast float %338 to i32, !dbg !47
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 2, i32 31), !dbg !47
  %357 = bitcast i32 %356 to float, !dbg !47
  %358 = fsub float %351, %343, !dbg !33
  %359 = fadd float %338, %357, !dbg !36
  %360 = fcmp oeq float %359, 0.000000e+00, !dbg !37
  %361 = tail call float @llvm.nvvm.div.full(float %357, float %359), !dbg !38
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !39
  %363 = fmul float %362, %358, !dbg !40
  %364 = fadd float %343, %363, !dbg !41
  %365 = fadd float %348, %354, !dbg !46
  %366 = fmul float %358, %358, !dbg !42
  %367 = fmul float %338, %366, !dbg !43
  %368 = fmul float %362, %367, !dbg !44
  %369 = fadd float %365, %368, !dbg !45
  %370 = bitcast float %364 to i32, !dbg !47
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 1, i32 31), !dbg !47
  %372 = bitcast i32 %371 to float, !dbg !47
  %373 = bitcast float %369 to i32, !dbg !47
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !47
  %375 = bitcast i32 %374 to float, !dbg !47
  %376 = bitcast float %359 to i32, !dbg !47
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !47
  %378 = bitcast i32 %377 to float, !dbg !47
  %379 = fsub float %372, %364, !dbg !33
  %380 = fadd float %359, %378, !dbg !36
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !37
  %382 = tail call float @llvm.nvvm.div.full(float %378, float %380), !dbg !38
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !39
  %384 = fmul float %383, %379, !dbg !40
  %385 = fadd float %364, %384, !dbg !41
  %386 = fadd float %369, %375, !dbg !46
  %387 = fmul float %379, %379, !dbg !42
  %388 = fmul float %359, %387, !dbg !43
  %389 = fmul float %383, %388, !dbg !44
  %390 = fadd float %386, %389, !dbg !45
  %391 = and i32 %202, 3, !dbg !47
  %392 = icmp eq i32 %19, 0, !dbg !47
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !47
  %394 = bitcast float %385 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 %392) #5, !dbg !47
  %395 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %391, !dbg !47
  %396 = bitcast float %390 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 %392) #5, !dbg !47
  %397 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %391, !dbg !47
  %398 = bitcast float %380 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 %392) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %399 = icmp slt i32 %18, 4, !dbg !47
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !47
  %401 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %400, i1 %399) #5, !dbg !47
  %402 = bitcast i32 %401 to float, !dbg !47
  %403 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %18, !dbg !47
  %404 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %403, i1 %399) #5, !dbg !47
  %405 = bitcast i32 %404 to float, !dbg !47
  %406 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !47
  %407 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %406, i1 %399) #5, !dbg !47
  %408 = bitcast i32 %407 to float, !dbg !47
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 2, i32 31), !dbg !47
  %410 = bitcast i32 %409 to float, !dbg !47
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !47
  %412 = bitcast i32 %411 to float, !dbg !47
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !47
  %414 = bitcast i32 %413 to float, !dbg !47
  %415 = fsub float %410, %402, !dbg !33
  %416 = fadd float %408, %414, !dbg !36
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !37
  %418 = tail call float @llvm.nvvm.div.full(float %414, float %416), !dbg !38
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !39
  %420 = fmul float %415, %419, !dbg !40
  %421 = fadd float %420, %402, !dbg !41
  %422 = fadd float %405, %412, !dbg !46
  %423 = fmul float %415, %415, !dbg !42
  %424 = fmul float %423, %408, !dbg !43
  %425 = fmul float %424, %419, !dbg !44
  %426 = fadd float %422, %425, !dbg !45
  %427 = bitcast float %421 to i32, !dbg !47
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !47
  %429 = bitcast i32 %428 to float, !dbg !47
  %430 = bitcast float %426 to i32, !dbg !47
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 1, i32 31), !dbg !47
  %432 = bitcast i32 %431 to float, !dbg !47
  %433 = bitcast float %416 to i32, !dbg !47
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !47
  %435 = bitcast i32 %434 to float, !dbg !47
  %436 = fsub float %429, %421, !dbg !33
  %437 = fadd float %416, %435, !dbg !36
  %438 = fcmp oeq float %437, 0.000000e+00, !dbg !37
  %439 = tail call float @llvm.nvvm.div.full(float %435, float %437), !dbg !38
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !39
  %441 = fmul float %436, %440, !dbg !40
  %442 = fadd float %421, %441, !dbg !41
  %443 = fadd float %426, %432, !dbg !46
  %444 = fmul float %436, %436, !dbg !42
  %445 = fmul float %416, %444, !dbg !43
  %446 = fmul float %440, %445, !dbg !44
  %447 = fadd float %443, %446, !dbg !45
  %448 = and i32 %18, 3, !dbg !47
  %449 = icmp eq i32 %448, 0, !dbg !47
  %450 = and i1 %399, %449, !dbg !47
  %451 = bitcast float %442 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %451, i1 %450) #5, !dbg !47
  %452 = bitcast float %447 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %452, i1 %450) #5, !dbg !47
  %453 = bitcast float %437 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %453, i1 %450) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %454 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %455 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !47
  %456 = tail call float @llvm.nvvm.div.full(float %455, float 3.072000e+03), !dbg !48
  %457 = fadd float %456, 0x3EB0C6F7A0000000, !dbg !49
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i37 = icmp eq i32 %465, 0, !dbg !50
  br i1 %.not.i37, label %468, label %466, !dbg !50

466:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %467 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %457), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

468:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %469 = tail call float @llvm.nvvm.rsqrt.approx.f(float %457), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

__nv_rsqrtf.exit39:                               ; preds = %466, %468
  %.0.i38 = phi float [ %467, %466 ], [ %469, %468 ], !dbg !50
  %470 = zext nneg i32 %21 to i64, !dbg !51
  %471 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !52
  %472 = shufflevector <2 x i1> %471, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !52
  %473 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !53
  %474 = shufflevector <2 x float> %473, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %475 = insertelement <2 x float> poison, float %454, i64 0, !dbg !54
  %476 = shufflevector <2 x float> %475, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %477 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !52
  %478 = shufflevector <8 x i1> %477, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !52
  %479 = insertelement <4 x float> poison, float %.0.i38, i64 0, !dbg !53
  %480 = shufflevector <4 x float> %479, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !53
  %481 = insertelement <4 x float> poison, float %454, i64 0, !dbg !54
  %482 = shufflevector <4 x float> %481, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  %483 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !55
  %484 = shufflevector <4 x i1> %483, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  br label %485, !dbg !51

485:                                              ; preds = %__nv_rsqrtf.exit39, %485
  %indvars.iv83 = phi i64 [ 0, %__nv_rsqrtf.exit39 ], [ %indvars.iv.next84, %485 ]
  %486 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %637, %485 ]
  %487 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %638, %485 ]
  %488 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit39 ], [ %602, %485 ]
  %489 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit39 ], [ %647, %485 ]
  %490 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit39 ], [ %601, %485 ]
  %491 = or disjoint i64 %indvars.iv83, %470, !dbg !56
  %492 = or disjoint i64 %491, 4, !dbg !56
  %493 = trunc nuw nsw i64 %491 to i32, !dbg !57
  %494 = add i32 %22, %493, !dbg !57
  %495 = sext i32 %494 to i64, !dbg !58
  %496 = getelementptr bfloat, ptr addrspace(1) %0, i64 %495, !dbg !58
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %496, i1 %17) #5, !dbg !59
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !59
  %499 = bitcast i32 %498 to <2 x bfloat>, !dbg !59
  %500 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !59
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !59
  %502 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !59
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !59
  %504 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !59
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !59
  %506 = add nuw nsw i64 %491, 3072, !dbg !60
  %507 = getelementptr float, ptr addrspace(1) %1, i64 %506, !dbg !61
  %508 = getelementptr float, ptr addrspace(1) %1, i64 %492, !dbg !61
  %509 = getelementptr i8, ptr addrspace(1) %508, i64 12288, !dbg !61
  %510 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %507, i1 true) #5, !dbg !62
  %511 = extractvalue { i32, i32, i32, i32 } %510, 0, !dbg !62
  %512 = extractvalue { i32, i32, i32, i32 } %510, 1, !dbg !62
  %513 = extractvalue { i32, i32, i32, i32 } %510, 2, !dbg !62
  %514 = extractvalue { i32, i32, i32, i32 } %510, 3, !dbg !62
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %509, i1 true) #5, !dbg !62
  %516 = extractvalue { i32, i32, i32, i32 } %515, 0, !dbg !62
  %517 = extractvalue { i32, i32, i32, i32 } %515, 1, !dbg !62
  %518 = extractvalue { i32, i32, i32, i32 } %515, 2, !dbg !62
  %519 = extractvalue { i32, i32, i32, i32 } %515, 3, !dbg !62
  %520 = getelementptr bfloat, ptr addrspace(1) %2, i64 %506, !dbg !63
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %520, i1 true) #5, !dbg !64
  %522 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !64
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !64
  %524 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !64
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !64
  %526 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !64
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !64
  %528 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !64
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !64
  %530 = getelementptr float, ptr addrspace(1) %1, i64 %491, !dbg !65
  %531 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %530, i1 true) #5, !dbg !66
  %532 = extractvalue { i32, i32, i32, i32 } %531, 0, !dbg !66
  %533 = extractvalue { i32, i32, i32, i32 } %531, 1, !dbg !66
  %534 = extractvalue { i32, i32, i32, i32 } %531, 2, !dbg !66
  %535 = extractvalue { i32, i32, i32, i32 } %531, 3, !dbg !66
  %536 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %508, i1 true) #5, !dbg !66
  %537 = extractvalue { i32, i32, i32, i32 } %536, 0, !dbg !66
  %538 = extractvalue { i32, i32, i32, i32 } %536, 1, !dbg !66
  %539 = extractvalue { i32, i32, i32, i32 } %536, 2, !dbg !66
  %540 = extractvalue { i32, i32, i32, i32 } %536, 3, !dbg !66
  %541 = getelementptr bfloat, ptr addrspace(1) %2, i64 %491, !dbg !67
  %542 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %541, i1 true) #5, !dbg !68
  %543 = extractvalue { i32, i32, i32, i32 } %542, 0, !dbg !68
  %544 = bitcast i32 %543 to <2 x bfloat>, !dbg !68
  %545 = extractvalue { i32, i32, i32, i32 } %542, 1, !dbg !68
  %546 = bitcast i32 %545 to <2 x bfloat>, !dbg !68
  %547 = extractvalue { i32, i32, i32, i32 } %542, 2, !dbg !68
  %548 = bitcast i32 %547 to <2 x bfloat>, !dbg !68
  %549 = extractvalue { i32, i32, i32, i32 } %542, 3, !dbg !68
  %550 = bitcast i32 %549 to <2 x bfloat>, !dbg !68
  %551 = fcmp uno <8 x float> %489, zeroinitializer, !dbg !69
  %552 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !71
  %553 = fcmp uno float %486, 0.000000e+00, !dbg !71
  %554 = fcmp uno float %487, 0.000000e+00, !dbg !71
  %555 = fcmp uno <2 x float> %488, zeroinitializer, !dbg !69
  %556 = fpext <2 x bfloat> %499 to <2 x float>, !dbg !73
  %557 = insertelement <2 x i32> poison, i32 %511, i64 0, !dbg !62
  %558 = insertelement <2 x i32> %557, i32 %512, i64 1, !dbg !62
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !62
  %560 = fpext <2 x bfloat> %523 to <2 x float>, !dbg !74
  %561 = insertelement <2 x i32> poison, i32 %532, i64 0, !dbg !66
  %562 = insertelement <2 x i32> %561, i32 %533, i64 1, !dbg !66
  %563 = bitcast <2 x i32> %562 to <2 x float>, !dbg !66
  %564 = fpext <2 x bfloat> %544 to <2 x float>, !dbg !75
  %565 = fsub <2 x float> %556, %476, !dbg !54
  %566 = fmul <2 x float> %474, %565, !dbg !53
  %567 = fadd <2 x float> %559, %560, !dbg !76
  %568 = fadd <2 x float> %567, splat (float 1.000000e+00), !dbg !77
  %569 = fmul <2 x float> %566, %568, !dbg !78
  %570 = fadd <2 x float> %563, %564, !dbg !79
  %571 = fadd <2 x float> %569, %570, !dbg !80
  %572 = fcmp ogt <2 x float> %488, %571, !dbg !81
  %573 = or <2 x i1> %555, %572, !dbg !82
  %574 = select <2 x i1> %573, <2 x float> %488, <2 x float> %571, !dbg !83
  %575 = shufflevector <2 x bfloat> %501, <2 x bfloat> %503, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !73
  %576 = fpext <4 x bfloat> %575 to <4 x float>, !dbg !73
  %577 = insertelement <4 x i32> poison, i32 %513, i64 0, !dbg !62
  %578 = insertelement <4 x i32> %577, i32 %514, i64 1, !dbg !62
  %579 = insertelement <4 x i32> %578, i32 %516, i64 2, !dbg !62
  %580 = insertelement <4 x i32> %579, i32 %517, i64 3, !dbg !62
  %581 = bitcast <4 x i32> %580 to <4 x float>, !dbg !62
  %582 = shufflevector <2 x bfloat> %525, <2 x bfloat> %527, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !74
  %583 = fpext <4 x bfloat> %582 to <4 x float>, !dbg !74
  %584 = insertelement <4 x i32> poison, i32 %534, i64 0, !dbg !66
  %585 = insertelement <4 x i32> %584, i32 %535, i64 1, !dbg !66
  %586 = insertelement <4 x i32> %585, i32 %537, i64 2, !dbg !66
  %587 = insertelement <4 x i32> %586, i32 %538, i64 3, !dbg !66
  %588 = bitcast <4 x i32> %587 to <4 x float>, !dbg !66
  %589 = shufflevector <2 x bfloat> %546, <2 x bfloat> %548, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %590 = fpext <4 x bfloat> %589 to <4 x float>, !dbg !75
  %591 = fsub <4 x float> %576, %482, !dbg !54
  %592 = fmul <4 x float> %480, %591, !dbg !53
  %593 = fadd <4 x float> %581, %583, !dbg !76
  %594 = fadd <4 x float> %593, splat (float 1.000000e+00), !dbg !77
  %595 = fmul <4 x float> %592, %594, !dbg !78
  %596 = fadd <4 x float> %588, %590, !dbg !79
  %597 = fadd <4 x float> %595, %596, !dbg !80
  %598 = fcmp olt <4 x float> %490, %597, !dbg !84
  %599 = or <4 x i1> %552, %598, !dbg !85
  %600 = select <4 x i1> %599, <4 x float> %490, <4 x float> %597, !dbg !86
  %601 = select <4 x i1> %484, <4 x float> %600, <4 x float> %490, !dbg !55
  %602 = select <2 x i1> %472, <2 x float> %574, <2 x float> %488, !dbg !52
  %603 = getelementptr bfloat, ptr addrspace(1) %3, i64 %495, !dbg !87
  %604 = fptrunc <2 x float> %571 to <2 x bfloat>, !dbg !88
  %605 = extractelement <4 x float> %597, i64 0, !dbg !88
  %606 = fptrunc float %605 to bfloat, !dbg !88
  %607 = extractelement <4 x float> %597, i64 1, !dbg !88
  %608 = fptrunc float %607 to bfloat, !dbg !88
  %609 = extractelement <4 x float> %597, i64 2, !dbg !88
  %610 = fptrunc float %609 to bfloat, !dbg !88
  %611 = extractelement <4 x float> %597, i64 3, !dbg !88
  %612 = fptrunc float %611 to bfloat, !dbg !88
  %613 = fpext <2 x bfloat> %505 to <2 x float>, !dbg !73
  %614 = insertelement <2 x i32> poison, i32 %518, i64 0, !dbg !62
  %615 = insertelement <2 x i32> %614, i32 %519, i64 1, !dbg !62
  %616 = bitcast <2 x i32> %615 to <2 x float>, !dbg !62
  %617 = fpext <2 x bfloat> %529 to <2 x float>, !dbg !74
  %618 = insertelement <2 x i32> poison, i32 %539, i64 0, !dbg !66
  %619 = insertelement <2 x i32> %618, i32 %540, i64 1, !dbg !66
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !66
  %621 = fpext <2 x bfloat> %550 to <2 x float>, !dbg !75
  %622 = fsub <2 x float> %613, %476, !dbg !54
  %623 = fmul <2 x float> %474, %622, !dbg !53
  %624 = fadd <2 x float> %616, %617, !dbg !76
  %625 = fadd <2 x float> %624, splat (float 1.000000e+00), !dbg !77
  %626 = fmul <2 x float> %623, %625, !dbg !78
  %627 = fadd <2 x float> %620, %621, !dbg !79
  %628 = fadd <2 x float> %626, %627, !dbg !80
  %629 = extractelement <2 x float> %628, i64 0, !dbg !86
  %630 = fcmp olt float %486, %629, !dbg !84
  %631 = extractelement <2 x float> %628, i64 1, !dbg !86
  %632 = fcmp olt float %487, %631, !dbg !84
  %633 = or i1 %553, %630, !dbg !85
  %634 = or i1 %554, %632, !dbg !85
  %635 = select i1 %633, float %486, float %629, !dbg !86
  %636 = select i1 %634, float %487, float %631, !dbg !86
  %637 = select i1 %17, float %635, float %486, !dbg !55
  %638 = select i1 %17, float %636, float %487, !dbg !55
  %639 = shufflevector <2 x float> %571, <2 x float> %628, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !81
  %640 = shufflevector <4 x float> %597, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %641 = shufflevector <8 x float> %640, <8 x float> %639, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !81
  %642 = fcmp ogt <8 x float> %489, %641, !dbg !81
  %643 = fcmp olt <8 x float> %489, %641, !dbg !81
  %644 = shufflevector <8 x i1> %642, <8 x i1> %643, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !81
  %645 = or <8 x i1> %551, %644, !dbg !82
  %646 = select <8 x i1> %645, <8 x float> %489, <8 x float> %641, !dbg !83
  %647 = select <8 x i1> %478, <8 x float> %646, <8 x float> %489, !dbg !52
  %648 = fptrunc <2 x float> %628 to <2 x bfloat>, !dbg !88
  %649 = bitcast <2 x bfloat> %604 to i32, !dbg !88
  %650 = insertelement <2 x bfloat> poison, bfloat %606, i64 0, !dbg !88
  %651 = insertelement <2 x bfloat> %650, bfloat %608, i64 1, !dbg !88
  %652 = bitcast <2 x bfloat> %651 to i32, !dbg !88
  %653 = insertelement <2 x bfloat> poison, bfloat %610, i64 0, !dbg !88
  %654 = insertelement <2 x bfloat> %653, bfloat %612, i64 1, !dbg !88
  %655 = bitcast <2 x bfloat> %654 to i32, !dbg !88
  %656 = bitcast <2 x bfloat> %648 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %649, i32 %652, i32 %655, i32 %656, ptr addrspace(1) %603, i1 %17) #5, !dbg !88
  %indvars.iv.next84 = add nuw nsw i64 %indvars.iv83, 1024, !dbg !51
  %657 = icmp samesign ult i64 %indvars.iv83, 2048, !dbg !51
  br i1 %657, label %485, label %658, !dbg !51

658:                                              ; preds = %485
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %659 = extractelement <8 x float> %647, i64 6, !dbg !91
  %660 = extractelement <8 x float> %647, i64 7, !dbg !91
  %661 = fcmp olt float %659, %660, !dbg !91
  %662 = fcmp uno float %659, 0.000000e+00, !dbg !92
  %663 = or i1 %661, %662, !dbg !93
  %664 = select i1 %663, float %659, float %660, !dbg !94
  %665 = extractelement <4 x float> %601, i64 0, !dbg !91
  %666 = fcmp olt float %664, %665, !dbg !91
  %667 = fcmp uno float %664, 0.000000e+00, !dbg !92
  %668 = or i1 %666, %667, !dbg !93
  %669 = select i1 %668, float %664, float %665, !dbg !94
  %670 = extractelement <4 x float> %601, i64 1, !dbg !91
  %671 = fcmp olt float %669, %670, !dbg !91
  %672 = fcmp uno float %669, 0.000000e+00, !dbg !92
  %673 = or i1 %671, %672, !dbg !93
  %674 = select i1 %673, float %669, float %670, !dbg !94
  %675 = extractelement <4 x float> %601, i64 2, !dbg !91
  %676 = fcmp olt float %674, %675, !dbg !91
  %677 = fcmp uno float %674, 0.000000e+00, !dbg !92
  %678 = or i1 %676, %677, !dbg !93
  %679 = select i1 %678, float %674, float %675, !dbg !94
  %680 = extractelement <4 x float> %601, i64 3, !dbg !91
  %681 = fcmp olt float %679, %680, !dbg !91
  %682 = fcmp uno float %679, 0.000000e+00, !dbg !92
  %683 = or i1 %681, %682, !dbg !93
  %684 = select i1 %683, float %679, float %680, !dbg !94
  %685 = fcmp olt float %684, %637, !dbg !91
  %686 = fcmp uno float %684, 0.000000e+00, !dbg !92
  %687 = or i1 %685, %686, !dbg !93
  %688 = select i1 %687, float %684, float %637, !dbg !94
  %689 = fcmp olt float %688, %638, !dbg !91
  %690 = fcmp uno float %688, 0.000000e+00, !dbg !92
  %691 = or i1 %689, %690, !dbg !93
  %692 = select i1 %691, float %688, float %638, !dbg !94
  %693 = bitcast float %692 to i32, !dbg !89
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 16, i32 31), !dbg !89
  %695 = bitcast i32 %694 to float, !dbg !89
  %696 = fcmp olt float %692, %695, !dbg !91
  %697 = fcmp uno float %692, 0.000000e+00, !dbg !92
  %698 = or i1 %697, %696, !dbg !93
  %699 = select i1 %698, float %692, float %695, !dbg !94
  %700 = bitcast float %699 to i32, !dbg !89
  %701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %700, i32 8, i32 31), !dbg !89
  %702 = bitcast i32 %701 to float, !dbg !89
  %703 = fcmp olt float %699, %702, !dbg !91
  %704 = fcmp uno float %699, 0.000000e+00, !dbg !92
  %705 = or i1 %703, %704, !dbg !93
  %706 = select i1 %705, float %699, float %702, !dbg !94
  %707 = bitcast float %706 to i32, !dbg !89
  %708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %707, i32 4, i32 31), !dbg !89
  %709 = bitcast i32 %708 to float, !dbg !89
  %710 = fcmp olt float %706, %709, !dbg !91
  %711 = fcmp uno float %706, 0.000000e+00, !dbg !92
  %712 = or i1 %710, %711, !dbg !93
  %713 = select i1 %712, float %706, float %709, !dbg !94
  %714 = bitcast float %713 to i32, !dbg !89
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 2, i32 31), !dbg !89
  %716 = bitcast i32 %715 to float, !dbg !89
  %717 = fcmp olt float %713, %716, !dbg !91
  %718 = fcmp uno float %713, 0.000000e+00, !dbg !92
  %719 = or i1 %717, %718, !dbg !93
  %720 = select i1 %719, float %713, float %716, !dbg !94
  %721 = bitcast float %720 to i32, !dbg !89
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 1, i32 31), !dbg !89
  %723 = bitcast i32 %722 to float, !dbg !89
  %724 = fcmp olt float %720, %723, !dbg !91
  %725 = fcmp uno float %720, 0.000000e+00, !dbg !92
  %726 = or i1 %724, %725, !dbg !93
  %727 = select i1 %726, i32 %721, i32 %722, !dbg !94
  %728 = insertelement <1 x i32> poison, i32 %727, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %728, i1 %392) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %729 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %400, i1 %399) #5, !dbg !89
  %730 = bitcast i32 %729 to float, !dbg !89
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 2, i32 31), !dbg !89
  %732 = bitcast i32 %731 to float, !dbg !89
  %733 = fcmp olt float %730, %732, !dbg !91
  %734 = fcmp uno float %730, 0.000000e+00, !dbg !92
  %735 = or i1 %734, %733, !dbg !93
  %736 = select i1 %735, float %730, float %732, !dbg !94
  %737 = bitcast float %736 to i32, !dbg !89
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 1, i32 31), !dbg !89
  %739 = bitcast i32 %738 to float, !dbg !89
  %740 = fcmp olt float %736, %739, !dbg !91
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !92
  %742 = or i1 %740, %741, !dbg !93
  %743 = select i1 %742, i32 %737, i32 %738, !dbg !94
  %744 = insertelement <1 x i32> poison, i32 %743, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %744, i1 %450) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %745 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %746 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %602, <2 x i32> <i32 0, i32 2>, !dbg !97
  %747 = fcmp ogt <2 x float> %746, %602, !dbg !97
  %748 = fcmp uno <2 x float> %746, %602, !dbg !97
  %shift = shufflevector <2 x i1> %747, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !98
  %749 = or <2 x i1> %shift, %748, !dbg !98
  %750 = extractelement <2 x i1> %749, i64 0, !dbg !98
  %751 = extractelement <2 x float> %602, i64 0, !dbg !99
  %752 = extractelement <2 x float> %602, i64 1, !dbg !99
  %753 = select i1 %750, float %751, float %752, !dbg !99
  %754 = extractelement <8 x float> %647, i64 0, !dbg !97
  %755 = fcmp ogt float %753, %754, !dbg !97
  %756 = fcmp uno float %753, 0.000000e+00, !dbg !100
  %757 = or i1 %755, %756, !dbg !98
  %758 = select i1 %757, float %753, float %754, !dbg !99
  %759 = extractelement <8 x float> %647, i64 1, !dbg !97
  %760 = fcmp ogt float %758, %759, !dbg !97
  %761 = fcmp uno float %758, 0.000000e+00, !dbg !100
  %762 = or i1 %760, %761, !dbg !98
  %763 = select i1 %762, float %758, float %759, !dbg !99
  %764 = extractelement <8 x float> %647, i64 2, !dbg !97
  %765 = fcmp ogt float %763, %764, !dbg !97
  %766 = fcmp uno float %763, 0.000000e+00, !dbg !100
  %767 = or i1 %765, %766, !dbg !98
  %768 = select i1 %767, float %763, float %764, !dbg !99
  %769 = extractelement <8 x float> %647, i64 3, !dbg !97
  %770 = fcmp ogt float %768, %769, !dbg !97
  %771 = fcmp uno float %768, 0.000000e+00, !dbg !100
  %772 = or i1 %770, %771, !dbg !98
  %773 = select i1 %772, float %768, float %769, !dbg !99
  %774 = extractelement <8 x float> %647, i64 4, !dbg !97
  %775 = fcmp ogt float %773, %774, !dbg !97
  %776 = fcmp uno float %773, 0.000000e+00, !dbg !100
  %777 = or i1 %775, %776, !dbg !98
  %778 = select i1 %777, float %773, float %774, !dbg !99
  %779 = extractelement <8 x float> %647, i64 5, !dbg !97
  %780 = fcmp ogt float %778, %779, !dbg !97
  %781 = fcmp uno float %778, 0.000000e+00, !dbg !100
  %782 = or i1 %780, %781, !dbg !98
  %783 = select i1 %782, float %778, float %779, !dbg !99
  %784 = bitcast float %783 to i32, !dbg !95
  %785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %784, i32 16, i32 31), !dbg !95
  %786 = bitcast i32 %785 to float, !dbg !95
  %787 = fcmp ogt float %783, %786, !dbg !97
  %788 = fcmp uno float %783, 0.000000e+00, !dbg !100
  %789 = or i1 %788, %787, !dbg !98
  %790 = select i1 %789, float %783, float %786, !dbg !99
  %791 = bitcast float %790 to i32, !dbg !95
  %792 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %791, i32 8, i32 31), !dbg !95
  %793 = bitcast i32 %792 to float, !dbg !95
  %794 = fcmp ogt float %790, %793, !dbg !97
  %795 = fcmp uno float %790, 0.000000e+00, !dbg !100
  %796 = or i1 %794, %795, !dbg !98
  %797 = select i1 %796, float %790, float %793, !dbg !99
  %798 = bitcast float %797 to i32, !dbg !95
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 4, i32 31), !dbg !95
  %800 = bitcast i32 %799 to float, !dbg !95
  %801 = fcmp ogt float %797, %800, !dbg !97
  %802 = fcmp uno float %797, 0.000000e+00, !dbg !100
  %803 = or i1 %801, %802, !dbg !98
  %804 = select i1 %803, float %797, float %800, !dbg !99
  %805 = bitcast float %804 to i32, !dbg !95
  %806 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %805, i32 2, i32 31), !dbg !95
  %807 = bitcast i32 %806 to float, !dbg !95
  %808 = fcmp ogt float %804, %807, !dbg !97
  %809 = fcmp uno float %804, 0.000000e+00, !dbg !100
  %810 = or i1 %808, %809, !dbg !98
  %811 = select i1 %810, float %804, float %807, !dbg !99
  %812 = bitcast float %811 to i32, !dbg !95
  %813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %812, i32 1, i32 31), !dbg !95
  %814 = bitcast i32 %813 to float, !dbg !95
  %815 = fcmp ogt float %811, %814, !dbg !97
  %816 = fcmp uno float %811, 0.000000e+00, !dbg !100
  %817 = or i1 %815, %816, !dbg !98
  %818 = select i1 %817, i32 %812, i32 %813, !dbg !99
  %819 = insertelement <1 x i32> poison, i32 %818, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %819, i1 %392) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %820 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %400, i1 %399) #5, !dbg !95
  %821 = bitcast i32 %820 to float, !dbg !95
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %820, i32 2, i32 31), !dbg !95
  %823 = bitcast i32 %822 to float, !dbg !95
  %824 = fcmp ogt float %821, %823, !dbg !97
  %825 = fcmp uno float %821, 0.000000e+00, !dbg !100
  %826 = or i1 %825, %824, !dbg !98
  %827 = select i1 %826, float %821, float %823, !dbg !99
  %828 = bitcast float %827 to i32, !dbg !95
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 1, i32 31), !dbg !95
  %830 = bitcast i32 %829 to float, !dbg !95
  %831 = fcmp ogt float %827, %830, !dbg !97
  %832 = fcmp uno float %827, 0.000000e+00, !dbg !100
  %833 = or i1 %831, %832, !dbg !98
  %834 = select i1 %833, i32 %828, i32 %829, !dbg !99
  %835 = insertelement <1 x i32> poison, i32 %834, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %835, i1 %450) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %836 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %837 = sext i32 %16 to i64, !dbg !101
  %838 = getelementptr bfloat, ptr addrspace(1) %4, i64 %837, !dbg !101
  %839 = fptrunc float %745 to bfloat, !dbg !102
  %840 = and i32 %18, 127, !dbg !102
  %841 = icmp eq i32 %840, 0, !dbg !102
  %842 = bitcast bfloat %839 to i16, !dbg !102
  %843 = and i1 %17, %841, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %842, ptr addrspace(1) %838, i1 %843) #5, !dbg !102
  %844 = getelementptr bfloat, ptr addrspace(1) %5, i64 %837, !dbg !103
  %845 = fptrunc float %836 to bfloat, !dbg !104
  %846 = bitcast bfloat %845 to i16, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %846, ptr addrspace(1) %844, i1 %843) #5, !dbg !104
  %847 = getelementptr bfloat, ptr addrspace(1) %6, i64 %837, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %842, ptr addrspace(1) %847, i1 %843) #5, !dbg !106
  %848 = getelementptr bfloat, ptr addrspace(1) %7, i64 %837, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %846, ptr addrspace(1) %848, i1 %843) #5, !dbg !108
  %849 = getelementptr bfloat, ptr addrspace(1) %8, i64 %837, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %842, ptr addrspace(1) %849, i1 %843) #5, !dbg !110
  %850 = getelementptr bfloat, ptr addrspace(1) %9, i64 %837, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %846, ptr addrspace(1) %850, i1 %843) #5, !dbg !112
  %.inv = fcmp oge float %745, 0.000000e+00, !dbg !113
  %851 = select i1 %.inv, float 0.000000e+00, float %745, !dbg !113
  %852 = fsub float 0.000000e+00, %851, !dbg !115
  %853 = fcmp uno float %852, 0.000000e+00, !dbg !116
  %.inv3 = fcmp ole float %836, 0.000000e+00, !dbg !118
  %854 = select i1 %.inv3, float 0.000000e+00, float %836, !dbg !118
  %855 = fcmp ogt float %852, %854, !dbg !120
  %856 = or i1 %853, %855, !dbg !121
  %857 = select i1 %856, float %852, float %854, !dbg !122
  %858 = fmul float %857, 0x3F80204080000000, !dbg !123
  %859 = fcmp ogt float %858, 0x3EE4F8B580000000, !dbg !124
  %860 = fcmp uno float %858, 0.000000e+00, !dbg !126
  %861 = or i1 %859, %860, !dbg !127
  %862 = select i1 %861, float %858, float 0x3EE4F8B580000000, !dbg !128
  %863 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %862), !dbg !129
  %864 = sext i32 %23 to i64, !dbg !130
  %865 = getelementptr bfloat, ptr addrspace(1) %3, i64 %864, !dbg !130
  %866 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %865, i1 %17) #5, !dbg !131
  %867 = extractvalue { i32, i32, i32, i32 } %866, 0, !dbg !131
  %868 = bitcast i32 %867 to <2 x bfloat>, !dbg !131
  %869 = extractvalue { i32, i32, i32, i32 } %866, 1, !dbg !131
  %870 = bitcast i32 %869 to <2 x bfloat>, !dbg !131
  %871 = extractvalue { i32, i32, i32, i32 } %866, 2, !dbg !131
  %872 = bitcast i32 %871 to <2 x bfloat>, !dbg !131
  %873 = extractvalue { i32, i32, i32, i32 } %866, 3, !dbg !131
  %874 = bitcast i32 %873 to <2 x bfloat>, !dbg !131
  %875 = extractelement <2 x bfloat> %868, i64 0, !dbg !131
  %876 = extractelement <2 x bfloat> %868, i64 1, !dbg !131
  %877 = extractelement <2 x bfloat> %870, i64 0, !dbg !131
  %878 = extractelement <2 x bfloat> %870, i64 1, !dbg !131
  %879 = extractelement <2 x bfloat> %872, i64 0, !dbg !131
  %880 = extractelement <2 x bfloat> %872, i64 1, !dbg !131
  %881 = extractelement <2 x bfloat> %874, i64 0, !dbg !131
  %882 = extractelement <2 x bfloat> %874, i64 1, !dbg !131
  %883 = fpext bfloat %875 to float, !dbg !132
  %884 = fpext bfloat %876 to float, !dbg !132
  %885 = fpext bfloat %877 to float, !dbg !132
  %886 = fpext bfloat %878 to float, !dbg !132
  %887 = fpext bfloat %879 to float, !dbg !132
  %888 = fpext bfloat %880 to float, !dbg !132
  %889 = fpext bfloat %881 to float, !dbg !132
  %890 = fpext bfloat %882 to float, !dbg !132
  %891 = fmul float %863, %883, !dbg !133
  %892 = fmul float %863, %884, !dbg !133
  %893 = fmul float %863, %885, !dbg !133
  %894 = fmul float %863, %886, !dbg !133
  %895 = fmul float %863, %887, !dbg !133
  %896 = fmul float %863, %888, !dbg !133
  %897 = fmul float %863, %889, !dbg !133
  %898 = fmul float %863, %890, !dbg !133
  %899 = tail call float @llvm.nvvm.round.f(float %891) #5, !dbg !134
  %900 = tail call float @llvm.nvvm.round.f(float %892) #5, !dbg !134
  %901 = tail call float @llvm.nvvm.round.f(float %893) #5, !dbg !134
  %902 = tail call float @llvm.nvvm.round.f(float %894) #5, !dbg !134
  %903 = tail call float @llvm.nvvm.round.f(float %895) #5, !dbg !134
  %904 = tail call float @llvm.nvvm.round.f(float %896) #5, !dbg !134
  %905 = tail call float @llvm.nvvm.round.f(float %897) #5, !dbg !134
  %906 = tail call float @llvm.nvvm.round.f(float %898) #5, !dbg !134
  %907 = insertelement <4 x float> poison, float %899, i64 0, !dbg !135
  %908 = insertelement <4 x float> %907, float %900, i64 1, !dbg !135
  %909 = insertelement <4 x float> %908, float %901, i64 2, !dbg !135
  %910 = insertelement <4 x float> %909, float %902, i64 3, !dbg !135
  %911 = fcmp ogt <4 x float> %910, splat (float -1.270000e+02), !dbg !135
  %912 = fcmp uno <4 x float> %910, zeroinitializer, !dbg !137
  %913 = or <4 x i1> %911, %912, !dbg !138
  %914 = select <4 x i1> %913, <4 x float> %910, <4 x float> splat (float -1.270000e+02), !dbg !139
  %915 = fcmp olt <4 x float> %914, splat (float 1.270000e+02), !dbg !140
  %916 = fcmp uno <4 x float> %914, zeroinitializer, !dbg !142
  %917 = or <4 x i1> %915, %916, !dbg !143
  %918 = fptosi <4 x float> %914 to <4 x i8>, !dbg !144
  %919 = select <4 x i1> %917, <4 x i8> %918, <4 x i8> splat (i8 127), !dbg !145
  %920 = insertelement <4 x float> poison, float %903, i64 0, !dbg !135
  %921 = insertelement <4 x float> %920, float %904, i64 1, !dbg !135
  %922 = insertelement <4 x float> %921, float %905, i64 2, !dbg !135
  %923 = insertelement <4 x float> %922, float %906, i64 3, !dbg !135
  %924 = fcmp ogt <4 x float> %923, splat (float -1.270000e+02), !dbg !135
  %925 = fcmp uno <4 x float> %923, zeroinitializer, !dbg !137
  %926 = or <4 x i1> %924, %925, !dbg !138
  %927 = select <4 x i1> %926, <4 x float> %923, <4 x float> splat (float -1.270000e+02), !dbg !139
  %928 = fcmp olt <4 x float> %927, splat (float 1.270000e+02), !dbg !140
  %929 = fcmp uno <4 x float> %927, zeroinitializer, !dbg !142
  %930 = or <4 x i1> %928, %929, !dbg !143
  %931 = fptosi <4 x float> %927 to <4 x i8>, !dbg !144
  %932 = select <4 x i1> %930, <4 x i8> %931, <4 x i8> splat (i8 127), !dbg !145
  %933 = getelementptr i8, ptr addrspace(1) %10, i64 %864, !dbg !146
  %934 = bitcast <4 x i8> %919 to i32, !dbg !147
  %935 = bitcast <4 x i8> %932 to i32, !dbg !147
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %934, i32 %935, ptr addrspace(1) %933, i1 %17) #5, !dbg !147
  %936 = getelementptr i8, ptr addrspace(1) %11, i64 %864, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %934, i32 %935, ptr addrspace(1) %936, i1 %17) #5, !dbg !149
  %937 = getelementptr i8, ptr addrspace(1) %12, i64 %864, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %934, i32 %935, ptr addrspace(1) %937, i1 %17) #5, !dbg !151
  %938 = add i32 %23, 1024, !dbg !152
  %939 = sext i32 %938 to i64, !dbg !130
  %940 = getelementptr bfloat, ptr addrspace(1) %3, i64 %939, !dbg !130
  %941 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %940, i1 %17) #5, !dbg !131
  %942 = extractvalue { i32, i32, i32, i32 } %941, 0, !dbg !131
  %943 = bitcast i32 %942 to <2 x bfloat>, !dbg !131
  %944 = extractvalue { i32, i32, i32, i32 } %941, 1, !dbg !131
  %945 = bitcast i32 %944 to <2 x bfloat>, !dbg !131
  %946 = extractvalue { i32, i32, i32, i32 } %941, 2, !dbg !131
  %947 = bitcast i32 %946 to <2 x bfloat>, !dbg !131
  %948 = extractvalue { i32, i32, i32, i32 } %941, 3, !dbg !131
  %949 = bitcast i32 %948 to <2 x bfloat>, !dbg !131
  %950 = extractelement <2 x bfloat> %943, i64 0, !dbg !131
  %951 = extractelement <2 x bfloat> %943, i64 1, !dbg !131
  %952 = extractelement <2 x bfloat> %945, i64 0, !dbg !131
  %953 = extractelement <2 x bfloat> %945, i64 1, !dbg !131
  %954 = extractelement <2 x bfloat> %947, i64 0, !dbg !131
  %955 = extractelement <2 x bfloat> %947, i64 1, !dbg !131
  %956 = extractelement <2 x bfloat> %949, i64 0, !dbg !131
  %957 = extractelement <2 x bfloat> %949, i64 1, !dbg !131
  %958 = fpext bfloat %950 to float, !dbg !132
  %959 = fpext bfloat %951 to float, !dbg !132
  %960 = fpext bfloat %952 to float, !dbg !132
  %961 = fpext bfloat %953 to float, !dbg !132
  %962 = fpext bfloat %954 to float, !dbg !132
  %963 = fpext bfloat %955 to float, !dbg !132
  %964 = fpext bfloat %956 to float, !dbg !132
  %965 = fpext bfloat %957 to float, !dbg !132
  %966 = fmul float %863, %958, !dbg !133
  %967 = fmul float %863, %959, !dbg !133
  %968 = fmul float %863, %960, !dbg !133
  %969 = fmul float %863, %961, !dbg !133
  %970 = fmul float %863, %962, !dbg !133
  %971 = fmul float %863, %963, !dbg !133
  %972 = fmul float %863, %964, !dbg !133
  %973 = fmul float %863, %965, !dbg !133
  %974 = tail call float @llvm.nvvm.round.f(float %966) #5, !dbg !134
  %975 = tail call float @llvm.nvvm.round.f(float %967) #5, !dbg !134
  %976 = tail call float @llvm.nvvm.round.f(float %968) #5, !dbg !134
  %977 = tail call float @llvm.nvvm.round.f(float %969) #5, !dbg !134
  %978 = tail call float @llvm.nvvm.round.f(float %970) #5, !dbg !134
  %979 = tail call float @llvm.nvvm.round.f(float %971) #5, !dbg !134
  %980 = tail call float @llvm.nvvm.round.f(float %972) #5, !dbg !134
  %981 = tail call float @llvm.nvvm.round.f(float %973) #5, !dbg !134
  %982 = insertelement <4 x float> poison, float %974, i64 0, !dbg !135
  %983 = insertelement <4 x float> %982, float %975, i64 1, !dbg !135
  %984 = insertelement <4 x float> %983, float %976, i64 2, !dbg !135
  %985 = insertelement <4 x float> %984, float %977, i64 3, !dbg !135
  %986 = fcmp ogt <4 x float> %985, splat (float -1.270000e+02), !dbg !135
  %987 = fcmp uno <4 x float> %985, zeroinitializer, !dbg !137
  %988 = or <4 x i1> %986, %987, !dbg !138
  %989 = select <4 x i1> %988, <4 x float> %985, <4 x float> splat (float -1.270000e+02), !dbg !139
  %990 = fcmp olt <4 x float> %989, splat (float 1.270000e+02), !dbg !140
  %991 = fcmp uno <4 x float> %989, zeroinitializer, !dbg !142
  %992 = or <4 x i1> %990, %991, !dbg !143
  %993 = fptosi <4 x float> %989 to <4 x i8>, !dbg !144
  %994 = select <4 x i1> %992, <4 x i8> %993, <4 x i8> splat (i8 127), !dbg !145
  %995 = insertelement <4 x float> poison, float %978, i64 0, !dbg !135
  %996 = insertelement <4 x float> %995, float %979, i64 1, !dbg !135
  %997 = insertelement <4 x float> %996, float %980, i64 2, !dbg !135
  %998 = insertelement <4 x float> %997, float %981, i64 3, !dbg !135
  %999 = fcmp ogt <4 x float> %998, splat (float -1.270000e+02), !dbg !135
  %1000 = fcmp uno <4 x float> %998, zeroinitializer, !dbg !137
  %1001 = or <4 x i1> %999, %1000, !dbg !138
  %1002 = select <4 x i1> %1001, <4 x float> %998, <4 x float> splat (float -1.270000e+02), !dbg !139
  %1003 = fcmp olt <4 x float> %1002, splat (float 1.270000e+02), !dbg !140
  %1004 = fcmp uno <4 x float> %1002, zeroinitializer, !dbg !142
  %1005 = or <4 x i1> %1003, %1004, !dbg !143
  %1006 = fptosi <4 x float> %1002 to <4 x i8>, !dbg !144
  %1007 = select <4 x i1> %1005, <4 x i8> %1006, <4 x i8> splat (i8 127), !dbg !145
  %1008 = getelementptr i8, ptr addrspace(1) %10, i64 %939, !dbg !146
  %1009 = bitcast <4 x i8> %994 to i32, !dbg !147
  %1010 = bitcast <4 x i8> %1007 to i32, !dbg !147
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1009, i32 %1010, ptr addrspace(1) %1008, i1 %17) #5, !dbg !147
  %1011 = getelementptr i8, ptr addrspace(1) %11, i64 %939, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1009, i32 %1010, ptr addrspace(1) %1011, i1 %17) #5, !dbg !149
  %1012 = getelementptr i8, ptr addrspace(1) %12, i64 %939, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1009, i32 %1010, ptr addrspace(1) %1012, i1 %17) #5, !dbg !151
  %1013 = add i32 %23, 2048, !dbg !152
  %1014 = sext i32 %1013 to i64, !dbg !130
  %1015 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1014, !dbg !130
  %1016 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1015, i1 %17) #5, !dbg !131
  %1017 = extractvalue { i32, i32, i32, i32 } %1016, 0, !dbg !131
  %1018 = bitcast i32 %1017 to <2 x bfloat>, !dbg !131
  %1019 = extractvalue { i32, i32, i32, i32 } %1016, 1, !dbg !131
  %1020 = bitcast i32 %1019 to <2 x bfloat>, !dbg !131
  %1021 = extractvalue { i32, i32, i32, i32 } %1016, 2, !dbg !131
  %1022 = bitcast i32 %1021 to <2 x bfloat>, !dbg !131
  %1023 = extractvalue { i32, i32, i32, i32 } %1016, 3, !dbg !131
  %1024 = bitcast i32 %1023 to <2 x bfloat>, !dbg !131
  %1025 = extractelement <2 x bfloat> %1018, i64 0, !dbg !131
  %1026 = extractelement <2 x bfloat> %1018, i64 1, !dbg !131
  %1027 = extractelement <2 x bfloat> %1020, i64 0, !dbg !131
  %1028 = extractelement <2 x bfloat> %1020, i64 1, !dbg !131
  %1029 = extractelement <2 x bfloat> %1022, i64 0, !dbg !131
  %1030 = extractelement <2 x bfloat> %1022, i64 1, !dbg !131
  %1031 = extractelement <2 x bfloat> %1024, i64 0, !dbg !131
  %1032 = extractelement <2 x bfloat> %1024, i64 1, !dbg !131
  %1033 = fpext bfloat %1025 to float, !dbg !132
  %1034 = fpext bfloat %1026 to float, !dbg !132
  %1035 = fpext bfloat %1027 to float, !dbg !132
  %1036 = fpext bfloat %1028 to float, !dbg !132
  %1037 = fpext bfloat %1029 to float, !dbg !132
  %1038 = fpext bfloat %1030 to float, !dbg !132
  %1039 = fpext bfloat %1031 to float, !dbg !132
  %1040 = fpext bfloat %1032 to float, !dbg !132
  %1041 = fmul float %863, %1033, !dbg !133
  %1042 = fmul float %863, %1034, !dbg !133
  %1043 = fmul float %863, %1035, !dbg !133
  %1044 = fmul float %863, %1036, !dbg !133
  %1045 = fmul float %863, %1037, !dbg !133
  %1046 = fmul float %863, %1038, !dbg !133
  %1047 = fmul float %863, %1039, !dbg !133
  %1048 = fmul float %863, %1040, !dbg !133
  %1049 = tail call float @llvm.nvvm.round.f(float %1041) #5, !dbg !134
  %1050 = tail call float @llvm.nvvm.round.f(float %1042) #5, !dbg !134
  %1051 = tail call float @llvm.nvvm.round.f(float %1043) #5, !dbg !134
  %1052 = tail call float @llvm.nvvm.round.f(float %1044) #5, !dbg !134
  %1053 = tail call float @llvm.nvvm.round.f(float %1045) #5, !dbg !134
  %1054 = tail call float @llvm.nvvm.round.f(float %1046) #5, !dbg !134
  %1055 = tail call float @llvm.nvvm.round.f(float %1047) #5, !dbg !134
  %1056 = tail call float @llvm.nvvm.round.f(float %1048) #5, !dbg !134
  %1057 = insertelement <4 x float> poison, float %1049, i64 0, !dbg !135
  %1058 = insertelement <4 x float> %1057, float %1050, i64 1, !dbg !135
  %1059 = insertelement <4 x float> %1058, float %1051, i64 2, !dbg !135
  %1060 = insertelement <4 x float> %1059, float %1052, i64 3, !dbg !135
  %1061 = fcmp ogt <4 x float> %1060, splat (float -1.270000e+02), !dbg !135
  %1062 = fcmp uno <4 x float> %1060, zeroinitializer, !dbg !137
  %1063 = or <4 x i1> %1061, %1062, !dbg !138
  %1064 = select <4 x i1> %1063, <4 x float> %1060, <4 x float> splat (float -1.270000e+02), !dbg !139
  %1065 = fcmp olt <4 x float> %1064, splat (float 1.270000e+02), !dbg !140
  %1066 = fcmp uno <4 x float> %1064, zeroinitializer, !dbg !142
  %1067 = or <4 x i1> %1065, %1066, !dbg !143
  %1068 = fptosi <4 x float> %1064 to <4 x i8>, !dbg !144
  %1069 = select <4 x i1> %1067, <4 x i8> %1068, <4 x i8> splat (i8 127), !dbg !145
  %1070 = insertelement <4 x float> poison, float %1053, i64 0, !dbg !135
  %1071 = insertelement <4 x float> %1070, float %1054, i64 1, !dbg !135
  %1072 = insertelement <4 x float> %1071, float %1055, i64 2, !dbg !135
  %1073 = insertelement <4 x float> %1072, float %1056, i64 3, !dbg !135
  %1074 = fcmp ogt <4 x float> %1073, splat (float -1.270000e+02), !dbg !135
  %1075 = fcmp uno <4 x float> %1073, zeroinitializer, !dbg !137
  %1076 = or <4 x i1> %1074, %1075, !dbg !138
  %1077 = select <4 x i1> %1076, <4 x float> %1073, <4 x float> splat (float -1.270000e+02), !dbg !139
  %1078 = fcmp olt <4 x float> %1077, splat (float 1.270000e+02), !dbg !140
  %1079 = fcmp uno <4 x float> %1077, zeroinitializer, !dbg !142
  %1080 = or <4 x i1> %1078, %1079, !dbg !143
  %1081 = fptosi <4 x float> %1077 to <4 x i8>, !dbg !144
  %1082 = select <4 x i1> %1080, <4 x i8> %1081, <4 x i8> splat (i8 127), !dbg !145
  %1083 = getelementptr i8, ptr addrspace(1) %10, i64 %1014, !dbg !146
  %1084 = bitcast <4 x i8> %1069 to i32, !dbg !147
  %1085 = bitcast <4 x i8> %1082 to i32, !dbg !147
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1084, i32 %1085, ptr addrspace(1) %1083, i1 %17) #5, !dbg !147
  %1086 = getelementptr i8, ptr addrspace(1) %11, i64 %1014, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1084, i32 %1085, ptr addrspace(1) %1086, i1 %17) #5, !dbg !149
  %1087 = getelementptr i8, ptr addrspace(1) %12, i64 %1014, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1084, i32 %1085, ptr addrspace(1) %1087, i1 %17) #5, !dbg !151
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 112, scope: !6)
!16 = !DILocation(line: 44, column: 62, scope: !6)
!17 = !DILocation(line: 46, column: 66, scope: !6)
!18 = !DILocation(line: 32, column: 40, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 42, column: 51, scope: !6)
!24 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !23)
!26 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !23)
!27 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !23)
!28 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !23)
!29 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !23)
!30 = !DILocation(line: 45, column: 58, scope: !6)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 217, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!35 = !DILocation(line: 47, column: 79, scope: !6)
!36 = !DILocation(line: 218, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 219, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 219, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 219, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 221, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 221, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 222, column: 30, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 222, column: 38, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 222, column: 49, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 222, column: 22, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 222, column: 15, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !35)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 53, column: 40, scope: !6)
!52 = !DILocation(line: 85, column: 50, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 59, column: 41, scope: !6)
!58 = !DILocation(line: 59, column: 34, scope: !6)
!59 = !DILocation(line: 59, column: 51, scope: !6)
!60 = !DILocation(line: 60, column: 42, scope: !6)
!61 = !DILocation(line: 60, column: 35, scope: !6)
!62 = !DILocation(line: 60, column: 49, scope: !6)
!63 = !DILocation(line: 61, column: 35, scope: !6)
!64 = !DILocation(line: 61, column: 49, scope: !6)
!65 = !DILocation(line: 62, column: 35, scope: !6)
!66 = !DILocation(line: 62, column: 42, scope: !6)
!67 = !DILocation(line: 63, column: 35, scope: !6)
!68 = !DILocation(line: 63, column: 42, scope: !6)
!69 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 84, column: 47, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 59, column: 113, scope: !6)
!74 = !DILocation(line: 61, column: 102, scope: !6)
!75 = !DILocation(line: 63, column: 95, scope: !6)
!76 = !DILocation(line: 74, column: 24, scope: !6)
!77 = !DILocation(line: 76, column: 24, scope: !6)
!78 = !DILocation(line: 77, column: 24, scope: !6)
!79 = !DILocation(line: 79, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !70)
!82 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !70)
!83 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !70)
!84 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !72)
!85 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !72)
!86 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !72)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !90)
!90 = !DILocation(line: 87, column: 40, scope: !6)
!91 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !90)
!92 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !90)
!93 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !90)
!94 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !90)
!95 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !96)
!96 = !DILocation(line: 88, column: 40, scope: !6)
!97 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !96)
!98 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !96)
!99 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !96)
!100 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !96)
!101 = !DILocation(line: 89, column: 25, scope: !6)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 90, column: 25, scope: !6)
!104 = !DILocation(line: 90, column: 37, scope: !6)
!105 = !DILocation(line: 91, column: 25, scope: !6)
!106 = !DILocation(line: 91, column: 37, scope: !6)
!107 = !DILocation(line: 92, column: 25, scope: !6)
!108 = !DILocation(line: 92, column: 37, scope: !6)
!109 = !DILocation(line: 93, column: 25, scope: !6)
!110 = !DILocation(line: 93, column: 37, scope: !6)
!111 = !DILocation(line: 94, column: 25, scope: !6)
!112 = !DILocation(line: 94, column: 37, scope: !6)
!113 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 103, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 17, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 106, column: 46, scope: !6)
!118 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !119)
!119 = !DILocation(line: 105, column: 46, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !117)
!121 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !117)
!122 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !117)
!123 = !DILocation(line: 108, column: 24, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 46, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !125)
!129 = !DILocation(line: 114, column: 25, scope: !6)
!130 = !DILocation(line: 101, column: 36, scope: !6)
!131 = !DILocation(line: 101, column: 53, scope: !6)
!132 = !DILocation(line: 101, column: 115, scope: !6)
!133 = !DILocation(line: 117, column: 24, scope: !6)
!134 = !DILocation(line: 118, column: 36, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !136)
!136 = !DILocation(line: 121, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !136)
!140 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !141)
!141 = !DILocation(line: 123, column: 46, scope: !6)
!142 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !141)
!144 = !DILocation(line: 125, column: 25, scope: !6)
!145 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !141)
!146 = !DILocation(line: 126, column: 29, scope: !6)
!147 = !DILocation(line: 126, column: 53, scope: !6)
!148 = !DILocation(line: 127, column: 30, scope: !6)
!149 = !DILocation(line: 127, column: 54, scope: !6)
!150 = !DILocation(line: 128, column: 30, scope: !6)
!151 = !DILocation(line: 128, column: 54, scope: !6)
!152 = !DILocation(line: 101, column: 43, scope: !6)
!153 = !DILocation(line: 95, column: 4, scope: !6)
