; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !11
  %11 = and i32 %10, 2040, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = bitcast i32 %16 to <2 x bfloat>, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractelement <2 x bfloat> %17, i64 0, !dbg !15
  %25 = extractelement <2 x bfloat> %17, i64 1, !dbg !15
  %26 = extractelement <2 x bfloat> %19, i64 0, !dbg !15
  %27 = extractelement <2 x bfloat> %19, i64 1, !dbg !15
  %28 = extractelement <2 x bfloat> %21, i64 0, !dbg !15
  %29 = extractelement <2 x bfloat> %21, i64 1, !dbg !15
  %30 = extractelement <2 x bfloat> %23, i64 0, !dbg !15
  %31 = extractelement <2 x bfloat> %23, i64 1, !dbg !15
  %32 = fpext bfloat %24 to float, !dbg !16
  %33 = fpext bfloat %25 to float, !dbg !16
  %34 = fpext bfloat %26 to float, !dbg !16
  %35 = fpext bfloat %27 to float, !dbg !16
  %36 = fpext bfloat %28 to float, !dbg !16
  %37 = fpext bfloat %29 to float, !dbg !16
  %38 = fpext bfloat %30 to float, !dbg !16
  %39 = fpext bfloat %31 to float, !dbg !16
  %40 = add i32 %11, %12, !dbg !17
  %41 = sext i32 %40 to i64, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %8) #4, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !19
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !19
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !19
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !19
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !19
  %52 = extractelement <2 x bfloat> %45, i64 0, !dbg !19
  %53 = extractelement <2 x bfloat> %45, i64 1, !dbg !19
  %54 = extractelement <2 x bfloat> %47, i64 0, !dbg !19
  %55 = extractelement <2 x bfloat> %47, i64 1, !dbg !19
  %56 = extractelement <2 x bfloat> %49, i64 0, !dbg !19
  %57 = extractelement <2 x bfloat> %49, i64 1, !dbg !19
  %58 = extractelement <2 x bfloat> %51, i64 0, !dbg !19
  %59 = extractelement <2 x bfloat> %51, i64 1, !dbg !19
  %60 = fpext bfloat %52 to float, !dbg !20
  %61 = fpext bfloat %53 to float, !dbg !20
  %62 = fpext bfloat %54 to float, !dbg !20
  %63 = fpext bfloat %55 to float, !dbg !20
  %64 = fpext bfloat %56 to float, !dbg !20
  %65 = fpext bfloat %57 to float, !dbg !20
  %66 = fpext bfloat %58 to float, !dbg !20
  %67 = fpext bfloat %59 to float, !dbg !20
  %68 = fsub float 0.000000e+00, %32, !dbg !21
  %69 = fsub float 0.000000e+00, %33, !dbg !21
  %70 = fsub float 0.000000e+00, %34, !dbg !21
  %71 = fsub float 0.000000e+00, %35, !dbg !21
  %72 = fsub float 0.000000e+00, %36, !dbg !21
  %73 = fsub float 0.000000e+00, %37, !dbg !21
  %74 = fsub float 0.000000e+00, %38, !dbg !21
  %75 = fsub float 0.000000e+00, %39, !dbg !21
  %76 = fmul float %68, 0x3FF7154760000000, !dbg !25
  %77 = tail call float @llvm.nvvm.ex2.approx.f(float %76), !dbg !25
  %78 = fmul float %69, 0x3FF7154760000000, !dbg !25
  %79 = tail call float @llvm.nvvm.ex2.approx.f(float %78), !dbg !25
  %80 = fmul float %70, 0x3FF7154760000000, !dbg !25
  %81 = tail call float @llvm.nvvm.ex2.approx.f(float %80), !dbg !25
  %82 = fmul float %71, 0x3FF7154760000000, !dbg !25
  %83 = tail call float @llvm.nvvm.ex2.approx.f(float %82), !dbg !25
  %84 = fmul float %72, 0x3FF7154760000000, !dbg !25
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !25
  %86 = fmul float %73, 0x3FF7154760000000, !dbg !25
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !25
  %88 = fmul float %74, 0x3FF7154760000000, !dbg !25
  %89 = tail call float @llvm.nvvm.ex2.approx.f(float %88), !dbg !25
  %90 = fmul float %75, 0x3FF7154760000000, !dbg !25
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !25
  %92 = fadd float %77, 1.000000e+00, !dbg !26
  %93 = fadd float %79, 1.000000e+00, !dbg !26
  %94 = fadd float %81, 1.000000e+00, !dbg !26
  %95 = fadd float %83, 1.000000e+00, !dbg !26
  %96 = fadd float %85, 1.000000e+00, !dbg !26
  %97 = fadd float %87, 1.000000e+00, !dbg !26
  %98 = fadd float %89, 1.000000e+00, !dbg !26
  %99 = fadd float %91, 1.000000e+00, !dbg !26
  %100 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %92), !dbg !27
  %101 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %93), !dbg !27
  %102 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %94), !dbg !27
  %103 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %95), !dbg !27
  %104 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %96), !dbg !27
  %105 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %97), !dbg !27
  %106 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %98), !dbg !27
  %107 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %99), !dbg !27
  %108 = fmul float %100, %32, !dbg !28
  %109 = fmul float %101, %33, !dbg !28
  %110 = fmul float %102, %34, !dbg !28
  %111 = fmul float %103, %35, !dbg !28
  %112 = fmul float %104, %36, !dbg !28
  %113 = fmul float %105, %37, !dbg !28
  %114 = fmul float %106, %38, !dbg !28
  %115 = fmul float %107, %39, !dbg !28
  %116 = fmul float %108, %60, !dbg !29
  %117 = fmul float %109, %61, !dbg !29
  %118 = fmul float %110, %62, !dbg !29
  %119 = fmul float %111, %63, !dbg !29
  %120 = fmul float %112, %64, !dbg !29
  %121 = fmul float %113, %65, !dbg !29
  %122 = fmul float %114, %66, !dbg !29
  %123 = fmul float %115, %67, !dbg !29
  %124 = fadd float %116, 0.000000e+00, !dbg !30
  %125 = fadd float %117, 0.000000e+00, !dbg !30
  %126 = fadd float %118, 0.000000e+00, !dbg !30
  %127 = fadd float %119, 0.000000e+00, !dbg !30
  %128 = fadd float %120, 0.000000e+00, !dbg !30
  %129 = fadd float %121, 0.000000e+00, !dbg !30
  %130 = fadd float %122, 0.000000e+00, !dbg !30
  %131 = fadd float %123, 0.000000e+00, !dbg !30
  %132 = select i1 %8, float %124, float 0.000000e+00, !dbg !31
  %133 = select i1 %8, float %125, float 0.000000e+00, !dbg !31
  %134 = select i1 %8, float %126, float 0.000000e+00, !dbg !31
  %135 = select i1 %8, float %127, float 0.000000e+00, !dbg !31
  %136 = select i1 %8, float %128, float 0.000000e+00, !dbg !31
  %137 = select i1 %8, float %129, float 0.000000e+00, !dbg !31
  %138 = select i1 %8, float %130, float 0.000000e+00, !dbg !31
  %139 = select i1 %8, float %131, float 0.000000e+00, !dbg !31
  %140 = or disjoint i64 %13, 2048, !dbg !32
  %141 = icmp samesign ult i64 %140, 3072, !dbg !33
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !14
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %142, i1 %141) #4, !dbg !15
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !15
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !15
  %146 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !15
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !15
  %148 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !15
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !15
  %150 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !15
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !15
  %152 = extractelement <2 x bfloat> %145, i64 0, !dbg !15
  %153 = extractelement <2 x bfloat> %145, i64 1, !dbg !15
  %154 = extractelement <2 x bfloat> %147, i64 0, !dbg !15
  %155 = extractelement <2 x bfloat> %147, i64 1, !dbg !15
  %156 = extractelement <2 x bfloat> %149, i64 0, !dbg !15
  %157 = extractelement <2 x bfloat> %149, i64 1, !dbg !15
  %158 = extractelement <2 x bfloat> %151, i64 0, !dbg !15
  %159 = extractelement <2 x bfloat> %151, i64 1, !dbg !15
  %160 = fpext bfloat %152 to float, !dbg !16
  %161 = fpext bfloat %153 to float, !dbg !16
  %162 = fpext bfloat %154 to float, !dbg !16
  %163 = fpext bfloat %155 to float, !dbg !16
  %164 = fpext bfloat %156 to float, !dbg !16
  %165 = fpext bfloat %157 to float, !dbg !16
  %166 = fpext bfloat %158 to float, !dbg !16
  %167 = fpext bfloat %159 to float, !dbg !16
  %168 = trunc nuw nsw i64 %140 to i32, !dbg !17
  %169 = add i32 %12, %168, !dbg !17
  %170 = sext i32 %169 to i64, !dbg !18
  %171 = getelementptr bfloat, ptr addrspace(1) %1, i64 %170, !dbg !18
  %172 = and i1 %8, %141, !dbg !34
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %171, i1 %172) #4, !dbg !19
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !19
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !19
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !19
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !19
  %178 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !19
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !19
  %180 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !19
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !19
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !19
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !19
  %184 = extractelement <2 x bfloat> %177, i64 0, !dbg !19
  %185 = extractelement <2 x bfloat> %177, i64 1, !dbg !19
  %186 = extractelement <2 x bfloat> %179, i64 0, !dbg !19
  %187 = extractelement <2 x bfloat> %179, i64 1, !dbg !19
  %188 = extractelement <2 x bfloat> %181, i64 0, !dbg !19
  %189 = extractelement <2 x bfloat> %181, i64 1, !dbg !19
  %190 = fpext bfloat %182 to float, !dbg !20
  %191 = fpext bfloat %183 to float, !dbg !20
  %192 = fpext bfloat %184 to float, !dbg !20
  %193 = fpext bfloat %185 to float, !dbg !20
  %194 = fpext bfloat %186 to float, !dbg !20
  %195 = fpext bfloat %187 to float, !dbg !20
  %196 = fpext bfloat %188 to float, !dbg !20
  %197 = fpext bfloat %189 to float, !dbg !20
  %198 = fsub float 0.000000e+00, %160, !dbg !21
  %199 = fsub float 0.000000e+00, %161, !dbg !21
  %200 = fsub float 0.000000e+00, %162, !dbg !21
  %201 = fsub float 0.000000e+00, %163, !dbg !21
  %202 = fsub float 0.000000e+00, %164, !dbg !21
  %203 = fsub float 0.000000e+00, %165, !dbg !21
  %204 = fsub float 0.000000e+00, %166, !dbg !21
  %205 = fsub float 0.000000e+00, %167, !dbg !21
  %206 = fmul float %198, 0x3FF7154760000000, !dbg !25
  %207 = tail call float @llvm.nvvm.ex2.approx.f(float %206), !dbg !25
  %208 = fmul float %199, 0x3FF7154760000000, !dbg !25
  %209 = tail call float @llvm.nvvm.ex2.approx.f(float %208), !dbg !25
  %210 = fmul float %200, 0x3FF7154760000000, !dbg !25
  %211 = tail call float @llvm.nvvm.ex2.approx.f(float %210), !dbg !25
  %212 = fmul float %201, 0x3FF7154760000000, !dbg !25
  %213 = tail call float @llvm.nvvm.ex2.approx.f(float %212), !dbg !25
  %214 = fmul float %202, 0x3FF7154760000000, !dbg !25
  %215 = tail call float @llvm.nvvm.ex2.approx.f(float %214), !dbg !25
  %216 = fmul float %203, 0x3FF7154760000000, !dbg !25
  %217 = tail call float @llvm.nvvm.ex2.approx.f(float %216), !dbg !25
  %218 = fmul float %204, 0x3FF7154760000000, !dbg !25
  %219 = tail call float @llvm.nvvm.ex2.approx.f(float %218), !dbg !25
  %220 = fmul float %205, 0x3FF7154760000000, !dbg !25
  %221 = tail call float @llvm.nvvm.ex2.approx.f(float %220), !dbg !25
  %222 = fadd float %207, 1.000000e+00, !dbg !26
  %223 = fadd float %209, 1.000000e+00, !dbg !26
  %224 = fadd float %211, 1.000000e+00, !dbg !26
  %225 = fadd float %213, 1.000000e+00, !dbg !26
  %226 = fadd float %215, 1.000000e+00, !dbg !26
  %227 = fadd float %217, 1.000000e+00, !dbg !26
  %228 = fadd float %219, 1.000000e+00, !dbg !26
  %229 = fadd float %221, 1.000000e+00, !dbg !26
  %230 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %222), !dbg !27
  %231 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %223), !dbg !27
  %232 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %224), !dbg !27
  %233 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %225), !dbg !27
  %234 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %226), !dbg !27
  %235 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %227), !dbg !27
  %236 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %228), !dbg !27
  %237 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %229), !dbg !27
  %238 = fmul float %230, %160, !dbg !28
  %239 = fmul float %231, %161, !dbg !28
  %240 = fmul float %232, %162, !dbg !28
  %241 = fmul float %233, %163, !dbg !28
  %242 = fmul float %234, %164, !dbg !28
  %243 = fmul float %235, %165, !dbg !28
  %244 = fmul float %236, %166, !dbg !28
  %245 = fmul float %237, %167, !dbg !28
  %246 = fmul float %238, %190, !dbg !29
  %247 = fmul float %239, %191, !dbg !29
  %248 = fmul float %240, %192, !dbg !29
  %249 = fmul float %241, %193, !dbg !29
  %250 = fmul float %242, %194, !dbg !29
  %251 = fmul float %243, %195, !dbg !29
  %252 = fmul float %244, %196, !dbg !29
  %253 = fmul float %245, %197, !dbg !29
  %254 = fadd float %132, %246, !dbg !30
  %255 = fadd float %133, %247, !dbg !30
  %256 = fadd float %134, %248, !dbg !30
  %257 = fadd float %135, %249, !dbg !30
  %258 = fadd float %136, %250, !dbg !30
  %259 = fadd float %137, %251, !dbg !30
  %260 = fadd float %138, %252, !dbg !30
  %261 = fadd float %139, %253, !dbg !30
  %262 = select i1 %172, float %254, float %132, !dbg !31
  %263 = select i1 %172, float %255, float %133, !dbg !31
  %264 = select i1 %172, float %256, float %134, !dbg !31
  %265 = select i1 %172, float %257, float %135, !dbg !31
  %266 = select i1 %172, float %258, float %136, !dbg !31
  %267 = select i1 %172, float %259, float %137, !dbg !31
  %268 = select i1 %172, float %260, float %138, !dbg !31
  %269 = select i1 %172, float %261, float %139, !dbg !31
  %270 = lshr i32 %9, 5, !dbg !11
  %271 = and i32 %9, 31, !dbg !11
  %272 = fadd float %262, %263, !dbg !35
  %273 = fadd float %264, %272, !dbg !35
  %274 = fadd float %265, %273, !dbg !35
  %275 = fadd float %266, %274, !dbg !35
  %276 = fadd float %267, %275, !dbg !35
  %277 = fadd float %268, %276, !dbg !35
  %278 = fadd float %269, %277, !dbg !35
  %279 = bitcast float %278 to i32, !dbg !38
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !38
  %281 = bitcast i32 %280 to float, !dbg !38
  %282 = fadd float %278, %281, !dbg !35
  %283 = bitcast float %282 to i32, !dbg !38
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !38
  %285 = bitcast i32 %284 to float, !dbg !38
  %286 = fadd float %282, %285, !dbg !35
  %287 = bitcast float %286 to i32, !dbg !38
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !38
  %289 = bitcast i32 %288 to float, !dbg !38
  %290 = fadd float %286, %289, !dbg !35
  %291 = bitcast float %290 to i32, !dbg !38
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !38
  %293 = bitcast i32 %292 to float, !dbg !38
  %294 = fadd float %290, %293, !dbg !35
  %295 = bitcast float %294 to i32, !dbg !38
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !38
  %297 = bitcast i32 %296 to float, !dbg !38
  %298 = fadd float %294, %297, !dbg !35
  %299 = and i32 %270, 7, !dbg !38
  %300 = icmp eq i32 %271, 0, !dbg !38
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !38
  %302 = bitcast float %298 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 %300) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %303 = icmp slt i32 %9, 8, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !38
  %305 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %304, i1 %303) #4, !dbg !38
  %306 = bitcast i32 %305 to float, !dbg !38
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !38
  %308 = bitcast i32 %307 to float, !dbg !38
  %309 = fadd float %306, %308, !dbg !35
  %310 = bitcast float %309 to i32, !dbg !38
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !38
  %312 = bitcast i32 %311 to float, !dbg !38
  %313 = fadd float %309, %312, !dbg !35
  %314 = bitcast float %313 to i32, !dbg !38
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !38
  %316 = bitcast i32 %315 to float, !dbg !38
  %317 = fadd float %313, %316, !dbg !35
  %318 = and i32 %9, 7, !dbg !38
  %319 = icmp eq i32 %318, 0, !dbg !38
  %320 = and i1 %303, %319, !dbg !38
  %321 = bitcast float %317 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %321, i1 %320) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %322 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %323 = sext i32 %7 to i64, !dbg !39
  %324 = getelementptr float, ptr addrspace(1) %2, i64 %323, !dbg !39
  %325 = and i32 %9, 255, !dbg !40
  %326 = icmp eq i32 %325, 0, !dbg !40
  %327 = and i1 %8, %326, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %324, i1 %327) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 36, column: 94, scope: !6)
!17 = !DILocation(line: 37, column: 41, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 113, scope: !6)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!24 = !DILocation(line: 39, column: 26, scope: !6)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 40, column: 22, scope: !6)
!29 = !DILocation(line: 44, column: 22, scope: !6)
!30 = !DILocation(line: 46, column: 25, scope: !6)
!31 = !DILocation(line: 47, column: 50, scope: !6)
!32 = !DILocation(line: 31, column: 31, scope: !6)
!33 = !DILocation(line: 32, column: 29, scope: !6)
!34 = !DILocation(line: 37, column: 61, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!37 = !DILocation(line: 48, column: 27, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !22, inlinedAt: !37)
!39 = !DILocation(line: 49, column: 25, scope: !6)
!40 = !DILocation(line: 49, column: 37, scope: !6)
!41 = !DILocation(line: 49, column: 4, scope: !6)
