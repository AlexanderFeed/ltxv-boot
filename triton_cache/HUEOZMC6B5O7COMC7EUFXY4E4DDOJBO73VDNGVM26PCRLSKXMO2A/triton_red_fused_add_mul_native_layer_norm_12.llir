; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused_add_mul_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
.peel.next:
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 3600, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 1, !dbg !11
  %14 = and i32 %13, 510, !dbg !11
  %15 = mul i32 %9, 3072, !dbg !12
  %16 = zext nneg i32 %14 to i64, !dbg !13
  %17 = or disjoint i32 %14, %15, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !16
  %21 = or disjoint i64 %16, 6144, !dbg !17
  %22 = getelementptr bfloat, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 true) #5, !dbg !19
  %24 = getelementptr bfloat, ptr addrspace(1) %3, i64 %21, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 %10) #5, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %4, i64 %16, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 true) #5, !dbg !25
  %30 = bitcast i32 %23 to <2 x bfloat>, !dbg !19
  %31 = bitcast i32 %25 to <2 x bfloat>, !dbg !21
  %32 = bitcast i32 %27 to <2 x bfloat>, !dbg !23
  %33 = bitcast i32 %29 to <2 x bfloat>, !dbg !25
  %34 = bitcast i32 %20 to <2 x bfloat>, !dbg !16
  %35 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !26
  %36 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !27
  %37 = fadd <2 x float> %35, %36, !dbg !28
  %38 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !29
  %39 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !30
  %40 = fadd <2 x float> %38, %39, !dbg !31
  %41 = fmul <2 x float> %37, %40, !dbg !32
  %42 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !33
  %43 = fadd <2 x float> %41, %42, !dbg !34
  %44 = fptrunc <2 x float> %43 to <2 x bfloat>, !dbg !35
  %45 = bitcast <2 x bfloat> %44 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %45, ptr addrspace(1) %26, i1 %10) #5, !dbg !35
  %46 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !36
  %47 = extractelement <2 x float> %43, i64 0, !dbg !37
  %48 = select i1 %10, float %47, float 0.000000e+00, !dbg !37
  %49 = extractelement <2 x float> %43, i64 1, !dbg !37
  %50 = select i1 %10, float %49, float 0.000000e+00, !dbg !37
  br label %51, !dbg !13

51:                                               ; preds = %.peel.next, %51
  %indvars.iv = phi i64 [ 512, %.peel.next ], [ %indvars.iv.next, %51 ]
  %.pn30 = phi float [ %46, %.peel.next ], [ %76, %51 ]
  %.pn28 = phi float [ %46, %.peel.next ], [ %77, %51 ]
  %52 = phi float [ 0.000000e+00, %.peel.next ], [ %103, %51 ]
  %53 = phi float [ 0.000000e+00, %.peel.next ], [ %104, %51 ]
  %.pn34 = phi float [ %48, %.peel.next ], [ %101, %51 ]
  %.pn32 = phi float [ %50, %.peel.next ], [ %102, %51 ]
  %54 = or disjoint i64 %indvars.iv, %16, !dbg !38
  %55 = trunc nuw nsw i64 %54 to i32, !dbg !14
  %56 = add i32 %15, %55, !dbg !14
  %57 = sext i32 %56 to i64, !dbg !15
  %58 = getelementptr bfloat, ptr addrspace(1) %1, i64 %57, !dbg !15
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %58, i1 %10) #5, !dbg !16
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !16
  %61 = add nuw nsw i64 %54, 6144, !dbg !17
  %62 = getelementptr bfloat, ptr addrspace(1) %2, i64 %61, !dbg !18
  %63 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %62, i1 true) #5, !dbg !19
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !19
  %65 = getelementptr bfloat, ptr addrspace(1) %3, i64 %61, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %65, i1 true) #5, !dbg !21
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !21
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %10) #5, !dbg !23
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !23
  %71 = getelementptr bfloat, ptr addrspace(1) %4, i64 %54, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %71, i1 true) #5, !dbg !25
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !25
  %74 = fadd float %.pn30, 1.000000e+00, !dbg !39
  %75 = fadd float %.pn28, 1.000000e+00, !dbg !39
  %76 = select i1 %10, float %74, float %.pn30, !dbg !36
  %77 = select i1 %10, float %75, float %.pn28, !dbg !36
  %78 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !33
  %79 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !26
  %80 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !27
  %81 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !29
  %82 = fpext <2 x bfloat> %73 to <2 x float>, !dbg !30
  %83 = fadd <2 x float> %79, %80, !dbg !28
  %84 = fadd <2 x float> %81, %82, !dbg !31
  %85 = fmul <2 x float> %83, %84, !dbg !32
  %86 = fadd <2 x float> %85, %78, !dbg !34
  %87 = extractelement <2 x float> %86, i64 0, !dbg !43
  %88 = fsub float %87, %.pn34, !dbg !44
  %89 = tail call float @llvm.nvvm.div.full(float %88, float %74), !dbg !45
  %90 = fadd float %.pn34, %89, !dbg !46
  %91 = fsub float %87, %90, !dbg !43
  %92 = fmul float %88, %91, !dbg !47
  %93 = fadd float %52, %92, !dbg !48
  %94 = extractelement <2 x float> %86, i64 1, !dbg !43
  %95 = fsub float %94, %.pn32, !dbg !44
  %96 = tail call float @llvm.nvvm.div.full(float %95, float %75), !dbg !45
  %97 = fadd float %.pn32, %96, !dbg !46
  %98 = fsub float %94, %97, !dbg !43
  %99 = fmul float %95, %98, !dbg !47
  %100 = fadd float %53, %99, !dbg !48
  %101 = select i1 %10, float %90, float %.pn34, !dbg !37
  %102 = select i1 %10, float %97, float %.pn32, !dbg !37
  %103 = select i1 %10, float %93, float %52, !dbg !49
  %104 = select i1 %10, float %100, float %53, !dbg !49
  %105 = fptrunc <2 x float> %86 to <2 x bfloat>, !dbg !35
  %106 = bitcast <2 x bfloat> %105 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %68, i1 %10) #5, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !13
  %107 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !13
  br i1 %107, label %51, label %__nv_rsqrtf.exit, !dbg !13, !llvm.loop !50

__nv_rsqrtf.exit:                                 ; preds = %51
  %108 = lshr i32 %11, 5, !dbg !11
  %109 = fsub float %102, %101, !dbg !52
  %110 = fadd float %76, %77, !dbg !55
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !56
  %112 = tail call float @llvm.nvvm.div.full(float %77, float %110), !dbg !57
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !58
  %114 = fmul float %109, %113, !dbg !59
  %115 = fadd float %101, %114, !dbg !60
  %116 = fadd float %103, %104, !dbg !61
  %117 = fmul float %109, %109, !dbg !62
  %118 = fmul float %117, %76, !dbg !63
  %119 = fmul float %118, %113, !dbg !64
  %120 = fadd float %116, %119, !dbg !65
  %121 = bitcast float %115 to i32, !dbg !66
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !66
  %123 = bitcast i32 %122 to float, !dbg !66
  %124 = bitcast float %120 to i32, !dbg !66
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !66
  %126 = bitcast i32 %125 to float, !dbg !66
  %127 = bitcast float %110 to i32, !dbg !66
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !66
  %129 = bitcast i32 %128 to float, !dbg !66
  %130 = fsub float %123, %115, !dbg !52
  %131 = fadd float %110, %129, !dbg !55
  %132 = fcmp oeq float %131, 0.000000e+00, !dbg !56
  %133 = tail call float @llvm.nvvm.div.full(float %129, float %131), !dbg !57
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !58
  %135 = fmul float %130, %134, !dbg !59
  %136 = fadd float %115, %135, !dbg !60
  %137 = fadd float %120, %126, !dbg !61
  %138 = fmul float %130, %130, !dbg !62
  %139 = fmul float %110, %138, !dbg !63
  %140 = fmul float %139, %134, !dbg !64
  %141 = fadd float %137, %140, !dbg !65
  %142 = bitcast float %136 to i32, !dbg !66
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !66
  %144 = bitcast i32 %143 to float, !dbg !66
  %145 = bitcast float %141 to i32, !dbg !66
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !66
  %147 = bitcast i32 %146 to float, !dbg !66
  %148 = bitcast float %131 to i32, !dbg !66
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 8, i32 31), !dbg !66
  %150 = bitcast i32 %149 to float, !dbg !66
  %151 = fsub float %144, %136, !dbg !52
  %152 = fadd float %131, %150, !dbg !55
  %153 = fcmp oeq float %152, 0.000000e+00, !dbg !56
  %154 = tail call float @llvm.nvvm.div.full(float %150, float %152), !dbg !57
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !58
  %156 = fmul float %151, %155, !dbg !59
  %157 = fadd float %136, %156, !dbg !60
  %158 = fadd float %141, %147, !dbg !61
  %159 = fmul float %151, %151, !dbg !62
  %160 = fmul float %131, %159, !dbg !63
  %161 = fmul float %155, %160, !dbg !64
  %162 = fadd float %158, %161, !dbg !65
  %163 = bitcast float %157 to i32, !dbg !66
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !66
  %165 = bitcast i32 %164 to float, !dbg !66
  %166 = bitcast float %162 to i32, !dbg !66
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !66
  %168 = bitcast i32 %167 to float, !dbg !66
  %169 = bitcast float %152 to i32, !dbg !66
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 4, i32 31), !dbg !66
  %171 = bitcast i32 %170 to float, !dbg !66
  %172 = fsub float %165, %157, !dbg !52
  %173 = fadd float %152, %171, !dbg !55
  %174 = fcmp oeq float %173, 0.000000e+00, !dbg !56
  %175 = tail call float @llvm.nvvm.div.full(float %171, float %173), !dbg !57
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !58
  %177 = fmul float %172, %176, !dbg !59
  %178 = fadd float %157, %177, !dbg !60
  %179 = fadd float %162, %168, !dbg !61
  %180 = fmul float %172, %172, !dbg !62
  %181 = fmul float %152, %180, !dbg !63
  %182 = fmul float %176, %181, !dbg !64
  %183 = fadd float %179, %182, !dbg !65
  %184 = bitcast float %178 to i32, !dbg !66
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !66
  %186 = bitcast i32 %185 to float, !dbg !66
  %187 = bitcast float %183 to i32, !dbg !66
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !66
  %189 = bitcast i32 %188 to float, !dbg !66
  %190 = bitcast float %173 to i32, !dbg !66
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !66
  %192 = bitcast i32 %191 to float, !dbg !66
  %193 = fsub float %186, %178, !dbg !52
  %194 = fadd float %173, %192, !dbg !55
  %195 = fcmp oeq float %194, 0.000000e+00, !dbg !56
  %196 = tail call float @llvm.nvvm.div.full(float %192, float %194), !dbg !57
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !58
  %198 = fmul float %193, %197, !dbg !59
  %199 = fadd float %178, %198, !dbg !60
  %200 = fadd float %183, %189, !dbg !61
  %201 = fmul float %193, %193, !dbg !62
  %202 = fmul float %173, %201, !dbg !63
  %203 = fmul float %197, %202, !dbg !64
  %204 = fadd float %200, %203, !dbg !65
  %205 = bitcast float %199 to i32, !dbg !66
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !66
  %207 = bitcast i32 %206 to float, !dbg !66
  %208 = bitcast float %204 to i32, !dbg !66
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !66
  %210 = bitcast i32 %209 to float, !dbg !66
  %211 = bitcast float %194 to i32, !dbg !66
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !66
  %213 = bitcast i32 %212 to float, !dbg !66
  %214 = fsub float %207, %199, !dbg !52
  %215 = fadd float %194, %213, !dbg !55
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !56
  %217 = tail call float @llvm.nvvm.div.full(float %213, float %215), !dbg !57
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !58
  %219 = fmul float %214, %218, !dbg !59
  %220 = fadd float %199, %219, !dbg !60
  %221 = fadd float %204, %210, !dbg !61
  %222 = fmul float %214, %214, !dbg !62
  %223 = fmul float %194, %222, !dbg !63
  %224 = fmul float %218, %223, !dbg !64
  %225 = fadd float %221, %224, !dbg !65
  %226 = and i32 %108, 7, !dbg !66
  %227 = icmp eq i32 %12, 0, !dbg !66
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !66
  %229 = bitcast float %220 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %227) #5, !dbg !66
  %230 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %226, !dbg !66
  %231 = bitcast float %225 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 %227) #5, !dbg !66
  %232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %226, !dbg !66
  %233 = bitcast float %215 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 %227) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %234 = icmp slt i32 %11, 8, !dbg !66
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !66
  %236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %235, i1 %234) #5, !dbg !66
  %237 = bitcast i32 %236 to float, !dbg !66
  %238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %11, !dbg !66
  %239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %238, i1 %234) #5, !dbg !66
  %240 = bitcast i32 %239 to float, !dbg !66
  %241 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !66
  %242 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %241, i1 %234) #5, !dbg !66
  %243 = bitcast i32 %242 to float, !dbg !66
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !66
  %245 = bitcast i32 %244 to float, !dbg !66
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !66
  %247 = bitcast i32 %246 to float, !dbg !66
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !66
  %249 = bitcast i32 %248 to float, !dbg !66
  %250 = fsub float %245, %237, !dbg !52
  %251 = fadd float %243, %249, !dbg !55
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !56
  %253 = tail call float @llvm.nvvm.div.full(float %249, float %251), !dbg !57
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !58
  %255 = fmul float %250, %254, !dbg !59
  %256 = fadd float %255, %237, !dbg !60
  %257 = fadd float %240, %247, !dbg !61
  %258 = fmul float %250, %250, !dbg !62
  %259 = fmul float %258, %243, !dbg !63
  %260 = fmul float %259, %254, !dbg !64
  %261 = fadd float %257, %260, !dbg !65
  %262 = bitcast float %256 to i32, !dbg !66
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !66
  %264 = bitcast i32 %263 to float, !dbg !66
  %265 = bitcast float %261 to i32, !dbg !66
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !66
  %267 = bitcast i32 %266 to float, !dbg !66
  %268 = bitcast float %251 to i32, !dbg !66
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !66
  %270 = bitcast i32 %269 to float, !dbg !66
  %271 = fsub float %264, %256, !dbg !52
  %272 = fadd float %251, %270, !dbg !55
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !56
  %274 = tail call float @llvm.nvvm.div.full(float %270, float %272), !dbg !57
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !58
  %276 = fmul float %271, %275, !dbg !59
  %277 = fadd float %256, %276, !dbg !60
  %278 = fadd float %261, %267, !dbg !61
  %279 = fmul float %271, %271, !dbg !62
  %280 = fmul float %251, %279, !dbg !63
  %281 = fmul float %275, %280, !dbg !64
  %282 = fadd float %278, %281, !dbg !65
  %283 = bitcast float %277 to i32, !dbg !66
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 1, i32 31), !dbg !66
  %285 = bitcast i32 %284 to float, !dbg !66
  %286 = bitcast float %282 to i32, !dbg !66
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !66
  %288 = bitcast i32 %287 to float, !dbg !66
  %289 = bitcast float %272 to i32, !dbg !66
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !66
  %291 = bitcast i32 %290 to float, !dbg !66
  %292 = fsub float %285, %277, !dbg !52
  %293 = fadd float %272, %291, !dbg !55
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !56
  %295 = tail call float @llvm.nvvm.div.full(float %291, float %293), !dbg !57
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !58
  %297 = fmul float %292, %296, !dbg !59
  %298 = fadd float %277, %297, !dbg !60
  %299 = fadd float %282, %288, !dbg !61
  %300 = fmul float %292, %292, !dbg !62
  %301 = fmul float %272, %300, !dbg !63
  %302 = fmul float %296, %301, !dbg !64
  %303 = fadd float %299, %302, !dbg !65
  %304 = and i32 %11, 7, !dbg !66
  %305 = icmp eq i32 %304, 0, !dbg !66
  %306 = and i1 %234, %305, !dbg !66
  %307 = bitcast float %298 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %307, i1 %306) #5, !dbg !66
  %308 = bitcast float %303 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %308, i1 %306) #5, !dbg !66
  %309 = bitcast float %293 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %309, i1 %306) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %310 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !66
  %311 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !66
  %312 = tail call float @llvm.nvvm.div.full(float %311, float 3.072000e+03), !dbg !67
  %313 = fadd float %312, 0x3EB0C6F7A0000000, !dbg !68
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %.not.i5 = icmp eq i32 %315, 0, !dbg !69
  br i1 %.not.i5, label %318, label %316, !dbg !69

316:                                              ; preds = %__nv_rsqrtf.exit
  %317 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %313), !dbg !69
  br label %__nv_rsqrtf.exit7, !dbg !69

318:                                              ; preds = %__nv_rsqrtf.exit
  %319 = tail call float @llvm.nvvm.rsqrt.approx.f(float %313), !dbg !69
  br label %__nv_rsqrtf.exit7, !dbg !69

__nv_rsqrtf.exit7:                                ; preds = %316, %318
  %.0.i6 = phi float [ %317, %316 ], [ %319, %318 ], !dbg !69
  %320 = insertelement <2 x float> poison, float %.0.i6, i64 0, !dbg !70
  %321 = shufflevector <2 x float> %320, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %322 = insertelement <2 x float> poison, float %310, i64 0, !dbg !71
  %323 = shufflevector <2 x float> %322, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  br label %324, !dbg !72

324:                                              ; preds = %__nv_rsqrtf.exit7, %324
  %indvars.iv16 = phi i64 [ 0, %__nv_rsqrtf.exit7 ], [ %indvars.iv.next17, %324 ]
  %325 = or disjoint i64 %indvars.iv16, %16, !dbg !73
  %326 = trunc nuw nsw i64 %325 to i32, !dbg !74
  %327 = add i32 %15, %326, !dbg !74
  %328 = sext i32 %327 to i64, !dbg !75
  %329 = getelementptr bfloat, ptr addrspace(1) %0, i64 %328, !dbg !75
  %330 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %329, i1 %10) #5, !dbg !76
  %331 = bitcast i32 %330 to <2 x bfloat>, !dbg !76
  %332 = or disjoint i64 %325, 12288, !dbg !77
  %333 = getelementptr bfloat, ptr addrspace(1) %2, i64 %332, !dbg !78
  %334 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %333, i1 true) #5, !dbg !79
  %335 = bitcast i32 %334 to <2 x bfloat>, !dbg !79
  %336 = getelementptr bfloat, ptr addrspace(1) %3, i64 %332, !dbg !80
  %337 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %336, i1 true) #5, !dbg !81
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !81
  %339 = add nuw nsw i64 %325, 9216, !dbg !82
  %340 = getelementptr bfloat, ptr addrspace(1) %2, i64 %339, !dbg !83
  %341 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %340, i1 true) #5, !dbg !84
  %342 = bitcast i32 %341 to <2 x bfloat>, !dbg !84
  %343 = getelementptr bfloat, ptr addrspace(1) %3, i64 %339, !dbg !85
  %344 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %343, i1 true) #5, !dbg !86
  %345 = bitcast i32 %344 to <2 x bfloat>, !dbg !86
  %346 = getelementptr bfloat, ptr addrspace(1) %5, i64 %328, !dbg !87
  %347 = fpext <2 x bfloat> %331 to <2 x float>, !dbg !88
  %348 = fpext <2 x bfloat> %335 to <2 x float>, !dbg !89
  %349 = fpext <2 x bfloat> %338 to <2 x float>, !dbg !90
  %350 = fpext <2 x bfloat> %342 to <2 x float>, !dbg !91
  %351 = fpext <2 x bfloat> %345 to <2 x float>, !dbg !92
  %352 = fsub <2 x float> %347, %323, !dbg !71
  %353 = fmul <2 x float> %321, %352, !dbg !70
  %354 = fadd <2 x float> %348, %349, !dbg !93
  %355 = fadd <2 x float> %354, splat (float 1.000000e+00), !dbg !94
  %356 = fmul <2 x float> %353, %355, !dbg !95
  %357 = fadd <2 x float> %350, %351, !dbg !96
  %358 = fadd <2 x float> %356, %357, !dbg !97
  %359 = fptrunc <2 x float> %358 to <2 x bfloat>, !dbg !98
  %360 = bitcast <2 x bfloat> %359 to i32, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %346, i1 %10) #5, !dbg !98
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 512, !dbg !72
  %361 = icmp samesign ult i64 %indvars.iv16, 2560, !dbg !72
  br i1 %361, label %324, label %362, !dbg !72

362:                                              ; preds = %324
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3mgiydlquqgahxuxqrkeu3hg6gxhrbbjx4qxncdiesulz4vxqnh.py", directory: "/tmp/torchinductor_root/3m")
!4 = !{ptr @triton_red_fused_add_mul_native_layer_norm_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_add_mul_native_layer_norm_12", linkageName: "triton_red_fused_add_mul_native_layer_norm_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 39, column: 41, scope: !6)
!18 = !DILocation(line: 39, column: 34, scope: !6)
!19 = !DILocation(line: 39, column: 48, scope: !6)
!20 = !DILocation(line: 40, column: 34, scope: !6)
!21 = !DILocation(line: 40, column: 48, scope: !6)
!22 = !DILocation(line: 41, column: 38, scope: !6)
!23 = !DILocation(line: 41, column: 55, scope: !6)
!24 = !DILocation(line: 42, column: 34, scope: !6)
!25 = !DILocation(line: 42, column: 41, scope: !6)
!26 = !DILocation(line: 39, column: 101, scope: !6)
!27 = !DILocation(line: 40, column: 101, scope: !6)
!28 = !DILocation(line: 43, column: 22, scope: !6)
!29 = !DILocation(line: 41, column: 117, scope: !6)
!30 = !DILocation(line: 42, column: 94, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 45, column: 22, scope: !6)
!33 = !DILocation(line: 38, column: 113, scope: !6)
!34 = !DILocation(line: 46, column: 22, scope: !6)
!35 = !DILocation(line: 55, column: 55, scope: !6)
!36 = !DILocation(line: 54, column: 68, scope: !6)
!37 = !DILocation(line: 52, column: 64, scope: !6)
!38 = !DILocation(line: 33, column: 31, scope: !6)
!39 = !DILocation(line: 209, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 55, scope: !6)
!43 = !DILocation(line: 211, column: 39, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 208, column: 24, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 210, column: 34, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 210, column: 26, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 211, column: 31, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 211, column: 22, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 53, column: 60, scope: !6)
!50 = distinct !{!50, !51}
!51 = !{!"llvm.loop.peeled.count", i32 1}
!52 = !DILocation(line: 217, column: 21, scope: !53, inlinedAt: !54)
!53 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!54 = !DILocation(line: 56, column: 85, scope: !6)
!55 = !DILocation(line: 218, column: 28, scope: !53, inlinedAt: !54)
!56 = !DILocation(line: 219, column: 39, scope: !53, inlinedAt: !54)
!57 = !DILocation(line: 219, column: 60, scope: !53, inlinedAt: !54)
!58 = !DILocation(line: 219, column: 49, scope: !53, inlinedAt: !54)
!59 = !DILocation(line: 221, column: 25, scope: !53, inlinedAt: !54)
!60 = !DILocation(line: 221, column: 17, scope: !53, inlinedAt: !54)
!61 = !DILocation(line: 222, column: 15, scope: !53, inlinedAt: !54)
!62 = !DILocation(line: 222, column: 30, scope: !53, inlinedAt: !54)
!63 = !DILocation(line: 222, column: 38, scope: !53, inlinedAt: !54)
!64 = !DILocation(line: 222, column: 49, scope: !53, inlinedAt: !54)
!65 = !DILocation(line: 222, column: 22, scope: !53, inlinedAt: !54)
!66 = !DILocation(line: 229, column: 46, scope: !40, inlinedAt: !54)
!67 = !DILocation(line: 74, column: 25, scope: !6)
!68 = !DILocation(line: 76, column: 24, scope: !6)
!69 = !DILocation(line: 77, column: 32, scope: !6)
!70 = !DILocation(line: 78, column: 24, scope: !6)
!71 = !DILocation(line: 72, column: 24, scope: !6)
!72 = !DILocation(line: 60, column: 40, scope: !6)
!73 = !DILocation(line: 61, column: 31, scope: !6)
!74 = !DILocation(line: 66, column: 46, scope: !6)
!75 = !DILocation(line: 66, column: 39, scope: !6)
!76 = !DILocation(line: 66, column: 56, scope: !6)
!77 = !DILocation(line: 67, column: 43, scope: !6)
!78 = !DILocation(line: 67, column: 35, scope: !6)
!79 = !DILocation(line: 67, column: 50, scope: !6)
!80 = !DILocation(line: 68, column: 35, scope: !6)
!81 = !DILocation(line: 68, column: 50, scope: !6)
!82 = !DILocation(line: 69, column: 42, scope: !6)
!83 = !DILocation(line: 69, column: 35, scope: !6)
!84 = !DILocation(line: 69, column: 49, scope: !6)
!85 = !DILocation(line: 70, column: 35, scope: !6)
!86 = !DILocation(line: 70, column: 49, scope: !6)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 66, column: 118, scope: !6)
!89 = !DILocation(line: 67, column: 103, scope: !6)
!90 = !DILocation(line: 68, column: 103, scope: !6)
!91 = !DILocation(line: 69, column: 102, scope: !6)
!92 = !DILocation(line: 70, column: 102, scope: !6)
!93 = !DILocation(line: 80, column: 24, scope: !6)
!94 = !DILocation(line: 82, column: 24, scope: !6)
!95 = !DILocation(line: 83, column: 24, scope: !6)
!96 = !DILocation(line: 84, column: 24, scope: !6)
!97 = !DILocation(line: 85, column: 24, scope: !6)
!98 = !DILocation(line: 86, column: 53, scope: !6)
!99 = !DILocation(line: 60, column: 4, scope: !6)
