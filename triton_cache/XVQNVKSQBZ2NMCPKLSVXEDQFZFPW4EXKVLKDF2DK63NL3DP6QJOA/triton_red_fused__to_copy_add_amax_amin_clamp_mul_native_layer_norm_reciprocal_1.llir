; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = icmp slt i32 %20, 4112, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 31, !dbg !11
  %24 = lshr i32 %22, 5, !dbg !11
  %25 = shl i32 %22, 1, !dbg !11
  %26 = and i32 %25, 1022, !dbg !11
  %27 = mul i32 %20, 3072, !dbg !12
  %28 = or disjoint i32 %26, %27
  %29 = sext i32 %28 to i64, !dbg !13
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !13
  br i1 %21, label %__nv_rsqrtf.exit.loopexit, label %.split.preheader

.split.preheader:                                 ; preds = %19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %30, i1 false) #5, !dbg !14
  %32 = add i32 %28, 1024, !dbg !15
  %33 = sext i32 %32 to i64, !dbg !13
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !13
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %34, i1 false) #5, !dbg !14
  %36 = add i32 %28, 2048, !dbg !15
  %37 = sext i32 %36 to i64, !dbg !13
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !13
  %39 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %38, i1 false) #5, !dbg !14
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit.loopexit:                        ; preds = %19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %30, i1 true) #5, !dbg !14
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !14
  %42 = add i32 %28, 1024, !dbg !15
  %43 = sext i32 %42 to i64, !dbg !13
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !13
  %45 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 true) #5, !dbg !14
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !14
  %47 = add i32 %28, 2048, !dbg !15
  %48 = sext i32 %47 to i64, !dbg !13
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !13
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 true) #5, !dbg !14
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !14
  %52 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !20
  %53 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !20
  %54 = fsub <2 x float> %53, %52, !dbg !21
  %55 = extractelement <2 x float> %54, i64 0, !dbg !23
  %56 = tail call float @llvm.nvvm.div.full(float %55, float 2.000000e+00), !dbg !23
  %57 = extractelement <2 x float> %54, i64 1, !dbg !23
  %58 = tail call float @llvm.nvvm.div.full(float %57, float 2.000000e+00), !dbg !23
  %59 = insertelement <2 x float> poison, float %56, i64 0, !dbg !24
  %60 = insertelement <2 x float> %59, float %58, i64 1, !dbg !24
  %61 = fadd <2 x float> %60, %52, !dbg !24
  %62 = extractelement <2 x float> %61, i64 1, !dbg !24
  %63 = fsub <2 x float> %53, %61, !dbg !25
  %64 = fmul <2 x float> %54, %63, !dbg !26
  %65 = fadd <2 x float> %64, zeroinitializer, !dbg !27
  %66 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !20
  %67 = extractelement <2 x float> %66, i64 1, !dbg !20
  %68 = extractelement <2 x float> %61, i64 0, !dbg !24
  %69 = fsub <2 x float> %66, %61, !dbg !21
  %70 = extractelement <2 x float> %69, i64 0, !dbg !21
  %71 = tail call float @llvm.nvvm.div.full(float %70, float 3.000000e+00), !dbg !23
  %72 = fadd float %68, %71, !dbg !24
  %73 = fsub float %67, %62, !dbg !21
  %74 = insertelement <2 x float> %61, float %72, i64 0, !dbg !25
  %75 = fsub <2 x float> %66, %74, !dbg !25
  %76 = tail call float @llvm.nvvm.div.full(float %73, float 3.000000e+00), !dbg !23
  %77 = fadd float %62, %76, !dbg !24
  %78 = fsub float %67, %77, !dbg !25
  %79 = insertelement <2 x float> %69, float %78, i64 1, !dbg !26
  %80 = fmul <2 x float> %75, %79, !dbg !26
  %81 = fadd <2 x float> %65, %80, !dbg !27
  %shift = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %82 = fadd <2 x float> %81, %shift, !dbg !16
  %83 = extractelement <2 x float> %82, i64 0, !dbg !16
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %.split.preheader, %__nv_rsqrtf.exit.loopexit
  %84 = phi float [ %72, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %85 = phi float [ %77, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %86 = phi float [ 3.000000e+00, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %87 = phi float [ %83, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !28
  %88 = fsub float %85, %84, !dbg !30
  %89 = fadd float %86, %86, !dbg !31
  %90 = fcmp oeq float %89, 0.000000e+00, !dbg !32
  %91 = tail call float @llvm.nvvm.div.full(float %86, float %89), !dbg !33
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !34
  %93 = fmul float %88, %92, !dbg !35
  %94 = fadd float %84, %93, !dbg !36
  %95 = fmul float %88, %88, !dbg !37
  %96 = fmul float %95, %86, !dbg !38
  %97 = fmul float %96, %92, !dbg !39
  %98 = fadd float %87, %97, !dbg !40
  %99 = bitcast float %94 to i32, !dbg !16
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !16
  %101 = bitcast i32 %100 to float, !dbg !16
  %102 = bitcast float %98 to i32, !dbg !16
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !16
  %104 = bitcast i32 %103 to float, !dbg !16
  %105 = bitcast float %89 to i32, !dbg !16
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !16
  %107 = bitcast i32 %106 to float, !dbg !16
  %108 = fsub float %101, %94, !dbg !30
  %109 = fadd float %89, %107, !dbg !31
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !32
  %111 = tail call float @llvm.nvvm.div.full(float %107, float %109), !dbg !33
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !34
  %113 = fmul float %108, %112, !dbg !35
  %114 = fadd float %94, %113, !dbg !36
  %115 = fadd float %98, %104, !dbg !28
  %116 = fmul float %108, %108, !dbg !37
  %117 = fmul float %89, %116, !dbg !38
  %118 = fmul float %117, %112, !dbg !39
  %119 = fadd float %115, %118, !dbg !40
  %120 = bitcast float %114 to i32, !dbg !16
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !16
  %122 = bitcast i32 %121 to float, !dbg !16
  %123 = bitcast float %119 to i32, !dbg !16
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !16
  %125 = bitcast i32 %124 to float, !dbg !16
  %126 = bitcast float %109 to i32, !dbg !16
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !16
  %128 = bitcast i32 %127 to float, !dbg !16
  %129 = fsub float %122, %114, !dbg !30
  %130 = fadd float %109, %128, !dbg !31
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !32
  %132 = tail call float @llvm.nvvm.div.full(float %128, float %130), !dbg !33
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !34
  %134 = fmul float %129, %133, !dbg !35
  %135 = fadd float %114, %134, !dbg !36
  %136 = fadd float %119, %125, !dbg !28
  %137 = fmul float %129, %129, !dbg !37
  %138 = fmul float %109, %137, !dbg !38
  %139 = fmul float %133, %138, !dbg !39
  %140 = fadd float %136, %139, !dbg !40
  %141 = bitcast float %135 to i32, !dbg !16
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !16
  %143 = bitcast i32 %142 to float, !dbg !16
  %144 = bitcast float %140 to i32, !dbg !16
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !16
  %146 = bitcast i32 %145 to float, !dbg !16
  %147 = bitcast float %130 to i32, !dbg !16
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !16
  %149 = bitcast i32 %148 to float, !dbg !16
  %150 = fsub float %143, %135, !dbg !30
  %151 = fadd float %130, %149, !dbg !31
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !32
  %153 = tail call float @llvm.nvvm.div.full(float %149, float %151), !dbg !33
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !34
  %155 = fmul float %150, %154, !dbg !35
  %156 = fadd float %135, %155, !dbg !36
  %157 = fadd float %140, %146, !dbg !28
  %158 = fmul float %150, %150, !dbg !37
  %159 = fmul float %130, %158, !dbg !38
  %160 = fmul float %154, %159, !dbg !39
  %161 = fadd float %157, %160, !dbg !40
  %162 = bitcast float %156 to i32, !dbg !16
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !16
  %164 = bitcast i32 %163 to float, !dbg !16
  %165 = bitcast float %161 to i32, !dbg !16
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !16
  %167 = bitcast i32 %166 to float, !dbg !16
  %168 = bitcast float %151 to i32, !dbg !16
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !16
  %170 = bitcast i32 %169 to float, !dbg !16
  %171 = fsub float %164, %156, !dbg !30
  %172 = fadd float %151, %170, !dbg !31
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !32
  %174 = tail call float @llvm.nvvm.div.full(float %170, float %172), !dbg !33
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !34
  %176 = fmul float %171, %175, !dbg !35
  %177 = fadd float %156, %176, !dbg !36
  %178 = fadd float %161, %167, !dbg !28
  %179 = fmul float %171, %171, !dbg !37
  %180 = fmul float %151, %179, !dbg !38
  %181 = fmul float %175, %180, !dbg !39
  %182 = fadd float %178, %181, !dbg !40
  %183 = bitcast float %177 to i32, !dbg !16
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !16
  %185 = bitcast i32 %184 to float, !dbg !16
  %186 = bitcast float %182 to i32, !dbg !16
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !16
  %188 = bitcast i32 %187 to float, !dbg !16
  %189 = bitcast float %172 to i32, !dbg !16
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !16
  %191 = bitcast i32 %190 to float, !dbg !16
  %192 = fsub float %185, %177, !dbg !30
  %193 = fadd float %172, %191, !dbg !31
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !32
  %195 = tail call float @llvm.nvvm.div.full(float %191, float %193), !dbg !33
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !34
  %197 = fmul float %192, %196, !dbg !35
  %198 = fadd float %177, %197, !dbg !36
  %199 = fadd float %182, %188, !dbg !28
  %200 = fmul float %192, %192, !dbg !37
  %201 = fmul float %172, %200, !dbg !38
  %202 = fmul float %196, %201, !dbg !39
  %203 = fadd float %199, %202, !dbg !40
  %204 = and i32 %24, 15, !dbg !16
  %205 = icmp eq i32 %23, 0, !dbg !16
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !16
  %207 = bitcast float %198 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 %205) #5, !dbg !16
  %208 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %204, !dbg !16
  %209 = bitcast float %203 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 %205) #5, !dbg !16
  %210 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %204, !dbg !16
  %211 = bitcast float %193 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 %205) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %212 = icmp slt i32 %22, 16, !dbg !16
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !16
  %214 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %212) #5, !dbg !16
  %215 = bitcast i32 %214 to float, !dbg !16
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !16
  %217 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %216, i1 %212) #5, !dbg !16
  %218 = bitcast i32 %217 to float, !dbg !16
  %219 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %22, !dbg !16
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %219, i1 %212) #5, !dbg !16
  %221 = bitcast i32 %220 to float, !dbg !16
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !16
  %223 = bitcast i32 %222 to float, !dbg !16
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 8, i32 31), !dbg !16
  %225 = bitcast i32 %224 to float, !dbg !16
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !16
  %227 = bitcast i32 %226 to float, !dbg !16
  %228 = fsub float %223, %215, !dbg !30
  %229 = fadd float %221, %227, !dbg !31
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !32
  %231 = tail call float @llvm.nvvm.div.full(float %227, float %229), !dbg !33
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !34
  %233 = fmul float %228, %232, !dbg !35
  %234 = fadd float %233, %215, !dbg !36
  %235 = fadd float %218, %225, !dbg !28
  %236 = fmul float %228, %228, !dbg !37
  %237 = fmul float %236, %221, !dbg !38
  %238 = fmul float %237, %232, !dbg !39
  %239 = fadd float %235, %238, !dbg !40
  %240 = bitcast float %234 to i32, !dbg !16
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !16
  %242 = bitcast i32 %241 to float, !dbg !16
  %243 = bitcast float %239 to i32, !dbg !16
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !16
  %245 = bitcast i32 %244 to float, !dbg !16
  %246 = bitcast float %229 to i32, !dbg !16
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !16
  %248 = bitcast i32 %247 to float, !dbg !16
  %249 = fsub float %242, %234, !dbg !30
  %250 = fadd float %229, %248, !dbg !31
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !32
  %252 = tail call float @llvm.nvvm.div.full(float %248, float %250), !dbg !33
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !34
  %254 = fmul float %249, %253, !dbg !35
  %255 = fadd float %234, %254, !dbg !36
  %256 = fadd float %239, %245, !dbg !28
  %257 = fmul float %249, %249, !dbg !37
  %258 = fmul float %229, %257, !dbg !38
  %259 = fmul float %253, %258, !dbg !39
  %260 = fadd float %256, %259, !dbg !40
  %261 = bitcast float %255 to i32, !dbg !16
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !16
  %263 = bitcast i32 %262 to float, !dbg !16
  %264 = bitcast float %260 to i32, !dbg !16
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !16
  %266 = bitcast i32 %265 to float, !dbg !16
  %267 = bitcast float %250 to i32, !dbg !16
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 2, i32 31), !dbg !16
  %269 = bitcast i32 %268 to float, !dbg !16
  %270 = fsub float %263, %255, !dbg !30
  %271 = fadd float %250, %269, !dbg !31
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !32
  %273 = tail call float @llvm.nvvm.div.full(float %269, float %271), !dbg !33
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !34
  %275 = fmul float %270, %274, !dbg !35
  %276 = fadd float %255, %275, !dbg !36
  %277 = fadd float %260, %266, !dbg !28
  %278 = fmul float %270, %270, !dbg !37
  %279 = fmul float %250, %278, !dbg !38
  %280 = fmul float %274, %279, !dbg !39
  %281 = fadd float %277, %280, !dbg !40
  %282 = bitcast float %276 to i32, !dbg !16
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !16
  %284 = bitcast i32 %283 to float, !dbg !16
  %285 = bitcast float %281 to i32, !dbg !16
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !16
  %287 = bitcast i32 %286 to float, !dbg !16
  %288 = bitcast float %271 to i32, !dbg !16
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 1, i32 31), !dbg !16
  %290 = bitcast i32 %289 to float, !dbg !16
  %291 = fsub float %284, %276, !dbg !30
  %292 = fadd float %271, %290, !dbg !31
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !32
  %294 = tail call float @llvm.nvvm.div.full(float %290, float %292), !dbg !33
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !34
  %296 = fmul float %291, %295, !dbg !35
  %297 = fadd float %276, %296, !dbg !36
  %298 = fadd float %281, %287, !dbg !28
  %299 = fmul float %291, %291, !dbg !37
  %300 = fmul float %271, %299, !dbg !38
  %301 = fmul float %295, %300, !dbg !39
  %302 = fadd float %298, %301, !dbg !40
  %303 = and i32 %22, 15, !dbg !16
  %304 = icmp eq i32 %303, 0, !dbg !16
  %305 = and i1 %212, %304, !dbg !16
  %306 = bitcast float %297 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %306, i1 %305) #5, !dbg !16
  %307 = bitcast float %302 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %307, i1 %305) #5, !dbg !16
  %308 = bitcast float %292 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %308, i1 %305) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %309 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !16
  %310 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !16
  %311 = tail call float @llvm.nvvm.div.full(float %310, float 3.072000e+03), !dbg !41
  %312 = fadd float %311, 0x3EB0C6F7A0000000, !dbg !42
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i7 = icmp eq i32 %314, 0, !dbg !43
  br i1 %.not.i7, label %317, label %315, !dbg !43

315:                                              ; preds = %__nv_rsqrtf.exit
  %316 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

317:                                              ; preds = %__nv_rsqrtf.exit
  %318 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

__nv_rsqrtf.exit9:                                ; preds = %315, %317
  %.0.i8 = phi float [ %316, %315 ], [ %318, %317 ], !dbg !43
  %319 = zext nneg i32 %26 to i64, !dbg !44
  %320 = or disjoint i32 %26, %27, !dbg !45
  %321 = sext i32 %320 to i64, !dbg !46
  %322 = getelementptr bfloat, ptr addrspace(1) %0, i64 %321, !dbg !46
  %323 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %322, i1 %21) #5, !dbg !47
  %324 = bitcast i32 %323 to <2 x bfloat>, !dbg !47
  %325 = or disjoint i64 %319, 3072, !dbg !48
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %325, !dbg !49
  %327 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %326, i1 true) #5, !dbg !50
  %328 = extractvalue { i32, i32 } %327, 0, !dbg !50
  %329 = extractvalue { i32, i32 } %327, 1, !dbg !50
  %330 = getelementptr bfloat, ptr addrspace(1) %2, i64 %325, !dbg !51
  %331 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %330, i1 true) #5, !dbg !52
  %332 = bitcast i32 %331 to <2 x bfloat>, !dbg !52
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %319, !dbg !53
  %334 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %333, i1 true) #5, !dbg !54
  %335 = extractvalue { i32, i32 } %334, 0, !dbg !54
  %336 = extractvalue { i32, i32 } %334, 1, !dbg !54
  %337 = getelementptr bfloat, ptr addrspace(1) %2, i64 %319, !dbg !55
  %338 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %337, i1 true) #5, !dbg !56
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !56
  %340 = getelementptr bfloat, ptr addrspace(1) %3, i64 %321, !dbg !57
  %341 = fpext <2 x bfloat> %324 to <2 x float>, !dbg !58
  %342 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !50
  %343 = insertelement <2 x i32> %342, i32 %329, i64 1, !dbg !50
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !50
  %345 = fpext <2 x bfloat> %332 to <2 x float>, !dbg !59
  %346 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !54
  %347 = insertelement <2 x i32> %346, i32 %336, i64 1, !dbg !54
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !54
  %349 = fpext <2 x bfloat> %339 to <2 x float>, !dbg !60
  %350 = insertelement <2 x float> poison, float %309, i64 0, !dbg !61
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %352 = fsub <2 x float> %341, %351, !dbg !61
  %353 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !62
  %354 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %355 = fmul <2 x float> %354, %352, !dbg !62
  %356 = fadd <2 x float> %344, %345, !dbg !63
  %357 = fadd <2 x float> %356, splat (float 1.000000e+00), !dbg !64
  %358 = fmul <2 x float> %355, %357, !dbg !65
  %359 = fadd <2 x float> %348, %349, !dbg !66
  %360 = fadd <2 x float> %358, %359, !dbg !67
  %361 = fptrunc <2 x float> %360 to <2 x bfloat>, !dbg !68
  %362 = bitcast <2 x bfloat> %361 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %340, i1 %21) #5, !dbg !68
  %363 = or disjoint i64 %319, 1024, !dbg !69
  %364 = trunc nuw nsw i64 %363 to i32, !dbg !45
  %365 = add i32 %27, %364, !dbg !45
  %366 = sext i32 %365 to i64, !dbg !46
  %367 = getelementptr bfloat, ptr addrspace(1) %0, i64 %366, !dbg !46
  %368 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %367, i1 %21) #5, !dbg !47
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !47
  %370 = or disjoint i64 %319, 4096, !dbg !48
  %371 = getelementptr float, ptr addrspace(1) %1, i64 %370, !dbg !49
  %372 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %371, i1 true) #5, !dbg !50
  %373 = extractvalue { i32, i32 } %372, 0, !dbg !50
  %374 = extractvalue { i32, i32 } %372, 1, !dbg !50
  %375 = getelementptr bfloat, ptr addrspace(1) %2, i64 %370, !dbg !51
  %376 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !52
  %377 = bitcast i32 %376 to <2 x bfloat>, !dbg !52
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %363, !dbg !53
  %379 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %378, i1 true) #5, !dbg !54
  %380 = extractvalue { i32, i32 } %379, 0, !dbg !54
  %381 = extractvalue { i32, i32 } %379, 1, !dbg !54
  %382 = getelementptr bfloat, ptr addrspace(1) %2, i64 %363, !dbg !55
  %383 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %382, i1 true) #5, !dbg !56
  %384 = bitcast i32 %383 to <2 x bfloat>, !dbg !56
  %385 = getelementptr bfloat, ptr addrspace(1) %3, i64 %366, !dbg !57
  %386 = fpext <2 x bfloat> %369 to <2 x float>, !dbg !58
  %387 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !50
  %388 = insertelement <2 x i32> %387, i32 %374, i64 1, !dbg !50
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !50
  %390 = fpext <2 x bfloat> %377 to <2 x float>, !dbg !59
  %391 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !54
  %392 = insertelement <2 x i32> %391, i32 %381, i64 1, !dbg !54
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !54
  %394 = fpext <2 x bfloat> %384 to <2 x float>, !dbg !60
  %395 = fsub <2 x float> %386, %351, !dbg !61
  %396 = fmul <2 x float> %354, %395, !dbg !62
  %397 = fadd <2 x float> %389, %390, !dbg !63
  %398 = fadd <2 x float> %397, splat (float 1.000000e+00), !dbg !64
  %399 = fmul <2 x float> %396, %398, !dbg !65
  %400 = fadd <2 x float> %393, %394, !dbg !66
  %401 = fadd <2 x float> %399, %400, !dbg !67
  %402 = fptrunc <2 x float> %401 to <2 x bfloat>, !dbg !68
  %403 = bitcast <2 x bfloat> %402 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %403, ptr addrspace(1) %385, i1 %21) #5, !dbg !68
  %404 = or disjoint i64 %319, 2048, !dbg !69
  %405 = trunc nuw nsw i64 %404 to i32, !dbg !45
  %406 = add i32 %27, %405, !dbg !45
  %407 = sext i32 %406 to i64, !dbg !46
  %408 = getelementptr bfloat, ptr addrspace(1) %0, i64 %407, !dbg !46
  %409 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %408, i1 %21) #5, !dbg !47
  %410 = bitcast i32 %409 to <2 x bfloat>, !dbg !47
  %411 = or disjoint i64 %319, 5120, !dbg !48
  %412 = getelementptr float, ptr addrspace(1) %1, i64 %411, !dbg !49
  %413 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %412, i1 true) #5, !dbg !50
  %414 = extractvalue { i32, i32 } %413, 0, !dbg !50
  %415 = extractvalue { i32, i32 } %413, 1, !dbg !50
  %416 = getelementptr bfloat, ptr addrspace(1) %2, i64 %411, !dbg !51
  %417 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %416, i1 true) #5, !dbg !52
  %418 = bitcast i32 %417 to <2 x bfloat>, !dbg !52
  %419 = getelementptr float, ptr addrspace(1) %1, i64 %404, !dbg !53
  %420 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %419, i1 true) #5, !dbg !54
  %421 = extractvalue { i32, i32 } %420, 0, !dbg !54
  %422 = extractvalue { i32, i32 } %420, 1, !dbg !54
  %423 = getelementptr bfloat, ptr addrspace(1) %2, i64 %404, !dbg !55
  %424 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %423, i1 true) #5, !dbg !56
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !56
  %426 = getelementptr bfloat, ptr addrspace(1) %3, i64 %407, !dbg !57
  %427 = fpext <2 x bfloat> %410 to <2 x float>, !dbg !58
  %428 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !50
  %429 = insertelement <2 x i32> %428, i32 %415, i64 1, !dbg !50
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !50
  %431 = fpext <2 x bfloat> %418 to <2 x float>, !dbg !59
  %432 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !54
  %433 = insertelement <2 x i32> %432, i32 %422, i64 1, !dbg !54
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !54
  %435 = fpext <2 x bfloat> %425 to <2 x float>, !dbg !60
  %436 = fsub <2 x float> %427, %351, !dbg !61
  %437 = fmul <2 x float> %354, %436, !dbg !62
  %438 = fadd <2 x float> %430, %431, !dbg !63
  %439 = fadd <2 x float> %438, splat (float 1.000000e+00), !dbg !64
  %440 = fmul <2 x float> %437, %439, !dbg !65
  %441 = fadd <2 x float> %434, %435, !dbg !66
  %442 = fadd <2 x float> %440, %441, !dbg !67
  %443 = insertelement <2 x i1> poison, i1 %21, i64 0, !dbg !70
  %444 = shufflevector <2 x i1> %443, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !70
  %445 = select <2 x i1> %444, <2 x float> %360, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %446 = fcmp uno <2 x float> %445, zeroinitializer, !dbg !71
  %447 = fcmp olt <2 x float> %445, %401, !dbg !73
  %448 = or <2 x i1> %446, %447, !dbg !74
  %449 = select <2 x i1> %448, <2 x float> %445, <2 x float> %401, !dbg !75
  %450 = select <2 x i1> %444, <2 x float> %449, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %451 = fcmp uno <2 x float> %450, zeroinitializer, !dbg !71
  %452 = fcmp olt <2 x float> %450, %442, !dbg !73
  %453 = or <2 x i1> %451, %452, !dbg !74
  %454 = select <2 x i1> %453, <2 x float> %450, <2 x float> %442, !dbg !75
  %455 = select <2 x i1> %444, <2 x float> %454, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %456 = select <2 x i1> %444, <2 x float> %360, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %457 = fcmp uno <2 x float> %456, zeroinitializer, !dbg !77
  %458 = fcmp ogt <2 x float> %456, %401, !dbg !79
  %459 = or <2 x i1> %457, %458, !dbg !80
  %460 = select <2 x i1> %459, <2 x float> %456, <2 x float> %401, !dbg !81
  %461 = select <2 x i1> %444, <2 x float> %460, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %462 = fcmp uno <2 x float> %461, zeroinitializer, !dbg !77
  %463 = fcmp ogt <2 x float> %461, %442, !dbg !79
  %464 = or <2 x i1> %462, %463, !dbg !80
  %465 = select <2 x i1> %464, <2 x float> %461, <2 x float> %442, !dbg !81
  %466 = select <2 x i1> %444, <2 x float> %465, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %467 = fptrunc <2 x float> %442 to <2 x bfloat>, !dbg !68
  %468 = bitcast <2 x bfloat> %467 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %468, ptr addrspace(1) %426, i1 %21) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %469 = extractelement <2 x float> %455, i64 0, !dbg !84
  %470 = extractelement <2 x float> %455, i64 1, !dbg !84
  %471 = fcmp olt float %469, %470, !dbg !84
  %472 = fcmp uno float %469, 0.000000e+00, !dbg !85
  %473 = or i1 %471, %472, !dbg !86
  %474 = select i1 %473, float %469, float %470, !dbg !87
  %475 = bitcast float %474 to i32, !dbg !82
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 16, i32 31), !dbg !82
  %477 = bitcast i32 %476 to float, !dbg !82
  %478 = fcmp olt float %474, %477, !dbg !84
  %479 = fcmp uno float %474, 0.000000e+00, !dbg !85
  %480 = or i1 %479, %478, !dbg !86
  %481 = select i1 %480, float %474, float %477, !dbg !87
  %482 = bitcast float %481 to i32, !dbg !82
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 8, i32 31), !dbg !82
  %484 = bitcast i32 %483 to float, !dbg !82
  %485 = fcmp olt float %481, %484, !dbg !84
  %486 = fcmp uno float %481, 0.000000e+00, !dbg !85
  %487 = or i1 %485, %486, !dbg !86
  %488 = select i1 %487, float %481, float %484, !dbg !87
  %489 = bitcast float %488 to i32, !dbg !82
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 4, i32 31), !dbg !82
  %491 = bitcast i32 %490 to float, !dbg !82
  %492 = fcmp olt float %488, %491, !dbg !84
  %493 = fcmp uno float %488, 0.000000e+00, !dbg !85
  %494 = or i1 %492, %493, !dbg !86
  %495 = select i1 %494, float %488, float %491, !dbg !87
  %496 = bitcast float %495 to i32, !dbg !82
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 2, i32 31), !dbg !82
  %498 = bitcast i32 %497 to float, !dbg !82
  %499 = fcmp olt float %495, %498, !dbg !84
  %500 = fcmp uno float %495, 0.000000e+00, !dbg !85
  %501 = or i1 %499, %500, !dbg !86
  %502 = select i1 %501, float %495, float %498, !dbg !87
  %503 = bitcast float %502 to i32, !dbg !82
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 1, i32 31), !dbg !82
  %505 = bitcast i32 %504 to float, !dbg !82
  %506 = fcmp olt float %502, %505, !dbg !84
  %507 = fcmp uno float %502, 0.000000e+00, !dbg !85
  %508 = or i1 %506, %507, !dbg !86
  %509 = select i1 %508, i32 %503, i32 %504, !dbg !87
  %510 = insertelement <1 x i32> poison, i32 %509, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %510, i1 %205) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %511 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %212) #5, !dbg !82
  %512 = bitcast i32 %511 to float, !dbg !82
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 8, i32 31), !dbg !82
  %514 = bitcast i32 %513 to float, !dbg !82
  %515 = fcmp olt float %512, %514, !dbg !84
  %516 = fcmp uno float %512, 0.000000e+00, !dbg !85
  %517 = or i1 %516, %515, !dbg !86
  %518 = select i1 %517, float %512, float %514, !dbg !87
  %519 = bitcast float %518 to i32, !dbg !82
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !82
  %521 = bitcast i32 %520 to float, !dbg !82
  %522 = fcmp olt float %518, %521, !dbg !84
  %523 = fcmp uno float %518, 0.000000e+00, !dbg !85
  %524 = or i1 %522, %523, !dbg !86
  %525 = select i1 %524, float %518, float %521, !dbg !87
  %526 = bitcast float %525 to i32, !dbg !82
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !82
  %528 = bitcast i32 %527 to float, !dbg !82
  %529 = fcmp olt float %525, %528, !dbg !84
  %530 = fcmp uno float %525, 0.000000e+00, !dbg !85
  %531 = or i1 %529, %530, !dbg !86
  %532 = select i1 %531, float %525, float %528, !dbg !87
  %533 = bitcast float %532 to i32, !dbg !82
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 1, i32 31), !dbg !82
  %535 = bitcast i32 %534 to float, !dbg !82
  %536 = fcmp olt float %532, %535, !dbg !84
  %537 = fcmp uno float %532, 0.000000e+00, !dbg !85
  %538 = or i1 %536, %537, !dbg !86
  %539 = select i1 %538, i32 %533, i32 %534, !dbg !87
  %540 = insertelement <1 x i32> poison, i32 %539, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %540, i1 %305) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %541 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %542 = extractelement <2 x float> %466, i64 0, !dbg !90
  %543 = extractelement <2 x float> %466, i64 1, !dbg !90
  %544 = fcmp ogt float %542, %543, !dbg !90
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !91
  %546 = or i1 %544, %545, !dbg !92
  %547 = select i1 %546, float %542, float %543, !dbg !93
  %548 = bitcast float %547 to i32, !dbg !88
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 16, i32 31), !dbg !88
  %550 = bitcast i32 %549 to float, !dbg !88
  %551 = fcmp ogt float %547, %550, !dbg !90
  %552 = fcmp uno float %547, 0.000000e+00, !dbg !91
  %553 = or i1 %552, %551, !dbg !92
  %554 = select i1 %553, float %547, float %550, !dbg !93
  %555 = bitcast float %554 to i32, !dbg !88
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 8, i32 31), !dbg !88
  %557 = bitcast i32 %556 to float, !dbg !88
  %558 = fcmp ogt float %554, %557, !dbg !90
  %559 = fcmp uno float %554, 0.000000e+00, !dbg !91
  %560 = or i1 %558, %559, !dbg !92
  %561 = select i1 %560, float %554, float %557, !dbg !93
  %562 = bitcast float %561 to i32, !dbg !88
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 4, i32 31), !dbg !88
  %564 = bitcast i32 %563 to float, !dbg !88
  %565 = fcmp ogt float %561, %564, !dbg !90
  %566 = fcmp uno float %561, 0.000000e+00, !dbg !91
  %567 = or i1 %565, %566, !dbg !92
  %568 = select i1 %567, float %561, float %564, !dbg !93
  %569 = bitcast float %568 to i32, !dbg !88
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 2, i32 31), !dbg !88
  %571 = bitcast i32 %570 to float, !dbg !88
  %572 = fcmp ogt float %568, %571, !dbg !90
  %573 = fcmp uno float %568, 0.000000e+00, !dbg !91
  %574 = or i1 %572, %573, !dbg !92
  %575 = select i1 %574, float %568, float %571, !dbg !93
  %576 = bitcast float %575 to i32, !dbg !88
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 1, i32 31), !dbg !88
  %578 = bitcast i32 %577 to float, !dbg !88
  %579 = fcmp ogt float %575, %578, !dbg !90
  %580 = fcmp uno float %575, 0.000000e+00, !dbg !91
  %581 = or i1 %579, %580, !dbg !92
  %582 = select i1 %581, i32 %576, i32 %577, !dbg !93
  %583 = insertelement <1 x i32> poison, i32 %582, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %583, i1 %205) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %584 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %212) #5, !dbg !88
  %585 = bitcast i32 %584 to float, !dbg !88
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 8, i32 31), !dbg !88
  %587 = bitcast i32 %586 to float, !dbg !88
  %588 = fcmp ogt float %585, %587, !dbg !90
  %589 = fcmp uno float %585, 0.000000e+00, !dbg !91
  %590 = or i1 %589, %588, !dbg !92
  %591 = select i1 %590, float %585, float %587, !dbg !93
  %592 = bitcast float %591 to i32, !dbg !88
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 4, i32 31), !dbg !88
  %594 = bitcast i32 %593 to float, !dbg !88
  %595 = fcmp ogt float %591, %594, !dbg !90
  %596 = fcmp uno float %591, 0.000000e+00, !dbg !91
  %597 = or i1 %595, %596, !dbg !92
  %598 = select i1 %597, float %591, float %594, !dbg !93
  %599 = bitcast float %598 to i32, !dbg !88
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %599, i32 2, i32 31), !dbg !88
  %601 = bitcast i32 %600 to float, !dbg !88
  %602 = fcmp ogt float %598, %601, !dbg !90
  %603 = fcmp uno float %598, 0.000000e+00, !dbg !91
  %604 = or i1 %602, %603, !dbg !92
  %605 = select i1 %604, float %598, float %601, !dbg !93
  %606 = bitcast float %605 to i32, !dbg !88
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !88
  %608 = bitcast i32 %607 to float, !dbg !88
  %609 = fcmp ogt float %605, %608, !dbg !90
  %610 = fcmp uno float %605, 0.000000e+00, !dbg !91
  %611 = or i1 %609, %610, !dbg !92
  %612 = select i1 %611, i32 %606, i32 %607, !dbg !93
  %613 = insertelement <1 x i32> poison, i32 %612, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %613, i1 %305) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %614 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %615 = sext i32 %20 to i64, !dbg !94
  %616 = getelementptr bfloat, ptr addrspace(1) %4, i64 %615, !dbg !94
  %617 = fptrunc float %541 to bfloat, !dbg !95
  %618 = and i32 %22, 511, !dbg !95
  %619 = icmp eq i32 %618, 0, !dbg !95
  %620 = bitcast bfloat %617 to i16, !dbg !95
  %621 = and i1 %21, %619, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %620, ptr addrspace(1) %616, i1 %621) #5, !dbg !95
  %622 = getelementptr bfloat, ptr addrspace(1) %5, i64 %615, !dbg !96
  %623 = fptrunc float %614 to bfloat, !dbg !97
  %624 = bitcast bfloat %623 to i16, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %622, i1 %621) #5, !dbg !97
  %625 = getelementptr bfloat, ptr addrspace(1) %6, i64 %615, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %620, ptr addrspace(1) %625, i1 %621) #5, !dbg !99
  %626 = getelementptr bfloat, ptr addrspace(1) %7, i64 %615, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %626, i1 %621) #5, !dbg !101
  %627 = getelementptr bfloat, ptr addrspace(1) %8, i64 %615, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %620, ptr addrspace(1) %627, i1 %621) #5, !dbg !103
  %628 = getelementptr bfloat, ptr addrspace(1) %9, i64 %615, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %628, i1 %621) #5, !dbg !105
  %629 = getelementptr bfloat, ptr addrspace(1) %10, i64 %615, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %620, ptr addrspace(1) %629, i1 %621) #5, !dbg !107
  %630 = getelementptr bfloat, ptr addrspace(1) %11, i64 %615, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %630, i1 %621) #5, !dbg !109
  %.inv = fcmp oge float %541, 0.000000e+00, !dbg !110
  %631 = select i1 %.inv, float 0.000000e+00, float %541, !dbg !110
  %632 = fsub float 0.000000e+00, %631, !dbg !112
  %.inv3 = fcmp ole float %614, 0.000000e+00, !dbg !113
  %633 = select i1 %.inv3, float 0.000000e+00, float %614, !dbg !113
  %634 = fcmp ogt float %632, %633, !dbg !115
  %635 = fcmp uno float %632, 0.000000e+00, !dbg !117
  %636 = or i1 %635, %634, !dbg !118
  %637 = select i1 %636, float %632, float %633, !dbg !119
  %638 = fmul float %637, 0x3F80204080000000, !dbg !120
  %639 = fcmp ogt float %638, 0x3EE4F8B580000000, !dbg !121
  %640 = fcmp uno float %638, 0.000000e+00, !dbg !123
  %641 = or i1 %639, %640, !dbg !124
  %642 = select i1 %641, float %638, float 0x3EE4F8B580000000, !dbg !125
  %643 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %642), !dbg !126
  %644 = sext i32 %28 to i64, !dbg !127
  %645 = getelementptr bfloat, ptr addrspace(1) %3, i64 %644, !dbg !127
  %646 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %645, i1 %21) #5, !dbg !128
  %647 = bitcast i32 %646 to <2 x bfloat>, !dbg !128
  %648 = extractelement <2 x bfloat> %647, i64 0, !dbg !128
  %649 = extractelement <2 x bfloat> %647, i64 1, !dbg !128
  %650 = fpext bfloat %648 to float, !dbg !129
  %651 = fpext bfloat %649 to float, !dbg !129
  %652 = fmul float %643, %650, !dbg !130
  %653 = fmul float %643, %651, !dbg !130
  %654 = tail call float @llvm.nvvm.round.f(float %652) #5, !dbg !131
  %655 = tail call float @llvm.nvvm.round.f(float %653) #5, !dbg !131
  %656 = insertelement <2 x float> poison, float %654, i64 0, !dbg !132
  %657 = insertelement <2 x float> %656, float %655, i64 1, !dbg !132
  %658 = fcmp ogt <2 x float> %657, splat (float -1.270000e+02), !dbg !132
  %659 = fcmp uno <2 x float> %657, zeroinitializer, !dbg !134
  %660 = or <2 x i1> %658, %659, !dbg !135
  %661 = select <2 x i1> %660, <2 x float> %657, <2 x float> splat (float -1.270000e+02), !dbg !136
  %662 = fcmp olt <2 x float> %661, splat (float 1.270000e+02), !dbg !137
  %663 = fcmp uno <2 x float> %661, zeroinitializer, !dbg !139
  %664 = or <2 x i1> %662, %663, !dbg !140
  %665 = fptosi <2 x float> %661 to <2 x i8>, !dbg !141
  %666 = select <2 x i1> %664, <2 x i8> %665, <2 x i8> splat (i8 127), !dbg !142
  %667 = getelementptr i8, ptr addrspace(1) %12, i64 %644, !dbg !143
  %668 = bitcast <2 x i8> %666 to i16, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %668, ptr addrspace(1) %667, i1 %21) #5, !dbg !144
  %669 = getelementptr i8, ptr addrspace(1) %13, i64 %644, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %668, ptr addrspace(1) %669, i1 %21) #5, !dbg !146
  %670 = getelementptr i8, ptr addrspace(1) %14, i64 %644, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %668, ptr addrspace(1) %670, i1 %21) #5, !dbg !148
  %671 = getelementptr i8, ptr addrspace(1) %15, i64 %644, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %668, ptr addrspace(1) %671, i1 %21) #5, !dbg !150
  %672 = add i32 %28, 1024, !dbg !151
  %673 = sext i32 %672 to i64, !dbg !127
  %674 = getelementptr bfloat, ptr addrspace(1) %3, i64 %673, !dbg !127
  %675 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %674, i1 %21) #5, !dbg !128
  %676 = bitcast i32 %675 to <2 x bfloat>, !dbg !128
  %677 = extractelement <2 x bfloat> %676, i64 0, !dbg !128
  %678 = extractelement <2 x bfloat> %676, i64 1, !dbg !128
  %679 = fpext bfloat %677 to float, !dbg !129
  %680 = fpext bfloat %678 to float, !dbg !129
  %681 = fmul float %643, %679, !dbg !130
  %682 = fmul float %643, %680, !dbg !130
  %683 = tail call float @llvm.nvvm.round.f(float %681) #5, !dbg !131
  %684 = tail call float @llvm.nvvm.round.f(float %682) #5, !dbg !131
  %685 = insertelement <2 x float> poison, float %683, i64 0, !dbg !132
  %686 = insertelement <2 x float> %685, float %684, i64 1, !dbg !132
  %687 = fcmp ogt <2 x float> %686, splat (float -1.270000e+02), !dbg !132
  %688 = fcmp uno <2 x float> %686, zeroinitializer, !dbg !134
  %689 = or <2 x i1> %687, %688, !dbg !135
  %690 = select <2 x i1> %689, <2 x float> %686, <2 x float> splat (float -1.270000e+02), !dbg !136
  %691 = fcmp olt <2 x float> %690, splat (float 1.270000e+02), !dbg !137
  %692 = fcmp uno <2 x float> %690, zeroinitializer, !dbg !139
  %693 = or <2 x i1> %691, %692, !dbg !140
  %694 = fptosi <2 x float> %690 to <2 x i8>, !dbg !141
  %695 = select <2 x i1> %693, <2 x i8> %694, <2 x i8> splat (i8 127), !dbg !142
  %696 = getelementptr i8, ptr addrspace(1) %12, i64 %673, !dbg !143
  %697 = bitcast <2 x i8> %695 to i16, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %697, ptr addrspace(1) %696, i1 %21) #5, !dbg !144
  %698 = getelementptr i8, ptr addrspace(1) %13, i64 %673, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %697, ptr addrspace(1) %698, i1 %21) #5, !dbg !146
  %699 = getelementptr i8, ptr addrspace(1) %14, i64 %673, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %697, ptr addrspace(1) %699, i1 %21) #5, !dbg !148
  %700 = getelementptr i8, ptr addrspace(1) %15, i64 %673, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %697, ptr addrspace(1) %700, i1 %21) #5, !dbg !150
  %701 = add i32 %28, 2048, !dbg !151
  %702 = sext i32 %701 to i64, !dbg !127
  %703 = getelementptr bfloat, ptr addrspace(1) %3, i64 %702, !dbg !127
  %704 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %703, i1 %21) #5, !dbg !128
  %705 = bitcast i32 %704 to <2 x bfloat>, !dbg !128
  %706 = extractelement <2 x bfloat> %705, i64 0, !dbg !128
  %707 = extractelement <2 x bfloat> %705, i64 1, !dbg !128
  %708 = fpext bfloat %706 to float, !dbg !129
  %709 = fpext bfloat %707 to float, !dbg !129
  %710 = fmul float %643, %708, !dbg !130
  %711 = fmul float %643, %709, !dbg !130
  %712 = tail call float @llvm.nvvm.round.f(float %710) #5, !dbg !131
  %713 = tail call float @llvm.nvvm.round.f(float %711) #5, !dbg !131
  %714 = insertelement <2 x float> poison, float %712, i64 0, !dbg !132
  %715 = insertelement <2 x float> %714, float %713, i64 1, !dbg !132
  %716 = fcmp ogt <2 x float> %715, splat (float -1.270000e+02), !dbg !132
  %717 = fcmp uno <2 x float> %715, zeroinitializer, !dbg !134
  %718 = or <2 x i1> %716, %717, !dbg !135
  %719 = select <2 x i1> %718, <2 x float> %715, <2 x float> splat (float -1.270000e+02), !dbg !136
  %720 = fcmp olt <2 x float> %719, splat (float 1.270000e+02), !dbg !137
  %721 = fcmp uno <2 x float> %719, zeroinitializer, !dbg !139
  %722 = or <2 x i1> %720, %721, !dbg !140
  %723 = fptosi <2 x float> %719 to <2 x i8>, !dbg !141
  %724 = select <2 x i1> %722, <2 x i8> %723, <2 x i8> splat (i8 127), !dbg !142
  %725 = getelementptr i8, ptr addrspace(1) %12, i64 %702, !dbg !143
  %726 = bitcast <2 x i8> %724 to i16, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %726, ptr addrspace(1) %725, i1 %21) #5, !dbg !144
  %727 = getelementptr i8, ptr addrspace(1) %13, i64 %702, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %726, ptr addrspace(1) %727, i1 %21) #5, !dbg !146
  %728 = getelementptr i8, ptr addrspace(1) %14, i64 %702, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %726, ptr addrspace(1) %728, i1 %21) #5, !dbg !148
  %729 = getelementptr i8, ptr addrspace(1) %15, i64 %702, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %726, ptr addrspace(1) %729, i1 %21) #5, !dbg !150
  ret void, !dbg !152
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 41, scope: !6)
!16 = !DILocation(line: 229, column: 46, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !6, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 47, column: 79, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !17, inlinedAt: !22)
!22 = !DILocation(line: 42, column: 51, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !17, inlinedAt: !22)
!24 = !DILocation(line: 210, column: 26, scope: !17, inlinedAt: !22)
!25 = !DILocation(line: 211, column: 39, scope: !17, inlinedAt: !22)
!26 = !DILocation(line: 211, column: 31, scope: !17, inlinedAt: !22)
!27 = !DILocation(line: 211, column: 22, scope: !17, inlinedAt: !22)
!28 = !DILocation(line: 222, column: 15, scope: !29, inlinedAt: !19)
!29 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!30 = !DILocation(line: 217, column: 21, scope: !29, inlinedAt: !19)
!31 = !DILocation(line: 218, column: 28, scope: !29, inlinedAt: !19)
!32 = !DILocation(line: 219, column: 39, scope: !29, inlinedAt: !19)
!33 = !DILocation(line: 219, column: 60, scope: !29, inlinedAt: !19)
!34 = !DILocation(line: 219, column: 49, scope: !29, inlinedAt: !19)
!35 = !DILocation(line: 221, column: 25, scope: !29, inlinedAt: !19)
!36 = !DILocation(line: 221, column: 17, scope: !29, inlinedAt: !19)
!37 = !DILocation(line: 222, column: 30, scope: !29, inlinedAt: !19)
!38 = !DILocation(line: 222, column: 38, scope: !29, inlinedAt: !19)
!39 = !DILocation(line: 222, column: 49, scope: !29, inlinedAt: !19)
!40 = !DILocation(line: 222, column: 22, scope: !29, inlinedAt: !19)
!41 = !DILocation(line: 67, column: 24, scope: !6)
!42 = !DILocation(line: 69, column: 24, scope: !6)
!43 = !DILocation(line: 70, column: 32, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 59, column: 41, scope: !6)
!46 = !DILocation(line: 59, column: 34, scope: !6)
!47 = !DILocation(line: 59, column: 51, scope: !6)
!48 = !DILocation(line: 60, column: 42, scope: !6)
!49 = !DILocation(line: 60, column: 35, scope: !6)
!50 = !DILocation(line: 60, column: 49, scope: !6)
!51 = !DILocation(line: 61, column: 35, scope: !6)
!52 = !DILocation(line: 61, column: 49, scope: !6)
!53 = !DILocation(line: 62, column: 35, scope: !6)
!54 = !DILocation(line: 62, column: 42, scope: !6)
!55 = !DILocation(line: 63, column: 35, scope: !6)
!56 = !DILocation(line: 63, column: 42, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 113, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 63, column: 95, scope: !6)
!61 = !DILocation(line: 65, column: 24, scope: !6)
!62 = !DILocation(line: 71, column: 24, scope: !6)
!63 = !DILocation(line: 74, column: 24, scope: !6)
!64 = !DILocation(line: 76, column: 24, scope: !6)
!65 = !DILocation(line: 77, column: 24, scope: !6)
!66 = !DILocation(line: 79, column: 24, scope: !6)
!67 = !DILocation(line: 80, column: 24, scope: !6)
!68 = !DILocation(line: 86, column: 53, scope: !6)
!69 = !DILocation(line: 54, column: 31, scope: !6)
!70 = !DILocation(line: 83, column: 50, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !72)
!74 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !72)
!75 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !72)
!76 = !DILocation(line: 85, column: 50, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !78)
!80 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !78)
!81 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !78)
!82 = !DILocation(line: 110, column: 29, scope: !17, inlinedAt: !83)
!83 = !DILocation(line: 87, column: 40, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !29, inlinedAt: !83)
!85 = !DILocation(line: 96, column: 21, scope: !29, inlinedAt: !83)
!86 = !DILocation(line: 96, column: 16, scope: !29, inlinedAt: !83)
!87 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !83)
!88 = !DILocation(line: 115, column: 29, scope: !17, inlinedAt: !89)
!89 = !DILocation(line: 88, column: 40, scope: !6)
!90 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !89)
!91 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !89)
!92 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !89)
!93 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 25, scope: !6)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 90, column: 25, scope: !6)
!97 = !DILocation(line: 90, column: 37, scope: !6)
!98 = !DILocation(line: 91, column: 25, scope: !6)
!99 = !DILocation(line: 91, column: 37, scope: !6)
!100 = !DILocation(line: 92, column: 25, scope: !6)
!101 = !DILocation(line: 92, column: 37, scope: !6)
!102 = !DILocation(line: 93, column: 25, scope: !6)
!103 = !DILocation(line: 93, column: 37, scope: !6)
!104 = !DILocation(line: 94, column: 25, scope: !6)
!105 = !DILocation(line: 94, column: 37, scope: !6)
!106 = !DILocation(line: 95, column: 25, scope: !6)
!107 = !DILocation(line: 95, column: 37, scope: !6)
!108 = !DILocation(line: 96, column: 26, scope: !6)
!109 = !DILocation(line: 96, column: 38, scope: !6)
!110 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !111)
!111 = !DILocation(line: 105, column: 46, scope: !6)
!112 = !DILocation(line: 106, column: 17, scope: !6)
!113 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !114)
!114 = !DILocation(line: 107, column: 46, scope: !6)
!115 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !116)
!116 = !DILocation(line: 108, column: 46, scope: !6)
!117 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !116)
!119 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !116)
!120 = !DILocation(line: 110, column: 24, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !122)
!122 = !DILocation(line: 113, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !122)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 103, column: 36, scope: !6)
!128 = !DILocation(line: 103, column: 53, scope: !6)
!129 = !DILocation(line: 103, column: 115, scope: !6)
!130 = !DILocation(line: 119, column: 24, scope: !6)
!131 = !DILocation(line: 120, column: 36, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !133)
!133 = !DILocation(line: 123, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !133)
!137 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !138)
!138 = !DILocation(line: 125, column: 46, scope: !6)
!139 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !138)
!141 = !DILocation(line: 127, column: 25, scope: !6)
!142 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !138)
!143 = !DILocation(line: 128, column: 30, scope: !6)
!144 = !DILocation(line: 128, column: 54, scope: !6)
!145 = !DILocation(line: 129, column: 30, scope: !6)
!146 = !DILocation(line: 129, column: 54, scope: !6)
!147 = !DILocation(line: 130, column: 30, scope: !6)
!148 = !DILocation(line: 130, column: 54, scope: !6)
!149 = !DILocation(line: 131, column: 30, scope: !6)
!150 = !DILocation(line: 131, column: 54, scope: !6)
!151 = !DILocation(line: 103, column: 43, scope: !6)
!152 = !DILocation(line: 97, column: 4, scope: !6)
