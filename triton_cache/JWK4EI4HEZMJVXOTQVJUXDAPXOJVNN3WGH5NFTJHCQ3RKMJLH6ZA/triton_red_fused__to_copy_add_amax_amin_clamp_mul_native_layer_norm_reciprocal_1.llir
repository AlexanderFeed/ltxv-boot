; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = or disjoint i32 %20, 1, !dbg !12
  %24 = icmp slt i32 %20, 4112, !dbg !13
  %25 = icmp slt i32 %23, 4112, !dbg !13
  %26 = lshr i32 %21, 5, !dbg !14
  %27 = shl i32 %21, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = or disjoint i32 %28, 1024, !dbg !14
  %31 = or disjoint i32 %28, 1028, !dbg !14
  %32 = or disjoint i32 %28, 2048, !dbg !14
  %33 = or disjoint i32 %28, 2052, !dbg !14
  %34 = or disjoint i32 %28, 3072, !dbg !14
  %35 = or disjoint i32 %28, 3076, !dbg !14
  %36 = shl i32 %21, 4, !dbg !14
  %37 = and i32 %36, 2032, !dbg !14
  %38 = or disjoint i32 %37, 8, !dbg !14
  %39 = or disjoint i32 %37, 2048, !dbg !14
  %40 = or disjoint i32 %37, 2056, !dbg !14
  %41 = icmp samesign ult i32 %39, 3072, !dbg !15
  %42 = mul i32 %19, 6144, !dbg !16
  %43 = mul i32 %23, 3072, !dbg !16
  %44 = or disjoint i32 %37, %42, !dbg !17
  %45 = or disjoint i32 %38, %42, !dbg !17
  %46 = add i32 %39, %42, !dbg !17
  %47 = add i32 %40, %42, !dbg !17
  %48 = add i32 %43, %37, !dbg !17
  %49 = add i32 %38, %43, !dbg !17
  %50 = add i32 %39, %43, !dbg !17
  %51 = add i32 %40, %43, !dbg !17
  %52 = sext i32 %44 to i64, !dbg !18
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = sext i32 %45 to i64, !dbg !18
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = sext i32 %46 to i64, !dbg !18
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = sext i32 %47 to i64, !dbg !18
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %48 to i64, !dbg !18
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %49 to i64, !dbg !18
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = sext i32 %50 to i64, !dbg !18
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = sext i32 %51 to i64, !dbg !18
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !18
  %68 = and i1 %24, %41, !dbg !19
  %69 = and i1 %25, %41, !dbg !19
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i1 %24) #5, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !20
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !20
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !20
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !20
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !20
  %79 = extractelement <2 x bfloat> %72, i64 0, !dbg !20
  %80 = extractelement <2 x bfloat> %72, i64 1, !dbg !20
  %81 = extractelement <2 x bfloat> %74, i64 0, !dbg !20
  %82 = extractelement <2 x bfloat> %74, i64 1, !dbg !20
  %83 = extractelement <2 x bfloat> %76, i64 0, !dbg !20
  %84 = extractelement <2 x bfloat> %76, i64 1, !dbg !20
  %85 = extractelement <2 x bfloat> %78, i64 0, !dbg !20
  %86 = extractelement <2 x bfloat> %78, i64 1, !dbg !20
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %24) #5, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !20
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !20
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !20
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !20
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !20
  %96 = extractelement <2 x bfloat> %89, i64 0, !dbg !20
  %97 = extractelement <2 x bfloat> %89, i64 1, !dbg !20
  %98 = extractelement <2 x bfloat> %91, i64 0, !dbg !20
  %99 = extractelement <2 x bfloat> %91, i64 1, !dbg !20
  %100 = extractelement <2 x bfloat> %93, i64 0, !dbg !20
  %101 = extractelement <2 x bfloat> %93, i64 1, !dbg !20
  %102 = extractelement <2 x bfloat> %95, i64 0, !dbg !20
  %103 = extractelement <2 x bfloat> %95, i64 1, !dbg !20
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %68) #5, !dbg !20
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !20
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !20
  %107 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !20
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !20
  %109 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !20
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !20
  %111 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !20
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !20
  %113 = extractelement <2 x bfloat> %106, i64 0, !dbg !20
  %114 = extractelement <2 x bfloat> %106, i64 1, !dbg !20
  %115 = extractelement <2 x bfloat> %108, i64 0, !dbg !20
  %116 = extractelement <2 x bfloat> %108, i64 1, !dbg !20
  %117 = extractelement <2 x bfloat> %110, i64 0, !dbg !20
  %118 = extractelement <2 x bfloat> %110, i64 1, !dbg !20
  %119 = extractelement <2 x bfloat> %112, i64 0, !dbg !20
  %120 = extractelement <2 x bfloat> %112, i64 1, !dbg !20
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %68) #5, !dbg !20
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !20
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !20
  %124 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !20
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !20
  %126 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !20
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !20
  %128 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !20
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !20
  %130 = extractelement <2 x bfloat> %123, i64 0, !dbg !20
  %131 = extractelement <2 x bfloat> %123, i64 1, !dbg !20
  %132 = extractelement <2 x bfloat> %125, i64 0, !dbg !20
  %133 = extractelement <2 x bfloat> %125, i64 1, !dbg !20
  %134 = extractelement <2 x bfloat> %127, i64 0, !dbg !20
  %135 = extractelement <2 x bfloat> %127, i64 1, !dbg !20
  %136 = extractelement <2 x bfloat> %129, i64 0, !dbg !20
  %137 = extractelement <2 x bfloat> %129, i64 1, !dbg !20
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %25) #5, !dbg !20
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !20
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !20
  %141 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !20
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !20
  %143 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !20
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !20
  %145 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !20
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !20
  %147 = extractelement <2 x bfloat> %140, i64 0, !dbg !20
  %148 = extractelement <2 x bfloat> %140, i64 1, !dbg !20
  %149 = extractelement <2 x bfloat> %142, i64 0, !dbg !20
  %150 = extractelement <2 x bfloat> %142, i64 1, !dbg !20
  %151 = extractelement <2 x bfloat> %144, i64 0, !dbg !20
  %152 = extractelement <2 x bfloat> %144, i64 1, !dbg !20
  %153 = extractelement <2 x bfloat> %146, i64 0, !dbg !20
  %154 = extractelement <2 x bfloat> %146, i64 1, !dbg !20
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %25) #5, !dbg !20
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !20
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !20
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !20
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !20
  %162 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !20
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !20
  %164 = extractelement <2 x bfloat> %157, i64 0, !dbg !20
  %165 = extractelement <2 x bfloat> %157, i64 1, !dbg !20
  %166 = extractelement <2 x bfloat> %159, i64 0, !dbg !20
  %167 = extractelement <2 x bfloat> %159, i64 1, !dbg !20
  %168 = extractelement <2 x bfloat> %161, i64 0, !dbg !20
  %169 = extractelement <2 x bfloat> %161, i64 1, !dbg !20
  %170 = extractelement <2 x bfloat> %163, i64 0, !dbg !20
  %171 = extractelement <2 x bfloat> %163, i64 1, !dbg !20
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %69) #5, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !20
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !20
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !20
  %177 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !20
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !20
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !20
  %181 = extractelement <2 x bfloat> %174, i64 0, !dbg !20
  %182 = extractelement <2 x bfloat> %174, i64 1, !dbg !20
  %183 = extractelement <2 x bfloat> %176, i64 0, !dbg !20
  %184 = extractelement <2 x bfloat> %176, i64 1, !dbg !20
  %185 = extractelement <2 x bfloat> %178, i64 0, !dbg !20
  %186 = extractelement <2 x bfloat> %178, i64 1, !dbg !20
  %187 = extractelement <2 x bfloat> %180, i64 0, !dbg !20
  %188 = extractelement <2 x bfloat> %180, i64 1, !dbg !20
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %67, i1 %69) #5, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !20
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !20
  %192 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !20
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !20
  %194 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !20
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !20
  %196 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !20
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !20
  %198 = extractelement <2 x bfloat> %191, i64 0, !dbg !20
  %199 = extractelement <2 x bfloat> %191, i64 1, !dbg !20
  %200 = extractelement <2 x bfloat> %193, i64 0, !dbg !20
  %201 = extractelement <2 x bfloat> %193, i64 1, !dbg !20
  %202 = extractelement <2 x bfloat> %195, i64 0, !dbg !20
  %203 = extractelement <2 x bfloat> %195, i64 1, !dbg !20
  %204 = extractelement <2 x bfloat> %197, i64 0, !dbg !20
  %205 = extractelement <2 x bfloat> %197, i64 1, !dbg !20
  %206 = fpext bfloat %79 to float, !dbg !21
  %207 = fpext bfloat %80 to float, !dbg !21
  %208 = fpext bfloat %81 to float, !dbg !21
  %209 = fpext bfloat %82 to float, !dbg !21
  %210 = fpext bfloat %83 to float, !dbg !21
  %211 = fpext bfloat %84 to float, !dbg !21
  %212 = fpext bfloat %85 to float, !dbg !21
  %213 = fpext bfloat %86 to float, !dbg !21
  %214 = fpext bfloat %96 to float, !dbg !21
  %215 = fpext bfloat %97 to float, !dbg !21
  %216 = fpext bfloat %98 to float, !dbg !21
  %217 = fpext bfloat %99 to float, !dbg !21
  %218 = fpext bfloat %100 to float, !dbg !21
  %219 = fpext bfloat %101 to float, !dbg !21
  %220 = fpext bfloat %102 to float, !dbg !21
  %221 = fpext bfloat %103 to float, !dbg !21
  %222 = fpext bfloat %113 to float, !dbg !21
  %223 = fpext bfloat %114 to float, !dbg !21
  %224 = fpext bfloat %115 to float, !dbg !21
  %225 = fpext bfloat %116 to float, !dbg !21
  %226 = fpext bfloat %117 to float, !dbg !21
  %227 = fpext bfloat %118 to float, !dbg !21
  %228 = fpext bfloat %119 to float, !dbg !21
  %229 = fpext bfloat %120 to float, !dbg !21
  %230 = fpext bfloat %130 to float, !dbg !21
  %231 = fpext bfloat %131 to float, !dbg !21
  %232 = fpext bfloat %132 to float, !dbg !21
  %233 = fpext bfloat %133 to float, !dbg !21
  %234 = fpext bfloat %134 to float, !dbg !21
  %235 = fpext bfloat %135 to float, !dbg !21
  %236 = fpext bfloat %136 to float, !dbg !21
  %237 = fpext bfloat %137 to float, !dbg !21
  %238 = fpext bfloat %147 to float, !dbg !21
  %239 = fpext bfloat %148 to float, !dbg !21
  %240 = fpext bfloat %149 to float, !dbg !21
  %241 = fpext bfloat %150 to float, !dbg !21
  %242 = fpext bfloat %151 to float, !dbg !21
  %243 = fpext bfloat %152 to float, !dbg !21
  %244 = fpext bfloat %153 to float, !dbg !21
  %245 = fpext bfloat %154 to float, !dbg !21
  %246 = fpext bfloat %164 to float, !dbg !21
  %247 = fpext bfloat %165 to float, !dbg !21
  %248 = fpext bfloat %166 to float, !dbg !21
  %249 = fpext bfloat %167 to float, !dbg !21
  %250 = fpext bfloat %168 to float, !dbg !21
  %251 = fpext bfloat %169 to float, !dbg !21
  %252 = fpext bfloat %170 to float, !dbg !21
  %253 = fpext bfloat %171 to float, !dbg !21
  %254 = fpext bfloat %181 to float, !dbg !21
  %255 = fpext bfloat %182 to float, !dbg !21
  %256 = fpext bfloat %183 to float, !dbg !21
  %257 = fpext bfloat %184 to float, !dbg !21
  %258 = fpext bfloat %185 to float, !dbg !21
  %259 = fpext bfloat %186 to float, !dbg !21
  %260 = fpext bfloat %187 to float, !dbg !21
  %261 = fpext bfloat %188 to float, !dbg !21
  %262 = fpext bfloat %198 to float, !dbg !21
  %263 = fpext bfloat %199 to float, !dbg !21
  %264 = fpext bfloat %200 to float, !dbg !21
  %265 = fpext bfloat %201 to float, !dbg !21
  %266 = fpext bfloat %202 to float, !dbg !21
  %267 = fpext bfloat %203 to float, !dbg !21
  %268 = fpext bfloat %204 to float, !dbg !21
  %269 = fpext bfloat %205 to float, !dbg !21
  %270 = select i1 %24, float %206, float 0.000000e+00, !dbg !22
  %271 = select i1 %24, float %207, float 0.000000e+00, !dbg !22
  %272 = select i1 %24, float %208, float 0.000000e+00, !dbg !22
  %273 = select i1 %24, float %209, float 0.000000e+00, !dbg !22
  %274 = select i1 %24, float %210, float 0.000000e+00, !dbg !22
  %275 = select i1 %24, float %211, float 0.000000e+00, !dbg !22
  %276 = select i1 %24, float %212, float 0.000000e+00, !dbg !22
  %277 = select i1 %24, float %213, float 0.000000e+00, !dbg !22
  %278 = select i1 %24, float %214, float 0.000000e+00, !dbg !22
  %279 = select i1 %24, float %215, float 0.000000e+00, !dbg !22
  %280 = select i1 %24, float %216, float 0.000000e+00, !dbg !22
  %281 = select i1 %24, float %217, float 0.000000e+00, !dbg !22
  %282 = select i1 %24, float %218, float 0.000000e+00, !dbg !22
  %283 = select i1 %24, float %219, float 0.000000e+00, !dbg !22
  %284 = select i1 %24, float %220, float 0.000000e+00, !dbg !22
  %285 = select i1 %24, float %221, float 0.000000e+00, !dbg !22
  %286 = select i1 %68, float %222, float 0.000000e+00, !dbg !22
  %287 = select i1 %68, float %223, float 0.000000e+00, !dbg !22
  %288 = select i1 %68, float %224, float 0.000000e+00, !dbg !22
  %289 = select i1 %68, float %225, float 0.000000e+00, !dbg !22
  %290 = select i1 %68, float %226, float 0.000000e+00, !dbg !22
  %291 = select i1 %68, float %227, float 0.000000e+00, !dbg !22
  %292 = select i1 %68, float %228, float 0.000000e+00, !dbg !22
  %293 = select i1 %68, float %229, float 0.000000e+00, !dbg !22
  %294 = select i1 %68, float %230, float 0.000000e+00, !dbg !22
  %295 = select i1 %68, float %231, float 0.000000e+00, !dbg !22
  %296 = select i1 %68, float %232, float 0.000000e+00, !dbg !22
  %297 = select i1 %68, float %233, float 0.000000e+00, !dbg !22
  %298 = select i1 %68, float %234, float 0.000000e+00, !dbg !22
  %299 = select i1 %68, float %235, float 0.000000e+00, !dbg !22
  %300 = select i1 %68, float %236, float 0.000000e+00, !dbg !22
  %301 = select i1 %68, float %237, float 0.000000e+00, !dbg !22
  %302 = select i1 %25, float %238, float 0.000000e+00, !dbg !22
  %303 = select i1 %25, float %239, float 0.000000e+00, !dbg !22
  %304 = select i1 %25, float %240, float 0.000000e+00, !dbg !22
  %305 = select i1 %25, float %241, float 0.000000e+00, !dbg !22
  %306 = select i1 %25, float %242, float 0.000000e+00, !dbg !22
  %307 = select i1 %25, float %243, float 0.000000e+00, !dbg !22
  %308 = select i1 %25, float %244, float 0.000000e+00, !dbg !22
  %309 = select i1 %25, float %245, float 0.000000e+00, !dbg !22
  %310 = select i1 %25, float %246, float 0.000000e+00, !dbg !22
  %311 = select i1 %25, float %247, float 0.000000e+00, !dbg !22
  %312 = select i1 %25, float %248, float 0.000000e+00, !dbg !22
  %313 = select i1 %25, float %249, float 0.000000e+00, !dbg !22
  %314 = select i1 %25, float %250, float 0.000000e+00, !dbg !22
  %315 = select i1 %25, float %251, float 0.000000e+00, !dbg !22
  %316 = select i1 %25, float %252, float 0.000000e+00, !dbg !22
  %317 = select i1 %25, float %253, float 0.000000e+00, !dbg !22
  %318 = select i1 %69, float %254, float 0.000000e+00, !dbg !22
  %319 = select i1 %69, float %255, float 0.000000e+00, !dbg !22
  %320 = select i1 %69, float %256, float 0.000000e+00, !dbg !22
  %321 = select i1 %69, float %257, float 0.000000e+00, !dbg !22
  %322 = select i1 %69, float %258, float 0.000000e+00, !dbg !22
  %323 = select i1 %69, float %259, float 0.000000e+00, !dbg !22
  %324 = select i1 %69, float %260, float 0.000000e+00, !dbg !22
  %325 = select i1 %69, float %261, float 0.000000e+00, !dbg !22
  %326 = select i1 %69, float %262, float 0.000000e+00, !dbg !22
  %327 = select i1 %69, float %263, float 0.000000e+00, !dbg !22
  %328 = select i1 %69, float %264, float 0.000000e+00, !dbg !22
  %329 = select i1 %69, float %265, float 0.000000e+00, !dbg !22
  %330 = select i1 %69, float %266, float 0.000000e+00, !dbg !22
  %331 = select i1 %69, float %267, float 0.000000e+00, !dbg !22
  %332 = select i1 %69, float %268, float 0.000000e+00, !dbg !22
  %333 = select i1 %69, float %269, float 0.000000e+00, !dbg !22
  %334 = select i1 %24, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %335 = select i1 %68, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %336 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %337 = select i1 %69, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %338 = fsub float %271, %270, !dbg !24
  %339 = select i1 %24, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !30
  %341 = tail call float @llvm.nvvm.div.full(float %334, float %339), !dbg !31
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !32
  %343 = fmul float %338, %342, !dbg !33
  %344 = fadd float %270, %343, !dbg !34
  %345 = fmul float %338, %338, !dbg !35
  %346 = fmul float %334, %345, !dbg !36
  %347 = fmul float %346, %342, !dbg !37
  %348 = fadd float %347, 0.000000e+00, !dbg !38
  %349 = fsub float %272, %344, !dbg !24
  %350 = select i1 %24, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !30
  %352 = tail call float @llvm.nvvm.div.full(float %334, float %350), !dbg !31
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !32
  %354 = fmul float %353, %349, !dbg !33
  %355 = fadd float %344, %354, !dbg !34
  %356 = fmul float %349, %349, !dbg !35
  %357 = fmul float %339, %356, !dbg !36
  %358 = fmul float %353, %357, !dbg !37
  %359 = fadd float %348, %358, !dbg !38
  %360 = fsub float %273, %355, !dbg !24
  %361 = select i1 %24, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !30
  %363 = tail call float @llvm.nvvm.div.full(float %334, float %361), !dbg !31
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !32
  %365 = fmul float %364, %360, !dbg !33
  %366 = fadd float %355, %365, !dbg !34
  %367 = fmul float %360, %360, !dbg !35
  %368 = fmul float %350, %367, !dbg !36
  %369 = fmul float %364, %368, !dbg !37
  %370 = fadd float %359, %369, !dbg !38
  %371 = fsub float %274, %366, !dbg !24
  %372 = select i1 %24, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !30
  %374 = tail call float @llvm.nvvm.div.full(float %334, float %372), !dbg !31
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !32
  %376 = fmul float %375, %371, !dbg !33
  %377 = fadd float %366, %376, !dbg !34
  %378 = fmul float %371, %371, !dbg !35
  %379 = fmul float %361, %378, !dbg !36
  %380 = fmul float %375, %379, !dbg !37
  %381 = fadd float %370, %380, !dbg !38
  %382 = fsub float %275, %377, !dbg !24
  %383 = select i1 %24, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !30
  %385 = tail call float @llvm.nvvm.div.full(float %334, float %383), !dbg !31
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !32
  %387 = fmul float %386, %382, !dbg !33
  %388 = fadd float %377, %387, !dbg !34
  %389 = fmul float %382, %382, !dbg !35
  %390 = fmul float %372, %389, !dbg !36
  %391 = fmul float %386, %390, !dbg !37
  %392 = fadd float %381, %391, !dbg !38
  %393 = fsub float %276, %388, !dbg !24
  %394 = select i1 %24, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !30
  %396 = tail call float @llvm.nvvm.div.full(float %334, float %394), !dbg !31
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !32
  %398 = fmul float %397, %393, !dbg !33
  %399 = fadd float %388, %398, !dbg !34
  %400 = fmul float %393, %393, !dbg !35
  %401 = fmul float %383, %400, !dbg !36
  %402 = fmul float %397, %401, !dbg !37
  %403 = fadd float %392, %402, !dbg !38
  %404 = fsub float %277, %399, !dbg !24
  %405 = select i1 %24, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !30
  %407 = tail call float @llvm.nvvm.div.full(float %334, float %405), !dbg !31
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !32
  %409 = fmul float %408, %404, !dbg !33
  %410 = fadd float %399, %409, !dbg !34
  %411 = fmul float %404, %404, !dbg !35
  %412 = fmul float %394, %411, !dbg !36
  %413 = fmul float %408, %412, !dbg !37
  %414 = fadd float %403, %413, !dbg !38
  %415 = fsub float %278, %410, !dbg !24
  %416 = select i1 %24, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !30
  %418 = tail call float @llvm.nvvm.div.full(float %334, float %416), !dbg !31
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !32
  %420 = fmul float %419, %415, !dbg !33
  %421 = fadd float %410, %420, !dbg !34
  %422 = fadd float %414, 0.000000e+00, !dbg !39
  %423 = fmul float %415, %415, !dbg !35
  %424 = fmul float %405, %423, !dbg !36
  %425 = fmul float %419, %424, !dbg !37
  %426 = fadd float %422, %425, !dbg !38
  %427 = fsub float %279, %421, !dbg !24
  %428 = select i1 %24, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %429 = fcmp oeq float %428, 0.000000e+00, !dbg !30
  %430 = tail call float @llvm.nvvm.div.full(float %334, float %428), !dbg !31
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !32
  %432 = fmul float %431, %427, !dbg !33
  %433 = fadd float %421, %432, !dbg !34
  %434 = fmul float %427, %427, !dbg !35
  %435 = fmul float %416, %434, !dbg !36
  %436 = fmul float %431, %435, !dbg !37
  %437 = fadd float %426, %436, !dbg !38
  %438 = fsub float %280, %433, !dbg !24
  %439 = select i1 %24, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !30
  %441 = tail call float @llvm.nvvm.div.full(float %334, float %439), !dbg !31
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !32
  %443 = fmul float %442, %438, !dbg !33
  %444 = fadd float %433, %443, !dbg !34
  %445 = fmul float %438, %438, !dbg !35
  %446 = fmul float %428, %445, !dbg !36
  %447 = fmul float %442, %446, !dbg !37
  %448 = fadd float %437, %447, !dbg !38
  %449 = fsub float %281, %444, !dbg !24
  %450 = select i1 %24, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !30
  %452 = tail call float @llvm.nvvm.div.full(float %334, float %450), !dbg !31
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !32
  %454 = fmul float %453, %449, !dbg !33
  %455 = fadd float %444, %454, !dbg !34
  %456 = fmul float %449, %449, !dbg !35
  %457 = fmul float %439, %456, !dbg !36
  %458 = fmul float %453, %457, !dbg !37
  %459 = fadd float %448, %458, !dbg !38
  %460 = fsub float %282, %455, !dbg !24
  %461 = select i1 %24, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %462 = fcmp oeq float %461, 0.000000e+00, !dbg !30
  %463 = tail call float @llvm.nvvm.div.full(float %334, float %461), !dbg !31
  %464 = select i1 %462, float 0.000000e+00, float %463, !dbg !32
  %465 = fmul float %464, %460, !dbg !33
  %466 = fadd float %455, %465, !dbg !34
  %467 = fmul float %460, %460, !dbg !35
  %468 = fmul float %450, %467, !dbg !36
  %469 = fmul float %464, %468, !dbg !37
  %470 = fadd float %459, %469, !dbg !38
  %471 = fsub float %283, %466, !dbg !24
  %472 = select i1 %24, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %473 = fcmp oeq float %472, 0.000000e+00, !dbg !30
  %474 = tail call float @llvm.nvvm.div.full(float %334, float %472), !dbg !31
  %475 = select i1 %473, float 0.000000e+00, float %474, !dbg !32
  %476 = fmul float %475, %471, !dbg !33
  %477 = fadd float %466, %476, !dbg !34
  %478 = fmul float %471, %471, !dbg !35
  %479 = fmul float %461, %478, !dbg !36
  %480 = fmul float %475, %479, !dbg !37
  %481 = fadd float %470, %480, !dbg !38
  %482 = fsub float %284, %477, !dbg !24
  %483 = select i1 %24, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !30
  %485 = tail call float @llvm.nvvm.div.full(float %334, float %483), !dbg !31
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !32
  %487 = fmul float %486, %482, !dbg !33
  %488 = fadd float %477, %487, !dbg !34
  %489 = fadd float %481, 0.000000e+00, !dbg !39
  %490 = fmul float %482, %482, !dbg !35
  %491 = fmul float %472, %490, !dbg !36
  %492 = fmul float %486, %491, !dbg !37
  %493 = fadd float %489, %492, !dbg !38
  %494 = fsub float %285, %488, !dbg !24
  %495 = select i1 %24, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %496 = fcmp oeq float %495, 0.000000e+00, !dbg !30
  %497 = tail call float @llvm.nvvm.div.full(float %334, float %495), !dbg !31
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !32
  %499 = fmul float %498, %494, !dbg !33
  %500 = fadd float %488, %499, !dbg !34
  %501 = fmul float %494, %494, !dbg !35
  %502 = fmul float %483, %501, !dbg !36
  %503 = fmul float %498, %502, !dbg !37
  %504 = fadd float %493, %503, !dbg !38
  %505 = fsub float %286, %500, !dbg !24
  %506 = fadd float %495, %335, !dbg !29
  %507 = fcmp oeq float %506, 0.000000e+00, !dbg !30
  %508 = tail call float @llvm.nvvm.div.full(float %335, float %506), !dbg !31
  %509 = select i1 %507, float 0.000000e+00, float %508, !dbg !32
  %510 = fmul float %509, %505, !dbg !33
  %511 = fadd float %500, %510, !dbg !34
  %512 = fmul float %505, %505, !dbg !35
  %513 = fmul float %495, %512, !dbg !36
  %514 = fmul float %509, %513, !dbg !37
  %515 = fadd float %504, %514, !dbg !38
  %516 = fsub float %287, %511, !dbg !24
  %517 = fadd float %335, %506, !dbg !29
  %518 = fcmp oeq float %517, 0.000000e+00, !dbg !30
  %519 = tail call float @llvm.nvvm.div.full(float %335, float %517), !dbg !31
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !32
  %521 = fmul float %520, %516, !dbg !33
  %522 = fadd float %511, %521, !dbg !34
  %523 = fmul float %516, %516, !dbg !35
  %524 = fmul float %506, %523, !dbg !36
  %525 = fmul float %520, %524, !dbg !37
  %526 = fadd float %515, %525, !dbg !38
  %527 = fsub float %288, %522, !dbg !24
  %528 = fadd float %335, %517, !dbg !29
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !30
  %530 = tail call float @llvm.nvvm.div.full(float %335, float %528), !dbg !31
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !32
  %532 = fmul float %531, %527, !dbg !33
  %533 = fadd float %522, %532, !dbg !34
  %534 = fmul float %527, %527, !dbg !35
  %535 = fmul float %517, %534, !dbg !36
  %536 = fmul float %531, %535, !dbg !37
  %537 = fadd float %526, %536, !dbg !38
  %538 = fsub float %289, %533, !dbg !24
  %539 = fadd float %335, %528, !dbg !29
  %540 = fcmp oeq float %539, 0.000000e+00, !dbg !30
  %541 = tail call float @llvm.nvvm.div.full(float %335, float %539), !dbg !31
  %542 = select i1 %540, float 0.000000e+00, float %541, !dbg !32
  %543 = fmul float %542, %538, !dbg !33
  %544 = fadd float %533, %543, !dbg !34
  %545 = fmul float %538, %538, !dbg !35
  %546 = fmul float %528, %545, !dbg !36
  %547 = fmul float %542, %546, !dbg !37
  %548 = fadd float %537, %547, !dbg !38
  %549 = fsub float %290, %544, !dbg !24
  %550 = fadd float %335, %539, !dbg !29
  %551 = fcmp oeq float %550, 0.000000e+00, !dbg !30
  %552 = tail call float @llvm.nvvm.div.full(float %335, float %550), !dbg !31
  %553 = select i1 %551, float 0.000000e+00, float %552, !dbg !32
  %554 = fmul float %553, %549, !dbg !33
  %555 = fadd float %544, %554, !dbg !34
  %556 = fadd float %548, 0.000000e+00, !dbg !39
  %557 = fmul float %549, %549, !dbg !35
  %558 = fmul float %539, %557, !dbg !36
  %559 = fmul float %553, %558, !dbg !37
  %560 = fadd float %556, %559, !dbg !38
  %561 = fsub float %291, %555, !dbg !24
  %562 = fadd float %335, %550, !dbg !29
  %563 = fcmp oeq float %562, 0.000000e+00, !dbg !30
  %564 = tail call float @llvm.nvvm.div.full(float %335, float %562), !dbg !31
  %565 = select i1 %563, float 0.000000e+00, float %564, !dbg !32
  %566 = fmul float %565, %561, !dbg !33
  %567 = fadd float %555, %566, !dbg !34
  %568 = fmul float %561, %561, !dbg !35
  %569 = fmul float %550, %568, !dbg !36
  %570 = fmul float %565, %569, !dbg !37
  %571 = fadd float %560, %570, !dbg !38
  %572 = fsub float %292, %567, !dbg !24
  %573 = fadd float %335, %562, !dbg !29
  %574 = fcmp oeq float %573, 0.000000e+00, !dbg !30
  %575 = tail call float @llvm.nvvm.div.full(float %335, float %573), !dbg !31
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !32
  %577 = fmul float %576, %572, !dbg !33
  %578 = fadd float %567, %577, !dbg !34
  %579 = fmul float %572, %572, !dbg !35
  %580 = fmul float %562, %579, !dbg !36
  %581 = fmul float %576, %580, !dbg !37
  %582 = fadd float %571, %581, !dbg !38
  %583 = fsub float %293, %578, !dbg !24
  %584 = fadd float %335, %573, !dbg !29
  %585 = fcmp oeq float %584, 0.000000e+00, !dbg !30
  %586 = tail call float @llvm.nvvm.div.full(float %335, float %584), !dbg !31
  %587 = select i1 %585, float 0.000000e+00, float %586, !dbg !32
  %588 = fmul float %587, %583, !dbg !33
  %589 = fadd float %578, %588, !dbg !34
  %590 = fmul float %583, %583, !dbg !35
  %591 = fmul float %573, %590, !dbg !36
  %592 = fmul float %587, %591, !dbg !37
  %593 = fadd float %582, %592, !dbg !38
  %594 = fsub float %294, %589, !dbg !24
  %595 = fadd float %335, %584, !dbg !29
  %596 = fcmp oeq float %595, 0.000000e+00, !dbg !30
  %597 = tail call float @llvm.nvvm.div.full(float %335, float %595), !dbg !31
  %598 = select i1 %596, float 0.000000e+00, float %597, !dbg !32
  %599 = fmul float %598, %594, !dbg !33
  %600 = fadd float %589, %599, !dbg !34
  %601 = fmul float %594, %594, !dbg !35
  %602 = fmul float %584, %601, !dbg !36
  %603 = fmul float %598, %602, !dbg !37
  %604 = fadd float %593, %603, !dbg !38
  %605 = fsub float %295, %600, !dbg !24
  %606 = fadd float %335, %595, !dbg !29
  %607 = fcmp oeq float %606, 0.000000e+00, !dbg !30
  %608 = tail call float @llvm.nvvm.div.full(float %335, float %606), !dbg !31
  %609 = select i1 %607, float 0.000000e+00, float %608, !dbg !32
  %610 = fmul float %609, %605, !dbg !33
  %611 = fadd float %600, %610, !dbg !34
  %612 = fmul float %605, %605, !dbg !35
  %613 = fmul float %595, %612, !dbg !36
  %614 = fmul float %609, %613, !dbg !37
  %615 = fadd float %604, %614, !dbg !38
  %616 = fsub float %296, %611, !dbg !24
  %617 = fadd float %335, %606, !dbg !29
  %618 = fcmp oeq float %617, 0.000000e+00, !dbg !30
  %619 = tail call float @llvm.nvvm.div.full(float %335, float %617), !dbg !31
  %620 = select i1 %618, float 0.000000e+00, float %619, !dbg !32
  %621 = fmul float %620, %616, !dbg !33
  %622 = fadd float %611, %621, !dbg !34
  %623 = fadd float %615, 0.000000e+00, !dbg !39
  %624 = fmul float %616, %616, !dbg !35
  %625 = fmul float %606, %624, !dbg !36
  %626 = fmul float %620, %625, !dbg !37
  %627 = fadd float %623, %626, !dbg !38
  %628 = fsub float %297, %622, !dbg !24
  %629 = fadd float %335, %617, !dbg !29
  %630 = fcmp oeq float %629, 0.000000e+00, !dbg !30
  %631 = tail call float @llvm.nvvm.div.full(float %335, float %629), !dbg !31
  %632 = select i1 %630, float 0.000000e+00, float %631, !dbg !32
  %633 = fmul float %632, %628, !dbg !33
  %634 = fadd float %622, %633, !dbg !34
  %635 = fmul float %628, %628, !dbg !35
  %636 = fmul float %617, %635, !dbg !36
  %637 = fmul float %632, %636, !dbg !37
  %638 = fadd float %627, %637, !dbg !38
  %639 = fsub float %298, %634, !dbg !24
  %640 = fadd float %335, %629, !dbg !29
  %641 = fcmp oeq float %640, 0.000000e+00, !dbg !30
  %642 = tail call float @llvm.nvvm.div.full(float %335, float %640), !dbg !31
  %643 = select i1 %641, float 0.000000e+00, float %642, !dbg !32
  %644 = fmul float %643, %639, !dbg !33
  %645 = fadd float %634, %644, !dbg !34
  %646 = fmul float %639, %639, !dbg !35
  %647 = fmul float %629, %646, !dbg !36
  %648 = fmul float %643, %647, !dbg !37
  %649 = fadd float %638, %648, !dbg !38
  %650 = fsub float %299, %645, !dbg !24
  %651 = fmul float %650, %650, !dbg !35
  %652 = fmul float %640, %651, !dbg !36
  %653 = fadd float %335, %640, !dbg !29
  %654 = fcmp oeq float %653, 0.000000e+00, !dbg !30
  %655 = tail call float @llvm.nvvm.div.full(float %335, float %653), !dbg !31
  %656 = select i1 %654, float 0.000000e+00, float %655, !dbg !32
  %657 = fmul float %656, %650, !dbg !33
  %658 = fadd float %645, %657, !dbg !34
  %659 = fmul float %656, %652, !dbg !37
  %660 = fadd float %649, %659, !dbg !38
  %661 = fsub float %300, %658, !dbg !24
  %662 = fadd float %335, %653, !dbg !29
  %663 = tail call float @llvm.nvvm.div.full(float %335, float %662), !dbg !31
  %664 = fadd float %335, %662, !dbg !29
  %665 = insertelement <2 x float> poison, float %662, i64 0, !dbg !30
  %666 = insertelement <2 x float> %665, float %664, i64 1, !dbg !30
  %667 = fcmp oeq <2 x float> %666, zeroinitializer, !dbg !30
  %668 = tail call float @llvm.nvvm.div.full(float %335, float %664), !dbg !31
  %669 = insertelement <2 x float> poison, float %663, i64 0, !dbg !32
  %670 = insertelement <2 x float> %669, float %668, i64 1, !dbg !32
  %671 = select <2 x i1> %667, <2 x float> zeroinitializer, <2 x float> %670, !dbg !32
  %672 = extractelement <2 x float> %671, i64 0, !dbg !33
  %673 = fmul float %672, %661, !dbg !33
  %674 = fadd float %658, %673, !dbg !34
  %675 = fsub float %301, %674, !dbg !24
  %676 = insertelement <2 x float> poison, float %661, i64 0, !dbg !35
  %677 = insertelement <2 x float> %676, float %675, i64 1, !dbg !35
  %678 = fmul <2 x float> %677, %677, !dbg !35
  %679 = insertelement <2 x float> poison, float %653, i64 0, !dbg !36
  %680 = insertelement <2 x float> %679, float %662, i64 1, !dbg !36
  %681 = fmul <2 x float> %680, %678, !dbg !36
  %682 = fmul <2 x float> %671, %681, !dbg !37
  %683 = extractelement <2 x float> %682, i64 0, !dbg !38
  %684 = fadd float %660, %683, !dbg !38
  %685 = extractelement <2 x float> %671, i64 1, !dbg !33
  %686 = fmul float %685, %675, !dbg !33
  %687 = fadd float %674, %686, !dbg !34
  %688 = extractelement <2 x float> %682, i64 1, !dbg !38
  %689 = fadd float %684, %688, !dbg !38
  %690 = fsub float %303, %302, !dbg !24
  %691 = select i1 %25, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %692 = fcmp oeq float %691, 0.000000e+00, !dbg !30
  %693 = tail call float @llvm.nvvm.div.full(float %336, float %691), !dbg !31
  %694 = select i1 %692, float 0.000000e+00, float %693, !dbg !32
  %695 = fmul float %690, %694, !dbg !33
  %696 = fadd float %302, %695, !dbg !34
  %697 = fmul float %690, %690, !dbg !35
  %698 = fmul float %336, %697, !dbg !36
  %699 = fmul float %698, %694, !dbg !37
  %700 = fadd float %699, 0.000000e+00, !dbg !38
  %701 = fsub float %304, %696, !dbg !24
  %702 = select i1 %25, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %703 = fcmp oeq float %702, 0.000000e+00, !dbg !30
  %704 = tail call float @llvm.nvvm.div.full(float %336, float %702), !dbg !31
  %705 = select i1 %703, float 0.000000e+00, float %704, !dbg !32
  %706 = fmul float %705, %701, !dbg !33
  %707 = fadd float %696, %706, !dbg !34
  %708 = fmul float %701, %701, !dbg !35
  %709 = fmul float %691, %708, !dbg !36
  %710 = fmul float %705, %709, !dbg !37
  %711 = fadd float %700, %710, !dbg !38
  %712 = fsub float %305, %707, !dbg !24
  %713 = select i1 %25, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %714 = fcmp oeq float %713, 0.000000e+00, !dbg !30
  %715 = tail call float @llvm.nvvm.div.full(float %336, float %713), !dbg !31
  %716 = select i1 %714, float 0.000000e+00, float %715, !dbg !32
  %717 = fmul float %716, %712, !dbg !33
  %718 = fadd float %707, %717, !dbg !34
  %719 = fmul float %712, %712, !dbg !35
  %720 = fmul float %702, %719, !dbg !36
  %721 = fmul float %716, %720, !dbg !37
  %722 = fadd float %711, %721, !dbg !38
  %723 = fsub float %306, %718, !dbg !24
  %724 = select i1 %25, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %725 = fcmp oeq float %724, 0.000000e+00, !dbg !30
  %726 = tail call float @llvm.nvvm.div.full(float %336, float %724), !dbg !31
  %727 = select i1 %725, float 0.000000e+00, float %726, !dbg !32
  %728 = fmul float %727, %723, !dbg !33
  %729 = fadd float %718, %728, !dbg !34
  %730 = fmul float %723, %723, !dbg !35
  %731 = fmul float %713, %730, !dbg !36
  %732 = fmul float %727, %731, !dbg !37
  %733 = fadd float %722, %732, !dbg !38
  %734 = fsub float %307, %729, !dbg !24
  %735 = select i1 %25, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %736 = fcmp oeq float %735, 0.000000e+00, !dbg !30
  %737 = tail call float @llvm.nvvm.div.full(float %336, float %735), !dbg !31
  %738 = select i1 %736, float 0.000000e+00, float %737, !dbg !32
  %739 = fmul float %738, %734, !dbg !33
  %740 = fadd float %729, %739, !dbg !34
  %741 = fmul float %734, %734, !dbg !35
  %742 = fmul float %724, %741, !dbg !36
  %743 = fmul float %738, %742, !dbg !37
  %744 = fadd float %733, %743, !dbg !38
  %745 = fsub float %308, %740, !dbg !24
  %746 = select i1 %25, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %747 = fcmp oeq float %746, 0.000000e+00, !dbg !30
  %748 = tail call float @llvm.nvvm.div.full(float %336, float %746), !dbg !31
  %749 = select i1 %747, float 0.000000e+00, float %748, !dbg !32
  %750 = fmul float %749, %745, !dbg !33
  %751 = fadd float %740, %750, !dbg !34
  %752 = fmul float %745, %745, !dbg !35
  %753 = fmul float %735, %752, !dbg !36
  %754 = fmul float %749, %753, !dbg !37
  %755 = fadd float %744, %754, !dbg !38
  %756 = fsub float %309, %751, !dbg !24
  %757 = select i1 %25, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %758 = fcmp oeq float %757, 0.000000e+00, !dbg !30
  %759 = tail call float @llvm.nvvm.div.full(float %336, float %757), !dbg !31
  %760 = select i1 %758, float 0.000000e+00, float %759, !dbg !32
  %761 = fmul float %760, %756, !dbg !33
  %762 = fadd float %751, %761, !dbg !34
  %763 = fmul float %756, %756, !dbg !35
  %764 = fmul float %746, %763, !dbg !36
  %765 = fmul float %760, %764, !dbg !37
  %766 = fadd float %755, %765, !dbg !38
  %767 = fsub float %310, %762, !dbg !24
  %768 = select i1 %25, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %769 = fcmp oeq float %768, 0.000000e+00, !dbg !30
  %770 = tail call float @llvm.nvvm.div.full(float %336, float %768), !dbg !31
  %771 = select i1 %769, float 0.000000e+00, float %770, !dbg !32
  %772 = fmul float %771, %767, !dbg !33
  %773 = fadd float %762, %772, !dbg !34
  %774 = fadd float %766, 0.000000e+00, !dbg !39
  %775 = fmul float %767, %767, !dbg !35
  %776 = fmul float %757, %775, !dbg !36
  %777 = fmul float %771, %776, !dbg !37
  %778 = fadd float %774, %777, !dbg !38
  %779 = fsub float %311, %773, !dbg !24
  %780 = select i1 %25, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %781 = fcmp oeq float %780, 0.000000e+00, !dbg !30
  %782 = tail call float @llvm.nvvm.div.full(float %336, float %780), !dbg !31
  %783 = select i1 %781, float 0.000000e+00, float %782, !dbg !32
  %784 = fmul float %783, %779, !dbg !33
  %785 = fadd float %773, %784, !dbg !34
  %786 = fmul float %779, %779, !dbg !35
  %787 = fmul float %768, %786, !dbg !36
  %788 = fmul float %783, %787, !dbg !37
  %789 = fadd float %778, %788, !dbg !38
  %790 = fsub float %312, %785, !dbg !24
  %791 = select i1 %25, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %792 = fcmp oeq float %791, 0.000000e+00, !dbg !30
  %793 = tail call float @llvm.nvvm.div.full(float %336, float %791), !dbg !31
  %794 = select i1 %792, float 0.000000e+00, float %793, !dbg !32
  %795 = fmul float %794, %790, !dbg !33
  %796 = fadd float %785, %795, !dbg !34
  %797 = fmul float %790, %790, !dbg !35
  %798 = fmul float %780, %797, !dbg !36
  %799 = fmul float %794, %798, !dbg !37
  %800 = fadd float %789, %799, !dbg !38
  %801 = fsub float %313, %796, !dbg !24
  %802 = select i1 %25, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %803 = fcmp oeq float %802, 0.000000e+00, !dbg !30
  %804 = tail call float @llvm.nvvm.div.full(float %336, float %802), !dbg !31
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !32
  %806 = fmul float %805, %801, !dbg !33
  %807 = fadd float %796, %806, !dbg !34
  %808 = fmul float %801, %801, !dbg !35
  %809 = fmul float %791, %808, !dbg !36
  %810 = fmul float %805, %809, !dbg !37
  %811 = fadd float %800, %810, !dbg !38
  %812 = fsub float %314, %807, !dbg !24
  %813 = select i1 %25, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %814 = fcmp oeq float %813, 0.000000e+00, !dbg !30
  %815 = tail call float @llvm.nvvm.div.full(float %336, float %813), !dbg !31
  %816 = select i1 %814, float 0.000000e+00, float %815, !dbg !32
  %817 = fmul float %816, %812, !dbg !33
  %818 = fadd float %807, %817, !dbg !34
  %819 = fmul float %812, %812, !dbg !35
  %820 = fmul float %802, %819, !dbg !36
  %821 = fmul float %816, %820, !dbg !37
  %822 = fadd float %811, %821, !dbg !38
  %823 = fsub float %315, %818, !dbg !24
  %824 = select i1 %25, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %825 = fcmp oeq float %824, 0.000000e+00, !dbg !30
  %826 = tail call float @llvm.nvvm.div.full(float %336, float %824), !dbg !31
  %827 = select i1 %825, float 0.000000e+00, float %826, !dbg !32
  %828 = fmul float %827, %823, !dbg !33
  %829 = fadd float %818, %828, !dbg !34
  %830 = fmul float %823, %823, !dbg !35
  %831 = fmul float %813, %830, !dbg !36
  %832 = fmul float %827, %831, !dbg !37
  %833 = fadd float %822, %832, !dbg !38
  %834 = fsub float %316, %829, !dbg !24
  %835 = select i1 %25, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %836 = fcmp oeq float %835, 0.000000e+00, !dbg !30
  %837 = tail call float @llvm.nvvm.div.full(float %336, float %835), !dbg !31
  %838 = select i1 %836, float 0.000000e+00, float %837, !dbg !32
  %839 = fmul float %838, %834, !dbg !33
  %840 = fadd float %829, %839, !dbg !34
  %841 = fadd float %833, 0.000000e+00, !dbg !39
  %842 = fmul float %834, %834, !dbg !35
  %843 = fmul float %824, %842, !dbg !36
  %844 = fmul float %838, %843, !dbg !37
  %845 = fadd float %841, %844, !dbg !38
  %846 = fsub float %317, %840, !dbg !24
  %847 = select i1 %25, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %848 = fcmp oeq float %847, 0.000000e+00, !dbg !30
  %849 = tail call float @llvm.nvvm.div.full(float %336, float %847), !dbg !31
  %850 = select i1 %848, float 0.000000e+00, float %849, !dbg !32
  %851 = fmul float %850, %846, !dbg !33
  %852 = fadd float %840, %851, !dbg !34
  %853 = fmul float %846, %846, !dbg !35
  %854 = fmul float %835, %853, !dbg !36
  %855 = fmul float %850, %854, !dbg !37
  %856 = fadd float %845, %855, !dbg !38
  %857 = fsub float %318, %852, !dbg !24
  %858 = fadd float %847, %337, !dbg !29
  %859 = fcmp oeq float %858, 0.000000e+00, !dbg !30
  %860 = tail call float @llvm.nvvm.div.full(float %337, float %858), !dbg !31
  %861 = select i1 %859, float 0.000000e+00, float %860, !dbg !32
  %862 = fmul float %861, %857, !dbg !33
  %863 = fadd float %852, %862, !dbg !34
  %864 = fmul float %857, %857, !dbg !35
  %865 = fmul float %847, %864, !dbg !36
  %866 = fmul float %861, %865, !dbg !37
  %867 = fadd float %856, %866, !dbg !38
  %868 = fsub float %319, %863, !dbg !24
  %869 = fadd float %337, %858, !dbg !29
  %870 = fcmp oeq float %869, 0.000000e+00, !dbg !30
  %871 = tail call float @llvm.nvvm.div.full(float %337, float %869), !dbg !31
  %872 = select i1 %870, float 0.000000e+00, float %871, !dbg !32
  %873 = fmul float %872, %868, !dbg !33
  %874 = fadd float %863, %873, !dbg !34
  %875 = fmul float %868, %868, !dbg !35
  %876 = fmul float %858, %875, !dbg !36
  %877 = fmul float %872, %876, !dbg !37
  %878 = fadd float %867, %877, !dbg !38
  %879 = fsub float %320, %874, !dbg !24
  %880 = fadd float %337, %869, !dbg !29
  %881 = fcmp oeq float %880, 0.000000e+00, !dbg !30
  %882 = tail call float @llvm.nvvm.div.full(float %337, float %880), !dbg !31
  %883 = select i1 %881, float 0.000000e+00, float %882, !dbg !32
  %884 = fmul float %883, %879, !dbg !33
  %885 = fadd float %874, %884, !dbg !34
  %886 = fmul float %879, %879, !dbg !35
  %887 = fmul float %869, %886, !dbg !36
  %888 = fmul float %883, %887, !dbg !37
  %889 = fadd float %878, %888, !dbg !38
  %890 = fsub float %321, %885, !dbg !24
  %891 = fadd float %337, %880, !dbg !29
  %892 = fcmp oeq float %891, 0.000000e+00, !dbg !30
  %893 = tail call float @llvm.nvvm.div.full(float %337, float %891), !dbg !31
  %894 = select i1 %892, float 0.000000e+00, float %893, !dbg !32
  %895 = fmul float %894, %890, !dbg !33
  %896 = fadd float %885, %895, !dbg !34
  %897 = fmul float %890, %890, !dbg !35
  %898 = fmul float %880, %897, !dbg !36
  %899 = fmul float %894, %898, !dbg !37
  %900 = fadd float %889, %899, !dbg !38
  %901 = fsub float %322, %896, !dbg !24
  %902 = fadd float %337, %891, !dbg !29
  %903 = fcmp oeq float %902, 0.000000e+00, !dbg !30
  %904 = tail call float @llvm.nvvm.div.full(float %337, float %902), !dbg !31
  %905 = select i1 %903, float 0.000000e+00, float %904, !dbg !32
  %906 = fmul float %905, %901, !dbg !33
  %907 = fadd float %896, %906, !dbg !34
  %908 = fadd float %900, 0.000000e+00, !dbg !39
  %909 = fmul float %901, %901, !dbg !35
  %910 = fmul float %891, %909, !dbg !36
  %911 = fmul float %905, %910, !dbg !37
  %912 = fadd float %908, %911, !dbg !38
  %913 = fsub float %323, %907, !dbg !24
  %914 = fadd float %337, %902, !dbg !29
  %915 = fcmp oeq float %914, 0.000000e+00, !dbg !30
  %916 = tail call float @llvm.nvvm.div.full(float %337, float %914), !dbg !31
  %917 = select i1 %915, float 0.000000e+00, float %916, !dbg !32
  %918 = fmul float %917, %913, !dbg !33
  %919 = fadd float %907, %918, !dbg !34
  %920 = fmul float %913, %913, !dbg !35
  %921 = fmul float %902, %920, !dbg !36
  %922 = fmul float %917, %921, !dbg !37
  %923 = fadd float %912, %922, !dbg !38
  %924 = fsub float %324, %919, !dbg !24
  %925 = fadd float %337, %914, !dbg !29
  %926 = fcmp oeq float %925, 0.000000e+00, !dbg !30
  %927 = tail call float @llvm.nvvm.div.full(float %337, float %925), !dbg !31
  %928 = select i1 %926, float 0.000000e+00, float %927, !dbg !32
  %929 = fmul float %928, %924, !dbg !33
  %930 = fadd float %919, %929, !dbg !34
  %931 = fmul float %924, %924, !dbg !35
  %932 = fmul float %914, %931, !dbg !36
  %933 = fmul float %928, %932, !dbg !37
  %934 = fadd float %923, %933, !dbg !38
  %935 = fsub float %325, %930, !dbg !24
  %936 = fadd float %337, %925, !dbg !29
  %937 = fcmp oeq float %936, 0.000000e+00, !dbg !30
  %938 = tail call float @llvm.nvvm.div.full(float %337, float %936), !dbg !31
  %939 = select i1 %937, float 0.000000e+00, float %938, !dbg !32
  %940 = fmul float %939, %935, !dbg !33
  %941 = fadd float %930, %940, !dbg !34
  %942 = fmul float %935, %935, !dbg !35
  %943 = fmul float %925, %942, !dbg !36
  %944 = fmul float %939, %943, !dbg !37
  %945 = fadd float %934, %944, !dbg !38
  %946 = fsub float %326, %941, !dbg !24
  %947 = fadd float %337, %936, !dbg !29
  %948 = fcmp oeq float %947, 0.000000e+00, !dbg !30
  %949 = tail call float @llvm.nvvm.div.full(float %337, float %947), !dbg !31
  %950 = select i1 %948, float 0.000000e+00, float %949, !dbg !32
  %951 = fmul float %950, %946, !dbg !33
  %952 = fadd float %941, %951, !dbg !34
  %953 = fmul float %946, %946, !dbg !35
  %954 = fmul float %936, %953, !dbg !36
  %955 = fmul float %950, %954, !dbg !37
  %956 = fadd float %945, %955, !dbg !38
  %957 = fsub float %327, %952, !dbg !24
  %958 = fadd float %337, %947, !dbg !29
  %959 = fcmp oeq float %958, 0.000000e+00, !dbg !30
  %960 = tail call float @llvm.nvvm.div.full(float %337, float %958), !dbg !31
  %961 = select i1 %959, float 0.000000e+00, float %960, !dbg !32
  %962 = fmul float %961, %957, !dbg !33
  %963 = fadd float %952, %962, !dbg !34
  %964 = fmul float %957, %957, !dbg !35
  %965 = fmul float %947, %964, !dbg !36
  %966 = fmul float %961, %965, !dbg !37
  %967 = fadd float %956, %966, !dbg !38
  %968 = fsub float %328, %963, !dbg !24
  %969 = fadd float %337, %958, !dbg !29
  %970 = fcmp oeq float %969, 0.000000e+00, !dbg !30
  %971 = tail call float @llvm.nvvm.div.full(float %337, float %969), !dbg !31
  %972 = select i1 %970, float 0.000000e+00, float %971, !dbg !32
  %973 = fmul float %972, %968, !dbg !33
  %974 = fadd float %963, %973, !dbg !34
  %975 = fadd float %967, 0.000000e+00, !dbg !39
  %976 = fmul float %968, %968, !dbg !35
  %977 = fmul float %958, %976, !dbg !36
  %978 = fmul float %972, %977, !dbg !37
  %979 = fadd float %975, %978, !dbg !38
  %980 = fsub float %329, %974, !dbg !24
  %981 = fadd float %337, %969, !dbg !29
  %982 = fcmp oeq float %981, 0.000000e+00, !dbg !30
  %983 = tail call float @llvm.nvvm.div.full(float %337, float %981), !dbg !31
  %984 = select i1 %982, float 0.000000e+00, float %983, !dbg !32
  %985 = fmul float %984, %980, !dbg !33
  %986 = fadd float %974, %985, !dbg !34
  %987 = fmul float %980, %980, !dbg !35
  %988 = fmul float %969, %987, !dbg !36
  %989 = fmul float %984, %988, !dbg !37
  %990 = fadd float %979, %989, !dbg !38
  %991 = fsub float %330, %986, !dbg !24
  %992 = fadd float %337, %981, !dbg !29
  %993 = fcmp oeq float %992, 0.000000e+00, !dbg !30
  %994 = tail call float @llvm.nvvm.div.full(float %337, float %992), !dbg !31
  %995 = select i1 %993, float 0.000000e+00, float %994, !dbg !32
  %996 = fmul float %995, %991, !dbg !33
  %997 = fadd float %986, %996, !dbg !34
  %998 = fmul float %991, %991, !dbg !35
  %999 = fmul float %981, %998, !dbg !36
  %1000 = fmul float %995, %999, !dbg !37
  %1001 = fadd float %990, %1000, !dbg !38
  %1002 = fsub float %331, %997, !dbg !24
  %1003 = fmul float %1002, %1002, !dbg !35
  %1004 = fmul float %992, %1003, !dbg !36
  %1005 = fadd float %337, %992, !dbg !29
  %1006 = fcmp oeq float %1005, 0.000000e+00, !dbg !30
  %1007 = tail call float @llvm.nvvm.div.full(float %337, float %1005), !dbg !31
  %1008 = select i1 %1006, float 0.000000e+00, float %1007, !dbg !32
  %1009 = fmul float %1008, %1002, !dbg !33
  %1010 = fadd float %997, %1009, !dbg !34
  %1011 = fmul float %1008, %1004, !dbg !37
  %1012 = fadd float %1001, %1011, !dbg !38
  %1013 = fsub float %332, %1010, !dbg !24
  %1014 = fadd float %337, %1005, !dbg !29
  %1015 = tail call float @llvm.nvvm.div.full(float %337, float %1014), !dbg !31
  %1016 = fadd float %337, %1014, !dbg !29
  %1017 = insertelement <2 x float> poison, float %1014, i64 0, !dbg !30
  %1018 = insertelement <2 x float> %1017, float %1016, i64 1, !dbg !30
  %1019 = fcmp oeq <2 x float> %1018, zeroinitializer, !dbg !30
  %1020 = tail call float @llvm.nvvm.div.full(float %337, float %1016), !dbg !31
  %1021 = insertelement <2 x float> poison, float %1015, i64 0, !dbg !32
  %1022 = insertelement <2 x float> %1021, float %1020, i64 1, !dbg !32
  %1023 = select <2 x i1> %1019, <2 x float> zeroinitializer, <2 x float> %1022, !dbg !32
  %1024 = extractelement <2 x float> %1023, i64 0, !dbg !33
  %1025 = fmul float %1024, %1013, !dbg !33
  %1026 = fadd float %1010, %1025, !dbg !34
  %1027 = fsub float %333, %1026, !dbg !24
  %1028 = insertelement <2 x float> poison, float %1013, i64 0, !dbg !35
  %1029 = insertelement <2 x float> %1028, float %1027, i64 1, !dbg !35
  %1030 = fmul <2 x float> %1029, %1029, !dbg !35
  %1031 = insertelement <2 x float> poison, float %1005, i64 0, !dbg !36
  %1032 = insertelement <2 x float> %1031, float %1014, i64 1, !dbg !36
  %1033 = fmul <2 x float> %1032, %1030, !dbg !36
  %1034 = fmul <2 x float> %1023, %1033, !dbg !37
  %1035 = extractelement <2 x float> %1034, i64 0, !dbg !38
  %1036 = fadd float %1012, %1035, !dbg !38
  %1037 = extractelement <2 x float> %1023, i64 1, !dbg !33
  %1038 = fmul float %1037, %1027, !dbg !33
  %1039 = fadd float %1026, %1038, !dbg !34
  %1040 = extractelement <2 x float> %1034, i64 1, !dbg !38
  %1041 = fadd float %1036, %1040, !dbg !38
  %1042 = bitcast float %687 to i32, !dbg !40
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 16, i32 31), !dbg !40
  %1044 = bitcast i32 %1043 to float, !dbg !40
  %1045 = bitcast float %689 to i32, !dbg !40
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 16, i32 31), !dbg !40
  %1047 = bitcast i32 %1046 to float, !dbg !40
  %1048 = bitcast float %664 to i32, !dbg !40
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 16, i32 31), !dbg !40
  %1050 = bitcast i32 %1049 to float, !dbg !40
  %1051 = fsub float %1044, %687, !dbg !24
  %1052 = fadd float %664, %1050, !dbg !29
  %1053 = fcmp oeq float %1052, 0.000000e+00, !dbg !30
  %1054 = tail call float @llvm.nvvm.div.full(float %1050, float %1052), !dbg !31
  %1055 = select i1 %1053, float 0.000000e+00, float %1054, !dbg !32
  %1056 = fmul float %1055, %1051, !dbg !33
  %1057 = fadd float %687, %1056, !dbg !34
  %1058 = fadd float %689, %1047, !dbg !39
  %1059 = fmul float %1051, %1051, !dbg !35
  %1060 = fmul float %664, %1059, !dbg !36
  %1061 = fmul float %1055, %1060, !dbg !37
  %1062 = fadd float %1058, %1061, !dbg !38
  %1063 = bitcast float %1057 to i32, !dbg !40
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 8, i32 31), !dbg !40
  %1065 = bitcast i32 %1064 to float, !dbg !40
  %1066 = bitcast float %1062 to i32, !dbg !40
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 8, i32 31), !dbg !40
  %1068 = bitcast i32 %1067 to float, !dbg !40
  %1069 = bitcast float %1052 to i32, !dbg !40
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 8, i32 31), !dbg !40
  %1071 = bitcast i32 %1070 to float, !dbg !40
  %1072 = fsub float %1065, %1057, !dbg !24
  %1073 = fadd float %1052, %1071, !dbg !29
  %1074 = fcmp oeq float %1073, 0.000000e+00, !dbg !30
  %1075 = tail call float @llvm.nvvm.div.full(float %1071, float %1073), !dbg !31
  %1076 = select i1 %1074, float 0.000000e+00, float %1075, !dbg !32
  %1077 = fmul float %1076, %1072, !dbg !33
  %1078 = fadd float %1057, %1077, !dbg !34
  %1079 = fadd float %1062, %1068, !dbg !39
  %1080 = fmul float %1072, %1072, !dbg !35
  %1081 = fmul float %1052, %1080, !dbg !36
  %1082 = fmul float %1076, %1081, !dbg !37
  %1083 = fadd float %1079, %1082, !dbg !38
  %1084 = bitcast float %1078 to i32, !dbg !40
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 4, i32 31), !dbg !40
  %1086 = bitcast i32 %1085 to float, !dbg !40
  %1087 = bitcast float %1083 to i32, !dbg !40
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 4, i32 31), !dbg !40
  %1089 = bitcast i32 %1088 to float, !dbg !40
  %1090 = bitcast float %1073 to i32, !dbg !40
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 4, i32 31), !dbg !40
  %1092 = bitcast i32 %1091 to float, !dbg !40
  %1093 = fsub float %1086, %1078, !dbg !24
  %1094 = fadd float %1073, %1092, !dbg !29
  %1095 = fcmp oeq float %1094, 0.000000e+00, !dbg !30
  %1096 = tail call float @llvm.nvvm.div.full(float %1092, float %1094), !dbg !31
  %1097 = select i1 %1095, float 0.000000e+00, float %1096, !dbg !32
  %1098 = fmul float %1097, %1093, !dbg !33
  %1099 = fadd float %1078, %1098, !dbg !34
  %1100 = fadd float %1083, %1089, !dbg !39
  %1101 = fmul float %1093, %1093, !dbg !35
  %1102 = fmul float %1073, %1101, !dbg !36
  %1103 = fmul float %1097, %1102, !dbg !37
  %1104 = fadd float %1100, %1103, !dbg !38
  %1105 = bitcast float %1099 to i32, !dbg !40
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 2, i32 31), !dbg !40
  %1107 = bitcast i32 %1106 to float, !dbg !40
  %1108 = bitcast float %1104 to i32, !dbg !40
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 2, i32 31), !dbg !40
  %1110 = bitcast i32 %1109 to float, !dbg !40
  %1111 = bitcast float %1094 to i32, !dbg !40
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 2, i32 31), !dbg !40
  %1113 = bitcast i32 %1112 to float, !dbg !40
  %1114 = fsub float %1107, %1099, !dbg !24
  %1115 = fadd float %1094, %1113, !dbg !29
  %1116 = fcmp oeq float %1115, 0.000000e+00, !dbg !30
  %1117 = tail call float @llvm.nvvm.div.full(float %1113, float %1115), !dbg !31
  %1118 = select i1 %1116, float 0.000000e+00, float %1117, !dbg !32
  %1119 = fmul float %1118, %1114, !dbg !33
  %1120 = fadd float %1099, %1119, !dbg !34
  %1121 = fadd float %1104, %1110, !dbg !39
  %1122 = fmul float %1114, %1114, !dbg !35
  %1123 = fmul float %1094, %1122, !dbg !36
  %1124 = fmul float %1118, %1123, !dbg !37
  %1125 = fadd float %1121, %1124, !dbg !38
  %1126 = bitcast float %1120 to i32, !dbg !40
  %1127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1126, i32 1, i32 31), !dbg !40
  %1128 = bitcast i32 %1127 to float, !dbg !40
  %1129 = bitcast float %1125 to i32, !dbg !40
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 1, i32 31), !dbg !40
  %1131 = bitcast i32 %1130 to float, !dbg !40
  %1132 = bitcast float %1115 to i32, !dbg !40
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 1, i32 31), !dbg !40
  %1134 = bitcast i32 %1133 to float, !dbg !40
  %1135 = fsub float %1128, %1120, !dbg !24
  %1136 = fadd float %1115, %1134, !dbg !29
  %1137 = fcmp oeq float %1136, 0.000000e+00, !dbg !30
  %1138 = tail call float @llvm.nvvm.div.full(float %1134, float %1136), !dbg !31
  %1139 = select i1 %1137, float 0.000000e+00, float %1138, !dbg !32
  %1140 = fmul float %1139, %1135, !dbg !33
  %1141 = fadd float %1120, %1140, !dbg !34
  %1142 = fadd float %1125, %1131, !dbg !39
  %1143 = fmul float %1135, %1135, !dbg !35
  %1144 = fmul float %1115, %1143, !dbg !36
  %1145 = fmul float %1139, %1144, !dbg !37
  %1146 = fadd float %1142, %1145, !dbg !38
  %1147 = bitcast float %1039 to i32, !dbg !40
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1147, i32 16, i32 31), !dbg !40
  %1149 = bitcast i32 %1148 to float, !dbg !40
  %1150 = bitcast float %1041 to i32, !dbg !40
  %1151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1150, i32 16, i32 31), !dbg !40
  %1152 = bitcast i32 %1151 to float, !dbg !40
  %1153 = bitcast float %1016 to i32, !dbg !40
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 16, i32 31), !dbg !40
  %1155 = bitcast i32 %1154 to float, !dbg !40
  %1156 = fsub float %1149, %1039, !dbg !24
  %1157 = fadd float %1016, %1155, !dbg !29
  %1158 = fcmp oeq float %1157, 0.000000e+00, !dbg !30
  %1159 = tail call float @llvm.nvvm.div.full(float %1155, float %1157), !dbg !31
  %1160 = select i1 %1158, float 0.000000e+00, float %1159, !dbg !32
  %1161 = fmul float %1160, %1156, !dbg !33
  %1162 = fadd float %1039, %1161, !dbg !34
  %1163 = fadd float %1041, %1152, !dbg !39
  %1164 = fmul float %1156, %1156, !dbg !35
  %1165 = fmul float %1016, %1164, !dbg !36
  %1166 = fmul float %1160, %1165, !dbg !37
  %1167 = fadd float %1163, %1166, !dbg !38
  %1168 = bitcast float %1162 to i32, !dbg !40
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 8, i32 31), !dbg !40
  %1170 = bitcast i32 %1169 to float, !dbg !40
  %1171 = bitcast float %1167 to i32, !dbg !40
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 8, i32 31), !dbg !40
  %1173 = bitcast i32 %1172 to float, !dbg !40
  %1174 = bitcast float %1157 to i32, !dbg !40
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 8, i32 31), !dbg !40
  %1176 = bitcast i32 %1175 to float, !dbg !40
  %1177 = fsub float %1170, %1162, !dbg !24
  %1178 = fadd float %1157, %1176, !dbg !29
  %1179 = fcmp oeq float %1178, 0.000000e+00, !dbg !30
  %1180 = tail call float @llvm.nvvm.div.full(float %1176, float %1178), !dbg !31
  %1181 = select i1 %1179, float 0.000000e+00, float %1180, !dbg !32
  %1182 = fmul float %1181, %1177, !dbg !33
  %1183 = fadd float %1162, %1182, !dbg !34
  %1184 = fadd float %1167, %1173, !dbg !39
  %1185 = fmul float %1177, %1177, !dbg !35
  %1186 = fmul float %1157, %1185, !dbg !36
  %1187 = fmul float %1181, %1186, !dbg !37
  %1188 = fadd float %1184, %1187, !dbg !38
  %1189 = bitcast float %1183 to i32, !dbg !40
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 4, i32 31), !dbg !40
  %1191 = bitcast i32 %1190 to float, !dbg !40
  %1192 = bitcast float %1188 to i32, !dbg !40
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 4, i32 31), !dbg !40
  %1194 = bitcast i32 %1193 to float, !dbg !40
  %1195 = bitcast float %1178 to i32, !dbg !40
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 4, i32 31), !dbg !40
  %1197 = bitcast i32 %1196 to float, !dbg !40
  %1198 = fsub float %1191, %1183, !dbg !24
  %1199 = fadd float %1178, %1197, !dbg !29
  %1200 = fcmp oeq float %1199, 0.000000e+00, !dbg !30
  %1201 = tail call float @llvm.nvvm.div.full(float %1197, float %1199), !dbg !31
  %1202 = select i1 %1200, float 0.000000e+00, float %1201, !dbg !32
  %1203 = fmul float %1202, %1198, !dbg !33
  %1204 = fadd float %1183, %1203, !dbg !34
  %1205 = fadd float %1188, %1194, !dbg !39
  %1206 = fmul float %1198, %1198, !dbg !35
  %1207 = fmul float %1178, %1206, !dbg !36
  %1208 = fmul float %1202, %1207, !dbg !37
  %1209 = fadd float %1205, %1208, !dbg !38
  %1210 = bitcast float %1204 to i32, !dbg !40
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 2, i32 31), !dbg !40
  %1212 = bitcast i32 %1211 to float, !dbg !40
  %1213 = bitcast float %1209 to i32, !dbg !40
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 2, i32 31), !dbg !40
  %1215 = bitcast i32 %1214 to float, !dbg !40
  %1216 = bitcast float %1199 to i32, !dbg !40
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 2, i32 31), !dbg !40
  %1218 = bitcast i32 %1217 to float, !dbg !40
  %1219 = fsub float %1212, %1204, !dbg !24
  %1220 = fadd float %1199, %1218, !dbg !29
  %1221 = fcmp oeq float %1220, 0.000000e+00, !dbg !30
  %1222 = tail call float @llvm.nvvm.div.full(float %1218, float %1220), !dbg !31
  %1223 = select i1 %1221, float 0.000000e+00, float %1222, !dbg !32
  %1224 = fmul float %1223, %1219, !dbg !33
  %1225 = fadd float %1204, %1224, !dbg !34
  %1226 = fadd float %1209, %1215, !dbg !39
  %1227 = fmul float %1219, %1219, !dbg !35
  %1228 = fmul float %1199, %1227, !dbg !36
  %1229 = fmul float %1223, %1228, !dbg !37
  %1230 = fadd float %1226, %1229, !dbg !38
  %1231 = bitcast float %1225 to i32, !dbg !40
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1231, i32 1, i32 31), !dbg !40
  %1233 = bitcast i32 %1232 to float, !dbg !40
  %1234 = bitcast float %1230 to i32, !dbg !40
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 1, i32 31), !dbg !40
  %1236 = bitcast i32 %1235 to float, !dbg !40
  %1237 = bitcast float %1220 to i32, !dbg !40
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1237, i32 1, i32 31), !dbg !40
  %1239 = bitcast i32 %1238 to float, !dbg !40
  %1240 = fsub float %1233, %1225, !dbg !24
  %1241 = fadd float %1220, %1239, !dbg !29
  %1242 = fcmp oeq float %1241, 0.000000e+00, !dbg !30
  %1243 = tail call float @llvm.nvvm.div.full(float %1239, float %1241), !dbg !31
  %1244 = select i1 %1242, float 0.000000e+00, float %1243, !dbg !32
  %1245 = fmul float %1244, %1240, !dbg !33
  %1246 = fadd float %1225, %1245, !dbg !34
  %1247 = fadd float %1230, %1236, !dbg !39
  %1248 = fmul float %1240, %1240, !dbg !35
  %1249 = fmul float %1220, %1248, !dbg !36
  %1250 = fmul float %1244, %1249, !dbg !37
  %1251 = fadd float %1247, %1250, !dbg !38
  %1252 = and i32 %26, 3, !dbg !40
  %1253 = icmp eq i32 %22, 0, !dbg !40
  %1254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1252, !dbg !40
  %1255 = bitcast float %1141 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %1255, i1 %1253) #5, !dbg !40
  %1256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1252, !dbg !40
  %1257 = bitcast float %1146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1256, <1 x i32> %1257, i1 %1253) #5, !dbg !40
  %1258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1252, !dbg !40
  %1259 = bitcast float %1136 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1258, <1 x i32> %1259, i1 %1253) #5, !dbg !40
  %1260 = or disjoint i32 %1252, 4, !dbg !40
  %1261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1260, !dbg !40
  %1262 = bitcast float %1246 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1261, <1 x i32> %1262, i1 %1253) #5, !dbg !40
  %1263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1260, !dbg !40
  %1264 = bitcast float %1251 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1263, <1 x i32> %1264, i1 %1253) #5, !dbg !40
  %1265 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1260, !dbg !40
  %1266 = bitcast float %1241 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1265, <1 x i32> %1266, i1 %1253) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1267 = icmp slt i32 %21, 8, !dbg !40
  %1268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %1269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1268, i1 %1267) #5, !dbg !40
  %1270 = bitcast i32 %1269 to float, !dbg !40
  %1271 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !40
  %1272 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1271, i1 %1267) #5, !dbg !40
  %1273 = bitcast i32 %1272 to float, !dbg !40
  %1274 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !40
  %1275 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1274, i1 %1267) #5, !dbg !40
  %1276 = bitcast i32 %1275 to float, !dbg !40
  %1277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1269, i32 2, i32 31), !dbg !40
  %1278 = bitcast i32 %1277 to float, !dbg !40
  %1279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 2, i32 31), !dbg !40
  %1280 = bitcast i32 %1279 to float, !dbg !40
  %1281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1275, i32 2, i32 31), !dbg !40
  %1282 = bitcast i32 %1281 to float, !dbg !40
  %1283 = fsub float %1278, %1270, !dbg !24
  %1284 = fadd float %1276, %1282, !dbg !29
  %1285 = fcmp oeq float %1284, 0.000000e+00, !dbg !30
  %1286 = tail call float @llvm.nvvm.div.full(float %1282, float %1284), !dbg !31
  %1287 = select i1 %1285, float 0.000000e+00, float %1286, !dbg !32
  %1288 = fmul float %1283, %1287, !dbg !33
  %1289 = fadd float %1288, %1270, !dbg !34
  %1290 = fadd float %1273, %1280, !dbg !39
  %1291 = fmul float %1283, %1283, !dbg !35
  %1292 = fmul float %1291, %1276, !dbg !36
  %1293 = fmul float %1292, %1287, !dbg !37
  %1294 = fadd float %1290, %1293, !dbg !38
  %1295 = bitcast float %1289 to i32, !dbg !40
  %1296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1295, i32 1, i32 31), !dbg !40
  %1297 = bitcast i32 %1296 to float, !dbg !40
  %1298 = bitcast float %1294 to i32, !dbg !40
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 1, i32 31), !dbg !40
  %1300 = bitcast i32 %1299 to float, !dbg !40
  %1301 = bitcast float %1284 to i32, !dbg !40
  %1302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1301, i32 1, i32 31), !dbg !40
  %1303 = bitcast i32 %1302 to float, !dbg !40
  %1304 = fsub float %1297, %1289, !dbg !24
  %1305 = fadd float %1284, %1303, !dbg !29
  %1306 = fcmp oeq float %1305, 0.000000e+00, !dbg !30
  %1307 = tail call float @llvm.nvvm.div.full(float %1303, float %1305), !dbg !31
  %1308 = select i1 %1306, float 0.000000e+00, float %1307, !dbg !32
  %1309 = fmul float %1304, %1308, !dbg !33
  %1310 = fadd float %1289, %1309, !dbg !34
  %1311 = fadd float %1294, %1300, !dbg !39
  %1312 = fmul float %1304, %1304, !dbg !35
  %1313 = fmul float %1284, %1312, !dbg !36
  %1314 = fmul float %1308, %1313, !dbg !37
  %1315 = fadd float %1311, %1314, !dbg !38
  %1316 = and i32 %21, 3, !dbg !40
  %1317 = icmp eq i32 %1316, 0, !dbg !40
  %1318 = and i1 %1267, %1317, !dbg !40
  %1319 = bitcast float %1310 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1268, <1 x i32> %1319, i1 %1318) #5, !dbg !40
  %1320 = bitcast float %1315 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1271, <1 x i32> %1320, i1 %1318) #5, !dbg !40
  %1321 = bitcast float %1305 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1274, <1 x i32> %1321, i1 %1318) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1322 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %1323 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !40
  %1324 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  %1325 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !40
  %1326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i1 %24) #5, !dbg !41
  %1327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %24) #5, !dbg !41
  %1328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %68) #5, !dbg !41
  %1329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %68) #5, !dbg !41
  %1330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %25) #5, !dbg !41
  %1331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %25) #5, !dbg !41
  %1332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %69) #5, !dbg !41
  %1333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %67, i1 %69) #5, !dbg !41
  %1334 = or disjoint i32 %28, 4096, !dbg !42
  %1335 = or disjoint i32 %28, 4100, !dbg !42
  %1336 = or disjoint i32 %28, 5120, !dbg !42
  %1337 = or disjoint i32 %28, 5124, !dbg !42
  %1338 = or disjoint i32 %28, 6144, !dbg !42
  %1339 = or disjoint i32 %28, 6148, !dbg !42
  %1340 = zext nneg i32 %34 to i64, !dbg !43
  %1341 = getelementptr float, ptr addrspace(1) %1, i64 %1340, !dbg !43
  %1342 = zext nneg i32 %35 to i64, !dbg !43
  %1343 = getelementptr float, ptr addrspace(1) %1, i64 %1342, !dbg !43
  %1344 = zext nneg i32 %1334 to i64, !dbg !43
  %1345 = getelementptr float, ptr addrspace(1) %1, i64 %1344, !dbg !43
  %1346 = zext nneg i32 %1335 to i64, !dbg !43
  %1347 = getelementptr float, ptr addrspace(1) %1, i64 %1346, !dbg !43
  %1348 = zext nneg i32 %1336 to i64, !dbg !43
  %1349 = getelementptr float, ptr addrspace(1) %1, i64 %1348, !dbg !43
  %1350 = zext nneg i32 %1337 to i64, !dbg !43
  %1351 = getelementptr float, ptr addrspace(1) %1, i64 %1350, !dbg !43
  %1352 = zext nneg i32 %1338 to i64, !dbg !43
  %1353 = getelementptr float, ptr addrspace(1) %1, i64 %1352, !dbg !43
  %1354 = zext nneg i32 %1339 to i64, !dbg !43
  %1355 = getelementptr float, ptr addrspace(1) %1, i64 %1354, !dbg !43
  %1356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1341, i1 true) #5, !dbg !44
  %1357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1343, i1 true) #5, !dbg !44
  %1358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1345, i1 true) #5, !dbg !44
  %1359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1347, i1 true) #5, !dbg !44
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1349, i1 true) #5, !dbg !44
  %1361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1351, i1 true) #5, !dbg !44
  %1362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1353, i1 false) #5, !dbg !44
  %1363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1355, i1 false) #5, !dbg !44
  %1364 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1340, !dbg !45
  %1365 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1344, !dbg !45
  %1366 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1348, !dbg !45
  %1367 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1352, !dbg !45
  %1368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1364, i1 true) #5, !dbg !46
  %1369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1365, i1 true) #5, !dbg !46
  %1370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1366, i1 true) #5, !dbg !46
  %1371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1367, i1 false) #5, !dbg !46
  %1372 = zext nneg i32 %28 to i64, !dbg !47
  %1373 = getelementptr float, ptr addrspace(1) %1, i64 %1372, !dbg !47
  %1374 = zext nneg i32 %29 to i64, !dbg !47
  %1375 = getelementptr float, ptr addrspace(1) %1, i64 %1374, !dbg !47
  %1376 = zext nneg i32 %30 to i64, !dbg !47
  %1377 = getelementptr float, ptr addrspace(1) %1, i64 %1376, !dbg !47
  %1378 = zext nneg i32 %31 to i64, !dbg !47
  %1379 = getelementptr float, ptr addrspace(1) %1, i64 %1378, !dbg !47
  %1380 = zext nneg i32 %32 to i64, !dbg !47
  %1381 = getelementptr float, ptr addrspace(1) %1, i64 %1380, !dbg !47
  %1382 = zext nneg i32 %33 to i64, !dbg !47
  %1383 = getelementptr float, ptr addrspace(1) %1, i64 %1382, !dbg !47
  %1384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1373, i1 true) #5, !dbg !48
  %1385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1375, i1 true) #5, !dbg !48
  %1386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1377, i1 true) #5, !dbg !48
  %1387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1379, i1 true) #5, !dbg !48
  %1388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1381, i1 true) #5, !dbg !48
  %1389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1383, i1 true) #5, !dbg !48
  %1390 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1341, i1 false) #5, !dbg !48
  %1391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1343, i1 false) #5, !dbg !48
  %1392 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1372, !dbg !49
  %1393 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1376, !dbg !49
  %1394 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1380, !dbg !49
  %1395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1392, i1 true) #5, !dbg !50
  %1396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1393, i1 true) #5, !dbg !50
  %1397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1394, i1 true) #5, !dbg !50
  %1398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1364, i1 false) #5, !dbg !50
  %1399 = tail call float @llvm.nvvm.div.full(float %1324, float 3.072000e+03), !dbg !51
  %1400 = tail call float @llvm.nvvm.div.full(float %1325, float 3.072000e+03), !dbg !51
  %1401 = fadd float %1399, 0x3EB0C6F7A0000000, !dbg !52
  %1402 = fadd float %1400, 0x3EB0C6F7A0000000, !dbg !52
  %1403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i109 = icmp eq i32 %1418, 0, !dbg !53
  br i1 %.not.i109, label %1421, label %1419, !dbg !53

1419:                                             ; preds = %__nv_rsqrtf.exit
  %1420 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1401), !dbg !53
  br label %__nv_rsqrtf.exit111, !dbg !53

1421:                                             ; preds = %__nv_rsqrtf.exit
  %1422 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1401), !dbg !53
  br label %__nv_rsqrtf.exit111, !dbg !53

__nv_rsqrtf.exit111:                              ; preds = %1419, %1421
  %.0.i110 = phi float [ %1420, %1419 ], [ %1422, %1421 ], !dbg !53
  %1423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i157 = icmp eq i32 %1438, 0, !dbg !53
  br i1 %.not.i157, label %1441, label %1439, !dbg !53

1439:                                             ; preds = %__nv_rsqrtf.exit111
  %1440 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1402), !dbg !53
  br label %__nv_rsqrtf.exit159, !dbg !53

1441:                                             ; preds = %__nv_rsqrtf.exit111
  %1442 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1402), !dbg !53
  br label %__nv_rsqrtf.exit159, !dbg !53

__nv_rsqrtf.exit159:                              ; preds = %1439, %1441
  %.0.i158 = phi float [ %1440, %1439 ], [ %1442, %1441 ], !dbg !53
  %1443 = extractvalue { i32, i32, i32, i32 } %1333, 3, !dbg !41
  %1444 = bitcast i32 %1443 to <2 x bfloat>, !dbg !41
  %1445 = extractelement <2 x bfloat> %1444, i64 1, !dbg !41
  %1446 = fpext bfloat %1445 to float, !dbg !54
  %1447 = fsub float %1446, %1323, !dbg !55
  %1448 = extractelement <2 x bfloat> %1444, i64 0, !dbg !41
  %1449 = fpext bfloat %1448 to float, !dbg !54
  %1450 = fsub float %1449, %1323, !dbg !55
  %1451 = extractvalue { i32, i32, i32, i32 } %1333, 2, !dbg !41
  %1452 = bitcast i32 %1451 to <2 x bfloat>, !dbg !41
  %1453 = extractelement <2 x bfloat> %1452, i64 1, !dbg !41
  %1454 = fpext bfloat %1453 to float, !dbg !54
  %1455 = fsub float %1454, %1323, !dbg !55
  %1456 = extractelement <2 x bfloat> %1452, i64 0, !dbg !41
  %1457 = fpext bfloat %1456 to float, !dbg !54
  %1458 = fsub float %1457, %1323, !dbg !55
  %1459 = extractvalue { i32, i32, i32, i32 } %1333, 1, !dbg !41
  %1460 = bitcast i32 %1459 to <2 x bfloat>, !dbg !41
  %1461 = extractelement <2 x bfloat> %1460, i64 1, !dbg !41
  %1462 = fpext bfloat %1461 to float, !dbg !54
  %1463 = fsub float %1462, %1323, !dbg !55
  %1464 = extractelement <2 x bfloat> %1460, i64 0, !dbg !41
  %1465 = fpext bfloat %1464 to float, !dbg !54
  %1466 = fsub float %1465, %1323, !dbg !55
  %1467 = extractvalue { i32, i32, i32, i32 } %1333, 0, !dbg !41
  %1468 = bitcast i32 %1467 to <2 x bfloat>, !dbg !41
  %1469 = extractelement <2 x bfloat> %1468, i64 1, !dbg !41
  %1470 = fpext bfloat %1469 to float, !dbg !54
  %1471 = fsub float %1470, %1323, !dbg !55
  %1472 = extractelement <2 x bfloat> %1468, i64 0, !dbg !41
  %1473 = fpext bfloat %1472 to float, !dbg !54
  %1474 = fsub float %1473, %1323, !dbg !55
  %1475 = extractvalue { i32, i32, i32, i32 } %1332, 3, !dbg !41
  %1476 = bitcast i32 %1475 to <2 x bfloat>, !dbg !41
  %1477 = extractelement <2 x bfloat> %1476, i64 1, !dbg !41
  %1478 = fpext bfloat %1477 to float, !dbg !54
  %1479 = fsub float %1478, %1323, !dbg !55
  %1480 = extractelement <2 x bfloat> %1476, i64 0, !dbg !41
  %1481 = fpext bfloat %1480 to float, !dbg !54
  %1482 = fsub float %1481, %1323, !dbg !55
  %1483 = extractvalue { i32, i32, i32, i32 } %1332, 2, !dbg !41
  %1484 = bitcast i32 %1483 to <2 x bfloat>, !dbg !41
  %1485 = extractelement <2 x bfloat> %1484, i64 1, !dbg !41
  %1486 = fpext bfloat %1485 to float, !dbg !54
  %1487 = fsub float %1486, %1323, !dbg !55
  %1488 = extractelement <2 x bfloat> %1484, i64 0, !dbg !41
  %1489 = fpext bfloat %1488 to float, !dbg !54
  %1490 = fsub float %1489, %1323, !dbg !55
  %1491 = extractvalue { i32, i32, i32, i32 } %1332, 1, !dbg !41
  %1492 = bitcast i32 %1491 to <2 x bfloat>, !dbg !41
  %1493 = extractelement <2 x bfloat> %1492, i64 1, !dbg !41
  %1494 = fpext bfloat %1493 to float, !dbg !54
  %1495 = fsub float %1494, %1323, !dbg !55
  %1496 = extractelement <2 x bfloat> %1492, i64 0, !dbg !41
  %1497 = fpext bfloat %1496 to float, !dbg !54
  %1498 = fsub float %1497, %1323, !dbg !55
  %1499 = extractvalue { i32, i32, i32, i32 } %1332, 0, !dbg !41
  %1500 = bitcast i32 %1499 to <2 x bfloat>, !dbg !41
  %1501 = extractelement <2 x bfloat> %1500, i64 1, !dbg !41
  %1502 = fpext bfloat %1501 to float, !dbg !54
  %1503 = fsub float %1502, %1323, !dbg !55
  %1504 = extractelement <2 x bfloat> %1500, i64 0, !dbg !41
  %1505 = fpext bfloat %1504 to float, !dbg !54
  %1506 = fsub float %1505, %1323, !dbg !55
  %1507 = extractvalue { i32, i32, i32, i32 } %1331, 3, !dbg !41
  %1508 = bitcast i32 %1507 to <2 x bfloat>, !dbg !41
  %1509 = extractelement <2 x bfloat> %1508, i64 1, !dbg !41
  %1510 = fpext bfloat %1509 to float, !dbg !54
  %1511 = fsub float %1510, %1323, !dbg !55
  %1512 = extractelement <2 x bfloat> %1508, i64 0, !dbg !41
  %1513 = fpext bfloat %1512 to float, !dbg !54
  %1514 = fsub float %1513, %1323, !dbg !55
  %1515 = extractvalue { i32, i32, i32, i32 } %1331, 2, !dbg !41
  %1516 = bitcast i32 %1515 to <2 x bfloat>, !dbg !41
  %1517 = extractelement <2 x bfloat> %1516, i64 1, !dbg !41
  %1518 = fpext bfloat %1517 to float, !dbg !54
  %1519 = fsub float %1518, %1323, !dbg !55
  %1520 = extractelement <2 x bfloat> %1516, i64 0, !dbg !41
  %1521 = fpext bfloat %1520 to float, !dbg !54
  %1522 = fsub float %1521, %1323, !dbg !55
  %1523 = extractvalue { i32, i32, i32, i32 } %1331, 1, !dbg !41
  %1524 = bitcast i32 %1523 to <2 x bfloat>, !dbg !41
  %1525 = extractelement <2 x bfloat> %1524, i64 1, !dbg !41
  %1526 = fpext bfloat %1525 to float, !dbg !54
  %1527 = fsub float %1526, %1323, !dbg !55
  %1528 = extractelement <2 x bfloat> %1524, i64 0, !dbg !41
  %1529 = fpext bfloat %1528 to float, !dbg !54
  %1530 = fsub float %1529, %1323, !dbg !55
  %1531 = extractvalue { i32, i32, i32, i32 } %1331, 0, !dbg !41
  %1532 = bitcast i32 %1531 to <2 x bfloat>, !dbg !41
  %1533 = extractelement <2 x bfloat> %1532, i64 1, !dbg !41
  %1534 = fpext bfloat %1533 to float, !dbg !54
  %1535 = fsub float %1534, %1323, !dbg !55
  %1536 = extractelement <2 x bfloat> %1532, i64 0, !dbg !41
  %1537 = fpext bfloat %1536 to float, !dbg !54
  %1538 = fsub float %1537, %1323, !dbg !55
  %1539 = extractvalue { i32, i32, i32, i32 } %1330, 3, !dbg !41
  %1540 = bitcast i32 %1539 to <2 x bfloat>, !dbg !41
  %1541 = extractelement <2 x bfloat> %1540, i64 1, !dbg !41
  %1542 = fpext bfloat %1541 to float, !dbg !54
  %1543 = fsub float %1542, %1323, !dbg !55
  %1544 = extractelement <2 x bfloat> %1540, i64 0, !dbg !41
  %1545 = fpext bfloat %1544 to float, !dbg !54
  %1546 = fsub float %1545, %1323, !dbg !55
  %1547 = extractvalue { i32, i32, i32, i32 } %1330, 2, !dbg !41
  %1548 = bitcast i32 %1547 to <2 x bfloat>, !dbg !41
  %1549 = extractelement <2 x bfloat> %1548, i64 1, !dbg !41
  %1550 = fpext bfloat %1549 to float, !dbg !54
  %1551 = fsub float %1550, %1323, !dbg !55
  %1552 = extractelement <2 x bfloat> %1548, i64 0, !dbg !41
  %1553 = fpext bfloat %1552 to float, !dbg !54
  %1554 = fsub float %1553, %1323, !dbg !55
  %1555 = extractvalue { i32, i32, i32, i32 } %1330, 1, !dbg !41
  %1556 = bitcast i32 %1555 to <2 x bfloat>, !dbg !41
  %1557 = extractelement <2 x bfloat> %1556, i64 1, !dbg !41
  %1558 = fpext bfloat %1557 to float, !dbg !54
  %1559 = fsub float %1558, %1323, !dbg !55
  %1560 = extractelement <2 x bfloat> %1556, i64 0, !dbg !41
  %1561 = fpext bfloat %1560 to float, !dbg !54
  %1562 = fsub float %1561, %1323, !dbg !55
  %1563 = extractvalue { i32, i32, i32, i32 } %1330, 0, !dbg !41
  %1564 = bitcast i32 %1563 to <2 x bfloat>, !dbg !41
  %1565 = extractelement <2 x bfloat> %1564, i64 1, !dbg !41
  %1566 = fpext bfloat %1565 to float, !dbg !54
  %1567 = fsub float %1566, %1323, !dbg !55
  %1568 = extractelement <2 x bfloat> %1564, i64 0, !dbg !41
  %1569 = fpext bfloat %1568 to float, !dbg !54
  %1570 = fsub float %1569, %1323, !dbg !55
  %1571 = extractvalue { i32, i32, i32, i32 } %1329, 3, !dbg !41
  %1572 = bitcast i32 %1571 to <2 x bfloat>, !dbg !41
  %1573 = extractelement <2 x bfloat> %1572, i64 1, !dbg !41
  %1574 = fpext bfloat %1573 to float, !dbg !54
  %1575 = fsub float %1574, %1322, !dbg !55
  %1576 = extractelement <2 x bfloat> %1572, i64 0, !dbg !41
  %1577 = fpext bfloat %1576 to float, !dbg !54
  %1578 = fsub float %1577, %1322, !dbg !55
  %1579 = extractvalue { i32, i32, i32, i32 } %1329, 2, !dbg !41
  %1580 = bitcast i32 %1579 to <2 x bfloat>, !dbg !41
  %1581 = extractelement <2 x bfloat> %1580, i64 1, !dbg !41
  %1582 = fpext bfloat %1581 to float, !dbg !54
  %1583 = fsub float %1582, %1322, !dbg !55
  %1584 = extractelement <2 x bfloat> %1580, i64 0, !dbg !41
  %1585 = fpext bfloat %1584 to float, !dbg !54
  %1586 = fsub float %1585, %1322, !dbg !55
  %1587 = extractvalue { i32, i32, i32, i32 } %1329, 1, !dbg !41
  %1588 = bitcast i32 %1587 to <2 x bfloat>, !dbg !41
  %1589 = extractelement <2 x bfloat> %1588, i64 1, !dbg !41
  %1590 = fpext bfloat %1589 to float, !dbg !54
  %1591 = fsub float %1590, %1322, !dbg !55
  %1592 = extractelement <2 x bfloat> %1588, i64 0, !dbg !41
  %1593 = fpext bfloat %1592 to float, !dbg !54
  %1594 = fsub float %1593, %1322, !dbg !55
  %1595 = extractvalue { i32, i32, i32, i32 } %1329, 0, !dbg !41
  %1596 = bitcast i32 %1595 to <2 x bfloat>, !dbg !41
  %1597 = extractelement <2 x bfloat> %1596, i64 1, !dbg !41
  %1598 = fpext bfloat %1597 to float, !dbg !54
  %1599 = fsub float %1598, %1322, !dbg !55
  %1600 = extractelement <2 x bfloat> %1596, i64 0, !dbg !41
  %1601 = fpext bfloat %1600 to float, !dbg !54
  %1602 = fsub float %1601, %1322, !dbg !55
  %1603 = extractvalue { i32, i32, i32, i32 } %1328, 3, !dbg !41
  %1604 = bitcast i32 %1603 to <2 x bfloat>, !dbg !41
  %1605 = extractelement <2 x bfloat> %1604, i64 1, !dbg !41
  %1606 = fpext bfloat %1605 to float, !dbg !54
  %1607 = fsub float %1606, %1322, !dbg !55
  %1608 = extractelement <2 x bfloat> %1604, i64 0, !dbg !41
  %1609 = fpext bfloat %1608 to float, !dbg !54
  %1610 = fsub float %1609, %1322, !dbg !55
  %1611 = extractvalue { i32, i32, i32, i32 } %1328, 2, !dbg !41
  %1612 = bitcast i32 %1611 to <2 x bfloat>, !dbg !41
  %1613 = extractelement <2 x bfloat> %1612, i64 1, !dbg !41
  %1614 = fpext bfloat %1613 to float, !dbg !54
  %1615 = fsub float %1614, %1322, !dbg !55
  %1616 = extractelement <2 x bfloat> %1612, i64 0, !dbg !41
  %1617 = fpext bfloat %1616 to float, !dbg !54
  %1618 = fsub float %1617, %1322, !dbg !55
  %1619 = extractvalue { i32, i32, i32, i32 } %1328, 1, !dbg !41
  %1620 = bitcast i32 %1619 to <2 x bfloat>, !dbg !41
  %1621 = extractelement <2 x bfloat> %1620, i64 1, !dbg !41
  %1622 = fpext bfloat %1621 to float, !dbg !54
  %1623 = fsub float %1622, %1322, !dbg !55
  %1624 = extractelement <2 x bfloat> %1620, i64 0, !dbg !41
  %1625 = fpext bfloat %1624 to float, !dbg !54
  %1626 = fsub float %1625, %1322, !dbg !55
  %1627 = extractvalue { i32, i32, i32, i32 } %1328, 0, !dbg !41
  %1628 = bitcast i32 %1627 to <2 x bfloat>, !dbg !41
  %1629 = extractelement <2 x bfloat> %1628, i64 1, !dbg !41
  %1630 = fpext bfloat %1629 to float, !dbg !54
  %1631 = fsub float %1630, %1322, !dbg !55
  %1632 = extractelement <2 x bfloat> %1628, i64 0, !dbg !41
  %1633 = fpext bfloat %1632 to float, !dbg !54
  %1634 = fsub float %1633, %1322, !dbg !55
  %1635 = extractvalue { i32, i32, i32, i32 } %1327, 3, !dbg !41
  %1636 = bitcast i32 %1635 to <2 x bfloat>, !dbg !41
  %1637 = extractelement <2 x bfloat> %1636, i64 1, !dbg !41
  %1638 = fpext bfloat %1637 to float, !dbg !54
  %1639 = fsub float %1638, %1322, !dbg !55
  %1640 = extractelement <2 x bfloat> %1636, i64 0, !dbg !41
  %1641 = fpext bfloat %1640 to float, !dbg !54
  %1642 = fsub float %1641, %1322, !dbg !55
  %1643 = extractvalue { i32, i32, i32, i32 } %1327, 2, !dbg !41
  %1644 = bitcast i32 %1643 to <2 x bfloat>, !dbg !41
  %1645 = extractelement <2 x bfloat> %1644, i64 1, !dbg !41
  %1646 = fpext bfloat %1645 to float, !dbg !54
  %1647 = fsub float %1646, %1322, !dbg !55
  %1648 = extractelement <2 x bfloat> %1644, i64 0, !dbg !41
  %1649 = fpext bfloat %1648 to float, !dbg !54
  %1650 = fsub float %1649, %1322, !dbg !55
  %1651 = extractvalue { i32, i32, i32, i32 } %1327, 1, !dbg !41
  %1652 = bitcast i32 %1651 to <2 x bfloat>, !dbg !41
  %1653 = extractelement <2 x bfloat> %1652, i64 1, !dbg !41
  %1654 = fpext bfloat %1653 to float, !dbg !54
  %1655 = fsub float %1654, %1322, !dbg !55
  %1656 = extractelement <2 x bfloat> %1652, i64 0, !dbg !41
  %1657 = fpext bfloat %1656 to float, !dbg !54
  %1658 = fsub float %1657, %1322, !dbg !55
  %1659 = extractvalue { i32, i32, i32, i32 } %1327, 0, !dbg !41
  %1660 = bitcast i32 %1659 to <2 x bfloat>, !dbg !41
  %1661 = extractelement <2 x bfloat> %1660, i64 1, !dbg !41
  %1662 = fpext bfloat %1661 to float, !dbg !54
  %1663 = fsub float %1662, %1322, !dbg !55
  %1664 = extractelement <2 x bfloat> %1660, i64 0, !dbg !41
  %1665 = fpext bfloat %1664 to float, !dbg !54
  %1666 = fsub float %1665, %1322, !dbg !55
  %1667 = extractvalue { i32, i32, i32, i32 } %1326, 3, !dbg !41
  %1668 = bitcast i32 %1667 to <2 x bfloat>, !dbg !41
  %1669 = extractelement <2 x bfloat> %1668, i64 1, !dbg !41
  %1670 = fpext bfloat %1669 to float, !dbg !54
  %1671 = fsub float %1670, %1322, !dbg !55
  %1672 = extractelement <2 x bfloat> %1668, i64 0, !dbg !41
  %1673 = fpext bfloat %1672 to float, !dbg !54
  %1674 = fsub float %1673, %1322, !dbg !55
  %1675 = extractvalue { i32, i32, i32, i32 } %1326, 2, !dbg !41
  %1676 = bitcast i32 %1675 to <2 x bfloat>, !dbg !41
  %1677 = extractelement <2 x bfloat> %1676, i64 1, !dbg !41
  %1678 = fpext bfloat %1677 to float, !dbg !54
  %1679 = fsub float %1678, %1322, !dbg !55
  %1680 = extractelement <2 x bfloat> %1676, i64 0, !dbg !41
  %1681 = fpext bfloat %1680 to float, !dbg !54
  %1682 = fsub float %1681, %1322, !dbg !55
  %1683 = extractvalue { i32, i32, i32, i32 } %1326, 1, !dbg !41
  %1684 = bitcast i32 %1683 to <2 x bfloat>, !dbg !41
  %1685 = extractelement <2 x bfloat> %1684, i64 1, !dbg !41
  %1686 = fpext bfloat %1685 to float, !dbg !54
  %1687 = fsub float %1686, %1322, !dbg !55
  %1688 = extractelement <2 x bfloat> %1684, i64 0, !dbg !41
  %1689 = fpext bfloat %1688 to float, !dbg !54
  %1690 = fsub float %1689, %1322, !dbg !55
  %1691 = extractvalue { i32, i32, i32, i32 } %1326, 0, !dbg !41
  %1692 = bitcast i32 %1691 to <2 x bfloat>, !dbg !41
  %1693 = extractelement <2 x bfloat> %1692, i64 1, !dbg !41
  %1694 = fpext bfloat %1693 to float, !dbg !54
  %1695 = fsub float %1694, %1322, !dbg !55
  %1696 = extractelement <2 x bfloat> %1692, i64 0, !dbg !41
  %1697 = fpext bfloat %1696 to float, !dbg !54
  %1698 = fsub float %1697, %1322, !dbg !55
  %1699 = extractvalue { i32, i32, i32, i32 } %1398, 3, !dbg !50
  %1700 = bitcast i32 %1699 to <2 x bfloat>, !dbg !50
  %1701 = extractvalue { i32, i32, i32, i32 } %1398, 2, !dbg !50
  %1702 = bitcast i32 %1701 to <2 x bfloat>, !dbg !50
  %1703 = extractvalue { i32, i32, i32, i32 } %1398, 1, !dbg !50
  %1704 = bitcast i32 %1703 to <2 x bfloat>, !dbg !50
  %1705 = extractvalue { i32, i32, i32, i32 } %1398, 0, !dbg !50
  %1706 = bitcast i32 %1705 to <2 x bfloat>, !dbg !50
  %1707 = extractvalue { i32, i32, i32, i32 } %1397, 3, !dbg !50
  %1708 = bitcast i32 %1707 to <2 x bfloat>, !dbg !50
  %1709 = extractvalue { i32, i32, i32, i32 } %1397, 2, !dbg !50
  %1710 = bitcast i32 %1709 to <2 x bfloat>, !dbg !50
  %1711 = extractvalue { i32, i32, i32, i32 } %1397, 1, !dbg !50
  %1712 = bitcast i32 %1711 to <2 x bfloat>, !dbg !50
  %1713 = extractvalue { i32, i32, i32, i32 } %1397, 0, !dbg !50
  %1714 = bitcast i32 %1713 to <2 x bfloat>, !dbg !50
  %1715 = extractvalue { i32, i32, i32, i32 } %1396, 3, !dbg !50
  %1716 = bitcast i32 %1715 to <2 x bfloat>, !dbg !50
  %1717 = extractvalue { i32, i32, i32, i32 } %1396, 2, !dbg !50
  %1718 = bitcast i32 %1717 to <2 x bfloat>, !dbg !50
  %1719 = extractvalue { i32, i32, i32, i32 } %1396, 1, !dbg !50
  %1720 = bitcast i32 %1719 to <2 x bfloat>, !dbg !50
  %1721 = extractvalue { i32, i32, i32, i32 } %1396, 0, !dbg !50
  %1722 = bitcast i32 %1721 to <2 x bfloat>, !dbg !50
  %1723 = extractvalue { i32, i32, i32, i32 } %1395, 3, !dbg !50
  %1724 = bitcast i32 %1723 to <2 x bfloat>, !dbg !50
  %1725 = extractvalue { i32, i32, i32, i32 } %1395, 2, !dbg !50
  %1726 = bitcast i32 %1725 to <2 x bfloat>, !dbg !50
  %1727 = extractvalue { i32, i32, i32, i32 } %1395, 1, !dbg !50
  %1728 = bitcast i32 %1727 to <2 x bfloat>, !dbg !50
  %1729 = extractvalue { i32, i32, i32, i32 } %1395, 0, !dbg !50
  %1730 = bitcast i32 %1729 to <2 x bfloat>, !dbg !50
  %1731 = extractvalue { i32, i32, i32, i32 } %1391, 3, !dbg !48
  %1732 = extractvalue { i32, i32, i32, i32 } %1391, 2, !dbg !48
  %1733 = extractvalue { i32, i32, i32, i32 } %1391, 1, !dbg !48
  %1734 = extractvalue { i32, i32, i32, i32 } %1391, 0, !dbg !48
  %1735 = extractvalue { i32, i32, i32, i32 } %1390, 3, !dbg !48
  %1736 = extractvalue { i32, i32, i32, i32 } %1390, 2, !dbg !48
  %1737 = extractvalue { i32, i32, i32, i32 } %1390, 1, !dbg !48
  %1738 = extractvalue { i32, i32, i32, i32 } %1390, 0, !dbg !48
  %1739 = extractvalue { i32, i32, i32, i32 } %1389, 3, !dbg !48
  %1740 = extractvalue { i32, i32, i32, i32 } %1389, 2, !dbg !48
  %1741 = extractvalue { i32, i32, i32, i32 } %1389, 1, !dbg !48
  %1742 = extractvalue { i32, i32, i32, i32 } %1389, 0, !dbg !48
  %1743 = extractvalue { i32, i32, i32, i32 } %1388, 3, !dbg !48
  %1744 = extractvalue { i32, i32, i32, i32 } %1388, 2, !dbg !48
  %1745 = extractvalue { i32, i32, i32, i32 } %1388, 1, !dbg !48
  %1746 = extractvalue { i32, i32, i32, i32 } %1388, 0, !dbg !48
  %1747 = extractvalue { i32, i32, i32, i32 } %1387, 3, !dbg !48
  %1748 = extractvalue { i32, i32, i32, i32 } %1387, 2, !dbg !48
  %1749 = extractvalue { i32, i32, i32, i32 } %1387, 1, !dbg !48
  %1750 = extractvalue { i32, i32, i32, i32 } %1387, 0, !dbg !48
  %1751 = extractvalue { i32, i32, i32, i32 } %1386, 3, !dbg !48
  %1752 = extractvalue { i32, i32, i32, i32 } %1386, 2, !dbg !48
  %1753 = extractvalue { i32, i32, i32, i32 } %1386, 1, !dbg !48
  %1754 = extractvalue { i32, i32, i32, i32 } %1386, 0, !dbg !48
  %1755 = extractvalue { i32, i32, i32, i32 } %1385, 3, !dbg !48
  %1756 = extractvalue { i32, i32, i32, i32 } %1385, 2, !dbg !48
  %1757 = extractvalue { i32, i32, i32, i32 } %1385, 1, !dbg !48
  %1758 = extractvalue { i32, i32, i32, i32 } %1385, 0, !dbg !48
  %1759 = extractvalue { i32, i32, i32, i32 } %1384, 3, !dbg !48
  %1760 = extractvalue { i32, i32, i32, i32 } %1384, 2, !dbg !48
  %1761 = extractvalue { i32, i32, i32, i32 } %1384, 1, !dbg !48
  %1762 = extractvalue { i32, i32, i32, i32 } %1384, 0, !dbg !48
  %1763 = extractvalue { i32, i32, i32, i32 } %1371, 3, !dbg !46
  %1764 = bitcast i32 %1763 to <2 x bfloat>, !dbg !46
  %1765 = extractvalue { i32, i32, i32, i32 } %1371, 2, !dbg !46
  %1766 = bitcast i32 %1765 to <2 x bfloat>, !dbg !46
  %1767 = extractvalue { i32, i32, i32, i32 } %1371, 1, !dbg !46
  %1768 = bitcast i32 %1767 to <2 x bfloat>, !dbg !46
  %1769 = extractvalue { i32, i32, i32, i32 } %1371, 0, !dbg !46
  %1770 = bitcast i32 %1769 to <2 x bfloat>, !dbg !46
  %1771 = extractvalue { i32, i32, i32, i32 } %1370, 3, !dbg !46
  %1772 = bitcast i32 %1771 to <2 x bfloat>, !dbg !46
  %1773 = extractvalue { i32, i32, i32, i32 } %1370, 2, !dbg !46
  %1774 = bitcast i32 %1773 to <2 x bfloat>, !dbg !46
  %1775 = extractvalue { i32, i32, i32, i32 } %1370, 1, !dbg !46
  %1776 = bitcast i32 %1775 to <2 x bfloat>, !dbg !46
  %1777 = extractvalue { i32, i32, i32, i32 } %1370, 0, !dbg !46
  %1778 = bitcast i32 %1777 to <2 x bfloat>, !dbg !46
  %1779 = extractvalue { i32, i32, i32, i32 } %1369, 3, !dbg !46
  %1780 = bitcast i32 %1779 to <2 x bfloat>, !dbg !46
  %1781 = extractvalue { i32, i32, i32, i32 } %1369, 2, !dbg !46
  %1782 = bitcast i32 %1781 to <2 x bfloat>, !dbg !46
  %1783 = extractvalue { i32, i32, i32, i32 } %1369, 1, !dbg !46
  %1784 = bitcast i32 %1783 to <2 x bfloat>, !dbg !46
  %1785 = extractvalue { i32, i32, i32, i32 } %1369, 0, !dbg !46
  %1786 = bitcast i32 %1785 to <2 x bfloat>, !dbg !46
  %1787 = extractvalue { i32, i32, i32, i32 } %1368, 3, !dbg !46
  %1788 = bitcast i32 %1787 to <2 x bfloat>, !dbg !46
  %1789 = extractvalue { i32, i32, i32, i32 } %1368, 2, !dbg !46
  %1790 = bitcast i32 %1789 to <2 x bfloat>, !dbg !46
  %1791 = extractvalue { i32, i32, i32, i32 } %1368, 1, !dbg !46
  %1792 = bitcast i32 %1791 to <2 x bfloat>, !dbg !46
  %1793 = extractvalue { i32, i32, i32, i32 } %1368, 0, !dbg !46
  %1794 = bitcast i32 %1793 to <2 x bfloat>, !dbg !46
  %1795 = extractvalue { i32, i32, i32, i32 } %1363, 3, !dbg !44
  %1796 = extractvalue { i32, i32, i32, i32 } %1363, 2, !dbg !44
  %1797 = extractvalue { i32, i32, i32, i32 } %1363, 1, !dbg !44
  %1798 = extractvalue { i32, i32, i32, i32 } %1363, 0, !dbg !44
  %1799 = extractvalue { i32, i32, i32, i32 } %1362, 3, !dbg !44
  %1800 = extractvalue { i32, i32, i32, i32 } %1362, 2, !dbg !44
  %1801 = extractvalue { i32, i32, i32, i32 } %1362, 1, !dbg !44
  %1802 = extractvalue { i32, i32, i32, i32 } %1362, 0, !dbg !44
  %1803 = extractvalue { i32, i32, i32, i32 } %1361, 3, !dbg !44
  %1804 = extractvalue { i32, i32, i32, i32 } %1361, 2, !dbg !44
  %1805 = extractvalue { i32, i32, i32, i32 } %1361, 1, !dbg !44
  %1806 = extractvalue { i32, i32, i32, i32 } %1361, 0, !dbg !44
  %1807 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !44
  %1808 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !44
  %1809 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !44
  %1810 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !44
  %1811 = extractvalue { i32, i32, i32, i32 } %1359, 3, !dbg !44
  %1812 = extractvalue { i32, i32, i32, i32 } %1359, 2, !dbg !44
  %1813 = extractvalue { i32, i32, i32, i32 } %1359, 1, !dbg !44
  %1814 = extractvalue { i32, i32, i32, i32 } %1359, 0, !dbg !44
  %1815 = extractvalue { i32, i32, i32, i32 } %1358, 3, !dbg !44
  %1816 = extractvalue { i32, i32, i32, i32 } %1358, 2, !dbg !44
  %1817 = extractvalue { i32, i32, i32, i32 } %1358, 1, !dbg !44
  %1818 = extractvalue { i32, i32, i32, i32 } %1358, 0, !dbg !44
  %1819 = extractvalue { i32, i32, i32, i32 } %1357, 3, !dbg !44
  %1820 = extractvalue { i32, i32, i32, i32 } %1357, 2, !dbg !44
  %1821 = extractvalue { i32, i32, i32, i32 } %1357, 1, !dbg !44
  %1822 = extractvalue { i32, i32, i32, i32 } %1357, 0, !dbg !44
  %1823 = extractvalue { i32, i32, i32, i32 } %1356, 3, !dbg !44
  %1824 = extractvalue { i32, i32, i32, i32 } %1356, 2, !dbg !44
  %1825 = extractvalue { i32, i32, i32, i32 } %1356, 1, !dbg !44
  %1826 = extractvalue { i32, i32, i32, i32 } %1356, 0, !dbg !44
  %1827 = add i32 %34, %43, !dbg !17
  %1828 = add i32 %32, %43, !dbg !17
  %1829 = add i32 %30, %43, !dbg !17
  %1830 = or disjoint i32 %43, %28, !dbg !17
  %1831 = add i32 %34, %42, !dbg !17
  %1832 = add i32 %32, %42, !dbg !17
  %1833 = or disjoint i32 %30, %42, !dbg !17
  %1834 = or disjoint i32 %28, %42, !dbg !17
  %1835 = and i32 %21, 1, !dbg !11
  %1836 = or disjoint i32 %20, %1835, !dbg !12
  %1837 = icmp slt i32 %1836, 4112, !dbg !13
  %1838 = fmul float %1698, %.0.i110, !dbg !56
  %1839 = fmul float %1695, %.0.i110, !dbg !56
  %1840 = fmul float %1690, %.0.i110, !dbg !56
  %1841 = fmul float %1687, %.0.i110, !dbg !56
  %1842 = fmul float %1682, %.0.i110, !dbg !56
  %1843 = fmul float %1679, %.0.i110, !dbg !56
  %1844 = fmul float %1674, %.0.i110, !dbg !56
  %1845 = fmul float %1671, %.0.i110, !dbg !56
  %1846 = fmul float %1666, %.0.i110, !dbg !56
  %1847 = fmul float %1663, %.0.i110, !dbg !56
  %1848 = fmul float %1658, %.0.i110, !dbg !56
  %1849 = fmul float %1655, %.0.i110, !dbg !56
  %1850 = fmul float %1650, %.0.i110, !dbg !56
  %1851 = fmul float %1647, %.0.i110, !dbg !56
  %1852 = fmul float %1642, %.0.i110, !dbg !56
  %1853 = fmul float %1639, %.0.i110, !dbg !56
  %1854 = fmul float %1634, %.0.i110, !dbg !56
  %1855 = fmul float %1631, %.0.i110, !dbg !56
  %1856 = fmul float %1626, %.0.i110, !dbg !56
  %1857 = fmul float %1623, %.0.i110, !dbg !56
  %1858 = fmul float %1618, %.0.i110, !dbg !56
  %1859 = fmul float %1615, %.0.i110, !dbg !56
  %1860 = fmul float %1610, %.0.i110, !dbg !56
  %1861 = fmul float %1607, %.0.i110, !dbg !56
  %1862 = fmul float %1602, %.0.i110, !dbg !56
  %1863 = fmul float %1599, %.0.i110, !dbg !56
  %1864 = fmul float %1594, %.0.i110, !dbg !56
  %1865 = fmul float %1591, %.0.i110, !dbg !56
  %1866 = fmul float %1586, %.0.i110, !dbg !56
  %1867 = fmul float %1583, %.0.i110, !dbg !56
  %1868 = fmul float %1578, %.0.i110, !dbg !56
  %1869 = fmul float %1575, %.0.i110, !dbg !56
  %1870 = fmul float %1570, %.0.i158, !dbg !56
  %1871 = fmul float %1567, %.0.i158, !dbg !56
  %1872 = fmul float %1562, %.0.i158, !dbg !56
  %1873 = fmul float %1559, %.0.i158, !dbg !56
  %1874 = fmul float %1554, %.0.i158, !dbg !56
  %1875 = fmul float %1551, %.0.i158, !dbg !56
  %1876 = fmul float %1546, %.0.i158, !dbg !56
  %1877 = fmul float %1543, %.0.i158, !dbg !56
  %1878 = fmul float %1538, %.0.i158, !dbg !56
  %1879 = fmul float %1535, %.0.i158, !dbg !56
  %1880 = fmul float %1530, %.0.i158, !dbg !56
  %1881 = fmul float %1527, %.0.i158, !dbg !56
  %1882 = fmul float %1522, %.0.i158, !dbg !56
  %1883 = fmul float %1519, %.0.i158, !dbg !56
  %1884 = fmul float %1514, %.0.i158, !dbg !56
  %1885 = fmul float %1511, %.0.i158, !dbg !56
  %1886 = fmul float %1506, %.0.i158, !dbg !56
  %1887 = fmul float %1503, %.0.i158, !dbg !56
  %1888 = fmul float %1498, %.0.i158, !dbg !56
  %1889 = fmul float %1495, %.0.i158, !dbg !56
  %1890 = fmul float %1490, %.0.i158, !dbg !56
  %1891 = fmul float %1487, %.0.i158, !dbg !56
  %1892 = fmul float %1482, %.0.i158, !dbg !56
  %1893 = fmul float %1479, %.0.i158, !dbg !56
  %1894 = fmul float %1474, %.0.i158, !dbg !56
  %1895 = fmul float %1471, %.0.i158, !dbg !56
  %1896 = fmul float %1466, %.0.i158, !dbg !56
  %1897 = fmul float %1463, %.0.i158, !dbg !56
  %1898 = fmul float %1458, %.0.i158, !dbg !56
  %1899 = fmul float %1455, %.0.i158, !dbg !56
  %1900 = fmul float %1450, %.0.i158, !dbg !56
  %1901 = fmul float %1447, %.0.i158, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1902 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %37, !dbg !56
  %1903 = bitcast float %1838 to i32, !dbg !56
  %1904 = bitcast float %1839 to i32, !dbg !56
  %1905 = bitcast float %1840 to i32, !dbg !56
  %1906 = bitcast float %1841 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1902, i32 %1903, i32 %1904, i32 %1905, i32 %1906, i1 true) #5, !dbg !56
  %1907 = or disjoint i32 %37, 4, !dbg !56
  %1908 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1907, !dbg !56
  %1909 = bitcast float %1842 to i32, !dbg !56
  %1910 = bitcast float %1843 to i32, !dbg !56
  %1911 = bitcast float %1844 to i32, !dbg !56
  %1912 = bitcast float %1845 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1908, i32 %1909, i32 %1910, i32 %1911, i32 %1912, i1 true) #5, !dbg !56
  %1913 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %38, !dbg !56
  %1914 = bitcast float %1846 to i32, !dbg !56
  %1915 = bitcast float %1847 to i32, !dbg !56
  %1916 = bitcast float %1848 to i32, !dbg !56
  %1917 = bitcast float %1849 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1913, i32 %1914, i32 %1915, i32 %1916, i32 %1917, i1 true) #5, !dbg !56
  %1918 = or disjoint i32 %37, 12, !dbg !56
  %1919 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1918, !dbg !56
  %1920 = bitcast float %1850 to i32, !dbg !56
  %1921 = bitcast float %1851 to i32, !dbg !56
  %1922 = bitcast float %1852 to i32, !dbg !56
  %1923 = bitcast float %1853 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1919, i32 %1920, i32 %1921, i32 %1922, i32 %1923, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1924 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !56
  %1925 = getelementptr inbounds nuw i8, ptr addrspace(3) %1924, i32 8, !dbg !56
  %1926 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !56
  %1927 = getelementptr inbounds nuw i8, ptr addrspace(3) %1926, i32 8, !dbg !56
  %1928 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30, !dbg !56
  %1929 = getelementptr inbounds nuw i8, ptr addrspace(3) %1928, i32 8, !dbg !56
  %1930 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31, !dbg !56
  %1931 = getelementptr inbounds nuw i8, ptr addrspace(3) %1930, i32 8, !dbg !56
  %1932 = bitcast float %1854 to i32, !dbg !56
  %1933 = bitcast float %1855 to i32, !dbg !56
  %1934 = bitcast float %1856 to i32, !dbg !56
  %1935 = bitcast float %1857 to i32, !dbg !56
  %1936 = bitcast float %1858 to i32, !dbg !56
  %1937 = bitcast float %1859 to i32, !dbg !56
  %1938 = bitcast float %1860 to i32, !dbg !56
  %1939 = bitcast float %1861 to i32, !dbg !56
  %1940 = bitcast float %1862 to i32, !dbg !56
  %1941 = bitcast float %1863 to i32, !dbg !56
  %1942 = bitcast float %1864 to i32, !dbg !56
  %1943 = bitcast float %1865 to i32, !dbg !56
  %1944 = bitcast float %1866 to i32, !dbg !56
  %1945 = bitcast float %1867 to i32, !dbg !56
  %1946 = bitcast float %1868 to i32, !dbg !56
  %1947 = bitcast float %1869 to i32, !dbg !56
  %1948 = bitcast float %1870 to i32, !dbg !56
  %1949 = bitcast float %1871 to i32, !dbg !56
  %1950 = bitcast float %1872 to i32, !dbg !56
  %1951 = bitcast float %1873 to i32, !dbg !56
  %1952 = bitcast float %1874 to i32, !dbg !56
  %1953 = bitcast float %1875 to i32, !dbg !56
  %1954 = bitcast float %1876 to i32, !dbg !56
  %1955 = bitcast float %1877 to i32, !dbg !56
  %1956 = bitcast float %1878 to i32, !dbg !56
  %1957 = bitcast float %1879 to i32, !dbg !56
  %1958 = bitcast float %1880 to i32, !dbg !56
  %1959 = bitcast float %1881 to i32, !dbg !56
  %1960 = bitcast float %1882 to i32, !dbg !56
  %1961 = bitcast float %1883 to i32, !dbg !56
  %1962 = bitcast float %1884 to i32, !dbg !56
  %1963 = bitcast float %1885 to i32, !dbg !56
  %1964 = bitcast float %1886 to i32, !dbg !56
  %1965 = bitcast float %1887 to i32, !dbg !56
  %1966 = bitcast float %1888 to i32, !dbg !56
  %1967 = bitcast float %1889 to i32, !dbg !56
  %1968 = bitcast float %1890 to i32, !dbg !56
  %1969 = bitcast float %1891 to i32, !dbg !56
  %1970 = bitcast float %1892 to i32, !dbg !56
  %1971 = bitcast float %1893 to i32, !dbg !56
  %1972 = bitcast float %1894 to i32, !dbg !56
  %1973 = bitcast float %1895 to i32, !dbg !56
  %1974 = bitcast float %1896 to i32, !dbg !56
  %1975 = bitcast float %1897 to i32, !dbg !56
  %1976 = bitcast float %1898 to i32, !dbg !56
  %1977 = bitcast float %1899 to i32, !dbg !56
  %1978 = bitcast float %1900 to i32, !dbg !56
  %1979 = bitcast float %1901 to i32, !dbg !56
  %1980 = sext i32 %1834 to i64, !dbg !57
  %1981 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1980, !dbg !57
  %1982 = sext i32 %1833 to i64, !dbg !57
  %1983 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1982, !dbg !57
  %1984 = sext i32 %1832 to i64, !dbg !57
  %1985 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1984, !dbg !57
  %1986 = sext i32 %1831 to i64, !dbg !57
  %1987 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1986, !dbg !57
  %1988 = sext i32 %1830 to i64, !dbg !57
  %1989 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1988, !dbg !57
  %1990 = sext i32 %1829 to i64, !dbg !57
  %1991 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1990, !dbg !57
  %1992 = sext i32 %1828 to i64, !dbg !57
  %1993 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1992, !dbg !57
  %1994 = sext i32 %1827 to i64, !dbg !57
  %1995 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1994, !dbg !57
  %1996 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !57
  %1997 = getelementptr bfloat, ptr addrspace(1) %3, i64 %54, !dbg !57
  %1998 = getelementptr bfloat, ptr addrspace(1) %3, i64 %56, !dbg !57
  %1999 = getelementptr bfloat, ptr addrspace(1) %3, i64 %58, !dbg !57
  %2000 = getelementptr bfloat, ptr addrspace(1) %3, i64 %60, !dbg !57
  %2001 = getelementptr bfloat, ptr addrspace(1) %3, i64 %62, !dbg !57
  %2002 = getelementptr bfloat, ptr addrspace(1) %3, i64 %64, !dbg !57
  %2003 = getelementptr bfloat, ptr addrspace(1) %3, i64 %66, !dbg !57
  %2004 = fpext <2 x bfloat> %1730 to <2 x float>, !dbg !58
  %2005 = insertelement <2 x i32> poison, i32 %1762, i64 0, !dbg !48
  %2006 = insertelement <2 x i32> %2005, i32 %1761, i64 1, !dbg !48
  %2007 = bitcast <2 x i32> %2006 to <2 x float>, !dbg !48
  %2008 = fpext <2 x bfloat> %1794 to <2 x float>, !dbg !59
  %2009 = insertelement <2 x i32> poison, i32 %1826, i64 0, !dbg !44
  %2010 = insertelement <2 x i32> %2009, i32 %1825, i64 1, !dbg !44
  %2011 = bitcast <2 x i32> %2010 to <2 x float>, !dbg !44
  %2012 = load <2 x float>, ptr addrspace(3) %1924, align 16, !dbg !56
  %2013 = fadd <2 x float> %2011, %2008, !dbg !60
  %2014 = fadd <2 x float> %2013, splat (float 1.000000e+00), !dbg !61
  %2015 = fmul <2 x float> %2014, %2012, !dbg !62
  %2016 = fadd <2 x float> %2007, %2004, !dbg !63
  %2017 = fadd <2 x float> %2016, %2015, !dbg !64
  %2018 = extractelement <2 x float> %2017, i64 0, !dbg !65
  %2019 = select i1 %24, float %2018, float 0x7FF0000000000000, !dbg !66
  %2020 = extractelement <2 x float> %2017, i64 1, !dbg !65
  %2021 = select i1 %24, float %2020, float 0x7FF0000000000000, !dbg !66
  %2022 = select i1 %24, float %2018, float 0xFFF0000000000000, !dbg !65
  %2023 = select i1 %24, float %2020, float 0xFFF0000000000000, !dbg !65
  %2024 = fptrunc <2 x float> %2017 to <2 x bfloat>, !dbg !67
  %2025 = fpext <2 x bfloat> %1728 to <2 x float>, !dbg !58
  %2026 = insertelement <2 x i32> poison, i32 %1760, i64 0, !dbg !48
  %2027 = insertelement <2 x i32> %2026, i32 %1759, i64 1, !dbg !48
  %2028 = bitcast <2 x i32> %2027 to <2 x float>, !dbg !48
  %2029 = fpext <2 x bfloat> %1792 to <2 x float>, !dbg !59
  %2030 = insertelement <2 x i32> poison, i32 %1824, i64 0, !dbg !44
  %2031 = insertelement <2 x i32> %2030, i32 %1823, i64 1, !dbg !44
  %2032 = bitcast <2 x i32> %2031 to <2 x float>, !dbg !44
  %2033 = load <2 x float>, ptr addrspace(3) %1925, align 8, !dbg !56
  %2034 = fadd <2 x float> %2032, %2029, !dbg !60
  %2035 = fadd <2 x float> %2034, splat (float 1.000000e+00), !dbg !61
  %2036 = fmul <2 x float> %2035, %2033, !dbg !62
  %2037 = fadd <2 x float> %2028, %2025, !dbg !63
  %2038 = fadd <2 x float> %2037, %2036, !dbg !64
  %2039 = extractelement <2 x float> %2038, i64 0, !dbg !65
  %2040 = select i1 %24, float %2039, float 0x7FF0000000000000, !dbg !66
  %2041 = extractelement <2 x float> %2038, i64 1, !dbg !65
  %2042 = select i1 %24, float %2041, float 0x7FF0000000000000, !dbg !66
  %2043 = select i1 %24, float %2039, float 0xFFF0000000000000, !dbg !65
  %2044 = select i1 %24, float %2041, float 0xFFF0000000000000, !dbg !65
  %2045 = fptrunc <2 x float> %2038 to <2 x bfloat>, !dbg !67
  %2046 = fpext <2 x bfloat> %1726 to <2 x float>, !dbg !58
  %2047 = insertelement <2 x i32> poison, i32 %1758, i64 0, !dbg !48
  %2048 = insertelement <2 x i32> %2047, i32 %1757, i64 1, !dbg !48
  %2049 = bitcast <2 x i32> %2048 to <2 x float>, !dbg !48
  %2050 = fpext <2 x bfloat> %1790 to <2 x float>, !dbg !59
  %2051 = insertelement <2 x i32> poison, i32 %1822, i64 0, !dbg !44
  %2052 = insertelement <2 x i32> %2051, i32 %1821, i64 1, !dbg !44
  %2053 = bitcast <2 x i32> %2052 to <2 x float>, !dbg !44
  %2054 = load <2 x float>, ptr addrspace(3) %1926, align 16, !dbg !56
  %2055 = fadd <2 x float> %2053, %2050, !dbg !60
  %2056 = fadd <2 x float> %2055, splat (float 1.000000e+00), !dbg !61
  %2057 = fmul <2 x float> %2056, %2054, !dbg !62
  %2058 = fadd <2 x float> %2049, %2046, !dbg !63
  %2059 = fadd <2 x float> %2058, %2057, !dbg !64
  %2060 = extractelement <2 x float> %2059, i64 0, !dbg !65
  %2061 = select i1 %24, float %2060, float 0x7FF0000000000000, !dbg !66
  %2062 = extractelement <2 x float> %2059, i64 1, !dbg !65
  %2063 = select i1 %24, float %2062, float 0x7FF0000000000000, !dbg !66
  %2064 = select i1 %24, float %2060, float 0xFFF0000000000000, !dbg !65
  %2065 = select i1 %24, float %2062, float 0xFFF0000000000000, !dbg !65
  %2066 = fptrunc <2 x float> %2059 to <2 x bfloat>, !dbg !67
  %2067 = fpext <2 x bfloat> %1724 to <2 x float>, !dbg !58
  %2068 = insertelement <2 x i32> poison, i32 %1756, i64 0, !dbg !48
  %2069 = insertelement <2 x i32> %2068, i32 %1755, i64 1, !dbg !48
  %2070 = bitcast <2 x i32> %2069 to <2 x float>, !dbg !48
  %2071 = fpext <2 x bfloat> %1788 to <2 x float>, !dbg !59
  %2072 = insertelement <2 x i32> poison, i32 %1820, i64 0, !dbg !44
  %2073 = insertelement <2 x i32> %2072, i32 %1819, i64 1, !dbg !44
  %2074 = bitcast <2 x i32> %2073 to <2 x float>, !dbg !44
  %2075 = load <2 x float>, ptr addrspace(3) %1927, align 8, !dbg !56
  %2076 = fadd <2 x float> %2074, %2071, !dbg !60
  %2077 = fadd <2 x float> %2076, splat (float 1.000000e+00), !dbg !61
  %2078 = fmul <2 x float> %2077, %2075, !dbg !62
  %2079 = fadd <2 x float> %2070, %2067, !dbg !63
  %2080 = fadd <2 x float> %2079, %2078, !dbg !64
  %2081 = extractelement <2 x float> %2080, i64 0, !dbg !65
  %2082 = select i1 %24, float %2081, float 0x7FF0000000000000, !dbg !66
  %2083 = extractelement <2 x float> %2080, i64 1, !dbg !65
  %2084 = select i1 %24, float %2083, float 0x7FF0000000000000, !dbg !66
  %2085 = select i1 %24, float %2081, float 0xFFF0000000000000, !dbg !65
  %2086 = select i1 %24, float %2083, float 0xFFF0000000000000, !dbg !65
  %2087 = fptrunc <2 x float> %2080 to <2 x bfloat>, !dbg !67
  %2088 = fpext <2 x bfloat> %1722 to <2 x float>, !dbg !58
  %2089 = insertelement <2 x i32> poison, i32 %1754, i64 0, !dbg !48
  %2090 = insertelement <2 x i32> %2089, i32 %1753, i64 1, !dbg !48
  %2091 = bitcast <2 x i32> %2090 to <2 x float>, !dbg !48
  %2092 = fpext <2 x bfloat> %1786 to <2 x float>, !dbg !59
  %2093 = insertelement <2 x i32> poison, i32 %1818, i64 0, !dbg !44
  %2094 = insertelement <2 x i32> %2093, i32 %1817, i64 1, !dbg !44
  %2095 = bitcast <2 x i32> %2094 to <2 x float>, !dbg !44
  %2096 = load <2 x float>, ptr addrspace(3) %1928, align 16, !dbg !56
  %2097 = fadd <2 x float> %2095, %2092, !dbg !60
  %2098 = fadd <2 x float> %2097, splat (float 1.000000e+00), !dbg !61
  %2099 = fmul <2 x float> %2098, %2096, !dbg !62
  %2100 = fadd <2 x float> %2091, %2088, !dbg !63
  %2101 = fadd <2 x float> %2100, %2099, !dbg !64
  %2102 = extractelement <2 x float> %2101, i64 0, !dbg !65
  %2103 = select i1 %24, float %2102, float 0x7FF0000000000000, !dbg !66
  %2104 = extractelement <2 x float> %2101, i64 1, !dbg !65
  %2105 = select i1 %24, float %2104, float 0x7FF0000000000000, !dbg !66
  %2106 = select i1 %24, float %2102, float 0xFFF0000000000000, !dbg !65
  %2107 = select i1 %24, float %2104, float 0xFFF0000000000000, !dbg !65
  %2108 = fptrunc <2 x float> %2101 to <2 x bfloat>, !dbg !67
  %2109 = fpext <2 x bfloat> %1720 to <2 x float>, !dbg !58
  %2110 = insertelement <2 x i32> poison, i32 %1752, i64 0, !dbg !48
  %2111 = insertelement <2 x i32> %2110, i32 %1751, i64 1, !dbg !48
  %2112 = bitcast <2 x i32> %2111 to <2 x float>, !dbg !48
  %2113 = fpext <2 x bfloat> %1784 to <2 x float>, !dbg !59
  %2114 = insertelement <2 x i32> poison, i32 %1816, i64 0, !dbg !44
  %2115 = insertelement <2 x i32> %2114, i32 %1815, i64 1, !dbg !44
  %2116 = bitcast <2 x i32> %2115 to <2 x float>, !dbg !44
  %2117 = load <2 x float>, ptr addrspace(3) %1929, align 8, !dbg !56
  %2118 = fadd <2 x float> %2116, %2113, !dbg !60
  %2119 = fadd <2 x float> %2118, splat (float 1.000000e+00), !dbg !61
  %2120 = fmul <2 x float> %2119, %2117, !dbg !62
  %2121 = fadd <2 x float> %2112, %2109, !dbg !63
  %2122 = fadd <2 x float> %2121, %2120, !dbg !64
  %2123 = extractelement <2 x float> %2122, i64 0, !dbg !65
  %2124 = select i1 %24, float %2123, float 0x7FF0000000000000, !dbg !66
  %2125 = extractelement <2 x float> %2122, i64 1, !dbg !65
  %2126 = select i1 %24, float %2125, float 0x7FF0000000000000, !dbg !66
  %2127 = select i1 %24, float %2123, float 0xFFF0000000000000, !dbg !65
  %2128 = select i1 %24, float %2125, float 0xFFF0000000000000, !dbg !65
  %2129 = fptrunc <2 x float> %2122 to <2 x bfloat>, !dbg !67
  %2130 = fpext <2 x bfloat> %1718 to <2 x float>, !dbg !58
  %2131 = insertelement <2 x i32> poison, i32 %1750, i64 0, !dbg !48
  %2132 = insertelement <2 x i32> %2131, i32 %1749, i64 1, !dbg !48
  %2133 = bitcast <2 x i32> %2132 to <2 x float>, !dbg !48
  %2134 = fpext <2 x bfloat> %1782 to <2 x float>, !dbg !59
  %2135 = insertelement <2 x i32> poison, i32 %1814, i64 0, !dbg !44
  %2136 = insertelement <2 x i32> %2135, i32 %1813, i64 1, !dbg !44
  %2137 = bitcast <2 x i32> %2136 to <2 x float>, !dbg !44
  %2138 = load <2 x float>, ptr addrspace(3) %1930, align 16, !dbg !56
  %2139 = fadd <2 x float> %2137, %2134, !dbg !60
  %2140 = fadd <2 x float> %2139, splat (float 1.000000e+00), !dbg !61
  %2141 = fmul <2 x float> %2140, %2138, !dbg !62
  %2142 = fadd <2 x float> %2133, %2130, !dbg !63
  %2143 = fadd <2 x float> %2142, %2141, !dbg !64
  %2144 = extractelement <2 x float> %2143, i64 0, !dbg !65
  %2145 = select i1 %24, float %2144, float 0x7FF0000000000000, !dbg !66
  %2146 = extractelement <2 x float> %2143, i64 1, !dbg !65
  %2147 = select i1 %24, float %2146, float 0x7FF0000000000000, !dbg !66
  %2148 = select i1 %24, float %2144, float 0xFFF0000000000000, !dbg !65
  %2149 = select i1 %24, float %2146, float 0xFFF0000000000000, !dbg !65
  %2150 = fptrunc <2 x float> %2143 to <2 x bfloat>, !dbg !67
  %2151 = fpext <2 x bfloat> %1716 to <2 x float>, !dbg !58
  %2152 = insertelement <2 x i32> poison, i32 %1748, i64 0, !dbg !48
  %2153 = insertelement <2 x i32> %2152, i32 %1747, i64 1, !dbg !48
  %2154 = bitcast <2 x i32> %2153 to <2 x float>, !dbg !48
  %2155 = fpext <2 x bfloat> %1780 to <2 x float>, !dbg !59
  %2156 = insertelement <2 x i32> poison, i32 %1812, i64 0, !dbg !44
  %2157 = insertelement <2 x i32> %2156, i32 %1811, i64 1, !dbg !44
  %2158 = bitcast <2 x i32> %2157 to <2 x float>, !dbg !44
  %2159 = load <2 x float>, ptr addrspace(3) %1931, align 8, !dbg !56
  %2160 = fadd <2 x float> %2158, %2155, !dbg !60
  %2161 = fadd <2 x float> %2160, splat (float 1.000000e+00), !dbg !61
  %2162 = fmul <2 x float> %2161, %2159, !dbg !62
  %2163 = fadd <2 x float> %2154, %2151, !dbg !63
  %2164 = fadd <2 x float> %2163, %2162, !dbg !64
  %2165 = extractelement <2 x float> %2164, i64 0, !dbg !65
  %2166 = select i1 %24, float %2165, float 0x7FF0000000000000, !dbg !66
  %2167 = extractelement <2 x float> %2164, i64 1, !dbg !65
  %2168 = select i1 %24, float %2167, float 0x7FF0000000000000, !dbg !66
  %2169 = select i1 %24, float %2165, float 0xFFF0000000000000, !dbg !65
  %2170 = select i1 %24, float %2167, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1902, i32 %1932, i32 %1933, i32 %1934, i32 %1935, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1908, i32 %1936, i32 %1937, i32 %1938, i32 %1939, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1913, i32 %1940, i32 %1941, i32 %1942, i32 %1943, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1919, i32 %1944, i32 %1945, i32 %1946, i32 %1947, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2171 = fptrunc <2 x float> %2164 to <2 x bfloat>, !dbg !67
  %2172 = fpext <2 x bfloat> %1714 to <2 x float>, !dbg !58
  %2173 = insertelement <2 x i32> poison, i32 %1746, i64 0, !dbg !48
  %2174 = insertelement <2 x i32> %2173, i32 %1745, i64 1, !dbg !48
  %2175 = bitcast <2 x i32> %2174 to <2 x float>, !dbg !48
  %2176 = fpext <2 x bfloat> %1778 to <2 x float>, !dbg !59
  %2177 = insertelement <2 x i32> poison, i32 %1810, i64 0, !dbg !44
  %2178 = insertelement <2 x i32> %2177, i32 %1809, i64 1, !dbg !44
  %2179 = bitcast <2 x i32> %2178 to <2 x float>, !dbg !44
  %2180 = fadd <2 x float> %2179, %2176, !dbg !60
  %2181 = fadd <2 x float> %2180, splat (float 1.000000e+00), !dbg !61
  %2182 = fadd <2 x float> %2175, %2172, !dbg !63
  %2183 = load <2 x float>, ptr addrspace(3) %1924, align 16, !dbg !56
  %2184 = fmul <2 x float> %2181, %2183, !dbg !62
  %2185 = fadd <2 x float> %2182, %2184, !dbg !64
  %2186 = extractelement <2 x float> %2185, i64 0, !dbg !65
  %2187 = select i1 %24, float %2186, float 0x7FF0000000000000, !dbg !66
  %2188 = extractelement <2 x float> %2185, i64 1, !dbg !65
  %2189 = select i1 %24, float %2188, float 0x7FF0000000000000, !dbg !66
  %2190 = select i1 %24, float %2186, float 0xFFF0000000000000, !dbg !65
  %2191 = select i1 %24, float %2188, float 0xFFF0000000000000, !dbg !65
  %2192 = fptrunc <2 x float> %2185 to <2 x bfloat>, !dbg !67
  %2193 = fpext <2 x bfloat> %1712 to <2 x float>, !dbg !58
  %2194 = insertelement <2 x i32> poison, i32 %1744, i64 0, !dbg !48
  %2195 = insertelement <2 x i32> %2194, i32 %1743, i64 1, !dbg !48
  %2196 = bitcast <2 x i32> %2195 to <2 x float>, !dbg !48
  %2197 = fpext <2 x bfloat> %1776 to <2 x float>, !dbg !59
  %2198 = insertelement <2 x i32> poison, i32 %1808, i64 0, !dbg !44
  %2199 = insertelement <2 x i32> %2198, i32 %1807, i64 1, !dbg !44
  %2200 = bitcast <2 x i32> %2199 to <2 x float>, !dbg !44
  %2201 = fadd <2 x float> %2200, %2197, !dbg !60
  %2202 = fadd <2 x float> %2201, splat (float 1.000000e+00), !dbg !61
  %2203 = fadd <2 x float> %2196, %2193, !dbg !63
  %2204 = load <2 x float>, ptr addrspace(3) %1925, align 8, !dbg !56
  %2205 = fmul <2 x float> %2202, %2204, !dbg !62
  %2206 = fadd <2 x float> %2203, %2205, !dbg !64
  %2207 = extractelement <2 x float> %2206, i64 0, !dbg !65
  %2208 = select i1 %24, float %2207, float 0x7FF0000000000000, !dbg !66
  %2209 = extractelement <2 x float> %2206, i64 1, !dbg !65
  %2210 = select i1 %24, float %2209, float 0x7FF0000000000000, !dbg !66
  %2211 = select i1 %24, float %2207, float 0xFFF0000000000000, !dbg !65
  %2212 = select i1 %24, float %2209, float 0xFFF0000000000000, !dbg !65
  %2213 = fptrunc <2 x float> %2206 to <2 x bfloat>, !dbg !67
  %2214 = fpext <2 x bfloat> %1710 to <2 x float>, !dbg !58
  %2215 = insertelement <2 x i32> poison, i32 %1742, i64 0, !dbg !48
  %2216 = insertelement <2 x i32> %2215, i32 %1741, i64 1, !dbg !48
  %2217 = bitcast <2 x i32> %2216 to <2 x float>, !dbg !48
  %2218 = fpext <2 x bfloat> %1774 to <2 x float>, !dbg !59
  %2219 = insertelement <2 x i32> poison, i32 %1806, i64 0, !dbg !44
  %2220 = insertelement <2 x i32> %2219, i32 %1805, i64 1, !dbg !44
  %2221 = bitcast <2 x i32> %2220 to <2 x float>, !dbg !44
  %2222 = fadd <2 x float> %2221, %2218, !dbg !60
  %2223 = fadd <2 x float> %2222, splat (float 1.000000e+00), !dbg !61
  %2224 = fadd <2 x float> %2217, %2214, !dbg !63
  %2225 = load <2 x float>, ptr addrspace(3) %1926, align 16, !dbg !56
  %2226 = fmul <2 x float> %2223, %2225, !dbg !62
  %2227 = fadd <2 x float> %2224, %2226, !dbg !64
  %2228 = extractelement <2 x float> %2227, i64 0, !dbg !65
  %2229 = select i1 %24, float %2228, float 0x7FF0000000000000, !dbg !66
  %2230 = extractelement <2 x float> %2227, i64 1, !dbg !65
  %2231 = select i1 %24, float %2230, float 0x7FF0000000000000, !dbg !66
  %2232 = select i1 %24, float %2228, float 0xFFF0000000000000, !dbg !65
  %2233 = select i1 %24, float %2230, float 0xFFF0000000000000, !dbg !65
  %2234 = fptrunc <2 x float> %2227 to <2 x bfloat>, !dbg !67
  %2235 = fpext <2 x bfloat> %1708 to <2 x float>, !dbg !58
  %2236 = insertelement <2 x i32> poison, i32 %1740, i64 0, !dbg !48
  %2237 = insertelement <2 x i32> %2236, i32 %1739, i64 1, !dbg !48
  %2238 = bitcast <2 x i32> %2237 to <2 x float>, !dbg !48
  %2239 = fpext <2 x bfloat> %1772 to <2 x float>, !dbg !59
  %2240 = insertelement <2 x i32> poison, i32 %1804, i64 0, !dbg !44
  %2241 = insertelement <2 x i32> %2240, i32 %1803, i64 1, !dbg !44
  %2242 = bitcast <2 x i32> %2241 to <2 x float>, !dbg !44
  %2243 = fadd <2 x float> %2242, %2239, !dbg !60
  %2244 = fadd <2 x float> %2243, splat (float 1.000000e+00), !dbg !61
  %2245 = fadd <2 x float> %2238, %2235, !dbg !63
  %2246 = load <2 x float>, ptr addrspace(3) %1927, align 8, !dbg !56
  %2247 = fmul <2 x float> %2244, %2246, !dbg !62
  %2248 = fadd <2 x float> %2245, %2247, !dbg !64
  %2249 = extractelement <2 x float> %2248, i64 0, !dbg !65
  %2250 = select i1 %24, float %2249, float 0x7FF0000000000000, !dbg !66
  %2251 = extractelement <2 x float> %2248, i64 1, !dbg !65
  %2252 = select i1 %24, float %2251, float 0x7FF0000000000000, !dbg !66
  %2253 = select i1 %24, float %2249, float 0xFFF0000000000000, !dbg !65
  %2254 = select i1 %24, float %2251, float 0xFFF0000000000000, !dbg !65
  %2255 = fptrunc <2 x float> %2248 to <2 x bfloat>, !dbg !67
  %2256 = fpext <2 x bfloat> %1706 to <2 x float>, !dbg !58
  %2257 = insertelement <2 x i32> poison, i32 %1738, i64 0, !dbg !48
  %2258 = insertelement <2 x i32> %2257, i32 %1737, i64 1, !dbg !48
  %2259 = bitcast <2 x i32> %2258 to <2 x float>, !dbg !48
  %2260 = fpext <2 x bfloat> %1770 to <2 x float>, !dbg !59
  %2261 = insertelement <2 x i32> poison, i32 %1802, i64 0, !dbg !44
  %2262 = insertelement <2 x i32> %2261, i32 %1801, i64 1, !dbg !44
  %2263 = bitcast <2 x i32> %2262 to <2 x float>, !dbg !44
  %2264 = fadd <2 x float> %2263, %2260, !dbg !60
  %2265 = fadd <2 x float> %2264, splat (float 1.000000e+00), !dbg !61
  %2266 = fadd <2 x float> %2259, %2256, !dbg !63
  %2267 = load <2 x float>, ptr addrspace(3) %1928, align 16, !dbg !56
  %2268 = fmul <2 x float> %2265, %2267, !dbg !62
  %2269 = fadd <2 x float> %2266, %2268, !dbg !64
  %2270 = fptrunc <2 x float> %2269 to <2 x bfloat>, !dbg !67
  %2271 = fpext <2 x bfloat> %1704 to <2 x float>, !dbg !58
  %2272 = insertelement <2 x i32> poison, i32 %1736, i64 0, !dbg !48
  %2273 = insertelement <2 x i32> %2272, i32 %1735, i64 1, !dbg !48
  %2274 = bitcast <2 x i32> %2273 to <2 x float>, !dbg !48
  %2275 = fpext <2 x bfloat> %1768 to <2 x float>, !dbg !59
  %2276 = insertelement <2 x i32> poison, i32 %1800, i64 0, !dbg !44
  %2277 = insertelement <2 x i32> %2276, i32 %1799, i64 1, !dbg !44
  %2278 = bitcast <2 x i32> %2277 to <2 x float>, !dbg !44
  %2279 = fadd <2 x float> %2278, %2275, !dbg !60
  %2280 = fadd <2 x float> %2279, splat (float 1.000000e+00), !dbg !61
  %2281 = fadd <2 x float> %2274, %2271, !dbg !63
  %2282 = load <2 x float>, ptr addrspace(3) %1929, align 8, !dbg !56
  %2283 = fmul <2 x float> %2280, %2282, !dbg !62
  %2284 = fadd <2 x float> %2281, %2283, !dbg !64
  %2285 = fptrunc <2 x float> %2284 to <2 x bfloat>, !dbg !67
  %2286 = fpext <2 x bfloat> %1702 to <2 x float>, !dbg !58
  %2287 = insertelement <2 x i32> poison, i32 %1734, i64 0, !dbg !48
  %2288 = insertelement <2 x i32> %2287, i32 %1733, i64 1, !dbg !48
  %2289 = bitcast <2 x i32> %2288 to <2 x float>, !dbg !48
  %2290 = fpext <2 x bfloat> %1766 to <2 x float>, !dbg !59
  %2291 = insertelement <2 x i32> poison, i32 %1798, i64 0, !dbg !44
  %2292 = insertelement <2 x i32> %2291, i32 %1797, i64 1, !dbg !44
  %2293 = bitcast <2 x i32> %2292 to <2 x float>, !dbg !44
  %2294 = fadd <2 x float> %2293, %2290, !dbg !60
  %2295 = fadd <2 x float> %2294, splat (float 1.000000e+00), !dbg !61
  %2296 = fadd <2 x float> %2289, %2286, !dbg !63
  %2297 = load <2 x float>, ptr addrspace(3) %1930, align 16, !dbg !56
  %2298 = fmul <2 x float> %2295, %2297, !dbg !62
  %2299 = fadd <2 x float> %2296, %2298, !dbg !64
  %2300 = fptrunc <2 x float> %2299 to <2 x bfloat>, !dbg !67
  %2301 = fpext <2 x bfloat> %1700 to <2 x float>, !dbg !58
  %2302 = insertelement <2 x i32> poison, i32 %1732, i64 0, !dbg !48
  %2303 = insertelement <2 x i32> %2302, i32 %1731, i64 1, !dbg !48
  %2304 = bitcast <2 x i32> %2303 to <2 x float>, !dbg !48
  %2305 = fpext <2 x bfloat> %1764 to <2 x float>, !dbg !59
  %2306 = insertelement <2 x i32> poison, i32 %1796, i64 0, !dbg !44
  %2307 = insertelement <2 x i32> %2306, i32 %1795, i64 1, !dbg !44
  %2308 = bitcast <2 x i32> %2307 to <2 x float>, !dbg !44
  %2309 = fadd <2 x float> %2308, %2305, !dbg !60
  %2310 = fadd <2 x float> %2309, splat (float 1.000000e+00), !dbg !61
  %2311 = fadd <2 x float> %2304, %2301, !dbg !63
  %2312 = load <2 x float>, ptr addrspace(3) %1931, align 8, !dbg !56
  %2313 = fmul <2 x float> %2310, %2312, !dbg !62
  %2314 = fadd <2 x float> %2311, %2313, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1902, i32 %1948, i32 %1949, i32 %1950, i32 %1951, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1908, i32 %1952, i32 %1953, i32 %1954, i32 %1955, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1913, i32 %1956, i32 %1957, i32 %1958, i32 %1959, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1919, i32 %1960, i32 %1961, i32 %1962, i32 %1963, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2315 = fptrunc <2 x float> %2314 to <2 x bfloat>, !dbg !67
  %2316 = load <2 x float>, ptr addrspace(3) %1924, align 16, !dbg !56
  %2317 = fmul <2 x float> %2014, %2316, !dbg !62
  %2318 = fadd <2 x float> %2016, %2317, !dbg !64
  %2319 = extractelement <2 x float> %2318, i64 0, !dbg !65
  %2320 = select i1 %25, float %2319, float 0x7FF0000000000000, !dbg !66
  %2321 = extractelement <2 x float> %2318, i64 1, !dbg !65
  %2322 = select i1 %25, float %2321, float 0x7FF0000000000000, !dbg !66
  %2323 = select i1 %25, float %2319, float 0xFFF0000000000000, !dbg !65
  %2324 = select i1 %25, float %2321, float 0xFFF0000000000000, !dbg !65
  %2325 = fptrunc <2 x float> %2318 to <2 x bfloat>, !dbg !67
  %2326 = load <2 x float>, ptr addrspace(3) %1925, align 8, !dbg !56
  %2327 = fmul <2 x float> %2035, %2326, !dbg !62
  %2328 = fadd <2 x float> %2037, %2327, !dbg !64
  %2329 = extractelement <2 x float> %2328, i64 0, !dbg !65
  %2330 = select i1 %25, float %2329, float 0x7FF0000000000000, !dbg !66
  %2331 = extractelement <2 x float> %2328, i64 1, !dbg !65
  %2332 = select i1 %25, float %2331, float 0x7FF0000000000000, !dbg !66
  %2333 = select i1 %25, float %2329, float 0xFFF0000000000000, !dbg !65
  %2334 = select i1 %25, float %2331, float 0xFFF0000000000000, !dbg !65
  %2335 = fptrunc <2 x float> %2328 to <2 x bfloat>, !dbg !67
  %2336 = load <2 x float>, ptr addrspace(3) %1926, align 16, !dbg !56
  %2337 = fmul <2 x float> %2056, %2336, !dbg !62
  %2338 = fadd <2 x float> %2058, %2337, !dbg !64
  %2339 = extractelement <2 x float> %2338, i64 0, !dbg !65
  %2340 = select i1 %25, float %2339, float 0x7FF0000000000000, !dbg !66
  %2341 = extractelement <2 x float> %2338, i64 1, !dbg !65
  %2342 = select i1 %25, float %2341, float 0x7FF0000000000000, !dbg !66
  %2343 = select i1 %25, float %2339, float 0xFFF0000000000000, !dbg !65
  %2344 = select i1 %25, float %2341, float 0xFFF0000000000000, !dbg !65
  %2345 = fptrunc <2 x float> %2338 to <2 x bfloat>, !dbg !67
  %2346 = load <2 x float>, ptr addrspace(3) %1927, align 8, !dbg !56
  %2347 = fmul <2 x float> %2077, %2346, !dbg !62
  %2348 = fadd <2 x float> %2079, %2347, !dbg !64
  %2349 = extractelement <2 x float> %2348, i64 0, !dbg !65
  %2350 = select i1 %25, float %2349, float 0x7FF0000000000000, !dbg !66
  %2351 = extractelement <2 x float> %2348, i64 1, !dbg !65
  %2352 = select i1 %25, float %2351, float 0x7FF0000000000000, !dbg !66
  %2353 = select i1 %25, float %2349, float 0xFFF0000000000000, !dbg !65
  %2354 = select i1 %25, float %2351, float 0xFFF0000000000000, !dbg !65
  %2355 = fptrunc <2 x float> %2348 to <2 x bfloat>, !dbg !67
  %2356 = load <2 x float>, ptr addrspace(3) %1928, align 16, !dbg !56
  %2357 = fmul <2 x float> %2098, %2356, !dbg !62
  %2358 = fadd <2 x float> %2100, %2357, !dbg !64
  %2359 = extractelement <2 x float> %2358, i64 0, !dbg !65
  %2360 = select i1 %25, float %2359, float 0x7FF0000000000000, !dbg !66
  %2361 = extractelement <2 x float> %2358, i64 1, !dbg !65
  %2362 = select i1 %25, float %2361, float 0x7FF0000000000000, !dbg !66
  %2363 = select i1 %25, float %2359, float 0xFFF0000000000000, !dbg !65
  %2364 = select i1 %25, float %2361, float 0xFFF0000000000000, !dbg !65
  %2365 = fptrunc <2 x float> %2358 to <2 x bfloat>, !dbg !67
  %2366 = load <2 x float>, ptr addrspace(3) %1929, align 8, !dbg !56
  %2367 = fmul <2 x float> %2119, %2366, !dbg !62
  %2368 = fadd <2 x float> %2121, %2367, !dbg !64
  %2369 = extractelement <2 x float> %2368, i64 0, !dbg !65
  %2370 = select i1 %25, float %2369, float 0x7FF0000000000000, !dbg !66
  %2371 = extractelement <2 x float> %2368, i64 1, !dbg !65
  %2372 = select i1 %25, float %2371, float 0x7FF0000000000000, !dbg !66
  %2373 = select i1 %25, float %2369, float 0xFFF0000000000000, !dbg !65
  %2374 = select i1 %25, float %2371, float 0xFFF0000000000000, !dbg !65
  %2375 = fptrunc <2 x float> %2368 to <2 x bfloat>, !dbg !67
  %2376 = load <2 x float>, ptr addrspace(3) %1930, align 16, !dbg !56
  %2377 = fmul <2 x float> %2140, %2376, !dbg !62
  %2378 = fadd <2 x float> %2142, %2377, !dbg !64
  %2379 = extractelement <2 x float> %2378, i64 0, !dbg !65
  %2380 = select i1 %25, float %2379, float 0x7FF0000000000000, !dbg !66
  %2381 = extractelement <2 x float> %2378, i64 1, !dbg !65
  %2382 = select i1 %25, float %2381, float 0x7FF0000000000000, !dbg !66
  %2383 = select i1 %25, float %2379, float 0xFFF0000000000000, !dbg !65
  %2384 = select i1 %25, float %2381, float 0xFFF0000000000000, !dbg !65
  %2385 = fptrunc <2 x float> %2378 to <2 x bfloat>, !dbg !67
  %2386 = load <2 x float>, ptr addrspace(3) %1931, align 8, !dbg !56
  %2387 = fmul <2 x float> %2161, %2386, !dbg !62
  %2388 = fadd <2 x float> %2163, %2387, !dbg !64
  %2389 = extractelement <2 x float> %2388, i64 0, !dbg !65
  %2390 = select i1 %25, float %2389, float 0x7FF0000000000000, !dbg !66
  %2391 = extractelement <2 x float> %2388, i64 1, !dbg !65
  %2392 = select i1 %25, float %2391, float 0x7FF0000000000000, !dbg !66
  %2393 = select i1 %25, float %2389, float 0xFFF0000000000000, !dbg !65
  %2394 = select i1 %25, float %2391, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1902, i32 %1964, i32 %1965, i32 %1966, i32 %1967, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1908, i32 %1968, i32 %1969, i32 %1970, i32 %1971, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1913, i32 %1972, i32 %1973, i32 %1974, i32 %1975, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1919, i32 %1976, i32 %1977, i32 %1978, i32 %1979, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2395 = fptrunc <2 x float> %2388 to <2 x bfloat>, !dbg !67
  %2396 = load <2 x float>, ptr addrspace(3) %1924, align 16, !dbg !56
  %2397 = fmul <2 x float> %2181, %2396, !dbg !62
  %2398 = fadd <2 x float> %2182, %2397, !dbg !64
  %2399 = extractelement <2 x float> %2398, i64 0, !dbg !65
  %2400 = select i1 %25, float %2399, float 0x7FF0000000000000, !dbg !66
  %2401 = extractelement <2 x float> %2398, i64 1, !dbg !65
  %2402 = select i1 %25, float %2401, float 0x7FF0000000000000, !dbg !66
  %2403 = select i1 %25, float %2399, float 0xFFF0000000000000, !dbg !65
  %2404 = select i1 %25, float %2401, float 0xFFF0000000000000, !dbg !65
  %2405 = fptrunc <2 x float> %2398 to <2 x bfloat>, !dbg !67
  %2406 = load <2 x float>, ptr addrspace(3) %1925, align 8, !dbg !56
  %2407 = fmul <2 x float> %2202, %2406, !dbg !62
  %2408 = fadd <2 x float> %2203, %2407, !dbg !64
  %2409 = extractelement <2 x float> %2408, i64 0, !dbg !65
  %2410 = select i1 %25, float %2409, float 0x7FF0000000000000, !dbg !66
  %2411 = extractelement <2 x float> %2408, i64 1, !dbg !65
  %2412 = select i1 %25, float %2411, float 0x7FF0000000000000, !dbg !66
  %2413 = select i1 %25, float %2409, float 0xFFF0000000000000, !dbg !65
  %2414 = select i1 %25, float %2411, float 0xFFF0000000000000, !dbg !65
  %2415 = fptrunc <2 x float> %2408 to <2 x bfloat>, !dbg !67
  %2416 = load <2 x float>, ptr addrspace(3) %1926, align 16, !dbg !56
  %2417 = fmul <2 x float> %2223, %2416, !dbg !62
  %2418 = fadd <2 x float> %2224, %2417, !dbg !64
  %2419 = extractelement <2 x float> %2418, i64 0, !dbg !65
  %2420 = select i1 %25, float %2419, float 0x7FF0000000000000, !dbg !66
  %2421 = extractelement <2 x float> %2418, i64 1, !dbg !65
  %2422 = select i1 %25, float %2421, float 0x7FF0000000000000, !dbg !66
  %2423 = select i1 %25, float %2419, float 0xFFF0000000000000, !dbg !65
  %2424 = select i1 %25, float %2421, float 0xFFF0000000000000, !dbg !65
  %2425 = fptrunc <2 x float> %2418 to <2 x bfloat>, !dbg !67
  %2426 = load <2 x float>, ptr addrspace(3) %1927, align 8, !dbg !56
  %2427 = fmul <2 x float> %2244, %2426, !dbg !62
  %2428 = fadd <2 x float> %2245, %2427, !dbg !64
  %2429 = extractelement <2 x float> %2428, i64 0, !dbg !65
  %2430 = select i1 %25, float %2429, float 0x7FF0000000000000, !dbg !66
  %2431 = extractelement <2 x float> %2428, i64 1, !dbg !65
  %2432 = select i1 %25, float %2431, float 0x7FF0000000000000, !dbg !66
  %2433 = select i1 %25, float %2429, float 0xFFF0000000000000, !dbg !65
  %2434 = select i1 %25, float %2431, float 0xFFF0000000000000, !dbg !65
  %2435 = fptrunc <2 x float> %2428 to <2 x bfloat>, !dbg !67
  %2436 = load <2 x float>, ptr addrspace(3) %1928, align 16, !dbg !56
  %2437 = fmul <2 x float> %2265, %2436, !dbg !62
  %2438 = fadd <2 x float> %2266, %2437, !dbg !64
  %2439 = fptrunc <2 x float> %2438 to <2 x bfloat>, !dbg !67
  %2440 = load <2 x float>, ptr addrspace(3) %1929, align 8, !dbg !56
  %2441 = fmul <2 x float> %2280, %2440, !dbg !62
  %2442 = fadd <2 x float> %2281, %2441, !dbg !64
  %2443 = fptrunc <2 x float> %2442 to <2 x bfloat>, !dbg !67
  %2444 = load <2 x float>, ptr addrspace(3) %1930, align 16, !dbg !56
  %2445 = fmul <2 x float> %2295, %2444, !dbg !62
  %2446 = fadd <2 x float> %2296, %2445, !dbg !64
  %2447 = fptrunc <2 x float> %2446 to <2 x bfloat>, !dbg !67
  %2448 = load <2 x float>, ptr addrspace(3) %1931, align 8, !dbg !56
  %2449 = fmul <2 x float> %2310, %2448, !dbg !62
  %2450 = fadd <2 x float> %2311, %2449, !dbg !64
  %2451 = fptrunc <2 x float> %2450 to <2 x bfloat>, !dbg !67
  %2452 = bitcast <2 x bfloat> %2024 to i32, !dbg !67
  %2453 = bitcast <2 x bfloat> %2045 to i32, !dbg !67
  %2454 = bitcast <2 x bfloat> %2066 to i32, !dbg !67
  %2455 = bitcast <2 x bfloat> %2087 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2452, i32 %2453, i32 %2454, i32 %2455, ptr addrspace(1) %1981, i1 %24) #5, !dbg !67
  %2456 = bitcast <2 x bfloat> %2108 to i32, !dbg !67
  %2457 = bitcast <2 x bfloat> %2129 to i32, !dbg !67
  %2458 = bitcast <2 x bfloat> %2150 to i32, !dbg !67
  %2459 = bitcast <2 x bfloat> %2171 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2456, i32 %2457, i32 %2458, i32 %2459, ptr addrspace(1) %1983, i1 %24) #5, !dbg !67
  %2460 = bitcast <2 x bfloat> %2192 to i32, !dbg !67
  %2461 = bitcast <2 x bfloat> %2213 to i32, !dbg !67
  %2462 = bitcast <2 x bfloat> %2234 to i32, !dbg !67
  %2463 = bitcast <2 x bfloat> %2255 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2460, i32 %2461, i32 %2462, i32 %2463, ptr addrspace(1) %1985, i1 %24) #5, !dbg !67
  %2464 = bitcast <2 x bfloat> %2270 to i32, !dbg !67
  %2465 = bitcast <2 x bfloat> %2285 to i32, !dbg !67
  %2466 = bitcast <2 x bfloat> %2300 to i32, !dbg !67
  %2467 = bitcast <2 x bfloat> %2315 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2464, i32 %2465, i32 %2466, i32 %2467, ptr addrspace(1) %1987, i1 false) #5, !dbg !67
  %2468 = bitcast <2 x bfloat> %2325 to i32, !dbg !67
  %2469 = bitcast <2 x bfloat> %2335 to i32, !dbg !67
  %2470 = bitcast <2 x bfloat> %2345 to i32, !dbg !67
  %2471 = bitcast <2 x bfloat> %2355 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2468, i32 %2469, i32 %2470, i32 %2471, ptr addrspace(1) %1989, i1 %25) #5, !dbg !67
  %2472 = bitcast <2 x bfloat> %2365 to i32, !dbg !67
  %2473 = bitcast <2 x bfloat> %2375 to i32, !dbg !67
  %2474 = bitcast <2 x bfloat> %2385 to i32, !dbg !67
  %2475 = bitcast <2 x bfloat> %2395 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2472, i32 %2473, i32 %2474, i32 %2475, ptr addrspace(1) %1991, i1 %25) #5, !dbg !67
  %2476 = bitcast <2 x bfloat> %2405 to i32, !dbg !67
  %2477 = bitcast <2 x bfloat> %2415 to i32, !dbg !67
  %2478 = bitcast <2 x bfloat> %2425 to i32, !dbg !67
  %2479 = bitcast <2 x bfloat> %2435 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2476, i32 %2477, i32 %2478, i32 %2479, ptr addrspace(1) %1993, i1 %25) #5, !dbg !67
  %2480 = bitcast <2 x bfloat> %2439 to i32, !dbg !67
  %2481 = bitcast <2 x bfloat> %2443 to i32, !dbg !67
  %2482 = bitcast <2 x bfloat> %2447 to i32, !dbg !67
  %2483 = bitcast <2 x bfloat> %2451 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2480, i32 %2481, i32 %2482, i32 %2483, ptr addrspace(1) %1995, i1 false) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2484 = fcmp olt float %2019, %2021, !dbg !70
  %2485 = fcmp uno float %2019, 0.000000e+00, !dbg !71
  %2486 = or i1 %2484, %2485, !dbg !72
  %2487 = select i1 %2486, float %2019, float %2021, !dbg !73
  %2488 = fcmp olt float %2487, %2040, !dbg !70
  %2489 = fcmp uno float %2487, 0.000000e+00, !dbg !71
  %2490 = or i1 %2488, %2489, !dbg !72
  %2491 = select i1 %2490, float %2487, float %2040, !dbg !73
  %2492 = fcmp olt float %2491, %2042, !dbg !70
  %2493 = fcmp uno float %2491, 0.000000e+00, !dbg !71
  %2494 = or i1 %2492, %2493, !dbg !72
  %2495 = select i1 %2494, float %2491, float %2042, !dbg !73
  %2496 = fcmp olt float %2495, %2061, !dbg !70
  %2497 = fcmp uno float %2495, 0.000000e+00, !dbg !71
  %2498 = or i1 %2496, %2497, !dbg !72
  %2499 = select i1 %2498, float %2495, float %2061, !dbg !73
  %2500 = fcmp olt float %2499, %2063, !dbg !70
  %2501 = fcmp uno float %2499, 0.000000e+00, !dbg !71
  %2502 = or i1 %2500, %2501, !dbg !72
  %2503 = select i1 %2502, float %2499, float %2063, !dbg !73
  %2504 = fcmp olt float %2503, %2082, !dbg !70
  %2505 = fcmp uno float %2503, 0.000000e+00, !dbg !71
  %2506 = or i1 %2504, %2505, !dbg !72
  %2507 = select i1 %2506, float %2503, float %2082, !dbg !73
  %2508 = fcmp olt float %2507, %2084, !dbg !70
  %2509 = fcmp uno float %2507, 0.000000e+00, !dbg !71
  %2510 = or i1 %2508, %2509, !dbg !72
  %2511 = select i1 %2510, float %2507, float %2084, !dbg !73
  %2512 = fcmp olt float %2511, %2103, !dbg !70
  %2513 = fcmp uno float %2511, 0.000000e+00, !dbg !71
  %2514 = or i1 %2512, %2513, !dbg !72
  %2515 = select i1 %2514, float %2511, float %2103, !dbg !73
  %2516 = fcmp olt float %2515, %2105, !dbg !70
  %2517 = fcmp uno float %2515, 0.000000e+00, !dbg !71
  %2518 = or i1 %2516, %2517, !dbg !72
  %2519 = select i1 %2518, float %2515, float %2105, !dbg !73
  %2520 = fcmp olt float %2519, %2124, !dbg !70
  %2521 = fcmp uno float %2519, 0.000000e+00, !dbg !71
  %2522 = or i1 %2520, %2521, !dbg !72
  %2523 = select i1 %2522, float %2519, float %2124, !dbg !73
  %2524 = fcmp olt float %2523, %2126, !dbg !70
  %2525 = fcmp uno float %2523, 0.000000e+00, !dbg !71
  %2526 = or i1 %2524, %2525, !dbg !72
  %2527 = select i1 %2526, float %2523, float %2126, !dbg !73
  %2528 = fcmp olt float %2527, %2145, !dbg !70
  %2529 = fcmp uno float %2527, 0.000000e+00, !dbg !71
  %2530 = or i1 %2528, %2529, !dbg !72
  %2531 = select i1 %2530, float %2527, float %2145, !dbg !73
  %2532 = fcmp olt float %2531, %2147, !dbg !70
  %2533 = fcmp uno float %2531, 0.000000e+00, !dbg !71
  %2534 = or i1 %2532, %2533, !dbg !72
  %2535 = select i1 %2534, float %2531, float %2147, !dbg !73
  %2536 = fcmp olt float %2535, %2166, !dbg !70
  %2537 = fcmp uno float %2535, 0.000000e+00, !dbg !71
  %2538 = or i1 %2536, %2537, !dbg !72
  %2539 = select i1 %2538, float %2535, float %2166, !dbg !73
  %2540 = fcmp olt float %2539, %2168, !dbg !70
  %2541 = fcmp uno float %2539, 0.000000e+00, !dbg !71
  %2542 = or i1 %2540, %2541, !dbg !72
  %2543 = select i1 %2542, float %2539, float %2168, !dbg !73
  %2544 = fcmp olt float %2543, %2187, !dbg !70
  %2545 = fcmp uno float %2543, 0.000000e+00, !dbg !71
  %2546 = or i1 %2544, %2545, !dbg !72
  %2547 = select i1 %2546, float %2543, float %2187, !dbg !73
  %2548 = fcmp olt float %2547, %2189, !dbg !70
  %2549 = fcmp uno float %2547, 0.000000e+00, !dbg !71
  %2550 = or i1 %2548, %2549, !dbg !72
  %2551 = select i1 %2550, float %2547, float %2189, !dbg !73
  %2552 = fcmp olt float %2551, %2208, !dbg !70
  %2553 = fcmp uno float %2551, 0.000000e+00, !dbg !71
  %2554 = or i1 %2552, %2553, !dbg !72
  %2555 = select i1 %2554, float %2551, float %2208, !dbg !73
  %2556 = fcmp olt float %2555, %2210, !dbg !70
  %2557 = fcmp uno float %2555, 0.000000e+00, !dbg !71
  %2558 = or i1 %2556, %2557, !dbg !72
  %2559 = select i1 %2558, float %2555, float %2210, !dbg !73
  %2560 = fcmp olt float %2559, %2229, !dbg !70
  %2561 = fcmp uno float %2559, 0.000000e+00, !dbg !71
  %2562 = or i1 %2560, %2561, !dbg !72
  %2563 = select i1 %2562, float %2559, float %2229, !dbg !73
  %2564 = fcmp olt float %2563, %2231, !dbg !70
  %2565 = fcmp uno float %2563, 0.000000e+00, !dbg !71
  %2566 = or i1 %2564, %2565, !dbg !72
  %2567 = select i1 %2566, float %2563, float %2231, !dbg !73
  %2568 = fcmp olt float %2567, %2250, !dbg !70
  %2569 = fcmp uno float %2567, 0.000000e+00, !dbg !71
  %2570 = or i1 %2568, %2569, !dbg !72
  %2571 = select i1 %2570, float %2567, float %2250, !dbg !73
  %2572 = fcmp olt float %2571, %2252, !dbg !70
  %2573 = fcmp uno float %2571, 0.000000e+00, !dbg !71
  %2574 = or i1 %2572, %2573, !dbg !72
  %2575 = select i1 %2574, float %2571, float %2252, !dbg !73
  %2576 = fcmp olt float %2320, %2322, !dbg !70
  %2577 = fcmp uno float %2320, 0.000000e+00, !dbg !71
  %2578 = or i1 %2576, %2577, !dbg !72
  %2579 = select i1 %2578, float %2320, float %2322, !dbg !73
  %2580 = fcmp olt float %2579, %2330, !dbg !70
  %2581 = fcmp uno float %2579, 0.000000e+00, !dbg !71
  %2582 = or i1 %2580, %2581, !dbg !72
  %2583 = select i1 %2582, float %2579, float %2330, !dbg !73
  %2584 = fcmp olt float %2583, %2332, !dbg !70
  %2585 = fcmp uno float %2583, 0.000000e+00, !dbg !71
  %2586 = or i1 %2584, %2585, !dbg !72
  %2587 = select i1 %2586, float %2583, float %2332, !dbg !73
  %2588 = fcmp olt float %2587, %2340, !dbg !70
  %2589 = fcmp uno float %2587, 0.000000e+00, !dbg !71
  %2590 = or i1 %2588, %2589, !dbg !72
  %2591 = select i1 %2590, float %2587, float %2340, !dbg !73
  %2592 = fcmp olt float %2591, %2342, !dbg !70
  %2593 = fcmp uno float %2591, 0.000000e+00, !dbg !71
  %2594 = or i1 %2592, %2593, !dbg !72
  %2595 = select i1 %2594, float %2591, float %2342, !dbg !73
  %2596 = fcmp olt float %2595, %2350, !dbg !70
  %2597 = fcmp uno float %2595, 0.000000e+00, !dbg !71
  %2598 = or i1 %2596, %2597, !dbg !72
  %2599 = select i1 %2598, float %2595, float %2350, !dbg !73
  %2600 = fcmp olt float %2599, %2352, !dbg !70
  %2601 = fcmp uno float %2599, 0.000000e+00, !dbg !71
  %2602 = or i1 %2600, %2601, !dbg !72
  %2603 = select i1 %2602, float %2599, float %2352, !dbg !73
  %2604 = fcmp olt float %2603, %2360, !dbg !70
  %2605 = fcmp uno float %2603, 0.000000e+00, !dbg !71
  %2606 = or i1 %2604, %2605, !dbg !72
  %2607 = select i1 %2606, float %2603, float %2360, !dbg !73
  %2608 = fcmp olt float %2607, %2362, !dbg !70
  %2609 = fcmp uno float %2607, 0.000000e+00, !dbg !71
  %2610 = or i1 %2608, %2609, !dbg !72
  %2611 = select i1 %2610, float %2607, float %2362, !dbg !73
  %2612 = fcmp olt float %2611, %2370, !dbg !70
  %2613 = fcmp uno float %2611, 0.000000e+00, !dbg !71
  %2614 = or i1 %2612, %2613, !dbg !72
  %2615 = select i1 %2614, float %2611, float %2370, !dbg !73
  %2616 = fcmp olt float %2615, %2372, !dbg !70
  %2617 = fcmp uno float %2615, 0.000000e+00, !dbg !71
  %2618 = or i1 %2616, %2617, !dbg !72
  %2619 = select i1 %2618, float %2615, float %2372, !dbg !73
  %2620 = fcmp olt float %2619, %2380, !dbg !70
  %2621 = fcmp uno float %2619, 0.000000e+00, !dbg !71
  %2622 = or i1 %2620, %2621, !dbg !72
  %2623 = select i1 %2622, float %2619, float %2380, !dbg !73
  %2624 = fcmp olt float %2623, %2382, !dbg !70
  %2625 = fcmp uno float %2623, 0.000000e+00, !dbg !71
  %2626 = or i1 %2624, %2625, !dbg !72
  %2627 = select i1 %2626, float %2623, float %2382, !dbg !73
  %2628 = fcmp olt float %2627, %2390, !dbg !70
  %2629 = fcmp uno float %2627, 0.000000e+00, !dbg !71
  %2630 = or i1 %2628, %2629, !dbg !72
  %2631 = select i1 %2630, float %2627, float %2390, !dbg !73
  %2632 = fcmp olt float %2631, %2392, !dbg !70
  %2633 = fcmp uno float %2631, 0.000000e+00, !dbg !71
  %2634 = or i1 %2632, %2633, !dbg !72
  %2635 = select i1 %2634, float %2631, float %2392, !dbg !73
  %2636 = fcmp olt float %2635, %2400, !dbg !70
  %2637 = fcmp uno float %2635, 0.000000e+00, !dbg !71
  %2638 = or i1 %2636, %2637, !dbg !72
  %2639 = select i1 %2638, float %2635, float %2400, !dbg !73
  %2640 = fcmp olt float %2639, %2402, !dbg !70
  %2641 = fcmp uno float %2639, 0.000000e+00, !dbg !71
  %2642 = or i1 %2640, %2641, !dbg !72
  %2643 = select i1 %2642, float %2639, float %2402, !dbg !73
  %2644 = fcmp olt float %2643, %2410, !dbg !70
  %2645 = fcmp uno float %2643, 0.000000e+00, !dbg !71
  %2646 = or i1 %2644, %2645, !dbg !72
  %2647 = select i1 %2646, float %2643, float %2410, !dbg !73
  %2648 = fcmp olt float %2647, %2412, !dbg !70
  %2649 = fcmp uno float %2647, 0.000000e+00, !dbg !71
  %2650 = or i1 %2648, %2649, !dbg !72
  %2651 = select i1 %2650, float %2647, float %2412, !dbg !73
  %2652 = fcmp olt float %2651, %2420, !dbg !70
  %2653 = fcmp uno float %2651, 0.000000e+00, !dbg !71
  %2654 = or i1 %2652, %2653, !dbg !72
  %2655 = select i1 %2654, float %2651, float %2420, !dbg !73
  %2656 = fcmp olt float %2655, %2422, !dbg !70
  %2657 = fcmp uno float %2655, 0.000000e+00, !dbg !71
  %2658 = or i1 %2656, %2657, !dbg !72
  %2659 = select i1 %2658, float %2655, float %2422, !dbg !73
  %2660 = fcmp olt float %2659, %2430, !dbg !70
  %2661 = fcmp uno float %2659, 0.000000e+00, !dbg !71
  %2662 = or i1 %2660, %2661, !dbg !72
  %2663 = select i1 %2662, float %2659, float %2430, !dbg !73
  %2664 = fcmp olt float %2663, %2432, !dbg !70
  %2665 = fcmp uno float %2663, 0.000000e+00, !dbg !71
  %2666 = or i1 %2664, %2665, !dbg !72
  %2667 = select i1 %2666, float %2663, float %2432, !dbg !73
  %2668 = bitcast float %2575 to i32, !dbg !68
  %2669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2668, i32 16, i32 31), !dbg !68
  %2670 = bitcast i32 %2669 to float, !dbg !68
  %2671 = fcmp olt float %2575, %2670, !dbg !70
  %2672 = fcmp uno float %2575, 0.000000e+00, !dbg !71
  %2673 = or i1 %2671, %2672, !dbg !72
  %2674 = select i1 %2673, float %2575, float %2670, !dbg !73
  %2675 = bitcast float %2674 to i32, !dbg !68
  %2676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2675, i32 8, i32 31), !dbg !68
  %2677 = bitcast i32 %2676 to float, !dbg !68
  %2678 = fcmp olt float %2674, %2677, !dbg !70
  %2679 = fcmp uno float %2674, 0.000000e+00, !dbg !71
  %2680 = or i1 %2678, %2679, !dbg !72
  %2681 = select i1 %2680, float %2674, float %2677, !dbg !73
  %2682 = bitcast float %2681 to i32, !dbg !68
  %2683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2682, i32 4, i32 31), !dbg !68
  %2684 = bitcast i32 %2683 to float, !dbg !68
  %2685 = fcmp olt float %2681, %2684, !dbg !70
  %2686 = fcmp uno float %2681, 0.000000e+00, !dbg !71
  %2687 = or i1 %2685, %2686, !dbg !72
  %2688 = select i1 %2687, float %2681, float %2684, !dbg !73
  %2689 = bitcast float %2688 to i32, !dbg !68
  %2690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2689, i32 2, i32 31), !dbg !68
  %2691 = bitcast i32 %2690 to float, !dbg !68
  %2692 = fcmp olt float %2688, %2691, !dbg !70
  %2693 = fcmp uno float %2688, 0.000000e+00, !dbg !71
  %2694 = or i1 %2692, %2693, !dbg !72
  %2695 = select i1 %2694, float %2688, float %2691, !dbg !73
  %2696 = bitcast float %2695 to i32, !dbg !68
  %2697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2696, i32 1, i32 31), !dbg !68
  %2698 = bitcast i32 %2697 to float, !dbg !68
  %2699 = fcmp olt float %2695, %2698, !dbg !70
  %2700 = fcmp uno float %2695, 0.000000e+00, !dbg !71
  %2701 = or i1 %2699, %2700, !dbg !72
  %2702 = bitcast float %2667 to i32, !dbg !68
  %2703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2702, i32 16, i32 31), !dbg !68
  %2704 = bitcast i32 %2703 to float, !dbg !68
  %2705 = fcmp olt float %2667, %2704, !dbg !70
  %2706 = fcmp uno float %2667, 0.000000e+00, !dbg !71
  %2707 = or i1 %2705, %2706, !dbg !72
  %2708 = select i1 %2707, float %2667, float %2704, !dbg !73
  %2709 = bitcast float %2708 to i32, !dbg !68
  %2710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2709, i32 8, i32 31), !dbg !68
  %2711 = bitcast i32 %2710 to float, !dbg !68
  %2712 = fcmp olt float %2708, %2711, !dbg !70
  %2713 = fcmp uno float %2708, 0.000000e+00, !dbg !71
  %2714 = or i1 %2712, %2713, !dbg !72
  %2715 = select i1 %2714, float %2708, float %2711, !dbg !73
  %2716 = bitcast float %2715 to i32, !dbg !68
  %2717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2716, i32 4, i32 31), !dbg !68
  %2718 = bitcast i32 %2717 to float, !dbg !68
  %2719 = fcmp olt float %2715, %2718, !dbg !70
  %2720 = fcmp uno float %2715, 0.000000e+00, !dbg !71
  %2721 = or i1 %2719, %2720, !dbg !72
  %2722 = select i1 %2721, float %2715, float %2718, !dbg !73
  %2723 = bitcast float %2722 to i32, !dbg !68
  %2724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2723, i32 2, i32 31), !dbg !68
  %2725 = bitcast i32 %2724 to float, !dbg !68
  %2726 = fcmp olt float %2722, %2725, !dbg !70
  %2727 = fcmp uno float %2722, 0.000000e+00, !dbg !71
  %2728 = or i1 %2726, %2727, !dbg !72
  %2729 = select i1 %2728, float %2722, float %2725, !dbg !73
  %2730 = bitcast float %2729 to i32, !dbg !68
  %2731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2730, i32 1, i32 31), !dbg !68
  %2732 = bitcast i32 %2731 to float, !dbg !68
  %2733 = fcmp olt float %2729, %2732, !dbg !70
  %2734 = fcmp uno float %2729, 0.000000e+00, !dbg !71
  %2735 = or i1 %2733, %2734, !dbg !72
  %2736 = select i1 %2701, i32 %2696, i32 %2697, !dbg !73
  %2737 = insertelement <1 x i32> poison, i32 %2736, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %2737, i1 %1253) #5, !dbg !68
  %2738 = select i1 %2735, i32 %2730, i32 %2731, !dbg !73
  %2739 = insertelement <1 x i32> poison, i32 %2738, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1261, <1 x i32> %2739, i1 %1253) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2740 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1268, i1 %1267) #5, !dbg !68
  %2741 = bitcast i32 %2740 to float, !dbg !68
  %2742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2740, i32 2, i32 31), !dbg !68
  %2743 = bitcast i32 %2742 to float, !dbg !68
  %2744 = fcmp olt float %2741, %2743, !dbg !70
  %2745 = fcmp uno float %2741, 0.000000e+00, !dbg !71
  %2746 = or i1 %2745, %2744, !dbg !72
  %2747 = select i1 %2746, float %2741, float %2743, !dbg !73
  %2748 = bitcast float %2747 to i32, !dbg !68
  %2749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2748, i32 1, i32 31), !dbg !68
  %2750 = bitcast i32 %2749 to float, !dbg !68
  %2751 = fcmp olt float %2747, %2750, !dbg !70
  %2752 = fcmp uno float %2747, 0.000000e+00, !dbg !71
  %2753 = or i1 %2751, %2752, !dbg !72
  %2754 = select i1 %2753, i32 %2748, i32 %2749, !dbg !73
  %2755 = insertelement <1 x i32> poison, i32 %2754, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1268, <1 x i32> %2755, i1 %1318) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2756 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %2757 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2758 = bitcast float %2756 to i32, !dbg !74
  %2759 = bitcast float %2757 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2758, i32 %2759, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2760 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1835, !dbg !74
  %2761 = load float, ptr addrspace(3) %2760, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %2762 = fcmp ogt float %2022, %2023, !dbg !77
  %2763 = fcmp uno float %2022, 0.000000e+00, !dbg !78
  %2764 = or i1 %2762, %2763, !dbg !79
  %2765 = select i1 %2764, float %2022, float %2023, !dbg !80
  %2766 = fcmp ogt float %2765, %2043, !dbg !77
  %2767 = fcmp uno float %2765, 0.000000e+00, !dbg !78
  %2768 = or i1 %2766, %2767, !dbg !79
  %2769 = select i1 %2768, float %2765, float %2043, !dbg !80
  %2770 = fcmp ogt float %2769, %2044, !dbg !77
  %2771 = fcmp uno float %2769, 0.000000e+00, !dbg !78
  %2772 = or i1 %2770, %2771, !dbg !79
  %2773 = select i1 %2772, float %2769, float %2044, !dbg !80
  %2774 = fcmp ogt float %2773, %2064, !dbg !77
  %2775 = fcmp uno float %2773, 0.000000e+00, !dbg !78
  %2776 = or i1 %2774, %2775, !dbg !79
  %2777 = select i1 %2776, float %2773, float %2064, !dbg !80
  %2778 = fcmp ogt float %2777, %2065, !dbg !77
  %2779 = fcmp uno float %2777, 0.000000e+00, !dbg !78
  %2780 = or i1 %2778, %2779, !dbg !79
  %2781 = select i1 %2780, float %2777, float %2065, !dbg !80
  %2782 = fcmp ogt float %2781, %2085, !dbg !77
  %2783 = fcmp uno float %2781, 0.000000e+00, !dbg !78
  %2784 = or i1 %2782, %2783, !dbg !79
  %2785 = select i1 %2784, float %2781, float %2085, !dbg !80
  %2786 = fcmp ogt float %2785, %2086, !dbg !77
  %2787 = fcmp uno float %2785, 0.000000e+00, !dbg !78
  %2788 = or i1 %2786, %2787, !dbg !79
  %2789 = select i1 %2788, float %2785, float %2086, !dbg !80
  %2790 = fcmp ogt float %2789, %2106, !dbg !77
  %2791 = fcmp uno float %2789, 0.000000e+00, !dbg !78
  %2792 = or i1 %2790, %2791, !dbg !79
  %2793 = select i1 %2792, float %2789, float %2106, !dbg !80
  %2794 = fcmp ogt float %2793, %2107, !dbg !77
  %2795 = fcmp uno float %2793, 0.000000e+00, !dbg !78
  %2796 = or i1 %2794, %2795, !dbg !79
  %2797 = select i1 %2796, float %2793, float %2107, !dbg !80
  %2798 = fcmp ogt float %2797, %2127, !dbg !77
  %2799 = fcmp uno float %2797, 0.000000e+00, !dbg !78
  %2800 = or i1 %2798, %2799, !dbg !79
  %2801 = select i1 %2800, float %2797, float %2127, !dbg !80
  %2802 = fcmp ogt float %2801, %2128, !dbg !77
  %2803 = fcmp uno float %2801, 0.000000e+00, !dbg !78
  %2804 = or i1 %2802, %2803, !dbg !79
  %2805 = select i1 %2804, float %2801, float %2128, !dbg !80
  %2806 = fcmp ogt float %2805, %2148, !dbg !77
  %2807 = fcmp uno float %2805, 0.000000e+00, !dbg !78
  %2808 = or i1 %2806, %2807, !dbg !79
  %2809 = select i1 %2808, float %2805, float %2148, !dbg !80
  %2810 = fcmp ogt float %2809, %2149, !dbg !77
  %2811 = fcmp uno float %2809, 0.000000e+00, !dbg !78
  %2812 = or i1 %2810, %2811, !dbg !79
  %2813 = select i1 %2812, float %2809, float %2149, !dbg !80
  %2814 = fcmp ogt float %2813, %2169, !dbg !77
  %2815 = fcmp uno float %2813, 0.000000e+00, !dbg !78
  %2816 = or i1 %2814, %2815, !dbg !79
  %2817 = select i1 %2816, float %2813, float %2169, !dbg !80
  %2818 = fcmp ogt float %2817, %2170, !dbg !77
  %2819 = fcmp uno float %2817, 0.000000e+00, !dbg !78
  %2820 = or i1 %2818, %2819, !dbg !79
  %2821 = select i1 %2820, float %2817, float %2170, !dbg !80
  %2822 = fcmp ogt float %2821, %2190, !dbg !77
  %2823 = fcmp uno float %2821, 0.000000e+00, !dbg !78
  %2824 = or i1 %2822, %2823, !dbg !79
  %2825 = select i1 %2824, float %2821, float %2190, !dbg !80
  %2826 = fcmp ogt float %2825, %2191, !dbg !77
  %2827 = fcmp uno float %2825, 0.000000e+00, !dbg !78
  %2828 = or i1 %2826, %2827, !dbg !79
  %2829 = select i1 %2828, float %2825, float %2191, !dbg !80
  %2830 = fcmp ogt float %2829, %2211, !dbg !77
  %2831 = fcmp uno float %2829, 0.000000e+00, !dbg !78
  %2832 = or i1 %2830, %2831, !dbg !79
  %2833 = select i1 %2832, float %2829, float %2211, !dbg !80
  %2834 = fcmp ogt float %2833, %2212, !dbg !77
  %2835 = fcmp uno float %2833, 0.000000e+00, !dbg !78
  %2836 = or i1 %2834, %2835, !dbg !79
  %2837 = select i1 %2836, float %2833, float %2212, !dbg !80
  %2838 = fcmp ogt float %2837, %2232, !dbg !77
  %2839 = fcmp uno float %2837, 0.000000e+00, !dbg !78
  %2840 = or i1 %2838, %2839, !dbg !79
  %2841 = select i1 %2840, float %2837, float %2232, !dbg !80
  %2842 = fcmp ogt float %2841, %2233, !dbg !77
  %2843 = fcmp uno float %2841, 0.000000e+00, !dbg !78
  %2844 = or i1 %2842, %2843, !dbg !79
  %2845 = select i1 %2844, float %2841, float %2233, !dbg !80
  %2846 = fcmp ogt float %2845, %2253, !dbg !77
  %2847 = fcmp uno float %2845, 0.000000e+00, !dbg !78
  %2848 = or i1 %2846, %2847, !dbg !79
  %2849 = select i1 %2848, float %2845, float %2253, !dbg !80
  %2850 = fcmp ogt float %2849, %2254, !dbg !77
  %2851 = fcmp uno float %2849, 0.000000e+00, !dbg !78
  %2852 = or i1 %2850, %2851, !dbg !79
  %2853 = select i1 %2852, float %2849, float %2254, !dbg !80
  %2854 = fcmp ogt float %2323, %2324, !dbg !77
  %2855 = fcmp uno float %2323, 0.000000e+00, !dbg !78
  %2856 = or i1 %2854, %2855, !dbg !79
  %2857 = select i1 %2856, float %2323, float %2324, !dbg !80
  %2858 = fcmp ogt float %2857, %2333, !dbg !77
  %2859 = fcmp uno float %2857, 0.000000e+00, !dbg !78
  %2860 = or i1 %2858, %2859, !dbg !79
  %2861 = select i1 %2860, float %2857, float %2333, !dbg !80
  %2862 = fcmp ogt float %2861, %2334, !dbg !77
  %2863 = fcmp uno float %2861, 0.000000e+00, !dbg !78
  %2864 = or i1 %2862, %2863, !dbg !79
  %2865 = select i1 %2864, float %2861, float %2334, !dbg !80
  %2866 = fcmp ogt float %2865, %2343, !dbg !77
  %2867 = fcmp uno float %2865, 0.000000e+00, !dbg !78
  %2868 = or i1 %2866, %2867, !dbg !79
  %2869 = select i1 %2868, float %2865, float %2343, !dbg !80
  %2870 = fcmp ogt float %2869, %2344, !dbg !77
  %2871 = fcmp uno float %2869, 0.000000e+00, !dbg !78
  %2872 = or i1 %2870, %2871, !dbg !79
  %2873 = select i1 %2872, float %2869, float %2344, !dbg !80
  %2874 = fcmp ogt float %2873, %2353, !dbg !77
  %2875 = fcmp uno float %2873, 0.000000e+00, !dbg !78
  %2876 = or i1 %2874, %2875, !dbg !79
  %2877 = select i1 %2876, float %2873, float %2353, !dbg !80
  %2878 = fcmp ogt float %2877, %2354, !dbg !77
  %2879 = fcmp uno float %2877, 0.000000e+00, !dbg !78
  %2880 = or i1 %2878, %2879, !dbg !79
  %2881 = select i1 %2880, float %2877, float %2354, !dbg !80
  %2882 = fcmp ogt float %2881, %2363, !dbg !77
  %2883 = fcmp uno float %2881, 0.000000e+00, !dbg !78
  %2884 = or i1 %2882, %2883, !dbg !79
  %2885 = select i1 %2884, float %2881, float %2363, !dbg !80
  %2886 = fcmp ogt float %2885, %2364, !dbg !77
  %2887 = fcmp uno float %2885, 0.000000e+00, !dbg !78
  %2888 = or i1 %2886, %2887, !dbg !79
  %2889 = select i1 %2888, float %2885, float %2364, !dbg !80
  %2890 = fcmp ogt float %2889, %2373, !dbg !77
  %2891 = fcmp uno float %2889, 0.000000e+00, !dbg !78
  %2892 = or i1 %2890, %2891, !dbg !79
  %2893 = select i1 %2892, float %2889, float %2373, !dbg !80
  %2894 = fcmp ogt float %2893, %2374, !dbg !77
  %2895 = fcmp uno float %2893, 0.000000e+00, !dbg !78
  %2896 = or i1 %2894, %2895, !dbg !79
  %2897 = select i1 %2896, float %2893, float %2374, !dbg !80
  %2898 = fcmp ogt float %2897, %2383, !dbg !77
  %2899 = fcmp uno float %2897, 0.000000e+00, !dbg !78
  %2900 = or i1 %2898, %2899, !dbg !79
  %2901 = select i1 %2900, float %2897, float %2383, !dbg !80
  %2902 = fcmp ogt float %2901, %2384, !dbg !77
  %2903 = fcmp uno float %2901, 0.000000e+00, !dbg !78
  %2904 = or i1 %2902, %2903, !dbg !79
  %2905 = select i1 %2904, float %2901, float %2384, !dbg !80
  %2906 = fcmp ogt float %2905, %2393, !dbg !77
  %2907 = fcmp uno float %2905, 0.000000e+00, !dbg !78
  %2908 = or i1 %2906, %2907, !dbg !79
  %2909 = select i1 %2908, float %2905, float %2393, !dbg !80
  %2910 = fcmp ogt float %2909, %2394, !dbg !77
  %2911 = fcmp uno float %2909, 0.000000e+00, !dbg !78
  %2912 = or i1 %2910, %2911, !dbg !79
  %2913 = select i1 %2912, float %2909, float %2394, !dbg !80
  %2914 = fcmp ogt float %2913, %2403, !dbg !77
  %2915 = fcmp uno float %2913, 0.000000e+00, !dbg !78
  %2916 = or i1 %2914, %2915, !dbg !79
  %2917 = select i1 %2916, float %2913, float %2403, !dbg !80
  %2918 = fcmp ogt float %2917, %2404, !dbg !77
  %2919 = fcmp uno float %2917, 0.000000e+00, !dbg !78
  %2920 = or i1 %2918, %2919, !dbg !79
  %2921 = select i1 %2920, float %2917, float %2404, !dbg !80
  %2922 = fcmp ogt float %2921, %2413, !dbg !77
  %2923 = fcmp uno float %2921, 0.000000e+00, !dbg !78
  %2924 = or i1 %2922, %2923, !dbg !79
  %2925 = select i1 %2924, float %2921, float %2413, !dbg !80
  %2926 = fcmp ogt float %2925, %2414, !dbg !77
  %2927 = fcmp uno float %2925, 0.000000e+00, !dbg !78
  %2928 = or i1 %2926, %2927, !dbg !79
  %2929 = select i1 %2928, float %2925, float %2414, !dbg !80
  %2930 = fcmp ogt float %2929, %2423, !dbg !77
  %2931 = fcmp uno float %2929, 0.000000e+00, !dbg !78
  %2932 = or i1 %2930, %2931, !dbg !79
  %2933 = select i1 %2932, float %2929, float %2423, !dbg !80
  %2934 = fcmp ogt float %2933, %2424, !dbg !77
  %2935 = fcmp uno float %2933, 0.000000e+00, !dbg !78
  %2936 = or i1 %2934, %2935, !dbg !79
  %2937 = select i1 %2936, float %2933, float %2424, !dbg !80
  %2938 = fcmp ogt float %2937, %2433, !dbg !77
  %2939 = fcmp uno float %2937, 0.000000e+00, !dbg !78
  %2940 = or i1 %2938, %2939, !dbg !79
  %2941 = select i1 %2940, float %2937, float %2433, !dbg !80
  %2942 = fcmp ogt float %2941, %2434, !dbg !77
  %2943 = fcmp uno float %2941, 0.000000e+00, !dbg !78
  %2944 = or i1 %2942, %2943, !dbg !79
  %2945 = select i1 %2944, float %2941, float %2434, !dbg !80
  %2946 = bitcast float %2853 to i32, !dbg !75
  %2947 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2946, i32 16, i32 31), !dbg !75
  %2948 = bitcast i32 %2947 to float, !dbg !75
  %2949 = fcmp ogt float %2853, %2948, !dbg !77
  %2950 = fcmp uno float %2853, 0.000000e+00, !dbg !78
  %2951 = or i1 %2949, %2950, !dbg !79
  %2952 = select i1 %2951, float %2853, float %2948, !dbg !80
  %2953 = bitcast float %2952 to i32, !dbg !75
  %2954 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2953, i32 8, i32 31), !dbg !75
  %2955 = bitcast i32 %2954 to float, !dbg !75
  %2956 = fcmp ogt float %2952, %2955, !dbg !77
  %2957 = fcmp uno float %2952, 0.000000e+00, !dbg !78
  %2958 = or i1 %2956, %2957, !dbg !79
  %2959 = select i1 %2958, float %2952, float %2955, !dbg !80
  %2960 = bitcast float %2959 to i32, !dbg !75
  %2961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2960, i32 4, i32 31), !dbg !75
  %2962 = bitcast i32 %2961 to float, !dbg !75
  %2963 = fcmp ogt float %2959, %2962, !dbg !77
  %2964 = fcmp uno float %2959, 0.000000e+00, !dbg !78
  %2965 = or i1 %2963, %2964, !dbg !79
  %2966 = select i1 %2965, float %2959, float %2962, !dbg !80
  %2967 = bitcast float %2966 to i32, !dbg !75
  %2968 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2967, i32 2, i32 31), !dbg !75
  %2969 = bitcast i32 %2968 to float, !dbg !75
  %2970 = fcmp ogt float %2966, %2969, !dbg !77
  %2971 = fcmp uno float %2966, 0.000000e+00, !dbg !78
  %2972 = or i1 %2970, %2971, !dbg !79
  %2973 = select i1 %2972, float %2966, float %2969, !dbg !80
  %2974 = bitcast float %2973 to i32, !dbg !75
  %2975 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2974, i32 1, i32 31), !dbg !75
  %2976 = bitcast i32 %2975 to float, !dbg !75
  %2977 = fcmp ogt float %2973, %2976, !dbg !77
  %2978 = fcmp uno float %2973, 0.000000e+00, !dbg !78
  %2979 = or i1 %2977, %2978, !dbg !79
  %2980 = bitcast float %2945 to i32, !dbg !75
  %2981 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2980, i32 16, i32 31), !dbg !75
  %2982 = bitcast i32 %2981 to float, !dbg !75
  %2983 = fcmp ogt float %2945, %2982, !dbg !77
  %2984 = fcmp uno float %2945, 0.000000e+00, !dbg !78
  %2985 = or i1 %2983, %2984, !dbg !79
  %2986 = select i1 %2985, float %2945, float %2982, !dbg !80
  %2987 = bitcast float %2986 to i32, !dbg !75
  %2988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2987, i32 8, i32 31), !dbg !75
  %2989 = bitcast i32 %2988 to float, !dbg !75
  %2990 = fcmp ogt float %2986, %2989, !dbg !77
  %2991 = fcmp uno float %2986, 0.000000e+00, !dbg !78
  %2992 = or i1 %2990, %2991, !dbg !79
  %2993 = select i1 %2992, float %2986, float %2989, !dbg !80
  %2994 = bitcast float %2993 to i32, !dbg !75
  %2995 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2994, i32 4, i32 31), !dbg !75
  %2996 = bitcast i32 %2995 to float, !dbg !75
  %2997 = fcmp ogt float %2993, %2996, !dbg !77
  %2998 = fcmp uno float %2993, 0.000000e+00, !dbg !78
  %2999 = or i1 %2997, %2998, !dbg !79
  %3000 = select i1 %2999, float %2993, float %2996, !dbg !80
  %3001 = bitcast float %3000 to i32, !dbg !75
  %3002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3001, i32 2, i32 31), !dbg !75
  %3003 = bitcast i32 %3002 to float, !dbg !75
  %3004 = fcmp ogt float %3000, %3003, !dbg !77
  %3005 = fcmp uno float %3000, 0.000000e+00, !dbg !78
  %3006 = or i1 %3004, %3005, !dbg !79
  %3007 = select i1 %3006, float %3000, float %3003, !dbg !80
  %3008 = bitcast float %3007 to i32, !dbg !75
  %3009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3008, i32 1, i32 31), !dbg !75
  %3010 = bitcast i32 %3009 to float, !dbg !75
  %3011 = fcmp ogt float %3007, %3010, !dbg !77
  %3012 = fcmp uno float %3007, 0.000000e+00, !dbg !78
  %3013 = or i1 %3011, %3012, !dbg !79
  %3014 = select i1 %2979, i32 %2974, i32 %2975, !dbg !80
  %3015 = insertelement <1 x i32> poison, i32 %3014, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %3015, i1 %1253) #5, !dbg !75
  %3016 = select i1 %3013, i32 %3008, i32 %3009, !dbg !80
  %3017 = insertelement <1 x i32> poison, i32 %3016, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1261, <1 x i32> %3017, i1 %1253) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3018 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1268, i1 %1267) #5, !dbg !75
  %3019 = bitcast i32 %3018 to float, !dbg !75
  %3020 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3018, i32 2, i32 31), !dbg !75
  %3021 = bitcast i32 %3020 to float, !dbg !75
  %3022 = fcmp ogt float %3019, %3021, !dbg !77
  %3023 = fcmp uno float %3019, 0.000000e+00, !dbg !78
  %3024 = or i1 %3023, %3022, !dbg !79
  %3025 = select i1 %3024, float %3019, float %3021, !dbg !80
  %3026 = bitcast float %3025 to i32, !dbg !75
  %3027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3026, i32 1, i32 31), !dbg !75
  %3028 = bitcast i32 %3027 to float, !dbg !75
  %3029 = fcmp ogt float %3025, %3028, !dbg !77
  %3030 = fcmp uno float %3025, 0.000000e+00, !dbg !78
  %3031 = or i1 %3029, %3030, !dbg !79
  %3032 = select i1 %3031, i32 %3026, i32 %3027, !dbg !80
  %3033 = insertelement <1 x i32> poison, i32 %3032, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1268, <1 x i32> %3033, i1 %1318) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3034 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %3035 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3036 = bitcast float %3034 to i32, !dbg !81
  %3037 = bitcast float %3035 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %3036, i32 %3037, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3038 = load float, ptr addrspace(3) %2760, align 4, !dbg !81
  %3039 = sext i32 %1836 to i64, !dbg !82
  %3040 = getelementptr bfloat, ptr addrspace(1) %4, i64 %3039, !dbg !82
  %3041 = fptrunc float %2761 to bfloat, !dbg !74
  %3042 = and i32 %21, 126, !dbg !74
  %3043 = icmp eq i32 %3042, 0, !dbg !74
  %3044 = bitcast bfloat %3041 to i16, !dbg !74
  %3045 = and i1 %3043, %1837, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3044, ptr addrspace(1) %3040, i1 %3045) #5, !dbg !74
  %3046 = getelementptr bfloat, ptr addrspace(1) %5, i64 %3039, !dbg !83
  %3047 = fptrunc float %3038 to bfloat, !dbg !81
  %3048 = bitcast bfloat %3047 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3048, ptr addrspace(1) %3046, i1 %3045) #5, !dbg !81
  %3049 = getelementptr bfloat, ptr addrspace(1) %6, i64 %3039, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3044, ptr addrspace(1) %3049, i1 %3045) #5, !dbg !85
  %3050 = getelementptr bfloat, ptr addrspace(1) %7, i64 %3039, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3048, ptr addrspace(1) %3050, i1 %3045) #5, !dbg !87
  %3051 = getelementptr bfloat, ptr addrspace(1) %8, i64 %3039, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3044, ptr addrspace(1) %3051, i1 %3045) #5, !dbg !89
  %3052 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3039, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3048, ptr addrspace(1) %3052, i1 %3045) #5, !dbg !91
  %3053 = getelementptr bfloat, ptr addrspace(1) %10, i64 %3039, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3044, ptr addrspace(1) %3053, i1 %3045) #5, !dbg !93
  %3054 = getelementptr bfloat, ptr addrspace(1) %11, i64 %3039, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3048, ptr addrspace(1) %3054, i1 %3045) #5, !dbg !95
  %3055 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1996, i1 %24) #5, !dbg !96
  %3056 = extractvalue { i32, i32, i32, i32 } %3055, 0, !dbg !96
  %3057 = bitcast i32 %3056 to <2 x bfloat>, !dbg !96
  %3058 = extractvalue { i32, i32, i32, i32 } %3055, 1, !dbg !96
  %3059 = bitcast i32 %3058 to <2 x bfloat>, !dbg !96
  %3060 = extractvalue { i32, i32, i32, i32 } %3055, 2, !dbg !96
  %3061 = bitcast i32 %3060 to <2 x bfloat>, !dbg !96
  %3062 = extractvalue { i32, i32, i32, i32 } %3055, 3, !dbg !96
  %3063 = bitcast i32 %3062 to <2 x bfloat>, !dbg !96
  %3064 = extractelement <2 x bfloat> %3057, i64 0, !dbg !96
  %3065 = extractelement <2 x bfloat> %3057, i64 1, !dbg !96
  %3066 = extractelement <2 x bfloat> %3059, i64 0, !dbg !96
  %3067 = extractelement <2 x bfloat> %3059, i64 1, !dbg !96
  %3068 = extractelement <2 x bfloat> %3061, i64 0, !dbg !96
  %3069 = extractelement <2 x bfloat> %3061, i64 1, !dbg !96
  %3070 = extractelement <2 x bfloat> %3063, i64 0, !dbg !96
  %3071 = extractelement <2 x bfloat> %3063, i64 1, !dbg !96
  %3072 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1997, i1 %24) #5, !dbg !96
  %3073 = extractvalue { i32, i32, i32, i32 } %3072, 0, !dbg !96
  %3074 = bitcast i32 %3073 to <2 x bfloat>, !dbg !96
  %3075 = extractvalue { i32, i32, i32, i32 } %3072, 1, !dbg !96
  %3076 = bitcast i32 %3075 to <2 x bfloat>, !dbg !96
  %3077 = extractvalue { i32, i32, i32, i32 } %3072, 2, !dbg !96
  %3078 = bitcast i32 %3077 to <2 x bfloat>, !dbg !96
  %3079 = extractvalue { i32, i32, i32, i32 } %3072, 3, !dbg !96
  %3080 = bitcast i32 %3079 to <2 x bfloat>, !dbg !96
  %3081 = extractelement <2 x bfloat> %3074, i64 0, !dbg !96
  %3082 = extractelement <2 x bfloat> %3074, i64 1, !dbg !96
  %3083 = extractelement <2 x bfloat> %3076, i64 0, !dbg !96
  %3084 = extractelement <2 x bfloat> %3076, i64 1, !dbg !96
  %3085 = extractelement <2 x bfloat> %3078, i64 0, !dbg !96
  %3086 = extractelement <2 x bfloat> %3078, i64 1, !dbg !96
  %3087 = extractelement <2 x bfloat> %3080, i64 0, !dbg !96
  %3088 = extractelement <2 x bfloat> %3080, i64 1, !dbg !96
  %3089 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1998, i1 %68) #5, !dbg !96
  %3090 = extractvalue { i32, i32, i32, i32 } %3089, 0, !dbg !96
  %3091 = bitcast i32 %3090 to <2 x bfloat>, !dbg !96
  %3092 = extractvalue { i32, i32, i32, i32 } %3089, 1, !dbg !96
  %3093 = bitcast i32 %3092 to <2 x bfloat>, !dbg !96
  %3094 = extractvalue { i32, i32, i32, i32 } %3089, 2, !dbg !96
  %3095 = bitcast i32 %3094 to <2 x bfloat>, !dbg !96
  %3096 = extractvalue { i32, i32, i32, i32 } %3089, 3, !dbg !96
  %3097 = bitcast i32 %3096 to <2 x bfloat>, !dbg !96
  %3098 = extractelement <2 x bfloat> %3091, i64 0, !dbg !96
  %3099 = extractelement <2 x bfloat> %3091, i64 1, !dbg !96
  %3100 = extractelement <2 x bfloat> %3093, i64 0, !dbg !96
  %3101 = extractelement <2 x bfloat> %3093, i64 1, !dbg !96
  %3102 = extractelement <2 x bfloat> %3095, i64 0, !dbg !96
  %3103 = extractelement <2 x bfloat> %3095, i64 1, !dbg !96
  %3104 = extractelement <2 x bfloat> %3097, i64 0, !dbg !96
  %3105 = extractelement <2 x bfloat> %3097, i64 1, !dbg !96
  %3106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1999, i1 %68) #5, !dbg !96
  %3107 = extractvalue { i32, i32, i32, i32 } %3106, 0, !dbg !96
  %3108 = bitcast i32 %3107 to <2 x bfloat>, !dbg !96
  %3109 = extractvalue { i32, i32, i32, i32 } %3106, 1, !dbg !96
  %3110 = bitcast i32 %3109 to <2 x bfloat>, !dbg !96
  %3111 = extractvalue { i32, i32, i32, i32 } %3106, 2, !dbg !96
  %3112 = bitcast i32 %3111 to <2 x bfloat>, !dbg !96
  %3113 = extractvalue { i32, i32, i32, i32 } %3106, 3, !dbg !96
  %3114 = bitcast i32 %3113 to <2 x bfloat>, !dbg !96
  %3115 = extractelement <2 x bfloat> %3108, i64 0, !dbg !96
  %3116 = extractelement <2 x bfloat> %3108, i64 1, !dbg !96
  %3117 = extractelement <2 x bfloat> %3110, i64 0, !dbg !96
  %3118 = extractelement <2 x bfloat> %3110, i64 1, !dbg !96
  %3119 = extractelement <2 x bfloat> %3112, i64 0, !dbg !96
  %3120 = extractelement <2 x bfloat> %3112, i64 1, !dbg !96
  %3121 = extractelement <2 x bfloat> %3114, i64 0, !dbg !96
  %3122 = extractelement <2 x bfloat> %3114, i64 1, !dbg !96
  %3123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2000, i1 %25) #5, !dbg !96
  %3124 = extractvalue { i32, i32, i32, i32 } %3123, 0, !dbg !96
  %3125 = bitcast i32 %3124 to <2 x bfloat>, !dbg !96
  %3126 = extractvalue { i32, i32, i32, i32 } %3123, 1, !dbg !96
  %3127 = bitcast i32 %3126 to <2 x bfloat>, !dbg !96
  %3128 = extractvalue { i32, i32, i32, i32 } %3123, 2, !dbg !96
  %3129 = bitcast i32 %3128 to <2 x bfloat>, !dbg !96
  %3130 = extractvalue { i32, i32, i32, i32 } %3123, 3, !dbg !96
  %3131 = bitcast i32 %3130 to <2 x bfloat>, !dbg !96
  %3132 = extractelement <2 x bfloat> %3125, i64 0, !dbg !96
  %3133 = extractelement <2 x bfloat> %3125, i64 1, !dbg !96
  %3134 = extractelement <2 x bfloat> %3127, i64 0, !dbg !96
  %3135 = extractelement <2 x bfloat> %3127, i64 1, !dbg !96
  %3136 = extractelement <2 x bfloat> %3129, i64 0, !dbg !96
  %3137 = extractelement <2 x bfloat> %3129, i64 1, !dbg !96
  %3138 = extractelement <2 x bfloat> %3131, i64 0, !dbg !96
  %3139 = extractelement <2 x bfloat> %3131, i64 1, !dbg !96
  %3140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2001, i1 %25) #5, !dbg !96
  %3141 = extractvalue { i32, i32, i32, i32 } %3140, 0, !dbg !96
  %3142 = bitcast i32 %3141 to <2 x bfloat>, !dbg !96
  %3143 = extractvalue { i32, i32, i32, i32 } %3140, 1, !dbg !96
  %3144 = bitcast i32 %3143 to <2 x bfloat>, !dbg !96
  %3145 = extractvalue { i32, i32, i32, i32 } %3140, 2, !dbg !96
  %3146 = bitcast i32 %3145 to <2 x bfloat>, !dbg !96
  %3147 = extractvalue { i32, i32, i32, i32 } %3140, 3, !dbg !96
  %3148 = bitcast i32 %3147 to <2 x bfloat>, !dbg !96
  %3149 = extractelement <2 x bfloat> %3142, i64 0, !dbg !96
  %3150 = extractelement <2 x bfloat> %3142, i64 1, !dbg !96
  %3151 = extractelement <2 x bfloat> %3144, i64 0, !dbg !96
  %3152 = extractelement <2 x bfloat> %3144, i64 1, !dbg !96
  %3153 = extractelement <2 x bfloat> %3146, i64 0, !dbg !96
  %3154 = extractelement <2 x bfloat> %3146, i64 1, !dbg !96
  %3155 = extractelement <2 x bfloat> %3148, i64 0, !dbg !96
  %3156 = extractelement <2 x bfloat> %3148, i64 1, !dbg !96
  %3157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2002, i1 %69) #5, !dbg !96
  %3158 = extractvalue { i32, i32, i32, i32 } %3157, 0, !dbg !96
  %3159 = bitcast i32 %3158 to <2 x bfloat>, !dbg !96
  %3160 = extractvalue { i32, i32, i32, i32 } %3157, 1, !dbg !96
  %3161 = bitcast i32 %3160 to <2 x bfloat>, !dbg !96
  %3162 = extractvalue { i32, i32, i32, i32 } %3157, 2, !dbg !96
  %3163 = bitcast i32 %3162 to <2 x bfloat>, !dbg !96
  %3164 = extractvalue { i32, i32, i32, i32 } %3157, 3, !dbg !96
  %3165 = bitcast i32 %3164 to <2 x bfloat>, !dbg !96
  %3166 = extractelement <2 x bfloat> %3159, i64 0, !dbg !96
  %3167 = extractelement <2 x bfloat> %3159, i64 1, !dbg !96
  %3168 = extractelement <2 x bfloat> %3161, i64 0, !dbg !96
  %3169 = extractelement <2 x bfloat> %3161, i64 1, !dbg !96
  %3170 = extractelement <2 x bfloat> %3163, i64 0, !dbg !96
  %3171 = extractelement <2 x bfloat> %3163, i64 1, !dbg !96
  %3172 = extractelement <2 x bfloat> %3165, i64 0, !dbg !96
  %3173 = extractelement <2 x bfloat> %3165, i64 1, !dbg !96
  %3174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2003, i1 %69) #5, !dbg !96
  %3175 = extractvalue { i32, i32, i32, i32 } %3174, 0, !dbg !96
  %3176 = bitcast i32 %3175 to <2 x bfloat>, !dbg !96
  %3177 = extractvalue { i32, i32, i32, i32 } %3174, 1, !dbg !96
  %3178 = bitcast i32 %3177 to <2 x bfloat>, !dbg !96
  %3179 = extractvalue { i32, i32, i32, i32 } %3174, 2, !dbg !96
  %3180 = bitcast i32 %3179 to <2 x bfloat>, !dbg !96
  %3181 = extractvalue { i32, i32, i32, i32 } %3174, 3, !dbg !96
  %3182 = bitcast i32 %3181 to <2 x bfloat>, !dbg !96
  %3183 = extractelement <2 x bfloat> %3176, i64 0, !dbg !96
  %3184 = extractelement <2 x bfloat> %3176, i64 1, !dbg !96
  %3185 = extractelement <2 x bfloat> %3178, i64 0, !dbg !96
  %3186 = extractelement <2 x bfloat> %3178, i64 1, !dbg !96
  %3187 = extractelement <2 x bfloat> %3180, i64 0, !dbg !96
  %3188 = extractelement <2 x bfloat> %3180, i64 1, !dbg !96
  %3189 = extractelement <2 x bfloat> %3182, i64 0, !dbg !96
  %3190 = extractelement <2 x bfloat> %3182, i64 1, !dbg !96
  %3191 = fpext bfloat %3064 to float, !dbg !97
  %3192 = fpext bfloat %3065 to float, !dbg !97
  %3193 = fpext bfloat %3066 to float, !dbg !97
  %3194 = fpext bfloat %3067 to float, !dbg !97
  %3195 = fpext bfloat %3068 to float, !dbg !97
  %3196 = fpext bfloat %3069 to float, !dbg !97
  %3197 = fpext bfloat %3070 to float, !dbg !97
  %3198 = fpext bfloat %3071 to float, !dbg !97
  %3199 = fpext bfloat %3081 to float, !dbg !97
  %3200 = fpext bfloat %3082 to float, !dbg !97
  %3201 = fpext bfloat %3083 to float, !dbg !97
  %3202 = fpext bfloat %3084 to float, !dbg !97
  %3203 = fpext bfloat %3085 to float, !dbg !97
  %3204 = fpext bfloat %3086 to float, !dbg !97
  %3205 = fpext bfloat %3087 to float, !dbg !97
  %3206 = fpext bfloat %3088 to float, !dbg !97
  %3207 = fpext bfloat %3098 to float, !dbg !97
  %3208 = fpext bfloat %3099 to float, !dbg !97
  %3209 = fpext bfloat %3100 to float, !dbg !97
  %3210 = fpext bfloat %3101 to float, !dbg !97
  %3211 = fpext bfloat %3102 to float, !dbg !97
  %3212 = fpext bfloat %3103 to float, !dbg !97
  %3213 = fpext bfloat %3104 to float, !dbg !97
  %3214 = fpext bfloat %3105 to float, !dbg !97
  %3215 = fpext bfloat %3115 to float, !dbg !97
  %3216 = fpext bfloat %3116 to float, !dbg !97
  %3217 = fpext bfloat %3117 to float, !dbg !97
  %3218 = fpext bfloat %3118 to float, !dbg !97
  %3219 = fpext bfloat %3119 to float, !dbg !97
  %3220 = fpext bfloat %3120 to float, !dbg !97
  %3221 = fpext bfloat %3121 to float, !dbg !97
  %3222 = fpext bfloat %3122 to float, !dbg !97
  %3223 = fpext bfloat %3132 to float, !dbg !97
  %3224 = fpext bfloat %3133 to float, !dbg !97
  %3225 = fpext bfloat %3134 to float, !dbg !97
  %3226 = fpext bfloat %3135 to float, !dbg !97
  %3227 = fpext bfloat %3136 to float, !dbg !97
  %3228 = fpext bfloat %3137 to float, !dbg !97
  %3229 = fpext bfloat %3138 to float, !dbg !97
  %3230 = fpext bfloat %3139 to float, !dbg !97
  %3231 = fpext bfloat %3149 to float, !dbg !97
  %3232 = fpext bfloat %3150 to float, !dbg !97
  %3233 = fpext bfloat %3151 to float, !dbg !97
  %3234 = fpext bfloat %3152 to float, !dbg !97
  %3235 = fpext bfloat %3153 to float, !dbg !97
  %3236 = fpext bfloat %3154 to float, !dbg !97
  %3237 = fpext bfloat %3155 to float, !dbg !97
  %3238 = fpext bfloat %3156 to float, !dbg !97
  %3239 = fpext bfloat %3166 to float, !dbg !97
  %3240 = fpext bfloat %3167 to float, !dbg !97
  %3241 = fpext bfloat %3168 to float, !dbg !97
  %3242 = fpext bfloat %3169 to float, !dbg !97
  %3243 = fpext bfloat %3170 to float, !dbg !97
  %3244 = fpext bfloat %3171 to float, !dbg !97
  %3245 = fpext bfloat %3172 to float, !dbg !97
  %3246 = fpext bfloat %3173 to float, !dbg !97
  %3247 = fpext bfloat %3183 to float, !dbg !97
  %3248 = fpext bfloat %3184 to float, !dbg !97
  %3249 = fpext bfloat %3185 to float, !dbg !97
  %3250 = fpext bfloat %3186 to float, !dbg !97
  %3251 = fpext bfloat %3187 to float, !dbg !97
  %3252 = fpext bfloat %3188 to float, !dbg !97
  %3253 = fpext bfloat %3189 to float, !dbg !97
  %3254 = fpext bfloat %3190 to float, !dbg !97
  %.inv = fcmp oge float %2756, 0.000000e+00, !dbg !98
  %3255 = select i1 %.inv, float 0.000000e+00, float %2756, !dbg !98
  %.inv64 = fcmp oge float %2757, 0.000000e+00, !dbg !98
  %3256 = select i1 %.inv64, float 0.000000e+00, float %2757, !dbg !98
  %3257 = fsub float 0.000000e+00, %3255, !dbg !100
  %3258 = fsub float 0.000000e+00, %3256, !dbg !100
  %.inv65 = fcmp ole float %3034, 0.000000e+00, !dbg !101
  %3259 = select i1 %.inv65, float 0.000000e+00, float %3034, !dbg !101
  %.inv66 = fcmp ole float %3035, 0.000000e+00, !dbg !101
  %3260 = select i1 %.inv66, float 0.000000e+00, float %3035, !dbg !101
  %3261 = fcmp ogt float %3257, %3259, !dbg !103
  %3262 = fcmp ogt float %3258, %3260, !dbg !103
  %3263 = fcmp uno float %3257, 0.000000e+00, !dbg !105
  %3264 = fcmp uno float %3258, 0.000000e+00, !dbg !105
  %3265 = or i1 %3263, %3261, !dbg !106
  %3266 = or i1 %3264, %3262, !dbg !106
  %3267 = select i1 %3265, float %3257, float %3259, !dbg !107
  %3268 = select i1 %3266, float %3258, float %3260, !dbg !107
  %3269 = fmul float %3267, 0x3F80204080000000, !dbg !108
  %3270 = fmul float %3268, 0x3F80204080000000, !dbg !108
  %3271 = fcmp ogt float %3269, 0x3EE4F8B580000000, !dbg !109
  %3272 = fcmp ogt float %3270, 0x3EE4F8B580000000, !dbg !109
  %3273 = fcmp uno float %3269, 0.000000e+00, !dbg !111
  %3274 = fcmp uno float %3270, 0.000000e+00, !dbg !111
  %3275 = or i1 %3271, %3273, !dbg !112
  %3276 = or i1 %3272, %3274, !dbg !112
  %3277 = select i1 %3275, float %3269, float 0x3EE4F8B580000000, !dbg !113
  %3278 = select i1 %3276, float %3270, float 0x3EE4F8B580000000, !dbg !113
  %3279 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3277), !dbg !114
  %3280 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3278), !dbg !114
  %3281 = fmul float %3279, %3191, !dbg !115
  %3282 = fmul float %3279, %3192, !dbg !115
  %3283 = fmul float %3279, %3193, !dbg !115
  %3284 = fmul float %3279, %3194, !dbg !115
  %3285 = fmul float %3279, %3195, !dbg !115
  %3286 = fmul float %3279, %3196, !dbg !115
  %3287 = fmul float %3279, %3197, !dbg !115
  %3288 = fmul float %3279, %3198, !dbg !115
  %3289 = fmul float %3279, %3199, !dbg !115
  %3290 = fmul float %3279, %3200, !dbg !115
  %3291 = fmul float %3279, %3201, !dbg !115
  %3292 = fmul float %3279, %3202, !dbg !115
  %3293 = fmul float %3279, %3203, !dbg !115
  %3294 = fmul float %3279, %3204, !dbg !115
  %3295 = fmul float %3279, %3205, !dbg !115
  %3296 = fmul float %3279, %3206, !dbg !115
  %3297 = fmul float %3279, %3207, !dbg !115
  %3298 = fmul float %3279, %3208, !dbg !115
  %3299 = fmul float %3279, %3209, !dbg !115
  %3300 = fmul float %3279, %3210, !dbg !115
  %3301 = fmul float %3279, %3211, !dbg !115
  %3302 = fmul float %3279, %3212, !dbg !115
  %3303 = fmul float %3279, %3213, !dbg !115
  %3304 = fmul float %3279, %3214, !dbg !115
  %3305 = fmul float %3279, %3215, !dbg !115
  %3306 = fmul float %3279, %3216, !dbg !115
  %3307 = fmul float %3279, %3217, !dbg !115
  %3308 = fmul float %3279, %3218, !dbg !115
  %3309 = fmul float %3279, %3219, !dbg !115
  %3310 = fmul float %3279, %3220, !dbg !115
  %3311 = fmul float %3279, %3221, !dbg !115
  %3312 = fmul float %3279, %3222, !dbg !115
  %3313 = fmul float %3280, %3223, !dbg !115
  %3314 = fmul float %3280, %3224, !dbg !115
  %3315 = fmul float %3280, %3225, !dbg !115
  %3316 = fmul float %3280, %3226, !dbg !115
  %3317 = fmul float %3280, %3227, !dbg !115
  %3318 = fmul float %3280, %3228, !dbg !115
  %3319 = fmul float %3280, %3229, !dbg !115
  %3320 = fmul float %3280, %3230, !dbg !115
  %3321 = fmul float %3280, %3231, !dbg !115
  %3322 = fmul float %3280, %3232, !dbg !115
  %3323 = fmul float %3280, %3233, !dbg !115
  %3324 = fmul float %3280, %3234, !dbg !115
  %3325 = fmul float %3280, %3235, !dbg !115
  %3326 = fmul float %3280, %3236, !dbg !115
  %3327 = fmul float %3280, %3237, !dbg !115
  %3328 = fmul float %3280, %3238, !dbg !115
  %3329 = fmul float %3280, %3239, !dbg !115
  %3330 = fmul float %3280, %3240, !dbg !115
  %3331 = fmul float %3280, %3241, !dbg !115
  %3332 = fmul float %3280, %3242, !dbg !115
  %3333 = fmul float %3280, %3243, !dbg !115
  %3334 = fmul float %3280, %3244, !dbg !115
  %3335 = fmul float %3280, %3245, !dbg !115
  %3336 = fmul float %3280, %3246, !dbg !115
  %3337 = fmul float %3280, %3247, !dbg !115
  %3338 = fmul float %3280, %3248, !dbg !115
  %3339 = fmul float %3280, %3249, !dbg !115
  %3340 = fmul float %3280, %3250, !dbg !115
  %3341 = fmul float %3280, %3251, !dbg !115
  %3342 = fmul float %3280, %3252, !dbg !115
  %3343 = fmul float %3280, %3253, !dbg !115
  %3344 = fmul float %3280, %3254, !dbg !115
  %3345 = tail call float @llvm.nvvm.round.f(float %3281) #5, !dbg !116
  %3346 = tail call float @llvm.nvvm.round.f(float %3282) #5, !dbg !116
  %3347 = tail call float @llvm.nvvm.round.f(float %3283) #5, !dbg !116
  %3348 = tail call float @llvm.nvvm.round.f(float %3284) #5, !dbg !116
  %3349 = tail call float @llvm.nvvm.round.f(float %3285) #5, !dbg !116
  %3350 = tail call float @llvm.nvvm.round.f(float %3286) #5, !dbg !116
  %3351 = tail call float @llvm.nvvm.round.f(float %3287) #5, !dbg !116
  %3352 = tail call float @llvm.nvvm.round.f(float %3288) #5, !dbg !116
  %3353 = tail call float @llvm.nvvm.round.f(float %3289) #5, !dbg !116
  %3354 = tail call float @llvm.nvvm.round.f(float %3290) #5, !dbg !116
  %3355 = tail call float @llvm.nvvm.round.f(float %3291) #5, !dbg !116
  %3356 = tail call float @llvm.nvvm.round.f(float %3292) #5, !dbg !116
  %3357 = tail call float @llvm.nvvm.round.f(float %3293) #5, !dbg !116
  %3358 = tail call float @llvm.nvvm.round.f(float %3294) #5, !dbg !116
  %3359 = tail call float @llvm.nvvm.round.f(float %3295) #5, !dbg !116
  %3360 = tail call float @llvm.nvvm.round.f(float %3296) #5, !dbg !116
  %3361 = tail call float @llvm.nvvm.round.f(float %3297) #5, !dbg !116
  %3362 = tail call float @llvm.nvvm.round.f(float %3298) #5, !dbg !116
  %3363 = tail call float @llvm.nvvm.round.f(float %3299) #5, !dbg !116
  %3364 = tail call float @llvm.nvvm.round.f(float %3300) #5, !dbg !116
  %3365 = tail call float @llvm.nvvm.round.f(float %3301) #5, !dbg !116
  %3366 = tail call float @llvm.nvvm.round.f(float %3302) #5, !dbg !116
  %3367 = tail call float @llvm.nvvm.round.f(float %3303) #5, !dbg !116
  %3368 = tail call float @llvm.nvvm.round.f(float %3304) #5, !dbg !116
  %3369 = tail call float @llvm.nvvm.round.f(float %3305) #5, !dbg !116
  %3370 = tail call float @llvm.nvvm.round.f(float %3306) #5, !dbg !116
  %3371 = tail call float @llvm.nvvm.round.f(float %3307) #5, !dbg !116
  %3372 = tail call float @llvm.nvvm.round.f(float %3308) #5, !dbg !116
  %3373 = tail call float @llvm.nvvm.round.f(float %3309) #5, !dbg !116
  %3374 = tail call float @llvm.nvvm.round.f(float %3310) #5, !dbg !116
  %3375 = tail call float @llvm.nvvm.round.f(float %3311) #5, !dbg !116
  %3376 = tail call float @llvm.nvvm.round.f(float %3312) #5, !dbg !116
  %3377 = tail call float @llvm.nvvm.round.f(float %3313) #5, !dbg !116
  %3378 = tail call float @llvm.nvvm.round.f(float %3314) #5, !dbg !116
  %3379 = tail call float @llvm.nvvm.round.f(float %3315) #5, !dbg !116
  %3380 = tail call float @llvm.nvvm.round.f(float %3316) #5, !dbg !116
  %3381 = tail call float @llvm.nvvm.round.f(float %3317) #5, !dbg !116
  %3382 = tail call float @llvm.nvvm.round.f(float %3318) #5, !dbg !116
  %3383 = tail call float @llvm.nvvm.round.f(float %3319) #5, !dbg !116
  %3384 = tail call float @llvm.nvvm.round.f(float %3320) #5, !dbg !116
  %3385 = tail call float @llvm.nvvm.round.f(float %3321) #5, !dbg !116
  %3386 = tail call float @llvm.nvvm.round.f(float %3322) #5, !dbg !116
  %3387 = tail call float @llvm.nvvm.round.f(float %3323) #5, !dbg !116
  %3388 = tail call float @llvm.nvvm.round.f(float %3324) #5, !dbg !116
  %3389 = tail call float @llvm.nvvm.round.f(float %3325) #5, !dbg !116
  %3390 = tail call float @llvm.nvvm.round.f(float %3326) #5, !dbg !116
  %3391 = tail call float @llvm.nvvm.round.f(float %3327) #5, !dbg !116
  %3392 = tail call float @llvm.nvvm.round.f(float %3328) #5, !dbg !116
  %3393 = tail call float @llvm.nvvm.round.f(float %3329) #5, !dbg !116
  %3394 = tail call float @llvm.nvvm.round.f(float %3330) #5, !dbg !116
  %3395 = tail call float @llvm.nvvm.round.f(float %3331) #5, !dbg !116
  %3396 = tail call float @llvm.nvvm.round.f(float %3332) #5, !dbg !116
  %3397 = tail call float @llvm.nvvm.round.f(float %3333) #5, !dbg !116
  %3398 = tail call float @llvm.nvvm.round.f(float %3334) #5, !dbg !116
  %3399 = tail call float @llvm.nvvm.round.f(float %3335) #5, !dbg !116
  %3400 = tail call float @llvm.nvvm.round.f(float %3336) #5, !dbg !116
  %3401 = tail call float @llvm.nvvm.round.f(float %3337) #5, !dbg !116
  %3402 = tail call float @llvm.nvvm.round.f(float %3338) #5, !dbg !116
  %3403 = tail call float @llvm.nvvm.round.f(float %3339) #5, !dbg !116
  %3404 = tail call float @llvm.nvvm.round.f(float %3340) #5, !dbg !116
  %3405 = tail call float @llvm.nvvm.round.f(float %3341) #5, !dbg !116
  %3406 = tail call float @llvm.nvvm.round.f(float %3342) #5, !dbg !116
  %3407 = tail call float @llvm.nvvm.round.f(float %3343) #5, !dbg !116
  %3408 = tail call float @llvm.nvvm.round.f(float %3344) #5, !dbg !116
  %3409 = insertelement <4 x float> poison, float %3345, i64 0, !dbg !117
  %3410 = insertelement <4 x float> %3409, float %3346, i64 1, !dbg !117
  %3411 = insertelement <4 x float> %3410, float %3347, i64 2, !dbg !117
  %3412 = insertelement <4 x float> %3411, float %3348, i64 3, !dbg !117
  %3413 = fcmp ogt <4 x float> %3412, splat (float -1.270000e+02), !dbg !117
  %3414 = fcmp uno <4 x float> %3412, zeroinitializer, !dbg !119
  %3415 = or <4 x i1> %3413, %3414, !dbg !120
  %3416 = select <4 x i1> %3415, <4 x float> %3412, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3417 = fcmp olt <4 x float> %3416, splat (float 1.270000e+02), !dbg !122
  %3418 = fcmp uno <4 x float> %3416, zeroinitializer, !dbg !124
  %3419 = or <4 x i1> %3417, %3418, !dbg !125
  %3420 = fptosi <4 x float> %3416 to <4 x i8>, !dbg !126
  %3421 = select <4 x i1> %3419, <4 x i8> %3420, <4 x i8> splat (i8 127), !dbg !127
  %3422 = insertelement <4 x float> poison, float %3349, i64 0, !dbg !117
  %3423 = insertelement <4 x float> %3422, float %3350, i64 1, !dbg !117
  %3424 = insertelement <4 x float> %3423, float %3351, i64 2, !dbg !117
  %3425 = insertelement <4 x float> %3424, float %3352, i64 3, !dbg !117
  %3426 = fcmp ogt <4 x float> %3425, splat (float -1.270000e+02), !dbg !117
  %3427 = fcmp uno <4 x float> %3425, zeroinitializer, !dbg !119
  %3428 = or <4 x i1> %3426, %3427, !dbg !120
  %3429 = select <4 x i1> %3428, <4 x float> %3425, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3430 = fcmp olt <4 x float> %3429, splat (float 1.270000e+02), !dbg !122
  %3431 = fcmp uno <4 x float> %3429, zeroinitializer, !dbg !124
  %3432 = or <4 x i1> %3430, %3431, !dbg !125
  %3433 = fptosi <4 x float> %3429 to <4 x i8>, !dbg !126
  %3434 = select <4 x i1> %3432, <4 x i8> %3433, <4 x i8> splat (i8 127), !dbg !127
  %3435 = insertelement <4 x float> poison, float %3353, i64 0, !dbg !117
  %3436 = insertelement <4 x float> %3435, float %3354, i64 1, !dbg !117
  %3437 = insertelement <4 x float> %3436, float %3355, i64 2, !dbg !117
  %3438 = insertelement <4 x float> %3437, float %3356, i64 3, !dbg !117
  %3439 = fcmp ogt <4 x float> %3438, splat (float -1.270000e+02), !dbg !117
  %3440 = fcmp uno <4 x float> %3438, zeroinitializer, !dbg !119
  %3441 = or <4 x i1> %3439, %3440, !dbg !120
  %3442 = select <4 x i1> %3441, <4 x float> %3438, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3443 = fcmp olt <4 x float> %3442, splat (float 1.270000e+02), !dbg !122
  %3444 = fcmp uno <4 x float> %3442, zeroinitializer, !dbg !124
  %3445 = or <4 x i1> %3443, %3444, !dbg !125
  %3446 = fptosi <4 x float> %3442 to <4 x i8>, !dbg !126
  %3447 = select <4 x i1> %3445, <4 x i8> %3446, <4 x i8> splat (i8 127), !dbg !127
  %3448 = insertelement <4 x float> poison, float %3357, i64 0, !dbg !117
  %3449 = insertelement <4 x float> %3448, float %3358, i64 1, !dbg !117
  %3450 = insertelement <4 x float> %3449, float %3359, i64 2, !dbg !117
  %3451 = insertelement <4 x float> %3450, float %3360, i64 3, !dbg !117
  %3452 = fcmp ogt <4 x float> %3451, splat (float -1.270000e+02), !dbg !117
  %3453 = fcmp uno <4 x float> %3451, zeroinitializer, !dbg !119
  %3454 = or <4 x i1> %3452, %3453, !dbg !120
  %3455 = select <4 x i1> %3454, <4 x float> %3451, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3456 = fcmp olt <4 x float> %3455, splat (float 1.270000e+02), !dbg !122
  %3457 = fcmp uno <4 x float> %3455, zeroinitializer, !dbg !124
  %3458 = or <4 x i1> %3456, %3457, !dbg !125
  %3459 = fptosi <4 x float> %3455 to <4 x i8>, !dbg !126
  %3460 = select <4 x i1> %3458, <4 x i8> %3459, <4 x i8> splat (i8 127), !dbg !127
  %3461 = insertelement <4 x float> poison, float %3361, i64 0, !dbg !117
  %3462 = insertelement <4 x float> %3461, float %3362, i64 1, !dbg !117
  %3463 = insertelement <4 x float> %3462, float %3363, i64 2, !dbg !117
  %3464 = insertelement <4 x float> %3463, float %3364, i64 3, !dbg !117
  %3465 = fcmp ogt <4 x float> %3464, splat (float -1.270000e+02), !dbg !117
  %3466 = fcmp uno <4 x float> %3464, zeroinitializer, !dbg !119
  %3467 = or <4 x i1> %3465, %3466, !dbg !120
  %3468 = select <4 x i1> %3467, <4 x float> %3464, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3469 = fcmp olt <4 x float> %3468, splat (float 1.270000e+02), !dbg !122
  %3470 = fcmp uno <4 x float> %3468, zeroinitializer, !dbg !124
  %3471 = or <4 x i1> %3469, %3470, !dbg !125
  %3472 = fptosi <4 x float> %3468 to <4 x i8>, !dbg !126
  %3473 = select <4 x i1> %3471, <4 x i8> %3472, <4 x i8> splat (i8 127), !dbg !127
  %3474 = insertelement <4 x float> poison, float %3365, i64 0, !dbg !117
  %3475 = insertelement <4 x float> %3474, float %3366, i64 1, !dbg !117
  %3476 = insertelement <4 x float> %3475, float %3367, i64 2, !dbg !117
  %3477 = insertelement <4 x float> %3476, float %3368, i64 3, !dbg !117
  %3478 = fcmp ogt <4 x float> %3477, splat (float -1.270000e+02), !dbg !117
  %3479 = fcmp uno <4 x float> %3477, zeroinitializer, !dbg !119
  %3480 = or <4 x i1> %3478, %3479, !dbg !120
  %3481 = select <4 x i1> %3480, <4 x float> %3477, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3482 = fcmp olt <4 x float> %3481, splat (float 1.270000e+02), !dbg !122
  %3483 = fcmp uno <4 x float> %3481, zeroinitializer, !dbg !124
  %3484 = or <4 x i1> %3482, %3483, !dbg !125
  %3485 = fptosi <4 x float> %3481 to <4 x i8>, !dbg !126
  %3486 = select <4 x i1> %3484, <4 x i8> %3485, <4 x i8> splat (i8 127), !dbg !127
  %3487 = insertelement <4 x float> poison, float %3369, i64 0, !dbg !117
  %3488 = insertelement <4 x float> %3487, float %3370, i64 1, !dbg !117
  %3489 = insertelement <4 x float> %3488, float %3371, i64 2, !dbg !117
  %3490 = insertelement <4 x float> %3489, float %3372, i64 3, !dbg !117
  %3491 = fcmp ogt <4 x float> %3490, splat (float -1.270000e+02), !dbg !117
  %3492 = fcmp uno <4 x float> %3490, zeroinitializer, !dbg !119
  %3493 = or <4 x i1> %3491, %3492, !dbg !120
  %3494 = select <4 x i1> %3493, <4 x float> %3490, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3495 = fcmp olt <4 x float> %3494, splat (float 1.270000e+02), !dbg !122
  %3496 = fcmp uno <4 x float> %3494, zeroinitializer, !dbg !124
  %3497 = or <4 x i1> %3495, %3496, !dbg !125
  %3498 = fptosi <4 x float> %3494 to <4 x i8>, !dbg !126
  %3499 = select <4 x i1> %3497, <4 x i8> %3498, <4 x i8> splat (i8 127), !dbg !127
  %3500 = insertelement <4 x float> poison, float %3373, i64 0, !dbg !117
  %3501 = insertelement <4 x float> %3500, float %3374, i64 1, !dbg !117
  %3502 = insertelement <4 x float> %3501, float %3375, i64 2, !dbg !117
  %3503 = insertelement <4 x float> %3502, float %3376, i64 3, !dbg !117
  %3504 = fcmp ogt <4 x float> %3503, splat (float -1.270000e+02), !dbg !117
  %3505 = fcmp uno <4 x float> %3503, zeroinitializer, !dbg !119
  %3506 = or <4 x i1> %3504, %3505, !dbg !120
  %3507 = select <4 x i1> %3506, <4 x float> %3503, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3508 = fcmp olt <4 x float> %3507, splat (float 1.270000e+02), !dbg !122
  %3509 = fcmp uno <4 x float> %3507, zeroinitializer, !dbg !124
  %3510 = or <4 x i1> %3508, %3509, !dbg !125
  %3511 = fptosi <4 x float> %3507 to <4 x i8>, !dbg !126
  %3512 = select <4 x i1> %3510, <4 x i8> %3511, <4 x i8> splat (i8 127), !dbg !127
  %3513 = insertelement <4 x float> poison, float %3377, i64 0, !dbg !117
  %3514 = insertelement <4 x float> %3513, float %3378, i64 1, !dbg !117
  %3515 = insertelement <4 x float> %3514, float %3379, i64 2, !dbg !117
  %3516 = insertelement <4 x float> %3515, float %3380, i64 3, !dbg !117
  %3517 = fcmp ogt <4 x float> %3516, splat (float -1.270000e+02), !dbg !117
  %3518 = fcmp uno <4 x float> %3516, zeroinitializer, !dbg !119
  %3519 = or <4 x i1> %3517, %3518, !dbg !120
  %3520 = select <4 x i1> %3519, <4 x float> %3516, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3521 = fcmp olt <4 x float> %3520, splat (float 1.270000e+02), !dbg !122
  %3522 = fcmp uno <4 x float> %3520, zeroinitializer, !dbg !124
  %3523 = or <4 x i1> %3521, %3522, !dbg !125
  %3524 = fptosi <4 x float> %3520 to <4 x i8>, !dbg !126
  %3525 = select <4 x i1> %3523, <4 x i8> %3524, <4 x i8> splat (i8 127), !dbg !127
  %3526 = insertelement <4 x float> poison, float %3381, i64 0, !dbg !117
  %3527 = insertelement <4 x float> %3526, float %3382, i64 1, !dbg !117
  %3528 = insertelement <4 x float> %3527, float %3383, i64 2, !dbg !117
  %3529 = insertelement <4 x float> %3528, float %3384, i64 3, !dbg !117
  %3530 = fcmp ogt <4 x float> %3529, splat (float -1.270000e+02), !dbg !117
  %3531 = fcmp uno <4 x float> %3529, zeroinitializer, !dbg !119
  %3532 = or <4 x i1> %3530, %3531, !dbg !120
  %3533 = select <4 x i1> %3532, <4 x float> %3529, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3534 = fcmp olt <4 x float> %3533, splat (float 1.270000e+02), !dbg !122
  %3535 = fcmp uno <4 x float> %3533, zeroinitializer, !dbg !124
  %3536 = or <4 x i1> %3534, %3535, !dbg !125
  %3537 = fptosi <4 x float> %3533 to <4 x i8>, !dbg !126
  %3538 = select <4 x i1> %3536, <4 x i8> %3537, <4 x i8> splat (i8 127), !dbg !127
  %3539 = insertelement <4 x float> poison, float %3385, i64 0, !dbg !117
  %3540 = insertelement <4 x float> %3539, float %3386, i64 1, !dbg !117
  %3541 = insertelement <4 x float> %3540, float %3387, i64 2, !dbg !117
  %3542 = insertelement <4 x float> %3541, float %3388, i64 3, !dbg !117
  %3543 = fcmp ogt <4 x float> %3542, splat (float -1.270000e+02), !dbg !117
  %3544 = fcmp uno <4 x float> %3542, zeroinitializer, !dbg !119
  %3545 = or <4 x i1> %3543, %3544, !dbg !120
  %3546 = select <4 x i1> %3545, <4 x float> %3542, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3547 = fcmp olt <4 x float> %3546, splat (float 1.270000e+02), !dbg !122
  %3548 = fcmp uno <4 x float> %3546, zeroinitializer, !dbg !124
  %3549 = or <4 x i1> %3547, %3548, !dbg !125
  %3550 = fptosi <4 x float> %3546 to <4 x i8>, !dbg !126
  %3551 = select <4 x i1> %3549, <4 x i8> %3550, <4 x i8> splat (i8 127), !dbg !127
  %3552 = insertelement <4 x float> poison, float %3389, i64 0, !dbg !117
  %3553 = insertelement <4 x float> %3552, float %3390, i64 1, !dbg !117
  %3554 = insertelement <4 x float> %3553, float %3391, i64 2, !dbg !117
  %3555 = insertelement <4 x float> %3554, float %3392, i64 3, !dbg !117
  %3556 = fcmp ogt <4 x float> %3555, splat (float -1.270000e+02), !dbg !117
  %3557 = fcmp uno <4 x float> %3555, zeroinitializer, !dbg !119
  %3558 = or <4 x i1> %3556, %3557, !dbg !120
  %3559 = select <4 x i1> %3558, <4 x float> %3555, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3560 = fcmp olt <4 x float> %3559, splat (float 1.270000e+02), !dbg !122
  %3561 = fcmp uno <4 x float> %3559, zeroinitializer, !dbg !124
  %3562 = or <4 x i1> %3560, %3561, !dbg !125
  %3563 = fptosi <4 x float> %3559 to <4 x i8>, !dbg !126
  %3564 = select <4 x i1> %3562, <4 x i8> %3563, <4 x i8> splat (i8 127), !dbg !127
  %3565 = insertelement <4 x float> poison, float %3393, i64 0, !dbg !117
  %3566 = insertelement <4 x float> %3565, float %3394, i64 1, !dbg !117
  %3567 = insertelement <4 x float> %3566, float %3395, i64 2, !dbg !117
  %3568 = insertelement <4 x float> %3567, float %3396, i64 3, !dbg !117
  %3569 = fcmp ogt <4 x float> %3568, splat (float -1.270000e+02), !dbg !117
  %3570 = fcmp uno <4 x float> %3568, zeroinitializer, !dbg !119
  %3571 = or <4 x i1> %3569, %3570, !dbg !120
  %3572 = select <4 x i1> %3571, <4 x float> %3568, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3573 = fcmp olt <4 x float> %3572, splat (float 1.270000e+02), !dbg !122
  %3574 = fcmp uno <4 x float> %3572, zeroinitializer, !dbg !124
  %3575 = or <4 x i1> %3573, %3574, !dbg !125
  %3576 = fptosi <4 x float> %3572 to <4 x i8>, !dbg !126
  %3577 = select <4 x i1> %3575, <4 x i8> %3576, <4 x i8> splat (i8 127), !dbg !127
  %3578 = insertelement <4 x float> poison, float %3397, i64 0, !dbg !117
  %3579 = insertelement <4 x float> %3578, float %3398, i64 1, !dbg !117
  %3580 = insertelement <4 x float> %3579, float %3399, i64 2, !dbg !117
  %3581 = insertelement <4 x float> %3580, float %3400, i64 3, !dbg !117
  %3582 = fcmp ogt <4 x float> %3581, splat (float -1.270000e+02), !dbg !117
  %3583 = fcmp uno <4 x float> %3581, zeroinitializer, !dbg !119
  %3584 = or <4 x i1> %3582, %3583, !dbg !120
  %3585 = select <4 x i1> %3584, <4 x float> %3581, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3586 = fcmp olt <4 x float> %3585, splat (float 1.270000e+02), !dbg !122
  %3587 = fcmp uno <4 x float> %3585, zeroinitializer, !dbg !124
  %3588 = or <4 x i1> %3586, %3587, !dbg !125
  %3589 = fptosi <4 x float> %3585 to <4 x i8>, !dbg !126
  %3590 = select <4 x i1> %3588, <4 x i8> %3589, <4 x i8> splat (i8 127), !dbg !127
  %3591 = insertelement <4 x float> poison, float %3401, i64 0, !dbg !117
  %3592 = insertelement <4 x float> %3591, float %3402, i64 1, !dbg !117
  %3593 = insertelement <4 x float> %3592, float %3403, i64 2, !dbg !117
  %3594 = insertelement <4 x float> %3593, float %3404, i64 3, !dbg !117
  %3595 = fcmp ogt <4 x float> %3594, splat (float -1.270000e+02), !dbg !117
  %3596 = fcmp uno <4 x float> %3594, zeroinitializer, !dbg !119
  %3597 = or <4 x i1> %3595, %3596, !dbg !120
  %3598 = select <4 x i1> %3597, <4 x float> %3594, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3599 = fcmp olt <4 x float> %3598, splat (float 1.270000e+02), !dbg !122
  %3600 = fcmp uno <4 x float> %3598, zeroinitializer, !dbg !124
  %3601 = or <4 x i1> %3599, %3600, !dbg !125
  %3602 = fptosi <4 x float> %3598 to <4 x i8>, !dbg !126
  %3603 = select <4 x i1> %3601, <4 x i8> %3602, <4 x i8> splat (i8 127), !dbg !127
  %3604 = insertelement <4 x float> poison, float %3405, i64 0, !dbg !117
  %3605 = insertelement <4 x float> %3604, float %3406, i64 1, !dbg !117
  %3606 = insertelement <4 x float> %3605, float %3407, i64 2, !dbg !117
  %3607 = insertelement <4 x float> %3606, float %3408, i64 3, !dbg !117
  %3608 = fcmp ogt <4 x float> %3607, splat (float -1.270000e+02), !dbg !117
  %3609 = fcmp uno <4 x float> %3607, zeroinitializer, !dbg !119
  %3610 = or <4 x i1> %3608, %3609, !dbg !120
  %3611 = select <4 x i1> %3610, <4 x float> %3607, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3612 = fcmp olt <4 x float> %3611, splat (float 1.270000e+02), !dbg !122
  %3613 = fcmp uno <4 x float> %3611, zeroinitializer, !dbg !124
  %3614 = or <4 x i1> %3612, %3613, !dbg !125
  %3615 = fptosi <4 x float> %3611 to <4 x i8>, !dbg !126
  %3616 = select <4 x i1> %3614, <4 x i8> %3615, <4 x i8> splat (i8 127), !dbg !127
  %3617 = getelementptr i8, ptr addrspace(1) %12, i64 %52, !dbg !128
  %3618 = getelementptr i8, ptr addrspace(1) %12, i64 %56, !dbg !128
  %3619 = getelementptr i8, ptr addrspace(1) %12, i64 %60, !dbg !128
  %3620 = getelementptr i8, ptr addrspace(1) %12, i64 %64, !dbg !128
  %3621 = bitcast <4 x i8> %3421 to i32, !dbg !129
  %3622 = bitcast <4 x i8> %3434 to i32, !dbg !129
  %3623 = bitcast <4 x i8> %3447 to i32, !dbg !129
  %3624 = bitcast <4 x i8> %3460 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3621, i32 %3622, i32 %3623, i32 %3624, ptr addrspace(1) %3617, i1 %24) #5, !dbg !129
  %3625 = bitcast <4 x i8> %3473 to i32, !dbg !129
  %3626 = bitcast <4 x i8> %3486 to i32, !dbg !129
  %3627 = bitcast <4 x i8> %3499 to i32, !dbg !129
  %3628 = bitcast <4 x i8> %3512 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3625, i32 %3626, i32 %3627, i32 %3628, ptr addrspace(1) %3618, i1 %68) #5, !dbg !129
  %3629 = bitcast <4 x i8> %3525 to i32, !dbg !129
  %3630 = bitcast <4 x i8> %3538 to i32, !dbg !129
  %3631 = bitcast <4 x i8> %3551 to i32, !dbg !129
  %3632 = bitcast <4 x i8> %3564 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3629, i32 %3630, i32 %3631, i32 %3632, ptr addrspace(1) %3619, i1 %25) #5, !dbg !129
  %3633 = bitcast <4 x i8> %3577 to i32, !dbg !129
  %3634 = bitcast <4 x i8> %3590 to i32, !dbg !129
  %3635 = bitcast <4 x i8> %3603 to i32, !dbg !129
  %3636 = bitcast <4 x i8> %3616 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3633, i32 %3634, i32 %3635, i32 %3636, ptr addrspace(1) %3620, i1 %69) #5, !dbg !129
  %3637 = getelementptr i8, ptr addrspace(1) %13, i64 %52, !dbg !130
  %3638 = getelementptr i8, ptr addrspace(1) %13, i64 %56, !dbg !130
  %3639 = getelementptr i8, ptr addrspace(1) %13, i64 %60, !dbg !130
  %3640 = getelementptr i8, ptr addrspace(1) %13, i64 %64, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3621, i32 %3622, i32 %3623, i32 %3624, ptr addrspace(1) %3637, i1 %24) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3625, i32 %3626, i32 %3627, i32 %3628, ptr addrspace(1) %3638, i1 %68) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3629, i32 %3630, i32 %3631, i32 %3632, ptr addrspace(1) %3639, i1 %25) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3633, i32 %3634, i32 %3635, i32 %3636, ptr addrspace(1) %3640, i1 %69) #5, !dbg !131
  %3641 = getelementptr i8, ptr addrspace(1) %14, i64 %52, !dbg !132
  %3642 = getelementptr i8, ptr addrspace(1) %14, i64 %56, !dbg !132
  %3643 = getelementptr i8, ptr addrspace(1) %14, i64 %60, !dbg !132
  %3644 = getelementptr i8, ptr addrspace(1) %14, i64 %64, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3621, i32 %3622, i32 %3623, i32 %3624, ptr addrspace(1) %3641, i1 %24) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3625, i32 %3626, i32 %3627, i32 %3628, ptr addrspace(1) %3642, i1 %68) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3629, i32 %3630, i32 %3631, i32 %3632, ptr addrspace(1) %3643, i1 %25) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3633, i32 %3634, i32 %3635, i32 %3636, ptr addrspace(1) %3644, i1 %69) #5, !dbg !133
  %3645 = getelementptr i8, ptr addrspace(1) %15, i64 %52, !dbg !134
  %3646 = getelementptr i8, ptr addrspace(1) %15, i64 %56, !dbg !134
  %3647 = getelementptr i8, ptr addrspace(1) %15, i64 %60, !dbg !134
  %3648 = getelementptr i8, ptr addrspace(1) %15, i64 %64, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3621, i32 %3622, i32 %3623, i32 %3624, ptr addrspace(1) %3645, i1 %24) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3625, i32 %3626, i32 %3627, i32 %3628, ptr addrspace(1) %3646, i1 %68) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3629, i32 %3630, i32 %3631, i32 %3632, ptr addrspace(1) %3647, i1 %25) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3633, i32 %3634, i32 %3635, i32 %3636, ptr addrspace(1) %3648, i1 %69) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
