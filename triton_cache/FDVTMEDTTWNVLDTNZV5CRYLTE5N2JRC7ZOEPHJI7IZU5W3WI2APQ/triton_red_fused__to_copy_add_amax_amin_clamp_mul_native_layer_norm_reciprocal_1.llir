; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = or disjoint i32 %17, 1, !dbg !12
  %21 = icmp slt i32 %17, 3600, !dbg !13
  %22 = icmp slt i32 %20, 3600, !dbg !13
  %23 = lshr i32 %18, 5, !dbg !14
  %24 = shl i32 %18, 3, !dbg !14
  %25 = and i32 %24, 1016, !dbg !14
  %26 = or disjoint i32 %25, 4, !dbg !14
  %27 = or disjoint i32 %25, 1024, !dbg !14
  %28 = or disjoint i32 %25, 1028, !dbg !14
  %29 = or disjoint i32 %25, 2048, !dbg !14
  %30 = or disjoint i32 %25, 2052, !dbg !14
  %31 = or disjoint i32 %25, 3072, !dbg !14
  %32 = or disjoint i32 %25, 3076, !dbg !14
  %33 = shl i32 %18, 4, !dbg !14
  %34 = and i32 %33, 2032, !dbg !14
  %35 = or disjoint i32 %34, 8, !dbg !14
  %36 = or disjoint i32 %34, 2048, !dbg !14
  %37 = or disjoint i32 %34, 2056, !dbg !14
  %38 = icmp samesign ult i32 %36, 3072, !dbg !15
  %39 = mul i32 %16, 6144, !dbg !16
  %40 = mul i32 %20, 3072, !dbg !16
  %41 = or disjoint i32 %34, %39, !dbg !17
  %42 = or disjoint i32 %35, %39, !dbg !17
  %43 = add i32 %36, %39, !dbg !17
  %44 = add i32 %37, %39, !dbg !17
  %45 = add i32 %40, %34, !dbg !17
  %46 = add i32 %35, %40, !dbg !17
  %47 = add i32 %36, %40, !dbg !17
  %48 = add i32 %37, %40, !dbg !17
  %49 = sext i32 %41 to i64, !dbg !18
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %42 to i64, !dbg !18
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = sext i32 %43 to i64, !dbg !18
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = sext i32 %44 to i64, !dbg !18
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %55, !dbg !18
  %57 = sext i32 %45 to i64, !dbg !18
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = sext i32 %46 to i64, !dbg !18
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !18
  %61 = sext i32 %47 to i64, !dbg !18
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !18
  %63 = sext i32 %48 to i64, !dbg !18
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !18
  %65 = and i1 %21, %38, !dbg !19
  %66 = and i1 %22, %38, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %50, i1 %21) #5, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !20
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !20
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !20
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !20
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !20
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !20
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !20
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !20
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !20
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !20
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !20
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !20
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !20
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %21) #5, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !20
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !20
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !20
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !20
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !20
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !20
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !20
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !20
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !20
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !20
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !20
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !20
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !20
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %65) #5, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !20
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !20
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !20
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !20
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !20
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !20
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !20
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !20
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !20
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !20
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !20
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !20
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !20
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !20
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !20
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %65) #5, !dbg !20
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !20
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !20
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !20
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !20
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !20
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !20
  %125 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !20
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !20
  %127 = extractelement <2 x bfloat> %120, i64 0, !dbg !20
  %128 = extractelement <2 x bfloat> %120, i64 1, !dbg !20
  %129 = extractelement <2 x bfloat> %122, i64 0, !dbg !20
  %130 = extractelement <2 x bfloat> %122, i64 1, !dbg !20
  %131 = extractelement <2 x bfloat> %124, i64 0, !dbg !20
  %132 = extractelement <2 x bfloat> %124, i64 1, !dbg !20
  %133 = extractelement <2 x bfloat> %126, i64 0, !dbg !20
  %134 = extractelement <2 x bfloat> %126, i64 1, !dbg !20
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %22) #5, !dbg !20
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !20
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !20
  %138 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !20
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !20
  %140 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !20
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !20
  %142 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !20
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !20
  %144 = extractelement <2 x bfloat> %137, i64 0, !dbg !20
  %145 = extractelement <2 x bfloat> %137, i64 1, !dbg !20
  %146 = extractelement <2 x bfloat> %139, i64 0, !dbg !20
  %147 = extractelement <2 x bfloat> %139, i64 1, !dbg !20
  %148 = extractelement <2 x bfloat> %141, i64 0, !dbg !20
  %149 = extractelement <2 x bfloat> %141, i64 1, !dbg !20
  %150 = extractelement <2 x bfloat> %143, i64 0, !dbg !20
  %151 = extractelement <2 x bfloat> %143, i64 1, !dbg !20
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %22) #5, !dbg !20
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !20
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !20
  %155 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !20
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !20
  %157 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !20
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !20
  %159 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !20
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !20
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !20
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !20
  %163 = extractelement <2 x bfloat> %156, i64 0, !dbg !20
  %164 = extractelement <2 x bfloat> %156, i64 1, !dbg !20
  %165 = extractelement <2 x bfloat> %158, i64 0, !dbg !20
  %166 = extractelement <2 x bfloat> %158, i64 1, !dbg !20
  %167 = extractelement <2 x bfloat> %160, i64 0, !dbg !20
  %168 = extractelement <2 x bfloat> %160, i64 1, !dbg !20
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %66) #5, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !20
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !20
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !20
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !20
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !20
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !20
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !20
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !20
  %180 = extractelement <2 x bfloat> %173, i64 0, !dbg !20
  %181 = extractelement <2 x bfloat> %173, i64 1, !dbg !20
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !20
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !20
  %184 = extractelement <2 x bfloat> %177, i64 0, !dbg !20
  %185 = extractelement <2 x bfloat> %177, i64 1, !dbg !20
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %66) #5, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !20
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !20
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !20
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !20
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !20
  %195 = extractelement <2 x bfloat> %188, i64 0, !dbg !20
  %196 = extractelement <2 x bfloat> %188, i64 1, !dbg !20
  %197 = extractelement <2 x bfloat> %190, i64 0, !dbg !20
  %198 = extractelement <2 x bfloat> %190, i64 1, !dbg !20
  %199 = extractelement <2 x bfloat> %192, i64 0, !dbg !20
  %200 = extractelement <2 x bfloat> %192, i64 1, !dbg !20
  %201 = extractelement <2 x bfloat> %194, i64 0, !dbg !20
  %202 = extractelement <2 x bfloat> %194, i64 1, !dbg !20
  %203 = fpext bfloat %76 to float, !dbg !21
  %204 = fpext bfloat %77 to float, !dbg !21
  %205 = fpext bfloat %78 to float, !dbg !21
  %206 = fpext bfloat %79 to float, !dbg !21
  %207 = fpext bfloat %80 to float, !dbg !21
  %208 = fpext bfloat %81 to float, !dbg !21
  %209 = fpext bfloat %82 to float, !dbg !21
  %210 = fpext bfloat %83 to float, !dbg !21
  %211 = fpext bfloat %93 to float, !dbg !21
  %212 = fpext bfloat %94 to float, !dbg !21
  %213 = fpext bfloat %95 to float, !dbg !21
  %214 = fpext bfloat %96 to float, !dbg !21
  %215 = fpext bfloat %97 to float, !dbg !21
  %216 = fpext bfloat %98 to float, !dbg !21
  %217 = fpext bfloat %99 to float, !dbg !21
  %218 = fpext bfloat %100 to float, !dbg !21
  %219 = fpext bfloat %110 to float, !dbg !21
  %220 = fpext bfloat %111 to float, !dbg !21
  %221 = fpext bfloat %112 to float, !dbg !21
  %222 = fpext bfloat %113 to float, !dbg !21
  %223 = fpext bfloat %114 to float, !dbg !21
  %224 = fpext bfloat %115 to float, !dbg !21
  %225 = fpext bfloat %116 to float, !dbg !21
  %226 = fpext bfloat %117 to float, !dbg !21
  %227 = fpext bfloat %127 to float, !dbg !21
  %228 = fpext bfloat %128 to float, !dbg !21
  %229 = fpext bfloat %129 to float, !dbg !21
  %230 = fpext bfloat %130 to float, !dbg !21
  %231 = fpext bfloat %131 to float, !dbg !21
  %232 = fpext bfloat %132 to float, !dbg !21
  %233 = fpext bfloat %133 to float, !dbg !21
  %234 = fpext bfloat %134 to float, !dbg !21
  %235 = fpext bfloat %144 to float, !dbg !21
  %236 = fpext bfloat %145 to float, !dbg !21
  %237 = fpext bfloat %146 to float, !dbg !21
  %238 = fpext bfloat %147 to float, !dbg !21
  %239 = fpext bfloat %148 to float, !dbg !21
  %240 = fpext bfloat %149 to float, !dbg !21
  %241 = fpext bfloat %150 to float, !dbg !21
  %242 = fpext bfloat %151 to float, !dbg !21
  %243 = fpext bfloat %161 to float, !dbg !21
  %244 = fpext bfloat %162 to float, !dbg !21
  %245 = fpext bfloat %163 to float, !dbg !21
  %246 = fpext bfloat %164 to float, !dbg !21
  %247 = fpext bfloat %165 to float, !dbg !21
  %248 = fpext bfloat %166 to float, !dbg !21
  %249 = fpext bfloat %167 to float, !dbg !21
  %250 = fpext bfloat %168 to float, !dbg !21
  %251 = fpext bfloat %178 to float, !dbg !21
  %252 = fpext bfloat %179 to float, !dbg !21
  %253 = fpext bfloat %180 to float, !dbg !21
  %254 = fpext bfloat %181 to float, !dbg !21
  %255 = fpext bfloat %182 to float, !dbg !21
  %256 = fpext bfloat %183 to float, !dbg !21
  %257 = fpext bfloat %184 to float, !dbg !21
  %258 = fpext bfloat %185 to float, !dbg !21
  %259 = fpext bfloat %195 to float, !dbg !21
  %260 = fpext bfloat %196 to float, !dbg !21
  %261 = fpext bfloat %197 to float, !dbg !21
  %262 = fpext bfloat %198 to float, !dbg !21
  %263 = fpext bfloat %199 to float, !dbg !21
  %264 = fpext bfloat %200 to float, !dbg !21
  %265 = fpext bfloat %201 to float, !dbg !21
  %266 = fpext bfloat %202 to float, !dbg !21
  %267 = select i1 %21, float %203, float 0.000000e+00, !dbg !22
  %268 = select i1 %21, float %204, float 0.000000e+00, !dbg !22
  %269 = select i1 %21, float %205, float 0.000000e+00, !dbg !22
  %270 = select i1 %21, float %206, float 0.000000e+00, !dbg !22
  %271 = select i1 %21, float %207, float 0.000000e+00, !dbg !22
  %272 = select i1 %21, float %208, float 0.000000e+00, !dbg !22
  %273 = select i1 %21, float %209, float 0.000000e+00, !dbg !22
  %274 = select i1 %21, float %210, float 0.000000e+00, !dbg !22
  %275 = select i1 %21, float %211, float 0.000000e+00, !dbg !22
  %276 = select i1 %21, float %212, float 0.000000e+00, !dbg !22
  %277 = select i1 %21, float %213, float 0.000000e+00, !dbg !22
  %278 = select i1 %21, float %214, float 0.000000e+00, !dbg !22
  %279 = select i1 %21, float %215, float 0.000000e+00, !dbg !22
  %280 = select i1 %21, float %216, float 0.000000e+00, !dbg !22
  %281 = select i1 %21, float %217, float 0.000000e+00, !dbg !22
  %282 = select i1 %21, float %218, float 0.000000e+00, !dbg !22
  %283 = select i1 %65, float %219, float 0.000000e+00, !dbg !22
  %284 = select i1 %65, float %220, float 0.000000e+00, !dbg !22
  %285 = select i1 %65, float %221, float 0.000000e+00, !dbg !22
  %286 = select i1 %65, float %222, float 0.000000e+00, !dbg !22
  %287 = select i1 %65, float %223, float 0.000000e+00, !dbg !22
  %288 = select i1 %65, float %224, float 0.000000e+00, !dbg !22
  %289 = select i1 %65, float %225, float 0.000000e+00, !dbg !22
  %290 = select i1 %65, float %226, float 0.000000e+00, !dbg !22
  %291 = select i1 %65, float %227, float 0.000000e+00, !dbg !22
  %292 = select i1 %65, float %228, float 0.000000e+00, !dbg !22
  %293 = select i1 %65, float %229, float 0.000000e+00, !dbg !22
  %294 = select i1 %65, float %230, float 0.000000e+00, !dbg !22
  %295 = select i1 %65, float %231, float 0.000000e+00, !dbg !22
  %296 = select i1 %65, float %232, float 0.000000e+00, !dbg !22
  %297 = select i1 %65, float %233, float 0.000000e+00, !dbg !22
  %298 = select i1 %65, float %234, float 0.000000e+00, !dbg !22
  %299 = select i1 %22, float %235, float 0.000000e+00, !dbg !22
  %300 = select i1 %22, float %236, float 0.000000e+00, !dbg !22
  %301 = select i1 %22, float %237, float 0.000000e+00, !dbg !22
  %302 = select i1 %22, float %238, float 0.000000e+00, !dbg !22
  %303 = select i1 %22, float %239, float 0.000000e+00, !dbg !22
  %304 = select i1 %22, float %240, float 0.000000e+00, !dbg !22
  %305 = select i1 %22, float %241, float 0.000000e+00, !dbg !22
  %306 = select i1 %22, float %242, float 0.000000e+00, !dbg !22
  %307 = select i1 %22, float %243, float 0.000000e+00, !dbg !22
  %308 = select i1 %22, float %244, float 0.000000e+00, !dbg !22
  %309 = select i1 %22, float %245, float 0.000000e+00, !dbg !22
  %310 = select i1 %22, float %246, float 0.000000e+00, !dbg !22
  %311 = select i1 %22, float %247, float 0.000000e+00, !dbg !22
  %312 = select i1 %22, float %248, float 0.000000e+00, !dbg !22
  %313 = select i1 %22, float %249, float 0.000000e+00, !dbg !22
  %314 = select i1 %22, float %250, float 0.000000e+00, !dbg !22
  %315 = select i1 %66, float %251, float 0.000000e+00, !dbg !22
  %316 = select i1 %66, float %252, float 0.000000e+00, !dbg !22
  %317 = select i1 %66, float %253, float 0.000000e+00, !dbg !22
  %318 = select i1 %66, float %254, float 0.000000e+00, !dbg !22
  %319 = select i1 %66, float %255, float 0.000000e+00, !dbg !22
  %320 = select i1 %66, float %256, float 0.000000e+00, !dbg !22
  %321 = select i1 %66, float %257, float 0.000000e+00, !dbg !22
  %322 = select i1 %66, float %258, float 0.000000e+00, !dbg !22
  %323 = select i1 %66, float %259, float 0.000000e+00, !dbg !22
  %324 = select i1 %66, float %260, float 0.000000e+00, !dbg !22
  %325 = select i1 %66, float %261, float 0.000000e+00, !dbg !22
  %326 = select i1 %66, float %262, float 0.000000e+00, !dbg !22
  %327 = select i1 %66, float %263, float 0.000000e+00, !dbg !22
  %328 = select i1 %66, float %264, float 0.000000e+00, !dbg !22
  %329 = select i1 %66, float %265, float 0.000000e+00, !dbg !22
  %330 = select i1 %66, float %266, float 0.000000e+00, !dbg !22
  %331 = select i1 %21, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %332 = select i1 %65, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %333 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %334 = select i1 %66, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %335 = fsub float %268, %267, !dbg !24
  %336 = select i1 %21, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !30
  %338 = tail call float @llvm.nvvm.div.full(float %331, float %336), !dbg !31
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !32
  %340 = fmul float %335, %339, !dbg !33
  %341 = fadd float %267, %340, !dbg !34
  %342 = fmul float %335, %335, !dbg !35
  %343 = fmul float %331, %342, !dbg !36
  %344 = fmul float %343, %339, !dbg !37
  %345 = fadd float %344, 0.000000e+00, !dbg !38
  %346 = fsub float %269, %341, !dbg !24
  %347 = select i1 %21, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !30
  %349 = tail call float @llvm.nvvm.div.full(float %331, float %347), !dbg !31
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !32
  %351 = fmul float %350, %346, !dbg !33
  %352 = fadd float %341, %351, !dbg !34
  %353 = fmul float %346, %346, !dbg !35
  %354 = fmul float %336, %353, !dbg !36
  %355 = fmul float %350, %354, !dbg !37
  %356 = fadd float %345, %355, !dbg !38
  %357 = fsub float %270, %352, !dbg !24
  %358 = select i1 %21, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !30
  %360 = tail call float @llvm.nvvm.div.full(float %331, float %358), !dbg !31
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !32
  %362 = fmul float %361, %357, !dbg !33
  %363 = fadd float %352, %362, !dbg !34
  %364 = fmul float %357, %357, !dbg !35
  %365 = fmul float %347, %364, !dbg !36
  %366 = fmul float %361, %365, !dbg !37
  %367 = fadd float %356, %366, !dbg !38
  %368 = fsub float %271, %363, !dbg !24
  %369 = select i1 %21, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %370 = fcmp oeq float %369, 0.000000e+00, !dbg !30
  %371 = tail call float @llvm.nvvm.div.full(float %331, float %369), !dbg !31
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !32
  %373 = fmul float %372, %368, !dbg !33
  %374 = fadd float %363, %373, !dbg !34
  %375 = fmul float %368, %368, !dbg !35
  %376 = fmul float %358, %375, !dbg !36
  %377 = fmul float %372, %376, !dbg !37
  %378 = fadd float %367, %377, !dbg !38
  %379 = fsub float %272, %374, !dbg !24
  %380 = select i1 %21, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !30
  %382 = tail call float @llvm.nvvm.div.full(float %331, float %380), !dbg !31
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !32
  %384 = fmul float %383, %379, !dbg !33
  %385 = fadd float %374, %384, !dbg !34
  %386 = fmul float %379, %379, !dbg !35
  %387 = fmul float %369, %386, !dbg !36
  %388 = fmul float %383, %387, !dbg !37
  %389 = fadd float %378, %388, !dbg !38
  %390 = fsub float %273, %385, !dbg !24
  %391 = select i1 %21, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !30
  %393 = tail call float @llvm.nvvm.div.full(float %331, float %391), !dbg !31
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !32
  %395 = fmul float %394, %390, !dbg !33
  %396 = fadd float %385, %395, !dbg !34
  %397 = fmul float %390, %390, !dbg !35
  %398 = fmul float %380, %397, !dbg !36
  %399 = fmul float %394, %398, !dbg !37
  %400 = fadd float %389, %399, !dbg !38
  %401 = fsub float %274, %396, !dbg !24
  %402 = select i1 %21, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !30
  %404 = tail call float @llvm.nvvm.div.full(float %331, float %402), !dbg !31
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !32
  %406 = fmul float %405, %401, !dbg !33
  %407 = fadd float %396, %406, !dbg !34
  %408 = fmul float %401, %401, !dbg !35
  %409 = fmul float %391, %408, !dbg !36
  %410 = fmul float %405, %409, !dbg !37
  %411 = fadd float %400, %410, !dbg !38
  %412 = fsub float %275, %407, !dbg !24
  %413 = select i1 %21, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %414 = fcmp oeq float %413, 0.000000e+00, !dbg !30
  %415 = tail call float @llvm.nvvm.div.full(float %331, float %413), !dbg !31
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !32
  %417 = fmul float %416, %412, !dbg !33
  %418 = fadd float %407, %417, !dbg !34
  %419 = fadd float %411, 0.000000e+00, !dbg !39
  %420 = fmul float %412, %412, !dbg !35
  %421 = fmul float %402, %420, !dbg !36
  %422 = fmul float %416, %421, !dbg !37
  %423 = fadd float %419, %422, !dbg !38
  %424 = fsub float %276, %418, !dbg !24
  %425 = select i1 %21, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %426 = fcmp oeq float %425, 0.000000e+00, !dbg !30
  %427 = tail call float @llvm.nvvm.div.full(float %331, float %425), !dbg !31
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !32
  %429 = fmul float %428, %424, !dbg !33
  %430 = fadd float %418, %429, !dbg !34
  %431 = fmul float %424, %424, !dbg !35
  %432 = fmul float %413, %431, !dbg !36
  %433 = fmul float %428, %432, !dbg !37
  %434 = fadd float %423, %433, !dbg !38
  %435 = fsub float %277, %430, !dbg !24
  %436 = select i1 %21, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !30
  %438 = tail call float @llvm.nvvm.div.full(float %331, float %436), !dbg !31
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !32
  %440 = fmul float %439, %435, !dbg !33
  %441 = fadd float %430, %440, !dbg !34
  %442 = fmul float %435, %435, !dbg !35
  %443 = fmul float %425, %442, !dbg !36
  %444 = fmul float %439, %443, !dbg !37
  %445 = fadd float %434, %444, !dbg !38
  %446 = fsub float %278, %441, !dbg !24
  %447 = select i1 %21, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !30
  %449 = tail call float @llvm.nvvm.div.full(float %331, float %447), !dbg !31
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !32
  %451 = fmul float %450, %446, !dbg !33
  %452 = fadd float %441, %451, !dbg !34
  %453 = fmul float %446, %446, !dbg !35
  %454 = fmul float %436, %453, !dbg !36
  %455 = fmul float %450, %454, !dbg !37
  %456 = fadd float %445, %455, !dbg !38
  %457 = fsub float %279, %452, !dbg !24
  %458 = select i1 %21, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !30
  %460 = tail call float @llvm.nvvm.div.full(float %331, float %458), !dbg !31
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !32
  %462 = fmul float %461, %457, !dbg !33
  %463 = fadd float %452, %462, !dbg !34
  %464 = fmul float %457, %457, !dbg !35
  %465 = fmul float %447, %464, !dbg !36
  %466 = fmul float %461, %465, !dbg !37
  %467 = fadd float %456, %466, !dbg !38
  %468 = fsub float %280, %463, !dbg !24
  %469 = select i1 %21, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %470 = fcmp oeq float %469, 0.000000e+00, !dbg !30
  %471 = tail call float @llvm.nvvm.div.full(float %331, float %469), !dbg !31
  %472 = select i1 %470, float 0.000000e+00, float %471, !dbg !32
  %473 = fmul float %472, %468, !dbg !33
  %474 = fadd float %463, %473, !dbg !34
  %475 = fmul float %468, %468, !dbg !35
  %476 = fmul float %458, %475, !dbg !36
  %477 = fmul float %472, %476, !dbg !37
  %478 = fadd float %467, %477, !dbg !38
  %479 = fsub float %281, %474, !dbg !24
  %480 = select i1 %21, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !30
  %482 = tail call float @llvm.nvvm.div.full(float %331, float %480), !dbg !31
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !32
  %484 = fmul float %483, %479, !dbg !33
  %485 = fadd float %474, %484, !dbg !34
  %486 = fadd float %478, 0.000000e+00, !dbg !39
  %487 = fmul float %479, %479, !dbg !35
  %488 = fmul float %469, %487, !dbg !36
  %489 = fmul float %483, %488, !dbg !37
  %490 = fadd float %486, %489, !dbg !38
  %491 = fsub float %282, %485, !dbg !24
  %492 = select i1 %21, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %493 = fcmp oeq float %492, 0.000000e+00, !dbg !30
  %494 = tail call float @llvm.nvvm.div.full(float %331, float %492), !dbg !31
  %495 = select i1 %493, float 0.000000e+00, float %494, !dbg !32
  %496 = fmul float %495, %491, !dbg !33
  %497 = fadd float %485, %496, !dbg !34
  %498 = fmul float %491, %491, !dbg !35
  %499 = fmul float %480, %498, !dbg !36
  %500 = fmul float %495, %499, !dbg !37
  %501 = fadd float %490, %500, !dbg !38
  %502 = fsub float %283, %497, !dbg !24
  %503 = fadd float %492, %332, !dbg !29
  %504 = fcmp oeq float %503, 0.000000e+00, !dbg !30
  %505 = tail call float @llvm.nvvm.div.full(float %332, float %503), !dbg !31
  %506 = select i1 %504, float 0.000000e+00, float %505, !dbg !32
  %507 = fmul float %506, %502, !dbg !33
  %508 = fadd float %497, %507, !dbg !34
  %509 = fmul float %502, %502, !dbg !35
  %510 = fmul float %492, %509, !dbg !36
  %511 = fmul float %506, %510, !dbg !37
  %512 = fadd float %501, %511, !dbg !38
  %513 = fsub float %284, %508, !dbg !24
  %514 = fadd float %332, %503, !dbg !29
  %515 = fcmp oeq float %514, 0.000000e+00, !dbg !30
  %516 = tail call float @llvm.nvvm.div.full(float %332, float %514), !dbg !31
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !32
  %518 = fmul float %517, %513, !dbg !33
  %519 = fadd float %508, %518, !dbg !34
  %520 = fmul float %513, %513, !dbg !35
  %521 = fmul float %503, %520, !dbg !36
  %522 = fmul float %517, %521, !dbg !37
  %523 = fadd float %512, %522, !dbg !38
  %524 = fsub float %285, %519, !dbg !24
  %525 = fadd float %332, %514, !dbg !29
  %526 = fcmp oeq float %525, 0.000000e+00, !dbg !30
  %527 = tail call float @llvm.nvvm.div.full(float %332, float %525), !dbg !31
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !32
  %529 = fmul float %528, %524, !dbg !33
  %530 = fadd float %519, %529, !dbg !34
  %531 = fmul float %524, %524, !dbg !35
  %532 = fmul float %514, %531, !dbg !36
  %533 = fmul float %528, %532, !dbg !37
  %534 = fadd float %523, %533, !dbg !38
  %535 = fsub float %286, %530, !dbg !24
  %536 = fadd float %332, %525, !dbg !29
  %537 = fcmp oeq float %536, 0.000000e+00, !dbg !30
  %538 = tail call float @llvm.nvvm.div.full(float %332, float %536), !dbg !31
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !32
  %540 = fmul float %539, %535, !dbg !33
  %541 = fadd float %530, %540, !dbg !34
  %542 = fmul float %535, %535, !dbg !35
  %543 = fmul float %525, %542, !dbg !36
  %544 = fmul float %539, %543, !dbg !37
  %545 = fadd float %534, %544, !dbg !38
  %546 = fsub float %287, %541, !dbg !24
  %547 = fadd float %332, %536, !dbg !29
  %548 = fcmp oeq float %547, 0.000000e+00, !dbg !30
  %549 = tail call float @llvm.nvvm.div.full(float %332, float %547), !dbg !31
  %550 = select i1 %548, float 0.000000e+00, float %549, !dbg !32
  %551 = fmul float %550, %546, !dbg !33
  %552 = fadd float %541, %551, !dbg !34
  %553 = fadd float %545, 0.000000e+00, !dbg !39
  %554 = fmul float %546, %546, !dbg !35
  %555 = fmul float %536, %554, !dbg !36
  %556 = fmul float %550, %555, !dbg !37
  %557 = fadd float %553, %556, !dbg !38
  %558 = fsub float %288, %552, !dbg !24
  %559 = fadd float %332, %547, !dbg !29
  %560 = fcmp oeq float %559, 0.000000e+00, !dbg !30
  %561 = tail call float @llvm.nvvm.div.full(float %332, float %559), !dbg !31
  %562 = select i1 %560, float 0.000000e+00, float %561, !dbg !32
  %563 = fmul float %562, %558, !dbg !33
  %564 = fadd float %552, %563, !dbg !34
  %565 = fmul float %558, %558, !dbg !35
  %566 = fmul float %547, %565, !dbg !36
  %567 = fmul float %562, %566, !dbg !37
  %568 = fadd float %557, %567, !dbg !38
  %569 = fsub float %289, %564, !dbg !24
  %570 = fadd float %332, %559, !dbg !29
  %571 = fcmp oeq float %570, 0.000000e+00, !dbg !30
  %572 = tail call float @llvm.nvvm.div.full(float %332, float %570), !dbg !31
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !32
  %574 = fmul float %573, %569, !dbg !33
  %575 = fadd float %564, %574, !dbg !34
  %576 = fmul float %569, %569, !dbg !35
  %577 = fmul float %559, %576, !dbg !36
  %578 = fmul float %573, %577, !dbg !37
  %579 = fadd float %568, %578, !dbg !38
  %580 = fsub float %290, %575, !dbg !24
  %581 = fadd float %332, %570, !dbg !29
  %582 = fcmp oeq float %581, 0.000000e+00, !dbg !30
  %583 = tail call float @llvm.nvvm.div.full(float %332, float %581), !dbg !31
  %584 = select i1 %582, float 0.000000e+00, float %583, !dbg !32
  %585 = fmul float %584, %580, !dbg !33
  %586 = fadd float %575, %585, !dbg !34
  %587 = fmul float %580, %580, !dbg !35
  %588 = fmul float %570, %587, !dbg !36
  %589 = fmul float %584, %588, !dbg !37
  %590 = fadd float %579, %589, !dbg !38
  %591 = fsub float %291, %586, !dbg !24
  %592 = fadd float %332, %581, !dbg !29
  %593 = fcmp oeq float %592, 0.000000e+00, !dbg !30
  %594 = tail call float @llvm.nvvm.div.full(float %332, float %592), !dbg !31
  %595 = select i1 %593, float 0.000000e+00, float %594, !dbg !32
  %596 = fmul float %595, %591, !dbg !33
  %597 = fadd float %586, %596, !dbg !34
  %598 = fmul float %591, %591, !dbg !35
  %599 = fmul float %581, %598, !dbg !36
  %600 = fmul float %595, %599, !dbg !37
  %601 = fadd float %590, %600, !dbg !38
  %602 = fsub float %292, %597, !dbg !24
  %603 = fadd float %332, %592, !dbg !29
  %604 = fcmp oeq float %603, 0.000000e+00, !dbg !30
  %605 = tail call float @llvm.nvvm.div.full(float %332, float %603), !dbg !31
  %606 = select i1 %604, float 0.000000e+00, float %605, !dbg !32
  %607 = fmul float %606, %602, !dbg !33
  %608 = fadd float %597, %607, !dbg !34
  %609 = fmul float %602, %602, !dbg !35
  %610 = fmul float %592, %609, !dbg !36
  %611 = fmul float %606, %610, !dbg !37
  %612 = fadd float %601, %611, !dbg !38
  %613 = fsub float %293, %608, !dbg !24
  %614 = fadd float %332, %603, !dbg !29
  %615 = fcmp oeq float %614, 0.000000e+00, !dbg !30
  %616 = tail call float @llvm.nvvm.div.full(float %332, float %614), !dbg !31
  %617 = select i1 %615, float 0.000000e+00, float %616, !dbg !32
  %618 = fmul float %617, %613, !dbg !33
  %619 = fadd float %608, %618, !dbg !34
  %620 = fadd float %612, 0.000000e+00, !dbg !39
  %621 = fmul float %613, %613, !dbg !35
  %622 = fmul float %603, %621, !dbg !36
  %623 = fmul float %617, %622, !dbg !37
  %624 = fadd float %620, %623, !dbg !38
  %625 = fsub float %294, %619, !dbg !24
  %626 = fadd float %332, %614, !dbg !29
  %627 = fcmp oeq float %626, 0.000000e+00, !dbg !30
  %628 = tail call float @llvm.nvvm.div.full(float %332, float %626), !dbg !31
  %629 = select i1 %627, float 0.000000e+00, float %628, !dbg !32
  %630 = fmul float %629, %625, !dbg !33
  %631 = fadd float %619, %630, !dbg !34
  %632 = fmul float %625, %625, !dbg !35
  %633 = fmul float %614, %632, !dbg !36
  %634 = fmul float %629, %633, !dbg !37
  %635 = fadd float %624, %634, !dbg !38
  %636 = fsub float %295, %631, !dbg !24
  %637 = fadd float %332, %626, !dbg !29
  %638 = fcmp oeq float %637, 0.000000e+00, !dbg !30
  %639 = tail call float @llvm.nvvm.div.full(float %332, float %637), !dbg !31
  %640 = select i1 %638, float 0.000000e+00, float %639, !dbg !32
  %641 = fmul float %640, %636, !dbg !33
  %642 = fadd float %631, %641, !dbg !34
  %643 = fmul float %636, %636, !dbg !35
  %644 = fmul float %626, %643, !dbg !36
  %645 = fmul float %640, %644, !dbg !37
  %646 = fadd float %635, %645, !dbg !38
  %647 = fsub float %296, %642, !dbg !24
  %648 = fmul float %647, %647, !dbg !35
  %649 = fmul float %637, %648, !dbg !36
  %650 = fadd float %332, %637, !dbg !29
  %651 = fcmp oeq float %650, 0.000000e+00, !dbg !30
  %652 = tail call float @llvm.nvvm.div.full(float %332, float %650), !dbg !31
  %653 = select i1 %651, float 0.000000e+00, float %652, !dbg !32
  %654 = fmul float %653, %647, !dbg !33
  %655 = fadd float %642, %654, !dbg !34
  %656 = fmul float %653, %649, !dbg !37
  %657 = fadd float %646, %656, !dbg !38
  %658 = fsub float %297, %655, !dbg !24
  %659 = fadd float %332, %650, !dbg !29
  %660 = tail call float @llvm.nvvm.div.full(float %332, float %659), !dbg !31
  %661 = fadd float %332, %659, !dbg !29
  %662 = insertelement <2 x float> poison, float %659, i64 0, !dbg !30
  %663 = insertelement <2 x float> %662, float %661, i64 1, !dbg !30
  %664 = fcmp oeq <2 x float> %663, zeroinitializer, !dbg !30
  %665 = tail call float @llvm.nvvm.div.full(float %332, float %661), !dbg !31
  %666 = insertelement <2 x float> poison, float %660, i64 0, !dbg !32
  %667 = insertelement <2 x float> %666, float %665, i64 1, !dbg !32
  %668 = select <2 x i1> %664, <2 x float> zeroinitializer, <2 x float> %667, !dbg !32
  %669 = extractelement <2 x float> %668, i64 0, !dbg !33
  %670 = fmul float %669, %658, !dbg !33
  %671 = fadd float %655, %670, !dbg !34
  %672 = fsub float %298, %671, !dbg !24
  %673 = insertelement <2 x float> poison, float %658, i64 0, !dbg !35
  %674 = insertelement <2 x float> %673, float %672, i64 1, !dbg !35
  %675 = fmul <2 x float> %674, %674, !dbg !35
  %676 = insertelement <2 x float> poison, float %650, i64 0, !dbg !36
  %677 = insertelement <2 x float> %676, float %659, i64 1, !dbg !36
  %678 = fmul <2 x float> %677, %675, !dbg !36
  %679 = fmul <2 x float> %668, %678, !dbg !37
  %680 = extractelement <2 x float> %679, i64 0, !dbg !38
  %681 = fadd float %657, %680, !dbg !38
  %682 = extractelement <2 x float> %668, i64 1, !dbg !33
  %683 = fmul float %682, %672, !dbg !33
  %684 = fadd float %671, %683, !dbg !34
  %685 = extractelement <2 x float> %679, i64 1, !dbg !38
  %686 = fadd float %681, %685, !dbg !38
  %687 = fsub float %300, %299, !dbg !24
  %688 = select i1 %22, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %689 = fcmp oeq float %688, 0.000000e+00, !dbg !30
  %690 = tail call float @llvm.nvvm.div.full(float %333, float %688), !dbg !31
  %691 = select i1 %689, float 0.000000e+00, float %690, !dbg !32
  %692 = fmul float %687, %691, !dbg !33
  %693 = fadd float %299, %692, !dbg !34
  %694 = fmul float %687, %687, !dbg !35
  %695 = fmul float %333, %694, !dbg !36
  %696 = fmul float %695, %691, !dbg !37
  %697 = fadd float %696, 0.000000e+00, !dbg !38
  %698 = fsub float %301, %693, !dbg !24
  %699 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %700 = fcmp oeq float %699, 0.000000e+00, !dbg !30
  %701 = tail call float @llvm.nvvm.div.full(float %333, float %699), !dbg !31
  %702 = select i1 %700, float 0.000000e+00, float %701, !dbg !32
  %703 = fmul float %702, %698, !dbg !33
  %704 = fadd float %693, %703, !dbg !34
  %705 = fmul float %698, %698, !dbg !35
  %706 = fmul float %688, %705, !dbg !36
  %707 = fmul float %702, %706, !dbg !37
  %708 = fadd float %697, %707, !dbg !38
  %709 = fsub float %302, %704, !dbg !24
  %710 = select i1 %22, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %711 = fcmp oeq float %710, 0.000000e+00, !dbg !30
  %712 = tail call float @llvm.nvvm.div.full(float %333, float %710), !dbg !31
  %713 = select i1 %711, float 0.000000e+00, float %712, !dbg !32
  %714 = fmul float %713, %709, !dbg !33
  %715 = fadd float %704, %714, !dbg !34
  %716 = fmul float %709, %709, !dbg !35
  %717 = fmul float %699, %716, !dbg !36
  %718 = fmul float %713, %717, !dbg !37
  %719 = fadd float %708, %718, !dbg !38
  %720 = fsub float %303, %715, !dbg !24
  %721 = select i1 %22, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %722 = fcmp oeq float %721, 0.000000e+00, !dbg !30
  %723 = tail call float @llvm.nvvm.div.full(float %333, float %721), !dbg !31
  %724 = select i1 %722, float 0.000000e+00, float %723, !dbg !32
  %725 = fmul float %724, %720, !dbg !33
  %726 = fadd float %715, %725, !dbg !34
  %727 = fmul float %720, %720, !dbg !35
  %728 = fmul float %710, %727, !dbg !36
  %729 = fmul float %724, %728, !dbg !37
  %730 = fadd float %719, %729, !dbg !38
  %731 = fsub float %304, %726, !dbg !24
  %732 = select i1 %22, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %733 = fcmp oeq float %732, 0.000000e+00, !dbg !30
  %734 = tail call float @llvm.nvvm.div.full(float %333, float %732), !dbg !31
  %735 = select i1 %733, float 0.000000e+00, float %734, !dbg !32
  %736 = fmul float %735, %731, !dbg !33
  %737 = fadd float %726, %736, !dbg !34
  %738 = fmul float %731, %731, !dbg !35
  %739 = fmul float %721, %738, !dbg !36
  %740 = fmul float %735, %739, !dbg !37
  %741 = fadd float %730, %740, !dbg !38
  %742 = fsub float %305, %737, !dbg !24
  %743 = select i1 %22, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %744 = fcmp oeq float %743, 0.000000e+00, !dbg !30
  %745 = tail call float @llvm.nvvm.div.full(float %333, float %743), !dbg !31
  %746 = select i1 %744, float 0.000000e+00, float %745, !dbg !32
  %747 = fmul float %746, %742, !dbg !33
  %748 = fadd float %737, %747, !dbg !34
  %749 = fmul float %742, %742, !dbg !35
  %750 = fmul float %732, %749, !dbg !36
  %751 = fmul float %746, %750, !dbg !37
  %752 = fadd float %741, %751, !dbg !38
  %753 = fsub float %306, %748, !dbg !24
  %754 = select i1 %22, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %755 = fcmp oeq float %754, 0.000000e+00, !dbg !30
  %756 = tail call float @llvm.nvvm.div.full(float %333, float %754), !dbg !31
  %757 = select i1 %755, float 0.000000e+00, float %756, !dbg !32
  %758 = fmul float %757, %753, !dbg !33
  %759 = fadd float %748, %758, !dbg !34
  %760 = fmul float %753, %753, !dbg !35
  %761 = fmul float %743, %760, !dbg !36
  %762 = fmul float %757, %761, !dbg !37
  %763 = fadd float %752, %762, !dbg !38
  %764 = fsub float %307, %759, !dbg !24
  %765 = select i1 %22, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %766 = fcmp oeq float %765, 0.000000e+00, !dbg !30
  %767 = tail call float @llvm.nvvm.div.full(float %333, float %765), !dbg !31
  %768 = select i1 %766, float 0.000000e+00, float %767, !dbg !32
  %769 = fmul float %768, %764, !dbg !33
  %770 = fadd float %759, %769, !dbg !34
  %771 = fadd float %763, 0.000000e+00, !dbg !39
  %772 = fmul float %764, %764, !dbg !35
  %773 = fmul float %754, %772, !dbg !36
  %774 = fmul float %768, %773, !dbg !37
  %775 = fadd float %771, %774, !dbg !38
  %776 = fsub float %308, %770, !dbg !24
  %777 = select i1 %22, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %778 = fcmp oeq float %777, 0.000000e+00, !dbg !30
  %779 = tail call float @llvm.nvvm.div.full(float %333, float %777), !dbg !31
  %780 = select i1 %778, float 0.000000e+00, float %779, !dbg !32
  %781 = fmul float %780, %776, !dbg !33
  %782 = fadd float %770, %781, !dbg !34
  %783 = fmul float %776, %776, !dbg !35
  %784 = fmul float %765, %783, !dbg !36
  %785 = fmul float %780, %784, !dbg !37
  %786 = fadd float %775, %785, !dbg !38
  %787 = fsub float %309, %782, !dbg !24
  %788 = select i1 %22, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %789 = fcmp oeq float %788, 0.000000e+00, !dbg !30
  %790 = tail call float @llvm.nvvm.div.full(float %333, float %788), !dbg !31
  %791 = select i1 %789, float 0.000000e+00, float %790, !dbg !32
  %792 = fmul float %791, %787, !dbg !33
  %793 = fadd float %782, %792, !dbg !34
  %794 = fmul float %787, %787, !dbg !35
  %795 = fmul float %777, %794, !dbg !36
  %796 = fmul float %791, %795, !dbg !37
  %797 = fadd float %786, %796, !dbg !38
  %798 = fsub float %310, %793, !dbg !24
  %799 = select i1 %22, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %800 = fcmp oeq float %799, 0.000000e+00, !dbg !30
  %801 = tail call float @llvm.nvvm.div.full(float %333, float %799), !dbg !31
  %802 = select i1 %800, float 0.000000e+00, float %801, !dbg !32
  %803 = fmul float %802, %798, !dbg !33
  %804 = fadd float %793, %803, !dbg !34
  %805 = fmul float %798, %798, !dbg !35
  %806 = fmul float %788, %805, !dbg !36
  %807 = fmul float %802, %806, !dbg !37
  %808 = fadd float %797, %807, !dbg !38
  %809 = fsub float %311, %804, !dbg !24
  %810 = select i1 %22, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %811 = fcmp oeq float %810, 0.000000e+00, !dbg !30
  %812 = tail call float @llvm.nvvm.div.full(float %333, float %810), !dbg !31
  %813 = select i1 %811, float 0.000000e+00, float %812, !dbg !32
  %814 = fmul float %813, %809, !dbg !33
  %815 = fadd float %804, %814, !dbg !34
  %816 = fmul float %809, %809, !dbg !35
  %817 = fmul float %799, %816, !dbg !36
  %818 = fmul float %813, %817, !dbg !37
  %819 = fadd float %808, %818, !dbg !38
  %820 = fsub float %312, %815, !dbg !24
  %821 = select i1 %22, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %822 = fcmp oeq float %821, 0.000000e+00, !dbg !30
  %823 = tail call float @llvm.nvvm.div.full(float %333, float %821), !dbg !31
  %824 = select i1 %822, float 0.000000e+00, float %823, !dbg !32
  %825 = fmul float %824, %820, !dbg !33
  %826 = fadd float %815, %825, !dbg !34
  %827 = fmul float %820, %820, !dbg !35
  %828 = fmul float %810, %827, !dbg !36
  %829 = fmul float %824, %828, !dbg !37
  %830 = fadd float %819, %829, !dbg !38
  %831 = fsub float %313, %826, !dbg !24
  %832 = select i1 %22, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %833 = fcmp oeq float %832, 0.000000e+00, !dbg !30
  %834 = tail call float @llvm.nvvm.div.full(float %333, float %832), !dbg !31
  %835 = select i1 %833, float 0.000000e+00, float %834, !dbg !32
  %836 = fmul float %835, %831, !dbg !33
  %837 = fadd float %826, %836, !dbg !34
  %838 = fadd float %830, 0.000000e+00, !dbg !39
  %839 = fmul float %831, %831, !dbg !35
  %840 = fmul float %821, %839, !dbg !36
  %841 = fmul float %835, %840, !dbg !37
  %842 = fadd float %838, %841, !dbg !38
  %843 = fsub float %314, %837, !dbg !24
  %844 = select i1 %22, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %845 = fcmp oeq float %844, 0.000000e+00, !dbg !30
  %846 = tail call float @llvm.nvvm.div.full(float %333, float %844), !dbg !31
  %847 = select i1 %845, float 0.000000e+00, float %846, !dbg !32
  %848 = fmul float %847, %843, !dbg !33
  %849 = fadd float %837, %848, !dbg !34
  %850 = fmul float %843, %843, !dbg !35
  %851 = fmul float %832, %850, !dbg !36
  %852 = fmul float %847, %851, !dbg !37
  %853 = fadd float %842, %852, !dbg !38
  %854 = fsub float %315, %849, !dbg !24
  %855 = fadd float %844, %334, !dbg !29
  %856 = fcmp oeq float %855, 0.000000e+00, !dbg !30
  %857 = tail call float @llvm.nvvm.div.full(float %334, float %855), !dbg !31
  %858 = select i1 %856, float 0.000000e+00, float %857, !dbg !32
  %859 = fmul float %858, %854, !dbg !33
  %860 = fadd float %849, %859, !dbg !34
  %861 = fmul float %854, %854, !dbg !35
  %862 = fmul float %844, %861, !dbg !36
  %863 = fmul float %858, %862, !dbg !37
  %864 = fadd float %853, %863, !dbg !38
  %865 = fsub float %316, %860, !dbg !24
  %866 = fadd float %334, %855, !dbg !29
  %867 = fcmp oeq float %866, 0.000000e+00, !dbg !30
  %868 = tail call float @llvm.nvvm.div.full(float %334, float %866), !dbg !31
  %869 = select i1 %867, float 0.000000e+00, float %868, !dbg !32
  %870 = fmul float %869, %865, !dbg !33
  %871 = fadd float %860, %870, !dbg !34
  %872 = fmul float %865, %865, !dbg !35
  %873 = fmul float %855, %872, !dbg !36
  %874 = fmul float %869, %873, !dbg !37
  %875 = fadd float %864, %874, !dbg !38
  %876 = fsub float %317, %871, !dbg !24
  %877 = fadd float %334, %866, !dbg !29
  %878 = fcmp oeq float %877, 0.000000e+00, !dbg !30
  %879 = tail call float @llvm.nvvm.div.full(float %334, float %877), !dbg !31
  %880 = select i1 %878, float 0.000000e+00, float %879, !dbg !32
  %881 = fmul float %880, %876, !dbg !33
  %882 = fadd float %871, %881, !dbg !34
  %883 = fmul float %876, %876, !dbg !35
  %884 = fmul float %866, %883, !dbg !36
  %885 = fmul float %880, %884, !dbg !37
  %886 = fadd float %875, %885, !dbg !38
  %887 = fsub float %318, %882, !dbg !24
  %888 = fadd float %334, %877, !dbg !29
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !30
  %890 = tail call float @llvm.nvvm.div.full(float %334, float %888), !dbg !31
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !32
  %892 = fmul float %891, %887, !dbg !33
  %893 = fadd float %882, %892, !dbg !34
  %894 = fmul float %887, %887, !dbg !35
  %895 = fmul float %877, %894, !dbg !36
  %896 = fmul float %891, %895, !dbg !37
  %897 = fadd float %886, %896, !dbg !38
  %898 = fsub float %319, %893, !dbg !24
  %899 = fadd float %334, %888, !dbg !29
  %900 = fcmp oeq float %899, 0.000000e+00, !dbg !30
  %901 = tail call float @llvm.nvvm.div.full(float %334, float %899), !dbg !31
  %902 = select i1 %900, float 0.000000e+00, float %901, !dbg !32
  %903 = fmul float %902, %898, !dbg !33
  %904 = fadd float %893, %903, !dbg !34
  %905 = fadd float %897, 0.000000e+00, !dbg !39
  %906 = fmul float %898, %898, !dbg !35
  %907 = fmul float %888, %906, !dbg !36
  %908 = fmul float %902, %907, !dbg !37
  %909 = fadd float %905, %908, !dbg !38
  %910 = fsub float %320, %904, !dbg !24
  %911 = fadd float %334, %899, !dbg !29
  %912 = fcmp oeq float %911, 0.000000e+00, !dbg !30
  %913 = tail call float @llvm.nvvm.div.full(float %334, float %911), !dbg !31
  %914 = select i1 %912, float 0.000000e+00, float %913, !dbg !32
  %915 = fmul float %914, %910, !dbg !33
  %916 = fadd float %904, %915, !dbg !34
  %917 = fmul float %910, %910, !dbg !35
  %918 = fmul float %899, %917, !dbg !36
  %919 = fmul float %914, %918, !dbg !37
  %920 = fadd float %909, %919, !dbg !38
  %921 = fsub float %321, %916, !dbg !24
  %922 = fadd float %334, %911, !dbg !29
  %923 = fcmp oeq float %922, 0.000000e+00, !dbg !30
  %924 = tail call float @llvm.nvvm.div.full(float %334, float %922), !dbg !31
  %925 = select i1 %923, float 0.000000e+00, float %924, !dbg !32
  %926 = fmul float %925, %921, !dbg !33
  %927 = fadd float %916, %926, !dbg !34
  %928 = fmul float %921, %921, !dbg !35
  %929 = fmul float %911, %928, !dbg !36
  %930 = fmul float %925, %929, !dbg !37
  %931 = fadd float %920, %930, !dbg !38
  %932 = fsub float %322, %927, !dbg !24
  %933 = fadd float %334, %922, !dbg !29
  %934 = fcmp oeq float %933, 0.000000e+00, !dbg !30
  %935 = tail call float @llvm.nvvm.div.full(float %334, float %933), !dbg !31
  %936 = select i1 %934, float 0.000000e+00, float %935, !dbg !32
  %937 = fmul float %936, %932, !dbg !33
  %938 = fadd float %927, %937, !dbg !34
  %939 = fmul float %932, %932, !dbg !35
  %940 = fmul float %922, %939, !dbg !36
  %941 = fmul float %936, %940, !dbg !37
  %942 = fadd float %931, %941, !dbg !38
  %943 = fsub float %323, %938, !dbg !24
  %944 = fadd float %334, %933, !dbg !29
  %945 = fcmp oeq float %944, 0.000000e+00, !dbg !30
  %946 = tail call float @llvm.nvvm.div.full(float %334, float %944), !dbg !31
  %947 = select i1 %945, float 0.000000e+00, float %946, !dbg !32
  %948 = fmul float %947, %943, !dbg !33
  %949 = fadd float %938, %948, !dbg !34
  %950 = fmul float %943, %943, !dbg !35
  %951 = fmul float %933, %950, !dbg !36
  %952 = fmul float %947, %951, !dbg !37
  %953 = fadd float %942, %952, !dbg !38
  %954 = fsub float %324, %949, !dbg !24
  %955 = fadd float %334, %944, !dbg !29
  %956 = fcmp oeq float %955, 0.000000e+00, !dbg !30
  %957 = tail call float @llvm.nvvm.div.full(float %334, float %955), !dbg !31
  %958 = select i1 %956, float 0.000000e+00, float %957, !dbg !32
  %959 = fmul float %958, %954, !dbg !33
  %960 = fadd float %949, %959, !dbg !34
  %961 = fmul float %954, %954, !dbg !35
  %962 = fmul float %944, %961, !dbg !36
  %963 = fmul float %958, %962, !dbg !37
  %964 = fadd float %953, %963, !dbg !38
  %965 = fsub float %325, %960, !dbg !24
  %966 = fadd float %334, %955, !dbg !29
  %967 = fcmp oeq float %966, 0.000000e+00, !dbg !30
  %968 = tail call float @llvm.nvvm.div.full(float %334, float %966), !dbg !31
  %969 = select i1 %967, float 0.000000e+00, float %968, !dbg !32
  %970 = fmul float %969, %965, !dbg !33
  %971 = fadd float %960, %970, !dbg !34
  %972 = fadd float %964, 0.000000e+00, !dbg !39
  %973 = fmul float %965, %965, !dbg !35
  %974 = fmul float %955, %973, !dbg !36
  %975 = fmul float %969, %974, !dbg !37
  %976 = fadd float %972, %975, !dbg !38
  %977 = fsub float %326, %971, !dbg !24
  %978 = fadd float %334, %966, !dbg !29
  %979 = fcmp oeq float %978, 0.000000e+00, !dbg !30
  %980 = tail call float @llvm.nvvm.div.full(float %334, float %978), !dbg !31
  %981 = select i1 %979, float 0.000000e+00, float %980, !dbg !32
  %982 = fmul float %981, %977, !dbg !33
  %983 = fadd float %971, %982, !dbg !34
  %984 = fmul float %977, %977, !dbg !35
  %985 = fmul float %966, %984, !dbg !36
  %986 = fmul float %981, %985, !dbg !37
  %987 = fadd float %976, %986, !dbg !38
  %988 = fsub float %327, %983, !dbg !24
  %989 = fadd float %334, %978, !dbg !29
  %990 = fcmp oeq float %989, 0.000000e+00, !dbg !30
  %991 = tail call float @llvm.nvvm.div.full(float %334, float %989), !dbg !31
  %992 = select i1 %990, float 0.000000e+00, float %991, !dbg !32
  %993 = fmul float %992, %988, !dbg !33
  %994 = fadd float %983, %993, !dbg !34
  %995 = fmul float %988, %988, !dbg !35
  %996 = fmul float %978, %995, !dbg !36
  %997 = fmul float %992, %996, !dbg !37
  %998 = fadd float %987, %997, !dbg !38
  %999 = fsub float %328, %994, !dbg !24
  %1000 = fmul float %999, %999, !dbg !35
  %1001 = fmul float %989, %1000, !dbg !36
  %1002 = fadd float %334, %989, !dbg !29
  %1003 = fcmp oeq float %1002, 0.000000e+00, !dbg !30
  %1004 = tail call float @llvm.nvvm.div.full(float %334, float %1002), !dbg !31
  %1005 = select i1 %1003, float 0.000000e+00, float %1004, !dbg !32
  %1006 = fmul float %1005, %999, !dbg !33
  %1007 = fadd float %994, %1006, !dbg !34
  %1008 = fmul float %1005, %1001, !dbg !37
  %1009 = fadd float %998, %1008, !dbg !38
  %1010 = fsub float %329, %1007, !dbg !24
  %1011 = fadd float %334, %1002, !dbg !29
  %1012 = tail call float @llvm.nvvm.div.full(float %334, float %1011), !dbg !31
  %1013 = fadd float %334, %1011, !dbg !29
  %1014 = insertelement <2 x float> poison, float %1011, i64 0, !dbg !30
  %1015 = insertelement <2 x float> %1014, float %1013, i64 1, !dbg !30
  %1016 = fcmp oeq <2 x float> %1015, zeroinitializer, !dbg !30
  %1017 = tail call float @llvm.nvvm.div.full(float %334, float %1013), !dbg !31
  %1018 = insertelement <2 x float> poison, float %1012, i64 0, !dbg !32
  %1019 = insertelement <2 x float> %1018, float %1017, i64 1, !dbg !32
  %1020 = select <2 x i1> %1016, <2 x float> zeroinitializer, <2 x float> %1019, !dbg !32
  %1021 = extractelement <2 x float> %1020, i64 0, !dbg !33
  %1022 = fmul float %1021, %1010, !dbg !33
  %1023 = fadd float %1007, %1022, !dbg !34
  %1024 = fsub float %330, %1023, !dbg !24
  %1025 = insertelement <2 x float> poison, float %1010, i64 0, !dbg !35
  %1026 = insertelement <2 x float> %1025, float %1024, i64 1, !dbg !35
  %1027 = fmul <2 x float> %1026, %1026, !dbg !35
  %1028 = insertelement <2 x float> poison, float %1002, i64 0, !dbg !36
  %1029 = insertelement <2 x float> %1028, float %1011, i64 1, !dbg !36
  %1030 = fmul <2 x float> %1029, %1027, !dbg !36
  %1031 = fmul <2 x float> %1020, %1030, !dbg !37
  %1032 = extractelement <2 x float> %1031, i64 0, !dbg !38
  %1033 = fadd float %1009, %1032, !dbg !38
  %1034 = extractelement <2 x float> %1020, i64 1, !dbg !33
  %1035 = fmul float %1034, %1024, !dbg !33
  %1036 = fadd float %1023, %1035, !dbg !34
  %1037 = extractelement <2 x float> %1031, i64 1, !dbg !38
  %1038 = fadd float %1033, %1037, !dbg !38
  %1039 = bitcast float %684 to i32, !dbg !40
  %1040 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 16, i32 31), !dbg !40
  %1041 = bitcast i32 %1040 to float, !dbg !40
  %1042 = bitcast float %686 to i32, !dbg !40
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 16, i32 31), !dbg !40
  %1044 = bitcast i32 %1043 to float, !dbg !40
  %1045 = bitcast float %661 to i32, !dbg !40
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 16, i32 31), !dbg !40
  %1047 = bitcast i32 %1046 to float, !dbg !40
  %1048 = fsub float %1041, %684, !dbg !24
  %1049 = fadd float %661, %1047, !dbg !29
  %1050 = fcmp oeq float %1049, 0.000000e+00, !dbg !30
  %1051 = tail call float @llvm.nvvm.div.full(float %1047, float %1049), !dbg !31
  %1052 = select i1 %1050, float 0.000000e+00, float %1051, !dbg !32
  %1053 = fmul float %1052, %1048, !dbg !33
  %1054 = fadd float %684, %1053, !dbg !34
  %1055 = fadd float %686, %1044, !dbg !39
  %1056 = fmul float %1048, %1048, !dbg !35
  %1057 = fmul float %661, %1056, !dbg !36
  %1058 = fmul float %1052, %1057, !dbg !37
  %1059 = fadd float %1055, %1058, !dbg !38
  %1060 = bitcast float %1054 to i32, !dbg !40
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 8, i32 31), !dbg !40
  %1062 = bitcast i32 %1061 to float, !dbg !40
  %1063 = bitcast float %1059 to i32, !dbg !40
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 8, i32 31), !dbg !40
  %1065 = bitcast i32 %1064 to float, !dbg !40
  %1066 = bitcast float %1049 to i32, !dbg !40
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 8, i32 31), !dbg !40
  %1068 = bitcast i32 %1067 to float, !dbg !40
  %1069 = fsub float %1062, %1054, !dbg !24
  %1070 = fadd float %1049, %1068, !dbg !29
  %1071 = fcmp oeq float %1070, 0.000000e+00, !dbg !30
  %1072 = tail call float @llvm.nvvm.div.full(float %1068, float %1070), !dbg !31
  %1073 = select i1 %1071, float 0.000000e+00, float %1072, !dbg !32
  %1074 = fmul float %1073, %1069, !dbg !33
  %1075 = fadd float %1054, %1074, !dbg !34
  %1076 = fadd float %1059, %1065, !dbg !39
  %1077 = fmul float %1069, %1069, !dbg !35
  %1078 = fmul float %1049, %1077, !dbg !36
  %1079 = fmul float %1073, %1078, !dbg !37
  %1080 = fadd float %1076, %1079, !dbg !38
  %1081 = bitcast float %1075 to i32, !dbg !40
  %1082 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1081, i32 4, i32 31), !dbg !40
  %1083 = bitcast i32 %1082 to float, !dbg !40
  %1084 = bitcast float %1080 to i32, !dbg !40
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 4, i32 31), !dbg !40
  %1086 = bitcast i32 %1085 to float, !dbg !40
  %1087 = bitcast float %1070 to i32, !dbg !40
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 4, i32 31), !dbg !40
  %1089 = bitcast i32 %1088 to float, !dbg !40
  %1090 = fsub float %1083, %1075, !dbg !24
  %1091 = fadd float %1070, %1089, !dbg !29
  %1092 = fcmp oeq float %1091, 0.000000e+00, !dbg !30
  %1093 = tail call float @llvm.nvvm.div.full(float %1089, float %1091), !dbg !31
  %1094 = select i1 %1092, float 0.000000e+00, float %1093, !dbg !32
  %1095 = fmul float %1094, %1090, !dbg !33
  %1096 = fadd float %1075, %1095, !dbg !34
  %1097 = fadd float %1080, %1086, !dbg !39
  %1098 = fmul float %1090, %1090, !dbg !35
  %1099 = fmul float %1070, %1098, !dbg !36
  %1100 = fmul float %1094, %1099, !dbg !37
  %1101 = fadd float %1097, %1100, !dbg !38
  %1102 = bitcast float %1096 to i32, !dbg !40
  %1103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1102, i32 2, i32 31), !dbg !40
  %1104 = bitcast i32 %1103 to float, !dbg !40
  %1105 = bitcast float %1101 to i32, !dbg !40
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 2, i32 31), !dbg !40
  %1107 = bitcast i32 %1106 to float, !dbg !40
  %1108 = bitcast float %1091 to i32, !dbg !40
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 2, i32 31), !dbg !40
  %1110 = bitcast i32 %1109 to float, !dbg !40
  %1111 = fsub float %1104, %1096, !dbg !24
  %1112 = fadd float %1091, %1110, !dbg !29
  %1113 = fcmp oeq float %1112, 0.000000e+00, !dbg !30
  %1114 = tail call float @llvm.nvvm.div.full(float %1110, float %1112), !dbg !31
  %1115 = select i1 %1113, float 0.000000e+00, float %1114, !dbg !32
  %1116 = fmul float %1115, %1111, !dbg !33
  %1117 = fadd float %1096, %1116, !dbg !34
  %1118 = fadd float %1101, %1107, !dbg !39
  %1119 = fmul float %1111, %1111, !dbg !35
  %1120 = fmul float %1091, %1119, !dbg !36
  %1121 = fmul float %1115, %1120, !dbg !37
  %1122 = fadd float %1118, %1121, !dbg !38
  %1123 = bitcast float %1117 to i32, !dbg !40
  %1124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1123, i32 1, i32 31), !dbg !40
  %1125 = bitcast i32 %1124 to float, !dbg !40
  %1126 = bitcast float %1122 to i32, !dbg !40
  %1127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1126, i32 1, i32 31), !dbg !40
  %1128 = bitcast i32 %1127 to float, !dbg !40
  %1129 = bitcast float %1112 to i32, !dbg !40
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 1, i32 31), !dbg !40
  %1131 = bitcast i32 %1130 to float, !dbg !40
  %1132 = fsub float %1125, %1117, !dbg !24
  %1133 = fadd float %1112, %1131, !dbg !29
  %1134 = fcmp oeq float %1133, 0.000000e+00, !dbg !30
  %1135 = tail call float @llvm.nvvm.div.full(float %1131, float %1133), !dbg !31
  %1136 = select i1 %1134, float 0.000000e+00, float %1135, !dbg !32
  %1137 = fmul float %1136, %1132, !dbg !33
  %1138 = fadd float %1117, %1137, !dbg !34
  %1139 = fadd float %1122, %1128, !dbg !39
  %1140 = fmul float %1132, %1132, !dbg !35
  %1141 = fmul float %1112, %1140, !dbg !36
  %1142 = fmul float %1136, %1141, !dbg !37
  %1143 = fadd float %1139, %1142, !dbg !38
  %1144 = bitcast float %1036 to i32, !dbg !40
  %1145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1144, i32 16, i32 31), !dbg !40
  %1146 = bitcast i32 %1145 to float, !dbg !40
  %1147 = bitcast float %1038 to i32, !dbg !40
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1147, i32 16, i32 31), !dbg !40
  %1149 = bitcast i32 %1148 to float, !dbg !40
  %1150 = bitcast float %1013 to i32, !dbg !40
  %1151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1150, i32 16, i32 31), !dbg !40
  %1152 = bitcast i32 %1151 to float, !dbg !40
  %1153 = fsub float %1146, %1036, !dbg !24
  %1154 = fadd float %1013, %1152, !dbg !29
  %1155 = fcmp oeq float %1154, 0.000000e+00, !dbg !30
  %1156 = tail call float @llvm.nvvm.div.full(float %1152, float %1154), !dbg !31
  %1157 = select i1 %1155, float 0.000000e+00, float %1156, !dbg !32
  %1158 = fmul float %1157, %1153, !dbg !33
  %1159 = fadd float %1036, %1158, !dbg !34
  %1160 = fadd float %1038, %1149, !dbg !39
  %1161 = fmul float %1153, %1153, !dbg !35
  %1162 = fmul float %1013, %1161, !dbg !36
  %1163 = fmul float %1157, %1162, !dbg !37
  %1164 = fadd float %1160, %1163, !dbg !38
  %1165 = bitcast float %1159 to i32, !dbg !40
  %1166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1165, i32 8, i32 31), !dbg !40
  %1167 = bitcast i32 %1166 to float, !dbg !40
  %1168 = bitcast float %1164 to i32, !dbg !40
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 8, i32 31), !dbg !40
  %1170 = bitcast i32 %1169 to float, !dbg !40
  %1171 = bitcast float %1154 to i32, !dbg !40
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 8, i32 31), !dbg !40
  %1173 = bitcast i32 %1172 to float, !dbg !40
  %1174 = fsub float %1167, %1159, !dbg !24
  %1175 = fadd float %1154, %1173, !dbg !29
  %1176 = fcmp oeq float %1175, 0.000000e+00, !dbg !30
  %1177 = tail call float @llvm.nvvm.div.full(float %1173, float %1175), !dbg !31
  %1178 = select i1 %1176, float 0.000000e+00, float %1177, !dbg !32
  %1179 = fmul float %1178, %1174, !dbg !33
  %1180 = fadd float %1159, %1179, !dbg !34
  %1181 = fadd float %1164, %1170, !dbg !39
  %1182 = fmul float %1174, %1174, !dbg !35
  %1183 = fmul float %1154, %1182, !dbg !36
  %1184 = fmul float %1178, %1183, !dbg !37
  %1185 = fadd float %1181, %1184, !dbg !38
  %1186 = bitcast float %1180 to i32, !dbg !40
  %1187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1186, i32 4, i32 31), !dbg !40
  %1188 = bitcast i32 %1187 to float, !dbg !40
  %1189 = bitcast float %1185 to i32, !dbg !40
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 4, i32 31), !dbg !40
  %1191 = bitcast i32 %1190 to float, !dbg !40
  %1192 = bitcast float %1175 to i32, !dbg !40
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 4, i32 31), !dbg !40
  %1194 = bitcast i32 %1193 to float, !dbg !40
  %1195 = fsub float %1188, %1180, !dbg !24
  %1196 = fadd float %1175, %1194, !dbg !29
  %1197 = fcmp oeq float %1196, 0.000000e+00, !dbg !30
  %1198 = tail call float @llvm.nvvm.div.full(float %1194, float %1196), !dbg !31
  %1199 = select i1 %1197, float 0.000000e+00, float %1198, !dbg !32
  %1200 = fmul float %1199, %1195, !dbg !33
  %1201 = fadd float %1180, %1200, !dbg !34
  %1202 = fadd float %1185, %1191, !dbg !39
  %1203 = fmul float %1195, %1195, !dbg !35
  %1204 = fmul float %1175, %1203, !dbg !36
  %1205 = fmul float %1199, %1204, !dbg !37
  %1206 = fadd float %1202, %1205, !dbg !38
  %1207 = bitcast float %1201 to i32, !dbg !40
  %1208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1207, i32 2, i32 31), !dbg !40
  %1209 = bitcast i32 %1208 to float, !dbg !40
  %1210 = bitcast float %1206 to i32, !dbg !40
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 2, i32 31), !dbg !40
  %1212 = bitcast i32 %1211 to float, !dbg !40
  %1213 = bitcast float %1196 to i32, !dbg !40
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 2, i32 31), !dbg !40
  %1215 = bitcast i32 %1214 to float, !dbg !40
  %1216 = fsub float %1209, %1201, !dbg !24
  %1217 = fadd float %1196, %1215, !dbg !29
  %1218 = fcmp oeq float %1217, 0.000000e+00, !dbg !30
  %1219 = tail call float @llvm.nvvm.div.full(float %1215, float %1217), !dbg !31
  %1220 = select i1 %1218, float 0.000000e+00, float %1219, !dbg !32
  %1221 = fmul float %1220, %1216, !dbg !33
  %1222 = fadd float %1201, %1221, !dbg !34
  %1223 = fadd float %1206, %1212, !dbg !39
  %1224 = fmul float %1216, %1216, !dbg !35
  %1225 = fmul float %1196, %1224, !dbg !36
  %1226 = fmul float %1220, %1225, !dbg !37
  %1227 = fadd float %1223, %1226, !dbg !38
  %1228 = bitcast float %1222 to i32, !dbg !40
  %1229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1228, i32 1, i32 31), !dbg !40
  %1230 = bitcast i32 %1229 to float, !dbg !40
  %1231 = bitcast float %1227 to i32, !dbg !40
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1231, i32 1, i32 31), !dbg !40
  %1233 = bitcast i32 %1232 to float, !dbg !40
  %1234 = bitcast float %1217 to i32, !dbg !40
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 1, i32 31), !dbg !40
  %1236 = bitcast i32 %1235 to float, !dbg !40
  %1237 = fsub float %1230, %1222, !dbg !24
  %1238 = fadd float %1217, %1236, !dbg !29
  %1239 = fcmp oeq float %1238, 0.000000e+00, !dbg !30
  %1240 = tail call float @llvm.nvvm.div.full(float %1236, float %1238), !dbg !31
  %1241 = select i1 %1239, float 0.000000e+00, float %1240, !dbg !32
  %1242 = fmul float %1241, %1237, !dbg !33
  %1243 = fadd float %1222, %1242, !dbg !34
  %1244 = fadd float %1227, %1233, !dbg !39
  %1245 = fmul float %1237, %1237, !dbg !35
  %1246 = fmul float %1217, %1245, !dbg !36
  %1247 = fmul float %1241, %1246, !dbg !37
  %1248 = fadd float %1244, %1247, !dbg !38
  %1249 = and i32 %23, 3, !dbg !40
  %1250 = icmp eq i32 %19, 0, !dbg !40
  %1251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1249, !dbg !40
  %1252 = bitcast float %1138 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1251, <1 x i32> %1252, i1 %1250) #5, !dbg !40
  %1253 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1249, !dbg !40
  %1254 = bitcast float %1143 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1253, <1 x i32> %1254, i1 %1250) #5, !dbg !40
  %1255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1249, !dbg !40
  %1256 = bitcast float %1133 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1255, <1 x i32> %1256, i1 %1250) #5, !dbg !40
  %1257 = or disjoint i32 %1249, 4, !dbg !40
  %1258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1257, !dbg !40
  %1259 = bitcast float %1243 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1258, <1 x i32> %1259, i1 %1250) #5, !dbg !40
  %1260 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1257, !dbg !40
  %1261 = bitcast float %1248 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %1261, i1 %1250) #5, !dbg !40
  %1262 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1257, !dbg !40
  %1263 = bitcast float %1238 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %1263, i1 %1250) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1264 = icmp slt i32 %18, 8, !dbg !40
  %1265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %1266 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1265, i1 %1264) #5, !dbg !40
  %1267 = bitcast i32 %1266 to float, !dbg !40
  %1268 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !40
  %1269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1268, i1 %1264) #5, !dbg !40
  %1270 = bitcast i32 %1269 to float, !dbg !40
  %1271 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !40
  %1272 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1271, i1 %1264) #5, !dbg !40
  %1273 = bitcast i32 %1272 to float, !dbg !40
  %1274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1266, i32 2, i32 31), !dbg !40
  %1275 = bitcast i32 %1274 to float, !dbg !40
  %1276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1269, i32 2, i32 31), !dbg !40
  %1277 = bitcast i32 %1276 to float, !dbg !40
  %1278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 2, i32 31), !dbg !40
  %1279 = bitcast i32 %1278 to float, !dbg !40
  %1280 = fsub float %1275, %1267, !dbg !24
  %1281 = fadd float %1273, %1279, !dbg !29
  %1282 = fcmp oeq float %1281, 0.000000e+00, !dbg !30
  %1283 = tail call float @llvm.nvvm.div.full(float %1279, float %1281), !dbg !31
  %1284 = select i1 %1282, float 0.000000e+00, float %1283, !dbg !32
  %1285 = fmul float %1280, %1284, !dbg !33
  %1286 = fadd float %1285, %1267, !dbg !34
  %1287 = fadd float %1270, %1277, !dbg !39
  %1288 = fmul float %1280, %1280, !dbg !35
  %1289 = fmul float %1288, %1273, !dbg !36
  %1290 = fmul float %1289, %1284, !dbg !37
  %1291 = fadd float %1287, %1290, !dbg !38
  %1292 = bitcast float %1286 to i32, !dbg !40
  %1293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1292, i32 1, i32 31), !dbg !40
  %1294 = bitcast i32 %1293 to float, !dbg !40
  %1295 = bitcast float %1291 to i32, !dbg !40
  %1296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1295, i32 1, i32 31), !dbg !40
  %1297 = bitcast i32 %1296 to float, !dbg !40
  %1298 = bitcast float %1281 to i32, !dbg !40
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 1, i32 31), !dbg !40
  %1300 = bitcast i32 %1299 to float, !dbg !40
  %1301 = fsub float %1294, %1286, !dbg !24
  %1302 = fadd float %1281, %1300, !dbg !29
  %1303 = fcmp oeq float %1302, 0.000000e+00, !dbg !30
  %1304 = tail call float @llvm.nvvm.div.full(float %1300, float %1302), !dbg !31
  %1305 = select i1 %1303, float 0.000000e+00, float %1304, !dbg !32
  %1306 = fmul float %1301, %1305, !dbg !33
  %1307 = fadd float %1286, %1306, !dbg !34
  %1308 = fadd float %1291, %1297, !dbg !39
  %1309 = fmul float %1301, %1301, !dbg !35
  %1310 = fmul float %1281, %1309, !dbg !36
  %1311 = fmul float %1305, %1310, !dbg !37
  %1312 = fadd float %1308, %1311, !dbg !38
  %1313 = and i32 %18, 3, !dbg !40
  %1314 = icmp eq i32 %1313, 0, !dbg !40
  %1315 = and i1 %1264, %1314, !dbg !40
  %1316 = bitcast float %1307 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1265, <1 x i32> %1316, i1 %1315) #5, !dbg !40
  %1317 = bitcast float %1312 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1268, <1 x i32> %1317, i1 %1315) #5, !dbg !40
  %1318 = bitcast float %1302 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1271, <1 x i32> %1318, i1 %1315) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1319 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %1320 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !40
  %1321 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  %1322 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !40
  %1323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %50, i1 %21) #5, !dbg !41
  %1324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %21) #5, !dbg !41
  %1325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %65) #5, !dbg !41
  %1326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %65) #5, !dbg !41
  %1327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %22) #5, !dbg !41
  %1328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %22) #5, !dbg !41
  %1329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %66) #5, !dbg !41
  %1330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %66) #5, !dbg !41
  %1331 = or disjoint i32 %25, 4096, !dbg !42
  %1332 = or disjoint i32 %25, 4100, !dbg !42
  %1333 = or disjoint i32 %25, 5120, !dbg !42
  %1334 = or disjoint i32 %25, 5124, !dbg !42
  %1335 = or disjoint i32 %25, 6144, !dbg !42
  %1336 = or disjoint i32 %25, 6148, !dbg !42
  %1337 = zext nneg i32 %31 to i64, !dbg !43
  %1338 = getelementptr float, ptr addrspace(1) %1, i64 %1337, !dbg !43
  %1339 = zext nneg i32 %32 to i64, !dbg !43
  %1340 = getelementptr float, ptr addrspace(1) %1, i64 %1339, !dbg !43
  %1341 = zext nneg i32 %1331 to i64, !dbg !43
  %1342 = getelementptr float, ptr addrspace(1) %1, i64 %1341, !dbg !43
  %1343 = zext nneg i32 %1332 to i64, !dbg !43
  %1344 = getelementptr float, ptr addrspace(1) %1, i64 %1343, !dbg !43
  %1345 = zext nneg i32 %1333 to i64, !dbg !43
  %1346 = getelementptr float, ptr addrspace(1) %1, i64 %1345, !dbg !43
  %1347 = zext nneg i32 %1334 to i64, !dbg !43
  %1348 = getelementptr float, ptr addrspace(1) %1, i64 %1347, !dbg !43
  %1349 = zext nneg i32 %1335 to i64, !dbg !43
  %1350 = getelementptr float, ptr addrspace(1) %1, i64 %1349, !dbg !43
  %1351 = zext nneg i32 %1336 to i64, !dbg !43
  %1352 = getelementptr float, ptr addrspace(1) %1, i64 %1351, !dbg !43
  %1353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1338, i1 true) #5, !dbg !44
  %1354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1340, i1 true) #5, !dbg !44
  %1355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1342, i1 true) #5, !dbg !44
  %1356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1344, i1 true) #5, !dbg !44
  %1357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1346, i1 true) #5, !dbg !44
  %1358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1348, i1 true) #5, !dbg !44
  %1359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1350, i1 false) #5, !dbg !44
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1352, i1 false) #5, !dbg !44
  %1361 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1337, !dbg !45
  %1362 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1341, !dbg !45
  %1363 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1345, !dbg !45
  %1364 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1349, !dbg !45
  %1365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1361, i1 true) #5, !dbg !46
  %1366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1362, i1 true) #5, !dbg !46
  %1367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1363, i1 true) #5, !dbg !46
  %1368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1364, i1 false) #5, !dbg !46
  %1369 = zext nneg i32 %25 to i64, !dbg !47
  %1370 = getelementptr float, ptr addrspace(1) %1, i64 %1369, !dbg !47
  %1371 = zext nneg i32 %26 to i64, !dbg !47
  %1372 = getelementptr float, ptr addrspace(1) %1, i64 %1371, !dbg !47
  %1373 = zext nneg i32 %27 to i64, !dbg !47
  %1374 = getelementptr float, ptr addrspace(1) %1, i64 %1373, !dbg !47
  %1375 = zext nneg i32 %28 to i64, !dbg !47
  %1376 = getelementptr float, ptr addrspace(1) %1, i64 %1375, !dbg !47
  %1377 = zext nneg i32 %29 to i64, !dbg !47
  %1378 = getelementptr float, ptr addrspace(1) %1, i64 %1377, !dbg !47
  %1379 = zext nneg i32 %30 to i64, !dbg !47
  %1380 = getelementptr float, ptr addrspace(1) %1, i64 %1379, !dbg !47
  %1381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1370, i1 true) #5, !dbg !48
  %1382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1372, i1 true) #5, !dbg !48
  %1383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1374, i1 true) #5, !dbg !48
  %1384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1376, i1 true) #5, !dbg !48
  %1385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1378, i1 true) #5, !dbg !48
  %1386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1380, i1 true) #5, !dbg !48
  %1387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1338, i1 false) #5, !dbg !48
  %1388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1340, i1 false) #5, !dbg !48
  %1389 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1369, !dbg !49
  %1390 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1373, !dbg !49
  %1391 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1377, !dbg !49
  %1392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1389, i1 true) #5, !dbg !50
  %1393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1390, i1 true) #5, !dbg !50
  %1394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1391, i1 true) #5, !dbg !50
  %1395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1361, i1 false) #5, !dbg !50
  %1396 = tail call float @llvm.nvvm.div.full(float %1321, float 3.072000e+03), !dbg !51
  %1397 = tail call float @llvm.nvvm.div.full(float %1322, float 3.072000e+03), !dbg !51
  %1398 = fadd float %1396, 0x3EB0C6F7A0000000, !dbg !52
  %1399 = fadd float %1397, 0x3EB0C6F7A0000000, !dbg !52
  %1400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i109 = icmp eq i32 %1415, 0, !dbg !53
  br i1 %.not.i109, label %1418, label %1416, !dbg !53

1416:                                             ; preds = %__nv_rsqrtf.exit
  %1417 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1398), !dbg !53
  br label %__nv_rsqrtf.exit111, !dbg !53

1418:                                             ; preds = %__nv_rsqrtf.exit
  %1419 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1398), !dbg !53
  br label %__nv_rsqrtf.exit111, !dbg !53

__nv_rsqrtf.exit111:                              ; preds = %1416, %1418
  %.0.i110 = phi float [ %1417, %1416 ], [ %1419, %1418 ], !dbg !53
  %1420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i157 = icmp eq i32 %1435, 0, !dbg !53
  br i1 %.not.i157, label %1438, label %1436, !dbg !53

1436:                                             ; preds = %__nv_rsqrtf.exit111
  %1437 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1399), !dbg !53
  br label %__nv_rsqrtf.exit159, !dbg !53

1438:                                             ; preds = %__nv_rsqrtf.exit111
  %1439 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1399), !dbg !53
  br label %__nv_rsqrtf.exit159, !dbg !53

__nv_rsqrtf.exit159:                              ; preds = %1436, %1438
  %.0.i158 = phi float [ %1437, %1436 ], [ %1439, %1438 ], !dbg !53
  %1440 = extractvalue { i32, i32, i32, i32 } %1330, 3, !dbg !41
  %1441 = bitcast i32 %1440 to <2 x bfloat>, !dbg !41
  %1442 = extractelement <2 x bfloat> %1441, i64 1, !dbg !41
  %1443 = fpext bfloat %1442 to float, !dbg !54
  %1444 = fsub float %1443, %1320, !dbg !55
  %1445 = extractelement <2 x bfloat> %1441, i64 0, !dbg !41
  %1446 = fpext bfloat %1445 to float, !dbg !54
  %1447 = fsub float %1446, %1320, !dbg !55
  %1448 = extractvalue { i32, i32, i32, i32 } %1330, 2, !dbg !41
  %1449 = bitcast i32 %1448 to <2 x bfloat>, !dbg !41
  %1450 = extractelement <2 x bfloat> %1449, i64 1, !dbg !41
  %1451 = fpext bfloat %1450 to float, !dbg !54
  %1452 = fsub float %1451, %1320, !dbg !55
  %1453 = extractelement <2 x bfloat> %1449, i64 0, !dbg !41
  %1454 = fpext bfloat %1453 to float, !dbg !54
  %1455 = fsub float %1454, %1320, !dbg !55
  %1456 = extractvalue { i32, i32, i32, i32 } %1330, 1, !dbg !41
  %1457 = bitcast i32 %1456 to <2 x bfloat>, !dbg !41
  %1458 = extractelement <2 x bfloat> %1457, i64 1, !dbg !41
  %1459 = fpext bfloat %1458 to float, !dbg !54
  %1460 = fsub float %1459, %1320, !dbg !55
  %1461 = extractelement <2 x bfloat> %1457, i64 0, !dbg !41
  %1462 = fpext bfloat %1461 to float, !dbg !54
  %1463 = fsub float %1462, %1320, !dbg !55
  %1464 = extractvalue { i32, i32, i32, i32 } %1330, 0, !dbg !41
  %1465 = bitcast i32 %1464 to <2 x bfloat>, !dbg !41
  %1466 = extractelement <2 x bfloat> %1465, i64 1, !dbg !41
  %1467 = fpext bfloat %1466 to float, !dbg !54
  %1468 = fsub float %1467, %1320, !dbg !55
  %1469 = extractelement <2 x bfloat> %1465, i64 0, !dbg !41
  %1470 = fpext bfloat %1469 to float, !dbg !54
  %1471 = fsub float %1470, %1320, !dbg !55
  %1472 = extractvalue { i32, i32, i32, i32 } %1329, 3, !dbg !41
  %1473 = bitcast i32 %1472 to <2 x bfloat>, !dbg !41
  %1474 = extractelement <2 x bfloat> %1473, i64 1, !dbg !41
  %1475 = fpext bfloat %1474 to float, !dbg !54
  %1476 = fsub float %1475, %1320, !dbg !55
  %1477 = extractelement <2 x bfloat> %1473, i64 0, !dbg !41
  %1478 = fpext bfloat %1477 to float, !dbg !54
  %1479 = fsub float %1478, %1320, !dbg !55
  %1480 = extractvalue { i32, i32, i32, i32 } %1329, 2, !dbg !41
  %1481 = bitcast i32 %1480 to <2 x bfloat>, !dbg !41
  %1482 = extractelement <2 x bfloat> %1481, i64 1, !dbg !41
  %1483 = fpext bfloat %1482 to float, !dbg !54
  %1484 = fsub float %1483, %1320, !dbg !55
  %1485 = extractelement <2 x bfloat> %1481, i64 0, !dbg !41
  %1486 = fpext bfloat %1485 to float, !dbg !54
  %1487 = fsub float %1486, %1320, !dbg !55
  %1488 = extractvalue { i32, i32, i32, i32 } %1329, 1, !dbg !41
  %1489 = bitcast i32 %1488 to <2 x bfloat>, !dbg !41
  %1490 = extractelement <2 x bfloat> %1489, i64 1, !dbg !41
  %1491 = fpext bfloat %1490 to float, !dbg !54
  %1492 = fsub float %1491, %1320, !dbg !55
  %1493 = extractelement <2 x bfloat> %1489, i64 0, !dbg !41
  %1494 = fpext bfloat %1493 to float, !dbg !54
  %1495 = fsub float %1494, %1320, !dbg !55
  %1496 = extractvalue { i32, i32, i32, i32 } %1329, 0, !dbg !41
  %1497 = bitcast i32 %1496 to <2 x bfloat>, !dbg !41
  %1498 = extractelement <2 x bfloat> %1497, i64 1, !dbg !41
  %1499 = fpext bfloat %1498 to float, !dbg !54
  %1500 = fsub float %1499, %1320, !dbg !55
  %1501 = extractelement <2 x bfloat> %1497, i64 0, !dbg !41
  %1502 = fpext bfloat %1501 to float, !dbg !54
  %1503 = fsub float %1502, %1320, !dbg !55
  %1504 = extractvalue { i32, i32, i32, i32 } %1328, 3, !dbg !41
  %1505 = bitcast i32 %1504 to <2 x bfloat>, !dbg !41
  %1506 = extractelement <2 x bfloat> %1505, i64 1, !dbg !41
  %1507 = fpext bfloat %1506 to float, !dbg !54
  %1508 = fsub float %1507, %1320, !dbg !55
  %1509 = extractelement <2 x bfloat> %1505, i64 0, !dbg !41
  %1510 = fpext bfloat %1509 to float, !dbg !54
  %1511 = fsub float %1510, %1320, !dbg !55
  %1512 = extractvalue { i32, i32, i32, i32 } %1328, 2, !dbg !41
  %1513 = bitcast i32 %1512 to <2 x bfloat>, !dbg !41
  %1514 = extractelement <2 x bfloat> %1513, i64 1, !dbg !41
  %1515 = fpext bfloat %1514 to float, !dbg !54
  %1516 = fsub float %1515, %1320, !dbg !55
  %1517 = extractelement <2 x bfloat> %1513, i64 0, !dbg !41
  %1518 = fpext bfloat %1517 to float, !dbg !54
  %1519 = fsub float %1518, %1320, !dbg !55
  %1520 = extractvalue { i32, i32, i32, i32 } %1328, 1, !dbg !41
  %1521 = bitcast i32 %1520 to <2 x bfloat>, !dbg !41
  %1522 = extractelement <2 x bfloat> %1521, i64 1, !dbg !41
  %1523 = fpext bfloat %1522 to float, !dbg !54
  %1524 = fsub float %1523, %1320, !dbg !55
  %1525 = extractelement <2 x bfloat> %1521, i64 0, !dbg !41
  %1526 = fpext bfloat %1525 to float, !dbg !54
  %1527 = fsub float %1526, %1320, !dbg !55
  %1528 = extractvalue { i32, i32, i32, i32 } %1328, 0, !dbg !41
  %1529 = bitcast i32 %1528 to <2 x bfloat>, !dbg !41
  %1530 = extractelement <2 x bfloat> %1529, i64 1, !dbg !41
  %1531 = fpext bfloat %1530 to float, !dbg !54
  %1532 = fsub float %1531, %1320, !dbg !55
  %1533 = extractelement <2 x bfloat> %1529, i64 0, !dbg !41
  %1534 = fpext bfloat %1533 to float, !dbg !54
  %1535 = fsub float %1534, %1320, !dbg !55
  %1536 = extractvalue { i32, i32, i32, i32 } %1327, 3, !dbg !41
  %1537 = bitcast i32 %1536 to <2 x bfloat>, !dbg !41
  %1538 = extractelement <2 x bfloat> %1537, i64 1, !dbg !41
  %1539 = fpext bfloat %1538 to float, !dbg !54
  %1540 = fsub float %1539, %1320, !dbg !55
  %1541 = extractelement <2 x bfloat> %1537, i64 0, !dbg !41
  %1542 = fpext bfloat %1541 to float, !dbg !54
  %1543 = fsub float %1542, %1320, !dbg !55
  %1544 = extractvalue { i32, i32, i32, i32 } %1327, 2, !dbg !41
  %1545 = bitcast i32 %1544 to <2 x bfloat>, !dbg !41
  %1546 = extractelement <2 x bfloat> %1545, i64 1, !dbg !41
  %1547 = fpext bfloat %1546 to float, !dbg !54
  %1548 = fsub float %1547, %1320, !dbg !55
  %1549 = extractelement <2 x bfloat> %1545, i64 0, !dbg !41
  %1550 = fpext bfloat %1549 to float, !dbg !54
  %1551 = fsub float %1550, %1320, !dbg !55
  %1552 = extractvalue { i32, i32, i32, i32 } %1327, 1, !dbg !41
  %1553 = bitcast i32 %1552 to <2 x bfloat>, !dbg !41
  %1554 = extractelement <2 x bfloat> %1553, i64 1, !dbg !41
  %1555 = fpext bfloat %1554 to float, !dbg !54
  %1556 = fsub float %1555, %1320, !dbg !55
  %1557 = extractelement <2 x bfloat> %1553, i64 0, !dbg !41
  %1558 = fpext bfloat %1557 to float, !dbg !54
  %1559 = fsub float %1558, %1320, !dbg !55
  %1560 = extractvalue { i32, i32, i32, i32 } %1327, 0, !dbg !41
  %1561 = bitcast i32 %1560 to <2 x bfloat>, !dbg !41
  %1562 = extractelement <2 x bfloat> %1561, i64 1, !dbg !41
  %1563 = fpext bfloat %1562 to float, !dbg !54
  %1564 = fsub float %1563, %1320, !dbg !55
  %1565 = extractelement <2 x bfloat> %1561, i64 0, !dbg !41
  %1566 = fpext bfloat %1565 to float, !dbg !54
  %1567 = fsub float %1566, %1320, !dbg !55
  %1568 = extractvalue { i32, i32, i32, i32 } %1326, 3, !dbg !41
  %1569 = bitcast i32 %1568 to <2 x bfloat>, !dbg !41
  %1570 = extractelement <2 x bfloat> %1569, i64 1, !dbg !41
  %1571 = fpext bfloat %1570 to float, !dbg !54
  %1572 = fsub float %1571, %1319, !dbg !55
  %1573 = extractelement <2 x bfloat> %1569, i64 0, !dbg !41
  %1574 = fpext bfloat %1573 to float, !dbg !54
  %1575 = fsub float %1574, %1319, !dbg !55
  %1576 = extractvalue { i32, i32, i32, i32 } %1326, 2, !dbg !41
  %1577 = bitcast i32 %1576 to <2 x bfloat>, !dbg !41
  %1578 = extractelement <2 x bfloat> %1577, i64 1, !dbg !41
  %1579 = fpext bfloat %1578 to float, !dbg !54
  %1580 = fsub float %1579, %1319, !dbg !55
  %1581 = extractelement <2 x bfloat> %1577, i64 0, !dbg !41
  %1582 = fpext bfloat %1581 to float, !dbg !54
  %1583 = fsub float %1582, %1319, !dbg !55
  %1584 = extractvalue { i32, i32, i32, i32 } %1326, 1, !dbg !41
  %1585 = bitcast i32 %1584 to <2 x bfloat>, !dbg !41
  %1586 = extractelement <2 x bfloat> %1585, i64 1, !dbg !41
  %1587 = fpext bfloat %1586 to float, !dbg !54
  %1588 = fsub float %1587, %1319, !dbg !55
  %1589 = extractelement <2 x bfloat> %1585, i64 0, !dbg !41
  %1590 = fpext bfloat %1589 to float, !dbg !54
  %1591 = fsub float %1590, %1319, !dbg !55
  %1592 = extractvalue { i32, i32, i32, i32 } %1326, 0, !dbg !41
  %1593 = bitcast i32 %1592 to <2 x bfloat>, !dbg !41
  %1594 = extractelement <2 x bfloat> %1593, i64 1, !dbg !41
  %1595 = fpext bfloat %1594 to float, !dbg !54
  %1596 = fsub float %1595, %1319, !dbg !55
  %1597 = extractelement <2 x bfloat> %1593, i64 0, !dbg !41
  %1598 = fpext bfloat %1597 to float, !dbg !54
  %1599 = fsub float %1598, %1319, !dbg !55
  %1600 = extractvalue { i32, i32, i32, i32 } %1325, 3, !dbg !41
  %1601 = bitcast i32 %1600 to <2 x bfloat>, !dbg !41
  %1602 = extractelement <2 x bfloat> %1601, i64 1, !dbg !41
  %1603 = fpext bfloat %1602 to float, !dbg !54
  %1604 = fsub float %1603, %1319, !dbg !55
  %1605 = extractelement <2 x bfloat> %1601, i64 0, !dbg !41
  %1606 = fpext bfloat %1605 to float, !dbg !54
  %1607 = fsub float %1606, %1319, !dbg !55
  %1608 = extractvalue { i32, i32, i32, i32 } %1325, 2, !dbg !41
  %1609 = bitcast i32 %1608 to <2 x bfloat>, !dbg !41
  %1610 = extractelement <2 x bfloat> %1609, i64 1, !dbg !41
  %1611 = fpext bfloat %1610 to float, !dbg !54
  %1612 = fsub float %1611, %1319, !dbg !55
  %1613 = extractelement <2 x bfloat> %1609, i64 0, !dbg !41
  %1614 = fpext bfloat %1613 to float, !dbg !54
  %1615 = fsub float %1614, %1319, !dbg !55
  %1616 = extractvalue { i32, i32, i32, i32 } %1325, 1, !dbg !41
  %1617 = bitcast i32 %1616 to <2 x bfloat>, !dbg !41
  %1618 = extractelement <2 x bfloat> %1617, i64 1, !dbg !41
  %1619 = fpext bfloat %1618 to float, !dbg !54
  %1620 = fsub float %1619, %1319, !dbg !55
  %1621 = extractelement <2 x bfloat> %1617, i64 0, !dbg !41
  %1622 = fpext bfloat %1621 to float, !dbg !54
  %1623 = fsub float %1622, %1319, !dbg !55
  %1624 = extractvalue { i32, i32, i32, i32 } %1325, 0, !dbg !41
  %1625 = bitcast i32 %1624 to <2 x bfloat>, !dbg !41
  %1626 = extractelement <2 x bfloat> %1625, i64 1, !dbg !41
  %1627 = fpext bfloat %1626 to float, !dbg !54
  %1628 = fsub float %1627, %1319, !dbg !55
  %1629 = extractelement <2 x bfloat> %1625, i64 0, !dbg !41
  %1630 = fpext bfloat %1629 to float, !dbg !54
  %1631 = fsub float %1630, %1319, !dbg !55
  %1632 = extractvalue { i32, i32, i32, i32 } %1324, 3, !dbg !41
  %1633 = bitcast i32 %1632 to <2 x bfloat>, !dbg !41
  %1634 = extractelement <2 x bfloat> %1633, i64 1, !dbg !41
  %1635 = fpext bfloat %1634 to float, !dbg !54
  %1636 = fsub float %1635, %1319, !dbg !55
  %1637 = extractelement <2 x bfloat> %1633, i64 0, !dbg !41
  %1638 = fpext bfloat %1637 to float, !dbg !54
  %1639 = fsub float %1638, %1319, !dbg !55
  %1640 = extractvalue { i32, i32, i32, i32 } %1324, 2, !dbg !41
  %1641 = bitcast i32 %1640 to <2 x bfloat>, !dbg !41
  %1642 = extractelement <2 x bfloat> %1641, i64 1, !dbg !41
  %1643 = fpext bfloat %1642 to float, !dbg !54
  %1644 = fsub float %1643, %1319, !dbg !55
  %1645 = extractelement <2 x bfloat> %1641, i64 0, !dbg !41
  %1646 = fpext bfloat %1645 to float, !dbg !54
  %1647 = fsub float %1646, %1319, !dbg !55
  %1648 = extractvalue { i32, i32, i32, i32 } %1324, 1, !dbg !41
  %1649 = bitcast i32 %1648 to <2 x bfloat>, !dbg !41
  %1650 = extractelement <2 x bfloat> %1649, i64 1, !dbg !41
  %1651 = fpext bfloat %1650 to float, !dbg !54
  %1652 = fsub float %1651, %1319, !dbg !55
  %1653 = extractelement <2 x bfloat> %1649, i64 0, !dbg !41
  %1654 = fpext bfloat %1653 to float, !dbg !54
  %1655 = fsub float %1654, %1319, !dbg !55
  %1656 = extractvalue { i32, i32, i32, i32 } %1324, 0, !dbg !41
  %1657 = bitcast i32 %1656 to <2 x bfloat>, !dbg !41
  %1658 = extractelement <2 x bfloat> %1657, i64 1, !dbg !41
  %1659 = fpext bfloat %1658 to float, !dbg !54
  %1660 = fsub float %1659, %1319, !dbg !55
  %1661 = extractelement <2 x bfloat> %1657, i64 0, !dbg !41
  %1662 = fpext bfloat %1661 to float, !dbg !54
  %1663 = fsub float %1662, %1319, !dbg !55
  %1664 = extractvalue { i32, i32, i32, i32 } %1323, 3, !dbg !41
  %1665 = bitcast i32 %1664 to <2 x bfloat>, !dbg !41
  %1666 = extractelement <2 x bfloat> %1665, i64 1, !dbg !41
  %1667 = fpext bfloat %1666 to float, !dbg !54
  %1668 = fsub float %1667, %1319, !dbg !55
  %1669 = extractelement <2 x bfloat> %1665, i64 0, !dbg !41
  %1670 = fpext bfloat %1669 to float, !dbg !54
  %1671 = fsub float %1670, %1319, !dbg !55
  %1672 = extractvalue { i32, i32, i32, i32 } %1323, 2, !dbg !41
  %1673 = bitcast i32 %1672 to <2 x bfloat>, !dbg !41
  %1674 = extractelement <2 x bfloat> %1673, i64 1, !dbg !41
  %1675 = fpext bfloat %1674 to float, !dbg !54
  %1676 = fsub float %1675, %1319, !dbg !55
  %1677 = extractelement <2 x bfloat> %1673, i64 0, !dbg !41
  %1678 = fpext bfloat %1677 to float, !dbg !54
  %1679 = fsub float %1678, %1319, !dbg !55
  %1680 = extractvalue { i32, i32, i32, i32 } %1323, 1, !dbg !41
  %1681 = bitcast i32 %1680 to <2 x bfloat>, !dbg !41
  %1682 = extractelement <2 x bfloat> %1681, i64 1, !dbg !41
  %1683 = fpext bfloat %1682 to float, !dbg !54
  %1684 = fsub float %1683, %1319, !dbg !55
  %1685 = extractelement <2 x bfloat> %1681, i64 0, !dbg !41
  %1686 = fpext bfloat %1685 to float, !dbg !54
  %1687 = fsub float %1686, %1319, !dbg !55
  %1688 = extractvalue { i32, i32, i32, i32 } %1323, 0, !dbg !41
  %1689 = bitcast i32 %1688 to <2 x bfloat>, !dbg !41
  %1690 = extractelement <2 x bfloat> %1689, i64 1, !dbg !41
  %1691 = fpext bfloat %1690 to float, !dbg !54
  %1692 = fsub float %1691, %1319, !dbg !55
  %1693 = extractelement <2 x bfloat> %1689, i64 0, !dbg !41
  %1694 = fpext bfloat %1693 to float, !dbg !54
  %1695 = fsub float %1694, %1319, !dbg !55
  %1696 = extractvalue { i32, i32, i32, i32 } %1395, 3, !dbg !50
  %1697 = bitcast i32 %1696 to <2 x bfloat>, !dbg !50
  %1698 = extractvalue { i32, i32, i32, i32 } %1395, 2, !dbg !50
  %1699 = bitcast i32 %1698 to <2 x bfloat>, !dbg !50
  %1700 = extractvalue { i32, i32, i32, i32 } %1395, 1, !dbg !50
  %1701 = bitcast i32 %1700 to <2 x bfloat>, !dbg !50
  %1702 = extractvalue { i32, i32, i32, i32 } %1395, 0, !dbg !50
  %1703 = bitcast i32 %1702 to <2 x bfloat>, !dbg !50
  %1704 = extractvalue { i32, i32, i32, i32 } %1394, 3, !dbg !50
  %1705 = bitcast i32 %1704 to <2 x bfloat>, !dbg !50
  %1706 = extractvalue { i32, i32, i32, i32 } %1394, 2, !dbg !50
  %1707 = bitcast i32 %1706 to <2 x bfloat>, !dbg !50
  %1708 = extractvalue { i32, i32, i32, i32 } %1394, 1, !dbg !50
  %1709 = bitcast i32 %1708 to <2 x bfloat>, !dbg !50
  %1710 = extractvalue { i32, i32, i32, i32 } %1394, 0, !dbg !50
  %1711 = bitcast i32 %1710 to <2 x bfloat>, !dbg !50
  %1712 = extractvalue { i32, i32, i32, i32 } %1393, 3, !dbg !50
  %1713 = bitcast i32 %1712 to <2 x bfloat>, !dbg !50
  %1714 = extractvalue { i32, i32, i32, i32 } %1393, 2, !dbg !50
  %1715 = bitcast i32 %1714 to <2 x bfloat>, !dbg !50
  %1716 = extractvalue { i32, i32, i32, i32 } %1393, 1, !dbg !50
  %1717 = bitcast i32 %1716 to <2 x bfloat>, !dbg !50
  %1718 = extractvalue { i32, i32, i32, i32 } %1393, 0, !dbg !50
  %1719 = bitcast i32 %1718 to <2 x bfloat>, !dbg !50
  %1720 = extractvalue { i32, i32, i32, i32 } %1392, 3, !dbg !50
  %1721 = bitcast i32 %1720 to <2 x bfloat>, !dbg !50
  %1722 = extractvalue { i32, i32, i32, i32 } %1392, 2, !dbg !50
  %1723 = bitcast i32 %1722 to <2 x bfloat>, !dbg !50
  %1724 = extractvalue { i32, i32, i32, i32 } %1392, 1, !dbg !50
  %1725 = bitcast i32 %1724 to <2 x bfloat>, !dbg !50
  %1726 = extractvalue { i32, i32, i32, i32 } %1392, 0, !dbg !50
  %1727 = bitcast i32 %1726 to <2 x bfloat>, !dbg !50
  %1728 = extractvalue { i32, i32, i32, i32 } %1388, 3, !dbg !48
  %1729 = extractvalue { i32, i32, i32, i32 } %1388, 2, !dbg !48
  %1730 = extractvalue { i32, i32, i32, i32 } %1388, 1, !dbg !48
  %1731 = extractvalue { i32, i32, i32, i32 } %1388, 0, !dbg !48
  %1732 = extractvalue { i32, i32, i32, i32 } %1387, 3, !dbg !48
  %1733 = extractvalue { i32, i32, i32, i32 } %1387, 2, !dbg !48
  %1734 = extractvalue { i32, i32, i32, i32 } %1387, 1, !dbg !48
  %1735 = extractvalue { i32, i32, i32, i32 } %1387, 0, !dbg !48
  %1736 = extractvalue { i32, i32, i32, i32 } %1386, 3, !dbg !48
  %1737 = extractvalue { i32, i32, i32, i32 } %1386, 2, !dbg !48
  %1738 = extractvalue { i32, i32, i32, i32 } %1386, 1, !dbg !48
  %1739 = extractvalue { i32, i32, i32, i32 } %1386, 0, !dbg !48
  %1740 = extractvalue { i32, i32, i32, i32 } %1385, 3, !dbg !48
  %1741 = extractvalue { i32, i32, i32, i32 } %1385, 2, !dbg !48
  %1742 = extractvalue { i32, i32, i32, i32 } %1385, 1, !dbg !48
  %1743 = extractvalue { i32, i32, i32, i32 } %1385, 0, !dbg !48
  %1744 = extractvalue { i32, i32, i32, i32 } %1384, 3, !dbg !48
  %1745 = extractvalue { i32, i32, i32, i32 } %1384, 2, !dbg !48
  %1746 = extractvalue { i32, i32, i32, i32 } %1384, 1, !dbg !48
  %1747 = extractvalue { i32, i32, i32, i32 } %1384, 0, !dbg !48
  %1748 = extractvalue { i32, i32, i32, i32 } %1383, 3, !dbg !48
  %1749 = extractvalue { i32, i32, i32, i32 } %1383, 2, !dbg !48
  %1750 = extractvalue { i32, i32, i32, i32 } %1383, 1, !dbg !48
  %1751 = extractvalue { i32, i32, i32, i32 } %1383, 0, !dbg !48
  %1752 = extractvalue { i32, i32, i32, i32 } %1382, 3, !dbg !48
  %1753 = extractvalue { i32, i32, i32, i32 } %1382, 2, !dbg !48
  %1754 = extractvalue { i32, i32, i32, i32 } %1382, 1, !dbg !48
  %1755 = extractvalue { i32, i32, i32, i32 } %1382, 0, !dbg !48
  %1756 = extractvalue { i32, i32, i32, i32 } %1381, 3, !dbg !48
  %1757 = extractvalue { i32, i32, i32, i32 } %1381, 2, !dbg !48
  %1758 = extractvalue { i32, i32, i32, i32 } %1381, 1, !dbg !48
  %1759 = extractvalue { i32, i32, i32, i32 } %1381, 0, !dbg !48
  %1760 = extractvalue { i32, i32, i32, i32 } %1368, 3, !dbg !46
  %1761 = bitcast i32 %1760 to <2 x bfloat>, !dbg !46
  %1762 = extractvalue { i32, i32, i32, i32 } %1368, 2, !dbg !46
  %1763 = bitcast i32 %1762 to <2 x bfloat>, !dbg !46
  %1764 = extractvalue { i32, i32, i32, i32 } %1368, 1, !dbg !46
  %1765 = bitcast i32 %1764 to <2 x bfloat>, !dbg !46
  %1766 = extractvalue { i32, i32, i32, i32 } %1368, 0, !dbg !46
  %1767 = bitcast i32 %1766 to <2 x bfloat>, !dbg !46
  %1768 = extractvalue { i32, i32, i32, i32 } %1367, 3, !dbg !46
  %1769 = bitcast i32 %1768 to <2 x bfloat>, !dbg !46
  %1770 = extractvalue { i32, i32, i32, i32 } %1367, 2, !dbg !46
  %1771 = bitcast i32 %1770 to <2 x bfloat>, !dbg !46
  %1772 = extractvalue { i32, i32, i32, i32 } %1367, 1, !dbg !46
  %1773 = bitcast i32 %1772 to <2 x bfloat>, !dbg !46
  %1774 = extractvalue { i32, i32, i32, i32 } %1367, 0, !dbg !46
  %1775 = bitcast i32 %1774 to <2 x bfloat>, !dbg !46
  %1776 = extractvalue { i32, i32, i32, i32 } %1366, 3, !dbg !46
  %1777 = bitcast i32 %1776 to <2 x bfloat>, !dbg !46
  %1778 = extractvalue { i32, i32, i32, i32 } %1366, 2, !dbg !46
  %1779 = bitcast i32 %1778 to <2 x bfloat>, !dbg !46
  %1780 = extractvalue { i32, i32, i32, i32 } %1366, 1, !dbg !46
  %1781 = bitcast i32 %1780 to <2 x bfloat>, !dbg !46
  %1782 = extractvalue { i32, i32, i32, i32 } %1366, 0, !dbg !46
  %1783 = bitcast i32 %1782 to <2 x bfloat>, !dbg !46
  %1784 = extractvalue { i32, i32, i32, i32 } %1365, 3, !dbg !46
  %1785 = bitcast i32 %1784 to <2 x bfloat>, !dbg !46
  %1786 = extractvalue { i32, i32, i32, i32 } %1365, 2, !dbg !46
  %1787 = bitcast i32 %1786 to <2 x bfloat>, !dbg !46
  %1788 = extractvalue { i32, i32, i32, i32 } %1365, 1, !dbg !46
  %1789 = bitcast i32 %1788 to <2 x bfloat>, !dbg !46
  %1790 = extractvalue { i32, i32, i32, i32 } %1365, 0, !dbg !46
  %1791 = bitcast i32 %1790 to <2 x bfloat>, !dbg !46
  %1792 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !44
  %1793 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !44
  %1794 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !44
  %1795 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !44
  %1796 = extractvalue { i32, i32, i32, i32 } %1359, 3, !dbg !44
  %1797 = extractvalue { i32, i32, i32, i32 } %1359, 2, !dbg !44
  %1798 = extractvalue { i32, i32, i32, i32 } %1359, 1, !dbg !44
  %1799 = extractvalue { i32, i32, i32, i32 } %1359, 0, !dbg !44
  %1800 = extractvalue { i32, i32, i32, i32 } %1358, 3, !dbg !44
  %1801 = extractvalue { i32, i32, i32, i32 } %1358, 2, !dbg !44
  %1802 = extractvalue { i32, i32, i32, i32 } %1358, 1, !dbg !44
  %1803 = extractvalue { i32, i32, i32, i32 } %1358, 0, !dbg !44
  %1804 = extractvalue { i32, i32, i32, i32 } %1357, 3, !dbg !44
  %1805 = extractvalue { i32, i32, i32, i32 } %1357, 2, !dbg !44
  %1806 = extractvalue { i32, i32, i32, i32 } %1357, 1, !dbg !44
  %1807 = extractvalue { i32, i32, i32, i32 } %1357, 0, !dbg !44
  %1808 = extractvalue { i32, i32, i32, i32 } %1356, 3, !dbg !44
  %1809 = extractvalue { i32, i32, i32, i32 } %1356, 2, !dbg !44
  %1810 = extractvalue { i32, i32, i32, i32 } %1356, 1, !dbg !44
  %1811 = extractvalue { i32, i32, i32, i32 } %1356, 0, !dbg !44
  %1812 = extractvalue { i32, i32, i32, i32 } %1355, 3, !dbg !44
  %1813 = extractvalue { i32, i32, i32, i32 } %1355, 2, !dbg !44
  %1814 = extractvalue { i32, i32, i32, i32 } %1355, 1, !dbg !44
  %1815 = extractvalue { i32, i32, i32, i32 } %1355, 0, !dbg !44
  %1816 = extractvalue { i32, i32, i32, i32 } %1354, 3, !dbg !44
  %1817 = extractvalue { i32, i32, i32, i32 } %1354, 2, !dbg !44
  %1818 = extractvalue { i32, i32, i32, i32 } %1354, 1, !dbg !44
  %1819 = extractvalue { i32, i32, i32, i32 } %1354, 0, !dbg !44
  %1820 = extractvalue { i32, i32, i32, i32 } %1353, 3, !dbg !44
  %1821 = extractvalue { i32, i32, i32, i32 } %1353, 2, !dbg !44
  %1822 = extractvalue { i32, i32, i32, i32 } %1353, 1, !dbg !44
  %1823 = extractvalue { i32, i32, i32, i32 } %1353, 0, !dbg !44
  %1824 = add i32 %31, %40, !dbg !17
  %1825 = add i32 %29, %40, !dbg !17
  %1826 = add i32 %27, %40, !dbg !17
  %1827 = or disjoint i32 %40, %25, !dbg !17
  %1828 = add i32 %31, %39, !dbg !17
  %1829 = add i32 %29, %39, !dbg !17
  %1830 = or disjoint i32 %27, %39, !dbg !17
  %1831 = or disjoint i32 %25, %39, !dbg !17
  %1832 = and i32 %18, 1, !dbg !11
  %1833 = or disjoint i32 %17, %1832, !dbg !12
  %1834 = icmp slt i32 %1833, 3600, !dbg !13
  %1835 = fmul float %1695, %.0.i110, !dbg !56
  %1836 = fmul float %1692, %.0.i110, !dbg !56
  %1837 = fmul float %1687, %.0.i110, !dbg !56
  %1838 = fmul float %1684, %.0.i110, !dbg !56
  %1839 = fmul float %1679, %.0.i110, !dbg !56
  %1840 = fmul float %1676, %.0.i110, !dbg !56
  %1841 = fmul float %1671, %.0.i110, !dbg !56
  %1842 = fmul float %1668, %.0.i110, !dbg !56
  %1843 = fmul float %1663, %.0.i110, !dbg !56
  %1844 = fmul float %1660, %.0.i110, !dbg !56
  %1845 = fmul float %1655, %.0.i110, !dbg !56
  %1846 = fmul float %1652, %.0.i110, !dbg !56
  %1847 = fmul float %1647, %.0.i110, !dbg !56
  %1848 = fmul float %1644, %.0.i110, !dbg !56
  %1849 = fmul float %1639, %.0.i110, !dbg !56
  %1850 = fmul float %1636, %.0.i110, !dbg !56
  %1851 = fmul float %1631, %.0.i110, !dbg !56
  %1852 = fmul float %1628, %.0.i110, !dbg !56
  %1853 = fmul float %1623, %.0.i110, !dbg !56
  %1854 = fmul float %1620, %.0.i110, !dbg !56
  %1855 = fmul float %1615, %.0.i110, !dbg !56
  %1856 = fmul float %1612, %.0.i110, !dbg !56
  %1857 = fmul float %1607, %.0.i110, !dbg !56
  %1858 = fmul float %1604, %.0.i110, !dbg !56
  %1859 = fmul float %1599, %.0.i110, !dbg !56
  %1860 = fmul float %1596, %.0.i110, !dbg !56
  %1861 = fmul float %1591, %.0.i110, !dbg !56
  %1862 = fmul float %1588, %.0.i110, !dbg !56
  %1863 = fmul float %1583, %.0.i110, !dbg !56
  %1864 = fmul float %1580, %.0.i110, !dbg !56
  %1865 = fmul float %1575, %.0.i110, !dbg !56
  %1866 = fmul float %1572, %.0.i110, !dbg !56
  %1867 = fmul float %1567, %.0.i158, !dbg !56
  %1868 = fmul float %1564, %.0.i158, !dbg !56
  %1869 = fmul float %1559, %.0.i158, !dbg !56
  %1870 = fmul float %1556, %.0.i158, !dbg !56
  %1871 = fmul float %1551, %.0.i158, !dbg !56
  %1872 = fmul float %1548, %.0.i158, !dbg !56
  %1873 = fmul float %1543, %.0.i158, !dbg !56
  %1874 = fmul float %1540, %.0.i158, !dbg !56
  %1875 = fmul float %1535, %.0.i158, !dbg !56
  %1876 = fmul float %1532, %.0.i158, !dbg !56
  %1877 = fmul float %1527, %.0.i158, !dbg !56
  %1878 = fmul float %1524, %.0.i158, !dbg !56
  %1879 = fmul float %1519, %.0.i158, !dbg !56
  %1880 = fmul float %1516, %.0.i158, !dbg !56
  %1881 = fmul float %1511, %.0.i158, !dbg !56
  %1882 = fmul float %1508, %.0.i158, !dbg !56
  %1883 = fmul float %1503, %.0.i158, !dbg !56
  %1884 = fmul float %1500, %.0.i158, !dbg !56
  %1885 = fmul float %1495, %.0.i158, !dbg !56
  %1886 = fmul float %1492, %.0.i158, !dbg !56
  %1887 = fmul float %1487, %.0.i158, !dbg !56
  %1888 = fmul float %1484, %.0.i158, !dbg !56
  %1889 = fmul float %1479, %.0.i158, !dbg !56
  %1890 = fmul float %1476, %.0.i158, !dbg !56
  %1891 = fmul float %1471, %.0.i158, !dbg !56
  %1892 = fmul float %1468, %.0.i158, !dbg !56
  %1893 = fmul float %1463, %.0.i158, !dbg !56
  %1894 = fmul float %1460, %.0.i158, !dbg !56
  %1895 = fmul float %1455, %.0.i158, !dbg !56
  %1896 = fmul float %1452, %.0.i158, !dbg !56
  %1897 = fmul float %1447, %.0.i158, !dbg !56
  %1898 = fmul float %1444, %.0.i158, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1899 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %34, !dbg !56
  %1900 = bitcast float %1835 to i32, !dbg !56
  %1901 = bitcast float %1836 to i32, !dbg !56
  %1902 = bitcast float %1837 to i32, !dbg !56
  %1903 = bitcast float %1838 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1903, i1 true) #5, !dbg !56
  %1904 = or disjoint i32 %34, 4, !dbg !56
  %1905 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1904, !dbg !56
  %1906 = bitcast float %1839 to i32, !dbg !56
  %1907 = bitcast float %1840 to i32, !dbg !56
  %1908 = bitcast float %1841 to i32, !dbg !56
  %1909 = bitcast float %1842 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1905, i32 %1906, i32 %1907, i32 %1908, i32 %1909, i1 true) #5, !dbg !56
  %1910 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %35, !dbg !56
  %1911 = bitcast float %1843 to i32, !dbg !56
  %1912 = bitcast float %1844 to i32, !dbg !56
  %1913 = bitcast float %1845 to i32, !dbg !56
  %1914 = bitcast float %1846 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1910, i32 %1911, i32 %1912, i32 %1913, i32 %1914, i1 true) #5, !dbg !56
  %1915 = or disjoint i32 %34, 12, !dbg !56
  %1916 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1915, !dbg !56
  %1917 = bitcast float %1847 to i32, !dbg !56
  %1918 = bitcast float %1848 to i32, !dbg !56
  %1919 = bitcast float %1849 to i32, !dbg !56
  %1920 = bitcast float %1850 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1916, i32 %1917, i32 %1918, i32 %1919, i32 %1920, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1921 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25, !dbg !56
  %1922 = getelementptr inbounds nuw i8, ptr addrspace(3) %1921, i32 8, !dbg !56
  %1923 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !56
  %1924 = getelementptr inbounds nuw i8, ptr addrspace(3) %1923, i32 8, !dbg !56
  %1925 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !56
  %1926 = getelementptr inbounds nuw i8, ptr addrspace(3) %1925, i32 8, !dbg !56
  %1927 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !56
  %1928 = getelementptr inbounds nuw i8, ptr addrspace(3) %1927, i32 8, !dbg !56
  %1929 = bitcast float %1851 to i32, !dbg !56
  %1930 = bitcast float %1852 to i32, !dbg !56
  %1931 = bitcast float %1853 to i32, !dbg !56
  %1932 = bitcast float %1854 to i32, !dbg !56
  %1933 = bitcast float %1855 to i32, !dbg !56
  %1934 = bitcast float %1856 to i32, !dbg !56
  %1935 = bitcast float %1857 to i32, !dbg !56
  %1936 = bitcast float %1858 to i32, !dbg !56
  %1937 = bitcast float %1859 to i32, !dbg !56
  %1938 = bitcast float %1860 to i32, !dbg !56
  %1939 = bitcast float %1861 to i32, !dbg !56
  %1940 = bitcast float %1862 to i32, !dbg !56
  %1941 = bitcast float %1863 to i32, !dbg !56
  %1942 = bitcast float %1864 to i32, !dbg !56
  %1943 = bitcast float %1865 to i32, !dbg !56
  %1944 = bitcast float %1866 to i32, !dbg !56
  %1945 = bitcast float %1867 to i32, !dbg !56
  %1946 = bitcast float %1868 to i32, !dbg !56
  %1947 = bitcast float %1869 to i32, !dbg !56
  %1948 = bitcast float %1870 to i32, !dbg !56
  %1949 = bitcast float %1871 to i32, !dbg !56
  %1950 = bitcast float %1872 to i32, !dbg !56
  %1951 = bitcast float %1873 to i32, !dbg !56
  %1952 = bitcast float %1874 to i32, !dbg !56
  %1953 = bitcast float %1875 to i32, !dbg !56
  %1954 = bitcast float %1876 to i32, !dbg !56
  %1955 = bitcast float %1877 to i32, !dbg !56
  %1956 = bitcast float %1878 to i32, !dbg !56
  %1957 = bitcast float %1879 to i32, !dbg !56
  %1958 = bitcast float %1880 to i32, !dbg !56
  %1959 = bitcast float %1881 to i32, !dbg !56
  %1960 = bitcast float %1882 to i32, !dbg !56
  %1961 = bitcast float %1883 to i32, !dbg !56
  %1962 = bitcast float %1884 to i32, !dbg !56
  %1963 = bitcast float %1885 to i32, !dbg !56
  %1964 = bitcast float %1886 to i32, !dbg !56
  %1965 = bitcast float %1887 to i32, !dbg !56
  %1966 = bitcast float %1888 to i32, !dbg !56
  %1967 = bitcast float %1889 to i32, !dbg !56
  %1968 = bitcast float %1890 to i32, !dbg !56
  %1969 = bitcast float %1891 to i32, !dbg !56
  %1970 = bitcast float %1892 to i32, !dbg !56
  %1971 = bitcast float %1893 to i32, !dbg !56
  %1972 = bitcast float %1894 to i32, !dbg !56
  %1973 = bitcast float %1895 to i32, !dbg !56
  %1974 = bitcast float %1896 to i32, !dbg !56
  %1975 = bitcast float %1897 to i32, !dbg !56
  %1976 = bitcast float %1898 to i32, !dbg !56
  %1977 = sext i32 %1831 to i64, !dbg !57
  %1978 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1977, !dbg !57
  %1979 = sext i32 %1830 to i64, !dbg !57
  %1980 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1979, !dbg !57
  %1981 = sext i32 %1829 to i64, !dbg !57
  %1982 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1981, !dbg !57
  %1983 = sext i32 %1828 to i64, !dbg !57
  %1984 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1983, !dbg !57
  %1985 = sext i32 %1827 to i64, !dbg !57
  %1986 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1985, !dbg !57
  %1987 = sext i32 %1826 to i64, !dbg !57
  %1988 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1987, !dbg !57
  %1989 = sext i32 %1825 to i64, !dbg !57
  %1990 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1989, !dbg !57
  %1991 = sext i32 %1824 to i64, !dbg !57
  %1992 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1991, !dbg !57
  %1993 = getelementptr bfloat, ptr addrspace(1) %3, i64 %49, !dbg !57
  %1994 = getelementptr bfloat, ptr addrspace(1) %3, i64 %51, !dbg !57
  %1995 = getelementptr bfloat, ptr addrspace(1) %3, i64 %53, !dbg !57
  %1996 = getelementptr bfloat, ptr addrspace(1) %3, i64 %55, !dbg !57
  %1997 = getelementptr bfloat, ptr addrspace(1) %3, i64 %57, !dbg !57
  %1998 = getelementptr bfloat, ptr addrspace(1) %3, i64 %59, !dbg !57
  %1999 = getelementptr bfloat, ptr addrspace(1) %3, i64 %61, !dbg !57
  %2000 = getelementptr bfloat, ptr addrspace(1) %3, i64 %63, !dbg !57
  %2001 = fpext <2 x bfloat> %1727 to <2 x float>, !dbg !58
  %2002 = insertelement <2 x i32> poison, i32 %1759, i64 0, !dbg !48
  %2003 = insertelement <2 x i32> %2002, i32 %1758, i64 1, !dbg !48
  %2004 = bitcast <2 x i32> %2003 to <2 x float>, !dbg !48
  %2005 = fpext <2 x bfloat> %1791 to <2 x float>, !dbg !59
  %2006 = insertelement <2 x i32> poison, i32 %1823, i64 0, !dbg !44
  %2007 = insertelement <2 x i32> %2006, i32 %1822, i64 1, !dbg !44
  %2008 = bitcast <2 x i32> %2007 to <2 x float>, !dbg !44
  %2009 = load <2 x float>, ptr addrspace(3) %1921, align 16, !dbg !56
  %2010 = fadd <2 x float> %2008, %2005, !dbg !60
  %2011 = fadd <2 x float> %2010, splat (float 1.000000e+00), !dbg !61
  %2012 = fmul <2 x float> %2011, %2009, !dbg !62
  %2013 = fadd <2 x float> %2004, %2001, !dbg !63
  %2014 = fadd <2 x float> %2013, %2012, !dbg !64
  %2015 = extractelement <2 x float> %2014, i64 0, !dbg !65
  %2016 = select i1 %21, float %2015, float 0x7FF0000000000000, !dbg !66
  %2017 = extractelement <2 x float> %2014, i64 1, !dbg !65
  %2018 = select i1 %21, float %2017, float 0x7FF0000000000000, !dbg !66
  %2019 = select i1 %21, float %2015, float 0xFFF0000000000000, !dbg !65
  %2020 = select i1 %21, float %2017, float 0xFFF0000000000000, !dbg !65
  %2021 = fptrunc <2 x float> %2014 to <2 x bfloat>, !dbg !67
  %2022 = fpext <2 x bfloat> %1725 to <2 x float>, !dbg !58
  %2023 = insertelement <2 x i32> poison, i32 %1757, i64 0, !dbg !48
  %2024 = insertelement <2 x i32> %2023, i32 %1756, i64 1, !dbg !48
  %2025 = bitcast <2 x i32> %2024 to <2 x float>, !dbg !48
  %2026 = fpext <2 x bfloat> %1789 to <2 x float>, !dbg !59
  %2027 = insertelement <2 x i32> poison, i32 %1821, i64 0, !dbg !44
  %2028 = insertelement <2 x i32> %2027, i32 %1820, i64 1, !dbg !44
  %2029 = bitcast <2 x i32> %2028 to <2 x float>, !dbg !44
  %2030 = load <2 x float>, ptr addrspace(3) %1922, align 8, !dbg !56
  %2031 = fadd <2 x float> %2029, %2026, !dbg !60
  %2032 = fadd <2 x float> %2031, splat (float 1.000000e+00), !dbg !61
  %2033 = fmul <2 x float> %2032, %2030, !dbg !62
  %2034 = fadd <2 x float> %2025, %2022, !dbg !63
  %2035 = fadd <2 x float> %2034, %2033, !dbg !64
  %2036 = extractelement <2 x float> %2035, i64 0, !dbg !65
  %2037 = select i1 %21, float %2036, float 0x7FF0000000000000, !dbg !66
  %2038 = extractelement <2 x float> %2035, i64 1, !dbg !65
  %2039 = select i1 %21, float %2038, float 0x7FF0000000000000, !dbg !66
  %2040 = select i1 %21, float %2036, float 0xFFF0000000000000, !dbg !65
  %2041 = select i1 %21, float %2038, float 0xFFF0000000000000, !dbg !65
  %2042 = fptrunc <2 x float> %2035 to <2 x bfloat>, !dbg !67
  %2043 = fpext <2 x bfloat> %1723 to <2 x float>, !dbg !58
  %2044 = insertelement <2 x i32> poison, i32 %1755, i64 0, !dbg !48
  %2045 = insertelement <2 x i32> %2044, i32 %1754, i64 1, !dbg !48
  %2046 = bitcast <2 x i32> %2045 to <2 x float>, !dbg !48
  %2047 = fpext <2 x bfloat> %1787 to <2 x float>, !dbg !59
  %2048 = insertelement <2 x i32> poison, i32 %1819, i64 0, !dbg !44
  %2049 = insertelement <2 x i32> %2048, i32 %1818, i64 1, !dbg !44
  %2050 = bitcast <2 x i32> %2049 to <2 x float>, !dbg !44
  %2051 = load <2 x float>, ptr addrspace(3) %1923, align 16, !dbg !56
  %2052 = fadd <2 x float> %2050, %2047, !dbg !60
  %2053 = fadd <2 x float> %2052, splat (float 1.000000e+00), !dbg !61
  %2054 = fmul <2 x float> %2053, %2051, !dbg !62
  %2055 = fadd <2 x float> %2046, %2043, !dbg !63
  %2056 = fadd <2 x float> %2055, %2054, !dbg !64
  %2057 = extractelement <2 x float> %2056, i64 0, !dbg !65
  %2058 = select i1 %21, float %2057, float 0x7FF0000000000000, !dbg !66
  %2059 = extractelement <2 x float> %2056, i64 1, !dbg !65
  %2060 = select i1 %21, float %2059, float 0x7FF0000000000000, !dbg !66
  %2061 = select i1 %21, float %2057, float 0xFFF0000000000000, !dbg !65
  %2062 = select i1 %21, float %2059, float 0xFFF0000000000000, !dbg !65
  %2063 = fptrunc <2 x float> %2056 to <2 x bfloat>, !dbg !67
  %2064 = fpext <2 x bfloat> %1721 to <2 x float>, !dbg !58
  %2065 = insertelement <2 x i32> poison, i32 %1753, i64 0, !dbg !48
  %2066 = insertelement <2 x i32> %2065, i32 %1752, i64 1, !dbg !48
  %2067 = bitcast <2 x i32> %2066 to <2 x float>, !dbg !48
  %2068 = fpext <2 x bfloat> %1785 to <2 x float>, !dbg !59
  %2069 = insertelement <2 x i32> poison, i32 %1817, i64 0, !dbg !44
  %2070 = insertelement <2 x i32> %2069, i32 %1816, i64 1, !dbg !44
  %2071 = bitcast <2 x i32> %2070 to <2 x float>, !dbg !44
  %2072 = load <2 x float>, ptr addrspace(3) %1924, align 8, !dbg !56
  %2073 = fadd <2 x float> %2071, %2068, !dbg !60
  %2074 = fadd <2 x float> %2073, splat (float 1.000000e+00), !dbg !61
  %2075 = fmul <2 x float> %2074, %2072, !dbg !62
  %2076 = fadd <2 x float> %2067, %2064, !dbg !63
  %2077 = fadd <2 x float> %2076, %2075, !dbg !64
  %2078 = extractelement <2 x float> %2077, i64 0, !dbg !65
  %2079 = select i1 %21, float %2078, float 0x7FF0000000000000, !dbg !66
  %2080 = extractelement <2 x float> %2077, i64 1, !dbg !65
  %2081 = select i1 %21, float %2080, float 0x7FF0000000000000, !dbg !66
  %2082 = select i1 %21, float %2078, float 0xFFF0000000000000, !dbg !65
  %2083 = select i1 %21, float %2080, float 0xFFF0000000000000, !dbg !65
  %2084 = fptrunc <2 x float> %2077 to <2 x bfloat>, !dbg !67
  %2085 = fpext <2 x bfloat> %1719 to <2 x float>, !dbg !58
  %2086 = insertelement <2 x i32> poison, i32 %1751, i64 0, !dbg !48
  %2087 = insertelement <2 x i32> %2086, i32 %1750, i64 1, !dbg !48
  %2088 = bitcast <2 x i32> %2087 to <2 x float>, !dbg !48
  %2089 = fpext <2 x bfloat> %1783 to <2 x float>, !dbg !59
  %2090 = insertelement <2 x i32> poison, i32 %1815, i64 0, !dbg !44
  %2091 = insertelement <2 x i32> %2090, i32 %1814, i64 1, !dbg !44
  %2092 = bitcast <2 x i32> %2091 to <2 x float>, !dbg !44
  %2093 = load <2 x float>, ptr addrspace(3) %1925, align 16, !dbg !56
  %2094 = fadd <2 x float> %2092, %2089, !dbg !60
  %2095 = fadd <2 x float> %2094, splat (float 1.000000e+00), !dbg !61
  %2096 = fmul <2 x float> %2095, %2093, !dbg !62
  %2097 = fadd <2 x float> %2088, %2085, !dbg !63
  %2098 = fadd <2 x float> %2097, %2096, !dbg !64
  %2099 = extractelement <2 x float> %2098, i64 0, !dbg !65
  %2100 = select i1 %21, float %2099, float 0x7FF0000000000000, !dbg !66
  %2101 = extractelement <2 x float> %2098, i64 1, !dbg !65
  %2102 = select i1 %21, float %2101, float 0x7FF0000000000000, !dbg !66
  %2103 = select i1 %21, float %2099, float 0xFFF0000000000000, !dbg !65
  %2104 = select i1 %21, float %2101, float 0xFFF0000000000000, !dbg !65
  %2105 = fptrunc <2 x float> %2098 to <2 x bfloat>, !dbg !67
  %2106 = fpext <2 x bfloat> %1717 to <2 x float>, !dbg !58
  %2107 = insertelement <2 x i32> poison, i32 %1749, i64 0, !dbg !48
  %2108 = insertelement <2 x i32> %2107, i32 %1748, i64 1, !dbg !48
  %2109 = bitcast <2 x i32> %2108 to <2 x float>, !dbg !48
  %2110 = fpext <2 x bfloat> %1781 to <2 x float>, !dbg !59
  %2111 = insertelement <2 x i32> poison, i32 %1813, i64 0, !dbg !44
  %2112 = insertelement <2 x i32> %2111, i32 %1812, i64 1, !dbg !44
  %2113 = bitcast <2 x i32> %2112 to <2 x float>, !dbg !44
  %2114 = load <2 x float>, ptr addrspace(3) %1926, align 8, !dbg !56
  %2115 = fadd <2 x float> %2113, %2110, !dbg !60
  %2116 = fadd <2 x float> %2115, splat (float 1.000000e+00), !dbg !61
  %2117 = fmul <2 x float> %2116, %2114, !dbg !62
  %2118 = fadd <2 x float> %2109, %2106, !dbg !63
  %2119 = fadd <2 x float> %2118, %2117, !dbg !64
  %2120 = extractelement <2 x float> %2119, i64 0, !dbg !65
  %2121 = select i1 %21, float %2120, float 0x7FF0000000000000, !dbg !66
  %2122 = extractelement <2 x float> %2119, i64 1, !dbg !65
  %2123 = select i1 %21, float %2122, float 0x7FF0000000000000, !dbg !66
  %2124 = select i1 %21, float %2120, float 0xFFF0000000000000, !dbg !65
  %2125 = select i1 %21, float %2122, float 0xFFF0000000000000, !dbg !65
  %2126 = fptrunc <2 x float> %2119 to <2 x bfloat>, !dbg !67
  %2127 = fpext <2 x bfloat> %1715 to <2 x float>, !dbg !58
  %2128 = insertelement <2 x i32> poison, i32 %1747, i64 0, !dbg !48
  %2129 = insertelement <2 x i32> %2128, i32 %1746, i64 1, !dbg !48
  %2130 = bitcast <2 x i32> %2129 to <2 x float>, !dbg !48
  %2131 = fpext <2 x bfloat> %1779 to <2 x float>, !dbg !59
  %2132 = insertelement <2 x i32> poison, i32 %1811, i64 0, !dbg !44
  %2133 = insertelement <2 x i32> %2132, i32 %1810, i64 1, !dbg !44
  %2134 = bitcast <2 x i32> %2133 to <2 x float>, !dbg !44
  %2135 = load <2 x float>, ptr addrspace(3) %1927, align 16, !dbg !56
  %2136 = fadd <2 x float> %2134, %2131, !dbg !60
  %2137 = fadd <2 x float> %2136, splat (float 1.000000e+00), !dbg !61
  %2138 = fmul <2 x float> %2137, %2135, !dbg !62
  %2139 = fadd <2 x float> %2130, %2127, !dbg !63
  %2140 = fadd <2 x float> %2139, %2138, !dbg !64
  %2141 = extractelement <2 x float> %2140, i64 0, !dbg !65
  %2142 = select i1 %21, float %2141, float 0x7FF0000000000000, !dbg !66
  %2143 = extractelement <2 x float> %2140, i64 1, !dbg !65
  %2144 = select i1 %21, float %2143, float 0x7FF0000000000000, !dbg !66
  %2145 = select i1 %21, float %2141, float 0xFFF0000000000000, !dbg !65
  %2146 = select i1 %21, float %2143, float 0xFFF0000000000000, !dbg !65
  %2147 = fptrunc <2 x float> %2140 to <2 x bfloat>, !dbg !67
  %2148 = fpext <2 x bfloat> %1713 to <2 x float>, !dbg !58
  %2149 = insertelement <2 x i32> poison, i32 %1745, i64 0, !dbg !48
  %2150 = insertelement <2 x i32> %2149, i32 %1744, i64 1, !dbg !48
  %2151 = bitcast <2 x i32> %2150 to <2 x float>, !dbg !48
  %2152 = fpext <2 x bfloat> %1777 to <2 x float>, !dbg !59
  %2153 = insertelement <2 x i32> poison, i32 %1809, i64 0, !dbg !44
  %2154 = insertelement <2 x i32> %2153, i32 %1808, i64 1, !dbg !44
  %2155 = bitcast <2 x i32> %2154 to <2 x float>, !dbg !44
  %2156 = load <2 x float>, ptr addrspace(3) %1928, align 8, !dbg !56
  %2157 = fadd <2 x float> %2155, %2152, !dbg !60
  %2158 = fadd <2 x float> %2157, splat (float 1.000000e+00), !dbg !61
  %2159 = fmul <2 x float> %2158, %2156, !dbg !62
  %2160 = fadd <2 x float> %2151, %2148, !dbg !63
  %2161 = fadd <2 x float> %2160, %2159, !dbg !64
  %2162 = extractelement <2 x float> %2161, i64 0, !dbg !65
  %2163 = select i1 %21, float %2162, float 0x7FF0000000000000, !dbg !66
  %2164 = extractelement <2 x float> %2161, i64 1, !dbg !65
  %2165 = select i1 %21, float %2164, float 0x7FF0000000000000, !dbg !66
  %2166 = select i1 %21, float %2162, float 0xFFF0000000000000, !dbg !65
  %2167 = select i1 %21, float %2164, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1899, i32 %1929, i32 %1930, i32 %1931, i32 %1932, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1905, i32 %1933, i32 %1934, i32 %1935, i32 %1936, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1910, i32 %1937, i32 %1938, i32 %1939, i32 %1940, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1916, i32 %1941, i32 %1942, i32 %1943, i32 %1944, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2168 = fptrunc <2 x float> %2161 to <2 x bfloat>, !dbg !67
  %2169 = fpext <2 x bfloat> %1711 to <2 x float>, !dbg !58
  %2170 = insertelement <2 x i32> poison, i32 %1743, i64 0, !dbg !48
  %2171 = insertelement <2 x i32> %2170, i32 %1742, i64 1, !dbg !48
  %2172 = bitcast <2 x i32> %2171 to <2 x float>, !dbg !48
  %2173 = fpext <2 x bfloat> %1775 to <2 x float>, !dbg !59
  %2174 = insertelement <2 x i32> poison, i32 %1807, i64 0, !dbg !44
  %2175 = insertelement <2 x i32> %2174, i32 %1806, i64 1, !dbg !44
  %2176 = bitcast <2 x i32> %2175 to <2 x float>, !dbg !44
  %2177 = fadd <2 x float> %2176, %2173, !dbg !60
  %2178 = fadd <2 x float> %2177, splat (float 1.000000e+00), !dbg !61
  %2179 = fadd <2 x float> %2172, %2169, !dbg !63
  %2180 = load <2 x float>, ptr addrspace(3) %1921, align 16, !dbg !56
  %2181 = fmul <2 x float> %2178, %2180, !dbg !62
  %2182 = fadd <2 x float> %2179, %2181, !dbg !64
  %2183 = extractelement <2 x float> %2182, i64 0, !dbg !65
  %2184 = select i1 %21, float %2183, float 0x7FF0000000000000, !dbg !66
  %2185 = extractelement <2 x float> %2182, i64 1, !dbg !65
  %2186 = select i1 %21, float %2185, float 0x7FF0000000000000, !dbg !66
  %2187 = select i1 %21, float %2183, float 0xFFF0000000000000, !dbg !65
  %2188 = select i1 %21, float %2185, float 0xFFF0000000000000, !dbg !65
  %2189 = fptrunc <2 x float> %2182 to <2 x bfloat>, !dbg !67
  %2190 = fpext <2 x bfloat> %1709 to <2 x float>, !dbg !58
  %2191 = insertelement <2 x i32> poison, i32 %1741, i64 0, !dbg !48
  %2192 = insertelement <2 x i32> %2191, i32 %1740, i64 1, !dbg !48
  %2193 = bitcast <2 x i32> %2192 to <2 x float>, !dbg !48
  %2194 = fpext <2 x bfloat> %1773 to <2 x float>, !dbg !59
  %2195 = insertelement <2 x i32> poison, i32 %1805, i64 0, !dbg !44
  %2196 = insertelement <2 x i32> %2195, i32 %1804, i64 1, !dbg !44
  %2197 = bitcast <2 x i32> %2196 to <2 x float>, !dbg !44
  %2198 = fadd <2 x float> %2197, %2194, !dbg !60
  %2199 = fadd <2 x float> %2198, splat (float 1.000000e+00), !dbg !61
  %2200 = fadd <2 x float> %2193, %2190, !dbg !63
  %2201 = load <2 x float>, ptr addrspace(3) %1922, align 8, !dbg !56
  %2202 = fmul <2 x float> %2199, %2201, !dbg !62
  %2203 = fadd <2 x float> %2200, %2202, !dbg !64
  %2204 = extractelement <2 x float> %2203, i64 0, !dbg !65
  %2205 = select i1 %21, float %2204, float 0x7FF0000000000000, !dbg !66
  %2206 = extractelement <2 x float> %2203, i64 1, !dbg !65
  %2207 = select i1 %21, float %2206, float 0x7FF0000000000000, !dbg !66
  %2208 = select i1 %21, float %2204, float 0xFFF0000000000000, !dbg !65
  %2209 = select i1 %21, float %2206, float 0xFFF0000000000000, !dbg !65
  %2210 = fptrunc <2 x float> %2203 to <2 x bfloat>, !dbg !67
  %2211 = fpext <2 x bfloat> %1707 to <2 x float>, !dbg !58
  %2212 = insertelement <2 x i32> poison, i32 %1739, i64 0, !dbg !48
  %2213 = insertelement <2 x i32> %2212, i32 %1738, i64 1, !dbg !48
  %2214 = bitcast <2 x i32> %2213 to <2 x float>, !dbg !48
  %2215 = fpext <2 x bfloat> %1771 to <2 x float>, !dbg !59
  %2216 = insertelement <2 x i32> poison, i32 %1803, i64 0, !dbg !44
  %2217 = insertelement <2 x i32> %2216, i32 %1802, i64 1, !dbg !44
  %2218 = bitcast <2 x i32> %2217 to <2 x float>, !dbg !44
  %2219 = fadd <2 x float> %2218, %2215, !dbg !60
  %2220 = fadd <2 x float> %2219, splat (float 1.000000e+00), !dbg !61
  %2221 = fadd <2 x float> %2214, %2211, !dbg !63
  %2222 = load <2 x float>, ptr addrspace(3) %1923, align 16, !dbg !56
  %2223 = fmul <2 x float> %2220, %2222, !dbg !62
  %2224 = fadd <2 x float> %2221, %2223, !dbg !64
  %2225 = extractelement <2 x float> %2224, i64 0, !dbg !65
  %2226 = select i1 %21, float %2225, float 0x7FF0000000000000, !dbg !66
  %2227 = extractelement <2 x float> %2224, i64 1, !dbg !65
  %2228 = select i1 %21, float %2227, float 0x7FF0000000000000, !dbg !66
  %2229 = select i1 %21, float %2225, float 0xFFF0000000000000, !dbg !65
  %2230 = select i1 %21, float %2227, float 0xFFF0000000000000, !dbg !65
  %2231 = fptrunc <2 x float> %2224 to <2 x bfloat>, !dbg !67
  %2232 = fpext <2 x bfloat> %1705 to <2 x float>, !dbg !58
  %2233 = insertelement <2 x i32> poison, i32 %1737, i64 0, !dbg !48
  %2234 = insertelement <2 x i32> %2233, i32 %1736, i64 1, !dbg !48
  %2235 = bitcast <2 x i32> %2234 to <2 x float>, !dbg !48
  %2236 = fpext <2 x bfloat> %1769 to <2 x float>, !dbg !59
  %2237 = insertelement <2 x i32> poison, i32 %1801, i64 0, !dbg !44
  %2238 = insertelement <2 x i32> %2237, i32 %1800, i64 1, !dbg !44
  %2239 = bitcast <2 x i32> %2238 to <2 x float>, !dbg !44
  %2240 = fadd <2 x float> %2239, %2236, !dbg !60
  %2241 = fadd <2 x float> %2240, splat (float 1.000000e+00), !dbg !61
  %2242 = fadd <2 x float> %2235, %2232, !dbg !63
  %2243 = load <2 x float>, ptr addrspace(3) %1924, align 8, !dbg !56
  %2244 = fmul <2 x float> %2241, %2243, !dbg !62
  %2245 = fadd <2 x float> %2242, %2244, !dbg !64
  %2246 = extractelement <2 x float> %2245, i64 0, !dbg !65
  %2247 = select i1 %21, float %2246, float 0x7FF0000000000000, !dbg !66
  %2248 = extractelement <2 x float> %2245, i64 1, !dbg !65
  %2249 = select i1 %21, float %2248, float 0x7FF0000000000000, !dbg !66
  %2250 = select i1 %21, float %2246, float 0xFFF0000000000000, !dbg !65
  %2251 = select i1 %21, float %2248, float 0xFFF0000000000000, !dbg !65
  %2252 = fptrunc <2 x float> %2245 to <2 x bfloat>, !dbg !67
  %2253 = fpext <2 x bfloat> %1703 to <2 x float>, !dbg !58
  %2254 = insertelement <2 x i32> poison, i32 %1735, i64 0, !dbg !48
  %2255 = insertelement <2 x i32> %2254, i32 %1734, i64 1, !dbg !48
  %2256 = bitcast <2 x i32> %2255 to <2 x float>, !dbg !48
  %2257 = fpext <2 x bfloat> %1767 to <2 x float>, !dbg !59
  %2258 = insertelement <2 x i32> poison, i32 %1799, i64 0, !dbg !44
  %2259 = insertelement <2 x i32> %2258, i32 %1798, i64 1, !dbg !44
  %2260 = bitcast <2 x i32> %2259 to <2 x float>, !dbg !44
  %2261 = fadd <2 x float> %2260, %2257, !dbg !60
  %2262 = fadd <2 x float> %2261, splat (float 1.000000e+00), !dbg !61
  %2263 = fadd <2 x float> %2256, %2253, !dbg !63
  %2264 = load <2 x float>, ptr addrspace(3) %1925, align 16, !dbg !56
  %2265 = fmul <2 x float> %2262, %2264, !dbg !62
  %2266 = fadd <2 x float> %2263, %2265, !dbg !64
  %2267 = fptrunc <2 x float> %2266 to <2 x bfloat>, !dbg !67
  %2268 = fpext <2 x bfloat> %1701 to <2 x float>, !dbg !58
  %2269 = insertelement <2 x i32> poison, i32 %1733, i64 0, !dbg !48
  %2270 = insertelement <2 x i32> %2269, i32 %1732, i64 1, !dbg !48
  %2271 = bitcast <2 x i32> %2270 to <2 x float>, !dbg !48
  %2272 = fpext <2 x bfloat> %1765 to <2 x float>, !dbg !59
  %2273 = insertelement <2 x i32> poison, i32 %1797, i64 0, !dbg !44
  %2274 = insertelement <2 x i32> %2273, i32 %1796, i64 1, !dbg !44
  %2275 = bitcast <2 x i32> %2274 to <2 x float>, !dbg !44
  %2276 = fadd <2 x float> %2275, %2272, !dbg !60
  %2277 = fadd <2 x float> %2276, splat (float 1.000000e+00), !dbg !61
  %2278 = fadd <2 x float> %2271, %2268, !dbg !63
  %2279 = load <2 x float>, ptr addrspace(3) %1926, align 8, !dbg !56
  %2280 = fmul <2 x float> %2277, %2279, !dbg !62
  %2281 = fadd <2 x float> %2278, %2280, !dbg !64
  %2282 = fptrunc <2 x float> %2281 to <2 x bfloat>, !dbg !67
  %2283 = fpext <2 x bfloat> %1699 to <2 x float>, !dbg !58
  %2284 = insertelement <2 x i32> poison, i32 %1731, i64 0, !dbg !48
  %2285 = insertelement <2 x i32> %2284, i32 %1730, i64 1, !dbg !48
  %2286 = bitcast <2 x i32> %2285 to <2 x float>, !dbg !48
  %2287 = fpext <2 x bfloat> %1763 to <2 x float>, !dbg !59
  %2288 = insertelement <2 x i32> poison, i32 %1795, i64 0, !dbg !44
  %2289 = insertelement <2 x i32> %2288, i32 %1794, i64 1, !dbg !44
  %2290 = bitcast <2 x i32> %2289 to <2 x float>, !dbg !44
  %2291 = fadd <2 x float> %2290, %2287, !dbg !60
  %2292 = fadd <2 x float> %2291, splat (float 1.000000e+00), !dbg !61
  %2293 = fadd <2 x float> %2286, %2283, !dbg !63
  %2294 = load <2 x float>, ptr addrspace(3) %1927, align 16, !dbg !56
  %2295 = fmul <2 x float> %2292, %2294, !dbg !62
  %2296 = fadd <2 x float> %2293, %2295, !dbg !64
  %2297 = fptrunc <2 x float> %2296 to <2 x bfloat>, !dbg !67
  %2298 = fpext <2 x bfloat> %1697 to <2 x float>, !dbg !58
  %2299 = insertelement <2 x i32> poison, i32 %1729, i64 0, !dbg !48
  %2300 = insertelement <2 x i32> %2299, i32 %1728, i64 1, !dbg !48
  %2301 = bitcast <2 x i32> %2300 to <2 x float>, !dbg !48
  %2302 = fpext <2 x bfloat> %1761 to <2 x float>, !dbg !59
  %2303 = insertelement <2 x i32> poison, i32 %1793, i64 0, !dbg !44
  %2304 = insertelement <2 x i32> %2303, i32 %1792, i64 1, !dbg !44
  %2305 = bitcast <2 x i32> %2304 to <2 x float>, !dbg !44
  %2306 = fadd <2 x float> %2305, %2302, !dbg !60
  %2307 = fadd <2 x float> %2306, splat (float 1.000000e+00), !dbg !61
  %2308 = fadd <2 x float> %2301, %2298, !dbg !63
  %2309 = load <2 x float>, ptr addrspace(3) %1928, align 8, !dbg !56
  %2310 = fmul <2 x float> %2307, %2309, !dbg !62
  %2311 = fadd <2 x float> %2308, %2310, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1899, i32 %1945, i32 %1946, i32 %1947, i32 %1948, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1905, i32 %1949, i32 %1950, i32 %1951, i32 %1952, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1910, i32 %1953, i32 %1954, i32 %1955, i32 %1956, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1916, i32 %1957, i32 %1958, i32 %1959, i32 %1960, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2312 = fptrunc <2 x float> %2311 to <2 x bfloat>, !dbg !67
  %2313 = load <2 x float>, ptr addrspace(3) %1921, align 16, !dbg !56
  %2314 = fmul <2 x float> %2011, %2313, !dbg !62
  %2315 = fadd <2 x float> %2013, %2314, !dbg !64
  %2316 = extractelement <2 x float> %2315, i64 0, !dbg !65
  %2317 = select i1 %22, float %2316, float 0x7FF0000000000000, !dbg !66
  %2318 = extractelement <2 x float> %2315, i64 1, !dbg !65
  %2319 = select i1 %22, float %2318, float 0x7FF0000000000000, !dbg !66
  %2320 = select i1 %22, float %2316, float 0xFFF0000000000000, !dbg !65
  %2321 = select i1 %22, float %2318, float 0xFFF0000000000000, !dbg !65
  %2322 = fptrunc <2 x float> %2315 to <2 x bfloat>, !dbg !67
  %2323 = load <2 x float>, ptr addrspace(3) %1922, align 8, !dbg !56
  %2324 = fmul <2 x float> %2032, %2323, !dbg !62
  %2325 = fadd <2 x float> %2034, %2324, !dbg !64
  %2326 = extractelement <2 x float> %2325, i64 0, !dbg !65
  %2327 = select i1 %22, float %2326, float 0x7FF0000000000000, !dbg !66
  %2328 = extractelement <2 x float> %2325, i64 1, !dbg !65
  %2329 = select i1 %22, float %2328, float 0x7FF0000000000000, !dbg !66
  %2330 = select i1 %22, float %2326, float 0xFFF0000000000000, !dbg !65
  %2331 = select i1 %22, float %2328, float 0xFFF0000000000000, !dbg !65
  %2332 = fptrunc <2 x float> %2325 to <2 x bfloat>, !dbg !67
  %2333 = load <2 x float>, ptr addrspace(3) %1923, align 16, !dbg !56
  %2334 = fmul <2 x float> %2053, %2333, !dbg !62
  %2335 = fadd <2 x float> %2055, %2334, !dbg !64
  %2336 = extractelement <2 x float> %2335, i64 0, !dbg !65
  %2337 = select i1 %22, float %2336, float 0x7FF0000000000000, !dbg !66
  %2338 = extractelement <2 x float> %2335, i64 1, !dbg !65
  %2339 = select i1 %22, float %2338, float 0x7FF0000000000000, !dbg !66
  %2340 = select i1 %22, float %2336, float 0xFFF0000000000000, !dbg !65
  %2341 = select i1 %22, float %2338, float 0xFFF0000000000000, !dbg !65
  %2342 = fptrunc <2 x float> %2335 to <2 x bfloat>, !dbg !67
  %2343 = load <2 x float>, ptr addrspace(3) %1924, align 8, !dbg !56
  %2344 = fmul <2 x float> %2074, %2343, !dbg !62
  %2345 = fadd <2 x float> %2076, %2344, !dbg !64
  %2346 = extractelement <2 x float> %2345, i64 0, !dbg !65
  %2347 = select i1 %22, float %2346, float 0x7FF0000000000000, !dbg !66
  %2348 = extractelement <2 x float> %2345, i64 1, !dbg !65
  %2349 = select i1 %22, float %2348, float 0x7FF0000000000000, !dbg !66
  %2350 = select i1 %22, float %2346, float 0xFFF0000000000000, !dbg !65
  %2351 = select i1 %22, float %2348, float 0xFFF0000000000000, !dbg !65
  %2352 = fptrunc <2 x float> %2345 to <2 x bfloat>, !dbg !67
  %2353 = load <2 x float>, ptr addrspace(3) %1925, align 16, !dbg !56
  %2354 = fmul <2 x float> %2095, %2353, !dbg !62
  %2355 = fadd <2 x float> %2097, %2354, !dbg !64
  %2356 = extractelement <2 x float> %2355, i64 0, !dbg !65
  %2357 = select i1 %22, float %2356, float 0x7FF0000000000000, !dbg !66
  %2358 = extractelement <2 x float> %2355, i64 1, !dbg !65
  %2359 = select i1 %22, float %2358, float 0x7FF0000000000000, !dbg !66
  %2360 = select i1 %22, float %2356, float 0xFFF0000000000000, !dbg !65
  %2361 = select i1 %22, float %2358, float 0xFFF0000000000000, !dbg !65
  %2362 = fptrunc <2 x float> %2355 to <2 x bfloat>, !dbg !67
  %2363 = load <2 x float>, ptr addrspace(3) %1926, align 8, !dbg !56
  %2364 = fmul <2 x float> %2116, %2363, !dbg !62
  %2365 = fadd <2 x float> %2118, %2364, !dbg !64
  %2366 = extractelement <2 x float> %2365, i64 0, !dbg !65
  %2367 = select i1 %22, float %2366, float 0x7FF0000000000000, !dbg !66
  %2368 = extractelement <2 x float> %2365, i64 1, !dbg !65
  %2369 = select i1 %22, float %2368, float 0x7FF0000000000000, !dbg !66
  %2370 = select i1 %22, float %2366, float 0xFFF0000000000000, !dbg !65
  %2371 = select i1 %22, float %2368, float 0xFFF0000000000000, !dbg !65
  %2372 = fptrunc <2 x float> %2365 to <2 x bfloat>, !dbg !67
  %2373 = load <2 x float>, ptr addrspace(3) %1927, align 16, !dbg !56
  %2374 = fmul <2 x float> %2137, %2373, !dbg !62
  %2375 = fadd <2 x float> %2139, %2374, !dbg !64
  %2376 = extractelement <2 x float> %2375, i64 0, !dbg !65
  %2377 = select i1 %22, float %2376, float 0x7FF0000000000000, !dbg !66
  %2378 = extractelement <2 x float> %2375, i64 1, !dbg !65
  %2379 = select i1 %22, float %2378, float 0x7FF0000000000000, !dbg !66
  %2380 = select i1 %22, float %2376, float 0xFFF0000000000000, !dbg !65
  %2381 = select i1 %22, float %2378, float 0xFFF0000000000000, !dbg !65
  %2382 = fptrunc <2 x float> %2375 to <2 x bfloat>, !dbg !67
  %2383 = load <2 x float>, ptr addrspace(3) %1928, align 8, !dbg !56
  %2384 = fmul <2 x float> %2158, %2383, !dbg !62
  %2385 = fadd <2 x float> %2160, %2384, !dbg !64
  %2386 = extractelement <2 x float> %2385, i64 0, !dbg !65
  %2387 = select i1 %22, float %2386, float 0x7FF0000000000000, !dbg !66
  %2388 = extractelement <2 x float> %2385, i64 1, !dbg !65
  %2389 = select i1 %22, float %2388, float 0x7FF0000000000000, !dbg !66
  %2390 = select i1 %22, float %2386, float 0xFFF0000000000000, !dbg !65
  %2391 = select i1 %22, float %2388, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1899, i32 %1961, i32 %1962, i32 %1963, i32 %1964, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1905, i32 %1965, i32 %1966, i32 %1967, i32 %1968, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1910, i32 %1969, i32 %1970, i32 %1971, i32 %1972, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1916, i32 %1973, i32 %1974, i32 %1975, i32 %1976, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2392 = fptrunc <2 x float> %2385 to <2 x bfloat>, !dbg !67
  %2393 = load <2 x float>, ptr addrspace(3) %1921, align 16, !dbg !56
  %2394 = fmul <2 x float> %2178, %2393, !dbg !62
  %2395 = fadd <2 x float> %2179, %2394, !dbg !64
  %2396 = extractelement <2 x float> %2395, i64 0, !dbg !65
  %2397 = select i1 %22, float %2396, float 0x7FF0000000000000, !dbg !66
  %2398 = extractelement <2 x float> %2395, i64 1, !dbg !65
  %2399 = select i1 %22, float %2398, float 0x7FF0000000000000, !dbg !66
  %2400 = select i1 %22, float %2396, float 0xFFF0000000000000, !dbg !65
  %2401 = select i1 %22, float %2398, float 0xFFF0000000000000, !dbg !65
  %2402 = fptrunc <2 x float> %2395 to <2 x bfloat>, !dbg !67
  %2403 = load <2 x float>, ptr addrspace(3) %1922, align 8, !dbg !56
  %2404 = fmul <2 x float> %2199, %2403, !dbg !62
  %2405 = fadd <2 x float> %2200, %2404, !dbg !64
  %2406 = extractelement <2 x float> %2405, i64 0, !dbg !65
  %2407 = select i1 %22, float %2406, float 0x7FF0000000000000, !dbg !66
  %2408 = extractelement <2 x float> %2405, i64 1, !dbg !65
  %2409 = select i1 %22, float %2408, float 0x7FF0000000000000, !dbg !66
  %2410 = select i1 %22, float %2406, float 0xFFF0000000000000, !dbg !65
  %2411 = select i1 %22, float %2408, float 0xFFF0000000000000, !dbg !65
  %2412 = fptrunc <2 x float> %2405 to <2 x bfloat>, !dbg !67
  %2413 = load <2 x float>, ptr addrspace(3) %1923, align 16, !dbg !56
  %2414 = fmul <2 x float> %2220, %2413, !dbg !62
  %2415 = fadd <2 x float> %2221, %2414, !dbg !64
  %2416 = extractelement <2 x float> %2415, i64 0, !dbg !65
  %2417 = select i1 %22, float %2416, float 0x7FF0000000000000, !dbg !66
  %2418 = extractelement <2 x float> %2415, i64 1, !dbg !65
  %2419 = select i1 %22, float %2418, float 0x7FF0000000000000, !dbg !66
  %2420 = select i1 %22, float %2416, float 0xFFF0000000000000, !dbg !65
  %2421 = select i1 %22, float %2418, float 0xFFF0000000000000, !dbg !65
  %2422 = fptrunc <2 x float> %2415 to <2 x bfloat>, !dbg !67
  %2423 = load <2 x float>, ptr addrspace(3) %1924, align 8, !dbg !56
  %2424 = fmul <2 x float> %2241, %2423, !dbg !62
  %2425 = fadd <2 x float> %2242, %2424, !dbg !64
  %2426 = extractelement <2 x float> %2425, i64 0, !dbg !65
  %2427 = select i1 %22, float %2426, float 0x7FF0000000000000, !dbg !66
  %2428 = extractelement <2 x float> %2425, i64 1, !dbg !65
  %2429 = select i1 %22, float %2428, float 0x7FF0000000000000, !dbg !66
  %2430 = select i1 %22, float %2426, float 0xFFF0000000000000, !dbg !65
  %2431 = select i1 %22, float %2428, float 0xFFF0000000000000, !dbg !65
  %2432 = fptrunc <2 x float> %2425 to <2 x bfloat>, !dbg !67
  %2433 = load <2 x float>, ptr addrspace(3) %1925, align 16, !dbg !56
  %2434 = fmul <2 x float> %2262, %2433, !dbg !62
  %2435 = fadd <2 x float> %2263, %2434, !dbg !64
  %2436 = fptrunc <2 x float> %2435 to <2 x bfloat>, !dbg !67
  %2437 = load <2 x float>, ptr addrspace(3) %1926, align 8, !dbg !56
  %2438 = fmul <2 x float> %2277, %2437, !dbg !62
  %2439 = fadd <2 x float> %2278, %2438, !dbg !64
  %2440 = fptrunc <2 x float> %2439 to <2 x bfloat>, !dbg !67
  %2441 = load <2 x float>, ptr addrspace(3) %1927, align 16, !dbg !56
  %2442 = fmul <2 x float> %2292, %2441, !dbg !62
  %2443 = fadd <2 x float> %2293, %2442, !dbg !64
  %2444 = fptrunc <2 x float> %2443 to <2 x bfloat>, !dbg !67
  %2445 = load <2 x float>, ptr addrspace(3) %1928, align 8, !dbg !56
  %2446 = fmul <2 x float> %2307, %2445, !dbg !62
  %2447 = fadd <2 x float> %2308, %2446, !dbg !64
  %2448 = fptrunc <2 x float> %2447 to <2 x bfloat>, !dbg !67
  %2449 = bitcast <2 x bfloat> %2021 to i32, !dbg !67
  %2450 = bitcast <2 x bfloat> %2042 to i32, !dbg !67
  %2451 = bitcast <2 x bfloat> %2063 to i32, !dbg !67
  %2452 = bitcast <2 x bfloat> %2084 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2449, i32 %2450, i32 %2451, i32 %2452, ptr addrspace(1) %1978, i1 %21) #5, !dbg !67
  %2453 = bitcast <2 x bfloat> %2105 to i32, !dbg !67
  %2454 = bitcast <2 x bfloat> %2126 to i32, !dbg !67
  %2455 = bitcast <2 x bfloat> %2147 to i32, !dbg !67
  %2456 = bitcast <2 x bfloat> %2168 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2453, i32 %2454, i32 %2455, i32 %2456, ptr addrspace(1) %1980, i1 %21) #5, !dbg !67
  %2457 = bitcast <2 x bfloat> %2189 to i32, !dbg !67
  %2458 = bitcast <2 x bfloat> %2210 to i32, !dbg !67
  %2459 = bitcast <2 x bfloat> %2231 to i32, !dbg !67
  %2460 = bitcast <2 x bfloat> %2252 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2457, i32 %2458, i32 %2459, i32 %2460, ptr addrspace(1) %1982, i1 %21) #5, !dbg !67
  %2461 = bitcast <2 x bfloat> %2267 to i32, !dbg !67
  %2462 = bitcast <2 x bfloat> %2282 to i32, !dbg !67
  %2463 = bitcast <2 x bfloat> %2297 to i32, !dbg !67
  %2464 = bitcast <2 x bfloat> %2312 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2461, i32 %2462, i32 %2463, i32 %2464, ptr addrspace(1) %1984, i1 false) #5, !dbg !67
  %2465 = bitcast <2 x bfloat> %2322 to i32, !dbg !67
  %2466 = bitcast <2 x bfloat> %2332 to i32, !dbg !67
  %2467 = bitcast <2 x bfloat> %2342 to i32, !dbg !67
  %2468 = bitcast <2 x bfloat> %2352 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2465, i32 %2466, i32 %2467, i32 %2468, ptr addrspace(1) %1986, i1 %22) #5, !dbg !67
  %2469 = bitcast <2 x bfloat> %2362 to i32, !dbg !67
  %2470 = bitcast <2 x bfloat> %2372 to i32, !dbg !67
  %2471 = bitcast <2 x bfloat> %2382 to i32, !dbg !67
  %2472 = bitcast <2 x bfloat> %2392 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2469, i32 %2470, i32 %2471, i32 %2472, ptr addrspace(1) %1988, i1 %22) #5, !dbg !67
  %2473 = bitcast <2 x bfloat> %2402 to i32, !dbg !67
  %2474 = bitcast <2 x bfloat> %2412 to i32, !dbg !67
  %2475 = bitcast <2 x bfloat> %2422 to i32, !dbg !67
  %2476 = bitcast <2 x bfloat> %2432 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2473, i32 %2474, i32 %2475, i32 %2476, ptr addrspace(1) %1990, i1 %22) #5, !dbg !67
  %2477 = bitcast <2 x bfloat> %2436 to i32, !dbg !67
  %2478 = bitcast <2 x bfloat> %2440 to i32, !dbg !67
  %2479 = bitcast <2 x bfloat> %2444 to i32, !dbg !67
  %2480 = bitcast <2 x bfloat> %2448 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2477, i32 %2478, i32 %2479, i32 %2480, ptr addrspace(1) %1992, i1 false) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2481 = fcmp olt float %2016, %2018, !dbg !70
  %2482 = fcmp uno float %2016, 0.000000e+00, !dbg !71
  %2483 = or i1 %2481, %2482, !dbg !72
  %2484 = select i1 %2483, float %2016, float %2018, !dbg !73
  %2485 = fcmp olt float %2484, %2037, !dbg !70
  %2486 = fcmp uno float %2484, 0.000000e+00, !dbg !71
  %2487 = or i1 %2485, %2486, !dbg !72
  %2488 = select i1 %2487, float %2484, float %2037, !dbg !73
  %2489 = fcmp olt float %2488, %2039, !dbg !70
  %2490 = fcmp uno float %2488, 0.000000e+00, !dbg !71
  %2491 = or i1 %2489, %2490, !dbg !72
  %2492 = select i1 %2491, float %2488, float %2039, !dbg !73
  %2493 = fcmp olt float %2492, %2058, !dbg !70
  %2494 = fcmp uno float %2492, 0.000000e+00, !dbg !71
  %2495 = or i1 %2493, %2494, !dbg !72
  %2496 = select i1 %2495, float %2492, float %2058, !dbg !73
  %2497 = fcmp olt float %2496, %2060, !dbg !70
  %2498 = fcmp uno float %2496, 0.000000e+00, !dbg !71
  %2499 = or i1 %2497, %2498, !dbg !72
  %2500 = select i1 %2499, float %2496, float %2060, !dbg !73
  %2501 = fcmp olt float %2500, %2079, !dbg !70
  %2502 = fcmp uno float %2500, 0.000000e+00, !dbg !71
  %2503 = or i1 %2501, %2502, !dbg !72
  %2504 = select i1 %2503, float %2500, float %2079, !dbg !73
  %2505 = fcmp olt float %2504, %2081, !dbg !70
  %2506 = fcmp uno float %2504, 0.000000e+00, !dbg !71
  %2507 = or i1 %2505, %2506, !dbg !72
  %2508 = select i1 %2507, float %2504, float %2081, !dbg !73
  %2509 = fcmp olt float %2508, %2100, !dbg !70
  %2510 = fcmp uno float %2508, 0.000000e+00, !dbg !71
  %2511 = or i1 %2509, %2510, !dbg !72
  %2512 = select i1 %2511, float %2508, float %2100, !dbg !73
  %2513 = fcmp olt float %2512, %2102, !dbg !70
  %2514 = fcmp uno float %2512, 0.000000e+00, !dbg !71
  %2515 = or i1 %2513, %2514, !dbg !72
  %2516 = select i1 %2515, float %2512, float %2102, !dbg !73
  %2517 = fcmp olt float %2516, %2121, !dbg !70
  %2518 = fcmp uno float %2516, 0.000000e+00, !dbg !71
  %2519 = or i1 %2517, %2518, !dbg !72
  %2520 = select i1 %2519, float %2516, float %2121, !dbg !73
  %2521 = fcmp olt float %2520, %2123, !dbg !70
  %2522 = fcmp uno float %2520, 0.000000e+00, !dbg !71
  %2523 = or i1 %2521, %2522, !dbg !72
  %2524 = select i1 %2523, float %2520, float %2123, !dbg !73
  %2525 = fcmp olt float %2524, %2142, !dbg !70
  %2526 = fcmp uno float %2524, 0.000000e+00, !dbg !71
  %2527 = or i1 %2525, %2526, !dbg !72
  %2528 = select i1 %2527, float %2524, float %2142, !dbg !73
  %2529 = fcmp olt float %2528, %2144, !dbg !70
  %2530 = fcmp uno float %2528, 0.000000e+00, !dbg !71
  %2531 = or i1 %2529, %2530, !dbg !72
  %2532 = select i1 %2531, float %2528, float %2144, !dbg !73
  %2533 = fcmp olt float %2532, %2163, !dbg !70
  %2534 = fcmp uno float %2532, 0.000000e+00, !dbg !71
  %2535 = or i1 %2533, %2534, !dbg !72
  %2536 = select i1 %2535, float %2532, float %2163, !dbg !73
  %2537 = fcmp olt float %2536, %2165, !dbg !70
  %2538 = fcmp uno float %2536, 0.000000e+00, !dbg !71
  %2539 = or i1 %2537, %2538, !dbg !72
  %2540 = select i1 %2539, float %2536, float %2165, !dbg !73
  %2541 = fcmp olt float %2540, %2184, !dbg !70
  %2542 = fcmp uno float %2540, 0.000000e+00, !dbg !71
  %2543 = or i1 %2541, %2542, !dbg !72
  %2544 = select i1 %2543, float %2540, float %2184, !dbg !73
  %2545 = fcmp olt float %2544, %2186, !dbg !70
  %2546 = fcmp uno float %2544, 0.000000e+00, !dbg !71
  %2547 = or i1 %2545, %2546, !dbg !72
  %2548 = select i1 %2547, float %2544, float %2186, !dbg !73
  %2549 = fcmp olt float %2548, %2205, !dbg !70
  %2550 = fcmp uno float %2548, 0.000000e+00, !dbg !71
  %2551 = or i1 %2549, %2550, !dbg !72
  %2552 = select i1 %2551, float %2548, float %2205, !dbg !73
  %2553 = fcmp olt float %2552, %2207, !dbg !70
  %2554 = fcmp uno float %2552, 0.000000e+00, !dbg !71
  %2555 = or i1 %2553, %2554, !dbg !72
  %2556 = select i1 %2555, float %2552, float %2207, !dbg !73
  %2557 = fcmp olt float %2556, %2226, !dbg !70
  %2558 = fcmp uno float %2556, 0.000000e+00, !dbg !71
  %2559 = or i1 %2557, %2558, !dbg !72
  %2560 = select i1 %2559, float %2556, float %2226, !dbg !73
  %2561 = fcmp olt float %2560, %2228, !dbg !70
  %2562 = fcmp uno float %2560, 0.000000e+00, !dbg !71
  %2563 = or i1 %2561, %2562, !dbg !72
  %2564 = select i1 %2563, float %2560, float %2228, !dbg !73
  %2565 = fcmp olt float %2564, %2247, !dbg !70
  %2566 = fcmp uno float %2564, 0.000000e+00, !dbg !71
  %2567 = or i1 %2565, %2566, !dbg !72
  %2568 = select i1 %2567, float %2564, float %2247, !dbg !73
  %2569 = fcmp olt float %2568, %2249, !dbg !70
  %2570 = fcmp uno float %2568, 0.000000e+00, !dbg !71
  %2571 = or i1 %2569, %2570, !dbg !72
  %2572 = select i1 %2571, float %2568, float %2249, !dbg !73
  %2573 = fcmp olt float %2317, %2319, !dbg !70
  %2574 = fcmp uno float %2317, 0.000000e+00, !dbg !71
  %2575 = or i1 %2573, %2574, !dbg !72
  %2576 = select i1 %2575, float %2317, float %2319, !dbg !73
  %2577 = fcmp olt float %2576, %2327, !dbg !70
  %2578 = fcmp uno float %2576, 0.000000e+00, !dbg !71
  %2579 = or i1 %2577, %2578, !dbg !72
  %2580 = select i1 %2579, float %2576, float %2327, !dbg !73
  %2581 = fcmp olt float %2580, %2329, !dbg !70
  %2582 = fcmp uno float %2580, 0.000000e+00, !dbg !71
  %2583 = or i1 %2581, %2582, !dbg !72
  %2584 = select i1 %2583, float %2580, float %2329, !dbg !73
  %2585 = fcmp olt float %2584, %2337, !dbg !70
  %2586 = fcmp uno float %2584, 0.000000e+00, !dbg !71
  %2587 = or i1 %2585, %2586, !dbg !72
  %2588 = select i1 %2587, float %2584, float %2337, !dbg !73
  %2589 = fcmp olt float %2588, %2339, !dbg !70
  %2590 = fcmp uno float %2588, 0.000000e+00, !dbg !71
  %2591 = or i1 %2589, %2590, !dbg !72
  %2592 = select i1 %2591, float %2588, float %2339, !dbg !73
  %2593 = fcmp olt float %2592, %2347, !dbg !70
  %2594 = fcmp uno float %2592, 0.000000e+00, !dbg !71
  %2595 = or i1 %2593, %2594, !dbg !72
  %2596 = select i1 %2595, float %2592, float %2347, !dbg !73
  %2597 = fcmp olt float %2596, %2349, !dbg !70
  %2598 = fcmp uno float %2596, 0.000000e+00, !dbg !71
  %2599 = or i1 %2597, %2598, !dbg !72
  %2600 = select i1 %2599, float %2596, float %2349, !dbg !73
  %2601 = fcmp olt float %2600, %2357, !dbg !70
  %2602 = fcmp uno float %2600, 0.000000e+00, !dbg !71
  %2603 = or i1 %2601, %2602, !dbg !72
  %2604 = select i1 %2603, float %2600, float %2357, !dbg !73
  %2605 = fcmp olt float %2604, %2359, !dbg !70
  %2606 = fcmp uno float %2604, 0.000000e+00, !dbg !71
  %2607 = or i1 %2605, %2606, !dbg !72
  %2608 = select i1 %2607, float %2604, float %2359, !dbg !73
  %2609 = fcmp olt float %2608, %2367, !dbg !70
  %2610 = fcmp uno float %2608, 0.000000e+00, !dbg !71
  %2611 = or i1 %2609, %2610, !dbg !72
  %2612 = select i1 %2611, float %2608, float %2367, !dbg !73
  %2613 = fcmp olt float %2612, %2369, !dbg !70
  %2614 = fcmp uno float %2612, 0.000000e+00, !dbg !71
  %2615 = or i1 %2613, %2614, !dbg !72
  %2616 = select i1 %2615, float %2612, float %2369, !dbg !73
  %2617 = fcmp olt float %2616, %2377, !dbg !70
  %2618 = fcmp uno float %2616, 0.000000e+00, !dbg !71
  %2619 = or i1 %2617, %2618, !dbg !72
  %2620 = select i1 %2619, float %2616, float %2377, !dbg !73
  %2621 = fcmp olt float %2620, %2379, !dbg !70
  %2622 = fcmp uno float %2620, 0.000000e+00, !dbg !71
  %2623 = or i1 %2621, %2622, !dbg !72
  %2624 = select i1 %2623, float %2620, float %2379, !dbg !73
  %2625 = fcmp olt float %2624, %2387, !dbg !70
  %2626 = fcmp uno float %2624, 0.000000e+00, !dbg !71
  %2627 = or i1 %2625, %2626, !dbg !72
  %2628 = select i1 %2627, float %2624, float %2387, !dbg !73
  %2629 = fcmp olt float %2628, %2389, !dbg !70
  %2630 = fcmp uno float %2628, 0.000000e+00, !dbg !71
  %2631 = or i1 %2629, %2630, !dbg !72
  %2632 = select i1 %2631, float %2628, float %2389, !dbg !73
  %2633 = fcmp olt float %2632, %2397, !dbg !70
  %2634 = fcmp uno float %2632, 0.000000e+00, !dbg !71
  %2635 = or i1 %2633, %2634, !dbg !72
  %2636 = select i1 %2635, float %2632, float %2397, !dbg !73
  %2637 = fcmp olt float %2636, %2399, !dbg !70
  %2638 = fcmp uno float %2636, 0.000000e+00, !dbg !71
  %2639 = or i1 %2637, %2638, !dbg !72
  %2640 = select i1 %2639, float %2636, float %2399, !dbg !73
  %2641 = fcmp olt float %2640, %2407, !dbg !70
  %2642 = fcmp uno float %2640, 0.000000e+00, !dbg !71
  %2643 = or i1 %2641, %2642, !dbg !72
  %2644 = select i1 %2643, float %2640, float %2407, !dbg !73
  %2645 = fcmp olt float %2644, %2409, !dbg !70
  %2646 = fcmp uno float %2644, 0.000000e+00, !dbg !71
  %2647 = or i1 %2645, %2646, !dbg !72
  %2648 = select i1 %2647, float %2644, float %2409, !dbg !73
  %2649 = fcmp olt float %2648, %2417, !dbg !70
  %2650 = fcmp uno float %2648, 0.000000e+00, !dbg !71
  %2651 = or i1 %2649, %2650, !dbg !72
  %2652 = select i1 %2651, float %2648, float %2417, !dbg !73
  %2653 = fcmp olt float %2652, %2419, !dbg !70
  %2654 = fcmp uno float %2652, 0.000000e+00, !dbg !71
  %2655 = or i1 %2653, %2654, !dbg !72
  %2656 = select i1 %2655, float %2652, float %2419, !dbg !73
  %2657 = fcmp olt float %2656, %2427, !dbg !70
  %2658 = fcmp uno float %2656, 0.000000e+00, !dbg !71
  %2659 = or i1 %2657, %2658, !dbg !72
  %2660 = select i1 %2659, float %2656, float %2427, !dbg !73
  %2661 = fcmp olt float %2660, %2429, !dbg !70
  %2662 = fcmp uno float %2660, 0.000000e+00, !dbg !71
  %2663 = or i1 %2661, %2662, !dbg !72
  %2664 = select i1 %2663, float %2660, float %2429, !dbg !73
  %2665 = bitcast float %2572 to i32, !dbg !68
  %2666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2665, i32 16, i32 31), !dbg !68
  %2667 = bitcast i32 %2666 to float, !dbg !68
  %2668 = fcmp olt float %2572, %2667, !dbg !70
  %2669 = fcmp uno float %2572, 0.000000e+00, !dbg !71
  %2670 = or i1 %2668, %2669, !dbg !72
  %2671 = select i1 %2670, float %2572, float %2667, !dbg !73
  %2672 = bitcast float %2671 to i32, !dbg !68
  %2673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2672, i32 8, i32 31), !dbg !68
  %2674 = bitcast i32 %2673 to float, !dbg !68
  %2675 = fcmp olt float %2671, %2674, !dbg !70
  %2676 = fcmp uno float %2671, 0.000000e+00, !dbg !71
  %2677 = or i1 %2675, %2676, !dbg !72
  %2678 = select i1 %2677, float %2671, float %2674, !dbg !73
  %2679 = bitcast float %2678 to i32, !dbg !68
  %2680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2679, i32 4, i32 31), !dbg !68
  %2681 = bitcast i32 %2680 to float, !dbg !68
  %2682 = fcmp olt float %2678, %2681, !dbg !70
  %2683 = fcmp uno float %2678, 0.000000e+00, !dbg !71
  %2684 = or i1 %2682, %2683, !dbg !72
  %2685 = select i1 %2684, float %2678, float %2681, !dbg !73
  %2686 = bitcast float %2685 to i32, !dbg !68
  %2687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2686, i32 2, i32 31), !dbg !68
  %2688 = bitcast i32 %2687 to float, !dbg !68
  %2689 = fcmp olt float %2685, %2688, !dbg !70
  %2690 = fcmp uno float %2685, 0.000000e+00, !dbg !71
  %2691 = or i1 %2689, %2690, !dbg !72
  %2692 = select i1 %2691, float %2685, float %2688, !dbg !73
  %2693 = bitcast float %2692 to i32, !dbg !68
  %2694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2693, i32 1, i32 31), !dbg !68
  %2695 = bitcast i32 %2694 to float, !dbg !68
  %2696 = fcmp olt float %2692, %2695, !dbg !70
  %2697 = fcmp uno float %2692, 0.000000e+00, !dbg !71
  %2698 = or i1 %2696, %2697, !dbg !72
  %2699 = bitcast float %2664 to i32, !dbg !68
  %2700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2699, i32 16, i32 31), !dbg !68
  %2701 = bitcast i32 %2700 to float, !dbg !68
  %2702 = fcmp olt float %2664, %2701, !dbg !70
  %2703 = fcmp uno float %2664, 0.000000e+00, !dbg !71
  %2704 = or i1 %2702, %2703, !dbg !72
  %2705 = select i1 %2704, float %2664, float %2701, !dbg !73
  %2706 = bitcast float %2705 to i32, !dbg !68
  %2707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2706, i32 8, i32 31), !dbg !68
  %2708 = bitcast i32 %2707 to float, !dbg !68
  %2709 = fcmp olt float %2705, %2708, !dbg !70
  %2710 = fcmp uno float %2705, 0.000000e+00, !dbg !71
  %2711 = or i1 %2709, %2710, !dbg !72
  %2712 = select i1 %2711, float %2705, float %2708, !dbg !73
  %2713 = bitcast float %2712 to i32, !dbg !68
  %2714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2713, i32 4, i32 31), !dbg !68
  %2715 = bitcast i32 %2714 to float, !dbg !68
  %2716 = fcmp olt float %2712, %2715, !dbg !70
  %2717 = fcmp uno float %2712, 0.000000e+00, !dbg !71
  %2718 = or i1 %2716, %2717, !dbg !72
  %2719 = select i1 %2718, float %2712, float %2715, !dbg !73
  %2720 = bitcast float %2719 to i32, !dbg !68
  %2721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2720, i32 2, i32 31), !dbg !68
  %2722 = bitcast i32 %2721 to float, !dbg !68
  %2723 = fcmp olt float %2719, %2722, !dbg !70
  %2724 = fcmp uno float %2719, 0.000000e+00, !dbg !71
  %2725 = or i1 %2723, %2724, !dbg !72
  %2726 = select i1 %2725, float %2719, float %2722, !dbg !73
  %2727 = bitcast float %2726 to i32, !dbg !68
  %2728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2727, i32 1, i32 31), !dbg !68
  %2729 = bitcast i32 %2728 to float, !dbg !68
  %2730 = fcmp olt float %2726, %2729, !dbg !70
  %2731 = fcmp uno float %2726, 0.000000e+00, !dbg !71
  %2732 = or i1 %2730, %2731, !dbg !72
  %2733 = select i1 %2698, i32 %2693, i32 %2694, !dbg !73
  %2734 = insertelement <1 x i32> poison, i32 %2733, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1251, <1 x i32> %2734, i1 %1250) #5, !dbg !68
  %2735 = select i1 %2732, i32 %2727, i32 %2728, !dbg !73
  %2736 = insertelement <1 x i32> poison, i32 %2735, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1258, <1 x i32> %2736, i1 %1250) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2737 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1265, i1 %1264) #5, !dbg !68
  %2738 = bitcast i32 %2737 to float, !dbg !68
  %2739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2737, i32 2, i32 31), !dbg !68
  %2740 = bitcast i32 %2739 to float, !dbg !68
  %2741 = fcmp olt float %2738, %2740, !dbg !70
  %2742 = fcmp uno float %2738, 0.000000e+00, !dbg !71
  %2743 = or i1 %2742, %2741, !dbg !72
  %2744 = select i1 %2743, float %2738, float %2740, !dbg !73
  %2745 = bitcast float %2744 to i32, !dbg !68
  %2746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2745, i32 1, i32 31), !dbg !68
  %2747 = bitcast i32 %2746 to float, !dbg !68
  %2748 = fcmp olt float %2744, %2747, !dbg !70
  %2749 = fcmp uno float %2744, 0.000000e+00, !dbg !71
  %2750 = or i1 %2748, %2749, !dbg !72
  %2751 = select i1 %2750, i32 %2745, i32 %2746, !dbg !73
  %2752 = insertelement <1 x i32> poison, i32 %2751, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1265, <1 x i32> %2752, i1 %1315) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2753 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %2754 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2755 = bitcast float %2753 to i32, !dbg !74
  %2756 = bitcast float %2754 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2755, i32 %2756, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2757 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1832, !dbg !74
  %2758 = load float, ptr addrspace(3) %2757, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %2759 = fcmp ogt float %2019, %2020, !dbg !77
  %2760 = fcmp uno float %2019, 0.000000e+00, !dbg !78
  %2761 = or i1 %2759, %2760, !dbg !79
  %2762 = select i1 %2761, float %2019, float %2020, !dbg !80
  %2763 = fcmp ogt float %2762, %2040, !dbg !77
  %2764 = fcmp uno float %2762, 0.000000e+00, !dbg !78
  %2765 = or i1 %2763, %2764, !dbg !79
  %2766 = select i1 %2765, float %2762, float %2040, !dbg !80
  %2767 = fcmp ogt float %2766, %2041, !dbg !77
  %2768 = fcmp uno float %2766, 0.000000e+00, !dbg !78
  %2769 = or i1 %2767, %2768, !dbg !79
  %2770 = select i1 %2769, float %2766, float %2041, !dbg !80
  %2771 = fcmp ogt float %2770, %2061, !dbg !77
  %2772 = fcmp uno float %2770, 0.000000e+00, !dbg !78
  %2773 = or i1 %2771, %2772, !dbg !79
  %2774 = select i1 %2773, float %2770, float %2061, !dbg !80
  %2775 = fcmp ogt float %2774, %2062, !dbg !77
  %2776 = fcmp uno float %2774, 0.000000e+00, !dbg !78
  %2777 = or i1 %2775, %2776, !dbg !79
  %2778 = select i1 %2777, float %2774, float %2062, !dbg !80
  %2779 = fcmp ogt float %2778, %2082, !dbg !77
  %2780 = fcmp uno float %2778, 0.000000e+00, !dbg !78
  %2781 = or i1 %2779, %2780, !dbg !79
  %2782 = select i1 %2781, float %2778, float %2082, !dbg !80
  %2783 = fcmp ogt float %2782, %2083, !dbg !77
  %2784 = fcmp uno float %2782, 0.000000e+00, !dbg !78
  %2785 = or i1 %2783, %2784, !dbg !79
  %2786 = select i1 %2785, float %2782, float %2083, !dbg !80
  %2787 = fcmp ogt float %2786, %2103, !dbg !77
  %2788 = fcmp uno float %2786, 0.000000e+00, !dbg !78
  %2789 = or i1 %2787, %2788, !dbg !79
  %2790 = select i1 %2789, float %2786, float %2103, !dbg !80
  %2791 = fcmp ogt float %2790, %2104, !dbg !77
  %2792 = fcmp uno float %2790, 0.000000e+00, !dbg !78
  %2793 = or i1 %2791, %2792, !dbg !79
  %2794 = select i1 %2793, float %2790, float %2104, !dbg !80
  %2795 = fcmp ogt float %2794, %2124, !dbg !77
  %2796 = fcmp uno float %2794, 0.000000e+00, !dbg !78
  %2797 = or i1 %2795, %2796, !dbg !79
  %2798 = select i1 %2797, float %2794, float %2124, !dbg !80
  %2799 = fcmp ogt float %2798, %2125, !dbg !77
  %2800 = fcmp uno float %2798, 0.000000e+00, !dbg !78
  %2801 = or i1 %2799, %2800, !dbg !79
  %2802 = select i1 %2801, float %2798, float %2125, !dbg !80
  %2803 = fcmp ogt float %2802, %2145, !dbg !77
  %2804 = fcmp uno float %2802, 0.000000e+00, !dbg !78
  %2805 = or i1 %2803, %2804, !dbg !79
  %2806 = select i1 %2805, float %2802, float %2145, !dbg !80
  %2807 = fcmp ogt float %2806, %2146, !dbg !77
  %2808 = fcmp uno float %2806, 0.000000e+00, !dbg !78
  %2809 = or i1 %2807, %2808, !dbg !79
  %2810 = select i1 %2809, float %2806, float %2146, !dbg !80
  %2811 = fcmp ogt float %2810, %2166, !dbg !77
  %2812 = fcmp uno float %2810, 0.000000e+00, !dbg !78
  %2813 = or i1 %2811, %2812, !dbg !79
  %2814 = select i1 %2813, float %2810, float %2166, !dbg !80
  %2815 = fcmp ogt float %2814, %2167, !dbg !77
  %2816 = fcmp uno float %2814, 0.000000e+00, !dbg !78
  %2817 = or i1 %2815, %2816, !dbg !79
  %2818 = select i1 %2817, float %2814, float %2167, !dbg !80
  %2819 = fcmp ogt float %2818, %2187, !dbg !77
  %2820 = fcmp uno float %2818, 0.000000e+00, !dbg !78
  %2821 = or i1 %2819, %2820, !dbg !79
  %2822 = select i1 %2821, float %2818, float %2187, !dbg !80
  %2823 = fcmp ogt float %2822, %2188, !dbg !77
  %2824 = fcmp uno float %2822, 0.000000e+00, !dbg !78
  %2825 = or i1 %2823, %2824, !dbg !79
  %2826 = select i1 %2825, float %2822, float %2188, !dbg !80
  %2827 = fcmp ogt float %2826, %2208, !dbg !77
  %2828 = fcmp uno float %2826, 0.000000e+00, !dbg !78
  %2829 = or i1 %2827, %2828, !dbg !79
  %2830 = select i1 %2829, float %2826, float %2208, !dbg !80
  %2831 = fcmp ogt float %2830, %2209, !dbg !77
  %2832 = fcmp uno float %2830, 0.000000e+00, !dbg !78
  %2833 = or i1 %2831, %2832, !dbg !79
  %2834 = select i1 %2833, float %2830, float %2209, !dbg !80
  %2835 = fcmp ogt float %2834, %2229, !dbg !77
  %2836 = fcmp uno float %2834, 0.000000e+00, !dbg !78
  %2837 = or i1 %2835, %2836, !dbg !79
  %2838 = select i1 %2837, float %2834, float %2229, !dbg !80
  %2839 = fcmp ogt float %2838, %2230, !dbg !77
  %2840 = fcmp uno float %2838, 0.000000e+00, !dbg !78
  %2841 = or i1 %2839, %2840, !dbg !79
  %2842 = select i1 %2841, float %2838, float %2230, !dbg !80
  %2843 = fcmp ogt float %2842, %2250, !dbg !77
  %2844 = fcmp uno float %2842, 0.000000e+00, !dbg !78
  %2845 = or i1 %2843, %2844, !dbg !79
  %2846 = select i1 %2845, float %2842, float %2250, !dbg !80
  %2847 = fcmp ogt float %2846, %2251, !dbg !77
  %2848 = fcmp uno float %2846, 0.000000e+00, !dbg !78
  %2849 = or i1 %2847, %2848, !dbg !79
  %2850 = select i1 %2849, float %2846, float %2251, !dbg !80
  %2851 = fcmp ogt float %2320, %2321, !dbg !77
  %2852 = fcmp uno float %2320, 0.000000e+00, !dbg !78
  %2853 = or i1 %2851, %2852, !dbg !79
  %2854 = select i1 %2853, float %2320, float %2321, !dbg !80
  %2855 = fcmp ogt float %2854, %2330, !dbg !77
  %2856 = fcmp uno float %2854, 0.000000e+00, !dbg !78
  %2857 = or i1 %2855, %2856, !dbg !79
  %2858 = select i1 %2857, float %2854, float %2330, !dbg !80
  %2859 = fcmp ogt float %2858, %2331, !dbg !77
  %2860 = fcmp uno float %2858, 0.000000e+00, !dbg !78
  %2861 = or i1 %2859, %2860, !dbg !79
  %2862 = select i1 %2861, float %2858, float %2331, !dbg !80
  %2863 = fcmp ogt float %2862, %2340, !dbg !77
  %2864 = fcmp uno float %2862, 0.000000e+00, !dbg !78
  %2865 = or i1 %2863, %2864, !dbg !79
  %2866 = select i1 %2865, float %2862, float %2340, !dbg !80
  %2867 = fcmp ogt float %2866, %2341, !dbg !77
  %2868 = fcmp uno float %2866, 0.000000e+00, !dbg !78
  %2869 = or i1 %2867, %2868, !dbg !79
  %2870 = select i1 %2869, float %2866, float %2341, !dbg !80
  %2871 = fcmp ogt float %2870, %2350, !dbg !77
  %2872 = fcmp uno float %2870, 0.000000e+00, !dbg !78
  %2873 = or i1 %2871, %2872, !dbg !79
  %2874 = select i1 %2873, float %2870, float %2350, !dbg !80
  %2875 = fcmp ogt float %2874, %2351, !dbg !77
  %2876 = fcmp uno float %2874, 0.000000e+00, !dbg !78
  %2877 = or i1 %2875, %2876, !dbg !79
  %2878 = select i1 %2877, float %2874, float %2351, !dbg !80
  %2879 = fcmp ogt float %2878, %2360, !dbg !77
  %2880 = fcmp uno float %2878, 0.000000e+00, !dbg !78
  %2881 = or i1 %2879, %2880, !dbg !79
  %2882 = select i1 %2881, float %2878, float %2360, !dbg !80
  %2883 = fcmp ogt float %2882, %2361, !dbg !77
  %2884 = fcmp uno float %2882, 0.000000e+00, !dbg !78
  %2885 = or i1 %2883, %2884, !dbg !79
  %2886 = select i1 %2885, float %2882, float %2361, !dbg !80
  %2887 = fcmp ogt float %2886, %2370, !dbg !77
  %2888 = fcmp uno float %2886, 0.000000e+00, !dbg !78
  %2889 = or i1 %2887, %2888, !dbg !79
  %2890 = select i1 %2889, float %2886, float %2370, !dbg !80
  %2891 = fcmp ogt float %2890, %2371, !dbg !77
  %2892 = fcmp uno float %2890, 0.000000e+00, !dbg !78
  %2893 = or i1 %2891, %2892, !dbg !79
  %2894 = select i1 %2893, float %2890, float %2371, !dbg !80
  %2895 = fcmp ogt float %2894, %2380, !dbg !77
  %2896 = fcmp uno float %2894, 0.000000e+00, !dbg !78
  %2897 = or i1 %2895, %2896, !dbg !79
  %2898 = select i1 %2897, float %2894, float %2380, !dbg !80
  %2899 = fcmp ogt float %2898, %2381, !dbg !77
  %2900 = fcmp uno float %2898, 0.000000e+00, !dbg !78
  %2901 = or i1 %2899, %2900, !dbg !79
  %2902 = select i1 %2901, float %2898, float %2381, !dbg !80
  %2903 = fcmp ogt float %2902, %2390, !dbg !77
  %2904 = fcmp uno float %2902, 0.000000e+00, !dbg !78
  %2905 = or i1 %2903, %2904, !dbg !79
  %2906 = select i1 %2905, float %2902, float %2390, !dbg !80
  %2907 = fcmp ogt float %2906, %2391, !dbg !77
  %2908 = fcmp uno float %2906, 0.000000e+00, !dbg !78
  %2909 = or i1 %2907, %2908, !dbg !79
  %2910 = select i1 %2909, float %2906, float %2391, !dbg !80
  %2911 = fcmp ogt float %2910, %2400, !dbg !77
  %2912 = fcmp uno float %2910, 0.000000e+00, !dbg !78
  %2913 = or i1 %2911, %2912, !dbg !79
  %2914 = select i1 %2913, float %2910, float %2400, !dbg !80
  %2915 = fcmp ogt float %2914, %2401, !dbg !77
  %2916 = fcmp uno float %2914, 0.000000e+00, !dbg !78
  %2917 = or i1 %2915, %2916, !dbg !79
  %2918 = select i1 %2917, float %2914, float %2401, !dbg !80
  %2919 = fcmp ogt float %2918, %2410, !dbg !77
  %2920 = fcmp uno float %2918, 0.000000e+00, !dbg !78
  %2921 = or i1 %2919, %2920, !dbg !79
  %2922 = select i1 %2921, float %2918, float %2410, !dbg !80
  %2923 = fcmp ogt float %2922, %2411, !dbg !77
  %2924 = fcmp uno float %2922, 0.000000e+00, !dbg !78
  %2925 = or i1 %2923, %2924, !dbg !79
  %2926 = select i1 %2925, float %2922, float %2411, !dbg !80
  %2927 = fcmp ogt float %2926, %2420, !dbg !77
  %2928 = fcmp uno float %2926, 0.000000e+00, !dbg !78
  %2929 = or i1 %2927, %2928, !dbg !79
  %2930 = select i1 %2929, float %2926, float %2420, !dbg !80
  %2931 = fcmp ogt float %2930, %2421, !dbg !77
  %2932 = fcmp uno float %2930, 0.000000e+00, !dbg !78
  %2933 = or i1 %2931, %2932, !dbg !79
  %2934 = select i1 %2933, float %2930, float %2421, !dbg !80
  %2935 = fcmp ogt float %2934, %2430, !dbg !77
  %2936 = fcmp uno float %2934, 0.000000e+00, !dbg !78
  %2937 = or i1 %2935, %2936, !dbg !79
  %2938 = select i1 %2937, float %2934, float %2430, !dbg !80
  %2939 = fcmp ogt float %2938, %2431, !dbg !77
  %2940 = fcmp uno float %2938, 0.000000e+00, !dbg !78
  %2941 = or i1 %2939, %2940, !dbg !79
  %2942 = select i1 %2941, float %2938, float %2431, !dbg !80
  %2943 = bitcast float %2850 to i32, !dbg !75
  %2944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2943, i32 16, i32 31), !dbg !75
  %2945 = bitcast i32 %2944 to float, !dbg !75
  %2946 = fcmp ogt float %2850, %2945, !dbg !77
  %2947 = fcmp uno float %2850, 0.000000e+00, !dbg !78
  %2948 = or i1 %2946, %2947, !dbg !79
  %2949 = select i1 %2948, float %2850, float %2945, !dbg !80
  %2950 = bitcast float %2949 to i32, !dbg !75
  %2951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2950, i32 8, i32 31), !dbg !75
  %2952 = bitcast i32 %2951 to float, !dbg !75
  %2953 = fcmp ogt float %2949, %2952, !dbg !77
  %2954 = fcmp uno float %2949, 0.000000e+00, !dbg !78
  %2955 = or i1 %2953, %2954, !dbg !79
  %2956 = select i1 %2955, float %2949, float %2952, !dbg !80
  %2957 = bitcast float %2956 to i32, !dbg !75
  %2958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2957, i32 4, i32 31), !dbg !75
  %2959 = bitcast i32 %2958 to float, !dbg !75
  %2960 = fcmp ogt float %2956, %2959, !dbg !77
  %2961 = fcmp uno float %2956, 0.000000e+00, !dbg !78
  %2962 = or i1 %2960, %2961, !dbg !79
  %2963 = select i1 %2962, float %2956, float %2959, !dbg !80
  %2964 = bitcast float %2963 to i32, !dbg !75
  %2965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2964, i32 2, i32 31), !dbg !75
  %2966 = bitcast i32 %2965 to float, !dbg !75
  %2967 = fcmp ogt float %2963, %2966, !dbg !77
  %2968 = fcmp uno float %2963, 0.000000e+00, !dbg !78
  %2969 = or i1 %2967, %2968, !dbg !79
  %2970 = select i1 %2969, float %2963, float %2966, !dbg !80
  %2971 = bitcast float %2970 to i32, !dbg !75
  %2972 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2971, i32 1, i32 31), !dbg !75
  %2973 = bitcast i32 %2972 to float, !dbg !75
  %2974 = fcmp ogt float %2970, %2973, !dbg !77
  %2975 = fcmp uno float %2970, 0.000000e+00, !dbg !78
  %2976 = or i1 %2974, %2975, !dbg !79
  %2977 = bitcast float %2942 to i32, !dbg !75
  %2978 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2977, i32 16, i32 31), !dbg !75
  %2979 = bitcast i32 %2978 to float, !dbg !75
  %2980 = fcmp ogt float %2942, %2979, !dbg !77
  %2981 = fcmp uno float %2942, 0.000000e+00, !dbg !78
  %2982 = or i1 %2980, %2981, !dbg !79
  %2983 = select i1 %2982, float %2942, float %2979, !dbg !80
  %2984 = bitcast float %2983 to i32, !dbg !75
  %2985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2984, i32 8, i32 31), !dbg !75
  %2986 = bitcast i32 %2985 to float, !dbg !75
  %2987 = fcmp ogt float %2983, %2986, !dbg !77
  %2988 = fcmp uno float %2983, 0.000000e+00, !dbg !78
  %2989 = or i1 %2987, %2988, !dbg !79
  %2990 = select i1 %2989, float %2983, float %2986, !dbg !80
  %2991 = bitcast float %2990 to i32, !dbg !75
  %2992 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2991, i32 4, i32 31), !dbg !75
  %2993 = bitcast i32 %2992 to float, !dbg !75
  %2994 = fcmp ogt float %2990, %2993, !dbg !77
  %2995 = fcmp uno float %2990, 0.000000e+00, !dbg !78
  %2996 = or i1 %2994, %2995, !dbg !79
  %2997 = select i1 %2996, float %2990, float %2993, !dbg !80
  %2998 = bitcast float %2997 to i32, !dbg !75
  %2999 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2998, i32 2, i32 31), !dbg !75
  %3000 = bitcast i32 %2999 to float, !dbg !75
  %3001 = fcmp ogt float %2997, %3000, !dbg !77
  %3002 = fcmp uno float %2997, 0.000000e+00, !dbg !78
  %3003 = or i1 %3001, %3002, !dbg !79
  %3004 = select i1 %3003, float %2997, float %3000, !dbg !80
  %3005 = bitcast float %3004 to i32, !dbg !75
  %3006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3005, i32 1, i32 31), !dbg !75
  %3007 = bitcast i32 %3006 to float, !dbg !75
  %3008 = fcmp ogt float %3004, %3007, !dbg !77
  %3009 = fcmp uno float %3004, 0.000000e+00, !dbg !78
  %3010 = or i1 %3008, %3009, !dbg !79
  %3011 = select i1 %2976, i32 %2971, i32 %2972, !dbg !80
  %3012 = insertelement <1 x i32> poison, i32 %3011, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1251, <1 x i32> %3012, i1 %1250) #5, !dbg !75
  %3013 = select i1 %3010, i32 %3005, i32 %3006, !dbg !80
  %3014 = insertelement <1 x i32> poison, i32 %3013, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1258, <1 x i32> %3014, i1 %1250) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3015 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1265, i1 %1264) #5, !dbg !75
  %3016 = bitcast i32 %3015 to float, !dbg !75
  %3017 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3015, i32 2, i32 31), !dbg !75
  %3018 = bitcast i32 %3017 to float, !dbg !75
  %3019 = fcmp ogt float %3016, %3018, !dbg !77
  %3020 = fcmp uno float %3016, 0.000000e+00, !dbg !78
  %3021 = or i1 %3020, %3019, !dbg !79
  %3022 = select i1 %3021, float %3016, float %3018, !dbg !80
  %3023 = bitcast float %3022 to i32, !dbg !75
  %3024 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3023, i32 1, i32 31), !dbg !75
  %3025 = bitcast i32 %3024 to float, !dbg !75
  %3026 = fcmp ogt float %3022, %3025, !dbg !77
  %3027 = fcmp uno float %3022, 0.000000e+00, !dbg !78
  %3028 = or i1 %3026, %3027, !dbg !79
  %3029 = select i1 %3028, i32 %3023, i32 %3024, !dbg !80
  %3030 = insertelement <1 x i32> poison, i32 %3029, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1265, <1 x i32> %3030, i1 %1315) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3031 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %3032 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3033 = bitcast float %3031 to i32, !dbg !81
  %3034 = bitcast float %3032 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %3033, i32 %3034, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3035 = load float, ptr addrspace(3) %2757, align 4, !dbg !81
  %3036 = sext i32 %1833 to i64, !dbg !82
  %3037 = getelementptr bfloat, ptr addrspace(1) %4, i64 %3036, !dbg !82
  %3038 = fptrunc float %2758 to bfloat, !dbg !74
  %3039 = and i32 %18, 126, !dbg !74
  %3040 = icmp eq i32 %3039, 0, !dbg !74
  %3041 = bitcast bfloat %3038 to i16, !dbg !74
  %3042 = and i1 %3040, %1834, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3041, ptr addrspace(1) %3037, i1 %3042) #5, !dbg !74
  %3043 = getelementptr bfloat, ptr addrspace(1) %5, i64 %3036, !dbg !83
  %3044 = fptrunc float %3035 to bfloat, !dbg !81
  %3045 = bitcast bfloat %3044 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3045, ptr addrspace(1) %3043, i1 %3042) #5, !dbg !81
  %3046 = getelementptr bfloat, ptr addrspace(1) %6, i64 %3036, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3041, ptr addrspace(1) %3046, i1 %3042) #5, !dbg !85
  %3047 = getelementptr bfloat, ptr addrspace(1) %7, i64 %3036, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3045, ptr addrspace(1) %3047, i1 %3042) #5, !dbg !87
  %3048 = getelementptr bfloat, ptr addrspace(1) %8, i64 %3036, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3041, ptr addrspace(1) %3048, i1 %3042) #5, !dbg !89
  %3049 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3036, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3045, ptr addrspace(1) %3049, i1 %3042) #5, !dbg !91
  %3050 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1993, i1 %21) #5, !dbg !92
  %3051 = extractvalue { i32, i32, i32, i32 } %3050, 0, !dbg !92
  %3052 = bitcast i32 %3051 to <2 x bfloat>, !dbg !92
  %3053 = extractvalue { i32, i32, i32, i32 } %3050, 1, !dbg !92
  %3054 = bitcast i32 %3053 to <2 x bfloat>, !dbg !92
  %3055 = extractvalue { i32, i32, i32, i32 } %3050, 2, !dbg !92
  %3056 = bitcast i32 %3055 to <2 x bfloat>, !dbg !92
  %3057 = extractvalue { i32, i32, i32, i32 } %3050, 3, !dbg !92
  %3058 = bitcast i32 %3057 to <2 x bfloat>, !dbg !92
  %3059 = extractelement <2 x bfloat> %3052, i64 0, !dbg !92
  %3060 = extractelement <2 x bfloat> %3052, i64 1, !dbg !92
  %3061 = extractelement <2 x bfloat> %3054, i64 0, !dbg !92
  %3062 = extractelement <2 x bfloat> %3054, i64 1, !dbg !92
  %3063 = extractelement <2 x bfloat> %3056, i64 0, !dbg !92
  %3064 = extractelement <2 x bfloat> %3056, i64 1, !dbg !92
  %3065 = extractelement <2 x bfloat> %3058, i64 0, !dbg !92
  %3066 = extractelement <2 x bfloat> %3058, i64 1, !dbg !92
  %3067 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1994, i1 %21) #5, !dbg !92
  %3068 = extractvalue { i32, i32, i32, i32 } %3067, 0, !dbg !92
  %3069 = bitcast i32 %3068 to <2 x bfloat>, !dbg !92
  %3070 = extractvalue { i32, i32, i32, i32 } %3067, 1, !dbg !92
  %3071 = bitcast i32 %3070 to <2 x bfloat>, !dbg !92
  %3072 = extractvalue { i32, i32, i32, i32 } %3067, 2, !dbg !92
  %3073 = bitcast i32 %3072 to <2 x bfloat>, !dbg !92
  %3074 = extractvalue { i32, i32, i32, i32 } %3067, 3, !dbg !92
  %3075 = bitcast i32 %3074 to <2 x bfloat>, !dbg !92
  %3076 = extractelement <2 x bfloat> %3069, i64 0, !dbg !92
  %3077 = extractelement <2 x bfloat> %3069, i64 1, !dbg !92
  %3078 = extractelement <2 x bfloat> %3071, i64 0, !dbg !92
  %3079 = extractelement <2 x bfloat> %3071, i64 1, !dbg !92
  %3080 = extractelement <2 x bfloat> %3073, i64 0, !dbg !92
  %3081 = extractelement <2 x bfloat> %3073, i64 1, !dbg !92
  %3082 = extractelement <2 x bfloat> %3075, i64 0, !dbg !92
  %3083 = extractelement <2 x bfloat> %3075, i64 1, !dbg !92
  %3084 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1995, i1 %65) #5, !dbg !92
  %3085 = extractvalue { i32, i32, i32, i32 } %3084, 0, !dbg !92
  %3086 = bitcast i32 %3085 to <2 x bfloat>, !dbg !92
  %3087 = extractvalue { i32, i32, i32, i32 } %3084, 1, !dbg !92
  %3088 = bitcast i32 %3087 to <2 x bfloat>, !dbg !92
  %3089 = extractvalue { i32, i32, i32, i32 } %3084, 2, !dbg !92
  %3090 = bitcast i32 %3089 to <2 x bfloat>, !dbg !92
  %3091 = extractvalue { i32, i32, i32, i32 } %3084, 3, !dbg !92
  %3092 = bitcast i32 %3091 to <2 x bfloat>, !dbg !92
  %3093 = extractelement <2 x bfloat> %3086, i64 0, !dbg !92
  %3094 = extractelement <2 x bfloat> %3086, i64 1, !dbg !92
  %3095 = extractelement <2 x bfloat> %3088, i64 0, !dbg !92
  %3096 = extractelement <2 x bfloat> %3088, i64 1, !dbg !92
  %3097 = extractelement <2 x bfloat> %3090, i64 0, !dbg !92
  %3098 = extractelement <2 x bfloat> %3090, i64 1, !dbg !92
  %3099 = extractelement <2 x bfloat> %3092, i64 0, !dbg !92
  %3100 = extractelement <2 x bfloat> %3092, i64 1, !dbg !92
  %3101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1996, i1 %65) #5, !dbg !92
  %3102 = extractvalue { i32, i32, i32, i32 } %3101, 0, !dbg !92
  %3103 = bitcast i32 %3102 to <2 x bfloat>, !dbg !92
  %3104 = extractvalue { i32, i32, i32, i32 } %3101, 1, !dbg !92
  %3105 = bitcast i32 %3104 to <2 x bfloat>, !dbg !92
  %3106 = extractvalue { i32, i32, i32, i32 } %3101, 2, !dbg !92
  %3107 = bitcast i32 %3106 to <2 x bfloat>, !dbg !92
  %3108 = extractvalue { i32, i32, i32, i32 } %3101, 3, !dbg !92
  %3109 = bitcast i32 %3108 to <2 x bfloat>, !dbg !92
  %3110 = extractelement <2 x bfloat> %3103, i64 0, !dbg !92
  %3111 = extractelement <2 x bfloat> %3103, i64 1, !dbg !92
  %3112 = extractelement <2 x bfloat> %3105, i64 0, !dbg !92
  %3113 = extractelement <2 x bfloat> %3105, i64 1, !dbg !92
  %3114 = extractelement <2 x bfloat> %3107, i64 0, !dbg !92
  %3115 = extractelement <2 x bfloat> %3107, i64 1, !dbg !92
  %3116 = extractelement <2 x bfloat> %3109, i64 0, !dbg !92
  %3117 = extractelement <2 x bfloat> %3109, i64 1, !dbg !92
  %3118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1997, i1 %22) #5, !dbg !92
  %3119 = extractvalue { i32, i32, i32, i32 } %3118, 0, !dbg !92
  %3120 = bitcast i32 %3119 to <2 x bfloat>, !dbg !92
  %3121 = extractvalue { i32, i32, i32, i32 } %3118, 1, !dbg !92
  %3122 = bitcast i32 %3121 to <2 x bfloat>, !dbg !92
  %3123 = extractvalue { i32, i32, i32, i32 } %3118, 2, !dbg !92
  %3124 = bitcast i32 %3123 to <2 x bfloat>, !dbg !92
  %3125 = extractvalue { i32, i32, i32, i32 } %3118, 3, !dbg !92
  %3126 = bitcast i32 %3125 to <2 x bfloat>, !dbg !92
  %3127 = extractelement <2 x bfloat> %3120, i64 0, !dbg !92
  %3128 = extractelement <2 x bfloat> %3120, i64 1, !dbg !92
  %3129 = extractelement <2 x bfloat> %3122, i64 0, !dbg !92
  %3130 = extractelement <2 x bfloat> %3122, i64 1, !dbg !92
  %3131 = extractelement <2 x bfloat> %3124, i64 0, !dbg !92
  %3132 = extractelement <2 x bfloat> %3124, i64 1, !dbg !92
  %3133 = extractelement <2 x bfloat> %3126, i64 0, !dbg !92
  %3134 = extractelement <2 x bfloat> %3126, i64 1, !dbg !92
  %3135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1998, i1 %22) #5, !dbg !92
  %3136 = extractvalue { i32, i32, i32, i32 } %3135, 0, !dbg !92
  %3137 = bitcast i32 %3136 to <2 x bfloat>, !dbg !92
  %3138 = extractvalue { i32, i32, i32, i32 } %3135, 1, !dbg !92
  %3139 = bitcast i32 %3138 to <2 x bfloat>, !dbg !92
  %3140 = extractvalue { i32, i32, i32, i32 } %3135, 2, !dbg !92
  %3141 = bitcast i32 %3140 to <2 x bfloat>, !dbg !92
  %3142 = extractvalue { i32, i32, i32, i32 } %3135, 3, !dbg !92
  %3143 = bitcast i32 %3142 to <2 x bfloat>, !dbg !92
  %3144 = extractelement <2 x bfloat> %3137, i64 0, !dbg !92
  %3145 = extractelement <2 x bfloat> %3137, i64 1, !dbg !92
  %3146 = extractelement <2 x bfloat> %3139, i64 0, !dbg !92
  %3147 = extractelement <2 x bfloat> %3139, i64 1, !dbg !92
  %3148 = extractelement <2 x bfloat> %3141, i64 0, !dbg !92
  %3149 = extractelement <2 x bfloat> %3141, i64 1, !dbg !92
  %3150 = extractelement <2 x bfloat> %3143, i64 0, !dbg !92
  %3151 = extractelement <2 x bfloat> %3143, i64 1, !dbg !92
  %3152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1999, i1 %66) #5, !dbg !92
  %3153 = extractvalue { i32, i32, i32, i32 } %3152, 0, !dbg !92
  %3154 = bitcast i32 %3153 to <2 x bfloat>, !dbg !92
  %3155 = extractvalue { i32, i32, i32, i32 } %3152, 1, !dbg !92
  %3156 = bitcast i32 %3155 to <2 x bfloat>, !dbg !92
  %3157 = extractvalue { i32, i32, i32, i32 } %3152, 2, !dbg !92
  %3158 = bitcast i32 %3157 to <2 x bfloat>, !dbg !92
  %3159 = extractvalue { i32, i32, i32, i32 } %3152, 3, !dbg !92
  %3160 = bitcast i32 %3159 to <2 x bfloat>, !dbg !92
  %3161 = extractelement <2 x bfloat> %3154, i64 0, !dbg !92
  %3162 = extractelement <2 x bfloat> %3154, i64 1, !dbg !92
  %3163 = extractelement <2 x bfloat> %3156, i64 0, !dbg !92
  %3164 = extractelement <2 x bfloat> %3156, i64 1, !dbg !92
  %3165 = extractelement <2 x bfloat> %3158, i64 0, !dbg !92
  %3166 = extractelement <2 x bfloat> %3158, i64 1, !dbg !92
  %3167 = extractelement <2 x bfloat> %3160, i64 0, !dbg !92
  %3168 = extractelement <2 x bfloat> %3160, i64 1, !dbg !92
  %3169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2000, i1 %66) #5, !dbg !92
  %3170 = extractvalue { i32, i32, i32, i32 } %3169, 0, !dbg !92
  %3171 = bitcast i32 %3170 to <2 x bfloat>, !dbg !92
  %3172 = extractvalue { i32, i32, i32, i32 } %3169, 1, !dbg !92
  %3173 = bitcast i32 %3172 to <2 x bfloat>, !dbg !92
  %3174 = extractvalue { i32, i32, i32, i32 } %3169, 2, !dbg !92
  %3175 = bitcast i32 %3174 to <2 x bfloat>, !dbg !92
  %3176 = extractvalue { i32, i32, i32, i32 } %3169, 3, !dbg !92
  %3177 = bitcast i32 %3176 to <2 x bfloat>, !dbg !92
  %3178 = extractelement <2 x bfloat> %3171, i64 0, !dbg !92
  %3179 = extractelement <2 x bfloat> %3171, i64 1, !dbg !92
  %3180 = extractelement <2 x bfloat> %3173, i64 0, !dbg !92
  %3181 = extractelement <2 x bfloat> %3173, i64 1, !dbg !92
  %3182 = extractelement <2 x bfloat> %3175, i64 0, !dbg !92
  %3183 = extractelement <2 x bfloat> %3175, i64 1, !dbg !92
  %3184 = extractelement <2 x bfloat> %3177, i64 0, !dbg !92
  %3185 = extractelement <2 x bfloat> %3177, i64 1, !dbg !92
  %3186 = fpext bfloat %3059 to float, !dbg !93
  %3187 = fpext bfloat %3060 to float, !dbg !93
  %3188 = fpext bfloat %3061 to float, !dbg !93
  %3189 = fpext bfloat %3062 to float, !dbg !93
  %3190 = fpext bfloat %3063 to float, !dbg !93
  %3191 = fpext bfloat %3064 to float, !dbg !93
  %3192 = fpext bfloat %3065 to float, !dbg !93
  %3193 = fpext bfloat %3066 to float, !dbg !93
  %3194 = fpext bfloat %3076 to float, !dbg !93
  %3195 = fpext bfloat %3077 to float, !dbg !93
  %3196 = fpext bfloat %3078 to float, !dbg !93
  %3197 = fpext bfloat %3079 to float, !dbg !93
  %3198 = fpext bfloat %3080 to float, !dbg !93
  %3199 = fpext bfloat %3081 to float, !dbg !93
  %3200 = fpext bfloat %3082 to float, !dbg !93
  %3201 = fpext bfloat %3083 to float, !dbg !93
  %3202 = fpext bfloat %3093 to float, !dbg !93
  %3203 = fpext bfloat %3094 to float, !dbg !93
  %3204 = fpext bfloat %3095 to float, !dbg !93
  %3205 = fpext bfloat %3096 to float, !dbg !93
  %3206 = fpext bfloat %3097 to float, !dbg !93
  %3207 = fpext bfloat %3098 to float, !dbg !93
  %3208 = fpext bfloat %3099 to float, !dbg !93
  %3209 = fpext bfloat %3100 to float, !dbg !93
  %3210 = fpext bfloat %3110 to float, !dbg !93
  %3211 = fpext bfloat %3111 to float, !dbg !93
  %3212 = fpext bfloat %3112 to float, !dbg !93
  %3213 = fpext bfloat %3113 to float, !dbg !93
  %3214 = fpext bfloat %3114 to float, !dbg !93
  %3215 = fpext bfloat %3115 to float, !dbg !93
  %3216 = fpext bfloat %3116 to float, !dbg !93
  %3217 = fpext bfloat %3117 to float, !dbg !93
  %3218 = fpext bfloat %3127 to float, !dbg !93
  %3219 = fpext bfloat %3128 to float, !dbg !93
  %3220 = fpext bfloat %3129 to float, !dbg !93
  %3221 = fpext bfloat %3130 to float, !dbg !93
  %3222 = fpext bfloat %3131 to float, !dbg !93
  %3223 = fpext bfloat %3132 to float, !dbg !93
  %3224 = fpext bfloat %3133 to float, !dbg !93
  %3225 = fpext bfloat %3134 to float, !dbg !93
  %3226 = fpext bfloat %3144 to float, !dbg !93
  %3227 = fpext bfloat %3145 to float, !dbg !93
  %3228 = fpext bfloat %3146 to float, !dbg !93
  %3229 = fpext bfloat %3147 to float, !dbg !93
  %3230 = fpext bfloat %3148 to float, !dbg !93
  %3231 = fpext bfloat %3149 to float, !dbg !93
  %3232 = fpext bfloat %3150 to float, !dbg !93
  %3233 = fpext bfloat %3151 to float, !dbg !93
  %3234 = fpext bfloat %3161 to float, !dbg !93
  %3235 = fpext bfloat %3162 to float, !dbg !93
  %3236 = fpext bfloat %3163 to float, !dbg !93
  %3237 = fpext bfloat %3164 to float, !dbg !93
  %3238 = fpext bfloat %3165 to float, !dbg !93
  %3239 = fpext bfloat %3166 to float, !dbg !93
  %3240 = fpext bfloat %3167 to float, !dbg !93
  %3241 = fpext bfloat %3168 to float, !dbg !93
  %3242 = fpext bfloat %3178 to float, !dbg !93
  %3243 = fpext bfloat %3179 to float, !dbg !93
  %3244 = fpext bfloat %3180 to float, !dbg !93
  %3245 = fpext bfloat %3181 to float, !dbg !93
  %3246 = fpext bfloat %3182 to float, !dbg !93
  %3247 = fpext bfloat %3183 to float, !dbg !93
  %3248 = fpext bfloat %3184 to float, !dbg !93
  %3249 = fpext bfloat %3185 to float, !dbg !93
  %.inv = fcmp oge float %2753, 0.000000e+00, !dbg !94
  %3250 = select i1 %.inv, float 0.000000e+00, float %2753, !dbg !94
  %.inv64 = fcmp oge float %2754, 0.000000e+00, !dbg !94
  %3251 = select i1 %.inv64, float 0.000000e+00, float %2754, !dbg !94
  %3252 = fsub float 0.000000e+00, %3250, !dbg !96
  %3253 = fsub float 0.000000e+00, %3251, !dbg !96
  %.inv65 = fcmp ole float %3031, 0.000000e+00, !dbg !97
  %3254 = select i1 %.inv65, float 0.000000e+00, float %3031, !dbg !97
  %.inv66 = fcmp ole float %3032, 0.000000e+00, !dbg !97
  %3255 = select i1 %.inv66, float 0.000000e+00, float %3032, !dbg !97
  %3256 = fcmp ogt float %3252, %3254, !dbg !99
  %3257 = fcmp ogt float %3253, %3255, !dbg !99
  %3258 = fcmp uno float %3252, 0.000000e+00, !dbg !101
  %3259 = fcmp uno float %3253, 0.000000e+00, !dbg !101
  %3260 = or i1 %3258, %3256, !dbg !102
  %3261 = or i1 %3259, %3257, !dbg !102
  %3262 = select i1 %3260, float %3252, float %3254, !dbg !103
  %3263 = select i1 %3261, float %3253, float %3255, !dbg !103
  %3264 = fmul float %3262, 0x3F80204080000000, !dbg !104
  %3265 = fmul float %3263, 0x3F80204080000000, !dbg !104
  %3266 = fcmp ogt float %3264, 0x3EE4F8B580000000, !dbg !105
  %3267 = fcmp ogt float %3265, 0x3EE4F8B580000000, !dbg !105
  %3268 = fcmp uno float %3264, 0.000000e+00, !dbg !107
  %3269 = fcmp uno float %3265, 0.000000e+00, !dbg !107
  %3270 = or i1 %3266, %3268, !dbg !108
  %3271 = or i1 %3267, %3269, !dbg !108
  %3272 = select i1 %3270, float %3264, float 0x3EE4F8B580000000, !dbg !109
  %3273 = select i1 %3271, float %3265, float 0x3EE4F8B580000000, !dbg !109
  %3274 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3272), !dbg !110
  %3275 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3273), !dbg !110
  %3276 = fmul float %3274, %3186, !dbg !111
  %3277 = fmul float %3274, %3187, !dbg !111
  %3278 = fmul float %3274, %3188, !dbg !111
  %3279 = fmul float %3274, %3189, !dbg !111
  %3280 = fmul float %3274, %3190, !dbg !111
  %3281 = fmul float %3274, %3191, !dbg !111
  %3282 = fmul float %3274, %3192, !dbg !111
  %3283 = fmul float %3274, %3193, !dbg !111
  %3284 = fmul float %3274, %3194, !dbg !111
  %3285 = fmul float %3274, %3195, !dbg !111
  %3286 = fmul float %3274, %3196, !dbg !111
  %3287 = fmul float %3274, %3197, !dbg !111
  %3288 = fmul float %3274, %3198, !dbg !111
  %3289 = fmul float %3274, %3199, !dbg !111
  %3290 = fmul float %3274, %3200, !dbg !111
  %3291 = fmul float %3274, %3201, !dbg !111
  %3292 = fmul float %3274, %3202, !dbg !111
  %3293 = fmul float %3274, %3203, !dbg !111
  %3294 = fmul float %3274, %3204, !dbg !111
  %3295 = fmul float %3274, %3205, !dbg !111
  %3296 = fmul float %3274, %3206, !dbg !111
  %3297 = fmul float %3274, %3207, !dbg !111
  %3298 = fmul float %3274, %3208, !dbg !111
  %3299 = fmul float %3274, %3209, !dbg !111
  %3300 = fmul float %3274, %3210, !dbg !111
  %3301 = fmul float %3274, %3211, !dbg !111
  %3302 = fmul float %3274, %3212, !dbg !111
  %3303 = fmul float %3274, %3213, !dbg !111
  %3304 = fmul float %3274, %3214, !dbg !111
  %3305 = fmul float %3274, %3215, !dbg !111
  %3306 = fmul float %3274, %3216, !dbg !111
  %3307 = fmul float %3274, %3217, !dbg !111
  %3308 = fmul float %3275, %3218, !dbg !111
  %3309 = fmul float %3275, %3219, !dbg !111
  %3310 = fmul float %3275, %3220, !dbg !111
  %3311 = fmul float %3275, %3221, !dbg !111
  %3312 = fmul float %3275, %3222, !dbg !111
  %3313 = fmul float %3275, %3223, !dbg !111
  %3314 = fmul float %3275, %3224, !dbg !111
  %3315 = fmul float %3275, %3225, !dbg !111
  %3316 = fmul float %3275, %3226, !dbg !111
  %3317 = fmul float %3275, %3227, !dbg !111
  %3318 = fmul float %3275, %3228, !dbg !111
  %3319 = fmul float %3275, %3229, !dbg !111
  %3320 = fmul float %3275, %3230, !dbg !111
  %3321 = fmul float %3275, %3231, !dbg !111
  %3322 = fmul float %3275, %3232, !dbg !111
  %3323 = fmul float %3275, %3233, !dbg !111
  %3324 = fmul float %3275, %3234, !dbg !111
  %3325 = fmul float %3275, %3235, !dbg !111
  %3326 = fmul float %3275, %3236, !dbg !111
  %3327 = fmul float %3275, %3237, !dbg !111
  %3328 = fmul float %3275, %3238, !dbg !111
  %3329 = fmul float %3275, %3239, !dbg !111
  %3330 = fmul float %3275, %3240, !dbg !111
  %3331 = fmul float %3275, %3241, !dbg !111
  %3332 = fmul float %3275, %3242, !dbg !111
  %3333 = fmul float %3275, %3243, !dbg !111
  %3334 = fmul float %3275, %3244, !dbg !111
  %3335 = fmul float %3275, %3245, !dbg !111
  %3336 = fmul float %3275, %3246, !dbg !111
  %3337 = fmul float %3275, %3247, !dbg !111
  %3338 = fmul float %3275, %3248, !dbg !111
  %3339 = fmul float %3275, %3249, !dbg !111
  %3340 = tail call float @llvm.nvvm.round.f(float %3276) #5, !dbg !112
  %3341 = tail call float @llvm.nvvm.round.f(float %3277) #5, !dbg !112
  %3342 = tail call float @llvm.nvvm.round.f(float %3278) #5, !dbg !112
  %3343 = tail call float @llvm.nvvm.round.f(float %3279) #5, !dbg !112
  %3344 = tail call float @llvm.nvvm.round.f(float %3280) #5, !dbg !112
  %3345 = tail call float @llvm.nvvm.round.f(float %3281) #5, !dbg !112
  %3346 = tail call float @llvm.nvvm.round.f(float %3282) #5, !dbg !112
  %3347 = tail call float @llvm.nvvm.round.f(float %3283) #5, !dbg !112
  %3348 = tail call float @llvm.nvvm.round.f(float %3284) #5, !dbg !112
  %3349 = tail call float @llvm.nvvm.round.f(float %3285) #5, !dbg !112
  %3350 = tail call float @llvm.nvvm.round.f(float %3286) #5, !dbg !112
  %3351 = tail call float @llvm.nvvm.round.f(float %3287) #5, !dbg !112
  %3352 = tail call float @llvm.nvvm.round.f(float %3288) #5, !dbg !112
  %3353 = tail call float @llvm.nvvm.round.f(float %3289) #5, !dbg !112
  %3354 = tail call float @llvm.nvvm.round.f(float %3290) #5, !dbg !112
  %3355 = tail call float @llvm.nvvm.round.f(float %3291) #5, !dbg !112
  %3356 = tail call float @llvm.nvvm.round.f(float %3292) #5, !dbg !112
  %3357 = tail call float @llvm.nvvm.round.f(float %3293) #5, !dbg !112
  %3358 = tail call float @llvm.nvvm.round.f(float %3294) #5, !dbg !112
  %3359 = tail call float @llvm.nvvm.round.f(float %3295) #5, !dbg !112
  %3360 = tail call float @llvm.nvvm.round.f(float %3296) #5, !dbg !112
  %3361 = tail call float @llvm.nvvm.round.f(float %3297) #5, !dbg !112
  %3362 = tail call float @llvm.nvvm.round.f(float %3298) #5, !dbg !112
  %3363 = tail call float @llvm.nvvm.round.f(float %3299) #5, !dbg !112
  %3364 = tail call float @llvm.nvvm.round.f(float %3300) #5, !dbg !112
  %3365 = tail call float @llvm.nvvm.round.f(float %3301) #5, !dbg !112
  %3366 = tail call float @llvm.nvvm.round.f(float %3302) #5, !dbg !112
  %3367 = tail call float @llvm.nvvm.round.f(float %3303) #5, !dbg !112
  %3368 = tail call float @llvm.nvvm.round.f(float %3304) #5, !dbg !112
  %3369 = tail call float @llvm.nvvm.round.f(float %3305) #5, !dbg !112
  %3370 = tail call float @llvm.nvvm.round.f(float %3306) #5, !dbg !112
  %3371 = tail call float @llvm.nvvm.round.f(float %3307) #5, !dbg !112
  %3372 = tail call float @llvm.nvvm.round.f(float %3308) #5, !dbg !112
  %3373 = tail call float @llvm.nvvm.round.f(float %3309) #5, !dbg !112
  %3374 = tail call float @llvm.nvvm.round.f(float %3310) #5, !dbg !112
  %3375 = tail call float @llvm.nvvm.round.f(float %3311) #5, !dbg !112
  %3376 = tail call float @llvm.nvvm.round.f(float %3312) #5, !dbg !112
  %3377 = tail call float @llvm.nvvm.round.f(float %3313) #5, !dbg !112
  %3378 = tail call float @llvm.nvvm.round.f(float %3314) #5, !dbg !112
  %3379 = tail call float @llvm.nvvm.round.f(float %3315) #5, !dbg !112
  %3380 = tail call float @llvm.nvvm.round.f(float %3316) #5, !dbg !112
  %3381 = tail call float @llvm.nvvm.round.f(float %3317) #5, !dbg !112
  %3382 = tail call float @llvm.nvvm.round.f(float %3318) #5, !dbg !112
  %3383 = tail call float @llvm.nvvm.round.f(float %3319) #5, !dbg !112
  %3384 = tail call float @llvm.nvvm.round.f(float %3320) #5, !dbg !112
  %3385 = tail call float @llvm.nvvm.round.f(float %3321) #5, !dbg !112
  %3386 = tail call float @llvm.nvvm.round.f(float %3322) #5, !dbg !112
  %3387 = tail call float @llvm.nvvm.round.f(float %3323) #5, !dbg !112
  %3388 = tail call float @llvm.nvvm.round.f(float %3324) #5, !dbg !112
  %3389 = tail call float @llvm.nvvm.round.f(float %3325) #5, !dbg !112
  %3390 = tail call float @llvm.nvvm.round.f(float %3326) #5, !dbg !112
  %3391 = tail call float @llvm.nvvm.round.f(float %3327) #5, !dbg !112
  %3392 = tail call float @llvm.nvvm.round.f(float %3328) #5, !dbg !112
  %3393 = tail call float @llvm.nvvm.round.f(float %3329) #5, !dbg !112
  %3394 = tail call float @llvm.nvvm.round.f(float %3330) #5, !dbg !112
  %3395 = tail call float @llvm.nvvm.round.f(float %3331) #5, !dbg !112
  %3396 = tail call float @llvm.nvvm.round.f(float %3332) #5, !dbg !112
  %3397 = tail call float @llvm.nvvm.round.f(float %3333) #5, !dbg !112
  %3398 = tail call float @llvm.nvvm.round.f(float %3334) #5, !dbg !112
  %3399 = tail call float @llvm.nvvm.round.f(float %3335) #5, !dbg !112
  %3400 = tail call float @llvm.nvvm.round.f(float %3336) #5, !dbg !112
  %3401 = tail call float @llvm.nvvm.round.f(float %3337) #5, !dbg !112
  %3402 = tail call float @llvm.nvvm.round.f(float %3338) #5, !dbg !112
  %3403 = tail call float @llvm.nvvm.round.f(float %3339) #5, !dbg !112
  %3404 = insertelement <4 x float> poison, float %3340, i64 0, !dbg !113
  %3405 = insertelement <4 x float> %3404, float %3341, i64 1, !dbg !113
  %3406 = insertelement <4 x float> %3405, float %3342, i64 2, !dbg !113
  %3407 = insertelement <4 x float> %3406, float %3343, i64 3, !dbg !113
  %3408 = fcmp ogt <4 x float> %3407, splat (float -1.270000e+02), !dbg !113
  %3409 = fcmp uno <4 x float> %3407, zeroinitializer, !dbg !115
  %3410 = or <4 x i1> %3408, %3409, !dbg !116
  %3411 = select <4 x i1> %3410, <4 x float> %3407, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3412 = fcmp olt <4 x float> %3411, splat (float 1.270000e+02), !dbg !118
  %3413 = fcmp uno <4 x float> %3411, zeroinitializer, !dbg !120
  %3414 = or <4 x i1> %3412, %3413, !dbg !121
  %3415 = fptosi <4 x float> %3411 to <4 x i8>, !dbg !122
  %3416 = select <4 x i1> %3414, <4 x i8> %3415, <4 x i8> splat (i8 127), !dbg !123
  %3417 = insertelement <4 x float> poison, float %3344, i64 0, !dbg !113
  %3418 = insertelement <4 x float> %3417, float %3345, i64 1, !dbg !113
  %3419 = insertelement <4 x float> %3418, float %3346, i64 2, !dbg !113
  %3420 = insertelement <4 x float> %3419, float %3347, i64 3, !dbg !113
  %3421 = fcmp ogt <4 x float> %3420, splat (float -1.270000e+02), !dbg !113
  %3422 = fcmp uno <4 x float> %3420, zeroinitializer, !dbg !115
  %3423 = or <4 x i1> %3421, %3422, !dbg !116
  %3424 = select <4 x i1> %3423, <4 x float> %3420, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3425 = fcmp olt <4 x float> %3424, splat (float 1.270000e+02), !dbg !118
  %3426 = fcmp uno <4 x float> %3424, zeroinitializer, !dbg !120
  %3427 = or <4 x i1> %3425, %3426, !dbg !121
  %3428 = fptosi <4 x float> %3424 to <4 x i8>, !dbg !122
  %3429 = select <4 x i1> %3427, <4 x i8> %3428, <4 x i8> splat (i8 127), !dbg !123
  %3430 = insertelement <4 x float> poison, float %3348, i64 0, !dbg !113
  %3431 = insertelement <4 x float> %3430, float %3349, i64 1, !dbg !113
  %3432 = insertelement <4 x float> %3431, float %3350, i64 2, !dbg !113
  %3433 = insertelement <4 x float> %3432, float %3351, i64 3, !dbg !113
  %3434 = fcmp ogt <4 x float> %3433, splat (float -1.270000e+02), !dbg !113
  %3435 = fcmp uno <4 x float> %3433, zeroinitializer, !dbg !115
  %3436 = or <4 x i1> %3434, %3435, !dbg !116
  %3437 = select <4 x i1> %3436, <4 x float> %3433, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3438 = fcmp olt <4 x float> %3437, splat (float 1.270000e+02), !dbg !118
  %3439 = fcmp uno <4 x float> %3437, zeroinitializer, !dbg !120
  %3440 = or <4 x i1> %3438, %3439, !dbg !121
  %3441 = fptosi <4 x float> %3437 to <4 x i8>, !dbg !122
  %3442 = select <4 x i1> %3440, <4 x i8> %3441, <4 x i8> splat (i8 127), !dbg !123
  %3443 = insertelement <4 x float> poison, float %3352, i64 0, !dbg !113
  %3444 = insertelement <4 x float> %3443, float %3353, i64 1, !dbg !113
  %3445 = insertelement <4 x float> %3444, float %3354, i64 2, !dbg !113
  %3446 = insertelement <4 x float> %3445, float %3355, i64 3, !dbg !113
  %3447 = fcmp ogt <4 x float> %3446, splat (float -1.270000e+02), !dbg !113
  %3448 = fcmp uno <4 x float> %3446, zeroinitializer, !dbg !115
  %3449 = or <4 x i1> %3447, %3448, !dbg !116
  %3450 = select <4 x i1> %3449, <4 x float> %3446, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3451 = fcmp olt <4 x float> %3450, splat (float 1.270000e+02), !dbg !118
  %3452 = fcmp uno <4 x float> %3450, zeroinitializer, !dbg !120
  %3453 = or <4 x i1> %3451, %3452, !dbg !121
  %3454 = fptosi <4 x float> %3450 to <4 x i8>, !dbg !122
  %3455 = select <4 x i1> %3453, <4 x i8> %3454, <4 x i8> splat (i8 127), !dbg !123
  %3456 = insertelement <4 x float> poison, float %3356, i64 0, !dbg !113
  %3457 = insertelement <4 x float> %3456, float %3357, i64 1, !dbg !113
  %3458 = insertelement <4 x float> %3457, float %3358, i64 2, !dbg !113
  %3459 = insertelement <4 x float> %3458, float %3359, i64 3, !dbg !113
  %3460 = fcmp ogt <4 x float> %3459, splat (float -1.270000e+02), !dbg !113
  %3461 = fcmp uno <4 x float> %3459, zeroinitializer, !dbg !115
  %3462 = or <4 x i1> %3460, %3461, !dbg !116
  %3463 = select <4 x i1> %3462, <4 x float> %3459, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3464 = fcmp olt <4 x float> %3463, splat (float 1.270000e+02), !dbg !118
  %3465 = fcmp uno <4 x float> %3463, zeroinitializer, !dbg !120
  %3466 = or <4 x i1> %3464, %3465, !dbg !121
  %3467 = fptosi <4 x float> %3463 to <4 x i8>, !dbg !122
  %3468 = select <4 x i1> %3466, <4 x i8> %3467, <4 x i8> splat (i8 127), !dbg !123
  %3469 = insertelement <4 x float> poison, float %3360, i64 0, !dbg !113
  %3470 = insertelement <4 x float> %3469, float %3361, i64 1, !dbg !113
  %3471 = insertelement <4 x float> %3470, float %3362, i64 2, !dbg !113
  %3472 = insertelement <4 x float> %3471, float %3363, i64 3, !dbg !113
  %3473 = fcmp ogt <4 x float> %3472, splat (float -1.270000e+02), !dbg !113
  %3474 = fcmp uno <4 x float> %3472, zeroinitializer, !dbg !115
  %3475 = or <4 x i1> %3473, %3474, !dbg !116
  %3476 = select <4 x i1> %3475, <4 x float> %3472, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3477 = fcmp olt <4 x float> %3476, splat (float 1.270000e+02), !dbg !118
  %3478 = fcmp uno <4 x float> %3476, zeroinitializer, !dbg !120
  %3479 = or <4 x i1> %3477, %3478, !dbg !121
  %3480 = fptosi <4 x float> %3476 to <4 x i8>, !dbg !122
  %3481 = select <4 x i1> %3479, <4 x i8> %3480, <4 x i8> splat (i8 127), !dbg !123
  %3482 = insertelement <4 x float> poison, float %3364, i64 0, !dbg !113
  %3483 = insertelement <4 x float> %3482, float %3365, i64 1, !dbg !113
  %3484 = insertelement <4 x float> %3483, float %3366, i64 2, !dbg !113
  %3485 = insertelement <4 x float> %3484, float %3367, i64 3, !dbg !113
  %3486 = fcmp ogt <4 x float> %3485, splat (float -1.270000e+02), !dbg !113
  %3487 = fcmp uno <4 x float> %3485, zeroinitializer, !dbg !115
  %3488 = or <4 x i1> %3486, %3487, !dbg !116
  %3489 = select <4 x i1> %3488, <4 x float> %3485, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3490 = fcmp olt <4 x float> %3489, splat (float 1.270000e+02), !dbg !118
  %3491 = fcmp uno <4 x float> %3489, zeroinitializer, !dbg !120
  %3492 = or <4 x i1> %3490, %3491, !dbg !121
  %3493 = fptosi <4 x float> %3489 to <4 x i8>, !dbg !122
  %3494 = select <4 x i1> %3492, <4 x i8> %3493, <4 x i8> splat (i8 127), !dbg !123
  %3495 = insertelement <4 x float> poison, float %3368, i64 0, !dbg !113
  %3496 = insertelement <4 x float> %3495, float %3369, i64 1, !dbg !113
  %3497 = insertelement <4 x float> %3496, float %3370, i64 2, !dbg !113
  %3498 = insertelement <4 x float> %3497, float %3371, i64 3, !dbg !113
  %3499 = fcmp ogt <4 x float> %3498, splat (float -1.270000e+02), !dbg !113
  %3500 = fcmp uno <4 x float> %3498, zeroinitializer, !dbg !115
  %3501 = or <4 x i1> %3499, %3500, !dbg !116
  %3502 = select <4 x i1> %3501, <4 x float> %3498, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3503 = fcmp olt <4 x float> %3502, splat (float 1.270000e+02), !dbg !118
  %3504 = fcmp uno <4 x float> %3502, zeroinitializer, !dbg !120
  %3505 = or <4 x i1> %3503, %3504, !dbg !121
  %3506 = fptosi <4 x float> %3502 to <4 x i8>, !dbg !122
  %3507 = select <4 x i1> %3505, <4 x i8> %3506, <4 x i8> splat (i8 127), !dbg !123
  %3508 = insertelement <4 x float> poison, float %3372, i64 0, !dbg !113
  %3509 = insertelement <4 x float> %3508, float %3373, i64 1, !dbg !113
  %3510 = insertelement <4 x float> %3509, float %3374, i64 2, !dbg !113
  %3511 = insertelement <4 x float> %3510, float %3375, i64 3, !dbg !113
  %3512 = fcmp ogt <4 x float> %3511, splat (float -1.270000e+02), !dbg !113
  %3513 = fcmp uno <4 x float> %3511, zeroinitializer, !dbg !115
  %3514 = or <4 x i1> %3512, %3513, !dbg !116
  %3515 = select <4 x i1> %3514, <4 x float> %3511, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3516 = fcmp olt <4 x float> %3515, splat (float 1.270000e+02), !dbg !118
  %3517 = fcmp uno <4 x float> %3515, zeroinitializer, !dbg !120
  %3518 = or <4 x i1> %3516, %3517, !dbg !121
  %3519 = fptosi <4 x float> %3515 to <4 x i8>, !dbg !122
  %3520 = select <4 x i1> %3518, <4 x i8> %3519, <4 x i8> splat (i8 127), !dbg !123
  %3521 = insertelement <4 x float> poison, float %3376, i64 0, !dbg !113
  %3522 = insertelement <4 x float> %3521, float %3377, i64 1, !dbg !113
  %3523 = insertelement <4 x float> %3522, float %3378, i64 2, !dbg !113
  %3524 = insertelement <4 x float> %3523, float %3379, i64 3, !dbg !113
  %3525 = fcmp ogt <4 x float> %3524, splat (float -1.270000e+02), !dbg !113
  %3526 = fcmp uno <4 x float> %3524, zeroinitializer, !dbg !115
  %3527 = or <4 x i1> %3525, %3526, !dbg !116
  %3528 = select <4 x i1> %3527, <4 x float> %3524, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3529 = fcmp olt <4 x float> %3528, splat (float 1.270000e+02), !dbg !118
  %3530 = fcmp uno <4 x float> %3528, zeroinitializer, !dbg !120
  %3531 = or <4 x i1> %3529, %3530, !dbg !121
  %3532 = fptosi <4 x float> %3528 to <4 x i8>, !dbg !122
  %3533 = select <4 x i1> %3531, <4 x i8> %3532, <4 x i8> splat (i8 127), !dbg !123
  %3534 = insertelement <4 x float> poison, float %3380, i64 0, !dbg !113
  %3535 = insertelement <4 x float> %3534, float %3381, i64 1, !dbg !113
  %3536 = insertelement <4 x float> %3535, float %3382, i64 2, !dbg !113
  %3537 = insertelement <4 x float> %3536, float %3383, i64 3, !dbg !113
  %3538 = fcmp ogt <4 x float> %3537, splat (float -1.270000e+02), !dbg !113
  %3539 = fcmp uno <4 x float> %3537, zeroinitializer, !dbg !115
  %3540 = or <4 x i1> %3538, %3539, !dbg !116
  %3541 = select <4 x i1> %3540, <4 x float> %3537, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3542 = fcmp olt <4 x float> %3541, splat (float 1.270000e+02), !dbg !118
  %3543 = fcmp uno <4 x float> %3541, zeroinitializer, !dbg !120
  %3544 = or <4 x i1> %3542, %3543, !dbg !121
  %3545 = fptosi <4 x float> %3541 to <4 x i8>, !dbg !122
  %3546 = select <4 x i1> %3544, <4 x i8> %3545, <4 x i8> splat (i8 127), !dbg !123
  %3547 = insertelement <4 x float> poison, float %3384, i64 0, !dbg !113
  %3548 = insertelement <4 x float> %3547, float %3385, i64 1, !dbg !113
  %3549 = insertelement <4 x float> %3548, float %3386, i64 2, !dbg !113
  %3550 = insertelement <4 x float> %3549, float %3387, i64 3, !dbg !113
  %3551 = fcmp ogt <4 x float> %3550, splat (float -1.270000e+02), !dbg !113
  %3552 = fcmp uno <4 x float> %3550, zeroinitializer, !dbg !115
  %3553 = or <4 x i1> %3551, %3552, !dbg !116
  %3554 = select <4 x i1> %3553, <4 x float> %3550, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3555 = fcmp olt <4 x float> %3554, splat (float 1.270000e+02), !dbg !118
  %3556 = fcmp uno <4 x float> %3554, zeroinitializer, !dbg !120
  %3557 = or <4 x i1> %3555, %3556, !dbg !121
  %3558 = fptosi <4 x float> %3554 to <4 x i8>, !dbg !122
  %3559 = select <4 x i1> %3557, <4 x i8> %3558, <4 x i8> splat (i8 127), !dbg !123
  %3560 = insertelement <4 x float> poison, float %3388, i64 0, !dbg !113
  %3561 = insertelement <4 x float> %3560, float %3389, i64 1, !dbg !113
  %3562 = insertelement <4 x float> %3561, float %3390, i64 2, !dbg !113
  %3563 = insertelement <4 x float> %3562, float %3391, i64 3, !dbg !113
  %3564 = fcmp ogt <4 x float> %3563, splat (float -1.270000e+02), !dbg !113
  %3565 = fcmp uno <4 x float> %3563, zeroinitializer, !dbg !115
  %3566 = or <4 x i1> %3564, %3565, !dbg !116
  %3567 = select <4 x i1> %3566, <4 x float> %3563, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3568 = fcmp olt <4 x float> %3567, splat (float 1.270000e+02), !dbg !118
  %3569 = fcmp uno <4 x float> %3567, zeroinitializer, !dbg !120
  %3570 = or <4 x i1> %3568, %3569, !dbg !121
  %3571 = fptosi <4 x float> %3567 to <4 x i8>, !dbg !122
  %3572 = select <4 x i1> %3570, <4 x i8> %3571, <4 x i8> splat (i8 127), !dbg !123
  %3573 = insertelement <4 x float> poison, float %3392, i64 0, !dbg !113
  %3574 = insertelement <4 x float> %3573, float %3393, i64 1, !dbg !113
  %3575 = insertelement <4 x float> %3574, float %3394, i64 2, !dbg !113
  %3576 = insertelement <4 x float> %3575, float %3395, i64 3, !dbg !113
  %3577 = fcmp ogt <4 x float> %3576, splat (float -1.270000e+02), !dbg !113
  %3578 = fcmp uno <4 x float> %3576, zeroinitializer, !dbg !115
  %3579 = or <4 x i1> %3577, %3578, !dbg !116
  %3580 = select <4 x i1> %3579, <4 x float> %3576, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3581 = fcmp olt <4 x float> %3580, splat (float 1.270000e+02), !dbg !118
  %3582 = fcmp uno <4 x float> %3580, zeroinitializer, !dbg !120
  %3583 = or <4 x i1> %3581, %3582, !dbg !121
  %3584 = fptosi <4 x float> %3580 to <4 x i8>, !dbg !122
  %3585 = select <4 x i1> %3583, <4 x i8> %3584, <4 x i8> splat (i8 127), !dbg !123
  %3586 = insertelement <4 x float> poison, float %3396, i64 0, !dbg !113
  %3587 = insertelement <4 x float> %3586, float %3397, i64 1, !dbg !113
  %3588 = insertelement <4 x float> %3587, float %3398, i64 2, !dbg !113
  %3589 = insertelement <4 x float> %3588, float %3399, i64 3, !dbg !113
  %3590 = fcmp ogt <4 x float> %3589, splat (float -1.270000e+02), !dbg !113
  %3591 = fcmp uno <4 x float> %3589, zeroinitializer, !dbg !115
  %3592 = or <4 x i1> %3590, %3591, !dbg !116
  %3593 = select <4 x i1> %3592, <4 x float> %3589, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3594 = fcmp olt <4 x float> %3593, splat (float 1.270000e+02), !dbg !118
  %3595 = fcmp uno <4 x float> %3593, zeroinitializer, !dbg !120
  %3596 = or <4 x i1> %3594, %3595, !dbg !121
  %3597 = fptosi <4 x float> %3593 to <4 x i8>, !dbg !122
  %3598 = select <4 x i1> %3596, <4 x i8> %3597, <4 x i8> splat (i8 127), !dbg !123
  %3599 = insertelement <4 x float> poison, float %3400, i64 0, !dbg !113
  %3600 = insertelement <4 x float> %3599, float %3401, i64 1, !dbg !113
  %3601 = insertelement <4 x float> %3600, float %3402, i64 2, !dbg !113
  %3602 = insertelement <4 x float> %3601, float %3403, i64 3, !dbg !113
  %3603 = fcmp ogt <4 x float> %3602, splat (float -1.270000e+02), !dbg !113
  %3604 = fcmp uno <4 x float> %3602, zeroinitializer, !dbg !115
  %3605 = or <4 x i1> %3603, %3604, !dbg !116
  %3606 = select <4 x i1> %3605, <4 x float> %3602, <4 x float> splat (float -1.270000e+02), !dbg !117
  %3607 = fcmp olt <4 x float> %3606, splat (float 1.270000e+02), !dbg !118
  %3608 = fcmp uno <4 x float> %3606, zeroinitializer, !dbg !120
  %3609 = or <4 x i1> %3607, %3608, !dbg !121
  %3610 = fptosi <4 x float> %3606 to <4 x i8>, !dbg !122
  %3611 = select <4 x i1> %3609, <4 x i8> %3610, <4 x i8> splat (i8 127), !dbg !123
  %3612 = getelementptr i8, ptr addrspace(1) %10, i64 %49, !dbg !124
  %3613 = getelementptr i8, ptr addrspace(1) %10, i64 %53, !dbg !124
  %3614 = getelementptr i8, ptr addrspace(1) %10, i64 %57, !dbg !124
  %3615 = getelementptr i8, ptr addrspace(1) %10, i64 %61, !dbg !124
  %3616 = bitcast <4 x i8> %3416 to i32, !dbg !125
  %3617 = bitcast <4 x i8> %3429 to i32, !dbg !125
  %3618 = bitcast <4 x i8> %3442 to i32, !dbg !125
  %3619 = bitcast <4 x i8> %3455 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3616, i32 %3617, i32 %3618, i32 %3619, ptr addrspace(1) %3612, i1 %21) #5, !dbg !125
  %3620 = bitcast <4 x i8> %3468 to i32, !dbg !125
  %3621 = bitcast <4 x i8> %3481 to i32, !dbg !125
  %3622 = bitcast <4 x i8> %3494 to i32, !dbg !125
  %3623 = bitcast <4 x i8> %3507 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3620, i32 %3621, i32 %3622, i32 %3623, ptr addrspace(1) %3613, i1 %65) #5, !dbg !125
  %3624 = bitcast <4 x i8> %3520 to i32, !dbg !125
  %3625 = bitcast <4 x i8> %3533 to i32, !dbg !125
  %3626 = bitcast <4 x i8> %3546 to i32, !dbg !125
  %3627 = bitcast <4 x i8> %3559 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3624, i32 %3625, i32 %3626, i32 %3627, ptr addrspace(1) %3614, i1 %22) #5, !dbg !125
  %3628 = bitcast <4 x i8> %3572 to i32, !dbg !125
  %3629 = bitcast <4 x i8> %3585 to i32, !dbg !125
  %3630 = bitcast <4 x i8> %3598 to i32, !dbg !125
  %3631 = bitcast <4 x i8> %3611 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3628, i32 %3629, i32 %3630, i32 %3631, ptr addrspace(1) %3615, i1 %66) #5, !dbg !125
  %3632 = getelementptr i8, ptr addrspace(1) %11, i64 %49, !dbg !126
  %3633 = getelementptr i8, ptr addrspace(1) %11, i64 %53, !dbg !126
  %3634 = getelementptr i8, ptr addrspace(1) %11, i64 %57, !dbg !126
  %3635 = getelementptr i8, ptr addrspace(1) %11, i64 %61, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3616, i32 %3617, i32 %3618, i32 %3619, ptr addrspace(1) %3632, i1 %21) #5, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3620, i32 %3621, i32 %3622, i32 %3623, ptr addrspace(1) %3633, i1 %65) #5, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3624, i32 %3625, i32 %3626, i32 %3627, ptr addrspace(1) %3634, i1 %22) #5, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3628, i32 %3629, i32 %3630, i32 %3631, ptr addrspace(1) %3635, i1 %66) #5, !dbg !127
  %3636 = getelementptr i8, ptr addrspace(1) %12, i64 %49, !dbg !128
  %3637 = getelementptr i8, ptr addrspace(1) %12, i64 %53, !dbg !128
  %3638 = getelementptr i8, ptr addrspace(1) %12, i64 %57, !dbg !128
  %3639 = getelementptr i8, ptr addrspace(1) %12, i64 %61, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3616, i32 %3617, i32 %3618, i32 %3619, ptr addrspace(1) %3636, i1 %21) #5, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3620, i32 %3621, i32 %3622, i32 %3623, ptr addrspace(1) %3637, i1 %65) #5, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3624, i32 %3625, i32 %3626, i32 %3627, ptr addrspace(1) %3638, i1 %22) #5, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3628, i32 %3629, i32 %3630, i32 %3631, ptr addrspace(1) %3639, i1 %66) #5, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 59, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 101, column: 53, scope: !6)
!93 = !DILocation(line: 101, column: 115, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !95)
!95 = !DILocation(line: 103, column: 46, scope: !6)
!96 = !DILocation(line: 104, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !98)
!98 = !DILocation(line: 105, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !100)
!100 = !DILocation(line: 106, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !100)
!104 = !DILocation(line: 108, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !106)
!106 = !DILocation(line: 111, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !106)
!110 = !DILocation(line: 114, column: 25, scope: !6)
!111 = !DILocation(line: 117, column: 24, scope: !6)
!112 = !DILocation(line: 118, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !114)
!114 = !DILocation(line: 121, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !119)
!119 = !DILocation(line: 123, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !119)
!122 = !DILocation(line: 125, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !119)
!124 = !DILocation(line: 126, column: 29, scope: !6)
!125 = !DILocation(line: 126, column: 53, scope: !6)
!126 = !DILocation(line: 127, column: 30, scope: !6)
!127 = !DILocation(line: 127, column: 54, scope: !6)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 95, column: 4, scope: !6)
