; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 1, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 256, !dbg !11
  %.lobit = lshr exact i32 %16, 8, !dbg !11
  %17 = and i32 %15, 31, !dbg !11
  %18 = or disjoint i32 %.lobit, %14, !dbg !12
  %19 = icmp slt i32 %18, 3600, !dbg !13
  %20 = icmp slt i32 %14, 3600, !dbg !13
  %21 = shl i32 %15, 2, !dbg !14
  %22 = and i32 %21, 2044, !dbg !14
  %23 = shl i32 %15, 3, !dbg !14
  %24 = and i32 %23, 2040, !dbg !14
  %25 = or disjoint i32 %24, 4, !dbg !14
  %26 = sext i32 %18 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %19) #5, !dbg !16
  %36 = bitcast i16 %35 to bfloat, !dbg !16
  %37 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !17
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !18
  %46 = bitcast i16 %45 to bfloat, !dbg !18
  %47 = mul i32 %18, 12288, !dbg !19
  %48 = mul i32 %13, 24576, !dbg !19
  %49 = add i32 %48, 12288, !dbg !19
  %.inv = fcmp oge bfloat %36, 0xR0000, !dbg !20
  %50 = select i1 %.inv, bfloat 0xR0000, bfloat %36, !dbg !20
  %51 = fpext bfloat %50 to float, !dbg !20
  %52 = fsub float 0.000000e+00, %51, !dbg !24
  %.inv3 = fcmp ole bfloat %46, 0xR0000, !dbg !25
  %53 = select i1 %.inv3, bfloat 0xR0000, bfloat %46, !dbg !25
  %54 = fpext bfloat %53 to float, !dbg !25
  %55 = fcmp ogt float %52, %54, !dbg !27
  %56 = fcmp uno float %52, 0.000000e+00, !dbg !29
  %57 = or i1 %56, %55, !dbg !30
  %58 = select i1 %57, float %52, float %54, !dbg !31
  %59 = fmul float %58, 0x3F80204080000000, !dbg !32
  %60 = fcmp ogt float %59, 0x3EE4F8B580000000, !dbg !33
  %61 = fcmp uno float %59, 0.000000e+00, !dbg !35
  %62 = or i1 %60, %61, !dbg !36
  %63 = select i1 %62, float %59, float 0x3EE4F8B580000000, !dbg !37
  %64 = or disjoint i32 %47, %24
  %65 = or disjoint i32 %47, %25
  %66 = and i32 %23, 4088
  %67 = lshr i32 %23, 9
  %68 = and i32 %67, 4
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %66
  %71 = or disjoint i32 %66, 4
  %72 = getelementptr float, ptr addrspace(3) %69, i32 %71
  %73 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %74 = getelementptr inbounds nuw i8, ptr addrspace(3) %73, i32 8208
  %75 = zext nneg i32 %22 to i64, !dbg !38
  %76 = getelementptr inbounds nuw i8, ptr addrspace(3) %73, i32 8
  %77 = getelementptr inbounds nuw i8, ptr addrspace(3) %73, i32 8216
  %78 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !39
  %79 = shufflevector <4 x i1> %78, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %80, !dbg !38

80:                                               ; preds = %12, %__nv_tanhf.exit299
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit299 ]
  %81 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %510, %__nv_tanhf.exit299 ]
  %82 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %511, %__nv_tanhf.exit299 ]
  %83 = phi <4 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %493, %__nv_tanhf.exit299 ]
  %84 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %512, %__nv_tanhf.exit299 ]
  %85 = or disjoint i64 %indvars.iv, %75, !dbg !40
  %86 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %87 = add i32 %64, %86, !dbg !41
  %88 = add i32 %65, %86, !dbg !41
  %89 = trunc nuw nsw i64 %85 to i32, !dbg !41
  %90 = add i32 %48, %89, !dbg !41
  %91 = add i32 %49, %89, !dbg !41
  %92 = sext i32 %87 to i64, !dbg !42
  %93 = getelementptr i32, ptr addrspace(1) %0, i64 %92, !dbg !42
  %94 = sext i32 %88 to i64, !dbg !42
  %95 = getelementptr i32, ptr addrspace(1) %0, i64 %94, !dbg !42
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %19) #5, !dbg !43
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !43
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !43
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !43
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !43
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %19) #5, !dbg !43
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !43
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !43
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !43
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !43
  %106 = getelementptr bfloat, ptr addrspace(1) %3, i64 %85, !dbg !44
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %106, i1 true) #5, !dbg !45
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !45
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !45
  %110 = extractvalue { i32, i32 } %107, 1, !dbg !45
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !45
  %112 = getelementptr bfloat, ptr addrspace(1) %4, i64 %85, !dbg !46
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %112, i1 true) #5, !dbg !47
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !47
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !47
  %116 = extractvalue { i32, i32 } %113, 1, !dbg !47
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !47
  %118 = sitofp i32 %97 to float, !dbg !48
  %119 = sitofp i32 %98 to float, !dbg !48
  %120 = sitofp i32 %99 to float, !dbg !48
  %121 = sitofp i32 %100 to float, !dbg !48
  %122 = sitofp i32 %102 to float, !dbg !48
  %123 = sitofp i32 %103 to float, !dbg !48
  %124 = sitofp i32 %104 to float, !dbg !48
  %125 = sitofp i32 %105 to float, !dbg !48
  %126 = fmul float %63, %118, !dbg !49
  %127 = fmul float %63, %119, !dbg !49
  %128 = fmul float %63, %120, !dbg !49
  %129 = fmul float %63, %121, !dbg !49
  %130 = fmul float %63, %122, !dbg !49
  %131 = fmul float %63, %123, !dbg !49
  %132 = fmul float %63, %124, !dbg !49
  %133 = fmul float %63, %125, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %134 = bitcast float %126 to i32, !dbg !49
  %135 = bitcast float %127 to i32, !dbg !49
  %136 = bitcast float %128 to i32, !dbg !49
  %137 = bitcast float %129 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %70, i32 %134, i32 %135, i32 %136, i32 %137, i1 true) #5, !dbg !49
  %138 = bitcast float %130 to i32, !dbg !49
  %139 = bitcast float %131 to i32, !dbg !49
  %140 = bitcast float %132 to i32, !dbg !49
  %141 = bitcast float %133 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %138, i32 %139, i32 %140, i32 %141, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %142 = fpext <2 x bfloat> %109 to <2 x float>, !dbg !50
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !50
  %144 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !51
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !51
  %146 = load <2 x float>, ptr addrspace(3) %73, align 16, !dbg !49
  %147 = load <2 x float>, ptr addrspace(3) %74, align 16, !dbg !49
  %148 = shufflevector <2 x float> %147, <2 x float> %146, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !52
  %149 = fmul <4 x float> %148, %143, !dbg !52
  %150 = fadd <4 x float> %149, %145, !dbg !53
  %151 = fpext <2 x bfloat> %111 to <2 x float>, !dbg !50
  %152 = shufflevector <2 x float> %151, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !50
  %153 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !51
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !51
  %155 = load <2 x float>, ptr addrspace(3) %76, align 8, !dbg !49
  %156 = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !49
  %157 = load <2 x float>, ptr addrspace(3) %77, align 8, !dbg !49
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !49
  %159 = shufflevector <2 x float> %158, <2 x float> %156, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %160 = fmul <4 x float> %159, %152, !dbg !52
  %161 = fadd <4 x float> %160, %154, !dbg !53
  %162 = fmul <4 x float> %150, splat (float 5.000000e-01), !dbg !54
  %163 = fmul <4 x float> %161, splat (float 5.000000e-01), !dbg !54
  %164 = extractelement <4 x float> %150, i64 1, !dbg !55
  %165 = fmul float %164, %164, !dbg !56
  %166 = extractelement <4 x float> %150, i64 3, !dbg !55
  %167 = fmul float %166, %166, !dbg !56
  %168 = extractelement <4 x float> %161, i64 3, !dbg !55
  %169 = fmul float %168, %168, !dbg !56
  %170 = extractelement <4 x float> %161, i64 2, !dbg !55
  %171 = fmul float %170, %170, !dbg !56
  %172 = extractelement <4 x float> %150, i64 0, !dbg !55
  %173 = fmul float %172, %172, !dbg !56
  %174 = extractelement <4 x float> %150, i64 2, !dbg !55
  %175 = fmul float %174, %174, !dbg !56
  %176 = extractelement <4 x float> %161, i64 1, !dbg !55
  %177 = fmul float %176, %176, !dbg !56
  %178 = extractelement <4 x float> %161, i64 0, !dbg !55
  %179 = fmul float %178, %178, !dbg !56
  %180 = fmul float %164, %165, !dbg !57
  %181 = fmul float %166, %167, !dbg !57
  %182 = fmul float %168, %169, !dbg !57
  %183 = fmul float %170, %171, !dbg !57
  %184 = fmul float %172, %173, !dbg !57
  %185 = fmul float %174, %175, !dbg !57
  %186 = fmul float %176, %177, !dbg !57
  %187 = fmul float %178, %179, !dbg !57
  %188 = fmul float %180, 0x3FA6E4E260000000, !dbg !58
  %189 = fmul float %181, 0x3FA6E4E260000000, !dbg !58
  %190 = fmul float %182, 0x3FA6E4E260000000, !dbg !58
  %191 = fmul float %183, 0x3FA6E4E260000000, !dbg !58
  %192 = fmul float %184, 0x3FA6E4E260000000, !dbg !58
  %193 = fmul float %185, 0x3FA6E4E260000000, !dbg !58
  %194 = fmul float %186, 0x3FA6E4E260000000, !dbg !58
  %195 = fmul float %187, 0x3FA6E4E260000000, !dbg !58
  %196 = fadd float %164, %188, !dbg !55
  %197 = fadd float %166, %189, !dbg !55
  %198 = fadd float %168, %190, !dbg !55
  %199 = fadd float %170, %191, !dbg !55
  %200 = fadd float %172, %192, !dbg !55
  %201 = fadd float %174, %193, !dbg !55
  %202 = fadd float %176, %194, !dbg !55
  %203 = fadd float %178, %195, !dbg !55
  %204 = fmul float %196, 0x3FE9884540000000, !dbg !59
  %205 = fmul float %197, 0x3FE9884540000000, !dbg !59
  %206 = fmul float %198, 0x3FE9884540000000, !dbg !59
  %207 = fmul float %199, 0x3FE9884540000000, !dbg !59
  %208 = fmul float %200, 0x3FE9884540000000, !dbg !59
  %209 = fmul float %201, 0x3FE9884540000000, !dbg !59
  %210 = fmul float %202, 0x3FE9884540000000, !dbg !59
  %211 = fmul float %203, 0x3FE9884540000000, !dbg !59
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i148 = icmp eq i32 %212, 0, !dbg !60
  %213 = tail call float @llvm.nvvm.fabs.ftz.f(float %204) #5, !dbg !60
  %214 = tail call float @llvm.nvvm.fabs.f(float %204) #5, !dbg !60
  %.01.i149 = select i1 %.not.i148, float %214, float %213, !dbg !60
  %215 = fcmp ult float %.01.i149, 0x3FE3333340000000, !dbg !60
  br i1 %215, label %__internal_fmad.exit3.i155, label %__internal_fmad.exit1.i150, !dbg !60

__internal_fmad.exit1.i150:                       ; preds = %80
  %216 = fmul float %.01.i149, 0x4007154760000000, !dbg !60
  %217 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %216) #5, !dbg !60
  %218 = fadd float %217, 1.000000e+00, !dbg !60
  %219 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %218) #6, !dbg !60, !srcloc !61
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i151 = icmp eq i32 %220, 0, !dbg !60
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %219, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %219, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i152 = select i1 %.not6.i151, float %222, float %221, !dbg !60
  %223 = fcmp oge float %.01.i149, 0x4022059680000000, !dbg !60
  %s.0.i153 = select i1 %223, float 1.000000e+00, float %.03.i152, !dbg !60
  %224 = bitcast float %s.0.i153 to i32, !dbg !60
  %225 = bitcast float %204 to i32, !dbg !60
  %226 = and i32 %225, -2147483648, !dbg !60
  %227 = or i32 %226, %224, !dbg !60
  %228 = bitcast i32 %227 to float, !dbg !60
  br label %__nv_tanhf.exit166, !dbg !60

__internal_fmad.exit3.i155:                       ; preds = %80
  %229 = fmul float %204, %204, !dbg !60
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i156 = icmp eq i32 %230, 0, !dbg !60
  %231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %229, float 0xBFAAC795C0000000) #5, !dbg !60
  %232 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %229, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i157 = select i1 %.not1.i156, float %232, float %231, !dbg !60
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i158 = icmp eq i32 %233, 0, !dbg !60
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i157, float %229, float 0x3FC10B2820000000) #5, !dbg !60
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i157, float %229, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i159 = select i1 %.not2.i158, float %235, float %234, !dbg !60
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i160 = icmp eq i32 %236, 0, !dbg !60
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i159, float %229, float 0xBFD5553DA0000000) #5, !dbg !60
  %238 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i159, float %229, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i161 = select i1 %.not3.i160, float %238, float %237, !dbg !60
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i162 = icmp eq i32 %239, 0, !dbg !60
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i161, float %229, float 0.000000e+00) #5, !dbg !60
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i161, float %229, float 0.000000e+00) #5, !dbg !60
  %.04.i163 = select i1 %.not4.i162, float %241, float %240, !dbg !60
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i164 = icmp eq i32 %242, 0, !dbg !60
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i163, float %204, float %204) #5, !dbg !60
  %244 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i163, float %204, float %204) #5, !dbg !60
  %.02.i165 = select i1 %.not5.i164, float %244, float %243, !dbg !60
  br label %__nv_tanhf.exit166, !dbg !60

__nv_tanhf.exit166:                               ; preds = %__internal_fmad.exit1.i150, %__internal_fmad.exit3.i155
  %s.1.i154 = phi float [ %228, %__internal_fmad.exit1.i150 ], [ %.02.i165, %__internal_fmad.exit3.i155 ], !dbg !60
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i167 = icmp eq i32 %245, 0, !dbg !60
  %246 = tail call float @llvm.nvvm.fabs.ftz.f(float %205) #5, !dbg !60
  %247 = tail call float @llvm.nvvm.fabs.f(float %205) #5, !dbg !60
  %.01.i168 = select i1 %.not.i167, float %247, float %246, !dbg !60
  %248 = fcmp ult float %.01.i168, 0x3FE3333340000000, !dbg !60
  br i1 %248, label %__internal_fmad.exit3.i174, label %__internal_fmad.exit1.i169, !dbg !60

__internal_fmad.exit1.i169:                       ; preds = %__nv_tanhf.exit166
  %249 = fmul float %.01.i168, 0x4007154760000000, !dbg !60
  %250 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %249) #5, !dbg !60
  %251 = fadd float %250, 1.000000e+00, !dbg !60
  %252 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %251) #6, !dbg !60, !srcloc !61
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i170 = icmp eq i32 %253, 0, !dbg !60
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %252, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %255 = tail call float @llvm.nvvm.fma.rn.f(float %252, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i171 = select i1 %.not6.i170, float %255, float %254, !dbg !60
  %256 = fcmp oge float %.01.i168, 0x4022059680000000, !dbg !60
  %s.0.i172 = select i1 %256, float 1.000000e+00, float %.03.i171, !dbg !60
  %257 = bitcast float %s.0.i172 to i32, !dbg !60
  %258 = bitcast float %205 to i32, !dbg !60
  %259 = and i32 %258, -2147483648, !dbg !60
  %260 = or i32 %259, %257, !dbg !60
  %261 = bitcast i32 %260 to float, !dbg !60
  br label %__nv_tanhf.exit185, !dbg !60

__internal_fmad.exit3.i174:                       ; preds = %__nv_tanhf.exit166
  %262 = fmul float %205, %205, !dbg !60
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i175 = icmp eq i32 %263, 0, !dbg !60
  %264 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %262, float 0xBFAAC795C0000000) #5, !dbg !60
  %265 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %262, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i176 = select i1 %.not1.i175, float %265, float %264, !dbg !60
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i177 = icmp eq i32 %266, 0, !dbg !60
  %267 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i176, float %262, float 0x3FC10B2820000000) #5, !dbg !60
  %268 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i176, float %262, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i178 = select i1 %.not2.i177, float %268, float %267, !dbg !60
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i179 = icmp eq i32 %269, 0, !dbg !60
  %270 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i178, float %262, float 0xBFD5553DA0000000) #5, !dbg !60
  %271 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i178, float %262, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i180 = select i1 %.not3.i179, float %271, float %270, !dbg !60
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i181 = icmp eq i32 %272, 0, !dbg !60
  %273 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i180, float %262, float 0.000000e+00) #5, !dbg !60
  %274 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i180, float %262, float 0.000000e+00) #5, !dbg !60
  %.04.i182 = select i1 %.not4.i181, float %274, float %273, !dbg !60
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i183 = icmp eq i32 %275, 0, !dbg !60
  %276 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i182, float %205, float %205) #5, !dbg !60
  %277 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i182, float %205, float %205) #5, !dbg !60
  %.02.i184 = select i1 %.not5.i183, float %277, float %276, !dbg !60
  br label %__nv_tanhf.exit185, !dbg !60

__nv_tanhf.exit185:                               ; preds = %__internal_fmad.exit1.i169, %__internal_fmad.exit3.i174
  %s.1.i173 = phi float [ %261, %__internal_fmad.exit1.i169 ], [ %.02.i184, %__internal_fmad.exit3.i174 ], !dbg !60
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i186 = icmp eq i32 %278, 0, !dbg !60
  %279 = tail call float @llvm.nvvm.fabs.ftz.f(float %206) #5, !dbg !60
  %280 = tail call float @llvm.nvvm.fabs.f(float %206) #5, !dbg !60
  %.01.i187 = select i1 %.not.i186, float %280, float %279, !dbg !60
  %281 = fcmp ult float %.01.i187, 0x3FE3333340000000, !dbg !60
  br i1 %281, label %__internal_fmad.exit3.i193, label %__internal_fmad.exit1.i188, !dbg !60

__internal_fmad.exit1.i188:                       ; preds = %__nv_tanhf.exit185
  %282 = fmul float %.01.i187, 0x4007154760000000, !dbg !60
  %283 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %282) #5, !dbg !60
  %284 = fadd float %283, 1.000000e+00, !dbg !60
  %285 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %284) #6, !dbg !60, !srcloc !61
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i189 = icmp eq i32 %286, 0, !dbg !60
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %285, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %288 = tail call float @llvm.nvvm.fma.rn.f(float %285, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i190 = select i1 %.not6.i189, float %288, float %287, !dbg !60
  %289 = fcmp oge float %.01.i187, 0x4022059680000000, !dbg !60
  %s.0.i191 = select i1 %289, float 1.000000e+00, float %.03.i190, !dbg !60
  %290 = bitcast float %s.0.i191 to i32, !dbg !60
  %291 = bitcast float %206 to i32, !dbg !60
  %292 = and i32 %291, -2147483648, !dbg !60
  %293 = or i32 %292, %290, !dbg !60
  %294 = bitcast i32 %293 to float, !dbg !60
  br label %__nv_tanhf.exit204, !dbg !60

__internal_fmad.exit3.i193:                       ; preds = %__nv_tanhf.exit185
  %295 = fmul float %206, %206, !dbg !60
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i194 = icmp eq i32 %296, 0, !dbg !60
  %297 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %295, float 0xBFAAC795C0000000) #5, !dbg !60
  %298 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %295, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i195 = select i1 %.not1.i194, float %298, float %297, !dbg !60
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i196 = icmp eq i32 %299, 0, !dbg !60
  %300 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i195, float %295, float 0x3FC10B2820000000) #5, !dbg !60
  %301 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i195, float %295, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i197 = select i1 %.not2.i196, float %301, float %300, !dbg !60
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i198 = icmp eq i32 %302, 0, !dbg !60
  %303 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i197, float %295, float 0xBFD5553DA0000000) #5, !dbg !60
  %304 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i197, float %295, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i199 = select i1 %.not3.i198, float %304, float %303, !dbg !60
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i200 = icmp eq i32 %305, 0, !dbg !60
  %306 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i199, float %295, float 0.000000e+00) #5, !dbg !60
  %307 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i199, float %295, float 0.000000e+00) #5, !dbg !60
  %.04.i201 = select i1 %.not4.i200, float %307, float %306, !dbg !60
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i202 = icmp eq i32 %308, 0, !dbg !60
  %309 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i201, float %206, float %206) #5, !dbg !60
  %310 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i201, float %206, float %206) #5, !dbg !60
  %.02.i203 = select i1 %.not5.i202, float %310, float %309, !dbg !60
  br label %__nv_tanhf.exit204, !dbg !60

__nv_tanhf.exit204:                               ; preds = %__internal_fmad.exit1.i188, %__internal_fmad.exit3.i193
  %s.1.i192 = phi float [ %294, %__internal_fmad.exit1.i188 ], [ %.02.i203, %__internal_fmad.exit3.i193 ], !dbg !60
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i205 = icmp eq i32 %311, 0, !dbg !60
  %312 = tail call float @llvm.nvvm.fabs.ftz.f(float %207) #5, !dbg !60
  %313 = tail call float @llvm.nvvm.fabs.f(float %207) #5, !dbg !60
  %.01.i206 = select i1 %.not.i205, float %313, float %312, !dbg !60
  %314 = fcmp ult float %.01.i206, 0x3FE3333340000000, !dbg !60
  br i1 %314, label %__internal_fmad.exit3.i212, label %__internal_fmad.exit1.i207, !dbg !60

__internal_fmad.exit1.i207:                       ; preds = %__nv_tanhf.exit204
  %315 = fmul float %.01.i206, 0x4007154760000000, !dbg !60
  %316 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %315) #5, !dbg !60
  %317 = fadd float %316, 1.000000e+00, !dbg !60
  %318 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %317) #6, !dbg !60, !srcloc !61
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i208 = icmp eq i32 %319, 0, !dbg !60
  %320 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %318, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %321 = tail call float @llvm.nvvm.fma.rn.f(float %318, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i209 = select i1 %.not6.i208, float %321, float %320, !dbg !60
  %322 = fcmp oge float %.01.i206, 0x4022059680000000, !dbg !60
  %s.0.i210 = select i1 %322, float 1.000000e+00, float %.03.i209, !dbg !60
  %323 = bitcast float %s.0.i210 to i32, !dbg !60
  %324 = bitcast float %207 to i32, !dbg !60
  %325 = and i32 %324, -2147483648, !dbg !60
  %326 = or i32 %325, %323, !dbg !60
  %327 = bitcast i32 %326 to float, !dbg !60
  br label %__nv_tanhf.exit223, !dbg !60

__internal_fmad.exit3.i212:                       ; preds = %__nv_tanhf.exit204
  %328 = fmul float %207, %207, !dbg !60
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i213 = icmp eq i32 %329, 0, !dbg !60
  %330 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %328, float 0xBFAAC795C0000000) #5, !dbg !60
  %331 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %328, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i214 = select i1 %.not1.i213, float %331, float %330, !dbg !60
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i215 = icmp eq i32 %332, 0, !dbg !60
  %333 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i214, float %328, float 0x3FC10B2820000000) #5, !dbg !60
  %334 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i214, float %328, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i216 = select i1 %.not2.i215, float %334, float %333, !dbg !60
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i217 = icmp eq i32 %335, 0, !dbg !60
  %336 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i216, float %328, float 0xBFD5553DA0000000) #5, !dbg !60
  %337 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i216, float %328, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i218 = select i1 %.not3.i217, float %337, float %336, !dbg !60
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i219 = icmp eq i32 %338, 0, !dbg !60
  %339 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i218, float %328, float 0.000000e+00) #5, !dbg !60
  %340 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i218, float %328, float 0.000000e+00) #5, !dbg !60
  %.04.i220 = select i1 %.not4.i219, float %340, float %339, !dbg !60
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i221 = icmp eq i32 %341, 0, !dbg !60
  %342 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i220, float %207, float %207) #5, !dbg !60
  %343 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i220, float %207, float %207) #5, !dbg !60
  %.02.i222 = select i1 %.not5.i221, float %343, float %342, !dbg !60
  br label %__nv_tanhf.exit223, !dbg !60

__nv_tanhf.exit223:                               ; preds = %__internal_fmad.exit1.i207, %__internal_fmad.exit3.i212
  %s.1.i211 = phi float [ %327, %__internal_fmad.exit1.i207 ], [ %.02.i222, %__internal_fmad.exit3.i212 ], !dbg !60
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i224 = icmp eq i32 %344, 0, !dbg !60
  %345 = tail call float @llvm.nvvm.fabs.ftz.f(float %208) #5, !dbg !60
  %346 = tail call float @llvm.nvvm.fabs.f(float %208) #5, !dbg !60
  %.01.i225 = select i1 %.not.i224, float %346, float %345, !dbg !60
  %347 = fcmp ult float %.01.i225, 0x3FE3333340000000, !dbg !60
  br i1 %347, label %__internal_fmad.exit3.i231, label %__internal_fmad.exit1.i226, !dbg !60

__internal_fmad.exit1.i226:                       ; preds = %__nv_tanhf.exit223
  %348 = fmul float %.01.i225, 0x4007154760000000, !dbg !60
  %349 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %348) #5, !dbg !60
  %350 = fadd float %349, 1.000000e+00, !dbg !60
  %351 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %350) #6, !dbg !60, !srcloc !61
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i227 = icmp eq i32 %352, 0, !dbg !60
  %353 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %351, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %354 = tail call float @llvm.nvvm.fma.rn.f(float %351, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i228 = select i1 %.not6.i227, float %354, float %353, !dbg !60
  %355 = fcmp oge float %.01.i225, 0x4022059680000000, !dbg !60
  %s.0.i229 = select i1 %355, float 1.000000e+00, float %.03.i228, !dbg !60
  %356 = bitcast float %s.0.i229 to i32, !dbg !60
  %357 = bitcast float %208 to i32, !dbg !60
  %358 = and i32 %357, -2147483648, !dbg !60
  %359 = or i32 %358, %356, !dbg !60
  %360 = bitcast i32 %359 to float, !dbg !60
  br label %__nv_tanhf.exit242, !dbg !60

__internal_fmad.exit3.i231:                       ; preds = %__nv_tanhf.exit223
  %361 = fmul float %208, %208, !dbg !60
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i232 = icmp eq i32 %362, 0, !dbg !60
  %363 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %361, float 0xBFAAC795C0000000) #5, !dbg !60
  %364 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %361, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i233 = select i1 %.not1.i232, float %364, float %363, !dbg !60
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i234 = icmp eq i32 %365, 0, !dbg !60
  %366 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i233, float %361, float 0x3FC10B2820000000) #5, !dbg !60
  %367 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i233, float %361, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i235 = select i1 %.not2.i234, float %367, float %366, !dbg !60
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i236 = icmp eq i32 %368, 0, !dbg !60
  %369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i235, float %361, float 0xBFD5553DA0000000) #5, !dbg !60
  %370 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i235, float %361, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i237 = select i1 %.not3.i236, float %370, float %369, !dbg !60
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i238 = icmp eq i32 %371, 0, !dbg !60
  %372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i237, float %361, float 0.000000e+00) #5, !dbg !60
  %373 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i237, float %361, float 0.000000e+00) #5, !dbg !60
  %.04.i239 = select i1 %.not4.i238, float %373, float %372, !dbg !60
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i240 = icmp eq i32 %374, 0, !dbg !60
  %375 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i239, float %208, float %208) #5, !dbg !60
  %376 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i239, float %208, float %208) #5, !dbg !60
  %.02.i241 = select i1 %.not5.i240, float %376, float %375, !dbg !60
  br label %__nv_tanhf.exit242, !dbg !60

__nv_tanhf.exit242:                               ; preds = %__internal_fmad.exit1.i226, %__internal_fmad.exit3.i231
  %s.1.i230 = phi float [ %360, %__internal_fmad.exit1.i226 ], [ %.02.i241, %__internal_fmad.exit3.i231 ], !dbg !60
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i243 = icmp eq i32 %377, 0, !dbg !60
  %378 = tail call float @llvm.nvvm.fabs.ftz.f(float %209) #5, !dbg !60
  %379 = tail call float @llvm.nvvm.fabs.f(float %209) #5, !dbg !60
  %.01.i244 = select i1 %.not.i243, float %379, float %378, !dbg !60
  %380 = fcmp ult float %.01.i244, 0x3FE3333340000000, !dbg !60
  br i1 %380, label %__internal_fmad.exit3.i250, label %__internal_fmad.exit1.i245, !dbg !60

__internal_fmad.exit1.i245:                       ; preds = %__nv_tanhf.exit242
  %381 = fmul float %.01.i244, 0x4007154760000000, !dbg !60
  %382 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %381) #5, !dbg !60
  %383 = fadd float %382, 1.000000e+00, !dbg !60
  %384 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %383) #6, !dbg !60, !srcloc !61
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i246 = icmp eq i32 %385, 0, !dbg !60
  %386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %384, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %387 = tail call float @llvm.nvvm.fma.rn.f(float %384, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i247 = select i1 %.not6.i246, float %387, float %386, !dbg !60
  %388 = fcmp oge float %.01.i244, 0x4022059680000000, !dbg !60
  %s.0.i248 = select i1 %388, float 1.000000e+00, float %.03.i247, !dbg !60
  %389 = bitcast float %s.0.i248 to i32, !dbg !60
  %390 = bitcast float %209 to i32, !dbg !60
  %391 = and i32 %390, -2147483648, !dbg !60
  %392 = or i32 %391, %389, !dbg !60
  %393 = bitcast i32 %392 to float, !dbg !60
  br label %__nv_tanhf.exit261, !dbg !60

__internal_fmad.exit3.i250:                       ; preds = %__nv_tanhf.exit242
  %394 = fmul float %209, %209, !dbg !60
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i251 = icmp eq i32 %395, 0, !dbg !60
  %396 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %394, float 0xBFAAC795C0000000) #5, !dbg !60
  %397 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %394, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i252 = select i1 %.not1.i251, float %397, float %396, !dbg !60
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i253 = icmp eq i32 %398, 0, !dbg !60
  %399 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i252, float %394, float 0x3FC10B2820000000) #5, !dbg !60
  %400 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i252, float %394, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i254 = select i1 %.not2.i253, float %400, float %399, !dbg !60
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i255 = icmp eq i32 %401, 0, !dbg !60
  %402 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i254, float %394, float 0xBFD5553DA0000000) #5, !dbg !60
  %403 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i254, float %394, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i256 = select i1 %.not3.i255, float %403, float %402, !dbg !60
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i257 = icmp eq i32 %404, 0, !dbg !60
  %405 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i256, float %394, float 0.000000e+00) #5, !dbg !60
  %406 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i256, float %394, float 0.000000e+00) #5, !dbg !60
  %.04.i258 = select i1 %.not4.i257, float %406, float %405, !dbg !60
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i259 = icmp eq i32 %407, 0, !dbg !60
  %408 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i258, float %209, float %209) #5, !dbg !60
  %409 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i258, float %209, float %209) #5, !dbg !60
  %.02.i260 = select i1 %.not5.i259, float %409, float %408, !dbg !60
  br label %__nv_tanhf.exit261, !dbg !60

__nv_tanhf.exit261:                               ; preds = %__internal_fmad.exit1.i245, %__internal_fmad.exit3.i250
  %s.1.i249 = phi float [ %393, %__internal_fmad.exit1.i245 ], [ %.02.i260, %__internal_fmad.exit3.i250 ], !dbg !60
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i262 = icmp eq i32 %410, 0, !dbg !60
  %411 = tail call float @llvm.nvvm.fabs.ftz.f(float %210) #5, !dbg !60
  %412 = tail call float @llvm.nvvm.fabs.f(float %210) #5, !dbg !60
  %.01.i263 = select i1 %.not.i262, float %412, float %411, !dbg !60
  %413 = fcmp ult float %.01.i263, 0x3FE3333340000000, !dbg !60
  br i1 %413, label %__internal_fmad.exit3.i269, label %__internal_fmad.exit1.i264, !dbg !60

__internal_fmad.exit1.i264:                       ; preds = %__nv_tanhf.exit261
  %414 = fmul float %.01.i263, 0x4007154760000000, !dbg !60
  %415 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %414) #5, !dbg !60
  %416 = fadd float %415, 1.000000e+00, !dbg !60
  %417 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %416) #6, !dbg !60, !srcloc !61
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i265 = icmp eq i32 %418, 0, !dbg !60
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %417, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %417, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i266 = select i1 %.not6.i265, float %420, float %419, !dbg !60
  %421 = fcmp oge float %.01.i263, 0x4022059680000000, !dbg !60
  %s.0.i267 = select i1 %421, float 1.000000e+00, float %.03.i266, !dbg !60
  %422 = bitcast float %s.0.i267 to i32, !dbg !60
  %423 = bitcast float %210 to i32, !dbg !60
  %424 = and i32 %423, -2147483648, !dbg !60
  %425 = or i32 %424, %422, !dbg !60
  %426 = bitcast i32 %425 to float, !dbg !60
  br label %__nv_tanhf.exit280, !dbg !60

__internal_fmad.exit3.i269:                       ; preds = %__nv_tanhf.exit261
  %427 = fmul float %210, %210, !dbg !60
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i270 = icmp eq i32 %428, 0, !dbg !60
  %429 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %427, float 0xBFAAC795C0000000) #5, !dbg !60
  %430 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %427, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i271 = select i1 %.not1.i270, float %430, float %429, !dbg !60
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i272 = icmp eq i32 %431, 0, !dbg !60
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i271, float %427, float 0x3FC10B2820000000) #5, !dbg !60
  %433 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i271, float %427, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i273 = select i1 %.not2.i272, float %433, float %432, !dbg !60
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i274 = icmp eq i32 %434, 0, !dbg !60
  %435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i273, float %427, float 0xBFD5553DA0000000) #5, !dbg !60
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i273, float %427, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i275 = select i1 %.not3.i274, float %436, float %435, !dbg !60
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i276 = icmp eq i32 %437, 0, !dbg !60
  %438 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i275, float %427, float 0.000000e+00) #5, !dbg !60
  %439 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i275, float %427, float 0.000000e+00) #5, !dbg !60
  %.04.i277 = select i1 %.not4.i276, float %439, float %438, !dbg !60
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i278 = icmp eq i32 %440, 0, !dbg !60
  %441 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i277, float %210, float %210) #5, !dbg !60
  %442 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i277, float %210, float %210) #5, !dbg !60
  %.02.i279 = select i1 %.not5.i278, float %442, float %441, !dbg !60
  br label %__nv_tanhf.exit280, !dbg !60

__nv_tanhf.exit280:                               ; preds = %__internal_fmad.exit1.i264, %__internal_fmad.exit3.i269
  %s.1.i268 = phi float [ %426, %__internal_fmad.exit1.i264 ], [ %.02.i279, %__internal_fmad.exit3.i269 ], !dbg !60
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i281 = icmp eq i32 %443, 0, !dbg !60
  %444 = tail call float @llvm.nvvm.fabs.ftz.f(float %211) #5, !dbg !60
  %445 = tail call float @llvm.nvvm.fabs.f(float %211) #5, !dbg !60
  %.01.i282 = select i1 %.not.i281, float %445, float %444, !dbg !60
  %446 = fcmp ult float %.01.i282, 0x3FE3333340000000, !dbg !60
  br i1 %446, label %__internal_fmad.exit3.i288, label %__internal_fmad.exit1.i283, !dbg !60

__internal_fmad.exit1.i283:                       ; preds = %__nv_tanhf.exit280
  %447 = fmul float %.01.i282, 0x4007154760000000, !dbg !60
  %448 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %447) #5, !dbg !60
  %449 = fadd float %448, 1.000000e+00, !dbg !60
  %450 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %449) #6, !dbg !60, !srcloc !61
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i284 = icmp eq i32 %451, 0, !dbg !60
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %450, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %453 = tail call float @llvm.nvvm.fma.rn.f(float %450, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i285 = select i1 %.not6.i284, float %453, float %452, !dbg !60
  %454 = fcmp oge float %.01.i282, 0x4022059680000000, !dbg !60
  %s.0.i286 = select i1 %454, float 1.000000e+00, float %.03.i285, !dbg !60
  %455 = bitcast float %s.0.i286 to i32, !dbg !60
  %456 = bitcast float %211 to i32, !dbg !60
  %457 = and i32 %456, -2147483648, !dbg !60
  %458 = or i32 %457, %455, !dbg !60
  %459 = bitcast i32 %458 to float, !dbg !60
  br label %__nv_tanhf.exit299, !dbg !60

__internal_fmad.exit3.i288:                       ; preds = %__nv_tanhf.exit280
  %460 = fmul float %211, %211, !dbg !60
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i289 = icmp eq i32 %461, 0, !dbg !60
  %462 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %460, float 0xBFAAC795C0000000) #5, !dbg !60
  %463 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %460, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i290 = select i1 %.not1.i289, float %463, float %462, !dbg !60
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i291 = icmp eq i32 %464, 0, !dbg !60
  %465 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i290, float %460, float 0x3FC10B2820000000) #5, !dbg !60
  %466 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i290, float %460, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i292 = select i1 %.not2.i291, float %466, float %465, !dbg !60
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i293 = icmp eq i32 %467, 0, !dbg !60
  %468 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i292, float %460, float 0xBFD5553DA0000000) #5, !dbg !60
  %469 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i292, float %460, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i294 = select i1 %.not3.i293, float %469, float %468, !dbg !60
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i295 = icmp eq i32 %470, 0, !dbg !60
  %471 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i294, float %460, float 0.000000e+00) #5, !dbg !60
  %472 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i294, float %460, float 0.000000e+00) #5, !dbg !60
  %.04.i296 = select i1 %.not4.i295, float %472, float %471, !dbg !60
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i297 = icmp eq i32 %473, 0, !dbg !60
  %474 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i296, float %211, float %211) #5, !dbg !60
  %475 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i296, float %211, float %211) #5, !dbg !60
  %.02.i298 = select i1 %.not5.i297, float %475, float %474, !dbg !60
  br label %__nv_tanhf.exit299, !dbg !60

__nv_tanhf.exit299:                               ; preds = %__internal_fmad.exit1.i283, %__internal_fmad.exit3.i288
  %s.1.i287 = phi float [ %459, %__internal_fmad.exit1.i283 ], [ %.02.i298, %__internal_fmad.exit3.i288 ], !dbg !60
  %476 = insertelement <4 x float> poison, float %s.1.i230, i64 0, !dbg !62
  %477 = insertelement <4 x float> %476, float %s.1.i154, i64 1, !dbg !62
  %478 = insertelement <4 x float> %477, float %s.1.i249, i64 2, !dbg !62
  %479 = insertelement <4 x float> %478, float %s.1.i173, i64 3, !dbg !62
  %480 = fadd <4 x float> %479, splat (float 1.000000e+00), !dbg !62
  %481 = insertelement <4 x float> poison, float %s.1.i287, i64 0, !dbg !62
  %482 = insertelement <4 x float> %481, float %s.1.i268, i64 1, !dbg !62
  %483 = insertelement <4 x float> %482, float %s.1.i211, i64 2, !dbg !62
  %484 = insertelement <4 x float> %483, float %s.1.i192, i64 3, !dbg !62
  %485 = fadd <4 x float> %484, splat (float 1.000000e+00), !dbg !62
  %486 = fcmp uno <4 x float> %82, zeroinitializer, !dbg !63
  %487 = fcmp uno <4 x float> %81, zeroinitializer, !dbg !63
  %488 = fcmp uno <4 x float> %83, zeroinitializer, !dbg !65
  %489 = fmul <4 x float> %163, %485, !dbg !67
  %490 = fcmp olt <4 x float> %83, %489, !dbg !68
  %491 = or <4 x i1> %488, %490, !dbg !69
  %492 = select <4 x i1> %491, <4 x float> %83, <4 x float> %489, !dbg !70
  %493 = select <4 x i1> %79, <4 x float> %492, <4 x float> %83, !dbg !71
  %494 = fcmp uno <4 x float> %84, zeroinitializer, !dbg !63
  %495 = fmul <4 x float> %162, %480, !dbg !67
  %496 = shufflevector <4 x float> %495, <4 x float> poison, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !72
  %497 = fcmp ogt <4 x float> %82, %496, !dbg !72
  %498 = fcmp olt <4 x float> %82, %496, !dbg !72
  %499 = shufflevector <4 x i1> %497, <4 x i1> %498, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !72
  %500 = or <4 x i1> %486, %499, !dbg !73
  %501 = select <4 x i1> %500, <4 x float> %82, <4 x float> %496, !dbg !74
  %502 = fcmp ogt <4 x float> %81, %495, !dbg !72
  %503 = fcmp olt <4 x float> %81, %495, !dbg !72
  %504 = shufflevector <4 x i1> %502, <4 x i1> %503, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !72
  %505 = or <4 x i1> %487, %504, !dbg !73
  %506 = select <4 x i1> %505, <4 x float> %81, <4 x float> %495, !dbg !74
  %507 = fcmp ogt <4 x float> %84, %489, !dbg !72
  %508 = or <4 x i1> %494, %507, !dbg !73
  %509 = select <4 x i1> %508, <4 x float> %84, <4 x float> %489, !dbg !74
  %510 = select <4 x i1> %79, <4 x float> %506, <4 x float> %81, !dbg !39
  %511 = select <4 x i1> %79, <4 x float> %501, <4 x float> %82, !dbg !39
  %512 = select <4 x i1> %79, <4 x float> %509, <4 x float> %84, !dbg !39
  %513 = sext i32 %90 to i64, !dbg !75
  %514 = getelementptr float, ptr addrspace(1) %5, i64 %513, !dbg !75
  %515 = sext i32 %91 to i64, !dbg !75
  %516 = getelementptr float, ptr addrspace(1) %5, i64 %515, !dbg !75
  %517 = bitcast float %164 to i32, !dbg !76
  %518 = bitcast float %166 to i32, !dbg !76
  %519 = bitcast float %168 to i32, !dbg !76
  %520 = bitcast float %170 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %517, i32 %518, i32 %519, i32 %520, ptr addrspace(1) %514, i1 %20) #5, !dbg !76
  %521 = bitcast float %172 to i32, !dbg !76
  %522 = bitcast float %174 to i32, !dbg !76
  %523 = bitcast float %176 to i32, !dbg !76
  %524 = bitcast float %178 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %522, i32 %523, i32 %524, ptr addrspace(1) %516, i1 %20) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !38
  %525 = icmp samesign ult i64 %indvars.iv, 10240, !dbg !38
  br i1 %525, label %80, label %526, !dbg !38

526:                                              ; preds = %__nv_tanhf.exit299
  %527 = lshr i32 %15, 5, !dbg !11
  %528 = and i32 %15, 1, !dbg !11
  %529 = or disjoint i32 %14, %528, !dbg !12
  %530 = icmp slt i32 %529, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %531 = fcmp ogt <4 x float> %510, %511, !dbg !79
  %532 = extractelement <4 x float> %511, i64 3, !dbg !82
  %533 = fcmp uno float %532, 0.000000e+00, !dbg !82
  %534 = extractelement <4 x i1> %531, i64 3, !dbg !83
  %535 = or i1 %534, %533, !dbg !83
  %536 = extractelement <4 x float> %510, i64 3, !dbg !84
  %537 = select i1 %535, float %532, float %536, !dbg !84
  %538 = extractelement <4 x float> %493, i64 3, !dbg !85
  %539 = fcmp olt float %537, %538, !dbg !85
  %540 = fcmp uno float %537, 0.000000e+00, !dbg !82
  %541 = or i1 %539, %540, !dbg !83
  %542 = select i1 %541, float %537, float %538, !dbg !84
  %543 = extractelement <4 x float> %493, i64 2, !dbg !85
  %544 = fcmp olt float %542, %543, !dbg !85
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !82
  %546 = or i1 %544, %545, !dbg !83
  %547 = select i1 %546, float %542, float %543, !dbg !84
  %548 = extractelement <4 x float> %511, i64 2, !dbg !82
  %549 = fcmp uno float %548, 0.000000e+00, !dbg !82
  %550 = extractelement <4 x i1> %531, i64 2, !dbg !83
  %551 = or i1 %550, %549, !dbg !83
  %552 = extractelement <4 x float> %510, i64 2, !dbg !84
  %553 = select i1 %551, float %548, float %552, !dbg !84
  %554 = extractelement <4 x float> %493, i64 1, !dbg !85
  %555 = fcmp olt float %553, %554, !dbg !85
  %556 = fcmp uno float %553, 0.000000e+00, !dbg !82
  %557 = or i1 %555, %556, !dbg !83
  %558 = select i1 %557, float %553, float %554, !dbg !84
  %559 = extractelement <4 x float> %493, i64 0, !dbg !85
  %560 = fcmp olt float %558, %559, !dbg !85
  %561 = fcmp uno float %558, 0.000000e+00, !dbg !82
  %562 = or i1 %560, %561, !dbg !83
  %563 = select i1 %562, float %558, float %559, !dbg !84
  %564 = bitcast float %547 to i32, !dbg !77
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 16, i32 31), !dbg !77
  %566 = bitcast i32 %565 to float, !dbg !77
  %567 = fcmp olt float %547, %566, !dbg !85
  %568 = fcmp uno float %547, 0.000000e+00, !dbg !82
  %569 = or i1 %568, %567, !dbg !83
  %570 = select i1 %569, float %547, float %566, !dbg !84
  %571 = bitcast float %570 to i32, !dbg !77
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 8, i32 31), !dbg !77
  %573 = bitcast i32 %572 to float, !dbg !77
  %574 = fcmp olt float %570, %573, !dbg !85
  %575 = fcmp uno float %570, 0.000000e+00, !dbg !82
  %576 = or i1 %574, %575, !dbg !83
  %577 = select i1 %576, float %570, float %573, !dbg !84
  %578 = bitcast float %577 to i32, !dbg !77
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 4, i32 31), !dbg !77
  %580 = bitcast i32 %579 to float, !dbg !77
  %581 = fcmp olt float %577, %580, !dbg !85
  %582 = fcmp uno float %577, 0.000000e+00, !dbg !82
  %583 = or i1 %581, %582, !dbg !83
  %584 = select i1 %583, float %577, float %580, !dbg !84
  %585 = bitcast float %584 to i32, !dbg !77
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !77
  %587 = bitcast i32 %586 to float, !dbg !77
  %588 = fcmp olt float %584, %587, !dbg !85
  %589 = fcmp uno float %584, 0.000000e+00, !dbg !82
  %590 = or i1 %588, %589, !dbg !83
  %591 = select i1 %590, float %584, float %587, !dbg !84
  %592 = bitcast float %591 to i32, !dbg !77
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 1, i32 31), !dbg !77
  %594 = bitcast i32 %593 to float, !dbg !77
  %595 = fcmp olt float %591, %594, !dbg !85
  %596 = fcmp uno float %591, 0.000000e+00, !dbg !82
  %597 = or i1 %595, %596, !dbg !83
  %598 = bitcast float %563 to i32, !dbg !77
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 16, i32 31), !dbg !77
  %600 = bitcast i32 %599 to float, !dbg !77
  %601 = fcmp olt float %563, %600, !dbg !85
  %602 = fcmp uno float %563, 0.000000e+00, !dbg !82
  %603 = or i1 %602, %601, !dbg !83
  %604 = select i1 %603, float %563, float %600, !dbg !84
  %605 = bitcast float %604 to i32, !dbg !77
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 8, i32 31), !dbg !77
  %607 = bitcast i32 %606 to float, !dbg !77
  %608 = fcmp olt float %604, %607, !dbg !85
  %609 = fcmp uno float %604, 0.000000e+00, !dbg !82
  %610 = or i1 %608, %609, !dbg !83
  %611 = select i1 %610, float %604, float %607, !dbg !84
  %612 = bitcast float %611 to i32, !dbg !77
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 4, i32 31), !dbg !77
  %614 = bitcast i32 %613 to float, !dbg !77
  %615 = fcmp olt float %611, %614, !dbg !85
  %616 = fcmp uno float %611, 0.000000e+00, !dbg !82
  %617 = or i1 %615, %616, !dbg !83
  %618 = select i1 %617, float %611, float %614, !dbg !84
  %619 = bitcast float %618 to i32, !dbg !77
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 2, i32 31), !dbg !77
  %621 = bitcast i32 %620 to float, !dbg !77
  %622 = fcmp olt float %618, %621, !dbg !85
  %623 = fcmp uno float %618, 0.000000e+00, !dbg !82
  %624 = or i1 %622, %623, !dbg !83
  %625 = select i1 %624, float %618, float %621, !dbg !84
  %626 = bitcast float %625 to i32, !dbg !77
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 1, i32 31), !dbg !77
  %628 = bitcast i32 %627 to float, !dbg !77
  %629 = fcmp olt float %625, %628, !dbg !85
  %630 = fcmp uno float %625, 0.000000e+00, !dbg !82
  %631 = or i1 %629, %630, !dbg !83
  %632 = and i32 %527, 15, !dbg !77
  %633 = icmp eq i32 %17, 0, !dbg !77
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %632, !dbg !77
  %635 = select i1 %597, i32 %592, i32 %593, !dbg !84
  %636 = insertelement <1 x i32> poison, i32 %635, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %634, <1 x i32> %636, i1 %633) #5, !dbg !77
  %637 = or disjoint i32 %632, 16, !dbg !77
  %638 = getelementptr float, ptr addrspace(3) @global_smem, i32 %637, !dbg !77
  %639 = select i1 %631, i32 %626, i32 %627, !dbg !84
  %640 = insertelement <1 x i32> poison, i32 %639, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %640, i1 %633) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %641 = icmp slt i32 %15, 32, !dbg !77
  %642 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !77
  %643 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %642, i1 %641) #5, !dbg !77
  %644 = bitcast i32 %643 to float, !dbg !77
  %645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 8, i32 31), !dbg !77
  %646 = bitcast i32 %645 to float, !dbg !77
  %647 = fcmp olt float %644, %646, !dbg !85
  %648 = fcmp uno float %644, 0.000000e+00, !dbg !82
  %649 = or i1 %648, %647, !dbg !83
  %650 = select i1 %649, float %644, float %646, !dbg !84
  %651 = bitcast float %650 to i32, !dbg !77
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 4, i32 31), !dbg !77
  %653 = bitcast i32 %652 to float, !dbg !77
  %654 = fcmp olt float %650, %653, !dbg !85
  %655 = fcmp uno float %650, 0.000000e+00, !dbg !82
  %656 = or i1 %654, %655, !dbg !83
  %657 = select i1 %656, float %650, float %653, !dbg !84
  %658 = bitcast float %657 to i32, !dbg !77
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 2, i32 31), !dbg !77
  %660 = bitcast i32 %659 to float, !dbg !77
  %661 = fcmp olt float %657, %660, !dbg !85
  %662 = fcmp uno float %657, 0.000000e+00, !dbg !82
  %663 = or i1 %661, %662, !dbg !83
  %664 = select i1 %663, float %657, float %660, !dbg !84
  %665 = bitcast float %664 to i32, !dbg !77
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 1, i32 31), !dbg !77
  %667 = bitcast i32 %666 to float, !dbg !77
  %668 = fcmp olt float %664, %667, !dbg !85
  %669 = fcmp uno float %664, 0.000000e+00, !dbg !82
  %670 = or i1 %668, %669, !dbg !83
  %671 = and i32 %15, 15, !dbg !77
  %672 = icmp eq i32 %671, 0, !dbg !77
  %673 = and i1 %641, %672, !dbg !77
  %674 = select i1 %670, i32 %665, i32 %666, !dbg !84
  %675 = insertelement <1 x i32> poison, i32 %674, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %675, i1 %673) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %676 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !77
  %677 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %678 = bitcast float %676 to i32, !dbg !86
  %679 = bitcast float %677 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %678, i32 %679, i1 true) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %680 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %528, !dbg !86
  %681 = load float, ptr addrspace(3) %680, align 4, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %682 = extractelement <4 x float> %510, i64 1, !dbg !88
  %683 = fcmp uno float %682, 0.000000e+00, !dbg !88
  %684 = extractelement <4 x i1> %531, i64 1, !dbg !89
  %685 = or i1 %684, %683, !dbg !89
  %686 = extractelement <4 x float> %511, i64 1, !dbg !90
  %687 = select i1 %685, float %682, float %686, !dbg !90
  %688 = extractelement <4 x float> %512, i64 3, !dbg !79
  %689 = fcmp ogt float %687, %688, !dbg !79
  %690 = fcmp uno float %687, 0.000000e+00, !dbg !88
  %691 = or i1 %689, %690, !dbg !89
  %692 = select i1 %691, float %687, float %688, !dbg !90
  %693 = extractelement <4 x float> %512, i64 2, !dbg !79
  %694 = fcmp ogt float %692, %693, !dbg !79
  %695 = fcmp uno float %692, 0.000000e+00, !dbg !88
  %696 = or i1 %694, %695, !dbg !89
  %697 = select i1 %696, float %692, float %693, !dbg !90
  %698 = extractelement <4 x float> %510, i64 0, !dbg !88
  %699 = fcmp uno float %698, 0.000000e+00, !dbg !88
  %700 = extractelement <4 x i1> %531, i64 0, !dbg !89
  %701 = or i1 %700, %699, !dbg !89
  %702 = extractelement <4 x float> %511, i64 0, !dbg !90
  %703 = select i1 %701, float %698, float %702, !dbg !90
  %704 = extractelement <4 x float> %512, i64 1, !dbg !79
  %705 = fcmp ogt float %703, %704, !dbg !79
  %706 = fcmp uno float %703, 0.000000e+00, !dbg !88
  %707 = or i1 %705, %706, !dbg !89
  %708 = select i1 %707, float %703, float %704, !dbg !90
  %709 = extractelement <4 x float> %512, i64 0, !dbg !79
  %710 = fcmp ogt float %708, %709, !dbg !79
  %711 = fcmp uno float %708, 0.000000e+00, !dbg !88
  %712 = or i1 %710, %711, !dbg !89
  %713 = select i1 %712, float %708, float %709, !dbg !90
  %714 = bitcast float %697 to i32, !dbg !87
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 16, i32 31), !dbg !87
  %716 = bitcast i32 %715 to float, !dbg !87
  %717 = fcmp ogt float %697, %716, !dbg !79
  %718 = fcmp uno float %697, 0.000000e+00, !dbg !88
  %719 = or i1 %718, %717, !dbg !89
  %720 = select i1 %719, float %697, float %716, !dbg !90
  %721 = bitcast float %720 to i32, !dbg !87
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 8, i32 31), !dbg !87
  %723 = bitcast i32 %722 to float, !dbg !87
  %724 = fcmp ogt float %720, %723, !dbg !79
  %725 = fcmp uno float %720, 0.000000e+00, !dbg !88
  %726 = or i1 %724, %725, !dbg !89
  %727 = select i1 %726, float %720, float %723, !dbg !90
  %728 = bitcast float %727 to i32, !dbg !87
  %729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %728, i32 4, i32 31), !dbg !87
  %730 = bitcast i32 %729 to float, !dbg !87
  %731 = fcmp ogt float %727, %730, !dbg !79
  %732 = fcmp uno float %727, 0.000000e+00, !dbg !88
  %733 = or i1 %731, %732, !dbg !89
  %734 = select i1 %733, float %727, float %730, !dbg !90
  %735 = bitcast float %734 to i32, !dbg !87
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 2, i32 31), !dbg !87
  %737 = bitcast i32 %736 to float, !dbg !87
  %738 = fcmp ogt float %734, %737, !dbg !79
  %739 = fcmp uno float %734, 0.000000e+00, !dbg !88
  %740 = or i1 %738, %739, !dbg !89
  %741 = select i1 %740, float %734, float %737, !dbg !90
  %742 = bitcast float %741 to i32, !dbg !87
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 1, i32 31), !dbg !87
  %744 = bitcast i32 %743 to float, !dbg !87
  %745 = fcmp ogt float %741, %744, !dbg !79
  %746 = fcmp uno float %741, 0.000000e+00, !dbg !88
  %747 = or i1 %745, %746, !dbg !89
  %748 = bitcast float %713 to i32, !dbg !87
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 16, i32 31), !dbg !87
  %750 = bitcast i32 %749 to float, !dbg !87
  %751 = fcmp ogt float %713, %750, !dbg !79
  %752 = fcmp uno float %713, 0.000000e+00, !dbg !88
  %753 = or i1 %752, %751, !dbg !89
  %754 = select i1 %753, float %713, float %750, !dbg !90
  %755 = bitcast float %754 to i32, !dbg !87
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 8, i32 31), !dbg !87
  %757 = bitcast i32 %756 to float, !dbg !87
  %758 = fcmp ogt float %754, %757, !dbg !79
  %759 = fcmp uno float %754, 0.000000e+00, !dbg !88
  %760 = or i1 %758, %759, !dbg !89
  %761 = select i1 %760, float %754, float %757, !dbg !90
  %762 = bitcast float %761 to i32, !dbg !87
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 4, i32 31), !dbg !87
  %764 = bitcast i32 %763 to float, !dbg !87
  %765 = fcmp ogt float %761, %764, !dbg !79
  %766 = fcmp uno float %761, 0.000000e+00, !dbg !88
  %767 = or i1 %765, %766, !dbg !89
  %768 = select i1 %767, float %761, float %764, !dbg !90
  %769 = bitcast float %768 to i32, !dbg !87
  %770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 2, i32 31), !dbg !87
  %771 = bitcast i32 %770 to float, !dbg !87
  %772 = fcmp ogt float %768, %771, !dbg !79
  %773 = fcmp uno float %768, 0.000000e+00, !dbg !88
  %774 = or i1 %772, %773, !dbg !89
  %775 = select i1 %774, float %768, float %771, !dbg !90
  %776 = bitcast float %775 to i32, !dbg !87
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 1, i32 31), !dbg !87
  %778 = bitcast i32 %777 to float, !dbg !87
  %779 = fcmp ogt float %775, %778, !dbg !79
  %780 = fcmp uno float %775, 0.000000e+00, !dbg !88
  %781 = or i1 %779, %780, !dbg !89
  %782 = select i1 %747, i32 %742, i32 %743, !dbg !90
  %783 = insertelement <1 x i32> poison, i32 %782, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %634, <1 x i32> %783, i1 %633) #5, !dbg !87
  %784 = select i1 %781, i32 %776, i32 %777, !dbg !90
  %785 = insertelement <1 x i32> poison, i32 %784, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %785, i1 %633) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %786 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %642, i1 %641) #5, !dbg !87
  %787 = bitcast i32 %786 to float, !dbg !87
  %788 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 8, i32 31), !dbg !87
  %789 = bitcast i32 %788 to float, !dbg !87
  %790 = fcmp ogt float %787, %789, !dbg !79
  %791 = fcmp uno float %787, 0.000000e+00, !dbg !88
  %792 = or i1 %791, %790, !dbg !89
  %793 = select i1 %792, float %787, float %789, !dbg !90
  %794 = bitcast float %793 to i32, !dbg !87
  %795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 4, i32 31), !dbg !87
  %796 = bitcast i32 %795 to float, !dbg !87
  %797 = fcmp ogt float %793, %796, !dbg !79
  %798 = fcmp uno float %793, 0.000000e+00, !dbg !88
  %799 = or i1 %797, %798, !dbg !89
  %800 = select i1 %799, float %793, float %796, !dbg !90
  %801 = bitcast float %800 to i32, !dbg !87
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 2, i32 31), !dbg !87
  %803 = bitcast i32 %802 to float, !dbg !87
  %804 = fcmp ogt float %800, %803, !dbg !79
  %805 = fcmp uno float %800, 0.000000e+00, !dbg !88
  %806 = or i1 %804, %805, !dbg !89
  %807 = select i1 %806, float %800, float %803, !dbg !90
  %808 = bitcast float %807 to i32, !dbg !87
  %809 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %808, i32 1, i32 31), !dbg !87
  %810 = bitcast i32 %809 to float, !dbg !87
  %811 = fcmp ogt float %807, %810, !dbg !79
  %812 = fcmp uno float %807, 0.000000e+00, !dbg !88
  %813 = or i1 %811, %812, !dbg !89
  %814 = select i1 %813, i32 %808, i32 %809, !dbg !90
  %815 = insertelement <1 x i32> poison, i32 %814, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %815, i1 %673) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %816 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !87
  %817 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %818 = bitcast float %816 to i32, !dbg !91
  %819 = bitcast float %817 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %818, i32 %819, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %820 = load float, ptr addrspace(3) %680, align 4, !dbg !91
  %821 = sext i32 %529 to i64, !dbg !92
  %822 = getelementptr bfloat, ptr addrspace(1) %6, i64 %821, !dbg !92
  %823 = fptrunc float %681 to bfloat, !dbg !86
  %824 = and i32 %15, 510, !dbg !86
  %825 = icmp eq i32 %824, 0, !dbg !86
  %826 = bitcast bfloat %823 to i16, !dbg !86
  %827 = and i1 %825, %530, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %826, ptr addrspace(1) %822, i1 %827) #5, !dbg !86
  %828 = getelementptr bfloat, ptr addrspace(1) %7, i64 %821, !dbg !93
  %829 = fptrunc float %820 to bfloat, !dbg !91
  %830 = bitcast bfloat %829 to i16, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %830, ptr addrspace(1) %828, i1 %827) #5, !dbg !91
  %.inv4 = fcmp oge float %676, 0.000000e+00, !dbg !94
  %831 = select i1 %.inv4, float 0.000000e+00, float %676, !dbg !94
  %.inv5 = fcmp oge float %677, 0.000000e+00, !dbg !94
  %832 = select i1 %.inv5, float 0.000000e+00, float %677, !dbg !94
  %833 = fsub float 0.000000e+00, %831, !dbg !96
  %834 = fsub float 0.000000e+00, %832, !dbg !96
  %.inv6 = fcmp ole float %816, 0.000000e+00, !dbg !97
  %835 = select i1 %.inv6, float 0.000000e+00, float %816, !dbg !97
  %.inv7 = fcmp ole float %817, 0.000000e+00, !dbg !97
  %836 = select i1 %.inv7, float 0.000000e+00, float %817, !dbg !97
  %837 = fcmp ogt float %833, %835, !dbg !99
  %838 = fcmp ogt float %834, %836, !dbg !99
  %839 = fcmp uno float %833, 0.000000e+00, !dbg !101
  %840 = fcmp uno float %834, 0.000000e+00, !dbg !101
  %841 = or i1 %839, %837, !dbg !102
  %842 = or i1 %840, %838, !dbg !102
  %843 = select i1 %841, float %833, float %835, !dbg !103
  %844 = select i1 %842, float %834, float %836, !dbg !103
  %845 = fmul float %843, 0x3F80204080000000, !dbg !104
  %846 = fmul float %844, 0x3F80204080000000, !dbg !104
  %847 = fcmp ogt float %845, 0x3EE4F8B580000000, !dbg !105
  %848 = fcmp ogt float %846, 0x3EE4F8B580000000, !dbg !105
  %849 = fcmp uno float %845, 0.000000e+00, !dbg !107
  %850 = fcmp uno float %846, 0.000000e+00, !dbg !107
  %851 = or i1 %847, %849, !dbg !108
  %852 = or i1 %848, %850, !dbg !108
  %853 = select i1 %851, float %845, float 0x3EE4F8B580000000, !dbg !109
  %854 = select i1 %852, float %846, float 0x3EE4F8B580000000, !dbg !109
  %855 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %853), !dbg !110
  %856 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %854), !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %857 = bitcast float %855 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %857, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %857, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %857, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %857, i1 true) #5, !dbg !111
  %858 = bitcast float %856 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %858, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %858, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %858, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %858, i1 true) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %859 = lshr exact i32 %16, 5, !dbg !111
  %860 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %859, !dbg !111
  %861 = load float, ptr addrspace(3) %860, align 8, !dbg !111
  br label %862, !dbg !112

862:                                              ; preds = %526, %__nv_tanhf.exit147
  %indvars.iv316 = phi i64 [ 0, %526 ], [ %indvars.iv.next317, %__nv_tanhf.exit147 ]
  %863 = trunc nuw nsw i64 %indvars.iv316 to i32, !dbg !113
  %864 = add i32 %64, %863, !dbg !113
  %865 = add i32 %65, %863, !dbg !113
  %866 = sext i32 %864 to i64, !dbg !114
  %867 = getelementptr float, ptr addrspace(1) %5, i64 %866, !dbg !114
  %868 = sext i32 %865 to i64, !dbg !114
  %869 = getelementptr float, ptr addrspace(1) %5, i64 %868, !dbg !114
  %870 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %867, i1 %19) #5, !dbg !115
  %871 = extractvalue { i32, i32, i32, i32 } %870, 0, !dbg !115
  %872 = extractvalue { i32, i32, i32, i32 } %870, 1, !dbg !115
  %873 = extractvalue { i32, i32, i32, i32 } %870, 2, !dbg !115
  %874 = extractvalue { i32, i32, i32, i32 } %870, 3, !dbg !115
  %875 = bitcast i32 %871 to float, !dbg !115
  %876 = bitcast i32 %872 to float, !dbg !115
  %877 = bitcast i32 %873 to float, !dbg !115
  %878 = bitcast i32 %874 to float, !dbg !115
  %879 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %869, i1 %19) #5, !dbg !115
  %880 = extractvalue { i32, i32, i32, i32 } %879, 0, !dbg !115
  %881 = extractvalue { i32, i32, i32, i32 } %879, 1, !dbg !115
  %882 = extractvalue { i32, i32, i32, i32 } %879, 2, !dbg !115
  %883 = extractvalue { i32, i32, i32, i32 } %879, 3, !dbg !115
  %884 = bitcast i32 %880 to float, !dbg !115
  %885 = bitcast i32 %881 to float, !dbg !115
  %886 = bitcast i32 %882 to float, !dbg !115
  %887 = bitcast i32 %883 to float, !dbg !115
  %888 = fmul float %875, 5.000000e-01, !dbg !116
  %889 = fmul float %876, 5.000000e-01, !dbg !116
  %890 = fmul float %877, 5.000000e-01, !dbg !116
  %891 = fmul float %878, 5.000000e-01, !dbg !116
  %892 = fmul float %884, 5.000000e-01, !dbg !116
  %893 = fmul float %885, 5.000000e-01, !dbg !116
  %894 = fmul float %886, 5.000000e-01, !dbg !116
  %895 = fmul float %887, 5.000000e-01, !dbg !116
  %896 = fmul float %875, %875, !dbg !117
  %897 = fmul float %876, %876, !dbg !117
  %898 = fmul float %877, %877, !dbg !117
  %899 = fmul float %878, %878, !dbg !117
  %900 = fmul float %884, %884, !dbg !117
  %901 = fmul float %885, %885, !dbg !117
  %902 = fmul float %886, %886, !dbg !117
  %903 = fmul float %887, %887, !dbg !117
  %904 = fmul float %896, %875, !dbg !118
  %905 = fmul float %897, %876, !dbg !118
  %906 = fmul float %898, %877, !dbg !118
  %907 = fmul float %899, %878, !dbg !118
  %908 = fmul float %900, %884, !dbg !118
  %909 = fmul float %901, %885, !dbg !118
  %910 = fmul float %902, %886, !dbg !118
  %911 = fmul float %903, %887, !dbg !118
  %912 = fmul float %904, 0x3FA6E4E260000000, !dbg !119
  %913 = fmul float %905, 0x3FA6E4E260000000, !dbg !119
  %914 = fmul float %906, 0x3FA6E4E260000000, !dbg !119
  %915 = fmul float %907, 0x3FA6E4E260000000, !dbg !119
  %916 = fmul float %908, 0x3FA6E4E260000000, !dbg !119
  %917 = fmul float %909, 0x3FA6E4E260000000, !dbg !119
  %918 = fmul float %910, 0x3FA6E4E260000000, !dbg !119
  %919 = fmul float %911, 0x3FA6E4E260000000, !dbg !119
  %920 = fadd float %912, %875, !dbg !120
  %921 = fadd float %913, %876, !dbg !120
  %922 = fadd float %914, %877, !dbg !120
  %923 = fadd float %915, %878, !dbg !120
  %924 = fadd float %916, %884, !dbg !120
  %925 = fadd float %917, %885, !dbg !120
  %926 = fadd float %918, %886, !dbg !120
  %927 = fadd float %919, %887, !dbg !120
  %928 = fmul float %920, 0x3FE9884540000000, !dbg !121
  %929 = fmul float %921, 0x3FE9884540000000, !dbg !121
  %930 = fmul float %922, 0x3FE9884540000000, !dbg !121
  %931 = fmul float %923, 0x3FE9884540000000, !dbg !121
  %932 = fmul float %924, 0x3FE9884540000000, !dbg !121
  %933 = fmul float %925, 0x3FE9884540000000, !dbg !121
  %934 = fmul float %926, 0x3FE9884540000000, !dbg !121
  %935 = fmul float %927, 0x3FE9884540000000, !dbg !121
  %936 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i = icmp eq i32 %936, 0, !dbg !122
  %937 = tail call float @llvm.nvvm.fabs.ftz.f(float %928) #5, !dbg !122
  %938 = tail call float @llvm.nvvm.fabs.f(float %928) #5, !dbg !122
  %.01.i = select i1 %.not.i, float %938, float %937, !dbg !122
  %939 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !122
  br i1 %939, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !122

__internal_fmad.exit1.i:                          ; preds = %862
  %940 = fmul float %.01.i, 0x4007154760000000, !dbg !122
  %941 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %940) #5, !dbg !122
  %942 = fadd float %941, 1.000000e+00, !dbg !122
  %943 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %942) #6, !dbg !122, !srcloc !61
  %944 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i = icmp eq i32 %944, 0, !dbg !122
  %945 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %943, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %946 = tail call float @llvm.nvvm.fma.rn.f(float %943, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i = select i1 %.not6.i, float %946, float %945, !dbg !122
  %947 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !122
  %s.0.i = select i1 %947, float 1.000000e+00, float %.03.i, !dbg !122
  %948 = bitcast float %s.0.i to i32, !dbg !122
  %949 = bitcast float %928 to i32, !dbg !122
  %950 = and i32 %949, -2147483648, !dbg !122
  %951 = or i32 %950, %948, !dbg !122
  %952 = bitcast i32 %951 to float, !dbg !122
  br label %__nv_tanhf.exit, !dbg !122

__internal_fmad.exit3.i:                          ; preds = %862
  %953 = fmul float %928, %928, !dbg !122
  %954 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i = icmp eq i32 %954, 0, !dbg !122
  %955 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %953, float 0xBFAAC795C0000000) #5, !dbg !122
  %956 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %953, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i = select i1 %.not1.i, float %956, float %955, !dbg !122
  %957 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i = icmp eq i32 %957, 0, !dbg !122
  %958 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %953, float 0x3FC10B2820000000) #5, !dbg !122
  %959 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %953, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i = select i1 %.not2.i, float %959, float %958, !dbg !122
  %960 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i = icmp eq i32 %960, 0, !dbg !122
  %961 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %953, float 0xBFD5553DA0000000) #5, !dbg !122
  %962 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %953, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i = select i1 %.not3.i, float %962, float %961, !dbg !122
  %963 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i = icmp eq i32 %963, 0, !dbg !122
  %964 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %953, float 0.000000e+00) #5, !dbg !122
  %965 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %953, float 0.000000e+00) #5, !dbg !122
  %.04.i = select i1 %.not4.i, float %965, float %964, !dbg !122
  %966 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i = icmp eq i32 %966, 0, !dbg !122
  %967 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %928, float %928) #5, !dbg !122
  %968 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %928, float %928) #5, !dbg !122
  %.02.i = select i1 %.not5.i, float %968, float %967, !dbg !122
  br label %__nv_tanhf.exit, !dbg !122

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %952, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !122
  %969 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i15 = icmp eq i32 %969, 0, !dbg !122
  %970 = tail call float @llvm.nvvm.fabs.ftz.f(float %929) #5, !dbg !122
  %971 = tail call float @llvm.nvvm.fabs.f(float %929) #5, !dbg !122
  %.01.i16 = select i1 %.not.i15, float %971, float %970, !dbg !122
  %972 = fcmp ult float %.01.i16, 0x3FE3333340000000, !dbg !122
  br i1 %972, label %__internal_fmad.exit3.i22, label %__internal_fmad.exit1.i17, !dbg !122

__internal_fmad.exit1.i17:                        ; preds = %__nv_tanhf.exit
  %973 = fmul float %.01.i16, 0x4007154760000000, !dbg !122
  %974 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %973) #5, !dbg !122
  %975 = fadd float %974, 1.000000e+00, !dbg !122
  %976 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %975) #6, !dbg !122, !srcloc !61
  %977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i18 = icmp eq i32 %977, 0, !dbg !122
  %978 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %976, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %979 = tail call float @llvm.nvvm.fma.rn.f(float %976, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i19 = select i1 %.not6.i18, float %979, float %978, !dbg !122
  %980 = fcmp oge float %.01.i16, 0x4022059680000000, !dbg !122
  %s.0.i20 = select i1 %980, float 1.000000e+00, float %.03.i19, !dbg !122
  %981 = bitcast float %s.0.i20 to i32, !dbg !122
  %982 = bitcast float %929 to i32, !dbg !122
  %983 = and i32 %982, -2147483648, !dbg !122
  %984 = or i32 %983, %981, !dbg !122
  %985 = bitcast i32 %984 to float, !dbg !122
  br label %__nv_tanhf.exit33, !dbg !122

__internal_fmad.exit3.i22:                        ; preds = %__nv_tanhf.exit
  %986 = fmul float %929, %929, !dbg !122
  %987 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i23 = icmp eq i32 %987, 0, !dbg !122
  %988 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %986, float 0xBFAAC795C0000000) #5, !dbg !122
  %989 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %986, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i24 = select i1 %.not1.i23, float %989, float %988, !dbg !122
  %990 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i25 = icmp eq i32 %990, 0, !dbg !122
  %991 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i24, float %986, float 0x3FC10B2820000000) #5, !dbg !122
  %992 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i24, float %986, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i26 = select i1 %.not2.i25, float %992, float %991, !dbg !122
  %993 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i27 = icmp eq i32 %993, 0, !dbg !122
  %994 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i26, float %986, float 0xBFD5553DA0000000) #5, !dbg !122
  %995 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i26, float %986, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i28 = select i1 %.not3.i27, float %995, float %994, !dbg !122
  %996 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i29 = icmp eq i32 %996, 0, !dbg !122
  %997 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i28, float %986, float 0.000000e+00) #5, !dbg !122
  %998 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i28, float %986, float 0.000000e+00) #5, !dbg !122
  %.04.i30 = select i1 %.not4.i29, float %998, float %997, !dbg !122
  %999 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i31 = icmp eq i32 %999, 0, !dbg !122
  %1000 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i30, float %929, float %929) #5, !dbg !122
  %1001 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i30, float %929, float %929) #5, !dbg !122
  %.02.i32 = select i1 %.not5.i31, float %1001, float %1000, !dbg !122
  br label %__nv_tanhf.exit33, !dbg !122

__nv_tanhf.exit33:                                ; preds = %__internal_fmad.exit1.i17, %__internal_fmad.exit3.i22
  %s.1.i21 = phi float [ %985, %__internal_fmad.exit1.i17 ], [ %.02.i32, %__internal_fmad.exit3.i22 ], !dbg !122
  %1002 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i34 = icmp eq i32 %1002, 0, !dbg !122
  %1003 = tail call float @llvm.nvvm.fabs.ftz.f(float %930) #5, !dbg !122
  %1004 = tail call float @llvm.nvvm.fabs.f(float %930) #5, !dbg !122
  %.01.i35 = select i1 %.not.i34, float %1004, float %1003, !dbg !122
  %1005 = fcmp ult float %.01.i35, 0x3FE3333340000000, !dbg !122
  br i1 %1005, label %__internal_fmad.exit3.i41, label %__internal_fmad.exit1.i36, !dbg !122

__internal_fmad.exit1.i36:                        ; preds = %__nv_tanhf.exit33
  %1006 = fmul float %.01.i35, 0x4007154760000000, !dbg !122
  %1007 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1006) #5, !dbg !122
  %1008 = fadd float %1007, 1.000000e+00, !dbg !122
  %1009 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1008) #6, !dbg !122, !srcloc !61
  %1010 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i37 = icmp eq i32 %1010, 0, !dbg !122
  %1011 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1009, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1012 = tail call float @llvm.nvvm.fma.rn.f(float %1009, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i38 = select i1 %.not6.i37, float %1012, float %1011, !dbg !122
  %1013 = fcmp oge float %.01.i35, 0x4022059680000000, !dbg !122
  %s.0.i39 = select i1 %1013, float 1.000000e+00, float %.03.i38, !dbg !122
  %1014 = bitcast float %s.0.i39 to i32, !dbg !122
  %1015 = bitcast float %930 to i32, !dbg !122
  %1016 = and i32 %1015, -2147483648, !dbg !122
  %1017 = or i32 %1016, %1014, !dbg !122
  %1018 = bitcast i32 %1017 to float, !dbg !122
  br label %__nv_tanhf.exit52, !dbg !122

__internal_fmad.exit3.i41:                        ; preds = %__nv_tanhf.exit33
  %1019 = fmul float %930, %930, !dbg !122
  %1020 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i42 = icmp eq i32 %1020, 0, !dbg !122
  %1021 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1019, float 0xBFAAC795C0000000) #5, !dbg !122
  %1022 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1019, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i43 = select i1 %.not1.i42, float %1022, float %1021, !dbg !122
  %1023 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i44 = icmp eq i32 %1023, 0, !dbg !122
  %1024 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i43, float %1019, float 0x3FC10B2820000000) #5, !dbg !122
  %1025 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i43, float %1019, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i45 = select i1 %.not2.i44, float %1025, float %1024, !dbg !122
  %1026 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i46 = icmp eq i32 %1026, 0, !dbg !122
  %1027 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i45, float %1019, float 0xBFD5553DA0000000) #5, !dbg !122
  %1028 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i45, float %1019, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i47 = select i1 %.not3.i46, float %1028, float %1027, !dbg !122
  %1029 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i48 = icmp eq i32 %1029, 0, !dbg !122
  %1030 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i47, float %1019, float 0.000000e+00) #5, !dbg !122
  %1031 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i47, float %1019, float 0.000000e+00) #5, !dbg !122
  %.04.i49 = select i1 %.not4.i48, float %1031, float %1030, !dbg !122
  %1032 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i50 = icmp eq i32 %1032, 0, !dbg !122
  %1033 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i49, float %930, float %930) #5, !dbg !122
  %1034 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i49, float %930, float %930) #5, !dbg !122
  %.02.i51 = select i1 %.not5.i50, float %1034, float %1033, !dbg !122
  br label %__nv_tanhf.exit52, !dbg !122

__nv_tanhf.exit52:                                ; preds = %__internal_fmad.exit1.i36, %__internal_fmad.exit3.i41
  %s.1.i40 = phi float [ %1018, %__internal_fmad.exit1.i36 ], [ %.02.i51, %__internal_fmad.exit3.i41 ], !dbg !122
  %1035 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i53 = icmp eq i32 %1035, 0, !dbg !122
  %1036 = tail call float @llvm.nvvm.fabs.ftz.f(float %931) #5, !dbg !122
  %1037 = tail call float @llvm.nvvm.fabs.f(float %931) #5, !dbg !122
  %.01.i54 = select i1 %.not.i53, float %1037, float %1036, !dbg !122
  %1038 = fcmp ult float %.01.i54, 0x3FE3333340000000, !dbg !122
  br i1 %1038, label %__internal_fmad.exit3.i60, label %__internal_fmad.exit1.i55, !dbg !122

__internal_fmad.exit1.i55:                        ; preds = %__nv_tanhf.exit52
  %1039 = fmul float %.01.i54, 0x4007154760000000, !dbg !122
  %1040 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1039) #5, !dbg !122
  %1041 = fadd float %1040, 1.000000e+00, !dbg !122
  %1042 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1041) #6, !dbg !122, !srcloc !61
  %1043 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i56 = icmp eq i32 %1043, 0, !dbg !122
  %1044 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1042, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1045 = tail call float @llvm.nvvm.fma.rn.f(float %1042, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i57 = select i1 %.not6.i56, float %1045, float %1044, !dbg !122
  %1046 = fcmp oge float %.01.i54, 0x4022059680000000, !dbg !122
  %s.0.i58 = select i1 %1046, float 1.000000e+00, float %.03.i57, !dbg !122
  %1047 = bitcast float %s.0.i58 to i32, !dbg !122
  %1048 = bitcast float %931 to i32, !dbg !122
  %1049 = and i32 %1048, -2147483648, !dbg !122
  %1050 = or i32 %1049, %1047, !dbg !122
  %1051 = bitcast i32 %1050 to float, !dbg !122
  br label %__nv_tanhf.exit71, !dbg !122

__internal_fmad.exit3.i60:                        ; preds = %__nv_tanhf.exit52
  %1052 = fmul float %931, %931, !dbg !122
  %1053 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i61 = icmp eq i32 %1053, 0, !dbg !122
  %1054 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1052, float 0xBFAAC795C0000000) #5, !dbg !122
  %1055 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1052, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i62 = select i1 %.not1.i61, float %1055, float %1054, !dbg !122
  %1056 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i63 = icmp eq i32 %1056, 0, !dbg !122
  %1057 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i62, float %1052, float 0x3FC10B2820000000) #5, !dbg !122
  %1058 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i62, float %1052, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i64 = select i1 %.not2.i63, float %1058, float %1057, !dbg !122
  %1059 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i65 = icmp eq i32 %1059, 0, !dbg !122
  %1060 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i64, float %1052, float 0xBFD5553DA0000000) #5, !dbg !122
  %1061 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i64, float %1052, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i66 = select i1 %.not3.i65, float %1061, float %1060, !dbg !122
  %1062 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i67 = icmp eq i32 %1062, 0, !dbg !122
  %1063 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i66, float %1052, float 0.000000e+00) #5, !dbg !122
  %1064 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i66, float %1052, float 0.000000e+00) #5, !dbg !122
  %.04.i68 = select i1 %.not4.i67, float %1064, float %1063, !dbg !122
  %1065 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i69 = icmp eq i32 %1065, 0, !dbg !122
  %1066 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i68, float %931, float %931) #5, !dbg !122
  %1067 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i68, float %931, float %931) #5, !dbg !122
  %.02.i70 = select i1 %.not5.i69, float %1067, float %1066, !dbg !122
  br label %__nv_tanhf.exit71, !dbg !122

__nv_tanhf.exit71:                                ; preds = %__internal_fmad.exit1.i55, %__internal_fmad.exit3.i60
  %s.1.i59 = phi float [ %1051, %__internal_fmad.exit1.i55 ], [ %.02.i70, %__internal_fmad.exit3.i60 ], !dbg !122
  %1068 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i72 = icmp eq i32 %1068, 0, !dbg !122
  %1069 = tail call float @llvm.nvvm.fabs.ftz.f(float %932) #5, !dbg !122
  %1070 = tail call float @llvm.nvvm.fabs.f(float %932) #5, !dbg !122
  %.01.i73 = select i1 %.not.i72, float %1070, float %1069, !dbg !122
  %1071 = fcmp ult float %.01.i73, 0x3FE3333340000000, !dbg !122
  br i1 %1071, label %__internal_fmad.exit3.i79, label %__internal_fmad.exit1.i74, !dbg !122

__internal_fmad.exit1.i74:                        ; preds = %__nv_tanhf.exit71
  %1072 = fmul float %.01.i73, 0x4007154760000000, !dbg !122
  %1073 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1072) #5, !dbg !122
  %1074 = fadd float %1073, 1.000000e+00, !dbg !122
  %1075 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1074) #6, !dbg !122, !srcloc !61
  %1076 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i75 = icmp eq i32 %1076, 0, !dbg !122
  %1077 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1075, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1078 = tail call float @llvm.nvvm.fma.rn.f(float %1075, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i76 = select i1 %.not6.i75, float %1078, float %1077, !dbg !122
  %1079 = fcmp oge float %.01.i73, 0x4022059680000000, !dbg !122
  %s.0.i77 = select i1 %1079, float 1.000000e+00, float %.03.i76, !dbg !122
  %1080 = bitcast float %s.0.i77 to i32, !dbg !122
  %1081 = bitcast float %932 to i32, !dbg !122
  %1082 = and i32 %1081, -2147483648, !dbg !122
  %1083 = or i32 %1082, %1080, !dbg !122
  %1084 = bitcast i32 %1083 to float, !dbg !122
  br label %__nv_tanhf.exit90, !dbg !122

__internal_fmad.exit3.i79:                        ; preds = %__nv_tanhf.exit71
  %1085 = fmul float %932, %932, !dbg !122
  %1086 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i80 = icmp eq i32 %1086, 0, !dbg !122
  %1087 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1085, float 0xBFAAC795C0000000) #5, !dbg !122
  %1088 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1085, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i81 = select i1 %.not1.i80, float %1088, float %1087, !dbg !122
  %1089 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i82 = icmp eq i32 %1089, 0, !dbg !122
  %1090 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i81, float %1085, float 0x3FC10B2820000000) #5, !dbg !122
  %1091 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i81, float %1085, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i83 = select i1 %.not2.i82, float %1091, float %1090, !dbg !122
  %1092 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i84 = icmp eq i32 %1092, 0, !dbg !122
  %1093 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i83, float %1085, float 0xBFD5553DA0000000) #5, !dbg !122
  %1094 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i83, float %1085, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i85 = select i1 %.not3.i84, float %1094, float %1093, !dbg !122
  %1095 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i86 = icmp eq i32 %1095, 0, !dbg !122
  %1096 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i85, float %1085, float 0.000000e+00) #5, !dbg !122
  %1097 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i85, float %1085, float 0.000000e+00) #5, !dbg !122
  %.04.i87 = select i1 %.not4.i86, float %1097, float %1096, !dbg !122
  %1098 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i88 = icmp eq i32 %1098, 0, !dbg !122
  %1099 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i87, float %932, float %932) #5, !dbg !122
  %1100 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i87, float %932, float %932) #5, !dbg !122
  %.02.i89 = select i1 %.not5.i88, float %1100, float %1099, !dbg !122
  br label %__nv_tanhf.exit90, !dbg !122

__nv_tanhf.exit90:                                ; preds = %__internal_fmad.exit1.i74, %__internal_fmad.exit3.i79
  %s.1.i78 = phi float [ %1084, %__internal_fmad.exit1.i74 ], [ %.02.i89, %__internal_fmad.exit3.i79 ], !dbg !122
  %1101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i91 = icmp eq i32 %1101, 0, !dbg !122
  %1102 = tail call float @llvm.nvvm.fabs.ftz.f(float %933) #5, !dbg !122
  %1103 = tail call float @llvm.nvvm.fabs.f(float %933) #5, !dbg !122
  %.01.i92 = select i1 %.not.i91, float %1103, float %1102, !dbg !122
  %1104 = fcmp ult float %.01.i92, 0x3FE3333340000000, !dbg !122
  br i1 %1104, label %__internal_fmad.exit3.i98, label %__internal_fmad.exit1.i93, !dbg !122

__internal_fmad.exit1.i93:                        ; preds = %__nv_tanhf.exit90
  %1105 = fmul float %.01.i92, 0x4007154760000000, !dbg !122
  %1106 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1105) #5, !dbg !122
  %1107 = fadd float %1106, 1.000000e+00, !dbg !122
  %1108 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1107) #6, !dbg !122, !srcloc !61
  %1109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i94 = icmp eq i32 %1109, 0, !dbg !122
  %1110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1108, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1111 = tail call float @llvm.nvvm.fma.rn.f(float %1108, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i95 = select i1 %.not6.i94, float %1111, float %1110, !dbg !122
  %1112 = fcmp oge float %.01.i92, 0x4022059680000000, !dbg !122
  %s.0.i96 = select i1 %1112, float 1.000000e+00, float %.03.i95, !dbg !122
  %1113 = bitcast float %s.0.i96 to i32, !dbg !122
  %1114 = bitcast float %933 to i32, !dbg !122
  %1115 = and i32 %1114, -2147483648, !dbg !122
  %1116 = or i32 %1115, %1113, !dbg !122
  %1117 = bitcast i32 %1116 to float, !dbg !122
  br label %__nv_tanhf.exit109, !dbg !122

__internal_fmad.exit3.i98:                        ; preds = %__nv_tanhf.exit90
  %1118 = fmul float %933, %933, !dbg !122
  %1119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i99 = icmp eq i32 %1119, 0, !dbg !122
  %1120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1118, float 0xBFAAC795C0000000) #5, !dbg !122
  %1121 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1118, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i100 = select i1 %.not1.i99, float %1121, float %1120, !dbg !122
  %1122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i101 = icmp eq i32 %1122, 0, !dbg !122
  %1123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i100, float %1118, float 0x3FC10B2820000000) #5, !dbg !122
  %1124 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i100, float %1118, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i102 = select i1 %.not2.i101, float %1124, float %1123, !dbg !122
  %1125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i103 = icmp eq i32 %1125, 0, !dbg !122
  %1126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i102, float %1118, float 0xBFD5553DA0000000) #5, !dbg !122
  %1127 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i102, float %1118, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i104 = select i1 %.not3.i103, float %1127, float %1126, !dbg !122
  %1128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i105 = icmp eq i32 %1128, 0, !dbg !122
  %1129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i104, float %1118, float 0.000000e+00) #5, !dbg !122
  %1130 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i104, float %1118, float 0.000000e+00) #5, !dbg !122
  %.04.i106 = select i1 %.not4.i105, float %1130, float %1129, !dbg !122
  %1131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i107 = icmp eq i32 %1131, 0, !dbg !122
  %1132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i106, float %933, float %933) #5, !dbg !122
  %1133 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i106, float %933, float %933) #5, !dbg !122
  %.02.i108 = select i1 %.not5.i107, float %1133, float %1132, !dbg !122
  br label %__nv_tanhf.exit109, !dbg !122

__nv_tanhf.exit109:                               ; preds = %__internal_fmad.exit1.i93, %__internal_fmad.exit3.i98
  %s.1.i97 = phi float [ %1117, %__internal_fmad.exit1.i93 ], [ %.02.i108, %__internal_fmad.exit3.i98 ], !dbg !122
  %1134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i110 = icmp eq i32 %1134, 0, !dbg !122
  %1135 = tail call float @llvm.nvvm.fabs.ftz.f(float %934) #5, !dbg !122
  %1136 = tail call float @llvm.nvvm.fabs.f(float %934) #5, !dbg !122
  %.01.i111 = select i1 %.not.i110, float %1136, float %1135, !dbg !122
  %1137 = fcmp ult float %.01.i111, 0x3FE3333340000000, !dbg !122
  br i1 %1137, label %__internal_fmad.exit3.i117, label %__internal_fmad.exit1.i112, !dbg !122

__internal_fmad.exit1.i112:                       ; preds = %__nv_tanhf.exit109
  %1138 = fmul float %.01.i111, 0x4007154760000000, !dbg !122
  %1139 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1138) #5, !dbg !122
  %1140 = fadd float %1139, 1.000000e+00, !dbg !122
  %1141 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1140) #6, !dbg !122, !srcloc !61
  %1142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i113 = icmp eq i32 %1142, 0, !dbg !122
  %1143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1141, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1144 = tail call float @llvm.nvvm.fma.rn.f(float %1141, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i114 = select i1 %.not6.i113, float %1144, float %1143, !dbg !122
  %1145 = fcmp oge float %.01.i111, 0x4022059680000000, !dbg !122
  %s.0.i115 = select i1 %1145, float 1.000000e+00, float %.03.i114, !dbg !122
  %1146 = bitcast float %s.0.i115 to i32, !dbg !122
  %1147 = bitcast float %934 to i32, !dbg !122
  %1148 = and i32 %1147, -2147483648, !dbg !122
  %1149 = or i32 %1148, %1146, !dbg !122
  %1150 = bitcast i32 %1149 to float, !dbg !122
  br label %__nv_tanhf.exit128, !dbg !122

__internal_fmad.exit3.i117:                       ; preds = %__nv_tanhf.exit109
  %1151 = fmul float %934, %934, !dbg !122
  %1152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i118 = icmp eq i32 %1152, 0, !dbg !122
  %1153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1151, float 0xBFAAC795C0000000) #5, !dbg !122
  %1154 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1151, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i119 = select i1 %.not1.i118, float %1154, float %1153, !dbg !122
  %1155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i120 = icmp eq i32 %1155, 0, !dbg !122
  %1156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i119, float %1151, float 0x3FC10B2820000000) #5, !dbg !122
  %1157 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i119, float %1151, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i121 = select i1 %.not2.i120, float %1157, float %1156, !dbg !122
  %1158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i122 = icmp eq i32 %1158, 0, !dbg !122
  %1159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i121, float %1151, float 0xBFD5553DA0000000) #5, !dbg !122
  %1160 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i121, float %1151, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i123 = select i1 %.not3.i122, float %1160, float %1159, !dbg !122
  %1161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i124 = icmp eq i32 %1161, 0, !dbg !122
  %1162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i123, float %1151, float 0.000000e+00) #5, !dbg !122
  %1163 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i123, float %1151, float 0.000000e+00) #5, !dbg !122
  %.04.i125 = select i1 %.not4.i124, float %1163, float %1162, !dbg !122
  %1164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i126 = icmp eq i32 %1164, 0, !dbg !122
  %1165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i125, float %934, float %934) #5, !dbg !122
  %1166 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i125, float %934, float %934) #5, !dbg !122
  %.02.i127 = select i1 %.not5.i126, float %1166, float %1165, !dbg !122
  br label %__nv_tanhf.exit128, !dbg !122

__nv_tanhf.exit128:                               ; preds = %__internal_fmad.exit1.i112, %__internal_fmad.exit3.i117
  %s.1.i116 = phi float [ %1150, %__internal_fmad.exit1.i112 ], [ %.02.i127, %__internal_fmad.exit3.i117 ], !dbg !122
  %1167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i129 = icmp eq i32 %1167, 0, !dbg !122
  %1168 = tail call float @llvm.nvvm.fabs.ftz.f(float %935) #5, !dbg !122
  %1169 = tail call float @llvm.nvvm.fabs.f(float %935) #5, !dbg !122
  %.01.i130 = select i1 %.not.i129, float %1169, float %1168, !dbg !122
  %1170 = fcmp ult float %.01.i130, 0x3FE3333340000000, !dbg !122
  br i1 %1170, label %__internal_fmad.exit3.i136, label %__internal_fmad.exit1.i131, !dbg !122

__internal_fmad.exit1.i131:                       ; preds = %__nv_tanhf.exit128
  %1171 = fmul float %.01.i130, 0x4007154760000000, !dbg !122
  %1172 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1171) #5, !dbg !122
  %1173 = fadd float %1172, 1.000000e+00, !dbg !122
  %1174 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1173) #6, !dbg !122, !srcloc !61
  %1175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i132 = icmp eq i32 %1175, 0, !dbg !122
  %1176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1174, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1177 = tail call float @llvm.nvvm.fma.rn.f(float %1174, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i133 = select i1 %.not6.i132, float %1177, float %1176, !dbg !122
  %1178 = fcmp oge float %.01.i130, 0x4022059680000000, !dbg !122
  %s.0.i134 = select i1 %1178, float 1.000000e+00, float %.03.i133, !dbg !122
  %1179 = bitcast float %s.0.i134 to i32, !dbg !122
  %1180 = bitcast float %935 to i32, !dbg !122
  %1181 = and i32 %1180, -2147483648, !dbg !122
  %1182 = or i32 %1181, %1179, !dbg !122
  %1183 = bitcast i32 %1182 to float, !dbg !122
  br label %__nv_tanhf.exit147, !dbg !122

__internal_fmad.exit3.i136:                       ; preds = %__nv_tanhf.exit128
  %1184 = fmul float %935, %935, !dbg !122
  %1185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i137 = icmp eq i32 %1185, 0, !dbg !122
  %1186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1184, float 0xBFAAC795C0000000) #5, !dbg !122
  %1187 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1184, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i138 = select i1 %.not1.i137, float %1187, float %1186, !dbg !122
  %1188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i139 = icmp eq i32 %1188, 0, !dbg !122
  %1189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i138, float %1184, float 0x3FC10B2820000000) #5, !dbg !122
  %1190 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i138, float %1184, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i140 = select i1 %.not2.i139, float %1190, float %1189, !dbg !122
  %1191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i141 = icmp eq i32 %1191, 0, !dbg !122
  %1192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i140, float %1184, float 0xBFD5553DA0000000) #5, !dbg !122
  %1193 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i140, float %1184, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i142 = select i1 %.not3.i141, float %1193, float %1192, !dbg !122
  %1194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i143 = icmp eq i32 %1194, 0, !dbg !122
  %1195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i142, float %1184, float 0.000000e+00) #5, !dbg !122
  %1196 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i142, float %1184, float 0.000000e+00) #5, !dbg !122
  %.04.i144 = select i1 %.not4.i143, float %1196, float %1195, !dbg !122
  %1197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i145 = icmp eq i32 %1197, 0, !dbg !122
  %1198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i144, float %935, float %935) #5, !dbg !122
  %1199 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i144, float %935, float %935) #5, !dbg !122
  %.02.i146 = select i1 %.not5.i145, float %1199, float %1198, !dbg !122
  br label %__nv_tanhf.exit147, !dbg !122

__nv_tanhf.exit147:                               ; preds = %__internal_fmad.exit1.i131, %__internal_fmad.exit3.i136
  %s.1.i135 = phi float [ %1183, %__internal_fmad.exit1.i131 ], [ %.02.i146, %__internal_fmad.exit3.i136 ], !dbg !122
  %1200 = fadd float %s.1.i, 1.000000e+00, !dbg !123
  %1201 = fadd float %s.1.i21, 1.000000e+00, !dbg !123
  %1202 = fadd float %s.1.i40, 1.000000e+00, !dbg !123
  %1203 = fadd float %s.1.i59, 1.000000e+00, !dbg !123
  %1204 = fadd float %s.1.i78, 1.000000e+00, !dbg !123
  %1205 = fadd float %s.1.i97, 1.000000e+00, !dbg !123
  %1206 = fadd float %s.1.i116, 1.000000e+00, !dbg !123
  %1207 = fadd float %s.1.i135, 1.000000e+00, !dbg !123
  %1208 = fmul float %888, %1200, !dbg !124
  %1209 = fmul float %889, %1201, !dbg !124
  %1210 = fmul float %890, %1202, !dbg !124
  %1211 = fmul float %891, %1203, !dbg !124
  %1212 = fmul float %892, %1204, !dbg !124
  %1213 = fmul float %893, %1205, !dbg !124
  %1214 = fmul float %894, %1206, !dbg !124
  %1215 = fmul float %895, %1207, !dbg !124
  %1216 = fmul float %861, %1208, !dbg !111
  %1217 = fmul float %861, %1209, !dbg !111
  %1218 = fmul float %861, %1210, !dbg !111
  %1219 = fmul float %861, %1211, !dbg !111
  %1220 = fmul float %861, %1212, !dbg !111
  %1221 = fmul float %861, %1213, !dbg !111
  %1222 = fmul float %861, %1214, !dbg !111
  %1223 = fmul float %861, %1215, !dbg !111
  %1224 = tail call float @llvm.nvvm.round.f(float %1216) #5, !dbg !125
  %1225 = tail call float @llvm.nvvm.round.f(float %1217) #5, !dbg !125
  %1226 = tail call float @llvm.nvvm.round.f(float %1218) #5, !dbg !125
  %1227 = tail call float @llvm.nvvm.round.f(float %1219) #5, !dbg !125
  %1228 = tail call float @llvm.nvvm.round.f(float %1220) #5, !dbg !125
  %1229 = tail call float @llvm.nvvm.round.f(float %1221) #5, !dbg !125
  %1230 = tail call float @llvm.nvvm.round.f(float %1222) #5, !dbg !125
  %1231 = tail call float @llvm.nvvm.round.f(float %1223) #5, !dbg !125
  %1232 = insertelement <4 x float> poison, float %1224, i64 0, !dbg !126
  %1233 = insertelement <4 x float> %1232, float %1225, i64 1, !dbg !126
  %1234 = insertelement <4 x float> %1233, float %1226, i64 2, !dbg !126
  %1235 = insertelement <4 x float> %1234, float %1227, i64 3, !dbg !126
  %1236 = fcmp ogt <4 x float> %1235, splat (float -1.270000e+02), !dbg !126
  %1237 = fcmp uno <4 x float> %1235, zeroinitializer, !dbg !128
  %1238 = or <4 x i1> %1236, %1237, !dbg !129
  %1239 = select <4 x i1> %1238, <4 x float> %1235, <4 x float> splat (float -1.270000e+02), !dbg !130
  %1240 = fcmp olt <4 x float> %1239, splat (float 1.270000e+02), !dbg !131
  %1241 = fcmp uno <4 x float> %1239, zeroinitializer, !dbg !133
  %1242 = or <4 x i1> %1240, %1241, !dbg !134
  %1243 = fptosi <4 x float> %1239 to <4 x i8>, !dbg !135
  %1244 = select <4 x i1> %1242, <4 x i8> %1243, <4 x i8> splat (i8 127), !dbg !136
  %1245 = insertelement <4 x float> poison, float %1228, i64 0, !dbg !126
  %1246 = insertelement <4 x float> %1245, float %1229, i64 1, !dbg !126
  %1247 = insertelement <4 x float> %1246, float %1230, i64 2, !dbg !126
  %1248 = insertelement <4 x float> %1247, float %1231, i64 3, !dbg !126
  %1249 = fcmp ogt <4 x float> %1248, splat (float -1.270000e+02), !dbg !126
  %1250 = fcmp uno <4 x float> %1248, zeroinitializer, !dbg !128
  %1251 = or <4 x i1> %1249, %1250, !dbg !129
  %1252 = select <4 x i1> %1251, <4 x float> %1248, <4 x float> splat (float -1.270000e+02), !dbg !130
  %1253 = fcmp olt <4 x float> %1252, splat (float 1.270000e+02), !dbg !131
  %1254 = fcmp uno <4 x float> %1252, zeroinitializer, !dbg !133
  %1255 = or <4 x i1> %1253, %1254, !dbg !134
  %1256 = fptosi <4 x float> %1252 to <4 x i8>, !dbg !135
  %1257 = select <4 x i1> %1255, <4 x i8> %1256, <4 x i8> splat (i8 127), !dbg !136
  %1258 = getelementptr i8, ptr addrspace(1) %8, i64 %866, !dbg !137
  %1259 = bitcast <4 x i8> %1244 to i32, !dbg !138
  %1260 = bitcast <4 x i8> %1257 to i32, !dbg !138
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1259, i32 %1260, ptr addrspace(1) %1258, i1 %19) #5, !dbg !138
  %indvars.iv.next317 = add nuw nsw i64 %indvars.iv316, 2048, !dbg !112
  %1261 = icmp samesign ult i64 %indvars.iv316, 10240, !dbg !112
  br i1 %1261, label %862, label %1262, !dbg !112

1262:                                             ; preds = %__nv_tanhf.exit147
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 76, column: 50, scope: !6)
!40 = !DILocation(line: 34, column: 31, scope: !6)
!41 = !DILocation(line: 39, column: 41, scope: !6)
!42 = !DILocation(line: 39, column: 34, scope: !6)
!43 = !DILocation(line: 39, column: 52, scope: !6)
!44 = !DILocation(line: 40, column: 35, scope: !6)
!45 = !DILocation(line: 40, column: 42, scope: !6)
!46 = !DILocation(line: 41, column: 35, scope: !6)
!47 = !DILocation(line: 41, column: 42, scope: !6)
!48 = !DILocation(line: 42, column: 23, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 40, column: 95, scope: !6)
!51 = !DILocation(line: 41, column: 95, scope: !6)
!52 = !DILocation(line: 55, column: 24, scope: !6)
!53 = !DILocation(line: 56, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 24, scope: !6)
!55 = !DILocation(line: 64, column: 24, scope: !6)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 63, column: 24, scope: !6)
!59 = !DILocation(line: 66, column: 24, scope: !6)
!60 = !DILocation(line: 67, column: 31, scope: !6)
!61 = !{i32 21046}
!62 = !DILocation(line: 69, column: 24, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !64)
!64 = !DILocation(line: 75, column: 47, scope: !6)
!65 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !66)
!66 = !DILocation(line: 73, column: 47, scope: !6)
!67 = !DILocation(line: 70, column: 24, scope: !6)
!68 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !66)
!71 = !DILocation(line: 74, column: 50, scope: !6)
!72 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !64)
!73 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !64)
!74 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !64)
!75 = !DILocation(line: 77, column: 29, scope: !6)
!76 = !DILocation(line: 77, column: 54, scope: !6)
!77 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !78)
!78 = !DILocation(line: 78, column: 40, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !80, inlinedAt: !81)
!80 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!81 = !DILocation(line: 79, column: 40, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !80, inlinedAt: !78)
!83 = !DILocation(line: 96, column: 16, scope: !80, inlinedAt: !78)
!84 = !DILocation(line: 97, column: 29, scope: !80, inlinedAt: !78)
!85 = !DILocation(line: 94, column: 15, scope: !80, inlinedAt: !78)
!86 = !DILocation(line: 80, column: 37, scope: !6)
!87 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !81)
!88 = !DILocation(line: 104, column: 21, scope: !80, inlinedAt: !81)
!89 = !DILocation(line: 104, column: 16, scope: !80, inlinedAt: !81)
!90 = !DILocation(line: 105, column: 29, scope: !80, inlinedAt: !81)
!91 = !DILocation(line: 81, column: 37, scope: !6)
!92 = !DILocation(line: 80, column: 25, scope: !6)
!93 = !DILocation(line: 81, column: 25, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !95)
!95 = !DILocation(line: 104, column: 46, scope: !6)
!96 = !DILocation(line: 105, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !98)
!98 = !DILocation(line: 106, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 107, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 109, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !106)
!106 = !DILocation(line: 112, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !106)
!110 = !DILocation(line: 115, column: 25, scope: !6)
!111 = !DILocation(line: 117, column: 24, scope: !6)
!112 = !DILocation(line: 82, column: 40, scope: !6)
!113 = !DILocation(line: 88, column: 43, scope: !6)
!114 = !DILocation(line: 88, column: 36, scope: !6)
!115 = !DILocation(line: 88, column: 54, scope: !6)
!116 = !DILocation(line: 90, column: 24, scope: !6)
!117 = !DILocation(line: 91, column: 24, scope: !6)
!118 = !DILocation(line: 92, column: 24, scope: !6)
!119 = !DILocation(line: 94, column: 24, scope: !6)
!120 = !DILocation(line: 95, column: 24, scope: !6)
!121 = !DILocation(line: 97, column: 24, scope: !6)
!122 = !DILocation(line: 98, column: 31, scope: !6)
!123 = !DILocation(line: 100, column: 24, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 118, column: 36, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !127)
!127 = !DILocation(line: 121, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !127)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 123, column: 46, scope: !6)
!133 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 125, column: 25, scope: !6)
!136 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !132)
!137 = !DILocation(line: 126, column: 29, scope: !6)
!138 = !DILocation(line: 126, column: 54, scope: !6)
!139 = !DILocation(line: 82, column: 4, scope: !6)
