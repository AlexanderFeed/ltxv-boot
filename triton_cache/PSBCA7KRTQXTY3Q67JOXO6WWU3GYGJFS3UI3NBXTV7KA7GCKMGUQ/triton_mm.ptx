//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	triton_mm               // -- Begin function triton_mm
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_mm
.visible .entry triton_mm(
	.param .u64 .ptr .global .align 1 triton_mm_param_0,
	.param .u64 .ptr .global .align 1 triton_mm_param_1,
	.param .u64 .ptr .global .align 1 triton_mm_param_2,
	.param .u64 .ptr .global .align 1 triton_mm_param_3
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<54>;
	.reg .b16 	%rs<87>;
	.reg .b32 	%r<519>;
	.reg .f32 	%f<450>;
	.reg .b64 	%rd<101>;
	.loc	1 17 0                          // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:17:0
$L__func_begin0:
	.loc	1 17 0                          // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:17:0

// %bb.0:
	ld.param.u64 	%rd11, [triton_mm_param_2];
	ld.param.u64 	%rd25, [triton_mm_param_0];
	ld.param.u64 	%rd26, [triton_mm_param_1];
$L__tmp0:
	.loc	1 40 24                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:40:24
	mov.u32 	%r47, %ctaid.x;
	.loc	1 46 22                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:46:22
	mul.hi.s32 	%r48, %r47, 715827883;
	shr.u32 	%r49, %r48, 31;
	shr.s32 	%r50, %r48, 3;
	add.s32 	%r51, %r50, %r49;
	.loc	1 47 41                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:47:41
	shl.b32 	%r52, %r51, 3;
	.loc	1 47 30                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:47:30
	sub.s32 	%r53, 2, %r52;
	.loc	1 47 50                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:47:50
	min.s32 	%r54, %r53, 8;
	.loc	1 48 40                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:48:40
	rem.s32 	%r55, %r47, %r54;
	.loc	1 48 34                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:48:34
	add.s32 	%r56, %r55, %r52;
	.loc	1 49 19                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:49:19
	mul.lo.s32 	%r57, %r51, 48;
	sub.s32 	%r58, %r47, %r57;
	.loc	1 49 30                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:49:30
	div.s32 	%r59, %r58, %r54;
	.loc	1 51 17                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:51:17
	shl.b32 	%r1, %r56, 6;
	.loc	1 51 40                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:51:40
	mov.u32 	%r2, %tid.x;
	and.b32  	%r3, %r2, 16;
	shr.u32 	%r60, %r2, 2;
	bfe.u32 	%r61, %r2, 2, 5;
	or.b32  	%r62, %r61, 32;
	.loc	1 51 27                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:51:27
	or.b32  	%r63, %r1, %r61;
	or.b32  	%r64, %r1, %r62;
	.loc	1 52 17                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:52:17
	shl.b32 	%r4, %r59, 7;
	.loc	1 52 40                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:52:40
	shl.b32 	%r5, %r2, 3;
	and.b32  	%r65, %r5, 24;
	.loc	1 52 27                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:52:27
	or.b32  	%r66, %r4, %r61;
	or.b32  	%r67, %r4, %r62;
	.loc	1 54 57                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:54:57
	mul.hi.s32 	%r68, %r63, 892460737;
	shr.u32 	%r69, %r68, 31;
	shr.u32 	%r70, %r68, 4;
	add.s32 	%r71, %r70, %r69;
	mul.lo.s32 	%r72, %r71, 77;
	sub.s32 	%r73, %r63, %r72;
	mul.hi.s32 	%r74, %r64, 892460737;
	shr.u32 	%r75, %r74, 31;
	shr.u32 	%r76, %r74, 4;
	add.s32 	%r77, %r76, %r75;
	mul.lo.s32 	%r78, %r77, 77;
	sub.s32 	%r79, %r64, %r78;
	.loc	1 58 57                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:58:57
	mul.hi.s32 	%r80, %r66, 715827883;
	shr.u32 	%r81, %r80, 31;
	shr.u32 	%r82, %r80, 7;
	add.s32 	%r83, %r82, %r81;
	mul.lo.s32 	%r84, %r83, 768;
	sub.s32 	%r85, %r66, %r84;
	cvt.u16.u32 	%rs1, %r67;
	mul.hi.s16 	%rs2, %rs1, 10923;
	shr.u16 	%rs3, %rs2, 15;
	shr.u16 	%rs4, %rs2, 7;
	add.s16 	%rs5, %rs4, %rs3;
	mul.lo.s16 	%rs6, %rs5, 768;
	sub.s16 	%rs7, %rs1, %rs6;
	cvt.u16.u32 	%rs8, %r66;
	or.b16  	%rs9, %rs8, 64;
	mul.hi.s16 	%rs10, %rs9, 10923;
	shr.u16 	%rs11, %rs10, 15;
	shr.u16 	%rs12, %rs10, 7;
	add.s16 	%rs13, %rs12, %rs11;
	mul.lo.s16 	%rs14, %rs13, 768;
	sub.s16 	%rs15, %rs9, %rs14;
	or.b16  	%rs16, %rs8, 96;
	mul.hi.s16 	%rs17, %rs16, 10923;
	shr.u16 	%rs18, %rs17, 15;
	shr.u16 	%rs19, %rs17, 7;
	add.s16 	%rs20, %rs19, %rs18;
	mul.lo.s16 	%rs21, %rs20, 768;
	sub.s16 	%rs22, %rs16, %rs21;
	.loc	1 71 30                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:71:30
	mul.lo.s32 	%r86, %r73, 3072;
	mul.lo.s32 	%r87, %r79, 3072;
	.loc	1 77 55                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:55
	mul.lo.s32 	%r88, %r85, 3072;
	mul.wide.s16 	%r89, %rs7, 3072;
	mul.wide.s16 	%r90, %rs15, 3072;
	mul.wide.s16 	%r91, %rs22, 3072;
	.loc	1 71 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:71:25
	or.b32  	%r92, %r86, %r65;
	or.b32  	%r93, %r87, %r65;
	.loc	1 72 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:25
	mul.wide.s32 	%rd27, %r92, 2;
	add.s64 	%rd12, %rd25, %rd27;
	mul.wide.s32 	%rd28, %r93, 2;
	add.s64 	%rd13, %rd25, %rd28;
	.loc	1 72 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:20
	xor.b32  	%r94, %r5, %r2;
	and.b32  	%r95, %r94, 24;
	shl.b32 	%r96, %r61, 5;
	or.b32  	%r6, %r96, %r95;
	shl.b32 	%r97, %r6, 1;
	mov.u32 	%r98, global_smem;
	add.s32 	%r25, %r98, %r97;
	add.s32 	%r21, %r25, 16384;
	add.s32 	%r23, %r25, 18432;
	mov.b32 	%r22, 16;
	// begin inline asm
	cp.async.cg.shared.global [ %r21 + 0 ], [ %rd12 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r23 + 0 ], [ %rd13 + 0 ], 0x10, %r22;
	// end inline asm
	cp.async.commit_group;
	.loc	1 77 50                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:50
	or.b32  	%r99, %r88, %r65;
	or.b32  	%r100, %r89, %r65;
	or.b32  	%r101, %r90, %r65;
	or.b32  	%r102, %r91, %r65;
	.loc	1 77 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:25
	mul.wide.s32 	%rd29, %r99, 2;
	add.s64 	%rd14, %rd26, %rd29;
	mul.wide.s32 	%rd30, %r100, 2;
	add.s64 	%rd15, %rd26, %rd30;
	mul.wide.s32 	%rd31, %r101, 2;
	add.s64 	%rd16, %rd26, %rd31;
	mul.wide.s32 	%rd32, %r102, 2;
	add.s64 	%rd17, %rd26, %rd32;
	.loc	1 77 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:20
	add.s32 	%r27, %r25, 2048;
	add.s32 	%r29, %r25, 4096;
	add.s32 	%r31, %r25, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r25 + 0 ], [ %rd14 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r27 + 0 ], [ %rd15 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r29 + 0 ], [ %rd16 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r31 + 0 ], [ %rd17 + 0 ], 0x10, %r22;
	// end inline asm
	cp.async.commit_group;
	.loc	1 72 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:25
	cvt.s64.s32 	%rd33, %r86;
	cvt.u64.u32 	%rd34, %r65;
	or.b64  	%rd35, %rd33, %rd34;
	shl.b64 	%rd36, %rd35, 1;
	add.s64 	%rd37, %rd25, %rd36;
	add.s64 	%rd18, %rd37, 64;
	cvt.s64.s32 	%rd38, %r87;
	or.b64  	%rd39, %rd38, %rd34;
	shl.b64 	%rd40, %rd39, 1;
	add.s64 	%rd41, %rd25, %rd40;
	add.s64 	%rd19, %rd41, 64;
	.loc	1 72 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:20
	bar.sync 	0;
	add.s32 	%r33, %r25, 20480;
	add.s32 	%r35, %r25, 22528;
	// begin inline asm
	cp.async.cg.shared.global [ %r33 + 0 ], [ %rd18 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r35 + 0 ], [ %rd19 + 0 ], 0x10, %r22;
	// end inline asm
	cp.async.commit_group;
	.loc	1 77 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:25
	cvt.s64.s32 	%rd42, %r88;
	or.b64  	%rd43, %rd42, %rd34;
	shl.b64 	%rd44, %rd43, 1;
	add.s64 	%rd45, %rd26, %rd44;
	add.s64 	%rd20, %rd45, 64;
	cvt.s64.s32 	%rd46, %r89;
	or.b64  	%rd47, %rd46, %rd34;
	shl.b64 	%rd48, %rd47, 1;
	add.s64 	%rd49, %rd26, %rd48;
	add.s64 	%rd21, %rd49, 64;
	cvt.s64.s32 	%rd50, %r90;
	or.b64  	%rd51, %rd50, %rd34;
	shl.b64 	%rd52, %rd51, 1;
	add.s64 	%rd53, %rd26, %rd52;
	add.s64 	%rd22, %rd53, 64;
	cvt.s64.s32 	%rd54, %r91;
	or.b64  	%rd55, %rd54, %rd34;
	shl.b64 	%rd56, %rd55, 1;
	add.s64 	%rd57, %rd26, %rd56;
	add.s64 	%rd23, %rd57, 64;
	.loc	1 77 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:20
	add.s32 	%r37, %r25, 8192;
	add.s32 	%r39, %r25, 10240;
	add.s32 	%r41, %r25, 12288;
	add.s32 	%r43, %r25, 14336;
	// begin inline asm
	cp.async.cg.shared.global [ %r37 + 0 ], [ %rd20 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r39 + 0 ], [ %rd21 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r41 + 0 ], [ %rd22 + 0 ], 0x10, %r22;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r43 + 0 ], [ %rd23 + 0 ], 0x10, %r22;
	// end inline asm
	cp.async.commit_group;
	.loc	1 64 26                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:64:26
	and.b32  	%r103, %r2, 15;
	shl.b32 	%r104, %r2, 2;
	and.b32  	%r105, %r104, 8;
	and.b32  	%r106, %r104, 16;
	and.b32  	%r107, %r104, 24;
	and.b32  	%r108, %r2, 7;
	shr.u32 	%r109, %r3, 1;
	xor.b32  	%r7, %r107, %r109;
	shl.b32 	%r8, %r2, 5;
	and.b32  	%r9, %r8, 480;
	or.b32  	%r10, %r7, %r9;
	or.b32  	%r110, %r105, 16;
	or.b32  	%r111, %r109, %r106;
	xor.b32  	%r11, %r111, %r110;
	or.b32  	%r12, %r11, %r9;
	shl.b32 	%r112, %r103, 5;
	or.b32  	%r113, %r112, 1024;
	or.b32  	%r13, %r7, %r113;
	or.b32  	%r14, %r11, %r113;
	xor.b32  	%r114, %r104, %r2;
	and.b32  	%r115, %r114, 24;
	and.b32  	%r15, %r60, 24;
	or.b32  	%r116, %r15, %r108;
	shl.b32 	%r117, %r116, 5;
	or.b32  	%r16, %r117, %r115;
	and.b32  	%r118, %r2, 3;
	mul.wide.u32 	%rd58, %r118, 16;
	mul.wide.s32 	%rd59, %r91, 2;
	or.b64  	%rd60, %rd58, %rd59;
	add.s64 	%rd61, %rd60, %rd26;
	add.s64 	%rd1, %rd61, 128;
	mul.wide.s32 	%rd62, %r90, 2;
	or.b64  	%rd63, %rd58, %rd62;
	add.s64 	%rd64, %rd63, %rd26;
	add.s64 	%rd2, %rd64, 128;
	mul.wide.s32 	%rd65, %r89, 2;
	or.b64  	%rd66, %rd58, %rd65;
	add.s64 	%rd67, %rd66, %rd26;
	add.s64 	%rd3, %rd67, 128;
	mul.wide.s32 	%rd68, %r88, 2;
	or.b64  	%rd69, %rd58, %rd68;
	add.s64 	%rd70, %rd69, %rd26;
	add.s64 	%rd4, %rd70, 128;
	mul.wide.s32 	%rd71, %r87, 2;
	or.b64  	%rd72, %rd58, %rd71;
	add.s64 	%rd73, %rd72, %rd25;
	add.s64 	%rd5, %rd73, 128;
	mul.wide.s32 	%rd74, %r86, 2;
	or.b64  	%rd75, %rd58, %rd74;
	add.s64 	%rd76, %rd75, %rd25;
	add.s64 	%rd6, %rd76, 128;
	mov.f32 	%f386, 0f00000000;
	mov.b32 	%r518, 1;
	mov.b32 	%r517, -1;
	mov.b64 	%rd99, 0;
	shl.b32 	%r388, %r10, 1;
	shl.b32 	%r389, %r12, 1;
	shl.b32 	%r396, %r13, 1;
	shl.b32 	%r397, %r14, 1;
	shl.b32 	%r400, %r16, 1;
	mov.u64 	%rd100, %rd99;
	mov.f32 	%f387, %f386;
	mov.f32 	%f388, %f386;
	mov.f32 	%f389, %f386;
	mov.f32 	%f390, %f386;
	mov.f32 	%f391, %f386;
	mov.f32 	%f392, %f386;
	mov.f32 	%f393, %f386;
	mov.f32 	%f394, %f386;
	mov.f32 	%f395, %f386;
	mov.f32 	%f396, %f386;
	mov.f32 	%f397, %f386;
	mov.f32 	%f398, %f386;
	mov.f32 	%f399, %f386;
	mov.f32 	%f400, %f386;
	mov.f32 	%f401, %f386;
	mov.f32 	%f402, %f386;
	mov.f32 	%f403, %f386;
	mov.f32 	%f404, %f386;
	mov.f32 	%f405, %f386;
	mov.f32 	%f406, %f386;
	mov.f32 	%f407, %f386;
	mov.f32 	%f408, %f386;
	mov.f32 	%f409, %f386;
	mov.f32 	%f410, %f386;
	mov.f32 	%f411, %f386;
	mov.f32 	%f412, %f386;
	mov.f32 	%f413, %f386;
	mov.f32 	%f414, %f386;
	mov.f32 	%f415, %f386;
	mov.f32 	%f416, %f386;
	mov.f32 	%f417, %f386;
	mov.f32 	%f418, %f386;
	mov.f32 	%f419, %f386;
	mov.f32 	%f420, %f386;
	mov.f32 	%f421, %f386;
	mov.f32 	%f422, %f386;
	mov.f32 	%f423, %f386;
	mov.f32 	%f424, %f386;
	mov.f32 	%f425, %f386;
	mov.f32 	%f426, %f386;
	mov.f32 	%f427, %f386;
	mov.f32 	%f428, %f386;
	mov.f32 	%f429, %f386;
	mov.f32 	%f430, %f386;
	mov.f32 	%f431, %f386;
	mov.f32 	%f432, %f386;
	mov.f32 	%f433, %f386;
	mov.f32 	%f434, %f386;
	mov.f32 	%f435, %f386;
	mov.f32 	%f436, %f386;
	mov.f32 	%f437, %f386;
	mov.f32 	%f438, %f386;
	mov.f32 	%f439, %f386;
	mov.f32 	%f440, %f386;
	mov.f32 	%f441, %f386;
	mov.f32 	%f442, %f386;
	mov.f32 	%f443, %f386;
	mov.f32 	%f444, %f386;
	mov.f32 	%f445, %f386;
	mov.f32 	%f446, %f386;
	mov.f32 	%f447, %f386;
	mov.f32 	%f448, %f386;
	mov.f32 	%f449, %f386;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	setp.lt.u64 	%p1, %rd100, 94;
	add.s32 	%r383, %r517, 1;
	setp.lt.s32 	%p2, %r383, 2;
	selp.b32 	%r517, %r383, 0, %p2;
	.loc	1 72 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:20
	cp.async.wait_group 2;
	bar.sync 	0;
	shl.b32 	%r384, %r517, 12;
	add.s32 	%r386, %r98, 16384;
	add.s32 	%r387, %r386, %r384;
	add.s32 	%r123, %r387, %r388;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r179, %r180, %r181, %r182}, [%r123];
	// end inline asm
	add.s32 	%r128, %r387, %r389;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r275, %r276, %r277, %r278}, [%r128];
	// end inline asm
	add.s32 	%r390, %r7, %r9;
	shl.b32 	%r391, %r390, 1;
	add.s32 	%r392, %r387, %r391;
	add.s32 	%r133, %r392, 1024;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r203, %r204, %r205, %r206}, [%r133];
	// end inline asm
	add.s32 	%r393, %r11, %r9;
	shl.b32 	%r394, %r393, 1;
	add.s32 	%r395, %r387, %r394;
	add.s32 	%r138, %r395, 1024;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r299, %r300, %r301, %r302}, [%r138];
	// end inline asm
	add.s32 	%r143, %r387, %r396;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r227, %r228, %r229, %r230}, [%r143];
	// end inline asm
	add.s32 	%r148, %r387, %r397;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r323, %r324, %r325, %r326}, [%r148];
	// end inline asm
	add.s32 	%r153, %r392, 3072;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r251, %r252, %r253, %r254}, [%r153];
	// end inline asm
	add.s32 	%r158, %r395, 3072;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r347, %r348, %r349, %r350}, [%r158];
	// end inline asm
	.loc	1 77 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:20
	shl.b32 	%r398, %r517, 13;
	add.s32 	%r399, %r98, %r398;
	add.s32 	%r163, %r399, %r400;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r183, %r184, %r279, %r280}, [%r163];
	// end inline asm
	add.s32 	%r168, %r163, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r189, %r190, %r285, %r286}, [%r168];
	// end inline asm
	add.s32 	%r173, %r163, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r195, %r196, %r291, %r292}, [%r173];
	// end inline asm
	add.s32 	%r178, %r163, 6144;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r201, %r202, %r297, %r298}, [%r178];
	// end inline asm
	.loc	1 78 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:78:25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f386, %f387, %f388, %f389 }, { %r179, %r180, %r181, %r182 }, { %r183, %r184 }, { %f386, %f387, %f388, %f389 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f390, %f391, %f392, %f393 }, { %r179, %r180, %r181, %r182 }, { %r189, %r190 }, { %f390, %f391, %f392, %f393 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f394, %f395, %f396, %f397 }, { %r179, %r180, %r181, %r182 }, { %r195, %r196 }, { %f394, %f395, %f396, %f397 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f398, %f399, %f400, %f401 }, { %r179, %r180, %r181, %r182 }, { %r201, %r202 }, { %f398, %f399, %f400, %f401 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f402, %f403, %f404, %f405 }, { %r203, %r204, %r205, %r206 }, { %r183, %r184 }, { %f402, %f403, %f404, %f405 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f406, %f407, %f408, %f409 }, { %r203, %r204, %r205, %r206 }, { %r189, %r190 }, { %f406, %f407, %f408, %f409 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f410, %f411, %f412, %f413 }, { %r203, %r204, %r205, %r206 }, { %r195, %r196 }, { %f410, %f411, %f412, %f413 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f414, %f415, %f416, %f417 }, { %r203, %r204, %r205, %r206 }, { %r201, %r202 }, { %f414, %f415, %f416, %f417 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f418, %f419, %f420, %f421 }, { %r227, %r228, %r229, %r230 }, { %r183, %r184 }, { %f418, %f419, %f420, %f421 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f422, %f423, %f424, %f425 }, { %r227, %r228, %r229, %r230 }, { %r189, %r190 }, { %f422, %f423, %f424, %f425 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f426, %f427, %f428, %f429 }, { %r227, %r228, %r229, %r230 }, { %r195, %r196 }, { %f426, %f427, %f428, %f429 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f430, %f431, %f432, %f433 }, { %r227, %r228, %r229, %r230 }, { %r201, %r202 }, { %f430, %f431, %f432, %f433 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f434, %f435, %f436, %f437 }, { %r251, %r252, %r253, %r254 }, { %r183, %r184 }, { %f434, %f435, %f436, %f437 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f438, %f439, %f440, %f441 }, { %r251, %r252, %r253, %r254 }, { %r189, %r190 }, { %f438, %f439, %f440, %f441 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f442, %f443, %f444, %f445 }, { %r251, %r252, %r253, %r254 }, { %r195, %r196 }, { %f442, %f443, %f444, %f445 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f446, %f447, %f448, %f449 }, { %r251, %r252, %r253, %r254 }, { %r201, %r202 }, { %f446, %f447, %f448, %f449 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f386, %f387, %f388, %f389 }, { %r275, %r276, %r277, %r278 }, { %r279, %r280 }, { %f386, %f387, %f388, %f389 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f390, %f391, %f392, %f393 }, { %r275, %r276, %r277, %r278 }, { %r285, %r286 }, { %f390, %f391, %f392, %f393 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f394, %f395, %f396, %f397 }, { %r275, %r276, %r277, %r278 }, { %r291, %r292 }, { %f394, %f395, %f396, %f397 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f398, %f399, %f400, %f401 }, { %r275, %r276, %r277, %r278 }, { %r297, %r298 }, { %f398, %f399, %f400, %f401 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f402, %f403, %f404, %f405 }, { %r299, %r300, %r301, %r302 }, { %r279, %r280 }, { %f402, %f403, %f404, %f405 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f406, %f407, %f408, %f409 }, { %r299, %r300, %r301, %r302 }, { %r285, %r286 }, { %f406, %f407, %f408, %f409 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f410, %f411, %f412, %f413 }, { %r299, %r300, %r301, %r302 }, { %r291, %r292 }, { %f410, %f411, %f412, %f413 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f414, %f415, %f416, %f417 }, { %r299, %r300, %r301, %r302 }, { %r297, %r298 }, { %f414, %f415, %f416, %f417 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f418, %f419, %f420, %f421 }, { %r323, %r324, %r325, %r326 }, { %r279, %r280 }, { %f418, %f419, %f420, %f421 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f422, %f423, %f424, %f425 }, { %r323, %r324, %r325, %r326 }, { %r285, %r286 }, { %f422, %f423, %f424, %f425 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f426, %f427, %f428, %f429 }, { %r323, %r324, %r325, %r326 }, { %r291, %r292 }, { %f426, %f427, %f428, %f429 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f430, %f431, %f432, %f433 }, { %r323, %r324, %r325, %r326 }, { %r297, %r298 }, { %f430, %f431, %f432, %f433 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f434, %f435, %f436, %f437 }, { %r347, %r348, %r349, %r350 }, { %r279, %r280 }, { %f434, %f435, %f436, %f437 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f438, %f439, %f440, %f441 }, { %r347, %r348, %r349, %r350 }, { %r285, %r286 }, { %f438, %f439, %f440, %f441 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f442, %f443, %f444, %f445 }, { %r347, %r348, %r349, %r350 }, { %r291, %r292 }, { %f442, %f443, %f444, %f445 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f446, %f447, %f448, %f449 }, { %r347, %r348, %r349, %r350 }, { %r297, %r298 }, { %f446, %f447, %f448, %f449 };
	// end inline asm
	.loc	1 64 26                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:64:26
	add.s32 	%r401, %r518, 1;
	setp.lt.s32 	%p3, %r401, 2;
	selp.b32 	%r518, %r401, 0, %p3;
	.loc	1 72 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:25
	add.s64 	%rd77, %rd6, %rd99;
	.loc	1 72 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:72:20
	add.s64 	%rd78, %rd5, %rd99;
	shl.b32 	%r402, %r518, 12;
	add.s32 	%r403, %r386, %r402;
	bar.sync 	0;
	add.s32 	%r371, %r403, %r97;
	add.s32 	%r373, %r371, 2048;
	selp.b32 	%r372, 16, 0, %p1;
	// begin inline asm
	cp.async.cg.shared.global [ %r371 + 0 ], [ %rd77 + 0 ], 0x10, %r372;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r373 + 0 ], [ %rd78 + 0 ], 0x10, %r372;
	// end inline asm
	cp.async.commit_group;
	.loc	1 77 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:25
	add.s64 	%rd79, %rd4, %rd99;
	add.s64 	%rd80, %rd3, %rd99;
	add.s64 	%rd81, %rd2, %rd99;
	.loc	1 77 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:77:20
	add.s64 	%rd82, %rd1, %rd99;
	shl.b32 	%r405, %r518, 13;
	add.s32 	%r406, %r98, %r405;
	add.s32 	%r375, %r406, %r97;
	add.s32 	%r377, %r375, 2048;
	add.s32 	%r379, %r375, 4096;
	add.s32 	%r381, %r375, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r375 + 0 ], [ %rd79 + 0 ], 0x10, %r372;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r377 + 0 ], [ %rd80 + 0 ], 0x10, %r372;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r379 + 0 ], [ %rd81 + 0 ], 0x10, %r372;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r381 + 0 ], [ %rd82 + 0 ], 0x10, %r372;
	// end inline asm
	cp.async.commit_group;
	.loc	1 64 26                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:64:26
	add.s64 	%rd100, %rd100, 1;
	add.s64 	%rd99, %rd99, 64;
	setp.ne.s64 	%p4, %rd99, 6144;
	@%p4 bra 	$L__BB0_1;
// %bb.2:
	.loc	1 52 40                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:52:40
	and.b32  	%r471, %r5, 120;
	.loc	1 52 27                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:52:27
	or.b32  	%r472, %r4, %r471;
	.loc	1 51 40                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:51:40
	bfe.u32 	%r473, %r2, 4, 3;
	.loc	1 51 27                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:51:27
	or.b32  	%r474, %r473, %r1;
	or.b32  	%r475, %r474, 56;
	or.b32  	%r476, %r474, 48;
	or.b32  	%r477, %r474, 40;
	or.b32  	%r478, %r474, 32;
	or.b32  	%r479, %r474, 24;
	or.b32  	%r480, %r474, 16;
	or.b32  	%r481, %r474, 8;
	.loc	1 64 26                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:64:26
	cp.async.wait_group 0;
	bar.sync 	0;
	.loc	1 85 20                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:85:20
	setp.lt.s32 	%p45, %r474, 77;
	setp.lt.s32 	%p46, %r481, 77;
	setp.lt.s32 	%p47, %r480, 77;
	setp.lt.s32 	%p48, %r479, 77;
	setp.lt.s32 	%p49, %r478, 77;
	setp.lt.s32 	%p50, %r477, 77;
	setp.lt.s32 	%p51, %r476, 77;
	setp.lt.s32 	%p52, %r475, 77;
	.loc	1 85 34                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:85:34
	setp.lt.s32 	%p53, %r472, 768;
	.loc	1 85 26                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:85:26
	and.pred  	%p37, %p45, %p53;
	and.pred  	%p38, %p46, %p53;
	and.pred  	%p39, %p47, %p53;
	and.pred  	%p40, %p48, %p53;
	and.pred  	%p41, %p49, %p53;
	and.pred  	%p42, %p50, %p53;
	and.pred  	%p43, %p51, %p53;
	and.pred  	%p44, %p52, %p53;
	.loc	1 88 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:88:25
	mad.lo.s32 	%r482, %r474, 768, %r472;
	add.s32 	%r483, %r482, 6144;
	add.s32 	%r484, %r482, 12288;
	add.s32 	%r485, %r482, 18432;
	add.s32 	%r486, %r482, 24576;
	add.s32 	%r487, %r482, 30720;
	add.s32 	%r488, %r482, 36864;
	.loc	1 88 21                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:88:21
	add.s32 	%r489, %r482, 43008;
	.loc	1 89 25                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:89:25
	mul.wide.s32 	%rd91, %r482, 2;
	add.s64 	%rd83, %rd11, %rd91;
	mul.wide.s32 	%rd92, %r483, 2;
	add.s64 	%rd84, %rd11, %rd92;
	mul.wide.s32 	%rd93, %r484, 2;
	add.s64 	%rd85, %rd11, %rd93;
	mul.wide.s32 	%rd94, %r485, 2;
	add.s64 	%rd86, %rd11, %rd94;
	mul.wide.s32 	%rd95, %r486, 2;
	add.s64 	%rd87, %rd11, %rd95;
	mul.wide.s32 	%rd96, %r487, 2;
	add.s64 	%rd88, %rd11, %rd96;
	mul.wide.s32 	%rd97, %r488, 2;
	add.s64 	%rd89, %rd11, %rd97;
	mul.wide.s32 	%rd98, %r489, 2;
	add.s64 	%rd90, %rd11, %rd98;
	.loc	1 89 67                         // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:89:67
	cvt.rn.bf16.f32 	%rs23, %f386;
	cvt.rn.bf16.f32 	%rs24, %f387;
	cvt.rn.bf16.f32 	%rs25, %f388;
	cvt.rn.bf16.f32 	%rs26, %f389;
	cvt.rn.bf16.f32 	%rs27, %f390;
	cvt.rn.bf16.f32 	%rs28, %f391;
	cvt.rn.bf16.f32 	%rs29, %f392;
	cvt.rn.bf16.f32 	%rs30, %f393;
	cvt.rn.bf16.f32 	%rs31, %f394;
	cvt.rn.bf16.f32 	%rs32, %f395;
	cvt.rn.bf16.f32 	%rs33, %f396;
	cvt.rn.bf16.f32 	%rs34, %f397;
	cvt.rn.bf16.f32 	%rs35, %f398;
	cvt.rn.bf16.f32 	%rs36, %f399;
	cvt.rn.bf16.f32 	%rs37, %f400;
	cvt.rn.bf16.f32 	%rs38, %f401;
	cvt.rn.bf16.f32 	%rs39, %f402;
	cvt.rn.bf16.f32 	%rs40, %f403;
	cvt.rn.bf16.f32 	%rs41, %f404;
	cvt.rn.bf16.f32 	%rs42, %f405;
	cvt.rn.bf16.f32 	%rs43, %f406;
	cvt.rn.bf16.f32 	%rs44, %f407;
	cvt.rn.bf16.f32 	%rs45, %f408;
	cvt.rn.bf16.f32 	%rs46, %f409;
	cvt.rn.bf16.f32 	%rs47, %f410;
	cvt.rn.bf16.f32 	%rs48, %f411;
	cvt.rn.bf16.f32 	%rs49, %f412;
	cvt.rn.bf16.f32 	%rs50, %f413;
	cvt.rn.bf16.f32 	%rs51, %f414;
	cvt.rn.bf16.f32 	%rs52, %f415;
	cvt.rn.bf16.f32 	%rs53, %f416;
	cvt.rn.bf16.f32 	%rs54, %f417;
	cvt.rn.bf16.f32 	%rs55, %f418;
	cvt.rn.bf16.f32 	%rs56, %f419;
	cvt.rn.bf16.f32 	%rs57, %f420;
	cvt.rn.bf16.f32 	%rs58, %f421;
	cvt.rn.bf16.f32 	%rs59, %f422;
	cvt.rn.bf16.f32 	%rs60, %f423;
	cvt.rn.bf16.f32 	%rs61, %f424;
	cvt.rn.bf16.f32 	%rs62, %f425;
	cvt.rn.bf16.f32 	%rs63, %f426;
	cvt.rn.bf16.f32 	%rs64, %f427;
	cvt.rn.bf16.f32 	%rs65, %f428;
	cvt.rn.bf16.f32 	%rs66, %f429;
	cvt.rn.bf16.f32 	%rs67, %f430;
	cvt.rn.bf16.f32 	%rs68, %f431;
	cvt.rn.bf16.f32 	%rs69, %f432;
	cvt.rn.bf16.f32 	%rs70, %f433;
	cvt.rn.bf16.f32 	%rs71, %f434;
	cvt.rn.bf16.f32 	%rs72, %f435;
	cvt.rn.bf16.f32 	%rs73, %f436;
	cvt.rn.bf16.f32 	%rs74, %f437;
	cvt.rn.bf16.f32 	%rs75, %f438;
	cvt.rn.bf16.f32 	%rs76, %f439;
	cvt.rn.bf16.f32 	%rs77, %f440;
	cvt.rn.bf16.f32 	%rs78, %f441;
	cvt.rn.bf16.f32 	%rs79, %f442;
	cvt.rn.bf16.f32 	%rs80, %f443;
	cvt.rn.bf16.f32 	%rs81, %f444;
	cvt.rn.bf16.f32 	%rs82, %f445;
	cvt.rn.bf16.f32 	%rs83, %f446;
	cvt.rn.bf16.f32 	%rs84, %f447;
	cvt.rn.bf16.f32 	%rs85, %f448;
	cvt.rn.bf16.f32 	%rs86, %f449;
	shl.b32 	%r490, %r2, 1;
	and.b32  	%r491, %r490, 6;
	and.b32  	%r492, %r8, 384;
	or.b32  	%r493, %r492, %r491;
	shl.b32 	%r494, %r3, 5;
	or.b32  	%r495, %r493, %r494;
	or.b32  	%r496, %r15, %r495;
	and.b32  	%r497, %r5, 1016;
	shr.u32 	%r498, %r495, 3;
	add.s32 	%r500, %r98, %r498;
	shl.b32 	%r501, %r496, 1;
	add.s32 	%r407, %r500, %r501;
	mov.pred 	%p5, -1;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r407 + 0 ], { %rs23, %rs24 };
	// end inline asm
	or.b32  	%r502, %r495, 1024;
	shr.u32 	%r503, %r502, 3;
	and.b32  	%r504, %r503, 240;
	add.s32 	%r505, %r98, %r504;
	add.s32 	%r506, %r505, %r501;
	add.s32 	%r408, %r506, 2048;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r408 + 0 ], { %rs25, %rs26 };
	// end inline asm
	add.s32 	%r409, %r407, 64;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r409 + 0 ], { %rs27, %rs28 };
	// end inline asm
	add.s32 	%r410, %r506, 2112;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r410 + 0 ], { %rs29, %rs30 };
	// end inline asm
	add.s32 	%r411, %r407, 128;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r411 + 0 ], { %rs31, %rs32 };
	// end inline asm
	add.s32 	%r412, %r506, 2176;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r412 + 0 ], { %rs33, %rs34 };
	// end inline asm
	add.s32 	%r413, %r407, 192;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r413 + 0 ], { %rs35, %rs36 };
	// end inline asm
	add.s32 	%r414, %r506, 2240;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r414 + 0 ], { %rs37, %rs38 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r507, %r5, 3;
	and.b32  	%r508, %r507, 112;
	add.s32 	%r509, %r98, %r508;
	shl.b32 	%r510, %r497, 1;
	add.s32 	%r511, %r509, %r510;
	ld.shared.v4.u32 	{%r439, %r440, %r441, %r442}, [%r511];
	or.b32  	%r512, %r497, 1024;
	shr.u32 	%r513, %r512, 3;
	and.b32  	%r514, %r513, 240;
	add.s32 	%r515, %r98, %r514;
	add.s32 	%r516, %r515, %r510;
	ld.shared.v4.u32 	{%r443, %r444, %r445, %r446}, [%r516+2048];
	bar.sync 	0;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r407 + 0 ], { %rs39, %rs40 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r408 + 0 ], { %rs41, %rs42 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r409 + 0 ], { %rs43, %rs44 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r410 + 0 ], { %rs45, %rs46 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r411 + 0 ], { %rs47, %rs48 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r412 + 0 ], { %rs49, %rs50 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r413 + 0 ], { %rs51, %rs52 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r414 + 0 ], { %rs53, %rs54 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r447, %r448, %r449, %r450}, [%r511];
	ld.shared.v4.u32 	{%r451, %r452, %r453, %r454}, [%r516+2048];
	bar.sync 	0;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r407 + 0 ], { %rs55, %rs56 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r408 + 0 ], { %rs57, %rs58 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r409 + 0 ], { %rs59, %rs60 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r410 + 0 ], { %rs61, %rs62 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r411 + 0 ], { %rs63, %rs64 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r412 + 0 ], { %rs65, %rs66 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r413 + 0 ], { %rs67, %rs68 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r414 + 0 ], { %rs69, %rs70 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r455, %r456, %r457, %r458}, [%r511];
	ld.shared.v4.u32 	{%r459, %r460, %r461, %r462}, [%r516+2048];
	bar.sync 	0;
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r407 + 0 ], { %rs71, %rs72 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r408 + 0 ], { %rs73, %rs74 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r409 + 0 ], { %rs75, %rs76 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r410 + 0 ], { %rs77, %rs78 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r411 + 0 ], { %rs79, %rs80 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r412 + 0 ], { %rs81, %rs82 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r413 + 0 ], { %rs83, %rs84 };
	// end inline asm
	// begin inline asm
	@%p5 st.shared.v2.b16 [ %r414 + 0 ], { %rs85, %rs86 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r463, %r464, %r465, %r466}, [%r511];
	ld.shared.v4.u32 	{%r467, %r468, %r469, %r470}, [%r516+2048];
	// begin inline asm
	@%p37 st.global.v4.b32 [ %rd83 + 0 ], { %r439, %r440, %r441, %r442 };
	// end inline asm
	// begin inline asm
	@%p38 st.global.v4.b32 [ %rd84 + 0 ], { %r443, %r444, %r445, %r446 };
	// end inline asm
	// begin inline asm
	@%p39 st.global.v4.b32 [ %rd85 + 0 ], { %r447, %r448, %r449, %r450 };
	// end inline asm
	// begin inline asm
	@%p40 st.global.v4.b32 [ %rd86 + 0 ], { %r451, %r452, %r453, %r454 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd87 + 0 ], { %r455, %r456, %r457, %r458 };
	// end inline asm
	// begin inline asm
	@%p42 st.global.v4.b32 [ %rd88 + 0 ], { %r459, %r460, %r461, %r462 };
	// end inline asm
	// begin inline asm
	@%p43 st.global.v4.b32 [ %rd89 + 0 ], { %r463, %r464, %r465, %r466 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd90 + 0 ], { %r467, %r468, %r469, %r470 };
	// end inline asm
	.loc	1 89 4                          // cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py:89:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/tmp/torchinductor_root/jd/cjdw4cvjgci34i7vh3oanwkv5p7lzbzawmwdcfpxsrpr2gmahjvq.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 104                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x61 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 106
.b8 100
.b8 119
.b8 52
.b8 99
.b8 118
.b8 106
.b8 103
.b8 99
.b8 105
.b8 51
.b8 52
.b8 105
.b8 55
.b8 118
.b8 104
.b8 51
.b8 111
.b8 97
.b8 110
.b8 119
.b8 107
.b8 118
.b8 53
.b8 112
.b8 55
.b8 108
.b8 122
.b8 98
.b8 122
.b8 97
.b8 119
.b8 109
.b8 119
.b8 100
.b8 99
.b8 102
.b8 112
.b8 120
.b8 115
.b8 114
.b8 112
.b8 114
.b8 50
.b8 103
.b8 109
.b8 97
.b8 104
.b8 106
.b8 118
.b8 113
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 116
.b8 109
.b8 112
.b8 47
.b8 116
.b8 111
.b8 114
.b8 99
.b8 104
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 106
.b8 100
.b8 0
	}
	.section	.debug_macinfo	{	}
