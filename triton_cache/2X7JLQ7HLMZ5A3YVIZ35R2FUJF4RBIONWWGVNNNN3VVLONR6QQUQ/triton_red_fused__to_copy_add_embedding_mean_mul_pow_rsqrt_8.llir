; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 5, !dbg !13
  %15 = lshr i32 %13, 6, !dbg !13
  %16 = and i32 %15, 7, !dbg !13
  %17 = or disjoint i32 %16, %12, !dbg !14
  %18 = or disjoint i32 %12, 2, !dbg !14
  %19 = or disjoint i32 %12, 4, !dbg !14
  %20 = or disjoint i32 %12, 6, !dbg !14
  %21 = icmp slt i32 %17, 512, !dbg !15
  %22 = icmp slt i32 %12, 512, !dbg !15
  %23 = and i32 %13, 31, !dbg !16
  %24 = shl i32 %13, 3, !dbg !16
  %25 = and i32 %24, 504, !dbg !16
  %26 = and i32 %13, 511, !dbg !16
  %27 = sext i32 %17 to i64, !dbg !17
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = sext i32 %12 to i64, !dbg !17
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = sext i32 %18 to i64, !dbg !17
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = sext i32 %19 to i64, !dbg !17
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = sext i32 %20 to i64, !dbg !17
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !17
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %21) #6, !dbg !18
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 %22) #6, !dbg !18
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !18
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !18
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 %22) #6, !dbg !18
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !18
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !18
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 %22) #6, !dbg !18
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !18
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !18
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 %22) #6, !dbg !18
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !18
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !18
  %57 = shl i32 %17, 12, !dbg !19
  %58 = icmp slt i64 %44, 0, !dbg !20
  %59 = insertelement <8 x i64> poison, i64 %56, i64 0, !dbg !21
  %60 = insertelement <8 x i64> %59, i64 %55, i64 1, !dbg !21
  %61 = insertelement <8 x i64> %60, i64 %53, i64 2, !dbg !21
  %62 = insertelement <8 x i64> %61, i64 %52, i64 3, !dbg !21
  %63 = insertelement <8 x i64> %62, i64 %50, i64 4, !dbg !21
  %64 = insertelement <8 x i64> %63, i64 %49, i64 5, !dbg !21
  %65 = insertelement <8 x i64> %64, i64 %47, i64 6, !dbg !21
  %66 = insertelement <8 x i64> %65, i64 %46, i64 7, !dbg !21
  %67 = add <8 x i64> %66, splat (i64 32128), !dbg !21
  %68 = icmp slt <8 x i64> %66, zeroinitializer, !dbg !20
  %69 = select <8 x i1> %68, <8 x i64> %67, <8 x i64> %66, !dbg !22
  %70 = icmp ugt <8 x i64> %69, splat (i64 32127), !dbg !23
  %71 = shl i64 %44, 12, !dbg !24
  %72 = add i64 %71, 131596288, !dbg !24
  %73 = select i1 %58, i64 %72, i64 %71, !dbg !24
  %invariant.op = or disjoint i32 %25, %57, !dbg !25
  %74 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %75 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %76 = or <8 x i1> %74, %75, !dbg !25
  %77 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %78 = or <8 x i1> %76, %77, !dbg !25
  %79 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %80 = or <8 x i1> %78, %79, !dbg !25
  %81 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %shift77 = or <8 x i1> %80, %81, !dbg !25
  %82 = or <8 x i1> %shift77, %70, !dbg !25
  %83 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %84 = shufflevector <8 x i1> %70, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %shift79 = or <8 x i1> %83, %84
  %85 = or <8 x i1> %shift79, %82
  %.reass50 = extractelement <8 x i1> %85, i64 0
  %86 = and i1 %22, %.reass50
  %87 = zext nneg i32 %25 to i64, !dbg !25
  %88 = or disjoint i64 %73, %87
  %89 = insertelement <8 x i1> poison, i1 %21, i64 0, !dbg !26
  %90 = shufflevector <8 x i1> %89, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !26
  br label %91, !dbg !25

91:                                               ; preds = %10, %102
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %102 ]
  %92 = phi <8 x float> [ zeroinitializer, %10 ], [ %180, %102 ]
  %93 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %93
  %94 = sext i32 %.reass to i64, !dbg !27
  %95 = getelementptr bfloat, ptr addrspace(1) %0, i64 %94, !dbg !27
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %95, i1 %21) #6, !dbg !28
  %97 = getelementptr bfloat, ptr addrspace(1) %3, i64 %94, !dbg !29
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %97, i1 %21) #6, !dbg !30
  %99 = getelementptr bfloat, ptr addrspace(1) %4, i64 %94, !dbg !31
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %99, i1 %21) #6, !dbg !32
  br i1 %86, label %101, label %102, !dbg !33

101:                                              ; preds = %91
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !33
  unreachable, !dbg !33

102:                                              ; preds = %91
  %103 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !32
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !32
  %105 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !32
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !32
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !32
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !32
  %111 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !30
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !30
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !30
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !30
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %127 = or i64 %88, %indvars.iv, !dbg !34
  %128 = getelementptr bfloat, ptr addrspace(1) %2, i64 %127, !dbg !35
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %128, i1 %21) #6, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !36
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !36
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !36
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !36
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !36
  %138 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !37
  %139 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !38
  %140 = fpext <2 x bfloat> %126 to <2 x float>, !dbg !39
  %141 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !40
  %142 = fadd <2 x float> %140, %141, !dbg !41
  %143 = fadd <2 x float> %142, %139, !dbg !42
  %144 = fadd <2 x float> %143, %138, !dbg !43
  %145 = fptrunc <2 x float> %144 to <2 x bfloat>, !dbg !44
  %146 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !37
  %147 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !38
  %148 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !39
  %149 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !40
  %150 = fadd <2 x float> %148, %149, !dbg !41
  %151 = fadd <2 x float> %150, %147, !dbg !42
  %152 = fadd <2 x float> %151, %146, !dbg !43
  %153 = fptrunc <2 x float> %152 to <2 x bfloat>, !dbg !44
  %154 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !37
  %155 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !38
  %156 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !39
  %157 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !40
  %158 = fadd <2 x float> %156, %157, !dbg !41
  %159 = fadd <2 x float> %158, %155, !dbg !42
  %160 = fadd <2 x float> %159, %154, !dbg !43
  %161 = fptrunc <2 x float> %160 to <2 x bfloat>, !dbg !44
  %162 = fpext <2 x bfloat> %104 to <2 x float>, !dbg !37
  %163 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !38
  %164 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !39
  %165 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !40
  %166 = fadd <2 x float> %164, %165, !dbg !41
  %167 = fadd <2 x float> %166, %163, !dbg !42
  %168 = fadd <2 x float> %167, %162, !dbg !43
  %169 = shufflevector <2 x float> %144, <2 x float> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %170 = shufflevector <2 x float> %160, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %171 = shufflevector <8 x float> %169, <8 x float> %170, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !45
  %172 = shufflevector <2 x float> %160, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %173 = shufflevector <8 x float> %171, <8 x float> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !45
  %174 = shufflevector <2 x float> %168, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %175 = shufflevector <8 x float> %173, <8 x float> %174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !45
  %176 = shufflevector <2 x float> %168, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %177 = shufflevector <8 x float> %175, <8 x float> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !45
  %178 = fmul <8 x float> %177, %177, !dbg !45
  %179 = fadd <8 x float> %92, %178, !dbg !46
  %180 = select <8 x i1> %90, <8 x float> %179, <8 x float> %92, !dbg !26
  %181 = fptrunc <2 x float> %168 to <2 x bfloat>, !dbg !44
  %182 = bitcast <2 x bfloat> %145 to i32, !dbg !44
  %183 = bitcast <2 x bfloat> %153 to i32, !dbg !44
  %184 = bitcast <2 x bfloat> %161 to i32, !dbg !44
  %185 = bitcast <2 x bfloat> %181 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %95, i1 %21) #6, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !25
  %186 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !25
  br i1 %186, label %91, label %__nv_rsqrtf.exit, !dbg !25

__nv_rsqrtf.exit:                                 ; preds = %102
  %shift80 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %187 = fadd <8 x float> %180, %shift80, !dbg !47
  %shift81 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %188 = fadd <8 x float> %shift81, %187, !dbg !47
  %shift82 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %189 = fadd <8 x float> %shift82, %188, !dbg !47
  %shift83 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %190 = fadd <8 x float> %shift83, %189, !dbg !47
  %shift84 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %191 = fadd <8 x float> %shift84, %190, !dbg !47
  %shift85 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %192 = fadd <8 x float> %shift85, %191, !dbg !47
  %shift86 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %193 = fadd <8 x float> %shift86, %192, !dbg !47
  %194 = extractelement <8 x float> %193, i64 0, !dbg !47
  %195 = bitcast float %194 to i32, !dbg !52
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !52
  %197 = bitcast i32 %196 to float, !dbg !52
  %198 = fadd float %194, %197, !dbg !47
  %199 = bitcast float %198 to i32, !dbg !52
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !52
  %201 = bitcast i32 %200 to float, !dbg !52
  %202 = fadd float %198, %201, !dbg !47
  %203 = bitcast float %202 to i32, !dbg !52
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !52
  %205 = bitcast i32 %204 to float, !dbg !52
  %206 = fadd float %202, %205, !dbg !47
  %207 = bitcast float %206 to i32, !dbg !52
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !52
  %209 = bitcast i32 %208 to float, !dbg !52
  %210 = fadd float %206, %209, !dbg !47
  %211 = bitcast float %210 to i32, !dbg !52
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !52
  %213 = bitcast i32 %212 to float, !dbg !52
  %214 = fadd float %210, %213, !dbg !47
  %215 = and i32 %14, 1, !dbg !52
  %216 = icmp eq i32 %23, 0, !dbg !52
  %217 = shl nuw nsw i32 %16, 1, !dbg !52
  %218 = or disjoint i32 %217, %215, !dbg !52
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !52
  %220 = bitcast float %214 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 %216) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %221 = icmp slt i32 %13, 16, !dbg !52
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !52
  %223 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %222, i1 %221) #6, !dbg !52
  %224 = bitcast i32 %223 to float, !dbg !52
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !52
  %226 = bitcast i32 %225 to float, !dbg !52
  %227 = fadd float %224, %226, !dbg !47
  %228 = and i32 %13, 1, !dbg !52
  %229 = icmp eq i32 %228, 0, !dbg !52
  %230 = and i1 %221, %229, !dbg !52
  %231 = bitcast float %227 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %231, i1 %230) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !52
  %233 = load float, ptr addrspace(3) %232, align 8, !dbg !52
  %234 = tail call float @llvm.nvvm.div.full(float %233, float 4.096000e+03), !dbg !53
  %235 = fadd float %234, 0x3EB0C6F7A0000000, !dbg !54
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i37 = icmp eq i32 %243, 0, !dbg !55
  br i1 %.not.i37, label %246, label %244, !dbg !55

244:                                              ; preds = %__nv_rsqrtf.exit
  %245 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %235), !dbg !55
  br label %__nv_rsqrtf.exit39, !dbg !55

246:                                              ; preds = %__nv_rsqrtf.exit
  %247 = tail call float @llvm.nvvm.rsqrt.approx.f(float %235), !dbg !55
  br label %__nv_rsqrtf.exit39, !dbg !55

__nv_rsqrtf.exit39:                               ; preds = %244, %246
  %.0.i38 = phi float [ %245, %244 ], [ %247, %246 ], !dbg !55
  %248 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %249 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25
  %250 = or disjoint i32 %25, 4
  %251 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %250
  %252 = zext nneg i32 %26 to i64, !dbg !56
  %253 = getelementptr inbounds nuw i8, ptr addrspace(3) %249, i32 8
  %254 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i32 8
  %255 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !57
  %256 = shufflevector <2 x float> %255, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  br label %257, !dbg !56

257:                                              ; preds = %__nv_rsqrtf.exit39, %257
  %indvars.iv58 = phi i64 [ 0, %__nv_rsqrtf.exit39 ], [ %indvars.iv.next59, %257 ]
  %258 = or disjoint i64 %indvars.iv58, %252, !dbg !58
  %259 = getelementptr bfloat, ptr addrspace(1) %5, i64 %258, !dbg !59
  %260 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %259, i1 true) #6, !dbg !60
  %261 = bitcast i16 %260 to bfloat, !dbg !60
  %262 = fpext bfloat %261 to float, !dbg !61
  %263 = trunc nuw nsw i64 %indvars.iv58 to i32, !dbg !62
  %264 = or i32 %invariant.op, %263, !dbg !62
  %265 = sext i32 %264 to i64, !dbg !63
  %266 = getelementptr bfloat, ptr addrspace(1) %0, i64 %265, !dbg !63
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %266, i1 %21) #6, !dbg !64
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !64
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !64
  %270 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !64
  %271 = bitcast i32 %270 to <2 x bfloat>, !dbg !64
  %272 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !64
  %273 = bitcast i32 %272 to <2 x bfloat>, !dbg !64
  %274 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !64
  %275 = bitcast i32 %274 to <2 x bfloat>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %276 = bitcast float %262 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %276, i1 true) #6, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %277 = getelementptr bfloat, ptr addrspace(1) %6, i64 %265, !dbg !66
  %278 = fpext <2 x bfloat> %269 to <2 x float>, !dbg !67
  %279 = fmul <2 x float> %256, %278, !dbg !57
  %280 = load <2 x float>, ptr addrspace(3) %249, align 16, !dbg !65
  %281 = fmul <2 x float> %280, %279, !dbg !65
  %282 = fptrunc <2 x float> %281 to <2 x bfloat>, !dbg !68
  %283 = fpext <2 x bfloat> %271 to <2 x float>, !dbg !67
  %284 = fmul <2 x float> %256, %283, !dbg !57
  %285 = load <2 x float>, ptr addrspace(3) %253, align 8, !dbg !65
  %286 = fmul <2 x float> %285, %284, !dbg !65
  %287 = fptrunc <2 x float> %286 to <2 x bfloat>, !dbg !68
  %288 = fpext <2 x bfloat> %273 to <2 x float>, !dbg !67
  %289 = fmul <2 x float> %256, %288, !dbg !57
  %290 = load <2 x float>, ptr addrspace(3) %251, align 16, !dbg !65
  %291 = fmul <2 x float> %289, %290, !dbg !65
  %292 = fptrunc <2 x float> %291 to <2 x bfloat>, !dbg !68
  %293 = fpext <2 x bfloat> %275 to <2 x float>, !dbg !67
  %294 = fmul <2 x float> %256, %293, !dbg !57
  %295 = load <2 x float>, ptr addrspace(3) %254, align 8, !dbg !65
  %296 = fmul <2 x float> %294, %295, !dbg !65
  %297 = fptrunc <2 x float> %296 to <2 x bfloat>, !dbg !68
  %298 = bitcast <2 x bfloat> %282 to i32, !dbg !68
  %299 = bitcast <2 x bfloat> %287 to i32, !dbg !68
  %300 = bitcast <2 x bfloat> %292 to i32, !dbg !68
  %301 = bitcast <2 x bfloat> %297 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %299, i32 %300, i32 %301, ptr addrspace(1) %277, i1 %21) #6, !dbg !68
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 512, !dbg !56
  %302 = icmp samesign ult i64 %indvars.iv58, 3584, !dbg !56
  br i1 %302, label %257, label %303, !dbg !56

303:                                              ; preds = %257
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 50, scope: !10)
!20 = !DILocation(line: 42, column: 22, scope: !10)
!21 = !DILocation(line: 41, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 44, column: 41, scope: !10)
!24 = !DILocation(line: 45, column: 46, scope: !10)
!25 = !DILocation(line: 31, column: 40, scope: !10)
!26 = !DILocation(line: 53, column: 50, scope: !10)
!27 = !DILocation(line: 37, column: 38, scope: !10)
!28 = !DILocation(line: 37, column: 55, scope: !10)
!29 = !DILocation(line: 38, column: 34, scope: !10)
!30 = !DILocation(line: 38, column: 51, scope: !10)
!31 = !DILocation(line: 39, column: 35, scope: !10)
!32 = !DILocation(line: 39, column: 52, scope: !10)
!33 = !DILocation(line: 44, column: 68, scope: !10)
!34 = !DILocation(line: 45, column: 41, scope: !10)
!35 = !DILocation(line: 45, column: 34, scope: !10)
!36 = !DILocation(line: 45, column: 53, scope: !10)
!37 = !DILocation(line: 39, column: 114, scope: !10)
!38 = !DILocation(line: 38, column: 113, scope: !10)
!39 = !DILocation(line: 37, column: 117, scope: !10)
!40 = !DILocation(line: 45, column: 115, scope: !10)
!41 = !DILocation(line: 46, column: 22, scope: !10)
!42 = !DILocation(line: 47, column: 23, scope: !10)
!43 = !DILocation(line: 48, column: 24, scope: !10)
!44 = !DILocation(line: 54, column: 56, scope: !10)
!45 = !DILocation(line: 50, column: 24, scope: !10)
!46 = !DILocation(line: 52, column: 25, scope: !10)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !10, file: !49, discriminator: 0)
!51 = !DILocation(line: 55, column: 27, scope: !10)
!52 = !DILocation(line: 286, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 66, column: 25, scope: !10)
!54 = !DILocation(line: 68, column: 24, scope: !10)
!55 = !DILocation(line: 69, column: 32, scope: !10)
!56 = !DILocation(line: 56, column: 40, scope: !10)
!57 = !DILocation(line: 70, column: 24, scope: !10)
!58 = !DILocation(line: 57, column: 31, scope: !10)
!59 = !DILocation(line: 62, column: 35, scope: !10)
!60 = !DILocation(line: 62, column: 42, scope: !10)
!61 = !DILocation(line: 62, column: 95, scope: !10)
!62 = !DILocation(line: 63, column: 46, scope: !10)
!63 = !DILocation(line: 63, column: 39, scope: !10)
!64 = !DILocation(line: 63, column: 56, scope: !10)
!65 = !DILocation(line: 72, column: 24, scope: !10)
!66 = !DILocation(line: 73, column: 29, scope: !10)
!67 = !DILocation(line: 63, column: 118, scope: !10)
!68 = !DILocation(line: 73, column: 53, scope: !10)
!69 = !DILocation(line: 56, column: 4, scope: !10)
