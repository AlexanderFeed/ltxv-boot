; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 512, !dbg !11
  %.lobit = lshr exact i32 %22, 9, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %.lobit, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 2, !dbg !14
  %28 = and i32 %27, 2044, !dbg !14
  %29 = shl i32 %21, 1, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = zext nneg i32 %28 to i64, !dbg !16
  %32 = add i32 %28, %30, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !18
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %25) #5, !dbg !19
  %36 = extractvalue { i32, i32 } %35, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = extractelement <2 x bfloat> %37, i64 1, !dbg !19
  %39 = fpext bfloat %38 to float, !dbg !20
  %40 = extractelement <2 x bfloat> %37, i64 0, !dbg !19
  %41 = fpext bfloat %40 to float, !dbg !20
  %42 = extractvalue { i32, i32 } %35, 0, !dbg !19
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !19
  %44 = extractelement <2 x bfloat> %43, i64 1, !dbg !19
  %45 = fpext bfloat %44 to float, !dbg !20
  %46 = extractelement <2 x bfloat> %43, i64 0, !dbg !19
  %47 = fpext bfloat %46 to float, !dbg !20
  %48 = select i1 %25, float %47, float 0.000000e+00, !dbg !21
  %49 = select i1 %25, float %45, float 0.000000e+00, !dbg !21
  %50 = select i1 %25, float %41, float 0.000000e+00, !dbg !21
  %51 = select i1 %25, float %39, float 0.000000e+00, !dbg !21
  %52 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %53 = or disjoint i64 %31, 2048, !dbg !23
  %54 = icmp samesign ult i64 %53, 3072, !dbg !24
  %55 = trunc nuw nsw i64 %53 to i32, !dbg !17
  %56 = add i32 %30, %55, !dbg !17
  %57 = sext i32 %56 to i64, !dbg !18
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = and i1 %25, %54, !dbg !25
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %58, i1 %59) #5, !dbg !19
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !19
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !19
  %63 = extractelement <2 x bfloat> %62, i64 0, !dbg !19
  %64 = fpext bfloat %63 to float, !dbg !20
  %65 = fsub float %64, %48, !dbg !26
  %66 = fadd float %52, 1.000000e+00, !dbg !30
  %67 = tail call float @llvm.nvvm.div.full(float %65, float %66), !dbg !31
  %68 = fadd float %48, %67, !dbg !32
  %69 = fsub float %64, %68, !dbg !33
  %70 = fmul float %65, %69, !dbg !34
  %71 = fadd float %70, 0.000000e+00, !dbg !35
  %72 = extractelement <2 x bfloat> %62, i64 1, !dbg !19
  %73 = fpext bfloat %72 to float, !dbg !20
  %74 = fsub float %73, %49, !dbg !26
  %75 = tail call float @llvm.nvvm.div.full(float %74, float %66), !dbg !31
  %76 = fadd float %49, %75, !dbg !32
  %77 = fsub float %73, %76, !dbg !33
  %78 = fmul float %74, %77, !dbg !34
  %79 = fadd float %78, 0.000000e+00, !dbg !35
  %80 = extractvalue { i32, i32 } %60, 1, !dbg !19
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !19
  %82 = extractelement <2 x bfloat> %81, i64 0, !dbg !19
  %83 = fpext bfloat %82 to float, !dbg !20
  %84 = fsub float %83, %50, !dbg !26
  %85 = tail call float @llvm.nvvm.div.full(float %84, float %66), !dbg !31
  %86 = fadd float %50, %85, !dbg !32
  %87 = fsub float %83, %86, !dbg !33
  %88 = fmul float %84, %87, !dbg !34
  %89 = fadd float %88, 0.000000e+00, !dbg !35
  %90 = extractelement <2 x bfloat> %81, i64 1, !dbg !19
  %91 = fpext bfloat %90 to float, !dbg !20
  %92 = fsub float %91, %51, !dbg !26
  %93 = tail call float @llvm.nvvm.div.full(float %92, float %66), !dbg !31
  %94 = fadd float %51, %93, !dbg !32
  %95 = fsub float %91, %94, !dbg !33
  %96 = fmul float %92, %95, !dbg !34
  %97 = fadd float %96, 0.000000e+00, !dbg !35
  %98 = select i1 %59, float %68, float %48, !dbg !21
  %99 = select i1 %59, float %76, float %49, !dbg !21
  %100 = select i1 %59, float %86, float %50, !dbg !21
  %101 = select i1 %59, float %94, float %51, !dbg !21
  %102 = select i1 %59, float %89, float 0.000000e+00, !dbg !36
  %103 = select i1 %59, float %97, float 0.000000e+00, !dbg !36
  %104 = select i1 %59, float %66, float %52, !dbg !22
  %105 = select i1 %59, float %66, float %52, !dbg !22
  %106 = select i1 %59, float %66, float %52, !dbg !22
  %107 = select i1 %59, float %66, float %52, !dbg !22
  %108 = lshr i32 %21, 5, !dbg !11
  %109 = and i32 %29, 2046, !dbg !14
  %110 = fsub float %99, %98, !dbg !37
  %111 = fadd float %104, %105, !dbg !40
  %112 = fcmp oeq float %111, 0.000000e+00, !dbg !41
  %113 = tail call float @llvm.nvvm.div.full(float %105, float %111), !dbg !42
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !43
  %115 = fmul float %110, %114, !dbg !44
  %116 = fadd float %98, %115, !dbg !45
  %117 = fadd float %71, %79, !dbg !46
  %118 = select i1 %59, float %117, float 0.000000e+00, !dbg !46
  %119 = fmul float %110, %110, !dbg !47
  %120 = fmul float %119, %104, !dbg !48
  %121 = fmul float %120, %114, !dbg !49
  %122 = fadd float %118, %121, !dbg !50
  %123 = fsub float %100, %116, !dbg !37
  %124 = fadd float %106, %111, !dbg !40
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !41
  %126 = tail call float @llvm.nvvm.div.full(float %106, float %124), !dbg !42
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !43
  %128 = fmul float %127, %123, !dbg !44
  %129 = fadd float %116, %128, !dbg !45
  %130 = fadd float %102, %122, !dbg !46
  %131 = fmul float %123, %123, !dbg !47
  %132 = fmul float %111, %131, !dbg !48
  %133 = fmul float %127, %132, !dbg !49
  %134 = fadd float %130, %133, !dbg !50
  %135 = fsub float %101, %129, !dbg !37
  %136 = fadd float %107, %124, !dbg !40
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !41
  %138 = tail call float @llvm.nvvm.div.full(float %107, float %136), !dbg !42
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !43
  %140 = fmul float %139, %135, !dbg !44
  %141 = fadd float %129, %140, !dbg !45
  %142 = fadd float %103, %134, !dbg !46
  %143 = fmul float %135, %135, !dbg !47
  %144 = fmul float %124, %143, !dbg !48
  %145 = fmul float %139, %144, !dbg !49
  %146 = fadd float %142, %145, !dbg !50
  %147 = bitcast float %141 to i32, !dbg !51
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !51
  %149 = bitcast i32 %148 to float, !dbg !51
  %150 = bitcast float %146 to i32, !dbg !51
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !51
  %152 = bitcast i32 %151 to float, !dbg !51
  %153 = bitcast float %136 to i32, !dbg !51
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !51
  %155 = bitcast i32 %154 to float, !dbg !51
  %156 = fsub float %149, %141, !dbg !37
  %157 = fadd float %136, %155, !dbg !40
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !41
  %159 = tail call float @llvm.nvvm.div.full(float %155, float %157), !dbg !42
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !43
  %161 = fmul float %160, %156, !dbg !44
  %162 = fadd float %141, %161, !dbg !45
  %163 = fadd float %146, %152, !dbg !46
  %164 = fmul float %156, %156, !dbg !47
  %165 = fmul float %136, %164, !dbg !48
  %166 = fmul float %160, %165, !dbg !49
  %167 = fadd float %163, %166, !dbg !50
  %168 = bitcast float %162 to i32, !dbg !51
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = bitcast float %167 to i32, !dbg !51
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !51
  %173 = bitcast i32 %172 to float, !dbg !51
  %174 = bitcast float %157 to i32, !dbg !51
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !51
  %176 = bitcast i32 %175 to float, !dbg !51
  %177 = fsub float %170, %162, !dbg !37
  %178 = fadd float %157, %176, !dbg !40
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !41
  %180 = tail call float @llvm.nvvm.div.full(float %176, float %178), !dbg !42
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !43
  %182 = fmul float %177, %181, !dbg !44
  %183 = fadd float %162, %182, !dbg !45
  %184 = fadd float %167, %173, !dbg !46
  %185 = fmul float %177, %177, !dbg !47
  %186 = fmul float %157, %185, !dbg !48
  %187 = fmul float %181, %186, !dbg !49
  %188 = fadd float %184, %187, !dbg !50
  %189 = bitcast float %183 to i32, !dbg !51
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !51
  %191 = bitcast i32 %190 to float, !dbg !51
  %192 = bitcast float %188 to i32, !dbg !51
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !51
  %194 = bitcast i32 %193 to float, !dbg !51
  %195 = bitcast float %178 to i32, !dbg !51
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 4, i32 31), !dbg !51
  %197 = bitcast i32 %196 to float, !dbg !51
  %198 = fsub float %191, %183, !dbg !37
  %199 = fadd float %178, %197, !dbg !40
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !41
  %201 = tail call float @llvm.nvvm.div.full(float %197, float %199), !dbg !42
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !43
  %203 = fmul float %198, %202, !dbg !44
  %204 = fadd float %183, %203, !dbg !45
  %205 = fadd float %188, %194, !dbg !46
  %206 = fmul float %198, %198, !dbg !47
  %207 = fmul float %178, %206, !dbg !48
  %208 = fmul float %202, %207, !dbg !49
  %209 = fadd float %205, %208, !dbg !50
  %210 = bitcast float %204 to i32, !dbg !51
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !51
  %212 = bitcast i32 %211 to float, !dbg !51
  %213 = bitcast float %209 to i32, !dbg !51
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !51
  %215 = bitcast i32 %214 to float, !dbg !51
  %216 = bitcast float %199 to i32, !dbg !51
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !51
  %218 = bitcast i32 %217 to float, !dbg !51
  %219 = fsub float %212, %204, !dbg !37
  %220 = fadd float %199, %218, !dbg !40
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !41
  %222 = tail call float @llvm.nvvm.div.full(float %218, float %220), !dbg !42
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !43
  %224 = fmul float %219, %223, !dbg !44
  %225 = fadd float %204, %224, !dbg !45
  %226 = fadd float %209, %215, !dbg !46
  %227 = fmul float %219, %219, !dbg !47
  %228 = fmul float %199, %227, !dbg !48
  %229 = fmul float %223, %228, !dbg !49
  %230 = fadd float %226, %229, !dbg !50
  %231 = bitcast float %225 to i32, !dbg !51
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !51
  %233 = bitcast i32 %232 to float, !dbg !51
  %234 = bitcast float %230 to i32, !dbg !51
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !51
  %236 = bitcast i32 %235 to float, !dbg !51
  %237 = bitcast float %220 to i32, !dbg !51
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !51
  %239 = bitcast i32 %238 to float, !dbg !51
  %240 = fsub float %233, %225, !dbg !37
  %241 = fadd float %220, %239, !dbg !40
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !41
  %243 = tail call float @llvm.nvvm.div.full(float %239, float %241), !dbg !42
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !43
  %245 = fmul float %240, %244, !dbg !44
  %246 = fadd float %225, %245, !dbg !45
  %247 = fadd float %230, %236, !dbg !46
  %248 = fmul float %240, %240, !dbg !47
  %249 = fmul float %220, %248, !dbg !48
  %250 = fmul float %244, %249, !dbg !49
  %251 = fadd float %247, %250, !dbg !50
  %252 = and i32 %108, 15, !dbg !51
  %253 = icmp eq i32 %23, 0, !dbg !51
  %254 = lshr exact i32 %22, 5, !dbg !51
  %255 = or disjoint i32 %254, %252, !dbg !51
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !51
  %257 = bitcast float %246 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 %253) #5, !dbg !51
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %255, !dbg !51
  %259 = bitcast float %251 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 %253) #5, !dbg !51
  %260 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %255, !dbg !51
  %261 = bitcast float %241 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 %253) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %262 = icmp slt i32 %21, 32, !dbg !51
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !51
  %264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %262) #5, !dbg !51
  %265 = bitcast i32 %264 to float, !dbg !51
  %266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !51
  %267 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %266, i1 %262) #5, !dbg !51
  %268 = bitcast i32 %267 to float, !dbg !51
  %269 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !51
  %270 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %269, i1 %262) #5, !dbg !51
  %271 = bitcast i32 %270 to float, !dbg !51
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !51
  %273 = bitcast i32 %272 to float, !dbg !51
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !51
  %275 = bitcast i32 %274 to float, !dbg !51
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !51
  %277 = bitcast i32 %276 to float, !dbg !51
  %278 = fsub float %273, %265, !dbg !37
  %279 = fadd float %271, %277, !dbg !40
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !41
  %281 = tail call float @llvm.nvvm.div.full(float %277, float %279), !dbg !42
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !43
  %283 = fmul float %278, %282, !dbg !44
  %284 = fadd float %283, %265, !dbg !45
  %285 = fadd float %268, %275, !dbg !46
  %286 = fmul float %278, %278, !dbg !47
  %287 = fmul float %286, %271, !dbg !48
  %288 = fmul float %287, %282, !dbg !49
  %289 = fadd float %285, %288, !dbg !50
  %290 = bitcast float %284 to i32, !dbg !51
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !51
  %292 = bitcast i32 %291 to float, !dbg !51
  %293 = bitcast float %289 to i32, !dbg !51
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !51
  %295 = bitcast i32 %294 to float, !dbg !51
  %296 = bitcast float %279 to i32, !dbg !51
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 4, i32 31), !dbg !51
  %298 = bitcast i32 %297 to float, !dbg !51
  %299 = fsub float %292, %284, !dbg !37
  %300 = fadd float %279, %298, !dbg !40
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !41
  %302 = tail call float @llvm.nvvm.div.full(float %298, float %300), !dbg !42
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !43
  %304 = fmul float %299, %303, !dbg !44
  %305 = fadd float %284, %304, !dbg !45
  %306 = fadd float %289, %295, !dbg !46
  %307 = fmul float %299, %299, !dbg !47
  %308 = fmul float %279, %307, !dbg !48
  %309 = fmul float %303, %308, !dbg !49
  %310 = fadd float %306, %309, !dbg !50
  %311 = bitcast float %305 to i32, !dbg !51
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !51
  %313 = bitcast i32 %312 to float, !dbg !51
  %314 = bitcast float %310 to i32, !dbg !51
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !51
  %316 = bitcast i32 %315 to float, !dbg !51
  %317 = bitcast float %300 to i32, !dbg !51
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !51
  %319 = bitcast i32 %318 to float, !dbg !51
  %320 = fsub float %313, %305, !dbg !37
  %321 = fadd float %300, %319, !dbg !40
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !41
  %323 = tail call float @llvm.nvvm.div.full(float %319, float %321), !dbg !42
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !43
  %325 = fmul float %320, %324, !dbg !44
  %326 = fadd float %305, %325, !dbg !45
  %327 = fadd float %310, %316, !dbg !46
  %328 = fmul float %320, %320, !dbg !47
  %329 = fmul float %300, %328, !dbg !48
  %330 = fmul float %324, %329, !dbg !49
  %331 = fadd float %327, %330, !dbg !50
  %332 = bitcast float %326 to i32, !dbg !51
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !51
  %334 = bitcast i32 %333 to float, !dbg !51
  %335 = bitcast float %331 to i32, !dbg !51
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !51
  %337 = bitcast i32 %336 to float, !dbg !51
  %338 = bitcast float %321 to i32, !dbg !51
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !51
  %340 = bitcast i32 %339 to float, !dbg !51
  %341 = fsub float %334, %326, !dbg !37
  %342 = fadd float %321, %340, !dbg !40
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !41
  %344 = tail call float @llvm.nvvm.div.full(float %340, float %342), !dbg !42
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !43
  %346 = fmul float %341, %345, !dbg !44
  %347 = fadd float %326, %346, !dbg !45
  %348 = fadd float %331, %337, !dbg !46
  %349 = fmul float %341, %341, !dbg !47
  %350 = fmul float %321, %349, !dbg !48
  %351 = fmul float %345, %350, !dbg !49
  %352 = fadd float %348, %351, !dbg !50
  %353 = and i32 %21, 15, !dbg !51
  %354 = icmp eq i32 %353, 0, !dbg !51
  %355 = and i1 %262, %354, !dbg !51
  %356 = bitcast float %347 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %356, i1 %355) #5, !dbg !51
  %357 = bitcast float %352 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %357, i1 %355) #5, !dbg !51
  %358 = bitcast float %342 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %358, i1 %355) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !51
  %360 = load float, ptr addrspace(3) %359, align 16, !dbg !51
  %361 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %254, !dbg !51
  %362 = load float, ptr addrspace(3) %361, align 16, !dbg !51
  %363 = tail call float @llvm.nvvm.div.full(float %362, float 3.072000e+03), !dbg !52
  %364 = fadd float %363, 0x3EB0C6F7A0000000, !dbg !53
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i29 = icmp eq i32 %368, 0, !dbg !54
  br i1 %.not.i29, label %371, label %369, !dbg !54

369:                                              ; preds = %__nv_rsqrtf.exit
  %370 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %364), !dbg !54
  br label %__nv_rsqrtf.exit31, !dbg !54

371:                                              ; preds = %__nv_rsqrtf.exit
  %372 = tail call float @llvm.nvvm.rsqrt.approx.f(float %364), !dbg !54
  br label %__nv_rsqrtf.exit31, !dbg !54

__nv_rsqrtf.exit31:                               ; preds = %369, %371
  %.0.i30 = phi float [ %370, %369 ], [ %372, %371 ], !dbg !54
  %373 = and i32 %27, 4092
  %374 = lshr i32 %27, 9
  %375 = and i32 %374, 4
  %376 = add nuw nsw i32 %375, %373
  %377 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %376
  %378 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %109
  %379 = add nuw nsw i32 %109, 2052
  %380 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %379
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %109
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %379
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %376
  %384 = zext nneg i32 %109 to i64, !dbg !55
  %385 = getelementptr inbounds nuw i8, ptr addrspace(3) %380, i32 4
  %386 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 4
  br label %387, !dbg !55

387:                                              ; preds = %__nv_rsqrtf.exit31, %387
  %388 = phi i1 [ true, %__nv_rsqrtf.exit31 ], [ false, %387 ]
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit31 ], [ 2048, %387 ]
  %389 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %482, %387 ]
  %390 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %483, %387 ]
  %391 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit31 ], [ %481, %387 ]
  %392 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit31 ], [ %495, %387 ]
  %393 = or disjoint i64 %indvars.iv, %384, !dbg !56
  %394 = or disjoint i64 %indvars.iv, %31, !dbg !56
  %395 = icmp samesign ult i64 %393, 3072, !dbg !57
  %396 = icmp samesign ult i64 %394, 3072, !dbg !57
  %397 = trunc nuw nsw i64 %394 to i32, !dbg !58
  %398 = add i32 %30, %397, !dbg !58
  %399 = sext i32 %398 to i64, !dbg !59
  %400 = getelementptr bfloat, ptr addrspace(1) %0, i64 %399, !dbg !59
  %401 = and i1 %26, %395, !dbg !60
  %402 = and i1 %25, %396, !dbg !60
  %403 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %400, i1 %402) #5, !dbg !61
  %404 = extractvalue { i32, i32 } %403, 0, !dbg !61
  %405 = bitcast i32 %404 to <2 x bfloat>, !dbg !61
  %406 = extractvalue { i32, i32 } %403, 1, !dbg !61
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !61
  %408 = extractelement <2 x bfloat> %405, i64 0, !dbg !61
  %409 = extractelement <2 x bfloat> %405, i64 1, !dbg !61
  %410 = extractelement <2 x bfloat> %407, i64 0, !dbg !61
  %411 = extractelement <2 x bfloat> %407, i64 1, !dbg !61
  %412 = fpext bfloat %408 to float, !dbg !62
  %413 = fpext bfloat %409 to float, !dbg !62
  %414 = fpext bfloat %410 to float, !dbg !62
  %415 = fpext bfloat %411 to float, !dbg !62
  %416 = add nuw nsw i64 %393, 3072, !dbg !63
  %417 = getelementptr float, ptr addrspace(1) %1, i64 %416, !dbg !64
  %418 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %417, i1 %395) #5, !dbg !65
  %419 = extractvalue { i32, i32 } %418, 0, !dbg !65
  %420 = extractvalue { i32, i32 } %418, 1, !dbg !65
  %421 = getelementptr bfloat, ptr addrspace(1) %2, i64 %416, !dbg !66
  %422 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %421, i1 %395) #5, !dbg !67
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !67
  %424 = getelementptr float, ptr addrspace(1) %1, i64 %393, !dbg !68
  %425 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %424, i1 %395) #5, !dbg !69
  %426 = extractvalue { i32, i32 } %425, 0, !dbg !69
  %427 = extractvalue { i32, i32 } %425, 1, !dbg !69
  %428 = getelementptr bfloat, ptr addrspace(1) %2, i64 %393, !dbg !70
  %429 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %428, i1 %395) #5, !dbg !71
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !71
  %431 = fsub float %412, %360, !dbg !72
  %432 = fsub float %413, %360, !dbg !72
  %433 = fsub float %414, %360, !dbg !72
  %434 = fsub float %415, %360, !dbg !72
  %435 = fmul float %.0.i30, %431, !dbg !73
  %436 = fmul float %.0.i30, %432, !dbg !73
  %437 = fmul float %.0.i30, %433, !dbg !73
  %438 = fmul float %.0.i30, %434, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %439 = bitcast float %435 to i32, !dbg !73
  %440 = bitcast float %436 to i32, !dbg !73
  %441 = bitcast float %437 to i32, !dbg !73
  %442 = bitcast float %438 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %377, i32 %439, i32 %440, i32 %441, i32 %442, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %443 = load float, ptr addrspace(3) %380, align 8, !dbg !73
  %444 = load float, ptr addrspace(3) %385, align 4, !dbg !73
  %445 = fcmp uno <2 x float> %391, zeroinitializer, !dbg !74
  %446 = fcmp uno float %389, 0.000000e+00, !dbg !74
  %447 = fcmp uno float %390, 0.000000e+00, !dbg !74
  %448 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !65
  %449 = insertelement <2 x i32> %448, i32 %420, i64 1, !dbg !65
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !65
  %451 = fpext <2 x bfloat> %423 to <2 x float>, !dbg !76
  %452 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !69
  %453 = insertelement <2 x i32> %452, i32 %427, i64 1, !dbg !69
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !69
  %455 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !77
  %456 = load <2 x float>, ptr addrspace(3) %378, align 8, !dbg !73
  %457 = fadd <2 x float> %450, %451, !dbg !78
  %458 = fadd <2 x float> %457, splat (float 1.000000e+00), !dbg !79
  %459 = fmul <2 x float> %458, %456, !dbg !80
  %460 = extractelement <2 x float> %458, i64 0, !dbg !80
  %461 = fmul float %460, %443, !dbg !80
  %462 = extractelement <2 x float> %458, i64 1, !dbg !80
  %463 = fmul float %462, %444, !dbg !80
  %464 = fadd <2 x float> %454, %455, !dbg !81
  %465 = fadd <2 x float> %464, %459, !dbg !82
  %466 = extractelement <2 x float> %464, i64 0, !dbg !82
  %467 = fadd float %466, %461, !dbg !82
  %468 = extractelement <2 x float> %464, i64 1, !dbg !82
  %469 = fadd float %468, %463, !dbg !82
  %470 = fcmp olt <2 x float> %391, %465, !dbg !83
  %471 = fcmp olt float %389, %467, !dbg !83
  %472 = fcmp olt float %390, %469, !dbg !83
  %473 = or <2 x i1> %445, %470, !dbg !84
  %474 = or i1 %446, %471, !dbg !84
  %475 = or i1 %447, %472, !dbg !84
  %476 = select <2 x i1> %473, <2 x float> %391, <2 x float> %465, !dbg !85
  %477 = select i1 %474, float %389, float %467, !dbg !85
  %478 = select i1 %475, float %390, float %469, !dbg !85
  %479 = insertelement <2 x i1> poison, i1 %401, i64 0, !dbg !86
  %480 = shufflevector <2 x i1> %479, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !86
  %481 = select <2 x i1> %480, <2 x float> %476, <2 x float> %391, !dbg !86
  %482 = select i1 %401, float %477, float %389, !dbg !86
  %483 = select i1 %401, float %478, float %390, !dbg !86
  %484 = extractelement <2 x float> %465, i64 0, !dbg !87
  %485 = extractelement <2 x float> %465, i64 1, !dbg !87
  %486 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !88
  %487 = shufflevector <2 x float> %465, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !90
  %488 = insertelement <4 x float> %487, float %467, i64 2, !dbg !90
  %489 = insertelement <4 x float> %488, float %469, i64 3, !dbg !90
  %490 = fcmp ogt <4 x float> %392, %489, !dbg !90
  %491 = or <4 x i1> %486, %490, !dbg !91
  %492 = select <4 x i1> %491, <4 x float> %392, <4 x float> %489, !dbg !92
  %493 = insertelement <4 x i1> poison, i1 %401, i64 0, !dbg !93
  %494 = shufflevector <4 x i1> %493, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !93
  %495 = select <4 x i1> %494, <4 x float> %492, <4 x float> %392, !dbg !93
  %496 = getelementptr bfloat, ptr addrspace(1) %3, i64 %399, !dbg !94
  %497 = fptrunc float %484 to bfloat, !dbg !87
  %498 = fptrunc float %485 to bfloat, !dbg !87
  %499 = fptrunc float %467 to bfloat, !dbg !87
  %500 = fptrunc float %469 to bfloat, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %501 = bitcast bfloat %497 to i16, !dbg !87
  %502 = bitcast bfloat %498 to i16, !dbg !87
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %381, i16 %501, i16 %502, i1 true) #5, !dbg !87
  %503 = bitcast bfloat %499 to i16, !dbg !87
  %504 = bitcast bfloat %500 to i16, !dbg !87
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %382, i16 %503, i16 %504, i1 true) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %.uncasted.extract = load i32, ptr addrspace(3) %383, align 8, !dbg !87
  %.uncasted.extract15 = load i32, ptr addrspace(3) %386, align 4, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract15, ptr addrspace(1) %496, i1 %402) #5, !dbg !87
  br i1 %388, label %387, label %505, !dbg !55

505:                                              ; preds = %387
  %506 = and i32 %21, 1, !dbg !11
  %507 = or disjoint i32 %20, %506, !dbg !12
  %508 = icmp slt i32 %507, 4112, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %509 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %481, <2 x i32> <i32 0, i32 2>, !dbg !97
  %510 = fcmp olt <2 x float> %509, %481, !dbg !97
  %511 = fcmp uno <2 x float> %509, %481, !dbg !97
  %shift = shufflevector <2 x i1> %510, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !98
  %512 = or <2 x i1> %shift, %511, !dbg !98
  %513 = extractelement <2 x i1> %512, i64 0, !dbg !98
  %514 = extractelement <2 x float> %481, i64 0, !dbg !99
  %515 = extractelement <2 x float> %481, i64 1, !dbg !99
  %516 = select i1 %513, float %514, float %515, !dbg !99
  %517 = fcmp olt float %482, %483, !dbg !97
  %518 = fcmp uno float %482, 0.000000e+00, !dbg !100
  %519 = or i1 %517, %518, !dbg !98
  %520 = select i1 %519, float %482, float %483, !dbg !99
  %521 = bitcast float %516 to i32, !dbg !95
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 16, i32 31), !dbg !95
  %523 = bitcast i32 %522 to float, !dbg !95
  %524 = fcmp olt float %516, %523, !dbg !97
  %525 = fcmp uno float %516, 0.000000e+00, !dbg !100
  %526 = or i1 %525, %524, !dbg !98
  %527 = select i1 %526, float %516, float %523, !dbg !99
  %528 = bitcast float %527 to i32, !dbg !95
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 8, i32 31), !dbg !95
  %530 = bitcast i32 %529 to float, !dbg !95
  %531 = fcmp olt float %527, %530, !dbg !97
  %532 = fcmp uno float %527, 0.000000e+00, !dbg !100
  %533 = or i1 %531, %532, !dbg !98
  %534 = select i1 %533, float %527, float %530, !dbg !99
  %535 = bitcast float %534 to i32, !dbg !95
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 4, i32 31), !dbg !95
  %537 = bitcast i32 %536 to float, !dbg !95
  %538 = fcmp olt float %534, %537, !dbg !97
  %539 = fcmp uno float %534, 0.000000e+00, !dbg !100
  %540 = or i1 %538, %539, !dbg !98
  %541 = select i1 %540, float %534, float %537, !dbg !99
  %542 = bitcast float %541 to i32, !dbg !95
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 2, i32 31), !dbg !95
  %544 = bitcast i32 %543 to float, !dbg !95
  %545 = fcmp olt float %541, %544, !dbg !97
  %546 = fcmp uno float %541, 0.000000e+00, !dbg !100
  %547 = or i1 %545, %546, !dbg !98
  %548 = select i1 %547, float %541, float %544, !dbg !99
  %549 = bitcast float %548 to i32, !dbg !95
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 1, i32 31), !dbg !95
  %551 = bitcast i32 %550 to float, !dbg !95
  %552 = fcmp olt float %548, %551, !dbg !97
  %553 = fcmp uno float %548, 0.000000e+00, !dbg !100
  %554 = or i1 %552, %553, !dbg !98
  %555 = bitcast float %520 to i32, !dbg !95
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 16, i32 31), !dbg !95
  %557 = bitcast i32 %556 to float, !dbg !95
  %558 = fcmp olt float %520, %557, !dbg !97
  %559 = fcmp uno float %520, 0.000000e+00, !dbg !100
  %560 = or i1 %559, %558, !dbg !98
  %561 = select i1 %560, float %520, float %557, !dbg !99
  %562 = bitcast float %561 to i32, !dbg !95
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 8, i32 31), !dbg !95
  %564 = bitcast i32 %563 to float, !dbg !95
  %565 = fcmp olt float %561, %564, !dbg !97
  %566 = fcmp uno float %561, 0.000000e+00, !dbg !100
  %567 = or i1 %565, %566, !dbg !98
  %568 = select i1 %567, float %561, float %564, !dbg !99
  %569 = bitcast float %568 to i32, !dbg !95
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 4, i32 31), !dbg !95
  %571 = bitcast i32 %570 to float, !dbg !95
  %572 = fcmp olt float %568, %571, !dbg !97
  %573 = fcmp uno float %568, 0.000000e+00, !dbg !100
  %574 = or i1 %572, %573, !dbg !98
  %575 = select i1 %574, float %568, float %571, !dbg !99
  %576 = bitcast float %575 to i32, !dbg !95
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 2, i32 31), !dbg !95
  %578 = bitcast i32 %577 to float, !dbg !95
  %579 = fcmp olt float %575, %578, !dbg !97
  %580 = fcmp uno float %575, 0.000000e+00, !dbg !100
  %581 = or i1 %579, %580, !dbg !98
  %582 = select i1 %581, float %575, float %578, !dbg !99
  %583 = bitcast float %582 to i32, !dbg !95
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 1, i32 31), !dbg !95
  %585 = bitcast i32 %584 to float, !dbg !95
  %586 = fcmp olt float %582, %585, !dbg !97
  %587 = fcmp uno float %582, 0.000000e+00, !dbg !100
  %588 = or i1 %586, %587, !dbg !98
  %589 = and i32 %108, 31, !dbg !95
  %590 = getelementptr float, ptr addrspace(3) @global_smem, i32 %589, !dbg !95
  %591 = select i1 %554, i32 %549, i32 %550, !dbg !99
  %592 = insertelement <1 x i32> poison, i32 %591, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %590, <1 x i32> %592, i1 %253) #5, !dbg !95
  %593 = or disjoint i32 %589, 32, !dbg !95
  %594 = getelementptr float, ptr addrspace(3) @global_smem, i32 %593, !dbg !95
  %595 = select i1 %588, i32 %583, i32 %584, !dbg !99
  %596 = insertelement <1 x i32> poison, i32 %595, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %594, <1 x i32> %596, i1 %253) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %597 = icmp slt i32 %21, 64, !dbg !95
  %598 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %597) #5, !dbg !95
  %599 = bitcast i32 %598 to float, !dbg !95
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 16, i32 31), !dbg !95
  %601 = bitcast i32 %600 to float, !dbg !95
  %602 = fcmp olt float %599, %601, !dbg !97
  %603 = fcmp uno float %599, 0.000000e+00, !dbg !100
  %604 = or i1 %603, %602, !dbg !98
  %605 = select i1 %604, float %599, float %601, !dbg !99
  %606 = bitcast float %605 to i32, !dbg !95
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 8, i32 31), !dbg !95
  %608 = bitcast i32 %607 to float, !dbg !95
  %609 = fcmp olt float %605, %608, !dbg !97
  %610 = fcmp uno float %605, 0.000000e+00, !dbg !100
  %611 = or i1 %609, %610, !dbg !98
  %612 = select i1 %611, float %605, float %608, !dbg !99
  %613 = bitcast float %612 to i32, !dbg !95
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 4, i32 31), !dbg !95
  %615 = bitcast i32 %614 to float, !dbg !95
  %616 = fcmp olt float %612, %615, !dbg !97
  %617 = fcmp uno float %612, 0.000000e+00, !dbg !100
  %618 = or i1 %616, %617, !dbg !98
  %619 = select i1 %618, float %612, float %615, !dbg !99
  %620 = bitcast float %619 to i32, !dbg !95
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 2, i32 31), !dbg !95
  %622 = bitcast i32 %621 to float, !dbg !95
  %623 = fcmp olt float %619, %622, !dbg !97
  %624 = fcmp uno float %619, 0.000000e+00, !dbg !100
  %625 = or i1 %623, %624, !dbg !98
  %626 = select i1 %625, float %619, float %622, !dbg !99
  %627 = bitcast float %626 to i32, !dbg !95
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 1, i32 31), !dbg !95
  %629 = bitcast i32 %628 to float, !dbg !95
  %630 = fcmp olt float %626, %629, !dbg !97
  %631 = fcmp uno float %626, 0.000000e+00, !dbg !100
  %632 = or i1 %630, %631, !dbg !98
  %633 = and i1 %597, %253, !dbg !95
  %634 = select i1 %632, i32 %627, i32 %628, !dbg !99
  %635 = insertelement <1 x i32> poison, i32 %634, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %635, i1 %633) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %636 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %637 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %638 = bitcast float %636 to i32, !dbg !101
  %639 = bitcast float %637 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %638, i32 %639, i1 true) #5, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %640 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %506, !dbg !101
  %641 = load float, ptr addrspace(3) %640, align 4, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %642 = extractelement <4 x float> %495, i64 0, !dbg !104
  %643 = extractelement <4 x float> %495, i64 1, !dbg !104
  %644 = fcmp ogt float %642, %643, !dbg !104
  %645 = fcmp uno float %642, 0.000000e+00, !dbg !105
  %646 = or i1 %644, %645, !dbg !106
  %647 = select i1 %646, float %642, float %643, !dbg !107
  %648 = extractelement <4 x float> %495, i64 2, !dbg !104
  %649 = extractelement <4 x float> %495, i64 3, !dbg !104
  %650 = fcmp ogt float %648, %649, !dbg !104
  %651 = fcmp uno float %648, 0.000000e+00, !dbg !105
  %652 = or i1 %650, %651, !dbg !106
  %653 = select i1 %652, float %648, float %649, !dbg !107
  %654 = bitcast float %647 to i32, !dbg !102
  %655 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %654, i32 16, i32 31), !dbg !102
  %656 = bitcast i32 %655 to float, !dbg !102
  %657 = fcmp ogt float %647, %656, !dbg !104
  %658 = fcmp uno float %647, 0.000000e+00, !dbg !105
  %659 = or i1 %658, %657, !dbg !106
  %660 = select i1 %659, float %647, float %656, !dbg !107
  %661 = bitcast float %660 to i32, !dbg !102
  %662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %661, i32 8, i32 31), !dbg !102
  %663 = bitcast i32 %662 to float, !dbg !102
  %664 = fcmp ogt float %660, %663, !dbg !104
  %665 = fcmp uno float %660, 0.000000e+00, !dbg !105
  %666 = or i1 %664, %665, !dbg !106
  %667 = select i1 %666, float %660, float %663, !dbg !107
  %668 = bitcast float %667 to i32, !dbg !102
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %668, i32 4, i32 31), !dbg !102
  %670 = bitcast i32 %669 to float, !dbg !102
  %671 = fcmp ogt float %667, %670, !dbg !104
  %672 = fcmp uno float %667, 0.000000e+00, !dbg !105
  %673 = or i1 %671, %672, !dbg !106
  %674 = select i1 %673, float %667, float %670, !dbg !107
  %675 = bitcast float %674 to i32, !dbg !102
  %676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 2, i32 31), !dbg !102
  %677 = bitcast i32 %676 to float, !dbg !102
  %678 = fcmp ogt float %674, %677, !dbg !104
  %679 = fcmp uno float %674, 0.000000e+00, !dbg !105
  %680 = or i1 %678, %679, !dbg !106
  %681 = select i1 %680, float %674, float %677, !dbg !107
  %682 = bitcast float %681 to i32, !dbg !102
  %683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %682, i32 1, i32 31), !dbg !102
  %684 = bitcast i32 %683 to float, !dbg !102
  %685 = fcmp ogt float %681, %684, !dbg !104
  %686 = fcmp uno float %681, 0.000000e+00, !dbg !105
  %687 = or i1 %685, %686, !dbg !106
  %688 = bitcast float %653 to i32, !dbg !102
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %688, i32 16, i32 31), !dbg !102
  %690 = bitcast i32 %689 to float, !dbg !102
  %691 = fcmp ogt float %653, %690, !dbg !104
  %692 = fcmp uno float %653, 0.000000e+00, !dbg !105
  %693 = or i1 %692, %691, !dbg !106
  %694 = select i1 %693, float %653, float %690, !dbg !107
  %695 = bitcast float %694 to i32, !dbg !102
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 8, i32 31), !dbg !102
  %697 = bitcast i32 %696 to float, !dbg !102
  %698 = fcmp ogt float %694, %697, !dbg !104
  %699 = fcmp uno float %694, 0.000000e+00, !dbg !105
  %700 = or i1 %698, %699, !dbg !106
  %701 = select i1 %700, float %694, float %697, !dbg !107
  %702 = bitcast float %701 to i32, !dbg !102
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 4, i32 31), !dbg !102
  %704 = bitcast i32 %703 to float, !dbg !102
  %705 = fcmp ogt float %701, %704, !dbg !104
  %706 = fcmp uno float %701, 0.000000e+00, !dbg !105
  %707 = or i1 %705, %706, !dbg !106
  %708 = select i1 %707, float %701, float %704, !dbg !107
  %709 = bitcast float %708 to i32, !dbg !102
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 2, i32 31), !dbg !102
  %711 = bitcast i32 %710 to float, !dbg !102
  %712 = fcmp ogt float %708, %711, !dbg !104
  %713 = fcmp uno float %708, 0.000000e+00, !dbg !105
  %714 = or i1 %712, %713, !dbg !106
  %715 = select i1 %714, float %708, float %711, !dbg !107
  %716 = bitcast float %715 to i32, !dbg !102
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 1, i32 31), !dbg !102
  %718 = bitcast i32 %717 to float, !dbg !102
  %719 = fcmp ogt float %715, %718, !dbg !104
  %720 = fcmp uno float %715, 0.000000e+00, !dbg !105
  %721 = or i1 %719, %720, !dbg !106
  %722 = select i1 %687, i32 %682, i32 %683, !dbg !107
  %723 = insertelement <1 x i32> poison, i32 %722, i64 0, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %590, <1 x i32> %723, i1 %253) #5, !dbg !102
  %724 = select i1 %721, i32 %716, i32 %717, !dbg !107
  %725 = insertelement <1 x i32> poison, i32 %724, i64 0, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %594, <1 x i32> %725, i1 %253) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %726 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %597) #5, !dbg !102
  %727 = bitcast i32 %726 to float, !dbg !102
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %726, i32 16, i32 31), !dbg !102
  %729 = bitcast i32 %728 to float, !dbg !102
  %730 = fcmp ogt float %727, %729, !dbg !104
  %731 = fcmp uno float %727, 0.000000e+00, !dbg !105
  %732 = or i1 %731, %730, !dbg !106
  %733 = select i1 %732, float %727, float %729, !dbg !107
  %734 = bitcast float %733 to i32, !dbg !102
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 8, i32 31), !dbg !102
  %736 = bitcast i32 %735 to float, !dbg !102
  %737 = fcmp ogt float %733, %736, !dbg !104
  %738 = fcmp uno float %733, 0.000000e+00, !dbg !105
  %739 = or i1 %737, %738, !dbg !106
  %740 = select i1 %739, float %733, float %736, !dbg !107
  %741 = bitcast float %740 to i32, !dbg !102
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 4, i32 31), !dbg !102
  %743 = bitcast i32 %742 to float, !dbg !102
  %744 = fcmp ogt float %740, %743, !dbg !104
  %745 = fcmp uno float %740, 0.000000e+00, !dbg !105
  %746 = or i1 %744, %745, !dbg !106
  %747 = select i1 %746, float %740, float %743, !dbg !107
  %748 = bitcast float %747 to i32, !dbg !102
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 2, i32 31), !dbg !102
  %750 = bitcast i32 %749 to float, !dbg !102
  %751 = fcmp ogt float %747, %750, !dbg !104
  %752 = fcmp uno float %747, 0.000000e+00, !dbg !105
  %753 = or i1 %751, %752, !dbg !106
  %754 = select i1 %753, float %747, float %750, !dbg !107
  %755 = bitcast float %754 to i32, !dbg !102
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 1, i32 31), !dbg !102
  %757 = bitcast i32 %756 to float, !dbg !102
  %758 = fcmp ogt float %754, %757, !dbg !104
  %759 = fcmp uno float %754, 0.000000e+00, !dbg !105
  %760 = or i1 %758, %759, !dbg !106
  %761 = select i1 %760, i32 %755, i32 %756, !dbg !107
  %762 = insertelement <1 x i32> poison, i32 %761, i64 0, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %762, i1 %633) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %763 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !102
  %764 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %765 = bitcast float %763 to i32, !dbg !108
  %766 = bitcast float %764 to i32, !dbg !108
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %765, i32 %766, i1 true) #5, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %767 = load float, ptr addrspace(3) %640, align 4, !dbg !108
  %768 = sext i32 %507 to i64, !dbg !109
  %769 = getelementptr bfloat, ptr addrspace(1) %4, i64 %768, !dbg !109
  %770 = fptrunc float %641 to bfloat, !dbg !101
  %771 = and i32 %21, 1022, !dbg !101
  %772 = icmp eq i32 %771, 0, !dbg !101
  %773 = bitcast bfloat %770 to i16, !dbg !101
  %774 = and i1 %772, %508, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %773, ptr addrspace(1) %769, i1 %774) #5, !dbg !101
  %775 = getelementptr bfloat, ptr addrspace(1) %5, i64 %768, !dbg !110
  %776 = fptrunc float %767 to bfloat, !dbg !108
  %777 = bitcast bfloat %776 to i16, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %775, i1 %774) #5, !dbg !108
  %778 = getelementptr bfloat, ptr addrspace(1) %6, i64 %768, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %773, ptr addrspace(1) %778, i1 %774) #5, !dbg !112
  %779 = getelementptr bfloat, ptr addrspace(1) %7, i64 %768, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %779, i1 %774) #5, !dbg !114
  %780 = getelementptr bfloat, ptr addrspace(1) %8, i64 %768, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %773, ptr addrspace(1) %780, i1 %774) #5, !dbg !116
  %781 = getelementptr bfloat, ptr addrspace(1) %9, i64 %768, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %781, i1 %774) #5, !dbg !118
  %782 = getelementptr bfloat, ptr addrspace(1) %10, i64 %768, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %773, ptr addrspace(1) %782, i1 %774) #5, !dbg !120
  %783 = getelementptr bfloat, ptr addrspace(1) %11, i64 %768, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %783, i1 %774) #5, !dbg !122
  %.inv = fcmp oge float %636, 0.000000e+00, !dbg !123
  %784 = select i1 %.inv, float 0.000000e+00, float %636, !dbg !123
  %.inv4 = fcmp oge float %637, 0.000000e+00, !dbg !123
  %785 = select i1 %.inv4, float 0.000000e+00, float %637, !dbg !123
  %786 = fsub float 0.000000e+00, %784, !dbg !125
  %787 = fsub float 0.000000e+00, %785, !dbg !125
  %.inv5 = fcmp ole float %763, 0.000000e+00, !dbg !126
  %788 = select i1 %.inv5, float 0.000000e+00, float %763, !dbg !126
  %.inv6 = fcmp ole float %764, 0.000000e+00, !dbg !126
  %789 = select i1 %.inv6, float 0.000000e+00, float %764, !dbg !126
  %790 = fcmp ogt float %786, %788, !dbg !128
  %791 = fcmp ogt float %787, %789, !dbg !128
  %792 = fcmp uno float %786, 0.000000e+00, !dbg !130
  %793 = fcmp uno float %787, 0.000000e+00, !dbg !130
  %794 = or i1 %792, %790, !dbg !131
  %795 = or i1 %793, %791, !dbg !131
  %796 = select i1 %794, float %786, float %788, !dbg !132
  %797 = select i1 %795, float %787, float %789, !dbg !132
  %798 = fmul float %796, 0x3F80204080000000, !dbg !133
  %799 = fmul float %797, 0x3F80204080000000, !dbg !133
  %800 = fcmp ogt float %798, 0x3EE4F8B580000000, !dbg !134
  %801 = fcmp ogt float %799, 0x3EE4F8B580000000, !dbg !134
  %802 = fcmp uno float %798, 0.000000e+00, !dbg !136
  %803 = fcmp uno float %799, 0.000000e+00, !dbg !136
  %804 = or i1 %800, %802, !dbg !137
  %805 = or i1 %801, %803, !dbg !137
  %806 = select i1 %804, float %798, float 0x3EE4F8B580000000, !dbg !138
  %807 = select i1 %805, float %799, float 0x3EE4F8B580000000, !dbg !138
  %808 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %806), !dbg !139
  %809 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %807), !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %810 = bitcast float %808 to <1 x i32>, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %810, i1 true) #5, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %810, i1 true) #5, !dbg !140
  %811 = bitcast float %809 to <1 x i32>, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %811, i1 true) #5, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %811, i1 true) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %812 = lshr exact i32 %22, 6, !dbg !140
  %813 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %812, !dbg !140
  %814 = load float, ptr addrspace(3) %813, align 8, !dbg !140
  %815 = getelementptr bfloat, ptr addrspace(1) %3, i64 %33, !dbg !141
  %816 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %815, i1 %25) #5, !dbg !142
  %817 = extractvalue { i32, i32 } %816, 0, !dbg !142
  %818 = bitcast i32 %817 to <2 x bfloat>, !dbg !142
  %819 = extractvalue { i32, i32 } %816, 1, !dbg !142
  %820 = bitcast i32 %819 to <2 x bfloat>, !dbg !142
  %821 = extractelement <2 x bfloat> %818, i64 0, !dbg !142
  %822 = extractelement <2 x bfloat> %818, i64 1, !dbg !142
  %823 = extractelement <2 x bfloat> %820, i64 0, !dbg !142
  %824 = extractelement <2 x bfloat> %820, i64 1, !dbg !142
  %825 = fpext bfloat %821 to float, !dbg !143
  %826 = fpext bfloat %822 to float, !dbg !143
  %827 = fpext bfloat %823 to float, !dbg !143
  %828 = fpext bfloat %824 to float, !dbg !143
  %829 = fmul float %814, %825, !dbg !140
  %830 = fmul float %814, %826, !dbg !140
  %831 = fmul float %814, %827, !dbg !140
  %832 = fmul float %814, %828, !dbg !140
  %833 = tail call float @llvm.nvvm.round.f(float %829) #5, !dbg !144
  %834 = tail call float @llvm.nvvm.round.f(float %830) #5, !dbg !144
  %835 = tail call float @llvm.nvvm.round.f(float %831) #5, !dbg !144
  %836 = tail call float @llvm.nvvm.round.f(float %832) #5, !dbg !144
  %837 = insertelement <4 x float> poison, float %833, i64 0, !dbg !145
  %838 = insertelement <4 x float> %837, float %834, i64 1, !dbg !145
  %839 = insertelement <4 x float> %838, float %835, i64 2, !dbg !145
  %840 = insertelement <4 x float> %839, float %836, i64 3, !dbg !145
  %841 = fcmp ogt <4 x float> %840, splat (float -1.270000e+02), !dbg !145
  %842 = fcmp uno <4 x float> %840, zeroinitializer, !dbg !147
  %843 = or <4 x i1> %841, %842, !dbg !148
  %844 = select <4 x i1> %843, <4 x float> %840, <4 x float> splat (float -1.270000e+02), !dbg !149
  %845 = fcmp olt <4 x float> %844, splat (float 1.270000e+02), !dbg !150
  %846 = fcmp uno <4 x float> %844, zeroinitializer, !dbg !152
  %847 = or <4 x i1> %845, %846, !dbg !153
  %848 = fptosi <4 x float> %844 to <4 x i8>, !dbg !154
  %849 = select <4 x i1> %847, <4 x i8> %848, <4 x i8> splat (i8 127), !dbg !155
  %850 = getelementptr i8, ptr addrspace(1) %12, i64 %33, !dbg !156
  %851 = bitcast <4 x i8> %849 to i32, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %851, ptr addrspace(1) %850, i1 %25) #5, !dbg !157
  %852 = getelementptr i8, ptr addrspace(1) %13, i64 %33, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %851, ptr addrspace(1) %852, i1 %25) #5, !dbg !159
  %853 = getelementptr i8, ptr addrspace(1) %14, i64 %33, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %851, ptr addrspace(1) %853, i1 %25) #5, !dbg !161
  %854 = getelementptr i8, ptr addrspace(1) %15, i64 %33, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %851, ptr addrspace(1) %854, i1 %25) #5, !dbg !163
  %855 = getelementptr bfloat, ptr addrspace(1) %3, i64 %57, !dbg !141
  %856 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %855, i1 %59) #5, !dbg !142
  %857 = extractvalue { i32, i32 } %856, 0, !dbg !142
  %858 = bitcast i32 %857 to <2 x bfloat>, !dbg !142
  %859 = extractvalue { i32, i32 } %856, 1, !dbg !142
  %860 = bitcast i32 %859 to <2 x bfloat>, !dbg !142
  %861 = extractelement <2 x bfloat> %858, i64 0, !dbg !142
  %862 = extractelement <2 x bfloat> %858, i64 1, !dbg !142
  %863 = extractelement <2 x bfloat> %860, i64 0, !dbg !142
  %864 = extractelement <2 x bfloat> %860, i64 1, !dbg !142
  %865 = fpext bfloat %861 to float, !dbg !143
  %866 = fpext bfloat %862 to float, !dbg !143
  %867 = fpext bfloat %863 to float, !dbg !143
  %868 = fpext bfloat %864 to float, !dbg !143
  %869 = fmul float %814, %865, !dbg !140
  %870 = fmul float %814, %866, !dbg !140
  %871 = fmul float %814, %867, !dbg !140
  %872 = fmul float %814, %868, !dbg !140
  %873 = tail call float @llvm.nvvm.round.f(float %869) #5, !dbg !144
  %874 = tail call float @llvm.nvvm.round.f(float %870) #5, !dbg !144
  %875 = tail call float @llvm.nvvm.round.f(float %871) #5, !dbg !144
  %876 = tail call float @llvm.nvvm.round.f(float %872) #5, !dbg !144
  %877 = insertelement <4 x float> poison, float %873, i64 0, !dbg !145
  %878 = insertelement <4 x float> %877, float %874, i64 1, !dbg !145
  %879 = insertelement <4 x float> %878, float %875, i64 2, !dbg !145
  %880 = insertelement <4 x float> %879, float %876, i64 3, !dbg !145
  %881 = fcmp ogt <4 x float> %880, splat (float -1.270000e+02), !dbg !145
  %882 = fcmp uno <4 x float> %880, zeroinitializer, !dbg !147
  %883 = or <4 x i1> %881, %882, !dbg !148
  %884 = select <4 x i1> %883, <4 x float> %880, <4 x float> splat (float -1.270000e+02), !dbg !149
  %885 = fcmp olt <4 x float> %884, splat (float 1.270000e+02), !dbg !150
  %886 = fcmp uno <4 x float> %884, zeroinitializer, !dbg !152
  %887 = or <4 x i1> %885, %886, !dbg !153
  %888 = fptosi <4 x float> %884 to <4 x i8>, !dbg !154
  %889 = select <4 x i1> %887, <4 x i8> %888, <4 x i8> splat (i8 127), !dbg !155
  %890 = getelementptr i8, ptr addrspace(1) %12, i64 %57, !dbg !156
  %891 = bitcast <4 x i8> %889 to i32, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %891, ptr addrspace(1) %890, i1 %59) #5, !dbg !157
  %892 = getelementptr i8, ptr addrspace(1) %13, i64 %57, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %891, ptr addrspace(1) %892, i1 %59) #5, !dbg !159
  %893 = getelementptr i8, ptr addrspace(1) %14, i64 %57, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %891, ptr addrspace(1) %893, i1 %59) #5, !dbg !161
  %894 = getelementptr i8, ptr addrspace(1) %15, i64 %57, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %891, ptr addrspace(1) %894, i1 %59) #5, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 44, column: 62, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 33, column: 31, scope: !6)
!24 = !DILocation(line: 34, column: 29, scope: !6)
!25 = !DILocation(line: 38, column: 61, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 42, column: 51, scope: !6)
!30 = !DILocation(line: 209, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 210, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 210, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 211, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 211, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 211, column: 22, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 217, column: 21, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!39 = !DILocation(line: 47, column: 79, scope: !6)
!40 = !DILocation(line: 218, column: 28, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 219, column: 39, scope: !38, inlinedAt: !39)
!42 = !DILocation(line: 219, column: 60, scope: !38, inlinedAt: !39)
!43 = !DILocation(line: 219, column: 49, scope: !38, inlinedAt: !39)
!44 = !DILocation(line: 221, column: 25, scope: !38, inlinedAt: !39)
!45 = !DILocation(line: 221, column: 17, scope: !38, inlinedAt: !39)
!46 = !DILocation(line: 222, column: 15, scope: !38, inlinedAt: !39)
!47 = !DILocation(line: 222, column: 30, scope: !38, inlinedAt: !39)
!48 = !DILocation(line: 222, column: 38, scope: !38, inlinedAt: !39)
!49 = !DILocation(line: 222, column: 49, scope: !38, inlinedAt: !39)
!50 = !DILocation(line: 222, column: 22, scope: !38, inlinedAt: !39)
!51 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !39)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 32, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 55, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 61, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 59, column: 113, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !75)
!75 = !DILocation(line: 82, column: 47, scope: !6)
!76 = !DILocation(line: 61, column: 102, scope: !6)
!77 = !DILocation(line: 63, column: 95, scope: !6)
!78 = !DILocation(line: 74, column: 24, scope: !6)
!79 = !DILocation(line: 76, column: 24, scope: !6)
!80 = !DILocation(line: 77, column: 24, scope: !6)
!81 = !DILocation(line: 79, column: 24, scope: !6)
!82 = !DILocation(line: 80, column: 24, scope: !6)
!83 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !75)
!84 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !75)
!85 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !75)
!86 = !DILocation(line: 83, column: 50, scope: !6)
!87 = !DILocation(line: 86, column: 53, scope: !6)
!88 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !89)
!89 = !DILocation(line: 84, column: 47, scope: !6)
!90 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !89)
!91 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !89)
!92 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !89)
!93 = !DILocation(line: 85, column: 50, scope: !6)
!94 = !DILocation(line: 86, column: 29, scope: !6)
!95 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !96)
!96 = !DILocation(line: 87, column: 40, scope: !6)
!97 = !DILocation(line: 94, column: 15, scope: !38, inlinedAt: !96)
!98 = !DILocation(line: 96, column: 16, scope: !38, inlinedAt: !96)
!99 = !DILocation(line: 97, column: 29, scope: !38, inlinedAt: !96)
!100 = !DILocation(line: 96, column: 21, scope: !38, inlinedAt: !96)
!101 = !DILocation(line: 89, column: 37, scope: !6)
!102 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !103)
!103 = !DILocation(line: 88, column: 40, scope: !6)
!104 = !DILocation(line: 102, column: 15, scope: !38, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 21, scope: !38, inlinedAt: !103)
!106 = !DILocation(line: 104, column: 16, scope: !38, inlinedAt: !103)
!107 = !DILocation(line: 105, column: 29, scope: !38, inlinedAt: !103)
!108 = !DILocation(line: 90, column: 37, scope: !6)
!109 = !DILocation(line: 89, column: 25, scope: !6)
!110 = !DILocation(line: 90, column: 25, scope: !6)
!111 = !DILocation(line: 91, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 37, scope: !6)
!113 = !DILocation(line: 92, column: 25, scope: !6)
!114 = !DILocation(line: 92, column: 37, scope: !6)
!115 = !DILocation(line: 93, column: 25, scope: !6)
!116 = !DILocation(line: 93, column: 37, scope: !6)
!117 = !DILocation(line: 94, column: 25, scope: !6)
!118 = !DILocation(line: 94, column: 37, scope: !6)
!119 = !DILocation(line: 95, column: 25, scope: !6)
!120 = !DILocation(line: 95, column: 37, scope: !6)
!121 = !DILocation(line: 96, column: 26, scope: !6)
!122 = !DILocation(line: 96, column: 38, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !124)
!124 = !DILocation(line: 105, column: 46, scope: !6)
!125 = !DILocation(line: 106, column: 17, scope: !6)
!126 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !127)
!127 = !DILocation(line: 107, column: 46, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !129)
!129 = !DILocation(line: 108, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !129)
!133 = !DILocation(line: 110, column: 24, scope: !6)
!134 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !135)
!135 = !DILocation(line: 113, column: 46, scope: !6)
!136 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !135)
!137 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !135)
!138 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !135)
!139 = !DILocation(line: 116, column: 25, scope: !6)
!140 = !DILocation(line: 119, column: 24, scope: !6)
!141 = !DILocation(line: 103, column: 36, scope: !6)
!142 = !DILocation(line: 103, column: 53, scope: !6)
!143 = !DILocation(line: 103, column: 115, scope: !6)
!144 = !DILocation(line: 120, column: 36, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !146)
!148 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !146)
!149 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !146)
!150 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !151)
!151 = !DILocation(line: 125, column: 46, scope: !6)
!152 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !151)
!153 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !151)
!154 = !DILocation(line: 127, column: 25, scope: !6)
!155 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !151)
!156 = !DILocation(line: 128, column: 30, scope: !6)
!157 = !DILocation(line: 128, column: 54, scope: !6)
!158 = !DILocation(line: 129, column: 30, scope: !6)
!159 = !DILocation(line: 129, column: 54, scope: !6)
!160 = !DILocation(line: 130, column: 30, scope: !6)
!161 = !DILocation(line: 130, column: 54, scope: !6)
!162 = !DILocation(line: 131, column: 30, scope: !6)
!163 = !DILocation(line: 131, column: 54, scope: !6)
!164 = !DILocation(line: 97, column: 4, scope: !6)
