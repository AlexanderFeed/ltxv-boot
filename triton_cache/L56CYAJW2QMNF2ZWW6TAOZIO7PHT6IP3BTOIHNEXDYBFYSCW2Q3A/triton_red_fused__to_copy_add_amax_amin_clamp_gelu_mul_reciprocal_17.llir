; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 1, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 256, !dbg !11
  %.lobit = lshr exact i32 %16, 8, !dbg !11
  %17 = and i32 %15, 31, !dbg !11
  %18 = or disjoint i32 %.lobit, %14, !dbg !12
  %19 = icmp slt i32 %18, 3600, !dbg !13
  %20 = icmp slt i32 %14, 3600, !dbg !13
  %21 = shl i32 %15, 1, !dbg !14
  %22 = and i32 %21, 1022, !dbg !14
  %23 = shl i32 %15, 2, !dbg !14
  %24 = and i32 %23, 1020, !dbg !14
  %25 = sext i32 %18 to i64, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !15
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %31 = bitcast i16 %30 to bfloat, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !17
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %37 = bitcast i16 %36 to bfloat, !dbg !18
  %38 = mul i32 %18, 12288, !dbg !19
  %.inv = fcmp oge bfloat %31, 0xR0000, !dbg !20
  %39 = select i1 %.inv, bfloat 0xR0000, bfloat %31, !dbg !20
  %40 = fpext bfloat %39 to float, !dbg !20
  %41 = fsub float 0.000000e+00, %40, !dbg !24
  %.inv3 = fcmp ole bfloat %37, 0xR0000, !dbg !25
  %42 = select i1 %.inv3, bfloat 0xR0000, bfloat %37, !dbg !25
  %43 = fpext bfloat %42 to float, !dbg !25
  %44 = fcmp ogt float %41, %43, !dbg !27
  %45 = fcmp uno float %41, 0.000000e+00, !dbg !29
  %46 = or i1 %45, %44, !dbg !30
  %47 = select i1 %46, float %41, float %43, !dbg !31
  %48 = fmul float %47, 0x3F80204080000000, !dbg !32
  %49 = fcmp ogt float %48, 0x3EE4F8B580000000, !dbg !33
  %50 = fcmp uno float %48, 0.000000e+00, !dbg !35
  %51 = or i1 %49, %50, !dbg !36
  %52 = select i1 %51, float %48, float 0x3EE4F8B580000000, !dbg !37
  %53 = or disjoint i32 %38, %24
  %54 = and i32 %23, 2044
  %55 = lshr i32 %23, 8
  %56 = and i32 %55, 4
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %54
  %59 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %60 = getelementptr inbounds nuw i8, ptr addrspace(3) %59, i32 4112
  %61 = zext nneg i32 %22 to i64, !dbg !38
  %62 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 4
  %63 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 8
  %64 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 12
  %65 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !39
  %66 = shufflevector <4 x i1> %65, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %67, !dbg !38

67:                                               ; preds = %12, %__nv_tanhf.exit150
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit150 ]
  %68 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %283, %__nv_tanhf.exit150 ]
  %69 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %284, %__nv_tanhf.exit150 ]
  %70 = or disjoint i64 %indvars.iv, %61, !dbg !40
  %71 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %72 = add i32 %53, %71, !dbg !41
  %73 = sext i32 %72 to i64, !dbg !42
  %74 = getelementptr i32, ptr addrspace(1) %0, i64 %73, !dbg !42
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %19) #5, !dbg !43
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !43
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !43
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !43
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !43
  %80 = getelementptr bfloat, ptr addrspace(1) %3, i64 %70, !dbg !44
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %80, i1 true) #5, !dbg !45
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !45
  %83 = getelementptr bfloat, ptr addrspace(1) %4, i64 %70, !dbg !46
  %84 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %83, i1 true) #5, !dbg !47
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !47
  %86 = sitofp i32 %76 to float, !dbg !48
  %87 = sitofp i32 %77 to float, !dbg !48
  %88 = sitofp i32 %78 to float, !dbg !48
  %89 = sitofp i32 %79 to float, !dbg !48
  %90 = fmul float %52, %86, !dbg !49
  %91 = fmul float %52, %87, !dbg !49
  %92 = fmul float %52, %88, !dbg !49
  %93 = fmul float %52, %89, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %94 = bitcast float %90 to i32, !dbg !49
  %95 = bitcast float %91 to i32, !dbg !49
  %96 = bitcast float %92 to i32, !dbg !49
  %97 = bitcast float %93 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %58, i32 %94, i32 %95, i32 %96, i32 %97, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %98 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !50
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !50
  %100 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !51
  %101 = shufflevector <2 x float> %100, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !51
  %102 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !49
  %103 = load <2 x float>, ptr addrspace(3) %60, align 8, !dbg !49
  %104 = shufflevector <2 x float> %103, <2 x float> %102, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !52
  %105 = fmul <4 x float> %104, %99, !dbg !52
  %106 = fadd <4 x float> %105, %101, !dbg !53
  %107 = fmul <4 x float> %106, splat (float 5.000000e-01), !dbg !54
  %108 = extractelement <4 x float> %106, i64 1, !dbg !55
  %109 = fmul float %108, %108, !dbg !56
  %110 = extractelement <4 x float> %106, i64 3, !dbg !55
  %111 = fmul float %110, %110, !dbg !56
  %112 = extractelement <4 x float> %106, i64 0, !dbg !55
  %113 = fmul float %112, %112, !dbg !56
  %114 = extractelement <4 x float> %106, i64 2, !dbg !55
  %115 = fmul float %114, %114, !dbg !56
  %116 = fmul float %108, %109, !dbg !57
  %117 = fmul float %110, %111, !dbg !57
  %118 = fmul float %112, %113, !dbg !57
  %119 = fmul float %114, %115, !dbg !57
  %120 = fmul float %116, 0x3FA6E4E260000000, !dbg !58
  %121 = fmul float %117, 0x3FA6E4E260000000, !dbg !58
  %122 = fmul float %118, 0x3FA6E4E260000000, !dbg !58
  %123 = fmul float %119, 0x3FA6E4E260000000, !dbg !58
  %124 = fadd float %108, %120, !dbg !55
  %125 = fadd float %110, %121, !dbg !55
  %126 = fadd float %112, %122, !dbg !55
  %127 = fadd float %114, %123, !dbg !55
  %128 = fmul float %124, 0x3FE9884540000000, !dbg !59
  %129 = fmul float %125, 0x3FE9884540000000, !dbg !59
  %130 = fmul float %126, 0x3FE9884540000000, !dbg !59
  %131 = fmul float %127, 0x3FE9884540000000, !dbg !59
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i75 = icmp eq i32 %132, 0, !dbg !60
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !60
  %134 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !60
  %.01.i76 = select i1 %.not.i75, float %134, float %133, !dbg !60
  %135 = fcmp ult float %.01.i76, 0x3FE3333340000000, !dbg !60
  br i1 %135, label %__internal_fmad.exit3.i82, label %__internal_fmad.exit1.i77, !dbg !60

__internal_fmad.exit1.i77:                        ; preds = %67
  %136 = fmul float %.01.i76, 0x4007154760000000, !dbg !60
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %136) #5, !dbg !60
  %138 = fadd float %137, 1.000000e+00, !dbg !60
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #6, !dbg !60, !srcloc !61
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i78 = icmp eq i32 %140, 0, !dbg !60
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i79 = select i1 %.not6.i78, float %142, float %141, !dbg !60
  %143 = fcmp oge float %.01.i76, 0x4022059680000000, !dbg !60
  %s.0.i80 = select i1 %143, float 1.000000e+00, float %.03.i79, !dbg !60
  %144 = bitcast float %s.0.i80 to i32, !dbg !60
  %145 = bitcast float %128 to i32, !dbg !60
  %146 = and i32 %145, -2147483648, !dbg !60
  %147 = or i32 %146, %144, !dbg !60
  %148 = bitcast i32 %147 to float, !dbg !60
  br label %__nv_tanhf.exit93, !dbg !60

__internal_fmad.exit3.i82:                        ; preds = %67
  %149 = fmul float %128, %128, !dbg !60
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i83 = icmp eq i32 %150, 0, !dbg !60
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !60
  %152 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i84 = select i1 %.not1.i83, float %152, float %151, !dbg !60
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i85 = icmp eq i32 %153, 0, !dbg !60
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i84, float %149, float 0x3FC10B2820000000) #5, !dbg !60
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i84, float %149, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i86 = select i1 %.not2.i85, float %155, float %154, !dbg !60
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i87 = icmp eq i32 %156, 0, !dbg !60
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i86, float %149, float 0xBFD5553DA0000000) #5, !dbg !60
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i86, float %149, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i88 = select i1 %.not3.i87, float %158, float %157, !dbg !60
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i89 = icmp eq i32 %159, 0, !dbg !60
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i88, float %149, float 0.000000e+00) #5, !dbg !60
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i88, float %149, float 0.000000e+00) #5, !dbg !60
  %.04.i90 = select i1 %.not4.i89, float %161, float %160, !dbg !60
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i91 = icmp eq i32 %162, 0, !dbg !60
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i90, float %128, float %128) #5, !dbg !60
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i90, float %128, float %128) #5, !dbg !60
  %.02.i92 = select i1 %.not5.i91, float %164, float %163, !dbg !60
  br label %__nv_tanhf.exit93, !dbg !60

__nv_tanhf.exit93:                                ; preds = %__internal_fmad.exit1.i77, %__internal_fmad.exit3.i82
  %s.1.i81 = phi float [ %148, %__internal_fmad.exit1.i77 ], [ %.02.i92, %__internal_fmad.exit3.i82 ], !dbg !60
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i94 = icmp eq i32 %165, 0, !dbg !60
  %166 = tail call float @llvm.nvvm.fabs.ftz.f(float %129) #5, !dbg !60
  %167 = tail call float @llvm.nvvm.fabs.f(float %129) #5, !dbg !60
  %.01.i95 = select i1 %.not.i94, float %167, float %166, !dbg !60
  %168 = fcmp ult float %.01.i95, 0x3FE3333340000000, !dbg !60
  br i1 %168, label %__internal_fmad.exit3.i101, label %__internal_fmad.exit1.i96, !dbg !60

__internal_fmad.exit1.i96:                        ; preds = %__nv_tanhf.exit93
  %169 = fmul float %.01.i95, 0x4007154760000000, !dbg !60
  %170 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %169) #5, !dbg !60
  %171 = fadd float %170, 1.000000e+00, !dbg !60
  %172 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %171) #6, !dbg !60, !srcloc !61
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i97 = icmp eq i32 %173, 0, !dbg !60
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i98 = select i1 %.not6.i97, float %175, float %174, !dbg !60
  %176 = fcmp oge float %.01.i95, 0x4022059680000000, !dbg !60
  %s.0.i99 = select i1 %176, float 1.000000e+00, float %.03.i98, !dbg !60
  %177 = bitcast float %s.0.i99 to i32, !dbg !60
  %178 = bitcast float %129 to i32, !dbg !60
  %179 = and i32 %178, -2147483648, !dbg !60
  %180 = or i32 %179, %177, !dbg !60
  %181 = bitcast i32 %180 to float, !dbg !60
  br label %__nv_tanhf.exit112, !dbg !60

__internal_fmad.exit3.i101:                       ; preds = %__nv_tanhf.exit93
  %182 = fmul float %129, %129, !dbg !60
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i102 = icmp eq i32 %183, 0, !dbg !60
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !60
  %185 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i103 = select i1 %.not1.i102, float %185, float %184, !dbg !60
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i104 = icmp eq i32 %186, 0, !dbg !60
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i103, float %182, float 0x3FC10B2820000000) #5, !dbg !60
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i103, float %182, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i105 = select i1 %.not2.i104, float %188, float %187, !dbg !60
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i106 = icmp eq i32 %189, 0, !dbg !60
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i105, float %182, float 0xBFD5553DA0000000) #5, !dbg !60
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i105, float %182, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i107 = select i1 %.not3.i106, float %191, float %190, !dbg !60
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i108 = icmp eq i32 %192, 0, !dbg !60
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i107, float %182, float 0.000000e+00) #5, !dbg !60
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i107, float %182, float 0.000000e+00) #5, !dbg !60
  %.04.i109 = select i1 %.not4.i108, float %194, float %193, !dbg !60
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i110 = icmp eq i32 %195, 0, !dbg !60
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i109, float %129, float %129) #5, !dbg !60
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i109, float %129, float %129) #5, !dbg !60
  %.02.i111 = select i1 %.not5.i110, float %197, float %196, !dbg !60
  br label %__nv_tanhf.exit112, !dbg !60

__nv_tanhf.exit112:                               ; preds = %__internal_fmad.exit1.i96, %__internal_fmad.exit3.i101
  %s.1.i100 = phi float [ %181, %__internal_fmad.exit1.i96 ], [ %.02.i111, %__internal_fmad.exit3.i101 ], !dbg !60
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i113 = icmp eq i32 %198, 0, !dbg !60
  %199 = tail call float @llvm.nvvm.fabs.ftz.f(float %130) #5, !dbg !60
  %200 = tail call float @llvm.nvvm.fabs.f(float %130) #5, !dbg !60
  %.01.i114 = select i1 %.not.i113, float %200, float %199, !dbg !60
  %201 = fcmp ult float %.01.i114, 0x3FE3333340000000, !dbg !60
  br i1 %201, label %__internal_fmad.exit3.i120, label %__internal_fmad.exit1.i115, !dbg !60

__internal_fmad.exit1.i115:                       ; preds = %__nv_tanhf.exit112
  %202 = fmul float %.01.i114, 0x4007154760000000, !dbg !60
  %203 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %202) #5, !dbg !60
  %204 = fadd float %203, 1.000000e+00, !dbg !60
  %205 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %204) #6, !dbg !60, !srcloc !61
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i116 = icmp eq i32 %206, 0, !dbg !60
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i117 = select i1 %.not6.i116, float %208, float %207, !dbg !60
  %209 = fcmp oge float %.01.i114, 0x4022059680000000, !dbg !60
  %s.0.i118 = select i1 %209, float 1.000000e+00, float %.03.i117, !dbg !60
  %210 = bitcast float %s.0.i118 to i32, !dbg !60
  %211 = bitcast float %130 to i32, !dbg !60
  %212 = and i32 %211, -2147483648, !dbg !60
  %213 = or i32 %212, %210, !dbg !60
  %214 = bitcast i32 %213 to float, !dbg !60
  br label %__nv_tanhf.exit131, !dbg !60

__internal_fmad.exit3.i120:                       ; preds = %__nv_tanhf.exit112
  %215 = fmul float %130, %130, !dbg !60
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i121 = icmp eq i32 %216, 0, !dbg !60
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !60
  %218 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i122 = select i1 %.not1.i121, float %218, float %217, !dbg !60
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i123 = icmp eq i32 %219, 0, !dbg !60
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i122, float %215, float 0x3FC10B2820000000) #5, !dbg !60
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i122, float %215, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i124 = select i1 %.not2.i123, float %221, float %220, !dbg !60
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i125 = icmp eq i32 %222, 0, !dbg !60
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i124, float %215, float 0xBFD5553DA0000000) #5, !dbg !60
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i124, float %215, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i126 = select i1 %.not3.i125, float %224, float %223, !dbg !60
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i127 = icmp eq i32 %225, 0, !dbg !60
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i126, float %215, float 0.000000e+00) #5, !dbg !60
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i126, float %215, float 0.000000e+00) #5, !dbg !60
  %.04.i128 = select i1 %.not4.i127, float %227, float %226, !dbg !60
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i129 = icmp eq i32 %228, 0, !dbg !60
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i128, float %130, float %130) #5, !dbg !60
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i128, float %130, float %130) #5, !dbg !60
  %.02.i130 = select i1 %.not5.i129, float %230, float %229, !dbg !60
  br label %__nv_tanhf.exit131, !dbg !60

__nv_tanhf.exit131:                               ; preds = %__internal_fmad.exit1.i115, %__internal_fmad.exit3.i120
  %s.1.i119 = phi float [ %214, %__internal_fmad.exit1.i115 ], [ %.02.i130, %__internal_fmad.exit3.i120 ], !dbg !60
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i132 = icmp eq i32 %231, 0, !dbg !60
  %232 = tail call float @llvm.nvvm.fabs.ftz.f(float %131) #5, !dbg !60
  %233 = tail call float @llvm.nvvm.fabs.f(float %131) #5, !dbg !60
  %.01.i133 = select i1 %.not.i132, float %233, float %232, !dbg !60
  %234 = fcmp ult float %.01.i133, 0x3FE3333340000000, !dbg !60
  br i1 %234, label %__internal_fmad.exit3.i139, label %__internal_fmad.exit1.i134, !dbg !60

__internal_fmad.exit1.i134:                       ; preds = %__nv_tanhf.exit131
  %235 = fmul float %.01.i133, 0x4007154760000000, !dbg !60
  %236 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %235) #5, !dbg !60
  %237 = fadd float %236, 1.000000e+00, !dbg !60
  %238 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %237) #6, !dbg !60, !srcloc !61
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i135 = icmp eq i32 %239, 0, !dbg !60
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i136 = select i1 %.not6.i135, float %241, float %240, !dbg !60
  %242 = fcmp oge float %.01.i133, 0x4022059680000000, !dbg !60
  %s.0.i137 = select i1 %242, float 1.000000e+00, float %.03.i136, !dbg !60
  %243 = bitcast float %s.0.i137 to i32, !dbg !60
  %244 = bitcast float %131 to i32, !dbg !60
  %245 = and i32 %244, -2147483648, !dbg !60
  %246 = or i32 %245, %243, !dbg !60
  %247 = bitcast i32 %246 to float, !dbg !60
  br label %__nv_tanhf.exit150, !dbg !60

__internal_fmad.exit3.i139:                       ; preds = %__nv_tanhf.exit131
  %248 = fmul float %131, %131, !dbg !60
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i140 = icmp eq i32 %249, 0, !dbg !60
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !60
  %251 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i141 = select i1 %.not1.i140, float %251, float %250, !dbg !60
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i142 = icmp eq i32 %252, 0, !dbg !60
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i141, float %248, float 0x3FC10B2820000000) #5, !dbg !60
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i141, float %248, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i143 = select i1 %.not2.i142, float %254, float %253, !dbg !60
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i144 = icmp eq i32 %255, 0, !dbg !60
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i143, float %248, float 0xBFD5553DA0000000) #5, !dbg !60
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i143, float %248, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i145 = select i1 %.not3.i144, float %257, float %256, !dbg !60
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i146 = icmp eq i32 %258, 0, !dbg !60
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i145, float %248, float 0.000000e+00) #5, !dbg !60
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i145, float %248, float 0.000000e+00) #5, !dbg !60
  %.04.i147 = select i1 %.not4.i146, float %260, float %259, !dbg !60
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i148 = icmp eq i32 %261, 0, !dbg !60
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i147, float %131, float %131) #5, !dbg !60
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i147, float %131, float %131) #5, !dbg !60
  %.02.i149 = select i1 %.not5.i148, float %263, float %262, !dbg !60
  br label %__nv_tanhf.exit150, !dbg !60

__nv_tanhf.exit150:                               ; preds = %__internal_fmad.exit1.i134, %__internal_fmad.exit3.i139
  %s.1.i138 = phi float [ %247, %__internal_fmad.exit1.i134 ], [ %.02.i149, %__internal_fmad.exit3.i139 ], !dbg !60
  %264 = insertelement <4 x float> poison, float %s.1.i119, i64 0, !dbg !62
  %265 = insertelement <4 x float> %264, float %s.1.i81, i64 1, !dbg !62
  %266 = insertelement <4 x float> %265, float %s.1.i138, i64 2, !dbg !62
  %267 = insertelement <4 x float> %266, float %s.1.i100, i64 3, !dbg !62
  %268 = fadd <4 x float> %267, splat (float 1.000000e+00), !dbg !62
  %269 = fcmp uno <4 x float> %69, zeroinitializer, !dbg !63
  %270 = fcmp uno <4 x float> %68, zeroinitializer, !dbg !63
  %271 = fmul <4 x float> %107, %268, !dbg !65
  %272 = shufflevector <4 x float> %271, <4 x float> poison, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !66
  %273 = fcmp ogt <4 x float> %69, %272, !dbg !66
  %274 = fcmp olt <4 x float> %69, %272, !dbg !66
  %275 = shufflevector <4 x i1> %273, <4 x i1> %274, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !66
  %276 = or <4 x i1> %269, %275, !dbg !67
  %277 = select <4 x i1> %276, <4 x float> %69, <4 x float> %272, !dbg !68
  %278 = fcmp ogt <4 x float> %68, %271, !dbg !66
  %279 = fcmp olt <4 x float> %68, %271, !dbg !66
  %280 = shufflevector <4 x i1> %278, <4 x i1> %279, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !66
  %281 = or <4 x i1> %270, %280, !dbg !67
  %282 = select <4 x i1> %281, <4 x float> %68, <4 x float> %271, !dbg !68
  %283 = select <4 x i1> %66, <4 x float> %282, <4 x float> %68, !dbg !39
  %284 = select <4 x i1> %66, <4 x float> %277, <4 x float> %69, !dbg !39
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %286 = bitcast float %108 to i32, !dbg !70
  %287 = bitcast float %110 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %59, i32 %286, i32 %287, i1 true) #5, !dbg !70
  %288 = bitcast float %112 to i32, !dbg !70
  %289 = bitcast float %114 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %60, i32 %288, i32 %289, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.extract = load i32, ptr addrspace(3) %58, align 16, !dbg !70
  %.extract15 = load i32, ptr addrspace(3) %62, align 4, !dbg !70
  %.extract16 = load i32, ptr addrspace(3) %63, align 8, !dbg !70
  %.extract17 = load i32, ptr addrspace(3) %64, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %285, i1 %19) #5, !dbg !70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %290 = icmp samesign ult i64 %indvars.iv, 11264, !dbg !38
  br i1 %290, label %67, label %291, !dbg !38

291:                                              ; preds = %__nv_tanhf.exit150
  %292 = lshr i32 %15, 5, !dbg !11
  %293 = and i32 %15, 1, !dbg !11
  %294 = or disjoint i32 %14, %293, !dbg !12
  %295 = icmp slt i32 %294, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %296 = fcmp ogt <4 x float> %283, %284, !dbg !73
  %297 = extractelement <4 x float> %284, i64 3, !dbg !76
  %298 = fcmp uno float %297, 0.000000e+00, !dbg !76
  %299 = extractelement <4 x i1> %296, i64 3, !dbg !77
  %300 = or i1 %299, %298, !dbg !77
  %301 = extractelement <4 x float> %283, i64 3, !dbg !78
  %302 = select i1 %300, float %297, float %301, !dbg !78
  %303 = extractelement <4 x float> %284, i64 2, !dbg !76
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !76
  %305 = extractelement <4 x i1> %296, i64 2, !dbg !77
  %306 = or i1 %305, %304, !dbg !77
  %307 = extractelement <4 x float> %283, i64 2, !dbg !78
  %308 = select i1 %306, float %303, float %307, !dbg !78
  %309 = bitcast float %302 to i32, !dbg !71
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 16, i32 31), !dbg !71
  %311 = bitcast i32 %310 to float, !dbg !71
  %312 = fcmp olt float %302, %311, !dbg !79
  %313 = fcmp uno float %302, 0.000000e+00, !dbg !76
  %314 = or i1 %313, %312, !dbg !77
  %315 = select i1 %314, float %302, float %311, !dbg !78
  %316 = bitcast float %315 to i32, !dbg !71
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !71
  %318 = bitcast i32 %317 to float, !dbg !71
  %319 = fcmp olt float %315, %318, !dbg !79
  %320 = fcmp uno float %315, 0.000000e+00, !dbg !76
  %321 = or i1 %319, %320, !dbg !77
  %322 = select i1 %321, float %315, float %318, !dbg !78
  %323 = bitcast float %322 to i32, !dbg !71
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !71
  %325 = bitcast i32 %324 to float, !dbg !71
  %326 = fcmp olt float %322, %325, !dbg !79
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !76
  %328 = or i1 %326, %327, !dbg !77
  %329 = select i1 %328, float %322, float %325, !dbg !78
  %330 = bitcast float %329 to i32, !dbg !71
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !71
  %332 = bitcast i32 %331 to float, !dbg !71
  %333 = fcmp olt float %329, %332, !dbg !79
  %334 = fcmp uno float %329, 0.000000e+00, !dbg !76
  %335 = or i1 %333, %334, !dbg !77
  %336 = select i1 %335, float %329, float %332, !dbg !78
  %337 = bitcast float %336 to i32, !dbg !71
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !71
  %339 = bitcast i32 %338 to float, !dbg !71
  %340 = fcmp olt float %336, %339, !dbg !79
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !76
  %342 = or i1 %340, %341, !dbg !77
  %343 = bitcast float %308 to i32, !dbg !71
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 16, i32 31), !dbg !71
  %345 = bitcast i32 %344 to float, !dbg !71
  %346 = fcmp olt float %308, %345, !dbg !79
  %347 = fcmp uno float %308, 0.000000e+00, !dbg !76
  %348 = or i1 %347, %346, !dbg !77
  %349 = select i1 %348, float %308, float %345, !dbg !78
  %350 = bitcast float %349 to i32, !dbg !71
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !71
  %352 = bitcast i32 %351 to float, !dbg !71
  %353 = fcmp olt float %349, %352, !dbg !79
  %354 = fcmp uno float %349, 0.000000e+00, !dbg !76
  %355 = or i1 %353, %354, !dbg !77
  %356 = select i1 %355, float %349, float %352, !dbg !78
  %357 = bitcast float %356 to i32, !dbg !71
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !71
  %359 = bitcast i32 %358 to float, !dbg !71
  %360 = fcmp olt float %356, %359, !dbg !79
  %361 = fcmp uno float %356, 0.000000e+00, !dbg !76
  %362 = or i1 %360, %361, !dbg !77
  %363 = select i1 %362, float %356, float %359, !dbg !78
  %364 = bitcast float %363 to i32, !dbg !71
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !71
  %366 = bitcast i32 %365 to float, !dbg !71
  %367 = fcmp olt float %363, %366, !dbg !79
  %368 = fcmp uno float %363, 0.000000e+00, !dbg !76
  %369 = or i1 %367, %368, !dbg !77
  %370 = select i1 %369, float %363, float %366, !dbg !78
  %371 = bitcast float %370 to i32, !dbg !71
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !71
  %373 = bitcast i32 %372 to float, !dbg !71
  %374 = fcmp olt float %370, %373, !dbg !79
  %375 = fcmp uno float %370, 0.000000e+00, !dbg !76
  %376 = or i1 %374, %375, !dbg !77
  %377 = and i32 %292, 15, !dbg !71
  %378 = icmp eq i32 %17, 0, !dbg !71
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !71
  %380 = select i1 %342, i32 %337, i32 %338, !dbg !78
  %381 = insertelement <1 x i32> poison, i32 %380, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %381, i1 %378) #5, !dbg !71
  %382 = or disjoint i32 %377, 16, !dbg !71
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !71
  %384 = select i1 %376, i32 %371, i32 %372, !dbg !78
  %385 = insertelement <1 x i32> poison, i32 %384, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %385, i1 %378) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %386 = icmp slt i32 %15, 32, !dbg !71
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !71
  %388 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %386) #5, !dbg !71
  %389 = bitcast i32 %388 to float, !dbg !71
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 8, i32 31), !dbg !71
  %391 = bitcast i32 %390 to float, !dbg !71
  %392 = fcmp olt float %389, %391, !dbg !79
  %393 = fcmp uno float %389, 0.000000e+00, !dbg !76
  %394 = or i1 %393, %392, !dbg !77
  %395 = select i1 %394, float %389, float %391, !dbg !78
  %396 = bitcast float %395 to i32, !dbg !71
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !71
  %398 = bitcast i32 %397 to float, !dbg !71
  %399 = fcmp olt float %395, %398, !dbg !79
  %400 = fcmp uno float %395, 0.000000e+00, !dbg !76
  %401 = or i1 %399, %400, !dbg !77
  %402 = select i1 %401, float %395, float %398, !dbg !78
  %403 = bitcast float %402 to i32, !dbg !71
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 2, i32 31), !dbg !71
  %405 = bitcast i32 %404 to float, !dbg !71
  %406 = fcmp olt float %402, %405, !dbg !79
  %407 = fcmp uno float %402, 0.000000e+00, !dbg !76
  %408 = or i1 %406, %407, !dbg !77
  %409 = select i1 %408, float %402, float %405, !dbg !78
  %410 = bitcast float %409 to i32, !dbg !71
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !71
  %412 = bitcast i32 %411 to float, !dbg !71
  %413 = fcmp olt float %409, %412, !dbg !79
  %414 = fcmp uno float %409, 0.000000e+00, !dbg !76
  %415 = or i1 %413, %414, !dbg !77
  %416 = and i32 %15, 15, !dbg !71
  %417 = icmp eq i32 %416, 0, !dbg !71
  %418 = and i1 %386, %417, !dbg !71
  %419 = select i1 %415, i32 %410, i32 %411, !dbg !78
  %420 = insertelement <1 x i32> poison, i32 %419, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %420, i1 %418) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %421 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %422 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %423 = bitcast float %421 to i32, !dbg !80
  %424 = bitcast float %422 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %423, i32 %424, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %425 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %293, !dbg !80
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %427 = extractelement <4 x float> %283, i64 1, !dbg !82
  %428 = fcmp uno float %427, 0.000000e+00, !dbg !82
  %429 = extractelement <4 x i1> %296, i64 1, !dbg !83
  %430 = or i1 %429, %428, !dbg !83
  %431 = extractelement <4 x float> %284, i64 1, !dbg !84
  %432 = select i1 %430, float %427, float %431, !dbg !84
  %433 = extractelement <4 x float> %283, i64 0, !dbg !82
  %434 = fcmp uno float %433, 0.000000e+00, !dbg !82
  %435 = extractelement <4 x i1> %296, i64 0, !dbg !83
  %436 = or i1 %435, %434, !dbg !83
  %437 = extractelement <4 x float> %284, i64 0, !dbg !84
  %438 = select i1 %436, float %433, float %437, !dbg !84
  %439 = bitcast float %432 to i32, !dbg !81
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 16, i32 31), !dbg !81
  %441 = bitcast i32 %440 to float, !dbg !81
  %442 = fcmp ogt float %432, %441, !dbg !73
  %443 = fcmp uno float %432, 0.000000e+00, !dbg !82
  %444 = or i1 %443, %442, !dbg !83
  %445 = select i1 %444, float %432, float %441, !dbg !84
  %446 = bitcast float %445 to i32, !dbg !81
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !81
  %448 = bitcast i32 %447 to float, !dbg !81
  %449 = fcmp ogt float %445, %448, !dbg !73
  %450 = fcmp uno float %445, 0.000000e+00, !dbg !82
  %451 = or i1 %449, %450, !dbg !83
  %452 = select i1 %451, float %445, float %448, !dbg !84
  %453 = bitcast float %452 to i32, !dbg !81
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 4, i32 31), !dbg !81
  %455 = bitcast i32 %454 to float, !dbg !81
  %456 = fcmp ogt float %452, %455, !dbg !73
  %457 = fcmp uno float %452, 0.000000e+00, !dbg !82
  %458 = or i1 %456, %457, !dbg !83
  %459 = select i1 %458, float %452, float %455, !dbg !84
  %460 = bitcast float %459 to i32, !dbg !81
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 2, i32 31), !dbg !81
  %462 = bitcast i32 %461 to float, !dbg !81
  %463 = fcmp ogt float %459, %462, !dbg !73
  %464 = fcmp uno float %459, 0.000000e+00, !dbg !82
  %465 = or i1 %463, %464, !dbg !83
  %466 = select i1 %465, float %459, float %462, !dbg !84
  %467 = bitcast float %466 to i32, !dbg !81
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 1, i32 31), !dbg !81
  %469 = bitcast i32 %468 to float, !dbg !81
  %470 = fcmp ogt float %466, %469, !dbg !73
  %471 = fcmp uno float %466, 0.000000e+00, !dbg !82
  %472 = or i1 %470, %471, !dbg !83
  %473 = bitcast float %438 to i32, !dbg !81
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 16, i32 31), !dbg !81
  %475 = bitcast i32 %474 to float, !dbg !81
  %476 = fcmp ogt float %438, %475, !dbg !73
  %477 = fcmp uno float %438, 0.000000e+00, !dbg !82
  %478 = or i1 %477, %476, !dbg !83
  %479 = select i1 %478, float %438, float %475, !dbg !84
  %480 = bitcast float %479 to i32, !dbg !81
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 8, i32 31), !dbg !81
  %482 = bitcast i32 %481 to float, !dbg !81
  %483 = fcmp ogt float %479, %482, !dbg !73
  %484 = fcmp uno float %479, 0.000000e+00, !dbg !82
  %485 = or i1 %483, %484, !dbg !83
  %486 = select i1 %485, float %479, float %482, !dbg !84
  %487 = bitcast float %486 to i32, !dbg !81
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 4, i32 31), !dbg !81
  %489 = bitcast i32 %488 to float, !dbg !81
  %490 = fcmp ogt float %486, %489, !dbg !73
  %491 = fcmp uno float %486, 0.000000e+00, !dbg !82
  %492 = or i1 %490, %491, !dbg !83
  %493 = select i1 %492, float %486, float %489, !dbg !84
  %494 = bitcast float %493 to i32, !dbg !81
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !81
  %496 = bitcast i32 %495 to float, !dbg !81
  %497 = fcmp ogt float %493, %496, !dbg !73
  %498 = fcmp uno float %493, 0.000000e+00, !dbg !82
  %499 = or i1 %497, %498, !dbg !83
  %500 = select i1 %499, float %493, float %496, !dbg !84
  %501 = bitcast float %500 to i32, !dbg !81
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 1, i32 31), !dbg !81
  %503 = bitcast i32 %502 to float, !dbg !81
  %504 = fcmp ogt float %500, %503, !dbg !73
  %505 = fcmp uno float %500, 0.000000e+00, !dbg !82
  %506 = or i1 %504, %505, !dbg !83
  %507 = select i1 %472, i32 %467, i32 %468, !dbg !84
  %508 = insertelement <1 x i32> poison, i32 %507, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %508, i1 %378) #5, !dbg !81
  %509 = select i1 %506, i32 %501, i32 %502, !dbg !84
  %510 = insertelement <1 x i32> poison, i32 %509, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %510, i1 %378) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %511 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %386) #5, !dbg !81
  %512 = bitcast i32 %511 to float, !dbg !81
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 8, i32 31), !dbg !81
  %514 = bitcast i32 %513 to float, !dbg !81
  %515 = fcmp ogt float %512, %514, !dbg !73
  %516 = fcmp uno float %512, 0.000000e+00, !dbg !82
  %517 = or i1 %516, %515, !dbg !83
  %518 = select i1 %517, float %512, float %514, !dbg !84
  %519 = bitcast float %518 to i32, !dbg !81
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !81
  %521 = bitcast i32 %520 to float, !dbg !81
  %522 = fcmp ogt float %518, %521, !dbg !73
  %523 = fcmp uno float %518, 0.000000e+00, !dbg !82
  %524 = or i1 %522, %523, !dbg !83
  %525 = select i1 %524, float %518, float %521, !dbg !84
  %526 = bitcast float %525 to i32, !dbg !81
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !81
  %528 = bitcast i32 %527 to float, !dbg !81
  %529 = fcmp ogt float %525, %528, !dbg !73
  %530 = fcmp uno float %525, 0.000000e+00, !dbg !82
  %531 = or i1 %529, %530, !dbg !83
  %532 = select i1 %531, float %525, float %528, !dbg !84
  %533 = bitcast float %532 to i32, !dbg !81
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 1, i32 31), !dbg !81
  %535 = bitcast i32 %534 to float, !dbg !81
  %536 = fcmp ogt float %532, %535, !dbg !73
  %537 = fcmp uno float %532, 0.000000e+00, !dbg !82
  %538 = or i1 %536, %537, !dbg !83
  %539 = select i1 %538, i32 %533, i32 %534, !dbg !84
  %540 = insertelement <1 x i32> poison, i32 %539, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %540, i1 %418) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %541 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %542 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %543 = bitcast float %541 to i32, !dbg !85
  %544 = bitcast float %542 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %543, i32 %544, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %545 = load float, ptr addrspace(3) %425, align 4, !dbg !85
  %546 = sext i32 %294 to i64, !dbg !86
  %547 = getelementptr bfloat, ptr addrspace(1) %6, i64 %546, !dbg !86
  %548 = fptrunc float %426 to bfloat, !dbg !80
  %549 = and i32 %15, 510, !dbg !80
  %550 = icmp eq i32 %549, 0, !dbg !80
  %551 = bitcast bfloat %548 to i16, !dbg !80
  %552 = and i1 %550, %295, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %551, ptr addrspace(1) %547, i1 %552) #5, !dbg !80
  %553 = getelementptr bfloat, ptr addrspace(1) %7, i64 %546, !dbg !87
  %554 = fptrunc float %545 to bfloat, !dbg !85
  %555 = bitcast bfloat %554 to i16, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %555, ptr addrspace(1) %553, i1 %552) #5, !dbg !85
  %.inv4 = fcmp oge float %421, 0.000000e+00, !dbg !88
  %556 = select i1 %.inv4, float 0.000000e+00, float %421, !dbg !88
  %.inv5 = fcmp oge float %422, 0.000000e+00, !dbg !88
  %557 = select i1 %.inv5, float 0.000000e+00, float %422, !dbg !88
  %558 = fsub float 0.000000e+00, %556, !dbg !90
  %559 = fsub float 0.000000e+00, %557, !dbg !90
  %.inv6 = fcmp ole float %541, 0.000000e+00, !dbg !91
  %560 = select i1 %.inv6, float 0.000000e+00, float %541, !dbg !91
  %.inv7 = fcmp ole float %542, 0.000000e+00, !dbg !91
  %561 = select i1 %.inv7, float 0.000000e+00, float %542, !dbg !91
  %562 = fcmp ogt float %558, %560, !dbg !93
  %563 = fcmp ogt float %559, %561, !dbg !93
  %564 = fcmp uno float %558, 0.000000e+00, !dbg !95
  %565 = fcmp uno float %559, 0.000000e+00, !dbg !95
  %566 = or i1 %564, %562, !dbg !96
  %567 = or i1 %565, %563, !dbg !96
  %568 = select i1 %566, float %558, float %560, !dbg !97
  %569 = select i1 %567, float %559, float %561, !dbg !97
  %570 = fmul float %568, 0x3F80204080000000, !dbg !98
  %571 = fmul float %569, 0x3F80204080000000, !dbg !98
  %572 = fcmp ogt float %570, 0x3EE4F8B580000000, !dbg !99
  %573 = fcmp ogt float %571, 0x3EE4F8B580000000, !dbg !99
  %574 = fcmp uno float %570, 0.000000e+00, !dbg !101
  %575 = fcmp uno float %571, 0.000000e+00, !dbg !101
  %576 = or i1 %572, %574, !dbg !102
  %577 = or i1 %573, %575, !dbg !102
  %578 = select i1 %576, float %570, float 0x3EE4F8B580000000, !dbg !103
  %579 = select i1 %577, float %571, float 0x3EE4F8B580000000, !dbg !103
  %580 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %578), !dbg !104
  %581 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %579), !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %582 = bitcast float %580 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %582, i1 true) #5, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %582, i1 true) #5, !dbg !105
  %583 = bitcast float %581 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %583, i1 true) #5, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %583, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %584 = lshr exact i32 %16, 5, !dbg !105
  %585 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %584, !dbg !105
  %586 = load float, ptr addrspace(3) %585, align 8, !dbg !105
  br label %587, !dbg !106

587:                                              ; preds = %291, %__nv_tanhf.exit74
  %indvars.iv159 = phi i64 [ 0, %291 ], [ %indvars.iv.next160, %__nv_tanhf.exit74 ]
  %588 = trunc nuw nsw i64 %indvars.iv159 to i32, !dbg !107
  %589 = add i32 %53, %588, !dbg !107
  %590 = sext i32 %589 to i64, !dbg !108
  %591 = getelementptr float, ptr addrspace(1) %5, i64 %590, !dbg !108
  %592 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %591, i1 %19) #5, !dbg !109
  %593 = extractvalue { i32, i32, i32, i32 } %592, 0, !dbg !109
  %594 = extractvalue { i32, i32, i32, i32 } %592, 1, !dbg !109
  %595 = extractvalue { i32, i32, i32, i32 } %592, 2, !dbg !109
  %596 = extractvalue { i32, i32, i32, i32 } %592, 3, !dbg !109
  %597 = bitcast i32 %593 to float, !dbg !109
  %598 = bitcast i32 %594 to float, !dbg !109
  %599 = bitcast i32 %595 to float, !dbg !109
  %600 = bitcast i32 %596 to float, !dbg !109
  %601 = fmul float %597, 5.000000e-01, !dbg !110
  %602 = fmul float %598, 5.000000e-01, !dbg !110
  %603 = fmul float %599, 5.000000e-01, !dbg !110
  %604 = fmul float %600, 5.000000e-01, !dbg !110
  %605 = fmul float %597, %597, !dbg !111
  %606 = fmul float %598, %598, !dbg !111
  %607 = fmul float %599, %599, !dbg !111
  %608 = fmul float %600, %600, !dbg !111
  %609 = fmul float %605, %597, !dbg !112
  %610 = fmul float %606, %598, !dbg !112
  %611 = fmul float %607, %599, !dbg !112
  %612 = fmul float %608, %600, !dbg !112
  %613 = fmul float %609, 0x3FA6E4E260000000, !dbg !113
  %614 = fmul float %610, 0x3FA6E4E260000000, !dbg !113
  %615 = fmul float %611, 0x3FA6E4E260000000, !dbg !113
  %616 = fmul float %612, 0x3FA6E4E260000000, !dbg !113
  %617 = fadd float %613, %597, !dbg !114
  %618 = fadd float %614, %598, !dbg !114
  %619 = fadd float %615, %599, !dbg !114
  %620 = fadd float %616, %600, !dbg !114
  %621 = fmul float %617, 0x3FE9884540000000, !dbg !115
  %622 = fmul float %618, 0x3FE9884540000000, !dbg !115
  %623 = fmul float %619, 0x3FE9884540000000, !dbg !115
  %624 = fmul float %620, 0x3FE9884540000000, !dbg !115
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i = icmp eq i32 %625, 0, !dbg !116
  %626 = tail call float @llvm.nvvm.fabs.ftz.f(float %621) #5, !dbg !116
  %627 = tail call float @llvm.nvvm.fabs.f(float %621) #5, !dbg !116
  %.01.i = select i1 %.not.i, float %627, float %626, !dbg !116
  %628 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !116
  br i1 %628, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !116

__internal_fmad.exit1.i:                          ; preds = %587
  %629 = fmul float %.01.i, 0x4007154760000000, !dbg !116
  %630 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %629) #5, !dbg !116
  %631 = fadd float %630, 1.000000e+00, !dbg !116
  %632 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %631) #6, !dbg !116, !srcloc !61
  %633 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i = icmp eq i32 %633, 0, !dbg !116
  %634 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %632, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %635 = tail call float @llvm.nvvm.fma.rn.f(float %632, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i = select i1 %.not6.i, float %635, float %634, !dbg !116
  %636 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !116
  %s.0.i = select i1 %636, float 1.000000e+00, float %.03.i, !dbg !116
  %637 = bitcast float %s.0.i to i32, !dbg !116
  %638 = bitcast float %621 to i32, !dbg !116
  %639 = and i32 %638, -2147483648, !dbg !116
  %640 = or i32 %639, %637, !dbg !116
  %641 = bitcast i32 %640 to float, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__internal_fmad.exit3.i:                          ; preds = %587
  %642 = fmul float %621, %621, !dbg !116
  %643 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i = icmp eq i32 %643, 0, !dbg !116
  %644 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %642, float 0xBFAAC795C0000000) #5, !dbg !116
  %645 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %642, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i = select i1 %.not1.i, float %645, float %644, !dbg !116
  %646 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i = icmp eq i32 %646, 0, !dbg !116
  %647 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %642, float 0x3FC10B2820000000) #5, !dbg !116
  %648 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %642, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i = select i1 %.not2.i, float %648, float %647, !dbg !116
  %649 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i = icmp eq i32 %649, 0, !dbg !116
  %650 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %642, float 0xBFD5553DA0000000) #5, !dbg !116
  %651 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %642, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i = select i1 %.not3.i, float %651, float %650, !dbg !116
  %652 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i = icmp eq i32 %652, 0, !dbg !116
  %653 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %642, float 0.000000e+00) #5, !dbg !116
  %654 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %642, float 0.000000e+00) #5, !dbg !116
  %.04.i = select i1 %.not4.i, float %654, float %653, !dbg !116
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i = icmp eq i32 %655, 0, !dbg !116
  %656 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %621, float %621) #5, !dbg !116
  %657 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %621, float %621) #5, !dbg !116
  %.02.i = select i1 %.not5.i, float %657, float %656, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %641, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !116
  %658 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i18 = icmp eq i32 %658, 0, !dbg !116
  %659 = tail call float @llvm.nvvm.fabs.ftz.f(float %622) #5, !dbg !116
  %660 = tail call float @llvm.nvvm.fabs.f(float %622) #5, !dbg !116
  %.01.i19 = select i1 %.not.i18, float %660, float %659, !dbg !116
  %661 = fcmp ult float %.01.i19, 0x3FE3333340000000, !dbg !116
  br i1 %661, label %__internal_fmad.exit3.i25, label %__internal_fmad.exit1.i20, !dbg !116

__internal_fmad.exit1.i20:                        ; preds = %__nv_tanhf.exit
  %662 = fmul float %.01.i19, 0x4007154760000000, !dbg !116
  %663 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %662) #5, !dbg !116
  %664 = fadd float %663, 1.000000e+00, !dbg !116
  %665 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %664) #6, !dbg !116, !srcloc !61
  %666 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i21 = icmp eq i32 %666, 0, !dbg !116
  %667 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %665, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %668 = tail call float @llvm.nvvm.fma.rn.f(float %665, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i22 = select i1 %.not6.i21, float %668, float %667, !dbg !116
  %669 = fcmp oge float %.01.i19, 0x4022059680000000, !dbg !116
  %s.0.i23 = select i1 %669, float 1.000000e+00, float %.03.i22, !dbg !116
  %670 = bitcast float %s.0.i23 to i32, !dbg !116
  %671 = bitcast float %622 to i32, !dbg !116
  %672 = and i32 %671, -2147483648, !dbg !116
  %673 = or i32 %672, %670, !dbg !116
  %674 = bitcast i32 %673 to float, !dbg !116
  br label %__nv_tanhf.exit36, !dbg !116

__internal_fmad.exit3.i25:                        ; preds = %__nv_tanhf.exit
  %675 = fmul float %622, %622, !dbg !116
  %676 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i26 = icmp eq i32 %676, 0, !dbg !116
  %677 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %675, float 0xBFAAC795C0000000) #5, !dbg !116
  %678 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %675, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i27 = select i1 %.not1.i26, float %678, float %677, !dbg !116
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i28 = icmp eq i32 %679, 0, !dbg !116
  %680 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i27, float %675, float 0x3FC10B2820000000) #5, !dbg !116
  %681 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i27, float %675, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i29 = select i1 %.not2.i28, float %681, float %680, !dbg !116
  %682 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i30 = icmp eq i32 %682, 0, !dbg !116
  %683 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i29, float %675, float 0xBFD5553DA0000000) #5, !dbg !116
  %684 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i29, float %675, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i31 = select i1 %.not3.i30, float %684, float %683, !dbg !116
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i32 = icmp eq i32 %685, 0, !dbg !116
  %686 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i31, float %675, float 0.000000e+00) #5, !dbg !116
  %687 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i31, float %675, float 0.000000e+00) #5, !dbg !116
  %.04.i33 = select i1 %.not4.i32, float %687, float %686, !dbg !116
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i34 = icmp eq i32 %688, 0, !dbg !116
  %689 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i33, float %622, float %622) #5, !dbg !116
  %690 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i33, float %622, float %622) #5, !dbg !116
  %.02.i35 = select i1 %.not5.i34, float %690, float %689, !dbg !116
  br label %__nv_tanhf.exit36, !dbg !116

__nv_tanhf.exit36:                                ; preds = %__internal_fmad.exit1.i20, %__internal_fmad.exit3.i25
  %s.1.i24 = phi float [ %674, %__internal_fmad.exit1.i20 ], [ %.02.i35, %__internal_fmad.exit3.i25 ], !dbg !116
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i37 = icmp eq i32 %691, 0, !dbg !116
  %692 = tail call float @llvm.nvvm.fabs.ftz.f(float %623) #5, !dbg !116
  %693 = tail call float @llvm.nvvm.fabs.f(float %623) #5, !dbg !116
  %.01.i38 = select i1 %.not.i37, float %693, float %692, !dbg !116
  %694 = fcmp ult float %.01.i38, 0x3FE3333340000000, !dbg !116
  br i1 %694, label %__internal_fmad.exit3.i44, label %__internal_fmad.exit1.i39, !dbg !116

__internal_fmad.exit1.i39:                        ; preds = %__nv_tanhf.exit36
  %695 = fmul float %.01.i38, 0x4007154760000000, !dbg !116
  %696 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %695) #5, !dbg !116
  %697 = fadd float %696, 1.000000e+00, !dbg !116
  %698 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %697) #6, !dbg !116, !srcloc !61
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i40 = icmp eq i32 %699, 0, !dbg !116
  %700 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %698, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %701 = tail call float @llvm.nvvm.fma.rn.f(float %698, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i41 = select i1 %.not6.i40, float %701, float %700, !dbg !116
  %702 = fcmp oge float %.01.i38, 0x4022059680000000, !dbg !116
  %s.0.i42 = select i1 %702, float 1.000000e+00, float %.03.i41, !dbg !116
  %703 = bitcast float %s.0.i42 to i32, !dbg !116
  %704 = bitcast float %623 to i32, !dbg !116
  %705 = and i32 %704, -2147483648, !dbg !116
  %706 = or i32 %705, %703, !dbg !116
  %707 = bitcast i32 %706 to float, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__internal_fmad.exit3.i44:                        ; preds = %__nv_tanhf.exit36
  %708 = fmul float %623, %623, !dbg !116
  %709 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i45 = icmp eq i32 %709, 0, !dbg !116
  %710 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %708, float 0xBFAAC795C0000000) #5, !dbg !116
  %711 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %708, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i46 = select i1 %.not1.i45, float %711, float %710, !dbg !116
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i47 = icmp eq i32 %712, 0, !dbg !116
  %713 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i46, float %708, float 0x3FC10B2820000000) #5, !dbg !116
  %714 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i46, float %708, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i48 = select i1 %.not2.i47, float %714, float %713, !dbg !116
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i49 = icmp eq i32 %715, 0, !dbg !116
  %716 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i48, float %708, float 0xBFD5553DA0000000) #5, !dbg !116
  %717 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i48, float %708, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i50 = select i1 %.not3.i49, float %717, float %716, !dbg !116
  %718 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i51 = icmp eq i32 %718, 0, !dbg !116
  %719 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i50, float %708, float 0.000000e+00) #5, !dbg !116
  %720 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i50, float %708, float 0.000000e+00) #5, !dbg !116
  %.04.i52 = select i1 %.not4.i51, float %720, float %719, !dbg !116
  %721 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i53 = icmp eq i32 %721, 0, !dbg !116
  %722 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i52, float %623, float %623) #5, !dbg !116
  %723 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i52, float %623, float %623) #5, !dbg !116
  %.02.i54 = select i1 %.not5.i53, float %723, float %722, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__nv_tanhf.exit55:                                ; preds = %__internal_fmad.exit1.i39, %__internal_fmad.exit3.i44
  %s.1.i43 = phi float [ %707, %__internal_fmad.exit1.i39 ], [ %.02.i54, %__internal_fmad.exit3.i44 ], !dbg !116
  %724 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i56 = icmp eq i32 %724, 0, !dbg !116
  %725 = tail call float @llvm.nvvm.fabs.ftz.f(float %624) #5, !dbg !116
  %726 = tail call float @llvm.nvvm.fabs.f(float %624) #5, !dbg !116
  %.01.i57 = select i1 %.not.i56, float %726, float %725, !dbg !116
  %727 = fcmp ult float %.01.i57, 0x3FE3333340000000, !dbg !116
  br i1 %727, label %__internal_fmad.exit3.i63, label %__internal_fmad.exit1.i58, !dbg !116

__internal_fmad.exit1.i58:                        ; preds = %__nv_tanhf.exit55
  %728 = fmul float %.01.i57, 0x4007154760000000, !dbg !116
  %729 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %728) #5, !dbg !116
  %730 = fadd float %729, 1.000000e+00, !dbg !116
  %731 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %730) #6, !dbg !116, !srcloc !61
  %732 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i59 = icmp eq i32 %732, 0, !dbg !116
  %733 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %731, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %734 = tail call float @llvm.nvvm.fma.rn.f(float %731, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i60 = select i1 %.not6.i59, float %734, float %733, !dbg !116
  %735 = fcmp oge float %.01.i57, 0x4022059680000000, !dbg !116
  %s.0.i61 = select i1 %735, float 1.000000e+00, float %.03.i60, !dbg !116
  %736 = bitcast float %s.0.i61 to i32, !dbg !116
  %737 = bitcast float %624 to i32, !dbg !116
  %738 = and i32 %737, -2147483648, !dbg !116
  %739 = or i32 %738, %736, !dbg !116
  %740 = bitcast i32 %739 to float, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__internal_fmad.exit3.i63:                        ; preds = %__nv_tanhf.exit55
  %741 = fmul float %624, %624, !dbg !116
  %742 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i64 = icmp eq i32 %742, 0, !dbg !116
  %743 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %741, float 0xBFAAC795C0000000) #5, !dbg !116
  %744 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %741, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i65 = select i1 %.not1.i64, float %744, float %743, !dbg !116
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i66 = icmp eq i32 %745, 0, !dbg !116
  %746 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i65, float %741, float 0x3FC10B2820000000) #5, !dbg !116
  %747 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i65, float %741, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i67 = select i1 %.not2.i66, float %747, float %746, !dbg !116
  %748 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i68 = icmp eq i32 %748, 0, !dbg !116
  %749 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i67, float %741, float 0xBFD5553DA0000000) #5, !dbg !116
  %750 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i67, float %741, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i69 = select i1 %.not3.i68, float %750, float %749, !dbg !116
  %751 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i70 = icmp eq i32 %751, 0, !dbg !116
  %752 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i69, float %741, float 0.000000e+00) #5, !dbg !116
  %753 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i69, float %741, float 0.000000e+00) #5, !dbg !116
  %.04.i71 = select i1 %.not4.i70, float %753, float %752, !dbg !116
  %754 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i72 = icmp eq i32 %754, 0, !dbg !116
  %755 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i71, float %624, float %624) #5, !dbg !116
  %756 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i71, float %624, float %624) #5, !dbg !116
  %.02.i73 = select i1 %.not5.i72, float %756, float %755, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__nv_tanhf.exit74:                                ; preds = %__internal_fmad.exit1.i58, %__internal_fmad.exit3.i63
  %s.1.i62 = phi float [ %740, %__internal_fmad.exit1.i58 ], [ %.02.i73, %__internal_fmad.exit3.i63 ], !dbg !116
  %757 = fadd float %s.1.i, 1.000000e+00, !dbg !117
  %758 = fadd float %s.1.i24, 1.000000e+00, !dbg !117
  %759 = fadd float %s.1.i43, 1.000000e+00, !dbg !117
  %760 = fadd float %s.1.i62, 1.000000e+00, !dbg !117
  %761 = fmul float %601, %757, !dbg !118
  %762 = fmul float %602, %758, !dbg !118
  %763 = fmul float %603, %759, !dbg !118
  %764 = fmul float %604, %760, !dbg !118
  %765 = fmul float %586, %761, !dbg !105
  %766 = fmul float %586, %762, !dbg !105
  %767 = fmul float %586, %763, !dbg !105
  %768 = fmul float %586, %764, !dbg !105
  %769 = tail call float @llvm.nvvm.round.f(float %765) #5, !dbg !119
  %770 = tail call float @llvm.nvvm.round.f(float %766) #5, !dbg !119
  %771 = tail call float @llvm.nvvm.round.f(float %767) #5, !dbg !119
  %772 = tail call float @llvm.nvvm.round.f(float %768) #5, !dbg !119
  %773 = insertelement <4 x float> poison, float %769, i64 0, !dbg !120
  %774 = insertelement <4 x float> %773, float %770, i64 1, !dbg !120
  %775 = insertelement <4 x float> %774, float %771, i64 2, !dbg !120
  %776 = insertelement <4 x float> %775, float %772, i64 3, !dbg !120
  %777 = fcmp ogt <4 x float> %776, splat (float -1.270000e+02), !dbg !120
  %778 = fcmp uno <4 x float> %776, zeroinitializer, !dbg !122
  %779 = or <4 x i1> %777, %778, !dbg !123
  %780 = select <4 x i1> %779, <4 x float> %776, <4 x float> splat (float -1.270000e+02), !dbg !124
  %781 = fcmp olt <4 x float> %780, splat (float 1.270000e+02), !dbg !125
  %782 = fcmp uno <4 x float> %780, zeroinitializer, !dbg !127
  %783 = or <4 x i1> %781, %782, !dbg !128
  %784 = fptosi <4 x float> %780 to <4 x i8>, !dbg !129
  %785 = select <4 x i1> %783, <4 x i8> %784, <4 x i8> splat (i8 127), !dbg !130
  %786 = getelementptr i8, ptr addrspace(1) %8, i64 %590, !dbg !131
  %787 = bitcast <4 x i8> %785 to i32, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %787, ptr addrspace(1) %786, i1 %19) #5, !dbg !132
  %indvars.iv.next160 = add nuw nsw i64 %indvars.iv159, 1024, !dbg !106
  %788 = icmp samesign ult i64 %indvars.iv159, 11264, !dbg !106
  br i1 %788, label %587, label %789, !dbg !106

789:                                              ; preds = %__nv_tanhf.exit74
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 76, column: 50, scope: !6)
!40 = !DILocation(line: 34, column: 31, scope: !6)
!41 = !DILocation(line: 39, column: 41, scope: !6)
!42 = !DILocation(line: 39, column: 34, scope: !6)
!43 = !DILocation(line: 39, column: 52, scope: !6)
!44 = !DILocation(line: 40, column: 35, scope: !6)
!45 = !DILocation(line: 40, column: 42, scope: !6)
!46 = !DILocation(line: 41, column: 35, scope: !6)
!47 = !DILocation(line: 41, column: 42, scope: !6)
!48 = !DILocation(line: 42, column: 23, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 40, column: 95, scope: !6)
!51 = !DILocation(line: 41, column: 95, scope: !6)
!52 = !DILocation(line: 55, column: 24, scope: !6)
!53 = !DILocation(line: 56, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 24, scope: !6)
!55 = !DILocation(line: 64, column: 24, scope: !6)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 63, column: 24, scope: !6)
!59 = !DILocation(line: 66, column: 24, scope: !6)
!60 = !DILocation(line: 67, column: 31, scope: !6)
!61 = !{i32 21046}
!62 = !DILocation(line: 69, column: 24, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !64)
!64 = !DILocation(line: 75, column: 47, scope: !6)
!65 = !DILocation(line: 70, column: 24, scope: !6)
!66 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !64)
!67 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !64)
!68 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !64)
!69 = !DILocation(line: 77, column: 29, scope: !6)
!70 = !DILocation(line: 77, column: 54, scope: !6)
!71 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !72)
!72 = !DILocation(line: 78, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !74, inlinedAt: !75)
!74 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!75 = !DILocation(line: 79, column: 40, scope: !6)
!76 = !DILocation(line: 96, column: 21, scope: !74, inlinedAt: !72)
!77 = !DILocation(line: 96, column: 16, scope: !74, inlinedAt: !72)
!78 = !DILocation(line: 97, column: 29, scope: !74, inlinedAt: !72)
!79 = !DILocation(line: 94, column: 15, scope: !74, inlinedAt: !72)
!80 = !DILocation(line: 80, column: 37, scope: !6)
!81 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !75)
!82 = !DILocation(line: 104, column: 21, scope: !74, inlinedAt: !75)
!83 = !DILocation(line: 104, column: 16, scope: !74, inlinedAt: !75)
!84 = !DILocation(line: 105, column: 29, scope: !74, inlinedAt: !75)
!85 = !DILocation(line: 81, column: 37, scope: !6)
!86 = !DILocation(line: 80, column: 25, scope: !6)
!87 = !DILocation(line: 81, column: 25, scope: !6)
!88 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !89)
!89 = !DILocation(line: 104, column: 46, scope: !6)
!90 = !DILocation(line: 105, column: 17, scope: !6)
!91 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !92)
!92 = !DILocation(line: 106, column: 46, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !94)
!94 = !DILocation(line: 107, column: 46, scope: !6)
!95 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !94)
!96 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !94)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !94)
!98 = !DILocation(line: 109, column: 24, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 112, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 25, scope: !6)
!105 = !DILocation(line: 117, column: 24, scope: !6)
!106 = !DILocation(line: 82, column: 40, scope: !6)
!107 = !DILocation(line: 88, column: 43, scope: !6)
!108 = !DILocation(line: 88, column: 36, scope: !6)
!109 = !DILocation(line: 88, column: 54, scope: !6)
!110 = !DILocation(line: 90, column: 24, scope: !6)
!111 = !DILocation(line: 91, column: 24, scope: !6)
!112 = !DILocation(line: 92, column: 24, scope: !6)
!113 = !DILocation(line: 94, column: 24, scope: !6)
!114 = !DILocation(line: 95, column: 24, scope: !6)
!115 = !DILocation(line: 97, column: 24, scope: !6)
!116 = !DILocation(line: 98, column: 31, scope: !6)
!117 = !DILocation(line: 100, column: 24, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 118, column: 36, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !121)
!121 = !DILocation(line: 121, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !121)
!125 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !126)
!126 = !DILocation(line: 123, column: 46, scope: !6)
!127 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !126)
!128 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !126)
!129 = !DILocation(line: 125, column: 25, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !126)
!131 = !DILocation(line: 126, column: 29, scope: !6)
!132 = !DILocation(line: 126, column: 54, scope: !6)
!133 = !DILocation(line: 82, column: 4, scope: !6)
