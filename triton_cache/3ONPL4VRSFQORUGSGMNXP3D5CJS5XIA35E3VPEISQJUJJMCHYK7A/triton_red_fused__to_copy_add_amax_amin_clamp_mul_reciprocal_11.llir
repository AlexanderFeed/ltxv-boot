; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 511, !dbg !11
  %12 = shl i32 %8, 7, !dbg !12
  %13 = and i32 %10, 127
  %invariant.op = or disjoint i32 %12, %13, !dbg !13
  %14 = zext nneg i32 %11 to i64, !dbg !13
  %15 = lshr i32 %11, 7, !dbg !14
  %16 = mul nuw nsw i32 %15, 526336, !dbg !15
  %.reass.us = add i32 %16, %invariant.op
  %17 = sext i32 %.reass.us to i64, !dbg !16
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !16
  br i1 %9, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %19 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %18, i1 false) #4, !dbg !17
  %20 = or disjoint i64 %14, 512, !dbg !18
  %21 = lshr i64 %20, 7, !dbg !14
  %22 = trunc nuw nsw i64 %21 to i32
  %23 = mul nuw nsw i32 %22, 526336
  %.reass.1 = add i32 %23, %invariant.op
  %24 = sext i32 %.reass.1 to i64, !dbg !16
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #4, !dbg !17
  %27 = insertelement <4 x i64> poison, i64 %14, i64 0, !dbg !18
  %28 = shufflevector <4 x i64> %27, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %29 = or disjoint <4 x i64> %28, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %30 = lshr <4 x i64> %29, splat (i64 7), !dbg !14
  %31 = trunc nuw nsw <4 x i64> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, splat (i32 526336)
  %33 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %34 = shufflevector <4 x i32> %33, <4 x i32> poison, <4 x i32> zeroinitializer
  %35 = add <4 x i32> %32, %34
  %36 = extractelement <4 x i32> %35, i64 3, !dbg !16
  %37 = sext i32 %36 to i64, !dbg !16
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %38, i1 false) #4, !dbg !17
  %40 = extractelement <4 x i32> %35, i64 2, !dbg !16
  %41 = sext i32 %40 to i64, !dbg !16
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 false) #4, !dbg !17
  %44 = extractelement <4 x i32> %35, i64 1, !dbg !16
  %45 = sext i32 %44 to i64, !dbg !16
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %46, i1 false) #4, !dbg !17
  %48 = extractelement <4 x i32> %35, i64 0, !dbg !16
  %49 = sext i32 %48 to i64, !dbg !16
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 false) #4, !dbg !17
  %52 = extractelement <4 x i64> %29, i64 0, !dbg !19
  %53 = extractelement <4 x i64> %29, i64 1, !dbg !19
  %54 = extractelement <4 x i64> %29, i64 2, !dbg !19
  %55 = extractelement <4 x i64> %29, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split.us.preheader:                              ; preds = %7
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %18, i1 true) #4, !dbg !17
  %57 = bitcast i16 %56 to bfloat, !dbg !17
  %58 = fpext bfloat %57 to float, !dbg !23
  %59 = or disjoint i64 %14, 512, !dbg !18
  %60 = lshr i64 %59, 7, !dbg !14
  %61 = trunc nuw nsw i64 %60 to i32
  %62 = mul nuw nsw i32 %61, 526336
  %.reass.us.1 = add i32 %62, %invariant.op
  %63 = sext i32 %.reass.us.1 to i64, !dbg !16
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 true) #4, !dbg !17
  %66 = bitcast i16 %65 to bfloat, !dbg !17
  %67 = fpext bfloat %66 to float, !dbg !23
  %68 = fcmp olt bfloat %57, %66, !dbg !24
  %69 = fcmp uno bfloat %57, 0xR0000, !dbg !26
  %70 = or i1 %69, %68, !dbg !27
  %71 = select i1 %70, float %58, float %67, !dbg !28
  %72 = fcmp ogt bfloat %57, %66, !dbg !29
  %73 = or i1 %69, %72, !dbg !31
  %74 = select i1 %73, float %58, float %67, !dbg !32
  %75 = insertelement <4 x i64> poison, i64 %14, i64 0, !dbg !18
  %76 = shufflevector <4 x i64> %75, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %77 = or disjoint <4 x i64> %76, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %78 = fcmp uno float %71, 0.000000e+00, !dbg !26
  %79 = fcmp uno float %74, 0.000000e+00, !dbg !33
  %80 = lshr <4 x i64> %77, splat (i64 7), !dbg !14
  %81 = trunc nuw nsw <4 x i64> %80 to <4 x i32>
  %82 = mul nuw nsw <4 x i32> %81, splat (i32 526336)
  %83 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %84 = shufflevector <4 x i32> %83, <4 x i32> poison, <4 x i32> zeroinitializer
  %85 = add <4 x i32> %82, %84
  %86 = extractelement <4 x i32> %85, i64 3, !dbg !16
  %87 = sext i32 %86 to i64, !dbg !16
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !16
  %89 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %88, i1 true) #4, !dbg !17
  %90 = bitcast i16 %89 to bfloat, !dbg !17
  %91 = fpext bfloat %90 to float, !dbg !23
  %92 = fcmp olt float %71, %91, !dbg !24
  %93 = or i1 %78, %92, !dbg !27
  %94 = select i1 %93, float %71, float %91, !dbg !28
  %95 = fcmp ogt float %74, %91, !dbg !29
  %96 = or i1 %79, %95, !dbg !31
  %97 = select i1 %96, float %74, float %91, !dbg !32
  %98 = extractelement <4 x i32> %85, i64 2, !dbg !16
  %99 = sext i32 %98 to i64, !dbg !16
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !16
  %101 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %100, i1 true) #4, !dbg !17
  %102 = bitcast i16 %101 to bfloat, !dbg !17
  %103 = fpext bfloat %102 to float, !dbg !23
  %104 = fcmp olt float %94, %103, !dbg !24
  %105 = fcmp uno float %94, 0.000000e+00, !dbg !26
  %106 = or i1 %105, %104, !dbg !27
  %107 = select i1 %106, float %94, float %103, !dbg !28
  %108 = fcmp ogt float %97, %103, !dbg !29
  %109 = fcmp uno float %97, 0.000000e+00, !dbg !33
  %110 = or i1 %109, %108, !dbg !31
  %111 = select i1 %110, float %97, float %103, !dbg !32
  %112 = extractelement <4 x i32> %85, i64 1, !dbg !16
  %113 = sext i32 %112 to i64, !dbg !16
  %114 = getelementptr bfloat, ptr addrspace(1) %0, i64 %113, !dbg !16
  %115 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %114, i1 true) #4, !dbg !17
  %116 = bitcast i16 %115 to bfloat, !dbg !17
  %117 = fpext bfloat %116 to float, !dbg !23
  %118 = fcmp olt float %107, %117, !dbg !24
  %119 = fcmp uno float %107, 0.000000e+00, !dbg !26
  %120 = or i1 %119, %118, !dbg !27
  %121 = select i1 %120, float %107, float %117, !dbg !28
  %122 = fcmp ogt float %111, %117, !dbg !29
  %123 = fcmp uno float %111, 0.000000e+00, !dbg !33
  %124 = or i1 %123, %122, !dbg !31
  %125 = select i1 %124, float %111, float %117, !dbg !32
  %126 = extractelement <4 x i32> %85, i64 0, !dbg !16
  %127 = sext i32 %126 to i64, !dbg !16
  %128 = getelementptr bfloat, ptr addrspace(1) %0, i64 %127, !dbg !16
  %129 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %128, i1 true) #4, !dbg !17
  %130 = bitcast i16 %129 to bfloat, !dbg !17
  %131 = fpext bfloat %130 to float, !dbg !23
  %132 = fcmp olt float %121, %131, !dbg !24
  %133 = fcmp uno float %121, 0.000000e+00, !dbg !26
  %134 = or i1 %133, %132, !dbg !27
  %135 = select i1 %134, float %121, float %131, !dbg !28
  %136 = fcmp ogt float %125, %131, !dbg !29
  %137 = fcmp uno float %125, 0.000000e+00, !dbg !33
  %138 = or i1 %137, %136, !dbg !31
  %139 = select i1 %138, float %125, float %131, !dbg !32
  %140 = extractelement <4 x i64> %77, i64 0, !dbg !19
  %141 = extractelement <4 x i64> %77, i64 1, !dbg !19
  %142 = extractelement <4 x i64> %77, i64 2, !dbg !19
  %143 = extractelement <4 x i64> %77, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi35 = phi i64 [ %52, %.split.preheader ], [ %140, %.split.us.preheader ], !dbg !34
  %.pre-phi30 = phi i64 [ %53, %.split.preheader ], [ %141, %.split.us.preheader ], !dbg !34
  %.pre-phi25 = phi i64 [ %54, %.split.preheader ], [ %142, %.split.us.preheader ], !dbg !34
  %.pre-phi20 = phi i64 [ %55, %.split.preheader ], [ %143, %.split.us.preheader ], !dbg !34
  %.pre-phi19 = phi i64 [ %24, %.split.preheader ], [ %63, %.split.us.preheader ], !dbg !35
  %.pre-phi15 = phi i64 [ %20, %.split.preheader ], [ %59, %.split.us.preheader ], !dbg !34
  %.us-phi = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %135, %.split.us.preheader ], !dbg !19
  %.us-phi6 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %139, %.split.us.preheader ], !dbg !19
  %144 = phi <4 x i32> [ %35, %.split.preheader ], [ %85, %.split.us.preheader ], !dbg !35
  %145 = lshr i32 %10, 5, !dbg !11
  %146 = bitcast float %.us-phi to i32, !dbg !19
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !19
  %148 = bitcast i32 %147 to float, !dbg !19
  %149 = fcmp olt float %.us-phi, %148, !dbg !36
  %150 = fcmp uno float %.us-phi, 0.000000e+00, !dbg !38
  %151 = or i1 %150, %149, !dbg !39
  %152 = select i1 %151, float %.us-phi, float %148, !dbg !40
  %153 = bitcast float %152 to i32, !dbg !19
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !19
  %155 = bitcast i32 %154 to float, !dbg !19
  %156 = fcmp olt float %152, %155, !dbg !36
  %157 = fcmp uno float %152, 0.000000e+00, !dbg !38
  %158 = or i1 %156, %157, !dbg !39
  %159 = select i1 %158, float %152, float %155, !dbg !40
  %160 = bitcast float %159 to i32, !dbg !19
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !19
  %162 = bitcast i32 %161 to float, !dbg !19
  %163 = fcmp olt float %159, %162, !dbg !36
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !38
  %165 = or i1 %163, %164, !dbg !39
  %166 = select i1 %165, float %159, float %162, !dbg !40
  %167 = bitcast float %166 to i32, !dbg !19
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !19
  %169 = bitcast i32 %168 to float, !dbg !19
  %170 = fcmp olt float %166, %169, !dbg !36
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !38
  %172 = or i1 %170, %171, !dbg !39
  %173 = select i1 %172, float %166, float %169, !dbg !40
  %174 = bitcast float %173 to i32, !dbg !19
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !19
  %176 = bitcast i32 %175 to float, !dbg !19
  %177 = fcmp olt float %173, %176, !dbg !36
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !38
  %179 = or i1 %177, %178, !dbg !39
  %180 = and i32 %10, 512, !dbg !19
  %181 = icmp eq i32 %180, 0, !dbg !19
  %182 = and i32 %145, 15, !dbg !19
  %183 = and i32 %10, 543, !dbg !19
  %184 = icmp eq i32 %183, 0, !dbg !19
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !19
  %186 = select i1 %179, i32 %174, i32 %175, !dbg !40
  %187 = insertelement <1 x i32> poison, i32 %186, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %187, i1 %184) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %188 = icmp slt i32 %10, 16, !dbg !19
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %190 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %189, i1 %188) #4, !dbg !19
  %191 = bitcast i32 %190 to float, !dbg !19
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !19
  %193 = bitcast i32 %192 to float, !dbg !19
  %194 = fcmp olt float %191, %193, !dbg !36
  %195 = fcmp uno float %191, 0.000000e+00, !dbg !38
  %196 = or i1 %195, %194, !dbg !39
  %197 = select i1 %196, float %191, float %193, !dbg !40
  %198 = bitcast float %197 to i32, !dbg !19
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !19
  %200 = bitcast i32 %199 to float, !dbg !19
  %201 = fcmp olt float %197, %200, !dbg !36
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !38
  %203 = or i1 %201, %202, !dbg !39
  %204 = select i1 %203, float %197, float %200, !dbg !40
  %205 = bitcast float %204 to i32, !dbg !19
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !19
  %207 = bitcast i32 %206 to float, !dbg !19
  %208 = fcmp olt float %204, %207, !dbg !36
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !38
  %210 = or i1 %208, %209, !dbg !39
  %211 = select i1 %210, float %204, float %207, !dbg !40
  %212 = bitcast float %211 to i32, !dbg !19
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !19
  %214 = bitcast i32 %213 to float, !dbg !19
  %215 = fcmp olt float %211, %214, !dbg !36
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !38
  %217 = or i1 %215, %216, !dbg !39
  %218 = and i32 %10, 15, !dbg !19
  %219 = icmp eq i32 %218, 0, !dbg !19
  %220 = and i1 %188, %219, !dbg !19
  %221 = select i1 %217, i32 %212, i32 %213, !dbg !40
  %222 = insertelement <1 x i32> poison, i32 %221, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %222, i1 %220) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %223 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %224 = bitcast float %.us-phi6 to i32, !dbg !41
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !41
  %226 = bitcast i32 %225 to float, !dbg !41
  %227 = fcmp ogt float %.us-phi6, %226, !dbg !43
  %228 = fcmp uno float %.us-phi6, 0.000000e+00, !dbg !44
  %229 = or i1 %228, %227, !dbg !45
  %230 = select i1 %229, float %.us-phi6, float %226, !dbg !46
  %231 = bitcast float %230 to i32, !dbg !41
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !41
  %233 = bitcast i32 %232 to float, !dbg !41
  %234 = fcmp ogt float %230, %233, !dbg !43
  %235 = fcmp uno float %230, 0.000000e+00, !dbg !44
  %236 = or i1 %234, %235, !dbg !45
  %237 = select i1 %236, float %230, float %233, !dbg !46
  %238 = bitcast float %237 to i32, !dbg !41
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 4, i32 31), !dbg !41
  %240 = bitcast i32 %239 to float, !dbg !41
  %241 = fcmp ogt float %237, %240, !dbg !43
  %242 = fcmp uno float %237, 0.000000e+00, !dbg !44
  %243 = or i1 %241, %242, !dbg !45
  %244 = select i1 %243, float %237, float %240, !dbg !46
  %245 = bitcast float %244 to i32, !dbg !41
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 2, i32 31), !dbg !41
  %247 = bitcast i32 %246 to float, !dbg !41
  %248 = fcmp ogt float %244, %247, !dbg !43
  %249 = fcmp uno float %244, 0.000000e+00, !dbg !44
  %250 = or i1 %248, %249, !dbg !45
  %251 = select i1 %250, float %244, float %247, !dbg !46
  %252 = bitcast float %251 to i32, !dbg !41
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !41
  %254 = bitcast i32 %253 to float, !dbg !41
  %255 = fcmp ogt float %251, %254, !dbg !43
  %256 = fcmp uno float %251, 0.000000e+00, !dbg !44
  %257 = or i1 %255, %256, !dbg !45
  %258 = select i1 %257, i32 %252, i32 %253, !dbg !46
  %259 = insertelement <1 x i32> poison, i32 %258, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %259, i1 %184) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %260 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %189, i1 %188) #4, !dbg !41
  %261 = bitcast i32 %260 to float, !dbg !41
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !41
  %263 = bitcast i32 %262 to float, !dbg !41
  %264 = fcmp ogt float %261, %263, !dbg !43
  %265 = fcmp uno float %261, 0.000000e+00, !dbg !44
  %266 = or i1 %265, %264, !dbg !45
  %267 = select i1 %266, float %261, float %263, !dbg !46
  %268 = bitcast float %267 to i32, !dbg !41
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !41
  %270 = bitcast i32 %269 to float, !dbg !41
  %271 = fcmp ogt float %267, %270, !dbg !43
  %272 = fcmp uno float %267, 0.000000e+00, !dbg !44
  %273 = or i1 %271, %272, !dbg !45
  %274 = select i1 %273, float %267, float %270, !dbg !46
  %275 = bitcast float %274 to i32, !dbg !41
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !41
  %277 = bitcast i32 %276 to float, !dbg !41
  %278 = fcmp ogt float %274, %277, !dbg !43
  %279 = fcmp uno float %274, 0.000000e+00, !dbg !44
  %280 = or i1 %278, %279, !dbg !45
  %281 = select i1 %280, float %274, float %277, !dbg !46
  %282 = bitcast float %281 to i32, !dbg !41
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !41
  %284 = bitcast i32 %283 to float, !dbg !41
  %285 = fcmp ogt float %281, %284, !dbg !43
  %286 = fcmp uno float %281, 0.000000e+00, !dbg !44
  %287 = or i1 %285, %286, !dbg !45
  %288 = select i1 %287, i32 %282, i32 %283, !dbg !46
  %289 = insertelement <1 x i32> poison, i32 %288, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %289, i1 %220) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %290 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %291 = sext i32 %8 to i64, !dbg !47
  %292 = getelementptr bfloat, ptr addrspace(1) %1, i64 %291, !dbg !47
  %293 = fptrunc float %223 to bfloat, !dbg !48
  %294 = and i32 %10, 1023, !dbg !48
  %295 = icmp eq i32 %294, 0, !dbg !48
  %296 = bitcast bfloat %293 to i16, !dbg !48
  %297 = and i1 %9, %295, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %296, ptr addrspace(1) %292, i1 %297) #4, !dbg !48
  %298 = getelementptr bfloat, ptr addrspace(1) %2, i64 %291, !dbg !49
  %299 = fptrunc float %290 to bfloat, !dbg !50
  %300 = bitcast bfloat %299 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %300, ptr addrspace(1) %298, i1 %297) #4, !dbg !50
  %.inv = fcmp oge float %223, 0.000000e+00, !dbg !51
  %301 = select i1 %.inv, float 0.000000e+00, float %223, !dbg !51
  %302 = fsub float 0.000000e+00, %301, !dbg !53
  %.inv2 = fcmp ole float %290, 0.000000e+00, !dbg !54
  %303 = select i1 %.inv2, float 0.000000e+00, float %290, !dbg !54
  %304 = fcmp ogt float %302, %303, !dbg !56
  %305 = fcmp uno float %302, 0.000000e+00, !dbg !58
  %306 = or i1 %305, %304, !dbg !59
  %307 = select i1 %306, float %302, float %303, !dbg !60
  %308 = fmul float %307, 0x3F80204080000000, !dbg !61
  %309 = fcmp ogt float %308, 0x3EE4F8B580000000, !dbg !62
  %310 = fcmp uno float %308, 0.000000e+00, !dbg !64
  %311 = or i1 %309, %310, !dbg !65
  %312 = select i1 %311, float %308, float 0x3EE4F8B580000000, !dbg !66
  %313 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %312), !dbg !67
  %314 = mul i32 %8, 3072, !dbg !68
  %315 = and i1 %9, %181
  %316 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !35
  %317 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %316, i1 %9) #4, !dbg !69
  %318 = bitcast i16 %317 to bfloat, !dbg !69
  %319 = fpext bfloat %318 to float, !dbg !70
  %320 = fmul float %313, %319, !dbg !71
  %321 = tail call float @llvm.nvvm.round.f(float %320) #4, !dbg !72
  %322 = fcmp ogt float %321, -1.270000e+02, !dbg !73
  %323 = fcmp uno float %321, 0.000000e+00, !dbg !75
  %324 = or i1 %322, %323, !dbg !76
  %325 = select i1 %324, float %321, float -1.270000e+02, !dbg !77
  %326 = fcmp olt float %325, 1.270000e+02, !dbg !78
  %327 = fcmp uno float %325, 0.000000e+00, !dbg !80
  %328 = or i1 %326, %327, !dbg !81
  %329 = fptosi float %325 to i8, !dbg !82
  %330 = select i1 %328, i8 %329, i8 127, !dbg !83
  %331 = or disjoint i32 %11, %314, !dbg !84
  %332 = sext i32 %331 to i64, !dbg !85
  %333 = getelementptr i8, ptr addrspace(1) %3, i64 %332, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %330, ptr addrspace(1) %333, i1 %315) #4, !dbg !86
  %334 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi19, !dbg !35
  %335 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %334, i1 %9) #4, !dbg !69
  %336 = bitcast i16 %335 to bfloat, !dbg !69
  %337 = fpext bfloat %336 to float, !dbg !70
  %338 = fmul float %313, %337, !dbg !71
  %339 = tail call float @llvm.nvvm.round.f(float %338) #4, !dbg !72
  %340 = fcmp ogt float %339, -1.270000e+02, !dbg !73
  %341 = fcmp uno float %339, 0.000000e+00, !dbg !75
  %342 = or i1 %340, %341, !dbg !76
  %343 = select i1 %342, float %339, float -1.270000e+02, !dbg !77
  %344 = fcmp olt float %343, 1.270000e+02, !dbg !78
  %345 = fcmp uno float %343, 0.000000e+00, !dbg !80
  %346 = or i1 %344, %345, !dbg !81
  %347 = fptosi float %343 to i8, !dbg !82
  %348 = select i1 %346, i8 %347, i8 127, !dbg !83
  %349 = trunc nuw nsw i64 %.pre-phi15 to i32, !dbg !84
  %350 = add i32 %314, %349, !dbg !84
  %351 = sext i32 %350 to i64, !dbg !85
  %352 = getelementptr i8, ptr addrspace(1) %3, i64 %351, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %348, ptr addrspace(1) %352, i1 %315) #4, !dbg !86
  %353 = extractelement <4 x i32> %144, i64 3, !dbg !35
  %354 = sext i32 %353 to i64, !dbg !35
  %355 = getelementptr bfloat, ptr addrspace(1) %0, i64 %354, !dbg !35
  %356 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %355, i1 %9) #4, !dbg !69
  %357 = bitcast i16 %356 to bfloat, !dbg !69
  %358 = fpext bfloat %357 to float, !dbg !70
  %359 = fmul float %313, %358, !dbg !71
  %360 = tail call float @llvm.nvvm.round.f(float %359) #4, !dbg !72
  %361 = fcmp ogt float %360, -1.270000e+02, !dbg !73
  %362 = fcmp uno float %360, 0.000000e+00, !dbg !75
  %363 = or i1 %361, %362, !dbg !76
  %364 = select i1 %363, float %360, float -1.270000e+02, !dbg !77
  %365 = fcmp olt float %364, 1.270000e+02, !dbg !78
  %366 = fcmp uno float %364, 0.000000e+00, !dbg !80
  %367 = or i1 %365, %366, !dbg !81
  %368 = fptosi float %364 to i8, !dbg !82
  %369 = select i1 %367, i8 %368, i8 127, !dbg !83
  %370 = trunc nuw nsw i64 %.pre-phi20 to i32, !dbg !84
  %371 = add i32 %314, %370, !dbg !84
  %372 = sext i32 %371 to i64, !dbg !85
  %373 = getelementptr i8, ptr addrspace(1) %3, i64 %372, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %369, ptr addrspace(1) %373, i1 %315) #4, !dbg !86
  %374 = extractelement <4 x i32> %144, i64 2, !dbg !35
  %375 = sext i32 %374 to i64, !dbg !35
  %376 = getelementptr bfloat, ptr addrspace(1) %0, i64 %375, !dbg !35
  %377 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %376, i1 %9) #4, !dbg !69
  %378 = bitcast i16 %377 to bfloat, !dbg !69
  %379 = fpext bfloat %378 to float, !dbg !70
  %380 = fmul float %313, %379, !dbg !71
  %381 = tail call float @llvm.nvvm.round.f(float %380) #4, !dbg !72
  %382 = fcmp ogt float %381, -1.270000e+02, !dbg !73
  %383 = fcmp uno float %381, 0.000000e+00, !dbg !75
  %384 = or i1 %382, %383, !dbg !76
  %385 = select i1 %384, float %381, float -1.270000e+02, !dbg !77
  %386 = fcmp olt float %385, 1.270000e+02, !dbg !78
  %387 = fcmp uno float %385, 0.000000e+00, !dbg !80
  %388 = or i1 %386, %387, !dbg !81
  %389 = fptosi float %385 to i8, !dbg !82
  %390 = select i1 %388, i8 %389, i8 127, !dbg !83
  %391 = trunc nuw nsw i64 %.pre-phi25 to i32, !dbg !84
  %392 = add i32 %314, %391, !dbg !84
  %393 = sext i32 %392 to i64, !dbg !85
  %394 = getelementptr i8, ptr addrspace(1) %3, i64 %393, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %390, ptr addrspace(1) %394, i1 %315) #4, !dbg !86
  %395 = extractelement <4 x i32> %144, i64 1, !dbg !35
  %396 = sext i32 %395 to i64, !dbg !35
  %397 = getelementptr bfloat, ptr addrspace(1) %0, i64 %396, !dbg !35
  %398 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %397, i1 %9) #4, !dbg !69
  %399 = bitcast i16 %398 to bfloat, !dbg !69
  %400 = fpext bfloat %399 to float, !dbg !70
  %401 = fmul float %313, %400, !dbg !71
  %402 = tail call float @llvm.nvvm.round.f(float %401) #4, !dbg !72
  %403 = fcmp ogt float %402, -1.270000e+02, !dbg !73
  %404 = fcmp uno float %402, 0.000000e+00, !dbg !75
  %405 = or i1 %403, %404, !dbg !76
  %406 = select i1 %405, float %402, float -1.270000e+02, !dbg !77
  %407 = fcmp olt float %406, 1.270000e+02, !dbg !78
  %408 = fcmp uno float %406, 0.000000e+00, !dbg !80
  %409 = or i1 %407, %408, !dbg !81
  %410 = fptosi float %406 to i8, !dbg !82
  %411 = select i1 %409, i8 %410, i8 127, !dbg !83
  %412 = trunc nuw nsw i64 %.pre-phi30 to i32, !dbg !84
  %413 = add i32 %314, %412, !dbg !84
  %414 = sext i32 %413 to i64, !dbg !85
  %415 = getelementptr i8, ptr addrspace(1) %3, i64 %414, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %411, ptr addrspace(1) %415, i1 %315) #4, !dbg !86
  %416 = extractelement <4 x i32> %144, i64 0, !dbg !35
  %417 = sext i32 %416 to i64, !dbg !35
  %418 = getelementptr bfloat, ptr addrspace(1) %0, i64 %417, !dbg !35
  %419 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %418, i1 %9) #4, !dbg !69
  %420 = bitcast i16 %419 to bfloat, !dbg !69
  %421 = fpext bfloat %420 to float, !dbg !70
  %422 = fmul float %313, %421, !dbg !71
  %423 = tail call float @llvm.nvvm.round.f(float %422) #4, !dbg !72
  %424 = fcmp ogt float %423, -1.270000e+02, !dbg !73
  %425 = fcmp uno float %423, 0.000000e+00, !dbg !75
  %426 = or i1 %424, %425, !dbg !76
  %427 = select i1 %426, float %423, float -1.270000e+02, !dbg !77
  %428 = fcmp olt float %427, 1.270000e+02, !dbg !78
  %429 = fcmp uno float %427, 0.000000e+00, !dbg !80
  %430 = or i1 %428, %429, !dbg !81
  %431 = fptosi float %427 to i8, !dbg !82
  %432 = select i1 %430, i8 %431, i8 127, !dbg !83
  %433 = trunc nuw nsw i64 %.pre-phi35 to i32, !dbg !84
  %434 = add i32 %314, %433, !dbg !84
  %435 = sext i32 %434 to i64, !dbg !85
  %436 = getelementptr i8, ptr addrspace(1) %3, i64 %435, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %432, ptr addrspace(1) %436, i1 %315) #4, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 43, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 144, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 39, column: 45, scope: !6)
!26 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !25)
!27 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !25)
!28 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !25)
!29 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 45, scope: !6)
!31 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !30)
!32 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !30)
!33 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !30)
!34 = !DILocation(line: 48, column: 31, scope: !6)
!35 = !DILocation(line: 53, column: 34, scope: !6)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !22)
!37 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!38 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !22)
!39 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !22)
!40 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !22)
!41 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !42)
!46 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !42)
!47 = !DILocation(line: 45, column: 25, scope: !6)
!48 = !DILocation(line: 45, column: 36, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 53, column: 83, scope: !6)
!70 = !DILocation(line: 53, column: 145, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
