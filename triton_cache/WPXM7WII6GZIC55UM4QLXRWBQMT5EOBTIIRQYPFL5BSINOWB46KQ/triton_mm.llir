; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 3, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 3, !dbg !19
  %18 = and i32 %17, 15, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 3, !dbg !19
  %21 = or disjoint i32 %18, %20, !dbg !19
  %22 = or disjoint i32 %14, %21, !dbg !20
  %23 = shl nsw i32 %13, 6, !dbg !21
  %24 = lshr i32 %15, 2, !dbg !22
  %25 = and i32 %24, 63, !dbg !22
  %26 = shl i32 %15, 3, !dbg !22
  %27 = and i32 %26, 24, !dbg !22
  %28 = or disjoint i32 %23, %25, !dbg !23
  %29 = srem i32 %22, 77, !dbg !24
  %30 = srem i32 %28, 3072, !dbg !25
  %31 = shl i32 %15, 2, !dbg !26
  %32 = and i32 %31, 8, !dbg !26
  %33 = and i32 %31, 16, !dbg !26
  %34 = and i32 %31, 28, !dbg !26
  %35 = mul nsw i32 %29, 768, !dbg !27
  %36 = mul nsw i32 %30, 768, !dbg !28
  %37 = or disjoint i32 %35, %34, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = lshr exact i32 %16, 1, !dbg !31
  %41 = lshr i32 %15, 1, !dbg !31
  %42 = and i32 %41, 24, !dbg !31
  %43 = xor i32 %42, %34, !dbg !31
  %44 = shl nuw nsw i32 %21, 5, !dbg !31
  %45 = or disjoint i32 %44, %43, !dbg !31
  %46 = zext nneg i32 %45 to i64, !dbg !31
  %47 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %47, ptr addrspace(1) %39, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %48 = or disjoint i32 %36, %27, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !33
  %51 = xor i32 %26, %15, !dbg !34
  %52 = and i32 %51, 24, !dbg !34
  %53 = shl nuw nsw i32 %25, 5, !dbg !34
  %54 = or disjoint i32 %52, %53, !dbg !34
  %55 = zext nneg i32 %54 to i64, !dbg !34
  %56 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %55, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %50, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %57 = or disjoint i32 %37, 32, !dbg !29
  %58 = sext i32 %57 to i64, !dbg !30
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 18432), i64 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %59, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %61 = or disjoint i32 %48, 32, !dbg !32
  %62 = sext i32 %61 to i64, !dbg !33
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !33
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %55, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %63, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %65 = or disjoint i32 %37, 64, !dbg !29
  %66 = sext i32 %65 to i64, !dbg !30
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %67, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %69 = or disjoint i32 %48, 64, !dbg !32
  %70 = sext i32 %69 to i64, !dbg !33
  %71 = getelementptr bfloat, ptr addrspace(1) %1, i64 %70, !dbg !33
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %55, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %71, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %73 = or disjoint i32 %37, 96, !dbg !29
  %74 = sext i32 %73 to i64, !dbg !30
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %75, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %77 = or disjoint i32 %48, 96, !dbg !32
  %78 = sext i32 %77 to i64, !dbg !33
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %78, !dbg !33
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %55, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %79, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %81 = and i32 %31, 24
  %82 = and i32 %15, 7
  %83 = and i32 %15, 15
  %84 = xor i32 %81, %40
  %85 = or disjoint i32 %20, %83
  %86 = shl nuw nsw i32 %85, 5
  %87 = or disjoint i32 %86, %84
  %88 = zext nneg i32 %87 to i64
  %89 = or disjoint i32 %32, 16
  %90 = or disjoint i32 %40, %33
  %91 = xor i32 %90, %89
  %92 = or disjoint i32 %91, %86
  %93 = zext nneg i32 %92 to i64
  %94 = xor i32 %31, %15
  %95 = and i32 %94, 24
  %96 = and i32 %24, 24
  %97 = or disjoint i32 %96, %82
  %98 = shl nuw nsw i32 %97, 5
  %99 = or disjoint i32 %98, %95
  %100 = zext nneg i32 %99 to i64
  %101 = or disjoint i32 %99, 1024
  %102 = zext nneg i32 %101 to i64
  %invariant.op = or disjoint i32 %37, 128, !dbg !35
  %invariant.op23 = or disjoint i32 %48, 128, !dbg !35
  %103 = sext i32 %invariant.op to i64, !dbg !35
  %104 = sext i32 %invariant.op23 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %103, !dbg !35
  %invariant.gep42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %104, !dbg !35
  br label %105, !dbg !35

105:                                              ; preds = %4, %105
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %105 ]
  %106 = phi i32 [ -1, %4 ], [ %119, %105 ]
  %107 = phi i32 [ 3, %4 ], [ %180, %105 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %169, %105 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %170, %105 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %171, %105 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %172, %105 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %174, %105 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %175, %105 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %176, %105 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %177, %105 ]
  %116 = icmp samesign ult i64 %indvars.iv, 20, !dbg !35
  %117 = add i32 %106, 1, !dbg !35
  %118 = icmp slt i32 %117, 4, !dbg !35
  %119 = select i1 %118, i32 %117, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = shl i32 %119, 10, !dbg !31
  %121 = sext i32 %120 to i64, !dbg !31
  %122 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %121, !dbg !31
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i64 %88, !dbg !31
  %124 = ptrtoint ptr addrspace(3) %123 to i64, !dbg !31
  %125 = trunc i64 %124 to i32, !dbg !31
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %125) #1, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !31
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i64 %93, !dbg !31
  %132 = ptrtoint ptr addrspace(3) %131 to i64, !dbg !31
  %133 = trunc i64 %132 to i32, !dbg !31
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %133) #1, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !31
  %139 = shl i32 %119, 11, !dbg !34
  %140 = sext i32 %139 to i64, !dbg !34
  %141 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %140, !dbg !34
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %141, i64 %100, !dbg !34
  %143 = ptrtoint ptr addrspace(3) %142 to i64, !dbg !34
  %144 = trunc i64 %143 to i32, !dbg !34
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %144) #1, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !34
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %141, i64 %102, !dbg !34
  %151 = ptrtoint ptr addrspace(3) %150 to i64, !dbg !34
  %152 = trunc i64 %151 to i32, !dbg !34
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %152) #1, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !34
  %158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %108, float %109, float %110, float %111, i32 %127, i32 %128, i32 %129, i32 %130, i32 %146, i32 %147) #1, !dbg !36
  %159 = extractvalue { float, float, float, float } %158, 0, !dbg !36
  %160 = extractvalue { float, float, float, float } %158, 1, !dbg !36
  %161 = extractvalue { float, float, float, float } %158, 2, !dbg !36
  %162 = extractvalue { float, float, float, float } %158, 3, !dbg !36
  %163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %112, float %113, float %114, float %115, i32 %127, i32 %128, i32 %129, i32 %130, i32 %154, i32 %155) #1, !dbg !36
  %164 = extractvalue { float, float, float, float } %163, 0, !dbg !36
  %165 = extractvalue { float, float, float, float } %163, 1, !dbg !36
  %166 = extractvalue { float, float, float, float } %163, 2, !dbg !36
  %167 = extractvalue { float, float, float, float } %163, 3, !dbg !36
  %168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %159, float %160, float %161, float %162, i32 %135, i32 %136, i32 %137, i32 %138, i32 %148, i32 %149) #1, !dbg !36
  %169 = extractvalue { float, float, float, float } %168, 0, !dbg !36
  %170 = extractvalue { float, float, float, float } %168, 1, !dbg !36
  %171 = extractvalue { float, float, float, float } %168, 2, !dbg !36
  %172 = extractvalue { float, float, float, float } %168, 3, !dbg !36
  %173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %135, i32 %136, i32 %137, i32 %138, i32 %156, i32 %157) #1, !dbg !36
  %174 = extractvalue { float, float, float, float } %173, 0, !dbg !36
  %175 = extractvalue { float, float, float, float } %173, 1, !dbg !36
  %176 = extractvalue { float, float, float, float } %173, 2, !dbg !36
  %177 = extractvalue { float, float, float, float } %173, 3, !dbg !36
  %178 = add i32 %107, 1, !dbg !35
  %179 = icmp slt i32 %178, 4, !dbg !35
  %180 = select i1 %179, i32 %178, i32 0, !dbg !35
  %181 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep41 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %181, !dbg !30
  %182 = shl i32 %180, 10, !dbg !31
  %183 = sext i32 %182 to i64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr bfloat, ptr addrspace(3) %47, i64 %183, !dbg !31
  %184 = select i1 %116, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep41, i32 %184) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep43 = getelementptr bfloat, ptr addrspace(1) %invariant.gep42, i64 %181, !dbg !33
  %185 = shl i32 %180, 11, !dbg !34
  %186 = sext i32 %185 to i64, !dbg !34
  %gep22 = getelementptr bfloat, ptr addrspace(3) %56, i64 %186, !dbg !34
  %187 = select i1 %116, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep22, ptr addrspace(1) %gep43, i32 %187) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %188, label %105, !dbg !35

188:                                              ; preds = %105
  %189 = and i32 %26, 56, !dbg !22
  %190 = or disjoint i32 %23, %189, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %191 = icmp slt i32 %22, 77, !dbg !38
  %192 = icmp slt i32 %190, 3072, !dbg !39
  %193 = and i1 %191, %192, !dbg !40
  %194 = mul i32 %22, 3072, !dbg !41
  %195 = add i32 %194, %190, !dbg !42
  %196 = sext i32 %195 to i64, !dbg !43
  %197 = getelementptr bfloat, ptr addrspace(1) %2, i64 %196, !dbg !43
  %198 = fptrunc float %169 to bfloat, !dbg !44
  %199 = fptrunc float %170 to bfloat, !dbg !44
  %200 = fptrunc float %171 to bfloat, !dbg !44
  %201 = fptrunc float %172 to bfloat, !dbg !44
  %202 = fptrunc float %174 to bfloat, !dbg !44
  %203 = fptrunc float %175 to bfloat, !dbg !44
  %204 = fptrunc float %176 to bfloat, !dbg !44
  %205 = fptrunc float %177 to bfloat, !dbg !44
  %206 = shl i32 %15, 1, !dbg !44
  %207 = and i32 %206, 6, !dbg !44
  %208 = shl i32 %15, 4, !dbg !44
  %209 = and i32 %208, 192, !dbg !44
  %210 = or disjoint i32 %209, %207, !dbg !44
  %211 = shl nuw nsw i32 %16, 4, !dbg !44
  %212 = or disjoint i32 %210, %211, !dbg !44
  %213 = or disjoint i32 %212, %96, !dbg !44
  %214 = shl nuw nsw i32 %19, 3, !dbg !44
  %215 = or disjoint i32 %213, %214, !dbg !44
  %216 = and i32 %26, 1016, !dbg !44
  %217 = or disjoint i32 %216, %214, !dbg !44
  %218 = lshr i32 %215, 3, !dbg !44
  %219 = and i32 %218, 536870904, !dbg !44
  %220 = add nuw nsw i32 %219, %215, !dbg !44
  %221 = zext nneg i32 %220 to i64, !dbg !44
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %221, !dbg !44
  %223 = bitcast bfloat %198 to i16, !dbg !44
  %224 = bitcast bfloat %199 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %222, i16 %223, i16 %224, i1 true) #1, !dbg !44
  %225 = or disjoint i32 %215, 512, !dbg !44
  %226 = lshr i32 %225, 3, !dbg !44
  %227 = and i32 %226, 536870904, !dbg !44
  %228 = add nuw nsw i32 %227, %225, !dbg !44
  %229 = zext nneg i32 %228 to i64, !dbg !44
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %229, !dbg !44
  %231 = bitcast bfloat %200 to i16, !dbg !44
  %232 = bitcast bfloat %201 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %230, i16 %231, i16 %232, i1 true) #1, !dbg !44
  %233 = or disjoint i32 %215, 32, !dbg !44
  %234 = add nuw nsw i32 %219, %233, !dbg !44
  %235 = zext nneg i32 %234 to i64, !dbg !44
  %236 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %235, !dbg !44
  %237 = bitcast bfloat %202 to i16, !dbg !44
  %238 = bitcast bfloat %203 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %236, i16 %237, i16 %238, i1 true) #1, !dbg !44
  %239 = or disjoint i32 %215, 544, !dbg !44
  %240 = lshr i32 %239, 3, !dbg !44
  %241 = and i32 %240, 536870904, !dbg !44
  %242 = add nuw nsw i32 %241, %239, !dbg !44
  %243 = zext nneg i32 %242 to i64, !dbg !44
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %243, !dbg !44
  %245 = bitcast bfloat %204 to i16, !dbg !44
  %246 = bitcast bfloat %205 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %244, i16 %245, i16 %246, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %247 = lshr exact i32 %217, 3, !dbg !44
  %248 = and i32 %247, 248, !dbg !44
  %249 = add nuw nsw i32 %248, %217, !dbg !44
  %250 = zext nneg i32 %249 to i64, !dbg !44
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %250, !dbg !44
  %.extract = load i32, ptr addrspace(3) %251, align 16, !dbg !44
  %252 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i64 4, !dbg !44
  %.extract15 = load i32, ptr addrspace(3) %252, align 4, !dbg !44
  %253 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i64 8, !dbg !44
  %.extract17 = load i32, ptr addrspace(3) %253, align 8, !dbg !44
  %254 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i64 12, !dbg !44
  %.extract19 = load i32, ptr addrspace(3) %254, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %197, i1 %193) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuajhsd73sq6d6jy6xpq5n3luvpn62ri3gggdi5z5aawy3cgbc7r.py", directory: "/tmp/torchinductor_root/ua")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 29, scope: !6)
!28 = !DILocation(line: 77, column: 54, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
