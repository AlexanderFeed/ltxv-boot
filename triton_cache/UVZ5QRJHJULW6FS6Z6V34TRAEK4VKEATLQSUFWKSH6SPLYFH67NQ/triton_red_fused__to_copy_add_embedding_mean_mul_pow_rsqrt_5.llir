; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/ev/cevrwp6u77pgy5gq3ndc7sqvrql2yevtm4oraib37xqdkvw3nkco.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, 512, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = shl i32 %12, 2, !dbg !13
  %14 = and i32 %13, 2044, !dbg !13
  %15 = sext i32 %10 to i64, !dbg !14
  %16 = getelementptr i64, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #6, !dbg !15
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #6, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #6, !dbg !15
  %22 = shl i32 %10, 12, !dbg !16
  %23 = add i64 %21, 32128, !dbg !17
  %24 = icmp slt i64 %21, 0, !dbg !18
  %25 = select i1 %24, i64 %23, i64 %21, !dbg !19
  %26 = icmp ugt i64 %25, 32127, !dbg !20
  %.not3 = and i1 %11, %26, !dbg !21
  %invariant.op = or disjoint i32 %14, %22, !dbg !22
  %27 = zext nneg i32 %14 to i64, !dbg !22
  %28 = sext i32 %invariant.op to i64, !dbg !23
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %11) #6, !dbg !24
  %31 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !25
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #6, !dbg !26
  br i1 %.not3, label %33, label %__nv_rsqrtf.exit, !dbg !27

33:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 43, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %9
  %34 = icmp slt i64 %20, 0, !dbg !18
  %35 = shl i64 %20, 12, !dbg !21
  %36 = add i64 %35, 131596288, !dbg !21
  %37 = select i1 %34, i64 %36, i64 %35, !dbg !21
  %38 = getelementptr bfloat, ptr addrspace(1) %1, i64 %37
  %39 = lshr i32 %12, 5, !dbg !13
  %40 = and i32 %12, 31, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %41 = getelementptr bfloat, ptr addrspace(1) %38, i64 %27, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %11) #6, !dbg !29
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %43 = sext i32 %.reass.1 to i64, !dbg !23
  %44 = getelementptr bfloat, ptr addrspace(1) %2, i64 %43, !dbg !23
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %11) #6, !dbg !24
  %46 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %11) #6, !dbg !26
  %48 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !24
  %50 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !29
  %52 = extractvalue { i32, i32 } %32, 1, !dbg !26
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !26
  %54 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !24
  %56 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !29
  %58 = extractvalue { i32, i32 } %32, 0, !dbg !26
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !26
  %60 = or disjoint i64 %27, 2048, !dbg !30
  %61 = extractvalue { i32, i32 } %47, 1, !dbg !26
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !26
  %63 = extractvalue { i32, i32 } %47, 0, !dbg !26
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !26
  %65 = extractvalue { i32, i32 } %45, 1, !dbg !24
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !24
  %67 = extractvalue { i32, i32 } %45, 0, !dbg !24
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %69 = getelementptr bfloat, ptr addrspace(1) %38, i64 %60, !dbg !28
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %69, i1 %11) #6, !dbg !29
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !29
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !29
  %73 = extractvalue { i32, i32 } %70, 1, !dbg !29
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !29
  %75 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !31
  %76 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !32
  %77 = fadd <2 x float> %75, %76, !dbg !33
  %78 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !34
  %79 = fadd <2 x float> %77, %78, !dbg !35
  %80 = fmul <2 x float> %79, %79, !dbg !36
  %81 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !34
  %82 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !31
  %83 = fpext <2 x bfloat> %72 to <2 x float>, !dbg !32
  %84 = fadd <2 x float> %82, %83, !dbg !33
  %85 = fadd <2 x float> %84, %81, !dbg !35
  %86 = fmul <2 x float> %85, %85, !dbg !36
  %87 = fadd <2 x float> %80, %86, !dbg !37
  %88 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !31
  %89 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !32
  %90 = fadd <2 x float> %88, %89, !dbg !33
  %91 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !34
  %92 = fadd <2 x float> %90, %91, !dbg !35
  %93 = fmul <2 x float> %92, %92, !dbg !36
  %94 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !34
  %95 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !31
  %96 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !32
  %97 = fadd <2 x float> %95, %96, !dbg !33
  %98 = fadd <2 x float> %97, %94, !dbg !35
  %99 = fmul <2 x float> %98, %98, !dbg !36
  %100 = fadd <2 x float> %93, %99, !dbg !37
  %shift = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %101 = fadd <2 x float> %87, %shift, !dbg !38
  %102 = fadd <2 x float> %100, %101, !dbg !38
  %shift20 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %103 = fadd <2 x float> %shift20, %102, !dbg !38
  %104 = extractelement <2 x float> %103, i64 0, !dbg !38
  %105 = select i1 %11, float %104, float 0.000000e+00, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !43
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = fadd float %117, %120, !dbg !38
  %122 = bitcast float %121 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = fadd float %121, %124, !dbg !38
  %126 = and i32 %39, 15, !dbg !43
  %127 = icmp eq i32 %40, 0, !dbg !43
  %128 = zext nneg i32 %126 to i64, !dbg !43
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !43
  %130 = bitcast float %125 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %127) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %131 = icmp slt i32 %12, 16, !dbg !43
  %132 = sext i32 %12 to i64, !dbg !43
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !43
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %131) #6, !dbg !43
  %135 = bitcast i32 %134 to float, !dbg !43
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = fadd float %135, %137, !dbg !38
  %139 = bitcast float %138 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = fadd float %138, %141, !dbg !38
  %143 = bitcast float %142 to i32, !dbg !43
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !43
  %145 = bitcast i32 %144 to float, !dbg !43
  %146 = fadd float %142, %145, !dbg !38
  %147 = bitcast float %146 to i32, !dbg !43
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = fadd float %146, %149, !dbg !38
  %151 = and i32 %12, 15, !dbg !43
  %152 = icmp eq i32 %151, 0, !dbg !43
  %153 = and i1 %131, %152, !dbg !43
  %154 = bitcast float %150 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %154, i1 %153) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %155 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %156 = tail call float @llvm.nvvm.div.full(float %155, float 4.096000e+03), !dbg !44
  %157 = fadd float %156, 0x3EB0C6F7A0000000, !dbg !45
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %.not.i10 = icmp eq i32 %161, 0, !dbg !46
  br i1 %.not.i10, label %164, label %162, !dbg !46

162:                                              ; preds = %__nv_rsqrtf.exit
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !46
  br label %166, !dbg !46

164:                                              ; preds = %__nv_rsqrtf.exit
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !46
  br label %166, !dbg !46

166:                                              ; preds = %162, %164
  %.0.i11 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !46
  %167 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !47
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %167, i1 true) #6, !dbg !48
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %11) #6, !dbg !49
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #6, !dbg !50
  %171 = extractvalue { i32, i32 } %170, 1, !dbg !50
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !50
  %173 = extractvalue { i32, i32 } %170, 0, !dbg !50
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !50
  %175 = extractvalue { i32, i32 } %169, 1, !dbg !49
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !49
  %177 = extractvalue { i32, i32 } %169, 0, !dbg !49
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !49
  %179 = extractvalue { i32, i32 } %168, 1, !dbg !48
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !48
  %181 = extractvalue { i32, i32 } %168, 0, !dbg !48
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %11) #6, !dbg !52
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !52
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !52
  %186 = extractvalue { i32, i32 } %183, 1, !dbg !52
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !52
  %188 = getelementptr bfloat, ptr addrspace(1) %5, i64 %28, !dbg !53
  %189 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !54
  %190 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !55
  %191 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !56
  %192 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !57
  %193 = fadd <2 x float> %190, %192, !dbg !58
  %194 = fadd <2 x float> %193, %189, !dbg !59
  %195 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !60
  %196 = shufflevector <2 x float> %195, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %197 = fmul <2 x float> %196, %194, !dbg !60
  %198 = fmul <2 x float> %197, %191, !dbg !61
  %199 = fptrunc <2 x float> %198 to <2 x bfloat>, !dbg !62
  %200 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !54
  %201 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !55
  %202 = fpext <2 x bfloat> %180 to <2 x float>, !dbg !56
  %203 = fpext <2 x bfloat> %187 to <2 x float>, !dbg !57
  %204 = fadd <2 x float> %201, %203, !dbg !58
  %205 = fadd <2 x float> %204, %200, !dbg !59
  %206 = fmul <2 x float> %196, %205, !dbg !60
  %207 = fmul <2 x float> %206, %202, !dbg !61
  %208 = fptrunc <2 x float> %207 to <2 x bfloat>, !dbg !62
  %209 = bitcast <2 x bfloat> %199 to i32, !dbg !62
  %210 = bitcast <2 x bfloat> %208 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %209, i32 %210, ptr addrspace(1) %188, i1 %11) #6, !dbg !62
  %211 = getelementptr bfloat, ptr addrspace(1) %4, i64 %60, !dbg !47
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %211, i1 true) #6, !dbg !48
  %213 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %11) #6, !dbg !49
  %214 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %11) #6, !dbg !50
  %215 = extractvalue { i32, i32 } %214, 1, !dbg !50
  %216 = bitcast i32 %215 to <2 x bfloat>, !dbg !50
  %217 = extractvalue { i32, i32 } %214, 0, !dbg !50
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !50
  %219 = extractvalue { i32, i32 } %213, 1, !dbg !49
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !49
  %221 = extractvalue { i32, i32 } %213, 0, !dbg !49
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !49
  %223 = extractvalue { i32, i32 } %212, 1, !dbg !48
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !48
  %225 = extractvalue { i32, i32 } %212, 0, !dbg !48
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %227 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %69, i1 %11) #6, !dbg !52
  %228 = extractvalue { i32, i32 } %227, 0, !dbg !52
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !52
  %230 = extractvalue { i32, i32 } %227, 1, !dbg !52
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !52
  %232 = getelementptr bfloat, ptr addrspace(1) %5, i64 %43, !dbg !53
  %233 = fpext <2 x bfloat> %218 to <2 x float>, !dbg !54
  %234 = fpext <2 x bfloat> %222 to <2 x float>, !dbg !55
  %235 = fpext <2 x bfloat> %226 to <2 x float>, !dbg !56
  %236 = fpext <2 x bfloat> %229 to <2 x float>, !dbg !57
  %237 = fadd <2 x float> %234, %236, !dbg !58
  %238 = fadd <2 x float> %237, %233, !dbg !59
  %239 = fmul <2 x float> %196, %238, !dbg !60
  %240 = fmul <2 x float> %239, %235, !dbg !61
  %241 = fptrunc <2 x float> %240 to <2 x bfloat>, !dbg !62
  %242 = fpext <2 x bfloat> %216 to <2 x float>, !dbg !54
  %243 = fpext <2 x bfloat> %220 to <2 x float>, !dbg !55
  %244 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !56
  %245 = fpext <2 x bfloat> %231 to <2 x float>, !dbg !57
  %246 = fadd <2 x float> %243, %245, !dbg !58
  %247 = fadd <2 x float> %246, %242, !dbg !59
  %248 = fmul <2 x float> %196, %247, !dbg !60
  %249 = fmul <2 x float> %248, %244, !dbg !61
  %250 = fptrunc <2 x float> %249 to <2 x bfloat>, !dbg !62
  %251 = bitcast <2 x bfloat> %241 to i32, !dbg !62
  %252 = bitcast <2 x bfloat> %250 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %251, i32 %252, ptr addrspace(1) %232, i1 %11) #6, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cevrwp6u77pgy5gq3ndc7sqvrql2yevtm4oraib37xqdkvw3nkco.py", directory: "/tmp/torchinductor_root/ev")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 25, column: 21, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 29, column: 30, scope: !10)
!15 = !DILocation(line: 29, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 46, scope: !10)
!17 = !DILocation(line: 40, column: 22, scope: !10)
!18 = !DILocation(line: 41, column: 22, scope: !10)
!19 = !DILocation(line: 42, column: 36, scope: !10)
!20 = !DILocation(line: 43, column: 41, scope: !10)
!21 = !DILocation(line: 44, column: 46, scope: !10)
!22 = !DILocation(line: 31, column: 40, scope: !10)
!23 = !DILocation(line: 37, column: 34, scope: !10)
!24 = !DILocation(line: 37, column: 51, scope: !10)
!25 = !DILocation(line: 38, column: 34, scope: !10)
!26 = !DILocation(line: 38, column: 51, scope: !10)
!27 = !DILocation(line: 43, column: 68, scope: !10)
!28 = !DILocation(line: 44, column: 34, scope: !10)
!29 = !DILocation(line: 44, column: 53, scope: !10)
!30 = !DILocation(line: 32, column: 31, scope: !10)
!31 = !DILocation(line: 37, column: 112, scope: !10)
!32 = !DILocation(line: 44, column: 114, scope: !10)
!33 = !DILocation(line: 45, column: 22, scope: !10)
!34 = !DILocation(line: 38, column: 112, scope: !10)
!35 = !DILocation(line: 46, column: 23, scope: !10)
!36 = !DILocation(line: 48, column: 24, scope: !10)
!37 = !DILocation(line: 50, column: 25, scope: !10)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !10, file: !40, discriminator: 0)
!42 = !DILocation(line: 52, column: 27, scope: !10)
!43 = !DILocation(line: 286, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 72, column: 25, scope: !10)
!45 = !DILocation(line: 74, column: 24, scope: !10)
!46 = !DILocation(line: 75, column: 32, scope: !10)
!47 = !DILocation(line: 59, column: 35, scope: !10)
!48 = !DILocation(line: 59, column: 42, scope: !10)
!49 = !DILocation(line: 60, column: 52, scope: !10)
!50 = !DILocation(line: 61, column: 52, scope: !10)
!51 = !DILocation(line: 66, column: 70, scope: !10)
!52 = !DILocation(line: 67, column: 55, scope: !10)
!53 = !DILocation(line: 79, column: 29, scope: !10)
!54 = !DILocation(line: 61, column: 114, scope: !10)
!55 = !DILocation(line: 60, column: 114, scope: !10)
!56 = !DILocation(line: 59, column: 95, scope: !10)
!57 = !DILocation(line: 67, column: 117, scope: !10)
!58 = !DILocation(line: 68, column: 24, scope: !10)
!59 = !DILocation(line: 69, column: 24, scope: !10)
!60 = !DILocation(line: 76, column: 24, scope: !10)
!61 = !DILocation(line: 78, column: 24, scope: !10)
!62 = !DILocation(line: 79, column: 53, scope: !10)
!63 = !DILocation(line: 53, column: 4, scope: !10)
