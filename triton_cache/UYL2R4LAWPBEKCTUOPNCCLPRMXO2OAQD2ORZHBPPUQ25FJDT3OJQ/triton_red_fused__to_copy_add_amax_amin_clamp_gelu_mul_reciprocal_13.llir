; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = icmp slt i32 %13, 512, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = shl i32 %15, 2, !dbg !11
  %18 = and i32 %17, 4092, !dbg !11
  %19 = sext i32 %13 to i64, !dbg !12
  %20 = getelementptr bfloat, ptr addrspace(1) %1, i64 %19, !dbg !12
  %21 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %22 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %25 = bitcast i16 %24 to bfloat, !dbg !13
  %26 = getelementptr bfloat, ptr addrspace(1) %2, i64 %19, !dbg !14
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !15
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !15
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !15
  %31 = bitcast i16 %30 to bfloat, !dbg !15
  %32 = mul i32 %13, 12288, !dbg !16
  %.inv = fcmp oge bfloat %25, 0xR0000, !dbg !17
  %33 = select i1 %.inv, bfloat 0xR0000, bfloat %25, !dbg !17
  %34 = fpext bfloat %33 to float, !dbg !17
  %35 = fsub float 0.000000e+00, %34, !dbg !21
  %.inv2 = fcmp ole bfloat %31, 0xR0000, !dbg !22
  %36 = select i1 %.inv2, bfloat 0xR0000, bfloat %31, !dbg !22
  %37 = fpext bfloat %36 to float, !dbg !22
  %38 = fcmp ogt float %35, %37, !dbg !24
  %39 = fcmp uno float %35, 0.000000e+00, !dbg !26
  %40 = or i1 %39, %38, !dbg !27
  %41 = select i1 %40, float %35, float %37, !dbg !28
  %42 = fmul float %41, 0x3F80204080000000, !dbg !29
  %43 = fcmp ogt float %42, 0x3EE4F8B580000000, !dbg !30
  %44 = fcmp uno float %42, 0.000000e+00, !dbg !32
  %45 = or i1 %43, %44, !dbg !33
  %46 = select i1 %45, float %42, float 0x3EE4F8B580000000, !dbg !34
  %47 = zext nneg i32 %18 to i64, !dbg !35
  %48 = insertelement <2 x i1> poison, i1 %14, i64 0, !dbg !36
  %49 = shufflevector <2 x i1> %48, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %50 = insertelement <2 x float> poison, float %46, i64 0, !dbg !37
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %52 = insertelement <4 x i1> poison, i1 %14, i64 0, !dbg !38
  %53 = shufflevector <4 x i1> %52, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !38
  br label %54, !dbg !35

54:                                               ; preds = %12, %__nv_tanhf.exit137
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit137 ]
  %55 = phi float [ 0x7FF0000000000000, %12 ], [ %278, %__nv_tanhf.exit137 ]
  %56 = phi float [ 0x7FF0000000000000, %12 ], [ %279, %__nv_tanhf.exit137 ]
  %57 = phi <2 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %277, %__nv_tanhf.exit137 ]
  %58 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %285, %__nv_tanhf.exit137 ]
  %59 = or disjoint i64 %indvars.iv, %47, !dbg !39
  %60 = trunc nuw nsw i64 %59 to i32, !dbg !40
  %61 = add i32 %32, %60, !dbg !40
  %62 = sext i32 %61 to i64, !dbg !41
  %63 = getelementptr i32, ptr addrspace(1) %0, i64 %62, !dbg !41
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %14) #5, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !42
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !42
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !42
  %69 = getelementptr bfloat, ptr addrspace(1) %3, i64 %59, !dbg !43
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %69, i1 true) #5, !dbg !44
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !44
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !44
  %73 = extractvalue { i32, i32 } %70, 1, !dbg !44
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !44
  %75 = getelementptr bfloat, ptr addrspace(1) %4, i64 %59, !dbg !45
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %75, i1 true) #5, !dbg !46
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !46
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !46
  %79 = extractvalue { i32, i32 } %76, 1, !dbg !46
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !46
  %81 = fpext <2 x bfloat> %72 to <2 x float>, !dbg !47
  %82 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !48
  %83 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !49
  %84 = insertelement <2 x i32> %83, i32 %66, i64 1, !dbg !49
  %85 = sitofp <2 x i32> %84 to <2 x float>, !dbg !49
  %86 = fmul <2 x float> %51, %85, !dbg !37
  %87 = fmul <2 x float> %86, %81, !dbg !50
  %88 = fadd <2 x float> %87, %82, !dbg !51
  %89 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !47
  %90 = fpext <2 x bfloat> %80 to <2 x float>, !dbg !48
  %91 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !49
  %92 = insertelement <2 x i32> %91, i32 %68, i64 1, !dbg !49
  %93 = sitofp <2 x i32> %92 to <2 x float>, !dbg !49
  %94 = fmul <2 x float> %51, %93, !dbg !37
  %95 = fmul <2 x float> %94, %89, !dbg !50
  %96 = fadd <2 x float> %95, %90, !dbg !51
  %97 = fmul <2 x float> %88, splat (float 5.000000e-01), !dbg !52
  %98 = fmul <2 x float> %96, splat (float 5.000000e-01), !dbg !52
  %99 = extractelement <2 x float> %88, i64 0, !dbg !53
  %100 = fmul float %99, %99, !dbg !54
  %101 = extractelement <2 x float> %88, i64 1, !dbg !53
  %102 = fmul float %101, %101, !dbg !54
  %103 = extractelement <2 x float> %96, i64 0, !dbg !53
  %104 = fmul float %103, %103, !dbg !54
  %105 = extractelement <2 x float> %96, i64 1, !dbg !53
  %106 = fmul float %105, %105, !dbg !54
  %107 = fmul float %99, %100, !dbg !55
  %108 = fmul float %101, %102, !dbg !55
  %109 = fmul float %103, %104, !dbg !55
  %110 = fmul float %105, %106, !dbg !55
  %111 = fmul float %107, 0x3FA6E4E260000000, !dbg !56
  %112 = fmul float %108, 0x3FA6E4E260000000, !dbg !56
  %113 = fmul float %109, 0x3FA6E4E260000000, !dbg !56
  %114 = fmul float %110, 0x3FA6E4E260000000, !dbg !56
  %115 = fadd float %99, %111, !dbg !53
  %116 = fadd float %101, %112, !dbg !53
  %117 = fadd float %103, %113, !dbg !53
  %118 = fadd float %105, %114, !dbg !53
  %119 = fmul float %115, 0x3FE9884540000000, !dbg !57
  %120 = fmul float %116, 0x3FE9884540000000, !dbg !57
  %121 = fmul float %117, 0x3FE9884540000000, !dbg !57
  %122 = fmul float %118, 0x3FE9884540000000, !dbg !57
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i62 = icmp eq i32 %123, 0, !dbg !58
  %124 = tail call float @llvm.nvvm.fabs.ftz.f(float %119) #5, !dbg !58
  %125 = tail call float @llvm.nvvm.fabs.f(float %119) #5, !dbg !58
  %.01.i63 = select i1 %.not.i62, float %125, float %124, !dbg !58
  %126 = fcmp ult float %.01.i63, 0x3FE3333340000000, !dbg !58
  br i1 %126, label %__internal_fmad.exit3.i69, label %__internal_fmad.exit1.i64, !dbg !58

__internal_fmad.exit1.i64:                        ; preds = %54
  %127 = fmul float %.01.i63, 0x4007154760000000, !dbg !58
  %128 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %127) #5, !dbg !58
  %129 = fadd float %128, 1.000000e+00, !dbg !58
  %130 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %129) #6, !dbg !58, !srcloc !59
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i65 = icmp eq i32 %131, 0, !dbg !58
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %130, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i66 = select i1 %.not6.i65, float %133, float %132, !dbg !58
  %134 = fcmp oge float %.01.i63, 0x4022059680000000, !dbg !58
  %s.0.i67 = select i1 %134, float 1.000000e+00, float %.03.i66, !dbg !58
  %135 = bitcast float %s.0.i67 to i32, !dbg !58
  %136 = bitcast float %119 to i32, !dbg !58
  %137 = and i32 %136, -2147483648, !dbg !58
  %138 = or i32 %137, %135, !dbg !58
  %139 = bitcast i32 %138 to float, !dbg !58
  br label %__nv_tanhf.exit80, !dbg !58

__internal_fmad.exit3.i69:                        ; preds = %54
  %140 = fmul float %119, %119, !dbg !58
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i70 = icmp eq i32 %141, 0, !dbg !58
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #5, !dbg !58
  %143 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i71 = select i1 %.not1.i70, float %143, float %142, !dbg !58
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i72 = icmp eq i32 %144, 0, !dbg !58
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i71, float %140, float 0x3FC10B2820000000) #5, !dbg !58
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i71, float %140, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i73 = select i1 %.not2.i72, float %146, float %145, !dbg !58
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i74 = icmp eq i32 %147, 0, !dbg !58
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i73, float %140, float 0xBFD5553DA0000000) #5, !dbg !58
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i73, float %140, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i75 = select i1 %.not3.i74, float %149, float %148, !dbg !58
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i76 = icmp eq i32 %150, 0, !dbg !58
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i75, float %140, float 0.000000e+00) #5, !dbg !58
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i75, float %140, float 0.000000e+00) #5, !dbg !58
  %.04.i77 = select i1 %.not4.i76, float %152, float %151, !dbg !58
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i78 = icmp eq i32 %153, 0, !dbg !58
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i77, float %119, float %119) #5, !dbg !58
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i77, float %119, float %119) #5, !dbg !58
  %.02.i79 = select i1 %.not5.i78, float %155, float %154, !dbg !58
  br label %__nv_tanhf.exit80, !dbg !58

__nv_tanhf.exit80:                                ; preds = %__internal_fmad.exit1.i64, %__internal_fmad.exit3.i69
  %s.1.i68 = phi float [ %139, %__internal_fmad.exit1.i64 ], [ %.02.i79, %__internal_fmad.exit3.i69 ], !dbg !58
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i81 = icmp eq i32 %156, 0, !dbg !58
  %157 = tail call float @llvm.nvvm.fabs.ftz.f(float %120) #5, !dbg !58
  %158 = tail call float @llvm.nvvm.fabs.f(float %120) #5, !dbg !58
  %.01.i82 = select i1 %.not.i81, float %158, float %157, !dbg !58
  %159 = fcmp ult float %.01.i82, 0x3FE3333340000000, !dbg !58
  br i1 %159, label %__internal_fmad.exit3.i88, label %__internal_fmad.exit1.i83, !dbg !58

__internal_fmad.exit1.i83:                        ; preds = %__nv_tanhf.exit80
  %160 = fmul float %.01.i82, 0x4007154760000000, !dbg !58
  %161 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %160) #5, !dbg !58
  %162 = fadd float %161, 1.000000e+00, !dbg !58
  %163 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %162) #6, !dbg !58, !srcloc !59
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i84 = icmp eq i32 %164, 0, !dbg !58
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %163, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %163, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i85 = select i1 %.not6.i84, float %166, float %165, !dbg !58
  %167 = fcmp oge float %.01.i82, 0x4022059680000000, !dbg !58
  %s.0.i86 = select i1 %167, float 1.000000e+00, float %.03.i85, !dbg !58
  %168 = bitcast float %s.0.i86 to i32, !dbg !58
  %169 = bitcast float %120 to i32, !dbg !58
  %170 = and i32 %169, -2147483648, !dbg !58
  %171 = or i32 %170, %168, !dbg !58
  %172 = bitcast i32 %171 to float, !dbg !58
  br label %__nv_tanhf.exit99, !dbg !58

__internal_fmad.exit3.i88:                        ; preds = %__nv_tanhf.exit80
  %173 = fmul float %120, %120, !dbg !58
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i89 = icmp eq i32 %174, 0, !dbg !58
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %173, float 0xBFAAC795C0000000) #5, !dbg !58
  %176 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %173, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i90 = select i1 %.not1.i89, float %176, float %175, !dbg !58
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i91 = icmp eq i32 %177, 0, !dbg !58
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i90, float %173, float 0x3FC10B2820000000) #5, !dbg !58
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i90, float %173, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i92 = select i1 %.not2.i91, float %179, float %178, !dbg !58
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i93 = icmp eq i32 %180, 0, !dbg !58
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i92, float %173, float 0xBFD5553DA0000000) #5, !dbg !58
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i92, float %173, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i94 = select i1 %.not3.i93, float %182, float %181, !dbg !58
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i95 = icmp eq i32 %183, 0, !dbg !58
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i94, float %173, float 0.000000e+00) #5, !dbg !58
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i94, float %173, float 0.000000e+00) #5, !dbg !58
  %.04.i96 = select i1 %.not4.i95, float %185, float %184, !dbg !58
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i97 = icmp eq i32 %186, 0, !dbg !58
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i96, float %120, float %120) #5, !dbg !58
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i96, float %120, float %120) #5, !dbg !58
  %.02.i98 = select i1 %.not5.i97, float %188, float %187, !dbg !58
  br label %__nv_tanhf.exit99, !dbg !58

__nv_tanhf.exit99:                                ; preds = %__internal_fmad.exit1.i83, %__internal_fmad.exit3.i88
  %s.1.i87 = phi float [ %172, %__internal_fmad.exit1.i83 ], [ %.02.i98, %__internal_fmad.exit3.i88 ], !dbg !58
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i100 = icmp eq i32 %189, 0, !dbg !58
  %190 = tail call float @llvm.nvvm.fabs.ftz.f(float %121) #5, !dbg !58
  %191 = tail call float @llvm.nvvm.fabs.f(float %121) #5, !dbg !58
  %.01.i101 = select i1 %.not.i100, float %191, float %190, !dbg !58
  %192 = fcmp ult float %.01.i101, 0x3FE3333340000000, !dbg !58
  br i1 %192, label %__internal_fmad.exit3.i107, label %__internal_fmad.exit1.i102, !dbg !58

__internal_fmad.exit1.i102:                       ; preds = %__nv_tanhf.exit99
  %193 = fmul float %.01.i101, 0x4007154760000000, !dbg !58
  %194 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %193) #5, !dbg !58
  %195 = fadd float %194, 1.000000e+00, !dbg !58
  %196 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %195) #6, !dbg !58, !srcloc !59
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i103 = icmp eq i32 %197, 0, !dbg !58
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %196, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %196, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i104 = select i1 %.not6.i103, float %199, float %198, !dbg !58
  %200 = fcmp oge float %.01.i101, 0x4022059680000000, !dbg !58
  %s.0.i105 = select i1 %200, float 1.000000e+00, float %.03.i104, !dbg !58
  %201 = bitcast float %s.0.i105 to i32, !dbg !58
  %202 = bitcast float %121 to i32, !dbg !58
  %203 = and i32 %202, -2147483648, !dbg !58
  %204 = or i32 %203, %201, !dbg !58
  %205 = bitcast i32 %204 to float, !dbg !58
  br label %__nv_tanhf.exit118, !dbg !58

__internal_fmad.exit3.i107:                       ; preds = %__nv_tanhf.exit99
  %206 = fmul float %121, %121, !dbg !58
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i108 = icmp eq i32 %207, 0, !dbg !58
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %206, float 0xBFAAC795C0000000) #5, !dbg !58
  %209 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %206, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i109 = select i1 %.not1.i108, float %209, float %208, !dbg !58
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i110 = icmp eq i32 %210, 0, !dbg !58
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i109, float %206, float 0x3FC10B2820000000) #5, !dbg !58
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i109, float %206, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i111 = select i1 %.not2.i110, float %212, float %211, !dbg !58
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i112 = icmp eq i32 %213, 0, !dbg !58
  %214 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i111, float %206, float 0xBFD5553DA0000000) #5, !dbg !58
  %215 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i111, float %206, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i113 = select i1 %.not3.i112, float %215, float %214, !dbg !58
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i114 = icmp eq i32 %216, 0, !dbg !58
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i113, float %206, float 0.000000e+00) #5, !dbg !58
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i113, float %206, float 0.000000e+00) #5, !dbg !58
  %.04.i115 = select i1 %.not4.i114, float %218, float %217, !dbg !58
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i116 = icmp eq i32 %219, 0, !dbg !58
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i115, float %121, float %121) #5, !dbg !58
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i115, float %121, float %121) #5, !dbg !58
  %.02.i117 = select i1 %.not5.i116, float %221, float %220, !dbg !58
  br label %__nv_tanhf.exit118, !dbg !58

__nv_tanhf.exit118:                               ; preds = %__internal_fmad.exit1.i102, %__internal_fmad.exit3.i107
  %s.1.i106 = phi float [ %205, %__internal_fmad.exit1.i102 ], [ %.02.i117, %__internal_fmad.exit3.i107 ], !dbg !58
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i119 = icmp eq i32 %222, 0, !dbg !58
  %223 = tail call float @llvm.nvvm.fabs.ftz.f(float %122) #5, !dbg !58
  %224 = tail call float @llvm.nvvm.fabs.f(float %122) #5, !dbg !58
  %.01.i120 = select i1 %.not.i119, float %224, float %223, !dbg !58
  %225 = fcmp ult float %.01.i120, 0x3FE3333340000000, !dbg !58
  br i1 %225, label %__internal_fmad.exit3.i126, label %__internal_fmad.exit1.i121, !dbg !58

__internal_fmad.exit1.i121:                       ; preds = %__nv_tanhf.exit118
  %226 = fmul float %.01.i120, 0x4007154760000000, !dbg !58
  %227 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %226) #5, !dbg !58
  %228 = fadd float %227, 1.000000e+00, !dbg !58
  %229 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %228) #6, !dbg !58, !srcloc !59
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i122 = icmp eq i32 %230, 0, !dbg !58
  %231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %229, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %232 = tail call float @llvm.nvvm.fma.rn.f(float %229, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i123 = select i1 %.not6.i122, float %232, float %231, !dbg !58
  %233 = fcmp oge float %.01.i120, 0x4022059680000000, !dbg !58
  %s.0.i124 = select i1 %233, float 1.000000e+00, float %.03.i123, !dbg !58
  %234 = bitcast float %s.0.i124 to i32, !dbg !58
  %235 = bitcast float %122 to i32, !dbg !58
  %236 = and i32 %235, -2147483648, !dbg !58
  %237 = or i32 %236, %234, !dbg !58
  %238 = bitcast i32 %237 to float, !dbg !58
  br label %__nv_tanhf.exit137, !dbg !58

__internal_fmad.exit3.i126:                       ; preds = %__nv_tanhf.exit118
  %239 = fmul float %122, %122, !dbg !58
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i127 = icmp eq i32 %240, 0, !dbg !58
  %241 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %239, float 0xBFAAC795C0000000) #5, !dbg !58
  %242 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %239, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i128 = select i1 %.not1.i127, float %242, float %241, !dbg !58
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i129 = icmp eq i32 %243, 0, !dbg !58
  %244 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i128, float %239, float 0x3FC10B2820000000) #5, !dbg !58
  %245 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i128, float %239, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i130 = select i1 %.not2.i129, float %245, float %244, !dbg !58
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i131 = icmp eq i32 %246, 0, !dbg !58
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i130, float %239, float 0xBFD5553DA0000000) #5, !dbg !58
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i130, float %239, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i132 = select i1 %.not3.i131, float %248, float %247, !dbg !58
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i133 = icmp eq i32 %249, 0, !dbg !58
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i132, float %239, float 0.000000e+00) #5, !dbg !58
  %251 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i132, float %239, float 0.000000e+00) #5, !dbg !58
  %.04.i134 = select i1 %.not4.i133, float %251, float %250, !dbg !58
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i135 = icmp eq i32 %252, 0, !dbg !58
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i134, float %122, float %122) #5, !dbg !58
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i134, float %122, float %122) #5, !dbg !58
  %.02.i136 = select i1 %.not5.i135, float %254, float %253, !dbg !58
  br label %__nv_tanhf.exit137, !dbg !58

__nv_tanhf.exit137:                               ; preds = %__internal_fmad.exit1.i121, %__internal_fmad.exit3.i126
  %s.1.i125 = phi float [ %238, %__internal_fmad.exit1.i121 ], [ %.02.i136, %__internal_fmad.exit3.i126 ], !dbg !58
  %255 = insertelement <2 x float> poison, float %s.1.i68, i64 0, !dbg !60
  %256 = insertelement <2 x float> %255, float %s.1.i87, i64 1, !dbg !60
  %257 = fadd <2 x float> %256, splat (float 1.000000e+00), !dbg !60
  %258 = insertelement <2 x float> poison, float %s.1.i106, i64 0, !dbg !60
  %259 = insertelement <2 x float> %258, float %s.1.i125, i64 1, !dbg !60
  %260 = fadd <2 x float> %259, splat (float 1.000000e+00), !dbg !60
  %261 = fmul <2 x float> %98, %260, !dbg !61
  %262 = extractelement <2 x float> %261, i64 0, !dbg !62
  %263 = fcmp olt float %55, %262, !dbg !64
  %264 = extractelement <2 x float> %261, i64 1, !dbg !62
  %265 = fcmp olt float %56, %264, !dbg !64
  %266 = fcmp uno <2 x float> %57, zeroinitializer, !dbg !65
  %267 = fcmp uno float %55, 0.000000e+00, !dbg !65
  %268 = fcmp uno float %56, 0.000000e+00, !dbg !65
  %269 = or i1 %267, %263, !dbg !66
  %270 = or i1 %268, %265, !dbg !66
  %271 = fmul <2 x float> %97, %257, !dbg !61
  %272 = fcmp olt <2 x float> %57, %271, !dbg !64
  %273 = or <2 x i1> %266, %272, !dbg !66
  %274 = select <2 x i1> %273, <2 x float> %57, <2 x float> %271, !dbg !62
  %275 = select i1 %269, float %55, float %262, !dbg !62
  %276 = select i1 %270, float %56, float %264, !dbg !62
  %277 = select <2 x i1> %49, <2 x float> %274, <2 x float> %57, !dbg !36
  %278 = select i1 %14, float %275, float %55, !dbg !36
  %279 = select i1 %14, float %276, float %56, !dbg !36
  %280 = fcmp uno <4 x float> %58, zeroinitializer, !dbg !67
  %281 = shufflevector <2 x float> %261, <2 x float> %271, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !69
  %282 = fcmp ogt <4 x float> %58, %281, !dbg !69
  %283 = or <4 x i1> %280, %282, !dbg !70
  %284 = select <4 x i1> %283, <4 x float> %58, <4 x float> %281, !dbg !71
  %285 = select <4 x i1> %53, <4 x float> %284, <4 x float> %58, !dbg !38
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !72
  %287 = bitcast float %99 to i32, !dbg !73
  %288 = bitcast float %101 to i32, !dbg !73
  %289 = bitcast float %103 to i32, !dbg !73
  %290 = bitcast float %105 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %288, i32 %289, i32 %290, ptr addrspace(1) %286, i1 %14) #5, !dbg !73
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4096, !dbg !35
  %291 = icmp samesign ult i64 %indvars.iv, 8192, !dbg !35
  br i1 %291, label %54, label %292, !dbg !35

292:                                              ; preds = %__nv_tanhf.exit137
  %293 = lshr i32 %15, 5, !dbg !11
  %294 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %277, <2 x i32> <i32 0, i32 2>, !dbg !74
  %295 = fcmp olt <2 x float> %294, %277, !dbg !74
  %296 = fcmp uno <2 x float> %294, %277, !dbg !74
  %shift = shufflevector <2 x i1> %295, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !77
  %297 = or <2 x i1> %shift, %296, !dbg !77
  %298 = extractelement <2 x i1> %297, i64 0, !dbg !77
  %299 = extractelement <2 x float> %277, i64 0, !dbg !78
  %300 = extractelement <2 x float> %277, i64 1, !dbg !78
  %301 = select i1 %298, float %299, float %300, !dbg !78
  %302 = fcmp olt float %301, %278, !dbg !74
  %303 = fcmp uno float %301, 0.000000e+00, !dbg !79
  %304 = or i1 %302, %303, !dbg !77
  %305 = select i1 %304, float %301, float %278, !dbg !78
  %306 = fcmp olt float %305, %279, !dbg !74
  %307 = fcmp uno float %305, 0.000000e+00, !dbg !79
  %308 = or i1 %306, %307, !dbg !77
  %309 = select i1 %308, float %305, float %279, !dbg !78
  %310 = bitcast float %309 to i32, !dbg !80
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 16, i32 31), !dbg !80
  %312 = bitcast i32 %311 to float, !dbg !80
  %313 = fcmp olt float %309, %312, !dbg !74
  %314 = fcmp uno float %309, 0.000000e+00, !dbg !79
  %315 = or i1 %314, %313, !dbg !77
  %316 = select i1 %315, float %309, float %312, !dbg !78
  %317 = bitcast float %316 to i32, !dbg !80
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !80
  %319 = bitcast i32 %318 to float, !dbg !80
  %320 = fcmp olt float %316, %319, !dbg !74
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !79
  %322 = or i1 %320, %321, !dbg !77
  %323 = select i1 %322, float %316, float %319, !dbg !78
  %324 = bitcast float %323 to i32, !dbg !80
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !80
  %326 = bitcast i32 %325 to float, !dbg !80
  %327 = fcmp olt float %323, %326, !dbg !74
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !79
  %329 = or i1 %327, %328, !dbg !77
  %330 = select i1 %329, float %323, float %326, !dbg !78
  %331 = bitcast float %330 to i32, !dbg !80
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !80
  %333 = bitcast i32 %332 to float, !dbg !80
  %334 = fcmp olt float %330, %333, !dbg !74
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !79
  %336 = or i1 %334, %335, !dbg !77
  %337 = select i1 %336, float %330, float %333, !dbg !78
  %338 = bitcast float %337 to i32, !dbg !80
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !80
  %340 = bitcast i32 %339 to float, !dbg !80
  %341 = fcmp olt float %337, %340, !dbg !74
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !79
  %343 = or i1 %341, %342, !dbg !77
  %344 = and i32 %293, 31, !dbg !80
  %345 = icmp eq i32 %16, 0, !dbg !80
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !80
  %347 = select i1 %343, i32 %338, i32 %339, !dbg !78
  %348 = insertelement <1 x i32> poison, i32 %347, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %348, i1 %345) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %349 = icmp slt i32 %15, 32, !dbg !80
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !80
  %351 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %350, i1 %349) #5, !dbg !80
  %352 = bitcast i32 %351 to float, !dbg !80
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 16, i32 31), !dbg !80
  %354 = bitcast i32 %353 to float, !dbg !80
  %355 = fcmp olt float %352, %354, !dbg !74
  %356 = fcmp uno float %352, 0.000000e+00, !dbg !79
  %357 = or i1 %356, %355, !dbg !77
  %358 = select i1 %357, float %352, float %354, !dbg !78
  %359 = bitcast float %358 to i32, !dbg !80
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 8, i32 31), !dbg !80
  %361 = bitcast i32 %360 to float, !dbg !80
  %362 = fcmp olt float %358, %361, !dbg !74
  %363 = fcmp uno float %358, 0.000000e+00, !dbg !79
  %364 = or i1 %362, %363, !dbg !77
  %365 = select i1 %364, float %358, float %361, !dbg !78
  %366 = bitcast float %365 to i32, !dbg !80
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !80
  %368 = bitcast i32 %367 to float, !dbg !80
  %369 = fcmp olt float %365, %368, !dbg !74
  %370 = fcmp uno float %365, 0.000000e+00, !dbg !79
  %371 = or i1 %369, %370, !dbg !77
  %372 = select i1 %371, float %365, float %368, !dbg !78
  %373 = bitcast float %372 to i32, !dbg !80
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 2, i32 31), !dbg !80
  %375 = bitcast i32 %374 to float, !dbg !80
  %376 = fcmp olt float %372, %375, !dbg !74
  %377 = fcmp uno float %372, 0.000000e+00, !dbg !79
  %378 = or i1 %376, %377, !dbg !77
  %379 = select i1 %378, float %372, float %375, !dbg !78
  %380 = bitcast float %379 to i32, !dbg !80
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !80
  %382 = bitcast i32 %381 to float, !dbg !80
  %383 = fcmp olt float %379, %382, !dbg !74
  %384 = fcmp uno float %379, 0.000000e+00, !dbg !79
  %385 = or i1 %383, %384, !dbg !77
  %386 = and i1 %349, %345, !dbg !80
  %387 = select i1 %385, i32 %380, i32 %381, !dbg !78
  %388 = insertelement <1 x i32> poison, i32 %387, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %388, i1 %386) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %389 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %390 = extractelement <4 x float> %285, i64 2, !dbg !83
  %391 = extractelement <4 x float> %285, i64 3, !dbg !83
  %392 = fcmp ogt float %391, %390, !dbg !83
  %393 = fcmp uno float %391, 0.000000e+00, !dbg !84
  %394 = or i1 %392, %393, !dbg !85
  %395 = select i1 %394, float %391, float %390, !dbg !86
  %396 = extractelement <4 x float> %285, i64 1, !dbg !83
  %397 = fcmp ogt float %395, %396, !dbg !83
  %398 = fcmp uno float %395, 0.000000e+00, !dbg !84
  %399 = or i1 %397, %398, !dbg !85
  %400 = select i1 %399, float %395, float %396, !dbg !86
  %401 = extractelement <4 x float> %285, i64 0, !dbg !83
  %402 = fcmp ogt float %400, %401, !dbg !83
  %403 = fcmp uno float %400, 0.000000e+00, !dbg !84
  %404 = or i1 %402, %403, !dbg !85
  %405 = select i1 %404, float %400, float %401, !dbg !86
  %406 = bitcast float %405 to i32, !dbg !81
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 16, i32 31), !dbg !81
  %408 = bitcast i32 %407 to float, !dbg !81
  %409 = fcmp ogt float %405, %408, !dbg !83
  %410 = fcmp uno float %405, 0.000000e+00, !dbg !84
  %411 = or i1 %410, %409, !dbg !85
  %412 = select i1 %411, float %405, float %408, !dbg !86
  %413 = bitcast float %412 to i32, !dbg !81
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 8, i32 31), !dbg !81
  %415 = bitcast i32 %414 to float, !dbg !81
  %416 = fcmp ogt float %412, %415, !dbg !83
  %417 = fcmp uno float %412, 0.000000e+00, !dbg !84
  %418 = or i1 %416, %417, !dbg !85
  %419 = select i1 %418, float %412, float %415, !dbg !86
  %420 = bitcast float %419 to i32, !dbg !81
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 4, i32 31), !dbg !81
  %422 = bitcast i32 %421 to float, !dbg !81
  %423 = fcmp ogt float %419, %422, !dbg !83
  %424 = fcmp uno float %419, 0.000000e+00, !dbg !84
  %425 = or i1 %423, %424, !dbg !85
  %426 = select i1 %425, float %419, float %422, !dbg !86
  %427 = bitcast float %426 to i32, !dbg !81
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 2, i32 31), !dbg !81
  %429 = bitcast i32 %428 to float, !dbg !81
  %430 = fcmp ogt float %426, %429, !dbg !83
  %431 = fcmp uno float %426, 0.000000e+00, !dbg !84
  %432 = or i1 %430, %431, !dbg !85
  %433 = select i1 %432, float %426, float %429, !dbg !86
  %434 = bitcast float %433 to i32, !dbg !81
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !81
  %436 = bitcast i32 %435 to float, !dbg !81
  %437 = fcmp ogt float %433, %436, !dbg !83
  %438 = fcmp uno float %433, 0.000000e+00, !dbg !84
  %439 = or i1 %437, %438, !dbg !85
  %440 = select i1 %439, i32 %434, i32 %435, !dbg !86
  %441 = insertelement <1 x i32> poison, i32 %440, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %441, i1 %345) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %350, i1 %349) #5, !dbg !81
  %443 = bitcast i32 %442 to float, !dbg !81
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 16, i32 31), !dbg !81
  %445 = bitcast i32 %444 to float, !dbg !81
  %446 = fcmp ogt float %443, %445, !dbg !83
  %447 = fcmp uno float %443, 0.000000e+00, !dbg !84
  %448 = or i1 %447, %446, !dbg !85
  %449 = select i1 %448, float %443, float %445, !dbg !86
  %450 = bitcast float %449 to i32, !dbg !81
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 8, i32 31), !dbg !81
  %452 = bitcast i32 %451 to float, !dbg !81
  %453 = fcmp ogt float %449, %452, !dbg !83
  %454 = fcmp uno float %449, 0.000000e+00, !dbg !84
  %455 = or i1 %453, %454, !dbg !85
  %456 = select i1 %455, float %449, float %452, !dbg !86
  %457 = bitcast float %456 to i32, !dbg !81
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 4, i32 31), !dbg !81
  %459 = bitcast i32 %458 to float, !dbg !81
  %460 = fcmp ogt float %456, %459, !dbg !83
  %461 = fcmp uno float %456, 0.000000e+00, !dbg !84
  %462 = or i1 %460, %461, !dbg !85
  %463 = select i1 %462, float %456, float %459, !dbg !86
  %464 = bitcast float %463 to i32, !dbg !81
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !81
  %466 = bitcast i32 %465 to float, !dbg !81
  %467 = fcmp ogt float %463, %466, !dbg !83
  %468 = fcmp uno float %463, 0.000000e+00, !dbg !84
  %469 = or i1 %467, %468, !dbg !85
  %470 = select i1 %469, float %463, float %466, !dbg !86
  %471 = bitcast float %470 to i32, !dbg !81
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 1, i32 31), !dbg !81
  %473 = bitcast i32 %472 to float, !dbg !81
  %474 = fcmp ogt float %470, %473, !dbg !83
  %475 = fcmp uno float %470, 0.000000e+00, !dbg !84
  %476 = or i1 %474, %475, !dbg !85
  %477 = select i1 %476, i32 %471, i32 %472, !dbg !86
  %478 = insertelement <1 x i32> poison, i32 %477, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %478, i1 %386) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %479 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %480 = getelementptr bfloat, ptr addrspace(1) %6, i64 %19, !dbg !87
  %481 = fptrunc float %389 to bfloat, !dbg !88
  %482 = and i32 %15, 1023, !dbg !88
  %483 = icmp eq i32 %482, 0, !dbg !88
  %484 = bitcast bfloat %481 to i16, !dbg !88
  %485 = and i1 %14, %483, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %484, ptr addrspace(1) %480, i1 %485) #5, !dbg !88
  %486 = getelementptr bfloat, ptr addrspace(1) %7, i64 %19, !dbg !89
  %487 = fptrunc float %479 to bfloat, !dbg !90
  %488 = bitcast bfloat %487 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %488, ptr addrspace(1) %486, i1 %485) #5, !dbg !90
  %.inv3 = fcmp oge float %389, 0.000000e+00, !dbg !91
  %489 = select i1 %.inv3, float 0.000000e+00, float %389, !dbg !91
  %490 = fsub float 0.000000e+00, %489, !dbg !93
  %.inv4 = fcmp ole float %479, 0.000000e+00, !dbg !94
  %491 = select i1 %.inv4, float 0.000000e+00, float %479, !dbg !94
  %492 = fcmp ogt float %490, %491, !dbg !96
  %493 = fcmp uno float %490, 0.000000e+00, !dbg !98
  %494 = or i1 %493, %492, !dbg !99
  %495 = select i1 %494, float %490, float %491, !dbg !100
  %496 = fmul float %495, 0x3F80204080000000, !dbg !101
  %497 = fcmp ogt float %496, 0x3EE4F8B580000000, !dbg !102
  %498 = fcmp uno float %496, 0.000000e+00, !dbg !104
  %499 = or i1 %497, %498, !dbg !105
  %500 = select i1 %499, float %496, float 0x3EE4F8B580000000, !dbg !106
  %501 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %500), !dbg !107
  %502 = or disjoint i32 %18, %32
  br label %503, !dbg !108

503:                                              ; preds = %292, %__nv_tanhf.exit61
  %indvars.iv146 = phi i64 [ 0, %292 ], [ %indvars.iv.next147, %__nv_tanhf.exit61 ]
  %504 = trunc nuw nsw i64 %indvars.iv146 to i32, !dbg !109
  %505 = add i32 %502, %504, !dbg !109
  %506 = sext i32 %505 to i64, !dbg !110
  %507 = getelementptr float, ptr addrspace(1) %5, i64 %506, !dbg !110
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %507, i1 %14) #5, !dbg !111
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !111
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !111
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !111
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !111
  %513 = bitcast i32 %509 to float, !dbg !111
  %514 = bitcast i32 %510 to float, !dbg !111
  %515 = bitcast i32 %511 to float, !dbg !111
  %516 = bitcast i32 %512 to float, !dbg !111
  %517 = fmul float %513, 5.000000e-01, !dbg !112
  %518 = fmul float %514, 5.000000e-01, !dbg !112
  %519 = fmul float %515, 5.000000e-01, !dbg !112
  %520 = fmul float %516, 5.000000e-01, !dbg !112
  %521 = fmul float %513, %513, !dbg !113
  %522 = fmul float %514, %514, !dbg !113
  %523 = fmul float %515, %515, !dbg !113
  %524 = fmul float %516, %516, !dbg !113
  %525 = fmul float %521, %513, !dbg !114
  %526 = fmul float %522, %514, !dbg !114
  %527 = fmul float %523, %515, !dbg !114
  %528 = fmul float %524, %516, !dbg !114
  %529 = fmul float %525, 0x3FA6E4E260000000, !dbg !115
  %530 = fmul float %526, 0x3FA6E4E260000000, !dbg !115
  %531 = fmul float %527, 0x3FA6E4E260000000, !dbg !115
  %532 = fmul float %528, 0x3FA6E4E260000000, !dbg !115
  %533 = fadd float %529, %513, !dbg !116
  %534 = fadd float %530, %514, !dbg !116
  %535 = fadd float %531, %515, !dbg !116
  %536 = fadd float %532, %516, !dbg !116
  %537 = fmul float %533, 0x3FE9884540000000, !dbg !117
  %538 = fmul float %534, 0x3FE9884540000000, !dbg !117
  %539 = fmul float %535, 0x3FE9884540000000, !dbg !117
  %540 = fmul float %536, 0x3FE9884540000000, !dbg !117
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i = icmp eq i32 %541, 0, !dbg !118
  %542 = tail call float @llvm.nvvm.fabs.ftz.f(float %537) #5, !dbg !118
  %543 = tail call float @llvm.nvvm.fabs.f(float %537) #5, !dbg !118
  %.01.i = select i1 %.not.i, float %543, float %542, !dbg !118
  %544 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !118
  br i1 %544, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !118

__internal_fmad.exit1.i:                          ; preds = %503
  %545 = fmul float %.01.i, 0x4007154760000000, !dbg !118
  %546 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %545) #5, !dbg !118
  %547 = fadd float %546, 1.000000e+00, !dbg !118
  %548 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %547) #6, !dbg !118, !srcloc !59
  %549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i = icmp eq i32 %549, 0, !dbg !118
  %550 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %548, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %551 = tail call float @llvm.nvvm.fma.rn.f(float %548, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i = select i1 %.not6.i, float %551, float %550, !dbg !118
  %552 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !118
  %s.0.i = select i1 %552, float 1.000000e+00, float %.03.i, !dbg !118
  %553 = bitcast float %s.0.i to i32, !dbg !118
  %554 = bitcast float %537 to i32, !dbg !118
  %555 = and i32 %554, -2147483648, !dbg !118
  %556 = or i32 %555, %553, !dbg !118
  %557 = bitcast i32 %556 to float, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__internal_fmad.exit3.i:                          ; preds = %503
  %558 = fmul float %537, %537, !dbg !118
  %559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i = icmp eq i32 %559, 0, !dbg !118
  %560 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %558, float 0xBFAAC795C0000000) #5, !dbg !118
  %561 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %558, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i = select i1 %.not1.i, float %561, float %560, !dbg !118
  %562 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i = icmp eq i32 %562, 0, !dbg !118
  %563 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %558, float 0x3FC10B2820000000) #5, !dbg !118
  %564 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %558, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i = select i1 %.not2.i, float %564, float %563, !dbg !118
  %565 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i = icmp eq i32 %565, 0, !dbg !118
  %566 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %558, float 0xBFD5553DA0000000) #5, !dbg !118
  %567 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %558, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i = select i1 %.not3.i, float %567, float %566, !dbg !118
  %568 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i = icmp eq i32 %568, 0, !dbg !118
  %569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %558, float 0.000000e+00) #5, !dbg !118
  %570 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %558, float 0.000000e+00) #5, !dbg !118
  %.04.i = select i1 %.not4.i, float %570, float %569, !dbg !118
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i = icmp eq i32 %571, 0, !dbg !118
  %572 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %537, float %537) #5, !dbg !118
  %573 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %537, float %537) #5, !dbg !118
  %.02.i = select i1 %.not5.i, float %573, float %572, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %557, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !118
  %574 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i5 = icmp eq i32 %574, 0, !dbg !118
  %575 = tail call float @llvm.nvvm.fabs.ftz.f(float %538) #5, !dbg !118
  %576 = tail call float @llvm.nvvm.fabs.f(float %538) #5, !dbg !118
  %.01.i6 = select i1 %.not.i5, float %576, float %575, !dbg !118
  %577 = fcmp ult float %.01.i6, 0x3FE3333340000000, !dbg !118
  br i1 %577, label %__internal_fmad.exit3.i12, label %__internal_fmad.exit1.i7, !dbg !118

__internal_fmad.exit1.i7:                         ; preds = %__nv_tanhf.exit
  %578 = fmul float %.01.i6, 0x4007154760000000, !dbg !118
  %579 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %578) #5, !dbg !118
  %580 = fadd float %579, 1.000000e+00, !dbg !118
  %581 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %580) #6, !dbg !118, !srcloc !59
  %582 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i8 = icmp eq i32 %582, 0, !dbg !118
  %583 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %581, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %584 = tail call float @llvm.nvvm.fma.rn.f(float %581, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i9 = select i1 %.not6.i8, float %584, float %583, !dbg !118
  %585 = fcmp oge float %.01.i6, 0x4022059680000000, !dbg !118
  %s.0.i10 = select i1 %585, float 1.000000e+00, float %.03.i9, !dbg !118
  %586 = bitcast float %s.0.i10 to i32, !dbg !118
  %587 = bitcast float %538 to i32, !dbg !118
  %588 = and i32 %587, -2147483648, !dbg !118
  %589 = or i32 %588, %586, !dbg !118
  %590 = bitcast i32 %589 to float, !dbg !118
  br label %__nv_tanhf.exit23, !dbg !118

__internal_fmad.exit3.i12:                        ; preds = %__nv_tanhf.exit
  %591 = fmul float %538, %538, !dbg !118
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i13 = icmp eq i32 %592, 0, !dbg !118
  %593 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %591, float 0xBFAAC795C0000000) #5, !dbg !118
  %594 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %591, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i14 = select i1 %.not1.i13, float %594, float %593, !dbg !118
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i15 = icmp eq i32 %595, 0, !dbg !118
  %596 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i14, float %591, float 0x3FC10B2820000000) #5, !dbg !118
  %597 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i14, float %591, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i16 = select i1 %.not2.i15, float %597, float %596, !dbg !118
  %598 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i17 = icmp eq i32 %598, 0, !dbg !118
  %599 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %591, float 0xBFD5553DA0000000) #5, !dbg !118
  %600 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %591, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i18 = select i1 %.not3.i17, float %600, float %599, !dbg !118
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i19 = icmp eq i32 %601, 0, !dbg !118
  %602 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %591, float 0.000000e+00) #5, !dbg !118
  %603 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %591, float 0.000000e+00) #5, !dbg !118
  %.04.i20 = select i1 %.not4.i19, float %603, float %602, !dbg !118
  %604 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i21 = icmp eq i32 %604, 0, !dbg !118
  %605 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i20, float %538, float %538) #5, !dbg !118
  %606 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i20, float %538, float %538) #5, !dbg !118
  %.02.i22 = select i1 %.not5.i21, float %606, float %605, !dbg !118
  br label %__nv_tanhf.exit23, !dbg !118

__nv_tanhf.exit23:                                ; preds = %__internal_fmad.exit1.i7, %__internal_fmad.exit3.i12
  %s.1.i11 = phi float [ %590, %__internal_fmad.exit1.i7 ], [ %.02.i22, %__internal_fmad.exit3.i12 ], !dbg !118
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i24 = icmp eq i32 %607, 0, !dbg !118
  %608 = tail call float @llvm.nvvm.fabs.ftz.f(float %539) #5, !dbg !118
  %609 = tail call float @llvm.nvvm.fabs.f(float %539) #5, !dbg !118
  %.01.i25 = select i1 %.not.i24, float %609, float %608, !dbg !118
  %610 = fcmp ult float %.01.i25, 0x3FE3333340000000, !dbg !118
  br i1 %610, label %__internal_fmad.exit3.i31, label %__internal_fmad.exit1.i26, !dbg !118

__internal_fmad.exit1.i26:                        ; preds = %__nv_tanhf.exit23
  %611 = fmul float %.01.i25, 0x4007154760000000, !dbg !118
  %612 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %611) #5, !dbg !118
  %613 = fadd float %612, 1.000000e+00, !dbg !118
  %614 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %613) #6, !dbg !118, !srcloc !59
  %615 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i27 = icmp eq i32 %615, 0, !dbg !118
  %616 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %614, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %617 = tail call float @llvm.nvvm.fma.rn.f(float %614, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i28 = select i1 %.not6.i27, float %617, float %616, !dbg !118
  %618 = fcmp oge float %.01.i25, 0x4022059680000000, !dbg !118
  %s.0.i29 = select i1 %618, float 1.000000e+00, float %.03.i28, !dbg !118
  %619 = bitcast float %s.0.i29 to i32, !dbg !118
  %620 = bitcast float %539 to i32, !dbg !118
  %621 = and i32 %620, -2147483648, !dbg !118
  %622 = or i32 %621, %619, !dbg !118
  %623 = bitcast i32 %622 to float, !dbg !118
  br label %__nv_tanhf.exit42, !dbg !118

__internal_fmad.exit3.i31:                        ; preds = %__nv_tanhf.exit23
  %624 = fmul float %539, %539, !dbg !118
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i32 = icmp eq i32 %625, 0, !dbg !118
  %626 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %624, float 0xBFAAC795C0000000) #5, !dbg !118
  %627 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %624, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i33 = select i1 %.not1.i32, float %627, float %626, !dbg !118
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i34 = icmp eq i32 %628, 0, !dbg !118
  %629 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i33, float %624, float 0x3FC10B2820000000) #5, !dbg !118
  %630 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i33, float %624, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i35 = select i1 %.not2.i34, float %630, float %629, !dbg !118
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i36 = icmp eq i32 %631, 0, !dbg !118
  %632 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %624, float 0xBFD5553DA0000000) #5, !dbg !118
  %633 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %624, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i37 = select i1 %.not3.i36, float %633, float %632, !dbg !118
  %634 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i38 = icmp eq i32 %634, 0, !dbg !118
  %635 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i37, float %624, float 0.000000e+00) #5, !dbg !118
  %636 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i37, float %624, float 0.000000e+00) #5, !dbg !118
  %.04.i39 = select i1 %.not4.i38, float %636, float %635, !dbg !118
  %637 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i40 = icmp eq i32 %637, 0, !dbg !118
  %638 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i39, float %539, float %539) #5, !dbg !118
  %639 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i39, float %539, float %539) #5, !dbg !118
  %.02.i41 = select i1 %.not5.i40, float %639, float %638, !dbg !118
  br label %__nv_tanhf.exit42, !dbg !118

__nv_tanhf.exit42:                                ; preds = %__internal_fmad.exit1.i26, %__internal_fmad.exit3.i31
  %s.1.i30 = phi float [ %623, %__internal_fmad.exit1.i26 ], [ %.02.i41, %__internal_fmad.exit3.i31 ], !dbg !118
  %640 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i43 = icmp eq i32 %640, 0, !dbg !118
  %641 = tail call float @llvm.nvvm.fabs.ftz.f(float %540) #5, !dbg !118
  %642 = tail call float @llvm.nvvm.fabs.f(float %540) #5, !dbg !118
  %.01.i44 = select i1 %.not.i43, float %642, float %641, !dbg !118
  %643 = fcmp ult float %.01.i44, 0x3FE3333340000000, !dbg !118
  br i1 %643, label %__internal_fmad.exit3.i50, label %__internal_fmad.exit1.i45, !dbg !118

__internal_fmad.exit1.i45:                        ; preds = %__nv_tanhf.exit42
  %644 = fmul float %.01.i44, 0x4007154760000000, !dbg !118
  %645 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %644) #5, !dbg !118
  %646 = fadd float %645, 1.000000e+00, !dbg !118
  %647 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %646) #6, !dbg !118, !srcloc !59
  %648 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i46 = icmp eq i32 %648, 0, !dbg !118
  %649 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %647, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %650 = tail call float @llvm.nvvm.fma.rn.f(float %647, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i47 = select i1 %.not6.i46, float %650, float %649, !dbg !118
  %651 = fcmp oge float %.01.i44, 0x4022059680000000, !dbg !118
  %s.0.i48 = select i1 %651, float 1.000000e+00, float %.03.i47, !dbg !118
  %652 = bitcast float %s.0.i48 to i32, !dbg !118
  %653 = bitcast float %540 to i32, !dbg !118
  %654 = and i32 %653, -2147483648, !dbg !118
  %655 = or i32 %654, %652, !dbg !118
  %656 = bitcast i32 %655 to float, !dbg !118
  br label %__nv_tanhf.exit61, !dbg !118

__internal_fmad.exit3.i50:                        ; preds = %__nv_tanhf.exit42
  %657 = fmul float %540, %540, !dbg !118
  %658 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i51 = icmp eq i32 %658, 0, !dbg !118
  %659 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %657, float 0xBFAAC795C0000000) #5, !dbg !118
  %660 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %657, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i52 = select i1 %.not1.i51, float %660, float %659, !dbg !118
  %661 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i53 = icmp eq i32 %661, 0, !dbg !118
  %662 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i52, float %657, float 0x3FC10B2820000000) #5, !dbg !118
  %663 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i52, float %657, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i54 = select i1 %.not2.i53, float %663, float %662, !dbg !118
  %664 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i55 = icmp eq i32 %664, 0, !dbg !118
  %665 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i54, float %657, float 0xBFD5553DA0000000) #5, !dbg !118
  %666 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i54, float %657, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i56 = select i1 %.not3.i55, float %666, float %665, !dbg !118
  %667 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i57 = icmp eq i32 %667, 0, !dbg !118
  %668 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i56, float %657, float 0.000000e+00) #5, !dbg !118
  %669 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i56, float %657, float 0.000000e+00) #5, !dbg !118
  %.04.i58 = select i1 %.not4.i57, float %669, float %668, !dbg !118
  %670 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i59 = icmp eq i32 %670, 0, !dbg !118
  %671 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i58, float %540, float %540) #5, !dbg !118
  %672 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i58, float %540, float %540) #5, !dbg !118
  %.02.i60 = select i1 %.not5.i59, float %672, float %671, !dbg !118
  br label %__nv_tanhf.exit61, !dbg !118

__nv_tanhf.exit61:                                ; preds = %__internal_fmad.exit1.i45, %__internal_fmad.exit3.i50
  %s.1.i49 = phi float [ %656, %__internal_fmad.exit1.i45 ], [ %.02.i60, %__internal_fmad.exit3.i50 ], !dbg !118
  %673 = fadd float %s.1.i, 1.000000e+00, !dbg !119
  %674 = fadd float %s.1.i11, 1.000000e+00, !dbg !119
  %675 = fadd float %s.1.i30, 1.000000e+00, !dbg !119
  %676 = fadd float %s.1.i49, 1.000000e+00, !dbg !119
  %677 = fmul float %517, %673, !dbg !120
  %678 = fmul float %518, %674, !dbg !120
  %679 = fmul float %519, %675, !dbg !120
  %680 = fmul float %520, %676, !dbg !120
  %681 = fmul float %501, %677, !dbg !121
  %682 = fmul float %501, %678, !dbg !121
  %683 = fmul float %501, %679, !dbg !121
  %684 = fmul float %501, %680, !dbg !121
  %685 = tail call float @llvm.nvvm.round.f(float %681) #5, !dbg !122
  %686 = tail call float @llvm.nvvm.round.f(float %682) #5, !dbg !122
  %687 = tail call float @llvm.nvvm.round.f(float %683) #5, !dbg !122
  %688 = tail call float @llvm.nvvm.round.f(float %684) #5, !dbg !122
  %689 = insertelement <4 x float> poison, float %685, i64 0, !dbg !123
  %690 = insertelement <4 x float> %689, float %686, i64 1, !dbg !123
  %691 = insertelement <4 x float> %690, float %687, i64 2, !dbg !123
  %692 = insertelement <4 x float> %691, float %688, i64 3, !dbg !123
  %693 = fcmp ogt <4 x float> %692, splat (float -1.270000e+02), !dbg !123
  %694 = fcmp uno <4 x float> %692, zeroinitializer, !dbg !125
  %695 = or <4 x i1> %693, %694, !dbg !126
  %696 = select <4 x i1> %695, <4 x float> %692, <4 x float> splat (float -1.270000e+02), !dbg !127
  %697 = fcmp olt <4 x float> %696, splat (float 1.270000e+02), !dbg !128
  %698 = fcmp uno <4 x float> %696, zeroinitializer, !dbg !130
  %699 = or <4 x i1> %697, %698, !dbg !131
  %700 = fptosi <4 x float> %696 to <4 x i8>, !dbg !132
  %701 = select <4 x i1> %699, <4 x i8> %700, <4 x i8> splat (i8 127), !dbg !133
  %702 = getelementptr i8, ptr addrspace(1) %8, i64 %506, !dbg !134
  %703 = bitcast <4 x i8> %701 to i32, !dbg !135
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %703, ptr addrspace(1) %702, i1 %14) #5, !dbg !135
  %indvars.iv.next147 = add nuw nsw i64 %indvars.iv146, 4096, !dbg !108
  %704 = icmp samesign ult i64 %indvars.iv146, 8192, !dbg !108
  br i1 %704, label %503, label %705, !dbg !108

705:                                              ; preds = %__nv_tanhf.exit61
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 30, scope: !6)
!15 = !DILocation(line: 30, column: 35, scope: !6)
!16 = !DILocation(line: 39, column: 47, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 44, column: 44, scope: !6)
!21 = !DILocation(line: 45, column: 16, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 46, column: 44, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 47, column: 44, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 52, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 33, column: 40, scope: !6)
!36 = !DILocation(line: 74, column: 50, scope: !6)
!37 = !DILocation(line: 54, column: 23, scope: !6)
!38 = !DILocation(line: 76, column: 50, scope: !6)
!39 = !DILocation(line: 34, column: 31, scope: !6)
!40 = !DILocation(line: 39, column: 41, scope: !6)
!41 = !DILocation(line: 39, column: 34, scope: !6)
!42 = !DILocation(line: 39, column: 52, scope: !6)
!43 = !DILocation(line: 40, column: 35, scope: !6)
!44 = !DILocation(line: 40, column: 42, scope: !6)
!45 = !DILocation(line: 41, column: 35, scope: !6)
!46 = !DILocation(line: 41, column: 42, scope: !6)
!47 = !DILocation(line: 40, column: 95, scope: !6)
!48 = !DILocation(line: 41, column: 95, scope: !6)
!49 = !DILocation(line: 42, column: 23, scope: !6)
!50 = !DILocation(line: 55, column: 24, scope: !6)
!51 = !DILocation(line: 56, column: 24, scope: !6)
!52 = !DILocation(line: 59, column: 24, scope: !6)
!53 = !DILocation(line: 64, column: 24, scope: !6)
!54 = !DILocation(line: 60, column: 24, scope: !6)
!55 = !DILocation(line: 61, column: 24, scope: !6)
!56 = !DILocation(line: 63, column: 24, scope: !6)
!57 = !DILocation(line: 66, column: 24, scope: !6)
!58 = !DILocation(line: 67, column: 31, scope: !6)
!59 = !{i32 21046}
!60 = !DILocation(line: 69, column: 24, scope: !6)
!61 = !DILocation(line: 70, column: 24, scope: !6)
!62 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !63)
!63 = !DILocation(line: 73, column: 47, scope: !6)
!64 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !63)
!65 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !63)
!66 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !63)
!67 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !68)
!68 = !DILocation(line: 75, column: 47, scope: !6)
!69 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !68)
!70 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !68)
!71 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !68)
!72 = !DILocation(line: 77, column: 29, scope: !6)
!73 = !DILocation(line: 77, column: 54, scope: !6)
!74 = !DILocation(line: 94, column: 15, scope: !75, inlinedAt: !76)
!75 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!76 = !DILocation(line: 78, column: 40, scope: !6)
!77 = !DILocation(line: 96, column: 16, scope: !75, inlinedAt: !76)
!78 = !DILocation(line: 97, column: 29, scope: !75, inlinedAt: !76)
!79 = !DILocation(line: 96, column: 21, scope: !75, inlinedAt: !76)
!80 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !76)
!81 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !82)
!82 = !DILocation(line: 79, column: 40, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 21, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 104, column: 16, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 105, column: 29, scope: !75, inlinedAt: !82)
!87 = !DILocation(line: 80, column: 25, scope: !6)
!88 = !DILocation(line: 80, column: 37, scope: !6)
!89 = !DILocation(line: 81, column: 25, scope: !6)
!90 = !DILocation(line: 81, column: 37, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !92)
!92 = !DILocation(line: 104, column: 46, scope: !6)
!93 = !DILocation(line: 105, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !95)
!95 = !DILocation(line: 106, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !97)
!97 = !DILocation(line: 107, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !97)
!101 = !DILocation(line: 109, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !103)
!103 = !DILocation(line: 112, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !103)
!107 = !DILocation(line: 115, column: 25, scope: !6)
!108 = !DILocation(line: 82, column: 40, scope: !6)
!109 = !DILocation(line: 88, column: 43, scope: !6)
!110 = !DILocation(line: 88, column: 36, scope: !6)
!111 = !DILocation(line: 88, column: 54, scope: !6)
!112 = !DILocation(line: 90, column: 24, scope: !6)
!113 = !DILocation(line: 91, column: 24, scope: !6)
!114 = !DILocation(line: 92, column: 24, scope: !6)
!115 = !DILocation(line: 94, column: 24, scope: !6)
!116 = !DILocation(line: 95, column: 24, scope: !6)
!117 = !DILocation(line: 97, column: 24, scope: !6)
!118 = !DILocation(line: 98, column: 31, scope: !6)
!119 = !DILocation(line: 100, column: 24, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 117, column: 24, scope: !6)
!122 = !DILocation(line: 118, column: 36, scope: !6)
!123 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !124)
!124 = !DILocation(line: 121, column: 46, scope: !6)
!125 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !124)
!126 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !124)
!127 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !124)
!128 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !129)
!129 = !DILocation(line: 123, column: 46, scope: !6)
!130 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !129)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !129)
!132 = !DILocation(line: 125, column: 25, scope: !6)
!133 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !129)
!134 = !DILocation(line: 126, column: 29, scope: !6)
!135 = !DILocation(line: 126, column: 54, scope: !6)
!136 = !DILocation(line: 82, column: 4, scope: !6)
