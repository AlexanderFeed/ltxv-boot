; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
._crit_edge:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = shl i32 %21, 3, !dbg !11
  %24 = and i32 %23, 2040, !dbg !11
  %25 = mul i32 %19, 3072, !dbg !12
  %26 = zext nneg i32 %24 to i64, !dbg !13
  %27 = add i32 %25, %24, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %20) #5, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !16
  %39 = extractelement <2 x bfloat> %32, i64 0, !dbg !16
  %40 = extractelement <2 x bfloat> %32, i64 1, !dbg !16
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !16
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !16
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !16
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !16
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !16
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !16
  %47 = fpext bfloat %39 to float, !dbg !17
  %48 = fpext bfloat %40 to float, !dbg !17
  %49 = fpext bfloat %41 to float, !dbg !17
  %50 = fpext bfloat %42 to float, !dbg !17
  %51 = fpext bfloat %43 to float, !dbg !17
  %52 = fpext bfloat %44 to float, !dbg !17
  %53 = fpext bfloat %45 to float, !dbg !17
  %54 = fpext bfloat %46 to float, !dbg !17
  %55 = select i1 %20, float %47, float 0.000000e+00, !dbg !18
  %56 = select i1 %20, float %48, float 0.000000e+00, !dbg !18
  %57 = select i1 %20, float %49, float 0.000000e+00, !dbg !18
  %58 = select i1 %20, float %50, float 0.000000e+00, !dbg !18
  %59 = select i1 %20, float %51, float 0.000000e+00, !dbg !18
  %60 = select i1 %20, float %52, float 0.000000e+00, !dbg !18
  %61 = select i1 %20, float %53, float 0.000000e+00, !dbg !18
  %62 = select i1 %20, float %54, float 0.000000e+00, !dbg !18
  %63 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %64 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %65 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %66 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %67 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %68 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %69 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %70 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %71 = or disjoint i64 %26, 2048, !dbg !20
  %72 = icmp samesign ult i64 %71, 3072, !dbg !21
  %73 = trunc nuw nsw i64 %71 to i32, !dbg !14
  %74 = add i32 %25, %73, !dbg !14
  %75 = sext i32 %74 to i64, !dbg !15
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !15
  %77 = and i1 %20, %72, !dbg !22
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %76, i1 %77) #5, !dbg !16
  %79 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !16
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !16
  %81 = extractelement <2 x bfloat> %80, i64 1, !dbg !16
  %82 = fpext bfloat %81 to float, !dbg !17
  %83 = extractelement <2 x bfloat> %80, i64 0, !dbg !16
  %84 = fpext bfloat %83 to float, !dbg !17
  %85 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !16
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !16
  %87 = extractelement <2 x bfloat> %86, i64 1, !dbg !16
  %88 = fpext bfloat %87 to float, !dbg !17
  %89 = extractelement <2 x bfloat> %86, i64 0, !dbg !16
  %90 = fpext bfloat %89 to float, !dbg !17
  %91 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !16
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !16
  %93 = extractelement <2 x bfloat> %92, i64 1, !dbg !16
  %94 = fpext bfloat %93 to float, !dbg !17
  %95 = extractelement <2 x bfloat> %92, i64 0, !dbg !16
  %96 = fpext bfloat %95 to float, !dbg !17
  %97 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !16
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !16
  %99 = extractelement <2 x bfloat> %98, i64 1, !dbg !16
  %100 = fpext bfloat %99 to float, !dbg !17
  %101 = extractelement <2 x bfloat> %98, i64 0, !dbg !16
  %102 = fpext bfloat %101 to float, !dbg !17
  %103 = fsub float %102, %55, !dbg !23
  %104 = fsub float %100, %56, !dbg !23
  %105 = fsub float %96, %57, !dbg !23
  %106 = fsub float %94, %58, !dbg !23
  %107 = fsub float %90, %59, !dbg !23
  %108 = fsub float %88, %60, !dbg !23
  %109 = fsub float %84, %61, !dbg !23
  %110 = fsub float %82, %62, !dbg !23
  %111 = fadd float %63, 1.000000e+00, !dbg !27
  %112 = fadd float %64, 1.000000e+00, !dbg !27
  %113 = fadd float %65, 1.000000e+00, !dbg !27
  %114 = fadd float %66, 1.000000e+00, !dbg !27
  %115 = fadd float %67, 1.000000e+00, !dbg !27
  %116 = fadd float %68, 1.000000e+00, !dbg !27
  %117 = fadd float %69, 1.000000e+00, !dbg !27
  %118 = fadd float %70, 1.000000e+00, !dbg !27
  %119 = tail call float @llvm.nvvm.div.full(float %103, float %111), !dbg !28
  %120 = tail call float @llvm.nvvm.div.full(float %104, float %112), !dbg !28
  %121 = tail call float @llvm.nvvm.div.full(float %105, float %113), !dbg !28
  %122 = tail call float @llvm.nvvm.div.full(float %106, float %114), !dbg !28
  %123 = tail call float @llvm.nvvm.div.full(float %107, float %115), !dbg !28
  %124 = tail call float @llvm.nvvm.div.full(float %108, float %116), !dbg !28
  %125 = tail call float @llvm.nvvm.div.full(float %109, float %117), !dbg !28
  %126 = tail call float @llvm.nvvm.div.full(float %110, float %118), !dbg !28
  %127 = fadd float %55, %119, !dbg !29
  %128 = fadd float %56, %120, !dbg !29
  %129 = fadd float %57, %121, !dbg !29
  %130 = fadd float %58, %122, !dbg !29
  %131 = fadd float %59, %123, !dbg !29
  %132 = fadd float %60, %124, !dbg !29
  %133 = fadd float %61, %125, !dbg !29
  %134 = fadd float %62, %126, !dbg !29
  %135 = fsub float %102, %127, !dbg !30
  %136 = fsub float %100, %128, !dbg !30
  %137 = fsub float %96, %129, !dbg !30
  %138 = fsub float %94, %130, !dbg !30
  %139 = fsub float %90, %131, !dbg !30
  %140 = fsub float %88, %132, !dbg !30
  %141 = fsub float %84, %133, !dbg !30
  %142 = fsub float %82, %134, !dbg !30
  %143 = fmul float %103, %135, !dbg !31
  %144 = fmul float %104, %136, !dbg !31
  %145 = fmul float %105, %137, !dbg !31
  %146 = fmul float %106, %138, !dbg !31
  %147 = fmul float %107, %139, !dbg !31
  %148 = fmul float %108, %140, !dbg !31
  %149 = fmul float %109, %141, !dbg !31
  %150 = fmul float %110, %142, !dbg !31
  %151 = fadd float %143, 0.000000e+00, !dbg !32
  %152 = fadd float %144, 0.000000e+00, !dbg !32
  %153 = fadd float %145, 0.000000e+00, !dbg !32
  %154 = fadd float %146, 0.000000e+00, !dbg !32
  %155 = fadd float %147, 0.000000e+00, !dbg !32
  %156 = fadd float %148, 0.000000e+00, !dbg !32
  %157 = fadd float %149, 0.000000e+00, !dbg !32
  %158 = fadd float %150, 0.000000e+00, !dbg !32
  %159 = fadd float %151, %152, !dbg !33
  %160 = select i1 %77, float %127, float %55, !dbg !18
  %161 = select i1 %77, float %128, float %56, !dbg !18
  %162 = select i1 %77, float %129, float %57, !dbg !18
  %163 = select i1 %77, float %130, float %58, !dbg !18
  %164 = select i1 %77, float %131, float %59, !dbg !18
  %165 = select i1 %77, float %132, float %60, !dbg !18
  %166 = select i1 %77, float %133, float %61, !dbg !18
  %167 = select i1 %77, float %134, float %62, !dbg !18
  %168 = select i1 %77, float %153, float 0.000000e+00, !dbg !34
  %169 = select i1 %77, float %154, float 0.000000e+00, !dbg !34
  %170 = select i1 %77, float %155, float 0.000000e+00, !dbg !34
  %171 = select i1 %77, float %156, float 0.000000e+00, !dbg !34
  %172 = select i1 %77, float %157, float 0.000000e+00, !dbg !34
  %173 = select i1 %77, float %158, float 0.000000e+00, !dbg !34
  %174 = select i1 %77, float %111, float %63, !dbg !19
  %175 = select i1 %77, float %112, float %64, !dbg !19
  %176 = select i1 %77, float %113, float %65, !dbg !19
  %177 = select i1 %77, float %114, float %66, !dbg !19
  %178 = select i1 %77, float %115, float %67, !dbg !19
  %179 = select i1 %77, float %116, float %68, !dbg !19
  %180 = select i1 %77, float %117, float %69, !dbg !19
  %181 = select i1 %77, float %118, float %70, !dbg !19
  %182 = lshr i32 %21, 5, !dbg !11
  %183 = fsub float %161, %160, !dbg !35
  %184 = fadd float %174, %175, !dbg !38
  %185 = fcmp oeq float %184, 0.000000e+00, !dbg !39
  %186 = tail call float @llvm.nvvm.div.full(float %175, float %184), !dbg !40
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !41
  %188 = fmul float %183, %187, !dbg !42
  %189 = fadd float %160, %188, !dbg !43
  %190 = select i1 %77, float %159, float 0.000000e+00, !dbg !44
  %191 = fmul float %183, %183, !dbg !45
  %192 = fmul float %191, %174, !dbg !46
  %193 = fmul float %192, %187, !dbg !47
  %194 = fadd float %190, %193, !dbg !48
  %195 = fsub float %162, %189, !dbg !35
  %196 = fadd float %176, %184, !dbg !38
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !39
  %198 = tail call float @llvm.nvvm.div.full(float %176, float %196), !dbg !40
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !41
  %200 = fmul float %199, %195, !dbg !42
  %201 = fadd float %189, %200, !dbg !43
  %202 = fadd float %168, %194, !dbg !44
  %203 = fmul float %195, %195, !dbg !45
  %204 = fmul float %184, %203, !dbg !46
  %205 = fmul float %199, %204, !dbg !47
  %206 = fadd float %202, %205, !dbg !48
  %207 = fsub float %163, %201, !dbg !35
  %208 = fadd float %177, %196, !dbg !38
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !39
  %210 = tail call float @llvm.nvvm.div.full(float %177, float %208), !dbg !40
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !41
  %212 = fmul float %211, %207, !dbg !42
  %213 = fadd float %201, %212, !dbg !43
  %214 = fadd float %169, %206, !dbg !44
  %215 = fmul float %207, %207, !dbg !45
  %216 = fmul float %196, %215, !dbg !46
  %217 = fmul float %211, %216, !dbg !47
  %218 = fadd float %214, %217, !dbg !48
  %219 = fsub float %164, %213, !dbg !35
  %220 = fadd float %178, %208, !dbg !38
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !39
  %222 = tail call float @llvm.nvvm.div.full(float %178, float %220), !dbg !40
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !41
  %224 = fmul float %223, %219, !dbg !42
  %225 = fadd float %213, %224, !dbg !43
  %226 = fadd float %170, %218, !dbg !44
  %227 = fmul float %219, %219, !dbg !45
  %228 = fmul float %208, %227, !dbg !46
  %229 = fmul float %223, %228, !dbg !47
  %230 = fadd float %226, %229, !dbg !48
  %231 = fsub float %165, %225, !dbg !35
  %232 = fadd float %179, %220, !dbg !38
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !39
  %234 = tail call float @llvm.nvvm.div.full(float %179, float %232), !dbg !40
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !41
  %236 = fmul float %235, %231, !dbg !42
  %237 = fadd float %225, %236, !dbg !43
  %238 = fadd float %171, %230, !dbg !44
  %239 = fmul float %231, %231, !dbg !45
  %240 = fmul float %220, %239, !dbg !46
  %241 = fmul float %235, %240, !dbg !47
  %242 = fadd float %238, %241, !dbg !48
  %243 = fsub float %166, %237, !dbg !35
  %244 = fadd float %180, %232, !dbg !38
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !39
  %246 = tail call float @llvm.nvvm.div.full(float %180, float %244), !dbg !40
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !41
  %248 = fmul float %247, %243, !dbg !42
  %249 = fadd float %237, %248, !dbg !43
  %250 = fadd float %172, %242, !dbg !44
  %251 = fmul float %243, %243, !dbg !45
  %252 = fmul float %232, %251, !dbg !46
  %253 = fmul float %247, %252, !dbg !47
  %254 = fadd float %250, %253, !dbg !48
  %255 = fsub float %167, %249, !dbg !35
  %256 = fadd float %181, %244, !dbg !38
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !39
  %258 = tail call float @llvm.nvvm.div.full(float %181, float %256), !dbg !40
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !41
  %260 = fmul float %259, %255, !dbg !42
  %261 = fadd float %249, %260, !dbg !43
  %262 = fadd float %173, %254, !dbg !44
  %263 = fmul float %255, %255, !dbg !45
  %264 = fmul float %244, %263, !dbg !46
  %265 = fmul float %259, %264, !dbg !47
  %266 = fadd float %262, %265, !dbg !48
  %267 = bitcast float %261 to i32, !dbg !49
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 16, i32 31), !dbg !49
  %269 = bitcast i32 %268 to float, !dbg !49
  %270 = bitcast float %266 to i32, !dbg !49
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !49
  %272 = bitcast i32 %271 to float, !dbg !49
  %273 = bitcast float %256 to i32, !dbg !49
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !49
  %275 = bitcast i32 %274 to float, !dbg !49
  %276 = fsub float %269, %261, !dbg !35
  %277 = fadd float %256, %275, !dbg !38
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !39
  %279 = tail call float @llvm.nvvm.div.full(float %275, float %277), !dbg !40
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !41
  %281 = fmul float %280, %276, !dbg !42
  %282 = fadd float %261, %281, !dbg !43
  %283 = fadd float %266, %272, !dbg !44
  %284 = fmul float %276, %276, !dbg !45
  %285 = fmul float %256, %284, !dbg !46
  %286 = fmul float %280, %285, !dbg !47
  %287 = fadd float %283, %286, !dbg !48
  %288 = bitcast float %282 to i32, !dbg !49
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !49
  %290 = bitcast i32 %289 to float, !dbg !49
  %291 = bitcast float %287 to i32, !dbg !49
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !49
  %293 = bitcast i32 %292 to float, !dbg !49
  %294 = bitcast float %277 to i32, !dbg !49
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !49
  %296 = bitcast i32 %295 to float, !dbg !49
  %297 = fsub float %290, %282, !dbg !35
  %298 = fadd float %277, %296, !dbg !38
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !39
  %300 = tail call float @llvm.nvvm.div.full(float %296, float %298), !dbg !40
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !41
  %302 = fmul float %301, %297, !dbg !42
  %303 = fadd float %282, %302, !dbg !43
  %304 = fadd float %287, %293, !dbg !44
  %305 = fmul float %297, %297, !dbg !45
  %306 = fmul float %277, %305, !dbg !46
  %307 = fmul float %301, %306, !dbg !47
  %308 = fadd float %304, %307, !dbg !48
  %309 = bitcast float %303 to i32, !dbg !49
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !49
  %311 = bitcast i32 %310 to float, !dbg !49
  %312 = bitcast float %308 to i32, !dbg !49
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !49
  %314 = bitcast i32 %313 to float, !dbg !49
  %315 = bitcast float %298 to i32, !dbg !49
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !49
  %317 = bitcast i32 %316 to float, !dbg !49
  %318 = fsub float %311, %303, !dbg !35
  %319 = fadd float %298, %317, !dbg !38
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !39
  %321 = tail call float @llvm.nvvm.div.full(float %317, float %319), !dbg !40
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !41
  %323 = fmul float %322, %318, !dbg !42
  %324 = fadd float %303, %323, !dbg !43
  %325 = fadd float %308, %314, !dbg !44
  %326 = fmul float %318, %318, !dbg !45
  %327 = fmul float %298, %326, !dbg !46
  %328 = fmul float %322, %327, !dbg !47
  %329 = fadd float %325, %328, !dbg !48
  %330 = bitcast float %324 to i32, !dbg !49
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !49
  %332 = bitcast i32 %331 to float, !dbg !49
  %333 = bitcast float %329 to i32, !dbg !49
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !49
  %335 = bitcast i32 %334 to float, !dbg !49
  %336 = bitcast float %319 to i32, !dbg !49
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !49
  %338 = bitcast i32 %337 to float, !dbg !49
  %339 = fsub float %332, %324, !dbg !35
  %340 = fadd float %319, %338, !dbg !38
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !39
  %342 = tail call float @llvm.nvvm.div.full(float %338, float %340), !dbg !40
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !41
  %344 = fmul float %343, %339, !dbg !42
  %345 = fadd float %324, %344, !dbg !43
  %346 = fadd float %329, %335, !dbg !44
  %347 = fmul float %339, %339, !dbg !45
  %348 = fmul float %319, %347, !dbg !46
  %349 = fmul float %343, %348, !dbg !47
  %350 = fadd float %346, %349, !dbg !48
  %351 = bitcast float %345 to i32, !dbg !49
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !49
  %353 = bitcast i32 %352 to float, !dbg !49
  %354 = bitcast float %350 to i32, !dbg !49
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !49
  %356 = bitcast i32 %355 to float, !dbg !49
  %357 = bitcast float %340 to i32, !dbg !49
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !49
  %359 = bitcast i32 %358 to float, !dbg !49
  %360 = fsub float %353, %345, !dbg !35
  %361 = fadd float %340, %359, !dbg !38
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !39
  %363 = tail call float @llvm.nvvm.div.full(float %359, float %361), !dbg !40
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !41
  %365 = fmul float %364, %360, !dbg !42
  %366 = fadd float %345, %365, !dbg !43
  %367 = fadd float %350, %356, !dbg !44
  %368 = fmul float %360, %360, !dbg !45
  %369 = fmul float %340, %368, !dbg !46
  %370 = fmul float %364, %369, !dbg !47
  %371 = fadd float %367, %370, !dbg !48
  %372 = and i32 %182, 7, !dbg !49
  %373 = icmp eq i32 %22, 0, !dbg !49
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %372, !dbg !49
  %375 = bitcast float %366 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 %373) #5, !dbg !49
  %376 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %372, !dbg !49
  %377 = bitcast float %371 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 %373) #5, !dbg !49
  %378 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %372, !dbg !49
  %379 = bitcast float %361 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 %373) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %380 = icmp slt i32 %21, 8, !dbg !49
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !49
  %382 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %381, i1 %380) #5, !dbg !49
  %383 = bitcast i32 %382 to float, !dbg !49
  %384 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !49
  %385 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %384, i1 %380) #5, !dbg !49
  %386 = bitcast i32 %385 to float, !dbg !49
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !49
  %388 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %380) #5, !dbg !49
  %389 = bitcast i32 %388 to float, !dbg !49
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 4, i32 31), !dbg !49
  %391 = bitcast i32 %390 to float, !dbg !49
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 4, i32 31), !dbg !49
  %393 = bitcast i32 %392 to float, !dbg !49
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 4, i32 31), !dbg !49
  %395 = bitcast i32 %394 to float, !dbg !49
  %396 = fsub float %391, %383, !dbg !35
  %397 = fadd float %389, %395, !dbg !38
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !39
  %399 = tail call float @llvm.nvvm.div.full(float %395, float %397), !dbg !40
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !41
  %401 = fmul float %396, %400, !dbg !42
  %402 = fadd float %401, %383, !dbg !43
  %403 = fadd float %386, %393, !dbg !44
  %404 = fmul float %396, %396, !dbg !45
  %405 = fmul float %404, %389, !dbg !46
  %406 = fmul float %405, %400, !dbg !47
  %407 = fadd float %403, %406, !dbg !48
  %408 = bitcast float %402 to i32, !dbg !49
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 2, i32 31), !dbg !49
  %410 = bitcast i32 %409 to float, !dbg !49
  %411 = bitcast float %407 to i32, !dbg !49
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 2, i32 31), !dbg !49
  %413 = bitcast i32 %412 to float, !dbg !49
  %414 = bitcast float %397 to i32, !dbg !49
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 2, i32 31), !dbg !49
  %416 = bitcast i32 %415 to float, !dbg !49
  %417 = fsub float %410, %402, !dbg !35
  %418 = fadd float %397, %416, !dbg !38
  %419 = fcmp oeq float %418, 0.000000e+00, !dbg !39
  %420 = tail call float @llvm.nvvm.div.full(float %416, float %418), !dbg !40
  %421 = select i1 %419, float 0.000000e+00, float %420, !dbg !41
  %422 = fmul float %417, %421, !dbg !42
  %423 = fadd float %402, %422, !dbg !43
  %424 = fadd float %407, %413, !dbg !44
  %425 = fmul float %417, %417, !dbg !45
  %426 = fmul float %397, %425, !dbg !46
  %427 = fmul float %421, %426, !dbg !47
  %428 = fadd float %424, %427, !dbg !48
  %429 = bitcast float %423 to i32, !dbg !49
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 1, i32 31), !dbg !49
  %431 = bitcast i32 %430 to float, !dbg !49
  %432 = bitcast float %428 to i32, !dbg !49
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !49
  %434 = bitcast i32 %433 to float, !dbg !49
  %435 = bitcast float %418 to i32, !dbg !49
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !49
  %437 = bitcast i32 %436 to float, !dbg !49
  %438 = fsub float %431, %423, !dbg !35
  %439 = fadd float %418, %437, !dbg !38
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !39
  %441 = tail call float @llvm.nvvm.div.full(float %437, float %439), !dbg !40
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !41
  %443 = fmul float %438, %442, !dbg !42
  %444 = fadd float %423, %443, !dbg !43
  %445 = fadd float %428, %434, !dbg !44
  %446 = fmul float %438, %438, !dbg !45
  %447 = fmul float %418, %446, !dbg !46
  %448 = fmul float %442, %447, !dbg !47
  %449 = fadd float %445, %448, !dbg !48
  %450 = and i32 %21, 7, !dbg !49
  %451 = icmp eq i32 %450, 0, !dbg !49
  %452 = and i1 %380, %451, !dbg !49
  %453 = bitcast float %444 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %453, i1 %452) #5, !dbg !49
  %454 = bitcast float %449 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %454, i1 %452) #5, !dbg !49
  %455 = bitcast float %439 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %455, i1 %452) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %456 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %457 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !49
  %458 = tail call float @llvm.nvvm.div.full(float %457, float 3.072000e+03), !dbg !50
  %459 = fadd float %458, 0x3EB0C6F7A0000000, !dbg !51
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i37 = icmp eq i32 %467, 0, !dbg !52
  br i1 %.not.i37, label %470, label %468, !dbg !52

468:                                              ; preds = %._crit_edge
  %469 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %459), !dbg !52
  br label %__nv_rsqrtf.exit39, !dbg !52

470:                                              ; preds = %._crit_edge
  %471 = tail call float @llvm.nvvm.rsqrt.approx.f(float %459), !dbg !52
  br label %__nv_rsqrtf.exit39, !dbg !52

__nv_rsqrtf.exit39:                               ; preds = %468, %470
  %.0.i38 = phi float [ %469, %468 ], [ %471, %470 ], !dbg !52
  %472 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !53
  %473 = shufflevector <2 x float> %472, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %474 = insertelement <2 x float> poison, float %456, i64 0, !dbg !54
  %475 = shufflevector <2 x float> %474, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %476 = insertelement <4 x float> poison, float %.0.i38, i64 0, !dbg !53
  %477 = shufflevector <4 x float> %476, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !53
  %478 = insertelement <4 x float> poison, float %456, i64 0, !dbg !54
  %479 = shufflevector <4 x float> %478, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  br label %480, !dbg !55

480:                                              ; preds = %__nv_rsqrtf.exit39, %480
  %481 = phi i1 [ true, %__nv_rsqrtf.exit39 ], [ false, %480 ]
  %indvars.iv83 = phi i64 [ 0, %__nv_rsqrtf.exit39 ], [ 2048, %480 ]
  %482 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %641, %480 ]
  %483 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %642, %480 ]
  %484 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit39 ], [ %604, %480 ]
  %485 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit39 ], [ %651, %480 ]
  %486 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit39 ], [ %601, %480 ]
  %487 = or disjoint i64 %indvars.iv83, %26, !dbg !56
  %488 = or disjoint i64 %487, 4, !dbg !56
  %489 = icmp samesign ult i64 %487, 3072, !dbg !57
  %490 = trunc nuw nsw i64 %487 to i32, !dbg !58
  %491 = add i32 %25, %490, !dbg !58
  %492 = sext i32 %491 to i64, !dbg !59
  %493 = getelementptr bfloat, ptr addrspace(1) %0, i64 %492, !dbg !59
  %494 = and i1 %20, %489, !dbg !60
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %493, i1 %494) #5, !dbg !61
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !61
  %497 = bitcast i32 %496 to <2 x bfloat>, !dbg !61
  %498 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !61
  %499 = bitcast i32 %498 to <2 x bfloat>, !dbg !61
  %500 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !61
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !61
  %502 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !61
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !61
  %504 = add nuw nsw i64 %487, 3072, !dbg !62
  %505 = getelementptr float, ptr addrspace(1) %1, i64 %504, !dbg !63
  %506 = getelementptr float, ptr addrspace(1) %1, i64 %488, !dbg !63
  %507 = getelementptr i8, ptr addrspace(1) %506, i64 12288, !dbg !63
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %505, i1 %489) #5, !dbg !64
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !64
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !64
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !64
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !64
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %507, i1 %489) #5, !dbg !64
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !64
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !64
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !64
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !64
  %518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %504, !dbg !65
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %518, i1 %489) #5, !dbg !66
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !66
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !66
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !66
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !66
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !66
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !66
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !66
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !66
  %528 = getelementptr float, ptr addrspace(1) %1, i64 %487, !dbg !67
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %528, i1 %489) #5, !dbg !68
  %530 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !68
  %531 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !68
  %532 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !68
  %533 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !68
  %534 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %506, i1 %489) #5, !dbg !68
  %535 = extractvalue { i32, i32, i32, i32 } %534, 0, !dbg !68
  %536 = extractvalue { i32, i32, i32, i32 } %534, 1, !dbg !68
  %537 = extractvalue { i32, i32, i32, i32 } %534, 2, !dbg !68
  %538 = extractvalue { i32, i32, i32, i32 } %534, 3, !dbg !68
  %539 = getelementptr bfloat, ptr addrspace(1) %2, i64 %487, !dbg !69
  %540 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %539, i1 %489) #5, !dbg !70
  %541 = extractvalue { i32, i32, i32, i32 } %540, 0, !dbg !70
  %542 = bitcast i32 %541 to <2 x bfloat>, !dbg !70
  %543 = extractvalue { i32, i32, i32, i32 } %540, 1, !dbg !70
  %544 = bitcast i32 %543 to <2 x bfloat>, !dbg !70
  %545 = extractvalue { i32, i32, i32, i32 } %540, 2, !dbg !70
  %546 = bitcast i32 %545 to <2 x bfloat>, !dbg !70
  %547 = extractvalue { i32, i32, i32, i32 } %540, 3, !dbg !70
  %548 = bitcast i32 %547 to <2 x bfloat>, !dbg !70
  %549 = fcmp uno <8 x float> %485, zeroinitializer, !dbg !71
  %550 = fcmp uno <4 x float> %486, zeroinitializer, !dbg !73
  %551 = fcmp uno float %482, 0.000000e+00, !dbg !73
  %552 = fcmp uno float %483, 0.000000e+00, !dbg !73
  %553 = fcmp uno <2 x float> %484, zeroinitializer, !dbg !71
  %554 = fpext <2 x bfloat> %497 to <2 x float>, !dbg !75
  %555 = insertelement <2 x i32> poison, i32 %509, i64 0, !dbg !64
  %556 = insertelement <2 x i32> %555, i32 %510, i64 1, !dbg !64
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !64
  %558 = fpext <2 x bfloat> %521 to <2 x float>, !dbg !76
  %559 = insertelement <2 x i32> poison, i32 %530, i64 0, !dbg !68
  %560 = insertelement <2 x i32> %559, i32 %531, i64 1, !dbg !68
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !68
  %562 = fpext <2 x bfloat> %542 to <2 x float>, !dbg !77
  %563 = fsub <2 x float> %554, %475, !dbg !54
  %564 = fmul <2 x float> %473, %563, !dbg !53
  %565 = fadd <2 x float> %557, %558, !dbg !78
  %566 = fadd <2 x float> %565, splat (float 1.000000e+00), !dbg !79
  %567 = fmul <2 x float> %564, %566, !dbg !80
  %568 = fadd <2 x float> %561, %562, !dbg !81
  %569 = fadd <2 x float> %567, %568, !dbg !82
  %570 = fcmp ogt <2 x float> %484, %569, !dbg !83
  %571 = or <2 x i1> %553, %570, !dbg !84
  %572 = select <2 x i1> %571, <2 x float> %484, <2 x float> %569, !dbg !85
  %573 = shufflevector <2 x bfloat> %499, <2 x bfloat> %501, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %574 = fpext <4 x bfloat> %573 to <4 x float>, !dbg !75
  %575 = insertelement <4 x i32> poison, i32 %511, i64 0, !dbg !64
  %576 = insertelement <4 x i32> %575, i32 %512, i64 1, !dbg !64
  %577 = insertelement <4 x i32> %576, i32 %514, i64 2, !dbg !64
  %578 = insertelement <4 x i32> %577, i32 %515, i64 3, !dbg !64
  %579 = bitcast <4 x i32> %578 to <4 x float>, !dbg !64
  %580 = shufflevector <2 x bfloat> %523, <2 x bfloat> %525, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !76
  %581 = fpext <4 x bfloat> %580 to <4 x float>, !dbg !76
  %582 = insertelement <4 x i32> poison, i32 %532, i64 0, !dbg !68
  %583 = insertelement <4 x i32> %582, i32 %533, i64 1, !dbg !68
  %584 = insertelement <4 x i32> %583, i32 %535, i64 2, !dbg !68
  %585 = insertelement <4 x i32> %584, i32 %536, i64 3, !dbg !68
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !68
  %587 = shufflevector <2 x bfloat> %544, <2 x bfloat> %546, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !77
  %588 = fpext <4 x bfloat> %587 to <4 x float>, !dbg !77
  %589 = fsub <4 x float> %574, %479, !dbg !54
  %590 = fmul <4 x float> %477, %589, !dbg !53
  %591 = fadd <4 x float> %579, %581, !dbg !78
  %592 = fadd <4 x float> %591, splat (float 1.000000e+00), !dbg !79
  %593 = fmul <4 x float> %590, %592, !dbg !80
  %594 = fadd <4 x float> %586, %588, !dbg !81
  %595 = fadd <4 x float> %593, %594, !dbg !82
  %596 = fcmp olt <4 x float> %486, %595, !dbg !86
  %597 = or <4 x i1> %550, %596, !dbg !87
  %598 = select <4 x i1> %597, <4 x float> %486, <4 x float> %595, !dbg !88
  %599 = insertelement <4 x i1> poison, i1 %494, i64 0, !dbg !89
  %600 = shufflevector <4 x i1> %599, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !89
  %601 = select <4 x i1> %600, <4 x float> %598, <4 x float> %486, !dbg !89
  %602 = insertelement <2 x i1> poison, i1 %494, i64 0, !dbg !90
  %603 = shufflevector <2 x i1> %602, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !90
  %604 = select <2 x i1> %603, <2 x float> %572, <2 x float> %484, !dbg !90
  %605 = insertelement <8 x i1> poison, i1 %494, i64 0, !dbg !90
  %606 = shufflevector <8 x i1> %605, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !90
  %607 = getelementptr bfloat, ptr addrspace(1) %3, i64 %492, !dbg !91
  %608 = fptrunc <2 x float> %569 to <2 x bfloat>, !dbg !92
  %609 = extractelement <4 x float> %595, i64 0, !dbg !92
  %610 = fptrunc float %609 to bfloat, !dbg !92
  %611 = extractelement <4 x float> %595, i64 1, !dbg !92
  %612 = fptrunc float %611 to bfloat, !dbg !92
  %613 = extractelement <4 x float> %595, i64 2, !dbg !92
  %614 = fptrunc float %613 to bfloat, !dbg !92
  %615 = extractelement <4 x float> %595, i64 3, !dbg !92
  %616 = fptrunc float %615 to bfloat, !dbg !92
  %617 = fpext <2 x bfloat> %503 to <2 x float>, !dbg !75
  %618 = insertelement <2 x i32> poison, i32 %516, i64 0, !dbg !64
  %619 = insertelement <2 x i32> %618, i32 %517, i64 1, !dbg !64
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !64
  %621 = fpext <2 x bfloat> %527 to <2 x float>, !dbg !76
  %622 = insertelement <2 x i32> poison, i32 %537, i64 0, !dbg !68
  %623 = insertelement <2 x i32> %622, i32 %538, i64 1, !dbg !68
  %624 = bitcast <2 x i32> %623 to <2 x float>, !dbg !68
  %625 = fpext <2 x bfloat> %548 to <2 x float>, !dbg !77
  %626 = fsub <2 x float> %617, %475, !dbg !54
  %627 = fmul <2 x float> %473, %626, !dbg !53
  %628 = fadd <2 x float> %620, %621, !dbg !78
  %629 = fadd <2 x float> %628, splat (float 1.000000e+00), !dbg !79
  %630 = fmul <2 x float> %627, %629, !dbg !80
  %631 = fadd <2 x float> %624, %625, !dbg !81
  %632 = fadd <2 x float> %630, %631, !dbg !82
  %633 = extractelement <2 x float> %632, i64 0, !dbg !88
  %634 = fcmp olt float %482, %633, !dbg !86
  %635 = extractelement <2 x float> %632, i64 1, !dbg !88
  %636 = fcmp olt float %483, %635, !dbg !86
  %637 = or i1 %551, %634, !dbg !87
  %638 = or i1 %552, %636, !dbg !87
  %639 = select i1 %637, float %482, float %633, !dbg !88
  %640 = select i1 %638, float %483, float %635, !dbg !88
  %641 = select i1 %494, float %639, float %482, !dbg !89
  %642 = select i1 %494, float %640, float %483, !dbg !89
  %643 = shufflevector <2 x float> %569, <2 x float> %632, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !83
  %644 = shufflevector <4 x float> %595, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %645 = shufflevector <8 x float> %644, <8 x float> %643, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !83
  %646 = fcmp ogt <8 x float> %485, %645, !dbg !83
  %647 = fcmp olt <8 x float> %485, %645, !dbg !83
  %648 = shufflevector <8 x i1> %646, <8 x i1> %647, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !83
  %649 = or <8 x i1> %549, %648, !dbg !84
  %650 = select <8 x i1> %649, <8 x float> %485, <8 x float> %645, !dbg !85
  %651 = select <8 x i1> %606, <8 x float> %650, <8 x float> %485, !dbg !90
  %652 = fptrunc <2 x float> %632 to <2 x bfloat>, !dbg !92
  %653 = bitcast <2 x bfloat> %608 to i32, !dbg !92
  %654 = insertelement <2 x bfloat> poison, bfloat %610, i64 0, !dbg !92
  %655 = insertelement <2 x bfloat> %654, bfloat %612, i64 1, !dbg !92
  %656 = bitcast <2 x bfloat> %655 to i32, !dbg !92
  %657 = insertelement <2 x bfloat> poison, bfloat %614, i64 0, !dbg !92
  %658 = insertelement <2 x bfloat> %657, bfloat %616, i64 1, !dbg !92
  %659 = bitcast <2 x bfloat> %658 to i32, !dbg !92
  %660 = bitcast <2 x bfloat> %652 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %653, i32 %656, i32 %659, i32 %660, ptr addrspace(1) %607, i1 %494) #5, !dbg !92
  br i1 %481, label %480, label %661, !dbg !55

661:                                              ; preds = %480
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %662 = extractelement <8 x float> %651, i64 6, !dbg !95
  %663 = extractelement <8 x float> %651, i64 7, !dbg !95
  %664 = fcmp olt float %662, %663, !dbg !95
  %665 = fcmp uno float %662, 0.000000e+00, !dbg !96
  %666 = or i1 %664, %665, !dbg !97
  %667 = select i1 %666, float %662, float %663, !dbg !98
  %668 = extractelement <4 x float> %601, i64 0, !dbg !95
  %669 = fcmp olt float %667, %668, !dbg !95
  %670 = fcmp uno float %667, 0.000000e+00, !dbg !96
  %671 = or i1 %669, %670, !dbg !97
  %672 = select i1 %671, float %667, float %668, !dbg !98
  %673 = extractelement <4 x float> %601, i64 1, !dbg !95
  %674 = fcmp olt float %672, %673, !dbg !95
  %675 = fcmp uno float %672, 0.000000e+00, !dbg !96
  %676 = or i1 %674, %675, !dbg !97
  %677 = select i1 %676, float %672, float %673, !dbg !98
  %678 = extractelement <4 x float> %601, i64 2, !dbg !95
  %679 = fcmp olt float %677, %678, !dbg !95
  %680 = fcmp uno float %677, 0.000000e+00, !dbg !96
  %681 = or i1 %679, %680, !dbg !97
  %682 = select i1 %681, float %677, float %678, !dbg !98
  %683 = extractelement <4 x float> %601, i64 3, !dbg !95
  %684 = fcmp olt float %682, %683, !dbg !95
  %685 = fcmp uno float %682, 0.000000e+00, !dbg !96
  %686 = or i1 %684, %685, !dbg !97
  %687 = select i1 %686, float %682, float %683, !dbg !98
  %688 = fcmp olt float %687, %641, !dbg !95
  %689 = fcmp uno float %687, 0.000000e+00, !dbg !96
  %690 = or i1 %688, %689, !dbg !97
  %691 = select i1 %690, float %687, float %641, !dbg !98
  %692 = fcmp olt float %691, %642, !dbg !95
  %693 = fcmp uno float %691, 0.000000e+00, !dbg !96
  %694 = or i1 %692, %693, !dbg !97
  %695 = select i1 %694, float %691, float %642, !dbg !98
  %696 = bitcast float %695 to i32, !dbg !93
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 16, i32 31), !dbg !93
  %698 = bitcast i32 %697 to float, !dbg !93
  %699 = fcmp olt float %695, %698, !dbg !95
  %700 = fcmp uno float %695, 0.000000e+00, !dbg !96
  %701 = or i1 %700, %699, !dbg !97
  %702 = select i1 %701, float %695, float %698, !dbg !98
  %703 = bitcast float %702 to i32, !dbg !93
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 8, i32 31), !dbg !93
  %705 = bitcast i32 %704 to float, !dbg !93
  %706 = fcmp olt float %702, %705, !dbg !95
  %707 = fcmp uno float %702, 0.000000e+00, !dbg !96
  %708 = or i1 %706, %707, !dbg !97
  %709 = select i1 %708, float %702, float %705, !dbg !98
  %710 = bitcast float %709 to i32, !dbg !93
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 4, i32 31), !dbg !93
  %712 = bitcast i32 %711 to float, !dbg !93
  %713 = fcmp olt float %709, %712, !dbg !95
  %714 = fcmp uno float %709, 0.000000e+00, !dbg !96
  %715 = or i1 %713, %714, !dbg !97
  %716 = select i1 %715, float %709, float %712, !dbg !98
  %717 = bitcast float %716 to i32, !dbg !93
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %717, i32 2, i32 31), !dbg !93
  %719 = bitcast i32 %718 to float, !dbg !93
  %720 = fcmp olt float %716, %719, !dbg !95
  %721 = fcmp uno float %716, 0.000000e+00, !dbg !96
  %722 = or i1 %720, %721, !dbg !97
  %723 = select i1 %722, float %716, float %719, !dbg !98
  %724 = bitcast float %723 to i32, !dbg !93
  %725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %724, i32 1, i32 31), !dbg !93
  %726 = bitcast i32 %725 to float, !dbg !93
  %727 = fcmp olt float %723, %726, !dbg !95
  %728 = fcmp uno float %723, 0.000000e+00, !dbg !96
  %729 = or i1 %727, %728, !dbg !97
  %730 = select i1 %729, i32 %724, i32 %725, !dbg !98
  %731 = insertelement <1 x i32> poison, i32 %730, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %731, i1 %373) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %732 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %381, i1 %380) #5, !dbg !93
  %733 = bitcast i32 %732 to float, !dbg !93
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !93
  %735 = bitcast i32 %734 to float, !dbg !93
  %736 = fcmp olt float %733, %735, !dbg !95
  %737 = fcmp uno float %733, 0.000000e+00, !dbg !96
  %738 = or i1 %737, %736, !dbg !97
  %739 = select i1 %738, float %733, float %735, !dbg !98
  %740 = bitcast float %739 to i32, !dbg !93
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 2, i32 31), !dbg !93
  %742 = bitcast i32 %741 to float, !dbg !93
  %743 = fcmp olt float %739, %742, !dbg !95
  %744 = fcmp uno float %739, 0.000000e+00, !dbg !96
  %745 = or i1 %743, %744, !dbg !97
  %746 = select i1 %745, float %739, float %742, !dbg !98
  %747 = bitcast float %746 to i32, !dbg !93
  %748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %747, i32 1, i32 31), !dbg !93
  %749 = bitcast i32 %748 to float, !dbg !93
  %750 = fcmp olt float %746, %749, !dbg !95
  %751 = fcmp uno float %746, 0.000000e+00, !dbg !96
  %752 = or i1 %750, %751, !dbg !97
  %753 = select i1 %752, i32 %747, i32 %748, !dbg !98
  %754 = insertelement <1 x i32> poison, i32 %753, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %754, i1 %452) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %755 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %756 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %604, <2 x i32> <i32 0, i32 2>, !dbg !101
  %757 = fcmp ogt <2 x float> %756, %604, !dbg !101
  %758 = fcmp uno <2 x float> %756, %604, !dbg !101
  %shift = shufflevector <2 x i1> %757, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !102
  %759 = or <2 x i1> %shift, %758, !dbg !102
  %760 = extractelement <2 x i1> %759, i64 0, !dbg !102
  %761 = extractelement <2 x float> %604, i64 0, !dbg !103
  %762 = extractelement <2 x float> %604, i64 1, !dbg !103
  %763 = select i1 %760, float %761, float %762, !dbg !103
  %764 = extractelement <8 x float> %651, i64 0, !dbg !101
  %765 = fcmp ogt float %763, %764, !dbg !101
  %766 = fcmp uno float %763, 0.000000e+00, !dbg !104
  %767 = or i1 %765, %766, !dbg !102
  %768 = select i1 %767, float %763, float %764, !dbg !103
  %769 = extractelement <8 x float> %651, i64 1, !dbg !101
  %770 = fcmp ogt float %768, %769, !dbg !101
  %771 = fcmp uno float %768, 0.000000e+00, !dbg !104
  %772 = or i1 %770, %771, !dbg !102
  %773 = select i1 %772, float %768, float %769, !dbg !103
  %774 = extractelement <8 x float> %651, i64 2, !dbg !101
  %775 = fcmp ogt float %773, %774, !dbg !101
  %776 = fcmp uno float %773, 0.000000e+00, !dbg !104
  %777 = or i1 %775, %776, !dbg !102
  %778 = select i1 %777, float %773, float %774, !dbg !103
  %779 = extractelement <8 x float> %651, i64 3, !dbg !101
  %780 = fcmp ogt float %778, %779, !dbg !101
  %781 = fcmp uno float %778, 0.000000e+00, !dbg !104
  %782 = or i1 %780, %781, !dbg !102
  %783 = select i1 %782, float %778, float %779, !dbg !103
  %784 = extractelement <8 x float> %651, i64 4, !dbg !101
  %785 = fcmp ogt float %783, %784, !dbg !101
  %786 = fcmp uno float %783, 0.000000e+00, !dbg !104
  %787 = or i1 %785, %786, !dbg !102
  %788 = select i1 %787, float %783, float %784, !dbg !103
  %789 = extractelement <8 x float> %651, i64 5, !dbg !101
  %790 = fcmp ogt float %788, %789, !dbg !101
  %791 = fcmp uno float %788, 0.000000e+00, !dbg !104
  %792 = or i1 %790, %791, !dbg !102
  %793 = select i1 %792, float %788, float %789, !dbg !103
  %794 = bitcast float %793 to i32, !dbg !99
  %795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 16, i32 31), !dbg !99
  %796 = bitcast i32 %795 to float, !dbg !99
  %797 = fcmp ogt float %793, %796, !dbg !101
  %798 = fcmp uno float %793, 0.000000e+00, !dbg !104
  %799 = or i1 %798, %797, !dbg !102
  %800 = select i1 %799, float %793, float %796, !dbg !103
  %801 = bitcast float %800 to i32, !dbg !99
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 8, i32 31), !dbg !99
  %803 = bitcast i32 %802 to float, !dbg !99
  %804 = fcmp ogt float %800, %803, !dbg !101
  %805 = fcmp uno float %800, 0.000000e+00, !dbg !104
  %806 = or i1 %804, %805, !dbg !102
  %807 = select i1 %806, float %800, float %803, !dbg !103
  %808 = bitcast float %807 to i32, !dbg !99
  %809 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %808, i32 4, i32 31), !dbg !99
  %810 = bitcast i32 %809 to float, !dbg !99
  %811 = fcmp ogt float %807, %810, !dbg !101
  %812 = fcmp uno float %807, 0.000000e+00, !dbg !104
  %813 = or i1 %811, %812, !dbg !102
  %814 = select i1 %813, float %807, float %810, !dbg !103
  %815 = bitcast float %814 to i32, !dbg !99
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 2, i32 31), !dbg !99
  %817 = bitcast i32 %816 to float, !dbg !99
  %818 = fcmp ogt float %814, %817, !dbg !101
  %819 = fcmp uno float %814, 0.000000e+00, !dbg !104
  %820 = or i1 %818, %819, !dbg !102
  %821 = select i1 %820, float %814, float %817, !dbg !103
  %822 = bitcast float %821 to i32, !dbg !99
  %823 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %822, i32 1, i32 31), !dbg !99
  %824 = bitcast i32 %823 to float, !dbg !99
  %825 = fcmp ogt float %821, %824, !dbg !101
  %826 = fcmp uno float %821, 0.000000e+00, !dbg !104
  %827 = or i1 %825, %826, !dbg !102
  %828 = select i1 %827, i32 %822, i32 %823, !dbg !103
  %829 = insertelement <1 x i32> poison, i32 %828, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %829, i1 %373) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %830 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %381, i1 %380) #5, !dbg !99
  %831 = bitcast i32 %830 to float, !dbg !99
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %830, i32 4, i32 31), !dbg !99
  %833 = bitcast i32 %832 to float, !dbg !99
  %834 = fcmp ogt float %831, %833, !dbg !101
  %835 = fcmp uno float %831, 0.000000e+00, !dbg !104
  %836 = or i1 %835, %834, !dbg !102
  %837 = select i1 %836, float %831, float %833, !dbg !103
  %838 = bitcast float %837 to i32, !dbg !99
  %839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %838, i32 2, i32 31), !dbg !99
  %840 = bitcast i32 %839 to float, !dbg !99
  %841 = fcmp ogt float %837, %840, !dbg !101
  %842 = fcmp uno float %837, 0.000000e+00, !dbg !104
  %843 = or i1 %841, %842, !dbg !102
  %844 = select i1 %843, float %837, float %840, !dbg !103
  %845 = bitcast float %844 to i32, !dbg !99
  %846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %845, i32 1, i32 31), !dbg !99
  %847 = bitcast i32 %846 to float, !dbg !99
  %848 = fcmp ogt float %844, %847, !dbg !101
  %849 = fcmp uno float %844, 0.000000e+00, !dbg !104
  %850 = or i1 %848, %849, !dbg !102
  %851 = select i1 %850, i32 %845, i32 %846, !dbg !103
  %852 = insertelement <1 x i32> poison, i32 %851, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %852, i1 %452) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %853 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %854 = sext i32 %19 to i64, !dbg !105
  %855 = getelementptr bfloat, ptr addrspace(1) %4, i64 %854, !dbg !105
  %856 = fptrunc float %755 to bfloat, !dbg !106
  %857 = and i32 %21, 255, !dbg !106
  %858 = icmp eq i32 %857, 0, !dbg !106
  %859 = bitcast bfloat %856 to i16, !dbg !106
  %860 = and i1 %20, %858, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %859, ptr addrspace(1) %855, i1 %860) #5, !dbg !106
  %861 = getelementptr bfloat, ptr addrspace(1) %5, i64 %854, !dbg !107
  %862 = fptrunc float %853 to bfloat, !dbg !108
  %863 = bitcast bfloat %862 to i16, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %863, ptr addrspace(1) %861, i1 %860) #5, !dbg !108
  %864 = getelementptr bfloat, ptr addrspace(1) %6, i64 %854, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %859, ptr addrspace(1) %864, i1 %860) #5, !dbg !110
  %865 = getelementptr bfloat, ptr addrspace(1) %7, i64 %854, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %863, ptr addrspace(1) %865, i1 %860) #5, !dbg !112
  %866 = getelementptr bfloat, ptr addrspace(1) %8, i64 %854, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %859, ptr addrspace(1) %866, i1 %860) #5, !dbg !114
  %867 = getelementptr bfloat, ptr addrspace(1) %9, i64 %854, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %863, ptr addrspace(1) %867, i1 %860) #5, !dbg !116
  %868 = getelementptr bfloat, ptr addrspace(1) %10, i64 %854, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %859, ptr addrspace(1) %868, i1 %860) #5, !dbg !118
  %869 = getelementptr bfloat, ptr addrspace(1) %11, i64 %854, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %863, ptr addrspace(1) %869, i1 %860) #5, !dbg !120
  %.inv = fcmp oge float %755, 0.000000e+00, !dbg !121
  %870 = select i1 %.inv, float 0.000000e+00, float %755, !dbg !121
  %871 = fsub float 0.000000e+00, %870, !dbg !123
  %872 = fcmp uno float %871, 0.000000e+00, !dbg !124
  %.inv3 = fcmp ole float %853, 0.000000e+00, !dbg !126
  %873 = select i1 %.inv3, float 0.000000e+00, float %853, !dbg !126
  %874 = fcmp ogt float %871, %873, !dbg !128
  %875 = or i1 %872, %874, !dbg !129
  %876 = select i1 %875, float %871, float %873, !dbg !130
  %877 = fmul float %876, 0x3F80204080000000, !dbg !131
  %878 = fcmp ogt float %877, 0x3EE4F8B580000000, !dbg !132
  %879 = fcmp uno float %877, 0.000000e+00, !dbg !134
  %880 = or i1 %878, %879, !dbg !135
  %881 = select i1 %880, float %877, float 0x3EE4F8B580000000, !dbg !136
  %882 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %881), !dbg !137
  %883 = add i32 %25, %24, !dbg !138
  %884 = sext i32 %883 to i64, !dbg !139
  %885 = getelementptr bfloat, ptr addrspace(1) %3, i64 %884, !dbg !139
  %886 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %885, i1 %20) #5, !dbg !140
  %887 = extractvalue { i32, i32, i32, i32 } %886, 0, !dbg !140
  %888 = bitcast i32 %887 to <2 x bfloat>, !dbg !140
  %889 = extractvalue { i32, i32, i32, i32 } %886, 1, !dbg !140
  %890 = bitcast i32 %889 to <2 x bfloat>, !dbg !140
  %891 = extractvalue { i32, i32, i32, i32 } %886, 2, !dbg !140
  %892 = bitcast i32 %891 to <2 x bfloat>, !dbg !140
  %893 = extractvalue { i32, i32, i32, i32 } %886, 3, !dbg !140
  %894 = bitcast i32 %893 to <2 x bfloat>, !dbg !140
  %895 = extractelement <2 x bfloat> %888, i64 0, !dbg !140
  %896 = extractelement <2 x bfloat> %888, i64 1, !dbg !140
  %897 = extractelement <2 x bfloat> %890, i64 0, !dbg !140
  %898 = extractelement <2 x bfloat> %890, i64 1, !dbg !140
  %899 = extractelement <2 x bfloat> %892, i64 0, !dbg !140
  %900 = extractelement <2 x bfloat> %892, i64 1, !dbg !140
  %901 = extractelement <2 x bfloat> %894, i64 0, !dbg !140
  %902 = extractelement <2 x bfloat> %894, i64 1, !dbg !140
  %903 = fpext bfloat %895 to float, !dbg !141
  %904 = fpext bfloat %896 to float, !dbg !141
  %905 = fpext bfloat %897 to float, !dbg !141
  %906 = fpext bfloat %898 to float, !dbg !141
  %907 = fpext bfloat %899 to float, !dbg !141
  %908 = fpext bfloat %900 to float, !dbg !141
  %909 = fpext bfloat %901 to float, !dbg !141
  %910 = fpext bfloat %902 to float, !dbg !141
  %911 = fmul float %882, %903, !dbg !142
  %912 = fmul float %882, %904, !dbg !142
  %913 = fmul float %882, %905, !dbg !142
  %914 = fmul float %882, %906, !dbg !142
  %915 = fmul float %882, %907, !dbg !142
  %916 = fmul float %882, %908, !dbg !142
  %917 = fmul float %882, %909, !dbg !142
  %918 = fmul float %882, %910, !dbg !142
  %919 = tail call float @llvm.nvvm.round.f(float %911) #5, !dbg !143
  %920 = tail call float @llvm.nvvm.round.f(float %912) #5, !dbg !143
  %921 = tail call float @llvm.nvvm.round.f(float %913) #5, !dbg !143
  %922 = tail call float @llvm.nvvm.round.f(float %914) #5, !dbg !143
  %923 = tail call float @llvm.nvvm.round.f(float %915) #5, !dbg !143
  %924 = tail call float @llvm.nvvm.round.f(float %916) #5, !dbg !143
  %925 = tail call float @llvm.nvvm.round.f(float %917) #5, !dbg !143
  %926 = tail call float @llvm.nvvm.round.f(float %918) #5, !dbg !143
  %927 = insertelement <4 x float> poison, float %919, i64 0, !dbg !144
  %928 = insertelement <4 x float> %927, float %920, i64 1, !dbg !144
  %929 = insertelement <4 x float> %928, float %921, i64 2, !dbg !144
  %930 = insertelement <4 x float> %929, float %922, i64 3, !dbg !144
  %931 = fcmp ogt <4 x float> %930, splat (float -1.270000e+02), !dbg !144
  %932 = fcmp uno <4 x float> %930, zeroinitializer, !dbg !146
  %933 = or <4 x i1> %931, %932, !dbg !147
  %934 = select <4 x i1> %933, <4 x float> %930, <4 x float> splat (float -1.270000e+02), !dbg !148
  %935 = fcmp olt <4 x float> %934, splat (float 1.270000e+02), !dbg !149
  %936 = fcmp uno <4 x float> %934, zeroinitializer, !dbg !151
  %937 = or <4 x i1> %935, %936, !dbg !152
  %938 = fptosi <4 x float> %934 to <4 x i8>, !dbg !153
  %939 = select <4 x i1> %937, <4 x i8> %938, <4 x i8> splat (i8 127), !dbg !154
  %940 = insertelement <4 x float> poison, float %923, i64 0, !dbg !144
  %941 = insertelement <4 x float> %940, float %924, i64 1, !dbg !144
  %942 = insertelement <4 x float> %941, float %925, i64 2, !dbg !144
  %943 = insertelement <4 x float> %942, float %926, i64 3, !dbg !144
  %944 = fcmp ogt <4 x float> %943, splat (float -1.270000e+02), !dbg !144
  %945 = fcmp uno <4 x float> %943, zeroinitializer, !dbg !146
  %946 = or <4 x i1> %944, %945, !dbg !147
  %947 = select <4 x i1> %946, <4 x float> %943, <4 x float> splat (float -1.270000e+02), !dbg !148
  %948 = fcmp olt <4 x float> %947, splat (float 1.270000e+02), !dbg !149
  %949 = fcmp uno <4 x float> %947, zeroinitializer, !dbg !151
  %950 = or <4 x i1> %948, %949, !dbg !152
  %951 = fptosi <4 x float> %947 to <4 x i8>, !dbg !153
  %952 = select <4 x i1> %950, <4 x i8> %951, <4 x i8> splat (i8 127), !dbg !154
  %953 = getelementptr i8, ptr addrspace(1) %12, i64 %884, !dbg !155
  %954 = bitcast <4 x i8> %939 to i32, !dbg !156
  %955 = bitcast <4 x i8> %952 to i32, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %954, i32 %955, ptr addrspace(1) %953, i1 %20) #5, !dbg !156
  %956 = getelementptr i8, ptr addrspace(1) %13, i64 %884, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %954, i32 %955, ptr addrspace(1) %956, i1 %20) #5, !dbg !158
  %957 = getelementptr i8, ptr addrspace(1) %14, i64 %884, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %954, i32 %955, ptr addrspace(1) %957, i1 %20) #5, !dbg !160
  %958 = getelementptr i8, ptr addrspace(1) %15, i64 %884, !dbg !161
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %954, i32 %955, ptr addrspace(1) %958, i1 %20) #5, !dbg !162
  %959 = or disjoint i64 %26, 2048, !dbg !163
  %960 = icmp samesign ult i64 %959, 3072, !dbg !164
  %961 = trunc nuw nsw i64 %959 to i32, !dbg !138
  %962 = add i32 %25, %961, !dbg !138
  %963 = sext i32 %962 to i64, !dbg !139
  %964 = getelementptr bfloat, ptr addrspace(1) %3, i64 %963, !dbg !139
  %965 = and i1 %20, %960, !dbg !165
  %966 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %964, i1 %965) #5, !dbg !140
  %967 = extractvalue { i32, i32, i32, i32 } %966, 0, !dbg !140
  %968 = bitcast i32 %967 to <2 x bfloat>, !dbg !140
  %969 = extractvalue { i32, i32, i32, i32 } %966, 1, !dbg !140
  %970 = bitcast i32 %969 to <2 x bfloat>, !dbg !140
  %971 = extractvalue { i32, i32, i32, i32 } %966, 2, !dbg !140
  %972 = bitcast i32 %971 to <2 x bfloat>, !dbg !140
  %973 = extractvalue { i32, i32, i32, i32 } %966, 3, !dbg !140
  %974 = bitcast i32 %973 to <2 x bfloat>, !dbg !140
  %975 = extractelement <2 x bfloat> %968, i64 0, !dbg !140
  %976 = extractelement <2 x bfloat> %968, i64 1, !dbg !140
  %977 = extractelement <2 x bfloat> %970, i64 0, !dbg !140
  %978 = extractelement <2 x bfloat> %970, i64 1, !dbg !140
  %979 = extractelement <2 x bfloat> %972, i64 0, !dbg !140
  %980 = extractelement <2 x bfloat> %972, i64 1, !dbg !140
  %981 = extractelement <2 x bfloat> %974, i64 0, !dbg !140
  %982 = extractelement <2 x bfloat> %974, i64 1, !dbg !140
  %983 = fpext bfloat %975 to float, !dbg !141
  %984 = fpext bfloat %976 to float, !dbg !141
  %985 = fpext bfloat %977 to float, !dbg !141
  %986 = fpext bfloat %978 to float, !dbg !141
  %987 = fpext bfloat %979 to float, !dbg !141
  %988 = fpext bfloat %980 to float, !dbg !141
  %989 = fpext bfloat %981 to float, !dbg !141
  %990 = fpext bfloat %982 to float, !dbg !141
  %991 = fmul float %882, %983, !dbg !142
  %992 = fmul float %882, %984, !dbg !142
  %993 = fmul float %882, %985, !dbg !142
  %994 = fmul float %882, %986, !dbg !142
  %995 = fmul float %882, %987, !dbg !142
  %996 = fmul float %882, %988, !dbg !142
  %997 = fmul float %882, %989, !dbg !142
  %998 = fmul float %882, %990, !dbg !142
  %999 = tail call float @llvm.nvvm.round.f(float %991) #5, !dbg !143
  %1000 = tail call float @llvm.nvvm.round.f(float %992) #5, !dbg !143
  %1001 = tail call float @llvm.nvvm.round.f(float %993) #5, !dbg !143
  %1002 = tail call float @llvm.nvvm.round.f(float %994) #5, !dbg !143
  %1003 = tail call float @llvm.nvvm.round.f(float %995) #5, !dbg !143
  %1004 = tail call float @llvm.nvvm.round.f(float %996) #5, !dbg !143
  %1005 = tail call float @llvm.nvvm.round.f(float %997) #5, !dbg !143
  %1006 = tail call float @llvm.nvvm.round.f(float %998) #5, !dbg !143
  %1007 = insertelement <4 x float> poison, float %999, i64 0, !dbg !144
  %1008 = insertelement <4 x float> %1007, float %1000, i64 1, !dbg !144
  %1009 = insertelement <4 x float> %1008, float %1001, i64 2, !dbg !144
  %1010 = insertelement <4 x float> %1009, float %1002, i64 3, !dbg !144
  %1011 = fcmp ogt <4 x float> %1010, splat (float -1.270000e+02), !dbg !144
  %1012 = fcmp uno <4 x float> %1010, zeroinitializer, !dbg !146
  %1013 = or <4 x i1> %1011, %1012, !dbg !147
  %1014 = select <4 x i1> %1013, <4 x float> %1010, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1015 = fcmp olt <4 x float> %1014, splat (float 1.270000e+02), !dbg !149
  %1016 = fcmp uno <4 x float> %1014, zeroinitializer, !dbg !151
  %1017 = or <4 x i1> %1015, %1016, !dbg !152
  %1018 = fptosi <4 x float> %1014 to <4 x i8>, !dbg !153
  %1019 = select <4 x i1> %1017, <4 x i8> %1018, <4 x i8> splat (i8 127), !dbg !154
  %1020 = insertelement <4 x float> poison, float %1003, i64 0, !dbg !144
  %1021 = insertelement <4 x float> %1020, float %1004, i64 1, !dbg !144
  %1022 = insertelement <4 x float> %1021, float %1005, i64 2, !dbg !144
  %1023 = insertelement <4 x float> %1022, float %1006, i64 3, !dbg !144
  %1024 = fcmp ogt <4 x float> %1023, splat (float -1.270000e+02), !dbg !144
  %1025 = fcmp uno <4 x float> %1023, zeroinitializer, !dbg !146
  %1026 = or <4 x i1> %1024, %1025, !dbg !147
  %1027 = select <4 x i1> %1026, <4 x float> %1023, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1028 = fcmp olt <4 x float> %1027, splat (float 1.270000e+02), !dbg !149
  %1029 = fcmp uno <4 x float> %1027, zeroinitializer, !dbg !151
  %1030 = or <4 x i1> %1028, %1029, !dbg !152
  %1031 = fptosi <4 x float> %1027 to <4 x i8>, !dbg !153
  %1032 = select <4 x i1> %1030, <4 x i8> %1031, <4 x i8> splat (i8 127), !dbg !154
  %1033 = getelementptr i8, ptr addrspace(1) %12, i64 %963, !dbg !155
  %1034 = bitcast <4 x i8> %1019 to i32, !dbg !156
  %1035 = bitcast <4 x i8> %1032 to i32, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1034, i32 %1035, ptr addrspace(1) %1033, i1 %965) #5, !dbg !156
  %1036 = getelementptr i8, ptr addrspace(1) %13, i64 %963, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1034, i32 %1035, ptr addrspace(1) %1036, i1 %965) #5, !dbg !158
  %1037 = getelementptr i8, ptr addrspace(1) %14, i64 %963, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1034, i32 %1035, ptr addrspace(1) %1037, i1 %965) #5, !dbg !160
  %1038 = getelementptr i8, ptr addrspace(1) %15, i64 %963, !dbg !161
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1034, i32 %1035, ptr addrspace(1) %1038, i1 %965) #5, !dbg !162
  ret void, !dbg !166
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 61, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 203, column: 7, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 45, column: 58, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!37 = !DILocation(line: 47, column: 79, scope: !6)
!38 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !37)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 69, column: 24, scope: !6)
!52 = !DILocation(line: 70, column: 32, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 55, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 61, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 84, column: 47, scope: !6)
!73 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !74)
!74 = !DILocation(line: 82, column: 47, scope: !6)
!75 = !DILocation(line: 59, column: 113, scope: !6)
!76 = !DILocation(line: 61, column: 102, scope: !6)
!77 = !DILocation(line: 63, column: 95, scope: !6)
!78 = !DILocation(line: 74, column: 24, scope: !6)
!79 = !DILocation(line: 76, column: 24, scope: !6)
!80 = !DILocation(line: 77, column: 24, scope: !6)
!81 = !DILocation(line: 79, column: 24, scope: !6)
!82 = !DILocation(line: 80, column: 24, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !72)
!84 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !72)
!85 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !72)
!86 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !74)
!87 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !74)
!88 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !74)
!89 = !DILocation(line: 83, column: 50, scope: !6)
!90 = !DILocation(line: 85, column: 50, scope: !6)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 86, column: 53, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !94)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !100)
!104 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !100)
!105 = !DILocation(line: 89, column: 25, scope: !6)
!106 = !DILocation(line: 89, column: 37, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 37, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 95, column: 25, scope: !6)
!118 = !DILocation(line: 95, column: 37, scope: !6)
!119 = !DILocation(line: 96, column: 26, scope: !6)
!120 = !DILocation(line: 96, column: 38, scope: !6)
!121 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 105, column: 46, scope: !6)
!123 = !DILocation(line: 106, column: 17, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !125)
!125 = !DILocation(line: 108, column: 46, scope: !6)
!126 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !127)
!127 = !DILocation(line: 107, column: 46, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !125)
!129 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !125)
!130 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !125)
!131 = !DILocation(line: 110, column: 24, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !133)
!133 = !DILocation(line: 113, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !133)
!137 = !DILocation(line: 116, column: 25, scope: !6)
!138 = !DILocation(line: 103, column: 43, scope: !6)
!139 = !DILocation(line: 103, column: 36, scope: !6)
!140 = !DILocation(line: 103, column: 53, scope: !6)
!141 = !DILocation(line: 103, column: 115, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 120, column: 36, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !145)
!145 = !DILocation(line: 123, column: 46, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !145)
!149 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !150)
!150 = !DILocation(line: 125, column: 46, scope: !6)
!151 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !150)
!152 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !150)
!153 = !DILocation(line: 127, column: 25, scope: !6)
!154 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !150)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 129, column: 30, scope: !6)
!158 = !DILocation(line: 129, column: 54, scope: !6)
!159 = !DILocation(line: 130, column: 30, scope: !6)
!160 = !DILocation(line: 130, column: 54, scope: !6)
!161 = !DILocation(line: 131, column: 30, scope: !6)
!162 = !DILocation(line: 131, column: 54, scope: !6)
!163 = !DILocation(line: 98, column: 31, scope: !6)
!164 = !DILocation(line: 99, column: 29, scope: !6)
!165 = !DILocation(line: 103, column: 63, scope: !6)
!166 = !DILocation(line: 97, column: 4, scope: !6)
