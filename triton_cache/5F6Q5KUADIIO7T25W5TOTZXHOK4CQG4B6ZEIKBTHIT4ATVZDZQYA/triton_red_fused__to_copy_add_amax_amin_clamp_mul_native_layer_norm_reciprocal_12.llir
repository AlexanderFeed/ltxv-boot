; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 6, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 3, !dbg !11
  %21 = and i32 %20, 63, !dbg !11
  %22 = or disjoint i32 %21, %18, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = shl i32 %19, 3, !dbg !14
  %25 = and i32 %24, 56, !dbg !14
  %26 = or disjoint i32 %25, 4, !dbg !14
  %27 = sext i32 %22 to i64, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !15
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %23) #5, !dbg !16
  %37 = bitcast i16 %36 to bfloat, !dbg !16
  %38 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !17
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !18
  %47 = bitcast i16 %46 to bfloat, !dbg !18
  %48 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %37, 0xR0000, !dbg !20
  %49 = select i1 %.inv, bfloat 0xR0000, bfloat %37, !dbg !20
  %50 = fpext bfloat %49 to float, !dbg !20
  %51 = fsub float 0.000000e+00, %50, !dbg !24
  %.inv5 = fcmp ole bfloat %47, 0xR0000, !dbg !25
  %52 = select i1 %.inv5, bfloat 0xR0000, bfloat %47, !dbg !25
  %53 = fpext bfloat %52 to float, !dbg !25
  %54 = fcmp ogt float %51, %53, !dbg !27
  %55 = fcmp uno float %51, 0.000000e+00, !dbg !29
  %56 = or i1 %55, %54, !dbg !30
  %57 = select i1 %56, float %51, float %53, !dbg !31
  %58 = fmul float %57, 0x3F80204080000000, !dbg !32
  %59 = fcmp ogt float %58, 0x3EE4F8B580000000, !dbg !33
  %60 = fcmp uno float %58, 0.000000e+00, !dbg !35
  %61 = or i1 %59, %60, !dbg !36
  %62 = select i1 %61, float %58, float 0x3EE4F8B580000000, !dbg !37
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %63 = zext nneg i32 %26 to i64, !dbg !38
  %64 = zext nneg i32 %25 to i64, !dbg !38
  %65 = insertelement <8 x i1> poison, i1 %23, i64 0, !dbg !39
  %66 = shufflevector <8 x i1> %65, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %67 = insertelement <8 x float> poison, float %62, i64 0, !dbg !40
  %68 = shufflevector <8 x float> %67, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  br label %69, !dbg !38

69:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %329, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %330, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %331, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %86 = phi <8 x float> [ zeroinitializer, %16 ], [ %315, %._crit_edge ]
  %87 = or disjoint i64 %indvars.iv, %64, !dbg !41
  %88 = or disjoint i64 %indvars.iv, %63, !dbg !41
  %89 = trunc nuw nsw i64 %87 to i32, !dbg !42
  %90 = add i32 %48, %89, !dbg !42
  %91 = trunc nuw nsw i64 %88 to i32, !dbg !42
  %92 = add i32 %48, %91, !dbg !42
  %93 = sext i32 %90 to i64, !dbg !43
  %94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %93, !dbg !43
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %94, i1 %23) #5, !dbg !44
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !44
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !44
  %98 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !44
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !44
  %100 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !44
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !44
  %102 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !44
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !44
  %104 = add nuw nsw i64 %87, 6144, !dbg !45
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %88, !dbg !46
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %105, i1 true) #5, !dbg !47
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !47
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !47
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !47
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !47
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !47
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !47
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !47
  %116 = getelementptr bfloat, ptr addrspace(1) %2, i64 %104, !dbg !48
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %116, i1 true) #5, !dbg !49
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !49
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !49
  %120 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !49
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !49
  %122 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !49
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !49
  %124 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !49
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !49
  %126 = getelementptr i32, ptr addrspace(1) %3, i64 %93, !dbg !50
  %127 = sext i32 %92 to i64, !dbg !50
  %128 = getelementptr i32, ptr addrspace(1) %3, i64 %127, !dbg !50
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %23) #5, !dbg !51
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !51
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !51
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !51
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !51
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %23) #5, !dbg !51
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !51
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !51
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !51
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !51
  %139 = getelementptr bfloat, ptr addrspace(1) %6, i64 %87, !dbg !52
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %139, i1 true) #5, !dbg !53
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !53
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !53
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !53
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !53
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !53
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !53
  %147 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !53
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !53
  %149 = getelementptr bfloat, ptr addrspace(1) %7, i64 %87, !dbg !54
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %149, i1 true) #5, !dbg !55
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !55
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !55
  %153 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !55
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !55
  %155 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !55
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !55
  %157 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !55
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !55
  %159 = shufflevector <2 x bfloat> %97, <2 x bfloat> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %160 = shufflevector <2 x bfloat> %101, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %161 = shufflevector <8 x bfloat> %159, <8 x bfloat> %160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %162 = shufflevector <2 x bfloat> %101, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %163 = shufflevector <8 x bfloat> %161, <8 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %164 = shufflevector <2 x bfloat> %103, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %165 = shufflevector <8 x bfloat> %163, <8 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %166 = shufflevector <2 x bfloat> %103, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %167 = shufflevector <8 x bfloat> %165, <8 x bfloat> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %168 = fpext <8 x bfloat> %167 to <8 x float>, !dbg !56
  %169 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !47
  %170 = insertelement <8 x i32> %169, i32 %108, i64 1, !dbg !47
  %171 = insertelement <8 x i32> %170, i32 %109, i64 2, !dbg !47
  %172 = insertelement <8 x i32> %171, i32 %110, i64 3, !dbg !47
  %173 = insertelement <8 x i32> %172, i32 %112, i64 4, !dbg !47
  %174 = insertelement <8 x i32> %173, i32 %113, i64 5, !dbg !47
  %175 = insertelement <8 x i32> %174, i32 %114, i64 6, !dbg !47
  %176 = insertelement <8 x i32> %175, i32 %115, i64 7, !dbg !47
  %177 = bitcast <8 x i32> %176 to <8 x float>, !dbg !47
  %178 = shufflevector <2 x bfloat> %119, <2 x bfloat> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %179 = shufflevector <2 x bfloat> %123, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %180 = shufflevector <8 x bfloat> %178, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !57
  %181 = shufflevector <2 x bfloat> %123, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %182 = shufflevector <8 x bfloat> %180, <8 x bfloat> %181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !57
  %183 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %184 = shufflevector <8 x bfloat> %182, <8 x bfloat> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !57
  %185 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %186 = shufflevector <8 x bfloat> %184, <8 x bfloat> %185, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !57
  %187 = fpext <8 x bfloat> %186 to <8 x float>, !dbg !57
  %188 = shufflevector <2 x bfloat> %142, <2 x bfloat> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %189 = shufflevector <2 x bfloat> %146, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %190 = shufflevector <8 x bfloat> %188, <8 x bfloat> %189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !58
  %191 = shufflevector <2 x bfloat> %146, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %192 = shufflevector <8 x bfloat> %190, <8 x bfloat> %191, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !58
  %193 = shufflevector <2 x bfloat> %148, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %194 = shufflevector <8 x bfloat> %192, <8 x bfloat> %193, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !58
  %195 = shufflevector <2 x bfloat> %148, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %196 = shufflevector <8 x bfloat> %194, <8 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !58
  %197 = fpext <8 x bfloat> %196 to <8 x float>, !dbg !58
  %198 = shufflevector <2 x bfloat> %152, <2 x bfloat> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %199 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %200 = shufflevector <8 x bfloat> %198, <8 x bfloat> %199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !59
  %201 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %202 = shufflevector <8 x bfloat> %200, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !59
  %203 = shufflevector <2 x bfloat> %158, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %204 = shufflevector <8 x bfloat> %202, <8 x bfloat> %203, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !59
  %205 = shufflevector <2 x bfloat> %158, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %206 = shufflevector <8 x bfloat> %204, <8 x bfloat> %205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !59
  %207 = fpext <8 x bfloat> %206 to <8 x float>, !dbg !59
  %208 = fadd <8 x float> %177, %187, !dbg !60
  %209 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !61
  %210 = insertelement <8 x i32> %209, i32 %131, i64 1, !dbg !61
  %211 = insertelement <8 x i32> %210, i32 %132, i64 2, !dbg !61
  %212 = insertelement <8 x i32> %211, i32 %133, i64 3, !dbg !61
  %213 = insertelement <8 x i32> %212, i32 %135, i64 4, !dbg !61
  %214 = insertelement <8 x i32> %213, i32 %136, i64 5, !dbg !61
  %215 = insertelement <8 x i32> %214, i32 %137, i64 6, !dbg !61
  %216 = insertelement <8 x i32> %215, i32 %138, i64 7, !dbg !61
  %217 = sitofp <8 x i32> %216 to <8 x float>, !dbg !61
  %218 = fmul <8 x float> %68, %217, !dbg !40
  %219 = fmul <8 x float> %218, %197, !dbg !62
  %220 = fadd <8 x float> %219, %207, !dbg !63
  %221 = fmul <8 x float> %208, %220, !dbg !64
  %222 = fadd <8 x float> %221, %168, !dbg !65
  %223 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %223, label %._crit_edge, label %224, !dbg !67

224:                                              ; preds = %69
  %225 = fsub <8 x float> %222, %86, !dbg !69
  %226 = extractelement <8 x float> %225, i64 0, !dbg !69
  %227 = fsub <8 x float> %222, %86, !dbg !69
  %228 = extractelement <8 x float> %227, i64 1, !dbg !69
  %229 = fsub <8 x float> %222, %86, !dbg !69
  %230 = extractelement <8 x float> %229, i64 2, !dbg !69
  %231 = fsub <8 x float> %222, %86, !dbg !69
  %232 = extractelement <8 x float> %231, i64 3, !dbg !69
  %233 = fsub <8 x float> %222, %86, !dbg !69
  %234 = extractelement <8 x float> %233, i64 4, !dbg !69
  %235 = fsub <8 x float> %222, %86, !dbg !69
  %236 = extractelement <8 x float> %235, i64 5, !dbg !69
  %237 = fsub <8 x float> %222, %86, !dbg !69
  %238 = extractelement <8 x float> %237, i64 6, !dbg !69
  %239 = fsub <8 x float> %222, %86, !dbg !69
  %240 = extractelement <8 x float> %239, i64 7, !dbg !69
  %241 = fadd float %70, 1.000000e+00, !dbg !70
  %242 = fadd float %71, 1.000000e+00, !dbg !70
  %243 = fadd float %72, 1.000000e+00, !dbg !70
  %244 = fadd float %73, 1.000000e+00, !dbg !70
  %245 = fadd float %74, 1.000000e+00, !dbg !70
  %246 = fadd float %75, 1.000000e+00, !dbg !70
  %247 = fadd float %76, 1.000000e+00, !dbg !70
  %248 = fadd float %77, 1.000000e+00, !dbg !70
  %249 = tail call float @llvm.nvvm.div.full(float %226, float %241), !dbg !71
  %250 = tail call float @llvm.nvvm.div.full(float %228, float %242), !dbg !71
  %251 = tail call float @llvm.nvvm.div.full(float %230, float %243), !dbg !71
  %252 = tail call float @llvm.nvvm.div.full(float %232, float %244), !dbg !71
  %253 = tail call float @llvm.nvvm.div.full(float %234, float %245), !dbg !71
  %254 = tail call float @llvm.nvvm.div.full(float %236, float %246), !dbg !71
  %255 = tail call float @llvm.nvvm.div.full(float %238, float %247), !dbg !71
  %256 = tail call float @llvm.nvvm.div.full(float %240, float %248), !dbg !71
  %257 = insertelement <8 x float> poison, float %249, i64 0, !dbg !72
  %258 = insertelement <8 x float> %257, float %250, i64 1, !dbg !72
  %259 = insertelement <8 x float> %258, float %251, i64 2, !dbg !72
  %260 = insertelement <8 x float> %259, float %252, i64 3, !dbg !72
  %261 = insertelement <8 x float> %260, float %253, i64 4, !dbg !72
  %262 = insertelement <8 x float> %261, float %254, i64 5, !dbg !72
  %263 = insertelement <8 x float> %262, float %255, i64 6, !dbg !72
  %264 = insertelement <8 x float> %263, float %256, i64 7, !dbg !72
  %265 = fadd <8 x float> %86, %264, !dbg !72
  %266 = fsub <8 x float> %222, %265, !dbg !73
  %267 = fsub <8 x float> %222, %265, !dbg !73
  %268 = fsub <8 x float> %222, %265, !dbg !73
  %269 = fsub <8 x float> %222, %265, !dbg !73
  %270 = fsub <8 x float> %222, %265, !dbg !73
  %271 = fsub <8 x float> %222, %265, !dbg !73
  %272 = fsub <8 x float> %222, %265, !dbg !73
  %273 = fsub <8 x float> %222, %265, !dbg !73
  %274 = fmul <8 x float> %225, %266, !dbg !74
  %275 = extractelement <8 x float> %274, i64 0, !dbg !74
  %276 = fmul <8 x float> %227, %267, !dbg !74
  %277 = extractelement <8 x float> %276, i64 1, !dbg !74
  %278 = fmul <8 x float> %229, %268, !dbg !74
  %279 = extractelement <8 x float> %278, i64 2, !dbg !74
  %280 = fmul <8 x float> %231, %269, !dbg !74
  %281 = extractelement <8 x float> %280, i64 3, !dbg !74
  %282 = fmul <8 x float> %233, %270, !dbg !74
  %283 = extractelement <8 x float> %282, i64 4, !dbg !74
  %284 = fmul <8 x float> %235, %271, !dbg !74
  %285 = extractelement <8 x float> %284, i64 5, !dbg !74
  %286 = fmul <8 x float> %237, %272, !dbg !74
  %287 = extractelement <8 x float> %286, i64 6, !dbg !74
  %288 = fmul <8 x float> %239, %273, !dbg !74
  %289 = extractelement <8 x float> %288, i64 7, !dbg !74
  %290 = fadd float %78, %275, !dbg !75
  %291 = fadd float %79, %277, !dbg !75
  %292 = fadd float %80, %279, !dbg !75
  %293 = fadd float %81, %281, !dbg !75
  %294 = fadd float %82, %283, !dbg !75
  %295 = fadd float %83, %285, !dbg !75
  %296 = fadd float %84, %287, !dbg !75
  %297 = fadd float %85, %289, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %69, %224
  %298 = phi float [ %290, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %299 = phi float [ %291, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %300 = phi float [ %292, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %301 = phi float [ %293, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %302 = phi float [ %294, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %303 = phi float [ %295, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %304 = phi float [ %296, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %305 = phi float [ %297, %224 ], [ 0.000000e+00, %69 ], !dbg !68
  %306 = phi float [ %241, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %307 = phi float [ %242, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %308 = phi float [ %243, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %309 = phi float [ %244, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %310 = phi float [ %245, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %311 = phi float [ %246, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %312 = phi float [ %247, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %313 = phi float [ %248, %224 ], [ 1.000000e+00, %69 ], !dbg !68
  %314 = phi <8 x float> [ %265, %224 ], [ %222, %69 ]
  %315 = select <8 x i1> %66, <8 x float> %314, <8 x float> %86, !dbg !39
  %316 = select i1 %23, float %298, float %78, !dbg !76
  %317 = select i1 %23, float %299, float %79, !dbg !76
  %318 = select i1 %23, float %300, float %80, !dbg !76
  %319 = select i1 %23, float %301, float %81, !dbg !76
  %320 = select i1 %23, float %302, float %82, !dbg !76
  %321 = select i1 %23, float %303, float %83, !dbg !76
  %322 = select i1 %23, float %304, float %84, !dbg !76
  %323 = select i1 %23, float %305, float %85, !dbg !76
  %324 = select i1 %23, float %306, float %70, !dbg !77
  %325 = select i1 %23, float %307, float %71, !dbg !77
  %326 = select i1 %23, float %308, float %72, !dbg !77
  %327 = select i1 %23, float %309, float %73, !dbg !77
  %328 = select i1 %23, float %310, float %74, !dbg !77
  %329 = select i1 %23, float %311, float %75, !dbg !77
  %330 = select i1 %23, float %312, float %76, !dbg !77
  %331 = select i1 %23, float %313, float %77, !dbg !77
  %332 = getelementptr bfloat, ptr addrspace(1) %8, i64 %93, !dbg !78
  %333 = extractelement <8 x float> %222, i64 0, !dbg !79
  %334 = fptrunc float %333 to bfloat, !dbg !79
  %335 = extractelement <8 x float> %222, i64 1, !dbg !79
  %336 = fptrunc float %335 to bfloat, !dbg !79
  %337 = extractelement <8 x float> %222, i64 2, !dbg !79
  %338 = fptrunc float %337 to bfloat, !dbg !79
  %339 = extractelement <8 x float> %222, i64 3, !dbg !79
  %340 = fptrunc float %339 to bfloat, !dbg !79
  %341 = extractelement <8 x float> %222, i64 4, !dbg !79
  %342 = fptrunc float %341 to bfloat, !dbg !79
  %343 = extractelement <8 x float> %222, i64 5, !dbg !79
  %344 = fptrunc float %343 to bfloat, !dbg !79
  %345 = extractelement <8 x float> %222, i64 6, !dbg !79
  %346 = fptrunc float %345 to bfloat, !dbg !79
  %347 = extractelement <8 x float> %222, i64 7, !dbg !79
  %348 = fptrunc float %347 to bfloat, !dbg !79
  %349 = insertelement <2 x bfloat> poison, bfloat %334, i64 0, !dbg !79
  %350 = insertelement <2 x bfloat> %349, bfloat %336, i64 1, !dbg !79
  %351 = bitcast <2 x bfloat> %350 to i32, !dbg !79
  %352 = insertelement <2 x bfloat> poison, bfloat %338, i64 0, !dbg !79
  %353 = insertelement <2 x bfloat> %352, bfloat %340, i64 1, !dbg !79
  %354 = bitcast <2 x bfloat> %353 to i32, !dbg !79
  %355 = insertelement <2 x bfloat> poison, bfloat %342, i64 0, !dbg !79
  %356 = insertelement <2 x bfloat> %355, bfloat %344, i64 1, !dbg !79
  %357 = bitcast <2 x bfloat> %356 to i32, !dbg !79
  %358 = insertelement <2 x bfloat> poison, bfloat %346, i64 0, !dbg !79
  %359 = insertelement <2 x bfloat> %358, bfloat %348, i64 1, !dbg !79
  %360 = bitcast <2 x bfloat> %359 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %354, i32 %357, i32 %360, ptr addrspace(1) %332, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !38
  %361 = icmp samesign ult i64 %indvars.iv, 3008, !dbg !38
  br i1 %361, label %69, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %362 = and i32 %19, 63, !dbg !11
  %363 = or disjoint i32 %18, %362, !dbg !12
  %364 = icmp slt i32 %363, 512, !dbg !13
  %365 = extractelement <8 x float> %315, i64 0, !dbg !80
  %366 = extractelement <8 x float> %315, i64 1, !dbg !80
  %367 = fsub float %366, %365, !dbg !80
  %368 = fadd float %324, %325, !dbg !83
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !84
  %370 = tail call float @llvm.nvvm.div.full(float %325, float %368), !dbg !85
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !86
  %372 = fmul float %367, %371, !dbg !87
  %373 = fadd float %365, %372, !dbg !88
  %374 = fadd float %316, %317, !dbg !89
  %375 = fmul float %367, %367, !dbg !90
  %376 = fmul float %375, %324, !dbg !91
  %377 = fmul float %376, %371, !dbg !92
  %378 = fadd float %374, %377, !dbg !93
  %379 = extractelement <8 x float> %315, i64 2, !dbg !80
  %380 = fsub float %379, %373, !dbg !80
  %381 = fadd float %326, %368, !dbg !83
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !84
  %383 = tail call float @llvm.nvvm.div.full(float %326, float %381), !dbg !85
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !86
  %385 = fmul float %384, %380, !dbg !87
  %386 = fadd float %373, %385, !dbg !88
  %387 = fadd float %318, %378, !dbg !89
  %388 = fmul float %380, %380, !dbg !90
  %389 = fmul float %368, %388, !dbg !91
  %390 = fmul float %384, %389, !dbg !92
  %391 = fadd float %387, %390, !dbg !93
  %392 = extractelement <8 x float> %315, i64 3, !dbg !80
  %393 = fsub float %392, %386, !dbg !80
  %394 = fadd float %327, %381, !dbg !83
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !84
  %396 = tail call float @llvm.nvvm.div.full(float %327, float %394), !dbg !85
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !86
  %398 = fmul float %397, %393, !dbg !87
  %399 = fadd float %386, %398, !dbg !88
  %400 = fadd float %319, %391, !dbg !89
  %401 = fmul float %393, %393, !dbg !90
  %402 = fmul float %381, %401, !dbg !91
  %403 = fmul float %397, %402, !dbg !92
  %404 = fadd float %400, %403, !dbg !93
  %405 = extractelement <8 x float> %315, i64 4, !dbg !80
  %406 = fsub float %405, %399, !dbg !80
  %407 = fadd float %328, %394, !dbg !83
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !84
  %409 = tail call float @llvm.nvvm.div.full(float %328, float %407), !dbg !85
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !86
  %411 = fmul float %410, %406, !dbg !87
  %412 = fadd float %399, %411, !dbg !88
  %413 = fadd float %320, %404, !dbg !89
  %414 = fmul float %406, %406, !dbg !90
  %415 = fmul float %394, %414, !dbg !91
  %416 = fmul float %410, %415, !dbg !92
  %417 = fadd float %413, %416, !dbg !93
  %418 = extractelement <8 x float> %315, i64 5, !dbg !80
  %419 = fsub float %418, %412, !dbg !80
  %420 = fadd float %329, %407, !dbg !83
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !84
  %422 = tail call float @llvm.nvvm.div.full(float %329, float %420), !dbg !85
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !86
  %424 = fmul float %423, %419, !dbg !87
  %425 = fadd float %412, %424, !dbg !88
  %426 = fadd float %321, %417, !dbg !89
  %427 = fmul float %419, %419, !dbg !90
  %428 = fmul float %407, %427, !dbg !91
  %429 = fmul float %423, %428, !dbg !92
  %430 = fadd float %426, %429, !dbg !93
  %431 = extractelement <8 x float> %315, i64 6, !dbg !80
  %432 = fsub float %431, %425, !dbg !80
  %433 = fadd float %330, %420, !dbg !83
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !84
  %435 = tail call float @llvm.nvvm.div.full(float %330, float %433), !dbg !85
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !86
  %437 = fmul float %436, %432, !dbg !87
  %438 = fadd float %425, %437, !dbg !88
  %439 = fadd float %322, %430, !dbg !89
  %440 = fmul float %432, %432, !dbg !90
  %441 = fmul float %420, %440, !dbg !91
  %442 = fmul float %436, %441, !dbg !92
  %443 = fadd float %439, %442, !dbg !93
  %444 = extractelement <8 x float> %315, i64 7, !dbg !80
  %445 = fsub float %444, %438, !dbg !80
  %446 = fadd float %331, %433, !dbg !83
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !84
  %448 = tail call float @llvm.nvvm.div.full(float %331, float %446), !dbg !85
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !86
  %450 = fmul float %449, %445, !dbg !87
  %451 = fadd float %438, %450, !dbg !88
  %452 = fadd float %323, %443, !dbg !89
  %453 = fmul float %445, %445, !dbg !90
  %454 = fmul float %433, %453, !dbg !91
  %455 = fmul float %449, %454, !dbg !92
  %456 = fadd float %452, %455, !dbg !93
  %457 = bitcast float %451 to i32, !dbg !94
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 4, i32 31), !dbg !94
  %459 = bitcast i32 %458 to float, !dbg !94
  %460 = bitcast float %456 to i32, !dbg !94
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 4, i32 31), !dbg !94
  %462 = bitcast i32 %461 to float, !dbg !94
  %463 = bitcast float %446 to i32, !dbg !94
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 4, i32 31), !dbg !94
  %465 = bitcast i32 %464 to float, !dbg !94
  %466 = fsub float %459, %451, !dbg !80
  %467 = fadd float %446, %465, !dbg !83
  %468 = fcmp oeq float %467, 0.000000e+00, !dbg !84
  %469 = tail call float @llvm.nvvm.div.full(float %465, float %467), !dbg !85
  %470 = select i1 %468, float 0.000000e+00, float %469, !dbg !86
  %471 = fmul float %470, %466, !dbg !87
  %472 = fadd float %451, %471, !dbg !88
  %473 = fadd float %456, %462, !dbg !89
  %474 = fmul float %466, %466, !dbg !90
  %475 = fmul float %446, %474, !dbg !91
  %476 = fmul float %470, %475, !dbg !92
  %477 = fadd float %473, %476, !dbg !93
  %478 = bitcast float %472 to i32, !dbg !94
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 2, i32 31), !dbg !94
  %480 = bitcast i32 %479 to float, !dbg !94
  %481 = bitcast float %477 to i32, !dbg !94
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 2, i32 31), !dbg !94
  %483 = bitcast i32 %482 to float, !dbg !94
  %484 = bitcast float %467 to i32, !dbg !94
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 2, i32 31), !dbg !94
  %486 = bitcast i32 %485 to float, !dbg !94
  %487 = fsub float %480, %472, !dbg !80
  %488 = fadd float %467, %486, !dbg !83
  %489 = fcmp oeq float %488, 0.000000e+00, !dbg !84
  %490 = tail call float @llvm.nvvm.div.full(float %486, float %488), !dbg !85
  %491 = select i1 %489, float 0.000000e+00, float %490, !dbg !86
  %492 = fmul float %491, %487, !dbg !87
  %493 = fadd float %472, %492, !dbg !88
  %494 = fadd float %477, %483, !dbg !89
  %495 = fmul float %487, %487, !dbg !90
  %496 = fmul float %467, %495, !dbg !91
  %497 = fmul float %491, %496, !dbg !92
  %498 = fadd float %494, %497, !dbg !93
  %499 = bitcast float %493 to i32, !dbg !94
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 1, i32 31), !dbg !94
  %501 = bitcast i32 %500 to float, !dbg !94
  %502 = bitcast float %498 to i32, !dbg !94
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 1, i32 31), !dbg !94
  %504 = bitcast i32 %503 to float, !dbg !94
  %505 = bitcast float %488 to i32, !dbg !94
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 1, i32 31), !dbg !94
  %507 = bitcast i32 %506 to float, !dbg !94
  %508 = fsub float %501, %493, !dbg !80
  %509 = fadd float %488, %507, !dbg !83
  %510 = fcmp oeq float %509, 0.000000e+00, !dbg !84
  %511 = tail call float @llvm.nvvm.div.full(float %507, float %509), !dbg !85
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !86
  %513 = fmul float %512, %508, !dbg !87
  %514 = fadd float %493, %513, !dbg !88
  %515 = fadd float %498, %504, !dbg !89
  %516 = fmul float %508, %508, !dbg !90
  %517 = fmul float %488, %516, !dbg !91
  %518 = fmul float %512, %517, !dbg !92
  %519 = fadd float %515, %518, !dbg !93
  %520 = tail call float @llvm.nvvm.div.full(float %519, float 3.072000e+03), !dbg !95
  %521 = fadd float %520, 0x3EB0C6F7A0000000, !dbg !96
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %527 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %529 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i41 = icmp eq i32 %529, 0, !dbg !97
  br i1 %.not.i41, label %532, label %530, !dbg !97

530:                                              ; preds = %__nv_rsqrtf.exit
  %531 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %521), !dbg !97
  br label %__nv_rsqrtf.exit43, !dbg !97

532:                                              ; preds = %__nv_rsqrtf.exit
  %533 = tail call float @llvm.nvvm.rsqrt.approx.f(float %521), !dbg !97
  br label %__nv_rsqrtf.exit43, !dbg !97

__nv_rsqrtf.exit43:                               ; preds = %530, %532
  %.0.i42 = phi float [ %531, %530 ], [ %533, %532 ], !dbg !97
  %invariant.gep48 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !98
  %534 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !99
  %535 = shufflevector <2 x i1> %534, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !99
  %536 = insertelement <2 x float> poison, float %.0.i42, i64 0, !dbg !100
  %537 = shufflevector <2 x float> %536, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %538 = insertelement <2 x float> poison, float %514, i64 0, !dbg !101
  %539 = shufflevector <2 x float> %538, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %540 = insertelement <4 x float> poison, float %.0.i42, i64 0, !dbg !100
  %541 = shufflevector <4 x float> %540, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !100
  %542 = insertelement <4 x float> poison, float %514, i64 0, !dbg !101
  %543 = shufflevector <4 x float> %542, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !101
  %544 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !99
  %545 = shufflevector <4 x i1> %544, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !99
  %invariant.op = or i32 %25, 12292, !dbg !98
  br label %546, !dbg !98

546:                                              ; preds = %__nv_rsqrtf.exit43, %546
  %indvars.iv89 = phi i64 [ 0, %__nv_rsqrtf.exit43 ], [ %indvars.iv.next90, %546 ]
  %547 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit43 ], [ %692, %546 ]
  %548 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit43 ], [ %693, %546 ]
  %549 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit43 ], [ %637, %546 ]
  %550 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit43 ], [ %700, %546 ]
  %551 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit43 ], [ %665, %546 ]
  %552 = or disjoint i64 %indvars.iv89, %64, !dbg !102
  %553 = or disjoint i64 %indvars.iv89, %63, !dbg !102
  %554 = trunc nuw nsw i64 %552 to i32, !dbg !103
  %555 = add i32 %48, %554, !dbg !103
  %556 = sext i32 %555 to i64, !dbg !104
  %557 = getelementptr bfloat, ptr addrspace(1) %8, i64 %556, !dbg !104
  %558 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %557, i1 %23) #5, !dbg !105
  %559 = extractvalue { i32, i32, i32, i32 } %558, 0, !dbg !105
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !105
  %561 = extractvalue { i32, i32, i32, i32 } %558, 1, !dbg !105
  %562 = bitcast i32 %561 to <2 x bfloat>, !dbg !105
  %563 = extractvalue { i32, i32, i32, i32 } %558, 2, !dbg !105
  %564 = bitcast i32 %563 to <2 x bfloat>, !dbg !105
  %565 = extractvalue { i32, i32, i32, i32 } %558, 3, !dbg !105
  %566 = bitcast i32 %565 to <2 x bfloat>, !dbg !105
  %567 = or disjoint i64 %552, 12288, !dbg !106
  %568 = trunc nuw nsw i64 %indvars.iv89 to i32
  %.reass.reass.reass = or i32 %568, %invariant.op
  %569 = getelementptr float, ptr addrspace(1) %1, i64 %567, !dbg !107
  %570 = zext nneg i32 %.reass.reass.reass to i64, !dbg !107
  %571 = getelementptr float, ptr addrspace(1) %1, i64 %570, !dbg !107
  %572 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %569, i1 true) #5, !dbg !108
  %573 = extractvalue { i32, i32, i32, i32 } %572, 0, !dbg !108
  %574 = extractvalue { i32, i32, i32, i32 } %572, 1, !dbg !108
  %575 = extractvalue { i32, i32, i32, i32 } %572, 2, !dbg !108
  %576 = extractvalue { i32, i32, i32, i32 } %572, 3, !dbg !108
  %577 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %571, i1 true) #5, !dbg !108
  %578 = extractvalue { i32, i32, i32, i32 } %577, 0, !dbg !108
  %579 = extractvalue { i32, i32, i32, i32 } %577, 1, !dbg !108
  %580 = extractvalue { i32, i32, i32, i32 } %577, 2, !dbg !108
  %581 = extractvalue { i32, i32, i32, i32 } %577, 3, !dbg !108
  %582 = getelementptr bfloat, ptr addrspace(1) %2, i64 %567, !dbg !109
  %583 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %582, i1 true) #5, !dbg !110
  %584 = extractvalue { i32, i32, i32, i32 } %583, 0, !dbg !110
  %585 = bitcast i32 %584 to <2 x bfloat>, !dbg !110
  %586 = extractvalue { i32, i32, i32, i32 } %583, 1, !dbg !110
  %587 = bitcast i32 %586 to <2 x bfloat>, !dbg !110
  %588 = extractvalue { i32, i32, i32, i32 } %583, 2, !dbg !110
  %589 = bitcast i32 %588 to <2 x bfloat>, !dbg !110
  %590 = extractvalue { i32, i32, i32, i32 } %583, 3, !dbg !110
  %591 = bitcast i32 %590 to <2 x bfloat>, !dbg !110
  %592 = add nuw nsw i64 %552, 9216, !dbg !111
  %593 = getelementptr float, ptr addrspace(1) %1, i64 %592, !dbg !112
  %gep49 = getelementptr float, ptr addrspace(1) %invariant.gep48, i64 %553, !dbg !112
  %594 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %593, i1 true) #5, !dbg !113
  %595 = extractvalue { i32, i32, i32, i32 } %594, 0, !dbg !113
  %596 = extractvalue { i32, i32, i32, i32 } %594, 1, !dbg !113
  %597 = extractvalue { i32, i32, i32, i32 } %594, 2, !dbg !113
  %598 = extractvalue { i32, i32, i32, i32 } %594, 3, !dbg !113
  %599 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep49, i1 true) #5, !dbg !113
  %600 = extractvalue { i32, i32, i32, i32 } %599, 0, !dbg !113
  %601 = extractvalue { i32, i32, i32, i32 } %599, 1, !dbg !113
  %602 = extractvalue { i32, i32, i32, i32 } %599, 2, !dbg !113
  %603 = extractvalue { i32, i32, i32, i32 } %599, 3, !dbg !113
  %604 = getelementptr bfloat, ptr addrspace(1) %2, i64 %592, !dbg !114
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %604, i1 true) #5, !dbg !115
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !115
  %607 = bitcast i32 %606 to <2 x bfloat>, !dbg !115
  %608 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !115
  %609 = bitcast i32 %608 to <2 x bfloat>, !dbg !115
  %610 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !115
  %611 = bitcast i32 %610 to <2 x bfloat>, !dbg !115
  %612 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !115
  %613 = bitcast i32 %612 to <2 x bfloat>, !dbg !115
  %614 = fcmp uno <2 x float> %549, zeroinitializer, !dbg !116
  %615 = fcmp uno float %547, 0.000000e+00, !dbg !116
  %616 = fcmp uno float %548, 0.000000e+00, !dbg !116
  %617 = fcmp uno <4 x float> %551, zeroinitializer, !dbg !116
  %618 = fpext <2 x bfloat> %560 to <2 x float>, !dbg !118
  %619 = insertelement <2 x i32> poison, i32 %573, i64 0, !dbg !108
  %620 = insertelement <2 x i32> %619, i32 %574, i64 1, !dbg !108
  %621 = bitcast <2 x i32> %620 to <2 x float>, !dbg !108
  %622 = fpext <2 x bfloat> %585 to <2 x float>, !dbg !119
  %623 = insertelement <2 x i32> poison, i32 %595, i64 0, !dbg !113
  %624 = insertelement <2 x i32> %623, i32 %596, i64 1, !dbg !113
  %625 = bitcast <2 x i32> %624 to <2 x float>, !dbg !113
  %626 = fpext <2 x bfloat> %607 to <2 x float>, !dbg !120
  %627 = fsub <2 x float> %618, %539, !dbg !101
  %628 = fmul <2 x float> %537, %627, !dbg !100
  %629 = fadd <2 x float> %621, %622, !dbg !121
  %630 = fadd <2 x float> %629, splat (float 1.000000e+00), !dbg !122
  %631 = fmul <2 x float> %628, %630, !dbg !123
  %632 = fadd <2 x float> %625, %626, !dbg !124
  %633 = fadd <2 x float> %631, %632, !dbg !125
  %634 = fcmp olt <2 x float> %549, %633, !dbg !126
  %635 = or <2 x i1> %614, %634, !dbg !127
  %636 = select <2 x i1> %635, <2 x float> %549, <2 x float> %633, !dbg !128
  %637 = select <2 x i1> %535, <2 x float> %636, <2 x float> %549, !dbg !99
  %638 = fcmp uno <8 x float> %550, zeroinitializer, !dbg !129
  %639 = shufflevector <2 x bfloat> %564, <2 x bfloat> %566, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !118
  %640 = fpext <4 x bfloat> %639 to <4 x float>, !dbg !118
  %641 = insertelement <4 x i32> poison, i32 %578, i64 0, !dbg !108
  %642 = insertelement <4 x i32> %641, i32 %579, i64 1, !dbg !108
  %643 = insertelement <4 x i32> %642, i32 %580, i64 2, !dbg !108
  %644 = insertelement <4 x i32> %643, i32 %581, i64 3, !dbg !108
  %645 = bitcast <4 x i32> %644 to <4 x float>, !dbg !108
  %646 = shufflevector <2 x bfloat> %589, <2 x bfloat> %591, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !119
  %647 = fpext <4 x bfloat> %646 to <4 x float>, !dbg !119
  %648 = insertelement <4 x i32> poison, i32 %600, i64 0, !dbg !113
  %649 = insertelement <4 x i32> %648, i32 %601, i64 1, !dbg !113
  %650 = insertelement <4 x i32> %649, i32 %602, i64 2, !dbg !113
  %651 = insertelement <4 x i32> %650, i32 %603, i64 3, !dbg !113
  %652 = bitcast <4 x i32> %651 to <4 x float>, !dbg !113
  %653 = shufflevector <2 x bfloat> %611, <2 x bfloat> %613, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %654 = fpext <4 x bfloat> %653 to <4 x float>, !dbg !120
  %655 = fsub <4 x float> %640, %543, !dbg !101
  %656 = fmul <4 x float> %541, %655, !dbg !100
  %657 = fadd <4 x float> %645, %647, !dbg !121
  %658 = fadd <4 x float> %657, splat (float 1.000000e+00), !dbg !122
  %659 = fmul <4 x float> %656, %658, !dbg !123
  %660 = fadd <4 x float> %652, %654, !dbg !124
  %661 = fadd <4 x float> %659, %660, !dbg !125
  %662 = fcmp olt <4 x float> %551, %661, !dbg !126
  %663 = or <4 x i1> %617, %662, !dbg !127
  %664 = select <4 x i1> %663, <4 x float> %551, <4 x float> %661, !dbg !128
  %665 = select <4 x i1> %545, <4 x float> %664, <4 x float> %551, !dbg !99
  %666 = getelementptr bfloat, ptr addrspace(1) %9, i64 %556, !dbg !131
  %667 = fptrunc <2 x float> %633 to <2 x bfloat>, !dbg !132
  %668 = fpext <2 x bfloat> %562 to <2 x float>, !dbg !118
  %669 = insertelement <2 x i32> poison, i32 %575, i64 0, !dbg !108
  %670 = insertelement <2 x i32> %669, i32 %576, i64 1, !dbg !108
  %671 = bitcast <2 x i32> %670 to <2 x float>, !dbg !108
  %672 = fpext <2 x bfloat> %587 to <2 x float>, !dbg !119
  %673 = insertelement <2 x i32> poison, i32 %597, i64 0, !dbg !113
  %674 = insertelement <2 x i32> %673, i32 %598, i64 1, !dbg !113
  %675 = bitcast <2 x i32> %674 to <2 x float>, !dbg !113
  %676 = fpext <2 x bfloat> %609 to <2 x float>, !dbg !120
  %677 = fsub <2 x float> %668, %539, !dbg !101
  %678 = fmul <2 x float> %537, %677, !dbg !100
  %679 = fadd <2 x float> %671, %672, !dbg !121
  %680 = fadd <2 x float> %679, splat (float 1.000000e+00), !dbg !122
  %681 = fmul <2 x float> %678, %680, !dbg !123
  %682 = fadd <2 x float> %675, %676, !dbg !124
  %683 = fadd <2 x float> %681, %682, !dbg !125
  %684 = extractelement <2 x float> %683, i64 0, !dbg !128
  %685 = fcmp olt float %547, %684, !dbg !126
  %686 = extractelement <2 x float> %683, i64 1, !dbg !128
  %687 = fcmp olt float %548, %686, !dbg !126
  %688 = or i1 %615, %685, !dbg !127
  %689 = or i1 %616, %687, !dbg !127
  %690 = select i1 %688, float %547, float %684, !dbg !128
  %691 = select i1 %689, float %548, float %686, !dbg !128
  %692 = select i1 %23, float %690, float %547, !dbg !99
  %693 = select i1 %23, float %691, float %548, !dbg !99
  %694 = shufflevector <2 x float> %633, <2 x float> %683, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !133
  %695 = shufflevector <4 x float> %661, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !133
  %696 = shufflevector <8 x float> %694, <8 x float> %695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !133
  %697 = fcmp ogt <8 x float> %550, %696, !dbg !133
  %698 = or <8 x i1> %638, %697, !dbg !134
  %699 = select <8 x i1> %698, <8 x float> %550, <8 x float> %696, !dbg !135
  %700 = select <8 x i1> %66, <8 x float> %699, <8 x float> %550, !dbg !136
  %701 = fptrunc <2 x float> %683 to <2 x bfloat>, !dbg !132
  %702 = extractelement <4 x float> %661, i64 0, !dbg !132
  %703 = fptrunc float %702 to bfloat, !dbg !132
  %704 = extractelement <4 x float> %661, i64 1, !dbg !132
  %705 = fptrunc float %704 to bfloat, !dbg !132
  %706 = extractelement <4 x float> %661, i64 2, !dbg !132
  %707 = fptrunc float %706 to bfloat, !dbg !132
  %708 = extractelement <4 x float> %661, i64 3, !dbg !132
  %709 = fptrunc float %708 to bfloat, !dbg !132
  %710 = bitcast <2 x bfloat> %667 to i32, !dbg !132
  %711 = bitcast <2 x bfloat> %701 to i32, !dbg !132
  %712 = insertelement <2 x bfloat> poison, bfloat %703, i64 0, !dbg !132
  %713 = insertelement <2 x bfloat> %712, bfloat %705, i64 1, !dbg !132
  %714 = bitcast <2 x bfloat> %713 to i32, !dbg !132
  %715 = insertelement <2 x bfloat> poison, bfloat %707, i64 0, !dbg !132
  %716 = insertelement <2 x bfloat> %715, bfloat %709, i64 1, !dbg !132
  %717 = bitcast <2 x bfloat> %716 to i32, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %710, i32 %711, i32 %714, i32 %717, ptr addrspace(1) %666, i1 %23) #5, !dbg !132
  %indvars.iv.next90 = add nuw nsw i64 %indvars.iv89, 64, !dbg !98
  %718 = icmp samesign ult i64 %indvars.iv89, 3008, !dbg !98
  br i1 %718, label %546, label %719, !dbg !98

719:                                              ; preds = %546
  %720 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %637, <2 x i32> <i32 0, i32 2>, !dbg !137
  %721 = fcmp olt <2 x float> %720, %637, !dbg !137
  %722 = fcmp uno <2 x float> %720, %637, !dbg !137
  %shift = shufflevector <2 x i1> %721, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %723 = or <2 x i1> %shift, %722, !dbg !139
  %724 = extractelement <2 x i1> %723, i64 0, !dbg !139
  %725 = extractelement <2 x float> %637, i64 0, !dbg !140
  %726 = extractelement <2 x float> %637, i64 1, !dbg !140
  %727 = select i1 %724, float %725, float %726, !dbg !140
  %728 = fcmp olt float %727, %692, !dbg !137
  %729 = fcmp uno float %727, 0.000000e+00, !dbg !141
  %730 = or i1 %728, %729, !dbg !139
  %731 = select i1 %730, float %727, float %692, !dbg !140
  %732 = fcmp olt float %731, %693, !dbg !137
  %733 = fcmp uno float %731, 0.000000e+00, !dbg !141
  %734 = or i1 %732, %733, !dbg !139
  %735 = select i1 %734, float %731, float %693, !dbg !140
  %736 = extractelement <4 x float> %665, i64 0, !dbg !137
  %737 = fcmp olt float %735, %736, !dbg !137
  %738 = fcmp uno float %735, 0.000000e+00, !dbg !141
  %739 = or i1 %737, %738, !dbg !139
  %740 = select i1 %739, float %735, float %736, !dbg !140
  %741 = extractelement <4 x float> %665, i64 1, !dbg !137
  %742 = fcmp olt float %740, %741, !dbg !137
  %743 = fcmp uno float %740, 0.000000e+00, !dbg !141
  %744 = or i1 %742, %743, !dbg !139
  %745 = select i1 %744, float %740, float %741, !dbg !140
  %746 = extractelement <4 x float> %665, i64 2, !dbg !137
  %747 = fcmp olt float %745, %746, !dbg !137
  %748 = fcmp uno float %745, 0.000000e+00, !dbg !141
  %749 = or i1 %747, %748, !dbg !139
  %750 = select i1 %749, float %745, float %746, !dbg !140
  %751 = extractelement <4 x float> %665, i64 3, !dbg !137
  %752 = fcmp olt float %750, %751, !dbg !137
  %753 = fcmp uno float %750, 0.000000e+00, !dbg !141
  %754 = or i1 %752, %753, !dbg !139
  %755 = select i1 %754, float %750, float %751, !dbg !140
  %756 = bitcast float %755 to i32, !dbg !142
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 4, i32 31), !dbg !142
  %758 = bitcast i32 %757 to float, !dbg !142
  %759 = fcmp olt float %755, %758, !dbg !137
  %760 = fcmp uno float %755, 0.000000e+00, !dbg !141
  %761 = or i1 %760, %759, !dbg !139
  %762 = select i1 %761, float %755, float %758, !dbg !140
  %763 = bitcast float %762 to i32, !dbg !142
  %764 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %763, i32 2, i32 31), !dbg !142
  %765 = bitcast i32 %764 to float, !dbg !142
  %766 = fcmp olt float %762, %765, !dbg !137
  %767 = fcmp uno float %762, 0.000000e+00, !dbg !141
  %768 = or i1 %766, %767, !dbg !139
  %769 = select i1 %768, float %762, float %765, !dbg !140
  %770 = bitcast float %769 to i32, !dbg !142
  %771 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %770, i32 1, i32 31), !dbg !142
  %772 = bitcast i32 %771 to float, !dbg !142
  %773 = fcmp olt float %769, %772, !dbg !137
  %774 = fcmp uno float %769, 0.000000e+00, !dbg !141
  %775 = or i1 %773, %774, !dbg !139
  %776 = select i1 %775, float %769, float %772, !dbg !140
  %777 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21, !dbg !143
  %778 = bitcast float %776 to <1 x i32>, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %777, <1 x i32> %778, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %779 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %362, !dbg !143
  %780 = load float, ptr addrspace(3) %779, align 4, !dbg !143
  %781 = extractelement <8 x float> %700, i64 0, !dbg !144
  %782 = extractelement <8 x float> %700, i64 1, !dbg !144
  %783 = fcmp ogt float %781, %782, !dbg !144
  %784 = fcmp uno float %781, 0.000000e+00, !dbg !146
  %785 = or i1 %783, %784, !dbg !147
  %786 = select i1 %785, float %781, float %782, !dbg !148
  %787 = extractelement <8 x float> %700, i64 2, !dbg !144
  %788 = fcmp ogt float %786, %787, !dbg !144
  %789 = fcmp uno float %786, 0.000000e+00, !dbg !146
  %790 = or i1 %788, %789, !dbg !147
  %791 = select i1 %790, float %786, float %787, !dbg !148
  %792 = extractelement <8 x float> %700, i64 3, !dbg !144
  %793 = fcmp ogt float %791, %792, !dbg !144
  %794 = fcmp uno float %791, 0.000000e+00, !dbg !146
  %795 = or i1 %793, %794, !dbg !147
  %796 = select i1 %795, float %791, float %792, !dbg !148
  %797 = extractelement <8 x float> %700, i64 4, !dbg !144
  %798 = fcmp ogt float %796, %797, !dbg !144
  %799 = fcmp uno float %796, 0.000000e+00, !dbg !146
  %800 = or i1 %798, %799, !dbg !147
  %801 = select i1 %800, float %796, float %797, !dbg !148
  %802 = extractelement <8 x float> %700, i64 5, !dbg !144
  %803 = fcmp ogt float %801, %802, !dbg !144
  %804 = fcmp uno float %801, 0.000000e+00, !dbg !146
  %805 = or i1 %803, %804, !dbg !147
  %806 = select i1 %805, float %801, float %802, !dbg !148
  %807 = extractelement <8 x float> %700, i64 6, !dbg !144
  %808 = fcmp ogt float %806, %807, !dbg !144
  %809 = fcmp uno float %806, 0.000000e+00, !dbg !146
  %810 = or i1 %808, %809, !dbg !147
  %811 = select i1 %810, float %806, float %807, !dbg !148
  %812 = extractelement <8 x float> %700, i64 7, !dbg !144
  %813 = fcmp ogt float %811, %812, !dbg !144
  %814 = fcmp uno float %811, 0.000000e+00, !dbg !146
  %815 = or i1 %813, %814, !dbg !147
  %816 = select i1 %815, float %811, float %812, !dbg !148
  %817 = bitcast float %816 to i32, !dbg !149
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 4, i32 31), !dbg !149
  %819 = bitcast i32 %818 to float, !dbg !149
  %820 = fcmp ogt float %816, %819, !dbg !144
  %821 = fcmp uno float %816, 0.000000e+00, !dbg !146
  %822 = or i1 %821, %820, !dbg !147
  %823 = select i1 %822, float %816, float %819, !dbg !148
  %824 = bitcast float %823 to i32, !dbg !149
  %825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %824, i32 2, i32 31), !dbg !149
  %826 = bitcast i32 %825 to float, !dbg !149
  %827 = fcmp ogt float %823, %826, !dbg !144
  %828 = fcmp uno float %823, 0.000000e+00, !dbg !146
  %829 = or i1 %827, %828, !dbg !147
  %830 = select i1 %829, float %823, float %826, !dbg !148
  %831 = bitcast float %830 to i32, !dbg !149
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 1, i32 31), !dbg !149
  %833 = bitcast i32 %832 to float, !dbg !149
  %834 = fcmp ogt float %830, %833, !dbg !144
  %835 = fcmp uno float %830, 0.000000e+00, !dbg !146
  %836 = or i1 %834, %835, !dbg !147
  %837 = select i1 %836, float %830, float %833, !dbg !148
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %838 = bitcast float %837 to <1 x i32>, !dbg !150
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %777, <1 x i32> %838, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %839 = load float, ptr addrspace(3) %779, align 4, !dbg !150
  %840 = sext i32 %363 to i64, !dbg !151
  %841 = getelementptr bfloat, ptr addrspace(1) %10, i64 %840, !dbg !151
  %842 = fptrunc float %780 to bfloat, !dbg !143
  %843 = and i32 %19, 448, !dbg !143
  %844 = icmp eq i32 %843, 0, !dbg !143
  %845 = bitcast bfloat %842 to i16, !dbg !143
  %846 = and i1 %844, %364, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %845, ptr addrspace(1) %841, i1 %846) #5, !dbg !143
  %847 = getelementptr bfloat, ptr addrspace(1) %11, i64 %840, !dbg !152
  %848 = fptrunc float %839 to bfloat, !dbg !150
  %849 = bitcast bfloat %848 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %849, ptr addrspace(1) %847, i1 %846) #5, !dbg !150
  %.inv6 = fcmp oge float %776, 0.000000e+00, !dbg !153
  %850 = select i1 %.inv6, float 0.000000e+00, float %776, !dbg !153
  %851 = fsub float 0.000000e+00, %850, !dbg !155
  %.inv7 = fcmp ole float %837, 0.000000e+00, !dbg !156
  %852 = select i1 %.inv7, float 0.000000e+00, float %837, !dbg !156
  %853 = fcmp ogt float %851, %852, !dbg !158
  %854 = fcmp uno float %851, 0.000000e+00, !dbg !160
  %855 = or i1 %854, %853, !dbg !161
  %856 = select i1 %855, float %851, float %852, !dbg !162
  %857 = fmul float %856, 0x3F80204080000000, !dbg !163
  %858 = fcmp ogt float %857, 0x3EE4F8B580000000, !dbg !164
  %859 = fcmp uno float %857, 0.000000e+00, !dbg !166
  %860 = or i1 %858, %859, !dbg !167
  %861 = select i1 %860, float %857, float 0x3EE4F8B580000000, !dbg !168
  %862 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %861), !dbg !169
  %863 = or disjoint i32 %48, %25
  br label %864, !dbg !170

864:                                              ; preds = %719, %864
  %indvars.iv91 = phi i64 [ 0, %719 ], [ %indvars.iv.next92, %864 ]
  %865 = trunc nuw nsw i64 %indvars.iv91 to i32, !dbg !171
  %866 = add i32 %863, %865, !dbg !171
  %867 = sext i32 %866 to i64, !dbg !172
  %868 = getelementptr bfloat, ptr addrspace(1) %9, i64 %867, !dbg !172
  %869 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %868, i1 %23) #5, !dbg !173
  %870 = extractvalue { i32, i32, i32, i32 } %869, 0, !dbg !173
  %871 = bitcast i32 %870 to <2 x bfloat>, !dbg !173
  %872 = extractvalue { i32, i32, i32, i32 } %869, 1, !dbg !173
  %873 = bitcast i32 %872 to <2 x bfloat>, !dbg !173
  %874 = extractvalue { i32, i32, i32, i32 } %869, 2, !dbg !173
  %875 = bitcast i32 %874 to <2 x bfloat>, !dbg !173
  %876 = extractvalue { i32, i32, i32, i32 } %869, 3, !dbg !173
  %877 = bitcast i32 %876 to <2 x bfloat>, !dbg !173
  %878 = extractelement <2 x bfloat> %871, i64 0, !dbg !173
  %879 = extractelement <2 x bfloat> %871, i64 1, !dbg !173
  %880 = extractelement <2 x bfloat> %873, i64 0, !dbg !173
  %881 = extractelement <2 x bfloat> %873, i64 1, !dbg !173
  %882 = extractelement <2 x bfloat> %875, i64 0, !dbg !173
  %883 = extractelement <2 x bfloat> %875, i64 1, !dbg !173
  %884 = extractelement <2 x bfloat> %877, i64 0, !dbg !173
  %885 = extractelement <2 x bfloat> %877, i64 1, !dbg !173
  %886 = fpext bfloat %878 to float, !dbg !174
  %887 = fpext bfloat %879 to float, !dbg !174
  %888 = fpext bfloat %880 to float, !dbg !174
  %889 = fpext bfloat %881 to float, !dbg !174
  %890 = fpext bfloat %882 to float, !dbg !174
  %891 = fpext bfloat %883 to float, !dbg !174
  %892 = fpext bfloat %884 to float, !dbg !174
  %893 = fpext bfloat %885 to float, !dbg !174
  %894 = fmul float %862, %886, !dbg !175
  %895 = fmul float %862, %887, !dbg !175
  %896 = fmul float %862, %888, !dbg !175
  %897 = fmul float %862, %889, !dbg !175
  %898 = fmul float %862, %890, !dbg !175
  %899 = fmul float %862, %891, !dbg !175
  %900 = fmul float %862, %892, !dbg !175
  %901 = fmul float %862, %893, !dbg !175
  %902 = tail call float @llvm.nvvm.round.f(float %894) #5, !dbg !176
  %903 = tail call float @llvm.nvvm.round.f(float %895) #5, !dbg !176
  %904 = tail call float @llvm.nvvm.round.f(float %896) #5, !dbg !176
  %905 = tail call float @llvm.nvvm.round.f(float %897) #5, !dbg !176
  %906 = tail call float @llvm.nvvm.round.f(float %898) #5, !dbg !176
  %907 = tail call float @llvm.nvvm.round.f(float %899) #5, !dbg !176
  %908 = tail call float @llvm.nvvm.round.f(float %900) #5, !dbg !176
  %909 = tail call float @llvm.nvvm.round.f(float %901) #5, !dbg !176
  %910 = insertelement <4 x float> poison, float %902, i64 0, !dbg !177
  %911 = insertelement <4 x float> %910, float %903, i64 1, !dbg !177
  %912 = insertelement <4 x float> %911, float %904, i64 2, !dbg !177
  %913 = insertelement <4 x float> %912, float %905, i64 3, !dbg !177
  %914 = fcmp ogt <4 x float> %913, splat (float -1.270000e+02), !dbg !177
  %915 = fcmp uno <4 x float> %913, zeroinitializer, !dbg !179
  %916 = or <4 x i1> %914, %915, !dbg !180
  %917 = select <4 x i1> %916, <4 x float> %913, <4 x float> splat (float -1.270000e+02), !dbg !181
  %918 = fcmp olt <4 x float> %917, splat (float 1.270000e+02), !dbg !182
  %919 = fcmp uno <4 x float> %917, zeroinitializer, !dbg !184
  %920 = or <4 x i1> %918, %919, !dbg !185
  %921 = fptosi <4 x float> %917 to <4 x i8>, !dbg !186
  %922 = select <4 x i1> %920, <4 x i8> %921, <4 x i8> splat (i8 127), !dbg !187
  %923 = insertelement <4 x float> poison, float %906, i64 0, !dbg !177
  %924 = insertelement <4 x float> %923, float %907, i64 1, !dbg !177
  %925 = insertelement <4 x float> %924, float %908, i64 2, !dbg !177
  %926 = insertelement <4 x float> %925, float %909, i64 3, !dbg !177
  %927 = fcmp ogt <4 x float> %926, splat (float -1.270000e+02), !dbg !177
  %928 = fcmp uno <4 x float> %926, zeroinitializer, !dbg !179
  %929 = or <4 x i1> %927, %928, !dbg !180
  %930 = select <4 x i1> %929, <4 x float> %926, <4 x float> splat (float -1.270000e+02), !dbg !181
  %931 = fcmp olt <4 x float> %930, splat (float 1.270000e+02), !dbg !182
  %932 = fcmp uno <4 x float> %930, zeroinitializer, !dbg !184
  %933 = or <4 x i1> %931, %932, !dbg !185
  %934 = fptosi <4 x float> %930 to <4 x i8>, !dbg !186
  %935 = select <4 x i1> %933, <4 x i8> %934, <4 x i8> splat (i8 127), !dbg !187
  %936 = getelementptr i8, ptr addrspace(1) %12, i64 %867, !dbg !188
  %937 = bitcast <4 x i8> %922 to i32, !dbg !189
  %938 = bitcast <4 x i8> %935 to i32, !dbg !189
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %937, i32 %938, ptr addrspace(1) %936, i1 %23) #5, !dbg !189
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 64, !dbg !170
  %939 = icmp samesign ult i64 %indvars.iv91, 3008, !dbg !170
  br i1 %939, label %864, label %940, !dbg !170

940:                                              ; preds = %864
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 60, column: 23, scope: !6)
!41 = !DILocation(line: 35, column: 31, scope: !6)
!42 = !DILocation(line: 40, column: 41, scope: !6)
!43 = !DILocation(line: 40, column: 34, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 41, column: 48, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 42, column: 48, scope: !6)
!50 = !DILocation(line: 43, column: 34, scope: !6)
!51 = !DILocation(line: 43, column: 51, scope: !6)
!52 = !DILocation(line: 44, column: 35, scope: !6)
!53 = !DILocation(line: 44, column: 42, scope: !6)
!54 = !DILocation(line: 45, column: 35, scope: !6)
!55 = !DILocation(line: 45, column: 42, scope: !6)
!56 = !DILocation(line: 40, column: 113, scope: !6)
!57 = !DILocation(line: 42, column: 101, scope: !6)
!58 = !DILocation(line: 44, column: 95, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 217, column: 21, scope: !81, inlinedAt: !82)
!81 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 218, column: 28, scope: !81, inlinedAt: !82)
!84 = !DILocation(line: 219, column: 39, scope: !81, inlinedAt: !82)
!85 = !DILocation(line: 219, column: 60, scope: !81, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 49, scope: !81, inlinedAt: !82)
!87 = !DILocation(line: 221, column: 25, scope: !81, inlinedAt: !82)
!88 = !DILocation(line: 221, column: 17, scope: !81, inlinedAt: !82)
!89 = !DILocation(line: 222, column: 15, scope: !81, inlinedAt: !82)
!90 = !DILocation(line: 222, column: 30, scope: !81, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 38, scope: !81, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 49, scope: !81, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 22, scope: !81, inlinedAt: !82)
!94 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 110, column: 50, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 43, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 87, column: 50, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 50, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 89, column: 49, scope: !6)
!114 = !DILocation(line: 90, column: 35, scope: !6)
!115 = !DILocation(line: 90, column: 49, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !117)
!127 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !117)
!128 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !117)
!129 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 111, column: 47, scope: !6)
!131 = !DILocation(line: 113, column: 29, scope: !6)
!132 = !DILocation(line: 113, column: 53, scope: !6)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !130)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !130)
!136 = !DILocation(line: 112, column: 50, scope: !6)
!137 = !DILocation(line: 94, column: 15, scope: !81, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 96, column: 16, scope: !81, inlinedAt: !138)
!140 = !DILocation(line: 97, column: 29, scope: !81, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 21, scope: !81, inlinedAt: !138)
!142 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !81, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !81, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !81, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !81, inlinedAt: !145)
!149 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 140, column: 24, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
