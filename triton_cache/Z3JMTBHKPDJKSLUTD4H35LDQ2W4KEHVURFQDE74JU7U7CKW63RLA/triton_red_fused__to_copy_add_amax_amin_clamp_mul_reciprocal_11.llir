; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 3, !dbg !11
  %14 = and i32 %13, 120, !dbg !11
  %15 = and i32 %13, 4088, !dbg !11
  %16 = and i32 %10, 384, !dbg !12
  %17 = icmp ne i32 %16, 384, !dbg !12
  %18 = shl i32 %8, 7, !dbg !13
  %19 = lshr i32 %15, 7, !dbg !14
  %20 = mul nuw nsw i32 %19, 526336, !dbg !15
  %21 = add i32 %20, %18, !dbg !16
  %22 = or disjoint i32 %21, %14, !dbg !17
  %23 = sext i32 %22 to i64, !dbg !18
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = and i1 %9, %17, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %25) #4, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = extractelement <2 x bfloat> %28, i64 0, !dbg !20
  %36 = extractelement <2 x bfloat> %28, i64 1, !dbg !20
  %37 = extractelement <2 x bfloat> %30, i64 0, !dbg !20
  %38 = extractelement <2 x bfloat> %30, i64 1, !dbg !20
  %39 = extractelement <2 x bfloat> %32, i64 0, !dbg !20
  %40 = extractelement <2 x bfloat> %32, i64 1, !dbg !20
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !20
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !20
  %43 = fpext bfloat %35 to float, !dbg !21
  %44 = fpext bfloat %36 to float, !dbg !21
  %45 = fpext bfloat %37 to float, !dbg !21
  %46 = fpext bfloat %38 to float, !dbg !21
  %47 = fpext bfloat %39 to float, !dbg !21
  %48 = fpext bfloat %40 to float, !dbg !21
  %49 = fpext bfloat %41 to float, !dbg !21
  %50 = fpext bfloat %42 to float, !dbg !21
  %51 = select i1 %25, float %43, float 0x7FF0000000000000, !dbg !22
  %52 = select i1 %25, float %44, float 0x7FF0000000000000, !dbg !22
  %53 = select i1 %25, float %45, float 0x7FF0000000000000, !dbg !22
  %54 = select i1 %25, float %46, float 0x7FF0000000000000, !dbg !22
  %55 = select i1 %25, float %47, float 0x7FF0000000000000, !dbg !22
  %56 = select i1 %25, float %48, float 0x7FF0000000000000, !dbg !22
  %57 = select i1 %25, float %49, float 0x7FF0000000000000, !dbg !22
  %58 = select i1 %25, float %50, float 0x7FF0000000000000, !dbg !22
  %59 = select i1 %25, float %43, float 0xFFF0000000000000, !dbg !23
  %60 = select i1 %25, float %44, float 0xFFF0000000000000, !dbg !23
  %61 = select i1 %25, float %45, float 0xFFF0000000000000, !dbg !23
  %62 = select i1 %25, float %46, float 0xFFF0000000000000, !dbg !23
  %63 = select i1 %25, float %47, float 0xFFF0000000000000, !dbg !23
  %64 = select i1 %25, float %48, float 0xFFF0000000000000, !dbg !23
  %65 = select i1 %25, float %49, float 0xFFF0000000000000, !dbg !23
  %66 = select i1 %25, float %50, float 0xFFF0000000000000, !dbg !23
  %67 = fcmp olt float %51, %52, !dbg !24
  %68 = fcmp uno float %51, 0.000000e+00, !dbg !29
  %69 = or i1 %67, %68, !dbg !30
  %70 = select i1 %69, float %51, float %52, !dbg !31
  %71 = fcmp olt float %70, %53, !dbg !24
  %72 = fcmp uno float %70, 0.000000e+00, !dbg !29
  %73 = or i1 %71, %72, !dbg !30
  %74 = select i1 %73, float %70, float %53, !dbg !31
  %75 = fcmp olt float %74, %54, !dbg !24
  %76 = fcmp uno float %74, 0.000000e+00, !dbg !29
  %77 = or i1 %75, %76, !dbg !30
  %78 = select i1 %77, float %74, float %54, !dbg !31
  %79 = fcmp olt float %78, %55, !dbg !24
  %80 = fcmp uno float %78, 0.000000e+00, !dbg !29
  %81 = or i1 %79, %80, !dbg !30
  %82 = select i1 %81, float %78, float %55, !dbg !31
  %83 = fcmp olt float %82, %56, !dbg !24
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !29
  %85 = or i1 %83, %84, !dbg !30
  %86 = select i1 %85, float %82, float %56, !dbg !31
  %87 = fcmp olt float %86, %57, !dbg !24
  %88 = fcmp uno float %86, 0.000000e+00, !dbg !29
  %89 = or i1 %87, %88, !dbg !30
  %90 = select i1 %89, float %86, float %57, !dbg !31
  %91 = fcmp olt float %90, %58, !dbg !24
  %92 = fcmp uno float %90, 0.000000e+00, !dbg !29
  %93 = or i1 %91, %92, !dbg !30
  %94 = select i1 %93, float %90, float %58, !dbg !31
  %95 = bitcast float %94 to i32, !dbg !32
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = fcmp olt float %94, %97, !dbg !24
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !29
  %100 = or i1 %98, %99, !dbg !30
  %101 = select i1 %100, float %94, float %97, !dbg !31
  %102 = bitcast float %101 to i32, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = fcmp olt float %101, %104, !dbg !24
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !29
  %107 = or i1 %105, %106, !dbg !30
  %108 = select i1 %107, float %101, float %104, !dbg !31
  %109 = bitcast float %108 to i32, !dbg !32
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = fcmp olt float %108, %111, !dbg !24
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !29
  %114 = or i1 %112, %113, !dbg !30
  %115 = select i1 %114, float %108, float %111, !dbg !31
  %116 = bitcast float %115 to i32, !dbg !32
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = fcmp olt float %115, %118, !dbg !24
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !29
  %121 = or i1 %119, %120, !dbg !30
  %122 = select i1 %121, float %115, float %118, !dbg !31
  %123 = bitcast float %122 to i32, !dbg !32
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !32
  %125 = bitcast i32 %124 to float, !dbg !32
  %126 = fcmp olt float %122, %125, !dbg !24
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !29
  %128 = or i1 %126, %127, !dbg !30
  %129 = and i32 %12, 15, !dbg !32
  %130 = icmp eq i32 %11, 0, !dbg !32
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !32
  %132 = select i1 %128, i32 %123, i32 %124, !dbg !31
  %133 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %133, i1 %130) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %134 = icmp slt i32 %10, 16, !dbg !32
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %136 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !32
  %137 = bitcast i32 %136 to float, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fcmp olt float %137, %139, !dbg !24
  %141 = fcmp uno float %137, 0.000000e+00, !dbg !29
  %142 = or i1 %141, %140, !dbg !30
  %143 = select i1 %142, float %137, float %139, !dbg !31
  %144 = bitcast float %143 to i32, !dbg !32
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = fcmp olt float %143, %146, !dbg !24
  %148 = fcmp uno float %143, 0.000000e+00, !dbg !29
  %149 = or i1 %147, %148, !dbg !30
  %150 = select i1 %149, float %143, float %146, !dbg !31
  %151 = bitcast float %150 to i32, !dbg !32
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !32
  %153 = bitcast i32 %152 to float, !dbg !32
  %154 = fcmp olt float %150, %153, !dbg !24
  %155 = fcmp uno float %150, 0.000000e+00, !dbg !29
  %156 = or i1 %154, %155, !dbg !30
  %157 = select i1 %156, float %150, float %153, !dbg !31
  %158 = bitcast float %157 to i32, !dbg !32
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = fcmp olt float %157, %160, !dbg !24
  %162 = fcmp uno float %157, 0.000000e+00, !dbg !29
  %163 = or i1 %161, %162, !dbg !30
  %164 = and i32 %10, 15, !dbg !32
  %165 = icmp eq i32 %164, 0, !dbg !32
  %166 = and i1 %134, %165, !dbg !32
  %167 = select i1 %163, i32 %158, i32 %159, !dbg !31
  %168 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %168, i1 %166) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %169 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %170 = fcmp ogt float %59, %60, !dbg !35
  %171 = fcmp uno float %59, 0.000000e+00, !dbg !36
  %172 = or i1 %170, %171, !dbg !37
  %173 = select i1 %172, float %59, float %60, !dbg !38
  %174 = fcmp ogt float %173, %61, !dbg !35
  %175 = fcmp uno float %173, 0.000000e+00, !dbg !36
  %176 = or i1 %174, %175, !dbg !37
  %177 = select i1 %176, float %173, float %61, !dbg !38
  %178 = fcmp ogt float %177, %62, !dbg !35
  %179 = fcmp uno float %177, 0.000000e+00, !dbg !36
  %180 = or i1 %178, %179, !dbg !37
  %181 = select i1 %180, float %177, float %62, !dbg !38
  %182 = fcmp ogt float %181, %63, !dbg !35
  %183 = fcmp uno float %181, 0.000000e+00, !dbg !36
  %184 = or i1 %182, %183, !dbg !37
  %185 = select i1 %184, float %181, float %63, !dbg !38
  %186 = fcmp ogt float %185, %64, !dbg !35
  %187 = fcmp uno float %185, 0.000000e+00, !dbg !36
  %188 = or i1 %186, %187, !dbg !37
  %189 = select i1 %188, float %185, float %64, !dbg !38
  %190 = fcmp ogt float %189, %65, !dbg !35
  %191 = fcmp uno float %189, 0.000000e+00, !dbg !36
  %192 = or i1 %190, %191, !dbg !37
  %193 = select i1 %192, float %189, float %65, !dbg !38
  %194 = fcmp ogt float %193, %66, !dbg !35
  %195 = fcmp uno float %193, 0.000000e+00, !dbg !36
  %196 = or i1 %194, %195, !dbg !37
  %197 = select i1 %196, float %193, float %66, !dbg !38
  %198 = bitcast float %197 to i32, !dbg !33
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = fcmp ogt float %197, %200, !dbg !35
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !36
  %203 = or i1 %201, %202, !dbg !37
  %204 = select i1 %203, float %197, float %200, !dbg !38
  %205 = bitcast float %204 to i32, !dbg !33
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !33
  %207 = bitcast i32 %206 to float, !dbg !33
  %208 = fcmp ogt float %204, %207, !dbg !35
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !36
  %210 = or i1 %208, %209, !dbg !37
  %211 = select i1 %210, float %204, float %207, !dbg !38
  %212 = bitcast float %211 to i32, !dbg !33
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !33
  %214 = bitcast i32 %213 to float, !dbg !33
  %215 = fcmp ogt float %211, %214, !dbg !35
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !36
  %217 = or i1 %215, %216, !dbg !37
  %218 = select i1 %217, float %211, float %214, !dbg !38
  %219 = bitcast float %218 to i32, !dbg !33
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !33
  %221 = bitcast i32 %220 to float, !dbg !33
  %222 = fcmp ogt float %218, %221, !dbg !35
  %223 = fcmp uno float %218, 0.000000e+00, !dbg !36
  %224 = or i1 %222, %223, !dbg !37
  %225 = select i1 %224, float %218, float %221, !dbg !38
  %226 = bitcast float %225 to i32, !dbg !33
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !33
  %228 = bitcast i32 %227 to float, !dbg !33
  %229 = fcmp ogt float %225, %228, !dbg !35
  %230 = fcmp uno float %225, 0.000000e+00, !dbg !36
  %231 = or i1 %229, %230, !dbg !37
  %232 = select i1 %231, i32 %226, i32 %227, !dbg !38
  %233 = insertelement <1 x i32> poison, i32 %232, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %233, i1 %130) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !33
  %235 = bitcast i32 %234 to float, !dbg !33
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !33
  %237 = bitcast i32 %236 to float, !dbg !33
  %238 = fcmp ogt float %235, %237, !dbg !35
  %239 = fcmp uno float %235, 0.000000e+00, !dbg !36
  %240 = or i1 %239, %238, !dbg !37
  %241 = select i1 %240, float %235, float %237, !dbg !38
  %242 = bitcast float %241 to i32, !dbg !33
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !33
  %244 = bitcast i32 %243 to float, !dbg !33
  %245 = fcmp ogt float %241, %244, !dbg !35
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !36
  %247 = or i1 %245, %246, !dbg !37
  %248 = select i1 %247, float %241, float %244, !dbg !38
  %249 = bitcast float %248 to i32, !dbg !33
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !33
  %251 = bitcast i32 %250 to float, !dbg !33
  %252 = fcmp ogt float %248, %251, !dbg !35
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !36
  %254 = or i1 %252, %253, !dbg !37
  %255 = select i1 %254, float %248, float %251, !dbg !38
  %256 = bitcast float %255 to i32, !dbg !33
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !33
  %258 = bitcast i32 %257 to float, !dbg !33
  %259 = fcmp ogt float %255, %258, !dbg !35
  %260 = fcmp uno float %255, 0.000000e+00, !dbg !36
  %261 = or i1 %259, %260, !dbg !37
  %262 = select i1 %261, i32 %256, i32 %257, !dbg !38
  %263 = insertelement <1 x i32> poison, i32 %262, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %263, i1 %166) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %264 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %265 = sext i32 %8 to i64, !dbg !39
  %266 = getelementptr bfloat, ptr addrspace(1) %1, i64 %265, !dbg !39
  %267 = fptrunc float %169 to bfloat, !dbg !40
  %268 = and i32 %10, 511, !dbg !40
  %269 = icmp eq i32 %268, 0, !dbg !40
  %270 = bitcast bfloat %267 to i16, !dbg !40
  %271 = and i1 %9, %269, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %270, ptr addrspace(1) %266, i1 %271) #4, !dbg !40
  %272 = getelementptr bfloat, ptr addrspace(1) %2, i64 %265, !dbg !41
  %273 = fptrunc float %264 to bfloat, !dbg !42
  %274 = bitcast bfloat %273 to i16, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %274, ptr addrspace(1) %272, i1 %271) #4, !dbg !42
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %25) #4, !dbg !43
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !43
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !43
  %278 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !43
  %279 = bitcast i32 %278 to <2 x bfloat>, !dbg !43
  %280 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !43
  %281 = bitcast i32 %280 to <2 x bfloat>, !dbg !43
  %282 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !43
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !43
  %284 = extractelement <2 x bfloat> %277, i64 0, !dbg !43
  %285 = extractelement <2 x bfloat> %277, i64 1, !dbg !43
  %286 = extractelement <2 x bfloat> %279, i64 0, !dbg !43
  %287 = extractelement <2 x bfloat> %279, i64 1, !dbg !43
  %288 = extractelement <2 x bfloat> %281, i64 0, !dbg !43
  %289 = extractelement <2 x bfloat> %281, i64 1, !dbg !43
  %290 = extractelement <2 x bfloat> %283, i64 0, !dbg !43
  %291 = extractelement <2 x bfloat> %283, i64 1, !dbg !43
  %292 = fpext bfloat %284 to float, !dbg !44
  %293 = fpext bfloat %285 to float, !dbg !44
  %294 = fpext bfloat %286 to float, !dbg !44
  %295 = fpext bfloat %287 to float, !dbg !44
  %296 = fpext bfloat %288 to float, !dbg !44
  %297 = fpext bfloat %289 to float, !dbg !44
  %298 = fpext bfloat %290 to float, !dbg !44
  %299 = fpext bfloat %291 to float, !dbg !44
  %.inv = fcmp oge float %169, 0.000000e+00, !dbg !45
  %300 = select i1 %.inv, float 0.000000e+00, float %169, !dbg !45
  %301 = fsub float 0.000000e+00, %300, !dbg !47
  %.inv1 = fcmp ole float %264, 0.000000e+00, !dbg !48
  %302 = select i1 %.inv1, float 0.000000e+00, float %264, !dbg !48
  %303 = fcmp ogt float %301, %302, !dbg !50
  %304 = fcmp uno float %301, 0.000000e+00, !dbg !52
  %305 = or i1 %304, %303, !dbg !53
  %306 = select i1 %305, float %301, float %302, !dbg !54
  %307 = fmul float %306, 0x3F80204080000000, !dbg !55
  %308 = fcmp ogt float %307, 0x3EE4F8B580000000, !dbg !56
  %309 = fcmp uno float %307, 0.000000e+00, !dbg !58
  %310 = or i1 %308, %309, !dbg !59
  %311 = select i1 %310, float %307, float 0x3EE4F8B580000000, !dbg !60
  %312 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %311), !dbg !61
  %313 = fmul float %312, %292, !dbg !62
  %314 = fmul float %312, %293, !dbg !62
  %315 = fmul float %312, %294, !dbg !62
  %316 = fmul float %312, %295, !dbg !62
  %317 = fmul float %312, %296, !dbg !62
  %318 = fmul float %312, %297, !dbg !62
  %319 = fmul float %312, %298, !dbg !62
  %320 = fmul float %312, %299, !dbg !62
  %321 = tail call float @llvm.nvvm.round.f(float %313) #4, !dbg !63
  %322 = tail call float @llvm.nvvm.round.f(float %314) #4, !dbg !63
  %323 = tail call float @llvm.nvvm.round.f(float %315) #4, !dbg !63
  %324 = tail call float @llvm.nvvm.round.f(float %316) #4, !dbg !63
  %325 = tail call float @llvm.nvvm.round.f(float %317) #4, !dbg !63
  %326 = tail call float @llvm.nvvm.round.f(float %318) #4, !dbg !63
  %327 = tail call float @llvm.nvvm.round.f(float %319) #4, !dbg !63
  %328 = tail call float @llvm.nvvm.round.f(float %320) #4, !dbg !63
  %329 = insertelement <4 x float> poison, float %321, i64 0, !dbg !64
  %330 = insertelement <4 x float> %329, float %322, i64 1, !dbg !64
  %331 = insertelement <4 x float> %330, float %323, i64 2, !dbg !64
  %332 = insertelement <4 x float> %331, float %324, i64 3, !dbg !64
  %333 = fcmp ogt <4 x float> %332, splat (float -1.270000e+02), !dbg !64
  %334 = fcmp uno <4 x float> %332, zeroinitializer, !dbg !66
  %335 = or <4 x i1> %333, %334, !dbg !67
  %336 = select <4 x i1> %335, <4 x float> %332, <4 x float> splat (float -1.270000e+02), !dbg !68
  %337 = fcmp olt <4 x float> %336, splat (float 1.270000e+02), !dbg !69
  %338 = fcmp uno <4 x float> %336, zeroinitializer, !dbg !71
  %339 = or <4 x i1> %337, %338, !dbg !72
  %340 = fptosi <4 x float> %336 to <4 x i8>, !dbg !73
  %341 = select <4 x i1> %339, <4 x i8> %340, <4 x i8> splat (i8 127), !dbg !74
  %342 = insertelement <4 x float> poison, float %325, i64 0, !dbg !64
  %343 = insertelement <4 x float> %342, float %326, i64 1, !dbg !64
  %344 = insertelement <4 x float> %343, float %327, i64 2, !dbg !64
  %345 = insertelement <4 x float> %344, float %328, i64 3, !dbg !64
  %346 = fcmp ogt <4 x float> %345, splat (float -1.270000e+02), !dbg !64
  %347 = fcmp uno <4 x float> %345, zeroinitializer, !dbg !66
  %348 = or <4 x i1> %346, %347, !dbg !67
  %349 = select <4 x i1> %348, <4 x float> %345, <4 x float> splat (float -1.270000e+02), !dbg !68
  %350 = fcmp olt <4 x float> %349, splat (float 1.270000e+02), !dbg !69
  %351 = fcmp uno <4 x float> %349, zeroinitializer, !dbg !71
  %352 = or <4 x i1> %350, %351, !dbg !72
  %353 = fptosi <4 x float> %349 to <4 x i8>, !dbg !73
  %354 = select <4 x i1> %352, <4 x i8> %353, <4 x i8> splat (i8 127), !dbg !74
  %355 = mul i32 %8, 3072, !dbg !75
  %356 = add i32 %15, %355, !dbg !76
  %357 = sext i32 %356 to i64, !dbg !77
  %358 = getelementptr i8, ptr addrspace(1) %3, i64 %357, !dbg !77
  %359 = bitcast <4 x i8> %341 to i32, !dbg !78
  %360 = bitcast <4 x i8> %354 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %359, i32 %360, ptr addrspace(1) %358, i1 %25) #4, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 33, column: 29, scope: !6)
!13 = !DILocation(line: 37, column: 38, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 43, scope: !6)
!17 = !DILocation(line: 37, column: 68, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 91, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 40, column: 48, scope: !6)
!23 = !DILocation(line: 42, column: 48, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 43, column: 38, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !28)
!33 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 38, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !34)
!37 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !34)
!38 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !34)
!39 = !DILocation(line: 45, column: 25, scope: !6)
!40 = !DILocation(line: 45, column: 36, scope: !6)
!41 = !DILocation(line: 46, column: 25, scope: !6)
!42 = !DILocation(line: 46, column: 36, scope: !6)
!43 = !DILocation(line: 53, column: 83, scope: !6)
!44 = !DILocation(line: 53, column: 145, scope: !6)
!45 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 44, scope: !6)
!47 = !DILocation(line: 56, column: 16, scope: !6)
!48 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !49)
!49 = !DILocation(line: 57, column: 45, scope: !6)
!50 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !51)
!51 = !DILocation(line: 58, column: 45, scope: !6)
!52 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !51)
!53 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !51)
!54 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !51)
!55 = !DILocation(line: 60, column: 24, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !57)
!57 = !DILocation(line: 63, column: 46, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !57)
!61 = !DILocation(line: 66, column: 25, scope: !6)
!62 = !DILocation(line: 69, column: 23, scope: !6)
!63 = !DILocation(line: 70, column: 36, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !65)
!65 = !DILocation(line: 73, column: 46, scope: !6)
!66 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !65)
!67 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !65)
!68 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !65)
!69 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !70)
!70 = !DILocation(line: 75, column: 46, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !70)
!72 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !70)
!73 = !DILocation(line: 77, column: 25, scope: !6)
!74 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !70)
!75 = !DILocation(line: 78, column: 41, scope: !6)
!76 = !DILocation(line: 78, column: 36, scope: !6)
!77 = !DILocation(line: 78, column: 29, scope: !6)
!78 = !DILocation(line: 78, column: 53, scope: !6)
!79 = !DILocation(line: 47, column: 4, scope: !6)
