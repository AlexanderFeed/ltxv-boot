; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = icmp slt i32 %13, 3600, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = and i32 %15, 1023, !dbg !11
  %18 = sext i32 %13 to i64, !dbg !12
  %19 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !12
  %20 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %19, i1 %14) #5, !dbg !13
  %21 = bitcast i16 %20 to bfloat, !dbg !13
  %22 = getelementptr bfloat, ptr addrspace(1) %2, i64 %18, !dbg !14
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %14) #5, !dbg !15
  %24 = bitcast i16 %23 to bfloat, !dbg !15
  %25 = mul i32 %13, 12288, !dbg !16
  %.inv = fcmp oge bfloat %21, 0xR0000, !dbg !17
  %26 = select i1 %.inv, bfloat 0xR0000, bfloat %21, !dbg !17
  %27 = fpext bfloat %26 to float, !dbg !17
  %28 = fsub float 0.000000e+00, %27, !dbg !21
  %.inv2 = fcmp ole bfloat %24, 0xR0000, !dbg !22
  %29 = select i1 %.inv2, bfloat 0xR0000, bfloat %24, !dbg !22
  %30 = fpext bfloat %29 to float, !dbg !22
  %31 = fcmp ogt float %28, %30, !dbg !24
  %32 = fcmp uno float %28, 0.000000e+00, !dbg !26
  %33 = or i1 %31, %32, !dbg !27
  %34 = select i1 %33, float %28, float %30, !dbg !28
  %35 = fmul float %34, 0x3F80204080000000, !dbg !29
  %36 = fcmp ogt float %35, 0x3EE4F8B580000000, !dbg !30
  %37 = fcmp uno float %35, 0.000000e+00, !dbg !32
  %38 = or i1 %36, %37, !dbg !33
  %39 = select i1 %38, float %35, float 0x3EE4F8B580000000, !dbg !34
  %40 = zext nneg i32 %17 to i64, !dbg !35
  br label %41, !dbg !35

41:                                               ; preds = %12, %__nv_tanhf.exit23
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit23 ]
  %42 = phi float [ 0xFFF0000000000000, %12 ], [ %112, %__nv_tanhf.exit23 ]
  %43 = phi float [ 0x7FF0000000000000, %12 ], [ %107, %__nv_tanhf.exit23 ]
  %44 = or disjoint i64 %indvars.iv, %40, !dbg !36
  %45 = trunc nuw nsw i64 %44 to i32, !dbg !37
  %46 = add i32 %25, %45, !dbg !37
  %47 = sext i32 %46 to i64, !dbg !38
  %48 = getelementptr i32, ptr addrspace(1) %0, i64 %47, !dbg !38
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #5, !dbg !39
  %50 = getelementptr bfloat, ptr addrspace(1) %3, i64 %44, !dbg !40
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 true) #5, !dbg !41
  %52 = bitcast i16 %51 to bfloat, !dbg !41
  %53 = fpext bfloat %52 to float, !dbg !42
  %54 = getelementptr bfloat, ptr addrspace(1) %4, i64 %44, !dbg !43
  %55 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %54, i1 true) #5, !dbg !44
  %56 = bitcast i16 %55 to bfloat, !dbg !44
  %57 = fpext bfloat %56 to float, !dbg !45
  %58 = sitofp i32 %49 to float, !dbg !46
  %59 = fmul float %39, %58, !dbg !47
  %60 = fmul float %59, %53, !dbg !48
  %61 = fadd float %60, %57, !dbg !49
  %62 = fmul float %61, 5.000000e-01, !dbg !50
  %63 = fmul float %61, %61, !dbg !51
  %64 = fmul float %61, %63, !dbg !52
  %65 = fmul float %64, 0x3FA6E4E260000000, !dbg !53
  %66 = fadd float %61, %65, !dbg !54
  %67 = fmul float %66, 0x3FE9884540000000, !dbg !55
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i5 = icmp eq i32 %68, 0, !dbg !56
  %69 = tail call float @llvm.nvvm.fabs.ftz.f(float %67) #5, !dbg !56
  %70 = tail call float @llvm.nvvm.fabs.f(float %67) #5, !dbg !56
  %.01.i6 = select i1 %.not.i5, float %70, float %69, !dbg !56
  %71 = fcmp ult float %.01.i6, 0x3FE3333340000000, !dbg !56
  br i1 %71, label %__internal_fmad.exit3.i12, label %__internal_fmad.exit1.i7, !dbg !56

__internal_fmad.exit1.i7:                         ; preds = %41
  %72 = fmul float %.01.i6, 0x4007154760000000, !dbg !56
  %73 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %72) #5, !dbg !56
  %74 = fadd float %73, 1.000000e+00, !dbg !56
  %75 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %74) #6, !dbg !56, !srcloc !57
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not6.i8 = icmp eq i32 %76, 0, !dbg !56
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %75, float -2.000000e+00, float 1.000000e+00) #5, !dbg !56
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %75, float -2.000000e+00, float 1.000000e+00) #5, !dbg !56
  %.03.i9 = select i1 %.not6.i8, float %78, float %77, !dbg !56
  %79 = fcmp oge float %.01.i6, 0x4022059680000000, !dbg !56
  %s.0.i10 = select i1 %79, float 1.000000e+00, float %.03.i9, !dbg !56
  %80 = bitcast float %s.0.i10 to i32, !dbg !56
  %81 = bitcast float %67 to i32, !dbg !56
  %82 = and i32 %81, -2147483648, !dbg !56
  %83 = or i32 %82, %80, !dbg !56
  %84 = bitcast i32 %83 to float, !dbg !56
  br label %__nv_tanhf.exit23, !dbg !56

__internal_fmad.exit3.i12:                        ; preds = %41
  %85 = fmul float %67, %67, !dbg !56
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not1.i13 = icmp eq i32 %86, 0, !dbg !56
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %85, float 0xBFAAC795C0000000) #5, !dbg !56
  %88 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %85, float 0xBFAAC795C0000000) #5, !dbg !56
  %.06.i14 = select i1 %.not1.i13, float %88, float %87, !dbg !56
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not2.i15 = icmp eq i32 %89, 0, !dbg !56
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i14, float %85, float 0x3FC10B2820000000) #5, !dbg !56
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i14, float %85, float 0x3FC10B2820000000) #5, !dbg !56
  %.05.i16 = select i1 %.not2.i15, float %91, float %90, !dbg !56
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not3.i17 = icmp eq i32 %92, 0, !dbg !56
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %85, float 0xBFD5553DA0000000) #5, !dbg !56
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %85, float 0xBFD5553DA0000000) #5, !dbg !56
  %.0.i18 = select i1 %.not3.i17, float %94, float %93, !dbg !56
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not4.i19 = icmp eq i32 %95, 0, !dbg !56
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %85, float 0.000000e+00) #5, !dbg !56
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %85, float 0.000000e+00) #5, !dbg !56
  %.04.i20 = select i1 %.not4.i19, float %97, float %96, !dbg !56
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not5.i21 = icmp eq i32 %98, 0, !dbg !56
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i20, float %67, float %67) #5, !dbg !56
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i20, float %67, float %67) #5, !dbg !56
  %.02.i22 = select i1 %.not5.i21, float %100, float %99, !dbg !56
  br label %__nv_tanhf.exit23, !dbg !56

__nv_tanhf.exit23:                                ; preds = %__internal_fmad.exit1.i7, %__internal_fmad.exit3.i12
  %s.1.i11 = phi float [ %84, %__internal_fmad.exit1.i7 ], [ %.02.i22, %__internal_fmad.exit3.i12 ], !dbg !56
  %101 = fadd float %s.1.i11, 1.000000e+00, !dbg !58
  %102 = fmul float %62, %101, !dbg !59
  %103 = fcmp olt float %43, %102, !dbg !60
  %104 = fcmp uno float %43, 0.000000e+00, !dbg !62
  %105 = or i1 %104, %103, !dbg !63
  %106 = select i1 %105, float %43, float %102, !dbg !64
  %107 = select i1 %14, float %106, float %43, !dbg !65
  %108 = fcmp ogt float %42, %102, !dbg !66
  %109 = fcmp uno float %42, 0.000000e+00, !dbg !68
  %110 = or i1 %109, %108, !dbg !69
  %111 = select i1 %110, float %42, float %102, !dbg !70
  %112 = select i1 %14, float %111, float %42, !dbg !71
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !72
  %114 = bitcast float %61 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %14) #5, !dbg !73
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !35
  %115 = icmp samesign ult i64 %indvars.iv, 11264, !dbg !35
  br i1 %115, label %41, label %116, !dbg !35

116:                                              ; preds = %__nv_tanhf.exit23
  %117 = lshr i32 %15, 5, !dbg !11
  %118 = bitcast float %107 to i32, !dbg !74
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !74
  %120 = bitcast i32 %119 to float, !dbg !74
  %121 = fcmp olt float %107, %120, !dbg !76
  %122 = fcmp uno float %107, 0.000000e+00, !dbg !78
  %123 = or i1 %122, %121, !dbg !79
  %124 = select i1 %123, float %107, float %120, !dbg !80
  %125 = bitcast float %124 to i32, !dbg !74
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !74
  %127 = bitcast i32 %126 to float, !dbg !74
  %128 = fcmp olt float %124, %127, !dbg !76
  %129 = fcmp uno float %124, 0.000000e+00, !dbg !78
  %130 = or i1 %128, %129, !dbg !79
  %131 = select i1 %130, float %124, float %127, !dbg !80
  %132 = bitcast float %131 to i32, !dbg !74
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !74
  %134 = bitcast i32 %133 to float, !dbg !74
  %135 = fcmp olt float %131, %134, !dbg !76
  %136 = fcmp uno float %131, 0.000000e+00, !dbg !78
  %137 = or i1 %135, %136, !dbg !79
  %138 = select i1 %137, float %131, float %134, !dbg !80
  %139 = bitcast float %138 to i32, !dbg !74
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !74
  %141 = bitcast i32 %140 to float, !dbg !74
  %142 = fcmp olt float %138, %141, !dbg !76
  %143 = fcmp uno float %138, 0.000000e+00, !dbg !78
  %144 = or i1 %142, %143, !dbg !79
  %145 = select i1 %144, float %138, float %141, !dbg !80
  %146 = bitcast float %145 to i32, !dbg !74
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !74
  %148 = bitcast i32 %147 to float, !dbg !74
  %149 = fcmp olt float %145, %148, !dbg !76
  %150 = fcmp uno float %145, 0.000000e+00, !dbg !78
  %151 = or i1 %149, %150, !dbg !79
  %152 = and i32 %117, 31, !dbg !74
  %153 = icmp eq i32 %16, 0, !dbg !74
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !74
  %155 = select i1 %151, i32 %146, i32 %147, !dbg !80
  %156 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %156, i1 %153) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %157 = icmp slt i32 %15, 32, !dbg !74
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !74
  %159 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %158, i1 %157) #5, !dbg !74
  %160 = bitcast i32 %159 to float, !dbg !74
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !74
  %162 = bitcast i32 %161 to float, !dbg !74
  %163 = fcmp olt float %160, %162, !dbg !76
  %164 = fcmp uno float %160, 0.000000e+00, !dbg !78
  %165 = or i1 %164, %163, !dbg !79
  %166 = select i1 %165, float %160, float %162, !dbg !80
  %167 = bitcast float %166 to i32, !dbg !74
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !74
  %169 = bitcast i32 %168 to float, !dbg !74
  %170 = fcmp olt float %166, %169, !dbg !76
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !78
  %172 = or i1 %170, %171, !dbg !79
  %173 = select i1 %172, float %166, float %169, !dbg !80
  %174 = bitcast float %173 to i32, !dbg !74
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !74
  %176 = bitcast i32 %175 to float, !dbg !74
  %177 = fcmp olt float %173, %176, !dbg !76
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !78
  %179 = or i1 %177, %178, !dbg !79
  %180 = select i1 %179, float %173, float %176, !dbg !80
  %181 = bitcast float %180 to i32, !dbg !74
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !74
  %183 = bitcast i32 %182 to float, !dbg !74
  %184 = fcmp olt float %180, %183, !dbg !76
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !78
  %186 = or i1 %184, %185, !dbg !79
  %187 = select i1 %186, float %180, float %183, !dbg !80
  %188 = bitcast float %187 to i32, !dbg !74
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !74
  %190 = bitcast i32 %189 to float, !dbg !74
  %191 = fcmp olt float %187, %190, !dbg !76
  %192 = fcmp uno float %187, 0.000000e+00, !dbg !78
  %193 = or i1 %191, %192, !dbg !79
  %194 = and i1 %157, %153, !dbg !74
  %195 = select i1 %193, i32 %188, i32 %189, !dbg !80
  %196 = insertelement <1 x i32> poison, i32 %195, i64 0, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %196, i1 %194) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %197 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %198 = bitcast float %112 to i32, !dbg !81
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !81
  %200 = bitcast i32 %199 to float, !dbg !81
  %201 = fcmp ogt float %112, %200, !dbg !83
  %202 = fcmp uno float %112, 0.000000e+00, !dbg !84
  %203 = or i1 %202, %201, !dbg !85
  %204 = select i1 %203, float %112, float %200, !dbg !86
  %205 = bitcast float %204 to i32, !dbg !81
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !81
  %207 = bitcast i32 %206 to float, !dbg !81
  %208 = fcmp ogt float %204, %207, !dbg !83
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !84
  %210 = or i1 %208, %209, !dbg !85
  %211 = select i1 %210, float %204, float %207, !dbg !86
  %212 = bitcast float %211 to i32, !dbg !81
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !81
  %214 = bitcast i32 %213 to float, !dbg !81
  %215 = fcmp ogt float %211, %214, !dbg !83
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !84
  %217 = or i1 %215, %216, !dbg !85
  %218 = select i1 %217, float %211, float %214, !dbg !86
  %219 = bitcast float %218 to i32, !dbg !81
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !81
  %221 = bitcast i32 %220 to float, !dbg !81
  %222 = fcmp ogt float %218, %221, !dbg !83
  %223 = fcmp uno float %218, 0.000000e+00, !dbg !84
  %224 = or i1 %222, %223, !dbg !85
  %225 = select i1 %224, float %218, float %221, !dbg !86
  %226 = bitcast float %225 to i32, !dbg !81
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !81
  %228 = bitcast i32 %227 to float, !dbg !81
  %229 = fcmp ogt float %225, %228, !dbg !83
  %230 = fcmp uno float %225, 0.000000e+00, !dbg !84
  %231 = or i1 %229, %230, !dbg !85
  %232 = select i1 %231, i32 %226, i32 %227, !dbg !86
  %233 = insertelement <1 x i32> poison, i32 %232, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %233, i1 %153) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %158, i1 %157) #5, !dbg !81
  %235 = bitcast i32 %234 to float, !dbg !81
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 16, i32 31), !dbg !81
  %237 = bitcast i32 %236 to float, !dbg !81
  %238 = fcmp ogt float %235, %237, !dbg !83
  %239 = fcmp uno float %235, 0.000000e+00, !dbg !84
  %240 = or i1 %239, %238, !dbg !85
  %241 = select i1 %240, float %235, float %237, !dbg !86
  %242 = bitcast float %241 to i32, !dbg !81
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !81
  %244 = bitcast i32 %243 to float, !dbg !81
  %245 = fcmp ogt float %241, %244, !dbg !83
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !84
  %247 = or i1 %245, %246, !dbg !85
  %248 = select i1 %247, float %241, float %244, !dbg !86
  %249 = bitcast float %248 to i32, !dbg !81
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !81
  %251 = bitcast i32 %250 to float, !dbg !81
  %252 = fcmp ogt float %248, %251, !dbg !83
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !84
  %254 = or i1 %252, %253, !dbg !85
  %255 = select i1 %254, float %248, float %251, !dbg !86
  %256 = bitcast float %255 to i32, !dbg !81
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !81
  %258 = bitcast i32 %257 to float, !dbg !81
  %259 = fcmp ogt float %255, %258, !dbg !83
  %260 = fcmp uno float %255, 0.000000e+00, !dbg !84
  %261 = or i1 %259, %260, !dbg !85
  %262 = select i1 %261, float %255, float %258, !dbg !86
  %263 = bitcast float %262 to i32, !dbg !81
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !81
  %265 = bitcast i32 %264 to float, !dbg !81
  %266 = fcmp ogt float %262, %265, !dbg !83
  %267 = fcmp uno float %262, 0.000000e+00, !dbg !84
  %268 = or i1 %266, %267, !dbg !85
  %269 = select i1 %268, i32 %263, i32 %264, !dbg !86
  %270 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %270, i1 %194) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %271 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %272 = getelementptr bfloat, ptr addrspace(1) %6, i64 %18, !dbg !87
  %273 = fptrunc float %197 to bfloat, !dbg !88
  %274 = icmp eq i32 %17, 0, !dbg !88
  %275 = bitcast bfloat %273 to i16, !dbg !88
  %276 = and i1 %14, %274, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %275, ptr addrspace(1) %272, i1 %276) #5, !dbg !88
  %277 = getelementptr bfloat, ptr addrspace(1) %7, i64 %18, !dbg !89
  %278 = fptrunc float %271 to bfloat, !dbg !90
  %279 = bitcast bfloat %278 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %279, ptr addrspace(1) %277, i1 %276) #5, !dbg !90
  %.inv3 = fcmp oge float %197, 0.000000e+00, !dbg !91
  %280 = select i1 %.inv3, float 0.000000e+00, float %197, !dbg !91
  %281 = fsub float 0.000000e+00, %280, !dbg !93
  %.inv4 = fcmp ole float %271, 0.000000e+00, !dbg !94
  %282 = select i1 %.inv4, float 0.000000e+00, float %271, !dbg !94
  %283 = fcmp ogt float %281, %282, !dbg !96
  %284 = fcmp uno float %281, 0.000000e+00, !dbg !98
  %285 = or i1 %284, %283, !dbg !99
  %286 = select i1 %285, float %281, float %282, !dbg !100
  %287 = fmul float %286, 0x3F80204080000000, !dbg !101
  %288 = fcmp ogt float %287, 0x3EE4F8B580000000, !dbg !102
  %289 = fcmp uno float %287, 0.000000e+00, !dbg !104
  %290 = or i1 %288, %289, !dbg !105
  %291 = select i1 %290, float %287, float 0x3EE4F8B580000000, !dbg !106
  %292 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %291), !dbg !107
  %293 = or disjoint i32 %25, %17
  br label %294, !dbg !108

294:                                              ; preds = %116, %__nv_tanhf.exit
  %indvars.iv26 = phi i64 [ 0, %116 ], [ %indvars.iv.next27, %__nv_tanhf.exit ]
  %295 = trunc nuw nsw i64 %indvars.iv26 to i32, !dbg !109
  %296 = add i32 %293, %295, !dbg !109
  %297 = sext i32 %296 to i64, !dbg !110
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %297, !dbg !110
  %299 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %298, i1 %14) #5, !dbg !111
  %300 = bitcast i32 %299 to float, !dbg !111
  %301 = fmul float %300, 5.000000e-01, !dbg !112
  %302 = fmul float %300, %300, !dbg !113
  %303 = fmul float %302, %300, !dbg !114
  %304 = fmul float %303, 0x3FA6E4E260000000, !dbg !115
  %305 = fadd float %304, %300, !dbg !116
  %306 = fmul float %305, 0x3FE9884540000000, !dbg !117
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i = icmp eq i32 %307, 0, !dbg !118
  %308 = tail call float @llvm.nvvm.fabs.ftz.f(float %306) #5, !dbg !118
  %309 = tail call float @llvm.nvvm.fabs.f(float %306) #5, !dbg !118
  %.01.i = select i1 %.not.i, float %309, float %308, !dbg !118
  %310 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !118
  br i1 %310, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !118

__internal_fmad.exit1.i:                          ; preds = %294
  %311 = fmul float %.01.i, 0x4007154760000000, !dbg !118
  %312 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %311) #5, !dbg !118
  %313 = fadd float %312, 1.000000e+00, !dbg !118
  %314 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %313) #6, !dbg !118, !srcloc !57
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i = icmp eq i32 %315, 0, !dbg !118
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %314, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %317 = tail call float @llvm.nvvm.fma.rn.f(float %314, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i = select i1 %.not6.i, float %317, float %316, !dbg !118
  %318 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !118
  %s.0.i = select i1 %318, float 1.000000e+00, float %.03.i, !dbg !118
  %319 = bitcast float %s.0.i to i32, !dbg !118
  %320 = bitcast float %306 to i32, !dbg !118
  %321 = and i32 %320, -2147483648, !dbg !118
  %322 = or i32 %321, %319, !dbg !118
  %323 = bitcast i32 %322 to float, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__internal_fmad.exit3.i:                          ; preds = %294
  %324 = fmul float %306, %306, !dbg !118
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i = icmp eq i32 %325, 0, !dbg !118
  %326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %324, float 0xBFAAC795C0000000) #5, !dbg !118
  %327 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %324, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i = select i1 %.not1.i, float %327, float %326, !dbg !118
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i = icmp eq i32 %328, 0, !dbg !118
  %329 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %324, float 0x3FC10B2820000000) #5, !dbg !118
  %330 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %324, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i = select i1 %.not2.i, float %330, float %329, !dbg !118
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i = icmp eq i32 %331, 0, !dbg !118
  %332 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %324, float 0xBFD5553DA0000000) #5, !dbg !118
  %333 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %324, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i = select i1 %.not3.i, float %333, float %332, !dbg !118
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i = icmp eq i32 %334, 0, !dbg !118
  %335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %324, float 0.000000e+00) #5, !dbg !118
  %336 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %324, float 0.000000e+00) #5, !dbg !118
  %.04.i = select i1 %.not4.i, float %336, float %335, !dbg !118
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i = icmp eq i32 %337, 0, !dbg !118
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %306, float %306) #5, !dbg !118
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %306, float %306) #5, !dbg !118
  %.02.i = select i1 %.not5.i, float %339, float %338, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %323, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !118
  %340 = fadd float %s.1.i, 1.000000e+00, !dbg !119
  %341 = fmul float %301, %340, !dbg !120
  %342 = fmul float %292, %341, !dbg !121
  %343 = tail call float @llvm.nvvm.round.f(float %342) #5, !dbg !122
  %344 = fcmp ogt float %343, -1.270000e+02, !dbg !123
  %345 = fcmp uno float %343, 0.000000e+00, !dbg !125
  %346 = or i1 %344, %345, !dbg !126
  %347 = select i1 %346, float %343, float -1.270000e+02, !dbg !127
  %348 = fcmp olt float %347, 1.270000e+02, !dbg !128
  %349 = fcmp uno float %347, 0.000000e+00, !dbg !130
  %350 = or i1 %348, %349, !dbg !131
  %351 = fptosi float %347 to i8, !dbg !132
  %352 = select i1 %350, i8 %351, i8 127, !dbg !133
  %353 = getelementptr i8, ptr addrspace(1) %8, i64 %297, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %352, ptr addrspace(1) %353, i1 %14) #5, !dbg !135
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1024, !dbg !108
  %354 = icmp samesign ult i64 %indvars.iv26, 11264, !dbg !108
  br i1 %354, label %294, label %355, !dbg !108

355:                                              ; preds = %__nv_tanhf.exit
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 30, scope: !6)
!15 = !DILocation(line: 30, column: 35, scope: !6)
!16 = !DILocation(line: 39, column: 47, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 44, column: 44, scope: !6)
!21 = !DILocation(line: 45, column: 16, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 46, column: 44, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 47, column: 44, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 52, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 33, column: 40, scope: !6)
!36 = !DILocation(line: 34, column: 31, scope: !6)
!37 = !DILocation(line: 39, column: 41, scope: !6)
!38 = !DILocation(line: 39, column: 34, scope: !6)
!39 = !DILocation(line: 39, column: 52, scope: !6)
!40 = !DILocation(line: 40, column: 35, scope: !6)
!41 = !DILocation(line: 40, column: 42, scope: !6)
!42 = !DILocation(line: 40, column: 95, scope: !6)
!43 = !DILocation(line: 41, column: 35, scope: !6)
!44 = !DILocation(line: 41, column: 42, scope: !6)
!45 = !DILocation(line: 41, column: 95, scope: !6)
!46 = !DILocation(line: 42, column: 23, scope: !6)
!47 = !DILocation(line: 54, column: 23, scope: !6)
!48 = !DILocation(line: 55, column: 24, scope: !6)
!49 = !DILocation(line: 56, column: 24, scope: !6)
!50 = !DILocation(line: 59, column: 24, scope: !6)
!51 = !DILocation(line: 60, column: 24, scope: !6)
!52 = !DILocation(line: 61, column: 24, scope: !6)
!53 = !DILocation(line: 63, column: 24, scope: !6)
!54 = !DILocation(line: 64, column: 24, scope: !6)
!55 = !DILocation(line: 66, column: 24, scope: !6)
!56 = !DILocation(line: 67, column: 31, scope: !6)
!57 = !{i32 21046}
!58 = !DILocation(line: 69, column: 24, scope: !6)
!59 = !DILocation(line: 70, column: 24, scope: !6)
!60 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !61)
!61 = !DILocation(line: 73, column: 47, scope: !6)
!62 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !61)
!63 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !61)
!64 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !61)
!65 = !DILocation(line: 74, column: 50, scope: !6)
!66 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !67)
!67 = !DILocation(line: 75, column: 47, scope: !6)
!68 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !67)
!69 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !67)
!70 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !67)
!71 = !DILocation(line: 76, column: 50, scope: !6)
!72 = !DILocation(line: 77, column: 29, scope: !6)
!73 = !DILocation(line: 77, column: 54, scope: !6)
!74 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !75)
!75 = !DILocation(line: 78, column: 40, scope: !6)
!76 = !DILocation(line: 94, column: 15, scope: !77, inlinedAt: !75)
!77 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!78 = !DILocation(line: 96, column: 21, scope: !77, inlinedAt: !75)
!79 = !DILocation(line: 96, column: 16, scope: !77, inlinedAt: !75)
!80 = !DILocation(line: 97, column: 29, scope: !77, inlinedAt: !75)
!81 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !82)
!82 = !DILocation(line: 79, column: 40, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !77, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 21, scope: !77, inlinedAt: !82)
!85 = !DILocation(line: 104, column: 16, scope: !77, inlinedAt: !82)
!86 = !DILocation(line: 105, column: 29, scope: !77, inlinedAt: !82)
!87 = !DILocation(line: 80, column: 25, scope: !6)
!88 = !DILocation(line: 80, column: 37, scope: !6)
!89 = !DILocation(line: 81, column: 25, scope: !6)
!90 = !DILocation(line: 81, column: 37, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !92)
!92 = !DILocation(line: 104, column: 46, scope: !6)
!93 = !DILocation(line: 105, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !95)
!95 = !DILocation(line: 106, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !97)
!97 = !DILocation(line: 107, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !97)
!101 = !DILocation(line: 109, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !103)
!103 = !DILocation(line: 112, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !103)
!107 = !DILocation(line: 115, column: 25, scope: !6)
!108 = !DILocation(line: 82, column: 40, scope: !6)
!109 = !DILocation(line: 88, column: 43, scope: !6)
!110 = !DILocation(line: 88, column: 36, scope: !6)
!111 = !DILocation(line: 88, column: 54, scope: !6)
!112 = !DILocation(line: 90, column: 24, scope: !6)
!113 = !DILocation(line: 91, column: 24, scope: !6)
!114 = !DILocation(line: 92, column: 24, scope: !6)
!115 = !DILocation(line: 94, column: 24, scope: !6)
!116 = !DILocation(line: 95, column: 24, scope: !6)
!117 = !DILocation(line: 97, column: 24, scope: !6)
!118 = !DILocation(line: 98, column: 31, scope: !6)
!119 = !DILocation(line: 100, column: 24, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 117, column: 24, scope: !6)
!122 = !DILocation(line: 118, column: 36, scope: !6)
!123 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !124)
!124 = !DILocation(line: 121, column: 46, scope: !6)
!125 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !124)
!126 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !124)
!127 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !124)
!128 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !129)
!129 = !DILocation(line: 123, column: 46, scope: !6)
!130 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !129)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !129)
!132 = !DILocation(line: 125, column: 25, scope: !6)
!133 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !129)
!134 = !DILocation(line: 126, column: 29, scope: !6)
!135 = !DILocation(line: 126, column: 54, scope: !6)
!136 = !DILocation(line: 82, column: 4, scope: !6)
