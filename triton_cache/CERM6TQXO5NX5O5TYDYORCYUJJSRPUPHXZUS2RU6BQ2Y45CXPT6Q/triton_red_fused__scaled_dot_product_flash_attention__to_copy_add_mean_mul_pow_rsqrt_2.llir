; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, 98688, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 1, !dbg !11
  %17 = and i32 %16, 126, !dbg !11
  %18 = and i32 %13, 63, !dbg !11
  %19 = or disjoint i32 %18, 64, !dbg !11
  %20 = sdiv i32 %11, 24, !dbg !12
  %21 = mul i32 %20, 24, !dbg !13
  %.decomposed = sub i32 %11, %21, !dbg !13
  %22 = shl nsw i32 %.decomposed, 7, !dbg !14
  %23 = mul i32 %20, 9216, !dbg !15
  %24 = add i32 %23, %22, !dbg !16
  %25 = add i32 %24, 3072, !dbg !17
  %26 = or disjoint i32 %25, %17, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 %12) #5, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractelement <2 x bfloat> %30, i64 0, !dbg !20
  %32 = extractelement <2 x bfloat> %30, i64 1, !dbg !20
  %33 = fpext bfloat %31 to float, !dbg !21
  %34 = fpext bfloat %32 to float, !dbg !21
  %35 = or disjoint i32 %24, %17, !dbg !22
  %36 = sext i32 %35 to i64, !dbg !23
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 %12) #5, !dbg !24
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !24
  %40 = extractelement <2 x bfloat> %39, i64 0, !dbg !24
  %41 = extractelement <2 x bfloat> %39, i64 1, !dbg !24
  %42 = fpext bfloat %40 to float, !dbg !25
  %43 = fpext bfloat %41 to float, !dbg !25
  %44 = fmul float %33, %33, !dbg !26
  %45 = fmul float %34, %34, !dbg !26
  %46 = fmul float %42, %42, !dbg !27
  %47 = fmul float %43, %43, !dbg !27
  %48 = fadd float %44, %45, !dbg !28
  %49 = select i1 %12, float %48, float 0.000000e+00, !dbg !28
  %50 = bitcast float %49 to i32, !dbg !33
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = fadd float %49, %52, !dbg !28
  %54 = bitcast float %53 to i32, !dbg !33
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !33
  %56 = bitcast i32 %55 to float, !dbg !33
  %57 = fadd float %53, %56, !dbg !28
  %58 = bitcast float %57 to i32, !dbg !33
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = fadd float %57, %60, !dbg !28
  %62 = bitcast float %61 to i32, !dbg !33
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !33
  %64 = bitcast i32 %63 to float, !dbg !33
  %65 = fadd float %61, %64, !dbg !28
  %66 = bitcast float %65 to i32, !dbg !33
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = fadd float %65, %68, !dbg !28
  %70 = and i32 %15, 1, !dbg !33
  %71 = icmp eq i32 %14, 0, !dbg !33
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !33
  %73 = bitcast float %69 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 %71) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %74 = icmp slt i32 %13, 2, !dbg !33
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !33
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #5, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fadd float %77, %79, !dbg !28
  %81 = and i32 %13, 1, !dbg !33
  %82 = icmp eq i32 %81, 0, !dbg !33
  %83 = and i1 %74, %82, !dbg !33
  %84 = bitcast float %80 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %84, i1 %83) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %85 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %86 = fadd float %46, %47, !dbg !36
  %87 = select i1 %12, float %86, float 0.000000e+00, !dbg !36
  %88 = bitcast float %87 to i32, !dbg !34
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = fadd float %87, %90, !dbg !36
  %92 = bitcast float %91 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %91, %94, !dbg !36
  %96 = bitcast float %95 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = fadd float %95, %98, !dbg !36
  %100 = bitcast float %99 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %99, %102, !dbg !36
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !36
  %108 = bitcast float %107 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %108, i1 %71) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #5, !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %110, %112, !dbg !36
  %114 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %114, i1 %83) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %116 = zext nneg i32 %17 to i64, !dbg !37
  %117 = getelementptr bfloat, ptr addrspace(1) %1, i64 %116, !dbg !37
  %118 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 true) #5, !dbg !38
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !38
  %120 = extractelement <2 x bfloat> %119, i64 0, !dbg !38
  %121 = extractelement <2 x bfloat> %119, i64 1, !dbg !38
  %122 = fpext bfloat %120 to float, !dbg !39
  %123 = fpext bfloat %121 to float, !dbg !39
  %124 = shl i32 %20, 7, !dbg !40
  %125 = or disjoint i32 %17, %124, !dbg !41
  %126 = sext i32 %125 to i64, !dbg !42
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !42
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %127, i1 %12) #5, !dbg !43
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !43
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !43
  %131 = bitcast i32 %129 to float, !dbg !43
  %132 = bitcast i32 %130 to float, !dbg !43
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !44
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %133, i1 %12) #5, !dbg !45
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !45
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %137, i32 %135, i32 %136, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !45
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !45
  %140 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !45
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !45
  %142 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 %12) #5, !dbg !46
  %143 = getelementptr bfloat, ptr addrspace(1) %4, i64 %116, !dbg !47
  %144 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %143, i1 true) #5, !dbg !48
  %145 = and i32 %13, 62, !dbg !49
  %146 = and i32 %19, 126, !dbg !49
  %147 = or disjoint i32 %145, 1, !dbg !50
  %148 = or i32 %18, 65, !dbg !50
  %149 = or disjoint i32 %24, %147, !dbg !51
  %150 = or disjoint i32 %24, %148, !dbg !51
  %151 = sext i32 %149 to i64, !dbg !52
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !52
  %153 = sext i32 %150 to i64, !dbg !52
  %154 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !52
  %155 = and i1 %12, %82, !dbg !53
  %156 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 %155) #5, !dbg !54
  %157 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %154, i1 %155) #5, !dbg !54
  %158 = tail call float @llvm.nvvm.div.full(float %115, float 1.280000e+02), !dbg !55
  %159 = fadd float %158, 0x3EB0C6F7A0000000, !dbg !56
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %160, 0, !dbg !57
  br i1 %.not.i, label %163, label %161, !dbg !57

161:                                              ; preds = %10
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

163:                                              ; preds = %10
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %161, %163
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], !dbg !57
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i3 = icmp eq i32 %165, 0, !dbg !57
  br i1 %.not.i3, label %168, label %166, !dbg !57

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !57
  br label %__nv_rsqrtf.exit5, !dbg !57

168:                                              ; preds = %__nv_rsqrtf.exit
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !57
  br label %__nv_rsqrtf.exit5, !dbg !57

__nv_rsqrtf.exit5:                                ; preds = %166, %168
  %.0.i4 = phi float [ %167, %166 ], [ %169, %168 ], !dbg !57
  %170 = zext nneg i32 %147 to i64, !dbg !58
  %171 = getelementptr bfloat, ptr addrspace(1) %1, i64 %170, !dbg !58
  %172 = zext nneg i32 %148 to i64, !dbg !58
  %173 = getelementptr bfloat, ptr addrspace(1) %1, i64 %172, !dbg !58
  %174 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %171, i1 %155) #5, !dbg !59
  %175 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %173, i1 %155) #5, !dbg !59
  %176 = icmp ne i32 %81, 0, !dbg !60
  %177 = or disjoint i32 %24, %145, !dbg !61
  %178 = or disjoint i32 %24, %146, !dbg !61
  %179 = sext i32 %177 to i64, !dbg !62
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %179, !dbg !62
  %181 = sext i32 %178 to i64, !dbg !62
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %181, !dbg !62
  %183 = and i1 %12, %176, !dbg !63
  %184 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %180, i1 %183) #5, !dbg !64
  %185 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %182, i1 %183) #5, !dbg !64
  %186 = zext nneg i32 %145 to i64, !dbg !65
  %187 = getelementptr bfloat, ptr addrspace(1) %1, i64 %186, !dbg !65
  %188 = zext nneg i32 %146 to i64, !dbg !65
  %189 = getelementptr bfloat, ptr addrspace(1) %1, i64 %188, !dbg !65
  %190 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %187, i1 %183) #5, !dbg !66
  %191 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %189, i1 %183) #5, !dbg !66
  %192 = fmul float %.0.i4, %42, !dbg !67
  %193 = fmul float %.0.i4, %43, !dbg !67
  %194 = fmul float %192, %122, !dbg !68
  %195 = fmul float %193, %123, !dbg !68
  %196 = fmul float %194, %131, !dbg !69
  %197 = fmul float %195, %132, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %198 = bitcast float %196 to i32, !dbg !69
  %199 = bitcast float %197 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %137, i32 %198, i32 %199, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %200 = load float, ptr addrspace(3) %138, align 4, !dbg !69
  %201 = load float, ptr addrspace(3) %140, align 4, !dbg !69
  %202 = or i32 %18, 3137, !dbg !70
  %203 = add nsw i32 %202, %22, !dbg !71
  %204 = add i32 %24, 3073, !dbg !71
  %205 = or disjoint i32 %204, %145, !dbg !72
  %206 = add i32 %203, %23, !dbg !72
  %207 = sext i32 %205 to i64, !dbg !73
  %208 = getelementptr bfloat, ptr addrspace(1) %0, i64 %207, !dbg !73
  %209 = sext i32 %206 to i64, !dbg !73
  %210 = getelementptr bfloat, ptr addrspace(1) %0, i64 %209, !dbg !73
  %211 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %208, i1 %155) #5, !dbg !74
  %212 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %210, i1 %155) #5, !dbg !74
  %213 = tail call float @llvm.nvvm.div.full(float %85, float 1.280000e+02), !dbg !75
  %214 = fadd float %213, 0x3EB0C6F7A0000000, !dbg !76
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i6 = icmp eq i32 %215, 0, !dbg !77
  br i1 %.not.i6, label %218, label %216, !dbg !77

216:                                              ; preds = %__nv_rsqrtf.exit5
  %217 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %214), !dbg !77
  br label %__nv_rsqrtf.exit8, !dbg !77

218:                                              ; preds = %__nv_rsqrtf.exit5
  %219 = tail call float @llvm.nvvm.rsqrt.approx.f(float %214), !dbg !77
  br label %__nv_rsqrtf.exit8, !dbg !77

__nv_rsqrtf.exit8:                                ; preds = %216, %218
  %.0.i7 = phi float [ %217, %216 ], [ %219, %218 ], !dbg !77
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i9 = icmp eq i32 %220, 0, !dbg !77
  br i1 %.not.i9, label %223, label %221, !dbg !77

221:                                              ; preds = %__nv_rsqrtf.exit8
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %214), !dbg !77
  br label %__nv_rsqrtf.exit11, !dbg !77

223:                                              ; preds = %__nv_rsqrtf.exit8
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %214), !dbg !77
  br label %__nv_rsqrtf.exit11, !dbg !77

__nv_rsqrtf.exit11:                               ; preds = %221, %223
  %.0.i10 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !77
  %225 = bitcast i16 %212 to bfloat, !dbg !74
  %226 = fpext bfloat %225 to float, !dbg !78
  %227 = bitcast i16 %211 to bfloat, !dbg !74
  %228 = fpext bfloat %227 to float, !dbg !78
  %229 = bitcast i16 %157 to bfloat, !dbg !54
  %230 = fpext bfloat %229 to float, !dbg !79
  %231 = fmul float %.0.i, %230, !dbg !80
  %232 = bitcast i16 %175 to bfloat, !dbg !59
  %233 = fpext bfloat %232 to float, !dbg !81
  %234 = fmul float %231, %233, !dbg !82
  %235 = fsub float 0.000000e+00, %234, !dbg !83
  %236 = bitcast i16 %185 to bfloat, !dbg !64
  %237 = fpext bfloat %236 to float, !dbg !84
  %238 = fmul float %.0.i, %237, !dbg !85
  %239 = bitcast i16 %191 to bfloat, !dbg !66
  %240 = fpext bfloat %239 to float, !dbg !86
  %241 = fmul float %238, %240, !dbg !87
  %242 = select i1 %82, float %235, float %241, !dbg !88
  %243 = fmul float %141, %242, !dbg !89
  %244 = fadd float %201, %243, !dbg !90
  %245 = bitcast i16 %156 to bfloat, !dbg !54
  %246 = fpext bfloat %245 to float, !dbg !79
  %247 = fmul float %.0.i, %246, !dbg !80
  %248 = bitcast i16 %174 to bfloat, !dbg !59
  %249 = fpext bfloat %248 to float, !dbg !81
  %250 = fmul float %247, %249, !dbg !82
  %251 = fsub float 0.000000e+00, %250, !dbg !83
  %252 = bitcast i16 %184 to bfloat, !dbg !64
  %253 = fpext bfloat %252 to float, !dbg !84
  %254 = fmul float %.0.i, %253, !dbg !85
  %255 = bitcast i16 %190 to bfloat, !dbg !66
  %256 = fpext bfloat %255 to float, !dbg !86
  %257 = fmul float %254, %256, !dbg !87
  %258 = select i1 %82, float %251, float %257, !dbg !88
  %259 = fmul float %139, %258, !dbg !89
  %260 = fadd float %200, %259, !dbg !90
  %261 = bitcast i32 %144 to <2 x bfloat>, !dbg !48
  %262 = extractelement <2 x bfloat> %261, i64 1, !dbg !48
  %263 = fpext bfloat %262 to float, !dbg !91
  %264 = extractelement <2 x bfloat> %261, i64 0, !dbg !48
  %265 = fpext bfloat %264 to float, !dbg !91
  %266 = bitcast i32 %142 to <2 x bfloat>, !dbg !46
  %267 = extractelement <2 x bfloat> %266, i64 1, !dbg !46
  %268 = fpext bfloat %267 to float, !dbg !92
  %269 = extractelement <2 x bfloat> %266, i64 0, !dbg !46
  %270 = fpext bfloat %269 to float, !dbg !92
  %271 = fmul float %.0.i7, %228, !dbg !93
  %272 = fmul float %.0.i7, %226, !dbg !93
  %273 = getelementptr bfloat, ptr addrspace(1) %4, i64 %170, !dbg !94
  %274 = getelementptr bfloat, ptr addrspace(1) %4, i64 %172, !dbg !94
  %275 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %273, i1 %155) #5, !dbg !95
  %276 = bitcast i16 %275 to bfloat, !dbg !95
  %277 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %274, i1 %155) #5, !dbg !95
  %278 = bitcast i16 %277 to bfloat, !dbg !95
  %279 = fpext bfloat %276 to float, !dbg !96
  %280 = fpext bfloat %278 to float, !dbg !96
  %281 = fmul float %271, %279, !dbg !97
  %282 = fmul float %272, %280, !dbg !97
  %283 = fsub float 0.000000e+00, %281, !dbg !98
  %284 = fsub float 0.000000e+00, %282, !dbg !98
  %285 = or disjoint i32 %25, %145, !dbg !99
  %286 = or disjoint i32 %25, %146, !dbg !99
  %287 = sext i32 %285 to i64, !dbg !100
  %288 = getelementptr bfloat, ptr addrspace(1) %0, i64 %287, !dbg !100
  %289 = sext i32 %286 to i64, !dbg !100
  %290 = getelementptr bfloat, ptr addrspace(1) %0, i64 %289, !dbg !100
  %291 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %288, i1 %183) #5, !dbg !101
  %292 = bitcast i16 %291 to bfloat, !dbg !101
  %293 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %290, i1 %183) #5, !dbg !101
  %294 = bitcast i16 %293 to bfloat, !dbg !101
  %295 = fpext bfloat %292 to float, !dbg !102
  %296 = fpext bfloat %294 to float, !dbg !102
  %297 = fmul float %.0.i7, %295, !dbg !103
  %298 = fmul float %.0.i7, %296, !dbg !103
  %299 = getelementptr bfloat, ptr addrspace(1) %4, i64 %186, !dbg !104
  %300 = getelementptr bfloat, ptr addrspace(1) %4, i64 %188, !dbg !104
  %301 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %299, i1 %183) #5, !dbg !105
  %302 = bitcast i16 %301 to bfloat, !dbg !105
  %303 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %300, i1 %183) #5, !dbg !105
  %304 = bitcast i16 %303 to bfloat, !dbg !105
  %305 = fpext bfloat %302 to float, !dbg !106
  %306 = fpext bfloat %304 to float, !dbg !106
  %307 = fmul float %297, %305, !dbg !107
  %308 = fmul float %298, %306, !dbg !107
  %309 = select i1 %82, float %283, float %307, !dbg !88
  %310 = select i1 %82, float %284, float %308, !dbg !88
  %311 = fmul float %.0.i10, %270, !dbg !108
  %312 = fmul float %.0.i10, %268, !dbg !108
  %313 = fmul float %311, %265, !dbg !109
  %314 = fmul float %312, %263, !dbg !109
  %315 = fmul float %313, %131, !dbg !110
  %316 = fmul float %314, %132, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %317 = bitcast float %315 to i32, !dbg !110
  %318 = bitcast float %316 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %137, i32 %317, i32 %318, i1 true) #5, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %319 = load float, ptr addrspace(3) %138, align 4, !dbg !110
  %320 = load float, ptr addrspace(3) %140, align 4, !dbg !110
  %321 = fmul float %139, %309, !dbg !111
  %322 = fmul float %141, %310, !dbg !111
  %323 = fadd float %319, %321, !dbg !112
  %324 = fadd float %320, %322, !dbg !112
  %325 = shl i32 %11, 7, !dbg !113
  %326 = or disjoint i32 %17, %325, !dbg !114
  %327 = sext i32 %326 to i64, !dbg !115
  %328 = getelementptr bfloat, ptr addrspace(1) %5, i64 %327, !dbg !115
  %329 = fptrunc float %260 to bfloat, !dbg !116
  %330 = fptrunc float %244 to bfloat, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %18, !dbg !116
  %332 = bitcast bfloat %329 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %331, <1 x i16> %332, i1 true) #5, !dbg !116
  %333 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %19, !dbg !116
  %334 = bitcast bfloat %330 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %333, <1 x i16> %334, i1 true) #5, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %17, !dbg !116
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %328, i1 %12) #5, !dbg !116
  %337 = getelementptr bfloat, ptr addrspace(1) %6, i64 %327, !dbg !117
  %338 = fptrunc float %323 to bfloat, !dbg !118
  %339 = fptrunc float %324 to bfloat, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %340 = bitcast bfloat %338 to <1 x i16>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %331, <1 x i16> %340, i1 true) #5, !dbg !118
  %341 = bitcast bfloat %339 to <1 x i16>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %333, <1 x i16> %341, i1 true) #5, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %342 = load i32, ptr addrspace(3) %335, align 4, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %337, i1 %12) #5, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 19, scope: !6)
!13 = !DILocation(line: 28, column: 19, scope: !6)
!14 = !DILocation(line: 39, column: 52, scope: !6)
!15 = !DILocation(line: 39, column: 62, scope: !6)
!16 = !DILocation(line: 39, column: 41, scope: !6)
!17 = !DILocation(line: 39, column: 48, scope: !6)
!18 = !DILocation(line: 39, column: 57, scope: !6)
!19 = !DILocation(line: 39, column: 34, scope: !6)
!20 = !DILocation(line: 39, column: 67, scope: !6)
!21 = !DILocation(line: 39, column: 128, scope: !6)
!22 = !DILocation(line: 40, column: 50, scope: !6)
!23 = !DILocation(line: 40, column: 34, scope: !6)
!24 = !DILocation(line: 40, column: 60, scope: !6)
!25 = !DILocation(line: 40, column: 121, scope: !6)
!26 = !DILocation(line: 42, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 22, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 51, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !35)
!35 = !DILocation(line: 52, column: 27, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !35)
!37 = !DILocation(line: 60, column: 35, scope: !6)
!38 = !DILocation(line: 60, column: 42, scope: !6)
!39 = !DILocation(line: 60, column: 95, scope: !6)
!40 = !DILocation(line: 61, column: 46, scope: !6)
!41 = !DILocation(line: 61, column: 42, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 51, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 51, scope: !6)
!46 = !DILocation(line: 63, column: 68, scope: !6)
!47 = !DILocation(line: 64, column: 35, scope: !6)
!48 = !DILocation(line: 64, column: 42, scope: !6)
!49 = !DILocation(line: 70, column: 42, scope: !6)
!50 = !DILocation(line: 70, column: 39, scope: !6)
!51 = !DILocation(line: 70, column: 64, scope: !6)
!52 = !DILocation(line: 70, column: 35, scope: !6)
!53 = !DILocation(line: 70, column: 92, scope: !6)
!54 = !DILocation(line: 70, column: 74, scope: !6)
!55 = !DILocation(line: 73, column: 25, scope: !6)
!56 = !DILocation(line: 75, column: 24, scope: !6)
!57 = !DILocation(line: 76, column: 32, scope: !6)
!58 = !DILocation(line: 79, column: 35, scope: !6)
!59 = !DILocation(line: 79, column: 92, scope: !6)
!60 = !DILocation(line: 84, column: 25, scope: !6)
!61 = !DILocation(line: 87, column: 60, scope: !6)
!62 = !DILocation(line: 87, column: 35, scope: !6)
!63 = !DILocation(line: 87, column: 88, scope: !6)
!64 = !DILocation(line: 87, column: 70, scope: !6)
!65 = !DILocation(line: 96, column: 35, scope: !6)
!66 = !DILocation(line: 96, column: 88, scope: !6)
!67 = !DILocation(line: 108, column: 24, scope: !6)
!68 = !DILocation(line: 110, column: 24, scope: !6)
!69 = !DILocation(line: 112, column: 24, scope: !6)
!70 = !DILocation(line: 116, column: 42, scope: !6)
!71 = !DILocation(line: 116, column: 58, scope: !6)
!72 = !DILocation(line: 116, column: 67, scope: !6)
!73 = !DILocation(line: 116, column: 35, scope: !6)
!74 = !DILocation(line: 116, column: 77, scope: !6)
!75 = !DILocation(line: 118, column: 24, scope: !6)
!76 = !DILocation(line: 119, column: 24, scope: !6)
!77 = !DILocation(line: 120, column: 32, scope: !6)
!78 = !DILocation(line: 116, column: 146, scope: !6)
!79 = !DILocation(line: 70, column: 143, scope: !6)
!80 = !DILocation(line: 77, column: 24, scope: !6)
!81 = !DILocation(line: 79, column: 161, scope: !6)
!82 = !DILocation(line: 80, column: 24, scope: !6)
!83 = !DILocation(line: 81, column: 17, scope: !6)
!84 = !DILocation(line: 87, column: 139, scope: !6)
!85 = !DILocation(line: 94, column: 24, scope: !6)
!86 = !DILocation(line: 96, column: 157, scope: !6)
!87 = !DILocation(line: 97, column: 24, scope: !6)
!88 = !DILocation(line: 0, scope: !6)
!89 = !DILocation(line: 113, column: 24, scope: !6)
!90 = !DILocation(line: 114, column: 24, scope: !6)
!91 = !DILocation(line: 64, column: 95, scope: !6)
!92 = !DILocation(line: 63, column: 130, scope: !6)
!93 = !DILocation(line: 121, column: 24, scope: !6)
!94 = !DILocation(line: 123, column: 35, scope: !6)
!95 = !DILocation(line: 123, column: 92, scope: !6)
!96 = !DILocation(line: 123, column: 161, scope: !6)
!97 = !DILocation(line: 124, column: 24, scope: !6)
!98 = !DILocation(line: 125, column: 17, scope: !6)
!99 = !DILocation(line: 128, column: 67, scope: !6)
!100 = !DILocation(line: 128, column: 35, scope: !6)
!101 = !DILocation(line: 128, column: 77, scope: !6)
!102 = !DILocation(line: 128, column: 146, scope: !6)
!103 = !DILocation(line: 133, column: 24, scope: !6)
!104 = !DILocation(line: 135, column: 35, scope: !6)
!105 = !DILocation(line: 135, column: 88, scope: !6)
!106 = !DILocation(line: 135, column: 157, scope: !6)
!107 = !DILocation(line: 136, column: 24, scope: !6)
!108 = !DILocation(line: 145, column: 24, scope: !6)
!109 = !DILocation(line: 147, column: 25, scope: !6)
!110 = !DILocation(line: 149, column: 26, scope: !6)
!111 = !DILocation(line: 150, column: 25, scope: !6)
!112 = !DILocation(line: 151, column: 26, scope: !6)
!113 = !DILocation(line: 153, column: 40, scope: !6)
!114 = !DILocation(line: 153, column: 36, scope: !6)
!115 = !DILocation(line: 153, column: 29, scope: !6)
!116 = !DILocation(line: 153, column: 52, scope: !6)
!117 = !DILocation(line: 154, column: 29, scope: !6)
!118 = !DILocation(line: 154, column: 53, scope: !6)
!119 = !DILocation(line: 53, column: 4, scope: !6)
