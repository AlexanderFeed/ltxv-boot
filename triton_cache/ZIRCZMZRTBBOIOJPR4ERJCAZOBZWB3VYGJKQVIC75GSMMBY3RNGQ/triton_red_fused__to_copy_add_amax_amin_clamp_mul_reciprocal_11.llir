; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 9, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %10, 1, !dbg !14
  %15 = and i32 %14, 1022, !dbg !14
  %16 = shl i32 %12, 7, !dbg !15
  %17 = and i32 %14, 126
  %invariant.op = or disjoint i32 %16, %17, !dbg !16
  %18 = zext nneg i32 %15 to i64, !dbg !16
  %19 = lshr i32 %15, 7, !dbg !17
  %20 = mul nuw nsw i32 %19, 526336, !dbg !18
  %.reass.us = add i32 %20, %invariant.op
  %21 = sext i32 %.reass.us to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  br i1 %13, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 false) #4, !dbg !20
  %24 = or disjoint i64 %18, 1024, !dbg !21
  %25 = lshr i64 %24, 7, !dbg !17
  %26 = trunc nuw nsw i64 %25 to i32
  %27 = mul nuw nsw i32 %26, 526336
  %.reass.1 = add i32 %27, %invariant.op
  %28 = sext i32 %.reass.1 to i64, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 false) #4, !dbg !20
  %31 = or disjoint i64 %18, 2048, !dbg !21
  %32 = lshr i64 %31, 7, !dbg !17
  %33 = trunc nuw nsw i64 %32 to i32
  %34 = mul nuw nsw i32 %33, 526336
  %.reass.2 = add i32 %34, %invariant.op
  %35 = sext i32 %.reass.2 to i64, !dbg !19
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %36, i1 false) #4, !dbg !20
  br label %.split5.us, !dbg !22

.split.us.preheader:                              ; preds = %7
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 true) #4, !dbg !20
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !20
  %40 = extractelement <2 x bfloat> %39, i64 0, !dbg !20
  %41 = extractelement <2 x bfloat> %39, i64 1, !dbg !20
  %42 = fpext bfloat %40 to float, !dbg !26
  %43 = fpext bfloat %41 to float, !dbg !26
  %44 = or disjoint i64 %18, 1024, !dbg !21
  %45 = lshr i64 %44, 7, !dbg !17
  %46 = trunc nuw nsw i64 %45 to i32
  %47 = mul nuw nsw i32 %46, 526336
  %.reass.us.1 = add i32 %47, %invariant.op
  %48 = sext i32 %.reass.us.1 to i64, !dbg !19
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 true) #4, !dbg !20
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !20
  %52 = extractelement <2 x bfloat> %51, i64 0, !dbg !20
  %53 = extractelement <2 x bfloat> %51, i64 1, !dbg !20
  %54 = fpext bfloat %52 to float, !dbg !26
  %55 = fpext bfloat %53 to float, !dbg !26
  %56 = fcmp olt bfloat %40, %52, !dbg !27
  %57 = fcmp olt bfloat %41, %53, !dbg !27
  %58 = fcmp uno bfloat %40, 0xR0000, !dbg !29
  %59 = fcmp uno bfloat %41, 0xR0000, !dbg !29
  %60 = or i1 %58, %56, !dbg !30
  %61 = or i1 %59, %57, !dbg !30
  %62 = select i1 %60, float %42, float %54, !dbg !31
  %63 = select i1 %61, float %43, float %55, !dbg !31
  %64 = fcmp ogt bfloat %40, %52, !dbg !32
  %65 = fcmp ogt bfloat %41, %53, !dbg !32
  %66 = or i1 %58, %64, !dbg !34
  %67 = or i1 %59, %65, !dbg !34
  %68 = select i1 %66, float %42, float %54, !dbg !35
  %69 = select i1 %67, float %43, float %55, !dbg !35
  %70 = or disjoint i64 %18, 2048, !dbg !21
  %71 = lshr i64 %70, 7, !dbg !17
  %72 = trunc nuw nsw i64 %71 to i32
  %73 = mul nuw nsw i32 %72, 526336
  %.reass.us.2 = add i32 %73, %invariant.op
  %74 = sext i32 %.reass.us.2 to i64, !dbg !19
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !19
  %76 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %75, i1 true) #4, !dbg !20
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !20
  %78 = extractelement <2 x bfloat> %77, i64 0, !dbg !20
  %79 = extractelement <2 x bfloat> %77, i64 1, !dbg !20
  %80 = fpext bfloat %78 to float, !dbg !26
  %81 = fpext bfloat %79 to float, !dbg !26
  %82 = fcmp olt float %62, %80, !dbg !27
  %83 = fcmp olt float %63, %81, !dbg !27
  %84 = fcmp uno float %62, 0.000000e+00, !dbg !29
  %85 = fcmp uno float %63, 0.000000e+00, !dbg !29
  %86 = or i1 %84, %82, !dbg !30
  %87 = or i1 %85, %83, !dbg !30
  %88 = select i1 %86, float %62, float %80, !dbg !31
  %89 = select i1 %87, float %63, float %81, !dbg !31
  %90 = fcmp ogt float %68, %80, !dbg !32
  %91 = fcmp ogt float %69, %81, !dbg !32
  %92 = fcmp uno float %68, 0.000000e+00, !dbg !36
  %93 = fcmp uno float %69, 0.000000e+00, !dbg !36
  %94 = or i1 %92, %90, !dbg !34
  %95 = or i1 %93, %91, !dbg !34
  %96 = select i1 %94, float %68, float %80, !dbg !35
  %97 = select i1 %95, float %69, float %81, !dbg !35
  br label %.split5.us, !dbg !22

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi25 = phi i64 [ %35, %.split.preheader ], [ %74, %.split.us.preheader ], !dbg !37
  %.pre-phi21 = phi i64 [ %31, %.split.preheader ], [ %70, %.split.us.preheader ], !dbg !38
  %.pre-phi20 = phi i64 [ %28, %.split.preheader ], [ %48, %.split.us.preheader ], !dbg !37
  %.pre-phi16 = phi i64 [ %24, %.split.preheader ], [ %44, %.split.us.preheader ], !dbg !38
  %98 = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %88, %.split.us.preheader ], !dbg !22
  %99 = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %89, %.split.us.preheader ], !dbg !22
  %100 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %96, %.split.us.preheader ], !dbg !22
  %101 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %97, %.split.us.preheader ], !dbg !22
  %102 = and i32 %10, 1, !dbg !11
  %103 = or disjoint i32 %9, %102, !dbg !12
  %104 = icmp slt i32 %103, 512, !dbg !13
  %105 = and i32 %10, 31, !dbg !11
  %106 = lshr i32 %10, 5, !dbg !11
  %107 = fcmp olt float %98, %99, !dbg !39
  %108 = fcmp uno float %98, 0.000000e+00, !dbg !41
  %109 = or i1 %107, %108, !dbg !42
  %110 = select i1 %109, float %98, float %99, !dbg !43
  %111 = bitcast float %110 to i32, !dbg !22
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !22
  %113 = bitcast i32 %112 to float, !dbg !22
  %114 = fcmp olt float %110, %113, !dbg !39
  %115 = fcmp uno float %110, 0.000000e+00, !dbg !41
  %116 = or i1 %115, %114, !dbg !42
  %117 = select i1 %116, float %110, float %113, !dbg !43
  %118 = bitcast float %117 to i32, !dbg !22
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !22
  %120 = bitcast i32 %119 to float, !dbg !22
  %121 = fcmp olt float %117, %120, !dbg !39
  %122 = fcmp uno float %117, 0.000000e+00, !dbg !41
  %123 = or i1 %121, %122, !dbg !42
  %124 = select i1 %123, float %117, float %120, !dbg !43
  %125 = bitcast float %124 to i32, !dbg !22
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !22
  %127 = bitcast i32 %126 to float, !dbg !22
  %128 = fcmp olt float %124, %127, !dbg !39
  %129 = fcmp uno float %124, 0.000000e+00, !dbg !41
  %130 = or i1 %128, %129, !dbg !42
  %131 = select i1 %130, float %124, float %127, !dbg !43
  %132 = bitcast float %131 to i32, !dbg !22
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !22
  %134 = bitcast i32 %133 to float, !dbg !22
  %135 = fcmp olt float %131, %134, !dbg !39
  %136 = fcmp uno float %131, 0.000000e+00, !dbg !41
  %137 = or i1 %135, %136, !dbg !42
  %138 = select i1 %137, float %131, float %134, !dbg !43
  %139 = bitcast float %138 to i32, !dbg !22
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !22
  %141 = bitcast i32 %140 to float, !dbg !22
  %142 = fcmp olt float %138, %141, !dbg !39
  %143 = fcmp uno float %138, 0.000000e+00, !dbg !41
  %144 = or i1 %142, %143, !dbg !42
  %145 = and i32 %106, 15, !dbg !22
  %146 = icmp eq i32 %105, 0, !dbg !22
  %147 = shl nuw nsw i32 %.lobit, 4, !dbg !22
  %148 = or disjoint i32 %147, %145, !dbg !22
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !22
  %150 = select i1 %144, i32 %139, i32 %140, !dbg !43
  %151 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %151, i1 %146) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %152 = icmp slt i32 %10, 32, !dbg !22
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !22
  %154 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %152) #4, !dbg !22
  %155 = bitcast i32 %154 to float, !dbg !22
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !22
  %157 = bitcast i32 %156 to float, !dbg !22
  %158 = fcmp olt float %155, %157, !dbg !39
  %159 = fcmp uno float %155, 0.000000e+00, !dbg !41
  %160 = or i1 %159, %158, !dbg !42
  %161 = select i1 %160, float %155, float %157, !dbg !43
  %162 = bitcast float %161 to i32, !dbg !22
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !22
  %164 = bitcast i32 %163 to float, !dbg !22
  %165 = fcmp olt float %161, %164, !dbg !39
  %166 = fcmp uno float %161, 0.000000e+00, !dbg !41
  %167 = or i1 %165, %166, !dbg !42
  %168 = select i1 %167, float %161, float %164, !dbg !43
  %169 = bitcast float %168 to i32, !dbg !22
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !22
  %171 = bitcast i32 %170 to float, !dbg !22
  %172 = fcmp olt float %168, %171, !dbg !39
  %173 = fcmp uno float %168, 0.000000e+00, !dbg !41
  %174 = or i1 %172, %173, !dbg !42
  %175 = select i1 %174, float %168, float %171, !dbg !43
  %176 = bitcast float %175 to i32, !dbg !22
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !22
  %178 = bitcast i32 %177 to float, !dbg !22
  %179 = fcmp olt float %175, %178, !dbg !39
  %180 = fcmp uno float %175, 0.000000e+00, !dbg !41
  %181 = or i1 %179, %180, !dbg !42
  %182 = and i32 %10, 15, !dbg !22
  %183 = icmp eq i32 %182, 0, !dbg !22
  %184 = and i1 %152, %183, !dbg !22
  %185 = select i1 %181, i32 %176, i32 %177, !dbg !43
  %186 = insertelement <1 x i32> poison, i32 %185, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %186, i1 %184) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !22
  %188 = load float, ptr addrspace(3) %187, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %189 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !44
  %190 = bitcast float %188 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %191 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %102, !dbg !44
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %193 = fcmp ogt float %100, %101, !dbg !47
  %194 = fcmp uno float %100, 0.000000e+00, !dbg !48
  %195 = or i1 %193, %194, !dbg !49
  %196 = select i1 %195, float %100, float %101, !dbg !50
  %197 = bitcast float %196 to i32, !dbg !45
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !45
  %199 = bitcast i32 %198 to float, !dbg !45
  %200 = fcmp ogt float %196, %199, !dbg !47
  %201 = fcmp uno float %196, 0.000000e+00, !dbg !48
  %202 = or i1 %201, %200, !dbg !49
  %203 = select i1 %202, float %196, float %199, !dbg !50
  %204 = bitcast float %203 to i32, !dbg !45
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !45
  %206 = bitcast i32 %205 to float, !dbg !45
  %207 = fcmp ogt float %203, %206, !dbg !47
  %208 = fcmp uno float %203, 0.000000e+00, !dbg !48
  %209 = or i1 %207, %208, !dbg !49
  %210 = select i1 %209, float %203, float %206, !dbg !50
  %211 = bitcast float %210 to i32, !dbg !45
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !45
  %213 = bitcast i32 %212 to float, !dbg !45
  %214 = fcmp ogt float %210, %213, !dbg !47
  %215 = fcmp uno float %210, 0.000000e+00, !dbg !48
  %216 = or i1 %214, %215, !dbg !49
  %217 = select i1 %216, float %210, float %213, !dbg !50
  %218 = bitcast float %217 to i32, !dbg !45
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !45
  %220 = bitcast i32 %219 to float, !dbg !45
  %221 = fcmp ogt float %217, %220, !dbg !47
  %222 = fcmp uno float %217, 0.000000e+00, !dbg !48
  %223 = or i1 %221, %222, !dbg !49
  %224 = select i1 %223, float %217, float %220, !dbg !50
  %225 = bitcast float %224 to i32, !dbg !45
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !45
  %227 = bitcast i32 %226 to float, !dbg !45
  %228 = fcmp ogt float %224, %227, !dbg !47
  %229 = fcmp uno float %224, 0.000000e+00, !dbg !48
  %230 = or i1 %228, %229, !dbg !49
  %231 = select i1 %230, i32 %225, i32 %226, !dbg !50
  %232 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %232, i1 %146) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %152) #4, !dbg !45
  %234 = bitcast i32 %233 to float, !dbg !45
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !45
  %236 = bitcast i32 %235 to float, !dbg !45
  %237 = fcmp ogt float %234, %236, !dbg !47
  %238 = fcmp uno float %234, 0.000000e+00, !dbg !48
  %239 = or i1 %238, %237, !dbg !49
  %240 = select i1 %239, float %234, float %236, !dbg !50
  %241 = bitcast float %240 to i32, !dbg !45
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 4, i32 31), !dbg !45
  %243 = bitcast i32 %242 to float, !dbg !45
  %244 = fcmp ogt float %240, %243, !dbg !47
  %245 = fcmp uno float %240, 0.000000e+00, !dbg !48
  %246 = or i1 %244, %245, !dbg !49
  %247 = select i1 %246, float %240, float %243, !dbg !50
  %248 = bitcast float %247 to i32, !dbg !45
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !45
  %250 = bitcast i32 %249 to float, !dbg !45
  %251 = fcmp ogt float %247, %250, !dbg !47
  %252 = fcmp uno float %247, 0.000000e+00, !dbg !48
  %253 = or i1 %251, %252, !dbg !49
  %254 = select i1 %253, float %247, float %250, !dbg !50
  %255 = bitcast float %254 to i32, !dbg !45
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !45
  %257 = bitcast i32 %256 to float, !dbg !45
  %258 = fcmp ogt float %254, %257, !dbg !47
  %259 = fcmp uno float %254, 0.000000e+00, !dbg !48
  %260 = or i1 %258, %259, !dbg !49
  %261 = select i1 %260, i32 %255, i32 %256, !dbg !50
  %262 = insertelement <1 x i32> poison, i32 %261, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %262, i1 %184) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %263 = load float, ptr addrspace(3) %187, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %264 = bitcast float %263 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %264, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %265 = load float, ptr addrspace(3) %191, align 4, !dbg !51
  %266 = sext i32 %103 to i64, !dbg !52
  %267 = getelementptr bfloat, ptr addrspace(1) %1, i64 %266, !dbg !52
  %268 = fptrunc float %192 to bfloat, !dbg !44
  %269 = and i32 %10, 1022, !dbg !44
  %270 = icmp eq i32 %269, 0, !dbg !44
  %271 = bitcast bfloat %268 to i16, !dbg !44
  %272 = and i1 %270, %104, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %271, ptr addrspace(1) %267, i1 %272) #4, !dbg !44
  %273 = getelementptr bfloat, ptr addrspace(1) %2, i64 %266, !dbg !53
  %274 = fptrunc float %265 to bfloat, !dbg !51
  %275 = bitcast bfloat %274 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %275, ptr addrspace(1) %273, i1 %272) #4, !dbg !51
  %.inv = fcmp oge float %188, 0.000000e+00, !dbg !54
  %276 = select i1 %.inv, float 0.000000e+00, float %188, !dbg !54
  %277 = fsub float 0.000000e+00, %276, !dbg !56
  %.inv2 = fcmp ole float %263, 0.000000e+00, !dbg !57
  %278 = select i1 %.inv2, float 0.000000e+00, float %263, !dbg !57
  %279 = fcmp ogt float %277, %278, !dbg !59
  %280 = fcmp uno float %277, 0.000000e+00, !dbg !61
  %281 = or i1 %280, %279, !dbg !62
  %282 = select i1 %281, float %277, float %278, !dbg !63
  %283 = fmul float %282, 0x3F80204080000000, !dbg !64
  %284 = fcmp ogt float %283, 0x3EE4F8B580000000, !dbg !65
  %285 = fcmp uno float %283, 0.000000e+00, !dbg !67
  %286 = or i1 %284, %285, !dbg !68
  %287 = select i1 %286, float %283, float 0x3EE4F8B580000000, !dbg !69
  %288 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %287), !dbg !70
  %289 = mul i32 %12, 3072, !dbg !71
  %290 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !37
  %291 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %290, i1 %13) #4, !dbg !72
  %292 = bitcast i32 %291 to <2 x bfloat>, !dbg !72
  %293 = extractelement <2 x bfloat> %292, i64 0, !dbg !72
  %294 = extractelement <2 x bfloat> %292, i64 1, !dbg !72
  %295 = fpext bfloat %293 to float, !dbg !73
  %296 = fpext bfloat %294 to float, !dbg !73
  %297 = fmul float %288, %295, !dbg !74
  %298 = fmul float %288, %296, !dbg !74
  %299 = tail call float @llvm.nvvm.round.f(float %297) #4, !dbg !75
  %300 = tail call float @llvm.nvvm.round.f(float %298) #4, !dbg !75
  %301 = insertelement <2 x float> poison, float %299, i64 0, !dbg !76
  %302 = insertelement <2 x float> %301, float %300, i64 1, !dbg !76
  %303 = fcmp ogt <2 x float> %302, splat (float -1.270000e+02), !dbg !76
  %304 = fcmp uno <2 x float> %302, zeroinitializer, !dbg !78
  %305 = or <2 x i1> %303, %304, !dbg !79
  %306 = select <2 x i1> %305, <2 x float> %302, <2 x float> splat (float -1.270000e+02), !dbg !80
  %307 = fcmp olt <2 x float> %306, splat (float 1.270000e+02), !dbg !81
  %308 = fcmp uno <2 x float> %306, zeroinitializer, !dbg !83
  %309 = or <2 x i1> %307, %308, !dbg !84
  %310 = fptosi <2 x float> %306 to <2 x i8>, !dbg !85
  %311 = select <2 x i1> %309, <2 x i8> %310, <2 x i8> splat (i8 127), !dbg !86
  %312 = or disjoint i32 %15, %289, !dbg !87
  %313 = sext i32 %312 to i64, !dbg !88
  %314 = getelementptr i8, ptr addrspace(1) %3, i64 %313, !dbg !88
  %315 = bitcast <2 x i8> %311 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %315, ptr addrspace(1) %314, i1 %13) #4, !dbg !89
  %316 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi20, !dbg !37
  %317 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %316, i1 %13) #4, !dbg !72
  %318 = bitcast i32 %317 to <2 x bfloat>, !dbg !72
  %319 = extractelement <2 x bfloat> %318, i64 0, !dbg !72
  %320 = extractelement <2 x bfloat> %318, i64 1, !dbg !72
  %321 = fpext bfloat %319 to float, !dbg !73
  %322 = fpext bfloat %320 to float, !dbg !73
  %323 = fmul float %288, %321, !dbg !74
  %324 = fmul float %288, %322, !dbg !74
  %325 = tail call float @llvm.nvvm.round.f(float %323) #4, !dbg !75
  %326 = tail call float @llvm.nvvm.round.f(float %324) #4, !dbg !75
  %327 = insertelement <2 x float> poison, float %325, i64 0, !dbg !76
  %328 = insertelement <2 x float> %327, float %326, i64 1, !dbg !76
  %329 = fcmp ogt <2 x float> %328, splat (float -1.270000e+02), !dbg !76
  %330 = fcmp uno <2 x float> %328, zeroinitializer, !dbg !78
  %331 = or <2 x i1> %329, %330, !dbg !79
  %332 = select <2 x i1> %331, <2 x float> %328, <2 x float> splat (float -1.270000e+02), !dbg !80
  %333 = fcmp olt <2 x float> %332, splat (float 1.270000e+02), !dbg !81
  %334 = fcmp uno <2 x float> %332, zeroinitializer, !dbg !83
  %335 = or <2 x i1> %333, %334, !dbg !84
  %336 = fptosi <2 x float> %332 to <2 x i8>, !dbg !85
  %337 = select <2 x i1> %335, <2 x i8> %336, <2 x i8> splat (i8 127), !dbg !86
  %338 = trunc nuw nsw i64 %.pre-phi16 to i32, !dbg !87
  %339 = add i32 %289, %338, !dbg !87
  %340 = sext i32 %339 to i64, !dbg !88
  %341 = getelementptr i8, ptr addrspace(1) %3, i64 %340, !dbg !88
  %342 = bitcast <2 x i8> %337 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %342, ptr addrspace(1) %341, i1 %13) #4, !dbg !89
  %343 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi25, !dbg !37
  %344 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %343, i1 %13) #4, !dbg !72
  %345 = bitcast i32 %344 to <2 x bfloat>, !dbg !72
  %346 = extractelement <2 x bfloat> %345, i64 0, !dbg !72
  %347 = extractelement <2 x bfloat> %345, i64 1, !dbg !72
  %348 = fpext bfloat %346 to float, !dbg !73
  %349 = fpext bfloat %347 to float, !dbg !73
  %350 = fmul float %288, %348, !dbg !74
  %351 = fmul float %288, %349, !dbg !74
  %352 = tail call float @llvm.nvvm.round.f(float %350) #4, !dbg !75
  %353 = tail call float @llvm.nvvm.round.f(float %351) #4, !dbg !75
  %354 = insertelement <2 x float> poison, float %352, i64 0, !dbg !76
  %355 = insertelement <2 x float> %354, float %353, i64 1, !dbg !76
  %356 = fcmp ogt <2 x float> %355, splat (float -1.270000e+02), !dbg !76
  %357 = fcmp uno <2 x float> %355, zeroinitializer, !dbg !78
  %358 = or <2 x i1> %356, %357, !dbg !79
  %359 = select <2 x i1> %358, <2 x float> %355, <2 x float> splat (float -1.270000e+02), !dbg !80
  %360 = fcmp olt <2 x float> %359, splat (float 1.270000e+02), !dbg !81
  %361 = fcmp uno <2 x float> %359, zeroinitializer, !dbg !83
  %362 = or <2 x i1> %360, %361, !dbg !84
  %363 = fptosi <2 x float> %359 to <2 x i8>, !dbg !85
  %364 = select <2 x i1> %362, <2 x i8> %363, <2 x i8> splat (i8 127), !dbg !86
  %365 = trunc nuw nsw i64 %.pre-phi21 to i32, !dbg !87
  %366 = add i32 %289, %365, !dbg !87
  %367 = sext i32 %366 to i64, !dbg !88
  %368 = getelementptr i8, ptr addrspace(1) %3, i64 %367, !dbg !88
  %369 = bitcast <2 x i8> %364 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %369, ptr addrspace(1) %368, i1 %13) #4, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 43, column: 38, scope: !6)
!26 = !DILocation(line: 37, column: 144, scope: !6)
!27 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !28)
!28 = !DILocation(line: 39, column: 45, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !28)
!32 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 45, scope: !6)
!34 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !33)
!35 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !33)
!36 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !33)
!37 = !DILocation(line: 53, column: 34, scope: !6)
!38 = !DILocation(line: 48, column: 31, scope: !6)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !25)
!40 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!41 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !25)
!42 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !25)
!43 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !25)
!44 = !DILocation(line: 45, column: 36, scope: !6)
!45 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 38, scope: !6)
!47 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !46)
!49 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !46)
!50 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !46)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 45, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 25, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 53, column: 83, scope: !6)
!73 = !DILocation(line: 53, column: 145, scope: !6)
!74 = !DILocation(line: 69, column: 23, scope: !6)
!75 = !DILocation(line: 70, column: 36, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !77)
!81 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 46, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !82)
!85 = !DILocation(line: 77, column: 25, scope: !6)
!86 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !82)
!87 = !DILocation(line: 78, column: 36, scope: !6)
!88 = !DILocation(line: 78, column: 29, scope: !6)
!89 = !DILocation(line: 78, column: 53, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
