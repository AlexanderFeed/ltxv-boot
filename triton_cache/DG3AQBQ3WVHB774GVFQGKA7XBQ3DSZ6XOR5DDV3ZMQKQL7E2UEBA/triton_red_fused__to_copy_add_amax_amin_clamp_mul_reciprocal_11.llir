; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 7, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %10, 2, !dbg !14
  %15 = and i32 %14, 124, !dbg !14
  %16 = and i32 %14, 508, !dbg !14
  %17 = shl i32 %12, 7, !dbg !15
  %invariant.op = or disjoint i32 %17, %15, !dbg !16
  %18 = zext nneg i32 %16 to i64, !dbg !16
  %19 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !17
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  %21 = and i32 %10, 31, !dbg !11
  %22 = lshr i32 %16, 7, !dbg !18
  %23 = mul nuw nsw i32 %22, 526336
  %.reass = add i32 %23, %invariant.op
  %24 = sext i32 %.reass to i64, !dbg !19
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %13) #4, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = shufflevector <2 x bfloat> %28, <2 x bfloat> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %32 = fpext <4 x bfloat> %31 to <4 x float>, !dbg !21
  %33 = shufflevector <4 x float> %32, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %34 = fcmp olt <8 x float> %33, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %35 = fcmp ogt <8 x float> %33, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %36 = shufflevector <8 x i1> %34, <8 x i1> %35, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %37 = select <8 x i1> %36, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %33, !dbg !26
  %38 = select <8 x i1> %20, <8 x float> %37, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %39 = lshr i32 %16, 7, !dbg !18
  %40 = mul nuw nsw i32 %39, 526336
  %41 = add nuw nsw i32 %40, 2105344
  %.reass.1 = add i32 %41, %invariant.op
  %42 = sext i32 %.reass.1 to i64, !dbg !19
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %13) #4, !dbg !20
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !20
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !20
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !20
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !20
  %49 = fcmp uno <8 x float> %38, zeroinitializer, !dbg !27
  %50 = shufflevector <2 x bfloat> %46, <2 x bfloat> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %51 = fpext <4 x bfloat> %50 to <4 x float>, !dbg !21
  %52 = shufflevector <4 x float> %51, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %53 = fcmp ogt <8 x float> %38, %52, !dbg !22
  %54 = fcmp olt <8 x float> %38, %52, !dbg !22
  %55 = shufflevector <8 x i1> %53, <8 x i1> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %56 = or <8 x i1> %49, %55, !dbg !28
  %57 = select <8 x i1> %56, <8 x float> %38, <8 x float> %52, !dbg !26
  %58 = select <8 x i1> %20, <8 x float> %57, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %59 = lshr i32 %16, 7, !dbg !18
  %60 = mul nuw nsw i32 %59, 526336
  %61 = add nuw nsw i32 %60, 4210688
  %.reass.2 = add i32 %61, %invariant.op
  %62 = sext i32 %.reass.2 to i64, !dbg !19
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !19
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %63, i1 %13) #4, !dbg !20
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !20
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !20
  %67 = extractvalue { i32, i32 } %64, 1, !dbg !20
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !20
  %69 = fcmp uno <8 x float> %58, zeroinitializer, !dbg !27
  %70 = shufflevector <2 x bfloat> %66, <2 x bfloat> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %71 = fpext <4 x bfloat> %70 to <4 x float>, !dbg !21
  %72 = shufflevector <4 x float> %71, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %73 = fcmp ogt <8 x float> %58, %72, !dbg !22
  %74 = fcmp olt <8 x float> %58, %72, !dbg !22
  %75 = shufflevector <8 x i1> %73, <8 x i1> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %76 = or <8 x i1> %69, %75, !dbg !28
  %77 = select <8 x i1> %76, <8 x float> %58, <8 x float> %72, !dbg !26
  %78 = select <8 x i1> %20, <8 x float> %77, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %79 = lshr i32 %16, 7, !dbg !18
  %80 = mul nuw nsw i32 %79, 526336
  %81 = add nuw nsw i32 %80, 6316032
  %.reass.3 = add i32 %81, %invariant.op
  %82 = sext i32 %.reass.3 to i64, !dbg !19
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !19
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %83, i1 %13) #4, !dbg !20
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !20
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !20
  %87 = extractvalue { i32, i32 } %84, 1, !dbg !20
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !20
  %89 = fcmp uno <8 x float> %78, zeroinitializer, !dbg !27
  %90 = shufflevector <2 x bfloat> %86, <2 x bfloat> %88, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %91 = fpext <4 x bfloat> %90 to <4 x float>, !dbg !21
  %92 = shufflevector <4 x float> %91, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %93 = fcmp ogt <8 x float> %78, %92, !dbg !22
  %94 = fcmp olt <8 x float> %78, %92, !dbg !22
  %95 = shufflevector <8 x i1> %93, <8 x i1> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %96 = or <8 x i1> %89, %95, !dbg !28
  %97 = select <8 x i1> %96, <8 x float> %78, <8 x float> %92, !dbg !26
  %98 = select <8 x i1> %20, <8 x float> %97, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %99 = lshr i32 %16, 7, !dbg !18
  %100 = mul nuw nsw i32 %99, 526336
  %101 = add nuw nsw i32 %100, 8421376
  %.reass.4 = add i32 %101, %invariant.op
  %102 = sext i32 %.reass.4 to i64, !dbg !19
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !19
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %103, i1 %13) #4, !dbg !20
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !20
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !20
  %107 = extractvalue { i32, i32 } %104, 1, !dbg !20
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !20
  %109 = fcmp uno <8 x float> %98, zeroinitializer, !dbg !27
  %110 = shufflevector <2 x bfloat> %106, <2 x bfloat> %108, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %111 = fpext <4 x bfloat> %110 to <4 x float>, !dbg !21
  %112 = shufflevector <4 x float> %111, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %113 = fcmp ogt <8 x float> %98, %112, !dbg !22
  %114 = fcmp olt <8 x float> %98, %112, !dbg !22
  %115 = shufflevector <8 x i1> %113, <8 x i1> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %116 = or <8 x i1> %109, %115, !dbg !28
  %117 = select <8 x i1> %116, <8 x float> %98, <8 x float> %112, !dbg !26
  %118 = select <8 x i1> %20, <8 x float> %117, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %119 = lshr i32 %16, 7, !dbg !18
  %120 = mul nuw nsw i32 %119, 526336
  %121 = add nuw nsw i32 %120, 10526720
  %.reass.5 = add i32 %121, %invariant.op
  %122 = sext i32 %.reass.5 to i64, !dbg !19
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !19
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %123, i1 %13) #4, !dbg !20
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !20
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !20
  %127 = extractvalue { i32, i32 } %124, 1, !dbg !20
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !20
  %129 = fcmp uno <8 x float> %118, zeroinitializer, !dbg !27
  %130 = shufflevector <2 x bfloat> %126, <2 x bfloat> %128, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %131 = fpext <4 x bfloat> %130 to <4 x float>, !dbg !21
  %132 = shufflevector <4 x float> %131, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %133 = fcmp ogt <8 x float> %118, %132, !dbg !22
  %134 = fcmp olt <8 x float> %118, %132, !dbg !22
  %135 = shufflevector <8 x i1> %133, <8 x i1> %134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %136 = or <8 x i1> %129, %135, !dbg !28
  %137 = select <8 x i1> %136, <8 x float> %118, <8 x float> %132, !dbg !26
  %138 = select <8 x i1> %20, <8 x float> %137, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %139 = lshr i32 %10, 5, !dbg !11
  %140 = and i32 %10, 1, !dbg !11
  %141 = or disjoint i32 %9, %140, !dbg !12
  %142 = icmp slt i32 %141, 512, !dbg !13
  %143 = extractelement <8 x float> %138, i64 4, !dbg !29
  %144 = extractelement <8 x float> %138, i64 5, !dbg !29
  %145 = fcmp olt float %143, %144, !dbg !29
  %146 = fcmp uno float %143, 0.000000e+00, !dbg !32
  %147 = or i1 %145, %146, !dbg !33
  %148 = select i1 %147, float %143, float %144, !dbg !34
  %149 = extractelement <8 x float> %138, i64 6, !dbg !29
  %150 = fcmp olt float %148, %149, !dbg !29
  %151 = fcmp uno float %148, 0.000000e+00, !dbg !32
  %152 = or i1 %150, %151, !dbg !33
  %153 = select i1 %152, float %148, float %149, !dbg !34
  %154 = extractelement <8 x float> %138, i64 7, !dbg !29
  %155 = fcmp olt float %153, %154, !dbg !29
  %156 = fcmp uno float %153, 0.000000e+00, !dbg !32
  %157 = or i1 %155, %156, !dbg !33
  %158 = select i1 %157, float %153, float %154, !dbg !34
  %159 = bitcast float %158 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fcmp olt float %158, %161, !dbg !29
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !32
  %164 = or i1 %163, %162, !dbg !33
  %165 = select i1 %164, float %158, float %161, !dbg !34
  %166 = bitcast float %165 to i32, !dbg !35
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !35
  %168 = bitcast i32 %167 to float, !dbg !35
  %169 = fcmp olt float %165, %168, !dbg !29
  %170 = fcmp uno float %165, 0.000000e+00, !dbg !32
  %171 = or i1 %169, %170, !dbg !33
  %172 = select i1 %171, float %165, float %168, !dbg !34
  %173 = bitcast float %172 to i32, !dbg !35
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !35
  %175 = bitcast i32 %174 to float, !dbg !35
  %176 = fcmp olt float %172, %175, !dbg !29
  %177 = fcmp uno float %172, 0.000000e+00, !dbg !32
  %178 = or i1 %176, %177, !dbg !33
  %179 = select i1 %178, float %172, float %175, !dbg !34
  %180 = bitcast float %179 to i32, !dbg !35
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !35
  %182 = bitcast i32 %181 to float, !dbg !35
  %183 = fcmp olt float %179, %182, !dbg !29
  %184 = fcmp uno float %179, 0.000000e+00, !dbg !32
  %185 = or i1 %183, %184, !dbg !33
  %186 = select i1 %185, float %179, float %182, !dbg !34
  %187 = bitcast float %186 to i32, !dbg !35
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !35
  %189 = bitcast i32 %188 to float, !dbg !35
  %190 = fcmp olt float %186, %189, !dbg !29
  %191 = fcmp uno float %186, 0.000000e+00, !dbg !32
  %192 = or i1 %190, %191, !dbg !33
  %193 = and i32 %139, 3, !dbg !35
  %194 = icmp eq i32 %21, 0, !dbg !35
  %195 = shl nuw nsw i32 %.lobit, 2, !dbg !35
  %196 = or disjoint i32 %195, %193, !dbg !35
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !35
  %198 = select i1 %192, i32 %187, i32 %188, !dbg !34
  %199 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %199, i1 %194) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %200 = icmp slt i32 %10, 8, !dbg !35
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %202 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %201, i1 %200) #4, !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !35
  %205 = bitcast i32 %204 to float, !dbg !35
  %206 = fcmp olt float %203, %205, !dbg !29
  %207 = fcmp uno float %203, 0.000000e+00, !dbg !32
  %208 = or i1 %207, %206, !dbg !33
  %209 = select i1 %208, float %203, float %205, !dbg !34
  %210 = bitcast float %209 to i32, !dbg !35
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !35
  %212 = bitcast i32 %211 to float, !dbg !35
  %213 = fcmp olt float %209, %212, !dbg !29
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !32
  %215 = or i1 %213, %214, !dbg !33
  %216 = and i32 %10, 3, !dbg !35
  %217 = icmp eq i32 %216, 0, !dbg !35
  %218 = and i1 %200, %217, !dbg !35
  %219 = select i1 %215, i32 %210, i32 %211, !dbg !34
  %220 = insertelement <1 x i32> poison, i32 %219, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %220, i1 %218) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !35
  %222 = load float, ptr addrspace(3) %221, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %223 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !36
  %224 = bitcast float %222 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %225 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %140, !dbg !36
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %227 = extractelement <8 x float> %138, i64 0, !dbg !39
  %228 = extractelement <8 x float> %138, i64 1, !dbg !39
  %229 = fcmp ogt float %227, %228, !dbg !39
  %230 = fcmp uno float %227, 0.000000e+00, !dbg !40
  %231 = or i1 %229, %230, !dbg !41
  %232 = select i1 %231, float %227, float %228, !dbg !42
  %233 = extractelement <8 x float> %138, i64 2, !dbg !39
  %234 = fcmp ogt float %232, %233, !dbg !39
  %235 = fcmp uno float %232, 0.000000e+00, !dbg !40
  %236 = or i1 %234, %235, !dbg !41
  %237 = select i1 %236, float %232, float %233, !dbg !42
  %238 = extractelement <8 x float> %138, i64 3, !dbg !39
  %239 = fcmp ogt float %237, %238, !dbg !39
  %240 = fcmp uno float %237, 0.000000e+00, !dbg !40
  %241 = or i1 %239, %240, !dbg !41
  %242 = select i1 %241, float %237, float %238, !dbg !42
  %243 = bitcast float %242 to i32, !dbg !37
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !37
  %245 = bitcast i32 %244 to float, !dbg !37
  %246 = fcmp ogt float %242, %245, !dbg !39
  %247 = fcmp uno float %242, 0.000000e+00, !dbg !40
  %248 = or i1 %247, %246, !dbg !41
  %249 = select i1 %248, float %242, float %245, !dbg !42
  %250 = bitcast float %249 to i32, !dbg !37
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !37
  %252 = bitcast i32 %251 to float, !dbg !37
  %253 = fcmp ogt float %249, %252, !dbg !39
  %254 = fcmp uno float %249, 0.000000e+00, !dbg !40
  %255 = or i1 %253, %254, !dbg !41
  %256 = select i1 %255, float %249, float %252, !dbg !42
  %257 = bitcast float %256 to i32, !dbg !37
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = fcmp ogt float %256, %259, !dbg !39
  %261 = fcmp uno float %256, 0.000000e+00, !dbg !40
  %262 = or i1 %260, %261, !dbg !41
  %263 = select i1 %262, float %256, float %259, !dbg !42
  %264 = bitcast float %263 to i32, !dbg !37
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !37
  %266 = bitcast i32 %265 to float, !dbg !37
  %267 = fcmp ogt float %263, %266, !dbg !39
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !40
  %269 = or i1 %267, %268, !dbg !41
  %270 = select i1 %269, float %263, float %266, !dbg !42
  %271 = bitcast float %270 to i32, !dbg !37
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 1, i32 31), !dbg !37
  %273 = bitcast i32 %272 to float, !dbg !37
  %274 = fcmp ogt float %270, %273, !dbg !39
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !40
  %276 = or i1 %274, %275, !dbg !41
  %277 = select i1 %276, i32 %271, i32 %272, !dbg !42
  %278 = insertelement <1 x i32> poison, i32 %277, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %278, i1 %194) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %279 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %201, i1 %200) #4, !dbg !37
  %280 = bitcast i32 %279 to float, !dbg !37
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !37
  %282 = bitcast i32 %281 to float, !dbg !37
  %283 = fcmp ogt float %280, %282, !dbg !39
  %284 = fcmp uno float %280, 0.000000e+00, !dbg !40
  %285 = or i1 %284, %283, !dbg !41
  %286 = select i1 %285, float %280, float %282, !dbg !42
  %287 = bitcast float %286 to i32, !dbg !37
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !37
  %289 = bitcast i32 %288 to float, !dbg !37
  %290 = fcmp ogt float %286, %289, !dbg !39
  %291 = fcmp uno float %286, 0.000000e+00, !dbg !40
  %292 = or i1 %290, %291, !dbg !41
  %293 = select i1 %292, i32 %287, i32 %288, !dbg !42
  %294 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %294, i1 %218) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %295 = load float, ptr addrspace(3) %221, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %296 = bitcast float %295 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %296, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %297 = load float, ptr addrspace(3) %225, align 4, !dbg !43
  %298 = sext i32 %141 to i64, !dbg !44
  %299 = getelementptr bfloat, ptr addrspace(1) %1, i64 %298, !dbg !44
  %300 = fptrunc float %226 to bfloat, !dbg !36
  %301 = and i32 %10, 254, !dbg !36
  %302 = icmp eq i32 %301, 0, !dbg !36
  %303 = bitcast bfloat %300 to i16, !dbg !36
  %304 = and i1 %302, %142, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %303, ptr addrspace(1) %299, i1 %304) #4, !dbg !36
  %305 = getelementptr bfloat, ptr addrspace(1) %2, i64 %298, !dbg !45
  %306 = fptrunc float %297 to bfloat, !dbg !43
  %307 = bitcast bfloat %306 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %307, ptr addrspace(1) %305, i1 %304) #4, !dbg !43
  %.inv = fcmp oge float %222, 0.000000e+00, !dbg !46
  %308 = select i1 %.inv, float 0.000000e+00, float %222, !dbg !46
  %309 = fsub float 0.000000e+00, %308, !dbg !48
  %.inv2 = fcmp ole float %295, 0.000000e+00, !dbg !49
  %310 = select i1 %.inv2, float 0.000000e+00, float %295, !dbg !49
  %311 = fcmp ogt float %309, %310, !dbg !51
  %312 = fcmp uno float %309, 0.000000e+00, !dbg !53
  %313 = or i1 %312, %311, !dbg !54
  %314 = select i1 %313, float %309, float %310, !dbg !55
  %315 = fmul float %314, 0x3F80204080000000, !dbg !56
  %316 = fcmp ogt float %315, 0x3EE4F8B580000000, !dbg !57
  %317 = fcmp uno float %315, 0.000000e+00, !dbg !59
  %318 = or i1 %316, %317, !dbg !60
  %319 = select i1 %318, float %315, float 0x3EE4F8B580000000, !dbg !61
  %320 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %319), !dbg !62
  %321 = mul i32 %12, 3072, !dbg !63
  br label %322, !dbg !64

322:                                              ; preds = %7, %322
  %indvars.iv13 = phi i64 [ 0, %7 ], [ %indvars.iv.next14, %322 ]
  %323 = or disjoint i64 %indvars.iv13, %18, !dbg !65
  %324 = lshr i64 %323, 7, !dbg !66
  %325 = trunc i64 %324 to i32
  %326 = mul i32 %325, 526336
  %.reass5 = add i32 %326, %invariant.op
  %327 = sext i32 %.reass5 to i64, !dbg !67
  %328 = getelementptr bfloat, ptr addrspace(1) %0, i64 %327, !dbg !67
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %328, i1 %13) #4, !dbg !68
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !68
  %331 = bitcast i32 %330 to <2 x bfloat>, !dbg !68
  %332 = extractvalue { i32, i32 } %329, 1, !dbg !68
  %333 = bitcast i32 %332 to <2 x bfloat>, !dbg !68
  %334 = extractelement <2 x bfloat> %331, i64 0, !dbg !68
  %335 = extractelement <2 x bfloat> %331, i64 1, !dbg !68
  %336 = extractelement <2 x bfloat> %333, i64 0, !dbg !68
  %337 = extractelement <2 x bfloat> %333, i64 1, !dbg !68
  %338 = fpext bfloat %334 to float, !dbg !69
  %339 = fpext bfloat %335 to float, !dbg !69
  %340 = fpext bfloat %336 to float, !dbg !69
  %341 = fpext bfloat %337 to float, !dbg !69
  %342 = fmul float %320, %338, !dbg !70
  %343 = fmul float %320, %339, !dbg !70
  %344 = fmul float %320, %340, !dbg !70
  %345 = fmul float %320, %341, !dbg !70
  %346 = tail call float @llvm.nvvm.round.f(float %342) #4, !dbg !71
  %347 = tail call float @llvm.nvvm.round.f(float %343) #4, !dbg !71
  %348 = tail call float @llvm.nvvm.round.f(float %344) #4, !dbg !71
  %349 = tail call float @llvm.nvvm.round.f(float %345) #4, !dbg !71
  %350 = insertelement <4 x float> poison, float %346, i64 0, !dbg !72
  %351 = insertelement <4 x float> %350, float %347, i64 1, !dbg !72
  %352 = insertelement <4 x float> %351, float %348, i64 2, !dbg !72
  %353 = insertelement <4 x float> %352, float %349, i64 3, !dbg !72
  %354 = fcmp ogt <4 x float> %353, splat (float -1.270000e+02), !dbg !72
  %355 = fcmp uno <4 x float> %353, zeroinitializer, !dbg !74
  %356 = or <4 x i1> %354, %355, !dbg !75
  %357 = select <4 x i1> %356, <4 x float> %353, <4 x float> splat (float -1.270000e+02), !dbg !76
  %358 = fcmp olt <4 x float> %357, splat (float 1.270000e+02), !dbg !77
  %359 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !79
  %360 = or <4 x i1> %358, %359, !dbg !80
  %361 = fptosi <4 x float> %357 to <4 x i8>, !dbg !81
  %362 = select <4 x i1> %360, <4 x i8> %361, <4 x i8> splat (i8 127), !dbg !82
  %363 = trunc nuw nsw i64 %323 to i32, !dbg !83
  %364 = add i32 %321, %363, !dbg !83
  %365 = sext i32 %364 to i64, !dbg !84
  %366 = getelementptr i8, ptr addrspace(1) %3, i64 %365, !dbg !84
  %367 = bitcast <4 x i8> %362 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %366, i1 %13) #4, !dbg !85
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 512, !dbg !64
  %368 = icmp samesign ult i64 %indvars.iv13, 2560, !dbg !64
  br i1 %368, label %322, label %369, !dbg !64

369:                                              ; preds = %322
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 42, column: 48, scope: !6)
!18 = !DILocation(line: 37, column: 59, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 41, column: 45, scope: !6)
!26 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 94, column: 15, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!31 = !DILocation(line: 43, column: 38, scope: !6)
!32 = !DILocation(line: 96, column: 21, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 96, column: 16, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 97, column: 29, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !31)
!36 = !DILocation(line: 45, column: 36, scope: !6)
!37 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 38, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !30, inlinedAt: !38)
!40 = !DILocation(line: 104, column: 21, scope: !30, inlinedAt: !38)
!41 = !DILocation(line: 104, column: 16, scope: !30, inlinedAt: !38)
!42 = !DILocation(line: 105, column: 29, scope: !30, inlinedAt: !38)
!43 = !DILocation(line: 46, column: 36, scope: !6)
!44 = !DILocation(line: 45, column: 25, scope: !6)
!45 = !DILocation(line: 46, column: 25, scope: !6)
!46 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !47)
!47 = !DILocation(line: 55, column: 44, scope: !6)
!48 = !DILocation(line: 56, column: 16, scope: !6)
!49 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !50)
!50 = !DILocation(line: 57, column: 45, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !52)
!52 = !DILocation(line: 58, column: 45, scope: !6)
!53 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !52)
!54 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !52)
!55 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !52)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !58)
!58 = !DILocation(line: 63, column: 46, scope: !6)
!59 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !58)
!60 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !58)
!61 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !58)
!62 = !DILocation(line: 66, column: 25, scope: !6)
!63 = !DILocation(line: 78, column: 41, scope: !6)
!64 = !DILocation(line: 47, column: 40, scope: !6)
!65 = !DILocation(line: 48, column: 31, scope: !6)
!66 = !DILocation(line: 53, column: 59, scope: !6)
!67 = !DILocation(line: 53, column: 34, scope: !6)
!68 = !DILocation(line: 53, column: 83, scope: !6)
!69 = !DILocation(line: 53, column: 145, scope: !6)
!70 = !DILocation(line: 69, column: 23, scope: !6)
!71 = !DILocation(line: 70, column: 36, scope: !6)
!72 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !73)
!73 = !DILocation(line: 73, column: 46, scope: !6)
!74 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !73)
!75 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !73)
!76 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !73)
!77 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !78)
!78 = !DILocation(line: 75, column: 46, scope: !6)
!79 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !78)
!80 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !78)
!81 = !DILocation(line: 77, column: 25, scope: !6)
!82 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !78)
!83 = !DILocation(line: 78, column: 36, scope: !6)
!84 = !DILocation(line: 78, column: 29, scope: !6)
!85 = !DILocation(line: 78, column: 53, scope: !6)
!86 = !DILocation(line: 47, column: 4, scope: !6)
