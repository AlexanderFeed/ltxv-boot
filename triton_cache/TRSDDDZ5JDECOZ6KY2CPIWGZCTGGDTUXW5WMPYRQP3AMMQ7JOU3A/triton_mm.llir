; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 512, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 512, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = lshr i32 %15, 1, !dbg !19
  %20 = and i32 %19, 55, !dbg !19
  %21 = or disjoint i32 %20, %18, !dbg !19
  %22 = shl i32 %15, 3, !dbg !19
  %23 = and i32 %22, 8, !dbg !19
  %24 = or disjoint i32 %14, %21, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = or disjoint i32 %25, %21, !dbg !22
  %27 = srem i32 %24, 512, !dbg !23
  %28 = srem i32 %26, 4096, !dbg !24
  %29 = shl nsw i32 %27, 12, !dbg !25
  %30 = shl nsw i32 %28, 12, !dbg !26
  %31 = or disjoint i32 %29, %23, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = xor i32 %23, %16, !dbg !29
  %35 = shl nuw nsw i32 %21, 4, !dbg !29
  %36 = or disjoint i32 %35, %34, !dbg !29
  %37 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %36, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %37, ptr addrspace(1) %33, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %38 = or disjoint i32 %30, %23, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr bfloat, ptr addrspace(1) %1, i64 %39, !dbg !31
  %41 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %36, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %41, ptr addrspace(1) %40, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, 32, !dbg !33
  %42 = shl i32 %15, 1
  %43 = and i32 %42, 8
  %44 = and i32 %15, 7
  %45 = and i32 %15, 15
  %46 = xor i32 %43, %18
  %47 = lshr i32 %15, 2
  %48 = and i32 %47, 16
  %49 = or disjoint i32 %48, %45
  %50 = shl nuw nsw i32 %49, 4
  %51 = or disjoint i32 %50, %46
  %.reass = or disjoint i32 %44, %invariant.op
  %52 = or disjoint i32 %.reass, %48
  %53 = shl nuw nsw i32 %52, 4
  %54 = or disjoint i32 %53, %46
  %55 = xor i32 %43, %16
  %56 = lshr i32 %15, 2
  %57 = and i32 %56, 8
  %58 = or disjoint i32 %57, %44
  %59 = shl nuw nsw i32 %58, 4
  %60 = or disjoint i32 %59, %55
  %61 = or disjoint i32 %60, 256
  %62 = or disjoint i32 %60, 512
  %63 = or disjoint i32 %60, 768
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !33
  %invariant.gep149 = getelementptr bfloat, ptr addrspace(1) %1, i64 %39, !dbg !33
  br label %64, !dbg !33

64:                                               ; preds = %4, %64
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %64 ]
  %65 = phi i32 [ -1, %4 ], [ %100, %64 ]
  %66 = phi float [ 0.000000e+00, %4 ], [ %139, %64 ]
  %67 = phi float [ 0.000000e+00, %4 ], [ %140, %64 ]
  %68 = phi float [ 0.000000e+00, %4 ], [ %141, %64 ]
  %69 = phi float [ 0.000000e+00, %4 ], [ %142, %64 ]
  %70 = phi float [ 0.000000e+00, %4 ], [ %144, %64 ]
  %71 = phi float [ 0.000000e+00, %4 ], [ %145, %64 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %146, %64 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %147, %64 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %149, %64 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %150, %64 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %151, %64 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %152, %64 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %154, %64 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %155, %64 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %156, %64 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %157, %64 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %159, %64 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %160, %64 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %161, %64 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %162, %64 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %164, %64 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %165, %64 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %166, %64 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %167, %64 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %169, %64 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %170, %64 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %171, %64 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %172, %64 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %174, %64 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %175, %64 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %176, %64 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %177, %64 ]
  %.not50 = icmp eq i64 %indvars.iv, 255, !dbg !33
  %98 = add i32 %65, 1, !dbg !33
  %99 = icmp ugt i32 %65, 2147483646, !dbg !33
  %100 = select i1 %99, i32 %98, i32 0, !dbg !33
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %101 = shl i32 %100, 10, !dbg !29
  %102 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %101, !dbg !29
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %102, i32 %51, !dbg !29
  %104 = ptrtoint ptr addrspace(3) %103 to i32, !dbg !29
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %104) #1, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !29
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %102, i32 %54, !dbg !29
  %111 = ptrtoint ptr addrspace(3) %110 to i32, !dbg !29
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %111) #1, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !29
  %117 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %101, !dbg !32
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %117, i32 %60, !dbg !32
  %119 = ptrtoint ptr addrspace(3) %118 to i32, !dbg !32
  %120 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %119) #1, !dbg !32
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !32
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !32
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %117, i32 %61, !dbg !32
  %124 = ptrtoint ptr addrspace(3) %123 to i32, !dbg !32
  %125 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %124) #1, !dbg !32
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !32
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !32
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %117, i32 %62, !dbg !32
  %129 = ptrtoint ptr addrspace(3) %128 to i32, !dbg !32
  %130 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %129) #1, !dbg !32
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !32
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !32
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %117, i32 %63, !dbg !32
  %134 = ptrtoint ptr addrspace(3) %133 to i32, !dbg !32
  %135 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %134) #1, !dbg !32
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !32
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !32
  %138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %66, float %67, float %68, float %69, i32 %106, i32 %107, i32 %108, i32 %109, i32 %121, i32 %122) #1, !dbg !34
  %139 = extractvalue { float, float, float, float } %138, 0, !dbg !34
  %140 = extractvalue { float, float, float, float } %138, 1, !dbg !34
  %141 = extractvalue { float, float, float, float } %138, 2, !dbg !34
  %142 = extractvalue { float, float, float, float } %138, 3, !dbg !34
  %143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %70, float %71, float %72, float %73, i32 %106, i32 %107, i32 %108, i32 %109, i32 %126, i32 %127) #1, !dbg !34
  %144 = extractvalue { float, float, float, float } %143, 0, !dbg !34
  %145 = extractvalue { float, float, float, float } %143, 1, !dbg !34
  %146 = extractvalue { float, float, float, float } %143, 2, !dbg !34
  %147 = extractvalue { float, float, float, float } %143, 3, !dbg !34
  %148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %74, float %75, float %76, float %77, i32 %106, i32 %107, i32 %108, i32 %109, i32 %131, i32 %132) #1, !dbg !34
  %149 = extractvalue { float, float, float, float } %148, 0, !dbg !34
  %150 = extractvalue { float, float, float, float } %148, 1, !dbg !34
  %151 = extractvalue { float, float, float, float } %148, 2, !dbg !34
  %152 = extractvalue { float, float, float, float } %148, 3, !dbg !34
  %153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %78, float %79, float %80, float %81, i32 %106, i32 %107, i32 %108, i32 %109, i32 %136, i32 %137) #1, !dbg !34
  %154 = extractvalue { float, float, float, float } %153, 0, !dbg !34
  %155 = extractvalue { float, float, float, float } %153, 1, !dbg !34
  %156 = extractvalue { float, float, float, float } %153, 2, !dbg !34
  %157 = extractvalue { float, float, float, float } %153, 3, !dbg !34
  %158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %82, float %83, float %84, float %85, i32 %113, i32 %114, i32 %115, i32 %116, i32 %121, i32 %122) #1, !dbg !34
  %159 = extractvalue { float, float, float, float } %158, 0, !dbg !34
  %160 = extractvalue { float, float, float, float } %158, 1, !dbg !34
  %161 = extractvalue { float, float, float, float } %158, 2, !dbg !34
  %162 = extractvalue { float, float, float, float } %158, 3, !dbg !34
  %163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %86, float %87, float %88, float %89, i32 %113, i32 %114, i32 %115, i32 %116, i32 %126, i32 %127) #1, !dbg !34
  %164 = extractvalue { float, float, float, float } %163, 0, !dbg !34
  %165 = extractvalue { float, float, float, float } %163, 1, !dbg !34
  %166 = extractvalue { float, float, float, float } %163, 2, !dbg !34
  %167 = extractvalue { float, float, float, float } %163, 3, !dbg !34
  %168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %90, float %91, float %92, float %93, i32 %113, i32 %114, i32 %115, i32 %116, i32 %131, i32 %132) #1, !dbg !34
  %169 = extractvalue { float, float, float, float } %168, 0, !dbg !34
  %170 = extractvalue { float, float, float, float } %168, 1, !dbg !34
  %171 = extractvalue { float, float, float, float } %168, 2, !dbg !34
  %172 = extractvalue { float, float, float, float } %168, 3, !dbg !34
  %173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %94, float %95, float %96, float %97, i32 %113, i32 %114, i32 %115, i32 %116, i32 %136, i32 %137) #1, !dbg !34
  %174 = extractvalue { float, float, float, float } %173, 0, !dbg !34
  %175 = extractvalue { float, float, float, float } %173, 1, !dbg !34
  %176 = extractvalue { float, float, float, float } %173, 2, !dbg !34
  %177 = extractvalue { float, float, float, float } %173, 3, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %178 = shl nuw nsw i64 %indvars.iv.next, 4, !dbg !35
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %178, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %179 = select i1 %.not50, i32 0, i32 16, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %37, ptr addrspace(1) %gep, i32 %179) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep150 = getelementptr bfloat, ptr addrspace(1) %invariant.gep149, i64 %178, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %41, ptr addrspace(1) %gep150, i32 %179) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256, !dbg !33
  br i1 %exitcond.not, label %180, label %64, !dbg !33

180:                                              ; preds = %64
  %181 = and i32 %22, 56, !dbg !19
  %182 = or disjoint i32 %25, %181, !dbg !22
  %183 = lshr i32 %15, 3, !dbg !19
  %184 = and i32 %183, 15, !dbg !19
  %185 = or disjoint i32 %184, %14, !dbg !20
  %186 = or disjoint i32 %185, 48, !dbg !20
  %187 = or disjoint i32 %185, 32, !dbg !20
  %188 = or disjoint i32 %185, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %189 = icmp slt i32 %185, 512, !dbg !36
  %190 = icmp slt i32 %188, 512, !dbg !36
  %191 = icmp slt i32 %187, 512, !dbg !36
  %192 = icmp slt i32 %186, 512, !dbg !36
  %193 = icmp slt i32 %182, 4096, !dbg !37
  %194 = and i1 %189, %193, !dbg !38
  %195 = and i1 %190, %193, !dbg !38
  %196 = and i1 %191, %193, !dbg !38
  %197 = and i1 %192, %193, !dbg !38
  %198 = shl i32 %185, 12, !dbg !39
  %199 = shl i32 %188, 12, !dbg !39
  %200 = shl i32 %187, 12, !dbg !39
  %201 = shl i32 %186, 12, !dbg !39
  %202 = add i32 %198, %182, !dbg !40
  %203 = add i32 %199, %182, !dbg !40
  %204 = add i32 %200, %182, !dbg !40
  %205 = add i32 %201, %182, !dbg !40
  %206 = sext i32 %202 to i64, !dbg !41
  %207 = getelementptr bfloat, ptr addrspace(1) %2, i64 %206, !dbg !41
  %208 = sext i32 %203 to i64, !dbg !41
  %209 = getelementptr bfloat, ptr addrspace(1) %2, i64 %208, !dbg !41
  %210 = sext i32 %204 to i64, !dbg !41
  %211 = getelementptr bfloat, ptr addrspace(1) %2, i64 %210, !dbg !41
  %212 = sext i32 %205 to i64, !dbg !41
  %213 = getelementptr bfloat, ptr addrspace(1) %2, i64 %212, !dbg !41
  %214 = fptrunc float %139 to bfloat, !dbg !42
  %215 = fptrunc float %140 to bfloat, !dbg !42
  %216 = fptrunc float %141 to bfloat, !dbg !42
  %217 = fptrunc float %142 to bfloat, !dbg !42
  %218 = fptrunc float %144 to bfloat, !dbg !42
  %219 = fptrunc float %145 to bfloat, !dbg !42
  %220 = fptrunc float %146 to bfloat, !dbg !42
  %221 = fptrunc float %147 to bfloat, !dbg !42
  %222 = fptrunc float %149 to bfloat, !dbg !42
  %223 = fptrunc float %150 to bfloat, !dbg !42
  %224 = fptrunc float %151 to bfloat, !dbg !42
  %225 = fptrunc float %152 to bfloat, !dbg !42
  %226 = fptrunc float %154 to bfloat, !dbg !42
  %227 = fptrunc float %155 to bfloat, !dbg !42
  %228 = fptrunc float %156 to bfloat, !dbg !42
  %229 = fptrunc float %157 to bfloat, !dbg !42
  %230 = fptrunc float %159 to bfloat, !dbg !42
  %231 = fptrunc float %160 to bfloat, !dbg !42
  %232 = fptrunc float %161 to bfloat, !dbg !42
  %233 = fptrunc float %162 to bfloat, !dbg !42
  %234 = fptrunc float %164 to bfloat, !dbg !42
  %235 = fptrunc float %165 to bfloat, !dbg !42
  %236 = fptrunc float %166 to bfloat, !dbg !42
  %237 = fptrunc float %167 to bfloat, !dbg !42
  %238 = fptrunc float %169 to bfloat, !dbg !42
  %239 = fptrunc float %170 to bfloat, !dbg !42
  %240 = fptrunc float %171 to bfloat, !dbg !42
  %241 = fptrunc float %172 to bfloat, !dbg !42
  %242 = fptrunc float %174 to bfloat, !dbg !42
  %243 = fptrunc float %175 to bfloat, !dbg !42
  %244 = fptrunc float %176 to bfloat, !dbg !42
  %245 = fptrunc float %177 to bfloat, !dbg !42
  %246 = and i32 %42, 6, !dbg !42
  %247 = shl i32 %15, 4, !dbg !42
  %248 = and i32 %247, 192, !dbg !42
  %249 = or disjoint i32 %248, %246, !dbg !42
  %250 = shl i32 %15, 4, !dbg !42
  %251 = and i32 %250, 1280, !dbg !42
  %252 = or disjoint i32 %251, %249, !dbg !42
  %253 = or disjoint i32 %252, %57, !dbg !42
  %254 = and i32 %22, 1016, !dbg !42
  %255 = lshr i32 %252, 3, !dbg !42
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %255, !dbg !42
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %256, i32 %253, !dbg !42
  %258 = bitcast bfloat %214 to i16, !dbg !42
  %259 = bitcast bfloat %215 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %257, i16 %258, i16 %259, i1 true) #1, !dbg !42
  %260 = or disjoint i32 %253, 512, !dbg !42
  %261 = lshr i32 %260, 3, !dbg !42
  %262 = and i32 %261, 536870904, !dbg !42
  %263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %262, !dbg !42
  %264 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %263, i32 %260, !dbg !42
  %265 = bitcast bfloat %216 to i16, !dbg !42
  %266 = bitcast bfloat %217 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %264, i16 %265, i16 %266, i1 true) #1, !dbg !42
  %267 = or disjoint i32 %253, 16, !dbg !42
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %256, i32 %267, !dbg !42
  %269 = bitcast bfloat %218 to i16, !dbg !42
  %270 = bitcast bfloat %219 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %268, i16 %269, i16 %270, i1 true) #1, !dbg !42
  %271 = or disjoint i32 %253, 528, !dbg !42
  %272 = lshr i32 %271, 3, !dbg !42
  %273 = and i32 %272, 536870904, !dbg !42
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %273, !dbg !42
  %275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %274, i32 %271, !dbg !42
  %276 = bitcast bfloat %220 to i16, !dbg !42
  %277 = bitcast bfloat %221 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %275, i16 %276, i16 %277, i1 true) #1, !dbg !42
  %278 = or disjoint i32 %253, 32, !dbg !42
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %256, i32 %278, !dbg !42
  %280 = bitcast bfloat %222 to i16, !dbg !42
  %281 = bitcast bfloat %223 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %279, i16 %280, i16 %281, i1 true) #1, !dbg !42
  %282 = or disjoint i32 %253, 544, !dbg !42
  %283 = lshr i32 %282, 3, !dbg !42
  %284 = and i32 %283, 536870904, !dbg !42
  %285 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %284, !dbg !42
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %285, i32 %282, !dbg !42
  %287 = bitcast bfloat %224 to i16, !dbg !42
  %288 = bitcast bfloat %225 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %286, i16 %287, i16 %288, i1 true) #1, !dbg !42
  %289 = or disjoint i32 %253, 48, !dbg !42
  %290 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %256, i32 %289, !dbg !42
  %291 = bitcast bfloat %226 to i16, !dbg !42
  %292 = bitcast bfloat %227 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %290, i16 %291, i16 %292, i1 true) #1, !dbg !42
  %293 = or disjoint i32 %253, 560, !dbg !42
  %294 = lshr i32 %293, 3, !dbg !42
  %295 = and i32 %294, 536870904, !dbg !42
  %296 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %295, !dbg !42
  %297 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %296, i32 %293, !dbg !42
  %298 = bitcast bfloat %228 to i16, !dbg !42
  %299 = bitcast bfloat %229 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %297, i16 %298, i16 %299, i1 true) #1, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %300 = and i32 %15, 120, !dbg !42
  %301 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %300, !dbg !42
  %302 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %301, i32 %254, !dbg !42
  %303 = load <4 x i32>, ptr addrspace(3) %302, align 16, !dbg !42
  %304 = or disjoint i32 %254, 1024, !dbg !42
  %305 = lshr exact i32 %304, 3, !dbg !42
  %306 = and i32 %305, 248, !dbg !42
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %306, !dbg !42
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %307, i32 %304, !dbg !42
  %309 = load <4 x i32>, ptr addrspace(3) %308, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %310 = bitcast bfloat %230 to i16, !dbg !42
  %311 = bitcast bfloat %231 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %257, i16 %310, i16 %311, i1 true) #1, !dbg !42
  %312 = bitcast bfloat %232 to i16, !dbg !42
  %313 = bitcast bfloat %233 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %264, i16 %312, i16 %313, i1 true) #1, !dbg !42
  %314 = bitcast bfloat %234 to i16, !dbg !42
  %315 = bitcast bfloat %235 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %268, i16 %314, i16 %315, i1 true) #1, !dbg !42
  %316 = bitcast bfloat %236 to i16, !dbg !42
  %317 = bitcast bfloat %237 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %275, i16 %316, i16 %317, i1 true) #1, !dbg !42
  %318 = bitcast bfloat %238 to i16, !dbg !42
  %319 = bitcast bfloat %239 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %279, i16 %318, i16 %319, i1 true) #1, !dbg !42
  %320 = bitcast bfloat %240 to i16, !dbg !42
  %321 = bitcast bfloat %241 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %286, i16 %320, i16 %321, i1 true) #1, !dbg !42
  %322 = bitcast bfloat %242 to i16, !dbg !42
  %323 = bitcast bfloat %243 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %290, i16 %322, i16 %323, i1 true) #1, !dbg !42
  %324 = bitcast bfloat %244 to i16, !dbg !42
  %325 = bitcast bfloat %245 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %297, i16 %324, i16 %325, i1 true) #1, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %326 = load <4 x i32>, ptr addrspace(3) %302, align 16, !dbg !42
  %327 = load <4 x i32>, ptr addrspace(3) %308, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %303, i64 0, !dbg !42
  %.extract52 = extractelement <4 x i32> %303, i64 1, !dbg !42
  %.extract54 = extractelement <4 x i32> %303, i64 2, !dbg !42
  %.extract56 = extractelement <4 x i32> %303, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract52, i32 %.extract54, i32 %.extract56, ptr addrspace(1) %207, i1 %194) #1, !dbg !42
  %.extract58 = extractelement <4 x i32> %309, i64 0, !dbg !42
  %.extract60 = extractelement <4 x i32> %309, i64 1, !dbg !42
  %.extract62 = extractelement <4 x i32> %309, i64 2, !dbg !42
  %.extract64 = extractelement <4 x i32> %309, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract60, i32 %.extract62, i32 %.extract64, ptr addrspace(1) %209, i1 %195) #1, !dbg !42
  %.extract66 = extractelement <4 x i32> %326, i64 0, !dbg !42
  %.extract68 = extractelement <4 x i32> %326, i64 1, !dbg !42
  %.extract70 = extractelement <4 x i32> %326, i64 2, !dbg !42
  %.extract72 = extractelement <4 x i32> %326, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract66, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %211, i1 %196) #1, !dbg !42
  %.extract74 = extractelement <4 x i32> %327, i64 0, !dbg !42
  %.extract76 = extractelement <4 x i32> %327, i64 1, !dbg !42
  %.extract78 = extractelement <4 x i32> %327, i64 2, !dbg !42
  %.extract80 = extractelement <4 x i32> %327, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract74, i32 %.extract76, i32 %.extract78, i32 %.extract80, ptr addrspace(1) %213, i1 %197) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckuajkjzxls6zdk3nkv67oyk6px7gvxsemsom3myl6m7x4ip22tf.py", directory: "/tmp/torchinductor_root/ku")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 30, scope: !6)
!26 = !DILocation(line: 77, column: 55, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 64, column: 26, scope: !6)
!34 = !DILocation(line: 78, column: 25, scope: !6)
!35 = !DILocation(line: 66, column: 50, scope: !6)
!36 = !DILocation(line: 85, column: 20, scope: !6)
!37 = !DILocation(line: 85, column: 34, scope: !6)
!38 = !DILocation(line: 85, column: 26, scope: !6)
!39 = !DILocation(line: 88, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 21, scope: !6)
!41 = !DILocation(line: 89, column: 25, scope: !6)
!42 = !DILocation(line: 89, column: 67, scope: !6)
!43 = !DILocation(line: 89, column: 4, scope: !6)
