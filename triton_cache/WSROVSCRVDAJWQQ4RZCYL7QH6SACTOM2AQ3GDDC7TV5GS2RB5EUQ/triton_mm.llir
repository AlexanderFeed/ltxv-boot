; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 48, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 1, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 48, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = or disjoint i32 %20, 64, !dbg !19
  %23 = or disjoint i32 %20, 96, !dbg !19
  %24 = shl i32 %15, 3, !dbg !19
  %25 = and i32 %24, 24, !dbg !19
  %26 = or disjoint i32 %14, %20, !dbg !20
  %27 = or disjoint i32 %14, %21, !dbg !20
  %28 = or disjoint i32 %14, %22, !dbg !20
  %29 = or disjoint i32 %14, %23, !dbg !20
  %30 = shl nsw i32 %13, 7, !dbg !21
  %31 = or disjoint i32 %30, %20, !dbg !22
  %32 = or disjoint i32 %30, %21, !dbg !22
  %33 = or disjoint i32 %30, %22, !dbg !22
  %34 = or disjoint i32 %30, %23, !dbg !22
  %35 = srem i32 %26, 77, !dbg !23
  %36 = srem i32 %27, 77, !dbg !23
  %37 = srem i32 %28, 77, !dbg !23
  %38 = srem i32 %29, 77, !dbg !23
  %39 = srem i32 %31, 768, !dbg !24
  %.lhs.trunc = trunc i32 %32 to i16, !dbg !24
  %40 = srem i16 %.lhs.trunc, 768, !dbg !24
  %.sext = sext i16 %40 to i32, !dbg !24
  %.lhs.trunc194 = trunc i32 %33 to i16, !dbg !24
  %41 = srem i16 %.lhs.trunc194, 768, !dbg !24
  %.sext195 = sext i16 %41 to i32, !dbg !24
  %.lhs.trunc196 = trunc i32 %34 to i16, !dbg !24
  %42 = srem i16 %.lhs.trunc196, 768, !dbg !24
  %.sext197 = sext i16 %42 to i32, !dbg !24
  %43 = mul nsw i32 %35, 768, !dbg !25
  %44 = mul nsw i32 %36, 768, !dbg !25
  %45 = mul nsw i32 %37, 768, !dbg !25
  %46 = mul nsw i32 %38, 768, !dbg !25
  %47 = mul nsw i32 %39, 768, !dbg !26
  %48 = mul nsw i32 %.sext, 768, !dbg !26
  %49 = mul nsw i32 %.sext195, 768, !dbg !26
  %50 = mul nsw i32 %.sext197, 768, !dbg !26
  %51 = or disjoint i32 %43, %25, !dbg !27
  %52 = or disjoint i32 %44, %25, !dbg !27
  %53 = or disjoint i32 %45, %25, !dbg !27
  %54 = or disjoint i32 %46, %25, !dbg !27
  %55 = sext i32 %51 to i64, !dbg !28
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %52 to i64, !dbg !28
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %53 to i64, !dbg !28
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = sext i32 %54 to i64, !dbg !28
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !28
  %63 = xor i32 %24, %15, !dbg !29
  %64 = and i32 %63, 24, !dbg !29
  %65 = shl nuw nsw i32 %20, 5, !dbg !29
  %66 = or disjoint i32 %65, %64, !dbg !29
  %67 = zext nneg i32 %66 to i64, !dbg !29
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %67, !dbg !29
  %69 = or disjoint i32 %66, 1024, !dbg !29
  %70 = zext nneg i32 %69 to i64, !dbg !29
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %70, !dbg !29
  %72 = or disjoint i32 %66, 2048, !dbg !29
  %73 = zext nneg i32 %72 to i64, !dbg !29
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %73, !dbg !29
  %75 = or disjoint i32 %66, 3072, !dbg !29
  %76 = zext nneg i32 %75 to i64, !dbg !29
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %76, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %56, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %71, ptr addrspace(1) %58, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %74, ptr addrspace(1) %60, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %77, ptr addrspace(1) %62, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %78 = or disjoint i32 %47, %25, !dbg !30
  %79 = or disjoint i32 %48, %25, !dbg !30
  %80 = or disjoint i32 %49, %25, !dbg !30
  %81 = or disjoint i32 %50, %25, !dbg !30
  %82 = sext i32 %78 to i64, !dbg !31
  %83 = getelementptr bfloat, ptr addrspace(1) %1, i64 %82, !dbg !31
  %84 = sext i32 %79 to i64, !dbg !31
  %85 = getelementptr bfloat, ptr addrspace(1) %1, i64 %84, !dbg !31
  %86 = sext i32 %80 to i64, !dbg !31
  %87 = getelementptr bfloat, ptr addrspace(1) %1, i64 %86, !dbg !31
  %88 = sext i32 %81 to i64, !dbg !31
  %89 = getelementptr bfloat, ptr addrspace(1) %1, i64 %88, !dbg !31
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %67, !dbg !32
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %70, !dbg !32
  %92 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %73, !dbg !32
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %76, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %90, ptr addrspace(1) %83, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %91, ptr addrspace(1) %85, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %92, ptr addrspace(1) %87, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %89, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %94 = or disjoint i32 %25, 32, !dbg !33
  %95 = or disjoint i32 %43, %94, !dbg !27
  %96 = or disjoint i32 %44, %94, !dbg !27
  %97 = or disjoint i32 %45, %94, !dbg !27
  %98 = or disjoint i32 %46, %94, !dbg !27
  %99 = sext i32 %95 to i64, !dbg !28
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %96 to i64, !dbg !28
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %97 to i64, !dbg !28
  %104 = getelementptr bfloat, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %98 to i64, !dbg !28
  %106 = getelementptr bfloat, ptr addrspace(1) %0, i64 %105, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %107 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %67, !dbg !29
  %108 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %70, !dbg !29
  %109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %73, !dbg !29
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %76, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %107, ptr addrspace(1) %100, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %108, ptr addrspace(1) %102, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %109, ptr addrspace(1) %104, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %110, ptr addrspace(1) %106, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %111 = or disjoint i32 %47, %94, !dbg !30
  %112 = or disjoint i32 %48, %94, !dbg !30
  %113 = or disjoint i32 %49, %94, !dbg !30
  %114 = or disjoint i32 %50, %94, !dbg !30
  %115 = sext i32 %111 to i64, !dbg !31
  %116 = getelementptr bfloat, ptr addrspace(1) %1, i64 %115, !dbg !31
  %117 = sext i32 %112 to i64, !dbg !31
  %118 = getelementptr bfloat, ptr addrspace(1) %1, i64 %117, !dbg !31
  %119 = sext i32 %113 to i64, !dbg !31
  %120 = getelementptr bfloat, ptr addrspace(1) %1, i64 %119, !dbg !31
  %121 = sext i32 %114 to i64, !dbg !31
  %122 = getelementptr bfloat, ptr addrspace(1) %1, i64 %121, !dbg !31
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %67, !dbg !32
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %70, !dbg !32
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %73, !dbg !32
  %126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %76, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %123, ptr addrspace(1) %116, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %118, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %125, ptr addrspace(1) %120, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %126, ptr addrspace(1) %122, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %19, !dbg !34
  %invariant.op326 = or disjoint i32 %invariant.op, 32, !dbg !34
  %invariant.op329 = or disjoint i32 %invariant.op, 64, !dbg !34
  %invariant.op332 = or disjoint i32 %invariant.op, 96, !dbg !34
  %invariant.op334 = or disjoint i32 %25, 64, !dbg !34
  %127 = shl i32 %15, 2
  %128 = and i32 %127, 8
  %129 = and i32 %127, 16
  %130 = and i32 %127, 24
  %131 = and i32 %15, 7
  %132 = and i32 %15, 15
  %133 = lshr i32 %15, 1
  %134 = and i32 %133, 8
  %135 = xor i32 %130, %134
  %136 = or disjoint i32 %19, %132
  %137 = shl nuw nsw i32 %136, 5
  %138 = or disjoint i32 %135, %137
  %139 = zext nneg i32 %138 to i64
  %140 = or disjoint i32 %128, 16
  %141 = or disjoint i32 %134, %129
  %142 = xor i32 %141, %140
  %143 = or disjoint i32 %142, %137
  %144 = zext nneg i32 %143 to i64
  %.reass327 = or disjoint i32 %131, %invariant.op326
  %145 = shl nuw nsw i32 %.reass327, 5
  %146 = or disjoint i32 %145, %135
  %147 = zext nneg i32 %146 to i64
  %148 = or disjoint i32 %142, %145
  %149 = zext nneg i32 %148 to i64
  %.reass330 = or disjoint i32 %131, %invariant.op329
  %150 = shl nuw nsw i32 %.reass330, 5
  %151 = or disjoint i32 %150, %135
  %152 = zext nneg i32 %151 to i64
  %153 = or disjoint i32 %142, %150
  %154 = zext nneg i32 %153 to i64
  %.reass333 = or disjoint i32 %131, %invariant.op332
  %155 = shl nuw nsw i32 %.reass333, 5
  %156 = or disjoint i32 %155, %135
  %157 = zext nneg i32 %156 to i64
  %158 = or disjoint i32 %142, %155
  %159 = zext nneg i32 %158 to i64
  %160 = xor i32 %127, %15
  %161 = and i32 %160, 24
  %162 = or disjoint i32 %18, %131
  %163 = shl nuw nsw i32 %162, 5
  %164 = or disjoint i32 %161, %163
  %165 = zext nneg i32 %164 to i64
  %166 = or disjoint i32 %164, 512
  %167 = zext nneg i32 %166 to i64
  %168 = or disjoint i32 %163, 1024
  %169 = or disjoint i32 %161, %168
  %170 = zext nneg i32 %169 to i64
  %171 = or disjoint i32 %164, 1536
  %172 = zext nneg i32 %171 to i64
  %173 = or disjoint i32 %163, 2048
  %174 = or disjoint i32 %161, %173
  %175 = zext nneg i32 %174 to i64
  %176 = or disjoint i32 %164, 2560
  %177 = zext nneg i32 %176 to i64
  %178 = or disjoint i32 %163, 3072
  %179 = or disjoint i32 %161, %178
  %180 = zext nneg i32 %179 to i64
  %181 = or disjoint i32 %164, 3584
  %182 = zext nneg i32 %181 to i64
  %183 = zext nneg i32 %invariant.op334 to i64, !dbg !34
  %184 = sext i32 %50 to i64, !dbg !34
  %185 = sext i32 %49 to i64, !dbg !34
  %186 = sext i32 %48 to i64, !dbg !34
  %187 = sext i32 %47 to i64, !dbg !34
  %188 = sext i32 %46 to i64, !dbg !34
  %189 = sext i32 %45 to i64, !dbg !34
  %190 = sext i32 %44 to i64, !dbg !34
  %191 = sext i32 %43 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %191, !dbg !34
  %invariant.gep590 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !34
  %invariant.gep592 = getelementptr bfloat, ptr addrspace(1) %0, i64 %189, !dbg !34
  %invariant.gep594 = getelementptr bfloat, ptr addrspace(1) %0, i64 %188, !dbg !34
  %invariant.gep596 = getelementptr bfloat, ptr addrspace(1) %1, i64 %187, !dbg !34
  %invariant.gep598 = getelementptr bfloat, ptr addrspace(1) %1, i64 %186, !dbg !34
  %invariant.gep600 = getelementptr bfloat, ptr addrspace(1) %1, i64 %185, !dbg !34
  %invariant.gep602 = getelementptr bfloat, ptr addrspace(1) %1, i64 %184, !dbg !34
  br label %192, !dbg !34

192:                                              ; preds = %4, %192
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %192 ]
  %193 = phi i32 [ -1, %4 ], [ %326, %192 ]
  %194 = phi i32 [ 1, %4 ], [ %781, %192 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %620, %192 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %621, %192 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %622, %192 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %623, %192 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %625, %192 ]
  %200 = phi float [ 0.000000e+00, %4 ], [ %626, %192 ]
  %201 = phi float [ 0.000000e+00, %4 ], [ %627, %192 ]
  %202 = phi float [ 0.000000e+00, %4 ], [ %628, %192 ]
  %203 = phi float [ 0.000000e+00, %4 ], [ %630, %192 ]
  %204 = phi float [ 0.000000e+00, %4 ], [ %631, %192 ]
  %205 = phi float [ 0.000000e+00, %4 ], [ %632, %192 ]
  %206 = phi float [ 0.000000e+00, %4 ], [ %633, %192 ]
  %207 = phi float [ 0.000000e+00, %4 ], [ %635, %192 ]
  %208 = phi float [ 0.000000e+00, %4 ], [ %636, %192 ]
  %209 = phi float [ 0.000000e+00, %4 ], [ %637, %192 ]
  %210 = phi float [ 0.000000e+00, %4 ], [ %638, %192 ]
  %211 = phi float [ 0.000000e+00, %4 ], [ %640, %192 ]
  %212 = phi float [ 0.000000e+00, %4 ], [ %641, %192 ]
  %213 = phi float [ 0.000000e+00, %4 ], [ %642, %192 ]
  %214 = phi float [ 0.000000e+00, %4 ], [ %643, %192 ]
  %215 = phi float [ 0.000000e+00, %4 ], [ %645, %192 ]
  %216 = phi float [ 0.000000e+00, %4 ], [ %646, %192 ]
  %217 = phi float [ 0.000000e+00, %4 ], [ %647, %192 ]
  %218 = phi float [ 0.000000e+00, %4 ], [ %648, %192 ]
  %219 = phi float [ 0.000000e+00, %4 ], [ %650, %192 ]
  %220 = phi float [ 0.000000e+00, %4 ], [ %651, %192 ]
  %221 = phi float [ 0.000000e+00, %4 ], [ %652, %192 ]
  %222 = phi float [ 0.000000e+00, %4 ], [ %653, %192 ]
  %223 = phi float [ 0.000000e+00, %4 ], [ %655, %192 ]
  %224 = phi float [ 0.000000e+00, %4 ], [ %656, %192 ]
  %225 = phi float [ 0.000000e+00, %4 ], [ %657, %192 ]
  %226 = phi float [ 0.000000e+00, %4 ], [ %658, %192 ]
  %227 = phi float [ 0.000000e+00, %4 ], [ %660, %192 ]
  %228 = phi float [ 0.000000e+00, %4 ], [ %661, %192 ]
  %229 = phi float [ 0.000000e+00, %4 ], [ %662, %192 ]
  %230 = phi float [ 0.000000e+00, %4 ], [ %663, %192 ]
  %231 = phi float [ 0.000000e+00, %4 ], [ %665, %192 ]
  %232 = phi float [ 0.000000e+00, %4 ], [ %666, %192 ]
  %233 = phi float [ 0.000000e+00, %4 ], [ %667, %192 ]
  %234 = phi float [ 0.000000e+00, %4 ], [ %668, %192 ]
  %235 = phi float [ 0.000000e+00, %4 ], [ %670, %192 ]
  %236 = phi float [ 0.000000e+00, %4 ], [ %671, %192 ]
  %237 = phi float [ 0.000000e+00, %4 ], [ %672, %192 ]
  %238 = phi float [ 0.000000e+00, %4 ], [ %673, %192 ]
  %239 = phi float [ 0.000000e+00, %4 ], [ %675, %192 ]
  %240 = phi float [ 0.000000e+00, %4 ], [ %676, %192 ]
  %241 = phi float [ 0.000000e+00, %4 ], [ %677, %192 ]
  %242 = phi float [ 0.000000e+00, %4 ], [ %678, %192 ]
  %243 = phi float [ 0.000000e+00, %4 ], [ %680, %192 ]
  %244 = phi float [ 0.000000e+00, %4 ], [ %681, %192 ]
  %245 = phi float [ 0.000000e+00, %4 ], [ %682, %192 ]
  %246 = phi float [ 0.000000e+00, %4 ], [ %683, %192 ]
  %247 = phi float [ 0.000000e+00, %4 ], [ %685, %192 ]
  %248 = phi float [ 0.000000e+00, %4 ], [ %686, %192 ]
  %249 = phi float [ 0.000000e+00, %4 ], [ %687, %192 ]
  %250 = phi float [ 0.000000e+00, %4 ], [ %688, %192 ]
  %251 = phi float [ 0.000000e+00, %4 ], [ %690, %192 ]
  %252 = phi float [ 0.000000e+00, %4 ], [ %691, %192 ]
  %253 = phi float [ 0.000000e+00, %4 ], [ %692, %192 ]
  %254 = phi float [ 0.000000e+00, %4 ], [ %693, %192 ]
  %255 = phi float [ 0.000000e+00, %4 ], [ %695, %192 ]
  %256 = phi float [ 0.000000e+00, %4 ], [ %696, %192 ]
  %257 = phi float [ 0.000000e+00, %4 ], [ %697, %192 ]
  %258 = phi float [ 0.000000e+00, %4 ], [ %698, %192 ]
  %259 = phi float [ 0.000000e+00, %4 ], [ %700, %192 ]
  %260 = phi float [ 0.000000e+00, %4 ], [ %701, %192 ]
  %261 = phi float [ 0.000000e+00, %4 ], [ %702, %192 ]
  %262 = phi float [ 0.000000e+00, %4 ], [ %703, %192 ]
  %263 = phi float [ 0.000000e+00, %4 ], [ %705, %192 ]
  %264 = phi float [ 0.000000e+00, %4 ], [ %706, %192 ]
  %265 = phi float [ 0.000000e+00, %4 ], [ %707, %192 ]
  %266 = phi float [ 0.000000e+00, %4 ], [ %708, %192 ]
  %267 = phi float [ 0.000000e+00, %4 ], [ %710, %192 ]
  %268 = phi float [ 0.000000e+00, %4 ], [ %711, %192 ]
  %269 = phi float [ 0.000000e+00, %4 ], [ %712, %192 ]
  %270 = phi float [ 0.000000e+00, %4 ], [ %713, %192 ]
  %271 = phi float [ 0.000000e+00, %4 ], [ %715, %192 ]
  %272 = phi float [ 0.000000e+00, %4 ], [ %716, %192 ]
  %273 = phi float [ 0.000000e+00, %4 ], [ %717, %192 ]
  %274 = phi float [ 0.000000e+00, %4 ], [ %718, %192 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %720, %192 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %721, %192 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %722, %192 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %723, %192 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %725, %192 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %726, %192 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %727, %192 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %728, %192 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %730, %192 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %731, %192 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %732, %192 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %733, %192 ]
  %287 = phi float [ 0.000000e+00, %4 ], [ %735, %192 ]
  %288 = phi float [ 0.000000e+00, %4 ], [ %736, %192 ]
  %289 = phi float [ 0.000000e+00, %4 ], [ %737, %192 ]
  %290 = phi float [ 0.000000e+00, %4 ], [ %738, %192 ]
  %291 = phi float [ 0.000000e+00, %4 ], [ %740, %192 ]
  %292 = phi float [ 0.000000e+00, %4 ], [ %741, %192 ]
  %293 = phi float [ 0.000000e+00, %4 ], [ %742, %192 ]
  %294 = phi float [ 0.000000e+00, %4 ], [ %743, %192 ]
  %295 = phi float [ 0.000000e+00, %4 ], [ %745, %192 ]
  %296 = phi float [ 0.000000e+00, %4 ], [ %746, %192 ]
  %297 = phi float [ 0.000000e+00, %4 ], [ %747, %192 ]
  %298 = phi float [ 0.000000e+00, %4 ], [ %748, %192 ]
  %299 = phi float [ 0.000000e+00, %4 ], [ %750, %192 ]
  %300 = phi float [ 0.000000e+00, %4 ], [ %751, %192 ]
  %301 = phi float [ 0.000000e+00, %4 ], [ %752, %192 ]
  %302 = phi float [ 0.000000e+00, %4 ], [ %753, %192 ]
  %303 = phi float [ 0.000000e+00, %4 ], [ %755, %192 ]
  %304 = phi float [ 0.000000e+00, %4 ], [ %756, %192 ]
  %305 = phi float [ 0.000000e+00, %4 ], [ %757, %192 ]
  %306 = phi float [ 0.000000e+00, %4 ], [ %758, %192 ]
  %307 = phi float [ 0.000000e+00, %4 ], [ %760, %192 ]
  %308 = phi float [ 0.000000e+00, %4 ], [ %761, %192 ]
  %309 = phi float [ 0.000000e+00, %4 ], [ %762, %192 ]
  %310 = phi float [ 0.000000e+00, %4 ], [ %763, %192 ]
  %311 = phi float [ 0.000000e+00, %4 ], [ %765, %192 ]
  %312 = phi float [ 0.000000e+00, %4 ], [ %766, %192 ]
  %313 = phi float [ 0.000000e+00, %4 ], [ %767, %192 ]
  %314 = phi float [ 0.000000e+00, %4 ], [ %768, %192 ]
  %315 = phi float [ 0.000000e+00, %4 ], [ %770, %192 ]
  %316 = phi float [ 0.000000e+00, %4 ], [ %771, %192 ]
  %317 = phi float [ 0.000000e+00, %4 ], [ %772, %192 ]
  %318 = phi float [ 0.000000e+00, %4 ], [ %773, %192 ]
  %319 = phi float [ 0.000000e+00, %4 ], [ %775, %192 ]
  %320 = phi float [ 0.000000e+00, %4 ], [ %776, %192 ]
  %321 = phi float [ 0.000000e+00, %4 ], [ %777, %192 ]
  %322 = phi float [ 0.000000e+00, %4 ], [ %778, %192 ]
  %323 = icmp samesign ult i64 %indvars.iv, 22, !dbg !34
  %324 = add i32 %193, 1, !dbg !34
  %325 = icmp slt i32 %324, 2, !dbg !34
  %326 = select i1 %325, i32 %324, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %327 = shl i32 %326, 12, !dbg !29
  %328 = sext i32 %327 to i64, !dbg !29
  %329 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %328, !dbg !29
  %330 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %139, !dbg !29
  %331 = ptrtoint ptr addrspace(3) %330 to i64, !dbg !29
  %332 = trunc i64 %331 to i32, !dbg !29
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #1, !dbg !29
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !29
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !29
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !29
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !29
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %144, !dbg !29
  %339 = ptrtoint ptr addrspace(3) %338 to i64, !dbg !29
  %340 = trunc i64 %339 to i32, !dbg !29
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %340) #1, !dbg !29
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !29
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !29
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !29
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !29
  %346 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %147, !dbg !29
  %347 = ptrtoint ptr addrspace(3) %346 to i64, !dbg !29
  %348 = trunc i64 %347 to i32, !dbg !29
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %348) #1, !dbg !29
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !29
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !29
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !29
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !29
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %149, !dbg !29
  %355 = ptrtoint ptr addrspace(3) %354 to i64, !dbg !29
  %356 = trunc i64 %355 to i32, !dbg !29
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %356) #1, !dbg !29
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !29
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !29
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !29
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !29
  %362 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %152, !dbg !29
  %363 = ptrtoint ptr addrspace(3) %362 to i64, !dbg !29
  %364 = trunc i64 %363 to i32, !dbg !29
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %364) #1, !dbg !29
  %366 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !29
  %367 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !29
  %368 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !29
  %369 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !29
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %154, !dbg !29
  %371 = ptrtoint ptr addrspace(3) %370 to i64, !dbg !29
  %372 = trunc i64 %371 to i32, !dbg !29
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %372) #1, !dbg !29
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !29
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !29
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !29
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !29
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %157, !dbg !29
  %379 = ptrtoint ptr addrspace(3) %378 to i64, !dbg !29
  %380 = trunc i64 %379 to i32, !dbg !29
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %380) #1, !dbg !29
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !29
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !29
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !29
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !29
  %386 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %329, i64 %159, !dbg !29
  %387 = ptrtoint ptr addrspace(3) %386 to i64, !dbg !29
  %388 = trunc i64 %387 to i32, !dbg !29
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #1, !dbg !29
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !29
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !29
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !29
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !29
  %394 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %328, !dbg !32
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %165, !dbg !32
  %396 = ptrtoint ptr addrspace(3) %395 to i64, !dbg !32
  %397 = trunc i64 %396 to i32, !dbg !32
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %397) #1, !dbg !32
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !32
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !32
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !32
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !32
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %167, !dbg !32
  %404 = ptrtoint ptr addrspace(3) %403 to i64, !dbg !32
  %405 = trunc i64 %404 to i32, !dbg !32
  %406 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %405) #1, !dbg !32
  %407 = extractvalue { i32, i32, i32, i32 } %406, 0, !dbg !32
  %408 = extractvalue { i32, i32, i32, i32 } %406, 1, !dbg !32
  %409 = extractvalue { i32, i32, i32, i32 } %406, 2, !dbg !32
  %410 = extractvalue { i32, i32, i32, i32 } %406, 3, !dbg !32
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %170, !dbg !32
  %412 = ptrtoint ptr addrspace(3) %411 to i64, !dbg !32
  %413 = trunc i64 %412 to i32, !dbg !32
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %413) #1, !dbg !32
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !32
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !32
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !32
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !32
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %172, !dbg !32
  %420 = ptrtoint ptr addrspace(3) %419 to i64, !dbg !32
  %421 = trunc i64 %420 to i32, !dbg !32
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %421) #1, !dbg !32
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !32
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !32
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !32
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !32
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %175, !dbg !32
  %428 = ptrtoint ptr addrspace(3) %427 to i64, !dbg !32
  %429 = trunc i64 %428 to i32, !dbg !32
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %429) #1, !dbg !32
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !32
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !32
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !32
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !32
  %435 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %177, !dbg !32
  %436 = ptrtoint ptr addrspace(3) %435 to i64, !dbg !32
  %437 = trunc i64 %436 to i32, !dbg !32
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %437) #1, !dbg !32
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !32
  %440 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !32
  %441 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !32
  %442 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !32
  %443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %180, !dbg !32
  %444 = ptrtoint ptr addrspace(3) %443 to i64, !dbg !32
  %445 = trunc i64 %444 to i32, !dbg !32
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #1, !dbg !32
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !32
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !32
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !32
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !32
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i64 %182, !dbg !32
  %452 = ptrtoint ptr addrspace(3) %451 to i64, !dbg !32
  %453 = trunc i64 %452 to i32, !dbg !32
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #1, !dbg !32
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !32
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !32
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !32
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !32
  %459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %195, float %196, float %197, float %198, i32 %334, i32 %335, i32 %336, i32 %337, i32 %399, i32 %400) #1, !dbg !35
  %460 = extractvalue { float, float, float, float } %459, 0, !dbg !35
  %461 = extractvalue { float, float, float, float } %459, 1, !dbg !35
  %462 = extractvalue { float, float, float, float } %459, 2, !dbg !35
  %463 = extractvalue { float, float, float, float } %459, 3, !dbg !35
  %464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %199, float %200, float %201, float %202, i32 %334, i32 %335, i32 %336, i32 %337, i32 %407, i32 %408) #1, !dbg !35
  %465 = extractvalue { float, float, float, float } %464, 0, !dbg !35
  %466 = extractvalue { float, float, float, float } %464, 1, !dbg !35
  %467 = extractvalue { float, float, float, float } %464, 2, !dbg !35
  %468 = extractvalue { float, float, float, float } %464, 3, !dbg !35
  %469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %203, float %204, float %205, float %206, i32 %334, i32 %335, i32 %336, i32 %337, i32 %415, i32 %416) #1, !dbg !35
  %470 = extractvalue { float, float, float, float } %469, 0, !dbg !35
  %471 = extractvalue { float, float, float, float } %469, 1, !dbg !35
  %472 = extractvalue { float, float, float, float } %469, 2, !dbg !35
  %473 = extractvalue { float, float, float, float } %469, 3, !dbg !35
  %474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %334, i32 %335, i32 %336, i32 %337, i32 %423, i32 %424) #1, !dbg !35
  %475 = extractvalue { float, float, float, float } %474, 0, !dbg !35
  %476 = extractvalue { float, float, float, float } %474, 1, !dbg !35
  %477 = extractvalue { float, float, float, float } %474, 2, !dbg !35
  %478 = extractvalue { float, float, float, float } %474, 3, !dbg !35
  %479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %211, float %212, float %213, float %214, i32 %334, i32 %335, i32 %336, i32 %337, i32 %431, i32 %432) #1, !dbg !35
  %480 = extractvalue { float, float, float, float } %479, 0, !dbg !35
  %481 = extractvalue { float, float, float, float } %479, 1, !dbg !35
  %482 = extractvalue { float, float, float, float } %479, 2, !dbg !35
  %483 = extractvalue { float, float, float, float } %479, 3, !dbg !35
  %484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %215, float %216, float %217, float %218, i32 %334, i32 %335, i32 %336, i32 %337, i32 %439, i32 %440) #1, !dbg !35
  %485 = extractvalue { float, float, float, float } %484, 0, !dbg !35
  %486 = extractvalue { float, float, float, float } %484, 1, !dbg !35
  %487 = extractvalue { float, float, float, float } %484, 2, !dbg !35
  %488 = extractvalue { float, float, float, float } %484, 3, !dbg !35
  %489 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %334, i32 %335, i32 %336, i32 %337, i32 %447, i32 %448) #1, !dbg !35
  %490 = extractvalue { float, float, float, float } %489, 0, !dbg !35
  %491 = extractvalue { float, float, float, float } %489, 1, !dbg !35
  %492 = extractvalue { float, float, float, float } %489, 2, !dbg !35
  %493 = extractvalue { float, float, float, float } %489, 3, !dbg !35
  %494 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %223, float %224, float %225, float %226, i32 %334, i32 %335, i32 %336, i32 %337, i32 %455, i32 %456) #1, !dbg !35
  %495 = extractvalue { float, float, float, float } %494, 0, !dbg !35
  %496 = extractvalue { float, float, float, float } %494, 1, !dbg !35
  %497 = extractvalue { float, float, float, float } %494, 2, !dbg !35
  %498 = extractvalue { float, float, float, float } %494, 3, !dbg !35
  %499 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %227, float %228, float %229, float %230, i32 %350, i32 %351, i32 %352, i32 %353, i32 %399, i32 %400) #1, !dbg !35
  %500 = extractvalue { float, float, float, float } %499, 0, !dbg !35
  %501 = extractvalue { float, float, float, float } %499, 1, !dbg !35
  %502 = extractvalue { float, float, float, float } %499, 2, !dbg !35
  %503 = extractvalue { float, float, float, float } %499, 3, !dbg !35
  %504 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %231, float %232, float %233, float %234, i32 %350, i32 %351, i32 %352, i32 %353, i32 %407, i32 %408) #1, !dbg !35
  %505 = extractvalue { float, float, float, float } %504, 0, !dbg !35
  %506 = extractvalue { float, float, float, float } %504, 1, !dbg !35
  %507 = extractvalue { float, float, float, float } %504, 2, !dbg !35
  %508 = extractvalue { float, float, float, float } %504, 3, !dbg !35
  %509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %235, float %236, float %237, float %238, i32 %350, i32 %351, i32 %352, i32 %353, i32 %415, i32 %416) #1, !dbg !35
  %510 = extractvalue { float, float, float, float } %509, 0, !dbg !35
  %511 = extractvalue { float, float, float, float } %509, 1, !dbg !35
  %512 = extractvalue { float, float, float, float } %509, 2, !dbg !35
  %513 = extractvalue { float, float, float, float } %509, 3, !dbg !35
  %514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %239, float %240, float %241, float %242, i32 %350, i32 %351, i32 %352, i32 %353, i32 %423, i32 %424) #1, !dbg !35
  %515 = extractvalue { float, float, float, float } %514, 0, !dbg !35
  %516 = extractvalue { float, float, float, float } %514, 1, !dbg !35
  %517 = extractvalue { float, float, float, float } %514, 2, !dbg !35
  %518 = extractvalue { float, float, float, float } %514, 3, !dbg !35
  %519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %243, float %244, float %245, float %246, i32 %350, i32 %351, i32 %352, i32 %353, i32 %431, i32 %432) #1, !dbg !35
  %520 = extractvalue { float, float, float, float } %519, 0, !dbg !35
  %521 = extractvalue { float, float, float, float } %519, 1, !dbg !35
  %522 = extractvalue { float, float, float, float } %519, 2, !dbg !35
  %523 = extractvalue { float, float, float, float } %519, 3, !dbg !35
  %524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %247, float %248, float %249, float %250, i32 %350, i32 %351, i32 %352, i32 %353, i32 %439, i32 %440) #1, !dbg !35
  %525 = extractvalue { float, float, float, float } %524, 0, !dbg !35
  %526 = extractvalue { float, float, float, float } %524, 1, !dbg !35
  %527 = extractvalue { float, float, float, float } %524, 2, !dbg !35
  %528 = extractvalue { float, float, float, float } %524, 3, !dbg !35
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %350, i32 %351, i32 %352, i32 %353, i32 %447, i32 %448) #1, !dbg !35
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !35
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !35
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !35
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !35
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %255, float %256, float %257, float %258, i32 %350, i32 %351, i32 %352, i32 %353, i32 %455, i32 %456) #1, !dbg !35
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !35
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !35
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !35
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !35
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %259, float %260, float %261, float %262, i32 %366, i32 %367, i32 %368, i32 %369, i32 %399, i32 %400) #1, !dbg !35
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !35
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !35
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !35
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !35
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %263, float %264, float %265, float %266, i32 %366, i32 %367, i32 %368, i32 %369, i32 %407, i32 %408) #1, !dbg !35
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !35
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !35
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !35
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !35
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %267, float %268, float %269, float %270, i32 %366, i32 %367, i32 %368, i32 %369, i32 %415, i32 %416) #1, !dbg !35
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !35
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !35
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !35
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !35
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %271, float %272, float %273, float %274, i32 %366, i32 %367, i32 %368, i32 %369, i32 %423, i32 %424) #1, !dbg !35
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !35
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !35
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !35
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !35
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %275, float %276, float %277, float %278, i32 %366, i32 %367, i32 %368, i32 %369, i32 %431, i32 %432) #1, !dbg !35
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !35
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !35
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !35
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !35
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %279, float %280, float %281, float %282, i32 %366, i32 %367, i32 %368, i32 %369, i32 %439, i32 %440) #1, !dbg !35
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !35
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !35
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !35
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !35
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %283, float %284, float %285, float %286, i32 %366, i32 %367, i32 %368, i32 %369, i32 %447, i32 %448) #1, !dbg !35
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !35
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !35
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !35
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !35
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %287, float %288, float %289, float %290, i32 %366, i32 %367, i32 %368, i32 %369, i32 %455, i32 %456) #1, !dbg !35
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !35
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !35
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !35
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !35
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %382, i32 %383, i32 %384, i32 %385, i32 %399, i32 %400) #1, !dbg !35
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !35
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !35
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !35
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !35
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %295, float %296, float %297, float %298, i32 %382, i32 %383, i32 %384, i32 %385, i32 %407, i32 %408) #1, !dbg !35
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !35
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !35
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !35
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !35
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %299, float %300, float %301, float %302, i32 %382, i32 %383, i32 %384, i32 %385, i32 %415, i32 %416) #1, !dbg !35
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !35
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !35
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !35
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !35
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %303, float %304, float %305, float %306, i32 %382, i32 %383, i32 %384, i32 %385, i32 %423, i32 %424) #1, !dbg !35
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !35
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !35
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !35
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !35
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %307, float %308, float %309, float %310, i32 %382, i32 %383, i32 %384, i32 %385, i32 %431, i32 %432) #1, !dbg !35
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !35
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !35
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !35
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !35
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %382, i32 %383, i32 %384, i32 %385, i32 %439, i32 %440) #1, !dbg !35
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !35
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !35
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !35
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !35
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %315, float %316, float %317, float %318, i32 %382, i32 %383, i32 %384, i32 %385, i32 %447, i32 %448) #1, !dbg !35
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !35
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !35
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !35
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !35
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %382, i32 %383, i32 %384, i32 %385, i32 %455, i32 %456) #1, !dbg !35
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !35
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !35
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !35
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !35
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %460, float %461, float %462, float %463, i32 %342, i32 %343, i32 %344, i32 %345, i32 %401, i32 %402) #1, !dbg !35
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !35
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !35
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !35
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !35
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %465, float %466, float %467, float %468, i32 %342, i32 %343, i32 %344, i32 %345, i32 %409, i32 %410) #1, !dbg !35
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !35
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !35
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !35
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !35
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %470, float %471, float %472, float %473, i32 %342, i32 %343, i32 %344, i32 %345, i32 %417, i32 %418) #1, !dbg !35
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !35
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !35
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !35
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !35
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %475, float %476, float %477, float %478, i32 %342, i32 %343, i32 %344, i32 %345, i32 %425, i32 %426) #1, !dbg !35
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !35
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !35
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !35
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !35
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %480, float %481, float %482, float %483, i32 %342, i32 %343, i32 %344, i32 %345, i32 %433, i32 %434) #1, !dbg !35
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !35
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !35
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !35
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !35
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %485, float %486, float %487, float %488, i32 %342, i32 %343, i32 %344, i32 %345, i32 %441, i32 %442) #1, !dbg !35
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !35
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !35
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !35
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !35
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %490, float %491, float %492, float %493, i32 %342, i32 %343, i32 %344, i32 %345, i32 %449, i32 %450) #1, !dbg !35
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !35
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !35
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !35
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !35
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %495, float %496, float %497, float %498, i32 %342, i32 %343, i32 %344, i32 %345, i32 %457, i32 %458) #1, !dbg !35
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !35
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !35
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !35
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !35
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %500, float %501, float %502, float %503, i32 %358, i32 %359, i32 %360, i32 %361, i32 %401, i32 %402) #1, !dbg !35
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !35
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !35
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !35
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !35
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %505, float %506, float %507, float %508, i32 %358, i32 %359, i32 %360, i32 %361, i32 %409, i32 %410) #1, !dbg !35
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !35
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !35
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !35
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !35
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %358, i32 %359, i32 %360, i32 %361, i32 %417, i32 %418) #1, !dbg !35
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !35
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !35
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !35
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !35
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %515, float %516, float %517, float %518, i32 %358, i32 %359, i32 %360, i32 %361, i32 %425, i32 %426) #1, !dbg !35
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !35
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !35
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !35
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !35
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %520, float %521, float %522, float %523, i32 %358, i32 %359, i32 %360, i32 %361, i32 %433, i32 %434) #1, !dbg !35
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !35
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !35
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !35
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !35
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %358, i32 %359, i32 %360, i32 %361, i32 %441, i32 %442) #1, !dbg !35
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !35
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !35
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !35
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !35
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %358, i32 %359, i32 %360, i32 %361, i32 %449, i32 %450) #1, !dbg !35
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !35
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !35
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !35
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !35
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %358, i32 %359, i32 %360, i32 %361, i32 %457, i32 %458) #1, !dbg !35
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !35
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !35
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !35
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !35
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %374, i32 %375, i32 %376, i32 %377, i32 %401, i32 %402) #1, !dbg !35
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !35
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !35
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !35
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !35
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %374, i32 %375, i32 %376, i32 %377, i32 %409, i32 %410) #1, !dbg !35
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !35
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !35
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !35
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !35
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %374, i32 %375, i32 %376, i32 %377, i32 %417, i32 %418) #1, !dbg !35
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !35
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !35
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !35
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !35
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %374, i32 %375, i32 %376, i32 %377, i32 %425, i32 %426) #1, !dbg !35
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !35
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !35
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !35
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !35
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %374, i32 %375, i32 %376, i32 %377, i32 %433, i32 %434) #1, !dbg !35
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !35
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !35
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !35
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !35
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %374, i32 %375, i32 %376, i32 %377, i32 %441, i32 %442) #1, !dbg !35
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !35
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !35
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !35
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !35
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %374, i32 %375, i32 %376, i32 %377, i32 %449, i32 %450) #1, !dbg !35
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !35
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !35
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !35
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !35
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %374, i32 %375, i32 %376, i32 %377, i32 %457, i32 %458) #1, !dbg !35
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !35
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !35
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !35
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !35
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %390, i32 %391, i32 %392, i32 %393, i32 %401, i32 %402) #1, !dbg !35
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !35
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !35
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !35
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !35
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %390, i32 %391, i32 %392, i32 %393, i32 %409, i32 %410) #1, !dbg !35
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !35
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !35
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !35
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !35
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %390, i32 %391, i32 %392, i32 %393, i32 %417, i32 %418) #1, !dbg !35
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !35
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !35
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !35
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !35
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %390, i32 %391, i32 %392, i32 %393, i32 %425, i32 %426) #1, !dbg !35
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !35
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !35
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !35
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !35
  %759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %390, i32 %391, i32 %392, i32 %393, i32 %433, i32 %434) #1, !dbg !35
  %760 = extractvalue { float, float, float, float } %759, 0, !dbg !35
  %761 = extractvalue { float, float, float, float } %759, 1, !dbg !35
  %762 = extractvalue { float, float, float, float } %759, 2, !dbg !35
  %763 = extractvalue { float, float, float, float } %759, 3, !dbg !35
  %764 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %390, i32 %391, i32 %392, i32 %393, i32 %441, i32 %442) #1, !dbg !35
  %765 = extractvalue { float, float, float, float } %764, 0, !dbg !35
  %766 = extractvalue { float, float, float, float } %764, 1, !dbg !35
  %767 = extractvalue { float, float, float, float } %764, 2, !dbg !35
  %768 = extractvalue { float, float, float, float } %764, 3, !dbg !35
  %769 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %390, i32 %391, i32 %392, i32 %393, i32 %449, i32 %450) #1, !dbg !35
  %770 = extractvalue { float, float, float, float } %769, 0, !dbg !35
  %771 = extractvalue { float, float, float, float } %769, 1, !dbg !35
  %772 = extractvalue { float, float, float, float } %769, 2, !dbg !35
  %773 = extractvalue { float, float, float, float } %769, 3, !dbg !35
  %774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %390, i32 %391, i32 %392, i32 %393, i32 %457, i32 %458) #1, !dbg !35
  %775 = extractvalue { float, float, float, float } %774, 0, !dbg !35
  %776 = extractvalue { float, float, float, float } %774, 1, !dbg !35
  %777 = extractvalue { float, float, float, float } %774, 2, !dbg !35
  %778 = extractvalue { float, float, float, float } %774, 3, !dbg !35
  %779 = add i32 %194, 1, !dbg !34
  %780 = icmp slt i32 %779, 2, !dbg !34
  %781 = select i1 %780, i32 %779, i32 0, !dbg !34
  %782 = shl nuw nsw i64 %indvars.iv, 5, !dbg !36
  %783 = add nuw nsw i64 %782, %183
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %783, !dbg !28
  %gep591 = getelementptr bfloat, ptr addrspace(1) %invariant.gep590, i64 %783, !dbg !28
  %gep593 = getelementptr bfloat, ptr addrspace(1) %invariant.gep592, i64 %783, !dbg !28
  %gep595 = getelementptr bfloat, ptr addrspace(1) %invariant.gep594, i64 %783, !dbg !28
  %784 = shl i32 %781, 12, !dbg !29
  %785 = sext i32 %784 to i64, !dbg !29
  %786 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %785, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %787 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %786, i64 %67, !dbg !29
  %788 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %786, i64 %70, !dbg !29
  %789 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %786, i64 %73, !dbg !29
  %790 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %786, i64 %76, !dbg !29
  %791 = select i1 %323, i32 16, i32 0, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %787, ptr addrspace(1) %gep, i32 %791) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %788, ptr addrspace(1) %gep591, i32 %791) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %789, ptr addrspace(1) %gep593, i32 %791) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %790, ptr addrspace(1) %gep595, i32 %791) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep597 = getelementptr bfloat, ptr addrspace(1) %invariant.gep596, i64 %783, !dbg !31
  %gep599 = getelementptr bfloat, ptr addrspace(1) %invariant.gep598, i64 %783, !dbg !31
  %gep601 = getelementptr bfloat, ptr addrspace(1) %invariant.gep600, i64 %783, !dbg !31
  %gep603 = getelementptr bfloat, ptr addrspace(1) %invariant.gep602, i64 %783, !dbg !31
  %792 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %785, !dbg !32
  %793 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %792, i64 %67, !dbg !32
  %794 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %792, i64 %70, !dbg !32
  %795 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %792, i64 %73, !dbg !32
  %796 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %792, i64 %76, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %793, ptr addrspace(1) %gep597, i32 %791) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %794, ptr addrspace(1) %gep599, i32 %791) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %795, ptr addrspace(1) %gep601, i32 %791) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %796, ptr addrspace(1) %gep603, i32 %791) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !34
  br i1 %exitcond.not, label %797, label %192, !dbg !34

797:                                              ; preds = %192
  %798 = and i32 %24, 120, !dbg !19
  %799 = or disjoint i32 %30, %798, !dbg !22
  %800 = lshr i32 %15, 4, !dbg !19
  %801 = and i32 %800, 7, !dbg !19
  %802 = or disjoint i32 %801, %14, !dbg !20
  %803 = or disjoint i32 %802, 72, !dbg !20
  %804 = or disjoint i32 %802, 64, !dbg !20
  %805 = or disjoint i32 %802, 56, !dbg !20
  %806 = or disjoint i32 %802, 48, !dbg !20
  %807 = or disjoint i32 %802, 40, !dbg !20
  %808 = or disjoint i32 %802, 32, !dbg !20
  %809 = or disjoint i32 %802, 24, !dbg !20
  %810 = or disjoint i32 %802, 16, !dbg !20
  %811 = or disjoint i32 %802, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %812 = icmp slt i32 %802, 77, !dbg !37
  %813 = icmp slt i32 %811, 77, !dbg !37
  %814 = icmp slt i32 %810, 77, !dbg !37
  %815 = icmp slt i32 %809, 77, !dbg !37
  %816 = icmp slt i32 %808, 77, !dbg !37
  %817 = icmp slt i32 %807, 77, !dbg !37
  %818 = icmp slt i32 %806, 77, !dbg !37
  %819 = icmp slt i32 %805, 77, !dbg !37
  %820 = icmp slt i32 %804, 77, !dbg !37
  %821 = icmp slt i32 %803, 77, !dbg !37
  %822 = icmp slt i32 %14, 0, !dbg !37
  %823 = icmp slt i32 %799, 768, !dbg !38
  %824 = and i1 %812, %823, !dbg !39
  %825 = and i1 %813, %823, !dbg !39
  %826 = and i1 %814, %823, !dbg !39
  %827 = and i1 %815, %823, !dbg !39
  %828 = and i1 %816, %823, !dbg !39
  %829 = and i1 %817, %823, !dbg !39
  %830 = and i1 %818, %823, !dbg !39
  %831 = and i1 %819, %823, !dbg !39
  %832 = and i1 %820, %823, !dbg !39
  %833 = and i1 %821, %823, !dbg !39
  %834 = and i1 %822, %823, !dbg !39
  %835 = mul i32 %802, 768, !dbg !40
  %836 = mul i32 %811, 768, !dbg !40
  %837 = mul i32 %810, 768, !dbg !40
  %838 = mul i32 %809, 768, !dbg !40
  %839 = mul i32 %808, 768, !dbg !40
  %840 = mul i32 %807, 768, !dbg !40
  %841 = mul i32 %806, 768, !dbg !40
  %842 = mul i32 %805, 768, !dbg !40
  %843 = mul i32 %804, 768, !dbg !40
  %844 = mul i32 %803, 768, !dbg !40
  %845 = add i32 %835, 61440, !dbg !40
  %846 = add i32 %835, 67584, !dbg !40
  %847 = add i32 %835, 73728, !dbg !40
  %848 = add i32 %835, 79872, !dbg !40
  %849 = add i32 %835, 86016, !dbg !40
  %850 = add i32 %835, 92160, !dbg !40
  %851 = add i32 %835, %799, !dbg !41
  %852 = add i32 %836, %799, !dbg !41
  %853 = add i32 %837, %799, !dbg !41
  %854 = add i32 %838, %799, !dbg !41
  %855 = add i32 %839, %799, !dbg !41
  %856 = add i32 %840, %799, !dbg !41
  %857 = add i32 %841, %799, !dbg !41
  %858 = add i32 %842, %799, !dbg !41
  %859 = add i32 %843, %799, !dbg !41
  %860 = add i32 %844, %799, !dbg !41
  %861 = add i32 %845, %799, !dbg !41
  %862 = add i32 %846, %799, !dbg !41
  %863 = add i32 %847, %799, !dbg !41
  %864 = add i32 %848, %799, !dbg !41
  %865 = add i32 %849, %799, !dbg !41
  %866 = add i32 %850, %799, !dbg !41
  %867 = sext i32 %851 to i64, !dbg !42
  %868 = getelementptr bfloat, ptr addrspace(1) %2, i64 %867, !dbg !42
  %869 = sext i32 %852 to i64, !dbg !42
  %870 = getelementptr bfloat, ptr addrspace(1) %2, i64 %869, !dbg !42
  %871 = sext i32 %853 to i64, !dbg !42
  %872 = getelementptr bfloat, ptr addrspace(1) %2, i64 %871, !dbg !42
  %873 = sext i32 %854 to i64, !dbg !42
  %874 = getelementptr bfloat, ptr addrspace(1) %2, i64 %873, !dbg !42
  %875 = sext i32 %855 to i64, !dbg !42
  %876 = getelementptr bfloat, ptr addrspace(1) %2, i64 %875, !dbg !42
  %877 = sext i32 %856 to i64, !dbg !42
  %878 = getelementptr bfloat, ptr addrspace(1) %2, i64 %877, !dbg !42
  %879 = sext i32 %857 to i64, !dbg !42
  %880 = getelementptr bfloat, ptr addrspace(1) %2, i64 %879, !dbg !42
  %881 = sext i32 %858 to i64, !dbg !42
  %882 = getelementptr bfloat, ptr addrspace(1) %2, i64 %881, !dbg !42
  %883 = sext i32 %859 to i64, !dbg !42
  %884 = getelementptr bfloat, ptr addrspace(1) %2, i64 %883, !dbg !42
  %885 = sext i32 %860 to i64, !dbg !42
  %886 = getelementptr bfloat, ptr addrspace(1) %2, i64 %885, !dbg !42
  %887 = sext i32 %861 to i64, !dbg !42
  %888 = getelementptr bfloat, ptr addrspace(1) %2, i64 %887, !dbg !42
  %889 = sext i32 %862 to i64, !dbg !42
  %890 = getelementptr bfloat, ptr addrspace(1) %2, i64 %889, !dbg !42
  %891 = sext i32 %863 to i64, !dbg !42
  %892 = getelementptr bfloat, ptr addrspace(1) %2, i64 %891, !dbg !42
  %893 = sext i32 %864 to i64, !dbg !42
  %894 = getelementptr bfloat, ptr addrspace(1) %2, i64 %893, !dbg !42
  %895 = sext i32 %865 to i64, !dbg !42
  %896 = getelementptr bfloat, ptr addrspace(1) %2, i64 %895, !dbg !42
  %897 = sext i32 %866 to i64, !dbg !42
  %898 = getelementptr bfloat, ptr addrspace(1) %2, i64 %897, !dbg !42
  %899 = fptrunc float %620 to bfloat, !dbg !43
  %900 = fptrunc float %621 to bfloat, !dbg !43
  %901 = fptrunc float %622 to bfloat, !dbg !43
  %902 = fptrunc float %623 to bfloat, !dbg !43
  %903 = fptrunc float %625 to bfloat, !dbg !43
  %904 = fptrunc float %626 to bfloat, !dbg !43
  %905 = fptrunc float %627 to bfloat, !dbg !43
  %906 = fptrunc float %628 to bfloat, !dbg !43
  %907 = fptrunc float %630 to bfloat, !dbg !43
  %908 = fptrunc float %631 to bfloat, !dbg !43
  %909 = fptrunc float %632 to bfloat, !dbg !43
  %910 = fptrunc float %633 to bfloat, !dbg !43
  %911 = fptrunc float %635 to bfloat, !dbg !43
  %912 = fptrunc float %636 to bfloat, !dbg !43
  %913 = fptrunc float %637 to bfloat, !dbg !43
  %914 = fptrunc float %638 to bfloat, !dbg !43
  %915 = fptrunc float %640 to bfloat, !dbg !43
  %916 = fptrunc float %641 to bfloat, !dbg !43
  %917 = fptrunc float %642 to bfloat, !dbg !43
  %918 = fptrunc float %643 to bfloat, !dbg !43
  %919 = fptrunc float %645 to bfloat, !dbg !43
  %920 = fptrunc float %646 to bfloat, !dbg !43
  %921 = fptrunc float %647 to bfloat, !dbg !43
  %922 = fptrunc float %648 to bfloat, !dbg !43
  %923 = fptrunc float %650 to bfloat, !dbg !43
  %924 = fptrunc float %651 to bfloat, !dbg !43
  %925 = fptrunc float %652 to bfloat, !dbg !43
  %926 = fptrunc float %653 to bfloat, !dbg !43
  %927 = fptrunc float %655 to bfloat, !dbg !43
  %928 = fptrunc float %656 to bfloat, !dbg !43
  %929 = fptrunc float %657 to bfloat, !dbg !43
  %930 = fptrunc float %658 to bfloat, !dbg !43
  %931 = fptrunc float %660 to bfloat, !dbg !43
  %932 = fptrunc float %661 to bfloat, !dbg !43
  %933 = fptrunc float %662 to bfloat, !dbg !43
  %934 = fptrunc float %663 to bfloat, !dbg !43
  %935 = fptrunc float %665 to bfloat, !dbg !43
  %936 = fptrunc float %666 to bfloat, !dbg !43
  %937 = fptrunc float %667 to bfloat, !dbg !43
  %938 = fptrunc float %668 to bfloat, !dbg !43
  %939 = fptrunc float %670 to bfloat, !dbg !43
  %940 = fptrunc float %671 to bfloat, !dbg !43
  %941 = fptrunc float %672 to bfloat, !dbg !43
  %942 = fptrunc float %673 to bfloat, !dbg !43
  %943 = fptrunc float %675 to bfloat, !dbg !43
  %944 = fptrunc float %676 to bfloat, !dbg !43
  %945 = fptrunc float %677 to bfloat, !dbg !43
  %946 = fptrunc float %678 to bfloat, !dbg !43
  %947 = fptrunc float %680 to bfloat, !dbg !43
  %948 = fptrunc float %681 to bfloat, !dbg !43
  %949 = fptrunc float %682 to bfloat, !dbg !43
  %950 = fptrunc float %683 to bfloat, !dbg !43
  %951 = fptrunc float %685 to bfloat, !dbg !43
  %952 = fptrunc float %686 to bfloat, !dbg !43
  %953 = fptrunc float %687 to bfloat, !dbg !43
  %954 = fptrunc float %688 to bfloat, !dbg !43
  %955 = fptrunc float %690 to bfloat, !dbg !43
  %956 = fptrunc float %691 to bfloat, !dbg !43
  %957 = fptrunc float %692 to bfloat, !dbg !43
  %958 = fptrunc float %693 to bfloat, !dbg !43
  %959 = fptrunc float %695 to bfloat, !dbg !43
  %960 = fptrunc float %696 to bfloat, !dbg !43
  %961 = fptrunc float %697 to bfloat, !dbg !43
  %962 = fptrunc float %698 to bfloat, !dbg !43
  %963 = fptrunc float %700 to bfloat, !dbg !43
  %964 = fptrunc float %701 to bfloat, !dbg !43
  %965 = fptrunc float %702 to bfloat, !dbg !43
  %966 = fptrunc float %703 to bfloat, !dbg !43
  %967 = fptrunc float %705 to bfloat, !dbg !43
  %968 = fptrunc float %706 to bfloat, !dbg !43
  %969 = fptrunc float %707 to bfloat, !dbg !43
  %970 = fptrunc float %708 to bfloat, !dbg !43
  %971 = fptrunc float %710 to bfloat, !dbg !43
  %972 = fptrunc float %711 to bfloat, !dbg !43
  %973 = fptrunc float %712 to bfloat, !dbg !43
  %974 = fptrunc float %713 to bfloat, !dbg !43
  %975 = fptrunc float %715 to bfloat, !dbg !43
  %976 = fptrunc float %716 to bfloat, !dbg !43
  %977 = fptrunc float %717 to bfloat, !dbg !43
  %978 = fptrunc float %718 to bfloat, !dbg !43
  %979 = fptrunc float %720 to bfloat, !dbg !43
  %980 = fptrunc float %721 to bfloat, !dbg !43
  %981 = fptrunc float %722 to bfloat, !dbg !43
  %982 = fptrunc float %723 to bfloat, !dbg !43
  %983 = fptrunc float %725 to bfloat, !dbg !43
  %984 = fptrunc float %726 to bfloat, !dbg !43
  %985 = fptrunc float %727 to bfloat, !dbg !43
  %986 = fptrunc float %728 to bfloat, !dbg !43
  %987 = fptrunc float %730 to bfloat, !dbg !43
  %988 = fptrunc float %731 to bfloat, !dbg !43
  %989 = fptrunc float %732 to bfloat, !dbg !43
  %990 = fptrunc float %733 to bfloat, !dbg !43
  %991 = fptrunc float %735 to bfloat, !dbg !43
  %992 = fptrunc float %736 to bfloat, !dbg !43
  %993 = fptrunc float %737 to bfloat, !dbg !43
  %994 = fptrunc float %738 to bfloat, !dbg !43
  %995 = fptrunc float %740 to bfloat, !dbg !43
  %996 = fptrunc float %741 to bfloat, !dbg !43
  %997 = fptrunc float %742 to bfloat, !dbg !43
  %998 = fptrunc float %743 to bfloat, !dbg !43
  %999 = fptrunc float %745 to bfloat, !dbg !43
  %1000 = fptrunc float %746 to bfloat, !dbg !43
  %1001 = fptrunc float %747 to bfloat, !dbg !43
  %1002 = fptrunc float %748 to bfloat, !dbg !43
  %1003 = fptrunc float %750 to bfloat, !dbg !43
  %1004 = fptrunc float %751 to bfloat, !dbg !43
  %1005 = fptrunc float %752 to bfloat, !dbg !43
  %1006 = fptrunc float %753 to bfloat, !dbg !43
  %1007 = fptrunc float %755 to bfloat, !dbg !43
  %1008 = fptrunc float %756 to bfloat, !dbg !43
  %1009 = fptrunc float %757 to bfloat, !dbg !43
  %1010 = fptrunc float %758 to bfloat, !dbg !43
  %1011 = fptrunc float %760 to bfloat, !dbg !43
  %1012 = fptrunc float %761 to bfloat, !dbg !43
  %1013 = fptrunc float %762 to bfloat, !dbg !43
  %1014 = fptrunc float %763 to bfloat, !dbg !43
  %1015 = fptrunc float %765 to bfloat, !dbg !43
  %1016 = fptrunc float %766 to bfloat, !dbg !43
  %1017 = fptrunc float %767 to bfloat, !dbg !43
  %1018 = fptrunc float %768 to bfloat, !dbg !43
  %1019 = fptrunc float %770 to bfloat, !dbg !43
  %1020 = fptrunc float %771 to bfloat, !dbg !43
  %1021 = fptrunc float %772 to bfloat, !dbg !43
  %1022 = fptrunc float %773 to bfloat, !dbg !43
  %1023 = fptrunc float %775 to bfloat, !dbg !43
  %1024 = fptrunc float %776 to bfloat, !dbg !43
  %1025 = fptrunc float %777 to bfloat, !dbg !43
  %1026 = fptrunc float %778 to bfloat, !dbg !43
  %1027 = shl i32 %15, 1, !dbg !43
  %1028 = and i32 %1027, 6, !dbg !43
  %1029 = shl i32 %15, 5, !dbg !43
  %1030 = and i32 %1029, 2944, !dbg !43
  %1031 = or disjoint i32 %1030, %1028, !dbg !43
  %1032 = or disjoint i32 %1031, %18, !dbg !43
  %1033 = and i32 %24, 1016, !dbg !43
  %1034 = lshr exact i32 %1030, 4, !dbg !43
  %1035 = add nuw nsw i32 %1032, %1034, !dbg !43
  %1036 = zext nneg i32 %1035 to i64, !dbg !43
  %1037 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1036, !dbg !43
  %1038 = bitcast bfloat %899 to i16, !dbg !43
  %1039 = bitcast bfloat %900 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1037, i16 %1038, i16 %1039, i1 true) #1, !dbg !43
  %1040 = or disjoint i32 %1032, 1024, !dbg !43
  %1041 = lshr i32 %1040, 4, !dbg !43
  %1042 = add nuw nsw i32 %1041, %1040, !dbg !43
  %1043 = zext nneg i32 %1042 to i64, !dbg !43
  %1044 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1043, !dbg !43
  %1045 = bitcast bfloat %901 to i16, !dbg !43
  %1046 = bitcast bfloat %902 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1045, i16 %1046, i1 true) #1, !dbg !43
  %1047 = add nuw nsw i32 %1034, 16, !dbg !43
  %1048 = add nuw nsw i32 %1047, %1032, !dbg !43
  %1049 = zext nneg i32 %1048 to i64, !dbg !43
  %1050 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1049, !dbg !43
  %1051 = bitcast bfloat %903 to i16, !dbg !43
  %1052 = bitcast bfloat %904 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1051, i16 %1052, i1 true) #1, !dbg !43
  %1053 = or disjoint i32 %1032, 1040, !dbg !43
  %1054 = lshr i32 %1053, 4, !dbg !43
  %1055 = and i32 %1054, 248, !dbg !43
  %1056 = add nuw nsw i32 %1055, %1053, !dbg !43
  %1057 = zext nneg i32 %1056 to i64, !dbg !43
  %1058 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1057, !dbg !43
  %1059 = bitcast bfloat %905 to i16, !dbg !43
  %1060 = bitcast bfloat %906 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1059, i16 %1060, i1 true) #1, !dbg !43
  %1061 = add nuw nsw i32 %1034, 32, !dbg !43
  %1062 = add nuw nsw i32 %1061, %1032, !dbg !43
  %1063 = zext nneg i32 %1062 to i64, !dbg !43
  %1064 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1063, !dbg !43
  %1065 = bitcast bfloat %907 to i16, !dbg !43
  %1066 = bitcast bfloat %908 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1065, i16 %1066, i1 true) #1, !dbg !43
  %1067 = or disjoint i32 %1032, 1056, !dbg !43
  %1068 = lshr i32 %1067, 4, !dbg !43
  %1069 = and i32 %1068, 248, !dbg !43
  %1070 = add nuw nsw i32 %1069, %1067, !dbg !43
  %1071 = zext nneg i32 %1070 to i64, !dbg !43
  %1072 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1071, !dbg !43
  %1073 = bitcast bfloat %909 to i16, !dbg !43
  %1074 = bitcast bfloat %910 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1073, i16 %1074, i1 true) #1, !dbg !43
  %1075 = add nuw nsw i32 %1034, 48, !dbg !43
  %1076 = add nuw nsw i32 %1075, %1032, !dbg !43
  %1077 = zext nneg i32 %1076 to i64, !dbg !43
  %1078 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1077, !dbg !43
  %1079 = bitcast bfloat %911 to i16, !dbg !43
  %1080 = bitcast bfloat %912 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1079, i16 %1080, i1 true) #1, !dbg !43
  %1081 = or disjoint i32 %1032, 1072, !dbg !43
  %1082 = lshr i32 %1081, 4, !dbg !43
  %1083 = and i32 %1082, 248, !dbg !43
  %1084 = add nuw nsw i32 %1083, %1081, !dbg !43
  %1085 = zext nneg i32 %1084 to i64, !dbg !43
  %1086 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1085, !dbg !43
  %1087 = bitcast bfloat %913 to i16, !dbg !43
  %1088 = bitcast bfloat %914 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1087, i16 %1088, i1 true) #1, !dbg !43
  %1089 = or disjoint i32 %1034, 64, !dbg !43
  %1090 = add nuw nsw i32 %1089, %1032, !dbg !43
  %1091 = zext nneg i32 %1090 to i64, !dbg !43
  %1092 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1091, !dbg !43
  %1093 = bitcast bfloat %915 to i16, !dbg !43
  %1094 = bitcast bfloat %916 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1092, i16 %1093, i16 %1094, i1 true) #1, !dbg !43
  %1095 = or disjoint i32 %1032, 1088, !dbg !43
  %1096 = lshr i32 %1095, 4, !dbg !43
  %1097 = and i32 %1096, 248, !dbg !43
  %1098 = add nuw nsw i32 %1097, %1095, !dbg !43
  %1099 = zext nneg i32 %1098 to i64, !dbg !43
  %1100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1099, !dbg !43
  %1101 = bitcast bfloat %917 to i16, !dbg !43
  %1102 = bitcast bfloat %918 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1100, i16 %1101, i16 %1102, i1 true) #1, !dbg !43
  %1103 = add nuw nsw i32 %1034, 80, !dbg !43
  %1104 = add nuw nsw i32 %1103, %1032, !dbg !43
  %1105 = zext nneg i32 %1104 to i64, !dbg !43
  %1106 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1105, !dbg !43
  %1107 = bitcast bfloat %919 to i16, !dbg !43
  %1108 = bitcast bfloat %920 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1106, i16 %1107, i16 %1108, i1 true) #1, !dbg !43
  %1109 = or disjoint i32 %1032, 1104, !dbg !43
  %1110 = lshr i32 %1109, 4, !dbg !43
  %1111 = and i32 %1110, 248, !dbg !43
  %1112 = add nuw nsw i32 %1111, %1109, !dbg !43
  %1113 = zext nneg i32 %1112 to i64, !dbg !43
  %1114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1113, !dbg !43
  %1115 = bitcast bfloat %921 to i16, !dbg !43
  %1116 = bitcast bfloat %922 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1114, i16 %1115, i16 %1116, i1 true) #1, !dbg !43
  %1117 = add nuw nsw i32 %1034, 96, !dbg !43
  %1118 = add nuw nsw i32 %1117, %1032, !dbg !43
  %1119 = zext nneg i32 %1118 to i64, !dbg !43
  %1120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1119, !dbg !43
  %1121 = bitcast bfloat %923 to i16, !dbg !43
  %1122 = bitcast bfloat %924 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1120, i16 %1121, i16 %1122, i1 true) #1, !dbg !43
  %1123 = or disjoint i32 %1032, 1120, !dbg !43
  %1124 = lshr i32 %1123, 4, !dbg !43
  %1125 = and i32 %1124, 248, !dbg !43
  %1126 = add nuw nsw i32 %1125, %1123, !dbg !43
  %1127 = zext nneg i32 %1126 to i64, !dbg !43
  %1128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1127, !dbg !43
  %1129 = bitcast bfloat %925 to i16, !dbg !43
  %1130 = bitcast bfloat %926 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1128, i16 %1129, i16 %1130, i1 true) #1, !dbg !43
  %1131 = add nuw nsw i32 %1034, 112, !dbg !43
  %1132 = add nuw nsw i32 %1131, %1032, !dbg !43
  %1133 = zext nneg i32 %1132 to i64, !dbg !43
  %1134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1133, !dbg !43
  %1135 = bitcast bfloat %927 to i16, !dbg !43
  %1136 = bitcast bfloat %928 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1134, i16 %1135, i16 %1136, i1 true) #1, !dbg !43
  %1137 = or disjoint i32 %1032, 1136, !dbg !43
  %1138 = lshr i32 %1137, 4, !dbg !43
  %1139 = and i32 %1138, 248, !dbg !43
  %1140 = add nuw nsw i32 %1139, %1137, !dbg !43
  %1141 = zext nneg i32 %1140 to i64, !dbg !43
  %1142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1141, !dbg !43
  %1143 = bitcast bfloat %929 to i16, !dbg !43
  %1144 = bitcast bfloat %930 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1142, i16 %1143, i16 %1144, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1145 = lshr i32 %24, 4, !dbg !43
  %1146 = and i32 %1145, 56, !dbg !43
  %1147 = add nuw nsw i32 %1146, %1033, !dbg !43
  %1148 = zext nneg i32 %1147 to i64, !dbg !43
  %1149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1148, !dbg !43
  %1150 = load <4 x i32>, ptr addrspace(3) %1149, align 16, !dbg !43
  %1151 = or disjoint i32 %1033, 1024, !dbg !43
  %1152 = lshr i32 %1151, 4, !dbg !43
  %1153 = and i32 %1152, 120, !dbg !43
  %1154 = add nuw nsw i32 %1153, %1151, !dbg !43
  %1155 = zext nneg i32 %1154 to i64, !dbg !43
  %1156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1155, !dbg !43
  %1157 = load <4 x i32>, ptr addrspace(3) %1156, align 16, !dbg !43
  %1158 = or disjoint i32 %1033, 2048, !dbg !43
  %1159 = lshr i32 %1158, 4, !dbg !43
  %1160 = and i32 %1159, 184, !dbg !43
  %1161 = add nuw nsw i32 %1160, %1158, !dbg !43
  %1162 = zext nneg i32 %1161 to i64, !dbg !43
  %1163 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1162, !dbg !43
  %1164 = load <4 x i32>, ptr addrspace(3) %1163, align 16, !dbg !43
  %1165 = or disjoint i32 %1033, 3072, !dbg !43
  %1166 = lshr i32 %1165, 4, !dbg !43
  %1167 = and i32 %1166, 248, !dbg !43
  %1168 = add nuw nsw i32 %1167, %1165, !dbg !43
  %1169 = zext nneg i32 %1168 to i64, !dbg !43
  %1170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1169, !dbg !43
  %1171 = load <4 x i32>, ptr addrspace(3) %1170, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1172 = bitcast bfloat %931 to i16, !dbg !43
  %1173 = bitcast bfloat %932 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1037, i16 %1172, i16 %1173, i1 true) #1, !dbg !43
  %1174 = bitcast bfloat %933 to i16, !dbg !43
  %1175 = bitcast bfloat %934 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1174, i16 %1175, i1 true) #1, !dbg !43
  %1176 = bitcast bfloat %935 to i16, !dbg !43
  %1177 = bitcast bfloat %936 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1176, i16 %1177, i1 true) #1, !dbg !43
  %1178 = bitcast bfloat %937 to i16, !dbg !43
  %1179 = bitcast bfloat %938 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1178, i16 %1179, i1 true) #1, !dbg !43
  %1180 = bitcast bfloat %939 to i16, !dbg !43
  %1181 = bitcast bfloat %940 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1180, i16 %1181, i1 true) #1, !dbg !43
  %1182 = bitcast bfloat %941 to i16, !dbg !43
  %1183 = bitcast bfloat %942 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1182, i16 %1183, i1 true) #1, !dbg !43
  %1184 = bitcast bfloat %943 to i16, !dbg !43
  %1185 = bitcast bfloat %944 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1184, i16 %1185, i1 true) #1, !dbg !43
  %1186 = bitcast bfloat %945 to i16, !dbg !43
  %1187 = bitcast bfloat %946 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1186, i16 %1187, i1 true) #1, !dbg !43
  %1188 = bitcast bfloat %947 to i16, !dbg !43
  %1189 = bitcast bfloat %948 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1092, i16 %1188, i16 %1189, i1 true) #1, !dbg !43
  %1190 = bitcast bfloat %949 to i16, !dbg !43
  %1191 = bitcast bfloat %950 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1100, i16 %1190, i16 %1191, i1 true) #1, !dbg !43
  %1192 = bitcast bfloat %951 to i16, !dbg !43
  %1193 = bitcast bfloat %952 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1106, i16 %1192, i16 %1193, i1 true) #1, !dbg !43
  %1194 = bitcast bfloat %953 to i16, !dbg !43
  %1195 = bitcast bfloat %954 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1114, i16 %1194, i16 %1195, i1 true) #1, !dbg !43
  %1196 = bitcast bfloat %955 to i16, !dbg !43
  %1197 = bitcast bfloat %956 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1120, i16 %1196, i16 %1197, i1 true) #1, !dbg !43
  %1198 = bitcast bfloat %957 to i16, !dbg !43
  %1199 = bitcast bfloat %958 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1128, i16 %1198, i16 %1199, i1 true) #1, !dbg !43
  %1200 = bitcast bfloat %959 to i16, !dbg !43
  %1201 = bitcast bfloat %960 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1134, i16 %1200, i16 %1201, i1 true) #1, !dbg !43
  %1202 = bitcast bfloat %961 to i16, !dbg !43
  %1203 = bitcast bfloat %962 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1142, i16 %1202, i16 %1203, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1204 = load <4 x i32>, ptr addrspace(3) %1149, align 16, !dbg !43
  %1205 = load <4 x i32>, ptr addrspace(3) %1156, align 16, !dbg !43
  %1206 = load <4 x i32>, ptr addrspace(3) %1163, align 16, !dbg !43
  %1207 = load <4 x i32>, ptr addrspace(3) %1170, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1208 = bitcast bfloat %963 to i16, !dbg !43
  %1209 = bitcast bfloat %964 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1037, i16 %1208, i16 %1209, i1 true) #1, !dbg !43
  %1210 = bitcast bfloat %965 to i16, !dbg !43
  %1211 = bitcast bfloat %966 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1210, i16 %1211, i1 true) #1, !dbg !43
  %1212 = bitcast bfloat %967 to i16, !dbg !43
  %1213 = bitcast bfloat %968 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1212, i16 %1213, i1 true) #1, !dbg !43
  %1214 = bitcast bfloat %969 to i16, !dbg !43
  %1215 = bitcast bfloat %970 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1214, i16 %1215, i1 true) #1, !dbg !43
  %1216 = bitcast bfloat %971 to i16, !dbg !43
  %1217 = bitcast bfloat %972 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1216, i16 %1217, i1 true) #1, !dbg !43
  %1218 = bitcast bfloat %973 to i16, !dbg !43
  %1219 = bitcast bfloat %974 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1218, i16 %1219, i1 true) #1, !dbg !43
  %1220 = bitcast bfloat %975 to i16, !dbg !43
  %1221 = bitcast bfloat %976 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1220, i16 %1221, i1 true) #1, !dbg !43
  %1222 = bitcast bfloat %977 to i16, !dbg !43
  %1223 = bitcast bfloat %978 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1222, i16 %1223, i1 true) #1, !dbg !43
  %1224 = bitcast bfloat %979 to i16, !dbg !43
  %1225 = bitcast bfloat %980 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1092, i16 %1224, i16 %1225, i1 true) #1, !dbg !43
  %1226 = bitcast bfloat %981 to i16, !dbg !43
  %1227 = bitcast bfloat %982 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1100, i16 %1226, i16 %1227, i1 true) #1, !dbg !43
  %1228 = bitcast bfloat %983 to i16, !dbg !43
  %1229 = bitcast bfloat %984 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1106, i16 %1228, i16 %1229, i1 true) #1, !dbg !43
  %1230 = bitcast bfloat %985 to i16, !dbg !43
  %1231 = bitcast bfloat %986 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1114, i16 %1230, i16 %1231, i1 true) #1, !dbg !43
  %1232 = bitcast bfloat %987 to i16, !dbg !43
  %1233 = bitcast bfloat %988 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1120, i16 %1232, i16 %1233, i1 true) #1, !dbg !43
  %1234 = bitcast bfloat %989 to i16, !dbg !43
  %1235 = bitcast bfloat %990 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1128, i16 %1234, i16 %1235, i1 true) #1, !dbg !43
  %1236 = bitcast bfloat %991 to i16, !dbg !43
  %1237 = bitcast bfloat %992 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1134, i16 %1236, i16 %1237, i1 true) #1, !dbg !43
  %1238 = bitcast bfloat %993 to i16, !dbg !43
  %1239 = bitcast bfloat %994 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1142, i16 %1238, i16 %1239, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1240 = load <4 x i32>, ptr addrspace(3) %1149, align 16, !dbg !43
  %1241 = load <4 x i32>, ptr addrspace(3) %1156, align 16, !dbg !43
  %1242 = load <4 x i32>, ptr addrspace(3) %1163, align 16, !dbg !43
  %1243 = load <4 x i32>, ptr addrspace(3) %1170, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1244 = bitcast bfloat %995 to i16, !dbg !43
  %1245 = bitcast bfloat %996 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1037, i16 %1244, i16 %1245, i1 true) #1, !dbg !43
  %1246 = bitcast bfloat %997 to i16, !dbg !43
  %1247 = bitcast bfloat %998 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1246, i16 %1247, i1 true) #1, !dbg !43
  %1248 = bitcast bfloat %999 to i16, !dbg !43
  %1249 = bitcast bfloat %1000 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1248, i16 %1249, i1 true) #1, !dbg !43
  %1250 = bitcast bfloat %1001 to i16, !dbg !43
  %1251 = bitcast bfloat %1002 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1250, i16 %1251, i1 true) #1, !dbg !43
  %1252 = bitcast bfloat %1003 to i16, !dbg !43
  %1253 = bitcast bfloat %1004 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1252, i16 %1253, i1 true) #1, !dbg !43
  %1254 = bitcast bfloat %1005 to i16, !dbg !43
  %1255 = bitcast bfloat %1006 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1254, i16 %1255, i1 true) #1, !dbg !43
  %1256 = bitcast bfloat %1007 to i16, !dbg !43
  %1257 = bitcast bfloat %1008 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1256, i16 %1257, i1 true) #1, !dbg !43
  %1258 = bitcast bfloat %1009 to i16, !dbg !43
  %1259 = bitcast bfloat %1010 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1258, i16 %1259, i1 true) #1, !dbg !43
  %1260 = bitcast bfloat %1011 to i16, !dbg !43
  %1261 = bitcast bfloat %1012 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1092, i16 %1260, i16 %1261, i1 true) #1, !dbg !43
  %1262 = bitcast bfloat %1013 to i16, !dbg !43
  %1263 = bitcast bfloat %1014 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1100, i16 %1262, i16 %1263, i1 true) #1, !dbg !43
  %1264 = bitcast bfloat %1015 to i16, !dbg !43
  %1265 = bitcast bfloat %1016 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1106, i16 %1264, i16 %1265, i1 true) #1, !dbg !43
  %1266 = bitcast bfloat %1017 to i16, !dbg !43
  %1267 = bitcast bfloat %1018 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1114, i16 %1266, i16 %1267, i1 true) #1, !dbg !43
  %1268 = bitcast bfloat %1019 to i16, !dbg !43
  %1269 = bitcast bfloat %1020 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1120, i16 %1268, i16 %1269, i1 true) #1, !dbg !43
  %1270 = bitcast bfloat %1021 to i16, !dbg !43
  %1271 = bitcast bfloat %1022 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1128, i16 %1270, i16 %1271, i1 true) #1, !dbg !43
  %1272 = bitcast bfloat %1023 to i16, !dbg !43
  %1273 = bitcast bfloat %1024 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1134, i16 %1272, i16 %1273, i1 true) #1, !dbg !43
  %1274 = bitcast bfloat %1025 to i16, !dbg !43
  %1275 = bitcast bfloat %1026 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1142, i16 %1274, i16 %1275, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1276 = load <4 x i32>, ptr addrspace(3) %1149, align 16, !dbg !43
  %1277 = load <4 x i32>, ptr addrspace(3) %1156, align 16, !dbg !43
  %1278 = load <4 x i32>, ptr addrspace(3) %1163, align 16, !dbg !43
  %1279 = load <4 x i32>, ptr addrspace(3) %1170, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %1150, i64 0, !dbg !43
  %.extract200 = extractelement <4 x i32> %1150, i64 1, !dbg !43
  %.extract202 = extractelement <4 x i32> %1150, i64 2, !dbg !43
  %.extract204 = extractelement <4 x i32> %1150, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract200, i32 %.extract202, i32 %.extract204, ptr addrspace(1) %868, i1 %824) #1, !dbg !43
  %.extract206 = extractelement <4 x i32> %1157, i64 0, !dbg !43
  %.extract208 = extractelement <4 x i32> %1157, i64 1, !dbg !43
  %.extract210 = extractelement <4 x i32> %1157, i64 2, !dbg !43
  %.extract212 = extractelement <4 x i32> %1157, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract206, i32 %.extract208, i32 %.extract210, i32 %.extract212, ptr addrspace(1) %870, i1 %825) #1, !dbg !43
  %.extract214 = extractelement <4 x i32> %1164, i64 0, !dbg !43
  %.extract216 = extractelement <4 x i32> %1164, i64 1, !dbg !43
  %.extract218 = extractelement <4 x i32> %1164, i64 2, !dbg !43
  %.extract220 = extractelement <4 x i32> %1164, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract214, i32 %.extract216, i32 %.extract218, i32 %.extract220, ptr addrspace(1) %872, i1 %826) #1, !dbg !43
  %.extract222 = extractelement <4 x i32> %1171, i64 0, !dbg !43
  %.extract224 = extractelement <4 x i32> %1171, i64 1, !dbg !43
  %.extract226 = extractelement <4 x i32> %1171, i64 2, !dbg !43
  %.extract228 = extractelement <4 x i32> %1171, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract222, i32 %.extract224, i32 %.extract226, i32 %.extract228, ptr addrspace(1) %874, i1 %827) #1, !dbg !43
  %.extract230 = extractelement <4 x i32> %1204, i64 0, !dbg !43
  %.extract232 = extractelement <4 x i32> %1204, i64 1, !dbg !43
  %.extract234 = extractelement <4 x i32> %1204, i64 2, !dbg !43
  %.extract236 = extractelement <4 x i32> %1204, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract230, i32 %.extract232, i32 %.extract234, i32 %.extract236, ptr addrspace(1) %876, i1 %828) #1, !dbg !43
  %.extract238 = extractelement <4 x i32> %1205, i64 0, !dbg !43
  %.extract240 = extractelement <4 x i32> %1205, i64 1, !dbg !43
  %.extract242 = extractelement <4 x i32> %1205, i64 2, !dbg !43
  %.extract244 = extractelement <4 x i32> %1205, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract238, i32 %.extract240, i32 %.extract242, i32 %.extract244, ptr addrspace(1) %878, i1 %829) #1, !dbg !43
  %.extract246 = extractelement <4 x i32> %1206, i64 0, !dbg !43
  %.extract248 = extractelement <4 x i32> %1206, i64 1, !dbg !43
  %.extract250 = extractelement <4 x i32> %1206, i64 2, !dbg !43
  %.extract252 = extractelement <4 x i32> %1206, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract246, i32 %.extract248, i32 %.extract250, i32 %.extract252, ptr addrspace(1) %880, i1 %830) #1, !dbg !43
  %.extract254 = extractelement <4 x i32> %1207, i64 0, !dbg !43
  %.extract256 = extractelement <4 x i32> %1207, i64 1, !dbg !43
  %.extract258 = extractelement <4 x i32> %1207, i64 2, !dbg !43
  %.extract260 = extractelement <4 x i32> %1207, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract254, i32 %.extract256, i32 %.extract258, i32 %.extract260, ptr addrspace(1) %882, i1 %831) #1, !dbg !43
  %.extract262 = extractelement <4 x i32> %1240, i64 0, !dbg !43
  %.extract264 = extractelement <4 x i32> %1240, i64 1, !dbg !43
  %.extract266 = extractelement <4 x i32> %1240, i64 2, !dbg !43
  %.extract268 = extractelement <4 x i32> %1240, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract262, i32 %.extract264, i32 %.extract266, i32 %.extract268, ptr addrspace(1) %884, i1 %832) #1, !dbg !43
  %.extract270 = extractelement <4 x i32> %1241, i64 0, !dbg !43
  %.extract272 = extractelement <4 x i32> %1241, i64 1, !dbg !43
  %.extract274 = extractelement <4 x i32> %1241, i64 2, !dbg !43
  %.extract276 = extractelement <4 x i32> %1241, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract270, i32 %.extract272, i32 %.extract274, i32 %.extract276, ptr addrspace(1) %886, i1 %833) #1, !dbg !43
  %.extract278 = extractelement <4 x i32> %1242, i64 0, !dbg !43
  %.extract280 = extractelement <4 x i32> %1242, i64 1, !dbg !43
  %.extract282 = extractelement <4 x i32> %1242, i64 2, !dbg !43
  %.extract284 = extractelement <4 x i32> %1242, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract278, i32 %.extract280, i32 %.extract282, i32 %.extract284, ptr addrspace(1) %888, i1 %834) #1, !dbg !43
  %.extract286 = extractelement <4 x i32> %1243, i64 0, !dbg !43
  %.extract288 = extractelement <4 x i32> %1243, i64 1, !dbg !43
  %.extract290 = extractelement <4 x i32> %1243, i64 2, !dbg !43
  %.extract292 = extractelement <4 x i32> %1243, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract286, i32 %.extract288, i32 %.extract290, i32 %.extract292, ptr addrspace(1) %890, i1 %834) #1, !dbg !43
  %.extract294 = extractelement <4 x i32> %1276, i64 0, !dbg !43
  %.extract296 = extractelement <4 x i32> %1276, i64 1, !dbg !43
  %.extract298 = extractelement <4 x i32> %1276, i64 2, !dbg !43
  %.extract300 = extractelement <4 x i32> %1276, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract294, i32 %.extract296, i32 %.extract298, i32 %.extract300, ptr addrspace(1) %892, i1 %834) #1, !dbg !43
  %.extract302 = extractelement <4 x i32> %1277, i64 0, !dbg !43
  %.extract304 = extractelement <4 x i32> %1277, i64 1, !dbg !43
  %.extract306 = extractelement <4 x i32> %1277, i64 2, !dbg !43
  %.extract308 = extractelement <4 x i32> %1277, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract302, i32 %.extract304, i32 %.extract306, i32 %.extract308, ptr addrspace(1) %894, i1 %834) #1, !dbg !43
  %.extract310 = extractelement <4 x i32> %1278, i64 0, !dbg !43
  %.extract312 = extractelement <4 x i32> %1278, i64 1, !dbg !43
  %.extract314 = extractelement <4 x i32> %1278, i64 2, !dbg !43
  %.extract316 = extractelement <4 x i32> %1278, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract310, i32 %.extract312, i32 %.extract314, i32 %.extract316, ptr addrspace(1) %896, i1 %834) #1, !dbg !43
  %.extract318 = extractelement <4 x i32> %1279, i64 0, !dbg !43
  %.extract320 = extractelement <4 x i32> %1279, i64 1, !dbg !43
  %.extract322 = extractelement <4 x i32> %1279, i64 2, !dbg !43
  %.extract324 = extractelement <4 x i32> %1279, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract318, i32 %.extract320, i32 %.extract322, i32 %.extract324, ptr addrspace(1) %898, i1 %834) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceflkkxxdln5zrf6snf2e32fedmwgbhvynskuc4mbiqdeozadvxe.py", directory: "/tmp/torchinductor_root/ef")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 56, column: 24, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 66, column: 42, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 25, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
