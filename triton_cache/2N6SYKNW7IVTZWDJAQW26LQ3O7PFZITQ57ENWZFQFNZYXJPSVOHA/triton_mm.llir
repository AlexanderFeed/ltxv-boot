; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 768, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 3, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 768, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl nsw i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 8, !dbg !19
  %18 = and i32 %15, 16, !dbg !19
  %19 = lshr exact i32 %18, 1, !dbg !19
  %20 = lshr i32 %15, 1, !dbg !19
  %21 = and i32 %20, 23, !dbg !19
  %22 = or disjoint i32 %21, %19, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = shl i32 %15, 3, !dbg !19
  %26 = and i32 %25, 8, !dbg !19
  %27 = or disjoint i32 %14, %22, !dbg !20
  %28 = shl nsw i32 %13, 5, !dbg !21
  %29 = or disjoint i32 %28, %22, !dbg !22
  %30 = srem i32 %27, 77, !dbg !23
  %31 = srem i32 %29, 3072, !dbg !24
  %32 = mul nsw i32 %30, 768, !dbg !25
  %33 = mul nsw i32 %31, 768, !dbg !26
  %invariant.op = or disjoint i32 %26, %32, !dbg !27
  %invariant.op40 = or disjoint i32 %26, %33, !dbg !27
  %34 = xor i32 %26, %17
  %35 = shl nuw nsw i32 %22, 4
  %36 = or disjoint i32 %35, %34
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %37
  %39 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %37
  %40 = shl nuw nsw i32 %16, 1
  %41 = and i32 %15, 7
  %42 = xor i32 %40, %19
  %43 = shl i32 %15, 4
  %44 = and i32 %43, 240
  %45 = or disjoint i32 %42, %44
  %46 = zext nneg i32 %45 to i64
  %47 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %46
  %48 = ptrtoint ptr addrspace(3) %47 to i64
  %49 = trunc i64 %48 to i32
  %50 = or disjoint i32 %41, 16
  %51 = or disjoint i32 %50, %17
  %52 = shl nuw nsw i32 %51, 4
  %53 = or disjoint i32 %52, %42
  %54 = zext nneg i32 %53 to i64
  %55 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %54
  %56 = ptrtoint ptr addrspace(3) %55 to i64
  %57 = trunc i64 %56 to i32
  %58 = xor i32 %40, %17
  %59 = or disjoint i32 %24, %41
  %60 = shl nuw nsw i32 %59, 4
  %61 = or disjoint i32 %60, %58
  %62 = zext nneg i32 %61 to i64
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %62
  %64 = ptrtoint ptr addrspace(3) %63 to i64
  %65 = trunc i64 %64 to i32
  %66 = or disjoint i32 %50, %24
  %67 = shl nuw nsw i32 %66, 4
  %68 = or disjoint i32 %67, %58
  %69 = zext nneg i32 %68 to i64
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %69
  %71 = ptrtoint ptr addrspace(3) %70 to i64
  %72 = trunc i64 %71 to i32
  %73 = sext i32 %invariant.op to i64, !dbg !27
  %74 = sext i32 %invariant.op40 to i64, !dbg !27
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !27
  %invariant.gep74 = getelementptr bfloat, ptr addrspace(1) %1, i64 %74, !dbg !27
  br label %75, !dbg !27

75:                                               ; preds = %4, %75
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %75 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %138, %75 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %139, %75 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %140, %75 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %141, %75 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %143, %75 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %144, %75 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %145, %75 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %146, %75 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %148, %75 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %149, %75 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %150, %75 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %151, %75 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %153, %75 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %154, %75 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %155, %75 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %156, %75 ]
  %92 = shl nuw nsw i64 %indvars.iv, 4, !dbg !28
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %92, !dbg !29
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %gep) #2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !30
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !30
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !30
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !30
  %100 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %101 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !30
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !30
  %103 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %104 = shufflevector <2 x bfloat> %95, <2 x bfloat> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %105 = shufflevector <8 x bfloat> %104, <8 x bfloat> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !30
  %106 = shufflevector <8 x bfloat> %105, <8 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !30
  store <8 x bfloat> %106, ptr addrspace(3) %38, align 16, !dbg !30
  %gep75 = getelementptr bfloat, ptr addrspace(1) %invariant.gep74, i64 %92, !dbg !31
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %gep75) #2, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !32
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !32
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !32
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !32
  %114 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %115 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !32
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !32
  %117 = shufflevector <2 x bfloat> %116, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = shufflevector <2 x bfloat> %109, <2 x bfloat> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %119 = shufflevector <8 x bfloat> %118, <8 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !32
  %120 = shufflevector <8 x bfloat> %119, <8 x bfloat> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !32
  store <8 x bfloat> %120, ptr addrspace(3) %39, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %49) #2, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %57) #2, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !30
  %131 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %65) #2, !dbg !32
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !32
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !32
  %134 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %72) #2, !dbg !32
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !32
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !32
  %137 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %76, float %77, float %78, float %79, i32 %122, i32 %123, i32 %124, i32 %125, i32 %132, i32 %133) #2, !dbg !33
  %138 = extractvalue { float, float, float, float } %137, 0, !dbg !33
  %139 = extractvalue { float, float, float, float } %137, 1, !dbg !33
  %140 = extractvalue { float, float, float, float } %137, 2, !dbg !33
  %141 = extractvalue { float, float, float, float } %137, 3, !dbg !33
  %142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %80, float %81, float %82, float %83, i32 %122, i32 %123, i32 %124, i32 %125, i32 %135, i32 %136) #2, !dbg !33
  %143 = extractvalue { float, float, float, float } %142, 0, !dbg !33
  %144 = extractvalue { float, float, float, float } %142, 1, !dbg !33
  %145 = extractvalue { float, float, float, float } %142, 2, !dbg !33
  %146 = extractvalue { float, float, float, float } %142, 3, !dbg !33
  %147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %84, float %85, float %86, float %87, i32 %127, i32 %128, i32 %129, i32 %130, i32 %132, i32 %133) #2, !dbg !33
  %148 = extractvalue { float, float, float, float } %147, 0, !dbg !33
  %149 = extractvalue { float, float, float, float } %147, 1, !dbg !33
  %150 = extractvalue { float, float, float, float } %147, 2, !dbg !33
  %151 = extractvalue { float, float, float, float } %147, 3, !dbg !33
  %152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %88, float %89, float %90, float %91, i32 %127, i32 %128, i32 %129, i32 %130, i32 %135, i32 %136) #2, !dbg !33
  %153 = extractvalue { float, float, float, float } %152, 0, !dbg !33
  %154 = extractvalue { float, float, float, float } %152, 1, !dbg !33
  %155 = extractvalue { float, float, float, float } %152, 2, !dbg !33
  %156 = extractvalue { float, float, float, float } %152, 3, !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !27
  %exitcond.not = icmp eq i64 %indvars.iv.next, 48, !dbg !27
  br i1 %exitcond.not, label %157, label %75, !dbg !27

157:                                              ; preds = %75
  %158 = and i32 %25, 24, !dbg !19
  %159 = or disjoint i32 %28, %158, !dbg !22
  %160 = and i32 %23, 15, !dbg !19
  %161 = or disjoint i32 %160, %14, !dbg !20
  %162 = or disjoint i32 %161, 16, !dbg !20
  %163 = icmp slt i32 %161, 77, !dbg !34
  %164 = icmp slt i32 %162, 77, !dbg !34
  %165 = icmp slt i32 %159, 3072, !dbg !35
  %166 = and i1 %163, %165, !dbg !36
  %167 = and i1 %164, %165, !dbg !36
  %168 = mul i32 %161, 3072, !dbg !37
  %169 = mul i32 %162, 3072, !dbg !37
  %170 = add i32 %168, %159, !dbg !38
  %171 = add i32 %169, %159, !dbg !38
  %172 = sext i32 %170 to i64, !dbg !39
  %173 = getelementptr bfloat, ptr addrspace(1) %2, i64 %172, !dbg !39
  %174 = sext i32 %171 to i64, !dbg !39
  %175 = getelementptr bfloat, ptr addrspace(1) %2, i64 %174, !dbg !39
  %176 = fptrunc float %138 to bfloat, !dbg !40
  %177 = fptrunc float %139 to bfloat, !dbg !40
  %178 = fptrunc float %140 to bfloat, !dbg !40
  %179 = fptrunc float %141 to bfloat, !dbg !40
  %180 = fptrunc float %143 to bfloat, !dbg !40
  %181 = fptrunc float %144 to bfloat, !dbg !40
  %182 = fptrunc float %145 to bfloat, !dbg !40
  %183 = fptrunc float %146 to bfloat, !dbg !40
  %184 = fptrunc float %148 to bfloat, !dbg !40
  %185 = fptrunc float %149 to bfloat, !dbg !40
  %186 = fptrunc float %150 to bfloat, !dbg !40
  %187 = fptrunc float %151 to bfloat, !dbg !40
  %188 = fptrunc float %153 to bfloat, !dbg !40
  %189 = fptrunc float %154 to bfloat, !dbg !40
  %190 = fptrunc float %155 to bfloat, !dbg !40
  %191 = fptrunc float %156 to bfloat, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %192 = shl i32 %15, 1, !dbg !40
  %193 = and i32 %192, 6, !dbg !40
  %194 = shl nuw nsw i32 %16, 3, !dbg !40
  %195 = or disjoint i32 %193, %194, !dbg !40
  %196 = shl nuw nsw i32 %17, 3, !dbg !40
  %197 = or disjoint i32 %195, %196, !dbg !40
  %198 = shl nuw nsw i32 %18, 3, !dbg !40
  %199 = or disjoint i32 %197, %198, !dbg !40
  %200 = or disjoint i32 %199, %24, !dbg !40
  %201 = and i32 %25, 312, !dbg !40
  %202 = or disjoint i32 %196, %201, !dbg !40
  %203 = or disjoint i32 %202, %198, !dbg !40
  %204 = lshr i32 %199, 2, !dbg !40
  %205 = and i32 %204, 536870904, !dbg !40
  %206 = add nuw nsw i32 %205, %200, !dbg !40
  %207 = zext nneg i32 %206 to i64, !dbg !40
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %207, !dbg !40
  %209 = bitcast bfloat %176 to i16, !dbg !40
  %210 = bitcast bfloat %177 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %208, i16 %209, i16 %210, i1 true) #2, !dbg !40
  %211 = xor i32 %200, 256, !dbg !40
  %212 = lshr i32 %211, 2, !dbg !40
  %213 = and i32 %212, 1073741816, !dbg !40
  %214 = add nuw nsw i32 %213, %211, !dbg !40
  %215 = zext nneg i32 %214 to i64, !dbg !40
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %215, !dbg !40
  %217 = bitcast bfloat %178 to i16, !dbg !40
  %218 = bitcast bfloat %179 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %216, i16 %217, i16 %218, i1 true) #2, !dbg !40
  %219 = xor i32 %200, 16, !dbg !40
  %220 = add nuw nsw i32 %205, %219, !dbg !40
  %221 = zext nneg i32 %220 to i64, !dbg !40
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %221, !dbg !40
  %223 = bitcast bfloat %180 to i16, !dbg !40
  %224 = bitcast bfloat %181 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %222, i16 %223, i16 %224, i1 true) #2, !dbg !40
  %225 = xor i32 %200, 272, !dbg !40
  %226 = lshr i32 %225, 2, !dbg !40
  %227 = and i32 %226, 1073741816, !dbg !40
  %228 = add nuw nsw i32 %227, %225, !dbg !40
  %229 = zext nneg i32 %228 to i64, !dbg !40
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %229, !dbg !40
  %231 = bitcast bfloat %182 to i16, !dbg !40
  %232 = bitcast bfloat %183 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %230, i16 %231, i16 %232, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %233 = lshr exact i32 %203, 2, !dbg !40
  %234 = and i32 %233, 120, !dbg !40
  %235 = add nuw nsw i32 %234, %203, !dbg !40
  %236 = zext nneg i32 %235 to i64, !dbg !40
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %236, !dbg !40
  %238 = load <4 x i32>, ptr addrspace(3) %237, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %239 = bitcast bfloat %184 to i16, !dbg !40
  %240 = bitcast bfloat %185 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %208, i16 %239, i16 %240, i1 true) #2, !dbg !40
  %241 = bitcast bfloat %186 to i16, !dbg !40
  %242 = bitcast bfloat %187 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %216, i16 %241, i16 %242, i1 true) #2, !dbg !40
  %243 = bitcast bfloat %188 to i16, !dbg !40
  %244 = bitcast bfloat %189 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %222, i16 %243, i16 %244, i1 true) #2, !dbg !40
  %245 = bitcast bfloat %190 to i16, !dbg !40
  %246 = bitcast bfloat %191 to i16, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %230, i16 %245, i16 %246, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %247 = load <4 x i32>, ptr addrspace(3) %237, align 16, !dbg !40
  %.extract = extractelement <4 x i32> %238, i64 0, !dbg !40
  %.extract27 = extractelement <4 x i32> %238, i64 1, !dbg !40
  %.extract29 = extractelement <4 x i32> %238, i64 2, !dbg !40
  %.extract31 = extractelement <4 x i32> %238, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract27, i32 %.extract29, i32 %.extract31, ptr addrspace(1) %173, i1 %166) #2, !dbg !40
  %.extract33 = extractelement <4 x i32> %247, i64 0, !dbg !40
  %.extract35 = extractelement <4 x i32> %247, i64 1, !dbg !40
  %.extract37 = extractelement <4 x i32> %247, i64 2, !dbg !40
  %.extract39 = extractelement <4 x i32> %247, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract35, i32 %.extract37, i32 %.extract39, ptr addrspace(1) %175, i1 %167) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crrvzvf24ziczenxvp2uxaypgujlnpptnfe32b4ahki5s2k65kmh.py", directory: "/tmp/torchinductor_root/rr")
!4 = !{ptr @triton_mm, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 64, column: 26, scope: !6)
!28 = !DILocation(line: 66, column: 50, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 78, column: 25, scope: !6)
!34 = !DILocation(line: 85, column: 20, scope: !6)
!35 = !DILocation(line: 85, column: 34, scope: !6)
!36 = !DILocation(line: 85, column: 26, scope: !6)
!37 = !DILocation(line: 88, column: 26, scope: !6)
!38 = !DILocation(line: 88, column: 21, scope: !6)
!39 = !DILocation(line: 89, column: 25, scope: !6)
!40 = !DILocation(line: 89, column: 67, scope: !6)
!41 = !DILocation(line: 89, column: 4, scope: !6)
