; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = or disjoint i32 %20, 1, !dbg !12
  %24 = icmp slt i32 %20, 4112, !dbg !13
  %25 = lshr i32 %21, 5, !dbg !14
  %26 = shl i32 %21, 3, !dbg !14
  %27 = and i32 %26, 2040, !dbg !14
  %28 = or disjoint i32 %27, 4, !dbg !14
  %29 = or disjoint i32 %27, 2048, !dbg !14
  %30 = or disjoint i32 %27, 2052, !dbg !14
  %31 = shl i32 %21, 4, !dbg !14
  %32 = and i32 %31, 4080, !dbg !14
  %33 = or disjoint i32 %32, 8, !dbg !14
  %34 = icmp samesign ult i32 %29, 3072, !dbg !15
  %35 = icmp samesign ult i32 %32, 3072, !dbg !15
  %36 = mul i32 %19, 6144, !dbg !16
  %37 = mul i32 %23, 3072, !dbg !16
  %38 = add i32 %32, %36, !dbg !17
  %39 = add i32 %33, %36, !dbg !17
  %40 = add i32 %37, %32, !dbg !17
  %41 = add i32 %33, %37, !dbg !17
  %42 = sext i32 %38 to i64, !dbg !18
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !18
  %44 = sext i32 %39 to i64, !dbg !18
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = sext i32 %40 to i64, !dbg !18
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !18
  %48 = sext i32 %41 to i64, !dbg !18
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = and i1 %24, %35, !dbg !19
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %50) #5, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !20
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !20
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !20
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !20
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !20
  %60 = extractelement <2 x bfloat> %53, i64 0, !dbg !20
  %61 = extractelement <2 x bfloat> %53, i64 1, !dbg !20
  %62 = extractelement <2 x bfloat> %55, i64 0, !dbg !20
  %63 = extractelement <2 x bfloat> %55, i64 1, !dbg !20
  %64 = extractelement <2 x bfloat> %57, i64 0, !dbg !20
  %65 = extractelement <2 x bfloat> %57, i64 1, !dbg !20
  %66 = extractelement <2 x bfloat> %59, i64 0, !dbg !20
  %67 = extractelement <2 x bfloat> %59, i64 1, !dbg !20
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %45, i1 %50) #5, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !20
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !20
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !20
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !20
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !20
  %77 = extractelement <2 x bfloat> %70, i64 0, !dbg !20
  %78 = extractelement <2 x bfloat> %70, i64 1, !dbg !20
  %79 = extractelement <2 x bfloat> %72, i64 0, !dbg !20
  %80 = extractelement <2 x bfloat> %72, i64 1, !dbg !20
  %81 = extractelement <2 x bfloat> %74, i64 0, !dbg !20
  %82 = extractelement <2 x bfloat> %74, i64 1, !dbg !20
  %83 = extractelement <2 x bfloat> %76, i64 0, !dbg !20
  %84 = extractelement <2 x bfloat> %76, i64 1, !dbg !20
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %50) #5, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !20
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !20
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !20
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !20
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !20
  %94 = extractelement <2 x bfloat> %87, i64 0, !dbg !20
  %95 = extractelement <2 x bfloat> %87, i64 1, !dbg !20
  %96 = extractelement <2 x bfloat> %89, i64 0, !dbg !20
  %97 = extractelement <2 x bfloat> %89, i64 1, !dbg !20
  %98 = extractelement <2 x bfloat> %91, i64 0, !dbg !20
  %99 = extractelement <2 x bfloat> %91, i64 1, !dbg !20
  %100 = extractelement <2 x bfloat> %93, i64 0, !dbg !20
  %101 = extractelement <2 x bfloat> %93, i64 1, !dbg !20
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %50) #5, !dbg !20
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !20
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !20
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !20
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !20
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !20
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !20
  %109 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !20
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !20
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !20
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !20
  %113 = extractelement <2 x bfloat> %106, i64 0, !dbg !20
  %114 = extractelement <2 x bfloat> %106, i64 1, !dbg !20
  %115 = extractelement <2 x bfloat> %108, i64 0, !dbg !20
  %116 = extractelement <2 x bfloat> %108, i64 1, !dbg !20
  %117 = extractelement <2 x bfloat> %110, i64 0, !dbg !20
  %118 = extractelement <2 x bfloat> %110, i64 1, !dbg !20
  %119 = fpext bfloat %60 to float, !dbg !21
  %120 = fpext bfloat %61 to float, !dbg !21
  %121 = fpext bfloat %62 to float, !dbg !21
  %122 = fpext bfloat %63 to float, !dbg !21
  %123 = fpext bfloat %64 to float, !dbg !21
  %124 = fpext bfloat %65 to float, !dbg !21
  %125 = fpext bfloat %66 to float, !dbg !21
  %126 = fpext bfloat %67 to float, !dbg !21
  %127 = fpext bfloat %77 to float, !dbg !21
  %128 = fpext bfloat %78 to float, !dbg !21
  %129 = fpext bfloat %79 to float, !dbg !21
  %130 = fpext bfloat %80 to float, !dbg !21
  %131 = fpext bfloat %81 to float, !dbg !21
  %132 = fpext bfloat %82 to float, !dbg !21
  %133 = fpext bfloat %83 to float, !dbg !21
  %134 = fpext bfloat %84 to float, !dbg !21
  %135 = fpext bfloat %94 to float, !dbg !21
  %136 = fpext bfloat %95 to float, !dbg !21
  %137 = fpext bfloat %96 to float, !dbg !21
  %138 = fpext bfloat %97 to float, !dbg !21
  %139 = fpext bfloat %98 to float, !dbg !21
  %140 = fpext bfloat %99 to float, !dbg !21
  %141 = fpext bfloat %100 to float, !dbg !21
  %142 = fpext bfloat %101 to float, !dbg !21
  %143 = fpext bfloat %111 to float, !dbg !21
  %144 = fpext bfloat %112 to float, !dbg !21
  %145 = fpext bfloat %113 to float, !dbg !21
  %146 = fpext bfloat %114 to float, !dbg !21
  %147 = fpext bfloat %115 to float, !dbg !21
  %148 = fpext bfloat %116 to float, !dbg !21
  %149 = fpext bfloat %117 to float, !dbg !21
  %150 = fpext bfloat %118 to float, !dbg !21
  %151 = select i1 %50, float %119, float 0.000000e+00, !dbg !22
  %152 = select i1 %50, float %120, float 0.000000e+00, !dbg !22
  %153 = select i1 %50, float %121, float 0.000000e+00, !dbg !22
  %154 = select i1 %50, float %122, float 0.000000e+00, !dbg !22
  %155 = select i1 %50, float %123, float 0.000000e+00, !dbg !22
  %156 = select i1 %50, float %124, float 0.000000e+00, !dbg !22
  %157 = select i1 %50, float %125, float 0.000000e+00, !dbg !22
  %158 = select i1 %50, float %126, float 0.000000e+00, !dbg !22
  %159 = select i1 %50, float %127, float 0.000000e+00, !dbg !22
  %160 = select i1 %50, float %128, float 0.000000e+00, !dbg !22
  %161 = select i1 %50, float %129, float 0.000000e+00, !dbg !22
  %162 = select i1 %50, float %130, float 0.000000e+00, !dbg !22
  %163 = select i1 %50, float %131, float 0.000000e+00, !dbg !22
  %164 = select i1 %50, float %132, float 0.000000e+00, !dbg !22
  %165 = select i1 %50, float %133, float 0.000000e+00, !dbg !22
  %166 = select i1 %50, float %134, float 0.000000e+00, !dbg !22
  %167 = select i1 %50, float %135, float 0.000000e+00, !dbg !22
  %168 = select i1 %50, float %136, float 0.000000e+00, !dbg !22
  %169 = select i1 %50, float %137, float 0.000000e+00, !dbg !22
  %170 = select i1 %50, float %138, float 0.000000e+00, !dbg !22
  %171 = select i1 %50, float %139, float 0.000000e+00, !dbg !22
  %172 = select i1 %50, float %140, float 0.000000e+00, !dbg !22
  %173 = select i1 %50, float %141, float 0.000000e+00, !dbg !22
  %174 = select i1 %50, float %142, float 0.000000e+00, !dbg !22
  %175 = select i1 %50, float %143, float 0.000000e+00, !dbg !22
  %176 = select i1 %50, float %144, float 0.000000e+00, !dbg !22
  %177 = select i1 %50, float %145, float 0.000000e+00, !dbg !22
  %178 = select i1 %50, float %146, float 0.000000e+00, !dbg !22
  %179 = select i1 %50, float %147, float 0.000000e+00, !dbg !22
  %180 = select i1 %50, float %148, float 0.000000e+00, !dbg !22
  %181 = select i1 %50, float %149, float 0.000000e+00, !dbg !22
  %182 = select i1 %50, float %150, float 0.000000e+00, !dbg !22
  %183 = select i1 %50, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %184 = fsub float %152, %151, !dbg !24
  %185 = select i1 %50, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !30
  %187 = tail call float @llvm.nvvm.div.full(float %183, float %185), !dbg !31
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !32
  %189 = fmul float %188, %184, !dbg !33
  %190 = fadd float %151, %189, !dbg !34
  %191 = fmul float %184, %184, !dbg !35
  %192 = fmul float %183, %191, !dbg !36
  %193 = fmul float %188, %192, !dbg !37
  %194 = fadd float %193, 0.000000e+00, !dbg !38
  %195 = fsub float %153, %190, !dbg !24
  %196 = select i1 %50, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !30
  %198 = tail call float @llvm.nvvm.div.full(float %183, float %196), !dbg !31
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !32
  %200 = fmul float %199, %195, !dbg !33
  %201 = fadd float %190, %200, !dbg !34
  %202 = fmul float %195, %195, !dbg !35
  %203 = fmul float %185, %202, !dbg !36
  %204 = fmul float %199, %203, !dbg !37
  %205 = fadd float %194, %204, !dbg !38
  %206 = fsub float %154, %201, !dbg !24
  %207 = select i1 %50, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !30
  %209 = tail call float @llvm.nvvm.div.full(float %183, float %207), !dbg !31
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !32
  %211 = fmul float %210, %206, !dbg !33
  %212 = fadd float %201, %211, !dbg !34
  %213 = fmul float %206, %206, !dbg !35
  %214 = fmul float %196, %213, !dbg !36
  %215 = fmul float %210, %214, !dbg !37
  %216 = fadd float %205, %215, !dbg !38
  %217 = fsub float %155, %212, !dbg !24
  %218 = select i1 %50, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %219 = fcmp oeq float %218, 0.000000e+00, !dbg !30
  %220 = tail call float @llvm.nvvm.div.full(float %183, float %218), !dbg !31
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !32
  %222 = fmul float %221, %217, !dbg !33
  %223 = fadd float %212, %222, !dbg !34
  %224 = fmul float %217, %217, !dbg !35
  %225 = fmul float %207, %224, !dbg !36
  %226 = fmul float %221, %225, !dbg !37
  %227 = fadd float %216, %226, !dbg !38
  %228 = fsub float %156, %223, !dbg !24
  %229 = select i1 %50, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !30
  %231 = tail call float @llvm.nvvm.div.full(float %183, float %229), !dbg !31
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !32
  %233 = fmul float %232, %228, !dbg !33
  %234 = fadd float %223, %233, !dbg !34
  %235 = fmul float %228, %228, !dbg !35
  %236 = fmul float %218, %235, !dbg !36
  %237 = fmul float %232, %236, !dbg !37
  %238 = fadd float %227, %237, !dbg !38
  %239 = fsub float %157, %234, !dbg !24
  %240 = select i1 %50, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !30
  %242 = tail call float @llvm.nvvm.div.full(float %183, float %240), !dbg !31
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !32
  %244 = fmul float %243, %239, !dbg !33
  %245 = fadd float %234, %244, !dbg !34
  %246 = fmul float %239, %239, !dbg !35
  %247 = fmul float %229, %246, !dbg !36
  %248 = fmul float %243, %247, !dbg !37
  %249 = fadd float %238, %248, !dbg !38
  %250 = fsub float %158, %245, !dbg !24
  %251 = select i1 %50, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !30
  %253 = tail call float @llvm.nvvm.div.full(float %183, float %251), !dbg !31
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !32
  %255 = fmul float %254, %250, !dbg !33
  %256 = fadd float %245, %255, !dbg !34
  %257 = fmul float %250, %250, !dbg !35
  %258 = fmul float %240, %257, !dbg !36
  %259 = fmul float %254, %258, !dbg !37
  %260 = fadd float %249, %259, !dbg !38
  %261 = fsub float %159, %256, !dbg !24
  %262 = select i1 %50, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !30
  %264 = tail call float @llvm.nvvm.div.full(float %183, float %262), !dbg !31
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !32
  %266 = fmul float %265, %261, !dbg !33
  %267 = fadd float %256, %266, !dbg !34
  %268 = fadd float %260, 0.000000e+00, !dbg !39
  %269 = fmul float %261, %261, !dbg !35
  %270 = fmul float %251, %269, !dbg !36
  %271 = fmul float %265, %270, !dbg !37
  %272 = fadd float %268, %271, !dbg !38
  %273 = fsub float %160, %267, !dbg !24
  %274 = select i1 %50, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !30
  %276 = tail call float @llvm.nvvm.div.full(float %183, float %274), !dbg !31
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !32
  %278 = fmul float %277, %273, !dbg !33
  %279 = fadd float %267, %278, !dbg !34
  %280 = fmul float %273, %273, !dbg !35
  %281 = fmul float %262, %280, !dbg !36
  %282 = fmul float %277, %281, !dbg !37
  %283 = fadd float %272, %282, !dbg !38
  %284 = fsub float %161, %279, !dbg !24
  %285 = select i1 %50, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !30
  %287 = tail call float @llvm.nvvm.div.full(float %183, float %285), !dbg !31
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !32
  %289 = fmul float %288, %284, !dbg !33
  %290 = fadd float %279, %289, !dbg !34
  %291 = fmul float %284, %284, !dbg !35
  %292 = fmul float %274, %291, !dbg !36
  %293 = fmul float %288, %292, !dbg !37
  %294 = fadd float %283, %293, !dbg !38
  %295 = fsub float %162, %290, !dbg !24
  %296 = select i1 %50, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !30
  %298 = tail call float @llvm.nvvm.div.full(float %183, float %296), !dbg !31
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !32
  %300 = fmul float %299, %295, !dbg !33
  %301 = fadd float %290, %300, !dbg !34
  %302 = fmul float %295, %295, !dbg !35
  %303 = fmul float %285, %302, !dbg !36
  %304 = fmul float %299, %303, !dbg !37
  %305 = fadd float %294, %304, !dbg !38
  %306 = fsub float %163, %301, !dbg !24
  %307 = select i1 %50, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !30
  %309 = tail call float @llvm.nvvm.div.full(float %183, float %307), !dbg !31
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !32
  %311 = fmul float %310, %306, !dbg !33
  %312 = fadd float %301, %311, !dbg !34
  %313 = fmul float %306, %306, !dbg !35
  %314 = fmul float %296, %313, !dbg !36
  %315 = fmul float %310, %314, !dbg !37
  %316 = fadd float %305, %315, !dbg !38
  %317 = fsub float %164, %312, !dbg !24
  %318 = select i1 %50, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !30
  %320 = tail call float @llvm.nvvm.div.full(float %183, float %318), !dbg !31
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !32
  %322 = fmul float %321, %317, !dbg !33
  %323 = fadd float %312, %322, !dbg !34
  %324 = fmul float %317, %317, !dbg !35
  %325 = fmul float %307, %324, !dbg !36
  %326 = fmul float %321, %325, !dbg !37
  %327 = fadd float %316, %326, !dbg !38
  %328 = fsub float %165, %323, !dbg !24
  %329 = select i1 %50, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !30
  %331 = tail call float @llvm.nvvm.div.full(float %183, float %329), !dbg !31
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !32
  %333 = fmul float %332, %328, !dbg !33
  %334 = fadd float %323, %333, !dbg !34
  %335 = fadd float %327, 0.000000e+00, !dbg !39
  %336 = fmul float %328, %328, !dbg !35
  %337 = fmul float %318, %336, !dbg !36
  %338 = fmul float %332, %337, !dbg !37
  %339 = fadd float %335, %338, !dbg !38
  %340 = fsub float %166, %334, !dbg !24
  %341 = select i1 %50, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !30
  %343 = tail call float @llvm.nvvm.div.full(float %183, float %341), !dbg !31
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !32
  %345 = fmul float %344, %340, !dbg !33
  %346 = fadd float %334, %345, !dbg !34
  %347 = fmul float %340, %340, !dbg !35
  %348 = fmul float %329, %347, !dbg !36
  %349 = fmul float %344, %348, !dbg !37
  %350 = fadd float %339, %349, !dbg !38
  %351 = fsub float %168, %167, !dbg !24
  %352 = fmul float %188, %351, !dbg !33
  %353 = fadd float %167, %352, !dbg !34
  %354 = fmul float %351, %351, !dbg !35
  %355 = fmul float %183, %354, !dbg !36
  %356 = fmul float %188, %355, !dbg !37
  %357 = fadd float %356, 0.000000e+00, !dbg !38
  %358 = fsub float %169, %353, !dbg !24
  %359 = fmul float %199, %358, !dbg !33
  %360 = fadd float %353, %359, !dbg !34
  %361 = fmul float %358, %358, !dbg !35
  %362 = fmul float %185, %361, !dbg !36
  %363 = fmul float %199, %362, !dbg !37
  %364 = fadd float %357, %363, !dbg !38
  %365 = fsub float %170, %360, !dbg !24
  %366 = fmul float %210, %365, !dbg !33
  %367 = fadd float %360, %366, !dbg !34
  %368 = fmul float %365, %365, !dbg !35
  %369 = fmul float %196, %368, !dbg !36
  %370 = fmul float %210, %369, !dbg !37
  %371 = fadd float %364, %370, !dbg !38
  %372 = fsub float %171, %367, !dbg !24
  %373 = fmul float %221, %372, !dbg !33
  %374 = fadd float %367, %373, !dbg !34
  %375 = fmul float %372, %372, !dbg !35
  %376 = fmul float %207, %375, !dbg !36
  %377 = fmul float %221, %376, !dbg !37
  %378 = fadd float %371, %377, !dbg !38
  %379 = fsub float %172, %374, !dbg !24
  %380 = fmul float %232, %379, !dbg !33
  %381 = fadd float %374, %380, !dbg !34
  %382 = fmul float %379, %379, !dbg !35
  %383 = fmul float %218, %382, !dbg !36
  %384 = fmul float %232, %383, !dbg !37
  %385 = fadd float %378, %384, !dbg !38
  %386 = fsub float %173, %381, !dbg !24
  %387 = fmul float %243, %386, !dbg !33
  %388 = fadd float %381, %387, !dbg !34
  %389 = fmul float %386, %386, !dbg !35
  %390 = fmul float %229, %389, !dbg !36
  %391 = fmul float %243, %390, !dbg !37
  %392 = fadd float %385, %391, !dbg !38
  %393 = fsub float %174, %388, !dbg !24
  %394 = fmul float %254, %393, !dbg !33
  %395 = fadd float %388, %394, !dbg !34
  %396 = fmul float %393, %393, !dbg !35
  %397 = fmul float %240, %396, !dbg !36
  %398 = fmul float %254, %397, !dbg !37
  %399 = fadd float %392, %398, !dbg !38
  %400 = fsub float %175, %395, !dbg !24
  %401 = fmul float %265, %400, !dbg !33
  %402 = fadd float %395, %401, !dbg !34
  %403 = fadd float %399, 0.000000e+00, !dbg !39
  %404 = fmul float %400, %400, !dbg !35
  %405 = fmul float %251, %404, !dbg !36
  %406 = fmul float %265, %405, !dbg !37
  %407 = fadd float %403, %406, !dbg !38
  %408 = fsub float %176, %402, !dbg !24
  %409 = fmul float %277, %408, !dbg !33
  %410 = fadd float %402, %409, !dbg !34
  %411 = fmul float %408, %408, !dbg !35
  %412 = fmul float %262, %411, !dbg !36
  %413 = fmul float %277, %412, !dbg !37
  %414 = fadd float %407, %413, !dbg !38
  %415 = fsub float %177, %410, !dbg !24
  %416 = fmul float %288, %415, !dbg !33
  %417 = fadd float %410, %416, !dbg !34
  %418 = fmul float %415, %415, !dbg !35
  %419 = fmul float %274, %418, !dbg !36
  %420 = fmul float %288, %419, !dbg !37
  %421 = fadd float %414, %420, !dbg !38
  %422 = fsub float %178, %417, !dbg !24
  %423 = fmul float %299, %422, !dbg !33
  %424 = fadd float %417, %423, !dbg !34
  %425 = fmul float %422, %422, !dbg !35
  %426 = fmul float %285, %425, !dbg !36
  %427 = fmul float %299, %426, !dbg !37
  %428 = fadd float %421, %427, !dbg !38
  %429 = fsub float %179, %424, !dbg !24
  %430 = fmul float %310, %429, !dbg !33
  %431 = fadd float %424, %430, !dbg !34
  %432 = fmul float %429, %429, !dbg !35
  %433 = fmul float %296, %432, !dbg !36
  %434 = fmul float %310, %433, !dbg !37
  %435 = fadd float %428, %434, !dbg !38
  %436 = fsub float %180, %431, !dbg !24
  %437 = fmul float %321, %436, !dbg !33
  %438 = fadd float %431, %437, !dbg !34
  %439 = fmul float %436, %436, !dbg !35
  %440 = fmul float %307, %439, !dbg !36
  %441 = fmul float %321, %440, !dbg !37
  %442 = fadd float %435, %441, !dbg !38
  %443 = fsub float %181, %438, !dbg !24
  %444 = fmul float %332, %443, !dbg !33
  %445 = fadd float %438, %444, !dbg !34
  %446 = fadd float %442, 0.000000e+00, !dbg !39
  %447 = fmul float %443, %443, !dbg !35
  %448 = fmul float %318, %447, !dbg !36
  %449 = fmul float %332, %448, !dbg !37
  %450 = fadd float %446, %449, !dbg !38
  %451 = fsub float %182, %445, !dbg !24
  %452 = fmul float %344, %451, !dbg !33
  %453 = fadd float %445, %452, !dbg !34
  %454 = fmul float %451, %451, !dbg !35
  %455 = fmul float %329, %454, !dbg !36
  %456 = fmul float %344, %455, !dbg !37
  %457 = fadd float %450, %456, !dbg !38
  %458 = bitcast float %346 to i32, !dbg !40
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 16, i32 31), !dbg !40
  %460 = bitcast i32 %459 to float, !dbg !40
  %461 = bitcast float %350 to i32, !dbg !40
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !40
  %463 = bitcast i32 %462 to float, !dbg !40
  %464 = bitcast float %341 to i32, !dbg !40
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 16, i32 31), !dbg !40
  %466 = bitcast i32 %465 to float, !dbg !40
  %467 = fsub float %460, %346, !dbg !24
  %468 = fadd float %341, %466, !dbg !29
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !30
  %470 = tail call float @llvm.nvvm.div.full(float %466, float %468), !dbg !31
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !32
  %472 = fmul float %471, %467, !dbg !33
  %473 = fadd float %346, %472, !dbg !34
  %474 = fadd float %350, %463, !dbg !39
  %475 = fmul float %467, %467, !dbg !35
  %476 = fmul float %341, %475, !dbg !36
  %477 = fmul float %471, %476, !dbg !37
  %478 = fadd float %474, %477, !dbg !38
  %479 = bitcast float %473 to i32, !dbg !40
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !40
  %481 = bitcast i32 %480 to float, !dbg !40
  %482 = bitcast float %478 to i32, !dbg !40
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 8, i32 31), !dbg !40
  %484 = bitcast i32 %483 to float, !dbg !40
  %485 = bitcast float %468 to i32, !dbg !40
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 8, i32 31), !dbg !40
  %487 = bitcast i32 %486 to float, !dbg !40
  %488 = fsub float %481, %473, !dbg !24
  %489 = fadd float %468, %487, !dbg !29
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !30
  %491 = tail call float @llvm.nvvm.div.full(float %487, float %489), !dbg !31
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !32
  %493 = fmul float %492, %488, !dbg !33
  %494 = fadd float %473, %493, !dbg !34
  %495 = fadd float %478, %484, !dbg !39
  %496 = fmul float %488, %488, !dbg !35
  %497 = fmul float %468, %496, !dbg !36
  %498 = fmul float %492, %497, !dbg !37
  %499 = fadd float %495, %498, !dbg !38
  %500 = bitcast float %494 to i32, !dbg !40
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 4, i32 31), !dbg !40
  %502 = bitcast i32 %501 to float, !dbg !40
  %503 = bitcast float %499 to i32, !dbg !40
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 4, i32 31), !dbg !40
  %505 = bitcast i32 %504 to float, !dbg !40
  %506 = bitcast float %489 to i32, !dbg !40
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 4, i32 31), !dbg !40
  %508 = bitcast i32 %507 to float, !dbg !40
  %509 = fsub float %502, %494, !dbg !24
  %510 = fadd float %489, %508, !dbg !29
  %511 = fcmp oeq float %510, 0.000000e+00, !dbg !30
  %512 = tail call float @llvm.nvvm.div.full(float %508, float %510), !dbg !31
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !32
  %514 = fmul float %513, %509, !dbg !33
  %515 = fadd float %494, %514, !dbg !34
  %516 = fadd float %499, %505, !dbg !39
  %517 = fmul float %509, %509, !dbg !35
  %518 = fmul float %489, %517, !dbg !36
  %519 = fmul float %513, %518, !dbg !37
  %520 = fadd float %516, %519, !dbg !38
  %521 = bitcast float %515 to i32, !dbg !40
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !40
  %523 = bitcast i32 %522 to float, !dbg !40
  %524 = bitcast float %520 to i32, !dbg !40
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 2, i32 31), !dbg !40
  %526 = bitcast i32 %525 to float, !dbg !40
  %527 = bitcast float %510 to i32, !dbg !40
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 2, i32 31), !dbg !40
  %529 = bitcast i32 %528 to float, !dbg !40
  %530 = fsub float %523, %515, !dbg !24
  %531 = fadd float %510, %529, !dbg !29
  %532 = fcmp oeq float %531, 0.000000e+00, !dbg !30
  %533 = tail call float @llvm.nvvm.div.full(float %529, float %531), !dbg !31
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !32
  %535 = fmul float %534, %530, !dbg !33
  %536 = fadd float %515, %535, !dbg !34
  %537 = fadd float %520, %526, !dbg !39
  %538 = fmul float %530, %530, !dbg !35
  %539 = fmul float %510, %538, !dbg !36
  %540 = fmul float %534, %539, !dbg !37
  %541 = fadd float %537, %540, !dbg !38
  %542 = bitcast float %536 to i32, !dbg !40
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !40
  %544 = bitcast i32 %543 to float, !dbg !40
  %545 = bitcast float %541 to i32, !dbg !40
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !40
  %547 = bitcast i32 %546 to float, !dbg !40
  %548 = bitcast float %531 to i32, !dbg !40
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 1, i32 31), !dbg !40
  %550 = bitcast i32 %549 to float, !dbg !40
  %551 = fsub float %544, %536, !dbg !24
  %552 = fadd float %531, %550, !dbg !29
  %553 = fcmp oeq float %552, 0.000000e+00, !dbg !30
  %554 = tail call float @llvm.nvvm.div.full(float %550, float %552), !dbg !31
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !32
  %556 = fmul float %555, %551, !dbg !33
  %557 = fadd float %536, %556, !dbg !34
  %558 = fadd float %541, %547, !dbg !39
  %559 = fmul float %551, %551, !dbg !35
  %560 = fmul float %531, %559, !dbg !36
  %561 = fmul float %555, %560, !dbg !37
  %562 = fadd float %558, %561, !dbg !38
  %563 = bitcast float %453 to i32, !dbg !40
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 16, i32 31), !dbg !40
  %565 = bitcast i32 %564 to float, !dbg !40
  %566 = bitcast float %457 to i32, !dbg !40
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 16, i32 31), !dbg !40
  %568 = bitcast i32 %567 to float, !dbg !40
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 16, i32 31), !dbg !40
  %570 = bitcast i32 %569 to float, !dbg !40
  %571 = fsub float %565, %453, !dbg !24
  %572 = fadd float %341, %570, !dbg !29
  %573 = fcmp oeq float %572, 0.000000e+00, !dbg !30
  %574 = tail call float @llvm.nvvm.div.full(float %570, float %572), !dbg !31
  %575 = select i1 %573, float 0.000000e+00, float %574, !dbg !32
  %576 = fmul float %575, %571, !dbg !33
  %577 = fadd float %453, %576, !dbg !34
  %578 = fadd float %457, %568, !dbg !39
  %579 = fmul float %571, %571, !dbg !35
  %580 = fmul float %341, %579, !dbg !36
  %581 = fmul float %575, %580, !dbg !37
  %582 = fadd float %578, %581, !dbg !38
  %583 = bitcast float %577 to i32, !dbg !40
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 8, i32 31), !dbg !40
  %585 = bitcast i32 %584 to float, !dbg !40
  %586 = bitcast float %582 to i32, !dbg !40
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 8, i32 31), !dbg !40
  %588 = bitcast i32 %587 to float, !dbg !40
  %589 = bitcast float %572 to i32, !dbg !40
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 8, i32 31), !dbg !40
  %591 = bitcast i32 %590 to float, !dbg !40
  %592 = fsub float %585, %577, !dbg !24
  %593 = fadd float %572, %591, !dbg !29
  %594 = fcmp oeq float %593, 0.000000e+00, !dbg !30
  %595 = tail call float @llvm.nvvm.div.full(float %591, float %593), !dbg !31
  %596 = select i1 %594, float 0.000000e+00, float %595, !dbg !32
  %597 = fmul float %596, %592, !dbg !33
  %598 = fadd float %577, %597, !dbg !34
  %599 = fadd float %582, %588, !dbg !39
  %600 = fmul float %592, %592, !dbg !35
  %601 = fmul float %572, %600, !dbg !36
  %602 = fmul float %596, %601, !dbg !37
  %603 = fadd float %599, %602, !dbg !38
  %604 = bitcast float %598 to i32, !dbg !40
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 4, i32 31), !dbg !40
  %606 = bitcast i32 %605 to float, !dbg !40
  %607 = bitcast float %603 to i32, !dbg !40
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 4, i32 31), !dbg !40
  %609 = bitcast i32 %608 to float, !dbg !40
  %610 = bitcast float %593 to i32, !dbg !40
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !40
  %612 = bitcast i32 %611 to float, !dbg !40
  %613 = fsub float %606, %598, !dbg !24
  %614 = fadd float %593, %612, !dbg !29
  %615 = fcmp oeq float %614, 0.000000e+00, !dbg !30
  %616 = tail call float @llvm.nvvm.div.full(float %612, float %614), !dbg !31
  %617 = select i1 %615, float 0.000000e+00, float %616, !dbg !32
  %618 = fmul float %617, %613, !dbg !33
  %619 = fadd float %598, %618, !dbg !34
  %620 = fadd float %603, %609, !dbg !39
  %621 = fmul float %613, %613, !dbg !35
  %622 = fmul float %593, %621, !dbg !36
  %623 = fmul float %617, %622, !dbg !37
  %624 = fadd float %620, %623, !dbg !38
  %625 = bitcast float %619 to i32, !dbg !40
  %626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %625, i32 2, i32 31), !dbg !40
  %627 = bitcast i32 %626 to float, !dbg !40
  %628 = bitcast float %624 to i32, !dbg !40
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !40
  %630 = bitcast i32 %629 to float, !dbg !40
  %631 = bitcast float %614 to i32, !dbg !40
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !40
  %633 = bitcast i32 %632 to float, !dbg !40
  %634 = fsub float %627, %619, !dbg !24
  %635 = fadd float %614, %633, !dbg !29
  %636 = fcmp oeq float %635, 0.000000e+00, !dbg !30
  %637 = tail call float @llvm.nvvm.div.full(float %633, float %635), !dbg !31
  %638 = select i1 %636, float 0.000000e+00, float %637, !dbg !32
  %639 = fmul float %638, %634, !dbg !33
  %640 = fadd float %619, %639, !dbg !34
  %641 = fadd float %624, %630, !dbg !39
  %642 = fmul float %634, %634, !dbg !35
  %643 = fmul float %614, %642, !dbg !36
  %644 = fmul float %638, %643, !dbg !37
  %645 = fadd float %641, %644, !dbg !38
  %646 = bitcast float %640 to i32, !dbg !40
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 1, i32 31), !dbg !40
  %648 = bitcast i32 %647 to float, !dbg !40
  %649 = bitcast float %645 to i32, !dbg !40
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 1, i32 31), !dbg !40
  %651 = bitcast i32 %650 to float, !dbg !40
  %652 = bitcast float %635 to i32, !dbg !40
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 1, i32 31), !dbg !40
  %654 = bitcast i32 %653 to float, !dbg !40
  %655 = fsub float %648, %640, !dbg !24
  %656 = fadd float %635, %654, !dbg !29
  %657 = fcmp oeq float %656, 0.000000e+00, !dbg !30
  %658 = tail call float @llvm.nvvm.div.full(float %654, float %656), !dbg !31
  %659 = select i1 %657, float 0.000000e+00, float %658, !dbg !32
  %660 = fmul float %659, %655, !dbg !33
  %661 = fadd float %640, %660, !dbg !34
  %662 = fadd float %645, %651, !dbg !39
  %663 = fmul float %655, %655, !dbg !35
  %664 = fmul float %635, %663, !dbg !36
  %665 = fmul float %659, %664, !dbg !37
  %666 = fadd float %662, %665, !dbg !38
  %667 = and i32 %25, 7, !dbg !40
  %668 = icmp eq i32 %22, 0, !dbg !40
  %669 = getelementptr float, ptr addrspace(3) @global_smem, i32 %667, !dbg !40
  %670 = bitcast float %557 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %670, i1 %668) #5, !dbg !40
  %671 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %667, !dbg !40
  %672 = bitcast float %562 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 %668) #5, !dbg !40
  %673 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %667, !dbg !40
  %674 = bitcast float %552 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %674, i1 %668) #5, !dbg !40
  %675 = or disjoint i32 %667, 8, !dbg !40
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !40
  %677 = bitcast float %661 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %676, <1 x i32> %677, i1 %668) #5, !dbg !40
  %678 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %675, !dbg !40
  %679 = bitcast float %666 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %678, <1 x i32> %679, i1 %668) #5, !dbg !40
  %680 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %675, !dbg !40
  %681 = bitcast float %656 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %681, i1 %668) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %682 = icmp slt i32 %21, 16, !dbg !40
  %683 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %684 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %683, i1 %682) #5, !dbg !40
  %685 = bitcast i32 %684 to float, !dbg !40
  %686 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !40
  %687 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %686, i1 %682) #5, !dbg !40
  %688 = bitcast i32 %687 to float, !dbg !40
  %689 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !40
  %690 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %689, i1 %682) #5, !dbg !40
  %691 = bitcast i32 %690 to float, !dbg !40
  %692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 4, i32 31), !dbg !40
  %693 = bitcast i32 %692 to float, !dbg !40
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 4, i32 31), !dbg !40
  %695 = bitcast i32 %694 to float, !dbg !40
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 4, i32 31), !dbg !40
  %697 = bitcast i32 %696 to float, !dbg !40
  %698 = fsub float %693, %685, !dbg !24
  %699 = fadd float %691, %697, !dbg !29
  %700 = fcmp oeq float %699, 0.000000e+00, !dbg !30
  %701 = tail call float @llvm.nvvm.div.full(float %697, float %699), !dbg !31
  %702 = select i1 %700, float 0.000000e+00, float %701, !dbg !32
  %703 = fmul float %698, %702, !dbg !33
  %704 = fadd float %703, %685, !dbg !34
  %705 = fadd float %688, %695, !dbg !39
  %706 = fmul float %698, %698, !dbg !35
  %707 = fmul float %706, %691, !dbg !36
  %708 = fmul float %707, %702, !dbg !37
  %709 = fadd float %705, %708, !dbg !38
  %710 = bitcast float %704 to i32, !dbg !40
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 2, i32 31), !dbg !40
  %712 = bitcast i32 %711 to float, !dbg !40
  %713 = bitcast float %709 to i32, !dbg !40
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 2, i32 31), !dbg !40
  %715 = bitcast i32 %714 to float, !dbg !40
  %716 = bitcast float %699 to i32, !dbg !40
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 2, i32 31), !dbg !40
  %718 = bitcast i32 %717 to float, !dbg !40
  %719 = fsub float %712, %704, !dbg !24
  %720 = fadd float %699, %718, !dbg !29
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !30
  %722 = tail call float @llvm.nvvm.div.full(float %718, float %720), !dbg !31
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !32
  %724 = fmul float %719, %723, !dbg !33
  %725 = fadd float %704, %724, !dbg !34
  %726 = fadd float %709, %715, !dbg !39
  %727 = fmul float %719, %719, !dbg !35
  %728 = fmul float %699, %727, !dbg !36
  %729 = fmul float %723, %728, !dbg !37
  %730 = fadd float %726, %729, !dbg !38
  %731 = bitcast float %725 to i32, !dbg !40
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 1, i32 31), !dbg !40
  %733 = bitcast i32 %732 to float, !dbg !40
  %734 = bitcast float %730 to i32, !dbg !40
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 1, i32 31), !dbg !40
  %736 = bitcast i32 %735 to float, !dbg !40
  %737 = bitcast float %720 to i32, !dbg !40
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 1, i32 31), !dbg !40
  %739 = bitcast i32 %738 to float, !dbg !40
  %740 = fsub float %733, %725, !dbg !24
  %741 = fadd float %720, %739, !dbg !29
  %742 = fcmp oeq float %741, 0.000000e+00, !dbg !30
  %743 = tail call float @llvm.nvvm.div.full(float %739, float %741), !dbg !31
  %744 = select i1 %742, float 0.000000e+00, float %743, !dbg !32
  %745 = fmul float %740, %744, !dbg !33
  %746 = fadd float %725, %745, !dbg !34
  %747 = fadd float %730, %736, !dbg !39
  %748 = fmul float %740, %740, !dbg !35
  %749 = fmul float %720, %748, !dbg !36
  %750 = fmul float %744, %749, !dbg !37
  %751 = fadd float %747, %750, !dbg !38
  %752 = and i32 %21, 7, !dbg !40
  %753 = icmp eq i32 %752, 0, !dbg !40
  %754 = and i1 %682, %753, !dbg !40
  %755 = bitcast float %746 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %755, i1 %754) #5, !dbg !40
  %756 = bitcast float %751 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %756, i1 %754) #5, !dbg !40
  %757 = bitcast float %741 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %689, <1 x i32> %757, i1 %754) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %758 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %759 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  %760 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  %761 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !40
  %762 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %50) #5, !dbg !41
  %763 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %45, i1 %50) #5, !dbg !41
  %764 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %50) #5, !dbg !41
  %765 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %50) #5, !dbg !41
  %766 = add nuw nsw i32 %27, 3072, !dbg !42
  %767 = add nuw nsw i32 %27, 5120, !dbg !42
  %768 = zext nneg i32 %766 to i64, !dbg !43
  %769 = getelementptr float, ptr addrspace(1) %1, i64 %768, !dbg !43
  %770 = zext nneg i32 %27 to i64, !dbg !43
  %771 = getelementptr float, ptr addrspace(1) %1, i64 %770, !dbg !43
  %772 = getelementptr i8, ptr addrspace(1) %771, i64 12304, !dbg !43
  %773 = zext nneg i32 %767 to i64, !dbg !43
  %774 = getelementptr float, ptr addrspace(1) %1, i64 %773, !dbg !43
  %775 = getelementptr i8, ptr addrspace(1) %771, i64 20496, !dbg !43
  %776 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %769, i1 true) #5, !dbg !44
  %777 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %772, i1 true) #5, !dbg !44
  %778 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %774, i1 %34) #5, !dbg !44
  %779 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %775, i1 %34) #5, !dbg !44
  %780 = getelementptr bfloat, ptr addrspace(1) %2, i64 %768, !dbg !45
  %781 = getelementptr bfloat, ptr addrspace(1) %2, i64 %773, !dbg !45
  %782 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %780, i1 true) #5, !dbg !46
  %783 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %781, i1 %34) #5, !dbg !46
  %784 = zext nneg i32 %28 to i64, !dbg !47
  %785 = getelementptr float, ptr addrspace(1) %1, i64 %784, !dbg !47
  %786 = zext nneg i32 %29 to i64, !dbg !47
  %787 = getelementptr float, ptr addrspace(1) %1, i64 %786, !dbg !47
  %788 = zext nneg i32 %30 to i64, !dbg !47
  %789 = getelementptr float, ptr addrspace(1) %1, i64 %788, !dbg !47
  %790 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %771, i1 true) #5, !dbg !48
  %791 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %785, i1 true) #5, !dbg !48
  %792 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %787, i1 %34) #5, !dbg !48
  %793 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %789, i1 %34) #5, !dbg !48
  %794 = getelementptr bfloat, ptr addrspace(1) %2, i64 %770, !dbg !49
  %795 = getelementptr bfloat, ptr addrspace(1) %2, i64 %786, !dbg !49
  %796 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %794, i1 true) #5, !dbg !50
  %797 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %795, i1 %34) #5, !dbg !50
  %798 = tail call float @llvm.nvvm.div.full(float %760, float 3.072000e+03), !dbg !51
  %799 = tail call float @llvm.nvvm.div.full(float %761, float 3.072000e+03), !dbg !51
  %800 = fadd float %798, 0x3EB0C6F7A0000000, !dbg !52
  %801 = fadd float %799, 0x3EB0C6F7A0000000, !dbg !52
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %804 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %805 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %806 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %807 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %810 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %811 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %813 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %814 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %816 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %817 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i77 = icmp eq i32 %817, 0, !dbg !53
  br i1 %.not.i77, label %820, label %818, !dbg !53

818:                                              ; preds = %__nv_rsqrtf.exit
  %819 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %800), !dbg !53
  br label %__nv_rsqrtf.exit79, !dbg !53

820:                                              ; preds = %__nv_rsqrtf.exit
  %821 = tail call float @llvm.nvvm.rsqrt.approx.f(float %800), !dbg !53
  br label %__nv_rsqrtf.exit79, !dbg !53

__nv_rsqrtf.exit79:                               ; preds = %818, %820
  %.0.i78 = phi float [ %819, %818 ], [ %821, %820 ], !dbg !53
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %824 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %829 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %830 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %836 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %837 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i125 = icmp eq i32 %837, 0, !dbg !53
  br i1 %.not.i125, label %840, label %838, !dbg !53

838:                                              ; preds = %__nv_rsqrtf.exit79
  %839 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %801), !dbg !53
  br label %__nv_rsqrtf.exit127, !dbg !53

840:                                              ; preds = %__nv_rsqrtf.exit79
  %841 = tail call float @llvm.nvvm.rsqrt.approx.f(float %801), !dbg !53
  br label %__nv_rsqrtf.exit127, !dbg !53

__nv_rsqrtf.exit127:                              ; preds = %838, %840
  %.0.i126 = phi float [ %839, %838 ], [ %841, %840 ], !dbg !53
  %842 = extractvalue { i32, i32, i32, i32 } %765, 3, !dbg !41
  %843 = bitcast i32 %842 to <2 x bfloat>, !dbg !41
  %844 = extractelement <2 x bfloat> %843, i64 1, !dbg !41
  %845 = fpext bfloat %844 to float, !dbg !54
  %846 = fsub float %845, %759, !dbg !55
  %847 = extractelement <2 x bfloat> %843, i64 0, !dbg !41
  %848 = fpext bfloat %847 to float, !dbg !54
  %849 = fsub float %848, %759, !dbg !55
  %850 = extractvalue { i32, i32, i32, i32 } %765, 2, !dbg !41
  %851 = bitcast i32 %850 to <2 x bfloat>, !dbg !41
  %852 = extractelement <2 x bfloat> %851, i64 1, !dbg !41
  %853 = fpext bfloat %852 to float, !dbg !54
  %854 = fsub float %853, %759, !dbg !55
  %855 = extractelement <2 x bfloat> %851, i64 0, !dbg !41
  %856 = fpext bfloat %855 to float, !dbg !54
  %857 = fsub float %856, %759, !dbg !55
  %858 = extractvalue { i32, i32, i32, i32 } %765, 1, !dbg !41
  %859 = bitcast i32 %858 to <2 x bfloat>, !dbg !41
  %860 = extractelement <2 x bfloat> %859, i64 1, !dbg !41
  %861 = fpext bfloat %860 to float, !dbg !54
  %862 = fsub float %861, %759, !dbg !55
  %863 = extractelement <2 x bfloat> %859, i64 0, !dbg !41
  %864 = fpext bfloat %863 to float, !dbg !54
  %865 = fsub float %864, %759, !dbg !55
  %866 = extractvalue { i32, i32, i32, i32 } %765, 0, !dbg !41
  %867 = bitcast i32 %866 to <2 x bfloat>, !dbg !41
  %868 = extractelement <2 x bfloat> %867, i64 1, !dbg !41
  %869 = fpext bfloat %868 to float, !dbg !54
  %870 = fsub float %869, %759, !dbg !55
  %871 = extractelement <2 x bfloat> %867, i64 0, !dbg !41
  %872 = fpext bfloat %871 to float, !dbg !54
  %873 = fsub float %872, %759, !dbg !55
  %874 = extractvalue { i32, i32, i32, i32 } %764, 3, !dbg !41
  %875 = bitcast i32 %874 to <2 x bfloat>, !dbg !41
  %876 = extractelement <2 x bfloat> %875, i64 1, !dbg !41
  %877 = fpext bfloat %876 to float, !dbg !54
  %878 = fsub float %877, %759, !dbg !55
  %879 = extractelement <2 x bfloat> %875, i64 0, !dbg !41
  %880 = fpext bfloat %879 to float, !dbg !54
  %881 = fsub float %880, %759, !dbg !55
  %882 = extractvalue { i32, i32, i32, i32 } %764, 2, !dbg !41
  %883 = bitcast i32 %882 to <2 x bfloat>, !dbg !41
  %884 = extractelement <2 x bfloat> %883, i64 1, !dbg !41
  %885 = fpext bfloat %884 to float, !dbg !54
  %886 = fsub float %885, %759, !dbg !55
  %887 = extractelement <2 x bfloat> %883, i64 0, !dbg !41
  %888 = fpext bfloat %887 to float, !dbg !54
  %889 = fsub float %888, %759, !dbg !55
  %890 = extractvalue { i32, i32, i32, i32 } %764, 1, !dbg !41
  %891 = bitcast i32 %890 to <2 x bfloat>, !dbg !41
  %892 = extractelement <2 x bfloat> %891, i64 1, !dbg !41
  %893 = fpext bfloat %892 to float, !dbg !54
  %894 = fsub float %893, %759, !dbg !55
  %895 = extractelement <2 x bfloat> %891, i64 0, !dbg !41
  %896 = fpext bfloat %895 to float, !dbg !54
  %897 = fsub float %896, %759, !dbg !55
  %898 = extractvalue { i32, i32, i32, i32 } %764, 0, !dbg !41
  %899 = bitcast i32 %898 to <2 x bfloat>, !dbg !41
  %900 = extractelement <2 x bfloat> %899, i64 1, !dbg !41
  %901 = fpext bfloat %900 to float, !dbg !54
  %902 = fsub float %901, %759, !dbg !55
  %903 = extractelement <2 x bfloat> %899, i64 0, !dbg !41
  %904 = fpext bfloat %903 to float, !dbg !54
  %905 = fsub float %904, %759, !dbg !55
  %906 = extractvalue { i32, i32, i32, i32 } %763, 3, !dbg !41
  %907 = bitcast i32 %906 to <2 x bfloat>, !dbg !41
  %908 = extractelement <2 x bfloat> %907, i64 1, !dbg !41
  %909 = fpext bfloat %908 to float, !dbg !54
  %910 = fsub float %909, %758, !dbg !55
  %911 = extractelement <2 x bfloat> %907, i64 0, !dbg !41
  %912 = fpext bfloat %911 to float, !dbg !54
  %913 = fsub float %912, %758, !dbg !55
  %914 = extractvalue { i32, i32, i32, i32 } %763, 2, !dbg !41
  %915 = bitcast i32 %914 to <2 x bfloat>, !dbg !41
  %916 = extractelement <2 x bfloat> %915, i64 1, !dbg !41
  %917 = fpext bfloat %916 to float, !dbg !54
  %918 = fsub float %917, %758, !dbg !55
  %919 = extractelement <2 x bfloat> %915, i64 0, !dbg !41
  %920 = fpext bfloat %919 to float, !dbg !54
  %921 = fsub float %920, %758, !dbg !55
  %922 = extractvalue { i32, i32, i32, i32 } %763, 1, !dbg !41
  %923 = bitcast i32 %922 to <2 x bfloat>, !dbg !41
  %924 = extractelement <2 x bfloat> %923, i64 1, !dbg !41
  %925 = fpext bfloat %924 to float, !dbg !54
  %926 = fsub float %925, %758, !dbg !55
  %927 = extractelement <2 x bfloat> %923, i64 0, !dbg !41
  %928 = fpext bfloat %927 to float, !dbg !54
  %929 = fsub float %928, %758, !dbg !55
  %930 = extractvalue { i32, i32, i32, i32 } %763, 0, !dbg !41
  %931 = bitcast i32 %930 to <2 x bfloat>, !dbg !41
  %932 = extractelement <2 x bfloat> %931, i64 1, !dbg !41
  %933 = fpext bfloat %932 to float, !dbg !54
  %934 = fsub float %933, %758, !dbg !55
  %935 = extractelement <2 x bfloat> %931, i64 0, !dbg !41
  %936 = fpext bfloat %935 to float, !dbg !54
  %937 = fsub float %936, %758, !dbg !55
  %938 = extractvalue { i32, i32, i32, i32 } %762, 3, !dbg !41
  %939 = bitcast i32 %938 to <2 x bfloat>, !dbg !41
  %940 = extractelement <2 x bfloat> %939, i64 1, !dbg !41
  %941 = fpext bfloat %940 to float, !dbg !54
  %942 = fsub float %941, %758, !dbg !55
  %943 = extractelement <2 x bfloat> %939, i64 0, !dbg !41
  %944 = fpext bfloat %943 to float, !dbg !54
  %945 = fsub float %944, %758, !dbg !55
  %946 = extractvalue { i32, i32, i32, i32 } %762, 2, !dbg !41
  %947 = bitcast i32 %946 to <2 x bfloat>, !dbg !41
  %948 = extractelement <2 x bfloat> %947, i64 1, !dbg !41
  %949 = fpext bfloat %948 to float, !dbg !54
  %950 = fsub float %949, %758, !dbg !55
  %951 = extractelement <2 x bfloat> %947, i64 0, !dbg !41
  %952 = fpext bfloat %951 to float, !dbg !54
  %953 = fsub float %952, %758, !dbg !55
  %954 = extractvalue { i32, i32, i32, i32 } %762, 1, !dbg !41
  %955 = bitcast i32 %954 to <2 x bfloat>, !dbg !41
  %956 = extractelement <2 x bfloat> %955, i64 1, !dbg !41
  %957 = fpext bfloat %956 to float, !dbg !54
  %958 = fsub float %957, %758, !dbg !55
  %959 = extractelement <2 x bfloat> %955, i64 0, !dbg !41
  %960 = fpext bfloat %959 to float, !dbg !54
  %961 = fsub float %960, %758, !dbg !55
  %962 = extractvalue { i32, i32, i32, i32 } %762, 0, !dbg !41
  %963 = bitcast i32 %962 to <2 x bfloat>, !dbg !41
  %964 = extractelement <2 x bfloat> %963, i64 1, !dbg !41
  %965 = fpext bfloat %964 to float, !dbg !54
  %966 = fsub float %965, %758, !dbg !55
  %967 = extractelement <2 x bfloat> %963, i64 0, !dbg !41
  %968 = fpext bfloat %967 to float, !dbg !54
  %969 = fsub float %968, %758, !dbg !55
  %970 = extractvalue { i32, i32, i32, i32 } %797, 3, !dbg !50
  %971 = bitcast i32 %970 to <2 x bfloat>, !dbg !50
  %972 = extractvalue { i32, i32, i32, i32 } %797, 2, !dbg !50
  %973 = bitcast i32 %972 to <2 x bfloat>, !dbg !50
  %974 = extractvalue { i32, i32, i32, i32 } %797, 1, !dbg !50
  %975 = bitcast i32 %974 to <2 x bfloat>, !dbg !50
  %976 = extractvalue { i32, i32, i32, i32 } %797, 0, !dbg !50
  %977 = bitcast i32 %976 to <2 x bfloat>, !dbg !50
  %978 = extractvalue { i32, i32, i32, i32 } %796, 3, !dbg !50
  %979 = bitcast i32 %978 to <2 x bfloat>, !dbg !50
  %980 = extractvalue { i32, i32, i32, i32 } %796, 2, !dbg !50
  %981 = bitcast i32 %980 to <2 x bfloat>, !dbg !50
  %982 = extractvalue { i32, i32, i32, i32 } %796, 1, !dbg !50
  %983 = bitcast i32 %982 to <2 x bfloat>, !dbg !50
  %984 = extractvalue { i32, i32, i32, i32 } %796, 0, !dbg !50
  %985 = bitcast i32 %984 to <2 x bfloat>, !dbg !50
  %986 = extractvalue { i32, i32, i32, i32 } %793, 3, !dbg !48
  %987 = extractvalue { i32, i32, i32, i32 } %793, 2, !dbg !48
  %988 = extractvalue { i32, i32, i32, i32 } %793, 1, !dbg !48
  %989 = extractvalue { i32, i32, i32, i32 } %793, 0, !dbg !48
  %990 = extractvalue { i32, i32, i32, i32 } %792, 3, !dbg !48
  %991 = extractvalue { i32, i32, i32, i32 } %792, 2, !dbg !48
  %992 = extractvalue { i32, i32, i32, i32 } %792, 1, !dbg !48
  %993 = extractvalue { i32, i32, i32, i32 } %792, 0, !dbg !48
  %994 = extractvalue { i32, i32, i32, i32 } %791, 3, !dbg !48
  %995 = extractvalue { i32, i32, i32, i32 } %791, 2, !dbg !48
  %996 = extractvalue { i32, i32, i32, i32 } %791, 1, !dbg !48
  %997 = extractvalue { i32, i32, i32, i32 } %791, 0, !dbg !48
  %998 = extractvalue { i32, i32, i32, i32 } %790, 3, !dbg !48
  %999 = extractvalue { i32, i32, i32, i32 } %790, 2, !dbg !48
  %1000 = extractvalue { i32, i32, i32, i32 } %790, 1, !dbg !48
  %1001 = extractvalue { i32, i32, i32, i32 } %790, 0, !dbg !48
  %1002 = extractvalue { i32, i32, i32, i32 } %783, 3, !dbg !46
  %1003 = bitcast i32 %1002 to <2 x bfloat>, !dbg !46
  %1004 = extractvalue { i32, i32, i32, i32 } %783, 2, !dbg !46
  %1005 = bitcast i32 %1004 to <2 x bfloat>, !dbg !46
  %1006 = extractvalue { i32, i32, i32, i32 } %783, 1, !dbg !46
  %1007 = bitcast i32 %1006 to <2 x bfloat>, !dbg !46
  %1008 = extractvalue { i32, i32, i32, i32 } %783, 0, !dbg !46
  %1009 = bitcast i32 %1008 to <2 x bfloat>, !dbg !46
  %1010 = extractvalue { i32, i32, i32, i32 } %782, 3, !dbg !46
  %1011 = bitcast i32 %1010 to <2 x bfloat>, !dbg !46
  %1012 = extractvalue { i32, i32, i32, i32 } %782, 2, !dbg !46
  %1013 = bitcast i32 %1012 to <2 x bfloat>, !dbg !46
  %1014 = extractvalue { i32, i32, i32, i32 } %782, 1, !dbg !46
  %1015 = bitcast i32 %1014 to <2 x bfloat>, !dbg !46
  %1016 = extractvalue { i32, i32, i32, i32 } %782, 0, !dbg !46
  %1017 = bitcast i32 %1016 to <2 x bfloat>, !dbg !46
  %1018 = extractvalue { i32, i32, i32, i32 } %779, 3, !dbg !44
  %1019 = extractvalue { i32, i32, i32, i32 } %779, 2, !dbg !44
  %1020 = extractvalue { i32, i32, i32, i32 } %779, 1, !dbg !44
  %1021 = extractvalue { i32, i32, i32, i32 } %779, 0, !dbg !44
  %1022 = extractvalue { i32, i32, i32, i32 } %778, 3, !dbg !44
  %1023 = extractvalue { i32, i32, i32, i32 } %778, 2, !dbg !44
  %1024 = extractvalue { i32, i32, i32, i32 } %778, 1, !dbg !44
  %1025 = extractvalue { i32, i32, i32, i32 } %778, 0, !dbg !44
  %1026 = extractvalue { i32, i32, i32, i32 } %777, 3, !dbg !44
  %1027 = extractvalue { i32, i32, i32, i32 } %777, 2, !dbg !44
  %1028 = extractvalue { i32, i32, i32, i32 } %777, 1, !dbg !44
  %1029 = extractvalue { i32, i32, i32, i32 } %777, 0, !dbg !44
  %1030 = extractvalue { i32, i32, i32, i32 } %776, 3, !dbg !44
  %1031 = extractvalue { i32, i32, i32, i32 } %776, 2, !dbg !44
  %1032 = extractvalue { i32, i32, i32, i32 } %776, 1, !dbg !44
  %1033 = extractvalue { i32, i32, i32, i32 } %776, 0, !dbg !44
  %1034 = icmp slt i32 %23, 4112, !dbg !13
  %1035 = and i1 %1034, %34, !dbg !19
  %1036 = and i1 %24, %34, !dbg !19
  %1037 = add i32 %29, %37, !dbg !17
  %1038 = add i32 %37, %27, !dbg !17
  %1039 = add i32 %29, %36, !dbg !17
  %1040 = or disjoint i32 %27, %36, !dbg !17
  %1041 = and i32 %21, 1, !dbg !11
  %1042 = or disjoint i32 %20, %1041, !dbg !12
  %1043 = icmp slt i32 %1042, 4112, !dbg !13
  %1044 = fmul float %969, %.0.i78, !dbg !56
  %1045 = fmul float %966, %.0.i78, !dbg !56
  %1046 = fmul float %961, %.0.i78, !dbg !56
  %1047 = fmul float %958, %.0.i78, !dbg !56
  %1048 = fmul float %953, %.0.i78, !dbg !56
  %1049 = fmul float %950, %.0.i78, !dbg !56
  %1050 = fmul float %945, %.0.i78, !dbg !56
  %1051 = fmul float %942, %.0.i78, !dbg !56
  %1052 = fmul float %937, %.0.i78, !dbg !56
  %1053 = fmul float %934, %.0.i78, !dbg !56
  %1054 = fmul float %929, %.0.i78, !dbg !56
  %1055 = fmul float %926, %.0.i78, !dbg !56
  %1056 = fmul float %921, %.0.i78, !dbg !56
  %1057 = fmul float %918, %.0.i78, !dbg !56
  %1058 = fmul float %913, %.0.i78, !dbg !56
  %1059 = fmul float %910, %.0.i78, !dbg !56
  %1060 = fmul float %905, %.0.i126, !dbg !56
  %1061 = fmul float %902, %.0.i126, !dbg !56
  %1062 = fmul float %897, %.0.i126, !dbg !56
  %1063 = fmul float %894, %.0.i126, !dbg !56
  %1064 = fmul float %889, %.0.i126, !dbg !56
  %1065 = fmul float %886, %.0.i126, !dbg !56
  %1066 = fmul float %881, %.0.i126, !dbg !56
  %1067 = fmul float %878, %.0.i126, !dbg !56
  %1068 = fmul float %873, %.0.i126, !dbg !56
  %1069 = fmul float %870, %.0.i126, !dbg !56
  %1070 = fmul float %865, %.0.i126, !dbg !56
  %1071 = fmul float %862, %.0.i126, !dbg !56
  %1072 = fmul float %857, %.0.i126, !dbg !56
  %1073 = fmul float %854, %.0.i126, !dbg !56
  %1074 = fmul float %849, %.0.i126, !dbg !56
  %1075 = fmul float %846, %.0.i126, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1076 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !56
  %1077 = bitcast float %1044 to i32, !dbg !56
  %1078 = bitcast float %1045 to i32, !dbg !56
  %1079 = bitcast float %1046 to i32, !dbg !56
  %1080 = bitcast float %1047 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1076, i32 %1077, i32 %1078, i32 %1079, i32 %1080, i1 true) #5, !dbg !56
  %1081 = or disjoint i32 %32, 4, !dbg !56
  %1082 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1081, !dbg !56
  %1083 = bitcast float %1048 to i32, !dbg !56
  %1084 = bitcast float %1049 to i32, !dbg !56
  %1085 = bitcast float %1050 to i32, !dbg !56
  %1086 = bitcast float %1051 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1082, i32 %1083, i32 %1084, i32 %1085, i32 %1086, i1 true) #5, !dbg !56
  %1087 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %33, !dbg !56
  %1088 = bitcast float %1052 to i32, !dbg !56
  %1089 = bitcast float %1053 to i32, !dbg !56
  %1090 = bitcast float %1054 to i32, !dbg !56
  %1091 = bitcast float %1055 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1087, i32 %1088, i32 %1089, i32 %1090, i32 %1091, i1 true) #5, !dbg !56
  %1092 = or disjoint i32 %32, 12, !dbg !56
  %1093 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1092, !dbg !56
  %1094 = bitcast float %1056 to i32, !dbg !56
  %1095 = bitcast float %1057 to i32, !dbg !56
  %1096 = bitcast float %1058 to i32, !dbg !56
  %1097 = bitcast float %1059 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1093, i32 %1094, i32 %1095, i32 %1096, i32 %1097, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1098 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !56
  %1099 = getelementptr inbounds nuw i8, ptr addrspace(3) %1098, i32 8, !dbg !56
  %1100 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !56
  %1101 = getelementptr inbounds nuw i8, ptr addrspace(3) %1100, i32 8, !dbg !56
  %1102 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !56
  %1103 = getelementptr inbounds nuw i8, ptr addrspace(3) %1102, i32 8, !dbg !56
  %1104 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30, !dbg !56
  %1105 = getelementptr inbounds nuw i8, ptr addrspace(3) %1104, i32 8, !dbg !56
  %1106 = bitcast float %1060 to i32, !dbg !56
  %1107 = bitcast float %1061 to i32, !dbg !56
  %1108 = bitcast float %1062 to i32, !dbg !56
  %1109 = bitcast float %1063 to i32, !dbg !56
  %1110 = bitcast float %1064 to i32, !dbg !56
  %1111 = bitcast float %1065 to i32, !dbg !56
  %1112 = bitcast float %1066 to i32, !dbg !56
  %1113 = bitcast float %1067 to i32, !dbg !56
  %1114 = bitcast float %1068 to i32, !dbg !56
  %1115 = bitcast float %1069 to i32, !dbg !56
  %1116 = bitcast float %1070 to i32, !dbg !56
  %1117 = bitcast float %1071 to i32, !dbg !56
  %1118 = bitcast float %1072 to i32, !dbg !56
  %1119 = bitcast float %1073 to i32, !dbg !56
  %1120 = bitcast float %1074 to i32, !dbg !56
  %1121 = bitcast float %1075 to i32, !dbg !56
  %1122 = sext i32 %1040 to i64, !dbg !57
  %1123 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1122, !dbg !57
  %1124 = sext i32 %1039 to i64, !dbg !57
  %1125 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1124, !dbg !57
  %1126 = sext i32 %1038 to i64, !dbg !57
  %1127 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1126, !dbg !57
  %1128 = sext i32 %1037 to i64, !dbg !57
  %1129 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1128, !dbg !57
  %1130 = getelementptr bfloat, ptr addrspace(1) %3, i64 %42, !dbg !57
  %1131 = getelementptr bfloat, ptr addrspace(1) %3, i64 %44, !dbg !57
  %1132 = getelementptr bfloat, ptr addrspace(1) %3, i64 %46, !dbg !57
  %1133 = getelementptr bfloat, ptr addrspace(1) %3, i64 %48, !dbg !57
  %1134 = fpext <2 x bfloat> %985 to <2 x float>, !dbg !58
  %1135 = insertelement <2 x i32> poison, i32 %1001, i64 0, !dbg !48
  %1136 = insertelement <2 x i32> %1135, i32 %1000, i64 1, !dbg !48
  %1137 = bitcast <2 x i32> %1136 to <2 x float>, !dbg !48
  %1138 = fpext <2 x bfloat> %1017 to <2 x float>, !dbg !59
  %1139 = insertelement <2 x i32> poison, i32 %1033, i64 0, !dbg !44
  %1140 = insertelement <2 x i32> %1139, i32 %1032, i64 1, !dbg !44
  %1141 = bitcast <2 x i32> %1140 to <2 x float>, !dbg !44
  %1142 = load <2 x float>, ptr addrspace(3) %1098, align 16, !dbg !56
  %1143 = fadd <2 x float> %1141, %1138, !dbg !60
  %1144 = fadd <2 x float> %1143, splat (float 1.000000e+00), !dbg !61
  %1145 = fmul <2 x float> %1144, %1142, !dbg !62
  %1146 = fadd <2 x float> %1137, %1134, !dbg !63
  %1147 = fadd <2 x float> %1146, %1145, !dbg !64
  %1148 = extractelement <2 x float> %1147, i64 0, !dbg !65
  %1149 = select i1 %24, float %1148, float 0x7FF0000000000000, !dbg !66
  %1150 = extractelement <2 x float> %1147, i64 1, !dbg !65
  %1151 = select i1 %24, float %1150, float 0x7FF0000000000000, !dbg !66
  %1152 = select i1 %24, float %1148, float 0xFFF0000000000000, !dbg !65
  %1153 = select i1 %24, float %1150, float 0xFFF0000000000000, !dbg !65
  %1154 = fptrunc <2 x float> %1147 to <2 x bfloat>, !dbg !67
  %1155 = fpext <2 x bfloat> %983 to <2 x float>, !dbg !58
  %1156 = insertelement <2 x i32> poison, i32 %999, i64 0, !dbg !48
  %1157 = insertelement <2 x i32> %1156, i32 %998, i64 1, !dbg !48
  %1158 = bitcast <2 x i32> %1157 to <2 x float>, !dbg !48
  %1159 = fpext <2 x bfloat> %1015 to <2 x float>, !dbg !59
  %1160 = insertelement <2 x i32> poison, i32 %1031, i64 0, !dbg !44
  %1161 = insertelement <2 x i32> %1160, i32 %1030, i64 1, !dbg !44
  %1162 = bitcast <2 x i32> %1161 to <2 x float>, !dbg !44
  %1163 = load <2 x float>, ptr addrspace(3) %1099, align 8, !dbg !56
  %1164 = fadd <2 x float> %1162, %1159, !dbg !60
  %1165 = fadd <2 x float> %1164, splat (float 1.000000e+00), !dbg !61
  %1166 = fmul <2 x float> %1165, %1163, !dbg !62
  %1167 = fadd <2 x float> %1158, %1155, !dbg !63
  %1168 = fadd <2 x float> %1167, %1166, !dbg !64
  %1169 = extractelement <2 x float> %1168, i64 0, !dbg !65
  %1170 = select i1 %24, float %1169, float 0x7FF0000000000000, !dbg !66
  %1171 = extractelement <2 x float> %1168, i64 1, !dbg !65
  %1172 = select i1 %24, float %1171, float 0x7FF0000000000000, !dbg !66
  %1173 = select i1 %24, float %1169, float 0xFFF0000000000000, !dbg !65
  %1174 = select i1 %24, float %1171, float 0xFFF0000000000000, !dbg !65
  %1175 = fptrunc <2 x float> %1168 to <2 x bfloat>, !dbg !67
  %1176 = fpext <2 x bfloat> %981 to <2 x float>, !dbg !58
  %1177 = insertelement <2 x i32> poison, i32 %997, i64 0, !dbg !48
  %1178 = insertelement <2 x i32> %1177, i32 %996, i64 1, !dbg !48
  %1179 = bitcast <2 x i32> %1178 to <2 x float>, !dbg !48
  %1180 = fpext <2 x bfloat> %1013 to <2 x float>, !dbg !59
  %1181 = insertelement <2 x i32> poison, i32 %1029, i64 0, !dbg !44
  %1182 = insertelement <2 x i32> %1181, i32 %1028, i64 1, !dbg !44
  %1183 = bitcast <2 x i32> %1182 to <2 x float>, !dbg !44
  %1184 = load <2 x float>, ptr addrspace(3) %1100, align 16, !dbg !56
  %1185 = fadd <2 x float> %1183, %1180, !dbg !60
  %1186 = fadd <2 x float> %1185, splat (float 1.000000e+00), !dbg !61
  %1187 = fmul <2 x float> %1186, %1184, !dbg !62
  %1188 = fadd <2 x float> %1179, %1176, !dbg !63
  %1189 = fadd <2 x float> %1188, %1187, !dbg !64
  %1190 = extractelement <2 x float> %1189, i64 0, !dbg !65
  %1191 = select i1 %24, float %1190, float 0x7FF0000000000000, !dbg !66
  %1192 = extractelement <2 x float> %1189, i64 1, !dbg !65
  %1193 = select i1 %24, float %1192, float 0x7FF0000000000000, !dbg !66
  %1194 = select i1 %24, float %1190, float 0xFFF0000000000000, !dbg !65
  %1195 = select i1 %24, float %1192, float 0xFFF0000000000000, !dbg !65
  %1196 = fptrunc <2 x float> %1189 to <2 x bfloat>, !dbg !67
  %1197 = fpext <2 x bfloat> %979 to <2 x float>, !dbg !58
  %1198 = insertelement <2 x i32> poison, i32 %995, i64 0, !dbg !48
  %1199 = insertelement <2 x i32> %1198, i32 %994, i64 1, !dbg !48
  %1200 = bitcast <2 x i32> %1199 to <2 x float>, !dbg !48
  %1201 = fpext <2 x bfloat> %1011 to <2 x float>, !dbg !59
  %1202 = insertelement <2 x i32> poison, i32 %1027, i64 0, !dbg !44
  %1203 = insertelement <2 x i32> %1202, i32 %1026, i64 1, !dbg !44
  %1204 = bitcast <2 x i32> %1203 to <2 x float>, !dbg !44
  %1205 = load <2 x float>, ptr addrspace(3) %1101, align 8, !dbg !56
  %1206 = fadd <2 x float> %1204, %1201, !dbg !60
  %1207 = fadd <2 x float> %1206, splat (float 1.000000e+00), !dbg !61
  %1208 = fmul <2 x float> %1207, %1205, !dbg !62
  %1209 = fadd <2 x float> %1200, %1197, !dbg !63
  %1210 = fadd <2 x float> %1209, %1208, !dbg !64
  %1211 = extractelement <2 x float> %1210, i64 0, !dbg !65
  %1212 = select i1 %24, float %1211, float 0x7FF0000000000000, !dbg !66
  %1213 = extractelement <2 x float> %1210, i64 1, !dbg !65
  %1214 = select i1 %24, float %1213, float 0x7FF0000000000000, !dbg !66
  %1215 = select i1 %24, float %1211, float 0xFFF0000000000000, !dbg !65
  %1216 = select i1 %24, float %1213, float 0xFFF0000000000000, !dbg !65
  %1217 = fptrunc <2 x float> %1210 to <2 x bfloat>, !dbg !67
  %1218 = fpext <2 x bfloat> %977 to <2 x float>, !dbg !58
  %1219 = insertelement <2 x i32> poison, i32 %993, i64 0, !dbg !48
  %1220 = insertelement <2 x i32> %1219, i32 %992, i64 1, !dbg !48
  %1221 = bitcast <2 x i32> %1220 to <2 x float>, !dbg !48
  %1222 = fpext <2 x bfloat> %1009 to <2 x float>, !dbg !59
  %1223 = insertelement <2 x i32> poison, i32 %1025, i64 0, !dbg !44
  %1224 = insertelement <2 x i32> %1223, i32 %1024, i64 1, !dbg !44
  %1225 = bitcast <2 x i32> %1224 to <2 x float>, !dbg !44
  %1226 = load <2 x float>, ptr addrspace(3) %1102, align 16, !dbg !56
  %1227 = fadd <2 x float> %1225, %1222, !dbg !60
  %1228 = fadd <2 x float> %1227, splat (float 1.000000e+00), !dbg !61
  %1229 = fmul <2 x float> %1228, %1226, !dbg !62
  %1230 = fadd <2 x float> %1221, %1218, !dbg !63
  %1231 = fadd <2 x float> %1230, %1229, !dbg !64
  %1232 = extractelement <2 x float> %1231, i64 0, !dbg !65
  %1233 = select i1 %1036, float %1232, float 0x7FF0000000000000, !dbg !66
  %1234 = extractelement <2 x float> %1231, i64 1, !dbg !65
  %1235 = select i1 %1036, float %1234, float 0x7FF0000000000000, !dbg !66
  %1236 = select i1 %1036, float %1232, float 0xFFF0000000000000, !dbg !65
  %1237 = select i1 %1036, float %1234, float 0xFFF0000000000000, !dbg !65
  %1238 = fptrunc <2 x float> %1231 to <2 x bfloat>, !dbg !67
  %1239 = fpext <2 x bfloat> %975 to <2 x float>, !dbg !58
  %1240 = insertelement <2 x i32> poison, i32 %991, i64 0, !dbg !48
  %1241 = insertelement <2 x i32> %1240, i32 %990, i64 1, !dbg !48
  %1242 = bitcast <2 x i32> %1241 to <2 x float>, !dbg !48
  %1243 = fpext <2 x bfloat> %1007 to <2 x float>, !dbg !59
  %1244 = insertelement <2 x i32> poison, i32 %1023, i64 0, !dbg !44
  %1245 = insertelement <2 x i32> %1244, i32 %1022, i64 1, !dbg !44
  %1246 = bitcast <2 x i32> %1245 to <2 x float>, !dbg !44
  %1247 = load <2 x float>, ptr addrspace(3) %1103, align 8, !dbg !56
  %1248 = fadd <2 x float> %1246, %1243, !dbg !60
  %1249 = fadd <2 x float> %1248, splat (float 1.000000e+00), !dbg !61
  %1250 = fmul <2 x float> %1249, %1247, !dbg !62
  %1251 = fadd <2 x float> %1242, %1239, !dbg !63
  %1252 = fadd <2 x float> %1251, %1250, !dbg !64
  %1253 = extractelement <2 x float> %1252, i64 0, !dbg !65
  %1254 = select i1 %1036, float %1253, float 0x7FF0000000000000, !dbg !66
  %1255 = extractelement <2 x float> %1252, i64 1, !dbg !65
  %1256 = select i1 %1036, float %1255, float 0x7FF0000000000000, !dbg !66
  %1257 = select i1 %1036, float %1253, float 0xFFF0000000000000, !dbg !65
  %1258 = select i1 %1036, float %1255, float 0xFFF0000000000000, !dbg !65
  %1259 = fptrunc <2 x float> %1252 to <2 x bfloat>, !dbg !67
  %1260 = fpext <2 x bfloat> %973 to <2 x float>, !dbg !58
  %1261 = insertelement <2 x i32> poison, i32 %989, i64 0, !dbg !48
  %1262 = insertelement <2 x i32> %1261, i32 %988, i64 1, !dbg !48
  %1263 = bitcast <2 x i32> %1262 to <2 x float>, !dbg !48
  %1264 = fpext <2 x bfloat> %1005 to <2 x float>, !dbg !59
  %1265 = insertelement <2 x i32> poison, i32 %1021, i64 0, !dbg !44
  %1266 = insertelement <2 x i32> %1265, i32 %1020, i64 1, !dbg !44
  %1267 = bitcast <2 x i32> %1266 to <2 x float>, !dbg !44
  %1268 = load <2 x float>, ptr addrspace(3) %1104, align 16, !dbg !56
  %1269 = fadd <2 x float> %1267, %1264, !dbg !60
  %1270 = fadd <2 x float> %1269, splat (float 1.000000e+00), !dbg !61
  %1271 = fmul <2 x float> %1270, %1268, !dbg !62
  %1272 = fadd <2 x float> %1263, %1260, !dbg !63
  %1273 = fadd <2 x float> %1272, %1271, !dbg !64
  %1274 = extractelement <2 x float> %1273, i64 0, !dbg !65
  %1275 = select i1 %1036, float %1274, float 0x7FF0000000000000, !dbg !66
  %1276 = extractelement <2 x float> %1273, i64 1, !dbg !65
  %1277 = select i1 %1036, float %1276, float 0x7FF0000000000000, !dbg !66
  %1278 = select i1 %1036, float %1274, float 0xFFF0000000000000, !dbg !65
  %1279 = select i1 %1036, float %1276, float 0xFFF0000000000000, !dbg !65
  %1280 = fptrunc <2 x float> %1273 to <2 x bfloat>, !dbg !67
  %1281 = fpext <2 x bfloat> %971 to <2 x float>, !dbg !58
  %1282 = insertelement <2 x i32> poison, i32 %987, i64 0, !dbg !48
  %1283 = insertelement <2 x i32> %1282, i32 %986, i64 1, !dbg !48
  %1284 = bitcast <2 x i32> %1283 to <2 x float>, !dbg !48
  %1285 = fpext <2 x bfloat> %1003 to <2 x float>, !dbg !59
  %1286 = insertelement <2 x i32> poison, i32 %1019, i64 0, !dbg !44
  %1287 = insertelement <2 x i32> %1286, i32 %1018, i64 1, !dbg !44
  %1288 = bitcast <2 x i32> %1287 to <2 x float>, !dbg !44
  %1289 = load <2 x float>, ptr addrspace(3) %1105, align 8, !dbg !56
  %1290 = fadd <2 x float> %1288, %1285, !dbg !60
  %1291 = fadd <2 x float> %1290, splat (float 1.000000e+00), !dbg !61
  %1292 = fmul <2 x float> %1291, %1289, !dbg !62
  %1293 = fadd <2 x float> %1284, %1281, !dbg !63
  %1294 = fadd <2 x float> %1293, %1292, !dbg !64
  %1295 = extractelement <2 x float> %1294, i64 0, !dbg !65
  %1296 = select i1 %1036, float %1295, float 0x7FF0000000000000, !dbg !66
  %1297 = extractelement <2 x float> %1294, i64 1, !dbg !65
  %1298 = select i1 %1036, float %1297, float 0x7FF0000000000000, !dbg !66
  %1299 = select i1 %1036, float %1295, float 0xFFF0000000000000, !dbg !65
  %1300 = select i1 %1036, float %1297, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1076, i32 %1106, i32 %1107, i32 %1108, i32 %1109, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1082, i32 %1110, i32 %1111, i32 %1112, i32 %1113, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1087, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1093, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1301 = fptrunc <2 x float> %1294 to <2 x bfloat>, !dbg !67
  %1302 = load <2 x float>, ptr addrspace(3) %1098, align 16, !dbg !56
  %1303 = fmul <2 x float> %1144, %1302, !dbg !62
  %1304 = fadd <2 x float> %1146, %1303, !dbg !64
  %1305 = extractelement <2 x float> %1304, i64 0, !dbg !65
  %1306 = select i1 %1034, float %1305, float 0x7FF0000000000000, !dbg !66
  %1307 = extractelement <2 x float> %1304, i64 1, !dbg !65
  %1308 = select i1 %1034, float %1307, float 0x7FF0000000000000, !dbg !66
  %1309 = select i1 %1034, float %1305, float 0xFFF0000000000000, !dbg !65
  %1310 = select i1 %1034, float %1307, float 0xFFF0000000000000, !dbg !65
  %1311 = fptrunc <2 x float> %1304 to <2 x bfloat>, !dbg !67
  %1312 = load <2 x float>, ptr addrspace(3) %1099, align 8, !dbg !56
  %1313 = fmul <2 x float> %1165, %1312, !dbg !62
  %1314 = fadd <2 x float> %1167, %1313, !dbg !64
  %1315 = extractelement <2 x float> %1314, i64 0, !dbg !65
  %1316 = select i1 %1034, float %1315, float 0x7FF0000000000000, !dbg !66
  %1317 = extractelement <2 x float> %1314, i64 1, !dbg !65
  %1318 = select i1 %1034, float %1317, float 0x7FF0000000000000, !dbg !66
  %1319 = select i1 %1034, float %1315, float 0xFFF0000000000000, !dbg !65
  %1320 = select i1 %1034, float %1317, float 0xFFF0000000000000, !dbg !65
  %1321 = fptrunc <2 x float> %1314 to <2 x bfloat>, !dbg !67
  %1322 = load <2 x float>, ptr addrspace(3) %1100, align 16, !dbg !56
  %1323 = fmul <2 x float> %1186, %1322, !dbg !62
  %1324 = fadd <2 x float> %1188, %1323, !dbg !64
  %1325 = extractelement <2 x float> %1324, i64 0, !dbg !65
  %1326 = select i1 %1034, float %1325, float 0x7FF0000000000000, !dbg !66
  %1327 = extractelement <2 x float> %1324, i64 1, !dbg !65
  %1328 = select i1 %1034, float %1327, float 0x7FF0000000000000, !dbg !66
  %1329 = select i1 %1034, float %1325, float 0xFFF0000000000000, !dbg !65
  %1330 = select i1 %1034, float %1327, float 0xFFF0000000000000, !dbg !65
  %1331 = fptrunc <2 x float> %1324 to <2 x bfloat>, !dbg !67
  %1332 = load <2 x float>, ptr addrspace(3) %1101, align 8, !dbg !56
  %1333 = fmul <2 x float> %1207, %1332, !dbg !62
  %1334 = fadd <2 x float> %1209, %1333, !dbg !64
  %1335 = extractelement <2 x float> %1334, i64 0, !dbg !65
  %1336 = select i1 %1034, float %1335, float 0x7FF0000000000000, !dbg !66
  %1337 = extractelement <2 x float> %1334, i64 1, !dbg !65
  %1338 = select i1 %1034, float %1337, float 0x7FF0000000000000, !dbg !66
  %1339 = select i1 %1034, float %1335, float 0xFFF0000000000000, !dbg !65
  %1340 = select i1 %1034, float %1337, float 0xFFF0000000000000, !dbg !65
  %1341 = fptrunc <2 x float> %1334 to <2 x bfloat>, !dbg !67
  %1342 = load <2 x float>, ptr addrspace(3) %1102, align 16, !dbg !56
  %1343 = fmul <2 x float> %1228, %1342, !dbg !62
  %1344 = fadd <2 x float> %1230, %1343, !dbg !64
  %1345 = extractelement <2 x float> %1344, i64 0, !dbg !65
  %1346 = select i1 %1035, float %1345, float 0x7FF0000000000000, !dbg !66
  %1347 = extractelement <2 x float> %1344, i64 1, !dbg !65
  %1348 = select i1 %1035, float %1347, float 0x7FF0000000000000, !dbg !66
  %1349 = select i1 %1035, float %1345, float 0xFFF0000000000000, !dbg !65
  %1350 = select i1 %1035, float %1347, float 0xFFF0000000000000, !dbg !65
  %1351 = fptrunc <2 x float> %1344 to <2 x bfloat>, !dbg !67
  %1352 = load <2 x float>, ptr addrspace(3) %1103, align 8, !dbg !56
  %1353 = fmul <2 x float> %1249, %1352, !dbg !62
  %1354 = fadd <2 x float> %1251, %1353, !dbg !64
  %1355 = extractelement <2 x float> %1354, i64 0, !dbg !65
  %1356 = select i1 %1035, float %1355, float 0x7FF0000000000000, !dbg !66
  %1357 = extractelement <2 x float> %1354, i64 1, !dbg !65
  %1358 = select i1 %1035, float %1357, float 0x7FF0000000000000, !dbg !66
  %1359 = select i1 %1035, float %1355, float 0xFFF0000000000000, !dbg !65
  %1360 = select i1 %1035, float %1357, float 0xFFF0000000000000, !dbg !65
  %1361 = fptrunc <2 x float> %1354 to <2 x bfloat>, !dbg !67
  %1362 = load <2 x float>, ptr addrspace(3) %1104, align 16, !dbg !56
  %1363 = fmul <2 x float> %1270, %1362, !dbg !62
  %1364 = fadd <2 x float> %1272, %1363, !dbg !64
  %1365 = extractelement <2 x float> %1364, i64 0, !dbg !65
  %1366 = select i1 %1035, float %1365, float 0x7FF0000000000000, !dbg !66
  %1367 = extractelement <2 x float> %1364, i64 1, !dbg !65
  %1368 = select i1 %1035, float %1367, float 0x7FF0000000000000, !dbg !66
  %1369 = select i1 %1035, float %1365, float 0xFFF0000000000000, !dbg !65
  %1370 = select i1 %1035, float %1367, float 0xFFF0000000000000, !dbg !65
  %1371 = fptrunc <2 x float> %1364 to <2 x bfloat>, !dbg !67
  %1372 = load <2 x float>, ptr addrspace(3) %1105, align 8, !dbg !56
  %1373 = fmul <2 x float> %1291, %1372, !dbg !62
  %1374 = fadd <2 x float> %1293, %1373, !dbg !64
  %1375 = extractelement <2 x float> %1374, i64 0, !dbg !65
  %1376 = select i1 %1035, float %1375, float 0x7FF0000000000000, !dbg !66
  %1377 = extractelement <2 x float> %1374, i64 1, !dbg !65
  %1378 = select i1 %1035, float %1377, float 0x7FF0000000000000, !dbg !66
  %1379 = select i1 %1035, float %1375, float 0xFFF0000000000000, !dbg !65
  %1380 = select i1 %1035, float %1377, float 0xFFF0000000000000, !dbg !65
  %1381 = fptrunc <2 x float> %1374 to <2 x bfloat>, !dbg !67
  %1382 = bitcast <2 x bfloat> %1154 to i32, !dbg !67
  %1383 = bitcast <2 x bfloat> %1175 to i32, !dbg !67
  %1384 = bitcast <2 x bfloat> %1196 to i32, !dbg !67
  %1385 = bitcast <2 x bfloat> %1217 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1382, i32 %1383, i32 %1384, i32 %1385, ptr addrspace(1) %1123, i1 %24) #5, !dbg !67
  %1386 = bitcast <2 x bfloat> %1238 to i32, !dbg !67
  %1387 = bitcast <2 x bfloat> %1259 to i32, !dbg !67
  %1388 = bitcast <2 x bfloat> %1280 to i32, !dbg !67
  %1389 = bitcast <2 x bfloat> %1301 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1386, i32 %1387, i32 %1388, i32 %1389, ptr addrspace(1) %1125, i1 %1036) #5, !dbg !67
  %1390 = bitcast <2 x bfloat> %1311 to i32, !dbg !67
  %1391 = bitcast <2 x bfloat> %1321 to i32, !dbg !67
  %1392 = bitcast <2 x bfloat> %1331 to i32, !dbg !67
  %1393 = bitcast <2 x bfloat> %1341 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1390, i32 %1391, i32 %1392, i32 %1393, ptr addrspace(1) %1127, i1 %1034) #5, !dbg !67
  %1394 = bitcast <2 x bfloat> %1351 to i32, !dbg !67
  %1395 = bitcast <2 x bfloat> %1361 to i32, !dbg !67
  %1396 = bitcast <2 x bfloat> %1371 to i32, !dbg !67
  %1397 = bitcast <2 x bfloat> %1381 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1394, i32 %1395, i32 %1396, i32 %1397, ptr addrspace(1) %1129, i1 %1035) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1398 = fcmp olt float %1149, %1151, !dbg !70
  %1399 = fcmp uno float %1149, 0.000000e+00, !dbg !71
  %1400 = or i1 %1398, %1399, !dbg !72
  %1401 = select i1 %1400, float %1149, float %1151, !dbg !73
  %1402 = fcmp olt float %1401, %1170, !dbg !70
  %1403 = fcmp uno float %1401, 0.000000e+00, !dbg !71
  %1404 = or i1 %1402, %1403, !dbg !72
  %1405 = select i1 %1404, float %1401, float %1170, !dbg !73
  %1406 = fcmp olt float %1405, %1172, !dbg !70
  %1407 = fcmp uno float %1405, 0.000000e+00, !dbg !71
  %1408 = or i1 %1406, %1407, !dbg !72
  %1409 = select i1 %1408, float %1405, float %1172, !dbg !73
  %1410 = fcmp olt float %1409, %1191, !dbg !70
  %1411 = fcmp uno float %1409, 0.000000e+00, !dbg !71
  %1412 = or i1 %1410, %1411, !dbg !72
  %1413 = select i1 %1412, float %1409, float %1191, !dbg !73
  %1414 = fcmp olt float %1413, %1193, !dbg !70
  %1415 = fcmp uno float %1413, 0.000000e+00, !dbg !71
  %1416 = or i1 %1414, %1415, !dbg !72
  %1417 = select i1 %1416, float %1413, float %1193, !dbg !73
  %1418 = fcmp olt float %1417, %1212, !dbg !70
  %1419 = fcmp uno float %1417, 0.000000e+00, !dbg !71
  %1420 = or i1 %1418, %1419, !dbg !72
  %1421 = select i1 %1420, float %1417, float %1212, !dbg !73
  %1422 = fcmp olt float %1421, %1214, !dbg !70
  %1423 = fcmp uno float %1421, 0.000000e+00, !dbg !71
  %1424 = or i1 %1422, %1423, !dbg !72
  %1425 = select i1 %1424, float %1421, float %1214, !dbg !73
  %1426 = fcmp olt float %1425, %1233, !dbg !70
  %1427 = fcmp uno float %1425, 0.000000e+00, !dbg !71
  %1428 = or i1 %1426, %1427, !dbg !72
  %1429 = select i1 %1428, float %1425, float %1233, !dbg !73
  %1430 = fcmp olt float %1429, %1235, !dbg !70
  %1431 = fcmp uno float %1429, 0.000000e+00, !dbg !71
  %1432 = or i1 %1430, %1431, !dbg !72
  %1433 = select i1 %1432, float %1429, float %1235, !dbg !73
  %1434 = fcmp olt float %1433, %1254, !dbg !70
  %1435 = fcmp uno float %1433, 0.000000e+00, !dbg !71
  %1436 = or i1 %1434, %1435, !dbg !72
  %1437 = select i1 %1436, float %1433, float %1254, !dbg !73
  %1438 = fcmp olt float %1437, %1256, !dbg !70
  %1439 = fcmp uno float %1437, 0.000000e+00, !dbg !71
  %1440 = or i1 %1438, %1439, !dbg !72
  %1441 = select i1 %1440, float %1437, float %1256, !dbg !73
  %1442 = fcmp olt float %1441, %1275, !dbg !70
  %1443 = fcmp uno float %1441, 0.000000e+00, !dbg !71
  %1444 = or i1 %1442, %1443, !dbg !72
  %1445 = select i1 %1444, float %1441, float %1275, !dbg !73
  %1446 = fcmp olt float %1445, %1277, !dbg !70
  %1447 = fcmp uno float %1445, 0.000000e+00, !dbg !71
  %1448 = or i1 %1446, %1447, !dbg !72
  %1449 = select i1 %1448, float %1445, float %1277, !dbg !73
  %1450 = fcmp olt float %1449, %1296, !dbg !70
  %1451 = fcmp uno float %1449, 0.000000e+00, !dbg !71
  %1452 = or i1 %1450, %1451, !dbg !72
  %1453 = select i1 %1452, float %1449, float %1296, !dbg !73
  %1454 = fcmp olt float %1453, %1298, !dbg !70
  %1455 = fcmp uno float %1453, 0.000000e+00, !dbg !71
  %1456 = or i1 %1454, %1455, !dbg !72
  %1457 = select i1 %1456, float %1453, float %1298, !dbg !73
  %1458 = fcmp olt float %1306, %1308, !dbg !70
  %1459 = fcmp uno float %1306, 0.000000e+00, !dbg !71
  %1460 = or i1 %1458, %1459, !dbg !72
  %1461 = select i1 %1460, float %1306, float %1308, !dbg !73
  %1462 = fcmp olt float %1461, %1316, !dbg !70
  %1463 = fcmp uno float %1461, 0.000000e+00, !dbg !71
  %1464 = or i1 %1462, %1463, !dbg !72
  %1465 = select i1 %1464, float %1461, float %1316, !dbg !73
  %1466 = fcmp olt float %1465, %1318, !dbg !70
  %1467 = fcmp uno float %1465, 0.000000e+00, !dbg !71
  %1468 = or i1 %1466, %1467, !dbg !72
  %1469 = select i1 %1468, float %1465, float %1318, !dbg !73
  %1470 = fcmp olt float %1469, %1326, !dbg !70
  %1471 = fcmp uno float %1469, 0.000000e+00, !dbg !71
  %1472 = or i1 %1470, %1471, !dbg !72
  %1473 = select i1 %1472, float %1469, float %1326, !dbg !73
  %1474 = fcmp olt float %1473, %1328, !dbg !70
  %1475 = fcmp uno float %1473, 0.000000e+00, !dbg !71
  %1476 = or i1 %1474, %1475, !dbg !72
  %1477 = select i1 %1476, float %1473, float %1328, !dbg !73
  %1478 = fcmp olt float %1477, %1336, !dbg !70
  %1479 = fcmp uno float %1477, 0.000000e+00, !dbg !71
  %1480 = or i1 %1478, %1479, !dbg !72
  %1481 = select i1 %1480, float %1477, float %1336, !dbg !73
  %1482 = fcmp olt float %1481, %1338, !dbg !70
  %1483 = fcmp uno float %1481, 0.000000e+00, !dbg !71
  %1484 = or i1 %1482, %1483, !dbg !72
  %1485 = select i1 %1484, float %1481, float %1338, !dbg !73
  %1486 = fcmp olt float %1485, %1346, !dbg !70
  %1487 = fcmp uno float %1485, 0.000000e+00, !dbg !71
  %1488 = or i1 %1486, %1487, !dbg !72
  %1489 = select i1 %1488, float %1485, float %1346, !dbg !73
  %1490 = fcmp olt float %1489, %1348, !dbg !70
  %1491 = fcmp uno float %1489, 0.000000e+00, !dbg !71
  %1492 = or i1 %1490, %1491, !dbg !72
  %1493 = select i1 %1492, float %1489, float %1348, !dbg !73
  %1494 = fcmp olt float %1493, %1356, !dbg !70
  %1495 = fcmp uno float %1493, 0.000000e+00, !dbg !71
  %1496 = or i1 %1494, %1495, !dbg !72
  %1497 = select i1 %1496, float %1493, float %1356, !dbg !73
  %1498 = fcmp olt float %1497, %1358, !dbg !70
  %1499 = fcmp uno float %1497, 0.000000e+00, !dbg !71
  %1500 = or i1 %1498, %1499, !dbg !72
  %1501 = select i1 %1500, float %1497, float %1358, !dbg !73
  %1502 = fcmp olt float %1501, %1366, !dbg !70
  %1503 = fcmp uno float %1501, 0.000000e+00, !dbg !71
  %1504 = or i1 %1502, %1503, !dbg !72
  %1505 = select i1 %1504, float %1501, float %1366, !dbg !73
  %1506 = fcmp olt float %1505, %1368, !dbg !70
  %1507 = fcmp uno float %1505, 0.000000e+00, !dbg !71
  %1508 = or i1 %1506, %1507, !dbg !72
  %1509 = select i1 %1508, float %1505, float %1368, !dbg !73
  %1510 = fcmp olt float %1509, %1376, !dbg !70
  %1511 = fcmp uno float %1509, 0.000000e+00, !dbg !71
  %1512 = or i1 %1510, %1511, !dbg !72
  %1513 = select i1 %1512, float %1509, float %1376, !dbg !73
  %1514 = fcmp olt float %1513, %1378, !dbg !70
  %1515 = fcmp uno float %1513, 0.000000e+00, !dbg !71
  %1516 = or i1 %1514, %1515, !dbg !72
  %1517 = select i1 %1516, float %1513, float %1378, !dbg !73
  %1518 = bitcast float %1457 to i32, !dbg !68
  %1519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1518, i32 16, i32 31), !dbg !68
  %1520 = bitcast i32 %1519 to float, !dbg !68
  %1521 = fcmp olt float %1457, %1520, !dbg !70
  %1522 = fcmp uno float %1457, 0.000000e+00, !dbg !71
  %1523 = or i1 %1521, %1522, !dbg !72
  %1524 = select i1 %1523, float %1457, float %1520, !dbg !73
  %1525 = bitcast float %1524 to i32, !dbg !68
  %1526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1525, i32 8, i32 31), !dbg !68
  %1527 = bitcast i32 %1526 to float, !dbg !68
  %1528 = fcmp olt float %1524, %1527, !dbg !70
  %1529 = fcmp uno float %1524, 0.000000e+00, !dbg !71
  %1530 = or i1 %1528, %1529, !dbg !72
  %1531 = select i1 %1530, float %1524, float %1527, !dbg !73
  %1532 = bitcast float %1531 to i32, !dbg !68
  %1533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1532, i32 4, i32 31), !dbg !68
  %1534 = bitcast i32 %1533 to float, !dbg !68
  %1535 = fcmp olt float %1531, %1534, !dbg !70
  %1536 = fcmp uno float %1531, 0.000000e+00, !dbg !71
  %1537 = or i1 %1535, %1536, !dbg !72
  %1538 = select i1 %1537, float %1531, float %1534, !dbg !73
  %1539 = bitcast float %1538 to i32, !dbg !68
  %1540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1539, i32 2, i32 31), !dbg !68
  %1541 = bitcast i32 %1540 to float, !dbg !68
  %1542 = fcmp olt float %1538, %1541, !dbg !70
  %1543 = fcmp uno float %1538, 0.000000e+00, !dbg !71
  %1544 = or i1 %1542, %1543, !dbg !72
  %1545 = select i1 %1544, float %1538, float %1541, !dbg !73
  %1546 = bitcast float %1545 to i32, !dbg !68
  %1547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1546, i32 1, i32 31), !dbg !68
  %1548 = bitcast i32 %1547 to float, !dbg !68
  %1549 = fcmp olt float %1545, %1548, !dbg !70
  %1550 = fcmp uno float %1545, 0.000000e+00, !dbg !71
  %1551 = or i1 %1549, %1550, !dbg !72
  %1552 = bitcast float %1517 to i32, !dbg !68
  %1553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1552, i32 16, i32 31), !dbg !68
  %1554 = bitcast i32 %1553 to float, !dbg !68
  %1555 = fcmp olt float %1517, %1554, !dbg !70
  %1556 = fcmp uno float %1517, 0.000000e+00, !dbg !71
  %1557 = or i1 %1555, %1556, !dbg !72
  %1558 = select i1 %1557, float %1517, float %1554, !dbg !73
  %1559 = bitcast float %1558 to i32, !dbg !68
  %1560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1559, i32 8, i32 31), !dbg !68
  %1561 = bitcast i32 %1560 to float, !dbg !68
  %1562 = fcmp olt float %1558, %1561, !dbg !70
  %1563 = fcmp uno float %1558, 0.000000e+00, !dbg !71
  %1564 = or i1 %1562, %1563, !dbg !72
  %1565 = select i1 %1564, float %1558, float %1561, !dbg !73
  %1566 = bitcast float %1565 to i32, !dbg !68
  %1567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1566, i32 4, i32 31), !dbg !68
  %1568 = bitcast i32 %1567 to float, !dbg !68
  %1569 = fcmp olt float %1565, %1568, !dbg !70
  %1570 = fcmp uno float %1565, 0.000000e+00, !dbg !71
  %1571 = or i1 %1569, %1570, !dbg !72
  %1572 = select i1 %1571, float %1565, float %1568, !dbg !73
  %1573 = bitcast float %1572 to i32, !dbg !68
  %1574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1573, i32 2, i32 31), !dbg !68
  %1575 = bitcast i32 %1574 to float, !dbg !68
  %1576 = fcmp olt float %1572, %1575, !dbg !70
  %1577 = fcmp uno float %1572, 0.000000e+00, !dbg !71
  %1578 = or i1 %1576, %1577, !dbg !72
  %1579 = select i1 %1578, float %1572, float %1575, !dbg !73
  %1580 = bitcast float %1579 to i32, !dbg !68
  %1581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1580, i32 1, i32 31), !dbg !68
  %1582 = bitcast i32 %1581 to float, !dbg !68
  %1583 = fcmp olt float %1579, %1582, !dbg !70
  %1584 = fcmp uno float %1579, 0.000000e+00, !dbg !71
  %1585 = or i1 %1583, %1584, !dbg !72
  %1586 = select i1 %1551, i32 %1546, i32 %1547, !dbg !73
  %1587 = insertelement <1 x i32> poison, i32 %1586, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %1587, i1 %668) #5, !dbg !68
  %1588 = select i1 %1585, i32 %1580, i32 %1581, !dbg !73
  %1589 = insertelement <1 x i32> poison, i32 %1588, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %676, <1 x i32> %1589, i1 %668) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1590 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %683, i1 %682) #5, !dbg !68
  %1591 = bitcast i32 %1590 to float, !dbg !68
  %1592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1590, i32 4, i32 31), !dbg !68
  %1593 = bitcast i32 %1592 to float, !dbg !68
  %1594 = fcmp olt float %1591, %1593, !dbg !70
  %1595 = fcmp uno float %1591, 0.000000e+00, !dbg !71
  %1596 = or i1 %1595, %1594, !dbg !72
  %1597 = select i1 %1596, float %1591, float %1593, !dbg !73
  %1598 = bitcast float %1597 to i32, !dbg !68
  %1599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1598, i32 2, i32 31), !dbg !68
  %1600 = bitcast i32 %1599 to float, !dbg !68
  %1601 = fcmp olt float %1597, %1600, !dbg !70
  %1602 = fcmp uno float %1597, 0.000000e+00, !dbg !71
  %1603 = or i1 %1601, %1602, !dbg !72
  %1604 = select i1 %1603, float %1597, float %1600, !dbg !73
  %1605 = bitcast float %1604 to i32, !dbg !68
  %1606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1605, i32 1, i32 31), !dbg !68
  %1607 = bitcast i32 %1606 to float, !dbg !68
  %1608 = fcmp olt float %1604, %1607, !dbg !70
  %1609 = fcmp uno float %1604, 0.000000e+00, !dbg !71
  %1610 = or i1 %1608, %1609, !dbg !72
  %1611 = select i1 %1610, i32 %1605, i32 %1606, !dbg !73
  %1612 = insertelement <1 x i32> poison, i32 %1611, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %1612, i1 %754) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1613 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %1614 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1615 = bitcast float %1613 to i32, !dbg !74
  %1616 = bitcast float %1614 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1615, i32 %1616, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1617 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1041, !dbg !74
  %1618 = load float, ptr addrspace(3) %1617, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1619 = fcmp ogt float %1152, %1153, !dbg !77
  %1620 = fcmp uno float %1152, 0.000000e+00, !dbg !78
  %1621 = or i1 %1619, %1620, !dbg !79
  %1622 = select i1 %1621, float %1152, float %1153, !dbg !80
  %1623 = fcmp ogt float %1622, %1173, !dbg !77
  %1624 = fcmp uno float %1622, 0.000000e+00, !dbg !78
  %1625 = or i1 %1623, %1624, !dbg !79
  %1626 = select i1 %1625, float %1622, float %1173, !dbg !80
  %1627 = fcmp ogt float %1626, %1174, !dbg !77
  %1628 = fcmp uno float %1626, 0.000000e+00, !dbg !78
  %1629 = or i1 %1627, %1628, !dbg !79
  %1630 = select i1 %1629, float %1626, float %1174, !dbg !80
  %1631 = fcmp ogt float %1630, %1194, !dbg !77
  %1632 = fcmp uno float %1630, 0.000000e+00, !dbg !78
  %1633 = or i1 %1631, %1632, !dbg !79
  %1634 = select i1 %1633, float %1630, float %1194, !dbg !80
  %1635 = fcmp ogt float %1634, %1195, !dbg !77
  %1636 = fcmp uno float %1634, 0.000000e+00, !dbg !78
  %1637 = or i1 %1635, %1636, !dbg !79
  %1638 = select i1 %1637, float %1634, float %1195, !dbg !80
  %1639 = fcmp ogt float %1638, %1215, !dbg !77
  %1640 = fcmp uno float %1638, 0.000000e+00, !dbg !78
  %1641 = or i1 %1639, %1640, !dbg !79
  %1642 = select i1 %1641, float %1638, float %1215, !dbg !80
  %1643 = fcmp ogt float %1642, %1216, !dbg !77
  %1644 = fcmp uno float %1642, 0.000000e+00, !dbg !78
  %1645 = or i1 %1643, %1644, !dbg !79
  %1646 = select i1 %1645, float %1642, float %1216, !dbg !80
  %1647 = fcmp ogt float %1646, %1236, !dbg !77
  %1648 = fcmp uno float %1646, 0.000000e+00, !dbg !78
  %1649 = or i1 %1647, %1648, !dbg !79
  %1650 = select i1 %1649, float %1646, float %1236, !dbg !80
  %1651 = fcmp ogt float %1650, %1237, !dbg !77
  %1652 = fcmp uno float %1650, 0.000000e+00, !dbg !78
  %1653 = or i1 %1651, %1652, !dbg !79
  %1654 = select i1 %1653, float %1650, float %1237, !dbg !80
  %1655 = fcmp ogt float %1654, %1257, !dbg !77
  %1656 = fcmp uno float %1654, 0.000000e+00, !dbg !78
  %1657 = or i1 %1655, %1656, !dbg !79
  %1658 = select i1 %1657, float %1654, float %1257, !dbg !80
  %1659 = fcmp ogt float %1658, %1258, !dbg !77
  %1660 = fcmp uno float %1658, 0.000000e+00, !dbg !78
  %1661 = or i1 %1659, %1660, !dbg !79
  %1662 = select i1 %1661, float %1658, float %1258, !dbg !80
  %1663 = fcmp ogt float %1662, %1278, !dbg !77
  %1664 = fcmp uno float %1662, 0.000000e+00, !dbg !78
  %1665 = or i1 %1663, %1664, !dbg !79
  %1666 = select i1 %1665, float %1662, float %1278, !dbg !80
  %1667 = fcmp ogt float %1666, %1279, !dbg !77
  %1668 = fcmp uno float %1666, 0.000000e+00, !dbg !78
  %1669 = or i1 %1667, %1668, !dbg !79
  %1670 = select i1 %1669, float %1666, float %1279, !dbg !80
  %1671 = fcmp ogt float %1670, %1299, !dbg !77
  %1672 = fcmp uno float %1670, 0.000000e+00, !dbg !78
  %1673 = or i1 %1671, %1672, !dbg !79
  %1674 = select i1 %1673, float %1670, float %1299, !dbg !80
  %1675 = fcmp ogt float %1674, %1300, !dbg !77
  %1676 = fcmp uno float %1674, 0.000000e+00, !dbg !78
  %1677 = or i1 %1675, %1676, !dbg !79
  %1678 = select i1 %1677, float %1674, float %1300, !dbg !80
  %1679 = fcmp ogt float %1309, %1310, !dbg !77
  %1680 = fcmp uno float %1309, 0.000000e+00, !dbg !78
  %1681 = or i1 %1679, %1680, !dbg !79
  %1682 = select i1 %1681, float %1309, float %1310, !dbg !80
  %1683 = fcmp ogt float %1682, %1319, !dbg !77
  %1684 = fcmp uno float %1682, 0.000000e+00, !dbg !78
  %1685 = or i1 %1683, %1684, !dbg !79
  %1686 = select i1 %1685, float %1682, float %1319, !dbg !80
  %1687 = fcmp ogt float %1686, %1320, !dbg !77
  %1688 = fcmp uno float %1686, 0.000000e+00, !dbg !78
  %1689 = or i1 %1687, %1688, !dbg !79
  %1690 = select i1 %1689, float %1686, float %1320, !dbg !80
  %1691 = fcmp ogt float %1690, %1329, !dbg !77
  %1692 = fcmp uno float %1690, 0.000000e+00, !dbg !78
  %1693 = or i1 %1691, %1692, !dbg !79
  %1694 = select i1 %1693, float %1690, float %1329, !dbg !80
  %1695 = fcmp ogt float %1694, %1330, !dbg !77
  %1696 = fcmp uno float %1694, 0.000000e+00, !dbg !78
  %1697 = or i1 %1695, %1696, !dbg !79
  %1698 = select i1 %1697, float %1694, float %1330, !dbg !80
  %1699 = fcmp ogt float %1698, %1339, !dbg !77
  %1700 = fcmp uno float %1698, 0.000000e+00, !dbg !78
  %1701 = or i1 %1699, %1700, !dbg !79
  %1702 = select i1 %1701, float %1698, float %1339, !dbg !80
  %1703 = fcmp ogt float %1702, %1340, !dbg !77
  %1704 = fcmp uno float %1702, 0.000000e+00, !dbg !78
  %1705 = or i1 %1703, %1704, !dbg !79
  %1706 = select i1 %1705, float %1702, float %1340, !dbg !80
  %1707 = fcmp ogt float %1706, %1349, !dbg !77
  %1708 = fcmp uno float %1706, 0.000000e+00, !dbg !78
  %1709 = or i1 %1707, %1708, !dbg !79
  %1710 = select i1 %1709, float %1706, float %1349, !dbg !80
  %1711 = fcmp ogt float %1710, %1350, !dbg !77
  %1712 = fcmp uno float %1710, 0.000000e+00, !dbg !78
  %1713 = or i1 %1711, %1712, !dbg !79
  %1714 = select i1 %1713, float %1710, float %1350, !dbg !80
  %1715 = fcmp ogt float %1714, %1359, !dbg !77
  %1716 = fcmp uno float %1714, 0.000000e+00, !dbg !78
  %1717 = or i1 %1715, %1716, !dbg !79
  %1718 = select i1 %1717, float %1714, float %1359, !dbg !80
  %1719 = fcmp ogt float %1718, %1360, !dbg !77
  %1720 = fcmp uno float %1718, 0.000000e+00, !dbg !78
  %1721 = or i1 %1719, %1720, !dbg !79
  %1722 = select i1 %1721, float %1718, float %1360, !dbg !80
  %1723 = fcmp ogt float %1722, %1369, !dbg !77
  %1724 = fcmp uno float %1722, 0.000000e+00, !dbg !78
  %1725 = or i1 %1723, %1724, !dbg !79
  %1726 = select i1 %1725, float %1722, float %1369, !dbg !80
  %1727 = fcmp ogt float %1726, %1370, !dbg !77
  %1728 = fcmp uno float %1726, 0.000000e+00, !dbg !78
  %1729 = or i1 %1727, %1728, !dbg !79
  %1730 = select i1 %1729, float %1726, float %1370, !dbg !80
  %1731 = fcmp ogt float %1730, %1379, !dbg !77
  %1732 = fcmp uno float %1730, 0.000000e+00, !dbg !78
  %1733 = or i1 %1731, %1732, !dbg !79
  %1734 = select i1 %1733, float %1730, float %1379, !dbg !80
  %1735 = fcmp ogt float %1734, %1380, !dbg !77
  %1736 = fcmp uno float %1734, 0.000000e+00, !dbg !78
  %1737 = or i1 %1735, %1736, !dbg !79
  %1738 = select i1 %1737, float %1734, float %1380, !dbg !80
  %1739 = bitcast float %1678 to i32, !dbg !75
  %1740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1739, i32 16, i32 31), !dbg !75
  %1741 = bitcast i32 %1740 to float, !dbg !75
  %1742 = fcmp ogt float %1678, %1741, !dbg !77
  %1743 = fcmp uno float %1678, 0.000000e+00, !dbg !78
  %1744 = or i1 %1742, %1743, !dbg !79
  %1745 = select i1 %1744, float %1678, float %1741, !dbg !80
  %1746 = bitcast float %1745 to i32, !dbg !75
  %1747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1746, i32 8, i32 31), !dbg !75
  %1748 = bitcast i32 %1747 to float, !dbg !75
  %1749 = fcmp ogt float %1745, %1748, !dbg !77
  %1750 = fcmp uno float %1745, 0.000000e+00, !dbg !78
  %1751 = or i1 %1749, %1750, !dbg !79
  %1752 = select i1 %1751, float %1745, float %1748, !dbg !80
  %1753 = bitcast float %1752 to i32, !dbg !75
  %1754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1753, i32 4, i32 31), !dbg !75
  %1755 = bitcast i32 %1754 to float, !dbg !75
  %1756 = fcmp ogt float %1752, %1755, !dbg !77
  %1757 = fcmp uno float %1752, 0.000000e+00, !dbg !78
  %1758 = or i1 %1756, %1757, !dbg !79
  %1759 = select i1 %1758, float %1752, float %1755, !dbg !80
  %1760 = bitcast float %1759 to i32, !dbg !75
  %1761 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1760, i32 2, i32 31), !dbg !75
  %1762 = bitcast i32 %1761 to float, !dbg !75
  %1763 = fcmp ogt float %1759, %1762, !dbg !77
  %1764 = fcmp uno float %1759, 0.000000e+00, !dbg !78
  %1765 = or i1 %1763, %1764, !dbg !79
  %1766 = select i1 %1765, float %1759, float %1762, !dbg !80
  %1767 = bitcast float %1766 to i32, !dbg !75
  %1768 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1767, i32 1, i32 31), !dbg !75
  %1769 = bitcast i32 %1768 to float, !dbg !75
  %1770 = fcmp ogt float %1766, %1769, !dbg !77
  %1771 = fcmp uno float %1766, 0.000000e+00, !dbg !78
  %1772 = or i1 %1770, %1771, !dbg !79
  %1773 = bitcast float %1738 to i32, !dbg !75
  %1774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1773, i32 16, i32 31), !dbg !75
  %1775 = bitcast i32 %1774 to float, !dbg !75
  %1776 = fcmp ogt float %1738, %1775, !dbg !77
  %1777 = fcmp uno float %1738, 0.000000e+00, !dbg !78
  %1778 = or i1 %1776, %1777, !dbg !79
  %1779 = select i1 %1778, float %1738, float %1775, !dbg !80
  %1780 = bitcast float %1779 to i32, !dbg !75
  %1781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1780, i32 8, i32 31), !dbg !75
  %1782 = bitcast i32 %1781 to float, !dbg !75
  %1783 = fcmp ogt float %1779, %1782, !dbg !77
  %1784 = fcmp uno float %1779, 0.000000e+00, !dbg !78
  %1785 = or i1 %1783, %1784, !dbg !79
  %1786 = select i1 %1785, float %1779, float %1782, !dbg !80
  %1787 = bitcast float %1786 to i32, !dbg !75
  %1788 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1787, i32 4, i32 31), !dbg !75
  %1789 = bitcast i32 %1788 to float, !dbg !75
  %1790 = fcmp ogt float %1786, %1789, !dbg !77
  %1791 = fcmp uno float %1786, 0.000000e+00, !dbg !78
  %1792 = or i1 %1790, %1791, !dbg !79
  %1793 = select i1 %1792, float %1786, float %1789, !dbg !80
  %1794 = bitcast float %1793 to i32, !dbg !75
  %1795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1794, i32 2, i32 31), !dbg !75
  %1796 = bitcast i32 %1795 to float, !dbg !75
  %1797 = fcmp ogt float %1793, %1796, !dbg !77
  %1798 = fcmp uno float %1793, 0.000000e+00, !dbg !78
  %1799 = or i1 %1797, %1798, !dbg !79
  %1800 = select i1 %1799, float %1793, float %1796, !dbg !80
  %1801 = bitcast float %1800 to i32, !dbg !75
  %1802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1801, i32 1, i32 31), !dbg !75
  %1803 = bitcast i32 %1802 to float, !dbg !75
  %1804 = fcmp ogt float %1800, %1803, !dbg !77
  %1805 = fcmp uno float %1800, 0.000000e+00, !dbg !78
  %1806 = or i1 %1804, %1805, !dbg !79
  %1807 = select i1 %1772, i32 %1767, i32 %1768, !dbg !80
  %1808 = insertelement <1 x i32> poison, i32 %1807, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %1808, i1 %668) #5, !dbg !75
  %1809 = select i1 %1806, i32 %1801, i32 %1802, !dbg !80
  %1810 = insertelement <1 x i32> poison, i32 %1809, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %676, <1 x i32> %1810, i1 %668) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1811 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %683, i1 %682) #5, !dbg !75
  %1812 = bitcast i32 %1811 to float, !dbg !75
  %1813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1811, i32 4, i32 31), !dbg !75
  %1814 = bitcast i32 %1813 to float, !dbg !75
  %1815 = fcmp ogt float %1812, %1814, !dbg !77
  %1816 = fcmp uno float %1812, 0.000000e+00, !dbg !78
  %1817 = or i1 %1816, %1815, !dbg !79
  %1818 = select i1 %1817, float %1812, float %1814, !dbg !80
  %1819 = bitcast float %1818 to i32, !dbg !75
  %1820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1819, i32 2, i32 31), !dbg !75
  %1821 = bitcast i32 %1820 to float, !dbg !75
  %1822 = fcmp ogt float %1818, %1821, !dbg !77
  %1823 = fcmp uno float %1818, 0.000000e+00, !dbg !78
  %1824 = or i1 %1822, %1823, !dbg !79
  %1825 = select i1 %1824, float %1818, float %1821, !dbg !80
  %1826 = bitcast float %1825 to i32, !dbg !75
  %1827 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1826, i32 1, i32 31), !dbg !75
  %1828 = bitcast i32 %1827 to float, !dbg !75
  %1829 = fcmp ogt float %1825, %1828, !dbg !77
  %1830 = fcmp uno float %1825, 0.000000e+00, !dbg !78
  %1831 = or i1 %1829, %1830, !dbg !79
  %1832 = select i1 %1831, i32 %1826, i32 %1827, !dbg !80
  %1833 = insertelement <1 x i32> poison, i32 %1832, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %1833, i1 %754) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1834 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %1835 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1836 = bitcast float %1834 to i32, !dbg !81
  %1837 = bitcast float %1835 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1836, i32 %1837, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1838 = load float, ptr addrspace(3) %1617, align 4, !dbg !81
  %1839 = sext i32 %1042 to i64, !dbg !82
  %1840 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1839, !dbg !82
  %1841 = fptrunc float %1618 to bfloat, !dbg !74
  %1842 = and i32 %21, 254, !dbg !74
  %1843 = icmp eq i32 %1842, 0, !dbg !74
  %1844 = bitcast bfloat %1841 to i16, !dbg !74
  %1845 = and i1 %1843, %1043, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1844, ptr addrspace(1) %1840, i1 %1845) #5, !dbg !74
  %1846 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1839, !dbg !83
  %1847 = fptrunc float %1838 to bfloat, !dbg !81
  %1848 = bitcast bfloat %1847 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1848, ptr addrspace(1) %1846, i1 %1845) #5, !dbg !81
  %1849 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1839, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1844, ptr addrspace(1) %1849, i1 %1845) #5, !dbg !85
  %1850 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1839, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1848, ptr addrspace(1) %1850, i1 %1845) #5, !dbg !87
  %1851 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1839, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1844, ptr addrspace(1) %1851, i1 %1845) #5, !dbg !89
  %1852 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1839, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1848, ptr addrspace(1) %1852, i1 %1845) #5, !dbg !91
  %1853 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1839, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1844, ptr addrspace(1) %1853, i1 %1845) #5, !dbg !93
  %1854 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1839, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1848, ptr addrspace(1) %1854, i1 %1845) #5, !dbg !95
  %1855 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1130, i1 %50) #5, !dbg !96
  %1856 = extractvalue { i32, i32, i32, i32 } %1855, 0, !dbg !96
  %1857 = bitcast i32 %1856 to <2 x bfloat>, !dbg !96
  %1858 = extractvalue { i32, i32, i32, i32 } %1855, 1, !dbg !96
  %1859 = bitcast i32 %1858 to <2 x bfloat>, !dbg !96
  %1860 = extractvalue { i32, i32, i32, i32 } %1855, 2, !dbg !96
  %1861 = bitcast i32 %1860 to <2 x bfloat>, !dbg !96
  %1862 = extractvalue { i32, i32, i32, i32 } %1855, 3, !dbg !96
  %1863 = bitcast i32 %1862 to <2 x bfloat>, !dbg !96
  %1864 = extractelement <2 x bfloat> %1857, i64 0, !dbg !96
  %1865 = extractelement <2 x bfloat> %1857, i64 1, !dbg !96
  %1866 = extractelement <2 x bfloat> %1859, i64 0, !dbg !96
  %1867 = extractelement <2 x bfloat> %1859, i64 1, !dbg !96
  %1868 = extractelement <2 x bfloat> %1861, i64 0, !dbg !96
  %1869 = extractelement <2 x bfloat> %1861, i64 1, !dbg !96
  %1870 = extractelement <2 x bfloat> %1863, i64 0, !dbg !96
  %1871 = extractelement <2 x bfloat> %1863, i64 1, !dbg !96
  %1872 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1131, i1 %50) #5, !dbg !96
  %1873 = extractvalue { i32, i32, i32, i32 } %1872, 0, !dbg !96
  %1874 = bitcast i32 %1873 to <2 x bfloat>, !dbg !96
  %1875 = extractvalue { i32, i32, i32, i32 } %1872, 1, !dbg !96
  %1876 = bitcast i32 %1875 to <2 x bfloat>, !dbg !96
  %1877 = extractvalue { i32, i32, i32, i32 } %1872, 2, !dbg !96
  %1878 = bitcast i32 %1877 to <2 x bfloat>, !dbg !96
  %1879 = extractvalue { i32, i32, i32, i32 } %1872, 3, !dbg !96
  %1880 = bitcast i32 %1879 to <2 x bfloat>, !dbg !96
  %1881 = extractelement <2 x bfloat> %1874, i64 0, !dbg !96
  %1882 = extractelement <2 x bfloat> %1874, i64 1, !dbg !96
  %1883 = extractelement <2 x bfloat> %1876, i64 0, !dbg !96
  %1884 = extractelement <2 x bfloat> %1876, i64 1, !dbg !96
  %1885 = extractelement <2 x bfloat> %1878, i64 0, !dbg !96
  %1886 = extractelement <2 x bfloat> %1878, i64 1, !dbg !96
  %1887 = extractelement <2 x bfloat> %1880, i64 0, !dbg !96
  %1888 = extractelement <2 x bfloat> %1880, i64 1, !dbg !96
  %1889 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1132, i1 %50) #5, !dbg !96
  %1890 = extractvalue { i32, i32, i32, i32 } %1889, 0, !dbg !96
  %1891 = bitcast i32 %1890 to <2 x bfloat>, !dbg !96
  %1892 = extractvalue { i32, i32, i32, i32 } %1889, 1, !dbg !96
  %1893 = bitcast i32 %1892 to <2 x bfloat>, !dbg !96
  %1894 = extractvalue { i32, i32, i32, i32 } %1889, 2, !dbg !96
  %1895 = bitcast i32 %1894 to <2 x bfloat>, !dbg !96
  %1896 = extractvalue { i32, i32, i32, i32 } %1889, 3, !dbg !96
  %1897 = bitcast i32 %1896 to <2 x bfloat>, !dbg !96
  %1898 = extractelement <2 x bfloat> %1891, i64 0, !dbg !96
  %1899 = extractelement <2 x bfloat> %1891, i64 1, !dbg !96
  %1900 = extractelement <2 x bfloat> %1893, i64 0, !dbg !96
  %1901 = extractelement <2 x bfloat> %1893, i64 1, !dbg !96
  %1902 = extractelement <2 x bfloat> %1895, i64 0, !dbg !96
  %1903 = extractelement <2 x bfloat> %1895, i64 1, !dbg !96
  %1904 = extractelement <2 x bfloat> %1897, i64 0, !dbg !96
  %1905 = extractelement <2 x bfloat> %1897, i64 1, !dbg !96
  %1906 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1133, i1 %50) #5, !dbg !96
  %1907 = extractvalue { i32, i32, i32, i32 } %1906, 0, !dbg !96
  %1908 = bitcast i32 %1907 to <2 x bfloat>, !dbg !96
  %1909 = extractvalue { i32, i32, i32, i32 } %1906, 1, !dbg !96
  %1910 = bitcast i32 %1909 to <2 x bfloat>, !dbg !96
  %1911 = extractvalue { i32, i32, i32, i32 } %1906, 2, !dbg !96
  %1912 = bitcast i32 %1911 to <2 x bfloat>, !dbg !96
  %1913 = extractvalue { i32, i32, i32, i32 } %1906, 3, !dbg !96
  %1914 = bitcast i32 %1913 to <2 x bfloat>, !dbg !96
  %1915 = extractelement <2 x bfloat> %1908, i64 0, !dbg !96
  %1916 = extractelement <2 x bfloat> %1908, i64 1, !dbg !96
  %1917 = extractelement <2 x bfloat> %1910, i64 0, !dbg !96
  %1918 = extractelement <2 x bfloat> %1910, i64 1, !dbg !96
  %1919 = extractelement <2 x bfloat> %1912, i64 0, !dbg !96
  %1920 = extractelement <2 x bfloat> %1912, i64 1, !dbg !96
  %1921 = extractelement <2 x bfloat> %1914, i64 0, !dbg !96
  %1922 = extractelement <2 x bfloat> %1914, i64 1, !dbg !96
  %1923 = fpext bfloat %1864 to float, !dbg !97
  %1924 = fpext bfloat %1865 to float, !dbg !97
  %1925 = fpext bfloat %1866 to float, !dbg !97
  %1926 = fpext bfloat %1867 to float, !dbg !97
  %1927 = fpext bfloat %1868 to float, !dbg !97
  %1928 = fpext bfloat %1869 to float, !dbg !97
  %1929 = fpext bfloat %1870 to float, !dbg !97
  %1930 = fpext bfloat %1871 to float, !dbg !97
  %1931 = fpext bfloat %1881 to float, !dbg !97
  %1932 = fpext bfloat %1882 to float, !dbg !97
  %1933 = fpext bfloat %1883 to float, !dbg !97
  %1934 = fpext bfloat %1884 to float, !dbg !97
  %1935 = fpext bfloat %1885 to float, !dbg !97
  %1936 = fpext bfloat %1886 to float, !dbg !97
  %1937 = fpext bfloat %1887 to float, !dbg !97
  %1938 = fpext bfloat %1888 to float, !dbg !97
  %1939 = fpext bfloat %1898 to float, !dbg !97
  %1940 = fpext bfloat %1899 to float, !dbg !97
  %1941 = fpext bfloat %1900 to float, !dbg !97
  %1942 = fpext bfloat %1901 to float, !dbg !97
  %1943 = fpext bfloat %1902 to float, !dbg !97
  %1944 = fpext bfloat %1903 to float, !dbg !97
  %1945 = fpext bfloat %1904 to float, !dbg !97
  %1946 = fpext bfloat %1905 to float, !dbg !97
  %1947 = fpext bfloat %1915 to float, !dbg !97
  %1948 = fpext bfloat %1916 to float, !dbg !97
  %1949 = fpext bfloat %1917 to float, !dbg !97
  %1950 = fpext bfloat %1918 to float, !dbg !97
  %1951 = fpext bfloat %1919 to float, !dbg !97
  %1952 = fpext bfloat %1920 to float, !dbg !97
  %1953 = fpext bfloat %1921 to float, !dbg !97
  %1954 = fpext bfloat %1922 to float, !dbg !97
  %.inv = fcmp oge float %1613, 0.000000e+00, !dbg !98
  %1955 = select i1 %.inv, float 0.000000e+00, float %1613, !dbg !98
  %.inv32 = fcmp oge float %1614, 0.000000e+00, !dbg !98
  %1956 = select i1 %.inv32, float 0.000000e+00, float %1614, !dbg !98
  %1957 = fsub float 0.000000e+00, %1955, !dbg !100
  %1958 = fsub float 0.000000e+00, %1956, !dbg !100
  %.inv33 = fcmp ole float %1834, 0.000000e+00, !dbg !101
  %1959 = select i1 %.inv33, float 0.000000e+00, float %1834, !dbg !101
  %.inv34 = fcmp ole float %1835, 0.000000e+00, !dbg !101
  %1960 = select i1 %.inv34, float 0.000000e+00, float %1835, !dbg !101
  %1961 = fcmp ogt float %1957, %1959, !dbg !103
  %1962 = fcmp ogt float %1958, %1960, !dbg !103
  %1963 = fcmp uno float %1957, 0.000000e+00, !dbg !105
  %1964 = fcmp uno float %1958, 0.000000e+00, !dbg !105
  %1965 = or i1 %1963, %1961, !dbg !106
  %1966 = or i1 %1964, %1962, !dbg !106
  %1967 = select i1 %1965, float %1957, float %1959, !dbg !107
  %1968 = select i1 %1966, float %1958, float %1960, !dbg !107
  %1969 = fmul float %1967, 0x3F80204080000000, !dbg !108
  %1970 = fmul float %1968, 0x3F80204080000000, !dbg !108
  %1971 = fcmp ogt float %1969, 0x3EE4F8B580000000, !dbg !109
  %1972 = fcmp ogt float %1970, 0x3EE4F8B580000000, !dbg !109
  %1973 = fcmp uno float %1969, 0.000000e+00, !dbg !111
  %1974 = fcmp uno float %1970, 0.000000e+00, !dbg !111
  %1975 = or i1 %1971, %1973, !dbg !112
  %1976 = or i1 %1972, %1974, !dbg !112
  %1977 = select i1 %1975, float %1969, float 0x3EE4F8B580000000, !dbg !113
  %1978 = select i1 %1976, float %1970, float 0x3EE4F8B580000000, !dbg !113
  %1979 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1977), !dbg !114
  %1980 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1978), !dbg !114
  %1981 = fmul float %1979, %1923, !dbg !115
  %1982 = fmul float %1979, %1924, !dbg !115
  %1983 = fmul float %1979, %1925, !dbg !115
  %1984 = fmul float %1979, %1926, !dbg !115
  %1985 = fmul float %1979, %1927, !dbg !115
  %1986 = fmul float %1979, %1928, !dbg !115
  %1987 = fmul float %1979, %1929, !dbg !115
  %1988 = fmul float %1979, %1930, !dbg !115
  %1989 = fmul float %1979, %1931, !dbg !115
  %1990 = fmul float %1979, %1932, !dbg !115
  %1991 = fmul float %1979, %1933, !dbg !115
  %1992 = fmul float %1979, %1934, !dbg !115
  %1993 = fmul float %1979, %1935, !dbg !115
  %1994 = fmul float %1979, %1936, !dbg !115
  %1995 = fmul float %1979, %1937, !dbg !115
  %1996 = fmul float %1979, %1938, !dbg !115
  %1997 = fmul float %1980, %1939, !dbg !115
  %1998 = fmul float %1980, %1940, !dbg !115
  %1999 = fmul float %1980, %1941, !dbg !115
  %2000 = fmul float %1980, %1942, !dbg !115
  %2001 = fmul float %1980, %1943, !dbg !115
  %2002 = fmul float %1980, %1944, !dbg !115
  %2003 = fmul float %1980, %1945, !dbg !115
  %2004 = fmul float %1980, %1946, !dbg !115
  %2005 = fmul float %1980, %1947, !dbg !115
  %2006 = fmul float %1980, %1948, !dbg !115
  %2007 = fmul float %1980, %1949, !dbg !115
  %2008 = fmul float %1980, %1950, !dbg !115
  %2009 = fmul float %1980, %1951, !dbg !115
  %2010 = fmul float %1980, %1952, !dbg !115
  %2011 = fmul float %1980, %1953, !dbg !115
  %2012 = fmul float %1980, %1954, !dbg !115
  %2013 = tail call float @llvm.nvvm.round.f(float %1981) #5, !dbg !116
  %2014 = tail call float @llvm.nvvm.round.f(float %1982) #5, !dbg !116
  %2015 = tail call float @llvm.nvvm.round.f(float %1983) #5, !dbg !116
  %2016 = tail call float @llvm.nvvm.round.f(float %1984) #5, !dbg !116
  %2017 = tail call float @llvm.nvvm.round.f(float %1985) #5, !dbg !116
  %2018 = tail call float @llvm.nvvm.round.f(float %1986) #5, !dbg !116
  %2019 = tail call float @llvm.nvvm.round.f(float %1987) #5, !dbg !116
  %2020 = tail call float @llvm.nvvm.round.f(float %1988) #5, !dbg !116
  %2021 = tail call float @llvm.nvvm.round.f(float %1989) #5, !dbg !116
  %2022 = tail call float @llvm.nvvm.round.f(float %1990) #5, !dbg !116
  %2023 = tail call float @llvm.nvvm.round.f(float %1991) #5, !dbg !116
  %2024 = tail call float @llvm.nvvm.round.f(float %1992) #5, !dbg !116
  %2025 = tail call float @llvm.nvvm.round.f(float %1993) #5, !dbg !116
  %2026 = tail call float @llvm.nvvm.round.f(float %1994) #5, !dbg !116
  %2027 = tail call float @llvm.nvvm.round.f(float %1995) #5, !dbg !116
  %2028 = tail call float @llvm.nvvm.round.f(float %1996) #5, !dbg !116
  %2029 = tail call float @llvm.nvvm.round.f(float %1997) #5, !dbg !116
  %2030 = tail call float @llvm.nvvm.round.f(float %1998) #5, !dbg !116
  %2031 = tail call float @llvm.nvvm.round.f(float %1999) #5, !dbg !116
  %2032 = tail call float @llvm.nvvm.round.f(float %2000) #5, !dbg !116
  %2033 = tail call float @llvm.nvvm.round.f(float %2001) #5, !dbg !116
  %2034 = tail call float @llvm.nvvm.round.f(float %2002) #5, !dbg !116
  %2035 = tail call float @llvm.nvvm.round.f(float %2003) #5, !dbg !116
  %2036 = tail call float @llvm.nvvm.round.f(float %2004) #5, !dbg !116
  %2037 = tail call float @llvm.nvvm.round.f(float %2005) #5, !dbg !116
  %2038 = tail call float @llvm.nvvm.round.f(float %2006) #5, !dbg !116
  %2039 = tail call float @llvm.nvvm.round.f(float %2007) #5, !dbg !116
  %2040 = tail call float @llvm.nvvm.round.f(float %2008) #5, !dbg !116
  %2041 = tail call float @llvm.nvvm.round.f(float %2009) #5, !dbg !116
  %2042 = tail call float @llvm.nvvm.round.f(float %2010) #5, !dbg !116
  %2043 = tail call float @llvm.nvvm.round.f(float %2011) #5, !dbg !116
  %2044 = tail call float @llvm.nvvm.round.f(float %2012) #5, !dbg !116
  %2045 = insertelement <4 x float> poison, float %2013, i64 0, !dbg !117
  %2046 = insertelement <4 x float> %2045, float %2014, i64 1, !dbg !117
  %2047 = insertelement <4 x float> %2046, float %2015, i64 2, !dbg !117
  %2048 = insertelement <4 x float> %2047, float %2016, i64 3, !dbg !117
  %2049 = fcmp ogt <4 x float> %2048, splat (float -1.270000e+02), !dbg !117
  %2050 = fcmp uno <4 x float> %2048, zeroinitializer, !dbg !119
  %2051 = or <4 x i1> %2049, %2050, !dbg !120
  %2052 = select <4 x i1> %2051, <4 x float> %2048, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2053 = fcmp olt <4 x float> %2052, splat (float 1.270000e+02), !dbg !122
  %2054 = fcmp uno <4 x float> %2052, zeroinitializer, !dbg !124
  %2055 = or <4 x i1> %2053, %2054, !dbg !125
  %2056 = fptosi <4 x float> %2052 to <4 x i8>, !dbg !126
  %2057 = select <4 x i1> %2055, <4 x i8> %2056, <4 x i8> splat (i8 127), !dbg !127
  %2058 = insertelement <4 x float> poison, float %2017, i64 0, !dbg !117
  %2059 = insertelement <4 x float> %2058, float %2018, i64 1, !dbg !117
  %2060 = insertelement <4 x float> %2059, float %2019, i64 2, !dbg !117
  %2061 = insertelement <4 x float> %2060, float %2020, i64 3, !dbg !117
  %2062 = fcmp ogt <4 x float> %2061, splat (float -1.270000e+02), !dbg !117
  %2063 = fcmp uno <4 x float> %2061, zeroinitializer, !dbg !119
  %2064 = or <4 x i1> %2062, %2063, !dbg !120
  %2065 = select <4 x i1> %2064, <4 x float> %2061, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2066 = fcmp olt <4 x float> %2065, splat (float 1.270000e+02), !dbg !122
  %2067 = fcmp uno <4 x float> %2065, zeroinitializer, !dbg !124
  %2068 = or <4 x i1> %2066, %2067, !dbg !125
  %2069 = fptosi <4 x float> %2065 to <4 x i8>, !dbg !126
  %2070 = select <4 x i1> %2068, <4 x i8> %2069, <4 x i8> splat (i8 127), !dbg !127
  %2071 = insertelement <4 x float> poison, float %2021, i64 0, !dbg !117
  %2072 = insertelement <4 x float> %2071, float %2022, i64 1, !dbg !117
  %2073 = insertelement <4 x float> %2072, float %2023, i64 2, !dbg !117
  %2074 = insertelement <4 x float> %2073, float %2024, i64 3, !dbg !117
  %2075 = fcmp ogt <4 x float> %2074, splat (float -1.270000e+02), !dbg !117
  %2076 = fcmp uno <4 x float> %2074, zeroinitializer, !dbg !119
  %2077 = or <4 x i1> %2075, %2076, !dbg !120
  %2078 = select <4 x i1> %2077, <4 x float> %2074, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2079 = fcmp olt <4 x float> %2078, splat (float 1.270000e+02), !dbg !122
  %2080 = fcmp uno <4 x float> %2078, zeroinitializer, !dbg !124
  %2081 = or <4 x i1> %2079, %2080, !dbg !125
  %2082 = fptosi <4 x float> %2078 to <4 x i8>, !dbg !126
  %2083 = select <4 x i1> %2081, <4 x i8> %2082, <4 x i8> splat (i8 127), !dbg !127
  %2084 = insertelement <4 x float> poison, float %2025, i64 0, !dbg !117
  %2085 = insertelement <4 x float> %2084, float %2026, i64 1, !dbg !117
  %2086 = insertelement <4 x float> %2085, float %2027, i64 2, !dbg !117
  %2087 = insertelement <4 x float> %2086, float %2028, i64 3, !dbg !117
  %2088 = fcmp ogt <4 x float> %2087, splat (float -1.270000e+02), !dbg !117
  %2089 = fcmp uno <4 x float> %2087, zeroinitializer, !dbg !119
  %2090 = or <4 x i1> %2088, %2089, !dbg !120
  %2091 = select <4 x i1> %2090, <4 x float> %2087, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2092 = fcmp olt <4 x float> %2091, splat (float 1.270000e+02), !dbg !122
  %2093 = fcmp uno <4 x float> %2091, zeroinitializer, !dbg !124
  %2094 = or <4 x i1> %2092, %2093, !dbg !125
  %2095 = fptosi <4 x float> %2091 to <4 x i8>, !dbg !126
  %2096 = select <4 x i1> %2094, <4 x i8> %2095, <4 x i8> splat (i8 127), !dbg !127
  %2097 = insertelement <4 x float> poison, float %2029, i64 0, !dbg !117
  %2098 = insertelement <4 x float> %2097, float %2030, i64 1, !dbg !117
  %2099 = insertelement <4 x float> %2098, float %2031, i64 2, !dbg !117
  %2100 = insertelement <4 x float> %2099, float %2032, i64 3, !dbg !117
  %2101 = fcmp ogt <4 x float> %2100, splat (float -1.270000e+02), !dbg !117
  %2102 = fcmp uno <4 x float> %2100, zeroinitializer, !dbg !119
  %2103 = or <4 x i1> %2101, %2102, !dbg !120
  %2104 = select <4 x i1> %2103, <4 x float> %2100, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2105 = fcmp olt <4 x float> %2104, splat (float 1.270000e+02), !dbg !122
  %2106 = fcmp uno <4 x float> %2104, zeroinitializer, !dbg !124
  %2107 = or <4 x i1> %2105, %2106, !dbg !125
  %2108 = fptosi <4 x float> %2104 to <4 x i8>, !dbg !126
  %2109 = select <4 x i1> %2107, <4 x i8> %2108, <4 x i8> splat (i8 127), !dbg !127
  %2110 = insertelement <4 x float> poison, float %2033, i64 0, !dbg !117
  %2111 = insertelement <4 x float> %2110, float %2034, i64 1, !dbg !117
  %2112 = insertelement <4 x float> %2111, float %2035, i64 2, !dbg !117
  %2113 = insertelement <4 x float> %2112, float %2036, i64 3, !dbg !117
  %2114 = fcmp ogt <4 x float> %2113, splat (float -1.270000e+02), !dbg !117
  %2115 = fcmp uno <4 x float> %2113, zeroinitializer, !dbg !119
  %2116 = or <4 x i1> %2114, %2115, !dbg !120
  %2117 = select <4 x i1> %2116, <4 x float> %2113, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2118 = fcmp olt <4 x float> %2117, splat (float 1.270000e+02), !dbg !122
  %2119 = fcmp uno <4 x float> %2117, zeroinitializer, !dbg !124
  %2120 = or <4 x i1> %2118, %2119, !dbg !125
  %2121 = fptosi <4 x float> %2117 to <4 x i8>, !dbg !126
  %2122 = select <4 x i1> %2120, <4 x i8> %2121, <4 x i8> splat (i8 127), !dbg !127
  %2123 = insertelement <4 x float> poison, float %2037, i64 0, !dbg !117
  %2124 = insertelement <4 x float> %2123, float %2038, i64 1, !dbg !117
  %2125 = insertelement <4 x float> %2124, float %2039, i64 2, !dbg !117
  %2126 = insertelement <4 x float> %2125, float %2040, i64 3, !dbg !117
  %2127 = fcmp ogt <4 x float> %2126, splat (float -1.270000e+02), !dbg !117
  %2128 = fcmp uno <4 x float> %2126, zeroinitializer, !dbg !119
  %2129 = or <4 x i1> %2127, %2128, !dbg !120
  %2130 = select <4 x i1> %2129, <4 x float> %2126, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2131 = fcmp olt <4 x float> %2130, splat (float 1.270000e+02), !dbg !122
  %2132 = fcmp uno <4 x float> %2130, zeroinitializer, !dbg !124
  %2133 = or <4 x i1> %2131, %2132, !dbg !125
  %2134 = fptosi <4 x float> %2130 to <4 x i8>, !dbg !126
  %2135 = select <4 x i1> %2133, <4 x i8> %2134, <4 x i8> splat (i8 127), !dbg !127
  %2136 = insertelement <4 x float> poison, float %2041, i64 0, !dbg !117
  %2137 = insertelement <4 x float> %2136, float %2042, i64 1, !dbg !117
  %2138 = insertelement <4 x float> %2137, float %2043, i64 2, !dbg !117
  %2139 = insertelement <4 x float> %2138, float %2044, i64 3, !dbg !117
  %2140 = fcmp ogt <4 x float> %2139, splat (float -1.270000e+02), !dbg !117
  %2141 = fcmp uno <4 x float> %2139, zeroinitializer, !dbg !119
  %2142 = or <4 x i1> %2140, %2141, !dbg !120
  %2143 = select <4 x i1> %2142, <4 x float> %2139, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2144 = fcmp olt <4 x float> %2143, splat (float 1.270000e+02), !dbg !122
  %2145 = fcmp uno <4 x float> %2143, zeroinitializer, !dbg !124
  %2146 = or <4 x i1> %2144, %2145, !dbg !125
  %2147 = fptosi <4 x float> %2143 to <4 x i8>, !dbg !126
  %2148 = select <4 x i1> %2146, <4 x i8> %2147, <4 x i8> splat (i8 127), !dbg !127
  %2149 = getelementptr i8, ptr addrspace(1) %12, i64 %42, !dbg !128
  %2150 = getelementptr i8, ptr addrspace(1) %12, i64 %46, !dbg !128
  %2151 = bitcast <4 x i8> %2057 to i32, !dbg !129
  %2152 = bitcast <4 x i8> %2070 to i32, !dbg !129
  %2153 = bitcast <4 x i8> %2083 to i32, !dbg !129
  %2154 = bitcast <4 x i8> %2096 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2151, i32 %2152, i32 %2153, i32 %2154, ptr addrspace(1) %2149, i1 %50) #5, !dbg !129
  %2155 = bitcast <4 x i8> %2109 to i32, !dbg !129
  %2156 = bitcast <4 x i8> %2122 to i32, !dbg !129
  %2157 = bitcast <4 x i8> %2135 to i32, !dbg !129
  %2158 = bitcast <4 x i8> %2148 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2155, i32 %2156, i32 %2157, i32 %2158, ptr addrspace(1) %2150, i1 %50) #5, !dbg !129
  %2159 = getelementptr i8, ptr addrspace(1) %13, i64 %42, !dbg !130
  %2160 = getelementptr i8, ptr addrspace(1) %13, i64 %46, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2151, i32 %2152, i32 %2153, i32 %2154, ptr addrspace(1) %2159, i1 %50) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2155, i32 %2156, i32 %2157, i32 %2158, ptr addrspace(1) %2160, i1 %50) #5, !dbg !131
  %2161 = getelementptr i8, ptr addrspace(1) %14, i64 %42, !dbg !132
  %2162 = getelementptr i8, ptr addrspace(1) %14, i64 %46, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2151, i32 %2152, i32 %2153, i32 %2154, ptr addrspace(1) %2161, i1 %50) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2155, i32 %2156, i32 %2157, i32 %2158, ptr addrspace(1) %2162, i1 %50) #5, !dbg !133
  %2163 = getelementptr i8, ptr addrspace(1) %15, i64 %42, !dbg !134
  %2164 = getelementptr i8, ptr addrspace(1) %15, i64 %46, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2151, i32 %2152, i32 %2153, i32 %2154, ptr addrspace(1) %2163, i1 %50) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2155, i32 %2156, i32 %2157, i32 %2158, ptr addrspace(1) %2164, i1 %50) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
