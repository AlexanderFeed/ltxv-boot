; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 2, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = and i32 %11, 3, !dbg !11
  %15 = or disjoint i32 %13, %10, !dbg !12
  %16 = icmp slt i32 %15, 4112, !dbg !13
  %17 = mul i32 %15, 3072, !dbg !14
  %18 = mul i32 %15, 12288, !dbg !15
  %19 = add i32 %18, -3072
  br label %20, !dbg !16

20:                                               ; preds = %8, %__nv_tanhf.exit22
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit22 ]
  %21 = phi float [ 0xFFF0000000000000, %8 ], [ %91, %__nv_tanhf.exit22 ]
  %22 = phi float [ 0x7FF0000000000000, %8 ], [ %86, %__nv_tanhf.exit22 ]
  %23 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !17
  %24 = trunc i64 %indvars.iv to i32, !dbg !18
  %25 = or disjoint i32 %14, %24, !dbg !18
  %26 = add i32 %25, %17, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = and i1 %16, %23, !dbg !20
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 %29) #5, !dbg !21
  %31 = bitcast i16 %30 to bfloat, !dbg !21
  %32 = fpext bfloat %31 to float, !dbg !22
  %33 = icmp samesign ugt i64 %indvars.iv, 3071, !dbg !23
  %34 = add i32 %19, %25, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = and i1 %16, %33, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = fmul float %39, 5.000000e-01, !dbg !28
  %41 = fmul float %39, %39, !dbg !29
  %42 = fmul float %41, %39, !dbg !30
  %43 = fmul float %42, 0x3FA6E4E260000000, !dbg !31
  %44 = fadd float %43, %39, !dbg !32
  %45 = fmul float %44, 0x3FE9884540000000, !dbg !33
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i4 = icmp eq i32 %46, 0, !dbg !34
  %47 = tail call float @llvm.nvvm.fabs.ftz.f(float %45) #5, !dbg !34
  %48 = tail call float @llvm.nvvm.fabs.f(float %45) #5, !dbg !34
  %.01.i5 = select i1 %.not.i4, float %48, float %47, !dbg !34
  %49 = fcmp ult float %.01.i5, 0x3FE3333340000000, !dbg !34
  br i1 %49, label %__internal_fmad.exit3.i11, label %__internal_fmad.exit1.i6, !dbg !34

__internal_fmad.exit1.i6:                         ; preds = %20
  %50 = fmul float %.01.i5, 0x4007154760000000, !dbg !34
  %51 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %50) #5, !dbg !34
  %52 = fadd float %51, 1.000000e+00, !dbg !34
  %53 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %52) #6, !dbg !34, !srcloc !35
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not6.i7 = icmp eq i32 %54, 0, !dbg !34
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %53, float -2.000000e+00, float 1.000000e+00) #5, !dbg !34
  %56 = tail call float @llvm.nvvm.fma.rn.f(float %53, float -2.000000e+00, float 1.000000e+00) #5, !dbg !34
  %.03.i8 = select i1 %.not6.i7, float %56, float %55, !dbg !34
  %57 = fcmp oge float %.01.i5, 0x4022059680000000, !dbg !34
  %s.0.i9 = select i1 %57, float 1.000000e+00, float %.03.i8, !dbg !34
  %58 = bitcast float %s.0.i9 to i32, !dbg !34
  %59 = bitcast float %45 to i32, !dbg !34
  %60 = and i32 %59, -2147483648, !dbg !34
  %61 = or i32 %60, %58, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  br label %__nv_tanhf.exit22, !dbg !34

__internal_fmad.exit3.i11:                        ; preds = %20
  %63 = fmul float %45, %45, !dbg !34
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not1.i12 = icmp eq i32 %64, 0, !dbg !34
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %63, float 0xBFAAC795C0000000) #5, !dbg !34
  %66 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %63, float 0xBFAAC795C0000000) #5, !dbg !34
  %.06.i13 = select i1 %.not1.i12, float %66, float %65, !dbg !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not2.i14 = icmp eq i32 %67, 0, !dbg !34
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i13, float %63, float 0x3FC10B2820000000) #5, !dbg !34
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i13, float %63, float 0x3FC10B2820000000) #5, !dbg !34
  %.05.i15 = select i1 %.not2.i14, float %69, float %68, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not3.i16 = icmp eq i32 %70, 0, !dbg !34
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %63, float 0xBFD5553DA0000000) #5, !dbg !34
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %63, float 0xBFD5553DA0000000) #5, !dbg !34
  %.0.i17 = select i1 %.not3.i16, float %72, float %71, !dbg !34
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not4.i18 = icmp eq i32 %73, 0, !dbg !34
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i17, float %63, float 0.000000e+00) #5, !dbg !34
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i17, float %63, float 0.000000e+00) #5, !dbg !34
  %.04.i19 = select i1 %.not4.i18, float %75, float %74, !dbg !34
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not5.i20 = icmp eq i32 %76, 0, !dbg !34
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i19, float %45, float %45) #5, !dbg !34
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i19, float %45, float %45) #5, !dbg !34
  %.02.i21 = select i1 %.not5.i20, float %78, float %77, !dbg !34
  br label %__nv_tanhf.exit22, !dbg !34

__nv_tanhf.exit22:                                ; preds = %__internal_fmad.exit1.i6, %__internal_fmad.exit3.i11
  %s.1.i10 = phi float [ %62, %__internal_fmad.exit1.i6 ], [ %.02.i21, %__internal_fmad.exit3.i11 ], !dbg !34
  %79 = fadd float %s.1.i10, 1.000000e+00, !dbg !36
  %80 = fmul float %40, %79, !dbg !37
  %81 = select i1 %23, float %32, float %80, !dbg !38
  %82 = fcmp olt float %22, %81, !dbg !39
  %83 = fcmp uno float %22, 0.000000e+00, !dbg !43
  %84 = or i1 %83, %82, !dbg !44
  %85 = select i1 %84, float %22, float %81, !dbg !45
  %86 = select i1 %16, float %85, float %22, !dbg !46
  %87 = fcmp ogt float %21, %81, !dbg !47
  %88 = fcmp uno float %21, 0.000000e+00, !dbg !49
  %89 = or i1 %88, %87, !dbg !50
  %90 = select i1 %89, float %21, float %81, !dbg !51
  %91 = select i1 %16, float %90, float %21, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !16
  %92 = icmp samesign ult i64 %indvars.iv, 15356, !dbg !16
  br i1 %92, label %20, label %93, !dbg !16

93:                                               ; preds = %__nv_tanhf.exit22
  %94 = and i32 %11, 63, !dbg !11
  %95 = or disjoint i32 %10, %94, !dbg !12
  %96 = icmp slt i32 %95, 4112, !dbg !13
  %97 = bitcast float %86 to i32, !dbg !53
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !53
  %99 = bitcast i32 %98 to float, !dbg !53
  %100 = fcmp olt float %86, %99, !dbg !55
  %101 = fcmp uno float %86, 0.000000e+00, !dbg !57
  %102 = or i1 %101, %100, !dbg !58
  %103 = select i1 %102, float %86, float %99, !dbg !59
  %104 = bitcast float %103 to i32, !dbg !53
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !53
  %106 = bitcast i32 %105 to float, !dbg !53
  %107 = fcmp olt float %103, %106, !dbg !55
  %108 = fcmp uno float %103, 0.000000e+00, !dbg !57
  %109 = or i1 %107, %108, !dbg !58
  %110 = select i1 %109, float %103, float %106, !dbg !59
  %111 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !60
  %112 = bitcast float %110 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %94, !dbg !60
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !60
  %115 = bitcast float %91 to i32, !dbg !61
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !61
  %117 = bitcast i32 %116 to float, !dbg !61
  %118 = fcmp ogt float %91, %117, !dbg !63
  %119 = fcmp uno float %91, 0.000000e+00, !dbg !64
  %120 = or i1 %119, %118, !dbg !65
  %121 = select i1 %120, float %91, float %117, !dbg !66
  %122 = bitcast float %121 to i32, !dbg !61
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !61
  %124 = bitcast i32 %123 to float, !dbg !61
  %125 = fcmp ogt float %121, %124, !dbg !63
  %126 = fcmp uno float %121, 0.000000e+00, !dbg !64
  %127 = or i1 %125, %126, !dbg !65
  %128 = select i1 %127, float %121, float %124, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %129 = bitcast float %128 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %129, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %130 = load float, ptr addrspace(3) %113, align 4, !dbg !67
  %131 = sext i32 %95 to i64, !dbg !68
  %132 = getelementptr bfloat, ptr addrspace(1) %2, i64 %131, !dbg !68
  %133 = fptrunc float %114 to bfloat, !dbg !60
  %134 = and i32 %11, 192, !dbg !60
  %135 = icmp eq i32 %134, 0, !dbg !60
  %136 = bitcast bfloat %133 to i16, !dbg !60
  %137 = and i1 %135, %96, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %136, ptr addrspace(1) %132, i1 %137) #5, !dbg !60
  %138 = getelementptr bfloat, ptr addrspace(1) %3, i64 %131, !dbg !69
  %139 = fptrunc float %130 to bfloat, !dbg !67
  %140 = bitcast bfloat %139 to i16, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %140, ptr addrspace(1) %138, i1 %137) #5, !dbg !67
  %.inv = fcmp oge float %110, 0.000000e+00, !dbg !70
  %141 = select i1 %.inv, float 0.000000e+00, float %110, !dbg !70
  %142 = fsub float 0.000000e+00, %141, !dbg !72
  %.inv3 = fcmp ole float %128, 0.000000e+00, !dbg !73
  %143 = select i1 %.inv3, float 0.000000e+00, float %128, !dbg !73
  %144 = fcmp ogt float %142, %143, !dbg !75
  %145 = fcmp uno float %142, 0.000000e+00, !dbg !77
  %146 = or i1 %145, %144, !dbg !78
  %147 = select i1 %146, float %142, float %143, !dbg !79
  %148 = fmul float %147, 0x3F80204080000000, !dbg !80
  %149 = fcmp ogt float %148, 0x3EE4F8B580000000, !dbg !81
  %150 = fcmp uno float %148, 0.000000e+00, !dbg !83
  %151 = or i1 %149, %150, !dbg !84
  %152 = select i1 %151, float %148, float 0x3EE4F8B580000000, !dbg !85
  %153 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %152), !dbg !86
  %154 = mul i32 %15, 15360, !dbg !87
  br label %155, !dbg !88

155:                                              ; preds = %93, %__nv_tanhf.exit
  %indvars.iv25 = phi i64 [ 0, %93 ], [ %indvars.iv.next26, %__nv_tanhf.exit ]
  %156 = icmp samesign ult i64 %indvars.iv25, 3072, !dbg !89
  %157 = trunc i64 %indvars.iv25 to i32, !dbg !90
  %158 = or disjoint i32 %14, %157, !dbg !90
  %159 = add i32 %158, %17, !dbg !90
  %160 = sext i32 %159 to i64, !dbg !91
  %161 = getelementptr bfloat, ptr addrspace(1) %0, i64 %160, !dbg !91
  %162 = and i1 %16, %156, !dbg !92
  %163 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %161, i1 %162) #5, !dbg !93
  %164 = bitcast i16 %163 to bfloat, !dbg !93
  %165 = fpext bfloat %164 to float, !dbg !94
  %166 = icmp samesign ugt i64 %indvars.iv25, 3071, !dbg !95
  %167 = add i32 %19, %158, !dbg !96
  %168 = sext i32 %167 to i64, !dbg !97
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !97
  %170 = and i1 %16, %166, !dbg !98
  %171 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %169, i1 %170) #5, !dbg !99
  %172 = bitcast i32 %171 to float, !dbg !99
  %173 = fmul float %172, 5.000000e-01, !dbg !100
  %174 = fmul float %172, %172, !dbg !101
  %175 = fmul float %174, %172, !dbg !102
  %176 = fmul float %175, 0x3FA6E4E260000000, !dbg !103
  %177 = fadd float %176, %172, !dbg !104
  %178 = fmul float %177, 0x3FE9884540000000, !dbg !105
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not.i = icmp eq i32 %179, 0, !dbg !106
  %180 = tail call float @llvm.nvvm.fabs.ftz.f(float %178) #5, !dbg !106
  %181 = tail call float @llvm.nvvm.fabs.f(float %178) #5, !dbg !106
  %.01.i = select i1 %.not.i, float %181, float %180, !dbg !106
  %182 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !106
  br i1 %182, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !106

__internal_fmad.exit1.i:                          ; preds = %155
  %183 = fmul float %.01.i, 0x4007154760000000, !dbg !106
  %184 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %183) #5, !dbg !106
  %185 = fadd float %184, 1.000000e+00, !dbg !106
  %186 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %185) #6, !dbg !106, !srcloc !35
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not6.i = icmp eq i32 %187, 0, !dbg !106
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %186, float -2.000000e+00, float 1.000000e+00) #5, !dbg !106
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %186, float -2.000000e+00, float 1.000000e+00) #5, !dbg !106
  %.03.i = select i1 %.not6.i, float %189, float %188, !dbg !106
  %190 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !106
  %s.0.i = select i1 %190, float 1.000000e+00, float %.03.i, !dbg !106
  %191 = bitcast float %s.0.i to i32, !dbg !106
  %192 = bitcast float %178 to i32, !dbg !106
  %193 = and i32 %192, -2147483648, !dbg !106
  %194 = or i32 %193, %191, !dbg !106
  %195 = bitcast i32 %194 to float, !dbg !106
  br label %__nv_tanhf.exit, !dbg !106

__internal_fmad.exit3.i:                          ; preds = %155
  %196 = fmul float %178, %178, !dbg !106
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not1.i = icmp eq i32 %197, 0, !dbg !106
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %196, float 0xBFAAC795C0000000) #5, !dbg !106
  %199 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %196, float 0xBFAAC795C0000000) #5, !dbg !106
  %.06.i = select i1 %.not1.i, float %199, float %198, !dbg !106
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not2.i = icmp eq i32 %200, 0, !dbg !106
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %196, float 0x3FC10B2820000000) #5, !dbg !106
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %196, float 0x3FC10B2820000000) #5, !dbg !106
  %.05.i = select i1 %.not2.i, float %202, float %201, !dbg !106
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not3.i = icmp eq i32 %203, 0, !dbg !106
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %196, float 0xBFD5553DA0000000) #5, !dbg !106
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %196, float 0xBFD5553DA0000000) #5, !dbg !106
  %.0.i = select i1 %.not3.i, float %205, float %204, !dbg !106
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not4.i = icmp eq i32 %206, 0, !dbg !106
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %196, float 0.000000e+00) #5, !dbg !106
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %196, float 0.000000e+00) #5, !dbg !106
  %.04.i = select i1 %.not4.i, float %208, float %207, !dbg !106
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not5.i = icmp eq i32 %209, 0, !dbg !106
  %210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %178, float %178) #5, !dbg !106
  %211 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %178, float %178) #5, !dbg !106
  %.02.i = select i1 %.not5.i, float %211, float %210, !dbg !106
  br label %__nv_tanhf.exit, !dbg !106

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %195, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !106
  %212 = fadd float %s.1.i, 1.000000e+00, !dbg !107
  %213 = fmul float %173, %212, !dbg !108
  %214 = select i1 %156, float %165, float %213, !dbg !109
  %215 = fmul float %153, %214, !dbg !110
  %216 = tail call float @llvm.nvvm.round.f(float %215) #5, !dbg !111
  %217 = fcmp ogt float %216, -1.270000e+02, !dbg !112
  %218 = fcmp uno float %216, 0.000000e+00, !dbg !114
  %219 = or i1 %217, %218, !dbg !115
  %220 = select i1 %219, float %216, float -1.270000e+02, !dbg !116
  %221 = fcmp olt float %220, 1.270000e+02, !dbg !117
  %222 = fcmp uno float %220, 0.000000e+00, !dbg !119
  %223 = or i1 %221, %222, !dbg !120
  %224 = fptosi float %220 to i8, !dbg !121
  %225 = select i1 %223, i8 %224, i8 127, !dbg !122
  %226 = add i32 %158, %154, !dbg !123
  %227 = sext i32 %226 to i64, !dbg !124
  %228 = getelementptr i8, ptr addrspace(1) %4, i64 %227, !dbg !124
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %225, ptr addrspace(1) %228, i1 %16) #5, !dbg !125
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 4, !dbg !88
  %229 = icmp samesign ult i64 %indvars.iv25, 15356, !dbg !88
  br i1 %229, label %155, label %230, !dbg !88

230:                                              ; preds = %__nv_tanhf.exit
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 42, column: 39, scope: !6)
!15 = !DILocation(line: 46, column: 40, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 41, column: 22, scope: !6)
!18 = !DILocation(line: 42, column: 45, scope: !6)
!19 = !DILocation(line: 42, column: 34, scope: !6)
!20 = !DILocation(line: 42, column: 71, scope: !6)
!21 = !DILocation(line: 42, column: 53, scope: !6)
!22 = !DILocation(line: 42, column: 121, scope: !6)
!23 = !DILocation(line: 43, column: 23, scope: !6)
!24 = !DILocation(line: 46, column: 46, scope: !6)
!25 = !DILocation(line: 46, column: 34, scope: !6)
!26 = !DILocation(line: 46, column: 82, scope: !6)
!27 = !DILocation(line: 46, column: 64, scope: !6)
!28 = !DILocation(line: 48, column: 23, scope: !6)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 50, column: 24, scope: !6)
!31 = !DILocation(line: 52, column: 24, scope: !6)
!32 = !DILocation(line: 53, column: 23, scope: !6)
!33 = !DILocation(line: 55, column: 24, scope: !6)
!34 = !DILocation(line: 56, column: 31, scope: !6)
!35 = !{i32 21046}
!36 = !DILocation(line: 58, column: 24, scope: !6)
!37 = !DILocation(line: 59, column: 24, scope: !6)
!38 = !DILocation(line: 63, column: 37, scope: !6)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 65, column: 47, scope: !6)
!43 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 66, column: 50, scope: !6)
!47 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !48)
!48 = !DILocation(line: 67, column: 47, scope: !6)
!49 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !48)
!50 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !48)
!51 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !48)
!52 = !DILocation(line: 68, column: 50, scope: !6)
!53 = !DILocation(line: 110, column: 29, scope: !40, inlinedAt: !54)
!54 = !DILocation(line: 69, column: 40, scope: !6)
!55 = !DILocation(line: 94, column: 15, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!57 = !DILocation(line: 96, column: 21, scope: !56, inlinedAt: !54)
!58 = !DILocation(line: 96, column: 16, scope: !56, inlinedAt: !54)
!59 = !DILocation(line: 97, column: 29, scope: !56, inlinedAt: !54)
!60 = !DILocation(line: 71, column: 37, scope: !6)
!61 = !DILocation(line: 115, column: 29, scope: !40, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 40, scope: !6)
!63 = !DILocation(line: 102, column: 15, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 21, scope: !56, inlinedAt: !62)
!65 = !DILocation(line: 104, column: 16, scope: !56, inlinedAt: !62)
!66 = !DILocation(line: 105, column: 29, scope: !56, inlinedAt: !62)
!67 = !DILocation(line: 72, column: 37, scope: !6)
!68 = !DILocation(line: 71, column: 25, scope: !6)
!69 = !DILocation(line: 72, column: 25, scope: !6)
!70 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !71)
!71 = !DILocation(line: 107, column: 46, scope: !6)
!72 = !DILocation(line: 108, column: 17, scope: !6)
!73 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !74)
!74 = !DILocation(line: 109, column: 46, scope: !6)
!75 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !76)
!76 = !DILocation(line: 110, column: 46, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !76)
!79 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !76)
!80 = !DILocation(line: 112, column: 24, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !82)
!82 = !DILocation(line: 115, column: 46, scope: !6)
!83 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !82)
!85 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 25, scope: !6)
!87 = !DILocation(line: 130, column: 42, scope: !6)
!88 = !DILocation(line: 73, column: 40, scope: !6)
!89 = !DILocation(line: 83, column: 24, scope: !6)
!90 = !DILocation(line: 84, column: 46, scope: !6)
!91 = !DILocation(line: 84, column: 35, scope: !6)
!92 = !DILocation(line: 84, column: 72, scope: !6)
!93 = !DILocation(line: 84, column: 54, scope: !6)
!94 = !DILocation(line: 84, column: 123, scope: !6)
!95 = !DILocation(line: 85, column: 25, scope: !6)
!96 = !DILocation(line: 88, column: 47, scope: !6)
!97 = !DILocation(line: 88, column: 35, scope: !6)
!98 = !DILocation(line: 88, column: 83, scope: !6)
!99 = !DILocation(line: 88, column: 65, scope: !6)
!100 = !DILocation(line: 90, column: 24, scope: !6)
!101 = !DILocation(line: 91, column: 24, scope: !6)
!102 = !DILocation(line: 92, column: 24, scope: !6)
!103 = !DILocation(line: 94, column: 24, scope: !6)
!104 = !DILocation(line: 95, column: 24, scope: !6)
!105 = !DILocation(line: 97, column: 24, scope: !6)
!106 = !DILocation(line: 98, column: 31, scope: !6)
!107 = !DILocation(line: 100, column: 24, scope: !6)
!108 = !DILocation(line: 101, column: 24, scope: !6)
!109 = !DILocation(line: 105, column: 39, scope: !6)
!110 = !DILocation(line: 121, column: 24, scope: !6)
!111 = !DILocation(line: 122, column: 36, scope: !6)
!112 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !113)
!113 = !DILocation(line: 125, column: 46, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !113)
!115 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !113)
!116 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !113)
!117 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !118)
!118 = !DILocation(line: 127, column: 46, scope: !6)
!119 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !118)
!120 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !118)
!121 = !DILocation(line: 129, column: 25, scope: !6)
!122 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !118)
!123 = !DILocation(line: 130, column: 36, scope: !6)
!124 = !DILocation(line: 130, column: 29, scope: !6)
!125 = !DILocation(line: 130, column: 54, scope: !6)
!126 = !DILocation(line: 73, column: 4, scope: !6)
