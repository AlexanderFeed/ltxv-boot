; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, ptr addrspace(1) readnone captures(none) %10) local_unnamed_addr !dbg !6 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %13 = shl i32 %12, 10, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = shl i32 %14, 2, !dbg !11
  %16 = and i32 %15, 1020, !dbg !11
  %17 = or disjoint i32 %16, %13, !dbg !12
  %18 = sdiv i32 %17, 3072, !dbg !13
  %19 = mul i32 %18, 3072, !dbg !14
  %.decomposed = sub i32 %17, %19, !dbg !14
  %20 = sext i32 %17 to i64, !dbg !15
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %21) #1, !dbg !16
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = extractvalue { i32, i32 } %22, 1, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = add nsw i32 %.decomposed, 6144, !dbg !17
  %28 = zext nneg i32 %27 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %29) #1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %35 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %35) #1, !dbg !21
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !21
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !21
  %41 = getelementptr i32, ptr addrspace(1) %3, i64 %20, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %41) #1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = sext i32 %18 to i64, !dbg !24
  %48 = getelementptr bfloat, ptr addrspace(1) %4, i64 %47, !dbg !24
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #1, !dbg !25
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #1, !dbg !25
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #1, !dbg !25
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #1, !dbg !25
  %53 = getelementptr bfloat, ptr addrspace(1) %5, i64 %47, !dbg !26
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %53) #1, !dbg !27
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %53) #1, !dbg !27
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %53) #1, !dbg !27
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %53) #1, !dbg !27
  %58 = sext i32 %.decomposed to i64, !dbg !28
  %59 = getelementptr bfloat, ptr addrspace(1) %6, i64 %58, !dbg !28
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %59) #1, !dbg !29
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !29
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !29
  %63 = extractvalue { i32, i32 } %60, 1, !dbg !29
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !29
  %65 = getelementptr bfloat, ptr addrspace(1) %7, i64 %58, !dbg !30
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %65) #1, !dbg !31
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !31
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !31
  %69 = extractvalue { i32, i32 } %66, 1, !dbg !31
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !31
  %71 = insertelement <2 x i16> poison, i16 %49, i64 0, !dbg !25
  %72 = insertelement <2 x i16> %71, i16 %50, i64 1, !dbg !25
  %73 = bitcast <2 x i16> %72 to <2 x bfloat>, !dbg !25
  %74 = fcmp oge <2 x bfloat> %73, zeroinitializer, !dbg !32
  %75 = select <2 x i1> %74, <2 x bfloat> zeroinitializer, <2 x bfloat> %73, !dbg !32
  %76 = fpext <2 x bfloat> %75 to <2 x float>, !dbg !32
  %77 = fsub <2 x float> zeroinitializer, %76, !dbg !36
  %78 = insertelement <2 x i16> poison, i16 %51, i64 0, !dbg !25
  %79 = insertelement <2 x i16> %78, i16 %52, i64 1, !dbg !25
  %80 = bitcast <2 x i16> %79 to <2 x bfloat>, !dbg !25
  %81 = fcmp oge <2 x bfloat> %80, zeroinitializer, !dbg !32
  %82 = select <2 x i1> %81, <2 x bfloat> zeroinitializer, <2 x bfloat> %80, !dbg !32
  %83 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !32
  %84 = fsub <2 x float> zeroinitializer, %83, !dbg !36
  %85 = insertelement <2 x i16> poison, i16 %54, i64 0, !dbg !27
  %86 = insertelement <2 x i16> %85, i16 %55, i64 1, !dbg !27
  %87 = bitcast <2 x i16> %86 to <2 x bfloat>, !dbg !27
  %88 = fcmp ole <2 x bfloat> %87, zeroinitializer, !dbg !37
  %89 = select <2 x i1> %88, <2 x bfloat> zeroinitializer, <2 x bfloat> %87, !dbg !37
  %90 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !37
  %91 = insertelement <2 x i16> poison, i16 %56, i64 0, !dbg !27
  %92 = insertelement <2 x i16> %91, i16 %57, i64 1, !dbg !27
  %93 = bitcast <2 x i16> %92 to <2 x bfloat>, !dbg !27
  %94 = fcmp ole <2 x bfloat> %93, zeroinitializer, !dbg !37
  %95 = select <2 x i1> %94, <2 x bfloat> zeroinitializer, <2 x bfloat> %93, !dbg !37
  %96 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !37
  %97 = fcmp ogt <2 x float> %77, %90, !dbg !39
  %98 = fcmp uno <2 x float> %77, zeroinitializer, !dbg !41
  %99 = or <2 x i1> %98, %97, !dbg !42
  %100 = fcmp ogt <2 x float> %84, %96, !dbg !39
  %101 = fcmp uno <2 x float> %84, zeroinitializer, !dbg !41
  %102 = or <2 x i1> %101, %100, !dbg !42
  %103 = getelementptr bfloat, ptr addrspace(1) %8, i64 %20, !dbg !43
  %104 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !44
  %105 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %106 = insertelement <2 x i32> %105, i32 %32, i64 1, !dbg !19
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !19
  %108 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !45
  %109 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !46
  %110 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !47
  %111 = fadd <2 x float> %107, %108, !dbg !48
  %112 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !49
  %113 = insertelement <2 x i32> %112, i32 %44, i64 1, !dbg !49
  %114 = sitofp <2 x i32> %113 to <2 x float>, !dbg !49
  %115 = select <2 x i1> %99, <2 x float> %77, <2 x float> %90, !dbg !50
  %116 = fmul <2 x float> %115, splat (float 0x3F80204080000000), !dbg !51
  %117 = fcmp ogt <2 x float> %116, splat (float 0x3EE4F8B580000000), !dbg !52
  %118 = fcmp uno <2 x float> %116, zeroinitializer, !dbg !54
  %119 = or <2 x i1> %117, %118, !dbg !55
  %120 = select <2 x i1> %119, <2 x float> %116, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %121 = fmul <2 x float> %120, %114, !dbg !57
  %122 = fmul <2 x float> %121, %109, !dbg !58
  %123 = fadd <2 x float> %122, %110, !dbg !59
  %124 = fmul <2 x float> %111, %123, !dbg !60
  %125 = fadd <2 x float> %124, %104, !dbg !61
  %126 = fptrunc <2 x float> %125 to <2 x bfloat>, !dbg !62
  %127 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !44
  %128 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %129 = insertelement <2 x i32> %128, i32 %34, i64 1, !dbg !19
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !19
  %131 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !45
  %132 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !46
  %133 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !47
  %134 = fadd <2 x float> %130, %131, !dbg !48
  %135 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !49
  %136 = insertelement <2 x i32> %135, i32 %46, i64 1, !dbg !49
  %137 = sitofp <2 x i32> %136 to <2 x float>, !dbg !49
  %138 = select <2 x i1> %102, <2 x float> %84, <2 x float> %96, !dbg !50
  %139 = fmul <2 x float> %138, splat (float 0x3F80204080000000), !dbg !51
  %140 = fcmp ogt <2 x float> %139, splat (float 0x3EE4F8B580000000), !dbg !52
  %141 = fcmp uno <2 x float> %139, zeroinitializer, !dbg !54
  %142 = or <2 x i1> %140, %141, !dbg !55
  %143 = select <2 x i1> %142, <2 x float> %139, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %144 = fmul <2 x float> %143, %137, !dbg !57
  %145 = fmul <2 x float> %144, %132, !dbg !58
  %146 = fadd <2 x float> %145, %133, !dbg !59
  %147 = fmul <2 x float> %134, %146, !dbg !60
  %148 = fadd <2 x float> %147, %127, !dbg !61
  %149 = fptrunc <2 x float> %148 to <2 x bfloat>, !dbg !62
  %150 = bitcast <2 x bfloat> %126 to i32, !dbg !62
  %151 = bitcast <2 x bfloat> %149 to i32, !dbg !62
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %150, i32 %151, ptr addrspace(1) %103) #1, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvplcqaprlkeaodpbpoimtcfxazfp5jo2rif6lzbkk2dekpwtrju.py", directory: "/tmp/torchinductor_root/vp")
!4 = !{ptr @triton_, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 30, scope: !6)
!16 = !DILocation(line: 30, column: 35, scope: !6)
!17 = !DILocation(line: 31, column: 37, scope: !6)
!18 = !DILocation(line: 31, column: 30, scope: !6)
!19 = !DILocation(line: 31, column: 42, scope: !6)
!20 = !DILocation(line: 32, column: 30, scope: !6)
!21 = !DILocation(line: 32, column: 42, scope: !6)
!22 = !DILocation(line: 33, column: 30, scope: !6)
!23 = !DILocation(line: 33, column: 35, scope: !6)
!24 = !DILocation(line: 34, column: 30, scope: !6)
!25 = !DILocation(line: 34, column: 35, scope: !6)
!26 = !DILocation(line: 35, column: 31, scope: !6)
!27 = !DILocation(line: 35, column: 36, scope: !6)
!28 = !DILocation(line: 36, column: 31, scope: !6)
!29 = !DILocation(line: 36, column: 36, scope: !6)
!30 = !DILocation(line: 37, column: 31, scope: !6)
!31 = !DILocation(line: 37, column: 36, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 40, scope: !6)
!36 = !DILocation(line: 43, column: 13, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 42, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 42, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 57, column: 25, scope: !6)
!44 = !DILocation(line: 30, column: 44, scope: !6)
!45 = !DILocation(line: 32, column: 81, scope: !6)
!46 = !DILocation(line: 36, column: 75, scope: !6)
!47 = !DILocation(line: 37, column: 75, scope: !6)
!48 = !DILocation(line: 39, column: 18, scope: !6)
!49 = !DILocation(line: 40, column: 19, scope: !6)
!50 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!51 = !DILocation(line: 47, column: 20, scope: !6)
!52 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !53)
!53 = !DILocation(line: 50, column: 42, scope: !6)
!54 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !53)
!55 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !53)
!56 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !53)
!57 = !DILocation(line: 52, column: 19, scope: !6)
!58 = !DILocation(line: 53, column: 20, scope: !6)
!59 = !DILocation(line: 54, column: 20, scope: !6)
!60 = !DILocation(line: 55, column: 19, scope: !6)
!61 = !DILocation(line: 56, column: 19, scope: !6)
!62 = !DILocation(line: 57, column: 37, scope: !6)
!63 = !DILocation(line: 57, column: 4, scope: !6)
