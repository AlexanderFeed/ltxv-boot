; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_add_mul_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 10, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = shl i32 %13, 2, !dbg !11
  %15 = and i32 %14, 1020, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = sdiv i32 %16, 3072, !dbg !13
  %18 = mul i32 %17, 3072, !dbg !14
  %.decomposed = sub i32 %16, %18, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %20) #1, !dbg !16
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !16
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !16
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !16
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !16
  %26 = add nsw i32 %.decomposed, 15360, !dbg !17
  %27 = zext nneg i32 %26 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %28) #1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %34) #1, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !21
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !21
  %40 = getelementptr i32, ptr addrspace(1) %3, i64 %19, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %40) #1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = sext i32 %17 to i64, !dbg !24
  %47 = getelementptr bfloat, ptr addrspace(1) %4, i64 %46, !dbg !24
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %47) #1, !dbg !25
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %47) #1, !dbg !25
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %47) #1, !dbg !25
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %47) #1, !dbg !25
  %52 = getelementptr bfloat, ptr addrspace(1) %5, i64 %46, !dbg !26
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %52) #1, !dbg !27
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %52) #1, !dbg !27
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %52) #1, !dbg !27
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %52) #1, !dbg !27
  %57 = sext i32 %.decomposed to i64, !dbg !28
  %58 = getelementptr bfloat, ptr addrspace(1) %6, i64 %57, !dbg !28
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %58) #1, !dbg !29
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !29
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !29
  %62 = extractvalue { i32, i32 } %59, 1, !dbg !29
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !29
  %64 = getelementptr bfloat, ptr addrspace(1) %7, i64 %57, !dbg !30
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %64) #1, !dbg !31
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !31
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !31
  %68 = extractvalue { i32, i32 } %65, 1, !dbg !31
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !31
  %70 = insertelement <2 x i16> poison, i16 %48, i64 0, !dbg !25
  %71 = insertelement <2 x i16> %70, i16 %49, i64 1, !dbg !25
  %72 = bitcast <2 x i16> %71 to <2 x bfloat>, !dbg !25
  %73 = fcmp oge <2 x bfloat> %72, zeroinitializer, !dbg !32
  %74 = select <2 x i1> %73, <2 x bfloat> zeroinitializer, <2 x bfloat> %72, !dbg !32
  %75 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !32
  %76 = fsub <2 x float> zeroinitializer, %75, !dbg !36
  %77 = insertelement <2 x i16> poison, i16 %50, i64 0, !dbg !25
  %78 = insertelement <2 x i16> %77, i16 %51, i64 1, !dbg !25
  %79 = bitcast <2 x i16> %78 to <2 x bfloat>, !dbg !25
  %80 = fcmp oge <2 x bfloat> %79, zeroinitializer, !dbg !32
  %81 = select <2 x i1> %80, <2 x bfloat> zeroinitializer, <2 x bfloat> %79, !dbg !32
  %82 = fpext <2 x bfloat> %81 to <2 x float>, !dbg !32
  %83 = fsub <2 x float> zeroinitializer, %82, !dbg !36
  %84 = insertelement <2 x i16> poison, i16 %53, i64 0, !dbg !27
  %85 = insertelement <2 x i16> %84, i16 %54, i64 1, !dbg !27
  %86 = bitcast <2 x i16> %85 to <2 x bfloat>, !dbg !27
  %87 = fcmp ole <2 x bfloat> %86, zeroinitializer, !dbg !37
  %88 = select <2 x i1> %87, <2 x bfloat> zeroinitializer, <2 x bfloat> %86, !dbg !37
  %89 = fpext <2 x bfloat> %88 to <2 x float>, !dbg !37
  %90 = insertelement <2 x i16> poison, i16 %55, i64 0, !dbg !27
  %91 = insertelement <2 x i16> %90, i16 %56, i64 1, !dbg !27
  %92 = bitcast <2 x i16> %91 to <2 x bfloat>, !dbg !27
  %93 = fcmp ole <2 x bfloat> %92, zeroinitializer, !dbg !37
  %94 = select <2 x i1> %93, <2 x bfloat> zeroinitializer, <2 x bfloat> %92, !dbg !37
  %95 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !37
  %96 = fcmp ogt <2 x float> %76, %89, !dbg !39
  %97 = fcmp uno <2 x float> %76, zeroinitializer, !dbg !41
  %98 = or <2 x i1> %97, %96, !dbg !42
  %99 = fcmp ogt <2 x float> %83, %95, !dbg !39
  %100 = fcmp uno <2 x float> %83, zeroinitializer, !dbg !41
  %101 = or <2 x i1> %100, %99, !dbg !42
  %102 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !43
  %103 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %104 = insertelement <2 x i32> %103, i32 %31, i64 1, !dbg !19
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !19
  %106 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !44
  %107 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !45
  %108 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !46
  %109 = fadd <2 x float> %105, %106, !dbg !47
  %110 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !48
  %111 = insertelement <2 x i32> %110, i32 %43, i64 1, !dbg !48
  %112 = sitofp <2 x i32> %111 to <2 x float>, !dbg !48
  %113 = select <2 x i1> %98, <2 x float> %76, <2 x float> %89, !dbg !49
  %114 = fmul <2 x float> %113, splat (float 0x3F80204080000000), !dbg !50
  %115 = fcmp ogt <2 x float> %114, splat (float 0x3EE4F8B580000000), !dbg !51
  %116 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !53
  %117 = or <2 x i1> %115, %116, !dbg !54
  %118 = select <2 x i1> %117, <2 x float> %114, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %119 = fmul <2 x float> %118, %112, !dbg !56
  %120 = fmul <2 x float> %119, %107, !dbg !57
  %121 = fadd <2 x float> %120, %108, !dbg !58
  %122 = fmul <2 x float> %109, %121, !dbg !59
  %123 = fadd <2 x float> %122, %102, !dbg !60
  %124 = fptrunc <2 x float> %123 to <2 x bfloat>, !dbg !61
  %125 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !43
  %126 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !19
  %127 = insertelement <2 x i32> %126, i32 %33, i64 1, !dbg !19
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !19
  %129 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !44
  %130 = fpext <2 x bfloat> %63 to <2 x float>, !dbg !45
  %131 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !46
  %132 = fadd <2 x float> %128, %129, !dbg !47
  %133 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !48
  %134 = insertelement <2 x i32> %133, i32 %45, i64 1, !dbg !48
  %135 = sitofp <2 x i32> %134 to <2 x float>, !dbg !48
  %136 = select <2 x i1> %101, <2 x float> %83, <2 x float> %95, !dbg !49
  %137 = fmul <2 x float> %136, splat (float 0x3F80204080000000), !dbg !50
  %138 = fcmp ogt <2 x float> %137, splat (float 0x3EE4F8B580000000), !dbg !51
  %139 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !53
  %140 = or <2 x i1> %138, %139, !dbg !54
  %141 = select <2 x i1> %140, <2 x float> %137, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %142 = fmul <2 x float> %141, %135, !dbg !56
  %143 = fmul <2 x float> %142, %130, !dbg !57
  %144 = fadd <2 x float> %143, %131, !dbg !58
  %145 = fmul <2 x float> %132, %144, !dbg !59
  %146 = fadd <2 x float> %145, %125, !dbg !60
  %147 = fptrunc <2 x float> %146 to <2 x bfloat>, !dbg !61
  %148 = bitcast <2 x bfloat> %124 to i32, !dbg !61
  %149 = bitcast <2 x bfloat> %147 to i32, !dbg !61
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %148, i32 %149, ptr addrspace(1) %20) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czb4cfxmujvr4vubna6yyxvglylgroekatktgtbmtssrx3fakcz2.py", directory: "/tmp/torchinductor_root/zb")
!4 = !{ptr @triton_poi_fused_add_mul_18, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_18", linkageName: "triton_poi_fused_add_mul_18", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 34, scope: !6)
!16 = !DILocation(line: 26, column: 39, scope: !6)
!17 = !DILocation(line: 27, column: 38, scope: !6)
!18 = !DILocation(line: 27, column: 30, scope: !6)
!19 = !DILocation(line: 27, column: 43, scope: !6)
!20 = !DILocation(line: 28, column: 30, scope: !6)
!21 = !DILocation(line: 28, column: 43, scope: !6)
!22 = !DILocation(line: 29, column: 30, scope: !6)
!23 = !DILocation(line: 29, column: 35, scope: !6)
!24 = !DILocation(line: 30, column: 30, scope: !6)
!25 = !DILocation(line: 30, column: 35, scope: !6)
!26 = !DILocation(line: 31, column: 31, scope: !6)
!27 = !DILocation(line: 31, column: 36, scope: !6)
!28 = !DILocation(line: 32, column: 31, scope: !6)
!29 = !DILocation(line: 32, column: 36, scope: !6)
!30 = !DILocation(line: 33, column: 31, scope: !6)
!31 = !DILocation(line: 33, column: 36, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 38, column: 40, scope: !6)
!36 = !DILocation(line: 39, column: 13, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 40, column: 42, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 41, column: 42, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 26, column: 48, scope: !6)
!44 = !DILocation(line: 28, column: 82, scope: !6)
!45 = !DILocation(line: 32, column: 75, scope: !6)
!46 = !DILocation(line: 33, column: 75, scope: !6)
!47 = !DILocation(line: 35, column: 18, scope: !6)
!48 = !DILocation(line: 36, column: 19, scope: !6)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!50 = !DILocation(line: 43, column: 20, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !52)
!52 = !DILocation(line: 46, column: 42, scope: !6)
!53 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !52)
!54 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !52)
!55 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !52)
!56 = !DILocation(line: 48, column: 19, scope: !6)
!57 = !DILocation(line: 49, column: 20, scope: !6)
!58 = !DILocation(line: 50, column: 20, scope: !6)
!59 = !DILocation(line: 51, column: 19, scope: !6)
!60 = !DILocation(line: 52, column: 19, scope: !6)
!61 = !DILocation(line: 53, column: 40, scope: !6)
!62 = !DILocation(line: 53, column: 4, scope: !6)
