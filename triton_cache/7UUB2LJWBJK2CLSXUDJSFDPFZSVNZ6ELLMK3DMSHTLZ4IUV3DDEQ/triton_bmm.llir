; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 16, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 16, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = and i32 %15, 4, !dbg !19
  %21 = lshr i32 %15, 2, !dbg !19
  %22 = and i32 %21, 8, !dbg !19
  %23 = and i32 %21, 15, !dbg !19
  %24 = lshr exact i32 %17, 2, !dbg !19
  %25 = or disjoint i32 %23, %24, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %15, 2, !dbg !19
  %29 = shl nuw nsw i32 %28, 3, !dbg !19
  %30 = or disjoint i32 %27, %29, !dbg !19
  %31 = or disjoint i32 %14, %19, !dbg !20
  %32 = or disjoint i32 %31, 8, !dbg !20
  %33 = or disjoint i32 %31, 16, !dbg !20
  %34 = or disjoint i32 %31, 24, !dbg !20
  %35 = shl nsw i32 %13, 5, !dbg !21
  %36 = or disjoint i32 %35, %30, !dbg !22
  %37 = srem i32 %31, 512, !dbg !23
  %38 = srem i32 %32, 512, !dbg !23
  %39 = srem i32 %33, 512, !dbg !23
  %40 = srem i32 %34, 512, !dbg !23
  %41 = srem i32 %36, 64, !dbg !24
  %42 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %43 = shl nsw i32 %37, 9, !dbg !26
  %44 = shl nsw i32 %38, 9, !dbg !26
  %45 = shl nsw i32 %39, 9, !dbg !26
  %46 = shl nsw i32 %40, 9, !dbg !26
  %47 = shl nuw nsw i32 %20, 3, !dbg !27
  %48 = or disjoint i32 %30, %47, !dbg !27
  %49 = and i32 %26, 64, !dbg !27
  %50 = or disjoint i32 %48, %49, !dbg !27
  %51 = shl i32 %42, 18, !dbg !28
  %52 = or disjoint i32 %50, %51, !dbg !29
  %53 = add i32 %52, %43, !dbg !30
  %54 = add i32 %52, %44, !dbg !30
  %55 = add i32 %52, %45, !dbg !30
  %56 = add i32 %52, %46, !dbg !30
  %57 = sext i32 %53 to i64, !dbg !31
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !31
  %59 = sext i32 %54 to i64, !dbg !31
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = sext i32 %55 to i64, !dbg !31
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !31
  %63 = sext i32 %56 to i64, !dbg !31
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = shl nuw nsw i32 %25, 12, !dbg !32
  %66 = shl i32 %42, 6, !dbg !33
  %67 = add i32 %41, %66, !dbg !34
  %68 = add i32 %67, %65, !dbg !35
  %69 = add i32 %67, 131072, !dbg !34
  %70 = add i32 %69, %65, !dbg !35
  %71 = add i32 %67, 262144, !dbg !34
  %72 = add i32 %71, %65, !dbg !35
  %73 = add i32 %67, 393216, !dbg !34
  %74 = add i32 %73, %65, !dbg !35
  %75 = sext i32 %68 to i64, !dbg !36
  %76 = getelementptr bfloat, ptr addrspace(1) %1, i64 %75, !dbg !36
  %77 = sext i32 %70 to i64, !dbg !36
  %78 = getelementptr bfloat, ptr addrspace(1) %1, i64 %77, !dbg !36
  %79 = sext i32 %72 to i64, !dbg !36
  %80 = getelementptr bfloat, ptr addrspace(1) %1, i64 %79, !dbg !36
  %81 = sext i32 %74 to i64, !dbg !36
  %82 = getelementptr bfloat, ptr addrspace(1) %1, i64 %81, !dbg !36
  %83 = lshr exact i32 %16, 1, !dbg !37
  %84 = lshr i32 %15, 1, !dbg !37
  %85 = and i32 %84, 56, !dbg !37
  %86 = xor i32 %50, %85, !dbg !37
  %87 = shl nuw nsw i32 %19, 7, !dbg !37
  %88 = or i32 %86, %87, !dbg !37
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %88, !dbg !37
  %90 = or i32 %88, 1024, !dbg !37
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %90, !dbg !37
  %92 = or i32 %88, 2048, !dbg !37
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %92, !dbg !37
  %94 = or i32 %88, 3072, !dbg !37
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %94, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %89, ptr addrspace(1) %58, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %91, ptr addrspace(1) %60, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %62, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %64, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %and.ra = and i32 %15, 24, !dbg !38
  %96 = xor i32 %30, %and.ra, !dbg !38
  %97 = shl nuw nsw i32 %25, 5, !dbg !38
  %98 = or disjoint i32 %97, %96, !dbg !38
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %98, !dbg !38
  %100 = or disjoint i32 %98, 1024, !dbg !38
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %100, !dbg !38
  %102 = or disjoint i32 %98, 2048, !dbg !38
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %102, !dbg !38
  %104 = or disjoint i32 %98, 3072, !dbg !38
  %105 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %104, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %76, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %78, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %80, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %82, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %106 = and i32 %15, 15
  %107 = xor i32 %48, %83
  %108 = or disjoint i32 %24, %106
  %109 = shl nuw nsw i32 %108, 7
  %110 = or disjoint i32 %107, %109
  %111 = or disjoint i32 %27, 16
  %112 = xor i32 %111, %29
  %113 = or disjoint i32 %112, %47
  %114 = xor i32 %113, %83
  %115 = or disjoint i32 %114, %109
  %116 = or disjoint i32 %30, 32
  %117 = or disjoint i32 %83, %47
  %118 = xor i32 %117, %116
  %119 = or disjoint i32 %118, %109
  %120 = or disjoint i32 %27, 48
  %121 = or disjoint i32 %117, %29
  %122 = xor i32 %121, %120
  %123 = or disjoint i32 %122, %109
  %124 = or disjoint i32 %48, 64
  %125 = xor i32 %124, %83
  %126 = or disjoint i32 %125, %109
  %127 = or disjoint i32 %27, 80
  %128 = xor i32 %127, %29
  %129 = or disjoint i32 %128, %47
  %130 = xor i32 %129, %83
  %131 = or disjoint i32 %130, %109
  %132 = or disjoint i32 %30, 96
  %133 = xor i32 %117, %132
  %134 = or disjoint i32 %133, %109
  %135 = or disjoint i32 %27, 112
  %136 = xor i32 %121, %135
  %137 = or disjoint i32 %136, %109
  %138 = shl nuw nsw i32 %28, 2
  %139 = shl nuw nsw i32 %20, 2
  %140 = or disjoint i32 %138, %139
  %141 = xor i32 %140, %22
  %142 = shl i32 %15, 5
  %143 = and i32 %142, 992
  %144 = or disjoint i32 %141, %143
  %145 = or disjoint i32 %143, 1024
  %146 = or disjoint i32 %141, %145
  %147 = or disjoint i32 %143, 2048
  %148 = or disjoint i32 %141, %147
  %149 = or disjoint i32 %143, 3072
  %150 = or disjoint i32 %141, %149
  %151 = or disjoint i32 %138, 16
  %152 = or disjoint i32 %22, %139
  %153 = xor i32 %152, %151
  %154 = or disjoint i32 %153, %143
  %155 = or disjoint i32 %153, %145
  %156 = or disjoint i32 %153, %147
  %157 = or disjoint i32 %153, %149
  br label %158, !dbg !39

158:                                              ; preds = %4, %158
  %159 = phi i32 [ -1, %4 ], [ %172, %158 ]
  %.pn81155 = phi ptr addrspace(1) [ %82, %4 ], [ %375, %158 ]
  %.pn97154 = phi ptr addrspace(1) [ %80, %4 ], [ %374, %158 ]
  %.pn113153 = phi ptr addrspace(1) [ %78, %4 ], [ %373, %158 ]
  %.pn129152 = phi ptr addrspace(1) [ %76, %4 ], [ %372, %158 ]
  %.pn17151 = phi ptr addrspace(1) [ %64, %4 ], [ %371, %158 ]
  %.pn33150 = phi ptr addrspace(1) [ %62, %4 ], [ %370, %158 ]
  %.pn49149 = phi ptr addrspace(1) [ %60, %4 ], [ %369, %158 ]
  %.pn65148 = phi ptr addrspace(1) [ %58, %4 ], [ %368, %158 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %359, %158 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %360, %158 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %361, %158 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %362, %158 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %364, %158 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %365, %158 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %366, %158 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %367, %158 ]
  %168 = phi i32 [ 0, %4 ], [ %377, %158 ]
  %169 = icmp samesign ult i32 %168, 384, !dbg !39
  %170 = add i32 %159, 1, !dbg !39
  %171 = icmp ugt i32 %159, 2147483646, !dbg !39
  %172 = select i1 %171, i32 %170, i32 0, !dbg !39
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %173 = shl i32 %172, 12, !dbg !37
  %174 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %173, !dbg !37
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %110, !dbg !37
  %176 = ptrtoint ptr addrspace(3) %175 to i32, !dbg !37
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %176) #1, !dbg !37
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !37
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %115, !dbg !37
  %183 = ptrtoint ptr addrspace(3) %182 to i32, !dbg !37
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %183) #1, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !37
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %119, !dbg !37
  %190 = ptrtoint ptr addrspace(3) %189 to i32, !dbg !37
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %190) #1, !dbg !37
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !37
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !37
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !37
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !37
  %196 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %123, !dbg !37
  %197 = ptrtoint ptr addrspace(3) %196 to i32, !dbg !37
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %197) #1, !dbg !37
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !37
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !37
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !37
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !37
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %126, !dbg !37
  %204 = ptrtoint ptr addrspace(3) %203 to i32, !dbg !37
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %204) #1, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !37
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !37
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !37
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %131, !dbg !37
  %211 = ptrtoint ptr addrspace(3) %210 to i32, !dbg !37
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %211) #1, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !37
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !37
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !37
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %134, !dbg !37
  %218 = ptrtoint ptr addrspace(3) %217 to i32, !dbg !37
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %218) #1, !dbg !37
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !37
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !37
  %224 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %137, !dbg !37
  %225 = ptrtoint ptr addrspace(3) %224 to i32, !dbg !37
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %225) #1, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !37
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !37
  %231 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %173, !dbg !38
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %144, !dbg !38
  %233 = ptrtoint ptr addrspace(3) %232 to i32, !dbg !38
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %233) #1, !dbg !38
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !38
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !38
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !38
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !38
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %146, !dbg !38
  %240 = ptrtoint ptr addrspace(3) %239 to i32, !dbg !38
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !38
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !38
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !38
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !38
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !38
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %148, !dbg !38
  %247 = ptrtoint ptr addrspace(3) %246 to i32, !dbg !38
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %247) #1, !dbg !38
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !38
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !38
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !38
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !38
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %150, !dbg !38
  %254 = ptrtoint ptr addrspace(3) %253 to i32, !dbg !38
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %254) #1, !dbg !38
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !38
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !38
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !38
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !38
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %154, !dbg !38
  %261 = ptrtoint ptr addrspace(3) %260 to i32, !dbg !38
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %261) #1, !dbg !38
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !38
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !38
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !38
  %267 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %155, !dbg !38
  %268 = ptrtoint ptr addrspace(3) %267 to i32, !dbg !38
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %268) #1, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !38
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !38
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !38
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !38
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %156, !dbg !38
  %275 = ptrtoint ptr addrspace(3) %274 to i32, !dbg !38
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %275) #1, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !38
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !38
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i32 %157, !dbg !38
  %282 = ptrtoint ptr addrspace(3) %281 to i32, !dbg !38
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %282) #1, !dbg !38
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !38
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !38
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !38
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !38
  %288 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %178, i32 %179, i32 %180, i32 %181, i32 %235, i32 %236) #1, !dbg !40
  %289 = extractvalue { float, float, float, float } %288, 0, !dbg !40
  %290 = extractvalue { float, float, float, float } %288, 1, !dbg !40
  %291 = extractvalue { float, float, float, float } %288, 2, !dbg !40
  %292 = extractvalue { float, float, float, float } %288, 3, !dbg !40
  %293 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %178, i32 %179, i32 %180, i32 %181, i32 %263, i32 %264) #1, !dbg !40
  %294 = extractvalue { float, float, float, float } %293, 0, !dbg !40
  %295 = extractvalue { float, float, float, float } %293, 1, !dbg !40
  %296 = extractvalue { float, float, float, float } %293, 2, !dbg !40
  %297 = extractvalue { float, float, float, float } %293, 3, !dbg !40
  %298 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %289, float %290, float %291, float %292, i32 %185, i32 %186, i32 %187, i32 %188, i32 %237, i32 %238) #1, !dbg !40
  %299 = extractvalue { float, float, float, float } %298, 0, !dbg !40
  %300 = extractvalue { float, float, float, float } %298, 1, !dbg !40
  %301 = extractvalue { float, float, float, float } %298, 2, !dbg !40
  %302 = extractvalue { float, float, float, float } %298, 3, !dbg !40
  %303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %294, float %295, float %296, float %297, i32 %185, i32 %186, i32 %187, i32 %188, i32 %265, i32 %266) #1, !dbg !40
  %304 = extractvalue { float, float, float, float } %303, 0, !dbg !40
  %305 = extractvalue { float, float, float, float } %303, 1, !dbg !40
  %306 = extractvalue { float, float, float, float } %303, 2, !dbg !40
  %307 = extractvalue { float, float, float, float } %303, 3, !dbg !40
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %299, float %300, float %301, float %302, i32 %192, i32 %193, i32 %194, i32 %195, i32 %242, i32 %243) #1, !dbg !40
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !40
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !40
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !40
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !40
  %313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %304, float %305, float %306, float %307, i32 %192, i32 %193, i32 %194, i32 %195, i32 %270, i32 %271) #1, !dbg !40
  %314 = extractvalue { float, float, float, float } %313, 0, !dbg !40
  %315 = extractvalue { float, float, float, float } %313, 1, !dbg !40
  %316 = extractvalue { float, float, float, float } %313, 2, !dbg !40
  %317 = extractvalue { float, float, float, float } %313, 3, !dbg !40
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %199, i32 %200, i32 %201, i32 %202, i32 %244, i32 %245) #1, !dbg !40
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !40
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !40
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !40
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !40
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %199, i32 %200, i32 %201, i32 %202, i32 %272, i32 %273) #1, !dbg !40
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !40
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !40
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !40
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !40
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %206, i32 %207, i32 %208, i32 %209, i32 %249, i32 %250) #1, !dbg !40
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !40
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !40
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !40
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !40
  %333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %206, i32 %207, i32 %208, i32 %209, i32 %277, i32 %278) #1, !dbg !40
  %334 = extractvalue { float, float, float, float } %333, 0, !dbg !40
  %335 = extractvalue { float, float, float, float } %333, 1, !dbg !40
  %336 = extractvalue { float, float, float, float } %333, 2, !dbg !40
  %337 = extractvalue { float, float, float, float } %333, 3, !dbg !40
  %338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %213, i32 %214, i32 %215, i32 %216, i32 %251, i32 %252) #1, !dbg !40
  %339 = extractvalue { float, float, float, float } %338, 0, !dbg !40
  %340 = extractvalue { float, float, float, float } %338, 1, !dbg !40
  %341 = extractvalue { float, float, float, float } %338, 2, !dbg !40
  %342 = extractvalue { float, float, float, float } %338, 3, !dbg !40
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %213, i32 %214, i32 %215, i32 %216, i32 %279, i32 %280) #1, !dbg !40
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !40
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !40
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !40
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !40
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %220, i32 %221, i32 %222, i32 %223, i32 %256, i32 %257) #1, !dbg !40
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !40
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !40
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !40
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !40
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %220, i32 %221, i32 %222, i32 %223, i32 %284, i32 %285) #1, !dbg !40
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !40
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !40
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !40
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !40
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %227, i32 %228, i32 %229, i32 %230, i32 %258, i32 %259) #1, !dbg !40
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !40
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !40
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !40
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !40
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %227, i32 %228, i32 %229, i32 %230, i32 %286, i32 %287) #1, !dbg !40
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !40
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !40
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !40
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !40
  %368 = getelementptr i8, ptr addrspace(1) %.pn65148, i64 256, !dbg !41
  %369 = getelementptr i8, ptr addrspace(1) %.pn49149, i64 256, !dbg !41
  %370 = getelementptr i8, ptr addrspace(1) %.pn33150, i64 256, !dbg !41
  %371 = getelementptr i8, ptr addrspace(1) %.pn17151, i64 256, !dbg !41
  %372 = getelementptr i8, ptr addrspace(1) %.pn129152, i64 1048576, !dbg !42
  %373 = getelementptr i8, ptr addrspace(1) %.pn113153, i64 1048576, !dbg !42
  %374 = getelementptr i8, ptr addrspace(1) %.pn97154, i64 1048576, !dbg !42
  %375 = getelementptr i8, ptr addrspace(1) %.pn81155, i64 1048576, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %376 = select i1 %169, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %89, ptr addrspace(1) %368, i32 %376) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %91, ptr addrspace(1) %369, i32 %376) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %370, i32 %376) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %371, i32 %376) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %372, i32 %376) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %373, i32 %376) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %374, i32 %376) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %375, i32 %376) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %377 = add nuw nsw i32 %168, 128, !dbg !39
  br i1 %169, label %158, label %378, !dbg !39

378:                                              ; preds = %158
  %379 = or disjoint i32 %14, %25, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %380 = icmp slt i32 %379, 512, !dbg !43
  %381 = icmp slt i32 %36, 64, !dbg !44
  %382 = and i1 %380, %381, !dbg !45
  %383 = shl i32 %379, 6, !dbg !46
  %384 = shl i32 %42, 15, !dbg !47
  %385 = add i32 %36, %384, !dbg !48
  %386 = add i32 %385, %383, !dbg !49
  %387 = sext i32 %386 to i64, !dbg !50
  %388 = getelementptr bfloat, ptr addrspace(1) %2, i64 %387, !dbg !50
  %389 = fptrunc float %359 to bfloat, !dbg !51
  %390 = fptrunc float %360 to bfloat, !dbg !51
  %391 = fptrunc float %361 to bfloat, !dbg !51
  %392 = fptrunc float %362 to bfloat, !dbg !51
  %393 = fptrunc float %364 to bfloat, !dbg !51
  %394 = fptrunc float %365 to bfloat, !dbg !51
  %395 = fptrunc float %366 to bfloat, !dbg !51
  %396 = fptrunc float %367 to bfloat, !dbg !51
  %397 = shl i32 %15, 1, !dbg !51
  %398 = and i32 %397, 6, !dbg !51
  %399 = or disjoint i32 %398, %47, !dbg !51
  %400 = or disjoint i32 %399, %49, !dbg !51
  %401 = shl nuw nsw i32 %16, 3, !dbg !51
  %402 = or disjoint i32 %400, %401, !dbg !51
  %403 = or disjoint i32 %402, %22, !dbg !51
  %404 = shl nuw nsw i32 %17, 3, !dbg !51
  %405 = xor i32 %403, %404, !dbg !51
  %406 = or disjoint i32 %50, %401, !dbg !51
  %407 = and i32 %26, 768, !dbg !51
  %408 = xor i32 %407, %406, !dbg !51
  %409 = lshr i32 %405, 2, !dbg !51
  %410 = and i32 %409, 1073741816, !dbg !51
  %411 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %410, !dbg !51
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %411, i32 %405, !dbg !51
  %413 = bitcast bfloat %389 to i16, !dbg !51
  %414 = bitcast bfloat %390 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %412, i16 %413, i16 %414, i1 true) #1, !dbg !51
  %415 = xor i32 %405, 256, !dbg !51
  %416 = lshr i32 %415, 2, !dbg !51
  %417 = and i32 %416, 1073741816, !dbg !51
  %418 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %417, !dbg !51
  %419 = getelementptr bfloat, ptr addrspace(3) %418, i32 %415, !dbg !51
  %420 = bitcast bfloat %391 to i16, !dbg !51
  %421 = bitcast bfloat %392 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %419, i16 %420, i16 %421, i1 true) #1, !dbg !51
  %422 = xor i32 %405, 16, !dbg !51
  %423 = getelementptr bfloat, ptr addrspace(3) %411, i32 %422, !dbg !51
  %424 = bitcast bfloat %393 to i16, !dbg !51
  %425 = bitcast bfloat %394 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %423, i16 %424, i16 %425, i1 true) #1, !dbg !51
  %426 = xor i32 %405, 272, !dbg !51
  %427 = lshr i32 %426, 2, !dbg !51
  %428 = and i32 %427, 1073741816, !dbg !51
  %429 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %428, !dbg !51
  %430 = getelementptr bfloat, ptr addrspace(3) %429, i32 %426, !dbg !51
  %431 = bitcast bfloat %395 to i16, !dbg !51
  %432 = bitcast bfloat %396 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %430, i16 %431, i16 %432, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %433 = lshr exact i32 %408, 2, !dbg !51
  %434 = and i32 %433, 1073741816, !dbg !51
  %435 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %434, !dbg !51
  %436 = getelementptr bfloat, ptr addrspace(3) %435, i32 %408, !dbg !51
  %.extract = load i32, ptr addrspace(3) %436, align 16, !dbg !51
  %437 = getelementptr inbounds nuw i8, ptr addrspace(3) %436, i32 4, !dbg !51
  %.extract143 = load i32, ptr addrspace(3) %437, align 4, !dbg !51
  %438 = getelementptr inbounds nuw i8, ptr addrspace(3) %436, i32 8, !dbg !51
  %.extract145 = load i32, ptr addrspace(3) %438, align 8, !dbg !51
  %439 = getelementptr inbounds nuw i8, ptr addrspace(3) %436, i32 12, !dbg !51
  %.extract147 = load i32, ptr addrspace(3) %439, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract143, i32 %.extract145, i32 %.extract147, ptr addrspace(1) %388, i1 %382) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciyyyk252zklj4hymm27ufy4esnxxysrmplqy5nvnhumy4jjrlp2.py", directory: "/tmp/torchinductor_root/iy")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 55, column: 52, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 43, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 27, scope: !6)
!33 = !DILocation(line: 67, column: 72, scope: !6)
!34 = !DILocation(line: 67, column: 39, scope: !6)
!35 = !DILocation(line: 67, column: 66, scope: !6)
!36 = !DILocation(line: 67, column: 13, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 70, column: 25, scope: !6)
!40 = !DILocation(line: 77, column: 25, scope: !6)
!41 = !DILocation(line: 78, column: 13, scope: !6)
!42 = !DILocation(line: 79, column: 13, scope: !6)
!43 = !DILocation(line: 87, column: 20, scope: !6)
!44 = !DILocation(line: 87, column: 34, scope: !6)
!45 = !DILocation(line: 87, column: 26, scope: !6)
!46 = !DILocation(line: 90, column: 24, scope: !6)
!47 = !DILocation(line: 90, column: 38, scope: !6)
!48 = !DILocation(line: 90, column: 21, scope: !6)
!49 = !DILocation(line: 90, column: 32, scope: !6)
!50 = !DILocation(line: 91, column: 25, scope: !6)
!51 = !DILocation(line: 91, column: 67, scope: !6)
!52 = !DILocation(line: 91, column: 4, scope: !6)
