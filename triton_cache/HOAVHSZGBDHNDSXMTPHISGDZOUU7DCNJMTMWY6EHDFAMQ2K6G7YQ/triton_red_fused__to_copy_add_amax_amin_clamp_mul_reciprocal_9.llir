; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 3, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 6, !dbg !11
  %12 = and i32 %11, 7, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, 3600, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 120, !dbg !14
  %17 = and i32 %15, 504, !dbg !14
  %18 = shl i32 %13, 7, !dbg !15
  %19 = add i32 %18, 65536, !dbg !16
  %invariant.op = or disjoint i32 %19, %16, !dbg !17
  %20 = zext nneg i32 %17 to i64, !dbg !17
  %21 = insertelement <16 x i1> poison, i1 %14, i64 0, !dbg !18
  %22 = shufflevector <16 x i1> %21, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !18
  %23 = and i32 %10, 31, !dbg !11
  %24 = lshr i32 %17, 7, !dbg !19
  %25 = mul nuw nsw i32 %24, 526336
  %.reass = add i32 %25, %invariant.op
  %26 = sext i32 %.reass to i64, !dbg !20
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %14) #4, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !21
  %37 = shufflevector <2 x bfloat> %30, <2 x bfloat> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %38 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %39 = shufflevector <8 x bfloat> %37, <8 x bfloat> %38, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %40 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %41 = shufflevector <8 x bfloat> %39, <8 x bfloat> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %42 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %43 = shufflevector <8 x bfloat> %41, <8 x bfloat> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %44 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %45 = shufflevector <8 x bfloat> %43, <8 x bfloat> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %46 = fpext <8 x bfloat> %45 to <8 x float>, !dbg !22
  %47 = shufflevector <8 x float> %46, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %48 = fcmp olt <16 x float> %47, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !23
  %49 = fcmp ogt <16 x float> %47, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !23
  %50 = shufflevector <16 x i1> %48, <16 x i1> %49, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %51 = select <16 x i1> %50, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %47, !dbg !27
  %52 = select <16 x i1> %22, <16 x float> %51, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %53 = lshr i32 %17, 7, !dbg !19
  %54 = mul nuw nsw i32 %53, 526336
  %55 = add nuw nsw i32 %54, 2105344
  %.reass.1 = add i32 %55, %invariant.op
  %56 = sext i32 %.reass.1 to i64, !dbg !20
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %14) #4, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !21
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !21
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !21
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !21
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !21
  %67 = fcmp uno <16 x float> %52, zeroinitializer, !dbg !28
  %68 = shufflevector <2 x bfloat> %60, <2 x bfloat> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %69 = shufflevector <2 x bfloat> %64, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %70 = shufflevector <8 x bfloat> %68, <8 x bfloat> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %71 = shufflevector <2 x bfloat> %64, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %72 = shufflevector <8 x bfloat> %70, <8 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %73 = shufflevector <2 x bfloat> %66, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %74 = shufflevector <8 x bfloat> %72, <8 x bfloat> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %75 = shufflevector <2 x bfloat> %66, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %76 = shufflevector <8 x bfloat> %74, <8 x bfloat> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %77 = fpext <8 x bfloat> %76 to <8 x float>, !dbg !22
  %78 = shufflevector <8 x float> %77, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %79 = fcmp ogt <16 x float> %52, %78, !dbg !23
  %80 = fcmp olt <16 x float> %52, %78, !dbg !23
  %81 = shufflevector <16 x i1> %79, <16 x i1> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %82 = or <16 x i1> %67, %81, !dbg !29
  %83 = select <16 x i1> %82, <16 x float> %52, <16 x float> %78, !dbg !27
  %84 = select <16 x i1> %22, <16 x float> %83, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %85 = lshr i32 %17, 7, !dbg !19
  %86 = mul nuw nsw i32 %85, 526336
  %87 = add nuw nsw i32 %86, 4210688
  %.reass.2 = add i32 %87, %invariant.op
  %88 = sext i32 %.reass.2 to i64, !dbg !20
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !20
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %89, i1 %14) #4, !dbg !21
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !21
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !21
  %93 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !21
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !21
  %95 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !21
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !21
  %97 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !21
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !21
  %99 = fcmp uno <16 x float> %84, zeroinitializer, !dbg !28
  %100 = shufflevector <2 x bfloat> %92, <2 x bfloat> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %101 = shufflevector <2 x bfloat> %96, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %102 = shufflevector <8 x bfloat> %100, <8 x bfloat> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %103 = shufflevector <2 x bfloat> %96, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %104 = shufflevector <8 x bfloat> %102, <8 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %105 = shufflevector <2 x bfloat> %98, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %106 = shufflevector <8 x bfloat> %104, <8 x bfloat> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %107 = shufflevector <2 x bfloat> %98, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %108 = shufflevector <8 x bfloat> %106, <8 x bfloat> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %109 = fpext <8 x bfloat> %108 to <8 x float>, !dbg !22
  %110 = shufflevector <8 x float> %109, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %111 = fcmp ogt <16 x float> %84, %110, !dbg !23
  %112 = fcmp olt <16 x float> %84, %110, !dbg !23
  %113 = shufflevector <16 x i1> %111, <16 x i1> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %114 = or <16 x i1> %99, %113, !dbg !29
  %115 = select <16 x i1> %114, <16 x float> %84, <16 x float> %110, !dbg !27
  %116 = select <16 x i1> %22, <16 x float> %115, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %117 = lshr i32 %17, 7, !dbg !19
  %118 = mul nuw nsw i32 %117, 526336
  %119 = add nuw nsw i32 %118, 6316032
  %.reass.3 = add i32 %119, %invariant.op
  %120 = sext i32 %.reass.3 to i64, !dbg !20
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !20
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %121, i1 %14) #4, !dbg !21
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !21
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !21
  %125 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !21
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !21
  %127 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !21
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !21
  %129 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !21
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !21
  %131 = fcmp uno <16 x float> %116, zeroinitializer, !dbg !28
  %132 = shufflevector <2 x bfloat> %124, <2 x bfloat> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %133 = shufflevector <2 x bfloat> %128, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %134 = shufflevector <8 x bfloat> %132, <8 x bfloat> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %135 = shufflevector <2 x bfloat> %128, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %136 = shufflevector <8 x bfloat> %134, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %137 = shufflevector <2 x bfloat> %130, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %138 = shufflevector <8 x bfloat> %136, <8 x bfloat> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %139 = shufflevector <2 x bfloat> %130, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %140 = shufflevector <8 x bfloat> %138, <8 x bfloat> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %141 = fpext <8 x bfloat> %140 to <8 x float>, !dbg !22
  %142 = shufflevector <8 x float> %141, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %143 = fcmp ogt <16 x float> %116, %142, !dbg !23
  %144 = fcmp olt <16 x float> %116, %142, !dbg !23
  %145 = shufflevector <16 x i1> %143, <16 x i1> %144, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %146 = or <16 x i1> %131, %145, !dbg !29
  %147 = select <16 x i1> %146, <16 x float> %116, <16 x float> %142, !dbg !27
  %148 = select <16 x i1> %22, <16 x float> %147, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %149 = lshr i32 %17, 7, !dbg !19
  %150 = mul nuw nsw i32 %149, 526336
  %151 = add nuw nsw i32 %150, 8421376
  %.reass.4 = add i32 %151, %invariant.op
  %152 = sext i32 %.reass.4 to i64, !dbg !20
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !20
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %153, i1 %14) #4, !dbg !21
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !21
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !21
  %157 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !21
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !21
  %159 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !21
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !21
  %161 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !21
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !21
  %163 = fcmp uno <16 x float> %148, zeroinitializer, !dbg !28
  %164 = shufflevector <2 x bfloat> %156, <2 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %165 = shufflevector <2 x bfloat> %160, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %166 = shufflevector <8 x bfloat> %164, <8 x bfloat> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %167 = shufflevector <2 x bfloat> %160, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %168 = shufflevector <8 x bfloat> %166, <8 x bfloat> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %169 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %170 = shufflevector <8 x bfloat> %168, <8 x bfloat> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %171 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %172 = shufflevector <8 x bfloat> %170, <8 x bfloat> %171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %173 = fpext <8 x bfloat> %172 to <8 x float>, !dbg !22
  %174 = shufflevector <8 x float> %173, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %175 = fcmp ogt <16 x float> %148, %174, !dbg !23
  %176 = fcmp olt <16 x float> %148, %174, !dbg !23
  %177 = shufflevector <16 x i1> %175, <16 x i1> %176, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %178 = or <16 x i1> %163, %177, !dbg !29
  %179 = select <16 x i1> %178, <16 x float> %148, <16 x float> %174, !dbg !27
  %180 = select <16 x i1> %22, <16 x float> %179, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %181 = lshr i32 %17, 7, !dbg !19
  %182 = mul nuw nsw i32 %181, 526336
  %183 = add nuw nsw i32 %182, 10526720
  %.reass.5 = add i32 %183, %invariant.op
  %184 = sext i32 %.reass.5 to i64, !dbg !20
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !20
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %14) #4, !dbg !21
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !21
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !21
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !21
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !21
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !21
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !21
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !21
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !21
  %195 = fcmp uno <16 x float> %180, zeroinitializer, !dbg !28
  %196 = shufflevector <2 x bfloat> %188, <2 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %197 = shufflevector <2 x bfloat> %192, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %198 = shufflevector <8 x bfloat> %196, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %199 = shufflevector <2 x bfloat> %192, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %200 = shufflevector <8 x bfloat> %198, <8 x bfloat> %199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %201 = shufflevector <2 x bfloat> %194, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %202 = shufflevector <8 x bfloat> %200, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %203 = shufflevector <2 x bfloat> %194, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %204 = shufflevector <8 x bfloat> %202, <8 x bfloat> %203, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %205 = fpext <8 x bfloat> %204 to <8 x float>, !dbg !22
  %206 = shufflevector <8 x float> %205, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !22
  %207 = fcmp ogt <16 x float> %180, %206, !dbg !23
  %208 = fcmp olt <16 x float> %180, %206, !dbg !23
  %209 = shufflevector <16 x i1> %207, <16 x i1> %208, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !23
  %210 = or <16 x i1> %195, %209, !dbg !29
  %211 = select <16 x i1> %210, <16 x float> %180, <16 x float> %206, !dbg !27
  %212 = select <16 x i1> %22, <16 x float> %211, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !18
  %213 = lshr i32 %10, 5, !dbg !11
  %214 = and i32 %10, 7, !dbg !11
  %215 = or disjoint i32 %9, %214, !dbg !12
  %216 = icmp slt i32 %215, 3600, !dbg !13
  %217 = extractelement <16 x float> %212, i64 8, !dbg !30
  %218 = extractelement <16 x float> %212, i64 9, !dbg !30
  %219 = fcmp olt float %217, %218, !dbg !30
  %220 = fcmp uno float %217, 0.000000e+00, !dbg !33
  %221 = or i1 %219, %220, !dbg !34
  %222 = select i1 %221, float %217, float %218, !dbg !35
  %223 = extractelement <16 x float> %212, i64 10, !dbg !30
  %224 = fcmp olt float %222, %223, !dbg !30
  %225 = fcmp uno float %222, 0.000000e+00, !dbg !33
  %226 = or i1 %224, %225, !dbg !34
  %227 = select i1 %226, float %222, float %223, !dbg !35
  %228 = extractelement <16 x float> %212, i64 11, !dbg !30
  %229 = fcmp olt float %227, %228, !dbg !30
  %230 = fcmp uno float %227, 0.000000e+00, !dbg !33
  %231 = or i1 %229, %230, !dbg !34
  %232 = select i1 %231, float %227, float %228, !dbg !35
  %233 = extractelement <16 x float> %212, i64 12, !dbg !30
  %234 = fcmp olt float %232, %233, !dbg !30
  %235 = fcmp uno float %232, 0.000000e+00, !dbg !33
  %236 = or i1 %234, %235, !dbg !34
  %237 = select i1 %236, float %232, float %233, !dbg !35
  %238 = extractelement <16 x float> %212, i64 13, !dbg !30
  %239 = fcmp olt float %237, %238, !dbg !30
  %240 = fcmp uno float %237, 0.000000e+00, !dbg !33
  %241 = or i1 %239, %240, !dbg !34
  %242 = select i1 %241, float %237, float %238, !dbg !35
  %243 = extractelement <16 x float> %212, i64 14, !dbg !30
  %244 = fcmp olt float %242, %243, !dbg !30
  %245 = fcmp uno float %242, 0.000000e+00, !dbg !33
  %246 = or i1 %244, %245, !dbg !34
  %247 = select i1 %246, float %242, float %243, !dbg !35
  %248 = extractelement <16 x float> %212, i64 15, !dbg !30
  %249 = fcmp olt float %247, %248, !dbg !30
  %250 = fcmp uno float %247, 0.000000e+00, !dbg !33
  %251 = or i1 %249, %250, !dbg !34
  %252 = select i1 %251, float %247, float %248, !dbg !35
  %253 = bitcast float %252 to i32, !dbg !36
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 16, i32 31), !dbg !36
  %255 = bitcast i32 %254 to float, !dbg !36
  %256 = fcmp olt float %252, %255, !dbg !30
  %257 = fcmp uno float %252, 0.000000e+00, !dbg !33
  %258 = or i1 %257, %256, !dbg !34
  %259 = select i1 %258, float %252, float %255, !dbg !35
  %260 = bitcast float %259 to i32, !dbg !36
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !36
  %262 = bitcast i32 %261 to float, !dbg !36
  %263 = fcmp olt float %259, %262, !dbg !30
  %264 = fcmp uno float %259, 0.000000e+00, !dbg !33
  %265 = or i1 %263, %264, !dbg !34
  %266 = select i1 %265, float %259, float %262, !dbg !35
  %267 = bitcast float %266 to i32, !dbg !36
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !36
  %269 = bitcast i32 %268 to float, !dbg !36
  %270 = fcmp olt float %266, %269, !dbg !30
  %271 = fcmp uno float %266, 0.000000e+00, !dbg !33
  %272 = or i1 %270, %271, !dbg !34
  %273 = select i1 %272, float %266, float %269, !dbg !35
  %274 = bitcast float %273 to i32, !dbg !36
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !36
  %276 = bitcast i32 %275 to float, !dbg !36
  %277 = fcmp olt float %273, %276, !dbg !30
  %278 = fcmp uno float %273, 0.000000e+00, !dbg !33
  %279 = or i1 %277, %278, !dbg !34
  %280 = select i1 %279, float %273, float %276, !dbg !35
  %281 = bitcast float %280 to i32, !dbg !36
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !36
  %283 = bitcast i32 %282 to float, !dbg !36
  %284 = fcmp olt float %280, %283, !dbg !30
  %285 = fcmp uno float %280, 0.000000e+00, !dbg !33
  %286 = or i1 %284, %285, !dbg !34
  %287 = and i32 %213, 1, !dbg !36
  %288 = icmp eq i32 %23, 0, !dbg !36
  %289 = shl nuw nsw i32 %12, 1, !dbg !36
  %290 = or disjoint i32 %289, %287, !dbg !36
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !36
  %292 = select i1 %286, i32 %281, i32 %282, !dbg !35
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %293, i1 %288) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %294 = icmp slt i32 %10, 16, !dbg !36
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !36
  %296 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %294) #4, !dbg !36
  %297 = bitcast i32 %296 to float, !dbg !36
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !36
  %299 = bitcast i32 %298 to float, !dbg !36
  %300 = fcmp olt float %297, %299, !dbg !30
  %301 = fcmp uno float %297, 0.000000e+00, !dbg !33
  %302 = or i1 %301, %300, !dbg !34
  %303 = and i32 %10, 1, !dbg !36
  %304 = icmp eq i32 %303, 0, !dbg !36
  %305 = and i1 %294, %304, !dbg !36
  %306 = select i1 %302, i32 %296, i32 %298, !dbg !35
  %307 = insertelement <1 x i32> poison, i32 %306, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %307, i1 %305) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !36
  %309 = load float, ptr addrspace(3) %308, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %310 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %311 = bitcast float %309 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %312 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %214, !dbg !37
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %314 = extractelement <16 x float> %212, i64 0, !dbg !40
  %315 = extractelement <16 x float> %212, i64 1, !dbg !40
  %316 = fcmp ogt float %314, %315, !dbg !40
  %317 = fcmp uno float %314, 0.000000e+00, !dbg !41
  %318 = or i1 %316, %317, !dbg !42
  %319 = select i1 %318, float %314, float %315, !dbg !43
  %320 = extractelement <16 x float> %212, i64 2, !dbg !40
  %321 = fcmp ogt float %319, %320, !dbg !40
  %322 = fcmp uno float %319, 0.000000e+00, !dbg !41
  %323 = or i1 %321, %322, !dbg !42
  %324 = select i1 %323, float %319, float %320, !dbg !43
  %325 = extractelement <16 x float> %212, i64 3, !dbg !40
  %326 = fcmp ogt float %324, %325, !dbg !40
  %327 = fcmp uno float %324, 0.000000e+00, !dbg !41
  %328 = or i1 %326, %327, !dbg !42
  %329 = select i1 %328, float %324, float %325, !dbg !43
  %330 = extractelement <16 x float> %212, i64 4, !dbg !40
  %331 = fcmp ogt float %329, %330, !dbg !40
  %332 = fcmp uno float %329, 0.000000e+00, !dbg !41
  %333 = or i1 %331, %332, !dbg !42
  %334 = select i1 %333, float %329, float %330, !dbg !43
  %335 = extractelement <16 x float> %212, i64 5, !dbg !40
  %336 = fcmp ogt float %334, %335, !dbg !40
  %337 = fcmp uno float %334, 0.000000e+00, !dbg !41
  %338 = or i1 %336, %337, !dbg !42
  %339 = select i1 %338, float %334, float %335, !dbg !43
  %340 = extractelement <16 x float> %212, i64 6, !dbg !40
  %341 = fcmp ogt float %339, %340, !dbg !40
  %342 = fcmp uno float %339, 0.000000e+00, !dbg !41
  %343 = or i1 %341, %342, !dbg !42
  %344 = select i1 %343, float %339, float %340, !dbg !43
  %345 = extractelement <16 x float> %212, i64 7, !dbg !40
  %346 = fcmp ogt float %344, %345, !dbg !40
  %347 = fcmp uno float %344, 0.000000e+00, !dbg !41
  %348 = or i1 %346, %347, !dbg !42
  %349 = select i1 %348, float %344, float %345, !dbg !43
  %350 = bitcast float %349 to i32, !dbg !38
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 16, i32 31), !dbg !38
  %352 = bitcast i32 %351 to float, !dbg !38
  %353 = fcmp ogt float %349, %352, !dbg !40
  %354 = fcmp uno float %349, 0.000000e+00, !dbg !41
  %355 = or i1 %354, %353, !dbg !42
  %356 = select i1 %355, float %349, float %352, !dbg !43
  %357 = bitcast float %356 to i32, !dbg !38
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 8, i32 31), !dbg !38
  %359 = bitcast i32 %358 to float, !dbg !38
  %360 = fcmp ogt float %356, %359, !dbg !40
  %361 = fcmp uno float %356, 0.000000e+00, !dbg !41
  %362 = or i1 %360, %361, !dbg !42
  %363 = select i1 %362, float %356, float %359, !dbg !43
  %364 = bitcast float %363 to i32, !dbg !38
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !38
  %366 = bitcast i32 %365 to float, !dbg !38
  %367 = fcmp ogt float %363, %366, !dbg !40
  %368 = fcmp uno float %363, 0.000000e+00, !dbg !41
  %369 = or i1 %367, %368, !dbg !42
  %370 = select i1 %369, float %363, float %366, !dbg !43
  %371 = bitcast float %370 to i32, !dbg !38
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !38
  %373 = bitcast i32 %372 to float, !dbg !38
  %374 = fcmp ogt float %370, %373, !dbg !40
  %375 = fcmp uno float %370, 0.000000e+00, !dbg !41
  %376 = or i1 %374, %375, !dbg !42
  %377 = select i1 %376, float %370, float %373, !dbg !43
  %378 = bitcast float %377 to i32, !dbg !38
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !38
  %380 = bitcast i32 %379 to float, !dbg !38
  %381 = fcmp ogt float %377, %380, !dbg !40
  %382 = fcmp uno float %377, 0.000000e+00, !dbg !41
  %383 = or i1 %381, %382, !dbg !42
  %384 = select i1 %383, i32 %378, i32 %379, !dbg !43
  %385 = insertelement <1 x i32> poison, i32 %384, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %385, i1 %288) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %386 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %294) #4, !dbg !38
  %387 = bitcast i32 %386 to float, !dbg !38
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !38
  %389 = bitcast i32 %388 to float, !dbg !38
  %390 = fcmp ogt float %387, %389, !dbg !40
  %391 = fcmp uno float %387, 0.000000e+00, !dbg !41
  %392 = or i1 %391, %390, !dbg !42
  %393 = select i1 %392, i32 %386, i32 %388, !dbg !43
  %394 = insertelement <1 x i32> poison, i32 %393, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %394, i1 %305) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %395 = load float, ptr addrspace(3) %308, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %396 = bitcast float %395 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %396, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %397 = load float, ptr addrspace(3) %312, align 4, !dbg !44
  %398 = sext i32 %215 to i64, !dbg !45
  %399 = getelementptr bfloat, ptr addrspace(1) %1, i64 %398, !dbg !45
  %400 = fptrunc float %313 to bfloat, !dbg !37
  %401 = and i32 %10, 504, !dbg !37
  %402 = icmp eq i32 %401, 0, !dbg !37
  %403 = bitcast bfloat %400 to i16, !dbg !37
  %404 = and i1 %402, %216, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %403, ptr addrspace(1) %399, i1 %404) #4, !dbg !37
  %405 = getelementptr bfloat, ptr addrspace(1) %2, i64 %398, !dbg !46
  %406 = fptrunc float %397 to bfloat, !dbg !44
  %407 = bitcast bfloat %406 to i16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %407, ptr addrspace(1) %405, i1 %404) #4, !dbg !44
  %.inv = fcmp oge float %309, 0.000000e+00, !dbg !47
  %408 = select i1 %.inv, float 0.000000e+00, float %309, !dbg !47
  %409 = fsub float 0.000000e+00, %408, !dbg !49
  %.inv2 = fcmp ole float %395, 0.000000e+00, !dbg !50
  %410 = select i1 %.inv2, float 0.000000e+00, float %395, !dbg !50
  %411 = fcmp ogt float %409, %410, !dbg !52
  %412 = fcmp uno float %409, 0.000000e+00, !dbg !54
  %413 = or i1 %412, %411, !dbg !55
  %414 = select i1 %413, float %409, float %410, !dbg !56
  %415 = fmul float %414, 0x3F80204080000000, !dbg !57
  %416 = fcmp ogt float %415, 0x3EE4F8B580000000, !dbg !58
  %417 = fcmp uno float %415, 0.000000e+00, !dbg !60
  %418 = or i1 %416, %417, !dbg !61
  %419 = select i1 %418, float %415, float 0x3EE4F8B580000000, !dbg !62
  %420 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %419), !dbg !63
  %421 = mul i32 %13, 3072, !dbg !64
  br label %422, !dbg !65

422:                                              ; preds = %7, %422
  %indvars.iv21 = phi i64 [ 0, %7 ], [ %indvars.iv.next22, %422 ]
  %423 = or disjoint i64 %indvars.iv21, %20, !dbg !66
  %424 = lshr i64 %423, 7, !dbg !67
  %425 = trunc i64 %424 to i32
  %426 = mul i32 %425, 526336
  %.reass5 = add i32 %426, %invariant.op
  %427 = sext i32 %.reass5 to i64, !dbg !68
  %428 = getelementptr bfloat, ptr addrspace(1) %0, i64 %427, !dbg !68
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %428, i1 %14) #4, !dbg !69
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !69
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !69
  %432 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !69
  %433 = bitcast i32 %432 to <2 x bfloat>, !dbg !69
  %434 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !69
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !69
  %436 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !69
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !69
  %438 = extractelement <2 x bfloat> %431, i64 0, !dbg !69
  %439 = extractelement <2 x bfloat> %431, i64 1, !dbg !69
  %440 = extractelement <2 x bfloat> %433, i64 0, !dbg !69
  %441 = extractelement <2 x bfloat> %433, i64 1, !dbg !69
  %442 = extractelement <2 x bfloat> %435, i64 0, !dbg !69
  %443 = extractelement <2 x bfloat> %435, i64 1, !dbg !69
  %444 = extractelement <2 x bfloat> %437, i64 0, !dbg !69
  %445 = extractelement <2 x bfloat> %437, i64 1, !dbg !69
  %446 = fpext bfloat %438 to float, !dbg !70
  %447 = fpext bfloat %439 to float, !dbg !70
  %448 = fpext bfloat %440 to float, !dbg !70
  %449 = fpext bfloat %441 to float, !dbg !70
  %450 = fpext bfloat %442 to float, !dbg !70
  %451 = fpext bfloat %443 to float, !dbg !70
  %452 = fpext bfloat %444 to float, !dbg !70
  %453 = fpext bfloat %445 to float, !dbg !70
  %454 = fmul float %420, %446, !dbg !71
  %455 = fmul float %420, %447, !dbg !71
  %456 = fmul float %420, %448, !dbg !71
  %457 = fmul float %420, %449, !dbg !71
  %458 = fmul float %420, %450, !dbg !71
  %459 = fmul float %420, %451, !dbg !71
  %460 = fmul float %420, %452, !dbg !71
  %461 = fmul float %420, %453, !dbg !71
  %462 = tail call float @llvm.nvvm.round.f(float %454) #4, !dbg !72
  %463 = tail call float @llvm.nvvm.round.f(float %455) #4, !dbg !72
  %464 = tail call float @llvm.nvvm.round.f(float %456) #4, !dbg !72
  %465 = tail call float @llvm.nvvm.round.f(float %457) #4, !dbg !72
  %466 = tail call float @llvm.nvvm.round.f(float %458) #4, !dbg !72
  %467 = tail call float @llvm.nvvm.round.f(float %459) #4, !dbg !72
  %468 = tail call float @llvm.nvvm.round.f(float %460) #4, !dbg !72
  %469 = tail call float @llvm.nvvm.round.f(float %461) #4, !dbg !72
  %470 = insertelement <4 x float> poison, float %462, i64 0, !dbg !73
  %471 = insertelement <4 x float> %470, float %463, i64 1, !dbg !73
  %472 = insertelement <4 x float> %471, float %464, i64 2, !dbg !73
  %473 = insertelement <4 x float> %472, float %465, i64 3, !dbg !73
  %474 = fcmp ogt <4 x float> %473, splat (float -1.270000e+02), !dbg !73
  %475 = fcmp uno <4 x float> %473, zeroinitializer, !dbg !75
  %476 = or <4 x i1> %474, %475, !dbg !76
  %477 = select <4 x i1> %476, <4 x float> %473, <4 x float> splat (float -1.270000e+02), !dbg !77
  %478 = fcmp olt <4 x float> %477, splat (float 1.270000e+02), !dbg !78
  %479 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !80
  %480 = or <4 x i1> %478, %479, !dbg !81
  %481 = fptosi <4 x float> %477 to <4 x i8>, !dbg !82
  %482 = select <4 x i1> %480, <4 x i8> %481, <4 x i8> splat (i8 127), !dbg !83
  %483 = insertelement <4 x float> poison, float %466, i64 0, !dbg !73
  %484 = insertelement <4 x float> %483, float %467, i64 1, !dbg !73
  %485 = insertelement <4 x float> %484, float %468, i64 2, !dbg !73
  %486 = insertelement <4 x float> %485, float %469, i64 3, !dbg !73
  %487 = fcmp ogt <4 x float> %486, splat (float -1.270000e+02), !dbg !73
  %488 = fcmp uno <4 x float> %486, zeroinitializer, !dbg !75
  %489 = or <4 x i1> %487, %488, !dbg !76
  %490 = select <4 x i1> %489, <4 x float> %486, <4 x float> splat (float -1.270000e+02), !dbg !77
  %491 = fcmp olt <4 x float> %490, splat (float 1.270000e+02), !dbg !78
  %492 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !80
  %493 = or <4 x i1> %491, %492, !dbg !81
  %494 = fptosi <4 x float> %490 to <4 x i8>, !dbg !82
  %495 = select <4 x i1> %493, <4 x i8> %494, <4 x i8> splat (i8 127), !dbg !83
  %496 = trunc nuw nsw i64 %423 to i32, !dbg !84
  %497 = add i32 %421, %496, !dbg !84
  %498 = sext i32 %497 to i64, !dbg !85
  %499 = getelementptr i8, ptr addrspace(1) %3, i64 %498, !dbg !85
  %500 = bitcast <4 x i8> %482 to i32, !dbg !86
  %501 = bitcast <4 x i8> %495 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %500, i32 %501, ptr addrspace(1) %499, i1 %14) #4, !dbg !86
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 512, !dbg !65
  %502 = icmp samesign ult i64 %indvars.iv21, 2560, !dbg !65
  br i1 %502, label %422, label %503, !dbg !65

503:                                              ; preds = %422
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqx4umnpxfbcu2l6rryhc34knavpax5uagm3mqzm7aatf72hatl.py", directory: "/tmp/torchinductor_root/iq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 37, column: 42, scope: !6)
!17 = !DILocation(line: 31, column: 40, scope: !6)
!18 = !DILocation(line: 42, column: 48, scope: !6)
!19 = !DILocation(line: 37, column: 67, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 91, scope: !6)
!22 = !DILocation(line: 37, column: 152, scope: !6)
!23 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 41, column: 45, scope: !6)
!27 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 94, column: 15, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!32 = !DILocation(line: 43, column: 38, scope: !6)
!33 = !DILocation(line: 96, column: 21, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 96, column: 16, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 97, column: 29, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !32)
!37 = !DILocation(line: 45, column: 36, scope: !6)
!38 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !39)
!39 = !DILocation(line: 44, column: 38, scope: !6)
!40 = !DILocation(line: 102, column: 15, scope: !31, inlinedAt: !39)
!41 = !DILocation(line: 104, column: 21, scope: !31, inlinedAt: !39)
!42 = !DILocation(line: 104, column: 16, scope: !31, inlinedAt: !39)
!43 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !39)
!44 = !DILocation(line: 46, column: 36, scope: !6)
!45 = !DILocation(line: 45, column: 25, scope: !6)
!46 = !DILocation(line: 46, column: 25, scope: !6)
!47 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 44, scope: !6)
!49 = !DILocation(line: 56, column: 16, scope: !6)
!50 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !51)
!51 = !DILocation(line: 57, column: 45, scope: !6)
!52 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !53)
!53 = !DILocation(line: 58, column: 45, scope: !6)
!54 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !53)
!55 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !53)
!56 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !53)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !59)
!59 = !DILocation(line: 63, column: 46, scope: !6)
!60 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !59)
!61 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !59)
!62 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !59)
!63 = !DILocation(line: 66, column: 25, scope: !6)
!64 = !DILocation(line: 78, column: 41, scope: !6)
!65 = !DILocation(line: 47, column: 40, scope: !6)
!66 = !DILocation(line: 48, column: 31, scope: !6)
!67 = !DILocation(line: 53, column: 67, scope: !6)
!68 = !DILocation(line: 53, column: 34, scope: !6)
!69 = !DILocation(line: 53, column: 91, scope: !6)
!70 = !DILocation(line: 53, column: 153, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
