; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = or disjoint i32 %20, 1, !dbg !12
  %24 = or disjoint i32 %20, 2, !dbg !12
  %25 = or disjoint i32 %20, 3, !dbg !12
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = lshr i32 %21, 5, !dbg !14
  %28 = shl i32 %21, 3, !dbg !14
  %29 = and i32 %28, 2040, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = or disjoint i32 %29, 2048, !dbg !14
  %32 = or disjoint i32 %29, 2052, !dbg !14
  %33 = shl i32 %21, 4, !dbg !14
  %34 = and i32 %33, 4080, !dbg !14
  %35 = or disjoint i32 %34, 8, !dbg !14
  %36 = icmp samesign ult i32 %31, 3072, !dbg !15
  %37 = icmp samesign ult i32 %34, 3072, !dbg !15
  %38 = mul i32 %19, 12288, !dbg !16
  %39 = mul i32 %23, 3072, !dbg !16
  %40 = mul i32 %24, 3072, !dbg !16
  %41 = mul i32 %25, 3072, !dbg !16
  %42 = or disjoint i32 %34, %38, !dbg !17
  %43 = or disjoint i32 %35, %38, !dbg !17
  %44 = add i32 %39, %34, !dbg !17
  %45 = add i32 %35, %39, !dbg !17
  %46 = add i32 %40, %34, !dbg !17
  %47 = add i32 %35, %40, !dbg !17
  %48 = add i32 %41, %34, !dbg !17
  %49 = add i32 %35, %41, !dbg !17
  %50 = sext i32 %42 to i64, !dbg !18
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !18
  %52 = sext i32 %43 to i64, !dbg !18
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = sext i32 %44 to i64, !dbg !18
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = sext i32 %45 to i64, !dbg !18
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = sext i32 %46 to i64, !dbg !18
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %47 to i64, !dbg !18
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %48 to i64, !dbg !18
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = sext i32 %49 to i64, !dbg !18
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = and i1 %26, %37, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %51, i1 %66) #5, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !20
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !20
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !20
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !20
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !20
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !20
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !20
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !20
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !20
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !20
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !20
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !20
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !20
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i1 %66) #5, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !20
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !20
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !20
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !20
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !20
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !20
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !20
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !20
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !20
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !20
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !20
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !20
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !20
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %66) #5, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !20
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !20
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !20
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !20
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !20
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !20
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !20
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !20
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !20
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !20
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !20
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !20
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !20
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !20
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !20
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %66) #5, !dbg !20
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !20
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !20
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !20
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !20
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !20
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !20
  %125 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !20
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !20
  %127 = extractelement <2 x bfloat> %120, i64 0, !dbg !20
  %128 = extractelement <2 x bfloat> %120, i64 1, !dbg !20
  %129 = extractelement <2 x bfloat> %122, i64 0, !dbg !20
  %130 = extractelement <2 x bfloat> %122, i64 1, !dbg !20
  %131 = extractelement <2 x bfloat> %124, i64 0, !dbg !20
  %132 = extractelement <2 x bfloat> %124, i64 1, !dbg !20
  %133 = extractelement <2 x bfloat> %126, i64 0, !dbg !20
  %134 = extractelement <2 x bfloat> %126, i64 1, !dbg !20
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %66) #5, !dbg !20
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !20
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !20
  %138 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !20
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !20
  %140 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !20
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !20
  %142 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !20
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !20
  %144 = extractelement <2 x bfloat> %137, i64 0, !dbg !20
  %145 = extractelement <2 x bfloat> %137, i64 1, !dbg !20
  %146 = extractelement <2 x bfloat> %139, i64 0, !dbg !20
  %147 = extractelement <2 x bfloat> %139, i64 1, !dbg !20
  %148 = extractelement <2 x bfloat> %141, i64 0, !dbg !20
  %149 = extractelement <2 x bfloat> %141, i64 1, !dbg !20
  %150 = extractelement <2 x bfloat> %143, i64 0, !dbg !20
  %151 = extractelement <2 x bfloat> %143, i64 1, !dbg !20
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %66) #5, !dbg !20
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !20
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !20
  %155 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !20
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !20
  %157 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !20
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !20
  %159 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !20
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !20
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !20
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !20
  %163 = extractelement <2 x bfloat> %156, i64 0, !dbg !20
  %164 = extractelement <2 x bfloat> %156, i64 1, !dbg !20
  %165 = extractelement <2 x bfloat> %158, i64 0, !dbg !20
  %166 = extractelement <2 x bfloat> %158, i64 1, !dbg !20
  %167 = extractelement <2 x bfloat> %160, i64 0, !dbg !20
  %168 = extractelement <2 x bfloat> %160, i64 1, !dbg !20
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %66) #5, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !20
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !20
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !20
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !20
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !20
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !20
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !20
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !20
  %180 = extractelement <2 x bfloat> %173, i64 0, !dbg !20
  %181 = extractelement <2 x bfloat> %173, i64 1, !dbg !20
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !20
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !20
  %184 = extractelement <2 x bfloat> %177, i64 0, !dbg !20
  %185 = extractelement <2 x bfloat> %177, i64 1, !dbg !20
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %66) #5, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !20
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !20
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !20
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !20
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !20
  %195 = extractelement <2 x bfloat> %188, i64 0, !dbg !20
  %196 = extractelement <2 x bfloat> %188, i64 1, !dbg !20
  %197 = extractelement <2 x bfloat> %190, i64 0, !dbg !20
  %198 = extractelement <2 x bfloat> %190, i64 1, !dbg !20
  %199 = extractelement <2 x bfloat> %192, i64 0, !dbg !20
  %200 = extractelement <2 x bfloat> %192, i64 1, !dbg !20
  %201 = extractelement <2 x bfloat> %194, i64 0, !dbg !20
  %202 = extractelement <2 x bfloat> %194, i64 1, !dbg !20
  %203 = fpext bfloat %76 to float, !dbg !21
  %204 = fpext bfloat %77 to float, !dbg !21
  %205 = fpext bfloat %78 to float, !dbg !21
  %206 = fpext bfloat %79 to float, !dbg !21
  %207 = fpext bfloat %80 to float, !dbg !21
  %208 = fpext bfloat %81 to float, !dbg !21
  %209 = fpext bfloat %82 to float, !dbg !21
  %210 = fpext bfloat %83 to float, !dbg !21
  %211 = fpext bfloat %93 to float, !dbg !21
  %212 = fpext bfloat %94 to float, !dbg !21
  %213 = fpext bfloat %95 to float, !dbg !21
  %214 = fpext bfloat %96 to float, !dbg !21
  %215 = fpext bfloat %97 to float, !dbg !21
  %216 = fpext bfloat %98 to float, !dbg !21
  %217 = fpext bfloat %99 to float, !dbg !21
  %218 = fpext bfloat %100 to float, !dbg !21
  %219 = fpext bfloat %110 to float, !dbg !21
  %220 = fpext bfloat %111 to float, !dbg !21
  %221 = fpext bfloat %112 to float, !dbg !21
  %222 = fpext bfloat %113 to float, !dbg !21
  %223 = fpext bfloat %114 to float, !dbg !21
  %224 = fpext bfloat %115 to float, !dbg !21
  %225 = fpext bfloat %116 to float, !dbg !21
  %226 = fpext bfloat %117 to float, !dbg !21
  %227 = fpext bfloat %127 to float, !dbg !21
  %228 = fpext bfloat %128 to float, !dbg !21
  %229 = fpext bfloat %129 to float, !dbg !21
  %230 = fpext bfloat %130 to float, !dbg !21
  %231 = fpext bfloat %131 to float, !dbg !21
  %232 = fpext bfloat %132 to float, !dbg !21
  %233 = fpext bfloat %133 to float, !dbg !21
  %234 = fpext bfloat %134 to float, !dbg !21
  %235 = fpext bfloat %144 to float, !dbg !21
  %236 = fpext bfloat %145 to float, !dbg !21
  %237 = fpext bfloat %146 to float, !dbg !21
  %238 = fpext bfloat %147 to float, !dbg !21
  %239 = fpext bfloat %148 to float, !dbg !21
  %240 = fpext bfloat %149 to float, !dbg !21
  %241 = fpext bfloat %150 to float, !dbg !21
  %242 = fpext bfloat %151 to float, !dbg !21
  %243 = fpext bfloat %161 to float, !dbg !21
  %244 = fpext bfloat %162 to float, !dbg !21
  %245 = fpext bfloat %163 to float, !dbg !21
  %246 = fpext bfloat %164 to float, !dbg !21
  %247 = fpext bfloat %165 to float, !dbg !21
  %248 = fpext bfloat %166 to float, !dbg !21
  %249 = fpext bfloat %167 to float, !dbg !21
  %250 = fpext bfloat %168 to float, !dbg !21
  %251 = fpext bfloat %178 to float, !dbg !21
  %252 = fpext bfloat %179 to float, !dbg !21
  %253 = fpext bfloat %180 to float, !dbg !21
  %254 = fpext bfloat %181 to float, !dbg !21
  %255 = fpext bfloat %182 to float, !dbg !21
  %256 = fpext bfloat %183 to float, !dbg !21
  %257 = fpext bfloat %184 to float, !dbg !21
  %258 = fpext bfloat %185 to float, !dbg !21
  %259 = fpext bfloat %195 to float, !dbg !21
  %260 = fpext bfloat %196 to float, !dbg !21
  %261 = fpext bfloat %197 to float, !dbg !21
  %262 = fpext bfloat %198 to float, !dbg !21
  %263 = fpext bfloat %199 to float, !dbg !21
  %264 = fpext bfloat %200 to float, !dbg !21
  %265 = fpext bfloat %201 to float, !dbg !21
  %266 = fpext bfloat %202 to float, !dbg !21
  %267 = select i1 %66, float %203, float 0.000000e+00, !dbg !22
  %268 = select i1 %66, float %204, float 0.000000e+00, !dbg !22
  %269 = select i1 %66, float %205, float 0.000000e+00, !dbg !22
  %270 = select i1 %66, float %206, float 0.000000e+00, !dbg !22
  %271 = select i1 %66, float %207, float 0.000000e+00, !dbg !22
  %272 = select i1 %66, float %208, float 0.000000e+00, !dbg !22
  %273 = select i1 %66, float %209, float 0.000000e+00, !dbg !22
  %274 = select i1 %66, float %210, float 0.000000e+00, !dbg !22
  %275 = select i1 %66, float %211, float 0.000000e+00, !dbg !22
  %276 = select i1 %66, float %212, float 0.000000e+00, !dbg !22
  %277 = select i1 %66, float %213, float 0.000000e+00, !dbg !22
  %278 = select i1 %66, float %214, float 0.000000e+00, !dbg !22
  %279 = select i1 %66, float %215, float 0.000000e+00, !dbg !22
  %280 = select i1 %66, float %216, float 0.000000e+00, !dbg !22
  %281 = select i1 %66, float %217, float 0.000000e+00, !dbg !22
  %282 = select i1 %66, float %218, float 0.000000e+00, !dbg !22
  %283 = select i1 %66, float %219, float 0.000000e+00, !dbg !22
  %284 = select i1 %66, float %220, float 0.000000e+00, !dbg !22
  %285 = select i1 %66, float %221, float 0.000000e+00, !dbg !22
  %286 = select i1 %66, float %222, float 0.000000e+00, !dbg !22
  %287 = select i1 %66, float %223, float 0.000000e+00, !dbg !22
  %288 = select i1 %66, float %224, float 0.000000e+00, !dbg !22
  %289 = select i1 %66, float %225, float 0.000000e+00, !dbg !22
  %290 = select i1 %66, float %226, float 0.000000e+00, !dbg !22
  %291 = select i1 %66, float %227, float 0.000000e+00, !dbg !22
  %292 = select i1 %66, float %228, float 0.000000e+00, !dbg !22
  %293 = select i1 %66, float %229, float 0.000000e+00, !dbg !22
  %294 = select i1 %66, float %230, float 0.000000e+00, !dbg !22
  %295 = select i1 %66, float %231, float 0.000000e+00, !dbg !22
  %296 = select i1 %66, float %232, float 0.000000e+00, !dbg !22
  %297 = select i1 %66, float %233, float 0.000000e+00, !dbg !22
  %298 = select i1 %66, float %234, float 0.000000e+00, !dbg !22
  %299 = select i1 %66, float %235, float 0.000000e+00, !dbg !22
  %300 = select i1 %66, float %236, float 0.000000e+00, !dbg !22
  %301 = select i1 %66, float %237, float 0.000000e+00, !dbg !22
  %302 = select i1 %66, float %238, float 0.000000e+00, !dbg !22
  %303 = select i1 %66, float %239, float 0.000000e+00, !dbg !22
  %304 = select i1 %66, float %240, float 0.000000e+00, !dbg !22
  %305 = select i1 %66, float %241, float 0.000000e+00, !dbg !22
  %306 = select i1 %66, float %242, float 0.000000e+00, !dbg !22
  %307 = select i1 %66, float %243, float 0.000000e+00, !dbg !22
  %308 = select i1 %66, float %244, float 0.000000e+00, !dbg !22
  %309 = select i1 %66, float %245, float 0.000000e+00, !dbg !22
  %310 = select i1 %66, float %246, float 0.000000e+00, !dbg !22
  %311 = select i1 %66, float %247, float 0.000000e+00, !dbg !22
  %312 = select i1 %66, float %248, float 0.000000e+00, !dbg !22
  %313 = select i1 %66, float %249, float 0.000000e+00, !dbg !22
  %314 = select i1 %66, float %250, float 0.000000e+00, !dbg !22
  %315 = select i1 %66, float %251, float 0.000000e+00, !dbg !22
  %316 = select i1 %66, float %252, float 0.000000e+00, !dbg !22
  %317 = select i1 %66, float %253, float 0.000000e+00, !dbg !22
  %318 = select i1 %66, float %254, float 0.000000e+00, !dbg !22
  %319 = select i1 %66, float %255, float 0.000000e+00, !dbg !22
  %320 = select i1 %66, float %256, float 0.000000e+00, !dbg !22
  %321 = select i1 %66, float %257, float 0.000000e+00, !dbg !22
  %322 = select i1 %66, float %258, float 0.000000e+00, !dbg !22
  %323 = select i1 %66, float %259, float 0.000000e+00, !dbg !22
  %324 = select i1 %66, float %260, float 0.000000e+00, !dbg !22
  %325 = select i1 %66, float %261, float 0.000000e+00, !dbg !22
  %326 = select i1 %66, float %262, float 0.000000e+00, !dbg !22
  %327 = select i1 %66, float %263, float 0.000000e+00, !dbg !22
  %328 = select i1 %66, float %264, float 0.000000e+00, !dbg !22
  %329 = select i1 %66, float %265, float 0.000000e+00, !dbg !22
  %330 = select i1 %66, float %266, float 0.000000e+00, !dbg !22
  %331 = select i1 %66, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %332 = fsub float %268, %267, !dbg !24
  %333 = select i1 %66, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !30
  %335 = tail call float @llvm.nvvm.div.full(float %331, float %333), !dbg !31
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !32
  %337 = fmul float %332, %336, !dbg !33
  %338 = fadd float %267, %337, !dbg !34
  %339 = fmul float %332, %332, !dbg !35
  %340 = fmul float %331, %339, !dbg !36
  %341 = fmul float %340, %336, !dbg !37
  %342 = fadd float %341, 0.000000e+00, !dbg !38
  %343 = fsub float %269, %338, !dbg !24
  %344 = select i1 %66, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %345 = fcmp oeq float %344, 0.000000e+00, !dbg !30
  %346 = tail call float @llvm.nvvm.div.full(float %331, float %344), !dbg !31
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !32
  %348 = fmul float %347, %343, !dbg !33
  %349 = fadd float %338, %348, !dbg !34
  %350 = fmul float %343, %343, !dbg !35
  %351 = fmul float %333, %350, !dbg !36
  %352 = fmul float %347, %351, !dbg !37
  %353 = fadd float %342, %352, !dbg !38
  %354 = fsub float %270, %349, !dbg !24
  %355 = select i1 %66, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !30
  %357 = tail call float @llvm.nvvm.div.full(float %331, float %355), !dbg !31
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !32
  %359 = fmul float %358, %354, !dbg !33
  %360 = fadd float %349, %359, !dbg !34
  %361 = fmul float %354, %354, !dbg !35
  %362 = fmul float %344, %361, !dbg !36
  %363 = fmul float %358, %362, !dbg !37
  %364 = fadd float %353, %363, !dbg !38
  %365 = fsub float %271, %360, !dbg !24
  %366 = select i1 %66, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !30
  %368 = tail call float @llvm.nvvm.div.full(float %331, float %366), !dbg !31
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !32
  %370 = fmul float %369, %365, !dbg !33
  %371 = fadd float %360, %370, !dbg !34
  %372 = fmul float %365, %365, !dbg !35
  %373 = fmul float %355, %372, !dbg !36
  %374 = fmul float %369, %373, !dbg !37
  %375 = fadd float %364, %374, !dbg !38
  %376 = fsub float %272, %371, !dbg !24
  %377 = select i1 %66, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !30
  %379 = tail call float @llvm.nvvm.div.full(float %331, float %377), !dbg !31
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !32
  %381 = fmul float %380, %376, !dbg !33
  %382 = fadd float %371, %381, !dbg !34
  %383 = fmul float %376, %376, !dbg !35
  %384 = fmul float %366, %383, !dbg !36
  %385 = fmul float %380, %384, !dbg !37
  %386 = fadd float %375, %385, !dbg !38
  %387 = fsub float %273, %382, !dbg !24
  %388 = select i1 %66, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !30
  %390 = tail call float @llvm.nvvm.div.full(float %331, float %388), !dbg !31
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !32
  %392 = fmul float %391, %387, !dbg !33
  %393 = fadd float %382, %392, !dbg !34
  %394 = fmul float %387, %387, !dbg !35
  %395 = fmul float %377, %394, !dbg !36
  %396 = fmul float %391, %395, !dbg !37
  %397 = fadd float %386, %396, !dbg !38
  %398 = fsub float %274, %393, !dbg !24
  %399 = select i1 %66, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !30
  %401 = tail call float @llvm.nvvm.div.full(float %331, float %399), !dbg !31
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !32
  %403 = fmul float %402, %398, !dbg !33
  %404 = fadd float %393, %403, !dbg !34
  %405 = fmul float %398, %398, !dbg !35
  %406 = fmul float %388, %405, !dbg !36
  %407 = fmul float %402, %406, !dbg !37
  %408 = fadd float %397, %407, !dbg !38
  %409 = fsub float %275, %404, !dbg !24
  %410 = select i1 %66, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !30
  %412 = tail call float @llvm.nvvm.div.full(float %331, float %410), !dbg !31
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !32
  %414 = fmul float %413, %409, !dbg !33
  %415 = fadd float %404, %414, !dbg !34
  %416 = fadd float %408, 0.000000e+00, !dbg !39
  %417 = fmul float %409, %409, !dbg !35
  %418 = fmul float %399, %417, !dbg !36
  %419 = fmul float %413, %418, !dbg !37
  %420 = fadd float %416, %419, !dbg !38
  %421 = fsub float %276, %415, !dbg !24
  %422 = select i1 %66, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !30
  %424 = tail call float @llvm.nvvm.div.full(float %331, float %422), !dbg !31
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !32
  %426 = fmul float %425, %421, !dbg !33
  %427 = fadd float %415, %426, !dbg !34
  %428 = fmul float %421, %421, !dbg !35
  %429 = fmul float %410, %428, !dbg !36
  %430 = fmul float %425, %429, !dbg !37
  %431 = fadd float %420, %430, !dbg !38
  %432 = fsub float %277, %427, !dbg !24
  %433 = select i1 %66, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !30
  %435 = tail call float @llvm.nvvm.div.full(float %331, float %433), !dbg !31
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !32
  %437 = fmul float %436, %432, !dbg !33
  %438 = fadd float %427, %437, !dbg !34
  %439 = fmul float %432, %432, !dbg !35
  %440 = fmul float %422, %439, !dbg !36
  %441 = fmul float %436, %440, !dbg !37
  %442 = fadd float %431, %441, !dbg !38
  %443 = fsub float %278, %438, !dbg !24
  %444 = select i1 %66, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !30
  %446 = tail call float @llvm.nvvm.div.full(float %331, float %444), !dbg !31
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !32
  %448 = fmul float %447, %443, !dbg !33
  %449 = fadd float %438, %448, !dbg !34
  %450 = fmul float %443, %443, !dbg !35
  %451 = fmul float %433, %450, !dbg !36
  %452 = fmul float %447, %451, !dbg !37
  %453 = fadd float %442, %452, !dbg !38
  %454 = fsub float %279, %449, !dbg !24
  %455 = select i1 %66, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %456 = fcmp oeq float %455, 0.000000e+00, !dbg !30
  %457 = tail call float @llvm.nvvm.div.full(float %331, float %455), !dbg !31
  %458 = select i1 %456, float 0.000000e+00, float %457, !dbg !32
  %459 = fmul float %458, %454, !dbg !33
  %460 = fadd float %449, %459, !dbg !34
  %461 = fmul float %454, %454, !dbg !35
  %462 = fmul float %444, %461, !dbg !36
  %463 = fmul float %458, %462, !dbg !37
  %464 = fadd float %453, %463, !dbg !38
  %465 = fsub float %280, %460, !dbg !24
  %466 = select i1 %66, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %467 = fcmp oeq float %466, 0.000000e+00, !dbg !30
  %468 = tail call float @llvm.nvvm.div.full(float %331, float %466), !dbg !31
  %469 = select i1 %467, float 0.000000e+00, float %468, !dbg !32
  %470 = fmul float %469, %465, !dbg !33
  %471 = fadd float %460, %470, !dbg !34
  %472 = fmul float %465, %465, !dbg !35
  %473 = fmul float %455, %472, !dbg !36
  %474 = fmul float %469, %473, !dbg !37
  %475 = fadd float %464, %474, !dbg !38
  %476 = fsub float %281, %471, !dbg !24
  %477 = select i1 %66, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %478 = fcmp oeq float %477, 0.000000e+00, !dbg !30
  %479 = tail call float @llvm.nvvm.div.full(float %331, float %477), !dbg !31
  %480 = select i1 %478, float 0.000000e+00, float %479, !dbg !32
  %481 = fmul float %480, %476, !dbg !33
  %482 = fadd float %471, %481, !dbg !34
  %483 = fadd float %475, 0.000000e+00, !dbg !39
  %484 = fmul float %476, %476, !dbg !35
  %485 = fmul float %466, %484, !dbg !36
  %486 = fmul float %480, %485, !dbg !37
  %487 = fadd float %483, %486, !dbg !38
  %488 = fsub float %282, %482, !dbg !24
  %489 = select i1 %66, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !30
  %491 = tail call float @llvm.nvvm.div.full(float %331, float %489), !dbg !31
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !32
  %493 = fmul float %492, %488, !dbg !33
  %494 = fadd float %482, %493, !dbg !34
  %495 = fmul float %488, %488, !dbg !35
  %496 = fmul float %477, %495, !dbg !36
  %497 = fmul float %492, %496, !dbg !37
  %498 = fadd float %487, %497, !dbg !38
  %499 = fsub float %284, %283, !dbg !24
  %500 = fmul float %499, %336, !dbg !33
  %501 = fadd float %283, %500, !dbg !34
  %502 = fmul float %499, %499, !dbg !35
  %503 = fmul float %331, %502, !dbg !36
  %504 = fmul float %336, %503, !dbg !37
  %505 = fadd float %504, 0.000000e+00, !dbg !38
  %506 = fsub float %285, %501, !dbg !24
  %507 = fmul float %347, %506, !dbg !33
  %508 = fadd float %501, %507, !dbg !34
  %509 = fmul float %506, %506, !dbg !35
  %510 = fmul float %333, %509, !dbg !36
  %511 = fmul float %347, %510, !dbg !37
  %512 = fadd float %505, %511, !dbg !38
  %513 = fsub float %286, %508, !dbg !24
  %514 = fmul float %358, %513, !dbg !33
  %515 = fadd float %508, %514, !dbg !34
  %516 = fmul float %513, %513, !dbg !35
  %517 = fmul float %344, %516, !dbg !36
  %518 = fmul float %358, %517, !dbg !37
  %519 = fadd float %512, %518, !dbg !38
  %520 = fsub float %287, %515, !dbg !24
  %521 = fmul float %369, %520, !dbg !33
  %522 = fadd float %515, %521, !dbg !34
  %523 = fmul float %520, %520, !dbg !35
  %524 = fmul float %355, %523, !dbg !36
  %525 = fmul float %369, %524, !dbg !37
  %526 = fadd float %519, %525, !dbg !38
  %527 = fsub float %288, %522, !dbg !24
  %528 = fmul float %380, %527, !dbg !33
  %529 = fadd float %522, %528, !dbg !34
  %530 = fmul float %527, %527, !dbg !35
  %531 = fmul float %366, %530, !dbg !36
  %532 = fmul float %380, %531, !dbg !37
  %533 = fadd float %526, %532, !dbg !38
  %534 = fsub float %289, %529, !dbg !24
  %535 = fmul float %391, %534, !dbg !33
  %536 = fadd float %529, %535, !dbg !34
  %537 = fmul float %534, %534, !dbg !35
  %538 = fmul float %377, %537, !dbg !36
  %539 = fmul float %391, %538, !dbg !37
  %540 = fadd float %533, %539, !dbg !38
  %541 = fsub float %290, %536, !dbg !24
  %542 = fmul float %402, %541, !dbg !33
  %543 = fadd float %536, %542, !dbg !34
  %544 = fmul float %541, %541, !dbg !35
  %545 = fmul float %388, %544, !dbg !36
  %546 = fmul float %402, %545, !dbg !37
  %547 = fadd float %540, %546, !dbg !38
  %548 = fsub float %291, %543, !dbg !24
  %549 = fmul float %413, %548, !dbg !33
  %550 = fadd float %543, %549, !dbg !34
  %551 = fadd float %547, 0.000000e+00, !dbg !39
  %552 = fmul float %548, %548, !dbg !35
  %553 = fmul float %399, %552, !dbg !36
  %554 = fmul float %413, %553, !dbg !37
  %555 = fadd float %551, %554, !dbg !38
  %556 = fsub float %292, %550, !dbg !24
  %557 = fmul float %425, %556, !dbg !33
  %558 = fadd float %550, %557, !dbg !34
  %559 = fmul float %556, %556, !dbg !35
  %560 = fmul float %410, %559, !dbg !36
  %561 = fmul float %425, %560, !dbg !37
  %562 = fadd float %555, %561, !dbg !38
  %563 = fsub float %293, %558, !dbg !24
  %564 = fmul float %436, %563, !dbg !33
  %565 = fadd float %558, %564, !dbg !34
  %566 = fmul float %563, %563, !dbg !35
  %567 = fmul float %422, %566, !dbg !36
  %568 = fmul float %436, %567, !dbg !37
  %569 = fadd float %562, %568, !dbg !38
  %570 = fsub float %294, %565, !dbg !24
  %571 = fmul float %447, %570, !dbg !33
  %572 = fadd float %565, %571, !dbg !34
  %573 = fmul float %570, %570, !dbg !35
  %574 = fmul float %433, %573, !dbg !36
  %575 = fmul float %447, %574, !dbg !37
  %576 = fadd float %569, %575, !dbg !38
  %577 = fsub float %295, %572, !dbg !24
  %578 = fmul float %458, %577, !dbg !33
  %579 = fadd float %572, %578, !dbg !34
  %580 = fmul float %577, %577, !dbg !35
  %581 = fmul float %444, %580, !dbg !36
  %582 = fmul float %458, %581, !dbg !37
  %583 = fadd float %576, %582, !dbg !38
  %584 = fsub float %296, %579, !dbg !24
  %585 = fmul float %469, %584, !dbg !33
  %586 = fadd float %579, %585, !dbg !34
  %587 = fmul float %584, %584, !dbg !35
  %588 = fmul float %455, %587, !dbg !36
  %589 = fmul float %469, %588, !dbg !37
  %590 = fadd float %583, %589, !dbg !38
  %591 = fsub float %297, %586, !dbg !24
  %592 = fmul float %480, %591, !dbg !33
  %593 = fadd float %586, %592, !dbg !34
  %594 = fadd float %590, 0.000000e+00, !dbg !39
  %595 = fmul float %591, %591, !dbg !35
  %596 = fmul float %466, %595, !dbg !36
  %597 = fmul float %480, %596, !dbg !37
  %598 = fadd float %594, %597, !dbg !38
  %599 = fsub float %298, %593, !dbg !24
  %600 = fmul float %492, %599, !dbg !33
  %601 = fadd float %593, %600, !dbg !34
  %602 = fmul float %599, %599, !dbg !35
  %603 = fmul float %477, %602, !dbg !36
  %604 = fmul float %492, %603, !dbg !37
  %605 = fadd float %598, %604, !dbg !38
  %606 = fsub float %300, %299, !dbg !24
  %607 = fmul float %336, %606, !dbg !33
  %608 = fadd float %299, %607, !dbg !34
  %609 = fmul float %606, %606, !dbg !35
  %610 = fmul float %331, %609, !dbg !36
  %611 = fmul float %336, %610, !dbg !37
  %612 = fadd float %611, 0.000000e+00, !dbg !38
  %613 = fsub float %301, %608, !dbg !24
  %614 = fmul float %347, %613, !dbg !33
  %615 = fadd float %608, %614, !dbg !34
  %616 = fmul float %613, %613, !dbg !35
  %617 = fmul float %333, %616, !dbg !36
  %618 = fmul float %347, %617, !dbg !37
  %619 = fadd float %612, %618, !dbg !38
  %620 = fsub float %302, %615, !dbg !24
  %621 = fmul float %358, %620, !dbg !33
  %622 = fadd float %615, %621, !dbg !34
  %623 = fmul float %620, %620, !dbg !35
  %624 = fmul float %344, %623, !dbg !36
  %625 = fmul float %358, %624, !dbg !37
  %626 = fadd float %619, %625, !dbg !38
  %627 = fsub float %303, %622, !dbg !24
  %628 = fmul float %369, %627, !dbg !33
  %629 = fadd float %622, %628, !dbg !34
  %630 = fmul float %627, %627, !dbg !35
  %631 = fmul float %355, %630, !dbg !36
  %632 = fmul float %369, %631, !dbg !37
  %633 = fadd float %626, %632, !dbg !38
  %634 = fsub float %304, %629, !dbg !24
  %635 = fmul float %380, %634, !dbg !33
  %636 = fadd float %629, %635, !dbg !34
  %637 = fmul float %634, %634, !dbg !35
  %638 = fmul float %366, %637, !dbg !36
  %639 = fmul float %380, %638, !dbg !37
  %640 = fadd float %633, %639, !dbg !38
  %641 = fsub float %305, %636, !dbg !24
  %642 = fmul float %391, %641, !dbg !33
  %643 = fadd float %636, %642, !dbg !34
  %644 = fmul float %641, %641, !dbg !35
  %645 = fmul float %377, %644, !dbg !36
  %646 = fmul float %391, %645, !dbg !37
  %647 = fadd float %640, %646, !dbg !38
  %648 = fsub float %306, %643, !dbg !24
  %649 = fmul float %402, %648, !dbg !33
  %650 = fadd float %643, %649, !dbg !34
  %651 = fmul float %648, %648, !dbg !35
  %652 = fmul float %388, %651, !dbg !36
  %653 = fmul float %402, %652, !dbg !37
  %654 = fadd float %647, %653, !dbg !38
  %655 = fsub float %307, %650, !dbg !24
  %656 = fmul float %413, %655, !dbg !33
  %657 = fadd float %650, %656, !dbg !34
  %658 = fadd float %654, 0.000000e+00, !dbg !39
  %659 = fmul float %655, %655, !dbg !35
  %660 = fmul float %399, %659, !dbg !36
  %661 = fmul float %413, %660, !dbg !37
  %662 = fadd float %658, %661, !dbg !38
  %663 = fsub float %308, %657, !dbg !24
  %664 = fmul float %425, %663, !dbg !33
  %665 = fadd float %657, %664, !dbg !34
  %666 = fmul float %663, %663, !dbg !35
  %667 = fmul float %410, %666, !dbg !36
  %668 = fmul float %425, %667, !dbg !37
  %669 = fadd float %662, %668, !dbg !38
  %670 = fsub float %309, %665, !dbg !24
  %671 = fmul float %436, %670, !dbg !33
  %672 = fadd float %665, %671, !dbg !34
  %673 = fmul float %670, %670, !dbg !35
  %674 = fmul float %422, %673, !dbg !36
  %675 = fmul float %436, %674, !dbg !37
  %676 = fadd float %669, %675, !dbg !38
  %677 = fsub float %310, %672, !dbg !24
  %678 = fmul float %447, %677, !dbg !33
  %679 = fadd float %672, %678, !dbg !34
  %680 = fmul float %677, %677, !dbg !35
  %681 = fmul float %433, %680, !dbg !36
  %682 = fmul float %447, %681, !dbg !37
  %683 = fadd float %676, %682, !dbg !38
  %684 = fsub float %311, %679, !dbg !24
  %685 = fmul float %458, %684, !dbg !33
  %686 = fadd float %679, %685, !dbg !34
  %687 = fmul float %684, %684, !dbg !35
  %688 = fmul float %444, %687, !dbg !36
  %689 = fmul float %458, %688, !dbg !37
  %690 = fadd float %683, %689, !dbg !38
  %691 = fsub float %312, %686, !dbg !24
  %692 = fmul float %469, %691, !dbg !33
  %693 = fadd float %686, %692, !dbg !34
  %694 = fmul float %691, %691, !dbg !35
  %695 = fmul float %455, %694, !dbg !36
  %696 = fmul float %469, %695, !dbg !37
  %697 = fadd float %690, %696, !dbg !38
  %698 = fsub float %313, %693, !dbg !24
  %699 = fmul float %480, %698, !dbg !33
  %700 = fadd float %693, %699, !dbg !34
  %701 = fadd float %697, 0.000000e+00, !dbg !39
  %702 = fmul float %698, %698, !dbg !35
  %703 = fmul float %466, %702, !dbg !36
  %704 = fmul float %480, %703, !dbg !37
  %705 = fadd float %701, %704, !dbg !38
  %706 = fsub float %314, %700, !dbg !24
  %707 = fmul float %492, %706, !dbg !33
  %708 = fadd float %700, %707, !dbg !34
  %709 = fmul float %706, %706, !dbg !35
  %710 = fmul float %477, %709, !dbg !36
  %711 = fmul float %492, %710, !dbg !37
  %712 = fadd float %705, %711, !dbg !38
  %713 = fsub float %316, %315, !dbg !24
  %714 = fmul float %336, %713, !dbg !33
  %715 = fadd float %315, %714, !dbg !34
  %716 = fmul float %713, %713, !dbg !35
  %717 = fmul float %331, %716, !dbg !36
  %718 = fmul float %336, %717, !dbg !37
  %719 = fadd float %718, 0.000000e+00, !dbg !38
  %720 = fsub float %317, %715, !dbg !24
  %721 = fmul float %347, %720, !dbg !33
  %722 = fadd float %715, %721, !dbg !34
  %723 = fmul float %720, %720, !dbg !35
  %724 = fmul float %333, %723, !dbg !36
  %725 = fmul float %347, %724, !dbg !37
  %726 = fadd float %719, %725, !dbg !38
  %727 = fsub float %318, %722, !dbg !24
  %728 = fmul float %358, %727, !dbg !33
  %729 = fadd float %722, %728, !dbg !34
  %730 = fmul float %727, %727, !dbg !35
  %731 = fmul float %344, %730, !dbg !36
  %732 = fmul float %358, %731, !dbg !37
  %733 = fadd float %726, %732, !dbg !38
  %734 = fsub float %319, %729, !dbg !24
  %735 = fmul float %369, %734, !dbg !33
  %736 = fadd float %729, %735, !dbg !34
  %737 = fmul float %734, %734, !dbg !35
  %738 = fmul float %355, %737, !dbg !36
  %739 = fmul float %369, %738, !dbg !37
  %740 = fadd float %733, %739, !dbg !38
  %741 = fsub float %320, %736, !dbg !24
  %742 = fmul float %380, %741, !dbg !33
  %743 = fadd float %736, %742, !dbg !34
  %744 = fmul float %741, %741, !dbg !35
  %745 = fmul float %366, %744, !dbg !36
  %746 = fmul float %380, %745, !dbg !37
  %747 = fadd float %740, %746, !dbg !38
  %748 = fsub float %321, %743, !dbg !24
  %749 = fmul float %391, %748, !dbg !33
  %750 = fadd float %743, %749, !dbg !34
  %751 = fmul float %748, %748, !dbg !35
  %752 = fmul float %377, %751, !dbg !36
  %753 = fmul float %391, %752, !dbg !37
  %754 = fadd float %747, %753, !dbg !38
  %755 = fsub float %322, %750, !dbg !24
  %756 = fmul float %402, %755, !dbg !33
  %757 = fadd float %750, %756, !dbg !34
  %758 = fmul float %755, %755, !dbg !35
  %759 = fmul float %388, %758, !dbg !36
  %760 = fmul float %402, %759, !dbg !37
  %761 = fadd float %754, %760, !dbg !38
  %762 = fsub float %323, %757, !dbg !24
  %763 = fmul float %413, %762, !dbg !33
  %764 = fadd float %757, %763, !dbg !34
  %765 = fadd float %761, 0.000000e+00, !dbg !39
  %766 = fmul float %762, %762, !dbg !35
  %767 = fmul float %399, %766, !dbg !36
  %768 = fmul float %413, %767, !dbg !37
  %769 = fadd float %765, %768, !dbg !38
  %770 = fsub float %324, %764, !dbg !24
  %771 = fmul float %425, %770, !dbg !33
  %772 = fadd float %764, %771, !dbg !34
  %773 = fmul float %770, %770, !dbg !35
  %774 = fmul float %410, %773, !dbg !36
  %775 = fmul float %425, %774, !dbg !37
  %776 = fadd float %769, %775, !dbg !38
  %777 = fsub float %325, %772, !dbg !24
  %778 = fmul float %436, %777, !dbg !33
  %779 = fadd float %772, %778, !dbg !34
  %780 = fmul float %777, %777, !dbg !35
  %781 = fmul float %422, %780, !dbg !36
  %782 = fmul float %436, %781, !dbg !37
  %783 = fadd float %776, %782, !dbg !38
  %784 = fsub float %326, %779, !dbg !24
  %785 = fmul float %447, %784, !dbg !33
  %786 = fadd float %779, %785, !dbg !34
  %787 = fmul float %784, %784, !dbg !35
  %788 = fmul float %433, %787, !dbg !36
  %789 = fmul float %447, %788, !dbg !37
  %790 = fadd float %783, %789, !dbg !38
  %791 = fsub float %327, %786, !dbg !24
  %792 = fmul float %458, %791, !dbg !33
  %793 = fadd float %786, %792, !dbg !34
  %794 = fmul float %791, %791, !dbg !35
  %795 = fmul float %444, %794, !dbg !36
  %796 = fmul float %458, %795, !dbg !37
  %797 = fadd float %790, %796, !dbg !38
  %798 = fsub float %328, %793, !dbg !24
  %799 = fmul float %469, %798, !dbg !33
  %800 = fadd float %793, %799, !dbg !34
  %801 = fmul float %798, %798, !dbg !35
  %802 = fmul float %455, %801, !dbg !36
  %803 = fmul float %469, %802, !dbg !37
  %804 = fadd float %797, %803, !dbg !38
  %805 = fsub float %329, %800, !dbg !24
  %806 = fmul float %480, %805, !dbg !33
  %807 = fadd float %800, %806, !dbg !34
  %808 = fadd float %804, 0.000000e+00, !dbg !39
  %809 = fmul float %805, %805, !dbg !35
  %810 = fmul float %466, %809, !dbg !36
  %811 = fmul float %480, %810, !dbg !37
  %812 = fadd float %808, %811, !dbg !38
  %813 = fsub float %330, %807, !dbg !24
  %814 = fmul float %492, %813, !dbg !33
  %815 = fadd float %807, %814, !dbg !34
  %816 = fmul float %813, %813, !dbg !35
  %817 = fmul float %477, %816, !dbg !36
  %818 = fmul float %492, %817, !dbg !37
  %819 = fadd float %812, %818, !dbg !38
  %820 = bitcast float %494 to i32, !dbg !40
  %821 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %820, i32 16, i32 31), !dbg !40
  %822 = bitcast i32 %821 to float, !dbg !40
  %823 = bitcast float %498 to i32, !dbg !40
  %824 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %823, i32 16, i32 31), !dbg !40
  %825 = bitcast i32 %824 to float, !dbg !40
  %826 = bitcast float %489 to i32, !dbg !40
  %827 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %826, i32 16, i32 31), !dbg !40
  %828 = bitcast i32 %827 to float, !dbg !40
  %829 = fsub float %822, %494, !dbg !24
  %830 = fadd float %489, %828, !dbg !29
  %831 = fcmp oeq float %830, 0.000000e+00, !dbg !30
  %832 = tail call float @llvm.nvvm.div.full(float %828, float %830), !dbg !31
  %833 = select i1 %831, float 0.000000e+00, float %832, !dbg !32
  %834 = fmul float %833, %829, !dbg !33
  %835 = fadd float %494, %834, !dbg !34
  %836 = fadd float %498, %825, !dbg !39
  %837 = fmul float %829, %829, !dbg !35
  %838 = fmul float %489, %837, !dbg !36
  %839 = fmul float %833, %838, !dbg !37
  %840 = fadd float %836, %839, !dbg !38
  %841 = bitcast float %835 to i32, !dbg !40
  %842 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %841, i32 8, i32 31), !dbg !40
  %843 = bitcast i32 %842 to float, !dbg !40
  %844 = bitcast float %840 to i32, !dbg !40
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 8, i32 31), !dbg !40
  %846 = bitcast i32 %845 to float, !dbg !40
  %847 = bitcast float %830 to i32, !dbg !40
  %848 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %847, i32 8, i32 31), !dbg !40
  %849 = bitcast i32 %848 to float, !dbg !40
  %850 = fsub float %843, %835, !dbg !24
  %851 = fadd float %830, %849, !dbg !29
  %852 = fcmp oeq float %851, 0.000000e+00, !dbg !30
  %853 = tail call float @llvm.nvvm.div.full(float %849, float %851), !dbg !31
  %854 = select i1 %852, float 0.000000e+00, float %853, !dbg !32
  %855 = fmul float %854, %850, !dbg !33
  %856 = fadd float %835, %855, !dbg !34
  %857 = fadd float %840, %846, !dbg !39
  %858 = fmul float %850, %850, !dbg !35
  %859 = fmul float %830, %858, !dbg !36
  %860 = fmul float %854, %859, !dbg !37
  %861 = fadd float %857, %860, !dbg !38
  %862 = bitcast float %856 to i32, !dbg !40
  %863 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %862, i32 4, i32 31), !dbg !40
  %864 = bitcast i32 %863 to float, !dbg !40
  %865 = bitcast float %861 to i32, !dbg !40
  %866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %865, i32 4, i32 31), !dbg !40
  %867 = bitcast i32 %866 to float, !dbg !40
  %868 = bitcast float %851 to i32, !dbg !40
  %869 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %868, i32 4, i32 31), !dbg !40
  %870 = bitcast i32 %869 to float, !dbg !40
  %871 = fsub float %864, %856, !dbg !24
  %872 = fadd float %851, %870, !dbg !29
  %873 = fcmp oeq float %872, 0.000000e+00, !dbg !30
  %874 = tail call float @llvm.nvvm.div.full(float %870, float %872), !dbg !31
  %875 = select i1 %873, float 0.000000e+00, float %874, !dbg !32
  %876 = fmul float %875, %871, !dbg !33
  %877 = fadd float %856, %876, !dbg !34
  %878 = fadd float %861, %867, !dbg !39
  %879 = fmul float %871, %871, !dbg !35
  %880 = fmul float %851, %879, !dbg !36
  %881 = fmul float %875, %880, !dbg !37
  %882 = fadd float %878, %881, !dbg !38
  %883 = bitcast float %877 to i32, !dbg !40
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 2, i32 31), !dbg !40
  %885 = bitcast i32 %884 to float, !dbg !40
  %886 = bitcast float %882 to i32, !dbg !40
  %887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %886, i32 2, i32 31), !dbg !40
  %888 = bitcast i32 %887 to float, !dbg !40
  %889 = bitcast float %872 to i32, !dbg !40
  %890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %889, i32 2, i32 31), !dbg !40
  %891 = bitcast i32 %890 to float, !dbg !40
  %892 = fsub float %885, %877, !dbg !24
  %893 = fadd float %872, %891, !dbg !29
  %894 = fcmp oeq float %893, 0.000000e+00, !dbg !30
  %895 = tail call float @llvm.nvvm.div.full(float %891, float %893), !dbg !31
  %896 = select i1 %894, float 0.000000e+00, float %895, !dbg !32
  %897 = fmul float %896, %892, !dbg !33
  %898 = fadd float %877, %897, !dbg !34
  %899 = fadd float %882, %888, !dbg !39
  %900 = fmul float %892, %892, !dbg !35
  %901 = fmul float %872, %900, !dbg !36
  %902 = fmul float %896, %901, !dbg !37
  %903 = fadd float %899, %902, !dbg !38
  %904 = bitcast float %898 to i32, !dbg !40
  %905 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %904, i32 1, i32 31), !dbg !40
  %906 = bitcast i32 %905 to float, !dbg !40
  %907 = bitcast float %903 to i32, !dbg !40
  %908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %907, i32 1, i32 31), !dbg !40
  %909 = bitcast i32 %908 to float, !dbg !40
  %910 = bitcast float %893 to i32, !dbg !40
  %911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %910, i32 1, i32 31), !dbg !40
  %912 = bitcast i32 %911 to float, !dbg !40
  %913 = fsub float %906, %898, !dbg !24
  %914 = fadd float %893, %912, !dbg !29
  %915 = fcmp oeq float %914, 0.000000e+00, !dbg !30
  %916 = tail call float @llvm.nvvm.div.full(float %912, float %914), !dbg !31
  %917 = select i1 %915, float 0.000000e+00, float %916, !dbg !32
  %918 = fmul float %917, %913, !dbg !33
  %919 = fadd float %898, %918, !dbg !34
  %920 = fadd float %903, %909, !dbg !39
  %921 = fmul float %913, %913, !dbg !35
  %922 = fmul float %893, %921, !dbg !36
  %923 = fmul float %917, %922, !dbg !37
  %924 = fadd float %920, %923, !dbg !38
  %925 = bitcast float %601 to i32, !dbg !40
  %926 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %925, i32 16, i32 31), !dbg !40
  %927 = bitcast i32 %926 to float, !dbg !40
  %928 = bitcast float %605 to i32, !dbg !40
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %928, i32 16, i32 31), !dbg !40
  %930 = bitcast i32 %929 to float, !dbg !40
  %931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %826, i32 16, i32 31), !dbg !40
  %932 = bitcast i32 %931 to float, !dbg !40
  %933 = fsub float %927, %601, !dbg !24
  %934 = fadd float %489, %932, !dbg !29
  %935 = fcmp oeq float %934, 0.000000e+00, !dbg !30
  %936 = tail call float @llvm.nvvm.div.full(float %932, float %934), !dbg !31
  %937 = select i1 %935, float 0.000000e+00, float %936, !dbg !32
  %938 = fmul float %937, %933, !dbg !33
  %939 = fadd float %601, %938, !dbg !34
  %940 = fadd float %605, %930, !dbg !39
  %941 = fmul float %933, %933, !dbg !35
  %942 = fmul float %489, %941, !dbg !36
  %943 = fmul float %937, %942, !dbg !37
  %944 = fadd float %940, %943, !dbg !38
  %945 = bitcast float %939 to i32, !dbg !40
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 8, i32 31), !dbg !40
  %947 = bitcast i32 %946 to float, !dbg !40
  %948 = bitcast float %944 to i32, !dbg !40
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 8, i32 31), !dbg !40
  %950 = bitcast i32 %949 to float, !dbg !40
  %951 = bitcast float %934 to i32, !dbg !40
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 8, i32 31), !dbg !40
  %953 = bitcast i32 %952 to float, !dbg !40
  %954 = fsub float %947, %939, !dbg !24
  %955 = fadd float %934, %953, !dbg !29
  %956 = fcmp oeq float %955, 0.000000e+00, !dbg !30
  %957 = tail call float @llvm.nvvm.div.full(float %953, float %955), !dbg !31
  %958 = select i1 %956, float 0.000000e+00, float %957, !dbg !32
  %959 = fmul float %958, %954, !dbg !33
  %960 = fadd float %939, %959, !dbg !34
  %961 = fadd float %944, %950, !dbg !39
  %962 = fmul float %954, %954, !dbg !35
  %963 = fmul float %934, %962, !dbg !36
  %964 = fmul float %958, %963, !dbg !37
  %965 = fadd float %961, %964, !dbg !38
  %966 = bitcast float %960 to i32, !dbg !40
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 4, i32 31), !dbg !40
  %968 = bitcast i32 %967 to float, !dbg !40
  %969 = bitcast float %965 to i32, !dbg !40
  %970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %969, i32 4, i32 31), !dbg !40
  %971 = bitcast i32 %970 to float, !dbg !40
  %972 = bitcast float %955 to i32, !dbg !40
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 4, i32 31), !dbg !40
  %974 = bitcast i32 %973 to float, !dbg !40
  %975 = fsub float %968, %960, !dbg !24
  %976 = fadd float %955, %974, !dbg !29
  %977 = fcmp oeq float %976, 0.000000e+00, !dbg !30
  %978 = tail call float @llvm.nvvm.div.full(float %974, float %976), !dbg !31
  %979 = select i1 %977, float 0.000000e+00, float %978, !dbg !32
  %980 = fmul float %979, %975, !dbg !33
  %981 = fadd float %960, %980, !dbg !34
  %982 = fadd float %965, %971, !dbg !39
  %983 = fmul float %975, %975, !dbg !35
  %984 = fmul float %955, %983, !dbg !36
  %985 = fmul float %979, %984, !dbg !37
  %986 = fadd float %982, %985, !dbg !38
  %987 = bitcast float %981 to i32, !dbg !40
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 2, i32 31), !dbg !40
  %989 = bitcast i32 %988 to float, !dbg !40
  %990 = bitcast float %986 to i32, !dbg !40
  %991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %990, i32 2, i32 31), !dbg !40
  %992 = bitcast i32 %991 to float, !dbg !40
  %993 = bitcast float %976 to i32, !dbg !40
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 2, i32 31), !dbg !40
  %995 = bitcast i32 %994 to float, !dbg !40
  %996 = fsub float %989, %981, !dbg !24
  %997 = fadd float %976, %995, !dbg !29
  %998 = fcmp oeq float %997, 0.000000e+00, !dbg !30
  %999 = tail call float @llvm.nvvm.div.full(float %995, float %997), !dbg !31
  %1000 = select i1 %998, float 0.000000e+00, float %999, !dbg !32
  %1001 = fmul float %1000, %996, !dbg !33
  %1002 = fadd float %981, %1001, !dbg !34
  %1003 = fadd float %986, %992, !dbg !39
  %1004 = fmul float %996, %996, !dbg !35
  %1005 = fmul float %976, %1004, !dbg !36
  %1006 = fmul float %1000, %1005, !dbg !37
  %1007 = fadd float %1003, %1006, !dbg !38
  %1008 = bitcast float %1002 to i32, !dbg !40
  %1009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1008, i32 1, i32 31), !dbg !40
  %1010 = bitcast i32 %1009 to float, !dbg !40
  %1011 = bitcast float %1007 to i32, !dbg !40
  %1012 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1011, i32 1, i32 31), !dbg !40
  %1013 = bitcast i32 %1012 to float, !dbg !40
  %1014 = bitcast float %997 to i32, !dbg !40
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 1, i32 31), !dbg !40
  %1016 = bitcast i32 %1015 to float, !dbg !40
  %1017 = fsub float %1010, %1002, !dbg !24
  %1018 = fadd float %997, %1016, !dbg !29
  %1019 = fcmp oeq float %1018, 0.000000e+00, !dbg !30
  %1020 = tail call float @llvm.nvvm.div.full(float %1016, float %1018), !dbg !31
  %1021 = select i1 %1019, float 0.000000e+00, float %1020, !dbg !32
  %1022 = fmul float %1021, %1017, !dbg !33
  %1023 = fadd float %1002, %1022, !dbg !34
  %1024 = fadd float %1007, %1013, !dbg !39
  %1025 = fmul float %1017, %1017, !dbg !35
  %1026 = fmul float %997, %1025, !dbg !36
  %1027 = fmul float %1021, %1026, !dbg !37
  %1028 = fadd float %1024, %1027, !dbg !38
  %1029 = bitcast float %708 to i32, !dbg !40
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 16, i32 31), !dbg !40
  %1031 = bitcast i32 %1030 to float, !dbg !40
  %1032 = bitcast float %712 to i32, !dbg !40
  %1033 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1032, i32 16, i32 31), !dbg !40
  %1034 = bitcast i32 %1033 to float, !dbg !40
  %1035 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %826, i32 16, i32 31), !dbg !40
  %1036 = bitcast i32 %1035 to float, !dbg !40
  %1037 = fsub float %1031, %708, !dbg !24
  %1038 = fadd float %489, %1036, !dbg !29
  %1039 = fcmp oeq float %1038, 0.000000e+00, !dbg !30
  %1040 = tail call float @llvm.nvvm.div.full(float %1036, float %1038), !dbg !31
  %1041 = select i1 %1039, float 0.000000e+00, float %1040, !dbg !32
  %1042 = fmul float %1037, %1041, !dbg !33
  %1043 = fadd float %708, %1042, !dbg !34
  %1044 = fadd float %712, %1034, !dbg !39
  %1045 = fmul float %1037, %1037, !dbg !35
  %1046 = fmul float %489, %1045, !dbg !36
  %1047 = fmul float %1046, %1041, !dbg !37
  %1048 = fadd float %1044, %1047, !dbg !38
  %1049 = bitcast float %1043 to i32, !dbg !40
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 8, i32 31), !dbg !40
  %1051 = bitcast i32 %1050 to float, !dbg !40
  %1052 = bitcast float %1048 to i32, !dbg !40
  %1053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1052, i32 8, i32 31), !dbg !40
  %1054 = bitcast i32 %1053 to float, !dbg !40
  %1055 = bitcast float %1038 to i32, !dbg !40
  %1056 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1055, i32 8, i32 31), !dbg !40
  %1057 = bitcast i32 %1056 to float, !dbg !40
  %1058 = fsub float %1051, %1043, !dbg !24
  %1059 = fadd float %1038, %1057, !dbg !29
  %1060 = fcmp oeq float %1059, 0.000000e+00, !dbg !30
  %1061 = tail call float @llvm.nvvm.div.full(float %1057, float %1059), !dbg !31
  %1062 = select i1 %1060, float 0.000000e+00, float %1061, !dbg !32
  %1063 = fmul float %1058, %1062, !dbg !33
  %1064 = fadd float %1043, %1063, !dbg !34
  %1065 = fadd float %1048, %1054, !dbg !39
  %1066 = fmul float %1058, %1058, !dbg !35
  %1067 = fmul float %1038, %1066, !dbg !36
  %1068 = fmul float %1062, %1067, !dbg !37
  %1069 = fadd float %1065, %1068, !dbg !38
  %1070 = bitcast float %1064 to i32, !dbg !40
  %1071 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1070, i32 4, i32 31), !dbg !40
  %1072 = bitcast i32 %1071 to float, !dbg !40
  %1073 = bitcast float %1069 to i32, !dbg !40
  %1074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1073, i32 4, i32 31), !dbg !40
  %1075 = bitcast i32 %1074 to float, !dbg !40
  %1076 = bitcast float %1059 to i32, !dbg !40
  %1077 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1076, i32 4, i32 31), !dbg !40
  %1078 = bitcast i32 %1077 to float, !dbg !40
  %1079 = fsub float %1072, %1064, !dbg !24
  %1080 = fadd float %1059, %1078, !dbg !29
  %1081 = fcmp oeq float %1080, 0.000000e+00, !dbg !30
  %1082 = tail call float @llvm.nvvm.div.full(float %1078, float %1080), !dbg !31
  %1083 = select i1 %1081, float 0.000000e+00, float %1082, !dbg !32
  %1084 = fmul float %1079, %1083, !dbg !33
  %1085 = fadd float %1064, %1084, !dbg !34
  %1086 = fadd float %1069, %1075, !dbg !39
  %1087 = fmul float %1079, %1079, !dbg !35
  %1088 = fmul float %1059, %1087, !dbg !36
  %1089 = fmul float %1083, %1088, !dbg !37
  %1090 = fadd float %1086, %1089, !dbg !38
  %1091 = bitcast float %1085 to i32, !dbg !40
  %1092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1091, i32 2, i32 31), !dbg !40
  %1093 = bitcast i32 %1092 to float, !dbg !40
  %1094 = bitcast float %1090 to i32, !dbg !40
  %1095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1094, i32 2, i32 31), !dbg !40
  %1096 = bitcast i32 %1095 to float, !dbg !40
  %1097 = bitcast float %1080 to i32, !dbg !40
  %1098 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1097, i32 2, i32 31), !dbg !40
  %1099 = bitcast i32 %1098 to float, !dbg !40
  %1100 = fsub float %1093, %1085, !dbg !24
  %1101 = fadd float %1080, %1099, !dbg !29
  %1102 = fcmp oeq float %1101, 0.000000e+00, !dbg !30
  %1103 = tail call float @llvm.nvvm.div.full(float %1099, float %1101), !dbg !31
  %1104 = select i1 %1102, float 0.000000e+00, float %1103, !dbg !32
  %1105 = fmul float %1100, %1104, !dbg !33
  %1106 = fadd float %1085, %1105, !dbg !34
  %1107 = fadd float %1090, %1096, !dbg !39
  %1108 = fmul float %1100, %1100, !dbg !35
  %1109 = fmul float %1080, %1108, !dbg !36
  %1110 = fmul float %1104, %1109, !dbg !37
  %1111 = fadd float %1107, %1110, !dbg !38
  %1112 = bitcast float %1106 to i32, !dbg !40
  %1113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1112, i32 1, i32 31), !dbg !40
  %1114 = bitcast i32 %1113 to float, !dbg !40
  %1115 = bitcast float %1111 to i32, !dbg !40
  %1116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1115, i32 1, i32 31), !dbg !40
  %1117 = bitcast i32 %1116 to float, !dbg !40
  %1118 = bitcast float %1101 to i32, !dbg !40
  %1119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1118, i32 1, i32 31), !dbg !40
  %1120 = bitcast i32 %1119 to float, !dbg !40
  %1121 = fsub float %1114, %1106, !dbg !24
  %1122 = fadd float %1101, %1120, !dbg !29
  %1123 = fcmp oeq float %1122, 0.000000e+00, !dbg !30
  %1124 = tail call float @llvm.nvvm.div.full(float %1120, float %1122), !dbg !31
  %1125 = select i1 %1123, float 0.000000e+00, float %1124, !dbg !32
  %1126 = fmul float %1121, %1125, !dbg !33
  %1127 = fadd float %1106, %1126, !dbg !34
  %1128 = fadd float %1111, %1117, !dbg !39
  %1129 = fmul float %1121, %1121, !dbg !35
  %1130 = fmul float %1101, %1129, !dbg !36
  %1131 = fmul float %1125, %1130, !dbg !37
  %1132 = fadd float %1128, %1131, !dbg !38
  %1133 = bitcast float %815 to i32, !dbg !40
  %1134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1133, i32 16, i32 31), !dbg !40
  %1135 = bitcast i32 %1134 to float, !dbg !40
  %1136 = bitcast float %819 to i32, !dbg !40
  %1137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1136, i32 16, i32 31), !dbg !40
  %1138 = bitcast i32 %1137 to float, !dbg !40
  %1139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %826, i32 16, i32 31), !dbg !40
  %1140 = bitcast i32 %1139 to float, !dbg !40
  %1141 = fsub float %1135, %815, !dbg !24
  %1142 = fadd float %489, %1140, !dbg !29
  %1143 = fcmp oeq float %1142, 0.000000e+00, !dbg !30
  %1144 = tail call float @llvm.nvvm.div.full(float %1140, float %1142), !dbg !31
  %1145 = select i1 %1143, float 0.000000e+00, float %1144, !dbg !32
  %1146 = fmul float %1141, %1145, !dbg !33
  %1147 = fadd float %815, %1146, !dbg !34
  %1148 = fadd float %819, %1138, !dbg !39
  %1149 = fmul float %1141, %1141, !dbg !35
  %1150 = fmul float %489, %1149, !dbg !36
  %1151 = fmul float %1150, %1145, !dbg !37
  %1152 = fadd float %1148, %1151, !dbg !38
  %1153 = bitcast float %1147 to i32, !dbg !40
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 8, i32 31), !dbg !40
  %1155 = bitcast i32 %1154 to float, !dbg !40
  %1156 = bitcast float %1152 to i32, !dbg !40
  %1157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 8, i32 31), !dbg !40
  %1158 = bitcast i32 %1157 to float, !dbg !40
  %1159 = bitcast float %1142 to i32, !dbg !40
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 8, i32 31), !dbg !40
  %1161 = bitcast i32 %1160 to float, !dbg !40
  %1162 = fsub float %1155, %1147, !dbg !24
  %1163 = fadd float %1142, %1161, !dbg !29
  %1164 = fcmp oeq float %1163, 0.000000e+00, !dbg !30
  %1165 = tail call float @llvm.nvvm.div.full(float %1161, float %1163), !dbg !31
  %1166 = select i1 %1164, float 0.000000e+00, float %1165, !dbg !32
  %1167 = fmul float %1162, %1166, !dbg !33
  %1168 = fadd float %1147, %1167, !dbg !34
  %1169 = fadd float %1152, %1158, !dbg !39
  %1170 = fmul float %1162, %1162, !dbg !35
  %1171 = fmul float %1142, %1170, !dbg !36
  %1172 = fmul float %1166, %1171, !dbg !37
  %1173 = fadd float %1169, %1172, !dbg !38
  %1174 = bitcast float %1168 to i32, !dbg !40
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 4, i32 31), !dbg !40
  %1176 = bitcast i32 %1175 to float, !dbg !40
  %1177 = bitcast float %1173 to i32, !dbg !40
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1177, i32 4, i32 31), !dbg !40
  %1179 = bitcast i32 %1178 to float, !dbg !40
  %1180 = bitcast float %1163 to i32, !dbg !40
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 4, i32 31), !dbg !40
  %1182 = bitcast i32 %1181 to float, !dbg !40
  %1183 = fsub float %1176, %1168, !dbg !24
  %1184 = fadd float %1163, %1182, !dbg !29
  %1185 = fcmp oeq float %1184, 0.000000e+00, !dbg !30
  %1186 = tail call float @llvm.nvvm.div.full(float %1182, float %1184), !dbg !31
  %1187 = select i1 %1185, float 0.000000e+00, float %1186, !dbg !32
  %1188 = fmul float %1183, %1187, !dbg !33
  %1189 = fadd float %1168, %1188, !dbg !34
  %1190 = fadd float %1173, %1179, !dbg !39
  %1191 = fmul float %1183, %1183, !dbg !35
  %1192 = fmul float %1163, %1191, !dbg !36
  %1193 = fmul float %1187, %1192, !dbg !37
  %1194 = fadd float %1190, %1193, !dbg !38
  %1195 = bitcast float %1189 to i32, !dbg !40
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 2, i32 31), !dbg !40
  %1197 = bitcast i32 %1196 to float, !dbg !40
  %1198 = bitcast float %1194 to i32, !dbg !40
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1198, i32 2, i32 31), !dbg !40
  %1200 = bitcast i32 %1199 to float, !dbg !40
  %1201 = bitcast float %1184 to i32, !dbg !40
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 2, i32 31), !dbg !40
  %1203 = bitcast i32 %1202 to float, !dbg !40
  %1204 = fsub float %1197, %1189, !dbg !24
  %1205 = fadd float %1184, %1203, !dbg !29
  %1206 = fcmp oeq float %1205, 0.000000e+00, !dbg !30
  %1207 = tail call float @llvm.nvvm.div.full(float %1203, float %1205), !dbg !31
  %1208 = select i1 %1206, float 0.000000e+00, float %1207, !dbg !32
  %1209 = fmul float %1204, %1208, !dbg !33
  %1210 = fadd float %1189, %1209, !dbg !34
  %1211 = fadd float %1194, %1200, !dbg !39
  %1212 = fmul float %1204, %1204, !dbg !35
  %1213 = fmul float %1184, %1212, !dbg !36
  %1214 = fmul float %1208, %1213, !dbg !37
  %1215 = fadd float %1211, %1214, !dbg !38
  %1216 = bitcast float %1210 to i32, !dbg !40
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 1, i32 31), !dbg !40
  %1218 = bitcast i32 %1217 to float, !dbg !40
  %1219 = bitcast float %1215 to i32, !dbg !40
  %1220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1219, i32 1, i32 31), !dbg !40
  %1221 = bitcast i32 %1220 to float, !dbg !40
  %1222 = bitcast float %1205 to i32, !dbg !40
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1222, i32 1, i32 31), !dbg !40
  %1224 = bitcast i32 %1223 to float, !dbg !40
  %1225 = fsub float %1218, %1210, !dbg !24
  %1226 = fadd float %1205, %1224, !dbg !29
  %1227 = fcmp oeq float %1226, 0.000000e+00, !dbg !30
  %1228 = tail call float @llvm.nvvm.div.full(float %1224, float %1226), !dbg !31
  %1229 = select i1 %1227, float 0.000000e+00, float %1228, !dbg !32
  %1230 = fmul float %1225, %1229, !dbg !33
  %1231 = fadd float %1210, %1230, !dbg !34
  %1232 = fadd float %1215, %1221, !dbg !39
  %1233 = fmul float %1225, %1225, !dbg !35
  %1234 = fmul float %1205, %1233, !dbg !36
  %1235 = fmul float %1229, %1234, !dbg !37
  %1236 = fadd float %1232, %1235, !dbg !38
  %1237 = and i32 %27, 7, !dbg !40
  %1238 = icmp eq i32 %22, 0, !dbg !40
  %1239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1237, !dbg !40
  %1240 = bitcast float %919 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1239, <1 x i32> %1240, i1 %1238) #5, !dbg !40
  %1241 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1237, !dbg !40
  %1242 = bitcast float %924 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1242, i1 %1238) #5, !dbg !40
  %1243 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1237, !dbg !40
  %1244 = bitcast float %914 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1243, <1 x i32> %1244, i1 %1238) #5, !dbg !40
  %1245 = or disjoint i32 %1237, 8, !dbg !40
  %1246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1245, !dbg !40
  %1247 = bitcast float %1023 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1246, <1 x i32> %1247, i1 %1238) #5, !dbg !40
  %1248 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1245, !dbg !40
  %1249 = bitcast float %1028 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1249, i1 %1238) #5, !dbg !40
  %1250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1245, !dbg !40
  %1251 = bitcast float %1018 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1250, <1 x i32> %1251, i1 %1238) #5, !dbg !40
  %1252 = or disjoint i32 %1237, 16, !dbg !40
  %1253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1252, !dbg !40
  %1254 = bitcast float %1127 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1253, <1 x i32> %1254, i1 %1238) #5, !dbg !40
  %1255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1252, !dbg !40
  %1256 = bitcast float %1132 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1255, <1 x i32> %1256, i1 %1238) #5, !dbg !40
  %1257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1252, !dbg !40
  %1258 = bitcast float %1122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1257, <1 x i32> %1258, i1 %1238) #5, !dbg !40
  %1259 = or disjoint i32 %1237, 24, !dbg !40
  %1260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1259, !dbg !40
  %1261 = bitcast float %1231 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %1261, i1 %1238) #5, !dbg !40
  %1262 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1259, !dbg !40
  %1263 = bitcast float %1236 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %1263, i1 %1238) #5, !dbg !40
  %1264 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1259, !dbg !40
  %1265 = bitcast float %1226 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1264, <1 x i32> %1265, i1 %1238) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1266 = icmp slt i32 %21, 32, !dbg !40
  %1267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %1268 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1267, i1 %1266) #5, !dbg !40
  %1269 = bitcast i32 %1268 to float, !dbg !40
  %1270 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !40
  %1271 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1270, i1 %1266) #5, !dbg !40
  %1272 = bitcast i32 %1271 to float, !dbg !40
  %1273 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !40
  %1274 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1273, i1 %1266) #5, !dbg !40
  %1275 = bitcast i32 %1274 to float, !dbg !40
  %1276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1268, i32 4, i32 31), !dbg !40
  %1277 = bitcast i32 %1276 to float, !dbg !40
  %1278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 4, i32 31), !dbg !40
  %1279 = bitcast i32 %1278 to float, !dbg !40
  %1280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1274, i32 4, i32 31), !dbg !40
  %1281 = bitcast i32 %1280 to float, !dbg !40
  %1282 = fsub float %1277, %1269, !dbg !24
  %1283 = fadd float %1275, %1281, !dbg !29
  %1284 = fcmp oeq float %1283, 0.000000e+00, !dbg !30
  %1285 = tail call float @llvm.nvvm.div.full(float %1281, float %1283), !dbg !31
  %1286 = select i1 %1284, float 0.000000e+00, float %1285, !dbg !32
  %1287 = fmul float %1282, %1286, !dbg !33
  %1288 = fadd float %1287, %1269, !dbg !34
  %1289 = fadd float %1272, %1279, !dbg !39
  %1290 = fmul float %1282, %1282, !dbg !35
  %1291 = fmul float %1290, %1275, !dbg !36
  %1292 = fmul float %1291, %1286, !dbg !37
  %1293 = fadd float %1289, %1292, !dbg !38
  %1294 = bitcast float %1288 to i32, !dbg !40
  %1295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1294, i32 2, i32 31), !dbg !40
  %1296 = bitcast i32 %1295 to float, !dbg !40
  %1297 = bitcast float %1293 to i32, !dbg !40
  %1298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1297, i32 2, i32 31), !dbg !40
  %1299 = bitcast i32 %1298 to float, !dbg !40
  %1300 = bitcast float %1283 to i32, !dbg !40
  %1301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1300, i32 2, i32 31), !dbg !40
  %1302 = bitcast i32 %1301 to float, !dbg !40
  %1303 = fsub float %1296, %1288, !dbg !24
  %1304 = fadd float %1283, %1302, !dbg !29
  %1305 = fcmp oeq float %1304, 0.000000e+00, !dbg !30
  %1306 = tail call float @llvm.nvvm.div.full(float %1302, float %1304), !dbg !31
  %1307 = select i1 %1305, float 0.000000e+00, float %1306, !dbg !32
  %1308 = fmul float %1303, %1307, !dbg !33
  %1309 = fadd float %1288, %1308, !dbg !34
  %1310 = fadd float %1293, %1299, !dbg !39
  %1311 = fmul float %1303, %1303, !dbg !35
  %1312 = fmul float %1283, %1311, !dbg !36
  %1313 = fmul float %1307, %1312, !dbg !37
  %1314 = fadd float %1310, %1313, !dbg !38
  %1315 = bitcast float %1309 to i32, !dbg !40
  %1316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1315, i32 1, i32 31), !dbg !40
  %1317 = bitcast i32 %1316 to float, !dbg !40
  %1318 = bitcast float %1314 to i32, !dbg !40
  %1319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1318, i32 1, i32 31), !dbg !40
  %1320 = bitcast i32 %1319 to float, !dbg !40
  %1321 = bitcast float %1304 to i32, !dbg !40
  %1322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1321, i32 1, i32 31), !dbg !40
  %1323 = bitcast i32 %1322 to float, !dbg !40
  %1324 = fsub float %1317, %1309, !dbg !24
  %1325 = fadd float %1304, %1323, !dbg !29
  %1326 = fcmp oeq float %1325, 0.000000e+00, !dbg !30
  %1327 = tail call float @llvm.nvvm.div.full(float %1323, float %1325), !dbg !31
  %1328 = select i1 %1326, float 0.000000e+00, float %1327, !dbg !32
  %1329 = fmul float %1324, %1328, !dbg !33
  %1330 = fadd float %1309, %1329, !dbg !34
  %1331 = fadd float %1314, %1320, !dbg !39
  %1332 = fmul float %1324, %1324, !dbg !35
  %1333 = fmul float %1304, %1332, !dbg !36
  %1334 = fmul float %1328, %1333, !dbg !37
  %1335 = fadd float %1331, %1334, !dbg !38
  %1336 = and i32 %21, 7, !dbg !40
  %1337 = icmp eq i32 %1336, 0, !dbg !40
  %1338 = and i1 %1266, %1337, !dbg !40
  %1339 = bitcast float %1330 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1267, <1 x i32> %1339, i1 %1338) #5, !dbg !40
  %1340 = bitcast float %1335 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1270, <1 x i32> %1340, i1 %1338) #5, !dbg !40
  %1341 = bitcast float %1325 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1273, <1 x i32> %1341, i1 %1338) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %1342 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %1343 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  %1344 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  %1345 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !40
  %1346 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !40
  %1347 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 160), align 16, !dbg !40
  %1348 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !40
  %1349 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 224), align 16, !dbg !40
  %1350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %51, i1 %66) #5, !dbg !41
  %1351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i1 %66) #5, !dbg !41
  %1352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %66) #5, !dbg !41
  %1353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %66) #5, !dbg !41
  %1354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %66) #5, !dbg !41
  %1355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %66) #5, !dbg !41
  %1356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %66) #5, !dbg !41
  %1357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %66) #5, !dbg !41
  %1358 = add nuw nsw i32 %29, 3072, !dbg !42
  %1359 = add nuw nsw i32 %29, 5120, !dbg !42
  %1360 = zext nneg i32 %1358 to i64, !dbg !43
  %1361 = getelementptr float, ptr addrspace(1) %1, i64 %1360, !dbg !43
  %1362 = zext nneg i32 %29 to i64, !dbg !43
  %1363 = getelementptr float, ptr addrspace(1) %1, i64 %1362, !dbg !43
  %1364 = getelementptr i8, ptr addrspace(1) %1363, i64 12304, !dbg !43
  %1365 = zext nneg i32 %1359 to i64, !dbg !43
  %1366 = getelementptr float, ptr addrspace(1) %1, i64 %1365, !dbg !43
  %1367 = getelementptr i8, ptr addrspace(1) %1363, i64 20496, !dbg !43
  %1368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1361, i1 true) #5, !dbg !44
  %1369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1364, i1 true) #5, !dbg !44
  %1370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1366, i1 %36) #5, !dbg !44
  %1371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1367, i1 %36) #5, !dbg !44
  %1372 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1360, !dbg !45
  %1373 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1365, !dbg !45
  %1374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1372, i1 true) #5, !dbg !46
  %1375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1373, i1 %36) #5, !dbg !46
  %1376 = zext nneg i32 %30 to i64, !dbg !47
  %1377 = getelementptr float, ptr addrspace(1) %1, i64 %1376, !dbg !47
  %1378 = zext nneg i32 %31 to i64, !dbg !47
  %1379 = getelementptr float, ptr addrspace(1) %1, i64 %1378, !dbg !47
  %1380 = zext nneg i32 %32 to i64, !dbg !47
  %1381 = getelementptr float, ptr addrspace(1) %1, i64 %1380, !dbg !47
  %1382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1363, i1 true) #5, !dbg !48
  %1383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1377, i1 true) #5, !dbg !48
  %1384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1379, i1 %36) #5, !dbg !48
  %1385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1381, i1 %36) #5, !dbg !48
  %1386 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1362, !dbg !49
  %1387 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1378, !dbg !49
  %1388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1386, i1 true) #5, !dbg !50
  %1389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1387, i1 %36) #5, !dbg !50
  %1390 = tail call float @llvm.nvvm.div.full(float %1346, float 3.072000e+03), !dbg !51
  %1391 = tail call float @llvm.nvvm.div.full(float %1347, float 3.072000e+03), !dbg !51
  %1392 = tail call float @llvm.nvvm.div.full(float %1348, float 3.072000e+03), !dbg !51
  %1393 = tail call float @llvm.nvvm.div.full(float %1349, float 3.072000e+03), !dbg !51
  %1394 = fadd float %1390, 0x3EB0C6F7A0000000, !dbg !52
  %1395 = fadd float %1391, 0x3EB0C6F7A0000000, !dbg !52
  %1396 = fadd float %1392, 0x3EB0C6F7A0000000, !dbg !52
  %1397 = fadd float %1393, 0x3EB0C6F7A0000000, !dbg !52
  %1398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i113 = icmp eq i32 %1413, 0, !dbg !53
  br i1 %.not.i113, label %1416, label %1414, !dbg !53

1414:                                             ; preds = %__nv_rsqrtf.exit
  %1415 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1394), !dbg !53
  br label %__nv_rsqrtf.exit115, !dbg !53

1416:                                             ; preds = %__nv_rsqrtf.exit
  %1417 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1394), !dbg !53
  br label %__nv_rsqrtf.exit115, !dbg !53

__nv_rsqrtf.exit115:                              ; preds = %1414, %1416
  %.0.i114 = phi float [ %1415, %1414 ], [ %1417, %1416 ], !dbg !53
  %1418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i161 = icmp eq i32 %1433, 0, !dbg !53
  br i1 %.not.i161, label %1436, label %1434, !dbg !53

1434:                                             ; preds = %__nv_rsqrtf.exit115
  %1435 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1395), !dbg !53
  br label %__nv_rsqrtf.exit163, !dbg !53

1436:                                             ; preds = %__nv_rsqrtf.exit115
  %1437 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1395), !dbg !53
  br label %__nv_rsqrtf.exit163, !dbg !53

__nv_rsqrtf.exit163:                              ; preds = %1434, %1436
  %.0.i162 = phi float [ %1435, %1434 ], [ %1437, %1436 ], !dbg !53
  %1438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i209 = icmp eq i32 %1453, 0, !dbg !53
  br i1 %.not.i209, label %1456, label %1454, !dbg !53

1454:                                             ; preds = %__nv_rsqrtf.exit163
  %1455 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1396), !dbg !53
  br label %__nv_rsqrtf.exit211, !dbg !53

1456:                                             ; preds = %__nv_rsqrtf.exit163
  %1457 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1396), !dbg !53
  br label %__nv_rsqrtf.exit211, !dbg !53

__nv_rsqrtf.exit211:                              ; preds = %1454, %1456
  %.0.i210 = phi float [ %1455, %1454 ], [ %1457, %1456 ], !dbg !53
  %1458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %1473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i257 = icmp eq i32 %1473, 0, !dbg !53
  br i1 %.not.i257, label %1476, label %1474, !dbg !53

1474:                                             ; preds = %__nv_rsqrtf.exit211
  %1475 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1397), !dbg !53
  br label %__nv_rsqrtf.exit259, !dbg !53

1476:                                             ; preds = %__nv_rsqrtf.exit211
  %1477 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1397), !dbg !53
  br label %__nv_rsqrtf.exit259, !dbg !53

__nv_rsqrtf.exit259:                              ; preds = %1474, %1476
  %.0.i258 = phi float [ %1475, %1474 ], [ %1477, %1476 ], !dbg !53
  %1478 = extractvalue { i32, i32, i32, i32 } %1357, 3, !dbg !41
  %1479 = bitcast i32 %1478 to <2 x bfloat>, !dbg !41
  %1480 = extractelement <2 x bfloat> %1479, i64 1, !dbg !41
  %1481 = fpext bfloat %1480 to float, !dbg !54
  %1482 = fsub float %1481, %1345, !dbg !55
  %1483 = extractelement <2 x bfloat> %1479, i64 0, !dbg !41
  %1484 = fpext bfloat %1483 to float, !dbg !54
  %1485 = fsub float %1484, %1345, !dbg !55
  %1486 = extractvalue { i32, i32, i32, i32 } %1357, 2, !dbg !41
  %1487 = bitcast i32 %1486 to <2 x bfloat>, !dbg !41
  %1488 = extractelement <2 x bfloat> %1487, i64 1, !dbg !41
  %1489 = fpext bfloat %1488 to float, !dbg !54
  %1490 = fsub float %1489, %1345, !dbg !55
  %1491 = extractelement <2 x bfloat> %1487, i64 0, !dbg !41
  %1492 = fpext bfloat %1491 to float, !dbg !54
  %1493 = fsub float %1492, %1345, !dbg !55
  %1494 = extractvalue { i32, i32, i32, i32 } %1357, 1, !dbg !41
  %1495 = bitcast i32 %1494 to <2 x bfloat>, !dbg !41
  %1496 = extractelement <2 x bfloat> %1495, i64 1, !dbg !41
  %1497 = fpext bfloat %1496 to float, !dbg !54
  %1498 = fsub float %1497, %1345, !dbg !55
  %1499 = extractelement <2 x bfloat> %1495, i64 0, !dbg !41
  %1500 = fpext bfloat %1499 to float, !dbg !54
  %1501 = fsub float %1500, %1345, !dbg !55
  %1502 = extractvalue { i32, i32, i32, i32 } %1357, 0, !dbg !41
  %1503 = bitcast i32 %1502 to <2 x bfloat>, !dbg !41
  %1504 = extractelement <2 x bfloat> %1503, i64 1, !dbg !41
  %1505 = fpext bfloat %1504 to float, !dbg !54
  %1506 = fsub float %1505, %1345, !dbg !55
  %1507 = extractelement <2 x bfloat> %1503, i64 0, !dbg !41
  %1508 = fpext bfloat %1507 to float, !dbg !54
  %1509 = fsub float %1508, %1345, !dbg !55
  %1510 = extractvalue { i32, i32, i32, i32 } %1356, 3, !dbg !41
  %1511 = bitcast i32 %1510 to <2 x bfloat>, !dbg !41
  %1512 = extractelement <2 x bfloat> %1511, i64 1, !dbg !41
  %1513 = fpext bfloat %1512 to float, !dbg !54
  %1514 = fsub float %1513, %1345, !dbg !55
  %1515 = extractelement <2 x bfloat> %1511, i64 0, !dbg !41
  %1516 = fpext bfloat %1515 to float, !dbg !54
  %1517 = fsub float %1516, %1345, !dbg !55
  %1518 = extractvalue { i32, i32, i32, i32 } %1356, 2, !dbg !41
  %1519 = bitcast i32 %1518 to <2 x bfloat>, !dbg !41
  %1520 = extractelement <2 x bfloat> %1519, i64 1, !dbg !41
  %1521 = fpext bfloat %1520 to float, !dbg !54
  %1522 = fsub float %1521, %1345, !dbg !55
  %1523 = extractelement <2 x bfloat> %1519, i64 0, !dbg !41
  %1524 = fpext bfloat %1523 to float, !dbg !54
  %1525 = fsub float %1524, %1345, !dbg !55
  %1526 = extractvalue { i32, i32, i32, i32 } %1356, 1, !dbg !41
  %1527 = bitcast i32 %1526 to <2 x bfloat>, !dbg !41
  %1528 = extractelement <2 x bfloat> %1527, i64 1, !dbg !41
  %1529 = fpext bfloat %1528 to float, !dbg !54
  %1530 = fsub float %1529, %1345, !dbg !55
  %1531 = extractelement <2 x bfloat> %1527, i64 0, !dbg !41
  %1532 = fpext bfloat %1531 to float, !dbg !54
  %1533 = fsub float %1532, %1345, !dbg !55
  %1534 = extractvalue { i32, i32, i32, i32 } %1356, 0, !dbg !41
  %1535 = bitcast i32 %1534 to <2 x bfloat>, !dbg !41
  %1536 = extractelement <2 x bfloat> %1535, i64 1, !dbg !41
  %1537 = fpext bfloat %1536 to float, !dbg !54
  %1538 = fsub float %1537, %1345, !dbg !55
  %1539 = extractelement <2 x bfloat> %1535, i64 0, !dbg !41
  %1540 = fpext bfloat %1539 to float, !dbg !54
  %1541 = fsub float %1540, %1345, !dbg !55
  %1542 = extractvalue { i32, i32, i32, i32 } %1355, 3, !dbg !41
  %1543 = bitcast i32 %1542 to <2 x bfloat>, !dbg !41
  %1544 = extractelement <2 x bfloat> %1543, i64 1, !dbg !41
  %1545 = fpext bfloat %1544 to float, !dbg !54
  %1546 = fsub float %1545, %1344, !dbg !55
  %1547 = extractelement <2 x bfloat> %1543, i64 0, !dbg !41
  %1548 = fpext bfloat %1547 to float, !dbg !54
  %1549 = fsub float %1548, %1344, !dbg !55
  %1550 = extractvalue { i32, i32, i32, i32 } %1355, 2, !dbg !41
  %1551 = bitcast i32 %1550 to <2 x bfloat>, !dbg !41
  %1552 = extractelement <2 x bfloat> %1551, i64 1, !dbg !41
  %1553 = fpext bfloat %1552 to float, !dbg !54
  %1554 = fsub float %1553, %1344, !dbg !55
  %1555 = extractelement <2 x bfloat> %1551, i64 0, !dbg !41
  %1556 = fpext bfloat %1555 to float, !dbg !54
  %1557 = fsub float %1556, %1344, !dbg !55
  %1558 = extractvalue { i32, i32, i32, i32 } %1355, 1, !dbg !41
  %1559 = bitcast i32 %1558 to <2 x bfloat>, !dbg !41
  %1560 = extractelement <2 x bfloat> %1559, i64 1, !dbg !41
  %1561 = fpext bfloat %1560 to float, !dbg !54
  %1562 = fsub float %1561, %1344, !dbg !55
  %1563 = extractelement <2 x bfloat> %1559, i64 0, !dbg !41
  %1564 = fpext bfloat %1563 to float, !dbg !54
  %1565 = fsub float %1564, %1344, !dbg !55
  %1566 = extractvalue { i32, i32, i32, i32 } %1355, 0, !dbg !41
  %1567 = bitcast i32 %1566 to <2 x bfloat>, !dbg !41
  %1568 = extractelement <2 x bfloat> %1567, i64 1, !dbg !41
  %1569 = fpext bfloat %1568 to float, !dbg !54
  %1570 = fsub float %1569, %1344, !dbg !55
  %1571 = extractelement <2 x bfloat> %1567, i64 0, !dbg !41
  %1572 = fpext bfloat %1571 to float, !dbg !54
  %1573 = fsub float %1572, %1344, !dbg !55
  %1574 = extractvalue { i32, i32, i32, i32 } %1354, 3, !dbg !41
  %1575 = bitcast i32 %1574 to <2 x bfloat>, !dbg !41
  %1576 = extractelement <2 x bfloat> %1575, i64 1, !dbg !41
  %1577 = fpext bfloat %1576 to float, !dbg !54
  %1578 = fsub float %1577, %1344, !dbg !55
  %1579 = extractelement <2 x bfloat> %1575, i64 0, !dbg !41
  %1580 = fpext bfloat %1579 to float, !dbg !54
  %1581 = fsub float %1580, %1344, !dbg !55
  %1582 = extractvalue { i32, i32, i32, i32 } %1354, 2, !dbg !41
  %1583 = bitcast i32 %1582 to <2 x bfloat>, !dbg !41
  %1584 = extractelement <2 x bfloat> %1583, i64 1, !dbg !41
  %1585 = fpext bfloat %1584 to float, !dbg !54
  %1586 = fsub float %1585, %1344, !dbg !55
  %1587 = extractelement <2 x bfloat> %1583, i64 0, !dbg !41
  %1588 = fpext bfloat %1587 to float, !dbg !54
  %1589 = fsub float %1588, %1344, !dbg !55
  %1590 = extractvalue { i32, i32, i32, i32 } %1354, 1, !dbg !41
  %1591 = bitcast i32 %1590 to <2 x bfloat>, !dbg !41
  %1592 = extractelement <2 x bfloat> %1591, i64 1, !dbg !41
  %1593 = fpext bfloat %1592 to float, !dbg !54
  %1594 = fsub float %1593, %1344, !dbg !55
  %1595 = extractelement <2 x bfloat> %1591, i64 0, !dbg !41
  %1596 = fpext bfloat %1595 to float, !dbg !54
  %1597 = fsub float %1596, %1344, !dbg !55
  %1598 = extractvalue { i32, i32, i32, i32 } %1354, 0, !dbg !41
  %1599 = bitcast i32 %1598 to <2 x bfloat>, !dbg !41
  %1600 = extractelement <2 x bfloat> %1599, i64 1, !dbg !41
  %1601 = fpext bfloat %1600 to float, !dbg !54
  %1602 = fsub float %1601, %1344, !dbg !55
  %1603 = extractelement <2 x bfloat> %1599, i64 0, !dbg !41
  %1604 = fpext bfloat %1603 to float, !dbg !54
  %1605 = fsub float %1604, %1344, !dbg !55
  %1606 = extractvalue { i32, i32, i32, i32 } %1353, 3, !dbg !41
  %1607 = bitcast i32 %1606 to <2 x bfloat>, !dbg !41
  %1608 = extractelement <2 x bfloat> %1607, i64 1, !dbg !41
  %1609 = fpext bfloat %1608 to float, !dbg !54
  %1610 = fsub float %1609, %1343, !dbg !55
  %1611 = extractelement <2 x bfloat> %1607, i64 0, !dbg !41
  %1612 = fpext bfloat %1611 to float, !dbg !54
  %1613 = fsub float %1612, %1343, !dbg !55
  %1614 = extractvalue { i32, i32, i32, i32 } %1353, 2, !dbg !41
  %1615 = bitcast i32 %1614 to <2 x bfloat>, !dbg !41
  %1616 = extractelement <2 x bfloat> %1615, i64 1, !dbg !41
  %1617 = fpext bfloat %1616 to float, !dbg !54
  %1618 = fsub float %1617, %1343, !dbg !55
  %1619 = extractelement <2 x bfloat> %1615, i64 0, !dbg !41
  %1620 = fpext bfloat %1619 to float, !dbg !54
  %1621 = fsub float %1620, %1343, !dbg !55
  %1622 = extractvalue { i32, i32, i32, i32 } %1353, 1, !dbg !41
  %1623 = bitcast i32 %1622 to <2 x bfloat>, !dbg !41
  %1624 = extractelement <2 x bfloat> %1623, i64 1, !dbg !41
  %1625 = fpext bfloat %1624 to float, !dbg !54
  %1626 = fsub float %1625, %1343, !dbg !55
  %1627 = extractelement <2 x bfloat> %1623, i64 0, !dbg !41
  %1628 = fpext bfloat %1627 to float, !dbg !54
  %1629 = fsub float %1628, %1343, !dbg !55
  %1630 = extractvalue { i32, i32, i32, i32 } %1353, 0, !dbg !41
  %1631 = bitcast i32 %1630 to <2 x bfloat>, !dbg !41
  %1632 = extractelement <2 x bfloat> %1631, i64 1, !dbg !41
  %1633 = fpext bfloat %1632 to float, !dbg !54
  %1634 = fsub float %1633, %1343, !dbg !55
  %1635 = extractelement <2 x bfloat> %1631, i64 0, !dbg !41
  %1636 = fpext bfloat %1635 to float, !dbg !54
  %1637 = fsub float %1636, %1343, !dbg !55
  %1638 = extractvalue { i32, i32, i32, i32 } %1352, 3, !dbg !41
  %1639 = bitcast i32 %1638 to <2 x bfloat>, !dbg !41
  %1640 = extractelement <2 x bfloat> %1639, i64 1, !dbg !41
  %1641 = fpext bfloat %1640 to float, !dbg !54
  %1642 = fsub float %1641, %1343, !dbg !55
  %1643 = extractelement <2 x bfloat> %1639, i64 0, !dbg !41
  %1644 = fpext bfloat %1643 to float, !dbg !54
  %1645 = fsub float %1644, %1343, !dbg !55
  %1646 = extractvalue { i32, i32, i32, i32 } %1352, 2, !dbg !41
  %1647 = bitcast i32 %1646 to <2 x bfloat>, !dbg !41
  %1648 = extractelement <2 x bfloat> %1647, i64 1, !dbg !41
  %1649 = fpext bfloat %1648 to float, !dbg !54
  %1650 = fsub float %1649, %1343, !dbg !55
  %1651 = extractelement <2 x bfloat> %1647, i64 0, !dbg !41
  %1652 = fpext bfloat %1651 to float, !dbg !54
  %1653 = fsub float %1652, %1343, !dbg !55
  %1654 = extractvalue { i32, i32, i32, i32 } %1352, 1, !dbg !41
  %1655 = bitcast i32 %1654 to <2 x bfloat>, !dbg !41
  %1656 = extractelement <2 x bfloat> %1655, i64 1, !dbg !41
  %1657 = fpext bfloat %1656 to float, !dbg !54
  %1658 = fsub float %1657, %1343, !dbg !55
  %1659 = extractelement <2 x bfloat> %1655, i64 0, !dbg !41
  %1660 = fpext bfloat %1659 to float, !dbg !54
  %1661 = fsub float %1660, %1343, !dbg !55
  %1662 = extractvalue { i32, i32, i32, i32 } %1352, 0, !dbg !41
  %1663 = bitcast i32 %1662 to <2 x bfloat>, !dbg !41
  %1664 = extractelement <2 x bfloat> %1663, i64 1, !dbg !41
  %1665 = fpext bfloat %1664 to float, !dbg !54
  %1666 = fsub float %1665, %1343, !dbg !55
  %1667 = extractelement <2 x bfloat> %1663, i64 0, !dbg !41
  %1668 = fpext bfloat %1667 to float, !dbg !54
  %1669 = fsub float %1668, %1343, !dbg !55
  %1670 = extractvalue { i32, i32, i32, i32 } %1351, 3, !dbg !41
  %1671 = bitcast i32 %1670 to <2 x bfloat>, !dbg !41
  %1672 = extractelement <2 x bfloat> %1671, i64 1, !dbg !41
  %1673 = fpext bfloat %1672 to float, !dbg !54
  %1674 = fsub float %1673, %1342, !dbg !55
  %1675 = extractelement <2 x bfloat> %1671, i64 0, !dbg !41
  %1676 = fpext bfloat %1675 to float, !dbg !54
  %1677 = fsub float %1676, %1342, !dbg !55
  %1678 = extractvalue { i32, i32, i32, i32 } %1351, 2, !dbg !41
  %1679 = bitcast i32 %1678 to <2 x bfloat>, !dbg !41
  %1680 = extractelement <2 x bfloat> %1679, i64 1, !dbg !41
  %1681 = fpext bfloat %1680 to float, !dbg !54
  %1682 = fsub float %1681, %1342, !dbg !55
  %1683 = extractelement <2 x bfloat> %1679, i64 0, !dbg !41
  %1684 = fpext bfloat %1683 to float, !dbg !54
  %1685 = fsub float %1684, %1342, !dbg !55
  %1686 = extractvalue { i32, i32, i32, i32 } %1351, 1, !dbg !41
  %1687 = bitcast i32 %1686 to <2 x bfloat>, !dbg !41
  %1688 = extractelement <2 x bfloat> %1687, i64 1, !dbg !41
  %1689 = fpext bfloat %1688 to float, !dbg !54
  %1690 = fsub float %1689, %1342, !dbg !55
  %1691 = extractelement <2 x bfloat> %1687, i64 0, !dbg !41
  %1692 = fpext bfloat %1691 to float, !dbg !54
  %1693 = fsub float %1692, %1342, !dbg !55
  %1694 = extractvalue { i32, i32, i32, i32 } %1351, 0, !dbg !41
  %1695 = bitcast i32 %1694 to <2 x bfloat>, !dbg !41
  %1696 = extractelement <2 x bfloat> %1695, i64 1, !dbg !41
  %1697 = fpext bfloat %1696 to float, !dbg !54
  %1698 = fsub float %1697, %1342, !dbg !55
  %1699 = extractelement <2 x bfloat> %1695, i64 0, !dbg !41
  %1700 = fpext bfloat %1699 to float, !dbg !54
  %1701 = fsub float %1700, %1342, !dbg !55
  %1702 = extractvalue { i32, i32, i32, i32 } %1350, 3, !dbg !41
  %1703 = bitcast i32 %1702 to <2 x bfloat>, !dbg !41
  %1704 = extractelement <2 x bfloat> %1703, i64 1, !dbg !41
  %1705 = fpext bfloat %1704 to float, !dbg !54
  %1706 = fsub float %1705, %1342, !dbg !55
  %1707 = extractelement <2 x bfloat> %1703, i64 0, !dbg !41
  %1708 = fpext bfloat %1707 to float, !dbg !54
  %1709 = fsub float %1708, %1342, !dbg !55
  %1710 = extractvalue { i32, i32, i32, i32 } %1350, 2, !dbg !41
  %1711 = bitcast i32 %1710 to <2 x bfloat>, !dbg !41
  %1712 = extractelement <2 x bfloat> %1711, i64 1, !dbg !41
  %1713 = fpext bfloat %1712 to float, !dbg !54
  %1714 = fsub float %1713, %1342, !dbg !55
  %1715 = extractelement <2 x bfloat> %1711, i64 0, !dbg !41
  %1716 = fpext bfloat %1715 to float, !dbg !54
  %1717 = fsub float %1716, %1342, !dbg !55
  %1718 = extractvalue { i32, i32, i32, i32 } %1350, 1, !dbg !41
  %1719 = bitcast i32 %1718 to <2 x bfloat>, !dbg !41
  %1720 = extractelement <2 x bfloat> %1719, i64 1, !dbg !41
  %1721 = fpext bfloat %1720 to float, !dbg !54
  %1722 = fsub float %1721, %1342, !dbg !55
  %1723 = extractelement <2 x bfloat> %1719, i64 0, !dbg !41
  %1724 = fpext bfloat %1723 to float, !dbg !54
  %1725 = fsub float %1724, %1342, !dbg !55
  %1726 = extractvalue { i32, i32, i32, i32 } %1350, 0, !dbg !41
  %1727 = bitcast i32 %1726 to <2 x bfloat>, !dbg !41
  %1728 = extractelement <2 x bfloat> %1727, i64 1, !dbg !41
  %1729 = fpext bfloat %1728 to float, !dbg !54
  %1730 = fsub float %1729, %1342, !dbg !55
  %1731 = extractelement <2 x bfloat> %1727, i64 0, !dbg !41
  %1732 = fpext bfloat %1731 to float, !dbg !54
  %1733 = fsub float %1732, %1342, !dbg !55
  %1734 = extractvalue { i32, i32, i32, i32 } %1389, 3, !dbg !50
  %1735 = bitcast i32 %1734 to <2 x bfloat>, !dbg !50
  %1736 = extractvalue { i32, i32, i32, i32 } %1389, 2, !dbg !50
  %1737 = bitcast i32 %1736 to <2 x bfloat>, !dbg !50
  %1738 = extractvalue { i32, i32, i32, i32 } %1389, 1, !dbg !50
  %1739 = bitcast i32 %1738 to <2 x bfloat>, !dbg !50
  %1740 = extractvalue { i32, i32, i32, i32 } %1389, 0, !dbg !50
  %1741 = bitcast i32 %1740 to <2 x bfloat>, !dbg !50
  %1742 = extractvalue { i32, i32, i32, i32 } %1388, 3, !dbg !50
  %1743 = bitcast i32 %1742 to <2 x bfloat>, !dbg !50
  %1744 = extractvalue { i32, i32, i32, i32 } %1388, 2, !dbg !50
  %1745 = bitcast i32 %1744 to <2 x bfloat>, !dbg !50
  %1746 = extractvalue { i32, i32, i32, i32 } %1388, 1, !dbg !50
  %1747 = bitcast i32 %1746 to <2 x bfloat>, !dbg !50
  %1748 = extractvalue { i32, i32, i32, i32 } %1388, 0, !dbg !50
  %1749 = bitcast i32 %1748 to <2 x bfloat>, !dbg !50
  %1750 = extractvalue { i32, i32, i32, i32 } %1385, 3, !dbg !48
  %1751 = extractvalue { i32, i32, i32, i32 } %1385, 2, !dbg !48
  %1752 = extractvalue { i32, i32, i32, i32 } %1385, 1, !dbg !48
  %1753 = extractvalue { i32, i32, i32, i32 } %1385, 0, !dbg !48
  %1754 = extractvalue { i32, i32, i32, i32 } %1384, 3, !dbg !48
  %1755 = extractvalue { i32, i32, i32, i32 } %1384, 2, !dbg !48
  %1756 = extractvalue { i32, i32, i32, i32 } %1384, 1, !dbg !48
  %1757 = extractvalue { i32, i32, i32, i32 } %1384, 0, !dbg !48
  %1758 = extractvalue { i32, i32, i32, i32 } %1383, 3, !dbg !48
  %1759 = extractvalue { i32, i32, i32, i32 } %1383, 2, !dbg !48
  %1760 = extractvalue { i32, i32, i32, i32 } %1383, 1, !dbg !48
  %1761 = extractvalue { i32, i32, i32, i32 } %1383, 0, !dbg !48
  %1762 = extractvalue { i32, i32, i32, i32 } %1382, 3, !dbg !48
  %1763 = extractvalue { i32, i32, i32, i32 } %1382, 2, !dbg !48
  %1764 = extractvalue { i32, i32, i32, i32 } %1382, 1, !dbg !48
  %1765 = extractvalue { i32, i32, i32, i32 } %1382, 0, !dbg !48
  %1766 = extractvalue { i32, i32, i32, i32 } %1375, 3, !dbg !46
  %1767 = bitcast i32 %1766 to <2 x bfloat>, !dbg !46
  %1768 = extractvalue { i32, i32, i32, i32 } %1375, 2, !dbg !46
  %1769 = bitcast i32 %1768 to <2 x bfloat>, !dbg !46
  %1770 = extractvalue { i32, i32, i32, i32 } %1375, 1, !dbg !46
  %1771 = bitcast i32 %1770 to <2 x bfloat>, !dbg !46
  %1772 = extractvalue { i32, i32, i32, i32 } %1375, 0, !dbg !46
  %1773 = bitcast i32 %1772 to <2 x bfloat>, !dbg !46
  %1774 = extractvalue { i32, i32, i32, i32 } %1374, 3, !dbg !46
  %1775 = bitcast i32 %1774 to <2 x bfloat>, !dbg !46
  %1776 = extractvalue { i32, i32, i32, i32 } %1374, 2, !dbg !46
  %1777 = bitcast i32 %1776 to <2 x bfloat>, !dbg !46
  %1778 = extractvalue { i32, i32, i32, i32 } %1374, 1, !dbg !46
  %1779 = bitcast i32 %1778 to <2 x bfloat>, !dbg !46
  %1780 = extractvalue { i32, i32, i32, i32 } %1374, 0, !dbg !46
  %1781 = bitcast i32 %1780 to <2 x bfloat>, !dbg !46
  %1782 = extractvalue { i32, i32, i32, i32 } %1371, 3, !dbg !44
  %1783 = extractvalue { i32, i32, i32, i32 } %1371, 2, !dbg !44
  %1784 = extractvalue { i32, i32, i32, i32 } %1371, 1, !dbg !44
  %1785 = extractvalue { i32, i32, i32, i32 } %1371, 0, !dbg !44
  %1786 = extractvalue { i32, i32, i32, i32 } %1370, 3, !dbg !44
  %1787 = extractvalue { i32, i32, i32, i32 } %1370, 2, !dbg !44
  %1788 = extractvalue { i32, i32, i32, i32 } %1370, 1, !dbg !44
  %1789 = extractvalue { i32, i32, i32, i32 } %1370, 0, !dbg !44
  %1790 = extractvalue { i32, i32, i32, i32 } %1369, 3, !dbg !44
  %1791 = extractvalue { i32, i32, i32, i32 } %1369, 2, !dbg !44
  %1792 = extractvalue { i32, i32, i32, i32 } %1369, 1, !dbg !44
  %1793 = extractvalue { i32, i32, i32, i32 } %1369, 0, !dbg !44
  %1794 = extractvalue { i32, i32, i32, i32 } %1368, 3, !dbg !44
  %1795 = extractvalue { i32, i32, i32, i32 } %1368, 2, !dbg !44
  %1796 = extractvalue { i32, i32, i32, i32 } %1368, 1, !dbg !44
  %1797 = extractvalue { i32, i32, i32, i32 } %1368, 0, !dbg !44
  %1798 = icmp slt i32 %25, 4112, !dbg !13
  %1799 = and i1 %1798, %36, !dbg !19
  %1800 = icmp slt i32 %24, 4112, !dbg !13
  %1801 = and i1 %1800, %36, !dbg !19
  %1802 = icmp slt i32 %23, 4112, !dbg !13
  %1803 = and i1 %1802, %36, !dbg !19
  %1804 = and i1 %26, %36, !dbg !19
  %1805 = add i32 %31, %41, !dbg !17
  %1806 = add nuw nsw i32 %41, %29, !dbg !17
  %1807 = add i32 %31, %40, !dbg !17
  %1808 = or disjoint i32 %40, %29, !dbg !17
  %1809 = add i32 %31, %39, !dbg !17
  %1810 = add i32 %39, %29, !dbg !17
  %1811 = or disjoint i32 %31, %38, !dbg !17
  %1812 = or disjoint i32 %29, %38, !dbg !17
  %1813 = and i32 %21, 3, !dbg !11
  %1814 = or disjoint i32 %20, %1813, !dbg !12
  %1815 = icmp slt i32 %1814, 4112, !dbg !13
  %1816 = fmul float %1733, %.0.i114, !dbg !56
  %1817 = fmul float %1730, %.0.i114, !dbg !56
  %1818 = fmul float %1725, %.0.i114, !dbg !56
  %1819 = fmul float %1722, %.0.i114, !dbg !56
  %1820 = fmul float %1717, %.0.i114, !dbg !56
  %1821 = fmul float %1714, %.0.i114, !dbg !56
  %1822 = fmul float %1709, %.0.i114, !dbg !56
  %1823 = fmul float %1706, %.0.i114, !dbg !56
  %1824 = fmul float %1701, %.0.i114, !dbg !56
  %1825 = fmul float %1698, %.0.i114, !dbg !56
  %1826 = fmul float %1693, %.0.i114, !dbg !56
  %1827 = fmul float %1690, %.0.i114, !dbg !56
  %1828 = fmul float %1685, %.0.i114, !dbg !56
  %1829 = fmul float %1682, %.0.i114, !dbg !56
  %1830 = fmul float %1677, %.0.i114, !dbg !56
  %1831 = fmul float %1674, %.0.i114, !dbg !56
  %1832 = fmul float %1669, %.0.i162, !dbg !56
  %1833 = fmul float %1666, %.0.i162, !dbg !56
  %1834 = fmul float %1661, %.0.i162, !dbg !56
  %1835 = fmul float %1658, %.0.i162, !dbg !56
  %1836 = fmul float %1653, %.0.i162, !dbg !56
  %1837 = fmul float %1650, %.0.i162, !dbg !56
  %1838 = fmul float %1645, %.0.i162, !dbg !56
  %1839 = fmul float %1642, %.0.i162, !dbg !56
  %1840 = fmul float %1637, %.0.i162, !dbg !56
  %1841 = fmul float %1634, %.0.i162, !dbg !56
  %1842 = fmul float %1629, %.0.i162, !dbg !56
  %1843 = fmul float %1626, %.0.i162, !dbg !56
  %1844 = fmul float %1621, %.0.i162, !dbg !56
  %1845 = fmul float %1618, %.0.i162, !dbg !56
  %1846 = fmul float %1613, %.0.i162, !dbg !56
  %1847 = fmul float %1610, %.0.i162, !dbg !56
  %1848 = fmul float %1605, %.0.i210, !dbg !56
  %1849 = fmul float %1602, %.0.i210, !dbg !56
  %1850 = fmul float %1597, %.0.i210, !dbg !56
  %1851 = fmul float %1594, %.0.i210, !dbg !56
  %1852 = fmul float %1589, %.0.i210, !dbg !56
  %1853 = fmul float %1586, %.0.i210, !dbg !56
  %1854 = fmul float %1581, %.0.i210, !dbg !56
  %1855 = fmul float %1578, %.0.i210, !dbg !56
  %1856 = fmul float %1573, %.0.i210, !dbg !56
  %1857 = fmul float %1570, %.0.i210, !dbg !56
  %1858 = fmul float %1565, %.0.i210, !dbg !56
  %1859 = fmul float %1562, %.0.i210, !dbg !56
  %1860 = fmul float %1557, %.0.i210, !dbg !56
  %1861 = fmul float %1554, %.0.i210, !dbg !56
  %1862 = fmul float %1549, %.0.i210, !dbg !56
  %1863 = fmul float %1546, %.0.i210, !dbg !56
  %1864 = fmul float %1541, %.0.i258, !dbg !56
  %1865 = fmul float %1538, %.0.i258, !dbg !56
  %1866 = fmul float %1533, %.0.i258, !dbg !56
  %1867 = fmul float %1530, %.0.i258, !dbg !56
  %1868 = fmul float %1525, %.0.i258, !dbg !56
  %1869 = fmul float %1522, %.0.i258, !dbg !56
  %1870 = fmul float %1517, %.0.i258, !dbg !56
  %1871 = fmul float %1514, %.0.i258, !dbg !56
  %1872 = fmul float %1509, %.0.i258, !dbg !56
  %1873 = fmul float %1506, %.0.i258, !dbg !56
  %1874 = fmul float %1501, %.0.i258, !dbg !56
  %1875 = fmul float %1498, %.0.i258, !dbg !56
  %1876 = fmul float %1493, %.0.i258, !dbg !56
  %1877 = fmul float %1490, %.0.i258, !dbg !56
  %1878 = fmul float %1485, %.0.i258, !dbg !56
  %1879 = fmul float %1482, %.0.i258, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1880 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %34, !dbg !56
  %1881 = bitcast float %1816 to i32, !dbg !56
  %1882 = bitcast float %1817 to i32, !dbg !56
  %1883 = bitcast float %1818 to i32, !dbg !56
  %1884 = bitcast float %1819 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1880, i32 %1881, i32 %1882, i32 %1883, i32 %1884, i1 true) #5, !dbg !56
  %1885 = or disjoint i32 %34, 4, !dbg !56
  %1886 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1885, !dbg !56
  %1887 = bitcast float %1820 to i32, !dbg !56
  %1888 = bitcast float %1821 to i32, !dbg !56
  %1889 = bitcast float %1822 to i32, !dbg !56
  %1890 = bitcast float %1823 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1886, i32 %1887, i32 %1888, i32 %1889, i32 %1890, i1 true) #5, !dbg !56
  %1891 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %35, !dbg !56
  %1892 = bitcast float %1824 to i32, !dbg !56
  %1893 = bitcast float %1825 to i32, !dbg !56
  %1894 = bitcast float %1826 to i32, !dbg !56
  %1895 = bitcast float %1827 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1891, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i1 true) #5, !dbg !56
  %1896 = or disjoint i32 %34, 12, !dbg !56
  %1897 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1896, !dbg !56
  %1898 = bitcast float %1828 to i32, !dbg !56
  %1899 = bitcast float %1829 to i32, !dbg !56
  %1900 = bitcast float %1830 to i32, !dbg !56
  %1901 = bitcast float %1831 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1897, i32 %1898, i32 %1899, i32 %1900, i32 %1901, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1902 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !56
  %1903 = getelementptr inbounds nuw i8, ptr addrspace(3) %1902, i32 4, !dbg !56
  %1904 = getelementptr inbounds nuw i8, ptr addrspace(3) %1902, i32 8, !dbg !56
  %1905 = getelementptr inbounds nuw i8, ptr addrspace(3) %1902, i32 12, !dbg !56
  %1906 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30, !dbg !56
  %1907 = getelementptr inbounds nuw i8, ptr addrspace(3) %1906, i32 4, !dbg !56
  %1908 = getelementptr inbounds nuw i8, ptr addrspace(3) %1906, i32 8, !dbg !56
  %1909 = getelementptr inbounds nuw i8, ptr addrspace(3) %1906, i32 12, !dbg !56
  %1910 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31, !dbg !56
  %1911 = getelementptr inbounds nuw i8, ptr addrspace(3) %1910, i32 4, !dbg !56
  %1912 = getelementptr inbounds nuw i8, ptr addrspace(3) %1910, i32 8, !dbg !56
  %1913 = getelementptr inbounds nuw i8, ptr addrspace(3) %1910, i32 12, !dbg !56
  %1914 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !56
  %1915 = getelementptr inbounds nuw i8, ptr addrspace(3) %1914, i32 4, !dbg !56
  %1916 = getelementptr inbounds nuw i8, ptr addrspace(3) %1914, i32 8, !dbg !56
  %1917 = getelementptr inbounds nuw i8, ptr addrspace(3) %1914, i32 12, !dbg !56
  %1918 = bitcast float %1832 to i32, !dbg !56
  %1919 = bitcast float %1833 to i32, !dbg !56
  %1920 = bitcast float %1834 to i32, !dbg !56
  %1921 = bitcast float %1835 to i32, !dbg !56
  %1922 = bitcast float %1836 to i32, !dbg !56
  %1923 = bitcast float %1837 to i32, !dbg !56
  %1924 = bitcast float %1838 to i32, !dbg !56
  %1925 = bitcast float %1839 to i32, !dbg !56
  %1926 = bitcast float %1840 to i32, !dbg !56
  %1927 = bitcast float %1841 to i32, !dbg !56
  %1928 = bitcast float %1842 to i32, !dbg !56
  %1929 = bitcast float %1843 to i32, !dbg !56
  %1930 = bitcast float %1844 to i32, !dbg !56
  %1931 = bitcast float %1845 to i32, !dbg !56
  %1932 = bitcast float %1846 to i32, !dbg !56
  %1933 = bitcast float %1847 to i32, !dbg !56
  %1934 = bitcast float %1848 to i32, !dbg !56
  %1935 = bitcast float %1849 to i32, !dbg !56
  %1936 = bitcast float %1850 to i32, !dbg !56
  %1937 = bitcast float %1851 to i32, !dbg !56
  %1938 = bitcast float %1852 to i32, !dbg !56
  %1939 = bitcast float %1853 to i32, !dbg !56
  %1940 = bitcast float %1854 to i32, !dbg !56
  %1941 = bitcast float %1855 to i32, !dbg !56
  %1942 = bitcast float %1856 to i32, !dbg !56
  %1943 = bitcast float %1857 to i32, !dbg !56
  %1944 = bitcast float %1858 to i32, !dbg !56
  %1945 = bitcast float %1859 to i32, !dbg !56
  %1946 = bitcast float %1860 to i32, !dbg !56
  %1947 = bitcast float %1861 to i32, !dbg !56
  %1948 = bitcast float %1862 to i32, !dbg !56
  %1949 = bitcast float %1863 to i32, !dbg !56
  %1950 = bitcast float %1864 to i32, !dbg !56
  %1951 = bitcast float %1865 to i32, !dbg !56
  %1952 = bitcast float %1866 to i32, !dbg !56
  %1953 = bitcast float %1867 to i32, !dbg !56
  %1954 = bitcast float %1868 to i32, !dbg !56
  %1955 = bitcast float %1869 to i32, !dbg !56
  %1956 = bitcast float %1870 to i32, !dbg !56
  %1957 = bitcast float %1871 to i32, !dbg !56
  %1958 = bitcast float %1872 to i32, !dbg !56
  %1959 = bitcast float %1873 to i32, !dbg !56
  %1960 = bitcast float %1874 to i32, !dbg !56
  %1961 = bitcast float %1875 to i32, !dbg !56
  %1962 = bitcast float %1876 to i32, !dbg !56
  %1963 = bitcast float %1877 to i32, !dbg !56
  %1964 = bitcast float %1878 to i32, !dbg !56
  %1965 = bitcast float %1879 to i32, !dbg !56
  %1966 = sext i32 %1812 to i64, !dbg !57
  %1967 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1966, !dbg !57
  %1968 = sext i32 %1811 to i64, !dbg !57
  %1969 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1968, !dbg !57
  %1970 = sext i32 %1810 to i64, !dbg !57
  %1971 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1970, !dbg !57
  %1972 = sext i32 %1809 to i64, !dbg !57
  %1973 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1972, !dbg !57
  %1974 = sext i32 %1808 to i64, !dbg !57
  %1975 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1974, !dbg !57
  %1976 = sext i32 %1807 to i64, !dbg !57
  %1977 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1976, !dbg !57
  %1978 = sext i32 %1806 to i64, !dbg !57
  %1979 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1978, !dbg !57
  %1980 = sext i32 %1805 to i64, !dbg !57
  %1981 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1980, !dbg !57
  %1982 = getelementptr bfloat, ptr addrspace(1) %3, i64 %50, !dbg !57
  %1983 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !57
  %1984 = getelementptr bfloat, ptr addrspace(1) %3, i64 %54, !dbg !57
  %1985 = getelementptr bfloat, ptr addrspace(1) %3, i64 %56, !dbg !57
  %1986 = getelementptr bfloat, ptr addrspace(1) %3, i64 %58, !dbg !57
  %1987 = getelementptr bfloat, ptr addrspace(1) %3, i64 %60, !dbg !57
  %1988 = getelementptr bfloat, ptr addrspace(1) %3, i64 %62, !dbg !57
  %1989 = getelementptr bfloat, ptr addrspace(1) %3, i64 %64, !dbg !57
  %1990 = fpext <2 x bfloat> %1749 to <2 x float>, !dbg !58
  %1991 = insertelement <2 x i32> poison, i32 %1765, i64 0, !dbg !48
  %1992 = insertelement <2 x i32> %1991, i32 %1764, i64 1, !dbg !48
  %1993 = bitcast <2 x i32> %1992 to <2 x float>, !dbg !48
  %1994 = fpext <2 x bfloat> %1781 to <2 x float>, !dbg !59
  %1995 = insertelement <2 x i32> poison, i32 %1797, i64 0, !dbg !44
  %1996 = insertelement <2 x i32> %1995, i32 %1796, i64 1, !dbg !44
  %1997 = bitcast <2 x i32> %1996 to <2 x float>, !dbg !44
  %1998 = load <2 x float>, ptr addrspace(3) %1902, align 16, !dbg !56
  %1999 = fadd <2 x float> %1997, %1994, !dbg !60
  %2000 = fadd <2 x float> %1999, splat (float 1.000000e+00), !dbg !61
  %2001 = fmul <2 x float> %2000, %1998, !dbg !62
  %2002 = fadd <2 x float> %1993, %1990, !dbg !63
  %2003 = fadd <2 x float> %2002, %2001, !dbg !64
  %2004 = extractelement <2 x float> %2003, i64 0, !dbg !65
  %2005 = select i1 %26, float %2004, float 0x7FF0000000000000, !dbg !66
  %2006 = extractelement <2 x float> %2003, i64 1, !dbg !65
  %2007 = select i1 %26, float %2006, float 0x7FF0000000000000, !dbg !66
  %2008 = select i1 %26, float %2004, float 0xFFF0000000000000, !dbg !65
  %2009 = select i1 %26, float %2006, float 0xFFF0000000000000, !dbg !65
  %2010 = fptrunc <2 x float> %2003 to <2 x bfloat>, !dbg !67
  %2011 = fpext <2 x bfloat> %1747 to <2 x float>, !dbg !58
  %2012 = insertelement <2 x i32> poison, i32 %1763, i64 0, !dbg !48
  %2013 = insertelement <2 x i32> %2012, i32 %1762, i64 1, !dbg !48
  %2014 = bitcast <2 x i32> %2013 to <2 x float>, !dbg !48
  %2015 = fpext <2 x bfloat> %1779 to <2 x float>, !dbg !59
  %2016 = insertelement <2 x i32> poison, i32 %1795, i64 0, !dbg !44
  %2017 = insertelement <2 x i32> %2016, i32 %1794, i64 1, !dbg !44
  %2018 = bitcast <2 x i32> %2017 to <2 x float>, !dbg !44
  %2019 = load <2 x float>, ptr addrspace(3) %1904, align 8, !dbg !56
  %2020 = fadd <2 x float> %2018, %2015, !dbg !60
  %2021 = fadd <2 x float> %2020, splat (float 1.000000e+00), !dbg !61
  %2022 = fmul <2 x float> %2021, %2019, !dbg !62
  %2023 = fadd <2 x float> %2014, %2011, !dbg !63
  %2024 = fadd <2 x float> %2023, %2022, !dbg !64
  %2025 = extractelement <2 x float> %2024, i64 0, !dbg !65
  %2026 = select i1 %26, float %2025, float 0x7FF0000000000000, !dbg !66
  %2027 = extractelement <2 x float> %2024, i64 1, !dbg !65
  %2028 = select i1 %26, float %2027, float 0x7FF0000000000000, !dbg !66
  %2029 = select i1 %26, float %2025, float 0xFFF0000000000000, !dbg !65
  %2030 = select i1 %26, float %2027, float 0xFFF0000000000000, !dbg !65
  %2031 = fptrunc <2 x float> %2024 to <2 x bfloat>, !dbg !67
  %2032 = fpext <2 x bfloat> %1745 to <2 x float>, !dbg !58
  %2033 = insertelement <2 x i32> poison, i32 %1761, i64 0, !dbg !48
  %2034 = insertelement <2 x i32> %2033, i32 %1760, i64 1, !dbg !48
  %2035 = bitcast <2 x i32> %2034 to <2 x float>, !dbg !48
  %2036 = fpext <2 x bfloat> %1777 to <2 x float>, !dbg !59
  %2037 = insertelement <2 x i32> poison, i32 %1793, i64 0, !dbg !44
  %2038 = insertelement <2 x i32> %2037, i32 %1792, i64 1, !dbg !44
  %2039 = bitcast <2 x i32> %2038 to <2 x float>, !dbg !44
  %2040 = load <2 x float>, ptr addrspace(3) %1906, align 16, !dbg !56
  %2041 = fadd <2 x float> %2039, %2036, !dbg !60
  %2042 = fadd <2 x float> %2041, splat (float 1.000000e+00), !dbg !61
  %2043 = fmul <2 x float> %2042, %2040, !dbg !62
  %2044 = fadd <2 x float> %2035, %2032, !dbg !63
  %2045 = fadd <2 x float> %2044, %2043, !dbg !64
  %2046 = extractelement <2 x float> %2045, i64 0, !dbg !65
  %2047 = select i1 %26, float %2046, float 0x7FF0000000000000, !dbg !66
  %2048 = extractelement <2 x float> %2045, i64 1, !dbg !65
  %2049 = select i1 %26, float %2048, float 0x7FF0000000000000, !dbg !66
  %2050 = select i1 %26, float %2046, float 0xFFF0000000000000, !dbg !65
  %2051 = select i1 %26, float %2048, float 0xFFF0000000000000, !dbg !65
  %2052 = fptrunc <2 x float> %2045 to <2 x bfloat>, !dbg !67
  %2053 = fpext <2 x bfloat> %1743 to <2 x float>, !dbg !58
  %2054 = insertelement <2 x i32> poison, i32 %1759, i64 0, !dbg !48
  %2055 = insertelement <2 x i32> %2054, i32 %1758, i64 1, !dbg !48
  %2056 = bitcast <2 x i32> %2055 to <2 x float>, !dbg !48
  %2057 = fpext <2 x bfloat> %1775 to <2 x float>, !dbg !59
  %2058 = insertelement <2 x i32> poison, i32 %1791, i64 0, !dbg !44
  %2059 = insertelement <2 x i32> %2058, i32 %1790, i64 1, !dbg !44
  %2060 = bitcast <2 x i32> %2059 to <2 x float>, !dbg !44
  %2061 = load <2 x float>, ptr addrspace(3) %1908, align 8, !dbg !56
  %2062 = fadd <2 x float> %2060, %2057, !dbg !60
  %2063 = fadd <2 x float> %2062, splat (float 1.000000e+00), !dbg !61
  %2064 = fmul <2 x float> %2063, %2061, !dbg !62
  %2065 = extractelement <2 x float> %2000, i64 0, !dbg !62
  %2066 = extractelement <2 x float> %2000, i64 1, !dbg !62
  %2067 = extractelement <2 x float> %2021, i64 0, !dbg !62
  %2068 = extractelement <2 x float> %2021, i64 1, !dbg !62
  %2069 = extractelement <2 x float> %2042, i64 0, !dbg !62
  %2070 = extractelement <2 x float> %2042, i64 1, !dbg !62
  %2071 = extractelement <2 x float> %2063, i64 0, !dbg !62
  %2072 = extractelement <2 x float> %2063, i64 1, !dbg !62
  %2073 = fadd <2 x float> %2056, %2053, !dbg !63
  %2074 = fadd <2 x float> %2073, %2064, !dbg !64
  %2075 = extractelement <2 x float> %2002, i64 0, !dbg !64
  %2076 = extractelement <2 x float> %2002, i64 1, !dbg !64
  %2077 = extractelement <2 x float> %2023, i64 0, !dbg !64
  %2078 = extractelement <2 x float> %2023, i64 1, !dbg !64
  %2079 = extractelement <2 x float> %2044, i64 0, !dbg !64
  %2080 = extractelement <2 x float> %2044, i64 1, !dbg !64
  %2081 = extractelement <2 x float> %2073, i64 0, !dbg !64
  %2082 = extractelement <2 x float> %2073, i64 1, !dbg !64
  %2083 = extractelement <2 x float> %2074, i64 0, !dbg !65
  %2084 = select i1 %26, float %2083, float 0x7FF0000000000000, !dbg !66
  %2085 = extractelement <2 x float> %2074, i64 1, !dbg !65
  %2086 = select i1 %26, float %2085, float 0x7FF0000000000000, !dbg !66
  %2087 = select i1 %26, float %2083, float 0xFFF0000000000000, !dbg !65
  %2088 = select i1 %26, float %2085, float 0xFFF0000000000000, !dbg !65
  %2089 = fptrunc <2 x float> %2074 to <2 x bfloat>, !dbg !67
  %2090 = fpext <2 x bfloat> %1741 to <2 x float>, !dbg !58
  %2091 = insertelement <2 x i32> poison, i32 %1757, i64 0, !dbg !48
  %2092 = insertelement <2 x i32> %2091, i32 %1756, i64 1, !dbg !48
  %2093 = bitcast <2 x i32> %2092 to <2 x float>, !dbg !48
  %2094 = fpext <2 x bfloat> %1773 to <2 x float>, !dbg !59
  %2095 = insertelement <2 x i32> poison, i32 %1789, i64 0, !dbg !44
  %2096 = insertelement <2 x i32> %2095, i32 %1788, i64 1, !dbg !44
  %2097 = bitcast <2 x i32> %2096 to <2 x float>, !dbg !44
  %2098 = load <2 x float>, ptr addrspace(3) %1910, align 16, !dbg !56
  %2099 = fadd <2 x float> %2097, %2094, !dbg !60
  %2100 = fadd <2 x float> %2099, splat (float 1.000000e+00), !dbg !61
  %2101 = fmul <2 x float> %2100, %2098, !dbg !62
  %2102 = fadd <2 x float> %2093, %2090, !dbg !63
  %2103 = fadd <2 x float> %2102, %2101, !dbg !64
  %2104 = extractelement <2 x float> %2103, i64 0, !dbg !65
  %2105 = select i1 %1804, float %2104, float 0x7FF0000000000000, !dbg !66
  %2106 = extractelement <2 x float> %2103, i64 1, !dbg !65
  %2107 = select i1 %1804, float %2106, float 0x7FF0000000000000, !dbg !66
  %2108 = select i1 %1804, float %2104, float 0xFFF0000000000000, !dbg !65
  %2109 = select i1 %1804, float %2106, float 0xFFF0000000000000, !dbg !65
  %2110 = fptrunc <2 x float> %2103 to <2 x bfloat>, !dbg !67
  %2111 = fpext <2 x bfloat> %1739 to <2 x float>, !dbg !58
  %2112 = insertelement <2 x i32> poison, i32 %1755, i64 0, !dbg !48
  %2113 = insertelement <2 x i32> %2112, i32 %1754, i64 1, !dbg !48
  %2114 = bitcast <2 x i32> %2113 to <2 x float>, !dbg !48
  %2115 = fpext <2 x bfloat> %1771 to <2 x float>, !dbg !59
  %2116 = insertelement <2 x i32> poison, i32 %1787, i64 0, !dbg !44
  %2117 = insertelement <2 x i32> %2116, i32 %1786, i64 1, !dbg !44
  %2118 = bitcast <2 x i32> %2117 to <2 x float>, !dbg !44
  %2119 = load <2 x float>, ptr addrspace(3) %1912, align 8, !dbg !56
  %2120 = fadd <2 x float> %2118, %2115, !dbg !60
  %2121 = fadd <2 x float> %2120, splat (float 1.000000e+00), !dbg !61
  %2122 = fmul <2 x float> %2121, %2119, !dbg !62
  %2123 = fadd <2 x float> %2114, %2111, !dbg !63
  %2124 = fadd <2 x float> %2123, %2122, !dbg !64
  %2125 = extractelement <2 x float> %2124, i64 0, !dbg !65
  %2126 = select i1 %1804, float %2125, float 0x7FF0000000000000, !dbg !66
  %2127 = extractelement <2 x float> %2124, i64 1, !dbg !65
  %2128 = select i1 %1804, float %2127, float 0x7FF0000000000000, !dbg !66
  %2129 = select i1 %1804, float %2125, float 0xFFF0000000000000, !dbg !65
  %2130 = select i1 %1804, float %2127, float 0xFFF0000000000000, !dbg !65
  %2131 = fptrunc <2 x float> %2124 to <2 x bfloat>, !dbg !67
  %2132 = fpext <2 x bfloat> %1737 to <2 x float>, !dbg !58
  %2133 = insertelement <2 x i32> poison, i32 %1753, i64 0, !dbg !48
  %2134 = insertelement <2 x i32> %2133, i32 %1752, i64 1, !dbg !48
  %2135 = bitcast <2 x i32> %2134 to <2 x float>, !dbg !48
  %2136 = fpext <2 x bfloat> %1769 to <2 x float>, !dbg !59
  %2137 = insertelement <2 x i32> poison, i32 %1785, i64 0, !dbg !44
  %2138 = insertelement <2 x i32> %2137, i32 %1784, i64 1, !dbg !44
  %2139 = bitcast <2 x i32> %2138 to <2 x float>, !dbg !44
  %2140 = load <2 x float>, ptr addrspace(3) %1914, align 16, !dbg !56
  %2141 = fadd <2 x float> %2139, %2136, !dbg !60
  %2142 = fadd <2 x float> %2141, splat (float 1.000000e+00), !dbg !61
  %2143 = fmul <2 x float> %2142, %2140, !dbg !62
  %2144 = fadd <2 x float> %2135, %2132, !dbg !63
  %2145 = fadd <2 x float> %2144, %2143, !dbg !64
  %2146 = extractelement <2 x float> %2145, i64 0, !dbg !65
  %2147 = select i1 %1804, float %2146, float 0x7FF0000000000000, !dbg !66
  %2148 = extractelement <2 x float> %2145, i64 1, !dbg !65
  %2149 = select i1 %1804, float %2148, float 0x7FF0000000000000, !dbg !66
  %2150 = select i1 %1804, float %2146, float 0xFFF0000000000000, !dbg !65
  %2151 = select i1 %1804, float %2148, float 0xFFF0000000000000, !dbg !65
  %2152 = fptrunc <2 x float> %2145 to <2 x bfloat>, !dbg !67
  %2153 = fpext <2 x bfloat> %1735 to <2 x float>, !dbg !58
  %2154 = insertelement <2 x i32> poison, i32 %1751, i64 0, !dbg !48
  %2155 = insertelement <2 x i32> %2154, i32 %1750, i64 1, !dbg !48
  %2156 = bitcast <2 x i32> %2155 to <2 x float>, !dbg !48
  %2157 = fpext <2 x bfloat> %1767 to <2 x float>, !dbg !59
  %2158 = insertelement <2 x i32> poison, i32 %1783, i64 0, !dbg !44
  %2159 = insertelement <2 x i32> %2158, i32 %1782, i64 1, !dbg !44
  %2160 = bitcast <2 x i32> %2159 to <2 x float>, !dbg !44
  %2161 = load <2 x float>, ptr addrspace(3) %1916, align 8, !dbg !56
  %2162 = fadd <2 x float> %2160, %2157, !dbg !60
  %2163 = fadd <2 x float> %2162, splat (float 1.000000e+00), !dbg !61
  %2164 = fmul <2 x float> %2163, %2161, !dbg !62
  %2165 = fadd <2 x float> %2156, %2153, !dbg !63
  %2166 = fadd <2 x float> %2165, %2164, !dbg !64
  %2167 = extractelement <2 x float> %2166, i64 0, !dbg !65
  %2168 = select i1 %1804, float %2167, float 0x7FF0000000000000, !dbg !66
  %2169 = extractelement <2 x float> %2166, i64 1, !dbg !65
  %2170 = select i1 %1804, float %2169, float 0x7FF0000000000000, !dbg !66
  %2171 = select i1 %1804, float %2167, float 0xFFF0000000000000, !dbg !65
  %2172 = select i1 %1804, float %2169, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1880, i32 %1918, i32 %1919, i32 %1920, i32 %1921, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1886, i32 %1922, i32 %1923, i32 %1924, i32 %1925, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1891, i32 %1926, i32 %1927, i32 %1928, i32 %1929, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1897, i32 %1930, i32 %1931, i32 %1932, i32 %1933, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2173 = load float, ptr addrspace(3) %1902, align 16, !dbg !56
  %2174 = load float, ptr addrspace(3) %1903, align 4, !dbg !56
  %2175 = load float, ptr addrspace(3) %1904, align 8, !dbg !56
  %2176 = load float, ptr addrspace(3) %1905, align 4, !dbg !56
  %2177 = load float, ptr addrspace(3) %1906, align 16, !dbg !56
  %2178 = load float, ptr addrspace(3) %1907, align 4, !dbg !56
  %2179 = load float, ptr addrspace(3) %1908, align 8, !dbg !56
  %2180 = load float, ptr addrspace(3) %1909, align 4, !dbg !56
  %2181 = load float, ptr addrspace(3) %1910, align 16, !dbg !56
  %2182 = load float, ptr addrspace(3) %1911, align 4, !dbg !56
  %2183 = load float, ptr addrspace(3) %1912, align 8, !dbg !56
  %2184 = load float, ptr addrspace(3) %1913, align 4, !dbg !56
  %2185 = load float, ptr addrspace(3) %1914, align 16, !dbg !56
  %2186 = load float, ptr addrspace(3) %1915, align 4, !dbg !56
  %2187 = load float, ptr addrspace(3) %1916, align 8, !dbg !56
  %2188 = load float, ptr addrspace(3) %1917, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1880, i32 %1934, i32 %1935, i32 %1936, i32 %1937, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1886, i32 %1938, i32 %1939, i32 %1940, i32 %1941, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1891, i32 %1942, i32 %1943, i32 %1944, i32 %1945, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1897, i32 %1946, i32 %1947, i32 %1948, i32 %1949, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2189 = load float, ptr addrspace(3) %1902, align 16, !dbg !56
  %2190 = load float, ptr addrspace(3) %1903, align 4, !dbg !56
  %2191 = load float, ptr addrspace(3) %1904, align 8, !dbg !56
  %2192 = load float, ptr addrspace(3) %1905, align 4, !dbg !56
  %2193 = load float, ptr addrspace(3) %1906, align 16, !dbg !56
  %2194 = load float, ptr addrspace(3) %1907, align 4, !dbg !56
  %2195 = load float, ptr addrspace(3) %1908, align 8, !dbg !56
  %2196 = load float, ptr addrspace(3) %1909, align 4, !dbg !56
  %2197 = load float, ptr addrspace(3) %1910, align 16, !dbg !56
  %2198 = load float, ptr addrspace(3) %1911, align 4, !dbg !56
  %2199 = load float, ptr addrspace(3) %1912, align 8, !dbg !56
  %2200 = load float, ptr addrspace(3) %1913, align 4, !dbg !56
  %2201 = load float, ptr addrspace(3) %1914, align 16, !dbg !56
  %2202 = load float, ptr addrspace(3) %1915, align 4, !dbg !56
  %2203 = load float, ptr addrspace(3) %1916, align 8, !dbg !56
  %2204 = load float, ptr addrspace(3) %1917, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1880, i32 %1950, i32 %1951, i32 %1952, i32 %1953, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1886, i32 %1954, i32 %1955, i32 %1956, i32 %1957, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1891, i32 %1958, i32 %1959, i32 %1960, i32 %1961, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1897, i32 %1962, i32 %1963, i32 %1964, i32 %1965, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %2205 = load float, ptr addrspace(3) %1902, align 16, !dbg !56
  %2206 = load float, ptr addrspace(3) %1903, align 4, !dbg !56
  %2207 = load float, ptr addrspace(3) %1904, align 8, !dbg !56
  %2208 = load float, ptr addrspace(3) %1905, align 4, !dbg !56
  %2209 = load float, ptr addrspace(3) %1906, align 16, !dbg !56
  %2210 = load float, ptr addrspace(3) %1907, align 4, !dbg !56
  %2211 = load float, ptr addrspace(3) %1908, align 8, !dbg !56
  %2212 = load float, ptr addrspace(3) %1909, align 4, !dbg !56
  %2213 = load float, ptr addrspace(3) %1910, align 16, !dbg !56
  %2214 = load float, ptr addrspace(3) %1911, align 4, !dbg !56
  %2215 = load float, ptr addrspace(3) %1912, align 8, !dbg !56
  %2216 = load float, ptr addrspace(3) %1913, align 4, !dbg !56
  %2217 = load float, ptr addrspace(3) %1914, align 16, !dbg !56
  %2218 = load float, ptr addrspace(3) %1915, align 4, !dbg !56
  %2219 = load float, ptr addrspace(3) %1916, align 8, !dbg !56
  %2220 = load float, ptr addrspace(3) %1917, align 4, !dbg !56
  %2221 = fmul float %2065, %2173, !dbg !62
  %2222 = fmul float %2066, %2174, !dbg !62
  %2223 = fmul float %2067, %2175, !dbg !62
  %2224 = fmul float %2068, %2176, !dbg !62
  %2225 = fmul float %2069, %2177, !dbg !62
  %2226 = fmul float %2070, %2178, !dbg !62
  %2227 = fmul float %2071, %2179, !dbg !62
  %2228 = fmul float %2072, %2180, !dbg !62
  %2229 = extractelement <2 x float> %2100, i64 0, !dbg !62
  %2230 = fmul float %2229, %2181, !dbg !62
  %2231 = extractelement <2 x float> %2100, i64 1, !dbg !62
  %2232 = fmul float %2231, %2182, !dbg !62
  %2233 = extractelement <2 x float> %2121, i64 0, !dbg !62
  %2234 = fmul float %2233, %2183, !dbg !62
  %2235 = extractelement <2 x float> %2121, i64 1, !dbg !62
  %2236 = fmul float %2235, %2184, !dbg !62
  %2237 = extractelement <2 x float> %2142, i64 0, !dbg !62
  %2238 = fmul float %2237, %2185, !dbg !62
  %2239 = extractelement <2 x float> %2142, i64 1, !dbg !62
  %2240 = fmul float %2239, %2186, !dbg !62
  %2241 = extractelement <2 x float> %2163, i64 0, !dbg !62
  %2242 = fmul float %2241, %2187, !dbg !62
  %2243 = extractelement <2 x float> %2163, i64 1, !dbg !62
  %2244 = fmul float %2243, %2188, !dbg !62
  %2245 = fmul float %2065, %2189, !dbg !62
  %2246 = fmul float %2066, %2190, !dbg !62
  %2247 = fmul float %2067, %2191, !dbg !62
  %2248 = fmul float %2068, %2192, !dbg !62
  %2249 = fmul float %2069, %2193, !dbg !62
  %2250 = fmul float %2070, %2194, !dbg !62
  %2251 = fmul float %2071, %2195, !dbg !62
  %2252 = fmul float %2072, %2196, !dbg !62
  %2253 = fmul float %2229, %2197, !dbg !62
  %2254 = fmul float %2231, %2198, !dbg !62
  %2255 = fmul float %2233, %2199, !dbg !62
  %2256 = fmul float %2235, %2200, !dbg !62
  %2257 = fmul float %2237, %2201, !dbg !62
  %2258 = fmul float %2239, %2202, !dbg !62
  %2259 = fmul float %2241, %2203, !dbg !62
  %2260 = fmul float %2243, %2204, !dbg !62
  %2261 = fmul float %2065, %2205, !dbg !62
  %2262 = fmul float %2066, %2206, !dbg !62
  %2263 = fmul float %2067, %2207, !dbg !62
  %2264 = fmul float %2068, %2208, !dbg !62
  %2265 = fmul float %2069, %2209, !dbg !62
  %2266 = fmul float %2070, %2210, !dbg !62
  %2267 = fmul float %2071, %2211, !dbg !62
  %2268 = fmul float %2072, %2212, !dbg !62
  %2269 = fmul float %2229, %2213, !dbg !62
  %2270 = fmul float %2231, %2214, !dbg !62
  %2271 = fmul float %2233, %2215, !dbg !62
  %2272 = fmul float %2235, %2216, !dbg !62
  %2273 = fmul float %2237, %2217, !dbg !62
  %2274 = fmul float %2239, %2218, !dbg !62
  %2275 = fmul float %2241, %2219, !dbg !62
  %2276 = fmul float %2243, %2220, !dbg !62
  %2277 = fadd float %2075, %2221, !dbg !64
  %2278 = fadd float %2076, %2222, !dbg !64
  %2279 = fadd float %2077, %2223, !dbg !64
  %2280 = fadd float %2078, %2224, !dbg !64
  %2281 = fadd float %2079, %2225, !dbg !64
  %2282 = fadd float %2080, %2226, !dbg !64
  %2283 = fadd float %2081, %2227, !dbg !64
  %2284 = fadd float %2082, %2228, !dbg !64
  %2285 = extractelement <2 x float> %2102, i64 0, !dbg !64
  %2286 = fadd float %2285, %2230, !dbg !64
  %2287 = extractelement <2 x float> %2102, i64 1, !dbg !64
  %2288 = fadd float %2287, %2232, !dbg !64
  %2289 = extractelement <2 x float> %2123, i64 0, !dbg !64
  %2290 = fadd float %2289, %2234, !dbg !64
  %2291 = extractelement <2 x float> %2123, i64 1, !dbg !64
  %2292 = fadd float %2291, %2236, !dbg !64
  %2293 = extractelement <2 x float> %2144, i64 0, !dbg !64
  %2294 = fadd float %2293, %2238, !dbg !64
  %2295 = extractelement <2 x float> %2144, i64 1, !dbg !64
  %2296 = fadd float %2295, %2240, !dbg !64
  %2297 = extractelement <2 x float> %2165, i64 0, !dbg !64
  %2298 = fadd float %2297, %2242, !dbg !64
  %2299 = extractelement <2 x float> %2165, i64 1, !dbg !64
  %2300 = fadd float %2299, %2244, !dbg !64
  %2301 = fadd float %2075, %2245, !dbg !64
  %2302 = fadd float %2076, %2246, !dbg !64
  %2303 = fadd float %2077, %2247, !dbg !64
  %2304 = fadd float %2078, %2248, !dbg !64
  %2305 = fadd float %2079, %2249, !dbg !64
  %2306 = fadd float %2080, %2250, !dbg !64
  %2307 = fadd float %2081, %2251, !dbg !64
  %2308 = fadd float %2082, %2252, !dbg !64
  %2309 = fadd float %2285, %2253, !dbg !64
  %2310 = fadd float %2287, %2254, !dbg !64
  %2311 = fadd float %2289, %2255, !dbg !64
  %2312 = fadd float %2291, %2256, !dbg !64
  %2313 = fadd float %2293, %2257, !dbg !64
  %2314 = fadd float %2295, %2258, !dbg !64
  %2315 = fadd float %2297, %2259, !dbg !64
  %2316 = fadd float %2299, %2260, !dbg !64
  %2317 = fadd float %2075, %2261, !dbg !64
  %2318 = fadd float %2076, %2262, !dbg !64
  %2319 = fadd float %2077, %2263, !dbg !64
  %2320 = fadd float %2078, %2264, !dbg !64
  %2321 = fadd float %2079, %2265, !dbg !64
  %2322 = fadd float %2080, %2266, !dbg !64
  %2323 = fadd float %2081, %2267, !dbg !64
  %2324 = fadd float %2082, %2268, !dbg !64
  %2325 = fadd float %2285, %2269, !dbg !64
  %2326 = fadd float %2287, %2270, !dbg !64
  %2327 = fadd float %2289, %2271, !dbg !64
  %2328 = fadd float %2291, %2272, !dbg !64
  %2329 = fadd float %2293, %2273, !dbg !64
  %2330 = fadd float %2295, %2274, !dbg !64
  %2331 = fadd float %2297, %2275, !dbg !64
  %2332 = fadd float %2299, %2276, !dbg !64
  %2333 = select i1 %1802, float %2277, float 0x7FF0000000000000, !dbg !66
  %2334 = select i1 %1802, float %2278, float 0x7FF0000000000000, !dbg !66
  %2335 = select i1 %1802, float %2279, float 0x7FF0000000000000, !dbg !66
  %2336 = select i1 %1802, float %2280, float 0x7FF0000000000000, !dbg !66
  %2337 = select i1 %1802, float %2281, float 0x7FF0000000000000, !dbg !66
  %2338 = select i1 %1802, float %2282, float 0x7FF0000000000000, !dbg !66
  %2339 = select i1 %1802, float %2283, float 0x7FF0000000000000, !dbg !66
  %2340 = select i1 %1802, float %2284, float 0x7FF0000000000000, !dbg !66
  %2341 = select i1 %1803, float %2286, float 0x7FF0000000000000, !dbg !66
  %2342 = select i1 %1803, float %2288, float 0x7FF0000000000000, !dbg !66
  %2343 = select i1 %1803, float %2290, float 0x7FF0000000000000, !dbg !66
  %2344 = select i1 %1803, float %2292, float 0x7FF0000000000000, !dbg !66
  %2345 = select i1 %1803, float %2294, float 0x7FF0000000000000, !dbg !66
  %2346 = select i1 %1803, float %2296, float 0x7FF0000000000000, !dbg !66
  %2347 = select i1 %1803, float %2298, float 0x7FF0000000000000, !dbg !66
  %2348 = select i1 %1803, float %2300, float 0x7FF0000000000000, !dbg !66
  %2349 = select i1 %1800, float %2301, float 0x7FF0000000000000, !dbg !66
  %2350 = select i1 %1800, float %2302, float 0x7FF0000000000000, !dbg !66
  %2351 = select i1 %1800, float %2303, float 0x7FF0000000000000, !dbg !66
  %2352 = select i1 %1800, float %2304, float 0x7FF0000000000000, !dbg !66
  %2353 = select i1 %1800, float %2305, float 0x7FF0000000000000, !dbg !66
  %2354 = select i1 %1800, float %2306, float 0x7FF0000000000000, !dbg !66
  %2355 = select i1 %1800, float %2307, float 0x7FF0000000000000, !dbg !66
  %2356 = select i1 %1800, float %2308, float 0x7FF0000000000000, !dbg !66
  %2357 = select i1 %1801, float %2309, float 0x7FF0000000000000, !dbg !66
  %2358 = select i1 %1801, float %2310, float 0x7FF0000000000000, !dbg !66
  %2359 = select i1 %1801, float %2311, float 0x7FF0000000000000, !dbg !66
  %2360 = select i1 %1801, float %2312, float 0x7FF0000000000000, !dbg !66
  %2361 = select i1 %1801, float %2313, float 0x7FF0000000000000, !dbg !66
  %2362 = select i1 %1801, float %2314, float 0x7FF0000000000000, !dbg !66
  %2363 = select i1 %1801, float %2315, float 0x7FF0000000000000, !dbg !66
  %2364 = select i1 %1801, float %2316, float 0x7FF0000000000000, !dbg !66
  %2365 = select i1 %1798, float %2317, float 0x7FF0000000000000, !dbg !66
  %2366 = select i1 %1798, float %2318, float 0x7FF0000000000000, !dbg !66
  %2367 = select i1 %1798, float %2319, float 0x7FF0000000000000, !dbg !66
  %2368 = select i1 %1798, float %2320, float 0x7FF0000000000000, !dbg !66
  %2369 = select i1 %1798, float %2321, float 0x7FF0000000000000, !dbg !66
  %2370 = select i1 %1798, float %2322, float 0x7FF0000000000000, !dbg !66
  %2371 = select i1 %1798, float %2323, float 0x7FF0000000000000, !dbg !66
  %2372 = select i1 %1798, float %2324, float 0x7FF0000000000000, !dbg !66
  %2373 = select i1 %1799, float %2325, float 0x7FF0000000000000, !dbg !66
  %2374 = select i1 %1799, float %2326, float 0x7FF0000000000000, !dbg !66
  %2375 = select i1 %1799, float %2327, float 0x7FF0000000000000, !dbg !66
  %2376 = select i1 %1799, float %2328, float 0x7FF0000000000000, !dbg !66
  %2377 = select i1 %1799, float %2329, float 0x7FF0000000000000, !dbg !66
  %2378 = select i1 %1799, float %2330, float 0x7FF0000000000000, !dbg !66
  %2379 = select i1 %1799, float %2331, float 0x7FF0000000000000, !dbg !66
  %2380 = select i1 %1799, float %2332, float 0x7FF0000000000000, !dbg !66
  %2381 = select i1 %1802, float %2277, float 0xFFF0000000000000, !dbg !65
  %2382 = select i1 %1802, float %2278, float 0xFFF0000000000000, !dbg !65
  %2383 = select i1 %1802, float %2279, float 0xFFF0000000000000, !dbg !65
  %2384 = select i1 %1802, float %2280, float 0xFFF0000000000000, !dbg !65
  %2385 = select i1 %1802, float %2281, float 0xFFF0000000000000, !dbg !65
  %2386 = select i1 %1802, float %2282, float 0xFFF0000000000000, !dbg !65
  %2387 = select i1 %1802, float %2283, float 0xFFF0000000000000, !dbg !65
  %2388 = select i1 %1802, float %2284, float 0xFFF0000000000000, !dbg !65
  %2389 = select i1 %1803, float %2286, float 0xFFF0000000000000, !dbg !65
  %2390 = select i1 %1803, float %2288, float 0xFFF0000000000000, !dbg !65
  %2391 = select i1 %1803, float %2290, float 0xFFF0000000000000, !dbg !65
  %2392 = select i1 %1803, float %2292, float 0xFFF0000000000000, !dbg !65
  %2393 = select i1 %1803, float %2294, float 0xFFF0000000000000, !dbg !65
  %2394 = select i1 %1803, float %2296, float 0xFFF0000000000000, !dbg !65
  %2395 = select i1 %1803, float %2298, float 0xFFF0000000000000, !dbg !65
  %2396 = select i1 %1803, float %2300, float 0xFFF0000000000000, !dbg !65
  %2397 = select i1 %1800, float %2301, float 0xFFF0000000000000, !dbg !65
  %2398 = select i1 %1800, float %2302, float 0xFFF0000000000000, !dbg !65
  %2399 = select i1 %1800, float %2303, float 0xFFF0000000000000, !dbg !65
  %2400 = select i1 %1800, float %2304, float 0xFFF0000000000000, !dbg !65
  %2401 = select i1 %1800, float %2305, float 0xFFF0000000000000, !dbg !65
  %2402 = select i1 %1800, float %2306, float 0xFFF0000000000000, !dbg !65
  %2403 = select i1 %1800, float %2307, float 0xFFF0000000000000, !dbg !65
  %2404 = select i1 %1800, float %2308, float 0xFFF0000000000000, !dbg !65
  %2405 = select i1 %1801, float %2309, float 0xFFF0000000000000, !dbg !65
  %2406 = select i1 %1801, float %2310, float 0xFFF0000000000000, !dbg !65
  %2407 = select i1 %1801, float %2311, float 0xFFF0000000000000, !dbg !65
  %2408 = select i1 %1801, float %2312, float 0xFFF0000000000000, !dbg !65
  %2409 = select i1 %1801, float %2313, float 0xFFF0000000000000, !dbg !65
  %2410 = select i1 %1801, float %2314, float 0xFFF0000000000000, !dbg !65
  %2411 = select i1 %1801, float %2315, float 0xFFF0000000000000, !dbg !65
  %2412 = select i1 %1801, float %2316, float 0xFFF0000000000000, !dbg !65
  %2413 = select i1 %1798, float %2317, float 0xFFF0000000000000, !dbg !65
  %2414 = select i1 %1798, float %2318, float 0xFFF0000000000000, !dbg !65
  %2415 = select i1 %1798, float %2319, float 0xFFF0000000000000, !dbg !65
  %2416 = select i1 %1798, float %2320, float 0xFFF0000000000000, !dbg !65
  %2417 = select i1 %1798, float %2321, float 0xFFF0000000000000, !dbg !65
  %2418 = select i1 %1798, float %2322, float 0xFFF0000000000000, !dbg !65
  %2419 = select i1 %1798, float %2323, float 0xFFF0000000000000, !dbg !65
  %2420 = select i1 %1798, float %2324, float 0xFFF0000000000000, !dbg !65
  %2421 = select i1 %1799, float %2325, float 0xFFF0000000000000, !dbg !65
  %2422 = select i1 %1799, float %2326, float 0xFFF0000000000000, !dbg !65
  %2423 = select i1 %1799, float %2327, float 0xFFF0000000000000, !dbg !65
  %2424 = select i1 %1799, float %2328, float 0xFFF0000000000000, !dbg !65
  %2425 = select i1 %1799, float %2329, float 0xFFF0000000000000, !dbg !65
  %2426 = select i1 %1799, float %2330, float 0xFFF0000000000000, !dbg !65
  %2427 = select i1 %1799, float %2331, float 0xFFF0000000000000, !dbg !65
  %2428 = select i1 %1799, float %2332, float 0xFFF0000000000000, !dbg !65
  %2429 = fptrunc <2 x float> %2166 to <2 x bfloat>, !dbg !67
  %2430 = fptrunc float %2277 to bfloat, !dbg !67
  %2431 = fptrunc float %2278 to bfloat, !dbg !67
  %2432 = fptrunc float %2279 to bfloat, !dbg !67
  %2433 = fptrunc float %2280 to bfloat, !dbg !67
  %2434 = fptrunc float %2281 to bfloat, !dbg !67
  %2435 = fptrunc float %2282 to bfloat, !dbg !67
  %2436 = fptrunc float %2283 to bfloat, !dbg !67
  %2437 = fptrunc float %2284 to bfloat, !dbg !67
  %2438 = fptrunc float %2286 to bfloat, !dbg !67
  %2439 = fptrunc float %2288 to bfloat, !dbg !67
  %2440 = fptrunc float %2290 to bfloat, !dbg !67
  %2441 = fptrunc float %2292 to bfloat, !dbg !67
  %2442 = fptrunc float %2294 to bfloat, !dbg !67
  %2443 = fptrunc float %2296 to bfloat, !dbg !67
  %2444 = fptrunc float %2298 to bfloat, !dbg !67
  %2445 = fptrunc float %2300 to bfloat, !dbg !67
  %2446 = fptrunc float %2301 to bfloat, !dbg !67
  %2447 = fptrunc float %2302 to bfloat, !dbg !67
  %2448 = fptrunc float %2303 to bfloat, !dbg !67
  %2449 = fptrunc float %2304 to bfloat, !dbg !67
  %2450 = fptrunc float %2305 to bfloat, !dbg !67
  %2451 = fptrunc float %2306 to bfloat, !dbg !67
  %2452 = fptrunc float %2307 to bfloat, !dbg !67
  %2453 = fptrunc float %2308 to bfloat, !dbg !67
  %2454 = fptrunc float %2309 to bfloat, !dbg !67
  %2455 = fptrunc float %2310 to bfloat, !dbg !67
  %2456 = fptrunc float %2311 to bfloat, !dbg !67
  %2457 = fptrunc float %2312 to bfloat, !dbg !67
  %2458 = fptrunc float %2313 to bfloat, !dbg !67
  %2459 = fptrunc float %2314 to bfloat, !dbg !67
  %2460 = fptrunc float %2315 to bfloat, !dbg !67
  %2461 = fptrunc float %2316 to bfloat, !dbg !67
  %2462 = fptrunc float %2317 to bfloat, !dbg !67
  %2463 = fptrunc float %2318 to bfloat, !dbg !67
  %2464 = fptrunc float %2319 to bfloat, !dbg !67
  %2465 = fptrunc float %2320 to bfloat, !dbg !67
  %2466 = fptrunc float %2321 to bfloat, !dbg !67
  %2467 = fptrunc float %2322 to bfloat, !dbg !67
  %2468 = fptrunc float %2323 to bfloat, !dbg !67
  %2469 = fptrunc float %2324 to bfloat, !dbg !67
  %2470 = fptrunc float %2325 to bfloat, !dbg !67
  %2471 = fptrunc float %2326 to bfloat, !dbg !67
  %2472 = fptrunc float %2327 to bfloat, !dbg !67
  %2473 = fptrunc float %2328 to bfloat, !dbg !67
  %2474 = fptrunc float %2329 to bfloat, !dbg !67
  %2475 = fptrunc float %2330 to bfloat, !dbg !67
  %2476 = fptrunc float %2331 to bfloat, !dbg !67
  %2477 = fptrunc float %2332 to bfloat, !dbg !67
  %2478 = bitcast <2 x bfloat> %2010 to i32, !dbg !67
  %2479 = bitcast <2 x bfloat> %2031 to i32, !dbg !67
  %2480 = bitcast <2 x bfloat> %2052 to i32, !dbg !67
  %2481 = bitcast <2 x bfloat> %2089 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2478, i32 %2479, i32 %2480, i32 %2481, ptr addrspace(1) %1967, i1 %26) #5, !dbg !67
  %2482 = bitcast <2 x bfloat> %2110 to i32, !dbg !67
  %2483 = bitcast <2 x bfloat> %2131 to i32, !dbg !67
  %2484 = bitcast <2 x bfloat> %2152 to i32, !dbg !67
  %2485 = bitcast <2 x bfloat> %2429 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2482, i32 %2483, i32 %2484, i32 %2485, ptr addrspace(1) %1969, i1 %1804) #5, !dbg !67
  %2486 = insertelement <2 x bfloat> poison, bfloat %2430, i64 0, !dbg !67
  %2487 = insertelement <2 x bfloat> %2486, bfloat %2431, i64 1, !dbg !67
  %2488 = bitcast <2 x bfloat> %2487 to i32, !dbg !67
  %2489 = insertelement <2 x bfloat> poison, bfloat %2432, i64 0, !dbg !67
  %2490 = insertelement <2 x bfloat> %2489, bfloat %2433, i64 1, !dbg !67
  %2491 = bitcast <2 x bfloat> %2490 to i32, !dbg !67
  %2492 = insertelement <2 x bfloat> poison, bfloat %2434, i64 0, !dbg !67
  %2493 = insertelement <2 x bfloat> %2492, bfloat %2435, i64 1, !dbg !67
  %2494 = bitcast <2 x bfloat> %2493 to i32, !dbg !67
  %2495 = insertelement <2 x bfloat> poison, bfloat %2436, i64 0, !dbg !67
  %2496 = insertelement <2 x bfloat> %2495, bfloat %2437, i64 1, !dbg !67
  %2497 = bitcast <2 x bfloat> %2496 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2488, i32 %2491, i32 %2494, i32 %2497, ptr addrspace(1) %1971, i1 %1802) #5, !dbg !67
  %2498 = insertelement <2 x bfloat> poison, bfloat %2438, i64 0, !dbg !67
  %2499 = insertelement <2 x bfloat> %2498, bfloat %2439, i64 1, !dbg !67
  %2500 = bitcast <2 x bfloat> %2499 to i32, !dbg !67
  %2501 = insertelement <2 x bfloat> poison, bfloat %2440, i64 0, !dbg !67
  %2502 = insertelement <2 x bfloat> %2501, bfloat %2441, i64 1, !dbg !67
  %2503 = bitcast <2 x bfloat> %2502 to i32, !dbg !67
  %2504 = insertelement <2 x bfloat> poison, bfloat %2442, i64 0, !dbg !67
  %2505 = insertelement <2 x bfloat> %2504, bfloat %2443, i64 1, !dbg !67
  %2506 = bitcast <2 x bfloat> %2505 to i32, !dbg !67
  %2507 = insertelement <2 x bfloat> poison, bfloat %2444, i64 0, !dbg !67
  %2508 = insertelement <2 x bfloat> %2507, bfloat %2445, i64 1, !dbg !67
  %2509 = bitcast <2 x bfloat> %2508 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2500, i32 %2503, i32 %2506, i32 %2509, ptr addrspace(1) %1973, i1 %1803) #5, !dbg !67
  %2510 = insertelement <2 x bfloat> poison, bfloat %2446, i64 0, !dbg !67
  %2511 = insertelement <2 x bfloat> %2510, bfloat %2447, i64 1, !dbg !67
  %2512 = bitcast <2 x bfloat> %2511 to i32, !dbg !67
  %2513 = insertelement <2 x bfloat> poison, bfloat %2448, i64 0, !dbg !67
  %2514 = insertelement <2 x bfloat> %2513, bfloat %2449, i64 1, !dbg !67
  %2515 = bitcast <2 x bfloat> %2514 to i32, !dbg !67
  %2516 = insertelement <2 x bfloat> poison, bfloat %2450, i64 0, !dbg !67
  %2517 = insertelement <2 x bfloat> %2516, bfloat %2451, i64 1, !dbg !67
  %2518 = bitcast <2 x bfloat> %2517 to i32, !dbg !67
  %2519 = insertelement <2 x bfloat> poison, bfloat %2452, i64 0, !dbg !67
  %2520 = insertelement <2 x bfloat> %2519, bfloat %2453, i64 1, !dbg !67
  %2521 = bitcast <2 x bfloat> %2520 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2512, i32 %2515, i32 %2518, i32 %2521, ptr addrspace(1) %1975, i1 %1800) #5, !dbg !67
  %2522 = insertelement <2 x bfloat> poison, bfloat %2454, i64 0, !dbg !67
  %2523 = insertelement <2 x bfloat> %2522, bfloat %2455, i64 1, !dbg !67
  %2524 = bitcast <2 x bfloat> %2523 to i32, !dbg !67
  %2525 = insertelement <2 x bfloat> poison, bfloat %2456, i64 0, !dbg !67
  %2526 = insertelement <2 x bfloat> %2525, bfloat %2457, i64 1, !dbg !67
  %2527 = bitcast <2 x bfloat> %2526 to i32, !dbg !67
  %2528 = insertelement <2 x bfloat> poison, bfloat %2458, i64 0, !dbg !67
  %2529 = insertelement <2 x bfloat> %2528, bfloat %2459, i64 1, !dbg !67
  %2530 = bitcast <2 x bfloat> %2529 to i32, !dbg !67
  %2531 = insertelement <2 x bfloat> poison, bfloat %2460, i64 0, !dbg !67
  %2532 = insertelement <2 x bfloat> %2531, bfloat %2461, i64 1, !dbg !67
  %2533 = bitcast <2 x bfloat> %2532 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2524, i32 %2527, i32 %2530, i32 %2533, ptr addrspace(1) %1977, i1 %1801) #5, !dbg !67
  %2534 = insertelement <2 x bfloat> poison, bfloat %2462, i64 0, !dbg !67
  %2535 = insertelement <2 x bfloat> %2534, bfloat %2463, i64 1, !dbg !67
  %2536 = bitcast <2 x bfloat> %2535 to i32, !dbg !67
  %2537 = insertelement <2 x bfloat> poison, bfloat %2464, i64 0, !dbg !67
  %2538 = insertelement <2 x bfloat> %2537, bfloat %2465, i64 1, !dbg !67
  %2539 = bitcast <2 x bfloat> %2538 to i32, !dbg !67
  %2540 = insertelement <2 x bfloat> poison, bfloat %2466, i64 0, !dbg !67
  %2541 = insertelement <2 x bfloat> %2540, bfloat %2467, i64 1, !dbg !67
  %2542 = bitcast <2 x bfloat> %2541 to i32, !dbg !67
  %2543 = insertelement <2 x bfloat> poison, bfloat %2468, i64 0, !dbg !67
  %2544 = insertelement <2 x bfloat> %2543, bfloat %2469, i64 1, !dbg !67
  %2545 = bitcast <2 x bfloat> %2544 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2536, i32 %2539, i32 %2542, i32 %2545, ptr addrspace(1) %1979, i1 %1798) #5, !dbg !67
  %2546 = insertelement <2 x bfloat> poison, bfloat %2470, i64 0, !dbg !67
  %2547 = insertelement <2 x bfloat> %2546, bfloat %2471, i64 1, !dbg !67
  %2548 = bitcast <2 x bfloat> %2547 to i32, !dbg !67
  %2549 = insertelement <2 x bfloat> poison, bfloat %2472, i64 0, !dbg !67
  %2550 = insertelement <2 x bfloat> %2549, bfloat %2473, i64 1, !dbg !67
  %2551 = bitcast <2 x bfloat> %2550 to i32, !dbg !67
  %2552 = insertelement <2 x bfloat> poison, bfloat %2474, i64 0, !dbg !67
  %2553 = insertelement <2 x bfloat> %2552, bfloat %2475, i64 1, !dbg !67
  %2554 = bitcast <2 x bfloat> %2553 to i32, !dbg !67
  %2555 = insertelement <2 x bfloat> poison, bfloat %2476, i64 0, !dbg !67
  %2556 = insertelement <2 x bfloat> %2555, bfloat %2477, i64 1, !dbg !67
  %2557 = bitcast <2 x bfloat> %2556 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2548, i32 %2551, i32 %2554, i32 %2557, ptr addrspace(1) %1981, i1 %1799) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2558 = fcmp olt float %2005, %2007, !dbg !70
  %2559 = fcmp uno float %2005, 0.000000e+00, !dbg !71
  %2560 = or i1 %2558, %2559, !dbg !72
  %2561 = select i1 %2560, float %2005, float %2007, !dbg !73
  %2562 = fcmp olt float %2561, %2026, !dbg !70
  %2563 = fcmp uno float %2561, 0.000000e+00, !dbg !71
  %2564 = or i1 %2562, %2563, !dbg !72
  %2565 = select i1 %2564, float %2561, float %2026, !dbg !73
  %2566 = fcmp olt float %2565, %2028, !dbg !70
  %2567 = fcmp uno float %2565, 0.000000e+00, !dbg !71
  %2568 = or i1 %2566, %2567, !dbg !72
  %2569 = select i1 %2568, float %2565, float %2028, !dbg !73
  %2570 = fcmp olt float %2569, %2047, !dbg !70
  %2571 = fcmp uno float %2569, 0.000000e+00, !dbg !71
  %2572 = or i1 %2570, %2571, !dbg !72
  %2573 = select i1 %2572, float %2569, float %2047, !dbg !73
  %2574 = fcmp olt float %2573, %2049, !dbg !70
  %2575 = fcmp uno float %2573, 0.000000e+00, !dbg !71
  %2576 = or i1 %2574, %2575, !dbg !72
  %2577 = select i1 %2576, float %2573, float %2049, !dbg !73
  %2578 = fcmp olt float %2577, %2084, !dbg !70
  %2579 = fcmp uno float %2577, 0.000000e+00, !dbg !71
  %2580 = or i1 %2578, %2579, !dbg !72
  %2581 = select i1 %2580, float %2577, float %2084, !dbg !73
  %2582 = fcmp olt float %2581, %2086, !dbg !70
  %2583 = fcmp uno float %2581, 0.000000e+00, !dbg !71
  %2584 = or i1 %2582, %2583, !dbg !72
  %2585 = select i1 %2584, float %2581, float %2086, !dbg !73
  %2586 = fcmp olt float %2585, %2105, !dbg !70
  %2587 = fcmp uno float %2585, 0.000000e+00, !dbg !71
  %2588 = or i1 %2586, %2587, !dbg !72
  %2589 = select i1 %2588, float %2585, float %2105, !dbg !73
  %2590 = fcmp olt float %2589, %2107, !dbg !70
  %2591 = fcmp uno float %2589, 0.000000e+00, !dbg !71
  %2592 = or i1 %2590, %2591, !dbg !72
  %2593 = select i1 %2592, float %2589, float %2107, !dbg !73
  %2594 = fcmp olt float %2593, %2126, !dbg !70
  %2595 = fcmp uno float %2593, 0.000000e+00, !dbg !71
  %2596 = or i1 %2594, %2595, !dbg !72
  %2597 = select i1 %2596, float %2593, float %2126, !dbg !73
  %2598 = fcmp olt float %2597, %2128, !dbg !70
  %2599 = fcmp uno float %2597, 0.000000e+00, !dbg !71
  %2600 = or i1 %2598, %2599, !dbg !72
  %2601 = select i1 %2600, float %2597, float %2128, !dbg !73
  %2602 = fcmp olt float %2601, %2147, !dbg !70
  %2603 = fcmp uno float %2601, 0.000000e+00, !dbg !71
  %2604 = or i1 %2602, %2603, !dbg !72
  %2605 = select i1 %2604, float %2601, float %2147, !dbg !73
  %2606 = fcmp olt float %2605, %2149, !dbg !70
  %2607 = fcmp uno float %2605, 0.000000e+00, !dbg !71
  %2608 = or i1 %2606, %2607, !dbg !72
  %2609 = select i1 %2608, float %2605, float %2149, !dbg !73
  %2610 = fcmp olt float %2609, %2168, !dbg !70
  %2611 = fcmp uno float %2609, 0.000000e+00, !dbg !71
  %2612 = or i1 %2610, %2611, !dbg !72
  %2613 = select i1 %2612, float %2609, float %2168, !dbg !73
  %2614 = fcmp olt float %2613, %2170, !dbg !70
  %2615 = fcmp uno float %2613, 0.000000e+00, !dbg !71
  %2616 = or i1 %2614, %2615, !dbg !72
  %2617 = select i1 %2616, float %2613, float %2170, !dbg !73
  %2618 = fcmp olt float %2333, %2334, !dbg !70
  %2619 = fcmp uno float %2333, 0.000000e+00, !dbg !71
  %2620 = or i1 %2618, %2619, !dbg !72
  %2621 = select i1 %2620, float %2333, float %2334, !dbg !73
  %2622 = fcmp olt float %2621, %2335, !dbg !70
  %2623 = fcmp uno float %2621, 0.000000e+00, !dbg !71
  %2624 = or i1 %2622, %2623, !dbg !72
  %2625 = select i1 %2624, float %2621, float %2335, !dbg !73
  %2626 = fcmp olt float %2625, %2336, !dbg !70
  %2627 = fcmp uno float %2625, 0.000000e+00, !dbg !71
  %2628 = or i1 %2626, %2627, !dbg !72
  %2629 = select i1 %2628, float %2625, float %2336, !dbg !73
  %2630 = fcmp olt float %2629, %2337, !dbg !70
  %2631 = fcmp uno float %2629, 0.000000e+00, !dbg !71
  %2632 = or i1 %2630, %2631, !dbg !72
  %2633 = select i1 %2632, float %2629, float %2337, !dbg !73
  %2634 = fcmp olt float %2633, %2338, !dbg !70
  %2635 = fcmp uno float %2633, 0.000000e+00, !dbg !71
  %2636 = or i1 %2634, %2635, !dbg !72
  %2637 = select i1 %2636, float %2633, float %2338, !dbg !73
  %2638 = fcmp olt float %2637, %2339, !dbg !70
  %2639 = fcmp uno float %2637, 0.000000e+00, !dbg !71
  %2640 = or i1 %2638, %2639, !dbg !72
  %2641 = select i1 %2640, float %2637, float %2339, !dbg !73
  %2642 = fcmp olt float %2641, %2340, !dbg !70
  %2643 = fcmp uno float %2641, 0.000000e+00, !dbg !71
  %2644 = or i1 %2642, %2643, !dbg !72
  %2645 = select i1 %2644, float %2641, float %2340, !dbg !73
  %2646 = fcmp olt float %2645, %2341, !dbg !70
  %2647 = fcmp uno float %2645, 0.000000e+00, !dbg !71
  %2648 = or i1 %2646, %2647, !dbg !72
  %2649 = select i1 %2648, float %2645, float %2341, !dbg !73
  %2650 = fcmp olt float %2649, %2342, !dbg !70
  %2651 = fcmp uno float %2649, 0.000000e+00, !dbg !71
  %2652 = or i1 %2650, %2651, !dbg !72
  %2653 = select i1 %2652, float %2649, float %2342, !dbg !73
  %2654 = fcmp olt float %2653, %2343, !dbg !70
  %2655 = fcmp uno float %2653, 0.000000e+00, !dbg !71
  %2656 = or i1 %2654, %2655, !dbg !72
  %2657 = select i1 %2656, float %2653, float %2343, !dbg !73
  %2658 = fcmp olt float %2657, %2344, !dbg !70
  %2659 = fcmp uno float %2657, 0.000000e+00, !dbg !71
  %2660 = or i1 %2658, %2659, !dbg !72
  %2661 = select i1 %2660, float %2657, float %2344, !dbg !73
  %2662 = fcmp olt float %2661, %2345, !dbg !70
  %2663 = fcmp uno float %2661, 0.000000e+00, !dbg !71
  %2664 = or i1 %2662, %2663, !dbg !72
  %2665 = select i1 %2664, float %2661, float %2345, !dbg !73
  %2666 = fcmp olt float %2665, %2346, !dbg !70
  %2667 = fcmp uno float %2665, 0.000000e+00, !dbg !71
  %2668 = or i1 %2666, %2667, !dbg !72
  %2669 = select i1 %2668, float %2665, float %2346, !dbg !73
  %2670 = fcmp olt float %2669, %2347, !dbg !70
  %2671 = fcmp uno float %2669, 0.000000e+00, !dbg !71
  %2672 = or i1 %2670, %2671, !dbg !72
  %2673 = select i1 %2672, float %2669, float %2347, !dbg !73
  %2674 = fcmp olt float %2673, %2348, !dbg !70
  %2675 = fcmp uno float %2673, 0.000000e+00, !dbg !71
  %2676 = or i1 %2674, %2675, !dbg !72
  %2677 = select i1 %2676, float %2673, float %2348, !dbg !73
  %2678 = fcmp olt float %2349, %2350, !dbg !70
  %2679 = fcmp uno float %2349, 0.000000e+00, !dbg !71
  %2680 = or i1 %2678, %2679, !dbg !72
  %2681 = select i1 %2680, float %2349, float %2350, !dbg !73
  %2682 = fcmp olt float %2681, %2351, !dbg !70
  %2683 = fcmp uno float %2681, 0.000000e+00, !dbg !71
  %2684 = or i1 %2682, %2683, !dbg !72
  %2685 = select i1 %2684, float %2681, float %2351, !dbg !73
  %2686 = fcmp olt float %2685, %2352, !dbg !70
  %2687 = fcmp uno float %2685, 0.000000e+00, !dbg !71
  %2688 = or i1 %2686, %2687, !dbg !72
  %2689 = select i1 %2688, float %2685, float %2352, !dbg !73
  %2690 = fcmp olt float %2689, %2353, !dbg !70
  %2691 = fcmp uno float %2689, 0.000000e+00, !dbg !71
  %2692 = or i1 %2690, %2691, !dbg !72
  %2693 = select i1 %2692, float %2689, float %2353, !dbg !73
  %2694 = fcmp olt float %2693, %2354, !dbg !70
  %2695 = fcmp uno float %2693, 0.000000e+00, !dbg !71
  %2696 = or i1 %2694, %2695, !dbg !72
  %2697 = select i1 %2696, float %2693, float %2354, !dbg !73
  %2698 = fcmp olt float %2697, %2355, !dbg !70
  %2699 = fcmp uno float %2697, 0.000000e+00, !dbg !71
  %2700 = or i1 %2698, %2699, !dbg !72
  %2701 = select i1 %2700, float %2697, float %2355, !dbg !73
  %2702 = fcmp olt float %2701, %2356, !dbg !70
  %2703 = fcmp uno float %2701, 0.000000e+00, !dbg !71
  %2704 = or i1 %2702, %2703, !dbg !72
  %2705 = select i1 %2704, float %2701, float %2356, !dbg !73
  %2706 = fcmp olt float %2705, %2357, !dbg !70
  %2707 = fcmp uno float %2705, 0.000000e+00, !dbg !71
  %2708 = or i1 %2706, %2707, !dbg !72
  %2709 = select i1 %2708, float %2705, float %2357, !dbg !73
  %2710 = fcmp olt float %2709, %2358, !dbg !70
  %2711 = fcmp uno float %2709, 0.000000e+00, !dbg !71
  %2712 = or i1 %2710, %2711, !dbg !72
  %2713 = select i1 %2712, float %2709, float %2358, !dbg !73
  %2714 = fcmp olt float %2713, %2359, !dbg !70
  %2715 = fcmp uno float %2713, 0.000000e+00, !dbg !71
  %2716 = or i1 %2714, %2715, !dbg !72
  %2717 = select i1 %2716, float %2713, float %2359, !dbg !73
  %2718 = fcmp olt float %2717, %2360, !dbg !70
  %2719 = fcmp uno float %2717, 0.000000e+00, !dbg !71
  %2720 = or i1 %2718, %2719, !dbg !72
  %2721 = select i1 %2720, float %2717, float %2360, !dbg !73
  %2722 = fcmp olt float %2721, %2361, !dbg !70
  %2723 = fcmp uno float %2721, 0.000000e+00, !dbg !71
  %2724 = or i1 %2722, %2723, !dbg !72
  %2725 = select i1 %2724, float %2721, float %2361, !dbg !73
  %2726 = fcmp olt float %2725, %2362, !dbg !70
  %2727 = fcmp uno float %2725, 0.000000e+00, !dbg !71
  %2728 = or i1 %2726, %2727, !dbg !72
  %2729 = select i1 %2728, float %2725, float %2362, !dbg !73
  %2730 = fcmp olt float %2729, %2363, !dbg !70
  %2731 = fcmp uno float %2729, 0.000000e+00, !dbg !71
  %2732 = or i1 %2730, %2731, !dbg !72
  %2733 = select i1 %2732, float %2729, float %2363, !dbg !73
  %2734 = fcmp olt float %2733, %2364, !dbg !70
  %2735 = fcmp uno float %2733, 0.000000e+00, !dbg !71
  %2736 = or i1 %2734, %2735, !dbg !72
  %2737 = select i1 %2736, float %2733, float %2364, !dbg !73
  %2738 = fcmp olt float %2365, %2366, !dbg !70
  %2739 = fcmp uno float %2365, 0.000000e+00, !dbg !71
  %2740 = or i1 %2738, %2739, !dbg !72
  %2741 = select i1 %2740, float %2365, float %2366, !dbg !73
  %2742 = fcmp olt float %2741, %2367, !dbg !70
  %2743 = fcmp uno float %2741, 0.000000e+00, !dbg !71
  %2744 = or i1 %2742, %2743, !dbg !72
  %2745 = select i1 %2744, float %2741, float %2367, !dbg !73
  %2746 = fcmp olt float %2745, %2368, !dbg !70
  %2747 = fcmp uno float %2745, 0.000000e+00, !dbg !71
  %2748 = or i1 %2746, %2747, !dbg !72
  %2749 = select i1 %2748, float %2745, float %2368, !dbg !73
  %2750 = fcmp olt float %2749, %2369, !dbg !70
  %2751 = fcmp uno float %2749, 0.000000e+00, !dbg !71
  %2752 = or i1 %2750, %2751, !dbg !72
  %2753 = select i1 %2752, float %2749, float %2369, !dbg !73
  %2754 = fcmp olt float %2753, %2370, !dbg !70
  %2755 = fcmp uno float %2753, 0.000000e+00, !dbg !71
  %2756 = or i1 %2754, %2755, !dbg !72
  %2757 = select i1 %2756, float %2753, float %2370, !dbg !73
  %2758 = fcmp olt float %2757, %2371, !dbg !70
  %2759 = fcmp uno float %2757, 0.000000e+00, !dbg !71
  %2760 = or i1 %2758, %2759, !dbg !72
  %2761 = select i1 %2760, float %2757, float %2371, !dbg !73
  %2762 = fcmp olt float %2761, %2372, !dbg !70
  %2763 = fcmp uno float %2761, 0.000000e+00, !dbg !71
  %2764 = or i1 %2762, %2763, !dbg !72
  %2765 = select i1 %2764, float %2761, float %2372, !dbg !73
  %2766 = fcmp olt float %2765, %2373, !dbg !70
  %2767 = fcmp uno float %2765, 0.000000e+00, !dbg !71
  %2768 = or i1 %2766, %2767, !dbg !72
  %2769 = select i1 %2768, float %2765, float %2373, !dbg !73
  %2770 = fcmp olt float %2769, %2374, !dbg !70
  %2771 = fcmp uno float %2769, 0.000000e+00, !dbg !71
  %2772 = or i1 %2770, %2771, !dbg !72
  %2773 = select i1 %2772, float %2769, float %2374, !dbg !73
  %2774 = fcmp olt float %2773, %2375, !dbg !70
  %2775 = fcmp uno float %2773, 0.000000e+00, !dbg !71
  %2776 = or i1 %2774, %2775, !dbg !72
  %2777 = select i1 %2776, float %2773, float %2375, !dbg !73
  %2778 = fcmp olt float %2777, %2376, !dbg !70
  %2779 = fcmp uno float %2777, 0.000000e+00, !dbg !71
  %2780 = or i1 %2778, %2779, !dbg !72
  %2781 = select i1 %2780, float %2777, float %2376, !dbg !73
  %2782 = fcmp olt float %2781, %2377, !dbg !70
  %2783 = fcmp uno float %2781, 0.000000e+00, !dbg !71
  %2784 = or i1 %2782, %2783, !dbg !72
  %2785 = select i1 %2784, float %2781, float %2377, !dbg !73
  %2786 = fcmp olt float %2785, %2378, !dbg !70
  %2787 = fcmp uno float %2785, 0.000000e+00, !dbg !71
  %2788 = or i1 %2786, %2787, !dbg !72
  %2789 = select i1 %2788, float %2785, float %2378, !dbg !73
  %2790 = fcmp olt float %2789, %2379, !dbg !70
  %2791 = fcmp uno float %2789, 0.000000e+00, !dbg !71
  %2792 = or i1 %2790, %2791, !dbg !72
  %2793 = select i1 %2792, float %2789, float %2379, !dbg !73
  %2794 = fcmp olt float %2793, %2380, !dbg !70
  %2795 = fcmp uno float %2793, 0.000000e+00, !dbg !71
  %2796 = or i1 %2794, %2795, !dbg !72
  %2797 = select i1 %2796, float %2793, float %2380, !dbg !73
  %2798 = bitcast float %2617 to i32, !dbg !68
  %2799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2798, i32 16, i32 31), !dbg !68
  %2800 = bitcast i32 %2799 to float, !dbg !68
  %2801 = fcmp olt float %2617, %2800, !dbg !70
  %2802 = fcmp uno float %2617, 0.000000e+00, !dbg !71
  %2803 = or i1 %2801, %2802, !dbg !72
  %2804 = select i1 %2803, float %2617, float %2800, !dbg !73
  %2805 = bitcast float %2804 to i32, !dbg !68
  %2806 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2805, i32 8, i32 31), !dbg !68
  %2807 = bitcast i32 %2806 to float, !dbg !68
  %2808 = fcmp olt float %2804, %2807, !dbg !70
  %2809 = fcmp uno float %2804, 0.000000e+00, !dbg !71
  %2810 = or i1 %2808, %2809, !dbg !72
  %2811 = select i1 %2810, float %2804, float %2807, !dbg !73
  %2812 = bitcast float %2811 to i32, !dbg !68
  %2813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2812, i32 4, i32 31), !dbg !68
  %2814 = bitcast i32 %2813 to float, !dbg !68
  %2815 = fcmp olt float %2811, %2814, !dbg !70
  %2816 = fcmp uno float %2811, 0.000000e+00, !dbg !71
  %2817 = or i1 %2815, %2816, !dbg !72
  %2818 = select i1 %2817, float %2811, float %2814, !dbg !73
  %2819 = bitcast float %2818 to i32, !dbg !68
  %2820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2819, i32 2, i32 31), !dbg !68
  %2821 = bitcast i32 %2820 to float, !dbg !68
  %2822 = fcmp olt float %2818, %2821, !dbg !70
  %2823 = fcmp uno float %2818, 0.000000e+00, !dbg !71
  %2824 = or i1 %2822, %2823, !dbg !72
  %2825 = select i1 %2824, float %2818, float %2821, !dbg !73
  %2826 = bitcast float %2825 to i32, !dbg !68
  %2827 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2826, i32 1, i32 31), !dbg !68
  %2828 = bitcast i32 %2827 to float, !dbg !68
  %2829 = fcmp olt float %2825, %2828, !dbg !70
  %2830 = fcmp uno float %2825, 0.000000e+00, !dbg !71
  %2831 = or i1 %2829, %2830, !dbg !72
  %2832 = bitcast float %2677 to i32, !dbg !68
  %2833 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2832, i32 16, i32 31), !dbg !68
  %2834 = bitcast i32 %2833 to float, !dbg !68
  %2835 = fcmp olt float %2677, %2834, !dbg !70
  %2836 = fcmp uno float %2677, 0.000000e+00, !dbg !71
  %2837 = or i1 %2835, %2836, !dbg !72
  %2838 = select i1 %2837, float %2677, float %2834, !dbg !73
  %2839 = bitcast float %2838 to i32, !dbg !68
  %2840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2839, i32 8, i32 31), !dbg !68
  %2841 = bitcast i32 %2840 to float, !dbg !68
  %2842 = fcmp olt float %2838, %2841, !dbg !70
  %2843 = fcmp uno float %2838, 0.000000e+00, !dbg !71
  %2844 = or i1 %2842, %2843, !dbg !72
  %2845 = select i1 %2844, float %2838, float %2841, !dbg !73
  %2846 = bitcast float %2845 to i32, !dbg !68
  %2847 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2846, i32 4, i32 31), !dbg !68
  %2848 = bitcast i32 %2847 to float, !dbg !68
  %2849 = fcmp olt float %2845, %2848, !dbg !70
  %2850 = fcmp uno float %2845, 0.000000e+00, !dbg !71
  %2851 = or i1 %2849, %2850, !dbg !72
  %2852 = select i1 %2851, float %2845, float %2848, !dbg !73
  %2853 = bitcast float %2852 to i32, !dbg !68
  %2854 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2853, i32 2, i32 31), !dbg !68
  %2855 = bitcast i32 %2854 to float, !dbg !68
  %2856 = fcmp olt float %2852, %2855, !dbg !70
  %2857 = fcmp uno float %2852, 0.000000e+00, !dbg !71
  %2858 = or i1 %2856, %2857, !dbg !72
  %2859 = select i1 %2858, float %2852, float %2855, !dbg !73
  %2860 = bitcast float %2859 to i32, !dbg !68
  %2861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2860, i32 1, i32 31), !dbg !68
  %2862 = bitcast i32 %2861 to float, !dbg !68
  %2863 = fcmp olt float %2859, %2862, !dbg !70
  %2864 = fcmp uno float %2859, 0.000000e+00, !dbg !71
  %2865 = or i1 %2863, %2864, !dbg !72
  %2866 = bitcast float %2737 to i32, !dbg !68
  %2867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2866, i32 16, i32 31), !dbg !68
  %2868 = bitcast i32 %2867 to float, !dbg !68
  %2869 = fcmp olt float %2737, %2868, !dbg !70
  %2870 = fcmp uno float %2737, 0.000000e+00, !dbg !71
  %2871 = or i1 %2869, %2870, !dbg !72
  %2872 = select i1 %2871, float %2737, float %2868, !dbg !73
  %2873 = bitcast float %2872 to i32, !dbg !68
  %2874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2873, i32 8, i32 31), !dbg !68
  %2875 = bitcast i32 %2874 to float, !dbg !68
  %2876 = fcmp olt float %2872, %2875, !dbg !70
  %2877 = fcmp uno float %2872, 0.000000e+00, !dbg !71
  %2878 = or i1 %2876, %2877, !dbg !72
  %2879 = select i1 %2878, float %2872, float %2875, !dbg !73
  %2880 = bitcast float %2879 to i32, !dbg !68
  %2881 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2880, i32 4, i32 31), !dbg !68
  %2882 = bitcast i32 %2881 to float, !dbg !68
  %2883 = fcmp olt float %2879, %2882, !dbg !70
  %2884 = fcmp uno float %2879, 0.000000e+00, !dbg !71
  %2885 = or i1 %2883, %2884, !dbg !72
  %2886 = select i1 %2885, float %2879, float %2882, !dbg !73
  %2887 = bitcast float %2886 to i32, !dbg !68
  %2888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2887, i32 2, i32 31), !dbg !68
  %2889 = bitcast i32 %2888 to float, !dbg !68
  %2890 = fcmp olt float %2886, %2889, !dbg !70
  %2891 = fcmp uno float %2886, 0.000000e+00, !dbg !71
  %2892 = or i1 %2890, %2891, !dbg !72
  %2893 = select i1 %2892, float %2886, float %2889, !dbg !73
  %2894 = bitcast float %2893 to i32, !dbg !68
  %2895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2894, i32 1, i32 31), !dbg !68
  %2896 = bitcast i32 %2895 to float, !dbg !68
  %2897 = fcmp olt float %2893, %2896, !dbg !70
  %2898 = fcmp uno float %2893, 0.000000e+00, !dbg !71
  %2899 = or i1 %2897, %2898, !dbg !72
  %2900 = bitcast float %2797 to i32, !dbg !68
  %2901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2900, i32 16, i32 31), !dbg !68
  %2902 = bitcast i32 %2901 to float, !dbg !68
  %2903 = fcmp olt float %2797, %2902, !dbg !70
  %2904 = fcmp uno float %2797, 0.000000e+00, !dbg !71
  %2905 = or i1 %2903, %2904, !dbg !72
  %2906 = select i1 %2905, float %2797, float %2902, !dbg !73
  %2907 = bitcast float %2906 to i32, !dbg !68
  %2908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2907, i32 8, i32 31), !dbg !68
  %2909 = bitcast i32 %2908 to float, !dbg !68
  %2910 = fcmp olt float %2906, %2909, !dbg !70
  %2911 = fcmp uno float %2906, 0.000000e+00, !dbg !71
  %2912 = or i1 %2910, %2911, !dbg !72
  %2913 = select i1 %2912, float %2906, float %2909, !dbg !73
  %2914 = bitcast float %2913 to i32, !dbg !68
  %2915 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2914, i32 4, i32 31), !dbg !68
  %2916 = bitcast i32 %2915 to float, !dbg !68
  %2917 = fcmp olt float %2913, %2916, !dbg !70
  %2918 = fcmp uno float %2913, 0.000000e+00, !dbg !71
  %2919 = or i1 %2917, %2918, !dbg !72
  %2920 = select i1 %2919, float %2913, float %2916, !dbg !73
  %2921 = bitcast float %2920 to i32, !dbg !68
  %2922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2921, i32 2, i32 31), !dbg !68
  %2923 = bitcast i32 %2922 to float, !dbg !68
  %2924 = fcmp olt float %2920, %2923, !dbg !70
  %2925 = fcmp uno float %2920, 0.000000e+00, !dbg !71
  %2926 = or i1 %2924, %2925, !dbg !72
  %2927 = select i1 %2926, float %2920, float %2923, !dbg !73
  %2928 = bitcast float %2927 to i32, !dbg !68
  %2929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2928, i32 1, i32 31), !dbg !68
  %2930 = bitcast i32 %2929 to float, !dbg !68
  %2931 = fcmp olt float %2927, %2930, !dbg !70
  %2932 = fcmp uno float %2927, 0.000000e+00, !dbg !71
  %2933 = or i1 %2931, %2932, !dbg !72
  %2934 = select i1 %2831, i32 %2826, i32 %2827, !dbg !73
  %2935 = insertelement <1 x i32> poison, i32 %2934, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1239, <1 x i32> %2935, i1 %1238) #5, !dbg !68
  %2936 = select i1 %2865, i32 %2860, i32 %2861, !dbg !73
  %2937 = insertelement <1 x i32> poison, i32 %2936, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1246, <1 x i32> %2937, i1 %1238) #5, !dbg !68
  %2938 = select i1 %2899, i32 %2894, i32 %2895, !dbg !73
  %2939 = insertelement <1 x i32> poison, i32 %2938, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1253, <1 x i32> %2939, i1 %1238) #5, !dbg !68
  %2940 = select i1 %2933, i32 %2928, i32 %2929, !dbg !73
  %2941 = insertelement <1 x i32> poison, i32 %2940, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %2941, i1 %1238) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2942 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1267, i1 %1266) #5, !dbg !68
  %2943 = bitcast i32 %2942 to float, !dbg !68
  %2944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2942, i32 4, i32 31), !dbg !68
  %2945 = bitcast i32 %2944 to float, !dbg !68
  %2946 = fcmp olt float %2943, %2945, !dbg !70
  %2947 = fcmp uno float %2943, 0.000000e+00, !dbg !71
  %2948 = or i1 %2947, %2946, !dbg !72
  %2949 = select i1 %2948, float %2943, float %2945, !dbg !73
  %2950 = bitcast float %2949 to i32, !dbg !68
  %2951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2950, i32 2, i32 31), !dbg !68
  %2952 = bitcast i32 %2951 to float, !dbg !68
  %2953 = fcmp olt float %2949, %2952, !dbg !70
  %2954 = fcmp uno float %2949, 0.000000e+00, !dbg !71
  %2955 = or i1 %2953, %2954, !dbg !72
  %2956 = select i1 %2955, float %2949, float %2952, !dbg !73
  %2957 = bitcast float %2956 to i32, !dbg !68
  %2958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2957, i32 1, i32 31), !dbg !68
  %2959 = bitcast i32 %2958 to float, !dbg !68
  %2960 = fcmp olt float %2956, %2959, !dbg !70
  %2961 = fcmp uno float %2956, 0.000000e+00, !dbg !71
  %2962 = or i1 %2960, %2961, !dbg !72
  %2963 = select i1 %2962, i32 %2957, i32 %2958, !dbg !73
  %2964 = insertelement <1 x i32> poison, i32 %2963, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1267, <1 x i32> %2964, i1 %1338) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %2965 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %2966 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !68
  %2967 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !68
  %2968 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2969 = bitcast float %2965 to i32, !dbg !74
  %2970 = bitcast float %2966 to i32, !dbg !74
  %2971 = bitcast float %2967 to i32, !dbg !74
  %2972 = bitcast float %2968 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2969, i32 %2970, i32 %2971, i32 %2972, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %2973 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1813, !dbg !74
  %2974 = load float, ptr addrspace(3) %2973, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %2975 = fcmp ogt float %2008, %2009, !dbg !77
  %2976 = fcmp uno float %2008, 0.000000e+00, !dbg !78
  %2977 = or i1 %2975, %2976, !dbg !79
  %2978 = select i1 %2977, float %2008, float %2009, !dbg !80
  %2979 = fcmp ogt float %2978, %2029, !dbg !77
  %2980 = fcmp uno float %2978, 0.000000e+00, !dbg !78
  %2981 = or i1 %2979, %2980, !dbg !79
  %2982 = select i1 %2981, float %2978, float %2029, !dbg !80
  %2983 = fcmp ogt float %2982, %2030, !dbg !77
  %2984 = fcmp uno float %2982, 0.000000e+00, !dbg !78
  %2985 = or i1 %2983, %2984, !dbg !79
  %2986 = select i1 %2985, float %2982, float %2030, !dbg !80
  %2987 = fcmp ogt float %2986, %2050, !dbg !77
  %2988 = fcmp uno float %2986, 0.000000e+00, !dbg !78
  %2989 = or i1 %2987, %2988, !dbg !79
  %2990 = select i1 %2989, float %2986, float %2050, !dbg !80
  %2991 = fcmp ogt float %2990, %2051, !dbg !77
  %2992 = fcmp uno float %2990, 0.000000e+00, !dbg !78
  %2993 = or i1 %2991, %2992, !dbg !79
  %2994 = select i1 %2993, float %2990, float %2051, !dbg !80
  %2995 = fcmp ogt float %2994, %2087, !dbg !77
  %2996 = fcmp uno float %2994, 0.000000e+00, !dbg !78
  %2997 = or i1 %2995, %2996, !dbg !79
  %2998 = select i1 %2997, float %2994, float %2087, !dbg !80
  %2999 = fcmp ogt float %2998, %2088, !dbg !77
  %3000 = fcmp uno float %2998, 0.000000e+00, !dbg !78
  %3001 = or i1 %2999, %3000, !dbg !79
  %3002 = select i1 %3001, float %2998, float %2088, !dbg !80
  %3003 = fcmp ogt float %3002, %2108, !dbg !77
  %3004 = fcmp uno float %3002, 0.000000e+00, !dbg !78
  %3005 = or i1 %3003, %3004, !dbg !79
  %3006 = select i1 %3005, float %3002, float %2108, !dbg !80
  %3007 = fcmp ogt float %3006, %2109, !dbg !77
  %3008 = fcmp uno float %3006, 0.000000e+00, !dbg !78
  %3009 = or i1 %3007, %3008, !dbg !79
  %3010 = select i1 %3009, float %3006, float %2109, !dbg !80
  %3011 = fcmp ogt float %3010, %2129, !dbg !77
  %3012 = fcmp uno float %3010, 0.000000e+00, !dbg !78
  %3013 = or i1 %3011, %3012, !dbg !79
  %3014 = select i1 %3013, float %3010, float %2129, !dbg !80
  %3015 = fcmp ogt float %3014, %2130, !dbg !77
  %3016 = fcmp uno float %3014, 0.000000e+00, !dbg !78
  %3017 = or i1 %3015, %3016, !dbg !79
  %3018 = select i1 %3017, float %3014, float %2130, !dbg !80
  %3019 = fcmp ogt float %3018, %2150, !dbg !77
  %3020 = fcmp uno float %3018, 0.000000e+00, !dbg !78
  %3021 = or i1 %3019, %3020, !dbg !79
  %3022 = select i1 %3021, float %3018, float %2150, !dbg !80
  %3023 = fcmp ogt float %3022, %2151, !dbg !77
  %3024 = fcmp uno float %3022, 0.000000e+00, !dbg !78
  %3025 = or i1 %3023, %3024, !dbg !79
  %3026 = select i1 %3025, float %3022, float %2151, !dbg !80
  %3027 = fcmp ogt float %3026, %2171, !dbg !77
  %3028 = fcmp uno float %3026, 0.000000e+00, !dbg !78
  %3029 = or i1 %3027, %3028, !dbg !79
  %3030 = select i1 %3029, float %3026, float %2171, !dbg !80
  %3031 = fcmp ogt float %3030, %2172, !dbg !77
  %3032 = fcmp uno float %3030, 0.000000e+00, !dbg !78
  %3033 = or i1 %3031, %3032, !dbg !79
  %3034 = select i1 %3033, float %3030, float %2172, !dbg !80
  %3035 = fcmp ogt float %2381, %2382, !dbg !77
  %3036 = fcmp uno float %2381, 0.000000e+00, !dbg !78
  %3037 = or i1 %3035, %3036, !dbg !79
  %3038 = select i1 %3037, float %2381, float %2382, !dbg !80
  %3039 = fcmp ogt float %3038, %2383, !dbg !77
  %3040 = fcmp uno float %3038, 0.000000e+00, !dbg !78
  %3041 = or i1 %3039, %3040, !dbg !79
  %3042 = select i1 %3041, float %3038, float %2383, !dbg !80
  %3043 = fcmp ogt float %3042, %2384, !dbg !77
  %3044 = fcmp uno float %3042, 0.000000e+00, !dbg !78
  %3045 = or i1 %3043, %3044, !dbg !79
  %3046 = select i1 %3045, float %3042, float %2384, !dbg !80
  %3047 = fcmp ogt float %3046, %2385, !dbg !77
  %3048 = fcmp uno float %3046, 0.000000e+00, !dbg !78
  %3049 = or i1 %3047, %3048, !dbg !79
  %3050 = select i1 %3049, float %3046, float %2385, !dbg !80
  %3051 = fcmp ogt float %3050, %2386, !dbg !77
  %3052 = fcmp uno float %3050, 0.000000e+00, !dbg !78
  %3053 = or i1 %3051, %3052, !dbg !79
  %3054 = select i1 %3053, float %3050, float %2386, !dbg !80
  %3055 = fcmp ogt float %3054, %2387, !dbg !77
  %3056 = fcmp uno float %3054, 0.000000e+00, !dbg !78
  %3057 = or i1 %3055, %3056, !dbg !79
  %3058 = select i1 %3057, float %3054, float %2387, !dbg !80
  %3059 = fcmp ogt float %3058, %2388, !dbg !77
  %3060 = fcmp uno float %3058, 0.000000e+00, !dbg !78
  %3061 = or i1 %3059, %3060, !dbg !79
  %3062 = select i1 %3061, float %3058, float %2388, !dbg !80
  %3063 = fcmp ogt float %3062, %2389, !dbg !77
  %3064 = fcmp uno float %3062, 0.000000e+00, !dbg !78
  %3065 = or i1 %3063, %3064, !dbg !79
  %3066 = select i1 %3065, float %3062, float %2389, !dbg !80
  %3067 = fcmp ogt float %3066, %2390, !dbg !77
  %3068 = fcmp uno float %3066, 0.000000e+00, !dbg !78
  %3069 = or i1 %3067, %3068, !dbg !79
  %3070 = select i1 %3069, float %3066, float %2390, !dbg !80
  %3071 = fcmp ogt float %3070, %2391, !dbg !77
  %3072 = fcmp uno float %3070, 0.000000e+00, !dbg !78
  %3073 = or i1 %3071, %3072, !dbg !79
  %3074 = select i1 %3073, float %3070, float %2391, !dbg !80
  %3075 = fcmp ogt float %3074, %2392, !dbg !77
  %3076 = fcmp uno float %3074, 0.000000e+00, !dbg !78
  %3077 = or i1 %3075, %3076, !dbg !79
  %3078 = select i1 %3077, float %3074, float %2392, !dbg !80
  %3079 = fcmp ogt float %3078, %2393, !dbg !77
  %3080 = fcmp uno float %3078, 0.000000e+00, !dbg !78
  %3081 = or i1 %3079, %3080, !dbg !79
  %3082 = select i1 %3081, float %3078, float %2393, !dbg !80
  %3083 = fcmp ogt float %3082, %2394, !dbg !77
  %3084 = fcmp uno float %3082, 0.000000e+00, !dbg !78
  %3085 = or i1 %3083, %3084, !dbg !79
  %3086 = select i1 %3085, float %3082, float %2394, !dbg !80
  %3087 = fcmp ogt float %3086, %2395, !dbg !77
  %3088 = fcmp uno float %3086, 0.000000e+00, !dbg !78
  %3089 = or i1 %3087, %3088, !dbg !79
  %3090 = select i1 %3089, float %3086, float %2395, !dbg !80
  %3091 = fcmp ogt float %3090, %2396, !dbg !77
  %3092 = fcmp uno float %3090, 0.000000e+00, !dbg !78
  %3093 = or i1 %3091, %3092, !dbg !79
  %3094 = select i1 %3093, float %3090, float %2396, !dbg !80
  %3095 = fcmp ogt float %2397, %2398, !dbg !77
  %3096 = fcmp uno float %2397, 0.000000e+00, !dbg !78
  %3097 = or i1 %3095, %3096, !dbg !79
  %3098 = select i1 %3097, float %2397, float %2398, !dbg !80
  %3099 = fcmp ogt float %3098, %2399, !dbg !77
  %3100 = fcmp uno float %3098, 0.000000e+00, !dbg !78
  %3101 = or i1 %3099, %3100, !dbg !79
  %3102 = select i1 %3101, float %3098, float %2399, !dbg !80
  %3103 = fcmp ogt float %3102, %2400, !dbg !77
  %3104 = fcmp uno float %3102, 0.000000e+00, !dbg !78
  %3105 = or i1 %3103, %3104, !dbg !79
  %3106 = select i1 %3105, float %3102, float %2400, !dbg !80
  %3107 = fcmp ogt float %3106, %2401, !dbg !77
  %3108 = fcmp uno float %3106, 0.000000e+00, !dbg !78
  %3109 = or i1 %3107, %3108, !dbg !79
  %3110 = select i1 %3109, float %3106, float %2401, !dbg !80
  %3111 = fcmp ogt float %3110, %2402, !dbg !77
  %3112 = fcmp uno float %3110, 0.000000e+00, !dbg !78
  %3113 = or i1 %3111, %3112, !dbg !79
  %3114 = select i1 %3113, float %3110, float %2402, !dbg !80
  %3115 = fcmp ogt float %3114, %2403, !dbg !77
  %3116 = fcmp uno float %3114, 0.000000e+00, !dbg !78
  %3117 = or i1 %3115, %3116, !dbg !79
  %3118 = select i1 %3117, float %3114, float %2403, !dbg !80
  %3119 = fcmp ogt float %3118, %2404, !dbg !77
  %3120 = fcmp uno float %3118, 0.000000e+00, !dbg !78
  %3121 = or i1 %3119, %3120, !dbg !79
  %3122 = select i1 %3121, float %3118, float %2404, !dbg !80
  %3123 = fcmp ogt float %3122, %2405, !dbg !77
  %3124 = fcmp uno float %3122, 0.000000e+00, !dbg !78
  %3125 = or i1 %3123, %3124, !dbg !79
  %3126 = select i1 %3125, float %3122, float %2405, !dbg !80
  %3127 = fcmp ogt float %3126, %2406, !dbg !77
  %3128 = fcmp uno float %3126, 0.000000e+00, !dbg !78
  %3129 = or i1 %3127, %3128, !dbg !79
  %3130 = select i1 %3129, float %3126, float %2406, !dbg !80
  %3131 = fcmp ogt float %3130, %2407, !dbg !77
  %3132 = fcmp uno float %3130, 0.000000e+00, !dbg !78
  %3133 = or i1 %3131, %3132, !dbg !79
  %3134 = select i1 %3133, float %3130, float %2407, !dbg !80
  %3135 = fcmp ogt float %3134, %2408, !dbg !77
  %3136 = fcmp uno float %3134, 0.000000e+00, !dbg !78
  %3137 = or i1 %3135, %3136, !dbg !79
  %3138 = select i1 %3137, float %3134, float %2408, !dbg !80
  %3139 = fcmp ogt float %3138, %2409, !dbg !77
  %3140 = fcmp uno float %3138, 0.000000e+00, !dbg !78
  %3141 = or i1 %3139, %3140, !dbg !79
  %3142 = select i1 %3141, float %3138, float %2409, !dbg !80
  %3143 = fcmp ogt float %3142, %2410, !dbg !77
  %3144 = fcmp uno float %3142, 0.000000e+00, !dbg !78
  %3145 = or i1 %3143, %3144, !dbg !79
  %3146 = select i1 %3145, float %3142, float %2410, !dbg !80
  %3147 = fcmp ogt float %3146, %2411, !dbg !77
  %3148 = fcmp uno float %3146, 0.000000e+00, !dbg !78
  %3149 = or i1 %3147, %3148, !dbg !79
  %3150 = select i1 %3149, float %3146, float %2411, !dbg !80
  %3151 = fcmp ogt float %3150, %2412, !dbg !77
  %3152 = fcmp uno float %3150, 0.000000e+00, !dbg !78
  %3153 = or i1 %3151, %3152, !dbg !79
  %3154 = select i1 %3153, float %3150, float %2412, !dbg !80
  %3155 = fcmp ogt float %2413, %2414, !dbg !77
  %3156 = fcmp uno float %2413, 0.000000e+00, !dbg !78
  %3157 = or i1 %3155, %3156, !dbg !79
  %3158 = select i1 %3157, float %2413, float %2414, !dbg !80
  %3159 = fcmp ogt float %3158, %2415, !dbg !77
  %3160 = fcmp uno float %3158, 0.000000e+00, !dbg !78
  %3161 = or i1 %3159, %3160, !dbg !79
  %3162 = select i1 %3161, float %3158, float %2415, !dbg !80
  %3163 = fcmp ogt float %3162, %2416, !dbg !77
  %3164 = fcmp uno float %3162, 0.000000e+00, !dbg !78
  %3165 = or i1 %3163, %3164, !dbg !79
  %3166 = select i1 %3165, float %3162, float %2416, !dbg !80
  %3167 = fcmp ogt float %3166, %2417, !dbg !77
  %3168 = fcmp uno float %3166, 0.000000e+00, !dbg !78
  %3169 = or i1 %3167, %3168, !dbg !79
  %3170 = select i1 %3169, float %3166, float %2417, !dbg !80
  %3171 = fcmp ogt float %3170, %2418, !dbg !77
  %3172 = fcmp uno float %3170, 0.000000e+00, !dbg !78
  %3173 = or i1 %3171, %3172, !dbg !79
  %3174 = select i1 %3173, float %3170, float %2418, !dbg !80
  %3175 = fcmp ogt float %3174, %2419, !dbg !77
  %3176 = fcmp uno float %3174, 0.000000e+00, !dbg !78
  %3177 = or i1 %3175, %3176, !dbg !79
  %3178 = select i1 %3177, float %3174, float %2419, !dbg !80
  %3179 = fcmp ogt float %3178, %2420, !dbg !77
  %3180 = fcmp uno float %3178, 0.000000e+00, !dbg !78
  %3181 = or i1 %3179, %3180, !dbg !79
  %3182 = select i1 %3181, float %3178, float %2420, !dbg !80
  %3183 = fcmp ogt float %3182, %2421, !dbg !77
  %3184 = fcmp uno float %3182, 0.000000e+00, !dbg !78
  %3185 = or i1 %3183, %3184, !dbg !79
  %3186 = select i1 %3185, float %3182, float %2421, !dbg !80
  %3187 = fcmp ogt float %3186, %2422, !dbg !77
  %3188 = fcmp uno float %3186, 0.000000e+00, !dbg !78
  %3189 = or i1 %3187, %3188, !dbg !79
  %3190 = select i1 %3189, float %3186, float %2422, !dbg !80
  %3191 = fcmp ogt float %3190, %2423, !dbg !77
  %3192 = fcmp uno float %3190, 0.000000e+00, !dbg !78
  %3193 = or i1 %3191, %3192, !dbg !79
  %3194 = select i1 %3193, float %3190, float %2423, !dbg !80
  %3195 = fcmp ogt float %3194, %2424, !dbg !77
  %3196 = fcmp uno float %3194, 0.000000e+00, !dbg !78
  %3197 = or i1 %3195, %3196, !dbg !79
  %3198 = select i1 %3197, float %3194, float %2424, !dbg !80
  %3199 = fcmp ogt float %3198, %2425, !dbg !77
  %3200 = fcmp uno float %3198, 0.000000e+00, !dbg !78
  %3201 = or i1 %3199, %3200, !dbg !79
  %3202 = select i1 %3201, float %3198, float %2425, !dbg !80
  %3203 = fcmp ogt float %3202, %2426, !dbg !77
  %3204 = fcmp uno float %3202, 0.000000e+00, !dbg !78
  %3205 = or i1 %3203, %3204, !dbg !79
  %3206 = select i1 %3205, float %3202, float %2426, !dbg !80
  %3207 = fcmp ogt float %3206, %2427, !dbg !77
  %3208 = fcmp uno float %3206, 0.000000e+00, !dbg !78
  %3209 = or i1 %3207, %3208, !dbg !79
  %3210 = select i1 %3209, float %3206, float %2427, !dbg !80
  %3211 = fcmp ogt float %3210, %2428, !dbg !77
  %3212 = fcmp uno float %3210, 0.000000e+00, !dbg !78
  %3213 = or i1 %3211, %3212, !dbg !79
  %3214 = select i1 %3213, float %3210, float %2428, !dbg !80
  %3215 = bitcast float %3034 to i32, !dbg !75
  %3216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3215, i32 16, i32 31), !dbg !75
  %3217 = bitcast i32 %3216 to float, !dbg !75
  %3218 = fcmp ogt float %3034, %3217, !dbg !77
  %3219 = fcmp uno float %3034, 0.000000e+00, !dbg !78
  %3220 = or i1 %3219, %3218, !dbg !79
  %3221 = select i1 %3220, float %3034, float %3217, !dbg !80
  %3222 = bitcast float %3221 to i32, !dbg !75
  %3223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3222, i32 8, i32 31), !dbg !75
  %3224 = bitcast i32 %3223 to float, !dbg !75
  %3225 = fcmp ogt float %3221, %3224, !dbg !77
  %3226 = fcmp uno float %3221, 0.000000e+00, !dbg !78
  %3227 = or i1 %3225, %3226, !dbg !79
  %3228 = select i1 %3227, float %3221, float %3224, !dbg !80
  %3229 = bitcast float %3228 to i32, !dbg !75
  %3230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3229, i32 4, i32 31), !dbg !75
  %3231 = bitcast i32 %3230 to float, !dbg !75
  %3232 = fcmp ogt float %3228, %3231, !dbg !77
  %3233 = fcmp uno float %3228, 0.000000e+00, !dbg !78
  %3234 = or i1 %3232, %3233, !dbg !79
  %3235 = select i1 %3234, float %3228, float %3231, !dbg !80
  %3236 = bitcast float %3235 to i32, !dbg !75
  %3237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3236, i32 2, i32 31), !dbg !75
  %3238 = bitcast i32 %3237 to float, !dbg !75
  %3239 = fcmp ogt float %3235, %3238, !dbg !77
  %3240 = fcmp uno float %3235, 0.000000e+00, !dbg !78
  %3241 = or i1 %3239, %3240, !dbg !79
  %3242 = select i1 %3241, float %3235, float %3238, !dbg !80
  %3243 = bitcast float %3242 to i32, !dbg !75
  %3244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3243, i32 1, i32 31), !dbg !75
  %3245 = bitcast i32 %3244 to float, !dbg !75
  %3246 = fcmp ogt float %3242, %3245, !dbg !77
  %3247 = fcmp uno float %3242, 0.000000e+00, !dbg !78
  %3248 = or i1 %3246, %3247, !dbg !79
  %3249 = bitcast float %3094 to i32, !dbg !75
  %3250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3249, i32 16, i32 31), !dbg !75
  %3251 = bitcast i32 %3250 to float, !dbg !75
  %3252 = fcmp ogt float %3094, %3251, !dbg !77
  %3253 = fcmp uno float %3094, 0.000000e+00, !dbg !78
  %3254 = or i1 %3253, %3252, !dbg !79
  %3255 = select i1 %3254, float %3094, float %3251, !dbg !80
  %3256 = bitcast float %3255 to i32, !dbg !75
  %3257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3256, i32 8, i32 31), !dbg !75
  %3258 = bitcast i32 %3257 to float, !dbg !75
  %3259 = fcmp ogt float %3255, %3258, !dbg !77
  %3260 = fcmp uno float %3255, 0.000000e+00, !dbg !78
  %3261 = or i1 %3259, %3260, !dbg !79
  %3262 = select i1 %3261, float %3255, float %3258, !dbg !80
  %3263 = bitcast float %3262 to i32, !dbg !75
  %3264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3263, i32 4, i32 31), !dbg !75
  %3265 = bitcast i32 %3264 to float, !dbg !75
  %3266 = fcmp ogt float %3262, %3265, !dbg !77
  %3267 = fcmp uno float %3262, 0.000000e+00, !dbg !78
  %3268 = or i1 %3266, %3267, !dbg !79
  %3269 = select i1 %3268, float %3262, float %3265, !dbg !80
  %3270 = bitcast float %3269 to i32, !dbg !75
  %3271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3270, i32 2, i32 31), !dbg !75
  %3272 = bitcast i32 %3271 to float, !dbg !75
  %3273 = fcmp ogt float %3269, %3272, !dbg !77
  %3274 = fcmp uno float %3269, 0.000000e+00, !dbg !78
  %3275 = or i1 %3273, %3274, !dbg !79
  %3276 = select i1 %3275, float %3269, float %3272, !dbg !80
  %3277 = bitcast float %3276 to i32, !dbg !75
  %3278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3277, i32 1, i32 31), !dbg !75
  %3279 = bitcast i32 %3278 to float, !dbg !75
  %3280 = fcmp ogt float %3276, %3279, !dbg !77
  %3281 = fcmp uno float %3276, 0.000000e+00, !dbg !78
  %3282 = or i1 %3280, %3281, !dbg !79
  %3283 = bitcast float %3154 to i32, !dbg !75
  %3284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3283, i32 16, i32 31), !dbg !75
  %3285 = bitcast i32 %3284 to float, !dbg !75
  %3286 = fcmp ogt float %3154, %3285, !dbg !77
  %3287 = fcmp uno float %3154, 0.000000e+00, !dbg !78
  %3288 = or i1 %3287, %3286, !dbg !79
  %3289 = select i1 %3288, float %3154, float %3285, !dbg !80
  %3290 = bitcast float %3289 to i32, !dbg !75
  %3291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3290, i32 8, i32 31), !dbg !75
  %3292 = bitcast i32 %3291 to float, !dbg !75
  %3293 = fcmp ogt float %3289, %3292, !dbg !77
  %3294 = fcmp uno float %3289, 0.000000e+00, !dbg !78
  %3295 = or i1 %3293, %3294, !dbg !79
  %3296 = select i1 %3295, float %3289, float %3292, !dbg !80
  %3297 = bitcast float %3296 to i32, !dbg !75
  %3298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3297, i32 4, i32 31), !dbg !75
  %3299 = bitcast i32 %3298 to float, !dbg !75
  %3300 = fcmp ogt float %3296, %3299, !dbg !77
  %3301 = fcmp uno float %3296, 0.000000e+00, !dbg !78
  %3302 = or i1 %3300, %3301, !dbg !79
  %3303 = select i1 %3302, float %3296, float %3299, !dbg !80
  %3304 = bitcast float %3303 to i32, !dbg !75
  %3305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3304, i32 2, i32 31), !dbg !75
  %3306 = bitcast i32 %3305 to float, !dbg !75
  %3307 = fcmp ogt float %3303, %3306, !dbg !77
  %3308 = fcmp uno float %3303, 0.000000e+00, !dbg !78
  %3309 = or i1 %3307, %3308, !dbg !79
  %3310 = select i1 %3309, float %3303, float %3306, !dbg !80
  %3311 = bitcast float %3310 to i32, !dbg !75
  %3312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3311, i32 1, i32 31), !dbg !75
  %3313 = bitcast i32 %3312 to float, !dbg !75
  %3314 = fcmp ogt float %3310, %3313, !dbg !77
  %3315 = fcmp uno float %3310, 0.000000e+00, !dbg !78
  %3316 = or i1 %3314, %3315, !dbg !79
  %3317 = bitcast float %3214 to i32, !dbg !75
  %3318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3317, i32 16, i32 31), !dbg !75
  %3319 = bitcast i32 %3318 to float, !dbg !75
  %3320 = fcmp ogt float %3214, %3319, !dbg !77
  %3321 = fcmp uno float %3214, 0.000000e+00, !dbg !78
  %3322 = or i1 %3321, %3320, !dbg !79
  %3323 = select i1 %3322, float %3214, float %3319, !dbg !80
  %3324 = bitcast float %3323 to i32, !dbg !75
  %3325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3324, i32 8, i32 31), !dbg !75
  %3326 = bitcast i32 %3325 to float, !dbg !75
  %3327 = fcmp ogt float %3323, %3326, !dbg !77
  %3328 = fcmp uno float %3323, 0.000000e+00, !dbg !78
  %3329 = or i1 %3327, %3328, !dbg !79
  %3330 = select i1 %3329, float %3323, float %3326, !dbg !80
  %3331 = bitcast float %3330 to i32, !dbg !75
  %3332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3331, i32 4, i32 31), !dbg !75
  %3333 = bitcast i32 %3332 to float, !dbg !75
  %3334 = fcmp ogt float %3330, %3333, !dbg !77
  %3335 = fcmp uno float %3330, 0.000000e+00, !dbg !78
  %3336 = or i1 %3334, %3335, !dbg !79
  %3337 = select i1 %3336, float %3330, float %3333, !dbg !80
  %3338 = bitcast float %3337 to i32, !dbg !75
  %3339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3338, i32 2, i32 31), !dbg !75
  %3340 = bitcast i32 %3339 to float, !dbg !75
  %3341 = fcmp ogt float %3337, %3340, !dbg !77
  %3342 = fcmp uno float %3337, 0.000000e+00, !dbg !78
  %3343 = or i1 %3341, %3342, !dbg !79
  %3344 = select i1 %3343, float %3337, float %3340, !dbg !80
  %3345 = bitcast float %3344 to i32, !dbg !75
  %3346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3345, i32 1, i32 31), !dbg !75
  %3347 = bitcast i32 %3346 to float, !dbg !75
  %3348 = fcmp ogt float %3344, %3347, !dbg !77
  %3349 = fcmp uno float %3344, 0.000000e+00, !dbg !78
  %3350 = or i1 %3348, %3349, !dbg !79
  %3351 = select i1 %3248, i32 %3243, i32 %3244, !dbg !80
  %3352 = insertelement <1 x i32> poison, i32 %3351, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1239, <1 x i32> %3352, i1 %1238) #5, !dbg !75
  %3353 = select i1 %3282, i32 %3277, i32 %3278, !dbg !80
  %3354 = insertelement <1 x i32> poison, i32 %3353, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1246, <1 x i32> %3354, i1 %1238) #5, !dbg !75
  %3355 = select i1 %3316, i32 %3311, i32 %3312, !dbg !80
  %3356 = insertelement <1 x i32> poison, i32 %3355, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1253, <1 x i32> %3356, i1 %1238) #5, !dbg !75
  %3357 = select i1 %3350, i32 %3345, i32 %3346, !dbg !80
  %3358 = insertelement <1 x i32> poison, i32 %3357, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %3358, i1 %1238) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3359 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1267, i1 %1266) #5, !dbg !75
  %3360 = bitcast i32 %3359 to float, !dbg !75
  %3361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3359, i32 4, i32 31), !dbg !75
  %3362 = bitcast i32 %3361 to float, !dbg !75
  %3363 = fcmp ogt float %3360, %3362, !dbg !77
  %3364 = fcmp uno float %3360, 0.000000e+00, !dbg !78
  %3365 = or i1 %3364, %3363, !dbg !79
  %3366 = select i1 %3365, float %3360, float %3362, !dbg !80
  %3367 = bitcast float %3366 to i32, !dbg !75
  %3368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3367, i32 2, i32 31), !dbg !75
  %3369 = bitcast i32 %3368 to float, !dbg !75
  %3370 = fcmp ogt float %3366, %3369, !dbg !77
  %3371 = fcmp uno float %3366, 0.000000e+00, !dbg !78
  %3372 = or i1 %3370, %3371, !dbg !79
  %3373 = select i1 %3372, float %3366, float %3369, !dbg !80
  %3374 = bitcast float %3373 to i32, !dbg !75
  %3375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3374, i32 1, i32 31), !dbg !75
  %3376 = bitcast i32 %3375 to float, !dbg !75
  %3377 = fcmp ogt float %3373, %3376, !dbg !77
  %3378 = fcmp uno float %3373, 0.000000e+00, !dbg !78
  %3379 = or i1 %3377, %3378, !dbg !79
  %3380 = select i1 %3379, i32 %3374, i32 %3375, !dbg !80
  %3381 = insertelement <1 x i32> poison, i32 %3380, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1267, <1 x i32> %3381, i1 %1338) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %3382 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %3383 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !75
  %3384 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !75
  %3385 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3386 = bitcast float %3382 to i32, !dbg !81
  %3387 = bitcast float %3383 to i32, !dbg !81
  %3388 = bitcast float %3384 to i32, !dbg !81
  %3389 = bitcast float %3385 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %3386, i32 %3387, i32 %3388, i32 %3389, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %3390 = load float, ptr addrspace(3) %2973, align 4, !dbg !81
  %3391 = sext i32 %1814 to i64, !dbg !82
  %3392 = getelementptr bfloat, ptr addrspace(1) %4, i64 %3391, !dbg !82
  %3393 = fptrunc float %2974 to bfloat, !dbg !74
  %3394 = and i32 %21, 252, !dbg !74
  %3395 = icmp eq i32 %3394, 0, !dbg !74
  %3396 = bitcast bfloat %3393 to i16, !dbg !74
  %3397 = and i1 %3395, %1815, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3396, ptr addrspace(1) %3392, i1 %3397) #5, !dbg !74
  %3398 = getelementptr bfloat, ptr addrspace(1) %5, i64 %3391, !dbg !83
  %3399 = fptrunc float %3390 to bfloat, !dbg !81
  %3400 = bitcast bfloat %3399 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3400, ptr addrspace(1) %3398, i1 %3397) #5, !dbg !81
  %3401 = getelementptr bfloat, ptr addrspace(1) %6, i64 %3391, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3396, ptr addrspace(1) %3401, i1 %3397) #5, !dbg !85
  %3402 = getelementptr bfloat, ptr addrspace(1) %7, i64 %3391, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3400, ptr addrspace(1) %3402, i1 %3397) #5, !dbg !87
  %3403 = getelementptr bfloat, ptr addrspace(1) %8, i64 %3391, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3396, ptr addrspace(1) %3403, i1 %3397) #5, !dbg !89
  %3404 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3391, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3400, ptr addrspace(1) %3404, i1 %3397) #5, !dbg !91
  %3405 = getelementptr bfloat, ptr addrspace(1) %10, i64 %3391, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3396, ptr addrspace(1) %3405, i1 %3397) #5, !dbg !93
  %3406 = getelementptr bfloat, ptr addrspace(1) %11, i64 %3391, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3400, ptr addrspace(1) %3406, i1 %3397) #5, !dbg !95
  %3407 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1982, i1 %66) #5, !dbg !96
  %3408 = extractvalue { i32, i32, i32, i32 } %3407, 0, !dbg !96
  %3409 = bitcast i32 %3408 to <2 x bfloat>, !dbg !96
  %3410 = extractvalue { i32, i32, i32, i32 } %3407, 1, !dbg !96
  %3411 = bitcast i32 %3410 to <2 x bfloat>, !dbg !96
  %3412 = extractvalue { i32, i32, i32, i32 } %3407, 2, !dbg !96
  %3413 = bitcast i32 %3412 to <2 x bfloat>, !dbg !96
  %3414 = extractvalue { i32, i32, i32, i32 } %3407, 3, !dbg !96
  %3415 = bitcast i32 %3414 to <2 x bfloat>, !dbg !96
  %3416 = extractelement <2 x bfloat> %3409, i64 0, !dbg !96
  %3417 = extractelement <2 x bfloat> %3409, i64 1, !dbg !96
  %3418 = extractelement <2 x bfloat> %3411, i64 0, !dbg !96
  %3419 = extractelement <2 x bfloat> %3411, i64 1, !dbg !96
  %3420 = extractelement <2 x bfloat> %3413, i64 0, !dbg !96
  %3421 = extractelement <2 x bfloat> %3413, i64 1, !dbg !96
  %3422 = extractelement <2 x bfloat> %3415, i64 0, !dbg !96
  %3423 = extractelement <2 x bfloat> %3415, i64 1, !dbg !96
  %3424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1983, i1 %66) #5, !dbg !96
  %3425 = extractvalue { i32, i32, i32, i32 } %3424, 0, !dbg !96
  %3426 = bitcast i32 %3425 to <2 x bfloat>, !dbg !96
  %3427 = extractvalue { i32, i32, i32, i32 } %3424, 1, !dbg !96
  %3428 = bitcast i32 %3427 to <2 x bfloat>, !dbg !96
  %3429 = extractvalue { i32, i32, i32, i32 } %3424, 2, !dbg !96
  %3430 = bitcast i32 %3429 to <2 x bfloat>, !dbg !96
  %3431 = extractvalue { i32, i32, i32, i32 } %3424, 3, !dbg !96
  %3432 = bitcast i32 %3431 to <2 x bfloat>, !dbg !96
  %3433 = extractelement <2 x bfloat> %3426, i64 0, !dbg !96
  %3434 = extractelement <2 x bfloat> %3426, i64 1, !dbg !96
  %3435 = extractelement <2 x bfloat> %3428, i64 0, !dbg !96
  %3436 = extractelement <2 x bfloat> %3428, i64 1, !dbg !96
  %3437 = extractelement <2 x bfloat> %3430, i64 0, !dbg !96
  %3438 = extractelement <2 x bfloat> %3430, i64 1, !dbg !96
  %3439 = extractelement <2 x bfloat> %3432, i64 0, !dbg !96
  %3440 = extractelement <2 x bfloat> %3432, i64 1, !dbg !96
  %3441 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1984, i1 %66) #5, !dbg !96
  %3442 = extractvalue { i32, i32, i32, i32 } %3441, 0, !dbg !96
  %3443 = bitcast i32 %3442 to <2 x bfloat>, !dbg !96
  %3444 = extractvalue { i32, i32, i32, i32 } %3441, 1, !dbg !96
  %3445 = bitcast i32 %3444 to <2 x bfloat>, !dbg !96
  %3446 = extractvalue { i32, i32, i32, i32 } %3441, 2, !dbg !96
  %3447 = bitcast i32 %3446 to <2 x bfloat>, !dbg !96
  %3448 = extractvalue { i32, i32, i32, i32 } %3441, 3, !dbg !96
  %3449 = bitcast i32 %3448 to <2 x bfloat>, !dbg !96
  %3450 = extractelement <2 x bfloat> %3443, i64 0, !dbg !96
  %3451 = extractelement <2 x bfloat> %3443, i64 1, !dbg !96
  %3452 = extractelement <2 x bfloat> %3445, i64 0, !dbg !96
  %3453 = extractelement <2 x bfloat> %3445, i64 1, !dbg !96
  %3454 = extractelement <2 x bfloat> %3447, i64 0, !dbg !96
  %3455 = extractelement <2 x bfloat> %3447, i64 1, !dbg !96
  %3456 = extractelement <2 x bfloat> %3449, i64 0, !dbg !96
  %3457 = extractelement <2 x bfloat> %3449, i64 1, !dbg !96
  %3458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1985, i1 %66) #5, !dbg !96
  %3459 = extractvalue { i32, i32, i32, i32 } %3458, 0, !dbg !96
  %3460 = bitcast i32 %3459 to <2 x bfloat>, !dbg !96
  %3461 = extractvalue { i32, i32, i32, i32 } %3458, 1, !dbg !96
  %3462 = bitcast i32 %3461 to <2 x bfloat>, !dbg !96
  %3463 = extractvalue { i32, i32, i32, i32 } %3458, 2, !dbg !96
  %3464 = bitcast i32 %3463 to <2 x bfloat>, !dbg !96
  %3465 = extractvalue { i32, i32, i32, i32 } %3458, 3, !dbg !96
  %3466 = bitcast i32 %3465 to <2 x bfloat>, !dbg !96
  %3467 = extractelement <2 x bfloat> %3460, i64 0, !dbg !96
  %3468 = extractelement <2 x bfloat> %3460, i64 1, !dbg !96
  %3469 = extractelement <2 x bfloat> %3462, i64 0, !dbg !96
  %3470 = extractelement <2 x bfloat> %3462, i64 1, !dbg !96
  %3471 = extractelement <2 x bfloat> %3464, i64 0, !dbg !96
  %3472 = extractelement <2 x bfloat> %3464, i64 1, !dbg !96
  %3473 = extractelement <2 x bfloat> %3466, i64 0, !dbg !96
  %3474 = extractelement <2 x bfloat> %3466, i64 1, !dbg !96
  %3475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1986, i1 %66) #5, !dbg !96
  %3476 = extractvalue { i32, i32, i32, i32 } %3475, 0, !dbg !96
  %3477 = bitcast i32 %3476 to <2 x bfloat>, !dbg !96
  %3478 = extractvalue { i32, i32, i32, i32 } %3475, 1, !dbg !96
  %3479 = bitcast i32 %3478 to <2 x bfloat>, !dbg !96
  %3480 = extractvalue { i32, i32, i32, i32 } %3475, 2, !dbg !96
  %3481 = bitcast i32 %3480 to <2 x bfloat>, !dbg !96
  %3482 = extractvalue { i32, i32, i32, i32 } %3475, 3, !dbg !96
  %3483 = bitcast i32 %3482 to <2 x bfloat>, !dbg !96
  %3484 = extractelement <2 x bfloat> %3477, i64 0, !dbg !96
  %3485 = extractelement <2 x bfloat> %3477, i64 1, !dbg !96
  %3486 = extractelement <2 x bfloat> %3479, i64 0, !dbg !96
  %3487 = extractelement <2 x bfloat> %3479, i64 1, !dbg !96
  %3488 = extractelement <2 x bfloat> %3481, i64 0, !dbg !96
  %3489 = extractelement <2 x bfloat> %3481, i64 1, !dbg !96
  %3490 = extractelement <2 x bfloat> %3483, i64 0, !dbg !96
  %3491 = extractelement <2 x bfloat> %3483, i64 1, !dbg !96
  %3492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1987, i1 %66) #5, !dbg !96
  %3493 = extractvalue { i32, i32, i32, i32 } %3492, 0, !dbg !96
  %3494 = bitcast i32 %3493 to <2 x bfloat>, !dbg !96
  %3495 = extractvalue { i32, i32, i32, i32 } %3492, 1, !dbg !96
  %3496 = bitcast i32 %3495 to <2 x bfloat>, !dbg !96
  %3497 = extractvalue { i32, i32, i32, i32 } %3492, 2, !dbg !96
  %3498 = bitcast i32 %3497 to <2 x bfloat>, !dbg !96
  %3499 = extractvalue { i32, i32, i32, i32 } %3492, 3, !dbg !96
  %3500 = bitcast i32 %3499 to <2 x bfloat>, !dbg !96
  %3501 = extractelement <2 x bfloat> %3494, i64 0, !dbg !96
  %3502 = extractelement <2 x bfloat> %3494, i64 1, !dbg !96
  %3503 = extractelement <2 x bfloat> %3496, i64 0, !dbg !96
  %3504 = extractelement <2 x bfloat> %3496, i64 1, !dbg !96
  %3505 = extractelement <2 x bfloat> %3498, i64 0, !dbg !96
  %3506 = extractelement <2 x bfloat> %3498, i64 1, !dbg !96
  %3507 = extractelement <2 x bfloat> %3500, i64 0, !dbg !96
  %3508 = extractelement <2 x bfloat> %3500, i64 1, !dbg !96
  %3509 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1988, i1 %66) #5, !dbg !96
  %3510 = extractvalue { i32, i32, i32, i32 } %3509, 0, !dbg !96
  %3511 = bitcast i32 %3510 to <2 x bfloat>, !dbg !96
  %3512 = extractvalue { i32, i32, i32, i32 } %3509, 1, !dbg !96
  %3513 = bitcast i32 %3512 to <2 x bfloat>, !dbg !96
  %3514 = extractvalue { i32, i32, i32, i32 } %3509, 2, !dbg !96
  %3515 = bitcast i32 %3514 to <2 x bfloat>, !dbg !96
  %3516 = extractvalue { i32, i32, i32, i32 } %3509, 3, !dbg !96
  %3517 = bitcast i32 %3516 to <2 x bfloat>, !dbg !96
  %3518 = extractelement <2 x bfloat> %3511, i64 0, !dbg !96
  %3519 = extractelement <2 x bfloat> %3511, i64 1, !dbg !96
  %3520 = extractelement <2 x bfloat> %3513, i64 0, !dbg !96
  %3521 = extractelement <2 x bfloat> %3513, i64 1, !dbg !96
  %3522 = extractelement <2 x bfloat> %3515, i64 0, !dbg !96
  %3523 = extractelement <2 x bfloat> %3515, i64 1, !dbg !96
  %3524 = extractelement <2 x bfloat> %3517, i64 0, !dbg !96
  %3525 = extractelement <2 x bfloat> %3517, i64 1, !dbg !96
  %3526 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1989, i1 %66) #5, !dbg !96
  %3527 = extractvalue { i32, i32, i32, i32 } %3526, 0, !dbg !96
  %3528 = bitcast i32 %3527 to <2 x bfloat>, !dbg !96
  %3529 = extractvalue { i32, i32, i32, i32 } %3526, 1, !dbg !96
  %3530 = bitcast i32 %3529 to <2 x bfloat>, !dbg !96
  %3531 = extractvalue { i32, i32, i32, i32 } %3526, 2, !dbg !96
  %3532 = bitcast i32 %3531 to <2 x bfloat>, !dbg !96
  %3533 = extractvalue { i32, i32, i32, i32 } %3526, 3, !dbg !96
  %3534 = bitcast i32 %3533 to <2 x bfloat>, !dbg !96
  %3535 = extractelement <2 x bfloat> %3528, i64 0, !dbg !96
  %3536 = extractelement <2 x bfloat> %3528, i64 1, !dbg !96
  %3537 = extractelement <2 x bfloat> %3530, i64 0, !dbg !96
  %3538 = extractelement <2 x bfloat> %3530, i64 1, !dbg !96
  %3539 = extractelement <2 x bfloat> %3532, i64 0, !dbg !96
  %3540 = extractelement <2 x bfloat> %3532, i64 1, !dbg !96
  %3541 = extractelement <2 x bfloat> %3534, i64 0, !dbg !96
  %3542 = extractelement <2 x bfloat> %3534, i64 1, !dbg !96
  %3543 = fpext bfloat %3416 to float, !dbg !97
  %3544 = fpext bfloat %3417 to float, !dbg !97
  %3545 = fpext bfloat %3418 to float, !dbg !97
  %3546 = fpext bfloat %3419 to float, !dbg !97
  %3547 = fpext bfloat %3420 to float, !dbg !97
  %3548 = fpext bfloat %3421 to float, !dbg !97
  %3549 = fpext bfloat %3422 to float, !dbg !97
  %3550 = fpext bfloat %3423 to float, !dbg !97
  %3551 = fpext bfloat %3433 to float, !dbg !97
  %3552 = fpext bfloat %3434 to float, !dbg !97
  %3553 = fpext bfloat %3435 to float, !dbg !97
  %3554 = fpext bfloat %3436 to float, !dbg !97
  %3555 = fpext bfloat %3437 to float, !dbg !97
  %3556 = fpext bfloat %3438 to float, !dbg !97
  %3557 = fpext bfloat %3439 to float, !dbg !97
  %3558 = fpext bfloat %3440 to float, !dbg !97
  %3559 = fpext bfloat %3450 to float, !dbg !97
  %3560 = fpext bfloat %3451 to float, !dbg !97
  %3561 = fpext bfloat %3452 to float, !dbg !97
  %3562 = fpext bfloat %3453 to float, !dbg !97
  %3563 = fpext bfloat %3454 to float, !dbg !97
  %3564 = fpext bfloat %3455 to float, !dbg !97
  %3565 = fpext bfloat %3456 to float, !dbg !97
  %3566 = fpext bfloat %3457 to float, !dbg !97
  %3567 = fpext bfloat %3467 to float, !dbg !97
  %3568 = fpext bfloat %3468 to float, !dbg !97
  %3569 = fpext bfloat %3469 to float, !dbg !97
  %3570 = fpext bfloat %3470 to float, !dbg !97
  %3571 = fpext bfloat %3471 to float, !dbg !97
  %3572 = fpext bfloat %3472 to float, !dbg !97
  %3573 = fpext bfloat %3473 to float, !dbg !97
  %3574 = fpext bfloat %3474 to float, !dbg !97
  %3575 = fpext bfloat %3484 to float, !dbg !97
  %3576 = fpext bfloat %3485 to float, !dbg !97
  %3577 = fpext bfloat %3486 to float, !dbg !97
  %3578 = fpext bfloat %3487 to float, !dbg !97
  %3579 = fpext bfloat %3488 to float, !dbg !97
  %3580 = fpext bfloat %3489 to float, !dbg !97
  %3581 = fpext bfloat %3490 to float, !dbg !97
  %3582 = fpext bfloat %3491 to float, !dbg !97
  %3583 = fpext bfloat %3501 to float, !dbg !97
  %3584 = fpext bfloat %3502 to float, !dbg !97
  %3585 = fpext bfloat %3503 to float, !dbg !97
  %3586 = fpext bfloat %3504 to float, !dbg !97
  %3587 = fpext bfloat %3505 to float, !dbg !97
  %3588 = fpext bfloat %3506 to float, !dbg !97
  %3589 = fpext bfloat %3507 to float, !dbg !97
  %3590 = fpext bfloat %3508 to float, !dbg !97
  %3591 = fpext bfloat %3518 to float, !dbg !97
  %3592 = fpext bfloat %3519 to float, !dbg !97
  %3593 = fpext bfloat %3520 to float, !dbg !97
  %3594 = fpext bfloat %3521 to float, !dbg !97
  %3595 = fpext bfloat %3522 to float, !dbg !97
  %3596 = fpext bfloat %3523 to float, !dbg !97
  %3597 = fpext bfloat %3524 to float, !dbg !97
  %3598 = fpext bfloat %3525 to float, !dbg !97
  %3599 = fpext bfloat %3535 to float, !dbg !97
  %3600 = fpext bfloat %3536 to float, !dbg !97
  %3601 = fpext bfloat %3537 to float, !dbg !97
  %3602 = fpext bfloat %3538 to float, !dbg !97
  %3603 = fpext bfloat %3539 to float, !dbg !97
  %3604 = fpext bfloat %3540 to float, !dbg !97
  %3605 = fpext bfloat %3541 to float, !dbg !97
  %3606 = fpext bfloat %3542 to float, !dbg !97
  %3607 = insertelement <4 x float> poison, float %2968, i64 0, !dbg !98
  %3608 = insertelement <4 x float> %3607, float %2967, i64 1, !dbg !98
  %3609 = insertelement <4 x float> %3608, float %2966, i64 2, !dbg !98
  %3610 = insertelement <4 x float> %3609, float %2965, i64 3, !dbg !98
  %3611 = fcmp oge <4 x float> %3610, zeroinitializer, !dbg !98
  %3612 = select <4 x i1> %3611, <4 x float> zeroinitializer, <4 x float> %3610, !dbg !98
  %3613 = fsub <4 x float> zeroinitializer, %3612, !dbg !100
  %3614 = insertelement <4 x float> poison, float %3385, i64 0, !dbg !101
  %3615 = insertelement <4 x float> %3614, float %3384, i64 1, !dbg !101
  %3616 = insertelement <4 x float> %3615, float %3383, i64 2, !dbg !101
  %3617 = insertelement <4 x float> %3616, float %3382, i64 3, !dbg !101
  %3618 = fcmp ole <4 x float> %3617, zeroinitializer, !dbg !101
  %3619 = select <4 x i1> %3618, <4 x float> zeroinitializer, <4 x float> %3617, !dbg !101
  %3620 = fcmp ogt <4 x float> %3613, %3619, !dbg !103
  %3621 = fcmp uno <4 x float> %3613, zeroinitializer, !dbg !105
  %3622 = or <4 x i1> %3621, %3620, !dbg !106
  %3623 = select <4 x i1> %3622, <4 x float> %3613, <4 x float> %3619, !dbg !107
  %3624 = fmul <4 x float> %3623, splat (float 0x3F80204080000000), !dbg !108
  %3625 = fcmp ogt <4 x float> %3624, splat (float 0x3EE4F8B580000000), !dbg !109
  %3626 = extractelement <4 x float> %3624, i64 3, !dbg !111
  %3627 = fcmp uno float %3626, 0.000000e+00, !dbg !112
  %3628 = extractelement <4 x float> %3624, i64 2, !dbg !111
  %3629 = fcmp uno float %3628, 0.000000e+00, !dbg !112
  %3630 = extractelement <4 x float> %3624, i64 1, !dbg !111
  %3631 = fcmp uno float %3630, 0.000000e+00, !dbg !112
  %3632 = extractelement <4 x float> %3624, i64 0, !dbg !111
  %3633 = fcmp uno float %3632, 0.000000e+00, !dbg !112
  %3634 = extractelement <4 x i1> %3625, i64 3, !dbg !113
  %3635 = or i1 %3634, %3627, !dbg !113
  %3636 = extractelement <4 x i1> %3625, i64 2, !dbg !113
  %3637 = or i1 %3636, %3629, !dbg !113
  %3638 = extractelement <4 x i1> %3625, i64 1, !dbg !113
  %3639 = or i1 %3638, %3631, !dbg !113
  %3640 = extractelement <4 x i1> %3625, i64 0, !dbg !113
  %3641 = or i1 %3640, %3633, !dbg !113
  %3642 = select i1 %3635, float %3626, float 0x3EE4F8B580000000, !dbg !111
  %3643 = select i1 %3637, float %3628, float 0x3EE4F8B580000000, !dbg !111
  %3644 = select i1 %3639, float %3630, float 0x3EE4F8B580000000, !dbg !111
  %3645 = select i1 %3641, float %3632, float 0x3EE4F8B580000000, !dbg !111
  %3646 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3642), !dbg !114
  %3647 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3643), !dbg !114
  %3648 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3644), !dbg !114
  %3649 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3645), !dbg !114
  %3650 = fmul float %3646, %3543, !dbg !115
  %3651 = fmul float %3646, %3544, !dbg !115
  %3652 = fmul float %3646, %3545, !dbg !115
  %3653 = fmul float %3646, %3546, !dbg !115
  %3654 = fmul float %3646, %3547, !dbg !115
  %3655 = fmul float %3646, %3548, !dbg !115
  %3656 = fmul float %3646, %3549, !dbg !115
  %3657 = fmul float %3646, %3550, !dbg !115
  %3658 = fmul float %3646, %3551, !dbg !115
  %3659 = fmul float %3646, %3552, !dbg !115
  %3660 = fmul float %3646, %3553, !dbg !115
  %3661 = fmul float %3646, %3554, !dbg !115
  %3662 = fmul float %3646, %3555, !dbg !115
  %3663 = fmul float %3646, %3556, !dbg !115
  %3664 = fmul float %3646, %3557, !dbg !115
  %3665 = fmul float %3646, %3558, !dbg !115
  %3666 = fmul float %3647, %3559, !dbg !115
  %3667 = fmul float %3647, %3560, !dbg !115
  %3668 = fmul float %3647, %3561, !dbg !115
  %3669 = fmul float %3647, %3562, !dbg !115
  %3670 = fmul float %3647, %3563, !dbg !115
  %3671 = fmul float %3647, %3564, !dbg !115
  %3672 = fmul float %3647, %3565, !dbg !115
  %3673 = fmul float %3647, %3566, !dbg !115
  %3674 = fmul float %3647, %3567, !dbg !115
  %3675 = fmul float %3647, %3568, !dbg !115
  %3676 = fmul float %3647, %3569, !dbg !115
  %3677 = fmul float %3647, %3570, !dbg !115
  %3678 = fmul float %3647, %3571, !dbg !115
  %3679 = fmul float %3647, %3572, !dbg !115
  %3680 = fmul float %3647, %3573, !dbg !115
  %3681 = fmul float %3647, %3574, !dbg !115
  %3682 = fmul float %3648, %3575, !dbg !115
  %3683 = fmul float %3648, %3576, !dbg !115
  %3684 = fmul float %3648, %3577, !dbg !115
  %3685 = fmul float %3648, %3578, !dbg !115
  %3686 = fmul float %3648, %3579, !dbg !115
  %3687 = fmul float %3648, %3580, !dbg !115
  %3688 = fmul float %3648, %3581, !dbg !115
  %3689 = fmul float %3648, %3582, !dbg !115
  %3690 = fmul float %3648, %3583, !dbg !115
  %3691 = fmul float %3648, %3584, !dbg !115
  %3692 = fmul float %3648, %3585, !dbg !115
  %3693 = fmul float %3648, %3586, !dbg !115
  %3694 = fmul float %3648, %3587, !dbg !115
  %3695 = fmul float %3648, %3588, !dbg !115
  %3696 = fmul float %3648, %3589, !dbg !115
  %3697 = fmul float %3648, %3590, !dbg !115
  %3698 = fmul float %3649, %3591, !dbg !115
  %3699 = fmul float %3649, %3592, !dbg !115
  %3700 = fmul float %3649, %3593, !dbg !115
  %3701 = fmul float %3649, %3594, !dbg !115
  %3702 = fmul float %3649, %3595, !dbg !115
  %3703 = fmul float %3649, %3596, !dbg !115
  %3704 = fmul float %3649, %3597, !dbg !115
  %3705 = fmul float %3649, %3598, !dbg !115
  %3706 = fmul float %3649, %3599, !dbg !115
  %3707 = fmul float %3649, %3600, !dbg !115
  %3708 = fmul float %3649, %3601, !dbg !115
  %3709 = fmul float %3649, %3602, !dbg !115
  %3710 = fmul float %3649, %3603, !dbg !115
  %3711 = fmul float %3649, %3604, !dbg !115
  %3712 = fmul float %3649, %3605, !dbg !115
  %3713 = fmul float %3649, %3606, !dbg !115
  %3714 = tail call float @llvm.nvvm.round.f(float %3650) #5, !dbg !116
  %3715 = tail call float @llvm.nvvm.round.f(float %3651) #5, !dbg !116
  %3716 = tail call float @llvm.nvvm.round.f(float %3652) #5, !dbg !116
  %3717 = tail call float @llvm.nvvm.round.f(float %3653) #5, !dbg !116
  %3718 = tail call float @llvm.nvvm.round.f(float %3654) #5, !dbg !116
  %3719 = tail call float @llvm.nvvm.round.f(float %3655) #5, !dbg !116
  %3720 = tail call float @llvm.nvvm.round.f(float %3656) #5, !dbg !116
  %3721 = tail call float @llvm.nvvm.round.f(float %3657) #5, !dbg !116
  %3722 = tail call float @llvm.nvvm.round.f(float %3658) #5, !dbg !116
  %3723 = tail call float @llvm.nvvm.round.f(float %3659) #5, !dbg !116
  %3724 = tail call float @llvm.nvvm.round.f(float %3660) #5, !dbg !116
  %3725 = tail call float @llvm.nvvm.round.f(float %3661) #5, !dbg !116
  %3726 = tail call float @llvm.nvvm.round.f(float %3662) #5, !dbg !116
  %3727 = tail call float @llvm.nvvm.round.f(float %3663) #5, !dbg !116
  %3728 = tail call float @llvm.nvvm.round.f(float %3664) #5, !dbg !116
  %3729 = tail call float @llvm.nvvm.round.f(float %3665) #5, !dbg !116
  %3730 = tail call float @llvm.nvvm.round.f(float %3666) #5, !dbg !116
  %3731 = tail call float @llvm.nvvm.round.f(float %3667) #5, !dbg !116
  %3732 = tail call float @llvm.nvvm.round.f(float %3668) #5, !dbg !116
  %3733 = tail call float @llvm.nvvm.round.f(float %3669) #5, !dbg !116
  %3734 = tail call float @llvm.nvvm.round.f(float %3670) #5, !dbg !116
  %3735 = tail call float @llvm.nvvm.round.f(float %3671) #5, !dbg !116
  %3736 = tail call float @llvm.nvvm.round.f(float %3672) #5, !dbg !116
  %3737 = tail call float @llvm.nvvm.round.f(float %3673) #5, !dbg !116
  %3738 = tail call float @llvm.nvvm.round.f(float %3674) #5, !dbg !116
  %3739 = tail call float @llvm.nvvm.round.f(float %3675) #5, !dbg !116
  %3740 = tail call float @llvm.nvvm.round.f(float %3676) #5, !dbg !116
  %3741 = tail call float @llvm.nvvm.round.f(float %3677) #5, !dbg !116
  %3742 = tail call float @llvm.nvvm.round.f(float %3678) #5, !dbg !116
  %3743 = tail call float @llvm.nvvm.round.f(float %3679) #5, !dbg !116
  %3744 = tail call float @llvm.nvvm.round.f(float %3680) #5, !dbg !116
  %3745 = tail call float @llvm.nvvm.round.f(float %3681) #5, !dbg !116
  %3746 = tail call float @llvm.nvvm.round.f(float %3682) #5, !dbg !116
  %3747 = tail call float @llvm.nvvm.round.f(float %3683) #5, !dbg !116
  %3748 = tail call float @llvm.nvvm.round.f(float %3684) #5, !dbg !116
  %3749 = tail call float @llvm.nvvm.round.f(float %3685) #5, !dbg !116
  %3750 = tail call float @llvm.nvvm.round.f(float %3686) #5, !dbg !116
  %3751 = tail call float @llvm.nvvm.round.f(float %3687) #5, !dbg !116
  %3752 = tail call float @llvm.nvvm.round.f(float %3688) #5, !dbg !116
  %3753 = tail call float @llvm.nvvm.round.f(float %3689) #5, !dbg !116
  %3754 = tail call float @llvm.nvvm.round.f(float %3690) #5, !dbg !116
  %3755 = tail call float @llvm.nvvm.round.f(float %3691) #5, !dbg !116
  %3756 = tail call float @llvm.nvvm.round.f(float %3692) #5, !dbg !116
  %3757 = tail call float @llvm.nvvm.round.f(float %3693) #5, !dbg !116
  %3758 = tail call float @llvm.nvvm.round.f(float %3694) #5, !dbg !116
  %3759 = tail call float @llvm.nvvm.round.f(float %3695) #5, !dbg !116
  %3760 = tail call float @llvm.nvvm.round.f(float %3696) #5, !dbg !116
  %3761 = tail call float @llvm.nvvm.round.f(float %3697) #5, !dbg !116
  %3762 = tail call float @llvm.nvvm.round.f(float %3698) #5, !dbg !116
  %3763 = tail call float @llvm.nvvm.round.f(float %3699) #5, !dbg !116
  %3764 = tail call float @llvm.nvvm.round.f(float %3700) #5, !dbg !116
  %3765 = tail call float @llvm.nvvm.round.f(float %3701) #5, !dbg !116
  %3766 = tail call float @llvm.nvvm.round.f(float %3702) #5, !dbg !116
  %3767 = tail call float @llvm.nvvm.round.f(float %3703) #5, !dbg !116
  %3768 = tail call float @llvm.nvvm.round.f(float %3704) #5, !dbg !116
  %3769 = tail call float @llvm.nvvm.round.f(float %3705) #5, !dbg !116
  %3770 = tail call float @llvm.nvvm.round.f(float %3706) #5, !dbg !116
  %3771 = tail call float @llvm.nvvm.round.f(float %3707) #5, !dbg !116
  %3772 = tail call float @llvm.nvvm.round.f(float %3708) #5, !dbg !116
  %3773 = tail call float @llvm.nvvm.round.f(float %3709) #5, !dbg !116
  %3774 = tail call float @llvm.nvvm.round.f(float %3710) #5, !dbg !116
  %3775 = tail call float @llvm.nvvm.round.f(float %3711) #5, !dbg !116
  %3776 = tail call float @llvm.nvvm.round.f(float %3712) #5, !dbg !116
  %3777 = tail call float @llvm.nvvm.round.f(float %3713) #5, !dbg !116
  %3778 = insertelement <4 x float> poison, float %3714, i64 0, !dbg !117
  %3779 = insertelement <4 x float> %3778, float %3715, i64 1, !dbg !117
  %3780 = insertelement <4 x float> %3779, float %3716, i64 2, !dbg !117
  %3781 = insertelement <4 x float> %3780, float %3717, i64 3, !dbg !117
  %3782 = fcmp ogt <4 x float> %3781, splat (float -1.270000e+02), !dbg !117
  %3783 = fcmp uno <4 x float> %3781, zeroinitializer, !dbg !119
  %3784 = or <4 x i1> %3782, %3783, !dbg !120
  %3785 = select <4 x i1> %3784, <4 x float> %3781, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3786 = fcmp olt <4 x float> %3785, splat (float 1.270000e+02), !dbg !122
  %3787 = fcmp uno <4 x float> %3785, zeroinitializer, !dbg !124
  %3788 = or <4 x i1> %3786, %3787, !dbg !125
  %3789 = fptosi <4 x float> %3785 to <4 x i8>, !dbg !126
  %3790 = select <4 x i1> %3788, <4 x i8> %3789, <4 x i8> splat (i8 127), !dbg !127
  %3791 = insertelement <4 x float> poison, float %3718, i64 0, !dbg !117
  %3792 = insertelement <4 x float> %3791, float %3719, i64 1, !dbg !117
  %3793 = insertelement <4 x float> %3792, float %3720, i64 2, !dbg !117
  %3794 = insertelement <4 x float> %3793, float %3721, i64 3, !dbg !117
  %3795 = fcmp ogt <4 x float> %3794, splat (float -1.270000e+02), !dbg !117
  %3796 = fcmp uno <4 x float> %3794, zeroinitializer, !dbg !119
  %3797 = or <4 x i1> %3795, %3796, !dbg !120
  %3798 = select <4 x i1> %3797, <4 x float> %3794, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3799 = fcmp olt <4 x float> %3798, splat (float 1.270000e+02), !dbg !122
  %3800 = fcmp uno <4 x float> %3798, zeroinitializer, !dbg !124
  %3801 = or <4 x i1> %3799, %3800, !dbg !125
  %3802 = fptosi <4 x float> %3798 to <4 x i8>, !dbg !126
  %3803 = select <4 x i1> %3801, <4 x i8> %3802, <4 x i8> splat (i8 127), !dbg !127
  %3804 = insertelement <4 x float> poison, float %3722, i64 0, !dbg !117
  %3805 = insertelement <4 x float> %3804, float %3723, i64 1, !dbg !117
  %3806 = insertelement <4 x float> %3805, float %3724, i64 2, !dbg !117
  %3807 = insertelement <4 x float> %3806, float %3725, i64 3, !dbg !117
  %3808 = fcmp ogt <4 x float> %3807, splat (float -1.270000e+02), !dbg !117
  %3809 = fcmp uno <4 x float> %3807, zeroinitializer, !dbg !119
  %3810 = or <4 x i1> %3808, %3809, !dbg !120
  %3811 = select <4 x i1> %3810, <4 x float> %3807, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3812 = fcmp olt <4 x float> %3811, splat (float 1.270000e+02), !dbg !122
  %3813 = fcmp uno <4 x float> %3811, zeroinitializer, !dbg !124
  %3814 = or <4 x i1> %3812, %3813, !dbg !125
  %3815 = fptosi <4 x float> %3811 to <4 x i8>, !dbg !126
  %3816 = select <4 x i1> %3814, <4 x i8> %3815, <4 x i8> splat (i8 127), !dbg !127
  %3817 = insertelement <4 x float> poison, float %3726, i64 0, !dbg !117
  %3818 = insertelement <4 x float> %3817, float %3727, i64 1, !dbg !117
  %3819 = insertelement <4 x float> %3818, float %3728, i64 2, !dbg !117
  %3820 = insertelement <4 x float> %3819, float %3729, i64 3, !dbg !117
  %3821 = fcmp ogt <4 x float> %3820, splat (float -1.270000e+02), !dbg !117
  %3822 = fcmp uno <4 x float> %3820, zeroinitializer, !dbg !119
  %3823 = or <4 x i1> %3821, %3822, !dbg !120
  %3824 = select <4 x i1> %3823, <4 x float> %3820, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3825 = fcmp olt <4 x float> %3824, splat (float 1.270000e+02), !dbg !122
  %3826 = fcmp uno <4 x float> %3824, zeroinitializer, !dbg !124
  %3827 = or <4 x i1> %3825, %3826, !dbg !125
  %3828 = fptosi <4 x float> %3824 to <4 x i8>, !dbg !126
  %3829 = select <4 x i1> %3827, <4 x i8> %3828, <4 x i8> splat (i8 127), !dbg !127
  %3830 = insertelement <4 x float> poison, float %3730, i64 0, !dbg !117
  %3831 = insertelement <4 x float> %3830, float %3731, i64 1, !dbg !117
  %3832 = insertelement <4 x float> %3831, float %3732, i64 2, !dbg !117
  %3833 = insertelement <4 x float> %3832, float %3733, i64 3, !dbg !117
  %3834 = fcmp ogt <4 x float> %3833, splat (float -1.270000e+02), !dbg !117
  %3835 = fcmp uno <4 x float> %3833, zeroinitializer, !dbg !119
  %3836 = or <4 x i1> %3834, %3835, !dbg !120
  %3837 = select <4 x i1> %3836, <4 x float> %3833, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3838 = fcmp olt <4 x float> %3837, splat (float 1.270000e+02), !dbg !122
  %3839 = fcmp uno <4 x float> %3837, zeroinitializer, !dbg !124
  %3840 = or <4 x i1> %3838, %3839, !dbg !125
  %3841 = fptosi <4 x float> %3837 to <4 x i8>, !dbg !126
  %3842 = select <4 x i1> %3840, <4 x i8> %3841, <4 x i8> splat (i8 127), !dbg !127
  %3843 = insertelement <4 x float> poison, float %3734, i64 0, !dbg !117
  %3844 = insertelement <4 x float> %3843, float %3735, i64 1, !dbg !117
  %3845 = insertelement <4 x float> %3844, float %3736, i64 2, !dbg !117
  %3846 = insertelement <4 x float> %3845, float %3737, i64 3, !dbg !117
  %3847 = fcmp ogt <4 x float> %3846, splat (float -1.270000e+02), !dbg !117
  %3848 = fcmp uno <4 x float> %3846, zeroinitializer, !dbg !119
  %3849 = or <4 x i1> %3847, %3848, !dbg !120
  %3850 = select <4 x i1> %3849, <4 x float> %3846, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3851 = fcmp olt <4 x float> %3850, splat (float 1.270000e+02), !dbg !122
  %3852 = fcmp uno <4 x float> %3850, zeroinitializer, !dbg !124
  %3853 = or <4 x i1> %3851, %3852, !dbg !125
  %3854 = fptosi <4 x float> %3850 to <4 x i8>, !dbg !126
  %3855 = select <4 x i1> %3853, <4 x i8> %3854, <4 x i8> splat (i8 127), !dbg !127
  %3856 = insertelement <4 x float> poison, float %3738, i64 0, !dbg !117
  %3857 = insertelement <4 x float> %3856, float %3739, i64 1, !dbg !117
  %3858 = insertelement <4 x float> %3857, float %3740, i64 2, !dbg !117
  %3859 = insertelement <4 x float> %3858, float %3741, i64 3, !dbg !117
  %3860 = fcmp ogt <4 x float> %3859, splat (float -1.270000e+02), !dbg !117
  %3861 = fcmp uno <4 x float> %3859, zeroinitializer, !dbg !119
  %3862 = or <4 x i1> %3860, %3861, !dbg !120
  %3863 = select <4 x i1> %3862, <4 x float> %3859, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3864 = fcmp olt <4 x float> %3863, splat (float 1.270000e+02), !dbg !122
  %3865 = fcmp uno <4 x float> %3863, zeroinitializer, !dbg !124
  %3866 = or <4 x i1> %3864, %3865, !dbg !125
  %3867 = fptosi <4 x float> %3863 to <4 x i8>, !dbg !126
  %3868 = select <4 x i1> %3866, <4 x i8> %3867, <4 x i8> splat (i8 127), !dbg !127
  %3869 = insertelement <4 x float> poison, float %3742, i64 0, !dbg !117
  %3870 = insertelement <4 x float> %3869, float %3743, i64 1, !dbg !117
  %3871 = insertelement <4 x float> %3870, float %3744, i64 2, !dbg !117
  %3872 = insertelement <4 x float> %3871, float %3745, i64 3, !dbg !117
  %3873 = fcmp ogt <4 x float> %3872, splat (float -1.270000e+02), !dbg !117
  %3874 = fcmp uno <4 x float> %3872, zeroinitializer, !dbg !119
  %3875 = or <4 x i1> %3873, %3874, !dbg !120
  %3876 = select <4 x i1> %3875, <4 x float> %3872, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3877 = fcmp olt <4 x float> %3876, splat (float 1.270000e+02), !dbg !122
  %3878 = fcmp uno <4 x float> %3876, zeroinitializer, !dbg !124
  %3879 = or <4 x i1> %3877, %3878, !dbg !125
  %3880 = fptosi <4 x float> %3876 to <4 x i8>, !dbg !126
  %3881 = select <4 x i1> %3879, <4 x i8> %3880, <4 x i8> splat (i8 127), !dbg !127
  %3882 = insertelement <4 x float> poison, float %3746, i64 0, !dbg !117
  %3883 = insertelement <4 x float> %3882, float %3747, i64 1, !dbg !117
  %3884 = insertelement <4 x float> %3883, float %3748, i64 2, !dbg !117
  %3885 = insertelement <4 x float> %3884, float %3749, i64 3, !dbg !117
  %3886 = fcmp ogt <4 x float> %3885, splat (float -1.270000e+02), !dbg !117
  %3887 = fcmp uno <4 x float> %3885, zeroinitializer, !dbg !119
  %3888 = or <4 x i1> %3886, %3887, !dbg !120
  %3889 = select <4 x i1> %3888, <4 x float> %3885, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3890 = fcmp olt <4 x float> %3889, splat (float 1.270000e+02), !dbg !122
  %3891 = fcmp uno <4 x float> %3889, zeroinitializer, !dbg !124
  %3892 = or <4 x i1> %3890, %3891, !dbg !125
  %3893 = fptosi <4 x float> %3889 to <4 x i8>, !dbg !126
  %3894 = select <4 x i1> %3892, <4 x i8> %3893, <4 x i8> splat (i8 127), !dbg !127
  %3895 = insertelement <4 x float> poison, float %3750, i64 0, !dbg !117
  %3896 = insertelement <4 x float> %3895, float %3751, i64 1, !dbg !117
  %3897 = insertelement <4 x float> %3896, float %3752, i64 2, !dbg !117
  %3898 = insertelement <4 x float> %3897, float %3753, i64 3, !dbg !117
  %3899 = fcmp ogt <4 x float> %3898, splat (float -1.270000e+02), !dbg !117
  %3900 = fcmp uno <4 x float> %3898, zeroinitializer, !dbg !119
  %3901 = or <4 x i1> %3899, %3900, !dbg !120
  %3902 = select <4 x i1> %3901, <4 x float> %3898, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3903 = fcmp olt <4 x float> %3902, splat (float 1.270000e+02), !dbg !122
  %3904 = fcmp uno <4 x float> %3902, zeroinitializer, !dbg !124
  %3905 = or <4 x i1> %3903, %3904, !dbg !125
  %3906 = fptosi <4 x float> %3902 to <4 x i8>, !dbg !126
  %3907 = select <4 x i1> %3905, <4 x i8> %3906, <4 x i8> splat (i8 127), !dbg !127
  %3908 = insertelement <4 x float> poison, float %3754, i64 0, !dbg !117
  %3909 = insertelement <4 x float> %3908, float %3755, i64 1, !dbg !117
  %3910 = insertelement <4 x float> %3909, float %3756, i64 2, !dbg !117
  %3911 = insertelement <4 x float> %3910, float %3757, i64 3, !dbg !117
  %3912 = fcmp ogt <4 x float> %3911, splat (float -1.270000e+02), !dbg !117
  %3913 = fcmp uno <4 x float> %3911, zeroinitializer, !dbg !119
  %3914 = or <4 x i1> %3912, %3913, !dbg !120
  %3915 = select <4 x i1> %3914, <4 x float> %3911, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3916 = fcmp olt <4 x float> %3915, splat (float 1.270000e+02), !dbg !122
  %3917 = fcmp uno <4 x float> %3915, zeroinitializer, !dbg !124
  %3918 = or <4 x i1> %3916, %3917, !dbg !125
  %3919 = fptosi <4 x float> %3915 to <4 x i8>, !dbg !126
  %3920 = select <4 x i1> %3918, <4 x i8> %3919, <4 x i8> splat (i8 127), !dbg !127
  %3921 = insertelement <4 x float> poison, float %3758, i64 0, !dbg !117
  %3922 = insertelement <4 x float> %3921, float %3759, i64 1, !dbg !117
  %3923 = insertelement <4 x float> %3922, float %3760, i64 2, !dbg !117
  %3924 = insertelement <4 x float> %3923, float %3761, i64 3, !dbg !117
  %3925 = fcmp ogt <4 x float> %3924, splat (float -1.270000e+02), !dbg !117
  %3926 = fcmp uno <4 x float> %3924, zeroinitializer, !dbg !119
  %3927 = or <4 x i1> %3925, %3926, !dbg !120
  %3928 = select <4 x i1> %3927, <4 x float> %3924, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3929 = fcmp olt <4 x float> %3928, splat (float 1.270000e+02), !dbg !122
  %3930 = fcmp uno <4 x float> %3928, zeroinitializer, !dbg !124
  %3931 = or <4 x i1> %3929, %3930, !dbg !125
  %3932 = fptosi <4 x float> %3928 to <4 x i8>, !dbg !126
  %3933 = select <4 x i1> %3931, <4 x i8> %3932, <4 x i8> splat (i8 127), !dbg !127
  %3934 = insertelement <4 x float> poison, float %3762, i64 0, !dbg !117
  %3935 = insertelement <4 x float> %3934, float %3763, i64 1, !dbg !117
  %3936 = insertelement <4 x float> %3935, float %3764, i64 2, !dbg !117
  %3937 = insertelement <4 x float> %3936, float %3765, i64 3, !dbg !117
  %3938 = fcmp ogt <4 x float> %3937, splat (float -1.270000e+02), !dbg !117
  %3939 = fcmp uno <4 x float> %3937, zeroinitializer, !dbg !119
  %3940 = or <4 x i1> %3938, %3939, !dbg !120
  %3941 = select <4 x i1> %3940, <4 x float> %3937, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3942 = fcmp olt <4 x float> %3941, splat (float 1.270000e+02), !dbg !122
  %3943 = fcmp uno <4 x float> %3941, zeroinitializer, !dbg !124
  %3944 = or <4 x i1> %3942, %3943, !dbg !125
  %3945 = fptosi <4 x float> %3941 to <4 x i8>, !dbg !126
  %3946 = select <4 x i1> %3944, <4 x i8> %3945, <4 x i8> splat (i8 127), !dbg !127
  %3947 = insertelement <4 x float> poison, float %3766, i64 0, !dbg !117
  %3948 = insertelement <4 x float> %3947, float %3767, i64 1, !dbg !117
  %3949 = insertelement <4 x float> %3948, float %3768, i64 2, !dbg !117
  %3950 = insertelement <4 x float> %3949, float %3769, i64 3, !dbg !117
  %3951 = fcmp ogt <4 x float> %3950, splat (float -1.270000e+02), !dbg !117
  %3952 = fcmp uno <4 x float> %3950, zeroinitializer, !dbg !119
  %3953 = or <4 x i1> %3951, %3952, !dbg !120
  %3954 = select <4 x i1> %3953, <4 x float> %3950, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3955 = fcmp olt <4 x float> %3954, splat (float 1.270000e+02), !dbg !122
  %3956 = fcmp uno <4 x float> %3954, zeroinitializer, !dbg !124
  %3957 = or <4 x i1> %3955, %3956, !dbg !125
  %3958 = fptosi <4 x float> %3954 to <4 x i8>, !dbg !126
  %3959 = select <4 x i1> %3957, <4 x i8> %3958, <4 x i8> splat (i8 127), !dbg !127
  %3960 = insertelement <4 x float> poison, float %3770, i64 0, !dbg !117
  %3961 = insertelement <4 x float> %3960, float %3771, i64 1, !dbg !117
  %3962 = insertelement <4 x float> %3961, float %3772, i64 2, !dbg !117
  %3963 = insertelement <4 x float> %3962, float %3773, i64 3, !dbg !117
  %3964 = fcmp ogt <4 x float> %3963, splat (float -1.270000e+02), !dbg !117
  %3965 = fcmp uno <4 x float> %3963, zeroinitializer, !dbg !119
  %3966 = or <4 x i1> %3964, %3965, !dbg !120
  %3967 = select <4 x i1> %3966, <4 x float> %3963, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3968 = fcmp olt <4 x float> %3967, splat (float 1.270000e+02), !dbg !122
  %3969 = fcmp uno <4 x float> %3967, zeroinitializer, !dbg !124
  %3970 = or <4 x i1> %3968, %3969, !dbg !125
  %3971 = fptosi <4 x float> %3967 to <4 x i8>, !dbg !126
  %3972 = select <4 x i1> %3970, <4 x i8> %3971, <4 x i8> splat (i8 127), !dbg !127
  %3973 = insertelement <4 x float> poison, float %3774, i64 0, !dbg !117
  %3974 = insertelement <4 x float> %3973, float %3775, i64 1, !dbg !117
  %3975 = insertelement <4 x float> %3974, float %3776, i64 2, !dbg !117
  %3976 = insertelement <4 x float> %3975, float %3777, i64 3, !dbg !117
  %3977 = fcmp ogt <4 x float> %3976, splat (float -1.270000e+02), !dbg !117
  %3978 = fcmp uno <4 x float> %3976, zeroinitializer, !dbg !119
  %3979 = or <4 x i1> %3977, %3978, !dbg !120
  %3980 = select <4 x i1> %3979, <4 x float> %3976, <4 x float> splat (float -1.270000e+02), !dbg !121
  %3981 = fcmp olt <4 x float> %3980, splat (float 1.270000e+02), !dbg !122
  %3982 = fcmp uno <4 x float> %3980, zeroinitializer, !dbg !124
  %3983 = or <4 x i1> %3981, %3982, !dbg !125
  %3984 = fptosi <4 x float> %3980 to <4 x i8>, !dbg !126
  %3985 = select <4 x i1> %3983, <4 x i8> %3984, <4 x i8> splat (i8 127), !dbg !127
  %3986 = getelementptr i8, ptr addrspace(1) %12, i64 %50, !dbg !128
  %3987 = getelementptr i8, ptr addrspace(1) %12, i64 %54, !dbg !128
  %3988 = getelementptr i8, ptr addrspace(1) %12, i64 %58, !dbg !128
  %3989 = getelementptr i8, ptr addrspace(1) %12, i64 %62, !dbg !128
  %3990 = bitcast <4 x i8> %3790 to i32, !dbg !129
  %3991 = bitcast <4 x i8> %3803 to i32, !dbg !129
  %3992 = bitcast <4 x i8> %3816 to i32, !dbg !129
  %3993 = bitcast <4 x i8> %3829 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3990, i32 %3991, i32 %3992, i32 %3993, ptr addrspace(1) %3986, i1 %66) #5, !dbg !129
  %3994 = bitcast <4 x i8> %3842 to i32, !dbg !129
  %3995 = bitcast <4 x i8> %3855 to i32, !dbg !129
  %3996 = bitcast <4 x i8> %3868 to i32, !dbg !129
  %3997 = bitcast <4 x i8> %3881 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3994, i32 %3995, i32 %3996, i32 %3997, ptr addrspace(1) %3987, i1 %66) #5, !dbg !129
  %3998 = bitcast <4 x i8> %3894 to i32, !dbg !129
  %3999 = bitcast <4 x i8> %3907 to i32, !dbg !129
  %4000 = bitcast <4 x i8> %3920 to i32, !dbg !129
  %4001 = bitcast <4 x i8> %3933 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3998, i32 %3999, i32 %4000, i32 %4001, ptr addrspace(1) %3988, i1 %66) #5, !dbg !129
  %4002 = bitcast <4 x i8> %3946 to i32, !dbg !129
  %4003 = bitcast <4 x i8> %3959 to i32, !dbg !129
  %4004 = bitcast <4 x i8> %3972 to i32, !dbg !129
  %4005 = bitcast <4 x i8> %3985 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %4002, i32 %4003, i32 %4004, i32 %4005, ptr addrspace(1) %3989, i1 %66) #5, !dbg !129
  %4006 = getelementptr i8, ptr addrspace(1) %13, i64 %50, !dbg !130
  %4007 = getelementptr i8, ptr addrspace(1) %13, i64 %54, !dbg !130
  %4008 = getelementptr i8, ptr addrspace(1) %13, i64 %58, !dbg !130
  %4009 = getelementptr i8, ptr addrspace(1) %13, i64 %62, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3990, i32 %3991, i32 %3992, i32 %3993, ptr addrspace(1) %4006, i1 %66) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3994, i32 %3995, i32 %3996, i32 %3997, ptr addrspace(1) %4007, i1 %66) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3998, i32 %3999, i32 %4000, i32 %4001, ptr addrspace(1) %4008, i1 %66) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %4002, i32 %4003, i32 %4004, i32 %4005, ptr addrspace(1) %4009, i1 %66) #5, !dbg !131
  %4010 = getelementptr i8, ptr addrspace(1) %14, i64 %50, !dbg !132
  %4011 = getelementptr i8, ptr addrspace(1) %14, i64 %54, !dbg !132
  %4012 = getelementptr i8, ptr addrspace(1) %14, i64 %58, !dbg !132
  %4013 = getelementptr i8, ptr addrspace(1) %14, i64 %62, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3990, i32 %3991, i32 %3992, i32 %3993, ptr addrspace(1) %4010, i1 %66) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3994, i32 %3995, i32 %3996, i32 %3997, ptr addrspace(1) %4011, i1 %66) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3998, i32 %3999, i32 %4000, i32 %4001, ptr addrspace(1) %4012, i1 %66) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %4002, i32 %4003, i32 %4004, i32 %4005, ptr addrspace(1) %4013, i1 %66) #5, !dbg !133
  %4014 = getelementptr i8, ptr addrspace(1) %15, i64 %50, !dbg !134
  %4015 = getelementptr i8, ptr addrspace(1) %15, i64 %54, !dbg !134
  %4016 = getelementptr i8, ptr addrspace(1) %15, i64 %58, !dbg !134
  %4017 = getelementptr i8, ptr addrspace(1) %15, i64 %62, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3990, i32 %3991, i32 %3992, i32 %3993, ptr addrspace(1) %4014, i1 %66) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3994, i32 %3995, i32 %3996, i32 %3997, ptr addrspace(1) %4015, i1 %66) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3998, i32 %3999, i32 %4000, i32 %4001, ptr addrspace(1) %4016, i1 %66) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %4002, i32 %4003, i32 %4004, i32 %4005, ptr addrspace(1) %4017, i1 %66) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
