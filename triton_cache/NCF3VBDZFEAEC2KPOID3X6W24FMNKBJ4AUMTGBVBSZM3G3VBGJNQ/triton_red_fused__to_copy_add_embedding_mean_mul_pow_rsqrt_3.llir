; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/nr/cnrwnyaooqkqtvjvri2mderlw7g6ktdxj3v5biazr4t4ynrqt4jg.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !10 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = icmp slt i32 %9, 512, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = shl i32 %11, 2, !dbg !13
  %13 = and i32 %12, 2044, !dbg !13
  %14 = sext i32 %9 to i64, !dbg !14
  %15 = getelementptr i64, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %15, i1 %10) #6, !dbg !15
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %15, i1 %10) #6, !dbg !15
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %15, i1 %10) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %15, i1 %10) #6, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %15, i1 %10) #6, !dbg !15
  %21 = shl i32 %9, 12, !dbg !16
  %22 = add i64 %20, 32128, !dbg !17
  %23 = icmp slt i64 %20, 0, !dbg !18
  %24 = select i1 %23, i64 %22, i64 %20, !dbg !19
  %25 = icmp ugt i64 %24, 32127, !dbg !20
  %.not3 = and i1 %10, %25, !dbg !21
  %invariant.op = or disjoint i32 %13, %21, !dbg !22
  %26 = zext nneg i32 %13 to i64, !dbg !22
  %27 = sext i32 %invariant.op to i64, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !23
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %10) #6, !dbg !24
  br i1 %.not3, label %30, label %__nv_rsqrtf.exit, !dbg !25

30:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

__nv_rsqrtf.exit:                                 ; preds = %8
  %31 = icmp slt i64 %19, 0, !dbg !18
  %32 = shl i64 %19, 12, !dbg !21
  %33 = add i64 %32, 131596288, !dbg !21
  %34 = select i1 %31, i64 %33, i64 %32, !dbg !21
  %35 = getelementptr bfloat, ptr addrspace(1) %1, i64 %34
  %36 = lshr i32 %11, 5, !dbg !13
  %37 = and i32 %11, 31, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %38 = getelementptr bfloat, ptr addrspace(1) %35, i64 %26, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %10) #6, !dbg !27
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %40 = sext i32 %.reass.1 to i64, !dbg !23
  %41 = getelementptr bfloat, ptr addrspace(1) %2, i64 %40, !dbg !23
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %10) #6, !dbg !24
  %43 = extractvalue { i32, i32 } %29, 1, !dbg !24
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !24
  %45 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !27
  %47 = extractvalue { i32, i32 } %29, 0, !dbg !24
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !24
  %49 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !27
  %51 = or disjoint i64 %26, 2048, !dbg !28
  %52 = extractvalue { i32, i32 } %42, 1, !dbg !24
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !24
  %54 = extractvalue { i32, i32 } %42, 0, !dbg !24
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %56 = getelementptr bfloat, ptr addrspace(1) %35, i64 %51, !dbg !26
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %10) #6, !dbg !27
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !27
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !27
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !27
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !27
  %62 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !29
  %63 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !30
  %64 = fadd <2 x float> %62, %63, !dbg !31
  %65 = fmul <2 x float> %64, %64, !dbg !32
  %66 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !29
  %67 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !30
  %68 = fadd <2 x float> %66, %67, !dbg !31
  %69 = fmul <2 x float> %68, %68, !dbg !32
  %70 = fadd <2 x float> %65, %69, !dbg !33
  %71 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !29
  %72 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !30
  %73 = fadd <2 x float> %71, %72, !dbg !31
  %74 = fmul <2 x float> %73, %73, !dbg !32
  %75 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !29
  %76 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !30
  %77 = fadd <2 x float> %75, %76, !dbg !31
  %78 = fmul <2 x float> %77, %77, !dbg !32
  %79 = fadd <2 x float> %74, %78, !dbg !33
  %shift = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %80 = fadd <2 x float> %70, %shift, !dbg !34
  %81 = fadd <2 x float> %79, %80, !dbg !34
  %shift20 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %82 = fadd <2 x float> %shift20, %81, !dbg !34
  %83 = extractelement <2 x float> %82, i64 0, !dbg !34
  %84 = select i1 %10, float %83, float 0.000000e+00, !dbg !34
  %85 = bitcast float %84 to i32, !dbg !39
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !39
  %87 = bitcast i32 %86 to float, !dbg !39
  %88 = fadd float %84, %87, !dbg !34
  %89 = bitcast float %88 to i32, !dbg !39
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = fadd float %88, %91, !dbg !34
  %93 = bitcast float %92 to i32, !dbg !39
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = fadd float %92, %95, !dbg !34
  %97 = bitcast float %96 to i32, !dbg !39
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !39
  %99 = bitcast i32 %98 to float, !dbg !39
  %100 = fadd float %96, %99, !dbg !34
  %101 = bitcast float %100 to i32, !dbg !39
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !39
  %103 = bitcast i32 %102 to float, !dbg !39
  %104 = fadd float %100, %103, !dbg !34
  %105 = and i32 %36, 15, !dbg !39
  %106 = icmp eq i32 %37, 0, !dbg !39
  %107 = zext nneg i32 %105 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107, !dbg !39
  %109 = bitcast float %104 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %106) #6, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %110 = icmp slt i32 %11, 16, !dbg !39
  %111 = sext i32 %11 to i64, !dbg !39
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !39
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %112, i1 %110) #6, !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !39
  %116 = bitcast i32 %115 to float, !dbg !39
  %117 = fadd float %114, %116, !dbg !34
  %118 = bitcast float %117 to i32, !dbg !39
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !39
  %120 = bitcast i32 %119 to float, !dbg !39
  %121 = fadd float %117, %120, !dbg !34
  %122 = bitcast float %121 to i32, !dbg !39
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = fadd float %121, %124, !dbg !34
  %126 = bitcast float %125 to i32, !dbg !39
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !39
  %128 = bitcast i32 %127 to float, !dbg !39
  %129 = fadd float %125, %128, !dbg !34
  %130 = and i32 %11, 15, !dbg !39
  %131 = icmp eq i32 %130, 0, !dbg !39
  %132 = and i1 %110, %131, !dbg !39
  %133 = bitcast float %129 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %133, i1 %132) #6, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %135 = tail call float @llvm.nvvm.div.full(float %134, float 4.096000e+03), !dbg !40
  %136 = fadd float %135, 0x3EB0C6F7A0000000, !dbg !41
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !42
  %.not.i10 = icmp eq i32 %140, 0, !dbg !42
  br i1 %.not.i10, label %143, label %141, !dbg !42

141:                                              ; preds = %__nv_rsqrtf.exit
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !42
  br label %145, !dbg !42

143:                                              ; preds = %__nv_rsqrtf.exit
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !42
  br label %145, !dbg !42

145:                                              ; preds = %141, %143
  %.0.i11 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !42
  %146 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !43
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %146, i1 true) #6, !dbg !44
  %148 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %10) #6, !dbg !45
  %149 = extractvalue { i32, i32 } %148, 1, !dbg !45
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !45
  %151 = extractvalue { i32, i32 } %148, 0, !dbg !45
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !45
  %153 = extractvalue { i32, i32 } %147, 1, !dbg !44
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !44
  %155 = extractvalue { i32, i32 } %147, 0, !dbg !44
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %10) #6, !dbg !47
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !47
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !47
  %160 = extractvalue { i32, i32 } %157, 1, !dbg !47
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !47
  %162 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !48
  %163 = fpext <2 x bfloat> %152 to <2 x float>, !dbg !49
  %164 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !50
  %165 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !51
  %166 = fadd <2 x float> %163, %165, !dbg !52
  %167 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !53
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %169 = fmul <2 x float> %168, %166, !dbg !53
  %170 = fmul <2 x float> %169, %164, !dbg !54
  %171 = fptrunc <2 x float> %170 to <2 x bfloat>, !dbg !55
  %172 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !49
  %173 = fpext <2 x bfloat> %154 to <2 x float>, !dbg !50
  %174 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !51
  %175 = fadd <2 x float> %172, %174, !dbg !52
  %176 = fmul <2 x float> %168, %175, !dbg !53
  %177 = fmul <2 x float> %176, %173, !dbg !54
  %178 = fptrunc <2 x float> %177 to <2 x bfloat>, !dbg !55
  %179 = bitcast <2 x bfloat> %171 to i32, !dbg !55
  %180 = bitcast <2 x bfloat> %178 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %162, i1 %10) #6, !dbg !55
  %181 = getelementptr bfloat, ptr addrspace(1) %3, i64 %51, !dbg !43
  %182 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %181, i1 true) #6, !dbg !44
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %10) #6, !dbg !45
  %184 = extractvalue { i32, i32 } %183, 1, !dbg !45
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !45
  %186 = extractvalue { i32, i32 } %183, 0, !dbg !45
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !45
  %188 = extractvalue { i32, i32 } %182, 1, !dbg !44
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !44
  %190 = extractvalue { i32, i32 } %182, 0, !dbg !44
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %192 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %10) #6, !dbg !47
  %193 = extractvalue { i32, i32 } %192, 0, !dbg !47
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !47
  %195 = extractvalue { i32, i32 } %192, 1, !dbg !47
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !47
  %197 = getelementptr bfloat, ptr addrspace(1) %4, i64 %40, !dbg !48
  %198 = fpext <2 x bfloat> %187 to <2 x float>, !dbg !49
  %199 = fpext <2 x bfloat> %191 to <2 x float>, !dbg !50
  %200 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !51
  %201 = fadd <2 x float> %198, %200, !dbg !52
  %202 = fmul <2 x float> %168, %201, !dbg !53
  %203 = fmul <2 x float> %202, %199, !dbg !54
  %204 = fptrunc <2 x float> %203 to <2 x bfloat>, !dbg !55
  %205 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !49
  %206 = fpext <2 x bfloat> %189 to <2 x float>, !dbg !50
  %207 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !51
  %208 = fadd <2 x float> %205, %207, !dbg !52
  %209 = fmul <2 x float> %168, %208, !dbg !53
  %210 = fmul <2 x float> %209, %206, !dbg !54
  %211 = fptrunc <2 x float> %210 to <2 x bfloat>, !dbg !55
  %212 = bitcast <2 x bfloat> %204 to i32, !dbg !55
  %213 = bitcast <2 x bfloat> %211 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %197, i1 %10) #6, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnrwnyaooqkqtvjvri2mderlw7g6ktdxj3v5biazr4t4ynrqt4jg.py", directory: "/tmp/torchinductor_root/nr")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_3, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_3", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_3", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 25, column: 21, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 29, column: 30, scope: !10)
!15 = !DILocation(line: 29, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 46, scope: !10)
!17 = !DILocation(line: 39, column: 22, scope: !10)
!18 = !DILocation(line: 40, column: 22, scope: !10)
!19 = !DILocation(line: 41, column: 36, scope: !10)
!20 = !DILocation(line: 42, column: 41, scope: !10)
!21 = !DILocation(line: 43, column: 46, scope: !10)
!22 = !DILocation(line: 31, column: 40, scope: !10)
!23 = !DILocation(line: 37, column: 34, scope: !10)
!24 = !DILocation(line: 37, column: 51, scope: !10)
!25 = !DILocation(line: 42, column: 68, scope: !10)
!26 = !DILocation(line: 43, column: 34, scope: !10)
!27 = !DILocation(line: 43, column: 53, scope: !10)
!28 = !DILocation(line: 32, column: 31, scope: !10)
!29 = !DILocation(line: 37, column: 112, scope: !10)
!30 = !DILocation(line: 43, column: 114, scope: !10)
!31 = !DILocation(line: 44, column: 22, scope: !10)
!32 = !DILocation(line: 46, column: 23, scope: !10)
!33 = !DILocation(line: 48, column: 25, scope: !10)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !10, file: !36, discriminator: 0)
!38 = !DILocation(line: 50, column: 27, scope: !10)
!39 = !DILocation(line: 286, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 68, column: 25, scope: !10)
!41 = !DILocation(line: 70, column: 24, scope: !10)
!42 = !DILocation(line: 71, column: 32, scope: !10)
!43 = !DILocation(line: 57, column: 35, scope: !10)
!44 = !DILocation(line: 57, column: 42, scope: !10)
!45 = !DILocation(line: 58, column: 52, scope: !10)
!46 = !DILocation(line: 63, column: 70, scope: !10)
!47 = !DILocation(line: 64, column: 55, scope: !10)
!48 = !DILocation(line: 75, column: 29, scope: !10)
!49 = !DILocation(line: 58, column: 114, scope: !10)
!50 = !DILocation(line: 57, column: 95, scope: !10)
!51 = !DILocation(line: 64, column: 117, scope: !10)
!52 = !DILocation(line: 65, column: 24, scope: !10)
!53 = !DILocation(line: 72, column: 24, scope: !10)
!54 = !DILocation(line: 74, column: 24, scope: !10)
!55 = !DILocation(line: 75, column: 53, scope: !10)
!56 = !DILocation(line: 51, column: 4, scope: !10)
