; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 18432, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = mul i32 %9, 3072, !dbg !12
  %15 = zext nneg i32 %13 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %16, i1 true) #4, !dbg !15
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = extractvalue { i32, i32 } %17, 1, !dbg !15
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !15
  %22 = extractelement <2 x bfloat> %19, i64 0, !dbg !15
  %23 = extractelement <2 x bfloat> %19, i64 1, !dbg !15
  %24 = extractelement <2 x bfloat> %21, i64 0, !dbg !15
  %25 = extractelement <2 x bfloat> %21, i64 1, !dbg !15
  %26 = fpext bfloat %22 to float, !dbg !16
  %27 = fpext bfloat %23 to float, !dbg !16
  %28 = fpext bfloat %24 to float, !dbg !16
  %29 = fpext bfloat %25 to float, !dbg !16
  %30 = add i32 %13, %14, !dbg !17
  %31 = sext i32 %30 to i64, !dbg !18
  %32 = getelementptr bfloat, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %10) #4, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !19
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = extractelement <2 x bfloat> %35, i64 0, !dbg !19
  %39 = extractelement <2 x bfloat> %35, i64 1, !dbg !19
  %40 = extractelement <2 x bfloat> %37, i64 0, !dbg !19
  %41 = extractelement <2 x bfloat> %37, i64 1, !dbg !19
  %42 = fpext bfloat %38 to float, !dbg !20
  %43 = fpext bfloat %39 to float, !dbg !20
  %44 = fpext bfloat %40 to float, !dbg !20
  %45 = fpext bfloat %41 to float, !dbg !20
  %46 = getelementptr bfloat, ptr addrspace(1) %2, i64 %31, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %10) #4, !dbg !22
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !22
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !22
  %50 = extractvalue { i32, i32 } %47, 1, !dbg !22
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !22
  %52 = extractelement <2 x bfloat> %49, i64 0, !dbg !22
  %53 = extractelement <2 x bfloat> %49, i64 1, !dbg !22
  %54 = extractelement <2 x bfloat> %51, i64 0, !dbg !22
  %55 = extractelement <2 x bfloat> %51, i64 1, !dbg !22
  %56 = fpext bfloat %52 to float, !dbg !23
  %57 = fpext bfloat %53 to float, !dbg !23
  %58 = fpext bfloat %54 to float, !dbg !23
  %59 = fpext bfloat %55 to float, !dbg !23
  %60 = fsub float 0.000000e+00, %26, !dbg !24
  %61 = fsub float 0.000000e+00, %27, !dbg !24
  %62 = fsub float 0.000000e+00, %28, !dbg !24
  %63 = fsub float 0.000000e+00, %29, !dbg !24
  %64 = fmul float %60, 0x3FF7154760000000, !dbg !28
  %65 = tail call float @llvm.nvvm.ex2.approx.f(float %64), !dbg !28
  %66 = fmul float %61, 0x3FF7154760000000, !dbg !28
  %67 = tail call float @llvm.nvvm.ex2.approx.f(float %66), !dbg !28
  %68 = fmul float %62, 0x3FF7154760000000, !dbg !28
  %69 = tail call float @llvm.nvvm.ex2.approx.f(float %68), !dbg !28
  %70 = fmul float %63, 0x3FF7154760000000, !dbg !28
  %71 = tail call float @llvm.nvvm.ex2.approx.f(float %70), !dbg !28
  %72 = fadd float %65, 1.000000e+00, !dbg !29
  %73 = fadd float %67, 1.000000e+00, !dbg !29
  %74 = fadd float %69, 1.000000e+00, !dbg !29
  %75 = fadd float %71, 1.000000e+00, !dbg !29
  %76 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %72), !dbg !30
  %77 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %73), !dbg !30
  %78 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %74), !dbg !30
  %79 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !30
  %80 = fmul float %76, %26, !dbg !31
  %81 = fmul float %77, %27, !dbg !31
  %82 = fmul float %78, %28, !dbg !31
  %83 = fmul float %79, %29, !dbg !31
  %84 = fmul float %80, %42, !dbg !32
  %85 = fmul float %81, %43, !dbg !32
  %86 = fmul float %82, %44, !dbg !32
  %87 = fmul float %83, %45, !dbg !32
  %88 = fadd float %84, 0.000000e+00, !dbg !33
  %89 = fadd float %85, 0.000000e+00, !dbg !33
  %90 = fadd float %86, 0.000000e+00, !dbg !33
  %91 = fadd float %87, 0.000000e+00, !dbg !33
  %92 = select i1 %10, float %88, float 0.000000e+00, !dbg !34
  %93 = select i1 %10, float %89, float 0.000000e+00, !dbg !34
  %94 = select i1 %10, float %90, float 0.000000e+00, !dbg !34
  %95 = select i1 %10, float %91, float 0.000000e+00, !dbg !34
  %96 = fmul float %80, %56, !dbg !35
  %97 = fmul float %81, %57, !dbg !35
  %98 = fmul float %82, %58, !dbg !35
  %99 = fmul float %83, %59, !dbg !35
  %100 = fadd float %96, 0.000000e+00, !dbg !36
  %101 = fadd float %97, 0.000000e+00, !dbg !36
  %102 = fadd float %98, 0.000000e+00, !dbg !36
  %103 = fadd float %99, 0.000000e+00, !dbg !36
  %104 = select i1 %10, float %100, float 0.000000e+00, !dbg !37
  %105 = select i1 %10, float %101, float 0.000000e+00, !dbg !37
  %106 = select i1 %10, float %102, float 0.000000e+00, !dbg !37
  %107 = select i1 %10, float %103, float 0.000000e+00, !dbg !37
  %108 = or disjoint i64 %15, 2048, !dbg !38
  %109 = icmp samesign ult i64 %108, 3072, !dbg !39
  %110 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !14
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %110, i1 %109) #4, !dbg !15
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !15
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !15
  %114 = extractvalue { i32, i32 } %111, 1, !dbg !15
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !15
  %116 = extractelement <2 x bfloat> %113, i64 0, !dbg !15
  %117 = extractelement <2 x bfloat> %113, i64 1, !dbg !15
  %118 = extractelement <2 x bfloat> %115, i64 0, !dbg !15
  %119 = extractelement <2 x bfloat> %115, i64 1, !dbg !15
  %120 = fpext bfloat %116 to float, !dbg !16
  %121 = fpext bfloat %117 to float, !dbg !16
  %122 = fpext bfloat %118 to float, !dbg !16
  %123 = fpext bfloat %119 to float, !dbg !16
  %124 = trunc nuw nsw i64 %108 to i32, !dbg !17
  %125 = add i32 %14, %124, !dbg !17
  %126 = sext i32 %125 to i64, !dbg !18
  %127 = getelementptr bfloat, ptr addrspace(1) %1, i64 %126, !dbg !18
  %128 = and i1 %10, %109, !dbg !40
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %127, i1 %128) #4, !dbg !19
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !19
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !19
  %132 = extractvalue { i32, i32 } %129, 1, !dbg !19
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !19
  %134 = extractelement <2 x bfloat> %131, i64 0, !dbg !19
  %135 = extractelement <2 x bfloat> %131, i64 1, !dbg !19
  %136 = extractelement <2 x bfloat> %133, i64 0, !dbg !19
  %137 = extractelement <2 x bfloat> %133, i64 1, !dbg !19
  %138 = fpext bfloat %134 to float, !dbg !20
  %139 = fpext bfloat %135 to float, !dbg !20
  %140 = fpext bfloat %136 to float, !dbg !20
  %141 = fpext bfloat %137 to float, !dbg !20
  %142 = getelementptr bfloat, ptr addrspace(1) %2, i64 %126, !dbg !21
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %142, i1 %128) #4, !dbg !22
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !22
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !22
  %146 = extractvalue { i32, i32 } %143, 1, !dbg !22
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !22
  %148 = extractelement <2 x bfloat> %145, i64 0, !dbg !22
  %149 = extractelement <2 x bfloat> %145, i64 1, !dbg !22
  %150 = extractelement <2 x bfloat> %147, i64 0, !dbg !22
  %151 = extractelement <2 x bfloat> %147, i64 1, !dbg !22
  %152 = fpext bfloat %148 to float, !dbg !23
  %153 = fpext bfloat %149 to float, !dbg !23
  %154 = fpext bfloat %150 to float, !dbg !23
  %155 = fpext bfloat %151 to float, !dbg !23
  %156 = fsub float 0.000000e+00, %120, !dbg !24
  %157 = fsub float 0.000000e+00, %121, !dbg !24
  %158 = fsub float 0.000000e+00, %122, !dbg !24
  %159 = fsub float 0.000000e+00, %123, !dbg !24
  %160 = fmul float %156, 0x3FF7154760000000, !dbg !28
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !28
  %162 = fmul float %157, 0x3FF7154760000000, !dbg !28
  %163 = tail call float @llvm.nvvm.ex2.approx.f(float %162), !dbg !28
  %164 = fmul float %158, 0x3FF7154760000000, !dbg !28
  %165 = tail call float @llvm.nvvm.ex2.approx.f(float %164), !dbg !28
  %166 = fmul float %159, 0x3FF7154760000000, !dbg !28
  %167 = tail call float @llvm.nvvm.ex2.approx.f(float %166), !dbg !28
  %168 = fadd float %161, 1.000000e+00, !dbg !29
  %169 = fadd float %163, 1.000000e+00, !dbg !29
  %170 = fadd float %165, 1.000000e+00, !dbg !29
  %171 = fadd float %167, 1.000000e+00, !dbg !29
  %172 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %168), !dbg !30
  %173 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %169), !dbg !30
  %174 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %170), !dbg !30
  %175 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %171), !dbg !30
  %176 = fmul float %172, %120, !dbg !31
  %177 = fmul float %173, %121, !dbg !31
  %178 = fmul float %174, %122, !dbg !31
  %179 = fmul float %175, %123, !dbg !31
  %180 = fmul float %176, %138, !dbg !32
  %181 = fmul float %177, %139, !dbg !32
  %182 = fmul float %178, %140, !dbg !32
  %183 = fmul float %179, %141, !dbg !32
  %184 = fadd float %92, %180, !dbg !33
  %185 = fadd float %93, %181, !dbg !33
  %186 = fadd float %94, %182, !dbg !33
  %187 = fadd float %95, %183, !dbg !33
  %188 = select i1 %128, float %184, float %92, !dbg !34
  %189 = select i1 %128, float %185, float %93, !dbg !34
  %190 = select i1 %128, float %186, float %94, !dbg !34
  %191 = select i1 %128, float %187, float %95, !dbg !34
  %192 = fmul float %176, %152, !dbg !35
  %193 = fmul float %177, %153, !dbg !35
  %194 = fmul float %178, %154, !dbg !35
  %195 = fmul float %179, %155, !dbg !35
  %196 = fadd float %104, %192, !dbg !36
  %197 = fadd float %105, %193, !dbg !36
  %198 = fadd float %106, %194, !dbg !36
  %199 = fadd float %107, %195, !dbg !36
  %200 = select i1 %128, float %196, float %104, !dbg !37
  %201 = select i1 %128, float %197, float %105, !dbg !37
  %202 = select i1 %128, float %198, float %106, !dbg !37
  %203 = select i1 %128, float %199, float %107, !dbg !37
  %204 = lshr i32 %11, 5, !dbg !11
  %205 = and i32 %11, 31, !dbg !11
  %206 = fadd float %188, %189, !dbg !41
  %207 = fadd float %190, %206, !dbg !41
  %208 = fadd float %191, %207, !dbg !41
  %209 = bitcast float %208 to i32, !dbg !44
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !44
  %211 = bitcast i32 %210 to float, !dbg !44
  %212 = fadd float %208, %211, !dbg !41
  %213 = bitcast float %212 to i32, !dbg !44
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !44
  %215 = bitcast i32 %214 to float, !dbg !44
  %216 = fadd float %212, %215, !dbg !41
  %217 = bitcast float %216 to i32, !dbg !44
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = fadd float %216, %219, !dbg !41
  %221 = bitcast float %220 to i32, !dbg !44
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !44
  %223 = bitcast i32 %222 to float, !dbg !44
  %224 = fadd float %220, %223, !dbg !41
  %225 = bitcast float %224 to i32, !dbg !44
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = fadd float %224, %227, !dbg !41
  %229 = and i32 %204, 15, !dbg !44
  %230 = icmp eq i32 %205, 0, !dbg !44
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !44
  %232 = bitcast float %228 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 %230) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %233 = icmp slt i32 %11, 16, !dbg !44
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !44
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %233) #4, !dbg !44
  %236 = bitcast i32 %235 to float, !dbg !44
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !44
  %238 = bitcast i32 %237 to float, !dbg !44
  %239 = fadd float %236, %238, !dbg !41
  %240 = bitcast float %239 to i32, !dbg !44
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !44
  %242 = bitcast i32 %241 to float, !dbg !44
  %243 = fadd float %239, %242, !dbg !41
  %244 = bitcast float %243 to i32, !dbg !44
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !44
  %246 = bitcast i32 %245 to float, !dbg !44
  %247 = fadd float %243, %246, !dbg !41
  %248 = bitcast float %247 to i32, !dbg !44
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !44
  %250 = bitcast i32 %249 to float, !dbg !44
  %251 = fadd float %247, %250, !dbg !41
  %252 = and i32 %11, 15, !dbg !44
  %253 = icmp eq i32 %252, 0, !dbg !44
  %254 = and i1 %233, %253, !dbg !44
  %255 = bitcast float %251 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %255, i1 %254) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %256 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %257 = fadd float %200, %201, !dbg !47
  %258 = fadd float %202, %257, !dbg !47
  %259 = fadd float %203, %258, !dbg !47
  %260 = bitcast float %259 to i32, !dbg !45
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 16, i32 31), !dbg !45
  %262 = bitcast i32 %261 to float, !dbg !45
  %263 = fadd float %259, %262, !dbg !47
  %264 = bitcast float %263 to i32, !dbg !45
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !45
  %266 = bitcast i32 %265 to float, !dbg !45
  %267 = fadd float %263, %266, !dbg !47
  %268 = bitcast float %267 to i32, !dbg !45
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !45
  %270 = bitcast i32 %269 to float, !dbg !45
  %271 = fadd float %267, %270, !dbg !47
  %272 = bitcast float %271 to i32, !dbg !45
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !45
  %274 = bitcast i32 %273 to float, !dbg !45
  %275 = fadd float %271, %274, !dbg !47
  %276 = bitcast float %275 to i32, !dbg !45
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !45
  %278 = bitcast i32 %277 to float, !dbg !45
  %279 = fadd float %275, %278, !dbg !47
  %280 = bitcast float %279 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %280, i1 %230) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %281 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %233) #4, !dbg !45
  %282 = bitcast i32 %281 to float, !dbg !45
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 8, i32 31), !dbg !45
  %284 = bitcast i32 %283 to float, !dbg !45
  %285 = fadd float %282, %284, !dbg !47
  %286 = bitcast float %285 to i32, !dbg !45
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !45
  %288 = bitcast i32 %287 to float, !dbg !45
  %289 = fadd float %285, %288, !dbg !47
  %290 = bitcast float %289 to i32, !dbg !45
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !45
  %292 = bitcast i32 %291 to float, !dbg !45
  %293 = fadd float %289, %292, !dbg !47
  %294 = bitcast float %293 to i32, !dbg !45
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !45
  %296 = bitcast i32 %295 to float, !dbg !45
  %297 = fadd float %293, %296, !dbg !47
  %298 = bitcast float %297 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %298, i1 %254) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %299 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %300 = sext i32 %9 to i64, !dbg !48
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %300, !dbg !48
  %302 = and i32 %11, 511, !dbg !49
  %303 = icmp eq i32 %302, 0, !dbg !49
  %304 = and i1 %10, %303, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %256, ptr addrspace(1) %301, i1 %304) #4, !dbg !49
  %305 = getelementptr float, ptr addrspace(1) %4, i64 %300, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %305, i1 %304) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdejrfyv2kwed44vpldu3lq3fqyqqztaloewcb735r6wirux7ab.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 34, scope: !6)
!15 = !DILocation(line: 37, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 94, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 113, scope: !6)
!21 = !DILocation(line: 39, column: 35, scope: !6)
!22 = !DILocation(line: 39, column: 52, scope: !6)
!23 = !DILocation(line: 39, column: 114, scope: !6)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 41, column: 26, scope: !6)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 42, column: 22, scope: !6)
!32 = !DILocation(line: 46, column: 22, scope: !6)
!33 = !DILocation(line: 48, column: 25, scope: !6)
!34 = !DILocation(line: 49, column: 50, scope: !6)
!35 = !DILocation(line: 51, column: 23, scope: !6)
!36 = !DILocation(line: 53, column: 25, scope: !6)
!37 = !DILocation(line: 54, column: 50, scope: !6)
!38 = !DILocation(line: 32, column: 31, scope: !6)
!39 = !DILocation(line: 33, column: 29, scope: !6)
!40 = !DILocation(line: 38, column: 59, scope: !6)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !43)
!42 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!43 = !DILocation(line: 55, column: 27, scope: !6)
!44 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !43)
!45 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !46)
!46 = !DILocation(line: 56, column: 27, scope: !6)
!47 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !46)
!48 = !DILocation(line: 57, column: 25, scope: !6)
!49 = !DILocation(line: 57, column: 37, scope: !6)
!50 = !DILocation(line: 58, column: 25, scope: !6)
!51 = !DILocation(line: 58, column: 37, scope: !6)
!52 = !DILocation(line: 58, column: 4, scope: !6)
