; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 5, !dbg !11
  %23 = and i32 %21, 256, !dbg !11
  %.lobit = lshr exact i32 %23, 8, !dbg !11
  %24 = and i32 %21, 31, !dbg !11
  %25 = or disjoint i32 %.lobit, %20, !dbg !12
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = icmp slt i32 %25, 4112, !dbg !13
  %28 = shl i32 %21, 3, !dbg !14
  %29 = and i32 %28, 4088, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = shl i32 %21, 4, !dbg !14
  %32 = and i32 %31, 4080, !dbg !14
  %33 = or disjoint i32 %32, 8, !dbg !14
  %34 = icmp samesign ult i32 %29, 3072, !dbg !15
  %35 = icmp samesign ult i32 %32, 3072, !dbg !15
  %36 = mul i32 %25, 3072, !dbg !16
  %37 = add i32 %36, %32, !dbg !17
  %38 = add i32 %33, %36, !dbg !17
  %39 = sext i32 %37 to i64, !dbg !18
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !18
  %41 = sext i32 %38 to i64, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !18
  %43 = and i1 %26, %34, !dbg !19
  %44 = and i1 %35, %27, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %44) #5, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !20
  %54 = extractelement <2 x bfloat> %47, i64 0, !dbg !20
  %55 = extractelement <2 x bfloat> %47, i64 1, !dbg !20
  %56 = extractelement <2 x bfloat> %49, i64 0, !dbg !20
  %57 = extractelement <2 x bfloat> %49, i64 1, !dbg !20
  %58 = extractelement <2 x bfloat> %51, i64 0, !dbg !20
  %59 = extractelement <2 x bfloat> %51, i64 1, !dbg !20
  %60 = extractelement <2 x bfloat> %53, i64 0, !dbg !20
  %61 = extractelement <2 x bfloat> %53, i64 1, !dbg !20
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %44) #5, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !20
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !20
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !20
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !20
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !20
  %71 = extractelement <2 x bfloat> %64, i64 0, !dbg !20
  %72 = extractelement <2 x bfloat> %64, i64 1, !dbg !20
  %73 = extractelement <2 x bfloat> %66, i64 0, !dbg !20
  %74 = extractelement <2 x bfloat> %66, i64 1, !dbg !20
  %75 = extractelement <2 x bfloat> %68, i64 0, !dbg !20
  %76 = extractelement <2 x bfloat> %68, i64 1, !dbg !20
  %77 = extractelement <2 x bfloat> %70, i64 0, !dbg !20
  %78 = extractelement <2 x bfloat> %70, i64 1, !dbg !20
  %79 = fpext bfloat %54 to float, !dbg !21
  %80 = fpext bfloat %55 to float, !dbg !21
  %81 = fpext bfloat %56 to float, !dbg !21
  %82 = fpext bfloat %57 to float, !dbg !21
  %83 = fpext bfloat %58 to float, !dbg !21
  %84 = fpext bfloat %59 to float, !dbg !21
  %85 = fpext bfloat %60 to float, !dbg !21
  %86 = fpext bfloat %61 to float, !dbg !21
  %87 = fpext bfloat %71 to float, !dbg !21
  %88 = fpext bfloat %72 to float, !dbg !21
  %89 = fpext bfloat %73 to float, !dbg !21
  %90 = fpext bfloat %74 to float, !dbg !21
  %91 = fpext bfloat %75 to float, !dbg !21
  %92 = fpext bfloat %76 to float, !dbg !21
  %93 = fpext bfloat %77 to float, !dbg !21
  %94 = fpext bfloat %78 to float, !dbg !21
  %95 = select i1 %44, float %79, float 0.000000e+00, !dbg !22
  %96 = select i1 %44, float %80, float 0.000000e+00, !dbg !22
  %97 = select i1 %44, float %81, float 0.000000e+00, !dbg !22
  %98 = select i1 %44, float %82, float 0.000000e+00, !dbg !22
  %99 = select i1 %44, float %83, float 0.000000e+00, !dbg !22
  %100 = select i1 %44, float %84, float 0.000000e+00, !dbg !22
  %101 = select i1 %44, float %85, float 0.000000e+00, !dbg !22
  %102 = select i1 %44, float %86, float 0.000000e+00, !dbg !22
  %103 = select i1 %44, float %87, float 0.000000e+00, !dbg !22
  %104 = select i1 %44, float %88, float 0.000000e+00, !dbg !22
  %105 = select i1 %44, float %89, float 0.000000e+00, !dbg !22
  %106 = select i1 %44, float %90, float 0.000000e+00, !dbg !22
  %107 = select i1 %44, float %91, float 0.000000e+00, !dbg !22
  %108 = select i1 %44, float %92, float 0.000000e+00, !dbg !22
  %109 = select i1 %44, float %93, float 0.000000e+00, !dbg !22
  %110 = select i1 %44, float %94, float 0.000000e+00, !dbg !22
  %111 = select i1 %44, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %112 = fsub float %96, %95, !dbg !24
  %113 = select i1 %44, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %114 = fcmp oeq float %113, 0.000000e+00, !dbg !30
  %115 = tail call float @llvm.nvvm.div.full(float %111, float %113), !dbg !31
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !32
  %117 = fmul float %116, %112, !dbg !33
  %118 = fadd float %95, %117, !dbg !34
  %119 = fmul float %112, %112, !dbg !35
  %120 = fmul float %111, %119, !dbg !36
  %121 = fmul float %116, %120, !dbg !37
  %122 = fadd float %121, 0.000000e+00, !dbg !38
  %123 = fsub float %97, %118, !dbg !24
  %124 = select i1 %44, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !30
  %126 = tail call float @llvm.nvvm.div.full(float %111, float %124), !dbg !31
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !32
  %128 = fmul float %127, %123, !dbg !33
  %129 = fadd float %118, %128, !dbg !34
  %130 = fmul float %123, %123, !dbg !35
  %131 = fmul float %113, %130, !dbg !36
  %132 = fmul float %127, %131, !dbg !37
  %133 = fadd float %122, %132, !dbg !38
  %134 = fsub float %98, %129, !dbg !24
  %135 = select i1 %44, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !30
  %137 = tail call float @llvm.nvvm.div.full(float %111, float %135), !dbg !31
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !32
  %139 = fmul float %138, %134, !dbg !33
  %140 = fadd float %129, %139, !dbg !34
  %141 = fmul float %134, %134, !dbg !35
  %142 = fmul float %124, %141, !dbg !36
  %143 = fmul float %138, %142, !dbg !37
  %144 = fadd float %133, %143, !dbg !38
  %145 = fsub float %99, %140, !dbg !24
  %146 = select i1 %44, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !30
  %148 = tail call float @llvm.nvvm.div.full(float %111, float %146), !dbg !31
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !32
  %150 = fmul float %149, %145, !dbg !33
  %151 = fadd float %140, %150, !dbg !34
  %152 = fmul float %145, %145, !dbg !35
  %153 = fmul float %135, %152, !dbg !36
  %154 = fmul float %149, %153, !dbg !37
  %155 = fadd float %144, %154, !dbg !38
  %156 = fsub float %100, %151, !dbg !24
  %157 = select i1 %44, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !30
  %159 = tail call float @llvm.nvvm.div.full(float %111, float %157), !dbg !31
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !32
  %161 = fmul float %160, %156, !dbg !33
  %162 = fadd float %151, %161, !dbg !34
  %163 = fmul float %156, %156, !dbg !35
  %164 = fmul float %146, %163, !dbg !36
  %165 = fmul float %160, %164, !dbg !37
  %166 = fadd float %155, %165, !dbg !38
  %167 = fsub float %101, %162, !dbg !24
  %168 = select i1 %44, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !30
  %170 = tail call float @llvm.nvvm.div.full(float %111, float %168), !dbg !31
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !32
  %172 = fmul float %171, %167, !dbg !33
  %173 = fadd float %162, %172, !dbg !34
  %174 = fmul float %167, %167, !dbg !35
  %175 = fmul float %157, %174, !dbg !36
  %176 = fmul float %171, %175, !dbg !37
  %177 = fadd float %166, %176, !dbg !38
  %178 = fsub float %102, %173, !dbg !24
  %179 = select i1 %44, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !30
  %181 = tail call float @llvm.nvvm.div.full(float %111, float %179), !dbg !31
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !32
  %183 = fmul float %182, %178, !dbg !33
  %184 = fadd float %173, %183, !dbg !34
  %185 = fmul float %178, %178, !dbg !35
  %186 = fmul float %168, %185, !dbg !36
  %187 = fmul float %182, %186, !dbg !37
  %188 = fadd float %177, %187, !dbg !38
  %189 = fsub float %103, %184, !dbg !24
  %190 = select i1 %44, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !30
  %192 = tail call float @llvm.nvvm.div.full(float %111, float %190), !dbg !31
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !32
  %194 = fmul float %193, %189, !dbg !33
  %195 = fadd float %184, %194, !dbg !34
  %196 = fadd float %188, 0.000000e+00, !dbg !39
  %197 = fmul float %189, %189, !dbg !35
  %198 = fmul float %179, %197, !dbg !36
  %199 = fmul float %193, %198, !dbg !37
  %200 = fadd float %196, %199, !dbg !38
  %201 = fsub float %104, %195, !dbg !24
  %202 = select i1 %44, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !30
  %204 = tail call float @llvm.nvvm.div.full(float %111, float %202), !dbg !31
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !32
  %206 = fmul float %205, %201, !dbg !33
  %207 = fadd float %195, %206, !dbg !34
  %208 = fmul float %201, %201, !dbg !35
  %209 = fmul float %190, %208, !dbg !36
  %210 = fmul float %205, %209, !dbg !37
  %211 = fadd float %200, %210, !dbg !38
  %212 = fsub float %105, %207, !dbg !24
  %213 = select i1 %44, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !30
  %215 = tail call float @llvm.nvvm.div.full(float %111, float %213), !dbg !31
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !32
  %217 = fmul float %216, %212, !dbg !33
  %218 = fadd float %207, %217, !dbg !34
  %219 = fmul float %212, %212, !dbg !35
  %220 = fmul float %202, %219, !dbg !36
  %221 = fmul float %216, %220, !dbg !37
  %222 = fadd float %211, %221, !dbg !38
  %223 = fsub float %106, %218, !dbg !24
  %224 = select i1 %44, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !30
  %226 = tail call float @llvm.nvvm.div.full(float %111, float %224), !dbg !31
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !32
  %228 = fmul float %227, %223, !dbg !33
  %229 = fadd float %218, %228, !dbg !34
  %230 = fmul float %223, %223, !dbg !35
  %231 = fmul float %213, %230, !dbg !36
  %232 = fmul float %227, %231, !dbg !37
  %233 = fadd float %222, %232, !dbg !38
  %234 = fsub float %107, %229, !dbg !24
  %235 = select i1 %44, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !30
  %237 = tail call float @llvm.nvvm.div.full(float %111, float %235), !dbg !31
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !32
  %239 = fmul float %238, %234, !dbg !33
  %240 = fadd float %229, %239, !dbg !34
  %241 = fmul float %234, %234, !dbg !35
  %242 = fmul float %224, %241, !dbg !36
  %243 = fmul float %238, %242, !dbg !37
  %244 = fadd float %233, %243, !dbg !38
  %245 = fsub float %108, %240, !dbg !24
  %246 = select i1 %44, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !30
  %248 = tail call float @llvm.nvvm.div.full(float %111, float %246), !dbg !31
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !32
  %250 = fmul float %249, %245, !dbg !33
  %251 = fadd float %240, %250, !dbg !34
  %252 = fmul float %245, %245, !dbg !35
  %253 = fmul float %235, %252, !dbg !36
  %254 = fmul float %249, %253, !dbg !37
  %255 = fadd float %244, %254, !dbg !38
  %256 = fsub float %109, %251, !dbg !24
  %257 = select i1 %44, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !30
  %259 = tail call float @llvm.nvvm.div.full(float %111, float %257), !dbg !31
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !32
  %261 = fmul float %260, %256, !dbg !33
  %262 = fadd float %251, %261, !dbg !34
  %263 = fadd float %255, 0.000000e+00, !dbg !39
  %264 = fmul float %256, %256, !dbg !35
  %265 = fmul float %246, %264, !dbg !36
  %266 = fmul float %260, %265, !dbg !37
  %267 = fadd float %263, %266, !dbg !38
  %268 = fsub float %110, %262, !dbg !24
  %269 = select i1 %44, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !30
  %271 = tail call float @llvm.nvvm.div.full(float %111, float %269), !dbg !31
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !32
  %273 = fmul float %272, %268, !dbg !33
  %274 = fadd float %262, %273, !dbg !34
  %275 = fmul float %268, %268, !dbg !35
  %276 = fmul float %257, %275, !dbg !36
  %277 = fmul float %272, %276, !dbg !37
  %278 = fadd float %267, %277, !dbg !38
  %279 = bitcast float %274 to i32, !dbg !40
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = bitcast float %278 to i32, !dbg !40
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !40
  %284 = bitcast i32 %283 to float, !dbg !40
  %285 = bitcast float %269 to i32, !dbg !40
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !40
  %287 = bitcast i32 %286 to float, !dbg !40
  %288 = fsub float %281, %274, !dbg !24
  %289 = fadd float %269, %287, !dbg !29
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !30
  %291 = tail call float @llvm.nvvm.div.full(float %287, float %289), !dbg !31
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !32
  %293 = fmul float %292, %288, !dbg !33
  %294 = fadd float %274, %293, !dbg !34
  %295 = fadd float %278, %284, !dbg !39
  %296 = fmul float %288, %288, !dbg !35
  %297 = fmul float %269, %296, !dbg !36
  %298 = fmul float %292, %297, !dbg !37
  %299 = fadd float %295, %298, !dbg !38
  %300 = bitcast float %294 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = bitcast float %299 to i32, !dbg !40
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = bitcast float %289 to i32, !dbg !40
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 8, i32 31), !dbg !40
  %308 = bitcast i32 %307 to float, !dbg !40
  %309 = fsub float %302, %294, !dbg !24
  %310 = fadd float %289, %308, !dbg !29
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !30
  %312 = tail call float @llvm.nvvm.div.full(float %308, float %310), !dbg !31
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !32
  %314 = fmul float %313, %309, !dbg !33
  %315 = fadd float %294, %314, !dbg !34
  %316 = fadd float %299, %305, !dbg !39
  %317 = fmul float %309, %309, !dbg !35
  %318 = fmul float %289, %317, !dbg !36
  %319 = fmul float %313, %318, !dbg !37
  %320 = fadd float %316, %319, !dbg !38
  %321 = bitcast float %315 to i32, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = bitcast float %320 to i32, !dbg !40
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !40
  %326 = bitcast i32 %325 to float, !dbg !40
  %327 = bitcast float %310 to i32, !dbg !40
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !40
  %329 = bitcast i32 %328 to float, !dbg !40
  %330 = fsub float %323, %315, !dbg !24
  %331 = fadd float %310, %329, !dbg !29
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !30
  %333 = tail call float @llvm.nvvm.div.full(float %329, float %331), !dbg !31
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !32
  %335 = fmul float %334, %330, !dbg !33
  %336 = fadd float %315, %335, !dbg !34
  %337 = fadd float %320, %326, !dbg !39
  %338 = fmul float %330, %330, !dbg !35
  %339 = fmul float %310, %338, !dbg !36
  %340 = fmul float %334, %339, !dbg !37
  %341 = fadd float %337, %340, !dbg !38
  %342 = bitcast float %336 to i32, !dbg !40
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !40
  %344 = bitcast i32 %343 to float, !dbg !40
  %345 = bitcast float %341 to i32, !dbg !40
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !40
  %347 = bitcast i32 %346 to float, !dbg !40
  %348 = bitcast float %331 to i32, !dbg !40
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !40
  %350 = bitcast i32 %349 to float, !dbg !40
  %351 = fsub float %344, %336, !dbg !24
  %352 = fadd float %331, %350, !dbg !29
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !30
  %354 = tail call float @llvm.nvvm.div.full(float %350, float %352), !dbg !31
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !32
  %356 = fmul float %355, %351, !dbg !33
  %357 = fadd float %336, %356, !dbg !34
  %358 = fadd float %341, %347, !dbg !39
  %359 = fmul float %351, %351, !dbg !35
  %360 = fmul float %331, %359, !dbg !36
  %361 = fmul float %355, %360, !dbg !37
  %362 = fadd float %358, %361, !dbg !38
  %363 = bitcast float %357 to i32, !dbg !40
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !40
  %365 = bitcast i32 %364 to float, !dbg !40
  %366 = bitcast float %362 to i32, !dbg !40
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !40
  %368 = bitcast i32 %367 to float, !dbg !40
  %369 = bitcast float %352 to i32, !dbg !40
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 1, i32 31), !dbg !40
  %371 = bitcast i32 %370 to float, !dbg !40
  %372 = fsub float %365, %357, !dbg !24
  %373 = fadd float %352, %371, !dbg !29
  %374 = fcmp oeq float %373, 0.000000e+00, !dbg !30
  %375 = tail call float @llvm.nvvm.div.full(float %371, float %373), !dbg !31
  %376 = select i1 %374, float 0.000000e+00, float %375, !dbg !32
  %377 = fmul float %376, %372, !dbg !33
  %378 = fadd float %357, %377, !dbg !34
  %379 = fadd float %362, %368, !dbg !39
  %380 = fmul float %372, %372, !dbg !35
  %381 = fmul float %352, %380, !dbg !36
  %382 = fmul float %376, %381, !dbg !37
  %383 = fadd float %379, %382, !dbg !38
  %384 = and i32 %22, 7, !dbg !40
  %385 = icmp eq i32 %24, 0, !dbg !40
  %386 = lshr exact i32 %23, 5, !dbg !40
  %387 = or disjoint i32 %386, %384, !dbg !40
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !40
  %389 = bitcast float %378 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 %385) #5, !dbg !40
  %390 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %387, !dbg !40
  %391 = bitcast float %383 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 %385) #5, !dbg !40
  %392 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %387, !dbg !40
  %393 = bitcast float %373 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 %385) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %394 = icmp slt i32 %21, 16, !dbg !40
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %394) #5, !dbg !40
  %397 = bitcast i32 %396 to float, !dbg !40
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !40
  %399 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %398, i1 %394) #5, !dbg !40
  %400 = bitcast i32 %399 to float, !dbg !40
  %401 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !40
  %402 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %401, i1 %394) #5, !dbg !40
  %403 = bitcast i32 %402 to float, !dbg !40
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !40
  %405 = bitcast i32 %404 to float, !dbg !40
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !40
  %407 = bitcast i32 %406 to float, !dbg !40
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !40
  %409 = bitcast i32 %408 to float, !dbg !40
  %410 = fsub float %405, %397, !dbg !24
  %411 = fadd float %403, %409, !dbg !29
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !30
  %413 = tail call float @llvm.nvvm.div.full(float %409, float %411), !dbg !31
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !32
  %415 = fmul float %410, %414, !dbg !33
  %416 = fadd float %415, %397, !dbg !34
  %417 = fadd float %400, %407, !dbg !39
  %418 = fmul float %410, %410, !dbg !35
  %419 = fmul float %418, %403, !dbg !36
  %420 = fmul float %419, %414, !dbg !37
  %421 = fadd float %417, %420, !dbg !38
  %422 = bitcast float %416 to i32, !dbg !40
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !40
  %424 = bitcast i32 %423 to float, !dbg !40
  %425 = bitcast float %421 to i32, !dbg !40
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !40
  %427 = bitcast i32 %426 to float, !dbg !40
  %428 = bitcast float %411 to i32, !dbg !40
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 2, i32 31), !dbg !40
  %430 = bitcast i32 %429 to float, !dbg !40
  %431 = fsub float %424, %416, !dbg !24
  %432 = fadd float %411, %430, !dbg !29
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !30
  %434 = tail call float @llvm.nvvm.div.full(float %430, float %432), !dbg !31
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !32
  %436 = fmul float %431, %435, !dbg !33
  %437 = fadd float %416, %436, !dbg !34
  %438 = fadd float %421, %427, !dbg !39
  %439 = fmul float %431, %431, !dbg !35
  %440 = fmul float %411, %439, !dbg !36
  %441 = fmul float %435, %440, !dbg !37
  %442 = fadd float %438, %441, !dbg !38
  %443 = bitcast float %437 to i32, !dbg !40
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !40
  %445 = bitcast i32 %444 to float, !dbg !40
  %446 = bitcast float %442 to i32, !dbg !40
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !40
  %448 = bitcast i32 %447 to float, !dbg !40
  %449 = bitcast float %432 to i32, !dbg !40
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !40
  %451 = bitcast i32 %450 to float, !dbg !40
  %452 = fsub float %445, %437, !dbg !24
  %453 = fadd float %432, %451, !dbg !29
  %454 = fcmp oeq float %453, 0.000000e+00, !dbg !30
  %455 = tail call float @llvm.nvvm.div.full(float %451, float %453), !dbg !31
  %456 = select i1 %454, float 0.000000e+00, float %455, !dbg !32
  %457 = fmul float %452, %456, !dbg !33
  %458 = fadd float %437, %457, !dbg !34
  %459 = fadd float %442, %448, !dbg !39
  %460 = fmul float %452, %452, !dbg !35
  %461 = fmul float %432, %460, !dbg !36
  %462 = fmul float %456, %461, !dbg !37
  %463 = fadd float %459, %462, !dbg !38
  %464 = and i32 %21, 7, !dbg !40
  %465 = icmp eq i32 %464, 0, !dbg !40
  %466 = and i1 %394, %465, !dbg !40
  %467 = bitcast float %458 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %467, i1 %466) #5, !dbg !40
  %468 = bitcast float %463 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %468, i1 %466) #5, !dbg !40
  %469 = bitcast float %453 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %469, i1 %466) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %386, !dbg !40
  %471 = load float, ptr addrspace(3) %470, align 16, !dbg !40
  %472 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %386, !dbg !40
  %473 = load float, ptr addrspace(3) %472, align 16, !dbg !40
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %44) #5, !dbg !41
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %44) #5, !dbg !41
  %476 = add nuw nsw i32 %29, 3072, !dbg !42
  %477 = zext nneg i32 %476 to i64, !dbg !43
  %478 = getelementptr float, ptr addrspace(1) %1, i64 %477, !dbg !43
  %479 = zext nneg i32 %29 to i64, !dbg !43
  %480 = getelementptr float, ptr addrspace(1) %1, i64 %479, !dbg !43
  %481 = getelementptr i8, ptr addrspace(1) %480, i64 12304, !dbg !43
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %478, i1 %34) #5, !dbg !44
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %481, i1 %34) #5, !dbg !44
  %484 = getelementptr bfloat, ptr addrspace(1) %2, i64 %477, !dbg !45
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %484, i1 %34) #5, !dbg !46
  %486 = zext nneg i32 %30 to i64, !dbg !47
  %487 = getelementptr float, ptr addrspace(1) %1, i64 %486, !dbg !47
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %480, i1 %34) #5, !dbg !48
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %487, i1 %34) #5, !dbg !48
  %490 = getelementptr bfloat, ptr addrspace(1) %2, i64 %479, !dbg !49
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %490, i1 %34) #5, !dbg !50
  %492 = tail call float @llvm.nvvm.div.full(float %473, float 3.072000e+03), !dbg !51
  %493 = fadd float %492, 0x3EB0C6F7A0000000, !dbg !52
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i62 = icmp eq i32 %509, 0, !dbg !53
  br i1 %.not.i62, label %512, label %510, !dbg !53

510:                                              ; preds = %__nv_rsqrtf.exit
  %511 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %493), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

512:                                              ; preds = %__nv_rsqrtf.exit
  %513 = tail call float @llvm.nvvm.rsqrt.approx.f(float %493), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

__nv_rsqrtf.exit64:                               ; preds = %510, %512
  %.0.i63 = phi float [ %511, %510 ], [ %513, %512 ], !dbg !53
  %514 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !41
  %515 = bitcast i32 %514 to <2 x bfloat>, !dbg !41
  %516 = extractelement <2 x bfloat> %515, i64 1, !dbg !41
  %517 = fpext bfloat %516 to float, !dbg !54
  %518 = fsub float %517, %471, !dbg !55
  %519 = extractelement <2 x bfloat> %515, i64 0, !dbg !41
  %520 = fpext bfloat %519 to float, !dbg !54
  %521 = fsub float %520, %471, !dbg !55
  %522 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !41
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !41
  %524 = extractelement <2 x bfloat> %523, i64 1, !dbg !41
  %525 = fpext bfloat %524 to float, !dbg !54
  %526 = fsub float %525, %471, !dbg !55
  %527 = extractelement <2 x bfloat> %523, i64 0, !dbg !41
  %528 = fpext bfloat %527 to float, !dbg !54
  %529 = fsub float %528, %471, !dbg !55
  %530 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !41
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !41
  %532 = extractelement <2 x bfloat> %531, i64 1, !dbg !41
  %533 = fpext bfloat %532 to float, !dbg !54
  %534 = fsub float %533, %471, !dbg !55
  %535 = extractelement <2 x bfloat> %531, i64 0, !dbg !41
  %536 = fpext bfloat %535 to float, !dbg !54
  %537 = fsub float %536, %471, !dbg !55
  %538 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !41
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !41
  %540 = extractelement <2 x bfloat> %539, i64 1, !dbg !41
  %541 = fpext bfloat %540 to float, !dbg !54
  %542 = fsub float %541, %471, !dbg !55
  %543 = extractelement <2 x bfloat> %539, i64 0, !dbg !41
  %544 = fpext bfloat %543 to float, !dbg !54
  %545 = fsub float %544, %471, !dbg !55
  %546 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !41
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !41
  %548 = extractelement <2 x bfloat> %547, i64 1, !dbg !41
  %549 = fpext bfloat %548 to float, !dbg !54
  %550 = fsub float %549, %471, !dbg !55
  %551 = extractelement <2 x bfloat> %547, i64 0, !dbg !41
  %552 = fpext bfloat %551 to float, !dbg !54
  %553 = fsub float %552, %471, !dbg !55
  %554 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !41
  %555 = bitcast i32 %554 to <2 x bfloat>, !dbg !41
  %556 = extractelement <2 x bfloat> %555, i64 1, !dbg !41
  %557 = fpext bfloat %556 to float, !dbg !54
  %558 = fsub float %557, %471, !dbg !55
  %559 = extractelement <2 x bfloat> %555, i64 0, !dbg !41
  %560 = fpext bfloat %559 to float, !dbg !54
  %561 = fsub float %560, %471, !dbg !55
  %562 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !41
  %563 = bitcast i32 %562 to <2 x bfloat>, !dbg !41
  %564 = extractelement <2 x bfloat> %563, i64 1, !dbg !41
  %565 = fpext bfloat %564 to float, !dbg !54
  %566 = fsub float %565, %471, !dbg !55
  %567 = extractelement <2 x bfloat> %563, i64 0, !dbg !41
  %568 = fpext bfloat %567 to float, !dbg !54
  %569 = fsub float %568, %471, !dbg !55
  %570 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !41
  %571 = bitcast i32 %570 to <2 x bfloat>, !dbg !41
  %572 = extractelement <2 x bfloat> %571, i64 1, !dbg !41
  %573 = fpext bfloat %572 to float, !dbg !54
  %574 = fsub float %573, %471, !dbg !55
  %575 = extractelement <2 x bfloat> %571, i64 0, !dbg !41
  %576 = fpext bfloat %575 to float, !dbg !54
  %577 = fsub float %576, %471, !dbg !55
  %578 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !50
  %579 = bitcast i32 %578 to <2 x bfloat>, !dbg !50
  %580 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !50
  %581 = bitcast i32 %580 to <2 x bfloat>, !dbg !50
  %582 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !50
  %583 = bitcast i32 %582 to <2 x bfloat>, !dbg !50
  %584 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !50
  %585 = bitcast i32 %584 to <2 x bfloat>, !dbg !50
  %586 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !48
  %587 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !48
  %588 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !48
  %589 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !48
  %590 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !48
  %591 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !48
  %592 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !48
  %593 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !48
  %594 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !46
  %595 = bitcast i32 %594 to <2 x bfloat>, !dbg !46
  %596 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !46
  %597 = bitcast i32 %596 to <2 x bfloat>, !dbg !46
  %598 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !46
  %599 = bitcast i32 %598 to <2 x bfloat>, !dbg !46
  %600 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !46
  %601 = bitcast i32 %600 to <2 x bfloat>, !dbg !46
  %602 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !44
  %603 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !44
  %604 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !44
  %605 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !44
  %606 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !44
  %607 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !44
  %608 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !44
  %609 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !44
  %610 = mul i32 %19, 6144, !dbg !16
  %611 = add i32 %610, 3072, !dbg !16
  %612 = add i32 %611, %29, !dbg !17
  %613 = add i32 %29, %610, !dbg !17
  %614 = and i32 %21, 1, !dbg !11
  %615 = or disjoint i32 %20, %614, !dbg !12
  %616 = icmp slt i32 %615, 4112, !dbg !13
  %617 = fmul float %577, %.0.i63, !dbg !56
  %618 = fmul float %574, %.0.i63, !dbg !56
  %619 = fmul float %569, %.0.i63, !dbg !56
  %620 = fmul float %566, %.0.i63, !dbg !56
  %621 = fmul float %561, %.0.i63, !dbg !56
  %622 = fmul float %558, %.0.i63, !dbg !56
  %623 = fmul float %553, %.0.i63, !dbg !56
  %624 = fmul float %550, %.0.i63, !dbg !56
  %625 = fmul float %545, %.0.i63, !dbg !56
  %626 = fmul float %542, %.0.i63, !dbg !56
  %627 = fmul float %537, %.0.i63, !dbg !56
  %628 = fmul float %534, %.0.i63, !dbg !56
  %629 = fmul float %529, %.0.i63, !dbg !56
  %630 = fmul float %526, %.0.i63, !dbg !56
  %631 = fmul float %521, %.0.i63, !dbg !56
  %632 = fmul float %518, %.0.i63, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %633 = and i32 %31, 8176, !dbg !56
  %634 = lshr i32 %31, 10, !dbg !56
  %635 = and i32 %634, 4, !dbg !56
  %636 = getelementptr float, ptr addrspace(3) @global_smem, i32 %635, !dbg !56
  %637 = getelementptr float, ptr addrspace(3) %636, i32 %633, !dbg !56
  %638 = bitcast float %617 to i32, !dbg !56
  %639 = bitcast float %618 to i32, !dbg !56
  %640 = bitcast float %619 to i32, !dbg !56
  %641 = bitcast float %620 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %637, i32 %638, i32 %639, i32 %640, i32 %641, i1 true) #5, !dbg !56
  %642 = or disjoint i32 %633, 4, !dbg !56
  %643 = getelementptr float, ptr addrspace(3) %636, i32 %642, !dbg !56
  %644 = bitcast float %621 to i32, !dbg !56
  %645 = bitcast float %622 to i32, !dbg !56
  %646 = bitcast float %623 to i32, !dbg !56
  %647 = bitcast float %624 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %643, i32 %644, i32 %645, i32 %646, i32 %647, i1 true) #5, !dbg !56
  %648 = or disjoint i32 %633, 8, !dbg !56
  %649 = getelementptr float, ptr addrspace(3) %636, i32 %648, !dbg !56
  %650 = bitcast float %625 to i32, !dbg !56
  %651 = bitcast float %626 to i32, !dbg !56
  %652 = bitcast float %627 to i32, !dbg !56
  %653 = bitcast float %628 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %649, i32 %650, i32 %651, i32 %652, i32 %653, i1 true) #5, !dbg !56
  %654 = or disjoint i32 %633, 12, !dbg !56
  %655 = getelementptr float, ptr addrspace(3) %636, i32 %654, !dbg !56
  %656 = bitcast float %629 to i32, !dbg !56
  %657 = bitcast float %630 to i32, !dbg !56
  %658 = bitcast float %631 to i32, !dbg !56
  %659 = bitcast float %632 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %655, i32 %656, i32 %657, i32 %658, i32 %659, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %660 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !56
  %661 = getelementptr inbounds nuw i8, ptr addrspace(3) %660, i32 8, !dbg !56
  %662 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30, !dbg !56
  %663 = getelementptr inbounds nuw i8, ptr addrspace(3) %662, i32 8, !dbg !56
  %664 = or disjoint i32 %29, 4100, !dbg !56
  %665 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %664, !dbg !56
  %666 = getelementptr inbounds nuw i8, ptr addrspace(3) %665, i32 8, !dbg !56
  %667 = getelementptr inbounds nuw i8, ptr addrspace(3) %660, i32 16416, !dbg !56
  %668 = getelementptr inbounds nuw i8, ptr addrspace(3) %660, i32 16424, !dbg !56
  %669 = sext i32 %613 to i64, !dbg !57
  %670 = getelementptr bfloat, ptr addrspace(1) %3, i64 %669, !dbg !57
  %671 = sext i32 %612 to i64, !dbg !57
  %672 = getelementptr bfloat, ptr addrspace(1) %3, i64 %671, !dbg !57
  %673 = getelementptr bfloat, ptr addrspace(1) %3, i64 %39, !dbg !57
  %674 = getelementptr bfloat, ptr addrspace(1) %3, i64 %41, !dbg !57
  %675 = fpext <2 x bfloat> %585 to <2 x float>, !dbg !58
  %676 = insertelement <2 x i32> poison, i32 %593, i64 0, !dbg !48
  %677 = insertelement <2 x i32> %676, i32 %592, i64 1, !dbg !48
  %678 = bitcast <2 x i32> %677 to <2 x float>, !dbg !48
  %679 = fpext <2 x bfloat> %601 to <2 x float>, !dbg !59
  %680 = insertelement <2 x i32> poison, i32 %609, i64 0, !dbg !44
  %681 = insertelement <2 x i32> %680, i32 %608, i64 1, !dbg !44
  %682 = bitcast <2 x i32> %681 to <2 x float>, !dbg !44
  %683 = load <2 x float>, ptr addrspace(3) %660, align 16, !dbg !56
  %684 = fadd <2 x float> %682, %679, !dbg !60
  %685 = fadd <2 x float> %684, splat (float 1.000000e+00), !dbg !61
  %686 = fmul <2 x float> %685, %683, !dbg !62
  %687 = fadd <2 x float> %678, %675, !dbg !63
  %688 = fadd <2 x float> %687, %686, !dbg !64
  %689 = extractelement <2 x float> %688, i64 0, !dbg !65
  %690 = select i1 %43, float %689, float 0x7FF0000000000000, !dbg !66
  %691 = extractelement <2 x float> %688, i64 1, !dbg !65
  %692 = select i1 %43, float %691, float 0x7FF0000000000000, !dbg !66
  %693 = select i1 %43, float %689, float 0xFFF0000000000000, !dbg !65
  %694 = select i1 %43, float %691, float 0xFFF0000000000000, !dbg !65
  %695 = fptrunc <2 x float> %688 to <2 x bfloat>, !dbg !67
  %696 = fpext <2 x bfloat> %583 to <2 x float>, !dbg !58
  %697 = insertelement <2 x i32> poison, i32 %591, i64 0, !dbg !48
  %698 = insertelement <2 x i32> %697, i32 %590, i64 1, !dbg !48
  %699 = bitcast <2 x i32> %698 to <2 x float>, !dbg !48
  %700 = fpext <2 x bfloat> %599 to <2 x float>, !dbg !59
  %701 = insertelement <2 x i32> poison, i32 %607, i64 0, !dbg !44
  %702 = insertelement <2 x i32> %701, i32 %606, i64 1, !dbg !44
  %703 = bitcast <2 x i32> %702 to <2 x float>, !dbg !44
  %704 = load <2 x float>, ptr addrspace(3) %661, align 8, !dbg !56
  %705 = fadd <2 x float> %703, %700, !dbg !60
  %706 = fadd <2 x float> %705, splat (float 1.000000e+00), !dbg !61
  %707 = fmul <2 x float> %706, %704, !dbg !62
  %708 = fadd <2 x float> %699, %696, !dbg !63
  %709 = fadd <2 x float> %708, %707, !dbg !64
  %710 = extractelement <2 x float> %709, i64 0, !dbg !65
  %711 = select i1 %43, float %710, float 0x7FF0000000000000, !dbg !66
  %712 = extractelement <2 x float> %709, i64 1, !dbg !65
  %713 = select i1 %43, float %712, float 0x7FF0000000000000, !dbg !66
  %714 = select i1 %43, float %710, float 0xFFF0000000000000, !dbg !65
  %715 = select i1 %43, float %712, float 0xFFF0000000000000, !dbg !65
  %716 = fptrunc <2 x float> %709 to <2 x bfloat>, !dbg !67
  %717 = fpext <2 x bfloat> %581 to <2 x float>, !dbg !58
  %718 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !48
  %719 = insertelement <2 x i32> %718, i32 %588, i64 1, !dbg !48
  %720 = bitcast <2 x i32> %719 to <2 x float>, !dbg !48
  %721 = fpext <2 x bfloat> %597 to <2 x float>, !dbg !59
  %722 = insertelement <2 x i32> poison, i32 %605, i64 0, !dbg !44
  %723 = insertelement <2 x i32> %722, i32 %604, i64 1, !dbg !44
  %724 = bitcast <2 x i32> %723 to <2 x float>, !dbg !44
  %725 = load <2 x float>, ptr addrspace(3) %662, align 16, !dbg !56
  %726 = fadd <2 x float> %724, %721, !dbg !60
  %727 = fadd <2 x float> %726, splat (float 1.000000e+00), !dbg !61
  %728 = fmul <2 x float> %727, %725, !dbg !62
  %729 = fadd <2 x float> %720, %717, !dbg !63
  %730 = fadd <2 x float> %729, %728, !dbg !64
  %731 = extractelement <2 x float> %730, i64 0, !dbg !65
  %732 = select i1 %43, float %731, float 0x7FF0000000000000, !dbg !66
  %733 = extractelement <2 x float> %730, i64 1, !dbg !65
  %734 = select i1 %43, float %733, float 0x7FF0000000000000, !dbg !66
  %735 = select i1 %43, float %731, float 0xFFF0000000000000, !dbg !65
  %736 = select i1 %43, float %733, float 0xFFF0000000000000, !dbg !65
  %737 = fptrunc <2 x float> %730 to <2 x bfloat>, !dbg !67
  %738 = fpext <2 x bfloat> %579 to <2 x float>, !dbg !58
  %739 = insertelement <2 x i32> poison, i32 %587, i64 0, !dbg !48
  %740 = insertelement <2 x i32> %739, i32 %586, i64 1, !dbg !48
  %741 = bitcast <2 x i32> %740 to <2 x float>, !dbg !48
  %742 = fpext <2 x bfloat> %595 to <2 x float>, !dbg !59
  %743 = insertelement <2 x i32> poison, i32 %603, i64 0, !dbg !44
  %744 = insertelement <2 x i32> %743, i32 %602, i64 1, !dbg !44
  %745 = bitcast <2 x i32> %744 to <2 x float>, !dbg !44
  %746 = load <2 x float>, ptr addrspace(3) %663, align 8, !dbg !56
  %747 = fadd <2 x float> %745, %742, !dbg !60
  %748 = fadd <2 x float> %747, splat (float 1.000000e+00), !dbg !61
  %749 = fmul <2 x float> %748, %746, !dbg !62
  %750 = fadd <2 x float> %741, %738, !dbg !63
  %751 = fadd <2 x float> %750, %749, !dbg !64
  %752 = extractelement <2 x float> %751, i64 0, !dbg !65
  %753 = select i1 %43, float %752, float 0x7FF0000000000000, !dbg !66
  %754 = extractelement <2 x float> %751, i64 1, !dbg !65
  %755 = select i1 %43, float %754, float 0x7FF0000000000000, !dbg !66
  %756 = select i1 %43, float %752, float 0xFFF0000000000000, !dbg !65
  %757 = select i1 %43, float %754, float 0xFFF0000000000000, !dbg !65
  %758 = fptrunc <2 x float> %751 to <2 x bfloat>, !dbg !67
  %759 = load <2 x float>, ptr addrspace(3) %665, align 16, !dbg !56
  %760 = fmul <2 x float> %685, %759, !dbg !62
  %761 = fadd <2 x float> %687, %760, !dbg !64
  %762 = extractelement <2 x float> %761, i64 0, !dbg !65
  %763 = select i1 %43, float %762, float 0x7FF0000000000000, !dbg !66
  %764 = extractelement <2 x float> %761, i64 1, !dbg !65
  %765 = select i1 %43, float %764, float 0x7FF0000000000000, !dbg !66
  %766 = select i1 %43, float %762, float 0xFFF0000000000000, !dbg !65
  %767 = select i1 %43, float %764, float 0xFFF0000000000000, !dbg !65
  %768 = fptrunc <2 x float> %761 to <2 x bfloat>, !dbg !67
  %769 = load <2 x float>, ptr addrspace(3) %666, align 8, !dbg !56
  %770 = fmul <2 x float> %706, %769, !dbg !62
  %771 = fadd <2 x float> %708, %770, !dbg !64
  %772 = extractelement <2 x float> %771, i64 0, !dbg !65
  %773 = select i1 %43, float %772, float 0x7FF0000000000000, !dbg !66
  %774 = extractelement <2 x float> %771, i64 1, !dbg !65
  %775 = select i1 %43, float %774, float 0x7FF0000000000000, !dbg !66
  %776 = select i1 %43, float %772, float 0xFFF0000000000000, !dbg !65
  %777 = select i1 %43, float %774, float 0xFFF0000000000000, !dbg !65
  %778 = fptrunc <2 x float> %771 to <2 x bfloat>, !dbg !67
  %779 = load <2 x float>, ptr addrspace(3) %667, align 16, !dbg !56
  %780 = fmul <2 x float> %727, %779, !dbg !62
  %781 = fadd <2 x float> %729, %780, !dbg !64
  %782 = extractelement <2 x float> %781, i64 0, !dbg !65
  %783 = select i1 %43, float %782, float 0x7FF0000000000000, !dbg !66
  %784 = extractelement <2 x float> %781, i64 1, !dbg !65
  %785 = select i1 %43, float %784, float 0x7FF0000000000000, !dbg !66
  %786 = select i1 %43, float %782, float 0xFFF0000000000000, !dbg !65
  %787 = select i1 %43, float %784, float 0xFFF0000000000000, !dbg !65
  %788 = fptrunc <2 x float> %781 to <2 x bfloat>, !dbg !67
  %789 = load <2 x float>, ptr addrspace(3) %668, align 8, !dbg !56
  %790 = fmul <2 x float> %748, %789, !dbg !62
  %791 = fadd <2 x float> %750, %790, !dbg !64
  %792 = extractelement <2 x float> %791, i64 0, !dbg !65
  %793 = select i1 %43, float %792, float 0x7FF0000000000000, !dbg !66
  %794 = extractelement <2 x float> %791, i64 1, !dbg !65
  %795 = select i1 %43, float %794, float 0x7FF0000000000000, !dbg !66
  %796 = select i1 %43, float %792, float 0xFFF0000000000000, !dbg !65
  %797 = select i1 %43, float %794, float 0xFFF0000000000000, !dbg !65
  %798 = fptrunc <2 x float> %791 to <2 x bfloat>, !dbg !67
  %799 = bitcast <2 x bfloat> %695 to i32, !dbg !67
  %800 = bitcast <2 x bfloat> %716 to i32, !dbg !67
  %801 = bitcast <2 x bfloat> %737 to i32, !dbg !67
  %802 = bitcast <2 x bfloat> %758 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %799, i32 %800, i32 %801, i32 %802, ptr addrspace(1) %670, i1 %43) #5, !dbg !67
  %803 = bitcast <2 x bfloat> %768 to i32, !dbg !67
  %804 = bitcast <2 x bfloat> %778 to i32, !dbg !67
  %805 = bitcast <2 x bfloat> %788 to i32, !dbg !67
  %806 = bitcast <2 x bfloat> %798 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %803, i32 %804, i32 %805, i32 %806, ptr addrspace(1) %672, i1 %43) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %807 = fcmp olt float %690, %692, !dbg !70
  %808 = fcmp uno float %690, 0.000000e+00, !dbg !71
  %809 = or i1 %807, %808, !dbg !72
  %810 = select i1 %809, float %690, float %692, !dbg !73
  %811 = fcmp olt float %810, %711, !dbg !70
  %812 = fcmp uno float %810, 0.000000e+00, !dbg !71
  %813 = or i1 %811, %812, !dbg !72
  %814 = select i1 %813, float %810, float %711, !dbg !73
  %815 = fcmp olt float %814, %713, !dbg !70
  %816 = fcmp uno float %814, 0.000000e+00, !dbg !71
  %817 = or i1 %815, %816, !dbg !72
  %818 = select i1 %817, float %814, float %713, !dbg !73
  %819 = fcmp olt float %818, %732, !dbg !70
  %820 = fcmp uno float %818, 0.000000e+00, !dbg !71
  %821 = or i1 %819, %820, !dbg !72
  %822 = select i1 %821, float %818, float %732, !dbg !73
  %823 = fcmp olt float %822, %734, !dbg !70
  %824 = fcmp uno float %822, 0.000000e+00, !dbg !71
  %825 = or i1 %823, %824, !dbg !72
  %826 = select i1 %825, float %822, float %734, !dbg !73
  %827 = fcmp olt float %826, %753, !dbg !70
  %828 = fcmp uno float %826, 0.000000e+00, !dbg !71
  %829 = or i1 %827, %828, !dbg !72
  %830 = select i1 %829, float %826, float %753, !dbg !73
  %831 = fcmp olt float %830, %755, !dbg !70
  %832 = fcmp uno float %830, 0.000000e+00, !dbg !71
  %833 = or i1 %831, %832, !dbg !72
  %834 = select i1 %833, float %830, float %755, !dbg !73
  %835 = fcmp olt float %763, %765, !dbg !70
  %836 = fcmp uno float %763, 0.000000e+00, !dbg !71
  %837 = or i1 %835, %836, !dbg !72
  %838 = select i1 %837, float %763, float %765, !dbg !73
  %839 = fcmp olt float %838, %773, !dbg !70
  %840 = fcmp uno float %838, 0.000000e+00, !dbg !71
  %841 = or i1 %839, %840, !dbg !72
  %842 = select i1 %841, float %838, float %773, !dbg !73
  %843 = fcmp olt float %842, %775, !dbg !70
  %844 = fcmp uno float %842, 0.000000e+00, !dbg !71
  %845 = or i1 %843, %844, !dbg !72
  %846 = select i1 %845, float %842, float %775, !dbg !73
  %847 = fcmp olt float %846, %783, !dbg !70
  %848 = fcmp uno float %846, 0.000000e+00, !dbg !71
  %849 = or i1 %847, %848, !dbg !72
  %850 = select i1 %849, float %846, float %783, !dbg !73
  %851 = fcmp olt float %850, %785, !dbg !70
  %852 = fcmp uno float %850, 0.000000e+00, !dbg !71
  %853 = or i1 %851, %852, !dbg !72
  %854 = select i1 %853, float %850, float %785, !dbg !73
  %855 = fcmp olt float %854, %793, !dbg !70
  %856 = fcmp uno float %854, 0.000000e+00, !dbg !71
  %857 = or i1 %855, %856, !dbg !72
  %858 = select i1 %857, float %854, float %793, !dbg !73
  %859 = fcmp olt float %858, %795, !dbg !70
  %860 = fcmp uno float %858, 0.000000e+00, !dbg !71
  %861 = or i1 %859, %860, !dbg !72
  %862 = select i1 %861, float %858, float %795, !dbg !73
  %863 = bitcast float %834 to i32, !dbg !68
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 16, i32 31), !dbg !68
  %865 = bitcast i32 %864 to float, !dbg !68
  %866 = fcmp olt float %834, %865, !dbg !70
  %867 = fcmp uno float %834, 0.000000e+00, !dbg !71
  %868 = or i1 %866, %867, !dbg !72
  %869 = select i1 %868, float %834, float %865, !dbg !73
  %870 = bitcast float %869 to i32, !dbg !68
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 8, i32 31), !dbg !68
  %872 = bitcast i32 %871 to float, !dbg !68
  %873 = fcmp olt float %869, %872, !dbg !70
  %874 = fcmp uno float %869, 0.000000e+00, !dbg !71
  %875 = or i1 %873, %874, !dbg !72
  %876 = select i1 %875, float %869, float %872, !dbg !73
  %877 = bitcast float %876 to i32, !dbg !68
  %878 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %877, i32 4, i32 31), !dbg !68
  %879 = bitcast i32 %878 to float, !dbg !68
  %880 = fcmp olt float %876, %879, !dbg !70
  %881 = fcmp uno float %876, 0.000000e+00, !dbg !71
  %882 = or i1 %880, %881, !dbg !72
  %883 = select i1 %882, float %876, float %879, !dbg !73
  %884 = bitcast float %883 to i32, !dbg !68
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 2, i32 31), !dbg !68
  %886 = bitcast i32 %885 to float, !dbg !68
  %887 = fcmp olt float %883, %886, !dbg !70
  %888 = fcmp uno float %883, 0.000000e+00, !dbg !71
  %889 = or i1 %887, %888, !dbg !72
  %890 = select i1 %889, float %883, float %886, !dbg !73
  %891 = bitcast float %890 to i32, !dbg !68
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 1, i32 31), !dbg !68
  %893 = bitcast i32 %892 to float, !dbg !68
  %894 = fcmp olt float %890, %893, !dbg !70
  %895 = fcmp uno float %890, 0.000000e+00, !dbg !71
  %896 = or i1 %894, %895, !dbg !72
  %897 = bitcast float %862 to i32, !dbg !68
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 16, i32 31), !dbg !68
  %899 = bitcast i32 %898 to float, !dbg !68
  %900 = fcmp olt float %862, %899, !dbg !70
  %901 = fcmp uno float %862, 0.000000e+00, !dbg !71
  %902 = or i1 %900, %901, !dbg !72
  %903 = select i1 %902, float %862, float %899, !dbg !73
  %904 = bitcast float %903 to i32, !dbg !68
  %905 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %904, i32 8, i32 31), !dbg !68
  %906 = bitcast i32 %905 to float, !dbg !68
  %907 = fcmp olt float %903, %906, !dbg !70
  %908 = fcmp uno float %903, 0.000000e+00, !dbg !71
  %909 = or i1 %907, %908, !dbg !72
  %910 = select i1 %909, float %903, float %906, !dbg !73
  %911 = bitcast float %910 to i32, !dbg !68
  %912 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %911, i32 4, i32 31), !dbg !68
  %913 = bitcast i32 %912 to float, !dbg !68
  %914 = fcmp olt float %910, %913, !dbg !70
  %915 = fcmp uno float %910, 0.000000e+00, !dbg !71
  %916 = or i1 %914, %915, !dbg !72
  %917 = select i1 %916, float %910, float %913, !dbg !73
  %918 = bitcast float %917 to i32, !dbg !68
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 2, i32 31), !dbg !68
  %920 = bitcast i32 %919 to float, !dbg !68
  %921 = fcmp olt float %917, %920, !dbg !70
  %922 = fcmp uno float %917, 0.000000e+00, !dbg !71
  %923 = or i1 %921, %922, !dbg !72
  %924 = select i1 %923, float %917, float %920, !dbg !73
  %925 = bitcast float %924 to i32, !dbg !68
  %926 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %925, i32 1, i32 31), !dbg !68
  %927 = bitcast i32 %926 to float, !dbg !68
  %928 = fcmp olt float %924, %927, !dbg !70
  %929 = fcmp uno float %924, 0.000000e+00, !dbg !71
  %930 = or i1 %928, %929, !dbg !72
  %931 = and i32 %22, 15, !dbg !68
  %932 = getelementptr float, ptr addrspace(3) @global_smem, i32 %931, !dbg !68
  %933 = select i1 %896, i32 %891, i32 %892, !dbg !73
  %934 = insertelement <1 x i32> poison, i32 %933, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %932, <1 x i32> %934, i1 %385) #5, !dbg !68
  %935 = or disjoint i32 %931, 16, !dbg !68
  %936 = getelementptr float, ptr addrspace(3) @global_smem, i32 %935, !dbg !68
  %937 = select i1 %930, i32 %925, i32 %926, !dbg !73
  %938 = insertelement <1 x i32> poison, i32 %937, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %938, i1 %385) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %939 = icmp slt i32 %21, 32, !dbg !68
  %940 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %939) #5, !dbg !68
  %941 = bitcast i32 %940 to float, !dbg !68
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %940, i32 8, i32 31), !dbg !68
  %943 = bitcast i32 %942 to float, !dbg !68
  %944 = fcmp olt float %941, %943, !dbg !70
  %945 = fcmp uno float %941, 0.000000e+00, !dbg !71
  %946 = or i1 %945, %944, !dbg !72
  %947 = select i1 %946, float %941, float %943, !dbg !73
  %948 = bitcast float %947 to i32, !dbg !68
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 4, i32 31), !dbg !68
  %950 = bitcast i32 %949 to float, !dbg !68
  %951 = fcmp olt float %947, %950, !dbg !70
  %952 = fcmp uno float %947, 0.000000e+00, !dbg !71
  %953 = or i1 %951, %952, !dbg !72
  %954 = select i1 %953, float %947, float %950, !dbg !73
  %955 = bitcast float %954 to i32, !dbg !68
  %956 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %955, i32 2, i32 31), !dbg !68
  %957 = bitcast i32 %956 to float, !dbg !68
  %958 = fcmp olt float %954, %957, !dbg !70
  %959 = fcmp uno float %954, 0.000000e+00, !dbg !71
  %960 = or i1 %958, %959, !dbg !72
  %961 = select i1 %960, float %954, float %957, !dbg !73
  %962 = bitcast float %961 to i32, !dbg !68
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 1, i32 31), !dbg !68
  %964 = bitcast i32 %963 to float, !dbg !68
  %965 = fcmp olt float %961, %964, !dbg !70
  %966 = fcmp uno float %961, 0.000000e+00, !dbg !71
  %967 = or i1 %965, %966, !dbg !72
  %968 = and i32 %21, 15, !dbg !68
  %969 = icmp eq i32 %968, 0, !dbg !68
  %970 = and i1 %939, %969, !dbg !68
  %971 = select i1 %967, i32 %962, i32 %963, !dbg !73
  %972 = insertelement <1 x i32> poison, i32 %971, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %972, i1 %970) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %973 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %974 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %975 = bitcast float %973 to i32, !dbg !74
  %976 = bitcast float %974 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %975, i32 %976, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %977 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %614, !dbg !74
  %978 = load float, ptr addrspace(3) %977, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %979 = fcmp ogt float %693, %694, !dbg !77
  %980 = fcmp uno float %693, 0.000000e+00, !dbg !78
  %981 = or i1 %979, %980, !dbg !79
  %982 = select i1 %981, float %693, float %694, !dbg !80
  %983 = fcmp ogt float %982, %714, !dbg !77
  %984 = fcmp uno float %982, 0.000000e+00, !dbg !78
  %985 = or i1 %983, %984, !dbg !79
  %986 = select i1 %985, float %982, float %714, !dbg !80
  %987 = fcmp ogt float %986, %715, !dbg !77
  %988 = fcmp uno float %986, 0.000000e+00, !dbg !78
  %989 = or i1 %987, %988, !dbg !79
  %990 = select i1 %989, float %986, float %715, !dbg !80
  %991 = fcmp ogt float %990, %735, !dbg !77
  %992 = fcmp uno float %990, 0.000000e+00, !dbg !78
  %993 = or i1 %991, %992, !dbg !79
  %994 = select i1 %993, float %990, float %735, !dbg !80
  %995 = fcmp ogt float %994, %736, !dbg !77
  %996 = fcmp uno float %994, 0.000000e+00, !dbg !78
  %997 = or i1 %995, %996, !dbg !79
  %998 = select i1 %997, float %994, float %736, !dbg !80
  %999 = fcmp ogt float %998, %756, !dbg !77
  %1000 = fcmp uno float %998, 0.000000e+00, !dbg !78
  %1001 = or i1 %999, %1000, !dbg !79
  %1002 = select i1 %1001, float %998, float %756, !dbg !80
  %1003 = fcmp ogt float %1002, %757, !dbg !77
  %1004 = fcmp uno float %1002, 0.000000e+00, !dbg !78
  %1005 = or i1 %1003, %1004, !dbg !79
  %1006 = select i1 %1005, float %1002, float %757, !dbg !80
  %1007 = fcmp ogt float %766, %767, !dbg !77
  %1008 = fcmp uno float %766, 0.000000e+00, !dbg !78
  %1009 = or i1 %1007, %1008, !dbg !79
  %1010 = select i1 %1009, float %766, float %767, !dbg !80
  %1011 = fcmp ogt float %1010, %776, !dbg !77
  %1012 = fcmp uno float %1010, 0.000000e+00, !dbg !78
  %1013 = or i1 %1011, %1012, !dbg !79
  %1014 = select i1 %1013, float %1010, float %776, !dbg !80
  %1015 = fcmp ogt float %1014, %777, !dbg !77
  %1016 = fcmp uno float %1014, 0.000000e+00, !dbg !78
  %1017 = or i1 %1015, %1016, !dbg !79
  %1018 = select i1 %1017, float %1014, float %777, !dbg !80
  %1019 = fcmp ogt float %1018, %786, !dbg !77
  %1020 = fcmp uno float %1018, 0.000000e+00, !dbg !78
  %1021 = or i1 %1019, %1020, !dbg !79
  %1022 = select i1 %1021, float %1018, float %786, !dbg !80
  %1023 = fcmp ogt float %1022, %787, !dbg !77
  %1024 = fcmp uno float %1022, 0.000000e+00, !dbg !78
  %1025 = or i1 %1023, %1024, !dbg !79
  %1026 = select i1 %1025, float %1022, float %787, !dbg !80
  %1027 = fcmp ogt float %1026, %796, !dbg !77
  %1028 = fcmp uno float %1026, 0.000000e+00, !dbg !78
  %1029 = or i1 %1027, %1028, !dbg !79
  %1030 = select i1 %1029, float %1026, float %796, !dbg !80
  %1031 = fcmp ogt float %1030, %797, !dbg !77
  %1032 = fcmp uno float %1030, 0.000000e+00, !dbg !78
  %1033 = or i1 %1031, %1032, !dbg !79
  %1034 = select i1 %1033, float %1030, float %797, !dbg !80
  %1035 = bitcast float %1006 to i32, !dbg !75
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 16, i32 31), !dbg !75
  %1037 = bitcast i32 %1036 to float, !dbg !75
  %1038 = fcmp ogt float %1006, %1037, !dbg !77
  %1039 = fcmp uno float %1006, 0.000000e+00, !dbg !78
  %1040 = or i1 %1039, %1038, !dbg !79
  %1041 = select i1 %1040, float %1006, float %1037, !dbg !80
  %1042 = bitcast float %1041 to i32, !dbg !75
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 8, i32 31), !dbg !75
  %1044 = bitcast i32 %1043 to float, !dbg !75
  %1045 = fcmp ogt float %1041, %1044, !dbg !77
  %1046 = fcmp uno float %1041, 0.000000e+00, !dbg !78
  %1047 = or i1 %1045, %1046, !dbg !79
  %1048 = select i1 %1047, float %1041, float %1044, !dbg !80
  %1049 = bitcast float %1048 to i32, !dbg !75
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 4, i32 31), !dbg !75
  %1051 = bitcast i32 %1050 to float, !dbg !75
  %1052 = fcmp ogt float %1048, %1051, !dbg !77
  %1053 = fcmp uno float %1048, 0.000000e+00, !dbg !78
  %1054 = or i1 %1052, %1053, !dbg !79
  %1055 = select i1 %1054, float %1048, float %1051, !dbg !80
  %1056 = bitcast float %1055 to i32, !dbg !75
  %1057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1056, i32 2, i32 31), !dbg !75
  %1058 = bitcast i32 %1057 to float, !dbg !75
  %1059 = fcmp ogt float %1055, %1058, !dbg !77
  %1060 = fcmp uno float %1055, 0.000000e+00, !dbg !78
  %1061 = or i1 %1059, %1060, !dbg !79
  %1062 = select i1 %1061, float %1055, float %1058, !dbg !80
  %1063 = bitcast float %1062 to i32, !dbg !75
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 1, i32 31), !dbg !75
  %1065 = bitcast i32 %1064 to float, !dbg !75
  %1066 = fcmp ogt float %1062, %1065, !dbg !77
  %1067 = fcmp uno float %1062, 0.000000e+00, !dbg !78
  %1068 = or i1 %1066, %1067, !dbg !79
  %1069 = bitcast float %1034 to i32, !dbg !75
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 16, i32 31), !dbg !75
  %1071 = bitcast i32 %1070 to float, !dbg !75
  %1072 = fcmp ogt float %1034, %1071, !dbg !77
  %1073 = fcmp uno float %1034, 0.000000e+00, !dbg !78
  %1074 = or i1 %1073, %1072, !dbg !79
  %1075 = select i1 %1074, float %1034, float %1071, !dbg !80
  %1076 = bitcast float %1075 to i32, !dbg !75
  %1077 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1076, i32 8, i32 31), !dbg !75
  %1078 = bitcast i32 %1077 to float, !dbg !75
  %1079 = fcmp ogt float %1075, %1078, !dbg !77
  %1080 = fcmp uno float %1075, 0.000000e+00, !dbg !78
  %1081 = or i1 %1079, %1080, !dbg !79
  %1082 = select i1 %1081, float %1075, float %1078, !dbg !80
  %1083 = bitcast float %1082 to i32, !dbg !75
  %1084 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1083, i32 4, i32 31), !dbg !75
  %1085 = bitcast i32 %1084 to float, !dbg !75
  %1086 = fcmp ogt float %1082, %1085, !dbg !77
  %1087 = fcmp uno float %1082, 0.000000e+00, !dbg !78
  %1088 = or i1 %1086, %1087, !dbg !79
  %1089 = select i1 %1088, float %1082, float %1085, !dbg !80
  %1090 = bitcast float %1089 to i32, !dbg !75
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 2, i32 31), !dbg !75
  %1092 = bitcast i32 %1091 to float, !dbg !75
  %1093 = fcmp ogt float %1089, %1092, !dbg !77
  %1094 = fcmp uno float %1089, 0.000000e+00, !dbg !78
  %1095 = or i1 %1093, %1094, !dbg !79
  %1096 = select i1 %1095, float %1089, float %1092, !dbg !80
  %1097 = bitcast float %1096 to i32, !dbg !75
  %1098 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1097, i32 1, i32 31), !dbg !75
  %1099 = bitcast i32 %1098 to float, !dbg !75
  %1100 = fcmp ogt float %1096, %1099, !dbg !77
  %1101 = fcmp uno float %1096, 0.000000e+00, !dbg !78
  %1102 = or i1 %1100, %1101, !dbg !79
  %1103 = select i1 %1068, i32 %1063, i32 %1064, !dbg !80
  %1104 = insertelement <1 x i32> poison, i32 %1103, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %932, <1 x i32> %1104, i1 %385) #5, !dbg !75
  %1105 = select i1 %1102, i32 %1097, i32 %1098, !dbg !80
  %1106 = insertelement <1 x i32> poison, i32 %1105, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %1106, i1 %385) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %939) #5, !dbg !75
  %1108 = bitcast i32 %1107 to float, !dbg !75
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 8, i32 31), !dbg !75
  %1110 = bitcast i32 %1109 to float, !dbg !75
  %1111 = fcmp ogt float %1108, %1110, !dbg !77
  %1112 = fcmp uno float %1108, 0.000000e+00, !dbg !78
  %1113 = or i1 %1112, %1111, !dbg !79
  %1114 = select i1 %1113, float %1108, float %1110, !dbg !80
  %1115 = bitcast float %1114 to i32, !dbg !75
  %1116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1115, i32 4, i32 31), !dbg !75
  %1117 = bitcast i32 %1116 to float, !dbg !75
  %1118 = fcmp ogt float %1114, %1117, !dbg !77
  %1119 = fcmp uno float %1114, 0.000000e+00, !dbg !78
  %1120 = or i1 %1118, %1119, !dbg !79
  %1121 = select i1 %1120, float %1114, float %1117, !dbg !80
  %1122 = bitcast float %1121 to i32, !dbg !75
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 2, i32 31), !dbg !75
  %1124 = bitcast i32 %1123 to float, !dbg !75
  %1125 = fcmp ogt float %1121, %1124, !dbg !77
  %1126 = fcmp uno float %1121, 0.000000e+00, !dbg !78
  %1127 = or i1 %1125, %1126, !dbg !79
  %1128 = select i1 %1127, float %1121, float %1124, !dbg !80
  %1129 = bitcast float %1128 to i32, !dbg !75
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 1, i32 31), !dbg !75
  %1131 = bitcast i32 %1130 to float, !dbg !75
  %1132 = fcmp ogt float %1128, %1131, !dbg !77
  %1133 = fcmp uno float %1128, 0.000000e+00, !dbg !78
  %1134 = or i1 %1132, %1133, !dbg !79
  %1135 = select i1 %1134, i32 %1129, i32 %1130, !dbg !80
  %1136 = insertelement <1 x i32> poison, i32 %1135, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %1136, i1 %970) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1137 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %1138 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1139 = bitcast float %1137 to i32, !dbg !81
  %1140 = bitcast float %1138 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1139, i32 %1140, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1141 = load float, ptr addrspace(3) %977, align 4, !dbg !81
  %1142 = sext i32 %615 to i64, !dbg !82
  %1143 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1142, !dbg !82
  %1144 = fptrunc float %978 to bfloat, !dbg !74
  %1145 = and i32 %21, 510, !dbg !74
  %1146 = icmp eq i32 %1145, 0, !dbg !74
  %1147 = bitcast bfloat %1144 to i16, !dbg !74
  %1148 = and i1 %1146, %616, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1147, ptr addrspace(1) %1143, i1 %1148) #5, !dbg !74
  %1149 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1142, !dbg !83
  %1150 = fptrunc float %1141 to bfloat, !dbg !81
  %1151 = bitcast bfloat %1150 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1151, ptr addrspace(1) %1149, i1 %1148) #5, !dbg !81
  %1152 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1142, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1147, ptr addrspace(1) %1152, i1 %1148) #5, !dbg !85
  %1153 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1142, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1151, ptr addrspace(1) %1153, i1 %1148) #5, !dbg !87
  %1154 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1142, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1147, ptr addrspace(1) %1154, i1 %1148) #5, !dbg !89
  %1155 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1142, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1151, ptr addrspace(1) %1155, i1 %1148) #5, !dbg !91
  %1156 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1142, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1147, ptr addrspace(1) %1156, i1 %1148) #5, !dbg !93
  %1157 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1142, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1151, ptr addrspace(1) %1157, i1 %1148) #5, !dbg !95
  %1158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %673, i1 %44) #5, !dbg !96
  %1159 = extractvalue { i32, i32, i32, i32 } %1158, 0, !dbg !96
  %1160 = bitcast i32 %1159 to <2 x bfloat>, !dbg !96
  %1161 = extractvalue { i32, i32, i32, i32 } %1158, 1, !dbg !96
  %1162 = bitcast i32 %1161 to <2 x bfloat>, !dbg !96
  %1163 = extractvalue { i32, i32, i32, i32 } %1158, 2, !dbg !96
  %1164 = bitcast i32 %1163 to <2 x bfloat>, !dbg !96
  %1165 = extractvalue { i32, i32, i32, i32 } %1158, 3, !dbg !96
  %1166 = bitcast i32 %1165 to <2 x bfloat>, !dbg !96
  %1167 = extractelement <2 x bfloat> %1160, i64 0, !dbg !96
  %1168 = extractelement <2 x bfloat> %1160, i64 1, !dbg !96
  %1169 = extractelement <2 x bfloat> %1162, i64 0, !dbg !96
  %1170 = extractelement <2 x bfloat> %1162, i64 1, !dbg !96
  %1171 = extractelement <2 x bfloat> %1164, i64 0, !dbg !96
  %1172 = extractelement <2 x bfloat> %1164, i64 1, !dbg !96
  %1173 = extractelement <2 x bfloat> %1166, i64 0, !dbg !96
  %1174 = extractelement <2 x bfloat> %1166, i64 1, !dbg !96
  %1175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %674, i1 %44) #5, !dbg !96
  %1176 = extractvalue { i32, i32, i32, i32 } %1175, 0, !dbg !96
  %1177 = bitcast i32 %1176 to <2 x bfloat>, !dbg !96
  %1178 = extractvalue { i32, i32, i32, i32 } %1175, 1, !dbg !96
  %1179 = bitcast i32 %1178 to <2 x bfloat>, !dbg !96
  %1180 = extractvalue { i32, i32, i32, i32 } %1175, 2, !dbg !96
  %1181 = bitcast i32 %1180 to <2 x bfloat>, !dbg !96
  %1182 = extractvalue { i32, i32, i32, i32 } %1175, 3, !dbg !96
  %1183 = bitcast i32 %1182 to <2 x bfloat>, !dbg !96
  %1184 = extractelement <2 x bfloat> %1177, i64 0, !dbg !96
  %1185 = extractelement <2 x bfloat> %1177, i64 1, !dbg !96
  %1186 = extractelement <2 x bfloat> %1179, i64 0, !dbg !96
  %1187 = extractelement <2 x bfloat> %1179, i64 1, !dbg !96
  %1188 = extractelement <2 x bfloat> %1181, i64 0, !dbg !96
  %1189 = extractelement <2 x bfloat> %1181, i64 1, !dbg !96
  %1190 = extractelement <2 x bfloat> %1183, i64 0, !dbg !96
  %1191 = extractelement <2 x bfloat> %1183, i64 1, !dbg !96
  %1192 = fpext bfloat %1167 to float, !dbg !97
  %1193 = fpext bfloat %1168 to float, !dbg !97
  %1194 = fpext bfloat %1169 to float, !dbg !97
  %1195 = fpext bfloat %1170 to float, !dbg !97
  %1196 = fpext bfloat %1171 to float, !dbg !97
  %1197 = fpext bfloat %1172 to float, !dbg !97
  %1198 = fpext bfloat %1173 to float, !dbg !97
  %1199 = fpext bfloat %1174 to float, !dbg !97
  %1200 = fpext bfloat %1184 to float, !dbg !97
  %1201 = fpext bfloat %1185 to float, !dbg !97
  %1202 = fpext bfloat %1186 to float, !dbg !97
  %1203 = fpext bfloat %1187 to float, !dbg !97
  %1204 = fpext bfloat %1188 to float, !dbg !97
  %1205 = fpext bfloat %1189 to float, !dbg !97
  %1206 = fpext bfloat %1190 to float, !dbg !97
  %1207 = fpext bfloat %1191 to float, !dbg !97
  %.inv = fcmp oge float %973, 0.000000e+00, !dbg !98
  %1208 = select i1 %.inv, float 0.000000e+00, float %973, !dbg !98
  %.inv17 = fcmp oge float %974, 0.000000e+00, !dbg !98
  %1209 = select i1 %.inv17, float 0.000000e+00, float %974, !dbg !98
  %1210 = fsub float 0.000000e+00, %1208, !dbg !100
  %1211 = fsub float 0.000000e+00, %1209, !dbg !100
  %.inv18 = fcmp ole float %1137, 0.000000e+00, !dbg !101
  %1212 = select i1 %.inv18, float 0.000000e+00, float %1137, !dbg !101
  %.inv19 = fcmp ole float %1138, 0.000000e+00, !dbg !101
  %1213 = select i1 %.inv19, float 0.000000e+00, float %1138, !dbg !101
  %1214 = fcmp ogt float %1210, %1212, !dbg !103
  %1215 = fcmp ogt float %1211, %1213, !dbg !103
  %1216 = fcmp uno float %1210, 0.000000e+00, !dbg !105
  %1217 = fcmp uno float %1211, 0.000000e+00, !dbg !105
  %1218 = or i1 %1216, %1214, !dbg !106
  %1219 = or i1 %1217, %1215, !dbg !106
  %1220 = select i1 %1218, float %1210, float %1212, !dbg !107
  %1221 = select i1 %1219, float %1211, float %1213, !dbg !107
  %1222 = fmul float %1220, 0x3F80204080000000, !dbg !108
  %1223 = fmul float %1221, 0x3F80204080000000, !dbg !108
  %1224 = fcmp ogt float %1222, 0x3EE4F8B580000000, !dbg !109
  %1225 = fcmp ogt float %1223, 0x3EE4F8B580000000, !dbg !109
  %1226 = fcmp uno float %1222, 0.000000e+00, !dbg !111
  %1227 = fcmp uno float %1223, 0.000000e+00, !dbg !111
  %1228 = or i1 %1224, %1226, !dbg !112
  %1229 = or i1 %1225, %1227, !dbg !112
  %1230 = select i1 %1228, float %1222, float 0x3EE4F8B580000000, !dbg !113
  %1231 = select i1 %1229, float %1223, float 0x3EE4F8B580000000, !dbg !113
  %1232 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1230), !dbg !114
  %1233 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1231), !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1234 = bitcast float %1232 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1234, i1 true) #5, !dbg !115
  %1235 = bitcast float %1233 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1235, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1236 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %386, !dbg !115
  %1237 = load float, ptr addrspace(3) %1236, align 8, !dbg !115
  %1238 = fmul float %1237, %1192, !dbg !115
  %1239 = fmul float %1237, %1193, !dbg !115
  %1240 = fmul float %1237, %1194, !dbg !115
  %1241 = fmul float %1237, %1195, !dbg !115
  %1242 = fmul float %1237, %1196, !dbg !115
  %1243 = fmul float %1237, %1197, !dbg !115
  %1244 = fmul float %1237, %1198, !dbg !115
  %1245 = fmul float %1237, %1199, !dbg !115
  %1246 = fmul float %1237, %1200, !dbg !115
  %1247 = fmul float %1237, %1201, !dbg !115
  %1248 = fmul float %1237, %1202, !dbg !115
  %1249 = fmul float %1237, %1203, !dbg !115
  %1250 = fmul float %1237, %1204, !dbg !115
  %1251 = fmul float %1237, %1205, !dbg !115
  %1252 = fmul float %1237, %1206, !dbg !115
  %1253 = fmul float %1237, %1207, !dbg !115
  %1254 = tail call float @llvm.nvvm.round.f(float %1238) #5, !dbg !116
  %1255 = tail call float @llvm.nvvm.round.f(float %1239) #5, !dbg !116
  %1256 = tail call float @llvm.nvvm.round.f(float %1240) #5, !dbg !116
  %1257 = tail call float @llvm.nvvm.round.f(float %1241) #5, !dbg !116
  %1258 = tail call float @llvm.nvvm.round.f(float %1242) #5, !dbg !116
  %1259 = tail call float @llvm.nvvm.round.f(float %1243) #5, !dbg !116
  %1260 = tail call float @llvm.nvvm.round.f(float %1244) #5, !dbg !116
  %1261 = tail call float @llvm.nvvm.round.f(float %1245) #5, !dbg !116
  %1262 = tail call float @llvm.nvvm.round.f(float %1246) #5, !dbg !116
  %1263 = tail call float @llvm.nvvm.round.f(float %1247) #5, !dbg !116
  %1264 = tail call float @llvm.nvvm.round.f(float %1248) #5, !dbg !116
  %1265 = tail call float @llvm.nvvm.round.f(float %1249) #5, !dbg !116
  %1266 = tail call float @llvm.nvvm.round.f(float %1250) #5, !dbg !116
  %1267 = tail call float @llvm.nvvm.round.f(float %1251) #5, !dbg !116
  %1268 = tail call float @llvm.nvvm.round.f(float %1252) #5, !dbg !116
  %1269 = tail call float @llvm.nvvm.round.f(float %1253) #5, !dbg !116
  %1270 = insertelement <4 x float> poison, float %1254, i64 0, !dbg !117
  %1271 = insertelement <4 x float> %1270, float %1255, i64 1, !dbg !117
  %1272 = insertelement <4 x float> %1271, float %1256, i64 2, !dbg !117
  %1273 = insertelement <4 x float> %1272, float %1257, i64 3, !dbg !117
  %1274 = fcmp ogt <4 x float> %1273, splat (float -1.270000e+02), !dbg !117
  %1275 = fcmp uno <4 x float> %1273, zeroinitializer, !dbg !119
  %1276 = or <4 x i1> %1274, %1275, !dbg !120
  %1277 = select <4 x i1> %1276, <4 x float> %1273, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1278 = fcmp olt <4 x float> %1277, splat (float 1.270000e+02), !dbg !122
  %1279 = fcmp uno <4 x float> %1277, zeroinitializer, !dbg !124
  %1280 = or <4 x i1> %1278, %1279, !dbg !125
  %1281 = fptosi <4 x float> %1277 to <4 x i8>, !dbg !126
  %1282 = select <4 x i1> %1280, <4 x i8> %1281, <4 x i8> splat (i8 127), !dbg !127
  %1283 = insertelement <4 x float> poison, float %1258, i64 0, !dbg !117
  %1284 = insertelement <4 x float> %1283, float %1259, i64 1, !dbg !117
  %1285 = insertelement <4 x float> %1284, float %1260, i64 2, !dbg !117
  %1286 = insertelement <4 x float> %1285, float %1261, i64 3, !dbg !117
  %1287 = fcmp ogt <4 x float> %1286, splat (float -1.270000e+02), !dbg !117
  %1288 = fcmp uno <4 x float> %1286, zeroinitializer, !dbg !119
  %1289 = or <4 x i1> %1287, %1288, !dbg !120
  %1290 = select <4 x i1> %1289, <4 x float> %1286, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1291 = fcmp olt <4 x float> %1290, splat (float 1.270000e+02), !dbg !122
  %1292 = fcmp uno <4 x float> %1290, zeroinitializer, !dbg !124
  %1293 = or <4 x i1> %1291, %1292, !dbg !125
  %1294 = fptosi <4 x float> %1290 to <4 x i8>, !dbg !126
  %1295 = select <4 x i1> %1293, <4 x i8> %1294, <4 x i8> splat (i8 127), !dbg !127
  %1296 = insertelement <4 x float> poison, float %1262, i64 0, !dbg !117
  %1297 = insertelement <4 x float> %1296, float %1263, i64 1, !dbg !117
  %1298 = insertelement <4 x float> %1297, float %1264, i64 2, !dbg !117
  %1299 = insertelement <4 x float> %1298, float %1265, i64 3, !dbg !117
  %1300 = fcmp ogt <4 x float> %1299, splat (float -1.270000e+02), !dbg !117
  %1301 = fcmp uno <4 x float> %1299, zeroinitializer, !dbg !119
  %1302 = or <4 x i1> %1300, %1301, !dbg !120
  %1303 = select <4 x i1> %1302, <4 x float> %1299, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1304 = fcmp olt <4 x float> %1303, splat (float 1.270000e+02), !dbg !122
  %1305 = fcmp uno <4 x float> %1303, zeroinitializer, !dbg !124
  %1306 = or <4 x i1> %1304, %1305, !dbg !125
  %1307 = fptosi <4 x float> %1303 to <4 x i8>, !dbg !126
  %1308 = select <4 x i1> %1306, <4 x i8> %1307, <4 x i8> splat (i8 127), !dbg !127
  %1309 = insertelement <4 x float> poison, float %1266, i64 0, !dbg !117
  %1310 = insertelement <4 x float> %1309, float %1267, i64 1, !dbg !117
  %1311 = insertelement <4 x float> %1310, float %1268, i64 2, !dbg !117
  %1312 = insertelement <4 x float> %1311, float %1269, i64 3, !dbg !117
  %1313 = fcmp ogt <4 x float> %1312, splat (float -1.270000e+02), !dbg !117
  %1314 = fcmp uno <4 x float> %1312, zeroinitializer, !dbg !119
  %1315 = or <4 x i1> %1313, %1314, !dbg !120
  %1316 = select <4 x i1> %1315, <4 x float> %1312, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1317 = fcmp olt <4 x float> %1316, splat (float 1.270000e+02), !dbg !122
  %1318 = fcmp uno <4 x float> %1316, zeroinitializer, !dbg !124
  %1319 = or <4 x i1> %1317, %1318, !dbg !125
  %1320 = fptosi <4 x float> %1316 to <4 x i8>, !dbg !126
  %1321 = select <4 x i1> %1319, <4 x i8> %1320, <4 x i8> splat (i8 127), !dbg !127
  %1322 = getelementptr i8, ptr addrspace(1) %12, i64 %39, !dbg !128
  %1323 = bitcast <4 x i8> %1282 to i32, !dbg !129
  %1324 = bitcast <4 x i8> %1295 to i32, !dbg !129
  %1325 = bitcast <4 x i8> %1308 to i32, !dbg !129
  %1326 = bitcast <4 x i8> %1321 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1323, i32 %1324, i32 %1325, i32 %1326, ptr addrspace(1) %1322, i1 %44) #5, !dbg !129
  %1327 = getelementptr i8, ptr addrspace(1) %13, i64 %39, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1323, i32 %1324, i32 %1325, i32 %1326, ptr addrspace(1) %1327, i1 %44) #5, !dbg !131
  %1328 = getelementptr i8, ptr addrspace(1) %14, i64 %39, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1323, i32 %1324, i32 %1325, i32 %1326, ptr addrspace(1) %1328, i1 %44) #5, !dbg !133
  %1329 = getelementptr i8, ptr addrspace(1) %15, i64 %39, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1323, i32 %1324, i32 %1325, i32 %1326, ptr addrspace(1) %1329, i1 %44) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
