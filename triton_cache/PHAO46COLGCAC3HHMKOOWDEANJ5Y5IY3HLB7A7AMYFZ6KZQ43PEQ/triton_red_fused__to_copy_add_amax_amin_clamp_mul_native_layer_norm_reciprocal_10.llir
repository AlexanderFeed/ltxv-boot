; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %19, 6, !dbg !11
  %20 = and i32 %.lobit3, 3, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %20, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 1, !dbg !14
  %26 = and i32 %25, 510, !dbg !14
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 504, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = sext i32 %22 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !20
  %52 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !20
  %53 = fpext bfloat %52 to float, !dbg !20
  %54 = fsub float 0.000000e+00, %53, !dbg !24
  %.inv5 = fcmp ole bfloat %50, 0xR0000, !dbg !25
  %55 = select i1 %.inv5, bfloat 0xR0000, bfloat %50, !dbg !25
  %56 = fpext bfloat %55 to float, !dbg !25
  %57 = fcmp ogt float %54, %56, !dbg !27
  %58 = fcmp uno float %54, 0.000000e+00, !dbg !29
  %59 = or i1 %58, %57, !dbg !30
  %60 = select i1 %59, float %54, float %56, !dbg !31
  %61 = fmul float %60, 0x3F80204080000000, !dbg !32
  %62 = fcmp ogt float %61, 0x3EE4F8B580000000, !dbg !33
  %63 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %64 = or i1 %62, %63, !dbg !36
  %65 = select i1 %64, float %61, float 0x3EE4F8B580000000, !dbg !37
  %66 = or disjoint i32 %51, %28
  %67 = or disjoint i32 %51, %29
  %68 = and i32 %27, 2040
  %69 = lshr i32 %27, 5
  %.idx36 = and i32 %69, 48
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx36
  %71 = getelementptr bfloat, ptr addrspace(3) %70, i32 %68
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 1040
  %74 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 2080
  %75 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 3120
  %76 = getelementptr float, ptr addrspace(3) %70, i32 %68
  %77 = or disjoint i32 %68, 4
  %78 = lshr i32 %27, 7
  %79 = and i32 %78, 12
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %83 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 2064
  %84 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 4128
  %85 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 6192
  %86 = zext nneg i32 %26 to i64, !dbg !38
  %87 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 3122
  %88 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !39
  %89 = shufflevector <8 x i1> %88, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %90 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 4
  %91 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 8
  %92 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 12
  br label %93, !dbg !38

93:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %110 = phi <8 x float> [ zeroinitializer, %16 ], [ %298, %._crit_edge ]
  %111 = or disjoint i64 %indvars.iv, %86, !dbg !40
  %112 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %113 = add i32 %66, %112, !dbg !41
  %114 = add i32 %67, %112, !dbg !41
  %115 = sext i32 %113 to i64, !dbg !42
  %116 = getelementptr bfloat, ptr addrspace(1) %0, i64 %115, !dbg !42
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %116, i1 %23) #5, !dbg !43
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !43
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !43
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !43
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %118, i32 %119, i32 %120, i32 %121, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %122 = add nuw nsw i64 %111, 6144, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !46
  %124 = getelementptr bfloat, ptr addrspace(1) %2, i64 %122, !dbg !47
  %125 = getelementptr i32, ptr addrspace(1) %3, i64 %115, !dbg !48
  %126 = sext i32 %114 to i64, !dbg !48
  %127 = getelementptr i32, ptr addrspace(1) %3, i64 %126, !dbg !48
  %128 = getelementptr bfloat, ptr addrspace(1) %6, i64 %111, !dbg !49
  %129 = getelementptr bfloat, ptr addrspace(1) %7, i64 %111, !dbg !50
  %130 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !44
  %131 = load <2 x bfloat>, ptr addrspace(3) %73, align 4, !dbg !44
  %132 = load <2 x bfloat>, ptr addrspace(3) %74, align 4, !dbg !44
  %133 = load <2 x bfloat>, ptr addrspace(3) %75, align 4, !dbg !44
  %134 = shufflevector <2 x bfloat> %130, <2 x bfloat> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %135 = shufflevector <2 x bfloat> %132, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %136 = shufflevector <8 x bfloat> %134, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !44
  %137 = shufflevector <2 x bfloat> %133, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %138 = shufflevector <8 x bfloat> %136, <8 x bfloat> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !44
  %139 = fpext <8 x bfloat> %138 to <8 x float>, !dbg !44
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %123, i1 true) #5, !dbg !51
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !51
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !51
  %143 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !51
  %144 = insertelement <2 x i32> %143, i32 %142, i64 1, !dbg !51
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !51
  %146 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %124, i1 true) #5, !dbg !52
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !52
  %148 = fpext <2 x bfloat> %147 to <2 x float>, !dbg !53
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %23) #5, !dbg !54
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !54
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !54
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !54
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !54
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %23) #5, !dbg !54
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !54
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !54
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !54
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !54
  %159 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %128, i1 true) #5, !dbg !55
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !55
  %161 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !56
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !56
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %129, i1 true) #5, !dbg !57
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !57
  %165 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !58
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !58
  %167 = fadd <2 x float> %145, %148, !dbg !59
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !59
  %169 = sitofp i32 %150 to float, !dbg !60
  %170 = sitofp i32 %151 to float, !dbg !60
  %171 = sitofp i32 %152 to float, !dbg !60
  %172 = sitofp i32 %153 to float, !dbg !60
  %173 = sitofp i32 %155 to float, !dbg !60
  %174 = sitofp i32 %156 to float, !dbg !60
  %175 = sitofp i32 %157 to float, !dbg !60
  %176 = sitofp i32 %158 to float, !dbg !60
  %177 = fmul float %65, %169, !dbg !61
  %178 = fmul float %65, %170, !dbg !61
  %179 = fmul float %65, %171, !dbg !61
  %180 = fmul float %65, %172, !dbg !61
  %181 = fmul float %65, %173, !dbg !61
  %182 = fmul float %65, %174, !dbg !61
  %183 = fmul float %65, %175, !dbg !61
  %184 = fmul float %65, %176, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %185 = bitcast float %177 to i32, !dbg !61
  %186 = bitcast float %178 to i32, !dbg !61
  %187 = bitcast float %179 to i32, !dbg !61
  %188 = bitcast float %180 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %76, i32 %185, i32 %186, i32 %187, i32 %188, i1 true) #5, !dbg !61
  %189 = bitcast float %181 to i32, !dbg !61
  %190 = bitcast float %182 to i32, !dbg !61
  %191 = bitcast float %183 to i32, !dbg !61
  %192 = bitcast float %184 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %81, i32 %189, i32 %190, i32 %191, i32 %192, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %193 = load <2 x float>, ptr addrspace(3) %82, align 8, !dbg !61
  %194 = load <2 x float>, ptr addrspace(3) %83, align 8, !dbg !61
  %195 = load <2 x float>, ptr addrspace(3) %84, align 8, !dbg !61
  %196 = load <2 x float>, ptr addrspace(3) %85, align 8, !dbg !61
  %197 = shufflevector <2 x float> %193, <2 x float> %194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %198 = shufflevector <2 x float> %195, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %199 = shufflevector <8 x float> %197, <8 x float> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !62
  %200 = shufflevector <2 x float> %196, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %201 = shufflevector <8 x float> %199, <8 x float> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !62
  %202 = fmul <8 x float> %201, %162, !dbg !62
  %203 = fadd <8 x float> %202, %166, !dbg !63
  %204 = fmul <8 x float> %168, %203, !dbg !64
  %205 = fadd <8 x float> %204, %139, !dbg !65
  %206 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %206, label %._crit_edge, label %207, !dbg !67

207:                                              ; preds = %93
  %208 = fsub <8 x float> %205, %110, !dbg !69
  %209 = extractelement <8 x float> %208, i64 0, !dbg !69
  %210 = fsub <8 x float> %205, %110, !dbg !69
  %211 = extractelement <8 x float> %210, i64 1, !dbg !69
  %212 = fsub <8 x float> %205, %110, !dbg !69
  %213 = extractelement <8 x float> %212, i64 2, !dbg !69
  %214 = fsub <8 x float> %205, %110, !dbg !69
  %215 = extractelement <8 x float> %214, i64 3, !dbg !69
  %216 = fsub <8 x float> %205, %110, !dbg !69
  %217 = extractelement <8 x float> %216, i64 4, !dbg !69
  %218 = fsub <8 x float> %205, %110, !dbg !69
  %219 = extractelement <8 x float> %218, i64 5, !dbg !69
  %220 = fsub <8 x float> %205, %110, !dbg !69
  %221 = extractelement <8 x float> %220, i64 6, !dbg !69
  %222 = fsub <8 x float> %205, %110, !dbg !69
  %223 = extractelement <8 x float> %222, i64 7, !dbg !69
  %224 = fadd float %94, 1.000000e+00, !dbg !70
  %225 = fadd float %95, 1.000000e+00, !dbg !70
  %226 = fadd float %96, 1.000000e+00, !dbg !70
  %227 = fadd float %97, 1.000000e+00, !dbg !70
  %228 = fadd float %98, 1.000000e+00, !dbg !70
  %229 = fadd float %99, 1.000000e+00, !dbg !70
  %230 = fadd float %100, 1.000000e+00, !dbg !70
  %231 = fadd float %101, 1.000000e+00, !dbg !70
  %232 = tail call float @llvm.nvvm.div.full(float %209, float %224), !dbg !71
  %233 = tail call float @llvm.nvvm.div.full(float %211, float %225), !dbg !71
  %234 = tail call float @llvm.nvvm.div.full(float %213, float %226), !dbg !71
  %235 = tail call float @llvm.nvvm.div.full(float %215, float %227), !dbg !71
  %236 = tail call float @llvm.nvvm.div.full(float %217, float %228), !dbg !71
  %237 = tail call float @llvm.nvvm.div.full(float %219, float %229), !dbg !71
  %238 = tail call float @llvm.nvvm.div.full(float %221, float %230), !dbg !71
  %239 = tail call float @llvm.nvvm.div.full(float %223, float %231), !dbg !71
  %240 = insertelement <8 x float> poison, float %232, i64 0, !dbg !72
  %241 = insertelement <8 x float> %240, float %233, i64 1, !dbg !72
  %242 = insertelement <8 x float> %241, float %234, i64 2, !dbg !72
  %243 = insertelement <8 x float> %242, float %235, i64 3, !dbg !72
  %244 = insertelement <8 x float> %243, float %236, i64 4, !dbg !72
  %245 = insertelement <8 x float> %244, float %237, i64 5, !dbg !72
  %246 = insertelement <8 x float> %245, float %238, i64 6, !dbg !72
  %247 = insertelement <8 x float> %246, float %239, i64 7, !dbg !72
  %248 = fadd <8 x float> %110, %247, !dbg !72
  %249 = fsub <8 x float> %205, %248, !dbg !73
  %250 = fsub <8 x float> %205, %248, !dbg !73
  %251 = fsub <8 x float> %205, %248, !dbg !73
  %252 = fsub <8 x float> %205, %248, !dbg !73
  %253 = fsub <8 x float> %205, %248, !dbg !73
  %254 = fsub <8 x float> %205, %248, !dbg !73
  %255 = fsub <8 x float> %205, %248, !dbg !73
  %256 = fsub <8 x float> %205, %248, !dbg !73
  %257 = fmul <8 x float> %208, %249, !dbg !74
  %258 = extractelement <8 x float> %257, i64 0, !dbg !74
  %259 = fmul <8 x float> %210, %250, !dbg !74
  %260 = extractelement <8 x float> %259, i64 1, !dbg !74
  %261 = fmul <8 x float> %212, %251, !dbg !74
  %262 = extractelement <8 x float> %261, i64 2, !dbg !74
  %263 = fmul <8 x float> %214, %252, !dbg !74
  %264 = extractelement <8 x float> %263, i64 3, !dbg !74
  %265 = fmul <8 x float> %216, %253, !dbg !74
  %266 = extractelement <8 x float> %265, i64 4, !dbg !74
  %267 = fmul <8 x float> %218, %254, !dbg !74
  %268 = extractelement <8 x float> %267, i64 5, !dbg !74
  %269 = fmul <8 x float> %220, %255, !dbg !74
  %270 = extractelement <8 x float> %269, i64 6, !dbg !74
  %271 = fmul <8 x float> %222, %256, !dbg !74
  %272 = extractelement <8 x float> %271, i64 7, !dbg !74
  %273 = fadd float %102, %258, !dbg !75
  %274 = fadd float %103, %260, !dbg !75
  %275 = fadd float %104, %262, !dbg !75
  %276 = fadd float %105, %264, !dbg !75
  %277 = fadd float %106, %266, !dbg !75
  %278 = fadd float %107, %268, !dbg !75
  %279 = fadd float %108, %270, !dbg !75
  %280 = fadd float %109, %272, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %93, %207
  %281 = phi float [ %273, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %282 = phi float [ %274, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %283 = phi float [ %275, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %284 = phi float [ %276, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %285 = phi float [ %277, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %286 = phi float [ %278, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %287 = phi float [ %279, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %288 = phi float [ %280, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %289 = phi float [ %224, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %290 = phi float [ %225, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %291 = phi float [ %226, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %292 = phi float [ %227, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %293 = phi float [ %228, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %294 = phi float [ %229, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %295 = phi float [ %230, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %296 = phi float [ %231, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %297 = phi <8 x float> [ %248, %207 ], [ %205, %93 ]
  %298 = select <8 x i1> %89, <8 x float> %297, <8 x float> %110, !dbg !39
  %299 = select i1 %24, float %281, float %102, !dbg !76
  %300 = select i1 %24, float %282, float %103, !dbg !76
  %301 = select i1 %24, float %283, float %104, !dbg !76
  %302 = select i1 %24, float %284, float %105, !dbg !76
  %303 = select i1 %24, float %285, float %106, !dbg !76
  %304 = select i1 %24, float %286, float %107, !dbg !76
  %305 = select i1 %24, float %287, float %108, !dbg !76
  %306 = select i1 %24, float %288, float %109, !dbg !76
  %307 = select i1 %24, float %289, float %94, !dbg !77
  %308 = select i1 %24, float %290, float %95, !dbg !77
  %309 = select i1 %24, float %291, float %96, !dbg !77
  %310 = select i1 %24, float %292, float %97, !dbg !77
  %311 = select i1 %24, float %293, float %98, !dbg !77
  %312 = select i1 %24, float %294, float %99, !dbg !77
  %313 = select i1 %24, float %295, float %100, !dbg !77
  %314 = select i1 %24, float %296, float %101, !dbg !77
  %315 = getelementptr bfloat, ptr addrspace(1) %8, i64 %115, !dbg !78
  %316 = extractelement <8 x float> %205, i64 0, !dbg !79
  %317 = fptrunc float %316 to bfloat, !dbg !79
  %318 = extractelement <8 x float> %205, i64 1, !dbg !79
  %319 = fptrunc float %318 to bfloat, !dbg !79
  %320 = extractelement <8 x float> %205, i64 2, !dbg !79
  %321 = fptrunc float %320 to bfloat, !dbg !79
  %322 = extractelement <8 x float> %205, i64 3, !dbg !79
  %323 = fptrunc float %322 to bfloat, !dbg !79
  %324 = extractelement <8 x float> %205, i64 4, !dbg !79
  %325 = fptrunc float %324 to bfloat, !dbg !79
  %326 = extractelement <8 x float> %205, i64 5, !dbg !79
  %327 = fptrunc float %326 to bfloat, !dbg !79
  %328 = extractelement <8 x float> %205, i64 6, !dbg !79
  %329 = fptrunc float %328 to bfloat, !dbg !79
  %330 = extractelement <8 x float> %205, i64 7, !dbg !79
  %331 = fptrunc float %330 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %332 = bitcast bfloat %317 to i16, !dbg !79
  %333 = bitcast bfloat %319 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %72, i16 %332, i16 %333, i1 true) #5, !dbg !79
  %334 = bitcast bfloat %321 to i16, !dbg !79
  %335 = bitcast bfloat %323 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %73, i16 %334, i16 %335, i1 true) #5, !dbg !79
  %336 = bitcast bfloat %325 to i16, !dbg !79
  %337 = bitcast bfloat %327 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %74, i16 %336, i16 %337, i1 true) #5, !dbg !79
  %338 = bitcast bfloat %329 to i16, !dbg !79
  %339 = bitcast bfloat %331 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %75, i16 %338, i16 %339, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.extract116 = load i32, ptr addrspace(3) %71, align 16, !dbg !79
  %.extract118 = load i32, ptr addrspace(3) %90, align 4, !dbg !79
  %.extract120 = load i32, ptr addrspace(3) %91, align 8, !dbg !79
  %.extract122 = load i32, ptr addrspace(3) %92, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %315, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %340 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %340, label %93, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %341 = lshr i32 %19, 5, !dbg !11
  %342 = and i32 %19, 3, !dbg !11
  %343 = or disjoint i32 %18, %342, !dbg !12
  %344 = icmp slt i32 %343, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %345 = extractelement <8 x float> %298, i64 0, !dbg !82
  %346 = extractelement <8 x float> %298, i64 1, !dbg !82
  %347 = fsub float %346, %345, !dbg !82
  %348 = fadd float %307, %308, !dbg !84
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !85
  %350 = tail call float @llvm.nvvm.div.full(float %308, float %348), !dbg !86
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !87
  %352 = fmul float %347, %351, !dbg !88
  %353 = fadd float %345, %352, !dbg !89
  %354 = fadd float %299, %300, !dbg !90
  %355 = fmul float %347, %347, !dbg !91
  %356 = fmul float %355, %307, !dbg !92
  %357 = fmul float %356, %351, !dbg !93
  %358 = fadd float %354, %357, !dbg !94
  %359 = extractelement <8 x float> %298, i64 2, !dbg !82
  %360 = extractelement <8 x float> %298, i64 3, !dbg !82
  %361 = fsub float %360, %359, !dbg !82
  %362 = fadd float %309, %310, !dbg !84
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !85
  %364 = tail call float @llvm.nvvm.div.full(float %310, float %362), !dbg !86
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !87
  %366 = fmul float %361, %365, !dbg !88
  %367 = fadd float %359, %366, !dbg !89
  %368 = fadd float %301, %302, !dbg !90
  %369 = fmul float %361, %361, !dbg !91
  %370 = fmul float %369, %309, !dbg !92
  %371 = fmul float %370, %365, !dbg !93
  %372 = fadd float %368, %371, !dbg !94
  %373 = extractelement <8 x float> %298, i64 4, !dbg !82
  %374 = extractelement <8 x float> %298, i64 5, !dbg !82
  %375 = fsub float %374, %373, !dbg !82
  %376 = fadd float %311, %312, !dbg !84
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !85
  %378 = tail call float @llvm.nvvm.div.full(float %312, float %376), !dbg !86
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !87
  %380 = fmul float %375, %379, !dbg !88
  %381 = fadd float %373, %380, !dbg !89
  %382 = fadd float %303, %304, !dbg !90
  %383 = fmul float %375, %375, !dbg !91
  %384 = fmul float %383, %311, !dbg !92
  %385 = fmul float %384, %379, !dbg !93
  %386 = fadd float %382, %385, !dbg !94
  %387 = extractelement <8 x float> %298, i64 6, !dbg !82
  %388 = extractelement <8 x float> %298, i64 7, !dbg !82
  %389 = fsub float %388, %387, !dbg !82
  %390 = fadd float %313, %314, !dbg !84
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !85
  %392 = tail call float @llvm.nvvm.div.full(float %314, float %390), !dbg !86
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !87
  %394 = fmul float %389, %393, !dbg !88
  %395 = fadd float %387, %394, !dbg !89
  %396 = fadd float %305, %306, !dbg !90
  %397 = fmul float %389, %389, !dbg !91
  %398 = fmul float %397, %313, !dbg !92
  %399 = fmul float %398, %393, !dbg !93
  %400 = fadd float %396, %399, !dbg !94
  %401 = bitcast float %353 to i32, !dbg !80
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 16, i32 31), !dbg !80
  %403 = bitcast i32 %402 to float, !dbg !80
  %404 = bitcast float %358 to i32, !dbg !80
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 16, i32 31), !dbg !80
  %406 = bitcast i32 %405 to float, !dbg !80
  %407 = bitcast float %348 to i32, !dbg !80
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 16, i32 31), !dbg !80
  %409 = bitcast i32 %408 to float, !dbg !80
  %410 = fsub float %403, %353, !dbg !82
  %411 = fadd float %348, %409, !dbg !84
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !85
  %413 = tail call float @llvm.nvvm.div.full(float %409, float %411), !dbg !86
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !87
  %415 = fmul float %410, %414, !dbg !88
  %416 = fadd float %353, %415, !dbg !89
  %417 = fadd float %358, %406, !dbg !90
  %418 = fmul float %410, %410, !dbg !91
  %419 = fmul float %348, %418, !dbg !92
  %420 = fmul float %419, %414, !dbg !93
  %421 = fadd float %417, %420, !dbg !94
  %422 = bitcast float %416 to i32, !dbg !80
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 8, i32 31), !dbg !80
  %424 = bitcast i32 %423 to float, !dbg !80
  %425 = bitcast float %421 to i32, !dbg !80
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 8, i32 31), !dbg !80
  %427 = bitcast i32 %426 to float, !dbg !80
  %428 = bitcast float %411 to i32, !dbg !80
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 8, i32 31), !dbg !80
  %430 = bitcast i32 %429 to float, !dbg !80
  %431 = fsub float %424, %416, !dbg !82
  %432 = fadd float %411, %430, !dbg !84
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !85
  %434 = tail call float @llvm.nvvm.div.full(float %430, float %432), !dbg !86
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !87
  %436 = fmul float %431, %435, !dbg !88
  %437 = fadd float %416, %436, !dbg !89
  %438 = fadd float %421, %427, !dbg !90
  %439 = fmul float %431, %431, !dbg !91
  %440 = fmul float %411, %439, !dbg !92
  %441 = fmul float %435, %440, !dbg !93
  %442 = fadd float %438, %441, !dbg !94
  %443 = bitcast float %437 to i32, !dbg !80
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 4, i32 31), !dbg !80
  %445 = bitcast i32 %444 to float, !dbg !80
  %446 = bitcast float %442 to i32, !dbg !80
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 4, i32 31), !dbg !80
  %448 = bitcast i32 %447 to float, !dbg !80
  %449 = bitcast float %432 to i32, !dbg !80
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 4, i32 31), !dbg !80
  %451 = bitcast i32 %450 to float, !dbg !80
  %452 = fsub float %445, %437, !dbg !82
  %453 = fadd float %432, %451, !dbg !84
  %454 = fcmp oeq float %453, 0.000000e+00, !dbg !85
  %455 = tail call float @llvm.nvvm.div.full(float %451, float %453), !dbg !86
  %456 = select i1 %454, float 0.000000e+00, float %455, !dbg !87
  %457 = fmul float %452, %456, !dbg !88
  %458 = fadd float %437, %457, !dbg !89
  %459 = fadd float %442, %448, !dbg !90
  %460 = fmul float %452, %452, !dbg !91
  %461 = fmul float %432, %460, !dbg !92
  %462 = fmul float %456, %461, !dbg !93
  %463 = fadd float %459, %462, !dbg !94
  %464 = bitcast float %458 to i32, !dbg !80
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !80
  %466 = bitcast i32 %465 to float, !dbg !80
  %467 = bitcast float %463 to i32, !dbg !80
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 2, i32 31), !dbg !80
  %469 = bitcast i32 %468 to float, !dbg !80
  %470 = bitcast float %453 to i32, !dbg !80
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !80
  %472 = bitcast i32 %471 to float, !dbg !80
  %473 = fsub float %466, %458, !dbg !82
  %474 = fadd float %453, %472, !dbg !84
  %475 = fcmp oeq float %474, 0.000000e+00, !dbg !85
  %476 = tail call float @llvm.nvvm.div.full(float %472, float %474), !dbg !86
  %477 = select i1 %475, float 0.000000e+00, float %476, !dbg !87
  %478 = fmul float %473, %477, !dbg !88
  %479 = fadd float %458, %478, !dbg !89
  %480 = fadd float %463, %469, !dbg !90
  %481 = fmul float %473, %473, !dbg !91
  %482 = fmul float %453, %481, !dbg !92
  %483 = fmul float %477, %482, !dbg !93
  %484 = fadd float %480, %483, !dbg !94
  %485 = bitcast float %479 to i32, !dbg !80
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !80
  %487 = bitcast i32 %486 to float, !dbg !80
  %488 = bitcast float %484 to i32, !dbg !80
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 1, i32 31), !dbg !80
  %490 = bitcast i32 %489 to float, !dbg !80
  %491 = bitcast float %474 to i32, !dbg !80
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !80
  %493 = bitcast i32 %492 to float, !dbg !80
  %494 = fsub float %487, %479, !dbg !82
  %495 = fadd float %474, %493, !dbg !84
  %496 = fcmp oeq float %495, 0.000000e+00, !dbg !85
  %497 = tail call float @llvm.nvvm.div.full(float %493, float %495), !dbg !86
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !87
  %499 = fmul float %494, %498, !dbg !88
  %500 = fadd float %479, %499, !dbg !89
  %501 = fadd float %484, %490, !dbg !90
  %502 = fmul float %494, %494, !dbg !91
  %503 = fmul float %474, %502, !dbg !92
  %504 = fmul float %498, %503, !dbg !93
  %505 = fadd float %501, %504, !dbg !94
  %506 = bitcast float %367 to i32, !dbg !80
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 16, i32 31), !dbg !80
  %508 = bitcast i32 %507 to float, !dbg !80
  %509 = bitcast float %372 to i32, !dbg !80
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 16, i32 31), !dbg !80
  %511 = bitcast i32 %510 to float, !dbg !80
  %512 = bitcast float %362 to i32, !dbg !80
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 16, i32 31), !dbg !80
  %514 = bitcast i32 %513 to float, !dbg !80
  %515 = fsub float %508, %367, !dbg !82
  %516 = fadd float %362, %514, !dbg !84
  %517 = fcmp oeq float %516, 0.000000e+00, !dbg !85
  %518 = tail call float @llvm.nvvm.div.full(float %514, float %516), !dbg !86
  %519 = select i1 %517, float 0.000000e+00, float %518, !dbg !87
  %520 = fmul float %515, %519, !dbg !88
  %521 = fadd float %367, %520, !dbg !89
  %522 = fadd float %372, %511, !dbg !90
  %523 = fmul float %515, %515, !dbg !91
  %524 = fmul float %362, %523, !dbg !92
  %525 = fmul float %524, %519, !dbg !93
  %526 = fadd float %522, %525, !dbg !94
  %527 = bitcast float %521 to i32, !dbg !80
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 8, i32 31), !dbg !80
  %529 = bitcast i32 %528 to float, !dbg !80
  %530 = bitcast float %526 to i32, !dbg !80
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 8, i32 31), !dbg !80
  %532 = bitcast i32 %531 to float, !dbg !80
  %533 = bitcast float %516 to i32, !dbg !80
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 8, i32 31), !dbg !80
  %535 = bitcast i32 %534 to float, !dbg !80
  %536 = fsub float %529, %521, !dbg !82
  %537 = fadd float %516, %535, !dbg !84
  %538 = fcmp oeq float %537, 0.000000e+00, !dbg !85
  %539 = tail call float @llvm.nvvm.div.full(float %535, float %537), !dbg !86
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !87
  %541 = fmul float %536, %540, !dbg !88
  %542 = fadd float %521, %541, !dbg !89
  %543 = fadd float %526, %532, !dbg !90
  %544 = fmul float %536, %536, !dbg !91
  %545 = fmul float %516, %544, !dbg !92
  %546 = fmul float %540, %545, !dbg !93
  %547 = fadd float %543, %546, !dbg !94
  %548 = bitcast float %542 to i32, !dbg !80
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 4, i32 31), !dbg !80
  %550 = bitcast i32 %549 to float, !dbg !80
  %551 = bitcast float %547 to i32, !dbg !80
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 4, i32 31), !dbg !80
  %553 = bitcast i32 %552 to float, !dbg !80
  %554 = bitcast float %537 to i32, !dbg !80
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 4, i32 31), !dbg !80
  %556 = bitcast i32 %555 to float, !dbg !80
  %557 = fsub float %550, %542, !dbg !82
  %558 = fadd float %537, %556, !dbg !84
  %559 = fcmp oeq float %558, 0.000000e+00, !dbg !85
  %560 = tail call float @llvm.nvvm.div.full(float %556, float %558), !dbg !86
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !87
  %562 = fmul float %557, %561, !dbg !88
  %563 = fadd float %542, %562, !dbg !89
  %564 = fadd float %547, %553, !dbg !90
  %565 = fmul float %557, %557, !dbg !91
  %566 = fmul float %537, %565, !dbg !92
  %567 = fmul float %561, %566, !dbg !93
  %568 = fadd float %564, %567, !dbg !94
  %569 = bitcast float %563 to i32, !dbg !80
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 2, i32 31), !dbg !80
  %571 = bitcast i32 %570 to float, !dbg !80
  %572 = bitcast float %568 to i32, !dbg !80
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 2, i32 31), !dbg !80
  %574 = bitcast i32 %573 to float, !dbg !80
  %575 = bitcast float %558 to i32, !dbg !80
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 2, i32 31), !dbg !80
  %577 = bitcast i32 %576 to float, !dbg !80
  %578 = fsub float %571, %563, !dbg !82
  %579 = fadd float %558, %577, !dbg !84
  %580 = fcmp oeq float %579, 0.000000e+00, !dbg !85
  %581 = tail call float @llvm.nvvm.div.full(float %577, float %579), !dbg !86
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !87
  %583 = fmul float %578, %582, !dbg !88
  %584 = fadd float %563, %583, !dbg !89
  %585 = fadd float %568, %574, !dbg !90
  %586 = fmul float %578, %578, !dbg !91
  %587 = fmul float %558, %586, !dbg !92
  %588 = fmul float %582, %587, !dbg !93
  %589 = fadd float %585, %588, !dbg !94
  %590 = bitcast float %584 to i32, !dbg !80
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 1, i32 31), !dbg !80
  %592 = bitcast i32 %591 to float, !dbg !80
  %593 = bitcast float %589 to i32, !dbg !80
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 1, i32 31), !dbg !80
  %595 = bitcast i32 %594 to float, !dbg !80
  %596 = bitcast float %579 to i32, !dbg !80
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 1, i32 31), !dbg !80
  %598 = bitcast i32 %597 to float, !dbg !80
  %599 = fsub float %592, %584, !dbg !82
  %600 = fadd float %579, %598, !dbg !84
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !85
  %602 = tail call float @llvm.nvvm.div.full(float %598, float %600), !dbg !86
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !87
  %604 = fmul float %599, %603, !dbg !88
  %605 = fadd float %584, %604, !dbg !89
  %606 = fadd float %589, %595, !dbg !90
  %607 = fmul float %599, %599, !dbg !91
  %608 = fmul float %579, %607, !dbg !92
  %609 = fmul float %603, %608, !dbg !93
  %610 = fadd float %606, %609, !dbg !94
  %611 = bitcast float %381 to i32, !dbg !80
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 16, i32 31), !dbg !80
  %613 = bitcast i32 %612 to float, !dbg !80
  %614 = bitcast float %386 to i32, !dbg !80
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 16, i32 31), !dbg !80
  %616 = bitcast i32 %615 to float, !dbg !80
  %617 = bitcast float %376 to i32, !dbg !80
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 16, i32 31), !dbg !80
  %619 = bitcast i32 %618 to float, !dbg !80
  %620 = fsub float %613, %381, !dbg !82
  %621 = fadd float %376, %619, !dbg !84
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !85
  %623 = tail call float @llvm.nvvm.div.full(float %619, float %621), !dbg !86
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !87
  %625 = fmul float %620, %624, !dbg !88
  %626 = fadd float %381, %625, !dbg !89
  %627 = fadd float %386, %616, !dbg !90
  %628 = fmul float %620, %620, !dbg !91
  %629 = fmul float %376, %628, !dbg !92
  %630 = fmul float %629, %624, !dbg !93
  %631 = fadd float %627, %630, !dbg !94
  %632 = bitcast float %626 to i32, !dbg !80
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 8, i32 31), !dbg !80
  %634 = bitcast i32 %633 to float, !dbg !80
  %635 = bitcast float %631 to i32, !dbg !80
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 8, i32 31), !dbg !80
  %637 = bitcast i32 %636 to float, !dbg !80
  %638 = bitcast float %621 to i32, !dbg !80
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 8, i32 31), !dbg !80
  %640 = bitcast i32 %639 to float, !dbg !80
  %641 = fsub float %634, %626, !dbg !82
  %642 = fadd float %621, %640, !dbg !84
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !85
  %644 = tail call float @llvm.nvvm.div.full(float %640, float %642), !dbg !86
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !87
  %646 = fmul float %641, %645, !dbg !88
  %647 = fadd float %626, %646, !dbg !89
  %648 = fadd float %631, %637, !dbg !90
  %649 = fmul float %641, %641, !dbg !91
  %650 = fmul float %621, %649, !dbg !92
  %651 = fmul float %645, %650, !dbg !93
  %652 = fadd float %648, %651, !dbg !94
  %653 = bitcast float %647 to i32, !dbg !80
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 4, i32 31), !dbg !80
  %655 = bitcast i32 %654 to float, !dbg !80
  %656 = bitcast float %652 to i32, !dbg !80
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !80
  %658 = bitcast i32 %657 to float, !dbg !80
  %659 = bitcast float %642 to i32, !dbg !80
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !80
  %661 = bitcast i32 %660 to float, !dbg !80
  %662 = fsub float %655, %647, !dbg !82
  %663 = fadd float %642, %661, !dbg !84
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !85
  %665 = tail call float @llvm.nvvm.div.full(float %661, float %663), !dbg !86
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !87
  %667 = fmul float %662, %666, !dbg !88
  %668 = fadd float %647, %667, !dbg !89
  %669 = fadd float %652, %658, !dbg !90
  %670 = fmul float %662, %662, !dbg !91
  %671 = fmul float %642, %670, !dbg !92
  %672 = fmul float %666, %671, !dbg !93
  %673 = fadd float %669, %672, !dbg !94
  %674 = bitcast float %668 to i32, !dbg !80
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 2, i32 31), !dbg !80
  %676 = bitcast i32 %675 to float, !dbg !80
  %677 = bitcast float %673 to i32, !dbg !80
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 2, i32 31), !dbg !80
  %679 = bitcast i32 %678 to float, !dbg !80
  %680 = bitcast float %663 to i32, !dbg !80
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 2, i32 31), !dbg !80
  %682 = bitcast i32 %681 to float, !dbg !80
  %683 = fsub float %676, %668, !dbg !82
  %684 = fadd float %663, %682, !dbg !84
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !85
  %686 = tail call float @llvm.nvvm.div.full(float %682, float %684), !dbg !86
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !87
  %688 = fmul float %683, %687, !dbg !88
  %689 = fadd float %668, %688, !dbg !89
  %690 = fadd float %673, %679, !dbg !90
  %691 = fmul float %683, %683, !dbg !91
  %692 = fmul float %663, %691, !dbg !92
  %693 = fmul float %687, %692, !dbg !93
  %694 = fadd float %690, %693, !dbg !94
  %695 = bitcast float %689 to i32, !dbg !80
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 1, i32 31), !dbg !80
  %697 = bitcast i32 %696 to float, !dbg !80
  %698 = bitcast float %694 to i32, !dbg !80
  %699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %698, i32 1, i32 31), !dbg !80
  %700 = bitcast i32 %699 to float, !dbg !80
  %701 = bitcast float %684 to i32, !dbg !80
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 1, i32 31), !dbg !80
  %703 = bitcast i32 %702 to float, !dbg !80
  %704 = fsub float %697, %689, !dbg !82
  %705 = fadd float %684, %703, !dbg !84
  %706 = fcmp oeq float %705, 0.000000e+00, !dbg !85
  %707 = tail call float @llvm.nvvm.div.full(float %703, float %705), !dbg !86
  %708 = select i1 %706, float 0.000000e+00, float %707, !dbg !87
  %709 = fmul float %704, %708, !dbg !88
  %710 = fadd float %689, %709, !dbg !89
  %711 = fadd float %694, %700, !dbg !90
  %712 = fmul float %704, %704, !dbg !91
  %713 = fmul float %684, %712, !dbg !92
  %714 = fmul float %708, %713, !dbg !93
  %715 = fadd float %711, %714, !dbg !94
  %716 = bitcast float %395 to i32, !dbg !80
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 16, i32 31), !dbg !80
  %718 = bitcast i32 %717 to float, !dbg !80
  %719 = bitcast float %400 to i32, !dbg !80
  %720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %719, i32 16, i32 31), !dbg !80
  %721 = bitcast i32 %720 to float, !dbg !80
  %722 = bitcast float %390 to i32, !dbg !80
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 16, i32 31), !dbg !80
  %724 = bitcast i32 %723 to float, !dbg !80
  %725 = fsub float %718, %395, !dbg !82
  %726 = fadd float %390, %724, !dbg !84
  %727 = fcmp oeq float %726, 0.000000e+00, !dbg !85
  %728 = tail call float @llvm.nvvm.div.full(float %724, float %726), !dbg !86
  %729 = select i1 %727, float 0.000000e+00, float %728, !dbg !87
  %730 = fmul float %725, %729, !dbg !88
  %731 = fadd float %395, %730, !dbg !89
  %732 = fadd float %400, %721, !dbg !90
  %733 = fmul float %725, %725, !dbg !91
  %734 = fmul float %390, %733, !dbg !92
  %735 = fmul float %734, %729, !dbg !93
  %736 = fadd float %732, %735, !dbg !94
  %737 = bitcast float %731 to i32, !dbg !80
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 8, i32 31), !dbg !80
  %739 = bitcast i32 %738 to float, !dbg !80
  %740 = bitcast float %736 to i32, !dbg !80
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 8, i32 31), !dbg !80
  %742 = bitcast i32 %741 to float, !dbg !80
  %743 = bitcast float %726 to i32, !dbg !80
  %744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %743, i32 8, i32 31), !dbg !80
  %745 = bitcast i32 %744 to float, !dbg !80
  %746 = fsub float %739, %731, !dbg !82
  %747 = fadd float %726, %745, !dbg !84
  %748 = fcmp oeq float %747, 0.000000e+00, !dbg !85
  %749 = tail call float @llvm.nvvm.div.full(float %745, float %747), !dbg !86
  %750 = select i1 %748, float 0.000000e+00, float %749, !dbg !87
  %751 = fmul float %746, %750, !dbg !88
  %752 = fadd float %731, %751, !dbg !89
  %753 = fadd float %736, %742, !dbg !90
  %754 = fmul float %746, %746, !dbg !91
  %755 = fmul float %726, %754, !dbg !92
  %756 = fmul float %750, %755, !dbg !93
  %757 = fadd float %753, %756, !dbg !94
  %758 = bitcast float %752 to i32, !dbg !80
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 4, i32 31), !dbg !80
  %760 = bitcast i32 %759 to float, !dbg !80
  %761 = bitcast float %757 to i32, !dbg !80
  %762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %761, i32 4, i32 31), !dbg !80
  %763 = bitcast i32 %762 to float, !dbg !80
  %764 = bitcast float %747 to i32, !dbg !80
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 4, i32 31), !dbg !80
  %766 = bitcast i32 %765 to float, !dbg !80
  %767 = fsub float %760, %752, !dbg !82
  %768 = fadd float %747, %766, !dbg !84
  %769 = fcmp oeq float %768, 0.000000e+00, !dbg !85
  %770 = tail call float @llvm.nvvm.div.full(float %766, float %768), !dbg !86
  %771 = select i1 %769, float 0.000000e+00, float %770, !dbg !87
  %772 = fmul float %767, %771, !dbg !88
  %773 = fadd float %752, %772, !dbg !89
  %774 = fadd float %757, %763, !dbg !90
  %775 = fmul float %767, %767, !dbg !91
  %776 = fmul float %747, %775, !dbg !92
  %777 = fmul float %771, %776, !dbg !93
  %778 = fadd float %774, %777, !dbg !94
  %779 = bitcast float %773 to i32, !dbg !80
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 2, i32 31), !dbg !80
  %781 = bitcast i32 %780 to float, !dbg !80
  %782 = bitcast float %778 to i32, !dbg !80
  %783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %782, i32 2, i32 31), !dbg !80
  %784 = bitcast i32 %783 to float, !dbg !80
  %785 = bitcast float %768 to i32, !dbg !80
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 2, i32 31), !dbg !80
  %787 = bitcast i32 %786 to float, !dbg !80
  %788 = fsub float %781, %773, !dbg !82
  %789 = fadd float %768, %787, !dbg !84
  %790 = fcmp oeq float %789, 0.000000e+00, !dbg !85
  %791 = tail call float @llvm.nvvm.div.full(float %787, float %789), !dbg !86
  %792 = select i1 %790, float 0.000000e+00, float %791, !dbg !87
  %793 = fmul float %788, %792, !dbg !88
  %794 = fadd float %773, %793, !dbg !89
  %795 = fadd float %778, %784, !dbg !90
  %796 = fmul float %788, %788, !dbg !91
  %797 = fmul float %768, %796, !dbg !92
  %798 = fmul float %792, %797, !dbg !93
  %799 = fadd float %795, %798, !dbg !94
  %800 = bitcast float %794 to i32, !dbg !80
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 1, i32 31), !dbg !80
  %802 = bitcast i32 %801 to float, !dbg !80
  %803 = bitcast float %799 to i32, !dbg !80
  %804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %803, i32 1, i32 31), !dbg !80
  %805 = bitcast i32 %804 to float, !dbg !80
  %806 = bitcast float %789 to i32, !dbg !80
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 1, i32 31), !dbg !80
  %808 = bitcast i32 %807 to float, !dbg !80
  %809 = fsub float %802, %794, !dbg !82
  %810 = fadd float %789, %808, !dbg !84
  %811 = fcmp oeq float %810, 0.000000e+00, !dbg !85
  %812 = tail call float @llvm.nvvm.div.full(float %808, float %810), !dbg !86
  %813 = select i1 %811, float 0.000000e+00, float %812, !dbg !87
  %814 = fmul float %809, %813, !dbg !88
  %815 = fadd float %794, %814, !dbg !89
  %816 = fadd float %799, %805, !dbg !90
  %817 = fmul float %809, %809, !dbg !91
  %818 = fmul float %789, %817, !dbg !92
  %819 = fmul float %813, %818, !dbg !93
  %820 = fadd float %816, %819, !dbg !94
  %821 = and i32 %341, 7, !dbg !80
  %822 = icmp eq i32 %21, 0, !dbg !80
  %823 = getelementptr float, ptr addrspace(3) @global_smem, i32 %821, !dbg !80
  %824 = bitcast float %500 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %824, i1 %822) #5, !dbg !80
  %825 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %821, !dbg !80
  %826 = bitcast float %505 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %826, i1 %822) #5, !dbg !80
  %827 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %821, !dbg !80
  %828 = bitcast float %495 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %827, <1 x i32> %828, i1 %822) #5, !dbg !80
  %829 = or disjoint i32 %821, 8, !dbg !80
  %830 = getelementptr float, ptr addrspace(3) @global_smem, i32 %829, !dbg !80
  %831 = bitcast float %605 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %831, i1 %822) #5, !dbg !80
  %832 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %829, !dbg !80
  %833 = bitcast float %610 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %833, i1 %822) #5, !dbg !80
  %834 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %829, !dbg !80
  %835 = bitcast float %600 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %834, <1 x i32> %835, i1 %822) #5, !dbg !80
  %836 = or disjoint i32 %821, 16, !dbg !80
  %837 = getelementptr float, ptr addrspace(3) @global_smem, i32 %836, !dbg !80
  %838 = bitcast float %710 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %838, i1 %822) #5, !dbg !80
  %839 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %836, !dbg !80
  %840 = bitcast float %715 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %839, <1 x i32> %840, i1 %822) #5, !dbg !80
  %841 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %836, !dbg !80
  %842 = bitcast float %705 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %842, i1 %822) #5, !dbg !80
  %843 = or disjoint i32 %821, 24, !dbg !80
  %844 = getelementptr float, ptr addrspace(3) @global_smem, i32 %843, !dbg !80
  %845 = bitcast float %815 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %845, i1 %822) #5, !dbg !80
  %846 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %843, !dbg !80
  %847 = bitcast float %820 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %846, <1 x i32> %847, i1 %822) #5, !dbg !80
  %848 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %843, !dbg !80
  %849 = bitcast float %810 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %849, i1 %822) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %850 = icmp slt i32 %19, 32, !dbg !80
  %851 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %852 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !80
  %853 = bitcast i32 %852 to float, !dbg !80
  %854 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %855 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %854, i1 %850) #5, !dbg !80
  %856 = bitcast i32 %855 to float, !dbg !80
  %857 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !80
  %858 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %857, i1 %850) #5, !dbg !80
  %859 = bitcast i32 %858 to float, !dbg !80
  %860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 4, i32 31), !dbg !80
  %861 = bitcast i32 %860 to float, !dbg !80
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 4, i32 31), !dbg !80
  %863 = bitcast i32 %862 to float, !dbg !80
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 4, i32 31), !dbg !80
  %865 = bitcast i32 %864 to float, !dbg !80
  %866 = fsub float %861, %853, !dbg !82
  %867 = fadd float %859, %865, !dbg !84
  %868 = fcmp oeq float %867, 0.000000e+00, !dbg !85
  %869 = tail call float @llvm.nvvm.div.full(float %865, float %867), !dbg !86
  %870 = select i1 %868, float 0.000000e+00, float %869, !dbg !87
  %871 = fmul float %866, %870, !dbg !88
  %872 = fadd float %871, %853, !dbg !89
  %873 = fadd float %856, %863, !dbg !90
  %874 = fmul float %866, %866, !dbg !91
  %875 = fmul float %874, %859, !dbg !92
  %876 = fmul float %875, %870, !dbg !93
  %877 = fadd float %873, %876, !dbg !94
  %878 = bitcast float %872 to i32, !dbg !80
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 2, i32 31), !dbg !80
  %880 = bitcast i32 %879 to float, !dbg !80
  %881 = bitcast float %877 to i32, !dbg !80
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 2, i32 31), !dbg !80
  %883 = bitcast i32 %882 to float, !dbg !80
  %884 = bitcast float %867 to i32, !dbg !80
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 2, i32 31), !dbg !80
  %886 = bitcast i32 %885 to float, !dbg !80
  %887 = fsub float %880, %872, !dbg !82
  %888 = fadd float %867, %886, !dbg !84
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !85
  %890 = tail call float @llvm.nvvm.div.full(float %886, float %888), !dbg !86
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !87
  %892 = fmul float %887, %891, !dbg !88
  %893 = fadd float %872, %892, !dbg !89
  %894 = fadd float %877, %883, !dbg !90
  %895 = fmul float %887, %887, !dbg !91
  %896 = fmul float %867, %895, !dbg !92
  %897 = fmul float %891, %896, !dbg !93
  %898 = fadd float %894, %897, !dbg !94
  %899 = bitcast float %893 to i32, !dbg !80
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 1, i32 31), !dbg !80
  %901 = bitcast i32 %900 to float, !dbg !80
  %902 = bitcast float %898 to i32, !dbg !80
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 1, i32 31), !dbg !80
  %904 = bitcast i32 %903 to float, !dbg !80
  %905 = bitcast float %888 to i32, !dbg !80
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 1, i32 31), !dbg !80
  %907 = bitcast i32 %906 to float, !dbg !80
  %908 = fsub float %901, %893, !dbg !82
  %909 = fadd float %888, %907, !dbg !84
  %910 = fcmp oeq float %909, 0.000000e+00, !dbg !85
  %911 = tail call float @llvm.nvvm.div.full(float %907, float %909), !dbg !86
  %912 = select i1 %910, float 0.000000e+00, float %911, !dbg !87
  %913 = fmul float %908, %912, !dbg !88
  %914 = fadd float %893, %913, !dbg !89
  %915 = fadd float %898, %904, !dbg !90
  %916 = fmul float %908, %908, !dbg !91
  %917 = fmul float %888, %916, !dbg !92
  %918 = fmul float %912, %917, !dbg !93
  %919 = fadd float %915, %918, !dbg !94
  %920 = and i32 %19, 7, !dbg !80
  %921 = icmp eq i32 %920, 0, !dbg !80
  %922 = and i1 %850, %921, !dbg !80
  %923 = bitcast float %914 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %923, i1 %922) #5, !dbg !80
  %924 = bitcast float %919 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %924, i1 %922) #5, !dbg !80
  %925 = bitcast float %909 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %857, <1 x i32> %925, i1 %922) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %926 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %927 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %928 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %929 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %930 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %931 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 160), align 16, !dbg !80
  %932 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %933 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 224), align 16, !dbg !80
  %934 = tail call float @llvm.nvvm.div.full(float %930, float 3.072000e+03), !dbg !95
  %935 = tail call float @llvm.nvvm.div.full(float %931, float 3.072000e+03), !dbg !95
  %936 = tail call float @llvm.nvvm.div.full(float %932, float 3.072000e+03), !dbg !95
  %937 = tail call float @llvm.nvvm.div.full(float %933, float 3.072000e+03), !dbg !95
  %938 = fadd float %934, 0x3EB0C6F7A0000000, !dbg !96
  %939 = fadd float %935, 0x3EB0C6F7A0000000, !dbg !96
  %940 = fadd float %936, 0x3EB0C6F7A0000000, !dbg !96
  %941 = fadd float %937, 0x3EB0C6F7A0000000, !dbg !96
  %942 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %943 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i88 = icmp eq i32 %943, 0, !dbg !97
  br i1 %.not.i88, label %946, label %944, !dbg !97

944:                                              ; preds = %__nv_rsqrtf.exit
  %945 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %938), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

946:                                              ; preds = %__nv_rsqrtf.exit
  %947 = tail call float @llvm.nvvm.rsqrt.approx.f(float %938), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

__nv_rsqrtf.exit90:                               ; preds = %944, %946
  %.0.i89 = phi float [ %945, %944 ], [ %947, %946 ], !dbg !97
  %948 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %949 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i94 = icmp eq i32 %949, 0, !dbg !97
  br i1 %.not.i94, label %952, label %950, !dbg !97

950:                                              ; preds = %__nv_rsqrtf.exit90
  %951 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %939), !dbg !97
  br label %__nv_rsqrtf.exit96, !dbg !97

952:                                              ; preds = %__nv_rsqrtf.exit90
  %953 = tail call float @llvm.nvvm.rsqrt.approx.f(float %939), !dbg !97
  br label %__nv_rsqrtf.exit96, !dbg !97

__nv_rsqrtf.exit96:                               ; preds = %950, %952
  %.0.i95 = phi float [ %951, %950 ], [ %953, %952 ], !dbg !97
  %954 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %955 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i100 = icmp eq i32 %955, 0, !dbg !97
  br i1 %.not.i100, label %958, label %956, !dbg !97

956:                                              ; preds = %__nv_rsqrtf.exit96
  %957 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %940), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

958:                                              ; preds = %__nv_rsqrtf.exit96
  %959 = tail call float @llvm.nvvm.rsqrt.approx.f(float %940), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

__nv_rsqrtf.exit102:                              ; preds = %956, %958
  %.0.i101 = phi float [ %957, %956 ], [ %959, %958 ], !dbg !97
  %960 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %961 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i106 = icmp eq i32 %961, 0, !dbg !97
  br i1 %.not.i106, label %964, label %962, !dbg !97

962:                                              ; preds = %__nv_rsqrtf.exit102
  %963 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %941), !dbg !97
  br label %__nv_rsqrtf.exit108, !dbg !97

964:                                              ; preds = %__nv_rsqrtf.exit102
  %965 = tail call float @llvm.nvvm.rsqrt.approx.f(float %941), !dbg !97
  br label %__nv_rsqrtf.exit108, !dbg !97

__nv_rsqrtf.exit108:                              ; preds = %962, %964
  %.0.i107 = phi float [ %963, %962 ], [ %965, %964 ], !dbg !97
  %966 = lshr i32 %27, 6
  %967 = and i32 %966, 24
  %968 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %967
  %969 = getelementptr bfloat, ptr addrspace(3) %968, i32 %68
  %970 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !98
  %971 = shufflevector <2 x i1> %970, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %972 = insertelement <2 x float> poison, float %.0.i89, i64 0, !dbg !99
  %973 = shufflevector <2 x float> %972, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %974 = insertelement <2 x float> poison, float %926, i64 0, !dbg !100
  %975 = shufflevector <2 x float> %974, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %976 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !101
  %977 = shufflevector <4 x i1> %976, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !101
  %978 = insertelement <4 x float> poison, float %.0.i95, i64 0, !dbg !99
  %979 = insertelement <4 x float> %978, float %.0.i101, i64 1, !dbg !99
  %980 = shufflevector <4 x float> %979, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !99
  %981 = insertelement <4 x float> poison, float %927, i64 0, !dbg !100
  %982 = insertelement <4 x float> %981, float %928, i64 1, !dbg !100
  %983 = shufflevector <4 x float> %982, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !100
  %invariant.op = or i32 %26, 12288, !dbg !102
  %984 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 4
  %985 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 8
  %986 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 12
  br label %987, !dbg !102

987:                                              ; preds = %__nv_rsqrtf.exit108, %987
  %indvars.iv166 = phi i64 [ 0, %__nv_rsqrtf.exit108 ], [ %indvars.iv.next167, %987 ]
  %988 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit108 ], [ %1081, %987 ]
  %989 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit108 ], [ %1082, %987 ]
  %990 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit108 ], [ %1079, %987 ]
  %991 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit108 ], [ %1099, %987 ]
  %992 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit108 ], [ %1100, %987 ]
  %993 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit108 ], [ %1080, %987 ]
  %994 = or disjoint i64 %indvars.iv166, %86, !dbg !103
  %995 = trunc nuw nsw i64 %indvars.iv166 to i32, !dbg !104
  %996 = add i32 %66, %995, !dbg !104
  %997 = sext i32 %996 to i64, !dbg !105
  %998 = getelementptr bfloat, ptr addrspace(1) %8, i64 %997, !dbg !105
  %999 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %998, i1 %23) #5, !dbg !106
  %1000 = extractvalue { i32, i32, i32, i32 } %999, 0, !dbg !106
  %1001 = extractvalue { i32, i32, i32, i32 } %999, 1, !dbg !106
  %1002 = extractvalue { i32, i32, i32, i32 } %999, 2, !dbg !106
  %1003 = extractvalue { i32, i32, i32, i32 } %999, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %969, i32 %1000, i32 %1001, i32 %1002, i32 %1003, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1004 = load bfloat, ptr addrspace(3) %75, align 4, !dbg !99
  %1005 = load bfloat, ptr addrspace(3) %87, align 2, !dbg !99
  %1006 = fpext bfloat %1004 to float, !dbg !107
  %1007 = fpext bfloat %1005 to float, !dbg !107
  %.reass.reass.reass = or i32 %995, %invariant.op
  %1008 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1009 = getelementptr float, ptr addrspace(1) %1, i64 %1008, !dbg !108
  %1010 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1008, !dbg !109
  %1011 = add nuw nsw i64 %994, 9216, !dbg !110
  %1012 = getelementptr float, ptr addrspace(1) %1, i64 %1011, !dbg !111
  %1013 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1011, !dbg !112
  %1014 = fsub float %1006, %929, !dbg !100
  %1015 = fsub float %1007, %929, !dbg !100
  %1016 = fmul float %.0.i107, %1014, !dbg !99
  %1017 = fmul float %.0.i107, %1015, !dbg !99
  %1018 = fcmp uno <2 x float> %990, zeroinitializer, !dbg !113
  %1019 = fcmp uno <4 x float> %993, zeroinitializer, !dbg !113
  %1020 = fcmp uno float %988, 0.000000e+00, !dbg !113
  %1021 = fcmp uno float %989, 0.000000e+00, !dbg !113
  %1022 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !99
  %1023 = fpext <2 x bfloat> %1022 to <2 x float>, !dbg !107
  %1024 = fsub <2 x float> %1023, %975, !dbg !100
  %1025 = fmul <2 x float> %973, %1024, !dbg !99
  %1026 = load <2 x bfloat>, ptr addrspace(3) %73, align 4, !dbg !99
  %1027 = load <2 x bfloat>, ptr addrspace(3) %74, align 4, !dbg !99
  %1028 = shufflevector <2 x bfloat> %1026, <2 x bfloat> %1027, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !107
  %1029 = fpext <4 x bfloat> %1028 to <4 x float>, !dbg !107
  %1030 = fsub <4 x float> %1029, %983, !dbg !100
  %1031 = fmul <4 x float> %980, %1030, !dbg !99
  %1032 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1009, i1 true) #5, !dbg !115
  %1033 = extractvalue { i32, i32 } %1032, 0, !dbg !115
  %1034 = extractvalue { i32, i32 } %1032, 1, !dbg !115
  %1035 = insertelement <2 x i32> poison, i32 %1033, i64 0, !dbg !115
  %1036 = insertelement <2 x i32> %1035, i32 %1034, i64 1, !dbg !115
  %1037 = bitcast <2 x i32> %1036 to <2 x float>, !dbg !115
  %1038 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1010, i1 true) #5, !dbg !116
  %1039 = bitcast i32 %1038 to <2 x bfloat>, !dbg !116
  %1040 = fpext <2 x bfloat> %1039 to <2 x float>, !dbg !117
  %1041 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1012, i1 true) #5, !dbg !118
  %1042 = extractvalue { i32, i32 } %1041, 0, !dbg !118
  %1043 = extractvalue { i32, i32 } %1041, 1, !dbg !118
  %1044 = insertelement <2 x i32> poison, i32 %1042, i64 0, !dbg !118
  %1045 = insertelement <2 x i32> %1044, i32 %1043, i64 1, !dbg !118
  %1046 = bitcast <2 x i32> %1045 to <2 x float>, !dbg !118
  %1047 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1013, i1 true) #5, !dbg !119
  %1048 = bitcast i32 %1047 to <2 x bfloat>, !dbg !119
  %1049 = fpext <2 x bfloat> %1048 to <2 x float>, !dbg !120
  %1050 = fadd <2 x float> %1037, %1040, !dbg !121
  %1051 = fadd <2 x float> %1050, splat (float 1.000000e+00), !dbg !122
  %1052 = fmul <2 x float> %1025, %1051, !dbg !123
  %1053 = shufflevector <2 x float> %1051, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !123
  %1054 = fmul <4 x float> %1031, %1053, !dbg !123
  %1055 = extractelement <2 x float> %1051, i64 0, !dbg !123
  %1056 = fmul float %1016, %1055, !dbg !123
  %1057 = extractelement <2 x float> %1051, i64 1, !dbg !123
  %1058 = fmul float %1017, %1057, !dbg !123
  %1059 = fadd <2 x float> %1046, %1049, !dbg !124
  %1060 = fadd <2 x float> %1052, %1059, !dbg !125
  %1061 = shufflevector <2 x float> %1059, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !125
  %1062 = fadd <4 x float> %1054, %1061, !dbg !125
  %1063 = extractelement <2 x float> %1059, i64 0, !dbg !125
  %1064 = fadd float %1056, %1063, !dbg !125
  %1065 = extractelement <2 x float> %1059, i64 1, !dbg !125
  %1066 = fadd float %1058, %1065, !dbg !125
  %1067 = fcmp olt <2 x float> %990, %1060, !dbg !126
  %1068 = fcmp olt <4 x float> %993, %1062, !dbg !126
  %1069 = fcmp olt float %988, %1064, !dbg !126
  %1070 = fcmp olt float %989, %1066, !dbg !126
  %1071 = or <2 x i1> %1018, %1067, !dbg !127
  %1072 = or <4 x i1> %1019, %1068, !dbg !127
  %1073 = or i1 %1020, %1069, !dbg !127
  %1074 = or i1 %1021, %1070, !dbg !127
  %1075 = select <2 x i1> %1071, <2 x float> %990, <2 x float> %1060, !dbg !128
  %1076 = select <4 x i1> %1072, <4 x float> %993, <4 x float> %1062, !dbg !128
  %1077 = select i1 %1073, float %988, float %1064, !dbg !128
  %1078 = select i1 %1074, float %989, float %1066, !dbg !128
  %1079 = select <2 x i1> %971, <2 x float> %1075, <2 x float> %990, !dbg !98
  %1080 = select <4 x i1> %977, <4 x float> %1076, <4 x float> %993, !dbg !98
  %1081 = select i1 %24, float %1077, float %988, !dbg !98
  %1082 = select i1 %24, float %1078, float %989, !dbg !98
  %1083 = extractelement <2 x float> %1060, i64 0, !dbg !129
  %1084 = extractelement <2 x float> %1060, i64 1, !dbg !129
  %1085 = fcmp uno <4 x float> %991, zeroinitializer, !dbg !130
  %1086 = fcmp uno <4 x float> %992, zeroinitializer, !dbg !130
  %1087 = shufflevector <2 x float> %1060, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !132
  %1088 = insertelement <4 x float> %1087, float %1064, i64 0, !dbg !132
  %1089 = shufflevector <4 x float> %1088, <4 x float> %1062, <4 x i32> <i32 0, i32 6, i32 4, i32 3>, !dbg !132
  %1090 = fcmp ogt <4 x float> %991, %1089, !dbg !132
  %1091 = shufflevector <2 x float> %1060, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !132
  %1092 = insertelement <4 x float> %1091, float %1066, i64 0, !dbg !132
  %1093 = shufflevector <4 x float> %1092, <4 x float> %1062, <4 x i32> <i32 0, i32 7, i32 5, i32 3>, !dbg !132
  %1094 = fcmp ogt <4 x float> %992, %1093, !dbg !132
  %1095 = or <4 x i1> %1085, %1090, !dbg !133
  %1096 = or <4 x i1> %1086, %1094, !dbg !133
  %1097 = select <4 x i1> %1095, <4 x float> %991, <4 x float> %1089, !dbg !134
  %1098 = select <4 x i1> %1096, <4 x float> %992, <4 x float> %1093, !dbg !134
  %1099 = select <4 x i1> %977, <4 x float> %1097, <4 x float> %991, !dbg !101
  %1100 = select <4 x i1> %977, <4 x float> %1098, <4 x float> %992, !dbg !101
  %1101 = getelementptr bfloat, ptr addrspace(1) %9, i64 %997, !dbg !135
  %1102 = fptrunc float %1083 to bfloat, !dbg !129
  %1103 = fptrunc float %1084 to bfloat, !dbg !129
  %1104 = extractelement <4 x float> %1062, i64 0, !dbg !129
  %1105 = fptrunc float %1104 to bfloat, !dbg !129
  %1106 = extractelement <4 x float> %1062, i64 1, !dbg !129
  %1107 = fptrunc float %1106 to bfloat, !dbg !129
  %1108 = extractelement <4 x float> %1062, i64 2, !dbg !129
  %1109 = fptrunc float %1108 to bfloat, !dbg !129
  %1110 = extractelement <4 x float> %1062, i64 3, !dbg !129
  %1111 = fptrunc float %1110 to bfloat, !dbg !129
  %1112 = fptrunc float %1064 to bfloat, !dbg !129
  %1113 = fptrunc float %1066 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1114 = bitcast bfloat %1102 to i16, !dbg !129
  %1115 = bitcast bfloat %1103 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %72, i16 %1114, i16 %1115, i1 true) #5, !dbg !129
  %1116 = bitcast bfloat %1105 to i16, !dbg !129
  %1117 = bitcast bfloat %1107 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %73, i16 %1116, i16 %1117, i1 true) #5, !dbg !129
  %1118 = bitcast bfloat %1109 to i16, !dbg !129
  %1119 = bitcast bfloat %1111 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %74, i16 %1118, i16 %1119, i1 true) #5, !dbg !129
  %1120 = bitcast bfloat %1112 to i16, !dbg !129
  %1121 = bitcast bfloat %1113 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %75, i16 %1120, i16 %1121, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %.extract = load i32, ptr addrspace(3) %969, align 16, !dbg !129
  %.extract110 = load i32, ptr addrspace(3) %984, align 4, !dbg !129
  %.extract112 = load i32, ptr addrspace(3) %985, align 8, !dbg !129
  %.extract114 = load i32, ptr addrspace(3) %986, align 4, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %1101, i1 %23) #5, !dbg !129
  %indvars.iv.next167 = add nuw nsw i64 %indvars.iv166, 512, !dbg !102
  %1122 = icmp samesign ult i64 %indvars.iv166, 2560, !dbg !102
  br i1 %1122, label %987, label %1123, !dbg !102

1123:                                             ; preds = %987
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1124 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1079, <2 x i32> <i32 0, i32 2>, !dbg !138
  %1125 = fcmp olt <2 x float> %1124, %1079, !dbg !138
  %1126 = fcmp uno <2 x float> %1124, %1079, !dbg !138
  %shift = shufflevector <2 x i1> %1125, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %1127 = or <2 x i1> %shift, %1126, !dbg !139
  %1128 = extractelement <2 x i1> %1127, i64 0, !dbg !139
  %1129 = extractelement <2 x float> %1079, i64 0, !dbg !140
  %1130 = extractelement <2 x float> %1079, i64 1, !dbg !140
  %1131 = select i1 %1128, float %1129, float %1130, !dbg !140
  %1132 = extractelement <4 x float> %1080, i64 0, !dbg !138
  %1133 = extractelement <4 x float> %1080, i64 1, !dbg !138
  %1134 = fcmp olt float %1132, %1133, !dbg !138
  %1135 = fcmp uno float %1132, 0.000000e+00, !dbg !141
  %1136 = or i1 %1134, %1135, !dbg !139
  %1137 = select i1 %1136, float %1132, float %1133, !dbg !140
  %1138 = extractelement <4 x float> %1080, i64 2, !dbg !138
  %1139 = extractelement <4 x float> %1080, i64 3, !dbg !138
  %1140 = fcmp olt float %1138, %1139, !dbg !138
  %1141 = fcmp uno float %1138, 0.000000e+00, !dbg !141
  %1142 = or i1 %1140, %1141, !dbg !139
  %1143 = select i1 %1142, float %1138, float %1139, !dbg !140
  %1144 = fcmp olt float %1081, %1082, !dbg !138
  %1145 = fcmp uno float %1081, 0.000000e+00, !dbg !141
  %1146 = or i1 %1144, %1145, !dbg !139
  %1147 = select i1 %1146, float %1081, float %1082, !dbg !140
  %1148 = bitcast float %1131 to i32, !dbg !136
  %1149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1148, i32 16, i32 31), !dbg !136
  %1150 = bitcast i32 %1149 to float, !dbg !136
  %1151 = fcmp olt float %1131, %1150, !dbg !138
  %1152 = fcmp uno float %1131, 0.000000e+00, !dbg !141
  %1153 = or i1 %1152, %1151, !dbg !139
  %1154 = select i1 %1153, float %1131, float %1150, !dbg !140
  %1155 = bitcast float %1154 to i32, !dbg !136
  %1156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1155, i32 8, i32 31), !dbg !136
  %1157 = bitcast i32 %1156 to float, !dbg !136
  %1158 = fcmp olt float %1154, %1157, !dbg !138
  %1159 = fcmp uno float %1154, 0.000000e+00, !dbg !141
  %1160 = or i1 %1158, %1159, !dbg !139
  %1161 = select i1 %1160, float %1154, float %1157, !dbg !140
  %1162 = bitcast float %1161 to i32, !dbg !136
  %1163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1162, i32 4, i32 31), !dbg !136
  %1164 = bitcast i32 %1163 to float, !dbg !136
  %1165 = fcmp olt float %1161, %1164, !dbg !138
  %1166 = fcmp uno float %1161, 0.000000e+00, !dbg !141
  %1167 = or i1 %1165, %1166, !dbg !139
  %1168 = select i1 %1167, float %1161, float %1164, !dbg !140
  %1169 = bitcast float %1168 to i32, !dbg !136
  %1170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1169, i32 2, i32 31), !dbg !136
  %1171 = bitcast i32 %1170 to float, !dbg !136
  %1172 = fcmp olt float %1168, %1171, !dbg !138
  %1173 = fcmp uno float %1168, 0.000000e+00, !dbg !141
  %1174 = or i1 %1172, %1173, !dbg !139
  %1175 = select i1 %1174, float %1168, float %1171, !dbg !140
  %1176 = bitcast float %1175 to i32, !dbg !136
  %1177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1176, i32 1, i32 31), !dbg !136
  %1178 = bitcast i32 %1177 to float, !dbg !136
  %1179 = fcmp olt float %1175, %1178, !dbg !138
  %1180 = fcmp uno float %1175, 0.000000e+00, !dbg !141
  %1181 = or i1 %1179, %1180, !dbg !139
  %1182 = bitcast float %1137 to i32, !dbg !136
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 16, i32 31), !dbg !136
  %1184 = bitcast i32 %1183 to float, !dbg !136
  %1185 = fcmp olt float %1137, %1184, !dbg !138
  %1186 = fcmp uno float %1137, 0.000000e+00, !dbg !141
  %1187 = or i1 %1186, %1185, !dbg !139
  %1188 = select i1 %1187, float %1137, float %1184, !dbg !140
  %1189 = bitcast float %1188 to i32, !dbg !136
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 8, i32 31), !dbg !136
  %1191 = bitcast i32 %1190 to float, !dbg !136
  %1192 = fcmp olt float %1188, %1191, !dbg !138
  %1193 = fcmp uno float %1188, 0.000000e+00, !dbg !141
  %1194 = or i1 %1192, %1193, !dbg !139
  %1195 = select i1 %1194, float %1188, float %1191, !dbg !140
  %1196 = bitcast float %1195 to i32, !dbg !136
  %1197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1196, i32 4, i32 31), !dbg !136
  %1198 = bitcast i32 %1197 to float, !dbg !136
  %1199 = fcmp olt float %1195, %1198, !dbg !138
  %1200 = fcmp uno float %1195, 0.000000e+00, !dbg !141
  %1201 = or i1 %1199, %1200, !dbg !139
  %1202 = select i1 %1201, float %1195, float %1198, !dbg !140
  %1203 = bitcast float %1202 to i32, !dbg !136
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 2, i32 31), !dbg !136
  %1205 = bitcast i32 %1204 to float, !dbg !136
  %1206 = fcmp olt float %1202, %1205, !dbg !138
  %1207 = fcmp uno float %1202, 0.000000e+00, !dbg !141
  %1208 = or i1 %1206, %1207, !dbg !139
  %1209 = select i1 %1208, float %1202, float %1205, !dbg !140
  %1210 = bitcast float %1209 to i32, !dbg !136
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 1, i32 31), !dbg !136
  %1212 = bitcast i32 %1211 to float, !dbg !136
  %1213 = fcmp olt float %1209, %1212, !dbg !138
  %1214 = fcmp uno float %1209, 0.000000e+00, !dbg !141
  %1215 = or i1 %1213, %1214, !dbg !139
  %1216 = bitcast float %1143 to i32, !dbg !136
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 16, i32 31), !dbg !136
  %1218 = bitcast i32 %1217 to float, !dbg !136
  %1219 = fcmp olt float %1143, %1218, !dbg !138
  %1220 = fcmp uno float %1143, 0.000000e+00, !dbg !141
  %1221 = or i1 %1220, %1219, !dbg !139
  %1222 = select i1 %1221, float %1143, float %1218, !dbg !140
  %1223 = bitcast float %1222 to i32, !dbg !136
  %1224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1223, i32 8, i32 31), !dbg !136
  %1225 = bitcast i32 %1224 to float, !dbg !136
  %1226 = fcmp olt float %1222, %1225, !dbg !138
  %1227 = fcmp uno float %1222, 0.000000e+00, !dbg !141
  %1228 = or i1 %1226, %1227, !dbg !139
  %1229 = select i1 %1228, float %1222, float %1225, !dbg !140
  %1230 = bitcast float %1229 to i32, !dbg !136
  %1231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1230, i32 4, i32 31), !dbg !136
  %1232 = bitcast i32 %1231 to float, !dbg !136
  %1233 = fcmp olt float %1229, %1232, !dbg !138
  %1234 = fcmp uno float %1229, 0.000000e+00, !dbg !141
  %1235 = or i1 %1233, %1234, !dbg !139
  %1236 = select i1 %1235, float %1229, float %1232, !dbg !140
  %1237 = bitcast float %1236 to i32, !dbg !136
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1237, i32 2, i32 31), !dbg !136
  %1239 = bitcast i32 %1238 to float, !dbg !136
  %1240 = fcmp olt float %1236, %1239, !dbg !138
  %1241 = fcmp uno float %1236, 0.000000e+00, !dbg !141
  %1242 = or i1 %1240, %1241, !dbg !139
  %1243 = select i1 %1242, float %1236, float %1239, !dbg !140
  %1244 = bitcast float %1243 to i32, !dbg !136
  %1245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1244, i32 1, i32 31), !dbg !136
  %1246 = bitcast i32 %1245 to float, !dbg !136
  %1247 = fcmp olt float %1243, %1246, !dbg !138
  %1248 = fcmp uno float %1243, 0.000000e+00, !dbg !141
  %1249 = or i1 %1247, %1248, !dbg !139
  %1250 = bitcast float %1147 to i32, !dbg !136
  %1251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1250, i32 16, i32 31), !dbg !136
  %1252 = bitcast i32 %1251 to float, !dbg !136
  %1253 = fcmp olt float %1147, %1252, !dbg !138
  %1254 = fcmp uno float %1147, 0.000000e+00, !dbg !141
  %1255 = or i1 %1254, %1253, !dbg !139
  %1256 = select i1 %1255, float %1147, float %1252, !dbg !140
  %1257 = bitcast float %1256 to i32, !dbg !136
  %1258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1257, i32 8, i32 31), !dbg !136
  %1259 = bitcast i32 %1258 to float, !dbg !136
  %1260 = fcmp olt float %1256, %1259, !dbg !138
  %1261 = fcmp uno float %1256, 0.000000e+00, !dbg !141
  %1262 = or i1 %1260, %1261, !dbg !139
  %1263 = select i1 %1262, float %1256, float %1259, !dbg !140
  %1264 = bitcast float %1263 to i32, !dbg !136
  %1265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 4, i32 31), !dbg !136
  %1266 = bitcast i32 %1265 to float, !dbg !136
  %1267 = fcmp olt float %1263, %1266, !dbg !138
  %1268 = fcmp uno float %1263, 0.000000e+00, !dbg !141
  %1269 = or i1 %1267, %1268, !dbg !139
  %1270 = select i1 %1269, float %1263, float %1266, !dbg !140
  %1271 = bitcast float %1270 to i32, !dbg !136
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 2, i32 31), !dbg !136
  %1273 = bitcast i32 %1272 to float, !dbg !136
  %1274 = fcmp olt float %1270, %1273, !dbg !138
  %1275 = fcmp uno float %1270, 0.000000e+00, !dbg !141
  %1276 = or i1 %1274, %1275, !dbg !139
  %1277 = select i1 %1276, float %1270, float %1273, !dbg !140
  %1278 = bitcast float %1277 to i32, !dbg !136
  %1279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1278, i32 1, i32 31), !dbg !136
  %1280 = bitcast i32 %1279 to float, !dbg !136
  %1281 = fcmp olt float %1277, %1280, !dbg !138
  %1282 = fcmp uno float %1277, 0.000000e+00, !dbg !141
  %1283 = or i1 %1281, %1282, !dbg !139
  %1284 = select i1 %1181, i32 %1176, i32 %1177, !dbg !140
  %1285 = insertelement <1 x i32> poison, i32 %1284, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %1285, i1 %822) #5, !dbg !136
  %1286 = select i1 %1215, i32 %1210, i32 %1211, !dbg !140
  %1287 = insertelement <1 x i32> poison, i32 %1286, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %1287, i1 %822) #5, !dbg !136
  %1288 = select i1 %1249, i32 %1244, i32 %1245, !dbg !140
  %1289 = insertelement <1 x i32> poison, i32 %1288, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %1289, i1 %822) #5, !dbg !136
  %1290 = select i1 %1283, i32 %1278, i32 %1279, !dbg !140
  %1291 = insertelement <1 x i32> poison, i32 %1290, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %1291, i1 %822) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1292 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !136
  %1293 = bitcast i32 %1292 to float, !dbg !136
  %1294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1292, i32 4, i32 31), !dbg !136
  %1295 = bitcast i32 %1294 to float, !dbg !136
  %1296 = fcmp olt float %1293, %1295, !dbg !138
  %1297 = fcmp uno float %1293, 0.000000e+00, !dbg !141
  %1298 = or i1 %1297, %1296, !dbg !139
  %1299 = select i1 %1298, float %1293, float %1295, !dbg !140
  %1300 = bitcast float %1299 to i32, !dbg !136
  %1301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1300, i32 2, i32 31), !dbg !136
  %1302 = bitcast i32 %1301 to float, !dbg !136
  %1303 = fcmp olt float %1299, %1302, !dbg !138
  %1304 = fcmp uno float %1299, 0.000000e+00, !dbg !141
  %1305 = or i1 %1303, %1304, !dbg !139
  %1306 = select i1 %1305, float %1299, float %1302, !dbg !140
  %1307 = bitcast float %1306 to i32, !dbg !136
  %1308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1307, i32 1, i32 31), !dbg !136
  %1309 = bitcast i32 %1308 to float, !dbg !136
  %1310 = fcmp olt float %1306, %1309, !dbg !138
  %1311 = fcmp uno float %1306, 0.000000e+00, !dbg !141
  %1312 = or i1 %1310, %1311, !dbg !139
  %1313 = select i1 %1312, i32 %1307, i32 %1308, !dbg !140
  %1314 = insertelement <1 x i32> poison, i32 %1313, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %1314, i1 %922) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1315 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %1316 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !136
  %1317 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !136
  %1318 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1319 = bitcast float %1315 to i32, !dbg !142
  %1320 = bitcast float %1316 to i32, !dbg !142
  %1321 = bitcast float %1317 to i32, !dbg !142
  %1322 = bitcast float %1318 to i32, !dbg !142
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1319, i32 %1320, i32 %1321, i32 %1322, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1323 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %342, !dbg !142
  %1324 = load float, ptr addrspace(3) %1323, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1325 = fcmp ogt <4 x float> %1099, %1100, !dbg !145
  %1326 = extractelement <4 x float> %1099, i64 3, !dbg !146
  %1327 = fcmp uno float %1326, 0.000000e+00, !dbg !146
  %1328 = extractelement <4 x i1> %1325, i64 3, !dbg !147
  %1329 = or i1 %1328, %1327, !dbg !147
  %1330 = extractelement <4 x float> %1100, i64 3, !dbg !148
  %1331 = select i1 %1329, float %1326, float %1330, !dbg !148
  %1332 = extractelement <4 x float> %1099, i64 2, !dbg !146
  %1333 = fcmp uno float %1332, 0.000000e+00, !dbg !146
  %1334 = extractelement <4 x i1> %1325, i64 2, !dbg !147
  %1335 = or i1 %1334, %1333, !dbg !147
  %1336 = extractelement <4 x float> %1100, i64 2, !dbg !148
  %1337 = select i1 %1335, float %1332, float %1336, !dbg !148
  %1338 = extractelement <4 x float> %1099, i64 1, !dbg !146
  %1339 = fcmp uno float %1338, 0.000000e+00, !dbg !146
  %1340 = extractelement <4 x i1> %1325, i64 1, !dbg !147
  %1341 = or i1 %1340, %1339, !dbg !147
  %1342 = extractelement <4 x float> %1100, i64 1, !dbg !148
  %1343 = select i1 %1341, float %1338, float %1342, !dbg !148
  %1344 = extractelement <4 x float> %1099, i64 0, !dbg !146
  %1345 = fcmp uno float %1344, 0.000000e+00, !dbg !146
  %1346 = extractelement <4 x i1> %1325, i64 0, !dbg !147
  %1347 = or i1 %1346, %1345, !dbg !147
  %1348 = extractelement <4 x float> %1100, i64 0, !dbg !148
  %1349 = select i1 %1347, float %1344, float %1348, !dbg !148
  %1350 = bitcast float %1331 to i32, !dbg !143
  %1351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1350, i32 16, i32 31), !dbg !143
  %1352 = bitcast i32 %1351 to float, !dbg !143
  %1353 = fcmp ogt float %1331, %1352, !dbg !145
  %1354 = fcmp uno float %1331, 0.000000e+00, !dbg !146
  %1355 = or i1 %1354, %1353, !dbg !147
  %1356 = select i1 %1355, float %1331, float %1352, !dbg !148
  %1357 = bitcast float %1356 to i32, !dbg !143
  %1358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1357, i32 8, i32 31), !dbg !143
  %1359 = bitcast i32 %1358 to float, !dbg !143
  %1360 = fcmp ogt float %1356, %1359, !dbg !145
  %1361 = fcmp uno float %1356, 0.000000e+00, !dbg !146
  %1362 = or i1 %1360, %1361, !dbg !147
  %1363 = select i1 %1362, float %1356, float %1359, !dbg !148
  %1364 = bitcast float %1363 to i32, !dbg !143
  %1365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1364, i32 4, i32 31), !dbg !143
  %1366 = bitcast i32 %1365 to float, !dbg !143
  %1367 = fcmp ogt float %1363, %1366, !dbg !145
  %1368 = fcmp uno float %1363, 0.000000e+00, !dbg !146
  %1369 = or i1 %1367, %1368, !dbg !147
  %1370 = select i1 %1369, float %1363, float %1366, !dbg !148
  %1371 = bitcast float %1370 to i32, !dbg !143
  %1372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1371, i32 2, i32 31), !dbg !143
  %1373 = bitcast i32 %1372 to float, !dbg !143
  %1374 = fcmp ogt float %1370, %1373, !dbg !145
  %1375 = fcmp uno float %1370, 0.000000e+00, !dbg !146
  %1376 = or i1 %1374, %1375, !dbg !147
  %1377 = select i1 %1376, float %1370, float %1373, !dbg !148
  %1378 = bitcast float %1377 to i32, !dbg !143
  %1379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1378, i32 1, i32 31), !dbg !143
  %1380 = bitcast i32 %1379 to float, !dbg !143
  %1381 = fcmp ogt float %1377, %1380, !dbg !145
  %1382 = fcmp uno float %1377, 0.000000e+00, !dbg !146
  %1383 = or i1 %1381, %1382, !dbg !147
  %1384 = bitcast float %1337 to i32, !dbg !143
  %1385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1384, i32 16, i32 31), !dbg !143
  %1386 = bitcast i32 %1385 to float, !dbg !143
  %1387 = fcmp ogt float %1337, %1386, !dbg !145
  %1388 = fcmp uno float %1337, 0.000000e+00, !dbg !146
  %1389 = or i1 %1388, %1387, !dbg !147
  %1390 = select i1 %1389, float %1337, float %1386, !dbg !148
  %1391 = bitcast float %1390 to i32, !dbg !143
  %1392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1391, i32 8, i32 31), !dbg !143
  %1393 = bitcast i32 %1392 to float, !dbg !143
  %1394 = fcmp ogt float %1390, %1393, !dbg !145
  %1395 = fcmp uno float %1390, 0.000000e+00, !dbg !146
  %1396 = or i1 %1394, %1395, !dbg !147
  %1397 = select i1 %1396, float %1390, float %1393, !dbg !148
  %1398 = bitcast float %1397 to i32, !dbg !143
  %1399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1398, i32 4, i32 31), !dbg !143
  %1400 = bitcast i32 %1399 to float, !dbg !143
  %1401 = fcmp ogt float %1397, %1400, !dbg !145
  %1402 = fcmp uno float %1397, 0.000000e+00, !dbg !146
  %1403 = or i1 %1401, %1402, !dbg !147
  %1404 = select i1 %1403, float %1397, float %1400, !dbg !148
  %1405 = bitcast float %1404 to i32, !dbg !143
  %1406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1405, i32 2, i32 31), !dbg !143
  %1407 = bitcast i32 %1406 to float, !dbg !143
  %1408 = fcmp ogt float %1404, %1407, !dbg !145
  %1409 = fcmp uno float %1404, 0.000000e+00, !dbg !146
  %1410 = or i1 %1408, %1409, !dbg !147
  %1411 = select i1 %1410, float %1404, float %1407, !dbg !148
  %1412 = bitcast float %1411 to i32, !dbg !143
  %1413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1412, i32 1, i32 31), !dbg !143
  %1414 = bitcast i32 %1413 to float, !dbg !143
  %1415 = fcmp ogt float %1411, %1414, !dbg !145
  %1416 = fcmp uno float %1411, 0.000000e+00, !dbg !146
  %1417 = or i1 %1415, %1416, !dbg !147
  %1418 = bitcast float %1343 to i32, !dbg !143
  %1419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1418, i32 16, i32 31), !dbg !143
  %1420 = bitcast i32 %1419 to float, !dbg !143
  %1421 = fcmp ogt float %1343, %1420, !dbg !145
  %1422 = fcmp uno float %1343, 0.000000e+00, !dbg !146
  %1423 = or i1 %1422, %1421, !dbg !147
  %1424 = select i1 %1423, float %1343, float %1420, !dbg !148
  %1425 = bitcast float %1424 to i32, !dbg !143
  %1426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1425, i32 8, i32 31), !dbg !143
  %1427 = bitcast i32 %1426 to float, !dbg !143
  %1428 = fcmp ogt float %1424, %1427, !dbg !145
  %1429 = fcmp uno float %1424, 0.000000e+00, !dbg !146
  %1430 = or i1 %1428, %1429, !dbg !147
  %1431 = select i1 %1430, float %1424, float %1427, !dbg !148
  %1432 = bitcast float %1431 to i32, !dbg !143
  %1433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1432, i32 4, i32 31), !dbg !143
  %1434 = bitcast i32 %1433 to float, !dbg !143
  %1435 = fcmp ogt float %1431, %1434, !dbg !145
  %1436 = fcmp uno float %1431, 0.000000e+00, !dbg !146
  %1437 = or i1 %1435, %1436, !dbg !147
  %1438 = select i1 %1437, float %1431, float %1434, !dbg !148
  %1439 = bitcast float %1438 to i32, !dbg !143
  %1440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1439, i32 2, i32 31), !dbg !143
  %1441 = bitcast i32 %1440 to float, !dbg !143
  %1442 = fcmp ogt float %1438, %1441, !dbg !145
  %1443 = fcmp uno float %1438, 0.000000e+00, !dbg !146
  %1444 = or i1 %1442, %1443, !dbg !147
  %1445 = select i1 %1444, float %1438, float %1441, !dbg !148
  %1446 = bitcast float %1445 to i32, !dbg !143
  %1447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1446, i32 1, i32 31), !dbg !143
  %1448 = bitcast i32 %1447 to float, !dbg !143
  %1449 = fcmp ogt float %1445, %1448, !dbg !145
  %1450 = fcmp uno float %1445, 0.000000e+00, !dbg !146
  %1451 = or i1 %1449, %1450, !dbg !147
  %1452 = bitcast float %1349 to i32, !dbg !143
  %1453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1452, i32 16, i32 31), !dbg !143
  %1454 = bitcast i32 %1453 to float, !dbg !143
  %1455 = fcmp ogt float %1349, %1454, !dbg !145
  %1456 = fcmp uno float %1349, 0.000000e+00, !dbg !146
  %1457 = or i1 %1456, %1455, !dbg !147
  %1458 = select i1 %1457, float %1349, float %1454, !dbg !148
  %1459 = bitcast float %1458 to i32, !dbg !143
  %1460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1459, i32 8, i32 31), !dbg !143
  %1461 = bitcast i32 %1460 to float, !dbg !143
  %1462 = fcmp ogt float %1458, %1461, !dbg !145
  %1463 = fcmp uno float %1458, 0.000000e+00, !dbg !146
  %1464 = or i1 %1462, %1463, !dbg !147
  %1465 = select i1 %1464, float %1458, float %1461, !dbg !148
  %1466 = bitcast float %1465 to i32, !dbg !143
  %1467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1466, i32 4, i32 31), !dbg !143
  %1468 = bitcast i32 %1467 to float, !dbg !143
  %1469 = fcmp ogt float %1465, %1468, !dbg !145
  %1470 = fcmp uno float %1465, 0.000000e+00, !dbg !146
  %1471 = or i1 %1469, %1470, !dbg !147
  %1472 = select i1 %1471, float %1465, float %1468, !dbg !148
  %1473 = bitcast float %1472 to i32, !dbg !143
  %1474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1473, i32 2, i32 31), !dbg !143
  %1475 = bitcast i32 %1474 to float, !dbg !143
  %1476 = fcmp ogt float %1472, %1475, !dbg !145
  %1477 = fcmp uno float %1472, 0.000000e+00, !dbg !146
  %1478 = or i1 %1476, %1477, !dbg !147
  %1479 = select i1 %1478, float %1472, float %1475, !dbg !148
  %1480 = bitcast float %1479 to i32, !dbg !143
  %1481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1480, i32 1, i32 31), !dbg !143
  %1482 = bitcast i32 %1481 to float, !dbg !143
  %1483 = fcmp ogt float %1479, %1482, !dbg !145
  %1484 = fcmp uno float %1479, 0.000000e+00, !dbg !146
  %1485 = or i1 %1483, %1484, !dbg !147
  %1486 = select i1 %1383, i32 %1378, i32 %1379, !dbg !148
  %1487 = insertelement <1 x i32> poison, i32 %1486, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %1487, i1 %822) #5, !dbg !143
  %1488 = select i1 %1417, i32 %1412, i32 %1413, !dbg !148
  %1489 = insertelement <1 x i32> poison, i32 %1488, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %1489, i1 %822) #5, !dbg !143
  %1490 = select i1 %1451, i32 %1446, i32 %1447, !dbg !148
  %1491 = insertelement <1 x i32> poison, i32 %1490, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %1491, i1 %822) #5, !dbg !143
  %1492 = select i1 %1485, i32 %1480, i32 %1481, !dbg !148
  %1493 = insertelement <1 x i32> poison, i32 %1492, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %1493, i1 %822) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1494 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !143
  %1495 = bitcast i32 %1494 to float, !dbg !143
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1494, i32 4, i32 31), !dbg !143
  %1497 = bitcast i32 %1496 to float, !dbg !143
  %1498 = fcmp ogt float %1495, %1497, !dbg !145
  %1499 = fcmp uno float %1495, 0.000000e+00, !dbg !146
  %1500 = or i1 %1499, %1498, !dbg !147
  %1501 = select i1 %1500, float %1495, float %1497, !dbg !148
  %1502 = bitcast float %1501 to i32, !dbg !143
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 2, i32 31), !dbg !143
  %1504 = bitcast i32 %1503 to float, !dbg !143
  %1505 = fcmp ogt float %1501, %1504, !dbg !145
  %1506 = fcmp uno float %1501, 0.000000e+00, !dbg !146
  %1507 = or i1 %1505, %1506, !dbg !147
  %1508 = select i1 %1507, float %1501, float %1504, !dbg !148
  %1509 = bitcast float %1508 to i32, !dbg !143
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 1, i32 31), !dbg !143
  %1511 = bitcast i32 %1510 to float, !dbg !143
  %1512 = fcmp ogt float %1508, %1511, !dbg !145
  %1513 = fcmp uno float %1508, 0.000000e+00, !dbg !146
  %1514 = or i1 %1512, %1513, !dbg !147
  %1515 = select i1 %1514, i32 %1509, i32 %1510, !dbg !148
  %1516 = insertelement <1 x i32> poison, i32 %1515, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %1516, i1 %922) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1517 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %1518 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !143
  %1519 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !143
  %1520 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1521 = bitcast float %1517 to i32, !dbg !149
  %1522 = bitcast float %1518 to i32, !dbg !149
  %1523 = bitcast float %1519 to i32, !dbg !149
  %1524 = bitcast float %1520 to i32, !dbg !149
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1521, i32 %1522, i32 %1523, i32 %1524, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1525 = load float, ptr addrspace(3) %1323, align 4, !dbg !149
  %1526 = sext i32 %343 to i64, !dbg !150
  %1527 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1526, !dbg !150
  %1528 = fptrunc float %1324 to bfloat, !dbg !142
  %1529 = and i32 %19, 252, !dbg !142
  %1530 = icmp eq i32 %1529, 0, !dbg !142
  %1531 = bitcast bfloat %1528 to i16, !dbg !142
  %1532 = and i1 %1530, %344, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1531, ptr addrspace(1) %1527, i1 %1532) #5, !dbg !142
  %1533 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1526, !dbg !151
  %1534 = fptrunc float %1525 to bfloat, !dbg !149
  %1535 = bitcast bfloat %1534 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1535, ptr addrspace(1) %1533, i1 %1532) #5, !dbg !149
  %1536 = insertelement <4 x float> poison, float %1318, i64 0, !dbg !152
  %1537 = insertelement <4 x float> %1536, float %1317, i64 1, !dbg !152
  %1538 = insertelement <4 x float> %1537, float %1316, i64 2, !dbg !152
  %1539 = insertelement <4 x float> %1538, float %1315, i64 3, !dbg !152
  %1540 = fcmp oge <4 x float> %1539, zeroinitializer, !dbg !152
  %1541 = select <4 x i1> %1540, <4 x float> zeroinitializer, <4 x float> %1539, !dbg !152
  %1542 = fsub <4 x float> zeroinitializer, %1541, !dbg !154
  %1543 = insertelement <4 x float> poison, float %1520, i64 0, !dbg !155
  %1544 = insertelement <4 x float> %1543, float %1519, i64 1, !dbg !155
  %1545 = insertelement <4 x float> %1544, float %1518, i64 2, !dbg !155
  %1546 = insertelement <4 x float> %1545, float %1517, i64 3, !dbg !155
  %1547 = fcmp ole <4 x float> %1546, zeroinitializer, !dbg !155
  %1548 = select <4 x i1> %1547, <4 x float> zeroinitializer, <4 x float> %1546, !dbg !155
  %1549 = fcmp ogt <4 x float> %1542, %1548, !dbg !157
  %1550 = fcmp uno <4 x float> %1542, zeroinitializer, !dbg !159
  %1551 = or <4 x i1> %1550, %1549, !dbg !160
  %1552 = select <4 x i1> %1551, <4 x float> %1542, <4 x float> %1548, !dbg !161
  %1553 = fmul <4 x float> %1552, splat (float 0x3F80204080000000), !dbg !162
  %1554 = fcmp ogt <4 x float> %1553, splat (float 0x3EE4F8B580000000), !dbg !163
  %1555 = extractelement <4 x float> %1553, i64 3, !dbg !165
  %1556 = fcmp uno float %1555, 0.000000e+00, !dbg !166
  %1557 = extractelement <4 x float> %1553, i64 2, !dbg !165
  %1558 = fcmp uno float %1557, 0.000000e+00, !dbg !166
  %1559 = extractelement <4 x float> %1553, i64 1, !dbg !165
  %1560 = fcmp uno float %1559, 0.000000e+00, !dbg !166
  %1561 = extractelement <4 x float> %1553, i64 0, !dbg !165
  %1562 = fcmp uno float %1561, 0.000000e+00, !dbg !166
  %1563 = extractelement <4 x i1> %1554, i64 3, !dbg !167
  %1564 = or i1 %1563, %1556, !dbg !167
  %1565 = extractelement <4 x i1> %1554, i64 2, !dbg !167
  %1566 = or i1 %1565, %1558, !dbg !167
  %1567 = extractelement <4 x i1> %1554, i64 1, !dbg !167
  %1568 = or i1 %1567, %1560, !dbg !167
  %1569 = extractelement <4 x i1> %1554, i64 0, !dbg !167
  %1570 = or i1 %1569, %1562, !dbg !167
  %1571 = select i1 %1564, float %1555, float 0x3EE4F8B580000000, !dbg !165
  %1572 = select i1 %1566, float %1557, float 0x3EE4F8B580000000, !dbg !165
  %1573 = select i1 %1568, float %1559, float 0x3EE4F8B580000000, !dbg !165
  %1574 = select i1 %1570, float %1561, float 0x3EE4F8B580000000, !dbg !165
  %1575 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1571), !dbg !168
  %1576 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1572), !dbg !168
  %1577 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1573), !dbg !168
  %1578 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1574), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %1579 = bitcast float %1575 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1579, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1579, i1 true) #5, !dbg !169
  %1580 = bitcast float %1576 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1580, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1580, i1 true) #5, !dbg !169
  %1581 = bitcast float %1577 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1581, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1581, i1 true) #5, !dbg !169
  %1582 = bitcast float %1578 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1582, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1582, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %.idx = shl nuw nsw i32 %20, 3, !dbg !169
  %1583 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !169
  %1584 = load float, ptr addrspace(3) %1583, align 8, !dbg !169
  br label %1585, !dbg !170

1585:                                             ; preds = %1123, %1585
  %indvars.iv168 = phi i64 [ 0, %1123 ], [ %indvars.iv.next169, %1585 ]
  %1586 = trunc nuw nsw i64 %indvars.iv168 to i32, !dbg !171
  %1587 = add i32 %66, %1586, !dbg !171
  %1588 = sext i32 %1587 to i64, !dbg !172
  %1589 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1588, !dbg !172
  %1590 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1589, i1 %23) #5, !dbg !173
  %1591 = extractvalue { i32, i32, i32, i32 } %1590, 0, !dbg !173
  %1592 = bitcast i32 %1591 to <2 x bfloat>, !dbg !173
  %1593 = extractvalue { i32, i32, i32, i32 } %1590, 1, !dbg !173
  %1594 = bitcast i32 %1593 to <2 x bfloat>, !dbg !173
  %1595 = extractvalue { i32, i32, i32, i32 } %1590, 2, !dbg !173
  %1596 = bitcast i32 %1595 to <2 x bfloat>, !dbg !173
  %1597 = extractvalue { i32, i32, i32, i32 } %1590, 3, !dbg !173
  %1598 = bitcast i32 %1597 to <2 x bfloat>, !dbg !173
  %1599 = extractelement <2 x bfloat> %1592, i64 0, !dbg !173
  %1600 = extractelement <2 x bfloat> %1592, i64 1, !dbg !173
  %1601 = extractelement <2 x bfloat> %1594, i64 0, !dbg !173
  %1602 = extractelement <2 x bfloat> %1594, i64 1, !dbg !173
  %1603 = extractelement <2 x bfloat> %1596, i64 0, !dbg !173
  %1604 = extractelement <2 x bfloat> %1596, i64 1, !dbg !173
  %1605 = extractelement <2 x bfloat> %1598, i64 0, !dbg !173
  %1606 = extractelement <2 x bfloat> %1598, i64 1, !dbg !173
  %1607 = fpext bfloat %1599 to float, !dbg !174
  %1608 = fpext bfloat %1600 to float, !dbg !174
  %1609 = fpext bfloat %1601 to float, !dbg !174
  %1610 = fpext bfloat %1602 to float, !dbg !174
  %1611 = fpext bfloat %1603 to float, !dbg !174
  %1612 = fpext bfloat %1604 to float, !dbg !174
  %1613 = fpext bfloat %1605 to float, !dbg !174
  %1614 = fpext bfloat %1606 to float, !dbg !174
  %1615 = fmul float %1584, %1607, !dbg !169
  %1616 = fmul float %1584, %1608, !dbg !169
  %1617 = fmul float %1584, %1609, !dbg !169
  %1618 = fmul float %1584, %1610, !dbg !169
  %1619 = fmul float %1584, %1611, !dbg !169
  %1620 = fmul float %1584, %1612, !dbg !169
  %1621 = fmul float %1584, %1613, !dbg !169
  %1622 = fmul float %1584, %1614, !dbg !169
  %1623 = tail call float @llvm.nvvm.round.f(float %1615) #5, !dbg !175
  %1624 = tail call float @llvm.nvvm.round.f(float %1616) #5, !dbg !175
  %1625 = tail call float @llvm.nvvm.round.f(float %1617) #5, !dbg !175
  %1626 = tail call float @llvm.nvvm.round.f(float %1618) #5, !dbg !175
  %1627 = tail call float @llvm.nvvm.round.f(float %1619) #5, !dbg !175
  %1628 = tail call float @llvm.nvvm.round.f(float %1620) #5, !dbg !175
  %1629 = tail call float @llvm.nvvm.round.f(float %1621) #5, !dbg !175
  %1630 = tail call float @llvm.nvvm.round.f(float %1622) #5, !dbg !175
  %1631 = insertelement <4 x float> poison, float %1623, i64 0, !dbg !176
  %1632 = insertelement <4 x float> %1631, float %1624, i64 1, !dbg !176
  %1633 = insertelement <4 x float> %1632, float %1625, i64 2, !dbg !176
  %1634 = insertelement <4 x float> %1633, float %1626, i64 3, !dbg !176
  %1635 = fcmp ogt <4 x float> %1634, splat (float -1.270000e+02), !dbg !176
  %1636 = fcmp uno <4 x float> %1634, zeroinitializer, !dbg !178
  %1637 = or <4 x i1> %1635, %1636, !dbg !179
  %1638 = select <4 x i1> %1637, <4 x float> %1634, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1639 = fcmp olt <4 x float> %1638, splat (float 1.270000e+02), !dbg !181
  %1640 = fcmp uno <4 x float> %1638, zeroinitializer, !dbg !183
  %1641 = or <4 x i1> %1639, %1640, !dbg !184
  %1642 = fptosi <4 x float> %1638 to <4 x i8>, !dbg !185
  %1643 = select <4 x i1> %1641, <4 x i8> %1642, <4 x i8> splat (i8 127), !dbg !186
  %1644 = insertelement <4 x float> poison, float %1627, i64 0, !dbg !176
  %1645 = insertelement <4 x float> %1644, float %1628, i64 1, !dbg !176
  %1646 = insertelement <4 x float> %1645, float %1629, i64 2, !dbg !176
  %1647 = insertelement <4 x float> %1646, float %1630, i64 3, !dbg !176
  %1648 = fcmp ogt <4 x float> %1647, splat (float -1.270000e+02), !dbg !176
  %1649 = fcmp uno <4 x float> %1647, zeroinitializer, !dbg !178
  %1650 = or <4 x i1> %1648, %1649, !dbg !179
  %1651 = select <4 x i1> %1650, <4 x float> %1647, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1652 = fcmp olt <4 x float> %1651, splat (float 1.270000e+02), !dbg !181
  %1653 = fcmp uno <4 x float> %1651, zeroinitializer, !dbg !183
  %1654 = or <4 x i1> %1652, %1653, !dbg !184
  %1655 = fptosi <4 x float> %1651 to <4 x i8>, !dbg !185
  %1656 = select <4 x i1> %1654, <4 x i8> %1655, <4 x i8> splat (i8 127), !dbg !186
  %1657 = getelementptr i8, ptr addrspace(1) %12, i64 %1588, !dbg !187
  %1658 = bitcast <4 x i8> %1643 to i32, !dbg !188
  %1659 = bitcast <4 x i8> %1656 to i32, !dbg !188
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1658, i32 %1659, ptr addrspace(1) %1657, i1 %23) #5, !dbg !188
  %indvars.iv.next169 = add nuw nsw i64 %indvars.iv168, 512, !dbg !170
  %1660 = icmp samesign ult i64 %indvars.iv168, 2560, !dbg !170
  br i1 %1660, label %1585, label %1661, !dbg !170

1661:                                             ; preds = %1585
  ret void, !dbg !189
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 112, column: 50, scope: !6)
!102 = !DILocation(line: 80, column: 40, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 86, column: 115, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 87, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 50, scope: !6)
!117 = !DILocation(line: 88, column: 103, scope: !6)
!118 = !DILocation(line: 89, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 49, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !114)
!127 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !114)
!128 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !114)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !131)
!131 = !DILocation(line: 111, column: 47, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !131)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 141, column: 36, scope: !6)
!176 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !177)
!177 = !DILocation(line: 144, column: 46, scope: !6)
!178 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !177)
!179 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !177)
!180 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !177)
!181 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !182)
!182 = !DILocation(line: 146, column: 46, scope: !6)
!183 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !182)
!184 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !182)
!185 = !DILocation(line: 148, column: 25, scope: !6)
!186 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !182)
!187 = !DILocation(line: 149, column: 29, scope: !6)
!188 = !DILocation(line: 149, column: 53, scope: !6)
!189 = !DILocation(line: 118, column: 4, scope: !6)
