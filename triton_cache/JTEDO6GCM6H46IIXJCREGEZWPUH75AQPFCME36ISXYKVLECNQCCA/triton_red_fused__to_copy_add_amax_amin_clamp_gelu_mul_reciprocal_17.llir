; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = icmp slt i32 %13, 3600, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = shl i32 %15, 1, !dbg !11
  %18 = and i32 %17, 2046, !dbg !11
  %19 = sext i32 %13 to i64, !dbg !12
  %20 = getelementptr bfloat, ptr addrspace(1) %1, i64 %19, !dbg !12
  %21 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %22 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #5, !dbg !13
  %23 = bitcast i16 %22 to bfloat, !dbg !13
  %24 = getelementptr bfloat, ptr addrspace(1) %2, i64 %19, !dbg !14
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !15
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !15
  %27 = bitcast i16 %26 to bfloat, !dbg !15
  %28 = mul i32 %13, 12288, !dbg !16
  %.inv = fcmp oge bfloat %23, 0xR0000, !dbg !17
  %29 = select i1 %.inv, bfloat 0xR0000, bfloat %23, !dbg !17
  %30 = fpext bfloat %29 to float, !dbg !17
  %31 = fsub float 0.000000e+00, %30, !dbg !21
  %.inv2 = fcmp ole bfloat %27, 0xR0000, !dbg !22
  %32 = select i1 %.inv2, bfloat 0xR0000, bfloat %27, !dbg !22
  %33 = fpext bfloat %32 to float, !dbg !22
  %34 = fcmp ogt float %31, %33, !dbg !24
  %35 = fcmp uno float %31, 0.000000e+00, !dbg !26
  %36 = or i1 %35, %34, !dbg !27
  %37 = select i1 %36, float %31, float %33, !dbg !28
  %38 = fmul float %37, 0x3F80204080000000, !dbg !29
  %39 = fcmp ogt float %38, 0x3EE4F8B580000000, !dbg !30
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !32
  %41 = or i1 %39, %40, !dbg !33
  %42 = select i1 %41, float %38, float 0x3EE4F8B580000000, !dbg !34
  %43 = zext nneg i32 %18 to i64, !dbg !35
  %44 = insertelement <2 x i1> poison, i1 %14, i64 0, !dbg !36
  %45 = shufflevector <2 x i1> %44, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %46 = insertelement <2 x float> poison, float %42, i64 0, !dbg !37
  %47 = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  br label %48, !dbg !35

48:                                               ; preds = %12, %__nv_tanhf.exit61
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit61 ]
  %49 = phi float [ 0xFFF0000000000000, %12 ], [ %172, %__nv_tanhf.exit61 ]
  %50 = phi float [ 0xFFF0000000000000, %12 ], [ %173, %__nv_tanhf.exit61 ]
  %51 = phi <2 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %161, %__nv_tanhf.exit61 ]
  %52 = or disjoint i64 %indvars.iv, %43, !dbg !38
  %53 = trunc nuw nsw i64 %52 to i32, !dbg !39
  %54 = add i32 %28, %53, !dbg !39
  %55 = sext i32 %54 to i64, !dbg !40
  %56 = getelementptr i32, ptr addrspace(1) %0, i64 %55, !dbg !40
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %14) #5, !dbg !41
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !41
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !41
  %60 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !42
  %61 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %60, i1 true) #5, !dbg !43
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !43
  %63 = getelementptr bfloat, ptr addrspace(1) %4, i64 %52, !dbg !44
  %64 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %63, i1 true) #5, !dbg !45
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !45
  %66 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !46
  %67 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !47
  %68 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !48
  %69 = insertelement <2 x i32> %68, i32 %59, i64 1, !dbg !48
  %70 = sitofp <2 x i32> %69 to <2 x float>, !dbg !48
  %71 = fmul <2 x float> %47, %70, !dbg !37
  %72 = fmul <2 x float> %71, %66, !dbg !49
  %73 = fadd <2 x float> %72, %67, !dbg !50
  %74 = fmul <2 x float> %73, splat (float 5.000000e-01), !dbg !51
  %75 = extractelement <2 x float> %73, i64 0, !dbg !52
  %76 = fmul float %75, %75, !dbg !53
  %77 = extractelement <2 x float> %73, i64 1, !dbg !52
  %78 = fmul float %77, %77, !dbg !53
  %79 = fmul float %75, %76, !dbg !54
  %80 = fmul float %77, %78, !dbg !54
  %81 = fmul float %79, 0x3FA6E4E260000000, !dbg !55
  %82 = fmul float %80, 0x3FA6E4E260000000, !dbg !55
  %83 = fadd float %75, %81, !dbg !52
  %84 = fadd float %77, %82, !dbg !52
  %85 = fmul float %83, 0x3FE9884540000000, !dbg !56
  %86 = fmul float %84, 0x3FE9884540000000, !dbg !56
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i24 = icmp eq i32 %87, 0, !dbg !57
  %88 = tail call float @llvm.nvvm.fabs.ftz.f(float %85) #5, !dbg !57
  %89 = tail call float @llvm.nvvm.fabs.f(float %85) #5, !dbg !57
  %.01.i25 = select i1 %.not.i24, float %89, float %88, !dbg !57
  %90 = fcmp ult float %.01.i25, 0x3FE3333340000000, !dbg !57
  br i1 %90, label %__internal_fmad.exit3.i31, label %__internal_fmad.exit1.i26, !dbg !57

__internal_fmad.exit1.i26:                        ; preds = %48
  %91 = fmul float %.01.i25, 0x4007154760000000, !dbg !57
  %92 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %91) #5, !dbg !57
  %93 = fadd float %92, 1.000000e+00, !dbg !57
  %94 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %93) #6, !dbg !57, !srcloc !58
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not6.i27 = icmp eq i32 %95, 0, !dbg !57
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %94, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %94, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %.03.i28 = select i1 %.not6.i27, float %97, float %96, !dbg !57
  %98 = fcmp oge float %.01.i25, 0x4022059680000000, !dbg !57
  %s.0.i29 = select i1 %98, float 1.000000e+00, float %.03.i28, !dbg !57
  %99 = bitcast float %s.0.i29 to i32, !dbg !57
  %100 = bitcast float %85 to i32, !dbg !57
  %101 = and i32 %100, -2147483648, !dbg !57
  %102 = or i32 %101, %99, !dbg !57
  %103 = bitcast i32 %102 to float, !dbg !57
  br label %__nv_tanhf.exit42, !dbg !57

__internal_fmad.exit3.i31:                        ; preds = %48
  %104 = fmul float %85, %85, !dbg !57
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not1.i32 = icmp eq i32 %105, 0, !dbg !57
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %104, float 0xBFAAC795C0000000) #5, !dbg !57
  %107 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %104, float 0xBFAAC795C0000000) #5, !dbg !57
  %.06.i33 = select i1 %.not1.i32, float %107, float %106, !dbg !57
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not2.i34 = icmp eq i32 %108, 0, !dbg !57
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i33, float %104, float 0x3FC10B2820000000) #5, !dbg !57
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i33, float %104, float 0x3FC10B2820000000) #5, !dbg !57
  %.05.i35 = select i1 %.not2.i34, float %110, float %109, !dbg !57
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not3.i36 = icmp eq i32 %111, 0, !dbg !57
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %104, float 0xBFD5553DA0000000) #5, !dbg !57
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %104, float 0xBFD5553DA0000000) #5, !dbg !57
  %.0.i37 = select i1 %.not3.i36, float %113, float %112, !dbg !57
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not4.i38 = icmp eq i32 %114, 0, !dbg !57
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i37, float %104, float 0.000000e+00) #5, !dbg !57
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i37, float %104, float 0.000000e+00) #5, !dbg !57
  %.04.i39 = select i1 %.not4.i38, float %116, float %115, !dbg !57
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not5.i40 = icmp eq i32 %117, 0, !dbg !57
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i39, float %85, float %85) #5, !dbg !57
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i39, float %85, float %85) #5, !dbg !57
  %.02.i41 = select i1 %.not5.i40, float %119, float %118, !dbg !57
  br label %__nv_tanhf.exit42, !dbg !57

__nv_tanhf.exit42:                                ; preds = %__internal_fmad.exit1.i26, %__internal_fmad.exit3.i31
  %s.1.i30 = phi float [ %103, %__internal_fmad.exit1.i26 ], [ %.02.i41, %__internal_fmad.exit3.i31 ], !dbg !57
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i43 = icmp eq i32 %120, 0, !dbg !57
  %121 = tail call float @llvm.nvvm.fabs.ftz.f(float %86) #5, !dbg !57
  %122 = tail call float @llvm.nvvm.fabs.f(float %86) #5, !dbg !57
  %.01.i44 = select i1 %.not.i43, float %122, float %121, !dbg !57
  %123 = fcmp ult float %.01.i44, 0x3FE3333340000000, !dbg !57
  br i1 %123, label %__internal_fmad.exit3.i50, label %__internal_fmad.exit1.i45, !dbg !57

__internal_fmad.exit1.i45:                        ; preds = %__nv_tanhf.exit42
  %124 = fmul float %.01.i44, 0x4007154760000000, !dbg !57
  %125 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %124) #5, !dbg !57
  %126 = fadd float %125, 1.000000e+00, !dbg !57
  %127 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %126) #6, !dbg !57, !srcloc !58
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not6.i46 = icmp eq i32 %128, 0, !dbg !57
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %127, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %127, float -2.000000e+00, float 1.000000e+00) #5, !dbg !57
  %.03.i47 = select i1 %.not6.i46, float %130, float %129, !dbg !57
  %131 = fcmp oge float %.01.i44, 0x4022059680000000, !dbg !57
  %s.0.i48 = select i1 %131, float 1.000000e+00, float %.03.i47, !dbg !57
  %132 = bitcast float %s.0.i48 to i32, !dbg !57
  %133 = bitcast float %86 to i32, !dbg !57
  %134 = and i32 %133, -2147483648, !dbg !57
  %135 = or i32 %134, %132, !dbg !57
  %136 = bitcast i32 %135 to float, !dbg !57
  br label %__nv_tanhf.exit61, !dbg !57

__internal_fmad.exit3.i50:                        ; preds = %__nv_tanhf.exit42
  %137 = fmul float %86, %86, !dbg !57
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not1.i51 = icmp eq i32 %138, 0, !dbg !57
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %137, float 0xBFAAC795C0000000) #5, !dbg !57
  %140 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %137, float 0xBFAAC795C0000000) #5, !dbg !57
  %.06.i52 = select i1 %.not1.i51, float %140, float %139, !dbg !57
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not2.i53 = icmp eq i32 %141, 0, !dbg !57
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i52, float %137, float 0x3FC10B2820000000) #5, !dbg !57
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i52, float %137, float 0x3FC10B2820000000) #5, !dbg !57
  %.05.i54 = select i1 %.not2.i53, float %143, float %142, !dbg !57
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not3.i55 = icmp eq i32 %144, 0, !dbg !57
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i54, float %137, float 0xBFD5553DA0000000) #5, !dbg !57
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i54, float %137, float 0xBFD5553DA0000000) #5, !dbg !57
  %.0.i56 = select i1 %.not3.i55, float %146, float %145, !dbg !57
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not4.i57 = icmp eq i32 %147, 0, !dbg !57
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i56, float %137, float 0.000000e+00) #5, !dbg !57
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i56, float %137, float 0.000000e+00) #5, !dbg !57
  %.04.i58 = select i1 %.not4.i57, float %149, float %148, !dbg !57
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not5.i59 = icmp eq i32 %150, 0, !dbg !57
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i58, float %86, float %86) #5, !dbg !57
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i58, float %86, float %86) #5, !dbg !57
  %.02.i60 = select i1 %.not5.i59, float %152, float %151, !dbg !57
  br label %__nv_tanhf.exit61, !dbg !57

__nv_tanhf.exit61:                                ; preds = %__internal_fmad.exit1.i45, %__internal_fmad.exit3.i50
  %s.1.i49 = phi float [ %136, %__internal_fmad.exit1.i45 ], [ %.02.i60, %__internal_fmad.exit3.i50 ], !dbg !57
  %153 = insertelement <2 x float> poison, float %s.1.i30, i64 0, !dbg !59
  %154 = insertelement <2 x float> %153, float %s.1.i49, i64 1, !dbg !59
  %155 = fadd <2 x float> %154, splat (float 1.000000e+00), !dbg !59
  %156 = fcmp uno <2 x float> %51, zeroinitializer, !dbg !60
  %157 = fmul <2 x float> %74, %155, !dbg !62
  %158 = fcmp olt <2 x float> %51, %157, !dbg !63
  %159 = or <2 x i1> %156, %158, !dbg !64
  %160 = select <2 x i1> %159, <2 x float> %51, <2 x float> %157, !dbg !65
  %161 = select <2 x i1> %45, <2 x float> %160, <2 x float> %51, !dbg !36
  %162 = extractelement <2 x float> %157, i64 0, !dbg !66
  %163 = fcmp ogt float %49, %162, !dbg !68
  %164 = extractelement <2 x float> %157, i64 1, !dbg !66
  %165 = fcmp ogt float %50, %164, !dbg !68
  %166 = fcmp uno float %49, 0.000000e+00, !dbg !69
  %167 = fcmp uno float %50, 0.000000e+00, !dbg !69
  %168 = or i1 %166, %163, !dbg !70
  %169 = or i1 %167, %165, !dbg !70
  %170 = select i1 %168, float %49, float %162, !dbg !66
  %171 = select i1 %169, float %50, float %164, !dbg !66
  %172 = select i1 %14, float %170, float %49, !dbg !71
  %173 = select i1 %14, float %171, float %50, !dbg !71
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !72
  %175 = bitcast float %75 to i32, !dbg !73
  %176 = bitcast float %77 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 %14) #5, !dbg !73
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !35
  %177 = icmp samesign ult i64 %indvars.iv, 10240, !dbg !35
  br i1 %177, label %48, label %178, !dbg !35

178:                                              ; preds = %__nv_tanhf.exit61
  %179 = lshr i32 %15, 5, !dbg !11
  %180 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %161, <2 x i32> <i32 0, i32 2>, !dbg !74
  %181 = fcmp olt <2 x float> %180, %161, !dbg !74
  %182 = fcmp uno <2 x float> %180, %161, !dbg !74
  %shift = shufflevector <2 x i1> %181, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !77
  %183 = or <2 x i1> %shift, %182, !dbg !77
  %184 = extractelement <2 x i1> %183, i64 0, !dbg !77
  %185 = extractelement <2 x float> %161, i64 0, !dbg !78
  %186 = extractelement <2 x float> %161, i64 1, !dbg !78
  %187 = select i1 %184, float %185, float %186, !dbg !78
  %188 = bitcast float %187 to i32, !dbg !79
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 16, i32 31), !dbg !79
  %190 = bitcast i32 %189 to float, !dbg !79
  %191 = fcmp olt float %187, %190, !dbg !74
  %192 = fcmp uno float %187, 0.000000e+00, !dbg !80
  %193 = or i1 %192, %191, !dbg !77
  %194 = select i1 %193, float %187, float %190, !dbg !78
  %195 = bitcast float %194 to i32, !dbg !79
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !79
  %197 = bitcast i32 %196 to float, !dbg !79
  %198 = fcmp olt float %194, %197, !dbg !74
  %199 = fcmp uno float %194, 0.000000e+00, !dbg !80
  %200 = or i1 %198, %199, !dbg !77
  %201 = select i1 %200, float %194, float %197, !dbg !78
  %202 = bitcast float %201 to i32, !dbg !79
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !79
  %204 = bitcast i32 %203 to float, !dbg !79
  %205 = fcmp olt float %201, %204, !dbg !74
  %206 = fcmp uno float %201, 0.000000e+00, !dbg !80
  %207 = or i1 %205, %206, !dbg !77
  %208 = select i1 %207, float %201, float %204, !dbg !78
  %209 = bitcast float %208 to i32, !dbg !79
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !79
  %211 = bitcast i32 %210 to float, !dbg !79
  %212 = fcmp olt float %208, %211, !dbg !74
  %213 = fcmp uno float %208, 0.000000e+00, !dbg !80
  %214 = or i1 %212, %213, !dbg !77
  %215 = select i1 %214, float %208, float %211, !dbg !78
  %216 = bitcast float %215 to i32, !dbg !79
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !79
  %218 = bitcast i32 %217 to float, !dbg !79
  %219 = fcmp olt float %215, %218, !dbg !74
  %220 = fcmp uno float %215, 0.000000e+00, !dbg !80
  %221 = or i1 %219, %220, !dbg !77
  %222 = and i32 %179, 31, !dbg !79
  %223 = icmp eq i32 %16, 0, !dbg !79
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !79
  %225 = select i1 %221, i32 %216, i32 %217, !dbg !78
  %226 = insertelement <1 x i32> poison, i32 %225, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %226, i1 %223) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %227 = icmp slt i32 %15, 32, !dbg !79
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !79
  %229 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %228, i1 %227) #5, !dbg !79
  %230 = bitcast i32 %229 to float, !dbg !79
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !79
  %232 = bitcast i32 %231 to float, !dbg !79
  %233 = fcmp olt float %230, %232, !dbg !74
  %234 = fcmp uno float %230, 0.000000e+00, !dbg !80
  %235 = or i1 %234, %233, !dbg !77
  %236 = select i1 %235, float %230, float %232, !dbg !78
  %237 = bitcast float %236 to i32, !dbg !79
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !79
  %239 = bitcast i32 %238 to float, !dbg !79
  %240 = fcmp olt float %236, %239, !dbg !74
  %241 = fcmp uno float %236, 0.000000e+00, !dbg !80
  %242 = or i1 %240, %241, !dbg !77
  %243 = select i1 %242, float %236, float %239, !dbg !78
  %244 = bitcast float %243 to i32, !dbg !79
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !79
  %246 = bitcast i32 %245 to float, !dbg !79
  %247 = fcmp olt float %243, %246, !dbg !74
  %248 = fcmp uno float %243, 0.000000e+00, !dbg !80
  %249 = or i1 %247, %248, !dbg !77
  %250 = select i1 %249, float %243, float %246, !dbg !78
  %251 = bitcast float %250 to i32, !dbg !79
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 2, i32 31), !dbg !79
  %253 = bitcast i32 %252 to float, !dbg !79
  %254 = fcmp olt float %250, %253, !dbg !74
  %255 = fcmp uno float %250, 0.000000e+00, !dbg !80
  %256 = or i1 %254, %255, !dbg !77
  %257 = select i1 %256, float %250, float %253, !dbg !78
  %258 = bitcast float %257 to i32, !dbg !79
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !79
  %260 = bitcast i32 %259 to float, !dbg !79
  %261 = fcmp olt float %257, %260, !dbg !74
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !80
  %263 = or i1 %261, %262, !dbg !77
  %264 = and i1 %227, %223, !dbg !79
  %265 = select i1 %263, i32 %258, i32 %259, !dbg !78
  %266 = insertelement <1 x i32> poison, i32 %265, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %266, i1 %264) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %267 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %268 = fcmp ogt float %172, %173, !dbg !83
  %269 = fcmp uno float %172, 0.000000e+00, !dbg !84
  %270 = or i1 %268, %269, !dbg !85
  %271 = select i1 %270, float %172, float %173, !dbg !86
  %272 = bitcast float %271 to i32, !dbg !81
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !81
  %274 = bitcast i32 %273 to float, !dbg !81
  %275 = fcmp ogt float %271, %274, !dbg !83
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !84
  %277 = or i1 %276, %275, !dbg !85
  %278 = select i1 %277, float %271, float %274, !dbg !86
  %279 = bitcast float %278 to i32, !dbg !81
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 8, i32 31), !dbg !81
  %281 = bitcast i32 %280 to float, !dbg !81
  %282 = fcmp ogt float %278, %281, !dbg !83
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !84
  %284 = or i1 %282, %283, !dbg !85
  %285 = select i1 %284, float %278, float %281, !dbg !86
  %286 = bitcast float %285 to i32, !dbg !81
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !81
  %288 = bitcast i32 %287 to float, !dbg !81
  %289 = fcmp ogt float %285, %288, !dbg !83
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !84
  %291 = or i1 %289, %290, !dbg !85
  %292 = select i1 %291, float %285, float %288, !dbg !86
  %293 = bitcast float %292 to i32, !dbg !81
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 2, i32 31), !dbg !81
  %295 = bitcast i32 %294 to float, !dbg !81
  %296 = fcmp ogt float %292, %295, !dbg !83
  %297 = fcmp uno float %292, 0.000000e+00, !dbg !84
  %298 = or i1 %296, %297, !dbg !85
  %299 = select i1 %298, float %292, float %295, !dbg !86
  %300 = bitcast float %299 to i32, !dbg !81
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !81
  %302 = bitcast i32 %301 to float, !dbg !81
  %303 = fcmp ogt float %299, %302, !dbg !83
  %304 = fcmp uno float %299, 0.000000e+00, !dbg !84
  %305 = or i1 %303, %304, !dbg !85
  %306 = select i1 %305, i32 %300, i32 %301, !dbg !86
  %307 = insertelement <1 x i32> poison, i32 %306, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %307, i1 %223) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %308 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %228, i1 %227) #5, !dbg !81
  %309 = bitcast i32 %308 to float, !dbg !81
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 16, i32 31), !dbg !81
  %311 = bitcast i32 %310 to float, !dbg !81
  %312 = fcmp ogt float %309, %311, !dbg !83
  %313 = fcmp uno float %309, 0.000000e+00, !dbg !84
  %314 = or i1 %313, %312, !dbg !85
  %315 = select i1 %314, float %309, float %311, !dbg !86
  %316 = bitcast float %315 to i32, !dbg !81
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !81
  %318 = bitcast i32 %317 to float, !dbg !81
  %319 = fcmp ogt float %315, %318, !dbg !83
  %320 = fcmp uno float %315, 0.000000e+00, !dbg !84
  %321 = or i1 %319, %320, !dbg !85
  %322 = select i1 %321, float %315, float %318, !dbg !86
  %323 = bitcast float %322 to i32, !dbg !81
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !81
  %325 = bitcast i32 %324 to float, !dbg !81
  %326 = fcmp ogt float %322, %325, !dbg !83
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !84
  %328 = or i1 %326, %327, !dbg !85
  %329 = select i1 %328, float %322, float %325, !dbg !86
  %330 = bitcast float %329 to i32, !dbg !81
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !81
  %332 = bitcast i32 %331 to float, !dbg !81
  %333 = fcmp ogt float %329, %332, !dbg !83
  %334 = fcmp uno float %329, 0.000000e+00, !dbg !84
  %335 = or i1 %333, %334, !dbg !85
  %336 = select i1 %335, float %329, float %332, !dbg !86
  %337 = bitcast float %336 to i32, !dbg !81
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !81
  %339 = bitcast i32 %338 to float, !dbg !81
  %340 = fcmp ogt float %336, %339, !dbg !83
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !84
  %342 = or i1 %340, %341, !dbg !85
  %343 = select i1 %342, i32 %337, i32 %338, !dbg !86
  %344 = insertelement <1 x i32> poison, i32 %343, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %344, i1 %264) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %345 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %346 = getelementptr bfloat, ptr addrspace(1) %6, i64 %19, !dbg !87
  %347 = fptrunc float %267 to bfloat, !dbg !88
  %348 = and i32 %15, 1023, !dbg !88
  %349 = icmp eq i32 %348, 0, !dbg !88
  %350 = bitcast bfloat %347 to i16, !dbg !88
  %351 = and i1 %14, %349, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %350, ptr addrspace(1) %346, i1 %351) #5, !dbg !88
  %352 = getelementptr bfloat, ptr addrspace(1) %7, i64 %19, !dbg !89
  %353 = fptrunc float %345 to bfloat, !dbg !90
  %354 = bitcast bfloat %353 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %354, ptr addrspace(1) %352, i1 %351) #5, !dbg !90
  %.inv3 = fcmp oge float %267, 0.000000e+00, !dbg !91
  %355 = select i1 %.inv3, float 0.000000e+00, float %267, !dbg !91
  %356 = fsub float 0.000000e+00, %355, !dbg !93
  %.inv4 = fcmp ole float %345, 0.000000e+00, !dbg !94
  %357 = select i1 %.inv4, float 0.000000e+00, float %345, !dbg !94
  %358 = fcmp ogt float %356, %357, !dbg !96
  %359 = fcmp uno float %356, 0.000000e+00, !dbg !98
  %360 = or i1 %359, %358, !dbg !99
  %361 = select i1 %360, float %356, float %357, !dbg !100
  %362 = fmul float %361, 0x3F80204080000000, !dbg !101
  %363 = fcmp ogt float %362, 0x3EE4F8B580000000, !dbg !102
  %364 = fcmp uno float %362, 0.000000e+00, !dbg !104
  %365 = or i1 %363, %364, !dbg !105
  %366 = select i1 %365, float %362, float 0x3EE4F8B580000000, !dbg !106
  %367 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %366), !dbg !107
  %368 = or disjoint i32 %18, %28
  br label %369, !dbg !108

369:                                              ; preds = %178, %__nv_tanhf.exit23
  %indvars.iv66 = phi i64 [ 0, %178 ], [ %indvars.iv.next67, %__nv_tanhf.exit23 ]
  %370 = trunc nuw nsw i64 %indvars.iv66 to i32, !dbg !109
  %371 = add i32 %368, %370, !dbg !109
  %372 = sext i32 %371 to i64, !dbg !110
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !110
  %374 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %373, i1 %14) #5, !dbg !111
  %375 = extractvalue { i32, i32 } %374, 0, !dbg !111
  %376 = extractvalue { i32, i32 } %374, 1, !dbg !111
  %377 = bitcast i32 %375 to float, !dbg !111
  %378 = bitcast i32 %376 to float, !dbg !111
  %379 = fmul float %377, 5.000000e-01, !dbg !112
  %380 = fmul float %378, 5.000000e-01, !dbg !112
  %381 = fmul float %377, %377, !dbg !113
  %382 = fmul float %378, %378, !dbg !113
  %383 = fmul float %381, %377, !dbg !114
  %384 = fmul float %382, %378, !dbg !114
  %385 = fmul float %383, 0x3FA6E4E260000000, !dbg !115
  %386 = fmul float %384, 0x3FA6E4E260000000, !dbg !115
  %387 = fadd float %385, %377, !dbg !116
  %388 = fadd float %386, %378, !dbg !116
  %389 = fmul float %387, 0x3FE9884540000000, !dbg !117
  %390 = fmul float %388, 0x3FE9884540000000, !dbg !117
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i = icmp eq i32 %391, 0, !dbg !118
  %392 = tail call float @llvm.nvvm.fabs.ftz.f(float %389) #5, !dbg !118
  %393 = tail call float @llvm.nvvm.fabs.f(float %389) #5, !dbg !118
  %.01.i = select i1 %.not.i, float %393, float %392, !dbg !118
  %394 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !118
  br i1 %394, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !118

__internal_fmad.exit1.i:                          ; preds = %369
  %395 = fmul float %.01.i, 0x4007154760000000, !dbg !118
  %396 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %395) #5, !dbg !118
  %397 = fadd float %396, 1.000000e+00, !dbg !118
  %398 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %397) #6, !dbg !118, !srcloc !58
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i = icmp eq i32 %399, 0, !dbg !118
  %400 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %398, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %401 = tail call float @llvm.nvvm.fma.rn.f(float %398, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i = select i1 %.not6.i, float %401, float %400, !dbg !118
  %402 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !118
  %s.0.i = select i1 %402, float 1.000000e+00, float %.03.i, !dbg !118
  %403 = bitcast float %s.0.i to i32, !dbg !118
  %404 = bitcast float %389 to i32, !dbg !118
  %405 = and i32 %404, -2147483648, !dbg !118
  %406 = or i32 %405, %403, !dbg !118
  %407 = bitcast i32 %406 to float, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__internal_fmad.exit3.i:                          ; preds = %369
  %408 = fmul float %389, %389, !dbg !118
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i = icmp eq i32 %409, 0, !dbg !118
  %410 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %408, float 0xBFAAC795C0000000) #5, !dbg !118
  %411 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %408, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i = select i1 %.not1.i, float %411, float %410, !dbg !118
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i = icmp eq i32 %412, 0, !dbg !118
  %413 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %408, float 0x3FC10B2820000000) #5, !dbg !118
  %414 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %408, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i = select i1 %.not2.i, float %414, float %413, !dbg !118
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i = icmp eq i32 %415, 0, !dbg !118
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %408, float 0xBFD5553DA0000000) #5, !dbg !118
  %417 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %408, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i = select i1 %.not3.i, float %417, float %416, !dbg !118
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i = icmp eq i32 %418, 0, !dbg !118
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %408, float 0.000000e+00) #5, !dbg !118
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %408, float 0.000000e+00) #5, !dbg !118
  %.04.i = select i1 %.not4.i, float %420, float %419, !dbg !118
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i = icmp eq i32 %421, 0, !dbg !118
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %389, float %389) #5, !dbg !118
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %389, float %389) #5, !dbg !118
  %.02.i = select i1 %.not5.i, float %423, float %422, !dbg !118
  br label %__nv_tanhf.exit, !dbg !118

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %407, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !118
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not.i5 = icmp eq i32 %424, 0, !dbg !118
  %425 = tail call float @llvm.nvvm.fabs.ftz.f(float %390) #5, !dbg !118
  %426 = tail call float @llvm.nvvm.fabs.f(float %390) #5, !dbg !118
  %.01.i6 = select i1 %.not.i5, float %426, float %425, !dbg !118
  %427 = fcmp ult float %.01.i6, 0x3FE3333340000000, !dbg !118
  br i1 %427, label %__internal_fmad.exit3.i12, label %__internal_fmad.exit1.i7, !dbg !118

__internal_fmad.exit1.i7:                         ; preds = %__nv_tanhf.exit
  %428 = fmul float %.01.i6, 0x4007154760000000, !dbg !118
  %429 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %428) #5, !dbg !118
  %430 = fadd float %429, 1.000000e+00, !dbg !118
  %431 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %430) #6, !dbg !118, !srcloc !58
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not6.i8 = icmp eq i32 %432, 0, !dbg !118
  %433 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %431, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %434 = tail call float @llvm.nvvm.fma.rn.f(float %431, float -2.000000e+00, float 1.000000e+00) #5, !dbg !118
  %.03.i9 = select i1 %.not6.i8, float %434, float %433, !dbg !118
  %435 = fcmp oge float %.01.i6, 0x4022059680000000, !dbg !118
  %s.0.i10 = select i1 %435, float 1.000000e+00, float %.03.i9, !dbg !118
  %436 = bitcast float %s.0.i10 to i32, !dbg !118
  %437 = bitcast float %390 to i32, !dbg !118
  %438 = and i32 %437, -2147483648, !dbg !118
  %439 = or i32 %438, %436, !dbg !118
  %440 = bitcast i32 %439 to float, !dbg !118
  br label %__nv_tanhf.exit23, !dbg !118

__internal_fmad.exit3.i12:                        ; preds = %__nv_tanhf.exit
  %441 = fmul float %390, %390, !dbg !118
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not1.i13 = icmp eq i32 %442, 0, !dbg !118
  %443 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %441, float 0xBFAAC795C0000000) #5, !dbg !118
  %444 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %441, float 0xBFAAC795C0000000) #5, !dbg !118
  %.06.i14 = select i1 %.not1.i13, float %444, float %443, !dbg !118
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not2.i15 = icmp eq i32 %445, 0, !dbg !118
  %446 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i14, float %441, float 0x3FC10B2820000000) #5, !dbg !118
  %447 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i14, float %441, float 0x3FC10B2820000000) #5, !dbg !118
  %.05.i16 = select i1 %.not2.i15, float %447, float %446, !dbg !118
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not3.i17 = icmp eq i32 %448, 0, !dbg !118
  %449 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %441, float 0xBFD5553DA0000000) #5, !dbg !118
  %450 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %441, float 0xBFD5553DA0000000) #5, !dbg !118
  %.0.i18 = select i1 %.not3.i17, float %450, float %449, !dbg !118
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not4.i19 = icmp eq i32 %451, 0, !dbg !118
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %441, float 0.000000e+00) #5, !dbg !118
  %453 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %441, float 0.000000e+00) #5, !dbg !118
  %.04.i20 = select i1 %.not4.i19, float %453, float %452, !dbg !118
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !118
  %.not5.i21 = icmp eq i32 %454, 0, !dbg !118
  %455 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i20, float %390, float %390) #5, !dbg !118
  %456 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i20, float %390, float %390) #5, !dbg !118
  %.02.i22 = select i1 %.not5.i21, float %456, float %455, !dbg !118
  br label %__nv_tanhf.exit23, !dbg !118

__nv_tanhf.exit23:                                ; preds = %__internal_fmad.exit1.i7, %__internal_fmad.exit3.i12
  %s.1.i11 = phi float [ %440, %__internal_fmad.exit1.i7 ], [ %.02.i22, %__internal_fmad.exit3.i12 ], !dbg !118
  %457 = fadd float %s.1.i, 1.000000e+00, !dbg !119
  %458 = fadd float %s.1.i11, 1.000000e+00, !dbg !119
  %459 = fmul float %379, %457, !dbg !120
  %460 = fmul float %380, %458, !dbg !120
  %461 = fmul float %367, %459, !dbg !121
  %462 = fmul float %367, %460, !dbg !121
  %463 = tail call float @llvm.nvvm.round.f(float %461) #5, !dbg !122
  %464 = tail call float @llvm.nvvm.round.f(float %462) #5, !dbg !122
  %465 = insertelement <2 x float> poison, float %463, i64 0, !dbg !123
  %466 = insertelement <2 x float> %465, float %464, i64 1, !dbg !123
  %467 = fcmp ogt <2 x float> %466, splat (float -1.270000e+02), !dbg !123
  %468 = fcmp uno <2 x float> %466, zeroinitializer, !dbg !125
  %469 = or <2 x i1> %467, %468, !dbg !126
  %470 = select <2 x i1> %469, <2 x float> %466, <2 x float> splat (float -1.270000e+02), !dbg !127
  %471 = fcmp olt <2 x float> %470, splat (float 1.270000e+02), !dbg !128
  %472 = fcmp uno <2 x float> %470, zeroinitializer, !dbg !130
  %473 = or <2 x i1> %471, %472, !dbg !131
  %474 = fptosi <2 x float> %470 to <2 x i8>, !dbg !132
  %475 = select <2 x i1> %473, <2 x i8> %474, <2 x i8> splat (i8 127), !dbg !133
  %476 = getelementptr i8, ptr addrspace(1) %8, i64 %372, !dbg !134
  %477 = bitcast <2 x i8> %475 to i16, !dbg !135
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %477, ptr addrspace(1) %476, i1 %14) #5, !dbg !135
  %indvars.iv.next67 = add nuw nsw i64 %indvars.iv66, 2048, !dbg !108
  %478 = icmp samesign ult i64 %indvars.iv66, 10240, !dbg !108
  br i1 %478, label %369, label %479, !dbg !108

479:                                              ; preds = %__nv_tanhf.exit23
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 30, scope: !6)
!15 = !DILocation(line: 30, column: 35, scope: !6)
!16 = !DILocation(line: 39, column: 47, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 44, column: 44, scope: !6)
!21 = !DILocation(line: 45, column: 16, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 46, column: 44, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 47, column: 44, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 52, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 33, column: 40, scope: !6)
!36 = !DILocation(line: 74, column: 50, scope: !6)
!37 = !DILocation(line: 54, column: 23, scope: !6)
!38 = !DILocation(line: 34, column: 31, scope: !6)
!39 = !DILocation(line: 39, column: 41, scope: !6)
!40 = !DILocation(line: 39, column: 34, scope: !6)
!41 = !DILocation(line: 39, column: 52, scope: !6)
!42 = !DILocation(line: 40, column: 35, scope: !6)
!43 = !DILocation(line: 40, column: 42, scope: !6)
!44 = !DILocation(line: 41, column: 35, scope: !6)
!45 = !DILocation(line: 41, column: 42, scope: !6)
!46 = !DILocation(line: 40, column: 95, scope: !6)
!47 = !DILocation(line: 41, column: 95, scope: !6)
!48 = !DILocation(line: 42, column: 23, scope: !6)
!49 = !DILocation(line: 55, column: 24, scope: !6)
!50 = !DILocation(line: 56, column: 24, scope: !6)
!51 = !DILocation(line: 59, column: 24, scope: !6)
!52 = !DILocation(line: 64, column: 24, scope: !6)
!53 = !DILocation(line: 60, column: 24, scope: !6)
!54 = !DILocation(line: 61, column: 24, scope: !6)
!55 = !DILocation(line: 63, column: 24, scope: !6)
!56 = !DILocation(line: 66, column: 24, scope: !6)
!57 = !DILocation(line: 67, column: 31, scope: !6)
!58 = !{i32 21046}
!59 = !DILocation(line: 69, column: 24, scope: !6)
!60 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !61)
!61 = !DILocation(line: 73, column: 47, scope: !6)
!62 = !DILocation(line: 70, column: 24, scope: !6)
!63 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !61)
!64 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !61)
!65 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !61)
!66 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !67)
!67 = !DILocation(line: 75, column: 47, scope: !6)
!68 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !67)
!69 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !67)
!70 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !67)
!71 = !DILocation(line: 76, column: 50, scope: !6)
!72 = !DILocation(line: 77, column: 29, scope: !6)
!73 = !DILocation(line: 77, column: 54, scope: !6)
!74 = !DILocation(line: 94, column: 15, scope: !75, inlinedAt: !76)
!75 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!76 = !DILocation(line: 78, column: 40, scope: !6)
!77 = !DILocation(line: 96, column: 16, scope: !75, inlinedAt: !76)
!78 = !DILocation(line: 97, column: 29, scope: !75, inlinedAt: !76)
!79 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !76)
!80 = !DILocation(line: 96, column: 21, scope: !75, inlinedAt: !76)
!81 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !82)
!82 = !DILocation(line: 79, column: 40, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 21, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 104, column: 16, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 105, column: 29, scope: !75, inlinedAt: !82)
!87 = !DILocation(line: 80, column: 25, scope: !6)
!88 = !DILocation(line: 80, column: 37, scope: !6)
!89 = !DILocation(line: 81, column: 25, scope: !6)
!90 = !DILocation(line: 81, column: 37, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !92)
!92 = !DILocation(line: 104, column: 46, scope: !6)
!93 = !DILocation(line: 105, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !95)
!95 = !DILocation(line: 106, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !97)
!97 = !DILocation(line: 107, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !97)
!101 = !DILocation(line: 109, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !103)
!103 = !DILocation(line: 112, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !103)
!107 = !DILocation(line: 115, column: 25, scope: !6)
!108 = !DILocation(line: 82, column: 40, scope: !6)
!109 = !DILocation(line: 88, column: 43, scope: !6)
!110 = !DILocation(line: 88, column: 36, scope: !6)
!111 = !DILocation(line: 88, column: 54, scope: !6)
!112 = !DILocation(line: 90, column: 24, scope: !6)
!113 = !DILocation(line: 91, column: 24, scope: !6)
!114 = !DILocation(line: 92, column: 24, scope: !6)
!115 = !DILocation(line: 94, column: 24, scope: !6)
!116 = !DILocation(line: 95, column: 24, scope: !6)
!117 = !DILocation(line: 97, column: 24, scope: !6)
!118 = !DILocation(line: 98, column: 31, scope: !6)
!119 = !DILocation(line: 100, column: 24, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 117, column: 24, scope: !6)
!122 = !DILocation(line: 118, column: 36, scope: !6)
!123 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !124)
!124 = !DILocation(line: 121, column: 46, scope: !6)
!125 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !124)
!126 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !124)
!127 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !124)
!128 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !129)
!129 = !DILocation(line: 123, column: 46, scope: !6)
!130 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !129)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !129)
!132 = !DILocation(line: 125, column: 25, scope: !6)
!133 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !129)
!134 = !DILocation(line: 126, column: 29, scope: !6)
!135 = !DILocation(line: 126, column: 54, scope: !6)
!136 = !DILocation(line: 82, column: 4, scope: !6)
