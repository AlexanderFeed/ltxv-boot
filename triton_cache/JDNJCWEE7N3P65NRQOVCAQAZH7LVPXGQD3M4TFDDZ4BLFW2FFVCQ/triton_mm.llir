; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 48, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 48, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = or disjoint i32 %20, 32, !dbg !19
  %23 = or disjoint i32 %20, 48, !dbg !19
  %24 = or disjoint i32 %14, %20, !dbg !20
  %25 = or disjoint i32 %14, %21, !dbg !20
  %26 = or disjoint i32 %14, %22, !dbg !20
  %27 = or disjoint i32 %14, %23, !dbg !20
  %28 = shl nsw i32 %13, 7, !dbg !21
  %29 = shl i32 %15, 3, !dbg !22
  %30 = and i32 %29, 8, !dbg !22
  %31 = and i32 %29, 16, !dbg !22
  %32 = and i32 %29, 24, !dbg !22
  %33 = and i32 %29, 32, !dbg !22
  %34 = and i32 %29, 56, !dbg !22
  %35 = or disjoint i32 %28, %20, !dbg !23
  %36 = or disjoint i32 %28, %21, !dbg !23
  %37 = or disjoint i32 %28, %22, !dbg !23
  %38 = or disjoint i32 %28, %23, !dbg !23
  %39 = or disjoint i32 %35, 64, !dbg !23
  %40 = or disjoint i32 %35, 80, !dbg !23
  %41 = or disjoint i32 %35, 96, !dbg !23
  %42 = or disjoint i32 %35, 112, !dbg !23
  %43 = srem i32 %24, 77, !dbg !24
  %44 = srem i32 %25, 77, !dbg !24
  %45 = srem i32 %26, 77, !dbg !24
  %46 = srem i32 %27, 77, !dbg !24
  %47 = srem i32 %35, 768, !dbg !25
  %48 = srem i32 %36, 768, !dbg !25
  %49 = srem i32 %37, 768, !dbg !25
  %50 = srem i32 %38, 768, !dbg !25
  %51 = srem i32 %39, 768, !dbg !25
  %52 = srem i32 %40, 768, !dbg !25
  %53 = srem i32 %41, 768, !dbg !25
  %54 = srem i32 %42, 768, !dbg !25
  %55 = mul nsw i32 %43, 768, !dbg !26
  %56 = mul nsw i32 %44, 768, !dbg !26
  %57 = mul nsw i32 %45, 768, !dbg !26
  %58 = mul nsw i32 %46, 768, !dbg !26
  %59 = mul nsw i32 %47, 768, !dbg !27
  %60 = mul nsw i32 %48, 768, !dbg !27
  %61 = mul nsw i32 %49, 768, !dbg !27
  %62 = mul nsw i32 %50, 768, !dbg !27
  %63 = mul nsw i32 %51, 768, !dbg !27
  %64 = mul nsw i32 %52, 768, !dbg !27
  %65 = mul nsw i32 %53, 768, !dbg !27
  %66 = mul nsw i32 %54, 768, !dbg !27
  %67 = or disjoint i32 %55, %34, !dbg !28
  %68 = or disjoint i32 %56, %34, !dbg !28
  %69 = or disjoint i32 %57, %34, !dbg !28
  %70 = or disjoint i32 %58, %34, !dbg !28
  %71 = sext i32 %67 to i64, !dbg !29
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %68 to i64, !dbg !29
  %74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %69 to i64, !dbg !29
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %70 to i64, !dbg !29
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !29
  %and.ra = and i32 %15, 24, !dbg !30
  %79 = xor i32 %34, %and.ra, !dbg !30
  %80 = xor i32 %79, %18, !dbg !30
  %81 = shl nuw nsw i32 %20, 6, !dbg !30
  %82 = or disjoint i32 %80, %81, !dbg !30
  %83 = zext nneg i32 %82 to i64, !dbg !30
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %83, !dbg !30
  %85 = or disjoint i32 %82, 1024, !dbg !30
  %86 = zext nneg i32 %85 to i64, !dbg !30
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %86, !dbg !30
  %88 = or disjoint i32 %82, 2048, !dbg !30
  %89 = zext nneg i32 %88 to i64, !dbg !30
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %89, !dbg !30
  %91 = or disjoint i32 %82, 3072, !dbg !30
  %92 = zext nneg i32 %91 to i64, !dbg !30
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %92, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %84, ptr addrspace(1) %72, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %74, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %90, ptr addrspace(1) %76, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %78, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %94 = or disjoint i32 %59, %34, !dbg !31
  %95 = or disjoint i32 %60, %34, !dbg !31
  %96 = or disjoint i32 %61, %34, !dbg !31
  %97 = or disjoint i32 %62, %34, !dbg !31
  %98 = or disjoint i32 %63, %34, !dbg !31
  %99 = or disjoint i32 %64, %34, !dbg !31
  %100 = or disjoint i32 %65, %34, !dbg !31
  %101 = or disjoint i32 %66, %34, !dbg !31
  %102 = sext i32 %94 to i64, !dbg !32
  %103 = getelementptr bfloat, ptr addrspace(1) %1, i64 %102, !dbg !32
  %104 = sext i32 %95 to i64, !dbg !32
  %105 = getelementptr bfloat, ptr addrspace(1) %1, i64 %104, !dbg !32
  %106 = sext i32 %96 to i64, !dbg !32
  %107 = getelementptr bfloat, ptr addrspace(1) %1, i64 %106, !dbg !32
  %108 = sext i32 %97 to i64, !dbg !32
  %109 = getelementptr bfloat, ptr addrspace(1) %1, i64 %108, !dbg !32
  %110 = sext i32 %98 to i64, !dbg !32
  %111 = getelementptr bfloat, ptr addrspace(1) %1, i64 %110, !dbg !32
  %112 = sext i32 %99 to i64, !dbg !32
  %113 = getelementptr bfloat, ptr addrspace(1) %1, i64 %112, !dbg !32
  %114 = sext i32 %100 to i64, !dbg !32
  %115 = getelementptr bfloat, ptr addrspace(1) %1, i64 %114, !dbg !32
  %116 = sext i32 %101 to i64, !dbg !32
  %117 = getelementptr bfloat, ptr addrspace(1) %1, i64 %116, !dbg !32
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %83, !dbg !33
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %86, !dbg !33
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %89, !dbg !33
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %92, !dbg !33
  %122 = or disjoint i32 %82, 4096, !dbg !33
  %123 = zext nneg i32 %122 to i64, !dbg !33
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %123, !dbg !33
  %125 = or disjoint i32 %82, 5120, !dbg !33
  %126 = zext nneg i32 %125 to i64, !dbg !33
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %126, !dbg !33
  %128 = or disjoint i32 %82, 6144, !dbg !33
  %129 = zext nneg i32 %128 to i64, !dbg !33
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %129, !dbg !33
  %131 = or disjoint i32 %82, 7168, !dbg !33
  %132 = zext nneg i32 %131 to i64, !dbg !33
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %132, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %118, ptr addrspace(1) %103, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %105, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %120, ptr addrspace(1) %107, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %109, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %111, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %113, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %130, ptr addrspace(1) %115, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %133, ptr addrspace(1) %117, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %134 = or disjoint i32 %34, 64, !dbg !34
  %135 = or disjoint i32 %55, %134, !dbg !28
  %136 = or disjoint i32 %56, %134, !dbg !28
  %137 = or disjoint i32 %57, %134, !dbg !28
  %138 = or disjoint i32 %58, %134, !dbg !28
  %139 = sext i32 %135 to i64, !dbg !29
  %140 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !29
  %141 = sext i32 %136 to i64, !dbg !29
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !29
  %143 = sext i32 %137 to i64, !dbg !29
  %144 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !29
  %145 = sext i32 %138 to i64, !dbg !29
  %146 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %83, !dbg !30
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %86, !dbg !30
  %149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %89, !dbg !30
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %92, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %147, ptr addrspace(1) %140, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %142, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %144, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %146, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %151 = or disjoint i32 %59, %134, !dbg !31
  %152 = or disjoint i32 %60, %134, !dbg !31
  %153 = or disjoint i32 %61, %134, !dbg !31
  %154 = or disjoint i32 %62, %134, !dbg !31
  %155 = or disjoint i32 %63, %134, !dbg !31
  %156 = or disjoint i32 %64, %134, !dbg !31
  %157 = or disjoint i32 %65, %134, !dbg !31
  %158 = or disjoint i32 %66, %134, !dbg !31
  %159 = sext i32 %151 to i64, !dbg !32
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !32
  %161 = sext i32 %152 to i64, !dbg !32
  %162 = getelementptr bfloat, ptr addrspace(1) %1, i64 %161, !dbg !32
  %163 = sext i32 %153 to i64, !dbg !32
  %164 = getelementptr bfloat, ptr addrspace(1) %1, i64 %163, !dbg !32
  %165 = sext i32 %154 to i64, !dbg !32
  %166 = getelementptr bfloat, ptr addrspace(1) %1, i64 %165, !dbg !32
  %167 = sext i32 %155 to i64, !dbg !32
  %168 = getelementptr bfloat, ptr addrspace(1) %1, i64 %167, !dbg !32
  %169 = sext i32 %156 to i64, !dbg !32
  %170 = getelementptr bfloat, ptr addrspace(1) %1, i64 %169, !dbg !32
  %171 = sext i32 %157 to i64, !dbg !32
  %172 = getelementptr bfloat, ptr addrspace(1) %1, i64 %171, !dbg !32
  %173 = sext i32 %158 to i64, !dbg !32
  %174 = getelementptr bfloat, ptr addrspace(1) %1, i64 %173, !dbg !32
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %83, !dbg !33
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %86, !dbg !33
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %89, !dbg !33
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %92, !dbg !33
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %123, !dbg !33
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %126, !dbg !33
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %129, !dbg !33
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %132, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %160, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %162, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %164, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %166, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %168, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %170, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %172, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %174, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op163 = or disjoint i32 %79, 4096, !dbg !35
  %invariant.op165 = or disjoint i32 %79, 6144, !dbg !35
  %invariant.op167 = or disjoint i32 %34, 128, !dbg !35
  %183 = and i32 %15, 7
  %184 = lshr exact i32 %17, 1
  %185 = xor i32 %34, %184
  %186 = shl i32 %15, 6
  %187 = and i32 %186, 960
  %188 = or disjoint i32 %185, %187
  %189 = zext nneg i32 %188 to i64
  %190 = or disjoint i32 %30, 16
  %191 = xor i32 %190, %31
  %192 = or disjoint i32 %191, %33
  %193 = xor i32 %192, %184
  %194 = or disjoint i32 %193, %187
  %195 = zext nneg i32 %194 to i64
  %196 = or disjoint i32 %32, 32
  %197 = xor i32 %196, %33
  %198 = xor i32 %197, %184
  %199 = or disjoint i32 %198, %187
  %200 = zext nneg i32 %199 to i64
  %201 = or disjoint i32 %30, 48
  %and.ra161 = and i32 %29, 48
  %202 = or disjoint i32 %184, %and.ra161
  %203 = xor i32 %202, %201
  %204 = or disjoint i32 %203, %187
  %205 = zext nneg i32 %204 to i64
  %206 = or disjoint i32 %187, 1024
  %207 = or disjoint i32 %185, %206
  %208 = zext nneg i32 %207 to i64
  %209 = or disjoint i32 %193, %206
  %210 = zext nneg i32 %209 to i64
  %211 = or disjoint i32 %198, %206
  %212 = zext nneg i32 %211 to i64
  %213 = or disjoint i32 %203, %206
  %214 = zext nneg i32 %213 to i64
  %215 = or disjoint i32 %183, 32
  %.reass = or disjoint i32 %183, %invariant.op
  %216 = shl nuw nsw i32 %.reass, 6
  %217 = or disjoint i32 %216, %185
  %218 = zext nneg i32 %217 to i64
  %219 = or disjoint i32 %193, %216
  %220 = zext nneg i32 %219 to i64
  %221 = or disjoint i32 %198, %216
  %222 = zext nneg i32 %221 to i64
  %223 = or disjoint i32 %203, %216
  %224 = zext nneg i32 %223 to i64
  %225 = or disjoint i32 %187, 3072
  %226 = or disjoint i32 %185, %225
  %227 = zext nneg i32 %226 to i64
  %228 = or disjoint i32 %193, %225
  %229 = zext nneg i32 %228 to i64
  %230 = or disjoint i32 %198, %225
  %231 = zext nneg i32 %230 to i64
  %232 = or disjoint i32 %203, %225
  %233 = zext nneg i32 %232 to i64
  %234 = lshr exact i32 %18, 2
  %235 = lshr i32 %15, 2
  %236 = and i32 %235, 16
  %237 = or disjoint i32 %236, %234
  %238 = or disjoint i32 %237, %183
  %239 = shl nuw nsw i32 %238, 6
  %240 = or disjoint i32 %239, %79
  %241 = zext nneg i32 %240 to i64
  %242 = xor i32 %197, %and.ra
  %243 = or disjoint i32 %242, %239
  %244 = zext nneg i32 %243 to i64
  %245 = or disjoint i32 %234, %215
  %246 = or disjoint i32 %245, %236
  %247 = shl nuw nsw i32 %246, 6
  %248 = or disjoint i32 %247, %79
  %249 = zext nneg i32 %248 to i64
  %250 = or disjoint i32 %242, %247
  %251 = zext nneg i32 %250 to i64
  %.reass164 = or disjoint i32 %239, %invariant.op163
  %252 = zext nneg i32 %.reass164 to i64
  %253 = or i32 %243, 4096
  %254 = zext nneg i32 %253 to i64
  %.reass166 = or disjoint i32 %239, %invariant.op165
  %255 = zext nneg i32 %.reass166 to i64
  %256 = or i32 %243, 6144
  %257 = zext nneg i32 %256 to i64
  %258 = zext nneg i32 %invariant.op167 to i64, !dbg !35
  %259 = sext i32 %66 to i64, !dbg !35
  %260 = sext i32 %65 to i64, !dbg !35
  %261 = sext i32 %64 to i64, !dbg !35
  %262 = sext i32 %63 to i64, !dbg !35
  %263 = sext i32 %62 to i64, !dbg !35
  %264 = sext i32 %61 to i64, !dbg !35
  %265 = sext i32 %60 to i64, !dbg !35
  %266 = sext i32 %59 to i64, !dbg !35
  %267 = sext i32 %58 to i64, !dbg !35
  %268 = sext i32 %57 to i64, !dbg !35
  %269 = sext i32 %56 to i64, !dbg !35
  %270 = sext i32 %55 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %270, !dbg !35
  %invariant.gep296 = getelementptr bfloat, ptr addrspace(1) %0, i64 %269, !dbg !35
  %invariant.gep298 = getelementptr bfloat, ptr addrspace(1) %0, i64 %268, !dbg !35
  %invariant.gep300 = getelementptr bfloat, ptr addrspace(1) %0, i64 %267, !dbg !35
  %invariant.gep302 = getelementptr bfloat, ptr addrspace(1) %1, i64 %266, !dbg !35
  %invariant.gep304 = getelementptr bfloat, ptr addrspace(1) %1, i64 %265, !dbg !35
  %invariant.gep306 = getelementptr bfloat, ptr addrspace(1) %1, i64 %264, !dbg !35
  %invariant.gep308 = getelementptr bfloat, ptr addrspace(1) %1, i64 %263, !dbg !35
  %invariant.gep310 = getelementptr bfloat, ptr addrspace(1) %1, i64 %262, !dbg !35
  %invariant.gep312 = getelementptr bfloat, ptr addrspace(1) %1, i64 %261, !dbg !35
  %invariant.gep314 = getelementptr bfloat, ptr addrspace(1) %1, i64 %260, !dbg !35
  %invariant.gep316 = getelementptr bfloat, ptr addrspace(1) %1, i64 %259, !dbg !35
  br label %271, !dbg !35

271:                                              ; preds = %4, %271
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %271 ]
  %272 = phi i32 [ -1, %4 ], [ %341, %271 ]
  %273 = phi i32 [ 1, %4 ], [ %862, %271 ]
  %274 = phi float [ 0.000000e+00, %4 ], [ %781, %271 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %782, %271 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %783, %271 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %784, %271 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %786, %271 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %787, %271 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %788, %271 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %789, %271 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %791, %271 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %792, %271 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %793, %271 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %794, %271 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %796, %271 ]
  %287 = phi float [ 0.000000e+00, %4 ], [ %797, %271 ]
  %288 = phi float [ 0.000000e+00, %4 ], [ %798, %271 ]
  %289 = phi float [ 0.000000e+00, %4 ], [ %799, %271 ]
  %290 = phi float [ 0.000000e+00, %4 ], [ %801, %271 ]
  %291 = phi float [ 0.000000e+00, %4 ], [ %802, %271 ]
  %292 = phi float [ 0.000000e+00, %4 ], [ %803, %271 ]
  %293 = phi float [ 0.000000e+00, %4 ], [ %804, %271 ]
  %294 = phi float [ 0.000000e+00, %4 ], [ %806, %271 ]
  %295 = phi float [ 0.000000e+00, %4 ], [ %807, %271 ]
  %296 = phi float [ 0.000000e+00, %4 ], [ %808, %271 ]
  %297 = phi float [ 0.000000e+00, %4 ], [ %809, %271 ]
  %298 = phi float [ 0.000000e+00, %4 ], [ %811, %271 ]
  %299 = phi float [ 0.000000e+00, %4 ], [ %812, %271 ]
  %300 = phi float [ 0.000000e+00, %4 ], [ %813, %271 ]
  %301 = phi float [ 0.000000e+00, %4 ], [ %814, %271 ]
  %302 = phi float [ 0.000000e+00, %4 ], [ %816, %271 ]
  %303 = phi float [ 0.000000e+00, %4 ], [ %817, %271 ]
  %304 = phi float [ 0.000000e+00, %4 ], [ %818, %271 ]
  %305 = phi float [ 0.000000e+00, %4 ], [ %819, %271 ]
  %306 = phi float [ 0.000000e+00, %4 ], [ %821, %271 ]
  %307 = phi float [ 0.000000e+00, %4 ], [ %822, %271 ]
  %308 = phi float [ 0.000000e+00, %4 ], [ %823, %271 ]
  %309 = phi float [ 0.000000e+00, %4 ], [ %824, %271 ]
  %310 = phi float [ 0.000000e+00, %4 ], [ %826, %271 ]
  %311 = phi float [ 0.000000e+00, %4 ], [ %827, %271 ]
  %312 = phi float [ 0.000000e+00, %4 ], [ %828, %271 ]
  %313 = phi float [ 0.000000e+00, %4 ], [ %829, %271 ]
  %314 = phi float [ 0.000000e+00, %4 ], [ %831, %271 ]
  %315 = phi float [ 0.000000e+00, %4 ], [ %832, %271 ]
  %316 = phi float [ 0.000000e+00, %4 ], [ %833, %271 ]
  %317 = phi float [ 0.000000e+00, %4 ], [ %834, %271 ]
  %318 = phi float [ 0.000000e+00, %4 ], [ %836, %271 ]
  %319 = phi float [ 0.000000e+00, %4 ], [ %837, %271 ]
  %320 = phi float [ 0.000000e+00, %4 ], [ %838, %271 ]
  %321 = phi float [ 0.000000e+00, %4 ], [ %839, %271 ]
  %322 = phi float [ 0.000000e+00, %4 ], [ %841, %271 ]
  %323 = phi float [ 0.000000e+00, %4 ], [ %842, %271 ]
  %324 = phi float [ 0.000000e+00, %4 ], [ %843, %271 ]
  %325 = phi float [ 0.000000e+00, %4 ], [ %844, %271 ]
  %326 = phi float [ 0.000000e+00, %4 ], [ %846, %271 ]
  %327 = phi float [ 0.000000e+00, %4 ], [ %847, %271 ]
  %328 = phi float [ 0.000000e+00, %4 ], [ %848, %271 ]
  %329 = phi float [ 0.000000e+00, %4 ], [ %849, %271 ]
  %330 = phi float [ 0.000000e+00, %4 ], [ %851, %271 ]
  %331 = phi float [ 0.000000e+00, %4 ], [ %852, %271 ]
  %332 = phi float [ 0.000000e+00, %4 ], [ %853, %271 ]
  %333 = phi float [ 0.000000e+00, %4 ], [ %854, %271 ]
  %334 = phi float [ 0.000000e+00, %4 ], [ %856, %271 ]
  %335 = phi float [ 0.000000e+00, %4 ], [ %857, %271 ]
  %336 = phi float [ 0.000000e+00, %4 ], [ %858, %271 ]
  %337 = phi float [ 0.000000e+00, %4 ], [ %859, %271 ]
  %338 = icmp samesign ult i64 %indvars.iv, 10, !dbg !35
  %339 = add i32 %272, 1, !dbg !35
  %340 = icmp slt i32 %339, 2, !dbg !35
  %341 = select i1 %340, i32 %339, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %342 = shl i32 %341, 12, !dbg !30
  %343 = sext i32 %342 to i64, !dbg !30
  %344 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %343, !dbg !30
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %189, !dbg !30
  %346 = ptrtoint ptr addrspace(3) %345 to i64, !dbg !30
  %347 = trunc i64 %346 to i32, !dbg !30
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %347) #1, !dbg !30
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !30
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !30
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !30
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !30
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %195, !dbg !30
  %354 = ptrtoint ptr addrspace(3) %353 to i64, !dbg !30
  %355 = trunc i64 %354 to i32, !dbg !30
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %355) #1, !dbg !30
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !30
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !30
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !30
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !30
  %361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %200, !dbg !30
  %362 = ptrtoint ptr addrspace(3) %361 to i64, !dbg !30
  %363 = trunc i64 %362 to i32, !dbg !30
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %363) #1, !dbg !30
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !30
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !30
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !30
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !30
  %369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %205, !dbg !30
  %370 = ptrtoint ptr addrspace(3) %369 to i64, !dbg !30
  %371 = trunc i64 %370 to i32, !dbg !30
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #1, !dbg !30
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !30
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !30
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !30
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !30
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %208, !dbg !30
  %378 = ptrtoint ptr addrspace(3) %377 to i64, !dbg !30
  %379 = trunc i64 %378 to i32, !dbg !30
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #1, !dbg !30
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !30
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !30
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !30
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !30
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %210, !dbg !30
  %386 = ptrtoint ptr addrspace(3) %385 to i64, !dbg !30
  %387 = trunc i64 %386 to i32, !dbg !30
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %387) #1, !dbg !30
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !30
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !30
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !30
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !30
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %212, !dbg !30
  %394 = ptrtoint ptr addrspace(3) %393 to i64, !dbg !30
  %395 = trunc i64 %394 to i32, !dbg !30
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #1, !dbg !30
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !30
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !30
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !30
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !30
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %214, !dbg !30
  %402 = ptrtoint ptr addrspace(3) %401 to i64, !dbg !30
  %403 = trunc i64 %402 to i32, !dbg !30
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #1, !dbg !30
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !30
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !30
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !30
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !30
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %218, !dbg !30
  %410 = ptrtoint ptr addrspace(3) %409 to i64, !dbg !30
  %411 = trunc i64 %410 to i32, !dbg !30
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #1, !dbg !30
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !30
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !30
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !30
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !30
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %220, !dbg !30
  %418 = ptrtoint ptr addrspace(3) %417 to i64, !dbg !30
  %419 = trunc i64 %418 to i32, !dbg !30
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %419) #1, !dbg !30
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !30
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !30
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !30
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !30
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %222, !dbg !30
  %426 = ptrtoint ptr addrspace(3) %425 to i64, !dbg !30
  %427 = trunc i64 %426 to i32, !dbg !30
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %427) #1, !dbg !30
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !30
  %430 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !30
  %431 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !30
  %432 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !30
  %433 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %224, !dbg !30
  %434 = ptrtoint ptr addrspace(3) %433 to i64, !dbg !30
  %435 = trunc i64 %434 to i32, !dbg !30
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %435) #1, !dbg !30
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !30
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !30
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !30
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !30
  %441 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %227, !dbg !30
  %442 = ptrtoint ptr addrspace(3) %441 to i64, !dbg !30
  %443 = trunc i64 %442 to i32, !dbg !30
  %444 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %443) #1, !dbg !30
  %445 = extractvalue { i32, i32, i32, i32 } %444, 0, !dbg !30
  %446 = extractvalue { i32, i32, i32, i32 } %444, 1, !dbg !30
  %447 = extractvalue { i32, i32, i32, i32 } %444, 2, !dbg !30
  %448 = extractvalue { i32, i32, i32, i32 } %444, 3, !dbg !30
  %449 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %229, !dbg !30
  %450 = ptrtoint ptr addrspace(3) %449 to i64, !dbg !30
  %451 = trunc i64 %450 to i32, !dbg !30
  %452 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %451) #1, !dbg !30
  %453 = extractvalue { i32, i32, i32, i32 } %452, 0, !dbg !30
  %454 = extractvalue { i32, i32, i32, i32 } %452, 1, !dbg !30
  %455 = extractvalue { i32, i32, i32, i32 } %452, 2, !dbg !30
  %456 = extractvalue { i32, i32, i32, i32 } %452, 3, !dbg !30
  %457 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %231, !dbg !30
  %458 = ptrtoint ptr addrspace(3) %457 to i64, !dbg !30
  %459 = trunc i64 %458 to i32, !dbg !30
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %459) #1, !dbg !30
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !30
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !30
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !30
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !30
  %465 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i64 %233, !dbg !30
  %466 = ptrtoint ptr addrspace(3) %465 to i64, !dbg !30
  %467 = trunc i64 %466 to i32, !dbg !30
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %467) #1, !dbg !30
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !30
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !30
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !30
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !30
  %473 = shl i32 %341, 13, !dbg !33
  %474 = sext i32 %473 to i64, !dbg !33
  %475 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %474, !dbg !33
  %476 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %241, !dbg !33
  %477 = ptrtoint ptr addrspace(3) %476 to i64, !dbg !33
  %478 = trunc i64 %477 to i32, !dbg !33
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %478) #1, !dbg !33
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !33
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !33
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !33
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !33
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %244, !dbg !33
  %485 = ptrtoint ptr addrspace(3) %484 to i64, !dbg !33
  %486 = trunc i64 %485 to i32, !dbg !33
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %486) #1, !dbg !33
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !33
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !33
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !33
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !33
  %492 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %249, !dbg !33
  %493 = ptrtoint ptr addrspace(3) %492 to i64, !dbg !33
  %494 = trunc i64 %493 to i32, !dbg !33
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %494) #1, !dbg !33
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !33
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !33
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !33
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !33
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %251, !dbg !33
  %501 = ptrtoint ptr addrspace(3) %500 to i64, !dbg !33
  %502 = trunc i64 %501 to i32, !dbg !33
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %502) #1, !dbg !33
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !33
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !33
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !33
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !33
  %508 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %252, !dbg !33
  %509 = ptrtoint ptr addrspace(3) %508 to i64, !dbg !33
  %510 = trunc i64 %509 to i32, !dbg !33
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %510) #1, !dbg !33
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !33
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !33
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !33
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !33
  %516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %254, !dbg !33
  %517 = ptrtoint ptr addrspace(3) %516 to i64, !dbg !33
  %518 = trunc i64 %517 to i32, !dbg !33
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #1, !dbg !33
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !33
  %521 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !33
  %522 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !33
  %523 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !33
  %524 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %255, !dbg !33
  %525 = ptrtoint ptr addrspace(3) %524 to i64, !dbg !33
  %526 = trunc i64 %525 to i32, !dbg !33
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %526) #1, !dbg !33
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !33
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !33
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !33
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !33
  %532 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %475, i64 %257, !dbg !33
  %533 = ptrtoint ptr addrspace(3) %532 to i64, !dbg !33
  %534 = trunc i64 %533 to i32, !dbg !33
  %535 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %534) #1, !dbg !33
  %536 = extractvalue { i32, i32, i32, i32 } %535, 0, !dbg !33
  %537 = extractvalue { i32, i32, i32, i32 } %535, 1, !dbg !33
  %538 = extractvalue { i32, i32, i32, i32 } %535, 2, !dbg !33
  %539 = extractvalue { i32, i32, i32, i32 } %535, 3, !dbg !33
  %540 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %274, float %275, float %276, float %277, i32 %349, i32 %350, i32 %351, i32 %352, i32 %480, i32 %481) #1, !dbg !36
  %541 = extractvalue { float, float, float, float } %540, 0, !dbg !36
  %542 = extractvalue { float, float, float, float } %540, 1, !dbg !36
  %543 = extractvalue { float, float, float, float } %540, 2, !dbg !36
  %544 = extractvalue { float, float, float, float } %540, 3, !dbg !36
  %545 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %278, float %279, float %280, float %281, i32 %349, i32 %350, i32 %351, i32 %352, i32 %496, i32 %497) #1, !dbg !36
  %546 = extractvalue { float, float, float, float } %545, 0, !dbg !36
  %547 = extractvalue { float, float, float, float } %545, 1, !dbg !36
  %548 = extractvalue { float, float, float, float } %545, 2, !dbg !36
  %549 = extractvalue { float, float, float, float } %545, 3, !dbg !36
  %550 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %349, i32 %350, i32 %351, i32 %352, i32 %512, i32 %513) #1, !dbg !36
  %551 = extractvalue { float, float, float, float } %550, 0, !dbg !36
  %552 = extractvalue { float, float, float, float } %550, 1, !dbg !36
  %553 = extractvalue { float, float, float, float } %550, 2, !dbg !36
  %554 = extractvalue { float, float, float, float } %550, 3, !dbg !36
  %555 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %286, float %287, float %288, float %289, i32 %349, i32 %350, i32 %351, i32 %352, i32 %528, i32 %529) #1, !dbg !36
  %556 = extractvalue { float, float, float, float } %555, 0, !dbg !36
  %557 = extractvalue { float, float, float, float } %555, 1, !dbg !36
  %558 = extractvalue { float, float, float, float } %555, 2, !dbg !36
  %559 = extractvalue { float, float, float, float } %555, 3, !dbg !36
  %560 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %290, float %291, float %292, float %293, i32 %381, i32 %382, i32 %383, i32 %384, i32 %480, i32 %481) #1, !dbg !36
  %561 = extractvalue { float, float, float, float } %560, 0, !dbg !36
  %562 = extractvalue { float, float, float, float } %560, 1, !dbg !36
  %563 = extractvalue { float, float, float, float } %560, 2, !dbg !36
  %564 = extractvalue { float, float, float, float } %560, 3, !dbg !36
  %565 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %294, float %295, float %296, float %297, i32 %381, i32 %382, i32 %383, i32 %384, i32 %496, i32 %497) #1, !dbg !36
  %566 = extractvalue { float, float, float, float } %565, 0, !dbg !36
  %567 = extractvalue { float, float, float, float } %565, 1, !dbg !36
  %568 = extractvalue { float, float, float, float } %565, 2, !dbg !36
  %569 = extractvalue { float, float, float, float } %565, 3, !dbg !36
  %570 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %381, i32 %382, i32 %383, i32 %384, i32 %512, i32 %513) #1, !dbg !36
  %571 = extractvalue { float, float, float, float } %570, 0, !dbg !36
  %572 = extractvalue { float, float, float, float } %570, 1, !dbg !36
  %573 = extractvalue { float, float, float, float } %570, 2, !dbg !36
  %574 = extractvalue { float, float, float, float } %570, 3, !dbg !36
  %575 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %381, i32 %382, i32 %383, i32 %384, i32 %528, i32 %529) #1, !dbg !36
  %576 = extractvalue { float, float, float, float } %575, 0, !dbg !36
  %577 = extractvalue { float, float, float, float } %575, 1, !dbg !36
  %578 = extractvalue { float, float, float, float } %575, 2, !dbg !36
  %579 = extractvalue { float, float, float, float } %575, 3, !dbg !36
  %580 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %413, i32 %414, i32 %415, i32 %416, i32 %480, i32 %481) #1, !dbg !36
  %581 = extractvalue { float, float, float, float } %580, 0, !dbg !36
  %582 = extractvalue { float, float, float, float } %580, 1, !dbg !36
  %583 = extractvalue { float, float, float, float } %580, 2, !dbg !36
  %584 = extractvalue { float, float, float, float } %580, 3, !dbg !36
  %585 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %413, i32 %414, i32 %415, i32 %416, i32 %496, i32 %497) #1, !dbg !36
  %586 = extractvalue { float, float, float, float } %585, 0, !dbg !36
  %587 = extractvalue { float, float, float, float } %585, 1, !dbg !36
  %588 = extractvalue { float, float, float, float } %585, 2, !dbg !36
  %589 = extractvalue { float, float, float, float } %585, 3, !dbg !36
  %590 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %413, i32 %414, i32 %415, i32 %416, i32 %512, i32 %513) #1, !dbg !36
  %591 = extractvalue { float, float, float, float } %590, 0, !dbg !36
  %592 = extractvalue { float, float, float, float } %590, 1, !dbg !36
  %593 = extractvalue { float, float, float, float } %590, 2, !dbg !36
  %594 = extractvalue { float, float, float, float } %590, 3, !dbg !36
  %595 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %413, i32 %414, i32 %415, i32 %416, i32 %528, i32 %529) #1, !dbg !36
  %596 = extractvalue { float, float, float, float } %595, 0, !dbg !36
  %597 = extractvalue { float, float, float, float } %595, 1, !dbg !36
  %598 = extractvalue { float, float, float, float } %595, 2, !dbg !36
  %599 = extractvalue { float, float, float, float } %595, 3, !dbg !36
  %600 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %445, i32 %446, i32 %447, i32 %448, i32 %480, i32 %481) #1, !dbg !36
  %601 = extractvalue { float, float, float, float } %600, 0, !dbg !36
  %602 = extractvalue { float, float, float, float } %600, 1, !dbg !36
  %603 = extractvalue { float, float, float, float } %600, 2, !dbg !36
  %604 = extractvalue { float, float, float, float } %600, 3, !dbg !36
  %605 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %445, i32 %446, i32 %447, i32 %448, i32 %496, i32 %497) #1, !dbg !36
  %606 = extractvalue { float, float, float, float } %605, 0, !dbg !36
  %607 = extractvalue { float, float, float, float } %605, 1, !dbg !36
  %608 = extractvalue { float, float, float, float } %605, 2, !dbg !36
  %609 = extractvalue { float, float, float, float } %605, 3, !dbg !36
  %610 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %445, i32 %446, i32 %447, i32 %448, i32 %512, i32 %513) #1, !dbg !36
  %611 = extractvalue { float, float, float, float } %610, 0, !dbg !36
  %612 = extractvalue { float, float, float, float } %610, 1, !dbg !36
  %613 = extractvalue { float, float, float, float } %610, 2, !dbg !36
  %614 = extractvalue { float, float, float, float } %610, 3, !dbg !36
  %615 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %445, i32 %446, i32 %447, i32 %448, i32 %528, i32 %529) #1, !dbg !36
  %616 = extractvalue { float, float, float, float } %615, 0, !dbg !36
  %617 = extractvalue { float, float, float, float } %615, 1, !dbg !36
  %618 = extractvalue { float, float, float, float } %615, 2, !dbg !36
  %619 = extractvalue { float, float, float, float } %615, 3, !dbg !36
  %620 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %541, float %542, float %543, float %544, i32 %357, i32 %358, i32 %359, i32 %360, i32 %482, i32 %483) #1, !dbg !36
  %621 = extractvalue { float, float, float, float } %620, 0, !dbg !36
  %622 = extractvalue { float, float, float, float } %620, 1, !dbg !36
  %623 = extractvalue { float, float, float, float } %620, 2, !dbg !36
  %624 = extractvalue { float, float, float, float } %620, 3, !dbg !36
  %625 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %546, float %547, float %548, float %549, i32 %357, i32 %358, i32 %359, i32 %360, i32 %498, i32 %499) #1, !dbg !36
  %626 = extractvalue { float, float, float, float } %625, 0, !dbg !36
  %627 = extractvalue { float, float, float, float } %625, 1, !dbg !36
  %628 = extractvalue { float, float, float, float } %625, 2, !dbg !36
  %629 = extractvalue { float, float, float, float } %625, 3, !dbg !36
  %630 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %551, float %552, float %553, float %554, i32 %357, i32 %358, i32 %359, i32 %360, i32 %514, i32 %515) #1, !dbg !36
  %631 = extractvalue { float, float, float, float } %630, 0, !dbg !36
  %632 = extractvalue { float, float, float, float } %630, 1, !dbg !36
  %633 = extractvalue { float, float, float, float } %630, 2, !dbg !36
  %634 = extractvalue { float, float, float, float } %630, 3, !dbg !36
  %635 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %556, float %557, float %558, float %559, i32 %357, i32 %358, i32 %359, i32 %360, i32 %530, i32 %531) #1, !dbg !36
  %636 = extractvalue { float, float, float, float } %635, 0, !dbg !36
  %637 = extractvalue { float, float, float, float } %635, 1, !dbg !36
  %638 = extractvalue { float, float, float, float } %635, 2, !dbg !36
  %639 = extractvalue { float, float, float, float } %635, 3, !dbg !36
  %640 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %561, float %562, float %563, float %564, i32 %389, i32 %390, i32 %391, i32 %392, i32 %482, i32 %483) #1, !dbg !36
  %641 = extractvalue { float, float, float, float } %640, 0, !dbg !36
  %642 = extractvalue { float, float, float, float } %640, 1, !dbg !36
  %643 = extractvalue { float, float, float, float } %640, 2, !dbg !36
  %644 = extractvalue { float, float, float, float } %640, 3, !dbg !36
  %645 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %566, float %567, float %568, float %569, i32 %389, i32 %390, i32 %391, i32 %392, i32 %498, i32 %499) #1, !dbg !36
  %646 = extractvalue { float, float, float, float } %645, 0, !dbg !36
  %647 = extractvalue { float, float, float, float } %645, 1, !dbg !36
  %648 = extractvalue { float, float, float, float } %645, 2, !dbg !36
  %649 = extractvalue { float, float, float, float } %645, 3, !dbg !36
  %650 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %571, float %572, float %573, float %574, i32 %389, i32 %390, i32 %391, i32 %392, i32 %514, i32 %515) #1, !dbg !36
  %651 = extractvalue { float, float, float, float } %650, 0, !dbg !36
  %652 = extractvalue { float, float, float, float } %650, 1, !dbg !36
  %653 = extractvalue { float, float, float, float } %650, 2, !dbg !36
  %654 = extractvalue { float, float, float, float } %650, 3, !dbg !36
  %655 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %576, float %577, float %578, float %579, i32 %389, i32 %390, i32 %391, i32 %392, i32 %530, i32 %531) #1, !dbg !36
  %656 = extractvalue { float, float, float, float } %655, 0, !dbg !36
  %657 = extractvalue { float, float, float, float } %655, 1, !dbg !36
  %658 = extractvalue { float, float, float, float } %655, 2, !dbg !36
  %659 = extractvalue { float, float, float, float } %655, 3, !dbg !36
  %660 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %581, float %582, float %583, float %584, i32 %421, i32 %422, i32 %423, i32 %424, i32 %482, i32 %483) #1, !dbg !36
  %661 = extractvalue { float, float, float, float } %660, 0, !dbg !36
  %662 = extractvalue { float, float, float, float } %660, 1, !dbg !36
  %663 = extractvalue { float, float, float, float } %660, 2, !dbg !36
  %664 = extractvalue { float, float, float, float } %660, 3, !dbg !36
  %665 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %586, float %587, float %588, float %589, i32 %421, i32 %422, i32 %423, i32 %424, i32 %498, i32 %499) #1, !dbg !36
  %666 = extractvalue { float, float, float, float } %665, 0, !dbg !36
  %667 = extractvalue { float, float, float, float } %665, 1, !dbg !36
  %668 = extractvalue { float, float, float, float } %665, 2, !dbg !36
  %669 = extractvalue { float, float, float, float } %665, 3, !dbg !36
  %670 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %591, float %592, float %593, float %594, i32 %421, i32 %422, i32 %423, i32 %424, i32 %514, i32 %515) #1, !dbg !36
  %671 = extractvalue { float, float, float, float } %670, 0, !dbg !36
  %672 = extractvalue { float, float, float, float } %670, 1, !dbg !36
  %673 = extractvalue { float, float, float, float } %670, 2, !dbg !36
  %674 = extractvalue { float, float, float, float } %670, 3, !dbg !36
  %675 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %596, float %597, float %598, float %599, i32 %421, i32 %422, i32 %423, i32 %424, i32 %530, i32 %531) #1, !dbg !36
  %676 = extractvalue { float, float, float, float } %675, 0, !dbg !36
  %677 = extractvalue { float, float, float, float } %675, 1, !dbg !36
  %678 = extractvalue { float, float, float, float } %675, 2, !dbg !36
  %679 = extractvalue { float, float, float, float } %675, 3, !dbg !36
  %680 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %601, float %602, float %603, float %604, i32 %453, i32 %454, i32 %455, i32 %456, i32 %482, i32 %483) #1, !dbg !36
  %681 = extractvalue { float, float, float, float } %680, 0, !dbg !36
  %682 = extractvalue { float, float, float, float } %680, 1, !dbg !36
  %683 = extractvalue { float, float, float, float } %680, 2, !dbg !36
  %684 = extractvalue { float, float, float, float } %680, 3, !dbg !36
  %685 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %606, float %607, float %608, float %609, i32 %453, i32 %454, i32 %455, i32 %456, i32 %498, i32 %499) #1, !dbg !36
  %686 = extractvalue { float, float, float, float } %685, 0, !dbg !36
  %687 = extractvalue { float, float, float, float } %685, 1, !dbg !36
  %688 = extractvalue { float, float, float, float } %685, 2, !dbg !36
  %689 = extractvalue { float, float, float, float } %685, 3, !dbg !36
  %690 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %611, float %612, float %613, float %614, i32 %453, i32 %454, i32 %455, i32 %456, i32 %514, i32 %515) #1, !dbg !36
  %691 = extractvalue { float, float, float, float } %690, 0, !dbg !36
  %692 = extractvalue { float, float, float, float } %690, 1, !dbg !36
  %693 = extractvalue { float, float, float, float } %690, 2, !dbg !36
  %694 = extractvalue { float, float, float, float } %690, 3, !dbg !36
  %695 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %616, float %617, float %618, float %619, i32 %453, i32 %454, i32 %455, i32 %456, i32 %530, i32 %531) #1, !dbg !36
  %696 = extractvalue { float, float, float, float } %695, 0, !dbg !36
  %697 = extractvalue { float, float, float, float } %695, 1, !dbg !36
  %698 = extractvalue { float, float, float, float } %695, 2, !dbg !36
  %699 = extractvalue { float, float, float, float } %695, 3, !dbg !36
  %700 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %621, float %622, float %623, float %624, i32 %365, i32 %366, i32 %367, i32 %368, i32 %488, i32 %489) #1, !dbg !36
  %701 = extractvalue { float, float, float, float } %700, 0, !dbg !36
  %702 = extractvalue { float, float, float, float } %700, 1, !dbg !36
  %703 = extractvalue { float, float, float, float } %700, 2, !dbg !36
  %704 = extractvalue { float, float, float, float } %700, 3, !dbg !36
  %705 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %626, float %627, float %628, float %629, i32 %365, i32 %366, i32 %367, i32 %368, i32 %504, i32 %505) #1, !dbg !36
  %706 = extractvalue { float, float, float, float } %705, 0, !dbg !36
  %707 = extractvalue { float, float, float, float } %705, 1, !dbg !36
  %708 = extractvalue { float, float, float, float } %705, 2, !dbg !36
  %709 = extractvalue { float, float, float, float } %705, 3, !dbg !36
  %710 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %631, float %632, float %633, float %634, i32 %365, i32 %366, i32 %367, i32 %368, i32 %520, i32 %521) #1, !dbg !36
  %711 = extractvalue { float, float, float, float } %710, 0, !dbg !36
  %712 = extractvalue { float, float, float, float } %710, 1, !dbg !36
  %713 = extractvalue { float, float, float, float } %710, 2, !dbg !36
  %714 = extractvalue { float, float, float, float } %710, 3, !dbg !36
  %715 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %636, float %637, float %638, float %639, i32 %365, i32 %366, i32 %367, i32 %368, i32 %536, i32 %537) #1, !dbg !36
  %716 = extractvalue { float, float, float, float } %715, 0, !dbg !36
  %717 = extractvalue { float, float, float, float } %715, 1, !dbg !36
  %718 = extractvalue { float, float, float, float } %715, 2, !dbg !36
  %719 = extractvalue { float, float, float, float } %715, 3, !dbg !36
  %720 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %641, float %642, float %643, float %644, i32 %397, i32 %398, i32 %399, i32 %400, i32 %488, i32 %489) #1, !dbg !36
  %721 = extractvalue { float, float, float, float } %720, 0, !dbg !36
  %722 = extractvalue { float, float, float, float } %720, 1, !dbg !36
  %723 = extractvalue { float, float, float, float } %720, 2, !dbg !36
  %724 = extractvalue { float, float, float, float } %720, 3, !dbg !36
  %725 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %646, float %647, float %648, float %649, i32 %397, i32 %398, i32 %399, i32 %400, i32 %504, i32 %505) #1, !dbg !36
  %726 = extractvalue { float, float, float, float } %725, 0, !dbg !36
  %727 = extractvalue { float, float, float, float } %725, 1, !dbg !36
  %728 = extractvalue { float, float, float, float } %725, 2, !dbg !36
  %729 = extractvalue { float, float, float, float } %725, 3, !dbg !36
  %730 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %651, float %652, float %653, float %654, i32 %397, i32 %398, i32 %399, i32 %400, i32 %520, i32 %521) #1, !dbg !36
  %731 = extractvalue { float, float, float, float } %730, 0, !dbg !36
  %732 = extractvalue { float, float, float, float } %730, 1, !dbg !36
  %733 = extractvalue { float, float, float, float } %730, 2, !dbg !36
  %734 = extractvalue { float, float, float, float } %730, 3, !dbg !36
  %735 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %656, float %657, float %658, float %659, i32 %397, i32 %398, i32 %399, i32 %400, i32 %536, i32 %537) #1, !dbg !36
  %736 = extractvalue { float, float, float, float } %735, 0, !dbg !36
  %737 = extractvalue { float, float, float, float } %735, 1, !dbg !36
  %738 = extractvalue { float, float, float, float } %735, 2, !dbg !36
  %739 = extractvalue { float, float, float, float } %735, 3, !dbg !36
  %740 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %661, float %662, float %663, float %664, i32 %429, i32 %430, i32 %431, i32 %432, i32 %488, i32 %489) #1, !dbg !36
  %741 = extractvalue { float, float, float, float } %740, 0, !dbg !36
  %742 = extractvalue { float, float, float, float } %740, 1, !dbg !36
  %743 = extractvalue { float, float, float, float } %740, 2, !dbg !36
  %744 = extractvalue { float, float, float, float } %740, 3, !dbg !36
  %745 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %666, float %667, float %668, float %669, i32 %429, i32 %430, i32 %431, i32 %432, i32 %504, i32 %505) #1, !dbg !36
  %746 = extractvalue { float, float, float, float } %745, 0, !dbg !36
  %747 = extractvalue { float, float, float, float } %745, 1, !dbg !36
  %748 = extractvalue { float, float, float, float } %745, 2, !dbg !36
  %749 = extractvalue { float, float, float, float } %745, 3, !dbg !36
  %750 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %671, float %672, float %673, float %674, i32 %429, i32 %430, i32 %431, i32 %432, i32 %520, i32 %521) #1, !dbg !36
  %751 = extractvalue { float, float, float, float } %750, 0, !dbg !36
  %752 = extractvalue { float, float, float, float } %750, 1, !dbg !36
  %753 = extractvalue { float, float, float, float } %750, 2, !dbg !36
  %754 = extractvalue { float, float, float, float } %750, 3, !dbg !36
  %755 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %676, float %677, float %678, float %679, i32 %429, i32 %430, i32 %431, i32 %432, i32 %536, i32 %537) #1, !dbg !36
  %756 = extractvalue { float, float, float, float } %755, 0, !dbg !36
  %757 = extractvalue { float, float, float, float } %755, 1, !dbg !36
  %758 = extractvalue { float, float, float, float } %755, 2, !dbg !36
  %759 = extractvalue { float, float, float, float } %755, 3, !dbg !36
  %760 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %681, float %682, float %683, float %684, i32 %461, i32 %462, i32 %463, i32 %464, i32 %488, i32 %489) #1, !dbg !36
  %761 = extractvalue { float, float, float, float } %760, 0, !dbg !36
  %762 = extractvalue { float, float, float, float } %760, 1, !dbg !36
  %763 = extractvalue { float, float, float, float } %760, 2, !dbg !36
  %764 = extractvalue { float, float, float, float } %760, 3, !dbg !36
  %765 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %686, float %687, float %688, float %689, i32 %461, i32 %462, i32 %463, i32 %464, i32 %504, i32 %505) #1, !dbg !36
  %766 = extractvalue { float, float, float, float } %765, 0, !dbg !36
  %767 = extractvalue { float, float, float, float } %765, 1, !dbg !36
  %768 = extractvalue { float, float, float, float } %765, 2, !dbg !36
  %769 = extractvalue { float, float, float, float } %765, 3, !dbg !36
  %770 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %691, float %692, float %693, float %694, i32 %461, i32 %462, i32 %463, i32 %464, i32 %520, i32 %521) #1, !dbg !36
  %771 = extractvalue { float, float, float, float } %770, 0, !dbg !36
  %772 = extractvalue { float, float, float, float } %770, 1, !dbg !36
  %773 = extractvalue { float, float, float, float } %770, 2, !dbg !36
  %774 = extractvalue { float, float, float, float } %770, 3, !dbg !36
  %775 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %696, float %697, float %698, float %699, i32 %461, i32 %462, i32 %463, i32 %464, i32 %536, i32 %537) #1, !dbg !36
  %776 = extractvalue { float, float, float, float } %775, 0, !dbg !36
  %777 = extractvalue { float, float, float, float } %775, 1, !dbg !36
  %778 = extractvalue { float, float, float, float } %775, 2, !dbg !36
  %779 = extractvalue { float, float, float, float } %775, 3, !dbg !36
  %780 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %701, float %702, float %703, float %704, i32 %373, i32 %374, i32 %375, i32 %376, i32 %490, i32 %491) #1, !dbg !36
  %781 = extractvalue { float, float, float, float } %780, 0, !dbg !36
  %782 = extractvalue { float, float, float, float } %780, 1, !dbg !36
  %783 = extractvalue { float, float, float, float } %780, 2, !dbg !36
  %784 = extractvalue { float, float, float, float } %780, 3, !dbg !36
  %785 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %706, float %707, float %708, float %709, i32 %373, i32 %374, i32 %375, i32 %376, i32 %506, i32 %507) #1, !dbg !36
  %786 = extractvalue { float, float, float, float } %785, 0, !dbg !36
  %787 = extractvalue { float, float, float, float } %785, 1, !dbg !36
  %788 = extractvalue { float, float, float, float } %785, 2, !dbg !36
  %789 = extractvalue { float, float, float, float } %785, 3, !dbg !36
  %790 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %711, float %712, float %713, float %714, i32 %373, i32 %374, i32 %375, i32 %376, i32 %522, i32 %523) #1, !dbg !36
  %791 = extractvalue { float, float, float, float } %790, 0, !dbg !36
  %792 = extractvalue { float, float, float, float } %790, 1, !dbg !36
  %793 = extractvalue { float, float, float, float } %790, 2, !dbg !36
  %794 = extractvalue { float, float, float, float } %790, 3, !dbg !36
  %795 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %716, float %717, float %718, float %719, i32 %373, i32 %374, i32 %375, i32 %376, i32 %538, i32 %539) #1, !dbg !36
  %796 = extractvalue { float, float, float, float } %795, 0, !dbg !36
  %797 = extractvalue { float, float, float, float } %795, 1, !dbg !36
  %798 = extractvalue { float, float, float, float } %795, 2, !dbg !36
  %799 = extractvalue { float, float, float, float } %795, 3, !dbg !36
  %800 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %721, float %722, float %723, float %724, i32 %405, i32 %406, i32 %407, i32 %408, i32 %490, i32 %491) #1, !dbg !36
  %801 = extractvalue { float, float, float, float } %800, 0, !dbg !36
  %802 = extractvalue { float, float, float, float } %800, 1, !dbg !36
  %803 = extractvalue { float, float, float, float } %800, 2, !dbg !36
  %804 = extractvalue { float, float, float, float } %800, 3, !dbg !36
  %805 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %726, float %727, float %728, float %729, i32 %405, i32 %406, i32 %407, i32 %408, i32 %506, i32 %507) #1, !dbg !36
  %806 = extractvalue { float, float, float, float } %805, 0, !dbg !36
  %807 = extractvalue { float, float, float, float } %805, 1, !dbg !36
  %808 = extractvalue { float, float, float, float } %805, 2, !dbg !36
  %809 = extractvalue { float, float, float, float } %805, 3, !dbg !36
  %810 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %731, float %732, float %733, float %734, i32 %405, i32 %406, i32 %407, i32 %408, i32 %522, i32 %523) #1, !dbg !36
  %811 = extractvalue { float, float, float, float } %810, 0, !dbg !36
  %812 = extractvalue { float, float, float, float } %810, 1, !dbg !36
  %813 = extractvalue { float, float, float, float } %810, 2, !dbg !36
  %814 = extractvalue { float, float, float, float } %810, 3, !dbg !36
  %815 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %736, float %737, float %738, float %739, i32 %405, i32 %406, i32 %407, i32 %408, i32 %538, i32 %539) #1, !dbg !36
  %816 = extractvalue { float, float, float, float } %815, 0, !dbg !36
  %817 = extractvalue { float, float, float, float } %815, 1, !dbg !36
  %818 = extractvalue { float, float, float, float } %815, 2, !dbg !36
  %819 = extractvalue { float, float, float, float } %815, 3, !dbg !36
  %820 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %741, float %742, float %743, float %744, i32 %437, i32 %438, i32 %439, i32 %440, i32 %490, i32 %491) #1, !dbg !36
  %821 = extractvalue { float, float, float, float } %820, 0, !dbg !36
  %822 = extractvalue { float, float, float, float } %820, 1, !dbg !36
  %823 = extractvalue { float, float, float, float } %820, 2, !dbg !36
  %824 = extractvalue { float, float, float, float } %820, 3, !dbg !36
  %825 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %746, float %747, float %748, float %749, i32 %437, i32 %438, i32 %439, i32 %440, i32 %506, i32 %507) #1, !dbg !36
  %826 = extractvalue { float, float, float, float } %825, 0, !dbg !36
  %827 = extractvalue { float, float, float, float } %825, 1, !dbg !36
  %828 = extractvalue { float, float, float, float } %825, 2, !dbg !36
  %829 = extractvalue { float, float, float, float } %825, 3, !dbg !36
  %830 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %751, float %752, float %753, float %754, i32 %437, i32 %438, i32 %439, i32 %440, i32 %522, i32 %523) #1, !dbg !36
  %831 = extractvalue { float, float, float, float } %830, 0, !dbg !36
  %832 = extractvalue { float, float, float, float } %830, 1, !dbg !36
  %833 = extractvalue { float, float, float, float } %830, 2, !dbg !36
  %834 = extractvalue { float, float, float, float } %830, 3, !dbg !36
  %835 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %756, float %757, float %758, float %759, i32 %437, i32 %438, i32 %439, i32 %440, i32 %538, i32 %539) #1, !dbg !36
  %836 = extractvalue { float, float, float, float } %835, 0, !dbg !36
  %837 = extractvalue { float, float, float, float } %835, 1, !dbg !36
  %838 = extractvalue { float, float, float, float } %835, 2, !dbg !36
  %839 = extractvalue { float, float, float, float } %835, 3, !dbg !36
  %840 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %761, float %762, float %763, float %764, i32 %469, i32 %470, i32 %471, i32 %472, i32 %490, i32 %491) #1, !dbg !36
  %841 = extractvalue { float, float, float, float } %840, 0, !dbg !36
  %842 = extractvalue { float, float, float, float } %840, 1, !dbg !36
  %843 = extractvalue { float, float, float, float } %840, 2, !dbg !36
  %844 = extractvalue { float, float, float, float } %840, 3, !dbg !36
  %845 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %766, float %767, float %768, float %769, i32 %469, i32 %470, i32 %471, i32 %472, i32 %506, i32 %507) #1, !dbg !36
  %846 = extractvalue { float, float, float, float } %845, 0, !dbg !36
  %847 = extractvalue { float, float, float, float } %845, 1, !dbg !36
  %848 = extractvalue { float, float, float, float } %845, 2, !dbg !36
  %849 = extractvalue { float, float, float, float } %845, 3, !dbg !36
  %850 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %771, float %772, float %773, float %774, i32 %469, i32 %470, i32 %471, i32 %472, i32 %522, i32 %523) #1, !dbg !36
  %851 = extractvalue { float, float, float, float } %850, 0, !dbg !36
  %852 = extractvalue { float, float, float, float } %850, 1, !dbg !36
  %853 = extractvalue { float, float, float, float } %850, 2, !dbg !36
  %854 = extractvalue { float, float, float, float } %850, 3, !dbg !36
  %855 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %776, float %777, float %778, float %779, i32 %469, i32 %470, i32 %471, i32 %472, i32 %538, i32 %539) #1, !dbg !36
  %856 = extractvalue { float, float, float, float } %855, 0, !dbg !36
  %857 = extractvalue { float, float, float, float } %855, 1, !dbg !36
  %858 = extractvalue { float, float, float, float } %855, 2, !dbg !36
  %859 = extractvalue { float, float, float, float } %855, 3, !dbg !36
  %860 = add i32 %273, 1, !dbg !35
  %861 = icmp slt i32 %860, 2, !dbg !35
  %862 = select i1 %861, i32 %860, i32 0, !dbg !35
  %863 = shl nuw nsw i64 %indvars.iv, 6, !dbg !37
  %864 = add nuw nsw i64 %863, %258
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %864, !dbg !29
  %gep297 = getelementptr bfloat, ptr addrspace(1) %invariant.gep296, i64 %864, !dbg !29
  %gep299 = getelementptr bfloat, ptr addrspace(1) %invariant.gep298, i64 %864, !dbg !29
  %gep301 = getelementptr bfloat, ptr addrspace(1) %invariant.gep300, i64 %864, !dbg !29
  %865 = shl i32 %862, 12, !dbg !30
  %866 = sext i32 %865 to i64, !dbg !30
  %867 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %866, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %868 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %867, i64 %83, !dbg !30
  %869 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %867, i64 %86, !dbg !30
  %870 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %867, i64 %89, !dbg !30
  %871 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %867, i64 %92, !dbg !30
  %872 = select i1 %338, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %868, ptr addrspace(1) %gep, i32 %872) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %869, ptr addrspace(1) %gep297, i32 %872) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %870, ptr addrspace(1) %gep299, i32 %872) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %871, ptr addrspace(1) %gep301, i32 %872) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep303 = getelementptr bfloat, ptr addrspace(1) %invariant.gep302, i64 %864, !dbg !32
  %gep305 = getelementptr bfloat, ptr addrspace(1) %invariant.gep304, i64 %864, !dbg !32
  %gep307 = getelementptr bfloat, ptr addrspace(1) %invariant.gep306, i64 %864, !dbg !32
  %gep309 = getelementptr bfloat, ptr addrspace(1) %invariant.gep308, i64 %864, !dbg !32
  %gep311 = getelementptr bfloat, ptr addrspace(1) %invariant.gep310, i64 %864, !dbg !32
  %gep313 = getelementptr bfloat, ptr addrspace(1) %invariant.gep312, i64 %864, !dbg !32
  %gep315 = getelementptr bfloat, ptr addrspace(1) %invariant.gep314, i64 %864, !dbg !32
  %gep317 = getelementptr bfloat, ptr addrspace(1) %invariant.gep316, i64 %864, !dbg !32
  %873 = shl i32 %862, 13, !dbg !33
  %874 = sext i32 %873 to i64, !dbg !33
  %875 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %874, !dbg !33
  %876 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %83, !dbg !33
  %877 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %86, !dbg !33
  %878 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %89, !dbg !33
  %879 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %92, !dbg !33
  %880 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %123, !dbg !33
  %881 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %126, !dbg !33
  %882 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %129, !dbg !33
  %883 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %875, i64 %132, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %876, ptr addrspace(1) %gep303, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %877, ptr addrspace(1) %gep305, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %878, ptr addrspace(1) %gep307, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %879, ptr addrspace(1) %gep309, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %880, ptr addrspace(1) %gep311, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %881, ptr addrspace(1) %gep313, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %882, ptr addrspace(1) %gep315, i32 %872) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %883, ptr addrspace(1) %gep317, i32 %872) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 12, !dbg !35
  br i1 %exitcond.not, label %884, label %271, !dbg !35

884:                                              ; preds = %271
  %885 = shl nuw nsw i32 %16, 3, !dbg !22
  %886 = or disjoint i32 %34, %885, !dbg !22
  %887 = or disjoint i32 %28, %886, !dbg !23
  %888 = lshr i32 %15, 4, !dbg !19
  %889 = and i32 %888, 7, !dbg !19
  %890 = or disjoint i32 %889, %14, !dbg !20
  %891 = or disjoint i32 %890, 56, !dbg !20
  %892 = or disjoint i32 %890, 48, !dbg !20
  %893 = or disjoint i32 %890, 40, !dbg !20
  %894 = or disjoint i32 %890, 32, !dbg !20
  %895 = or disjoint i32 %890, 24, !dbg !20
  %896 = or disjoint i32 %890, 16, !dbg !20
  %897 = or disjoint i32 %890, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %898 = icmp slt i32 %890, 77, !dbg !38
  %899 = icmp slt i32 %897, 77, !dbg !38
  %900 = icmp slt i32 %896, 77, !dbg !38
  %901 = icmp slt i32 %895, 77, !dbg !38
  %902 = icmp slt i32 %894, 77, !dbg !38
  %903 = icmp slt i32 %893, 77, !dbg !38
  %904 = icmp slt i32 %892, 77, !dbg !38
  %905 = icmp slt i32 %891, 77, !dbg !38
  %906 = icmp slt i32 %887, 768, !dbg !39
  %907 = and i1 %898, %906, !dbg !40
  %908 = and i1 %899, %906, !dbg !40
  %909 = and i1 %900, %906, !dbg !40
  %910 = and i1 %901, %906, !dbg !40
  %911 = and i1 %902, %906, !dbg !40
  %912 = and i1 %903, %906, !dbg !40
  %913 = and i1 %904, %906, !dbg !40
  %914 = and i1 %905, %906, !dbg !40
  %915 = mul i32 %890, 768, !dbg !41
  %916 = mul i32 %897, 768, !dbg !41
  %917 = mul i32 %896, 768, !dbg !41
  %918 = mul i32 %895, 768, !dbg !41
  %919 = mul i32 %894, 768, !dbg !41
  %920 = mul i32 %893, 768, !dbg !41
  %921 = mul i32 %892, 768, !dbg !41
  %922 = mul i32 %891, 768, !dbg !41
  %923 = add i32 %915, %887, !dbg !42
  %924 = add i32 %916, %887, !dbg !42
  %925 = add i32 %917, %887, !dbg !42
  %926 = add i32 %918, %887, !dbg !42
  %927 = add i32 %919, %887, !dbg !42
  %928 = add i32 %920, %887, !dbg !42
  %929 = add i32 %921, %887, !dbg !42
  %930 = add i32 %922, %887, !dbg !42
  %931 = sext i32 %923 to i64, !dbg !43
  %932 = getelementptr bfloat, ptr addrspace(1) %2, i64 %931, !dbg !43
  %933 = sext i32 %924 to i64, !dbg !43
  %934 = getelementptr bfloat, ptr addrspace(1) %2, i64 %933, !dbg !43
  %935 = sext i32 %925 to i64, !dbg !43
  %936 = getelementptr bfloat, ptr addrspace(1) %2, i64 %935, !dbg !43
  %937 = sext i32 %926 to i64, !dbg !43
  %938 = getelementptr bfloat, ptr addrspace(1) %2, i64 %937, !dbg !43
  %939 = sext i32 %927 to i64, !dbg !43
  %940 = getelementptr bfloat, ptr addrspace(1) %2, i64 %939, !dbg !43
  %941 = sext i32 %928 to i64, !dbg !43
  %942 = getelementptr bfloat, ptr addrspace(1) %2, i64 %941, !dbg !43
  %943 = sext i32 %929 to i64, !dbg !43
  %944 = getelementptr bfloat, ptr addrspace(1) %2, i64 %943, !dbg !43
  %945 = sext i32 %930 to i64, !dbg !43
  %946 = getelementptr bfloat, ptr addrspace(1) %2, i64 %945, !dbg !43
  %947 = fptrunc float %781 to bfloat, !dbg !44
  %948 = fptrunc float %782 to bfloat, !dbg !44
  %949 = fptrunc float %783 to bfloat, !dbg !44
  %950 = fptrunc float %784 to bfloat, !dbg !44
  %951 = fptrunc float %786 to bfloat, !dbg !44
  %952 = fptrunc float %787 to bfloat, !dbg !44
  %953 = fptrunc float %788 to bfloat, !dbg !44
  %954 = fptrunc float %789 to bfloat, !dbg !44
  %955 = fptrunc float %791 to bfloat, !dbg !44
  %956 = fptrunc float %792 to bfloat, !dbg !44
  %957 = fptrunc float %793 to bfloat, !dbg !44
  %958 = fptrunc float %794 to bfloat, !dbg !44
  %959 = fptrunc float %796 to bfloat, !dbg !44
  %960 = fptrunc float %797 to bfloat, !dbg !44
  %961 = fptrunc float %798 to bfloat, !dbg !44
  %962 = fptrunc float %799 to bfloat, !dbg !44
  %963 = fptrunc float %801 to bfloat, !dbg !44
  %964 = fptrunc float %802 to bfloat, !dbg !44
  %965 = fptrunc float %803 to bfloat, !dbg !44
  %966 = fptrunc float %804 to bfloat, !dbg !44
  %967 = fptrunc float %806 to bfloat, !dbg !44
  %968 = fptrunc float %807 to bfloat, !dbg !44
  %969 = fptrunc float %808 to bfloat, !dbg !44
  %970 = fptrunc float %809 to bfloat, !dbg !44
  %971 = fptrunc float %811 to bfloat, !dbg !44
  %972 = fptrunc float %812 to bfloat, !dbg !44
  %973 = fptrunc float %813 to bfloat, !dbg !44
  %974 = fptrunc float %814 to bfloat, !dbg !44
  %975 = fptrunc float %816 to bfloat, !dbg !44
  %976 = fptrunc float %817 to bfloat, !dbg !44
  %977 = fptrunc float %818 to bfloat, !dbg !44
  %978 = fptrunc float %819 to bfloat, !dbg !44
  %979 = fptrunc float %821 to bfloat, !dbg !44
  %980 = fptrunc float %822 to bfloat, !dbg !44
  %981 = fptrunc float %823 to bfloat, !dbg !44
  %982 = fptrunc float %824 to bfloat, !dbg !44
  %983 = fptrunc float %826 to bfloat, !dbg !44
  %984 = fptrunc float %827 to bfloat, !dbg !44
  %985 = fptrunc float %828 to bfloat, !dbg !44
  %986 = fptrunc float %829 to bfloat, !dbg !44
  %987 = fptrunc float %831 to bfloat, !dbg !44
  %988 = fptrunc float %832 to bfloat, !dbg !44
  %989 = fptrunc float %833 to bfloat, !dbg !44
  %990 = fptrunc float %834 to bfloat, !dbg !44
  %991 = fptrunc float %836 to bfloat, !dbg !44
  %992 = fptrunc float %837 to bfloat, !dbg !44
  %993 = fptrunc float %838 to bfloat, !dbg !44
  %994 = fptrunc float %839 to bfloat, !dbg !44
  %995 = fptrunc float %841 to bfloat, !dbg !44
  %996 = fptrunc float %842 to bfloat, !dbg !44
  %997 = fptrunc float %843 to bfloat, !dbg !44
  %998 = fptrunc float %844 to bfloat, !dbg !44
  %999 = fptrunc float %846 to bfloat, !dbg !44
  %1000 = fptrunc float %847 to bfloat, !dbg !44
  %1001 = fptrunc float %848 to bfloat, !dbg !44
  %1002 = fptrunc float %849 to bfloat, !dbg !44
  %1003 = fptrunc float %851 to bfloat, !dbg !44
  %1004 = fptrunc float %852 to bfloat, !dbg !44
  %1005 = fptrunc float %853 to bfloat, !dbg !44
  %1006 = fptrunc float %854 to bfloat, !dbg !44
  %1007 = fptrunc float %856 to bfloat, !dbg !44
  %1008 = fptrunc float %857 to bfloat, !dbg !44
  %1009 = fptrunc float %858 to bfloat, !dbg !44
  %1010 = fptrunc float %859 to bfloat, !dbg !44
  %1011 = shl i32 %15, 1, !dbg !44
  %1012 = and i32 %1011, 6, !dbg !44
  %1013 = shl i32 %15, 5, !dbg !44
  %1014 = and i32 %1013, 384, !dbg !44
  %1015 = or disjoint i32 %1014, %1012, !dbg !44
  %1016 = shl nuw nsw i32 %17, 5, !dbg !44
  %1017 = or disjoint i32 %1015, %1016, !dbg !44
  %1018 = and i32 %235, 24, !dbg !44
  %1019 = or disjoint i32 %1017, %1018, !dbg !44
  %1020 = and i32 %29, 1016, !dbg !44
  %1021 = lshr i32 %1017, 4, !dbg !44
  %1022 = add nuw nsw i32 %1021, %1019, !dbg !44
  %1023 = zext nneg i32 %1022 to i64, !dbg !44
  %1024 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1023, !dbg !44
  %1025 = bitcast bfloat %947 to i16, !dbg !44
  %1026 = bitcast bfloat %948 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1024, i16 %1025, i16 %1026, i1 true) #1, !dbg !44
  %1027 = or disjoint i32 %1019, 1024, !dbg !44
  %1028 = lshr i32 %1027, 4, !dbg !44
  %1029 = and i32 %1028, 268435448, !dbg !44
  %1030 = add nuw nsw i32 %1029, %1027, !dbg !44
  %1031 = zext nneg i32 %1030 to i64, !dbg !44
  %1032 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1031, !dbg !44
  %1033 = bitcast bfloat %949 to i16, !dbg !44
  %1034 = bitcast bfloat %950 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1032, i16 %1033, i16 %1034, i1 true) #1, !dbg !44
  %1035 = or disjoint i32 %1019, 32, !dbg !44
  %1036 = add nuw nsw i32 %1035, %1021, !dbg !44
  %1037 = zext nneg i32 %1036 to i64, !dbg !44
  %1038 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1037, !dbg !44
  %1039 = bitcast bfloat %951 to i16, !dbg !44
  %1040 = bitcast bfloat %952 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1039, i16 %1040, i1 true) #1, !dbg !44
  %1041 = or disjoint i32 %1019, 1056, !dbg !44
  %1042 = lshr i32 %1041, 4, !dbg !44
  %1043 = and i32 %1042, 268435448, !dbg !44
  %1044 = add nuw nsw i32 %1043, %1041, !dbg !44
  %1045 = zext nneg i32 %1044 to i64, !dbg !44
  %1046 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1045, !dbg !44
  %1047 = bitcast bfloat %953 to i16, !dbg !44
  %1048 = bitcast bfloat %954 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1046, i16 %1047, i16 %1048, i1 true) #1, !dbg !44
  %1049 = or disjoint i32 %1019, 64, !dbg !44
  %1050 = add nuw nsw i32 %1049, %1021, !dbg !44
  %1051 = zext nneg i32 %1050 to i64, !dbg !44
  %1052 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1051, !dbg !44
  %1053 = bitcast bfloat %955 to i16, !dbg !44
  %1054 = bitcast bfloat %956 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1053, i16 %1054, i1 true) #1, !dbg !44
  %1055 = or disjoint i32 %1019, 1088, !dbg !44
  %1056 = lshr i32 %1055, 4, !dbg !44
  %1057 = and i32 %1056, 268435448, !dbg !44
  %1058 = add nuw nsw i32 %1057, %1055, !dbg !44
  %1059 = zext nneg i32 %1058 to i64, !dbg !44
  %1060 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1059, !dbg !44
  %1061 = bitcast bfloat %957 to i16, !dbg !44
  %1062 = bitcast bfloat %958 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1061, i16 %1062, i1 true) #1, !dbg !44
  %1063 = or disjoint i32 %1019, 96, !dbg !44
  %1064 = add nuw nsw i32 %1063, %1021, !dbg !44
  %1065 = zext nneg i32 %1064 to i64, !dbg !44
  %1066 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1065, !dbg !44
  %1067 = bitcast bfloat %959 to i16, !dbg !44
  %1068 = bitcast bfloat %960 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1066, i16 %1067, i16 %1068, i1 true) #1, !dbg !44
  %1069 = or disjoint i32 %1019, 1120, !dbg !44
  %1070 = lshr i32 %1069, 4, !dbg !44
  %1071 = and i32 %1070, 268435448, !dbg !44
  %1072 = add nuw nsw i32 %1071, %1069, !dbg !44
  %1073 = zext nneg i32 %1072 to i64, !dbg !44
  %1074 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1073, !dbg !44
  %1075 = bitcast bfloat %961 to i16, !dbg !44
  %1076 = bitcast bfloat %962 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1075, i16 %1076, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1077 = lshr i32 %29, 4, !dbg !44
  %1078 = and i32 %1077, 56, !dbg !44
  %1079 = add nuw nsw i32 %1078, %1020, !dbg !44
  %1080 = zext nneg i32 %1079 to i64, !dbg !44
  %1081 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1080, !dbg !44
  %1082 = load <4 x i32>, ptr addrspace(3) %1081, align 16, !dbg !44
  %1083 = or disjoint i32 %1020, 1024, !dbg !44
  %1084 = lshr i32 %1083, 4, !dbg !44
  %1085 = and i32 %1084, 120, !dbg !44
  %1086 = add nuw nsw i32 %1085, %1083, !dbg !44
  %1087 = zext nneg i32 %1086 to i64, !dbg !44
  %1088 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1087, !dbg !44
  %1089 = load <4 x i32>, ptr addrspace(3) %1088, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1090 = bitcast bfloat %963 to i16, !dbg !44
  %1091 = bitcast bfloat %964 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1024, i16 %1090, i16 %1091, i1 true) #1, !dbg !44
  %1092 = bitcast bfloat %965 to i16, !dbg !44
  %1093 = bitcast bfloat %966 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1032, i16 %1092, i16 %1093, i1 true) #1, !dbg !44
  %1094 = bitcast bfloat %967 to i16, !dbg !44
  %1095 = bitcast bfloat %968 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1094, i16 %1095, i1 true) #1, !dbg !44
  %1096 = bitcast bfloat %969 to i16, !dbg !44
  %1097 = bitcast bfloat %970 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1046, i16 %1096, i16 %1097, i1 true) #1, !dbg !44
  %1098 = bitcast bfloat %971 to i16, !dbg !44
  %1099 = bitcast bfloat %972 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1098, i16 %1099, i1 true) #1, !dbg !44
  %1100 = bitcast bfloat %973 to i16, !dbg !44
  %1101 = bitcast bfloat %974 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1100, i16 %1101, i1 true) #1, !dbg !44
  %1102 = bitcast bfloat %975 to i16, !dbg !44
  %1103 = bitcast bfloat %976 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1066, i16 %1102, i16 %1103, i1 true) #1, !dbg !44
  %1104 = bitcast bfloat %977 to i16, !dbg !44
  %1105 = bitcast bfloat %978 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1104, i16 %1105, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1106 = load <4 x i32>, ptr addrspace(3) %1081, align 16, !dbg !44
  %1107 = load <4 x i32>, ptr addrspace(3) %1088, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1108 = bitcast bfloat %979 to i16, !dbg !44
  %1109 = bitcast bfloat %980 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1024, i16 %1108, i16 %1109, i1 true) #1, !dbg !44
  %1110 = bitcast bfloat %981 to i16, !dbg !44
  %1111 = bitcast bfloat %982 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1032, i16 %1110, i16 %1111, i1 true) #1, !dbg !44
  %1112 = bitcast bfloat %983 to i16, !dbg !44
  %1113 = bitcast bfloat %984 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1112, i16 %1113, i1 true) #1, !dbg !44
  %1114 = bitcast bfloat %985 to i16, !dbg !44
  %1115 = bitcast bfloat %986 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1046, i16 %1114, i16 %1115, i1 true) #1, !dbg !44
  %1116 = bitcast bfloat %987 to i16, !dbg !44
  %1117 = bitcast bfloat %988 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1116, i16 %1117, i1 true) #1, !dbg !44
  %1118 = bitcast bfloat %989 to i16, !dbg !44
  %1119 = bitcast bfloat %990 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1118, i16 %1119, i1 true) #1, !dbg !44
  %1120 = bitcast bfloat %991 to i16, !dbg !44
  %1121 = bitcast bfloat %992 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1066, i16 %1120, i16 %1121, i1 true) #1, !dbg !44
  %1122 = bitcast bfloat %993 to i16, !dbg !44
  %1123 = bitcast bfloat %994 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1122, i16 %1123, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1124 = load <4 x i32>, ptr addrspace(3) %1081, align 16, !dbg !44
  %1125 = load <4 x i32>, ptr addrspace(3) %1088, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1126 = bitcast bfloat %995 to i16, !dbg !44
  %1127 = bitcast bfloat %996 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1024, i16 %1126, i16 %1127, i1 true) #1, !dbg !44
  %1128 = bitcast bfloat %997 to i16, !dbg !44
  %1129 = bitcast bfloat %998 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1032, i16 %1128, i16 %1129, i1 true) #1, !dbg !44
  %1130 = bitcast bfloat %999 to i16, !dbg !44
  %1131 = bitcast bfloat %1000 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1130, i16 %1131, i1 true) #1, !dbg !44
  %1132 = bitcast bfloat %1001 to i16, !dbg !44
  %1133 = bitcast bfloat %1002 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1046, i16 %1132, i16 %1133, i1 true) #1, !dbg !44
  %1134 = bitcast bfloat %1003 to i16, !dbg !44
  %1135 = bitcast bfloat %1004 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1052, i16 %1134, i16 %1135, i1 true) #1, !dbg !44
  %1136 = bitcast bfloat %1005 to i16, !dbg !44
  %1137 = bitcast bfloat %1006 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1136, i16 %1137, i1 true) #1, !dbg !44
  %1138 = bitcast bfloat %1007 to i16, !dbg !44
  %1139 = bitcast bfloat %1008 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1066, i16 %1138, i16 %1139, i1 true) #1, !dbg !44
  %1140 = bitcast bfloat %1009 to i16, !dbg !44
  %1141 = bitcast bfloat %1010 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1074, i16 %1140, i16 %1141, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1142 = load <4 x i32>, ptr addrspace(3) %1081, align 16, !dbg !44
  %1143 = load <4 x i32>, ptr addrspace(3) %1088, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1082, i64 0, !dbg !44
  %.extract100 = extractelement <4 x i32> %1082, i64 1, !dbg !44
  %.extract102 = extractelement <4 x i32> %1082, i64 2, !dbg !44
  %.extract104 = extractelement <4 x i32> %1082, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract100, i32 %.extract102, i32 %.extract104, ptr addrspace(1) %932, i1 %907) #1, !dbg !44
  %.extract106 = extractelement <4 x i32> %1089, i64 0, !dbg !44
  %.extract108 = extractelement <4 x i32> %1089, i64 1, !dbg !44
  %.extract110 = extractelement <4 x i32> %1089, i64 2, !dbg !44
  %.extract112 = extractelement <4 x i32> %1089, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract106, i32 %.extract108, i32 %.extract110, i32 %.extract112, ptr addrspace(1) %934, i1 %908) #1, !dbg !44
  %.extract114 = extractelement <4 x i32> %1106, i64 0, !dbg !44
  %.extract116 = extractelement <4 x i32> %1106, i64 1, !dbg !44
  %.extract118 = extractelement <4 x i32> %1106, i64 2, !dbg !44
  %.extract120 = extractelement <4 x i32> %1106, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract114, i32 %.extract116, i32 %.extract118, i32 %.extract120, ptr addrspace(1) %936, i1 %909) #1, !dbg !44
  %.extract122 = extractelement <4 x i32> %1107, i64 0, !dbg !44
  %.extract124 = extractelement <4 x i32> %1107, i64 1, !dbg !44
  %.extract126 = extractelement <4 x i32> %1107, i64 2, !dbg !44
  %.extract128 = extractelement <4 x i32> %1107, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract122, i32 %.extract124, i32 %.extract126, i32 %.extract128, ptr addrspace(1) %938, i1 %910) #1, !dbg !44
  %.extract130 = extractelement <4 x i32> %1124, i64 0, !dbg !44
  %.extract132 = extractelement <4 x i32> %1124, i64 1, !dbg !44
  %.extract134 = extractelement <4 x i32> %1124, i64 2, !dbg !44
  %.extract136 = extractelement <4 x i32> %1124, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract130, i32 %.extract132, i32 %.extract134, i32 %.extract136, ptr addrspace(1) %940, i1 %911) #1, !dbg !44
  %.extract138 = extractelement <4 x i32> %1125, i64 0, !dbg !44
  %.extract140 = extractelement <4 x i32> %1125, i64 1, !dbg !44
  %.extract142 = extractelement <4 x i32> %1125, i64 2, !dbg !44
  %.extract144 = extractelement <4 x i32> %1125, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract140, i32 %.extract142, i32 %.extract144, ptr addrspace(1) %942, i1 %912) #1, !dbg !44
  %.extract146 = extractelement <4 x i32> %1142, i64 0, !dbg !44
  %.extract148 = extractelement <4 x i32> %1142, i64 1, !dbg !44
  %.extract150 = extractelement <4 x i32> %1142, i64 2, !dbg !44
  %.extract152 = extractelement <4 x i32> %1142, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %944, i1 %913) #1, !dbg !44
  %.extract154 = extractelement <4 x i32> %1143, i64 0, !dbg !44
  %.extract156 = extractelement <4 x i32> %1143, i64 1, !dbg !44
  %.extract158 = extractelement <4 x i32> %1143, i64 2, !dbg !44
  %.extract160 = extractelement <4 x i32> %1143, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %946, i1 %914) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxz5modueljzda62rtoqgawwiirmmtrwgwdf7u64m4jxelvlpmzb.py", directory: "/tmp/torchinductor_root/xz")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 25, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
