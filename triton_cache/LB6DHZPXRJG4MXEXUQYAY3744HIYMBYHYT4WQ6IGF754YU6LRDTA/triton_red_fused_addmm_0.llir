; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 8, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = shl i32 %9, 1, !dbg !14
  %14 = and i32 %13, 510, !dbg !14
  %15 = and i32 %9, 511, !dbg !14
  %16 = mul i32 %11, 3072, !dbg !15
  %17 = or disjoint i32 %16, %14
  %18 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14
  %20 = zext nneg i32 %15 to i64, !dbg !16
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i16 %22 to bfloat, !dbg !18
  %24 = fpext bfloat %23 to float, !dbg !19
  %25 = sext i32 %17 to i64, !dbg !20
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 %12) #4, !dbg !21
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !21
  %29 = fsub float 0.000000e+00, %24, !dbg !22
  %30 = fmul float %29, 0x3FF7154760000000, !dbg !26
  %31 = tail call float @llvm.nvvm.ex2.approx.f(float %30), !dbg !26
  %32 = fadd float %31, 1.000000e+00, !dbg !27
  %33 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %32), !dbg !28
  %34 = fmul float %33, %24, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %35 = bitcast float %34 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %35, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %36 = or disjoint i64 %20, 512, !dbg !31
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = or disjoint i32 %17, 512, !dbg !32
  %39 = sext i32 %38 to i64, !dbg !20
  %40 = getelementptr bfloat, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = or disjoint i64 %20, 1024, !dbg !31
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = add i32 %17, 1024, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !20
  %45 = getelementptr bfloat, ptr addrspace(1) %1, i64 %44, !dbg !20
  %46 = or disjoint i64 %20, 1536, !dbg !31
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !17
  %48 = add i32 %17, 1536, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !20
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !20
  %51 = or disjoint i64 %20, 2048, !dbg !31
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !17
  %53 = add i32 %17, 2048, !dbg !32
  %54 = sext i32 %53 to i64, !dbg !20
  %55 = getelementptr bfloat, ptr addrspace(1) %1, i64 %54, !dbg !20
  %56 = or disjoint i64 %20, 2560, !dbg !31
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !17
  %58 = add i32 %17, 2560, !dbg !32
  %59 = sext i32 %58 to i64, !dbg !20
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !20
  %61 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !33
  %62 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %63 = fmul <2 x float> %62, %61, !dbg !30
  %64 = fadd <2 x float> %63, zeroinitializer, !dbg !34
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 true) #4, !dbg !18
  %66 = bitcast i16 %65 to bfloat, !dbg !18
  %67 = fpext bfloat %66 to float, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %12) #4, !dbg !21
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !21
  %70 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !33
  %71 = fsub float 0.000000e+00, %67, !dbg !22
  %72 = fmul float %71, 0x3FF7154760000000, !dbg !26
  %73 = tail call float @llvm.nvvm.ex2.approx.f(float %72), !dbg !26
  %74 = fadd float %73, 1.000000e+00, !dbg !27
  %75 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %74), !dbg !28
  %76 = fmul float %75, %67, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %77 = bitcast float %76 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %77, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %78 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %79 = fmul <2 x float> %78, %70, !dbg !30
  %80 = fadd <2 x float> %64, %79, !dbg !34
  %81 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 true) #4, !dbg !18
  %82 = bitcast i16 %81 to bfloat, !dbg !18
  %83 = fpext bfloat %82 to float, !dbg !19
  %84 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %12) #4, !dbg !21
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !21
  %86 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !33
  %87 = fsub float 0.000000e+00, %83, !dbg !22
  %88 = fmul float %87, 0x3FF7154760000000, !dbg !26
  %89 = tail call float @llvm.nvvm.ex2.approx.f(float %88), !dbg !26
  %90 = fadd float %89, 1.000000e+00, !dbg !27
  %91 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %90), !dbg !28
  %92 = fmul float %91, %83, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %93 = bitcast float %92 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %93, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %94 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %95 = fmul <2 x float> %94, %86, !dbg !30
  %96 = fadd <2 x float> %80, %95, !dbg !34
  %97 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 true) #4, !dbg !18
  %98 = bitcast i16 %97 to bfloat, !dbg !18
  %99 = fpext bfloat %98 to float, !dbg !19
  %100 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %50, i1 %12) #4, !dbg !21
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !21
  %102 = fpext <2 x bfloat> %101 to <2 x float>, !dbg !33
  %103 = fsub float 0.000000e+00, %99, !dbg !22
  %104 = fmul float %103, 0x3FF7154760000000, !dbg !26
  %105 = tail call float @llvm.nvvm.ex2.approx.f(float %104), !dbg !26
  %106 = fadd float %105, 1.000000e+00, !dbg !27
  %107 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %106), !dbg !28
  %108 = fmul float %107, %99, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %109 = bitcast float %108 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %109, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %110 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %111 = fmul <2 x float> %110, %102, !dbg !30
  %112 = fadd <2 x float> %96, %111, !dbg !34
  %113 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #4, !dbg !18
  %114 = bitcast i16 %113 to bfloat, !dbg !18
  %115 = fpext bfloat %114 to float, !dbg !19
  %116 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %55, i1 %12) #4, !dbg !21
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !21
  %118 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !33
  %119 = fsub float 0.000000e+00, %115, !dbg !22
  %120 = fmul float %119, 0x3FF7154760000000, !dbg !26
  %121 = tail call float @llvm.nvvm.ex2.approx.f(float %120), !dbg !26
  %122 = fadd float %121, 1.000000e+00, !dbg !27
  %123 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %122), !dbg !28
  %124 = fmul float %123, %115, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %125 = bitcast float %124 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %125, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %126 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %127 = fmul <2 x float> %126, %118, !dbg !30
  %128 = fadd <2 x float> %112, %127, !dbg !34
  %129 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #4, !dbg !18
  %130 = bitcast i16 %129 to bfloat, !dbg !18
  %131 = fpext bfloat %130 to float, !dbg !19
  %132 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %60, i1 %12) #4, !dbg !21
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !21
  %134 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !33
  %135 = fsub float 0.000000e+00, %131, !dbg !22
  %136 = fmul float %135, 0x3FF7154760000000, !dbg !26
  %137 = tail call float @llvm.nvvm.ex2.approx.f(float %136), !dbg !26
  %138 = fadd float %137, 1.000000e+00, !dbg !27
  %139 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %138), !dbg !28
  %140 = fmul float %139, %131, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %141 = bitcast float %140 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %141, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %142 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %143 = fmul <2 x float> %142, %134, !dbg !30
  %144 = fadd <2 x float> %128, %143, !dbg !34
  %145 = and i32 %9, 1, !dbg !11
  %146 = lshr i32 %9, 5, !dbg !11
  %147 = and i32 %9, 31, !dbg !11
  %148 = or disjoint i32 %8, %145, !dbg !12
  %149 = icmp slt i32 %148, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %shift = shufflevector <2 x float> %144, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %150 = fadd <2 x float> %144, %shift, !dbg !37
  %151 = extractelement <2 x float> %150, i64 0, !dbg !37
  %152 = select i1 %12, float %151, float 0.000000e+00, !dbg !37
  %153 = bitcast float %152 to i32, !dbg !35
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = fadd float %152, %155, !dbg !37
  %157 = bitcast float %156 to i32, !dbg !35
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = fadd float %156, %159, !dbg !37
  %161 = bitcast float %160 to i32, !dbg !35
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = fadd float %160, %163, !dbg !37
  %165 = bitcast float %164 to i32, !dbg !35
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !35
  %167 = bitcast i32 %166 to float, !dbg !35
  %168 = fadd float %164, %167, !dbg !37
  %169 = bitcast float %168 to i32, !dbg !35
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !35
  %171 = bitcast i32 %170 to float, !dbg !35
  %172 = fadd float %168, %171, !dbg !37
  %173 = and i32 %146, 7, !dbg !35
  %174 = icmp eq i32 %147, 0, !dbg !35
  %175 = shl nuw nsw i32 %.lobit, 3, !dbg !35
  %176 = or disjoint i32 %175, %173, !dbg !35
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !35
  %178 = bitcast float %172 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 %174) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %179 = icmp slt i32 %9, 16, !dbg !35
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #4, !dbg !35
  %182 = bitcast i32 %181 to float, !dbg !35
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !35
  %184 = bitcast i32 %183 to float, !dbg !35
  %185 = fadd float %182, %184, !dbg !37
  %186 = bitcast float %185 to i32, !dbg !35
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 2, i32 31), !dbg !35
  %188 = bitcast i32 %187 to float, !dbg !35
  %189 = fadd float %185, %188, !dbg !37
  %190 = bitcast float %189 to i32, !dbg !35
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !35
  %192 = bitcast i32 %191 to float, !dbg !35
  %193 = fadd float %189, %192, !dbg !37
  %194 = and i32 %9, 7, !dbg !35
  %195 = icmp eq i32 %194, 0, !dbg !35
  %196 = and i1 %179, %195, !dbg !35
  %197 = bitcast float %193 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %197, i1 %196) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !35
  %199 = load i32, ptr addrspace(3) %198, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %200 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !39
  %201 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %202 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %145, !dbg !39
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !39
  %204 = sext i32 %148 to i64, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !40
  %206 = and i32 %9, 510, !dbg !41
  %207 = icmp eq i32 %206, 0, !dbg !41
  %208 = and i1 %207, %149, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %205, i1 %208) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 31, column: 31, scope: !6)
!32 = !DILocation(line: 37, column: 41, scope: !6)
!33 = !DILocation(line: 37, column: 113, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 27, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!39 = !DILocation(line: 48, column: 30, scope: !6)
!40 = !DILocation(line: 49, column: 25, scope: !6)
!41 = !DILocation(line: 49, column: 37, scope: !6)
!42 = !DILocation(line: 49, column: 4, scope: !6)
