; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 128, !dbg !11
  %.lobit = lshr exact i32 %19, 7, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 3600, !dbg !13
  %23 = icmp slt i32 %17, 3600, !dbg !13
  %24 = shl i32 %18, 3, !dbg !14
  %25 = and i32 %24, 1016, !dbg !14
  %26 = shl i32 %18, 2, !dbg !14
  %27 = mul i32 %21, 3072, !dbg !15
  %28 = or disjoint i32 %27, %25
  %29 = sext i32 %28 to i64, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %22) #5, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !17
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !17
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !17
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %48 = fpext bfloat %40 to float, !dbg !18
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = select i1 %22, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %22, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %22, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %22, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %22, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %22, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %22, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %22, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %65 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %97 = add i32 %28, %96, !dbg !22
  %98 = sext i32 %97 to i64, !dbg !16
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !16
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %99, i1 %22) #5, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !17
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !17
  %103 = extractelement <2 x bfloat> %102, i64 1, !dbg !17
  %104 = fpext bfloat %103 to float, !dbg !18
  %105 = extractelement <2 x bfloat> %102, i64 0, !dbg !17
  %106 = fpext bfloat %105 to float, !dbg !18
  %107 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !17
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !17
  %109 = extractelement <2 x bfloat> %108, i64 1, !dbg !17
  %110 = fpext bfloat %109 to float, !dbg !18
  %111 = extractelement <2 x bfloat> %108, i64 0, !dbg !17
  %112 = fpext bfloat %111 to float, !dbg !18
  %113 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !17
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !17
  %115 = extractelement <2 x bfloat> %114, i64 1, !dbg !17
  %116 = fpext bfloat %115 to float, !dbg !18
  %117 = extractelement <2 x bfloat> %114, i64 0, !dbg !17
  %118 = fpext bfloat %117 to float, !dbg !18
  %119 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !17
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !17
  %121 = extractelement <2 x bfloat> %120, i64 1, !dbg !17
  %122 = fpext bfloat %121 to float, !dbg !18
  %123 = extractelement <2 x bfloat> %120, i64 0, !dbg !17
  %124 = fpext bfloat %123 to float, !dbg !18
  %125 = fsub float %124, %88, !dbg !23
  %126 = fsub float %122, %89, !dbg !23
  %127 = fsub float %118, %90, !dbg !23
  %128 = fsub float %116, %91, !dbg !23
  %129 = fsub float %112, %92, !dbg !23
  %130 = fsub float %110, %93, !dbg !23
  %131 = fsub float %106, %94, !dbg !23
  %132 = fsub float %104, %95, !dbg !23
  %133 = fadd float %72, 1.000000e+00, !dbg !27
  %134 = fadd float %73, 1.000000e+00, !dbg !27
  %135 = fadd float %74, 1.000000e+00, !dbg !27
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !28
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !28
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !28
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = fadd float %88, %141, !dbg !29
  %150 = fadd float %89, %142, !dbg !29
  %151 = fadd float %90, %143, !dbg !29
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fsub float %124, %149, !dbg !30
  %158 = fsub float %122, %150, !dbg !30
  %159 = fsub float %118, %151, !dbg !30
  %160 = fsub float %116, %152, !dbg !30
  %161 = fsub float %112, %153, !dbg !30
  %162 = fsub float %110, %154, !dbg !30
  %163 = fsub float %106, %155, !dbg !30
  %164 = fsub float %104, %156, !dbg !30
  %165 = fmul float %125, %157, !dbg !31
  %166 = fmul float %126, %158, !dbg !31
  %167 = fmul float %127, %159, !dbg !31
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fadd float %80, %165, !dbg !32
  %174 = fadd float %81, %166, !dbg !32
  %175 = fadd float %82, %167, !dbg !32
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = select i1 %22, float %149, float %88, !dbg !19
  %182 = select i1 %22, float %150, float %89, !dbg !19
  %183 = select i1 %22, float %151, float %90, !dbg !19
  %184 = select i1 %22, float %152, float %91, !dbg !19
  %185 = select i1 %22, float %153, float %92, !dbg !19
  %186 = select i1 %22, float %154, float %93, !dbg !19
  %187 = select i1 %22, float %155, float %94, !dbg !19
  %188 = select i1 %22, float %156, float %95, !dbg !19
  %189 = select i1 %22, float %173, float %80, !dbg !33
  %190 = select i1 %22, float %174, float %81, !dbg !33
  %191 = select i1 %22, float %175, float %82, !dbg !33
  %192 = select i1 %22, float %176, float %83, !dbg !33
  %193 = select i1 %22, float %177, float %84, !dbg !33
  %194 = select i1 %22, float %178, float %85, !dbg !33
  %195 = select i1 %22, float %179, float %86, !dbg !33
  %196 = select i1 %22, float %180, float %87, !dbg !33
  %197 = select i1 %22, float %133, float %72, !dbg !20
  %198 = select i1 %22, float %134, float %73, !dbg !20
  %199 = select i1 %22, float %135, float %74, !dbg !20
  %200 = select i1 %22, float %136, float %75, !dbg !20
  %201 = select i1 %22, float %137, float %76, !dbg !20
  %202 = select i1 %22, float %138, float %77, !dbg !20
  %203 = select i1 %22, float %139, float %78, !dbg !20
  %204 = select i1 %22, float %140, float %79, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !21
  %205 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !21
  br i1 %205, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %206 = fadd float %189, %190, !dbg !11
  %207 = lshr i32 %18, 5, !dbg !11
  %208 = and i32 %18, 1, !dbg !11
  %209 = or disjoint i32 %17, %208, !dbg !12
  %210 = icmp slt i32 %209, 3600, !dbg !13
  %211 = and i32 %26, 1020, !dbg !14
  %212 = fsub float %182, %181, !dbg !36
  %213 = fadd float %197, %198, !dbg !39
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !40
  %215 = tail call float @llvm.nvvm.div.full(float %198, float %213), !dbg !41
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !42
  %217 = fmul float %212, %216, !dbg !43
  %218 = fadd float %181, %217, !dbg !44
  %219 = fmul float %212, %212, !dbg !45
  %220 = fmul float %219, %197, !dbg !46
  %221 = fmul float %220, %216, !dbg !47
  %222 = fadd float %206, %221, !dbg !48
  %223 = fsub float %183, %218, !dbg !36
  %224 = fadd float %199, %213, !dbg !39
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !40
  %226 = tail call float @llvm.nvvm.div.full(float %199, float %224), !dbg !41
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !42
  %228 = fmul float %227, %223, !dbg !43
  %229 = fadd float %218, %228, !dbg !44
  %230 = fadd float %191, %222, !dbg !49
  %231 = fmul float %223, %223, !dbg !45
  %232 = fmul float %213, %231, !dbg !46
  %233 = fmul float %227, %232, !dbg !47
  %234 = fadd float %230, %233, !dbg !48
  %235 = fsub float %184, %229, !dbg !36
  %236 = fadd float %200, %224, !dbg !39
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !40
  %238 = tail call float @llvm.nvvm.div.full(float %200, float %236), !dbg !41
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !42
  %240 = fmul float %239, %235, !dbg !43
  %241 = fadd float %229, %240, !dbg !44
  %242 = fadd float %192, %234, !dbg !49
  %243 = fmul float %235, %235, !dbg !45
  %244 = fmul float %224, %243, !dbg !46
  %245 = fmul float %239, %244, !dbg !47
  %246 = fadd float %242, %245, !dbg !48
  %247 = fsub float %185, %241, !dbg !36
  %248 = fadd float %201, %236, !dbg !39
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !40
  %250 = tail call float @llvm.nvvm.div.full(float %201, float %248), !dbg !41
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !42
  %252 = fmul float %251, %247, !dbg !43
  %253 = fadd float %241, %252, !dbg !44
  %254 = fadd float %193, %246, !dbg !49
  %255 = fmul float %247, %247, !dbg !45
  %256 = fmul float %236, %255, !dbg !46
  %257 = fmul float %251, %256, !dbg !47
  %258 = fadd float %254, %257, !dbg !48
  %259 = fsub float %186, %253, !dbg !36
  %260 = fadd float %202, %248, !dbg !39
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !40
  %262 = tail call float @llvm.nvvm.div.full(float %202, float %260), !dbg !41
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !42
  %264 = fmul float %263, %259, !dbg !43
  %265 = fadd float %253, %264, !dbg !44
  %266 = fadd float %194, %258, !dbg !49
  %267 = fmul float %259, %259, !dbg !45
  %268 = fmul float %248, %267, !dbg !46
  %269 = fmul float %263, %268, !dbg !47
  %270 = fadd float %266, %269, !dbg !48
  %271 = fsub float %187, %265, !dbg !36
  %272 = fadd float %203, %260, !dbg !39
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !40
  %274 = tail call float @llvm.nvvm.div.full(float %203, float %272), !dbg !41
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !42
  %276 = fmul float %275, %271, !dbg !43
  %277 = fadd float %265, %276, !dbg !44
  %278 = fadd float %195, %270, !dbg !49
  %279 = fmul float %271, %271, !dbg !45
  %280 = fmul float %260, %279, !dbg !46
  %281 = fmul float %275, %280, !dbg !47
  %282 = fadd float %278, %281, !dbg !48
  %283 = fsub float %188, %277, !dbg !36
  %284 = fadd float %204, %272, !dbg !39
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !40
  %286 = tail call float @llvm.nvvm.div.full(float %204, float %284), !dbg !41
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !42
  %288 = fmul float %287, %283, !dbg !43
  %289 = fadd float %277, %288, !dbg !44
  %290 = fadd float %196, %282, !dbg !49
  %291 = fmul float %283, %283, !dbg !45
  %292 = fmul float %272, %291, !dbg !46
  %293 = fmul float %287, %292, !dbg !47
  %294 = fadd float %290, %293, !dbg !48
  %295 = bitcast float %289 to i32, !dbg !50
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !50
  %297 = bitcast i32 %296 to float, !dbg !50
  %298 = bitcast float %294 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %284 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = fsub float %297, %289, !dbg !36
  %305 = fadd float %284, %303, !dbg !39
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !40
  %307 = tail call float @llvm.nvvm.div.full(float %303, float %305), !dbg !41
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !42
  %309 = fmul float %308, %304, !dbg !43
  %310 = fadd float %289, %309, !dbg !44
  %311 = fadd float %294, %300, !dbg !49
  %312 = fmul float %304, %304, !dbg !45
  %313 = fmul float %284, %312, !dbg !46
  %314 = fmul float %308, %313, !dbg !47
  %315 = fadd float %311, %314, !dbg !48
  %316 = bitcast float %310 to i32, !dbg !50
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !50
  %318 = bitcast i32 %317 to float, !dbg !50
  %319 = bitcast float %315 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %305 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = fsub float %318, %310, !dbg !36
  %326 = fadd float %305, %324, !dbg !39
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !40
  %328 = tail call float @llvm.nvvm.div.full(float %324, float %326), !dbg !41
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !42
  %330 = fmul float %329, %325, !dbg !43
  %331 = fadd float %310, %330, !dbg !44
  %332 = fadd float %315, %321, !dbg !49
  %333 = fmul float %325, %325, !dbg !45
  %334 = fmul float %305, %333, !dbg !46
  %335 = fmul float %329, %334, !dbg !47
  %336 = fadd float %332, %335, !dbg !48
  %337 = bitcast float %331 to i32, !dbg !50
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !50
  %339 = bitcast i32 %338 to float, !dbg !50
  %340 = bitcast float %336 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %326 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = fsub float %339, %331, !dbg !36
  %347 = fadd float %326, %345, !dbg !39
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !40
  %349 = tail call float @llvm.nvvm.div.full(float %345, float %347), !dbg !41
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !42
  %351 = fmul float %350, %346, !dbg !43
  %352 = fadd float %331, %351, !dbg !44
  %353 = fadd float %336, %342, !dbg !49
  %354 = fmul float %346, %346, !dbg !45
  %355 = fmul float %326, %354, !dbg !46
  %356 = fmul float %350, %355, !dbg !47
  %357 = fadd float %353, %356, !dbg !48
  %358 = bitcast float %352 to i32, !dbg !50
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !50
  %360 = bitcast i32 %359 to float, !dbg !50
  %361 = bitcast float %357 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %347 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = fsub float %360, %352, !dbg !36
  %368 = fadd float %347, %366, !dbg !39
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !40
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !41
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !42
  %372 = fmul float %371, %367, !dbg !43
  %373 = fadd float %352, %372, !dbg !44
  %374 = fadd float %357, %363, !dbg !49
  %375 = fmul float %367, %367, !dbg !45
  %376 = fmul float %347, %375, !dbg !46
  %377 = fmul float %371, %376, !dbg !47
  %378 = fadd float %374, %377, !dbg !48
  %379 = bitcast float %373 to i32, !dbg !50
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !50
  %381 = bitcast i32 %380 to float, !dbg !50
  %382 = bitcast float %378 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %368 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = fsub float %381, %373, !dbg !36
  %389 = fadd float %368, %387, !dbg !39
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !40
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !41
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !42
  %393 = fmul float %392, %388, !dbg !43
  %394 = fadd float %373, %393, !dbg !44
  %395 = fadd float %378, %384, !dbg !49
  %396 = fmul float %388, %388, !dbg !45
  %397 = fmul float %368, %396, !dbg !46
  %398 = fmul float %392, %397, !dbg !47
  %399 = fadd float %395, %398, !dbg !48
  %400 = and i32 %207, 3, !dbg !50
  %401 = icmp eq i32 %20, 0, !dbg !50
  %402 = lshr exact i32 %19, 5, !dbg !50
  %403 = or disjoint i32 %402, %400, !dbg !50
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i32 %403, !dbg !50
  %405 = bitcast float %394 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 %401) #5, !dbg !50
  %406 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %403, !dbg !50
  %407 = bitcast float %399 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 %401) #5, !dbg !50
  %408 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %403, !dbg !50
  %409 = bitcast float %389 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 %401) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %410 = icmp slt i32 %18, 8, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !50
  %412 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %410) #5, !dbg !50
  %413 = bitcast i32 %412 to float, !dbg !50
  %414 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !50
  %415 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %410) #5, !dbg !50
  %416 = bitcast i32 %415 to float, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !50
  %418 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %410) #5, !dbg !50
  %419 = bitcast i32 %418 to float, !dbg !50
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 2, i32 31), !dbg !50
  %421 = bitcast i32 %420 to float, !dbg !50
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 2, i32 31), !dbg !50
  %423 = bitcast i32 %422 to float, !dbg !50
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 2, i32 31), !dbg !50
  %425 = bitcast i32 %424 to float, !dbg !50
  %426 = fsub float %421, %413, !dbg !36
  %427 = fadd float %419, %425, !dbg !39
  %428 = fcmp oeq float %427, 0.000000e+00, !dbg !40
  %429 = tail call float @llvm.nvvm.div.full(float %425, float %427), !dbg !41
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !42
  %431 = fmul float %426, %430, !dbg !43
  %432 = fadd float %431, %413, !dbg !44
  %433 = fadd float %416, %423, !dbg !49
  %434 = fmul float %426, %426, !dbg !45
  %435 = fmul float %434, %419, !dbg !46
  %436 = fmul float %435, %430, !dbg !47
  %437 = fadd float %433, %436, !dbg !48
  %438 = bitcast float %432 to i32, !dbg !50
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 1, i32 31), !dbg !50
  %440 = bitcast i32 %439 to float, !dbg !50
  %441 = bitcast float %437 to i32, !dbg !50
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !50
  %443 = bitcast i32 %442 to float, !dbg !50
  %444 = bitcast float %427 to i32, !dbg !50
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !50
  %446 = bitcast i32 %445 to float, !dbg !50
  %447 = fsub float %440, %432, !dbg !36
  %448 = fadd float %427, %446, !dbg !39
  %449 = fcmp oeq float %448, 0.000000e+00, !dbg !40
  %450 = tail call float @llvm.nvvm.div.full(float %446, float %448), !dbg !41
  %451 = select i1 %449, float 0.000000e+00, float %450, !dbg !42
  %452 = fmul float %447, %451, !dbg !43
  %453 = fadd float %432, %452, !dbg !44
  %454 = fadd float %437, %443, !dbg !49
  %455 = fmul float %447, %447, !dbg !45
  %456 = fmul float %427, %455, !dbg !46
  %457 = fmul float %451, %456, !dbg !47
  %458 = fadd float %454, %457, !dbg !48
  %459 = and i32 %18, 3, !dbg !50
  %460 = icmp eq i32 %459, 0, !dbg !50
  %461 = and i1 %410, %460, !dbg !50
  %462 = bitcast float %453 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %462, i1 %461) #5, !dbg !50
  %463 = bitcast float %458 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %463, i1 %461) #5, !dbg !50
  %464 = bitcast float %448 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %464, i1 %461) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !50
  %466 = load float, ptr addrspace(3) %465, align 16, !dbg !50
  %467 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %402, !dbg !50
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !50
  %469 = tail call float @llvm.nvvm.div.full(float %468, float 3.072000e+03), !dbg !51
  %470 = fadd float %469, 0x3EB0C6F7A0000000, !dbg !52
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i59 = icmp eq i32 %478, 0, !dbg !53
  br i1 %.not.i59, label %481, label %479, !dbg !53

479:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %480 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %470), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

481:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %482 = tail call float @llvm.nvvm.rsqrt.approx.f(float %470), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

__nv_rsqrtf.exit61:                               ; preds = %479, %481
  %.0.i60 = phi float [ %480, %479 ], [ %482, %481 ], !dbg !53
  %483 = and i32 %24, 2040
  %484 = lshr i32 %483, 10
  %485 = shl nuw nsw i32 %484, 2
  %486 = or disjoint i32 %485, %483
  %487 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %486
  %488 = or disjoint i32 %483, 4
  %489 = lshr i32 %24, 8
  %490 = and i32 %489, 4
  %491 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %490
  %492 = getelementptr inbounds nuw float, ptr addrspace(3) %491, i32 %488
  %493 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211
  %494 = or disjoint i32 %211, 1024
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %494
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %211
  %gep72 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %494
  %.idx = shl nuw nsw i32 %484, 4
  %496 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %496, i32 %483
  %498 = zext nneg i32 %211 to i64, !dbg !54
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %493, i32 8
  %500 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !55
  %501 = shufflevector <2 x i1> %500, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %502 = insertelement <8 x i1> poison, i1 %23, i64 0, !dbg !56
  %503 = shufflevector <8 x i1> %502, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !56
  %504 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !55
  %505 = shufflevector <4 x i1> %504, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 4
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 8
  %508 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 12
  br label %509, !dbg !54

509:                                              ; preds = %__nv_rsqrtf.exit61, %509
  %indvars.iv112 = phi i64 [ 0, %__nv_rsqrtf.exit61 ], [ %indvars.iv.next113, %509 ]
  %510 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %638, %509 ]
  %511 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %639, %509 ]
  %512 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %637, %509 ]
  %513 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit61 ], [ %658, %509 ]
  %514 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %651, %509 ]
  %515 = or disjoint i64 %indvars.iv112, %498, !dbg !57
  %516 = trunc nuw nsw i64 %indvars.iv112 to i32, !dbg !58
  %517 = add i32 %28, %516, !dbg !58
  %518 = sext i32 %517 to i64, !dbg !59
  %519 = getelementptr bfloat, ptr addrspace(1) %0, i64 %518, !dbg !59
  %520 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %519, i1 %22) #5, !dbg !60
  %521 = extractvalue { i32, i32, i32, i32 } %520, 0, !dbg !60
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !60
  %523 = extractvalue { i32, i32, i32, i32 } %520, 1, !dbg !60
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !60
  %525 = extractvalue { i32, i32, i32, i32 } %520, 2, !dbg !60
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !60
  %527 = extractvalue { i32, i32, i32, i32 } %520, 3, !dbg !60
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !60
  %529 = extractelement <2 x bfloat> %522, i64 0, !dbg !60
  %530 = extractelement <2 x bfloat> %522, i64 1, !dbg !60
  %531 = extractelement <2 x bfloat> %524, i64 0, !dbg !60
  %532 = extractelement <2 x bfloat> %524, i64 1, !dbg !60
  %533 = extractelement <2 x bfloat> %526, i64 0, !dbg !60
  %534 = extractelement <2 x bfloat> %526, i64 1, !dbg !60
  %535 = extractelement <2 x bfloat> %528, i64 0, !dbg !60
  %536 = extractelement <2 x bfloat> %528, i64 1, !dbg !60
  %537 = fpext bfloat %529 to float, !dbg !61
  %538 = fpext bfloat %530 to float, !dbg !61
  %539 = fpext bfloat %531 to float, !dbg !61
  %540 = fpext bfloat %532 to float, !dbg !61
  %541 = fpext bfloat %533 to float, !dbg !61
  %542 = fpext bfloat %534 to float, !dbg !61
  %543 = fpext bfloat %535 to float, !dbg !61
  %544 = fpext bfloat %536 to float, !dbg !61
  %545 = add nuw nsw i64 %515, 3072, !dbg !62
  %546 = getelementptr float, ptr addrspace(1) %1, i64 %545, !dbg !63
  %547 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %546, i1 true) #5, !dbg !64
  %548 = extractvalue { i32, i32, i32, i32 } %547, 0, !dbg !64
  %549 = extractvalue { i32, i32, i32, i32 } %547, 1, !dbg !64
  %550 = extractvalue { i32, i32, i32, i32 } %547, 2, !dbg !64
  %551 = extractvalue { i32, i32, i32, i32 } %547, 3, !dbg !64
  %552 = getelementptr bfloat, ptr addrspace(1) %2, i64 %545, !dbg !65
  %553 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %552, i1 true) #5, !dbg !66
  %554 = extractvalue { i32, i32 } %553, 0, !dbg !66
  %555 = bitcast i32 %554 to <2 x bfloat>, !dbg !66
  %556 = extractvalue { i32, i32 } %553, 1, !dbg !66
  %557 = bitcast i32 %556 to <2 x bfloat>, !dbg !66
  %558 = getelementptr float, ptr addrspace(1) %1, i64 %515, !dbg !67
  %559 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %558, i1 true) #5, !dbg !68
  %560 = extractvalue { i32, i32, i32, i32 } %559, 0, !dbg !68
  %561 = extractvalue { i32, i32, i32, i32 } %559, 1, !dbg !68
  %562 = extractvalue { i32, i32, i32, i32 } %559, 2, !dbg !68
  %563 = extractvalue { i32, i32, i32, i32 } %559, 3, !dbg !68
  %564 = getelementptr bfloat, ptr addrspace(1) %2, i64 %515, !dbg !69
  %565 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %564, i1 true) #5, !dbg !70
  %566 = extractvalue { i32, i32 } %565, 0, !dbg !70
  %567 = bitcast i32 %566 to <2 x bfloat>, !dbg !70
  %568 = extractvalue { i32, i32 } %565, 1, !dbg !70
  %569 = bitcast i32 %568 to <2 x bfloat>, !dbg !70
  %570 = fsub float %537, %466, !dbg !71
  %571 = fsub float %538, %466, !dbg !71
  %572 = fsub float %539, %466, !dbg !71
  %573 = fsub float %540, %466, !dbg !71
  %574 = fsub float %541, %466, !dbg !71
  %575 = fsub float %542, %466, !dbg !71
  %576 = fsub float %543, %466, !dbg !71
  %577 = fsub float %544, %466, !dbg !71
  %578 = fmul float %.0.i60, %570, !dbg !72
  %579 = fmul float %.0.i60, %571, !dbg !72
  %580 = fmul float %.0.i60, %572, !dbg !72
  %581 = fmul float %.0.i60, %573, !dbg !72
  %582 = fmul float %.0.i60, %574, !dbg !72
  %583 = fmul float %.0.i60, %575, !dbg !72
  %584 = fmul float %.0.i60, %576, !dbg !72
  %585 = fmul float %.0.i60, %577, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %586 = bitcast float %578 to i32, !dbg !72
  %587 = bitcast float %579 to i32, !dbg !72
  %588 = bitcast float %580 to i32, !dbg !72
  %589 = bitcast float %581 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %487, i32 %586, i32 %587, i32 %588, i32 %589, i1 true) #5, !dbg !72
  %590 = bitcast float %582 to i32, !dbg !72
  %591 = bitcast float %583 to i32, !dbg !72
  %592 = bitcast float %584 to i32, !dbg !72
  %593 = bitcast float %585 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %492, i32 %590, i32 %591, i32 %592, i32 %593, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %594 = insertelement <2 x i32> poison, i32 %550, i64 0, !dbg !64
  %595 = insertelement <2 x i32> %594, i32 %551, i64 1, !dbg !64
  %596 = bitcast <2 x i32> %595 to <2 x float>, !dbg !64
  %597 = fpext <2 x bfloat> %557 to <2 x float>, !dbg !73
  %598 = insertelement <2 x i32> poison, i32 %562, i64 0, !dbg !68
  %599 = insertelement <2 x i32> %598, i32 %563, i64 1, !dbg !68
  %600 = bitcast <2 x i32> %599 to <2 x float>, !dbg !68
  %601 = fpext <2 x bfloat> %569 to <2 x float>, !dbg !74
  %602 = load <2 x float>, ptr addrspace(3) %499, align 8, !dbg !72
  %603 = fadd <2 x float> %596, %597, !dbg !75
  %604 = fadd <2 x float> %603, splat (float 1.000000e+00), !dbg !76
  %605 = fmul <2 x float> %604, %602, !dbg !77
  %606 = fadd <2 x float> %600, %601, !dbg !78
  %607 = fadd <2 x float> %606, %605, !dbg !79
  %608 = extractelement <2 x float> %607, i64 0, !dbg !80
  %609 = fcmp olt float %510, %608, !dbg !81
  %610 = extractelement <2 x float> %607, i64 1, !dbg !80
  %611 = fcmp olt float %511, %610, !dbg !81
  %612 = fcmp uno <2 x float> %512, zeroinitializer, !dbg !83
  %613 = fcmp uno float %510, 0.000000e+00, !dbg !83
  %614 = fcmp uno float %511, 0.000000e+00, !dbg !83
  %615 = fcmp uno <4 x float> %514, zeroinitializer, !dbg !83
  %616 = or i1 %613, %609, !dbg !84
  %617 = or i1 %614, %611, !dbg !84
  %618 = insertelement <2 x i32> poison, i32 %548, i64 0, !dbg !64
  %619 = insertelement <2 x i32> %618, i32 %549, i64 1, !dbg !64
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !64
  %621 = fpext <2 x bfloat> %555 to <2 x float>, !dbg !73
  %622 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !68
  %623 = insertelement <2 x i32> %622, i32 %561, i64 1, !dbg !68
  %624 = bitcast <2 x i32> %623 to <2 x float>, !dbg !68
  %625 = fpext <2 x bfloat> %567 to <2 x float>, !dbg !74
  %626 = load <2 x float>, ptr addrspace(3) %493, align 16, !dbg !72
  %627 = fadd <2 x float> %620, %621, !dbg !75
  %628 = fadd <2 x float> %627, splat (float 1.000000e+00), !dbg !76
  %629 = fmul <2 x float> %628, %626, !dbg !77
  %630 = fadd <2 x float> %624, %625, !dbg !78
  %631 = fadd <2 x float> %630, %629, !dbg !79
  %632 = fcmp olt <2 x float> %512, %631, !dbg !81
  %633 = or <2 x i1> %612, %632, !dbg !84
  %634 = select <2 x i1> %633, <2 x float> %512, <2 x float> %631, !dbg !85
  %635 = select i1 %616, float %510, float %608, !dbg !85
  %636 = select i1 %617, float %511, float %610, !dbg !85
  %637 = select <2 x i1> %501, <2 x float> %634, <2 x float> %512, !dbg !55
  %638 = select i1 %23, float %635, float %510, !dbg !55
  %639 = select i1 %23, float %636, float %511, !dbg !55
  %640 = extractelement <2 x float> %631, i64 0, !dbg !80
  %641 = extractelement <2 x float> %631, i64 1, !dbg !80
  %642 = fcmp uno <8 x float> %513, zeroinitializer, !dbg !86
  %643 = load <4 x float>, ptr addrspace(3) %gep, align 16, !dbg !72
  %644 = shufflevector <2 x float> %628, <2 x float> %604, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !77
  %645 = fmul <4 x float> %644, %643, !dbg !77
  %646 = shufflevector <2 x float> %630, <2 x float> %606, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %647 = fadd <4 x float> %646, %645, !dbg !79
  %648 = fcmp olt <4 x float> %514, %647, !dbg !81
  %649 = or <4 x i1> %615, %648, !dbg !84
  %650 = select <4 x i1> %649, <4 x float> %514, <4 x float> %647, !dbg !85
  %651 = select <4 x i1> %505, <4 x float> %650, <4 x float> %514, !dbg !55
  %652 = shufflevector <2 x float> %631, <2 x float> %607, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %653 = shufflevector <4 x float> %647, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %654 = shufflevector <8 x float> %652, <8 x float> %653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !88
  %655 = fcmp ogt <8 x float> %513, %654, !dbg !88
  %656 = or <8 x i1> %642, %655, !dbg !89
  %657 = select <8 x i1> %656, <8 x float> %513, <8 x float> %654, !dbg !90
  %658 = select <8 x i1> %503, <8 x float> %657, <8 x float> %513, !dbg !56
  %659 = getelementptr bfloat, ptr addrspace(1) %3, i64 %518, !dbg !91
  %660 = fptrunc float %640 to bfloat, !dbg !80
  %661 = fptrunc float %641 to bfloat, !dbg !80
  %662 = fptrunc float %608 to bfloat, !dbg !80
  %663 = fptrunc float %610 to bfloat, !dbg !80
  %664 = extractelement <4 x float> %647, i64 0, !dbg !80
  %665 = fptrunc float %664 to bfloat, !dbg !80
  %666 = extractelement <4 x float> %647, i64 1, !dbg !80
  %667 = fptrunc float %666 to bfloat, !dbg !80
  %668 = extractelement <4 x float> %647, i64 2, !dbg !80
  %669 = fptrunc float %668 to bfloat, !dbg !80
  %670 = extractelement <4 x float> %647, i64 3, !dbg !80
  %671 = fptrunc float %670 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %672 = bitcast bfloat %660 to i16, !dbg !80
  %673 = bitcast bfloat %661 to i16, !dbg !80
  %674 = bitcast bfloat %662 to i16, !dbg !80
  %675 = bitcast bfloat %663 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %495, i16 %672, i16 %673, i16 %674, i16 %675, i1 true) #5, !dbg !80
  %676 = bitcast bfloat %665 to i16, !dbg !80
  %677 = bitcast bfloat %667 to i16, !dbg !80
  %678 = bitcast bfloat %669 to i16, !dbg !80
  %679 = bitcast bfloat %671 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %gep72, i16 %676, i16 %677, i16 %678, i16 %679, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.extract = load i32, ptr addrspace(3) %497, align 16, !dbg !80
  %.extract63 = load i32, ptr addrspace(3) %506, align 4, !dbg !80
  %.extract65 = load i32, ptr addrspace(3) %507, align 8, !dbg !80
  %.extract67 = load i32, ptr addrspace(3) %508, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %659, i1 %22) #5, !dbg !80
  %indvars.iv.next113 = add nuw nsw i64 %indvars.iv112, 1024, !dbg !54
  %680 = icmp samesign ult i64 %indvars.iv112, 2048, !dbg !54
  br i1 %680, label %509, label %681, !dbg !54

681:                                              ; preds = %509
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %682 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %637, <2 x i32> <i32 0, i32 2>, !dbg !94
  %683 = fcmp olt <2 x float> %682, %637, !dbg !94
  %684 = fcmp uno <2 x float> %682, %637, !dbg !94
  %shift = shufflevector <2 x i1> %683, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !95
  %685 = or <2 x i1> %shift, %684, !dbg !95
  %686 = extractelement <2 x i1> %685, i64 0, !dbg !95
  %687 = extractelement <2 x float> %637, i64 0, !dbg !96
  %688 = extractelement <2 x float> %637, i64 1, !dbg !96
  %689 = select i1 %686, float %687, float %688, !dbg !96
  %690 = fcmp olt float %689, %638, !dbg !94
  %691 = fcmp uno float %689, 0.000000e+00, !dbg !97
  %692 = or i1 %690, %691, !dbg !95
  %693 = select i1 %692, float %689, float %638, !dbg !96
  %694 = fcmp olt float %693, %639, !dbg !94
  %695 = fcmp uno float %693, 0.000000e+00, !dbg !97
  %696 = or i1 %694, %695, !dbg !95
  %697 = select i1 %696, float %693, float %639, !dbg !96
  %698 = extractelement <4 x float> %651, i64 0, !dbg !94
  %699 = extractelement <4 x float> %651, i64 1, !dbg !94
  %700 = fcmp olt float %698, %699, !dbg !94
  %701 = fcmp uno float %698, 0.000000e+00, !dbg !97
  %702 = or i1 %700, %701, !dbg !95
  %703 = select i1 %702, float %698, float %699, !dbg !96
  %704 = extractelement <4 x float> %651, i64 2, !dbg !94
  %705 = fcmp olt float %703, %704, !dbg !94
  %706 = fcmp uno float %703, 0.000000e+00, !dbg !97
  %707 = or i1 %705, %706, !dbg !95
  %708 = select i1 %707, float %703, float %704, !dbg !96
  %709 = extractelement <4 x float> %651, i64 3, !dbg !94
  %710 = fcmp olt float %708, %709, !dbg !94
  %711 = fcmp uno float %708, 0.000000e+00, !dbg !97
  %712 = or i1 %710, %711, !dbg !95
  %713 = select i1 %712, float %708, float %709, !dbg !96
  %714 = bitcast float %697 to i32, !dbg !92
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 16, i32 31), !dbg !92
  %716 = bitcast i32 %715 to float, !dbg !92
  %717 = fcmp olt float %697, %716, !dbg !94
  %718 = fcmp uno float %697, 0.000000e+00, !dbg !97
  %719 = or i1 %718, %717, !dbg !95
  %720 = select i1 %719, float %697, float %716, !dbg !96
  %721 = bitcast float %720 to i32, !dbg !92
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 8, i32 31), !dbg !92
  %723 = bitcast i32 %722 to float, !dbg !92
  %724 = fcmp olt float %720, %723, !dbg !94
  %725 = fcmp uno float %720, 0.000000e+00, !dbg !97
  %726 = or i1 %724, %725, !dbg !95
  %727 = select i1 %726, float %720, float %723, !dbg !96
  %728 = bitcast float %727 to i32, !dbg !92
  %729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %728, i32 4, i32 31), !dbg !92
  %730 = bitcast i32 %729 to float, !dbg !92
  %731 = fcmp olt float %727, %730, !dbg !94
  %732 = fcmp uno float %727, 0.000000e+00, !dbg !97
  %733 = or i1 %731, %732, !dbg !95
  %734 = select i1 %733, float %727, float %730, !dbg !96
  %735 = bitcast float %734 to i32, !dbg !92
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 2, i32 31), !dbg !92
  %737 = bitcast i32 %736 to float, !dbg !92
  %738 = fcmp olt float %734, %737, !dbg !94
  %739 = fcmp uno float %734, 0.000000e+00, !dbg !97
  %740 = or i1 %738, %739, !dbg !95
  %741 = select i1 %740, float %734, float %737, !dbg !96
  %742 = bitcast float %741 to i32, !dbg !92
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 1, i32 31), !dbg !92
  %744 = bitcast i32 %743 to float, !dbg !92
  %745 = fcmp olt float %741, %744, !dbg !94
  %746 = fcmp uno float %741, 0.000000e+00, !dbg !97
  %747 = or i1 %745, %746, !dbg !95
  %748 = bitcast float %713 to i32, !dbg !92
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 16, i32 31), !dbg !92
  %750 = bitcast i32 %749 to float, !dbg !92
  %751 = fcmp olt float %713, %750, !dbg !94
  %752 = fcmp uno float %713, 0.000000e+00, !dbg !97
  %753 = or i1 %752, %751, !dbg !95
  %754 = select i1 %753, float %713, float %750, !dbg !96
  %755 = bitcast float %754 to i32, !dbg !92
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 8, i32 31), !dbg !92
  %757 = bitcast i32 %756 to float, !dbg !92
  %758 = fcmp olt float %754, %757, !dbg !94
  %759 = fcmp uno float %754, 0.000000e+00, !dbg !97
  %760 = or i1 %758, %759, !dbg !95
  %761 = select i1 %760, float %754, float %757, !dbg !96
  %762 = bitcast float %761 to i32, !dbg !92
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 4, i32 31), !dbg !92
  %764 = bitcast i32 %763 to float, !dbg !92
  %765 = fcmp olt float %761, %764, !dbg !94
  %766 = fcmp uno float %761, 0.000000e+00, !dbg !97
  %767 = or i1 %765, %766, !dbg !95
  %768 = select i1 %767, float %761, float %764, !dbg !96
  %769 = bitcast float %768 to i32, !dbg !92
  %770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 2, i32 31), !dbg !92
  %771 = bitcast i32 %770 to float, !dbg !92
  %772 = fcmp olt float %768, %771, !dbg !94
  %773 = fcmp uno float %768, 0.000000e+00, !dbg !97
  %774 = or i1 %772, %773, !dbg !95
  %775 = select i1 %774, float %768, float %771, !dbg !96
  %776 = bitcast float %775 to i32, !dbg !92
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 1, i32 31), !dbg !92
  %778 = bitcast i32 %777 to float, !dbg !92
  %779 = fcmp olt float %775, %778, !dbg !94
  %780 = fcmp uno float %775, 0.000000e+00, !dbg !97
  %781 = or i1 %779, %780, !dbg !95
  %782 = and i32 %207, 7, !dbg !92
  %783 = getelementptr float, ptr addrspace(3) @global_smem, i32 %782, !dbg !92
  %784 = select i1 %747, i32 %742, i32 %743, !dbg !96
  %785 = insertelement <1 x i32> poison, i32 %784, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %783, <1 x i32> %785, i1 %401) #5, !dbg !92
  %786 = or disjoint i32 %782, 8, !dbg !92
  %787 = getelementptr float, ptr addrspace(3) @global_smem, i32 %786, !dbg !92
  %788 = select i1 %781, i32 %776, i32 %777, !dbg !96
  %789 = insertelement <1 x i32> poison, i32 %788, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %789, i1 %401) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %790 = icmp slt i32 %18, 16, !dbg !92
  %791 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %790) #5, !dbg !92
  %792 = bitcast i32 %791 to float, !dbg !92
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %791, i32 4, i32 31), !dbg !92
  %794 = bitcast i32 %793 to float, !dbg !92
  %795 = fcmp olt float %792, %794, !dbg !94
  %796 = fcmp uno float %792, 0.000000e+00, !dbg !97
  %797 = or i1 %796, %795, !dbg !95
  %798 = select i1 %797, float %792, float %794, !dbg !96
  %799 = bitcast float %798 to i32, !dbg !92
  %800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %799, i32 2, i32 31), !dbg !92
  %801 = bitcast i32 %800 to float, !dbg !92
  %802 = fcmp olt float %798, %801, !dbg !94
  %803 = fcmp uno float %798, 0.000000e+00, !dbg !97
  %804 = or i1 %802, %803, !dbg !95
  %805 = select i1 %804, float %798, float %801, !dbg !96
  %806 = bitcast float %805 to i32, !dbg !92
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 1, i32 31), !dbg !92
  %808 = bitcast i32 %807 to float, !dbg !92
  %809 = fcmp olt float %805, %808, !dbg !94
  %810 = fcmp uno float %805, 0.000000e+00, !dbg !97
  %811 = or i1 %809, %810, !dbg !95
  %812 = and i32 %18, 7, !dbg !92
  %813 = icmp eq i32 %812, 0, !dbg !92
  %814 = and i1 %790, %813, !dbg !92
  %815 = select i1 %811, i32 %806, i32 %807, !dbg !96
  %816 = insertelement <1 x i32> poison, i32 %815, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %816, i1 %814) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %817 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %818 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %819 = bitcast float %817 to i32, !dbg !98
  %820 = bitcast float %818 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %819, i32 %820, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %821 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %208, !dbg !98
  %822 = load float, ptr addrspace(3) %821, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %823 = extractelement <8 x float> %658, i64 0, !dbg !101
  %824 = extractelement <8 x float> %658, i64 1, !dbg !101
  %825 = fcmp ogt float %823, %824, !dbg !101
  %826 = fcmp uno float %823, 0.000000e+00, !dbg !102
  %827 = or i1 %825, %826, !dbg !103
  %828 = select i1 %827, float %823, float %824, !dbg !104
  %829 = extractelement <8 x float> %658, i64 2, !dbg !101
  %830 = fcmp ogt float %828, %829, !dbg !101
  %831 = fcmp uno float %828, 0.000000e+00, !dbg !102
  %832 = or i1 %830, %831, !dbg !103
  %833 = select i1 %832, float %828, float %829, !dbg !104
  %834 = extractelement <8 x float> %658, i64 3, !dbg !101
  %835 = fcmp ogt float %833, %834, !dbg !101
  %836 = fcmp uno float %833, 0.000000e+00, !dbg !102
  %837 = or i1 %835, %836, !dbg !103
  %838 = select i1 %837, float %833, float %834, !dbg !104
  %839 = extractelement <8 x float> %658, i64 4, !dbg !101
  %840 = extractelement <8 x float> %658, i64 5, !dbg !101
  %841 = fcmp ogt float %839, %840, !dbg !101
  %842 = fcmp uno float %839, 0.000000e+00, !dbg !102
  %843 = or i1 %841, %842, !dbg !103
  %844 = select i1 %843, float %839, float %840, !dbg !104
  %845 = extractelement <8 x float> %658, i64 6, !dbg !101
  %846 = fcmp ogt float %844, %845, !dbg !101
  %847 = fcmp uno float %844, 0.000000e+00, !dbg !102
  %848 = or i1 %846, %847, !dbg !103
  %849 = select i1 %848, float %844, float %845, !dbg !104
  %850 = extractelement <8 x float> %658, i64 7, !dbg !101
  %851 = fcmp ogt float %849, %850, !dbg !101
  %852 = fcmp uno float %849, 0.000000e+00, !dbg !102
  %853 = or i1 %851, %852, !dbg !103
  %854 = select i1 %853, float %849, float %850, !dbg !104
  %855 = bitcast float %838 to i32, !dbg !99
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 16, i32 31), !dbg !99
  %857 = bitcast i32 %856 to float, !dbg !99
  %858 = fcmp ogt float %838, %857, !dbg !101
  %859 = fcmp uno float %838, 0.000000e+00, !dbg !102
  %860 = or i1 %859, %858, !dbg !103
  %861 = select i1 %860, float %838, float %857, !dbg !104
  %862 = bitcast float %861 to i32, !dbg !99
  %863 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %862, i32 8, i32 31), !dbg !99
  %864 = bitcast i32 %863 to float, !dbg !99
  %865 = fcmp ogt float %861, %864, !dbg !101
  %866 = fcmp uno float %861, 0.000000e+00, !dbg !102
  %867 = or i1 %865, %866, !dbg !103
  %868 = select i1 %867, float %861, float %864, !dbg !104
  %869 = bitcast float %868 to i32, !dbg !99
  %870 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %869, i32 4, i32 31), !dbg !99
  %871 = bitcast i32 %870 to float, !dbg !99
  %872 = fcmp ogt float %868, %871, !dbg !101
  %873 = fcmp uno float %868, 0.000000e+00, !dbg !102
  %874 = or i1 %872, %873, !dbg !103
  %875 = select i1 %874, float %868, float %871, !dbg !104
  %876 = bitcast float %875 to i32, !dbg !99
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 2, i32 31), !dbg !99
  %878 = bitcast i32 %877 to float, !dbg !99
  %879 = fcmp ogt float %875, %878, !dbg !101
  %880 = fcmp uno float %875, 0.000000e+00, !dbg !102
  %881 = or i1 %879, %880, !dbg !103
  %882 = select i1 %881, float %875, float %878, !dbg !104
  %883 = bitcast float %882 to i32, !dbg !99
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 1, i32 31), !dbg !99
  %885 = bitcast i32 %884 to float, !dbg !99
  %886 = fcmp ogt float %882, %885, !dbg !101
  %887 = fcmp uno float %882, 0.000000e+00, !dbg !102
  %888 = or i1 %886, %887, !dbg !103
  %889 = bitcast float %854 to i32, !dbg !99
  %890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %889, i32 16, i32 31), !dbg !99
  %891 = bitcast i32 %890 to float, !dbg !99
  %892 = fcmp ogt float %854, %891, !dbg !101
  %893 = fcmp uno float %854, 0.000000e+00, !dbg !102
  %894 = or i1 %893, %892, !dbg !103
  %895 = select i1 %894, float %854, float %891, !dbg !104
  %896 = bitcast float %895 to i32, !dbg !99
  %897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %896, i32 8, i32 31), !dbg !99
  %898 = bitcast i32 %897 to float, !dbg !99
  %899 = fcmp ogt float %895, %898, !dbg !101
  %900 = fcmp uno float %895, 0.000000e+00, !dbg !102
  %901 = or i1 %899, %900, !dbg !103
  %902 = select i1 %901, float %895, float %898, !dbg !104
  %903 = bitcast float %902 to i32, !dbg !99
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 4, i32 31), !dbg !99
  %905 = bitcast i32 %904 to float, !dbg !99
  %906 = fcmp ogt float %902, %905, !dbg !101
  %907 = fcmp uno float %902, 0.000000e+00, !dbg !102
  %908 = or i1 %906, %907, !dbg !103
  %909 = select i1 %908, float %902, float %905, !dbg !104
  %910 = bitcast float %909 to i32, !dbg !99
  %911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %910, i32 2, i32 31), !dbg !99
  %912 = bitcast i32 %911 to float, !dbg !99
  %913 = fcmp ogt float %909, %912, !dbg !101
  %914 = fcmp uno float %909, 0.000000e+00, !dbg !102
  %915 = or i1 %913, %914, !dbg !103
  %916 = select i1 %915, float %909, float %912, !dbg !104
  %917 = bitcast float %916 to i32, !dbg !99
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 1, i32 31), !dbg !99
  %919 = bitcast i32 %918 to float, !dbg !99
  %920 = fcmp ogt float %916, %919, !dbg !101
  %921 = fcmp uno float %916, 0.000000e+00, !dbg !102
  %922 = or i1 %920, %921, !dbg !103
  %923 = select i1 %888, i32 %883, i32 %884, !dbg !104
  %924 = insertelement <1 x i32> poison, i32 %923, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %783, <1 x i32> %924, i1 %401) #5, !dbg !99
  %925 = select i1 %922, i32 %917, i32 %918, !dbg !104
  %926 = insertelement <1 x i32> poison, i32 %925, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %926, i1 %401) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %927 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %790) #5, !dbg !99
  %928 = bitcast i32 %927 to float, !dbg !99
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %927, i32 4, i32 31), !dbg !99
  %930 = bitcast i32 %929 to float, !dbg !99
  %931 = fcmp ogt float %928, %930, !dbg !101
  %932 = fcmp uno float %928, 0.000000e+00, !dbg !102
  %933 = or i1 %932, %931, !dbg !103
  %934 = select i1 %933, float %928, float %930, !dbg !104
  %935 = bitcast float %934 to i32, !dbg !99
  %936 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %935, i32 2, i32 31), !dbg !99
  %937 = bitcast i32 %936 to float, !dbg !99
  %938 = fcmp ogt float %934, %937, !dbg !101
  %939 = fcmp uno float %934, 0.000000e+00, !dbg !102
  %940 = or i1 %938, %939, !dbg !103
  %941 = select i1 %940, float %934, float %937, !dbg !104
  %942 = bitcast float %941 to i32, !dbg !99
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 1, i32 31), !dbg !99
  %944 = bitcast i32 %943 to float, !dbg !99
  %945 = fcmp ogt float %941, %944, !dbg !101
  %946 = fcmp uno float %941, 0.000000e+00, !dbg !102
  %947 = or i1 %945, %946, !dbg !103
  %948 = select i1 %947, i32 %942, i32 %943, !dbg !104
  %949 = insertelement <1 x i32> poison, i32 %948, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %949, i1 %814) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %950 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %951 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %952 = bitcast float %950 to i32, !dbg !105
  %953 = bitcast float %951 to i32, !dbg !105
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %952, i32 %953, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %954 = load float, ptr addrspace(3) %821, align 4, !dbg !105
  %955 = sext i32 %209 to i64, !dbg !106
  %956 = getelementptr bfloat, ptr addrspace(1) %4, i64 %955, !dbg !106
  %957 = fptrunc float %822 to bfloat, !dbg !98
  %958 = and i32 %18, 254, !dbg !98
  %959 = icmp eq i32 %958, 0, !dbg !98
  %960 = bitcast bfloat %957 to i16, !dbg !98
  %961 = and i1 %959, %210, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %960, ptr addrspace(1) %956, i1 %961) #5, !dbg !98
  %962 = getelementptr bfloat, ptr addrspace(1) %5, i64 %955, !dbg !107
  %963 = fptrunc float %954 to bfloat, !dbg !105
  %964 = bitcast bfloat %963 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %964, ptr addrspace(1) %962, i1 %961) #5, !dbg !105
  %965 = getelementptr bfloat, ptr addrspace(1) %6, i64 %955, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %960, ptr addrspace(1) %965, i1 %961) #5, !dbg !109
  %966 = getelementptr bfloat, ptr addrspace(1) %7, i64 %955, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %964, ptr addrspace(1) %966, i1 %961) #5, !dbg !111
  %967 = getelementptr bfloat, ptr addrspace(1) %8, i64 %955, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %960, ptr addrspace(1) %967, i1 %961) #5, !dbg !113
  %968 = getelementptr bfloat, ptr addrspace(1) %9, i64 %955, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %964, ptr addrspace(1) %968, i1 %961) #5, !dbg !115
  %.inv = fcmp oge float %817, 0.000000e+00, !dbg !116
  %969 = select i1 %.inv, float 0.000000e+00, float %817, !dbg !116
  %.inv4 = fcmp oge float %818, 0.000000e+00, !dbg !116
  %970 = select i1 %.inv4, float 0.000000e+00, float %818, !dbg !116
  %971 = fsub float 0.000000e+00, %969, !dbg !118
  %972 = fsub float 0.000000e+00, %970, !dbg !118
  %.inv5 = fcmp ole float %950, 0.000000e+00, !dbg !119
  %973 = select i1 %.inv5, float 0.000000e+00, float %950, !dbg !119
  %.inv6 = fcmp ole float %951, 0.000000e+00, !dbg !119
  %974 = select i1 %.inv6, float 0.000000e+00, float %951, !dbg !119
  %975 = fcmp ogt float %971, %973, !dbg !121
  %976 = fcmp ogt float %972, %974, !dbg !121
  %977 = fcmp uno float %971, 0.000000e+00, !dbg !123
  %978 = fcmp uno float %972, 0.000000e+00, !dbg !123
  %979 = or i1 %977, %975, !dbg !124
  %980 = or i1 %978, %976, !dbg !124
  %981 = select i1 %979, float %971, float %973, !dbg !125
  %982 = select i1 %980, float %972, float %974, !dbg !125
  %983 = fmul float %981, 0x3F80204080000000, !dbg !126
  %984 = fmul float %982, 0x3F80204080000000, !dbg !126
  %985 = fcmp ogt float %983, 0x3EE4F8B580000000, !dbg !127
  %986 = fcmp ogt float %984, 0x3EE4F8B580000000, !dbg !127
  %987 = fcmp uno float %983, 0.000000e+00, !dbg !129
  %988 = fcmp uno float %984, 0.000000e+00, !dbg !129
  %989 = or i1 %985, %987, !dbg !130
  %990 = or i1 %986, %988, !dbg !130
  %991 = select i1 %989, float %983, float 0x3EE4F8B580000000, !dbg !131
  %992 = select i1 %990, float %984, float 0x3EE4F8B580000000, !dbg !131
  %993 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %991), !dbg !132
  %994 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %992), !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %995 = bitcast float %993 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %995, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %995, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %995, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %995, i1 true) #5, !dbg !133
  %996 = bitcast float %994 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %996, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %996, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %996, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %996, i1 true) #5, !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %997 = lshr exact i32 %19, 4, !dbg !133
  %998 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %997, !dbg !133
  %999 = load float, ptr addrspace(3) %998, align 8, !dbg !133
  %1000 = sext i32 %28 to i64, !dbg !134
  %1001 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1000, !dbg !134
  %1002 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1001, i1 %22) #5, !dbg !135
  %1003 = extractvalue { i32, i32, i32, i32 } %1002, 0, !dbg !135
  %1004 = bitcast i32 %1003 to <2 x bfloat>, !dbg !135
  %1005 = extractvalue { i32, i32, i32, i32 } %1002, 1, !dbg !135
  %1006 = bitcast i32 %1005 to <2 x bfloat>, !dbg !135
  %1007 = extractvalue { i32, i32, i32, i32 } %1002, 2, !dbg !135
  %1008 = bitcast i32 %1007 to <2 x bfloat>, !dbg !135
  %1009 = extractvalue { i32, i32, i32, i32 } %1002, 3, !dbg !135
  %1010 = bitcast i32 %1009 to <2 x bfloat>, !dbg !135
  %1011 = extractelement <2 x bfloat> %1004, i64 0, !dbg !135
  %1012 = extractelement <2 x bfloat> %1004, i64 1, !dbg !135
  %1013 = extractelement <2 x bfloat> %1006, i64 0, !dbg !135
  %1014 = extractelement <2 x bfloat> %1006, i64 1, !dbg !135
  %1015 = extractelement <2 x bfloat> %1008, i64 0, !dbg !135
  %1016 = extractelement <2 x bfloat> %1008, i64 1, !dbg !135
  %1017 = extractelement <2 x bfloat> %1010, i64 0, !dbg !135
  %1018 = extractelement <2 x bfloat> %1010, i64 1, !dbg !135
  %1019 = fpext bfloat %1011 to float, !dbg !136
  %1020 = fpext bfloat %1012 to float, !dbg !136
  %1021 = fpext bfloat %1013 to float, !dbg !136
  %1022 = fpext bfloat %1014 to float, !dbg !136
  %1023 = fpext bfloat %1015 to float, !dbg !136
  %1024 = fpext bfloat %1016 to float, !dbg !136
  %1025 = fpext bfloat %1017 to float, !dbg !136
  %1026 = fpext bfloat %1018 to float, !dbg !136
  %1027 = fmul float %999, %1019, !dbg !133
  %1028 = fmul float %999, %1020, !dbg !133
  %1029 = fmul float %999, %1021, !dbg !133
  %1030 = fmul float %999, %1022, !dbg !133
  %1031 = fmul float %999, %1023, !dbg !133
  %1032 = fmul float %999, %1024, !dbg !133
  %1033 = fmul float %999, %1025, !dbg !133
  %1034 = fmul float %999, %1026, !dbg !133
  %1035 = tail call float @llvm.nvvm.round.f(float %1027) #5, !dbg !137
  %1036 = tail call float @llvm.nvvm.round.f(float %1028) #5, !dbg !137
  %1037 = tail call float @llvm.nvvm.round.f(float %1029) #5, !dbg !137
  %1038 = tail call float @llvm.nvvm.round.f(float %1030) #5, !dbg !137
  %1039 = tail call float @llvm.nvvm.round.f(float %1031) #5, !dbg !137
  %1040 = tail call float @llvm.nvvm.round.f(float %1032) #5, !dbg !137
  %1041 = tail call float @llvm.nvvm.round.f(float %1033) #5, !dbg !137
  %1042 = tail call float @llvm.nvvm.round.f(float %1034) #5, !dbg !137
  %1043 = insertelement <4 x float> poison, float %1035, i64 0, !dbg !138
  %1044 = insertelement <4 x float> %1043, float %1036, i64 1, !dbg !138
  %1045 = insertelement <4 x float> %1044, float %1037, i64 2, !dbg !138
  %1046 = insertelement <4 x float> %1045, float %1038, i64 3, !dbg !138
  %1047 = fcmp ogt <4 x float> %1046, splat (float -1.270000e+02), !dbg !138
  %1048 = fcmp uno <4 x float> %1046, zeroinitializer, !dbg !140
  %1049 = or <4 x i1> %1047, %1048, !dbg !141
  %1050 = select <4 x i1> %1049, <4 x float> %1046, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1051 = fcmp olt <4 x float> %1050, splat (float 1.270000e+02), !dbg !143
  %1052 = fcmp uno <4 x float> %1050, zeroinitializer, !dbg !145
  %1053 = or <4 x i1> %1051, %1052, !dbg !146
  %1054 = fptosi <4 x float> %1050 to <4 x i8>, !dbg !147
  %1055 = select <4 x i1> %1053, <4 x i8> %1054, <4 x i8> splat (i8 127), !dbg !148
  %1056 = insertelement <4 x float> poison, float %1039, i64 0, !dbg !138
  %1057 = insertelement <4 x float> %1056, float %1040, i64 1, !dbg !138
  %1058 = insertelement <4 x float> %1057, float %1041, i64 2, !dbg !138
  %1059 = insertelement <4 x float> %1058, float %1042, i64 3, !dbg !138
  %1060 = fcmp ogt <4 x float> %1059, splat (float -1.270000e+02), !dbg !138
  %1061 = fcmp uno <4 x float> %1059, zeroinitializer, !dbg !140
  %1062 = or <4 x i1> %1060, %1061, !dbg !141
  %1063 = select <4 x i1> %1062, <4 x float> %1059, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1064 = fcmp olt <4 x float> %1063, splat (float 1.270000e+02), !dbg !143
  %1065 = fcmp uno <4 x float> %1063, zeroinitializer, !dbg !145
  %1066 = or <4 x i1> %1064, %1065, !dbg !146
  %1067 = fptosi <4 x float> %1063 to <4 x i8>, !dbg !147
  %1068 = select <4 x i1> %1066, <4 x i8> %1067, <4 x i8> splat (i8 127), !dbg !148
  %1069 = getelementptr i8, ptr addrspace(1) %10, i64 %1000, !dbg !149
  %1070 = bitcast <4 x i8> %1055 to i32, !dbg !150
  %1071 = bitcast <4 x i8> %1068 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1070, i32 %1071, ptr addrspace(1) %1069, i1 %22) #5, !dbg !150
  %1072 = getelementptr i8, ptr addrspace(1) %11, i64 %1000, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1070, i32 %1071, ptr addrspace(1) %1072, i1 %22) #5, !dbg !152
  %1073 = getelementptr i8, ptr addrspace(1) %12, i64 %1000, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1070, i32 %1071, ptr addrspace(1) %1073, i1 %22) #5, !dbg !154
  %1074 = add i32 %28, 1024, !dbg !155
  %1075 = sext i32 %1074 to i64, !dbg !134
  %1076 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1075, !dbg !134
  %1077 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1076, i1 %22) #5, !dbg !135
  %1078 = extractvalue { i32, i32, i32, i32 } %1077, 0, !dbg !135
  %1079 = bitcast i32 %1078 to <2 x bfloat>, !dbg !135
  %1080 = extractvalue { i32, i32, i32, i32 } %1077, 1, !dbg !135
  %1081 = bitcast i32 %1080 to <2 x bfloat>, !dbg !135
  %1082 = extractvalue { i32, i32, i32, i32 } %1077, 2, !dbg !135
  %1083 = bitcast i32 %1082 to <2 x bfloat>, !dbg !135
  %1084 = extractvalue { i32, i32, i32, i32 } %1077, 3, !dbg !135
  %1085 = bitcast i32 %1084 to <2 x bfloat>, !dbg !135
  %1086 = extractelement <2 x bfloat> %1079, i64 0, !dbg !135
  %1087 = extractelement <2 x bfloat> %1079, i64 1, !dbg !135
  %1088 = extractelement <2 x bfloat> %1081, i64 0, !dbg !135
  %1089 = extractelement <2 x bfloat> %1081, i64 1, !dbg !135
  %1090 = extractelement <2 x bfloat> %1083, i64 0, !dbg !135
  %1091 = extractelement <2 x bfloat> %1083, i64 1, !dbg !135
  %1092 = extractelement <2 x bfloat> %1085, i64 0, !dbg !135
  %1093 = extractelement <2 x bfloat> %1085, i64 1, !dbg !135
  %1094 = fpext bfloat %1086 to float, !dbg !136
  %1095 = fpext bfloat %1087 to float, !dbg !136
  %1096 = fpext bfloat %1088 to float, !dbg !136
  %1097 = fpext bfloat %1089 to float, !dbg !136
  %1098 = fpext bfloat %1090 to float, !dbg !136
  %1099 = fpext bfloat %1091 to float, !dbg !136
  %1100 = fpext bfloat %1092 to float, !dbg !136
  %1101 = fpext bfloat %1093 to float, !dbg !136
  %1102 = fmul float %999, %1094, !dbg !133
  %1103 = fmul float %999, %1095, !dbg !133
  %1104 = fmul float %999, %1096, !dbg !133
  %1105 = fmul float %999, %1097, !dbg !133
  %1106 = fmul float %999, %1098, !dbg !133
  %1107 = fmul float %999, %1099, !dbg !133
  %1108 = fmul float %999, %1100, !dbg !133
  %1109 = fmul float %999, %1101, !dbg !133
  %1110 = tail call float @llvm.nvvm.round.f(float %1102) #5, !dbg !137
  %1111 = tail call float @llvm.nvvm.round.f(float %1103) #5, !dbg !137
  %1112 = tail call float @llvm.nvvm.round.f(float %1104) #5, !dbg !137
  %1113 = tail call float @llvm.nvvm.round.f(float %1105) #5, !dbg !137
  %1114 = tail call float @llvm.nvvm.round.f(float %1106) #5, !dbg !137
  %1115 = tail call float @llvm.nvvm.round.f(float %1107) #5, !dbg !137
  %1116 = tail call float @llvm.nvvm.round.f(float %1108) #5, !dbg !137
  %1117 = tail call float @llvm.nvvm.round.f(float %1109) #5, !dbg !137
  %1118 = insertelement <4 x float> poison, float %1110, i64 0, !dbg !138
  %1119 = insertelement <4 x float> %1118, float %1111, i64 1, !dbg !138
  %1120 = insertelement <4 x float> %1119, float %1112, i64 2, !dbg !138
  %1121 = insertelement <4 x float> %1120, float %1113, i64 3, !dbg !138
  %1122 = fcmp ogt <4 x float> %1121, splat (float -1.270000e+02), !dbg !138
  %1123 = fcmp uno <4 x float> %1121, zeroinitializer, !dbg !140
  %1124 = or <4 x i1> %1122, %1123, !dbg !141
  %1125 = select <4 x i1> %1124, <4 x float> %1121, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1126 = fcmp olt <4 x float> %1125, splat (float 1.270000e+02), !dbg !143
  %1127 = fcmp uno <4 x float> %1125, zeroinitializer, !dbg !145
  %1128 = or <4 x i1> %1126, %1127, !dbg !146
  %1129 = fptosi <4 x float> %1125 to <4 x i8>, !dbg !147
  %1130 = select <4 x i1> %1128, <4 x i8> %1129, <4 x i8> splat (i8 127), !dbg !148
  %1131 = insertelement <4 x float> poison, float %1114, i64 0, !dbg !138
  %1132 = insertelement <4 x float> %1131, float %1115, i64 1, !dbg !138
  %1133 = insertelement <4 x float> %1132, float %1116, i64 2, !dbg !138
  %1134 = insertelement <4 x float> %1133, float %1117, i64 3, !dbg !138
  %1135 = fcmp ogt <4 x float> %1134, splat (float -1.270000e+02), !dbg !138
  %1136 = fcmp uno <4 x float> %1134, zeroinitializer, !dbg !140
  %1137 = or <4 x i1> %1135, %1136, !dbg !141
  %1138 = select <4 x i1> %1137, <4 x float> %1134, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1139 = fcmp olt <4 x float> %1138, splat (float 1.270000e+02), !dbg !143
  %1140 = fcmp uno <4 x float> %1138, zeroinitializer, !dbg !145
  %1141 = or <4 x i1> %1139, %1140, !dbg !146
  %1142 = fptosi <4 x float> %1138 to <4 x i8>, !dbg !147
  %1143 = select <4 x i1> %1141, <4 x i8> %1142, <4 x i8> splat (i8 127), !dbg !148
  %1144 = getelementptr i8, ptr addrspace(1) %10, i64 %1075, !dbg !149
  %1145 = bitcast <4 x i8> %1130 to i32, !dbg !150
  %1146 = bitcast <4 x i8> %1143 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1145, i32 %1146, ptr addrspace(1) %1144, i1 %22) #5, !dbg !150
  %1147 = getelementptr i8, ptr addrspace(1) %11, i64 %1075, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1145, i32 %1146, ptr addrspace(1) %1147, i1 %22) #5, !dbg !152
  %1148 = getelementptr i8, ptr addrspace(1) %12, i64 %1075, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1145, i32 %1146, ptr addrspace(1) %1148, i1 %22) #5, !dbg !154
  %1149 = add i32 %28, 2048, !dbg !155
  %1150 = sext i32 %1149 to i64, !dbg !134
  %1151 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1150, !dbg !134
  %1152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1151, i1 %22) #5, !dbg !135
  %1153 = extractvalue { i32, i32, i32, i32 } %1152, 0, !dbg !135
  %1154 = bitcast i32 %1153 to <2 x bfloat>, !dbg !135
  %1155 = extractvalue { i32, i32, i32, i32 } %1152, 1, !dbg !135
  %1156 = bitcast i32 %1155 to <2 x bfloat>, !dbg !135
  %1157 = extractvalue { i32, i32, i32, i32 } %1152, 2, !dbg !135
  %1158 = bitcast i32 %1157 to <2 x bfloat>, !dbg !135
  %1159 = extractvalue { i32, i32, i32, i32 } %1152, 3, !dbg !135
  %1160 = bitcast i32 %1159 to <2 x bfloat>, !dbg !135
  %1161 = extractelement <2 x bfloat> %1154, i64 0, !dbg !135
  %1162 = extractelement <2 x bfloat> %1154, i64 1, !dbg !135
  %1163 = extractelement <2 x bfloat> %1156, i64 0, !dbg !135
  %1164 = extractelement <2 x bfloat> %1156, i64 1, !dbg !135
  %1165 = extractelement <2 x bfloat> %1158, i64 0, !dbg !135
  %1166 = extractelement <2 x bfloat> %1158, i64 1, !dbg !135
  %1167 = extractelement <2 x bfloat> %1160, i64 0, !dbg !135
  %1168 = extractelement <2 x bfloat> %1160, i64 1, !dbg !135
  %1169 = fpext bfloat %1161 to float, !dbg !136
  %1170 = fpext bfloat %1162 to float, !dbg !136
  %1171 = fpext bfloat %1163 to float, !dbg !136
  %1172 = fpext bfloat %1164 to float, !dbg !136
  %1173 = fpext bfloat %1165 to float, !dbg !136
  %1174 = fpext bfloat %1166 to float, !dbg !136
  %1175 = fpext bfloat %1167 to float, !dbg !136
  %1176 = fpext bfloat %1168 to float, !dbg !136
  %1177 = fmul float %999, %1169, !dbg !133
  %1178 = fmul float %999, %1170, !dbg !133
  %1179 = fmul float %999, %1171, !dbg !133
  %1180 = fmul float %999, %1172, !dbg !133
  %1181 = fmul float %999, %1173, !dbg !133
  %1182 = fmul float %999, %1174, !dbg !133
  %1183 = fmul float %999, %1175, !dbg !133
  %1184 = fmul float %999, %1176, !dbg !133
  %1185 = tail call float @llvm.nvvm.round.f(float %1177) #5, !dbg !137
  %1186 = tail call float @llvm.nvvm.round.f(float %1178) #5, !dbg !137
  %1187 = tail call float @llvm.nvvm.round.f(float %1179) #5, !dbg !137
  %1188 = tail call float @llvm.nvvm.round.f(float %1180) #5, !dbg !137
  %1189 = tail call float @llvm.nvvm.round.f(float %1181) #5, !dbg !137
  %1190 = tail call float @llvm.nvvm.round.f(float %1182) #5, !dbg !137
  %1191 = tail call float @llvm.nvvm.round.f(float %1183) #5, !dbg !137
  %1192 = tail call float @llvm.nvvm.round.f(float %1184) #5, !dbg !137
  %1193 = insertelement <4 x float> poison, float %1185, i64 0, !dbg !138
  %1194 = insertelement <4 x float> %1193, float %1186, i64 1, !dbg !138
  %1195 = insertelement <4 x float> %1194, float %1187, i64 2, !dbg !138
  %1196 = insertelement <4 x float> %1195, float %1188, i64 3, !dbg !138
  %1197 = fcmp ogt <4 x float> %1196, splat (float -1.270000e+02), !dbg !138
  %1198 = fcmp uno <4 x float> %1196, zeroinitializer, !dbg !140
  %1199 = or <4 x i1> %1197, %1198, !dbg !141
  %1200 = select <4 x i1> %1199, <4 x float> %1196, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1201 = fcmp olt <4 x float> %1200, splat (float 1.270000e+02), !dbg !143
  %1202 = fcmp uno <4 x float> %1200, zeroinitializer, !dbg !145
  %1203 = or <4 x i1> %1201, %1202, !dbg !146
  %1204 = fptosi <4 x float> %1200 to <4 x i8>, !dbg !147
  %1205 = select <4 x i1> %1203, <4 x i8> %1204, <4 x i8> splat (i8 127), !dbg !148
  %1206 = insertelement <4 x float> poison, float %1189, i64 0, !dbg !138
  %1207 = insertelement <4 x float> %1206, float %1190, i64 1, !dbg !138
  %1208 = insertelement <4 x float> %1207, float %1191, i64 2, !dbg !138
  %1209 = insertelement <4 x float> %1208, float %1192, i64 3, !dbg !138
  %1210 = fcmp ogt <4 x float> %1209, splat (float -1.270000e+02), !dbg !138
  %1211 = fcmp uno <4 x float> %1209, zeroinitializer, !dbg !140
  %1212 = or <4 x i1> %1210, %1211, !dbg !141
  %1213 = select <4 x i1> %1212, <4 x float> %1209, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1214 = fcmp olt <4 x float> %1213, splat (float 1.270000e+02), !dbg !143
  %1215 = fcmp uno <4 x float> %1213, zeroinitializer, !dbg !145
  %1216 = or <4 x i1> %1214, %1215, !dbg !146
  %1217 = fptosi <4 x float> %1213 to <4 x i8>, !dbg !147
  %1218 = select <4 x i1> %1216, <4 x i8> %1217, <4 x i8> splat (i8 127), !dbg !148
  %1219 = getelementptr i8, ptr addrspace(1) %10, i64 %1150, !dbg !149
  %1220 = bitcast <4 x i8> %1205 to i32, !dbg !150
  %1221 = bitcast <4 x i8> %1218 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1220, i32 %1221, ptr addrspace(1) %1219, i1 %22) #5, !dbg !150
  %1222 = getelementptr i8, ptr addrspace(1) %11, i64 %1150, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1220, i32 %1221, ptr addrspace(1) %1222, i1 %22) #5, !dbg !152
  %1223 = getelementptr i8, ptr addrspace(1) %12, i64 %1150, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1220, i32 %1221, ptr addrspace(1) %1223, i1 %22) #5, !dbg !154
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 51, scope: !6)
!61 = !DILocation(line: 59, column: 113, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 65, column: 24, scope: !6)
!72 = !DILocation(line: 71, column: 24, scope: !6)
!73 = !DILocation(line: 61, column: 102, scope: !6)
!74 = !DILocation(line: 63, column: 95, scope: !6)
!75 = !DILocation(line: 74, column: 24, scope: !6)
!76 = !DILocation(line: 76, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 80, column: 24, scope: !6)
!80 = !DILocation(line: 86, column: 53, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !82)
!82 = !DILocation(line: 82, column: 47, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !82)
!85 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !82)
!86 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 84, column: 47, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !87)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !87)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !117)
!117 = !DILocation(line: 103, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 17, scope: !6)
!119 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 105, column: 46, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 106, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !122)
!126 = !DILocation(line: 108, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !128)
!128 = !DILocation(line: 111, column: 46, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !128)
!132 = !DILocation(line: 114, column: 25, scope: !6)
!133 = !DILocation(line: 117, column: 24, scope: !6)
!134 = !DILocation(line: 101, column: 36, scope: !6)
!135 = !DILocation(line: 101, column: 53, scope: !6)
!136 = !DILocation(line: 101, column: 115, scope: !6)
!137 = !DILocation(line: 118, column: 36, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !139)
!139 = !DILocation(line: 121, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !139)
!143 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !144)
!144 = !DILocation(line: 123, column: 46, scope: !6)
!145 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !144)
!146 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !144)
!147 = !DILocation(line: 125, column: 25, scope: !6)
!148 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !144)
!149 = !DILocation(line: 126, column: 29, scope: !6)
!150 = !DILocation(line: 126, column: 53, scope: !6)
!151 = !DILocation(line: 127, column: 30, scope: !6)
!152 = !DILocation(line: 127, column: 54, scope: !6)
!153 = !DILocation(line: 128, column: 30, scope: !6)
!154 = !DILocation(line: 128, column: 54, scope: !6)
!155 = !DILocation(line: 101, column: 43, scope: !6)
!156 = !DILocation(line: 95, column: 4, scope: !6)
