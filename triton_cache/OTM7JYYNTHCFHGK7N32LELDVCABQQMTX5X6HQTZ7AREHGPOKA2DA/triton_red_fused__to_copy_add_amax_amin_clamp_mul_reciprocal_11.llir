; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !11
  %12 = and i32 %11, 2046, !dbg !11
  %13 = shl i32 %8, 7, !dbg !12
  %14 = and i32 %11, 126
  %invariant.op = or disjoint i32 %13, %14, !dbg !13
  %15 = lshr i32 %12, 7, !dbg !14
  %16 = mul nuw nsw i32 %15, 526336, !dbg !15
  %.reass = add i32 %16, %invariant.op
  %17 = sext i32 %.reass to i64, !dbg !16
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !16
  br i1 %9, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %7
  %19 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 false) #4, !dbg !17
  %20 = or disjoint i32 %12, 2048, !dbg !18
  %21 = lshr i32 %20, 7, !dbg !14
  %22 = mul nuw nsw i32 %21, 526336, !dbg !15
  %.reass.us.1 = add i32 %22, %invariant.op
  %23 = sext i32 %.reass.us.1 to i64, !dbg !16
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %24, i1 false) #4, !dbg !17
  br label %.split5.us, !dbg !19

.split.preheader:                                 ; preds = %7
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 true) #4, !dbg !17
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !17
  %28 = extractelement <2 x bfloat> %27, i64 0, !dbg !17
  %29 = extractelement <2 x bfloat> %27, i64 1, !dbg !17
  %30 = fpext bfloat %28 to float, !dbg !23
  %31 = fpext bfloat %29 to float, !dbg !23
  %32 = or disjoint i32 %12, 2048, !dbg !18
  %33 = icmp samesign ult i32 %32, 3072, !dbg !24
  %34 = lshr i32 %32, 7, !dbg !14
  %35 = mul nuw nsw i32 %34, 526336, !dbg !15
  %.reass.1 = add i32 %35, %invariant.op
  %36 = sext i32 %.reass.1 to i64, !dbg !16
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !16
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 %33) #4, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %41 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %42 = fpext bfloat %40 to float, !dbg !23
  %43 = fpext bfloat %41 to float, !dbg !23
  %44 = fcmp olt bfloat %28, %40, !dbg !25
  %45 = fcmp olt bfloat %29, %41, !dbg !25
  %46 = fcmp uno bfloat %28, 0xR0000, !dbg !27
  %47 = fcmp uno bfloat %29, 0xR0000, !dbg !27
  %48 = or i1 %46, %44, !dbg !28
  %49 = or i1 %47, %45, !dbg !28
  %50 = select i1 %48, float %30, float %42, !dbg !29
  %51 = select i1 %49, float %31, float %43, !dbg !29
  %spec.select.1 = select i1 %33, float %50, float %30, !dbg !30
  %52 = select i1 %33, float %51, float %31, !dbg !30
  %53 = fcmp ogt bfloat %28, %40, !dbg !31
  %54 = fcmp ogt bfloat %29, %41, !dbg !31
  %55 = or i1 %46, %53, !dbg !33
  %56 = or i1 %47, %54, !dbg !33
  %57 = select i1 %55, float %30, float %42, !dbg !34
  %58 = select i1 %56, float %31, float %43, !dbg !34
  %59 = select i1 %33, float %57, float %30, !dbg !35
  %60 = select i1 %33, float %58, float %31, !dbg !35
  br label %.split5.us, !dbg !19

.split5.us:                                       ; preds = %.split.us.preheader, %.split.preheader
  %.pre-phi19 = phi i64 [ %23, %.split.us.preheader ], [ %36, %.split.preheader ], !dbg !36
  %.pre-phi15.in = phi i32 [ %20, %.split.us.preheader ], [ %32, %.split.preheader ]
  %61 = phi float [ 0x7FF0000000000000, %.split.us.preheader ], [ %spec.select.1, %.split.preheader ], !dbg !19
  %62 = phi float [ 0x7FF0000000000000, %.split.us.preheader ], [ %52, %.split.preheader ], !dbg !19
  %63 = phi float [ 0xFFF0000000000000, %.split.us.preheader ], [ %59, %.split.preheader ], !dbg !19
  %64 = phi float [ 0xFFF0000000000000, %.split.us.preheader ], [ %60, %.split.preheader ], !dbg !19
  %65 = lshr i32 %10, 5, !dbg !11
  %66 = and i32 %10, 31, !dbg !11
  %67 = fcmp olt float %61, %62, !dbg !37
  %68 = fcmp uno float %61, 0.000000e+00, !dbg !39
  %69 = or i1 %67, %68, !dbg !40
  %70 = select i1 %69, float %61, float %62, !dbg !41
  %71 = bitcast float %70 to i32, !dbg !19
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !19
  %73 = bitcast i32 %72 to float, !dbg !19
  %74 = fcmp olt float %70, %73, !dbg !37
  %75 = fcmp uno float %70, 0.000000e+00, !dbg !39
  %76 = or i1 %75, %74, !dbg !40
  %77 = select i1 %76, float %70, float %73, !dbg !41
  %78 = bitcast float %77 to i32, !dbg !19
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !19
  %80 = bitcast i32 %79 to float, !dbg !19
  %81 = fcmp olt float %77, %80, !dbg !37
  %82 = fcmp uno float %77, 0.000000e+00, !dbg !39
  %83 = or i1 %81, %82, !dbg !40
  %84 = select i1 %83, float %77, float %80, !dbg !41
  %85 = bitcast float %84 to i32, !dbg !19
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !19
  %87 = bitcast i32 %86 to float, !dbg !19
  %88 = fcmp olt float %84, %87, !dbg !37
  %89 = fcmp uno float %84, 0.000000e+00, !dbg !39
  %90 = or i1 %88, %89, !dbg !40
  %91 = select i1 %90, float %84, float %87, !dbg !41
  %92 = bitcast float %91 to i32, !dbg !19
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !19
  %94 = bitcast i32 %93 to float, !dbg !19
  %95 = fcmp olt float %91, %94, !dbg !37
  %96 = fcmp uno float %91, 0.000000e+00, !dbg !39
  %97 = or i1 %95, %96, !dbg !40
  %98 = select i1 %97, float %91, float %94, !dbg !41
  %99 = bitcast float %98 to i32, !dbg !19
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !19
  %101 = bitcast i32 %100 to float, !dbg !19
  %102 = fcmp olt float %98, %101, !dbg !37
  %103 = fcmp uno float %98, 0.000000e+00, !dbg !39
  %104 = or i1 %102, %103, !dbg !40
  %105 = and i32 %65, 31, !dbg !19
  %106 = icmp eq i32 %66, 0, !dbg !19
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !19
  %108 = select i1 %104, i32 %99, i32 %100, !dbg !41
  %109 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %109, i1 %106) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %110 = icmp slt i32 %10, 32, !dbg !19
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #4, !dbg !19
  %113 = bitcast i32 %112 to float, !dbg !19
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !19
  %115 = bitcast i32 %114 to float, !dbg !19
  %116 = fcmp olt float %113, %115, !dbg !37
  %117 = fcmp uno float %113, 0.000000e+00, !dbg !39
  %118 = or i1 %117, %116, !dbg !40
  %119 = select i1 %118, float %113, float %115, !dbg !41
  %120 = bitcast float %119 to i32, !dbg !19
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !19
  %122 = bitcast i32 %121 to float, !dbg !19
  %123 = fcmp olt float %119, %122, !dbg !37
  %124 = fcmp uno float %119, 0.000000e+00, !dbg !39
  %125 = or i1 %123, %124, !dbg !40
  %126 = select i1 %125, float %119, float %122, !dbg !41
  %127 = bitcast float %126 to i32, !dbg !19
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !19
  %129 = bitcast i32 %128 to float, !dbg !19
  %130 = fcmp olt float %126, %129, !dbg !37
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !39
  %132 = or i1 %130, %131, !dbg !40
  %133 = select i1 %132, float %126, float %129, !dbg !41
  %134 = bitcast float %133 to i32, !dbg !19
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !19
  %136 = bitcast i32 %135 to float, !dbg !19
  %137 = fcmp olt float %133, %136, !dbg !37
  %138 = fcmp uno float %133, 0.000000e+00, !dbg !39
  %139 = or i1 %137, %138, !dbg !40
  %140 = select i1 %139, float %133, float %136, !dbg !41
  %141 = bitcast float %140 to i32, !dbg !19
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !19
  %143 = bitcast i32 %142 to float, !dbg !19
  %144 = fcmp olt float %140, %143, !dbg !37
  %145 = fcmp uno float %140, 0.000000e+00, !dbg !39
  %146 = or i1 %144, %145, !dbg !40
  %147 = and i1 %110, %106, !dbg !19
  %148 = select i1 %146, i32 %141, i32 %142, !dbg !41
  %149 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %149, i1 %147) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %151 = fcmp ogt float %63, %64, !dbg !44
  %152 = fcmp uno float %63, 0.000000e+00, !dbg !45
  %153 = or i1 %151, %152, !dbg !46
  %154 = select i1 %153, float %63, float %64, !dbg !47
  %155 = bitcast float %154 to i32, !dbg !42
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !42
  %157 = bitcast i32 %156 to float, !dbg !42
  %158 = fcmp ogt float %154, %157, !dbg !44
  %159 = fcmp uno float %154, 0.000000e+00, !dbg !45
  %160 = or i1 %159, %158, !dbg !46
  %161 = select i1 %160, float %154, float %157, !dbg !47
  %162 = bitcast float %161 to i32, !dbg !42
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !42
  %164 = bitcast i32 %163 to float, !dbg !42
  %165 = fcmp ogt float %161, %164, !dbg !44
  %166 = fcmp uno float %161, 0.000000e+00, !dbg !45
  %167 = or i1 %165, %166, !dbg !46
  %168 = select i1 %167, float %161, float %164, !dbg !47
  %169 = bitcast float %168 to i32, !dbg !42
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 4, i32 31), !dbg !42
  %171 = bitcast i32 %170 to float, !dbg !42
  %172 = fcmp ogt float %168, %171, !dbg !44
  %173 = fcmp uno float %168, 0.000000e+00, !dbg !45
  %174 = or i1 %172, %173, !dbg !46
  %175 = select i1 %174, float %168, float %171, !dbg !47
  %176 = bitcast float %175 to i32, !dbg !42
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !42
  %178 = bitcast i32 %177 to float, !dbg !42
  %179 = fcmp ogt float %175, %178, !dbg !44
  %180 = fcmp uno float %175, 0.000000e+00, !dbg !45
  %181 = or i1 %179, %180, !dbg !46
  %182 = select i1 %181, float %175, float %178, !dbg !47
  %183 = bitcast float %182 to i32, !dbg !42
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !42
  %185 = bitcast i32 %184 to float, !dbg !42
  %186 = fcmp ogt float %182, %185, !dbg !44
  %187 = fcmp uno float %182, 0.000000e+00, !dbg !45
  %188 = or i1 %186, %187, !dbg !46
  %189 = select i1 %188, i32 %183, i32 %184, !dbg !47
  %190 = insertelement <1 x i32> poison, i32 %189, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %190, i1 %106) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %191 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #4, !dbg !42
  %192 = bitcast i32 %191 to float, !dbg !42
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 16, i32 31), !dbg !42
  %194 = bitcast i32 %193 to float, !dbg !42
  %195 = fcmp ogt float %192, %194, !dbg !44
  %196 = fcmp uno float %192, 0.000000e+00, !dbg !45
  %197 = or i1 %196, %195, !dbg !46
  %198 = select i1 %197, float %192, float %194, !dbg !47
  %199 = bitcast float %198 to i32, !dbg !42
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !42
  %201 = bitcast i32 %200 to float, !dbg !42
  %202 = fcmp ogt float %198, %201, !dbg !44
  %203 = fcmp uno float %198, 0.000000e+00, !dbg !45
  %204 = or i1 %202, %203, !dbg !46
  %205 = select i1 %204, float %198, float %201, !dbg !47
  %206 = bitcast float %205 to i32, !dbg !42
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !42
  %208 = bitcast i32 %207 to float, !dbg !42
  %209 = fcmp ogt float %205, %208, !dbg !44
  %210 = fcmp uno float %205, 0.000000e+00, !dbg !45
  %211 = or i1 %209, %210, !dbg !46
  %212 = select i1 %211, float %205, float %208, !dbg !47
  %213 = bitcast float %212 to i32, !dbg !42
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !42
  %215 = bitcast i32 %214 to float, !dbg !42
  %216 = fcmp ogt float %212, %215, !dbg !44
  %217 = fcmp uno float %212, 0.000000e+00, !dbg !45
  %218 = or i1 %216, %217, !dbg !46
  %219 = select i1 %218, float %212, float %215, !dbg !47
  %220 = bitcast float %219 to i32, !dbg !42
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !42
  %222 = bitcast i32 %221 to float, !dbg !42
  %223 = fcmp ogt float %219, %222, !dbg !44
  %224 = fcmp uno float %219, 0.000000e+00, !dbg !45
  %225 = or i1 %223, %224, !dbg !46
  %226 = select i1 %225, i32 %220, i32 %221, !dbg !47
  %227 = insertelement <1 x i32> poison, i32 %226, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %227, i1 %147) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %228 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %229 = sext i32 %8 to i64, !dbg !48
  %230 = getelementptr bfloat, ptr addrspace(1) %1, i64 %229, !dbg !48
  %231 = fptrunc float %150 to bfloat, !dbg !49
  %232 = and i32 %10, 1023, !dbg !49
  %233 = icmp eq i32 %232, 0, !dbg !49
  %234 = bitcast bfloat %231 to i16, !dbg !49
  %235 = and i1 %9, %233, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %234, ptr addrspace(1) %230, i1 %235) #4, !dbg !49
  %236 = getelementptr bfloat, ptr addrspace(1) %2, i64 %229, !dbg !50
  %237 = fptrunc float %228 to bfloat, !dbg !51
  %238 = bitcast bfloat %237 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %238, ptr addrspace(1) %236, i1 %235) #4, !dbg !51
  %.inv = fcmp oge float %150, 0.000000e+00, !dbg !52
  %239 = select i1 %.inv, float 0.000000e+00, float %150, !dbg !52
  %240 = fsub float 0.000000e+00, %239, !dbg !54
  %.inv2 = fcmp ole float %228, 0.000000e+00, !dbg !55
  %241 = select i1 %.inv2, float 0.000000e+00, float %228, !dbg !55
  %242 = fcmp ogt float %240, %241, !dbg !57
  %243 = fcmp uno float %240, 0.000000e+00, !dbg !59
  %244 = or i1 %243, %242, !dbg !60
  %245 = select i1 %244, float %240, float %241, !dbg !61
  %246 = fmul float %245, 0x3F80204080000000, !dbg !62
  %247 = fcmp ogt float %246, 0x3EE4F8B580000000, !dbg !63
  %248 = fcmp uno float %246, 0.000000e+00, !dbg !65
  %249 = or i1 %247, %248, !dbg !66
  %250 = select i1 %249, float %246, float 0x3EE4F8B580000000, !dbg !67
  %251 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %250), !dbg !68
  %252 = mul i32 %8, 3072, !dbg !69
  %253 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !36
  %254 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %253, i1 %9) #4, !dbg !70
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !70
  %256 = extractelement <2 x bfloat> %255, i64 0, !dbg !70
  %257 = extractelement <2 x bfloat> %255, i64 1, !dbg !70
  %258 = fpext bfloat %256 to float, !dbg !71
  %259 = fpext bfloat %257 to float, !dbg !71
  %260 = fmul float %251, %258, !dbg !72
  %261 = fmul float %251, %259, !dbg !72
  %262 = tail call float @llvm.nvvm.round.f(float %260) #4, !dbg !73
  %263 = tail call float @llvm.nvvm.round.f(float %261) #4, !dbg !73
  %264 = insertelement <2 x float> poison, float %262, i64 0, !dbg !74
  %265 = insertelement <2 x float> %264, float %263, i64 1, !dbg !74
  %266 = fcmp ogt <2 x float> %265, splat (float -1.270000e+02), !dbg !74
  %267 = fcmp uno <2 x float> %265, zeroinitializer, !dbg !76
  %268 = or <2 x i1> %266, %267, !dbg !77
  %269 = select <2 x i1> %268, <2 x float> %265, <2 x float> splat (float -1.270000e+02), !dbg !78
  %270 = fcmp olt <2 x float> %269, splat (float 1.270000e+02), !dbg !79
  %271 = fcmp uno <2 x float> %269, zeroinitializer, !dbg !81
  %272 = or <2 x i1> %270, %271, !dbg !82
  %273 = fptosi <2 x float> %269 to <2 x i8>, !dbg !83
  %274 = select <2 x i1> %272, <2 x i8> %273, <2 x i8> splat (i8 127), !dbg !84
  %275 = add i32 %12, %252, !dbg !85
  %276 = sext i32 %275 to i64, !dbg !86
  %277 = getelementptr i8, ptr addrspace(1) %3, i64 %276, !dbg !86
  %278 = bitcast <2 x i8> %274 to i16, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %278, ptr addrspace(1) %277, i1 %9) #4, !dbg !87
  %279 = icmp samesign ult i32 %.pre-phi15.in, 3072, !dbg !88
  %280 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi19, !dbg !36
  %281 = and i1 %9, %279, !dbg !89
  %282 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %280, i1 %281) #4, !dbg !70
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !70
  %284 = extractelement <2 x bfloat> %283, i64 0, !dbg !70
  %285 = extractelement <2 x bfloat> %283, i64 1, !dbg !70
  %286 = fpext bfloat %284 to float, !dbg !71
  %287 = fpext bfloat %285 to float, !dbg !71
  %288 = fmul float %251, %286, !dbg !72
  %289 = fmul float %251, %287, !dbg !72
  %290 = tail call float @llvm.nvvm.round.f(float %288) #4, !dbg !73
  %291 = tail call float @llvm.nvvm.round.f(float %289) #4, !dbg !73
  %292 = insertelement <2 x float> poison, float %290, i64 0, !dbg !74
  %293 = insertelement <2 x float> %292, float %291, i64 1, !dbg !74
  %294 = fcmp ogt <2 x float> %293, splat (float -1.270000e+02), !dbg !74
  %295 = fcmp uno <2 x float> %293, zeroinitializer, !dbg !76
  %296 = or <2 x i1> %294, %295, !dbg !77
  %297 = select <2 x i1> %296, <2 x float> %293, <2 x float> splat (float -1.270000e+02), !dbg !78
  %298 = fcmp olt <2 x float> %297, splat (float 1.270000e+02), !dbg !79
  %299 = fcmp uno <2 x float> %297, zeroinitializer, !dbg !81
  %300 = or <2 x i1> %298, %299, !dbg !82
  %301 = fptosi <2 x float> %297 to <2 x i8>, !dbg !83
  %302 = select <2 x i1> %300, <2 x i8> %301, <2 x i8> splat (i8 127), !dbg !84
  %303 = add i32 %.pre-phi15.in, %252, !dbg !85
  %304 = sext i32 %303 to i64, !dbg !86
  %305 = getelementptr i8, ptr addrspace(1) %3, i64 %304, !dbg !86
  %306 = bitcast <2 x i8> %302 to i16, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %306, ptr addrspace(1) %305, i1 %281) #4, !dbg !87
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 43, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 144, scope: !6)
!24 = !DILocation(line: 33, column: 29, scope: !6)
!25 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !26)
!26 = !DILocation(line: 39, column: 45, scope: !6)
!27 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !26)
!28 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !26)
!29 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 48, scope: !6)
!31 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 45, scope: !6)
!33 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !32)
!34 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !32)
!35 = !DILocation(line: 42, column: 48, scope: !6)
!36 = !DILocation(line: 53, column: 34, scope: !6)
!37 = !DILocation(line: 94, column: 15, scope: !38, inlinedAt: !22)
!38 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!39 = !DILocation(line: 96, column: 21, scope: !38, inlinedAt: !22)
!40 = !DILocation(line: 96, column: 16, scope: !38, inlinedAt: !22)
!41 = !DILocation(line: 97, column: 29, scope: !38, inlinedAt: !22)
!42 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 38, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !38, inlinedAt: !43)
!45 = !DILocation(line: 104, column: 21, scope: !38, inlinedAt: !43)
!46 = !DILocation(line: 104, column: 16, scope: !38, inlinedAt: !43)
!47 = !DILocation(line: 105, column: 29, scope: !38, inlinedAt: !43)
!48 = !DILocation(line: 45, column: 25, scope: !6)
!49 = !DILocation(line: 45, column: 36, scope: !6)
!50 = !DILocation(line: 46, column: 25, scope: !6)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !53)
!53 = !DILocation(line: 55, column: 44, scope: !6)
!54 = !DILocation(line: 56, column: 16, scope: !6)
!55 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !56)
!56 = !DILocation(line: 57, column: 45, scope: !6)
!57 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !58)
!58 = !DILocation(line: 58, column: 45, scope: !6)
!59 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !58)
!60 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !58)
!61 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !58)
!62 = !DILocation(line: 60, column: 24, scope: !6)
!63 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !64)
!64 = !DILocation(line: 63, column: 46, scope: !6)
!65 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !64)
!66 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !64)
!67 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !64)
!68 = !DILocation(line: 66, column: 25, scope: !6)
!69 = !DILocation(line: 78, column: 41, scope: !6)
!70 = !DILocation(line: 53, column: 83, scope: !6)
!71 = !DILocation(line: 53, column: 145, scope: !6)
!72 = !DILocation(line: 69, column: 23, scope: !6)
!73 = !DILocation(line: 70, column: 36, scope: !6)
!74 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !75)
!75 = !DILocation(line: 73, column: 46, scope: !6)
!76 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !75)
!77 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !75)
!78 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !75)
!79 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !80)
!80 = !DILocation(line: 75, column: 46, scope: !6)
!81 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !80)
!82 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !80)
!83 = !DILocation(line: 77, column: 25, scope: !6)
!84 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !80)
!85 = !DILocation(line: 78, column: 36, scope: !6)
!86 = !DILocation(line: 78, column: 29, scope: !6)
!87 = !DILocation(line: 78, column: 53, scope: !6)
!88 = !DILocation(line: 49, column: 29, scope: !6)
!89 = !DILocation(line: 53, column: 91, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
