; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 512, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = shl i32 %19, 3, !dbg !11
  %22 = and i32 %21, 504, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = sext i32 %17 to i64, !dbg !12
  %25 = getelementptr bfloat, ptr addrspace(1) %4, i64 %24, !dbg !12
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %34 = bitcast i16 %33 to bfloat, !dbg !13
  %35 = getelementptr bfloat, ptr addrspace(1) %5, i64 %24, !dbg !14
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %44 = bitcast i16 %43 to bfloat, !dbg !15
  %45 = mul i32 %17, 3072, !dbg !16
  %.inv = fcmp oge bfloat %34, 0xR0000, !dbg !17
  %46 = select i1 %.inv, bfloat 0xR0000, bfloat %34, !dbg !17
  %47 = fpext bfloat %46 to float, !dbg !17
  %48 = fsub float 0.000000e+00, %47, !dbg !21
  %.inv3 = fcmp ole bfloat %44, 0xR0000, !dbg !22
  %49 = select i1 %.inv3, bfloat 0xR0000, bfloat %44, !dbg !22
  %50 = fpext bfloat %49 to float, !dbg !22
  %51 = fcmp ogt float %48, %50, !dbg !24
  %52 = fcmp uno float %48, 0.000000e+00, !dbg !26
  %53 = or i1 %52, %51, !dbg !27
  %54 = select i1 %53, float %48, float %50, !dbg !28
  %55 = fmul float %54, 0x3F80204080000000, !dbg !29
  %56 = fcmp ogt float %55, 0x3EE4F8B580000000, !dbg !30
  %57 = fcmp uno float %55, 0.000000e+00, !dbg !32
  %58 = or i1 %56, %57, !dbg !33
  %59 = select i1 %58, float %55, float 0x3EE4F8B580000000, !dbg !34
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !35
  %60 = zext nneg i32 %23 to i64, !dbg !35
  %61 = zext nneg i32 %22 to i64, !dbg !35
  %62 = insertelement <8 x i1> poison, i1 %18, i64 0, !dbg !36
  %63 = shufflevector <8 x i1> %62, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !36
  %64 = insertelement <8 x float> poison, float %59, i64 0, !dbg !37
  %65 = shufflevector <8 x float> %64, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  br label %66, !dbg !35

66:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %83 = phi <8 x float> [ zeroinitializer, %16 ], [ %312, %._crit_edge ]
  %84 = or disjoint i64 %indvars.iv, %61, !dbg !38
  %85 = or disjoint i64 %indvars.iv, %60, !dbg !38
  %86 = trunc nuw nsw i64 %84 to i32, !dbg !39
  %87 = add i32 %45, %86, !dbg !39
  %88 = trunc nuw nsw i64 %85 to i32, !dbg !39
  %89 = add i32 %45, %88, !dbg !39
  %90 = sext i32 %87 to i64, !dbg !40
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !40
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %91, i1 %18) #5, !dbg !41
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !41
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !41
  %95 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !41
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !41
  %97 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !41
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !41
  %99 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !41
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !41
  %101 = add nuw nsw i64 %84, 6144, !dbg !42
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !43
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %85, !dbg !43
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 true) #5, !dbg !44
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !44
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !44
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !44
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !44
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !44
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !44
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !44
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !44
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !44
  %113 = getelementptr bfloat, ptr addrspace(1) %2, i64 %101, !dbg !45
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %113, i1 true) #5, !dbg !46
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !46
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !46
  %117 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !46
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !46
  %119 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !46
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !46
  %121 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !46
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !46
  %123 = getelementptr i32, ptr addrspace(1) %3, i64 %90, !dbg !47
  %124 = sext i32 %89 to i64, !dbg !47
  %125 = getelementptr i32, ptr addrspace(1) %3, i64 %124, !dbg !47
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %18) #5, !dbg !48
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !48
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !48
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !48
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !48
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %18) #5, !dbg !48
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !48
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !48
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !48
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !48
  %136 = getelementptr bfloat, ptr addrspace(1) %6, i64 %84, !dbg !49
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %136, i1 true) #5, !dbg !50
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !50
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !50
  %140 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !50
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !50
  %142 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !50
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !50
  %144 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !50
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !50
  %146 = getelementptr bfloat, ptr addrspace(1) %7, i64 %84, !dbg !51
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %146, i1 true) #5, !dbg !52
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !52
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !52
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !52
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !52
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !52
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !52
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !52
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !52
  %156 = shufflevector <2 x bfloat> %94, <2 x bfloat> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %157 = shufflevector <2 x bfloat> %98, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %158 = shufflevector <8 x bfloat> %156, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !53
  %159 = shufflevector <2 x bfloat> %98, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %160 = shufflevector <8 x bfloat> %158, <8 x bfloat> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !53
  %161 = shufflevector <2 x bfloat> %100, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %162 = shufflevector <8 x bfloat> %160, <8 x bfloat> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !53
  %163 = shufflevector <2 x bfloat> %100, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %164 = shufflevector <8 x bfloat> %162, <8 x bfloat> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !53
  %165 = fpext <8 x bfloat> %164 to <8 x float>, !dbg !53
  %166 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !44
  %167 = insertelement <8 x i32> %166, i32 %105, i64 1, !dbg !44
  %168 = insertelement <8 x i32> %167, i32 %106, i64 2, !dbg !44
  %169 = insertelement <8 x i32> %168, i32 %107, i64 3, !dbg !44
  %170 = insertelement <8 x i32> %169, i32 %109, i64 4, !dbg !44
  %171 = insertelement <8 x i32> %170, i32 %110, i64 5, !dbg !44
  %172 = insertelement <8 x i32> %171, i32 %111, i64 6, !dbg !44
  %173 = insertelement <8 x i32> %172, i32 %112, i64 7, !dbg !44
  %174 = bitcast <8 x i32> %173 to <8 x float>, !dbg !44
  %175 = shufflevector <2 x bfloat> %116, <2 x bfloat> %118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %176 = shufflevector <2 x bfloat> %120, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %177 = shufflevector <8 x bfloat> %175, <8 x bfloat> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !54
  %178 = shufflevector <2 x bfloat> %120, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %179 = shufflevector <8 x bfloat> %177, <8 x bfloat> %178, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !54
  %180 = shufflevector <2 x bfloat> %122, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %181 = shufflevector <8 x bfloat> %179, <8 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !54
  %182 = shufflevector <2 x bfloat> %122, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %183 = shufflevector <8 x bfloat> %181, <8 x bfloat> %182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !54
  %184 = fpext <8 x bfloat> %183 to <8 x float>, !dbg !54
  %185 = shufflevector <2 x bfloat> %139, <2 x bfloat> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %186 = shufflevector <2 x bfloat> %143, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %187 = shufflevector <8 x bfloat> %185, <8 x bfloat> %186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !55
  %188 = shufflevector <2 x bfloat> %143, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %189 = shufflevector <8 x bfloat> %187, <8 x bfloat> %188, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !55
  %190 = shufflevector <2 x bfloat> %145, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %191 = shufflevector <8 x bfloat> %189, <8 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !55
  %192 = shufflevector <2 x bfloat> %145, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %193 = shufflevector <8 x bfloat> %191, <8 x bfloat> %192, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !55
  %194 = fpext <8 x bfloat> %193 to <8 x float>, !dbg !55
  %195 = shufflevector <2 x bfloat> %149, <2 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %196 = shufflevector <2 x bfloat> %153, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %197 = shufflevector <8 x bfloat> %195, <8 x bfloat> %196, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %198 = shufflevector <2 x bfloat> %153, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %199 = shufflevector <8 x bfloat> %197, <8 x bfloat> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %200 = shufflevector <2 x bfloat> %155, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %201 = shufflevector <8 x bfloat> %199, <8 x bfloat> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %202 = shufflevector <2 x bfloat> %155, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %203 = shufflevector <8 x bfloat> %201, <8 x bfloat> %202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %204 = fpext <8 x bfloat> %203 to <8 x float>, !dbg !56
  %205 = fadd <8 x float> %174, %184, !dbg !57
  %206 = insertelement <8 x i32> poison, i32 %127, i64 0, !dbg !58
  %207 = insertelement <8 x i32> %206, i32 %128, i64 1, !dbg !58
  %208 = insertelement <8 x i32> %207, i32 %129, i64 2, !dbg !58
  %209 = insertelement <8 x i32> %208, i32 %130, i64 3, !dbg !58
  %210 = insertelement <8 x i32> %209, i32 %132, i64 4, !dbg !58
  %211 = insertelement <8 x i32> %210, i32 %133, i64 5, !dbg !58
  %212 = insertelement <8 x i32> %211, i32 %134, i64 6, !dbg !58
  %213 = insertelement <8 x i32> %212, i32 %135, i64 7, !dbg !58
  %214 = sitofp <8 x i32> %213 to <8 x float>, !dbg !58
  %215 = fmul <8 x float> %65, %214, !dbg !37
  %216 = fmul <8 x float> %215, %194, !dbg !59
  %217 = fadd <8 x float> %216, %204, !dbg !60
  %218 = fmul <8 x float> %205, %217, !dbg !61
  %219 = fadd <8 x float> %218, %165, !dbg !62
  %220 = icmp eq i64 %indvars.iv, 0, !dbg !63
  br i1 %220, label %._crit_edge, label %221, !dbg !64

221:                                              ; preds = %66
  %222 = fsub <8 x float> %219, %83, !dbg !66
  %223 = extractelement <8 x float> %222, i64 0, !dbg !66
  %224 = fsub <8 x float> %219, %83, !dbg !66
  %225 = extractelement <8 x float> %224, i64 1, !dbg !66
  %226 = fsub <8 x float> %219, %83, !dbg !66
  %227 = extractelement <8 x float> %226, i64 2, !dbg !66
  %228 = fsub <8 x float> %219, %83, !dbg !66
  %229 = extractelement <8 x float> %228, i64 3, !dbg !66
  %230 = fsub <8 x float> %219, %83, !dbg !66
  %231 = extractelement <8 x float> %230, i64 4, !dbg !66
  %232 = fsub <8 x float> %219, %83, !dbg !66
  %233 = extractelement <8 x float> %232, i64 5, !dbg !66
  %234 = fsub <8 x float> %219, %83, !dbg !66
  %235 = extractelement <8 x float> %234, i64 6, !dbg !66
  %236 = fsub <8 x float> %219, %83, !dbg !66
  %237 = extractelement <8 x float> %236, i64 7, !dbg !66
  %238 = fadd float %67, 1.000000e+00, !dbg !67
  %239 = fadd float %68, 1.000000e+00, !dbg !67
  %240 = fadd float %69, 1.000000e+00, !dbg !67
  %241 = fadd float %70, 1.000000e+00, !dbg !67
  %242 = fadd float %71, 1.000000e+00, !dbg !67
  %243 = fadd float %72, 1.000000e+00, !dbg !67
  %244 = fadd float %73, 1.000000e+00, !dbg !67
  %245 = fadd float %74, 1.000000e+00, !dbg !67
  %246 = tail call float @llvm.nvvm.div.full(float %223, float %238), !dbg !68
  %247 = tail call float @llvm.nvvm.div.full(float %225, float %239), !dbg !68
  %248 = tail call float @llvm.nvvm.div.full(float %227, float %240), !dbg !68
  %249 = tail call float @llvm.nvvm.div.full(float %229, float %241), !dbg !68
  %250 = tail call float @llvm.nvvm.div.full(float %231, float %242), !dbg !68
  %251 = tail call float @llvm.nvvm.div.full(float %233, float %243), !dbg !68
  %252 = tail call float @llvm.nvvm.div.full(float %235, float %244), !dbg !68
  %253 = tail call float @llvm.nvvm.div.full(float %237, float %245), !dbg !68
  %254 = insertelement <8 x float> poison, float %246, i64 0, !dbg !69
  %255 = insertelement <8 x float> %254, float %247, i64 1, !dbg !69
  %256 = insertelement <8 x float> %255, float %248, i64 2, !dbg !69
  %257 = insertelement <8 x float> %256, float %249, i64 3, !dbg !69
  %258 = insertelement <8 x float> %257, float %250, i64 4, !dbg !69
  %259 = insertelement <8 x float> %258, float %251, i64 5, !dbg !69
  %260 = insertelement <8 x float> %259, float %252, i64 6, !dbg !69
  %261 = insertelement <8 x float> %260, float %253, i64 7, !dbg !69
  %262 = fadd <8 x float> %83, %261, !dbg !69
  %263 = fsub <8 x float> %219, %262, !dbg !70
  %264 = fsub <8 x float> %219, %262, !dbg !70
  %265 = fsub <8 x float> %219, %262, !dbg !70
  %266 = fsub <8 x float> %219, %262, !dbg !70
  %267 = fsub <8 x float> %219, %262, !dbg !70
  %268 = fsub <8 x float> %219, %262, !dbg !70
  %269 = fsub <8 x float> %219, %262, !dbg !70
  %270 = fsub <8 x float> %219, %262, !dbg !70
  %271 = fmul <8 x float> %222, %263, !dbg !71
  %272 = extractelement <8 x float> %271, i64 0, !dbg !71
  %273 = fmul <8 x float> %224, %264, !dbg !71
  %274 = extractelement <8 x float> %273, i64 1, !dbg !71
  %275 = fmul <8 x float> %226, %265, !dbg !71
  %276 = extractelement <8 x float> %275, i64 2, !dbg !71
  %277 = fmul <8 x float> %228, %266, !dbg !71
  %278 = extractelement <8 x float> %277, i64 3, !dbg !71
  %279 = fmul <8 x float> %230, %267, !dbg !71
  %280 = extractelement <8 x float> %279, i64 4, !dbg !71
  %281 = fmul <8 x float> %232, %268, !dbg !71
  %282 = extractelement <8 x float> %281, i64 5, !dbg !71
  %283 = fmul <8 x float> %234, %269, !dbg !71
  %284 = extractelement <8 x float> %283, i64 6, !dbg !71
  %285 = fmul <8 x float> %236, %270, !dbg !71
  %286 = extractelement <8 x float> %285, i64 7, !dbg !71
  %287 = fadd float %75, %272, !dbg !72
  %288 = fadd float %76, %274, !dbg !72
  %289 = fadd float %77, %276, !dbg !72
  %290 = fadd float %78, %278, !dbg !72
  %291 = fadd float %79, %280, !dbg !72
  %292 = fadd float %80, %282, !dbg !72
  %293 = fadd float %81, %284, !dbg !72
  %294 = fadd float %82, %286, !dbg !72
  br label %._crit_edge, !dbg !64

._crit_edge:                                      ; preds = %66, %221
  %295 = phi float [ %287, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %296 = phi float [ %288, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %297 = phi float [ %289, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %298 = phi float [ %290, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %299 = phi float [ %291, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %300 = phi float [ %292, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %301 = phi float [ %293, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %302 = phi float [ %294, %221 ], [ 0.000000e+00, %66 ], !dbg !65
  %303 = phi float [ %238, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %304 = phi float [ %239, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %305 = phi float [ %240, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %306 = phi float [ %241, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %307 = phi float [ %242, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %308 = phi float [ %243, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %309 = phi float [ %244, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %310 = phi float [ %245, %221 ], [ 1.000000e+00, %66 ], !dbg !65
  %311 = phi <8 x float> [ %262, %221 ], [ %219, %66 ]
  %312 = select <8 x i1> %63, <8 x float> %311, <8 x float> %83, !dbg !36
  %313 = select i1 %18, float %295, float %75, !dbg !73
  %314 = select i1 %18, float %296, float %76, !dbg !73
  %315 = select i1 %18, float %297, float %77, !dbg !73
  %316 = select i1 %18, float %298, float %78, !dbg !73
  %317 = select i1 %18, float %299, float %79, !dbg !73
  %318 = select i1 %18, float %300, float %80, !dbg !73
  %319 = select i1 %18, float %301, float %81, !dbg !73
  %320 = select i1 %18, float %302, float %82, !dbg !73
  %321 = select i1 %18, float %303, float %67, !dbg !74
  %322 = select i1 %18, float %304, float %68, !dbg !74
  %323 = select i1 %18, float %305, float %69, !dbg !74
  %324 = select i1 %18, float %306, float %70, !dbg !74
  %325 = select i1 %18, float %307, float %71, !dbg !74
  %326 = select i1 %18, float %308, float %72, !dbg !74
  %327 = select i1 %18, float %309, float %73, !dbg !74
  %328 = select i1 %18, float %310, float %74, !dbg !74
  %329 = getelementptr bfloat, ptr addrspace(1) %8, i64 %90, !dbg !75
  %330 = extractelement <8 x float> %219, i64 0, !dbg !76
  %331 = fptrunc float %330 to bfloat, !dbg !76
  %332 = extractelement <8 x float> %219, i64 1, !dbg !76
  %333 = fptrunc float %332 to bfloat, !dbg !76
  %334 = extractelement <8 x float> %219, i64 2, !dbg !76
  %335 = fptrunc float %334 to bfloat, !dbg !76
  %336 = extractelement <8 x float> %219, i64 3, !dbg !76
  %337 = fptrunc float %336 to bfloat, !dbg !76
  %338 = extractelement <8 x float> %219, i64 4, !dbg !76
  %339 = fptrunc float %338 to bfloat, !dbg !76
  %340 = extractelement <8 x float> %219, i64 5, !dbg !76
  %341 = fptrunc float %340 to bfloat, !dbg !76
  %342 = extractelement <8 x float> %219, i64 6, !dbg !76
  %343 = fptrunc float %342 to bfloat, !dbg !76
  %344 = extractelement <8 x float> %219, i64 7, !dbg !76
  %345 = fptrunc float %344 to bfloat, !dbg !76
  %346 = insertelement <2 x bfloat> poison, bfloat %331, i64 0, !dbg !76
  %347 = insertelement <2 x bfloat> %346, bfloat %333, i64 1, !dbg !76
  %348 = bitcast <2 x bfloat> %347 to i32, !dbg !76
  %349 = insertelement <2 x bfloat> poison, bfloat %335, i64 0, !dbg !76
  %350 = insertelement <2 x bfloat> %349, bfloat %337, i64 1, !dbg !76
  %351 = bitcast <2 x bfloat> %350 to i32, !dbg !76
  %352 = insertelement <2 x bfloat> poison, bfloat %339, i64 0, !dbg !76
  %353 = insertelement <2 x bfloat> %352, bfloat %341, i64 1, !dbg !76
  %354 = bitcast <2 x bfloat> %353 to i32, !dbg !76
  %355 = insertelement <2 x bfloat> poison, bfloat %343, i64 0, !dbg !76
  %356 = insertelement <2 x bfloat> %355, bfloat %345, i64 1, !dbg !76
  %357 = bitcast <2 x bfloat> %356 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %351, i32 %354, i32 %357, ptr addrspace(1) %329, i1 %18) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !35
  %358 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !35
  br i1 %358, label %66, label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %359 = lshr i32 %19, 5, !dbg !11
  %360 = extractelement <8 x float> %312, i64 0, !dbg !77
  %361 = extractelement <8 x float> %312, i64 1, !dbg !77
  %362 = fsub float %361, %360, !dbg !77
  %363 = fadd float %321, %322, !dbg !80
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !81
  %365 = tail call float @llvm.nvvm.div.full(float %322, float %363), !dbg !82
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !83
  %367 = fmul float %362, %366, !dbg !84
  %368 = fadd float %360, %367, !dbg !85
  %369 = fadd float %313, %314, !dbg !86
  %370 = fmul float %362, %362, !dbg !87
  %371 = fmul float %370, %321, !dbg !88
  %372 = fmul float %371, %366, !dbg !89
  %373 = fadd float %369, %372, !dbg !90
  %374 = extractelement <8 x float> %312, i64 2, !dbg !77
  %375 = fsub float %374, %368, !dbg !77
  %376 = fadd float %323, %363, !dbg !80
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !81
  %378 = tail call float @llvm.nvvm.div.full(float %323, float %376), !dbg !82
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !83
  %380 = fmul float %379, %375, !dbg !84
  %381 = fadd float %368, %380, !dbg !85
  %382 = fadd float %315, %373, !dbg !86
  %383 = fmul float %375, %375, !dbg !87
  %384 = fmul float %363, %383, !dbg !88
  %385 = fmul float %379, %384, !dbg !89
  %386 = fadd float %382, %385, !dbg !90
  %387 = extractelement <8 x float> %312, i64 3, !dbg !77
  %388 = fsub float %387, %381, !dbg !77
  %389 = fadd float %324, %376, !dbg !80
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !81
  %391 = tail call float @llvm.nvvm.div.full(float %324, float %389), !dbg !82
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !83
  %393 = fmul float %392, %388, !dbg !84
  %394 = fadd float %381, %393, !dbg !85
  %395 = fadd float %316, %386, !dbg !86
  %396 = fmul float %388, %388, !dbg !87
  %397 = fmul float %376, %396, !dbg !88
  %398 = fmul float %392, %397, !dbg !89
  %399 = fadd float %395, %398, !dbg !90
  %400 = extractelement <8 x float> %312, i64 4, !dbg !77
  %401 = fsub float %400, %394, !dbg !77
  %402 = fadd float %325, %389, !dbg !80
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !81
  %404 = tail call float @llvm.nvvm.div.full(float %325, float %402), !dbg !82
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !83
  %406 = fmul float %405, %401, !dbg !84
  %407 = fadd float %394, %406, !dbg !85
  %408 = fadd float %317, %399, !dbg !86
  %409 = fmul float %401, %401, !dbg !87
  %410 = fmul float %389, %409, !dbg !88
  %411 = fmul float %405, %410, !dbg !89
  %412 = fadd float %408, %411, !dbg !90
  %413 = extractelement <8 x float> %312, i64 5, !dbg !77
  %414 = fsub float %413, %407, !dbg !77
  %415 = fadd float %326, %402, !dbg !80
  %416 = fcmp oeq float %415, 0.000000e+00, !dbg !81
  %417 = tail call float @llvm.nvvm.div.full(float %326, float %415), !dbg !82
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !83
  %419 = fmul float %418, %414, !dbg !84
  %420 = fadd float %407, %419, !dbg !85
  %421 = fadd float %318, %412, !dbg !86
  %422 = fmul float %414, %414, !dbg !87
  %423 = fmul float %402, %422, !dbg !88
  %424 = fmul float %418, %423, !dbg !89
  %425 = fadd float %421, %424, !dbg !90
  %426 = extractelement <8 x float> %312, i64 6, !dbg !77
  %427 = fsub float %426, %420, !dbg !77
  %428 = fadd float %327, %415, !dbg !80
  %429 = fcmp oeq float %428, 0.000000e+00, !dbg !81
  %430 = tail call float @llvm.nvvm.div.full(float %327, float %428), !dbg !82
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !83
  %432 = fmul float %431, %427, !dbg !84
  %433 = fadd float %420, %432, !dbg !85
  %434 = fadd float %319, %425, !dbg !86
  %435 = fmul float %427, %427, !dbg !87
  %436 = fmul float %415, %435, !dbg !88
  %437 = fmul float %431, %436, !dbg !89
  %438 = fadd float %434, %437, !dbg !90
  %439 = extractelement <8 x float> %312, i64 7, !dbg !77
  %440 = fsub float %439, %433, !dbg !77
  %441 = fadd float %328, %428, !dbg !80
  %442 = fcmp oeq float %441, 0.000000e+00, !dbg !81
  %443 = tail call float @llvm.nvvm.div.full(float %328, float %441), !dbg !82
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !83
  %445 = fmul float %444, %440, !dbg !84
  %446 = fadd float %433, %445, !dbg !85
  %447 = fadd float %320, %438, !dbg !86
  %448 = fmul float %440, %440, !dbg !87
  %449 = fmul float %428, %448, !dbg !88
  %450 = fmul float %444, %449, !dbg !89
  %451 = fadd float %447, %450, !dbg !90
  %452 = bitcast float %446 to i32, !dbg !91
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 16, i32 31), !dbg !91
  %454 = bitcast i32 %453 to float, !dbg !91
  %455 = bitcast float %451 to i32, !dbg !91
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 16, i32 31), !dbg !91
  %457 = bitcast i32 %456 to float, !dbg !91
  %458 = bitcast float %441 to i32, !dbg !91
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 16, i32 31), !dbg !91
  %460 = bitcast i32 %459 to float, !dbg !91
  %461 = fsub float %454, %446, !dbg !77
  %462 = fadd float %441, %460, !dbg !80
  %463 = fcmp oeq float %462, 0.000000e+00, !dbg !81
  %464 = tail call float @llvm.nvvm.div.full(float %460, float %462), !dbg !82
  %465 = select i1 %463, float 0.000000e+00, float %464, !dbg !83
  %466 = fmul float %465, %461, !dbg !84
  %467 = fadd float %446, %466, !dbg !85
  %468 = fadd float %451, %457, !dbg !86
  %469 = fmul float %461, %461, !dbg !87
  %470 = fmul float %441, %469, !dbg !88
  %471 = fmul float %465, %470, !dbg !89
  %472 = fadd float %468, %471, !dbg !90
  %473 = bitcast float %467 to i32, !dbg !91
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 8, i32 31), !dbg !91
  %475 = bitcast i32 %474 to float, !dbg !91
  %476 = bitcast float %472 to i32, !dbg !91
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 8, i32 31), !dbg !91
  %478 = bitcast i32 %477 to float, !dbg !91
  %479 = bitcast float %462 to i32, !dbg !91
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !91
  %481 = bitcast i32 %480 to float, !dbg !91
  %482 = fsub float %475, %467, !dbg !77
  %483 = fadd float %462, %481, !dbg !80
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !81
  %485 = tail call float @llvm.nvvm.div.full(float %481, float %483), !dbg !82
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !83
  %487 = fmul float %486, %482, !dbg !84
  %488 = fadd float %467, %487, !dbg !85
  %489 = fadd float %472, %478, !dbg !86
  %490 = fmul float %482, %482, !dbg !87
  %491 = fmul float %462, %490, !dbg !88
  %492 = fmul float %486, %491, !dbg !89
  %493 = fadd float %489, %492, !dbg !90
  %494 = bitcast float %488 to i32, !dbg !91
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 4, i32 31), !dbg !91
  %496 = bitcast i32 %495 to float, !dbg !91
  %497 = bitcast float %493 to i32, !dbg !91
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 4, i32 31), !dbg !91
  %499 = bitcast i32 %498 to float, !dbg !91
  %500 = bitcast float %483 to i32, !dbg !91
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 4, i32 31), !dbg !91
  %502 = bitcast i32 %501 to float, !dbg !91
  %503 = fsub float %496, %488, !dbg !77
  %504 = fadd float %483, %502, !dbg !80
  %505 = fcmp oeq float %504, 0.000000e+00, !dbg !81
  %506 = tail call float @llvm.nvvm.div.full(float %502, float %504), !dbg !82
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !83
  %508 = fmul float %507, %503, !dbg !84
  %509 = fadd float %488, %508, !dbg !85
  %510 = fadd float %493, %499, !dbg !86
  %511 = fmul float %503, %503, !dbg !87
  %512 = fmul float %483, %511, !dbg !88
  %513 = fmul float %507, %512, !dbg !89
  %514 = fadd float %510, %513, !dbg !90
  %515 = bitcast float %509 to i32, !dbg !91
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 2, i32 31), !dbg !91
  %517 = bitcast i32 %516 to float, !dbg !91
  %518 = bitcast float %514 to i32, !dbg !91
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !91
  %520 = bitcast i32 %519 to float, !dbg !91
  %521 = bitcast float %504 to i32, !dbg !91
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !91
  %523 = bitcast i32 %522 to float, !dbg !91
  %524 = fsub float %517, %509, !dbg !77
  %525 = fadd float %504, %523, !dbg !80
  %526 = fcmp oeq float %525, 0.000000e+00, !dbg !81
  %527 = tail call float @llvm.nvvm.div.full(float %523, float %525), !dbg !82
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !83
  %529 = fmul float %528, %524, !dbg !84
  %530 = fadd float %509, %529, !dbg !85
  %531 = fadd float %514, %520, !dbg !86
  %532 = fmul float %524, %524, !dbg !87
  %533 = fmul float %504, %532, !dbg !88
  %534 = fmul float %528, %533, !dbg !89
  %535 = fadd float %531, %534, !dbg !90
  %536 = bitcast float %530 to i32, !dbg !91
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 1, i32 31), !dbg !91
  %538 = bitcast i32 %537 to float, !dbg !91
  %539 = bitcast float %535 to i32, !dbg !91
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !91
  %541 = bitcast i32 %540 to float, !dbg !91
  %542 = bitcast float %525 to i32, !dbg !91
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !91
  %544 = bitcast i32 %543 to float, !dbg !91
  %545 = fsub float %538, %530, !dbg !77
  %546 = fadd float %525, %544, !dbg !80
  %547 = fcmp oeq float %546, 0.000000e+00, !dbg !81
  %548 = tail call float @llvm.nvvm.div.full(float %544, float %546), !dbg !82
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !83
  %550 = fmul float %549, %545, !dbg !84
  %551 = fadd float %530, %550, !dbg !85
  %552 = fadd float %535, %541, !dbg !86
  %553 = fmul float %545, %545, !dbg !87
  %554 = fmul float %525, %553, !dbg !88
  %555 = fmul float %549, %554, !dbg !89
  %556 = fadd float %552, %555, !dbg !90
  %557 = and i32 %359, 1, !dbg !91
  %558 = icmp eq i32 %20, 0, !dbg !91
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i32 %557, !dbg !91
  %560 = bitcast float %551 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %560, i1 %558) #5, !dbg !91
  %561 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %557, !dbg !91
  %562 = bitcast float %556 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 %558) #5, !dbg !91
  %563 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %557, !dbg !91
  %564 = bitcast float %546 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, <1 x i32> %564, i1 %558) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %565 = icmp slt i32 %19, 2, !dbg !91
  %566 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !91
  %567 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %566, i1 %565) #5, !dbg !91
  %568 = bitcast i32 %567 to float, !dbg !91
  %569 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %19, !dbg !91
  %570 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %569, i1 %565) #5, !dbg !91
  %571 = bitcast i32 %570 to float, !dbg !91
  %572 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !91
  %573 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %572, i1 %565) #5, !dbg !91
  %574 = bitcast i32 %573 to float, !dbg !91
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 1, i32 31), !dbg !91
  %576 = bitcast i32 %575 to float, !dbg !91
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 1, i32 31), !dbg !91
  %578 = bitcast i32 %577 to float, !dbg !91
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !91
  %580 = bitcast i32 %579 to float, !dbg !91
  %581 = fsub float %576, %568, !dbg !77
  %582 = fadd float %574, %580, !dbg !80
  %583 = fcmp oeq float %582, 0.000000e+00, !dbg !81
  %584 = tail call float @llvm.nvvm.div.full(float %580, float %582), !dbg !82
  %585 = select i1 %583, float 0.000000e+00, float %584, !dbg !83
  %586 = fmul float %581, %585, !dbg !84
  %587 = fadd float %586, %568, !dbg !85
  %588 = fadd float %571, %578, !dbg !86
  %589 = fmul float %581, %581, !dbg !87
  %590 = fmul float %589, %574, !dbg !88
  %591 = fmul float %590, %585, !dbg !89
  %592 = fadd float %588, %591, !dbg !90
  %593 = and i32 %19, 1, !dbg !91
  %594 = icmp eq i32 %593, 0, !dbg !91
  %595 = and i1 %565, %594, !dbg !91
  %596 = bitcast float %587 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %596, i1 %595) #5, !dbg !91
  %597 = bitcast float %592 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %569, <1 x i32> %597, i1 %595) #5, !dbg !91
  %598 = bitcast float %582 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %598, i1 %595) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %599 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %600 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !91
  %601 = tail call float @llvm.nvvm.div.full(float %600, float 3.072000e+03), !dbg !92
  %602 = fadd float %601, 0x3EB0C6F7A0000000, !dbg !93
  %603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %604 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %605 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %606 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %608 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %609 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %610 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i39 = icmp eq i32 %610, 0, !dbg !94
  br i1 %.not.i39, label %613, label %611, !dbg !94

611:                                              ; preds = %__nv_rsqrtf.exit
  %612 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %602), !dbg !94
  br label %__nv_rsqrtf.exit41, !dbg !94

613:                                              ; preds = %__nv_rsqrtf.exit
  %614 = tail call float @llvm.nvvm.rsqrt.approx.f(float %602), !dbg !94
  br label %__nv_rsqrtf.exit41, !dbg !94

__nv_rsqrtf.exit41:                               ; preds = %611, %613
  %.0.i40 = phi float [ %612, %611 ], [ %614, %613 ], !dbg !94
  %615 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !95
  %616 = shufflevector <2 x i1> %615, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %617 = insertelement <2 x float> poison, float %.0.i40, i64 0, !dbg !96
  %618 = shufflevector <2 x float> %617, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %619 = insertelement <2 x float> poison, float %599, i64 0, !dbg !97
  %620 = shufflevector <2 x float> %619, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %621 = insertelement <4 x float> poison, float %.0.i40, i64 0, !dbg !96
  %622 = shufflevector <4 x float> %621, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !96
  %623 = insertelement <4 x float> poison, float %599, i64 0, !dbg !97
  %624 = shufflevector <4 x float> %623, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !97
  %625 = insertelement <4 x i1> poison, i1 %18, i64 0, !dbg !98
  %626 = shufflevector <4 x i1> %625, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !98
  br label %627, !dbg !99

627:                                              ; preds = %__nv_rsqrtf.exit41, %627
  %indvars.iv85 = phi i64 [ 0, %__nv_rsqrtf.exit41 ], [ %indvars.iv.next86, %627 ]
  %628 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %781, %627 ]
  %629 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %782, %627 ]
  %630 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit41 ], [ %746, %627 ]
  %631 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit41 ], [ %791, %627 ]
  %632 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %745, %627 ]
  %633 = or disjoint i64 %indvars.iv85, %61, !dbg !100
  %634 = or disjoint i64 %indvars.iv85, %60, !dbg !100
  %635 = trunc nuw nsw i64 %633 to i32, !dbg !101
  %636 = add i32 %45, %635, !dbg !101
  %637 = sext i32 %636 to i64, !dbg !102
  %638 = getelementptr bfloat, ptr addrspace(1) %8, i64 %637, !dbg !102
  %639 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %638, i1 %18) #5, !dbg !103
  %640 = extractvalue { i32, i32, i32, i32 } %639, 0, !dbg !103
  %641 = bitcast i32 %640 to <2 x bfloat>, !dbg !103
  %642 = extractvalue { i32, i32, i32, i32 } %639, 1, !dbg !103
  %643 = bitcast i32 %642 to <2 x bfloat>, !dbg !103
  %644 = extractvalue { i32, i32, i32, i32 } %639, 2, !dbg !103
  %645 = bitcast i32 %644 to <2 x bfloat>, !dbg !103
  %646 = extractvalue { i32, i32, i32, i32 } %639, 3, !dbg !103
  %647 = bitcast i32 %646 to <2 x bfloat>, !dbg !103
  %648 = or disjoint i64 %633, 12288, !dbg !104
  %649 = getelementptr float, ptr addrspace(1) %1, i64 %648, !dbg !105
  %650 = getelementptr float, ptr addrspace(1) %1, i64 %634, !dbg !105
  %651 = getelementptr i8, ptr addrspace(1) %650, i64 49152, !dbg !105
  %652 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %649, i1 true) #5, !dbg !106
  %653 = extractvalue { i32, i32, i32, i32 } %652, 0, !dbg !106
  %654 = extractvalue { i32, i32, i32, i32 } %652, 1, !dbg !106
  %655 = extractvalue { i32, i32, i32, i32 } %652, 2, !dbg !106
  %656 = extractvalue { i32, i32, i32, i32 } %652, 3, !dbg !106
  %657 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %651, i1 true) #5, !dbg !106
  %658 = extractvalue { i32, i32, i32, i32 } %657, 0, !dbg !106
  %659 = extractvalue { i32, i32, i32, i32 } %657, 1, !dbg !106
  %660 = extractvalue { i32, i32, i32, i32 } %657, 2, !dbg !106
  %661 = extractvalue { i32, i32, i32, i32 } %657, 3, !dbg !106
  %662 = getelementptr bfloat, ptr addrspace(1) %2, i64 %648, !dbg !107
  %663 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %662, i1 true) #5, !dbg !108
  %664 = extractvalue { i32, i32, i32, i32 } %663, 0, !dbg !108
  %665 = bitcast i32 %664 to <2 x bfloat>, !dbg !108
  %666 = extractvalue { i32, i32, i32, i32 } %663, 1, !dbg !108
  %667 = bitcast i32 %666 to <2 x bfloat>, !dbg !108
  %668 = extractvalue { i32, i32, i32, i32 } %663, 2, !dbg !108
  %669 = bitcast i32 %668 to <2 x bfloat>, !dbg !108
  %670 = extractvalue { i32, i32, i32, i32 } %663, 3, !dbg !108
  %671 = bitcast i32 %670 to <2 x bfloat>, !dbg !108
  %672 = add nuw nsw i64 %633, 9216, !dbg !109
  %673 = getelementptr float, ptr addrspace(1) %1, i64 %672, !dbg !110
  %674 = getelementptr i8, ptr addrspace(1) %650, i64 36864, !dbg !110
  %675 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %673, i1 true) #5, !dbg !111
  %676 = extractvalue { i32, i32, i32, i32 } %675, 0, !dbg !111
  %677 = extractvalue { i32, i32, i32, i32 } %675, 1, !dbg !111
  %678 = extractvalue { i32, i32, i32, i32 } %675, 2, !dbg !111
  %679 = extractvalue { i32, i32, i32, i32 } %675, 3, !dbg !111
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %674, i1 true) #5, !dbg !111
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !111
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !111
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !111
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !111
  %685 = getelementptr bfloat, ptr addrspace(1) %2, i64 %672, !dbg !112
  %686 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %685, i1 true) #5, !dbg !113
  %687 = extractvalue { i32, i32, i32, i32 } %686, 0, !dbg !113
  %688 = bitcast i32 %687 to <2 x bfloat>, !dbg !113
  %689 = extractvalue { i32, i32, i32, i32 } %686, 1, !dbg !113
  %690 = bitcast i32 %689 to <2 x bfloat>, !dbg !113
  %691 = extractvalue { i32, i32, i32, i32 } %686, 2, !dbg !113
  %692 = bitcast i32 %691 to <2 x bfloat>, !dbg !113
  %693 = extractvalue { i32, i32, i32, i32 } %686, 3, !dbg !113
  %694 = bitcast i32 %693 to <2 x bfloat>, !dbg !113
  %695 = fcmp uno <8 x float> %631, zeroinitializer, !dbg !114
  %696 = fcmp uno <4 x float> %632, zeroinitializer, !dbg !116
  %697 = fcmp uno float %628, 0.000000e+00, !dbg !116
  %698 = fcmp uno float %629, 0.000000e+00, !dbg !116
  %699 = fcmp uno <2 x float> %630, zeroinitializer, !dbg !114
  %700 = fpext <2 x bfloat> %641 to <2 x float>, !dbg !118
  %701 = insertelement <2 x i32> poison, i32 %653, i64 0, !dbg !106
  %702 = insertelement <2 x i32> %701, i32 %654, i64 1, !dbg !106
  %703 = bitcast <2 x i32> %702 to <2 x float>, !dbg !106
  %704 = fpext <2 x bfloat> %665 to <2 x float>, !dbg !119
  %705 = insertelement <2 x i32> poison, i32 %676, i64 0, !dbg !111
  %706 = insertelement <2 x i32> %705, i32 %677, i64 1, !dbg !111
  %707 = bitcast <2 x i32> %706 to <2 x float>, !dbg !111
  %708 = fpext <2 x bfloat> %688 to <2 x float>, !dbg !120
  %709 = fsub <2 x float> %700, %620, !dbg !97
  %710 = fmul <2 x float> %618, %709, !dbg !96
  %711 = fadd <2 x float> %703, %704, !dbg !121
  %712 = fadd <2 x float> %711, splat (float 1.000000e+00), !dbg !122
  %713 = fmul <2 x float> %710, %712, !dbg !123
  %714 = fadd <2 x float> %707, %708, !dbg !124
  %715 = fadd <2 x float> %713, %714, !dbg !125
  %716 = fcmp ogt <2 x float> %630, %715, !dbg !126
  %717 = or <2 x i1> %699, %716, !dbg !127
  %718 = select <2 x i1> %717, <2 x float> %630, <2 x float> %715, !dbg !128
  %719 = shufflevector <2 x bfloat> %643, <2 x bfloat> %645, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !118
  %720 = fpext <4 x bfloat> %719 to <4 x float>, !dbg !118
  %721 = insertelement <4 x i32> poison, i32 %655, i64 0, !dbg !106
  %722 = insertelement <4 x i32> %721, i32 %656, i64 1, !dbg !106
  %723 = insertelement <4 x i32> %722, i32 %658, i64 2, !dbg !106
  %724 = insertelement <4 x i32> %723, i32 %659, i64 3, !dbg !106
  %725 = bitcast <4 x i32> %724 to <4 x float>, !dbg !106
  %726 = shufflevector <2 x bfloat> %667, <2 x bfloat> %669, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !119
  %727 = fpext <4 x bfloat> %726 to <4 x float>, !dbg !119
  %728 = insertelement <4 x i32> poison, i32 %678, i64 0, !dbg !111
  %729 = insertelement <4 x i32> %728, i32 %679, i64 1, !dbg !111
  %730 = insertelement <4 x i32> %729, i32 %681, i64 2, !dbg !111
  %731 = insertelement <4 x i32> %730, i32 %682, i64 3, !dbg !111
  %732 = bitcast <4 x i32> %731 to <4 x float>, !dbg !111
  %733 = shufflevector <2 x bfloat> %690, <2 x bfloat> %692, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %734 = fpext <4 x bfloat> %733 to <4 x float>, !dbg !120
  %735 = fsub <4 x float> %720, %624, !dbg !97
  %736 = fmul <4 x float> %622, %735, !dbg !96
  %737 = fadd <4 x float> %725, %727, !dbg !121
  %738 = fadd <4 x float> %737, splat (float 1.000000e+00), !dbg !122
  %739 = fmul <4 x float> %736, %738, !dbg !123
  %740 = fadd <4 x float> %732, %734, !dbg !124
  %741 = fadd <4 x float> %739, %740, !dbg !125
  %742 = fcmp olt <4 x float> %632, %741, !dbg !129
  %743 = or <4 x i1> %696, %742, !dbg !130
  %744 = select <4 x i1> %743, <4 x float> %632, <4 x float> %741, !dbg !131
  %745 = select <4 x i1> %626, <4 x float> %744, <4 x float> %632, !dbg !98
  %746 = select <2 x i1> %616, <2 x float> %718, <2 x float> %630, !dbg !95
  %747 = getelementptr bfloat, ptr addrspace(1) %9, i64 %637, !dbg !132
  %748 = fptrunc <2 x float> %715 to <2 x bfloat>, !dbg !133
  %749 = extractelement <4 x float> %741, i64 0, !dbg !133
  %750 = fptrunc float %749 to bfloat, !dbg !133
  %751 = extractelement <4 x float> %741, i64 1, !dbg !133
  %752 = fptrunc float %751 to bfloat, !dbg !133
  %753 = extractelement <4 x float> %741, i64 2, !dbg !133
  %754 = fptrunc float %753 to bfloat, !dbg !133
  %755 = extractelement <4 x float> %741, i64 3, !dbg !133
  %756 = fptrunc float %755 to bfloat, !dbg !133
  %757 = fpext <2 x bfloat> %647 to <2 x float>, !dbg !118
  %758 = insertelement <2 x i32> poison, i32 %660, i64 0, !dbg !106
  %759 = insertelement <2 x i32> %758, i32 %661, i64 1, !dbg !106
  %760 = bitcast <2 x i32> %759 to <2 x float>, !dbg !106
  %761 = fpext <2 x bfloat> %671 to <2 x float>, !dbg !119
  %762 = insertelement <2 x i32> poison, i32 %683, i64 0, !dbg !111
  %763 = insertelement <2 x i32> %762, i32 %684, i64 1, !dbg !111
  %764 = bitcast <2 x i32> %763 to <2 x float>, !dbg !111
  %765 = fpext <2 x bfloat> %694 to <2 x float>, !dbg !120
  %766 = fsub <2 x float> %757, %620, !dbg !97
  %767 = fmul <2 x float> %618, %766, !dbg !96
  %768 = fadd <2 x float> %760, %761, !dbg !121
  %769 = fadd <2 x float> %768, splat (float 1.000000e+00), !dbg !122
  %770 = fmul <2 x float> %767, %769, !dbg !123
  %771 = fadd <2 x float> %764, %765, !dbg !124
  %772 = fadd <2 x float> %770, %771, !dbg !125
  %773 = extractelement <2 x float> %772, i64 0, !dbg !131
  %774 = fcmp olt float %628, %773, !dbg !129
  %775 = extractelement <2 x float> %772, i64 1, !dbg !131
  %776 = fcmp olt float %629, %775, !dbg !129
  %777 = or i1 %697, %774, !dbg !130
  %778 = or i1 %698, %776, !dbg !130
  %779 = select i1 %777, float %628, float %773, !dbg !131
  %780 = select i1 %778, float %629, float %775, !dbg !131
  %781 = select i1 %18, float %779, float %628, !dbg !98
  %782 = select i1 %18, float %780, float %629, !dbg !98
  %783 = shufflevector <2 x float> %715, <2 x float> %772, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !126
  %784 = shufflevector <4 x float> %741, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %785 = shufflevector <8 x float> %784, <8 x float> %783, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !126
  %786 = fcmp ogt <8 x float> %631, %785, !dbg !126
  %787 = fcmp olt <8 x float> %631, %785, !dbg !126
  %788 = shufflevector <8 x i1> %786, <8 x i1> %787, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !126
  %789 = or <8 x i1> %695, %788, !dbg !127
  %790 = select <8 x i1> %789, <8 x float> %631, <8 x float> %785, !dbg !128
  %791 = select <8 x i1> %63, <8 x float> %790, <8 x float> %631, !dbg !95
  %792 = fptrunc <2 x float> %772 to <2 x bfloat>, !dbg !133
  %793 = bitcast <2 x bfloat> %748 to i32, !dbg !133
  %794 = insertelement <2 x bfloat> poison, bfloat %750, i64 0, !dbg !133
  %795 = insertelement <2 x bfloat> %794, bfloat %752, i64 1, !dbg !133
  %796 = bitcast <2 x bfloat> %795 to i32, !dbg !133
  %797 = insertelement <2 x bfloat> poison, bfloat %754, i64 0, !dbg !133
  %798 = insertelement <2 x bfloat> %797, bfloat %756, i64 1, !dbg !133
  %799 = bitcast <2 x bfloat> %798 to i32, !dbg !133
  %800 = bitcast <2 x bfloat> %792 to i32, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %793, i32 %796, i32 %799, i32 %800, ptr addrspace(1) %747, i1 %18) #5, !dbg !133
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 512, !dbg !99
  %801 = icmp samesign ult i64 %indvars.iv85, 2560, !dbg !99
  br i1 %801, label %627, label %802, !dbg !99

802:                                              ; preds = %627
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %803 = extractelement <8 x float> %791, i64 6, !dbg !136
  %804 = extractelement <8 x float> %791, i64 7, !dbg !136
  %805 = fcmp olt float %803, %804, !dbg !136
  %806 = fcmp uno float %803, 0.000000e+00, !dbg !137
  %807 = or i1 %805, %806, !dbg !138
  %808 = select i1 %807, float %803, float %804, !dbg !139
  %809 = extractelement <4 x float> %745, i64 0, !dbg !136
  %810 = fcmp olt float %808, %809, !dbg !136
  %811 = fcmp uno float %808, 0.000000e+00, !dbg !137
  %812 = or i1 %810, %811, !dbg !138
  %813 = select i1 %812, float %808, float %809, !dbg !139
  %814 = extractelement <4 x float> %745, i64 1, !dbg !136
  %815 = fcmp olt float %813, %814, !dbg !136
  %816 = fcmp uno float %813, 0.000000e+00, !dbg !137
  %817 = or i1 %815, %816, !dbg !138
  %818 = select i1 %817, float %813, float %814, !dbg !139
  %819 = extractelement <4 x float> %745, i64 2, !dbg !136
  %820 = fcmp olt float %818, %819, !dbg !136
  %821 = fcmp uno float %818, 0.000000e+00, !dbg !137
  %822 = or i1 %820, %821, !dbg !138
  %823 = select i1 %822, float %818, float %819, !dbg !139
  %824 = extractelement <4 x float> %745, i64 3, !dbg !136
  %825 = fcmp olt float %823, %824, !dbg !136
  %826 = fcmp uno float %823, 0.000000e+00, !dbg !137
  %827 = or i1 %825, %826, !dbg !138
  %828 = select i1 %827, float %823, float %824, !dbg !139
  %829 = fcmp olt float %828, %781, !dbg !136
  %830 = fcmp uno float %828, 0.000000e+00, !dbg !137
  %831 = or i1 %829, %830, !dbg !138
  %832 = select i1 %831, float %828, float %781, !dbg !139
  %833 = fcmp olt float %832, %782, !dbg !136
  %834 = fcmp uno float %832, 0.000000e+00, !dbg !137
  %835 = or i1 %833, %834, !dbg !138
  %836 = select i1 %835, float %832, float %782, !dbg !139
  %837 = bitcast float %836 to i32, !dbg !134
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 16, i32 31), !dbg !134
  %839 = bitcast i32 %838 to float, !dbg !134
  %840 = fcmp olt float %836, %839, !dbg !136
  %841 = fcmp uno float %836, 0.000000e+00, !dbg !137
  %842 = or i1 %841, %840, !dbg !138
  %843 = select i1 %842, float %836, float %839, !dbg !139
  %844 = bitcast float %843 to i32, !dbg !134
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 8, i32 31), !dbg !134
  %846 = bitcast i32 %845 to float, !dbg !134
  %847 = fcmp olt float %843, %846, !dbg !136
  %848 = fcmp uno float %843, 0.000000e+00, !dbg !137
  %849 = or i1 %847, %848, !dbg !138
  %850 = select i1 %849, float %843, float %846, !dbg !139
  %851 = bitcast float %850 to i32, !dbg !134
  %852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %851, i32 4, i32 31), !dbg !134
  %853 = bitcast i32 %852 to float, !dbg !134
  %854 = fcmp olt float %850, %853, !dbg !136
  %855 = fcmp uno float %850, 0.000000e+00, !dbg !137
  %856 = or i1 %854, %855, !dbg !138
  %857 = select i1 %856, float %850, float %853, !dbg !139
  %858 = bitcast float %857 to i32, !dbg !134
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 2, i32 31), !dbg !134
  %860 = bitcast i32 %859 to float, !dbg !134
  %861 = fcmp olt float %857, %860, !dbg !136
  %862 = fcmp uno float %857, 0.000000e+00, !dbg !137
  %863 = or i1 %861, %862, !dbg !138
  %864 = select i1 %863, float %857, float %860, !dbg !139
  %865 = bitcast float %864 to i32, !dbg !134
  %866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %865, i32 1, i32 31), !dbg !134
  %867 = bitcast i32 %866 to float, !dbg !134
  %868 = fcmp olt float %864, %867, !dbg !136
  %869 = fcmp uno float %864, 0.000000e+00, !dbg !137
  %870 = or i1 %868, %869, !dbg !138
  %871 = select i1 %870, i32 %865, i32 %866, !dbg !139
  %872 = insertelement <1 x i32> poison, i32 %871, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %872, i1 %558) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %873 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %566, i1 %565) #5, !dbg !134
  %874 = bitcast i32 %873 to float, !dbg !134
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 1, i32 31), !dbg !134
  %876 = bitcast i32 %875 to float, !dbg !134
  %877 = fcmp olt float %874, %876, !dbg !136
  %878 = fcmp uno float %874, 0.000000e+00, !dbg !137
  %879 = or i1 %878, %877, !dbg !138
  %880 = select i1 %879, i32 %873, i32 %875, !dbg !139
  %881 = insertelement <1 x i32> poison, i32 %880, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %881, i1 %595) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %882 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %883 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %746, <2 x i32> <i32 0, i32 2>, !dbg !142
  %884 = fcmp ogt <2 x float> %883, %746, !dbg !142
  %885 = fcmp uno <2 x float> %883, %746, !dbg !142
  %shift = shufflevector <2 x i1> %884, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !143
  %886 = or <2 x i1> %shift, %885, !dbg !143
  %887 = extractelement <2 x i1> %886, i64 0, !dbg !143
  %888 = extractelement <2 x float> %746, i64 0, !dbg !144
  %889 = extractelement <2 x float> %746, i64 1, !dbg !144
  %890 = select i1 %887, float %888, float %889, !dbg !144
  %891 = extractelement <8 x float> %791, i64 0, !dbg !142
  %892 = fcmp ogt float %890, %891, !dbg !142
  %893 = fcmp uno float %890, 0.000000e+00, !dbg !145
  %894 = or i1 %892, %893, !dbg !143
  %895 = select i1 %894, float %890, float %891, !dbg !144
  %896 = extractelement <8 x float> %791, i64 1, !dbg !142
  %897 = fcmp ogt float %895, %896, !dbg !142
  %898 = fcmp uno float %895, 0.000000e+00, !dbg !145
  %899 = or i1 %897, %898, !dbg !143
  %900 = select i1 %899, float %895, float %896, !dbg !144
  %901 = extractelement <8 x float> %791, i64 2, !dbg !142
  %902 = fcmp ogt float %900, %901, !dbg !142
  %903 = fcmp uno float %900, 0.000000e+00, !dbg !145
  %904 = or i1 %902, %903, !dbg !143
  %905 = select i1 %904, float %900, float %901, !dbg !144
  %906 = extractelement <8 x float> %791, i64 3, !dbg !142
  %907 = fcmp ogt float %905, %906, !dbg !142
  %908 = fcmp uno float %905, 0.000000e+00, !dbg !145
  %909 = or i1 %907, %908, !dbg !143
  %910 = select i1 %909, float %905, float %906, !dbg !144
  %911 = extractelement <8 x float> %791, i64 4, !dbg !142
  %912 = fcmp ogt float %910, %911, !dbg !142
  %913 = fcmp uno float %910, 0.000000e+00, !dbg !145
  %914 = or i1 %912, %913, !dbg !143
  %915 = select i1 %914, float %910, float %911, !dbg !144
  %916 = extractelement <8 x float> %791, i64 5, !dbg !142
  %917 = fcmp ogt float %915, %916, !dbg !142
  %918 = fcmp uno float %915, 0.000000e+00, !dbg !145
  %919 = or i1 %917, %918, !dbg !143
  %920 = select i1 %919, float %915, float %916, !dbg !144
  %921 = bitcast float %920 to i32, !dbg !140
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 16, i32 31), !dbg !140
  %923 = bitcast i32 %922 to float, !dbg !140
  %924 = fcmp ogt float %920, %923, !dbg !142
  %925 = fcmp uno float %920, 0.000000e+00, !dbg !145
  %926 = or i1 %925, %924, !dbg !143
  %927 = select i1 %926, float %920, float %923, !dbg !144
  %928 = bitcast float %927 to i32, !dbg !140
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %928, i32 8, i32 31), !dbg !140
  %930 = bitcast i32 %929 to float, !dbg !140
  %931 = fcmp ogt float %927, %930, !dbg !142
  %932 = fcmp uno float %927, 0.000000e+00, !dbg !145
  %933 = or i1 %931, %932, !dbg !143
  %934 = select i1 %933, float %927, float %930, !dbg !144
  %935 = bitcast float %934 to i32, !dbg !140
  %936 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %935, i32 4, i32 31), !dbg !140
  %937 = bitcast i32 %936 to float, !dbg !140
  %938 = fcmp ogt float %934, %937, !dbg !142
  %939 = fcmp uno float %934, 0.000000e+00, !dbg !145
  %940 = or i1 %938, %939, !dbg !143
  %941 = select i1 %940, float %934, float %937, !dbg !144
  %942 = bitcast float %941 to i32, !dbg !140
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 2, i32 31), !dbg !140
  %944 = bitcast i32 %943 to float, !dbg !140
  %945 = fcmp ogt float %941, %944, !dbg !142
  %946 = fcmp uno float %941, 0.000000e+00, !dbg !145
  %947 = or i1 %945, %946, !dbg !143
  %948 = select i1 %947, float %941, float %944, !dbg !144
  %949 = bitcast float %948 to i32, !dbg !140
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %949, i32 1, i32 31), !dbg !140
  %951 = bitcast i32 %950 to float, !dbg !140
  %952 = fcmp ogt float %948, %951, !dbg !142
  %953 = fcmp uno float %948, 0.000000e+00, !dbg !145
  %954 = or i1 %952, %953, !dbg !143
  %955 = select i1 %954, i32 %949, i32 %950, !dbg !144
  %956 = insertelement <1 x i32> poison, i32 %955, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %956, i1 %558) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %957 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %566, i1 %565) #5, !dbg !140
  %958 = bitcast i32 %957 to float, !dbg !140
  %959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 1, i32 31), !dbg !140
  %960 = bitcast i32 %959 to float, !dbg !140
  %961 = fcmp ogt float %958, %960, !dbg !142
  %962 = fcmp uno float %958, 0.000000e+00, !dbg !145
  %963 = or i1 %962, %961, !dbg !143
  %964 = select i1 %963, i32 %957, i32 %959, !dbg !144
  %965 = insertelement <1 x i32> poison, i32 %964, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %965, i1 %595) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %966 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %967 = getelementptr bfloat, ptr addrspace(1) %10, i64 %24, !dbg !146
  %968 = fptrunc float %882 to bfloat, !dbg !147
  %969 = and i32 %19, 63, !dbg !147
  %970 = icmp eq i32 %969, 0, !dbg !147
  %971 = bitcast bfloat %968 to i16, !dbg !147
  %972 = and i1 %18, %970, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %971, ptr addrspace(1) %967, i1 %972) #5, !dbg !147
  %973 = getelementptr bfloat, ptr addrspace(1) %11, i64 %24, !dbg !148
  %974 = fptrunc float %966 to bfloat, !dbg !149
  %975 = bitcast bfloat %974 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %975, ptr addrspace(1) %973, i1 %972) #5, !dbg !149
  %.inv4 = fcmp oge float %882, 0.000000e+00, !dbg !150
  %976 = select i1 %.inv4, float 0.000000e+00, float %882, !dbg !150
  %977 = fsub float 0.000000e+00, %976, !dbg !152
  %.inv5 = fcmp ole float %966, 0.000000e+00, !dbg !153
  %978 = select i1 %.inv5, float 0.000000e+00, float %966, !dbg !153
  %979 = fcmp ogt float %977, %978, !dbg !155
  %980 = fcmp uno float %977, 0.000000e+00, !dbg !157
  %981 = or i1 %980, %979, !dbg !158
  %982 = select i1 %981, float %977, float %978, !dbg !159
  %983 = fmul float %982, 0x3F80204080000000, !dbg !160
  %984 = fcmp ogt float %983, 0x3EE4F8B580000000, !dbg !161
  %985 = fcmp uno float %983, 0.000000e+00, !dbg !163
  %986 = or i1 %984, %985, !dbg !164
  %987 = select i1 %986, float %983, float 0x3EE4F8B580000000, !dbg !165
  %988 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %987), !dbg !166
  %989 = or disjoint i32 %22, %45
  br label %990, !dbg !167

990:                                              ; preds = %802, %990
  %indvars.iv87 = phi i64 [ 0, %802 ], [ %indvars.iv.next88, %990 ]
  %991 = trunc nuw nsw i64 %indvars.iv87 to i32, !dbg !168
  %992 = add i32 %989, %991, !dbg !168
  %993 = sext i32 %992 to i64, !dbg !169
  %994 = getelementptr bfloat, ptr addrspace(1) %9, i64 %993, !dbg !169
  %995 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %994, i1 %18) #5, !dbg !170
  %996 = extractvalue { i32, i32, i32, i32 } %995, 0, !dbg !170
  %997 = bitcast i32 %996 to <2 x bfloat>, !dbg !170
  %998 = extractvalue { i32, i32, i32, i32 } %995, 1, !dbg !170
  %999 = bitcast i32 %998 to <2 x bfloat>, !dbg !170
  %1000 = extractvalue { i32, i32, i32, i32 } %995, 2, !dbg !170
  %1001 = bitcast i32 %1000 to <2 x bfloat>, !dbg !170
  %1002 = extractvalue { i32, i32, i32, i32 } %995, 3, !dbg !170
  %1003 = bitcast i32 %1002 to <2 x bfloat>, !dbg !170
  %1004 = extractelement <2 x bfloat> %997, i64 0, !dbg !170
  %1005 = extractelement <2 x bfloat> %997, i64 1, !dbg !170
  %1006 = extractelement <2 x bfloat> %999, i64 0, !dbg !170
  %1007 = extractelement <2 x bfloat> %999, i64 1, !dbg !170
  %1008 = extractelement <2 x bfloat> %1001, i64 0, !dbg !170
  %1009 = extractelement <2 x bfloat> %1001, i64 1, !dbg !170
  %1010 = extractelement <2 x bfloat> %1003, i64 0, !dbg !170
  %1011 = extractelement <2 x bfloat> %1003, i64 1, !dbg !170
  %1012 = fpext bfloat %1004 to float, !dbg !171
  %1013 = fpext bfloat %1005 to float, !dbg !171
  %1014 = fpext bfloat %1006 to float, !dbg !171
  %1015 = fpext bfloat %1007 to float, !dbg !171
  %1016 = fpext bfloat %1008 to float, !dbg !171
  %1017 = fpext bfloat %1009 to float, !dbg !171
  %1018 = fpext bfloat %1010 to float, !dbg !171
  %1019 = fpext bfloat %1011 to float, !dbg !171
  %1020 = fmul float %988, %1012, !dbg !172
  %1021 = fmul float %988, %1013, !dbg !172
  %1022 = fmul float %988, %1014, !dbg !172
  %1023 = fmul float %988, %1015, !dbg !172
  %1024 = fmul float %988, %1016, !dbg !172
  %1025 = fmul float %988, %1017, !dbg !172
  %1026 = fmul float %988, %1018, !dbg !172
  %1027 = fmul float %988, %1019, !dbg !172
  %1028 = tail call float @llvm.nvvm.round.f(float %1020) #5, !dbg !173
  %1029 = tail call float @llvm.nvvm.round.f(float %1021) #5, !dbg !173
  %1030 = tail call float @llvm.nvvm.round.f(float %1022) #5, !dbg !173
  %1031 = tail call float @llvm.nvvm.round.f(float %1023) #5, !dbg !173
  %1032 = tail call float @llvm.nvvm.round.f(float %1024) #5, !dbg !173
  %1033 = tail call float @llvm.nvvm.round.f(float %1025) #5, !dbg !173
  %1034 = tail call float @llvm.nvvm.round.f(float %1026) #5, !dbg !173
  %1035 = tail call float @llvm.nvvm.round.f(float %1027) #5, !dbg !173
  %1036 = insertelement <4 x float> poison, float %1028, i64 0, !dbg !174
  %1037 = insertelement <4 x float> %1036, float %1029, i64 1, !dbg !174
  %1038 = insertelement <4 x float> %1037, float %1030, i64 2, !dbg !174
  %1039 = insertelement <4 x float> %1038, float %1031, i64 3, !dbg !174
  %1040 = fcmp ogt <4 x float> %1039, splat (float -1.270000e+02), !dbg !174
  %1041 = fcmp uno <4 x float> %1039, zeroinitializer, !dbg !176
  %1042 = or <4 x i1> %1040, %1041, !dbg !177
  %1043 = select <4 x i1> %1042, <4 x float> %1039, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1044 = fcmp olt <4 x float> %1043, splat (float 1.270000e+02), !dbg !179
  %1045 = fcmp uno <4 x float> %1043, zeroinitializer, !dbg !181
  %1046 = or <4 x i1> %1044, %1045, !dbg !182
  %1047 = fptosi <4 x float> %1043 to <4 x i8>, !dbg !183
  %1048 = select <4 x i1> %1046, <4 x i8> %1047, <4 x i8> splat (i8 127), !dbg !184
  %1049 = insertelement <4 x float> poison, float %1032, i64 0, !dbg !174
  %1050 = insertelement <4 x float> %1049, float %1033, i64 1, !dbg !174
  %1051 = insertelement <4 x float> %1050, float %1034, i64 2, !dbg !174
  %1052 = insertelement <4 x float> %1051, float %1035, i64 3, !dbg !174
  %1053 = fcmp ogt <4 x float> %1052, splat (float -1.270000e+02), !dbg !174
  %1054 = fcmp uno <4 x float> %1052, zeroinitializer, !dbg !176
  %1055 = or <4 x i1> %1053, %1054, !dbg !177
  %1056 = select <4 x i1> %1055, <4 x float> %1052, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1057 = fcmp olt <4 x float> %1056, splat (float 1.270000e+02), !dbg !179
  %1058 = fcmp uno <4 x float> %1056, zeroinitializer, !dbg !181
  %1059 = or <4 x i1> %1057, %1058, !dbg !182
  %1060 = fptosi <4 x float> %1056 to <4 x i8>, !dbg !183
  %1061 = select <4 x i1> %1059, <4 x i8> %1060, <4 x i8> splat (i8 127), !dbg !184
  %1062 = getelementptr i8, ptr addrspace(1) %12, i64 %993, !dbg !185
  %1063 = bitcast <4 x i8> %1048 to i32, !dbg !186
  %1064 = bitcast <4 x i8> %1061 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1063, i32 %1064, ptr addrspace(1) %1062, i1 %18) #5, !dbg !186
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 512, !dbg !167
  %1065 = icmp samesign ult i64 %indvars.iv87, 2560, !dbg !167
  br i1 %1065, label %990, label %1066, !dbg !167

1066:                                             ; preds = %990
  ret void, !dbg !187
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 70, column: 64, scope: !6)
!37 = !DILocation(line: 60, column: 23, scope: !6)
!38 = !DILocation(line: 35, column: 31, scope: !6)
!39 = !DILocation(line: 40, column: 41, scope: !6)
!40 = !DILocation(line: 40, column: 34, scope: !6)
!41 = !DILocation(line: 40, column: 51, scope: !6)
!42 = !DILocation(line: 41, column: 41, scope: !6)
!43 = !DILocation(line: 41, column: 34, scope: !6)
!44 = !DILocation(line: 41, column: 48, scope: !6)
!45 = !DILocation(line: 42, column: 34, scope: !6)
!46 = !DILocation(line: 42, column: 48, scope: !6)
!47 = !DILocation(line: 43, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 51, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 44, column: 42, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 45, column: 42, scope: !6)
!53 = !DILocation(line: 40, column: 113, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 45, column: 95, scope: !6)
!57 = !DILocation(line: 47, column: 22, scope: !6)
!58 = !DILocation(line: 48, column: 23, scope: !6)
!59 = !DILocation(line: 61, column: 24, scope: !6)
!60 = !DILocation(line: 62, column: 24, scope: !6)
!61 = !DILocation(line: 63, column: 23, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 68, column: 66, scope: !6)
!64 = !DILocation(line: 203, column: 7, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 55, scope: !6)
!66 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !65)
!67 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !65)
!68 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !65)
!69 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !65)
!70 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !65)
!73 = !DILocation(line: 71, column: 60, scope: !6)
!74 = !DILocation(line: 72, column: 68, scope: !6)
!75 = !DILocation(line: 73, column: 29, scope: !6)
!76 = !DILocation(line: 73, column: 53, scope: !6)
!77 = !DILocation(line: 217, column: 21, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 218, column: 28, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 219, column: 39, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 219, column: 60, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 49, scope: !78, inlinedAt: !79)
!84 = !DILocation(line: 221, column: 25, scope: !78, inlinedAt: !79)
!85 = !DILocation(line: 221, column: 17, scope: !78, inlinedAt: !79)
!86 = !DILocation(line: 222, column: 15, scope: !78, inlinedAt: !79)
!87 = !DILocation(line: 222, column: 30, scope: !78, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 38, scope: !78, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 49, scope: !78, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 22, scope: !78, inlinedAt: !79)
!91 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !79)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 112, column: 50, scope: !6)
!96 = !DILocation(line: 98, column: 24, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 80, column: 40, scope: !6)
!100 = !DILocation(line: 81, column: 31, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 53, scope: !6)
!104 = !DILocation(line: 87, column: 43, scope: !6)
!105 = !DILocation(line: 87, column: 35, scope: !6)
!106 = !DILocation(line: 87, column: 50, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 88, column: 50, scope: !6)
!109 = !DILocation(line: 89, column: 42, scope: !6)
!110 = !DILocation(line: 89, column: 35, scope: !6)
!111 = !DILocation(line: 89, column: 49, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 90, column: 49, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !115)
!115 = !DILocation(line: 111, column: 47, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !115)
!127 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !115)
!128 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !115)
!129 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !117)
!130 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !117)
!131 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !117)
!132 = !DILocation(line: 113, column: 29, scope: !6)
!133 = !DILocation(line: 113, column: 53, scope: !6)
!134 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !135)
!135 = !DILocation(line: 114, column: 40, scope: !6)
!136 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !135)
!137 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !135)
!138 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !135)
!139 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !135)
!140 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !141)
!141 = !DILocation(line: 115, column: 40, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !141)
!144 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !141)
!145 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 25, scope: !6)
!147 = !DILocation(line: 116, column: 37, scope: !6)
!148 = !DILocation(line: 117, column: 25, scope: !6)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !151)
!151 = !DILocation(line: 126, column: 46, scope: !6)
!152 = !DILocation(line: 127, column: 17, scope: !6)
!153 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 128, column: 46, scope: !6)
!155 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !156)
!156 = !DILocation(line: 129, column: 46, scope: !6)
!157 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !156)
!158 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !156)
!159 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !156)
!160 = !DILocation(line: 131, column: 24, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !162)
!162 = !DILocation(line: 134, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !162)
!166 = !DILocation(line: 137, column: 25, scope: !6)
!167 = !DILocation(line: 118, column: 40, scope: !6)
!168 = !DILocation(line: 124, column: 43, scope: !6)
!169 = !DILocation(line: 124, column: 36, scope: !6)
!170 = !DILocation(line: 124, column: 53, scope: !6)
!171 = !DILocation(line: 124, column: 115, scope: !6)
!172 = !DILocation(line: 140, column: 24, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 118, column: 4, scope: !6)
