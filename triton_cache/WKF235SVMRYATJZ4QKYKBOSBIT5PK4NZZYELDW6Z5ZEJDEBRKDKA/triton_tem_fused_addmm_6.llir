; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_tem_fused_addmm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = or disjoint i32 %19, 8, !dbg !19
  %21 = or disjoint i32 %19, 16, !dbg !19
  %22 = or disjoint i32 %19, 24, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = lshr exact i32 %17, 2, !dbg !19
  %26 = or disjoint i32 %14, %19, !dbg !20
  %27 = or disjoint i32 %14, %20, !dbg !20
  %28 = or disjoint i32 %14, %21, !dbg !20
  %29 = or disjoint i32 %14, %22, !dbg !20
  %30 = or disjoint i32 %26, 32, !dbg !20
  %31 = or disjoint i32 %26, 40, !dbg !20
  %32 = or disjoint i32 %26, 48, !dbg !20
  %33 = or disjoint i32 %26, 56, !dbg !20
  %34 = shl nsw i32 %13, 5, !dbg !21
  %35 = shl i32 %15, 3, !dbg !22
  %36 = and i32 %35, 8, !dbg !22
  %37 = and i32 %35, 16, !dbg !22
  %38 = and i32 %35, 24, !dbg !22
  %39 = or disjoint i32 %34, %19, !dbg !23
  %40 = or disjoint i32 %34, %20, !dbg !23
  %41 = or disjoint i32 %34, %21, !dbg !23
  %42 = or disjoint i32 %34, %22, !dbg !23
  %43 = srem i32 %26, 77, !dbg !24
  %44 = srem i32 %27, 77, !dbg !24
  %45 = srem i32 %28, 77, !dbg !24
  %46 = srem i32 %29, 77, !dbg !24
  %47 = srem i32 %30, 77, !dbg !24
  %48 = srem i32 %31, 77, !dbg !24
  %49 = srem i32 %32, 77, !dbg !24
  %50 = srem i32 %33, 77, !dbg !24
  %51 = srem i32 %39, 768, !dbg !25
  %52 = srem i32 %40, 768, !dbg !25
  %53 = srem i32 %41, 768, !dbg !25
  %54 = srem i32 %42, 768, !dbg !25
  %55 = and i32 %35, 32, !dbg !26
  %56 = and i32 %35, 56, !dbg !26
  %57 = and i32 %35, 120, !dbg !26
  %58 = mul nsw i32 %43, 3072, !dbg !27
  %59 = mul nsw i32 %44, 3072, !dbg !27
  %60 = mul nsw i32 %45, 3072, !dbg !27
  %61 = mul nsw i32 %46, 3072, !dbg !27
  %62 = mul nsw i32 %47, 3072, !dbg !27
  %63 = mul nsw i32 %48, 3072, !dbg !27
  %64 = mul nsw i32 %49, 3072, !dbg !27
  %65 = mul nsw i32 %50, 3072, !dbg !27
  %66 = mul nsw i32 %51, 3072, !dbg !28
  %67 = mul nsw i32 %52, 3072, !dbg !28
  %68 = mul nsw i32 %53, 3072, !dbg !28
  %69 = mul nsw i32 %54, 3072, !dbg !28
  %70 = or disjoint i32 %58, %57, !dbg !29
  %71 = or disjoint i32 %59, %57, !dbg !29
  %72 = or disjoint i32 %60, %57, !dbg !29
  %73 = or disjoint i32 %61, %57, !dbg !29
  %74 = or disjoint i32 %62, %57, !dbg !29
  %75 = or disjoint i32 %63, %57, !dbg !29
  %76 = or disjoint i32 %64, %57, !dbg !29
  %77 = or disjoint i32 %65, %57, !dbg !29
  %78 = sext i32 %70 to i64, !dbg !30
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %71 to i64, !dbg !30
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %72 to i64, !dbg !30
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %73 to i64, !dbg !30
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = sext i32 %74 to i64, !dbg !30
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !30
  %88 = sext i32 %75 to i64, !dbg !30
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !30
  %90 = sext i32 %76 to i64, !dbg !30
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !30
  %92 = sext i32 %77 to i64, !dbg !30
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !30
  %94 = lshr exact i32 %16, 1, !dbg !31
  %95 = lshr i32 %15, 1, !dbg !31
  %96 = and i32 %95, 56, !dbg !31
  %97 = xor i32 %57, %96, !dbg !31
  %98 = shl nuw nsw i32 %19, 7, !dbg !31
  %99 = or disjoint i32 %97, %98, !dbg !31
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %99, !dbg !31
  %101 = or disjoint i32 %99, 1024, !dbg !31
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %101, !dbg !31
  %103 = or disjoint i32 %99, 2048, !dbg !31
  %104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %103, !dbg !31
  %105 = or disjoint i32 %99, 3072, !dbg !31
  %106 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %105, !dbg !31
  %107 = or disjoint i32 %99, 4096, !dbg !31
  %108 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %107, !dbg !31
  %109 = or disjoint i32 %99, 5120, !dbg !31
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %109, !dbg !31
  %111 = or disjoint i32 %99, 6144, !dbg !31
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %111, !dbg !31
  %113 = or disjoint i32 %99, 7168, !dbg !31
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %113, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %100, ptr addrspace(1) %79, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %81, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %104, ptr addrspace(1) %83, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %85, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %108, ptr addrspace(1) %87, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %110, ptr addrspace(1) %89, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %91, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %114, ptr addrspace(1) %93, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %115 = or disjoint i32 %66, %57, !dbg !32
  %116 = or disjoint i32 %67, %57, !dbg !32
  %117 = or disjoint i32 %68, %57, !dbg !32
  %118 = or disjoint i32 %69, %57, !dbg !32
  %119 = sext i32 %115 to i64, !dbg !33
  %120 = getelementptr bfloat, ptr addrspace(1) %1, i64 %119, !dbg !33
  %121 = sext i32 %116 to i64, !dbg !33
  %122 = getelementptr bfloat, ptr addrspace(1) %1, i64 %121, !dbg !33
  %123 = sext i32 %117 to i64, !dbg !33
  %124 = getelementptr bfloat, ptr addrspace(1) %1, i64 %123, !dbg !33
  %125 = sext i32 %118 to i64, !dbg !33
  %126 = getelementptr bfloat, ptr addrspace(1) %1, i64 %125, !dbg !33
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %99, !dbg !34
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %101, !dbg !34
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %103, !dbg !34
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %105, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %127, ptr addrspace(1) %120, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %122, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %129, ptr addrspace(1) %124, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %130, ptr addrspace(1) %126, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %131 = or disjoint i32 %57, 128, !dbg !35
  %132 = or disjoint i32 %58, %131, !dbg !29
  %133 = or disjoint i32 %59, %131, !dbg !29
  %134 = or disjoint i32 %60, %131, !dbg !29
  %135 = or disjoint i32 %61, %131, !dbg !29
  %136 = or disjoint i32 %62, %131, !dbg !29
  %137 = or disjoint i32 %63, %131, !dbg !29
  %138 = or disjoint i32 %64, %131, !dbg !29
  %139 = or disjoint i32 %65, %131, !dbg !29
  %140 = sext i32 %132 to i64, !dbg !30
  %141 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !30
  %142 = sext i32 %133 to i64, !dbg !30
  %143 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !30
  %144 = sext i32 %134 to i64, !dbg !30
  %145 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !30
  %146 = sext i32 %135 to i64, !dbg !30
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !30
  %148 = sext i32 %136 to i64, !dbg !30
  %149 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !30
  %150 = sext i32 %137 to i64, !dbg !30
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !30
  %152 = sext i32 %138 to i64, !dbg !30
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !30
  %154 = sext i32 %139 to i64, !dbg !30
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %99, !dbg !31
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %101, !dbg !31
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %103, !dbg !31
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %105, !dbg !31
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %107, !dbg !31
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %109, !dbg !31
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %111, !dbg !31
  %163 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %113, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %156, ptr addrspace(1) %141, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %143, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %145, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %147, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %149, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %161, ptr addrspace(1) %151, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %162, ptr addrspace(1) %153, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %163, ptr addrspace(1) %155, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %164 = or disjoint i32 %66, %131, !dbg !32
  %165 = or disjoint i32 %67, %131, !dbg !32
  %166 = or disjoint i32 %68, %131, !dbg !32
  %167 = or disjoint i32 %69, %131, !dbg !32
  %168 = sext i32 %164 to i64, !dbg !33
  %169 = getelementptr bfloat, ptr addrspace(1) %1, i64 %168, !dbg !33
  %170 = sext i32 %165 to i64, !dbg !33
  %171 = getelementptr bfloat, ptr addrspace(1) %1, i64 %170, !dbg !33
  %172 = sext i32 %166 to i64, !dbg !33
  %173 = getelementptr bfloat, ptr addrspace(1) %1, i64 %172, !dbg !33
  %174 = sext i32 %167 to i64, !dbg !33
  %175 = getelementptr bfloat, ptr addrspace(1) %1, i64 %174, !dbg !33
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %99, !dbg !34
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %101, !dbg !34
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %103, !dbg !34
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %105, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %176, ptr addrspace(1) %169, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %171, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %173, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %175, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %180 = or disjoint i32 %57, 256, !dbg !35
  %181 = or disjoint i32 %58, %180, !dbg !29
  %182 = or disjoint i32 %59, %180, !dbg !29
  %183 = or disjoint i32 %60, %180, !dbg !29
  %184 = or disjoint i32 %61, %180, !dbg !29
  %185 = or disjoint i32 %62, %180, !dbg !29
  %186 = or disjoint i32 %63, %180, !dbg !29
  %187 = or disjoint i32 %64, %180, !dbg !29
  %188 = or disjoint i32 %65, %180, !dbg !29
  %189 = sext i32 %181 to i64, !dbg !30
  %190 = getelementptr bfloat, ptr addrspace(1) %0, i64 %189, !dbg !30
  %191 = sext i32 %182 to i64, !dbg !30
  %192 = getelementptr bfloat, ptr addrspace(1) %0, i64 %191, !dbg !30
  %193 = sext i32 %183 to i64, !dbg !30
  %194 = getelementptr bfloat, ptr addrspace(1) %0, i64 %193, !dbg !30
  %195 = sext i32 %184 to i64, !dbg !30
  %196 = getelementptr bfloat, ptr addrspace(1) %0, i64 %195, !dbg !30
  %197 = sext i32 %185 to i64, !dbg !30
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %197, !dbg !30
  %199 = sext i32 %186 to i64, !dbg !30
  %200 = getelementptr bfloat, ptr addrspace(1) %0, i64 %199, !dbg !30
  %201 = sext i32 %187 to i64, !dbg !30
  %202 = getelementptr bfloat, ptr addrspace(1) %0, i64 %201, !dbg !30
  %203 = sext i32 %188 to i64, !dbg !30
  %204 = getelementptr bfloat, ptr addrspace(1) %0, i64 %203, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %99, !dbg !31
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %101, !dbg !31
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %103, !dbg !31
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %105, !dbg !31
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %107, !dbg !31
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %109, !dbg !31
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %111, !dbg !31
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %113, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %205, ptr addrspace(1) %190, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %206, ptr addrspace(1) %192, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %207, ptr addrspace(1) %194, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %196, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %209, ptr addrspace(1) %198, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %200, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %211, ptr addrspace(1) %202, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %204, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %213 = or disjoint i32 %66, %180, !dbg !32
  %214 = or disjoint i32 %67, %180, !dbg !32
  %215 = or disjoint i32 %68, %180, !dbg !32
  %216 = or disjoint i32 %69, %180, !dbg !32
  %217 = sext i32 %213 to i64, !dbg !33
  %218 = getelementptr bfloat, ptr addrspace(1) %1, i64 %217, !dbg !33
  %219 = sext i32 %214 to i64, !dbg !33
  %220 = getelementptr bfloat, ptr addrspace(1) %1, i64 %219, !dbg !33
  %221 = sext i32 %215 to i64, !dbg !33
  %222 = getelementptr bfloat, ptr addrspace(1) %1, i64 %221, !dbg !33
  %223 = sext i32 %216 to i64, !dbg !33
  %224 = getelementptr bfloat, ptr addrspace(1) %1, i64 %223, !dbg !33
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %99, !dbg !34
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %101, !dbg !34
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %103, !dbg !34
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %105, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %225, ptr addrspace(1) %218, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %226, ptr addrspace(1) %220, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %227, ptr addrspace(1) %222, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %228, ptr addrspace(1) %224, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %229 = or disjoint i32 %57, 384, !dbg !35
  %230 = or disjoint i32 %58, %229, !dbg !29
  %231 = or disjoint i32 %59, %229, !dbg !29
  %232 = or disjoint i32 %60, %229, !dbg !29
  %233 = or disjoint i32 %61, %229, !dbg !29
  %234 = or disjoint i32 %62, %229, !dbg !29
  %235 = or disjoint i32 %63, %229, !dbg !29
  %236 = or disjoint i32 %64, %229, !dbg !29
  %237 = or disjoint i32 %65, %229, !dbg !29
  %238 = sext i32 %230 to i64, !dbg !30
  %239 = getelementptr bfloat, ptr addrspace(1) %0, i64 %238, !dbg !30
  %240 = sext i32 %231 to i64, !dbg !30
  %241 = getelementptr bfloat, ptr addrspace(1) %0, i64 %240, !dbg !30
  %242 = sext i32 %232 to i64, !dbg !30
  %243 = getelementptr bfloat, ptr addrspace(1) %0, i64 %242, !dbg !30
  %244 = sext i32 %233 to i64, !dbg !30
  %245 = getelementptr bfloat, ptr addrspace(1) %0, i64 %244, !dbg !30
  %246 = sext i32 %234 to i64, !dbg !30
  %247 = getelementptr bfloat, ptr addrspace(1) %0, i64 %246, !dbg !30
  %248 = sext i32 %235 to i64, !dbg !30
  %249 = getelementptr bfloat, ptr addrspace(1) %0, i64 %248, !dbg !30
  %250 = sext i32 %236 to i64, !dbg !30
  %251 = getelementptr bfloat, ptr addrspace(1) %0, i64 %250, !dbg !30
  %252 = sext i32 %237 to i64, !dbg !30
  %253 = getelementptr bfloat, ptr addrspace(1) %0, i64 %252, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %99, !dbg !31
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %101, !dbg !31
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %103, !dbg !31
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %105, !dbg !31
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %107, !dbg !31
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %109, !dbg !31
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %111, !dbg !31
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %113, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %254, ptr addrspace(1) %239, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %241, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %243, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %245, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %247, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %249, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %251, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %253, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %262 = or disjoint i32 %66, %229, !dbg !32
  %263 = or disjoint i32 %67, %229, !dbg !32
  %264 = or disjoint i32 %68, %229, !dbg !32
  %265 = or disjoint i32 %69, %229, !dbg !32
  %266 = sext i32 %262 to i64, !dbg !33
  %267 = getelementptr bfloat, ptr addrspace(1) %1, i64 %266, !dbg !33
  %268 = sext i32 %263 to i64, !dbg !33
  %269 = getelementptr bfloat, ptr addrspace(1) %1, i64 %268, !dbg !33
  %270 = sext i32 %264 to i64, !dbg !33
  %271 = getelementptr bfloat, ptr addrspace(1) %1, i64 %270, !dbg !33
  %272 = sext i32 %265 to i64, !dbg !33
  %273 = getelementptr bfloat, ptr addrspace(1) %1, i64 %272, !dbg !33
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %99, !dbg !34
  %275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %101, !dbg !34
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %103, !dbg !34
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %105, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %274, ptr addrspace(1) %267, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %275, ptr addrspace(1) %269, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %276, ptr addrspace(1) %271, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %273, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %invariant.op = or disjoint i32 %55, %94, !dbg !36
  %invariant.op51 = or disjoint i32 %57, 512, !dbg !36
  %278 = and i32 %15, 7
  %279 = and i32 %15, 15
  %280 = xor i32 %56, %94
  %281 = or disjoint i32 %25, %279
  %282 = shl nuw nsw i32 %281, 7
  %283 = or disjoint i32 %282, %280
  %284 = or disjoint i32 %36, 16
  %285 = xor i32 %284, %37
  %286 = or disjoint i32 %285, %55
  %287 = xor i32 %286, %94
  %288 = or disjoint i32 %287, %282
  %289 = or disjoint i32 %38, 32
  %.reass = xor i32 %289, %invariant.op
  %290 = or disjoint i32 %.reass, %282
  %291 = or disjoint i32 %36, 48
  %and.ra = and i32 %35, 48
  %292 = or disjoint i32 %94, %and.ra
  %293 = xor i32 %292, %291
  %294 = or disjoint i32 %293, %282
  %295 = or disjoint i32 %56, 64
  %296 = xor i32 %295, %94
  %297 = or disjoint i32 %296, %282
  %298 = or disjoint i32 %36, 80
  %299 = xor i32 %298, %37
  %300 = or disjoint i32 %299, %55
  %301 = xor i32 %300, %94
  %302 = or disjoint i32 %301, %282
  %303 = or disjoint i32 %38, 96
  %.reass50 = xor i32 %303, %invariant.op
  %304 = or disjoint i32 %.reass50, %282
  %305 = or disjoint i32 %36, 112
  %306 = xor i32 %292, %305
  %307 = or disjoint i32 %306, %282
  %308 = or disjoint i32 %282, 4096
  %309 = or disjoint i32 %308, %280
  %310 = or disjoint i32 %287, %308
  %311 = or disjoint i32 %.reass, %308
  %312 = or disjoint i32 %293, %308
  %313 = or disjoint i32 %308, %296
  %314 = or disjoint i32 %301, %308
  %315 = or disjoint i32 %.reass50, %308
  %316 = or disjoint i32 %306, %308
  %and.ra45 = and i32 %15, 24
  %317 = xor i32 %56, %and.ra45
  %318 = or disjoint i32 %24, %278
  %319 = shl nuw nsw i32 %318, 7
  %320 = or disjoint i32 %319, %317
  %321 = or disjoint i32 %55, %and.ra45
  %322 = xor i32 %321, %289
  %323 = xor i32 %295, %and.ra45
  %324 = xor i32 %321, %303
  %325 = or disjoint i32 %319, 2048
  %326 = or disjoint i32 %325, %317
  %327 = or disjoint i32 %322, %325
  %328 = or disjoint i32 %325, %323
  %329 = or disjoint i32 %324, %325
  %330 = zext nneg i32 %invariant.op51 to i64, !dbg !36
  %331 = sext i32 %69 to i64, !dbg !36
  %332 = sext i32 %68 to i64, !dbg !36
  %333 = sext i32 %67 to i64, !dbg !36
  %334 = sext i32 %66 to i64, !dbg !36
  %335 = sext i32 %65 to i64, !dbg !36
  %336 = sext i32 %64 to i64, !dbg !36
  %337 = sext i32 %63 to i64, !dbg !36
  %338 = sext i32 %62 to i64, !dbg !36
  %339 = sext i32 %61 to i64, !dbg !36
  %340 = sext i32 %60 to i64, !dbg !36
  %341 = sext i32 %59 to i64, !dbg !36
  %342 = sext i32 %58 to i64, !dbg !36
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %342, !dbg !36
  %invariant.gep84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %341, !dbg !36
  %invariant.gep86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %340, !dbg !36
  %invariant.gep88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %339, !dbg !36
  %invariant.gep90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %338, !dbg !36
  %invariant.gep92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %337, !dbg !36
  %invariant.gep94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %336, !dbg !36
  %invariant.gep96 = getelementptr bfloat, ptr addrspace(1) %0, i64 %335, !dbg !36
  %invariant.gep98 = getelementptr bfloat, ptr addrspace(1) %1, i64 %334, !dbg !36
  %invariant.gep100 = getelementptr bfloat, ptr addrspace(1) %1, i64 %333, !dbg !36
  %invariant.gep102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %332, !dbg !36
  %invariant.gep104 = getelementptr bfloat, ptr addrspace(1) %1, i64 %331, !dbg !36
  br label %343, !dbg !36

343:                                              ; preds = %4, %343
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %343 ]
  %344 = phi i32 [ -1, %4 ], [ %365, %343 ]
  %345 = phi i32 [ 3, %4 ], [ %701, %343 ]
  %346 = phi float [ 0.000000e+00, %4 ], [ %680, %343 ]
  %347 = phi float [ 0.000000e+00, %4 ], [ %681, %343 ]
  %348 = phi float [ 0.000000e+00, %4 ], [ %682, %343 ]
  %349 = phi float [ 0.000000e+00, %4 ], [ %683, %343 ]
  %350 = phi float [ 0.000000e+00, %4 ], [ %685, %343 ]
  %351 = phi float [ 0.000000e+00, %4 ], [ %686, %343 ]
  %352 = phi float [ 0.000000e+00, %4 ], [ %687, %343 ]
  %353 = phi float [ 0.000000e+00, %4 ], [ %688, %343 ]
  %354 = phi float [ 0.000000e+00, %4 ], [ %690, %343 ]
  %355 = phi float [ 0.000000e+00, %4 ], [ %691, %343 ]
  %356 = phi float [ 0.000000e+00, %4 ], [ %692, %343 ]
  %357 = phi float [ 0.000000e+00, %4 ], [ %693, %343 ]
  %358 = phi float [ 0.000000e+00, %4 ], [ %695, %343 ]
  %359 = phi float [ 0.000000e+00, %4 ], [ %696, %343 ]
  %360 = phi float [ 0.000000e+00, %4 ], [ %697, %343 ]
  %361 = phi float [ 0.000000e+00, %4 ], [ %698, %343 ]
  %362 = icmp samesign ult i64 %indvars.iv, 20, !dbg !36
  %363 = add i32 %344, 1, !dbg !36
  %364 = icmp slt i32 %363, 4, !dbg !36
  %365 = select i1 %364, i32 %363, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl i32 %365, 14, !dbg !31
  %366 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %283, !dbg !31
  %368 = ptrtoint ptr addrspace(3) %367 to i32, !dbg !31
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #1, !dbg !31
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !31
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !31
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !31
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !31
  %374 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %288, !dbg !31
  %375 = ptrtoint ptr addrspace(3) %374 to i32, !dbg !31
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %375) #1, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !31
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !31
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !31
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %290, !dbg !31
  %382 = ptrtoint ptr addrspace(3) %381 to i32, !dbg !31
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #1, !dbg !31
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !31
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !31
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !31
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !31
  %388 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %294, !dbg !31
  %389 = ptrtoint ptr addrspace(3) %388 to i32, !dbg !31
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %389) #1, !dbg !31
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !31
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !31
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !31
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !31
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %297, !dbg !31
  %396 = ptrtoint ptr addrspace(3) %395 to i32, !dbg !31
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #1, !dbg !31
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !31
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !31
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !31
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !31
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %302, !dbg !31
  %403 = ptrtoint ptr addrspace(3) %402 to i32, !dbg !31
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #1, !dbg !31
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !31
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !31
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !31
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !31
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %304, !dbg !31
  %410 = ptrtoint ptr addrspace(3) %409 to i32, !dbg !31
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %410) #1, !dbg !31
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !31
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !31
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !31
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !31
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %307, !dbg !31
  %417 = ptrtoint ptr addrspace(3) %416 to i32, !dbg !31
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %417) #1, !dbg !31
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !31
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !31
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !31
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !31
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %309, !dbg !31
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !31
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #1, !dbg !31
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !31
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !31
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !31
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !31
  %430 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %310, !dbg !31
  %431 = ptrtoint ptr addrspace(3) %430 to i32, !dbg !31
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %431) #1, !dbg !31
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !31
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !31
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !31
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !31
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %311, !dbg !31
  %438 = ptrtoint ptr addrspace(3) %437 to i32, !dbg !31
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #1, !dbg !31
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !31
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !31
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !31
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !31
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %312, !dbg !31
  %445 = ptrtoint ptr addrspace(3) %444 to i32, !dbg !31
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #1, !dbg !31
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !31
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !31
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !31
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !31
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %313, !dbg !31
  %452 = ptrtoint ptr addrspace(3) %451 to i32, !dbg !31
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %452) #1, !dbg !31
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !31
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !31
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !31
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !31
  %458 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %314, !dbg !31
  %459 = ptrtoint ptr addrspace(3) %458 to i32, !dbg !31
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %459) #1, !dbg !31
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !31
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !31
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !31
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !31
  %465 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %315, !dbg !31
  %466 = ptrtoint ptr addrspace(3) %465 to i32, !dbg !31
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %466) #1, !dbg !31
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !31
  %469 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !31
  %470 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !31
  %471 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !31
  %472 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %366, i32 %316, !dbg !31
  %473 = ptrtoint ptr addrspace(3) %472 to i32, !dbg !31
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %473) #1, !dbg !31
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !31
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !31
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !31
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !31
  %.idx26 = shl i32 %365, 13, !dbg !34
  %479 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx26, !dbg !34
  %480 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %320, !dbg !34
  %481 = ptrtoint ptr addrspace(3) %480 to i32, !dbg !34
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %481) #1, !dbg !34
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !34
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !34
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !34
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !34
  %487 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %322, !dbg !34
  %488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %487, i32 %319, !dbg !34
  %489 = ptrtoint ptr addrspace(3) %488 to i32, !dbg !34
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #1, !dbg !34
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !34
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !34
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !34
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !34
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %323, !dbg !34
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %495, i32 %319, !dbg !34
  %497 = ptrtoint ptr addrspace(3) %496 to i32, !dbg !34
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %497) #1, !dbg !34
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !34
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !34
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !34
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !34
  %503 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %324, !dbg !34
  %504 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %503, i32 %319, !dbg !34
  %505 = ptrtoint ptr addrspace(3) %504 to i32, !dbg !34
  %506 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %505) #1, !dbg !34
  %507 = extractvalue { i32, i32, i32, i32 } %506, 0, !dbg !34
  %508 = extractvalue { i32, i32, i32, i32 } %506, 1, !dbg !34
  %509 = extractvalue { i32, i32, i32, i32 } %506, 2, !dbg !34
  %510 = extractvalue { i32, i32, i32, i32 } %506, 3, !dbg !34
  %511 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %326, !dbg !34
  %512 = ptrtoint ptr addrspace(3) %511 to i32, !dbg !34
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %512) #1, !dbg !34
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !34
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !34
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !34
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !34
  %518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %327, !dbg !34
  %519 = ptrtoint ptr addrspace(3) %518 to i32, !dbg !34
  %520 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %519) #1, !dbg !34
  %521 = extractvalue { i32, i32, i32, i32 } %520, 0, !dbg !34
  %522 = extractvalue { i32, i32, i32, i32 } %520, 1, !dbg !34
  %523 = extractvalue { i32, i32, i32, i32 } %520, 2, !dbg !34
  %524 = extractvalue { i32, i32, i32, i32 } %520, 3, !dbg !34
  %525 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %328, !dbg !34
  %526 = ptrtoint ptr addrspace(3) %525 to i32, !dbg !34
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %526) #1, !dbg !34
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !34
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !34
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !34
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !34
  %532 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %479, i32 %329, !dbg !34
  %533 = ptrtoint ptr addrspace(3) %532 to i32, !dbg !34
  %534 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %533) #1, !dbg !34
  %535 = extractvalue { i32, i32, i32, i32 } %534, 0, !dbg !34
  %536 = extractvalue { i32, i32, i32, i32 } %534, 1, !dbg !34
  %537 = extractvalue { i32, i32, i32, i32 } %534, 2, !dbg !34
  %538 = extractvalue { i32, i32, i32, i32 } %534, 3, !dbg !34
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %370, i32 %371, i32 %372, i32 %373, i32 %483, i32 %484) #1, !dbg !37
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !37
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !37
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !37
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !37
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %350, float %351, float %352, float %353, i32 %370, i32 %371, i32 %372, i32 %373, i32 %514, i32 %515) #1, !dbg !37
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !37
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !37
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !37
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !37
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %426, i32 %427, i32 %428, i32 %429, i32 %483, i32 %484) #1, !dbg !37
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !37
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !37
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !37
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !37
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %358, float %359, float %360, float %361, i32 %426, i32 %427, i32 %428, i32 %429, i32 %514, i32 %515) #1, !dbg !37
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !37
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !37
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !37
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !37
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %377, i32 %378, i32 %379, i32 %380, i32 %485, i32 %486) #1, !dbg !37
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !37
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !37
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !37
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !37
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %377, i32 %378, i32 %379, i32 %380, i32 %516, i32 %517) #1, !dbg !37
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !37
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !37
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !37
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !37
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %433, i32 %434, i32 %435, i32 %436, i32 %485, i32 %486) #1, !dbg !37
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !37
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !37
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !37
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !37
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %433, i32 %434, i32 %435, i32 %436, i32 %516, i32 %517) #1, !dbg !37
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !37
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !37
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !37
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !37
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %384, i32 %385, i32 %386, i32 %387, i32 %491, i32 %492) #1, !dbg !37
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !37
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !37
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !37
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !37
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %384, i32 %385, i32 %386, i32 %387, i32 %521, i32 %522) #1, !dbg !37
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !37
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !37
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !37
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !37
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %440, i32 %441, i32 %442, i32 %443, i32 %491, i32 %492) #1, !dbg !37
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !37
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !37
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !37
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !37
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %440, i32 %441, i32 %442, i32 %443, i32 %521, i32 %522) #1, !dbg !37
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !37
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !37
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !37
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !37
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %391, i32 %392, i32 %393, i32 %394, i32 %493, i32 %494) #1, !dbg !37
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !37
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !37
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !37
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !37
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %391, i32 %392, i32 %393, i32 %394, i32 %523, i32 %524) #1, !dbg !37
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !37
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !37
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !37
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !37
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %447, i32 %448, i32 %449, i32 %450, i32 %493, i32 %494) #1, !dbg !37
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !37
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !37
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !37
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !37
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %447, i32 %448, i32 %449, i32 %450, i32 %523, i32 %524) #1, !dbg !37
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !37
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !37
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !37
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !37
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %398, i32 %399, i32 %400, i32 %401, i32 %499, i32 %500) #1, !dbg !37
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !37
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !37
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !37
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !37
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %398, i32 %399, i32 %400, i32 %401, i32 %528, i32 %529) #1, !dbg !37
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !37
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !37
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !37
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !37
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %454, i32 %455, i32 %456, i32 %457, i32 %499, i32 %500) #1, !dbg !37
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !37
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !37
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !37
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !37
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %454, i32 %455, i32 %456, i32 %457, i32 %528, i32 %529) #1, !dbg !37
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !37
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !37
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !37
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !37
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %405, i32 %406, i32 %407, i32 %408, i32 %501, i32 %502) #1, !dbg !37
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !37
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !37
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !37
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !37
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %405, i32 %406, i32 %407, i32 %408, i32 %530, i32 %531) #1, !dbg !37
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !37
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !37
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !37
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !37
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %461, i32 %462, i32 %463, i32 %464, i32 %501, i32 %502) #1, !dbg !37
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !37
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !37
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !37
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !37
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %461, i32 %462, i32 %463, i32 %464, i32 %530, i32 %531) #1, !dbg !37
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !37
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !37
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !37
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !37
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %412, i32 %413, i32 %414, i32 %415, i32 %507, i32 %508) #1, !dbg !37
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !37
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !37
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !37
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !37
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %412, i32 %413, i32 %414, i32 %415, i32 %535, i32 %536) #1, !dbg !37
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !37
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !37
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !37
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !37
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %468, i32 %469, i32 %470, i32 %471, i32 %507, i32 %508) #1, !dbg !37
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !37
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !37
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !37
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !37
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %468, i32 %469, i32 %470, i32 %471, i32 %535, i32 %536) #1, !dbg !37
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !37
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !37
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !37
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !37
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %419, i32 %420, i32 %421, i32 %422, i32 %509, i32 %510) #1, !dbg !37
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !37
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !37
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !37
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !37
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %419, i32 %420, i32 %421, i32 %422, i32 %537, i32 %538) #1, !dbg !37
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !37
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !37
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !37
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !37
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %475, i32 %476, i32 %477, i32 %478, i32 %509, i32 %510) #1, !dbg !37
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !37
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !37
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !37
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !37
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %675, float %676, float %677, float %678, i32 %475, i32 %476, i32 %477, i32 %478, i32 %537, i32 %538) #1, !dbg !37
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !37
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !37
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !37
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !37
  %699 = add i32 %345, 1, !dbg !36
  %700 = icmp slt i32 %699, 4, !dbg !36
  %701 = select i1 %700, i32 %699, i32 0, !dbg !36
  %702 = shl nuw nsw i64 %indvars.iv, 7, !dbg !38
  %703 = add nuw nsw i64 %702, %330
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %703, !dbg !30
  %gep85 = getelementptr bfloat, ptr addrspace(1) %invariant.gep84, i64 %703, !dbg !30
  %gep87 = getelementptr bfloat, ptr addrspace(1) %invariant.gep86, i64 %703, !dbg !30
  %gep89 = getelementptr bfloat, ptr addrspace(1) %invariant.gep88, i64 %703, !dbg !30
  %gep91 = getelementptr bfloat, ptr addrspace(1) %invariant.gep90, i64 %703, !dbg !30
  %gep93 = getelementptr bfloat, ptr addrspace(1) %invariant.gep92, i64 %703, !dbg !30
  %gep95 = getelementptr bfloat, ptr addrspace(1) %invariant.gep94, i64 %703, !dbg !30
  %gep97 = getelementptr bfloat, ptr addrspace(1) %invariant.gep96, i64 %703, !dbg !30
  %.idx27 = shl i32 %701, 14, !dbg !31
  %704 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx27, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %705 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %99, !dbg !31
  %706 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %101, !dbg !31
  %707 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %103, !dbg !31
  %708 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %105, !dbg !31
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %107, !dbg !31
  %710 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %109, !dbg !31
  %711 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %111, !dbg !31
  %712 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %113, !dbg !31
  %713 = select i1 %362, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %705, ptr addrspace(1) %gep, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %706, ptr addrspace(1) %gep85, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %707, ptr addrspace(1) %gep87, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %708, ptr addrspace(1) %gep89, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %709, ptr addrspace(1) %gep91, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %710, ptr addrspace(1) %gep93, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %711, ptr addrspace(1) %gep95, i32 %713) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %712, ptr addrspace(1) %gep97, i32 %713) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep99 = getelementptr bfloat, ptr addrspace(1) %invariant.gep98, i64 %703, !dbg !33
  %gep101 = getelementptr bfloat, ptr addrspace(1) %invariant.gep100, i64 %703, !dbg !33
  %gep103 = getelementptr bfloat, ptr addrspace(1) %invariant.gep102, i64 %703, !dbg !33
  %gep105 = getelementptr bfloat, ptr addrspace(1) %invariant.gep104, i64 %703, !dbg !33
  %.idx28 = shl i32 %701, 13, !dbg !34
  %714 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx28, !dbg !34
  %715 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %714, i32 %99, !dbg !34
  %716 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %714, i32 %101, !dbg !34
  %717 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %714, i32 %103, !dbg !34
  %718 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %714, i32 %105, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %715, ptr addrspace(1) %gep99, i32 %713) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %716, ptr addrspace(1) %gep101, i32 %713) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %717, ptr addrspace(1) %gep103, i32 %713) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %718, ptr addrspace(1) %gep105, i32 %713) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !36
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !36
  br i1 %exitcond.not, label %719, label %343, !dbg !36

719:                                              ; preds = %343
  %720 = and i32 %35, 64, !dbg !26
  %721 = or disjoint i32 %34, %38, !dbg !23
  %722 = and i32 %23, 15, !dbg !19
  %723 = or disjoint i32 %722, %25, !dbg !19
  %724 = or disjoint i32 %723, %14, !dbg !20
  %725 = or disjoint i32 %724, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %726 = icmp slt i32 %724, 77, !dbg !39
  %727 = icmp slt i32 %725, 77, !dbg !39
  %728 = icmp slt i32 %721, 768, !dbg !40
  %729 = and i1 %726, %728, !dbg !41
  %730 = and i1 %727, %728, !dbg !41
  %731 = mul i32 %724, 768, !dbg !42
  %732 = mul i32 %725, 768, !dbg !42
  %733 = add i32 %731, %721, !dbg !43
  %734 = add i32 %732, %721, !dbg !43
  %735 = sext i32 %733 to i64, !dbg !44
  %736 = getelementptr bfloat, ptr addrspace(1) %2, i64 %735, !dbg !44
  %737 = sext i32 %734 to i64, !dbg !44
  %738 = getelementptr bfloat, ptr addrspace(1) %2, i64 %737, !dbg !44
  %739 = fptrunc float %680 to bfloat, !dbg !45
  %740 = fptrunc float %681 to bfloat, !dbg !45
  %741 = fptrunc float %682 to bfloat, !dbg !45
  %742 = fptrunc float %683 to bfloat, !dbg !45
  %743 = fptrunc float %685 to bfloat, !dbg !45
  %744 = fptrunc float %686 to bfloat, !dbg !45
  %745 = fptrunc float %687 to bfloat, !dbg !45
  %746 = fptrunc float %688 to bfloat, !dbg !45
  %747 = fptrunc float %690 to bfloat, !dbg !45
  %748 = fptrunc float %691 to bfloat, !dbg !45
  %749 = fptrunc float %692 to bfloat, !dbg !45
  %750 = fptrunc float %693 to bfloat, !dbg !45
  %751 = fptrunc float %695 to bfloat, !dbg !45
  %752 = fptrunc float %696 to bfloat, !dbg !45
  %753 = fptrunc float %697 to bfloat, !dbg !45
  %754 = fptrunc float %698 to bfloat, !dbg !45
  %755 = shl i32 %15, 1, !dbg !45
  %756 = and i32 %755, 6, !dbg !45
  %757 = shl nuw nsw i32 %16, 3, !dbg !45
  %758 = or disjoint i32 %756, %757, !dbg !45
  %759 = or disjoint i32 %758, %720, !dbg !45
  %760 = or disjoint i32 %759, %55, !dbg !45
  %761 = or disjoint i32 %760, %24, !dbg !45
  %762 = shl nuw nsw i32 %17, 3, !dbg !45
  %763 = or disjoint i32 %761, %762, !dbg !45
  %764 = and i32 %35, 384, !dbg !45
  %765 = or disjoint i32 %762, %764, !dbg !45
  %766 = or disjoint i32 %765, %57, !dbg !45
  %767 = lshr i32 %763, 2, !dbg !45
  %768 = and i32 %767, 1073741816, !dbg !45
  %769 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %768, !dbg !45
  %770 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %769, i32 %763, !dbg !45
  %771 = bitcast bfloat %739 to i16, !dbg !45
  %772 = bitcast bfloat %740 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %770, i16 %771, i16 %772, i1 true) #1, !dbg !45
  %773 = xor i32 %763, 256, !dbg !45
  %774 = lshr i32 %773, 2, !dbg !45
  %775 = and i32 %774, 1073741816, !dbg !45
  %776 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %775, !dbg !45
  %777 = getelementptr bfloat, ptr addrspace(3) %776, i32 %773, !dbg !45
  %778 = bitcast bfloat %741 to i16, !dbg !45
  %779 = bitcast bfloat %742 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %777, i16 %778, i16 %779, i1 true) #1, !dbg !45
  %780 = xor i32 %763, 16, !dbg !45
  %781 = getelementptr bfloat, ptr addrspace(3) %769, i32 %780, !dbg !45
  %782 = bitcast bfloat %743 to i16, !dbg !45
  %783 = bitcast bfloat %744 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %781, i16 %782, i16 %783, i1 true) #1, !dbg !45
  %784 = xor i32 %763, 272, !dbg !45
  %785 = lshr i32 %784, 2, !dbg !45
  %786 = and i32 %785, 1073741816, !dbg !45
  %787 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %786, !dbg !45
  %788 = getelementptr bfloat, ptr addrspace(3) %787, i32 %784, !dbg !45
  %789 = bitcast bfloat %745 to i16, !dbg !45
  %790 = bitcast bfloat %746 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %788, i16 %789, i16 %790, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %791 = lshr exact i32 %766, 2, !dbg !45
  %792 = and i32 %791, 248, !dbg !45
  %793 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %792, !dbg !45
  %794 = getelementptr bfloat, ptr addrspace(3) %793, i32 %766, !dbg !45
  %795 = load <4 x i32>, ptr addrspace(3) %794, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %796 = bitcast bfloat %747 to i16, !dbg !45
  %797 = bitcast bfloat %748 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %770, i16 %796, i16 %797, i1 true) #1, !dbg !45
  %798 = bitcast bfloat %749 to i16, !dbg !45
  %799 = bitcast bfloat %750 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %777, i16 %798, i16 %799, i1 true) #1, !dbg !45
  %800 = bitcast bfloat %751 to i16, !dbg !45
  %801 = bitcast bfloat %752 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %781, i16 %800, i16 %801, i1 true) #1, !dbg !45
  %802 = bitcast bfloat %753 to i16, !dbg !45
  %803 = bitcast bfloat %754 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %788, i16 %802, i16 %803, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %804 = load <4 x i32>, ptr addrspace(3) %794, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %795, i64 0, !dbg !45
  %.extract31 = extractelement <4 x i32> %795, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %795, i64 2, !dbg !45
  %.extract35 = extractelement <4 x i32> %795, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract31, i32 %.extract33, i32 %.extract35, ptr addrspace(1) %736, i1 %729) #1, !dbg !45
  %.extract37 = extractelement <4 x i32> %804, i64 0, !dbg !45
  %.extract39 = extractelement <4 x i32> %804, i64 1, !dbg !45
  %.extract41 = extractelement <4 x i32> %804, i64 2, !dbg !45
  %.extract43 = extractelement <4 x i32> %804, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract39, i32 %.extract41, i32 %.extract43, ptr addrspace(1) %738, i1 %730) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4gc6ekyrbfzvd44lhd72hdnabng3rqdtul5seplbinrl6oxy3e.py", directory: "/tmp/torchinductor_root/p4")
!4 = !{ptr @triton_tem_fused_addmm_6, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_tem_fused_addmm_6", linkageName: "triton_tem_fused_addmm_6", scope: !3, file: !3, line: 16, type: !7, scopeLine: 16, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 39, column: 24, scope: !6)
!10 = !DILocation(line: 45, column: 22, scope: !6)
!11 = !DILocation(line: 46, column: 41, scope: !6)
!12 = !DILocation(line: 46, column: 30, scope: !6)
!13 = !DILocation(line: 46, column: 50, scope: !6)
!14 = !DILocation(line: 47, column: 40, scope: !6)
!15 = !DILocation(line: 47, column: 34, scope: !6)
!16 = !DILocation(line: 48, column: 19, scope: !6)
!17 = !DILocation(line: 48, column: 30, scope: !6)
!18 = !DILocation(line: 50, column: 17, scope: !6)
!19 = !DILocation(line: 50, column: 40, scope: !6)
!20 = !DILocation(line: 50, column: 27, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 51, column: 40, scope: !6)
!23 = !DILocation(line: 51, column: 27, scope: !6)
!24 = !DILocation(line: 53, column: 57, scope: !6)
!25 = !DILocation(line: 57, column: 57, scope: !6)
!26 = !DILocation(line: 65, column: 30, scope: !6)
!27 = !DILocation(line: 70, column: 30, scope: !6)
!28 = !DILocation(line: 76, column: 55, scope: !6)
!29 = !DILocation(line: 70, column: 25, scope: !6)
!30 = !DILocation(line: 71, column: 25, scope: !6)
!31 = !DILocation(line: 71, column: 20, scope: !6)
!32 = !DILocation(line: 76, column: 50, scope: !6)
!33 = !DILocation(line: 76, column: 25, scope: !6)
!34 = !DILocation(line: 76, column: 20, scope: !6)
!35 = !DILocation(line: 65, column: 42, scope: !6)
!36 = !DILocation(line: 63, column: 26, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 65, column: 50, scope: !6)
!39 = !DILocation(line: 84, column: 20, scope: !6)
!40 = !DILocation(line: 84, column: 34, scope: !6)
!41 = !DILocation(line: 84, column: 26, scope: !6)
!42 = !DILocation(line: 87, column: 25, scope: !6)
!43 = !DILocation(line: 87, column: 21, scope: !6)
!44 = !DILocation(line: 88, column: 25, scope: !6)
!45 = !DILocation(line: 88, column: 67, scope: !6)
!46 = !DILocation(line: 88, column: 4, scope: !6)
