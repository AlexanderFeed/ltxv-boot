; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 6, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 2, !dbg !13
  %15 = and i32 %14, 63, !dbg !13
  %16 = or disjoint i32 %15, %12, !dbg !14
  %17 = icmp slt i32 %16, 512, !dbg !15
  %18 = and i32 %13, 3, !dbg !16
  %19 = sext i32 %16 to i64, !dbg !17
  %20 = getelementptr i64, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %17) #6, !dbg !18
  %22 = shl i32 %16, 12, !dbg !19
  %23 = add i64 %21, 32128, !dbg !20
  %24 = icmp slt i64 %21, 0, !dbg !21
  %25 = select i1 %24, i64 %23, i64 %21, !dbg !22
  %26 = icmp ugt i64 %25, 32127, !dbg !23
  %.not2 = and i1 %17, %26, !dbg !24
  %invariant.op = or disjoint i32 %18, %22, !dbg !25
  %27 = zext nneg i32 %18 to i64, !dbg !25
  %.idx = shl i64 %25, 13
  %28 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx
  br label %29, !dbg !25

29:                                               ; preds = %10, %40
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %40 ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %57, %40 ]
  %31 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %31
  %32 = sext i32 %.reass to i64, !dbg !26
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 %17) #6, !dbg !27
  %35 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !28
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 %17) #6, !dbg !29
  %37 = getelementptr bfloat, ptr addrspace(1) %4, i64 %32, !dbg !30
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 %17) #6, !dbg !31
  br i1 %.not2, label %39, label %40, !dbg !32

39:                                               ; preds = %29
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

40:                                               ; preds = %29
  %41 = or disjoint i64 %indvars.iv, %27, !dbg !33
  %42 = bitcast i16 %38 to bfloat, !dbg !31
  %43 = fpext bfloat %42 to float, !dbg !34
  %44 = bitcast i16 %36 to bfloat, !dbg !29
  %45 = fpext bfloat %44 to float, !dbg !35
  %46 = bitcast i16 %34 to bfloat, !dbg !27
  %47 = fpext bfloat %46 to float, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %48 = getelementptr bfloat, ptr addrspace(1) %28, i64 %41, !dbg !37
  %49 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %48, i1 %17) #6, !dbg !38
  %50 = bitcast i16 %49 to bfloat, !dbg !38
  %51 = fpext bfloat %50 to float, !dbg !39
  %52 = fadd float %47, %51, !dbg !40
  %53 = fadd float %52, %45, !dbg !41
  %54 = fadd float %53, %43, !dbg !42
  %55 = fmul float %54, %54, !dbg !43
  %56 = fadd float %30, %55, !dbg !44
  %57 = select i1 %17, float %56, float %30, !dbg !45
  %58 = fptrunc float %54 to bfloat, !dbg !46
  %59 = bitcast bfloat %58 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %59, ptr addrspace(1) %33, i1 %17) #6, !dbg !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !25
  %60 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !25
  br i1 %60, label %29, label %61, !dbg !25

61:                                               ; preds = %40
  %62 = bitcast float %57 to i32, !dbg !47
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !47
  %64 = bitcast i32 %63 to float, !dbg !47
  %65 = fadd float %57, %64, !dbg !51
  %66 = bitcast float %65 to i32, !dbg !47
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !47
  %68 = bitcast i32 %67 to float, !dbg !47
  %69 = fadd float %65, %68, !dbg !51
  %70 = tail call float @llvm.nvvm.div.full(float %69, float 4.096000e+03), !dbg !53
  %71 = fadd float %70, 0x3EB0C6F7A0000000, !dbg !54
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i = icmp eq i32 %72, 0, !dbg !55
  br i1 %.not.i, label %75, label %73, !dbg !55

73:                                               ; preds = %61
  %74 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

75:                                               ; preds = %61
  %76 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %73, %75
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], !dbg !55
  br label %77, !dbg !56

77:                                               ; preds = %__nv_rsqrtf.exit, %77
  %indvars.iv6 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next7, %77 ]
  %78 = or disjoint i64 %indvars.iv6, %27, !dbg !57
  %79 = getelementptr bfloat, ptr addrspace(1) %5, i64 %78, !dbg !58
  %80 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %79, i1 true) #6, !dbg !59
  %81 = bitcast i16 %80 to bfloat, !dbg !59
  %82 = fpext bfloat %81 to float, !dbg !60
  %83 = trunc nuw nsw i64 %indvars.iv6 to i32
  %.reass5 = or i32 %invariant.op, %83
  %84 = sext i32 %.reass5 to i64, !dbg !61
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !61
  %86 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %85, i1 %17) #6, !dbg !62
  %87 = bitcast i16 %86 to bfloat, !dbg !62
  %88 = fpext bfloat %87 to float, !dbg !63
  %89 = fmul float %.0.i, %88, !dbg !64
  %90 = fmul float %89, %82, !dbg !65
  %91 = getelementptr bfloat, ptr addrspace(1) %6, i64 %84, !dbg !66
  %92 = fptrunc float %90 to bfloat, !dbg !67
  %93 = bitcast bfloat %92 to i16, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %93, ptr addrspace(1) %91, i1 %17) #6, !dbg !67
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 4, !dbg !56
  %94 = icmp samesign ult i64 %indvars.iv6, 4092, !dbg !56
  br i1 %94, label %77, label %95, !dbg !56

95:                                               ; preds = %77
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 50, scope: !10)
!20 = !DILocation(line: 41, column: 22, scope: !10)
!21 = !DILocation(line: 42, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 44, column: 41, scope: !10)
!24 = !DILocation(line: 45, column: 46, scope: !10)
!25 = !DILocation(line: 31, column: 40, scope: !10)
!26 = !DILocation(line: 37, column: 38, scope: !10)
!27 = !DILocation(line: 37, column: 55, scope: !10)
!28 = !DILocation(line: 38, column: 34, scope: !10)
!29 = !DILocation(line: 38, column: 51, scope: !10)
!30 = !DILocation(line: 39, column: 35, scope: !10)
!31 = !DILocation(line: 39, column: 52, scope: !10)
!32 = !DILocation(line: 44, column: 68, scope: !10)
!33 = !DILocation(line: 32, column: 31, scope: !10)
!34 = !DILocation(line: 39, column: 114, scope: !10)
!35 = !DILocation(line: 38, column: 113, scope: !10)
!36 = !DILocation(line: 37, column: 117, scope: !10)
!37 = !DILocation(line: 45, column: 34, scope: !10)
!38 = !DILocation(line: 45, column: 53, scope: !10)
!39 = !DILocation(line: 45, column: 115, scope: !10)
!40 = !DILocation(line: 46, column: 22, scope: !10)
!41 = !DILocation(line: 47, column: 23, scope: !10)
!42 = !DILocation(line: 48, column: 24, scope: !10)
!43 = !DILocation(line: 50, column: 24, scope: !10)
!44 = !DILocation(line: 52, column: 25, scope: !10)
!45 = !DILocation(line: 53, column: 50, scope: !10)
!46 = !DILocation(line: 54, column: 56, scope: !10)
!47 = !DILocation(line: 286, column: 36, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !10, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!50 = !DILocation(line: 55, column: 27, scope: !10)
!51 = !DILocation(line: 256, column: 15, scope: !52, inlinedAt: !50)
!52 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!53 = !DILocation(line: 66, column: 25, scope: !10)
!54 = !DILocation(line: 68, column: 24, scope: !10)
!55 = !DILocation(line: 69, column: 32, scope: !10)
!56 = !DILocation(line: 56, column: 40, scope: !10)
!57 = !DILocation(line: 57, column: 31, scope: !10)
!58 = !DILocation(line: 62, column: 35, scope: !10)
!59 = !DILocation(line: 62, column: 42, scope: !10)
!60 = !DILocation(line: 62, column: 95, scope: !10)
!61 = !DILocation(line: 63, column: 39, scope: !10)
!62 = !DILocation(line: 63, column: 56, scope: !10)
!63 = !DILocation(line: 63, column: 118, scope: !10)
!64 = !DILocation(line: 70, column: 24, scope: !10)
!65 = !DILocation(line: 72, column: 24, scope: !10)
!66 = !DILocation(line: 73, column: 29, scope: !10)
!67 = !DILocation(line: 73, column: 53, scope: !10)
!68 = !DILocation(line: 56, column: 4, scope: !10)
