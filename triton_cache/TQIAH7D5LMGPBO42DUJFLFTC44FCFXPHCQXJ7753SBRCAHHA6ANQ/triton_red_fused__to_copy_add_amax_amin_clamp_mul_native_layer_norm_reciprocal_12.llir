; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 2, !dbg !11
  %22 = and i32 %21, 4092, !dbg !11
  %23 = sext i32 %16 to i64, !dbg !12
  %24 = getelementptr bfloat, ptr addrspace(1) %4, i64 %23, !dbg !12
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %17) #5, !dbg !13
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %17) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %17) #5, !dbg !13
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %17) #5, !dbg !13
  %29 = bitcast i16 %28 to bfloat, !dbg !13
  %30 = getelementptr bfloat, ptr addrspace(1) %5, i64 %23, !dbg !14
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %17) #5, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %17) #5, !dbg !15
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %17) #5, !dbg !15
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %17) #5, !dbg !15
  %35 = bitcast i16 %34 to bfloat, !dbg !15
  %36 = icmp samesign ult i32 %22, 3072, !dbg !16
  %37 = mul i32 %16, 3072, !dbg !17
  %38 = add i32 %22, %37, !dbg !18
  %39 = sext i32 %38 to i64, !dbg !19
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = and i1 %17, %36, !dbg !20
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %41) #5, !dbg !21
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !21
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !21
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !21
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !21
  %47 = add nuw nsw i32 %22, 6144, !dbg !22
  %48 = zext nneg i32 %47 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %36) #5, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = getelementptr bfloat, ptr addrspace(1) %2, i64 %48, !dbg !25
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %36) #5, !dbg !26
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !26
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !26
  %59 = extractvalue { i32, i32 } %56, 1, !dbg !26
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !26
  %61 = getelementptr i32, ptr addrspace(1) %3, i64 %39, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %41) #5, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = zext nneg i32 %22 to i64, !dbg !29
  %68 = getelementptr bfloat, ptr addrspace(1) %6, i64 %67, !dbg !29
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %68, i1 %36) #5, !dbg !30
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !30
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !30
  %72 = extractvalue { i32, i32 } %69, 1, !dbg !30
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !30
  %74 = getelementptr bfloat, ptr addrspace(1) %7, i64 %67, !dbg !31
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %74, i1 %36) #5, !dbg !32
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !32
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !32
  %78 = extractvalue { i32, i32 } %75, 1, !dbg !32
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !32
  %.inv = fcmp oge bfloat %29, 0xR0000, !dbg !33
  %80 = select i1 %.inv, bfloat 0xR0000, bfloat %29, !dbg !33
  %81 = fpext bfloat %80 to float, !dbg !33
  %82 = fsub float 0.000000e+00, %81, !dbg !37
  %.inv1 = fcmp ole bfloat %35, 0xR0000, !dbg !38
  %83 = select i1 %.inv1, bfloat 0xR0000, bfloat %35, !dbg !38
  %84 = fpext bfloat %83 to float, !dbg !38
  %85 = fcmp ogt float %82, %84, !dbg !40
  %86 = fcmp uno float %82, 0.000000e+00, !dbg !42
  %87 = or i1 %86, %85, !dbg !43
  %88 = select i1 %87, float %82, float %84, !dbg !44
  %89 = fmul float %88, 0x3F80204080000000, !dbg !45
  %90 = fcmp ogt float %89, 0x3EE4F8B580000000, !dbg !46
  %91 = fcmp uno float %89, 0.000000e+00, !dbg !48
  %92 = or i1 %90, %91, !dbg !49
  %93 = select i1 %92, float %89, float 0x3EE4F8B580000000, !dbg !50
  %94 = select i1 %41, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %95 = getelementptr bfloat, ptr addrspace(1) %8, i64 %39, !dbg !52
  %96 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !53
  %97 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !24
  %98 = insertelement <2 x i32> %97, i32 %52, i64 1, !dbg !24
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !24
  %100 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !54
  %101 = fpext <2 x bfloat> %71 to <2 x float>, !dbg !55
  %102 = fpext <2 x bfloat> %77 to <2 x float>, !dbg !56
  %103 = fadd <2 x float> %99, %100, !dbg !57
  %104 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !58
  %105 = insertelement <2 x i32> %104, i32 %64, i64 1, !dbg !58
  %106 = sitofp <2 x i32> %105 to <2 x float>, !dbg !58
  %107 = insertelement <2 x float> poison, float %93, i64 0, !dbg !59
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %109 = fmul <2 x float> %108, %106, !dbg !59
  %110 = fmul <2 x float> %109, %101, !dbg !60
  %111 = fadd <2 x float> %110, %102, !dbg !61
  %112 = fmul <2 x float> %103, %111, !dbg !62
  %113 = fadd <2 x float> %112, %96, !dbg !63
  %114 = extractelement <2 x float> %113, i64 0, !dbg !64
  %115 = select i1 %41, float %114, float 0.000000e+00, !dbg !64
  %116 = extractelement <2 x float> %113, i64 1, !dbg !64
  %117 = select i1 %41, float %116, float 0.000000e+00, !dbg !64
  %118 = fptrunc <2 x float> %113 to <2 x bfloat>, !dbg !65
  %119 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !53
  %120 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !24
  %121 = insertelement <2 x i32> %120, i32 %54, i64 1, !dbg !24
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !24
  %123 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !54
  %124 = fpext <2 x bfloat> %73 to <2 x float>, !dbg !55
  %125 = fpext <2 x bfloat> %79 to <2 x float>, !dbg !56
  %126 = fadd <2 x float> %122, %123, !dbg !57
  %127 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !58
  %128 = insertelement <2 x i32> %127, i32 %66, i64 1, !dbg !58
  %129 = sitofp <2 x i32> %128 to <2 x float>, !dbg !58
  %130 = fmul <2 x float> %108, %129, !dbg !59
  %131 = fmul <2 x float> %130, %124, !dbg !60
  %132 = fadd <2 x float> %131, %125, !dbg !61
  %133 = fmul <2 x float> %126, %132, !dbg !62
  %134 = fadd <2 x float> %133, %119, !dbg !63
  %135 = extractelement <2 x float> %134, i64 0, !dbg !64
  %136 = select i1 %41, float %135, float 0.000000e+00, !dbg !64
  %137 = extractelement <2 x float> %134, i64 1, !dbg !64
  %138 = select i1 %41, float %137, float 0.000000e+00, !dbg !64
  %139 = fptrunc <2 x float> %134 to <2 x bfloat>, !dbg !65
  %140 = bitcast <2 x bfloat> %118 to i32, !dbg !65
  %141 = bitcast <2 x bfloat> %139 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %95, i1 %41) #5, !dbg !65
  %142 = fsub float %117, %115, !dbg !66
  %143 = select i1 %41, float 2.000000e+00, float 0.000000e+00, !dbg !69
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !70
  %145 = tail call float @llvm.nvvm.div.full(float %94, float %143), !dbg !71
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !72
  %147 = fmul float %146, %142, !dbg !73
  %148 = fadd float %115, %147, !dbg !74
  %149 = fmul float %142, %142, !dbg !75
  %150 = fmul float %94, %149, !dbg !76
  %151 = fmul float %146, %150, !dbg !77
  %152 = fadd float %151, 0.000000e+00, !dbg !78
  %153 = fsub float %136, %148, !dbg !66
  %154 = select i1 %41, float 3.000000e+00, float 0.000000e+00, !dbg !69
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !70
  %156 = tail call float @llvm.nvvm.div.full(float %94, float %154), !dbg !71
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !72
  %158 = fmul float %157, %153, !dbg !73
  %159 = fadd float %148, %158, !dbg !74
  %160 = fmul float %153, %153, !dbg !75
  %161 = fmul float %143, %160, !dbg !76
  %162 = fmul float %157, %161, !dbg !77
  %163 = fadd float %152, %162, !dbg !78
  %164 = fsub float %138, %159, !dbg !66
  %165 = select i1 %41, float 4.000000e+00, float 0.000000e+00, !dbg !69
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !70
  %167 = tail call float @llvm.nvvm.div.full(float %94, float %165), !dbg !71
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !72
  %169 = fmul float %168, %164, !dbg !73
  %170 = fadd float %159, %169, !dbg !74
  %171 = fmul float %164, %164, !dbg !75
  %172 = fmul float %154, %171, !dbg !76
  %173 = fmul float %168, %172, !dbg !77
  %174 = fadd float %163, %173, !dbg !78
  %175 = bitcast float %170 to i32, !dbg !79
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !79
  %177 = bitcast i32 %176 to float, !dbg !79
  %178 = bitcast float %174 to i32, !dbg !79
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !79
  %180 = bitcast i32 %179 to float, !dbg !79
  %181 = bitcast float %165 to i32, !dbg !79
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !79
  %183 = bitcast i32 %182 to float, !dbg !79
  %184 = fsub float %177, %170, !dbg !66
  %185 = fadd float %165, %183, !dbg !69
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !70
  %187 = tail call float @llvm.nvvm.div.full(float %183, float %185), !dbg !71
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !72
  %189 = fmul float %188, %184, !dbg !73
  %190 = fadd float %170, %189, !dbg !74
  %191 = fadd float %174, %180, !dbg !80
  %192 = fmul float %184, %184, !dbg !75
  %193 = fmul float %165, %192, !dbg !76
  %194 = fmul float %188, %193, !dbg !77
  %195 = fadd float %191, %194, !dbg !78
  %196 = bitcast float %190 to i32, !dbg !79
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !79
  %198 = bitcast i32 %197 to float, !dbg !79
  %199 = bitcast float %195 to i32, !dbg !79
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !79
  %201 = bitcast i32 %200 to float, !dbg !79
  %202 = bitcast float %185 to i32, !dbg !79
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !79
  %204 = bitcast i32 %203 to float, !dbg !79
  %205 = fsub float %198, %190, !dbg !66
  %206 = fadd float %185, %204, !dbg !69
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !70
  %208 = tail call float @llvm.nvvm.div.full(float %204, float %206), !dbg !71
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !72
  %210 = fmul float %209, %205, !dbg !73
  %211 = fadd float %190, %210, !dbg !74
  %212 = fadd float %195, %201, !dbg !80
  %213 = fmul float %205, %205, !dbg !75
  %214 = fmul float %185, %213, !dbg !76
  %215 = fmul float %209, %214, !dbg !77
  %216 = fadd float %212, %215, !dbg !78
  %217 = bitcast float %211 to i32, !dbg !79
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !79
  %219 = bitcast i32 %218 to float, !dbg !79
  %220 = bitcast float %216 to i32, !dbg !79
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !79
  %222 = bitcast i32 %221 to float, !dbg !79
  %223 = bitcast float %206 to i32, !dbg !79
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !79
  %225 = bitcast i32 %224 to float, !dbg !79
  %226 = fsub float %219, %211, !dbg !66
  %227 = fadd float %206, %225, !dbg !69
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !70
  %229 = tail call float @llvm.nvvm.div.full(float %225, float %227), !dbg !71
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !72
  %231 = fmul float %230, %226, !dbg !73
  %232 = fadd float %211, %231, !dbg !74
  %233 = fadd float %216, %222, !dbg !80
  %234 = fmul float %226, %226, !dbg !75
  %235 = fmul float %206, %234, !dbg !76
  %236 = fmul float %230, %235, !dbg !77
  %237 = fadd float %233, %236, !dbg !78
  %238 = bitcast float %232 to i32, !dbg !79
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !79
  %240 = bitcast i32 %239 to float, !dbg !79
  %241 = bitcast float %237 to i32, !dbg !79
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !79
  %243 = bitcast i32 %242 to float, !dbg !79
  %244 = bitcast float %227 to i32, !dbg !79
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !79
  %246 = bitcast i32 %245 to float, !dbg !79
  %247 = fsub float %240, %232, !dbg !66
  %248 = fadd float %227, %246, !dbg !69
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !70
  %250 = tail call float @llvm.nvvm.div.full(float %246, float %248), !dbg !71
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !72
  %252 = fmul float %251, %247, !dbg !73
  %253 = fadd float %232, %252, !dbg !74
  %254 = fadd float %237, %243, !dbg !80
  %255 = fmul float %247, %247, !dbg !75
  %256 = fmul float %227, %255, !dbg !76
  %257 = fmul float %251, %256, !dbg !77
  %258 = fadd float %254, %257, !dbg !78
  %259 = bitcast float %253 to i32, !dbg !79
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !79
  %261 = bitcast i32 %260 to float, !dbg !79
  %262 = bitcast float %258 to i32, !dbg !79
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !79
  %264 = bitcast i32 %263 to float, !dbg !79
  %265 = bitcast float %248 to i32, !dbg !79
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !79
  %267 = bitcast i32 %266 to float, !dbg !79
  %268 = fsub float %261, %253, !dbg !66
  %269 = fadd float %248, %267, !dbg !69
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !70
  %271 = tail call float @llvm.nvvm.div.full(float %267, float %269), !dbg !71
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !72
  %273 = fmul float %272, %268, !dbg !73
  %274 = fadd float %253, %273, !dbg !74
  %275 = fadd float %258, %264, !dbg !80
  %276 = fmul float %268, %268, !dbg !75
  %277 = fmul float %248, %276, !dbg !76
  %278 = fmul float %272, %277, !dbg !77
  %279 = fadd float %275, %278, !dbg !78
  %280 = and i32 %20, 31, !dbg !79
  %281 = icmp eq i32 %19, 0, !dbg !79
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !79
  %283 = bitcast float %274 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 %281) #5, !dbg !79
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %280, !dbg !79
  %285 = bitcast float %279 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 %281) #5, !dbg !79
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %280, !dbg !79
  %287 = bitcast float %269 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %281) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %288 = icmp slt i32 %18, 32, !dbg !79
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !79
  %290 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !79
  %291 = bitcast i32 %290 to float, !dbg !79
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !79
  %293 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %292, i1 %288) #5, !dbg !79
  %294 = bitcast i32 %293 to float, !dbg !79
  %295 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !79
  %296 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %288) #5, !dbg !79
  %297 = bitcast i32 %296 to float, !dbg !79
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !79
  %299 = bitcast i32 %298 to float, !dbg !79
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 16, i32 31), !dbg !79
  %301 = bitcast i32 %300 to float, !dbg !79
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 16, i32 31), !dbg !79
  %303 = bitcast i32 %302 to float, !dbg !79
  %304 = fsub float %299, %291, !dbg !66
  %305 = fadd float %297, %303, !dbg !69
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !70
  %307 = tail call float @llvm.nvvm.div.full(float %303, float %305), !dbg !71
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !72
  %309 = fmul float %304, %308, !dbg !73
  %310 = fadd float %309, %291, !dbg !74
  %311 = fadd float %294, %301, !dbg !80
  %312 = fmul float %304, %304, !dbg !75
  %313 = fmul float %312, %297, !dbg !76
  %314 = fmul float %313, %308, !dbg !77
  %315 = fadd float %311, %314, !dbg !78
  %316 = bitcast float %310 to i32, !dbg !79
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !79
  %318 = bitcast i32 %317 to float, !dbg !79
  %319 = bitcast float %315 to i32, !dbg !79
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !79
  %321 = bitcast i32 %320 to float, !dbg !79
  %322 = bitcast float %305 to i32, !dbg !79
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !79
  %324 = bitcast i32 %323 to float, !dbg !79
  %325 = fsub float %318, %310, !dbg !66
  %326 = fadd float %305, %324, !dbg !69
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !70
  %328 = tail call float @llvm.nvvm.div.full(float %324, float %326), !dbg !71
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !72
  %330 = fmul float %325, %329, !dbg !73
  %331 = fadd float %310, %330, !dbg !74
  %332 = fadd float %315, %321, !dbg !80
  %333 = fmul float %325, %325, !dbg !75
  %334 = fmul float %305, %333, !dbg !76
  %335 = fmul float %329, %334, !dbg !77
  %336 = fadd float %332, %335, !dbg !78
  %337 = bitcast float %331 to i32, !dbg !79
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !79
  %339 = bitcast i32 %338 to float, !dbg !79
  %340 = bitcast float %336 to i32, !dbg !79
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !79
  %342 = bitcast i32 %341 to float, !dbg !79
  %343 = bitcast float %326 to i32, !dbg !79
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !79
  %345 = bitcast i32 %344 to float, !dbg !79
  %346 = fsub float %339, %331, !dbg !66
  %347 = fadd float %326, %345, !dbg !69
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !70
  %349 = tail call float @llvm.nvvm.div.full(float %345, float %347), !dbg !71
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !72
  %351 = fmul float %346, %350, !dbg !73
  %352 = fadd float %331, %351, !dbg !74
  %353 = fadd float %336, %342, !dbg !80
  %354 = fmul float %346, %346, !dbg !75
  %355 = fmul float %326, %354, !dbg !76
  %356 = fmul float %350, %355, !dbg !77
  %357 = fadd float %353, %356, !dbg !78
  %358 = bitcast float %352 to i32, !dbg !79
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !79
  %360 = bitcast i32 %359 to float, !dbg !79
  %361 = bitcast float %357 to i32, !dbg !79
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !79
  %363 = bitcast i32 %362 to float, !dbg !79
  %364 = bitcast float %347 to i32, !dbg !79
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !79
  %366 = bitcast i32 %365 to float, !dbg !79
  %367 = fsub float %360, %352, !dbg !66
  %368 = fadd float %347, %366, !dbg !69
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !70
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !71
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !72
  %372 = fmul float %367, %371, !dbg !73
  %373 = fadd float %352, %372, !dbg !74
  %374 = fadd float %357, %363, !dbg !80
  %375 = fmul float %367, %367, !dbg !75
  %376 = fmul float %347, %375, !dbg !76
  %377 = fmul float %371, %376, !dbg !77
  %378 = fadd float %374, %377, !dbg !78
  %379 = bitcast float %373 to i32, !dbg !79
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !79
  %381 = bitcast i32 %380 to float, !dbg !79
  %382 = bitcast float %378 to i32, !dbg !79
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !79
  %384 = bitcast i32 %383 to float, !dbg !79
  %385 = bitcast float %368 to i32, !dbg !79
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !79
  %387 = bitcast i32 %386 to float, !dbg !79
  %388 = fsub float %381, %373, !dbg !66
  %389 = fadd float %368, %387, !dbg !69
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !70
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !71
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !72
  %393 = fmul float %388, %392, !dbg !73
  %394 = fadd float %373, %393, !dbg !74
  %395 = fadd float %378, %384, !dbg !80
  %396 = fmul float %388, %388, !dbg !75
  %397 = fmul float %368, %396, !dbg !76
  %398 = fmul float %392, %397, !dbg !77
  %399 = fadd float %395, %398, !dbg !78
  %400 = and i1 %288, %281, !dbg !79
  %401 = bitcast float %394 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %401, i1 %400) #5, !dbg !79
  %402 = bitcast float %399 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %402, i1 %400) #5, !dbg !79
  %403 = bitcast float %389 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %403, i1 %400) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %404 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %405 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !79
  %406 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %95, i1 %41) #5, !dbg !81
  %407 = or disjoint i32 %22, 12288, !dbg !82
  %408 = zext nneg i32 %407 to i64, !dbg !83
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %408, !dbg !83
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %409, i1 %36) #5, !dbg !84
  %411 = getelementptr bfloat, ptr addrspace(1) %2, i64 %408, !dbg !85
  %412 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %411, i1 %36) #5, !dbg !86
  %413 = add nuw nsw i32 %22, 9216, !dbg !87
  %414 = zext nneg i32 %413 to i64, !dbg !88
  %415 = getelementptr float, ptr addrspace(1) %1, i64 %414, !dbg !88
  %416 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %415, i1 %36) #5, !dbg !89
  %417 = getelementptr bfloat, ptr addrspace(1) %2, i64 %414, !dbg !90
  %418 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %417, i1 %36) #5, !dbg !91
  %419 = tail call float @llvm.nvvm.div.full(float %405, float 3.072000e+03), !dbg !92
  %420 = fadd float %419, 0x3EB0C6F7A0000000, !dbg !93
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i10 = icmp eq i32 %424, 0, !dbg !94
  br i1 %.not.i10, label %427, label %425, !dbg !94

425:                                              ; preds = %__nv_rsqrtf.exit
  %426 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %420), !dbg !94
  br label %__nv_rsqrtf.exit12, !dbg !94

427:                                              ; preds = %__nv_rsqrtf.exit
  %428 = tail call float @llvm.nvvm.rsqrt.approx.f(float %420), !dbg !94
  br label %__nv_rsqrtf.exit12, !dbg !94

__nv_rsqrtf.exit12:                               ; preds = %425, %427
  %.0.i11 = phi float [ %426, %425 ], [ %428, %427 ], !dbg !94
  %429 = extractvalue { i32, i32 } %406, 1, !dbg !81
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !81
  %431 = extractvalue { i32, i32 } %406, 0, !dbg !81
  %432 = bitcast i32 %431 to <2 x bfloat>, !dbg !81
  %433 = extractvalue { i32, i32 } %418, 1, !dbg !91
  %434 = bitcast i32 %433 to <2 x bfloat>, !dbg !91
  %435 = extractvalue { i32, i32 } %418, 0, !dbg !91
  %436 = bitcast i32 %435 to <2 x bfloat>, !dbg !91
  %437 = extractvalue { i32, i32, i32, i32 } %416, 3, !dbg !89
  %438 = extractvalue { i32, i32, i32, i32 } %416, 2, !dbg !89
  %439 = extractvalue { i32, i32, i32, i32 } %416, 1, !dbg !89
  %440 = extractvalue { i32, i32, i32, i32 } %416, 0, !dbg !89
  %441 = extractvalue { i32, i32 } %412, 1, !dbg !86
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !86
  %443 = extractvalue { i32, i32 } %412, 0, !dbg !86
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !86
  %445 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !84
  %446 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !84
  %447 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !84
  %448 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !84
  %449 = getelementptr bfloat, ptr addrspace(1) %9, i64 %39, !dbg !95
  %450 = fpext <2 x bfloat> %432 to <2 x float>, !dbg !96
  %451 = insertelement <2 x float> poison, float %404, i64 0, !dbg !97
  %452 = shufflevector <2 x float> %451, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %453 = fsub <2 x float> %450, %452, !dbg !97
  %454 = fpext <2 x bfloat> %436 to <2 x float>, !dbg !98
  %455 = insertelement <2 x i32> poison, i32 %440, i64 0, !dbg !89
  %456 = insertelement <2 x i32> %455, i32 %439, i64 1, !dbg !89
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !89
  %458 = fpext <2 x bfloat> %444 to <2 x float>, !dbg !99
  %459 = insertelement <2 x i32> poison, i32 %448, i64 0, !dbg !84
  %460 = insertelement <2 x i32> %459, i32 %447, i64 1, !dbg !84
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !84
  %462 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !100
  %463 = shufflevector <2 x float> %462, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %464 = fmul <2 x float> %453, %463, !dbg !100
  %465 = fadd <2 x float> %461, %458, !dbg !101
  %466 = fadd <2 x float> %465, splat (float 1.000000e+00), !dbg !102
  %467 = fmul <2 x float> %466, %464, !dbg !103
  %468 = fadd <2 x float> %457, %454, !dbg !104
  %469 = fadd <2 x float> %468, %467, !dbg !105
  %470 = extractelement <2 x float> %469, i64 0, !dbg !106
  %471 = select i1 %41, float %470, float 0x7FF0000000000000, !dbg !107
  %472 = extractelement <2 x float> %469, i64 1, !dbg !106
  %473 = select i1 %41, float %472, float 0x7FF0000000000000, !dbg !107
  %474 = select i1 %41, float %470, float 0xFFF0000000000000, !dbg !106
  %475 = select i1 %41, float %472, float 0xFFF0000000000000, !dbg !106
  %476 = fptrunc <2 x float> %469 to <2 x bfloat>, !dbg !108
  %477 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !96
  %478 = fsub <2 x float> %477, %452, !dbg !97
  %479 = fpext <2 x bfloat> %434 to <2 x float>, !dbg !98
  %480 = insertelement <2 x i32> poison, i32 %438, i64 0, !dbg !89
  %481 = insertelement <2 x i32> %480, i32 %437, i64 1, !dbg !89
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !89
  %483 = fpext <2 x bfloat> %442 to <2 x float>, !dbg !99
  %484 = insertelement <2 x i32> poison, i32 %446, i64 0, !dbg !84
  %485 = insertelement <2 x i32> %484, i32 %445, i64 1, !dbg !84
  %486 = bitcast <2 x i32> %485 to <2 x float>, !dbg !84
  %487 = fmul <2 x float> %478, %463, !dbg !100
  %488 = fadd <2 x float> %486, %483, !dbg !101
  %489 = fadd <2 x float> %488, splat (float 1.000000e+00), !dbg !102
  %490 = fmul <2 x float> %489, %487, !dbg !103
  %491 = fadd <2 x float> %482, %479, !dbg !104
  %492 = fadd <2 x float> %491, %490, !dbg !105
  %493 = extractelement <2 x float> %492, i64 0, !dbg !106
  %494 = select i1 %41, float %493, float 0x7FF0000000000000, !dbg !107
  %495 = extractelement <2 x float> %492, i64 1, !dbg !106
  %496 = select i1 %41, float %495, float 0x7FF0000000000000, !dbg !107
  %497 = select i1 %41, float %493, float 0xFFF0000000000000, !dbg !106
  %498 = select i1 %41, float %495, float 0xFFF0000000000000, !dbg !106
  %499 = fptrunc <2 x float> %492 to <2 x bfloat>, !dbg !108
  %500 = bitcast <2 x bfloat> %476 to i32, !dbg !108
  %501 = bitcast <2 x bfloat> %499 to i32, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %500, i32 %501, ptr addrspace(1) %449, i1 %41) #5, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %502 = fcmp olt float %471, %473, !dbg !111
  %503 = fcmp uno float %471, 0.000000e+00, !dbg !112
  %504 = or i1 %502, %503, !dbg !113
  %505 = select i1 %504, float %471, float %473, !dbg !114
  %506 = fcmp olt float %505, %494, !dbg !111
  %507 = fcmp uno float %505, 0.000000e+00, !dbg !112
  %508 = or i1 %506, %507, !dbg !113
  %509 = select i1 %508, float %505, float %494, !dbg !114
  %510 = fcmp olt float %509, %496, !dbg !111
  %511 = fcmp uno float %509, 0.000000e+00, !dbg !112
  %512 = or i1 %510, %511, !dbg !113
  %513 = select i1 %512, float %509, float %496, !dbg !114
  %514 = bitcast float %513 to i32, !dbg !109
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 16, i32 31), !dbg !109
  %516 = bitcast i32 %515 to float, !dbg !109
  %517 = fcmp olt float %513, %516, !dbg !111
  %518 = fcmp uno float %513, 0.000000e+00, !dbg !112
  %519 = or i1 %517, %518, !dbg !113
  %520 = select i1 %519, float %513, float %516, !dbg !114
  %521 = bitcast float %520 to i32, !dbg !109
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 8, i32 31), !dbg !109
  %523 = bitcast i32 %522 to float, !dbg !109
  %524 = fcmp olt float %520, %523, !dbg !111
  %525 = fcmp uno float %520, 0.000000e+00, !dbg !112
  %526 = or i1 %524, %525, !dbg !113
  %527 = select i1 %526, float %520, float %523, !dbg !114
  %528 = bitcast float %527 to i32, !dbg !109
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 4, i32 31), !dbg !109
  %530 = bitcast i32 %529 to float, !dbg !109
  %531 = fcmp olt float %527, %530, !dbg !111
  %532 = fcmp uno float %527, 0.000000e+00, !dbg !112
  %533 = or i1 %531, %532, !dbg !113
  %534 = select i1 %533, float %527, float %530, !dbg !114
  %535 = bitcast float %534 to i32, !dbg !109
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 2, i32 31), !dbg !109
  %537 = bitcast i32 %536 to float, !dbg !109
  %538 = fcmp olt float %534, %537, !dbg !111
  %539 = fcmp uno float %534, 0.000000e+00, !dbg !112
  %540 = or i1 %538, %539, !dbg !113
  %541 = select i1 %540, float %534, float %537, !dbg !114
  %542 = bitcast float %541 to i32, !dbg !109
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !109
  %544 = bitcast i32 %543 to float, !dbg !109
  %545 = fcmp olt float %541, %544, !dbg !111
  %546 = fcmp uno float %541, 0.000000e+00, !dbg !112
  %547 = or i1 %545, %546, !dbg !113
  %548 = select i1 %547, i32 %542, i32 %543, !dbg !114
  %549 = insertelement <1 x i32> poison, i32 %548, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %549, i1 %281) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %550 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !109
  %551 = bitcast i32 %550 to float, !dbg !109
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 16, i32 31), !dbg !109
  %553 = bitcast i32 %552 to float, !dbg !109
  %554 = fcmp olt float %551, %553, !dbg !111
  %555 = fcmp uno float %551, 0.000000e+00, !dbg !112
  %556 = or i1 %555, %554, !dbg !113
  %557 = select i1 %556, float %551, float %553, !dbg !114
  %558 = bitcast float %557 to i32, !dbg !109
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 8, i32 31), !dbg !109
  %560 = bitcast i32 %559 to float, !dbg !109
  %561 = fcmp olt float %557, %560, !dbg !111
  %562 = fcmp uno float %557, 0.000000e+00, !dbg !112
  %563 = or i1 %561, %562, !dbg !113
  %564 = select i1 %563, float %557, float %560, !dbg !114
  %565 = bitcast float %564 to i32, !dbg !109
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 4, i32 31), !dbg !109
  %567 = bitcast i32 %566 to float, !dbg !109
  %568 = fcmp olt float %564, %567, !dbg !111
  %569 = fcmp uno float %564, 0.000000e+00, !dbg !112
  %570 = or i1 %568, %569, !dbg !113
  %571 = select i1 %570, float %564, float %567, !dbg !114
  %572 = bitcast float %571 to i32, !dbg !109
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 2, i32 31), !dbg !109
  %574 = bitcast i32 %573 to float, !dbg !109
  %575 = fcmp olt float %571, %574, !dbg !111
  %576 = fcmp uno float %571, 0.000000e+00, !dbg !112
  %577 = or i1 %575, %576, !dbg !113
  %578 = select i1 %577, float %571, float %574, !dbg !114
  %579 = bitcast float %578 to i32, !dbg !109
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 1, i32 31), !dbg !109
  %581 = bitcast i32 %580 to float, !dbg !109
  %582 = fcmp olt float %578, %581, !dbg !111
  %583 = fcmp uno float %578, 0.000000e+00, !dbg !112
  %584 = or i1 %582, %583, !dbg !113
  %585 = select i1 %584, i32 %579, i32 %580, !dbg !114
  %586 = insertelement <1 x i32> poison, i32 %585, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %586, i1 %400) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %587 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %588 = fcmp ogt float %474, %475, !dbg !117
  %589 = fcmp uno float %474, 0.000000e+00, !dbg !118
  %590 = or i1 %588, %589, !dbg !119
  %591 = select i1 %590, float %474, float %475, !dbg !120
  %592 = fcmp ogt float %591, %497, !dbg !117
  %593 = fcmp uno float %591, 0.000000e+00, !dbg !118
  %594 = or i1 %592, %593, !dbg !119
  %595 = select i1 %594, float %591, float %497, !dbg !120
  %596 = fcmp ogt float %595, %498, !dbg !117
  %597 = fcmp uno float %595, 0.000000e+00, !dbg !118
  %598 = or i1 %596, %597, !dbg !119
  %599 = select i1 %598, float %595, float %498, !dbg !120
  %600 = bitcast float %599 to i32, !dbg !115
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 16, i32 31), !dbg !115
  %602 = bitcast i32 %601 to float, !dbg !115
  %603 = fcmp ogt float %599, %602, !dbg !117
  %604 = fcmp uno float %599, 0.000000e+00, !dbg !118
  %605 = or i1 %604, %603, !dbg !119
  %606 = select i1 %605, float %599, float %602, !dbg !120
  %607 = bitcast float %606 to i32, !dbg !115
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 8, i32 31), !dbg !115
  %609 = bitcast i32 %608 to float, !dbg !115
  %610 = fcmp ogt float %606, %609, !dbg !117
  %611 = fcmp uno float %606, 0.000000e+00, !dbg !118
  %612 = or i1 %610, %611, !dbg !119
  %613 = select i1 %612, float %606, float %609, !dbg !120
  %614 = bitcast float %613 to i32, !dbg !115
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 4, i32 31), !dbg !115
  %616 = bitcast i32 %615 to float, !dbg !115
  %617 = fcmp ogt float %613, %616, !dbg !117
  %618 = fcmp uno float %613, 0.000000e+00, !dbg !118
  %619 = or i1 %617, %618, !dbg !119
  %620 = select i1 %619, float %613, float %616, !dbg !120
  %621 = bitcast float %620 to i32, !dbg !115
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 2, i32 31), !dbg !115
  %623 = bitcast i32 %622 to float, !dbg !115
  %624 = fcmp ogt float %620, %623, !dbg !117
  %625 = fcmp uno float %620, 0.000000e+00, !dbg !118
  %626 = or i1 %624, %625, !dbg !119
  %627 = select i1 %626, float %620, float %623, !dbg !120
  %628 = bitcast float %627 to i32, !dbg !115
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 1, i32 31), !dbg !115
  %630 = bitcast i32 %629 to float, !dbg !115
  %631 = fcmp ogt float %627, %630, !dbg !117
  %632 = fcmp uno float %627, 0.000000e+00, !dbg !118
  %633 = or i1 %631, %632, !dbg !119
  %634 = select i1 %633, i32 %628, i32 %629, !dbg !120
  %635 = insertelement <1 x i32> poison, i32 %634, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %635, i1 %281) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %636 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !115
  %637 = bitcast i32 %636 to float, !dbg !115
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 16, i32 31), !dbg !115
  %639 = bitcast i32 %638 to float, !dbg !115
  %640 = fcmp ogt float %637, %639, !dbg !117
  %641 = fcmp uno float %637, 0.000000e+00, !dbg !118
  %642 = or i1 %641, %640, !dbg !119
  %643 = select i1 %642, float %637, float %639, !dbg !120
  %644 = bitcast float %643 to i32, !dbg !115
  %645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %644, i32 8, i32 31), !dbg !115
  %646 = bitcast i32 %645 to float, !dbg !115
  %647 = fcmp ogt float %643, %646, !dbg !117
  %648 = fcmp uno float %643, 0.000000e+00, !dbg !118
  %649 = or i1 %647, %648, !dbg !119
  %650 = select i1 %649, float %643, float %646, !dbg !120
  %651 = bitcast float %650 to i32, !dbg !115
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 4, i32 31), !dbg !115
  %653 = bitcast i32 %652 to float, !dbg !115
  %654 = fcmp ogt float %650, %653, !dbg !117
  %655 = fcmp uno float %650, 0.000000e+00, !dbg !118
  %656 = or i1 %654, %655, !dbg !119
  %657 = select i1 %656, float %650, float %653, !dbg !120
  %658 = bitcast float %657 to i32, !dbg !115
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 2, i32 31), !dbg !115
  %660 = bitcast i32 %659 to float, !dbg !115
  %661 = fcmp ogt float %657, %660, !dbg !117
  %662 = fcmp uno float %657, 0.000000e+00, !dbg !118
  %663 = or i1 %661, %662, !dbg !119
  %664 = select i1 %663, float %657, float %660, !dbg !120
  %665 = bitcast float %664 to i32, !dbg !115
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 1, i32 31), !dbg !115
  %667 = bitcast i32 %666 to float, !dbg !115
  %668 = fcmp ogt float %664, %667, !dbg !117
  %669 = fcmp uno float %664, 0.000000e+00, !dbg !118
  %670 = or i1 %668, %669, !dbg !119
  %671 = select i1 %670, i32 %665, i32 %666, !dbg !120
  %672 = insertelement <1 x i32> poison, i32 %671, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %672, i1 %400) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %673 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !115
  %674 = getelementptr bfloat, ptr addrspace(1) %10, i64 %23, !dbg !121
  %675 = fptrunc float %587 to bfloat, !dbg !122
  %676 = and i32 %18, 1023, !dbg !122
  %677 = icmp eq i32 %676, 0, !dbg !122
  %678 = bitcast bfloat %675 to i16, !dbg !122
  %679 = and i1 %17, %677, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %678, ptr addrspace(1) %674, i1 %679) #5, !dbg !122
  %680 = getelementptr bfloat, ptr addrspace(1) %11, i64 %23, !dbg !123
  %681 = fptrunc float %673 to bfloat, !dbg !124
  %682 = bitcast bfloat %681 to i16, !dbg !124
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %682, ptr addrspace(1) %680, i1 %679) #5, !dbg !124
  %683 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %449, i1 %41) #5, !dbg !125
  %684 = extractvalue { i32, i32 } %683, 0, !dbg !125
  %685 = bitcast i32 %684 to <2 x bfloat>, !dbg !125
  %686 = extractvalue { i32, i32 } %683, 1, !dbg !125
  %687 = bitcast i32 %686 to <2 x bfloat>, !dbg !125
  %688 = extractelement <2 x bfloat> %685, i64 0, !dbg !125
  %689 = extractelement <2 x bfloat> %685, i64 1, !dbg !125
  %690 = extractelement <2 x bfloat> %687, i64 0, !dbg !125
  %691 = extractelement <2 x bfloat> %687, i64 1, !dbg !125
  %692 = fpext bfloat %688 to float, !dbg !126
  %693 = fpext bfloat %689 to float, !dbg !126
  %694 = fpext bfloat %690 to float, !dbg !126
  %695 = fpext bfloat %691 to float, !dbg !126
  %.inv2 = fcmp oge float %587, 0.000000e+00, !dbg !127
  %696 = select i1 %.inv2, float 0.000000e+00, float %587, !dbg !127
  %697 = fsub float 0.000000e+00, %696, !dbg !129
  %.inv3 = fcmp ole float %673, 0.000000e+00, !dbg !130
  %698 = select i1 %.inv3, float 0.000000e+00, float %673, !dbg !130
  %699 = fcmp ogt float %697, %698, !dbg !132
  %700 = fcmp uno float %697, 0.000000e+00, !dbg !134
  %701 = or i1 %700, %699, !dbg !135
  %702 = select i1 %701, float %697, float %698, !dbg !136
  %703 = fmul float %702, 0x3F80204080000000, !dbg !137
  %704 = fcmp ogt float %703, 0x3EE4F8B580000000, !dbg !138
  %705 = fcmp uno float %703, 0.000000e+00, !dbg !140
  %706 = or i1 %704, %705, !dbg !141
  %707 = select i1 %706, float %703, float 0x3EE4F8B580000000, !dbg !142
  %708 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %707), !dbg !143
  %709 = fmul float %708, %692, !dbg !144
  %710 = fmul float %708, %693, !dbg !144
  %711 = fmul float %708, %694, !dbg !144
  %712 = fmul float %708, %695, !dbg !144
  %713 = tail call float @llvm.nvvm.round.f(float %709) #5, !dbg !145
  %714 = tail call float @llvm.nvvm.round.f(float %710) #5, !dbg !145
  %715 = tail call float @llvm.nvvm.round.f(float %711) #5, !dbg !145
  %716 = tail call float @llvm.nvvm.round.f(float %712) #5, !dbg !145
  %717 = insertelement <4 x float> poison, float %713, i64 0, !dbg !146
  %718 = insertelement <4 x float> %717, float %714, i64 1, !dbg !146
  %719 = insertelement <4 x float> %718, float %715, i64 2, !dbg !146
  %720 = insertelement <4 x float> %719, float %716, i64 3, !dbg !146
  %721 = fcmp ogt <4 x float> %720, splat (float -1.270000e+02), !dbg !146
  %722 = fcmp uno <4 x float> %720, zeroinitializer, !dbg !148
  %723 = or <4 x i1> %721, %722, !dbg !149
  %724 = select <4 x i1> %723, <4 x float> %720, <4 x float> splat (float -1.270000e+02), !dbg !150
  %725 = fcmp olt <4 x float> %724, splat (float 1.270000e+02), !dbg !151
  %726 = fcmp uno <4 x float> %724, zeroinitializer, !dbg !153
  %727 = or <4 x i1> %725, %726, !dbg !154
  %728 = fptosi <4 x float> %724 to <4 x i8>, !dbg !155
  %729 = select <4 x i1> %727, <4 x i8> %728, <4 x i8> splat (i8 127), !dbg !156
  %730 = getelementptr i8, ptr addrspace(1) %12, i64 %39, !dbg !157
  %731 = bitcast <4 x i8> %729 to i32, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %731, ptr addrspace(1) %730, i1 %41) #5, !dbg !158
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 36, column: 29, scope: !6)
!17 = !DILocation(line: 40, column: 46, scope: !6)
!18 = !DILocation(line: 40, column: 41, scope: !6)
!19 = !DILocation(line: 40, column: 34, scope: !6)
!20 = !DILocation(line: 40, column: 59, scope: !6)
!21 = !DILocation(line: 40, column: 51, scope: !6)
!22 = !DILocation(line: 41, column: 41, scope: !6)
!23 = !DILocation(line: 41, column: 34, scope: !6)
!24 = !DILocation(line: 41, column: 48, scope: !6)
!25 = !DILocation(line: 42, column: 34, scope: !6)
!26 = !DILocation(line: 42, column: 48, scope: !6)
!27 = !DILocation(line: 43, column: 34, scope: !6)
!28 = !DILocation(line: 43, column: 51, scope: !6)
!29 = !DILocation(line: 44, column: 35, scope: !6)
!30 = !DILocation(line: 44, column: 42, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 45, column: 42, scope: !6)
!33 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 50, column: 44, scope: !6)
!37 = !DILocation(line: 51, column: 17, scope: !6)
!38 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !39)
!39 = !DILocation(line: 52, column: 46, scope: !6)
!40 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 53, column: 46, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 55, column: 24, scope: !6)
!46 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !47)
!47 = !DILocation(line: 58, column: 46, scope: !6)
!48 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !47)
!50 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !47)
!51 = !DILocation(line: 72, column: 68, scope: !6)
!52 = !DILocation(line: 73, column: 29, scope: !6)
!53 = !DILocation(line: 40, column: 113, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 45, column: 95, scope: !6)
!57 = !DILocation(line: 47, column: 22, scope: !6)
!58 = !DILocation(line: 48, column: 23, scope: !6)
!59 = !DILocation(line: 60, column: 23, scope: !6)
!60 = !DILocation(line: 61, column: 24, scope: !6)
!61 = !DILocation(line: 62, column: 24, scope: !6)
!62 = !DILocation(line: 63, column: 23, scope: !6)
!63 = !DILocation(line: 64, column: 23, scope: !6)
!64 = !DILocation(line: 70, column: 64, scope: !6)
!65 = !DILocation(line: 73, column: 53, scope: !6)
!66 = !DILocation(line: 217, column: 21, scope: !67, inlinedAt: !68)
!67 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!68 = !DILocation(line: 74, column: 85, scope: !6)
!69 = !DILocation(line: 218, column: 28, scope: !67, inlinedAt: !68)
!70 = !DILocation(line: 219, column: 39, scope: !67, inlinedAt: !68)
!71 = !DILocation(line: 219, column: 60, scope: !67, inlinedAt: !68)
!72 = !DILocation(line: 219, column: 49, scope: !67, inlinedAt: !68)
!73 = !DILocation(line: 221, column: 25, scope: !67, inlinedAt: !68)
!74 = !DILocation(line: 221, column: 17, scope: !67, inlinedAt: !68)
!75 = !DILocation(line: 222, column: 30, scope: !67, inlinedAt: !68)
!76 = !DILocation(line: 222, column: 38, scope: !67, inlinedAt: !68)
!77 = !DILocation(line: 222, column: 49, scope: !67, inlinedAt: !68)
!78 = !DILocation(line: 222, column: 22, scope: !67, inlinedAt: !68)
!79 = !DILocation(line: 229, column: 46, scope: !34, inlinedAt: !68)
!80 = !DILocation(line: 222, column: 15, scope: !67, inlinedAt: !68)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 87, column: 43, scope: !6)
!83 = !DILocation(line: 87, column: 35, scope: !6)
!84 = !DILocation(line: 87, column: 50, scope: !6)
!85 = !DILocation(line: 88, column: 35, scope: !6)
!86 = !DILocation(line: 88, column: 50, scope: !6)
!87 = !DILocation(line: 89, column: 42, scope: !6)
!88 = !DILocation(line: 89, column: 35, scope: !6)
!89 = !DILocation(line: 89, column: 49, scope: !6)
!90 = !DILocation(line: 90, column: 35, scope: !6)
!91 = !DILocation(line: 90, column: 49, scope: !6)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 113, column: 29, scope: !6)
!96 = !DILocation(line: 86, column: 115, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 90, column: 102, scope: !6)
!99 = !DILocation(line: 88, column: 103, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 101, column: 24, scope: !6)
!102 = !DILocation(line: 103, column: 24, scope: !6)
!103 = !DILocation(line: 104, column: 24, scope: !6)
!104 = !DILocation(line: 106, column: 24, scope: !6)
!105 = !DILocation(line: 107, column: 24, scope: !6)
!106 = !DILocation(line: 112, column: 50, scope: !6)
!107 = !DILocation(line: 110, column: 50, scope: !6)
!108 = !DILocation(line: 113, column: 53, scope: !6)
!109 = !DILocation(line: 110, column: 29, scope: !34, inlinedAt: !110)
!110 = !DILocation(line: 114, column: 40, scope: !6)
!111 = !DILocation(line: 94, column: 15, scope: !67, inlinedAt: !110)
!112 = !DILocation(line: 96, column: 21, scope: !67, inlinedAt: !110)
!113 = !DILocation(line: 96, column: 16, scope: !67, inlinedAt: !110)
!114 = !DILocation(line: 97, column: 29, scope: !67, inlinedAt: !110)
!115 = !DILocation(line: 115, column: 29, scope: !34, inlinedAt: !116)
!116 = !DILocation(line: 115, column: 40, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !67, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 21, scope: !67, inlinedAt: !116)
!119 = !DILocation(line: 104, column: 16, scope: !67, inlinedAt: !116)
!120 = !DILocation(line: 105, column: 29, scope: !67, inlinedAt: !116)
!121 = !DILocation(line: 116, column: 25, scope: !6)
!122 = !DILocation(line: 116, column: 37, scope: !6)
!123 = !DILocation(line: 117, column: 25, scope: !6)
!124 = !DILocation(line: 117, column: 37, scope: !6)
!125 = !DILocation(line: 124, column: 53, scope: !6)
!126 = !DILocation(line: 124, column: 115, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !128)
!128 = !DILocation(line: 126, column: 46, scope: !6)
!129 = !DILocation(line: 127, column: 17, scope: !6)
!130 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !131)
!131 = !DILocation(line: 128, column: 46, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !133)
!133 = !DILocation(line: 129, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !133)
!137 = !DILocation(line: 131, column: 24, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !139)
!139 = !DILocation(line: 134, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !139)
!143 = !DILocation(line: 137, column: 25, scope: !6)
!144 = !DILocation(line: 140, column: 24, scope: !6)
!145 = !DILocation(line: 141, column: 36, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !147)
!147 = !DILocation(line: 144, column: 46, scope: !6)
!148 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !147)
!149 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !147)
!150 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !147)
!151 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !152)
!152 = !DILocation(line: 146, column: 46, scope: !6)
!153 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !152)
!154 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !152)
!155 = !DILocation(line: 148, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !152)
!157 = !DILocation(line: 149, column: 29, scope: !6)
!158 = !DILocation(line: 149, column: 53, scope: !6)
!159 = !DILocation(line: 118, column: 4, scope: !6)
