; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 640, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 640, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 31, !dbg !19
  %20 = or disjoint i32 %19, 32, !dbg !19
  %21 = or disjoint i32 %14, %19, !dbg !20
  %22 = or disjoint i32 %14, %20, !dbg !20
  %23 = shl nsw i32 %13, 7, !dbg !21
  %24 = shl i32 %15, 3, !dbg !22
  %25 = and i32 %24, 24, !dbg !22
  %26 = or disjoint i32 %23, %19, !dbg !23
  %27 = or disjoint i32 %23, %20, !dbg !23
  %28 = or disjoint i32 %26, 64, !dbg !23
  %29 = or disjoint i32 %26, 96, !dbg !23
  %30 = srem i32 %21, 512, !dbg !24
  %31 = srem i32 %22, 512, !dbg !24
  %32 = srem i32 %26, 10240, !dbg !25
  %33 = srem i32 %27, 10240, !dbg !25
  %34 = srem i32 %28, 10240, !dbg !25
  %35 = srem i32 %29, 10240, !dbg !25
  %36 = shl nsw i32 %30, 12, !dbg !26
  %37 = shl nsw i32 %31, 12, !dbg !26
  %38 = shl nsw i32 %32, 12, !dbg !27
  %39 = shl nsw i32 %33, 12, !dbg !27
  %40 = shl nsw i32 %34, 12, !dbg !27
  %41 = shl nsw i32 %35, 12, !dbg !27
  %42 = or disjoint i32 %36, %25, !dbg !28
  %43 = or disjoint i32 %37, %25, !dbg !28
  %44 = sext i32 %42 to i64, !dbg !29
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = sext i32 %43 to i64, !dbg !29
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = xor i32 %24, %15, !dbg !30
  %49 = and i32 %48, 24, !dbg !30
  %50 = shl nuw nsw i32 %19, 5, !dbg !30
  %51 = or disjoint i32 %50, %49, !dbg !30
  %52 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %51, !dbg !30
  %53 = or disjoint i32 %51, 1024, !dbg !30
  %54 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %53, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %52, ptr addrspace(1) %45, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %54, ptr addrspace(1) %47, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %55 = or disjoint i32 %38, %25, !dbg !31
  %56 = or disjoint i32 %39, %25, !dbg !31
  %57 = or disjoint i32 %40, %25, !dbg !31
  %58 = or disjoint i32 %41, %25, !dbg !31
  %59 = sext i32 %55 to i64, !dbg !32
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !32
  %61 = sext i32 %56 to i64, !dbg !32
  %62 = getelementptr bfloat, ptr addrspace(1) %1, i64 %61, !dbg !32
  %63 = sext i32 %57 to i64, !dbg !32
  %64 = getelementptr bfloat, ptr addrspace(1) %1, i64 %63, !dbg !32
  %65 = sext i32 %58 to i64, !dbg !32
  %66 = getelementptr bfloat, ptr addrspace(1) %1, i64 %65, !dbg !32
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %51, !dbg !33
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %53, !dbg !33
  %69 = or disjoint i32 %51, 2048, !dbg !33
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %69, !dbg !33
  %71 = or disjoint i32 %51, 3072, !dbg !33
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %67, ptr addrspace(1) %60, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %68, ptr addrspace(1) %62, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %64, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %72, ptr addrspace(1) %66, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %73 = or disjoint i32 %25, 32, !dbg !34
  %74 = or disjoint i32 %36, %73, !dbg !28
  %75 = or disjoint i32 %37, %73, !dbg !28
  %76 = sext i32 %74 to i64, !dbg !29
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %75 to i64, !dbg !29
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %51, !dbg !30
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %53, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %77, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %79, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %82 = or disjoint i32 %38, %73, !dbg !31
  %83 = or disjoint i32 %39, %73, !dbg !31
  %84 = or disjoint i32 %40, %73, !dbg !31
  %85 = or disjoint i32 %41, %73, !dbg !31
  %86 = sext i32 %82 to i64, !dbg !32
  %87 = getelementptr bfloat, ptr addrspace(1) %1, i64 %86, !dbg !32
  %88 = sext i32 %83 to i64, !dbg !32
  %89 = getelementptr bfloat, ptr addrspace(1) %1, i64 %88, !dbg !32
  %90 = sext i32 %84 to i64, !dbg !32
  %91 = getelementptr bfloat, ptr addrspace(1) %1, i64 %90, !dbg !32
  %92 = sext i32 %85 to i64, !dbg !32
  %93 = getelementptr bfloat, ptr addrspace(1) %1, i64 %92, !dbg !32
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %51, !dbg !33
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %53, !dbg !33
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %69, !dbg !33
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %71, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %94, ptr addrspace(1) %87, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %89, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %91, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %97, ptr addrspace(1) %93, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op167 = or disjoint i32 %25, 64, !dbg !35
  %98 = shl i32 %15, 2
  %99 = and i32 %98, 8
  %100 = and i32 %98, 16
  %101 = and i32 %98, 24
  %102 = and i32 %15, 7
  %103 = lshr exact i32 %17, 1
  %104 = xor i32 %101, %103
  %105 = shl i32 %15, 5
  %106 = and i32 %105, 480
  %107 = or disjoint i32 %104, %106
  %108 = or disjoint i32 %99, 16
  %109 = or disjoint i32 %103, %100
  %110 = xor i32 %109, %108
  %111 = or disjoint i32 %110, %106
  %112 = or disjoint i32 %106, 512
  %113 = or disjoint i32 %104, %112
  %114 = or disjoint i32 %110, %112
  %.reass = or disjoint i32 %102, %invariant.op
  %115 = shl nuw nsw i32 %.reass, 5
  %116 = or disjoint i32 %104, %115
  %117 = or disjoint i32 %110, %115
  %118 = or disjoint i32 %106, 1536
  %119 = or disjoint i32 %104, %118
  %120 = or disjoint i32 %110, %118
  %121 = xor i32 %98, %15
  %122 = and i32 %121, 24
  %123 = and i32 %18, 24
  %124 = or disjoint i32 %123, %102
  %125 = shl nuw nsw i32 %124, 5
  %126 = or disjoint i32 %125, %122
  %invariant.op165 = and i32 %18, 24
  %127 = or disjoint i32 %invariant.op165, %102
  %128 = shl nuw nsw i32 %127, 5
  %129 = or disjoint i32 %128, %122
  %130 = or disjoint i32 %129, 1024
  %131 = or disjoint i32 %126, 2048
  %132 = or disjoint i32 %126, 3072
  %133 = zext nneg i32 %invariant.op167 to i64, !dbg !35
  %134 = sext i32 %41 to i64, !dbg !35
  %135 = sext i32 %40 to i64, !dbg !35
  %136 = sext i32 %39 to i64, !dbg !35
  %137 = sext i32 %38 to i64, !dbg !35
  %138 = sext i32 %37 to i64, !dbg !35
  %139 = sext i32 %36 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !35
  %invariant.gep296 = getelementptr bfloat, ptr addrspace(1) %0, i64 %138, !dbg !35
  %invariant.gep298 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !35
  %invariant.gep300 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !35
  %invariant.gep302 = getelementptr bfloat, ptr addrspace(1) %1, i64 %135, !dbg !35
  %invariant.gep304 = getelementptr bfloat, ptr addrspace(1) %1, i64 %134, !dbg !35
  br label %140, !dbg !35

140:                                              ; preds = %4, %140
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %140 ]
  %141 = phi i32 [ -1, %4 ], [ %210, %140 ]
  %142 = phi i32 [ 1, %4 ], [ %459, %140 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %378, %140 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %379, %140 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %380, %140 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %381, %140 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %383, %140 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %384, %140 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %385, %140 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %386, %140 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %388, %140 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %389, %140 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %390, %140 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %391, %140 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %393, %140 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %394, %140 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %395, %140 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %396, %140 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %398, %140 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %399, %140 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %400, %140 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %401, %140 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %403, %140 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %404, %140 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %405, %140 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %406, %140 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %408, %140 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %409, %140 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %410, %140 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %411, %140 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %413, %140 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %414, %140 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %415, %140 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %416, %140 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %418, %140 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %419, %140 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %420, %140 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %421, %140 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %423, %140 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %424, %140 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %425, %140 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %426, %140 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %428, %140 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %429, %140 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %430, %140 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %431, %140 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %433, %140 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %434, %140 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %435, %140 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %436, %140 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %438, %140 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %439, %140 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %440, %140 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %441, %140 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %443, %140 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %444, %140 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %445, %140 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %446, %140 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %448, %140 ]
  %200 = phi float [ 0.000000e+00, %4 ], [ %449, %140 ]
  %201 = phi float [ 0.000000e+00, %4 ], [ %450, %140 ]
  %202 = phi float [ 0.000000e+00, %4 ], [ %451, %140 ]
  %203 = phi float [ 0.000000e+00, %4 ], [ %453, %140 ]
  %204 = phi float [ 0.000000e+00, %4 ], [ %454, %140 ]
  %205 = phi float [ 0.000000e+00, %4 ], [ %455, %140 ]
  %206 = phi float [ 0.000000e+00, %4 ], [ %456, %140 ]
  %207 = icmp samesign ult i64 %indvars.iv, 126, !dbg !35
  %208 = add i32 %141, 1, !dbg !35
  %209 = icmp slt i32 %208, 2, !dbg !35
  %210 = select i1 %209, i32 %208, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl i32 %210, 12, !dbg !30
  %211 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx, !dbg !30
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %107, !dbg !30
  %213 = ptrtoint ptr addrspace(3) %212 to i32, !dbg !30
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %213) #1, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !30
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !30
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %111, !dbg !30
  %220 = ptrtoint ptr addrspace(3) %219 to i32, !dbg !30
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %220) #1, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !30
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !30
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !30
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %113, !dbg !30
  %227 = ptrtoint ptr addrspace(3) %226 to i32, !dbg !30
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %227) #1, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !30
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !30
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !30
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !30
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %114, !dbg !30
  %234 = ptrtoint ptr addrspace(3) %233 to i32, !dbg !30
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %234) #1, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !30
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !30
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !30
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %116, !dbg !30
  %241 = ptrtoint ptr addrspace(3) %240 to i32, !dbg !30
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %241) #1, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !30
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !30
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %117, !dbg !30
  %248 = ptrtoint ptr addrspace(3) %247 to i32, !dbg !30
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %248) #1, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !30
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !30
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !30
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %119, !dbg !30
  %255 = ptrtoint ptr addrspace(3) %254 to i32, !dbg !30
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %255) #1, !dbg !30
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !30
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !30
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !30
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !30
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %211, i32 %120, !dbg !30
  %262 = ptrtoint ptr addrspace(3) %261 to i32, !dbg !30
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %262) #1, !dbg !30
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !30
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !30
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !30
  %.idx98 = shl i32 %210, 13, !dbg !33
  %268 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx98, !dbg !33
  %269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %268, i32 %126, !dbg !33
  %270 = ptrtoint ptr addrspace(3) %269 to i32, !dbg !33
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %270) #1, !dbg !33
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !33
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !33
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !33
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !33
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %268, i32 %130, !dbg !33
  %277 = ptrtoint ptr addrspace(3) %276 to i32, !dbg !33
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %277) #1, !dbg !33
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !33
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !33
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !33
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !33
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %268, i32 %131, !dbg !33
  %284 = ptrtoint ptr addrspace(3) %283 to i32, !dbg !33
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %284) #1, !dbg !33
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !33
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !33
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !33
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !33
  %290 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %268, i32 %132, !dbg !33
  %291 = ptrtoint ptr addrspace(3) %290 to i32, !dbg !33
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %291) #1, !dbg !33
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !33
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !33
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !33
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !33
  %297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %143, float %144, float %145, float %146, i32 %215, i32 %216, i32 %217, i32 %218, i32 %272, i32 %273) #1, !dbg !36
  %298 = extractvalue { float, float, float, float } %297, 0, !dbg !36
  %299 = extractvalue { float, float, float, float } %297, 1, !dbg !36
  %300 = extractvalue { float, float, float, float } %297, 2, !dbg !36
  %301 = extractvalue { float, float, float, float } %297, 3, !dbg !36
  %302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %147, float %148, float %149, float %150, i32 %215, i32 %216, i32 %217, i32 %218, i32 %279, i32 %280) #1, !dbg !36
  %303 = extractvalue { float, float, float, float } %302, 0, !dbg !36
  %304 = extractvalue { float, float, float, float } %302, 1, !dbg !36
  %305 = extractvalue { float, float, float, float } %302, 2, !dbg !36
  %306 = extractvalue { float, float, float, float } %302, 3, !dbg !36
  %307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %151, float %152, float %153, float %154, i32 %215, i32 %216, i32 %217, i32 %218, i32 %286, i32 %287) #1, !dbg !36
  %308 = extractvalue { float, float, float, float } %307, 0, !dbg !36
  %309 = extractvalue { float, float, float, float } %307, 1, !dbg !36
  %310 = extractvalue { float, float, float, float } %307, 2, !dbg !36
  %311 = extractvalue { float, float, float, float } %307, 3, !dbg !36
  %312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %155, float %156, float %157, float %158, i32 %215, i32 %216, i32 %217, i32 %218, i32 %293, i32 %294) #1, !dbg !36
  %313 = extractvalue { float, float, float, float } %312, 0, !dbg !36
  %314 = extractvalue { float, float, float, float } %312, 1, !dbg !36
  %315 = extractvalue { float, float, float, float } %312, 2, !dbg !36
  %316 = extractvalue { float, float, float, float } %312, 3, !dbg !36
  %317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %159, float %160, float %161, float %162, i32 %229, i32 %230, i32 %231, i32 %232, i32 %272, i32 %273) #1, !dbg !36
  %318 = extractvalue { float, float, float, float } %317, 0, !dbg !36
  %319 = extractvalue { float, float, float, float } %317, 1, !dbg !36
  %320 = extractvalue { float, float, float, float } %317, 2, !dbg !36
  %321 = extractvalue { float, float, float, float } %317, 3, !dbg !36
  %322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %163, float %164, float %165, float %166, i32 %229, i32 %230, i32 %231, i32 %232, i32 %279, i32 %280) #1, !dbg !36
  %323 = extractvalue { float, float, float, float } %322, 0, !dbg !36
  %324 = extractvalue { float, float, float, float } %322, 1, !dbg !36
  %325 = extractvalue { float, float, float, float } %322, 2, !dbg !36
  %326 = extractvalue { float, float, float, float } %322, 3, !dbg !36
  %327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %167, float %168, float %169, float %170, i32 %229, i32 %230, i32 %231, i32 %232, i32 %286, i32 %287) #1, !dbg !36
  %328 = extractvalue { float, float, float, float } %327, 0, !dbg !36
  %329 = extractvalue { float, float, float, float } %327, 1, !dbg !36
  %330 = extractvalue { float, float, float, float } %327, 2, !dbg !36
  %331 = extractvalue { float, float, float, float } %327, 3, !dbg !36
  %332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %171, float %172, float %173, float %174, i32 %229, i32 %230, i32 %231, i32 %232, i32 %293, i32 %294) #1, !dbg !36
  %333 = extractvalue { float, float, float, float } %332, 0, !dbg !36
  %334 = extractvalue { float, float, float, float } %332, 1, !dbg !36
  %335 = extractvalue { float, float, float, float } %332, 2, !dbg !36
  %336 = extractvalue { float, float, float, float } %332, 3, !dbg !36
  %337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %175, float %176, float %177, float %178, i32 %243, i32 %244, i32 %245, i32 %246, i32 %272, i32 %273) #1, !dbg !36
  %338 = extractvalue { float, float, float, float } %337, 0, !dbg !36
  %339 = extractvalue { float, float, float, float } %337, 1, !dbg !36
  %340 = extractvalue { float, float, float, float } %337, 2, !dbg !36
  %341 = extractvalue { float, float, float, float } %337, 3, !dbg !36
  %342 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %179, float %180, float %181, float %182, i32 %243, i32 %244, i32 %245, i32 %246, i32 %279, i32 %280) #1, !dbg !36
  %343 = extractvalue { float, float, float, float } %342, 0, !dbg !36
  %344 = extractvalue { float, float, float, float } %342, 1, !dbg !36
  %345 = extractvalue { float, float, float, float } %342, 2, !dbg !36
  %346 = extractvalue { float, float, float, float } %342, 3, !dbg !36
  %347 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %183, float %184, float %185, float %186, i32 %243, i32 %244, i32 %245, i32 %246, i32 %286, i32 %287) #1, !dbg !36
  %348 = extractvalue { float, float, float, float } %347, 0, !dbg !36
  %349 = extractvalue { float, float, float, float } %347, 1, !dbg !36
  %350 = extractvalue { float, float, float, float } %347, 2, !dbg !36
  %351 = extractvalue { float, float, float, float } %347, 3, !dbg !36
  %352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %187, float %188, float %189, float %190, i32 %243, i32 %244, i32 %245, i32 %246, i32 %293, i32 %294) #1, !dbg !36
  %353 = extractvalue { float, float, float, float } %352, 0, !dbg !36
  %354 = extractvalue { float, float, float, float } %352, 1, !dbg !36
  %355 = extractvalue { float, float, float, float } %352, 2, !dbg !36
  %356 = extractvalue { float, float, float, float } %352, 3, !dbg !36
  %357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %191, float %192, float %193, float %194, i32 %257, i32 %258, i32 %259, i32 %260, i32 %272, i32 %273) #1, !dbg !36
  %358 = extractvalue { float, float, float, float } %357, 0, !dbg !36
  %359 = extractvalue { float, float, float, float } %357, 1, !dbg !36
  %360 = extractvalue { float, float, float, float } %357, 2, !dbg !36
  %361 = extractvalue { float, float, float, float } %357, 3, !dbg !36
  %362 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %195, float %196, float %197, float %198, i32 %257, i32 %258, i32 %259, i32 %260, i32 %279, i32 %280) #1, !dbg !36
  %363 = extractvalue { float, float, float, float } %362, 0, !dbg !36
  %364 = extractvalue { float, float, float, float } %362, 1, !dbg !36
  %365 = extractvalue { float, float, float, float } %362, 2, !dbg !36
  %366 = extractvalue { float, float, float, float } %362, 3, !dbg !36
  %367 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %199, float %200, float %201, float %202, i32 %257, i32 %258, i32 %259, i32 %260, i32 %286, i32 %287) #1, !dbg !36
  %368 = extractvalue { float, float, float, float } %367, 0, !dbg !36
  %369 = extractvalue { float, float, float, float } %367, 1, !dbg !36
  %370 = extractvalue { float, float, float, float } %367, 2, !dbg !36
  %371 = extractvalue { float, float, float, float } %367, 3, !dbg !36
  %372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %203, float %204, float %205, float %206, i32 %257, i32 %258, i32 %259, i32 %260, i32 %293, i32 %294) #1, !dbg !36
  %373 = extractvalue { float, float, float, float } %372, 0, !dbg !36
  %374 = extractvalue { float, float, float, float } %372, 1, !dbg !36
  %375 = extractvalue { float, float, float, float } %372, 2, !dbg !36
  %376 = extractvalue { float, float, float, float } %372, 3, !dbg !36
  %377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %222, i32 %223, i32 %224, i32 %225, i32 %274, i32 %275) #1, !dbg !36
  %378 = extractvalue { float, float, float, float } %377, 0, !dbg !36
  %379 = extractvalue { float, float, float, float } %377, 1, !dbg !36
  %380 = extractvalue { float, float, float, float } %377, 2, !dbg !36
  %381 = extractvalue { float, float, float, float } %377, 3, !dbg !36
  %382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %303, float %304, float %305, float %306, i32 %222, i32 %223, i32 %224, i32 %225, i32 %281, i32 %282) #1, !dbg !36
  %383 = extractvalue { float, float, float, float } %382, 0, !dbg !36
  %384 = extractvalue { float, float, float, float } %382, 1, !dbg !36
  %385 = extractvalue { float, float, float, float } %382, 2, !dbg !36
  %386 = extractvalue { float, float, float, float } %382, 3, !dbg !36
  %387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %308, float %309, float %310, float %311, i32 %222, i32 %223, i32 %224, i32 %225, i32 %288, i32 %289) #1, !dbg !36
  %388 = extractvalue { float, float, float, float } %387, 0, !dbg !36
  %389 = extractvalue { float, float, float, float } %387, 1, !dbg !36
  %390 = extractvalue { float, float, float, float } %387, 2, !dbg !36
  %391 = extractvalue { float, float, float, float } %387, 3, !dbg !36
  %392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %313, float %314, float %315, float %316, i32 %222, i32 %223, i32 %224, i32 %225, i32 %295, i32 %296) #1, !dbg !36
  %393 = extractvalue { float, float, float, float } %392, 0, !dbg !36
  %394 = extractvalue { float, float, float, float } %392, 1, !dbg !36
  %395 = extractvalue { float, float, float, float } %392, 2, !dbg !36
  %396 = extractvalue { float, float, float, float } %392, 3, !dbg !36
  %397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %236, i32 %237, i32 %238, i32 %239, i32 %274, i32 %275) #1, !dbg !36
  %398 = extractvalue { float, float, float, float } %397, 0, !dbg !36
  %399 = extractvalue { float, float, float, float } %397, 1, !dbg !36
  %400 = extractvalue { float, float, float, float } %397, 2, !dbg !36
  %401 = extractvalue { float, float, float, float } %397, 3, !dbg !36
  %402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %323, float %324, float %325, float %326, i32 %236, i32 %237, i32 %238, i32 %239, i32 %281, i32 %282) #1, !dbg !36
  %403 = extractvalue { float, float, float, float } %402, 0, !dbg !36
  %404 = extractvalue { float, float, float, float } %402, 1, !dbg !36
  %405 = extractvalue { float, float, float, float } %402, 2, !dbg !36
  %406 = extractvalue { float, float, float, float } %402, 3, !dbg !36
  %407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %328, float %329, float %330, float %331, i32 %236, i32 %237, i32 %238, i32 %239, i32 %288, i32 %289) #1, !dbg !36
  %408 = extractvalue { float, float, float, float } %407, 0, !dbg !36
  %409 = extractvalue { float, float, float, float } %407, 1, !dbg !36
  %410 = extractvalue { float, float, float, float } %407, 2, !dbg !36
  %411 = extractvalue { float, float, float, float } %407, 3, !dbg !36
  %412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %333, float %334, float %335, float %336, i32 %236, i32 %237, i32 %238, i32 %239, i32 %295, i32 %296) #1, !dbg !36
  %413 = extractvalue { float, float, float, float } %412, 0, !dbg !36
  %414 = extractvalue { float, float, float, float } %412, 1, !dbg !36
  %415 = extractvalue { float, float, float, float } %412, 2, !dbg !36
  %416 = extractvalue { float, float, float, float } %412, 3, !dbg !36
  %417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %338, float %339, float %340, float %341, i32 %250, i32 %251, i32 %252, i32 %253, i32 %274, i32 %275) #1, !dbg !36
  %418 = extractvalue { float, float, float, float } %417, 0, !dbg !36
  %419 = extractvalue { float, float, float, float } %417, 1, !dbg !36
  %420 = extractvalue { float, float, float, float } %417, 2, !dbg !36
  %421 = extractvalue { float, float, float, float } %417, 3, !dbg !36
  %422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %343, float %344, float %345, float %346, i32 %250, i32 %251, i32 %252, i32 %253, i32 %281, i32 %282) #1, !dbg !36
  %423 = extractvalue { float, float, float, float } %422, 0, !dbg !36
  %424 = extractvalue { float, float, float, float } %422, 1, !dbg !36
  %425 = extractvalue { float, float, float, float } %422, 2, !dbg !36
  %426 = extractvalue { float, float, float, float } %422, 3, !dbg !36
  %427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %348, float %349, float %350, float %351, i32 %250, i32 %251, i32 %252, i32 %253, i32 %288, i32 %289) #1, !dbg !36
  %428 = extractvalue { float, float, float, float } %427, 0, !dbg !36
  %429 = extractvalue { float, float, float, float } %427, 1, !dbg !36
  %430 = extractvalue { float, float, float, float } %427, 2, !dbg !36
  %431 = extractvalue { float, float, float, float } %427, 3, !dbg !36
  %432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %353, float %354, float %355, float %356, i32 %250, i32 %251, i32 %252, i32 %253, i32 %295, i32 %296) #1, !dbg !36
  %433 = extractvalue { float, float, float, float } %432, 0, !dbg !36
  %434 = extractvalue { float, float, float, float } %432, 1, !dbg !36
  %435 = extractvalue { float, float, float, float } %432, 2, !dbg !36
  %436 = extractvalue { float, float, float, float } %432, 3, !dbg !36
  %437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %358, float %359, float %360, float %361, i32 %264, i32 %265, i32 %266, i32 %267, i32 %274, i32 %275) #1, !dbg !36
  %438 = extractvalue { float, float, float, float } %437, 0, !dbg !36
  %439 = extractvalue { float, float, float, float } %437, 1, !dbg !36
  %440 = extractvalue { float, float, float, float } %437, 2, !dbg !36
  %441 = extractvalue { float, float, float, float } %437, 3, !dbg !36
  %442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %363, float %364, float %365, float %366, i32 %264, i32 %265, i32 %266, i32 %267, i32 %281, i32 %282) #1, !dbg !36
  %443 = extractvalue { float, float, float, float } %442, 0, !dbg !36
  %444 = extractvalue { float, float, float, float } %442, 1, !dbg !36
  %445 = extractvalue { float, float, float, float } %442, 2, !dbg !36
  %446 = extractvalue { float, float, float, float } %442, 3, !dbg !36
  %447 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %368, float %369, float %370, float %371, i32 %264, i32 %265, i32 %266, i32 %267, i32 %288, i32 %289) #1, !dbg !36
  %448 = extractvalue { float, float, float, float } %447, 0, !dbg !36
  %449 = extractvalue { float, float, float, float } %447, 1, !dbg !36
  %450 = extractvalue { float, float, float, float } %447, 2, !dbg !36
  %451 = extractvalue { float, float, float, float } %447, 3, !dbg !36
  %452 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %373, float %374, float %375, float %376, i32 %264, i32 %265, i32 %266, i32 %267, i32 %295, i32 %296) #1, !dbg !36
  %453 = extractvalue { float, float, float, float } %452, 0, !dbg !36
  %454 = extractvalue { float, float, float, float } %452, 1, !dbg !36
  %455 = extractvalue { float, float, float, float } %452, 2, !dbg !36
  %456 = extractvalue { float, float, float, float } %452, 3, !dbg !36
  %457 = add i32 %142, 1, !dbg !35
  %458 = icmp slt i32 %457, 2, !dbg !35
  %459 = select i1 %458, i32 %457, i32 0, !dbg !35
  %460 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %461 = add nuw nsw i64 %460, %133
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %461, !dbg !29
  %gep297 = getelementptr bfloat, ptr addrspace(1) %invariant.gep296, i64 %461, !dbg !29
  %.idx99 = shl i32 %459, 12, !dbg !30
  %462 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx99, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %463 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %462, i32 %51, !dbg !30
  %464 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %462, i32 %53, !dbg !30
  %465 = select i1 %207, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %463, ptr addrspace(1) %gep, i32 %465) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %464, ptr addrspace(1) %gep297, i32 %465) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep299 = getelementptr bfloat, ptr addrspace(1) %invariant.gep298, i64 %461, !dbg !32
  %gep301 = getelementptr bfloat, ptr addrspace(1) %invariant.gep300, i64 %461, !dbg !32
  %gep303 = getelementptr bfloat, ptr addrspace(1) %invariant.gep302, i64 %461, !dbg !32
  %gep305 = getelementptr bfloat, ptr addrspace(1) %invariant.gep304, i64 %461, !dbg !32
  %.idx100 = shl i32 %459, 13, !dbg !33
  %466 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx100, !dbg !33
  %467 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %466, i32 %51, !dbg !33
  %468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %466, i32 %53, !dbg !33
  %469 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %466, i32 %69, !dbg !33
  %470 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %466, i32 %71, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %467, ptr addrspace(1) %gep299, i32 %465) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %468, ptr addrspace(1) %gep301, i32 %465) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %469, ptr addrspace(1) %gep303, i32 %465) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %470, ptr addrspace(1) %gep305, i32 %465) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 128, !dbg !35
  br i1 %exitcond.not, label %471, label %140, !dbg !35

471:                                              ; preds = %140
  %472 = and i32 %24, 120, !dbg !22
  %473 = or disjoint i32 %23, %472, !dbg !23
  %474 = lshr i32 %15, 4, !dbg !19
  %475 = and i32 %474, 7, !dbg !19
  %476 = or disjoint i32 %475, %14, !dbg !20
  %477 = or disjoint i32 %476, 56, !dbg !20
  %478 = or disjoint i32 %476, 48, !dbg !20
  %479 = or disjoint i32 %476, 40, !dbg !20
  %480 = or disjoint i32 %476, 32, !dbg !20
  %481 = or disjoint i32 %476, 24, !dbg !20
  %482 = or disjoint i32 %476, 16, !dbg !20
  %483 = or disjoint i32 %476, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %484 = icmp slt i32 %476, 512, !dbg !38
  %485 = icmp slt i32 %483, 512, !dbg !38
  %486 = icmp slt i32 %482, 512, !dbg !38
  %487 = icmp slt i32 %481, 512, !dbg !38
  %488 = icmp slt i32 %480, 512, !dbg !38
  %489 = icmp slt i32 %479, 512, !dbg !38
  %490 = icmp slt i32 %478, 512, !dbg !38
  %491 = icmp slt i32 %477, 512, !dbg !38
  %492 = icmp slt i32 %473, 10240, !dbg !39
  %493 = and i1 %484, %492, !dbg !40
  %494 = and i1 %485, %492, !dbg !40
  %495 = and i1 %486, %492, !dbg !40
  %496 = and i1 %487, %492, !dbg !40
  %497 = and i1 %488, %492, !dbg !40
  %498 = and i1 %489, %492, !dbg !40
  %499 = and i1 %490, %492, !dbg !40
  %500 = and i1 %491, %492, !dbg !40
  %501 = mul i32 %476, 10240, !dbg !41
  %502 = mul i32 %483, 10240, !dbg !41
  %503 = mul i32 %482, 10240, !dbg !41
  %504 = mul i32 %481, 10240, !dbg !41
  %505 = mul i32 %480, 10240, !dbg !41
  %506 = mul i32 %479, 10240, !dbg !41
  %507 = mul i32 %478, 10240, !dbg !41
  %508 = mul i32 %477, 10240, !dbg !41
  %509 = add i32 %501, %473, !dbg !42
  %510 = add i32 %502, %473, !dbg !42
  %511 = add i32 %503, %473, !dbg !42
  %512 = add i32 %504, %473, !dbg !42
  %513 = add i32 %505, %473, !dbg !42
  %514 = add i32 %506, %473, !dbg !42
  %515 = add i32 %507, %473, !dbg !42
  %516 = add i32 %508, %473, !dbg !42
  %517 = sext i32 %509 to i64, !dbg !43
  %518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %517, !dbg !43
  %519 = sext i32 %510 to i64, !dbg !43
  %520 = getelementptr bfloat, ptr addrspace(1) %2, i64 %519, !dbg !43
  %521 = sext i32 %511 to i64, !dbg !43
  %522 = getelementptr bfloat, ptr addrspace(1) %2, i64 %521, !dbg !43
  %523 = sext i32 %512 to i64, !dbg !43
  %524 = getelementptr bfloat, ptr addrspace(1) %2, i64 %523, !dbg !43
  %525 = sext i32 %513 to i64, !dbg !43
  %526 = getelementptr bfloat, ptr addrspace(1) %2, i64 %525, !dbg !43
  %527 = sext i32 %514 to i64, !dbg !43
  %528 = getelementptr bfloat, ptr addrspace(1) %2, i64 %527, !dbg !43
  %529 = sext i32 %515 to i64, !dbg !43
  %530 = getelementptr bfloat, ptr addrspace(1) %2, i64 %529, !dbg !43
  %531 = sext i32 %516 to i64, !dbg !43
  %532 = getelementptr bfloat, ptr addrspace(1) %2, i64 %531, !dbg !43
  %533 = fptrunc float %378 to bfloat, !dbg !44
  %534 = fptrunc float %379 to bfloat, !dbg !44
  %535 = fptrunc float %380 to bfloat, !dbg !44
  %536 = fptrunc float %381 to bfloat, !dbg !44
  %537 = fptrunc float %383 to bfloat, !dbg !44
  %538 = fptrunc float %384 to bfloat, !dbg !44
  %539 = fptrunc float %385 to bfloat, !dbg !44
  %540 = fptrunc float %386 to bfloat, !dbg !44
  %541 = fptrunc float %388 to bfloat, !dbg !44
  %542 = fptrunc float %389 to bfloat, !dbg !44
  %543 = fptrunc float %390 to bfloat, !dbg !44
  %544 = fptrunc float %391 to bfloat, !dbg !44
  %545 = fptrunc float %393 to bfloat, !dbg !44
  %546 = fptrunc float %394 to bfloat, !dbg !44
  %547 = fptrunc float %395 to bfloat, !dbg !44
  %548 = fptrunc float %396 to bfloat, !dbg !44
  %549 = fptrunc float %398 to bfloat, !dbg !44
  %550 = fptrunc float %399 to bfloat, !dbg !44
  %551 = fptrunc float %400 to bfloat, !dbg !44
  %552 = fptrunc float %401 to bfloat, !dbg !44
  %553 = fptrunc float %403 to bfloat, !dbg !44
  %554 = fptrunc float %404 to bfloat, !dbg !44
  %555 = fptrunc float %405 to bfloat, !dbg !44
  %556 = fptrunc float %406 to bfloat, !dbg !44
  %557 = fptrunc float %408 to bfloat, !dbg !44
  %558 = fptrunc float %409 to bfloat, !dbg !44
  %559 = fptrunc float %410 to bfloat, !dbg !44
  %560 = fptrunc float %411 to bfloat, !dbg !44
  %561 = fptrunc float %413 to bfloat, !dbg !44
  %562 = fptrunc float %414 to bfloat, !dbg !44
  %563 = fptrunc float %415 to bfloat, !dbg !44
  %564 = fptrunc float %416 to bfloat, !dbg !44
  %565 = fptrunc float %418 to bfloat, !dbg !44
  %566 = fptrunc float %419 to bfloat, !dbg !44
  %567 = fptrunc float %420 to bfloat, !dbg !44
  %568 = fptrunc float %421 to bfloat, !dbg !44
  %569 = fptrunc float %423 to bfloat, !dbg !44
  %570 = fptrunc float %424 to bfloat, !dbg !44
  %571 = fptrunc float %425 to bfloat, !dbg !44
  %572 = fptrunc float %426 to bfloat, !dbg !44
  %573 = fptrunc float %428 to bfloat, !dbg !44
  %574 = fptrunc float %429 to bfloat, !dbg !44
  %575 = fptrunc float %430 to bfloat, !dbg !44
  %576 = fptrunc float %431 to bfloat, !dbg !44
  %577 = fptrunc float %433 to bfloat, !dbg !44
  %578 = fptrunc float %434 to bfloat, !dbg !44
  %579 = fptrunc float %435 to bfloat, !dbg !44
  %580 = fptrunc float %436 to bfloat, !dbg !44
  %581 = fptrunc float %438 to bfloat, !dbg !44
  %582 = fptrunc float %439 to bfloat, !dbg !44
  %583 = fptrunc float %440 to bfloat, !dbg !44
  %584 = fptrunc float %441 to bfloat, !dbg !44
  %585 = fptrunc float %443 to bfloat, !dbg !44
  %586 = fptrunc float %444 to bfloat, !dbg !44
  %587 = fptrunc float %445 to bfloat, !dbg !44
  %588 = fptrunc float %446 to bfloat, !dbg !44
  %589 = fptrunc float %448 to bfloat, !dbg !44
  %590 = fptrunc float %449 to bfloat, !dbg !44
  %591 = fptrunc float %450 to bfloat, !dbg !44
  %592 = fptrunc float %451 to bfloat, !dbg !44
  %593 = fptrunc float %453 to bfloat, !dbg !44
  %594 = fptrunc float %454 to bfloat, !dbg !44
  %595 = fptrunc float %455 to bfloat, !dbg !44
  %596 = fptrunc float %456 to bfloat, !dbg !44
  %597 = shl i32 %15, 1, !dbg !44
  %598 = and i32 %597, 6, !dbg !44
  %599 = and i32 %105, 384, !dbg !44
  %600 = or disjoint i32 %599, %598, !dbg !44
  %601 = shl nuw nsw i32 %17, 5, !dbg !44
  %602 = or disjoint i32 %600, %601, !dbg !44
  %603 = or disjoint i32 %123, %602, !dbg !44
  %604 = and i32 %24, 1016, !dbg !44
  %605 = lshr i32 %602, 4, !dbg !44
  %606 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %605, !dbg !44
  %607 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %606, i32 %603, !dbg !44
  %608 = bitcast bfloat %533 to i16, !dbg !44
  %609 = bitcast bfloat %534 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %607, i16 %608, i16 %609, i1 true) #1, !dbg !44
  %610 = or disjoint i32 %603, 1024, !dbg !44
  %611 = lshr i32 %610, 4, !dbg !44
  %612 = and i32 %611, 268435448, !dbg !44
  %613 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %612, !dbg !44
  %614 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %613, i32 %610, !dbg !44
  %615 = bitcast bfloat %535 to i16, !dbg !44
  %616 = bitcast bfloat %536 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %615, i16 %616, i1 true) #1, !dbg !44
  %617 = or disjoint i32 %603, 32, !dbg !44
  %618 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %606, i32 %617, !dbg !44
  %619 = bitcast bfloat %537 to i16, !dbg !44
  %620 = bitcast bfloat %538 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %618, i16 %619, i16 %620, i1 true) #1, !dbg !44
  %621 = or disjoint i32 %603, 1056, !dbg !44
  %622 = lshr i32 %621, 4, !dbg !44
  %623 = and i32 %622, 268435448, !dbg !44
  %624 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %623, !dbg !44
  %625 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %624, i32 %621, !dbg !44
  %626 = bitcast bfloat %539 to i16, !dbg !44
  %627 = bitcast bfloat %540 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %625, i16 %626, i16 %627, i1 true) #1, !dbg !44
  %628 = or disjoint i32 %603, 64, !dbg !44
  %629 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %606, i32 %628, !dbg !44
  %630 = bitcast bfloat %541 to i16, !dbg !44
  %631 = bitcast bfloat %542 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %629, i16 %630, i16 %631, i1 true) #1, !dbg !44
  %632 = or disjoint i32 %603, 1088, !dbg !44
  %633 = lshr i32 %632, 4, !dbg !44
  %634 = and i32 %633, 268435448, !dbg !44
  %635 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %634, !dbg !44
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %635, i32 %632, !dbg !44
  %637 = bitcast bfloat %543 to i16, !dbg !44
  %638 = bitcast bfloat %544 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %637, i16 %638, i1 true) #1, !dbg !44
  %639 = or disjoint i32 %603, 96, !dbg !44
  %640 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %606, i32 %639, !dbg !44
  %641 = bitcast bfloat %545 to i16, !dbg !44
  %642 = bitcast bfloat %546 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %640, i16 %641, i16 %642, i1 true) #1, !dbg !44
  %643 = or disjoint i32 %603, 1120, !dbg !44
  %644 = lshr i32 %643, 4, !dbg !44
  %645 = and i32 %644, 268435448, !dbg !44
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %645, !dbg !44
  %647 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %646, i32 %643, !dbg !44
  %648 = bitcast bfloat %547 to i16, !dbg !44
  %649 = bitcast bfloat %548 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %647, i16 %648, i16 %649, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %650 = lshr i32 %24, 4, !dbg !44
  %651 = and i32 %650, 56, !dbg !44
  %652 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %651, !dbg !44
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %652, i32 %604, !dbg !44
  %654 = load <4 x i32>, ptr addrspace(3) %653, align 16, !dbg !44
  %655 = or disjoint i32 %604, 1024, !dbg !44
  %656 = lshr i32 %655, 4, !dbg !44
  %657 = and i32 %656, 120, !dbg !44
  %658 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %657, !dbg !44
  %659 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %658, i32 %655, !dbg !44
  %660 = load <4 x i32>, ptr addrspace(3) %659, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %661 = bitcast bfloat %549 to i16, !dbg !44
  %662 = bitcast bfloat %550 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %607, i16 %661, i16 %662, i1 true) #1, !dbg !44
  %663 = bitcast bfloat %551 to i16, !dbg !44
  %664 = bitcast bfloat %552 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %663, i16 %664, i1 true) #1, !dbg !44
  %665 = bitcast bfloat %553 to i16, !dbg !44
  %666 = bitcast bfloat %554 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %618, i16 %665, i16 %666, i1 true) #1, !dbg !44
  %667 = bitcast bfloat %555 to i16, !dbg !44
  %668 = bitcast bfloat %556 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %625, i16 %667, i16 %668, i1 true) #1, !dbg !44
  %669 = bitcast bfloat %557 to i16, !dbg !44
  %670 = bitcast bfloat %558 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %629, i16 %669, i16 %670, i1 true) #1, !dbg !44
  %671 = bitcast bfloat %559 to i16, !dbg !44
  %672 = bitcast bfloat %560 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %671, i16 %672, i1 true) #1, !dbg !44
  %673 = bitcast bfloat %561 to i16, !dbg !44
  %674 = bitcast bfloat %562 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %640, i16 %673, i16 %674, i1 true) #1, !dbg !44
  %675 = bitcast bfloat %563 to i16, !dbg !44
  %676 = bitcast bfloat %564 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %647, i16 %675, i16 %676, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %677 = load <4 x i32>, ptr addrspace(3) %653, align 16, !dbg !44
  %678 = load <4 x i32>, ptr addrspace(3) %659, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %679 = bitcast bfloat %565 to i16, !dbg !44
  %680 = bitcast bfloat %566 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %607, i16 %679, i16 %680, i1 true) #1, !dbg !44
  %681 = bitcast bfloat %567 to i16, !dbg !44
  %682 = bitcast bfloat %568 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %681, i16 %682, i1 true) #1, !dbg !44
  %683 = bitcast bfloat %569 to i16, !dbg !44
  %684 = bitcast bfloat %570 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %618, i16 %683, i16 %684, i1 true) #1, !dbg !44
  %685 = bitcast bfloat %571 to i16, !dbg !44
  %686 = bitcast bfloat %572 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %625, i16 %685, i16 %686, i1 true) #1, !dbg !44
  %687 = bitcast bfloat %573 to i16, !dbg !44
  %688 = bitcast bfloat %574 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %629, i16 %687, i16 %688, i1 true) #1, !dbg !44
  %689 = bitcast bfloat %575 to i16, !dbg !44
  %690 = bitcast bfloat %576 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %689, i16 %690, i1 true) #1, !dbg !44
  %691 = bitcast bfloat %577 to i16, !dbg !44
  %692 = bitcast bfloat %578 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %640, i16 %691, i16 %692, i1 true) #1, !dbg !44
  %693 = bitcast bfloat %579 to i16, !dbg !44
  %694 = bitcast bfloat %580 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %647, i16 %693, i16 %694, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %695 = load <4 x i32>, ptr addrspace(3) %653, align 16, !dbg !44
  %696 = load <4 x i32>, ptr addrspace(3) %659, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %697 = bitcast bfloat %581 to i16, !dbg !44
  %698 = bitcast bfloat %582 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %607, i16 %697, i16 %698, i1 true) #1, !dbg !44
  %699 = bitcast bfloat %583 to i16, !dbg !44
  %700 = bitcast bfloat %584 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %614, i16 %699, i16 %700, i1 true) #1, !dbg !44
  %701 = bitcast bfloat %585 to i16, !dbg !44
  %702 = bitcast bfloat %586 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %618, i16 %701, i16 %702, i1 true) #1, !dbg !44
  %703 = bitcast bfloat %587 to i16, !dbg !44
  %704 = bitcast bfloat %588 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %625, i16 %703, i16 %704, i1 true) #1, !dbg !44
  %705 = bitcast bfloat %589 to i16, !dbg !44
  %706 = bitcast bfloat %590 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %629, i16 %705, i16 %706, i1 true) #1, !dbg !44
  %707 = bitcast bfloat %591 to i16, !dbg !44
  %708 = bitcast bfloat %592 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %636, i16 %707, i16 %708, i1 true) #1, !dbg !44
  %709 = bitcast bfloat %593 to i16, !dbg !44
  %710 = bitcast bfloat %594 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %640, i16 %709, i16 %710, i1 true) #1, !dbg !44
  %711 = bitcast bfloat %595 to i16, !dbg !44
  %712 = bitcast bfloat %596 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %647, i16 %711, i16 %712, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %713 = load <4 x i32>, ptr addrspace(3) %653, align 16, !dbg !44
  %714 = load <4 x i32>, ptr addrspace(3) %659, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %654, i64 0, !dbg !44
  %.extract103 = extractelement <4 x i32> %654, i64 1, !dbg !44
  %.extract105 = extractelement <4 x i32> %654, i64 2, !dbg !44
  %.extract107 = extractelement <4 x i32> %654, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %518, i1 %493) #1, !dbg !44
  %.extract109 = extractelement <4 x i32> %660, i64 0, !dbg !44
  %.extract111 = extractelement <4 x i32> %660, i64 1, !dbg !44
  %.extract113 = extractelement <4 x i32> %660, i64 2, !dbg !44
  %.extract115 = extractelement <4 x i32> %660, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %520, i1 %494) #1, !dbg !44
  %.extract117 = extractelement <4 x i32> %677, i64 0, !dbg !44
  %.extract119 = extractelement <4 x i32> %677, i64 1, !dbg !44
  %.extract121 = extractelement <4 x i32> %677, i64 2, !dbg !44
  %.extract123 = extractelement <4 x i32> %677, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract117, i32 %.extract119, i32 %.extract121, i32 %.extract123, ptr addrspace(1) %522, i1 %495) #1, !dbg !44
  %.extract125 = extractelement <4 x i32> %678, i64 0, !dbg !44
  %.extract127 = extractelement <4 x i32> %678, i64 1, !dbg !44
  %.extract129 = extractelement <4 x i32> %678, i64 2, !dbg !44
  %.extract131 = extractelement <4 x i32> %678, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract125, i32 %.extract127, i32 %.extract129, i32 %.extract131, ptr addrspace(1) %524, i1 %496) #1, !dbg !44
  %.extract133 = extractelement <4 x i32> %695, i64 0, !dbg !44
  %.extract135 = extractelement <4 x i32> %695, i64 1, !dbg !44
  %.extract137 = extractelement <4 x i32> %695, i64 2, !dbg !44
  %.extract139 = extractelement <4 x i32> %695, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract133, i32 %.extract135, i32 %.extract137, i32 %.extract139, ptr addrspace(1) %526, i1 %497) #1, !dbg !44
  %.extract141 = extractelement <4 x i32> %696, i64 0, !dbg !44
  %.extract143 = extractelement <4 x i32> %696, i64 1, !dbg !44
  %.extract145 = extractelement <4 x i32> %696, i64 2, !dbg !44
  %.extract147 = extractelement <4 x i32> %696, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract141, i32 %.extract143, i32 %.extract145, i32 %.extract147, ptr addrspace(1) %528, i1 %498) #1, !dbg !44
  %.extract149 = extractelement <4 x i32> %713, i64 0, !dbg !44
  %.extract151 = extractelement <4 x i32> %713, i64 1, !dbg !44
  %.extract153 = extractelement <4 x i32> %713, i64 2, !dbg !44
  %.extract155 = extractelement <4 x i32> %713, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract149, i32 %.extract151, i32 %.extract153, i32 %.extract155, ptr addrspace(1) %530, i1 %499) #1, !dbg !44
  %.extract157 = extractelement <4 x i32> %714, i64 0, !dbg !44
  %.extract159 = extractelement <4 x i32> %714, i64 1, !dbg !44
  %.extract161 = extractelement <4 x i32> %714, i64 2, !dbg !44
  %.extract163 = extractelement <4 x i32> %714, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract159, i32 %.extract161, i32 %.extract163, ptr addrspace(1) %532, i1 %500) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmy6xr3tuv4nlvet64yqtqy5lcwqvj5gfy6xhykkqlmuvqk2s36j.py", directory: "/tmp/torchinductor_root/my")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 27, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
