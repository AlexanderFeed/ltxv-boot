; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 32, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 32, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 32, !dbg !19
  %18 = lshr i32 %15, 3, !dbg !19
  %19 = and i32 %18, 15, !dbg !19
  %20 = or disjoint i32 %19, 16, !dbg !19
  %21 = or disjoint i32 %19, 32, !dbg !19
  %22 = or disjoint i32 %19, 48, !dbg !19
  %23 = or disjoint i32 %19, 64, !dbg !19
  %24 = or disjoint i32 %19, 80, !dbg !19
  %25 = or disjoint i32 %19, 96, !dbg !19
  %26 = or disjoint i32 %19, 112, !dbg !19
  %27 = lshr i32 %15, 4, !dbg !19
  %28 = and i32 %27, 7, !dbg !19
  %29 = shl i32 %15, 3, !dbg !19
  %30 = and i32 %29, 8, !dbg !19
  %31 = and i32 %29, 16, !dbg !19
  %32 = and i32 %29, 24, !dbg !19
  %33 = and i32 %29, 32, !dbg !19
  %34 = and i32 %29, 56, !dbg !19
  %35 = shl nuw nsw i32 %16, 3, !dbg !19
  %36 = or disjoint i32 %34, %35, !dbg !19
  %37 = or disjoint i32 %14, %19, !dbg !20
  %38 = or disjoint i32 %14, %20, !dbg !20
  %39 = or disjoint i32 %14, %21, !dbg !20
  %40 = or disjoint i32 %14, %22, !dbg !20
  %41 = or disjoint i32 %14, %23, !dbg !20
  %42 = or disjoint i32 %14, %24, !dbg !20
  %43 = or disjoint i32 %14, %25, !dbg !20
  %44 = or disjoint i32 %14, %26, !dbg !20
  %45 = or disjoint i32 %14, %28, !dbg !20
  %46 = or disjoint i32 %45, 8, !dbg !20
  %47 = or disjoint i32 %45, 16, !dbg !20
  %48 = or disjoint i32 %45, 24, !dbg !20
  %49 = or disjoint i32 %45, 32, !dbg !20
  %50 = or disjoint i32 %45, 40, !dbg !20
  %51 = or disjoint i32 %45, 48, !dbg !20
  %52 = or disjoint i32 %45, 56, !dbg !20
  %53 = or disjoint i32 %45, 64, !dbg !20
  %54 = or disjoint i32 %45, 72, !dbg !20
  %55 = or disjoint i32 %45, 80, !dbg !20
  %56 = or disjoint i32 %45, 88, !dbg !20
  %57 = or disjoint i32 %45, 96, !dbg !20
  %58 = or disjoint i32 %45, 104, !dbg !20
  %59 = or disjoint i32 %45, 112, !dbg !20
  %60 = or disjoint i32 %45, 120, !dbg !20
  %61 = shl nsw i32 %13, 7, !dbg !21
  %62 = or disjoint i32 %61, %19, !dbg !22
  %63 = or disjoint i32 %61, %20, !dbg !22
  %64 = or disjoint i32 %61, %21, !dbg !22
  %65 = or disjoint i32 %61, %22, !dbg !22
  %66 = or disjoint i32 %61, %23, !dbg !22
  %67 = or disjoint i32 %61, %24, !dbg !22
  %68 = or disjoint i32 %61, %25, !dbg !22
  %69 = or disjoint i32 %61, %26, !dbg !22
  %70 = or disjoint i32 %61, %36, !dbg !22
  %71 = srem i32 %37, 512, !dbg !23
  %72 = srem i32 %38, 512, !dbg !23
  %73 = srem i32 %39, 512, !dbg !23
  %74 = srem i32 %40, 512, !dbg !23
  %75 = srem i32 %41, 512, !dbg !23
  %76 = srem i32 %42, 512, !dbg !23
  %77 = srem i32 %43, 512, !dbg !23
  %78 = srem i32 %44, 512, !dbg !23
  %79 = srem i32 %62, 512, !dbg !24
  %80 = srem i32 %63, 512, !dbg !24
  %81 = srem i32 %64, 512, !dbg !24
  %82 = srem i32 %65, 512, !dbg !24
  %83 = srem i32 %66, 512, !dbg !24
  %84 = srem i32 %67, 512, !dbg !24
  %85 = srem i32 %68, 512, !dbg !24
  %86 = srem i32 %69, 512, !dbg !24
  %87 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %88 = shl nsw i32 %71, 12, !dbg !26
  %89 = shl nsw i32 %72, 12, !dbg !26
  %90 = shl nsw i32 %73, 12, !dbg !26
  %91 = shl nsw i32 %74, 12, !dbg !26
  %92 = shl nsw i32 %75, 12, !dbg !26
  %93 = shl nsw i32 %76, 12, !dbg !26
  %94 = shl nsw i32 %77, 12, !dbg !26
  %95 = shl nsw i32 %78, 12, !dbg !26
  %96 = shl i32 %87, 6, !dbg !27
  %97 = or disjoint i32 %34, %96, !dbg !28
  %98 = add i32 %97, %88, !dbg !29
  %99 = add i32 %97, %89, !dbg !29
  %100 = add i32 %97, %90, !dbg !29
  %101 = add i32 %97, %91, !dbg !29
  %102 = add i32 %97, %92, !dbg !29
  %103 = add i32 %97, %93, !dbg !29
  %104 = add i32 %97, %94, !dbg !29
  %105 = add i32 %97, %95, !dbg !29
  %106 = sext i32 %98 to i64, !dbg !30
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !30
  %108 = sext i32 %99 to i64, !dbg !30
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !30
  %110 = sext i32 %100 to i64, !dbg !30
  %111 = getelementptr bfloat, ptr addrspace(1) %0, i64 %110, !dbg !30
  %112 = sext i32 %101 to i64, !dbg !30
  %113 = getelementptr bfloat, ptr addrspace(1) %0, i64 %112, !dbg !30
  %114 = sext i32 %102 to i64, !dbg !30
  %115 = getelementptr bfloat, ptr addrspace(1) %0, i64 %114, !dbg !30
  %116 = sext i32 %103 to i64, !dbg !30
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !30
  %118 = sext i32 %104 to i64, !dbg !30
  %119 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = sext i32 %105 to i64, !dbg !30
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !30
  %122 = shl nsw i32 %79, 12, !dbg !31
  %123 = shl nsw i32 %80, 12, !dbg !31
  %124 = shl nsw i32 %81, 12, !dbg !31
  %125 = shl nsw i32 %82, 12, !dbg !31
  %126 = shl nsw i32 %83, 12, !dbg !31
  %127 = shl nsw i32 %84, 12, !dbg !31
  %128 = shl nsw i32 %85, 12, !dbg !31
  %129 = shl nsw i32 %86, 12, !dbg !31
  %130 = add i32 %97, %122, !dbg !32
  %131 = add i32 %97, %123, !dbg !32
  %132 = add i32 %97, %124, !dbg !32
  %133 = add i32 %97, %125, !dbg !32
  %134 = add i32 %97, %126, !dbg !32
  %135 = add i32 %97, %127, !dbg !32
  %136 = add i32 %97, %128, !dbg !32
  %137 = add i32 %97, %129, !dbg !32
  %138 = sext i32 %130 to i64, !dbg !33
  %139 = getelementptr bfloat, ptr addrspace(1) %1, i64 %138, !dbg !33
  %140 = sext i32 %131 to i64, !dbg !33
  %141 = getelementptr bfloat, ptr addrspace(1) %1, i64 %140, !dbg !33
  %142 = sext i32 %132 to i64, !dbg !33
  %143 = getelementptr bfloat, ptr addrspace(1) %1, i64 %142, !dbg !33
  %144 = sext i32 %133 to i64, !dbg !33
  %145 = getelementptr bfloat, ptr addrspace(1) %1, i64 %144, !dbg !33
  %146 = sext i32 %134 to i64, !dbg !33
  %147 = getelementptr bfloat, ptr addrspace(1) %1, i64 %146, !dbg !33
  %148 = sext i32 %135 to i64, !dbg !33
  %149 = getelementptr bfloat, ptr addrspace(1) %1, i64 %148, !dbg !33
  %150 = sext i32 %136 to i64, !dbg !33
  %151 = getelementptr bfloat, ptr addrspace(1) %1, i64 %150, !dbg !33
  %152 = sext i32 %137 to i64, !dbg !33
  %153 = getelementptr bfloat, ptr addrspace(1) %1, i64 %152, !dbg !33
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %107) #2, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !34
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !34
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !34
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !34
  %161 = shufflevector <2 x bfloat> %160, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %162 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !34
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !34
  %164 = shufflevector <2 x bfloat> %163, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %109) #2, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !34
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !34
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !34
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !34
  %172 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !34
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !34
  %175 = shufflevector <2 x bfloat> %174, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %111) #2, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !34
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !34
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !34
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !34
  %183 = shufflevector <2 x bfloat> %182, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %184 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !34
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !34
  %186 = shufflevector <2 x bfloat> %185, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %113) #2, !dbg !34
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !34
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !34
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !34
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !34
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !34
  %194 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %195 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !34
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !34
  %197 = shufflevector <2 x bfloat> %196, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %115) #2, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !34
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !34
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !34
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !34
  %205 = shufflevector <2 x bfloat> %204, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %206 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !34
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !34
  %208 = shufflevector <2 x bfloat> %207, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %117) #2, !dbg !34
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !34
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !34
  %212 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !34
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !34
  %214 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !34
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !34
  %216 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %217 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !34
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !34
  %219 = shufflevector <2 x bfloat> %218, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %119) #2, !dbg !34
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !34
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !34
  %223 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !34
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !34
  %225 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !34
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !34
  %227 = shufflevector <2 x bfloat> %226, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %228 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !34
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !34
  %230 = shufflevector <2 x bfloat> %229, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %121) #2, !dbg !34
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !34
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !34
  %234 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !34
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !34
  %236 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !34
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !34
  %238 = shufflevector <2 x bfloat> %237, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %239 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !34
  %240 = bitcast i32 %239 to <2 x bfloat>, !dbg !34
  %241 = shufflevector <2 x bfloat> %240, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !34
  %242 = xor i32 %34, %and.ra, !dbg !34
  %243 = xor i32 %242, %17, !dbg !34
  %244 = shl nuw nsw i32 %19, 6, !dbg !34
  %245 = or disjoint i32 %243, %244, !dbg !34
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %245, !dbg !34
  %247 = shufflevector <2 x bfloat> %156, <2 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %248 = shufflevector <8 x bfloat> %247, <8 x bfloat> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %249 = shufflevector <8 x bfloat> %248, <8 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %249, ptr addrspace(3) %246, align 16, !dbg !34
  %250 = or disjoint i32 %245, 1024, !dbg !34
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %250, !dbg !34
  %252 = shufflevector <2 x bfloat> %167, <2 x bfloat> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %253 = shufflevector <8 x bfloat> %252, <8 x bfloat> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %254 = shufflevector <8 x bfloat> %253, <8 x bfloat> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %254, ptr addrspace(3) %251, align 16, !dbg !34
  %255 = or disjoint i32 %245, 2048, !dbg !34
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %255, !dbg !34
  %257 = shufflevector <2 x bfloat> %178, <2 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %258 = shufflevector <8 x bfloat> %257, <8 x bfloat> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %259 = shufflevector <8 x bfloat> %258, <8 x bfloat> %186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %259, ptr addrspace(3) %256, align 16, !dbg !34
  %260 = or disjoint i32 %245, 3072, !dbg !34
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %260, !dbg !34
  %262 = shufflevector <2 x bfloat> %189, <2 x bfloat> %191, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %263 = shufflevector <8 x bfloat> %262, <8 x bfloat> %194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %264 = shufflevector <8 x bfloat> %263, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %264, ptr addrspace(3) %261, align 16, !dbg !34
  %265 = or disjoint i32 %245, 4096, !dbg !34
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %265, !dbg !34
  %267 = shufflevector <2 x bfloat> %200, <2 x bfloat> %202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %268 = shufflevector <8 x bfloat> %267, <8 x bfloat> %205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %269 = shufflevector <8 x bfloat> %268, <8 x bfloat> %208, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %269, ptr addrspace(3) %266, align 16, !dbg !34
  %270 = or disjoint i32 %245, 5120, !dbg !34
  %271 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %270, !dbg !34
  %272 = shufflevector <2 x bfloat> %211, <2 x bfloat> %213, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %273 = shufflevector <8 x bfloat> %272, <8 x bfloat> %216, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %274 = shufflevector <8 x bfloat> %273, <8 x bfloat> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %274, ptr addrspace(3) %271, align 16, !dbg !34
  %275 = or disjoint i32 %245, 6144, !dbg !34
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %275, !dbg !34
  %277 = shufflevector <2 x bfloat> %222, <2 x bfloat> %224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %278 = shufflevector <8 x bfloat> %277, <8 x bfloat> %227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %279 = shufflevector <8 x bfloat> %278, <8 x bfloat> %230, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %279, ptr addrspace(3) %276, align 16, !dbg !34
  %280 = or disjoint i32 %245, 7168, !dbg !34
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %280, !dbg !34
  %282 = shufflevector <2 x bfloat> %233, <2 x bfloat> %235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %283 = shufflevector <8 x bfloat> %282, <8 x bfloat> %238, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %284 = shufflevector <8 x bfloat> %283, <8 x bfloat> %241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %284, ptr addrspace(3) %281, align 16, !dbg !34
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %139) #2, !dbg !35
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !35
  %287 = bitcast i32 %286 to <2 x bfloat>, !dbg !35
  %288 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !35
  %289 = bitcast i32 %288 to <2 x bfloat>, !dbg !35
  %290 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !35
  %291 = bitcast i32 %290 to <2 x bfloat>, !dbg !35
  %292 = shufflevector <2 x bfloat> %291, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %293 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !35
  %294 = bitcast i32 %293 to <2 x bfloat>, !dbg !35
  %295 = shufflevector <2 x bfloat> %294, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %141) #2, !dbg !35
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !35
  %298 = bitcast i32 %297 to <2 x bfloat>, !dbg !35
  %299 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !35
  %300 = bitcast i32 %299 to <2 x bfloat>, !dbg !35
  %301 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !35
  %302 = bitcast i32 %301 to <2 x bfloat>, !dbg !35
  %303 = shufflevector <2 x bfloat> %302, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %304 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !35
  %305 = bitcast i32 %304 to <2 x bfloat>, !dbg !35
  %306 = shufflevector <2 x bfloat> %305, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %143) #2, !dbg !35
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !35
  %309 = bitcast i32 %308 to <2 x bfloat>, !dbg !35
  %310 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !35
  %311 = bitcast i32 %310 to <2 x bfloat>, !dbg !35
  %312 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !35
  %313 = bitcast i32 %312 to <2 x bfloat>, !dbg !35
  %314 = shufflevector <2 x bfloat> %313, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %315 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !35
  %316 = bitcast i32 %315 to <2 x bfloat>, !dbg !35
  %317 = shufflevector <2 x bfloat> %316, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %145) #2, !dbg !35
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !35
  %320 = bitcast i32 %319 to <2 x bfloat>, !dbg !35
  %321 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !35
  %322 = bitcast i32 %321 to <2 x bfloat>, !dbg !35
  %323 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !35
  %324 = bitcast i32 %323 to <2 x bfloat>, !dbg !35
  %325 = shufflevector <2 x bfloat> %324, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %326 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !35
  %327 = bitcast i32 %326 to <2 x bfloat>, !dbg !35
  %328 = shufflevector <2 x bfloat> %327, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %147) #2, !dbg !35
  %330 = extractvalue { i32, i32, i32, i32 } %329, 0, !dbg !35
  %331 = bitcast i32 %330 to <2 x bfloat>, !dbg !35
  %332 = extractvalue { i32, i32, i32, i32 } %329, 1, !dbg !35
  %333 = bitcast i32 %332 to <2 x bfloat>, !dbg !35
  %334 = extractvalue { i32, i32, i32, i32 } %329, 2, !dbg !35
  %335 = bitcast i32 %334 to <2 x bfloat>, !dbg !35
  %336 = shufflevector <2 x bfloat> %335, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %337 = extractvalue { i32, i32, i32, i32 } %329, 3, !dbg !35
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !35
  %339 = shufflevector <2 x bfloat> %338, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %149) #2, !dbg !35
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !35
  %342 = bitcast i32 %341 to <2 x bfloat>, !dbg !35
  %343 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !35
  %344 = bitcast i32 %343 to <2 x bfloat>, !dbg !35
  %345 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !35
  %346 = bitcast i32 %345 to <2 x bfloat>, !dbg !35
  %347 = shufflevector <2 x bfloat> %346, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %348 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !35
  %349 = bitcast i32 %348 to <2 x bfloat>, !dbg !35
  %350 = shufflevector <2 x bfloat> %349, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %151) #2, !dbg !35
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !35
  %353 = bitcast i32 %352 to <2 x bfloat>, !dbg !35
  %354 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !35
  %355 = bitcast i32 %354 to <2 x bfloat>, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !35
  %357 = bitcast i32 %356 to <2 x bfloat>, !dbg !35
  %358 = shufflevector <2 x bfloat> %357, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %359 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !35
  %360 = bitcast i32 %359 to <2 x bfloat>, !dbg !35
  %361 = shufflevector <2 x bfloat> %360, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %153) #2, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !35
  %364 = bitcast i32 %363 to <2 x bfloat>, !dbg !35
  %365 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !35
  %366 = bitcast i32 %365 to <2 x bfloat>, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !35
  %368 = bitcast i32 %367 to <2 x bfloat>, !dbg !35
  %369 = shufflevector <2 x bfloat> %368, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %370 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !35
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !35
  %372 = shufflevector <2 x bfloat> %371, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %245, !dbg !35
  %374 = shufflevector <2 x bfloat> %287, <2 x bfloat> %289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %375 = shufflevector <8 x bfloat> %374, <8 x bfloat> %292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %376 = shufflevector <8 x bfloat> %375, <8 x bfloat> %295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %376, ptr addrspace(3) %373, align 16, !dbg !35
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %250, !dbg !35
  %378 = shufflevector <2 x bfloat> %298, <2 x bfloat> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %379 = shufflevector <8 x bfloat> %378, <8 x bfloat> %303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %380 = shufflevector <8 x bfloat> %379, <8 x bfloat> %306, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %380, ptr addrspace(3) %377, align 16, !dbg !35
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %255, !dbg !35
  %382 = shufflevector <2 x bfloat> %309, <2 x bfloat> %311, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %383 = shufflevector <8 x bfloat> %382, <8 x bfloat> %314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %384 = shufflevector <8 x bfloat> %383, <8 x bfloat> %317, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %384, ptr addrspace(3) %381, align 16, !dbg !35
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %260, !dbg !35
  %386 = shufflevector <2 x bfloat> %320, <2 x bfloat> %322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %387 = shufflevector <8 x bfloat> %386, <8 x bfloat> %325, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %388 = shufflevector <8 x bfloat> %387, <8 x bfloat> %328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %388, ptr addrspace(3) %385, align 16, !dbg !35
  %389 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %265, !dbg !35
  %390 = shufflevector <2 x bfloat> %331, <2 x bfloat> %333, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %391 = shufflevector <8 x bfloat> %390, <8 x bfloat> %336, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %392 = shufflevector <8 x bfloat> %391, <8 x bfloat> %339, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %392, ptr addrspace(3) %389, align 16, !dbg !35
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %270, !dbg !35
  %394 = shufflevector <2 x bfloat> %342, <2 x bfloat> %344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %395 = shufflevector <8 x bfloat> %394, <8 x bfloat> %347, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %396 = shufflevector <8 x bfloat> %395, <8 x bfloat> %350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %396, ptr addrspace(3) %393, align 16, !dbg !35
  %397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %275, !dbg !35
  %398 = shufflevector <2 x bfloat> %353, <2 x bfloat> %355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %399 = shufflevector <8 x bfloat> %398, <8 x bfloat> %358, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %400 = shufflevector <8 x bfloat> %399, <8 x bfloat> %361, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %400, ptr addrspace(3) %397, align 16, !dbg !35
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %280, !dbg !35
  %402 = shufflevector <2 x bfloat> %364, <2 x bfloat> %366, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %403 = shufflevector <8 x bfloat> %402, <8 x bfloat> %369, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %404 = shufflevector <8 x bfloat> %403, <8 x bfloat> %372, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %404, ptr addrspace(3) %401, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %405 = and i32 %15, 7, !dbg !34
  %406 = and i32 %15, 15, !dbg !34
  %407 = lshr i32 %15, 1, !dbg !34
  %408 = and i32 %407, 8, !dbg !34
  %409 = xor i32 %34, %408, !dbg !34
  %410 = lshr i32 %15, 2, !dbg !34
  %411 = and i32 %410, 16, !dbg !34
  %412 = or disjoint i32 %411, %406, !dbg !34
  %413 = shl nuw nsw i32 %412, 6, !dbg !34
  %414 = or disjoint i32 %413, %409, !dbg !34
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %414, !dbg !34
  %416 = ptrtoint ptr addrspace(3) %415 to i32, !dbg !34
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %416) #2, !dbg !34
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !34
  %419 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !34
  %420 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !34
  %421 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !34
  %422 = or disjoint i32 %30, 16, !dbg !34
  %423 = xor i32 %422, %31, !dbg !34
  %424 = or disjoint i32 %423, %33, !dbg !34
  %425 = xor i32 %424, %408, !dbg !34
  %426 = or disjoint i32 %425, %413, !dbg !34
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %426, !dbg !34
  %428 = ptrtoint ptr addrspace(3) %427 to i32, !dbg !34
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %428) #2, !dbg !34
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !34
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !34
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !34
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !34
  %434 = or disjoint i32 %32, 32, !dbg !34
  %435 = xor i32 %434, %33, !dbg !34
  %436 = xor i32 %435, %408, !dbg !34
  %437 = or disjoint i32 %436, %413, !dbg !34
  %438 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %437, !dbg !34
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !34
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #2, !dbg !34
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !34
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !34
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !34
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !34
  %445 = or disjoint i32 %30, 48, !dbg !34
  %and.ra322 = and i32 %29, 48, !dbg !34
  %446 = or disjoint i32 %408, %and.ra322, !dbg !34
  %447 = xor i32 %446, %445, !dbg !34
  %448 = or disjoint i32 %447, %413, !dbg !34
  %449 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %448, !dbg !34
  %450 = ptrtoint ptr addrspace(3) %449 to i32, !dbg !34
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %450) #2, !dbg !34
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !34
  %453 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !34
  %454 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !34
  %455 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !34
  %456 = or disjoint i32 %405, 32, !dbg !34
  %457 = or disjoint i32 %411, %16, !dbg !34
  %458 = or disjoint i32 %457, %456, !dbg !34
  %459 = shl nuw nsw i32 %458, 6, !dbg !34
  %460 = or disjoint i32 %459, %409, !dbg !34
  %461 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %460, !dbg !34
  %462 = ptrtoint ptr addrspace(3) %461 to i32, !dbg !34
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %462) #2, !dbg !34
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !34
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !34
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !34
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !34
  %468 = or disjoint i32 %425, %459, !dbg !34
  %469 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %468, !dbg !34
  %470 = ptrtoint ptr addrspace(3) %469 to i32, !dbg !34
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %470) #2, !dbg !34
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !34
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !34
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !34
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !34
  %476 = or disjoint i32 %436, %459, !dbg !34
  %477 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %476, !dbg !34
  %478 = ptrtoint ptr addrspace(3) %477 to i32, !dbg !34
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %478) #2, !dbg !34
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !34
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !34
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !34
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !34
  %484 = or disjoint i32 %447, %459, !dbg !34
  %485 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %484, !dbg !34
  %486 = ptrtoint ptr addrspace(3) %485 to i32, !dbg !34
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %486) #2, !dbg !34
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !34
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !34
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !34
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !34
  %492 = or disjoint i32 %405, 64, !dbg !34
  %493 = or disjoint i32 %457, %492, !dbg !34
  %494 = shl nuw nsw i32 %493, 6, !dbg !34
  %495 = or disjoint i32 %494, %409, !dbg !34
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %495, !dbg !34
  %497 = ptrtoint ptr addrspace(3) %496 to i32, !dbg !34
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %497) #2, !dbg !34
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !34
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !34
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !34
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !34
  %503 = or disjoint i32 %425, %494, !dbg !34
  %504 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %503, !dbg !34
  %505 = ptrtoint ptr addrspace(3) %504 to i32, !dbg !34
  %506 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %505) #2, !dbg !34
  %507 = extractvalue { i32, i32, i32, i32 } %506, 0, !dbg !34
  %508 = extractvalue { i32, i32, i32, i32 } %506, 1, !dbg !34
  %509 = extractvalue { i32, i32, i32, i32 } %506, 2, !dbg !34
  %510 = extractvalue { i32, i32, i32, i32 } %506, 3, !dbg !34
  %511 = or disjoint i32 %436, %494, !dbg !34
  %512 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %511, !dbg !34
  %513 = ptrtoint ptr addrspace(3) %512 to i32, !dbg !34
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %513) #2, !dbg !34
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !34
  %516 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !34
  %517 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !34
  %518 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !34
  %519 = or disjoint i32 %447, %494, !dbg !34
  %520 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %519, !dbg !34
  %521 = ptrtoint ptr addrspace(3) %520 to i32, !dbg !34
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %521) #2, !dbg !34
  %523 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !34
  %524 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !34
  %525 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !34
  %526 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !34
  %527 = or disjoint i32 %405, 96, !dbg !34
  %528 = or disjoint i32 %457, %527, !dbg !34
  %529 = shl nuw nsw i32 %528, 6, !dbg !34
  %530 = or disjoint i32 %529, %409, !dbg !34
  %531 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %530, !dbg !34
  %532 = ptrtoint ptr addrspace(3) %531 to i32, !dbg !34
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %532) #2, !dbg !34
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !34
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !34
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !34
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !34
  %538 = or disjoint i32 %425, %529, !dbg !34
  %539 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %538, !dbg !34
  %540 = ptrtoint ptr addrspace(3) %539 to i32, !dbg !34
  %541 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %540) #2, !dbg !34
  %542 = extractvalue { i32, i32, i32, i32 } %541, 0, !dbg !34
  %543 = extractvalue { i32, i32, i32, i32 } %541, 1, !dbg !34
  %544 = extractvalue { i32, i32, i32, i32 } %541, 2, !dbg !34
  %545 = extractvalue { i32, i32, i32, i32 } %541, 3, !dbg !34
  %546 = or disjoint i32 %436, %529, !dbg !34
  %547 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %546, !dbg !34
  %548 = ptrtoint ptr addrspace(3) %547 to i32, !dbg !34
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %548) #2, !dbg !34
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !34
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !34
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !34
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !34
  %554 = or disjoint i32 %447, %529, !dbg !34
  %555 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %554, !dbg !34
  %556 = ptrtoint ptr addrspace(3) %555 to i32, !dbg !34
  %557 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %556) #2, !dbg !34
  %558 = extractvalue { i32, i32, i32, i32 } %557, 0, !dbg !34
  %559 = extractvalue { i32, i32, i32, i32 } %557, 1, !dbg !34
  %560 = extractvalue { i32, i32, i32, i32 } %557, 2, !dbg !34
  %561 = extractvalue { i32, i32, i32, i32 } %557, 3, !dbg !34
  %562 = lshr exact i32 %17, 2, !dbg !35
  %563 = or disjoint i32 %562, %405, !dbg !35
  %564 = shl nuw nsw i32 %563, 6, !dbg !35
  %565 = or disjoint i32 %564, %242, !dbg !35
  %566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %565, !dbg !35
  %567 = ptrtoint ptr addrspace(3) %566 to i32, !dbg !35
  %568 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %567) #2, !dbg !35
  %569 = extractvalue { i32, i32, i32, i32 } %568, 0, !dbg !35
  %570 = extractvalue { i32, i32, i32, i32 } %568, 1, !dbg !35
  %571 = extractvalue { i32, i32, i32, i32 } %568, 2, !dbg !35
  %572 = extractvalue { i32, i32, i32, i32 } %568, 3, !dbg !35
  %573 = xor i32 %435, %and.ra, !dbg !35
  %574 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %573, !dbg !35
  %575 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %564, !dbg !35
  %576 = ptrtoint ptr addrspace(3) %575 to i32, !dbg !35
  %577 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %576) #2, !dbg !35
  %578 = extractvalue { i32, i32, i32, i32 } %577, 0, !dbg !35
  %579 = extractvalue { i32, i32, i32, i32 } %577, 1, !dbg !35
  %580 = extractvalue { i32, i32, i32, i32 } %577, 2, !dbg !35
  %581 = extractvalue { i32, i32, i32, i32 } %577, 3, !dbg !35
  %582 = or disjoint i32 %564, 1024, !dbg !35
  %583 = or disjoint i32 %582, %242, !dbg !35
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %583, !dbg !35
  %585 = ptrtoint ptr addrspace(3) %584 to i32, !dbg !35
  %586 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %585) #2, !dbg !35
  %587 = extractvalue { i32, i32, i32, i32 } %586, 0, !dbg !35
  %588 = extractvalue { i32, i32, i32, i32 } %586, 1, !dbg !35
  %589 = extractvalue { i32, i32, i32, i32 } %586, 2, !dbg !35
  %590 = extractvalue { i32, i32, i32, i32 } %586, 3, !dbg !35
  %591 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %582, !dbg !35
  %592 = ptrtoint ptr addrspace(3) %591 to i32, !dbg !35
  %593 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %592) #2, !dbg !35
  %594 = extractvalue { i32, i32, i32, i32 } %593, 0, !dbg !35
  %595 = extractvalue { i32, i32, i32, i32 } %593, 1, !dbg !35
  %596 = extractvalue { i32, i32, i32, i32 } %593, 2, !dbg !35
  %597 = extractvalue { i32, i32, i32, i32 } %593, 3, !dbg !35
  %598 = or disjoint i32 %456, %562, !dbg !35
  %599 = shl nuw nsw i32 %598, 6, !dbg !35
  %600 = or disjoint i32 %599, %242, !dbg !35
  %601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %600, !dbg !35
  %602 = ptrtoint ptr addrspace(3) %601 to i32, !dbg !35
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %602) #2, !dbg !35
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !35
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !35
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !35
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !35
  %608 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %599, !dbg !35
  %609 = ptrtoint ptr addrspace(3) %608 to i32, !dbg !35
  %610 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %609) #2, !dbg !35
  %611 = extractvalue { i32, i32, i32, i32 } %610, 0, !dbg !35
  %612 = extractvalue { i32, i32, i32, i32 } %610, 1, !dbg !35
  %613 = extractvalue { i32, i32, i32, i32 } %610, 2, !dbg !35
  %614 = extractvalue { i32, i32, i32, i32 } %610, 3, !dbg !35
  %615 = or disjoint i32 %564, 3072, !dbg !35
  %616 = or disjoint i32 %615, %242, !dbg !35
  %617 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %616, !dbg !35
  %618 = ptrtoint ptr addrspace(3) %617 to i32, !dbg !35
  %619 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %618) #2, !dbg !35
  %620 = extractvalue { i32, i32, i32, i32 } %619, 0, !dbg !35
  %621 = extractvalue { i32, i32, i32, i32 } %619, 1, !dbg !35
  %622 = extractvalue { i32, i32, i32, i32 } %619, 2, !dbg !35
  %623 = extractvalue { i32, i32, i32, i32 } %619, 3, !dbg !35
  %624 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %615, !dbg !35
  %625 = ptrtoint ptr addrspace(3) %624 to i32, !dbg !35
  %626 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %625) #2, !dbg !35
  %627 = extractvalue { i32, i32, i32, i32 } %626, 0, !dbg !35
  %628 = extractvalue { i32, i32, i32, i32 } %626, 1, !dbg !35
  %629 = extractvalue { i32, i32, i32, i32 } %626, 2, !dbg !35
  %630 = extractvalue { i32, i32, i32, i32 } %626, 3, !dbg !35
  %631 = or disjoint i32 %492, %562, !dbg !35
  %632 = shl nuw nsw i32 %631, 6, !dbg !35
  %633 = or disjoint i32 %632, %242, !dbg !35
  %634 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %633, !dbg !35
  %635 = ptrtoint ptr addrspace(3) %634 to i32, !dbg !35
  %636 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %635) #2, !dbg !35
  %637 = extractvalue { i32, i32, i32, i32 } %636, 0, !dbg !35
  %638 = extractvalue { i32, i32, i32, i32 } %636, 1, !dbg !35
  %639 = extractvalue { i32, i32, i32, i32 } %636, 2, !dbg !35
  %640 = extractvalue { i32, i32, i32, i32 } %636, 3, !dbg !35
  %641 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %632, !dbg !35
  %642 = ptrtoint ptr addrspace(3) %641 to i32, !dbg !35
  %643 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %642) #2, !dbg !35
  %644 = extractvalue { i32, i32, i32, i32 } %643, 0, !dbg !35
  %645 = extractvalue { i32, i32, i32, i32 } %643, 1, !dbg !35
  %646 = extractvalue { i32, i32, i32, i32 } %643, 2, !dbg !35
  %647 = extractvalue { i32, i32, i32, i32 } %643, 3, !dbg !35
  %648 = or disjoint i32 %564, 5120, !dbg !35
  %649 = or disjoint i32 %648, %242, !dbg !35
  %650 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %649, !dbg !35
  %651 = ptrtoint ptr addrspace(3) %650 to i32, !dbg !35
  %652 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %651) #2, !dbg !35
  %653 = extractvalue { i32, i32, i32, i32 } %652, 0, !dbg !35
  %654 = extractvalue { i32, i32, i32, i32 } %652, 1, !dbg !35
  %655 = extractvalue { i32, i32, i32, i32 } %652, 2, !dbg !35
  %656 = extractvalue { i32, i32, i32, i32 } %652, 3, !dbg !35
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %648, !dbg !35
  %658 = ptrtoint ptr addrspace(3) %657 to i32, !dbg !35
  %659 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %658) #2, !dbg !35
  %660 = extractvalue { i32, i32, i32, i32 } %659, 0, !dbg !35
  %661 = extractvalue { i32, i32, i32, i32 } %659, 1, !dbg !35
  %662 = extractvalue { i32, i32, i32, i32 } %659, 2, !dbg !35
  %663 = extractvalue { i32, i32, i32, i32 } %659, 3, !dbg !35
  %664 = or disjoint i32 %527, %562, !dbg !35
  %665 = shl nuw nsw i32 %664, 6, !dbg !35
  %666 = or disjoint i32 %665, %242, !dbg !35
  %667 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %666, !dbg !35
  %668 = ptrtoint ptr addrspace(3) %667 to i32, !dbg !35
  %669 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %668) #2, !dbg !35
  %670 = extractvalue { i32, i32, i32, i32 } %669, 0, !dbg !35
  %671 = extractvalue { i32, i32, i32, i32 } %669, 1, !dbg !35
  %672 = extractvalue { i32, i32, i32, i32 } %669, 2, !dbg !35
  %673 = extractvalue { i32, i32, i32, i32 } %669, 3, !dbg !35
  %674 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %665, !dbg !35
  %675 = ptrtoint ptr addrspace(3) %674 to i32, !dbg !35
  %676 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %675) #2, !dbg !35
  %677 = extractvalue { i32, i32, i32, i32 } %676, 0, !dbg !35
  %678 = extractvalue { i32, i32, i32, i32 } %676, 1, !dbg !35
  %679 = extractvalue { i32, i32, i32, i32 } %676, 2, !dbg !35
  %680 = extractvalue { i32, i32, i32, i32 } %676, 3, !dbg !35
  %681 = or disjoint i32 %564, 7168, !dbg !35
  %682 = or disjoint i32 %681, %242, !dbg !35
  %683 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %682, !dbg !35
  %684 = ptrtoint ptr addrspace(3) %683 to i32, !dbg !35
  %685 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %684) #2, !dbg !35
  %686 = extractvalue { i32, i32, i32, i32 } %685, 0, !dbg !35
  %687 = extractvalue { i32, i32, i32, i32 } %685, 1, !dbg !35
  %688 = extractvalue { i32, i32, i32, i32 } %685, 2, !dbg !35
  %689 = extractvalue { i32, i32, i32, i32 } %685, 3, !dbg !35
  %690 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %574, i32 %681, !dbg !35
  %691 = ptrtoint ptr addrspace(3) %690 to i32, !dbg !35
  %692 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %691) #2, !dbg !35
  %693 = extractvalue { i32, i32, i32, i32 } %692, 0, !dbg !35
  %694 = extractvalue { i32, i32, i32, i32 } %692, 1, !dbg !35
  %695 = extractvalue { i32, i32, i32, i32 } %692, 2, !dbg !35
  %696 = extractvalue { i32, i32, i32, i32 } %692, 3, !dbg !35
  %697 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %569, i32 %570) #2, !dbg !36
  %698 = extractvalue { float, float, float, float } %697, 0, !dbg !36
  %699 = extractvalue { float, float, float, float } %697, 1, !dbg !36
  %700 = extractvalue { float, float, float, float } %697, 2, !dbg !36
  %701 = extractvalue { float, float, float, float } %697, 3, !dbg !36
  %702 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %587, i32 %588) #2, !dbg !36
  %703 = extractvalue { float, float, float, float } %702, 0, !dbg !36
  %704 = extractvalue { float, float, float, float } %702, 1, !dbg !36
  %705 = extractvalue { float, float, float, float } %702, 2, !dbg !36
  %706 = extractvalue { float, float, float, float } %702, 3, !dbg !36
  %707 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %604, i32 %605) #2, !dbg !36
  %708 = extractvalue { float, float, float, float } %707, 0, !dbg !36
  %709 = extractvalue { float, float, float, float } %707, 1, !dbg !36
  %710 = extractvalue { float, float, float, float } %707, 2, !dbg !36
  %711 = extractvalue { float, float, float, float } %707, 3, !dbg !36
  %712 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %620, i32 %621) #2, !dbg !36
  %713 = extractvalue { float, float, float, float } %712, 0, !dbg !36
  %714 = extractvalue { float, float, float, float } %712, 1, !dbg !36
  %715 = extractvalue { float, float, float, float } %712, 2, !dbg !36
  %716 = extractvalue { float, float, float, float } %712, 3, !dbg !36
  %717 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %637, i32 %638) #2, !dbg !36
  %718 = extractvalue { float, float, float, float } %717, 0, !dbg !36
  %719 = extractvalue { float, float, float, float } %717, 1, !dbg !36
  %720 = extractvalue { float, float, float, float } %717, 2, !dbg !36
  %721 = extractvalue { float, float, float, float } %717, 3, !dbg !36
  %722 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %653, i32 %654) #2, !dbg !36
  %723 = extractvalue { float, float, float, float } %722, 0, !dbg !36
  %724 = extractvalue { float, float, float, float } %722, 1, !dbg !36
  %725 = extractvalue { float, float, float, float } %722, 2, !dbg !36
  %726 = extractvalue { float, float, float, float } %722, 3, !dbg !36
  %727 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %670, i32 %671) #2, !dbg !36
  %728 = extractvalue { float, float, float, float } %727, 0, !dbg !36
  %729 = extractvalue { float, float, float, float } %727, 1, !dbg !36
  %730 = extractvalue { float, float, float, float } %727, 2, !dbg !36
  %731 = extractvalue { float, float, float, float } %727, 3, !dbg !36
  %732 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %418, i32 %419, i32 %420, i32 %421, i32 %686, i32 %687) #2, !dbg !36
  %733 = extractvalue { float, float, float, float } %732, 0, !dbg !36
  %734 = extractvalue { float, float, float, float } %732, 1, !dbg !36
  %735 = extractvalue { float, float, float, float } %732, 2, !dbg !36
  %736 = extractvalue { float, float, float, float } %732, 3, !dbg !36
  %737 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %569, i32 %570) #2, !dbg !36
  %738 = extractvalue { float, float, float, float } %737, 0, !dbg !36
  %739 = extractvalue { float, float, float, float } %737, 1, !dbg !36
  %740 = extractvalue { float, float, float, float } %737, 2, !dbg !36
  %741 = extractvalue { float, float, float, float } %737, 3, !dbg !36
  %742 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %587, i32 %588) #2, !dbg !36
  %743 = extractvalue { float, float, float, float } %742, 0, !dbg !36
  %744 = extractvalue { float, float, float, float } %742, 1, !dbg !36
  %745 = extractvalue { float, float, float, float } %742, 2, !dbg !36
  %746 = extractvalue { float, float, float, float } %742, 3, !dbg !36
  %747 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %604, i32 %605) #2, !dbg !36
  %748 = extractvalue { float, float, float, float } %747, 0, !dbg !36
  %749 = extractvalue { float, float, float, float } %747, 1, !dbg !36
  %750 = extractvalue { float, float, float, float } %747, 2, !dbg !36
  %751 = extractvalue { float, float, float, float } %747, 3, !dbg !36
  %752 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %620, i32 %621) #2, !dbg !36
  %753 = extractvalue { float, float, float, float } %752, 0, !dbg !36
  %754 = extractvalue { float, float, float, float } %752, 1, !dbg !36
  %755 = extractvalue { float, float, float, float } %752, 2, !dbg !36
  %756 = extractvalue { float, float, float, float } %752, 3, !dbg !36
  %757 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %637, i32 %638) #2, !dbg !36
  %758 = extractvalue { float, float, float, float } %757, 0, !dbg !36
  %759 = extractvalue { float, float, float, float } %757, 1, !dbg !36
  %760 = extractvalue { float, float, float, float } %757, 2, !dbg !36
  %761 = extractvalue { float, float, float, float } %757, 3, !dbg !36
  %762 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %653, i32 %654) #2, !dbg !36
  %763 = extractvalue { float, float, float, float } %762, 0, !dbg !36
  %764 = extractvalue { float, float, float, float } %762, 1, !dbg !36
  %765 = extractvalue { float, float, float, float } %762, 2, !dbg !36
  %766 = extractvalue { float, float, float, float } %762, 3, !dbg !36
  %767 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %670, i32 %671) #2, !dbg !36
  %768 = extractvalue { float, float, float, float } %767, 0, !dbg !36
  %769 = extractvalue { float, float, float, float } %767, 1, !dbg !36
  %770 = extractvalue { float, float, float, float } %767, 2, !dbg !36
  %771 = extractvalue { float, float, float, float } %767, 3, !dbg !36
  %772 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %464, i32 %465, i32 %466, i32 %467, i32 %686, i32 %687) #2, !dbg !36
  %773 = extractvalue { float, float, float, float } %772, 0, !dbg !36
  %774 = extractvalue { float, float, float, float } %772, 1, !dbg !36
  %775 = extractvalue { float, float, float, float } %772, 2, !dbg !36
  %776 = extractvalue { float, float, float, float } %772, 3, !dbg !36
  %777 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %569, i32 %570) #2, !dbg !36
  %778 = extractvalue { float, float, float, float } %777, 0, !dbg !36
  %779 = extractvalue { float, float, float, float } %777, 1, !dbg !36
  %780 = extractvalue { float, float, float, float } %777, 2, !dbg !36
  %781 = extractvalue { float, float, float, float } %777, 3, !dbg !36
  %782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %587, i32 %588) #2, !dbg !36
  %783 = extractvalue { float, float, float, float } %782, 0, !dbg !36
  %784 = extractvalue { float, float, float, float } %782, 1, !dbg !36
  %785 = extractvalue { float, float, float, float } %782, 2, !dbg !36
  %786 = extractvalue { float, float, float, float } %782, 3, !dbg !36
  %787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %604, i32 %605) #2, !dbg !36
  %788 = extractvalue { float, float, float, float } %787, 0, !dbg !36
  %789 = extractvalue { float, float, float, float } %787, 1, !dbg !36
  %790 = extractvalue { float, float, float, float } %787, 2, !dbg !36
  %791 = extractvalue { float, float, float, float } %787, 3, !dbg !36
  %792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %620, i32 %621) #2, !dbg !36
  %793 = extractvalue { float, float, float, float } %792, 0, !dbg !36
  %794 = extractvalue { float, float, float, float } %792, 1, !dbg !36
  %795 = extractvalue { float, float, float, float } %792, 2, !dbg !36
  %796 = extractvalue { float, float, float, float } %792, 3, !dbg !36
  %797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %637, i32 %638) #2, !dbg !36
  %798 = extractvalue { float, float, float, float } %797, 0, !dbg !36
  %799 = extractvalue { float, float, float, float } %797, 1, !dbg !36
  %800 = extractvalue { float, float, float, float } %797, 2, !dbg !36
  %801 = extractvalue { float, float, float, float } %797, 3, !dbg !36
  %802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %653, i32 %654) #2, !dbg !36
  %803 = extractvalue { float, float, float, float } %802, 0, !dbg !36
  %804 = extractvalue { float, float, float, float } %802, 1, !dbg !36
  %805 = extractvalue { float, float, float, float } %802, 2, !dbg !36
  %806 = extractvalue { float, float, float, float } %802, 3, !dbg !36
  %807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %670, i32 %671) #2, !dbg !36
  %808 = extractvalue { float, float, float, float } %807, 0, !dbg !36
  %809 = extractvalue { float, float, float, float } %807, 1, !dbg !36
  %810 = extractvalue { float, float, float, float } %807, 2, !dbg !36
  %811 = extractvalue { float, float, float, float } %807, 3, !dbg !36
  %812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %499, i32 %500, i32 %501, i32 %502, i32 %686, i32 %687) #2, !dbg !36
  %813 = extractvalue { float, float, float, float } %812, 0, !dbg !36
  %814 = extractvalue { float, float, float, float } %812, 1, !dbg !36
  %815 = extractvalue { float, float, float, float } %812, 2, !dbg !36
  %816 = extractvalue { float, float, float, float } %812, 3, !dbg !36
  %817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %569, i32 %570) #2, !dbg !36
  %818 = extractvalue { float, float, float, float } %817, 0, !dbg !36
  %819 = extractvalue { float, float, float, float } %817, 1, !dbg !36
  %820 = extractvalue { float, float, float, float } %817, 2, !dbg !36
  %821 = extractvalue { float, float, float, float } %817, 3, !dbg !36
  %822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %587, i32 %588) #2, !dbg !36
  %823 = extractvalue { float, float, float, float } %822, 0, !dbg !36
  %824 = extractvalue { float, float, float, float } %822, 1, !dbg !36
  %825 = extractvalue { float, float, float, float } %822, 2, !dbg !36
  %826 = extractvalue { float, float, float, float } %822, 3, !dbg !36
  %827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %604, i32 %605) #2, !dbg !36
  %828 = extractvalue { float, float, float, float } %827, 0, !dbg !36
  %829 = extractvalue { float, float, float, float } %827, 1, !dbg !36
  %830 = extractvalue { float, float, float, float } %827, 2, !dbg !36
  %831 = extractvalue { float, float, float, float } %827, 3, !dbg !36
  %832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %620, i32 %621) #2, !dbg !36
  %833 = extractvalue { float, float, float, float } %832, 0, !dbg !36
  %834 = extractvalue { float, float, float, float } %832, 1, !dbg !36
  %835 = extractvalue { float, float, float, float } %832, 2, !dbg !36
  %836 = extractvalue { float, float, float, float } %832, 3, !dbg !36
  %837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %637, i32 %638) #2, !dbg !36
  %838 = extractvalue { float, float, float, float } %837, 0, !dbg !36
  %839 = extractvalue { float, float, float, float } %837, 1, !dbg !36
  %840 = extractvalue { float, float, float, float } %837, 2, !dbg !36
  %841 = extractvalue { float, float, float, float } %837, 3, !dbg !36
  %842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %653, i32 %654) #2, !dbg !36
  %843 = extractvalue { float, float, float, float } %842, 0, !dbg !36
  %844 = extractvalue { float, float, float, float } %842, 1, !dbg !36
  %845 = extractvalue { float, float, float, float } %842, 2, !dbg !36
  %846 = extractvalue { float, float, float, float } %842, 3, !dbg !36
  %847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %670, i32 %671) #2, !dbg !36
  %848 = extractvalue { float, float, float, float } %847, 0, !dbg !36
  %849 = extractvalue { float, float, float, float } %847, 1, !dbg !36
  %850 = extractvalue { float, float, float, float } %847, 2, !dbg !36
  %851 = extractvalue { float, float, float, float } %847, 3, !dbg !36
  %852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %534, i32 %535, i32 %536, i32 %537, i32 %686, i32 %687) #2, !dbg !36
  %853 = extractvalue { float, float, float, float } %852, 0, !dbg !36
  %854 = extractvalue { float, float, float, float } %852, 1, !dbg !36
  %855 = extractvalue { float, float, float, float } %852, 2, !dbg !36
  %856 = extractvalue { float, float, float, float } %852, 3, !dbg !36
  %857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %698, float %699, float %700, float %701, i32 %430, i32 %431, i32 %432, i32 %433, i32 %571, i32 %572) #2, !dbg !36
  %858 = extractvalue { float, float, float, float } %857, 0, !dbg !36
  %859 = extractvalue { float, float, float, float } %857, 1, !dbg !36
  %860 = extractvalue { float, float, float, float } %857, 2, !dbg !36
  %861 = extractvalue { float, float, float, float } %857, 3, !dbg !36
  %862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %703, float %704, float %705, float %706, i32 %430, i32 %431, i32 %432, i32 %433, i32 %589, i32 %590) #2, !dbg !36
  %863 = extractvalue { float, float, float, float } %862, 0, !dbg !36
  %864 = extractvalue { float, float, float, float } %862, 1, !dbg !36
  %865 = extractvalue { float, float, float, float } %862, 2, !dbg !36
  %866 = extractvalue { float, float, float, float } %862, 3, !dbg !36
  %867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %708, float %709, float %710, float %711, i32 %430, i32 %431, i32 %432, i32 %433, i32 %606, i32 %607) #2, !dbg !36
  %868 = extractvalue { float, float, float, float } %867, 0, !dbg !36
  %869 = extractvalue { float, float, float, float } %867, 1, !dbg !36
  %870 = extractvalue { float, float, float, float } %867, 2, !dbg !36
  %871 = extractvalue { float, float, float, float } %867, 3, !dbg !36
  %872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %713, float %714, float %715, float %716, i32 %430, i32 %431, i32 %432, i32 %433, i32 %622, i32 %623) #2, !dbg !36
  %873 = extractvalue { float, float, float, float } %872, 0, !dbg !36
  %874 = extractvalue { float, float, float, float } %872, 1, !dbg !36
  %875 = extractvalue { float, float, float, float } %872, 2, !dbg !36
  %876 = extractvalue { float, float, float, float } %872, 3, !dbg !36
  %877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %718, float %719, float %720, float %721, i32 %430, i32 %431, i32 %432, i32 %433, i32 %639, i32 %640) #2, !dbg !36
  %878 = extractvalue { float, float, float, float } %877, 0, !dbg !36
  %879 = extractvalue { float, float, float, float } %877, 1, !dbg !36
  %880 = extractvalue { float, float, float, float } %877, 2, !dbg !36
  %881 = extractvalue { float, float, float, float } %877, 3, !dbg !36
  %882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %723, float %724, float %725, float %726, i32 %430, i32 %431, i32 %432, i32 %433, i32 %655, i32 %656) #2, !dbg !36
  %883 = extractvalue { float, float, float, float } %882, 0, !dbg !36
  %884 = extractvalue { float, float, float, float } %882, 1, !dbg !36
  %885 = extractvalue { float, float, float, float } %882, 2, !dbg !36
  %886 = extractvalue { float, float, float, float } %882, 3, !dbg !36
  %887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %728, float %729, float %730, float %731, i32 %430, i32 %431, i32 %432, i32 %433, i32 %672, i32 %673) #2, !dbg !36
  %888 = extractvalue { float, float, float, float } %887, 0, !dbg !36
  %889 = extractvalue { float, float, float, float } %887, 1, !dbg !36
  %890 = extractvalue { float, float, float, float } %887, 2, !dbg !36
  %891 = extractvalue { float, float, float, float } %887, 3, !dbg !36
  %892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %733, float %734, float %735, float %736, i32 %430, i32 %431, i32 %432, i32 %433, i32 %688, i32 %689) #2, !dbg !36
  %893 = extractvalue { float, float, float, float } %892, 0, !dbg !36
  %894 = extractvalue { float, float, float, float } %892, 1, !dbg !36
  %895 = extractvalue { float, float, float, float } %892, 2, !dbg !36
  %896 = extractvalue { float, float, float, float } %892, 3, !dbg !36
  %897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %738, float %739, float %740, float %741, i32 %472, i32 %473, i32 %474, i32 %475, i32 %571, i32 %572) #2, !dbg !36
  %898 = extractvalue { float, float, float, float } %897, 0, !dbg !36
  %899 = extractvalue { float, float, float, float } %897, 1, !dbg !36
  %900 = extractvalue { float, float, float, float } %897, 2, !dbg !36
  %901 = extractvalue { float, float, float, float } %897, 3, !dbg !36
  %902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %743, float %744, float %745, float %746, i32 %472, i32 %473, i32 %474, i32 %475, i32 %589, i32 %590) #2, !dbg !36
  %903 = extractvalue { float, float, float, float } %902, 0, !dbg !36
  %904 = extractvalue { float, float, float, float } %902, 1, !dbg !36
  %905 = extractvalue { float, float, float, float } %902, 2, !dbg !36
  %906 = extractvalue { float, float, float, float } %902, 3, !dbg !36
  %907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %748, float %749, float %750, float %751, i32 %472, i32 %473, i32 %474, i32 %475, i32 %606, i32 %607) #2, !dbg !36
  %908 = extractvalue { float, float, float, float } %907, 0, !dbg !36
  %909 = extractvalue { float, float, float, float } %907, 1, !dbg !36
  %910 = extractvalue { float, float, float, float } %907, 2, !dbg !36
  %911 = extractvalue { float, float, float, float } %907, 3, !dbg !36
  %912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %753, float %754, float %755, float %756, i32 %472, i32 %473, i32 %474, i32 %475, i32 %622, i32 %623) #2, !dbg !36
  %913 = extractvalue { float, float, float, float } %912, 0, !dbg !36
  %914 = extractvalue { float, float, float, float } %912, 1, !dbg !36
  %915 = extractvalue { float, float, float, float } %912, 2, !dbg !36
  %916 = extractvalue { float, float, float, float } %912, 3, !dbg !36
  %917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %758, float %759, float %760, float %761, i32 %472, i32 %473, i32 %474, i32 %475, i32 %639, i32 %640) #2, !dbg !36
  %918 = extractvalue { float, float, float, float } %917, 0, !dbg !36
  %919 = extractvalue { float, float, float, float } %917, 1, !dbg !36
  %920 = extractvalue { float, float, float, float } %917, 2, !dbg !36
  %921 = extractvalue { float, float, float, float } %917, 3, !dbg !36
  %922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %763, float %764, float %765, float %766, i32 %472, i32 %473, i32 %474, i32 %475, i32 %655, i32 %656) #2, !dbg !36
  %923 = extractvalue { float, float, float, float } %922, 0, !dbg !36
  %924 = extractvalue { float, float, float, float } %922, 1, !dbg !36
  %925 = extractvalue { float, float, float, float } %922, 2, !dbg !36
  %926 = extractvalue { float, float, float, float } %922, 3, !dbg !36
  %927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %768, float %769, float %770, float %771, i32 %472, i32 %473, i32 %474, i32 %475, i32 %672, i32 %673) #2, !dbg !36
  %928 = extractvalue { float, float, float, float } %927, 0, !dbg !36
  %929 = extractvalue { float, float, float, float } %927, 1, !dbg !36
  %930 = extractvalue { float, float, float, float } %927, 2, !dbg !36
  %931 = extractvalue { float, float, float, float } %927, 3, !dbg !36
  %932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %773, float %774, float %775, float %776, i32 %472, i32 %473, i32 %474, i32 %475, i32 %688, i32 %689) #2, !dbg !36
  %933 = extractvalue { float, float, float, float } %932, 0, !dbg !36
  %934 = extractvalue { float, float, float, float } %932, 1, !dbg !36
  %935 = extractvalue { float, float, float, float } %932, 2, !dbg !36
  %936 = extractvalue { float, float, float, float } %932, 3, !dbg !36
  %937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %778, float %779, float %780, float %781, i32 %507, i32 %508, i32 %509, i32 %510, i32 %571, i32 %572) #2, !dbg !36
  %938 = extractvalue { float, float, float, float } %937, 0, !dbg !36
  %939 = extractvalue { float, float, float, float } %937, 1, !dbg !36
  %940 = extractvalue { float, float, float, float } %937, 2, !dbg !36
  %941 = extractvalue { float, float, float, float } %937, 3, !dbg !36
  %942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %783, float %784, float %785, float %786, i32 %507, i32 %508, i32 %509, i32 %510, i32 %589, i32 %590) #2, !dbg !36
  %943 = extractvalue { float, float, float, float } %942, 0, !dbg !36
  %944 = extractvalue { float, float, float, float } %942, 1, !dbg !36
  %945 = extractvalue { float, float, float, float } %942, 2, !dbg !36
  %946 = extractvalue { float, float, float, float } %942, 3, !dbg !36
  %947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %788, float %789, float %790, float %791, i32 %507, i32 %508, i32 %509, i32 %510, i32 %606, i32 %607) #2, !dbg !36
  %948 = extractvalue { float, float, float, float } %947, 0, !dbg !36
  %949 = extractvalue { float, float, float, float } %947, 1, !dbg !36
  %950 = extractvalue { float, float, float, float } %947, 2, !dbg !36
  %951 = extractvalue { float, float, float, float } %947, 3, !dbg !36
  %952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %793, float %794, float %795, float %796, i32 %507, i32 %508, i32 %509, i32 %510, i32 %622, i32 %623) #2, !dbg !36
  %953 = extractvalue { float, float, float, float } %952, 0, !dbg !36
  %954 = extractvalue { float, float, float, float } %952, 1, !dbg !36
  %955 = extractvalue { float, float, float, float } %952, 2, !dbg !36
  %956 = extractvalue { float, float, float, float } %952, 3, !dbg !36
  %957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %798, float %799, float %800, float %801, i32 %507, i32 %508, i32 %509, i32 %510, i32 %639, i32 %640) #2, !dbg !36
  %958 = extractvalue { float, float, float, float } %957, 0, !dbg !36
  %959 = extractvalue { float, float, float, float } %957, 1, !dbg !36
  %960 = extractvalue { float, float, float, float } %957, 2, !dbg !36
  %961 = extractvalue { float, float, float, float } %957, 3, !dbg !36
  %962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %803, float %804, float %805, float %806, i32 %507, i32 %508, i32 %509, i32 %510, i32 %655, i32 %656) #2, !dbg !36
  %963 = extractvalue { float, float, float, float } %962, 0, !dbg !36
  %964 = extractvalue { float, float, float, float } %962, 1, !dbg !36
  %965 = extractvalue { float, float, float, float } %962, 2, !dbg !36
  %966 = extractvalue { float, float, float, float } %962, 3, !dbg !36
  %967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %808, float %809, float %810, float %811, i32 %507, i32 %508, i32 %509, i32 %510, i32 %672, i32 %673) #2, !dbg !36
  %968 = extractvalue { float, float, float, float } %967, 0, !dbg !36
  %969 = extractvalue { float, float, float, float } %967, 1, !dbg !36
  %970 = extractvalue { float, float, float, float } %967, 2, !dbg !36
  %971 = extractvalue { float, float, float, float } %967, 3, !dbg !36
  %972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %813, float %814, float %815, float %816, i32 %507, i32 %508, i32 %509, i32 %510, i32 %688, i32 %689) #2, !dbg !36
  %973 = extractvalue { float, float, float, float } %972, 0, !dbg !36
  %974 = extractvalue { float, float, float, float } %972, 1, !dbg !36
  %975 = extractvalue { float, float, float, float } %972, 2, !dbg !36
  %976 = extractvalue { float, float, float, float } %972, 3, !dbg !36
  %977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %818, float %819, float %820, float %821, i32 %542, i32 %543, i32 %544, i32 %545, i32 %571, i32 %572) #2, !dbg !36
  %978 = extractvalue { float, float, float, float } %977, 0, !dbg !36
  %979 = extractvalue { float, float, float, float } %977, 1, !dbg !36
  %980 = extractvalue { float, float, float, float } %977, 2, !dbg !36
  %981 = extractvalue { float, float, float, float } %977, 3, !dbg !36
  %982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %823, float %824, float %825, float %826, i32 %542, i32 %543, i32 %544, i32 %545, i32 %589, i32 %590) #2, !dbg !36
  %983 = extractvalue { float, float, float, float } %982, 0, !dbg !36
  %984 = extractvalue { float, float, float, float } %982, 1, !dbg !36
  %985 = extractvalue { float, float, float, float } %982, 2, !dbg !36
  %986 = extractvalue { float, float, float, float } %982, 3, !dbg !36
  %987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %828, float %829, float %830, float %831, i32 %542, i32 %543, i32 %544, i32 %545, i32 %606, i32 %607) #2, !dbg !36
  %988 = extractvalue { float, float, float, float } %987, 0, !dbg !36
  %989 = extractvalue { float, float, float, float } %987, 1, !dbg !36
  %990 = extractvalue { float, float, float, float } %987, 2, !dbg !36
  %991 = extractvalue { float, float, float, float } %987, 3, !dbg !36
  %992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %833, float %834, float %835, float %836, i32 %542, i32 %543, i32 %544, i32 %545, i32 %622, i32 %623) #2, !dbg !36
  %993 = extractvalue { float, float, float, float } %992, 0, !dbg !36
  %994 = extractvalue { float, float, float, float } %992, 1, !dbg !36
  %995 = extractvalue { float, float, float, float } %992, 2, !dbg !36
  %996 = extractvalue { float, float, float, float } %992, 3, !dbg !36
  %997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %838, float %839, float %840, float %841, i32 %542, i32 %543, i32 %544, i32 %545, i32 %639, i32 %640) #2, !dbg !36
  %998 = extractvalue { float, float, float, float } %997, 0, !dbg !36
  %999 = extractvalue { float, float, float, float } %997, 1, !dbg !36
  %1000 = extractvalue { float, float, float, float } %997, 2, !dbg !36
  %1001 = extractvalue { float, float, float, float } %997, 3, !dbg !36
  %1002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %843, float %844, float %845, float %846, i32 %542, i32 %543, i32 %544, i32 %545, i32 %655, i32 %656) #2, !dbg !36
  %1003 = extractvalue { float, float, float, float } %1002, 0, !dbg !36
  %1004 = extractvalue { float, float, float, float } %1002, 1, !dbg !36
  %1005 = extractvalue { float, float, float, float } %1002, 2, !dbg !36
  %1006 = extractvalue { float, float, float, float } %1002, 3, !dbg !36
  %1007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %848, float %849, float %850, float %851, i32 %542, i32 %543, i32 %544, i32 %545, i32 %672, i32 %673) #2, !dbg !36
  %1008 = extractvalue { float, float, float, float } %1007, 0, !dbg !36
  %1009 = extractvalue { float, float, float, float } %1007, 1, !dbg !36
  %1010 = extractvalue { float, float, float, float } %1007, 2, !dbg !36
  %1011 = extractvalue { float, float, float, float } %1007, 3, !dbg !36
  %1012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %853, float %854, float %855, float %856, i32 %542, i32 %543, i32 %544, i32 %545, i32 %688, i32 %689) #2, !dbg !36
  %1013 = extractvalue { float, float, float, float } %1012, 0, !dbg !36
  %1014 = extractvalue { float, float, float, float } %1012, 1, !dbg !36
  %1015 = extractvalue { float, float, float, float } %1012, 2, !dbg !36
  %1016 = extractvalue { float, float, float, float } %1012, 3, !dbg !36
  %1017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %858, float %859, float %860, float %861, i32 %441, i32 %442, i32 %443, i32 %444, i32 %578, i32 %579) #2, !dbg !36
  %1018 = extractvalue { float, float, float, float } %1017, 0, !dbg !36
  %1019 = extractvalue { float, float, float, float } %1017, 1, !dbg !36
  %1020 = extractvalue { float, float, float, float } %1017, 2, !dbg !36
  %1021 = extractvalue { float, float, float, float } %1017, 3, !dbg !36
  %1022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %863, float %864, float %865, float %866, i32 %441, i32 %442, i32 %443, i32 %444, i32 %594, i32 %595) #2, !dbg !36
  %1023 = extractvalue { float, float, float, float } %1022, 0, !dbg !36
  %1024 = extractvalue { float, float, float, float } %1022, 1, !dbg !36
  %1025 = extractvalue { float, float, float, float } %1022, 2, !dbg !36
  %1026 = extractvalue { float, float, float, float } %1022, 3, !dbg !36
  %1027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %868, float %869, float %870, float %871, i32 %441, i32 %442, i32 %443, i32 %444, i32 %611, i32 %612) #2, !dbg !36
  %1028 = extractvalue { float, float, float, float } %1027, 0, !dbg !36
  %1029 = extractvalue { float, float, float, float } %1027, 1, !dbg !36
  %1030 = extractvalue { float, float, float, float } %1027, 2, !dbg !36
  %1031 = extractvalue { float, float, float, float } %1027, 3, !dbg !36
  %1032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %873, float %874, float %875, float %876, i32 %441, i32 %442, i32 %443, i32 %444, i32 %627, i32 %628) #2, !dbg !36
  %1033 = extractvalue { float, float, float, float } %1032, 0, !dbg !36
  %1034 = extractvalue { float, float, float, float } %1032, 1, !dbg !36
  %1035 = extractvalue { float, float, float, float } %1032, 2, !dbg !36
  %1036 = extractvalue { float, float, float, float } %1032, 3, !dbg !36
  %1037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %878, float %879, float %880, float %881, i32 %441, i32 %442, i32 %443, i32 %444, i32 %644, i32 %645) #2, !dbg !36
  %1038 = extractvalue { float, float, float, float } %1037, 0, !dbg !36
  %1039 = extractvalue { float, float, float, float } %1037, 1, !dbg !36
  %1040 = extractvalue { float, float, float, float } %1037, 2, !dbg !36
  %1041 = extractvalue { float, float, float, float } %1037, 3, !dbg !36
  %1042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %883, float %884, float %885, float %886, i32 %441, i32 %442, i32 %443, i32 %444, i32 %660, i32 %661) #2, !dbg !36
  %1043 = extractvalue { float, float, float, float } %1042, 0, !dbg !36
  %1044 = extractvalue { float, float, float, float } %1042, 1, !dbg !36
  %1045 = extractvalue { float, float, float, float } %1042, 2, !dbg !36
  %1046 = extractvalue { float, float, float, float } %1042, 3, !dbg !36
  %1047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %888, float %889, float %890, float %891, i32 %441, i32 %442, i32 %443, i32 %444, i32 %677, i32 %678) #2, !dbg !36
  %1048 = extractvalue { float, float, float, float } %1047, 0, !dbg !36
  %1049 = extractvalue { float, float, float, float } %1047, 1, !dbg !36
  %1050 = extractvalue { float, float, float, float } %1047, 2, !dbg !36
  %1051 = extractvalue { float, float, float, float } %1047, 3, !dbg !36
  %1052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %893, float %894, float %895, float %896, i32 %441, i32 %442, i32 %443, i32 %444, i32 %693, i32 %694) #2, !dbg !36
  %1053 = extractvalue { float, float, float, float } %1052, 0, !dbg !36
  %1054 = extractvalue { float, float, float, float } %1052, 1, !dbg !36
  %1055 = extractvalue { float, float, float, float } %1052, 2, !dbg !36
  %1056 = extractvalue { float, float, float, float } %1052, 3, !dbg !36
  %1057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %898, float %899, float %900, float %901, i32 %480, i32 %481, i32 %482, i32 %483, i32 %578, i32 %579) #2, !dbg !36
  %1058 = extractvalue { float, float, float, float } %1057, 0, !dbg !36
  %1059 = extractvalue { float, float, float, float } %1057, 1, !dbg !36
  %1060 = extractvalue { float, float, float, float } %1057, 2, !dbg !36
  %1061 = extractvalue { float, float, float, float } %1057, 3, !dbg !36
  %1062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %903, float %904, float %905, float %906, i32 %480, i32 %481, i32 %482, i32 %483, i32 %594, i32 %595) #2, !dbg !36
  %1063 = extractvalue { float, float, float, float } %1062, 0, !dbg !36
  %1064 = extractvalue { float, float, float, float } %1062, 1, !dbg !36
  %1065 = extractvalue { float, float, float, float } %1062, 2, !dbg !36
  %1066 = extractvalue { float, float, float, float } %1062, 3, !dbg !36
  %1067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %908, float %909, float %910, float %911, i32 %480, i32 %481, i32 %482, i32 %483, i32 %611, i32 %612) #2, !dbg !36
  %1068 = extractvalue { float, float, float, float } %1067, 0, !dbg !36
  %1069 = extractvalue { float, float, float, float } %1067, 1, !dbg !36
  %1070 = extractvalue { float, float, float, float } %1067, 2, !dbg !36
  %1071 = extractvalue { float, float, float, float } %1067, 3, !dbg !36
  %1072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %913, float %914, float %915, float %916, i32 %480, i32 %481, i32 %482, i32 %483, i32 %627, i32 %628) #2, !dbg !36
  %1073 = extractvalue { float, float, float, float } %1072, 0, !dbg !36
  %1074 = extractvalue { float, float, float, float } %1072, 1, !dbg !36
  %1075 = extractvalue { float, float, float, float } %1072, 2, !dbg !36
  %1076 = extractvalue { float, float, float, float } %1072, 3, !dbg !36
  %1077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %918, float %919, float %920, float %921, i32 %480, i32 %481, i32 %482, i32 %483, i32 %644, i32 %645) #2, !dbg !36
  %1078 = extractvalue { float, float, float, float } %1077, 0, !dbg !36
  %1079 = extractvalue { float, float, float, float } %1077, 1, !dbg !36
  %1080 = extractvalue { float, float, float, float } %1077, 2, !dbg !36
  %1081 = extractvalue { float, float, float, float } %1077, 3, !dbg !36
  %1082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %923, float %924, float %925, float %926, i32 %480, i32 %481, i32 %482, i32 %483, i32 %660, i32 %661) #2, !dbg !36
  %1083 = extractvalue { float, float, float, float } %1082, 0, !dbg !36
  %1084 = extractvalue { float, float, float, float } %1082, 1, !dbg !36
  %1085 = extractvalue { float, float, float, float } %1082, 2, !dbg !36
  %1086 = extractvalue { float, float, float, float } %1082, 3, !dbg !36
  %1087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %928, float %929, float %930, float %931, i32 %480, i32 %481, i32 %482, i32 %483, i32 %677, i32 %678) #2, !dbg !36
  %1088 = extractvalue { float, float, float, float } %1087, 0, !dbg !36
  %1089 = extractvalue { float, float, float, float } %1087, 1, !dbg !36
  %1090 = extractvalue { float, float, float, float } %1087, 2, !dbg !36
  %1091 = extractvalue { float, float, float, float } %1087, 3, !dbg !36
  %1092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %933, float %934, float %935, float %936, i32 %480, i32 %481, i32 %482, i32 %483, i32 %693, i32 %694) #2, !dbg !36
  %1093 = extractvalue { float, float, float, float } %1092, 0, !dbg !36
  %1094 = extractvalue { float, float, float, float } %1092, 1, !dbg !36
  %1095 = extractvalue { float, float, float, float } %1092, 2, !dbg !36
  %1096 = extractvalue { float, float, float, float } %1092, 3, !dbg !36
  %1097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %938, float %939, float %940, float %941, i32 %515, i32 %516, i32 %517, i32 %518, i32 %578, i32 %579) #2, !dbg !36
  %1098 = extractvalue { float, float, float, float } %1097, 0, !dbg !36
  %1099 = extractvalue { float, float, float, float } %1097, 1, !dbg !36
  %1100 = extractvalue { float, float, float, float } %1097, 2, !dbg !36
  %1101 = extractvalue { float, float, float, float } %1097, 3, !dbg !36
  %1102 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %943, float %944, float %945, float %946, i32 %515, i32 %516, i32 %517, i32 %518, i32 %594, i32 %595) #2, !dbg !36
  %1103 = extractvalue { float, float, float, float } %1102, 0, !dbg !36
  %1104 = extractvalue { float, float, float, float } %1102, 1, !dbg !36
  %1105 = extractvalue { float, float, float, float } %1102, 2, !dbg !36
  %1106 = extractvalue { float, float, float, float } %1102, 3, !dbg !36
  %1107 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %948, float %949, float %950, float %951, i32 %515, i32 %516, i32 %517, i32 %518, i32 %611, i32 %612) #2, !dbg !36
  %1108 = extractvalue { float, float, float, float } %1107, 0, !dbg !36
  %1109 = extractvalue { float, float, float, float } %1107, 1, !dbg !36
  %1110 = extractvalue { float, float, float, float } %1107, 2, !dbg !36
  %1111 = extractvalue { float, float, float, float } %1107, 3, !dbg !36
  %1112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %953, float %954, float %955, float %956, i32 %515, i32 %516, i32 %517, i32 %518, i32 %627, i32 %628) #2, !dbg !36
  %1113 = extractvalue { float, float, float, float } %1112, 0, !dbg !36
  %1114 = extractvalue { float, float, float, float } %1112, 1, !dbg !36
  %1115 = extractvalue { float, float, float, float } %1112, 2, !dbg !36
  %1116 = extractvalue { float, float, float, float } %1112, 3, !dbg !36
  %1117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %958, float %959, float %960, float %961, i32 %515, i32 %516, i32 %517, i32 %518, i32 %644, i32 %645) #2, !dbg !36
  %1118 = extractvalue { float, float, float, float } %1117, 0, !dbg !36
  %1119 = extractvalue { float, float, float, float } %1117, 1, !dbg !36
  %1120 = extractvalue { float, float, float, float } %1117, 2, !dbg !36
  %1121 = extractvalue { float, float, float, float } %1117, 3, !dbg !36
  %1122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %963, float %964, float %965, float %966, i32 %515, i32 %516, i32 %517, i32 %518, i32 %660, i32 %661) #2, !dbg !36
  %1123 = extractvalue { float, float, float, float } %1122, 0, !dbg !36
  %1124 = extractvalue { float, float, float, float } %1122, 1, !dbg !36
  %1125 = extractvalue { float, float, float, float } %1122, 2, !dbg !36
  %1126 = extractvalue { float, float, float, float } %1122, 3, !dbg !36
  %1127 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %968, float %969, float %970, float %971, i32 %515, i32 %516, i32 %517, i32 %518, i32 %677, i32 %678) #2, !dbg !36
  %1128 = extractvalue { float, float, float, float } %1127, 0, !dbg !36
  %1129 = extractvalue { float, float, float, float } %1127, 1, !dbg !36
  %1130 = extractvalue { float, float, float, float } %1127, 2, !dbg !36
  %1131 = extractvalue { float, float, float, float } %1127, 3, !dbg !36
  %1132 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %973, float %974, float %975, float %976, i32 %515, i32 %516, i32 %517, i32 %518, i32 %693, i32 %694) #2, !dbg !36
  %1133 = extractvalue { float, float, float, float } %1132, 0, !dbg !36
  %1134 = extractvalue { float, float, float, float } %1132, 1, !dbg !36
  %1135 = extractvalue { float, float, float, float } %1132, 2, !dbg !36
  %1136 = extractvalue { float, float, float, float } %1132, 3, !dbg !36
  %1137 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %978, float %979, float %980, float %981, i32 %550, i32 %551, i32 %552, i32 %553, i32 %578, i32 %579) #2, !dbg !36
  %1138 = extractvalue { float, float, float, float } %1137, 0, !dbg !36
  %1139 = extractvalue { float, float, float, float } %1137, 1, !dbg !36
  %1140 = extractvalue { float, float, float, float } %1137, 2, !dbg !36
  %1141 = extractvalue { float, float, float, float } %1137, 3, !dbg !36
  %1142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %983, float %984, float %985, float %986, i32 %550, i32 %551, i32 %552, i32 %553, i32 %594, i32 %595) #2, !dbg !36
  %1143 = extractvalue { float, float, float, float } %1142, 0, !dbg !36
  %1144 = extractvalue { float, float, float, float } %1142, 1, !dbg !36
  %1145 = extractvalue { float, float, float, float } %1142, 2, !dbg !36
  %1146 = extractvalue { float, float, float, float } %1142, 3, !dbg !36
  %1147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %988, float %989, float %990, float %991, i32 %550, i32 %551, i32 %552, i32 %553, i32 %611, i32 %612) #2, !dbg !36
  %1148 = extractvalue { float, float, float, float } %1147, 0, !dbg !36
  %1149 = extractvalue { float, float, float, float } %1147, 1, !dbg !36
  %1150 = extractvalue { float, float, float, float } %1147, 2, !dbg !36
  %1151 = extractvalue { float, float, float, float } %1147, 3, !dbg !36
  %1152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %993, float %994, float %995, float %996, i32 %550, i32 %551, i32 %552, i32 %553, i32 %627, i32 %628) #2, !dbg !36
  %1153 = extractvalue { float, float, float, float } %1152, 0, !dbg !36
  %1154 = extractvalue { float, float, float, float } %1152, 1, !dbg !36
  %1155 = extractvalue { float, float, float, float } %1152, 2, !dbg !36
  %1156 = extractvalue { float, float, float, float } %1152, 3, !dbg !36
  %1157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %998, float %999, float %1000, float %1001, i32 %550, i32 %551, i32 %552, i32 %553, i32 %644, i32 %645) #2, !dbg !36
  %1158 = extractvalue { float, float, float, float } %1157, 0, !dbg !36
  %1159 = extractvalue { float, float, float, float } %1157, 1, !dbg !36
  %1160 = extractvalue { float, float, float, float } %1157, 2, !dbg !36
  %1161 = extractvalue { float, float, float, float } %1157, 3, !dbg !36
  %1162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1003, float %1004, float %1005, float %1006, i32 %550, i32 %551, i32 %552, i32 %553, i32 %660, i32 %661) #2, !dbg !36
  %1163 = extractvalue { float, float, float, float } %1162, 0, !dbg !36
  %1164 = extractvalue { float, float, float, float } %1162, 1, !dbg !36
  %1165 = extractvalue { float, float, float, float } %1162, 2, !dbg !36
  %1166 = extractvalue { float, float, float, float } %1162, 3, !dbg !36
  %1167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1008, float %1009, float %1010, float %1011, i32 %550, i32 %551, i32 %552, i32 %553, i32 %677, i32 %678) #2, !dbg !36
  %1168 = extractvalue { float, float, float, float } %1167, 0, !dbg !36
  %1169 = extractvalue { float, float, float, float } %1167, 1, !dbg !36
  %1170 = extractvalue { float, float, float, float } %1167, 2, !dbg !36
  %1171 = extractvalue { float, float, float, float } %1167, 3, !dbg !36
  %1172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1013, float %1014, float %1015, float %1016, i32 %550, i32 %551, i32 %552, i32 %553, i32 %693, i32 %694) #2, !dbg !36
  %1173 = extractvalue { float, float, float, float } %1172, 0, !dbg !36
  %1174 = extractvalue { float, float, float, float } %1172, 1, !dbg !36
  %1175 = extractvalue { float, float, float, float } %1172, 2, !dbg !36
  %1176 = extractvalue { float, float, float, float } %1172, 3, !dbg !36
  %1177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1018, float %1019, float %1020, float %1021, i32 %452, i32 %453, i32 %454, i32 %455, i32 %580, i32 %581) #2, !dbg !36
  %1178 = extractvalue { float, float, float, float } %1177, 0, !dbg !36
  %1179 = extractvalue { float, float, float, float } %1177, 1, !dbg !36
  %1180 = extractvalue { float, float, float, float } %1177, 2, !dbg !36
  %1181 = extractvalue { float, float, float, float } %1177, 3, !dbg !36
  %1182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1023, float %1024, float %1025, float %1026, i32 %452, i32 %453, i32 %454, i32 %455, i32 %596, i32 %597) #2, !dbg !36
  %1183 = extractvalue { float, float, float, float } %1182, 0, !dbg !36
  %1184 = extractvalue { float, float, float, float } %1182, 1, !dbg !36
  %1185 = extractvalue { float, float, float, float } %1182, 2, !dbg !36
  %1186 = extractvalue { float, float, float, float } %1182, 3, !dbg !36
  %1187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1028, float %1029, float %1030, float %1031, i32 %452, i32 %453, i32 %454, i32 %455, i32 %613, i32 %614) #2, !dbg !36
  %1188 = extractvalue { float, float, float, float } %1187, 0, !dbg !36
  %1189 = extractvalue { float, float, float, float } %1187, 1, !dbg !36
  %1190 = extractvalue { float, float, float, float } %1187, 2, !dbg !36
  %1191 = extractvalue { float, float, float, float } %1187, 3, !dbg !36
  %1192 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1033, float %1034, float %1035, float %1036, i32 %452, i32 %453, i32 %454, i32 %455, i32 %629, i32 %630) #2, !dbg !36
  %1193 = extractvalue { float, float, float, float } %1192, 0, !dbg !36
  %1194 = extractvalue { float, float, float, float } %1192, 1, !dbg !36
  %1195 = extractvalue { float, float, float, float } %1192, 2, !dbg !36
  %1196 = extractvalue { float, float, float, float } %1192, 3, !dbg !36
  %1197 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1038, float %1039, float %1040, float %1041, i32 %452, i32 %453, i32 %454, i32 %455, i32 %646, i32 %647) #2, !dbg !36
  %1198 = extractvalue { float, float, float, float } %1197, 0, !dbg !36
  %1199 = extractvalue { float, float, float, float } %1197, 1, !dbg !36
  %1200 = extractvalue { float, float, float, float } %1197, 2, !dbg !36
  %1201 = extractvalue { float, float, float, float } %1197, 3, !dbg !36
  %1202 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1043, float %1044, float %1045, float %1046, i32 %452, i32 %453, i32 %454, i32 %455, i32 %662, i32 %663) #2, !dbg !36
  %1203 = extractvalue { float, float, float, float } %1202, 0, !dbg !36
  %1204 = extractvalue { float, float, float, float } %1202, 1, !dbg !36
  %1205 = extractvalue { float, float, float, float } %1202, 2, !dbg !36
  %1206 = extractvalue { float, float, float, float } %1202, 3, !dbg !36
  %1207 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1048, float %1049, float %1050, float %1051, i32 %452, i32 %453, i32 %454, i32 %455, i32 %679, i32 %680) #2, !dbg !36
  %1208 = extractvalue { float, float, float, float } %1207, 0, !dbg !36
  %1209 = extractvalue { float, float, float, float } %1207, 1, !dbg !36
  %1210 = extractvalue { float, float, float, float } %1207, 2, !dbg !36
  %1211 = extractvalue { float, float, float, float } %1207, 3, !dbg !36
  %1212 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1053, float %1054, float %1055, float %1056, i32 %452, i32 %453, i32 %454, i32 %455, i32 %695, i32 %696) #2, !dbg !36
  %1213 = extractvalue { float, float, float, float } %1212, 0, !dbg !36
  %1214 = extractvalue { float, float, float, float } %1212, 1, !dbg !36
  %1215 = extractvalue { float, float, float, float } %1212, 2, !dbg !36
  %1216 = extractvalue { float, float, float, float } %1212, 3, !dbg !36
  %1217 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1058, float %1059, float %1060, float %1061, i32 %488, i32 %489, i32 %490, i32 %491, i32 %580, i32 %581) #2, !dbg !36
  %1218 = extractvalue { float, float, float, float } %1217, 0, !dbg !36
  %1219 = extractvalue { float, float, float, float } %1217, 1, !dbg !36
  %1220 = extractvalue { float, float, float, float } %1217, 2, !dbg !36
  %1221 = extractvalue { float, float, float, float } %1217, 3, !dbg !36
  %1222 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1063, float %1064, float %1065, float %1066, i32 %488, i32 %489, i32 %490, i32 %491, i32 %596, i32 %597) #2, !dbg !36
  %1223 = extractvalue { float, float, float, float } %1222, 0, !dbg !36
  %1224 = extractvalue { float, float, float, float } %1222, 1, !dbg !36
  %1225 = extractvalue { float, float, float, float } %1222, 2, !dbg !36
  %1226 = extractvalue { float, float, float, float } %1222, 3, !dbg !36
  %1227 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1068, float %1069, float %1070, float %1071, i32 %488, i32 %489, i32 %490, i32 %491, i32 %613, i32 %614) #2, !dbg !36
  %1228 = extractvalue { float, float, float, float } %1227, 0, !dbg !36
  %1229 = extractvalue { float, float, float, float } %1227, 1, !dbg !36
  %1230 = extractvalue { float, float, float, float } %1227, 2, !dbg !36
  %1231 = extractvalue { float, float, float, float } %1227, 3, !dbg !36
  %1232 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1073, float %1074, float %1075, float %1076, i32 %488, i32 %489, i32 %490, i32 %491, i32 %629, i32 %630) #2, !dbg !36
  %1233 = extractvalue { float, float, float, float } %1232, 0, !dbg !36
  %1234 = extractvalue { float, float, float, float } %1232, 1, !dbg !36
  %1235 = extractvalue { float, float, float, float } %1232, 2, !dbg !36
  %1236 = extractvalue { float, float, float, float } %1232, 3, !dbg !36
  %1237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1078, float %1079, float %1080, float %1081, i32 %488, i32 %489, i32 %490, i32 %491, i32 %646, i32 %647) #2, !dbg !36
  %1238 = extractvalue { float, float, float, float } %1237, 0, !dbg !36
  %1239 = extractvalue { float, float, float, float } %1237, 1, !dbg !36
  %1240 = extractvalue { float, float, float, float } %1237, 2, !dbg !36
  %1241 = extractvalue { float, float, float, float } %1237, 3, !dbg !36
  %1242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1083, float %1084, float %1085, float %1086, i32 %488, i32 %489, i32 %490, i32 %491, i32 %662, i32 %663) #2, !dbg !36
  %1243 = extractvalue { float, float, float, float } %1242, 0, !dbg !36
  %1244 = extractvalue { float, float, float, float } %1242, 1, !dbg !36
  %1245 = extractvalue { float, float, float, float } %1242, 2, !dbg !36
  %1246 = extractvalue { float, float, float, float } %1242, 3, !dbg !36
  %1247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1088, float %1089, float %1090, float %1091, i32 %488, i32 %489, i32 %490, i32 %491, i32 %679, i32 %680) #2, !dbg !36
  %1248 = extractvalue { float, float, float, float } %1247, 0, !dbg !36
  %1249 = extractvalue { float, float, float, float } %1247, 1, !dbg !36
  %1250 = extractvalue { float, float, float, float } %1247, 2, !dbg !36
  %1251 = extractvalue { float, float, float, float } %1247, 3, !dbg !36
  %1252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1093, float %1094, float %1095, float %1096, i32 %488, i32 %489, i32 %490, i32 %491, i32 %695, i32 %696) #2, !dbg !36
  %1253 = extractvalue { float, float, float, float } %1252, 0, !dbg !36
  %1254 = extractvalue { float, float, float, float } %1252, 1, !dbg !36
  %1255 = extractvalue { float, float, float, float } %1252, 2, !dbg !36
  %1256 = extractvalue { float, float, float, float } %1252, 3, !dbg !36
  %1257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1098, float %1099, float %1100, float %1101, i32 %523, i32 %524, i32 %525, i32 %526, i32 %580, i32 %581) #2, !dbg !36
  %1258 = extractvalue { float, float, float, float } %1257, 0, !dbg !36
  %1259 = extractvalue { float, float, float, float } %1257, 1, !dbg !36
  %1260 = extractvalue { float, float, float, float } %1257, 2, !dbg !36
  %1261 = extractvalue { float, float, float, float } %1257, 3, !dbg !36
  %1262 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1103, float %1104, float %1105, float %1106, i32 %523, i32 %524, i32 %525, i32 %526, i32 %596, i32 %597) #2, !dbg !36
  %1263 = extractvalue { float, float, float, float } %1262, 0, !dbg !36
  %1264 = extractvalue { float, float, float, float } %1262, 1, !dbg !36
  %1265 = extractvalue { float, float, float, float } %1262, 2, !dbg !36
  %1266 = extractvalue { float, float, float, float } %1262, 3, !dbg !36
  %1267 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1108, float %1109, float %1110, float %1111, i32 %523, i32 %524, i32 %525, i32 %526, i32 %613, i32 %614) #2, !dbg !36
  %1268 = extractvalue { float, float, float, float } %1267, 0, !dbg !36
  %1269 = extractvalue { float, float, float, float } %1267, 1, !dbg !36
  %1270 = extractvalue { float, float, float, float } %1267, 2, !dbg !36
  %1271 = extractvalue { float, float, float, float } %1267, 3, !dbg !36
  %1272 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1113, float %1114, float %1115, float %1116, i32 %523, i32 %524, i32 %525, i32 %526, i32 %629, i32 %630) #2, !dbg !36
  %1273 = extractvalue { float, float, float, float } %1272, 0, !dbg !36
  %1274 = extractvalue { float, float, float, float } %1272, 1, !dbg !36
  %1275 = extractvalue { float, float, float, float } %1272, 2, !dbg !36
  %1276 = extractvalue { float, float, float, float } %1272, 3, !dbg !36
  %1277 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1118, float %1119, float %1120, float %1121, i32 %523, i32 %524, i32 %525, i32 %526, i32 %646, i32 %647) #2, !dbg !36
  %1278 = extractvalue { float, float, float, float } %1277, 0, !dbg !36
  %1279 = extractvalue { float, float, float, float } %1277, 1, !dbg !36
  %1280 = extractvalue { float, float, float, float } %1277, 2, !dbg !36
  %1281 = extractvalue { float, float, float, float } %1277, 3, !dbg !36
  %1282 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1123, float %1124, float %1125, float %1126, i32 %523, i32 %524, i32 %525, i32 %526, i32 %662, i32 %663) #2, !dbg !36
  %1283 = extractvalue { float, float, float, float } %1282, 0, !dbg !36
  %1284 = extractvalue { float, float, float, float } %1282, 1, !dbg !36
  %1285 = extractvalue { float, float, float, float } %1282, 2, !dbg !36
  %1286 = extractvalue { float, float, float, float } %1282, 3, !dbg !36
  %1287 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1128, float %1129, float %1130, float %1131, i32 %523, i32 %524, i32 %525, i32 %526, i32 %679, i32 %680) #2, !dbg !36
  %1288 = extractvalue { float, float, float, float } %1287, 0, !dbg !36
  %1289 = extractvalue { float, float, float, float } %1287, 1, !dbg !36
  %1290 = extractvalue { float, float, float, float } %1287, 2, !dbg !36
  %1291 = extractvalue { float, float, float, float } %1287, 3, !dbg !36
  %1292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1133, float %1134, float %1135, float %1136, i32 %523, i32 %524, i32 %525, i32 %526, i32 %695, i32 %696) #2, !dbg !36
  %1293 = extractvalue { float, float, float, float } %1292, 0, !dbg !36
  %1294 = extractvalue { float, float, float, float } %1292, 1, !dbg !36
  %1295 = extractvalue { float, float, float, float } %1292, 2, !dbg !36
  %1296 = extractvalue { float, float, float, float } %1292, 3, !dbg !36
  %1297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1138, float %1139, float %1140, float %1141, i32 %558, i32 %559, i32 %560, i32 %561, i32 %580, i32 %581) #2, !dbg !36
  %1298 = extractvalue { float, float, float, float } %1297, 0, !dbg !36
  %1299 = extractvalue { float, float, float, float } %1297, 1, !dbg !36
  %1300 = extractvalue { float, float, float, float } %1297, 2, !dbg !36
  %1301 = extractvalue { float, float, float, float } %1297, 3, !dbg !36
  %1302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1143, float %1144, float %1145, float %1146, i32 %558, i32 %559, i32 %560, i32 %561, i32 %596, i32 %597) #2, !dbg !36
  %1303 = extractvalue { float, float, float, float } %1302, 0, !dbg !36
  %1304 = extractvalue { float, float, float, float } %1302, 1, !dbg !36
  %1305 = extractvalue { float, float, float, float } %1302, 2, !dbg !36
  %1306 = extractvalue { float, float, float, float } %1302, 3, !dbg !36
  %1307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1148, float %1149, float %1150, float %1151, i32 %558, i32 %559, i32 %560, i32 %561, i32 %613, i32 %614) #2, !dbg !36
  %1308 = extractvalue { float, float, float, float } %1307, 0, !dbg !36
  %1309 = extractvalue { float, float, float, float } %1307, 1, !dbg !36
  %1310 = extractvalue { float, float, float, float } %1307, 2, !dbg !36
  %1311 = extractvalue { float, float, float, float } %1307, 3, !dbg !36
  %1312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1153, float %1154, float %1155, float %1156, i32 %558, i32 %559, i32 %560, i32 %561, i32 %629, i32 %630) #2, !dbg !36
  %1313 = extractvalue { float, float, float, float } %1312, 0, !dbg !36
  %1314 = extractvalue { float, float, float, float } %1312, 1, !dbg !36
  %1315 = extractvalue { float, float, float, float } %1312, 2, !dbg !36
  %1316 = extractvalue { float, float, float, float } %1312, 3, !dbg !36
  %1317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1158, float %1159, float %1160, float %1161, i32 %558, i32 %559, i32 %560, i32 %561, i32 %646, i32 %647) #2, !dbg !36
  %1318 = extractvalue { float, float, float, float } %1317, 0, !dbg !36
  %1319 = extractvalue { float, float, float, float } %1317, 1, !dbg !36
  %1320 = extractvalue { float, float, float, float } %1317, 2, !dbg !36
  %1321 = extractvalue { float, float, float, float } %1317, 3, !dbg !36
  %1322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1163, float %1164, float %1165, float %1166, i32 %558, i32 %559, i32 %560, i32 %561, i32 %662, i32 %663) #2, !dbg !36
  %1323 = extractvalue { float, float, float, float } %1322, 0, !dbg !36
  %1324 = extractvalue { float, float, float, float } %1322, 1, !dbg !36
  %1325 = extractvalue { float, float, float, float } %1322, 2, !dbg !36
  %1326 = extractvalue { float, float, float, float } %1322, 3, !dbg !36
  %1327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1168, float %1169, float %1170, float %1171, i32 %558, i32 %559, i32 %560, i32 %561, i32 %679, i32 %680) #2, !dbg !36
  %1328 = extractvalue { float, float, float, float } %1327, 0, !dbg !36
  %1329 = extractvalue { float, float, float, float } %1327, 1, !dbg !36
  %1330 = extractvalue { float, float, float, float } %1327, 2, !dbg !36
  %1331 = extractvalue { float, float, float, float } %1327, 3, !dbg !36
  %1332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1173, float %1174, float %1175, float %1176, i32 %558, i32 %559, i32 %560, i32 %561, i32 %695, i32 %696) #2, !dbg !36
  %1333 = extractvalue { float, float, float, float } %1332, 0, !dbg !36
  %1334 = extractvalue { float, float, float, float } %1332, 1, !dbg !36
  %1335 = extractvalue { float, float, float, float } %1332, 2, !dbg !36
  %1336 = extractvalue { float, float, float, float } %1332, 3, !dbg !36
  %1337 = icmp slt i32 %45, 512, !dbg !37
  %1338 = icmp slt i32 %46, 512, !dbg !37
  %1339 = icmp slt i32 %47, 512, !dbg !37
  %1340 = icmp slt i32 %48, 512, !dbg !37
  %1341 = icmp slt i32 %49, 512, !dbg !37
  %1342 = icmp slt i32 %50, 512, !dbg !37
  %1343 = icmp slt i32 %51, 512, !dbg !37
  %1344 = icmp slt i32 %52, 512, !dbg !37
  %1345 = icmp slt i32 %53, 512, !dbg !37
  %1346 = icmp slt i32 %54, 512, !dbg !37
  %1347 = icmp slt i32 %55, 512, !dbg !37
  %1348 = icmp slt i32 %56, 512, !dbg !37
  %1349 = icmp slt i32 %57, 512, !dbg !37
  %1350 = icmp slt i32 %58, 512, !dbg !37
  %1351 = icmp slt i32 %59, 512, !dbg !37
  %1352 = icmp slt i32 %60, 512, !dbg !37
  %1353 = icmp slt i32 %70, 512, !dbg !38
  %1354 = and i1 %1337, %1353, !dbg !39
  %1355 = and i1 %1338, %1353, !dbg !39
  %1356 = and i1 %1339, %1353, !dbg !39
  %1357 = and i1 %1340, %1353, !dbg !39
  %1358 = and i1 %1341, %1353, !dbg !39
  %1359 = and i1 %1342, %1353, !dbg !39
  %1360 = and i1 %1343, %1353, !dbg !39
  %1361 = and i1 %1344, %1353, !dbg !39
  %1362 = and i1 %1345, %1353, !dbg !39
  %1363 = and i1 %1346, %1353, !dbg !39
  %1364 = and i1 %1347, %1353, !dbg !39
  %1365 = and i1 %1348, %1353, !dbg !39
  %1366 = and i1 %1349, %1353, !dbg !39
  %1367 = and i1 %1350, %1353, !dbg !39
  %1368 = and i1 %1351, %1353, !dbg !39
  %1369 = and i1 %1352, %1353, !dbg !39
  %1370 = shl i32 %45, 9, !dbg !40
  %1371 = shl i32 %46, 9, !dbg !40
  %1372 = shl i32 %47, 9, !dbg !40
  %1373 = shl i32 %48, 9, !dbg !40
  %1374 = shl i32 %49, 9, !dbg !40
  %1375 = shl i32 %50, 9, !dbg !40
  %1376 = shl i32 %51, 9, !dbg !40
  %1377 = shl i32 %52, 9, !dbg !40
  %1378 = shl i32 %53, 9, !dbg !40
  %1379 = shl i32 %54, 9, !dbg !40
  %1380 = shl i32 %55, 9, !dbg !40
  %1381 = shl i32 %56, 9, !dbg !40
  %1382 = shl i32 %57, 9, !dbg !40
  %1383 = shl i32 %58, 9, !dbg !40
  %1384 = shl i32 %59, 9, !dbg !40
  %1385 = shl i32 %60, 9, !dbg !40
  %1386 = shl i32 %87, 18, !dbg !41
  %1387 = add i32 %70, %1386, !dbg !42
  %1388 = add i32 %1387, %1370, !dbg !43
  %1389 = add i32 %1371, %1386, !dbg !42
  %1390 = add i32 %1389, %70, !dbg !43
  %1391 = add i32 %1372, %1386, !dbg !42
  %1392 = add i32 %1391, %70, !dbg !43
  %1393 = add i32 %1373, %1386, !dbg !42
  %1394 = add i32 %1393, %70, !dbg !43
  %1395 = add i32 %1374, %1386, !dbg !42
  %1396 = add i32 %1395, %70, !dbg !43
  %1397 = add i32 %1375, %1386, !dbg !42
  %1398 = add i32 %1397, %70, !dbg !43
  %1399 = add i32 %1376, %1386, !dbg !42
  %1400 = add i32 %1399, %70, !dbg !43
  %1401 = add i32 %1377, %1386, !dbg !42
  %1402 = add i32 %1401, %70, !dbg !43
  %1403 = add i32 %1378, %1386, !dbg !42
  %1404 = add i32 %1403, %70, !dbg !43
  %1405 = add i32 %1379, %1386, !dbg !42
  %1406 = add i32 %1405, %70, !dbg !43
  %1407 = add i32 %1380, %1386, !dbg !42
  %1408 = add i32 %1407, %70, !dbg !43
  %1409 = add i32 %1381, %1386, !dbg !42
  %1410 = add i32 %1409, %70, !dbg !43
  %1411 = add i32 %1382, %1386, !dbg !42
  %1412 = add i32 %1411, %70, !dbg !43
  %1413 = add i32 %1383, %1386, !dbg !42
  %1414 = add i32 %1413, %70, !dbg !43
  %1415 = add i32 %1384, %1386, !dbg !42
  %1416 = add i32 %1415, %70, !dbg !43
  %1417 = add i32 %1385, %1386, !dbg !42
  %1418 = add i32 %1417, %70, !dbg !43
  %1419 = sext i32 %1388 to i64, !dbg !44
  %1420 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1419, !dbg !44
  %1421 = sext i32 %1390 to i64, !dbg !44
  %1422 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1421, !dbg !44
  %1423 = sext i32 %1392 to i64, !dbg !44
  %1424 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1423, !dbg !44
  %1425 = sext i32 %1394 to i64, !dbg !44
  %1426 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1425, !dbg !44
  %1427 = sext i32 %1396 to i64, !dbg !44
  %1428 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1427, !dbg !44
  %1429 = sext i32 %1398 to i64, !dbg !44
  %1430 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1429, !dbg !44
  %1431 = sext i32 %1400 to i64, !dbg !44
  %1432 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1431, !dbg !44
  %1433 = sext i32 %1402 to i64, !dbg !44
  %1434 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1433, !dbg !44
  %1435 = sext i32 %1404 to i64, !dbg !44
  %1436 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1435, !dbg !44
  %1437 = sext i32 %1406 to i64, !dbg !44
  %1438 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1437, !dbg !44
  %1439 = sext i32 %1408 to i64, !dbg !44
  %1440 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1439, !dbg !44
  %1441 = sext i32 %1410 to i64, !dbg !44
  %1442 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1441, !dbg !44
  %1443 = sext i32 %1412 to i64, !dbg !44
  %1444 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1443, !dbg !44
  %1445 = sext i32 %1414 to i64, !dbg !44
  %1446 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1445, !dbg !44
  %1447 = sext i32 %1416 to i64, !dbg !44
  %1448 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1447, !dbg !44
  %1449 = sext i32 %1418 to i64, !dbg !44
  %1450 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1449, !dbg !44
  %1451 = fptrunc float %1178 to bfloat, !dbg !45
  %1452 = fptrunc float %1179 to bfloat, !dbg !45
  %1453 = fptrunc float %1180 to bfloat, !dbg !45
  %1454 = fptrunc float %1181 to bfloat, !dbg !45
  %1455 = fptrunc float %1183 to bfloat, !dbg !45
  %1456 = fptrunc float %1184 to bfloat, !dbg !45
  %1457 = fptrunc float %1185 to bfloat, !dbg !45
  %1458 = fptrunc float %1186 to bfloat, !dbg !45
  %1459 = fptrunc float %1188 to bfloat, !dbg !45
  %1460 = fptrunc float %1189 to bfloat, !dbg !45
  %1461 = fptrunc float %1190 to bfloat, !dbg !45
  %1462 = fptrunc float %1191 to bfloat, !dbg !45
  %1463 = fptrunc float %1193 to bfloat, !dbg !45
  %1464 = fptrunc float %1194 to bfloat, !dbg !45
  %1465 = fptrunc float %1195 to bfloat, !dbg !45
  %1466 = fptrunc float %1196 to bfloat, !dbg !45
  %1467 = fptrunc float %1198 to bfloat, !dbg !45
  %1468 = fptrunc float %1199 to bfloat, !dbg !45
  %1469 = fptrunc float %1200 to bfloat, !dbg !45
  %1470 = fptrunc float %1201 to bfloat, !dbg !45
  %1471 = fptrunc float %1203 to bfloat, !dbg !45
  %1472 = fptrunc float %1204 to bfloat, !dbg !45
  %1473 = fptrunc float %1205 to bfloat, !dbg !45
  %1474 = fptrunc float %1206 to bfloat, !dbg !45
  %1475 = fptrunc float %1208 to bfloat, !dbg !45
  %1476 = fptrunc float %1209 to bfloat, !dbg !45
  %1477 = fptrunc float %1210 to bfloat, !dbg !45
  %1478 = fptrunc float %1211 to bfloat, !dbg !45
  %1479 = fptrunc float %1213 to bfloat, !dbg !45
  %1480 = fptrunc float %1214 to bfloat, !dbg !45
  %1481 = fptrunc float %1215 to bfloat, !dbg !45
  %1482 = fptrunc float %1216 to bfloat, !dbg !45
  %1483 = fptrunc float %1218 to bfloat, !dbg !45
  %1484 = fptrunc float %1219 to bfloat, !dbg !45
  %1485 = fptrunc float %1220 to bfloat, !dbg !45
  %1486 = fptrunc float %1221 to bfloat, !dbg !45
  %1487 = fptrunc float %1223 to bfloat, !dbg !45
  %1488 = fptrunc float %1224 to bfloat, !dbg !45
  %1489 = fptrunc float %1225 to bfloat, !dbg !45
  %1490 = fptrunc float %1226 to bfloat, !dbg !45
  %1491 = fptrunc float %1228 to bfloat, !dbg !45
  %1492 = fptrunc float %1229 to bfloat, !dbg !45
  %1493 = fptrunc float %1230 to bfloat, !dbg !45
  %1494 = fptrunc float %1231 to bfloat, !dbg !45
  %1495 = fptrunc float %1233 to bfloat, !dbg !45
  %1496 = fptrunc float %1234 to bfloat, !dbg !45
  %1497 = fptrunc float %1235 to bfloat, !dbg !45
  %1498 = fptrunc float %1236 to bfloat, !dbg !45
  %1499 = fptrunc float %1238 to bfloat, !dbg !45
  %1500 = fptrunc float %1239 to bfloat, !dbg !45
  %1501 = fptrunc float %1240 to bfloat, !dbg !45
  %1502 = fptrunc float %1241 to bfloat, !dbg !45
  %1503 = fptrunc float %1243 to bfloat, !dbg !45
  %1504 = fptrunc float %1244 to bfloat, !dbg !45
  %1505 = fptrunc float %1245 to bfloat, !dbg !45
  %1506 = fptrunc float %1246 to bfloat, !dbg !45
  %1507 = fptrunc float %1248 to bfloat, !dbg !45
  %1508 = fptrunc float %1249 to bfloat, !dbg !45
  %1509 = fptrunc float %1250 to bfloat, !dbg !45
  %1510 = fptrunc float %1251 to bfloat, !dbg !45
  %1511 = fptrunc float %1253 to bfloat, !dbg !45
  %1512 = fptrunc float %1254 to bfloat, !dbg !45
  %1513 = fptrunc float %1255 to bfloat, !dbg !45
  %1514 = fptrunc float %1256 to bfloat, !dbg !45
  %1515 = fptrunc float %1258 to bfloat, !dbg !45
  %1516 = fptrunc float %1259 to bfloat, !dbg !45
  %1517 = fptrunc float %1260 to bfloat, !dbg !45
  %1518 = fptrunc float %1261 to bfloat, !dbg !45
  %1519 = fptrunc float %1263 to bfloat, !dbg !45
  %1520 = fptrunc float %1264 to bfloat, !dbg !45
  %1521 = fptrunc float %1265 to bfloat, !dbg !45
  %1522 = fptrunc float %1266 to bfloat, !dbg !45
  %1523 = fptrunc float %1268 to bfloat, !dbg !45
  %1524 = fptrunc float %1269 to bfloat, !dbg !45
  %1525 = fptrunc float %1270 to bfloat, !dbg !45
  %1526 = fptrunc float %1271 to bfloat, !dbg !45
  %1527 = fptrunc float %1273 to bfloat, !dbg !45
  %1528 = fptrunc float %1274 to bfloat, !dbg !45
  %1529 = fptrunc float %1275 to bfloat, !dbg !45
  %1530 = fptrunc float %1276 to bfloat, !dbg !45
  %1531 = fptrunc float %1278 to bfloat, !dbg !45
  %1532 = fptrunc float %1279 to bfloat, !dbg !45
  %1533 = fptrunc float %1280 to bfloat, !dbg !45
  %1534 = fptrunc float %1281 to bfloat, !dbg !45
  %1535 = fptrunc float %1283 to bfloat, !dbg !45
  %1536 = fptrunc float %1284 to bfloat, !dbg !45
  %1537 = fptrunc float %1285 to bfloat, !dbg !45
  %1538 = fptrunc float %1286 to bfloat, !dbg !45
  %1539 = fptrunc float %1288 to bfloat, !dbg !45
  %1540 = fptrunc float %1289 to bfloat, !dbg !45
  %1541 = fptrunc float %1290 to bfloat, !dbg !45
  %1542 = fptrunc float %1291 to bfloat, !dbg !45
  %1543 = fptrunc float %1293 to bfloat, !dbg !45
  %1544 = fptrunc float %1294 to bfloat, !dbg !45
  %1545 = fptrunc float %1295 to bfloat, !dbg !45
  %1546 = fptrunc float %1296 to bfloat, !dbg !45
  %1547 = fptrunc float %1298 to bfloat, !dbg !45
  %1548 = fptrunc float %1299 to bfloat, !dbg !45
  %1549 = fptrunc float %1300 to bfloat, !dbg !45
  %1550 = fptrunc float %1301 to bfloat, !dbg !45
  %1551 = fptrunc float %1303 to bfloat, !dbg !45
  %1552 = fptrunc float %1304 to bfloat, !dbg !45
  %1553 = fptrunc float %1305 to bfloat, !dbg !45
  %1554 = fptrunc float %1306 to bfloat, !dbg !45
  %1555 = fptrunc float %1308 to bfloat, !dbg !45
  %1556 = fptrunc float %1309 to bfloat, !dbg !45
  %1557 = fptrunc float %1310 to bfloat, !dbg !45
  %1558 = fptrunc float %1311 to bfloat, !dbg !45
  %1559 = fptrunc float %1313 to bfloat, !dbg !45
  %1560 = fptrunc float %1314 to bfloat, !dbg !45
  %1561 = fptrunc float %1315 to bfloat, !dbg !45
  %1562 = fptrunc float %1316 to bfloat, !dbg !45
  %1563 = fptrunc float %1318 to bfloat, !dbg !45
  %1564 = fptrunc float %1319 to bfloat, !dbg !45
  %1565 = fptrunc float %1320 to bfloat, !dbg !45
  %1566 = fptrunc float %1321 to bfloat, !dbg !45
  %1567 = fptrunc float %1323 to bfloat, !dbg !45
  %1568 = fptrunc float %1324 to bfloat, !dbg !45
  %1569 = fptrunc float %1325 to bfloat, !dbg !45
  %1570 = fptrunc float %1326 to bfloat, !dbg !45
  %1571 = fptrunc float %1328 to bfloat, !dbg !45
  %1572 = fptrunc float %1329 to bfloat, !dbg !45
  %1573 = fptrunc float %1330 to bfloat, !dbg !45
  %1574 = fptrunc float %1331 to bfloat, !dbg !45
  %1575 = fptrunc float %1333 to bfloat, !dbg !45
  %1576 = fptrunc float %1334 to bfloat, !dbg !45
  %1577 = fptrunc float %1335 to bfloat, !dbg !45
  %1578 = fptrunc float %1336 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1579 = shl i32 %15, 1, !dbg !45
  %1580 = and i32 %1579, 6, !dbg !45
  %1581 = shl i32 %15, 5, !dbg !45
  %1582 = and i32 %1581, 2944, !dbg !45
  %1583 = or disjoint i32 %1582, %1580, !dbg !45
  %1584 = or disjoint i32 %1583, %562, !dbg !45
  %1585 = and i32 %29, 1016, !dbg !45
  %1586 = lshr exact i32 %1582, 3, !dbg !45
  %1587 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1586, !dbg !45
  %1588 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1584, !dbg !45
  %1589 = bitcast bfloat %1451 to i16, !dbg !45
  %1590 = bitcast bfloat %1452 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1588, i16 %1589, i16 %1590, i1 true) #2, !dbg !45
  %1591 = or disjoint i32 %1584, 1024, !dbg !45
  %1592 = lshr i32 %1591, 4, !dbg !45
  %1593 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1592, !dbg !45
  %1594 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1593, i32 %1591, !dbg !45
  %1595 = bitcast bfloat %1453 to i16, !dbg !45
  %1596 = bitcast bfloat %1454 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1594, i16 %1595, i16 %1596, i1 true) #2, !dbg !45
  %1597 = or disjoint i32 %1584, 16, !dbg !45
  %1598 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1597, !dbg !45
  %1599 = bitcast bfloat %1455 to i16, !dbg !45
  %1600 = bitcast bfloat %1456 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1598, i16 %1599, i16 %1600, i1 true) #2, !dbg !45
  %1601 = or disjoint i32 %1584, 1040, !dbg !45
  %1602 = lshr i32 %1601, 4, !dbg !45
  %1603 = and i32 %1602, 248, !dbg !45
  %1604 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1603, !dbg !45
  %1605 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1604, i32 %1601, !dbg !45
  %1606 = bitcast bfloat %1457 to i16, !dbg !45
  %1607 = bitcast bfloat %1458 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1605, i16 %1606, i16 %1607, i1 true) #2, !dbg !45
  %1608 = or disjoint i32 %1584, 32, !dbg !45
  %1609 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1608, !dbg !45
  %1610 = bitcast bfloat %1459 to i16, !dbg !45
  %1611 = bitcast bfloat %1460 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1609, i16 %1610, i16 %1611, i1 true) #2, !dbg !45
  %1612 = or disjoint i32 %1584, 1056, !dbg !45
  %1613 = lshr i32 %1612, 4, !dbg !45
  %1614 = and i32 %1613, 248, !dbg !45
  %1615 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1614, !dbg !45
  %1616 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1615, i32 %1612, !dbg !45
  %1617 = bitcast bfloat %1461 to i16, !dbg !45
  %1618 = bitcast bfloat %1462 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1616, i16 %1617, i16 %1618, i1 true) #2, !dbg !45
  %1619 = or disjoint i32 %1584, 48, !dbg !45
  %1620 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1619, !dbg !45
  %1621 = bitcast bfloat %1463 to i16, !dbg !45
  %1622 = bitcast bfloat %1464 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1620, i16 %1621, i16 %1622, i1 true) #2, !dbg !45
  %1623 = or disjoint i32 %1584, 1072, !dbg !45
  %1624 = lshr i32 %1623, 4, !dbg !45
  %1625 = and i32 %1624, 248, !dbg !45
  %1626 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1625, !dbg !45
  %1627 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1626, i32 %1623, !dbg !45
  %1628 = bitcast bfloat %1465 to i16, !dbg !45
  %1629 = bitcast bfloat %1466 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1627, i16 %1628, i16 %1629, i1 true) #2, !dbg !45
  %1630 = or disjoint i32 %1584, 64, !dbg !45
  %1631 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1630, !dbg !45
  %1632 = bitcast bfloat %1467 to i16, !dbg !45
  %1633 = bitcast bfloat %1468 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1631, i16 %1632, i16 %1633, i1 true) #2, !dbg !45
  %1634 = or disjoint i32 %1584, 1088, !dbg !45
  %1635 = lshr i32 %1634, 4, !dbg !45
  %1636 = and i32 %1635, 248, !dbg !45
  %1637 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1636, !dbg !45
  %1638 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1637, i32 %1634, !dbg !45
  %1639 = bitcast bfloat %1469 to i16, !dbg !45
  %1640 = bitcast bfloat %1470 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1638, i16 %1639, i16 %1640, i1 true) #2, !dbg !45
  %1641 = or disjoint i32 %1584, 80, !dbg !45
  %1642 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1641, !dbg !45
  %1643 = bitcast bfloat %1471 to i16, !dbg !45
  %1644 = bitcast bfloat %1472 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1642, i16 %1643, i16 %1644, i1 true) #2, !dbg !45
  %1645 = or disjoint i32 %1584, 1104, !dbg !45
  %1646 = lshr i32 %1645, 4, !dbg !45
  %1647 = and i32 %1646, 248, !dbg !45
  %1648 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1647, !dbg !45
  %1649 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1648, i32 %1645, !dbg !45
  %1650 = bitcast bfloat %1473 to i16, !dbg !45
  %1651 = bitcast bfloat %1474 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1649, i16 %1650, i16 %1651, i1 true) #2, !dbg !45
  %1652 = or disjoint i32 %1584, 96, !dbg !45
  %1653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1652, !dbg !45
  %1654 = bitcast bfloat %1475 to i16, !dbg !45
  %1655 = bitcast bfloat %1476 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1653, i16 %1654, i16 %1655, i1 true) #2, !dbg !45
  %1656 = or disjoint i32 %1584, 1120, !dbg !45
  %1657 = lshr i32 %1656, 4, !dbg !45
  %1658 = and i32 %1657, 248, !dbg !45
  %1659 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1658, !dbg !45
  %1660 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1659, i32 %1656, !dbg !45
  %1661 = bitcast bfloat %1477 to i16, !dbg !45
  %1662 = bitcast bfloat %1478 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1660, i16 %1661, i16 %1662, i1 true) #2, !dbg !45
  %1663 = or disjoint i32 %1584, 112, !dbg !45
  %1664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1587, i32 %1663, !dbg !45
  %1665 = bitcast bfloat %1479 to i16, !dbg !45
  %1666 = bitcast bfloat %1480 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1664, i16 %1665, i16 %1666, i1 true) #2, !dbg !45
  %1667 = or disjoint i32 %1584, 1136, !dbg !45
  %1668 = lshr i32 %1667, 4, !dbg !45
  %1669 = and i32 %1668, 248, !dbg !45
  %1670 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1669, !dbg !45
  %1671 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %1667, !dbg !45
  %1672 = bitcast bfloat %1481 to i16, !dbg !45
  %1673 = bitcast bfloat %1482 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1671, i16 %1672, i16 %1673, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1674 = lshr i32 %29, 4, !dbg !45
  %1675 = and i32 %1674, 56, !dbg !45
  %1676 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1675, !dbg !45
  %1677 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1676, i32 %1585, !dbg !45
  %1678 = load <4 x i32>, ptr addrspace(3) %1677, align 16, !dbg !45
  %1679 = or disjoint i32 %1585, 1024, !dbg !45
  %1680 = lshr i32 %1679, 4, !dbg !45
  %1681 = and i32 %1680, 120, !dbg !45
  %1682 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1681, !dbg !45
  %1683 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1682, i32 %1679, !dbg !45
  %1684 = load <4 x i32>, ptr addrspace(3) %1683, align 16, !dbg !45
  %1685 = or disjoint i32 %1585, 2048, !dbg !45
  %1686 = lshr i32 %1685, 4, !dbg !45
  %1687 = and i32 %1686, 184, !dbg !45
  %1688 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1687, !dbg !45
  %1689 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1688, i32 %1685, !dbg !45
  %1690 = load <4 x i32>, ptr addrspace(3) %1689, align 16, !dbg !45
  %1691 = or disjoint i32 %1585, 3072, !dbg !45
  %1692 = lshr i32 %1691, 4, !dbg !45
  %1693 = and i32 %1692, 248, !dbg !45
  %1694 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1693, !dbg !45
  %1695 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1694, i32 %1691, !dbg !45
  %1696 = load <4 x i32>, ptr addrspace(3) %1695, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1697 = bitcast bfloat %1483 to i16, !dbg !45
  %1698 = bitcast bfloat %1484 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1588, i16 %1697, i16 %1698, i1 true) #2, !dbg !45
  %1699 = bitcast bfloat %1485 to i16, !dbg !45
  %1700 = bitcast bfloat %1486 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1594, i16 %1699, i16 %1700, i1 true) #2, !dbg !45
  %1701 = bitcast bfloat %1487 to i16, !dbg !45
  %1702 = bitcast bfloat %1488 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1598, i16 %1701, i16 %1702, i1 true) #2, !dbg !45
  %1703 = bitcast bfloat %1489 to i16, !dbg !45
  %1704 = bitcast bfloat %1490 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1605, i16 %1703, i16 %1704, i1 true) #2, !dbg !45
  %1705 = bitcast bfloat %1491 to i16, !dbg !45
  %1706 = bitcast bfloat %1492 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1609, i16 %1705, i16 %1706, i1 true) #2, !dbg !45
  %1707 = bitcast bfloat %1493 to i16, !dbg !45
  %1708 = bitcast bfloat %1494 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1616, i16 %1707, i16 %1708, i1 true) #2, !dbg !45
  %1709 = bitcast bfloat %1495 to i16, !dbg !45
  %1710 = bitcast bfloat %1496 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1620, i16 %1709, i16 %1710, i1 true) #2, !dbg !45
  %1711 = bitcast bfloat %1497 to i16, !dbg !45
  %1712 = bitcast bfloat %1498 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1627, i16 %1711, i16 %1712, i1 true) #2, !dbg !45
  %1713 = bitcast bfloat %1499 to i16, !dbg !45
  %1714 = bitcast bfloat %1500 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1631, i16 %1713, i16 %1714, i1 true) #2, !dbg !45
  %1715 = bitcast bfloat %1501 to i16, !dbg !45
  %1716 = bitcast bfloat %1502 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1638, i16 %1715, i16 %1716, i1 true) #2, !dbg !45
  %1717 = bitcast bfloat %1503 to i16, !dbg !45
  %1718 = bitcast bfloat %1504 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1642, i16 %1717, i16 %1718, i1 true) #2, !dbg !45
  %1719 = bitcast bfloat %1505 to i16, !dbg !45
  %1720 = bitcast bfloat %1506 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1649, i16 %1719, i16 %1720, i1 true) #2, !dbg !45
  %1721 = bitcast bfloat %1507 to i16, !dbg !45
  %1722 = bitcast bfloat %1508 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1653, i16 %1721, i16 %1722, i1 true) #2, !dbg !45
  %1723 = bitcast bfloat %1509 to i16, !dbg !45
  %1724 = bitcast bfloat %1510 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1660, i16 %1723, i16 %1724, i1 true) #2, !dbg !45
  %1725 = bitcast bfloat %1511 to i16, !dbg !45
  %1726 = bitcast bfloat %1512 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1664, i16 %1725, i16 %1726, i1 true) #2, !dbg !45
  %1727 = bitcast bfloat %1513 to i16, !dbg !45
  %1728 = bitcast bfloat %1514 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1671, i16 %1727, i16 %1728, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1729 = load <4 x i32>, ptr addrspace(3) %1677, align 16, !dbg !45
  %1730 = load <4 x i32>, ptr addrspace(3) %1683, align 16, !dbg !45
  %1731 = load <4 x i32>, ptr addrspace(3) %1689, align 16, !dbg !45
  %1732 = load <4 x i32>, ptr addrspace(3) %1695, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1733 = bitcast bfloat %1515 to i16, !dbg !45
  %1734 = bitcast bfloat %1516 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1588, i16 %1733, i16 %1734, i1 true) #2, !dbg !45
  %1735 = bitcast bfloat %1517 to i16, !dbg !45
  %1736 = bitcast bfloat %1518 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1594, i16 %1735, i16 %1736, i1 true) #2, !dbg !45
  %1737 = bitcast bfloat %1519 to i16, !dbg !45
  %1738 = bitcast bfloat %1520 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1598, i16 %1737, i16 %1738, i1 true) #2, !dbg !45
  %1739 = bitcast bfloat %1521 to i16, !dbg !45
  %1740 = bitcast bfloat %1522 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1605, i16 %1739, i16 %1740, i1 true) #2, !dbg !45
  %1741 = bitcast bfloat %1523 to i16, !dbg !45
  %1742 = bitcast bfloat %1524 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1609, i16 %1741, i16 %1742, i1 true) #2, !dbg !45
  %1743 = bitcast bfloat %1525 to i16, !dbg !45
  %1744 = bitcast bfloat %1526 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1616, i16 %1743, i16 %1744, i1 true) #2, !dbg !45
  %1745 = bitcast bfloat %1527 to i16, !dbg !45
  %1746 = bitcast bfloat %1528 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1620, i16 %1745, i16 %1746, i1 true) #2, !dbg !45
  %1747 = bitcast bfloat %1529 to i16, !dbg !45
  %1748 = bitcast bfloat %1530 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1627, i16 %1747, i16 %1748, i1 true) #2, !dbg !45
  %1749 = bitcast bfloat %1531 to i16, !dbg !45
  %1750 = bitcast bfloat %1532 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1631, i16 %1749, i16 %1750, i1 true) #2, !dbg !45
  %1751 = bitcast bfloat %1533 to i16, !dbg !45
  %1752 = bitcast bfloat %1534 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1638, i16 %1751, i16 %1752, i1 true) #2, !dbg !45
  %1753 = bitcast bfloat %1535 to i16, !dbg !45
  %1754 = bitcast bfloat %1536 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1642, i16 %1753, i16 %1754, i1 true) #2, !dbg !45
  %1755 = bitcast bfloat %1537 to i16, !dbg !45
  %1756 = bitcast bfloat %1538 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1649, i16 %1755, i16 %1756, i1 true) #2, !dbg !45
  %1757 = bitcast bfloat %1539 to i16, !dbg !45
  %1758 = bitcast bfloat %1540 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1653, i16 %1757, i16 %1758, i1 true) #2, !dbg !45
  %1759 = bitcast bfloat %1541 to i16, !dbg !45
  %1760 = bitcast bfloat %1542 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1660, i16 %1759, i16 %1760, i1 true) #2, !dbg !45
  %1761 = bitcast bfloat %1543 to i16, !dbg !45
  %1762 = bitcast bfloat %1544 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1664, i16 %1761, i16 %1762, i1 true) #2, !dbg !45
  %1763 = bitcast bfloat %1545 to i16, !dbg !45
  %1764 = bitcast bfloat %1546 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1671, i16 %1763, i16 %1764, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1765 = load <4 x i32>, ptr addrspace(3) %1677, align 16, !dbg !45
  %1766 = load <4 x i32>, ptr addrspace(3) %1683, align 16, !dbg !45
  %1767 = load <4 x i32>, ptr addrspace(3) %1689, align 16, !dbg !45
  %1768 = load <4 x i32>, ptr addrspace(3) %1695, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1769 = bitcast bfloat %1547 to i16, !dbg !45
  %1770 = bitcast bfloat %1548 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1588, i16 %1769, i16 %1770, i1 true) #2, !dbg !45
  %1771 = bitcast bfloat %1549 to i16, !dbg !45
  %1772 = bitcast bfloat %1550 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1594, i16 %1771, i16 %1772, i1 true) #2, !dbg !45
  %1773 = bitcast bfloat %1551 to i16, !dbg !45
  %1774 = bitcast bfloat %1552 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1598, i16 %1773, i16 %1774, i1 true) #2, !dbg !45
  %1775 = bitcast bfloat %1553 to i16, !dbg !45
  %1776 = bitcast bfloat %1554 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1605, i16 %1775, i16 %1776, i1 true) #2, !dbg !45
  %1777 = bitcast bfloat %1555 to i16, !dbg !45
  %1778 = bitcast bfloat %1556 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1609, i16 %1777, i16 %1778, i1 true) #2, !dbg !45
  %1779 = bitcast bfloat %1557 to i16, !dbg !45
  %1780 = bitcast bfloat %1558 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1616, i16 %1779, i16 %1780, i1 true) #2, !dbg !45
  %1781 = bitcast bfloat %1559 to i16, !dbg !45
  %1782 = bitcast bfloat %1560 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1620, i16 %1781, i16 %1782, i1 true) #2, !dbg !45
  %1783 = bitcast bfloat %1561 to i16, !dbg !45
  %1784 = bitcast bfloat %1562 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1627, i16 %1783, i16 %1784, i1 true) #2, !dbg !45
  %1785 = bitcast bfloat %1563 to i16, !dbg !45
  %1786 = bitcast bfloat %1564 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1631, i16 %1785, i16 %1786, i1 true) #2, !dbg !45
  %1787 = bitcast bfloat %1565 to i16, !dbg !45
  %1788 = bitcast bfloat %1566 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1638, i16 %1787, i16 %1788, i1 true) #2, !dbg !45
  %1789 = bitcast bfloat %1567 to i16, !dbg !45
  %1790 = bitcast bfloat %1568 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1642, i16 %1789, i16 %1790, i1 true) #2, !dbg !45
  %1791 = bitcast bfloat %1569 to i16, !dbg !45
  %1792 = bitcast bfloat %1570 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1649, i16 %1791, i16 %1792, i1 true) #2, !dbg !45
  %1793 = bitcast bfloat %1571 to i16, !dbg !45
  %1794 = bitcast bfloat %1572 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1653, i16 %1793, i16 %1794, i1 true) #2, !dbg !45
  %1795 = bitcast bfloat %1573 to i16, !dbg !45
  %1796 = bitcast bfloat %1574 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1660, i16 %1795, i16 %1796, i1 true) #2, !dbg !45
  %1797 = bitcast bfloat %1575 to i16, !dbg !45
  %1798 = bitcast bfloat %1576 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1664, i16 %1797, i16 %1798, i1 true) #2, !dbg !45
  %1799 = bitcast bfloat %1577 to i16, !dbg !45
  %1800 = bitcast bfloat %1578 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1671, i16 %1799, i16 %1800, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1801 = load <4 x i32>, ptr addrspace(3) %1677, align 16, !dbg !45
  %1802 = load <4 x i32>, ptr addrspace(3) %1683, align 16, !dbg !45
  %1803 = load <4 x i32>, ptr addrspace(3) %1689, align 16, !dbg !45
  %1804 = load <4 x i32>, ptr addrspace(3) %1695, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %1678, i64 0, !dbg !45
  %.extract197 = extractelement <4 x i32> %1678, i64 1, !dbg !45
  %.extract199 = extractelement <4 x i32> %1678, i64 2, !dbg !45
  %.extract201 = extractelement <4 x i32> %1678, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract197, i32 %.extract199, i32 %.extract201, ptr addrspace(1) %1420, i1 %1354) #2, !dbg !45
  %.extract203 = extractelement <4 x i32> %1684, i64 0, !dbg !45
  %.extract205 = extractelement <4 x i32> %1684, i64 1, !dbg !45
  %.extract207 = extractelement <4 x i32> %1684, i64 2, !dbg !45
  %.extract209 = extractelement <4 x i32> %1684, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract203, i32 %.extract205, i32 %.extract207, i32 %.extract209, ptr addrspace(1) %1422, i1 %1355) #2, !dbg !45
  %.extract211 = extractelement <4 x i32> %1690, i64 0, !dbg !45
  %.extract213 = extractelement <4 x i32> %1690, i64 1, !dbg !45
  %.extract215 = extractelement <4 x i32> %1690, i64 2, !dbg !45
  %.extract217 = extractelement <4 x i32> %1690, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract211, i32 %.extract213, i32 %.extract215, i32 %.extract217, ptr addrspace(1) %1424, i1 %1356) #2, !dbg !45
  %.extract219 = extractelement <4 x i32> %1696, i64 0, !dbg !45
  %.extract221 = extractelement <4 x i32> %1696, i64 1, !dbg !45
  %.extract223 = extractelement <4 x i32> %1696, i64 2, !dbg !45
  %.extract225 = extractelement <4 x i32> %1696, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract219, i32 %.extract221, i32 %.extract223, i32 %.extract225, ptr addrspace(1) %1426, i1 %1357) #2, !dbg !45
  %.extract227 = extractelement <4 x i32> %1729, i64 0, !dbg !45
  %.extract229 = extractelement <4 x i32> %1729, i64 1, !dbg !45
  %.extract231 = extractelement <4 x i32> %1729, i64 2, !dbg !45
  %.extract233 = extractelement <4 x i32> %1729, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract227, i32 %.extract229, i32 %.extract231, i32 %.extract233, ptr addrspace(1) %1428, i1 %1358) #2, !dbg !45
  %.extract235 = extractelement <4 x i32> %1730, i64 0, !dbg !45
  %.extract237 = extractelement <4 x i32> %1730, i64 1, !dbg !45
  %.extract239 = extractelement <4 x i32> %1730, i64 2, !dbg !45
  %.extract241 = extractelement <4 x i32> %1730, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract235, i32 %.extract237, i32 %.extract239, i32 %.extract241, ptr addrspace(1) %1430, i1 %1359) #2, !dbg !45
  %.extract243 = extractelement <4 x i32> %1731, i64 0, !dbg !45
  %.extract245 = extractelement <4 x i32> %1731, i64 1, !dbg !45
  %.extract247 = extractelement <4 x i32> %1731, i64 2, !dbg !45
  %.extract249 = extractelement <4 x i32> %1731, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract243, i32 %.extract245, i32 %.extract247, i32 %.extract249, ptr addrspace(1) %1432, i1 %1360) #2, !dbg !45
  %.extract251 = extractelement <4 x i32> %1732, i64 0, !dbg !45
  %.extract253 = extractelement <4 x i32> %1732, i64 1, !dbg !45
  %.extract255 = extractelement <4 x i32> %1732, i64 2, !dbg !45
  %.extract257 = extractelement <4 x i32> %1732, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract251, i32 %.extract253, i32 %.extract255, i32 %.extract257, ptr addrspace(1) %1434, i1 %1361) #2, !dbg !45
  %.extract259 = extractelement <4 x i32> %1765, i64 0, !dbg !45
  %.extract261 = extractelement <4 x i32> %1765, i64 1, !dbg !45
  %.extract263 = extractelement <4 x i32> %1765, i64 2, !dbg !45
  %.extract265 = extractelement <4 x i32> %1765, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract259, i32 %.extract261, i32 %.extract263, i32 %.extract265, ptr addrspace(1) %1436, i1 %1362) #2, !dbg !45
  %.extract267 = extractelement <4 x i32> %1766, i64 0, !dbg !45
  %.extract269 = extractelement <4 x i32> %1766, i64 1, !dbg !45
  %.extract271 = extractelement <4 x i32> %1766, i64 2, !dbg !45
  %.extract273 = extractelement <4 x i32> %1766, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract267, i32 %.extract269, i32 %.extract271, i32 %.extract273, ptr addrspace(1) %1438, i1 %1363) #2, !dbg !45
  %.extract275 = extractelement <4 x i32> %1767, i64 0, !dbg !45
  %.extract277 = extractelement <4 x i32> %1767, i64 1, !dbg !45
  %.extract279 = extractelement <4 x i32> %1767, i64 2, !dbg !45
  %.extract281 = extractelement <4 x i32> %1767, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract275, i32 %.extract277, i32 %.extract279, i32 %.extract281, ptr addrspace(1) %1440, i1 %1364) #2, !dbg !45
  %.extract283 = extractelement <4 x i32> %1768, i64 0, !dbg !45
  %.extract285 = extractelement <4 x i32> %1768, i64 1, !dbg !45
  %.extract287 = extractelement <4 x i32> %1768, i64 2, !dbg !45
  %.extract289 = extractelement <4 x i32> %1768, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract283, i32 %.extract285, i32 %.extract287, i32 %.extract289, ptr addrspace(1) %1442, i1 %1365) #2, !dbg !45
  %.extract291 = extractelement <4 x i32> %1801, i64 0, !dbg !45
  %.extract293 = extractelement <4 x i32> %1801, i64 1, !dbg !45
  %.extract295 = extractelement <4 x i32> %1801, i64 2, !dbg !45
  %.extract297 = extractelement <4 x i32> %1801, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract291, i32 %.extract293, i32 %.extract295, i32 %.extract297, ptr addrspace(1) %1444, i1 %1366) #2, !dbg !45
  %.extract299 = extractelement <4 x i32> %1802, i64 0, !dbg !45
  %.extract301 = extractelement <4 x i32> %1802, i64 1, !dbg !45
  %.extract303 = extractelement <4 x i32> %1802, i64 2, !dbg !45
  %.extract305 = extractelement <4 x i32> %1802, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract299, i32 %.extract301, i32 %.extract303, i32 %.extract305, ptr addrspace(1) %1446, i1 %1367) #2, !dbg !45
  %.extract307 = extractelement <4 x i32> %1803, i64 0, !dbg !45
  %.extract309 = extractelement <4 x i32> %1803, i64 1, !dbg !45
  %.extract311 = extractelement <4 x i32> %1803, i64 2, !dbg !45
  %.extract313 = extractelement <4 x i32> %1803, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract307, i32 %.extract309, i32 %.extract311, i32 %.extract313, ptr addrspace(1) %1448, i1 %1368) #2, !dbg !45
  %.extract315 = extractelement <4 x i32> %1804, i64 0, !dbg !45
  %.extract317 = extractelement <4 x i32> %1804, i64 1, !dbg !45
  %.extract319 = extractelement <4 x i32> %1804, i64 2, !dbg !45
  %.extract321 = extractelement <4 x i32> %1804, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract315, i32 %.extract317, i32 %.extract319, i32 %.extract321, ptr addrspace(1) %1450, i1 %1369) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuob5vl7u2huk6puekhftigjzdzlrnw3pnvdq47hr2wmo7lbta4e.py", directory: "/tmp/torchinductor_root/uo")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 77, column: 25, scope: !6)
!37 = !DILocation(line: 87, column: 20, scope: !6)
!38 = !DILocation(line: 87, column: 34, scope: !6)
!39 = !DILocation(line: 87, column: 26, scope: !6)
!40 = !DILocation(line: 90, column: 25, scope: !6)
!41 = !DILocation(line: 90, column: 40, scope: !6)
!42 = !DILocation(line: 90, column: 21, scope: !6)
!43 = !DILocation(line: 90, column: 33, scope: !6)
!44 = !DILocation(line: 91, column: 25, scope: !6)
!45 = !DILocation(line: 91, column: 67, scope: !6)
!46 = !DILocation(line: 91, column: 4, scope: !6)
