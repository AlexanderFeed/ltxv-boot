; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 128, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 128, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 32, !dbg !19
  %18 = and i32 %15, 64, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = lshr i32 %15, 2, !dbg !19
  %23 = and i32 %22, 7, !dbg !19
  %24 = lshr exact i32 %17, 2, !dbg !19
  %25 = or disjoint i32 %23, %24, !dbg !19
  %26 = lshr exact i32 %18, 2, !dbg !19
  %27 = or disjoint i32 %25, %26, !dbg !19
  %28 = or disjoint i32 %14, %20, !dbg !20
  %29 = or disjoint i32 %14, %21, !dbg !20
  %30 = or disjoint i32 %28, 32, !dbg !20
  %31 = or disjoint i32 %28, 48, !dbg !20
  %32 = or disjoint i32 %14, %27, !dbg !20
  %33 = or disjoint i32 %32, 32, !dbg !20
  %34 = shl nsw i32 %13, 5, !dbg !21
  %35 = shl i32 %15, 3, !dbg !22
  %36 = and i32 %35, 8, !dbg !22
  %37 = and i32 %35, 16, !dbg !22
  %38 = and i32 %35, 24, !dbg !22
  %39 = or disjoint i32 %34, %20, !dbg !23
  %40 = or disjoint i32 %34, %21, !dbg !23
  %41 = or disjoint i32 %34, %38, !dbg !23
  %42 = srem i32 %28, 512, !dbg !24
  %43 = srem i32 %29, 512, !dbg !24
  %44 = srem i32 %30, 512, !dbg !24
  %45 = srem i32 %31, 512, !dbg !24
  %46 = srem i32 %39, 512, !dbg !25
  %47 = srem i32 %40, 512, !dbg !25
  %48 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %49 = shl nsw i32 %42, 12, !dbg !27
  %50 = shl nsw i32 %43, 12, !dbg !27
  %51 = shl nsw i32 %44, 12, !dbg !27
  %52 = shl nsw i32 %45, 12, !dbg !27
  %53 = and i32 %35, 32, !dbg !28
  %54 = and i32 %35, 56, !dbg !28
  %55 = shl i32 %48, 6, !dbg !29
  %56 = or disjoint i32 %54, %55, !dbg !30
  %57 = add i32 %56, %49, !dbg !31
  %58 = add i32 %56, %50, !dbg !31
  %59 = add i32 %56, %51, !dbg !31
  %60 = add i32 %56, %52, !dbg !31
  %61 = sext i32 %57 to i64, !dbg !32
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !32
  %63 = sext i32 %58 to i64, !dbg !32
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !32
  %65 = sext i32 %59 to i64, !dbg !32
  %66 = getelementptr bfloat, ptr addrspace(1) %0, i64 %65, !dbg !32
  %67 = sext i32 %60 to i64, !dbg !32
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %67, !dbg !32
  %69 = shl nsw i32 %46, 12, !dbg !33
  %70 = shl nsw i32 %47, 12, !dbg !33
  %71 = add i32 %56, %69, !dbg !34
  %72 = add i32 %56, %70, !dbg !34
  %73 = sext i32 %71 to i64, !dbg !35
  %74 = getelementptr bfloat, ptr addrspace(1) %1, i64 %73, !dbg !35
  %75 = sext i32 %72 to i64, !dbg !35
  %76 = getelementptr bfloat, ptr addrspace(1) %1, i64 %75, !dbg !35
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %62) #2, !dbg !36
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !36
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !36
  %80 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !36
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !36
  %82 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !36
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !36
  %84 = shufflevector <2 x bfloat> %83, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %85 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !36
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !36
  %87 = shufflevector <2 x bfloat> %86, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %64) #2, !dbg !36
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !36
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !36
  %91 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !36
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !36
  %93 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !36
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !36
  %95 = shufflevector <2 x bfloat> %94, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %96 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !36
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !36
  %98 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %66) #2, !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !36
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !36
  %102 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !36
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !36
  %104 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !36
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !36
  %106 = shufflevector <2 x bfloat> %105, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %107 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !36
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !36
  %109 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %68) #2, !dbg !36
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !36
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !36
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !36
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !36
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !36
  %117 = shufflevector <2 x bfloat> %116, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !36
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !36
  %120 = shufflevector <2 x bfloat> %119, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !36
  %121 = xor i32 %54, %and.ra, !dbg !36
  %122 = xor i32 %121, %17, !dbg !36
  %123 = shl nuw nsw i32 %20, 6, !dbg !36
  %124 = or disjoint i32 %122, %123, !dbg !36
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %124, !dbg !36
  %126 = shufflevector <2 x bfloat> %79, <2 x bfloat> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %127 = shufflevector <8 x bfloat> %126, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %128 = shufflevector <8 x bfloat> %127, <8 x bfloat> %87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %128, ptr addrspace(3) %125, align 16, !dbg !36
  %129 = or disjoint i32 %124, 1024, !dbg !36
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %129, !dbg !36
  %131 = shufflevector <2 x bfloat> %90, <2 x bfloat> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %132 = shufflevector <8 x bfloat> %131, <8 x bfloat> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %133 = shufflevector <8 x bfloat> %132, <8 x bfloat> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %133, ptr addrspace(3) %130, align 16, !dbg !36
  %134 = or disjoint i32 %123, 2048, !dbg !36
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %122, !dbg !36
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %135, i32 %134, !dbg !36
  %137 = shufflevector <2 x bfloat> %101, <2 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %138 = shufflevector <8 x bfloat> %137, <8 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %139 = shufflevector <8 x bfloat> %138, <8 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %139, ptr addrspace(3) %136, align 16, !dbg !36
  %140 = or disjoint i32 %123, 3072, !dbg !36
  %141 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %135, i32 %140, !dbg !36
  %142 = shufflevector <2 x bfloat> %112, <2 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %143 = shufflevector <8 x bfloat> %142, <8 x bfloat> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %144 = shufflevector <8 x bfloat> %143, <8 x bfloat> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %144, ptr addrspace(3) %141, align 16, !dbg !36
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %74) #2, !dbg !37
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !37
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !37
  %148 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !37
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !37
  %150 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !37
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !37
  %152 = shufflevector <2 x bfloat> %151, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %153 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !37
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !37
  %155 = shufflevector <2 x bfloat> %154, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %76) #2, !dbg !37
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !37
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !37
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !37
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !37
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !37
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !37
  %163 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %164 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !37
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !37
  %166 = shufflevector <2 x bfloat> %165, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %124, !dbg !37
  %168 = shufflevector <2 x bfloat> %147, <2 x bfloat> %149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %169 = shufflevector <8 x bfloat> %168, <8 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !37
  %170 = shufflevector <8 x bfloat> %169, <8 x bfloat> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !37
  store <8 x bfloat> %170, ptr addrspace(3) %167, align 16, !dbg !37
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %129, !dbg !37
  %172 = shufflevector <2 x bfloat> %158, <2 x bfloat> %160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %173 = shufflevector <8 x bfloat> %172, <8 x bfloat> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !37
  %174 = shufflevector <8 x bfloat> %173, <8 x bfloat> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !37
  store <8 x bfloat> %174, ptr addrspace(3) %171, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %175 = and i32 %15, 7, !dbg !36
  %176 = and i32 %15, 15, !dbg !36
  %177 = lshr exact i32 %16, 1, !dbg !36
  %178 = xor i32 %54, %177, !dbg !36
  %179 = or disjoint i32 %26, %176, !dbg !36
  %180 = shl nuw nsw i32 %179, 6, !dbg !36
  %181 = or disjoint i32 %180, %178, !dbg !36
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %181, !dbg !36
  %183 = ptrtoint ptr addrspace(3) %182 to i32, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %183) #2, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !36
  %189 = or disjoint i32 %36, 16, !dbg !36
  %190 = xor i32 %189, %37, !dbg !36
  %191 = or disjoint i32 %190, %53, !dbg !36
  %192 = xor i32 %191, %177, !dbg !36
  %193 = or disjoint i32 %192, %180, !dbg !36
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %193, !dbg !36
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !36
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #2, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !36
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !36
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !36
  %201 = or disjoint i32 %38, 32, !dbg !36
  %202 = xor i32 %201, %53, !dbg !36
  %203 = xor i32 %202, %177, !dbg !36
  %204 = or disjoint i32 %203, %180, !dbg !36
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %204, !dbg !36
  %206 = ptrtoint ptr addrspace(3) %205 to i32, !dbg !36
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %206) #2, !dbg !36
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !36
  %212 = or disjoint i32 %36, 48, !dbg !36
  %and.ra42 = and i32 %35, 48, !dbg !36
  %213 = or disjoint i32 %177, %and.ra42, !dbg !36
  %214 = xor i32 %213, %212, !dbg !36
  %215 = or disjoint i32 %214, %180, !dbg !36
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %215, !dbg !36
  %217 = ptrtoint ptr addrspace(3) %216 to i32, !dbg !36
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #2, !dbg !36
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !36
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !36
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !36
  %223 = or disjoint i32 %180, 2048, !dbg !36
  %224 = or disjoint i32 %223, %178, !dbg !36
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %224, !dbg !36
  %226 = ptrtoint ptr addrspace(3) %225 to i32, !dbg !36
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %226) #2, !dbg !36
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !36
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !36
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !36
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !36
  %232 = or disjoint i32 %192, %223, !dbg !36
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %232, !dbg !36
  %234 = ptrtoint ptr addrspace(3) %233 to i32, !dbg !36
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %234) #2, !dbg !36
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !36
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !36
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !36
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !36
  %240 = or disjoint i32 %203, %223, !dbg !36
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %240, !dbg !36
  %242 = ptrtoint ptr addrspace(3) %241 to i32, !dbg !36
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %242) #2, !dbg !36
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !36
  %248 = or disjoint i32 %214, %223, !dbg !36
  %249 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %248, !dbg !36
  %250 = ptrtoint ptr addrspace(3) %249 to i32, !dbg !36
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %250) #2, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !36
  %256 = or disjoint i32 %24, %175, !dbg !37
  %257 = shl nuw nsw i32 %256, 6, !dbg !37
  %258 = or disjoint i32 %257, %121, !dbg !37
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %258, !dbg !37
  %260 = ptrtoint ptr addrspace(3) %259 to i32, !dbg !37
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %260) #2, !dbg !37
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !37
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !37
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !37
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !37
  %266 = xor i32 %202, %and.ra, !dbg !37
  %267 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %266, !dbg !37
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %257, !dbg !37
  %269 = ptrtoint ptr addrspace(3) %268 to i32, !dbg !37
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %269) #2, !dbg !37
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !37
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !37
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !37
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !37
  %275 = or disjoint i32 %257, 1024, !dbg !37
  %276 = or disjoint i32 %275, %121, !dbg !37
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %276, !dbg !37
  %278 = ptrtoint ptr addrspace(3) %277 to i32, !dbg !37
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %278) #2, !dbg !37
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !37
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !37
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !37
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !37
  %284 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %275, !dbg !37
  %285 = ptrtoint ptr addrspace(3) %284 to i32, !dbg !37
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %285) #2, !dbg !37
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !37
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !37
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !37
  %291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %185, i32 %186, i32 %187, i32 %188, i32 %262, i32 %263) #2, !dbg !38
  %292 = extractvalue { float, float, float, float } %291, 0, !dbg !38
  %293 = extractvalue { float, float, float, float } %291, 1, !dbg !38
  %294 = extractvalue { float, float, float, float } %291, 2, !dbg !38
  %295 = extractvalue { float, float, float, float } %291, 3, !dbg !38
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %185, i32 %186, i32 %187, i32 %188, i32 %280, i32 %281) #2, !dbg !38
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !38
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !38
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !38
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !38
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %228, i32 %229, i32 %230, i32 %231, i32 %262, i32 %263) #2, !dbg !38
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !38
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !38
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !38
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !38
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %228, i32 %229, i32 %230, i32 %231, i32 %280, i32 %281) #2, !dbg !38
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !38
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !38
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !38
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !38
  %311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %292, float %293, float %294, float %295, i32 %197, i32 %198, i32 %199, i32 %200, i32 %264, i32 %265) #2, !dbg !38
  %312 = extractvalue { float, float, float, float } %311, 0, !dbg !38
  %313 = extractvalue { float, float, float, float } %311, 1, !dbg !38
  %314 = extractvalue { float, float, float, float } %311, 2, !dbg !38
  %315 = extractvalue { float, float, float, float } %311, 3, !dbg !38
  %316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %197, i32 %198, i32 %199, i32 %200, i32 %282, i32 %283) #2, !dbg !38
  %317 = extractvalue { float, float, float, float } %316, 0, !dbg !38
  %318 = extractvalue { float, float, float, float } %316, 1, !dbg !38
  %319 = extractvalue { float, float, float, float } %316, 2, !dbg !38
  %320 = extractvalue { float, float, float, float } %316, 3, !dbg !38
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %236, i32 %237, i32 %238, i32 %239, i32 %264, i32 %265) #2, !dbg !38
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !38
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !38
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !38
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !38
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %307, float %308, float %309, float %310, i32 %236, i32 %237, i32 %238, i32 %239, i32 %282, i32 %283) #2, !dbg !38
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !38
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !38
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !38
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !38
  %331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %312, float %313, float %314, float %315, i32 %208, i32 %209, i32 %210, i32 %211, i32 %271, i32 %272) #2, !dbg !38
  %332 = extractvalue { float, float, float, float } %331, 0, !dbg !38
  %333 = extractvalue { float, float, float, float } %331, 1, !dbg !38
  %334 = extractvalue { float, float, float, float } %331, 2, !dbg !38
  %335 = extractvalue { float, float, float, float } %331, 3, !dbg !38
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %317, float %318, float %319, float %320, i32 %208, i32 %209, i32 %210, i32 %211, i32 %287, i32 %288) #2, !dbg !38
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !38
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !38
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !38
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !38
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %244, i32 %245, i32 %246, i32 %247, i32 %271, i32 %272) #2, !dbg !38
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !38
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !38
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !38
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !38
  %346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %244, i32 %245, i32 %246, i32 %247, i32 %287, i32 %288) #2, !dbg !38
  %347 = extractvalue { float, float, float, float } %346, 0, !dbg !38
  %348 = extractvalue { float, float, float, float } %346, 1, !dbg !38
  %349 = extractvalue { float, float, float, float } %346, 2, !dbg !38
  %350 = extractvalue { float, float, float, float } %346, 3, !dbg !38
  %351 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %219, i32 %220, i32 %221, i32 %222, i32 %273, i32 %274) #2, !dbg !38
  %352 = extractvalue { float, float, float, float } %351, 0, !dbg !38
  %353 = extractvalue { float, float, float, float } %351, 1, !dbg !38
  %354 = extractvalue { float, float, float, float } %351, 2, !dbg !38
  %355 = extractvalue { float, float, float, float } %351, 3, !dbg !38
  %356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %219, i32 %220, i32 %221, i32 %222, i32 %289, i32 %290) #2, !dbg !38
  %357 = extractvalue { float, float, float, float } %356, 0, !dbg !38
  %358 = extractvalue { float, float, float, float } %356, 1, !dbg !38
  %359 = extractvalue { float, float, float, float } %356, 2, !dbg !38
  %360 = extractvalue { float, float, float, float } %356, 3, !dbg !38
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %252, i32 %253, i32 %254, i32 %255, i32 %273, i32 %274) #2, !dbg !38
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !38
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !38
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !38
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !38
  %366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %252, i32 %253, i32 %254, i32 %255, i32 %289, i32 %290) #2, !dbg !38
  %367 = extractvalue { float, float, float, float } %366, 0, !dbg !38
  %368 = extractvalue { float, float, float, float } %366, 1, !dbg !38
  %369 = extractvalue { float, float, float, float } %366, 2, !dbg !38
  %370 = extractvalue { float, float, float, float } %366, 3, !dbg !38
  %371 = icmp slt i32 %32, 512, !dbg !39
  %372 = icmp slt i32 %33, 512, !dbg !39
  %373 = icmp slt i32 %41, 512, !dbg !40
  %374 = and i1 %371, %373, !dbg !41
  %375 = and i1 %372, %373, !dbg !41
  %376 = shl i32 %32, 9, !dbg !42
  %377 = shl i32 %33, 9, !dbg !42
  %378 = shl i32 %48, 18, !dbg !43
  %379 = add i32 %41, %378, !dbg !44
  %380 = add i32 %379, %376, !dbg !45
  %381 = add i32 %379, %377, !dbg !45
  %382 = sext i32 %380 to i64, !dbg !46
  %383 = getelementptr bfloat, ptr addrspace(1) %2, i64 %382, !dbg !46
  %384 = sext i32 %381 to i64, !dbg !46
  %385 = getelementptr bfloat, ptr addrspace(1) %2, i64 %384, !dbg !46
  %386 = fptrunc float %352 to bfloat, !dbg !47
  %387 = fptrunc float %353 to bfloat, !dbg !47
  %388 = fptrunc float %354 to bfloat, !dbg !47
  %389 = fptrunc float %355 to bfloat, !dbg !47
  %390 = fptrunc float %357 to bfloat, !dbg !47
  %391 = fptrunc float %358 to bfloat, !dbg !47
  %392 = fptrunc float %359 to bfloat, !dbg !47
  %393 = fptrunc float %360 to bfloat, !dbg !47
  %394 = fptrunc float %362 to bfloat, !dbg !47
  %395 = fptrunc float %363 to bfloat, !dbg !47
  %396 = fptrunc float %364 to bfloat, !dbg !47
  %397 = fptrunc float %365 to bfloat, !dbg !47
  %398 = fptrunc float %367 to bfloat, !dbg !47
  %399 = fptrunc float %368 to bfloat, !dbg !47
  %400 = fptrunc float %369 to bfloat, !dbg !47
  %401 = fptrunc float %370 to bfloat, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %402 = shl i32 %15, 1, !dbg !47
  %403 = and i32 %402, 6, !dbg !47
  %404 = and i32 %35, 64, !dbg !47
  %405 = or disjoint i32 %403, %404, !dbg !47
  %406 = or disjoint i32 %405, %53, !dbg !47
  %407 = shl nuw nsw i32 %16, 3, !dbg !47
  %408 = or disjoint i32 %406, %407, !dbg !47
  %409 = or disjoint i32 %408, %24, !dbg !47
  %410 = shl nuw nsw i32 %18, 3, !dbg !47
  %411 = or disjoint i32 %409, %410, !dbg !47
  %412 = and i32 %35, 376, !dbg !47
  %413 = or disjoint i32 %407, %412, !dbg !47
  %414 = or disjoint i32 %413, %410, !dbg !47
  %415 = lshr i32 %411, 2, !dbg !47
  %416 = and i32 %415, 1073741816, !dbg !47
  %417 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %416, !dbg !47
  %418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %417, i32 %411, !dbg !47
  %419 = bitcast bfloat %386 to i16, !dbg !47
  %420 = bitcast bfloat %387 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %418, i16 %419, i16 %420, i1 true) #2, !dbg !47
  %421 = xor i32 %411, 256, !dbg !47
  %422 = lshr i32 %421, 2, !dbg !47
  %423 = and i32 %422, 1073741816, !dbg !47
  %424 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %423, !dbg !47
  %425 = getelementptr bfloat, ptr addrspace(3) %424, i32 %421, !dbg !47
  %426 = bitcast bfloat %388 to i16, !dbg !47
  %427 = bitcast bfloat %389 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %425, i16 %426, i16 %427, i1 true) #2, !dbg !47
  %428 = xor i32 %411, 16, !dbg !47
  %429 = getelementptr bfloat, ptr addrspace(3) %417, i32 %428, !dbg !47
  %430 = bitcast bfloat %390 to i16, !dbg !47
  %431 = bitcast bfloat %391 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %429, i16 %430, i16 %431, i1 true) #2, !dbg !47
  %432 = xor i32 %411, 272, !dbg !47
  %433 = lshr i32 %432, 2, !dbg !47
  %434 = and i32 %433, 1073741816, !dbg !47
  %435 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %434, !dbg !47
  %436 = getelementptr bfloat, ptr addrspace(3) %435, i32 %432, !dbg !47
  %437 = bitcast bfloat %392 to i16, !dbg !47
  %438 = bitcast bfloat %393 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %436, i16 %437, i16 %438, i1 true) #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %439 = lshr exact i32 %414, 2, !dbg !47
  %440 = and i32 %439, 248, !dbg !47
  %441 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %440, !dbg !47
  %442 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %441, i32 %414, !dbg !47
  %443 = load <4 x i32>, ptr addrspace(3) %442, align 16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %444 = bitcast bfloat %394 to i16, !dbg !47
  %445 = bitcast bfloat %395 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %418, i16 %444, i16 %445, i1 true) #2, !dbg !47
  %446 = bitcast bfloat %396 to i16, !dbg !47
  %447 = bitcast bfloat %397 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %425, i16 %446, i16 %447, i1 true) #2, !dbg !47
  %448 = bitcast bfloat %398 to i16, !dbg !47
  %449 = bitcast bfloat %399 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %429, i16 %448, i16 %449, i1 true) #2, !dbg !47
  %450 = bitcast bfloat %400 to i16, !dbg !47
  %451 = bitcast bfloat %401 to i16, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %436, i16 %450, i16 %451, i1 true) #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %452 = load <4 x i32>, ptr addrspace(3) %442, align 16, !dbg !47
  %.extract = extractelement <4 x i32> %443, i64 0, !dbg !47
  %.extract29 = extractelement <4 x i32> %443, i64 1, !dbg !47
  %.extract31 = extractelement <4 x i32> %443, i64 2, !dbg !47
  %.extract33 = extractelement <4 x i32> %443, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract29, i32 %.extract31, i32 %.extract33, ptr addrspace(1) %383, i1 %374) #2, !dbg !47
  %.extract35 = extractelement <4 x i32> %452, i64 0, !dbg !47
  %.extract37 = extractelement <4 x i32> %452, i64 1, !dbg !47
  %.extract39 = extractelement <4 x i32> %452, i64 2, !dbg !47
  %.extract41 = extractelement <4 x i32> %452, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract37, i32 %.extract39, i32 %.extract41, ptr addrspace(1) %385, i1 %375) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 57, column: 19, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 43, scope: !6)
!29 = !DILocation(line: 66, column: 72, scope: !6)
!30 = !DILocation(line: 66, column: 40, scope: !6)
!31 = !DILocation(line: 66, column: 66, scope: !6)
!32 = !DILocation(line: 66, column: 13, scope: !6)
!33 = !DILocation(line: 67, column: 54, scope: !6)
!34 = !DILocation(line: 67, column: 66, scope: !6)
!35 = !DILocation(line: 67, column: 13, scope: !6)
!36 = !DILocation(line: 72, column: 24, scope: !6)
!37 = !DILocation(line: 73, column: 24, scope: !6)
!38 = !DILocation(line: 77, column: 25, scope: !6)
!39 = !DILocation(line: 87, column: 20, scope: !6)
!40 = !DILocation(line: 87, column: 34, scope: !6)
!41 = !DILocation(line: 87, column: 26, scope: !6)
!42 = !DILocation(line: 90, column: 25, scope: !6)
!43 = !DILocation(line: 90, column: 40, scope: !6)
!44 = !DILocation(line: 90, column: 21, scope: !6)
!45 = !DILocation(line: 90, column: 33, scope: !6)
!46 = !DILocation(line: 91, column: 25, scope: !6)
!47 = !DILocation(line: 91, column: 67, scope: !6)
!48 = !DILocation(line: 91, column: 4, scope: !6)
