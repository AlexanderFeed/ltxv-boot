//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	triton_bmm              // -- Begin function triton_bmm
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_bmm
.visible .entry triton_bmm(
	.param .u64 .ptr .global .align 1 triton_bmm_param_0,
	.param .u64 .ptr .global .align 1 triton_bmm_param_1,
	.param .u64 .ptr .global .align 1 triton_bmm_param_2,
	.param .u64 .ptr .global .align 1 triton_bmm_param_3
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<14>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<357>;
	.reg .f32 	%f<129>;
	.reg .b64 	%rd<20>;
	.loc	1 17 0                          // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:17:0
$L__func_begin0:
	.loc	1 17 0                          // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:17:0

// %bb.0:
	ld.param.u64 	%rd9, [triton_bmm_param_0];
	ld.param.u64 	%rd10, [triton_bmm_param_1];
$L__tmp0:
	.loc	1 41 24                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:41:24
	mov.u32 	%r197, %ctaid.x;
	.loc	1 47 22                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:47:22
	shr.s32 	%r198, %r197, 31;
	shr.u32 	%r199, %r198, 25;
	add.s32 	%r200, %r197, %r199;
	shr.s32 	%r201, %r200, 7;
	ld.param.u64 	%rd11, [triton_bmm_param_2];
	.loc	1 48 41                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:48:41
	shl.b32 	%r202, %r201, 3;
	.loc	1 48 30                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:48:30
	sub.s32 	%r203, 8, %r202;
	.loc	1 48 50                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:48:50
	min.s32 	%r204, %r203, 8;
	.loc	1 49 40                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:49:40
	rem.s32 	%r205, %r197, %r204;
	.loc	1 49 34                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:49:34
	add.s32 	%r206, %r205, %r202;
	.loc	1 50 19                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:50:19
	and.b32  	%r207, %r200, -128;
	sub.s32 	%r208, %r197, %r207;
	.loc	1 50 30                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:50:30
	div.s32 	%r209, %r208, %r204;
	.loc	1 52 17                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:52:17
	shl.b32 	%r210, %r206, 6;
	.loc	1 52 40                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:52:40
	mov.u32 	%r211, %tid.x;
	and.b32  	%r212, %r211, 16;
	and.b32  	%r213, %r211, 32;
	and.b32  	%r214, %r211, 64;
	bfe.u32 	%r215, %r211, 3, 4;
	or.b32  	%r216, %r215, 16;
	bfe.u32 	%r217, %r211, 2, 3;
	shr.u32 	%r218, %r213, 2;
	or.b32  	%r219, %r217, %r218;
	shr.u32 	%r220, %r214, 2;
	or.b32  	%r221, %r219, %r220;
	.loc	1 52 27                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:52:27
	or.b32  	%r222, %r210, %r215;
	or.b32  	%r223, %r210, %r216;
	or.b32  	%r224, %r222, 32;
	or.b32  	%r225, %r222, 48;
	or.b32  	%r226, %r210, %r221;
	or.b32  	%r227, %r226, 32;
	.loc	1 53 17                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:53:17
	shl.b32 	%r228, %r209, 5;
	.loc	1 53 40                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:53:40
	shl.b32 	%r229, %r211, 3;
	and.b32  	%r230, %r229, 8;
	and.b32  	%r231, %r229, 16;
	and.b32  	%r232, %r229, 24;
	.loc	1 53 27                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:53:27
	or.b32  	%r233, %r228, %r215;
	or.b32  	%r234, %r228, %r216;
	or.b32  	%r235, %r228, %r232;
	.loc	1 57 19                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:57:19
	bfe.s32 	%r236, %r206, 25, 1;
	shr.u32 	%r237, %r236, 23;
	add.s32 	%r238, %r222, %r237;
	and.b32  	%r239, %r238, 1048064;
	sub.s32 	%r240, %r222, %r239;
	add.s32 	%r241, %r223, %r237;
	and.b32  	%r242, %r241, 1048064;
	sub.s32 	%r243, %r223, %r242;
	add.s32 	%r244, %r224, %r237;
	and.b32  	%r245, %r244, 1048064;
	sub.s32 	%r246, %r224, %r245;
	add.s32 	%r247, %r225, %r237;
	and.b32  	%r248, %r247, 1048064;
	sub.s32 	%r249, %r225, %r248;
	.loc	1 61 19                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:61:19
	bfe.s32 	%r250, %r209, 26, 1;
	shr.u32 	%r251, %r250, 23;
	add.s32 	%r252, %r233, %r251;
	and.b32  	%r253, %r252, 1048064;
	sub.s32 	%r254, %r233, %r253;
	add.s32 	%r255, %r234, %r251;
	and.b32  	%r256, %r255, 1048064;
	sub.s32 	%r257, %r234, %r256;
	.loc	1 65 26                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:65:26
	mov.u32 	%r258, %ctaid.y;
	.loc	1 66 28                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:28
	shl.b32 	%r259, %r240, 12;
	shl.b32 	%r260, %r243, 12;
	shl.b32 	%r261, %r246, 12;
	shl.b32 	%r262, %r249, 12;
	.loc	1 66 43                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:43
	and.b32  	%r263, %r229, 32;
	and.b32  	%r264, %r229, 56;
	.loc	1 66 72                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:72
	shl.b32 	%r265, %r258, 6;
	.loc	1 66 40                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:40
	or.b32  	%r266, %r264, %r265;
	.loc	1 66 66                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:66
	add.s32 	%r267, %r266, %r259;
	add.s32 	%r268, %r266, %r260;
	add.s32 	%r269, %r266, %r261;
	add.s32 	%r270, %r266, %r262;
	.loc	1 66 13                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:66:13
	mul.wide.s32 	%rd12, %r267, 2;
	add.s64 	%rd1, %rd9, %rd12;
	mul.wide.s32 	%rd13, %r268, 2;
	add.s64 	%rd2, %rd9, %rd13;
	mul.wide.s32 	%rd14, %r269, 2;
	add.s64 	%rd3, %rd9, %rd14;
	mul.wide.s32 	%rd15, %r270, 2;
	add.s64 	%rd4, %rd9, %rd15;
	.loc	1 67 54                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:67:54
	shl.b32 	%r271, %r254, 12;
	shl.b32 	%r272, %r257, 12;
	.loc	1 67 66                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:67:66
	add.s32 	%r273, %r266, %r271;
	add.s32 	%r274, %r266, %r272;
	.loc	1 67 13                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:67:13
	mul.wide.s32 	%rd16, %r273, 2;
	add.s64 	%rd5, %rd10, %rd16;
	mul.wide.s32 	%rd17, %r274, 2;
	add.s64 	%rd6, %rd10, %rd17;
	.loc	1 72 24                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:72:24
	// begin inline asm
	mov.u32 %r1, 0x0;
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	ld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	ld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	ld.global.v4.b32 { %r9, %r10, %r11, %r12 }, [ %rd3 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	ld.global.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd4 + 0 ];
	// end inline asm
	and.b32  	%r275, %r211, 24;
	xor.b32  	%r276, %r264, %r275;
	xor.b32  	%r277, %r276, %r213;
	shl.b32 	%r278, %r277, 1;
	shl.b32 	%r279, %r215, 7;
	or.b32  	%r280, %r279, %r278;
	mov.u32 	%r281, global_smem;
	add.s32 	%r282, %r281, %r280;
	st.shared.v4.b32 	[%r282], {%r1, %r2, %r3, %r4};
	st.shared.v4.b32 	[%r282+2048], {%r5, %r6, %r7, %r8};
	add.s32 	%r283, %r281, %r278;
	add.s32 	%r284, %r283, %r279;
	st.shared.v4.b32 	[%r284+4096], {%r9, %r10, %r11, %r12};
	st.shared.v4.b32 	[%r284+6144], {%r13, %r14, %r15, %r16};
	.loc	1 73 24                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:73:24
	// begin inline asm
	mov.u32 %r17, 0x0;
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	ld.global.v4.b32 { %r17, %r18, %r19, %r20 }, [ %rd5 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	mov.u32 %r23, 0x0;
	mov.u32 %r24, 0x0;
	ld.global.v4.b32 { %r21, %r22, %r23, %r24 }, [ %rd6 + 0 ];
	// end inline asm
	add.s32 	%r285, %r281, 8192;
	add.s32 	%r286, %r285, %r280;
	st.shared.v4.b32 	[%r286], {%r17, %r18, %r19, %r20};
	st.shared.v4.b32 	[%r286+2048], {%r21, %r22, %r23, %r24};
	.loc	1 72 24                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:72:24
	bar.sync 	0;
	and.b32  	%r287, %r211, 7;
	and.b32  	%r288, %r211, 15;
	shr.u32 	%r289, %r212, 1;
	xor.b32  	%r290, %r264, %r289;
	or.b32  	%r291, %r220, %r288;
	shl.b32 	%r292, %r291, 6;
	or.b32  	%r293, %r292, %r290;
	shl.b32 	%r294, %r293, 1;
	add.s32 	%r29, %r281, %r294;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r85, %r86, %r87, %r88}, [%r29];
	// end inline asm
	or.b32  	%r295, %r230, 16;
	xor.b32  	%r296, %r295, %r231;
	or.b32  	%r297, %r296, %r263;
	xor.b32  	%r298, %r297, %r289;
	or.b32  	%r299, %r298, %r292;
	shl.b32 	%r300, %r299, 1;
	add.s32 	%r34, %r281, %r300;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r109, %r110, %r111, %r112}, [%r34];
	// end inline asm
	or.b32  	%r301, %r232, 32;
	xor.b32  	%r302, %r301, %r263;
	xor.b32  	%r303, %r302, %r289;
	or.b32  	%r304, %r303, %r292;
	shl.b32 	%r305, %r304, 1;
	add.s32 	%r39, %r281, %r305;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r133, %r134, %r135, %r136}, [%r39];
	// end inline asm
	or.b32  	%r306, %r230, 48;
	and.b32  	%r307, %r229, 48;
	or.b32  	%r308, %r289, %r307;
	xor.b32  	%r309, %r308, %r306;
	or.b32  	%r310, %r309, %r292;
	shl.b32 	%r311, %r310, 1;
	add.s32 	%r44, %r281, %r311;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r157, %r158, %r159, %r160}, [%r44];
	// end inline asm
	add.s32 	%r49, %r29, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r97, %r98, %r99, %r100}, [%r49];
	// end inline asm
	add.s32 	%r54, %r34, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r121, %r122, %r123, %r124}, [%r54];
	// end inline asm
	add.s32 	%r59, %r39, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r145, %r146, %r147, %r148}, [%r59];
	// end inline asm
	add.s32 	%r64, %r44, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r169, %r170, %r171, %r172}, [%r64];
	// end inline asm
	.loc	1 73 24                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:73:24
	or.b32  	%r312, %r218, %r287;
	shl.b32 	%r313, %r276, 1;
	shl.b32 	%r314, %r312, 7;
	or.b32  	%r315, %r314, %r313;
	add.s32 	%r69, %r285, %r315;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r89, %r90, %r113, %r114}, [%r69];
	// end inline asm
	xor.b32  	%r316, %r302, %r275;
	shl.b32 	%r317, %r316, 1;
	add.s32 	%r318, %r285, %r317;
	add.s32 	%r74, %r318, %r314;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r137, %r138, %r161, %r162}, [%r74];
	// end inline asm
	add.s32 	%r79, %r69, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r95, %r96, %r119, %r120}, [%r79];
	// end inline asm
	add.s32 	%r84, %r74, 2048;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r143, %r144, %r167, %r168}, [%r84];
	// end inline asm
	mov.f32 	%f57, 0f00000000;
	.loc	1 77 25                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:77:25
	mov.f32 	%f33, %f57;
	mov.f32 	%f34, %f57;
	mov.f32 	%f35, %f57;
	mov.f32 	%f36, %f57;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f33, %f34, %f35, %f36 }, { %r85, %r86, %r87, %r88 }, { %r89, %r90 }, { %f33, %f34, %f35, %f36 };
	// end inline asm
	mov.f32 	%f41, %f57;
	mov.f32 	%f42, %f57;
	mov.f32 	%f43, %f57;
	mov.f32 	%f44, %f57;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f41, %f42, %f43, %f44 }, { %r85, %r86, %r87, %r88 }, { %r95, %r96 }, { %f41, %f42, %f43, %f44 };
	// end inline asm
	mov.f32 	%f49, %f57;
	mov.f32 	%f50, %f57;
	mov.f32 	%f51, %f57;
	mov.f32 	%f52, %f57;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f49, %f50, %f51, %f52 }, { %r97, %r98, %r99, %r100 }, { %r89, %r90 }, { %f49, %f50, %f51, %f52 };
	// end inline asm
	mov.f32 	%f58, %f57;
	mov.f32 	%f59, %f57;
	mov.f32 	%f60, %f57;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f57, %f58, %f59, %f60 }, { %r97, %r98, %r99, %r100 }, { %r95, %r96 }, { %f57, %f58, %f59, %f60 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f33, %f34, %f35, %f36 }, { %r109, %r110, %r111, %r112 }, { %r113, %r114 }, { %f33, %f34, %f35, %f36 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f41, %f42, %f43, %f44 }, { %r109, %r110, %r111, %r112 }, { %r119, %r120 }, { %f41, %f42, %f43, %f44 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f49, %f50, %f51, %f52 }, { %r121, %r122, %r123, %r124 }, { %r113, %r114 }, { %f49, %f50, %f51, %f52 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f57, %f58, %f59, %f60 }, { %r121, %r122, %r123, %r124 }, { %r119, %r120 }, { %f57, %f58, %f59, %f60 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f33, %f34, %f35, %f36 }, { %r133, %r134, %r135, %r136 }, { %r137, %r138 }, { %f33, %f34, %f35, %f36 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f41, %f42, %f43, %f44 }, { %r133, %r134, %r135, %r136 }, { %r143, %r144 }, { %f41, %f42, %f43, %f44 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f49, %f50, %f51, %f52 }, { %r145, %r146, %r147, %r148 }, { %r137, %r138 }, { %f49, %f50, %f51, %f52 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f57, %f58, %f59, %f60 }, { %r145, %r146, %r147, %r148 }, { %r143, %r144 }, { %f57, %f58, %f59, %f60 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f33, %f34, %f35, %f36 }, { %r157, %r158, %r159, %r160 }, { %r161, %r162 }, { %f33, %f34, %f35, %f36 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f41, %f42, %f43, %f44 }, { %r157, %r158, %r159, %r160 }, { %r167, %r168 }, { %f41, %f42, %f43, %f44 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f49, %f50, %f51, %f52 }, { %r169, %r170, %r171, %r172 }, { %r161, %r162 }, { %f49, %f50, %f51, %f52 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f57, %f58, %f59, %f60 }, { %r169, %r170, %r171, %r172 }, { %r167, %r168 }, { %f57, %f58, %f59, %f60 };
	// end inline asm
	.loc	1 87 20                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:87:20
	setp.lt.s32 	%p11, %r226, 512;
	setp.lt.s32 	%p12, %r227, 512;
	.loc	1 87 34                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:87:34
	setp.lt.s32 	%p13, %r235, 512;
	.loc	1 87 26                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:87:26
	and.pred  	%p9, %p11, %p13;
	and.pred  	%p10, %p12, %p13;
	.loc	1 90 25                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:90:25
	shl.b32 	%r319, %r226, 9;
	shl.b32 	%r320, %r227, 9;
	.loc	1 90 40                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:90:40
	shl.b32 	%r321, %r258, 18;
	.loc	1 90 21                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:90:21
	add.s32 	%r322, %r235, %r321;
	.loc	1 90 33                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:90:33
	add.s32 	%r323, %r322, %r319;
	add.s32 	%r324, %r322, %r320;
	.loc	1 91 25                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:91:25
	mul.wide.s32 	%rd18, %r323, 2;
	add.s64 	%rd7, %rd11, %rd18;
	mul.wide.s32 	%rd19, %r324, 2;
	add.s64 	%rd8, %rd11, %rd19;
	.loc	1 91 67                         // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:91:67
	cvt.rn.bf16.f32 	%rs1, %f33;
	cvt.rn.bf16.f32 	%rs2, %f34;
	cvt.rn.bf16.f32 	%rs3, %f35;
	cvt.rn.bf16.f32 	%rs4, %f36;
	cvt.rn.bf16.f32 	%rs5, %f41;
	cvt.rn.bf16.f32 	%rs6, %f42;
	cvt.rn.bf16.f32 	%rs7, %f43;
	cvt.rn.bf16.f32 	%rs8, %f44;
	cvt.rn.bf16.f32 	%rs9, %f49;
	cvt.rn.bf16.f32 	%rs10, %f50;
	cvt.rn.bf16.f32 	%rs11, %f51;
	cvt.rn.bf16.f32 	%rs12, %f52;
	cvt.rn.bf16.f32 	%rs13, %f57;
	cvt.rn.bf16.f32 	%rs14, %f58;
	cvt.rn.bf16.f32 	%rs15, %f59;
	cvt.rn.bf16.f32 	%rs16, %f60;
	bar.sync 	0;
	shl.b32 	%r325, %r211, 1;
	and.b32  	%r326, %r325, 6;
	and.b32  	%r327, %r229, 64;
	or.b32  	%r328, %r326, %r327;
	or.b32  	%r329, %r328, %r263;
	shl.b32 	%r330, %r212, 3;
	or.b32  	%r331, %r329, %r330;
	or.b32  	%r332, %r331, %r218;
	shl.b32 	%r333, %r214, 3;
	or.b32  	%r334, %r332, %r333;
	and.b32  	%r335, %r229, 376;
	or.b32  	%r336, %r330, %r335;
	or.b32  	%r337, %r336, %r333;
	shr.u32 	%r338, %r334, 1;
	and.b32  	%r339, %r338, 2147483632;
	add.s32 	%r340, %r281, %r339;
	shl.b32 	%r341, %r334, 1;
	add.s32 	%r181, %r340, %r341;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r181 + 0 ], { %rs1, %rs2 };
	// end inline asm
	or.b32  	%r342, %r334, 256;
	shr.u32 	%r343, %r342, 1;
	and.b32  	%r344, %r343, 2147483632;
	add.s32 	%r345, %r281, %r344;
	shl.b32 	%r346, %r342, 1;
	add.s32 	%r182, %r345, %r346;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r182 + 0 ], { %rs3, %rs4 };
	// end inline asm
	add.s32 	%r187, %r181, 32;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r187 + 0 ], { %rs5, %rs6 };
	// end inline asm
	or.b32  	%r347, %r334, 272;
	shr.u32 	%r348, %r347, 1;
	and.b32  	%r349, %r348, 2147483632;
	add.s32 	%r350, %r281, %r349;
	shl.b32 	%r351, %r347, 1;
	add.s32 	%r184, %r350, %r351;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r184 + 0 ], { %rs7, %rs8 };
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r352, %r337, 1;
	and.b32  	%r353, %r352, 496;
	add.s32 	%r354, %r281, %r353;
	shl.b32 	%r355, %r337, 1;
	add.s32 	%r356, %r354, %r355;
	ld.shared.v4.u32 	{%r189, %r190, %r191, %r192}, [%r356];
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r181 + 0 ], { %rs9, %rs10 };
	// end inline asm
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r182 + 0 ], { %rs11, %rs12 };
	// end inline asm
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r187 + 0 ], { %rs13, %rs14 };
	// end inline asm
	// begin inline asm
	@%p1 st.shared.v2.b16 [ %r184 + 0 ], { %rs15, %rs16 };
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.u32 	{%r193, %r194, %r195, %r196}, [%r356];
	// begin inline asm
	@%p9 st.global.v4.b32 [ %rd7 + 0 ], { %r189, %r190, %r191, %r192 };
	// end inline asm
	// begin inline asm
	@%p10 st.global.v4.b32 [ %rd8 + 0 ], { %r193, %r194, %r195, %r196 };
	// end inline asm
	.loc	1 91 4                          // ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py:91:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/tmp/torchinductor_root/cn/ccnhfh3gxkujber7cqcggvpsnpqjfleczqasn5fei3o3kkcuecvz.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 104                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x61 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 99
.b8 110
.b8 104
.b8 102
.b8 104
.b8 51
.b8 103
.b8 120
.b8 107
.b8 117
.b8 106
.b8 98
.b8 101
.b8 114
.b8 55
.b8 99
.b8 113
.b8 99
.b8 103
.b8 103
.b8 118
.b8 112
.b8 115
.b8 110
.b8 112
.b8 113
.b8 106
.b8 102
.b8 108
.b8 101
.b8 99
.b8 122
.b8 113
.b8 97
.b8 115
.b8 110
.b8 53
.b8 102
.b8 101
.b8 105
.b8 51
.b8 111
.b8 51
.b8 107
.b8 107
.b8 99
.b8 117
.b8 101
.b8 99
.b8 118
.b8 122
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 116
.b8 109
.b8 112
.b8 47
.b8 116
.b8 111
.b8 114
.b8 99
.b8 104
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 99
.b8 110
.b8 0
	}
	.section	.debug_macinfo	{	}
