; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 511, !dbg !11
  %11 = mul i32 %7, 3072, !dbg !12
  %12 = zext nneg i32 %10 to i64, !dbg !13
  %13 = getelementptr bfloat, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %13, i1 true) #4, !dbg !15
  br i1 %8, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %6
  %15 = or disjoint i32 %10, %11, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = getelementptr bfloat, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %17, i1 false) #4, !dbg !18
  %19 = or disjoint i64 %12, 512, !dbg !19
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !14
  %21 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %20, i1 true) #4, !dbg !15
  %22 = trunc nuw nsw i64 %19 to i32, !dbg !16
  %23 = or disjoint i32 %11, %22, !dbg !16
  %24 = sext i32 %23 to i64, !dbg !17
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #4, !dbg !18
  %27 = or disjoint i64 %12, 1024, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !14
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 true) #4, !dbg !15
  %30 = trunc nuw nsw i64 %27 to i32, !dbg !16
  %31 = add i32 %11, %30, !dbg !16
  %32 = sext i32 %31 to i64, !dbg !17
  %33 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #4, !dbg !18
  %35 = or disjoint i64 %12, 1536, !dbg !19
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !14
  %37 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %36, i1 true) #4, !dbg !15
  %38 = trunc nuw nsw i64 %35 to i32, !dbg !16
  %39 = add i32 %11, %38, !dbg !16
  %40 = sext i32 %39 to i64, !dbg !17
  %41 = getelementptr bfloat, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 false) #4, !dbg !18
  %43 = or disjoint i64 %12, 2048, !dbg !19
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !14
  %45 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 true) #4, !dbg !15
  %46 = trunc nuw nsw i64 %43 to i32, !dbg !16
  %47 = add i32 %11, %46, !dbg !16
  %48 = sext i32 %47 to i64, !dbg !17
  %49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !17
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %49, i1 false) #4, !dbg !18
  %51 = or disjoint i64 %12, 2560, !dbg !19
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !14
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #4, !dbg !15
  %54 = trunc nuw nsw i64 %51 to i32, !dbg !16
  %55 = add i32 %11, %54, !dbg !16
  %56 = sext i32 %55 to i64, !dbg !17
  %57 = getelementptr bfloat, ptr addrspace(1) %1, i64 %56, !dbg !17
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #4, !dbg !18
  br label %.split2.us, !dbg !11

.split.us.preheader:                              ; preds = %6
  %59 = or disjoint i32 %10, %11, !dbg !16
  %60 = sext i32 %59 to i64, !dbg !17
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !17
  %62 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %61, i1 true) #4, !dbg !18
  %63 = or disjoint i64 %12, 512, !dbg !19
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !14
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 true) #4, !dbg !15
  %66 = trunc nuw nsw i64 %63 to i32, !dbg !16
  %67 = or disjoint i32 %11, %66, !dbg !16
  %68 = sext i32 %67 to i64, !dbg !17
  %69 = getelementptr bfloat, ptr addrspace(1) %1, i64 %68, !dbg !17
  %70 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %69, i1 true) #4, !dbg !18
  %71 = insertelement <2 x i16> poison, i16 %14, i64 0, !dbg !15
  %72 = insertelement <2 x i16> %71, i16 %65, i64 1, !dbg !15
  %73 = bitcast <2 x i16> %72 to <2 x bfloat>, !dbg !15
  %74 = fpext <2 x bfloat> %73 to <2 x float>, !dbg !20
  %75 = extractelement <2 x float> %74, i64 0, !dbg !21
  %76 = fsub float 0.000000e+00, %75, !dbg !21
  %77 = fmul float %76, 0x3FF7154760000000, !dbg !25
  %78 = tail call float @llvm.nvvm.ex2.approx.f(float %77), !dbg !25
  %79 = fadd float %78, 1.000000e+00, !dbg !26
  %80 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %79), !dbg !27
  %81 = insertelement <2 x i16> poison, i16 %62, i64 0, !dbg !18
  %82 = insertelement <2 x i16> %81, i16 %70, i64 1, !dbg !18
  %83 = bitcast <2 x i16> %82 to <2 x bfloat>, !dbg !18
  %84 = fpext <2 x bfloat> %83 to <2 x float>, !dbg !28
  %85 = extractelement <2 x float> %74, i64 1, !dbg !21
  %86 = fsub float 0.000000e+00, %85, !dbg !21
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !25
  %88 = tail call float @llvm.nvvm.ex2.approx.f(float %87), !dbg !25
  %89 = fadd float %88, 1.000000e+00, !dbg !26
  %90 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %89), !dbg !27
  %91 = insertelement <2 x float> poison, float %80, i64 0, !dbg !29
  %92 = insertelement <2 x float> %91, float %90, i64 1, !dbg !29
  %93 = fmul <2 x float> %92, %74, !dbg !29
  %94 = fmul <2 x float> %93, %84, !dbg !30
  %95 = extractelement <2 x float> %94, i64 0, !dbg !31
  %96 = fadd float %95, 0.000000e+00, !dbg !31
  %97 = extractelement <2 x float> %94, i64 1, !dbg !31
  %98 = fadd float %96, %97, !dbg !31
  %99 = or disjoint i64 %12, 1024, !dbg !19
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !14
  %101 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %100, i1 true) #4, !dbg !15
  %102 = trunc nuw nsw i64 %99 to i32, !dbg !16
  %103 = add i32 %11, %102, !dbg !16
  %104 = sext i32 %103 to i64, !dbg !17
  %105 = getelementptr bfloat, ptr addrspace(1) %1, i64 %104, !dbg !17
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 true) #4, !dbg !18
  %107 = or disjoint i64 %12, 1536, !dbg !19
  %108 = getelementptr bfloat, ptr addrspace(1) %0, i64 %107, !dbg !14
  %109 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %108, i1 true) #4, !dbg !15
  %110 = trunc nuw nsw i64 %107 to i32, !dbg !16
  %111 = add i32 %11, %110, !dbg !16
  %112 = sext i32 %111 to i64, !dbg !17
  %113 = getelementptr bfloat, ptr addrspace(1) %1, i64 %112, !dbg !17
  %114 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %113, i1 true) #4, !dbg !18
  %115 = insertelement <2 x i16> poison, i16 %101, i64 0, !dbg !15
  %116 = insertelement <2 x i16> %115, i16 %109, i64 1, !dbg !15
  %117 = bitcast <2 x i16> %116 to <2 x bfloat>, !dbg !15
  %118 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !20
  %119 = extractelement <2 x float> %118, i64 0, !dbg !21
  %120 = fsub float 0.000000e+00, %119, !dbg !21
  %121 = fmul float %120, 0x3FF7154760000000, !dbg !25
  %122 = tail call float @llvm.nvvm.ex2.approx.f(float %121), !dbg !25
  %123 = fadd float %122, 1.000000e+00, !dbg !26
  %124 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %123), !dbg !27
  %125 = insertelement <2 x i16> poison, i16 %106, i64 0, !dbg !18
  %126 = insertelement <2 x i16> %125, i16 %114, i64 1, !dbg !18
  %127 = bitcast <2 x i16> %126 to <2 x bfloat>, !dbg !18
  %128 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !28
  %129 = extractelement <2 x float> %118, i64 1, !dbg !21
  %130 = fsub float 0.000000e+00, %129, !dbg !21
  %131 = fmul float %130, 0x3FF7154760000000, !dbg !25
  %132 = tail call float @llvm.nvvm.ex2.approx.f(float %131), !dbg !25
  %133 = fadd float %132, 1.000000e+00, !dbg !26
  %134 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %133), !dbg !27
  %135 = insertelement <2 x float> poison, float %124, i64 0, !dbg !29
  %136 = insertelement <2 x float> %135, float %134, i64 1, !dbg !29
  %137 = fmul <2 x float> %136, %118, !dbg !29
  %138 = fmul <2 x float> %137, %128, !dbg !30
  %139 = extractelement <2 x float> %138, i64 0, !dbg !31
  %140 = fadd float %98, %139, !dbg !31
  %141 = extractelement <2 x float> %138, i64 1, !dbg !31
  %142 = fadd float %140, %141, !dbg !31
  %143 = or disjoint i64 %12, 2048, !dbg !19
  %144 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !14
  %145 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %144, i1 true) #4, !dbg !15
  %146 = trunc nuw nsw i64 %143 to i32, !dbg !16
  %147 = add i32 %11, %146, !dbg !16
  %148 = sext i32 %147 to i64, !dbg !17
  %149 = getelementptr bfloat, ptr addrspace(1) %1, i64 %148, !dbg !17
  %150 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %149, i1 true) #4, !dbg !18
  %151 = or disjoint i64 %12, 2560, !dbg !19
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !14
  %153 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 true) #4, !dbg !15
  %154 = trunc nuw nsw i64 %151 to i32, !dbg !16
  %155 = add i32 %11, %154, !dbg !16
  %156 = sext i32 %155 to i64, !dbg !17
  %157 = getelementptr bfloat, ptr addrspace(1) %1, i64 %156, !dbg !17
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %157, i1 true) #4, !dbg !18
  %159 = insertelement <2 x i16> poison, i16 %145, i64 0, !dbg !15
  %160 = insertelement <2 x i16> %159, i16 %153, i64 1, !dbg !15
  %161 = bitcast <2 x i16> %160 to <2 x bfloat>, !dbg !15
  %162 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !20
  %163 = extractelement <2 x float> %162, i64 0, !dbg !21
  %164 = fsub float 0.000000e+00, %163, !dbg !21
  %165 = fmul float %164, 0x3FF7154760000000, !dbg !25
  %166 = tail call float @llvm.nvvm.ex2.approx.f(float %165), !dbg !25
  %167 = fadd float %166, 1.000000e+00, !dbg !26
  %168 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %167), !dbg !27
  %169 = insertelement <2 x i16> poison, i16 %150, i64 0, !dbg !18
  %170 = insertelement <2 x i16> %169, i16 %158, i64 1, !dbg !18
  %171 = bitcast <2 x i16> %170 to <2 x bfloat>, !dbg !18
  %172 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !28
  %173 = extractelement <2 x float> %162, i64 1, !dbg !21
  %174 = fsub float 0.000000e+00, %173, !dbg !21
  %175 = fmul float %174, 0x3FF7154760000000, !dbg !25
  %176 = tail call float @llvm.nvvm.ex2.approx.f(float %175), !dbg !25
  %177 = fadd float %176, 1.000000e+00, !dbg !26
  %178 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %177), !dbg !27
  %179 = insertelement <2 x float> poison, float %168, i64 0, !dbg !29
  %180 = insertelement <2 x float> %179, float %178, i64 1, !dbg !29
  %181 = fmul <2 x float> %180, %162, !dbg !29
  %182 = fmul <2 x float> %181, %172, !dbg !30
  %183 = extractelement <2 x float> %182, i64 0, !dbg !31
  %184 = fadd float %142, %183, !dbg !31
  %185 = extractelement <2 x float> %182, i64 1, !dbg !31
  %186 = fadd float %184, %185, !dbg !31
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi float [ %186, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !11
  %187 = lshr i32 %9, 5, !dbg !11
  %188 = and i32 %9, 31, !dbg !11
  %189 = bitcast float %.us-phi to i32, !dbg !32
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !32
  %191 = bitcast i32 %190 to float, !dbg !32
  %192 = fadd float %.us-phi, %191, !dbg !34
  %193 = bitcast float %192 to i32, !dbg !32
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = fadd float %192, %195, !dbg !34
  %197 = bitcast float %196 to i32, !dbg !32
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = fadd float %196, %199, !dbg !34
  %201 = bitcast float %200 to i32, !dbg !32
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = fadd float %200, %203, !dbg !34
  %205 = bitcast float %204 to i32, !dbg !32
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = fadd float %204, %207, !dbg !34
  %209 = and i32 %187, 15, !dbg !32
  %210 = icmp eq i32 %188, 0, !dbg !32
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !32
  %212 = bitcast float %208 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 %210) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %213 = icmp slt i32 %9, 16, !dbg !32
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !32
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %213) #4, !dbg !32
  %216 = bitcast i32 %215 to float, !dbg !32
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !32
  %218 = bitcast i32 %217 to float, !dbg !32
  %219 = fadd float %216, %218, !dbg !34
  %220 = bitcast float %219 to i32, !dbg !32
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !32
  %222 = bitcast i32 %221 to float, !dbg !32
  %223 = fadd float %219, %222, !dbg !34
  %224 = bitcast float %223 to i32, !dbg !32
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !32
  %226 = bitcast i32 %225 to float, !dbg !32
  %227 = fadd float %223, %226, !dbg !34
  %228 = bitcast float %227 to i32, !dbg !32
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !32
  %230 = bitcast i32 %229 to float, !dbg !32
  %231 = fadd float %227, %230, !dbg !34
  %232 = and i32 %9, 15, !dbg !32
  %233 = icmp eq i32 %232, 0, !dbg !32
  %234 = and i1 %213, %233, !dbg !32
  %235 = bitcast float %231 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %235, i1 %234) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %236 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %237 = sext i32 %7 to i64, !dbg !36
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !36
  %239 = icmp eq i32 %10, 0, !dbg !37
  %240 = and i1 %8, %239, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %238, i1 %240) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!24 = !DILocation(line: 39, column: 26, scope: !6)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 37, column: 113, scope: !6)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 48, column: 27, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
