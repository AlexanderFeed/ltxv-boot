; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 6, !dbg !11
  %.lobit = and i32 %20, 1, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = or disjoint i32 %22, 2, !dbg !12
  %24 = icmp slt i32 %22, 3600, !dbg !13
  %25 = icmp slt i32 %23, 3600, !dbg !13
  %26 = icmp slt i32 %18, 3600, !dbg !13
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = shl i32 %19, 4, !dbg !14
  %31 = and i32 %30, 1008, !dbg !14
  %32 = or disjoint i32 %31, 8, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = sext i32 %23 to i64, !dbg !15
  %36 = getelementptr bfloat, ptr addrspace(1) %4, i64 %35, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %53 = bitcast i16 %52 to bfloat, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %70 = bitcast i16 %69 to bfloat, !dbg !16
  %71 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %72 = getelementptr bfloat, ptr addrspace(1) %5, i64 %35, !dbg !17
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %89 = bitcast i16 %88 to bfloat, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %106 = bitcast i16 %105 to bfloat, !dbg !18
  %107 = mul i32 %22, 3072, !dbg !19
  %108 = mul i32 %23, 3072, !dbg !19
  %109 = mul i32 %17, 12288, !dbg !19
  %110 = or disjoint i32 %109, 3072, !dbg !19
  %111 = add i32 %109, 6144, !dbg !19
  %112 = add i32 %109, 9216, !dbg !19
  %.inv = fcmp oge bfloat %53, 0xR0000, !dbg !20
  %113 = select i1 %.inv, bfloat 0xR0000, bfloat %53, !dbg !20
  %114 = fpext bfloat %113 to float, !dbg !20
  %.inv4 = fcmp oge bfloat %70, 0xR0000, !dbg !20
  %115 = select i1 %.inv4, bfloat 0xR0000, bfloat %70, !dbg !20
  %116 = fpext bfloat %115 to float, !dbg !20
  %117 = fsub float 0.000000e+00, %114, !dbg !24
  %118 = fsub float 0.000000e+00, %116, !dbg !24
  %.inv5 = fcmp ole bfloat %89, 0xR0000, !dbg !25
  %119 = select i1 %.inv5, bfloat 0xR0000, bfloat %89, !dbg !25
  %120 = fpext bfloat %119 to float, !dbg !25
  %.inv6 = fcmp ole bfloat %106, 0xR0000, !dbg !25
  %121 = select i1 %.inv6, bfloat 0xR0000, bfloat %106, !dbg !25
  %122 = fpext bfloat %121 to float, !dbg !25
  %123 = fcmp ogt float %117, %120, !dbg !27
  %124 = fcmp ogt float %118, %122, !dbg !27
  %125 = fcmp uno float %117, 0.000000e+00, !dbg !29
  %126 = fcmp uno float %118, 0.000000e+00, !dbg !29
  %127 = or i1 %125, %123, !dbg !30
  %128 = or i1 %126, %124, !dbg !30
  %129 = select i1 %127, float %117, float %120, !dbg !31
  %130 = select i1 %128, float %118, float %122, !dbg !31
  %131 = fmul float %129, 0x3F80204080000000, !dbg !32
  %132 = fmul float %130, 0x3F80204080000000, !dbg !32
  %133 = fcmp ogt float %131, 0x3EE4F8B580000000, !dbg !33
  %134 = fcmp ogt float %132, 0x3EE4F8B580000000, !dbg !33
  %135 = fcmp uno float %131, 0.000000e+00, !dbg !35
  %136 = fcmp uno float %132, 0.000000e+00, !dbg !35
  %137 = or i1 %133, %135, !dbg !36
  %138 = or i1 %134, %136, !dbg !36
  %139 = select i1 %137, float %131, float 0x3EE4F8B580000000, !dbg !37
  %140 = select i1 %138, float %132, float 0x3EE4F8B580000000, !dbg !37
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %141 = and i32 %30, 2032
  %142 = lshr i32 %30, 6
  %.idx = and i32 %142, 16
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %144 = getelementptr bfloat, ptr addrspace(3) %143, i32 %141
  %145 = or disjoint i32 %141, 8
  %146 = getelementptr bfloat, ptr addrspace(3) %143, i32 %145
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %148 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 2064
  %149 = getelementptr float, ptr addrspace(3) %143, i32 %141
  %150 = or disjoint i32 %141, 4
  %151 = lshr i32 %30, 8
  %152 = and i32 %151, 4
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150
  %155 = getelementptr float, ptr addrspace(3) %143, i32 %145
  %156 = or disjoint i32 %141, 12
  %157 = getelementptr float, ptr addrspace(3) %153, i32 %156
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28
  %159 = or disjoint i32 %28, 1028
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %159
  %161 = zext nneg i32 %31 to i64, !dbg !38
  %162 = zext nneg i32 %29 to i64, !dbg !38
  %163 = zext nneg i32 %28 to i64, !dbg !38
  %164 = sext i32 %109 to i64, !dbg !38
  %165 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 4
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 12
  %167 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 2068
  %168 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 2072
  %169 = insertelement <32 x i1> poison, i1 %26, i64 0, !dbg !39
  %170 = shufflevector <32 x i1> %169, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !39
  br label %171, !dbg !38

171:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %16 ], [ %933, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %16 ], [ %934, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %16 ], [ %935, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %16 ], [ %936, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %16 ], [ %937, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %16 ], [ %938, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %16 ], [ %939, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %16 ], [ %940, %._crit_edge ]
  %180 = phi float [ 0.000000e+00, %16 ], [ %941, %._crit_edge ]
  %181 = phi float [ 0.000000e+00, %16 ], [ %942, %._crit_edge ]
  %182 = phi float [ 0.000000e+00, %16 ], [ %943, %._crit_edge ]
  %183 = phi float [ 0.000000e+00, %16 ], [ %944, %._crit_edge ]
  %184 = phi float [ 0.000000e+00, %16 ], [ %945, %._crit_edge ]
  %185 = phi float [ 0.000000e+00, %16 ], [ %946, %._crit_edge ]
  %186 = phi float [ 0.000000e+00, %16 ], [ %947, %._crit_edge ]
  %187 = phi float [ 0.000000e+00, %16 ], [ %948, %._crit_edge ]
  %188 = phi float [ 0.000000e+00, %16 ], [ %949, %._crit_edge ]
  %189 = phi float [ 0.000000e+00, %16 ], [ %950, %._crit_edge ]
  %190 = phi float [ 0.000000e+00, %16 ], [ %951, %._crit_edge ]
  %191 = phi float [ 0.000000e+00, %16 ], [ %952, %._crit_edge ]
  %192 = phi float [ 0.000000e+00, %16 ], [ %953, %._crit_edge ]
  %193 = phi float [ 0.000000e+00, %16 ], [ %954, %._crit_edge ]
  %194 = phi float [ 0.000000e+00, %16 ], [ %955, %._crit_edge ]
  %195 = phi float [ 0.000000e+00, %16 ], [ %956, %._crit_edge ]
  %196 = phi float [ 0.000000e+00, %16 ], [ %957, %._crit_edge ]
  %197 = phi float [ 0.000000e+00, %16 ], [ %958, %._crit_edge ]
  %198 = phi float [ 0.000000e+00, %16 ], [ %959, %._crit_edge ]
  %199 = phi float [ 0.000000e+00, %16 ], [ %960, %._crit_edge ]
  %200 = phi float [ 0.000000e+00, %16 ], [ %961, %._crit_edge ]
  %201 = phi float [ 0.000000e+00, %16 ], [ %962, %._crit_edge ]
  %202 = phi float [ 0.000000e+00, %16 ], [ %963, %._crit_edge ]
  %203 = phi float [ 0.000000e+00, %16 ], [ %964, %._crit_edge ]
  %204 = phi float [ 0.000000e+00, %16 ], [ %901, %._crit_edge ]
  %205 = phi float [ 0.000000e+00, %16 ], [ %902, %._crit_edge ]
  %206 = phi float [ 0.000000e+00, %16 ], [ %903, %._crit_edge ]
  %207 = phi float [ 0.000000e+00, %16 ], [ %904, %._crit_edge ]
  %208 = phi float [ 0.000000e+00, %16 ], [ %905, %._crit_edge ]
  %209 = phi float [ 0.000000e+00, %16 ], [ %906, %._crit_edge ]
  %210 = phi float [ 0.000000e+00, %16 ], [ %907, %._crit_edge ]
  %211 = phi float [ 0.000000e+00, %16 ], [ %908, %._crit_edge ]
  %212 = phi float [ 0.000000e+00, %16 ], [ %909, %._crit_edge ]
  %213 = phi float [ 0.000000e+00, %16 ], [ %910, %._crit_edge ]
  %214 = phi float [ 0.000000e+00, %16 ], [ %911, %._crit_edge ]
  %215 = phi float [ 0.000000e+00, %16 ], [ %912, %._crit_edge ]
  %216 = phi float [ 0.000000e+00, %16 ], [ %913, %._crit_edge ]
  %217 = phi float [ 0.000000e+00, %16 ], [ %914, %._crit_edge ]
  %218 = phi float [ 0.000000e+00, %16 ], [ %915, %._crit_edge ]
  %219 = phi float [ 0.000000e+00, %16 ], [ %916, %._crit_edge ]
  %220 = phi float [ 0.000000e+00, %16 ], [ %917, %._crit_edge ]
  %221 = phi float [ 0.000000e+00, %16 ], [ %918, %._crit_edge ]
  %222 = phi float [ 0.000000e+00, %16 ], [ %919, %._crit_edge ]
  %223 = phi float [ 0.000000e+00, %16 ], [ %920, %._crit_edge ]
  %224 = phi float [ 0.000000e+00, %16 ], [ %921, %._crit_edge ]
  %225 = phi float [ 0.000000e+00, %16 ], [ %922, %._crit_edge ]
  %226 = phi float [ 0.000000e+00, %16 ], [ %923, %._crit_edge ]
  %227 = phi float [ 0.000000e+00, %16 ], [ %924, %._crit_edge ]
  %228 = phi float [ 0.000000e+00, %16 ], [ %925, %._crit_edge ]
  %229 = phi float [ 0.000000e+00, %16 ], [ %926, %._crit_edge ]
  %230 = phi float [ 0.000000e+00, %16 ], [ %927, %._crit_edge ]
  %231 = phi float [ 0.000000e+00, %16 ], [ %928, %._crit_edge ]
  %232 = phi float [ 0.000000e+00, %16 ], [ %929, %._crit_edge ]
  %233 = phi float [ 0.000000e+00, %16 ], [ %930, %._crit_edge ]
  %234 = phi float [ 0.000000e+00, %16 ], [ %931, %._crit_edge ]
  %235 = phi float [ 0.000000e+00, %16 ], [ %932, %._crit_edge ]
  %236 = phi <32 x float> [ zeroinitializer, %16 ], [ %900, %._crit_edge ]
  %237 = or disjoint i64 %indvars.iv, %163, !dbg !40
  %238 = or disjoint i64 %indvars.iv, %162, !dbg !40
  %239 = or disjoint i64 %indvars.iv, %161, !dbg !40
  %240 = trunc nuw nsw i64 %239 to i32, !dbg !41
  %241 = add i32 %107, %240, !dbg !41
  %242 = trunc i64 %239 to i32, !dbg !41
  %243 = or disjoint i32 %242, 4, !dbg !41
  %244 = add i32 %243, %107, !dbg !41
  %245 = trunc i64 %indvars.iv to i32, !dbg !41
  %246 = or disjoint i32 %32, %245, !dbg !41
  %247 = add i32 %246, %107, !dbg !41
  %248 = trunc i64 %239 to i32, !dbg !41
  %249 = or disjoint i32 %248, 12, !dbg !41
  %250 = add i32 %249, %107, !dbg !41
  %251 = add i32 %108, %240, !dbg !41
  %252 = add i32 %243, %108, !dbg !41
  %253 = add i32 %246, %108, !dbg !41
  %254 = add i32 %249, %108, !dbg !41
  %255 = or disjoint i64 %237, %164, !dbg !41
  %256 = trunc nuw nsw i64 %237 to i32, !dbg !41
  %257 = add i32 %110, %256, !dbg !41
  %258 = add i32 %111, %256, !dbg !41
  %259 = add i32 %112, %256, !dbg !41
  %260 = sext i32 %241 to i64, !dbg !42
  %261 = getelementptr bfloat, ptr addrspace(1) %0, i64 %260, !dbg !42
  %262 = sext i32 %247 to i64, !dbg !42
  %263 = getelementptr bfloat, ptr addrspace(1) %0, i64 %262, !dbg !42
  %264 = sext i32 %251 to i64, !dbg !42
  %265 = getelementptr bfloat, ptr addrspace(1) %0, i64 %264, !dbg !42
  %266 = sext i32 %253 to i64, !dbg !42
  %267 = getelementptr bfloat, ptr addrspace(1) %0, i64 %266, !dbg !42
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %261, i1 %24) #5, !dbg !43
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !43
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !43
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !43
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !43
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %263, i1 %24) #5, !dbg !43
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !43
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !43
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !43
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !43
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %265, i1 %25) #5, !dbg !43
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !43
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !43
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !43
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !43
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %267, i1 %25) #5, !dbg !43
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !43
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !43
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !43
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %269, i32 %270, i32 %271, i32 %272, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %146, i32 %274, i32 %275, i32 %276, i32 %277, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %288 = add nuw nsw i64 %237, 6144, !dbg !45
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %238, !dbg !46
  %290 = getelementptr bfloat, ptr addrspace(1) %2, i64 %288, !dbg !47
  %291 = getelementptr i32, ptr addrspace(1) %3, i64 %260, !dbg !48
  %292 = sext i32 %244 to i64, !dbg !48
  %293 = getelementptr i32, ptr addrspace(1) %3, i64 %292, !dbg !48
  %294 = getelementptr i32, ptr addrspace(1) %3, i64 %262, !dbg !48
  %295 = sext i32 %250 to i64, !dbg !48
  %296 = getelementptr i32, ptr addrspace(1) %3, i64 %295, !dbg !48
  %297 = getelementptr i32, ptr addrspace(1) %3, i64 %264, !dbg !48
  %298 = sext i32 %252 to i64, !dbg !48
  %299 = getelementptr i32, ptr addrspace(1) %3, i64 %298, !dbg !48
  %300 = getelementptr i32, ptr addrspace(1) %3, i64 %266, !dbg !48
  %301 = sext i32 %254 to i64, !dbg !48
  %302 = getelementptr i32, ptr addrspace(1) %3, i64 %301, !dbg !48
  %303 = getelementptr bfloat, ptr addrspace(1) %6, i64 %237, !dbg !49
  %304 = getelementptr bfloat, ptr addrspace(1) %7, i64 %237, !dbg !50
  %305 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !44
  %306 = load <8 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %279, i32 %280, i32 %281, i32 %282, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %146, i32 %284, i32 %285, i32 %286, i32 %287, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %307 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !44
  %308 = load <8 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !44
  %309 = shufflevector <8 x bfloat> %305, <8 x bfloat> %306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %310 = shufflevector <8 x bfloat> %307, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %311 = shufflevector <32 x bfloat> %309, <32 x bfloat> %310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %312 = shufflevector <8 x bfloat> %308, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %313 = shufflevector <32 x bfloat> %311, <32 x bfloat> %312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !44
  %314 = fpext <32 x bfloat> %313 to <32 x float>, !dbg !44
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %289, i1 true) #5, !dbg !51
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !51
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !51
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !51
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !51
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !51
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !51
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !51
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !51
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !51
  %325 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !51
  %326 = insertelement <8 x i32> %325, i32 %317, i64 1, !dbg !51
  %327 = insertelement <8 x i32> %326, i32 %318, i64 2, !dbg !51
  %328 = insertelement <8 x i32> %327, i32 %319, i64 3, !dbg !51
  %329 = insertelement <8 x i32> %328, i32 %321, i64 4, !dbg !51
  %330 = insertelement <8 x i32> %329, i32 %322, i64 5, !dbg !51
  %331 = insertelement <8 x i32> %330, i32 %323, i64 6, !dbg !51
  %332 = insertelement <8 x i32> %331, i32 %324, i64 7, !dbg !51
  %333 = bitcast <8 x i32> %332 to <8 x float>, !dbg !51
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %290, i1 true) #5, !dbg !52
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !52
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !52
  %337 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !52
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !52
  %339 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !52
  %340 = bitcast i32 %339 to <2 x bfloat>, !dbg !52
  %341 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !52
  %342 = bitcast i32 %341 to <2 x bfloat>, !dbg !52
  %343 = shufflevector <2 x bfloat> %336, <2 x bfloat> %338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %344 = shufflevector <2 x bfloat> %340, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %345 = shufflevector <8 x bfloat> %343, <8 x bfloat> %344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !53
  %346 = shufflevector <2 x bfloat> %340, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %347 = shufflevector <8 x bfloat> %345, <8 x bfloat> %346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !53
  %348 = shufflevector <2 x bfloat> %342, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %349 = shufflevector <8 x bfloat> %347, <8 x bfloat> %348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !53
  %350 = shufflevector <2 x bfloat> %342, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %351 = shufflevector <8 x bfloat> %349, <8 x bfloat> %350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !53
  %352 = fpext <8 x bfloat> %351 to <8 x float>, !dbg !53
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %291, i1 %24) #5, !dbg !54
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !54
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !54
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !54
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !54
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %293, i1 %24) #5, !dbg !54
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !54
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !54
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !54
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !54
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %24) #5, !dbg !54
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !54
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !54
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !54
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !54
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %296, i1 %24) #5, !dbg !54
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !54
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !54
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !54
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %25) #5, !dbg !54
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !54
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !54
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !54
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !54
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %25) #5, !dbg !54
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !54
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !54
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !54
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !54
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 %25) #5, !dbg !54
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !54
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !54
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !54
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !54
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %302, i1 %25) #5, !dbg !54
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !54
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !54
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !54
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !54
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %303, i1 true) #5, !dbg !55
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !55
  %395 = bitcast i32 %394 to <2 x bfloat>, !dbg !55
  %396 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !55
  %397 = bitcast i32 %396 to <2 x bfloat>, !dbg !55
  %398 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !55
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !55
  %400 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !55
  %401 = bitcast i32 %400 to <2 x bfloat>, !dbg !55
  %402 = shufflevector <2 x bfloat> %395, <2 x bfloat> %397, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %403 = shufflevector <2 x bfloat> %399, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %404 = shufflevector <8 x bfloat> %402, <8 x bfloat> %403, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %405 = shufflevector <2 x bfloat> %399, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %406 = shufflevector <8 x bfloat> %404, <8 x bfloat> %405, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %407 = shufflevector <2 x bfloat> %401, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %408 = shufflevector <8 x bfloat> %406, <8 x bfloat> %407, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %409 = shufflevector <2 x bfloat> %401, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %410 = shufflevector <8 x bfloat> %408, <8 x bfloat> %409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %411 = fpext <8 x bfloat> %410 to <8 x float>, !dbg !56
  %412 = shufflevector <8 x float> %411, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !56
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %304, i1 true) #5, !dbg !57
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !57
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !57
  %416 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !57
  %417 = bitcast i32 %416 to <2 x bfloat>, !dbg !57
  %418 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !57
  %419 = bitcast i32 %418 to <2 x bfloat>, !dbg !57
  %420 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !57
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !57
  %422 = shufflevector <2 x bfloat> %415, <2 x bfloat> %417, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %423 = shufflevector <2 x bfloat> %419, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %424 = shufflevector <8 x bfloat> %422, <8 x bfloat> %423, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !58
  %425 = shufflevector <2 x bfloat> %419, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %426 = shufflevector <8 x bfloat> %424, <8 x bfloat> %425, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !58
  %427 = shufflevector <2 x bfloat> %421, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %428 = shufflevector <8 x bfloat> %426, <8 x bfloat> %427, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !58
  %429 = shufflevector <2 x bfloat> %421, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %430 = shufflevector <8 x bfloat> %428, <8 x bfloat> %429, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !58
  %431 = fpext <8 x bfloat> %430 to <8 x float>, !dbg !58
  %432 = shufflevector <8 x float> %431, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !58
  %433 = fadd <8 x float> %333, %352, !dbg !59
  %434 = shufflevector <8 x float> %433, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %435 = sitofp i32 %354 to float, !dbg !60
  %436 = sitofp i32 %355 to float, !dbg !60
  %437 = sitofp i32 %356 to float, !dbg !60
  %438 = sitofp i32 %357 to float, !dbg !60
  %439 = sitofp i32 %359 to float, !dbg !60
  %440 = sitofp i32 %360 to float, !dbg !60
  %441 = sitofp i32 %361 to float, !dbg !60
  %442 = sitofp i32 %362 to float, !dbg !60
  %443 = sitofp i32 %364 to float, !dbg !60
  %444 = sitofp i32 %365 to float, !dbg !60
  %445 = sitofp i32 %366 to float, !dbg !60
  %446 = sitofp i32 %367 to float, !dbg !60
  %447 = sitofp i32 %369 to float, !dbg !60
  %448 = sitofp i32 %370 to float, !dbg !60
  %449 = sitofp i32 %371 to float, !dbg !60
  %450 = sitofp i32 %372 to float, !dbg !60
  %451 = sitofp i32 %374 to float, !dbg !60
  %452 = sitofp i32 %375 to float, !dbg !60
  %453 = sitofp i32 %376 to float, !dbg !60
  %454 = sitofp i32 %377 to float, !dbg !60
  %455 = sitofp i32 %379 to float, !dbg !60
  %456 = sitofp i32 %380 to float, !dbg !60
  %457 = sitofp i32 %381 to float, !dbg !60
  %458 = sitofp i32 %382 to float, !dbg !60
  %459 = sitofp i32 %384 to float, !dbg !60
  %460 = sitofp i32 %385 to float, !dbg !60
  %461 = sitofp i32 %386 to float, !dbg !60
  %462 = sitofp i32 %387 to float, !dbg !60
  %463 = sitofp i32 %389 to float, !dbg !60
  %464 = sitofp i32 %390 to float, !dbg !60
  %465 = sitofp i32 %391 to float, !dbg !60
  %466 = sitofp i32 %392 to float, !dbg !60
  %467 = fmul float %139, %435, !dbg !61
  %468 = fmul float %139, %436, !dbg !61
  %469 = fmul float %139, %437, !dbg !61
  %470 = fmul float %139, %438, !dbg !61
  %471 = fmul float %139, %439, !dbg !61
  %472 = fmul float %139, %440, !dbg !61
  %473 = fmul float %139, %441, !dbg !61
  %474 = fmul float %139, %442, !dbg !61
  %475 = fmul float %139, %443, !dbg !61
  %476 = fmul float %139, %444, !dbg !61
  %477 = fmul float %139, %445, !dbg !61
  %478 = fmul float %139, %446, !dbg !61
  %479 = fmul float %139, %447, !dbg !61
  %480 = fmul float %139, %448, !dbg !61
  %481 = fmul float %139, %449, !dbg !61
  %482 = fmul float %139, %450, !dbg !61
  %483 = fmul float %140, %451, !dbg !61
  %484 = fmul float %140, %452, !dbg !61
  %485 = fmul float %140, %453, !dbg !61
  %486 = fmul float %140, %454, !dbg !61
  %487 = fmul float %140, %455, !dbg !61
  %488 = fmul float %140, %456, !dbg !61
  %489 = fmul float %140, %457, !dbg !61
  %490 = fmul float %140, %458, !dbg !61
  %491 = fmul float %140, %459, !dbg !61
  %492 = fmul float %140, %460, !dbg !61
  %493 = fmul float %140, %461, !dbg !61
  %494 = fmul float %140, %462, !dbg !61
  %495 = fmul float %140, %463, !dbg !61
  %496 = fmul float %140, %464, !dbg !61
  %497 = fmul float %140, %465, !dbg !61
  %498 = fmul float %140, %466, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %499 = bitcast float %467 to i32, !dbg !61
  %500 = bitcast float %468 to i32, !dbg !61
  %501 = bitcast float %469 to i32, !dbg !61
  %502 = bitcast float %470 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %499, i32 %500, i32 %501, i32 %502, i1 true) #5, !dbg !61
  %503 = bitcast float %471 to i32, !dbg !61
  %504 = bitcast float %472 to i32, !dbg !61
  %505 = bitcast float %473 to i32, !dbg !61
  %506 = bitcast float %474 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %154, i32 %503, i32 %504, i32 %505, i32 %506, i1 true) #5, !dbg !61
  %507 = bitcast float %475 to i32, !dbg !61
  %508 = bitcast float %476 to i32, !dbg !61
  %509 = bitcast float %477 to i32, !dbg !61
  %510 = bitcast float %478 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %507, i32 %508, i32 %509, i32 %510, i1 true) #5, !dbg !61
  %511 = bitcast float %479 to i32, !dbg !61
  %512 = bitcast float %480 to i32, !dbg !61
  %513 = bitcast float %481 to i32, !dbg !61
  %514 = bitcast float %482 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %157, i32 %511, i32 %512, i32 %513, i32 %514, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %515 = load <8 x float>, ptr addrspace(3) %158, align 16, !dbg !61
  %516 = load <8 x float>, ptr addrspace(3) %160, align 16, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %517 = bitcast float %483 to i32, !dbg !61
  %518 = bitcast float %484 to i32, !dbg !61
  %519 = bitcast float %485 to i32, !dbg !61
  %520 = bitcast float %486 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %517, i32 %518, i32 %519, i32 %520, i1 true) #5, !dbg !61
  %521 = bitcast float %487 to i32, !dbg !61
  %522 = bitcast float %488 to i32, !dbg !61
  %523 = bitcast float %489 to i32, !dbg !61
  %524 = bitcast float %490 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %154, i32 %521, i32 %522, i32 %523, i32 %524, i1 true) #5, !dbg !61
  %525 = bitcast float %491 to i32, !dbg !61
  %526 = bitcast float %492 to i32, !dbg !61
  %527 = bitcast float %493 to i32, !dbg !61
  %528 = bitcast float %494 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %525, i32 %526, i32 %527, i32 %528, i1 true) #5, !dbg !61
  %529 = bitcast float %495 to i32, !dbg !61
  %530 = bitcast float %496 to i32, !dbg !61
  %531 = bitcast float %497 to i32, !dbg !61
  %532 = bitcast float %498 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %157, i32 %529, i32 %530, i32 %531, i32 %532, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %533 = load <8 x float>, ptr addrspace(3) %158, align 16, !dbg !61
  %534 = load <8 x float>, ptr addrspace(3) %160, align 16, !dbg !61
  %535 = shufflevector <8 x float> %515, <8 x float> %516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %536 = shufflevector <8 x float> %533, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %537 = shufflevector <32 x float> %535, <32 x float> %536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %538 = shufflevector <8 x float> %534, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %539 = shufflevector <32 x float> %537, <32 x float> %538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !62
  %540 = fmul <32 x float> %539, %412, !dbg !62
  %541 = fadd <32 x float> %540, %432, !dbg !63
  %542 = fmul <32 x float> %434, %541, !dbg !64
  %543 = fadd <32 x float> %542, %314, !dbg !65
  %544 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %544, label %._crit_edge, label %545, !dbg !67

545:                                              ; preds = %171
  %546 = fsub <32 x float> %543, %236, !dbg !69
  %547 = extractelement <32 x float> %546, i64 0, !dbg !69
  %548 = fsub <32 x float> %543, %236, !dbg !69
  %549 = extractelement <32 x float> %548, i64 1, !dbg !69
  %550 = fsub <32 x float> %543, %236, !dbg !69
  %551 = extractelement <32 x float> %550, i64 2, !dbg !69
  %552 = fsub <32 x float> %543, %236, !dbg !69
  %553 = extractelement <32 x float> %552, i64 3, !dbg !69
  %554 = fsub <32 x float> %543, %236, !dbg !69
  %555 = extractelement <32 x float> %554, i64 4, !dbg !69
  %556 = fsub <32 x float> %543, %236, !dbg !69
  %557 = extractelement <32 x float> %556, i64 5, !dbg !69
  %558 = fsub <32 x float> %543, %236, !dbg !69
  %559 = extractelement <32 x float> %558, i64 6, !dbg !69
  %560 = fsub <32 x float> %543, %236, !dbg !69
  %561 = extractelement <32 x float> %560, i64 7, !dbg !69
  %562 = fsub <32 x float> %543, %236, !dbg !69
  %563 = extractelement <32 x float> %562, i64 8, !dbg !69
  %564 = fsub <32 x float> %543, %236, !dbg !69
  %565 = extractelement <32 x float> %564, i64 9, !dbg !69
  %566 = fsub <32 x float> %543, %236, !dbg !69
  %567 = extractelement <32 x float> %566, i64 10, !dbg !69
  %568 = fsub <32 x float> %543, %236, !dbg !69
  %569 = extractelement <32 x float> %568, i64 11, !dbg !69
  %570 = fsub <32 x float> %543, %236, !dbg !69
  %571 = extractelement <32 x float> %570, i64 12, !dbg !69
  %572 = fsub <32 x float> %543, %236, !dbg !69
  %573 = extractelement <32 x float> %572, i64 13, !dbg !69
  %574 = fsub <32 x float> %543, %236, !dbg !69
  %575 = extractelement <32 x float> %574, i64 14, !dbg !69
  %576 = fsub <32 x float> %543, %236, !dbg !69
  %577 = extractelement <32 x float> %576, i64 15, !dbg !69
  %578 = fsub <32 x float> %543, %236, !dbg !69
  %579 = extractelement <32 x float> %578, i64 16, !dbg !69
  %580 = fsub <32 x float> %543, %236, !dbg !69
  %581 = extractelement <32 x float> %580, i64 17, !dbg !69
  %582 = fsub <32 x float> %543, %236, !dbg !69
  %583 = extractelement <32 x float> %582, i64 18, !dbg !69
  %584 = fsub <32 x float> %543, %236, !dbg !69
  %585 = extractelement <32 x float> %584, i64 19, !dbg !69
  %586 = fsub <32 x float> %543, %236, !dbg !69
  %587 = extractelement <32 x float> %586, i64 20, !dbg !69
  %588 = fsub <32 x float> %543, %236, !dbg !69
  %589 = extractelement <32 x float> %588, i64 21, !dbg !69
  %590 = fsub <32 x float> %543, %236, !dbg !69
  %591 = extractelement <32 x float> %590, i64 22, !dbg !69
  %592 = fsub <32 x float> %543, %236, !dbg !69
  %593 = extractelement <32 x float> %592, i64 23, !dbg !69
  %594 = fsub <32 x float> %543, %236, !dbg !69
  %595 = extractelement <32 x float> %594, i64 24, !dbg !69
  %596 = fsub <32 x float> %543, %236, !dbg !69
  %597 = extractelement <32 x float> %596, i64 25, !dbg !69
  %598 = fsub <32 x float> %543, %236, !dbg !69
  %599 = extractelement <32 x float> %598, i64 26, !dbg !69
  %600 = fsub <32 x float> %543, %236, !dbg !69
  %601 = extractelement <32 x float> %600, i64 27, !dbg !69
  %602 = fsub <32 x float> %543, %236, !dbg !69
  %603 = extractelement <32 x float> %602, i64 28, !dbg !69
  %604 = fsub <32 x float> %543, %236, !dbg !69
  %605 = extractelement <32 x float> %604, i64 29, !dbg !69
  %606 = fsub <32 x float> %543, %236, !dbg !69
  %607 = extractelement <32 x float> %606, i64 30, !dbg !69
  %608 = fsub <32 x float> %543, %236, !dbg !69
  %609 = extractelement <32 x float> %608, i64 31, !dbg !69
  %610 = fadd float %172, 1.000000e+00, !dbg !70
  %611 = fadd float %173, 1.000000e+00, !dbg !70
  %612 = fadd float %174, 1.000000e+00, !dbg !70
  %613 = fadd float %175, 1.000000e+00, !dbg !70
  %614 = fadd float %176, 1.000000e+00, !dbg !70
  %615 = fadd float %177, 1.000000e+00, !dbg !70
  %616 = fadd float %178, 1.000000e+00, !dbg !70
  %617 = fadd float %179, 1.000000e+00, !dbg !70
  %618 = fadd float %180, 1.000000e+00, !dbg !70
  %619 = fadd float %181, 1.000000e+00, !dbg !70
  %620 = fadd float %182, 1.000000e+00, !dbg !70
  %621 = fadd float %183, 1.000000e+00, !dbg !70
  %622 = fadd float %184, 1.000000e+00, !dbg !70
  %623 = fadd float %185, 1.000000e+00, !dbg !70
  %624 = fadd float %186, 1.000000e+00, !dbg !70
  %625 = fadd float %187, 1.000000e+00, !dbg !70
  %626 = fadd float %188, 1.000000e+00, !dbg !70
  %627 = fadd float %189, 1.000000e+00, !dbg !70
  %628 = fadd float %190, 1.000000e+00, !dbg !70
  %629 = fadd float %191, 1.000000e+00, !dbg !70
  %630 = fadd float %192, 1.000000e+00, !dbg !70
  %631 = fadd float %193, 1.000000e+00, !dbg !70
  %632 = fadd float %194, 1.000000e+00, !dbg !70
  %633 = fadd float %195, 1.000000e+00, !dbg !70
  %634 = fadd float %196, 1.000000e+00, !dbg !70
  %635 = fadd float %197, 1.000000e+00, !dbg !70
  %636 = fadd float %198, 1.000000e+00, !dbg !70
  %637 = fadd float %199, 1.000000e+00, !dbg !70
  %638 = fadd float %200, 1.000000e+00, !dbg !70
  %639 = fadd float %201, 1.000000e+00, !dbg !70
  %640 = fadd float %202, 1.000000e+00, !dbg !70
  %641 = fadd float %203, 1.000000e+00, !dbg !70
  %642 = tail call float @llvm.nvvm.div.full(float %547, float %610), !dbg !71
  %643 = tail call float @llvm.nvvm.div.full(float %549, float %611), !dbg !71
  %644 = tail call float @llvm.nvvm.div.full(float %551, float %612), !dbg !71
  %645 = tail call float @llvm.nvvm.div.full(float %553, float %613), !dbg !71
  %646 = tail call float @llvm.nvvm.div.full(float %555, float %614), !dbg !71
  %647 = tail call float @llvm.nvvm.div.full(float %557, float %615), !dbg !71
  %648 = tail call float @llvm.nvvm.div.full(float %559, float %616), !dbg !71
  %649 = tail call float @llvm.nvvm.div.full(float %561, float %617), !dbg !71
  %650 = tail call float @llvm.nvvm.div.full(float %563, float %618), !dbg !71
  %651 = tail call float @llvm.nvvm.div.full(float %565, float %619), !dbg !71
  %652 = tail call float @llvm.nvvm.div.full(float %567, float %620), !dbg !71
  %653 = tail call float @llvm.nvvm.div.full(float %569, float %621), !dbg !71
  %654 = tail call float @llvm.nvvm.div.full(float %571, float %622), !dbg !71
  %655 = tail call float @llvm.nvvm.div.full(float %573, float %623), !dbg !71
  %656 = tail call float @llvm.nvvm.div.full(float %575, float %624), !dbg !71
  %657 = tail call float @llvm.nvvm.div.full(float %577, float %625), !dbg !71
  %658 = tail call float @llvm.nvvm.div.full(float %579, float %626), !dbg !71
  %659 = tail call float @llvm.nvvm.div.full(float %581, float %627), !dbg !71
  %660 = tail call float @llvm.nvvm.div.full(float %583, float %628), !dbg !71
  %661 = tail call float @llvm.nvvm.div.full(float %585, float %629), !dbg !71
  %662 = tail call float @llvm.nvvm.div.full(float %587, float %630), !dbg !71
  %663 = tail call float @llvm.nvvm.div.full(float %589, float %631), !dbg !71
  %664 = tail call float @llvm.nvvm.div.full(float %591, float %632), !dbg !71
  %665 = tail call float @llvm.nvvm.div.full(float %593, float %633), !dbg !71
  %666 = tail call float @llvm.nvvm.div.full(float %595, float %634), !dbg !71
  %667 = tail call float @llvm.nvvm.div.full(float %597, float %635), !dbg !71
  %668 = tail call float @llvm.nvvm.div.full(float %599, float %636), !dbg !71
  %669 = tail call float @llvm.nvvm.div.full(float %601, float %637), !dbg !71
  %670 = tail call float @llvm.nvvm.div.full(float %603, float %638), !dbg !71
  %671 = tail call float @llvm.nvvm.div.full(float %605, float %639), !dbg !71
  %672 = tail call float @llvm.nvvm.div.full(float %607, float %640), !dbg !71
  %673 = tail call float @llvm.nvvm.div.full(float %609, float %641), !dbg !71
  %674 = insertelement <32 x float> poison, float %642, i64 0, !dbg !72
  %675 = insertelement <32 x float> %674, float %643, i64 1, !dbg !72
  %676 = insertelement <32 x float> %675, float %644, i64 2, !dbg !72
  %677 = insertelement <32 x float> %676, float %645, i64 3, !dbg !72
  %678 = insertelement <32 x float> %677, float %646, i64 4, !dbg !72
  %679 = insertelement <32 x float> %678, float %647, i64 5, !dbg !72
  %680 = insertelement <32 x float> %679, float %648, i64 6, !dbg !72
  %681 = insertelement <32 x float> %680, float %649, i64 7, !dbg !72
  %682 = insertelement <32 x float> %681, float %650, i64 8, !dbg !72
  %683 = insertelement <32 x float> %682, float %651, i64 9, !dbg !72
  %684 = insertelement <32 x float> %683, float %652, i64 10, !dbg !72
  %685 = insertelement <32 x float> %684, float %653, i64 11, !dbg !72
  %686 = insertelement <32 x float> %685, float %654, i64 12, !dbg !72
  %687 = insertelement <32 x float> %686, float %655, i64 13, !dbg !72
  %688 = insertelement <32 x float> %687, float %656, i64 14, !dbg !72
  %689 = insertelement <32 x float> %688, float %657, i64 15, !dbg !72
  %690 = insertelement <32 x float> %689, float %658, i64 16, !dbg !72
  %691 = insertelement <32 x float> %690, float %659, i64 17, !dbg !72
  %692 = insertelement <32 x float> %691, float %660, i64 18, !dbg !72
  %693 = insertelement <32 x float> %692, float %661, i64 19, !dbg !72
  %694 = insertelement <32 x float> %693, float %662, i64 20, !dbg !72
  %695 = insertelement <32 x float> %694, float %663, i64 21, !dbg !72
  %696 = insertelement <32 x float> %695, float %664, i64 22, !dbg !72
  %697 = insertelement <32 x float> %696, float %665, i64 23, !dbg !72
  %698 = insertelement <32 x float> %697, float %666, i64 24, !dbg !72
  %699 = insertelement <32 x float> %698, float %667, i64 25, !dbg !72
  %700 = insertelement <32 x float> %699, float %668, i64 26, !dbg !72
  %701 = insertelement <32 x float> %700, float %669, i64 27, !dbg !72
  %702 = insertelement <32 x float> %701, float %670, i64 28, !dbg !72
  %703 = insertelement <32 x float> %702, float %671, i64 29, !dbg !72
  %704 = insertelement <32 x float> %703, float %672, i64 30, !dbg !72
  %705 = insertelement <32 x float> %704, float %673, i64 31, !dbg !72
  %706 = fadd <32 x float> %236, %705, !dbg !72
  %707 = fsub <32 x float> %543, %706, !dbg !73
  %708 = fsub <32 x float> %543, %706, !dbg !73
  %709 = fsub <32 x float> %543, %706, !dbg !73
  %710 = fsub <32 x float> %543, %706, !dbg !73
  %711 = fsub <32 x float> %543, %706, !dbg !73
  %712 = fsub <32 x float> %543, %706, !dbg !73
  %713 = fsub <32 x float> %543, %706, !dbg !73
  %714 = fsub <32 x float> %543, %706, !dbg !73
  %715 = fsub <32 x float> %543, %706, !dbg !73
  %716 = fsub <32 x float> %543, %706, !dbg !73
  %717 = fsub <32 x float> %543, %706, !dbg !73
  %718 = fsub <32 x float> %543, %706, !dbg !73
  %719 = fsub <32 x float> %543, %706, !dbg !73
  %720 = fsub <32 x float> %543, %706, !dbg !73
  %721 = fsub <32 x float> %543, %706, !dbg !73
  %722 = fsub <32 x float> %543, %706, !dbg !73
  %723 = fsub <32 x float> %543, %706, !dbg !73
  %724 = fsub <32 x float> %543, %706, !dbg !73
  %725 = fsub <32 x float> %543, %706, !dbg !73
  %726 = fsub <32 x float> %543, %706, !dbg !73
  %727 = fsub <32 x float> %543, %706, !dbg !73
  %728 = fsub <32 x float> %543, %706, !dbg !73
  %729 = fsub <32 x float> %543, %706, !dbg !73
  %730 = fsub <32 x float> %543, %706, !dbg !73
  %731 = fsub <32 x float> %543, %706, !dbg !73
  %732 = fsub <32 x float> %543, %706, !dbg !73
  %733 = fsub <32 x float> %543, %706, !dbg !73
  %734 = fsub <32 x float> %543, %706, !dbg !73
  %735 = fsub <32 x float> %543, %706, !dbg !73
  %736 = fsub <32 x float> %543, %706, !dbg !73
  %737 = fsub <32 x float> %543, %706, !dbg !73
  %738 = fsub <32 x float> %543, %706, !dbg !73
  %739 = fmul <32 x float> %546, %707, !dbg !74
  %740 = extractelement <32 x float> %739, i64 0, !dbg !74
  %741 = fmul <32 x float> %548, %708, !dbg !74
  %742 = extractelement <32 x float> %741, i64 1, !dbg !74
  %743 = fmul <32 x float> %550, %709, !dbg !74
  %744 = extractelement <32 x float> %743, i64 2, !dbg !74
  %745 = fmul <32 x float> %552, %710, !dbg !74
  %746 = extractelement <32 x float> %745, i64 3, !dbg !74
  %747 = fmul <32 x float> %554, %711, !dbg !74
  %748 = extractelement <32 x float> %747, i64 4, !dbg !74
  %749 = fmul <32 x float> %556, %712, !dbg !74
  %750 = extractelement <32 x float> %749, i64 5, !dbg !74
  %751 = fmul <32 x float> %558, %713, !dbg !74
  %752 = extractelement <32 x float> %751, i64 6, !dbg !74
  %753 = fmul <32 x float> %560, %714, !dbg !74
  %754 = extractelement <32 x float> %753, i64 7, !dbg !74
  %755 = fmul <32 x float> %562, %715, !dbg !74
  %756 = extractelement <32 x float> %755, i64 8, !dbg !74
  %757 = fmul <32 x float> %564, %716, !dbg !74
  %758 = extractelement <32 x float> %757, i64 9, !dbg !74
  %759 = fmul <32 x float> %566, %717, !dbg !74
  %760 = extractelement <32 x float> %759, i64 10, !dbg !74
  %761 = fmul <32 x float> %568, %718, !dbg !74
  %762 = extractelement <32 x float> %761, i64 11, !dbg !74
  %763 = fmul <32 x float> %570, %719, !dbg !74
  %764 = extractelement <32 x float> %763, i64 12, !dbg !74
  %765 = fmul <32 x float> %572, %720, !dbg !74
  %766 = extractelement <32 x float> %765, i64 13, !dbg !74
  %767 = fmul <32 x float> %574, %721, !dbg !74
  %768 = extractelement <32 x float> %767, i64 14, !dbg !74
  %769 = fmul <32 x float> %576, %722, !dbg !74
  %770 = extractelement <32 x float> %769, i64 15, !dbg !74
  %771 = fmul <32 x float> %578, %723, !dbg !74
  %772 = extractelement <32 x float> %771, i64 16, !dbg !74
  %773 = fmul <32 x float> %580, %724, !dbg !74
  %774 = extractelement <32 x float> %773, i64 17, !dbg !74
  %775 = fmul <32 x float> %582, %725, !dbg !74
  %776 = extractelement <32 x float> %775, i64 18, !dbg !74
  %777 = fmul <32 x float> %584, %726, !dbg !74
  %778 = extractelement <32 x float> %777, i64 19, !dbg !74
  %779 = fmul <32 x float> %586, %727, !dbg !74
  %780 = extractelement <32 x float> %779, i64 20, !dbg !74
  %781 = fmul <32 x float> %588, %728, !dbg !74
  %782 = extractelement <32 x float> %781, i64 21, !dbg !74
  %783 = fmul <32 x float> %590, %729, !dbg !74
  %784 = extractelement <32 x float> %783, i64 22, !dbg !74
  %785 = fmul <32 x float> %592, %730, !dbg !74
  %786 = extractelement <32 x float> %785, i64 23, !dbg !74
  %787 = fmul <32 x float> %594, %731, !dbg !74
  %788 = extractelement <32 x float> %787, i64 24, !dbg !74
  %789 = fmul <32 x float> %596, %732, !dbg !74
  %790 = extractelement <32 x float> %789, i64 25, !dbg !74
  %791 = fmul <32 x float> %598, %733, !dbg !74
  %792 = extractelement <32 x float> %791, i64 26, !dbg !74
  %793 = fmul <32 x float> %600, %734, !dbg !74
  %794 = extractelement <32 x float> %793, i64 27, !dbg !74
  %795 = fmul <32 x float> %602, %735, !dbg !74
  %796 = extractelement <32 x float> %795, i64 28, !dbg !74
  %797 = fmul <32 x float> %604, %736, !dbg !74
  %798 = extractelement <32 x float> %797, i64 29, !dbg !74
  %799 = fmul <32 x float> %606, %737, !dbg !74
  %800 = extractelement <32 x float> %799, i64 30, !dbg !74
  %801 = fmul <32 x float> %608, %738, !dbg !74
  %802 = extractelement <32 x float> %801, i64 31, !dbg !74
  %803 = fadd float %204, %740, !dbg !75
  %804 = fadd float %205, %742, !dbg !75
  %805 = fadd float %206, %744, !dbg !75
  %806 = fadd float %207, %746, !dbg !75
  %807 = fadd float %208, %748, !dbg !75
  %808 = fadd float %209, %750, !dbg !75
  %809 = fadd float %210, %752, !dbg !75
  %810 = fadd float %211, %754, !dbg !75
  %811 = fadd float %212, %756, !dbg !75
  %812 = fadd float %213, %758, !dbg !75
  %813 = fadd float %214, %760, !dbg !75
  %814 = fadd float %215, %762, !dbg !75
  %815 = fadd float %216, %764, !dbg !75
  %816 = fadd float %217, %766, !dbg !75
  %817 = fadd float %218, %768, !dbg !75
  %818 = fadd float %219, %770, !dbg !75
  %819 = fadd float %220, %772, !dbg !75
  %820 = fadd float %221, %774, !dbg !75
  %821 = fadd float %222, %776, !dbg !75
  %822 = fadd float %223, %778, !dbg !75
  %823 = fadd float %224, %780, !dbg !75
  %824 = fadd float %225, %782, !dbg !75
  %825 = fadd float %226, %784, !dbg !75
  %826 = fadd float %227, %786, !dbg !75
  %827 = fadd float %228, %788, !dbg !75
  %828 = fadd float %229, %790, !dbg !75
  %829 = fadd float %230, %792, !dbg !75
  %830 = fadd float %231, %794, !dbg !75
  %831 = fadd float %232, %796, !dbg !75
  %832 = fadd float %233, %798, !dbg !75
  %833 = fadd float %234, %800, !dbg !75
  %834 = fadd float %235, %802, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %171, %545
  %835 = phi float [ %803, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %836 = phi float [ %804, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %837 = phi float [ %805, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %838 = phi float [ %806, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %839 = phi float [ %807, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %840 = phi float [ %808, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %841 = phi float [ %809, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %842 = phi float [ %810, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %843 = phi float [ %811, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %844 = phi float [ %812, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %845 = phi float [ %813, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %846 = phi float [ %814, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %847 = phi float [ %815, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %848 = phi float [ %816, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %849 = phi float [ %817, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %850 = phi float [ %818, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %851 = phi float [ %819, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %852 = phi float [ %820, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %853 = phi float [ %821, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %854 = phi float [ %822, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %855 = phi float [ %823, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %856 = phi float [ %824, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %857 = phi float [ %825, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %858 = phi float [ %826, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %859 = phi float [ %827, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %860 = phi float [ %828, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %861 = phi float [ %829, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %862 = phi float [ %830, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %863 = phi float [ %831, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %864 = phi float [ %832, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %865 = phi float [ %833, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %866 = phi float [ %834, %545 ], [ 0.000000e+00, %171 ], !dbg !68
  %867 = phi float [ %610, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %868 = phi float [ %611, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %869 = phi float [ %612, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %870 = phi float [ %613, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %871 = phi float [ %614, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %872 = phi float [ %615, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %873 = phi float [ %616, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %874 = phi float [ %617, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %875 = phi float [ %618, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %876 = phi float [ %619, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %877 = phi float [ %620, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %878 = phi float [ %621, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %879 = phi float [ %622, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %880 = phi float [ %623, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %881 = phi float [ %624, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %882 = phi float [ %625, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %883 = phi float [ %626, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %884 = phi float [ %627, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %885 = phi float [ %628, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %886 = phi float [ %629, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %887 = phi float [ %630, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %888 = phi float [ %631, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %889 = phi float [ %632, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %890 = phi float [ %633, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %891 = phi float [ %634, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %892 = phi float [ %635, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %893 = phi float [ %636, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %894 = phi float [ %637, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %895 = phi float [ %638, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %896 = phi float [ %639, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %897 = phi float [ %640, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %898 = phi float [ %641, %545 ], [ 1.000000e+00, %171 ], !dbg !68
  %899 = phi <32 x float> [ %706, %545 ], [ %543, %171 ]
  %900 = select <32 x i1> %170, <32 x float> %899, <32 x float> %236, !dbg !39
  %901 = select i1 %26, float %835, float %204, !dbg !76
  %902 = select i1 %26, float %836, float %205, !dbg !76
  %903 = select i1 %26, float %837, float %206, !dbg !76
  %904 = select i1 %26, float %838, float %207, !dbg !76
  %905 = select i1 %26, float %839, float %208, !dbg !76
  %906 = select i1 %26, float %840, float %209, !dbg !76
  %907 = select i1 %26, float %841, float %210, !dbg !76
  %908 = select i1 %26, float %842, float %211, !dbg !76
  %909 = select i1 %26, float %843, float %212, !dbg !76
  %910 = select i1 %26, float %844, float %213, !dbg !76
  %911 = select i1 %26, float %845, float %214, !dbg !76
  %912 = select i1 %26, float %846, float %215, !dbg !76
  %913 = select i1 %26, float %847, float %216, !dbg !76
  %914 = select i1 %26, float %848, float %217, !dbg !76
  %915 = select i1 %26, float %849, float %218, !dbg !76
  %916 = select i1 %26, float %850, float %219, !dbg !76
  %917 = select i1 %26, float %851, float %220, !dbg !76
  %918 = select i1 %26, float %852, float %221, !dbg !76
  %919 = select i1 %26, float %853, float %222, !dbg !76
  %920 = select i1 %26, float %854, float %223, !dbg !76
  %921 = select i1 %26, float %855, float %224, !dbg !76
  %922 = select i1 %26, float %856, float %225, !dbg !76
  %923 = select i1 %26, float %857, float %226, !dbg !76
  %924 = select i1 %26, float %858, float %227, !dbg !76
  %925 = select i1 %26, float %859, float %228, !dbg !76
  %926 = select i1 %26, float %860, float %229, !dbg !76
  %927 = select i1 %26, float %861, float %230, !dbg !76
  %928 = select i1 %26, float %862, float %231, !dbg !76
  %929 = select i1 %26, float %863, float %232, !dbg !76
  %930 = select i1 %26, float %864, float %233, !dbg !76
  %931 = select i1 %26, float %865, float %234, !dbg !76
  %932 = select i1 %26, float %866, float %235, !dbg !76
  %933 = select i1 %26, float %867, float %172, !dbg !77
  %934 = select i1 %26, float %868, float %173, !dbg !77
  %935 = select i1 %26, float %869, float %174, !dbg !77
  %936 = select i1 %26, float %870, float %175, !dbg !77
  %937 = select i1 %26, float %871, float %176, !dbg !77
  %938 = select i1 %26, float %872, float %177, !dbg !77
  %939 = select i1 %26, float %873, float %178, !dbg !77
  %940 = select i1 %26, float %874, float %179, !dbg !77
  %941 = select i1 %26, float %875, float %180, !dbg !77
  %942 = select i1 %26, float %876, float %181, !dbg !77
  %943 = select i1 %26, float %877, float %182, !dbg !77
  %944 = select i1 %26, float %878, float %183, !dbg !77
  %945 = select i1 %26, float %879, float %184, !dbg !77
  %946 = select i1 %26, float %880, float %185, !dbg !77
  %947 = select i1 %26, float %881, float %186, !dbg !77
  %948 = select i1 %26, float %882, float %187, !dbg !77
  %949 = select i1 %26, float %883, float %188, !dbg !77
  %950 = select i1 %26, float %884, float %189, !dbg !77
  %951 = select i1 %26, float %885, float %190, !dbg !77
  %952 = select i1 %26, float %886, float %191, !dbg !77
  %953 = select i1 %26, float %887, float %192, !dbg !77
  %954 = select i1 %26, float %888, float %193, !dbg !77
  %955 = select i1 %26, float %889, float %194, !dbg !77
  %956 = select i1 %26, float %890, float %195, !dbg !77
  %957 = select i1 %26, float %891, float %196, !dbg !77
  %958 = select i1 %26, float %892, float %197, !dbg !77
  %959 = select i1 %26, float %893, float %198, !dbg !77
  %960 = select i1 %26, float %894, float %199, !dbg !77
  %961 = select i1 %26, float %895, float %200, !dbg !77
  %962 = select i1 %26, float %896, float %201, !dbg !77
  %963 = select i1 %26, float %897, float %202, !dbg !77
  %964 = select i1 %26, float %898, float %203, !dbg !77
  %965 = getelementptr bfloat, ptr addrspace(1) %8, i64 %255, !dbg !78
  %966 = sext i32 %257 to i64, !dbg !78
  %967 = getelementptr bfloat, ptr addrspace(1) %8, i64 %966, !dbg !78
  %968 = sext i32 %258 to i64, !dbg !78
  %969 = getelementptr bfloat, ptr addrspace(1) %8, i64 %968, !dbg !78
  %970 = sext i32 %259 to i64, !dbg !78
  %971 = getelementptr bfloat, ptr addrspace(1) %8, i64 %970, !dbg !78
  %972 = extractelement <32 x float> %543, i64 0, !dbg !79
  %973 = fptrunc float %972 to bfloat, !dbg !79
  %974 = extractelement <32 x float> %543, i64 1, !dbg !79
  %975 = fptrunc float %974 to bfloat, !dbg !79
  %976 = extractelement <32 x float> %543, i64 2, !dbg !79
  %977 = fptrunc float %976 to bfloat, !dbg !79
  %978 = extractelement <32 x float> %543, i64 3, !dbg !79
  %979 = fptrunc float %978 to bfloat, !dbg !79
  %980 = extractelement <32 x float> %543, i64 4, !dbg !79
  %981 = fptrunc float %980 to bfloat, !dbg !79
  %982 = extractelement <32 x float> %543, i64 5, !dbg !79
  %983 = fptrunc float %982 to bfloat, !dbg !79
  %984 = extractelement <32 x float> %543, i64 6, !dbg !79
  %985 = fptrunc float %984 to bfloat, !dbg !79
  %986 = extractelement <32 x float> %543, i64 7, !dbg !79
  %987 = fptrunc float %986 to bfloat, !dbg !79
  %988 = extractelement <32 x float> %543, i64 8, !dbg !79
  %989 = fptrunc float %988 to bfloat, !dbg !79
  %990 = extractelement <32 x float> %543, i64 9, !dbg !79
  %991 = fptrunc float %990 to bfloat, !dbg !79
  %992 = extractelement <32 x float> %543, i64 10, !dbg !79
  %993 = fptrunc float %992 to bfloat, !dbg !79
  %994 = extractelement <32 x float> %543, i64 11, !dbg !79
  %995 = fptrunc float %994 to bfloat, !dbg !79
  %996 = extractelement <32 x float> %543, i64 12, !dbg !79
  %997 = fptrunc float %996 to bfloat, !dbg !79
  %998 = extractelement <32 x float> %543, i64 13, !dbg !79
  %999 = fptrunc float %998 to bfloat, !dbg !79
  %1000 = extractelement <32 x float> %543, i64 14, !dbg !79
  %1001 = fptrunc float %1000 to bfloat, !dbg !79
  %1002 = extractelement <32 x float> %543, i64 15, !dbg !79
  %1003 = fptrunc float %1002 to bfloat, !dbg !79
  %1004 = extractelement <32 x float> %543, i64 16, !dbg !79
  %1005 = fptrunc float %1004 to bfloat, !dbg !79
  %1006 = extractelement <32 x float> %543, i64 17, !dbg !79
  %1007 = fptrunc float %1006 to bfloat, !dbg !79
  %1008 = extractelement <32 x float> %543, i64 18, !dbg !79
  %1009 = fptrunc float %1008 to bfloat, !dbg !79
  %1010 = extractelement <32 x float> %543, i64 19, !dbg !79
  %1011 = fptrunc float %1010 to bfloat, !dbg !79
  %1012 = extractelement <32 x float> %543, i64 20, !dbg !79
  %1013 = fptrunc float %1012 to bfloat, !dbg !79
  %1014 = extractelement <32 x float> %543, i64 21, !dbg !79
  %1015 = fptrunc float %1014 to bfloat, !dbg !79
  %1016 = extractelement <32 x float> %543, i64 22, !dbg !79
  %1017 = fptrunc float %1016 to bfloat, !dbg !79
  %1018 = extractelement <32 x float> %543, i64 23, !dbg !79
  %1019 = fptrunc float %1018 to bfloat, !dbg !79
  %1020 = extractelement <32 x float> %543, i64 24, !dbg !79
  %1021 = fptrunc float %1020 to bfloat, !dbg !79
  %1022 = extractelement <32 x float> %543, i64 25, !dbg !79
  %1023 = fptrunc float %1022 to bfloat, !dbg !79
  %1024 = extractelement <32 x float> %543, i64 26, !dbg !79
  %1025 = fptrunc float %1024 to bfloat, !dbg !79
  %1026 = extractelement <32 x float> %543, i64 27, !dbg !79
  %1027 = fptrunc float %1026 to bfloat, !dbg !79
  %1028 = extractelement <32 x float> %543, i64 28, !dbg !79
  %1029 = fptrunc float %1028 to bfloat, !dbg !79
  %1030 = extractelement <32 x float> %543, i64 29, !dbg !79
  %1031 = fptrunc float %1030 to bfloat, !dbg !79
  %1032 = extractelement <32 x float> %543, i64 30, !dbg !79
  %1033 = fptrunc float %1032 to bfloat, !dbg !79
  %1034 = extractelement <32 x float> %543, i64 31, !dbg !79
  %1035 = fptrunc float %1034 to bfloat, !dbg !79
  %1036 = insertelement <2 x bfloat> poison, bfloat %973, i64 0, !dbg !79
  %1037 = insertelement <2 x bfloat> %1036, bfloat %975, i64 1, !dbg !79
  %1038 = bitcast <2 x bfloat> %1037 to i32, !dbg !79
  %1039 = insertelement <2 x bfloat> poison, bfloat %977, i64 0, !dbg !79
  %1040 = insertelement <2 x bfloat> %1039, bfloat %979, i64 1, !dbg !79
  %1041 = bitcast <2 x bfloat> %1040 to i32, !dbg !79
  %1042 = insertelement <2 x bfloat> poison, bfloat %981, i64 0, !dbg !79
  %1043 = insertelement <2 x bfloat> %1042, bfloat %983, i64 1, !dbg !79
  %1044 = bitcast <2 x bfloat> %1043 to i32, !dbg !79
  %1045 = insertelement <2 x bfloat> poison, bfloat %985, i64 0, !dbg !79
  %1046 = insertelement <2 x bfloat> %1045, bfloat %987, i64 1, !dbg !79
  %1047 = bitcast <2 x bfloat> %1046 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1038, i32 %1041, i32 %1044, i32 %1047, ptr addrspace(1) %965, i1 %26) #5, !dbg !79
  %1048 = insertelement <2 x bfloat> poison, bfloat %989, i64 0, !dbg !79
  %1049 = insertelement <2 x bfloat> %1048, bfloat %991, i64 1, !dbg !79
  %1050 = bitcast <2 x bfloat> %1049 to i32, !dbg !79
  %1051 = insertelement <2 x bfloat> poison, bfloat %993, i64 0, !dbg !79
  %1052 = insertelement <2 x bfloat> %1051, bfloat %995, i64 1, !dbg !79
  %1053 = bitcast <2 x bfloat> %1052 to i32, !dbg !79
  %1054 = insertelement <2 x bfloat> poison, bfloat %997, i64 0, !dbg !79
  %1055 = insertelement <2 x bfloat> %1054, bfloat %999, i64 1, !dbg !79
  %1056 = bitcast <2 x bfloat> %1055 to i32, !dbg !79
  %1057 = insertelement <2 x bfloat> poison, bfloat %1001, i64 0, !dbg !79
  %1058 = insertelement <2 x bfloat> %1057, bfloat %1003, i64 1, !dbg !79
  %1059 = bitcast <2 x bfloat> %1058 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1050, i32 %1053, i32 %1056, i32 %1059, ptr addrspace(1) %967, i1 %26) #5, !dbg !79
  %1060 = insertelement <2 x bfloat> poison, bfloat %1005, i64 0, !dbg !79
  %1061 = insertelement <2 x bfloat> %1060, bfloat %1007, i64 1, !dbg !79
  %1062 = bitcast <2 x bfloat> %1061 to i32, !dbg !79
  %1063 = insertelement <2 x bfloat> poison, bfloat %1009, i64 0, !dbg !79
  %1064 = insertelement <2 x bfloat> %1063, bfloat %1011, i64 1, !dbg !79
  %1065 = bitcast <2 x bfloat> %1064 to i32, !dbg !79
  %1066 = insertelement <2 x bfloat> poison, bfloat %1013, i64 0, !dbg !79
  %1067 = insertelement <2 x bfloat> %1066, bfloat %1015, i64 1, !dbg !79
  %1068 = bitcast <2 x bfloat> %1067 to i32, !dbg !79
  %1069 = insertelement <2 x bfloat> poison, bfloat %1017, i64 0, !dbg !79
  %1070 = insertelement <2 x bfloat> %1069, bfloat %1019, i64 1, !dbg !79
  %1071 = bitcast <2 x bfloat> %1070 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1062, i32 %1065, i32 %1068, i32 %1071, ptr addrspace(1) %969, i1 %26) #5, !dbg !79
  %1072 = insertelement <2 x bfloat> poison, bfloat %1021, i64 0, !dbg !79
  %1073 = insertelement <2 x bfloat> %1072, bfloat %1023, i64 1, !dbg !79
  %1074 = bitcast <2 x bfloat> %1073 to i32, !dbg !79
  %1075 = insertelement <2 x bfloat> poison, bfloat %1025, i64 0, !dbg !79
  %1076 = insertelement <2 x bfloat> %1075, bfloat %1027, i64 1, !dbg !79
  %1077 = bitcast <2 x bfloat> %1076 to i32, !dbg !79
  %1078 = insertelement <2 x bfloat> poison, bfloat %1029, i64 0, !dbg !79
  %1079 = insertelement <2 x bfloat> %1078, bfloat %1031, i64 1, !dbg !79
  %1080 = bitcast <2 x bfloat> %1079 to i32, !dbg !79
  %1081 = insertelement <2 x bfloat> poison, bfloat %1033, i64 0, !dbg !79
  %1082 = insertelement <2 x bfloat> %1081, bfloat %1035, i64 1, !dbg !79
  %1083 = bitcast <2 x bfloat> %1082 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1074, i32 %1077, i32 %1080, i32 %1083, ptr addrspace(1) %971, i1 %26) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %1084 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %1084, label %171, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %1085 = lshr i32 %19, 5, !dbg !11
  %1086 = and i32 %19, 3, !dbg !11
  %1087 = or disjoint i32 %18, %1086, !dbg !12
  %1088 = icmp slt i32 %1087, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1089 = extractelement <32 x float> %900, i64 0, !dbg !82
  %1090 = extractelement <32 x float> %900, i64 1, !dbg !82
  %1091 = fsub float %1090, %1089, !dbg !82
  %1092 = fadd float %933, %934, !dbg !84
  %1093 = fcmp oeq float %1092, 0.000000e+00, !dbg !85
  %1094 = tail call float @llvm.nvvm.div.full(float %934, float %1092), !dbg !86
  %1095 = select i1 %1093, float 0.000000e+00, float %1094, !dbg !87
  %1096 = fmul float %1091, %1095, !dbg !88
  %1097 = fadd float %1089, %1096, !dbg !89
  %1098 = fadd float %901, %902, !dbg !90
  %1099 = fmul float %1091, %1091, !dbg !91
  %1100 = fmul float %1099, %933, !dbg !92
  %1101 = fmul float %1100, %1095, !dbg !93
  %1102 = fadd float %1098, %1101, !dbg !94
  %1103 = extractelement <32 x float> %900, i64 2, !dbg !82
  %1104 = fsub float %1103, %1097, !dbg !82
  %1105 = fadd float %935, %1092, !dbg !84
  %1106 = fcmp oeq float %1105, 0.000000e+00, !dbg !85
  %1107 = tail call float @llvm.nvvm.div.full(float %935, float %1105), !dbg !86
  %1108 = select i1 %1106, float 0.000000e+00, float %1107, !dbg !87
  %1109 = fmul float %1108, %1104, !dbg !88
  %1110 = fadd float %1097, %1109, !dbg !89
  %1111 = fadd float %903, %1102, !dbg !90
  %1112 = fmul float %1104, %1104, !dbg !91
  %1113 = fmul float %1092, %1112, !dbg !92
  %1114 = fmul float %1108, %1113, !dbg !93
  %1115 = fadd float %1111, %1114, !dbg !94
  %1116 = extractelement <32 x float> %900, i64 3, !dbg !82
  %1117 = fsub float %1116, %1110, !dbg !82
  %1118 = fadd float %936, %1105, !dbg !84
  %1119 = fcmp oeq float %1118, 0.000000e+00, !dbg !85
  %1120 = tail call float @llvm.nvvm.div.full(float %936, float %1118), !dbg !86
  %1121 = select i1 %1119, float 0.000000e+00, float %1120, !dbg !87
  %1122 = fmul float %1121, %1117, !dbg !88
  %1123 = fadd float %1110, %1122, !dbg !89
  %1124 = fadd float %904, %1115, !dbg !90
  %1125 = fmul float %1117, %1117, !dbg !91
  %1126 = fmul float %1105, %1125, !dbg !92
  %1127 = fmul float %1121, %1126, !dbg !93
  %1128 = fadd float %1124, %1127, !dbg !94
  %1129 = extractelement <32 x float> %900, i64 4, !dbg !82
  %1130 = fsub float %1129, %1123, !dbg !82
  %1131 = fadd float %937, %1118, !dbg !84
  %1132 = fcmp oeq float %1131, 0.000000e+00, !dbg !85
  %1133 = tail call float @llvm.nvvm.div.full(float %937, float %1131), !dbg !86
  %1134 = select i1 %1132, float 0.000000e+00, float %1133, !dbg !87
  %1135 = fmul float %1134, %1130, !dbg !88
  %1136 = fadd float %1123, %1135, !dbg !89
  %1137 = fadd float %905, %1128, !dbg !90
  %1138 = fmul float %1130, %1130, !dbg !91
  %1139 = fmul float %1118, %1138, !dbg !92
  %1140 = fmul float %1134, %1139, !dbg !93
  %1141 = fadd float %1137, %1140, !dbg !94
  %1142 = extractelement <32 x float> %900, i64 5, !dbg !82
  %1143 = fsub float %1142, %1136, !dbg !82
  %1144 = fadd float %938, %1131, !dbg !84
  %1145 = fcmp oeq float %1144, 0.000000e+00, !dbg !85
  %1146 = tail call float @llvm.nvvm.div.full(float %938, float %1144), !dbg !86
  %1147 = select i1 %1145, float 0.000000e+00, float %1146, !dbg !87
  %1148 = fmul float %1147, %1143, !dbg !88
  %1149 = fadd float %1136, %1148, !dbg !89
  %1150 = fadd float %906, %1141, !dbg !90
  %1151 = fmul float %1143, %1143, !dbg !91
  %1152 = fmul float %1131, %1151, !dbg !92
  %1153 = fmul float %1147, %1152, !dbg !93
  %1154 = fadd float %1150, %1153, !dbg !94
  %1155 = extractelement <32 x float> %900, i64 6, !dbg !82
  %1156 = fsub float %1155, %1149, !dbg !82
  %1157 = fadd float %939, %1144, !dbg !84
  %1158 = fcmp oeq float %1157, 0.000000e+00, !dbg !85
  %1159 = tail call float @llvm.nvvm.div.full(float %939, float %1157), !dbg !86
  %1160 = select i1 %1158, float 0.000000e+00, float %1159, !dbg !87
  %1161 = fmul float %1160, %1156, !dbg !88
  %1162 = fadd float %1149, %1161, !dbg !89
  %1163 = fadd float %907, %1154, !dbg !90
  %1164 = fmul float %1156, %1156, !dbg !91
  %1165 = fmul float %1144, %1164, !dbg !92
  %1166 = fmul float %1160, %1165, !dbg !93
  %1167 = fadd float %1163, %1166, !dbg !94
  %1168 = extractelement <32 x float> %900, i64 7, !dbg !82
  %1169 = fsub float %1168, %1162, !dbg !82
  %1170 = fadd float %940, %1157, !dbg !84
  %1171 = fcmp oeq float %1170, 0.000000e+00, !dbg !85
  %1172 = tail call float @llvm.nvvm.div.full(float %940, float %1170), !dbg !86
  %1173 = select i1 %1171, float 0.000000e+00, float %1172, !dbg !87
  %1174 = fmul float %1173, %1169, !dbg !88
  %1175 = fadd float %1162, %1174, !dbg !89
  %1176 = fadd float %908, %1167, !dbg !90
  %1177 = fmul float %1169, %1169, !dbg !91
  %1178 = fmul float %1157, %1177, !dbg !92
  %1179 = fmul float %1173, %1178, !dbg !93
  %1180 = fadd float %1176, %1179, !dbg !94
  %1181 = extractelement <32 x float> %900, i64 8, !dbg !82
  %1182 = extractelement <32 x float> %900, i64 9, !dbg !82
  %1183 = fsub float %1182, %1181, !dbg !82
  %1184 = fadd float %941, %942, !dbg !84
  %1185 = fcmp oeq float %1184, 0.000000e+00, !dbg !85
  %1186 = tail call float @llvm.nvvm.div.full(float %942, float %1184), !dbg !86
  %1187 = select i1 %1185, float 0.000000e+00, float %1186, !dbg !87
  %1188 = fmul float %1183, %1187, !dbg !88
  %1189 = fadd float %1181, %1188, !dbg !89
  %1190 = fadd float %909, %910, !dbg !90
  %1191 = fmul float %1183, %1183, !dbg !91
  %1192 = fmul float %1191, %941, !dbg !92
  %1193 = fmul float %1192, %1187, !dbg !93
  %1194 = fadd float %1190, %1193, !dbg !94
  %1195 = extractelement <32 x float> %900, i64 10, !dbg !82
  %1196 = fsub float %1195, %1189, !dbg !82
  %1197 = fadd float %943, %1184, !dbg !84
  %1198 = fcmp oeq float %1197, 0.000000e+00, !dbg !85
  %1199 = tail call float @llvm.nvvm.div.full(float %943, float %1197), !dbg !86
  %1200 = select i1 %1198, float 0.000000e+00, float %1199, !dbg !87
  %1201 = fmul float %1200, %1196, !dbg !88
  %1202 = fadd float %1189, %1201, !dbg !89
  %1203 = fadd float %911, %1194, !dbg !90
  %1204 = fmul float %1196, %1196, !dbg !91
  %1205 = fmul float %1184, %1204, !dbg !92
  %1206 = fmul float %1200, %1205, !dbg !93
  %1207 = fadd float %1203, %1206, !dbg !94
  %1208 = extractelement <32 x float> %900, i64 11, !dbg !82
  %1209 = fsub float %1208, %1202, !dbg !82
  %1210 = fadd float %944, %1197, !dbg !84
  %1211 = fcmp oeq float %1210, 0.000000e+00, !dbg !85
  %1212 = tail call float @llvm.nvvm.div.full(float %944, float %1210), !dbg !86
  %1213 = select i1 %1211, float 0.000000e+00, float %1212, !dbg !87
  %1214 = fmul float %1213, %1209, !dbg !88
  %1215 = fadd float %1202, %1214, !dbg !89
  %1216 = fadd float %912, %1207, !dbg !90
  %1217 = fmul float %1209, %1209, !dbg !91
  %1218 = fmul float %1197, %1217, !dbg !92
  %1219 = fmul float %1213, %1218, !dbg !93
  %1220 = fadd float %1216, %1219, !dbg !94
  %1221 = extractelement <32 x float> %900, i64 12, !dbg !82
  %1222 = fsub float %1221, %1215, !dbg !82
  %1223 = fadd float %945, %1210, !dbg !84
  %1224 = fcmp oeq float %1223, 0.000000e+00, !dbg !85
  %1225 = tail call float @llvm.nvvm.div.full(float %945, float %1223), !dbg !86
  %1226 = select i1 %1224, float 0.000000e+00, float %1225, !dbg !87
  %1227 = fmul float %1226, %1222, !dbg !88
  %1228 = fadd float %1215, %1227, !dbg !89
  %1229 = fadd float %913, %1220, !dbg !90
  %1230 = fmul float %1222, %1222, !dbg !91
  %1231 = fmul float %1210, %1230, !dbg !92
  %1232 = fmul float %1226, %1231, !dbg !93
  %1233 = fadd float %1229, %1232, !dbg !94
  %1234 = extractelement <32 x float> %900, i64 13, !dbg !82
  %1235 = fsub float %1234, %1228, !dbg !82
  %1236 = fadd float %946, %1223, !dbg !84
  %1237 = fcmp oeq float %1236, 0.000000e+00, !dbg !85
  %1238 = tail call float @llvm.nvvm.div.full(float %946, float %1236), !dbg !86
  %1239 = select i1 %1237, float 0.000000e+00, float %1238, !dbg !87
  %1240 = fmul float %1239, %1235, !dbg !88
  %1241 = fadd float %1228, %1240, !dbg !89
  %1242 = fadd float %914, %1233, !dbg !90
  %1243 = fmul float %1235, %1235, !dbg !91
  %1244 = fmul float %1223, %1243, !dbg !92
  %1245 = fmul float %1239, %1244, !dbg !93
  %1246 = fadd float %1242, %1245, !dbg !94
  %1247 = extractelement <32 x float> %900, i64 14, !dbg !82
  %1248 = fsub float %1247, %1241, !dbg !82
  %1249 = fadd float %947, %1236, !dbg !84
  %1250 = fcmp oeq float %1249, 0.000000e+00, !dbg !85
  %1251 = tail call float @llvm.nvvm.div.full(float %947, float %1249), !dbg !86
  %1252 = select i1 %1250, float 0.000000e+00, float %1251, !dbg !87
  %1253 = fmul float %1252, %1248, !dbg !88
  %1254 = fadd float %1241, %1253, !dbg !89
  %1255 = fadd float %915, %1246, !dbg !90
  %1256 = fmul float %1248, %1248, !dbg !91
  %1257 = fmul float %1236, %1256, !dbg !92
  %1258 = fmul float %1252, %1257, !dbg !93
  %1259 = fadd float %1255, %1258, !dbg !94
  %1260 = extractelement <32 x float> %900, i64 15, !dbg !82
  %1261 = fsub float %1260, %1254, !dbg !82
  %1262 = fadd float %948, %1249, !dbg !84
  %1263 = fcmp oeq float %1262, 0.000000e+00, !dbg !85
  %1264 = tail call float @llvm.nvvm.div.full(float %948, float %1262), !dbg !86
  %1265 = select i1 %1263, float 0.000000e+00, float %1264, !dbg !87
  %1266 = fmul float %1265, %1261, !dbg !88
  %1267 = fadd float %1254, %1266, !dbg !89
  %1268 = fadd float %916, %1259, !dbg !90
  %1269 = fmul float %1261, %1261, !dbg !91
  %1270 = fmul float %1249, %1269, !dbg !92
  %1271 = fmul float %1265, %1270, !dbg !93
  %1272 = fadd float %1268, %1271, !dbg !94
  %1273 = extractelement <32 x float> %900, i64 16, !dbg !82
  %1274 = extractelement <32 x float> %900, i64 17, !dbg !82
  %1275 = fsub float %1274, %1273, !dbg !82
  %1276 = fadd float %949, %950, !dbg !84
  %1277 = fcmp oeq float %1276, 0.000000e+00, !dbg !85
  %1278 = tail call float @llvm.nvvm.div.full(float %950, float %1276), !dbg !86
  %1279 = select i1 %1277, float 0.000000e+00, float %1278, !dbg !87
  %1280 = fmul float %1275, %1279, !dbg !88
  %1281 = fadd float %1273, %1280, !dbg !89
  %1282 = fadd float %917, %918, !dbg !90
  %1283 = fmul float %1275, %1275, !dbg !91
  %1284 = fmul float %1283, %949, !dbg !92
  %1285 = fmul float %1284, %1279, !dbg !93
  %1286 = fadd float %1282, %1285, !dbg !94
  %1287 = extractelement <32 x float> %900, i64 18, !dbg !82
  %1288 = fsub float %1287, %1281, !dbg !82
  %1289 = fadd float %951, %1276, !dbg !84
  %1290 = fcmp oeq float %1289, 0.000000e+00, !dbg !85
  %1291 = tail call float @llvm.nvvm.div.full(float %951, float %1289), !dbg !86
  %1292 = select i1 %1290, float 0.000000e+00, float %1291, !dbg !87
  %1293 = fmul float %1292, %1288, !dbg !88
  %1294 = fadd float %1281, %1293, !dbg !89
  %1295 = fadd float %919, %1286, !dbg !90
  %1296 = fmul float %1288, %1288, !dbg !91
  %1297 = fmul float %1276, %1296, !dbg !92
  %1298 = fmul float %1292, %1297, !dbg !93
  %1299 = fadd float %1295, %1298, !dbg !94
  %1300 = extractelement <32 x float> %900, i64 19, !dbg !82
  %1301 = fsub float %1300, %1294, !dbg !82
  %1302 = fadd float %952, %1289, !dbg !84
  %1303 = fcmp oeq float %1302, 0.000000e+00, !dbg !85
  %1304 = tail call float @llvm.nvvm.div.full(float %952, float %1302), !dbg !86
  %1305 = select i1 %1303, float 0.000000e+00, float %1304, !dbg !87
  %1306 = fmul float %1305, %1301, !dbg !88
  %1307 = fadd float %1294, %1306, !dbg !89
  %1308 = fadd float %920, %1299, !dbg !90
  %1309 = fmul float %1301, %1301, !dbg !91
  %1310 = fmul float %1289, %1309, !dbg !92
  %1311 = fmul float %1305, %1310, !dbg !93
  %1312 = fadd float %1308, %1311, !dbg !94
  %1313 = extractelement <32 x float> %900, i64 20, !dbg !82
  %1314 = fsub float %1313, %1307, !dbg !82
  %1315 = fadd float %953, %1302, !dbg !84
  %1316 = fcmp oeq float %1315, 0.000000e+00, !dbg !85
  %1317 = tail call float @llvm.nvvm.div.full(float %953, float %1315), !dbg !86
  %1318 = select i1 %1316, float 0.000000e+00, float %1317, !dbg !87
  %1319 = fmul float %1318, %1314, !dbg !88
  %1320 = fadd float %1307, %1319, !dbg !89
  %1321 = fadd float %921, %1312, !dbg !90
  %1322 = fmul float %1314, %1314, !dbg !91
  %1323 = fmul float %1302, %1322, !dbg !92
  %1324 = fmul float %1318, %1323, !dbg !93
  %1325 = fadd float %1321, %1324, !dbg !94
  %1326 = extractelement <32 x float> %900, i64 21, !dbg !82
  %1327 = fsub float %1326, %1320, !dbg !82
  %1328 = fadd float %954, %1315, !dbg !84
  %1329 = fcmp oeq float %1328, 0.000000e+00, !dbg !85
  %1330 = tail call float @llvm.nvvm.div.full(float %954, float %1328), !dbg !86
  %1331 = select i1 %1329, float 0.000000e+00, float %1330, !dbg !87
  %1332 = fmul float %1331, %1327, !dbg !88
  %1333 = fadd float %1320, %1332, !dbg !89
  %1334 = fadd float %922, %1325, !dbg !90
  %1335 = fmul float %1327, %1327, !dbg !91
  %1336 = fmul float %1315, %1335, !dbg !92
  %1337 = fmul float %1331, %1336, !dbg !93
  %1338 = fadd float %1334, %1337, !dbg !94
  %1339 = extractelement <32 x float> %900, i64 22, !dbg !82
  %1340 = fsub float %1339, %1333, !dbg !82
  %1341 = fadd float %955, %1328, !dbg !84
  %1342 = fcmp oeq float %1341, 0.000000e+00, !dbg !85
  %1343 = tail call float @llvm.nvvm.div.full(float %955, float %1341), !dbg !86
  %1344 = select i1 %1342, float 0.000000e+00, float %1343, !dbg !87
  %1345 = fmul float %1344, %1340, !dbg !88
  %1346 = fadd float %1333, %1345, !dbg !89
  %1347 = fadd float %923, %1338, !dbg !90
  %1348 = fmul float %1340, %1340, !dbg !91
  %1349 = fmul float %1328, %1348, !dbg !92
  %1350 = fmul float %1344, %1349, !dbg !93
  %1351 = fadd float %1347, %1350, !dbg !94
  %1352 = extractelement <32 x float> %900, i64 23, !dbg !82
  %1353 = fsub float %1352, %1346, !dbg !82
  %1354 = fadd float %956, %1341, !dbg !84
  %1355 = fcmp oeq float %1354, 0.000000e+00, !dbg !85
  %1356 = tail call float @llvm.nvvm.div.full(float %956, float %1354), !dbg !86
  %1357 = select i1 %1355, float 0.000000e+00, float %1356, !dbg !87
  %1358 = fmul float %1357, %1353, !dbg !88
  %1359 = fadd float %1346, %1358, !dbg !89
  %1360 = fadd float %924, %1351, !dbg !90
  %1361 = fmul float %1353, %1353, !dbg !91
  %1362 = fmul float %1341, %1361, !dbg !92
  %1363 = fmul float %1357, %1362, !dbg !93
  %1364 = fadd float %1360, %1363, !dbg !94
  %1365 = extractelement <32 x float> %900, i64 24, !dbg !82
  %1366 = extractelement <32 x float> %900, i64 25, !dbg !82
  %1367 = fsub float %1366, %1365, !dbg !82
  %1368 = fadd float %957, %958, !dbg !84
  %1369 = fcmp oeq float %1368, 0.000000e+00, !dbg !85
  %1370 = tail call float @llvm.nvvm.div.full(float %958, float %1368), !dbg !86
  %1371 = select i1 %1369, float 0.000000e+00, float %1370, !dbg !87
  %1372 = fmul float %1367, %1371, !dbg !88
  %1373 = fadd float %1365, %1372, !dbg !89
  %1374 = fadd float %925, %926, !dbg !90
  %1375 = fmul float %1367, %1367, !dbg !91
  %1376 = fmul float %1375, %957, !dbg !92
  %1377 = fmul float %1376, %1371, !dbg !93
  %1378 = fadd float %1374, %1377, !dbg !94
  %1379 = extractelement <32 x float> %900, i64 26, !dbg !82
  %1380 = fsub float %1379, %1373, !dbg !82
  %1381 = fadd float %959, %1368, !dbg !84
  %1382 = fcmp oeq float %1381, 0.000000e+00, !dbg !85
  %1383 = tail call float @llvm.nvvm.div.full(float %959, float %1381), !dbg !86
  %1384 = select i1 %1382, float 0.000000e+00, float %1383, !dbg !87
  %1385 = fmul float %1384, %1380, !dbg !88
  %1386 = fadd float %1373, %1385, !dbg !89
  %1387 = fadd float %927, %1378, !dbg !90
  %1388 = fmul float %1380, %1380, !dbg !91
  %1389 = fmul float %1368, %1388, !dbg !92
  %1390 = fmul float %1384, %1389, !dbg !93
  %1391 = fadd float %1387, %1390, !dbg !94
  %1392 = extractelement <32 x float> %900, i64 27, !dbg !82
  %1393 = fsub float %1392, %1386, !dbg !82
  %1394 = fadd float %960, %1381, !dbg !84
  %1395 = fcmp oeq float %1394, 0.000000e+00, !dbg !85
  %1396 = tail call float @llvm.nvvm.div.full(float %960, float %1394), !dbg !86
  %1397 = select i1 %1395, float 0.000000e+00, float %1396, !dbg !87
  %1398 = fmul float %1397, %1393, !dbg !88
  %1399 = fadd float %1386, %1398, !dbg !89
  %1400 = fadd float %928, %1391, !dbg !90
  %1401 = fmul float %1393, %1393, !dbg !91
  %1402 = fmul float %1381, %1401, !dbg !92
  %1403 = fmul float %1397, %1402, !dbg !93
  %1404 = fadd float %1400, %1403, !dbg !94
  %1405 = extractelement <32 x float> %900, i64 28, !dbg !82
  %1406 = fsub float %1405, %1399, !dbg !82
  %1407 = fadd float %961, %1394, !dbg !84
  %1408 = fcmp oeq float %1407, 0.000000e+00, !dbg !85
  %1409 = tail call float @llvm.nvvm.div.full(float %961, float %1407), !dbg !86
  %1410 = select i1 %1408, float 0.000000e+00, float %1409, !dbg !87
  %1411 = fmul float %1410, %1406, !dbg !88
  %1412 = fadd float %1399, %1411, !dbg !89
  %1413 = fadd float %929, %1404, !dbg !90
  %1414 = fmul float %1406, %1406, !dbg !91
  %1415 = fmul float %1394, %1414, !dbg !92
  %1416 = fmul float %1410, %1415, !dbg !93
  %1417 = fadd float %1413, %1416, !dbg !94
  %1418 = extractelement <32 x float> %900, i64 29, !dbg !82
  %1419 = fsub float %1418, %1412, !dbg !82
  %1420 = fadd float %962, %1407, !dbg !84
  %1421 = fcmp oeq float %1420, 0.000000e+00, !dbg !85
  %1422 = tail call float @llvm.nvvm.div.full(float %962, float %1420), !dbg !86
  %1423 = select i1 %1421, float 0.000000e+00, float %1422, !dbg !87
  %1424 = fmul float %1423, %1419, !dbg !88
  %1425 = fadd float %1412, %1424, !dbg !89
  %1426 = fadd float %930, %1417, !dbg !90
  %1427 = fmul float %1419, %1419, !dbg !91
  %1428 = fmul float %1407, %1427, !dbg !92
  %1429 = fmul float %1423, %1428, !dbg !93
  %1430 = fadd float %1426, %1429, !dbg !94
  %1431 = extractelement <32 x float> %900, i64 30, !dbg !82
  %1432 = fsub float %1431, %1425, !dbg !82
  %1433 = fadd float %963, %1420, !dbg !84
  %1434 = fcmp oeq float %1433, 0.000000e+00, !dbg !85
  %1435 = tail call float @llvm.nvvm.div.full(float %963, float %1433), !dbg !86
  %1436 = select i1 %1434, float 0.000000e+00, float %1435, !dbg !87
  %1437 = fmul float %1436, %1432, !dbg !88
  %1438 = fadd float %1425, %1437, !dbg !89
  %1439 = fadd float %931, %1430, !dbg !90
  %1440 = fmul float %1432, %1432, !dbg !91
  %1441 = fmul float %1420, %1440, !dbg !92
  %1442 = fmul float %1436, %1441, !dbg !93
  %1443 = fadd float %1439, %1442, !dbg !94
  %1444 = extractelement <32 x float> %900, i64 31, !dbg !82
  %1445 = fsub float %1444, %1438, !dbg !82
  %1446 = fadd float %964, %1433, !dbg !84
  %1447 = fcmp oeq float %1446, 0.000000e+00, !dbg !85
  %1448 = tail call float @llvm.nvvm.div.full(float %964, float %1446), !dbg !86
  %1449 = select i1 %1447, float 0.000000e+00, float %1448, !dbg !87
  %1450 = fmul float %1449, %1445, !dbg !88
  %1451 = fadd float %1438, %1450, !dbg !89
  %1452 = fadd float %932, %1443, !dbg !90
  %1453 = fmul float %1445, %1445, !dbg !91
  %1454 = fmul float %1433, %1453, !dbg !92
  %1455 = fmul float %1449, %1454, !dbg !93
  %1456 = fadd float %1452, %1455, !dbg !94
  %1457 = bitcast float %1175 to i32, !dbg !80
  %1458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1457, i32 16, i32 31), !dbg !80
  %1459 = bitcast i32 %1458 to float, !dbg !80
  %1460 = bitcast float %1180 to i32, !dbg !80
  %1461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1460, i32 16, i32 31), !dbg !80
  %1462 = bitcast i32 %1461 to float, !dbg !80
  %1463 = bitcast float %1170 to i32, !dbg !80
  %1464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1463, i32 16, i32 31), !dbg !80
  %1465 = bitcast i32 %1464 to float, !dbg !80
  %1466 = fsub float %1459, %1175, !dbg !82
  %1467 = fadd float %1170, %1465, !dbg !84
  %1468 = fcmp oeq float %1467, 0.000000e+00, !dbg !85
  %1469 = tail call float @llvm.nvvm.div.full(float %1465, float %1467), !dbg !86
  %1470 = select i1 %1468, float 0.000000e+00, float %1469, !dbg !87
  %1471 = fmul float %1466, %1470, !dbg !88
  %1472 = fadd float %1175, %1471, !dbg !89
  %1473 = fadd float %1180, %1462, !dbg !90
  %1474 = fmul float %1466, %1466, !dbg !91
  %1475 = fmul float %1170, %1474, !dbg !92
  %1476 = fmul float %1475, %1470, !dbg !93
  %1477 = fadd float %1473, %1476, !dbg !94
  %1478 = bitcast float %1472 to i32, !dbg !80
  %1479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1478, i32 8, i32 31), !dbg !80
  %1480 = bitcast i32 %1479 to float, !dbg !80
  %1481 = bitcast float %1477 to i32, !dbg !80
  %1482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1481, i32 8, i32 31), !dbg !80
  %1483 = bitcast i32 %1482 to float, !dbg !80
  %1484 = bitcast float %1467 to i32, !dbg !80
  %1485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1484, i32 8, i32 31), !dbg !80
  %1486 = bitcast i32 %1485 to float, !dbg !80
  %1487 = fsub float %1480, %1472, !dbg !82
  %1488 = fadd float %1467, %1486, !dbg !84
  %1489 = fcmp oeq float %1488, 0.000000e+00, !dbg !85
  %1490 = tail call float @llvm.nvvm.div.full(float %1486, float %1488), !dbg !86
  %1491 = select i1 %1489, float 0.000000e+00, float %1490, !dbg !87
  %1492 = fmul float %1487, %1491, !dbg !88
  %1493 = fadd float %1472, %1492, !dbg !89
  %1494 = fadd float %1477, %1483, !dbg !90
  %1495 = fmul float %1487, %1487, !dbg !91
  %1496 = fmul float %1467, %1495, !dbg !92
  %1497 = fmul float %1491, %1496, !dbg !93
  %1498 = fadd float %1494, %1497, !dbg !94
  %1499 = bitcast float %1493 to i32, !dbg !80
  %1500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1499, i32 4, i32 31), !dbg !80
  %1501 = bitcast i32 %1500 to float, !dbg !80
  %1502 = bitcast float %1498 to i32, !dbg !80
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 4, i32 31), !dbg !80
  %1504 = bitcast i32 %1503 to float, !dbg !80
  %1505 = bitcast float %1488 to i32, !dbg !80
  %1506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1505, i32 4, i32 31), !dbg !80
  %1507 = bitcast i32 %1506 to float, !dbg !80
  %1508 = fsub float %1501, %1493, !dbg !82
  %1509 = fadd float %1488, %1507, !dbg !84
  %1510 = fcmp oeq float %1509, 0.000000e+00, !dbg !85
  %1511 = tail call float @llvm.nvvm.div.full(float %1507, float %1509), !dbg !86
  %1512 = select i1 %1510, float 0.000000e+00, float %1511, !dbg !87
  %1513 = fmul float %1508, %1512, !dbg !88
  %1514 = fadd float %1493, %1513, !dbg !89
  %1515 = fadd float %1498, %1504, !dbg !90
  %1516 = fmul float %1508, %1508, !dbg !91
  %1517 = fmul float %1488, %1516, !dbg !92
  %1518 = fmul float %1512, %1517, !dbg !93
  %1519 = fadd float %1515, %1518, !dbg !94
  %1520 = bitcast float %1514 to i32, !dbg !80
  %1521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1520, i32 2, i32 31), !dbg !80
  %1522 = bitcast i32 %1521 to float, !dbg !80
  %1523 = bitcast float %1519 to i32, !dbg !80
  %1524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1523, i32 2, i32 31), !dbg !80
  %1525 = bitcast i32 %1524 to float, !dbg !80
  %1526 = bitcast float %1509 to i32, !dbg !80
  %1527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1526, i32 2, i32 31), !dbg !80
  %1528 = bitcast i32 %1527 to float, !dbg !80
  %1529 = fsub float %1522, %1514, !dbg !82
  %1530 = fadd float %1509, %1528, !dbg !84
  %1531 = fcmp oeq float %1530, 0.000000e+00, !dbg !85
  %1532 = tail call float @llvm.nvvm.div.full(float %1528, float %1530), !dbg !86
  %1533 = select i1 %1531, float 0.000000e+00, float %1532, !dbg !87
  %1534 = fmul float %1529, %1533, !dbg !88
  %1535 = fadd float %1514, %1534, !dbg !89
  %1536 = fadd float %1519, %1525, !dbg !90
  %1537 = fmul float %1529, %1529, !dbg !91
  %1538 = fmul float %1509, %1537, !dbg !92
  %1539 = fmul float %1533, %1538, !dbg !93
  %1540 = fadd float %1536, %1539, !dbg !94
  %1541 = bitcast float %1535 to i32, !dbg !80
  %1542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1541, i32 1, i32 31), !dbg !80
  %1543 = bitcast i32 %1542 to float, !dbg !80
  %1544 = bitcast float %1540 to i32, !dbg !80
  %1545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1544, i32 1, i32 31), !dbg !80
  %1546 = bitcast i32 %1545 to float, !dbg !80
  %1547 = bitcast float %1530 to i32, !dbg !80
  %1548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1547, i32 1, i32 31), !dbg !80
  %1549 = bitcast i32 %1548 to float, !dbg !80
  %1550 = fsub float %1543, %1535, !dbg !82
  %1551 = fadd float %1530, %1549, !dbg !84
  %1552 = fcmp oeq float %1551, 0.000000e+00, !dbg !85
  %1553 = tail call float @llvm.nvvm.div.full(float %1549, float %1551), !dbg !86
  %1554 = select i1 %1552, float 0.000000e+00, float %1553, !dbg !87
  %1555 = fmul float %1550, %1554, !dbg !88
  %1556 = fadd float %1535, %1555, !dbg !89
  %1557 = fadd float %1540, %1546, !dbg !90
  %1558 = fmul float %1550, %1550, !dbg !91
  %1559 = fmul float %1530, %1558, !dbg !92
  %1560 = fmul float %1554, %1559, !dbg !93
  %1561 = fadd float %1557, %1560, !dbg !94
  %1562 = bitcast float %1267 to i32, !dbg !80
  %1563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1562, i32 16, i32 31), !dbg !80
  %1564 = bitcast i32 %1563 to float, !dbg !80
  %1565 = bitcast float %1272 to i32, !dbg !80
  %1566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1565, i32 16, i32 31), !dbg !80
  %1567 = bitcast i32 %1566 to float, !dbg !80
  %1568 = bitcast float %1262 to i32, !dbg !80
  %1569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1568, i32 16, i32 31), !dbg !80
  %1570 = bitcast i32 %1569 to float, !dbg !80
  %1571 = fsub float %1564, %1267, !dbg !82
  %1572 = fadd float %1262, %1570, !dbg !84
  %1573 = fcmp oeq float %1572, 0.000000e+00, !dbg !85
  %1574 = tail call float @llvm.nvvm.div.full(float %1570, float %1572), !dbg !86
  %1575 = select i1 %1573, float 0.000000e+00, float %1574, !dbg !87
  %1576 = fmul float %1571, %1575, !dbg !88
  %1577 = fadd float %1267, %1576, !dbg !89
  %1578 = fadd float %1272, %1567, !dbg !90
  %1579 = fmul float %1571, %1571, !dbg !91
  %1580 = fmul float %1262, %1579, !dbg !92
  %1581 = fmul float %1580, %1575, !dbg !93
  %1582 = fadd float %1578, %1581, !dbg !94
  %1583 = bitcast float %1577 to i32, !dbg !80
  %1584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1583, i32 8, i32 31), !dbg !80
  %1585 = bitcast i32 %1584 to float, !dbg !80
  %1586 = bitcast float %1582 to i32, !dbg !80
  %1587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1586, i32 8, i32 31), !dbg !80
  %1588 = bitcast i32 %1587 to float, !dbg !80
  %1589 = bitcast float %1572 to i32, !dbg !80
  %1590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1589, i32 8, i32 31), !dbg !80
  %1591 = bitcast i32 %1590 to float, !dbg !80
  %1592 = fsub float %1585, %1577, !dbg !82
  %1593 = fadd float %1572, %1591, !dbg !84
  %1594 = fcmp oeq float %1593, 0.000000e+00, !dbg !85
  %1595 = tail call float @llvm.nvvm.div.full(float %1591, float %1593), !dbg !86
  %1596 = select i1 %1594, float 0.000000e+00, float %1595, !dbg !87
  %1597 = fmul float %1592, %1596, !dbg !88
  %1598 = fadd float %1577, %1597, !dbg !89
  %1599 = fadd float %1582, %1588, !dbg !90
  %1600 = fmul float %1592, %1592, !dbg !91
  %1601 = fmul float %1572, %1600, !dbg !92
  %1602 = fmul float %1596, %1601, !dbg !93
  %1603 = fadd float %1599, %1602, !dbg !94
  %1604 = bitcast float %1598 to i32, !dbg !80
  %1605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1604, i32 4, i32 31), !dbg !80
  %1606 = bitcast i32 %1605 to float, !dbg !80
  %1607 = bitcast float %1603 to i32, !dbg !80
  %1608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1607, i32 4, i32 31), !dbg !80
  %1609 = bitcast i32 %1608 to float, !dbg !80
  %1610 = bitcast float %1593 to i32, !dbg !80
  %1611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1610, i32 4, i32 31), !dbg !80
  %1612 = bitcast i32 %1611 to float, !dbg !80
  %1613 = fsub float %1606, %1598, !dbg !82
  %1614 = fadd float %1593, %1612, !dbg !84
  %1615 = fcmp oeq float %1614, 0.000000e+00, !dbg !85
  %1616 = tail call float @llvm.nvvm.div.full(float %1612, float %1614), !dbg !86
  %1617 = select i1 %1615, float 0.000000e+00, float %1616, !dbg !87
  %1618 = fmul float %1613, %1617, !dbg !88
  %1619 = fadd float %1598, %1618, !dbg !89
  %1620 = fadd float %1603, %1609, !dbg !90
  %1621 = fmul float %1613, %1613, !dbg !91
  %1622 = fmul float %1593, %1621, !dbg !92
  %1623 = fmul float %1617, %1622, !dbg !93
  %1624 = fadd float %1620, %1623, !dbg !94
  %1625 = bitcast float %1619 to i32, !dbg !80
  %1626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1625, i32 2, i32 31), !dbg !80
  %1627 = bitcast i32 %1626 to float, !dbg !80
  %1628 = bitcast float %1624 to i32, !dbg !80
  %1629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1628, i32 2, i32 31), !dbg !80
  %1630 = bitcast i32 %1629 to float, !dbg !80
  %1631 = bitcast float %1614 to i32, !dbg !80
  %1632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1631, i32 2, i32 31), !dbg !80
  %1633 = bitcast i32 %1632 to float, !dbg !80
  %1634 = fsub float %1627, %1619, !dbg !82
  %1635 = fadd float %1614, %1633, !dbg !84
  %1636 = fcmp oeq float %1635, 0.000000e+00, !dbg !85
  %1637 = tail call float @llvm.nvvm.div.full(float %1633, float %1635), !dbg !86
  %1638 = select i1 %1636, float 0.000000e+00, float %1637, !dbg !87
  %1639 = fmul float %1634, %1638, !dbg !88
  %1640 = fadd float %1619, %1639, !dbg !89
  %1641 = fadd float %1624, %1630, !dbg !90
  %1642 = fmul float %1634, %1634, !dbg !91
  %1643 = fmul float %1614, %1642, !dbg !92
  %1644 = fmul float %1638, %1643, !dbg !93
  %1645 = fadd float %1641, %1644, !dbg !94
  %1646 = bitcast float %1640 to i32, !dbg !80
  %1647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1646, i32 1, i32 31), !dbg !80
  %1648 = bitcast i32 %1647 to float, !dbg !80
  %1649 = bitcast float %1645 to i32, !dbg !80
  %1650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1649, i32 1, i32 31), !dbg !80
  %1651 = bitcast i32 %1650 to float, !dbg !80
  %1652 = bitcast float %1635 to i32, !dbg !80
  %1653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1652, i32 1, i32 31), !dbg !80
  %1654 = bitcast i32 %1653 to float, !dbg !80
  %1655 = fsub float %1648, %1640, !dbg !82
  %1656 = fadd float %1635, %1654, !dbg !84
  %1657 = fcmp oeq float %1656, 0.000000e+00, !dbg !85
  %1658 = tail call float @llvm.nvvm.div.full(float %1654, float %1656), !dbg !86
  %1659 = select i1 %1657, float 0.000000e+00, float %1658, !dbg !87
  %1660 = fmul float %1655, %1659, !dbg !88
  %1661 = fadd float %1640, %1660, !dbg !89
  %1662 = fadd float %1645, %1651, !dbg !90
  %1663 = fmul float %1655, %1655, !dbg !91
  %1664 = fmul float %1635, %1663, !dbg !92
  %1665 = fmul float %1659, %1664, !dbg !93
  %1666 = fadd float %1662, %1665, !dbg !94
  %1667 = bitcast float %1359 to i32, !dbg !80
  %1668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1667, i32 16, i32 31), !dbg !80
  %1669 = bitcast i32 %1668 to float, !dbg !80
  %1670 = bitcast float %1364 to i32, !dbg !80
  %1671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1670, i32 16, i32 31), !dbg !80
  %1672 = bitcast i32 %1671 to float, !dbg !80
  %1673 = bitcast float %1354 to i32, !dbg !80
  %1674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1673, i32 16, i32 31), !dbg !80
  %1675 = bitcast i32 %1674 to float, !dbg !80
  %1676 = fsub float %1669, %1359, !dbg !82
  %1677 = fadd float %1354, %1675, !dbg !84
  %1678 = fcmp oeq float %1677, 0.000000e+00, !dbg !85
  %1679 = tail call float @llvm.nvvm.div.full(float %1675, float %1677), !dbg !86
  %1680 = select i1 %1678, float 0.000000e+00, float %1679, !dbg !87
  %1681 = fmul float %1676, %1680, !dbg !88
  %1682 = fadd float %1359, %1681, !dbg !89
  %1683 = fadd float %1364, %1672, !dbg !90
  %1684 = fmul float %1676, %1676, !dbg !91
  %1685 = fmul float %1354, %1684, !dbg !92
  %1686 = fmul float %1685, %1680, !dbg !93
  %1687 = fadd float %1683, %1686, !dbg !94
  %1688 = bitcast float %1682 to i32, !dbg !80
  %1689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1688, i32 8, i32 31), !dbg !80
  %1690 = bitcast i32 %1689 to float, !dbg !80
  %1691 = bitcast float %1687 to i32, !dbg !80
  %1692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1691, i32 8, i32 31), !dbg !80
  %1693 = bitcast i32 %1692 to float, !dbg !80
  %1694 = bitcast float %1677 to i32, !dbg !80
  %1695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1694, i32 8, i32 31), !dbg !80
  %1696 = bitcast i32 %1695 to float, !dbg !80
  %1697 = fsub float %1690, %1682, !dbg !82
  %1698 = fadd float %1677, %1696, !dbg !84
  %1699 = fcmp oeq float %1698, 0.000000e+00, !dbg !85
  %1700 = tail call float @llvm.nvvm.div.full(float %1696, float %1698), !dbg !86
  %1701 = select i1 %1699, float 0.000000e+00, float %1700, !dbg !87
  %1702 = fmul float %1697, %1701, !dbg !88
  %1703 = fadd float %1682, %1702, !dbg !89
  %1704 = fadd float %1687, %1693, !dbg !90
  %1705 = fmul float %1697, %1697, !dbg !91
  %1706 = fmul float %1677, %1705, !dbg !92
  %1707 = fmul float %1701, %1706, !dbg !93
  %1708 = fadd float %1704, %1707, !dbg !94
  %1709 = bitcast float %1703 to i32, !dbg !80
  %1710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1709, i32 4, i32 31), !dbg !80
  %1711 = bitcast i32 %1710 to float, !dbg !80
  %1712 = bitcast float %1708 to i32, !dbg !80
  %1713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1712, i32 4, i32 31), !dbg !80
  %1714 = bitcast i32 %1713 to float, !dbg !80
  %1715 = bitcast float %1698 to i32, !dbg !80
  %1716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1715, i32 4, i32 31), !dbg !80
  %1717 = bitcast i32 %1716 to float, !dbg !80
  %1718 = fsub float %1711, %1703, !dbg !82
  %1719 = fadd float %1698, %1717, !dbg !84
  %1720 = fcmp oeq float %1719, 0.000000e+00, !dbg !85
  %1721 = tail call float @llvm.nvvm.div.full(float %1717, float %1719), !dbg !86
  %1722 = select i1 %1720, float 0.000000e+00, float %1721, !dbg !87
  %1723 = fmul float %1718, %1722, !dbg !88
  %1724 = fadd float %1703, %1723, !dbg !89
  %1725 = fadd float %1708, %1714, !dbg !90
  %1726 = fmul float %1718, %1718, !dbg !91
  %1727 = fmul float %1698, %1726, !dbg !92
  %1728 = fmul float %1722, %1727, !dbg !93
  %1729 = fadd float %1725, %1728, !dbg !94
  %1730 = bitcast float %1724 to i32, !dbg !80
  %1731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1730, i32 2, i32 31), !dbg !80
  %1732 = bitcast i32 %1731 to float, !dbg !80
  %1733 = bitcast float %1729 to i32, !dbg !80
  %1734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1733, i32 2, i32 31), !dbg !80
  %1735 = bitcast i32 %1734 to float, !dbg !80
  %1736 = bitcast float %1719 to i32, !dbg !80
  %1737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1736, i32 2, i32 31), !dbg !80
  %1738 = bitcast i32 %1737 to float, !dbg !80
  %1739 = fsub float %1732, %1724, !dbg !82
  %1740 = fadd float %1719, %1738, !dbg !84
  %1741 = fcmp oeq float %1740, 0.000000e+00, !dbg !85
  %1742 = tail call float @llvm.nvvm.div.full(float %1738, float %1740), !dbg !86
  %1743 = select i1 %1741, float 0.000000e+00, float %1742, !dbg !87
  %1744 = fmul float %1739, %1743, !dbg !88
  %1745 = fadd float %1724, %1744, !dbg !89
  %1746 = fadd float %1729, %1735, !dbg !90
  %1747 = fmul float %1739, %1739, !dbg !91
  %1748 = fmul float %1719, %1747, !dbg !92
  %1749 = fmul float %1743, %1748, !dbg !93
  %1750 = fadd float %1746, %1749, !dbg !94
  %1751 = bitcast float %1745 to i32, !dbg !80
  %1752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1751, i32 1, i32 31), !dbg !80
  %1753 = bitcast i32 %1752 to float, !dbg !80
  %1754 = bitcast float %1750 to i32, !dbg !80
  %1755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1754, i32 1, i32 31), !dbg !80
  %1756 = bitcast i32 %1755 to float, !dbg !80
  %1757 = bitcast float %1740 to i32, !dbg !80
  %1758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1757, i32 1, i32 31), !dbg !80
  %1759 = bitcast i32 %1758 to float, !dbg !80
  %1760 = fsub float %1753, %1745, !dbg !82
  %1761 = fadd float %1740, %1759, !dbg !84
  %1762 = fcmp oeq float %1761, 0.000000e+00, !dbg !85
  %1763 = tail call float @llvm.nvvm.div.full(float %1759, float %1761), !dbg !86
  %1764 = select i1 %1762, float 0.000000e+00, float %1763, !dbg !87
  %1765 = fmul float %1760, %1764, !dbg !88
  %1766 = fadd float %1745, %1765, !dbg !89
  %1767 = fadd float %1750, %1756, !dbg !90
  %1768 = fmul float %1760, %1760, !dbg !91
  %1769 = fmul float %1740, %1768, !dbg !92
  %1770 = fmul float %1764, %1769, !dbg !93
  %1771 = fadd float %1767, %1770, !dbg !94
  %1772 = bitcast float %1451 to i32, !dbg !80
  %1773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1772, i32 16, i32 31), !dbg !80
  %1774 = bitcast i32 %1773 to float, !dbg !80
  %1775 = bitcast float %1456 to i32, !dbg !80
  %1776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1775, i32 16, i32 31), !dbg !80
  %1777 = bitcast i32 %1776 to float, !dbg !80
  %1778 = bitcast float %1446 to i32, !dbg !80
  %1779 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1778, i32 16, i32 31), !dbg !80
  %1780 = bitcast i32 %1779 to float, !dbg !80
  %1781 = fsub float %1774, %1451, !dbg !82
  %1782 = fadd float %1446, %1780, !dbg !84
  %1783 = fcmp oeq float %1782, 0.000000e+00, !dbg !85
  %1784 = tail call float @llvm.nvvm.div.full(float %1780, float %1782), !dbg !86
  %1785 = select i1 %1783, float 0.000000e+00, float %1784, !dbg !87
  %1786 = fmul float %1781, %1785, !dbg !88
  %1787 = fadd float %1451, %1786, !dbg !89
  %1788 = fadd float %1456, %1777, !dbg !90
  %1789 = fmul float %1781, %1781, !dbg !91
  %1790 = fmul float %1446, %1789, !dbg !92
  %1791 = fmul float %1790, %1785, !dbg !93
  %1792 = fadd float %1788, %1791, !dbg !94
  %1793 = bitcast float %1787 to i32, !dbg !80
  %1794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1793, i32 8, i32 31), !dbg !80
  %1795 = bitcast i32 %1794 to float, !dbg !80
  %1796 = bitcast float %1792 to i32, !dbg !80
  %1797 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1796, i32 8, i32 31), !dbg !80
  %1798 = bitcast i32 %1797 to float, !dbg !80
  %1799 = bitcast float %1782 to i32, !dbg !80
  %1800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1799, i32 8, i32 31), !dbg !80
  %1801 = bitcast i32 %1800 to float, !dbg !80
  %1802 = fsub float %1795, %1787, !dbg !82
  %1803 = fadd float %1782, %1801, !dbg !84
  %1804 = fcmp oeq float %1803, 0.000000e+00, !dbg !85
  %1805 = tail call float @llvm.nvvm.div.full(float %1801, float %1803), !dbg !86
  %1806 = select i1 %1804, float 0.000000e+00, float %1805, !dbg !87
  %1807 = fmul float %1802, %1806, !dbg !88
  %1808 = fadd float %1787, %1807, !dbg !89
  %1809 = fadd float %1792, %1798, !dbg !90
  %1810 = fmul float %1802, %1802, !dbg !91
  %1811 = fmul float %1782, %1810, !dbg !92
  %1812 = fmul float %1806, %1811, !dbg !93
  %1813 = fadd float %1809, %1812, !dbg !94
  %1814 = bitcast float %1808 to i32, !dbg !80
  %1815 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1814, i32 4, i32 31), !dbg !80
  %1816 = bitcast i32 %1815 to float, !dbg !80
  %1817 = bitcast float %1813 to i32, !dbg !80
  %1818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1817, i32 4, i32 31), !dbg !80
  %1819 = bitcast i32 %1818 to float, !dbg !80
  %1820 = bitcast float %1803 to i32, !dbg !80
  %1821 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1820, i32 4, i32 31), !dbg !80
  %1822 = bitcast i32 %1821 to float, !dbg !80
  %1823 = fsub float %1816, %1808, !dbg !82
  %1824 = fadd float %1803, %1822, !dbg !84
  %1825 = fcmp oeq float %1824, 0.000000e+00, !dbg !85
  %1826 = tail call float @llvm.nvvm.div.full(float %1822, float %1824), !dbg !86
  %1827 = select i1 %1825, float 0.000000e+00, float %1826, !dbg !87
  %1828 = fmul float %1823, %1827, !dbg !88
  %1829 = fadd float %1808, %1828, !dbg !89
  %1830 = fadd float %1813, %1819, !dbg !90
  %1831 = fmul float %1823, %1823, !dbg !91
  %1832 = fmul float %1803, %1831, !dbg !92
  %1833 = fmul float %1827, %1832, !dbg !93
  %1834 = fadd float %1830, %1833, !dbg !94
  %1835 = bitcast float %1829 to i32, !dbg !80
  %1836 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1835, i32 2, i32 31), !dbg !80
  %1837 = bitcast i32 %1836 to float, !dbg !80
  %1838 = bitcast float %1834 to i32, !dbg !80
  %1839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1838, i32 2, i32 31), !dbg !80
  %1840 = bitcast i32 %1839 to float, !dbg !80
  %1841 = bitcast float %1824 to i32, !dbg !80
  %1842 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1841, i32 2, i32 31), !dbg !80
  %1843 = bitcast i32 %1842 to float, !dbg !80
  %1844 = fsub float %1837, %1829, !dbg !82
  %1845 = fadd float %1824, %1843, !dbg !84
  %1846 = fcmp oeq float %1845, 0.000000e+00, !dbg !85
  %1847 = tail call float @llvm.nvvm.div.full(float %1843, float %1845), !dbg !86
  %1848 = select i1 %1846, float 0.000000e+00, float %1847, !dbg !87
  %1849 = fmul float %1844, %1848, !dbg !88
  %1850 = fadd float %1829, %1849, !dbg !89
  %1851 = fadd float %1834, %1840, !dbg !90
  %1852 = fmul float %1844, %1844, !dbg !91
  %1853 = fmul float %1824, %1852, !dbg !92
  %1854 = fmul float %1848, %1853, !dbg !93
  %1855 = fadd float %1851, %1854, !dbg !94
  %1856 = bitcast float %1850 to i32, !dbg !80
  %1857 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1856, i32 1, i32 31), !dbg !80
  %1858 = bitcast i32 %1857 to float, !dbg !80
  %1859 = bitcast float %1855 to i32, !dbg !80
  %1860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1859, i32 1, i32 31), !dbg !80
  %1861 = bitcast i32 %1860 to float, !dbg !80
  %1862 = bitcast float %1845 to i32, !dbg !80
  %1863 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1862, i32 1, i32 31), !dbg !80
  %1864 = bitcast i32 %1863 to float, !dbg !80
  %1865 = fsub float %1858, %1850, !dbg !82
  %1866 = fadd float %1845, %1864, !dbg !84
  %1867 = fcmp oeq float %1866, 0.000000e+00, !dbg !85
  %1868 = tail call float @llvm.nvvm.div.full(float %1864, float %1866), !dbg !86
  %1869 = select i1 %1867, float 0.000000e+00, float %1868, !dbg !87
  %1870 = fmul float %1865, %1869, !dbg !88
  %1871 = fadd float %1850, %1870, !dbg !89
  %1872 = fadd float %1855, %1861, !dbg !90
  %1873 = fmul float %1865, %1865, !dbg !91
  %1874 = fmul float %1845, %1873, !dbg !92
  %1875 = fmul float %1869, %1874, !dbg !93
  %1876 = fadd float %1872, %1875, !dbg !94
  %1877 = and i32 %1085, 3, !dbg !80
  %1878 = icmp eq i32 %21, 0, !dbg !80
  %1879 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1877, !dbg !80
  %1880 = bitcast float %1556 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1879, <1 x i32> %1880, i1 %1878) #5, !dbg !80
  %1881 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1877, !dbg !80
  %1882 = bitcast float %1561 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1881, <1 x i32> %1882, i1 %1878) #5, !dbg !80
  %1883 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1877, !dbg !80
  %1884 = bitcast float %1551 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1883, <1 x i32> %1884, i1 %1878) #5, !dbg !80
  %1885 = or disjoint i32 %1877, 4, !dbg !80
  %1886 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1885, !dbg !80
  %1887 = bitcast float %1661 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1886, <1 x i32> %1887, i1 %1878) #5, !dbg !80
  %1888 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1885, !dbg !80
  %1889 = bitcast float %1666 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1888, <1 x i32> %1889, i1 %1878) #5, !dbg !80
  %1890 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1885, !dbg !80
  %1891 = bitcast float %1656 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1890, <1 x i32> %1891, i1 %1878) #5, !dbg !80
  %1892 = or disjoint i32 %1877, 8, !dbg !80
  %1893 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1892, !dbg !80
  %1894 = bitcast float %1766 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1893, <1 x i32> %1894, i1 %1878) #5, !dbg !80
  %1895 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1892, !dbg !80
  %1896 = bitcast float %1771 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1895, <1 x i32> %1896, i1 %1878) #5, !dbg !80
  %1897 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1892, !dbg !80
  %1898 = bitcast float %1761 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1897, <1 x i32> %1898, i1 %1878) #5, !dbg !80
  %1899 = or disjoint i32 %1877, 12, !dbg !80
  %1900 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1899, !dbg !80
  %1901 = bitcast float %1871 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1900, <1 x i32> %1901, i1 %1878) #5, !dbg !80
  %1902 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1899, !dbg !80
  %1903 = bitcast float %1876 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1902, <1 x i32> %1903, i1 %1878) #5, !dbg !80
  %1904 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1899, !dbg !80
  %1905 = bitcast float %1866 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1904, <1 x i32> %1905, i1 %1878) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1906 = icmp slt i32 %19, 16, !dbg !80
  %1907 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1908 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1907, i1 %1906) #5, !dbg !80
  %1909 = bitcast i32 %1908 to float, !dbg !80
  %1910 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !80
  %1911 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1910, i1 %1906) #5, !dbg !80
  %1912 = bitcast i32 %1911 to float, !dbg !80
  %1913 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %1914 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1913, i1 %1906) #5, !dbg !80
  %1915 = bitcast i32 %1914 to float, !dbg !80
  %1916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1908, i32 2, i32 31), !dbg !80
  %1917 = bitcast i32 %1916 to float, !dbg !80
  %1918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1911, i32 2, i32 31), !dbg !80
  %1919 = bitcast i32 %1918 to float, !dbg !80
  %1920 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1914, i32 2, i32 31), !dbg !80
  %1921 = bitcast i32 %1920 to float, !dbg !80
  %1922 = fsub float %1917, %1909, !dbg !82
  %1923 = fadd float %1915, %1921, !dbg !84
  %1924 = fcmp oeq float %1923, 0.000000e+00, !dbg !85
  %1925 = tail call float @llvm.nvvm.div.full(float %1921, float %1923), !dbg !86
  %1926 = select i1 %1924, float 0.000000e+00, float %1925, !dbg !87
  %1927 = fmul float %1922, %1926, !dbg !88
  %1928 = fadd float %1927, %1909, !dbg !89
  %1929 = fadd float %1912, %1919, !dbg !90
  %1930 = fmul float %1922, %1922, !dbg !91
  %1931 = fmul float %1930, %1915, !dbg !92
  %1932 = fmul float %1931, %1926, !dbg !93
  %1933 = fadd float %1929, %1932, !dbg !94
  %1934 = bitcast float %1928 to i32, !dbg !80
  %1935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1934, i32 1, i32 31), !dbg !80
  %1936 = bitcast i32 %1935 to float, !dbg !80
  %1937 = bitcast float %1933 to i32, !dbg !80
  %1938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1937, i32 1, i32 31), !dbg !80
  %1939 = bitcast i32 %1938 to float, !dbg !80
  %1940 = bitcast float %1923 to i32, !dbg !80
  %1941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1940, i32 1, i32 31), !dbg !80
  %1942 = bitcast i32 %1941 to float, !dbg !80
  %1943 = fsub float %1936, %1928, !dbg !82
  %1944 = fadd float %1923, %1942, !dbg !84
  %1945 = fcmp oeq float %1944, 0.000000e+00, !dbg !85
  %1946 = tail call float @llvm.nvvm.div.full(float %1942, float %1944), !dbg !86
  %1947 = select i1 %1945, float 0.000000e+00, float %1946, !dbg !87
  %1948 = fmul float %1943, %1947, !dbg !88
  %1949 = fadd float %1928, %1948, !dbg !89
  %1950 = fadd float %1933, %1939, !dbg !90
  %1951 = fmul float %1943, %1943, !dbg !91
  %1952 = fmul float %1923, %1951, !dbg !92
  %1953 = fmul float %1947, %1952, !dbg !93
  %1954 = fadd float %1950, %1953, !dbg !94
  %1955 = icmp eq i32 %1086, 0, !dbg !80
  %1956 = and i1 %1906, %1955, !dbg !80
  %1957 = bitcast float %1949 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1907, <1 x i32> %1957, i1 %1956) #5, !dbg !80
  %1958 = bitcast float %1954 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1910, <1 x i32> %1958, i1 %1956) #5, !dbg !80
  %1959 = bitcast float %1944 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1913, <1 x i32> %1959, i1 %1956) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1960 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1961 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !80
  %1962 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %1963 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !80
  %1964 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %1965 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 80), align 16, !dbg !80
  %1966 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %1967 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 112), align 16, !dbg !80
  %1968 = tail call float @llvm.nvvm.div.full(float %1964, float 3.072000e+03), !dbg !95
  %1969 = tail call float @llvm.nvvm.div.full(float %1965, float 3.072000e+03), !dbg !95
  %1970 = tail call float @llvm.nvvm.div.full(float %1966, float 3.072000e+03), !dbg !95
  %1971 = tail call float @llvm.nvvm.div.full(float %1967, float 3.072000e+03), !dbg !95
  %1972 = fadd float %1968, 0x3EB0C6F7A0000000, !dbg !96
  %1973 = fadd float %1969, 0x3EB0C6F7A0000000, !dbg !96
  %1974 = fadd float %1970, 0x3EB0C6F7A0000000, !dbg !96
  %1975 = fadd float %1971, 0x3EB0C6F7A0000000, !dbg !96
  %1976 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1978 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1979 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1980 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1981 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1982 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1983 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i273 = icmp eq i32 %1983, 0, !dbg !97
  br i1 %.not.i273, label %1986, label %1984, !dbg !97

1984:                                             ; preds = %__nv_rsqrtf.exit
  %1985 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1972), !dbg !97
  br label %__nv_rsqrtf.exit275, !dbg !97

1986:                                             ; preds = %__nv_rsqrtf.exit
  %1987 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1972), !dbg !97
  br label %__nv_rsqrtf.exit275, !dbg !97

__nv_rsqrtf.exit275:                              ; preds = %1984, %1986
  %.0.i274 = phi float [ %1985, %1984 ], [ %1987, %1986 ], !dbg !97
  %1988 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1989 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1990 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1991 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1992 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1993 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1994 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1995 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i297 = icmp eq i32 %1995, 0, !dbg !97
  br i1 %.not.i297, label %1998, label %1996, !dbg !97

1996:                                             ; preds = %__nv_rsqrtf.exit275
  %1997 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1973), !dbg !97
  br label %__nv_rsqrtf.exit299, !dbg !97

1998:                                             ; preds = %__nv_rsqrtf.exit275
  %1999 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1973), !dbg !97
  br label %__nv_rsqrtf.exit299, !dbg !97

__nv_rsqrtf.exit299:                              ; preds = %1996, %1998
  %.0.i298 = phi float [ %1997, %1996 ], [ %1999, %1998 ], !dbg !97
  %2000 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2001 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2002 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2003 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2004 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2005 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2006 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2007 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i321 = icmp eq i32 %2007, 0, !dbg !97
  br i1 %.not.i321, label %2010, label %2008, !dbg !97

2008:                                             ; preds = %__nv_rsqrtf.exit299
  %2009 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1974), !dbg !97
  br label %__nv_rsqrtf.exit323, !dbg !97

2010:                                             ; preds = %__nv_rsqrtf.exit299
  %2011 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1974), !dbg !97
  br label %__nv_rsqrtf.exit323, !dbg !97

__nv_rsqrtf.exit323:                              ; preds = %2008, %2010
  %.0.i322 = phi float [ %2009, %2008 ], [ %2011, %2010 ], !dbg !97
  %2012 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2013 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2014 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2015 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2016 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2017 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2018 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %2019 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i345 = icmp eq i32 %2019, 0, !dbg !97
  br i1 %.not.i345, label %2022, label %2020, !dbg !97

2020:                                             ; preds = %__nv_rsqrtf.exit323
  %2021 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1975), !dbg !97
  br label %__nv_rsqrtf.exit347, !dbg !97

2022:                                             ; preds = %__nv_rsqrtf.exit323
  %2023 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1975), !dbg !97
  br label %__nv_rsqrtf.exit347, !dbg !97

__nv_rsqrtf.exit347:                              ; preds = %2020, %2022
  %.0.i346 = phi float [ %2021, %2020 ], [ %2023, %2022 ], !dbg !97
  %invariant.gep352 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !98
  %2024 = lshr i32 %30, 7
  %2025 = and i32 %2024, 8
  %2026 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %2025
  %2027 = getelementptr bfloat, ptr addrspace(3) %2026, i32 %141
  %2028 = getelementptr bfloat, ptr addrspace(3) %2026, i32 %145
  %2029 = insertelement <2 x i1> poison, i1 %26, i64 0, !dbg !99
  %2030 = shufflevector <2 x i1> %2029, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !99
  %2031 = insertelement <2 x float> poison, float %.0.i346, i64 0, !dbg !100
  %2032 = shufflevector <2 x float> %2031, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %2033 = insertelement <2 x float> poison, float %1963, i64 0, !dbg !101
  %2034 = shufflevector <2 x float> %2033, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %2035 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !99
  %2036 = shufflevector <4 x i1> %2035, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !99
  %2037 = insertelement <32 x float> poison, float %.0.i274, i64 0, !dbg !100
  %2038 = insertelement <32 x float> %2037, float %.0.i298, i64 1, !dbg !100
  %2039 = insertelement <32 x float> %2038, float %.0.i322, i64 2, !dbg !100
  %2040 = insertelement <32 x float> %2039, float %.0.i346, i64 3, !dbg !100
  %2041 = shufflevector <32 x float> %2040, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !100
  %2042 = insertelement <32 x float> poison, float %1960, i64 0, !dbg !101
  %2043 = insertelement <32 x float> %2042, float %1961, i64 1, !dbg !101
  %2044 = insertelement <32 x float> %2043, float %1962, i64 2, !dbg !101
  %2045 = insertelement <32 x float> %2044, float %1963, i64 3, !dbg !101
  %2046 = shufflevector <32 x float> %2045, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !101
  %2047 = insertelement <4 x float> poison, float %.0.i322, i64 0, !dbg !100
  %2048 = insertelement <4 x float> %2047, float %.0.i298, i64 1, !dbg !100
  %2049 = shufflevector <4 x float> %2048, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !100
  %2050 = insertelement <4 x float> poison, float %1962, i64 0, !dbg !101
  %2051 = insertelement <4 x float> %2050, float %1961, i64 1, !dbg !101
  %2052 = shufflevector <4 x float> %2051, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !101
  %2053 = insertelement <16 x i1> poison, i1 %26, i64 0, !dbg !102
  %2054 = shufflevector <16 x i1> %2053, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !102
  %invariant.op = or i32 %28, 12292, !dbg !98
  br label %2055, !dbg !98

2055:                                             ; preds = %__nv_rsqrtf.exit347, %2055
  %indvars.iv513 = phi i64 [ 0, %__nv_rsqrtf.exit347 ], [ %indvars.iv.next514, %2055 ]
  %2056 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit347 ], [ %2294, %2055 ]
  %2057 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit347 ], [ %2295, %2055 ]
  %2058 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit347 ], [ %2320, %2055 ]
  %2059 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2318, %2055 ]
  %2060 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2319, %2055 ]
  %2061 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2321, %2055 ]
  %2062 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit347 ], [ %2296, %2055 ]
  %2063 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit347 ], [ %2297, %2055 ]
  %2064 = or disjoint i64 %indvars.iv513, %163, !dbg !103
  %2065 = or disjoint i64 %indvars.iv513, %162, !dbg !103
  %2066 = trunc i64 %indvars.iv513 to i32, !dbg !104
  %2067 = or disjoint i32 %31, %2066, !dbg !104
  %2068 = add i32 %2067, %107, !dbg !104
  %2069 = trunc i64 %indvars.iv513 to i32, !dbg !104
  %2070 = or disjoint i32 %32, %2069, !dbg !104
  %2071 = add i32 %2070, %107, !dbg !104
  %2072 = add i32 %2067, %108, !dbg !104
  %2073 = add i32 %2070, %108, !dbg !104
  %2074 = or disjoint i64 %2064, %164, !dbg !104
  %2075 = trunc nuw nsw i64 %2064 to i32, !dbg !104
  %2076 = add i32 %110, %2075, !dbg !104
  %2077 = add i32 %111, %2075, !dbg !104
  %2078 = add i32 %112, %2075, !dbg !104
  %2079 = sext i32 %2068 to i64, !dbg !105
  %2080 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2079, !dbg !105
  %2081 = sext i32 %2071 to i64, !dbg !105
  %2082 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2081, !dbg !105
  %2083 = sext i32 %2072 to i64, !dbg !105
  %2084 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2083, !dbg !105
  %2085 = sext i32 %2073 to i64, !dbg !105
  %2086 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2085, !dbg !105
  %2087 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2080, i1 %24) #5, !dbg !106
  %2088 = extractvalue { i32, i32, i32, i32 } %2087, 0, !dbg !106
  %2089 = extractvalue { i32, i32, i32, i32 } %2087, 1, !dbg !106
  %2090 = extractvalue { i32, i32, i32, i32 } %2087, 2, !dbg !106
  %2091 = extractvalue { i32, i32, i32, i32 } %2087, 3, !dbg !106
  %2092 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2082, i1 %24) #5, !dbg !106
  %2093 = extractvalue { i32, i32, i32, i32 } %2092, 0, !dbg !106
  %2094 = extractvalue { i32, i32, i32, i32 } %2092, 1, !dbg !106
  %2095 = extractvalue { i32, i32, i32, i32 } %2092, 2, !dbg !106
  %2096 = extractvalue { i32, i32, i32, i32 } %2092, 3, !dbg !106
  %2097 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2084, i1 %25) #5, !dbg !106
  %2098 = extractvalue { i32, i32, i32, i32 } %2097, 0, !dbg !106
  %2099 = extractvalue { i32, i32, i32, i32 } %2097, 1, !dbg !106
  %2100 = extractvalue { i32, i32, i32, i32 } %2097, 2, !dbg !106
  %2101 = extractvalue { i32, i32, i32, i32 } %2097, 3, !dbg !106
  %2102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2086, i1 %25) #5, !dbg !106
  %2103 = extractvalue { i32, i32, i32, i32 } %2102, 0, !dbg !106
  %2104 = extractvalue { i32, i32, i32, i32 } %2102, 1, !dbg !106
  %2105 = extractvalue { i32, i32, i32, i32 } %2102, 2, !dbg !106
  %2106 = extractvalue { i32, i32, i32, i32 } %2102, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2027, i32 %2088, i32 %2089, i32 %2090, i32 %2091, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2028, i32 %2093, i32 %2094, i32 %2095, i32 %2096, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %2107 = or disjoint i64 %2064, 12288, !dbg !107
  %2108 = trunc nuw nsw i64 %indvars.iv513 to i32
  %.reass.reass.reass = or i32 %2108, %invariant.op
  %2109 = getelementptr float, ptr addrspace(1) %1, i64 %2107, !dbg !108
  %2110 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %2111 = getelementptr float, ptr addrspace(1) %1, i64 %2110, !dbg !108
  %2112 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2107, !dbg !109
  %2113 = add nuw nsw i64 %2064, 9216, !dbg !110
  %2114 = getelementptr float, ptr addrspace(1) %1, i64 %2113, !dbg !111
  %gep353 = getelementptr float, ptr addrspace(1) %invariant.gep352, i64 %2065, !dbg !111
  %2115 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2113, !dbg !112
  %2116 = fcmp uno <32 x float> %2061, zeroinitializer, !dbg !113
  %2117 = fcmp uno <4 x float> %2062, zeroinitializer, !dbg !115
  %2118 = fcmp uno float %2056, 0.000000e+00, !dbg !115
  %2119 = fcmp uno float %2057, 0.000000e+00, !dbg !115
  %2120 = fcmp uno <16 x float> %2063, zeroinitializer, !dbg !115
  %2121 = fcmp uno <4 x float> %2060, zeroinitializer, !dbg !113
  %2122 = fcmp uno <4 x float> %2059, zeroinitializer, !dbg !113
  %2123 = fcmp uno <2 x float> %2058, zeroinitializer, !dbg !113
  %2124 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !100
  %2125 = load <2 x bfloat>, ptr addrspace(3) %167, align 4, !dbg !100
  %2126 = load <4 x bfloat>, ptr addrspace(3) %168, align 8, !dbg !100
  %2127 = shufflevector <8 x bfloat> %2124, <8 x bfloat> poison, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2128 = shufflevector <8 x bfloat> %2124, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2129 = shufflevector <32 x bfloat> %2127, <32 x bfloat> %2128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !117
  %2130 = shufflevector <4 x bfloat> %2126, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2131 = shufflevector <32 x bfloat> %2129, <32 x bfloat> %2130, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2132 = load <2 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !100
  %2133 = shufflevector <2 x bfloat> %2132, <2 x bfloat> poison, <2 x i32> <i32 1, i32 0>, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2027, i32 %2098, i32 %2099, i32 %2100, i32 %2101, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2028, i32 %2103, i32 %2104, i32 %2105, i32 %2106, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %2134 = load <2 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !100
  %2135 = shufflevector <2 x bfloat> %2134, <2 x bfloat> poison, <2 x i32> <i32 1, i32 0>, !dbg !100
  %2136 = load <4 x bfloat>, ptr addrspace(3) %165, align 4, !dbg !100
  %2137 = load <2 x bfloat>, ptr addrspace(3) %166, align 4, !dbg !100
  %2138 = load <2 x bfloat>, ptr addrspace(3) %167, align 4, !dbg !100
  %2139 = load <4 x bfloat>, ptr addrspace(3) %168, align 8, !dbg !100
  %2140 = shufflevector <2 x bfloat> %2135, <2 x bfloat> %2133, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !117
  %2141 = fpext <4 x bfloat> %2140 to <4 x float>, !dbg !117
  %2142 = shufflevector <4 x bfloat> %2136, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2143 = shufflevector <32 x bfloat> %2131, <32 x bfloat> %2142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2144 = shufflevector <4 x bfloat> %2139, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2145 = shufflevector <32 x bfloat> %2143, <32 x bfloat> %2144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2146 = shufflevector <2 x bfloat> %2125, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2147 = shufflevector <32 x bfloat> %2145, <32 x bfloat> %2146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 32, i32 33, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2148 = shufflevector <2 x bfloat> %2137, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2149 = shufflevector <32 x bfloat> %2147, <32 x bfloat> %2148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2150 = shufflevector <2 x bfloat> %2138, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %2151 = shufflevector <32 x bfloat> %2149, <32 x bfloat> %2150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 32, i32 33, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !117
  %2152 = fpext <32 x bfloat> %2151 to <32 x float>, !dbg !117
  %2153 = fsub <4 x float> %2141, %2052, !dbg !101
  %2154 = fsub <32 x float> %2152, %2046, !dbg !101
  %2155 = fmul <4 x float> %2049, %2153, !dbg !100
  %2156 = fmul <32 x float> %2041, %2154, !dbg !100
  %2157 = load <2 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !100
  %2158 = fpext <2 x bfloat> %2157 to <2 x float>, !dbg !117
  %2159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2109, i1 true) #5, !dbg !118
  %2160 = extractvalue { i32, i32, i32, i32 } %2159, 0, !dbg !118
  %2161 = extractvalue { i32, i32, i32, i32 } %2159, 1, !dbg !118
  %2162 = extractvalue { i32, i32, i32, i32 } %2159, 2, !dbg !118
  %2163 = extractvalue { i32, i32, i32, i32 } %2159, 3, !dbg !118
  %2164 = insertelement <2 x i32> poison, i32 %2160, i64 0, !dbg !118
  %2165 = insertelement <2 x i32> %2164, i32 %2161, i64 1, !dbg !118
  %2166 = bitcast <2 x i32> %2165 to <2 x float>, !dbg !118
  %2167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2111, i1 true) #5, !dbg !118
  %2168 = extractvalue { i32, i32, i32, i32 } %2167, 0, !dbg !118
  %2169 = extractvalue { i32, i32, i32, i32 } %2167, 1, !dbg !118
  %2170 = extractvalue { i32, i32, i32, i32 } %2167, 2, !dbg !118
  %2171 = extractvalue { i32, i32, i32, i32 } %2167, 3, !dbg !118
  %2172 = insertelement <4 x i32> poison, i32 %2162, i64 0, !dbg !118
  %2173 = insertelement <4 x i32> %2172, i32 %2163, i64 1, !dbg !118
  %2174 = insertelement <4 x i32> %2173, i32 %2168, i64 2, !dbg !118
  %2175 = insertelement <4 x i32> %2174, i32 %2169, i64 3, !dbg !118
  %2176 = bitcast <4 x i32> %2175 to <4 x float>, !dbg !118
  %2177 = insertelement <2 x i32> poison, i32 %2170, i64 0, !dbg !118
  %2178 = insertelement <2 x i32> %2177, i32 %2171, i64 1, !dbg !118
  %2179 = bitcast <2 x i32> %2178 to <2 x float>, !dbg !118
  %2180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2112, i1 true) #5, !dbg !119
  %2181 = extractvalue { i32, i32, i32, i32 } %2180, 0, !dbg !119
  %2182 = bitcast i32 %2181 to <2 x bfloat>, !dbg !119
  %2183 = extractvalue { i32, i32, i32, i32 } %2180, 1, !dbg !119
  %2184 = bitcast i32 %2183 to <2 x bfloat>, !dbg !119
  %2185 = extractvalue { i32, i32, i32, i32 } %2180, 2, !dbg !119
  %2186 = bitcast i32 %2185 to <2 x bfloat>, !dbg !119
  %2187 = extractvalue { i32, i32, i32, i32 } %2180, 3, !dbg !119
  %2188 = bitcast i32 %2187 to <2 x bfloat>, !dbg !119
  %2189 = fpext <2 x bfloat> %2182 to <2 x float>, !dbg !120
  %2190 = shufflevector <2 x bfloat> %2184, <2 x bfloat> %2186, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %2191 = fpext <4 x bfloat> %2190 to <4 x float>, !dbg !120
  %2192 = fpext <2 x bfloat> %2188 to <2 x float>, !dbg !120
  %2193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2114, i1 true) #5, !dbg !121
  %2194 = extractvalue { i32, i32, i32, i32 } %2193, 0, !dbg !121
  %2195 = extractvalue { i32, i32, i32, i32 } %2193, 1, !dbg !121
  %2196 = extractvalue { i32, i32, i32, i32 } %2193, 2, !dbg !121
  %2197 = extractvalue { i32, i32, i32, i32 } %2193, 3, !dbg !121
  %2198 = insertelement <2 x i32> poison, i32 %2194, i64 0, !dbg !121
  %2199 = insertelement <2 x i32> %2198, i32 %2195, i64 1, !dbg !121
  %2200 = bitcast <2 x i32> %2199 to <2 x float>, !dbg !121
  %2201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep353, i1 true) #5, !dbg !121
  %2202 = extractvalue { i32, i32, i32, i32 } %2201, 0, !dbg !121
  %2203 = extractvalue { i32, i32, i32, i32 } %2201, 1, !dbg !121
  %2204 = extractvalue { i32, i32, i32, i32 } %2201, 2, !dbg !121
  %2205 = extractvalue { i32, i32, i32, i32 } %2201, 3, !dbg !121
  %2206 = insertelement <4 x i32> poison, i32 %2196, i64 0, !dbg !121
  %2207 = insertelement <4 x i32> %2206, i32 %2197, i64 1, !dbg !121
  %2208 = insertelement <4 x i32> %2207, i32 %2202, i64 2, !dbg !121
  %2209 = insertelement <4 x i32> %2208, i32 %2203, i64 3, !dbg !121
  %2210 = bitcast <4 x i32> %2209 to <4 x float>, !dbg !121
  %2211 = insertelement <2 x i32> poison, i32 %2204, i64 0, !dbg !121
  %2212 = insertelement <2 x i32> %2211, i32 %2205, i64 1, !dbg !121
  %2213 = bitcast <2 x i32> %2212 to <2 x float>, !dbg !121
  %2214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2115, i1 true) #5, !dbg !122
  %2215 = extractvalue { i32, i32, i32, i32 } %2214, 0, !dbg !122
  %2216 = bitcast i32 %2215 to <2 x bfloat>, !dbg !122
  %2217 = extractvalue { i32, i32, i32, i32 } %2214, 1, !dbg !122
  %2218 = bitcast i32 %2217 to <2 x bfloat>, !dbg !122
  %2219 = extractvalue { i32, i32, i32, i32 } %2214, 2, !dbg !122
  %2220 = bitcast i32 %2219 to <2 x bfloat>, !dbg !122
  %2221 = extractvalue { i32, i32, i32, i32 } %2214, 3, !dbg !122
  %2222 = bitcast i32 %2221 to <2 x bfloat>, !dbg !122
  %2223 = fpext <2 x bfloat> %2216 to <2 x float>, !dbg !123
  %2224 = shufflevector <2 x bfloat> %2218, <2 x bfloat> %2220, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !123
  %2225 = fpext <4 x bfloat> %2224 to <4 x float>, !dbg !123
  %2226 = fpext <2 x bfloat> %2222 to <2 x float>, !dbg !123
  %2227 = fsub <2 x float> %2158, %2034, !dbg !101
  %2228 = fmul <2 x float> %2032, %2227, !dbg !100
  %2229 = fadd <2 x float> %2166, %2189, !dbg !124
  %2230 = fadd <4 x float> %2176, %2191, !dbg !124
  %2231 = fadd <2 x float> %2179, %2192, !dbg !124
  %2232 = fadd <2 x float> %2229, splat (float 1.000000e+00), !dbg !125
  %2233 = fadd <4 x float> %2230, splat (float 1.000000e+00), !dbg !125
  %2234 = fadd <2 x float> %2231, splat (float 1.000000e+00), !dbg !125
  %2235 = shufflevector <2 x float> %2232, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !126
  %2236 = fmul <4 x float> %2155, %2235, !dbg !126
  %2237 = fmul <2 x float> %2228, %2232, !dbg !126
  %2238 = shufflevector <2 x float> %2232, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !126
  %2239 = shufflevector <4 x float> %2233, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %2240 = shufflevector <8 x float> %2239, <8 x float> %2238, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !126
  %2241 = shufflevector <2 x float> %2234, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %2242 = shufflevector <8 x float> %2240, <8 x float> %2241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !126
  %2243 = shufflevector <8 x float> %2242, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !126
  %2244 = fmul <32 x float> %2156, %2243, !dbg !126
  %2245 = fadd <2 x float> %2200, %2223, !dbg !127
  %2246 = fadd <4 x float> %2210, %2225, !dbg !127
  %2247 = fadd <2 x float> %2213, %2226, !dbg !127
  %2248 = shufflevector <2 x float> %2245, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !128
  %2249 = fadd <4 x float> %2236, %2248, !dbg !128
  %2250 = fadd <2 x float> %2237, %2245, !dbg !128
  %2251 = shufflevector <2 x float> %2245, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !128
  %2252 = shufflevector <4 x float> %2246, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2253 = shufflevector <8 x float> %2252, <8 x float> %2251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !128
  %2254 = shufflevector <2 x float> %2247, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2255 = shufflevector <8 x float> %2253, <8 x float> %2254, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !128
  %2256 = shufflevector <8 x float> %2255, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !128
  %2257 = fadd <32 x float> %2244, %2256, !dbg !128
  %2258 = extractelement <32 x float> %2257, i64 6, !dbg !129
  %2259 = fcmp olt float %2056, %2258, !dbg !130
  %2260 = extractelement <32 x float> %2257, i64 7, !dbg !129
  %2261 = fcmp olt float %2057, %2260, !dbg !130
  %2262 = extractelement <32 x float> %2257, i64 8, !dbg !129
  %2263 = extractelement <32 x float> %2257, i64 9, !dbg !129
  %2264 = extractelement <32 x float> %2257, i64 10, !dbg !129
  %2265 = extractelement <32 x float> %2257, i64 11, !dbg !129
  %2266 = fcmp olt <4 x float> %2062, %2249, !dbg !130
  %2267 = extractelement <32 x float> %2257, i64 12, !dbg !129
  %2268 = extractelement <32 x float> %2257, i64 13, !dbg !129
  %2269 = extractelement <32 x float> %2257, i64 14, !dbg !129
  %2270 = extractelement <32 x float> %2257, i64 15, !dbg !129
  %2271 = extractelement <32 x float> %2257, i64 16, !dbg !129
  %2272 = extractelement <32 x float> %2257, i64 17, !dbg !129
  %2273 = extractelement <32 x float> %2257, i64 18, !dbg !129
  %2274 = extractelement <32 x float> %2257, i64 19, !dbg !129
  %2275 = extractelement <32 x float> %2257, i64 20, !dbg !129
  %2276 = extractelement <32 x float> %2257, i64 21, !dbg !129
  %2277 = extractelement <32 x float> %2257, i64 22, !dbg !129
  %2278 = extractelement <32 x float> %2257, i64 23, !dbg !129
  %2279 = or i1 %2118, %2259, !dbg !131
  %2280 = or i1 %2119, %2261, !dbg !131
  %2281 = or <4 x i1> %2117, %2266, !dbg !131
  %2282 = select i1 %2279, float %2056, float %2258, !dbg !132
  %2283 = select i1 %2280, float %2057, float %2260, !dbg !132
  %2284 = select <4 x i1> %2281, <4 x float> %2062, <4 x float> %2249, !dbg !132
  %2285 = shufflevector <32 x float> %2257, <32 x float> poison, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !130
  %2286 = fcmp olt <16 x float> %2063, %2285, !dbg !130
  %2287 = or <16 x i1> %2120, %2286, !dbg !131
  %2288 = select <16 x i1> %2287, <16 x float> %2063, <16 x float> %2285, !dbg !132
  %2289 = fcmp ogt <32 x float> %2061, %2257, !dbg !133
  %2290 = fcmp olt <32 x float> %2061, %2257, !dbg !133
  %2291 = shufflevector <32 x i1> %2289, <32 x i1> %2290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !133
  %2292 = or <32 x i1> %2116, %2291, !dbg !134
  %2293 = select <32 x i1> %2292, <32 x float> %2061, <32 x float> %2257, !dbg !135
  %2294 = select i1 %26, float %2282, float %2056, !dbg !102
  %2295 = select i1 %26, float %2283, float %2057, !dbg !102
  %2296 = select <4 x i1> %2036, <4 x float> %2284, <4 x float> %2062, !dbg !102
  %2297 = select <16 x i1> %2054, <16 x float> %2288, <16 x float> %2063, !dbg !102
  %2298 = fcmp ogt <2 x float> %2058, %2250, !dbg !133
  %2299 = or <2 x i1> %2123, %2298, !dbg !134
  %2300 = shufflevector <2 x float> %2250, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 0>, !dbg !133
  %2301 = shufflevector <4 x float> %2300, <4 x float> %2249, <4 x i32> <i32 4, i32 6, i32 poison, i32 3>, !dbg !133
  %2302 = shufflevector <32 x float> %2257, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 25, i32 poison>, !dbg !133
  %2303 = shufflevector <4 x float> %2301, <4 x float> %2302, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !133
  %2304 = fcmp ogt <4 x float> %2060, %2303, !dbg !133
  %2305 = fcmp olt <4 x float> %2060, %2303, !dbg !133
  %2306 = shufflevector <4 x i1> %2304, <4 x i1> %2305, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !133
  %2307 = or <4 x i1> %2121, %2306, !dbg !134
  %2308 = select <4 x i1> %2307, <4 x float> %2060, <4 x float> %2303, !dbg !135
  %2309 = shufflevector <4 x float> %2300, <4 x float> %2249, <4 x i32> <i32 5, i32 7, i32 poison, i32 1>, !dbg !133
  %2310 = shufflevector <32 x float> %2257, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 24, i32 poison>, !dbg !133
  %2311 = shufflevector <4 x float> %2309, <4 x float> %2310, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !133
  %2312 = fcmp ogt <4 x float> %2059, %2311, !dbg !133
  %2313 = fcmp olt <4 x float> %2059, %2311, !dbg !133
  %2314 = shufflevector <4 x i1> %2312, <4 x i1> %2313, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !133
  %2315 = or <4 x i1> %2122, %2314, !dbg !134
  %2316 = select <4 x i1> %2315, <4 x float> %2059, <4 x float> %2311, !dbg !135
  %2317 = select <2 x i1> %2299, <2 x float> %2058, <2 x float> %2250, !dbg !135
  %2318 = select <4 x i1> %2036, <4 x float> %2316, <4 x float> %2059, !dbg !99
  %2319 = select <4 x i1> %2036, <4 x float> %2308, <4 x float> %2060, !dbg !99
  %2320 = select <2 x i1> %2030, <2 x float> %2317, <2 x float> %2058, !dbg !99
  %2321 = select <32 x i1> %170, <32 x float> %2293, <32 x float> %2061, !dbg !99
  %2322 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2074, !dbg !136
  %2323 = sext i32 %2076 to i64, !dbg !136
  %2324 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2323, !dbg !136
  %2325 = sext i32 %2077 to i64, !dbg !136
  %2326 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2325, !dbg !136
  %2327 = sext i32 %2078 to i64, !dbg !136
  %2328 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2327, !dbg !136
  %2329 = extractelement <32 x float> %2257, i64 24, !dbg !129
  %2330 = fptrunc float %2329 to bfloat, !dbg !129
  %2331 = extractelement <32 x float> %2257, i64 25, !dbg !129
  %2332 = fptrunc float %2331 to bfloat, !dbg !129
  %2333 = extractelement <32 x float> %2257, i64 0, !dbg !129
  %2334 = fptrunc float %2333 to bfloat, !dbg !129
  %2335 = extractelement <32 x float> %2257, i64 1, !dbg !129
  %2336 = fptrunc float %2335 to bfloat, !dbg !129
  %2337 = extractelement <32 x float> %2257, i64 2, !dbg !129
  %2338 = fptrunc float %2337 to bfloat, !dbg !129
  %2339 = extractelement <32 x float> %2257, i64 3, !dbg !129
  %2340 = fptrunc float %2339 to bfloat, !dbg !129
  %2341 = extractelement <32 x float> %2257, i64 4, !dbg !129
  %2342 = fptrunc float %2341 to bfloat, !dbg !129
  %2343 = extractelement <32 x float> %2257, i64 5, !dbg !129
  %2344 = fptrunc float %2343 to bfloat, !dbg !129
  %2345 = extractelement <4 x float> %2249, i64 3, !dbg !129
  %2346 = fptrunc float %2345 to bfloat, !dbg !129
  %2347 = extractelement <4 x float> %2249, i64 2, !dbg !129
  %2348 = fptrunc float %2347 to bfloat, !dbg !129
  %2349 = fptrunc float %2258 to bfloat, !dbg !129
  %2350 = fptrunc float %2260 to bfloat, !dbg !129
  %2351 = fptrunc float %2262 to bfloat, !dbg !129
  %2352 = fptrunc float %2263 to bfloat, !dbg !129
  %2353 = fptrunc float %2264 to bfloat, !dbg !129
  %2354 = fptrunc float %2265 to bfloat, !dbg !129
  %2355 = extractelement <4 x float> %2249, i64 1, !dbg !129
  %2356 = fptrunc float %2355 to bfloat, !dbg !129
  %2357 = extractelement <4 x float> %2249, i64 0, !dbg !129
  %2358 = fptrunc float %2357 to bfloat, !dbg !129
  %2359 = fptrunc float %2267 to bfloat, !dbg !129
  %2360 = fptrunc float %2268 to bfloat, !dbg !129
  %2361 = fptrunc float %2269 to bfloat, !dbg !129
  %2362 = fptrunc float %2270 to bfloat, !dbg !129
  %2363 = fptrunc float %2271 to bfloat, !dbg !129
  %2364 = fptrunc float %2272 to bfloat, !dbg !129
  %2365 = fptrunc <2 x float> %2250 to <2 x bfloat>, !dbg !129
  %2366 = fptrunc float %2273 to bfloat, !dbg !129
  %2367 = fptrunc float %2274 to bfloat, !dbg !129
  %2368 = fptrunc float %2275 to bfloat, !dbg !129
  %2369 = fptrunc float %2276 to bfloat, !dbg !129
  %2370 = fptrunc float %2277 to bfloat, !dbg !129
  %2371 = fptrunc float %2278 to bfloat, !dbg !129
  %2372 = insertelement <2 x bfloat> poison, bfloat %2330, i64 0, !dbg !129
  %2373 = insertelement <2 x bfloat> %2372, bfloat %2332, i64 1, !dbg !129
  %2374 = bitcast <2 x bfloat> %2373 to i32, !dbg !129
  %2375 = insertelement <2 x bfloat> poison, bfloat %2334, i64 0, !dbg !129
  %2376 = insertelement <2 x bfloat> %2375, bfloat %2336, i64 1, !dbg !129
  %2377 = bitcast <2 x bfloat> %2376 to i32, !dbg !129
  %2378 = insertelement <2 x bfloat> poison, bfloat %2338, i64 0, !dbg !129
  %2379 = insertelement <2 x bfloat> %2378, bfloat %2340, i64 1, !dbg !129
  %2380 = bitcast <2 x bfloat> %2379 to i32, !dbg !129
  %2381 = insertelement <2 x bfloat> poison, bfloat %2342, i64 0, !dbg !129
  %2382 = insertelement <2 x bfloat> %2381, bfloat %2344, i64 1, !dbg !129
  %2383 = bitcast <2 x bfloat> %2382 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2374, i32 %2377, i32 %2380, i32 %2383, ptr addrspace(1) %2322, i1 %26) #5, !dbg !129
  %2384 = insertelement <2 x bfloat> poison, bfloat %2346, i64 0, !dbg !129
  %2385 = insertelement <2 x bfloat> %2384, bfloat %2348, i64 1, !dbg !129
  %2386 = bitcast <2 x bfloat> %2385 to i32, !dbg !129
  %2387 = insertelement <2 x bfloat> poison, bfloat %2349, i64 0, !dbg !129
  %2388 = insertelement <2 x bfloat> %2387, bfloat %2350, i64 1, !dbg !129
  %2389 = bitcast <2 x bfloat> %2388 to i32, !dbg !129
  %2390 = insertelement <2 x bfloat> poison, bfloat %2351, i64 0, !dbg !129
  %2391 = insertelement <2 x bfloat> %2390, bfloat %2352, i64 1, !dbg !129
  %2392 = bitcast <2 x bfloat> %2391 to i32, !dbg !129
  %2393 = insertelement <2 x bfloat> poison, bfloat %2353, i64 0, !dbg !129
  %2394 = insertelement <2 x bfloat> %2393, bfloat %2354, i64 1, !dbg !129
  %2395 = bitcast <2 x bfloat> %2394 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2386, i32 %2389, i32 %2392, i32 %2395, ptr addrspace(1) %2324, i1 %26) #5, !dbg !129
  %2396 = insertelement <2 x bfloat> poison, bfloat %2356, i64 0, !dbg !129
  %2397 = insertelement <2 x bfloat> %2396, bfloat %2358, i64 1, !dbg !129
  %2398 = bitcast <2 x bfloat> %2397 to i32, !dbg !129
  %2399 = insertelement <2 x bfloat> poison, bfloat %2359, i64 0, !dbg !129
  %2400 = insertelement <2 x bfloat> %2399, bfloat %2360, i64 1, !dbg !129
  %2401 = bitcast <2 x bfloat> %2400 to i32, !dbg !129
  %2402 = insertelement <2 x bfloat> poison, bfloat %2361, i64 0, !dbg !129
  %2403 = insertelement <2 x bfloat> %2402, bfloat %2362, i64 1, !dbg !129
  %2404 = bitcast <2 x bfloat> %2403 to i32, !dbg !129
  %2405 = insertelement <2 x bfloat> poison, bfloat %2363, i64 0, !dbg !129
  %2406 = insertelement <2 x bfloat> %2405, bfloat %2364, i64 1, !dbg !129
  %2407 = bitcast <2 x bfloat> %2406 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2398, i32 %2401, i32 %2404, i32 %2407, ptr addrspace(1) %2326, i1 %26) #5, !dbg !129
  %2408 = bitcast <2 x bfloat> %2365 to i32, !dbg !129
  %2409 = insertelement <2 x bfloat> poison, bfloat %2366, i64 0, !dbg !129
  %2410 = insertelement <2 x bfloat> %2409, bfloat %2367, i64 1, !dbg !129
  %2411 = bitcast <2 x bfloat> %2410 to i32, !dbg !129
  %2412 = insertelement <2 x bfloat> poison, bfloat %2368, i64 0, !dbg !129
  %2413 = insertelement <2 x bfloat> %2412, bfloat %2369, i64 1, !dbg !129
  %2414 = bitcast <2 x bfloat> %2413 to i32, !dbg !129
  %2415 = insertelement <2 x bfloat> poison, bfloat %2370, i64 0, !dbg !129
  %2416 = insertelement <2 x bfloat> %2415, bfloat %2371, i64 1, !dbg !129
  %2417 = bitcast <2 x bfloat> %2416 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2408, i32 %2411, i32 %2414, i32 %2417, ptr addrspace(1) %2328, i1 %26) #5, !dbg !129
  %indvars.iv.next514 = add nuw nsw i64 %indvars.iv513, 1024, !dbg !98
  %2418 = icmp samesign ult i64 %indvars.iv513, 2048, !dbg !98
  br i1 %2418, label %2055, label %2419, !dbg !98

2419:                                             ; preds = %2055
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2420 = extractelement <32 x float> %2321, i64 24, !dbg !139
  %2421 = extractelement <32 x float> %2321, i64 25, !dbg !139
  %2422 = fcmp olt float %2420, %2421, !dbg !139
  %2423 = fcmp uno float %2420, 0.000000e+00, !dbg !140
  %2424 = or i1 %2422, %2423, !dbg !141
  %2425 = select i1 %2424, float %2420, float %2421, !dbg !142
  %2426 = extractelement <32 x float> %2321, i64 26, !dbg !139
  %2427 = fcmp olt float %2425, %2426, !dbg !139
  %2428 = fcmp uno float %2425, 0.000000e+00, !dbg !140
  %2429 = or i1 %2427, %2428, !dbg !141
  %2430 = select i1 %2429, float %2425, float %2426, !dbg !142
  %2431 = extractelement <32 x float> %2321, i64 27, !dbg !139
  %2432 = fcmp olt float %2430, %2431, !dbg !139
  %2433 = fcmp uno float %2430, 0.000000e+00, !dbg !140
  %2434 = or i1 %2432, %2433, !dbg !141
  %2435 = select i1 %2434, float %2430, float %2431, !dbg !142
  %2436 = extractelement <32 x float> %2321, i64 28, !dbg !139
  %2437 = fcmp olt float %2435, %2436, !dbg !139
  %2438 = fcmp uno float %2435, 0.000000e+00, !dbg !140
  %2439 = or i1 %2437, %2438, !dbg !141
  %2440 = select i1 %2439, float %2435, float %2436, !dbg !142
  %2441 = extractelement <32 x float> %2321, i64 29, !dbg !139
  %2442 = fcmp olt float %2440, %2441, !dbg !139
  %2443 = fcmp uno float %2440, 0.000000e+00, !dbg !140
  %2444 = or i1 %2442, %2443, !dbg !141
  %2445 = select i1 %2444, float %2440, float %2441, !dbg !142
  %2446 = extractelement <32 x float> %2321, i64 30, !dbg !139
  %2447 = fcmp olt float %2445, %2446, !dbg !139
  %2448 = fcmp uno float %2445, 0.000000e+00, !dbg !140
  %2449 = or i1 %2447, %2448, !dbg !141
  %2450 = select i1 %2449, float %2445, float %2446, !dbg !142
  %2451 = extractelement <32 x float> %2321, i64 31, !dbg !139
  %2452 = fcmp olt float %2450, %2451, !dbg !139
  %2453 = fcmp uno float %2450, 0.000000e+00, !dbg !140
  %2454 = or i1 %2452, %2453, !dbg !141
  %2455 = select i1 %2454, float %2450, float %2451, !dbg !142
  %2456 = extractelement <4 x float> %2296, i64 2, !dbg !139
  %2457 = extractelement <4 x float> %2296, i64 3, !dbg !139
  %2458 = fcmp olt float %2457, %2456, !dbg !139
  %2459 = fcmp uno float %2457, 0.000000e+00, !dbg !140
  %2460 = or i1 %2458, %2459, !dbg !141
  %2461 = select i1 %2460, float %2457, float %2456, !dbg !142
  %2462 = fcmp olt float %2461, %2294, !dbg !139
  %2463 = fcmp uno float %2461, 0.000000e+00, !dbg !140
  %2464 = or i1 %2462, %2463, !dbg !141
  %2465 = select i1 %2464, float %2461, float %2294, !dbg !142
  %2466 = fcmp olt float %2465, %2295, !dbg !139
  %2467 = fcmp uno float %2465, 0.000000e+00, !dbg !140
  %2468 = or i1 %2466, %2467, !dbg !141
  %2469 = select i1 %2468, float %2465, float %2295, !dbg !142
  %2470 = extractelement <16 x float> %2297, i64 0, !dbg !139
  %2471 = fcmp olt float %2469, %2470, !dbg !139
  %2472 = fcmp uno float %2469, 0.000000e+00, !dbg !140
  %2473 = or i1 %2471, %2472, !dbg !141
  %2474 = select i1 %2473, float %2469, float %2470, !dbg !142
  %2475 = extractelement <16 x float> %2297, i64 1, !dbg !139
  %2476 = fcmp olt float %2474, %2475, !dbg !139
  %2477 = fcmp uno float %2474, 0.000000e+00, !dbg !140
  %2478 = or i1 %2476, %2477, !dbg !141
  %2479 = select i1 %2478, float %2474, float %2475, !dbg !142
  %2480 = extractelement <16 x float> %2297, i64 2, !dbg !139
  %2481 = fcmp olt float %2479, %2480, !dbg !139
  %2482 = fcmp uno float %2479, 0.000000e+00, !dbg !140
  %2483 = or i1 %2481, %2482, !dbg !141
  %2484 = select i1 %2483, float %2479, float %2480, !dbg !142
  %2485 = extractelement <16 x float> %2297, i64 3, !dbg !139
  %2486 = fcmp olt float %2484, %2485, !dbg !139
  %2487 = fcmp uno float %2484, 0.000000e+00, !dbg !140
  %2488 = or i1 %2486, %2487, !dbg !141
  %2489 = select i1 %2488, float %2484, float %2485, !dbg !142
  %2490 = extractelement <4 x float> %2296, i64 0, !dbg !139
  %2491 = extractelement <4 x float> %2296, i64 1, !dbg !139
  %2492 = fcmp olt float %2491, %2490, !dbg !139
  %2493 = fcmp uno float %2491, 0.000000e+00, !dbg !140
  %2494 = or i1 %2492, %2493, !dbg !141
  %2495 = select i1 %2494, float %2491, float %2490, !dbg !142
  %2496 = extractelement <16 x float> %2297, i64 4, !dbg !139
  %2497 = fcmp olt float %2495, %2496, !dbg !139
  %2498 = fcmp uno float %2495, 0.000000e+00, !dbg !140
  %2499 = or i1 %2497, %2498, !dbg !141
  %2500 = select i1 %2499, float %2495, float %2496, !dbg !142
  %2501 = extractelement <16 x float> %2297, i64 5, !dbg !139
  %2502 = fcmp olt float %2500, %2501, !dbg !139
  %2503 = fcmp uno float %2500, 0.000000e+00, !dbg !140
  %2504 = or i1 %2502, %2503, !dbg !141
  %2505 = select i1 %2504, float %2500, float %2501, !dbg !142
  %2506 = extractelement <16 x float> %2297, i64 6, !dbg !139
  %2507 = fcmp olt float %2505, %2506, !dbg !139
  %2508 = fcmp uno float %2505, 0.000000e+00, !dbg !140
  %2509 = or i1 %2507, %2508, !dbg !141
  %2510 = select i1 %2509, float %2505, float %2506, !dbg !142
  %2511 = extractelement <16 x float> %2297, i64 7, !dbg !139
  %2512 = fcmp olt float %2510, %2511, !dbg !139
  %2513 = fcmp uno float %2510, 0.000000e+00, !dbg !140
  %2514 = or i1 %2512, %2513, !dbg !141
  %2515 = select i1 %2514, float %2510, float %2511, !dbg !142
  %2516 = extractelement <16 x float> %2297, i64 8, !dbg !139
  %2517 = fcmp olt float %2515, %2516, !dbg !139
  %2518 = fcmp uno float %2515, 0.000000e+00, !dbg !140
  %2519 = or i1 %2517, %2518, !dbg !141
  %2520 = select i1 %2519, float %2515, float %2516, !dbg !142
  %2521 = extractelement <16 x float> %2297, i64 9, !dbg !139
  %2522 = fcmp olt float %2520, %2521, !dbg !139
  %2523 = fcmp uno float %2520, 0.000000e+00, !dbg !140
  %2524 = or i1 %2522, %2523, !dbg !141
  %2525 = select i1 %2524, float %2520, float %2521, !dbg !142
  %2526 = fcmp ogt <4 x float> %2318, %2319, !dbg !143
  %2527 = extractelement <4 x float> %2319, i64 3, !dbg !140
  %2528 = fcmp uno float %2527, 0.000000e+00, !dbg !140
  %2529 = extractelement <4 x i1> %2526, i64 3, !dbg !141
  %2530 = or i1 %2529, %2528, !dbg !141
  %2531 = extractelement <4 x float> %2318, i64 3, !dbg !142
  %2532 = select i1 %2530, float %2527, float %2531, !dbg !142
  %2533 = extractelement <16 x float> %2297, i64 10, !dbg !139
  %2534 = fcmp olt float %2532, %2533, !dbg !139
  %2535 = fcmp uno float %2532, 0.000000e+00, !dbg !140
  %2536 = or i1 %2534, %2535, !dbg !141
  %2537 = select i1 %2536, float %2532, float %2533, !dbg !142
  %2538 = extractelement <16 x float> %2297, i64 11, !dbg !139
  %2539 = fcmp olt float %2537, %2538, !dbg !139
  %2540 = fcmp uno float %2537, 0.000000e+00, !dbg !140
  %2541 = or i1 %2539, %2540, !dbg !141
  %2542 = select i1 %2541, float %2537, float %2538, !dbg !142
  %2543 = extractelement <16 x float> %2297, i64 12, !dbg !139
  %2544 = fcmp olt float %2542, %2543, !dbg !139
  %2545 = fcmp uno float %2542, 0.000000e+00, !dbg !140
  %2546 = or i1 %2544, %2545, !dbg !141
  %2547 = select i1 %2546, float %2542, float %2543, !dbg !142
  %2548 = extractelement <16 x float> %2297, i64 13, !dbg !139
  %2549 = fcmp olt float %2547, %2548, !dbg !139
  %2550 = fcmp uno float %2547, 0.000000e+00, !dbg !140
  %2551 = or i1 %2549, %2550, !dbg !141
  %2552 = select i1 %2551, float %2547, float %2548, !dbg !142
  %2553 = extractelement <16 x float> %2297, i64 14, !dbg !139
  %2554 = fcmp olt float %2552, %2553, !dbg !139
  %2555 = fcmp uno float %2552, 0.000000e+00, !dbg !140
  %2556 = or i1 %2554, %2555, !dbg !141
  %2557 = select i1 %2556, float %2552, float %2553, !dbg !142
  %2558 = extractelement <16 x float> %2297, i64 15, !dbg !139
  %2559 = fcmp olt float %2557, %2558, !dbg !139
  %2560 = fcmp uno float %2557, 0.000000e+00, !dbg !140
  %2561 = or i1 %2559, %2560, !dbg !141
  %2562 = select i1 %2561, float %2557, float %2558, !dbg !142
  %2563 = bitcast float %2455 to i32, !dbg !137
  %2564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2563, i32 16, i32 31), !dbg !137
  %2565 = bitcast i32 %2564 to float, !dbg !137
  %2566 = fcmp olt float %2455, %2565, !dbg !139
  %2567 = fcmp uno float %2455, 0.000000e+00, !dbg !140
  %2568 = or i1 %2567, %2566, !dbg !141
  %2569 = select i1 %2568, float %2455, float %2565, !dbg !142
  %2570 = bitcast float %2569 to i32, !dbg !137
  %2571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2570, i32 8, i32 31), !dbg !137
  %2572 = bitcast i32 %2571 to float, !dbg !137
  %2573 = fcmp olt float %2569, %2572, !dbg !139
  %2574 = fcmp uno float %2569, 0.000000e+00, !dbg !140
  %2575 = or i1 %2573, %2574, !dbg !141
  %2576 = select i1 %2575, float %2569, float %2572, !dbg !142
  %2577 = bitcast float %2576 to i32, !dbg !137
  %2578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2577, i32 4, i32 31), !dbg !137
  %2579 = bitcast i32 %2578 to float, !dbg !137
  %2580 = fcmp olt float %2576, %2579, !dbg !139
  %2581 = fcmp uno float %2576, 0.000000e+00, !dbg !140
  %2582 = or i1 %2580, %2581, !dbg !141
  %2583 = select i1 %2582, float %2576, float %2579, !dbg !142
  %2584 = bitcast float %2583 to i32, !dbg !137
  %2585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2584, i32 2, i32 31), !dbg !137
  %2586 = bitcast i32 %2585 to float, !dbg !137
  %2587 = fcmp olt float %2583, %2586, !dbg !139
  %2588 = fcmp uno float %2583, 0.000000e+00, !dbg !140
  %2589 = or i1 %2587, %2588, !dbg !141
  %2590 = select i1 %2589, float %2583, float %2586, !dbg !142
  %2591 = bitcast float %2590 to i32, !dbg !137
  %2592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2591, i32 1, i32 31), !dbg !137
  %2593 = bitcast i32 %2592 to float, !dbg !137
  %2594 = fcmp olt float %2590, %2593, !dbg !139
  %2595 = fcmp uno float %2590, 0.000000e+00, !dbg !140
  %2596 = or i1 %2594, %2595, !dbg !141
  %2597 = bitcast float %2489 to i32, !dbg !137
  %2598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2597, i32 16, i32 31), !dbg !137
  %2599 = bitcast i32 %2598 to float, !dbg !137
  %2600 = fcmp olt float %2489, %2599, !dbg !139
  %2601 = fcmp uno float %2489, 0.000000e+00, !dbg !140
  %2602 = or i1 %2601, %2600, !dbg !141
  %2603 = select i1 %2602, float %2489, float %2599, !dbg !142
  %2604 = bitcast float %2603 to i32, !dbg !137
  %2605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2604, i32 8, i32 31), !dbg !137
  %2606 = bitcast i32 %2605 to float, !dbg !137
  %2607 = fcmp olt float %2603, %2606, !dbg !139
  %2608 = fcmp uno float %2603, 0.000000e+00, !dbg !140
  %2609 = or i1 %2607, %2608, !dbg !141
  %2610 = select i1 %2609, float %2603, float %2606, !dbg !142
  %2611 = bitcast float %2610 to i32, !dbg !137
  %2612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2611, i32 4, i32 31), !dbg !137
  %2613 = bitcast i32 %2612 to float, !dbg !137
  %2614 = fcmp olt float %2610, %2613, !dbg !139
  %2615 = fcmp uno float %2610, 0.000000e+00, !dbg !140
  %2616 = or i1 %2614, %2615, !dbg !141
  %2617 = select i1 %2616, float %2610, float %2613, !dbg !142
  %2618 = bitcast float %2617 to i32, !dbg !137
  %2619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2618, i32 2, i32 31), !dbg !137
  %2620 = bitcast i32 %2619 to float, !dbg !137
  %2621 = fcmp olt float %2617, %2620, !dbg !139
  %2622 = fcmp uno float %2617, 0.000000e+00, !dbg !140
  %2623 = or i1 %2621, %2622, !dbg !141
  %2624 = select i1 %2623, float %2617, float %2620, !dbg !142
  %2625 = bitcast float %2624 to i32, !dbg !137
  %2626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2625, i32 1, i32 31), !dbg !137
  %2627 = bitcast i32 %2626 to float, !dbg !137
  %2628 = fcmp olt float %2624, %2627, !dbg !139
  %2629 = fcmp uno float %2624, 0.000000e+00, !dbg !140
  %2630 = or i1 %2628, %2629, !dbg !141
  %2631 = bitcast float %2525 to i32, !dbg !137
  %2632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2631, i32 16, i32 31), !dbg !137
  %2633 = bitcast i32 %2632 to float, !dbg !137
  %2634 = fcmp olt float %2525, %2633, !dbg !139
  %2635 = fcmp uno float %2525, 0.000000e+00, !dbg !140
  %2636 = or i1 %2635, %2634, !dbg !141
  %2637 = select i1 %2636, float %2525, float %2633, !dbg !142
  %2638 = bitcast float %2637 to i32, !dbg !137
  %2639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2638, i32 8, i32 31), !dbg !137
  %2640 = bitcast i32 %2639 to float, !dbg !137
  %2641 = fcmp olt float %2637, %2640, !dbg !139
  %2642 = fcmp uno float %2637, 0.000000e+00, !dbg !140
  %2643 = or i1 %2641, %2642, !dbg !141
  %2644 = select i1 %2643, float %2637, float %2640, !dbg !142
  %2645 = bitcast float %2644 to i32, !dbg !137
  %2646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2645, i32 4, i32 31), !dbg !137
  %2647 = bitcast i32 %2646 to float, !dbg !137
  %2648 = fcmp olt float %2644, %2647, !dbg !139
  %2649 = fcmp uno float %2644, 0.000000e+00, !dbg !140
  %2650 = or i1 %2648, %2649, !dbg !141
  %2651 = select i1 %2650, float %2644, float %2647, !dbg !142
  %2652 = bitcast float %2651 to i32, !dbg !137
  %2653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2652, i32 2, i32 31), !dbg !137
  %2654 = bitcast i32 %2653 to float, !dbg !137
  %2655 = fcmp olt float %2651, %2654, !dbg !139
  %2656 = fcmp uno float %2651, 0.000000e+00, !dbg !140
  %2657 = or i1 %2655, %2656, !dbg !141
  %2658 = select i1 %2657, float %2651, float %2654, !dbg !142
  %2659 = bitcast float %2658 to i32, !dbg !137
  %2660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2659, i32 1, i32 31), !dbg !137
  %2661 = bitcast i32 %2660 to float, !dbg !137
  %2662 = fcmp olt float %2658, %2661, !dbg !139
  %2663 = fcmp uno float %2658, 0.000000e+00, !dbg !140
  %2664 = or i1 %2662, %2663, !dbg !141
  %2665 = bitcast float %2562 to i32, !dbg !137
  %2666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2665, i32 16, i32 31), !dbg !137
  %2667 = bitcast i32 %2666 to float, !dbg !137
  %2668 = fcmp olt float %2562, %2667, !dbg !139
  %2669 = fcmp uno float %2562, 0.000000e+00, !dbg !140
  %2670 = or i1 %2669, %2668, !dbg !141
  %2671 = select i1 %2670, float %2562, float %2667, !dbg !142
  %2672 = bitcast float %2671 to i32, !dbg !137
  %2673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2672, i32 8, i32 31), !dbg !137
  %2674 = bitcast i32 %2673 to float, !dbg !137
  %2675 = fcmp olt float %2671, %2674, !dbg !139
  %2676 = fcmp uno float %2671, 0.000000e+00, !dbg !140
  %2677 = or i1 %2675, %2676, !dbg !141
  %2678 = select i1 %2677, float %2671, float %2674, !dbg !142
  %2679 = bitcast float %2678 to i32, !dbg !137
  %2680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2679, i32 4, i32 31), !dbg !137
  %2681 = bitcast i32 %2680 to float, !dbg !137
  %2682 = fcmp olt float %2678, %2681, !dbg !139
  %2683 = fcmp uno float %2678, 0.000000e+00, !dbg !140
  %2684 = or i1 %2682, %2683, !dbg !141
  %2685 = select i1 %2684, float %2678, float %2681, !dbg !142
  %2686 = bitcast float %2685 to i32, !dbg !137
  %2687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2686, i32 2, i32 31), !dbg !137
  %2688 = bitcast i32 %2687 to float, !dbg !137
  %2689 = fcmp olt float %2685, %2688, !dbg !139
  %2690 = fcmp uno float %2685, 0.000000e+00, !dbg !140
  %2691 = or i1 %2689, %2690, !dbg !141
  %2692 = select i1 %2691, float %2685, float %2688, !dbg !142
  %2693 = bitcast float %2692 to i32, !dbg !137
  %2694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2693, i32 1, i32 31), !dbg !137
  %2695 = bitcast i32 %2694 to float, !dbg !137
  %2696 = fcmp olt float %2692, %2695, !dbg !139
  %2697 = fcmp uno float %2692, 0.000000e+00, !dbg !140
  %2698 = or i1 %2696, %2697, !dbg !141
  %2699 = select i1 %2596, i32 %2591, i32 %2592, !dbg !142
  %2700 = insertelement <1 x i32> poison, i32 %2699, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1879, <1 x i32> %2700, i1 %1878) #5, !dbg !137
  %2701 = select i1 %2630, i32 %2625, i32 %2626, !dbg !142
  %2702 = insertelement <1 x i32> poison, i32 %2701, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1886, <1 x i32> %2702, i1 %1878) #5, !dbg !137
  %2703 = select i1 %2664, i32 %2659, i32 %2660, !dbg !142
  %2704 = insertelement <1 x i32> poison, i32 %2703, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1893, <1 x i32> %2704, i1 %1878) #5, !dbg !137
  %2705 = select i1 %2698, i32 %2693, i32 %2694, !dbg !142
  %2706 = insertelement <1 x i32> poison, i32 %2705, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1900, <1 x i32> %2706, i1 %1878) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2707 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1907, i1 %1906) #5, !dbg !137
  %2708 = bitcast i32 %2707 to float, !dbg !137
  %2709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2707, i32 2, i32 31), !dbg !137
  %2710 = bitcast i32 %2709 to float, !dbg !137
  %2711 = fcmp olt float %2708, %2710, !dbg !139
  %2712 = fcmp uno float %2708, 0.000000e+00, !dbg !140
  %2713 = or i1 %2712, %2711, !dbg !141
  %2714 = select i1 %2713, float %2708, float %2710, !dbg !142
  %2715 = bitcast float %2714 to i32, !dbg !137
  %2716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2715, i32 1, i32 31), !dbg !137
  %2717 = bitcast i32 %2716 to float, !dbg !137
  %2718 = fcmp olt float %2714, %2717, !dbg !139
  %2719 = fcmp uno float %2714, 0.000000e+00, !dbg !140
  %2720 = or i1 %2718, %2719, !dbg !141
  %2721 = select i1 %2720, i32 %2715, i32 %2716, !dbg !142
  %2722 = insertelement <1 x i32> poison, i32 %2721, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1907, <1 x i32> %2722, i1 %1956) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2723 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  %2724 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !137
  %2725 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !137
  %2726 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %2727 = bitcast float %2723 to i32, !dbg !145
  %2728 = bitcast float %2724 to i32, !dbg !145
  %2729 = bitcast float %2725 to i32, !dbg !145
  %2730 = bitcast float %2726 to i32, !dbg !145
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2727, i32 %2728, i32 %2729, i32 %2730, i1 true) #5, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %2731 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1086, !dbg !145
  %2732 = load float, ptr addrspace(3) %2731, align 4, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %2733 = extractelement <4 x float> %2318, i64 2, !dbg !147
  %2734 = fcmp uno float %2733, 0.000000e+00, !dbg !147
  %2735 = extractelement <4 x i1> %2526, i64 2, !dbg !148
  %2736 = or i1 %2735, %2734, !dbg !148
  %2737 = extractelement <4 x float> %2319, i64 2, !dbg !149
  %2738 = select i1 %2736, float %2733, float %2737, !dbg !149
  %2739 = extractelement <32 x float> %2321, i64 0, !dbg !143
  %2740 = fcmp ogt float %2738, %2739, !dbg !143
  %2741 = fcmp uno float %2738, 0.000000e+00, !dbg !147
  %2742 = or i1 %2740, %2741, !dbg !148
  %2743 = select i1 %2742, float %2738, float %2739, !dbg !149
  %2744 = extractelement <32 x float> %2321, i64 1, !dbg !143
  %2745 = fcmp ogt float %2743, %2744, !dbg !143
  %2746 = fcmp uno float %2743, 0.000000e+00, !dbg !147
  %2747 = or i1 %2745, %2746, !dbg !148
  %2748 = select i1 %2747, float %2743, float %2744, !dbg !149
  %2749 = extractelement <32 x float> %2321, i64 2, !dbg !143
  %2750 = fcmp ogt float %2748, %2749, !dbg !143
  %2751 = fcmp uno float %2748, 0.000000e+00, !dbg !147
  %2752 = or i1 %2750, %2751, !dbg !148
  %2753 = select i1 %2752, float %2748, float %2749, !dbg !149
  %2754 = extractelement <32 x float> %2321, i64 3, !dbg !143
  %2755 = fcmp ogt float %2753, %2754, !dbg !143
  %2756 = fcmp uno float %2753, 0.000000e+00, !dbg !147
  %2757 = or i1 %2755, %2756, !dbg !148
  %2758 = select i1 %2757, float %2753, float %2754, !dbg !149
  %2759 = extractelement <32 x float> %2321, i64 4, !dbg !143
  %2760 = fcmp ogt float %2758, %2759, !dbg !143
  %2761 = fcmp uno float %2758, 0.000000e+00, !dbg !147
  %2762 = or i1 %2760, %2761, !dbg !148
  %2763 = select i1 %2762, float %2758, float %2759, !dbg !149
  %2764 = extractelement <32 x float> %2321, i64 5, !dbg !143
  %2765 = fcmp ogt float %2763, %2764, !dbg !143
  %2766 = fcmp uno float %2763, 0.000000e+00, !dbg !147
  %2767 = or i1 %2765, %2766, !dbg !148
  %2768 = select i1 %2767, float %2763, float %2764, !dbg !149
  %2769 = extractelement <4 x float> %2318, i64 1, !dbg !147
  %2770 = fcmp uno float %2769, 0.000000e+00, !dbg !147
  %2771 = extractelement <4 x i1> %2526, i64 1, !dbg !148
  %2772 = or i1 %2771, %2770, !dbg !148
  %2773 = extractelement <4 x float> %2319, i64 1, !dbg !149
  %2774 = select i1 %2772, float %2769, float %2773, !dbg !149
  %2775 = extractelement <32 x float> %2321, i64 6, !dbg !143
  %2776 = fcmp ogt float %2774, %2775, !dbg !143
  %2777 = fcmp uno float %2774, 0.000000e+00, !dbg !147
  %2778 = or i1 %2776, %2777, !dbg !148
  %2779 = select i1 %2778, float %2774, float %2775, !dbg !149
  %2780 = extractelement <32 x float> %2321, i64 7, !dbg !143
  %2781 = fcmp ogt float %2779, %2780, !dbg !143
  %2782 = fcmp uno float %2779, 0.000000e+00, !dbg !147
  %2783 = or i1 %2781, %2782, !dbg !148
  %2784 = select i1 %2783, float %2779, float %2780, !dbg !149
  %2785 = extractelement <32 x float> %2321, i64 8, !dbg !143
  %2786 = fcmp ogt float %2784, %2785, !dbg !143
  %2787 = fcmp uno float %2784, 0.000000e+00, !dbg !147
  %2788 = or i1 %2786, %2787, !dbg !148
  %2789 = select i1 %2788, float %2784, float %2785, !dbg !149
  %2790 = extractelement <32 x float> %2321, i64 9, !dbg !143
  %2791 = fcmp ogt float %2789, %2790, !dbg !143
  %2792 = fcmp uno float %2789, 0.000000e+00, !dbg !147
  %2793 = or i1 %2791, %2792, !dbg !148
  %2794 = select i1 %2793, float %2789, float %2790, !dbg !149
  %2795 = extractelement <32 x float> %2321, i64 10, !dbg !143
  %2796 = fcmp ogt float %2794, %2795, !dbg !143
  %2797 = fcmp uno float %2794, 0.000000e+00, !dbg !147
  %2798 = or i1 %2796, %2797, !dbg !148
  %2799 = select i1 %2798, float %2794, float %2795, !dbg !149
  %2800 = extractelement <32 x float> %2321, i64 11, !dbg !143
  %2801 = fcmp ogt float %2799, %2800, !dbg !143
  %2802 = fcmp uno float %2799, 0.000000e+00, !dbg !147
  %2803 = or i1 %2801, %2802, !dbg !148
  %2804 = select i1 %2803, float %2799, float %2800, !dbg !149
  %2805 = extractelement <4 x float> %2318, i64 0, !dbg !147
  %2806 = fcmp uno float %2805, 0.000000e+00, !dbg !147
  %2807 = extractelement <4 x i1> %2526, i64 0, !dbg !148
  %2808 = or i1 %2807, %2806, !dbg !148
  %2809 = extractelement <4 x float> %2319, i64 0, !dbg !149
  %2810 = select i1 %2808, float %2805, float %2809, !dbg !149
  %2811 = extractelement <32 x float> %2321, i64 12, !dbg !143
  %2812 = fcmp ogt float %2810, %2811, !dbg !143
  %2813 = fcmp uno float %2810, 0.000000e+00, !dbg !147
  %2814 = or i1 %2812, %2813, !dbg !148
  %2815 = select i1 %2814, float %2810, float %2811, !dbg !149
  %2816 = extractelement <32 x float> %2321, i64 13, !dbg !143
  %2817 = fcmp ogt float %2815, %2816, !dbg !143
  %2818 = fcmp uno float %2815, 0.000000e+00, !dbg !147
  %2819 = or i1 %2817, %2818, !dbg !148
  %2820 = select i1 %2819, float %2815, float %2816, !dbg !149
  %2821 = extractelement <32 x float> %2321, i64 14, !dbg !143
  %2822 = fcmp ogt float %2820, %2821, !dbg !143
  %2823 = fcmp uno float %2820, 0.000000e+00, !dbg !147
  %2824 = or i1 %2822, %2823, !dbg !148
  %2825 = select i1 %2824, float %2820, float %2821, !dbg !149
  %2826 = extractelement <32 x float> %2321, i64 15, !dbg !143
  %2827 = fcmp ogt float %2825, %2826, !dbg !143
  %2828 = fcmp uno float %2825, 0.000000e+00, !dbg !147
  %2829 = or i1 %2827, %2828, !dbg !148
  %2830 = select i1 %2829, float %2825, float %2826, !dbg !149
  %2831 = extractelement <32 x float> %2321, i64 16, !dbg !143
  %2832 = fcmp ogt float %2830, %2831, !dbg !143
  %2833 = fcmp uno float %2830, 0.000000e+00, !dbg !147
  %2834 = or i1 %2832, %2833, !dbg !148
  %2835 = select i1 %2834, float %2830, float %2831, !dbg !149
  %2836 = extractelement <32 x float> %2321, i64 17, !dbg !143
  %2837 = fcmp ogt float %2835, %2836, !dbg !143
  %2838 = fcmp uno float %2835, 0.000000e+00, !dbg !147
  %2839 = or i1 %2837, %2838, !dbg !148
  %2840 = select i1 %2839, float %2835, float %2836, !dbg !149
  %2841 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %2320, <2 x i32> <i32 0, i32 2>, !dbg !143
  %2842 = fcmp ogt <2 x float> %2841, %2320, !dbg !143
  %2843 = fcmp uno <2 x float> %2841, %2320, !dbg !143
  %shift = shufflevector <2 x i1> %2842, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !148
  %2844 = or <2 x i1> %shift, %2843, !dbg !148
  %2845 = extractelement <2 x i1> %2844, i64 0, !dbg !148
  %2846 = extractelement <2 x float> %2320, i64 0, !dbg !149
  %2847 = extractelement <2 x float> %2320, i64 1, !dbg !149
  %2848 = select i1 %2845, float %2846, float %2847, !dbg !149
  %2849 = extractelement <32 x float> %2321, i64 18, !dbg !143
  %2850 = fcmp ogt float %2848, %2849, !dbg !143
  %2851 = fcmp uno float %2848, 0.000000e+00, !dbg !147
  %2852 = or i1 %2850, %2851, !dbg !148
  %2853 = select i1 %2852, float %2848, float %2849, !dbg !149
  %2854 = extractelement <32 x float> %2321, i64 19, !dbg !143
  %2855 = fcmp ogt float %2853, %2854, !dbg !143
  %2856 = fcmp uno float %2853, 0.000000e+00, !dbg !147
  %2857 = or i1 %2855, %2856, !dbg !148
  %2858 = select i1 %2857, float %2853, float %2854, !dbg !149
  %2859 = extractelement <32 x float> %2321, i64 20, !dbg !143
  %2860 = fcmp ogt float %2858, %2859, !dbg !143
  %2861 = fcmp uno float %2858, 0.000000e+00, !dbg !147
  %2862 = or i1 %2860, %2861, !dbg !148
  %2863 = select i1 %2862, float %2858, float %2859, !dbg !149
  %2864 = extractelement <32 x float> %2321, i64 21, !dbg !143
  %2865 = fcmp ogt float %2863, %2864, !dbg !143
  %2866 = fcmp uno float %2863, 0.000000e+00, !dbg !147
  %2867 = or i1 %2865, %2866, !dbg !148
  %2868 = select i1 %2867, float %2863, float %2864, !dbg !149
  %2869 = extractelement <32 x float> %2321, i64 22, !dbg !143
  %2870 = fcmp ogt float %2868, %2869, !dbg !143
  %2871 = fcmp uno float %2868, 0.000000e+00, !dbg !147
  %2872 = or i1 %2870, %2871, !dbg !148
  %2873 = select i1 %2872, float %2868, float %2869, !dbg !149
  %2874 = extractelement <32 x float> %2321, i64 23, !dbg !143
  %2875 = fcmp ogt float %2873, %2874, !dbg !143
  %2876 = fcmp uno float %2873, 0.000000e+00, !dbg !147
  %2877 = or i1 %2875, %2876, !dbg !148
  %2878 = select i1 %2877, float %2873, float %2874, !dbg !149
  %2879 = bitcast float %2768 to i32, !dbg !146
  %2880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2879, i32 16, i32 31), !dbg !146
  %2881 = bitcast i32 %2880 to float, !dbg !146
  %2882 = fcmp ogt float %2768, %2881, !dbg !143
  %2883 = fcmp uno float %2768, 0.000000e+00, !dbg !147
  %2884 = or i1 %2883, %2882, !dbg !148
  %2885 = select i1 %2884, float %2768, float %2881, !dbg !149
  %2886 = bitcast float %2885 to i32, !dbg !146
  %2887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2886, i32 8, i32 31), !dbg !146
  %2888 = bitcast i32 %2887 to float, !dbg !146
  %2889 = fcmp ogt float %2885, %2888, !dbg !143
  %2890 = fcmp uno float %2885, 0.000000e+00, !dbg !147
  %2891 = or i1 %2889, %2890, !dbg !148
  %2892 = select i1 %2891, float %2885, float %2888, !dbg !149
  %2893 = bitcast float %2892 to i32, !dbg !146
  %2894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2893, i32 4, i32 31), !dbg !146
  %2895 = bitcast i32 %2894 to float, !dbg !146
  %2896 = fcmp ogt float %2892, %2895, !dbg !143
  %2897 = fcmp uno float %2892, 0.000000e+00, !dbg !147
  %2898 = or i1 %2896, %2897, !dbg !148
  %2899 = select i1 %2898, float %2892, float %2895, !dbg !149
  %2900 = bitcast float %2899 to i32, !dbg !146
  %2901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2900, i32 2, i32 31), !dbg !146
  %2902 = bitcast i32 %2901 to float, !dbg !146
  %2903 = fcmp ogt float %2899, %2902, !dbg !143
  %2904 = fcmp uno float %2899, 0.000000e+00, !dbg !147
  %2905 = or i1 %2903, %2904, !dbg !148
  %2906 = select i1 %2905, float %2899, float %2902, !dbg !149
  %2907 = bitcast float %2906 to i32, !dbg !146
  %2908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2907, i32 1, i32 31), !dbg !146
  %2909 = bitcast i32 %2908 to float, !dbg !146
  %2910 = fcmp ogt float %2906, %2909, !dbg !143
  %2911 = fcmp uno float %2906, 0.000000e+00, !dbg !147
  %2912 = or i1 %2910, %2911, !dbg !148
  %2913 = bitcast float %2804 to i32, !dbg !146
  %2914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2913, i32 16, i32 31), !dbg !146
  %2915 = bitcast i32 %2914 to float, !dbg !146
  %2916 = fcmp ogt float %2804, %2915, !dbg !143
  %2917 = fcmp uno float %2804, 0.000000e+00, !dbg !147
  %2918 = or i1 %2917, %2916, !dbg !148
  %2919 = select i1 %2918, float %2804, float %2915, !dbg !149
  %2920 = bitcast float %2919 to i32, !dbg !146
  %2921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2920, i32 8, i32 31), !dbg !146
  %2922 = bitcast i32 %2921 to float, !dbg !146
  %2923 = fcmp ogt float %2919, %2922, !dbg !143
  %2924 = fcmp uno float %2919, 0.000000e+00, !dbg !147
  %2925 = or i1 %2923, %2924, !dbg !148
  %2926 = select i1 %2925, float %2919, float %2922, !dbg !149
  %2927 = bitcast float %2926 to i32, !dbg !146
  %2928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2927, i32 4, i32 31), !dbg !146
  %2929 = bitcast i32 %2928 to float, !dbg !146
  %2930 = fcmp ogt float %2926, %2929, !dbg !143
  %2931 = fcmp uno float %2926, 0.000000e+00, !dbg !147
  %2932 = or i1 %2930, %2931, !dbg !148
  %2933 = select i1 %2932, float %2926, float %2929, !dbg !149
  %2934 = bitcast float %2933 to i32, !dbg !146
  %2935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2934, i32 2, i32 31), !dbg !146
  %2936 = bitcast i32 %2935 to float, !dbg !146
  %2937 = fcmp ogt float %2933, %2936, !dbg !143
  %2938 = fcmp uno float %2933, 0.000000e+00, !dbg !147
  %2939 = or i1 %2937, %2938, !dbg !148
  %2940 = select i1 %2939, float %2933, float %2936, !dbg !149
  %2941 = bitcast float %2940 to i32, !dbg !146
  %2942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2941, i32 1, i32 31), !dbg !146
  %2943 = bitcast i32 %2942 to float, !dbg !146
  %2944 = fcmp ogt float %2940, %2943, !dbg !143
  %2945 = fcmp uno float %2940, 0.000000e+00, !dbg !147
  %2946 = or i1 %2944, %2945, !dbg !148
  %2947 = bitcast float %2840 to i32, !dbg !146
  %2948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2947, i32 16, i32 31), !dbg !146
  %2949 = bitcast i32 %2948 to float, !dbg !146
  %2950 = fcmp ogt float %2840, %2949, !dbg !143
  %2951 = fcmp uno float %2840, 0.000000e+00, !dbg !147
  %2952 = or i1 %2951, %2950, !dbg !148
  %2953 = select i1 %2952, float %2840, float %2949, !dbg !149
  %2954 = bitcast float %2953 to i32, !dbg !146
  %2955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2954, i32 8, i32 31), !dbg !146
  %2956 = bitcast i32 %2955 to float, !dbg !146
  %2957 = fcmp ogt float %2953, %2956, !dbg !143
  %2958 = fcmp uno float %2953, 0.000000e+00, !dbg !147
  %2959 = or i1 %2957, %2958, !dbg !148
  %2960 = select i1 %2959, float %2953, float %2956, !dbg !149
  %2961 = bitcast float %2960 to i32, !dbg !146
  %2962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2961, i32 4, i32 31), !dbg !146
  %2963 = bitcast i32 %2962 to float, !dbg !146
  %2964 = fcmp ogt float %2960, %2963, !dbg !143
  %2965 = fcmp uno float %2960, 0.000000e+00, !dbg !147
  %2966 = or i1 %2964, %2965, !dbg !148
  %2967 = select i1 %2966, float %2960, float %2963, !dbg !149
  %2968 = bitcast float %2967 to i32, !dbg !146
  %2969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2968, i32 2, i32 31), !dbg !146
  %2970 = bitcast i32 %2969 to float, !dbg !146
  %2971 = fcmp ogt float %2967, %2970, !dbg !143
  %2972 = fcmp uno float %2967, 0.000000e+00, !dbg !147
  %2973 = or i1 %2971, %2972, !dbg !148
  %2974 = select i1 %2973, float %2967, float %2970, !dbg !149
  %2975 = bitcast float %2974 to i32, !dbg !146
  %2976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2975, i32 1, i32 31), !dbg !146
  %2977 = bitcast i32 %2976 to float, !dbg !146
  %2978 = fcmp ogt float %2974, %2977, !dbg !143
  %2979 = fcmp uno float %2974, 0.000000e+00, !dbg !147
  %2980 = or i1 %2978, %2979, !dbg !148
  %2981 = bitcast float %2878 to i32, !dbg !146
  %2982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2981, i32 16, i32 31), !dbg !146
  %2983 = bitcast i32 %2982 to float, !dbg !146
  %2984 = fcmp ogt float %2878, %2983, !dbg !143
  %2985 = fcmp uno float %2878, 0.000000e+00, !dbg !147
  %2986 = or i1 %2985, %2984, !dbg !148
  %2987 = select i1 %2986, float %2878, float %2983, !dbg !149
  %2988 = bitcast float %2987 to i32, !dbg !146
  %2989 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2988, i32 8, i32 31), !dbg !146
  %2990 = bitcast i32 %2989 to float, !dbg !146
  %2991 = fcmp ogt float %2987, %2990, !dbg !143
  %2992 = fcmp uno float %2987, 0.000000e+00, !dbg !147
  %2993 = or i1 %2991, %2992, !dbg !148
  %2994 = select i1 %2993, float %2987, float %2990, !dbg !149
  %2995 = bitcast float %2994 to i32, !dbg !146
  %2996 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2995, i32 4, i32 31), !dbg !146
  %2997 = bitcast i32 %2996 to float, !dbg !146
  %2998 = fcmp ogt float %2994, %2997, !dbg !143
  %2999 = fcmp uno float %2994, 0.000000e+00, !dbg !147
  %3000 = or i1 %2998, %2999, !dbg !148
  %3001 = select i1 %3000, float %2994, float %2997, !dbg !149
  %3002 = bitcast float %3001 to i32, !dbg !146
  %3003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3002, i32 2, i32 31), !dbg !146
  %3004 = bitcast i32 %3003 to float, !dbg !146
  %3005 = fcmp ogt float %3001, %3004, !dbg !143
  %3006 = fcmp uno float %3001, 0.000000e+00, !dbg !147
  %3007 = or i1 %3005, %3006, !dbg !148
  %3008 = select i1 %3007, float %3001, float %3004, !dbg !149
  %3009 = bitcast float %3008 to i32, !dbg !146
  %3010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3009, i32 1, i32 31), !dbg !146
  %3011 = bitcast i32 %3010 to float, !dbg !146
  %3012 = fcmp ogt float %3008, %3011, !dbg !143
  %3013 = fcmp uno float %3008, 0.000000e+00, !dbg !147
  %3014 = or i1 %3012, %3013, !dbg !148
  %3015 = select i1 %2912, i32 %2907, i32 %2908, !dbg !149
  %3016 = insertelement <1 x i32> poison, i32 %3015, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1879, <1 x i32> %3016, i1 %1878) #5, !dbg !146
  %3017 = select i1 %2946, i32 %2941, i32 %2942, !dbg !149
  %3018 = insertelement <1 x i32> poison, i32 %3017, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1886, <1 x i32> %3018, i1 %1878) #5, !dbg !146
  %3019 = select i1 %2980, i32 %2975, i32 %2976, !dbg !149
  %3020 = insertelement <1 x i32> poison, i32 %3019, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1893, <1 x i32> %3020, i1 %1878) #5, !dbg !146
  %3021 = select i1 %3014, i32 %3009, i32 %3010, !dbg !149
  %3022 = insertelement <1 x i32> poison, i32 %3021, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1900, <1 x i32> %3022, i1 %1878) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %3023 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1907, i1 %1906) #5, !dbg !146
  %3024 = bitcast i32 %3023 to float, !dbg !146
  %3025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3023, i32 2, i32 31), !dbg !146
  %3026 = bitcast i32 %3025 to float, !dbg !146
  %3027 = fcmp ogt float %3024, %3026, !dbg !143
  %3028 = fcmp uno float %3024, 0.000000e+00, !dbg !147
  %3029 = or i1 %3028, %3027, !dbg !148
  %3030 = select i1 %3029, float %3024, float %3026, !dbg !149
  %3031 = bitcast float %3030 to i32, !dbg !146
  %3032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3031, i32 1, i32 31), !dbg !146
  %3033 = bitcast i32 %3032 to float, !dbg !146
  %3034 = fcmp ogt float %3030, %3033, !dbg !143
  %3035 = fcmp uno float %3030, 0.000000e+00, !dbg !147
  %3036 = or i1 %3034, %3035, !dbg !148
  %3037 = select i1 %3036, i32 %3031, i32 %3032, !dbg !149
  %3038 = insertelement <1 x i32> poison, i32 %3037, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1907, <1 x i32> %3038, i1 %1956) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %3039 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !146
  %3040 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !146
  %3041 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !146
  %3042 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %3043 = bitcast float %3039 to i32, !dbg !150
  %3044 = bitcast float %3040 to i32, !dbg !150
  %3045 = bitcast float %3041 to i32, !dbg !150
  %3046 = bitcast float %3042 to i32, !dbg !150
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %3043, i32 %3044, i32 %3045, i32 %3046, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %3047 = load float, ptr addrspace(3) %2731, align 4, !dbg !150
  %3048 = sext i32 %1087 to i64, !dbg !151
  %3049 = getelementptr bfloat, ptr addrspace(1) %10, i64 %3048, !dbg !151
  %3050 = fptrunc float %2732 to bfloat, !dbg !145
  %3051 = and i32 %19, 124, !dbg !145
  %3052 = icmp eq i32 %3051, 0, !dbg !145
  %3053 = bitcast bfloat %3050 to i16, !dbg !145
  %3054 = and i1 %3052, %1088, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3053, ptr addrspace(1) %3049, i1 %3054) #5, !dbg !145
  %3055 = getelementptr bfloat, ptr addrspace(1) %11, i64 %3048, !dbg !152
  %3056 = fptrunc float %3047 to bfloat, !dbg !150
  %3057 = bitcast bfloat %3056 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3057, ptr addrspace(1) %3055, i1 %3054) #5, !dbg !150
  %3058 = insertelement <4 x float> poison, float %2726, i64 0, !dbg !153
  %3059 = insertelement <4 x float> %3058, float %2725, i64 1, !dbg !153
  %3060 = insertelement <4 x float> %3059, float %2724, i64 2, !dbg !153
  %3061 = insertelement <4 x float> %3060, float %2723, i64 3, !dbg !153
  %3062 = fcmp oge <4 x float> %3061, zeroinitializer, !dbg !153
  %3063 = select <4 x i1> %3062, <4 x float> zeroinitializer, <4 x float> %3061, !dbg !153
  %3064 = fsub <4 x float> zeroinitializer, %3063, !dbg !155
  %3065 = insertelement <4 x float> poison, float %3042, i64 0, !dbg !156
  %3066 = insertelement <4 x float> %3065, float %3041, i64 1, !dbg !156
  %3067 = insertelement <4 x float> %3066, float %3040, i64 2, !dbg !156
  %3068 = insertelement <4 x float> %3067, float %3039, i64 3, !dbg !156
  %3069 = fcmp ole <4 x float> %3068, zeroinitializer, !dbg !156
  %3070 = select <4 x i1> %3069, <4 x float> zeroinitializer, <4 x float> %3068, !dbg !156
  %3071 = fcmp ogt <4 x float> %3064, %3070, !dbg !158
  %3072 = fcmp uno <4 x float> %3064, zeroinitializer, !dbg !160
  %3073 = or <4 x i1> %3072, %3071, !dbg !161
  %3074 = select <4 x i1> %3073, <4 x float> %3064, <4 x float> %3070, !dbg !162
  %3075 = fmul <4 x float> %3074, splat (float 0x3F80204080000000), !dbg !163
  %3076 = fcmp ogt <4 x float> %3075, splat (float 0x3EE4F8B580000000), !dbg !164
  %3077 = extractelement <4 x float> %3075, i64 3, !dbg !166
  %3078 = fcmp uno float %3077, 0.000000e+00, !dbg !167
  %3079 = extractelement <4 x float> %3075, i64 2, !dbg !166
  %3080 = fcmp uno float %3079, 0.000000e+00, !dbg !167
  %3081 = extractelement <4 x float> %3075, i64 1, !dbg !166
  %3082 = fcmp uno float %3081, 0.000000e+00, !dbg !167
  %3083 = extractelement <4 x float> %3075, i64 0, !dbg !166
  %3084 = fcmp uno float %3083, 0.000000e+00, !dbg !167
  %3085 = extractelement <4 x i1> %3076, i64 3, !dbg !168
  %3086 = or i1 %3085, %3078, !dbg !168
  %3087 = extractelement <4 x i1> %3076, i64 2, !dbg !168
  %3088 = or i1 %3087, %3080, !dbg !168
  %3089 = extractelement <4 x i1> %3076, i64 1, !dbg !168
  %3090 = or i1 %3089, %3082, !dbg !168
  %3091 = extractelement <4 x i1> %3076, i64 0, !dbg !168
  %3092 = or i1 %3091, %3084, !dbg !168
  %3093 = select i1 %3086, float %3077, float 0x3EE4F8B580000000, !dbg !166
  %3094 = select i1 %3088, float %3079, float 0x3EE4F8B580000000, !dbg !166
  %3095 = select i1 %3090, float %3081, float 0x3EE4F8B580000000, !dbg !166
  %3096 = select i1 %3092, float %3083, float 0x3EE4F8B580000000, !dbg !166
  %3097 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3093), !dbg !169
  %3098 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3094), !dbg !169
  %3099 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3095), !dbg !169
  %3100 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3096), !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %3101 = bitcast float %3097 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3101, i1 true) #5, !dbg !170
  %3102 = bitcast float %3098 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3102, i1 true) #5, !dbg !170
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %3103 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !170
  %3104 = load float, ptr addrspace(3) %3103, align 4, !dbg !170
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %3105 = bitcast float %3099 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3105, i1 true) #5, !dbg !170
  %3106 = bitcast float %3100 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3106, i1 true) #5, !dbg !170
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %3107 = load float, ptr addrspace(3) %3103, align 4, !dbg !170
  br label %3108, !dbg !171

3108:                                             ; preds = %2419, %3108
  %indvars.iv515 = phi i64 [ 0, %2419 ], [ %indvars.iv.next516, %3108 ]
  %3109 = trunc i64 %indvars.iv515 to i32, !dbg !172
  %3110 = or disjoint i32 %31, %3109, !dbg !172
  %3111 = add i32 %3110, %107, !dbg !172
  %3112 = trunc i64 %indvars.iv515 to i32, !dbg !172
  %3113 = or disjoint i32 %32, %3112, !dbg !172
  %3114 = add i32 %3113, %107, !dbg !172
  %3115 = add i32 %3110, %108, !dbg !172
  %3116 = add i32 %3113, %108, !dbg !172
  %3117 = sext i32 %3111 to i64, !dbg !173
  %3118 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3117, !dbg !173
  %3119 = sext i32 %3114 to i64, !dbg !173
  %3120 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3119, !dbg !173
  %3121 = sext i32 %3115 to i64, !dbg !173
  %3122 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3121, !dbg !173
  %3123 = sext i32 %3116 to i64, !dbg !173
  %3124 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3123, !dbg !173
  %3125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3118, i1 %24) #5, !dbg !174
  %3126 = extractvalue { i32, i32, i32, i32 } %3125, 0, !dbg !174
  %3127 = bitcast i32 %3126 to <2 x bfloat>, !dbg !174
  %3128 = extractvalue { i32, i32, i32, i32 } %3125, 1, !dbg !174
  %3129 = bitcast i32 %3128 to <2 x bfloat>, !dbg !174
  %3130 = extractvalue { i32, i32, i32, i32 } %3125, 2, !dbg !174
  %3131 = bitcast i32 %3130 to <2 x bfloat>, !dbg !174
  %3132 = extractvalue { i32, i32, i32, i32 } %3125, 3, !dbg !174
  %3133 = bitcast i32 %3132 to <2 x bfloat>, !dbg !174
  %3134 = extractelement <2 x bfloat> %3127, i64 0, !dbg !174
  %3135 = extractelement <2 x bfloat> %3127, i64 1, !dbg !174
  %3136 = extractelement <2 x bfloat> %3129, i64 0, !dbg !174
  %3137 = extractelement <2 x bfloat> %3129, i64 1, !dbg !174
  %3138 = extractelement <2 x bfloat> %3131, i64 0, !dbg !174
  %3139 = extractelement <2 x bfloat> %3131, i64 1, !dbg !174
  %3140 = extractelement <2 x bfloat> %3133, i64 0, !dbg !174
  %3141 = extractelement <2 x bfloat> %3133, i64 1, !dbg !174
  %3142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3120, i1 %24) #5, !dbg !174
  %3143 = extractvalue { i32, i32, i32, i32 } %3142, 0, !dbg !174
  %3144 = bitcast i32 %3143 to <2 x bfloat>, !dbg !174
  %3145 = extractvalue { i32, i32, i32, i32 } %3142, 1, !dbg !174
  %3146 = bitcast i32 %3145 to <2 x bfloat>, !dbg !174
  %3147 = extractvalue { i32, i32, i32, i32 } %3142, 2, !dbg !174
  %3148 = bitcast i32 %3147 to <2 x bfloat>, !dbg !174
  %3149 = extractvalue { i32, i32, i32, i32 } %3142, 3, !dbg !174
  %3150 = bitcast i32 %3149 to <2 x bfloat>, !dbg !174
  %3151 = extractelement <2 x bfloat> %3144, i64 0, !dbg !174
  %3152 = extractelement <2 x bfloat> %3144, i64 1, !dbg !174
  %3153 = extractelement <2 x bfloat> %3146, i64 0, !dbg !174
  %3154 = extractelement <2 x bfloat> %3146, i64 1, !dbg !174
  %3155 = extractelement <2 x bfloat> %3148, i64 0, !dbg !174
  %3156 = extractelement <2 x bfloat> %3148, i64 1, !dbg !174
  %3157 = extractelement <2 x bfloat> %3150, i64 0, !dbg !174
  %3158 = extractelement <2 x bfloat> %3150, i64 1, !dbg !174
  %3159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3122, i1 %25) #5, !dbg !174
  %3160 = extractvalue { i32, i32, i32, i32 } %3159, 0, !dbg !174
  %3161 = bitcast i32 %3160 to <2 x bfloat>, !dbg !174
  %3162 = extractvalue { i32, i32, i32, i32 } %3159, 1, !dbg !174
  %3163 = bitcast i32 %3162 to <2 x bfloat>, !dbg !174
  %3164 = extractvalue { i32, i32, i32, i32 } %3159, 2, !dbg !174
  %3165 = bitcast i32 %3164 to <2 x bfloat>, !dbg !174
  %3166 = extractvalue { i32, i32, i32, i32 } %3159, 3, !dbg !174
  %3167 = bitcast i32 %3166 to <2 x bfloat>, !dbg !174
  %3168 = extractelement <2 x bfloat> %3161, i64 0, !dbg !174
  %3169 = extractelement <2 x bfloat> %3161, i64 1, !dbg !174
  %3170 = extractelement <2 x bfloat> %3163, i64 0, !dbg !174
  %3171 = extractelement <2 x bfloat> %3163, i64 1, !dbg !174
  %3172 = extractelement <2 x bfloat> %3165, i64 0, !dbg !174
  %3173 = extractelement <2 x bfloat> %3165, i64 1, !dbg !174
  %3174 = extractelement <2 x bfloat> %3167, i64 0, !dbg !174
  %3175 = extractelement <2 x bfloat> %3167, i64 1, !dbg !174
  %3176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3124, i1 %25) #5, !dbg !174
  %3177 = extractvalue { i32, i32, i32, i32 } %3176, 0, !dbg !174
  %3178 = bitcast i32 %3177 to <2 x bfloat>, !dbg !174
  %3179 = extractvalue { i32, i32, i32, i32 } %3176, 1, !dbg !174
  %3180 = bitcast i32 %3179 to <2 x bfloat>, !dbg !174
  %3181 = extractvalue { i32, i32, i32, i32 } %3176, 2, !dbg !174
  %3182 = bitcast i32 %3181 to <2 x bfloat>, !dbg !174
  %3183 = extractvalue { i32, i32, i32, i32 } %3176, 3, !dbg !174
  %3184 = bitcast i32 %3183 to <2 x bfloat>, !dbg !174
  %3185 = extractelement <2 x bfloat> %3178, i64 0, !dbg !174
  %3186 = extractelement <2 x bfloat> %3178, i64 1, !dbg !174
  %3187 = extractelement <2 x bfloat> %3180, i64 0, !dbg !174
  %3188 = extractelement <2 x bfloat> %3180, i64 1, !dbg !174
  %3189 = extractelement <2 x bfloat> %3182, i64 0, !dbg !174
  %3190 = extractelement <2 x bfloat> %3182, i64 1, !dbg !174
  %3191 = extractelement <2 x bfloat> %3184, i64 0, !dbg !174
  %3192 = extractelement <2 x bfloat> %3184, i64 1, !dbg !174
  %3193 = fpext bfloat %3134 to float, !dbg !175
  %3194 = fpext bfloat %3135 to float, !dbg !175
  %3195 = fpext bfloat %3136 to float, !dbg !175
  %3196 = fpext bfloat %3137 to float, !dbg !175
  %3197 = fpext bfloat %3138 to float, !dbg !175
  %3198 = fpext bfloat %3139 to float, !dbg !175
  %3199 = fpext bfloat %3140 to float, !dbg !175
  %3200 = fpext bfloat %3141 to float, !dbg !175
  %3201 = fpext bfloat %3151 to float, !dbg !175
  %3202 = fpext bfloat %3152 to float, !dbg !175
  %3203 = fpext bfloat %3153 to float, !dbg !175
  %3204 = fpext bfloat %3154 to float, !dbg !175
  %3205 = fpext bfloat %3155 to float, !dbg !175
  %3206 = fpext bfloat %3156 to float, !dbg !175
  %3207 = fpext bfloat %3157 to float, !dbg !175
  %3208 = fpext bfloat %3158 to float, !dbg !175
  %3209 = fpext bfloat %3168 to float, !dbg !175
  %3210 = fpext bfloat %3169 to float, !dbg !175
  %3211 = fpext bfloat %3170 to float, !dbg !175
  %3212 = fpext bfloat %3171 to float, !dbg !175
  %3213 = fpext bfloat %3172 to float, !dbg !175
  %3214 = fpext bfloat %3173 to float, !dbg !175
  %3215 = fpext bfloat %3174 to float, !dbg !175
  %3216 = fpext bfloat %3175 to float, !dbg !175
  %3217 = fpext bfloat %3185 to float, !dbg !175
  %3218 = fpext bfloat %3186 to float, !dbg !175
  %3219 = fpext bfloat %3187 to float, !dbg !175
  %3220 = fpext bfloat %3188 to float, !dbg !175
  %3221 = fpext bfloat %3189 to float, !dbg !175
  %3222 = fpext bfloat %3190 to float, !dbg !175
  %3223 = fpext bfloat %3191 to float, !dbg !175
  %3224 = fpext bfloat %3192 to float, !dbg !175
  %3225 = fmul float %3104, %3193, !dbg !170
  %3226 = fmul float %3104, %3194, !dbg !170
  %3227 = fmul float %3104, %3195, !dbg !170
  %3228 = fmul float %3104, %3196, !dbg !170
  %3229 = fmul float %3104, %3197, !dbg !170
  %3230 = fmul float %3104, %3198, !dbg !170
  %3231 = fmul float %3104, %3199, !dbg !170
  %3232 = fmul float %3104, %3200, !dbg !170
  %3233 = fmul float %3104, %3201, !dbg !170
  %3234 = fmul float %3104, %3202, !dbg !170
  %3235 = fmul float %3104, %3203, !dbg !170
  %3236 = fmul float %3104, %3204, !dbg !170
  %3237 = fmul float %3104, %3205, !dbg !170
  %3238 = fmul float %3104, %3206, !dbg !170
  %3239 = fmul float %3104, %3207, !dbg !170
  %3240 = fmul float %3104, %3208, !dbg !170
  %3241 = fmul float %3107, %3209, !dbg !170
  %3242 = fmul float %3107, %3210, !dbg !170
  %3243 = fmul float %3107, %3211, !dbg !170
  %3244 = fmul float %3107, %3212, !dbg !170
  %3245 = fmul float %3107, %3213, !dbg !170
  %3246 = fmul float %3107, %3214, !dbg !170
  %3247 = fmul float %3107, %3215, !dbg !170
  %3248 = fmul float %3107, %3216, !dbg !170
  %3249 = fmul float %3107, %3217, !dbg !170
  %3250 = fmul float %3107, %3218, !dbg !170
  %3251 = fmul float %3107, %3219, !dbg !170
  %3252 = fmul float %3107, %3220, !dbg !170
  %3253 = fmul float %3107, %3221, !dbg !170
  %3254 = fmul float %3107, %3222, !dbg !170
  %3255 = fmul float %3107, %3223, !dbg !170
  %3256 = fmul float %3107, %3224, !dbg !170
  %3257 = tail call float @llvm.nvvm.round.f(float %3225) #5, !dbg !176
  %3258 = tail call float @llvm.nvvm.round.f(float %3226) #5, !dbg !176
  %3259 = tail call float @llvm.nvvm.round.f(float %3227) #5, !dbg !176
  %3260 = tail call float @llvm.nvvm.round.f(float %3228) #5, !dbg !176
  %3261 = tail call float @llvm.nvvm.round.f(float %3229) #5, !dbg !176
  %3262 = tail call float @llvm.nvvm.round.f(float %3230) #5, !dbg !176
  %3263 = tail call float @llvm.nvvm.round.f(float %3231) #5, !dbg !176
  %3264 = tail call float @llvm.nvvm.round.f(float %3232) #5, !dbg !176
  %3265 = tail call float @llvm.nvvm.round.f(float %3233) #5, !dbg !176
  %3266 = tail call float @llvm.nvvm.round.f(float %3234) #5, !dbg !176
  %3267 = tail call float @llvm.nvvm.round.f(float %3235) #5, !dbg !176
  %3268 = tail call float @llvm.nvvm.round.f(float %3236) #5, !dbg !176
  %3269 = tail call float @llvm.nvvm.round.f(float %3237) #5, !dbg !176
  %3270 = tail call float @llvm.nvvm.round.f(float %3238) #5, !dbg !176
  %3271 = tail call float @llvm.nvvm.round.f(float %3239) #5, !dbg !176
  %3272 = tail call float @llvm.nvvm.round.f(float %3240) #5, !dbg !176
  %3273 = tail call float @llvm.nvvm.round.f(float %3241) #5, !dbg !176
  %3274 = tail call float @llvm.nvvm.round.f(float %3242) #5, !dbg !176
  %3275 = tail call float @llvm.nvvm.round.f(float %3243) #5, !dbg !176
  %3276 = tail call float @llvm.nvvm.round.f(float %3244) #5, !dbg !176
  %3277 = tail call float @llvm.nvvm.round.f(float %3245) #5, !dbg !176
  %3278 = tail call float @llvm.nvvm.round.f(float %3246) #5, !dbg !176
  %3279 = tail call float @llvm.nvvm.round.f(float %3247) #5, !dbg !176
  %3280 = tail call float @llvm.nvvm.round.f(float %3248) #5, !dbg !176
  %3281 = tail call float @llvm.nvvm.round.f(float %3249) #5, !dbg !176
  %3282 = tail call float @llvm.nvvm.round.f(float %3250) #5, !dbg !176
  %3283 = tail call float @llvm.nvvm.round.f(float %3251) #5, !dbg !176
  %3284 = tail call float @llvm.nvvm.round.f(float %3252) #5, !dbg !176
  %3285 = tail call float @llvm.nvvm.round.f(float %3253) #5, !dbg !176
  %3286 = tail call float @llvm.nvvm.round.f(float %3254) #5, !dbg !176
  %3287 = tail call float @llvm.nvvm.round.f(float %3255) #5, !dbg !176
  %3288 = tail call float @llvm.nvvm.round.f(float %3256) #5, !dbg !176
  %3289 = insertelement <4 x float> poison, float %3257, i64 0, !dbg !177
  %3290 = insertelement <4 x float> %3289, float %3258, i64 1, !dbg !177
  %3291 = insertelement <4 x float> %3290, float %3259, i64 2, !dbg !177
  %3292 = insertelement <4 x float> %3291, float %3260, i64 3, !dbg !177
  %3293 = fcmp ogt <4 x float> %3292, splat (float -1.270000e+02), !dbg !177
  %3294 = fcmp uno <4 x float> %3292, zeroinitializer, !dbg !179
  %3295 = or <4 x i1> %3293, %3294, !dbg !180
  %3296 = select <4 x i1> %3295, <4 x float> %3292, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3297 = fcmp olt <4 x float> %3296, splat (float 1.270000e+02), !dbg !182
  %3298 = fcmp uno <4 x float> %3296, zeroinitializer, !dbg !184
  %3299 = or <4 x i1> %3297, %3298, !dbg !185
  %3300 = fptosi <4 x float> %3296 to <4 x i8>, !dbg !186
  %3301 = select <4 x i1> %3299, <4 x i8> %3300, <4 x i8> splat (i8 127), !dbg !187
  %3302 = insertelement <4 x float> poison, float %3261, i64 0, !dbg !177
  %3303 = insertelement <4 x float> %3302, float %3262, i64 1, !dbg !177
  %3304 = insertelement <4 x float> %3303, float %3263, i64 2, !dbg !177
  %3305 = insertelement <4 x float> %3304, float %3264, i64 3, !dbg !177
  %3306 = fcmp ogt <4 x float> %3305, splat (float -1.270000e+02), !dbg !177
  %3307 = fcmp uno <4 x float> %3305, zeroinitializer, !dbg !179
  %3308 = or <4 x i1> %3306, %3307, !dbg !180
  %3309 = select <4 x i1> %3308, <4 x float> %3305, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3310 = fcmp olt <4 x float> %3309, splat (float 1.270000e+02), !dbg !182
  %3311 = fcmp uno <4 x float> %3309, zeroinitializer, !dbg !184
  %3312 = or <4 x i1> %3310, %3311, !dbg !185
  %3313 = fptosi <4 x float> %3309 to <4 x i8>, !dbg !186
  %3314 = select <4 x i1> %3312, <4 x i8> %3313, <4 x i8> splat (i8 127), !dbg !187
  %3315 = insertelement <4 x float> poison, float %3265, i64 0, !dbg !177
  %3316 = insertelement <4 x float> %3315, float %3266, i64 1, !dbg !177
  %3317 = insertelement <4 x float> %3316, float %3267, i64 2, !dbg !177
  %3318 = insertelement <4 x float> %3317, float %3268, i64 3, !dbg !177
  %3319 = fcmp ogt <4 x float> %3318, splat (float -1.270000e+02), !dbg !177
  %3320 = fcmp uno <4 x float> %3318, zeroinitializer, !dbg !179
  %3321 = or <4 x i1> %3319, %3320, !dbg !180
  %3322 = select <4 x i1> %3321, <4 x float> %3318, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3323 = fcmp olt <4 x float> %3322, splat (float 1.270000e+02), !dbg !182
  %3324 = fcmp uno <4 x float> %3322, zeroinitializer, !dbg !184
  %3325 = or <4 x i1> %3323, %3324, !dbg !185
  %3326 = fptosi <4 x float> %3322 to <4 x i8>, !dbg !186
  %3327 = select <4 x i1> %3325, <4 x i8> %3326, <4 x i8> splat (i8 127), !dbg !187
  %3328 = insertelement <4 x float> poison, float %3269, i64 0, !dbg !177
  %3329 = insertelement <4 x float> %3328, float %3270, i64 1, !dbg !177
  %3330 = insertelement <4 x float> %3329, float %3271, i64 2, !dbg !177
  %3331 = insertelement <4 x float> %3330, float %3272, i64 3, !dbg !177
  %3332 = fcmp ogt <4 x float> %3331, splat (float -1.270000e+02), !dbg !177
  %3333 = fcmp uno <4 x float> %3331, zeroinitializer, !dbg !179
  %3334 = or <4 x i1> %3332, %3333, !dbg !180
  %3335 = select <4 x i1> %3334, <4 x float> %3331, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3336 = fcmp olt <4 x float> %3335, splat (float 1.270000e+02), !dbg !182
  %3337 = fcmp uno <4 x float> %3335, zeroinitializer, !dbg !184
  %3338 = or <4 x i1> %3336, %3337, !dbg !185
  %3339 = fptosi <4 x float> %3335 to <4 x i8>, !dbg !186
  %3340 = select <4 x i1> %3338, <4 x i8> %3339, <4 x i8> splat (i8 127), !dbg !187
  %3341 = insertelement <4 x float> poison, float %3273, i64 0, !dbg !177
  %3342 = insertelement <4 x float> %3341, float %3274, i64 1, !dbg !177
  %3343 = insertelement <4 x float> %3342, float %3275, i64 2, !dbg !177
  %3344 = insertelement <4 x float> %3343, float %3276, i64 3, !dbg !177
  %3345 = fcmp ogt <4 x float> %3344, splat (float -1.270000e+02), !dbg !177
  %3346 = fcmp uno <4 x float> %3344, zeroinitializer, !dbg !179
  %3347 = or <4 x i1> %3345, %3346, !dbg !180
  %3348 = select <4 x i1> %3347, <4 x float> %3344, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3349 = fcmp olt <4 x float> %3348, splat (float 1.270000e+02), !dbg !182
  %3350 = fcmp uno <4 x float> %3348, zeroinitializer, !dbg !184
  %3351 = or <4 x i1> %3349, %3350, !dbg !185
  %3352 = fptosi <4 x float> %3348 to <4 x i8>, !dbg !186
  %3353 = select <4 x i1> %3351, <4 x i8> %3352, <4 x i8> splat (i8 127), !dbg !187
  %3354 = insertelement <4 x float> poison, float %3277, i64 0, !dbg !177
  %3355 = insertelement <4 x float> %3354, float %3278, i64 1, !dbg !177
  %3356 = insertelement <4 x float> %3355, float %3279, i64 2, !dbg !177
  %3357 = insertelement <4 x float> %3356, float %3280, i64 3, !dbg !177
  %3358 = fcmp ogt <4 x float> %3357, splat (float -1.270000e+02), !dbg !177
  %3359 = fcmp uno <4 x float> %3357, zeroinitializer, !dbg !179
  %3360 = or <4 x i1> %3358, %3359, !dbg !180
  %3361 = select <4 x i1> %3360, <4 x float> %3357, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3362 = fcmp olt <4 x float> %3361, splat (float 1.270000e+02), !dbg !182
  %3363 = fcmp uno <4 x float> %3361, zeroinitializer, !dbg !184
  %3364 = or <4 x i1> %3362, %3363, !dbg !185
  %3365 = fptosi <4 x float> %3361 to <4 x i8>, !dbg !186
  %3366 = select <4 x i1> %3364, <4 x i8> %3365, <4 x i8> splat (i8 127), !dbg !187
  %3367 = insertelement <4 x float> poison, float %3281, i64 0, !dbg !177
  %3368 = insertelement <4 x float> %3367, float %3282, i64 1, !dbg !177
  %3369 = insertelement <4 x float> %3368, float %3283, i64 2, !dbg !177
  %3370 = insertelement <4 x float> %3369, float %3284, i64 3, !dbg !177
  %3371 = fcmp ogt <4 x float> %3370, splat (float -1.270000e+02), !dbg !177
  %3372 = fcmp uno <4 x float> %3370, zeroinitializer, !dbg !179
  %3373 = or <4 x i1> %3371, %3372, !dbg !180
  %3374 = select <4 x i1> %3373, <4 x float> %3370, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3375 = fcmp olt <4 x float> %3374, splat (float 1.270000e+02), !dbg !182
  %3376 = fcmp uno <4 x float> %3374, zeroinitializer, !dbg !184
  %3377 = or <4 x i1> %3375, %3376, !dbg !185
  %3378 = fptosi <4 x float> %3374 to <4 x i8>, !dbg !186
  %3379 = select <4 x i1> %3377, <4 x i8> %3378, <4 x i8> splat (i8 127), !dbg !187
  %3380 = insertelement <4 x float> poison, float %3285, i64 0, !dbg !177
  %3381 = insertelement <4 x float> %3380, float %3286, i64 1, !dbg !177
  %3382 = insertelement <4 x float> %3381, float %3287, i64 2, !dbg !177
  %3383 = insertelement <4 x float> %3382, float %3288, i64 3, !dbg !177
  %3384 = fcmp ogt <4 x float> %3383, splat (float -1.270000e+02), !dbg !177
  %3385 = fcmp uno <4 x float> %3383, zeroinitializer, !dbg !179
  %3386 = or <4 x i1> %3384, %3385, !dbg !180
  %3387 = select <4 x i1> %3386, <4 x float> %3383, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3388 = fcmp olt <4 x float> %3387, splat (float 1.270000e+02), !dbg !182
  %3389 = fcmp uno <4 x float> %3387, zeroinitializer, !dbg !184
  %3390 = or <4 x i1> %3388, %3389, !dbg !185
  %3391 = fptosi <4 x float> %3387 to <4 x i8>, !dbg !186
  %3392 = select <4 x i1> %3390, <4 x i8> %3391, <4 x i8> splat (i8 127), !dbg !187
  %3393 = getelementptr i8, ptr addrspace(1) %12, i64 %3117, !dbg !188
  %3394 = getelementptr i8, ptr addrspace(1) %12, i64 %3121, !dbg !188
  %3395 = bitcast <4 x i8> %3301 to i32, !dbg !189
  %3396 = bitcast <4 x i8> %3314 to i32, !dbg !189
  %3397 = bitcast <4 x i8> %3327 to i32, !dbg !189
  %3398 = bitcast <4 x i8> %3340 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3395, i32 %3396, i32 %3397, i32 %3398, ptr addrspace(1) %3393, i1 %24) #5, !dbg !189
  %3399 = bitcast <4 x i8> %3353 to i32, !dbg !189
  %3400 = bitcast <4 x i8> %3366 to i32, !dbg !189
  %3401 = bitcast <4 x i8> %3379 to i32, !dbg !189
  %3402 = bitcast <4 x i8> %3392 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3399, i32 %3400, i32 %3401, i32 %3402, ptr addrspace(1) %3394, i1 %25) #5, !dbg !189
  %indvars.iv.next516 = add nuw nsw i64 %indvars.iv515, 1024, !dbg !171
  %3403 = icmp samesign ult i64 %indvars.iv515, 2048, !dbg !171
  br i1 %3403, label %3108, label %3404, !dbg !171

3404:                                             ; preds = %3108
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 112, column: 50, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 110, column: 50, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 87, column: 43, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 111, column: 47, scope: !6)
!115 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 109, column: 47, scope: !6)
!117 = !DILocation(line: 86, column: 115, scope: !6)
!118 = !DILocation(line: 87, column: 50, scope: !6)
!119 = !DILocation(line: 88, column: 50, scope: !6)
!120 = !DILocation(line: 88, column: 103, scope: !6)
!121 = !DILocation(line: 89, column: 49, scope: !6)
!122 = !DILocation(line: 90, column: 49, scope: !6)
!123 = !DILocation(line: 90, column: 102, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 103, column: 24, scope: !6)
!126 = !DILocation(line: 104, column: 24, scope: !6)
!127 = !DILocation(line: 106, column: 24, scope: !6)
!128 = !DILocation(line: 107, column: 24, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !116)
!131 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !116)
!132 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !116)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !114)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !114)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !114)
!136 = !DILocation(line: 113, column: 29, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !138)
!143 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 116, column: 37, scope: !6)
!146 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 140, column: 24, scope: !6)
!171 = !DILocation(line: 118, column: 40, scope: !6)
!172 = !DILocation(line: 124, column: 43, scope: !6)
!173 = !DILocation(line: 124, column: 36, scope: !6)
!174 = !DILocation(line: 124, column: 53, scope: !6)
!175 = !DILocation(line: 124, column: 115, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
