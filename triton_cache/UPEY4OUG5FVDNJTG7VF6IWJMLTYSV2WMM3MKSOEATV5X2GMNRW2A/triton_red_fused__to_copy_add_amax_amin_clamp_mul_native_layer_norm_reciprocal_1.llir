; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 3600, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = shl i32 %19, 4, !dbg !11
  %22 = and i32 %21, 2032, !dbg !11
  %23 = or disjoint i32 %22, 8, !dbg !11
  %24 = shl i32 %19, 3, !dbg !11
  %25 = and i32 %24, 1016, !dbg !11
  %26 = mul i32 %17, 3072, !dbg !12
  %27 = add i32 %23, %26
  %28 = zext nneg i32 %22 to i64, !dbg !13
  br label %29, !dbg !13

29:                                               ; preds = %16, %._crit_edge
  %30 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %16 ], [ %329, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %16 ], [ %330, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %16 ], [ %331, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %16 ], [ %332, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %16 ], [ %285, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %16 ], [ %286, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %16 ], [ %287, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %16 ], [ %288, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %289, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %290, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %291, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %292, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %293, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %294, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %295, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %296, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %297, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %298, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %79 = or disjoint i64 %indvars.iv, %28, !dbg !14
  %80 = icmp samesign ult i64 %79, 3072, !dbg !15
  %81 = trunc nuw nsw i64 %79 to i32, !dbg !16
  %82 = add i32 %26, %81, !dbg !16
  %83 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !16
  %84 = add i32 %27, %83, !dbg !16
  %85 = sext i32 %82 to i64, !dbg !17
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !17
  %87 = sext i32 %84 to i64, !dbg !17
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !17
  %89 = and i1 %18, %80, !dbg !18
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %86, i1 %89) #5, !dbg !19
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !19
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !19
  %93 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !19
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !19
  %95 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !19
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !19
  %97 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !19
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !19
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !19
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !19
  %101 = extractelement <2 x bfloat> %94, i64 0, !dbg !19
  %102 = extractelement <2 x bfloat> %94, i64 1, !dbg !19
  %103 = extractelement <2 x bfloat> %96, i64 0, !dbg !19
  %104 = extractelement <2 x bfloat> %96, i64 1, !dbg !19
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !19
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !19
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %88, i1 %89) #5, !dbg !19
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !19
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !19
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !19
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !19
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !19
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !19
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !19
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !19
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !19
  %118 = extractelement <2 x bfloat> %111, i64 0, !dbg !19
  %119 = extractelement <2 x bfloat> %111, i64 1, !dbg !19
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !19
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !19
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !19
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !19
  %124 = fpext bfloat %99 to float, !dbg !20
  %125 = fpext bfloat %100 to float, !dbg !20
  %126 = fpext bfloat %101 to float, !dbg !20
  %127 = fpext bfloat %102 to float, !dbg !20
  %128 = fpext bfloat %103 to float, !dbg !20
  %129 = fpext bfloat %104 to float, !dbg !20
  %130 = fpext bfloat %105 to float, !dbg !20
  %131 = fpext bfloat %106 to float, !dbg !20
  %132 = fpext bfloat %116 to float, !dbg !20
  %133 = fpext bfloat %117 to float, !dbg !20
  %134 = fpext bfloat %118 to float, !dbg !20
  %135 = fpext bfloat %119 to float, !dbg !20
  %136 = fpext bfloat %120 to float, !dbg !20
  %137 = fpext bfloat %121 to float, !dbg !20
  %138 = fpext bfloat %122 to float, !dbg !20
  %139 = fpext bfloat %123 to float, !dbg !20
  br i1 %30, label %._crit_edge, label %140, !dbg !21

140:                                              ; preds = %29
  %141 = fsub float %124, %63, !dbg !25
  %142 = fsub float %125, %64, !dbg !25
  %143 = fsub float %126, %65, !dbg !25
  %144 = fsub float %127, %66, !dbg !25
  %145 = fsub float %128, %67, !dbg !25
  %146 = fsub float %129, %68, !dbg !25
  %147 = fsub float %130, %69, !dbg !25
  %148 = fsub float %131, %70, !dbg !25
  %149 = fsub float %132, %71, !dbg !25
  %150 = fsub float %133, %72, !dbg !25
  %151 = fsub float %134, %73, !dbg !25
  %152 = fsub float %135, %74, !dbg !25
  %153 = fsub float %136, %75, !dbg !25
  %154 = fsub float %137, %76, !dbg !25
  %155 = fsub float %138, %77, !dbg !25
  %156 = fsub float %139, %78, !dbg !25
  %157 = fadd float %31, 1.000000e+00, !dbg !26
  %158 = fadd float %32, 1.000000e+00, !dbg !26
  %159 = fadd float %33, 1.000000e+00, !dbg !26
  %160 = fadd float %34, 1.000000e+00, !dbg !26
  %161 = fadd float %35, 1.000000e+00, !dbg !26
  %162 = fadd float %36, 1.000000e+00, !dbg !26
  %163 = fadd float %37, 1.000000e+00, !dbg !26
  %164 = fadd float %38, 1.000000e+00, !dbg !26
  %165 = fadd float %39, 1.000000e+00, !dbg !26
  %166 = fadd float %40, 1.000000e+00, !dbg !26
  %167 = fadd float %41, 1.000000e+00, !dbg !26
  %168 = fadd float %42, 1.000000e+00, !dbg !26
  %169 = fadd float %43, 1.000000e+00, !dbg !26
  %170 = fadd float %44, 1.000000e+00, !dbg !26
  %171 = fadd float %45, 1.000000e+00, !dbg !26
  %172 = fadd float %46, 1.000000e+00, !dbg !26
  %173 = tail call float @llvm.nvvm.div.full(float %141, float %157), !dbg !27
  %174 = tail call float @llvm.nvvm.div.full(float %142, float %158), !dbg !27
  %175 = tail call float @llvm.nvvm.div.full(float %143, float %159), !dbg !27
  %176 = tail call float @llvm.nvvm.div.full(float %144, float %160), !dbg !27
  %177 = tail call float @llvm.nvvm.div.full(float %145, float %161), !dbg !27
  %178 = tail call float @llvm.nvvm.div.full(float %146, float %162), !dbg !27
  %179 = tail call float @llvm.nvvm.div.full(float %147, float %163), !dbg !27
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !27
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !27
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !27
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !27
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !27
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !27
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !27
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !27
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !27
  %189 = fadd float %63, %173, !dbg !28
  %190 = fadd float %64, %174, !dbg !28
  %191 = fadd float %65, %175, !dbg !28
  %192 = fadd float %66, %176, !dbg !28
  %193 = fadd float %67, %177, !dbg !28
  %194 = fadd float %68, %178, !dbg !28
  %195 = fadd float %69, %179, !dbg !28
  %196 = fadd float %70, %180, !dbg !28
  %197 = fadd float %71, %181, !dbg !28
  %198 = fadd float %72, %182, !dbg !28
  %199 = fadd float %73, %183, !dbg !28
  %200 = fadd float %74, %184, !dbg !28
  %201 = fadd float %75, %185, !dbg !28
  %202 = fadd float %76, %186, !dbg !28
  %203 = fadd float %77, %187, !dbg !28
  %204 = fadd float %78, %188, !dbg !28
  %205 = fsub float %124, %189, !dbg !29
  %206 = fsub float %125, %190, !dbg !29
  %207 = fsub float %126, %191, !dbg !29
  %208 = fsub float %127, %192, !dbg !29
  %209 = fsub float %128, %193, !dbg !29
  %210 = fsub float %129, %194, !dbg !29
  %211 = fsub float %130, %195, !dbg !29
  %212 = fsub float %131, %196, !dbg !29
  %213 = fsub float %132, %197, !dbg !29
  %214 = fsub float %133, %198, !dbg !29
  %215 = fsub float %134, %199, !dbg !29
  %216 = fsub float %135, %200, !dbg !29
  %217 = fsub float %136, %201, !dbg !29
  %218 = fsub float %137, %202, !dbg !29
  %219 = fsub float %138, %203, !dbg !29
  %220 = fsub float %139, %204, !dbg !29
  %221 = fmul float %141, %205, !dbg !30
  %222 = fmul float %142, %206, !dbg !30
  %223 = fmul float %143, %207, !dbg !30
  %224 = fmul float %144, %208, !dbg !30
  %225 = fmul float %145, %209, !dbg !30
  %226 = fmul float %146, %210, !dbg !30
  %227 = fmul float %147, %211, !dbg !30
  %228 = fmul float %148, %212, !dbg !30
  %229 = fmul float %149, %213, !dbg !30
  %230 = fmul float %150, %214, !dbg !30
  %231 = fmul float %151, %215, !dbg !30
  %232 = fmul float %152, %216, !dbg !30
  %233 = fmul float %153, %217, !dbg !30
  %234 = fmul float %154, %218, !dbg !30
  %235 = fmul float %155, %219, !dbg !30
  %236 = fmul float %156, %220, !dbg !30
  %237 = fadd float %47, %221, !dbg !31
  %238 = fadd float %48, %222, !dbg !31
  %239 = fadd float %49, %223, !dbg !31
  %240 = fadd float %50, %224, !dbg !31
  %241 = fadd float %51, %225, !dbg !31
  %242 = fadd float %52, %226, !dbg !31
  %243 = fadd float %53, %227, !dbg !31
  %244 = fadd float %54, %228, !dbg !31
  %245 = fadd float %55, %229, !dbg !31
  %246 = fadd float %56, %230, !dbg !31
  %247 = fadd float %57, %231, !dbg !31
  %248 = fadd float %58, %232, !dbg !31
  %249 = fadd float %59, %233, !dbg !31
  %250 = fadd float %60, %234, !dbg !31
  %251 = fadd float %61, %235, !dbg !31
  %252 = fadd float %62, %236, !dbg !31
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %29, %140
  %253 = phi float [ %237, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %254 = phi float [ %238, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %255 = phi float [ %239, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %256 = phi float [ %240, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %257 = phi float [ %241, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %258 = phi float [ %242, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %259 = phi float [ %243, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %260 = phi float [ %244, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %261 = phi float [ %245, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %262 = phi float [ %246, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %263 = phi float [ %247, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %264 = phi float [ %248, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %265 = phi float [ %249, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %266 = phi float [ %250, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %267 = phi float [ %251, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %268 = phi float [ %252, %140 ], [ 0.000000e+00, %29 ], !dbg !24
  %.pn56 = phi float [ %189, %140 ], [ %124, %29 ]
  %.pn54 = phi float [ %190, %140 ], [ %125, %29 ]
  %.pn52 = phi float [ %191, %140 ], [ %126, %29 ]
  %.pn50 = phi float [ %192, %140 ], [ %127, %29 ]
  %.pn48 = phi float [ %193, %140 ], [ %128, %29 ]
  %.pn46 = phi float [ %194, %140 ], [ %129, %29 ]
  %.pn44 = phi float [ %195, %140 ], [ %130, %29 ]
  %.pn42 = phi float [ %196, %140 ], [ %131, %29 ]
  %.pn40 = phi float [ %197, %140 ], [ %132, %29 ]
  %.pn38 = phi float [ %198, %140 ], [ %133, %29 ]
  %.pn36 = phi float [ %199, %140 ], [ %134, %29 ]
  %.pn34 = phi float [ %200, %140 ], [ %135, %29 ]
  %.pn32 = phi float [ %201, %140 ], [ %136, %29 ]
  %.pn30 = phi float [ %202, %140 ], [ %137, %29 ]
  %.pn28 = phi float [ %203, %140 ], [ %138, %29 ]
  %.pn26 = phi float [ %204, %140 ], [ %139, %29 ]
  %269 = phi float [ %157, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %270 = phi float [ %158, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %271 = phi float [ %159, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %272 = phi float [ %160, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %273 = phi float [ %161, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %274 = phi float [ %162, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %275 = phi float [ %163, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %276 = phi float [ %164, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %277 = phi float [ %165, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %278 = phi float [ %166, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %279 = phi float [ %167, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %280 = phi float [ %168, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %281 = phi float [ %169, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %282 = phi float [ %170, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %283 = phi float [ %171, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %284 = phi float [ %172, %140 ], [ 1.000000e+00, %29 ], !dbg !24
  %285 = select i1 %89, float %.pn56, float %63, !dbg !32
  %286 = select i1 %89, float %.pn54, float %64, !dbg !32
  %287 = select i1 %89, float %.pn52, float %65, !dbg !32
  %288 = select i1 %89, float %.pn50, float %66, !dbg !32
  %289 = select i1 %89, float %.pn48, float %67, !dbg !32
  %290 = select i1 %89, float %.pn46, float %68, !dbg !32
  %291 = select i1 %89, float %.pn44, float %69, !dbg !32
  %292 = select i1 %89, float %.pn42, float %70, !dbg !32
  %293 = select i1 %89, float %.pn40, float %71, !dbg !32
  %294 = select i1 %89, float %.pn38, float %72, !dbg !32
  %295 = select i1 %89, float %.pn36, float %73, !dbg !32
  %296 = select i1 %89, float %.pn34, float %74, !dbg !32
  %297 = select i1 %89, float %.pn32, float %75, !dbg !32
  %298 = select i1 %89, float %.pn30, float %76, !dbg !32
  %299 = select i1 %89, float %.pn28, float %77, !dbg !32
  %300 = select i1 %89, float %.pn26, float %78, !dbg !32
  %301 = select i1 %89, float %253, float %47, !dbg !33
  %302 = select i1 %89, float %254, float %48, !dbg !33
  %303 = select i1 %89, float %255, float %49, !dbg !33
  %304 = select i1 %89, float %256, float %50, !dbg !33
  %305 = select i1 %89, float %257, float %51, !dbg !33
  %306 = select i1 %89, float %258, float %52, !dbg !33
  %307 = select i1 %89, float %259, float %53, !dbg !33
  %308 = select i1 %89, float %260, float %54, !dbg !33
  %309 = select i1 %89, float %261, float %55, !dbg !33
  %310 = select i1 %89, float %262, float %56, !dbg !33
  %311 = select i1 %89, float %263, float %57, !dbg !33
  %312 = select i1 %89, float %264, float %58, !dbg !33
  %313 = select i1 %89, float %265, float %59, !dbg !33
  %314 = select i1 %89, float %266, float %60, !dbg !33
  %315 = select i1 %89, float %267, float %61, !dbg !33
  %316 = select i1 %89, float %268, float %62, !dbg !33
  %317 = select i1 %89, float %269, float %31, !dbg !34
  %318 = select i1 %89, float %270, float %32, !dbg !34
  %319 = select i1 %89, float %271, float %33, !dbg !34
  %320 = select i1 %89, float %272, float %34, !dbg !34
  %321 = select i1 %89, float %273, float %35, !dbg !34
  %322 = select i1 %89, float %274, float %36, !dbg !34
  %323 = select i1 %89, float %275, float %37, !dbg !34
  %324 = select i1 %89, float %276, float %38, !dbg !34
  %325 = select i1 %89, float %277, float %39, !dbg !34
  %326 = select i1 %89, float %278, float %40, !dbg !34
  %327 = select i1 %89, float %279, float %41, !dbg !34
  %328 = select i1 %89, float %280, float %42, !dbg !34
  %329 = select i1 %89, float %281, float %43, !dbg !34
  %330 = select i1 %89, float %282, float %44, !dbg !34
  %331 = select i1 %89, float %283, float %45, !dbg !34
  %332 = select i1 %89, float %284, float %46, !dbg !34
  br i1 %30, label %29, label %__nv_rsqrtf.exit, !dbg !13

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %333 = lshr i32 %19, 5, !dbg !11
  %334 = or disjoint i32 %25, 1024, !dbg !11
  %335 = fsub float %286, %285, !dbg !35
  %336 = fadd float %317, %318, !dbg !38
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !39
  %338 = tail call float @llvm.nvvm.div.full(float %318, float %336), !dbg !40
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !41
  %340 = fmul float %335, %339, !dbg !42
  %341 = fadd float %285, %340, !dbg !43
  %342 = fadd float %301, %302, !dbg !44
  %343 = fmul float %335, %335, !dbg !45
  %344 = fmul float %343, %317, !dbg !46
  %345 = fmul float %344, %339, !dbg !47
  %346 = fadd float %342, %345, !dbg !48
  %347 = fsub float %287, %341, !dbg !35
  %348 = fadd float %319, %336, !dbg !38
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !39
  %350 = tail call float @llvm.nvvm.div.full(float %319, float %348), !dbg !40
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !41
  %352 = fmul float %351, %347, !dbg !42
  %353 = fadd float %341, %352, !dbg !43
  %354 = fadd float %303, %346, !dbg !44
  %355 = fmul float %347, %347, !dbg !45
  %356 = fmul float %336, %355, !dbg !46
  %357 = fmul float %351, %356, !dbg !47
  %358 = fadd float %354, %357, !dbg !48
  %359 = fsub float %288, %353, !dbg !35
  %360 = fadd float %320, %348, !dbg !38
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !39
  %362 = tail call float @llvm.nvvm.div.full(float %320, float %360), !dbg !40
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !41
  %364 = fmul float %363, %359, !dbg !42
  %365 = fadd float %353, %364, !dbg !43
  %366 = fadd float %304, %358, !dbg !44
  %367 = fmul float %359, %359, !dbg !45
  %368 = fmul float %348, %367, !dbg !46
  %369 = fmul float %363, %368, !dbg !47
  %370 = fadd float %366, %369, !dbg !48
  %371 = fsub float %289, %365, !dbg !35
  %372 = fadd float %321, %360, !dbg !38
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !39
  %374 = tail call float @llvm.nvvm.div.full(float %321, float %372), !dbg !40
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !41
  %376 = fmul float %375, %371, !dbg !42
  %377 = fadd float %365, %376, !dbg !43
  %378 = fadd float %305, %370, !dbg !44
  %379 = fmul float %371, %371, !dbg !45
  %380 = fmul float %360, %379, !dbg !46
  %381 = fmul float %375, %380, !dbg !47
  %382 = fadd float %378, %381, !dbg !48
  %383 = fsub float %290, %377, !dbg !35
  %384 = fadd float %322, %372, !dbg !38
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !39
  %386 = tail call float @llvm.nvvm.div.full(float %322, float %384), !dbg !40
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !41
  %388 = fmul float %387, %383, !dbg !42
  %389 = fadd float %377, %388, !dbg !43
  %390 = fadd float %306, %382, !dbg !44
  %391 = fmul float %383, %383, !dbg !45
  %392 = fmul float %372, %391, !dbg !46
  %393 = fmul float %387, %392, !dbg !47
  %394 = fadd float %390, %393, !dbg !48
  %395 = fsub float %291, %389, !dbg !35
  %396 = fadd float %323, %384, !dbg !38
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !39
  %398 = tail call float @llvm.nvvm.div.full(float %323, float %396), !dbg !40
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !41
  %400 = fmul float %399, %395, !dbg !42
  %401 = fadd float %389, %400, !dbg !43
  %402 = fadd float %307, %394, !dbg !44
  %403 = fmul float %395, %395, !dbg !45
  %404 = fmul float %384, %403, !dbg !46
  %405 = fmul float %399, %404, !dbg !47
  %406 = fadd float %402, %405, !dbg !48
  %407 = fsub float %292, %401, !dbg !35
  %408 = fadd float %324, %396, !dbg !38
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !39
  %410 = tail call float @llvm.nvvm.div.full(float %324, float %408), !dbg !40
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !41
  %412 = fmul float %411, %407, !dbg !42
  %413 = fadd float %401, %412, !dbg !43
  %414 = fadd float %308, %406, !dbg !44
  %415 = fmul float %407, %407, !dbg !45
  %416 = fmul float %396, %415, !dbg !46
  %417 = fmul float %411, %416, !dbg !47
  %418 = fadd float %414, %417, !dbg !48
  %419 = fsub float %293, %413, !dbg !35
  %420 = fadd float %325, %408, !dbg !38
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !39
  %422 = tail call float @llvm.nvvm.div.full(float %325, float %420), !dbg !40
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !41
  %424 = fmul float %423, %419, !dbg !42
  %425 = fadd float %413, %424, !dbg !43
  %426 = fadd float %309, %418, !dbg !44
  %427 = fmul float %419, %419, !dbg !45
  %428 = fmul float %408, %427, !dbg !46
  %429 = fmul float %423, %428, !dbg !47
  %430 = fadd float %426, %429, !dbg !48
  %431 = fsub float %294, %425, !dbg !35
  %432 = fadd float %326, %420, !dbg !38
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !39
  %434 = tail call float @llvm.nvvm.div.full(float %326, float %432), !dbg !40
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !41
  %436 = fmul float %435, %431, !dbg !42
  %437 = fadd float %425, %436, !dbg !43
  %438 = fadd float %310, %430, !dbg !44
  %439 = fmul float %431, %431, !dbg !45
  %440 = fmul float %420, %439, !dbg !46
  %441 = fmul float %435, %440, !dbg !47
  %442 = fadd float %438, %441, !dbg !48
  %443 = fsub float %295, %437, !dbg !35
  %444 = fadd float %327, %432, !dbg !38
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !39
  %446 = tail call float @llvm.nvvm.div.full(float %327, float %444), !dbg !40
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !41
  %448 = fmul float %447, %443, !dbg !42
  %449 = fadd float %437, %448, !dbg !43
  %450 = fadd float %311, %442, !dbg !44
  %451 = fmul float %443, %443, !dbg !45
  %452 = fmul float %432, %451, !dbg !46
  %453 = fmul float %447, %452, !dbg !47
  %454 = fadd float %450, %453, !dbg !48
  %455 = fsub float %296, %449, !dbg !35
  %456 = fadd float %328, %444, !dbg !38
  %457 = fcmp oeq float %456, 0.000000e+00, !dbg !39
  %458 = tail call float @llvm.nvvm.div.full(float %328, float %456), !dbg !40
  %459 = select i1 %457, float 0.000000e+00, float %458, !dbg !41
  %460 = fmul float %459, %455, !dbg !42
  %461 = fadd float %449, %460, !dbg !43
  %462 = fadd float %312, %454, !dbg !44
  %463 = fmul float %455, %455, !dbg !45
  %464 = fmul float %444, %463, !dbg !46
  %465 = fmul float %459, %464, !dbg !47
  %466 = fadd float %462, %465, !dbg !48
  %467 = fsub float %297, %461, !dbg !35
  %468 = fadd float %329, %456, !dbg !38
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !39
  %470 = tail call float @llvm.nvvm.div.full(float %329, float %468), !dbg !40
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !41
  %472 = fmul float %471, %467, !dbg !42
  %473 = fadd float %461, %472, !dbg !43
  %474 = fadd float %313, %466, !dbg !44
  %475 = fmul float %467, %467, !dbg !45
  %476 = fmul float %456, %475, !dbg !46
  %477 = fmul float %471, %476, !dbg !47
  %478 = fadd float %474, %477, !dbg !48
  %479 = fsub float %298, %473, !dbg !35
  %480 = fadd float %330, %468, !dbg !38
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !39
  %482 = tail call float @llvm.nvvm.div.full(float %330, float %480), !dbg !40
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !41
  %484 = fmul float %483, %479, !dbg !42
  %485 = fadd float %473, %484, !dbg !43
  %486 = fadd float %314, %478, !dbg !44
  %487 = fmul float %479, %479, !dbg !45
  %488 = fmul float %468, %487, !dbg !46
  %489 = fmul float %483, %488, !dbg !47
  %490 = fadd float %486, %489, !dbg !48
  %491 = fsub float %299, %485, !dbg !35
  %492 = fadd float %331, %480, !dbg !38
  %493 = fcmp oeq float %492, 0.000000e+00, !dbg !39
  %494 = tail call float @llvm.nvvm.div.full(float %331, float %492), !dbg !40
  %495 = select i1 %493, float 0.000000e+00, float %494, !dbg !41
  %496 = fmul float %495, %491, !dbg !42
  %497 = fadd float %485, %496, !dbg !43
  %498 = fadd float %315, %490, !dbg !44
  %499 = fmul float %491, %491, !dbg !45
  %500 = fmul float %480, %499, !dbg !46
  %501 = fmul float %495, %500, !dbg !47
  %502 = fadd float %498, %501, !dbg !48
  %503 = fsub float %300, %497, !dbg !35
  %504 = fadd float %332, %492, !dbg !38
  %505 = fcmp oeq float %504, 0.000000e+00, !dbg !39
  %506 = tail call float @llvm.nvvm.div.full(float %332, float %504), !dbg !40
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !41
  %508 = fmul float %507, %503, !dbg !42
  %509 = fadd float %497, %508, !dbg !43
  %510 = fadd float %316, %502, !dbg !44
  %511 = fmul float %503, %503, !dbg !45
  %512 = fmul float %492, %511, !dbg !46
  %513 = fmul float %507, %512, !dbg !47
  %514 = fadd float %510, %513, !dbg !48
  %515 = bitcast float %509 to i32, !dbg !49
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 16, i32 31), !dbg !49
  %517 = bitcast i32 %516 to float, !dbg !49
  %518 = bitcast float %514 to i32, !dbg !49
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 16, i32 31), !dbg !49
  %520 = bitcast i32 %519 to float, !dbg !49
  %521 = bitcast float %504 to i32, !dbg !49
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 16, i32 31), !dbg !49
  %523 = bitcast i32 %522 to float, !dbg !49
  %524 = fsub float %517, %509, !dbg !35
  %525 = fadd float %504, %523, !dbg !38
  %526 = fcmp oeq float %525, 0.000000e+00, !dbg !39
  %527 = tail call float @llvm.nvvm.div.full(float %523, float %525), !dbg !40
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !41
  %529 = fmul float %528, %524, !dbg !42
  %530 = fadd float %509, %529, !dbg !43
  %531 = fadd float %514, %520, !dbg !44
  %532 = fmul float %524, %524, !dbg !45
  %533 = fmul float %504, %532, !dbg !46
  %534 = fmul float %528, %533, !dbg !47
  %535 = fadd float %531, %534, !dbg !48
  %536 = bitcast float %530 to i32, !dbg !49
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 8, i32 31), !dbg !49
  %538 = bitcast i32 %537 to float, !dbg !49
  %539 = bitcast float %535 to i32, !dbg !49
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 8, i32 31), !dbg !49
  %541 = bitcast i32 %540 to float, !dbg !49
  %542 = bitcast float %525 to i32, !dbg !49
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 8, i32 31), !dbg !49
  %544 = bitcast i32 %543 to float, !dbg !49
  %545 = fsub float %538, %530, !dbg !35
  %546 = fadd float %525, %544, !dbg !38
  %547 = fcmp oeq float %546, 0.000000e+00, !dbg !39
  %548 = tail call float @llvm.nvvm.div.full(float %544, float %546), !dbg !40
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !41
  %550 = fmul float %549, %545, !dbg !42
  %551 = fadd float %530, %550, !dbg !43
  %552 = fadd float %535, %541, !dbg !44
  %553 = fmul float %545, %545, !dbg !45
  %554 = fmul float %525, %553, !dbg !46
  %555 = fmul float %549, %554, !dbg !47
  %556 = fadd float %552, %555, !dbg !48
  %557 = bitcast float %551 to i32, !dbg !49
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 4, i32 31), !dbg !49
  %559 = bitcast i32 %558 to float, !dbg !49
  %560 = bitcast float %556 to i32, !dbg !49
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 4, i32 31), !dbg !49
  %562 = bitcast i32 %561 to float, !dbg !49
  %563 = bitcast float %546 to i32, !dbg !49
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 4, i32 31), !dbg !49
  %565 = bitcast i32 %564 to float, !dbg !49
  %566 = fsub float %559, %551, !dbg !35
  %567 = fadd float %546, %565, !dbg !38
  %568 = fcmp oeq float %567, 0.000000e+00, !dbg !39
  %569 = tail call float @llvm.nvvm.div.full(float %565, float %567), !dbg !40
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !41
  %571 = fmul float %570, %566, !dbg !42
  %572 = fadd float %551, %571, !dbg !43
  %573 = fadd float %556, %562, !dbg !44
  %574 = fmul float %566, %566, !dbg !45
  %575 = fmul float %546, %574, !dbg !46
  %576 = fmul float %570, %575, !dbg !47
  %577 = fadd float %573, %576, !dbg !48
  %578 = bitcast float %572 to i32, !dbg !49
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 2, i32 31), !dbg !49
  %580 = bitcast i32 %579 to float, !dbg !49
  %581 = bitcast float %577 to i32, !dbg !49
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 2, i32 31), !dbg !49
  %583 = bitcast i32 %582 to float, !dbg !49
  %584 = bitcast float %567 to i32, !dbg !49
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 2, i32 31), !dbg !49
  %586 = bitcast i32 %585 to float, !dbg !49
  %587 = fsub float %580, %572, !dbg !35
  %588 = fadd float %567, %586, !dbg !38
  %589 = fcmp oeq float %588, 0.000000e+00, !dbg !39
  %590 = tail call float @llvm.nvvm.div.full(float %586, float %588), !dbg !40
  %591 = select i1 %589, float 0.000000e+00, float %590, !dbg !41
  %592 = fmul float %591, %587, !dbg !42
  %593 = fadd float %572, %592, !dbg !43
  %594 = fadd float %577, %583, !dbg !44
  %595 = fmul float %587, %587, !dbg !45
  %596 = fmul float %567, %595, !dbg !46
  %597 = fmul float %591, %596, !dbg !47
  %598 = fadd float %594, %597, !dbg !48
  %599 = bitcast float %593 to i32, !dbg !49
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %599, i32 1, i32 31), !dbg !49
  %601 = bitcast i32 %600 to float, !dbg !49
  %602 = bitcast float %598 to i32, !dbg !49
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 1, i32 31), !dbg !49
  %604 = bitcast i32 %603 to float, !dbg !49
  %605 = bitcast float %588 to i32, !dbg !49
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 1, i32 31), !dbg !49
  %607 = bitcast i32 %606 to float, !dbg !49
  %608 = fsub float %601, %593, !dbg !35
  %609 = fadd float %588, %607, !dbg !38
  %610 = fcmp oeq float %609, 0.000000e+00, !dbg !39
  %611 = tail call float @llvm.nvvm.div.full(float %607, float %609), !dbg !40
  %612 = select i1 %610, float 0.000000e+00, float %611, !dbg !41
  %613 = fmul float %612, %608, !dbg !42
  %614 = fadd float %593, %613, !dbg !43
  %615 = fadd float %598, %604, !dbg !44
  %616 = fmul float %608, %608, !dbg !45
  %617 = fmul float %588, %616, !dbg !46
  %618 = fmul float %612, %617, !dbg !47
  %619 = fadd float %615, %618, !dbg !48
  %620 = and i32 %333, 3, !dbg !49
  %621 = icmp eq i32 %20, 0, !dbg !49
  %622 = getelementptr float, ptr addrspace(3) @global_smem, i32 %620, !dbg !49
  %623 = bitcast float %614 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %623, i1 %621) #5, !dbg !49
  %624 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %620, !dbg !49
  %625 = bitcast float %619 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %624, <1 x i32> %625, i1 %621) #5, !dbg !49
  %626 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %620, !dbg !49
  %627 = bitcast float %609 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %626, <1 x i32> %627, i1 %621) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %628 = icmp slt i32 %19, 4, !dbg !49
  %629 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !49
  %630 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %629, i1 %628) #5, !dbg !49
  %631 = bitcast i32 %630 to float, !dbg !49
  %632 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !49
  %633 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %632, i1 %628) #5, !dbg !49
  %634 = bitcast i32 %633 to float, !dbg !49
  %635 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !49
  %636 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %635, i1 %628) #5, !dbg !49
  %637 = bitcast i32 %636 to float, !dbg !49
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 2, i32 31), !dbg !49
  %639 = bitcast i32 %638 to float, !dbg !49
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 2, i32 31), !dbg !49
  %641 = bitcast i32 %640 to float, !dbg !49
  %642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 2, i32 31), !dbg !49
  %643 = bitcast i32 %642 to float, !dbg !49
  %644 = fsub float %639, %631, !dbg !35
  %645 = fadd float %637, %643, !dbg !38
  %646 = fcmp oeq float %645, 0.000000e+00, !dbg !39
  %647 = tail call float @llvm.nvvm.div.full(float %643, float %645), !dbg !40
  %648 = select i1 %646, float 0.000000e+00, float %647, !dbg !41
  %649 = fmul float %644, %648, !dbg !42
  %650 = fadd float %649, %631, !dbg !43
  %651 = fadd float %634, %641, !dbg !44
  %652 = fmul float %644, %644, !dbg !45
  %653 = fmul float %652, %637, !dbg !46
  %654 = fmul float %653, %648, !dbg !47
  %655 = fadd float %651, %654, !dbg !48
  %656 = bitcast float %650 to i32, !dbg !49
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 1, i32 31), !dbg !49
  %658 = bitcast i32 %657 to float, !dbg !49
  %659 = bitcast float %655 to i32, !dbg !49
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 1, i32 31), !dbg !49
  %661 = bitcast i32 %660 to float, !dbg !49
  %662 = bitcast float %645 to i32, !dbg !49
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 1, i32 31), !dbg !49
  %664 = bitcast i32 %663 to float, !dbg !49
  %665 = fsub float %658, %650, !dbg !35
  %666 = fadd float %645, %664, !dbg !38
  %667 = fcmp oeq float %666, 0.000000e+00, !dbg !39
  %668 = tail call float @llvm.nvvm.div.full(float %664, float %666), !dbg !40
  %669 = select i1 %667, float 0.000000e+00, float %668, !dbg !41
  %670 = fmul float %665, %669, !dbg !42
  %671 = fadd float %650, %670, !dbg !43
  %672 = fadd float %655, %661, !dbg !44
  %673 = fmul float %665, %665, !dbg !45
  %674 = fmul float %645, %673, !dbg !46
  %675 = fmul float %669, %674, !dbg !47
  %676 = fadd float %672, %675, !dbg !48
  %677 = and i32 %19, 3, !dbg !49
  %678 = icmp eq i32 %677, 0, !dbg !49
  %679 = and i1 %628, %678, !dbg !49
  %680 = bitcast float %671 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %680, i1 %679) #5, !dbg !49
  %681 = bitcast float %676 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %681, i1 %679) #5, !dbg !49
  %682 = bitcast float %666 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %682, i1 %679) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %683 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %684 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !49
  %685 = tail call float @llvm.nvvm.div.full(float %684, float 3.072000e+03), !dbg !50
  %686 = fadd float %685, 0x3EB0C6F7A0000000, !dbg !51
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %693 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %694 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %695 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %696 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i99 = icmp eq i32 %702, 0, !dbg !52
  br i1 %.not.i99, label %705, label %703, !dbg !52

703:                                              ; preds = %__nv_rsqrtf.exit
  %704 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %686), !dbg !52
  br label %__nv_rsqrtf.exit101, !dbg !52

705:                                              ; preds = %__nv_rsqrtf.exit
  %706 = tail call float @llvm.nvvm.rsqrt.approx.f(float %686), !dbg !52
  br label %__nv_rsqrtf.exit101, !dbg !52

__nv_rsqrtf.exit101:                              ; preds = %703, %705
  %.0.i100 = phi float [ %704, %703 ], [ %706, %705 ], !dbg !52
  %707 = or disjoint i32 %25, %26
  %708 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %23
  %710 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25
  %711 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %334
  %712 = zext nneg i32 %334 to i64, !dbg !53
  %713 = zext nneg i32 %23 to i64, !dbg !53
  %714 = insertelement <2 x float> poison, float %.0.i100, i64 0, !dbg !54
  %715 = shufflevector <2 x float> %714, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %716 = insertelement <2 x float> poison, float %683, i64 0, !dbg !55
  %717 = shufflevector <2 x float> %716, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %718 = insertelement <8 x float> poison, float %.0.i100, i64 0, !dbg !54
  %719 = shufflevector <8 x float> %718, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !54
  %720 = insertelement <8 x float> poison, float %683, i64 0, !dbg !55
  %721 = shufflevector <8 x float> %720, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !55
  %722 = insertelement <4 x float> poison, float %.0.i100, i64 0, !dbg !54
  %723 = shufflevector <4 x float> %722, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  %724 = insertelement <4 x float> poison, float %683, i64 0, !dbg !55
  %725 = shufflevector <4 x float> %724, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !55
  %726 = getelementptr inbounds nuw i8, ptr addrspace(3) %710, i32 4
  %727 = getelementptr inbounds nuw i8, ptr addrspace(3) %710, i32 8
  %728 = getelementptr inbounds nuw i8, ptr addrspace(3) %710, i32 12
  br label %729, !dbg !53

729:                                              ; preds = %__nv_rsqrtf.exit101, %729
  %730 = phi i1 [ true, %__nv_rsqrtf.exit101 ], [ false, %729 ]
  %indvars.iv199 = phi i64 [ 0, %__nv_rsqrtf.exit101 ], [ 2048, %729 ]
  %731 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit101 ], [ %1015, %729 ]
  %732 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit101 ], [ %1016, %729 ]
  %733 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit101 ], [ %1035, %729 ]
  %734 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit101 ], [ %1038, %729 ]
  %735 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit101 ], [ %1022, %729 ]
  %736 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit101 ], [ %1019, %729 ]
  %737 = or disjoint i64 %indvars.iv199, %28, !dbg !56
  %738 = or disjoint i64 %737, 4, !dbg !56
  %739 = or disjoint i64 %indvars.iv199, %713, !dbg !56
  %740 = or disjoint i64 %737, 12, !dbg !56
  %741 = or disjoint i64 %indvars.iv199, %712, !dbg !56
  %742 = icmp samesign ult i64 %737, 3072, !dbg !57
  %743 = icmp samesign ult i64 %741, 3072, !dbg !57
  %744 = trunc nuw nsw i64 %737 to i32, !dbg !58
  %745 = add i32 %26, %744, !dbg !58
  %746 = trunc nuw nsw i64 %739 to i32, !dbg !58
  %747 = add i32 %26, %746, !dbg !58
  %748 = trunc nuw nsw i64 %indvars.iv199 to i32, !dbg !58
  %749 = add i32 %707, %748, !dbg !58
  %750 = trunc nuw nsw i64 %741 to i32, !dbg !58
  %751 = add i32 %26, %750, !dbg !58
  %752 = sext i32 %745 to i64, !dbg !59
  %753 = getelementptr bfloat, ptr addrspace(1) %0, i64 %752, !dbg !59
  %754 = sext i32 %747 to i64, !dbg !59
  %755 = getelementptr bfloat, ptr addrspace(1) %0, i64 %754, !dbg !59
  %756 = and i1 %18, %742, !dbg !60
  %757 = and i1 %18, %743, !dbg !60
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %753, i1 %756) #5, !dbg !61
  %759 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !61
  %760 = bitcast i32 %759 to <2 x bfloat>, !dbg !61
  %761 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !61
  %762 = bitcast i32 %761 to <2 x bfloat>, !dbg !61
  %763 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !61
  %764 = bitcast i32 %763 to <2 x bfloat>, !dbg !61
  %765 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !61
  %766 = bitcast i32 %765 to <2 x bfloat>, !dbg !61
  %767 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %755, i1 %756) #5, !dbg !61
  %768 = extractvalue { i32, i32, i32, i32 } %767, 0, !dbg !61
  %769 = bitcast i32 %768 to <2 x bfloat>, !dbg !61
  %770 = extractvalue { i32, i32, i32, i32 } %767, 1, !dbg !61
  %771 = bitcast i32 %770 to <2 x bfloat>, !dbg !61
  %772 = extractvalue { i32, i32, i32, i32 } %767, 2, !dbg !61
  %773 = bitcast i32 %772 to <2 x bfloat>, !dbg !61
  %774 = extractvalue { i32, i32, i32, i32 } %767, 3, !dbg !61
  %775 = bitcast i32 %774 to <2 x bfloat>, !dbg !61
  %776 = add nuw nsw i64 %737, 3072, !dbg !62
  %777 = add nuw nsw i64 %739, 3072, !dbg !62
  %778 = getelementptr float, ptr addrspace(1) %1, i64 %776, !dbg !63
  %779 = getelementptr float, ptr addrspace(1) %1, i64 %738, !dbg !63
  %780 = getelementptr i8, ptr addrspace(1) %779, i64 12288, !dbg !63
  %781 = getelementptr float, ptr addrspace(1) %1, i64 %777, !dbg !63
  %782 = getelementptr float, ptr addrspace(1) %1, i64 %740, !dbg !63
  %783 = getelementptr i8, ptr addrspace(1) %782, i64 12288, !dbg !63
  %784 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %778, i1 %742) #5, !dbg !64
  %785 = extractvalue { i32, i32, i32, i32 } %784, 0, !dbg !64
  %786 = extractvalue { i32, i32, i32, i32 } %784, 1, !dbg !64
  %787 = extractvalue { i32, i32, i32, i32 } %784, 2, !dbg !64
  %788 = extractvalue { i32, i32, i32, i32 } %784, 3, !dbg !64
  %789 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %780, i1 %742) #5, !dbg !64
  %790 = extractvalue { i32, i32, i32, i32 } %789, 0, !dbg !64
  %791 = extractvalue { i32, i32, i32, i32 } %789, 1, !dbg !64
  %792 = extractvalue { i32, i32, i32, i32 } %789, 2, !dbg !64
  %793 = extractvalue { i32, i32, i32, i32 } %789, 3, !dbg !64
  %794 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %781, i1 %742) #5, !dbg !64
  %795 = extractvalue { i32, i32, i32, i32 } %794, 0, !dbg !64
  %796 = extractvalue { i32, i32, i32, i32 } %794, 1, !dbg !64
  %797 = extractvalue { i32, i32, i32, i32 } %794, 2, !dbg !64
  %798 = extractvalue { i32, i32, i32, i32 } %794, 3, !dbg !64
  %799 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %783, i1 %742) #5, !dbg !64
  %800 = extractvalue { i32, i32, i32, i32 } %799, 0, !dbg !64
  %801 = extractvalue { i32, i32, i32, i32 } %799, 1, !dbg !64
  %802 = extractvalue { i32, i32, i32, i32 } %799, 2, !dbg !64
  %803 = extractvalue { i32, i32, i32, i32 } %799, 3, !dbg !64
  %804 = getelementptr bfloat, ptr addrspace(1) %2, i64 %776, !dbg !65
  %805 = getelementptr bfloat, ptr addrspace(1) %2, i64 %777, !dbg !65
  %806 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %804, i1 %742) #5, !dbg !66
  %807 = extractvalue { i32, i32, i32, i32 } %806, 0, !dbg !66
  %808 = bitcast i32 %807 to <2 x bfloat>, !dbg !66
  %809 = extractvalue { i32, i32, i32, i32 } %806, 1, !dbg !66
  %810 = bitcast i32 %809 to <2 x bfloat>, !dbg !66
  %811 = extractvalue { i32, i32, i32, i32 } %806, 2, !dbg !66
  %812 = bitcast i32 %811 to <2 x bfloat>, !dbg !66
  %813 = extractvalue { i32, i32, i32, i32 } %806, 3, !dbg !66
  %814 = bitcast i32 %813 to <2 x bfloat>, !dbg !66
  %815 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %805, i1 %742) #5, !dbg !66
  %816 = extractvalue { i32, i32, i32, i32 } %815, 0, !dbg !66
  %817 = bitcast i32 %816 to <2 x bfloat>, !dbg !66
  %818 = extractvalue { i32, i32, i32, i32 } %815, 1, !dbg !66
  %819 = bitcast i32 %818 to <2 x bfloat>, !dbg !66
  %820 = extractvalue { i32, i32, i32, i32 } %815, 2, !dbg !66
  %821 = bitcast i32 %820 to <2 x bfloat>, !dbg !66
  %822 = extractvalue { i32, i32, i32, i32 } %815, 3, !dbg !66
  %823 = bitcast i32 %822 to <2 x bfloat>, !dbg !66
  %824 = getelementptr float, ptr addrspace(1) %1, i64 %737, !dbg !67
  %825 = getelementptr float, ptr addrspace(1) %1, i64 %739, !dbg !67
  %826 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %824, i1 %742) #5, !dbg !68
  %827 = extractvalue { i32, i32, i32, i32 } %826, 0, !dbg !68
  %828 = extractvalue { i32, i32, i32, i32 } %826, 1, !dbg !68
  %829 = extractvalue { i32, i32, i32, i32 } %826, 2, !dbg !68
  %830 = extractvalue { i32, i32, i32, i32 } %826, 3, !dbg !68
  %831 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %779, i1 %742) #5, !dbg !68
  %832 = extractvalue { i32, i32, i32, i32 } %831, 0, !dbg !68
  %833 = extractvalue { i32, i32, i32, i32 } %831, 1, !dbg !68
  %834 = extractvalue { i32, i32, i32, i32 } %831, 2, !dbg !68
  %835 = extractvalue { i32, i32, i32, i32 } %831, 3, !dbg !68
  %836 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %825, i1 %742) #5, !dbg !68
  %837 = extractvalue { i32, i32, i32, i32 } %836, 0, !dbg !68
  %838 = extractvalue { i32, i32, i32, i32 } %836, 1, !dbg !68
  %839 = extractvalue { i32, i32, i32, i32 } %836, 2, !dbg !68
  %840 = extractvalue { i32, i32, i32, i32 } %836, 3, !dbg !68
  %841 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %782, i1 %742) #5, !dbg !68
  %842 = extractvalue { i32, i32, i32, i32 } %841, 0, !dbg !68
  %843 = extractvalue { i32, i32, i32, i32 } %841, 1, !dbg !68
  %844 = extractvalue { i32, i32, i32, i32 } %841, 2, !dbg !68
  %845 = extractvalue { i32, i32, i32, i32 } %841, 3, !dbg !68
  %846 = getelementptr bfloat, ptr addrspace(1) %2, i64 %737, !dbg !69
  %847 = getelementptr bfloat, ptr addrspace(1) %2, i64 %739, !dbg !69
  %848 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %846, i1 %742) #5, !dbg !70
  %849 = extractvalue { i32, i32, i32, i32 } %848, 0, !dbg !70
  %850 = bitcast i32 %849 to <2 x bfloat>, !dbg !70
  %851 = extractvalue { i32, i32, i32, i32 } %848, 1, !dbg !70
  %852 = bitcast i32 %851 to <2 x bfloat>, !dbg !70
  %853 = extractvalue { i32, i32, i32, i32 } %848, 2, !dbg !70
  %854 = bitcast i32 %853 to <2 x bfloat>, !dbg !70
  %855 = extractvalue { i32, i32, i32, i32 } %848, 3, !dbg !70
  %856 = bitcast i32 %855 to <2 x bfloat>, !dbg !70
  %857 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %847, i1 %742) #5, !dbg !70
  %858 = extractvalue { i32, i32, i32, i32 } %857, 0, !dbg !70
  %859 = bitcast i32 %858 to <2 x bfloat>, !dbg !70
  %860 = extractvalue { i32, i32, i32, i32 } %857, 1, !dbg !70
  %861 = bitcast i32 %860 to <2 x bfloat>, !dbg !70
  %862 = extractvalue { i32, i32, i32, i32 } %857, 2, !dbg !70
  %863 = bitcast i32 %862 to <2 x bfloat>, !dbg !70
  %864 = extractvalue { i32, i32, i32, i32 } %857, 3, !dbg !70
  %865 = bitcast i32 %864 to <2 x bfloat>, !dbg !70
  %866 = fpext <2 x bfloat> %775 to <2 x float>, !dbg !71
  %867 = insertelement <2 x i32> poison, i32 %802, i64 0, !dbg !64
  %868 = insertelement <2 x i32> %867, i32 %803, i64 1, !dbg !64
  %869 = bitcast <2 x i32> %868 to <2 x float>, !dbg !64
  %870 = fpext <2 x bfloat> %823 to <2 x float>, !dbg !72
  %871 = insertelement <2 x i32> poison, i32 %844, i64 0, !dbg !68
  %872 = insertelement <2 x i32> %871, i32 %845, i64 1, !dbg !68
  %873 = bitcast <2 x i32> %872 to <2 x float>, !dbg !68
  %874 = fpext <2 x bfloat> %865 to <2 x float>, !dbg !73
  %875 = fsub <2 x float> %866, %717, !dbg !55
  %876 = fmul <2 x float> %715, %875, !dbg !54
  %877 = fadd <2 x float> %869, %870, !dbg !74
  %878 = fadd <2 x float> %877, splat (float 1.000000e+00), !dbg !75
  %879 = fmul <2 x float> %876, %878, !dbg !76
  %880 = fadd <2 x float> %873, %874, !dbg !77
  %881 = fadd <2 x float> %879, %880, !dbg !78
  %882 = extractelement <2 x float> %881, i64 0, !dbg !79
  %883 = extractelement <2 x float> %881, i64 1, !dbg !79
  %884 = fcmp uno <16 x float> %734, zeroinitializer, !dbg !80
  %885 = fcmp uno float %731, 0.000000e+00, !dbg !82
  %886 = fcmp uno float %732, 0.000000e+00, !dbg !82
  %887 = fcmp uno <4 x float> %736, zeroinitializer, !dbg !82
  %888 = fcmp uno <8 x float> %735, zeroinitializer, !dbg !82
  %889 = fcmp uno <2 x float> %733, zeroinitializer, !dbg !80
  %890 = fpext <2 x bfloat> %760 to <2 x float>, !dbg !71
  %891 = insertelement <2 x i32> poison, i32 %785, i64 0, !dbg !64
  %892 = insertelement <2 x i32> %891, i32 %786, i64 1, !dbg !64
  %893 = bitcast <2 x i32> %892 to <2 x float>, !dbg !64
  %894 = fpext <2 x bfloat> %808 to <2 x float>, !dbg !72
  %895 = insertelement <2 x i32> poison, i32 %827, i64 0, !dbg !68
  %896 = insertelement <2 x i32> %895, i32 %828, i64 1, !dbg !68
  %897 = bitcast <2 x i32> %896 to <2 x float>, !dbg !68
  %898 = fpext <2 x bfloat> %850 to <2 x float>, !dbg !73
  %899 = fsub <2 x float> %890, %717, !dbg !55
  %900 = fmul <2 x float> %715, %899, !dbg !54
  %901 = fadd <2 x float> %893, %894, !dbg !74
  %902 = fadd <2 x float> %901, splat (float 1.000000e+00), !dbg !75
  %903 = fmul <2 x float> %900, %902, !dbg !76
  %904 = fadd <2 x float> %897, %898, !dbg !77
  %905 = fadd <2 x float> %903, %904, !dbg !78
  %906 = fcmp ogt <2 x float> %733, %905, !dbg !84
  %907 = or <2 x i1> %889, %906, !dbg !85
  %908 = select <2 x i1> %907, <2 x float> %733, <2 x float> %905, !dbg !86
  %909 = shufflevector <2 x bfloat> %762, <2 x bfloat> %764, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %910 = shufflevector <2 x bfloat> %766, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %911 = shufflevector <8 x bfloat> %909, <8 x bfloat> %910, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !71
  %912 = shufflevector <2 x bfloat> %766, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %913 = shufflevector <8 x bfloat> %911, <8 x bfloat> %912, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !71
  %914 = shufflevector <2 x bfloat> %769, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %915 = shufflevector <8 x bfloat> %913, <8 x bfloat> %914, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !71
  %916 = shufflevector <2 x bfloat> %769, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %917 = shufflevector <8 x bfloat> %915, <8 x bfloat> %916, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !71
  %918 = fpext <8 x bfloat> %917 to <8 x float>, !dbg !71
  %919 = shufflevector <2 x bfloat> %771, <2 x bfloat> %773, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !71
  %920 = fpext <4 x bfloat> %919 to <4 x float>, !dbg !71
  %921 = insertelement <8 x i32> poison, i32 %787, i64 0, !dbg !64
  %922 = insertelement <8 x i32> %921, i32 %788, i64 1, !dbg !64
  %923 = insertelement <8 x i32> %922, i32 %790, i64 2, !dbg !64
  %924 = insertelement <8 x i32> %923, i32 %791, i64 3, !dbg !64
  %925 = insertelement <8 x i32> %924, i32 %792, i64 4, !dbg !64
  %926 = insertelement <8 x i32> %925, i32 %793, i64 5, !dbg !64
  %927 = insertelement <8 x i32> %926, i32 %795, i64 6, !dbg !64
  %928 = insertelement <8 x i32> %927, i32 %796, i64 7, !dbg !64
  %929 = bitcast <8 x i32> %928 to <8 x float>, !dbg !64
  %930 = insertelement <4 x i32> poison, i32 %797, i64 0, !dbg !64
  %931 = insertelement <4 x i32> %930, i32 %798, i64 1, !dbg !64
  %932 = insertelement <4 x i32> %931, i32 %800, i64 2, !dbg !64
  %933 = insertelement <4 x i32> %932, i32 %801, i64 3, !dbg !64
  %934 = bitcast <4 x i32> %933 to <4 x float>, !dbg !64
  %935 = shufflevector <2 x bfloat> %810, <2 x bfloat> %812, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %936 = shufflevector <2 x bfloat> %814, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %937 = shufflevector <8 x bfloat> %935, <8 x bfloat> %936, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !72
  %938 = shufflevector <2 x bfloat> %814, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %939 = shufflevector <8 x bfloat> %937, <8 x bfloat> %938, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !72
  %940 = shufflevector <2 x bfloat> %817, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %941 = shufflevector <8 x bfloat> %939, <8 x bfloat> %940, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !72
  %942 = shufflevector <2 x bfloat> %817, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %943 = shufflevector <8 x bfloat> %941, <8 x bfloat> %942, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !72
  %944 = fpext <8 x bfloat> %943 to <8 x float>, !dbg !72
  %945 = shufflevector <2 x bfloat> %819, <2 x bfloat> %821, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !72
  %946 = fpext <4 x bfloat> %945 to <4 x float>, !dbg !72
  %947 = insertelement <8 x i32> poison, i32 %829, i64 0, !dbg !68
  %948 = insertelement <8 x i32> %947, i32 %830, i64 1, !dbg !68
  %949 = insertelement <8 x i32> %948, i32 %832, i64 2, !dbg !68
  %950 = insertelement <8 x i32> %949, i32 %833, i64 3, !dbg !68
  %951 = insertelement <8 x i32> %950, i32 %834, i64 4, !dbg !68
  %952 = insertelement <8 x i32> %951, i32 %835, i64 5, !dbg !68
  %953 = insertelement <8 x i32> %952, i32 %837, i64 6, !dbg !68
  %954 = insertelement <8 x i32> %953, i32 %838, i64 7, !dbg !68
  %955 = bitcast <8 x i32> %954 to <8 x float>, !dbg !68
  %956 = insertelement <4 x i32> poison, i32 %839, i64 0, !dbg !68
  %957 = insertelement <4 x i32> %956, i32 %840, i64 1, !dbg !68
  %958 = insertelement <4 x i32> %957, i32 %842, i64 2, !dbg !68
  %959 = insertelement <4 x i32> %958, i32 %843, i64 3, !dbg !68
  %960 = bitcast <4 x i32> %959 to <4 x float>, !dbg !68
  %961 = shufflevector <2 x bfloat> %852, <2 x bfloat> %854, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %962 = shufflevector <2 x bfloat> %856, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %963 = shufflevector <8 x bfloat> %961, <8 x bfloat> %962, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !73
  %964 = shufflevector <2 x bfloat> %856, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %965 = shufflevector <8 x bfloat> %963, <8 x bfloat> %964, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !73
  %966 = shufflevector <2 x bfloat> %859, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %967 = shufflevector <8 x bfloat> %965, <8 x bfloat> %966, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !73
  %968 = shufflevector <2 x bfloat> %859, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %969 = shufflevector <8 x bfloat> %967, <8 x bfloat> %968, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !73
  %970 = fpext <8 x bfloat> %969 to <8 x float>, !dbg !73
  %971 = shufflevector <2 x bfloat> %861, <2 x bfloat> %863, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !73
  %972 = fpext <4 x bfloat> %971 to <4 x float>, !dbg !73
  %973 = fsub <8 x float> %918, %721, !dbg !55
  %974 = fsub <4 x float> %920, %725, !dbg !55
  %975 = fmul <8 x float> %719, %973, !dbg !54
  %976 = fmul <4 x float> %723, %974, !dbg !54
  %977 = fadd <8 x float> %929, %944, !dbg !74
  %978 = fadd <4 x float> %934, %946, !dbg !74
  %979 = fadd <8 x float> %977, splat (float 1.000000e+00), !dbg !75
  %980 = fadd <4 x float> %978, splat (float 1.000000e+00), !dbg !75
  %981 = fmul <8 x float> %975, %979, !dbg !76
  %982 = fmul <4 x float> %976, %980, !dbg !76
  %983 = fadd <8 x float> %955, %970, !dbg !77
  %984 = fadd <4 x float> %960, %972, !dbg !77
  %985 = fadd <8 x float> %981, %983, !dbg !78
  %986 = fadd <4 x float> %982, %984, !dbg !78
  %987 = extractelement <8 x float> %985, i64 0, !dbg !79
  %988 = fcmp olt float %731, %987, !dbg !87
  %989 = extractelement <8 x float> %985, i64 1, !dbg !79
  %990 = fcmp olt float %732, %989, !dbg !87
  %991 = extractelement <8 x float> %985, i64 2, !dbg !79
  %992 = extractelement <8 x float> %985, i64 3, !dbg !79
  %993 = extractelement <8 x float> %985, i64 4, !dbg !79
  %994 = extractelement <8 x float> %985, i64 5, !dbg !79
  %995 = extractelement <8 x float> %985, i64 6, !dbg !79
  %996 = extractelement <8 x float> %985, i64 7, !dbg !79
  %997 = extractelement <4 x float> %986, i64 0, !dbg !79
  %998 = extractelement <4 x float> %986, i64 1, !dbg !79
  %999 = extractelement <4 x float> %986, i64 2, !dbg !79
  %1000 = extractelement <4 x float> %986, i64 3, !dbg !79
  %1001 = or i1 %885, %988, !dbg !88
  %1002 = or i1 %886, %990, !dbg !88
  %1003 = select i1 %1001, float %731, float %987, !dbg !89
  %1004 = select i1 %1002, float %732, float %989, !dbg !89
  %1005 = shufflevector <2 x float> %881, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1006 = shufflevector <8 x float> %1005, <8 x float> %985, <4 x i32> <i32 1, i32 0, i32 11, i32 10>, !dbg !87
  %1007 = fcmp olt <4 x float> %736, %1006, !dbg !87
  %1008 = or <4 x i1> %887, %1007, !dbg !88
  %1009 = select <4 x i1> %1008, <4 x float> %736, <4 x float> %1006, !dbg !89
  %1010 = shufflevector <4 x float> %986, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1011 = shufflevector <8 x float> %1010, <8 x float> %985, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 15, i32 14, i32 13, i32 12>, !dbg !87
  %1012 = fcmp olt <8 x float> %735, %1011, !dbg !87
  %1013 = or <8 x i1> %888, %1012, !dbg !88
  %1014 = select <8 x i1> %1013, <8 x float> %735, <8 x float> %1011, !dbg !89
  %1015 = select i1 %756, float %1003, float %731, !dbg !90
  %1016 = select i1 %756, float %1004, float %732, !dbg !90
  %1017 = insertelement <4 x i1> poison, i1 %756, i64 0, !dbg !90
  %1018 = shufflevector <4 x i1> %1017, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !90
  %1019 = select <4 x i1> %1018, <4 x float> %1009, <4 x float> %736, !dbg !90
  %1020 = insertelement <8 x i1> poison, i1 %756, i64 0, !dbg !90
  %1021 = shufflevector <8 x i1> %1020, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !90
  %1022 = select <8 x i1> %1021, <8 x float> %1014, <8 x float> %735, !dbg !90
  %1023 = shufflevector <2 x float> %881, <2 x float> %905, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %1024 = shufflevector <8 x float> %985, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1025 = shufflevector <16 x float> %1024, <16 x float> %1023, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1026 = shufflevector <4 x float> %986, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1027 = shufflevector <16 x float> %1025, <16 x float> %1026, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !84
  %1028 = fcmp ogt <16 x float> %734, %1027, !dbg !84
  %1029 = fcmp olt <16 x float> %734, %1027, !dbg !84
  %1030 = shufflevector <16 x i1> %1028, <16 x i1> %1029, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !84
  %1031 = or <16 x i1> %884, %1030, !dbg !85
  %1032 = select <16 x i1> %1031, <16 x float> %734, <16 x float> %1027, !dbg !86
  %1033 = insertelement <2 x i1> poison, i1 %756, i64 0, !dbg !91
  %1034 = shufflevector <2 x i1> %1033, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !91
  %1035 = select <2 x i1> %1034, <2 x float> %908, <2 x float> %733, !dbg !91
  %1036 = insertelement <16 x i1> poison, i1 %756, i64 0, !dbg !91
  %1037 = shufflevector <16 x i1> %1036, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !91
  %1038 = select <16 x i1> %1037, <16 x float> %1032, <16 x float> %734, !dbg !91
  %1039 = sext i32 %749 to i64, !dbg !92
  %1040 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1039, !dbg !92
  %1041 = sext i32 %751 to i64, !dbg !92
  %1042 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1041, !dbg !92
  %1043 = fptrunc <2 x float> %905 to <2 x bfloat>, !dbg !79
  %1044 = fptrunc float %987 to bfloat, !dbg !79
  %1045 = fptrunc float %989 to bfloat, !dbg !79
  %1046 = fptrunc float %991 to bfloat, !dbg !79
  %1047 = fptrunc float %992 to bfloat, !dbg !79
  %1048 = fptrunc float %993 to bfloat, !dbg !79
  %1049 = fptrunc float %994 to bfloat, !dbg !79
  %1050 = fptrunc float %995 to bfloat, !dbg !79
  %1051 = fptrunc float %996 to bfloat, !dbg !79
  %1052 = fptrunc float %997 to bfloat, !dbg !79
  %1053 = fptrunc float %998 to bfloat, !dbg !79
  %1054 = fptrunc float %999 to bfloat, !dbg !79
  %1055 = fptrunc float %1000 to bfloat, !dbg !79
  %1056 = fptrunc float %882 to bfloat, !dbg !79
  %1057 = fptrunc float %883 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1058 = bitcast <2 x bfloat> %1043 to i32, !dbg !79
  %1059 = insertelement <2 x bfloat> poison, bfloat %1044, i64 0, !dbg !79
  %1060 = insertelement <2 x bfloat> %1059, bfloat %1045, i64 1, !dbg !79
  %1061 = bitcast <2 x bfloat> %1060 to i32, !dbg !79
  %1062 = insertelement <2 x bfloat> poison, bfloat %1046, i64 0, !dbg !79
  %1063 = insertelement <2 x bfloat> %1062, bfloat %1047, i64 1, !dbg !79
  %1064 = bitcast <2 x bfloat> %1063 to i32, !dbg !79
  %1065 = insertelement <2 x bfloat> poison, bfloat %1048, i64 0, !dbg !79
  %1066 = insertelement <2 x bfloat> %1065, bfloat %1049, i64 1, !dbg !79
  %1067 = bitcast <2 x bfloat> %1066 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %708, i32 %1058, i32 %1061, i32 %1064, i32 %1067, i1 true) #5, !dbg !79
  %1068 = insertelement <2 x bfloat> poison, bfloat %1050, i64 0, !dbg !79
  %1069 = insertelement <2 x bfloat> %1068, bfloat %1051, i64 1, !dbg !79
  %1070 = bitcast <2 x bfloat> %1069 to i32, !dbg !79
  %1071 = insertelement <2 x bfloat> poison, bfloat %1052, i64 0, !dbg !79
  %1072 = insertelement <2 x bfloat> %1071, bfloat %1053, i64 1, !dbg !79
  %1073 = bitcast <2 x bfloat> %1072 to i32, !dbg !79
  %1074 = insertelement <2 x bfloat> poison, bfloat %1054, i64 0, !dbg !79
  %1075 = insertelement <2 x bfloat> %1074, bfloat %1055, i64 1, !dbg !79
  %1076 = bitcast <2 x bfloat> %1075 to i32, !dbg !79
  %1077 = insertelement <2 x bfloat> poison, bfloat %1056, i64 0, !dbg !79
  %1078 = insertelement <2 x bfloat> %1077, bfloat %1057, i64 1, !dbg !79
  %1079 = bitcast <2 x bfloat> %1078 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %709, i32 %1070, i32 %1073, i32 %1076, i32 %1079, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1080 = load <4 x i32>, ptr addrspace(3) %711, align 16, !dbg !79
  %.extract = load i32, ptr addrspace(3) %710, align 16, !dbg !79
  %.extract103 = load i32, ptr addrspace(3) %726, align 4, !dbg !79
  %.extract105 = load i32, ptr addrspace(3) %727, align 8, !dbg !79
  %.extract107 = load i32, ptr addrspace(3) %728, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %1040, i1 %18) #5, !dbg !79
  %.extract109 = extractelement <4 x i32> %1080, i64 0, !dbg !79
  %.extract111 = extractelement <4 x i32> %1080, i64 1, !dbg !79
  %.extract113 = extractelement <4 x i32> %1080, i64 2, !dbg !79
  %.extract115 = extractelement <4 x i32> %1080, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %1042, i1 %757) #5, !dbg !79
  br i1 %730, label %729, label %1081, !dbg !53

1081:                                             ; preds = %729
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1082 = extractelement <16 x float> %1038, i64 14, !dbg !95
  %1083 = extractelement <16 x float> %1038, i64 15, !dbg !95
  %1084 = fcmp olt float %1082, %1083, !dbg !95
  %1085 = fcmp uno float %1082, 0.000000e+00, !dbg !96
  %1086 = or i1 %1084, %1085, !dbg !97
  %1087 = select i1 %1086, float %1082, float %1083, !dbg !98
  %1088 = fcmp olt float %1087, %1015, !dbg !95
  %1089 = fcmp uno float %1087, 0.000000e+00, !dbg !96
  %1090 = or i1 %1088, %1089, !dbg !97
  %1091 = select i1 %1090, float %1087, float %1015, !dbg !98
  %1092 = fcmp olt float %1091, %1016, !dbg !95
  %1093 = fcmp uno float %1091, 0.000000e+00, !dbg !96
  %1094 = or i1 %1092, %1093, !dbg !97
  %1095 = select i1 %1094, float %1091, float %1016, !dbg !98
  %1096 = extractelement <4 x float> %1019, i64 3, !dbg !95
  %1097 = fcmp olt float %1095, %1096, !dbg !95
  %1098 = fcmp uno float %1095, 0.000000e+00, !dbg !96
  %1099 = or i1 %1097, %1098, !dbg !97
  %1100 = select i1 %1099, float %1095, float %1096, !dbg !98
  %1101 = extractelement <4 x float> %1019, i64 2, !dbg !95
  %1102 = fcmp olt float %1100, %1101, !dbg !95
  %1103 = fcmp uno float %1100, 0.000000e+00, !dbg !96
  %1104 = or i1 %1102, %1103, !dbg !97
  %1105 = select i1 %1104, float %1100, float %1101, !dbg !98
  %1106 = extractelement <8 x float> %1022, i64 7, !dbg !95
  %1107 = fcmp olt float %1105, %1106, !dbg !95
  %1108 = fcmp uno float %1105, 0.000000e+00, !dbg !96
  %1109 = or i1 %1107, %1108, !dbg !97
  %1110 = select i1 %1109, float %1105, float %1106, !dbg !98
  %1111 = extractelement <8 x float> %1022, i64 6, !dbg !95
  %1112 = fcmp olt float %1110, %1111, !dbg !95
  %1113 = fcmp uno float %1110, 0.000000e+00, !dbg !96
  %1114 = or i1 %1112, %1113, !dbg !97
  %1115 = select i1 %1114, float %1110, float %1111, !dbg !98
  %1116 = extractelement <8 x float> %1022, i64 5, !dbg !95
  %1117 = fcmp olt float %1115, %1116, !dbg !95
  %1118 = fcmp uno float %1115, 0.000000e+00, !dbg !96
  %1119 = or i1 %1117, %1118, !dbg !97
  %1120 = select i1 %1119, float %1115, float %1116, !dbg !98
  %1121 = extractelement <8 x float> %1022, i64 4, !dbg !95
  %1122 = fcmp olt float %1120, %1121, !dbg !95
  %1123 = fcmp uno float %1120, 0.000000e+00, !dbg !96
  %1124 = or i1 %1122, %1123, !dbg !97
  %1125 = select i1 %1124, float %1120, float %1121, !dbg !98
  %1126 = extractelement <8 x float> %1022, i64 3, !dbg !95
  %1127 = fcmp olt float %1125, %1126, !dbg !95
  %1128 = fcmp uno float %1125, 0.000000e+00, !dbg !96
  %1129 = or i1 %1127, %1128, !dbg !97
  %1130 = select i1 %1129, float %1125, float %1126, !dbg !98
  %1131 = extractelement <8 x float> %1022, i64 2, !dbg !95
  %1132 = fcmp olt float %1130, %1131, !dbg !95
  %1133 = fcmp uno float %1130, 0.000000e+00, !dbg !96
  %1134 = or i1 %1132, %1133, !dbg !97
  %1135 = select i1 %1134, float %1130, float %1131, !dbg !98
  %1136 = extractelement <8 x float> %1022, i64 1, !dbg !95
  %1137 = fcmp olt float %1135, %1136, !dbg !95
  %1138 = fcmp uno float %1135, 0.000000e+00, !dbg !96
  %1139 = or i1 %1137, %1138, !dbg !97
  %1140 = select i1 %1139, float %1135, float %1136, !dbg !98
  %1141 = extractelement <8 x float> %1022, i64 0, !dbg !95
  %1142 = fcmp olt float %1140, %1141, !dbg !95
  %1143 = fcmp uno float %1140, 0.000000e+00, !dbg !96
  %1144 = or i1 %1142, %1143, !dbg !97
  %1145 = select i1 %1144, float %1140, float %1141, !dbg !98
  %1146 = extractelement <4 x float> %1019, i64 1, !dbg !95
  %1147 = fcmp olt float %1145, %1146, !dbg !95
  %1148 = fcmp uno float %1145, 0.000000e+00, !dbg !96
  %1149 = or i1 %1147, %1148, !dbg !97
  %1150 = select i1 %1149, float %1145, float %1146, !dbg !98
  %1151 = extractelement <4 x float> %1019, i64 0, !dbg !95
  %1152 = fcmp olt float %1150, %1151, !dbg !95
  %1153 = fcmp uno float %1150, 0.000000e+00, !dbg !96
  %1154 = or i1 %1152, %1153, !dbg !97
  %1155 = select i1 %1154, float %1150, float %1151, !dbg !98
  %1156 = bitcast float %1155 to i32, !dbg !93
  %1157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 16, i32 31), !dbg !93
  %1158 = bitcast i32 %1157 to float, !dbg !93
  %1159 = fcmp olt float %1155, %1158, !dbg !95
  %1160 = fcmp uno float %1155, 0.000000e+00, !dbg !96
  %1161 = or i1 %1160, %1159, !dbg !97
  %1162 = select i1 %1161, float %1155, float %1158, !dbg !98
  %1163 = bitcast float %1162 to i32, !dbg !93
  %1164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1163, i32 8, i32 31), !dbg !93
  %1165 = bitcast i32 %1164 to float, !dbg !93
  %1166 = fcmp olt float %1162, %1165, !dbg !95
  %1167 = fcmp uno float %1162, 0.000000e+00, !dbg !96
  %1168 = or i1 %1166, %1167, !dbg !97
  %1169 = select i1 %1168, float %1162, float %1165, !dbg !98
  %1170 = bitcast float %1169 to i32, !dbg !93
  %1171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1170, i32 4, i32 31), !dbg !93
  %1172 = bitcast i32 %1171 to float, !dbg !93
  %1173 = fcmp olt float %1169, %1172, !dbg !95
  %1174 = fcmp uno float %1169, 0.000000e+00, !dbg !96
  %1175 = or i1 %1173, %1174, !dbg !97
  %1176 = select i1 %1175, float %1169, float %1172, !dbg !98
  %1177 = bitcast float %1176 to i32, !dbg !93
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1177, i32 2, i32 31), !dbg !93
  %1179 = bitcast i32 %1178 to float, !dbg !93
  %1180 = fcmp olt float %1176, %1179, !dbg !95
  %1181 = fcmp uno float %1176, 0.000000e+00, !dbg !96
  %1182 = or i1 %1180, %1181, !dbg !97
  %1183 = select i1 %1182, float %1176, float %1179, !dbg !98
  %1184 = bitcast float %1183 to i32, !dbg !93
  %1185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1184, i32 1, i32 31), !dbg !93
  %1186 = bitcast i32 %1185 to float, !dbg !93
  %1187 = fcmp olt float %1183, %1186, !dbg !95
  %1188 = fcmp uno float %1183, 0.000000e+00, !dbg !96
  %1189 = or i1 %1187, %1188, !dbg !97
  %1190 = select i1 %1189, i32 %1184, i32 %1185, !dbg !98
  %1191 = insertelement <1 x i32> poison, i32 %1190, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %1191, i1 %621) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %629, i1 %628) #5, !dbg !93
  %1193 = bitcast i32 %1192 to float, !dbg !93
  %1194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 2, i32 31), !dbg !93
  %1195 = bitcast i32 %1194 to float, !dbg !93
  %1196 = fcmp olt float %1193, %1195, !dbg !95
  %1197 = fcmp uno float %1193, 0.000000e+00, !dbg !96
  %1198 = or i1 %1197, %1196, !dbg !97
  %1199 = select i1 %1198, float %1193, float %1195, !dbg !98
  %1200 = bitcast float %1199 to i32, !dbg !93
  %1201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1200, i32 1, i32 31), !dbg !93
  %1202 = bitcast i32 %1201 to float, !dbg !93
  %1203 = fcmp olt float %1199, %1202, !dbg !95
  %1204 = fcmp uno float %1199, 0.000000e+00, !dbg !96
  %1205 = or i1 %1203, %1204, !dbg !97
  %1206 = select i1 %1205, i32 %1200, i32 %1201, !dbg !98
  %1207 = insertelement <1 x i32> poison, i32 %1206, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %1207, i1 %679) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1208 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1209 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1035, <2 x i32> <i32 0, i32 2>, !dbg !101
  %1210 = fcmp ogt <2 x float> %1209, %1035, !dbg !101
  %1211 = fcmp uno <2 x float> %1209, %1035, !dbg !101
  %shift = shufflevector <2 x i1> %1210, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !102
  %1212 = or <2 x i1> %shift, %1211, !dbg !102
  %1213 = extractelement <2 x i1> %1212, i64 0, !dbg !102
  %1214 = extractelement <2 x float> %1035, i64 0, !dbg !103
  %1215 = extractelement <2 x float> %1035, i64 1, !dbg !103
  %1216 = select i1 %1213, float %1214, float %1215, !dbg !103
  %1217 = extractelement <16 x float> %1038, i64 0, !dbg !101
  %1218 = fcmp ogt float %1216, %1217, !dbg !101
  %1219 = fcmp uno float %1216, 0.000000e+00, !dbg !104
  %1220 = or i1 %1218, %1219, !dbg !102
  %1221 = select i1 %1220, float %1216, float %1217, !dbg !103
  %1222 = extractelement <16 x float> %1038, i64 1, !dbg !101
  %1223 = fcmp ogt float %1221, %1222, !dbg !101
  %1224 = fcmp uno float %1221, 0.000000e+00, !dbg !104
  %1225 = or i1 %1223, %1224, !dbg !102
  %1226 = select i1 %1225, float %1221, float %1222, !dbg !103
  %1227 = extractelement <16 x float> %1038, i64 2, !dbg !101
  %1228 = fcmp ogt float %1226, %1227, !dbg !101
  %1229 = fcmp uno float %1226, 0.000000e+00, !dbg !104
  %1230 = or i1 %1228, %1229, !dbg !102
  %1231 = select i1 %1230, float %1226, float %1227, !dbg !103
  %1232 = extractelement <16 x float> %1038, i64 3, !dbg !101
  %1233 = fcmp ogt float %1231, %1232, !dbg !101
  %1234 = fcmp uno float %1231, 0.000000e+00, !dbg !104
  %1235 = or i1 %1233, %1234, !dbg !102
  %1236 = select i1 %1235, float %1231, float %1232, !dbg !103
  %1237 = extractelement <16 x float> %1038, i64 4, !dbg !101
  %1238 = fcmp ogt float %1236, %1237, !dbg !101
  %1239 = fcmp uno float %1236, 0.000000e+00, !dbg !104
  %1240 = or i1 %1238, %1239, !dbg !102
  %1241 = select i1 %1240, float %1236, float %1237, !dbg !103
  %1242 = extractelement <16 x float> %1038, i64 5, !dbg !101
  %1243 = fcmp ogt float %1241, %1242, !dbg !101
  %1244 = fcmp uno float %1241, 0.000000e+00, !dbg !104
  %1245 = or i1 %1243, %1244, !dbg !102
  %1246 = select i1 %1245, float %1241, float %1242, !dbg !103
  %1247 = extractelement <16 x float> %1038, i64 6, !dbg !101
  %1248 = fcmp ogt float %1246, %1247, !dbg !101
  %1249 = fcmp uno float %1246, 0.000000e+00, !dbg !104
  %1250 = or i1 %1248, %1249, !dbg !102
  %1251 = select i1 %1250, float %1246, float %1247, !dbg !103
  %1252 = extractelement <16 x float> %1038, i64 7, !dbg !101
  %1253 = fcmp ogt float %1251, %1252, !dbg !101
  %1254 = fcmp uno float %1251, 0.000000e+00, !dbg !104
  %1255 = or i1 %1253, %1254, !dbg !102
  %1256 = select i1 %1255, float %1251, float %1252, !dbg !103
  %1257 = extractelement <16 x float> %1038, i64 8, !dbg !101
  %1258 = fcmp ogt float %1256, %1257, !dbg !101
  %1259 = fcmp uno float %1256, 0.000000e+00, !dbg !104
  %1260 = or i1 %1258, %1259, !dbg !102
  %1261 = select i1 %1260, float %1256, float %1257, !dbg !103
  %1262 = extractelement <16 x float> %1038, i64 9, !dbg !101
  %1263 = fcmp ogt float %1261, %1262, !dbg !101
  %1264 = fcmp uno float %1261, 0.000000e+00, !dbg !104
  %1265 = or i1 %1263, %1264, !dbg !102
  %1266 = select i1 %1265, float %1261, float %1262, !dbg !103
  %1267 = extractelement <16 x float> %1038, i64 10, !dbg !101
  %1268 = fcmp ogt float %1266, %1267, !dbg !101
  %1269 = fcmp uno float %1266, 0.000000e+00, !dbg !104
  %1270 = or i1 %1268, %1269, !dbg !102
  %1271 = select i1 %1270, float %1266, float %1267, !dbg !103
  %1272 = extractelement <16 x float> %1038, i64 11, !dbg !101
  %1273 = fcmp ogt float %1271, %1272, !dbg !101
  %1274 = fcmp uno float %1271, 0.000000e+00, !dbg !104
  %1275 = or i1 %1273, %1274, !dbg !102
  %1276 = select i1 %1275, float %1271, float %1272, !dbg !103
  %1277 = extractelement <16 x float> %1038, i64 12, !dbg !101
  %1278 = fcmp ogt float %1276, %1277, !dbg !101
  %1279 = fcmp uno float %1276, 0.000000e+00, !dbg !104
  %1280 = or i1 %1278, %1279, !dbg !102
  %1281 = select i1 %1280, float %1276, float %1277, !dbg !103
  %1282 = extractelement <16 x float> %1038, i64 13, !dbg !101
  %1283 = fcmp ogt float %1281, %1282, !dbg !101
  %1284 = fcmp uno float %1281, 0.000000e+00, !dbg !104
  %1285 = or i1 %1283, %1284, !dbg !102
  %1286 = select i1 %1285, float %1281, float %1282, !dbg !103
  %1287 = bitcast float %1286 to i32, !dbg !99
  %1288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1287, i32 16, i32 31), !dbg !99
  %1289 = bitcast i32 %1288 to float, !dbg !99
  %1290 = fcmp ogt float %1286, %1289, !dbg !101
  %1291 = fcmp uno float %1286, 0.000000e+00, !dbg !104
  %1292 = or i1 %1291, %1290, !dbg !102
  %1293 = select i1 %1292, float %1286, float %1289, !dbg !103
  %1294 = bitcast float %1293 to i32, !dbg !99
  %1295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1294, i32 8, i32 31), !dbg !99
  %1296 = bitcast i32 %1295 to float, !dbg !99
  %1297 = fcmp ogt float %1293, %1296, !dbg !101
  %1298 = fcmp uno float %1293, 0.000000e+00, !dbg !104
  %1299 = or i1 %1297, %1298, !dbg !102
  %1300 = select i1 %1299, float %1293, float %1296, !dbg !103
  %1301 = bitcast float %1300 to i32, !dbg !99
  %1302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1301, i32 4, i32 31), !dbg !99
  %1303 = bitcast i32 %1302 to float, !dbg !99
  %1304 = fcmp ogt float %1300, %1303, !dbg !101
  %1305 = fcmp uno float %1300, 0.000000e+00, !dbg !104
  %1306 = or i1 %1304, %1305, !dbg !102
  %1307 = select i1 %1306, float %1300, float %1303, !dbg !103
  %1308 = bitcast float %1307 to i32, !dbg !99
  %1309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1308, i32 2, i32 31), !dbg !99
  %1310 = bitcast i32 %1309 to float, !dbg !99
  %1311 = fcmp ogt float %1307, %1310, !dbg !101
  %1312 = fcmp uno float %1307, 0.000000e+00, !dbg !104
  %1313 = or i1 %1311, %1312, !dbg !102
  %1314 = select i1 %1313, float %1307, float %1310, !dbg !103
  %1315 = bitcast float %1314 to i32, !dbg !99
  %1316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1315, i32 1, i32 31), !dbg !99
  %1317 = bitcast i32 %1316 to float, !dbg !99
  %1318 = fcmp ogt float %1314, %1317, !dbg !101
  %1319 = fcmp uno float %1314, 0.000000e+00, !dbg !104
  %1320 = or i1 %1318, %1319, !dbg !102
  %1321 = select i1 %1320, i32 %1315, i32 %1316, !dbg !103
  %1322 = insertelement <1 x i32> poison, i32 %1321, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %1322, i1 %621) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1323 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %629, i1 %628) #5, !dbg !99
  %1324 = bitcast i32 %1323 to float, !dbg !99
  %1325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1323, i32 2, i32 31), !dbg !99
  %1326 = bitcast i32 %1325 to float, !dbg !99
  %1327 = fcmp ogt float %1324, %1326, !dbg !101
  %1328 = fcmp uno float %1324, 0.000000e+00, !dbg !104
  %1329 = or i1 %1328, %1327, !dbg !102
  %1330 = select i1 %1329, float %1324, float %1326, !dbg !103
  %1331 = bitcast float %1330 to i32, !dbg !99
  %1332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1331, i32 1, i32 31), !dbg !99
  %1333 = bitcast i32 %1332 to float, !dbg !99
  %1334 = fcmp ogt float %1330, %1333, !dbg !101
  %1335 = fcmp uno float %1330, 0.000000e+00, !dbg !104
  %1336 = or i1 %1334, %1335, !dbg !102
  %1337 = select i1 %1336, i32 %1331, i32 %1332, !dbg !103
  %1338 = insertelement <1 x i32> poison, i32 %1337, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %1338, i1 %679) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1339 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %1340 = sext i32 %17 to i64, !dbg !105
  %1341 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1340, !dbg !105
  %1342 = fptrunc float %1208 to bfloat, !dbg !106
  %1343 = and i32 %19, 127, !dbg !106
  %1344 = icmp eq i32 %1343, 0, !dbg !106
  %1345 = bitcast bfloat %1342 to i16, !dbg !106
  %1346 = and i1 %18, %1344, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1345, ptr addrspace(1) %1341, i1 %1346) #5, !dbg !106
  %1347 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1340, !dbg !107
  %1348 = fptrunc float %1339 to bfloat, !dbg !108
  %1349 = bitcast bfloat %1348 to i16, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1349, ptr addrspace(1) %1347, i1 %1346) #5, !dbg !108
  %1350 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1340, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1345, ptr addrspace(1) %1350, i1 %1346) #5, !dbg !110
  %1351 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1340, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1349, ptr addrspace(1) %1351, i1 %1346) #5, !dbg !112
  %1352 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1340, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1345, ptr addrspace(1) %1352, i1 %1346) #5, !dbg !114
  %1353 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1340, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1349, ptr addrspace(1) %1353, i1 %1346) #5, !dbg !116
  %.inv = fcmp oge float %1208, 0.000000e+00, !dbg !117
  %1354 = select i1 %.inv, float 0.000000e+00, float %1208, !dbg !117
  %1355 = fsub float 0.000000e+00, %1354, !dbg !119
  %.inv3 = fcmp ole float %1339, 0.000000e+00, !dbg !120
  %1356 = select i1 %.inv3, float 0.000000e+00, float %1339, !dbg !120
  %1357 = fcmp ogt float %1355, %1356, !dbg !122
  %1358 = fcmp uno float %1355, 0.000000e+00, !dbg !124
  %1359 = or i1 %1358, %1357, !dbg !125
  %1360 = select i1 %1359, float %1355, float %1356, !dbg !126
  %1361 = fmul float %1360, 0x3F80204080000000, !dbg !127
  %1362 = fcmp ogt float %1361, 0x3EE4F8B580000000, !dbg !128
  %1363 = fcmp uno float %1361, 0.000000e+00, !dbg !130
  %1364 = or i1 %1362, %1363, !dbg !131
  %1365 = select i1 %1364, float %1361, float 0x3EE4F8B580000000, !dbg !132
  %1366 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1365), !dbg !133
  br label %1367, !dbg !134

1367:                                             ; preds = %1081, %1367
  %1368 = phi i1 [ true, %1081 ], [ false, %1367 ]
  %indvars.iv201 = phi i64 [ 0, %1081 ], [ 2048, %1367 ]
  %1369 = or disjoint i64 %indvars.iv201, %28, !dbg !135
  %1370 = icmp samesign ult i64 %1369, 3072, !dbg !136
  %1371 = trunc nuw nsw i64 %1369 to i32, !dbg !137
  %1372 = add i32 %26, %1371, !dbg !137
  %1373 = trunc nuw nsw i64 %indvars.iv201 to i32, !dbg !137
  %1374 = add i32 %27, %1373, !dbg !137
  %1375 = sext i32 %1372 to i64, !dbg !138
  %1376 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1375, !dbg !138
  %1377 = sext i32 %1374 to i64, !dbg !138
  %1378 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1377, !dbg !138
  %1379 = and i1 %18, %1370, !dbg !139
  %1380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1376, i1 %1379) #5, !dbg !140
  %1381 = extractvalue { i32, i32, i32, i32 } %1380, 0, !dbg !140
  %1382 = bitcast i32 %1381 to <2 x bfloat>, !dbg !140
  %1383 = extractvalue { i32, i32, i32, i32 } %1380, 1, !dbg !140
  %1384 = bitcast i32 %1383 to <2 x bfloat>, !dbg !140
  %1385 = extractvalue { i32, i32, i32, i32 } %1380, 2, !dbg !140
  %1386 = bitcast i32 %1385 to <2 x bfloat>, !dbg !140
  %1387 = extractvalue { i32, i32, i32, i32 } %1380, 3, !dbg !140
  %1388 = bitcast i32 %1387 to <2 x bfloat>, !dbg !140
  %1389 = extractelement <2 x bfloat> %1382, i64 0, !dbg !140
  %1390 = extractelement <2 x bfloat> %1382, i64 1, !dbg !140
  %1391 = extractelement <2 x bfloat> %1384, i64 0, !dbg !140
  %1392 = extractelement <2 x bfloat> %1384, i64 1, !dbg !140
  %1393 = extractelement <2 x bfloat> %1386, i64 0, !dbg !140
  %1394 = extractelement <2 x bfloat> %1386, i64 1, !dbg !140
  %1395 = extractelement <2 x bfloat> %1388, i64 0, !dbg !140
  %1396 = extractelement <2 x bfloat> %1388, i64 1, !dbg !140
  %1397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1378, i1 %1379) #5, !dbg !140
  %1398 = extractvalue { i32, i32, i32, i32 } %1397, 0, !dbg !140
  %1399 = bitcast i32 %1398 to <2 x bfloat>, !dbg !140
  %1400 = extractvalue { i32, i32, i32, i32 } %1397, 1, !dbg !140
  %1401 = bitcast i32 %1400 to <2 x bfloat>, !dbg !140
  %1402 = extractvalue { i32, i32, i32, i32 } %1397, 2, !dbg !140
  %1403 = bitcast i32 %1402 to <2 x bfloat>, !dbg !140
  %1404 = extractvalue { i32, i32, i32, i32 } %1397, 3, !dbg !140
  %1405 = bitcast i32 %1404 to <2 x bfloat>, !dbg !140
  %1406 = extractelement <2 x bfloat> %1399, i64 0, !dbg !140
  %1407 = extractelement <2 x bfloat> %1399, i64 1, !dbg !140
  %1408 = extractelement <2 x bfloat> %1401, i64 0, !dbg !140
  %1409 = extractelement <2 x bfloat> %1401, i64 1, !dbg !140
  %1410 = extractelement <2 x bfloat> %1403, i64 0, !dbg !140
  %1411 = extractelement <2 x bfloat> %1403, i64 1, !dbg !140
  %1412 = extractelement <2 x bfloat> %1405, i64 0, !dbg !140
  %1413 = extractelement <2 x bfloat> %1405, i64 1, !dbg !140
  %1414 = fpext bfloat %1389 to float, !dbg !141
  %1415 = fpext bfloat %1390 to float, !dbg !141
  %1416 = fpext bfloat %1391 to float, !dbg !141
  %1417 = fpext bfloat %1392 to float, !dbg !141
  %1418 = fpext bfloat %1393 to float, !dbg !141
  %1419 = fpext bfloat %1394 to float, !dbg !141
  %1420 = fpext bfloat %1395 to float, !dbg !141
  %1421 = fpext bfloat %1396 to float, !dbg !141
  %1422 = fpext bfloat %1406 to float, !dbg !141
  %1423 = fpext bfloat %1407 to float, !dbg !141
  %1424 = fpext bfloat %1408 to float, !dbg !141
  %1425 = fpext bfloat %1409 to float, !dbg !141
  %1426 = fpext bfloat %1410 to float, !dbg !141
  %1427 = fpext bfloat %1411 to float, !dbg !141
  %1428 = fpext bfloat %1412 to float, !dbg !141
  %1429 = fpext bfloat %1413 to float, !dbg !141
  %1430 = fmul float %1366, %1414, !dbg !142
  %1431 = fmul float %1366, %1415, !dbg !142
  %1432 = fmul float %1366, %1416, !dbg !142
  %1433 = fmul float %1366, %1417, !dbg !142
  %1434 = fmul float %1366, %1418, !dbg !142
  %1435 = fmul float %1366, %1419, !dbg !142
  %1436 = fmul float %1366, %1420, !dbg !142
  %1437 = fmul float %1366, %1421, !dbg !142
  %1438 = fmul float %1366, %1422, !dbg !142
  %1439 = fmul float %1366, %1423, !dbg !142
  %1440 = fmul float %1366, %1424, !dbg !142
  %1441 = fmul float %1366, %1425, !dbg !142
  %1442 = fmul float %1366, %1426, !dbg !142
  %1443 = fmul float %1366, %1427, !dbg !142
  %1444 = fmul float %1366, %1428, !dbg !142
  %1445 = fmul float %1366, %1429, !dbg !142
  %1446 = tail call float @llvm.nvvm.round.f(float %1430) #5, !dbg !143
  %1447 = tail call float @llvm.nvvm.round.f(float %1431) #5, !dbg !143
  %1448 = tail call float @llvm.nvvm.round.f(float %1432) #5, !dbg !143
  %1449 = tail call float @llvm.nvvm.round.f(float %1433) #5, !dbg !143
  %1450 = tail call float @llvm.nvvm.round.f(float %1434) #5, !dbg !143
  %1451 = tail call float @llvm.nvvm.round.f(float %1435) #5, !dbg !143
  %1452 = tail call float @llvm.nvvm.round.f(float %1436) #5, !dbg !143
  %1453 = tail call float @llvm.nvvm.round.f(float %1437) #5, !dbg !143
  %1454 = tail call float @llvm.nvvm.round.f(float %1438) #5, !dbg !143
  %1455 = tail call float @llvm.nvvm.round.f(float %1439) #5, !dbg !143
  %1456 = tail call float @llvm.nvvm.round.f(float %1440) #5, !dbg !143
  %1457 = tail call float @llvm.nvvm.round.f(float %1441) #5, !dbg !143
  %1458 = tail call float @llvm.nvvm.round.f(float %1442) #5, !dbg !143
  %1459 = tail call float @llvm.nvvm.round.f(float %1443) #5, !dbg !143
  %1460 = tail call float @llvm.nvvm.round.f(float %1444) #5, !dbg !143
  %1461 = tail call float @llvm.nvvm.round.f(float %1445) #5, !dbg !143
  %1462 = insertelement <4 x float> poison, float %1446, i64 0, !dbg !144
  %1463 = insertelement <4 x float> %1462, float %1447, i64 1, !dbg !144
  %1464 = insertelement <4 x float> %1463, float %1448, i64 2, !dbg !144
  %1465 = insertelement <4 x float> %1464, float %1449, i64 3, !dbg !144
  %1466 = fcmp ogt <4 x float> %1465, splat (float -1.270000e+02), !dbg !144
  %1467 = fcmp uno <4 x float> %1465, zeroinitializer, !dbg !146
  %1468 = or <4 x i1> %1466, %1467, !dbg !147
  %1469 = select <4 x i1> %1468, <4 x float> %1465, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1470 = fcmp olt <4 x float> %1469, splat (float 1.270000e+02), !dbg !149
  %1471 = fcmp uno <4 x float> %1469, zeroinitializer, !dbg !151
  %1472 = or <4 x i1> %1470, %1471, !dbg !152
  %1473 = fptosi <4 x float> %1469 to <4 x i8>, !dbg !153
  %1474 = select <4 x i1> %1472, <4 x i8> %1473, <4 x i8> splat (i8 127), !dbg !154
  %1475 = insertelement <4 x float> poison, float %1450, i64 0, !dbg !144
  %1476 = insertelement <4 x float> %1475, float %1451, i64 1, !dbg !144
  %1477 = insertelement <4 x float> %1476, float %1452, i64 2, !dbg !144
  %1478 = insertelement <4 x float> %1477, float %1453, i64 3, !dbg !144
  %1479 = fcmp ogt <4 x float> %1478, splat (float -1.270000e+02), !dbg !144
  %1480 = fcmp uno <4 x float> %1478, zeroinitializer, !dbg !146
  %1481 = or <4 x i1> %1479, %1480, !dbg !147
  %1482 = select <4 x i1> %1481, <4 x float> %1478, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1483 = fcmp olt <4 x float> %1482, splat (float 1.270000e+02), !dbg !149
  %1484 = fcmp uno <4 x float> %1482, zeroinitializer, !dbg !151
  %1485 = or <4 x i1> %1483, %1484, !dbg !152
  %1486 = fptosi <4 x float> %1482 to <4 x i8>, !dbg !153
  %1487 = select <4 x i1> %1485, <4 x i8> %1486, <4 x i8> splat (i8 127), !dbg !154
  %1488 = insertelement <4 x float> poison, float %1454, i64 0, !dbg !144
  %1489 = insertelement <4 x float> %1488, float %1455, i64 1, !dbg !144
  %1490 = insertelement <4 x float> %1489, float %1456, i64 2, !dbg !144
  %1491 = insertelement <4 x float> %1490, float %1457, i64 3, !dbg !144
  %1492 = fcmp ogt <4 x float> %1491, splat (float -1.270000e+02), !dbg !144
  %1493 = fcmp uno <4 x float> %1491, zeroinitializer, !dbg !146
  %1494 = or <4 x i1> %1492, %1493, !dbg !147
  %1495 = select <4 x i1> %1494, <4 x float> %1491, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1496 = fcmp olt <4 x float> %1495, splat (float 1.270000e+02), !dbg !149
  %1497 = fcmp uno <4 x float> %1495, zeroinitializer, !dbg !151
  %1498 = or <4 x i1> %1496, %1497, !dbg !152
  %1499 = fptosi <4 x float> %1495 to <4 x i8>, !dbg !153
  %1500 = select <4 x i1> %1498, <4 x i8> %1499, <4 x i8> splat (i8 127), !dbg !154
  %1501 = insertelement <4 x float> poison, float %1458, i64 0, !dbg !144
  %1502 = insertelement <4 x float> %1501, float %1459, i64 1, !dbg !144
  %1503 = insertelement <4 x float> %1502, float %1460, i64 2, !dbg !144
  %1504 = insertelement <4 x float> %1503, float %1461, i64 3, !dbg !144
  %1505 = fcmp ogt <4 x float> %1504, splat (float -1.270000e+02), !dbg !144
  %1506 = fcmp uno <4 x float> %1504, zeroinitializer, !dbg !146
  %1507 = or <4 x i1> %1505, %1506, !dbg !147
  %1508 = select <4 x i1> %1507, <4 x float> %1504, <4 x float> splat (float -1.270000e+02), !dbg !148
  %1509 = fcmp olt <4 x float> %1508, splat (float 1.270000e+02), !dbg !149
  %1510 = fcmp uno <4 x float> %1508, zeroinitializer, !dbg !151
  %1511 = or <4 x i1> %1509, %1510, !dbg !152
  %1512 = fptosi <4 x float> %1508 to <4 x i8>, !dbg !153
  %1513 = select <4 x i1> %1511, <4 x i8> %1512, <4 x i8> splat (i8 127), !dbg !154
  %1514 = getelementptr i8, ptr addrspace(1) %10, i64 %1375, !dbg !155
  %1515 = bitcast <4 x i8> %1474 to i32, !dbg !156
  %1516 = bitcast <4 x i8> %1487 to i32, !dbg !156
  %1517 = bitcast <4 x i8> %1500 to i32, !dbg !156
  %1518 = bitcast <4 x i8> %1513 to i32, !dbg !156
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1514, i1 %1379) #5, !dbg !156
  %1519 = getelementptr i8, ptr addrspace(1) %11, i64 %1375, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1519, i1 %1379) #5, !dbg !158
  %1520 = getelementptr i8, ptr addrspace(1) %12, i64 %1375, !dbg !159
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1520, i1 %1379) #5, !dbg !160
  br i1 %1368, label %1367, label %1521, !dbg !134

1521:                                             ; preds = %1367
  ret void, !dbg !161
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 33, column: 31, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 41, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 59, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 203, column: 7, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 42, column: 51, scope: !6)
!25 = !DILocation(line: 208, column: 24, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 209, column: 30, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 210, column: 34, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 210, column: 26, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 211, column: 39, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 211, column: 31, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 211, column: 22, scope: !22, inlinedAt: !24)
!32 = !DILocation(line: 44, column: 62, scope: !6)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = !DILocation(line: 46, column: 66, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!37 = !DILocation(line: 47, column: 79, scope: !6)
!38 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !37)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 69, column: 24, scope: !6)
!52 = !DILocation(line: 70, column: 32, scope: !6)
!53 = !DILocation(line: 53, column: 40, scope: !6)
!54 = !DILocation(line: 71, column: 24, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 55, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 59, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 59, column: 113, scope: !6)
!72 = !DILocation(line: 61, column: 102, scope: !6)
!73 = !DILocation(line: 63, column: 95, scope: !6)
!74 = !DILocation(line: 74, column: 24, scope: !6)
!75 = !DILocation(line: 76, column: 24, scope: !6)
!76 = !DILocation(line: 77, column: 24, scope: !6)
!77 = !DILocation(line: 79, column: 24, scope: !6)
!78 = !DILocation(line: 80, column: 24, scope: !6)
!79 = !DILocation(line: 86, column: 53, scope: !6)
!80 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !81)
!81 = !DILocation(line: 84, column: 47, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !83)
!83 = !DILocation(line: 82, column: 47, scope: !6)
!84 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !81)
!85 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !81)
!86 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !81)
!87 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !83)
!88 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !83)
!89 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !83)
!90 = !DILocation(line: 83, column: 50, scope: !6)
!91 = !DILocation(line: 85, column: 50, scope: !6)
!92 = !DILocation(line: 86, column: 29, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !22, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !94)
!99 = !DILocation(line: 115, column: 29, scope: !22, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !100)
!104 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !100)
!105 = !DILocation(line: 89, column: 25, scope: !6)
!106 = !DILocation(line: 89, column: 37, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 37, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !118)
!118 = !DILocation(line: 103, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 17, scope: !6)
!120 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !123)
!123 = !DILocation(line: 106, column: 46, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !123)
!125 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !123)
!126 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !123)
!127 = !DILocation(line: 108, column: 24, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !129)
!129 = !DILocation(line: 111, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !129)
!133 = !DILocation(line: 114, column: 25, scope: !6)
!134 = !DILocation(line: 95, column: 40, scope: !6)
!135 = !DILocation(line: 96, column: 31, scope: !6)
!136 = !DILocation(line: 97, column: 29, scope: !6)
!137 = !DILocation(line: 101, column: 43, scope: !6)
!138 = !DILocation(line: 101, column: 36, scope: !6)
!139 = !DILocation(line: 101, column: 61, scope: !6)
!140 = !DILocation(line: 101, column: 53, scope: !6)
!141 = !DILocation(line: 101, column: 115, scope: !6)
!142 = !DILocation(line: 117, column: 24, scope: !6)
!143 = !DILocation(line: 118, column: 36, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !145)
!145 = !DILocation(line: 121, column: 46, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !145)
!149 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !150)
!150 = !DILocation(line: 123, column: 46, scope: !6)
!151 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !150)
!152 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !150)
!153 = !DILocation(line: 125, column: 25, scope: !6)
!154 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !150)
!155 = !DILocation(line: 126, column: 29, scope: !6)
!156 = !DILocation(line: 126, column: 53, scope: !6)
!157 = !DILocation(line: 127, column: 30, scope: !6)
!158 = !DILocation(line: 127, column: 54, scope: !6)
!159 = !DILocation(line: 128, column: 30, scope: !6)
!160 = !DILocation(line: 128, column: 54, scope: !6)
!161 = !DILocation(line: 95, column: 4, scope: !6)
