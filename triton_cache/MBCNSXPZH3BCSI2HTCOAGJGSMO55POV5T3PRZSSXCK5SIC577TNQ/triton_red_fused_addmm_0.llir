; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 1, !dbg !11
  %11 = and i32 %10, 2046, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  br i1 %8, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %6
  %16 = add i32 %11, %12, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 false) #4, !dbg !18
  %20 = or disjoint i64 %13, 2048, !dbg !19
  %21 = icmp samesign ult i64 %20, 3072, !dbg !20
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !14
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 %21) #4, !dbg !15
  %24 = trunc nuw nsw i64 %20 to i32, !dbg !16
  %25 = add i32 %12, %24, !dbg !16
  %26 = sext i32 %25 to i64, !dbg !17
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 false) #4, !dbg !18
  br label %.split2.us, !dbg !11

.split.preheader:                                 ; preds = %6
  %29 = bitcast i32 %15 to <2 x bfloat>, !dbg !15
  %30 = add i32 %11, %12, !dbg !16
  %31 = sext i32 %30 to i64, !dbg !17
  %32 = getelementptr bfloat, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #4, !dbg !18
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !18
  %35 = or disjoint i64 %13, 2048, !dbg !19
  %36 = icmp samesign ult i64 %35, 3072, !dbg !20
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !14
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 %36) #4, !dbg !15
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !15
  %40 = trunc nuw nsw i64 %35 to i32, !dbg !16
  %41 = add i32 %12, %40, !dbg !16
  %42 = sext i32 %41 to i64, !dbg !17
  %43 = getelementptr bfloat, ptr addrspace(1) %1, i64 %42, !dbg !17
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 %36) #4, !dbg !18
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !18
  %46 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !21
  %47 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !22
  %48 = extractelement <2 x float> %46, i64 0, !dbg !23
  %49 = fsub float 0.000000e+00, %48, !dbg !23
  %50 = extractelement <2 x float> %46, i64 1, !dbg !23
  %51 = fsub float 0.000000e+00, %50, !dbg !23
  %52 = fmul float %49, 0x3FF7154760000000, !dbg !27
  %53 = tail call float @llvm.nvvm.ex2.approx.f(float %52), !dbg !27
  %54 = fmul float %51, 0x3FF7154760000000, !dbg !27
  %55 = tail call float @llvm.nvvm.ex2.approx.f(float %54), !dbg !27
  %56 = fadd float %53, 1.000000e+00, !dbg !28
  %57 = fadd float %55, 1.000000e+00, !dbg !28
  %58 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %56), !dbg !29
  %59 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %57), !dbg !29
  %60 = insertelement <2 x float> poison, float %58, i64 0, !dbg !30
  %61 = insertelement <2 x float> %60, float %59, i64 1, !dbg !30
  %62 = fmul <2 x float> %61, %46, !dbg !30
  %63 = fmul <2 x float> %62, %47, !dbg !31
  %64 = fadd <2 x float> %63, zeroinitializer, !dbg !32
  %65 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !21
  %66 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !22
  %67 = extractelement <2 x float> %65, i64 0, !dbg !23
  %68 = fsub float 0.000000e+00, %67, !dbg !23
  %69 = extractelement <2 x float> %65, i64 1, !dbg !23
  %70 = fsub float 0.000000e+00, %69, !dbg !23
  %71 = fmul float %68, 0x3FF7154760000000, !dbg !27
  %72 = tail call float @llvm.nvvm.ex2.approx.f(float %71), !dbg !27
  %73 = fmul float %70, 0x3FF7154760000000, !dbg !27
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !27
  %75 = fadd float %72, 1.000000e+00, !dbg !28
  %76 = fadd float %74, 1.000000e+00, !dbg !28
  %77 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !29
  %78 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %76), !dbg !29
  %79 = insertelement <2 x float> poison, float %77, i64 0, !dbg !30
  %80 = insertelement <2 x float> %79, float %78, i64 1, !dbg !30
  %81 = fmul <2 x float> %80, %65, !dbg !30
  %82 = fmul <2 x float> %81, %66, !dbg !31
  %83 = fadd <2 x float> %64, %82, !dbg !32
  %84 = insertelement <2 x i1> poison, i1 %36, i64 0, !dbg !33
  %85 = shufflevector <2 x i1> %84, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !33
  %86 = select <2 x i1> %85, <2 x float> %83, <2 x float> %64, !dbg !33
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !11
  %87 = fadd <2 x float> %86, %shift, !dbg !11
  %88 = extractelement <2 x float> %87, i64 0, !dbg !11
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.us.preheader, %.split.preheader
  %89 = phi float [ %88, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !34
  %90 = lshr i32 %9, 5, !dbg !11
  %91 = and i32 %9, 31, !dbg !11
  %92 = bitcast float %89 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %89, %94, !dbg !34
  %96 = bitcast float %95 to i32, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %95, %98, !dbg !34
  %100 = bitcast float %99 to i32, !dbg !37
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = fadd float %99, %102, !dbg !34
  %104 = bitcast float %103 to i32, !dbg !37
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !37
  %106 = bitcast i32 %105 to float, !dbg !37
  %107 = fadd float %103, %106, !dbg !34
  %108 = bitcast float %107 to i32, !dbg !37
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = fadd float %107, %110, !dbg !34
  %112 = and i32 %90, 31, !dbg !37
  %113 = icmp eq i32 %91, 0, !dbg !37
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  %115 = bitcast float %111 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %113) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %116 = icmp slt i32 %9, 32, !dbg !37
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !37
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #4, !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !37
  %121 = bitcast i32 %120 to float, !dbg !37
  %122 = fadd float %119, %121, !dbg !34
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fadd float %122, %125, !dbg !34
  %127 = bitcast float %126 to i32, !dbg !37
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !37
  %129 = bitcast i32 %128 to float, !dbg !37
  %130 = fadd float %126, %129, !dbg !34
  %131 = bitcast float %130 to i32, !dbg !37
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = fadd float %130, %133, !dbg !34
  %135 = bitcast float %134 to i32, !dbg !37
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = fadd float %134, %137, !dbg !34
  %139 = and i1 %116, %113, !dbg !37
  %140 = bitcast float %138 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %140, i1 %139) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %141 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %142 = sext i32 %7 to i64, !dbg !38
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !38
  %144 = and i32 %9, 1023, !dbg !39
  %145 = icmp eq i32 %144, 0, !dbg !39
  %146 = and i1 %8, %145, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %143, i1 %146) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 32, column: 29, scope: !6)
!21 = !DILocation(line: 36, column: 94, scope: !6)
!22 = !DILocation(line: 37, column: 113, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 39, column: 26, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 46, column: 25, scope: !6)
!33 = !DILocation(line: 47, column: 50, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 48, column: 27, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !24, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 25, scope: !6)
!39 = !DILocation(line: 49, column: 37, scope: !6)
!40 = !DILocation(line: 49, column: 4, scope: !6)
