; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 8, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = shl i32 %9, 2, !dbg !14
  %14 = and i32 %13, 2044, !dbg !14
  %15 = shl i32 %9, 3, !dbg !14
  %16 = and i32 %15, 2040, !dbg !14
  %17 = mul i32 %11, 3072, !dbg !15
  %18 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %20 = or disjoint i32 %16, 4
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20
  %22 = zext nneg i32 %14 to i64, !dbg !16
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 true) #4, !dbg !18
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !18
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !18
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !18
  %30 = extractelement <2 x bfloat> %26, i64 1, !dbg !18
  %31 = extractelement <2 x bfloat> %28, i64 0, !dbg !18
  %32 = extractelement <2 x bfloat> %28, i64 1, !dbg !18
  %33 = fpext bfloat %29 to float, !dbg !19
  %34 = fpext bfloat %30 to float, !dbg !19
  %35 = fpext bfloat %31 to float, !dbg !19
  %36 = fpext bfloat %32 to float, !dbg !19
  %37 = add i32 %16, %17, !dbg !20
  %38 = sext i32 %37 to i64, !dbg !21
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %12) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !22
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !22
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !22
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !22
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !22
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !22
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !22
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !22
  %57 = fpext bfloat %49 to float, !dbg !23
  %58 = fpext bfloat %50 to float, !dbg !23
  %59 = fpext bfloat %51 to float, !dbg !23
  %60 = fpext bfloat %52 to float, !dbg !23
  %61 = fpext bfloat %53 to float, !dbg !23
  %62 = fpext bfloat %54 to float, !dbg !23
  %63 = fpext bfloat %55 to float, !dbg !23
  %64 = fpext bfloat %56 to float, !dbg !23
  %65 = fsub float 0.000000e+00, %33, !dbg !24
  %66 = fsub float 0.000000e+00, %34, !dbg !24
  %67 = fsub float 0.000000e+00, %35, !dbg !24
  %68 = fsub float 0.000000e+00, %36, !dbg !24
  %69 = fmul float %65, 0x3FF7154760000000, !dbg !28
  %70 = tail call float @llvm.nvvm.ex2.approx.f(float %69), !dbg !28
  %71 = fmul float %66, 0x3FF7154760000000, !dbg !28
  %72 = tail call float @llvm.nvvm.ex2.approx.f(float %71), !dbg !28
  %73 = fmul float %67, 0x3FF7154760000000, !dbg !28
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !28
  %75 = fmul float %68, 0x3FF7154760000000, !dbg !28
  %76 = tail call float @llvm.nvvm.ex2.approx.f(float %75), !dbg !28
  %77 = fadd float %70, 1.000000e+00, !dbg !29
  %78 = fadd float %72, 1.000000e+00, !dbg !29
  %79 = fadd float %74, 1.000000e+00, !dbg !29
  %80 = fadd float %76, 1.000000e+00, !dbg !29
  %81 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %77), !dbg !30
  %82 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %78), !dbg !30
  %83 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %79), !dbg !30
  %84 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %80), !dbg !30
  %85 = fmul float %81, %33, !dbg !31
  %86 = fmul float %82, %34, !dbg !31
  %87 = fmul float %83, %35, !dbg !31
  %88 = fmul float %84, %36, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %89 = bitcast float %85 to i32, !dbg !32
  %90 = bitcast float %86 to i32, !dbg !32
  %91 = bitcast float %87 to i32, !dbg !32
  %92 = bitcast float %88 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %18, i32 %89, i32 %90, i32 %91, i32 %92, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %93 = load float, ptr addrspace(3) %19, align 16, !dbg !32
  %94 = getelementptr inbounds nuw i8, ptr addrspace(3) %19, i32 4, !dbg !32
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !32
  %96 = getelementptr inbounds nuw i8, ptr addrspace(3) %19, i32 8, !dbg !32
  %97 = load float, ptr addrspace(3) %96, align 8, !dbg !32
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) %19, i32 12, !dbg !32
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !32
  %100 = load float, ptr addrspace(3) %21, align 16, !dbg !32
  %101 = getelementptr inbounds nuw i8, ptr addrspace(3) %21, i32 4, !dbg !32
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !32
  %103 = getelementptr inbounds nuw i8, ptr addrspace(3) %21, i32 8, !dbg !32
  %104 = load float, ptr addrspace(3) %103, align 8, !dbg !32
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %21, i32 12, !dbg !32
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !32
  %107 = fmul float %93, %57, !dbg !32
  %108 = fmul float %95, %58, !dbg !32
  %109 = fmul float %97, %59, !dbg !32
  %110 = fmul float %99, %60, !dbg !32
  %111 = fmul float %100, %61, !dbg !32
  %112 = fmul float %102, %62, !dbg !32
  %113 = fmul float %104, %63, !dbg !32
  %114 = fmul float %106, %64, !dbg !32
  %115 = fadd float %107, 0.000000e+00, !dbg !33
  %116 = fadd float %108, 0.000000e+00, !dbg !33
  %117 = fadd float %109, 0.000000e+00, !dbg !33
  %118 = fadd float %110, 0.000000e+00, !dbg !33
  %119 = fadd float %111, 0.000000e+00, !dbg !33
  %120 = fadd float %112, 0.000000e+00, !dbg !33
  %121 = fadd float %113, 0.000000e+00, !dbg !33
  %122 = fadd float %114, 0.000000e+00, !dbg !33
  %123 = select i1 %12, float %115, float 0.000000e+00, !dbg !34
  %124 = select i1 %12, float %116, float 0.000000e+00, !dbg !34
  %125 = select i1 %12, float %117, float 0.000000e+00, !dbg !34
  %126 = select i1 %12, float %118, float 0.000000e+00, !dbg !34
  %127 = select i1 %12, float %119, float 0.000000e+00, !dbg !34
  %128 = select i1 %12, float %120, float 0.000000e+00, !dbg !34
  %129 = select i1 %12, float %121, float 0.000000e+00, !dbg !34
  %130 = select i1 %12, float %122, float 0.000000e+00, !dbg !34
  %131 = or disjoint i64 %22, 2048, !dbg !35
  %132 = or disjoint i32 %16, 2048, !dbg !35
  %133 = icmp samesign ult i64 %131, 3072, !dbg !36
  %134 = icmp samesign ult i32 %132, 3072, !dbg !36
  %135 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !17
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %135, i1 %133) #4, !dbg !18
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !18
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !18
  %139 = extractvalue { i32, i32 } %136, 1, !dbg !18
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !18
  %141 = extractelement <2 x bfloat> %138, i64 0, !dbg !18
  %142 = extractelement <2 x bfloat> %138, i64 1, !dbg !18
  %143 = extractelement <2 x bfloat> %140, i64 0, !dbg !18
  %144 = extractelement <2 x bfloat> %140, i64 1, !dbg !18
  %145 = fpext bfloat %141 to float, !dbg !19
  %146 = fpext bfloat %142 to float, !dbg !19
  %147 = fpext bfloat %143 to float, !dbg !19
  %148 = fpext bfloat %144 to float, !dbg !19
  %149 = add i32 %132, %17, !dbg !20
  %150 = sext i32 %149 to i64, !dbg !21
  %151 = getelementptr bfloat, ptr addrspace(1) %1, i64 %150, !dbg !21
  %152 = and i1 %12, %134, !dbg !37
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 %152) #4, !dbg !22
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !22
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !22
  %156 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !22
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !22
  %158 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !22
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !22
  %160 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !22
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !22
  %162 = extractelement <2 x bfloat> %155, i64 0, !dbg !22
  %163 = extractelement <2 x bfloat> %155, i64 1, !dbg !22
  %164 = extractelement <2 x bfloat> %157, i64 0, !dbg !22
  %165 = extractelement <2 x bfloat> %157, i64 1, !dbg !22
  %166 = extractelement <2 x bfloat> %159, i64 0, !dbg !22
  %167 = extractelement <2 x bfloat> %159, i64 1, !dbg !22
  %168 = extractelement <2 x bfloat> %161, i64 0, !dbg !22
  %169 = extractelement <2 x bfloat> %161, i64 1, !dbg !22
  %170 = fpext bfloat %162 to float, !dbg !23
  %171 = fpext bfloat %163 to float, !dbg !23
  %172 = fpext bfloat %164 to float, !dbg !23
  %173 = fpext bfloat %165 to float, !dbg !23
  %174 = fpext bfloat %166 to float, !dbg !23
  %175 = fpext bfloat %167 to float, !dbg !23
  %176 = fpext bfloat %168 to float, !dbg !23
  %177 = fpext bfloat %169 to float, !dbg !23
  %178 = fsub float 0.000000e+00, %145, !dbg !24
  %179 = fsub float 0.000000e+00, %146, !dbg !24
  %180 = fsub float 0.000000e+00, %147, !dbg !24
  %181 = fsub float 0.000000e+00, %148, !dbg !24
  %182 = fmul float %178, 0x3FF7154760000000, !dbg !28
  %183 = tail call float @llvm.nvvm.ex2.approx.f(float %182), !dbg !28
  %184 = fmul float %179, 0x3FF7154760000000, !dbg !28
  %185 = tail call float @llvm.nvvm.ex2.approx.f(float %184), !dbg !28
  %186 = fmul float %180, 0x3FF7154760000000, !dbg !28
  %187 = tail call float @llvm.nvvm.ex2.approx.f(float %186), !dbg !28
  %188 = fmul float %181, 0x3FF7154760000000, !dbg !28
  %189 = tail call float @llvm.nvvm.ex2.approx.f(float %188), !dbg !28
  %190 = fadd float %183, 1.000000e+00, !dbg !29
  %191 = fadd float %185, 1.000000e+00, !dbg !29
  %192 = fadd float %187, 1.000000e+00, !dbg !29
  %193 = fadd float %189, 1.000000e+00, !dbg !29
  %194 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %190), !dbg !30
  %195 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %191), !dbg !30
  %196 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %192), !dbg !30
  %197 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %193), !dbg !30
  %198 = fmul float %194, %145, !dbg !31
  %199 = fmul float %195, %146, !dbg !31
  %200 = fmul float %196, %147, !dbg !31
  %201 = fmul float %197, %148, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %202 = bitcast float %198 to i32, !dbg !32
  %203 = bitcast float %199 to i32, !dbg !32
  %204 = bitcast float %200 to i32, !dbg !32
  %205 = bitcast float %201 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %18, i32 %202, i32 %203, i32 %204, i32 %205, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %206 = load float, ptr addrspace(3) %19, align 16, !dbg !32
  %207 = load float, ptr addrspace(3) %94, align 4, !dbg !32
  %208 = load float, ptr addrspace(3) %96, align 8, !dbg !32
  %209 = load float, ptr addrspace(3) %98, align 4, !dbg !32
  %210 = load float, ptr addrspace(3) %21, align 16, !dbg !32
  %211 = load float, ptr addrspace(3) %101, align 4, !dbg !32
  %212 = load float, ptr addrspace(3) %103, align 8, !dbg !32
  %213 = load float, ptr addrspace(3) %105, align 4, !dbg !32
  %214 = fmul float %206, %170, !dbg !32
  %215 = fmul float %207, %171, !dbg !32
  %216 = fmul float %208, %172, !dbg !32
  %217 = fmul float %209, %173, !dbg !32
  %218 = fmul float %210, %174, !dbg !32
  %219 = fmul float %211, %175, !dbg !32
  %220 = fmul float %212, %176, !dbg !32
  %221 = fmul float %213, %177, !dbg !32
  %222 = fadd float %123, %214, !dbg !33
  %223 = fadd float %124, %215, !dbg !33
  %224 = fadd float %125, %216, !dbg !33
  %225 = fadd float %126, %217, !dbg !33
  %226 = fadd float %127, %218, !dbg !33
  %227 = fadd float %128, %219, !dbg !33
  %228 = fadd float %129, %220, !dbg !33
  %229 = fadd float %130, %221, !dbg !33
  %230 = select i1 %152, float %222, float %123, !dbg !34
  %231 = select i1 %152, float %223, float %124, !dbg !34
  %232 = select i1 %152, float %224, float %125, !dbg !34
  %233 = select i1 %152, float %225, float %126, !dbg !34
  %234 = select i1 %152, float %226, float %127, !dbg !34
  %235 = select i1 %152, float %227, float %128, !dbg !34
  %236 = select i1 %152, float %228, float %129, !dbg !34
  %237 = select i1 %152, float %229, float %130, !dbg !34
  %238 = and i32 %9, 1, !dbg !11
  %239 = lshr i32 %9, 5, !dbg !11
  %240 = and i32 %9, 31, !dbg !11
  %241 = or disjoint i32 %8, %238, !dbg !12
  %242 = icmp slt i32 %241, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %243 = fadd float %230, %231, !dbg !40
  %244 = fadd float %232, %243, !dbg !40
  %245 = fadd float %233, %244, !dbg !40
  %246 = fadd float %234, %245, !dbg !40
  %247 = fadd float %235, %246, !dbg !40
  %248 = fadd float %236, %247, !dbg !40
  %249 = fadd float %237, %248, !dbg !40
  %250 = bitcast float %249 to i32, !dbg !38
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !38
  %252 = bitcast i32 %251 to float, !dbg !38
  %253 = fadd float %249, %252, !dbg !40
  %254 = bitcast float %253 to i32, !dbg !38
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !38
  %256 = bitcast i32 %255 to float, !dbg !38
  %257 = fadd float %253, %256, !dbg !40
  %258 = bitcast float %257 to i32, !dbg !38
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !38
  %260 = bitcast i32 %259 to float, !dbg !38
  %261 = fadd float %257, %260, !dbg !40
  %262 = bitcast float %261 to i32, !dbg !38
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !38
  %264 = bitcast i32 %263 to float, !dbg !38
  %265 = fadd float %261, %264, !dbg !40
  %266 = bitcast float %265 to i32, !dbg !38
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !38
  %268 = bitcast i32 %267 to float, !dbg !38
  %269 = fadd float %265, %268, !dbg !40
  %270 = and i32 %239, 7, !dbg !38
  %271 = icmp eq i32 %240, 0, !dbg !38
  %272 = shl nuw nsw i32 %.lobit, 3, !dbg !38
  %273 = or disjoint i32 %272, %270, !dbg !38
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !38
  %275 = bitcast float %269 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 %271) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %276 = icmp slt i32 %9, 16, !dbg !38
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !38
  %278 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %277, i1 %276) #4, !dbg !38
  %279 = bitcast i32 %278 to float, !dbg !38
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 4, i32 31), !dbg !38
  %281 = bitcast i32 %280 to float, !dbg !38
  %282 = fadd float %279, %281, !dbg !40
  %283 = bitcast float %282 to i32, !dbg !38
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !38
  %285 = bitcast i32 %284 to float, !dbg !38
  %286 = fadd float %282, %285, !dbg !40
  %287 = bitcast float %286 to i32, !dbg !38
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !38
  %289 = bitcast i32 %288 to float, !dbg !38
  %290 = fadd float %286, %289, !dbg !40
  %291 = and i32 %9, 7, !dbg !38
  %292 = icmp eq i32 %291, 0, !dbg !38
  %293 = and i1 %276, %292, !dbg !38
  %294 = bitcast float %290 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %294, i1 %293) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !38
  %296 = load i32, ptr addrspace(3) %295, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %297 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !42
  %298 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %299 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %238, !dbg !42
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !42
  %301 = sext i32 %241 to i64, !dbg !43
  %302 = getelementptr float, ptr addrspace(1) %2, i64 %301, !dbg !43
  %303 = and i32 %9, 510, !dbg !44
  %304 = icmp eq i32 %303, 0, !dbg !44
  %305 = and i1 %304, %242, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %302, i1 %305) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 41, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 113, scope: !6)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 39, column: 26, scope: !6)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 47, column: 50, scope: !6)
!35 = !DILocation(line: 31, column: 31, scope: !6)
!36 = !DILocation(line: 32, column: 29, scope: !6)
!37 = !DILocation(line: 37, column: 61, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !39)
!39 = !DILocation(line: 48, column: 27, scope: !6)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!42 = !DILocation(line: 48, column: 30, scope: !6)
!43 = !DILocation(line: 49, column: 25, scope: !6)
!44 = !DILocation(line: 49, column: 37, scope: !6)
!45 = !DILocation(line: 49, column: 4, scope: !6)
