; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 1, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 512, !dbg !13
  %16 = shl i32 %11, 2, !dbg !14
  %17 = and i32 %16, 4, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  br label %20, !dbg !16

20:                                               ; preds = %8, %20
  %21 = phi float [ 0.000000e+00, %8 ], [ %86, %20 ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %87, %20 ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %88, %20 ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %89, %20 ]
  %25 = phi i32 [ 0, %8 ], [ %90, %20 ]
  %26 = or i32 %19, %25, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !18
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %15) #4, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !19
  %34 = extractelement <2 x bfloat> %31, i64 0, !dbg !19
  %35 = extractelement <2 x bfloat> %31, i64 1, !dbg !19
  %36 = extractelement <2 x bfloat> %33, i64 0, !dbg !19
  %37 = extractelement <2 x bfloat> %33, i64 1, !dbg !19
  %38 = fpext bfloat %34 to float, !dbg !20
  %39 = fpext bfloat %35 to float, !dbg !20
  %40 = fpext bfloat %36 to float, !dbg !20
  %41 = fpext bfloat %37 to float, !dbg !20
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !21
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %15) #4, !dbg !22
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !22
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !22
  %48 = extractelement <2 x bfloat> %45, i64 0, !dbg !22
  %49 = extractelement <2 x bfloat> %45, i64 1, !dbg !22
  %50 = extractelement <2 x bfloat> %47, i64 0, !dbg !22
  %51 = extractelement <2 x bfloat> %47, i64 1, !dbg !22
  %52 = fpext bfloat %48 to float, !dbg !23
  %53 = fpext bfloat %49 to float, !dbg !23
  %54 = fpext bfloat %50 to float, !dbg !23
  %55 = fpext bfloat %51 to float, !dbg !23
  %56 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !24
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %15) #4, !dbg !25
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !25
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !25
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !25
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !25
  %62 = extractelement <2 x bfloat> %59, i64 0, !dbg !25
  %63 = extractelement <2 x bfloat> %59, i64 1, !dbg !25
  %64 = extractelement <2 x bfloat> %61, i64 0, !dbg !25
  %65 = extractelement <2 x bfloat> %61, i64 1, !dbg !25
  %66 = fpext bfloat %62 to float, !dbg !26
  %67 = fpext bfloat %63 to float, !dbg !26
  %68 = fpext bfloat %64 to float, !dbg !26
  %69 = fpext bfloat %65 to float, !dbg !26
  %70 = fadd float %38, %52, !dbg !27
  %71 = fadd float %39, %53, !dbg !27
  %72 = fadd float %40, %54, !dbg !27
  %73 = fadd float %41, %55, !dbg !27
  %74 = fadd float %70, %66, !dbg !28
  %75 = fadd float %71, %67, !dbg !28
  %76 = fadd float %72, %68, !dbg !28
  %77 = fadd float %73, %69, !dbg !28
  %78 = fmul float %74, %74, !dbg !29
  %79 = fmul float %75, %75, !dbg !29
  %80 = fmul float %76, %76, !dbg !29
  %81 = fmul float %77, %77, !dbg !29
  %82 = fadd float %21, %78, !dbg !30
  %83 = fadd float %22, %79, !dbg !30
  %84 = fadd float %23, %80, !dbg !30
  %85 = fadd float %24, %81, !dbg !30
  %86 = select i1 %15, float %82, float %21, !dbg !31
  %87 = select i1 %15, float %83, float %22, !dbg !31
  %88 = select i1 %15, float %84, float %23, !dbg !31
  %89 = select i1 %15, float %85, float %24, !dbg !31
  %90 = add nuw nsw i32 %25, 8, !dbg !16
  %91 = icmp samesign ult i32 %25, 4088, !dbg !16
  br i1 %91, label %20, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %20
  %92 = fadd float %86, %87, !dbg !32
  %93 = fadd float %88, %92, !dbg !32
  %94 = fadd float %89, %93, !dbg !32
  %95 = bitcast float %94 to i32, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fadd float %94, %97, !dbg !32
  %99 = tail call float @llvm.nvvm.div.full(float %98, float 4.096000e+03), !dbg !38
  %100 = fadd float %99, 0x3EB0C6F7A0000000, !dbg !39
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i8 = icmp eq i32 %104, 0, !dbg !40
  br i1 %.not.i8, label %107, label %105, !dbg !40

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !40
  br label %__nv_rsqrtf.exit10, !dbg !40

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !40
  br label %__nv_rsqrtf.exit10, !dbg !40

__nv_rsqrtf.exit10:                               ; preds = %105, %107
  %.0.i9 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !40
  %109 = zext nneg i32 %17 to i64, !dbg !41
  %110 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !42
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %112, !dbg !41

112:                                              ; preds = %__nv_rsqrtf.exit10, %112
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit10 ], [ %indvars.iv.next, %112 ]
  %113 = or disjoint i64 %indvars.iv, %109, !dbg !43
  %114 = getelementptr bfloat, ptr addrspace(1) %3, i64 %113, !dbg !44
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %114, i1 true) #4, !dbg !45
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !45
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !45
  %118 = extractvalue { i32, i32 } %115, 1, !dbg !45
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !45
  %120 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %120
  %121 = sext i32 %.reass to i64, !dbg !46
  %122 = getelementptr bfloat, ptr addrspace(1) %0, i64 %121, !dbg !46
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %122, i1 %15) #4, !dbg !47
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !47
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !47
  %126 = extractvalue { i32, i32 } %123, 1, !dbg !47
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !47
  %128 = getelementptr bfloat, ptr addrspace(1) %1, i64 %121, !dbg !48
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %128, i1 %15) #4, !dbg !49
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !49
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !49
  %132 = extractvalue { i32, i32 } %129, 1, !dbg !49
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !49
  %134 = getelementptr bfloat, ptr addrspace(1) %2, i64 %121, !dbg !50
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %134, i1 %15) #4, !dbg !51
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !51
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !51
  %138 = extractvalue { i32, i32 } %135, 1, !dbg !51
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !51
  %140 = getelementptr bfloat, ptr addrspace(1) %4, i64 %121, !dbg !52
  %141 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !53
  %142 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !54
  %143 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !55
  %144 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !56
  %145 = fadd <2 x float> %142, %143, !dbg !57
  %146 = fadd <2 x float> %145, %144, !dbg !58
  %147 = fmul <2 x float> %111, %146, !dbg !42
  %148 = fmul <2 x float> %147, %141, !dbg !59
  %149 = fptrunc <2 x float> %148 to <2 x bfloat>, !dbg !60
  %150 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !53
  %151 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !54
  %152 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !55
  %153 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !56
  %154 = fadd <2 x float> %151, %152, !dbg !57
  %155 = fadd <2 x float> %154, %153, !dbg !58
  %156 = fmul <2 x float> %111, %155, !dbg !42
  %157 = fmul <2 x float> %156, %150, !dbg !59
  %158 = fptrunc <2 x float> %157 to <2 x bfloat>, !dbg !60
  %159 = bitcast <2 x bfloat> %149 to i32, !dbg !60
  %160 = bitcast <2 x bfloat> %158 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %140, i1 %15) #4, !dbg !60
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !41
  %161 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !41
  br i1 %161, label %112, label %162, !dbg !41

162:                                              ; preds = %112
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6asjslmly5ocj3s6mh3iu62oswtuony7ojqrjyoleomizjp2in.py", directory: "/tmp/torchinductor_root/m6")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 112, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 112, scope: !6)
!24 = !DILocation(line: 38, column: 34, scope: !6)
!25 = !DILocation(line: 38, column: 51, scope: !6)
!26 = !DILocation(line: 38, column: 112, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 40, column: 22, scope: !6)
!29 = !DILocation(line: 42, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 23, scope: !6)
!31 = !DILocation(line: 45, column: 48, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 46, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 63, column: 24, scope: !6)
!40 = !DILocation(line: 64, column: 32, scope: !6)
!41 = !DILocation(line: 47, column: 40, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 48, column: 31, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 42, scope: !6)
!46 = !DILocation(line: 54, column: 35, scope: !6)
!47 = !DILocation(line: 54, column: 52, scope: !6)
!48 = !DILocation(line: 55, column: 35, scope: !6)
!49 = !DILocation(line: 55, column: 52, scope: !6)
!50 = !DILocation(line: 56, column: 35, scope: !6)
!51 = !DILocation(line: 56, column: 52, scope: !6)
!52 = !DILocation(line: 68, column: 29, scope: !6)
!53 = !DILocation(line: 53, column: 95, scope: !6)
!54 = !DILocation(line: 54, column: 114, scope: !6)
!55 = !DILocation(line: 55, column: 114, scope: !6)
!56 = !DILocation(line: 56, column: 114, scope: !6)
!57 = !DILocation(line: 57, column: 24, scope: !6)
!58 = !DILocation(line: 58, column: 24, scope: !6)
!59 = !DILocation(line: 67, column: 24, scope: !6)
!60 = !DILocation(line: 68, column: 53, scope: !6)
!61 = !DILocation(line: 47, column: 4, scope: !6)
