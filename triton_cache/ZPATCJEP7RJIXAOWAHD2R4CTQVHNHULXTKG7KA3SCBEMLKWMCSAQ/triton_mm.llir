; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 4, !dbg !19
  %17 = and i32 %16, 7, !dbg !19
  %18 = or disjoint i32 %17, 8, !dbg !19
  %19 = or disjoint i32 %17, 16, !dbg !19
  %20 = or disjoint i32 %17, 24, !dbg !19
  %21 = or disjoint i32 %17, 32, !dbg !19
  %22 = or disjoint i32 %17, 40, !dbg !19
  %23 = or disjoint i32 %17, 48, !dbg !19
  %24 = or disjoint i32 %17, 56, !dbg !19
  %25 = and i32 %15, 8, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %26, 16, !dbg !19
  %29 = and i32 %26, 24, !dbg !19
  %30 = and i32 %26, 32, !dbg !19
  %31 = and i32 %26, 56, !dbg !19
  %32 = or disjoint i32 %14, %17, !dbg !20
  %33 = or disjoint i32 %14, %18, !dbg !20
  %34 = or disjoint i32 %14, %19, !dbg !20
  %35 = or disjoint i32 %14, %20, !dbg !20
  %36 = or disjoint i32 %14, %21, !dbg !20
  %37 = or disjoint i32 %14, %22, !dbg !20
  %38 = or disjoint i32 %14, %23, !dbg !20
  %39 = or disjoint i32 %14, %24, !dbg !20
  %40 = shl nsw i32 %13, 6, !dbg !21
  %41 = or disjoint i32 %40, %17, !dbg !22
  %42 = or disjoint i32 %40, %18, !dbg !22
  %43 = or disjoint i32 %40, %19, !dbg !22
  %44 = or disjoint i32 %40, %20, !dbg !22
  %45 = or disjoint i32 %40, %21, !dbg !22
  %46 = or disjoint i32 %40, %22, !dbg !22
  %47 = or disjoint i32 %40, %23, !dbg !22
  %48 = or disjoint i32 %40, %24, !dbg !22
  %49 = srem i32 %32, 77, !dbg !23
  %50 = srem i32 %33, 77, !dbg !23
  %51 = srem i32 %34, 77, !dbg !23
  %52 = srem i32 %35, 77, !dbg !23
  %53 = srem i32 %36, 77, !dbg !23
  %54 = srem i32 %37, 77, !dbg !23
  %55 = srem i32 %38, 77, !dbg !23
  %56 = srem i32 %39, 77, !dbg !23
  %57 = srem i32 %41, 3072, !dbg !24
  %58 = srem i32 %42, 3072, !dbg !24
  %59 = srem i32 %43, 3072, !dbg !24
  %60 = srem i32 %44, 3072, !dbg !24
  %61 = srem i32 %45, 3072, !dbg !24
  %62 = srem i32 %46, 3072, !dbg !24
  %63 = srem i32 %47, 3072, !dbg !24
  %64 = srem i32 %48, 3072, !dbg !24
  %65 = shl nuw nsw i32 %25, 3, !dbg !25
  %66 = or disjoint i32 %31, %65, !dbg !25
  %67 = mul nsw i32 %49, 768, !dbg !26
  %68 = mul nsw i32 %50, 768, !dbg !26
  %69 = mul nsw i32 %51, 768, !dbg !26
  %70 = mul nsw i32 %52, 768, !dbg !26
  %71 = mul nsw i32 %53, 768, !dbg !26
  %72 = mul nsw i32 %54, 768, !dbg !26
  %73 = mul nsw i32 %55, 768, !dbg !26
  %74 = mul nsw i32 %56, 768, !dbg !26
  %75 = mul nsw i32 %57, 768, !dbg !27
  %76 = mul nsw i32 %58, 768, !dbg !27
  %77 = mul nsw i32 %59, 768, !dbg !27
  %78 = mul nsw i32 %60, 768, !dbg !27
  %79 = mul nsw i32 %61, 768, !dbg !27
  %80 = mul nsw i32 %62, 768, !dbg !27
  %81 = mul nsw i32 %63, 768, !dbg !27
  %82 = mul nsw i32 %64, 768, !dbg !27
  %83 = or disjoint i32 %67, %66, !dbg !28
  %84 = or disjoint i32 %68, %66, !dbg !28
  %85 = or disjoint i32 %69, %66, !dbg !28
  %86 = or disjoint i32 %70, %66, !dbg !28
  %87 = or disjoint i32 %71, %66, !dbg !28
  %88 = or disjoint i32 %72, %66, !dbg !28
  %89 = or disjoint i32 %73, %66, !dbg !28
  %90 = or disjoint i32 %74, %66, !dbg !28
  %91 = sext i32 %83 to i64, !dbg !29
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !29
  %93 = sext i32 %84 to i64, !dbg !29
  %94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %93, !dbg !29
  %95 = sext i32 %85 to i64, !dbg !29
  %96 = getelementptr bfloat, ptr addrspace(1) %0, i64 %95, !dbg !29
  %97 = sext i32 %86 to i64, !dbg !29
  %98 = getelementptr bfloat, ptr addrspace(1) %0, i64 %97, !dbg !29
  %99 = sext i32 %87 to i64, !dbg !29
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %88 to i64, !dbg !29
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = sext i32 %89 to i64, !dbg !29
  %104 = getelementptr bfloat, ptr addrspace(1) %0, i64 %103, !dbg !29
  %105 = sext i32 %90 to i64, !dbg !29
  %106 = getelementptr bfloat, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = lshr i32 %15, 1, !dbg !30
  %108 = and i32 %107, 8, !dbg !30
  %109 = lshr i32 %15, 1, !dbg !30
  %110 = and i32 %109, 56, !dbg !30
  %111 = xor i32 %66, %110, !dbg !30
  %112 = shl nuw nsw i32 %17, 7, !dbg !30
  %113 = or disjoint i32 %111, %112, !dbg !30
  %114 = zext nneg i32 %113 to i64, !dbg !30
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %114, !dbg !30
  %116 = or disjoint i32 %113, 1024, !dbg !30
  %117 = zext nneg i32 %116 to i64, !dbg !30
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %117, !dbg !30
  %119 = or disjoint i32 %113, 2048, !dbg !30
  %120 = zext nneg i32 %119 to i64, !dbg !30
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %120, !dbg !30
  %122 = or disjoint i32 %113, 3072, !dbg !30
  %123 = zext nneg i32 %122 to i64, !dbg !30
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %123, !dbg !30
  %125 = or disjoint i32 %113, 4096, !dbg !30
  %126 = zext nneg i32 %125 to i64, !dbg !30
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %126, !dbg !30
  %128 = or disjoint i32 %113, 5120, !dbg !30
  %129 = zext nneg i32 %128 to i64, !dbg !30
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %129, !dbg !30
  %131 = or disjoint i32 %113, 6144, !dbg !30
  %132 = zext nneg i32 %131 to i64, !dbg !30
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  %134 = or disjoint i32 %113, 7168, !dbg !30
  %135 = zext nneg i32 %134 to i64, !dbg !30
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %135, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %115, ptr addrspace(1) %92, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %118, ptr addrspace(1) %94, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %96, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %98, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %100, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %130, ptr addrspace(1) %102, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %133, ptr addrspace(1) %104, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %136, ptr addrspace(1) %106, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %137 = or disjoint i32 %75, %66, !dbg !31
  %138 = or disjoint i32 %76, %66, !dbg !31
  %139 = or disjoint i32 %77, %66, !dbg !31
  %140 = or disjoint i32 %78, %66, !dbg !31
  %141 = or disjoint i32 %79, %66, !dbg !31
  %142 = or disjoint i32 %80, %66, !dbg !31
  %143 = or disjoint i32 %81, %66, !dbg !31
  %144 = or disjoint i32 %82, %66, !dbg !31
  %145 = sext i32 %137 to i64, !dbg !32
  %146 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !32
  %147 = sext i32 %138 to i64, !dbg !32
  %148 = getelementptr bfloat, ptr addrspace(1) %1, i64 %147, !dbg !32
  %149 = sext i32 %139 to i64, !dbg !32
  %150 = getelementptr bfloat, ptr addrspace(1) %1, i64 %149, !dbg !32
  %151 = sext i32 %140 to i64, !dbg !32
  %152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !32
  %153 = sext i32 %141 to i64, !dbg !32
  %154 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !32
  %155 = sext i32 %142 to i64, !dbg !32
  %156 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !32
  %157 = sext i32 %143 to i64, !dbg !32
  %158 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !32
  %159 = sext i32 %144 to i64, !dbg !32
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !32
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %114, !dbg !33
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %117, !dbg !33
  %163 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %120, !dbg !33
  %164 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %123, !dbg !33
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %126, !dbg !33
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %129, !dbg !33
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %132, !dbg !33
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %135, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %161, ptr addrspace(1) %146, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %162, ptr addrspace(1) %148, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %163, ptr addrspace(1) %150, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %164, ptr addrspace(1) %152, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %165, ptr addrspace(1) %154, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %166, ptr addrspace(1) %156, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %167, ptr addrspace(1) %158, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %168, ptr addrspace(1) %160, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %169 = or disjoint i32 %66, 128, !dbg !34
  %170 = or disjoint i32 %67, %169, !dbg !28
  %171 = or disjoint i32 %68, %169, !dbg !28
  %172 = or disjoint i32 %69, %169, !dbg !28
  %173 = or disjoint i32 %70, %169, !dbg !28
  %174 = or disjoint i32 %71, %169, !dbg !28
  %175 = or disjoint i32 %72, %169, !dbg !28
  %176 = or disjoint i32 %73, %169, !dbg !28
  %177 = or disjoint i32 %74, %169, !dbg !28
  %178 = sext i32 %170 to i64, !dbg !29
  %179 = getelementptr bfloat, ptr addrspace(1) %0, i64 %178, !dbg !29
  %180 = sext i32 %171 to i64, !dbg !29
  %181 = getelementptr bfloat, ptr addrspace(1) %0, i64 %180, !dbg !29
  %182 = sext i32 %172 to i64, !dbg !29
  %183 = getelementptr bfloat, ptr addrspace(1) %0, i64 %182, !dbg !29
  %184 = sext i32 %173 to i64, !dbg !29
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !29
  %186 = sext i32 %174 to i64, !dbg !29
  %187 = getelementptr bfloat, ptr addrspace(1) %0, i64 %186, !dbg !29
  %188 = sext i32 %175 to i64, !dbg !29
  %189 = getelementptr bfloat, ptr addrspace(1) %0, i64 %188, !dbg !29
  %190 = sext i32 %176 to i64, !dbg !29
  %191 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !29
  %192 = sext i32 %177 to i64, !dbg !29
  %193 = getelementptr bfloat, ptr addrspace(1) %0, i64 %192, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %114, !dbg !30
  %195 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %117, !dbg !30
  %196 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %120, !dbg !30
  %197 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %123, !dbg !30
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %126, !dbg !30
  %199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %129, !dbg !30
  %200 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %132, !dbg !30
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %135, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %194, ptr addrspace(1) %179, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %195, ptr addrspace(1) %181, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %196, ptr addrspace(1) %183, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %197, ptr addrspace(1) %185, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %198, ptr addrspace(1) %187, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %199, ptr addrspace(1) %189, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %200, ptr addrspace(1) %191, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %201, ptr addrspace(1) %193, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %202 = or disjoint i32 %75, %169, !dbg !31
  %203 = or disjoint i32 %76, %169, !dbg !31
  %204 = or disjoint i32 %77, %169, !dbg !31
  %205 = or disjoint i32 %78, %169, !dbg !31
  %206 = or disjoint i32 %79, %169, !dbg !31
  %207 = or disjoint i32 %80, %169, !dbg !31
  %208 = or disjoint i32 %81, %169, !dbg !31
  %209 = or disjoint i32 %82, %169, !dbg !31
  %210 = sext i32 %202 to i64, !dbg !32
  %211 = getelementptr bfloat, ptr addrspace(1) %1, i64 %210, !dbg !32
  %212 = sext i32 %203 to i64, !dbg !32
  %213 = getelementptr bfloat, ptr addrspace(1) %1, i64 %212, !dbg !32
  %214 = sext i32 %204 to i64, !dbg !32
  %215 = getelementptr bfloat, ptr addrspace(1) %1, i64 %214, !dbg !32
  %216 = sext i32 %205 to i64, !dbg !32
  %217 = getelementptr bfloat, ptr addrspace(1) %1, i64 %216, !dbg !32
  %218 = sext i32 %206 to i64, !dbg !32
  %219 = getelementptr bfloat, ptr addrspace(1) %1, i64 %218, !dbg !32
  %220 = sext i32 %207 to i64, !dbg !32
  %221 = getelementptr bfloat, ptr addrspace(1) %1, i64 %220, !dbg !32
  %222 = sext i32 %208 to i64, !dbg !32
  %223 = getelementptr bfloat, ptr addrspace(1) %1, i64 %222, !dbg !32
  %224 = sext i32 %209 to i64, !dbg !32
  %225 = getelementptr bfloat, ptr addrspace(1) %1, i64 %224, !dbg !32
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %114, !dbg !33
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %117, !dbg !33
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %120, !dbg !33
  %229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %123, !dbg !33
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %126, !dbg !33
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %129, !dbg !33
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %132, !dbg !33
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %135, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %226, ptr addrspace(1) %211, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %227, ptr addrspace(1) %213, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %228, ptr addrspace(1) %215, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %229, ptr addrspace(1) %217, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %230, ptr addrspace(1) %219, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %231, ptr addrspace(1) %221, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %232, ptr addrspace(1) %223, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %233, ptr addrspace(1) %225, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %234 = or disjoint i32 %66, 256, !dbg !34
  %235 = add nsw i32 %67, %234, !dbg !28
  %236 = add nsw i32 %68, %234, !dbg !28
  %237 = add nsw i32 %69, %234, !dbg !28
  %238 = add nsw i32 %70, %234, !dbg !28
  %239 = add nsw i32 %71, %234, !dbg !28
  %240 = add nsw i32 %72, %234, !dbg !28
  %241 = add nsw i32 %73, %234, !dbg !28
  %242 = add nsw i32 %74, %234, !dbg !28
  %243 = sext i32 %235 to i64, !dbg !29
  %244 = getelementptr bfloat, ptr addrspace(1) %0, i64 %243, !dbg !29
  %245 = sext i32 %236 to i64, !dbg !29
  %246 = getelementptr bfloat, ptr addrspace(1) %0, i64 %245, !dbg !29
  %247 = sext i32 %237 to i64, !dbg !29
  %248 = getelementptr bfloat, ptr addrspace(1) %0, i64 %247, !dbg !29
  %249 = sext i32 %238 to i64, !dbg !29
  %250 = getelementptr bfloat, ptr addrspace(1) %0, i64 %249, !dbg !29
  %251 = sext i32 %239 to i64, !dbg !29
  %252 = getelementptr bfloat, ptr addrspace(1) %0, i64 %251, !dbg !29
  %253 = sext i32 %240 to i64, !dbg !29
  %254 = getelementptr bfloat, ptr addrspace(1) %0, i64 %253, !dbg !29
  %255 = sext i32 %241 to i64, !dbg !29
  %256 = getelementptr bfloat, ptr addrspace(1) %0, i64 %255, !dbg !29
  %257 = sext i32 %242 to i64, !dbg !29
  %258 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %114, !dbg !30
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %117, !dbg !30
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %120, !dbg !30
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %123, !dbg !30
  %263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %126, !dbg !30
  %264 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %129, !dbg !30
  %265 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %132, !dbg !30
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %135, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %259, ptr addrspace(1) %244, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %246, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %248, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %262, ptr addrspace(1) %250, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %263, ptr addrspace(1) %252, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %264, ptr addrspace(1) %254, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %265, ptr addrspace(1) %256, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %266, ptr addrspace(1) %258, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %267 = add nsw i32 %75, %234, !dbg !31
  %268 = add nsw i32 %76, %234, !dbg !31
  %269 = add nsw i32 %77, %234, !dbg !31
  %270 = add nsw i32 %78, %234, !dbg !31
  %271 = add nsw i32 %79, %234, !dbg !31
  %272 = add nsw i32 %80, %234, !dbg !31
  %273 = add nsw i32 %81, %234, !dbg !31
  %274 = add nsw i32 %82, %234, !dbg !31
  %275 = sext i32 %267 to i64, !dbg !32
  %276 = getelementptr bfloat, ptr addrspace(1) %1, i64 %275, !dbg !32
  %277 = sext i32 %268 to i64, !dbg !32
  %278 = getelementptr bfloat, ptr addrspace(1) %1, i64 %277, !dbg !32
  %279 = sext i32 %269 to i64, !dbg !32
  %280 = getelementptr bfloat, ptr addrspace(1) %1, i64 %279, !dbg !32
  %281 = sext i32 %270 to i64, !dbg !32
  %282 = getelementptr bfloat, ptr addrspace(1) %1, i64 %281, !dbg !32
  %283 = sext i32 %271 to i64, !dbg !32
  %284 = getelementptr bfloat, ptr addrspace(1) %1, i64 %283, !dbg !32
  %285 = sext i32 %272 to i64, !dbg !32
  %286 = getelementptr bfloat, ptr addrspace(1) %1, i64 %285, !dbg !32
  %287 = sext i32 %273 to i64, !dbg !32
  %288 = getelementptr bfloat, ptr addrspace(1) %1, i64 %287, !dbg !32
  %289 = sext i32 %274 to i64, !dbg !32
  %290 = getelementptr bfloat, ptr addrspace(1) %1, i64 %289, !dbg !32
  %291 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %114, !dbg !33
  %292 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %117, !dbg !33
  %293 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %120, !dbg !33
  %294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %123, !dbg !33
  %295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %126, !dbg !33
  %296 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %129, !dbg !33
  %297 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %132, !dbg !33
  %298 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %135, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %291, ptr addrspace(1) %276, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %292, ptr addrspace(1) %278, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %293, ptr addrspace(1) %280, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %294, ptr addrspace(1) %282, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %295, ptr addrspace(1) %284, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %296, ptr addrspace(1) %286, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %297, ptr addrspace(1) %288, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %298, ptr addrspace(1) %290, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %299 = or disjoint i32 %66, 384, !dbg !34
  %300 = add nsw i32 %67, %299, !dbg !28
  %301 = add nsw i32 %68, %299, !dbg !28
  %302 = add nsw i32 %69, %299, !dbg !28
  %303 = add nsw i32 %70, %299, !dbg !28
  %304 = add nsw i32 %71, %299, !dbg !28
  %305 = add nsw i32 %72, %299, !dbg !28
  %306 = add nsw i32 %73, %299, !dbg !28
  %307 = add nsw i32 %74, %299, !dbg !28
  %308 = sext i32 %300 to i64, !dbg !29
  %309 = getelementptr bfloat, ptr addrspace(1) %0, i64 %308, !dbg !29
  %310 = sext i32 %301 to i64, !dbg !29
  %311 = getelementptr bfloat, ptr addrspace(1) %0, i64 %310, !dbg !29
  %312 = sext i32 %302 to i64, !dbg !29
  %313 = getelementptr bfloat, ptr addrspace(1) %0, i64 %312, !dbg !29
  %314 = sext i32 %303 to i64, !dbg !29
  %315 = getelementptr bfloat, ptr addrspace(1) %0, i64 %314, !dbg !29
  %316 = sext i32 %304 to i64, !dbg !29
  %317 = getelementptr bfloat, ptr addrspace(1) %0, i64 %316, !dbg !29
  %318 = sext i32 %305 to i64, !dbg !29
  %319 = getelementptr bfloat, ptr addrspace(1) %0, i64 %318, !dbg !29
  %320 = sext i32 %306 to i64, !dbg !29
  %321 = getelementptr bfloat, ptr addrspace(1) %0, i64 %320, !dbg !29
  %322 = sext i32 %307 to i64, !dbg !29
  %323 = getelementptr bfloat, ptr addrspace(1) %0, i64 %322, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %114, !dbg !30
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %117, !dbg !30
  %326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %120, !dbg !30
  %327 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %123, !dbg !30
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %126, !dbg !30
  %329 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %129, !dbg !30
  %330 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %132, !dbg !30
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %135, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %324, ptr addrspace(1) %309, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %325, ptr addrspace(1) %311, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %326, ptr addrspace(1) %313, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %327, ptr addrspace(1) %315, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %328, ptr addrspace(1) %317, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %329, ptr addrspace(1) %319, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %330, ptr addrspace(1) %321, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %331, ptr addrspace(1) %323, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %332 = add nsw i32 %75, %299, !dbg !31
  %333 = add nsw i32 %76, %299, !dbg !31
  %334 = add nsw i32 %77, %299, !dbg !31
  %335 = add nsw i32 %78, %299, !dbg !31
  %336 = add nsw i32 %79, %299, !dbg !31
  %337 = add nsw i32 %80, %299, !dbg !31
  %338 = add nsw i32 %81, %299, !dbg !31
  %339 = add nsw i32 %82, %299, !dbg !31
  %340 = sext i32 %332 to i64, !dbg !32
  %341 = getelementptr bfloat, ptr addrspace(1) %1, i64 %340, !dbg !32
  %342 = sext i32 %333 to i64, !dbg !32
  %343 = getelementptr bfloat, ptr addrspace(1) %1, i64 %342, !dbg !32
  %344 = sext i32 %334 to i64, !dbg !32
  %345 = getelementptr bfloat, ptr addrspace(1) %1, i64 %344, !dbg !32
  %346 = sext i32 %335 to i64, !dbg !32
  %347 = getelementptr bfloat, ptr addrspace(1) %1, i64 %346, !dbg !32
  %348 = sext i32 %336 to i64, !dbg !32
  %349 = getelementptr bfloat, ptr addrspace(1) %1, i64 %348, !dbg !32
  %350 = sext i32 %337 to i64, !dbg !32
  %351 = getelementptr bfloat, ptr addrspace(1) %1, i64 %350, !dbg !32
  %352 = sext i32 %338 to i64, !dbg !32
  %353 = getelementptr bfloat, ptr addrspace(1) %1, i64 %352, !dbg !32
  %354 = sext i32 %339 to i64, !dbg !32
  %355 = getelementptr bfloat, ptr addrspace(1) %1, i64 %354, !dbg !32
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %114, !dbg !33
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %117, !dbg !33
  %358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %120, !dbg !33
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %123, !dbg !33
  %360 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %126, !dbg !33
  %361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %129, !dbg !33
  %362 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %132, !dbg !33
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %135, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %356, ptr addrspace(1) %341, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %357, ptr addrspace(1) %343, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %358, ptr addrspace(1) %345, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %359, ptr addrspace(1) %347, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %360, ptr addrspace(1) %349, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %361, ptr addrspace(1) %351, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %362, ptr addrspace(1) %353, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %363, ptr addrspace(1) %355, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %30, %108, !dbg !35
  %invariant.op88 = or disjoint i32 %25, 32, !dbg !35
  %invariant.op90 = or disjoint i32 %66, 512, !dbg !35
  %364 = and i32 %15, 7
  %365 = and i32 %15, 15
  %366 = xor i32 %31, %108
  %367 = lshr i32 %15, 2
  %368 = and i32 %367, 16
  %369 = or disjoint i32 %368, %365
  %370 = shl nuw nsw i32 %369, 7
  %371 = or disjoint i32 %370, %366
  %372 = zext nneg i32 %371 to i64
  %373 = or disjoint i32 %27, 16
  %374 = xor i32 %373, %28
  %375 = or disjoint i32 %374, %30
  %376 = xor i32 %375, %108
  %377 = or disjoint i32 %376, %370
  %378 = zext nneg i32 %377 to i64
  %379 = or disjoint i32 %29, 32
  %.reass = xor i32 %379, %invariant.op
  %380 = or disjoint i32 %.reass, %370
  %381 = zext nneg i32 %380 to i64
  %382 = or disjoint i32 %27, 48
  %and.ra = and i32 %26, 48
  %383 = or disjoint i32 %108, %and.ra
  %384 = xor i32 %383, %382
  %385 = or disjoint i32 %384, %370
  %386 = zext nneg i32 %385 to i64
  %387 = or disjoint i32 %31, 64
  %388 = xor i32 %387, %108
  %389 = or disjoint i32 %388, %370
  %390 = zext nneg i32 %389 to i64
  %391 = or disjoint i32 %27, 80
  %392 = xor i32 %391, %28
  %393 = or disjoint i32 %392, %30
  %394 = xor i32 %393, %108
  %395 = or disjoint i32 %394, %370
  %396 = zext nneg i32 %395 to i64
  %397 = or disjoint i32 %29, 96
  %.reass87 = xor i32 %397, %invariant.op
  %398 = or disjoint i32 %.reass87, %370
  %399 = zext nneg i32 %398 to i64
  %400 = or disjoint i32 %27, 112
  %401 = xor i32 %383, %400
  %402 = or disjoint i32 %401, %370
  %403 = zext nneg i32 %402 to i64
  %.reass89 = or disjoint i32 %364, %invariant.op88
  %404 = or disjoint i32 %.reass89, %368
  %405 = shl nuw nsw i32 %404, 7
  %406 = or disjoint i32 %405, %366
  %407 = zext nneg i32 %406 to i64
  %408 = or disjoint i32 %376, %405
  %409 = zext nneg i32 %408 to i64
  %410 = or disjoint i32 %.reass, %405
  %411 = zext nneg i32 %410 to i64
  %412 = or disjoint i32 %384, %405
  %413 = zext nneg i32 %412 to i64
  %414 = or disjoint i32 %405, %388
  %415 = zext nneg i32 %414 to i64
  %416 = or disjoint i32 %394, %405
  %417 = zext nneg i32 %416 to i64
  %418 = or disjoint i32 %.reass87, %405
  %419 = zext nneg i32 %418 to i64
  %420 = or disjoint i32 %401, %405
  %421 = zext nneg i32 %420 to i64
  %and.ra82 = and i32 %15, 24
  %422 = xor i32 %31, %and.ra82
  %423 = lshr i32 %15, 2
  %424 = and i32 %423, 8
  %425 = or disjoint i32 %424, %364
  %426 = shl nuw nsw i32 %425, 7
  %427 = or disjoint i32 %426, %422
  %428 = zext nneg i32 %427 to i64
  %429 = or disjoint i32 %30, %and.ra82
  %430 = xor i32 %429, %379
  %431 = or disjoint i32 %430, %426
  %432 = zext nneg i32 %431 to i64
  %433 = xor i32 %387, %and.ra82
  %434 = or disjoint i32 %433, %426
  %435 = zext nneg i32 %434 to i64
  %436 = xor i32 %429, %397
  %437 = or disjoint i32 %436, %426
  %438 = zext nneg i32 %437 to i64
  %439 = or disjoint i32 %426, 2048
  %440 = or disjoint i32 %439, %422
  %441 = zext nneg i32 %440 to i64
  %442 = or disjoint i32 %430, %439
  %443 = zext nneg i32 %442 to i64
  %444 = or disjoint i32 %439, %433
  %445 = zext nneg i32 %444 to i64
  %446 = or disjoint i32 %436, %439
  %447 = zext nneg i32 %446 to i64
  %448 = or disjoint i32 %426, 4096
  %449 = or disjoint i32 %448, %422
  %450 = zext nneg i32 %449 to i64
  %451 = or disjoint i32 %430, %448
  %452 = zext nneg i32 %451 to i64
  %453 = or disjoint i32 %433, %448
  %454 = zext nneg i32 %453 to i64
  %455 = or disjoint i32 %436, %448
  %456 = zext nneg i32 %455 to i64
  %457 = or disjoint i32 %426, 6144
  %458 = or disjoint i32 %457, %422
  %459 = zext nneg i32 %458 to i64
  %460 = or disjoint i32 %430, %457
  %461 = zext nneg i32 %460 to i64
  %462 = or disjoint i32 %457, %433
  %463 = zext nneg i32 %462 to i64
  %464 = or disjoint i32 %436, %457
  %465 = zext nneg i32 %464 to i64
  %466 = zext nneg i32 %invariant.op90 to i64, !dbg !35
  %467 = sext i32 %82 to i64, !dbg !35
  %468 = sext i32 %81 to i64, !dbg !35
  %469 = sext i32 %80 to i64, !dbg !35
  %470 = sext i32 %79 to i64, !dbg !35
  %471 = sext i32 %78 to i64, !dbg !35
  %472 = sext i32 %77 to i64, !dbg !35
  %473 = sext i32 %76 to i64, !dbg !35
  %474 = sext i32 %75 to i64, !dbg !35
  %475 = sext i32 %74 to i64, !dbg !35
  %476 = sext i32 %73 to i64, !dbg !35
  %477 = sext i32 %72 to i64, !dbg !35
  %478 = sext i32 %71 to i64, !dbg !35
  %479 = sext i32 %70 to i64, !dbg !35
  %480 = sext i32 %69 to i64, !dbg !35
  %481 = sext i32 %68 to i64, !dbg !35
  %482 = sext i32 %67 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %482, !dbg !35
  %invariant.gep155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %481, !dbg !35
  %invariant.gep157 = getelementptr bfloat, ptr addrspace(1) %0, i64 %480, !dbg !35
  %invariant.gep159 = getelementptr bfloat, ptr addrspace(1) %0, i64 %479, !dbg !35
  %invariant.gep161 = getelementptr bfloat, ptr addrspace(1) %0, i64 %478, !dbg !35
  %invariant.gep163 = getelementptr bfloat, ptr addrspace(1) %0, i64 %477, !dbg !35
  %invariant.gep165 = getelementptr bfloat, ptr addrspace(1) %0, i64 %476, !dbg !35
  %invariant.gep167 = getelementptr bfloat, ptr addrspace(1) %0, i64 %475, !dbg !35
  %invariant.gep169 = getelementptr bfloat, ptr addrspace(1) %1, i64 %474, !dbg !35
  %invariant.gep171 = getelementptr bfloat, ptr addrspace(1) %1, i64 %473, !dbg !35
  %invariant.gep173 = getelementptr bfloat, ptr addrspace(1) %1, i64 %472, !dbg !35
  %invariant.gep175 = getelementptr bfloat, ptr addrspace(1) %1, i64 %471, !dbg !35
  %invariant.gep177 = getelementptr bfloat, ptr addrspace(1) %1, i64 %470, !dbg !35
  %invariant.gep179 = getelementptr bfloat, ptr addrspace(1) %1, i64 %469, !dbg !35
  %invariant.gep181 = getelementptr bfloat, ptr addrspace(1) %1, i64 %468, !dbg !35
  %invariant.gep183 = getelementptr bfloat, ptr addrspace(1) %1, i64 %467, !dbg !35
  br label %483, !dbg !35

483:                                              ; preds = %4, %483
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %483 ]
  %484 = phi i32 [ -1, %4 ], [ %521, %483 ]
  %485 = phi i32 [ 3, %4 ], [ %1104, %483 ]
  %486 = phi float [ 0.000000e+00, %4 ], [ %1063, %483 ]
  %487 = phi float [ 0.000000e+00, %4 ], [ %1064, %483 ]
  %488 = phi float [ 0.000000e+00, %4 ], [ %1065, %483 ]
  %489 = phi float [ 0.000000e+00, %4 ], [ %1066, %483 ]
  %490 = phi float [ 0.000000e+00, %4 ], [ %1068, %483 ]
  %491 = phi float [ 0.000000e+00, %4 ], [ %1069, %483 ]
  %492 = phi float [ 0.000000e+00, %4 ], [ %1070, %483 ]
  %493 = phi float [ 0.000000e+00, %4 ], [ %1071, %483 ]
  %494 = phi float [ 0.000000e+00, %4 ], [ %1073, %483 ]
  %495 = phi float [ 0.000000e+00, %4 ], [ %1074, %483 ]
  %496 = phi float [ 0.000000e+00, %4 ], [ %1075, %483 ]
  %497 = phi float [ 0.000000e+00, %4 ], [ %1076, %483 ]
  %498 = phi float [ 0.000000e+00, %4 ], [ %1078, %483 ]
  %499 = phi float [ 0.000000e+00, %4 ], [ %1079, %483 ]
  %500 = phi float [ 0.000000e+00, %4 ], [ %1080, %483 ]
  %501 = phi float [ 0.000000e+00, %4 ], [ %1081, %483 ]
  %502 = phi float [ 0.000000e+00, %4 ], [ %1083, %483 ]
  %503 = phi float [ 0.000000e+00, %4 ], [ %1084, %483 ]
  %504 = phi float [ 0.000000e+00, %4 ], [ %1085, %483 ]
  %505 = phi float [ 0.000000e+00, %4 ], [ %1086, %483 ]
  %506 = phi float [ 0.000000e+00, %4 ], [ %1088, %483 ]
  %507 = phi float [ 0.000000e+00, %4 ], [ %1089, %483 ]
  %508 = phi float [ 0.000000e+00, %4 ], [ %1090, %483 ]
  %509 = phi float [ 0.000000e+00, %4 ], [ %1091, %483 ]
  %510 = phi float [ 0.000000e+00, %4 ], [ %1093, %483 ]
  %511 = phi float [ 0.000000e+00, %4 ], [ %1094, %483 ]
  %512 = phi float [ 0.000000e+00, %4 ], [ %1095, %483 ]
  %513 = phi float [ 0.000000e+00, %4 ], [ %1096, %483 ]
  %514 = phi float [ 0.000000e+00, %4 ], [ %1098, %483 ]
  %515 = phi float [ 0.000000e+00, %4 ], [ %1099, %483 ]
  %516 = phi float [ 0.000000e+00, %4 ], [ %1100, %483 ]
  %517 = phi float [ 0.000000e+00, %4 ], [ %1101, %483 ]
  %518 = icmp samesign ult i64 %indvars.iv, 2, !dbg !35
  %519 = add i32 %484, 1, !dbg !35
  %520 = icmp slt i32 %519, 4, !dbg !35
  %521 = select i1 %520, i32 %519, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %522 = shl i32 %521, 13, !dbg !30
  %523 = sext i32 %522 to i64, !dbg !30
  %524 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %523, !dbg !30
  %525 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %372, !dbg !30
  %526 = ptrtoint ptr addrspace(3) %525 to i64, !dbg !30
  %527 = trunc i64 %526 to i32, !dbg !30
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %527) #1, !dbg !30
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !30
  %530 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !30
  %531 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !30
  %532 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !30
  %533 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %378, !dbg !30
  %534 = ptrtoint ptr addrspace(3) %533 to i64, !dbg !30
  %535 = trunc i64 %534 to i32, !dbg !30
  %536 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %535) #1, !dbg !30
  %537 = extractvalue { i32, i32, i32, i32 } %536, 0, !dbg !30
  %538 = extractvalue { i32, i32, i32, i32 } %536, 1, !dbg !30
  %539 = extractvalue { i32, i32, i32, i32 } %536, 2, !dbg !30
  %540 = extractvalue { i32, i32, i32, i32 } %536, 3, !dbg !30
  %541 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %381, !dbg !30
  %542 = ptrtoint ptr addrspace(3) %541 to i64, !dbg !30
  %543 = trunc i64 %542 to i32, !dbg !30
  %544 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %543) #1, !dbg !30
  %545 = extractvalue { i32, i32, i32, i32 } %544, 0, !dbg !30
  %546 = extractvalue { i32, i32, i32, i32 } %544, 1, !dbg !30
  %547 = extractvalue { i32, i32, i32, i32 } %544, 2, !dbg !30
  %548 = extractvalue { i32, i32, i32, i32 } %544, 3, !dbg !30
  %549 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %386, !dbg !30
  %550 = ptrtoint ptr addrspace(3) %549 to i64, !dbg !30
  %551 = trunc i64 %550 to i32, !dbg !30
  %552 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %551) #1, !dbg !30
  %553 = extractvalue { i32, i32, i32, i32 } %552, 0, !dbg !30
  %554 = extractvalue { i32, i32, i32, i32 } %552, 1, !dbg !30
  %555 = extractvalue { i32, i32, i32, i32 } %552, 2, !dbg !30
  %556 = extractvalue { i32, i32, i32, i32 } %552, 3, !dbg !30
  %557 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %390, !dbg !30
  %558 = ptrtoint ptr addrspace(3) %557 to i64, !dbg !30
  %559 = trunc i64 %558 to i32, !dbg !30
  %560 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %559) #1, !dbg !30
  %561 = extractvalue { i32, i32, i32, i32 } %560, 0, !dbg !30
  %562 = extractvalue { i32, i32, i32, i32 } %560, 1, !dbg !30
  %563 = extractvalue { i32, i32, i32, i32 } %560, 2, !dbg !30
  %564 = extractvalue { i32, i32, i32, i32 } %560, 3, !dbg !30
  %565 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %396, !dbg !30
  %566 = ptrtoint ptr addrspace(3) %565 to i64, !dbg !30
  %567 = trunc i64 %566 to i32, !dbg !30
  %568 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %567) #1, !dbg !30
  %569 = extractvalue { i32, i32, i32, i32 } %568, 0, !dbg !30
  %570 = extractvalue { i32, i32, i32, i32 } %568, 1, !dbg !30
  %571 = extractvalue { i32, i32, i32, i32 } %568, 2, !dbg !30
  %572 = extractvalue { i32, i32, i32, i32 } %568, 3, !dbg !30
  %573 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %399, !dbg !30
  %574 = ptrtoint ptr addrspace(3) %573 to i64, !dbg !30
  %575 = trunc i64 %574 to i32, !dbg !30
  %576 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %575) #1, !dbg !30
  %577 = extractvalue { i32, i32, i32, i32 } %576, 0, !dbg !30
  %578 = extractvalue { i32, i32, i32, i32 } %576, 1, !dbg !30
  %579 = extractvalue { i32, i32, i32, i32 } %576, 2, !dbg !30
  %580 = extractvalue { i32, i32, i32, i32 } %576, 3, !dbg !30
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %403, !dbg !30
  %582 = ptrtoint ptr addrspace(3) %581 to i64, !dbg !30
  %583 = trunc i64 %582 to i32, !dbg !30
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %583) #1, !dbg !30
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !30
  %586 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !30
  %587 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !30
  %588 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !30
  %589 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %407, !dbg !30
  %590 = ptrtoint ptr addrspace(3) %589 to i64, !dbg !30
  %591 = trunc i64 %590 to i32, !dbg !30
  %592 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %591) #1, !dbg !30
  %593 = extractvalue { i32, i32, i32, i32 } %592, 0, !dbg !30
  %594 = extractvalue { i32, i32, i32, i32 } %592, 1, !dbg !30
  %595 = extractvalue { i32, i32, i32, i32 } %592, 2, !dbg !30
  %596 = extractvalue { i32, i32, i32, i32 } %592, 3, !dbg !30
  %597 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %409, !dbg !30
  %598 = ptrtoint ptr addrspace(3) %597 to i64, !dbg !30
  %599 = trunc i64 %598 to i32, !dbg !30
  %600 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %599) #1, !dbg !30
  %601 = extractvalue { i32, i32, i32, i32 } %600, 0, !dbg !30
  %602 = extractvalue { i32, i32, i32, i32 } %600, 1, !dbg !30
  %603 = extractvalue { i32, i32, i32, i32 } %600, 2, !dbg !30
  %604 = extractvalue { i32, i32, i32, i32 } %600, 3, !dbg !30
  %605 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %411, !dbg !30
  %606 = ptrtoint ptr addrspace(3) %605 to i64, !dbg !30
  %607 = trunc i64 %606 to i32, !dbg !30
  %608 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %607) #1, !dbg !30
  %609 = extractvalue { i32, i32, i32, i32 } %608, 0, !dbg !30
  %610 = extractvalue { i32, i32, i32, i32 } %608, 1, !dbg !30
  %611 = extractvalue { i32, i32, i32, i32 } %608, 2, !dbg !30
  %612 = extractvalue { i32, i32, i32, i32 } %608, 3, !dbg !30
  %613 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %413, !dbg !30
  %614 = ptrtoint ptr addrspace(3) %613 to i64, !dbg !30
  %615 = trunc i64 %614 to i32, !dbg !30
  %616 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %615) #1, !dbg !30
  %617 = extractvalue { i32, i32, i32, i32 } %616, 0, !dbg !30
  %618 = extractvalue { i32, i32, i32, i32 } %616, 1, !dbg !30
  %619 = extractvalue { i32, i32, i32, i32 } %616, 2, !dbg !30
  %620 = extractvalue { i32, i32, i32, i32 } %616, 3, !dbg !30
  %621 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %415, !dbg !30
  %622 = ptrtoint ptr addrspace(3) %621 to i64, !dbg !30
  %623 = trunc i64 %622 to i32, !dbg !30
  %624 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %623) #1, !dbg !30
  %625 = extractvalue { i32, i32, i32, i32 } %624, 0, !dbg !30
  %626 = extractvalue { i32, i32, i32, i32 } %624, 1, !dbg !30
  %627 = extractvalue { i32, i32, i32, i32 } %624, 2, !dbg !30
  %628 = extractvalue { i32, i32, i32, i32 } %624, 3, !dbg !30
  %629 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %417, !dbg !30
  %630 = ptrtoint ptr addrspace(3) %629 to i64, !dbg !30
  %631 = trunc i64 %630 to i32, !dbg !30
  %632 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %631) #1, !dbg !30
  %633 = extractvalue { i32, i32, i32, i32 } %632, 0, !dbg !30
  %634 = extractvalue { i32, i32, i32, i32 } %632, 1, !dbg !30
  %635 = extractvalue { i32, i32, i32, i32 } %632, 2, !dbg !30
  %636 = extractvalue { i32, i32, i32, i32 } %632, 3, !dbg !30
  %637 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %419, !dbg !30
  %638 = ptrtoint ptr addrspace(3) %637 to i64, !dbg !30
  %639 = trunc i64 %638 to i32, !dbg !30
  %640 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %639) #1, !dbg !30
  %641 = extractvalue { i32, i32, i32, i32 } %640, 0, !dbg !30
  %642 = extractvalue { i32, i32, i32, i32 } %640, 1, !dbg !30
  %643 = extractvalue { i32, i32, i32, i32 } %640, 2, !dbg !30
  %644 = extractvalue { i32, i32, i32, i32 } %640, 3, !dbg !30
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %524, i64 %421, !dbg !30
  %646 = ptrtoint ptr addrspace(3) %645 to i64, !dbg !30
  %647 = trunc i64 %646 to i32, !dbg !30
  %648 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %647) #1, !dbg !30
  %649 = extractvalue { i32, i32, i32, i32 } %648, 0, !dbg !30
  %650 = extractvalue { i32, i32, i32, i32 } %648, 1, !dbg !30
  %651 = extractvalue { i32, i32, i32, i32 } %648, 2, !dbg !30
  %652 = extractvalue { i32, i32, i32, i32 } %648, 3, !dbg !30
  %653 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %523, !dbg !33
  %654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %428, !dbg !33
  %655 = ptrtoint ptr addrspace(3) %654 to i64, !dbg !33
  %656 = trunc i64 %655 to i32, !dbg !33
  %657 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #1, !dbg !33
  %658 = extractvalue { i32, i32, i32, i32 } %657, 0, !dbg !33
  %659 = extractvalue { i32, i32, i32, i32 } %657, 1, !dbg !33
  %660 = extractvalue { i32, i32, i32, i32 } %657, 2, !dbg !33
  %661 = extractvalue { i32, i32, i32, i32 } %657, 3, !dbg !33
  %662 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %432, !dbg !33
  %663 = ptrtoint ptr addrspace(3) %662 to i64, !dbg !33
  %664 = trunc i64 %663 to i32, !dbg !33
  %665 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %664) #1, !dbg !33
  %666 = extractvalue { i32, i32, i32, i32 } %665, 0, !dbg !33
  %667 = extractvalue { i32, i32, i32, i32 } %665, 1, !dbg !33
  %668 = extractvalue { i32, i32, i32, i32 } %665, 2, !dbg !33
  %669 = extractvalue { i32, i32, i32, i32 } %665, 3, !dbg !33
  %670 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %435, !dbg !33
  %671 = ptrtoint ptr addrspace(3) %670 to i64, !dbg !33
  %672 = trunc i64 %671 to i32, !dbg !33
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %672) #1, !dbg !33
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !33
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !33
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !33
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !33
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %438, !dbg !33
  %679 = ptrtoint ptr addrspace(3) %678 to i64, !dbg !33
  %680 = trunc i64 %679 to i32, !dbg !33
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %680) #1, !dbg !33
  %682 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !33
  %683 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !33
  %684 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !33
  %685 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !33
  %686 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %441, !dbg !33
  %687 = ptrtoint ptr addrspace(3) %686 to i64, !dbg !33
  %688 = trunc i64 %687 to i32, !dbg !33
  %689 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %688) #1, !dbg !33
  %690 = extractvalue { i32, i32, i32, i32 } %689, 0, !dbg !33
  %691 = extractvalue { i32, i32, i32, i32 } %689, 1, !dbg !33
  %692 = extractvalue { i32, i32, i32, i32 } %689, 2, !dbg !33
  %693 = extractvalue { i32, i32, i32, i32 } %689, 3, !dbg !33
  %694 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %443, !dbg !33
  %695 = ptrtoint ptr addrspace(3) %694 to i64, !dbg !33
  %696 = trunc i64 %695 to i32, !dbg !33
  %697 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %696) #1, !dbg !33
  %698 = extractvalue { i32, i32, i32, i32 } %697, 0, !dbg !33
  %699 = extractvalue { i32, i32, i32, i32 } %697, 1, !dbg !33
  %700 = extractvalue { i32, i32, i32, i32 } %697, 2, !dbg !33
  %701 = extractvalue { i32, i32, i32, i32 } %697, 3, !dbg !33
  %702 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %445, !dbg !33
  %703 = ptrtoint ptr addrspace(3) %702 to i64, !dbg !33
  %704 = trunc i64 %703 to i32, !dbg !33
  %705 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %704) #1, !dbg !33
  %706 = extractvalue { i32, i32, i32, i32 } %705, 0, !dbg !33
  %707 = extractvalue { i32, i32, i32, i32 } %705, 1, !dbg !33
  %708 = extractvalue { i32, i32, i32, i32 } %705, 2, !dbg !33
  %709 = extractvalue { i32, i32, i32, i32 } %705, 3, !dbg !33
  %710 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %447, !dbg !33
  %711 = ptrtoint ptr addrspace(3) %710 to i64, !dbg !33
  %712 = trunc i64 %711 to i32, !dbg !33
  %713 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %712) #1, !dbg !33
  %714 = extractvalue { i32, i32, i32, i32 } %713, 0, !dbg !33
  %715 = extractvalue { i32, i32, i32, i32 } %713, 1, !dbg !33
  %716 = extractvalue { i32, i32, i32, i32 } %713, 2, !dbg !33
  %717 = extractvalue { i32, i32, i32, i32 } %713, 3, !dbg !33
  %718 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %450, !dbg !33
  %719 = ptrtoint ptr addrspace(3) %718 to i64, !dbg !33
  %720 = trunc i64 %719 to i32, !dbg !33
  %721 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %720) #1, !dbg !33
  %722 = extractvalue { i32, i32, i32, i32 } %721, 0, !dbg !33
  %723 = extractvalue { i32, i32, i32, i32 } %721, 1, !dbg !33
  %724 = extractvalue { i32, i32, i32, i32 } %721, 2, !dbg !33
  %725 = extractvalue { i32, i32, i32, i32 } %721, 3, !dbg !33
  %726 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %452, !dbg !33
  %727 = ptrtoint ptr addrspace(3) %726 to i64, !dbg !33
  %728 = trunc i64 %727 to i32, !dbg !33
  %729 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %728) #1, !dbg !33
  %730 = extractvalue { i32, i32, i32, i32 } %729, 0, !dbg !33
  %731 = extractvalue { i32, i32, i32, i32 } %729, 1, !dbg !33
  %732 = extractvalue { i32, i32, i32, i32 } %729, 2, !dbg !33
  %733 = extractvalue { i32, i32, i32, i32 } %729, 3, !dbg !33
  %734 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %454, !dbg !33
  %735 = ptrtoint ptr addrspace(3) %734 to i64, !dbg !33
  %736 = trunc i64 %735 to i32, !dbg !33
  %737 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %736) #1, !dbg !33
  %738 = extractvalue { i32, i32, i32, i32 } %737, 0, !dbg !33
  %739 = extractvalue { i32, i32, i32, i32 } %737, 1, !dbg !33
  %740 = extractvalue { i32, i32, i32, i32 } %737, 2, !dbg !33
  %741 = extractvalue { i32, i32, i32, i32 } %737, 3, !dbg !33
  %742 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %456, !dbg !33
  %743 = ptrtoint ptr addrspace(3) %742 to i64, !dbg !33
  %744 = trunc i64 %743 to i32, !dbg !33
  %745 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %744) #1, !dbg !33
  %746 = extractvalue { i32, i32, i32, i32 } %745, 0, !dbg !33
  %747 = extractvalue { i32, i32, i32, i32 } %745, 1, !dbg !33
  %748 = extractvalue { i32, i32, i32, i32 } %745, 2, !dbg !33
  %749 = extractvalue { i32, i32, i32, i32 } %745, 3, !dbg !33
  %750 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %459, !dbg !33
  %751 = ptrtoint ptr addrspace(3) %750 to i64, !dbg !33
  %752 = trunc i64 %751 to i32, !dbg !33
  %753 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %752) #1, !dbg !33
  %754 = extractvalue { i32, i32, i32, i32 } %753, 0, !dbg !33
  %755 = extractvalue { i32, i32, i32, i32 } %753, 1, !dbg !33
  %756 = extractvalue { i32, i32, i32, i32 } %753, 2, !dbg !33
  %757 = extractvalue { i32, i32, i32, i32 } %753, 3, !dbg !33
  %758 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %461, !dbg !33
  %759 = ptrtoint ptr addrspace(3) %758 to i64, !dbg !33
  %760 = trunc i64 %759 to i32, !dbg !33
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %760) #1, !dbg !33
  %762 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !33
  %763 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !33
  %764 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !33
  %765 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !33
  %766 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %463, !dbg !33
  %767 = ptrtoint ptr addrspace(3) %766 to i64, !dbg !33
  %768 = trunc i64 %767 to i32, !dbg !33
  %769 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %768) #1, !dbg !33
  %770 = extractvalue { i32, i32, i32, i32 } %769, 0, !dbg !33
  %771 = extractvalue { i32, i32, i32, i32 } %769, 1, !dbg !33
  %772 = extractvalue { i32, i32, i32, i32 } %769, 2, !dbg !33
  %773 = extractvalue { i32, i32, i32, i32 } %769, 3, !dbg !33
  %774 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %653, i64 %465, !dbg !33
  %775 = ptrtoint ptr addrspace(3) %774 to i64, !dbg !33
  %776 = trunc i64 %775 to i32, !dbg !33
  %777 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %776) #1, !dbg !33
  %778 = extractvalue { i32, i32, i32, i32 } %777, 0, !dbg !33
  %779 = extractvalue { i32, i32, i32, i32 } %777, 1, !dbg !33
  %780 = extractvalue { i32, i32, i32, i32 } %777, 2, !dbg !33
  %781 = extractvalue { i32, i32, i32, i32 } %777, 3, !dbg !33
  %782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %486, float %487, float %488, float %489, i32 %529, i32 %530, i32 %531, i32 %532, i32 %658, i32 %659) #1, !dbg !36
  %783 = extractvalue { float, float, float, float } %782, 0, !dbg !36
  %784 = extractvalue { float, float, float, float } %782, 1, !dbg !36
  %785 = extractvalue { float, float, float, float } %782, 2, !dbg !36
  %786 = extractvalue { float, float, float, float } %782, 3, !dbg !36
  %787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %490, float %491, float %492, float %493, i32 %529, i32 %530, i32 %531, i32 %532, i32 %690, i32 %691) #1, !dbg !36
  %788 = extractvalue { float, float, float, float } %787, 0, !dbg !36
  %789 = extractvalue { float, float, float, float } %787, 1, !dbg !36
  %790 = extractvalue { float, float, float, float } %787, 2, !dbg !36
  %791 = extractvalue { float, float, float, float } %787, 3, !dbg !36
  %792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %494, float %495, float %496, float %497, i32 %529, i32 %530, i32 %531, i32 %532, i32 %722, i32 %723) #1, !dbg !36
  %793 = extractvalue { float, float, float, float } %792, 0, !dbg !36
  %794 = extractvalue { float, float, float, float } %792, 1, !dbg !36
  %795 = extractvalue { float, float, float, float } %792, 2, !dbg !36
  %796 = extractvalue { float, float, float, float } %792, 3, !dbg !36
  %797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %498, float %499, float %500, float %501, i32 %529, i32 %530, i32 %531, i32 %532, i32 %754, i32 %755) #1, !dbg !36
  %798 = extractvalue { float, float, float, float } %797, 0, !dbg !36
  %799 = extractvalue { float, float, float, float } %797, 1, !dbg !36
  %800 = extractvalue { float, float, float, float } %797, 2, !dbg !36
  %801 = extractvalue { float, float, float, float } %797, 3, !dbg !36
  %802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %593, i32 %594, i32 %595, i32 %596, i32 %658, i32 %659) #1, !dbg !36
  %803 = extractvalue { float, float, float, float } %802, 0, !dbg !36
  %804 = extractvalue { float, float, float, float } %802, 1, !dbg !36
  %805 = extractvalue { float, float, float, float } %802, 2, !dbg !36
  %806 = extractvalue { float, float, float, float } %802, 3, !dbg !36
  %807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %506, float %507, float %508, float %509, i32 %593, i32 %594, i32 %595, i32 %596, i32 %690, i32 %691) #1, !dbg !36
  %808 = extractvalue { float, float, float, float } %807, 0, !dbg !36
  %809 = extractvalue { float, float, float, float } %807, 1, !dbg !36
  %810 = extractvalue { float, float, float, float } %807, 2, !dbg !36
  %811 = extractvalue { float, float, float, float } %807, 3, !dbg !36
  %812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %593, i32 %594, i32 %595, i32 %596, i32 %722, i32 %723) #1, !dbg !36
  %813 = extractvalue { float, float, float, float } %812, 0, !dbg !36
  %814 = extractvalue { float, float, float, float } %812, 1, !dbg !36
  %815 = extractvalue { float, float, float, float } %812, 2, !dbg !36
  %816 = extractvalue { float, float, float, float } %812, 3, !dbg !36
  %817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %514, float %515, float %516, float %517, i32 %593, i32 %594, i32 %595, i32 %596, i32 %754, i32 %755) #1, !dbg !36
  %818 = extractvalue { float, float, float, float } %817, 0, !dbg !36
  %819 = extractvalue { float, float, float, float } %817, 1, !dbg !36
  %820 = extractvalue { float, float, float, float } %817, 2, !dbg !36
  %821 = extractvalue { float, float, float, float } %817, 3, !dbg !36
  %822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %783, float %784, float %785, float %786, i32 %537, i32 %538, i32 %539, i32 %540, i32 %660, i32 %661) #1, !dbg !36
  %823 = extractvalue { float, float, float, float } %822, 0, !dbg !36
  %824 = extractvalue { float, float, float, float } %822, 1, !dbg !36
  %825 = extractvalue { float, float, float, float } %822, 2, !dbg !36
  %826 = extractvalue { float, float, float, float } %822, 3, !dbg !36
  %827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %788, float %789, float %790, float %791, i32 %537, i32 %538, i32 %539, i32 %540, i32 %692, i32 %693) #1, !dbg !36
  %828 = extractvalue { float, float, float, float } %827, 0, !dbg !36
  %829 = extractvalue { float, float, float, float } %827, 1, !dbg !36
  %830 = extractvalue { float, float, float, float } %827, 2, !dbg !36
  %831 = extractvalue { float, float, float, float } %827, 3, !dbg !36
  %832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %793, float %794, float %795, float %796, i32 %537, i32 %538, i32 %539, i32 %540, i32 %724, i32 %725) #1, !dbg !36
  %833 = extractvalue { float, float, float, float } %832, 0, !dbg !36
  %834 = extractvalue { float, float, float, float } %832, 1, !dbg !36
  %835 = extractvalue { float, float, float, float } %832, 2, !dbg !36
  %836 = extractvalue { float, float, float, float } %832, 3, !dbg !36
  %837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %798, float %799, float %800, float %801, i32 %537, i32 %538, i32 %539, i32 %540, i32 %756, i32 %757) #1, !dbg !36
  %838 = extractvalue { float, float, float, float } %837, 0, !dbg !36
  %839 = extractvalue { float, float, float, float } %837, 1, !dbg !36
  %840 = extractvalue { float, float, float, float } %837, 2, !dbg !36
  %841 = extractvalue { float, float, float, float } %837, 3, !dbg !36
  %842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %803, float %804, float %805, float %806, i32 %601, i32 %602, i32 %603, i32 %604, i32 %660, i32 %661) #1, !dbg !36
  %843 = extractvalue { float, float, float, float } %842, 0, !dbg !36
  %844 = extractvalue { float, float, float, float } %842, 1, !dbg !36
  %845 = extractvalue { float, float, float, float } %842, 2, !dbg !36
  %846 = extractvalue { float, float, float, float } %842, 3, !dbg !36
  %847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %808, float %809, float %810, float %811, i32 %601, i32 %602, i32 %603, i32 %604, i32 %692, i32 %693) #1, !dbg !36
  %848 = extractvalue { float, float, float, float } %847, 0, !dbg !36
  %849 = extractvalue { float, float, float, float } %847, 1, !dbg !36
  %850 = extractvalue { float, float, float, float } %847, 2, !dbg !36
  %851 = extractvalue { float, float, float, float } %847, 3, !dbg !36
  %852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %813, float %814, float %815, float %816, i32 %601, i32 %602, i32 %603, i32 %604, i32 %724, i32 %725) #1, !dbg !36
  %853 = extractvalue { float, float, float, float } %852, 0, !dbg !36
  %854 = extractvalue { float, float, float, float } %852, 1, !dbg !36
  %855 = extractvalue { float, float, float, float } %852, 2, !dbg !36
  %856 = extractvalue { float, float, float, float } %852, 3, !dbg !36
  %857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %818, float %819, float %820, float %821, i32 %601, i32 %602, i32 %603, i32 %604, i32 %756, i32 %757) #1, !dbg !36
  %858 = extractvalue { float, float, float, float } %857, 0, !dbg !36
  %859 = extractvalue { float, float, float, float } %857, 1, !dbg !36
  %860 = extractvalue { float, float, float, float } %857, 2, !dbg !36
  %861 = extractvalue { float, float, float, float } %857, 3, !dbg !36
  %862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %823, float %824, float %825, float %826, i32 %545, i32 %546, i32 %547, i32 %548, i32 %666, i32 %667) #1, !dbg !36
  %863 = extractvalue { float, float, float, float } %862, 0, !dbg !36
  %864 = extractvalue { float, float, float, float } %862, 1, !dbg !36
  %865 = extractvalue { float, float, float, float } %862, 2, !dbg !36
  %866 = extractvalue { float, float, float, float } %862, 3, !dbg !36
  %867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %828, float %829, float %830, float %831, i32 %545, i32 %546, i32 %547, i32 %548, i32 %698, i32 %699) #1, !dbg !36
  %868 = extractvalue { float, float, float, float } %867, 0, !dbg !36
  %869 = extractvalue { float, float, float, float } %867, 1, !dbg !36
  %870 = extractvalue { float, float, float, float } %867, 2, !dbg !36
  %871 = extractvalue { float, float, float, float } %867, 3, !dbg !36
  %872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %833, float %834, float %835, float %836, i32 %545, i32 %546, i32 %547, i32 %548, i32 %730, i32 %731) #1, !dbg !36
  %873 = extractvalue { float, float, float, float } %872, 0, !dbg !36
  %874 = extractvalue { float, float, float, float } %872, 1, !dbg !36
  %875 = extractvalue { float, float, float, float } %872, 2, !dbg !36
  %876 = extractvalue { float, float, float, float } %872, 3, !dbg !36
  %877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %838, float %839, float %840, float %841, i32 %545, i32 %546, i32 %547, i32 %548, i32 %762, i32 %763) #1, !dbg !36
  %878 = extractvalue { float, float, float, float } %877, 0, !dbg !36
  %879 = extractvalue { float, float, float, float } %877, 1, !dbg !36
  %880 = extractvalue { float, float, float, float } %877, 2, !dbg !36
  %881 = extractvalue { float, float, float, float } %877, 3, !dbg !36
  %882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %843, float %844, float %845, float %846, i32 %609, i32 %610, i32 %611, i32 %612, i32 %666, i32 %667) #1, !dbg !36
  %883 = extractvalue { float, float, float, float } %882, 0, !dbg !36
  %884 = extractvalue { float, float, float, float } %882, 1, !dbg !36
  %885 = extractvalue { float, float, float, float } %882, 2, !dbg !36
  %886 = extractvalue { float, float, float, float } %882, 3, !dbg !36
  %887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %848, float %849, float %850, float %851, i32 %609, i32 %610, i32 %611, i32 %612, i32 %698, i32 %699) #1, !dbg !36
  %888 = extractvalue { float, float, float, float } %887, 0, !dbg !36
  %889 = extractvalue { float, float, float, float } %887, 1, !dbg !36
  %890 = extractvalue { float, float, float, float } %887, 2, !dbg !36
  %891 = extractvalue { float, float, float, float } %887, 3, !dbg !36
  %892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %853, float %854, float %855, float %856, i32 %609, i32 %610, i32 %611, i32 %612, i32 %730, i32 %731) #1, !dbg !36
  %893 = extractvalue { float, float, float, float } %892, 0, !dbg !36
  %894 = extractvalue { float, float, float, float } %892, 1, !dbg !36
  %895 = extractvalue { float, float, float, float } %892, 2, !dbg !36
  %896 = extractvalue { float, float, float, float } %892, 3, !dbg !36
  %897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %858, float %859, float %860, float %861, i32 %609, i32 %610, i32 %611, i32 %612, i32 %762, i32 %763) #1, !dbg !36
  %898 = extractvalue { float, float, float, float } %897, 0, !dbg !36
  %899 = extractvalue { float, float, float, float } %897, 1, !dbg !36
  %900 = extractvalue { float, float, float, float } %897, 2, !dbg !36
  %901 = extractvalue { float, float, float, float } %897, 3, !dbg !36
  %902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %863, float %864, float %865, float %866, i32 %553, i32 %554, i32 %555, i32 %556, i32 %668, i32 %669) #1, !dbg !36
  %903 = extractvalue { float, float, float, float } %902, 0, !dbg !36
  %904 = extractvalue { float, float, float, float } %902, 1, !dbg !36
  %905 = extractvalue { float, float, float, float } %902, 2, !dbg !36
  %906 = extractvalue { float, float, float, float } %902, 3, !dbg !36
  %907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %868, float %869, float %870, float %871, i32 %553, i32 %554, i32 %555, i32 %556, i32 %700, i32 %701) #1, !dbg !36
  %908 = extractvalue { float, float, float, float } %907, 0, !dbg !36
  %909 = extractvalue { float, float, float, float } %907, 1, !dbg !36
  %910 = extractvalue { float, float, float, float } %907, 2, !dbg !36
  %911 = extractvalue { float, float, float, float } %907, 3, !dbg !36
  %912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %873, float %874, float %875, float %876, i32 %553, i32 %554, i32 %555, i32 %556, i32 %732, i32 %733) #1, !dbg !36
  %913 = extractvalue { float, float, float, float } %912, 0, !dbg !36
  %914 = extractvalue { float, float, float, float } %912, 1, !dbg !36
  %915 = extractvalue { float, float, float, float } %912, 2, !dbg !36
  %916 = extractvalue { float, float, float, float } %912, 3, !dbg !36
  %917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %878, float %879, float %880, float %881, i32 %553, i32 %554, i32 %555, i32 %556, i32 %764, i32 %765) #1, !dbg !36
  %918 = extractvalue { float, float, float, float } %917, 0, !dbg !36
  %919 = extractvalue { float, float, float, float } %917, 1, !dbg !36
  %920 = extractvalue { float, float, float, float } %917, 2, !dbg !36
  %921 = extractvalue { float, float, float, float } %917, 3, !dbg !36
  %922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %883, float %884, float %885, float %886, i32 %617, i32 %618, i32 %619, i32 %620, i32 %668, i32 %669) #1, !dbg !36
  %923 = extractvalue { float, float, float, float } %922, 0, !dbg !36
  %924 = extractvalue { float, float, float, float } %922, 1, !dbg !36
  %925 = extractvalue { float, float, float, float } %922, 2, !dbg !36
  %926 = extractvalue { float, float, float, float } %922, 3, !dbg !36
  %927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %888, float %889, float %890, float %891, i32 %617, i32 %618, i32 %619, i32 %620, i32 %700, i32 %701) #1, !dbg !36
  %928 = extractvalue { float, float, float, float } %927, 0, !dbg !36
  %929 = extractvalue { float, float, float, float } %927, 1, !dbg !36
  %930 = extractvalue { float, float, float, float } %927, 2, !dbg !36
  %931 = extractvalue { float, float, float, float } %927, 3, !dbg !36
  %932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %893, float %894, float %895, float %896, i32 %617, i32 %618, i32 %619, i32 %620, i32 %732, i32 %733) #1, !dbg !36
  %933 = extractvalue { float, float, float, float } %932, 0, !dbg !36
  %934 = extractvalue { float, float, float, float } %932, 1, !dbg !36
  %935 = extractvalue { float, float, float, float } %932, 2, !dbg !36
  %936 = extractvalue { float, float, float, float } %932, 3, !dbg !36
  %937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %898, float %899, float %900, float %901, i32 %617, i32 %618, i32 %619, i32 %620, i32 %764, i32 %765) #1, !dbg !36
  %938 = extractvalue { float, float, float, float } %937, 0, !dbg !36
  %939 = extractvalue { float, float, float, float } %937, 1, !dbg !36
  %940 = extractvalue { float, float, float, float } %937, 2, !dbg !36
  %941 = extractvalue { float, float, float, float } %937, 3, !dbg !36
  %942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %903, float %904, float %905, float %906, i32 %561, i32 %562, i32 %563, i32 %564, i32 %674, i32 %675) #1, !dbg !36
  %943 = extractvalue { float, float, float, float } %942, 0, !dbg !36
  %944 = extractvalue { float, float, float, float } %942, 1, !dbg !36
  %945 = extractvalue { float, float, float, float } %942, 2, !dbg !36
  %946 = extractvalue { float, float, float, float } %942, 3, !dbg !36
  %947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %908, float %909, float %910, float %911, i32 %561, i32 %562, i32 %563, i32 %564, i32 %706, i32 %707) #1, !dbg !36
  %948 = extractvalue { float, float, float, float } %947, 0, !dbg !36
  %949 = extractvalue { float, float, float, float } %947, 1, !dbg !36
  %950 = extractvalue { float, float, float, float } %947, 2, !dbg !36
  %951 = extractvalue { float, float, float, float } %947, 3, !dbg !36
  %952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %913, float %914, float %915, float %916, i32 %561, i32 %562, i32 %563, i32 %564, i32 %738, i32 %739) #1, !dbg !36
  %953 = extractvalue { float, float, float, float } %952, 0, !dbg !36
  %954 = extractvalue { float, float, float, float } %952, 1, !dbg !36
  %955 = extractvalue { float, float, float, float } %952, 2, !dbg !36
  %956 = extractvalue { float, float, float, float } %952, 3, !dbg !36
  %957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %918, float %919, float %920, float %921, i32 %561, i32 %562, i32 %563, i32 %564, i32 %770, i32 %771) #1, !dbg !36
  %958 = extractvalue { float, float, float, float } %957, 0, !dbg !36
  %959 = extractvalue { float, float, float, float } %957, 1, !dbg !36
  %960 = extractvalue { float, float, float, float } %957, 2, !dbg !36
  %961 = extractvalue { float, float, float, float } %957, 3, !dbg !36
  %962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %923, float %924, float %925, float %926, i32 %625, i32 %626, i32 %627, i32 %628, i32 %674, i32 %675) #1, !dbg !36
  %963 = extractvalue { float, float, float, float } %962, 0, !dbg !36
  %964 = extractvalue { float, float, float, float } %962, 1, !dbg !36
  %965 = extractvalue { float, float, float, float } %962, 2, !dbg !36
  %966 = extractvalue { float, float, float, float } %962, 3, !dbg !36
  %967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %928, float %929, float %930, float %931, i32 %625, i32 %626, i32 %627, i32 %628, i32 %706, i32 %707) #1, !dbg !36
  %968 = extractvalue { float, float, float, float } %967, 0, !dbg !36
  %969 = extractvalue { float, float, float, float } %967, 1, !dbg !36
  %970 = extractvalue { float, float, float, float } %967, 2, !dbg !36
  %971 = extractvalue { float, float, float, float } %967, 3, !dbg !36
  %972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %933, float %934, float %935, float %936, i32 %625, i32 %626, i32 %627, i32 %628, i32 %738, i32 %739) #1, !dbg !36
  %973 = extractvalue { float, float, float, float } %972, 0, !dbg !36
  %974 = extractvalue { float, float, float, float } %972, 1, !dbg !36
  %975 = extractvalue { float, float, float, float } %972, 2, !dbg !36
  %976 = extractvalue { float, float, float, float } %972, 3, !dbg !36
  %977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %938, float %939, float %940, float %941, i32 %625, i32 %626, i32 %627, i32 %628, i32 %770, i32 %771) #1, !dbg !36
  %978 = extractvalue { float, float, float, float } %977, 0, !dbg !36
  %979 = extractvalue { float, float, float, float } %977, 1, !dbg !36
  %980 = extractvalue { float, float, float, float } %977, 2, !dbg !36
  %981 = extractvalue { float, float, float, float } %977, 3, !dbg !36
  %982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %943, float %944, float %945, float %946, i32 %569, i32 %570, i32 %571, i32 %572, i32 %676, i32 %677) #1, !dbg !36
  %983 = extractvalue { float, float, float, float } %982, 0, !dbg !36
  %984 = extractvalue { float, float, float, float } %982, 1, !dbg !36
  %985 = extractvalue { float, float, float, float } %982, 2, !dbg !36
  %986 = extractvalue { float, float, float, float } %982, 3, !dbg !36
  %987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %948, float %949, float %950, float %951, i32 %569, i32 %570, i32 %571, i32 %572, i32 %708, i32 %709) #1, !dbg !36
  %988 = extractvalue { float, float, float, float } %987, 0, !dbg !36
  %989 = extractvalue { float, float, float, float } %987, 1, !dbg !36
  %990 = extractvalue { float, float, float, float } %987, 2, !dbg !36
  %991 = extractvalue { float, float, float, float } %987, 3, !dbg !36
  %992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %953, float %954, float %955, float %956, i32 %569, i32 %570, i32 %571, i32 %572, i32 %740, i32 %741) #1, !dbg !36
  %993 = extractvalue { float, float, float, float } %992, 0, !dbg !36
  %994 = extractvalue { float, float, float, float } %992, 1, !dbg !36
  %995 = extractvalue { float, float, float, float } %992, 2, !dbg !36
  %996 = extractvalue { float, float, float, float } %992, 3, !dbg !36
  %997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %958, float %959, float %960, float %961, i32 %569, i32 %570, i32 %571, i32 %572, i32 %772, i32 %773) #1, !dbg !36
  %998 = extractvalue { float, float, float, float } %997, 0, !dbg !36
  %999 = extractvalue { float, float, float, float } %997, 1, !dbg !36
  %1000 = extractvalue { float, float, float, float } %997, 2, !dbg !36
  %1001 = extractvalue { float, float, float, float } %997, 3, !dbg !36
  %1002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %963, float %964, float %965, float %966, i32 %633, i32 %634, i32 %635, i32 %636, i32 %676, i32 %677) #1, !dbg !36
  %1003 = extractvalue { float, float, float, float } %1002, 0, !dbg !36
  %1004 = extractvalue { float, float, float, float } %1002, 1, !dbg !36
  %1005 = extractvalue { float, float, float, float } %1002, 2, !dbg !36
  %1006 = extractvalue { float, float, float, float } %1002, 3, !dbg !36
  %1007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %968, float %969, float %970, float %971, i32 %633, i32 %634, i32 %635, i32 %636, i32 %708, i32 %709) #1, !dbg !36
  %1008 = extractvalue { float, float, float, float } %1007, 0, !dbg !36
  %1009 = extractvalue { float, float, float, float } %1007, 1, !dbg !36
  %1010 = extractvalue { float, float, float, float } %1007, 2, !dbg !36
  %1011 = extractvalue { float, float, float, float } %1007, 3, !dbg !36
  %1012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %973, float %974, float %975, float %976, i32 %633, i32 %634, i32 %635, i32 %636, i32 %740, i32 %741) #1, !dbg !36
  %1013 = extractvalue { float, float, float, float } %1012, 0, !dbg !36
  %1014 = extractvalue { float, float, float, float } %1012, 1, !dbg !36
  %1015 = extractvalue { float, float, float, float } %1012, 2, !dbg !36
  %1016 = extractvalue { float, float, float, float } %1012, 3, !dbg !36
  %1017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %978, float %979, float %980, float %981, i32 %633, i32 %634, i32 %635, i32 %636, i32 %772, i32 %773) #1, !dbg !36
  %1018 = extractvalue { float, float, float, float } %1017, 0, !dbg !36
  %1019 = extractvalue { float, float, float, float } %1017, 1, !dbg !36
  %1020 = extractvalue { float, float, float, float } %1017, 2, !dbg !36
  %1021 = extractvalue { float, float, float, float } %1017, 3, !dbg !36
  %1022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %983, float %984, float %985, float %986, i32 %577, i32 %578, i32 %579, i32 %580, i32 %682, i32 %683) #1, !dbg !36
  %1023 = extractvalue { float, float, float, float } %1022, 0, !dbg !36
  %1024 = extractvalue { float, float, float, float } %1022, 1, !dbg !36
  %1025 = extractvalue { float, float, float, float } %1022, 2, !dbg !36
  %1026 = extractvalue { float, float, float, float } %1022, 3, !dbg !36
  %1027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %988, float %989, float %990, float %991, i32 %577, i32 %578, i32 %579, i32 %580, i32 %714, i32 %715) #1, !dbg !36
  %1028 = extractvalue { float, float, float, float } %1027, 0, !dbg !36
  %1029 = extractvalue { float, float, float, float } %1027, 1, !dbg !36
  %1030 = extractvalue { float, float, float, float } %1027, 2, !dbg !36
  %1031 = extractvalue { float, float, float, float } %1027, 3, !dbg !36
  %1032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %993, float %994, float %995, float %996, i32 %577, i32 %578, i32 %579, i32 %580, i32 %746, i32 %747) #1, !dbg !36
  %1033 = extractvalue { float, float, float, float } %1032, 0, !dbg !36
  %1034 = extractvalue { float, float, float, float } %1032, 1, !dbg !36
  %1035 = extractvalue { float, float, float, float } %1032, 2, !dbg !36
  %1036 = extractvalue { float, float, float, float } %1032, 3, !dbg !36
  %1037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %998, float %999, float %1000, float %1001, i32 %577, i32 %578, i32 %579, i32 %580, i32 %778, i32 %779) #1, !dbg !36
  %1038 = extractvalue { float, float, float, float } %1037, 0, !dbg !36
  %1039 = extractvalue { float, float, float, float } %1037, 1, !dbg !36
  %1040 = extractvalue { float, float, float, float } %1037, 2, !dbg !36
  %1041 = extractvalue { float, float, float, float } %1037, 3, !dbg !36
  %1042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1003, float %1004, float %1005, float %1006, i32 %641, i32 %642, i32 %643, i32 %644, i32 %682, i32 %683) #1, !dbg !36
  %1043 = extractvalue { float, float, float, float } %1042, 0, !dbg !36
  %1044 = extractvalue { float, float, float, float } %1042, 1, !dbg !36
  %1045 = extractvalue { float, float, float, float } %1042, 2, !dbg !36
  %1046 = extractvalue { float, float, float, float } %1042, 3, !dbg !36
  %1047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1008, float %1009, float %1010, float %1011, i32 %641, i32 %642, i32 %643, i32 %644, i32 %714, i32 %715) #1, !dbg !36
  %1048 = extractvalue { float, float, float, float } %1047, 0, !dbg !36
  %1049 = extractvalue { float, float, float, float } %1047, 1, !dbg !36
  %1050 = extractvalue { float, float, float, float } %1047, 2, !dbg !36
  %1051 = extractvalue { float, float, float, float } %1047, 3, !dbg !36
  %1052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1013, float %1014, float %1015, float %1016, i32 %641, i32 %642, i32 %643, i32 %644, i32 %746, i32 %747) #1, !dbg !36
  %1053 = extractvalue { float, float, float, float } %1052, 0, !dbg !36
  %1054 = extractvalue { float, float, float, float } %1052, 1, !dbg !36
  %1055 = extractvalue { float, float, float, float } %1052, 2, !dbg !36
  %1056 = extractvalue { float, float, float, float } %1052, 3, !dbg !36
  %1057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1018, float %1019, float %1020, float %1021, i32 %641, i32 %642, i32 %643, i32 %644, i32 %778, i32 %779) #1, !dbg !36
  %1058 = extractvalue { float, float, float, float } %1057, 0, !dbg !36
  %1059 = extractvalue { float, float, float, float } %1057, 1, !dbg !36
  %1060 = extractvalue { float, float, float, float } %1057, 2, !dbg !36
  %1061 = extractvalue { float, float, float, float } %1057, 3, !dbg !36
  %1062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1023, float %1024, float %1025, float %1026, i32 %585, i32 %586, i32 %587, i32 %588, i32 %684, i32 %685) #1, !dbg !36
  %1063 = extractvalue { float, float, float, float } %1062, 0, !dbg !36
  %1064 = extractvalue { float, float, float, float } %1062, 1, !dbg !36
  %1065 = extractvalue { float, float, float, float } %1062, 2, !dbg !36
  %1066 = extractvalue { float, float, float, float } %1062, 3, !dbg !36
  %1067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1028, float %1029, float %1030, float %1031, i32 %585, i32 %586, i32 %587, i32 %588, i32 %716, i32 %717) #1, !dbg !36
  %1068 = extractvalue { float, float, float, float } %1067, 0, !dbg !36
  %1069 = extractvalue { float, float, float, float } %1067, 1, !dbg !36
  %1070 = extractvalue { float, float, float, float } %1067, 2, !dbg !36
  %1071 = extractvalue { float, float, float, float } %1067, 3, !dbg !36
  %1072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1033, float %1034, float %1035, float %1036, i32 %585, i32 %586, i32 %587, i32 %588, i32 %748, i32 %749) #1, !dbg !36
  %1073 = extractvalue { float, float, float, float } %1072, 0, !dbg !36
  %1074 = extractvalue { float, float, float, float } %1072, 1, !dbg !36
  %1075 = extractvalue { float, float, float, float } %1072, 2, !dbg !36
  %1076 = extractvalue { float, float, float, float } %1072, 3, !dbg !36
  %1077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1038, float %1039, float %1040, float %1041, i32 %585, i32 %586, i32 %587, i32 %588, i32 %780, i32 %781) #1, !dbg !36
  %1078 = extractvalue { float, float, float, float } %1077, 0, !dbg !36
  %1079 = extractvalue { float, float, float, float } %1077, 1, !dbg !36
  %1080 = extractvalue { float, float, float, float } %1077, 2, !dbg !36
  %1081 = extractvalue { float, float, float, float } %1077, 3, !dbg !36
  %1082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1043, float %1044, float %1045, float %1046, i32 %649, i32 %650, i32 %651, i32 %652, i32 %684, i32 %685) #1, !dbg !36
  %1083 = extractvalue { float, float, float, float } %1082, 0, !dbg !36
  %1084 = extractvalue { float, float, float, float } %1082, 1, !dbg !36
  %1085 = extractvalue { float, float, float, float } %1082, 2, !dbg !36
  %1086 = extractvalue { float, float, float, float } %1082, 3, !dbg !36
  %1087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1048, float %1049, float %1050, float %1051, i32 %649, i32 %650, i32 %651, i32 %652, i32 %716, i32 %717) #1, !dbg !36
  %1088 = extractvalue { float, float, float, float } %1087, 0, !dbg !36
  %1089 = extractvalue { float, float, float, float } %1087, 1, !dbg !36
  %1090 = extractvalue { float, float, float, float } %1087, 2, !dbg !36
  %1091 = extractvalue { float, float, float, float } %1087, 3, !dbg !36
  %1092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1053, float %1054, float %1055, float %1056, i32 %649, i32 %650, i32 %651, i32 %652, i32 %748, i32 %749) #1, !dbg !36
  %1093 = extractvalue { float, float, float, float } %1092, 0, !dbg !36
  %1094 = extractvalue { float, float, float, float } %1092, 1, !dbg !36
  %1095 = extractvalue { float, float, float, float } %1092, 2, !dbg !36
  %1096 = extractvalue { float, float, float, float } %1092, 3, !dbg !36
  %1097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1058, float %1059, float %1060, float %1061, i32 %649, i32 %650, i32 %651, i32 %652, i32 %780, i32 %781) #1, !dbg !36
  %1098 = extractvalue { float, float, float, float } %1097, 0, !dbg !36
  %1099 = extractvalue { float, float, float, float } %1097, 1, !dbg !36
  %1100 = extractvalue { float, float, float, float } %1097, 2, !dbg !36
  %1101 = extractvalue { float, float, float, float } %1097, 3, !dbg !36
  %1102 = add i32 %485, 1, !dbg !35
  %1103 = icmp slt i32 %1102, 4, !dbg !35
  %1104 = select i1 %1103, i32 %1102, i32 0, !dbg !35
  %1105 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1106 = add nuw nsw i64 %1105, %466
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %1106, !dbg !29
  %gep156 = getelementptr bfloat, ptr addrspace(1) %invariant.gep155, i64 %1106, !dbg !29
  %gep158 = getelementptr bfloat, ptr addrspace(1) %invariant.gep157, i64 %1106, !dbg !29
  %gep160 = getelementptr bfloat, ptr addrspace(1) %invariant.gep159, i64 %1106, !dbg !29
  %gep162 = getelementptr bfloat, ptr addrspace(1) %invariant.gep161, i64 %1106, !dbg !29
  %gep164 = getelementptr bfloat, ptr addrspace(1) %invariant.gep163, i64 %1106, !dbg !29
  %gep166 = getelementptr bfloat, ptr addrspace(1) %invariant.gep165, i64 %1106, !dbg !29
  %gep168 = getelementptr bfloat, ptr addrspace(1) %invariant.gep167, i64 %1106, !dbg !29
  %1107 = shl i32 %1104, 13, !dbg !30
  %1108 = sext i32 %1107 to i64, !dbg !30
  %1109 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %1108, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %114, !dbg !30
  %1111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %117, !dbg !30
  %1112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %120, !dbg !30
  %1113 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %123, !dbg !30
  %1114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %126, !dbg !30
  %1115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %129, !dbg !30
  %1116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %132, !dbg !30
  %1117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1109, i64 %135, !dbg !30
  %1118 = select i1 %518, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1110, ptr addrspace(1) %gep, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1111, ptr addrspace(1) %gep156, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1112, ptr addrspace(1) %gep158, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1113, ptr addrspace(1) %gep160, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1114, ptr addrspace(1) %gep162, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1115, ptr addrspace(1) %gep164, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1116, ptr addrspace(1) %gep166, i32 %1118) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1117, ptr addrspace(1) %gep168, i32 %1118) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep170 = getelementptr bfloat, ptr addrspace(1) %invariant.gep169, i64 %1106, !dbg !32
  %gep172 = getelementptr bfloat, ptr addrspace(1) %invariant.gep171, i64 %1106, !dbg !32
  %gep174 = getelementptr bfloat, ptr addrspace(1) %invariant.gep173, i64 %1106, !dbg !32
  %gep176 = getelementptr bfloat, ptr addrspace(1) %invariant.gep175, i64 %1106, !dbg !32
  %gep178 = getelementptr bfloat, ptr addrspace(1) %invariant.gep177, i64 %1106, !dbg !32
  %gep180 = getelementptr bfloat, ptr addrspace(1) %invariant.gep179, i64 %1106, !dbg !32
  %gep182 = getelementptr bfloat, ptr addrspace(1) %invariant.gep181, i64 %1106, !dbg !32
  %gep184 = getelementptr bfloat, ptr addrspace(1) %invariant.gep183, i64 %1106, !dbg !32
  %1119 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %1108, !dbg !33
  %1120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %114, !dbg !33
  %1121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %117, !dbg !33
  %1122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %120, !dbg !33
  %1123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %123, !dbg !33
  %1124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %126, !dbg !33
  %1125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %129, !dbg !33
  %1126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %132, !dbg !33
  %1127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1119, i64 %135, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1120, ptr addrspace(1) %gep170, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1121, ptr addrspace(1) %gep172, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1122, ptr addrspace(1) %gep174, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1123, ptr addrspace(1) %gep176, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1124, ptr addrspace(1) %gep178, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1125, ptr addrspace(1) %gep180, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1126, ptr addrspace(1) %gep182, i32 %1118) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1127, ptr addrspace(1) %gep184, i32 %1118) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !35
  br i1 %exitcond.not, label %1128, label %483, !dbg !35

1128:                                             ; preds = %483
  %1129 = or disjoint i32 %40, %31, !dbg !22
  %1130 = lshr i32 %15, 3, !dbg !19
  %1131 = and i32 %1130, 15, !dbg !19
  %1132 = or disjoint i32 %1131, %14, !dbg !20
  %1133 = or disjoint i32 %1132, 48, !dbg !20
  %1134 = or disjoint i32 %1132, 32, !dbg !20
  %1135 = or disjoint i32 %1132, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1136 = icmp slt i32 %1132, 77, !dbg !38
  %1137 = icmp slt i32 %1135, 77, !dbg !38
  %1138 = icmp slt i32 %1134, 77, !dbg !38
  %1139 = icmp slt i32 %1133, 77, !dbg !38
  %1140 = icmp slt i32 %1129, 3072, !dbg !39
  %1141 = and i1 %1136, %1140, !dbg !40
  %1142 = and i1 %1137, %1140, !dbg !40
  %1143 = and i1 %1138, %1140, !dbg !40
  %1144 = and i1 %1139, %1140, !dbg !40
  %1145 = mul i32 %1132, 3072, !dbg !41
  %1146 = mul i32 %1135, 3072, !dbg !41
  %1147 = mul i32 %1134, 3072, !dbg !41
  %1148 = mul i32 %1133, 3072, !dbg !41
  %1149 = add i32 %1145, %1129, !dbg !42
  %1150 = add i32 %1146, %1129, !dbg !42
  %1151 = add i32 %1147, %1129, !dbg !42
  %1152 = add i32 %1148, %1129, !dbg !42
  %1153 = sext i32 %1149 to i64, !dbg !43
  %1154 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1153, !dbg !43
  %1155 = sext i32 %1150 to i64, !dbg !43
  %1156 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1155, !dbg !43
  %1157 = sext i32 %1151 to i64, !dbg !43
  %1158 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1157, !dbg !43
  %1159 = sext i32 %1152 to i64, !dbg !43
  %1160 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1159, !dbg !43
  %1161 = fptrunc float %1063 to bfloat, !dbg !44
  %1162 = fptrunc float %1064 to bfloat, !dbg !44
  %1163 = fptrunc float %1065 to bfloat, !dbg !44
  %1164 = fptrunc float %1066 to bfloat, !dbg !44
  %1165 = fptrunc float %1068 to bfloat, !dbg !44
  %1166 = fptrunc float %1069 to bfloat, !dbg !44
  %1167 = fptrunc float %1070 to bfloat, !dbg !44
  %1168 = fptrunc float %1071 to bfloat, !dbg !44
  %1169 = fptrunc float %1073 to bfloat, !dbg !44
  %1170 = fptrunc float %1074 to bfloat, !dbg !44
  %1171 = fptrunc float %1075 to bfloat, !dbg !44
  %1172 = fptrunc float %1076 to bfloat, !dbg !44
  %1173 = fptrunc float %1078 to bfloat, !dbg !44
  %1174 = fptrunc float %1079 to bfloat, !dbg !44
  %1175 = fptrunc float %1080 to bfloat, !dbg !44
  %1176 = fptrunc float %1081 to bfloat, !dbg !44
  %1177 = fptrunc float %1083 to bfloat, !dbg !44
  %1178 = fptrunc float %1084 to bfloat, !dbg !44
  %1179 = fptrunc float %1085 to bfloat, !dbg !44
  %1180 = fptrunc float %1086 to bfloat, !dbg !44
  %1181 = fptrunc float %1088 to bfloat, !dbg !44
  %1182 = fptrunc float %1089 to bfloat, !dbg !44
  %1183 = fptrunc float %1090 to bfloat, !dbg !44
  %1184 = fptrunc float %1091 to bfloat, !dbg !44
  %1185 = fptrunc float %1093 to bfloat, !dbg !44
  %1186 = fptrunc float %1094 to bfloat, !dbg !44
  %1187 = fptrunc float %1095 to bfloat, !dbg !44
  %1188 = fptrunc float %1096 to bfloat, !dbg !44
  %1189 = fptrunc float %1098 to bfloat, !dbg !44
  %1190 = fptrunc float %1099 to bfloat, !dbg !44
  %1191 = fptrunc float %1100 to bfloat, !dbg !44
  %1192 = fptrunc float %1101 to bfloat, !dbg !44
  %1193 = shl i32 %15, 1, !dbg !44
  %1194 = and i32 %1193, 6, !dbg !44
  %1195 = shl i32 %15, 4, !dbg !44
  %1196 = and i32 %1195, 192, !dbg !44
  %1197 = or disjoint i32 %1196, %1194, !dbg !44
  %1198 = shl i32 %15, 4, !dbg !44
  %1199 = and i32 %1198, 1280, !dbg !44
  %1200 = or disjoint i32 %1199, %1197, !dbg !44
  %1201 = or disjoint i32 %1200, %424, !dbg !44
  %1202 = and i32 %26, 1016, !dbg !44
  %1203 = lshr i32 %1200, 3, !dbg !44
  %1204 = add nuw nsw i32 %1203, %1201, !dbg !44
  %1205 = zext nneg i32 %1204 to i64, !dbg !44
  %1206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1205, !dbg !44
  %1207 = bitcast bfloat %1161 to i16, !dbg !44
  %1208 = bitcast bfloat %1162 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1206, i16 %1207, i16 %1208, i1 true) #1, !dbg !44
  %1209 = or disjoint i32 %1201, 512, !dbg !44
  %1210 = lshr i32 %1209, 3, !dbg !44
  %1211 = and i32 %1210, 536870904, !dbg !44
  %1212 = add nuw nsw i32 %1211, %1209, !dbg !44
  %1213 = zext nneg i32 %1212 to i64, !dbg !44
  %1214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1213, !dbg !44
  %1215 = bitcast bfloat %1163 to i16, !dbg !44
  %1216 = bitcast bfloat %1164 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1214, i16 %1215, i16 %1216, i1 true) #1, !dbg !44
  %1217 = or disjoint i32 %1201, 16, !dbg !44
  %1218 = add nuw nsw i32 %1217, %1203, !dbg !44
  %1219 = zext nneg i32 %1218 to i64, !dbg !44
  %1220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1219, !dbg !44
  %1221 = bitcast bfloat %1165 to i16, !dbg !44
  %1222 = bitcast bfloat %1166 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1220, i16 %1221, i16 %1222, i1 true) #1, !dbg !44
  %1223 = or disjoint i32 %1201, 528, !dbg !44
  %1224 = lshr i32 %1223, 3, !dbg !44
  %1225 = and i32 %1224, 536870904, !dbg !44
  %1226 = add nuw nsw i32 %1225, %1223, !dbg !44
  %1227 = zext nneg i32 %1226 to i64, !dbg !44
  %1228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1227, !dbg !44
  %1229 = bitcast bfloat %1167 to i16, !dbg !44
  %1230 = bitcast bfloat %1168 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1228, i16 %1229, i16 %1230, i1 true) #1, !dbg !44
  %1231 = or disjoint i32 %1201, 32, !dbg !44
  %1232 = add nuw nsw i32 %1231, %1203, !dbg !44
  %1233 = zext nneg i32 %1232 to i64, !dbg !44
  %1234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1233, !dbg !44
  %1235 = bitcast bfloat %1169 to i16, !dbg !44
  %1236 = bitcast bfloat %1170 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1234, i16 %1235, i16 %1236, i1 true) #1, !dbg !44
  %1237 = or disjoint i32 %1201, 544, !dbg !44
  %1238 = lshr i32 %1237, 3, !dbg !44
  %1239 = and i32 %1238, 536870904, !dbg !44
  %1240 = add nuw nsw i32 %1239, %1237, !dbg !44
  %1241 = zext nneg i32 %1240 to i64, !dbg !44
  %1242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1241, !dbg !44
  %1243 = bitcast bfloat %1171 to i16, !dbg !44
  %1244 = bitcast bfloat %1172 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1242, i16 %1243, i16 %1244, i1 true) #1, !dbg !44
  %1245 = or disjoint i32 %1201, 48, !dbg !44
  %1246 = add nuw nsw i32 %1245, %1203, !dbg !44
  %1247 = zext nneg i32 %1246 to i64, !dbg !44
  %1248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1247, !dbg !44
  %1249 = bitcast bfloat %1173 to i16, !dbg !44
  %1250 = bitcast bfloat %1174 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1248, i16 %1249, i16 %1250, i1 true) #1, !dbg !44
  %1251 = or disjoint i32 %1201, 560, !dbg !44
  %1252 = lshr i32 %1251, 3, !dbg !44
  %1253 = and i32 %1252, 536870904, !dbg !44
  %1254 = add nuw nsw i32 %1253, %1251, !dbg !44
  %1255 = zext nneg i32 %1254 to i64, !dbg !44
  %1256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1255, !dbg !44
  %1257 = bitcast bfloat %1175 to i16, !dbg !44
  %1258 = bitcast bfloat %1176 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1256, i16 %1257, i16 %1258, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1259 = and i32 %15, 120, !dbg !44
  %1260 = add nuw nsw i32 %1202, %1259, !dbg !44
  %1261 = zext nneg i32 %1260 to i64, !dbg !44
  %1262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1261, !dbg !44
  %1263 = load <4 x i32>, ptr addrspace(3) %1262, align 16, !dbg !44
  %1264 = or disjoint i32 %1202, 1024, !dbg !44
  %1265 = lshr exact i32 %1264, 3, !dbg !44
  %1266 = and i32 %1265, 248, !dbg !44
  %1267 = add nuw nsw i32 %1266, %1264, !dbg !44
  %1268 = zext nneg i32 %1267 to i64, !dbg !44
  %1269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1268, !dbg !44
  %1270 = load <4 x i32>, ptr addrspace(3) %1269, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1271 = bitcast bfloat %1177 to i16, !dbg !44
  %1272 = bitcast bfloat %1178 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1206, i16 %1271, i16 %1272, i1 true) #1, !dbg !44
  %1273 = bitcast bfloat %1179 to i16, !dbg !44
  %1274 = bitcast bfloat %1180 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1214, i16 %1273, i16 %1274, i1 true) #1, !dbg !44
  %1275 = bitcast bfloat %1181 to i16, !dbg !44
  %1276 = bitcast bfloat %1182 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1220, i16 %1275, i16 %1276, i1 true) #1, !dbg !44
  %1277 = bitcast bfloat %1183 to i16, !dbg !44
  %1278 = bitcast bfloat %1184 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1228, i16 %1277, i16 %1278, i1 true) #1, !dbg !44
  %1279 = bitcast bfloat %1185 to i16, !dbg !44
  %1280 = bitcast bfloat %1186 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1234, i16 %1279, i16 %1280, i1 true) #1, !dbg !44
  %1281 = bitcast bfloat %1187 to i16, !dbg !44
  %1282 = bitcast bfloat %1188 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1242, i16 %1281, i16 %1282, i1 true) #1, !dbg !44
  %1283 = bitcast bfloat %1189 to i16, !dbg !44
  %1284 = bitcast bfloat %1190 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1248, i16 %1283, i16 %1284, i1 true) #1, !dbg !44
  %1285 = bitcast bfloat %1191 to i16, !dbg !44
  %1286 = bitcast bfloat %1192 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1256, i16 %1285, i16 %1286, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1287 = load <4 x i32>, ptr addrspace(3) %1262, align 16, !dbg !44
  %1288 = load <4 x i32>, ptr addrspace(3) %1269, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1263, i64 0, !dbg !44
  %.extract52 = extractelement <4 x i32> %1263, i64 1, !dbg !44
  %.extract54 = extractelement <4 x i32> %1263, i64 2, !dbg !44
  %.extract56 = extractelement <4 x i32> %1263, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract52, i32 %.extract54, i32 %.extract56, ptr addrspace(1) %1154, i1 %1141) #1, !dbg !44
  %.extract58 = extractelement <4 x i32> %1270, i64 0, !dbg !44
  %.extract60 = extractelement <4 x i32> %1270, i64 1, !dbg !44
  %.extract62 = extractelement <4 x i32> %1270, i64 2, !dbg !44
  %.extract64 = extractelement <4 x i32> %1270, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract60, i32 %.extract62, i32 %.extract64, ptr addrspace(1) %1156, i1 %1142) #1, !dbg !44
  %.extract66 = extractelement <4 x i32> %1287, i64 0, !dbg !44
  %.extract68 = extractelement <4 x i32> %1287, i64 1, !dbg !44
  %.extract70 = extractelement <4 x i32> %1287, i64 2, !dbg !44
  %.extract72 = extractelement <4 x i32> %1287, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract66, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %1158, i1 %1143) #1, !dbg !44
  %.extract74 = extractelement <4 x i32> %1288, i64 0, !dbg !44
  %.extract76 = extractelement <4 x i32> %1288, i64 1, !dbg !44
  %.extract78 = extractelement <4 x i32> %1288, i64 2, !dbg !44
  %.extract80 = extractelement <4 x i32> %1288, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract74, i32 %.extract76, i32 %.extract78, i32 %.extract80, ptr addrspace(1) %1160, i1 %1144) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5tmeiw3n3el7l6yljchp6clgelifxsss5wj7lvcqhlwrvkh7oon.py", directory: "/tmp/torchinductor_root/5t")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
