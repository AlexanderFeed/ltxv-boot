; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, ptr addrspace(1) readnone captures(none) %10) local_unnamed_addr !dbg !6 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = and i32 %13, 31, !dbg !10
  %15 = lshr i32 %13, 5, !dbg !10
  %16 = shl i32 %13, 2, !dbg !10
  %17 = and i32 %16, 1020, !dbg !10
  %18 = icmp samesign ult i32 %17, 768, !dbg !11
  %19 = mul i32 %12, 768, !dbg !12
  %20 = add i32 %17, %19, !dbg !13
  %21 = sext i32 %20 to i64, !dbg !14
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !14
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %18) #5, !dbg !15
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !15
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !15
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !15
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %21, !dbg !16
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %18) #5, !dbg !17
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = zext nneg i32 %17 to i64, !dbg !18
  %35 = getelementptr bfloat, ptr addrspace(1) %2, i64 %34, !dbg !18
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %18) #5, !dbg !19
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !19
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !19
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !19
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !19
  %41 = getelementptr bfloat, ptr addrspace(1) %3, i64 %21, !dbg !20
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %18) #5, !dbg !21
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !21
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !21
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !21
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !21
  %47 = getelementptr bfloat, ptr addrspace(1) %4, i64 %34, !dbg !22
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %18) #5, !dbg !23
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !23
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !23
  %51 = extractvalue { i32, i32 } %48, 1, !dbg !23
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !23
  %53 = getelementptr bfloat, ptr addrspace(1) %5, i64 %34, !dbg !24
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %18) #5, !dbg !25
  %55 = getelementptr bfloat, ptr addrspace(1) %6, i64 %34, !dbg !26
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %18) #5, !dbg !27
  %57 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !28
  %58 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !29
  %59 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !30
  %60 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !31
  %61 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !32
  %62 = fadd <2 x float> %58, %59, !dbg !33
  %63 = fadd <2 x float> %62, %57, !dbg !34
  %64 = fadd <2 x float> %60, %61, !dbg !35
  %65 = fadd <2 x float> %63, %64, !dbg !36
  %66 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !28
  %67 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !29
  %68 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !30
  %69 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !31
  %70 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !32
  %71 = fadd <2 x float> %67, %68, !dbg !33
  %72 = fadd <2 x float> %71, %66, !dbg !34
  %73 = fadd <2 x float> %69, %70, !dbg !35
  %74 = fadd <2 x float> %72, %73, !dbg !36
  %75 = extractelement <2 x float> %65, i64 0, !dbg !37
  %76 = extractelement <2 x float> %65, i64 1, !dbg !37
  %77 = fadd float %75, %76, !dbg !37
  %78 = extractelement <2 x float> %74, i64 0, !dbg !37
  %79 = fadd float %78, %77, !dbg !37
  %80 = extractelement <2 x float> %74, i64 1, !dbg !37
  %81 = fadd float %80, %79, !dbg !37
  %82 = select i1 %18, float %81, float 0.000000e+00, !dbg !37
  %83 = bitcast float %82 to i32, !dbg !42
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !42
  %85 = bitcast i32 %84 to float, !dbg !42
  %86 = fadd float %82, %85, !dbg !37
  %87 = bitcast float %86 to i32, !dbg !42
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !42
  %89 = bitcast i32 %88 to float, !dbg !42
  %90 = fadd float %86, %89, !dbg !37
  %91 = bitcast float %90 to i32, !dbg !42
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !42
  %93 = bitcast i32 %92 to float, !dbg !42
  %94 = fadd float %90, %93, !dbg !37
  %95 = bitcast float %94 to i32, !dbg !42
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !42
  %97 = bitcast i32 %96 to float, !dbg !42
  %98 = fadd float %94, %97, !dbg !37
  %99 = bitcast float %98 to i32, !dbg !42
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !42
  %101 = bitcast i32 %100 to float, !dbg !42
  %102 = fadd float %98, %101, !dbg !37
  %103 = and i32 %15, 7, !dbg !42
  %104 = icmp eq i32 %14, 0, !dbg !42
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !42
  %106 = bitcast float %102 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %104) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %107 = icmp slt i32 %13, 8, !dbg !42
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !42
  %110 = bitcast i32 %109 to float, !dbg !42
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = fadd float %110, %112, !dbg !37
  %114 = bitcast float %113 to i32, !dbg !42
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = fadd float %113, %116, !dbg !37
  %118 = bitcast float %117 to i32, !dbg !42
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !42
  %120 = bitcast i32 %119 to float, !dbg !42
  %121 = fadd float %117, %120, !dbg !37
  %122 = and i32 %13, 7, !dbg !42
  %123 = icmp eq i32 %122, 0, !dbg !42
  %124 = and i1 %107, %123, !dbg !42
  %125 = bitcast float %121 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %125, i1 %124) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %126 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %127 = fadd float %126, 0.000000e+00, !dbg !43
  %128 = tail call float @llvm.nvvm.div.full(float %127, float 7.680000e+02), !dbg !47
  %129 = fsub float %75, %128, !dbg !48
  %130 = fsub float %76, %128, !dbg !48
  %131 = fsub float %78, %128, !dbg !48
  %132 = fsub float %80, %128, !dbg !48
  %133 = fmul float %129, %129, !dbg !49
  %134 = fmul float %130, %130, !dbg !49
  %135 = fmul float %131, %131, !dbg !49
  %136 = fmul float %132, %132, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %137 = fadd float %133, %134, !dbg !52
  %138 = fadd float %135, %137, !dbg !52
  %139 = fadd float %136, %138, !dbg !52
  %140 = select i1 %18, float %139, float 0.000000e+00, !dbg !52
  %141 = bitcast float %140 to i32, !dbg !50
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !50
  %143 = bitcast i32 %142 to float, !dbg !50
  %144 = fadd float %140, %143, !dbg !52
  %145 = bitcast float %144 to i32, !dbg !50
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !50
  %147 = bitcast i32 %146 to float, !dbg !50
  %148 = fadd float %144, %147, !dbg !52
  %149 = bitcast float %148 to i32, !dbg !50
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !50
  %151 = bitcast i32 %150 to float, !dbg !50
  %152 = fadd float %148, %151, !dbg !52
  %153 = bitcast float %152 to i32, !dbg !50
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !50
  %155 = bitcast i32 %154 to float, !dbg !50
  %156 = fadd float %152, %155, !dbg !52
  %157 = bitcast float %156 to i32, !dbg !50
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !50
  %159 = bitcast i32 %158 to float, !dbg !50
  %160 = fadd float %156, %159, !dbg !52
  %161 = bitcast float %160 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %161, i1 %104) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !50
  %163 = bitcast i32 %162 to float, !dbg !50
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !50
  %165 = bitcast i32 %164 to float, !dbg !50
  %166 = fadd float %163, %165, !dbg !52
  %167 = bitcast float %166 to i32, !dbg !50
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !50
  %169 = bitcast i32 %168 to float, !dbg !50
  %170 = fadd float %166, %169, !dbg !52
  %171 = bitcast float %170 to i32, !dbg !50
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !50
  %173 = bitcast i32 %172 to float, !dbg !50
  %174 = fadd float %170, %173, !dbg !52
  %175 = bitcast float %174 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %175, i1 %124) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %176 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %177 = fadd float %176, 0.000000e+00, !dbg !53
  %178 = tail call float @llvm.nvvm.div.full(float %177, float 7.680000e+02), !dbg !55
  %179 = fadd float %178, 0x3EE4F8B580000000, !dbg !56
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %180, 0, !dbg !57
  br i1 %.not.i, label %183, label %181, !dbg !57

181:                                              ; preds = %11
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %179), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

183:                                              ; preds = %11
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %179), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %181, %183
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], !dbg !57
  %185 = extractvalue { i32, i32 } %56, 1, !dbg !27
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !27
  %187 = extractelement <2 x bfloat> %186, i64 1, !dbg !27
  %188 = fpext bfloat %187 to float, !dbg !58
  %189 = extractelement <2 x bfloat> %186, i64 0, !dbg !27
  %190 = fpext bfloat %189 to float, !dbg !58
  %191 = extractvalue { i32, i32 } %56, 0, !dbg !27
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !27
  %193 = extractelement <2 x bfloat> %192, i64 1, !dbg !27
  %194 = fpext bfloat %193 to float, !dbg !58
  %195 = extractelement <2 x bfloat> %192, i64 0, !dbg !27
  %196 = fpext bfloat %195 to float, !dbg !58
  %197 = extractvalue { i32, i32 } %54, 1, !dbg !25
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !25
  %199 = extractelement <2 x bfloat> %198, i64 1, !dbg !25
  %200 = fpext bfloat %199 to float, !dbg !59
  %201 = extractelement <2 x bfloat> %198, i64 0, !dbg !25
  %202 = fpext bfloat %201 to float, !dbg !59
  %203 = extractvalue { i32, i32 } %54, 0, !dbg !25
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !25
  %205 = extractelement <2 x bfloat> %204, i64 1, !dbg !25
  %206 = fpext bfloat %205 to float, !dbg !59
  %207 = extractelement <2 x bfloat> %204, i64 0, !dbg !25
  %208 = fpext bfloat %207 to float, !dbg !59
  %209 = fmul float %129, %.0.i, !dbg !60
  %210 = fmul float %130, %.0.i, !dbg !60
  %211 = fmul float %131, %.0.i, !dbg !60
  %212 = fmul float %132, %.0.i, !dbg !60
  %213 = fmul float %209, %208, !dbg !61
  %214 = fmul float %210, %206, !dbg !61
  %215 = fmul float %211, %202, !dbg !61
  %216 = fmul float %212, %200, !dbg !61
  %217 = fadd float %213, %196, !dbg !62
  %218 = fadd float %214, %194, !dbg !62
  %219 = fadd float %215, %190, !dbg !62
  %220 = fadd float %216, %188, !dbg !62
  %221 = fptrunc <2 x float> %65 to <2 x bfloat>, !dbg !63
  %222 = fptrunc <2 x float> %74 to <2 x bfloat>, !dbg !63
  %223 = bitcast <2 x bfloat> %221 to i32, !dbg !63
  %224 = bitcast <2 x bfloat> %222 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %223, i32 %224, ptr addrspace(1) %22, i1 %18) #5, !dbg !63
  %225 = getelementptr bfloat, ptr addrspace(1) %7, i64 %21, !dbg !64
  %226 = fptrunc float %217 to bfloat, !dbg !65
  %227 = fptrunc float %218 to bfloat, !dbg !65
  %228 = fptrunc float %219 to bfloat, !dbg !65
  %229 = fptrunc float %220 to bfloat, !dbg !65
  %230 = insertelement <2 x bfloat> poison, bfloat %226, i64 0, !dbg !65
  %231 = insertelement <2 x bfloat> %230, bfloat %227, i64 1, !dbg !65
  %232 = bitcast <2 x bfloat> %231 to i32, !dbg !65
  %233 = insertelement <2 x bfloat> poison, bfloat %228, i64 0, !dbg !65
  %234 = insertelement <2 x bfloat> %233, bfloat %229, i64 1, !dbg !65
  %235 = bitcast <2 x bfloat> %234 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %232, i32 %235, ptr addrspace(1) %225, i1 %18) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cicjqi2q4ytkp3wllwnfvyr3hyo3tasnqpiurpzhmej6jrlpzk3w.py", directory: "/tmp/torchinductor_root/ic")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_8", linkageName: "triton_per_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 45, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 37, scope: !6)
!20 = !DILocation(line: 38, column: 30, scope: !6)
!21 = !DILocation(line: 38, column: 46, scope: !6)
!22 = !DILocation(line: 39, column: 30, scope: !6)
!23 = !DILocation(line: 39, column: 37, scope: !6)
!24 = !DILocation(line: 40, column: 31, scope: !6)
!25 = !DILocation(line: 40, column: 38, scope: !6)
!26 = !DILocation(line: 41, column: 31, scope: !6)
!27 = !DILocation(line: 41, column: 38, scope: !6)
!28 = !DILocation(line: 35, column: 73, scope: !6)
!29 = !DILocation(line: 36, column: 69, scope: !6)
!30 = !DILocation(line: 37, column: 90, scope: !6)
!31 = !DILocation(line: 38, column: 69, scope: !6)
!32 = !DILocation(line: 39, column: 90, scope: !6)
!33 = !DILocation(line: 42, column: 18, scope: !6)
!34 = !DILocation(line: 43, column: 18, scope: !6)
!35 = !DILocation(line: 44, column: 18, scope: !6)
!36 = !DILocation(line: 45, column: 18, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !6, file: !39, discriminator: 0)
!41 = !DILocation(line: 51, column: 59, scope: !6)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 57, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !6, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 45, scope: !6)
!47 = !DILocation(line: 54, column: 21, scope: !6)
!48 = !DILocation(line: 55, column: 20, scope: !6)
!49 = !DILocation(line: 56, column: 20, scope: !6)
!50 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !51)
!51 = !DILocation(line: 59, column: 59, scope: !6)
!52 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !51)
!53 = !DILocation(line: 57, column: 15, scope: !44, inlinedAt: !54)
!54 = !DILocation(line: 59, column: 45, scope: !6)
!55 = !DILocation(line: 62, column: 21, scope: !6)
!56 = !DILocation(line: 64, column: 20, scope: !6)
!57 = !DILocation(line: 65, column: 28, scope: !6)
!58 = !DILocation(line: 41, column: 91, scope: !6)
!59 = !DILocation(line: 40, column: 91, scope: !6)
!60 = !DILocation(line: 66, column: 20, scope: !6)
!61 = !DILocation(line: 68, column: 20, scope: !6)
!62 = !DILocation(line: 70, column: 20, scope: !6)
!63 = !DILocation(line: 72, column: 50, scope: !6)
!64 = !DILocation(line: 73, column: 25, scope: !6)
!65 = !DILocation(line: 73, column: 48, scope: !6)
!66 = !DILocation(line: 73, column: 4, scope: !6)
