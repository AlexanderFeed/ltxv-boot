; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 768, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 65, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 768, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr exact i32 %18, 2, !dbg !19
  %20 = and i32 %17, 16, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %17, 23, !dbg !19
  %24 = or disjoint i32 %23, %22, !dbg !19
  %25 = or disjoint i32 %24, %19, !dbg !19
  %26 = lshr i32 %15, 3, !dbg !19
  %27 = and i32 %26, 31, !dbg !19
  %28 = or disjoint i32 %14, %25, !dbg !20
  %29 = shl nsw i32 %13, 5, !dbg !21
  %30 = shl i32 %15, 2, !dbg !22
  %31 = and i32 %30, 28, !dbg !22
  %32 = or disjoint i32 %29, %27, !dbg !23
  %33 = srem i32 %28, 4112, !dbg !24
  %34 = srem i32 %32, 3072, !dbg !25
  %35 = shl i32 %15, 3, !dbg !26
  %36 = and i32 %35, 24, !dbg !26
  %37 = mul nsw i32 %33, 3072, !dbg !27
  %38 = mul nsw i32 %34, 3072, !dbg !28
  %39 = or disjoint i32 %37, %36, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr i8, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = xor i32 %36, %16, !dbg !31
  %43 = shl nuw nsw i32 %25, 5, !dbg !31
  %44 = or disjoint i32 %43, %42, !dbg !31
  %45 = zext nneg i32 %44 to i64, !dbg !31
  %46 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %46, ptr addrspace(1) %41, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %47 = or disjoint i32 %38, %31, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr i8, ptr addrspace(1) %1, i64 %48, !dbg !33
  %50 = lshr exact i32 %18, 1, !dbg !34
  %51 = xor i32 %31, %50, !dbg !34
  %52 = shl nuw nsw i32 %27, 5, !dbg !34
  %53 = or disjoint i32 %51, %52, !dbg !34
  %54 = zext nneg i32 %53 to i64, !dbg !34
  %55 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %54, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %55, ptr addrspace(1) %49, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %56 = or disjoint i32 %39, 32, !dbg !29
  %57 = sext i32 %56 to i64, !dbg !30
  %58 = getelementptr i8, ptr addrspace(1) %0, i64 %57, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %59, ptr addrspace(1) %58, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %60 = or disjoint i32 %47, 32, !dbg !32
  %61 = sext i32 %60 to i64, !dbg !33
  %62 = getelementptr i8, ptr addrspace(1) %1, i64 %61, !dbg !33
  %63 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 9216), i64 %54, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %63, ptr addrspace(1) %62, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %64 = or disjoint i32 %39, 64, !dbg !29
  %65 = sext i32 %64 to i64, !dbg !30
  %66 = getelementptr i8, ptr addrspace(1) %0, i64 %65, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %67 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %67, ptr addrspace(1) %66, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %68 = or disjoint i32 %47, 64, !dbg !32
  %69 = sext i32 %68 to i64, !dbg !33
  %70 = getelementptr i8, ptr addrspace(1) %1, i64 %69, !dbg !33
  %71 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %54, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %70, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %72 = or disjoint i32 %39, 96, !dbg !29
  %73 = sext i32 %72 to i64, !dbg !30
  %74 = getelementptr i8, ptr addrspace(1) %0, i64 %73, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %75 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %75, ptr addrspace(1) %74, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %76 = or disjoint i32 %47, 96, !dbg !32
  %77 = sext i32 %76 to i64, !dbg !33
  %78 = getelementptr i8, ptr addrspace(1) %1, i64 %77, !dbg !33
  %79 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %54, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %78, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %80 = and i32 %15, 7
  %81 = and i32 %15, 15
  %82 = xor i32 %30, %15
  %83 = and i32 %82, 16
  %84 = or disjoint i32 %81, %20
  %85 = or disjoint i32 %84, %22
  %86 = shl nuw nsw i32 %85, 5
  %87 = or disjoint i32 %86, %83
  %88 = zext nneg i32 %87 to i64
  %invariant.gep13 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %88, !dbg !35
  %89 = shl i32 %15, 1
  %90 = xor i32 %30, %89
  %91 = and i32 %90, 16
  %92 = or disjoint i32 %19, %80
  %93 = shl nuw nsw i32 %92, 5
  %94 = or disjoint i32 %93, %91
  %95 = zext nneg i32 %94 to i64
  %96 = or disjoint i32 %94, 512
  %97 = zext nneg i32 %96 to i64
  %invariant.op = or disjoint i32 %39, 128, !dbg !35
  %invariant.op15 = or disjoint i32 %47, 128, !dbg !35
  %98 = sext i32 %invariant.op to i64, !dbg !35
  %99 = sext i32 %invariant.op15 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %98, !dbg !35
  %invariant.gep34 = getelementptr i8, ptr addrspace(1) %1, i64 %99, !dbg !35
  br label %100, !dbg !35

100:                                              ; preds = %4, %100
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %100 ]
  %101 = phi i32 [ -1, %4 ], [ %114, %100 ]
  %102 = phi i32 [ 3, %4 ], [ %151, %100 ]
  %103 = phi i32 [ 0, %4 ], [ %140, %100 ]
  %104 = phi i32 [ 0, %4 ], [ %141, %100 ]
  %105 = phi i32 [ 0, %4 ], [ %142, %100 ]
  %106 = phi i32 [ 0, %4 ], [ %143, %100 ]
  %107 = phi i32 [ 0, %4 ], [ %145, %100 ]
  %108 = phi i32 [ 0, %4 ], [ %146, %100 ]
  %109 = phi i32 [ 0, %4 ], [ %147, %100 ]
  %110 = phi i32 [ 0, %4 ], [ %148, %100 ]
  %111 = icmp samesign ult i64 %indvars.iv, 92, !dbg !35
  %112 = add i32 %101, 1, !dbg !35
  %113 = icmp slt i32 %112, 4, !dbg !35
  %114 = select i1 %113, i32 %112, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %115 = shl i32 %114, 11, !dbg !31
  %116 = sext i32 %115 to i64, !dbg !31
  %gep14 = getelementptr i8, ptr addrspace(3) %invariant.gep13, i64 %116, !dbg !31
  %117 = ptrtoint ptr addrspace(3) %gep14 to i64, !dbg !31
  %118 = trunc i64 %117 to i32, !dbg !31
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %118) #1, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !31
  %124 = shl i32 %114, 10, !dbg !34
  %125 = sext i32 %124 to i64, !dbg !34
  %126 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %125, !dbg !34
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %95, !dbg !34
  %128 = ptrtoint ptr addrspace(3) %127 to i64, !dbg !34
  %129 = trunc i64 %128 to i32, !dbg !34
  %130 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %129) #1, !dbg !34
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !34
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !34
  %133 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %97, !dbg !34
  %134 = ptrtoint ptr addrspace(3) %133 to i64, !dbg !34
  %135 = trunc i64 %134 to i32, !dbg !34
  %136 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %135) #1, !dbg !34
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !34
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !34
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %103, i32 %104, i32 %105, i32 %106, i32 %120, i32 %121, i32 %122, i32 %123, i32 %131, i32 %132) #1, !dbg !36
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !36
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !36
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %107, i32 %108, i32 %109, i32 %110, i32 %120, i32 %121, i32 %122, i32 %123, i32 %137, i32 %138) #1, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !36
  %149 = add i32 %102, 1, !dbg !35
  %150 = icmp slt i32 %149, 4, !dbg !35
  %151 = select i1 %150, i32 %149, i32 0, !dbg !35
  %152 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep33 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %152, !dbg !30
  %153 = shl i32 %151, 11, !dbg !31
  %154 = sext i32 %153 to i64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %46, i64 %154, !dbg !31
  %155 = select i1 %111, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep33, i32 %155) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep35 = getelementptr i8, ptr addrspace(1) %invariant.gep34, i64 %152, !dbg !33
  %156 = shl i32 %151, 10, !dbg !34
  %157 = sext i32 %156 to i64, !dbg !34
  %gep12 = getelementptr i8, ptr addrspace(3) %55, i64 %157, !dbg !34
  %158 = select i1 %111, i32 4, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep12, ptr addrspace(1) %gep35, i32 %158) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !35
  br i1 %exitcond.not, label %159, label %100, !dbg !35

159:                                              ; preds = %100
  %160 = or disjoint i32 %29, %31, !dbg !23
  %161 = or disjoint i32 %14, %27, !dbg !19
  %162 = or disjoint i32 %161, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %163 = icmp slt i32 %161, 4112, !dbg !38
  %164 = icmp slt i32 %162, 4112, !dbg !38
  %165 = icmp slt i32 %160, 3072, !dbg !39
  %166 = and i1 %163, %165, !dbg !40
  %167 = and i1 %164, %165, !dbg !40
  %168 = mul i32 %161, 3072, !dbg !41
  %169 = mul i32 %162, 3072, !dbg !41
  %170 = add i32 %168, %160, !dbg !42
  %171 = add i32 %160, %169, !dbg !42
  %172 = sext i32 %170 to i64, !dbg !43
  %173 = getelementptr i32, ptr addrspace(1) %2, i64 %172, !dbg !43
  %174 = sext i32 %171 to i64, !dbg !43
  %175 = getelementptr i32, ptr addrspace(1) %2, i64 %174, !dbg !43
  %176 = and i32 %89, 6, !dbg !44
  %177 = and i32 %35, 736, !dbg !44
  %178 = or disjoint i32 %177, %176, !dbg !44
  %179 = shl nuw nsw i32 %21, 3, !dbg !44
  %180 = or disjoint i32 %178, %179, !dbg !44
  %181 = or disjoint i32 %180, %19, !dbg !44
  %182 = and i32 %30, 1020, !dbg !44
  %183 = lshr i32 %180, 3, !dbg !44
  %184 = add nuw nsw i32 %183, %181, !dbg !44
  %185 = zext nneg i32 %184 to i64, !dbg !44
  %186 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %185, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %186, i32 %140, i32 %141, i1 true) #1, !dbg !44
  %187 = or disjoint i32 %181, 256, !dbg !44
  %188 = lshr i32 %187, 3, !dbg !44
  %189 = and i32 %188, 536870908, !dbg !44
  %190 = add nuw nsw i32 %189, %187, !dbg !44
  %191 = zext nneg i32 %190 to i64, !dbg !44
  %192 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %191, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %192, i32 %142, i32 %143, i1 true) #1, !dbg !44
  %193 = or disjoint i32 %181, 16, !dbg !44
  %194 = add nuw nsw i32 %193, %183, !dbg !44
  %195 = zext nneg i32 %194 to i64, !dbg !44
  %196 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %195, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %196, i32 %145, i32 %146, i1 true) #1, !dbg !44
  %197 = or disjoint i32 %181, 272, !dbg !44
  %198 = lshr i32 %197, 3, !dbg !44
  %199 = and i32 %198, 536870908, !dbg !44
  %200 = add nuw nsw i32 %199, %197, !dbg !44
  %201 = zext nneg i32 %200 to i64, !dbg !44
  %202 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %201, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %202, i32 %147, i32 %148, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %203 = lshr i32 %30, 3, !dbg !44
  %204 = and i32 %203, 124, !dbg !44
  %205 = add nuw nsw i32 %204, %182, !dbg !44
  %206 = zext nneg i32 %205 to i64, !dbg !44
  %207 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %206, !dbg !44
  %208 = or disjoint i32 %182, 1024, !dbg !44
  %209 = lshr i32 %208, 3, !dbg !44
  %210 = and i32 %209, 252, !dbg !44
  %211 = add nuw nsw i32 %210, %208, !dbg !44
  %212 = zext nneg i32 %211 to i64, !dbg !44
  %213 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %212, !dbg !44
  %214 = load <4 x i32>, ptr addrspace(3) %213, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %207, align 16, !dbg !44
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %207, i64 4, !dbg !44
  %.extract4 = load i32, ptr addrspace(3) %215, align 4, !dbg !44
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) %207, i64 8, !dbg !44
  %.extract5 = load i32, ptr addrspace(3) %216, align 8, !dbg !44
  %217 = getelementptr inbounds nuw i8, ptr addrspace(3) %207, i64 12, !dbg !44
  %.extract6 = load i32, ptr addrspace(3) %217, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %173, i1 %166) #1, !dbg !44
  %.extract7 = extractelement <4 x i32> %214, i64 0, !dbg !44
  %.extract8 = extractelement <4 x i32> %214, i64 1, !dbg !44
  %.extract9 = extractelement <4 x i32> %214, i64 2, !dbg !44
  %.extract10 = extractelement <4 x i32> %214, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %175, i1 %167) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c72sqyxxw7dbh3jiclse4tkmjxjopu5qh7tyhqtdlwtf7u7onar7.py", directory: "/tmp/torchinductor_root/72")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
