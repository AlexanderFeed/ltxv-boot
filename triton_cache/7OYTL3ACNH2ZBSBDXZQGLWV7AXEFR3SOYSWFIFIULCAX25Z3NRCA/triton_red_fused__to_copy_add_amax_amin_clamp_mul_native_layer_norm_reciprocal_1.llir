; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 1, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 128, !dbg !11
  %.lobit = lshr exact i32 %23, 7, !dbg !11
  %24 = and i32 %22, 31, !dbg !11
  %25 = or disjoint i32 %.lobit, %21, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = icmp slt i32 %21, 4112, !dbg !13
  %28 = shl i32 %22, 4, !dbg !14
  %29 = and i32 %28, 2032, !dbg !14
  %30 = or disjoint i32 %29, 8, !dbg !14
  %31 = shl i32 %22, 3, !dbg !14
  %32 = and i32 %31, 2040, !dbg !14
  %33 = mul i32 %25, 3072, !dbg !15
  %34 = add i32 %33, %30
  %35 = zext nneg i32 %29 to i64, !dbg !16
  br label %36, !dbg !16

36:                                               ; preds = %19, %._crit_edge
  %37 = phi i1 [ true, %19 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %19 ], [ 2048, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %19 ], [ %324, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %19 ], [ %325, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %19 ], [ %326, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %327, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %328, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %329, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %330, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %331, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %332, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %333, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %334, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %335, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %336, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %337, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %338, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %339, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %308, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %309, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %310, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %311, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %312, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %313, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %314, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %315, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %316, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %317, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %318, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %319, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %320, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %321, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %322, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %323, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %292, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %293, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %294, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %295, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %296, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %297, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %298, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %299, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %300, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %301, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %302, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %303, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %304, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %305, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %306, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %19 ], [ %307, %._crit_edge ]
  %86 = or disjoint i64 %indvars.iv, %35, !dbg !17
  %87 = icmp samesign ult i64 %86, 3072, !dbg !18
  %88 = trunc nuw nsw i64 %86 to i32, !dbg !19
  %89 = add i32 %33, %88, !dbg !19
  %90 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %91 = add i32 %34, %90, !dbg !19
  %92 = sext i32 %89 to i64, !dbg !20
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !20
  %94 = sext i32 %91 to i64, !dbg !20
  %95 = getelementptr bfloat, ptr addrspace(1) %0, i64 %94, !dbg !20
  %96 = and i1 %26, %87, !dbg !21
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %93, i1 %96) #5, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !22
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !22
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !22
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !22
  %104 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !22
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !22
  %106 = extractelement <2 x bfloat> %99, i64 0, !dbg !22
  %107 = extractelement <2 x bfloat> %99, i64 1, !dbg !22
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !22
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !22
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !22
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !22
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !22
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !22
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %95, i1 %96) #5, !dbg !22
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !22
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !22
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !22
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !22
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !22
  %123 = extractelement <2 x bfloat> %116, i64 0, !dbg !22
  %124 = extractelement <2 x bfloat> %116, i64 1, !dbg !22
  %125 = extractelement <2 x bfloat> %118, i64 0, !dbg !22
  %126 = extractelement <2 x bfloat> %118, i64 1, !dbg !22
  %127 = extractelement <2 x bfloat> %120, i64 0, !dbg !22
  %128 = extractelement <2 x bfloat> %120, i64 1, !dbg !22
  %129 = extractelement <2 x bfloat> %122, i64 0, !dbg !22
  %130 = extractelement <2 x bfloat> %122, i64 1, !dbg !22
  %131 = fpext bfloat %106 to float, !dbg !23
  %132 = fpext bfloat %107 to float, !dbg !23
  %133 = fpext bfloat %108 to float, !dbg !23
  %134 = fpext bfloat %109 to float, !dbg !23
  %135 = fpext bfloat %110 to float, !dbg !23
  %136 = fpext bfloat %111 to float, !dbg !23
  %137 = fpext bfloat %112 to float, !dbg !23
  %138 = fpext bfloat %113 to float, !dbg !23
  %139 = fpext bfloat %123 to float, !dbg !23
  %140 = fpext bfloat %124 to float, !dbg !23
  %141 = fpext bfloat %125 to float, !dbg !23
  %142 = fpext bfloat %126 to float, !dbg !23
  %143 = fpext bfloat %127 to float, !dbg !23
  %144 = fpext bfloat %128 to float, !dbg !23
  %145 = fpext bfloat %129 to float, !dbg !23
  %146 = fpext bfloat %130 to float, !dbg !23
  br i1 %37, label %._crit_edge, label %147, !dbg !24

147:                                              ; preds = %36
  %148 = fsub float %131, %70, !dbg !28
  %149 = fsub float %132, %71, !dbg !28
  %150 = fsub float %133, %72, !dbg !28
  %151 = fsub float %134, %73, !dbg !28
  %152 = fsub float %135, %74, !dbg !28
  %153 = fsub float %136, %75, !dbg !28
  %154 = fsub float %137, %76, !dbg !28
  %155 = fsub float %138, %77, !dbg !28
  %156 = fsub float %139, %78, !dbg !28
  %157 = fsub float %140, %79, !dbg !28
  %158 = fsub float %141, %80, !dbg !28
  %159 = fsub float %142, %81, !dbg !28
  %160 = fsub float %143, %82, !dbg !28
  %161 = fsub float %144, %83, !dbg !28
  %162 = fsub float %145, %84, !dbg !28
  %163 = fsub float %146, %85, !dbg !28
  %164 = fadd float %38, 1.000000e+00, !dbg !29
  %165 = fadd float %39, 1.000000e+00, !dbg !29
  %166 = fadd float %40, 1.000000e+00, !dbg !29
  %167 = fadd float %41, 1.000000e+00, !dbg !29
  %168 = fadd float %42, 1.000000e+00, !dbg !29
  %169 = fadd float %43, 1.000000e+00, !dbg !29
  %170 = fadd float %44, 1.000000e+00, !dbg !29
  %171 = fadd float %45, 1.000000e+00, !dbg !29
  %172 = fadd float %46, 1.000000e+00, !dbg !29
  %173 = fadd float %47, 1.000000e+00, !dbg !29
  %174 = fadd float %48, 1.000000e+00, !dbg !29
  %175 = fadd float %49, 1.000000e+00, !dbg !29
  %176 = fadd float %50, 1.000000e+00, !dbg !29
  %177 = fadd float %51, 1.000000e+00, !dbg !29
  %178 = fadd float %52, 1.000000e+00, !dbg !29
  %179 = fadd float %53, 1.000000e+00, !dbg !29
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !30
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !30
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !30
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !30
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !30
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !30
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !30
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !30
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !30
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !30
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !30
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !30
  %192 = tail call float @llvm.nvvm.div.full(float %160, float %176), !dbg !30
  %193 = tail call float @llvm.nvvm.div.full(float %161, float %177), !dbg !30
  %194 = tail call float @llvm.nvvm.div.full(float %162, float %178), !dbg !30
  %195 = tail call float @llvm.nvvm.div.full(float %163, float %179), !dbg !30
  %196 = fadd float %70, %180, !dbg !31
  %197 = fadd float %71, %181, !dbg !31
  %198 = fadd float %72, %182, !dbg !31
  %199 = fadd float %73, %183, !dbg !31
  %200 = fadd float %74, %184, !dbg !31
  %201 = fadd float %75, %185, !dbg !31
  %202 = fadd float %76, %186, !dbg !31
  %203 = fadd float %77, %187, !dbg !31
  %204 = fadd float %78, %188, !dbg !31
  %205 = fadd float %79, %189, !dbg !31
  %206 = fadd float %80, %190, !dbg !31
  %207 = fadd float %81, %191, !dbg !31
  %208 = fadd float %82, %192, !dbg !31
  %209 = fadd float %83, %193, !dbg !31
  %210 = fadd float %84, %194, !dbg !31
  %211 = fadd float %85, %195, !dbg !31
  %212 = fsub float %131, %196, !dbg !32
  %213 = fsub float %132, %197, !dbg !32
  %214 = fsub float %133, %198, !dbg !32
  %215 = fsub float %134, %199, !dbg !32
  %216 = fsub float %135, %200, !dbg !32
  %217 = fsub float %136, %201, !dbg !32
  %218 = fsub float %137, %202, !dbg !32
  %219 = fsub float %138, %203, !dbg !32
  %220 = fsub float %139, %204, !dbg !32
  %221 = fsub float %140, %205, !dbg !32
  %222 = fsub float %141, %206, !dbg !32
  %223 = fsub float %142, %207, !dbg !32
  %224 = fsub float %143, %208, !dbg !32
  %225 = fsub float %144, %209, !dbg !32
  %226 = fsub float %145, %210, !dbg !32
  %227 = fsub float %146, %211, !dbg !32
  %228 = fmul float %148, %212, !dbg !33
  %229 = fmul float %149, %213, !dbg !33
  %230 = fmul float %150, %214, !dbg !33
  %231 = fmul float %151, %215, !dbg !33
  %232 = fmul float %152, %216, !dbg !33
  %233 = fmul float %153, %217, !dbg !33
  %234 = fmul float %154, %218, !dbg !33
  %235 = fmul float %155, %219, !dbg !33
  %236 = fmul float %156, %220, !dbg !33
  %237 = fmul float %157, %221, !dbg !33
  %238 = fmul float %158, %222, !dbg !33
  %239 = fmul float %159, %223, !dbg !33
  %240 = fmul float %160, %224, !dbg !33
  %241 = fmul float %161, %225, !dbg !33
  %242 = fmul float %162, %226, !dbg !33
  %243 = fmul float %163, %227, !dbg !33
  %244 = fadd float %54, %228, !dbg !34
  %245 = fadd float %55, %229, !dbg !34
  %246 = fadd float %56, %230, !dbg !34
  %247 = fadd float %57, %231, !dbg !34
  %248 = fadd float %58, %232, !dbg !34
  %249 = fadd float %59, %233, !dbg !34
  %250 = fadd float %60, %234, !dbg !34
  %251 = fadd float %61, %235, !dbg !34
  %252 = fadd float %62, %236, !dbg !34
  %253 = fadd float %63, %237, !dbg !34
  %254 = fadd float %64, %238, !dbg !34
  %255 = fadd float %65, %239, !dbg !34
  %256 = fadd float %66, %240, !dbg !34
  %257 = fadd float %67, %241, !dbg !34
  %258 = fadd float %68, %242, !dbg !34
  %259 = fadd float %69, %243, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %36, %147
  %260 = phi float [ %244, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %261 = phi float [ %245, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %262 = phi float [ %246, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %263 = phi float [ %247, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %264 = phi float [ %248, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %265 = phi float [ %249, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %266 = phi float [ %250, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %267 = phi float [ %251, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %268 = phi float [ %252, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %269 = phi float [ %253, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %270 = phi float [ %254, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %271 = phi float [ %255, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %272 = phi float [ %256, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %273 = phi float [ %257, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %274 = phi float [ %258, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %275 = phi float [ %259, %147 ], [ 0.000000e+00, %36 ], !dbg !27
  %.pn52 = phi float [ %196, %147 ], [ %131, %36 ]
  %.pn50 = phi float [ %197, %147 ], [ %132, %36 ]
  %.pn48 = phi float [ %198, %147 ], [ %133, %36 ]
  %.pn46 = phi float [ %199, %147 ], [ %134, %36 ]
  %.pn44 = phi float [ %200, %147 ], [ %135, %36 ]
  %.pn42 = phi float [ %201, %147 ], [ %136, %36 ]
  %.pn40 = phi float [ %202, %147 ], [ %137, %36 ]
  %.pn38 = phi float [ %203, %147 ], [ %138, %36 ]
  %.pn36 = phi float [ %204, %147 ], [ %139, %36 ]
  %.pn34 = phi float [ %205, %147 ], [ %140, %36 ]
  %.pn32 = phi float [ %206, %147 ], [ %141, %36 ]
  %.pn30 = phi float [ %207, %147 ], [ %142, %36 ]
  %.pn28 = phi float [ %208, %147 ], [ %143, %36 ]
  %.pn26 = phi float [ %209, %147 ], [ %144, %36 ]
  %.pn24 = phi float [ %210, %147 ], [ %145, %36 ]
  %.pn22 = phi float [ %211, %147 ], [ %146, %36 ]
  %276 = phi float [ %164, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %277 = phi float [ %165, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %278 = phi float [ %166, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %279 = phi float [ %167, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %280 = phi float [ %168, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %281 = phi float [ %169, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %282 = phi float [ %170, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %283 = phi float [ %171, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %284 = phi float [ %172, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %285 = phi float [ %173, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %286 = phi float [ %174, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %287 = phi float [ %175, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %288 = phi float [ %176, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %289 = phi float [ %177, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %290 = phi float [ %178, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %291 = phi float [ %179, %147 ], [ 1.000000e+00, %36 ], !dbg !27
  %292 = select i1 %96, float %.pn52, float %70, !dbg !35
  %293 = select i1 %96, float %.pn50, float %71, !dbg !35
  %294 = select i1 %96, float %.pn48, float %72, !dbg !35
  %295 = select i1 %96, float %.pn46, float %73, !dbg !35
  %296 = select i1 %96, float %.pn44, float %74, !dbg !35
  %297 = select i1 %96, float %.pn42, float %75, !dbg !35
  %298 = select i1 %96, float %.pn40, float %76, !dbg !35
  %299 = select i1 %96, float %.pn38, float %77, !dbg !35
  %300 = select i1 %96, float %.pn36, float %78, !dbg !35
  %301 = select i1 %96, float %.pn34, float %79, !dbg !35
  %302 = select i1 %96, float %.pn32, float %80, !dbg !35
  %303 = select i1 %96, float %.pn30, float %81, !dbg !35
  %304 = select i1 %96, float %.pn28, float %82, !dbg !35
  %305 = select i1 %96, float %.pn26, float %83, !dbg !35
  %306 = select i1 %96, float %.pn24, float %84, !dbg !35
  %307 = select i1 %96, float %.pn22, float %85, !dbg !35
  %308 = select i1 %96, float %260, float %54, !dbg !36
  %309 = select i1 %96, float %261, float %55, !dbg !36
  %310 = select i1 %96, float %262, float %56, !dbg !36
  %311 = select i1 %96, float %263, float %57, !dbg !36
  %312 = select i1 %96, float %264, float %58, !dbg !36
  %313 = select i1 %96, float %265, float %59, !dbg !36
  %314 = select i1 %96, float %266, float %60, !dbg !36
  %315 = select i1 %96, float %267, float %61, !dbg !36
  %316 = select i1 %96, float %268, float %62, !dbg !36
  %317 = select i1 %96, float %269, float %63, !dbg !36
  %318 = select i1 %96, float %270, float %64, !dbg !36
  %319 = select i1 %96, float %271, float %65, !dbg !36
  %320 = select i1 %96, float %272, float %66, !dbg !36
  %321 = select i1 %96, float %273, float %67, !dbg !36
  %322 = select i1 %96, float %274, float %68, !dbg !36
  %323 = select i1 %96, float %275, float %69, !dbg !36
  %324 = select i1 %96, float %276, float %38, !dbg !37
  %325 = select i1 %96, float %277, float %39, !dbg !37
  %326 = select i1 %96, float %278, float %40, !dbg !37
  %327 = select i1 %96, float %279, float %41, !dbg !37
  %328 = select i1 %96, float %280, float %42, !dbg !37
  %329 = select i1 %96, float %281, float %43, !dbg !37
  %330 = select i1 %96, float %282, float %44, !dbg !37
  %331 = select i1 %96, float %283, float %45, !dbg !37
  %332 = select i1 %96, float %284, float %46, !dbg !37
  %333 = select i1 %96, float %285, float %47, !dbg !37
  %334 = select i1 %96, float %286, float %48, !dbg !37
  %335 = select i1 %96, float %287, float %49, !dbg !37
  %336 = select i1 %96, float %288, float %50, !dbg !37
  %337 = select i1 %96, float %289, float %51, !dbg !37
  %338 = select i1 %96, float %290, float %52, !dbg !37
  %339 = select i1 %96, float %291, float %53, !dbg !37
  br i1 %37, label %36, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %340 = lshr i32 %22, 5, !dbg !11
  %341 = and i32 %22, 1, !dbg !11
  %342 = or disjoint i32 %21, %341, !dbg !12
  %343 = icmp slt i32 %342, 4112, !dbg !13
  %344 = or disjoint i32 %32, 4, !dbg !14
  %345 = fsub float %293, %292, !dbg !38
  %346 = fadd float %324, %325, !dbg !41
  %347 = fcmp oeq float %346, 0.000000e+00, !dbg !42
  %348 = tail call float @llvm.nvvm.div.full(float %325, float %346), !dbg !43
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !44
  %350 = fmul float %345, %349, !dbg !45
  %351 = fadd float %292, %350, !dbg !46
  %352 = fadd float %308, %309, !dbg !47
  %353 = fmul float %345, %345, !dbg !48
  %354 = fmul float %353, %324, !dbg !49
  %355 = fmul float %354, %349, !dbg !50
  %356 = fadd float %352, %355, !dbg !51
  %357 = fsub float %294, %351, !dbg !38
  %358 = fadd float %326, %346, !dbg !41
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !42
  %360 = tail call float @llvm.nvvm.div.full(float %326, float %358), !dbg !43
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !44
  %362 = fmul float %361, %357, !dbg !45
  %363 = fadd float %351, %362, !dbg !46
  %364 = fadd float %310, %356, !dbg !47
  %365 = fmul float %357, %357, !dbg !48
  %366 = fmul float %346, %365, !dbg !49
  %367 = fmul float %361, %366, !dbg !50
  %368 = fadd float %364, %367, !dbg !51
  %369 = fsub float %295, %363, !dbg !38
  %370 = fadd float %327, %358, !dbg !41
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !42
  %372 = tail call float @llvm.nvvm.div.full(float %327, float %370), !dbg !43
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !44
  %374 = fmul float %373, %369, !dbg !45
  %375 = fadd float %363, %374, !dbg !46
  %376 = fadd float %311, %368, !dbg !47
  %377 = fmul float %369, %369, !dbg !48
  %378 = fmul float %358, %377, !dbg !49
  %379 = fmul float %373, %378, !dbg !50
  %380 = fadd float %376, %379, !dbg !51
  %381 = fsub float %296, %375, !dbg !38
  %382 = fadd float %328, %370, !dbg !41
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !42
  %384 = tail call float @llvm.nvvm.div.full(float %328, float %382), !dbg !43
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !44
  %386 = fmul float %385, %381, !dbg !45
  %387 = fadd float %375, %386, !dbg !46
  %388 = fadd float %312, %380, !dbg !47
  %389 = fmul float %381, %381, !dbg !48
  %390 = fmul float %370, %389, !dbg !49
  %391 = fmul float %385, %390, !dbg !50
  %392 = fadd float %388, %391, !dbg !51
  %393 = fsub float %297, %387, !dbg !38
  %394 = fadd float %329, %382, !dbg !41
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !42
  %396 = tail call float @llvm.nvvm.div.full(float %329, float %394), !dbg !43
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !44
  %398 = fmul float %397, %393, !dbg !45
  %399 = fadd float %387, %398, !dbg !46
  %400 = fadd float %313, %392, !dbg !47
  %401 = fmul float %393, %393, !dbg !48
  %402 = fmul float %382, %401, !dbg !49
  %403 = fmul float %397, %402, !dbg !50
  %404 = fadd float %400, %403, !dbg !51
  %405 = fsub float %298, %399, !dbg !38
  %406 = fadd float %330, %394, !dbg !41
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !42
  %408 = tail call float @llvm.nvvm.div.full(float %330, float %406), !dbg !43
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !44
  %410 = fmul float %409, %405, !dbg !45
  %411 = fadd float %399, %410, !dbg !46
  %412 = fadd float %314, %404, !dbg !47
  %413 = fmul float %405, %405, !dbg !48
  %414 = fmul float %394, %413, !dbg !49
  %415 = fmul float %409, %414, !dbg !50
  %416 = fadd float %412, %415, !dbg !51
  %417 = fsub float %299, %411, !dbg !38
  %418 = fadd float %331, %406, !dbg !41
  %419 = fcmp oeq float %418, 0.000000e+00, !dbg !42
  %420 = tail call float @llvm.nvvm.div.full(float %331, float %418), !dbg !43
  %421 = select i1 %419, float 0.000000e+00, float %420, !dbg !44
  %422 = fmul float %421, %417, !dbg !45
  %423 = fadd float %411, %422, !dbg !46
  %424 = fadd float %315, %416, !dbg !47
  %425 = fmul float %417, %417, !dbg !48
  %426 = fmul float %406, %425, !dbg !49
  %427 = fmul float %421, %426, !dbg !50
  %428 = fadd float %424, %427, !dbg !51
  %429 = fsub float %300, %423, !dbg !38
  %430 = fadd float %332, %418, !dbg !41
  %431 = fcmp oeq float %430, 0.000000e+00, !dbg !42
  %432 = tail call float @llvm.nvvm.div.full(float %332, float %430), !dbg !43
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !44
  %434 = fmul float %433, %429, !dbg !45
  %435 = fadd float %423, %434, !dbg !46
  %436 = fadd float %316, %428, !dbg !47
  %437 = fmul float %429, %429, !dbg !48
  %438 = fmul float %418, %437, !dbg !49
  %439 = fmul float %433, %438, !dbg !50
  %440 = fadd float %436, %439, !dbg !51
  %441 = fsub float %301, %435, !dbg !38
  %442 = fadd float %333, %430, !dbg !41
  %443 = fcmp oeq float %442, 0.000000e+00, !dbg !42
  %444 = tail call float @llvm.nvvm.div.full(float %333, float %442), !dbg !43
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !44
  %446 = fmul float %445, %441, !dbg !45
  %447 = fadd float %435, %446, !dbg !46
  %448 = fadd float %317, %440, !dbg !47
  %449 = fmul float %441, %441, !dbg !48
  %450 = fmul float %430, %449, !dbg !49
  %451 = fmul float %445, %450, !dbg !50
  %452 = fadd float %448, %451, !dbg !51
  %453 = fsub float %302, %447, !dbg !38
  %454 = fadd float %334, %442, !dbg !41
  %455 = fcmp oeq float %454, 0.000000e+00, !dbg !42
  %456 = tail call float @llvm.nvvm.div.full(float %334, float %454), !dbg !43
  %457 = select i1 %455, float 0.000000e+00, float %456, !dbg !44
  %458 = fmul float %457, %453, !dbg !45
  %459 = fadd float %447, %458, !dbg !46
  %460 = fadd float %318, %452, !dbg !47
  %461 = fmul float %453, %453, !dbg !48
  %462 = fmul float %442, %461, !dbg !49
  %463 = fmul float %457, %462, !dbg !50
  %464 = fadd float %460, %463, !dbg !51
  %465 = fsub float %303, %459, !dbg !38
  %466 = fadd float %335, %454, !dbg !41
  %467 = fcmp oeq float %466, 0.000000e+00, !dbg !42
  %468 = tail call float @llvm.nvvm.div.full(float %335, float %466), !dbg !43
  %469 = select i1 %467, float 0.000000e+00, float %468, !dbg !44
  %470 = fmul float %469, %465, !dbg !45
  %471 = fadd float %459, %470, !dbg !46
  %472 = fadd float %319, %464, !dbg !47
  %473 = fmul float %465, %465, !dbg !48
  %474 = fmul float %454, %473, !dbg !49
  %475 = fmul float %469, %474, !dbg !50
  %476 = fadd float %472, %475, !dbg !51
  %477 = fsub float %304, %471, !dbg !38
  %478 = fadd float %336, %466, !dbg !41
  %479 = fcmp oeq float %478, 0.000000e+00, !dbg !42
  %480 = tail call float @llvm.nvvm.div.full(float %336, float %478), !dbg !43
  %481 = select i1 %479, float 0.000000e+00, float %480, !dbg !44
  %482 = fmul float %481, %477, !dbg !45
  %483 = fadd float %471, %482, !dbg !46
  %484 = fadd float %320, %476, !dbg !47
  %485 = fmul float %477, %477, !dbg !48
  %486 = fmul float %466, %485, !dbg !49
  %487 = fmul float %481, %486, !dbg !50
  %488 = fadd float %484, %487, !dbg !51
  %489 = fsub float %305, %483, !dbg !38
  %490 = fadd float %337, %478, !dbg !41
  %491 = fcmp oeq float %490, 0.000000e+00, !dbg !42
  %492 = tail call float @llvm.nvvm.div.full(float %337, float %490), !dbg !43
  %493 = select i1 %491, float 0.000000e+00, float %492, !dbg !44
  %494 = fmul float %493, %489, !dbg !45
  %495 = fadd float %483, %494, !dbg !46
  %496 = fadd float %321, %488, !dbg !47
  %497 = fmul float %489, %489, !dbg !48
  %498 = fmul float %478, %497, !dbg !49
  %499 = fmul float %493, %498, !dbg !50
  %500 = fadd float %496, %499, !dbg !51
  %501 = fsub float %306, %495, !dbg !38
  %502 = fadd float %338, %490, !dbg !41
  %503 = fcmp oeq float %502, 0.000000e+00, !dbg !42
  %504 = tail call float @llvm.nvvm.div.full(float %338, float %502), !dbg !43
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !44
  %506 = fmul float %505, %501, !dbg !45
  %507 = fadd float %495, %506, !dbg !46
  %508 = fadd float %322, %500, !dbg !47
  %509 = fmul float %501, %501, !dbg !48
  %510 = fmul float %490, %509, !dbg !49
  %511 = fmul float %505, %510, !dbg !50
  %512 = fadd float %508, %511, !dbg !51
  %513 = fsub float %307, %507, !dbg !38
  %514 = fadd float %339, %502, !dbg !41
  %515 = fcmp oeq float %514, 0.000000e+00, !dbg !42
  %516 = tail call float @llvm.nvvm.div.full(float %339, float %514), !dbg !43
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !44
  %518 = fmul float %517, %513, !dbg !45
  %519 = fadd float %507, %518, !dbg !46
  %520 = fadd float %323, %512, !dbg !47
  %521 = fmul float %513, %513, !dbg !48
  %522 = fmul float %502, %521, !dbg !49
  %523 = fmul float %517, %522, !dbg !50
  %524 = fadd float %520, %523, !dbg !51
  %525 = bitcast float %519 to i32, !dbg !52
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 16, i32 31), !dbg !52
  %527 = bitcast i32 %526 to float, !dbg !52
  %528 = bitcast float %524 to i32, !dbg !52
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 16, i32 31), !dbg !52
  %530 = bitcast i32 %529 to float, !dbg !52
  %531 = bitcast float %514 to i32, !dbg !52
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 16, i32 31), !dbg !52
  %533 = bitcast i32 %532 to float, !dbg !52
  %534 = fsub float %527, %519, !dbg !38
  %535 = fadd float %514, %533, !dbg !41
  %536 = fcmp oeq float %535, 0.000000e+00, !dbg !42
  %537 = tail call float @llvm.nvvm.div.full(float %533, float %535), !dbg !43
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !44
  %539 = fmul float %538, %534, !dbg !45
  %540 = fadd float %519, %539, !dbg !46
  %541 = fadd float %524, %530, !dbg !47
  %542 = fmul float %534, %534, !dbg !48
  %543 = fmul float %514, %542, !dbg !49
  %544 = fmul float %538, %543, !dbg !50
  %545 = fadd float %541, %544, !dbg !51
  %546 = bitcast float %540 to i32, !dbg !52
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !52
  %548 = bitcast i32 %547 to float, !dbg !52
  %549 = bitcast float %545 to i32, !dbg !52
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 8, i32 31), !dbg !52
  %551 = bitcast i32 %550 to float, !dbg !52
  %552 = bitcast float %535 to i32, !dbg !52
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !52
  %554 = bitcast i32 %553 to float, !dbg !52
  %555 = fsub float %548, %540, !dbg !38
  %556 = fadd float %535, %554, !dbg !41
  %557 = fcmp oeq float %556, 0.000000e+00, !dbg !42
  %558 = tail call float @llvm.nvvm.div.full(float %554, float %556), !dbg !43
  %559 = select i1 %557, float 0.000000e+00, float %558, !dbg !44
  %560 = fmul float %559, %555, !dbg !45
  %561 = fadd float %540, %560, !dbg !46
  %562 = fadd float %545, %551, !dbg !47
  %563 = fmul float %555, %555, !dbg !48
  %564 = fmul float %535, %563, !dbg !49
  %565 = fmul float %559, %564, !dbg !50
  %566 = fadd float %562, %565, !dbg !51
  %567 = bitcast float %561 to i32, !dbg !52
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !52
  %569 = bitcast i32 %568 to float, !dbg !52
  %570 = bitcast float %566 to i32, !dbg !52
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 4, i32 31), !dbg !52
  %572 = bitcast i32 %571 to float, !dbg !52
  %573 = bitcast float %556 to i32, !dbg !52
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 4, i32 31), !dbg !52
  %575 = bitcast i32 %574 to float, !dbg !52
  %576 = fsub float %569, %561, !dbg !38
  %577 = fadd float %556, %575, !dbg !41
  %578 = fcmp oeq float %577, 0.000000e+00, !dbg !42
  %579 = tail call float @llvm.nvvm.div.full(float %575, float %577), !dbg !43
  %580 = select i1 %578, float 0.000000e+00, float %579, !dbg !44
  %581 = fmul float %580, %576, !dbg !45
  %582 = fadd float %561, %581, !dbg !46
  %583 = fadd float %566, %572, !dbg !47
  %584 = fmul float %576, %576, !dbg !48
  %585 = fmul float %556, %584, !dbg !49
  %586 = fmul float %580, %585, !dbg !50
  %587 = fadd float %583, %586, !dbg !51
  %588 = bitcast float %582 to i32, !dbg !52
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !52
  %590 = bitcast i32 %589 to float, !dbg !52
  %591 = bitcast float %587 to i32, !dbg !52
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 2, i32 31), !dbg !52
  %593 = bitcast i32 %592 to float, !dbg !52
  %594 = bitcast float %577 to i32, !dbg !52
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !52
  %596 = bitcast i32 %595 to float, !dbg !52
  %597 = fsub float %590, %582, !dbg !38
  %598 = fadd float %577, %596, !dbg !41
  %599 = fcmp oeq float %598, 0.000000e+00, !dbg !42
  %600 = tail call float @llvm.nvvm.div.full(float %596, float %598), !dbg !43
  %601 = select i1 %599, float 0.000000e+00, float %600, !dbg !44
  %602 = fmul float %601, %597, !dbg !45
  %603 = fadd float %582, %602, !dbg !46
  %604 = fadd float %587, %593, !dbg !47
  %605 = fmul float %597, %597, !dbg !48
  %606 = fmul float %577, %605, !dbg !49
  %607 = fmul float %601, %606, !dbg !50
  %608 = fadd float %604, %607, !dbg !51
  %609 = bitcast float %603 to i32, !dbg !52
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !52
  %611 = bitcast i32 %610 to float, !dbg !52
  %612 = bitcast float %608 to i32, !dbg !52
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !52
  %614 = bitcast i32 %613 to float, !dbg !52
  %615 = bitcast float %598 to i32, !dbg !52
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !52
  %617 = bitcast i32 %616 to float, !dbg !52
  %618 = fsub float %611, %603, !dbg !38
  %619 = fadd float %598, %617, !dbg !41
  %620 = fcmp oeq float %619, 0.000000e+00, !dbg !42
  %621 = tail call float @llvm.nvvm.div.full(float %617, float %619), !dbg !43
  %622 = select i1 %620, float 0.000000e+00, float %621, !dbg !44
  %623 = fmul float %622, %618, !dbg !45
  %624 = fadd float %603, %623, !dbg !46
  %625 = fadd float %608, %614, !dbg !47
  %626 = fmul float %618, %618, !dbg !48
  %627 = fmul float %598, %626, !dbg !49
  %628 = fmul float %622, %627, !dbg !50
  %629 = fadd float %625, %628, !dbg !51
  %630 = and i32 %340, 3, !dbg !52
  %631 = icmp eq i32 %24, 0, !dbg !52
  %632 = lshr exact i32 %23, 5, !dbg !52
  %633 = or disjoint i32 %632, %630, !dbg !52
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %633, !dbg !52
  %635 = bitcast float %624 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %634, <1 x i32> %635, i1 %631) #5, !dbg !52
  %636 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %633, !dbg !52
  %637 = bitcast float %629 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %636, <1 x i32> %637, i1 %631) #5, !dbg !52
  %638 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %633, !dbg !52
  %639 = bitcast float %619 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %639, i1 %631) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %640 = icmp slt i32 %22, 8, !dbg !52
  %641 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !52
  %642 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %640) #5, !dbg !52
  %643 = bitcast i32 %642 to float, !dbg !52
  %644 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %22, !dbg !52
  %645 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %640) #5, !dbg !52
  %646 = bitcast i32 %645 to float, !dbg !52
  %647 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !52
  %648 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %647, i1 %640) #5, !dbg !52
  %649 = bitcast i32 %648 to float, !dbg !52
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 2, i32 31), !dbg !52
  %651 = bitcast i32 %650 to float, !dbg !52
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 2, i32 31), !dbg !52
  %653 = bitcast i32 %652 to float, !dbg !52
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 2, i32 31), !dbg !52
  %655 = bitcast i32 %654 to float, !dbg !52
  %656 = fsub float %651, %643, !dbg !38
  %657 = fadd float %649, %655, !dbg !41
  %658 = fcmp oeq float %657, 0.000000e+00, !dbg !42
  %659 = tail call float @llvm.nvvm.div.full(float %655, float %657), !dbg !43
  %660 = select i1 %658, float 0.000000e+00, float %659, !dbg !44
  %661 = fmul float %656, %660, !dbg !45
  %662 = fadd float %661, %643, !dbg !46
  %663 = fadd float %646, %653, !dbg !47
  %664 = fmul float %656, %656, !dbg !48
  %665 = fmul float %664, %649, !dbg !49
  %666 = fmul float %665, %660, !dbg !50
  %667 = fadd float %663, %666, !dbg !51
  %668 = bitcast float %662 to i32, !dbg !52
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %668, i32 1, i32 31), !dbg !52
  %670 = bitcast i32 %669 to float, !dbg !52
  %671 = bitcast float %667 to i32, !dbg !52
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 1, i32 31), !dbg !52
  %673 = bitcast i32 %672 to float, !dbg !52
  %674 = bitcast float %657 to i32, !dbg !52
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !52
  %676 = bitcast i32 %675 to float, !dbg !52
  %677 = fsub float %670, %662, !dbg !38
  %678 = fadd float %657, %676, !dbg !41
  %679 = fcmp oeq float %678, 0.000000e+00, !dbg !42
  %680 = tail call float @llvm.nvvm.div.full(float %676, float %678), !dbg !43
  %681 = select i1 %679, float 0.000000e+00, float %680, !dbg !44
  %682 = fmul float %677, %681, !dbg !45
  %683 = fadd float %662, %682, !dbg !46
  %684 = fadd float %667, %673, !dbg !47
  %685 = fmul float %677, %677, !dbg !48
  %686 = fmul float %657, %685, !dbg !49
  %687 = fmul float %681, %686, !dbg !50
  %688 = fadd float %684, %687, !dbg !51
  %689 = and i32 %22, 3, !dbg !52
  %690 = icmp eq i32 %689, 0, !dbg !52
  %691 = and i1 %640, %690, !dbg !52
  %692 = bitcast float %683 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %692, i1 %691) #5, !dbg !52
  %693 = bitcast float %688 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %693, i1 %691) #5, !dbg !52
  %694 = bitcast float %678 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %694, i1 %691) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %695 = getelementptr float, ptr addrspace(3) @global_smem, i32 %632, !dbg !52
  %696 = load float, ptr addrspace(3) %695, align 16, !dbg !52
  %697 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %632, !dbg !52
  %698 = load float, ptr addrspace(3) %697, align 16, !dbg !52
  %699 = mul i32 %20, 6144, !dbg !53
  %700 = add i32 %699, 3072, !dbg !53
  %701 = tail call float @llvm.nvvm.div.full(float %698, float 3.072000e+03), !dbg !54
  %702 = fadd float %701, 0x3EB0C6F7A0000000, !dbg !55
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %704 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %705 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %706 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %707 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %708 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %709 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %716 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %717 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %718 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i95 = icmp eq i32 %718, 0, !dbg !56
  br i1 %.not.i95, label %721, label %719, !dbg !56

719:                                              ; preds = %__nv_rsqrtf.exit
  %720 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %702), !dbg !56
  br label %__nv_rsqrtf.exit97, !dbg !56

721:                                              ; preds = %__nv_rsqrtf.exit
  %722 = tail call float @llvm.nvvm.rsqrt.approx.f(float %702), !dbg !56
  br label %__nv_rsqrtf.exit97, !dbg !56

__nv_rsqrtf.exit97:                               ; preds = %719, %721
  %.0.i96 = phi float [ %720, %719 ], [ %722, %721 ], !dbg !56
  %723 = and i32 %28, 4080
  %724 = lshr i32 %28, 9
  %725 = and i32 %724, 4
  %726 = or disjoint i32 %725, %723
  %727 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %726
  %728 = or disjoint i32 %723, 4
  %729 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %725
  %730 = getelementptr inbounds nuw float, ptr addrspace(3) %729, i32 %728
  %731 = or disjoint i32 %726, 8
  %732 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %731
  %733 = or disjoint i32 %723, 12
  %734 = getelementptr inbounds nuw float, ptr addrspace(3) %729, i32 %733
  %735 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %736 = or disjoint i32 %32, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %736
  %737 = or disjoint i32 %32, 2052
  %gep102 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %737
  %738 = zext nneg i32 %344 to i64, !dbg !57
  %739 = zext nneg i32 %32 to i64, !dbg !57
  %740 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep, i32 8
  %741 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep102, i32 8
  br label %742, !dbg !57

742:                                              ; preds = %__nv_rsqrtf.exit97, %742
  %743 = phi i1 [ true, %__nv_rsqrtf.exit97 ], [ false, %742 ]
  %indvars.iv182 = phi i64 [ 0, %__nv_rsqrtf.exit97 ], [ 2048, %742 ]
  %744 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %1015, %742 ]
  %745 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %1016, %742 ]
  %746 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit97 ], [ %1030, %742 ]
  %747 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit97 ], [ %1033, %742 ]
  %748 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %1022, %742 ]
  %749 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %1019, %742 ]
  %750 = or disjoint i64 %indvars.iv182, %739, !dbg !58
  %751 = or disjoint i64 %indvars.iv182, %738, !dbg !58
  %752 = or disjoint i64 %indvars.iv182, %35, !dbg !58
  %753 = icmp samesign ult i64 %750, 3072, !dbg !59
  %754 = icmp samesign ult i64 %752, 3072, !dbg !59
  %755 = trunc nuw nsw i64 %752 to i32, !dbg !60
  %756 = add i32 %33, %755, !dbg !60
  %757 = trunc nuw nsw i64 %indvars.iv182 to i32, !dbg !60
  %758 = add i32 %34, %757, !dbg !60
  %759 = trunc nuw nsw i64 %750 to i32, !dbg !60
  %760 = add i32 %699, %759, !dbg !60
  %761 = add i32 %700, %759, !dbg !60
  %762 = sext i32 %756 to i64, !dbg !61
  %763 = getelementptr bfloat, ptr addrspace(1) %0, i64 %762, !dbg !61
  %764 = sext i32 %758 to i64, !dbg !61
  %765 = getelementptr bfloat, ptr addrspace(1) %0, i64 %764, !dbg !61
  %766 = and i1 %27, %753, !dbg !62
  %767 = and i1 %26, %754, !dbg !62
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %763, i1 %767) #5, !dbg !63
  %769 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !63
  %770 = bitcast i32 %769 to <2 x bfloat>, !dbg !63
  %771 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !63
  %772 = bitcast i32 %771 to <2 x bfloat>, !dbg !63
  %773 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !63
  %774 = bitcast i32 %773 to <2 x bfloat>, !dbg !63
  %775 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !63
  %776 = bitcast i32 %775 to <2 x bfloat>, !dbg !63
  %777 = extractelement <2 x bfloat> %770, i64 0, !dbg !63
  %778 = extractelement <2 x bfloat> %770, i64 1, !dbg !63
  %779 = extractelement <2 x bfloat> %772, i64 0, !dbg !63
  %780 = extractelement <2 x bfloat> %772, i64 1, !dbg !63
  %781 = extractelement <2 x bfloat> %774, i64 0, !dbg !63
  %782 = extractelement <2 x bfloat> %774, i64 1, !dbg !63
  %783 = extractelement <2 x bfloat> %776, i64 0, !dbg !63
  %784 = extractelement <2 x bfloat> %776, i64 1, !dbg !63
  %785 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %765, i1 %767) #5, !dbg !63
  %786 = extractvalue { i32, i32, i32, i32 } %785, 0, !dbg !63
  %787 = bitcast i32 %786 to <2 x bfloat>, !dbg !63
  %788 = extractvalue { i32, i32, i32, i32 } %785, 1, !dbg !63
  %789 = bitcast i32 %788 to <2 x bfloat>, !dbg !63
  %790 = extractvalue { i32, i32, i32, i32 } %785, 2, !dbg !63
  %791 = bitcast i32 %790 to <2 x bfloat>, !dbg !63
  %792 = extractvalue { i32, i32, i32, i32 } %785, 3, !dbg !63
  %793 = bitcast i32 %792 to <2 x bfloat>, !dbg !63
  %794 = extractelement <2 x bfloat> %787, i64 0, !dbg !63
  %795 = extractelement <2 x bfloat> %787, i64 1, !dbg !63
  %796 = extractelement <2 x bfloat> %789, i64 0, !dbg !63
  %797 = extractelement <2 x bfloat> %789, i64 1, !dbg !63
  %798 = extractelement <2 x bfloat> %791, i64 0, !dbg !63
  %799 = extractelement <2 x bfloat> %791, i64 1, !dbg !63
  %800 = extractelement <2 x bfloat> %793, i64 0, !dbg !63
  %801 = extractelement <2 x bfloat> %793, i64 1, !dbg !63
  %802 = fpext bfloat %777 to float, !dbg !64
  %803 = fpext bfloat %778 to float, !dbg !64
  %804 = fpext bfloat %779 to float, !dbg !64
  %805 = fpext bfloat %780 to float, !dbg !64
  %806 = fpext bfloat %781 to float, !dbg !64
  %807 = fpext bfloat %782 to float, !dbg !64
  %808 = fpext bfloat %783 to float, !dbg !64
  %809 = fpext bfloat %784 to float, !dbg !64
  %810 = fpext bfloat %794 to float, !dbg !64
  %811 = fpext bfloat %795 to float, !dbg !64
  %812 = fpext bfloat %796 to float, !dbg !64
  %813 = fpext bfloat %797 to float, !dbg !64
  %814 = fpext bfloat %798 to float, !dbg !64
  %815 = fpext bfloat %799 to float, !dbg !64
  %816 = fpext bfloat %800 to float, !dbg !64
  %817 = fpext bfloat %801 to float, !dbg !64
  %818 = add nuw nsw i64 %750, 3072, !dbg !65
  %819 = getelementptr float, ptr addrspace(1) %1, i64 %818, !dbg !66
  %820 = getelementptr float, ptr addrspace(1) %1, i64 %751, !dbg !66
  %821 = getelementptr i8, ptr addrspace(1) %820, i64 12288, !dbg !66
  %822 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %819, i1 %753) #5, !dbg !67
  %823 = extractvalue { i32, i32, i32, i32 } %822, 0, !dbg !67
  %824 = extractvalue { i32, i32, i32, i32 } %822, 1, !dbg !67
  %825 = extractvalue { i32, i32, i32, i32 } %822, 2, !dbg !67
  %826 = extractvalue { i32, i32, i32, i32 } %822, 3, !dbg !67
  %827 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %821, i1 %753) #5, !dbg !67
  %828 = extractvalue { i32, i32, i32, i32 } %827, 0, !dbg !67
  %829 = extractvalue { i32, i32, i32, i32 } %827, 1, !dbg !67
  %830 = extractvalue { i32, i32, i32, i32 } %827, 2, !dbg !67
  %831 = extractvalue { i32, i32, i32, i32 } %827, 3, !dbg !67
  %832 = getelementptr bfloat, ptr addrspace(1) %2, i64 %818, !dbg !68
  %833 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %832, i1 %753) #5, !dbg !69
  %834 = extractvalue { i32, i32, i32, i32 } %833, 0, !dbg !69
  %835 = bitcast i32 %834 to <2 x bfloat>, !dbg !69
  %836 = extractvalue { i32, i32, i32, i32 } %833, 1, !dbg !69
  %837 = bitcast i32 %836 to <2 x bfloat>, !dbg !69
  %838 = extractvalue { i32, i32, i32, i32 } %833, 2, !dbg !69
  %839 = bitcast i32 %838 to <2 x bfloat>, !dbg !69
  %840 = extractvalue { i32, i32, i32, i32 } %833, 3, !dbg !69
  %841 = bitcast i32 %840 to <2 x bfloat>, !dbg !69
  %842 = getelementptr float, ptr addrspace(1) %1, i64 %750, !dbg !70
  %843 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %842, i1 %753) #5, !dbg !71
  %844 = extractvalue { i32, i32, i32, i32 } %843, 0, !dbg !71
  %845 = extractvalue { i32, i32, i32, i32 } %843, 1, !dbg !71
  %846 = extractvalue { i32, i32, i32, i32 } %843, 2, !dbg !71
  %847 = extractvalue { i32, i32, i32, i32 } %843, 3, !dbg !71
  %848 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %820, i1 %753) #5, !dbg !71
  %849 = extractvalue { i32, i32, i32, i32 } %848, 0, !dbg !71
  %850 = extractvalue { i32, i32, i32, i32 } %848, 1, !dbg !71
  %851 = extractvalue { i32, i32, i32, i32 } %848, 2, !dbg !71
  %852 = extractvalue { i32, i32, i32, i32 } %848, 3, !dbg !71
  %853 = getelementptr bfloat, ptr addrspace(1) %2, i64 %750, !dbg !72
  %854 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %853, i1 %753) #5, !dbg !73
  %855 = extractvalue { i32, i32, i32, i32 } %854, 0, !dbg !73
  %856 = bitcast i32 %855 to <2 x bfloat>, !dbg !73
  %857 = extractvalue { i32, i32, i32, i32 } %854, 1, !dbg !73
  %858 = bitcast i32 %857 to <2 x bfloat>, !dbg !73
  %859 = extractvalue { i32, i32, i32, i32 } %854, 2, !dbg !73
  %860 = bitcast i32 %859 to <2 x bfloat>, !dbg !73
  %861 = extractvalue { i32, i32, i32, i32 } %854, 3, !dbg !73
  %862 = bitcast i32 %861 to <2 x bfloat>, !dbg !73
  %863 = fsub float %802, %696, !dbg !74
  %864 = fsub float %803, %696, !dbg !74
  %865 = fsub float %804, %696, !dbg !74
  %866 = fsub float %805, %696, !dbg !74
  %867 = fsub float %806, %696, !dbg !74
  %868 = fsub float %807, %696, !dbg !74
  %869 = fsub float %808, %696, !dbg !74
  %870 = fsub float %809, %696, !dbg !74
  %871 = fsub float %810, %696, !dbg !74
  %872 = fsub float %811, %696, !dbg !74
  %873 = fsub float %812, %696, !dbg !74
  %874 = fsub float %813, %696, !dbg !74
  %875 = fsub float %814, %696, !dbg !74
  %876 = fsub float %815, %696, !dbg !74
  %877 = fsub float %816, %696, !dbg !74
  %878 = fsub float %817, %696, !dbg !74
  %879 = fmul float %.0.i96, %863, !dbg !75
  %880 = fmul float %.0.i96, %864, !dbg !75
  %881 = fmul float %.0.i96, %865, !dbg !75
  %882 = fmul float %.0.i96, %866, !dbg !75
  %883 = fmul float %.0.i96, %867, !dbg !75
  %884 = fmul float %.0.i96, %868, !dbg !75
  %885 = fmul float %.0.i96, %869, !dbg !75
  %886 = fmul float %.0.i96, %870, !dbg !75
  %887 = fmul float %.0.i96, %871, !dbg !75
  %888 = fmul float %.0.i96, %872, !dbg !75
  %889 = fmul float %.0.i96, %873, !dbg !75
  %890 = fmul float %.0.i96, %874, !dbg !75
  %891 = fmul float %.0.i96, %875, !dbg !75
  %892 = fmul float %.0.i96, %876, !dbg !75
  %893 = fmul float %.0.i96, %877, !dbg !75
  %894 = fmul float %.0.i96, %878, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %895 = bitcast float %879 to i32, !dbg !75
  %896 = bitcast float %880 to i32, !dbg !75
  %897 = bitcast float %881 to i32, !dbg !75
  %898 = bitcast float %882 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %727, i32 %895, i32 %896, i32 %897, i32 %898, i1 true) #5, !dbg !75
  %899 = bitcast float %883 to i32, !dbg !75
  %900 = bitcast float %884 to i32, !dbg !75
  %901 = bitcast float %885 to i32, !dbg !75
  %902 = bitcast float %886 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %730, i32 %899, i32 %900, i32 %901, i32 %902, i1 true) #5, !dbg !75
  %903 = bitcast float %887 to i32, !dbg !75
  %904 = bitcast float %888 to i32, !dbg !75
  %905 = bitcast float %889 to i32, !dbg !75
  %906 = bitcast float %890 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %732, i32 %903, i32 %904, i32 %905, i32 %906, i1 true) #5, !dbg !75
  %907 = bitcast float %891 to i32, !dbg !75
  %908 = bitcast float %892 to i32, !dbg !75
  %909 = bitcast float %893 to i32, !dbg !75
  %910 = bitcast float %894 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %734, i32 %907, i32 %908, i32 %909, i32 %910, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %911 = fcmp uno <16 x float> %747, zeroinitializer, !dbg !76
  %912 = fcmp uno float %744, 0.000000e+00, !dbg !78
  %913 = fcmp uno float %745, 0.000000e+00, !dbg !78
  %914 = fcmp uno <4 x float> %749, zeroinitializer, !dbg !78
  %915 = fcmp uno <8 x float> %748, zeroinitializer, !dbg !78
  %916 = fcmp uno <2 x float> %746, zeroinitializer, !dbg !76
  %917 = insertelement <2 x i32> poison, i32 %823, i64 0, !dbg !67
  %918 = insertelement <2 x i32> %917, i32 %824, i64 1, !dbg !67
  %919 = bitcast <2 x i32> %918 to <2 x float>, !dbg !67
  %920 = fpext <2 x bfloat> %835 to <2 x float>, !dbg !80
  %921 = insertelement <2 x i32> poison, i32 %844, i64 0, !dbg !71
  %922 = insertelement <2 x i32> %921, i32 %845, i64 1, !dbg !71
  %923 = bitcast <2 x i32> %922 to <2 x float>, !dbg !71
  %924 = fpext <2 x bfloat> %856 to <2 x float>, !dbg !81
  %925 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !75
  %926 = fadd <2 x float> %919, %920, !dbg !82
  %927 = fadd <2 x float> %926, splat (float 1.000000e+00), !dbg !83
  %928 = fmul <2 x float> %927, %925, !dbg !84
  %929 = fadd <2 x float> %923, %924, !dbg !85
  %930 = fadd <2 x float> %929, %928, !dbg !86
  %931 = extractelement <2 x float> %930, i64 0, !dbg !87
  %932 = extractelement <2 x float> %930, i64 1, !dbg !87
  %933 = fcmp ogt <2 x float> %746, %930, !dbg !88
  %934 = or <2 x i1> %916, %933, !dbg !89
  %935 = select <2 x i1> %934, <2 x float> %746, <2 x float> %930, !dbg !90
  %936 = insertelement <2 x i32> poison, i32 %825, i64 0, !dbg !67
  %937 = insertelement <2 x i32> %936, i32 %826, i64 1, !dbg !67
  %938 = bitcast <2 x i32> %937 to <2 x float>, !dbg !67
  %939 = insertelement <4 x i32> poison, i32 %828, i64 0, !dbg !67
  %940 = insertelement <4 x i32> %939, i32 %829, i64 1, !dbg !67
  %941 = insertelement <4 x i32> %940, i32 %830, i64 2, !dbg !67
  %942 = insertelement <4 x i32> %941, i32 %831, i64 3, !dbg !67
  %943 = bitcast <4 x i32> %942 to <4 x float>, !dbg !67
  %944 = fpext <2 x bfloat> %837 to <2 x float>, !dbg !80
  %945 = shufflevector <2 x bfloat> %839, <2 x bfloat> %841, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %946 = fpext <4 x bfloat> %945 to <4 x float>, !dbg !80
  %947 = insertelement <2 x i32> poison, i32 %846, i64 0, !dbg !71
  %948 = insertelement <2 x i32> %947, i32 %847, i64 1, !dbg !71
  %949 = bitcast <2 x i32> %948 to <2 x float>, !dbg !71
  %950 = insertelement <4 x i32> poison, i32 %849, i64 0, !dbg !71
  %951 = insertelement <4 x i32> %950, i32 %850, i64 1, !dbg !71
  %952 = insertelement <4 x i32> %951, i32 %851, i64 2, !dbg !71
  %953 = insertelement <4 x i32> %952, i32 %852, i64 3, !dbg !71
  %954 = bitcast <4 x i32> %953 to <4 x float>, !dbg !71
  %955 = fpext <2 x bfloat> %858 to <2 x float>, !dbg !81
  %956 = shufflevector <2 x bfloat> %860, <2 x bfloat> %862, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %957 = fpext <4 x bfloat> %956 to <4 x float>, !dbg !81
  %958 = load <8 x float>, ptr addrspace(3) %735, align 16, !dbg !75
  %959 = load <4 x float>, ptr addrspace(3) %740, align 8, !dbg !75
  %960 = load <2 x float>, ptr addrspace(3) %741, align 8, !dbg !75
  %961 = fadd <2 x float> %938, %944, !dbg !82
  %962 = fadd <4 x float> %943, %946, !dbg !82
  %963 = fadd <2 x float> %961, splat (float 1.000000e+00), !dbg !83
  %964 = fadd <4 x float> %962, splat (float 1.000000e+00), !dbg !83
  %965 = fadd <2 x float> %949, %955, !dbg !85
  %966 = fadd <4 x float> %954, %957, !dbg !85
  %967 = shufflevector <2 x float> %927, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %968 = shufflevector <4 x float> %964, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %969 = shufflevector <8 x float> %967, <8 x float> %968, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !84
  %970 = shufflevector <2 x float> %963, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %971 = shufflevector <8 x float> %969, <8 x float> %970, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !84
  %972 = shufflevector <8 x float> %971, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !84
  %973 = shufflevector <8 x float> %958, <8 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !84
  %974 = shufflevector <8 x float> %958, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %975 = shufflevector <16 x float> %974, <16 x float> %973, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !84
  %976 = shufflevector <4 x float> %959, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %977 = shufflevector <16 x float> %975, <16 x float> %976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !84
  %978 = shufflevector <2 x float> %960, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %979 = shufflevector <16 x float> %977, <16 x float> %978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !84
  %980 = fmul <16 x float> %972, %979, !dbg !84
  %981 = shufflevector <2 x float> %929, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %982 = shufflevector <4 x float> %966, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %983 = shufflevector <8 x float> %981, <8 x float> %982, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !86
  %984 = shufflevector <2 x float> %965, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %985 = shufflevector <8 x float> %983, <8 x float> %984, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !86
  %986 = shufflevector <8 x float> %985, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !86
  %987 = fadd <16 x float> %986, %980, !dbg !86
  %988 = extractelement <16 x float> %987, i64 2, !dbg !87
  %989 = fcmp olt float %744, %988, !dbg !91
  %990 = extractelement <16 x float> %987, i64 3, !dbg !87
  %991 = fcmp olt float %745, %990, !dbg !91
  %992 = extractelement <16 x float> %987, i64 4, !dbg !87
  %993 = extractelement <16 x float> %987, i64 5, !dbg !87
  %994 = extractelement <16 x float> %987, i64 6, !dbg !87
  %995 = extractelement <16 x float> %987, i64 7, !dbg !87
  %996 = extractelement <16 x float> %987, i64 8, !dbg !87
  %997 = extractelement <16 x float> %987, i64 9, !dbg !87
  %998 = extractelement <16 x float> %987, i64 10, !dbg !87
  %999 = extractelement <16 x float> %987, i64 11, !dbg !87
  %1000 = extractelement <16 x float> %987, i64 12, !dbg !87
  %1001 = extractelement <16 x float> %987, i64 13, !dbg !87
  %1002 = or i1 %912, %989, !dbg !92
  %1003 = or i1 %913, %991, !dbg !92
  %1004 = select i1 %1002, float %744, float %988, !dbg !93
  %1005 = select i1 %1003, float %745, float %990, !dbg !93
  %1006 = shufflevector <2 x float> %930, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %1007 = shufflevector <16 x float> %1006, <16 x float> %987, <4 x i32> <i32 1, i32 0, i32 21, i32 20>, !dbg !91
  %1008 = fcmp olt <4 x float> %749, %1007, !dbg !91
  %1009 = or <4 x i1> %914, %1008, !dbg !92
  %1010 = select <4 x i1> %1009, <4 x float> %749, <4 x float> %1007, !dbg !93
  %1011 = shufflevector <16 x float> %987, <16 x float> poison, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>, !dbg !91
  %1012 = fcmp olt <8 x float> %748, %1011, !dbg !91
  %1013 = or <8 x i1> %915, %1012, !dbg !92
  %1014 = select <8 x i1> %1013, <8 x float> %748, <8 x float> %1011, !dbg !93
  %1015 = select i1 %766, float %1004, float %744, !dbg !94
  %1016 = select i1 %766, float %1005, float %745, !dbg !94
  %1017 = insertelement <4 x i1> poison, i1 %766, i64 0, !dbg !94
  %1018 = shufflevector <4 x i1> %1017, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !94
  %1019 = select <4 x i1> %1018, <4 x float> %1010, <4 x float> %749, !dbg !94
  %1020 = insertelement <8 x i1> poison, i1 %766, i64 0, !dbg !94
  %1021 = shufflevector <8 x i1> %1020, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !94
  %1022 = select <8 x i1> %1021, <8 x float> %1014, <8 x float> %748, !dbg !94
  %1023 = fcmp ogt <16 x float> %747, %987, !dbg !88
  %1024 = fcmp olt <16 x float> %747, %987, !dbg !88
  %1025 = shufflevector <16 x i1> %1023, <16 x i1> %1024, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !88
  %1026 = or <16 x i1> %911, %1025, !dbg !89
  %1027 = select <16 x i1> %1026, <16 x float> %747, <16 x float> %987, !dbg !90
  %1028 = insertelement <2 x i1> poison, i1 %766, i64 0, !dbg !95
  %1029 = shufflevector <2 x i1> %1028, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %1030 = select <2 x i1> %1029, <2 x float> %935, <2 x float> %746, !dbg !95
  %1031 = insertelement <16 x i1> poison, i1 %766, i64 0, !dbg !95
  %1032 = shufflevector <16 x i1> %1031, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !95
  %1033 = select <16 x i1> %1032, <16 x float> %1027, <16 x float> %747, !dbg !95
  %1034 = sext i32 %760 to i64, !dbg !96
  %1035 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1034, !dbg !96
  %1036 = sext i32 %761 to i64, !dbg !96
  %1037 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1036, !dbg !96
  %1038 = extractelement <16 x float> %987, i64 0, !dbg !87
  %1039 = fptrunc float %1038 to bfloat, !dbg !87
  %1040 = extractelement <16 x float> %987, i64 1, !dbg !87
  %1041 = fptrunc float %1040 to bfloat, !dbg !87
  %1042 = fptrunc float %988 to bfloat, !dbg !87
  %1043 = fptrunc float %990 to bfloat, !dbg !87
  %1044 = fptrunc float %992 to bfloat, !dbg !87
  %1045 = fptrunc float %993 to bfloat, !dbg !87
  %1046 = fptrunc float %994 to bfloat, !dbg !87
  %1047 = fptrunc float %995 to bfloat, !dbg !87
  %1048 = fptrunc float %931 to bfloat, !dbg !87
  %1049 = fptrunc float %932 to bfloat, !dbg !87
  %1050 = fptrunc float %996 to bfloat, !dbg !87
  %1051 = fptrunc float %997 to bfloat, !dbg !87
  %1052 = fptrunc float %998 to bfloat, !dbg !87
  %1053 = fptrunc float %999 to bfloat, !dbg !87
  %1054 = fptrunc float %1000 to bfloat, !dbg !87
  %1055 = fptrunc float %1001 to bfloat, !dbg !87
  %1056 = insertelement <2 x bfloat> poison, bfloat %1039, i64 0, !dbg !87
  %1057 = insertelement <2 x bfloat> %1056, bfloat %1041, i64 1, !dbg !87
  %1058 = bitcast <2 x bfloat> %1057 to i32, !dbg !87
  %1059 = insertelement <2 x bfloat> poison, bfloat %1042, i64 0, !dbg !87
  %1060 = insertelement <2 x bfloat> %1059, bfloat %1043, i64 1, !dbg !87
  %1061 = bitcast <2 x bfloat> %1060 to i32, !dbg !87
  %1062 = insertelement <2 x bfloat> poison, bfloat %1044, i64 0, !dbg !87
  %1063 = insertelement <2 x bfloat> %1062, bfloat %1045, i64 1, !dbg !87
  %1064 = bitcast <2 x bfloat> %1063 to i32, !dbg !87
  %1065 = insertelement <2 x bfloat> poison, bfloat %1046, i64 0, !dbg !87
  %1066 = insertelement <2 x bfloat> %1065, bfloat %1047, i64 1, !dbg !87
  %1067 = bitcast <2 x bfloat> %1066 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1058, i32 %1061, i32 %1064, i32 %1067, ptr addrspace(1) %1035, i1 %766) #5, !dbg !87
  %1068 = insertelement <2 x bfloat> poison, bfloat %1048, i64 0, !dbg !87
  %1069 = insertelement <2 x bfloat> %1068, bfloat %1049, i64 1, !dbg !87
  %1070 = bitcast <2 x bfloat> %1069 to i32, !dbg !87
  %1071 = insertelement <2 x bfloat> poison, bfloat %1050, i64 0, !dbg !87
  %1072 = insertelement <2 x bfloat> %1071, bfloat %1051, i64 1, !dbg !87
  %1073 = bitcast <2 x bfloat> %1072 to i32, !dbg !87
  %1074 = insertelement <2 x bfloat> poison, bfloat %1052, i64 0, !dbg !87
  %1075 = insertelement <2 x bfloat> %1074, bfloat %1053, i64 1, !dbg !87
  %1076 = bitcast <2 x bfloat> %1075 to i32, !dbg !87
  %1077 = insertelement <2 x bfloat> poison, bfloat %1054, i64 0, !dbg !87
  %1078 = insertelement <2 x bfloat> %1077, bfloat %1055, i64 1, !dbg !87
  %1079 = bitcast <2 x bfloat> %1078 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1070, i32 %1073, i32 %1076, i32 %1079, ptr addrspace(1) %1037, i1 %766) #5, !dbg !87
  br i1 %743, label %742, label %1080, !dbg !57

1080:                                             ; preds = %742
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1081 = extractelement <16 x float> %1033, i64 14, !dbg !99
  %1082 = extractelement <16 x float> %1033, i64 15, !dbg !99
  %1083 = fcmp olt float %1081, %1082, !dbg !99
  %1084 = fcmp uno float %1081, 0.000000e+00, !dbg !100
  %1085 = or i1 %1083, %1084, !dbg !101
  %1086 = select i1 %1085, float %1081, float %1082, !dbg !102
  %1087 = fcmp olt float %1086, %1015, !dbg !99
  %1088 = fcmp uno float %1086, 0.000000e+00, !dbg !100
  %1089 = or i1 %1087, %1088, !dbg !101
  %1090 = select i1 %1089, float %1086, float %1015, !dbg !102
  %1091 = fcmp olt float %1090, %1016, !dbg !99
  %1092 = fcmp uno float %1090, 0.000000e+00, !dbg !100
  %1093 = or i1 %1091, %1092, !dbg !101
  %1094 = select i1 %1093, float %1090, float %1016, !dbg !102
  %1095 = extractelement <4 x float> %1019, i64 3, !dbg !99
  %1096 = fcmp olt float %1094, %1095, !dbg !99
  %1097 = fcmp uno float %1094, 0.000000e+00, !dbg !100
  %1098 = or i1 %1096, %1097, !dbg !101
  %1099 = select i1 %1098, float %1094, float %1095, !dbg !102
  %1100 = extractelement <4 x float> %1019, i64 2, !dbg !99
  %1101 = fcmp olt float %1099, %1100, !dbg !99
  %1102 = fcmp uno float %1099, 0.000000e+00, !dbg !100
  %1103 = or i1 %1101, %1102, !dbg !101
  %1104 = select i1 %1103, float %1099, float %1100, !dbg !102
  %1105 = extractelement <8 x float> %1022, i64 0, !dbg !99
  %1106 = fcmp olt float %1104, %1105, !dbg !99
  %1107 = fcmp uno float %1104, 0.000000e+00, !dbg !100
  %1108 = or i1 %1106, %1107, !dbg !101
  %1109 = select i1 %1108, float %1104, float %1105, !dbg !102
  %1110 = extractelement <8 x float> %1022, i64 1, !dbg !99
  %1111 = fcmp olt float %1109, %1110, !dbg !99
  %1112 = fcmp uno float %1109, 0.000000e+00, !dbg !100
  %1113 = or i1 %1111, %1112, !dbg !101
  %1114 = select i1 %1113, float %1109, float %1110, !dbg !102
  %1115 = extractelement <4 x float> %1019, i64 0, !dbg !99
  %1116 = extractelement <4 x float> %1019, i64 1, !dbg !99
  %1117 = fcmp olt float %1116, %1115, !dbg !99
  %1118 = fcmp uno float %1116, 0.000000e+00, !dbg !100
  %1119 = or i1 %1117, %1118, !dbg !101
  %1120 = select i1 %1119, float %1116, float %1115, !dbg !102
  %1121 = extractelement <8 x float> %1022, i64 2, !dbg !99
  %1122 = fcmp olt float %1120, %1121, !dbg !99
  %1123 = fcmp uno float %1120, 0.000000e+00, !dbg !100
  %1124 = or i1 %1122, %1123, !dbg !101
  %1125 = select i1 %1124, float %1120, float %1121, !dbg !102
  %1126 = extractelement <8 x float> %1022, i64 3, !dbg !99
  %1127 = fcmp olt float %1125, %1126, !dbg !99
  %1128 = fcmp uno float %1125, 0.000000e+00, !dbg !100
  %1129 = or i1 %1127, %1128, !dbg !101
  %1130 = select i1 %1129, float %1125, float %1126, !dbg !102
  %1131 = extractelement <8 x float> %1022, i64 4, !dbg !99
  %1132 = fcmp olt float %1130, %1131, !dbg !99
  %1133 = fcmp uno float %1130, 0.000000e+00, !dbg !100
  %1134 = or i1 %1132, %1133, !dbg !101
  %1135 = select i1 %1134, float %1130, float %1131, !dbg !102
  %1136 = extractelement <8 x float> %1022, i64 5, !dbg !99
  %1137 = fcmp olt float %1135, %1136, !dbg !99
  %1138 = fcmp uno float %1135, 0.000000e+00, !dbg !100
  %1139 = or i1 %1137, %1138, !dbg !101
  %1140 = select i1 %1139, float %1135, float %1136, !dbg !102
  %1141 = extractelement <8 x float> %1022, i64 6, !dbg !99
  %1142 = fcmp olt float %1140, %1141, !dbg !99
  %1143 = fcmp uno float %1140, 0.000000e+00, !dbg !100
  %1144 = or i1 %1142, %1143, !dbg !101
  %1145 = select i1 %1144, float %1140, float %1141, !dbg !102
  %1146 = extractelement <8 x float> %1022, i64 7, !dbg !99
  %1147 = fcmp olt float %1145, %1146, !dbg !99
  %1148 = fcmp uno float %1145, 0.000000e+00, !dbg !100
  %1149 = or i1 %1147, %1148, !dbg !101
  %1150 = select i1 %1149, float %1145, float %1146, !dbg !102
  %1151 = bitcast float %1114 to i32, !dbg !97
  %1152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1151, i32 16, i32 31), !dbg !97
  %1153 = bitcast i32 %1152 to float, !dbg !97
  %1154 = fcmp olt float %1114, %1153, !dbg !99
  %1155 = fcmp uno float %1114, 0.000000e+00, !dbg !100
  %1156 = or i1 %1155, %1154, !dbg !101
  %1157 = select i1 %1156, float %1114, float %1153, !dbg !102
  %1158 = bitcast float %1157 to i32, !dbg !97
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 8, i32 31), !dbg !97
  %1160 = bitcast i32 %1159 to float, !dbg !97
  %1161 = fcmp olt float %1157, %1160, !dbg !99
  %1162 = fcmp uno float %1157, 0.000000e+00, !dbg !100
  %1163 = or i1 %1161, %1162, !dbg !101
  %1164 = select i1 %1163, float %1157, float %1160, !dbg !102
  %1165 = bitcast float %1164 to i32, !dbg !97
  %1166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1165, i32 4, i32 31), !dbg !97
  %1167 = bitcast i32 %1166 to float, !dbg !97
  %1168 = fcmp olt float %1164, %1167, !dbg !99
  %1169 = fcmp uno float %1164, 0.000000e+00, !dbg !100
  %1170 = or i1 %1168, %1169, !dbg !101
  %1171 = select i1 %1170, float %1164, float %1167, !dbg !102
  %1172 = bitcast float %1171 to i32, !dbg !97
  %1173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 2, i32 31), !dbg !97
  %1174 = bitcast i32 %1173 to float, !dbg !97
  %1175 = fcmp olt float %1171, %1174, !dbg !99
  %1176 = fcmp uno float %1171, 0.000000e+00, !dbg !100
  %1177 = or i1 %1175, %1176, !dbg !101
  %1178 = select i1 %1177, float %1171, float %1174, !dbg !102
  %1179 = bitcast float %1178 to i32, !dbg !97
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 1, i32 31), !dbg !97
  %1181 = bitcast i32 %1180 to float, !dbg !97
  %1182 = fcmp olt float %1178, %1181, !dbg !99
  %1183 = fcmp uno float %1178, 0.000000e+00, !dbg !100
  %1184 = or i1 %1182, %1183, !dbg !101
  %1185 = bitcast float %1150 to i32, !dbg !97
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 16, i32 31), !dbg !97
  %1187 = bitcast i32 %1186 to float, !dbg !97
  %1188 = fcmp olt float %1150, %1187, !dbg !99
  %1189 = fcmp uno float %1150, 0.000000e+00, !dbg !100
  %1190 = or i1 %1189, %1188, !dbg !101
  %1191 = select i1 %1190, float %1150, float %1187, !dbg !102
  %1192 = bitcast float %1191 to i32, !dbg !97
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 8, i32 31), !dbg !97
  %1194 = bitcast i32 %1193 to float, !dbg !97
  %1195 = fcmp olt float %1191, %1194, !dbg !99
  %1196 = fcmp uno float %1191, 0.000000e+00, !dbg !100
  %1197 = or i1 %1195, %1196, !dbg !101
  %1198 = select i1 %1197, float %1191, float %1194, !dbg !102
  %1199 = bitcast float %1198 to i32, !dbg !97
  %1200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1199, i32 4, i32 31), !dbg !97
  %1201 = bitcast i32 %1200 to float, !dbg !97
  %1202 = fcmp olt float %1198, %1201, !dbg !99
  %1203 = fcmp uno float %1198, 0.000000e+00, !dbg !100
  %1204 = or i1 %1202, %1203, !dbg !101
  %1205 = select i1 %1204, float %1198, float %1201, !dbg !102
  %1206 = bitcast float %1205 to i32, !dbg !97
  %1207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1206, i32 2, i32 31), !dbg !97
  %1208 = bitcast i32 %1207 to float, !dbg !97
  %1209 = fcmp olt float %1205, %1208, !dbg !99
  %1210 = fcmp uno float %1205, 0.000000e+00, !dbg !100
  %1211 = or i1 %1209, %1210, !dbg !101
  %1212 = select i1 %1211, float %1205, float %1208, !dbg !102
  %1213 = bitcast float %1212 to i32, !dbg !97
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 1, i32 31), !dbg !97
  %1215 = bitcast i32 %1214 to float, !dbg !97
  %1216 = fcmp olt float %1212, %1215, !dbg !99
  %1217 = fcmp uno float %1212, 0.000000e+00, !dbg !100
  %1218 = or i1 %1216, %1217, !dbg !101
  %1219 = and i32 %340, 7, !dbg !97
  %1220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1219, !dbg !97
  %1221 = select i1 %1184, i32 %1179, i32 %1180, !dbg !102
  %1222 = insertelement <1 x i32> poison, i32 %1221, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1220, <1 x i32> %1222, i1 %631) #5, !dbg !97
  %1223 = or disjoint i32 %1219, 8, !dbg !97
  %1224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1223, !dbg !97
  %1225 = select i1 %1218, i32 %1213, i32 %1214, !dbg !102
  %1226 = insertelement <1 x i32> poison, i32 %1225, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1226, i1 %631) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1227 = icmp slt i32 %22, 16, !dbg !97
  %1228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %1227) #5, !dbg !97
  %1229 = bitcast i32 %1228 to float, !dbg !97
  %1230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1228, i32 4, i32 31), !dbg !97
  %1231 = bitcast i32 %1230 to float, !dbg !97
  %1232 = fcmp olt float %1229, %1231, !dbg !99
  %1233 = fcmp uno float %1229, 0.000000e+00, !dbg !100
  %1234 = or i1 %1233, %1232, !dbg !101
  %1235 = select i1 %1234, float %1229, float %1231, !dbg !102
  %1236 = bitcast float %1235 to i32, !dbg !97
  %1237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1236, i32 2, i32 31), !dbg !97
  %1238 = bitcast i32 %1237 to float, !dbg !97
  %1239 = fcmp olt float %1235, %1238, !dbg !99
  %1240 = fcmp uno float %1235, 0.000000e+00, !dbg !100
  %1241 = or i1 %1239, %1240, !dbg !101
  %1242 = select i1 %1241, float %1235, float %1238, !dbg !102
  %1243 = bitcast float %1242 to i32, !dbg !97
  %1244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1243, i32 1, i32 31), !dbg !97
  %1245 = bitcast i32 %1244 to float, !dbg !97
  %1246 = fcmp olt float %1242, %1245, !dbg !99
  %1247 = fcmp uno float %1242, 0.000000e+00, !dbg !100
  %1248 = or i1 %1246, %1247, !dbg !101
  %1249 = and i32 %22, 7, !dbg !97
  %1250 = icmp eq i32 %1249, 0, !dbg !97
  %1251 = and i1 %1227, %1250, !dbg !97
  %1252 = select i1 %1248, i32 %1243, i32 %1244, !dbg !102
  %1253 = insertelement <1 x i32> poison, i32 %1252, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %1253, i1 %1251) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1254 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %1255 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1256 = bitcast float %1254 to i32, !dbg !103
  %1257 = bitcast float %1255 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1256, i32 %1257, i1 true) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1258 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %341, !dbg !103
  %1259 = load float, ptr addrspace(3) %1258, align 4, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1260 = extractelement <16 x float> %1033, i64 0, !dbg !106
  %1261 = extractelement <16 x float> %1033, i64 1, !dbg !106
  %1262 = fcmp ogt float %1260, %1261, !dbg !106
  %1263 = fcmp uno float %1260, 0.000000e+00, !dbg !107
  %1264 = or i1 %1262, %1263, !dbg !108
  %1265 = select i1 %1264, float %1260, float %1261, !dbg !109
  %1266 = extractelement <16 x float> %1033, i64 2, !dbg !106
  %1267 = fcmp ogt float %1265, %1266, !dbg !106
  %1268 = fcmp uno float %1265, 0.000000e+00, !dbg !107
  %1269 = or i1 %1267, %1268, !dbg !108
  %1270 = select i1 %1269, float %1265, float %1266, !dbg !109
  %1271 = extractelement <16 x float> %1033, i64 3, !dbg !106
  %1272 = fcmp ogt float %1270, %1271, !dbg !106
  %1273 = fcmp uno float %1270, 0.000000e+00, !dbg !107
  %1274 = or i1 %1272, %1273, !dbg !108
  %1275 = select i1 %1274, float %1270, float %1271, !dbg !109
  %1276 = extractelement <16 x float> %1033, i64 4, !dbg !106
  %1277 = fcmp ogt float %1275, %1276, !dbg !106
  %1278 = fcmp uno float %1275, 0.000000e+00, !dbg !107
  %1279 = or i1 %1277, %1278, !dbg !108
  %1280 = select i1 %1279, float %1275, float %1276, !dbg !109
  %1281 = extractelement <16 x float> %1033, i64 5, !dbg !106
  %1282 = fcmp ogt float %1280, %1281, !dbg !106
  %1283 = fcmp uno float %1280, 0.000000e+00, !dbg !107
  %1284 = or i1 %1282, %1283, !dbg !108
  %1285 = select i1 %1284, float %1280, float %1281, !dbg !109
  %1286 = extractelement <16 x float> %1033, i64 6, !dbg !106
  %1287 = fcmp ogt float %1285, %1286, !dbg !106
  %1288 = fcmp uno float %1285, 0.000000e+00, !dbg !107
  %1289 = or i1 %1287, %1288, !dbg !108
  %1290 = select i1 %1289, float %1285, float %1286, !dbg !109
  %1291 = extractelement <16 x float> %1033, i64 7, !dbg !106
  %1292 = fcmp ogt float %1290, %1291, !dbg !106
  %1293 = fcmp uno float %1290, 0.000000e+00, !dbg !107
  %1294 = or i1 %1292, %1293, !dbg !108
  %1295 = select i1 %1294, float %1290, float %1291, !dbg !109
  %1296 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1030, <2 x i32> <i32 0, i32 2>, !dbg !106
  %1297 = fcmp ogt <2 x float> %1296, %1030, !dbg !106
  %1298 = fcmp uno <2 x float> %1296, %1030, !dbg !106
  %shift = shufflevector <2 x i1> %1297, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !108
  %1299 = or <2 x i1> %shift, %1298, !dbg !108
  %1300 = extractelement <2 x i1> %1299, i64 0, !dbg !108
  %1301 = extractelement <2 x float> %1030, i64 0, !dbg !109
  %1302 = extractelement <2 x float> %1030, i64 1, !dbg !109
  %1303 = select i1 %1300, float %1301, float %1302, !dbg !109
  %1304 = extractelement <16 x float> %1033, i64 8, !dbg !106
  %1305 = fcmp ogt float %1303, %1304, !dbg !106
  %1306 = fcmp uno float %1303, 0.000000e+00, !dbg !107
  %1307 = or i1 %1305, %1306, !dbg !108
  %1308 = select i1 %1307, float %1303, float %1304, !dbg !109
  %1309 = extractelement <16 x float> %1033, i64 9, !dbg !106
  %1310 = fcmp ogt float %1308, %1309, !dbg !106
  %1311 = fcmp uno float %1308, 0.000000e+00, !dbg !107
  %1312 = or i1 %1310, %1311, !dbg !108
  %1313 = select i1 %1312, float %1308, float %1309, !dbg !109
  %1314 = extractelement <16 x float> %1033, i64 10, !dbg !106
  %1315 = fcmp ogt float %1313, %1314, !dbg !106
  %1316 = fcmp uno float %1313, 0.000000e+00, !dbg !107
  %1317 = or i1 %1315, %1316, !dbg !108
  %1318 = select i1 %1317, float %1313, float %1314, !dbg !109
  %1319 = extractelement <16 x float> %1033, i64 11, !dbg !106
  %1320 = fcmp ogt float %1318, %1319, !dbg !106
  %1321 = fcmp uno float %1318, 0.000000e+00, !dbg !107
  %1322 = or i1 %1320, %1321, !dbg !108
  %1323 = select i1 %1322, float %1318, float %1319, !dbg !109
  %1324 = extractelement <16 x float> %1033, i64 12, !dbg !106
  %1325 = fcmp ogt float %1323, %1324, !dbg !106
  %1326 = fcmp uno float %1323, 0.000000e+00, !dbg !107
  %1327 = or i1 %1325, %1326, !dbg !108
  %1328 = select i1 %1327, float %1323, float %1324, !dbg !109
  %1329 = extractelement <16 x float> %1033, i64 13, !dbg !106
  %1330 = fcmp ogt float %1328, %1329, !dbg !106
  %1331 = fcmp uno float %1328, 0.000000e+00, !dbg !107
  %1332 = or i1 %1330, %1331, !dbg !108
  %1333 = select i1 %1332, float %1328, float %1329, !dbg !109
  %1334 = bitcast float %1295 to i32, !dbg !104
  %1335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1334, i32 16, i32 31), !dbg !104
  %1336 = bitcast i32 %1335 to float, !dbg !104
  %1337 = fcmp ogt float %1295, %1336, !dbg !106
  %1338 = fcmp uno float %1295, 0.000000e+00, !dbg !107
  %1339 = or i1 %1338, %1337, !dbg !108
  %1340 = select i1 %1339, float %1295, float %1336, !dbg !109
  %1341 = bitcast float %1340 to i32, !dbg !104
  %1342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1341, i32 8, i32 31), !dbg !104
  %1343 = bitcast i32 %1342 to float, !dbg !104
  %1344 = fcmp ogt float %1340, %1343, !dbg !106
  %1345 = fcmp uno float %1340, 0.000000e+00, !dbg !107
  %1346 = or i1 %1344, %1345, !dbg !108
  %1347 = select i1 %1346, float %1340, float %1343, !dbg !109
  %1348 = bitcast float %1347 to i32, !dbg !104
  %1349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1348, i32 4, i32 31), !dbg !104
  %1350 = bitcast i32 %1349 to float, !dbg !104
  %1351 = fcmp ogt float %1347, %1350, !dbg !106
  %1352 = fcmp uno float %1347, 0.000000e+00, !dbg !107
  %1353 = or i1 %1351, %1352, !dbg !108
  %1354 = select i1 %1353, float %1347, float %1350, !dbg !109
  %1355 = bitcast float %1354 to i32, !dbg !104
  %1356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1355, i32 2, i32 31), !dbg !104
  %1357 = bitcast i32 %1356 to float, !dbg !104
  %1358 = fcmp ogt float %1354, %1357, !dbg !106
  %1359 = fcmp uno float %1354, 0.000000e+00, !dbg !107
  %1360 = or i1 %1358, %1359, !dbg !108
  %1361 = select i1 %1360, float %1354, float %1357, !dbg !109
  %1362 = bitcast float %1361 to i32, !dbg !104
  %1363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1362, i32 1, i32 31), !dbg !104
  %1364 = bitcast i32 %1363 to float, !dbg !104
  %1365 = fcmp ogt float %1361, %1364, !dbg !106
  %1366 = fcmp uno float %1361, 0.000000e+00, !dbg !107
  %1367 = or i1 %1365, %1366, !dbg !108
  %1368 = bitcast float %1333 to i32, !dbg !104
  %1369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1368, i32 16, i32 31), !dbg !104
  %1370 = bitcast i32 %1369 to float, !dbg !104
  %1371 = fcmp ogt float %1333, %1370, !dbg !106
  %1372 = fcmp uno float %1333, 0.000000e+00, !dbg !107
  %1373 = or i1 %1372, %1371, !dbg !108
  %1374 = select i1 %1373, float %1333, float %1370, !dbg !109
  %1375 = bitcast float %1374 to i32, !dbg !104
  %1376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1375, i32 8, i32 31), !dbg !104
  %1377 = bitcast i32 %1376 to float, !dbg !104
  %1378 = fcmp ogt float %1374, %1377, !dbg !106
  %1379 = fcmp uno float %1374, 0.000000e+00, !dbg !107
  %1380 = or i1 %1378, %1379, !dbg !108
  %1381 = select i1 %1380, float %1374, float %1377, !dbg !109
  %1382 = bitcast float %1381 to i32, !dbg !104
  %1383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1382, i32 4, i32 31), !dbg !104
  %1384 = bitcast i32 %1383 to float, !dbg !104
  %1385 = fcmp ogt float %1381, %1384, !dbg !106
  %1386 = fcmp uno float %1381, 0.000000e+00, !dbg !107
  %1387 = or i1 %1385, %1386, !dbg !108
  %1388 = select i1 %1387, float %1381, float %1384, !dbg !109
  %1389 = bitcast float %1388 to i32, !dbg !104
  %1390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1389, i32 2, i32 31), !dbg !104
  %1391 = bitcast i32 %1390 to float, !dbg !104
  %1392 = fcmp ogt float %1388, %1391, !dbg !106
  %1393 = fcmp uno float %1388, 0.000000e+00, !dbg !107
  %1394 = or i1 %1392, %1393, !dbg !108
  %1395 = select i1 %1394, float %1388, float %1391, !dbg !109
  %1396 = bitcast float %1395 to i32, !dbg !104
  %1397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1396, i32 1, i32 31), !dbg !104
  %1398 = bitcast i32 %1397 to float, !dbg !104
  %1399 = fcmp ogt float %1395, %1398, !dbg !106
  %1400 = fcmp uno float %1395, 0.000000e+00, !dbg !107
  %1401 = or i1 %1399, %1400, !dbg !108
  %1402 = select i1 %1367, i32 %1362, i32 %1363, !dbg !109
  %1403 = insertelement <1 x i32> poison, i32 %1402, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1220, <1 x i32> %1403, i1 %631) #5, !dbg !104
  %1404 = select i1 %1401, i32 %1396, i32 %1397, !dbg !109
  %1405 = insertelement <1 x i32> poison, i32 %1404, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1405, i1 %631) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1406 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %1227) #5, !dbg !104
  %1407 = bitcast i32 %1406 to float, !dbg !104
  %1408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1406, i32 4, i32 31), !dbg !104
  %1409 = bitcast i32 %1408 to float, !dbg !104
  %1410 = fcmp ogt float %1407, %1409, !dbg !106
  %1411 = fcmp uno float %1407, 0.000000e+00, !dbg !107
  %1412 = or i1 %1411, %1410, !dbg !108
  %1413 = select i1 %1412, float %1407, float %1409, !dbg !109
  %1414 = bitcast float %1413 to i32, !dbg !104
  %1415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1414, i32 2, i32 31), !dbg !104
  %1416 = bitcast i32 %1415 to float, !dbg !104
  %1417 = fcmp ogt float %1413, %1416, !dbg !106
  %1418 = fcmp uno float %1413, 0.000000e+00, !dbg !107
  %1419 = or i1 %1417, %1418, !dbg !108
  %1420 = select i1 %1419, float %1413, float %1416, !dbg !109
  %1421 = bitcast float %1420 to i32, !dbg !104
  %1422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1421, i32 1, i32 31), !dbg !104
  %1423 = bitcast i32 %1422 to float, !dbg !104
  %1424 = fcmp ogt float %1420, %1423, !dbg !106
  %1425 = fcmp uno float %1420, 0.000000e+00, !dbg !107
  %1426 = or i1 %1424, %1425, !dbg !108
  %1427 = select i1 %1426, i32 %1421, i32 %1422, !dbg !109
  %1428 = insertelement <1 x i32> poison, i32 %1427, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %1428, i1 %1251) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1429 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !104
  %1430 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1431 = bitcast float %1429 to i32, !dbg !110
  %1432 = bitcast float %1430 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1431, i32 %1432, i1 true) #5, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1433 = load float, ptr addrspace(3) %1258, align 4, !dbg !110
  %1434 = sext i32 %342 to i64, !dbg !111
  %1435 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1434, !dbg !111
  %1436 = fptrunc float %1259 to bfloat, !dbg !103
  %1437 = and i32 %22, 254, !dbg !103
  %1438 = icmp eq i32 %1437, 0, !dbg !103
  %1439 = bitcast bfloat %1436 to i16, !dbg !103
  %1440 = and i1 %1438, %343, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1439, ptr addrspace(1) %1435, i1 %1440) #5, !dbg !103
  %1441 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1434, !dbg !112
  %1442 = fptrunc float %1433 to bfloat, !dbg !110
  %1443 = bitcast bfloat %1442 to i16, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1443, ptr addrspace(1) %1441, i1 %1440) #5, !dbg !110
  %1444 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1434, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1439, ptr addrspace(1) %1444, i1 %1440) #5, !dbg !114
  %1445 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1434, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1443, ptr addrspace(1) %1445, i1 %1440) #5, !dbg !116
  %1446 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1434, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1439, ptr addrspace(1) %1446, i1 %1440) #5, !dbg !118
  %1447 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1434, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1443, ptr addrspace(1) %1447, i1 %1440) #5, !dbg !120
  %1448 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1434, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1439, ptr addrspace(1) %1448, i1 %1440) #5, !dbg !122
  %1449 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1434, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1443, ptr addrspace(1) %1449, i1 %1440) #5, !dbg !124
  %.inv = fcmp oge float %1254, 0.000000e+00, !dbg !125
  %1450 = select i1 %.inv, float 0.000000e+00, float %1254, !dbg !125
  %.inv4 = fcmp oge float %1255, 0.000000e+00, !dbg !125
  %1451 = select i1 %.inv4, float 0.000000e+00, float %1255, !dbg !125
  %1452 = fsub float 0.000000e+00, %1450, !dbg !127
  %1453 = fsub float 0.000000e+00, %1451, !dbg !127
  %.inv5 = fcmp ole float %1429, 0.000000e+00, !dbg !128
  %1454 = select i1 %.inv5, float 0.000000e+00, float %1429, !dbg !128
  %.inv6 = fcmp ole float %1430, 0.000000e+00, !dbg !128
  %1455 = select i1 %.inv6, float 0.000000e+00, float %1430, !dbg !128
  %1456 = fcmp ogt float %1452, %1454, !dbg !130
  %1457 = fcmp ogt float %1453, %1455, !dbg !130
  %1458 = fcmp uno float %1452, 0.000000e+00, !dbg !132
  %1459 = fcmp uno float %1453, 0.000000e+00, !dbg !132
  %1460 = or i1 %1458, %1456, !dbg !133
  %1461 = or i1 %1459, %1457, !dbg !133
  %1462 = select i1 %1460, float %1452, float %1454, !dbg !134
  %1463 = select i1 %1461, float %1453, float %1455, !dbg !134
  %1464 = fmul float %1462, 0x3F80204080000000, !dbg !135
  %1465 = fmul float %1463, 0x3F80204080000000, !dbg !135
  %1466 = fcmp ogt float %1464, 0x3EE4F8B580000000, !dbg !136
  %1467 = fcmp ogt float %1465, 0x3EE4F8B580000000, !dbg !136
  %1468 = fcmp uno float %1464, 0.000000e+00, !dbg !138
  %1469 = fcmp uno float %1465, 0.000000e+00, !dbg !138
  %1470 = or i1 %1466, %1468, !dbg !139
  %1471 = or i1 %1467, %1469, !dbg !139
  %1472 = select i1 %1470, float %1464, float 0x3EE4F8B580000000, !dbg !140
  %1473 = select i1 %1471, float %1465, float 0x3EE4F8B580000000, !dbg !140
  %1474 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1472), !dbg !141
  %1475 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1473), !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1476 = bitcast float %1474 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1476, i1 true) #5, !dbg !142
  %1477 = bitcast float %1475 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1477, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1478 = lshr exact i32 %23, 4, !dbg !142
  %1479 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1478, !dbg !142
  %1480 = load float, ptr addrspace(3) %1479, align 8, !dbg !142
  br label %1481, !dbg !143

1481:                                             ; preds = %1080, %1481
  %1482 = phi i1 [ true, %1080 ], [ false, %1481 ]
  %indvars.iv184 = phi i64 [ 0, %1080 ], [ 2048, %1481 ]
  %1483 = or disjoint i64 %indvars.iv184, %35, !dbg !144
  %1484 = icmp samesign ult i64 %1483, 3072, !dbg !145
  %1485 = trunc nuw nsw i64 %1483 to i32, !dbg !146
  %1486 = add i32 %33, %1485, !dbg !146
  %1487 = trunc nuw nsw i64 %indvars.iv184 to i32, !dbg !146
  %1488 = add i32 %34, %1487, !dbg !146
  %1489 = sext i32 %1486 to i64, !dbg !147
  %1490 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1489, !dbg !147
  %1491 = sext i32 %1488 to i64, !dbg !147
  %1492 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1491, !dbg !147
  %1493 = and i1 %26, %1484, !dbg !148
  %1494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1490, i1 %1493) #5, !dbg !149
  %1495 = extractvalue { i32, i32, i32, i32 } %1494, 0, !dbg !149
  %1496 = bitcast i32 %1495 to <2 x bfloat>, !dbg !149
  %1497 = extractvalue { i32, i32, i32, i32 } %1494, 1, !dbg !149
  %1498 = bitcast i32 %1497 to <2 x bfloat>, !dbg !149
  %1499 = extractvalue { i32, i32, i32, i32 } %1494, 2, !dbg !149
  %1500 = bitcast i32 %1499 to <2 x bfloat>, !dbg !149
  %1501 = extractvalue { i32, i32, i32, i32 } %1494, 3, !dbg !149
  %1502 = bitcast i32 %1501 to <2 x bfloat>, !dbg !149
  %1503 = extractelement <2 x bfloat> %1496, i64 0, !dbg !149
  %1504 = extractelement <2 x bfloat> %1496, i64 1, !dbg !149
  %1505 = extractelement <2 x bfloat> %1498, i64 0, !dbg !149
  %1506 = extractelement <2 x bfloat> %1498, i64 1, !dbg !149
  %1507 = extractelement <2 x bfloat> %1500, i64 0, !dbg !149
  %1508 = extractelement <2 x bfloat> %1500, i64 1, !dbg !149
  %1509 = extractelement <2 x bfloat> %1502, i64 0, !dbg !149
  %1510 = extractelement <2 x bfloat> %1502, i64 1, !dbg !149
  %1511 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1492, i1 %1493) #5, !dbg !149
  %1512 = extractvalue { i32, i32, i32, i32 } %1511, 0, !dbg !149
  %1513 = bitcast i32 %1512 to <2 x bfloat>, !dbg !149
  %1514 = extractvalue { i32, i32, i32, i32 } %1511, 1, !dbg !149
  %1515 = bitcast i32 %1514 to <2 x bfloat>, !dbg !149
  %1516 = extractvalue { i32, i32, i32, i32 } %1511, 2, !dbg !149
  %1517 = bitcast i32 %1516 to <2 x bfloat>, !dbg !149
  %1518 = extractvalue { i32, i32, i32, i32 } %1511, 3, !dbg !149
  %1519 = bitcast i32 %1518 to <2 x bfloat>, !dbg !149
  %1520 = extractelement <2 x bfloat> %1513, i64 0, !dbg !149
  %1521 = extractelement <2 x bfloat> %1513, i64 1, !dbg !149
  %1522 = extractelement <2 x bfloat> %1515, i64 0, !dbg !149
  %1523 = extractelement <2 x bfloat> %1515, i64 1, !dbg !149
  %1524 = extractelement <2 x bfloat> %1517, i64 0, !dbg !149
  %1525 = extractelement <2 x bfloat> %1517, i64 1, !dbg !149
  %1526 = extractelement <2 x bfloat> %1519, i64 0, !dbg !149
  %1527 = extractelement <2 x bfloat> %1519, i64 1, !dbg !149
  %1528 = fpext bfloat %1503 to float, !dbg !150
  %1529 = fpext bfloat %1504 to float, !dbg !150
  %1530 = fpext bfloat %1505 to float, !dbg !150
  %1531 = fpext bfloat %1506 to float, !dbg !150
  %1532 = fpext bfloat %1507 to float, !dbg !150
  %1533 = fpext bfloat %1508 to float, !dbg !150
  %1534 = fpext bfloat %1509 to float, !dbg !150
  %1535 = fpext bfloat %1510 to float, !dbg !150
  %1536 = fpext bfloat %1520 to float, !dbg !150
  %1537 = fpext bfloat %1521 to float, !dbg !150
  %1538 = fpext bfloat %1522 to float, !dbg !150
  %1539 = fpext bfloat %1523 to float, !dbg !150
  %1540 = fpext bfloat %1524 to float, !dbg !150
  %1541 = fpext bfloat %1525 to float, !dbg !150
  %1542 = fpext bfloat %1526 to float, !dbg !150
  %1543 = fpext bfloat %1527 to float, !dbg !150
  %1544 = fmul float %1480, %1528, !dbg !142
  %1545 = fmul float %1480, %1529, !dbg !142
  %1546 = fmul float %1480, %1530, !dbg !142
  %1547 = fmul float %1480, %1531, !dbg !142
  %1548 = fmul float %1480, %1532, !dbg !142
  %1549 = fmul float %1480, %1533, !dbg !142
  %1550 = fmul float %1480, %1534, !dbg !142
  %1551 = fmul float %1480, %1535, !dbg !142
  %1552 = fmul float %1480, %1536, !dbg !142
  %1553 = fmul float %1480, %1537, !dbg !142
  %1554 = fmul float %1480, %1538, !dbg !142
  %1555 = fmul float %1480, %1539, !dbg !142
  %1556 = fmul float %1480, %1540, !dbg !142
  %1557 = fmul float %1480, %1541, !dbg !142
  %1558 = fmul float %1480, %1542, !dbg !142
  %1559 = fmul float %1480, %1543, !dbg !142
  %1560 = tail call float @llvm.nvvm.round.f(float %1544) #5, !dbg !151
  %1561 = tail call float @llvm.nvvm.round.f(float %1545) #5, !dbg !151
  %1562 = tail call float @llvm.nvvm.round.f(float %1546) #5, !dbg !151
  %1563 = tail call float @llvm.nvvm.round.f(float %1547) #5, !dbg !151
  %1564 = tail call float @llvm.nvvm.round.f(float %1548) #5, !dbg !151
  %1565 = tail call float @llvm.nvvm.round.f(float %1549) #5, !dbg !151
  %1566 = tail call float @llvm.nvvm.round.f(float %1550) #5, !dbg !151
  %1567 = tail call float @llvm.nvvm.round.f(float %1551) #5, !dbg !151
  %1568 = tail call float @llvm.nvvm.round.f(float %1552) #5, !dbg !151
  %1569 = tail call float @llvm.nvvm.round.f(float %1553) #5, !dbg !151
  %1570 = tail call float @llvm.nvvm.round.f(float %1554) #5, !dbg !151
  %1571 = tail call float @llvm.nvvm.round.f(float %1555) #5, !dbg !151
  %1572 = tail call float @llvm.nvvm.round.f(float %1556) #5, !dbg !151
  %1573 = tail call float @llvm.nvvm.round.f(float %1557) #5, !dbg !151
  %1574 = tail call float @llvm.nvvm.round.f(float %1558) #5, !dbg !151
  %1575 = tail call float @llvm.nvvm.round.f(float %1559) #5, !dbg !151
  %1576 = insertelement <4 x float> poison, float %1560, i64 0, !dbg !152
  %1577 = insertelement <4 x float> %1576, float %1561, i64 1, !dbg !152
  %1578 = insertelement <4 x float> %1577, float %1562, i64 2, !dbg !152
  %1579 = insertelement <4 x float> %1578, float %1563, i64 3, !dbg !152
  %1580 = fcmp ogt <4 x float> %1579, splat (float -1.270000e+02), !dbg !152
  %1581 = fcmp uno <4 x float> %1579, zeroinitializer, !dbg !154
  %1582 = or <4 x i1> %1580, %1581, !dbg !155
  %1583 = select <4 x i1> %1582, <4 x float> %1579, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1584 = fcmp olt <4 x float> %1583, splat (float 1.270000e+02), !dbg !157
  %1585 = fcmp uno <4 x float> %1583, zeroinitializer, !dbg !159
  %1586 = or <4 x i1> %1584, %1585, !dbg !160
  %1587 = fptosi <4 x float> %1583 to <4 x i8>, !dbg !161
  %1588 = select <4 x i1> %1586, <4 x i8> %1587, <4 x i8> splat (i8 127), !dbg !162
  %1589 = insertelement <4 x float> poison, float %1564, i64 0, !dbg !152
  %1590 = insertelement <4 x float> %1589, float %1565, i64 1, !dbg !152
  %1591 = insertelement <4 x float> %1590, float %1566, i64 2, !dbg !152
  %1592 = insertelement <4 x float> %1591, float %1567, i64 3, !dbg !152
  %1593 = fcmp ogt <4 x float> %1592, splat (float -1.270000e+02), !dbg !152
  %1594 = fcmp uno <4 x float> %1592, zeroinitializer, !dbg !154
  %1595 = or <4 x i1> %1593, %1594, !dbg !155
  %1596 = select <4 x i1> %1595, <4 x float> %1592, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1597 = fcmp olt <4 x float> %1596, splat (float 1.270000e+02), !dbg !157
  %1598 = fcmp uno <4 x float> %1596, zeroinitializer, !dbg !159
  %1599 = or <4 x i1> %1597, %1598, !dbg !160
  %1600 = fptosi <4 x float> %1596 to <4 x i8>, !dbg !161
  %1601 = select <4 x i1> %1599, <4 x i8> %1600, <4 x i8> splat (i8 127), !dbg !162
  %1602 = insertelement <4 x float> poison, float %1568, i64 0, !dbg !152
  %1603 = insertelement <4 x float> %1602, float %1569, i64 1, !dbg !152
  %1604 = insertelement <4 x float> %1603, float %1570, i64 2, !dbg !152
  %1605 = insertelement <4 x float> %1604, float %1571, i64 3, !dbg !152
  %1606 = fcmp ogt <4 x float> %1605, splat (float -1.270000e+02), !dbg !152
  %1607 = fcmp uno <4 x float> %1605, zeroinitializer, !dbg !154
  %1608 = or <4 x i1> %1606, %1607, !dbg !155
  %1609 = select <4 x i1> %1608, <4 x float> %1605, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1610 = fcmp olt <4 x float> %1609, splat (float 1.270000e+02), !dbg !157
  %1611 = fcmp uno <4 x float> %1609, zeroinitializer, !dbg !159
  %1612 = or <4 x i1> %1610, %1611, !dbg !160
  %1613 = fptosi <4 x float> %1609 to <4 x i8>, !dbg !161
  %1614 = select <4 x i1> %1612, <4 x i8> %1613, <4 x i8> splat (i8 127), !dbg !162
  %1615 = insertelement <4 x float> poison, float %1572, i64 0, !dbg !152
  %1616 = insertelement <4 x float> %1615, float %1573, i64 1, !dbg !152
  %1617 = insertelement <4 x float> %1616, float %1574, i64 2, !dbg !152
  %1618 = insertelement <4 x float> %1617, float %1575, i64 3, !dbg !152
  %1619 = fcmp ogt <4 x float> %1618, splat (float -1.270000e+02), !dbg !152
  %1620 = fcmp uno <4 x float> %1618, zeroinitializer, !dbg !154
  %1621 = or <4 x i1> %1619, %1620, !dbg !155
  %1622 = select <4 x i1> %1621, <4 x float> %1618, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1623 = fcmp olt <4 x float> %1622, splat (float 1.270000e+02), !dbg !157
  %1624 = fcmp uno <4 x float> %1622, zeroinitializer, !dbg !159
  %1625 = or <4 x i1> %1623, %1624, !dbg !160
  %1626 = fptosi <4 x float> %1622 to <4 x i8>, !dbg !161
  %1627 = select <4 x i1> %1625, <4 x i8> %1626, <4 x i8> splat (i8 127), !dbg !162
  %1628 = getelementptr i8, ptr addrspace(1) %12, i64 %1489, !dbg !163
  %1629 = bitcast <4 x i8> %1588 to i32, !dbg !164
  %1630 = bitcast <4 x i8> %1601 to i32, !dbg !164
  %1631 = bitcast <4 x i8> %1614 to i32, !dbg !164
  %1632 = bitcast <4 x i8> %1627 to i32, !dbg !164
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1629, i32 %1630, i32 %1631, i32 %1632, ptr addrspace(1) %1628, i1 %1493) #5, !dbg !164
  %1633 = getelementptr i8, ptr addrspace(1) %13, i64 %1489, !dbg !165
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1629, i32 %1630, i32 %1631, i32 %1632, ptr addrspace(1) %1633, i1 %1493) #5, !dbg !166
  %1634 = getelementptr i8, ptr addrspace(1) %14, i64 %1489, !dbg !167
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1629, i32 %1630, i32 %1631, i32 %1632, ptr addrspace(1) %1634, i1 %1493) #5, !dbg !168
  %1635 = getelementptr i8, ptr addrspace(1) %15, i64 %1489, !dbg !169
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1629, i32 %1630, i32 %1631, i32 %1632, ptr addrspace(1) %1635, i1 %1493) #5, !dbg !170
  br i1 %1482, label %1481, label %1636, !dbg !143

1636:                                             ; preds = %1481
  ret void, !dbg !171
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 61, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 46, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 69, column: 24, scope: !6)
!56 = !DILocation(line: 70, column: 32, scope: !6)
!57 = !DILocation(line: 53, column: 40, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 55, column: 29, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 61, scope: !6)
!63 = !DILocation(line: 59, column: 51, scope: !6)
!64 = !DILocation(line: 59, column: 113, scope: !6)
!65 = !DILocation(line: 60, column: 42, scope: !6)
!66 = !DILocation(line: 60, column: 35, scope: !6)
!67 = !DILocation(line: 60, column: 49, scope: !6)
!68 = !DILocation(line: 61, column: 35, scope: !6)
!69 = !DILocation(line: 61, column: 49, scope: !6)
!70 = !DILocation(line: 62, column: 35, scope: !6)
!71 = !DILocation(line: 62, column: 42, scope: !6)
!72 = !DILocation(line: 63, column: 35, scope: !6)
!73 = !DILocation(line: 63, column: 42, scope: !6)
!74 = !DILocation(line: 65, column: 24, scope: !6)
!75 = !DILocation(line: 71, column: 24, scope: !6)
!76 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !77)
!77 = !DILocation(line: 84, column: 47, scope: !6)
!78 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !79)
!79 = !DILocation(line: 82, column: 47, scope: !6)
!80 = !DILocation(line: 61, column: 102, scope: !6)
!81 = !DILocation(line: 63, column: 95, scope: !6)
!82 = !DILocation(line: 74, column: 24, scope: !6)
!83 = !DILocation(line: 76, column: 24, scope: !6)
!84 = !DILocation(line: 77, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 80, column: 24, scope: !6)
!87 = !DILocation(line: 86, column: 53, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !77)
!89 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !77)
!90 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !77)
!91 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !79)
!92 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !79)
!93 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !79)
!94 = !DILocation(line: 83, column: 50, scope: !6)
!95 = !DILocation(line: 85, column: 50, scope: !6)
!96 = !DILocation(line: 86, column: 29, scope: !6)
!97 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !98)
!98 = !DILocation(line: 87, column: 40, scope: !6)
!99 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !98)
!100 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !98)
!101 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !98)
!102 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !98)
!103 = !DILocation(line: 89, column: 37, scope: !6)
!104 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !105)
!105 = !DILocation(line: 88, column: 40, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !105)
!108 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !105)
!109 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !105)
!110 = !DILocation(line: 90, column: 37, scope: !6)
!111 = !DILocation(line: 89, column: 25, scope: !6)
!112 = !DILocation(line: 90, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 25, scope: !6)
!114 = !DILocation(line: 91, column: 37, scope: !6)
!115 = !DILocation(line: 92, column: 25, scope: !6)
!116 = !DILocation(line: 92, column: 37, scope: !6)
!117 = !DILocation(line: 93, column: 25, scope: !6)
!118 = !DILocation(line: 93, column: 37, scope: !6)
!119 = !DILocation(line: 94, column: 25, scope: !6)
!120 = !DILocation(line: 94, column: 37, scope: !6)
!121 = !DILocation(line: 95, column: 25, scope: !6)
!122 = !DILocation(line: 95, column: 37, scope: !6)
!123 = !DILocation(line: 96, column: 26, scope: !6)
!124 = !DILocation(line: 96, column: 38, scope: !6)
!125 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !126)
!126 = !DILocation(line: 105, column: 46, scope: !6)
!127 = !DILocation(line: 106, column: 17, scope: !6)
!128 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !129)
!129 = !DILocation(line: 107, column: 46, scope: !6)
!130 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !131)
!131 = !DILocation(line: 108, column: 46, scope: !6)
!132 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !131)
!135 = !DILocation(line: 110, column: 24, scope: !6)
!136 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !137)
!137 = !DILocation(line: 113, column: 46, scope: !6)
!138 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !137)
!139 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !137)
!140 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !137)
!141 = !DILocation(line: 116, column: 25, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 97, column: 40, scope: !6)
!144 = !DILocation(line: 98, column: 31, scope: !6)
!145 = !DILocation(line: 99, column: 29, scope: !6)
!146 = !DILocation(line: 103, column: 43, scope: !6)
!147 = !DILocation(line: 103, column: 36, scope: !6)
!148 = !DILocation(line: 103, column: 63, scope: !6)
!149 = !DILocation(line: 103, column: 53, scope: !6)
!150 = !DILocation(line: 103, column: 115, scope: !6)
!151 = !DILocation(line: 120, column: 36, scope: !6)
!152 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !153)
!153 = !DILocation(line: 123, column: 46, scope: !6)
!154 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !153)
!155 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !153)
!156 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !153)
!157 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !158)
!158 = !DILocation(line: 125, column: 46, scope: !6)
!159 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !158)
!160 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !158)
!161 = !DILocation(line: 127, column: 25, scope: !6)
!162 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !158)
!163 = !DILocation(line: 128, column: 30, scope: !6)
!164 = !DILocation(line: 128, column: 54, scope: !6)
!165 = !DILocation(line: 129, column: 30, scope: !6)
!166 = !DILocation(line: 129, column: 54, scope: !6)
!167 = !DILocation(line: 130, column: 30, scope: !6)
!168 = !DILocation(line: 130, column: 54, scope: !6)
!169 = !DILocation(line: 131, column: 30, scope: !6)
!170 = !DILocation(line: 131, column: 54, scope: !6)
!171 = !DILocation(line: 97, column: 4, scope: !6)
