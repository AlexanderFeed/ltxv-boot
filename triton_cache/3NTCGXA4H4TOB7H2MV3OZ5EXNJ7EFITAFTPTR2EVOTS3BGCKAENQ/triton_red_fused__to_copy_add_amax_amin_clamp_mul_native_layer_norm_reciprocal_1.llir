; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = lshr i32 %21, 5, !dbg !11
  %24 = shl i32 %21, 4, !dbg !11
  %25 = and i32 %24, 4080, !dbg !11
  %26 = or disjoint i32 %25, 4, !dbg !11
  %27 = or disjoint i32 %25, 8, !dbg !11
  %28 = or disjoint i32 %25, 12, !dbg !11
  %29 = icmp samesign ult i32 %25, 3072, !dbg !12
  %30 = mul i32 %19, 3072, !dbg !13
  %31 = add i32 %25, %30, !dbg !14
  %32 = add i32 %27, %30, !dbg !14
  %33 = sext i32 %31 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !15
  %35 = sext i32 %32 to i64, !dbg !15
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !15
  %37 = and i1 %20, %29, !dbg !16
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %37) #5, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !17
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !17
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !17
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !17
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !17
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !17
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !17
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !17
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !17
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !17
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !17
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !17
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !17
  %60 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !17
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !17
  %62 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !17
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !17
  %64 = extractelement <2 x bfloat> %57, i64 0, !dbg !17
  %65 = extractelement <2 x bfloat> %57, i64 1, !dbg !17
  %66 = extractelement <2 x bfloat> %59, i64 0, !dbg !17
  %67 = extractelement <2 x bfloat> %59, i64 1, !dbg !17
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !17
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !17
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !17
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !17
  %72 = fpext bfloat %47 to float, !dbg !18
  %73 = fpext bfloat %48 to float, !dbg !18
  %74 = fpext bfloat %49 to float, !dbg !18
  %75 = fpext bfloat %50 to float, !dbg !18
  %76 = fpext bfloat %51 to float, !dbg !18
  %77 = fpext bfloat %52 to float, !dbg !18
  %78 = fpext bfloat %53 to float, !dbg !18
  %79 = fpext bfloat %54 to float, !dbg !18
  %80 = fpext bfloat %64 to float, !dbg !18
  %81 = fpext bfloat %65 to float, !dbg !18
  %82 = fpext bfloat %66 to float, !dbg !18
  %83 = fpext bfloat %67 to float, !dbg !18
  %84 = fpext bfloat %68 to float, !dbg !18
  %85 = fpext bfloat %69 to float, !dbg !18
  %86 = fpext bfloat %70 to float, !dbg !18
  %87 = fpext bfloat %71 to float, !dbg !18
  %88 = select i1 %37, float %72, float 0.000000e+00, !dbg !19
  %89 = select i1 %37, float %73, float 0.000000e+00, !dbg !19
  %90 = select i1 %37, float %74, float 0.000000e+00, !dbg !19
  %91 = select i1 %37, float %75, float 0.000000e+00, !dbg !19
  %92 = select i1 %37, float %76, float 0.000000e+00, !dbg !19
  %93 = select i1 %37, float %77, float 0.000000e+00, !dbg !19
  %94 = select i1 %37, float %78, float 0.000000e+00, !dbg !19
  %95 = select i1 %37, float %79, float 0.000000e+00, !dbg !19
  %96 = select i1 %37, float %80, float 0.000000e+00, !dbg !19
  %97 = select i1 %37, float %81, float 0.000000e+00, !dbg !19
  %98 = select i1 %37, float %82, float 0.000000e+00, !dbg !19
  %99 = select i1 %37, float %83, float 0.000000e+00, !dbg !19
  %100 = select i1 %37, float %84, float 0.000000e+00, !dbg !19
  %101 = select i1 %37, float %85, float 0.000000e+00, !dbg !19
  %102 = select i1 %37, float %86, float 0.000000e+00, !dbg !19
  %103 = select i1 %37, float %87, float 0.000000e+00, !dbg !19
  %104 = select i1 %37, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %105 = fsub float %89, %88, !dbg !21
  %106 = select i1 %37, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !27
  %108 = tail call float @llvm.nvvm.div.full(float %104, float %106), !dbg !28
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !29
  %110 = fmul float %109, %105, !dbg !30
  %111 = fadd float %88, %110, !dbg !31
  %112 = fmul float %105, %105, !dbg !32
  %113 = fmul float %104, %112, !dbg !33
  %114 = fmul float %109, %113, !dbg !34
  %115 = fadd float %114, 0.000000e+00, !dbg !35
  %116 = fsub float %90, %111, !dbg !21
  %117 = select i1 %37, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %118 = fcmp oeq float %117, 0.000000e+00, !dbg !27
  %119 = tail call float @llvm.nvvm.div.full(float %104, float %117), !dbg !28
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !29
  %121 = fmul float %120, %116, !dbg !30
  %122 = fadd float %111, %121, !dbg !31
  %123 = fmul float %116, %116, !dbg !32
  %124 = fmul float %106, %123, !dbg !33
  %125 = fmul float %120, %124, !dbg !34
  %126 = fadd float %115, %125, !dbg !35
  %127 = fsub float %91, %122, !dbg !21
  %128 = select i1 %37, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %129 = fcmp oeq float %128, 0.000000e+00, !dbg !27
  %130 = tail call float @llvm.nvvm.div.full(float %104, float %128), !dbg !28
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !29
  %132 = fmul float %131, %127, !dbg !30
  %133 = fadd float %122, %132, !dbg !31
  %134 = fmul float %127, %127, !dbg !32
  %135 = fmul float %117, %134, !dbg !33
  %136 = fmul float %131, %135, !dbg !34
  %137 = fadd float %126, %136, !dbg !35
  %138 = fsub float %92, %133, !dbg !21
  %139 = select i1 %37, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !27
  %141 = tail call float @llvm.nvvm.div.full(float %104, float %139), !dbg !28
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !29
  %143 = fmul float %142, %138, !dbg !30
  %144 = fadd float %133, %143, !dbg !31
  %145 = fmul float %138, %138, !dbg !32
  %146 = fmul float %128, %145, !dbg !33
  %147 = fmul float %142, %146, !dbg !34
  %148 = fadd float %137, %147, !dbg !35
  %149 = fsub float %93, %144, !dbg !21
  %150 = select i1 %37, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !27
  %152 = tail call float @llvm.nvvm.div.full(float %104, float %150), !dbg !28
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !29
  %154 = fmul float %153, %149, !dbg !30
  %155 = fadd float %144, %154, !dbg !31
  %156 = fmul float %149, %149, !dbg !32
  %157 = fmul float %139, %156, !dbg !33
  %158 = fmul float %153, %157, !dbg !34
  %159 = fadd float %148, %158, !dbg !35
  %160 = fsub float %94, %155, !dbg !21
  %161 = select i1 %37, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !27
  %163 = tail call float @llvm.nvvm.div.full(float %104, float %161), !dbg !28
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !29
  %165 = fmul float %164, %160, !dbg !30
  %166 = fadd float %155, %165, !dbg !31
  %167 = fmul float %160, %160, !dbg !32
  %168 = fmul float %150, %167, !dbg !33
  %169 = fmul float %164, %168, !dbg !34
  %170 = fadd float %159, %169, !dbg !35
  %171 = fsub float %95, %166, !dbg !21
  %172 = select i1 %37, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !27
  %174 = tail call float @llvm.nvvm.div.full(float %104, float %172), !dbg !28
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !29
  %176 = fmul float %175, %171, !dbg !30
  %177 = fadd float %166, %176, !dbg !31
  %178 = fmul float %171, %171, !dbg !32
  %179 = fmul float %161, %178, !dbg !33
  %180 = fmul float %175, %179, !dbg !34
  %181 = fadd float %170, %180, !dbg !35
  %182 = fsub float %96, %177, !dbg !21
  %183 = select i1 %37, float 9.000000e+00, float 0.000000e+00, !dbg !26
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !27
  %185 = tail call float @llvm.nvvm.div.full(float %104, float %183), !dbg !28
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !29
  %187 = fmul float %186, %182, !dbg !30
  %188 = fadd float %177, %187, !dbg !31
  %189 = fadd float %181, 0.000000e+00, !dbg !36
  %190 = fmul float %182, %182, !dbg !32
  %191 = fmul float %172, %190, !dbg !33
  %192 = fmul float %186, %191, !dbg !34
  %193 = fadd float %189, %192, !dbg !35
  %194 = fsub float %97, %188, !dbg !21
  %195 = select i1 %37, float 1.000000e+01, float 0.000000e+00, !dbg !26
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !27
  %197 = tail call float @llvm.nvvm.div.full(float %104, float %195), !dbg !28
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !29
  %199 = fmul float %198, %194, !dbg !30
  %200 = fadd float %188, %199, !dbg !31
  %201 = fmul float %194, %194, !dbg !32
  %202 = fmul float %183, %201, !dbg !33
  %203 = fmul float %198, %202, !dbg !34
  %204 = fadd float %193, %203, !dbg !35
  %205 = fsub float %98, %200, !dbg !21
  %206 = select i1 %37, float 1.100000e+01, float 0.000000e+00, !dbg !26
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !27
  %208 = tail call float @llvm.nvvm.div.full(float %104, float %206), !dbg !28
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !29
  %210 = fmul float %209, %205, !dbg !30
  %211 = fadd float %200, %210, !dbg !31
  %212 = fmul float %205, %205, !dbg !32
  %213 = fmul float %195, %212, !dbg !33
  %214 = fmul float %209, %213, !dbg !34
  %215 = fadd float %204, %214, !dbg !35
  %216 = fsub float %99, %211, !dbg !21
  %217 = select i1 %37, float 1.200000e+01, float 0.000000e+00, !dbg !26
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !27
  %219 = tail call float @llvm.nvvm.div.full(float %104, float %217), !dbg !28
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !29
  %221 = fmul float %220, %216, !dbg !30
  %222 = fadd float %211, %221, !dbg !31
  %223 = fmul float %216, %216, !dbg !32
  %224 = fmul float %206, %223, !dbg !33
  %225 = fmul float %220, %224, !dbg !34
  %226 = fadd float %215, %225, !dbg !35
  %227 = fsub float %100, %222, !dbg !21
  %228 = select i1 %37, float 1.300000e+01, float 0.000000e+00, !dbg !26
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !27
  %230 = tail call float @llvm.nvvm.div.full(float %104, float %228), !dbg !28
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !29
  %232 = fmul float %231, %227, !dbg !30
  %233 = fadd float %222, %232, !dbg !31
  %234 = fmul float %227, %227, !dbg !32
  %235 = fmul float %217, %234, !dbg !33
  %236 = fmul float %231, %235, !dbg !34
  %237 = fadd float %226, %236, !dbg !35
  %238 = fsub float %101, %233, !dbg !21
  %239 = select i1 %37, float 1.400000e+01, float 0.000000e+00, !dbg !26
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !27
  %241 = tail call float @llvm.nvvm.div.full(float %104, float %239), !dbg !28
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !29
  %243 = fmul float %242, %238, !dbg !30
  %244 = fadd float %233, %243, !dbg !31
  %245 = fmul float %238, %238, !dbg !32
  %246 = fmul float %228, %245, !dbg !33
  %247 = fmul float %242, %246, !dbg !34
  %248 = fadd float %237, %247, !dbg !35
  %249 = fsub float %102, %244, !dbg !21
  %250 = select i1 %37, float 1.500000e+01, float 0.000000e+00, !dbg !26
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !27
  %252 = tail call float @llvm.nvvm.div.full(float %104, float %250), !dbg !28
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !29
  %254 = fmul float %253, %249, !dbg !30
  %255 = fadd float %244, %254, !dbg !31
  %256 = fadd float %248, 0.000000e+00, !dbg !36
  %257 = fmul float %249, %249, !dbg !32
  %258 = fmul float %239, %257, !dbg !33
  %259 = fmul float %253, %258, !dbg !34
  %260 = fadd float %256, %259, !dbg !35
  %261 = fsub float %103, %255, !dbg !21
  %262 = select i1 %37, float 1.600000e+01, float 0.000000e+00, !dbg !26
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !27
  %264 = tail call float @llvm.nvvm.div.full(float %104, float %262), !dbg !28
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !29
  %266 = fmul float %265, %261, !dbg !30
  %267 = fadd float %255, %266, !dbg !31
  %268 = fmul float %261, %261, !dbg !32
  %269 = fmul float %250, %268, !dbg !33
  %270 = fmul float %265, %269, !dbg !34
  %271 = fadd float %260, %270, !dbg !35
  %272 = bitcast float %267 to i32, !dbg !37
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = bitcast float %271 to i32, !dbg !37
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !37
  %277 = bitcast i32 %276 to float, !dbg !37
  %278 = bitcast float %262 to i32, !dbg !37
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 16, i32 31), !dbg !37
  %280 = bitcast i32 %279 to float, !dbg !37
  %281 = fsub float %274, %267, !dbg !21
  %282 = fadd float %262, %280, !dbg !26
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !27
  %284 = tail call float @llvm.nvvm.div.full(float %280, float %282), !dbg !28
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !29
  %286 = fmul float %285, %281, !dbg !30
  %287 = fadd float %267, %286, !dbg !31
  %288 = fadd float %271, %277, !dbg !36
  %289 = fmul float %281, %281, !dbg !32
  %290 = fmul float %262, %289, !dbg !33
  %291 = fmul float %285, %290, !dbg !34
  %292 = fadd float %288, %291, !dbg !35
  %293 = bitcast float %287 to i32, !dbg !37
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 8, i32 31), !dbg !37
  %295 = bitcast i32 %294 to float, !dbg !37
  %296 = bitcast float %292 to i32, !dbg !37
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 8, i32 31), !dbg !37
  %298 = bitcast i32 %297 to float, !dbg !37
  %299 = bitcast float %282 to i32, !dbg !37
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 8, i32 31), !dbg !37
  %301 = bitcast i32 %300 to float, !dbg !37
  %302 = fsub float %295, %287, !dbg !21
  %303 = fadd float %282, %301, !dbg !26
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !27
  %305 = tail call float @llvm.nvvm.div.full(float %301, float %303), !dbg !28
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !29
  %307 = fmul float %306, %302, !dbg !30
  %308 = fadd float %287, %307, !dbg !31
  %309 = fadd float %292, %298, !dbg !36
  %310 = fmul float %302, %302, !dbg !32
  %311 = fmul float %282, %310, !dbg !33
  %312 = fmul float %306, %311, !dbg !34
  %313 = fadd float %309, %312, !dbg !35
  %314 = bitcast float %308 to i32, !dbg !37
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !37
  %316 = bitcast i32 %315 to float, !dbg !37
  %317 = bitcast float %313 to i32, !dbg !37
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !37
  %319 = bitcast i32 %318 to float, !dbg !37
  %320 = bitcast float %303 to i32, !dbg !37
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 4, i32 31), !dbg !37
  %322 = bitcast i32 %321 to float, !dbg !37
  %323 = fsub float %316, %308, !dbg !21
  %324 = fadd float %303, %322, !dbg !26
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !27
  %326 = tail call float @llvm.nvvm.div.full(float %322, float %324), !dbg !28
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !29
  %328 = fmul float %327, %323, !dbg !30
  %329 = fadd float %308, %328, !dbg !31
  %330 = fadd float %313, %319, !dbg !36
  %331 = fmul float %323, %323, !dbg !32
  %332 = fmul float %303, %331, !dbg !33
  %333 = fmul float %327, %332, !dbg !34
  %334 = fadd float %330, %333, !dbg !35
  %335 = bitcast float %329 to i32, !dbg !37
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !37
  %337 = bitcast i32 %336 to float, !dbg !37
  %338 = bitcast float %334 to i32, !dbg !37
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !37
  %340 = bitcast i32 %339 to float, !dbg !37
  %341 = bitcast float %324 to i32, !dbg !37
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 2, i32 31), !dbg !37
  %343 = bitcast i32 %342 to float, !dbg !37
  %344 = fsub float %337, %329, !dbg !21
  %345 = fadd float %324, %343, !dbg !26
  %346 = fcmp oeq float %345, 0.000000e+00, !dbg !27
  %347 = tail call float @llvm.nvvm.div.full(float %343, float %345), !dbg !28
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !29
  %349 = fmul float %348, %344, !dbg !30
  %350 = fadd float %329, %349, !dbg !31
  %351 = fadd float %334, %340, !dbg !36
  %352 = fmul float %344, %344, !dbg !32
  %353 = fmul float %324, %352, !dbg !33
  %354 = fmul float %348, %353, !dbg !34
  %355 = fadd float %351, %354, !dbg !35
  %356 = bitcast float %350 to i32, !dbg !37
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !37
  %358 = bitcast i32 %357 to float, !dbg !37
  %359 = bitcast float %355 to i32, !dbg !37
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !37
  %361 = bitcast i32 %360 to float, !dbg !37
  %362 = bitcast float %345 to i32, !dbg !37
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !37
  %364 = bitcast i32 %363 to float, !dbg !37
  %365 = fsub float %358, %350, !dbg !21
  %366 = fadd float %345, %364, !dbg !26
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !27
  %368 = tail call float @llvm.nvvm.div.full(float %364, float %366), !dbg !28
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !29
  %370 = fmul float %369, %365, !dbg !30
  %371 = fadd float %350, %370, !dbg !31
  %372 = fadd float %355, %361, !dbg !36
  %373 = fmul float %365, %365, !dbg !32
  %374 = fmul float %345, %373, !dbg !33
  %375 = fmul float %369, %374, !dbg !34
  %376 = fadd float %372, %375, !dbg !35
  %377 = and i32 %23, 7, !dbg !37
  %378 = icmp eq i32 %22, 0, !dbg !37
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !37
  %380 = bitcast float %371 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 %378) #5, !dbg !37
  %381 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %377, !dbg !37
  %382 = bitcast float %376 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 %378) #5, !dbg !37
  %383 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %377, !dbg !37
  %384 = bitcast float %366 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 %378) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %385 = icmp slt i32 %21, 8, !dbg !37
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !37
  %387 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %385) #5, !dbg !37
  %388 = bitcast i32 %387 to float, !dbg !37
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !37
  %390 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %389, i1 %385) #5, !dbg !37
  %391 = bitcast i32 %390 to float, !dbg !37
  %392 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !37
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %385) #5, !dbg !37
  %394 = bitcast i32 %393 to float, !dbg !37
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !37
  %396 = bitcast i32 %395 to float, !dbg !37
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !37
  %398 = bitcast i32 %397 to float, !dbg !37
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !37
  %400 = bitcast i32 %399 to float, !dbg !37
  %401 = fsub float %396, %388, !dbg !21
  %402 = fadd float %394, %400, !dbg !26
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !27
  %404 = tail call float @llvm.nvvm.div.full(float %400, float %402), !dbg !28
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !29
  %406 = fmul float %401, %405, !dbg !30
  %407 = fadd float %406, %388, !dbg !31
  %408 = fadd float %391, %398, !dbg !36
  %409 = fmul float %401, %401, !dbg !32
  %410 = fmul float %409, %394, !dbg !33
  %411 = fmul float %410, %405, !dbg !34
  %412 = fadd float %408, %411, !dbg !35
  %413 = bitcast float %407 to i32, !dbg !37
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 2, i32 31), !dbg !37
  %415 = bitcast i32 %414 to float, !dbg !37
  %416 = bitcast float %412 to i32, !dbg !37
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 2, i32 31), !dbg !37
  %418 = bitcast i32 %417 to float, !dbg !37
  %419 = bitcast float %402 to i32, !dbg !37
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !37
  %421 = bitcast i32 %420 to float, !dbg !37
  %422 = fsub float %415, %407, !dbg !21
  %423 = fadd float %402, %421, !dbg !26
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !27
  %425 = tail call float @llvm.nvvm.div.full(float %421, float %423), !dbg !28
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !29
  %427 = fmul float %422, %426, !dbg !30
  %428 = fadd float %407, %427, !dbg !31
  %429 = fadd float %412, %418, !dbg !36
  %430 = fmul float %422, %422, !dbg !32
  %431 = fmul float %402, %430, !dbg !33
  %432 = fmul float %426, %431, !dbg !34
  %433 = fadd float %429, %432, !dbg !35
  %434 = bitcast float %428 to i32, !dbg !37
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !37
  %436 = bitcast i32 %435 to float, !dbg !37
  %437 = bitcast float %433 to i32, !dbg !37
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !37
  %439 = bitcast i32 %438 to float, !dbg !37
  %440 = bitcast float %423 to i32, !dbg !37
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !37
  %442 = bitcast i32 %441 to float, !dbg !37
  %443 = fsub float %436, %428, !dbg !21
  %444 = fadd float %423, %442, !dbg !26
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !27
  %446 = tail call float @llvm.nvvm.div.full(float %442, float %444), !dbg !28
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !29
  %448 = fmul float %443, %447, !dbg !30
  %449 = fadd float %428, %448, !dbg !31
  %450 = fadd float %433, %439, !dbg !36
  %451 = fmul float %443, %443, !dbg !32
  %452 = fmul float %423, %451, !dbg !33
  %453 = fmul float %447, %452, !dbg !34
  %454 = fadd float %450, %453, !dbg !35
  %455 = and i32 %21, 7, !dbg !37
  %456 = icmp eq i32 %455, 0, !dbg !37
  %457 = and i1 %385, %456, !dbg !37
  %458 = bitcast float %449 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %458, i1 %457) #5, !dbg !37
  %459 = bitcast float %454 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %459, i1 %457) #5, !dbg !37
  %460 = bitcast float %444 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %460, i1 %457) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %461 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %462 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !37
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %37) #5, !dbg !38
  %464 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !38
  %465 = add nuw nsw i32 %25, 3072, !dbg !39
  %466 = add nuw nsw i32 %25, 3080, !dbg !39
  %467 = zext nneg i32 %465 to i64, !dbg !40
  %468 = getelementptr float, ptr addrspace(1) %1, i64 %467, !dbg !40
  %469 = zext nneg i32 %25 to i64, !dbg !40
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !40
  %471 = getelementptr i8, ptr addrspace(1) %470, i64 12304, !dbg !40
  %472 = zext nneg i32 %466 to i64, !dbg !40
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !40
  %474 = getelementptr i8, ptr addrspace(1) %470, i64 12336, !dbg !40
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %468, i1 %29) #5, !dbg !41
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %471, i1 %29) #5, !dbg !41
  %477 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %473, i1 %29) #5, !dbg !41
  %478 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %474, i1 %29) #5, !dbg !41
  %479 = getelementptr bfloat, ptr addrspace(1) %2, i64 %467, !dbg !42
  %480 = getelementptr bfloat, ptr addrspace(1) %2, i64 %472, !dbg !42
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %479, i1 %29) #5, !dbg !43
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %480, i1 %29) #5, !dbg !43
  %483 = zext nneg i32 %26 to i64, !dbg !44
  %484 = getelementptr float, ptr addrspace(1) %1, i64 %483, !dbg !44
  %485 = zext nneg i32 %27 to i64, !dbg !44
  %486 = getelementptr float, ptr addrspace(1) %1, i64 %485, !dbg !44
  %487 = zext nneg i32 %28 to i64, !dbg !44
  %488 = getelementptr float, ptr addrspace(1) %1, i64 %487, !dbg !44
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i1 %29) #5, !dbg !45
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %484, i1 %29) #5, !dbg !45
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %486, i1 %29) #5, !dbg !45
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %488, i1 %29) #5, !dbg !45
  %493 = getelementptr bfloat, ptr addrspace(1) %2, i64 %469, !dbg !46
  %494 = getelementptr bfloat, ptr addrspace(1) %2, i64 %485, !dbg !46
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %493, i1 %29) #5, !dbg !47
  %496 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %494, i1 %29) #5, !dbg !47
  %497 = tail call float @llvm.nvvm.div.full(float %462, float 3.072000e+03), !dbg !48
  %498 = fadd float %497, 0x3EB0C6F7A0000000, !dbg !49
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i66 = icmp eq i32 %514, 0, !dbg !50
  br i1 %.not.i66, label %517, label %515, !dbg !50

515:                                              ; preds = %__nv_rsqrtf.exit
  %516 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %498), !dbg !50
  br label %__nv_rsqrtf.exit68, !dbg !50

517:                                              ; preds = %__nv_rsqrtf.exit
  %518 = tail call float @llvm.nvvm.rsqrt.approx.f(float %498), !dbg !50
  br label %__nv_rsqrtf.exit68, !dbg !50

__nv_rsqrtf.exit68:                               ; preds = %515, %517
  %.0.i67 = phi float [ %516, %515 ], [ %518, %517 ], !dbg !50
  %519 = extractvalue { i32, i32, i32, i32 } %464, 3, !dbg !38
  %520 = bitcast i32 %519 to <2 x bfloat>, !dbg !38
  %521 = extractvalue { i32, i32, i32, i32 } %464, 2, !dbg !38
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !38
  %523 = extractvalue { i32, i32, i32, i32 } %464, 1, !dbg !38
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !38
  %525 = extractvalue { i32, i32, i32, i32 } %464, 0, !dbg !38
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !38
  %527 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !38
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !38
  %529 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !38
  %530 = bitcast i32 %529 to <2 x bfloat>, !dbg !38
  %531 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !38
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !38
  %533 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !38
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !38
  %535 = extractvalue { i32, i32, i32, i32 } %496, 3, !dbg !47
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !47
  %537 = extractvalue { i32, i32, i32, i32 } %496, 2, !dbg !47
  %538 = bitcast i32 %537 to <2 x bfloat>, !dbg !47
  %539 = extractvalue { i32, i32, i32, i32 } %496, 1, !dbg !47
  %540 = bitcast i32 %539 to <2 x bfloat>, !dbg !47
  %541 = extractvalue { i32, i32, i32, i32 } %496, 0, !dbg !47
  %542 = bitcast i32 %541 to <2 x bfloat>, !dbg !47
  %543 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !47
  %544 = bitcast i32 %543 to <2 x bfloat>, !dbg !47
  %545 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !47
  %546 = bitcast i32 %545 to <2 x bfloat>, !dbg !47
  %547 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !47
  %548 = bitcast i32 %547 to <2 x bfloat>, !dbg !47
  %549 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !47
  %550 = bitcast i32 %549 to <2 x bfloat>, !dbg !47
  %551 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !45
  %552 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !45
  %553 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !45
  %554 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !45
  %555 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !45
  %556 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !45
  %557 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !45
  %558 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !45
  %559 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !45
  %560 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !45
  %561 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !45
  %562 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !45
  %563 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !45
  %564 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !45
  %565 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !45
  %566 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !45
  %567 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !43
  %568 = bitcast i32 %567 to <2 x bfloat>, !dbg !43
  %569 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !43
  %570 = bitcast i32 %569 to <2 x bfloat>, !dbg !43
  %571 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !43
  %572 = bitcast i32 %571 to <2 x bfloat>, !dbg !43
  %573 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !43
  %574 = bitcast i32 %573 to <2 x bfloat>, !dbg !43
  %575 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !43
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !43
  %577 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !43
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !43
  %579 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !43
  %580 = bitcast i32 %579 to <2 x bfloat>, !dbg !43
  %581 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !43
  %582 = bitcast i32 %581 to <2 x bfloat>, !dbg !43
  %583 = extractvalue { i32, i32, i32, i32 } %478, 3, !dbg !41
  %584 = extractvalue { i32, i32, i32, i32 } %478, 2, !dbg !41
  %585 = extractvalue { i32, i32, i32, i32 } %478, 1, !dbg !41
  %586 = extractvalue { i32, i32, i32, i32 } %478, 0, !dbg !41
  %587 = extractvalue { i32, i32, i32, i32 } %477, 3, !dbg !41
  %588 = extractvalue { i32, i32, i32, i32 } %477, 2, !dbg !41
  %589 = extractvalue { i32, i32, i32, i32 } %477, 1, !dbg !41
  %590 = extractvalue { i32, i32, i32, i32 } %477, 0, !dbg !41
  %591 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !41
  %592 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !41
  %593 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !41
  %594 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !41
  %595 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !41
  %596 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !41
  %597 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !41
  %598 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !41
  %599 = shl i32 %21, 3, !dbg !11
  %600 = and i32 %599, 2040, !dbg !11
  %601 = or disjoint i32 %600, 2048, !dbg !11
  %602 = icmp samesign ult i32 %601, 3072, !dbg !12
  %603 = and i1 %20, %602, !dbg !16
  %604 = add i32 %601, %30, !dbg !14
  %605 = add i32 %600, %30, !dbg !14
  %606 = sext i32 %605 to i64, !dbg !51
  %607 = getelementptr bfloat, ptr addrspace(1) %3, i64 %606, !dbg !51
  %608 = sext i32 %604 to i64, !dbg !51
  %609 = getelementptr bfloat, ptr addrspace(1) %3, i64 %608, !dbg !51
  %610 = getelementptr bfloat, ptr addrspace(1) %3, i64 %33, !dbg !51
  %611 = getelementptr bfloat, ptr addrspace(1) %3, i64 %35, !dbg !51
  %612 = fpext <2 x bfloat> %534 to <2 x float>, !dbg !52
  %613 = insertelement <2 x float> poison, float %461, i64 0, !dbg !53
  %614 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %615 = fsub <2 x float> %612, %614, !dbg !53
  %616 = fpext <2 x bfloat> %550 to <2 x float>, !dbg !54
  %617 = insertelement <2 x i32> poison, i32 %566, i64 0, !dbg !45
  %618 = insertelement <2 x i32> %617, i32 %565, i64 1, !dbg !45
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !45
  %620 = fpext <2 x bfloat> %582 to <2 x float>, !dbg !55
  %621 = insertelement <2 x i32> poison, i32 %598, i64 0, !dbg !41
  %622 = insertelement <2 x i32> %621, i32 %597, i64 1, !dbg !41
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !41
  %624 = insertelement <2 x float> poison, float %.0.i67, i64 0, !dbg !56
  %625 = shufflevector <2 x float> %624, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %626 = fmul <2 x float> %615, %625, !dbg !56
  %627 = fadd <2 x float> %623, %620, !dbg !57
  %628 = fadd <2 x float> %627, splat (float 1.000000e+00), !dbg !58
  %629 = fmul <2 x float> %628, %626, !dbg !59
  %630 = fadd <2 x float> %619, %616, !dbg !60
  %631 = fadd <2 x float> %630, %629, !dbg !61
  %632 = extractelement <2 x float> %631, i64 0, !dbg !62
  %633 = select i1 %37, float %632, float 0x7FF0000000000000, !dbg !63
  %634 = extractelement <2 x float> %631, i64 1, !dbg !62
  %635 = select i1 %37, float %634, float 0x7FF0000000000000, !dbg !63
  %636 = select i1 %37, float %632, float 0xFFF0000000000000, !dbg !62
  %637 = select i1 %37, float %634, float 0xFFF0000000000000, !dbg !62
  %638 = fptrunc <2 x float> %631 to <2 x bfloat>, !dbg !64
  %639 = fpext <2 x bfloat> %532 to <2 x float>, !dbg !52
  %640 = fsub <2 x float> %639, %614, !dbg !53
  %641 = fpext <2 x bfloat> %548 to <2 x float>, !dbg !54
  %642 = insertelement <2 x i32> poison, i32 %564, i64 0, !dbg !45
  %643 = insertelement <2 x i32> %642, i32 %563, i64 1, !dbg !45
  %644 = bitcast <2 x i32> %643 to <2 x float>, !dbg !45
  %645 = fpext <2 x bfloat> %580 to <2 x float>, !dbg !55
  %646 = insertelement <2 x i32> poison, i32 %596, i64 0, !dbg !41
  %647 = insertelement <2 x i32> %646, i32 %595, i64 1, !dbg !41
  %648 = bitcast <2 x i32> %647 to <2 x float>, !dbg !41
  %649 = fmul <2 x float> %640, %625, !dbg !56
  %650 = fadd <2 x float> %648, %645, !dbg !57
  %651 = fadd <2 x float> %650, splat (float 1.000000e+00), !dbg !58
  %652 = fmul <2 x float> %651, %649, !dbg !59
  %653 = fadd <2 x float> %644, %641, !dbg !60
  %654 = fadd <2 x float> %653, %652, !dbg !61
  %655 = extractelement <2 x float> %654, i64 0, !dbg !62
  %656 = select i1 %37, float %655, float 0x7FF0000000000000, !dbg !63
  %657 = extractelement <2 x float> %654, i64 1, !dbg !62
  %658 = select i1 %37, float %657, float 0x7FF0000000000000, !dbg !63
  %659 = select i1 %37, float %655, float 0xFFF0000000000000, !dbg !62
  %660 = select i1 %37, float %657, float 0xFFF0000000000000, !dbg !62
  %661 = fptrunc <2 x float> %654 to <2 x bfloat>, !dbg !64
  %662 = fpext <2 x bfloat> %530 to <2 x float>, !dbg !52
  %663 = fsub <2 x float> %662, %614, !dbg !53
  %664 = fpext <2 x bfloat> %546 to <2 x float>, !dbg !54
  %665 = insertelement <2 x i32> poison, i32 %562, i64 0, !dbg !45
  %666 = insertelement <2 x i32> %665, i32 %561, i64 1, !dbg !45
  %667 = bitcast <2 x i32> %666 to <2 x float>, !dbg !45
  %668 = fpext <2 x bfloat> %578 to <2 x float>, !dbg !55
  %669 = insertelement <2 x i32> poison, i32 %594, i64 0, !dbg !41
  %670 = insertelement <2 x i32> %669, i32 %593, i64 1, !dbg !41
  %671 = bitcast <2 x i32> %670 to <2 x float>, !dbg !41
  %672 = fmul <2 x float> %663, %625, !dbg !56
  %673 = fadd <2 x float> %671, %668, !dbg !57
  %674 = fadd <2 x float> %673, splat (float 1.000000e+00), !dbg !58
  %675 = fmul <2 x float> %674, %672, !dbg !59
  %676 = fadd <2 x float> %667, %664, !dbg !60
  %677 = fadd <2 x float> %676, %675, !dbg !61
  %678 = extractelement <2 x float> %677, i64 0, !dbg !62
  %679 = select i1 %37, float %678, float 0x7FF0000000000000, !dbg !63
  %680 = extractelement <2 x float> %677, i64 1, !dbg !62
  %681 = select i1 %37, float %680, float 0x7FF0000000000000, !dbg !63
  %682 = select i1 %37, float %678, float 0xFFF0000000000000, !dbg !62
  %683 = select i1 %37, float %680, float 0xFFF0000000000000, !dbg !62
  %684 = fptrunc <2 x float> %677 to <2 x bfloat>, !dbg !64
  %685 = fpext <2 x bfloat> %528 to <2 x float>, !dbg !52
  %686 = fsub <2 x float> %685, %614, !dbg !53
  %687 = fpext <2 x bfloat> %544 to <2 x float>, !dbg !54
  %688 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !45
  %689 = insertelement <2 x i32> %688, i32 %559, i64 1, !dbg !45
  %690 = bitcast <2 x i32> %689 to <2 x float>, !dbg !45
  %691 = fpext <2 x bfloat> %576 to <2 x float>, !dbg !55
  %692 = insertelement <2 x i32> poison, i32 %592, i64 0, !dbg !41
  %693 = insertelement <2 x i32> %692, i32 %591, i64 1, !dbg !41
  %694 = bitcast <2 x i32> %693 to <2 x float>, !dbg !41
  %695 = fmul <2 x float> %686, %625, !dbg !56
  %696 = fadd <2 x float> %694, %691, !dbg !57
  %697 = fadd <2 x float> %696, splat (float 1.000000e+00), !dbg !58
  %698 = fmul <2 x float> %697, %695, !dbg !59
  %699 = fadd <2 x float> %690, %687, !dbg !60
  %700 = fadd <2 x float> %699, %698, !dbg !61
  %701 = extractelement <2 x float> %700, i64 0, !dbg !62
  %702 = select i1 %37, float %701, float 0x7FF0000000000000, !dbg !63
  %703 = extractelement <2 x float> %700, i64 1, !dbg !62
  %704 = select i1 %37, float %703, float 0x7FF0000000000000, !dbg !63
  %705 = select i1 %37, float %701, float 0xFFF0000000000000, !dbg !62
  %706 = select i1 %37, float %703, float 0xFFF0000000000000, !dbg !62
  %707 = fptrunc <2 x float> %700 to <2 x bfloat>, !dbg !64
  %708 = fpext <2 x bfloat> %526 to <2 x float>, !dbg !52
  %709 = fsub <2 x float> %708, %614, !dbg !53
  %710 = fpext <2 x bfloat> %542 to <2 x float>, !dbg !54
  %711 = insertelement <2 x i32> poison, i32 %558, i64 0, !dbg !45
  %712 = insertelement <2 x i32> %711, i32 %557, i64 1, !dbg !45
  %713 = bitcast <2 x i32> %712 to <2 x float>, !dbg !45
  %714 = fpext <2 x bfloat> %574 to <2 x float>, !dbg !55
  %715 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !41
  %716 = insertelement <2 x i32> %715, i32 %589, i64 1, !dbg !41
  %717 = bitcast <2 x i32> %716 to <2 x float>, !dbg !41
  %718 = fmul <2 x float> %709, %625, !dbg !56
  %719 = fadd <2 x float> %717, %714, !dbg !57
  %720 = fadd <2 x float> %719, splat (float 1.000000e+00), !dbg !58
  %721 = fmul <2 x float> %720, %718, !dbg !59
  %722 = fadd <2 x float> %713, %710, !dbg !60
  %723 = fadd <2 x float> %722, %721, !dbg !61
  %724 = extractelement <2 x float> %723, i64 0, !dbg !62
  %725 = select i1 %37, float %724, float 0x7FF0000000000000, !dbg !63
  %726 = extractelement <2 x float> %723, i64 1, !dbg !62
  %727 = select i1 %37, float %726, float 0x7FF0000000000000, !dbg !63
  %728 = select i1 %37, float %724, float 0xFFF0000000000000, !dbg !62
  %729 = select i1 %37, float %726, float 0xFFF0000000000000, !dbg !62
  %730 = fptrunc <2 x float> %723 to <2 x bfloat>, !dbg !64
  %731 = fpext <2 x bfloat> %524 to <2 x float>, !dbg !52
  %732 = fsub <2 x float> %731, %614, !dbg !53
  %733 = fpext <2 x bfloat> %540 to <2 x float>, !dbg !54
  %734 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !45
  %735 = insertelement <2 x i32> %734, i32 %555, i64 1, !dbg !45
  %736 = bitcast <2 x i32> %735 to <2 x float>, !dbg !45
  %737 = fpext <2 x bfloat> %572 to <2 x float>, !dbg !55
  %738 = insertelement <2 x i32> poison, i32 %588, i64 0, !dbg !41
  %739 = insertelement <2 x i32> %738, i32 %587, i64 1, !dbg !41
  %740 = bitcast <2 x i32> %739 to <2 x float>, !dbg !41
  %741 = fmul <2 x float> %732, %625, !dbg !56
  %742 = fadd <2 x float> %740, %737, !dbg !57
  %743 = fadd <2 x float> %742, splat (float 1.000000e+00), !dbg !58
  %744 = fmul <2 x float> %743, %741, !dbg !59
  %745 = fadd <2 x float> %736, %733, !dbg !60
  %746 = fadd <2 x float> %745, %744, !dbg !61
  %747 = extractelement <2 x float> %746, i64 0, !dbg !62
  %748 = select i1 %37, float %747, float 0x7FF0000000000000, !dbg !63
  %749 = extractelement <2 x float> %746, i64 1, !dbg !62
  %750 = select i1 %37, float %749, float 0x7FF0000000000000, !dbg !63
  %751 = select i1 %37, float %747, float 0xFFF0000000000000, !dbg !62
  %752 = select i1 %37, float %749, float 0xFFF0000000000000, !dbg !62
  %753 = fptrunc <2 x float> %746 to <2 x bfloat>, !dbg !64
  %754 = fpext <2 x bfloat> %522 to <2 x float>, !dbg !52
  %755 = fsub <2 x float> %754, %614, !dbg !53
  %756 = fpext <2 x bfloat> %538 to <2 x float>, !dbg !54
  %757 = insertelement <2 x i32> poison, i32 %554, i64 0, !dbg !45
  %758 = insertelement <2 x i32> %757, i32 %553, i64 1, !dbg !45
  %759 = bitcast <2 x i32> %758 to <2 x float>, !dbg !45
  %760 = fpext <2 x bfloat> %570 to <2 x float>, !dbg !55
  %761 = insertelement <2 x i32> poison, i32 %586, i64 0, !dbg !41
  %762 = insertelement <2 x i32> %761, i32 %585, i64 1, !dbg !41
  %763 = bitcast <2 x i32> %762 to <2 x float>, !dbg !41
  %764 = fmul <2 x float> %755, %625, !dbg !56
  %765 = fadd <2 x float> %763, %760, !dbg !57
  %766 = fadd <2 x float> %765, splat (float 1.000000e+00), !dbg !58
  %767 = fmul <2 x float> %766, %764, !dbg !59
  %768 = fadd <2 x float> %759, %756, !dbg !60
  %769 = fadd <2 x float> %768, %767, !dbg !61
  %770 = extractelement <2 x float> %769, i64 0, !dbg !62
  %771 = select i1 %37, float %770, float 0x7FF0000000000000, !dbg !63
  %772 = extractelement <2 x float> %769, i64 1, !dbg !62
  %773 = select i1 %37, float %772, float 0x7FF0000000000000, !dbg !63
  %774 = select i1 %37, float %770, float 0xFFF0000000000000, !dbg !62
  %775 = select i1 %37, float %772, float 0xFFF0000000000000, !dbg !62
  %776 = fptrunc <2 x float> %769 to <2 x bfloat>, !dbg !64
  %777 = fpext <2 x bfloat> %520 to <2 x float>, !dbg !52
  %778 = fsub <2 x float> %777, %614, !dbg !53
  %779 = fpext <2 x bfloat> %536 to <2 x float>, !dbg !54
  %780 = insertelement <2 x i32> poison, i32 %552, i64 0, !dbg !45
  %781 = insertelement <2 x i32> %780, i32 %551, i64 1, !dbg !45
  %782 = bitcast <2 x i32> %781 to <2 x float>, !dbg !45
  %783 = fpext <2 x bfloat> %568 to <2 x float>, !dbg !55
  %784 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !41
  %785 = insertelement <2 x i32> %784, i32 %583, i64 1, !dbg !41
  %786 = bitcast <2 x i32> %785 to <2 x float>, !dbg !41
  %787 = fmul <2 x float> %778, %625, !dbg !56
  %788 = fadd <2 x float> %786, %783, !dbg !57
  %789 = fadd <2 x float> %788, splat (float 1.000000e+00), !dbg !58
  %790 = fmul <2 x float> %789, %787, !dbg !59
  %791 = fadd <2 x float> %782, %779, !dbg !60
  %792 = fadd <2 x float> %791, %790, !dbg !61
  %793 = extractelement <2 x float> %792, i64 0, !dbg !62
  %794 = select i1 %37, float %793, float 0x7FF0000000000000, !dbg !63
  %795 = extractelement <2 x float> %792, i64 1, !dbg !62
  %796 = select i1 %37, float %795, float 0x7FF0000000000000, !dbg !63
  %797 = select i1 %37, float %793, float 0xFFF0000000000000, !dbg !62
  %798 = select i1 %37, float %795, float 0xFFF0000000000000, !dbg !62
  %799 = fptrunc <2 x float> %792 to <2 x bfloat>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %800 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25, !dbg !64
  %801 = bitcast <2 x bfloat> %638 to i32, !dbg !64
  %802 = bitcast <2 x bfloat> %661 to i32, !dbg !64
  %803 = bitcast <2 x bfloat> %684 to i32, !dbg !64
  %804 = bitcast <2 x bfloat> %707 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %800, i32 %801, i32 %802, i32 %803, i32 %804, i1 true) #5, !dbg !64
  %805 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %27, !dbg !64
  %806 = bitcast <2 x bfloat> %730 to i32, !dbg !64
  %807 = bitcast <2 x bfloat> %753 to i32, !dbg !64
  %808 = bitcast <2 x bfloat> %776 to i32, !dbg !64
  %809 = bitcast <2 x bfloat> %799 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %805, i32 %806, i32 %807, i32 %808, i32 %809, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %810 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %600, !dbg !64
  %811 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %601, !dbg !64
  %812 = load <4 x i32>, ptr addrspace(3) %811, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %810, align 16, !dbg !64
  %813 = getelementptr inbounds nuw i8, ptr addrspace(3) %810, i32 4, !dbg !64
  %.extract70 = load i32, ptr addrspace(3) %813, align 4, !dbg !64
  %814 = getelementptr inbounds nuw i8, ptr addrspace(3) %810, i32 8, !dbg !64
  %.extract72 = load i32, ptr addrspace(3) %814, align 8, !dbg !64
  %815 = getelementptr inbounds nuw i8, ptr addrspace(3) %810, i32 12, !dbg !64
  %.extract74 = load i32, ptr addrspace(3) %815, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract70, i32 %.extract72, i32 %.extract74, ptr addrspace(1) %607, i1 %20) #5, !dbg !64
  %.extract76 = extractelement <4 x i32> %812, i64 0, !dbg !64
  %.extract78 = extractelement <4 x i32> %812, i64 1, !dbg !64
  %.extract80 = extractelement <4 x i32> %812, i64 2, !dbg !64
  %.extract82 = extractelement <4 x i32> %812, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract76, i32 %.extract78, i32 %.extract80, i32 %.extract82, ptr addrspace(1) %609, i1 %603) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %816 = fcmp olt float %633, %635, !dbg !67
  %817 = fcmp uno float %633, 0.000000e+00, !dbg !68
  %818 = or i1 %816, %817, !dbg !69
  %819 = select i1 %818, float %633, float %635, !dbg !70
  %820 = fcmp olt float %819, %656, !dbg !67
  %821 = fcmp uno float %819, 0.000000e+00, !dbg !68
  %822 = or i1 %820, %821, !dbg !69
  %823 = select i1 %822, float %819, float %656, !dbg !70
  %824 = fcmp olt float %823, %658, !dbg !67
  %825 = fcmp uno float %823, 0.000000e+00, !dbg !68
  %826 = or i1 %824, %825, !dbg !69
  %827 = select i1 %826, float %823, float %658, !dbg !70
  %828 = fcmp olt float %827, %679, !dbg !67
  %829 = fcmp uno float %827, 0.000000e+00, !dbg !68
  %830 = or i1 %828, %829, !dbg !69
  %831 = select i1 %830, float %827, float %679, !dbg !70
  %832 = fcmp olt float %831, %681, !dbg !67
  %833 = fcmp uno float %831, 0.000000e+00, !dbg !68
  %834 = or i1 %832, %833, !dbg !69
  %835 = select i1 %834, float %831, float %681, !dbg !70
  %836 = fcmp olt float %835, %702, !dbg !67
  %837 = fcmp uno float %835, 0.000000e+00, !dbg !68
  %838 = or i1 %836, %837, !dbg !69
  %839 = select i1 %838, float %835, float %702, !dbg !70
  %840 = fcmp olt float %839, %704, !dbg !67
  %841 = fcmp uno float %839, 0.000000e+00, !dbg !68
  %842 = or i1 %840, %841, !dbg !69
  %843 = select i1 %842, float %839, float %704, !dbg !70
  %844 = fcmp olt float %843, %725, !dbg !67
  %845 = fcmp uno float %843, 0.000000e+00, !dbg !68
  %846 = or i1 %844, %845, !dbg !69
  %847 = select i1 %846, float %843, float %725, !dbg !70
  %848 = fcmp olt float %847, %727, !dbg !67
  %849 = fcmp uno float %847, 0.000000e+00, !dbg !68
  %850 = or i1 %848, %849, !dbg !69
  %851 = select i1 %850, float %847, float %727, !dbg !70
  %852 = fcmp olt float %851, %748, !dbg !67
  %853 = fcmp uno float %851, 0.000000e+00, !dbg !68
  %854 = or i1 %852, %853, !dbg !69
  %855 = select i1 %854, float %851, float %748, !dbg !70
  %856 = fcmp olt float %855, %750, !dbg !67
  %857 = fcmp uno float %855, 0.000000e+00, !dbg !68
  %858 = or i1 %856, %857, !dbg !69
  %859 = select i1 %858, float %855, float %750, !dbg !70
  %860 = fcmp olt float %859, %771, !dbg !67
  %861 = fcmp uno float %859, 0.000000e+00, !dbg !68
  %862 = or i1 %860, %861, !dbg !69
  %863 = select i1 %862, float %859, float %771, !dbg !70
  %864 = fcmp olt float %863, %773, !dbg !67
  %865 = fcmp uno float %863, 0.000000e+00, !dbg !68
  %866 = or i1 %864, %865, !dbg !69
  %867 = select i1 %866, float %863, float %773, !dbg !70
  %868 = fcmp olt float %867, %794, !dbg !67
  %869 = fcmp uno float %867, 0.000000e+00, !dbg !68
  %870 = or i1 %868, %869, !dbg !69
  %871 = select i1 %870, float %867, float %794, !dbg !70
  %872 = fcmp olt float %871, %796, !dbg !67
  %873 = fcmp uno float %871, 0.000000e+00, !dbg !68
  %874 = or i1 %872, %873, !dbg !69
  %875 = select i1 %874, float %871, float %796, !dbg !70
  %876 = bitcast float %875 to i32, !dbg !65
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 16, i32 31), !dbg !65
  %878 = bitcast i32 %877 to float, !dbg !65
  %879 = fcmp olt float %875, %878, !dbg !67
  %880 = fcmp uno float %875, 0.000000e+00, !dbg !68
  %881 = or i1 %879, %880, !dbg !69
  %882 = select i1 %881, float %875, float %878, !dbg !70
  %883 = bitcast float %882 to i32, !dbg !65
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 8, i32 31), !dbg !65
  %885 = bitcast i32 %884 to float, !dbg !65
  %886 = fcmp olt float %882, %885, !dbg !67
  %887 = fcmp uno float %882, 0.000000e+00, !dbg !68
  %888 = or i1 %886, %887, !dbg !69
  %889 = select i1 %888, float %882, float %885, !dbg !70
  %890 = bitcast float %889 to i32, !dbg !65
  %891 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %890, i32 4, i32 31), !dbg !65
  %892 = bitcast i32 %891 to float, !dbg !65
  %893 = fcmp olt float %889, %892, !dbg !67
  %894 = fcmp uno float %889, 0.000000e+00, !dbg !68
  %895 = or i1 %893, %894, !dbg !69
  %896 = select i1 %895, float %889, float %892, !dbg !70
  %897 = bitcast float %896 to i32, !dbg !65
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 2, i32 31), !dbg !65
  %899 = bitcast i32 %898 to float, !dbg !65
  %900 = fcmp olt float %896, %899, !dbg !67
  %901 = fcmp uno float %896, 0.000000e+00, !dbg !68
  %902 = or i1 %900, %901, !dbg !69
  %903 = select i1 %902, float %896, float %899, !dbg !70
  %904 = bitcast float %903 to i32, !dbg !65
  %905 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %904, i32 1, i32 31), !dbg !65
  %906 = bitcast i32 %905 to float, !dbg !65
  %907 = fcmp olt float %903, %906, !dbg !67
  %908 = fcmp uno float %903, 0.000000e+00, !dbg !68
  %909 = or i1 %907, %908, !dbg !69
  %910 = select i1 %909, i32 %904, i32 %905, !dbg !70
  %911 = insertelement <1 x i32> poison, i32 %910, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %911, i1 %378) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %912 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %385) #5, !dbg !65
  %913 = bitcast i32 %912 to float, !dbg !65
  %914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 4, i32 31), !dbg !65
  %915 = bitcast i32 %914 to float, !dbg !65
  %916 = fcmp olt float %913, %915, !dbg !67
  %917 = fcmp uno float %913, 0.000000e+00, !dbg !68
  %918 = or i1 %917, %916, !dbg !69
  %919 = select i1 %918, float %913, float %915, !dbg !70
  %920 = bitcast float %919 to i32, !dbg !65
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 2, i32 31), !dbg !65
  %922 = bitcast i32 %921 to float, !dbg !65
  %923 = fcmp olt float %919, %922, !dbg !67
  %924 = fcmp uno float %919, 0.000000e+00, !dbg !68
  %925 = or i1 %923, %924, !dbg !69
  %926 = select i1 %925, float %919, float %922, !dbg !70
  %927 = bitcast float %926 to i32, !dbg !65
  %928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %927, i32 1, i32 31), !dbg !65
  %929 = bitcast i32 %928 to float, !dbg !65
  %930 = fcmp olt float %926, %929, !dbg !67
  %931 = fcmp uno float %926, 0.000000e+00, !dbg !68
  %932 = or i1 %930, %931, !dbg !69
  %933 = select i1 %932, i32 %927, i32 %928, !dbg !70
  %934 = insertelement <1 x i32> poison, i32 %933, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %934, i1 %457) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %935 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %936 = fcmp ogt float %636, %637, !dbg !73
  %937 = fcmp uno float %636, 0.000000e+00, !dbg !74
  %938 = or i1 %936, %937, !dbg !75
  %939 = select i1 %938, float %636, float %637, !dbg !76
  %940 = fcmp ogt float %939, %659, !dbg !73
  %941 = fcmp uno float %939, 0.000000e+00, !dbg !74
  %942 = or i1 %940, %941, !dbg !75
  %943 = select i1 %942, float %939, float %659, !dbg !76
  %944 = fcmp ogt float %943, %660, !dbg !73
  %945 = fcmp uno float %943, 0.000000e+00, !dbg !74
  %946 = or i1 %944, %945, !dbg !75
  %947 = select i1 %946, float %943, float %660, !dbg !76
  %948 = fcmp ogt float %947, %682, !dbg !73
  %949 = fcmp uno float %947, 0.000000e+00, !dbg !74
  %950 = or i1 %948, %949, !dbg !75
  %951 = select i1 %950, float %947, float %682, !dbg !76
  %952 = fcmp ogt float %951, %683, !dbg !73
  %953 = fcmp uno float %951, 0.000000e+00, !dbg !74
  %954 = or i1 %952, %953, !dbg !75
  %955 = select i1 %954, float %951, float %683, !dbg !76
  %956 = fcmp ogt float %955, %705, !dbg !73
  %957 = fcmp uno float %955, 0.000000e+00, !dbg !74
  %958 = or i1 %956, %957, !dbg !75
  %959 = select i1 %958, float %955, float %705, !dbg !76
  %960 = fcmp ogt float %959, %706, !dbg !73
  %961 = fcmp uno float %959, 0.000000e+00, !dbg !74
  %962 = or i1 %960, %961, !dbg !75
  %963 = select i1 %962, float %959, float %706, !dbg !76
  %964 = fcmp ogt float %963, %728, !dbg !73
  %965 = fcmp uno float %963, 0.000000e+00, !dbg !74
  %966 = or i1 %964, %965, !dbg !75
  %967 = select i1 %966, float %963, float %728, !dbg !76
  %968 = fcmp ogt float %967, %729, !dbg !73
  %969 = fcmp uno float %967, 0.000000e+00, !dbg !74
  %970 = or i1 %968, %969, !dbg !75
  %971 = select i1 %970, float %967, float %729, !dbg !76
  %972 = fcmp ogt float %971, %751, !dbg !73
  %973 = fcmp uno float %971, 0.000000e+00, !dbg !74
  %974 = or i1 %972, %973, !dbg !75
  %975 = select i1 %974, float %971, float %751, !dbg !76
  %976 = fcmp ogt float %975, %752, !dbg !73
  %977 = fcmp uno float %975, 0.000000e+00, !dbg !74
  %978 = or i1 %976, %977, !dbg !75
  %979 = select i1 %978, float %975, float %752, !dbg !76
  %980 = fcmp ogt float %979, %774, !dbg !73
  %981 = fcmp uno float %979, 0.000000e+00, !dbg !74
  %982 = or i1 %980, %981, !dbg !75
  %983 = select i1 %982, float %979, float %774, !dbg !76
  %984 = fcmp ogt float %983, %775, !dbg !73
  %985 = fcmp uno float %983, 0.000000e+00, !dbg !74
  %986 = or i1 %984, %985, !dbg !75
  %987 = select i1 %986, float %983, float %775, !dbg !76
  %988 = fcmp ogt float %987, %797, !dbg !73
  %989 = fcmp uno float %987, 0.000000e+00, !dbg !74
  %990 = or i1 %988, %989, !dbg !75
  %991 = select i1 %990, float %987, float %797, !dbg !76
  %992 = fcmp ogt float %991, %798, !dbg !73
  %993 = fcmp uno float %991, 0.000000e+00, !dbg !74
  %994 = or i1 %992, %993, !dbg !75
  %995 = select i1 %994, float %991, float %798, !dbg !76
  %996 = bitcast float %995 to i32, !dbg !71
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 16, i32 31), !dbg !71
  %998 = bitcast i32 %997 to float, !dbg !71
  %999 = fcmp ogt float %995, %998, !dbg !73
  %1000 = fcmp uno float %995, 0.000000e+00, !dbg !74
  %1001 = or i1 %999, %1000, !dbg !75
  %1002 = select i1 %1001, float %995, float %998, !dbg !76
  %1003 = bitcast float %1002 to i32, !dbg !71
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 8, i32 31), !dbg !71
  %1005 = bitcast i32 %1004 to float, !dbg !71
  %1006 = fcmp ogt float %1002, %1005, !dbg !73
  %1007 = fcmp uno float %1002, 0.000000e+00, !dbg !74
  %1008 = or i1 %1006, %1007, !dbg !75
  %1009 = select i1 %1008, float %1002, float %1005, !dbg !76
  %1010 = bitcast float %1009 to i32, !dbg !71
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 4, i32 31), !dbg !71
  %1012 = bitcast i32 %1011 to float, !dbg !71
  %1013 = fcmp ogt float %1009, %1012, !dbg !73
  %1014 = fcmp uno float %1009, 0.000000e+00, !dbg !74
  %1015 = or i1 %1013, %1014, !dbg !75
  %1016 = select i1 %1015, float %1009, float %1012, !dbg !76
  %1017 = bitcast float %1016 to i32, !dbg !71
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 2, i32 31), !dbg !71
  %1019 = bitcast i32 %1018 to float, !dbg !71
  %1020 = fcmp ogt float %1016, %1019, !dbg !73
  %1021 = fcmp uno float %1016, 0.000000e+00, !dbg !74
  %1022 = or i1 %1020, %1021, !dbg !75
  %1023 = select i1 %1022, float %1016, float %1019, !dbg !76
  %1024 = bitcast float %1023 to i32, !dbg !71
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 1, i32 31), !dbg !71
  %1026 = bitcast i32 %1025 to float, !dbg !71
  %1027 = fcmp ogt float %1023, %1026, !dbg !73
  %1028 = fcmp uno float %1023, 0.000000e+00, !dbg !74
  %1029 = or i1 %1027, %1028, !dbg !75
  %1030 = select i1 %1029, i32 %1024, i32 %1025, !dbg !76
  %1031 = insertelement <1 x i32> poison, i32 %1030, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %1031, i1 %378) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1032 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %385) #5, !dbg !71
  %1033 = bitcast i32 %1032 to float, !dbg !71
  %1034 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1032, i32 4, i32 31), !dbg !71
  %1035 = bitcast i32 %1034 to float, !dbg !71
  %1036 = fcmp ogt float %1033, %1035, !dbg !73
  %1037 = fcmp uno float %1033, 0.000000e+00, !dbg !74
  %1038 = or i1 %1037, %1036, !dbg !75
  %1039 = select i1 %1038, float %1033, float %1035, !dbg !76
  %1040 = bitcast float %1039 to i32, !dbg !71
  %1041 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1040, i32 2, i32 31), !dbg !71
  %1042 = bitcast i32 %1041 to float, !dbg !71
  %1043 = fcmp ogt float %1039, %1042, !dbg !73
  %1044 = fcmp uno float %1039, 0.000000e+00, !dbg !74
  %1045 = or i1 %1043, %1044, !dbg !75
  %1046 = select i1 %1045, float %1039, float %1042, !dbg !76
  %1047 = bitcast float %1046 to i32, !dbg !71
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 1, i32 31), !dbg !71
  %1049 = bitcast i32 %1048 to float, !dbg !71
  %1050 = fcmp ogt float %1046, %1049, !dbg !73
  %1051 = fcmp uno float %1046, 0.000000e+00, !dbg !74
  %1052 = or i1 %1050, %1051, !dbg !75
  %1053 = select i1 %1052, i32 %1047, i32 %1048, !dbg !76
  %1054 = insertelement <1 x i32> poison, i32 %1053, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %1054, i1 %457) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1055 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %1056 = sext i32 %19 to i64, !dbg !77
  %1057 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1056, !dbg !77
  %1058 = fptrunc float %935 to bfloat, !dbg !78
  %1059 = and i32 %21, 255, !dbg !78
  %1060 = icmp eq i32 %1059, 0, !dbg !78
  %1061 = bitcast bfloat %1058 to i16, !dbg !78
  %1062 = and i1 %20, %1060, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1061, ptr addrspace(1) %1057, i1 %1062) #5, !dbg !78
  %1063 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1056, !dbg !79
  %1064 = fptrunc float %1055 to bfloat, !dbg !80
  %1065 = bitcast bfloat %1064 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1065, ptr addrspace(1) %1063, i1 %1062) #5, !dbg !80
  %1066 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1056, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1061, ptr addrspace(1) %1066, i1 %1062) #5, !dbg !82
  %1067 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1056, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1065, ptr addrspace(1) %1067, i1 %1062) #5, !dbg !84
  %1068 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1056, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1061, ptr addrspace(1) %1068, i1 %1062) #5, !dbg !86
  %1069 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1056, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1065, ptr addrspace(1) %1069, i1 %1062) #5, !dbg !88
  %1070 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1056, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1061, ptr addrspace(1) %1070, i1 %1062) #5, !dbg !90
  %1071 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1056, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1065, ptr addrspace(1) %1071, i1 %1062) #5, !dbg !92
  %1072 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %610, i1 %37) #5, !dbg !93
  %1073 = extractvalue { i32, i32, i32, i32 } %1072, 0, !dbg !93
  %1074 = bitcast i32 %1073 to <2 x bfloat>, !dbg !93
  %1075 = extractvalue { i32, i32, i32, i32 } %1072, 1, !dbg !93
  %1076 = bitcast i32 %1075 to <2 x bfloat>, !dbg !93
  %1077 = extractvalue { i32, i32, i32, i32 } %1072, 2, !dbg !93
  %1078 = bitcast i32 %1077 to <2 x bfloat>, !dbg !93
  %1079 = extractvalue { i32, i32, i32, i32 } %1072, 3, !dbg !93
  %1080 = bitcast i32 %1079 to <2 x bfloat>, !dbg !93
  %1081 = extractelement <2 x bfloat> %1074, i64 0, !dbg !93
  %1082 = extractelement <2 x bfloat> %1074, i64 1, !dbg !93
  %1083 = extractelement <2 x bfloat> %1076, i64 0, !dbg !93
  %1084 = extractelement <2 x bfloat> %1076, i64 1, !dbg !93
  %1085 = extractelement <2 x bfloat> %1078, i64 0, !dbg !93
  %1086 = extractelement <2 x bfloat> %1078, i64 1, !dbg !93
  %1087 = extractelement <2 x bfloat> %1080, i64 0, !dbg !93
  %1088 = extractelement <2 x bfloat> %1080, i64 1, !dbg !93
  %1089 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %611, i1 %37) #5, !dbg !93
  %1090 = extractvalue { i32, i32, i32, i32 } %1089, 0, !dbg !93
  %1091 = bitcast i32 %1090 to <2 x bfloat>, !dbg !93
  %1092 = extractvalue { i32, i32, i32, i32 } %1089, 1, !dbg !93
  %1093 = bitcast i32 %1092 to <2 x bfloat>, !dbg !93
  %1094 = extractvalue { i32, i32, i32, i32 } %1089, 2, !dbg !93
  %1095 = bitcast i32 %1094 to <2 x bfloat>, !dbg !93
  %1096 = extractvalue { i32, i32, i32, i32 } %1089, 3, !dbg !93
  %1097 = bitcast i32 %1096 to <2 x bfloat>, !dbg !93
  %1098 = extractelement <2 x bfloat> %1091, i64 0, !dbg !93
  %1099 = extractelement <2 x bfloat> %1091, i64 1, !dbg !93
  %1100 = extractelement <2 x bfloat> %1093, i64 0, !dbg !93
  %1101 = extractelement <2 x bfloat> %1093, i64 1, !dbg !93
  %1102 = extractelement <2 x bfloat> %1095, i64 0, !dbg !93
  %1103 = extractelement <2 x bfloat> %1095, i64 1, !dbg !93
  %1104 = extractelement <2 x bfloat> %1097, i64 0, !dbg !93
  %1105 = extractelement <2 x bfloat> %1097, i64 1, !dbg !93
  %1106 = fpext bfloat %1081 to float, !dbg !94
  %1107 = fpext bfloat %1082 to float, !dbg !94
  %1108 = fpext bfloat %1083 to float, !dbg !94
  %1109 = fpext bfloat %1084 to float, !dbg !94
  %1110 = fpext bfloat %1085 to float, !dbg !94
  %1111 = fpext bfloat %1086 to float, !dbg !94
  %1112 = fpext bfloat %1087 to float, !dbg !94
  %1113 = fpext bfloat %1088 to float, !dbg !94
  %1114 = fpext bfloat %1098 to float, !dbg !94
  %1115 = fpext bfloat %1099 to float, !dbg !94
  %1116 = fpext bfloat %1100 to float, !dbg !94
  %1117 = fpext bfloat %1101 to float, !dbg !94
  %1118 = fpext bfloat %1102 to float, !dbg !94
  %1119 = fpext bfloat %1103 to float, !dbg !94
  %1120 = fpext bfloat %1104 to float, !dbg !94
  %1121 = fpext bfloat %1105 to float, !dbg !94
  %.inv = fcmp oge float %935, 0.000000e+00, !dbg !95
  %1122 = select i1 %.inv, float 0.000000e+00, float %935, !dbg !95
  %1123 = fsub float 0.000000e+00, %1122, !dbg !97
  %.inv23 = fcmp ole float %1055, 0.000000e+00, !dbg !98
  %1124 = select i1 %.inv23, float 0.000000e+00, float %1055, !dbg !98
  %1125 = fcmp ogt float %1123, %1124, !dbg !100
  %1126 = fcmp uno float %1123, 0.000000e+00, !dbg !102
  %1127 = or i1 %1126, %1125, !dbg !103
  %1128 = select i1 %1127, float %1123, float %1124, !dbg !104
  %1129 = fmul float %1128, 0x3F80204080000000, !dbg !105
  %1130 = fcmp ogt float %1129, 0x3EE4F8B580000000, !dbg !106
  %1131 = fcmp uno float %1129, 0.000000e+00, !dbg !108
  %1132 = or i1 %1130, %1131, !dbg !109
  %1133 = select i1 %1132, float %1129, float 0x3EE4F8B580000000, !dbg !110
  %1134 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1133), !dbg !111
  %1135 = fmul float %1134, %1106, !dbg !112
  %1136 = fmul float %1134, %1107, !dbg !112
  %1137 = fmul float %1134, %1108, !dbg !112
  %1138 = fmul float %1134, %1109, !dbg !112
  %1139 = fmul float %1134, %1110, !dbg !112
  %1140 = fmul float %1134, %1111, !dbg !112
  %1141 = fmul float %1134, %1112, !dbg !112
  %1142 = fmul float %1134, %1113, !dbg !112
  %1143 = fmul float %1134, %1114, !dbg !112
  %1144 = fmul float %1134, %1115, !dbg !112
  %1145 = fmul float %1134, %1116, !dbg !112
  %1146 = fmul float %1134, %1117, !dbg !112
  %1147 = fmul float %1134, %1118, !dbg !112
  %1148 = fmul float %1134, %1119, !dbg !112
  %1149 = fmul float %1134, %1120, !dbg !112
  %1150 = fmul float %1134, %1121, !dbg !112
  %1151 = tail call float @llvm.nvvm.round.f(float %1135) #5, !dbg !113
  %1152 = tail call float @llvm.nvvm.round.f(float %1136) #5, !dbg !113
  %1153 = tail call float @llvm.nvvm.round.f(float %1137) #5, !dbg !113
  %1154 = tail call float @llvm.nvvm.round.f(float %1138) #5, !dbg !113
  %1155 = tail call float @llvm.nvvm.round.f(float %1139) #5, !dbg !113
  %1156 = tail call float @llvm.nvvm.round.f(float %1140) #5, !dbg !113
  %1157 = tail call float @llvm.nvvm.round.f(float %1141) #5, !dbg !113
  %1158 = tail call float @llvm.nvvm.round.f(float %1142) #5, !dbg !113
  %1159 = tail call float @llvm.nvvm.round.f(float %1143) #5, !dbg !113
  %1160 = tail call float @llvm.nvvm.round.f(float %1144) #5, !dbg !113
  %1161 = tail call float @llvm.nvvm.round.f(float %1145) #5, !dbg !113
  %1162 = tail call float @llvm.nvvm.round.f(float %1146) #5, !dbg !113
  %1163 = tail call float @llvm.nvvm.round.f(float %1147) #5, !dbg !113
  %1164 = tail call float @llvm.nvvm.round.f(float %1148) #5, !dbg !113
  %1165 = tail call float @llvm.nvvm.round.f(float %1149) #5, !dbg !113
  %1166 = tail call float @llvm.nvvm.round.f(float %1150) #5, !dbg !113
  %1167 = insertelement <4 x float> poison, float %1151, i64 0, !dbg !114
  %1168 = insertelement <4 x float> %1167, float %1152, i64 1, !dbg !114
  %1169 = insertelement <4 x float> %1168, float %1153, i64 2, !dbg !114
  %1170 = insertelement <4 x float> %1169, float %1154, i64 3, !dbg !114
  %1171 = fcmp ogt <4 x float> %1170, splat (float -1.270000e+02), !dbg !114
  %1172 = fcmp uno <4 x float> %1170, zeroinitializer, !dbg !116
  %1173 = or <4 x i1> %1171, %1172, !dbg !117
  %1174 = select <4 x i1> %1173, <4 x float> %1170, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1175 = fcmp olt <4 x float> %1174, splat (float 1.270000e+02), !dbg !119
  %1176 = fcmp uno <4 x float> %1174, zeroinitializer, !dbg !121
  %1177 = or <4 x i1> %1175, %1176, !dbg !122
  %1178 = fptosi <4 x float> %1174 to <4 x i8>, !dbg !123
  %1179 = select <4 x i1> %1177, <4 x i8> %1178, <4 x i8> splat (i8 127), !dbg !124
  %1180 = insertelement <4 x float> poison, float %1155, i64 0, !dbg !114
  %1181 = insertelement <4 x float> %1180, float %1156, i64 1, !dbg !114
  %1182 = insertelement <4 x float> %1181, float %1157, i64 2, !dbg !114
  %1183 = insertelement <4 x float> %1182, float %1158, i64 3, !dbg !114
  %1184 = fcmp ogt <4 x float> %1183, splat (float -1.270000e+02), !dbg !114
  %1185 = fcmp uno <4 x float> %1183, zeroinitializer, !dbg !116
  %1186 = or <4 x i1> %1184, %1185, !dbg !117
  %1187 = select <4 x i1> %1186, <4 x float> %1183, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1188 = fcmp olt <4 x float> %1187, splat (float 1.270000e+02), !dbg !119
  %1189 = fcmp uno <4 x float> %1187, zeroinitializer, !dbg !121
  %1190 = or <4 x i1> %1188, %1189, !dbg !122
  %1191 = fptosi <4 x float> %1187 to <4 x i8>, !dbg !123
  %1192 = select <4 x i1> %1190, <4 x i8> %1191, <4 x i8> splat (i8 127), !dbg !124
  %1193 = insertelement <4 x float> poison, float %1159, i64 0, !dbg !114
  %1194 = insertelement <4 x float> %1193, float %1160, i64 1, !dbg !114
  %1195 = insertelement <4 x float> %1194, float %1161, i64 2, !dbg !114
  %1196 = insertelement <4 x float> %1195, float %1162, i64 3, !dbg !114
  %1197 = fcmp ogt <4 x float> %1196, splat (float -1.270000e+02), !dbg !114
  %1198 = fcmp uno <4 x float> %1196, zeroinitializer, !dbg !116
  %1199 = or <4 x i1> %1197, %1198, !dbg !117
  %1200 = select <4 x i1> %1199, <4 x float> %1196, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1201 = fcmp olt <4 x float> %1200, splat (float 1.270000e+02), !dbg !119
  %1202 = fcmp uno <4 x float> %1200, zeroinitializer, !dbg !121
  %1203 = or <4 x i1> %1201, %1202, !dbg !122
  %1204 = fptosi <4 x float> %1200 to <4 x i8>, !dbg !123
  %1205 = select <4 x i1> %1203, <4 x i8> %1204, <4 x i8> splat (i8 127), !dbg !124
  %1206 = insertelement <4 x float> poison, float %1163, i64 0, !dbg !114
  %1207 = insertelement <4 x float> %1206, float %1164, i64 1, !dbg !114
  %1208 = insertelement <4 x float> %1207, float %1165, i64 2, !dbg !114
  %1209 = insertelement <4 x float> %1208, float %1166, i64 3, !dbg !114
  %1210 = fcmp ogt <4 x float> %1209, splat (float -1.270000e+02), !dbg !114
  %1211 = fcmp uno <4 x float> %1209, zeroinitializer, !dbg !116
  %1212 = or <4 x i1> %1210, %1211, !dbg !117
  %1213 = select <4 x i1> %1212, <4 x float> %1209, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1214 = fcmp olt <4 x float> %1213, splat (float 1.270000e+02), !dbg !119
  %1215 = fcmp uno <4 x float> %1213, zeroinitializer, !dbg !121
  %1216 = or <4 x i1> %1214, %1215, !dbg !122
  %1217 = fptosi <4 x float> %1213 to <4 x i8>, !dbg !123
  %1218 = select <4 x i1> %1216, <4 x i8> %1217, <4 x i8> splat (i8 127), !dbg !124
  %1219 = getelementptr i8, ptr addrspace(1) %12, i64 %33, !dbg !125
  %1220 = bitcast <4 x i8> %1179 to i32, !dbg !126
  %1221 = bitcast <4 x i8> %1192 to i32, !dbg !126
  %1222 = bitcast <4 x i8> %1205 to i32, !dbg !126
  %1223 = bitcast <4 x i8> %1218 to i32, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1220, i32 %1221, i32 %1222, i32 %1223, ptr addrspace(1) %1219, i1 %37) #5, !dbg !126
  %1224 = getelementptr i8, ptr addrspace(1) %13, i64 %33, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1220, i32 %1221, i32 %1222, i32 %1223, ptr addrspace(1) %1224, i1 %37) #5, !dbg !128
  %1225 = getelementptr i8, ptr addrspace(1) %14, i64 %33, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1220, i32 %1221, i32 %1222, i32 %1223, ptr addrspace(1) %1225, i1 %37) #5, !dbg !130
  %1226 = getelementptr i8, ptr addrspace(1) %15, i64 %33, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1220, i32 %1221, i32 %1222, i32 %1223, ptr addrspace(1) %1226, i1 %37) #5, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!37 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 95, column: 25, scope: !6)
!90 = !DILocation(line: 95, column: 37, scope: !6)
!91 = !DILocation(line: 96, column: 26, scope: !6)
!92 = !DILocation(line: 96, column: 38, scope: !6)
!93 = !DILocation(line: 103, column: 53, scope: !6)
!94 = !DILocation(line: 103, column: 115, scope: !6)
!95 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !96)
!96 = !DILocation(line: 105, column: 46, scope: !6)
!97 = !DILocation(line: 106, column: 17, scope: !6)
!98 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !101)
!101 = !DILocation(line: 108, column: 46, scope: !6)
!102 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !101)
!104 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !101)
!105 = !DILocation(line: 110, column: 24, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !107)
!107 = !DILocation(line: 113, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !107)
!109 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !107)
!110 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !107)
!111 = !DILocation(line: 116, column: 25, scope: !6)
!112 = !DILocation(line: 119, column: 24, scope: !6)
!113 = !DILocation(line: 120, column: 36, scope: !6)
!114 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !115)
!115 = !DILocation(line: 123, column: 46, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !115)
!117 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !115)
!118 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !115)
!119 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 125, column: 46, scope: !6)
!121 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !120)
!122 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !120)
!123 = !DILocation(line: 127, column: 25, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !120)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 129, column: 30, scope: !6)
!128 = !DILocation(line: 129, column: 54, scope: !6)
!129 = !DILocation(line: 130, column: 30, scope: !6)
!130 = !DILocation(line: 130, column: 54, scope: !6)
!131 = !DILocation(line: 131, column: 30, scope: !6)
!132 = !DILocation(line: 131, column: 54, scope: !6)
!133 = !DILocation(line: 97, column: 4, scope: !6)
