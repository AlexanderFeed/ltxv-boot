; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/vk/cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 3, !dbg !13
  %14 = and i32 %13, 63, !dbg !13
  %15 = lshr i32 %12, 6, !dbg !13
  %16 = and i32 %15, 7, !dbg !13
  %17 = or disjoint i32 %14, %11, !dbg !14
  %18 = or disjoint i32 %16, %11, !dbg !14
  %19 = or disjoint i32 %18, 8, !dbg !14
  %20 = or disjoint i32 %18, 16, !dbg !14
  %21 = or disjoint i32 %18, 24, !dbg !14
  %22 = or disjoint i32 %18, 32, !dbg !14
  %23 = or disjoint i32 %18, 40, !dbg !14
  %24 = or disjoint i32 %18, 48, !dbg !14
  %25 = or disjoint i32 %18, 56, !dbg !14
  %26 = icmp slt i32 %17, 512, !dbg !15
  %27 = icmp slt i32 %18, 512, !dbg !15
  %28 = icmp slt i32 %19, 512, !dbg !15
  %29 = icmp slt i32 %20, 512, !dbg !15
  %30 = icmp slt i32 %21, 512, !dbg !15
  %31 = icmp slt i32 %22, 512, !dbg !15
  %32 = icmp slt i32 %23, 512, !dbg !15
  %33 = icmp slt i32 %24, 512, !dbg !15
  %34 = icmp slt i32 %25, 512, !dbg !15
  %35 = shl i32 %12, 3, !dbg !16
  %36 = and i32 %35, 56, !dbg !16
  %37 = sext i32 %17 to i64, !dbg !17
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = sext i32 %18 to i64, !dbg !17
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = sext i32 %19 to i64, !dbg !17
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = sext i32 %20 to i64, !dbg !17
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !17
  %45 = sext i32 %21 to i64, !dbg !17
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45, !dbg !17
  %47 = sext i32 %22 to i64, !dbg !17
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !17
  %49 = sext i32 %23 to i64, !dbg !17
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !17
  %51 = sext i32 %24 to i64, !dbg !17
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51, !dbg !17
  %53 = sext i32 %25 to i64, !dbg !17
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !17
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %27) #6, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %28) #6, !dbg !18
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %29) #6, !dbg !18
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %30) #6, !dbg !18
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %31) #6, !dbg !18
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %32) #6, !dbg !18
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %33) #6, !dbg !18
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %34) #6, !dbg !18
  %71 = shl i32 %17, 12, !dbg !19
  %72 = icmp slt i64 %62, 0, !dbg !20
  %73 = insertelement <8 x i64> poison, i64 %70, i64 0, !dbg !21
  %74 = insertelement <8 x i64> %73, i64 %69, i64 1, !dbg !21
  %75 = insertelement <8 x i64> %74, i64 %68, i64 2, !dbg !21
  %76 = insertelement <8 x i64> %75, i64 %67, i64 3, !dbg !21
  %77 = insertelement <8 x i64> %76, i64 %66, i64 4, !dbg !21
  %78 = insertelement <8 x i64> %77, i64 %65, i64 5, !dbg !21
  %79 = insertelement <8 x i64> %78, i64 %64, i64 6, !dbg !21
  %80 = insertelement <8 x i64> %79, i64 %63, i64 7, !dbg !21
  %81 = add <8 x i64> %80, splat (i64 32128), !dbg !21
  %82 = icmp slt <8 x i64> %80, zeroinitializer, !dbg !20
  %83 = select <8 x i1> %82, <8 x i64> %81, <8 x i64> %80, !dbg !22
  %84 = icmp ult <8 x i64> %83, splat (i64 32128), !dbg !23
  %85 = xor i1 %27, true, !dbg !24
  %86 = xor i1 %28, true, !dbg !24
  %87 = xor i1 %29, true, !dbg !24
  %88 = xor i1 %30, true, !dbg !24
  %89 = xor i1 %31, true, !dbg !24
  %90 = xor i1 %32, true, !dbg !24
  %91 = xor i1 %33, true, !dbg !24
  %92 = xor i1 %34, true, !dbg !24
  %93 = extractelement <8 x i1> %84, i64 7, !dbg !25
  %94 = or i1 %93, %85, !dbg !25
  %95 = extractelement <8 x i1> %84, i64 6, !dbg !25
  %96 = or i1 %95, %86, !dbg !25
  %97 = extractelement <8 x i1> %84, i64 5, !dbg !25
  %98 = or i1 %97, %87, !dbg !25
  %99 = extractelement <8 x i1> %84, i64 4, !dbg !25
  %100 = or i1 %99, %88, !dbg !25
  %101 = extractelement <8 x i1> %84, i64 3, !dbg !25
  %102 = or i1 %101, %89, !dbg !25
  %103 = extractelement <8 x i1> %84, i64 2, !dbg !25
  %104 = or i1 %103, %90, !dbg !25
  %105 = extractelement <8 x i1> %84, i64 1, !dbg !25
  %106 = or i1 %105, %91, !dbg !25
  %107 = extractelement <8 x i1> %84, i64 0, !dbg !25
  %108 = or i1 %107, %92, !dbg !25
  %109 = shl i64 %62, 12, !dbg !26
  %110 = add i64 %109, 131596288, !dbg !26
  %111 = select i1 %72, i64 %110, i64 %109, !dbg !26
  %invariant.op = or disjoint i32 %36, %71, !dbg !27
  %invariant.op38 = and i1 %98, %100, !dbg !27
  %invariant.op39 = and i1 %invariant.op38, %102, !dbg !27
  %invariant.op40 = and i1 %invariant.op39, %104, !dbg !27
  %invariant.op41 = and i1 %invariant.op40, %106, !dbg !27
  %invariant.op42 = and i1 %invariant.op41, %108, !dbg !27
  %112 = and i1 %96, %invariant.op42
  %.demorgan15.reass = and i1 %112, %94
  %113 = zext nneg i32 %36 to i64, !dbg !27
  %invariant.op66 = or disjoint i64 %111, %113, !dbg !27
  %114 = insertelement <8 x i1> poison, i1 %26, i64 0, !dbg !28
  %115 = shufflevector <8 x i1> %114, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !28
  br label %116, !dbg !27

116:                                              ; preds = %9, %125
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %125 ]
  %117 = phi <8 x float> [ zeroinitializer, %9 ], [ %186, %125 ]
  %118 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %118
  %119 = sext i32 %.reass to i64, !dbg !29
  %120 = getelementptr bfloat, ptr addrspace(1) %2, i64 %119, !dbg !29
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %120, i1 %26) #6, !dbg !30
  %122 = getelementptr bfloat, ptr addrspace(1) %3, i64 %119, !dbg !31
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %122, i1 %26) #6, !dbg !32
  br i1 %.demorgan15.reass, label %125, label %124, !dbg !33

124:                                              ; preds = %116
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 43, ptr nonnull @assertFunc_0, i64 1), !dbg !33
  unreachable, !dbg !33

125:                                              ; preds = %116
  %126 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !32
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !32
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !32
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !32
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.reass67 = or i64 %indvars.iv, %invariant.op66
  %142 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass67, !dbg !34
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %142, i1 %26) #6, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !35
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !35
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !35
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !35
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !35
  %152 = shufflevector <2 x bfloat> %133, <2 x bfloat> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %153 = shufflevector <2 x bfloat> %129, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %154 = shufflevector <8 x bfloat> %152, <8 x bfloat> %153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !36
  %155 = shufflevector <2 x bfloat> %129, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %156 = shufflevector <8 x bfloat> %154, <8 x bfloat> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !36
  %157 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %158 = shufflevector <8 x bfloat> %156, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !36
  %159 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %160 = shufflevector <8 x bfloat> %158, <8 x bfloat> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !36
  %161 = fpext <8 x bfloat> %160 to <8 x float>, !dbg !36
  %162 = shufflevector <2 x bfloat> %141, <2 x bfloat> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %163 = shufflevector <2 x bfloat> %137, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %164 = shufflevector <8 x bfloat> %162, <8 x bfloat> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !37
  %165 = shufflevector <2 x bfloat> %137, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %166 = shufflevector <8 x bfloat> %164, <8 x bfloat> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !37
  %167 = shufflevector <2 x bfloat> %135, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %168 = shufflevector <8 x bfloat> %166, <8 x bfloat> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !37
  %169 = shufflevector <2 x bfloat> %135, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %170 = shufflevector <8 x bfloat> %168, <8 x bfloat> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !37
  %171 = fpext <8 x bfloat> %170 to <8 x float>, !dbg !37
  %172 = shufflevector <2 x bfloat> %145, <2 x bfloat> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %173 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %174 = shufflevector <8 x bfloat> %172, <8 x bfloat> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !38
  %175 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %176 = shufflevector <8 x bfloat> %174, <8 x bfloat> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !38
  %177 = shufflevector <2 x bfloat> %151, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %178 = shufflevector <8 x bfloat> %176, <8 x bfloat> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !38
  %179 = shufflevector <2 x bfloat> %151, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %180 = shufflevector <8 x bfloat> %178, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !38
  %181 = fpext <8 x bfloat> %180 to <8 x float>, !dbg !38
  %182 = fadd <8 x float> %171, %181, !dbg !39
  %183 = fadd <8 x float> %182, %161, !dbg !40
  %184 = fmul <8 x float> %183, %183, !dbg !41
  %185 = fadd <8 x float> %117, %184, !dbg !42
  %186 = select <8 x i1> %115, <8 x float> %185, <8 x float> %117, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !27
  %187 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !27
  br i1 %187, label %116, label %__nv_rsqrtf.exit, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %125
  %shift = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %188 = fadd <8 x float> %186, %shift, !dbg !43
  %shift77 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %189 = fadd <8 x float> %shift77, %188, !dbg !43
  %shift78 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %190 = fadd <8 x float> %shift78, %189, !dbg !43
  %shift79 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %191 = fadd <8 x float> %shift79, %190, !dbg !43
  %shift80 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %192 = fadd <8 x float> %shift80, %191, !dbg !43
  %shift81 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %193 = fadd <8 x float> %shift81, %192, !dbg !43
  %shift82 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %194 = fadd <8 x float> %shift82, %193, !dbg !43
  %195 = extractelement <8 x float> %194, i64 0, !dbg !43
  %196 = bitcast float %195 to i32, !dbg !48
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !48
  %198 = bitcast i32 %197 to float, !dbg !48
  %199 = fadd float %195, %198, !dbg !43
  %200 = bitcast float %199 to i32, !dbg !48
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !48
  %202 = bitcast i32 %201 to float, !dbg !48
  %203 = fadd float %199, %202, !dbg !43
  %204 = bitcast float %203 to i32, !dbg !48
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !48
  %206 = bitcast i32 %205 to float, !dbg !48
  %207 = fadd float %203, %206, !dbg !43
  %208 = tail call float @llvm.nvvm.div.full(float %207, float 4.096000e+03), !dbg !49
  %209 = fadd float %208, 0x3EB0C6F7A0000000, !dbg !50
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i34 = icmp eq i32 %217, 0, !dbg !51
  br i1 %.not.i34, label %220, label %218, !dbg !51

218:                                              ; preds = %__nv_rsqrtf.exit
  %219 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

220:                                              ; preds = %__nv_rsqrtf.exit
  %221 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

__nv_rsqrtf.exit36:                               ; preds = %218, %220
  %.0.i35 = phi float [ %219, %218 ], [ %221, %220 ], !dbg !51
  %invariant.op68 = or disjoint i64 %111, %113, !dbg !52
  %222 = insertelement <2 x float> poison, float %.0.i35, i64 0, !dbg !53
  %223 = shufflevector <2 x float> %222, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  br label %224, !dbg !52

224:                                              ; preds = %224, %__nv_rsqrtf.exit36
  %indvars.iv57 = phi i64 [ 0, %__nv_rsqrtf.exit36 ], [ %indvars.iv.next58, %224 ]
  %225 = or disjoint i64 %indvars.iv57, %113, !dbg !54
  %226 = getelementptr bfloat, ptr addrspace(1) %4, i64 %225, !dbg !55
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %226, i1 true) #6, !dbg !56
  %228 = trunc nuw nsw i64 %indvars.iv57 to i32
  %.reass44 = or i32 %invariant.op, %228
  %229 = sext i32 %.reass44 to i64, !dbg !57
  %230 = getelementptr bfloat, ptr addrspace(1) %2, i64 %229, !dbg !57
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %230, i1 %26) #6, !dbg !58
  %232 = getelementptr bfloat, ptr addrspace(1) %3, i64 %229, !dbg !59
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %232, i1 %26) #6, !dbg !60
  %234 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !60
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !60
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !60
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !60
  %238 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !60
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !60
  %240 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !60
  %241 = bitcast i32 %240 to <2 x bfloat>, !dbg !60
  %242 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !58
  %243 = bitcast i32 %242 to <2 x bfloat>, !dbg !58
  %244 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !58
  %245 = bitcast i32 %244 to <2 x bfloat>, !dbg !58
  %246 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !58
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !58
  %248 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !58
  %249 = bitcast i32 %248 to <2 x bfloat>, !dbg !58
  %250 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !56
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !56
  %252 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !56
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !56
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !56
  %256 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !56
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %.reass69 = or i64 %indvars.iv57, %invariant.op68
  %258 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass69, !dbg !62
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %258, i1 %26) #6, !dbg !63
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !63
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !63
  %262 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !63
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !63
  %264 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !63
  %265 = bitcast i32 %264 to <2 x bfloat>, !dbg !63
  %266 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !63
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !63
  %268 = getelementptr bfloat, ptr addrspace(1) %5, i64 %229, !dbg !64
  %269 = fpext <2 x bfloat> %241 to <2 x float>, !dbg !65
  %270 = fpext <2 x bfloat> %249 to <2 x float>, !dbg !66
  %271 = fpext <2 x bfloat> %257 to <2 x float>, !dbg !67
  %272 = fpext <2 x bfloat> %261 to <2 x float>, !dbg !68
  %273 = fadd <2 x float> %270, %272, !dbg !69
  %274 = fadd <2 x float> %273, %269, !dbg !70
  %275 = fmul <2 x float> %223, %274, !dbg !53
  %276 = fmul <2 x float> %275, %271, !dbg !71
  %277 = fptrunc <2 x float> %276 to <2 x bfloat>, !dbg !72
  %278 = fpext <2 x bfloat> %239 to <2 x float>, !dbg !65
  %279 = fpext <2 x bfloat> %247 to <2 x float>, !dbg !66
  %280 = fpext <2 x bfloat> %255 to <2 x float>, !dbg !67
  %281 = fpext <2 x bfloat> %263 to <2 x float>, !dbg !68
  %282 = fadd <2 x float> %279, %281, !dbg !69
  %283 = fadd <2 x float> %282, %278, !dbg !70
  %284 = fmul <2 x float> %223, %283, !dbg !53
  %285 = fmul <2 x float> %284, %280, !dbg !71
  %286 = fptrunc <2 x float> %285 to <2 x bfloat>, !dbg !72
  %287 = fpext <2 x bfloat> %237 to <2 x float>, !dbg !65
  %288 = fpext <2 x bfloat> %245 to <2 x float>, !dbg !66
  %289 = fpext <2 x bfloat> %253 to <2 x float>, !dbg !67
  %290 = fpext <2 x bfloat> %265 to <2 x float>, !dbg !68
  %291 = fadd <2 x float> %288, %290, !dbg !69
  %292 = fadd <2 x float> %291, %287, !dbg !70
  %293 = fmul <2 x float> %223, %292, !dbg !53
  %294 = fmul <2 x float> %293, %289, !dbg !71
  %295 = fptrunc <2 x float> %294 to <2 x bfloat>, !dbg !72
  %296 = fpext <2 x bfloat> %235 to <2 x float>, !dbg !65
  %297 = fpext <2 x bfloat> %243 to <2 x float>, !dbg !66
  %298 = fpext <2 x bfloat> %251 to <2 x float>, !dbg !67
  %299 = fpext <2 x bfloat> %267 to <2 x float>, !dbg !68
  %300 = fadd <2 x float> %297, %299, !dbg !69
  %301 = fadd <2 x float> %300, %296, !dbg !70
  %302 = fmul <2 x float> %223, %301, !dbg !53
  %303 = fmul <2 x float> %302, %298, !dbg !71
  %304 = fptrunc <2 x float> %303 to <2 x bfloat>, !dbg !72
  %305 = bitcast <2 x bfloat> %277 to i32, !dbg !72
  %306 = bitcast <2 x bfloat> %286 to i32, !dbg !72
  %307 = bitcast <2 x bfloat> %295 to i32, !dbg !72
  %308 = bitcast <2 x bfloat> %304 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %268, i1 %26) #6, !dbg !72
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 64, !dbg !52
  %309 = icmp samesign ult i64 %indvars.iv57, 4032, !dbg !52
  br i1 %309, label %224, label %310, !dbg !52

310:                                              ; preds = %224
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py", directory: "/tmp/torchinductor_root/vk")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 41, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 22, scope: !10)
!22 = !DILocation(line: 42, column: 36, scope: !10)
!23 = !DILocation(line: 43, column: 41, scope: !10)
!24 = !DILocation(line: 43, column: 60, scope: !10)
!25 = !DILocation(line: 43, column: 58, scope: !10)
!26 = !DILocation(line: 44, column: 46, scope: !10)
!27 = !DILocation(line: 31, column: 40, scope: !10)
!28 = !DILocation(line: 51, column: 50, scope: !10)
!29 = !DILocation(line: 37, column: 34, scope: !10)
!30 = !DILocation(line: 37, column: 51, scope: !10)
!31 = !DILocation(line: 38, column: 34, scope: !10)
!32 = !DILocation(line: 38, column: 51, scope: !10)
!33 = !DILocation(line: 43, column: 68, scope: !10)
!34 = !DILocation(line: 44, column: 34, scope: !10)
!35 = !DILocation(line: 44, column: 53, scope: !10)
!36 = !DILocation(line: 38, column: 112, scope: !10)
!37 = !DILocation(line: 37, column: 112, scope: !10)
!38 = !DILocation(line: 44, column: 114, scope: !10)
!39 = !DILocation(line: 45, column: 22, scope: !10)
!40 = !DILocation(line: 46, column: 23, scope: !10)
!41 = !DILocation(line: 48, column: 24, scope: !10)
!42 = !DILocation(line: 50, column: 25, scope: !10)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !10, file: !45, discriminator: 0)
!47 = !DILocation(line: 52, column: 27, scope: !10)
!48 = !DILocation(line: 286, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 72, column: 25, scope: !10)
!50 = !DILocation(line: 74, column: 24, scope: !10)
!51 = !DILocation(line: 75, column: 32, scope: !10)
!52 = !DILocation(line: 53, column: 40, scope: !10)
!53 = !DILocation(line: 76, column: 24, scope: !10)
!54 = !DILocation(line: 54, column: 31, scope: !10)
!55 = !DILocation(line: 59, column: 35, scope: !10)
!56 = !DILocation(line: 59, column: 42, scope: !10)
!57 = !DILocation(line: 60, column: 35, scope: !10)
!58 = !DILocation(line: 60, column: 52, scope: !10)
!59 = !DILocation(line: 61, column: 35, scope: !10)
!60 = !DILocation(line: 61, column: 52, scope: !10)
!61 = !DILocation(line: 66, column: 70, scope: !10)
!62 = !DILocation(line: 67, column: 35, scope: !10)
!63 = !DILocation(line: 67, column: 55, scope: !10)
!64 = !DILocation(line: 79, column: 29, scope: !10)
!65 = !DILocation(line: 61, column: 114, scope: !10)
!66 = !DILocation(line: 60, column: 114, scope: !10)
!67 = !DILocation(line: 59, column: 95, scope: !10)
!68 = !DILocation(line: 67, column: 117, scope: !10)
!69 = !DILocation(line: 68, column: 24, scope: !10)
!70 = !DILocation(line: 69, column: 24, scope: !10)
!71 = !DILocation(line: 78, column: 24, scope: !10)
!72 = !DILocation(line: 79, column: 53, scope: !10)
!73 = !DILocation(line: 53, column: 4, scope: !10)
