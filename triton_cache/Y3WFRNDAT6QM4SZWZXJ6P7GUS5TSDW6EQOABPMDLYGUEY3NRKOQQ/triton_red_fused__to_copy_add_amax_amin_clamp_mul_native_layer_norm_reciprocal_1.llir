; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 256, !dbg !11
  %.lobit = lshr exact i32 %19, 8, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 3600, !dbg !13
  %23 = icmp slt i32 %17, 3600, !dbg !13
  %24 = shl i32 %18, 2, !dbg !14
  %25 = and i32 %24, 1020, !dbg !14
  %26 = shl i32 %18, 1, !dbg !14
  %27 = mul i32 %21, 3072, !dbg !15
  %28 = or disjoint i32 %27, %25
  %29 = sext i32 %28 to i64, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %22) #5, !dbg !17
  %32 = extractvalue { i32, i32 } %31, 1, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractelement <2 x bfloat> %33, i64 1, !dbg !17
  %35 = fpext bfloat %34 to float, !dbg !18
  %36 = extractelement <2 x bfloat> %33, i64 0, !dbg !17
  %37 = fpext bfloat %36 to float, !dbg !18
  %38 = extractvalue { i32, i32 } %31, 0, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %41 = fpext bfloat %40 to float, !dbg !18
  %42 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %43 = fpext bfloat %42 to float, !dbg !18
  %44 = select i1 %22, float %43, float 0.000000e+00, !dbg !19
  %45 = select i1 %22, float %41, float 0.000000e+00, !dbg !19
  %46 = select i1 %22, float %37, float 0.000000e+00, !dbg !19
  %47 = select i1 %22, float %35, float 0.000000e+00, !dbg !19
  %48 = add i32 %28, 1024, !dbg !20
  %49 = sext i32 %48 to i64, !dbg !16
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !16
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %22) #5, !dbg !17
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !17
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !17
  %54 = extractelement <2 x bfloat> %53, i64 0, !dbg !17
  %55 = fpext bfloat %54 to float, !dbg !18
  %56 = fsub float %55, %44, !dbg !21
  %57 = select i1 %22, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %58 = tail call float @llvm.nvvm.div.full(float %56, float %57), !dbg !26
  %59 = fadd float %44, %58, !dbg !27
  %60 = fsub float %55, %59, !dbg !28
  %61 = fmul float %56, %60, !dbg !29
  %62 = fadd float %61, 0.000000e+00, !dbg !30
  %63 = extractelement <2 x bfloat> %53, i64 1, !dbg !17
  %64 = fpext bfloat %63 to float, !dbg !18
  %65 = fsub float %64, %45, !dbg !21
  %66 = tail call float @llvm.nvvm.div.full(float %65, float %57), !dbg !26
  %67 = fadd float %45, %66, !dbg !27
  %68 = fsub float %64, %67, !dbg !28
  %69 = fmul float %65, %68, !dbg !29
  %70 = fadd float %69, 0.000000e+00, !dbg !30
  %71 = extractvalue { i32, i32 } %51, 1, !dbg !17
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !17
  %73 = extractelement <2 x bfloat> %72, i64 0, !dbg !17
  %74 = fpext bfloat %73 to float, !dbg !18
  %75 = fsub float %74, %46, !dbg !21
  %76 = tail call float @llvm.nvvm.div.full(float %75, float %57), !dbg !26
  %77 = fadd float %46, %76, !dbg !27
  %78 = fsub float %74, %77, !dbg !28
  %79 = fmul float %75, %78, !dbg !29
  %80 = fadd float %79, 0.000000e+00, !dbg !30
  %81 = extractelement <2 x bfloat> %72, i64 1, !dbg !17
  %82 = fpext bfloat %81 to float, !dbg !18
  %83 = fsub float %82, %47, !dbg !21
  %84 = tail call float @llvm.nvvm.div.full(float %83, float %57), !dbg !26
  %85 = fadd float %47, %84, !dbg !27
  %86 = fsub float %82, %85, !dbg !28
  %87 = fmul float %83, %86, !dbg !29
  %88 = fadd float %87, 0.000000e+00, !dbg !30
  %89 = select i1 %22, float %59, float 0.000000e+00, !dbg !19
  %90 = select i1 %22, float %67, float 0.000000e+00, !dbg !19
  %91 = select i1 %22, float %77, float 0.000000e+00, !dbg !19
  %92 = select i1 %22, float %85, float 0.000000e+00, !dbg !19
  %93 = add i32 %28, 2048, !dbg !20
  %94 = sext i32 %93 to i64, !dbg !16
  %95 = getelementptr bfloat, ptr addrspace(1) %0, i64 %94, !dbg !16
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %95, i1 %22) #5, !dbg !17
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !17
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !17
  %99 = extractelement <2 x bfloat> %98, i64 0, !dbg !17
  %100 = fpext bfloat %99 to float, !dbg !18
  %101 = fsub float %100, %89, !dbg !21
  %102 = select i1 %22, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %103 = tail call float @llvm.nvvm.div.full(float %101, float %102), !dbg !26
  %104 = fadd float %89, %103, !dbg !27
  %105 = fsub float %100, %104, !dbg !28
  %106 = fmul float %101, %105, !dbg !29
  %107 = fadd float %62, %106, !dbg !30
  %108 = extractelement <2 x bfloat> %98, i64 1, !dbg !17
  %109 = fpext bfloat %108 to float, !dbg !18
  %110 = fsub float %109, %90, !dbg !21
  %111 = select i1 %22, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %112 = tail call float @llvm.nvvm.div.full(float %110, float %111), !dbg !26
  %113 = fadd float %90, %112, !dbg !27
  %114 = fsub float %109, %113, !dbg !28
  %115 = fmul float %110, %114, !dbg !29
  %116 = fadd float %70, %115, !dbg !30
  %117 = extractvalue { i32, i32 } %96, 1, !dbg !17
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !17
  %119 = extractelement <2 x bfloat> %118, i64 0, !dbg !17
  %120 = fpext bfloat %119 to float, !dbg !18
  %121 = fsub float %120, %91, !dbg !21
  %122 = select i1 %22, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %123 = tail call float @llvm.nvvm.div.full(float %121, float %122), !dbg !26
  %124 = fadd float %91, %123, !dbg !27
  %125 = fsub float %120, %124, !dbg !28
  %126 = fmul float %121, %125, !dbg !29
  %127 = fadd float %80, %126, !dbg !30
  %128 = extractelement <2 x bfloat> %118, i64 1, !dbg !17
  %129 = fpext bfloat %128 to float, !dbg !18
  %130 = fsub float %129, %92, !dbg !21
  %131 = select i1 %22, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %132 = tail call float @llvm.nvvm.div.full(float %130, float %131), !dbg !26
  %133 = fadd float %92, %132, !dbg !27
  %134 = fsub float %129, %133, !dbg !28
  %135 = fmul float %130, %134, !dbg !29
  %136 = fadd float %88, %135, !dbg !30
  %137 = select i1 %22, float %104, float 0.000000e+00, !dbg !19
  %138 = select i1 %22, float %113, float 0.000000e+00, !dbg !19
  %139 = select i1 %22, float %124, float 0.000000e+00, !dbg !19
  %140 = select i1 %22, float %133, float 0.000000e+00, !dbg !19
  %141 = select i1 %22, float %127, float 0.000000e+00, !dbg !31
  %142 = select i1 %22, float %136, float 0.000000e+00, !dbg !31
  %143 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %144 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %145 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %146 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %147 = lshr i32 %18, 5, !dbg !11
  %148 = and i32 %26, 1022, !dbg !14
  %149 = fsub float %138, %137, !dbg !32
  %150 = select i1 %22, float 6.000000e+00, float 0.000000e+00, !dbg !35
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !36
  %152 = tail call float @llvm.nvvm.div.full(float %144, float %150), !dbg !37
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !38
  %154 = fmul float %149, %153, !dbg !39
  %155 = fadd float %137, %154, !dbg !40
  %156 = fadd float %107, %116, !dbg !41
  %157 = select i1 %22, float %156, float 0.000000e+00, !dbg !41
  %158 = fmul float %149, %149, !dbg !42
  %159 = fmul float %158, %143, !dbg !43
  %160 = fmul float %159, %153, !dbg !44
  %161 = fadd float %157, %160, !dbg !45
  %162 = fsub float %139, %155, !dbg !32
  %163 = select i1 %22, float 9.000000e+00, float 0.000000e+00, !dbg !35
  %164 = fcmp oeq float %163, 0.000000e+00, !dbg !36
  %165 = tail call float @llvm.nvvm.div.full(float %145, float %163), !dbg !37
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !38
  %167 = fmul float %166, %162, !dbg !39
  %168 = fadd float %155, %167, !dbg !40
  %169 = fadd float %141, %161, !dbg !41
  %170 = fmul float %162, %162, !dbg !42
  %171 = fmul float %150, %170, !dbg !43
  %172 = fmul float %166, %171, !dbg !44
  %173 = fadd float %169, %172, !dbg !45
  %174 = fsub float %140, %168, !dbg !32
  %175 = select i1 %22, float 1.200000e+01, float 0.000000e+00, !dbg !35
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !36
  %177 = tail call float @llvm.nvvm.div.full(float %146, float %175), !dbg !37
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !38
  %179 = fmul float %178, %174, !dbg !39
  %180 = fadd float %168, %179, !dbg !40
  %181 = fadd float %142, %173, !dbg !41
  %182 = fmul float %174, %174, !dbg !42
  %183 = fmul float %163, %182, !dbg !43
  %184 = fmul float %178, %183, !dbg !44
  %185 = fadd float %181, %184, !dbg !45
  %186 = bitcast float %180 to i32, !dbg !46
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !46
  %188 = bitcast i32 %187 to float, !dbg !46
  %189 = bitcast float %185 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = bitcast float %175 to i32, !dbg !46
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !46
  %194 = bitcast i32 %193 to float, !dbg !46
  %195 = fsub float %188, %180, !dbg !32
  %196 = fadd float %175, %194, !dbg !35
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !36
  %198 = tail call float @llvm.nvvm.div.full(float %194, float %196), !dbg !37
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !38
  %200 = fmul float %199, %195, !dbg !39
  %201 = fadd float %180, %200, !dbg !40
  %202 = fadd float %185, %191, !dbg !41
  %203 = fmul float %195, %195, !dbg !42
  %204 = fmul float %175, %203, !dbg !43
  %205 = fmul float %199, %204, !dbg !44
  %206 = fadd float %202, %205, !dbg !45
  %207 = bitcast float %201 to i32, !dbg !46
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !46
  %209 = bitcast i32 %208 to float, !dbg !46
  %210 = bitcast float %206 to i32, !dbg !46
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !46
  %212 = bitcast i32 %211 to float, !dbg !46
  %213 = bitcast float %196 to i32, !dbg !46
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !46
  %215 = bitcast i32 %214 to float, !dbg !46
  %216 = fsub float %209, %201, !dbg !32
  %217 = fadd float %196, %215, !dbg !35
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !36
  %219 = tail call float @llvm.nvvm.div.full(float %215, float %217), !dbg !37
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !38
  %221 = fmul float %216, %220, !dbg !39
  %222 = fadd float %201, %221, !dbg !40
  %223 = fadd float %206, %212, !dbg !41
  %224 = fmul float %216, %216, !dbg !42
  %225 = fmul float %196, %224, !dbg !43
  %226 = fmul float %220, %225, !dbg !44
  %227 = fadd float %223, %226, !dbg !45
  %228 = bitcast float %222 to i32, !dbg !46
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !46
  %230 = bitcast i32 %229 to float, !dbg !46
  %231 = bitcast float %227 to i32, !dbg !46
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !46
  %233 = bitcast i32 %232 to float, !dbg !46
  %234 = bitcast float %217 to i32, !dbg !46
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !46
  %236 = bitcast i32 %235 to float, !dbg !46
  %237 = fsub float %230, %222, !dbg !32
  %238 = fadd float %217, %236, !dbg !35
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !36
  %240 = tail call float @llvm.nvvm.div.full(float %236, float %238), !dbg !37
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !38
  %242 = fmul float %237, %241, !dbg !39
  %243 = fadd float %222, %242, !dbg !40
  %244 = fadd float %227, %233, !dbg !41
  %245 = fmul float %237, %237, !dbg !42
  %246 = fmul float %217, %245, !dbg !43
  %247 = fmul float %241, %246, !dbg !44
  %248 = fadd float %244, %247, !dbg !45
  %249 = bitcast float %243 to i32, !dbg !46
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !46
  %251 = bitcast i32 %250 to float, !dbg !46
  %252 = bitcast float %248 to i32, !dbg !46
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !46
  %254 = bitcast i32 %253 to float, !dbg !46
  %255 = bitcast float %238 to i32, !dbg !46
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !46
  %257 = bitcast i32 %256 to float, !dbg !46
  %258 = fsub float %251, %243, !dbg !32
  %259 = fadd float %238, %257, !dbg !35
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !36
  %261 = tail call float @llvm.nvvm.div.full(float %257, float %259), !dbg !37
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !38
  %263 = fmul float %258, %262, !dbg !39
  %264 = fadd float %243, %263, !dbg !40
  %265 = fadd float %248, %254, !dbg !41
  %266 = fmul float %258, %258, !dbg !42
  %267 = fmul float %238, %266, !dbg !43
  %268 = fmul float %262, %267, !dbg !44
  %269 = fadd float %265, %268, !dbg !45
  %270 = bitcast float %264 to i32, !dbg !46
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !46
  %272 = bitcast i32 %271 to float, !dbg !46
  %273 = bitcast float %269 to i32, !dbg !46
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = bitcast float %259 to i32, !dbg !46
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !46
  %278 = bitcast i32 %277 to float, !dbg !46
  %279 = fsub float %272, %264, !dbg !32
  %280 = fadd float %259, %278, !dbg !35
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !36
  %282 = tail call float @llvm.nvvm.div.full(float %278, float %280), !dbg !37
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !38
  %284 = fmul float %279, %283, !dbg !39
  %285 = fadd float %264, %284, !dbg !40
  %286 = fadd float %269, %275, !dbg !41
  %287 = fmul float %279, %279, !dbg !42
  %288 = fmul float %259, %287, !dbg !43
  %289 = fmul float %283, %288, !dbg !44
  %290 = fadd float %286, %289, !dbg !45
  %291 = and i32 %147, 7, !dbg !46
  %292 = icmp eq i32 %20, 0, !dbg !46
  %293 = lshr exact i32 %19, 5, !dbg !46
  %294 = or disjoint i32 %293, %291, !dbg !46
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !46
  %296 = bitcast float %285 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 %292) #5, !dbg !46
  %297 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %294, !dbg !46
  %298 = bitcast float %290 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 %292) #5, !dbg !46
  %299 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %294, !dbg !46
  %300 = bitcast float %280 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 %292) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %301 = icmp slt i32 %18, 16, !dbg !46
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !46
  %303 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %302, i1 %301) #5, !dbg !46
  %304 = bitcast i32 %303 to float, !dbg !46
  %305 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !46
  %306 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %301) #5, !dbg !46
  %307 = bitcast i32 %306 to float, !dbg !46
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !46
  %309 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %308, i1 %301) #5, !dbg !46
  %310 = bitcast i32 %309 to float, !dbg !46
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 4, i32 31), !dbg !46
  %312 = bitcast i32 %311 to float, !dbg !46
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !46
  %314 = bitcast i32 %313 to float, !dbg !46
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !46
  %316 = bitcast i32 %315 to float, !dbg !46
  %317 = fsub float %312, %304, !dbg !32
  %318 = fadd float %310, %316, !dbg !35
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !36
  %320 = tail call float @llvm.nvvm.div.full(float %316, float %318), !dbg !37
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !38
  %322 = fmul float %317, %321, !dbg !39
  %323 = fadd float %322, %304, !dbg !40
  %324 = fadd float %307, %314, !dbg !41
  %325 = fmul float %317, %317, !dbg !42
  %326 = fmul float %325, %310, !dbg !43
  %327 = fmul float %326, %321, !dbg !44
  %328 = fadd float %324, %327, !dbg !45
  %329 = bitcast float %323 to i32, !dbg !46
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 2, i32 31), !dbg !46
  %331 = bitcast i32 %330 to float, !dbg !46
  %332 = bitcast float %328 to i32, !dbg !46
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !46
  %334 = bitcast i32 %333 to float, !dbg !46
  %335 = bitcast float %318 to i32, !dbg !46
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !46
  %337 = bitcast i32 %336 to float, !dbg !46
  %338 = fsub float %331, %323, !dbg !32
  %339 = fadd float %318, %337, !dbg !35
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !36
  %341 = tail call float @llvm.nvvm.div.full(float %337, float %339), !dbg !37
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !38
  %343 = fmul float %338, %342, !dbg !39
  %344 = fadd float %323, %343, !dbg !40
  %345 = fadd float %328, %334, !dbg !41
  %346 = fmul float %338, %338, !dbg !42
  %347 = fmul float %318, %346, !dbg !43
  %348 = fmul float %342, %347, !dbg !44
  %349 = fadd float %345, %348, !dbg !45
  %350 = bitcast float %344 to i32, !dbg !46
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 1, i32 31), !dbg !46
  %352 = bitcast i32 %351 to float, !dbg !46
  %353 = bitcast float %349 to i32, !dbg !46
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !46
  %355 = bitcast i32 %354 to float, !dbg !46
  %356 = bitcast float %339 to i32, !dbg !46
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !46
  %358 = bitcast i32 %357 to float, !dbg !46
  %359 = fsub float %352, %344, !dbg !32
  %360 = fadd float %339, %358, !dbg !35
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !36
  %362 = tail call float @llvm.nvvm.div.full(float %358, float %360), !dbg !37
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !38
  %364 = fmul float %359, %363, !dbg !39
  %365 = fadd float %344, %364, !dbg !40
  %366 = fadd float %349, %355, !dbg !41
  %367 = fmul float %359, %359, !dbg !42
  %368 = fmul float %339, %367, !dbg !43
  %369 = fmul float %363, %368, !dbg !44
  %370 = fadd float %366, %369, !dbg !45
  %371 = and i32 %18, 7, !dbg !46
  %372 = icmp eq i32 %371, 0, !dbg !46
  %373 = and i1 %301, %372, !dbg !46
  %374 = bitcast float %365 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %374, i1 %373) #5, !dbg !46
  %375 = bitcast float %370 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %375, i1 %373) #5, !dbg !46
  %376 = bitcast float %360 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %376, i1 %373) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %293, !dbg !46
  %378 = load float, ptr addrspace(3) %377, align 16, !dbg !46
  %379 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %293, !dbg !46
  %380 = load float, ptr addrspace(3) %379, align 16, !dbg !46
  %381 = tail call float @llvm.nvvm.div.full(float %380, float 3.072000e+03), !dbg !47
  %382 = fadd float %381, 0x3EB0C6F7A0000000, !dbg !48
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i29 = icmp eq i32 %386, 0, !dbg !49
  br i1 %.not.i29, label %389, label %387, !dbg !49

387:                                              ; preds = %__nv_rsqrtf.exit
  %388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %382), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

389:                                              ; preds = %__nv_rsqrtf.exit
  %390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %382), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

__nv_rsqrtf.exit31:                               ; preds = %387, %389
  %.0.i30 = phi float [ %388, %387 ], [ %390, %389 ], !dbg !49
  %391 = and i32 %24, 2044
  %392 = lshr i32 %24, 8
  %393 = and i32 %392, 4
  %394 = add nuw nsw i32 %393, %391
  %395 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %394
  %396 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148
  %397 = add nuw nsw i32 %148, 1028
  %398 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %397
  %399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %148
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %397
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %394
  %402 = zext nneg i32 %148 to i64, !dbg !50
  %403 = getelementptr inbounds nuw i8, ptr addrspace(3) %398, i32 4
  %404 = getelementptr inbounds nuw i8, ptr addrspace(3) %401, i32 4
  %405 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !51
  %406 = shufflevector <2 x i1> %405, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !51
  %407 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !52
  %408 = shufflevector <4 x i1> %407, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !52
  br label %409, !dbg !50

409:                                              ; preds = %__nv_rsqrtf.exit31, %409
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit31 ], [ %indvars.iv.next, %409 ]
  %410 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %496, %409 ]
  %411 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %497, %409 ]
  %412 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit31 ], [ %495, %409 ]
  %413 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit31 ], [ %507, %409 ]
  %414 = or disjoint i64 %indvars.iv, %402, !dbg !53
  %415 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !54
  %416 = add i32 %28, %415, !dbg !54
  %417 = sext i32 %416 to i64, !dbg !55
  %418 = getelementptr bfloat, ptr addrspace(1) %0, i64 %417, !dbg !55
  %419 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %418, i1 %22) #5, !dbg !56
  %420 = extractvalue { i32, i32 } %419, 0, !dbg !56
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !56
  %422 = extractvalue { i32, i32 } %419, 1, !dbg !56
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !56
  %424 = extractelement <2 x bfloat> %421, i64 0, !dbg !56
  %425 = extractelement <2 x bfloat> %421, i64 1, !dbg !56
  %426 = extractelement <2 x bfloat> %423, i64 0, !dbg !56
  %427 = extractelement <2 x bfloat> %423, i64 1, !dbg !56
  %428 = fpext bfloat %424 to float, !dbg !57
  %429 = fpext bfloat %425 to float, !dbg !57
  %430 = fpext bfloat %426 to float, !dbg !57
  %431 = fpext bfloat %427 to float, !dbg !57
  %432 = add nuw nsw i64 %414, 3072, !dbg !58
  %433 = getelementptr float, ptr addrspace(1) %1, i64 %432, !dbg !59
  %434 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %433, i1 true) #5, !dbg !60
  %435 = extractvalue { i32, i32 } %434, 0, !dbg !60
  %436 = extractvalue { i32, i32 } %434, 1, !dbg !60
  %437 = getelementptr bfloat, ptr addrspace(1) %2, i64 %432, !dbg !61
  %438 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %437, i1 true) #5, !dbg !62
  %439 = bitcast i32 %438 to <2 x bfloat>, !dbg !62
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %414, !dbg !63
  %441 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %440, i1 true) #5, !dbg !64
  %442 = extractvalue { i32, i32 } %441, 0, !dbg !64
  %443 = extractvalue { i32, i32 } %441, 1, !dbg !64
  %444 = getelementptr bfloat, ptr addrspace(1) %2, i64 %414, !dbg !65
  %445 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %444, i1 true) #5, !dbg !66
  %446 = bitcast i32 %445 to <2 x bfloat>, !dbg !66
  %447 = fsub float %428, %378, !dbg !67
  %448 = fsub float %429, %378, !dbg !67
  %449 = fsub float %430, %378, !dbg !67
  %450 = fsub float %431, %378, !dbg !67
  %451 = fmul float %.0.i30, %447, !dbg !68
  %452 = fmul float %.0.i30, %448, !dbg !68
  %453 = fmul float %.0.i30, %449, !dbg !68
  %454 = fmul float %.0.i30, %450, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %455 = bitcast float %451 to i32, !dbg !68
  %456 = bitcast float %452 to i32, !dbg !68
  %457 = bitcast float %453 to i32, !dbg !68
  %458 = bitcast float %454 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %395, i32 %455, i32 %456, i32 %457, i32 %458, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %459 = load float, ptr addrspace(3) %398, align 8, !dbg !68
  %460 = load float, ptr addrspace(3) %403, align 4, !dbg !68
  %461 = fcmp uno <2 x float> %412, zeroinitializer, !dbg !69
  %462 = fcmp uno float %410, 0.000000e+00, !dbg !69
  %463 = fcmp uno float %411, 0.000000e+00, !dbg !69
  %464 = insertelement <2 x i32> poison, i32 %435, i64 0, !dbg !60
  %465 = insertelement <2 x i32> %464, i32 %436, i64 1, !dbg !60
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !60
  %467 = fpext <2 x bfloat> %439 to <2 x float>, !dbg !71
  %468 = insertelement <2 x i32> poison, i32 %442, i64 0, !dbg !64
  %469 = insertelement <2 x i32> %468, i32 %443, i64 1, !dbg !64
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !64
  %471 = fpext <2 x bfloat> %446 to <2 x float>, !dbg !72
  %472 = load <2 x float>, ptr addrspace(3) %396, align 8, !dbg !68
  %473 = fadd <2 x float> %466, %467, !dbg !73
  %474 = fadd <2 x float> %473, splat (float 1.000000e+00), !dbg !74
  %475 = fmul <2 x float> %474, %472, !dbg !75
  %476 = extractelement <2 x float> %474, i64 0, !dbg !75
  %477 = fmul float %476, %459, !dbg !75
  %478 = extractelement <2 x float> %474, i64 1, !dbg !75
  %479 = fmul float %478, %460, !dbg !75
  %480 = fadd <2 x float> %470, %471, !dbg !76
  %481 = fadd <2 x float> %480, %475, !dbg !77
  %482 = extractelement <2 x float> %480, i64 0, !dbg !77
  %483 = fadd float %482, %477, !dbg !77
  %484 = extractelement <2 x float> %480, i64 1, !dbg !77
  %485 = fadd float %484, %479, !dbg !77
  %486 = fcmp olt <2 x float> %412, %481, !dbg !78
  %487 = fcmp olt float %410, %483, !dbg !78
  %488 = fcmp olt float %411, %485, !dbg !78
  %489 = or <2 x i1> %461, %486, !dbg !79
  %490 = or i1 %462, %487, !dbg !79
  %491 = or i1 %463, %488, !dbg !79
  %492 = select <2 x i1> %489, <2 x float> %412, <2 x float> %481, !dbg !80
  %493 = select i1 %490, float %410, float %483, !dbg !80
  %494 = select i1 %491, float %411, float %485, !dbg !80
  %495 = select <2 x i1> %406, <2 x float> %492, <2 x float> %412, !dbg !51
  %496 = select i1 %23, float %493, float %410, !dbg !51
  %497 = select i1 %23, float %494, float %411, !dbg !51
  %498 = extractelement <2 x float> %481, i64 0, !dbg !81
  %499 = extractelement <2 x float> %481, i64 1, !dbg !81
  %500 = fcmp uno <4 x float> %413, zeroinitializer, !dbg !82
  %501 = shufflevector <2 x float> %481, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !84
  %502 = insertelement <4 x float> %501, float %483, i64 2, !dbg !84
  %503 = insertelement <4 x float> %502, float %485, i64 3, !dbg !84
  %504 = fcmp ogt <4 x float> %413, %503, !dbg !84
  %505 = or <4 x i1> %500, %504, !dbg !85
  %506 = select <4 x i1> %505, <4 x float> %413, <4 x float> %503, !dbg !86
  %507 = select <4 x i1> %408, <4 x float> %506, <4 x float> %413, !dbg !52
  %508 = getelementptr bfloat, ptr addrspace(1) %3, i64 %417, !dbg !87
  %509 = fptrunc float %498 to bfloat, !dbg !81
  %510 = fptrunc float %499 to bfloat, !dbg !81
  %511 = fptrunc float %483 to bfloat, !dbg !81
  %512 = fptrunc float %485 to bfloat, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %513 = bitcast bfloat %509 to i16, !dbg !81
  %514 = bitcast bfloat %510 to i16, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %399, i16 %513, i16 %514, i1 true) #5, !dbg !81
  %515 = bitcast bfloat %511 to i16, !dbg !81
  %516 = bitcast bfloat %512 to i16, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %400, i16 %515, i16 %516, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %.uncasted.extract = load i32, ptr addrspace(3) %401, align 8, !dbg !81
  %.uncasted.extract15 = load i32, ptr addrspace(3) %404, align 4, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract15, ptr addrspace(1) %508, i1 %22) #5, !dbg !81
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !50
  %517 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !50
  br i1 %517, label %409, label %518, !dbg !50

518:                                              ; preds = %409
  %519 = and i32 %18, 1, !dbg !11
  %520 = or disjoint i32 %17, %519, !dbg !12
  %521 = icmp slt i32 %520, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %522 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %495, <2 x i32> <i32 0, i32 2>, !dbg !90
  %523 = fcmp olt <2 x float> %522, %495, !dbg !90
  %524 = fcmp uno <2 x float> %522, %495, !dbg !90
  %shift = shufflevector <2 x i1> %523, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !91
  %525 = or <2 x i1> %shift, %524, !dbg !91
  %526 = extractelement <2 x i1> %525, i64 0, !dbg !91
  %527 = extractelement <2 x float> %495, i64 0, !dbg !92
  %528 = extractelement <2 x float> %495, i64 1, !dbg !92
  %529 = select i1 %526, float %527, float %528, !dbg !92
  %530 = fcmp olt float %496, %497, !dbg !90
  %531 = fcmp uno float %496, 0.000000e+00, !dbg !93
  %532 = or i1 %530, %531, !dbg !91
  %533 = select i1 %532, float %496, float %497, !dbg !92
  %534 = bitcast float %529 to i32, !dbg !88
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !88
  %536 = bitcast i32 %535 to float, !dbg !88
  %537 = fcmp olt float %529, %536, !dbg !90
  %538 = fcmp uno float %529, 0.000000e+00, !dbg !93
  %539 = or i1 %538, %537, !dbg !91
  %540 = select i1 %539, float %529, float %536, !dbg !92
  %541 = bitcast float %540 to i32, !dbg !88
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 8, i32 31), !dbg !88
  %543 = bitcast i32 %542 to float, !dbg !88
  %544 = fcmp olt float %540, %543, !dbg !90
  %545 = fcmp uno float %540, 0.000000e+00, !dbg !93
  %546 = or i1 %544, %545, !dbg !91
  %547 = select i1 %546, float %540, float %543, !dbg !92
  %548 = bitcast float %547 to i32, !dbg !88
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 4, i32 31), !dbg !88
  %550 = bitcast i32 %549 to float, !dbg !88
  %551 = fcmp olt float %547, %550, !dbg !90
  %552 = fcmp uno float %547, 0.000000e+00, !dbg !93
  %553 = or i1 %551, %552, !dbg !91
  %554 = select i1 %553, float %547, float %550, !dbg !92
  %555 = bitcast float %554 to i32, !dbg !88
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 2, i32 31), !dbg !88
  %557 = bitcast i32 %556 to float, !dbg !88
  %558 = fcmp olt float %554, %557, !dbg !90
  %559 = fcmp uno float %554, 0.000000e+00, !dbg !93
  %560 = or i1 %558, %559, !dbg !91
  %561 = select i1 %560, float %554, float %557, !dbg !92
  %562 = bitcast float %561 to i32, !dbg !88
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 1, i32 31), !dbg !88
  %564 = bitcast i32 %563 to float, !dbg !88
  %565 = fcmp olt float %561, %564, !dbg !90
  %566 = fcmp uno float %561, 0.000000e+00, !dbg !93
  %567 = or i1 %565, %566, !dbg !91
  %568 = bitcast float %533 to i32, !dbg !88
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 16, i32 31), !dbg !88
  %570 = bitcast i32 %569 to float, !dbg !88
  %571 = fcmp olt float %533, %570, !dbg !90
  %572 = fcmp uno float %533, 0.000000e+00, !dbg !93
  %573 = or i1 %572, %571, !dbg !91
  %574 = select i1 %573, float %533, float %570, !dbg !92
  %575 = bitcast float %574 to i32, !dbg !88
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 8, i32 31), !dbg !88
  %577 = bitcast i32 %576 to float, !dbg !88
  %578 = fcmp olt float %574, %577, !dbg !90
  %579 = fcmp uno float %574, 0.000000e+00, !dbg !93
  %580 = or i1 %578, %579, !dbg !91
  %581 = select i1 %580, float %574, float %577, !dbg !92
  %582 = bitcast float %581 to i32, !dbg !88
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 4, i32 31), !dbg !88
  %584 = bitcast i32 %583 to float, !dbg !88
  %585 = fcmp olt float %581, %584, !dbg !90
  %586 = fcmp uno float %581, 0.000000e+00, !dbg !93
  %587 = or i1 %585, %586, !dbg !91
  %588 = select i1 %587, float %581, float %584, !dbg !92
  %589 = bitcast float %588 to i32, !dbg !88
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 2, i32 31), !dbg !88
  %591 = bitcast i32 %590 to float, !dbg !88
  %592 = fcmp olt float %588, %591, !dbg !90
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !93
  %594 = or i1 %592, %593, !dbg !91
  %595 = select i1 %594, float %588, float %591, !dbg !92
  %596 = bitcast float %595 to i32, !dbg !88
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 1, i32 31), !dbg !88
  %598 = bitcast i32 %597 to float, !dbg !88
  %599 = fcmp olt float %595, %598, !dbg !90
  %600 = fcmp uno float %595, 0.000000e+00, !dbg !93
  %601 = or i1 %599, %600, !dbg !91
  %602 = and i32 %147, 15, !dbg !88
  %603 = getelementptr float, ptr addrspace(3) @global_smem, i32 %602, !dbg !88
  %604 = select i1 %567, i32 %562, i32 %563, !dbg !92
  %605 = insertelement <1 x i32> poison, i32 %604, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %603, <1 x i32> %605, i1 %292) #5, !dbg !88
  %606 = or disjoint i32 %602, 16, !dbg !88
  %607 = getelementptr float, ptr addrspace(3) @global_smem, i32 %606, !dbg !88
  %608 = select i1 %601, i32 %596, i32 %597, !dbg !92
  %609 = insertelement <1 x i32> poison, i32 %608, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %609, i1 %292) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %610 = icmp slt i32 %18, 32, !dbg !88
  %611 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %302, i1 %610) #5, !dbg !88
  %612 = bitcast i32 %611 to float, !dbg !88
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 8, i32 31), !dbg !88
  %614 = bitcast i32 %613 to float, !dbg !88
  %615 = fcmp olt float %612, %614, !dbg !90
  %616 = fcmp uno float %612, 0.000000e+00, !dbg !93
  %617 = or i1 %616, %615, !dbg !91
  %618 = select i1 %617, float %612, float %614, !dbg !92
  %619 = bitcast float %618 to i32, !dbg !88
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 4, i32 31), !dbg !88
  %621 = bitcast i32 %620 to float, !dbg !88
  %622 = fcmp olt float %618, %621, !dbg !90
  %623 = fcmp uno float %618, 0.000000e+00, !dbg !93
  %624 = or i1 %622, %623, !dbg !91
  %625 = select i1 %624, float %618, float %621, !dbg !92
  %626 = bitcast float %625 to i32, !dbg !88
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 2, i32 31), !dbg !88
  %628 = bitcast i32 %627 to float, !dbg !88
  %629 = fcmp olt float %625, %628, !dbg !90
  %630 = fcmp uno float %625, 0.000000e+00, !dbg !93
  %631 = or i1 %629, %630, !dbg !91
  %632 = select i1 %631, float %625, float %628, !dbg !92
  %633 = bitcast float %632 to i32, !dbg !88
  %634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 1, i32 31), !dbg !88
  %635 = bitcast i32 %634 to float, !dbg !88
  %636 = fcmp olt float %632, %635, !dbg !90
  %637 = fcmp uno float %632, 0.000000e+00, !dbg !93
  %638 = or i1 %636, %637, !dbg !91
  %639 = and i32 %18, 15, !dbg !88
  %640 = icmp eq i32 %639, 0, !dbg !88
  %641 = and i1 %610, %640, !dbg !88
  %642 = select i1 %638, i32 %633, i32 %634, !dbg !92
  %643 = insertelement <1 x i32> poison, i32 %642, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %643, i1 %641) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %644 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %645 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %646 = bitcast float %644 to i32, !dbg !94
  %647 = bitcast float %645 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %646, i32 %647, i1 true) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %648 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %519, !dbg !94
  %649 = load float, ptr addrspace(3) %648, align 4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %650 = extractelement <4 x float> %507, i64 0, !dbg !97
  %651 = extractelement <4 x float> %507, i64 1, !dbg !97
  %652 = fcmp ogt float %650, %651, !dbg !97
  %653 = fcmp uno float %650, 0.000000e+00, !dbg !98
  %654 = or i1 %652, %653, !dbg !99
  %655 = select i1 %654, float %650, float %651, !dbg !100
  %656 = extractelement <4 x float> %507, i64 2, !dbg !97
  %657 = extractelement <4 x float> %507, i64 3, !dbg !97
  %658 = fcmp ogt float %656, %657, !dbg !97
  %659 = fcmp uno float %656, 0.000000e+00, !dbg !98
  %660 = or i1 %658, %659, !dbg !99
  %661 = select i1 %660, float %656, float %657, !dbg !100
  %662 = bitcast float %655 to i32, !dbg !95
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 16, i32 31), !dbg !95
  %664 = bitcast i32 %663 to float, !dbg !95
  %665 = fcmp ogt float %655, %664, !dbg !97
  %666 = fcmp uno float %655, 0.000000e+00, !dbg !98
  %667 = or i1 %666, %665, !dbg !99
  %668 = select i1 %667, float %655, float %664, !dbg !100
  %669 = bitcast float %668 to i32, !dbg !95
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 8, i32 31), !dbg !95
  %671 = bitcast i32 %670 to float, !dbg !95
  %672 = fcmp ogt float %668, %671, !dbg !97
  %673 = fcmp uno float %668, 0.000000e+00, !dbg !98
  %674 = or i1 %672, %673, !dbg !99
  %675 = select i1 %674, float %668, float %671, !dbg !100
  %676 = bitcast float %675 to i32, !dbg !95
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 4, i32 31), !dbg !95
  %678 = bitcast i32 %677 to float, !dbg !95
  %679 = fcmp ogt float %675, %678, !dbg !97
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !98
  %681 = or i1 %679, %680, !dbg !99
  %682 = select i1 %681, float %675, float %678, !dbg !100
  %683 = bitcast float %682 to i32, !dbg !95
  %684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %683, i32 2, i32 31), !dbg !95
  %685 = bitcast i32 %684 to float, !dbg !95
  %686 = fcmp ogt float %682, %685, !dbg !97
  %687 = fcmp uno float %682, 0.000000e+00, !dbg !98
  %688 = or i1 %686, %687, !dbg !99
  %689 = select i1 %688, float %682, float %685, !dbg !100
  %690 = bitcast float %689 to i32, !dbg !95
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 1, i32 31), !dbg !95
  %692 = bitcast i32 %691 to float, !dbg !95
  %693 = fcmp ogt float %689, %692, !dbg !97
  %694 = fcmp uno float %689, 0.000000e+00, !dbg !98
  %695 = or i1 %693, %694, !dbg !99
  %696 = bitcast float %661 to i32, !dbg !95
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 16, i32 31), !dbg !95
  %698 = bitcast i32 %697 to float, !dbg !95
  %699 = fcmp ogt float %661, %698, !dbg !97
  %700 = fcmp uno float %661, 0.000000e+00, !dbg !98
  %701 = or i1 %700, %699, !dbg !99
  %702 = select i1 %701, float %661, float %698, !dbg !100
  %703 = bitcast float %702 to i32, !dbg !95
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 8, i32 31), !dbg !95
  %705 = bitcast i32 %704 to float, !dbg !95
  %706 = fcmp ogt float %702, %705, !dbg !97
  %707 = fcmp uno float %702, 0.000000e+00, !dbg !98
  %708 = or i1 %706, %707, !dbg !99
  %709 = select i1 %708, float %702, float %705, !dbg !100
  %710 = bitcast float %709 to i32, !dbg !95
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 4, i32 31), !dbg !95
  %712 = bitcast i32 %711 to float, !dbg !95
  %713 = fcmp ogt float %709, %712, !dbg !97
  %714 = fcmp uno float %709, 0.000000e+00, !dbg !98
  %715 = or i1 %713, %714, !dbg !99
  %716 = select i1 %715, float %709, float %712, !dbg !100
  %717 = bitcast float %716 to i32, !dbg !95
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %717, i32 2, i32 31), !dbg !95
  %719 = bitcast i32 %718 to float, !dbg !95
  %720 = fcmp ogt float %716, %719, !dbg !97
  %721 = fcmp uno float %716, 0.000000e+00, !dbg !98
  %722 = or i1 %720, %721, !dbg !99
  %723 = select i1 %722, float %716, float %719, !dbg !100
  %724 = bitcast float %723 to i32, !dbg !95
  %725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %724, i32 1, i32 31), !dbg !95
  %726 = bitcast i32 %725 to float, !dbg !95
  %727 = fcmp ogt float %723, %726, !dbg !97
  %728 = fcmp uno float %723, 0.000000e+00, !dbg !98
  %729 = or i1 %727, %728, !dbg !99
  %730 = select i1 %695, i32 %690, i32 %691, !dbg !100
  %731 = insertelement <1 x i32> poison, i32 %730, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %603, <1 x i32> %731, i1 %292) #5, !dbg !95
  %732 = select i1 %729, i32 %724, i32 %725, !dbg !100
  %733 = insertelement <1 x i32> poison, i32 %732, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %733, i1 %292) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %734 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %302, i1 %610) #5, !dbg !95
  %735 = bitcast i32 %734 to float, !dbg !95
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 8, i32 31), !dbg !95
  %737 = bitcast i32 %736 to float, !dbg !95
  %738 = fcmp ogt float %735, %737, !dbg !97
  %739 = fcmp uno float %735, 0.000000e+00, !dbg !98
  %740 = or i1 %739, %738, !dbg !99
  %741 = select i1 %740, float %735, float %737, !dbg !100
  %742 = bitcast float %741 to i32, !dbg !95
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 4, i32 31), !dbg !95
  %744 = bitcast i32 %743 to float, !dbg !95
  %745 = fcmp ogt float %741, %744, !dbg !97
  %746 = fcmp uno float %741, 0.000000e+00, !dbg !98
  %747 = or i1 %745, %746, !dbg !99
  %748 = select i1 %747, float %741, float %744, !dbg !100
  %749 = bitcast float %748 to i32, !dbg !95
  %750 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %749, i32 2, i32 31), !dbg !95
  %751 = bitcast i32 %750 to float, !dbg !95
  %752 = fcmp ogt float %748, %751, !dbg !97
  %753 = fcmp uno float %748, 0.000000e+00, !dbg !98
  %754 = or i1 %752, %753, !dbg !99
  %755 = select i1 %754, float %748, float %751, !dbg !100
  %756 = bitcast float %755 to i32, !dbg !95
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 1, i32 31), !dbg !95
  %758 = bitcast i32 %757 to float, !dbg !95
  %759 = fcmp ogt float %755, %758, !dbg !97
  %760 = fcmp uno float %755, 0.000000e+00, !dbg !98
  %761 = or i1 %759, %760, !dbg !99
  %762 = select i1 %761, i32 %756, i32 %757, !dbg !100
  %763 = insertelement <1 x i32> poison, i32 %762, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %763, i1 %641) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %764 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %765 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %766 = bitcast float %764 to i32, !dbg !101
  %767 = bitcast float %765 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %766, i32 %767, i1 true) #5, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %768 = load float, ptr addrspace(3) %648, align 4, !dbg !101
  %769 = sext i32 %520 to i64, !dbg !102
  %770 = getelementptr bfloat, ptr addrspace(1) %4, i64 %769, !dbg !102
  %771 = fptrunc float %649 to bfloat, !dbg !94
  %772 = and i32 %18, 510, !dbg !94
  %773 = icmp eq i32 %772, 0, !dbg !94
  %774 = bitcast bfloat %771 to i16, !dbg !94
  %775 = and i1 %773, %521, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %774, ptr addrspace(1) %770, i1 %775) #5, !dbg !94
  %776 = getelementptr bfloat, ptr addrspace(1) %5, i64 %769, !dbg !103
  %777 = fptrunc float %768 to bfloat, !dbg !101
  %778 = bitcast bfloat %777 to i16, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %778, ptr addrspace(1) %776, i1 %775) #5, !dbg !101
  %779 = getelementptr bfloat, ptr addrspace(1) %6, i64 %769, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %774, ptr addrspace(1) %779, i1 %775) #5, !dbg !105
  %780 = getelementptr bfloat, ptr addrspace(1) %7, i64 %769, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %778, ptr addrspace(1) %780, i1 %775) #5, !dbg !107
  %781 = getelementptr bfloat, ptr addrspace(1) %8, i64 %769, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %774, ptr addrspace(1) %781, i1 %775) #5, !dbg !109
  %782 = getelementptr bfloat, ptr addrspace(1) %9, i64 %769, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %778, ptr addrspace(1) %782, i1 %775) #5, !dbg !111
  %.inv = fcmp oge float %644, 0.000000e+00, !dbg !112
  %783 = select i1 %.inv, float 0.000000e+00, float %644, !dbg !112
  %.inv4 = fcmp oge float %645, 0.000000e+00, !dbg !112
  %784 = select i1 %.inv4, float 0.000000e+00, float %645, !dbg !112
  %785 = fsub float 0.000000e+00, %783, !dbg !114
  %786 = fsub float 0.000000e+00, %784, !dbg !114
  %.inv5 = fcmp ole float %764, 0.000000e+00, !dbg !115
  %787 = select i1 %.inv5, float 0.000000e+00, float %764, !dbg !115
  %.inv6 = fcmp ole float %765, 0.000000e+00, !dbg !115
  %788 = select i1 %.inv6, float 0.000000e+00, float %765, !dbg !115
  %789 = fcmp ogt float %785, %787, !dbg !117
  %790 = fcmp ogt float %786, %788, !dbg !117
  %791 = fcmp uno float %785, 0.000000e+00, !dbg !119
  %792 = fcmp uno float %786, 0.000000e+00, !dbg !119
  %793 = or i1 %791, %789, !dbg !120
  %794 = or i1 %792, %790, !dbg !120
  %795 = select i1 %793, float %785, float %787, !dbg !121
  %796 = select i1 %794, float %786, float %788, !dbg !121
  %797 = fmul float %795, 0x3F80204080000000, !dbg !122
  %798 = fmul float %796, 0x3F80204080000000, !dbg !122
  %799 = fcmp ogt float %797, 0x3EE4F8B580000000, !dbg !123
  %800 = fcmp ogt float %798, 0x3EE4F8B580000000, !dbg !123
  %801 = fcmp uno float %797, 0.000000e+00, !dbg !125
  %802 = fcmp uno float %798, 0.000000e+00, !dbg !125
  %803 = or i1 %799, %801, !dbg !126
  %804 = or i1 %800, %802, !dbg !126
  %805 = select i1 %803, float %797, float 0x3EE4F8B580000000, !dbg !127
  %806 = select i1 %804, float %798, float 0x3EE4F8B580000000, !dbg !127
  %807 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %805), !dbg !128
  %808 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %806), !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %809 = bitcast float %807 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %809, i1 true) #5, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %809, i1 true) #5, !dbg !129
  %810 = bitcast float %808 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %810, i1 true) #5, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %810, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %811 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %293, !dbg !129
  %812 = load float, ptr addrspace(3) %811, align 8, !dbg !129
  %813 = getelementptr bfloat, ptr addrspace(1) %3, i64 %29, !dbg !130
  %814 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %813, i1 %22) #5, !dbg !131
  %815 = extractvalue { i32, i32 } %814, 0, !dbg !131
  %816 = bitcast i32 %815 to <2 x bfloat>, !dbg !131
  %817 = extractvalue { i32, i32 } %814, 1, !dbg !131
  %818 = bitcast i32 %817 to <2 x bfloat>, !dbg !131
  %819 = extractelement <2 x bfloat> %816, i64 0, !dbg !131
  %820 = extractelement <2 x bfloat> %816, i64 1, !dbg !131
  %821 = extractelement <2 x bfloat> %818, i64 0, !dbg !131
  %822 = extractelement <2 x bfloat> %818, i64 1, !dbg !131
  %823 = fpext bfloat %819 to float, !dbg !132
  %824 = fpext bfloat %820 to float, !dbg !132
  %825 = fpext bfloat %821 to float, !dbg !132
  %826 = fpext bfloat %822 to float, !dbg !132
  %827 = fmul float %812, %823, !dbg !129
  %828 = fmul float %812, %824, !dbg !129
  %829 = fmul float %812, %825, !dbg !129
  %830 = fmul float %812, %826, !dbg !129
  %831 = tail call float @llvm.nvvm.round.f(float %827) #5, !dbg !133
  %832 = tail call float @llvm.nvvm.round.f(float %828) #5, !dbg !133
  %833 = tail call float @llvm.nvvm.round.f(float %829) #5, !dbg !133
  %834 = tail call float @llvm.nvvm.round.f(float %830) #5, !dbg !133
  %835 = insertelement <4 x float> poison, float %831, i64 0, !dbg !134
  %836 = insertelement <4 x float> %835, float %832, i64 1, !dbg !134
  %837 = insertelement <4 x float> %836, float %833, i64 2, !dbg !134
  %838 = insertelement <4 x float> %837, float %834, i64 3, !dbg !134
  %839 = fcmp ogt <4 x float> %838, splat (float -1.270000e+02), !dbg !134
  %840 = fcmp uno <4 x float> %838, zeroinitializer, !dbg !136
  %841 = or <4 x i1> %839, %840, !dbg !137
  %842 = select <4 x i1> %841, <4 x float> %838, <4 x float> splat (float -1.270000e+02), !dbg !138
  %843 = fcmp olt <4 x float> %842, splat (float 1.270000e+02), !dbg !139
  %844 = fcmp uno <4 x float> %842, zeroinitializer, !dbg !141
  %845 = or <4 x i1> %843, %844, !dbg !142
  %846 = fptosi <4 x float> %842 to <4 x i8>, !dbg !143
  %847 = select <4 x i1> %845, <4 x i8> %846, <4 x i8> splat (i8 127), !dbg !144
  %848 = getelementptr i8, ptr addrspace(1) %10, i64 %29, !dbg !145
  %849 = bitcast <4 x i8> %847 to i32, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %849, ptr addrspace(1) %848, i1 %22) #5, !dbg !146
  %850 = getelementptr i8, ptr addrspace(1) %11, i64 %29, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %849, ptr addrspace(1) %850, i1 %22) #5, !dbg !148
  %851 = getelementptr i8, ptr addrspace(1) %12, i64 %29, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %849, ptr addrspace(1) %851, i1 %22) #5, !dbg !150
  %852 = getelementptr bfloat, ptr addrspace(1) %3, i64 %49, !dbg !130
  %853 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %852, i1 %22) #5, !dbg !131
  %854 = extractvalue { i32, i32 } %853, 0, !dbg !131
  %855 = bitcast i32 %854 to <2 x bfloat>, !dbg !131
  %856 = extractvalue { i32, i32 } %853, 1, !dbg !131
  %857 = bitcast i32 %856 to <2 x bfloat>, !dbg !131
  %858 = extractelement <2 x bfloat> %855, i64 0, !dbg !131
  %859 = extractelement <2 x bfloat> %855, i64 1, !dbg !131
  %860 = extractelement <2 x bfloat> %857, i64 0, !dbg !131
  %861 = extractelement <2 x bfloat> %857, i64 1, !dbg !131
  %862 = fpext bfloat %858 to float, !dbg !132
  %863 = fpext bfloat %859 to float, !dbg !132
  %864 = fpext bfloat %860 to float, !dbg !132
  %865 = fpext bfloat %861 to float, !dbg !132
  %866 = fmul float %812, %862, !dbg !129
  %867 = fmul float %812, %863, !dbg !129
  %868 = fmul float %812, %864, !dbg !129
  %869 = fmul float %812, %865, !dbg !129
  %870 = tail call float @llvm.nvvm.round.f(float %866) #5, !dbg !133
  %871 = tail call float @llvm.nvvm.round.f(float %867) #5, !dbg !133
  %872 = tail call float @llvm.nvvm.round.f(float %868) #5, !dbg !133
  %873 = tail call float @llvm.nvvm.round.f(float %869) #5, !dbg !133
  %874 = insertelement <4 x float> poison, float %870, i64 0, !dbg !134
  %875 = insertelement <4 x float> %874, float %871, i64 1, !dbg !134
  %876 = insertelement <4 x float> %875, float %872, i64 2, !dbg !134
  %877 = insertelement <4 x float> %876, float %873, i64 3, !dbg !134
  %878 = fcmp ogt <4 x float> %877, splat (float -1.270000e+02), !dbg !134
  %879 = fcmp uno <4 x float> %877, zeroinitializer, !dbg !136
  %880 = or <4 x i1> %878, %879, !dbg !137
  %881 = select <4 x i1> %880, <4 x float> %877, <4 x float> splat (float -1.270000e+02), !dbg !138
  %882 = fcmp olt <4 x float> %881, splat (float 1.270000e+02), !dbg !139
  %883 = fcmp uno <4 x float> %881, zeroinitializer, !dbg !141
  %884 = or <4 x i1> %882, %883, !dbg !142
  %885 = fptosi <4 x float> %881 to <4 x i8>, !dbg !143
  %886 = select <4 x i1> %884, <4 x i8> %885, <4 x i8> splat (i8 127), !dbg !144
  %887 = getelementptr i8, ptr addrspace(1) %10, i64 %49, !dbg !145
  %888 = bitcast <4 x i8> %886 to i32, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %888, ptr addrspace(1) %887, i1 %22) #5, !dbg !146
  %889 = getelementptr i8, ptr addrspace(1) %11, i64 %49, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %888, ptr addrspace(1) %889, i1 %22) #5, !dbg !148
  %890 = getelementptr i8, ptr addrspace(1) %12, i64 %49, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %888, ptr addrspace(1) %890, i1 %22) #5, !dbg !150
  %891 = getelementptr bfloat, ptr addrspace(1) %3, i64 %94, !dbg !130
  %892 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %891, i1 %22) #5, !dbg !131
  %893 = extractvalue { i32, i32 } %892, 0, !dbg !131
  %894 = bitcast i32 %893 to <2 x bfloat>, !dbg !131
  %895 = extractvalue { i32, i32 } %892, 1, !dbg !131
  %896 = bitcast i32 %895 to <2 x bfloat>, !dbg !131
  %897 = extractelement <2 x bfloat> %894, i64 0, !dbg !131
  %898 = extractelement <2 x bfloat> %894, i64 1, !dbg !131
  %899 = extractelement <2 x bfloat> %896, i64 0, !dbg !131
  %900 = extractelement <2 x bfloat> %896, i64 1, !dbg !131
  %901 = fpext bfloat %897 to float, !dbg !132
  %902 = fpext bfloat %898 to float, !dbg !132
  %903 = fpext bfloat %899 to float, !dbg !132
  %904 = fpext bfloat %900 to float, !dbg !132
  %905 = fmul float %812, %901, !dbg !129
  %906 = fmul float %812, %902, !dbg !129
  %907 = fmul float %812, %903, !dbg !129
  %908 = fmul float %812, %904, !dbg !129
  %909 = tail call float @llvm.nvvm.round.f(float %905) #5, !dbg !133
  %910 = tail call float @llvm.nvvm.round.f(float %906) #5, !dbg !133
  %911 = tail call float @llvm.nvvm.round.f(float %907) #5, !dbg !133
  %912 = tail call float @llvm.nvvm.round.f(float %908) #5, !dbg !133
  %913 = insertelement <4 x float> poison, float %909, i64 0, !dbg !134
  %914 = insertelement <4 x float> %913, float %910, i64 1, !dbg !134
  %915 = insertelement <4 x float> %914, float %911, i64 2, !dbg !134
  %916 = insertelement <4 x float> %915, float %912, i64 3, !dbg !134
  %917 = fcmp ogt <4 x float> %916, splat (float -1.270000e+02), !dbg !134
  %918 = fcmp uno <4 x float> %916, zeroinitializer, !dbg !136
  %919 = or <4 x i1> %917, %918, !dbg !137
  %920 = select <4 x i1> %919, <4 x float> %916, <4 x float> splat (float -1.270000e+02), !dbg !138
  %921 = fcmp olt <4 x float> %920, splat (float 1.270000e+02), !dbg !139
  %922 = fcmp uno <4 x float> %920, zeroinitializer, !dbg !141
  %923 = or <4 x i1> %921, %922, !dbg !142
  %924 = fptosi <4 x float> %920 to <4 x i8>, !dbg !143
  %925 = select <4 x i1> %923, <4 x i8> %924, <4 x i8> splat (i8 127), !dbg !144
  %926 = getelementptr i8, ptr addrspace(1) %10, i64 %94, !dbg !145
  %927 = bitcast <4 x i8> %925 to i32, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %927, ptr addrspace(1) %926, i1 %22) #5, !dbg !146
  %928 = getelementptr i8, ptr addrspace(1) %11, i64 %94, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %927, ptr addrspace(1) %928, i1 %22) #5, !dbg !148
  %929 = getelementptr i8, ptr addrspace(1) %12, i64 %94, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %927, ptr addrspace(1) %929, i1 %22) #5, !dbg !150
  ret void, !dbg !151
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 38, column: 41, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 42, column: 51, scope: !6)
!25 = !DILocation(line: 46, column: 66, scope: !6)
!26 = !DILocation(line: 210, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 210, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 211, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 211, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 211, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 45, column: 58, scope: !6)
!32 = !DILocation(line: 217, column: 21, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!34 = !DILocation(line: 47, column: 79, scope: !6)
!35 = !DILocation(line: 218, column: 28, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 219, column: 39, scope: !33, inlinedAt: !34)
!37 = !DILocation(line: 219, column: 60, scope: !33, inlinedAt: !34)
!38 = !DILocation(line: 219, column: 49, scope: !33, inlinedAt: !34)
!39 = !DILocation(line: 221, column: 25, scope: !33, inlinedAt: !34)
!40 = !DILocation(line: 221, column: 17, scope: !33, inlinedAt: !34)
!41 = !DILocation(line: 222, column: 15, scope: !33, inlinedAt: !34)
!42 = !DILocation(line: 222, column: 30, scope: !33, inlinedAt: !34)
!43 = !DILocation(line: 222, column: 38, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 222, column: 49, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 222, column: 22, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !34)
!47 = !DILocation(line: 67, column: 24, scope: !6)
!48 = !DILocation(line: 69, column: 24, scope: !6)
!49 = !DILocation(line: 70, column: 32, scope: !6)
!50 = !DILocation(line: 53, column: 40, scope: !6)
!51 = !DILocation(line: 83, column: 50, scope: !6)
!52 = !DILocation(line: 85, column: 50, scope: !6)
!53 = !DILocation(line: 54, column: 31, scope: !6)
!54 = !DILocation(line: 59, column: 41, scope: !6)
!55 = !DILocation(line: 59, column: 34, scope: !6)
!56 = !DILocation(line: 59, column: 51, scope: !6)
!57 = !DILocation(line: 59, column: 113, scope: !6)
!58 = !DILocation(line: 60, column: 42, scope: !6)
!59 = !DILocation(line: 60, column: 35, scope: !6)
!60 = !DILocation(line: 60, column: 49, scope: !6)
!61 = !DILocation(line: 61, column: 35, scope: !6)
!62 = !DILocation(line: 61, column: 49, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 42, scope: !6)
!65 = !DILocation(line: 63, column: 35, scope: !6)
!66 = !DILocation(line: 63, column: 42, scope: !6)
!67 = !DILocation(line: 65, column: 24, scope: !6)
!68 = !DILocation(line: 71, column: 24, scope: !6)
!69 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !70)
!70 = !DILocation(line: 82, column: 47, scope: !6)
!71 = !DILocation(line: 61, column: 102, scope: !6)
!72 = !DILocation(line: 63, column: 95, scope: !6)
!73 = !DILocation(line: 74, column: 24, scope: !6)
!74 = !DILocation(line: 76, column: 24, scope: !6)
!75 = !DILocation(line: 77, column: 24, scope: !6)
!76 = !DILocation(line: 79, column: 24, scope: !6)
!77 = !DILocation(line: 80, column: 24, scope: !6)
!78 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !70)
!79 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !70)
!80 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !70)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !83)
!83 = !DILocation(line: 84, column: 47, scope: !6)
!84 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !83)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 110, column: 29, scope: !22, inlinedAt: !89)
!89 = !DILocation(line: 87, column: 40, scope: !6)
!90 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !89)
!91 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !89)
!92 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !89)
!93 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 37, scope: !6)
!95 = !DILocation(line: 115, column: 29, scope: !22, inlinedAt: !96)
!96 = !DILocation(line: 88, column: 40, scope: !6)
!97 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !96)
!98 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !96)
!99 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !96)
!100 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !96)
!101 = !DILocation(line: 90, column: 37, scope: !6)
!102 = !DILocation(line: 89, column: 25, scope: !6)
!103 = !DILocation(line: 90, column: 25, scope: !6)
!104 = !DILocation(line: 91, column: 25, scope: !6)
!105 = !DILocation(line: 91, column: 37, scope: !6)
!106 = !DILocation(line: 92, column: 25, scope: !6)
!107 = !DILocation(line: 92, column: 37, scope: !6)
!108 = !DILocation(line: 93, column: 25, scope: !6)
!109 = !DILocation(line: 93, column: 37, scope: !6)
!110 = !DILocation(line: 94, column: 25, scope: !6)
!111 = !DILocation(line: 94, column: 37, scope: !6)
!112 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !113)
!113 = !DILocation(line: 103, column: 46, scope: !6)
!114 = !DILocation(line: 104, column: 17, scope: !6)
!115 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !116)
!116 = !DILocation(line: 105, column: 46, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !118)
!118 = !DILocation(line: 106, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !118)
!122 = !DILocation(line: 108, column: 24, scope: !6)
!123 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !124)
!124 = !DILocation(line: 111, column: 46, scope: !6)
!125 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !124)
!126 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !124)
!127 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !124)
!128 = !DILocation(line: 114, column: 25, scope: !6)
!129 = !DILocation(line: 117, column: 24, scope: !6)
!130 = !DILocation(line: 101, column: 36, scope: !6)
!131 = !DILocation(line: 101, column: 53, scope: !6)
!132 = !DILocation(line: 101, column: 115, scope: !6)
!133 = !DILocation(line: 118, column: 36, scope: !6)
!134 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !135)
!135 = !DILocation(line: 121, column: 46, scope: !6)
!136 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !135)
!137 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !135)
!138 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !135)
!139 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !140)
!140 = !DILocation(line: 123, column: 46, scope: !6)
!141 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !140)
!142 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !140)
!143 = !DILocation(line: 125, column: 25, scope: !6)
!144 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !140)
!145 = !DILocation(line: 126, column: 29, scope: !6)
!146 = !DILocation(line: 126, column: 53, scope: !6)
!147 = !DILocation(line: 127, column: 30, scope: !6)
!148 = !DILocation(line: 127, column: 54, scope: !6)
!149 = !DILocation(line: 128, column: 30, scope: !6)
!150 = !DILocation(line: 128, column: 54, scope: !6)
!151 = !DILocation(line: 95, column: 4, scope: !6)
