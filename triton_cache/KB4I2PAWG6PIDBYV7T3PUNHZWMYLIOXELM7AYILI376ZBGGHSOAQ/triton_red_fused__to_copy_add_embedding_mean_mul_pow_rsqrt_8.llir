; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = icmp slt i32 %11, 512, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = shl i32 %13, 2, !dbg !13
  %15 = and i32 %14, 2044, !dbg !13
  %16 = sext i32 %11 to i64, !dbg !14
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %12) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %12) #6, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %12) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %12) #6, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %12) #6, !dbg !15
  %23 = shl i32 %11, 12, !dbg !16
  %24 = add i64 %22, 32128, !dbg !17
  %25 = icmp slt i64 %22, 0, !dbg !18
  %26 = select i1 %25, i64 %24, i64 %22, !dbg !19
  %27 = icmp ugt i64 %26, 32127, !dbg !20
  %.not3 = and i1 %12, %27, !dbg !21
  %invariant.op = or disjoint i32 %15, %23, !dbg !22
  %28 = zext nneg i32 %15 to i64, !dbg !22
  %29 = sext i32 %invariant.op to i64, !dbg !23
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %12) #6, !dbg !24
  %32 = getelementptr bfloat, ptr addrspace(1) %3, i64 %29, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %12) #6, !dbg !26
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !27
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %12) #6, !dbg !28
  br i1 %.not3, label %36, label %__nv_rsqrtf.exit, !dbg !29

36:                                               ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %10
  %37 = icmp slt i64 %21, 0, !dbg !18
  %38 = shl i64 %21, 12, !dbg !21
  %39 = add i64 %38, 131596288, !dbg !21
  %40 = select i1 %37, i64 %39, i64 %38, !dbg !21
  %41 = getelementptr bfloat, ptr addrspace(1) %2, i64 %40
  %42 = lshr i32 %13, 5, !dbg !13
  %43 = and i32 %13, 31, !dbg !13
  %44 = extractvalue { i32, i32 } %35, 1, !dbg !28
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !28
  %46 = extractvalue { i32, i32 } %35, 0, !dbg !28
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !28
  %48 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !26
  %50 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !26
  %52 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !24
  %54 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %56 = getelementptr bfloat, ptr addrspace(1) %41, i64 %28, !dbg !30
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %12) #6, !dbg !31
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !31
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !31
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !31
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !31
  %62 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !32
  %63 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !33
  %64 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !34
  %65 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !35
  %66 = fadd <2 x float> %64, %65, !dbg !36
  %67 = fadd <2 x float> %66, %63, !dbg !37
  %68 = fadd <2 x float> %67, %62, !dbg !38
  %69 = fptrunc <2 x float> %68 to <2 x bfloat>, !dbg !39
  %70 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !32
  %71 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !33
  %72 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !34
  %73 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !35
  %74 = fadd <2 x float> %72, %73, !dbg !36
  %75 = fadd <2 x float> %74, %71, !dbg !37
  %76 = fadd <2 x float> %75, %70, !dbg !38
  %77 = fptrunc <2 x float> %76 to <2 x bfloat>, !dbg !39
  %78 = bitcast <2 x bfloat> %69 to i32, !dbg !39
  %79 = bitcast <2 x bfloat> %77 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %78, i32 %79, ptr addrspace(1) %30, i1 %12) #6, !dbg !39
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %80 = sext i32 %.reass.1 to i64, !dbg !23
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !23
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %81, i1 %12) #6, !dbg !24
  %83 = getelementptr bfloat, ptr addrspace(1) %3, i64 %80, !dbg !25
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %83, i1 %12) #6, !dbg !26
  %85 = getelementptr bfloat, ptr addrspace(1) %4, i64 %80, !dbg !27
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %85, i1 %12) #6, !dbg !28
  %87 = or disjoint i64 %28, 2048, !dbg !40
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !28
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !28
  %90 = extractvalue { i32, i32 } %86, 0, !dbg !28
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !28
  %92 = extractvalue { i32, i32 } %84, 1, !dbg !26
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !26
  %94 = extractvalue { i32, i32 } %84, 0, !dbg !26
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !26
  %96 = extractvalue { i32, i32 } %82, 1, !dbg !24
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !24
  %98 = extractvalue { i32, i32 } %82, 0, !dbg !24
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %100 = getelementptr bfloat, ptr addrspace(1) %41, i64 %87, !dbg !30
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %100, i1 %12) #6, !dbg !31
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !31
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !31
  %104 = extractvalue { i32, i32 } %101, 1, !dbg !31
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !31
  %106 = fpext <2 x bfloat> %91 to <2 x float>, !dbg !32
  %107 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !33
  %108 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !34
  %109 = fpext <2 x bfloat> %103 to <2 x float>, !dbg !35
  %110 = fadd <2 x float> %108, %109, !dbg !36
  %111 = fadd <2 x float> %110, %107, !dbg !37
  %112 = fadd <2 x float> %111, %106, !dbg !38
  %113 = fmul <2 x float> %68, %68, !dbg !41
  %114 = fmul <2 x float> %112, %112, !dbg !41
  %115 = fadd <2 x float> %113, %114, !dbg !42
  %116 = fptrunc <2 x float> %112 to <2 x bfloat>, !dbg !39
  %117 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !32
  %118 = fpext <2 x bfloat> %93 to <2 x float>, !dbg !33
  %119 = fpext <2 x bfloat> %97 to <2 x float>, !dbg !34
  %120 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !35
  %121 = fadd <2 x float> %119, %120, !dbg !36
  %122 = fadd <2 x float> %121, %118, !dbg !37
  %123 = fadd <2 x float> %122, %117, !dbg !38
  %124 = fmul <2 x float> %76, %76, !dbg !41
  %125 = fmul <2 x float> %123, %123, !dbg !41
  %126 = fadd <2 x float> %124, %125, !dbg !42
  %127 = fptrunc <2 x float> %123 to <2 x bfloat>, !dbg !39
  %128 = bitcast <2 x bfloat> %116 to i32, !dbg !39
  %129 = bitcast <2 x bfloat> %127 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %81, i1 %12) #6, !dbg !39
  %shift = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %130 = fadd <2 x float> %115, %shift, !dbg !43
  %131 = fadd <2 x float> %126, %130, !dbg !43
  %shift19 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %132 = fadd <2 x float> %shift19, %131, !dbg !43
  %133 = extractelement <2 x float> %132, i64 0, !dbg !43
  %134 = select i1 %12, float %133, float 0.000000e+00, !dbg !43
  %135 = bitcast float %134 to i32, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fadd float %134, %137, !dbg !43
  %139 = bitcast float %138 to i32, !dbg !48
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !48
  %141 = bitcast i32 %140 to float, !dbg !48
  %142 = fadd float %138, %141, !dbg !43
  %143 = bitcast float %142 to i32, !dbg !48
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !48
  %145 = bitcast i32 %144 to float, !dbg !48
  %146 = fadd float %142, %145, !dbg !43
  %147 = bitcast float %146 to i32, !dbg !48
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !48
  %149 = bitcast i32 %148 to float, !dbg !48
  %150 = fadd float %146, %149, !dbg !43
  %151 = bitcast float %150 to i32, !dbg !48
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !48
  %153 = bitcast i32 %152 to float, !dbg !48
  %154 = fadd float %150, %153, !dbg !43
  %155 = and i32 %42, 15, !dbg !48
  %156 = icmp eq i32 %43, 0, !dbg !48
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !48
  %158 = bitcast float %154 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %156) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %159 = icmp slt i32 %13, 16, !dbg !48
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !48
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #6, !dbg !48
  %162 = bitcast i32 %161 to float, !dbg !48
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !48
  %164 = bitcast i32 %163 to float, !dbg !48
  %165 = fadd float %162, %164, !dbg !43
  %166 = bitcast float %165 to i32, !dbg !48
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !48
  %168 = bitcast i32 %167 to float, !dbg !48
  %169 = fadd float %165, %168, !dbg !43
  %170 = bitcast float %169 to i32, !dbg !48
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !48
  %172 = bitcast i32 %171 to float, !dbg !48
  %173 = fadd float %169, %172, !dbg !43
  %174 = bitcast float %173 to i32, !dbg !48
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !48
  %176 = bitcast i32 %175 to float, !dbg !48
  %177 = fadd float %173, %176, !dbg !43
  %178 = and i32 %13, 15, !dbg !48
  %179 = icmp eq i32 %178, 0, !dbg !48
  %180 = and i1 %159, %179, !dbg !48
  %181 = bitcast float %177 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %181, i1 %180) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %182 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %183 = tail call float @llvm.nvvm.div.full(float %182, float 4.096000e+03), !dbg !49
  %184 = fadd float %183, 0x3EB0C6F7A0000000, !dbg !50
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i10 = icmp eq i32 %188, 0, !dbg !51
  br i1 %.not.i10, label %191, label %189, !dbg !51

189:                                              ; preds = %__nv_rsqrtf.exit
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !51
  br label %__nv_rsqrtf.exit12, !dbg !51

191:                                              ; preds = %__nv_rsqrtf.exit
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !51
  br label %__nv_rsqrtf.exit12, !dbg !51

__nv_rsqrtf.exit12:                               ; preds = %189, %191
  %.0.i11 = phi float [ %190, %189 ], [ %192, %191 ], !dbg !51
  %193 = getelementptr bfloat, ptr addrspace(1) %5, i64 %28, !dbg !52
  %194 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %193, i1 true) #6, !dbg !53
  %195 = extractvalue { i32, i32 } %194, 0, !dbg !53
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !53
  %197 = extractvalue { i32, i32 } %194, 1, !dbg !53
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !53
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %12) #6, !dbg !54
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !54
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !54
  %202 = extractvalue { i32, i32 } %199, 1, !dbg !54
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !54
  %204 = getelementptr bfloat, ptr addrspace(1) %6, i64 %29, !dbg !55
  %205 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !56
  %206 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !57
  %207 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !58
  %208 = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %209 = fmul <2 x float> %208, %206, !dbg !58
  %210 = fmul <2 x float> %209, %205, !dbg !59
  %211 = fptrunc <2 x float> %210 to <2 x bfloat>, !dbg !60
  %212 = fpext <2 x bfloat> %198 to <2 x float>, !dbg !56
  %213 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !57
  %214 = fmul <2 x float> %208, %213, !dbg !58
  %215 = fmul <2 x float> %214, %212, !dbg !59
  %216 = fptrunc <2 x float> %215 to <2 x bfloat>, !dbg !60
  %217 = bitcast <2 x bfloat> %211 to i32, !dbg !60
  %218 = bitcast <2 x bfloat> %216 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %217, i32 %218, ptr addrspace(1) %204, i1 %12) #6, !dbg !60
  %219 = getelementptr bfloat, ptr addrspace(1) %5, i64 %87, !dbg !52
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %219, i1 true) #6, !dbg !53
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !53
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !53
  %223 = extractvalue { i32, i32 } %220, 1, !dbg !53
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !53
  %225 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %81, i1 %12) #6, !dbg !54
  %226 = extractvalue { i32, i32 } %225, 0, !dbg !54
  %227 = bitcast i32 %226 to <2 x bfloat>, !dbg !54
  %228 = extractvalue { i32, i32 } %225, 1, !dbg !54
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !54
  %230 = getelementptr bfloat, ptr addrspace(1) %6, i64 %80, !dbg !55
  %231 = fpext <2 x bfloat> %222 to <2 x float>, !dbg !56
  %232 = fpext <2 x bfloat> %227 to <2 x float>, !dbg !57
  %233 = fmul <2 x float> %208, %232, !dbg !58
  %234 = fmul <2 x float> %233, %231, !dbg !59
  %235 = fptrunc <2 x float> %234 to <2 x bfloat>, !dbg !60
  %236 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !56
  %237 = fpext <2 x bfloat> %229 to <2 x float>, !dbg !57
  %238 = fmul <2 x float> %208, %237, !dbg !58
  %239 = fmul <2 x float> %238, %236, !dbg !59
  %240 = fptrunc <2 x float> %239 to <2 x bfloat>, !dbg !60
  %241 = bitcast <2 x bfloat> %235 to i32, !dbg !60
  %242 = bitcast <2 x bfloat> %240 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %241, i32 %242, ptr addrspace(1) %230, i1 %12) #6, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 25, column: 21, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 29, column: 30, scope: !10)
!15 = !DILocation(line: 29, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 50, scope: !10)
!17 = !DILocation(line: 41, column: 22, scope: !10)
!18 = !DILocation(line: 42, column: 22, scope: !10)
!19 = !DILocation(line: 43, column: 36, scope: !10)
!20 = !DILocation(line: 44, column: 41, scope: !10)
!21 = !DILocation(line: 45, column: 46, scope: !10)
!22 = !DILocation(line: 31, column: 40, scope: !10)
!23 = !DILocation(line: 37, column: 38, scope: !10)
!24 = !DILocation(line: 37, column: 55, scope: !10)
!25 = !DILocation(line: 38, column: 34, scope: !10)
!26 = !DILocation(line: 38, column: 51, scope: !10)
!27 = !DILocation(line: 39, column: 35, scope: !10)
!28 = !DILocation(line: 39, column: 52, scope: !10)
!29 = !DILocation(line: 44, column: 68, scope: !10)
!30 = !DILocation(line: 45, column: 34, scope: !10)
!31 = !DILocation(line: 45, column: 53, scope: !10)
!32 = !DILocation(line: 39, column: 114, scope: !10)
!33 = !DILocation(line: 38, column: 113, scope: !10)
!34 = !DILocation(line: 37, column: 117, scope: !10)
!35 = !DILocation(line: 45, column: 115, scope: !10)
!36 = !DILocation(line: 46, column: 22, scope: !10)
!37 = !DILocation(line: 47, column: 23, scope: !10)
!38 = !DILocation(line: 48, column: 24, scope: !10)
!39 = !DILocation(line: 54, column: 56, scope: !10)
!40 = !DILocation(line: 32, column: 31, scope: !10)
!41 = !DILocation(line: 50, column: 24, scope: !10)
!42 = !DILocation(line: 52, column: 25, scope: !10)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !10, file: !45, discriminator: 0)
!47 = !DILocation(line: 55, column: 27, scope: !10)
!48 = !DILocation(line: 286, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 66, column: 25, scope: !10)
!50 = !DILocation(line: 68, column: 24, scope: !10)
!51 = !DILocation(line: 69, column: 32, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 63, column: 56, scope: !10)
!55 = !DILocation(line: 73, column: 29, scope: !10)
!56 = !DILocation(line: 62, column: 95, scope: !10)
!57 = !DILocation(line: 63, column: 118, scope: !10)
!58 = !DILocation(line: 70, column: 24, scope: !10)
!59 = !DILocation(line: 72, column: 24, scope: !10)
!60 = !DILocation(line: 73, column: 53, scope: !10)
!61 = !DILocation(line: 56, column: 4, scope: !10)
