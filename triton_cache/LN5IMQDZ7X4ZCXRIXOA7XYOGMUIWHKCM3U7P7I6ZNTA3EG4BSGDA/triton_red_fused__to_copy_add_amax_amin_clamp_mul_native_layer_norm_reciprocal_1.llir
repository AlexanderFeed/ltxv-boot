; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 4, !dbg !11
  %22 = and i32 %21, 2032, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = or disjoint i32 %22, 8, !dbg !11
  %25 = or disjoint i32 %22, 12, !dbg !11
  %26 = or disjoint i32 %22, 2048, !dbg !11
  %27 = or disjoint i32 %22, 2052, !dbg !11
  %28 = or disjoint i32 %22, 2056, !dbg !11
  %29 = or disjoint i32 %22, 2060, !dbg !11
  %30 = icmp samesign ult i32 %26, 3072, !dbg !12
  %31 = mul i32 %16, 3072, !dbg !13
  %32 = add i32 %22, %31, !dbg !14
  %33 = add i32 %24, %31, !dbg !14
  %34 = add i32 %26, %31, !dbg !14
  %35 = add i32 %28, %31, !dbg !14
  %36 = sext i32 %32 to i64, !dbg !15
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !15
  %38 = sext i32 %33 to i64, !dbg !15
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !15
  %40 = sext i32 %34 to i64, !dbg !15
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !15
  %42 = sext i32 %35 to i64, !dbg !15
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !15
  %44 = and i1 %17, %30, !dbg !16
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %17) #5, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !17
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !17
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !17
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !17
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !17
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !17
  %54 = extractelement <2 x bfloat> %47, i64 0, !dbg !17
  %55 = extractelement <2 x bfloat> %47, i64 1, !dbg !17
  %56 = extractelement <2 x bfloat> %49, i64 0, !dbg !17
  %57 = extractelement <2 x bfloat> %49, i64 1, !dbg !17
  %58 = extractelement <2 x bfloat> %51, i64 0, !dbg !17
  %59 = extractelement <2 x bfloat> %51, i64 1, !dbg !17
  %60 = extractelement <2 x bfloat> %53, i64 0, !dbg !17
  %61 = extractelement <2 x bfloat> %53, i64 1, !dbg !17
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #5, !dbg !17
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !17
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !17
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !17
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !17
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !17
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !17
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !17
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !17
  %71 = extractelement <2 x bfloat> %64, i64 0, !dbg !17
  %72 = extractelement <2 x bfloat> %64, i64 1, !dbg !17
  %73 = extractelement <2 x bfloat> %66, i64 0, !dbg !17
  %74 = extractelement <2 x bfloat> %66, i64 1, !dbg !17
  %75 = extractelement <2 x bfloat> %68, i64 0, !dbg !17
  %76 = extractelement <2 x bfloat> %68, i64 1, !dbg !17
  %77 = extractelement <2 x bfloat> %70, i64 0, !dbg !17
  %78 = extractelement <2 x bfloat> %70, i64 1, !dbg !17
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %44) #5, !dbg !17
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !17
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !17
  %82 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !17
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !17
  %84 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !17
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !17
  %86 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !17
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !17
  %88 = extractelement <2 x bfloat> %81, i64 0, !dbg !17
  %89 = extractelement <2 x bfloat> %81, i64 1, !dbg !17
  %90 = extractelement <2 x bfloat> %83, i64 0, !dbg !17
  %91 = extractelement <2 x bfloat> %83, i64 1, !dbg !17
  %92 = extractelement <2 x bfloat> %85, i64 0, !dbg !17
  %93 = extractelement <2 x bfloat> %85, i64 1, !dbg !17
  %94 = extractelement <2 x bfloat> %87, i64 0, !dbg !17
  %95 = extractelement <2 x bfloat> %87, i64 1, !dbg !17
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %44) #5, !dbg !17
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !17
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !17
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !17
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !17
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !17
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !17
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !17
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !17
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !17
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !17
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !17
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !17
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !17
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !17
  %113 = fpext bfloat %54 to float, !dbg !18
  %114 = fpext bfloat %55 to float, !dbg !18
  %115 = fpext bfloat %56 to float, !dbg !18
  %116 = fpext bfloat %57 to float, !dbg !18
  %117 = fpext bfloat %58 to float, !dbg !18
  %118 = fpext bfloat %59 to float, !dbg !18
  %119 = fpext bfloat %60 to float, !dbg !18
  %120 = fpext bfloat %61 to float, !dbg !18
  %121 = fpext bfloat %71 to float, !dbg !18
  %122 = fpext bfloat %72 to float, !dbg !18
  %123 = fpext bfloat %73 to float, !dbg !18
  %124 = fpext bfloat %74 to float, !dbg !18
  %125 = fpext bfloat %75 to float, !dbg !18
  %126 = fpext bfloat %76 to float, !dbg !18
  %127 = fpext bfloat %77 to float, !dbg !18
  %128 = fpext bfloat %78 to float, !dbg !18
  %129 = fpext bfloat %88 to float, !dbg !18
  %130 = fpext bfloat %89 to float, !dbg !18
  %131 = fpext bfloat %90 to float, !dbg !18
  %132 = fpext bfloat %91 to float, !dbg !18
  %133 = fpext bfloat %92 to float, !dbg !18
  %134 = fpext bfloat %93 to float, !dbg !18
  %135 = fpext bfloat %94 to float, !dbg !18
  %136 = fpext bfloat %95 to float, !dbg !18
  %137 = fpext bfloat %105 to float, !dbg !18
  %138 = fpext bfloat %106 to float, !dbg !18
  %139 = fpext bfloat %107 to float, !dbg !18
  %140 = fpext bfloat %108 to float, !dbg !18
  %141 = fpext bfloat %109 to float, !dbg !18
  %142 = fpext bfloat %110 to float, !dbg !18
  %143 = fpext bfloat %111 to float, !dbg !18
  %144 = fpext bfloat %112 to float, !dbg !18
  %145 = select i1 %17, float %113, float 0.000000e+00, !dbg !19
  %146 = select i1 %17, float %114, float 0.000000e+00, !dbg !19
  %147 = select i1 %17, float %115, float 0.000000e+00, !dbg !19
  %148 = select i1 %17, float %116, float 0.000000e+00, !dbg !19
  %149 = select i1 %17, float %117, float 0.000000e+00, !dbg !19
  %150 = select i1 %17, float %118, float 0.000000e+00, !dbg !19
  %151 = select i1 %17, float %119, float 0.000000e+00, !dbg !19
  %152 = select i1 %17, float %120, float 0.000000e+00, !dbg !19
  %153 = select i1 %17, float %121, float 0.000000e+00, !dbg !19
  %154 = select i1 %17, float %122, float 0.000000e+00, !dbg !19
  %155 = select i1 %17, float %123, float 0.000000e+00, !dbg !19
  %156 = select i1 %17, float %124, float 0.000000e+00, !dbg !19
  %157 = select i1 %17, float %125, float 0.000000e+00, !dbg !19
  %158 = select i1 %17, float %126, float 0.000000e+00, !dbg !19
  %159 = select i1 %17, float %127, float 0.000000e+00, !dbg !19
  %160 = select i1 %17, float %128, float 0.000000e+00, !dbg !19
  %161 = select i1 %44, float %129, float 0.000000e+00, !dbg !19
  %162 = select i1 %44, float %130, float 0.000000e+00, !dbg !19
  %163 = select i1 %44, float %131, float 0.000000e+00, !dbg !19
  %164 = select i1 %44, float %132, float 0.000000e+00, !dbg !19
  %165 = select i1 %44, float %133, float 0.000000e+00, !dbg !19
  %166 = select i1 %44, float %134, float 0.000000e+00, !dbg !19
  %167 = select i1 %44, float %135, float 0.000000e+00, !dbg !19
  %168 = select i1 %44, float %136, float 0.000000e+00, !dbg !19
  %169 = select i1 %44, float %137, float 0.000000e+00, !dbg !19
  %170 = select i1 %44, float %138, float 0.000000e+00, !dbg !19
  %171 = select i1 %44, float %139, float 0.000000e+00, !dbg !19
  %172 = select i1 %44, float %140, float 0.000000e+00, !dbg !19
  %173 = select i1 %44, float %141, float 0.000000e+00, !dbg !19
  %174 = select i1 %44, float %142, float 0.000000e+00, !dbg !19
  %175 = select i1 %44, float %143, float 0.000000e+00, !dbg !19
  %176 = select i1 %44, float %144, float 0.000000e+00, !dbg !19
  %177 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %178 = select i1 %44, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %179 = fsub float %146, %145, !dbg !21
  %180 = select i1 %17, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !27
  %182 = tail call float @llvm.nvvm.div.full(float %177, float %180), !dbg !28
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !29
  %184 = fmul float %183, %179, !dbg !30
  %185 = fadd float %145, %184, !dbg !31
  %186 = fmul float %179, %179, !dbg !32
  %187 = fmul float %177, %186, !dbg !33
  %188 = fmul float %183, %187, !dbg !34
  %189 = fadd float %188, 0.000000e+00, !dbg !35
  %190 = fsub float %147, %185, !dbg !21
  %191 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !27
  %193 = tail call float @llvm.nvvm.div.full(float %177, float %191), !dbg !28
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !29
  %195 = fmul float %194, %190, !dbg !30
  %196 = fadd float %185, %195, !dbg !31
  %197 = fmul float %190, %190, !dbg !32
  %198 = fmul float %180, %197, !dbg !33
  %199 = fmul float %194, %198, !dbg !34
  %200 = fadd float %189, %199, !dbg !35
  %201 = fsub float %148, %196, !dbg !21
  %202 = select i1 %17, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !27
  %204 = tail call float @llvm.nvvm.div.full(float %177, float %202), !dbg !28
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !29
  %206 = fmul float %205, %201, !dbg !30
  %207 = fadd float %196, %206, !dbg !31
  %208 = fmul float %201, %201, !dbg !32
  %209 = fmul float %191, %208, !dbg !33
  %210 = fmul float %205, %209, !dbg !34
  %211 = fadd float %200, %210, !dbg !35
  %212 = fsub float %149, %207, !dbg !21
  %213 = select i1 %17, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !27
  %215 = tail call float @llvm.nvvm.div.full(float %177, float %213), !dbg !28
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !29
  %217 = fmul float %216, %212, !dbg !30
  %218 = fadd float %207, %217, !dbg !31
  %219 = fmul float %212, %212, !dbg !32
  %220 = fmul float %202, %219, !dbg !33
  %221 = fmul float %216, %220, !dbg !34
  %222 = fadd float %211, %221, !dbg !35
  %223 = fsub float %150, %218, !dbg !21
  %224 = select i1 %17, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !27
  %226 = tail call float @llvm.nvvm.div.full(float %177, float %224), !dbg !28
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !29
  %228 = fmul float %227, %223, !dbg !30
  %229 = fadd float %218, %228, !dbg !31
  %230 = fmul float %223, %223, !dbg !32
  %231 = fmul float %213, %230, !dbg !33
  %232 = fmul float %227, %231, !dbg !34
  %233 = fadd float %222, %232, !dbg !35
  %234 = fsub float %151, %229, !dbg !21
  %235 = select i1 %17, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !27
  %237 = tail call float @llvm.nvvm.div.full(float %177, float %235), !dbg !28
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !29
  %239 = fmul float %238, %234, !dbg !30
  %240 = fadd float %229, %239, !dbg !31
  %241 = fmul float %234, %234, !dbg !32
  %242 = fmul float %224, %241, !dbg !33
  %243 = fmul float %238, %242, !dbg !34
  %244 = fadd float %233, %243, !dbg !35
  %245 = fsub float %152, %240, !dbg !21
  %246 = select i1 %17, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !27
  %248 = tail call float @llvm.nvvm.div.full(float %177, float %246), !dbg !28
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !29
  %250 = fmul float %249, %245, !dbg !30
  %251 = fadd float %240, %250, !dbg !31
  %252 = fmul float %245, %245, !dbg !32
  %253 = fmul float %235, %252, !dbg !33
  %254 = fmul float %249, %253, !dbg !34
  %255 = fadd float %244, %254, !dbg !35
  %256 = fsub float %153, %251, !dbg !21
  %257 = select i1 %17, float 9.000000e+00, float 0.000000e+00, !dbg !26
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !27
  %259 = tail call float @llvm.nvvm.div.full(float %177, float %257), !dbg !28
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !29
  %261 = fmul float %260, %256, !dbg !30
  %262 = fadd float %251, %261, !dbg !31
  %263 = fadd float %255, 0.000000e+00, !dbg !36
  %264 = fmul float %256, %256, !dbg !32
  %265 = fmul float %246, %264, !dbg !33
  %266 = fmul float %260, %265, !dbg !34
  %267 = fadd float %263, %266, !dbg !35
  %268 = fsub float %154, %262, !dbg !21
  %269 = select i1 %17, float 1.000000e+01, float 0.000000e+00, !dbg !26
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !27
  %271 = tail call float @llvm.nvvm.div.full(float %177, float %269), !dbg !28
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !29
  %273 = fmul float %272, %268, !dbg !30
  %274 = fadd float %262, %273, !dbg !31
  %275 = fmul float %268, %268, !dbg !32
  %276 = fmul float %257, %275, !dbg !33
  %277 = fmul float %272, %276, !dbg !34
  %278 = fadd float %267, %277, !dbg !35
  %279 = fsub float %155, %274, !dbg !21
  %280 = select i1 %17, float 1.100000e+01, float 0.000000e+00, !dbg !26
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !27
  %282 = tail call float @llvm.nvvm.div.full(float %177, float %280), !dbg !28
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !29
  %284 = fmul float %283, %279, !dbg !30
  %285 = fadd float %274, %284, !dbg !31
  %286 = fmul float %279, %279, !dbg !32
  %287 = fmul float %269, %286, !dbg !33
  %288 = fmul float %283, %287, !dbg !34
  %289 = fadd float %278, %288, !dbg !35
  %290 = fsub float %156, %285, !dbg !21
  %291 = select i1 %17, float 1.200000e+01, float 0.000000e+00, !dbg !26
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !27
  %293 = tail call float @llvm.nvvm.div.full(float %177, float %291), !dbg !28
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !29
  %295 = fmul float %294, %290, !dbg !30
  %296 = fadd float %285, %295, !dbg !31
  %297 = fmul float %290, %290, !dbg !32
  %298 = fmul float %280, %297, !dbg !33
  %299 = fmul float %294, %298, !dbg !34
  %300 = fadd float %289, %299, !dbg !35
  %301 = fsub float %157, %296, !dbg !21
  %302 = select i1 %17, float 1.300000e+01, float 0.000000e+00, !dbg !26
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !27
  %304 = tail call float @llvm.nvvm.div.full(float %177, float %302), !dbg !28
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !29
  %306 = fmul float %305, %301, !dbg !30
  %307 = fadd float %296, %306, !dbg !31
  %308 = fmul float %301, %301, !dbg !32
  %309 = fmul float %291, %308, !dbg !33
  %310 = fmul float %305, %309, !dbg !34
  %311 = fadd float %300, %310, !dbg !35
  %312 = fsub float %158, %307, !dbg !21
  %313 = select i1 %17, float 1.400000e+01, float 0.000000e+00, !dbg !26
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !27
  %315 = tail call float @llvm.nvvm.div.full(float %177, float %313), !dbg !28
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !29
  %317 = fmul float %316, %312, !dbg !30
  %318 = fadd float %307, %317, !dbg !31
  %319 = fmul float %312, %312, !dbg !32
  %320 = fmul float %302, %319, !dbg !33
  %321 = fmul float %316, %320, !dbg !34
  %322 = fadd float %311, %321, !dbg !35
  %323 = fsub float %159, %318, !dbg !21
  %324 = select i1 %17, float 1.500000e+01, float 0.000000e+00, !dbg !26
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !27
  %326 = tail call float @llvm.nvvm.div.full(float %177, float %324), !dbg !28
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !29
  %328 = fmul float %327, %323, !dbg !30
  %329 = fadd float %318, %328, !dbg !31
  %330 = fadd float %322, 0.000000e+00, !dbg !36
  %331 = fmul float %323, %323, !dbg !32
  %332 = fmul float %313, %331, !dbg !33
  %333 = fmul float %327, %332, !dbg !34
  %334 = fadd float %330, %333, !dbg !35
  %335 = fsub float %160, %329, !dbg !21
  %336 = select i1 %17, float 1.600000e+01, float 0.000000e+00, !dbg !26
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !27
  %338 = tail call float @llvm.nvvm.div.full(float %177, float %336), !dbg !28
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !29
  %340 = fmul float %339, %335, !dbg !30
  %341 = fadd float %329, %340, !dbg !31
  %342 = fmul float %335, %335, !dbg !32
  %343 = fmul float %324, %342, !dbg !33
  %344 = fmul float %339, %343, !dbg !34
  %345 = fadd float %334, %344, !dbg !35
  %346 = fsub float %161, %341, !dbg !21
  %347 = fadd float %336, %178, !dbg !26
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !27
  %349 = tail call float @llvm.nvvm.div.full(float %178, float %347), !dbg !28
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !29
  %351 = fmul float %350, %346, !dbg !30
  %352 = fadd float %341, %351, !dbg !31
  %353 = fmul float %346, %346, !dbg !32
  %354 = fmul float %336, %353, !dbg !33
  %355 = fmul float %350, %354, !dbg !34
  %356 = fadd float %345, %355, !dbg !35
  %357 = fsub float %162, %352, !dbg !21
  %358 = fadd float %178, %347, !dbg !26
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !27
  %360 = tail call float @llvm.nvvm.div.full(float %178, float %358), !dbg !28
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !29
  %362 = fmul float %361, %357, !dbg !30
  %363 = fadd float %352, %362, !dbg !31
  %364 = fmul float %357, %357, !dbg !32
  %365 = fmul float %347, %364, !dbg !33
  %366 = fmul float %361, %365, !dbg !34
  %367 = fadd float %356, %366, !dbg !35
  %368 = fsub float %163, %363, !dbg !21
  %369 = fadd float %178, %358, !dbg !26
  %370 = fcmp oeq float %369, 0.000000e+00, !dbg !27
  %371 = tail call float @llvm.nvvm.div.full(float %178, float %369), !dbg !28
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !29
  %373 = fmul float %372, %368, !dbg !30
  %374 = fadd float %363, %373, !dbg !31
  %375 = fmul float %368, %368, !dbg !32
  %376 = fmul float %358, %375, !dbg !33
  %377 = fmul float %372, %376, !dbg !34
  %378 = fadd float %367, %377, !dbg !35
  %379 = fsub float %164, %374, !dbg !21
  %380 = fadd float %178, %369, !dbg !26
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !27
  %382 = tail call float @llvm.nvvm.div.full(float %178, float %380), !dbg !28
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !29
  %384 = fmul float %383, %379, !dbg !30
  %385 = fadd float %374, %384, !dbg !31
  %386 = fmul float %379, %379, !dbg !32
  %387 = fmul float %369, %386, !dbg !33
  %388 = fmul float %383, %387, !dbg !34
  %389 = fadd float %378, %388, !dbg !35
  %390 = fsub float %165, %385, !dbg !21
  %391 = fadd float %178, %380, !dbg !26
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !27
  %393 = tail call float @llvm.nvvm.div.full(float %178, float %391), !dbg !28
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !29
  %395 = fmul float %394, %390, !dbg !30
  %396 = fadd float %385, %395, !dbg !31
  %397 = fadd float %389, 0.000000e+00, !dbg !36
  %398 = fmul float %390, %390, !dbg !32
  %399 = fmul float %380, %398, !dbg !33
  %400 = fmul float %394, %399, !dbg !34
  %401 = fadd float %397, %400, !dbg !35
  %402 = fsub float %166, %396, !dbg !21
  %403 = fadd float %178, %391, !dbg !26
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !27
  %405 = tail call float @llvm.nvvm.div.full(float %178, float %403), !dbg !28
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !29
  %407 = fmul float %406, %402, !dbg !30
  %408 = fadd float %396, %407, !dbg !31
  %409 = fmul float %402, %402, !dbg !32
  %410 = fmul float %391, %409, !dbg !33
  %411 = fmul float %406, %410, !dbg !34
  %412 = fadd float %401, %411, !dbg !35
  %413 = fsub float %167, %408, !dbg !21
  %414 = fadd float %178, %403, !dbg !26
  %415 = fcmp oeq float %414, 0.000000e+00, !dbg !27
  %416 = tail call float @llvm.nvvm.div.full(float %178, float %414), !dbg !28
  %417 = select i1 %415, float 0.000000e+00, float %416, !dbg !29
  %418 = fmul float %417, %413, !dbg !30
  %419 = fadd float %408, %418, !dbg !31
  %420 = fmul float %413, %413, !dbg !32
  %421 = fmul float %403, %420, !dbg !33
  %422 = fmul float %417, %421, !dbg !34
  %423 = fadd float %412, %422, !dbg !35
  %424 = fsub float %168, %419, !dbg !21
  %425 = fadd float %178, %414, !dbg !26
  %426 = fcmp oeq float %425, 0.000000e+00, !dbg !27
  %427 = tail call float @llvm.nvvm.div.full(float %178, float %425), !dbg !28
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !29
  %429 = fmul float %428, %424, !dbg !30
  %430 = fadd float %419, %429, !dbg !31
  %431 = fmul float %424, %424, !dbg !32
  %432 = fmul float %414, %431, !dbg !33
  %433 = fmul float %428, %432, !dbg !34
  %434 = fadd float %423, %433, !dbg !35
  %435 = fsub float %169, %430, !dbg !21
  %436 = fadd float %178, %425, !dbg !26
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !27
  %438 = tail call float @llvm.nvvm.div.full(float %178, float %436), !dbg !28
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !29
  %440 = fmul float %439, %435, !dbg !30
  %441 = fadd float %430, %440, !dbg !31
  %442 = fmul float %435, %435, !dbg !32
  %443 = fmul float %425, %442, !dbg !33
  %444 = fmul float %439, %443, !dbg !34
  %445 = fadd float %434, %444, !dbg !35
  %446 = fsub float %170, %441, !dbg !21
  %447 = fadd float %178, %436, !dbg !26
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !27
  %449 = tail call float @llvm.nvvm.div.full(float %178, float %447), !dbg !28
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !29
  %451 = fmul float %450, %446, !dbg !30
  %452 = fadd float %441, %451, !dbg !31
  %453 = fmul float %446, %446, !dbg !32
  %454 = fmul float %436, %453, !dbg !33
  %455 = fmul float %450, %454, !dbg !34
  %456 = fadd float %445, %455, !dbg !35
  %457 = fsub float %171, %452, !dbg !21
  %458 = fadd float %178, %447, !dbg !26
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !27
  %460 = tail call float @llvm.nvvm.div.full(float %178, float %458), !dbg !28
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !29
  %462 = fmul float %461, %457, !dbg !30
  %463 = fadd float %452, %462, !dbg !31
  %464 = fadd float %456, 0.000000e+00, !dbg !36
  %465 = fmul float %457, %457, !dbg !32
  %466 = fmul float %447, %465, !dbg !33
  %467 = fmul float %461, %466, !dbg !34
  %468 = fadd float %464, %467, !dbg !35
  %469 = fsub float %172, %463, !dbg !21
  %470 = fadd float %178, %458, !dbg !26
  %471 = fcmp oeq float %470, 0.000000e+00, !dbg !27
  %472 = tail call float @llvm.nvvm.div.full(float %178, float %470), !dbg !28
  %473 = select i1 %471, float 0.000000e+00, float %472, !dbg !29
  %474 = fmul float %473, %469, !dbg !30
  %475 = fadd float %463, %474, !dbg !31
  %476 = fmul float %469, %469, !dbg !32
  %477 = fmul float %458, %476, !dbg !33
  %478 = fmul float %473, %477, !dbg !34
  %479 = fadd float %468, %478, !dbg !35
  %480 = fsub float %173, %475, !dbg !21
  %481 = fadd float %178, %470, !dbg !26
  %482 = fcmp oeq float %481, 0.000000e+00, !dbg !27
  %483 = tail call float @llvm.nvvm.div.full(float %178, float %481), !dbg !28
  %484 = select i1 %482, float 0.000000e+00, float %483, !dbg !29
  %485 = fmul float %484, %480, !dbg !30
  %486 = fadd float %475, %485, !dbg !31
  %487 = fmul float %480, %480, !dbg !32
  %488 = fmul float %470, %487, !dbg !33
  %489 = fmul float %484, %488, !dbg !34
  %490 = fadd float %479, %489, !dbg !35
  %491 = fsub float %174, %486, !dbg !21
  %492 = fmul float %491, %491, !dbg !32
  %493 = fmul float %481, %492, !dbg !33
  %494 = fadd float %178, %481, !dbg !26
  %495 = fcmp oeq float %494, 0.000000e+00, !dbg !27
  %496 = tail call float @llvm.nvvm.div.full(float %178, float %494), !dbg !28
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !29
  %498 = fmul float %497, %491, !dbg !30
  %499 = fadd float %486, %498, !dbg !31
  %500 = fmul float %497, %493, !dbg !34
  %501 = fadd float %490, %500, !dbg !35
  %502 = fsub float %175, %499, !dbg !21
  %503 = fadd float %178, %494, !dbg !26
  %504 = tail call float @llvm.nvvm.div.full(float %178, float %503), !dbg !28
  %505 = fadd float %178, %503, !dbg !26
  %506 = insertelement <2 x float> poison, float %503, i64 0, !dbg !27
  %507 = insertelement <2 x float> %506, float %505, i64 1, !dbg !27
  %508 = fcmp oeq <2 x float> %507, zeroinitializer, !dbg !27
  %509 = tail call float @llvm.nvvm.div.full(float %178, float %505), !dbg !28
  %510 = insertelement <2 x float> poison, float %504, i64 0, !dbg !29
  %511 = insertelement <2 x float> %510, float %509, i64 1, !dbg !29
  %512 = select <2 x i1> %508, <2 x float> zeroinitializer, <2 x float> %511, !dbg !29
  %513 = extractelement <2 x float> %512, i64 0, !dbg !30
  %514 = fmul float %513, %502, !dbg !30
  %515 = fadd float %499, %514, !dbg !31
  %516 = fsub float %176, %515, !dbg !21
  %517 = insertelement <2 x float> poison, float %502, i64 0, !dbg !32
  %518 = insertelement <2 x float> %517, float %516, i64 1, !dbg !32
  %519 = fmul <2 x float> %518, %518, !dbg !32
  %520 = insertelement <2 x float> poison, float %494, i64 0, !dbg !33
  %521 = insertelement <2 x float> %520, float %503, i64 1, !dbg !33
  %522 = fmul <2 x float> %521, %519, !dbg !33
  %523 = fmul <2 x float> %512, %522, !dbg !34
  %524 = extractelement <2 x float> %523, i64 0, !dbg !35
  %525 = fadd float %501, %524, !dbg !35
  %526 = extractelement <2 x float> %512, i64 1, !dbg !30
  %527 = fmul float %526, %516, !dbg !30
  %528 = fadd float %515, %527, !dbg !31
  %529 = extractelement <2 x float> %523, i64 1, !dbg !35
  %530 = fadd float %525, %529, !dbg !35
  %531 = bitcast float %528 to i32, !dbg !37
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 16, i32 31), !dbg !37
  %533 = bitcast i32 %532 to float, !dbg !37
  %534 = bitcast float %530 to i32, !dbg !37
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !37
  %536 = bitcast i32 %535 to float, !dbg !37
  %537 = bitcast float %505 to i32, !dbg !37
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 16, i32 31), !dbg !37
  %539 = bitcast i32 %538 to float, !dbg !37
  %540 = fsub float %533, %528, !dbg !21
  %541 = fadd float %505, %539, !dbg !26
  %542 = fcmp oeq float %541, 0.000000e+00, !dbg !27
  %543 = tail call float @llvm.nvvm.div.full(float %539, float %541), !dbg !28
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !29
  %545 = fmul float %544, %540, !dbg !30
  %546 = fadd float %528, %545, !dbg !31
  %547 = fadd float %530, %536, !dbg !36
  %548 = fmul float %540, %540, !dbg !32
  %549 = fmul float %505, %548, !dbg !33
  %550 = fmul float %544, %549, !dbg !34
  %551 = fadd float %547, %550, !dbg !35
  %552 = bitcast float %546 to i32, !dbg !37
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !37
  %554 = bitcast i32 %553 to float, !dbg !37
  %555 = bitcast float %551 to i32, !dbg !37
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 8, i32 31), !dbg !37
  %557 = bitcast i32 %556 to float, !dbg !37
  %558 = bitcast float %541 to i32, !dbg !37
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 8, i32 31), !dbg !37
  %560 = bitcast i32 %559 to float, !dbg !37
  %561 = fsub float %554, %546, !dbg !21
  %562 = fadd float %541, %560, !dbg !26
  %563 = fcmp oeq float %562, 0.000000e+00, !dbg !27
  %564 = tail call float @llvm.nvvm.div.full(float %560, float %562), !dbg !28
  %565 = select i1 %563, float 0.000000e+00, float %564, !dbg !29
  %566 = fmul float %565, %561, !dbg !30
  %567 = fadd float %546, %566, !dbg !31
  %568 = fadd float %551, %557, !dbg !36
  %569 = fmul float %561, %561, !dbg !32
  %570 = fmul float %541, %569, !dbg !33
  %571 = fmul float %565, %570, !dbg !34
  %572 = fadd float %568, %571, !dbg !35
  %573 = bitcast float %567 to i32, !dbg !37
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 4, i32 31), !dbg !37
  %575 = bitcast i32 %574 to float, !dbg !37
  %576 = bitcast float %572 to i32, !dbg !37
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !37
  %578 = bitcast i32 %577 to float, !dbg !37
  %579 = bitcast float %562 to i32, !dbg !37
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 4, i32 31), !dbg !37
  %581 = bitcast i32 %580 to float, !dbg !37
  %582 = fsub float %575, %567, !dbg !21
  %583 = fadd float %562, %581, !dbg !26
  %584 = fcmp oeq float %583, 0.000000e+00, !dbg !27
  %585 = tail call float @llvm.nvvm.div.full(float %581, float %583), !dbg !28
  %586 = select i1 %584, float 0.000000e+00, float %585, !dbg !29
  %587 = fmul float %586, %582, !dbg !30
  %588 = fadd float %567, %587, !dbg !31
  %589 = fadd float %572, %578, !dbg !36
  %590 = fmul float %582, %582, !dbg !32
  %591 = fmul float %562, %590, !dbg !33
  %592 = fmul float %586, %591, !dbg !34
  %593 = fadd float %589, %592, !dbg !35
  %594 = bitcast float %588 to i32, !dbg !37
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !37
  %596 = bitcast i32 %595 to float, !dbg !37
  %597 = bitcast float %593 to i32, !dbg !37
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !37
  %599 = bitcast i32 %598 to float, !dbg !37
  %600 = bitcast float %583 to i32, !dbg !37
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 2, i32 31), !dbg !37
  %602 = bitcast i32 %601 to float, !dbg !37
  %603 = fsub float %596, %588, !dbg !21
  %604 = fadd float %583, %602, !dbg !26
  %605 = fcmp oeq float %604, 0.000000e+00, !dbg !27
  %606 = tail call float @llvm.nvvm.div.full(float %602, float %604), !dbg !28
  %607 = select i1 %605, float 0.000000e+00, float %606, !dbg !29
  %608 = fmul float %607, %603, !dbg !30
  %609 = fadd float %588, %608, !dbg !31
  %610 = fadd float %593, %599, !dbg !36
  %611 = fmul float %603, %603, !dbg !32
  %612 = fmul float %583, %611, !dbg !33
  %613 = fmul float %607, %612, !dbg !34
  %614 = fadd float %610, %613, !dbg !35
  %615 = bitcast float %609 to i32, !dbg !37
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !37
  %617 = bitcast i32 %616 to float, !dbg !37
  %618 = bitcast float %614 to i32, !dbg !37
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !37
  %620 = bitcast i32 %619 to float, !dbg !37
  %621 = bitcast float %604 to i32, !dbg !37
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 1, i32 31), !dbg !37
  %623 = bitcast i32 %622 to float, !dbg !37
  %624 = fsub float %617, %609, !dbg !21
  %625 = fadd float %604, %623, !dbg !26
  %626 = fcmp oeq float %625, 0.000000e+00, !dbg !27
  %627 = tail call float @llvm.nvvm.div.full(float %623, float %625), !dbg !28
  %628 = select i1 %626, float 0.000000e+00, float %627, !dbg !29
  %629 = fmul float %628, %624, !dbg !30
  %630 = fadd float %609, %629, !dbg !31
  %631 = fadd float %614, %620, !dbg !36
  %632 = fmul float %624, %624, !dbg !32
  %633 = fmul float %604, %632, !dbg !33
  %634 = fmul float %628, %633, !dbg !34
  %635 = fadd float %631, %634, !dbg !35
  %636 = and i32 %20, 3, !dbg !37
  %637 = icmp eq i32 %19, 0, !dbg !37
  %638 = getelementptr float, ptr addrspace(3) @global_smem, i32 %636, !dbg !37
  %639 = bitcast float %630 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %639, i1 %637) #5, !dbg !37
  %640 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %636, !dbg !37
  %641 = bitcast float %635 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 %637) #5, !dbg !37
  %642 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %636, !dbg !37
  %643 = bitcast float %625 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %643, i1 %637) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %644 = icmp slt i32 %18, 4, !dbg !37
  %645 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %646 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %645, i1 %644) #5, !dbg !37
  %647 = bitcast i32 %646 to float, !dbg !37
  %648 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %18, !dbg !37
  %649 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %648, i1 %644) #5, !dbg !37
  %650 = bitcast i32 %649 to float, !dbg !37
  %651 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !37
  %652 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %651, i1 %644) #5, !dbg !37
  %653 = bitcast i32 %652 to float, !dbg !37
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 2, i32 31), !dbg !37
  %655 = bitcast i32 %654 to float, !dbg !37
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 2, i32 31), !dbg !37
  %657 = bitcast i32 %656 to float, !dbg !37
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 2, i32 31), !dbg !37
  %659 = bitcast i32 %658 to float, !dbg !37
  %660 = fsub float %655, %647, !dbg !21
  %661 = fadd float %653, %659, !dbg !26
  %662 = fcmp oeq float %661, 0.000000e+00, !dbg !27
  %663 = tail call float @llvm.nvvm.div.full(float %659, float %661), !dbg !28
  %664 = select i1 %662, float 0.000000e+00, float %663, !dbg !29
  %665 = fmul float %660, %664, !dbg !30
  %666 = fadd float %665, %647, !dbg !31
  %667 = fadd float %650, %657, !dbg !36
  %668 = fmul float %660, %660, !dbg !32
  %669 = fmul float %668, %653, !dbg !33
  %670 = fmul float %669, %664, !dbg !34
  %671 = fadd float %667, %670, !dbg !35
  %672 = bitcast float %666 to i32, !dbg !37
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 1, i32 31), !dbg !37
  %674 = bitcast i32 %673 to float, !dbg !37
  %675 = bitcast float %671 to i32, !dbg !37
  %676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 1, i32 31), !dbg !37
  %677 = bitcast i32 %676 to float, !dbg !37
  %678 = bitcast float %661 to i32, !dbg !37
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 1, i32 31), !dbg !37
  %680 = bitcast i32 %679 to float, !dbg !37
  %681 = fsub float %674, %666, !dbg !21
  %682 = fadd float %661, %680, !dbg !26
  %683 = fcmp oeq float %682, 0.000000e+00, !dbg !27
  %684 = tail call float @llvm.nvvm.div.full(float %680, float %682), !dbg !28
  %685 = select i1 %683, float 0.000000e+00, float %684, !dbg !29
  %686 = fmul float %681, %685, !dbg !30
  %687 = fadd float %666, %686, !dbg !31
  %688 = fadd float %671, %677, !dbg !36
  %689 = fmul float %681, %681, !dbg !32
  %690 = fmul float %661, %689, !dbg !33
  %691 = fmul float %685, %690, !dbg !34
  %692 = fadd float %688, %691, !dbg !35
  %693 = and i32 %18, 3, !dbg !37
  %694 = icmp eq i32 %693, 0, !dbg !37
  %695 = and i1 %644, %694, !dbg !37
  %696 = bitcast float %687 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %696, i1 %695) #5, !dbg !37
  %697 = bitcast float %692 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %697, i1 %695) #5, !dbg !37
  %698 = bitcast float %682 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %698, i1 %695) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %699 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %700 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !37
  %701 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %17) #5, !dbg !38
  %702 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #5, !dbg !38
  %703 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %44) #5, !dbg !38
  %704 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %44) #5, !dbg !38
  %705 = add nuw nsw i32 %22, 3072, !dbg !39
  %706 = add nuw nsw i32 %22, 3080, !dbg !39
  %707 = add nuw nsw i32 %22, 5120, !dbg !39
  %708 = add nuw nsw i32 %22, 5128, !dbg !39
  %709 = zext nneg i32 %705 to i64, !dbg !40
  %710 = getelementptr float, ptr addrspace(1) %1, i64 %709, !dbg !40
  %711 = zext nneg i32 %22 to i64, !dbg !40
  %712 = getelementptr float, ptr addrspace(1) %1, i64 %711, !dbg !40
  %713 = getelementptr i8, ptr addrspace(1) %712, i64 12304, !dbg !40
  %714 = zext nneg i32 %706 to i64, !dbg !40
  %715 = getelementptr float, ptr addrspace(1) %1, i64 %714, !dbg !40
  %716 = getelementptr i8, ptr addrspace(1) %712, i64 12336, !dbg !40
  %717 = zext nneg i32 %707 to i64, !dbg !40
  %718 = getelementptr float, ptr addrspace(1) %1, i64 %717, !dbg !40
  %719 = getelementptr i8, ptr addrspace(1) %712, i64 20496, !dbg !40
  %720 = zext nneg i32 %708 to i64, !dbg !40
  %721 = getelementptr float, ptr addrspace(1) %1, i64 %720, !dbg !40
  %722 = getelementptr i8, ptr addrspace(1) %712, i64 20528, !dbg !40
  %723 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %710, i1 true) #5, !dbg !41
  %724 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %713, i1 true) #5, !dbg !41
  %725 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %715, i1 true) #5, !dbg !41
  %726 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %716, i1 true) #5, !dbg !41
  %727 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %718, i1 %30) #5, !dbg !41
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %719, i1 %30) #5, !dbg !41
  %729 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %721, i1 %30) #5, !dbg !41
  %730 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %722, i1 %30) #5, !dbg !41
  %731 = getelementptr bfloat, ptr addrspace(1) %2, i64 %709, !dbg !42
  %732 = getelementptr bfloat, ptr addrspace(1) %2, i64 %714, !dbg !42
  %733 = getelementptr bfloat, ptr addrspace(1) %2, i64 %717, !dbg !42
  %734 = getelementptr bfloat, ptr addrspace(1) %2, i64 %720, !dbg !42
  %735 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %731, i1 true) #5, !dbg !43
  %736 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %732, i1 true) #5, !dbg !43
  %737 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %733, i1 %30) #5, !dbg !43
  %738 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %734, i1 %30) #5, !dbg !43
  %739 = zext nneg i32 %23 to i64, !dbg !44
  %740 = getelementptr float, ptr addrspace(1) %1, i64 %739, !dbg !44
  %741 = zext nneg i32 %24 to i64, !dbg !44
  %742 = getelementptr float, ptr addrspace(1) %1, i64 %741, !dbg !44
  %743 = zext nneg i32 %25 to i64, !dbg !44
  %744 = getelementptr float, ptr addrspace(1) %1, i64 %743, !dbg !44
  %745 = zext nneg i32 %26 to i64, !dbg !44
  %746 = getelementptr float, ptr addrspace(1) %1, i64 %745, !dbg !44
  %747 = zext nneg i32 %27 to i64, !dbg !44
  %748 = getelementptr float, ptr addrspace(1) %1, i64 %747, !dbg !44
  %749 = zext nneg i32 %28 to i64, !dbg !44
  %750 = getelementptr float, ptr addrspace(1) %1, i64 %749, !dbg !44
  %751 = zext nneg i32 %29 to i64, !dbg !44
  %752 = getelementptr float, ptr addrspace(1) %1, i64 %751, !dbg !44
  %753 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %712, i1 true) #5, !dbg !45
  %754 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %740, i1 true) #5, !dbg !45
  %755 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %742, i1 true) #5, !dbg !45
  %756 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %744, i1 true) #5, !dbg !45
  %757 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %746, i1 %30) #5, !dbg !45
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %748, i1 %30) #5, !dbg !45
  %759 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %750, i1 %30) #5, !dbg !45
  %760 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %752, i1 %30) #5, !dbg !45
  %761 = getelementptr bfloat, ptr addrspace(1) %2, i64 %711, !dbg !46
  %762 = getelementptr bfloat, ptr addrspace(1) %2, i64 %741, !dbg !46
  %763 = getelementptr bfloat, ptr addrspace(1) %2, i64 %745, !dbg !46
  %764 = getelementptr bfloat, ptr addrspace(1) %2, i64 %749, !dbg !46
  %765 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %761, i1 true) #5, !dbg !47
  %766 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %762, i1 true) #5, !dbg !47
  %767 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %763, i1 %30) #5, !dbg !47
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %764, i1 %30) #5, !dbg !47
  %769 = tail call float @llvm.nvvm.div.full(float %700, float 3.072000e+03), !dbg !48
  %770 = fadd float %769, 0x3EB0C6F7A0000000, !dbg !49
  %771 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %772 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %773 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %774 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %775 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %776 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %777 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %780 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %781 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %782 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %783 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %784 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %785 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %786 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i90 = icmp eq i32 %786, 0, !dbg !50
  br i1 %.not.i90, label %789, label %787, !dbg !50

787:                                              ; preds = %__nv_rsqrtf.exit
  %788 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %770), !dbg !50
  br label %__nv_rsqrtf.exit92, !dbg !50

789:                                              ; preds = %__nv_rsqrtf.exit
  %790 = tail call float @llvm.nvvm.rsqrt.approx.f(float %770), !dbg !50
  br label %__nv_rsqrtf.exit92, !dbg !50

__nv_rsqrtf.exit92:                               ; preds = %787, %789
  %.0.i91 = phi float [ %788, %787 ], [ %790, %789 ], !dbg !50
  %791 = extractvalue { i32, i32, i32, i32 } %704, 3, !dbg !38
  %792 = bitcast i32 %791 to <2 x bfloat>, !dbg !38
  %793 = extractvalue { i32, i32, i32, i32 } %704, 2, !dbg !38
  %794 = bitcast i32 %793 to <2 x bfloat>, !dbg !38
  %795 = extractvalue { i32, i32, i32, i32 } %704, 1, !dbg !38
  %796 = bitcast i32 %795 to <2 x bfloat>, !dbg !38
  %797 = extractvalue { i32, i32, i32, i32 } %704, 0, !dbg !38
  %798 = bitcast i32 %797 to <2 x bfloat>, !dbg !38
  %799 = extractvalue { i32, i32, i32, i32 } %703, 3, !dbg !38
  %800 = bitcast i32 %799 to <2 x bfloat>, !dbg !38
  %801 = extractvalue { i32, i32, i32, i32 } %703, 2, !dbg !38
  %802 = bitcast i32 %801 to <2 x bfloat>, !dbg !38
  %803 = extractvalue { i32, i32, i32, i32 } %703, 1, !dbg !38
  %804 = bitcast i32 %803 to <2 x bfloat>, !dbg !38
  %805 = extractvalue { i32, i32, i32, i32 } %703, 0, !dbg !38
  %806 = bitcast i32 %805 to <2 x bfloat>, !dbg !38
  %807 = extractvalue { i32, i32, i32, i32 } %702, 3, !dbg !38
  %808 = bitcast i32 %807 to <2 x bfloat>, !dbg !38
  %809 = extractvalue { i32, i32, i32, i32 } %702, 2, !dbg !38
  %810 = bitcast i32 %809 to <2 x bfloat>, !dbg !38
  %811 = extractvalue { i32, i32, i32, i32 } %702, 1, !dbg !38
  %812 = bitcast i32 %811 to <2 x bfloat>, !dbg !38
  %813 = extractvalue { i32, i32, i32, i32 } %702, 0, !dbg !38
  %814 = bitcast i32 %813 to <2 x bfloat>, !dbg !38
  %815 = extractvalue { i32, i32, i32, i32 } %701, 3, !dbg !38
  %816 = bitcast i32 %815 to <2 x bfloat>, !dbg !38
  %817 = extractvalue { i32, i32, i32, i32 } %701, 2, !dbg !38
  %818 = bitcast i32 %817 to <2 x bfloat>, !dbg !38
  %819 = extractvalue { i32, i32, i32, i32 } %701, 1, !dbg !38
  %820 = bitcast i32 %819 to <2 x bfloat>, !dbg !38
  %821 = extractvalue { i32, i32, i32, i32 } %701, 0, !dbg !38
  %822 = bitcast i32 %821 to <2 x bfloat>, !dbg !38
  %823 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !47
  %824 = bitcast i32 %823 to <2 x bfloat>, !dbg !47
  %825 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !47
  %826 = bitcast i32 %825 to <2 x bfloat>, !dbg !47
  %827 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !47
  %828 = bitcast i32 %827 to <2 x bfloat>, !dbg !47
  %829 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !47
  %830 = bitcast i32 %829 to <2 x bfloat>, !dbg !47
  %831 = extractvalue { i32, i32, i32, i32 } %767, 3, !dbg !47
  %832 = bitcast i32 %831 to <2 x bfloat>, !dbg !47
  %833 = extractvalue { i32, i32, i32, i32 } %767, 2, !dbg !47
  %834 = bitcast i32 %833 to <2 x bfloat>, !dbg !47
  %835 = extractvalue { i32, i32, i32, i32 } %767, 1, !dbg !47
  %836 = bitcast i32 %835 to <2 x bfloat>, !dbg !47
  %837 = extractvalue { i32, i32, i32, i32 } %767, 0, !dbg !47
  %838 = bitcast i32 %837 to <2 x bfloat>, !dbg !47
  %839 = extractvalue { i32, i32, i32, i32 } %766, 3, !dbg !47
  %840 = bitcast i32 %839 to <2 x bfloat>, !dbg !47
  %841 = extractvalue { i32, i32, i32, i32 } %766, 2, !dbg !47
  %842 = bitcast i32 %841 to <2 x bfloat>, !dbg !47
  %843 = extractvalue { i32, i32, i32, i32 } %766, 1, !dbg !47
  %844 = bitcast i32 %843 to <2 x bfloat>, !dbg !47
  %845 = extractvalue { i32, i32, i32, i32 } %766, 0, !dbg !47
  %846 = bitcast i32 %845 to <2 x bfloat>, !dbg !47
  %847 = extractvalue { i32, i32, i32, i32 } %765, 3, !dbg !47
  %848 = bitcast i32 %847 to <2 x bfloat>, !dbg !47
  %849 = extractvalue { i32, i32, i32, i32 } %765, 2, !dbg !47
  %850 = bitcast i32 %849 to <2 x bfloat>, !dbg !47
  %851 = extractvalue { i32, i32, i32, i32 } %765, 1, !dbg !47
  %852 = bitcast i32 %851 to <2 x bfloat>, !dbg !47
  %853 = extractvalue { i32, i32, i32, i32 } %765, 0, !dbg !47
  %854 = bitcast i32 %853 to <2 x bfloat>, !dbg !47
  %855 = extractvalue { i32, i32, i32, i32 } %760, 3, !dbg !45
  %856 = extractvalue { i32, i32, i32, i32 } %760, 2, !dbg !45
  %857 = extractvalue { i32, i32, i32, i32 } %760, 1, !dbg !45
  %858 = extractvalue { i32, i32, i32, i32 } %760, 0, !dbg !45
  %859 = extractvalue { i32, i32, i32, i32 } %759, 3, !dbg !45
  %860 = extractvalue { i32, i32, i32, i32 } %759, 2, !dbg !45
  %861 = extractvalue { i32, i32, i32, i32 } %759, 1, !dbg !45
  %862 = extractvalue { i32, i32, i32, i32 } %759, 0, !dbg !45
  %863 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !45
  %864 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !45
  %865 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !45
  %866 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !45
  %867 = extractvalue { i32, i32, i32, i32 } %757, 3, !dbg !45
  %868 = extractvalue { i32, i32, i32, i32 } %757, 2, !dbg !45
  %869 = extractvalue { i32, i32, i32, i32 } %757, 1, !dbg !45
  %870 = extractvalue { i32, i32, i32, i32 } %757, 0, !dbg !45
  %871 = extractvalue { i32, i32, i32, i32 } %756, 3, !dbg !45
  %872 = extractvalue { i32, i32, i32, i32 } %756, 2, !dbg !45
  %873 = extractvalue { i32, i32, i32, i32 } %756, 1, !dbg !45
  %874 = extractvalue { i32, i32, i32, i32 } %756, 0, !dbg !45
  %875 = extractvalue { i32, i32, i32, i32 } %755, 3, !dbg !45
  %876 = extractvalue { i32, i32, i32, i32 } %755, 2, !dbg !45
  %877 = extractvalue { i32, i32, i32, i32 } %755, 1, !dbg !45
  %878 = extractvalue { i32, i32, i32, i32 } %755, 0, !dbg !45
  %879 = extractvalue { i32, i32, i32, i32 } %754, 3, !dbg !45
  %880 = extractvalue { i32, i32, i32, i32 } %754, 2, !dbg !45
  %881 = extractvalue { i32, i32, i32, i32 } %754, 1, !dbg !45
  %882 = extractvalue { i32, i32, i32, i32 } %754, 0, !dbg !45
  %883 = extractvalue { i32, i32, i32, i32 } %753, 3, !dbg !45
  %884 = extractvalue { i32, i32, i32, i32 } %753, 2, !dbg !45
  %885 = extractvalue { i32, i32, i32, i32 } %753, 1, !dbg !45
  %886 = extractvalue { i32, i32, i32, i32 } %753, 0, !dbg !45
  %887 = extractvalue { i32, i32, i32, i32 } %738, 3, !dbg !43
  %888 = bitcast i32 %887 to <2 x bfloat>, !dbg !43
  %889 = extractvalue { i32, i32, i32, i32 } %738, 2, !dbg !43
  %890 = bitcast i32 %889 to <2 x bfloat>, !dbg !43
  %891 = extractvalue { i32, i32, i32, i32 } %738, 1, !dbg !43
  %892 = bitcast i32 %891 to <2 x bfloat>, !dbg !43
  %893 = extractvalue { i32, i32, i32, i32 } %738, 0, !dbg !43
  %894 = bitcast i32 %893 to <2 x bfloat>, !dbg !43
  %895 = extractvalue { i32, i32, i32, i32 } %737, 3, !dbg !43
  %896 = bitcast i32 %895 to <2 x bfloat>, !dbg !43
  %897 = extractvalue { i32, i32, i32, i32 } %737, 2, !dbg !43
  %898 = bitcast i32 %897 to <2 x bfloat>, !dbg !43
  %899 = extractvalue { i32, i32, i32, i32 } %737, 1, !dbg !43
  %900 = bitcast i32 %899 to <2 x bfloat>, !dbg !43
  %901 = extractvalue { i32, i32, i32, i32 } %737, 0, !dbg !43
  %902 = bitcast i32 %901 to <2 x bfloat>, !dbg !43
  %903 = extractvalue { i32, i32, i32, i32 } %736, 3, !dbg !43
  %904 = bitcast i32 %903 to <2 x bfloat>, !dbg !43
  %905 = extractvalue { i32, i32, i32, i32 } %736, 2, !dbg !43
  %906 = bitcast i32 %905 to <2 x bfloat>, !dbg !43
  %907 = extractvalue { i32, i32, i32, i32 } %736, 1, !dbg !43
  %908 = bitcast i32 %907 to <2 x bfloat>, !dbg !43
  %909 = extractvalue { i32, i32, i32, i32 } %736, 0, !dbg !43
  %910 = bitcast i32 %909 to <2 x bfloat>, !dbg !43
  %911 = extractvalue { i32, i32, i32, i32 } %735, 3, !dbg !43
  %912 = bitcast i32 %911 to <2 x bfloat>, !dbg !43
  %913 = extractvalue { i32, i32, i32, i32 } %735, 2, !dbg !43
  %914 = bitcast i32 %913 to <2 x bfloat>, !dbg !43
  %915 = extractvalue { i32, i32, i32, i32 } %735, 1, !dbg !43
  %916 = bitcast i32 %915 to <2 x bfloat>, !dbg !43
  %917 = extractvalue { i32, i32, i32, i32 } %735, 0, !dbg !43
  %918 = bitcast i32 %917 to <2 x bfloat>, !dbg !43
  %919 = extractvalue { i32, i32, i32, i32 } %730, 3, !dbg !41
  %920 = extractvalue { i32, i32, i32, i32 } %730, 2, !dbg !41
  %921 = extractvalue { i32, i32, i32, i32 } %730, 1, !dbg !41
  %922 = extractvalue { i32, i32, i32, i32 } %730, 0, !dbg !41
  %923 = extractvalue { i32, i32, i32, i32 } %729, 3, !dbg !41
  %924 = extractvalue { i32, i32, i32, i32 } %729, 2, !dbg !41
  %925 = extractvalue { i32, i32, i32, i32 } %729, 1, !dbg !41
  %926 = extractvalue { i32, i32, i32, i32 } %729, 0, !dbg !41
  %927 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !41
  %928 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !41
  %929 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !41
  %930 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !41
  %931 = extractvalue { i32, i32, i32, i32 } %727, 3, !dbg !41
  %932 = extractvalue { i32, i32, i32, i32 } %727, 2, !dbg !41
  %933 = extractvalue { i32, i32, i32, i32 } %727, 1, !dbg !41
  %934 = extractvalue { i32, i32, i32, i32 } %727, 0, !dbg !41
  %935 = extractvalue { i32, i32, i32, i32 } %726, 3, !dbg !41
  %936 = extractvalue { i32, i32, i32, i32 } %726, 2, !dbg !41
  %937 = extractvalue { i32, i32, i32, i32 } %726, 1, !dbg !41
  %938 = extractvalue { i32, i32, i32, i32 } %726, 0, !dbg !41
  %939 = extractvalue { i32, i32, i32, i32 } %725, 3, !dbg !41
  %940 = extractvalue { i32, i32, i32, i32 } %725, 2, !dbg !41
  %941 = extractvalue { i32, i32, i32, i32 } %725, 1, !dbg !41
  %942 = extractvalue { i32, i32, i32, i32 } %725, 0, !dbg !41
  %943 = extractvalue { i32, i32, i32, i32 } %724, 3, !dbg !41
  %944 = extractvalue { i32, i32, i32, i32 } %724, 2, !dbg !41
  %945 = extractvalue { i32, i32, i32, i32 } %724, 1, !dbg !41
  %946 = extractvalue { i32, i32, i32, i32 } %724, 0, !dbg !41
  %947 = extractvalue { i32, i32, i32, i32 } %723, 3, !dbg !41
  %948 = extractvalue { i32, i32, i32, i32 } %723, 2, !dbg !41
  %949 = extractvalue { i32, i32, i32, i32 } %723, 1, !dbg !41
  %950 = extractvalue { i32, i32, i32, i32 } %723, 0, !dbg !41
  %951 = shl i32 %18, 3, !dbg !11
  %952 = and i32 %951, 1016, !dbg !11
  %953 = add i32 %31, 3072, !dbg !11
  %954 = or disjoint i32 %953, %952, !dbg !14
  %955 = add i32 %31, 2048, !dbg !11
  %956 = or disjoint i32 %955, %952, !dbg !14
  %957 = or disjoint i32 %952, 1024, !dbg !11
  %958 = add i32 %957, %31, !dbg !14
  %959 = or disjoint i32 %952, %31, !dbg !14
  %960 = sext i32 %959 to i64, !dbg !51
  %961 = getelementptr bfloat, ptr addrspace(1) %3, i64 %960, !dbg !51
  %962 = sext i32 %958 to i64, !dbg !51
  %963 = getelementptr bfloat, ptr addrspace(1) %3, i64 %962, !dbg !51
  %964 = sext i32 %956 to i64, !dbg !51
  %965 = getelementptr bfloat, ptr addrspace(1) %3, i64 %964, !dbg !51
  %966 = sext i32 %954 to i64, !dbg !51
  %967 = getelementptr bfloat, ptr addrspace(1) %3, i64 %966, !dbg !51
  %968 = getelementptr bfloat, ptr addrspace(1) %3, i64 %36, !dbg !51
  %969 = getelementptr bfloat, ptr addrspace(1) %3, i64 %38, !dbg !51
  %970 = getelementptr bfloat, ptr addrspace(1) %3, i64 %40, !dbg !51
  %971 = getelementptr bfloat, ptr addrspace(1) %3, i64 %42, !dbg !51
  %972 = fpext <2 x bfloat> %822 to <2 x float>, !dbg !52
  %973 = insertelement <2 x float> poison, float %699, i64 0, !dbg !53
  %974 = shufflevector <2 x float> %973, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %975 = fsub <2 x float> %972, %974, !dbg !53
  %976 = fpext <2 x bfloat> %854 to <2 x float>, !dbg !54
  %977 = insertelement <2 x i32> poison, i32 %886, i64 0, !dbg !45
  %978 = insertelement <2 x i32> %977, i32 %885, i64 1, !dbg !45
  %979 = bitcast <2 x i32> %978 to <2 x float>, !dbg !45
  %980 = fpext <2 x bfloat> %918 to <2 x float>, !dbg !55
  %981 = insertelement <2 x i32> poison, i32 %950, i64 0, !dbg !41
  %982 = insertelement <2 x i32> %981, i32 %949, i64 1, !dbg !41
  %983 = bitcast <2 x i32> %982 to <2 x float>, !dbg !41
  %984 = insertelement <2 x float> poison, float %.0.i91, i64 0, !dbg !56
  %985 = shufflevector <2 x float> %984, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %986 = fmul <2 x float> %975, %985, !dbg !56
  %987 = fadd <2 x float> %983, %980, !dbg !57
  %988 = fadd <2 x float> %987, splat (float 1.000000e+00), !dbg !58
  %989 = fmul <2 x float> %988, %986, !dbg !59
  %990 = fadd <2 x float> %979, %976, !dbg !60
  %991 = fadd <2 x float> %990, %989, !dbg !61
  %992 = extractelement <2 x float> %991, i64 0, !dbg !62
  %993 = select i1 %17, float %992, float 0x7FF0000000000000, !dbg !63
  %994 = extractelement <2 x float> %991, i64 1, !dbg !62
  %995 = select i1 %17, float %994, float 0x7FF0000000000000, !dbg !63
  %996 = select i1 %17, float %992, float 0xFFF0000000000000, !dbg !62
  %997 = select i1 %17, float %994, float 0xFFF0000000000000, !dbg !62
  %998 = fptrunc <2 x float> %991 to <2 x bfloat>, !dbg !64
  %999 = fpext <2 x bfloat> %820 to <2 x float>, !dbg !52
  %1000 = fsub <2 x float> %999, %974, !dbg !53
  %1001 = fpext <2 x bfloat> %852 to <2 x float>, !dbg !54
  %1002 = insertelement <2 x i32> poison, i32 %884, i64 0, !dbg !45
  %1003 = insertelement <2 x i32> %1002, i32 %883, i64 1, !dbg !45
  %1004 = bitcast <2 x i32> %1003 to <2 x float>, !dbg !45
  %1005 = fpext <2 x bfloat> %916 to <2 x float>, !dbg !55
  %1006 = insertelement <2 x i32> poison, i32 %948, i64 0, !dbg !41
  %1007 = insertelement <2 x i32> %1006, i32 %947, i64 1, !dbg !41
  %1008 = bitcast <2 x i32> %1007 to <2 x float>, !dbg !41
  %1009 = fmul <2 x float> %1000, %985, !dbg !56
  %1010 = fadd <2 x float> %1008, %1005, !dbg !57
  %1011 = fadd <2 x float> %1010, splat (float 1.000000e+00), !dbg !58
  %1012 = fmul <2 x float> %1011, %1009, !dbg !59
  %1013 = fadd <2 x float> %1004, %1001, !dbg !60
  %1014 = fadd <2 x float> %1013, %1012, !dbg !61
  %1015 = extractelement <2 x float> %1014, i64 0, !dbg !62
  %1016 = select i1 %17, float %1015, float 0x7FF0000000000000, !dbg !63
  %1017 = extractelement <2 x float> %1014, i64 1, !dbg !62
  %1018 = select i1 %17, float %1017, float 0x7FF0000000000000, !dbg !63
  %1019 = select i1 %17, float %1015, float 0xFFF0000000000000, !dbg !62
  %1020 = select i1 %17, float %1017, float 0xFFF0000000000000, !dbg !62
  %1021 = fptrunc <2 x float> %1014 to <2 x bfloat>, !dbg !64
  %1022 = fpext <2 x bfloat> %818 to <2 x float>, !dbg !52
  %1023 = fsub <2 x float> %1022, %974, !dbg !53
  %1024 = fpext <2 x bfloat> %850 to <2 x float>, !dbg !54
  %1025 = insertelement <2 x i32> poison, i32 %882, i64 0, !dbg !45
  %1026 = insertelement <2 x i32> %1025, i32 %881, i64 1, !dbg !45
  %1027 = bitcast <2 x i32> %1026 to <2 x float>, !dbg !45
  %1028 = fpext <2 x bfloat> %914 to <2 x float>, !dbg !55
  %1029 = insertelement <2 x i32> poison, i32 %946, i64 0, !dbg !41
  %1030 = insertelement <2 x i32> %1029, i32 %945, i64 1, !dbg !41
  %1031 = bitcast <2 x i32> %1030 to <2 x float>, !dbg !41
  %1032 = fmul <2 x float> %1023, %985, !dbg !56
  %1033 = fadd <2 x float> %1031, %1028, !dbg !57
  %1034 = fadd <2 x float> %1033, splat (float 1.000000e+00), !dbg !58
  %1035 = fmul <2 x float> %1034, %1032, !dbg !59
  %1036 = fadd <2 x float> %1027, %1024, !dbg !60
  %1037 = fadd <2 x float> %1036, %1035, !dbg !61
  %1038 = extractelement <2 x float> %1037, i64 0, !dbg !62
  %1039 = select i1 %17, float %1038, float 0x7FF0000000000000, !dbg !63
  %1040 = extractelement <2 x float> %1037, i64 1, !dbg !62
  %1041 = select i1 %17, float %1040, float 0x7FF0000000000000, !dbg !63
  %1042 = select i1 %17, float %1038, float 0xFFF0000000000000, !dbg !62
  %1043 = select i1 %17, float %1040, float 0xFFF0000000000000, !dbg !62
  %1044 = fptrunc <2 x float> %1037 to <2 x bfloat>, !dbg !64
  %1045 = fpext <2 x bfloat> %816 to <2 x float>, !dbg !52
  %1046 = fsub <2 x float> %1045, %974, !dbg !53
  %1047 = fpext <2 x bfloat> %848 to <2 x float>, !dbg !54
  %1048 = insertelement <2 x i32> poison, i32 %880, i64 0, !dbg !45
  %1049 = insertelement <2 x i32> %1048, i32 %879, i64 1, !dbg !45
  %1050 = bitcast <2 x i32> %1049 to <2 x float>, !dbg !45
  %1051 = fpext <2 x bfloat> %912 to <2 x float>, !dbg !55
  %1052 = insertelement <2 x i32> poison, i32 %944, i64 0, !dbg !41
  %1053 = insertelement <2 x i32> %1052, i32 %943, i64 1, !dbg !41
  %1054 = bitcast <2 x i32> %1053 to <2 x float>, !dbg !41
  %1055 = fmul <2 x float> %1046, %985, !dbg !56
  %1056 = fadd <2 x float> %1054, %1051, !dbg !57
  %1057 = fadd <2 x float> %1056, splat (float 1.000000e+00), !dbg !58
  %1058 = fmul <2 x float> %1057, %1055, !dbg !59
  %1059 = fadd <2 x float> %1050, %1047, !dbg !60
  %1060 = fadd <2 x float> %1059, %1058, !dbg !61
  %1061 = extractelement <2 x float> %1060, i64 0, !dbg !62
  %1062 = select i1 %17, float %1061, float 0x7FF0000000000000, !dbg !63
  %1063 = extractelement <2 x float> %1060, i64 1, !dbg !62
  %1064 = select i1 %17, float %1063, float 0x7FF0000000000000, !dbg !63
  %1065 = select i1 %17, float %1061, float 0xFFF0000000000000, !dbg !62
  %1066 = select i1 %17, float %1063, float 0xFFF0000000000000, !dbg !62
  %1067 = fptrunc <2 x float> %1060 to <2 x bfloat>, !dbg !64
  %1068 = fpext <2 x bfloat> %814 to <2 x float>, !dbg !52
  %1069 = fsub <2 x float> %1068, %974, !dbg !53
  %1070 = fpext <2 x bfloat> %846 to <2 x float>, !dbg !54
  %1071 = insertelement <2 x i32> poison, i32 %878, i64 0, !dbg !45
  %1072 = insertelement <2 x i32> %1071, i32 %877, i64 1, !dbg !45
  %1073 = bitcast <2 x i32> %1072 to <2 x float>, !dbg !45
  %1074 = fpext <2 x bfloat> %910 to <2 x float>, !dbg !55
  %1075 = insertelement <2 x i32> poison, i32 %942, i64 0, !dbg !41
  %1076 = insertelement <2 x i32> %1075, i32 %941, i64 1, !dbg !41
  %1077 = bitcast <2 x i32> %1076 to <2 x float>, !dbg !41
  %1078 = fmul <2 x float> %1069, %985, !dbg !56
  %1079 = fadd <2 x float> %1077, %1074, !dbg !57
  %1080 = fadd <2 x float> %1079, splat (float 1.000000e+00), !dbg !58
  %1081 = fmul <2 x float> %1080, %1078, !dbg !59
  %1082 = fadd <2 x float> %1073, %1070, !dbg !60
  %1083 = fadd <2 x float> %1082, %1081, !dbg !61
  %1084 = extractelement <2 x float> %1083, i64 0, !dbg !62
  %1085 = select i1 %17, float %1084, float 0x7FF0000000000000, !dbg !63
  %1086 = extractelement <2 x float> %1083, i64 1, !dbg !62
  %1087 = select i1 %17, float %1086, float 0x7FF0000000000000, !dbg !63
  %1088 = select i1 %17, float %1084, float 0xFFF0000000000000, !dbg !62
  %1089 = select i1 %17, float %1086, float 0xFFF0000000000000, !dbg !62
  %1090 = fptrunc <2 x float> %1083 to <2 x bfloat>, !dbg !64
  %1091 = fpext <2 x bfloat> %812 to <2 x float>, !dbg !52
  %1092 = fsub <2 x float> %1091, %974, !dbg !53
  %1093 = fpext <2 x bfloat> %844 to <2 x float>, !dbg !54
  %1094 = insertelement <2 x i32> poison, i32 %876, i64 0, !dbg !45
  %1095 = insertelement <2 x i32> %1094, i32 %875, i64 1, !dbg !45
  %1096 = bitcast <2 x i32> %1095 to <2 x float>, !dbg !45
  %1097 = fpext <2 x bfloat> %908 to <2 x float>, !dbg !55
  %1098 = insertelement <2 x i32> poison, i32 %940, i64 0, !dbg !41
  %1099 = insertelement <2 x i32> %1098, i32 %939, i64 1, !dbg !41
  %1100 = bitcast <2 x i32> %1099 to <2 x float>, !dbg !41
  %1101 = fmul <2 x float> %1092, %985, !dbg !56
  %1102 = fadd <2 x float> %1100, %1097, !dbg !57
  %1103 = fadd <2 x float> %1102, splat (float 1.000000e+00), !dbg !58
  %1104 = fmul <2 x float> %1103, %1101, !dbg !59
  %1105 = fadd <2 x float> %1096, %1093, !dbg !60
  %1106 = fadd <2 x float> %1105, %1104, !dbg !61
  %1107 = extractelement <2 x float> %1106, i64 0, !dbg !62
  %1108 = select i1 %17, float %1107, float 0x7FF0000000000000, !dbg !63
  %1109 = extractelement <2 x float> %1106, i64 1, !dbg !62
  %1110 = select i1 %17, float %1109, float 0x7FF0000000000000, !dbg !63
  %1111 = select i1 %17, float %1107, float 0xFFF0000000000000, !dbg !62
  %1112 = select i1 %17, float %1109, float 0xFFF0000000000000, !dbg !62
  %1113 = fptrunc <2 x float> %1106 to <2 x bfloat>, !dbg !64
  %1114 = fpext <2 x bfloat> %810 to <2 x float>, !dbg !52
  %1115 = fsub <2 x float> %1114, %974, !dbg !53
  %1116 = fpext <2 x bfloat> %842 to <2 x float>, !dbg !54
  %1117 = insertelement <2 x i32> poison, i32 %874, i64 0, !dbg !45
  %1118 = insertelement <2 x i32> %1117, i32 %873, i64 1, !dbg !45
  %1119 = bitcast <2 x i32> %1118 to <2 x float>, !dbg !45
  %1120 = fpext <2 x bfloat> %906 to <2 x float>, !dbg !55
  %1121 = insertelement <2 x i32> poison, i32 %938, i64 0, !dbg !41
  %1122 = insertelement <2 x i32> %1121, i32 %937, i64 1, !dbg !41
  %1123 = bitcast <2 x i32> %1122 to <2 x float>, !dbg !41
  %1124 = fmul <2 x float> %1115, %985, !dbg !56
  %1125 = fadd <2 x float> %1123, %1120, !dbg !57
  %1126 = fadd <2 x float> %1125, splat (float 1.000000e+00), !dbg !58
  %1127 = fmul <2 x float> %1126, %1124, !dbg !59
  %1128 = fadd <2 x float> %1119, %1116, !dbg !60
  %1129 = fadd <2 x float> %1128, %1127, !dbg !61
  %1130 = extractelement <2 x float> %1129, i64 0, !dbg !62
  %1131 = select i1 %17, float %1130, float 0x7FF0000000000000, !dbg !63
  %1132 = extractelement <2 x float> %1129, i64 1, !dbg !62
  %1133 = select i1 %17, float %1132, float 0x7FF0000000000000, !dbg !63
  %1134 = select i1 %17, float %1130, float 0xFFF0000000000000, !dbg !62
  %1135 = select i1 %17, float %1132, float 0xFFF0000000000000, !dbg !62
  %1136 = fptrunc <2 x float> %1129 to <2 x bfloat>, !dbg !64
  %1137 = fpext <2 x bfloat> %808 to <2 x float>, !dbg !52
  %1138 = fsub <2 x float> %1137, %974, !dbg !53
  %1139 = fpext <2 x bfloat> %840 to <2 x float>, !dbg !54
  %1140 = insertelement <2 x i32> poison, i32 %872, i64 0, !dbg !45
  %1141 = insertelement <2 x i32> %1140, i32 %871, i64 1, !dbg !45
  %1142 = bitcast <2 x i32> %1141 to <2 x float>, !dbg !45
  %1143 = fpext <2 x bfloat> %904 to <2 x float>, !dbg !55
  %1144 = insertelement <2 x i32> poison, i32 %936, i64 0, !dbg !41
  %1145 = insertelement <2 x i32> %1144, i32 %935, i64 1, !dbg !41
  %1146 = bitcast <2 x i32> %1145 to <2 x float>, !dbg !41
  %1147 = fmul <2 x float> %1138, %985, !dbg !56
  %1148 = fadd <2 x float> %1146, %1143, !dbg !57
  %1149 = fadd <2 x float> %1148, splat (float 1.000000e+00), !dbg !58
  %1150 = fmul <2 x float> %1149, %1147, !dbg !59
  %1151 = fadd <2 x float> %1142, %1139, !dbg !60
  %1152 = fadd <2 x float> %1151, %1150, !dbg !61
  %1153 = extractelement <2 x float> %1152, i64 0, !dbg !62
  %1154 = select i1 %17, float %1153, float 0x7FF0000000000000, !dbg !63
  %1155 = extractelement <2 x float> %1152, i64 1, !dbg !62
  %1156 = select i1 %17, float %1155, float 0x7FF0000000000000, !dbg !63
  %1157 = select i1 %17, float %1153, float 0xFFF0000000000000, !dbg !62
  %1158 = select i1 %17, float %1155, float 0xFFF0000000000000, !dbg !62
  %1159 = fptrunc <2 x float> %1152 to <2 x bfloat>, !dbg !64
  %1160 = fpext <2 x bfloat> %806 to <2 x float>, !dbg !52
  %1161 = fsub <2 x float> %1160, %974, !dbg !53
  %1162 = fpext <2 x bfloat> %838 to <2 x float>, !dbg !54
  %1163 = insertelement <2 x i32> poison, i32 %870, i64 0, !dbg !45
  %1164 = insertelement <2 x i32> %1163, i32 %869, i64 1, !dbg !45
  %1165 = bitcast <2 x i32> %1164 to <2 x float>, !dbg !45
  %1166 = fpext <2 x bfloat> %902 to <2 x float>, !dbg !55
  %1167 = insertelement <2 x i32> poison, i32 %934, i64 0, !dbg !41
  %1168 = insertelement <2 x i32> %1167, i32 %933, i64 1, !dbg !41
  %1169 = bitcast <2 x i32> %1168 to <2 x float>, !dbg !41
  %1170 = fmul <2 x float> %1161, %985, !dbg !56
  %1171 = fadd <2 x float> %1169, %1166, !dbg !57
  %1172 = fadd <2 x float> %1171, splat (float 1.000000e+00), !dbg !58
  %1173 = fmul <2 x float> %1172, %1170, !dbg !59
  %1174 = fadd <2 x float> %1165, %1162, !dbg !60
  %1175 = fadd <2 x float> %1174, %1173, !dbg !61
  %1176 = extractelement <2 x float> %1175, i64 0, !dbg !62
  %1177 = select i1 %44, float %1176, float 0x7FF0000000000000, !dbg !63
  %1178 = extractelement <2 x float> %1175, i64 1, !dbg !62
  %1179 = select i1 %44, float %1178, float 0x7FF0000000000000, !dbg !63
  %1180 = select i1 %44, float %1176, float 0xFFF0000000000000, !dbg !62
  %1181 = select i1 %44, float %1178, float 0xFFF0000000000000, !dbg !62
  %1182 = fptrunc <2 x float> %1175 to <2 x bfloat>, !dbg !64
  %1183 = fpext <2 x bfloat> %804 to <2 x float>, !dbg !52
  %1184 = fsub <2 x float> %1183, %974, !dbg !53
  %1185 = fpext <2 x bfloat> %836 to <2 x float>, !dbg !54
  %1186 = insertelement <2 x i32> poison, i32 %868, i64 0, !dbg !45
  %1187 = insertelement <2 x i32> %1186, i32 %867, i64 1, !dbg !45
  %1188 = bitcast <2 x i32> %1187 to <2 x float>, !dbg !45
  %1189 = fpext <2 x bfloat> %900 to <2 x float>, !dbg !55
  %1190 = insertelement <2 x i32> poison, i32 %932, i64 0, !dbg !41
  %1191 = insertelement <2 x i32> %1190, i32 %931, i64 1, !dbg !41
  %1192 = bitcast <2 x i32> %1191 to <2 x float>, !dbg !41
  %1193 = fmul <2 x float> %1184, %985, !dbg !56
  %1194 = fadd <2 x float> %1192, %1189, !dbg !57
  %1195 = fadd <2 x float> %1194, splat (float 1.000000e+00), !dbg !58
  %1196 = fmul <2 x float> %1195, %1193, !dbg !59
  %1197 = fadd <2 x float> %1188, %1185, !dbg !60
  %1198 = fadd <2 x float> %1197, %1196, !dbg !61
  %1199 = extractelement <2 x float> %1198, i64 0, !dbg !62
  %1200 = select i1 %44, float %1199, float 0x7FF0000000000000, !dbg !63
  %1201 = extractelement <2 x float> %1198, i64 1, !dbg !62
  %1202 = select i1 %44, float %1201, float 0x7FF0000000000000, !dbg !63
  %1203 = select i1 %44, float %1199, float 0xFFF0000000000000, !dbg !62
  %1204 = select i1 %44, float %1201, float 0xFFF0000000000000, !dbg !62
  %1205 = fptrunc <2 x float> %1198 to <2 x bfloat>, !dbg !64
  %1206 = fpext <2 x bfloat> %802 to <2 x float>, !dbg !52
  %1207 = fsub <2 x float> %1206, %974, !dbg !53
  %1208 = fpext <2 x bfloat> %834 to <2 x float>, !dbg !54
  %1209 = insertelement <2 x i32> poison, i32 %866, i64 0, !dbg !45
  %1210 = insertelement <2 x i32> %1209, i32 %865, i64 1, !dbg !45
  %1211 = bitcast <2 x i32> %1210 to <2 x float>, !dbg !45
  %1212 = fpext <2 x bfloat> %898 to <2 x float>, !dbg !55
  %1213 = insertelement <2 x i32> poison, i32 %930, i64 0, !dbg !41
  %1214 = insertelement <2 x i32> %1213, i32 %929, i64 1, !dbg !41
  %1215 = bitcast <2 x i32> %1214 to <2 x float>, !dbg !41
  %1216 = fmul <2 x float> %1207, %985, !dbg !56
  %1217 = fadd <2 x float> %1215, %1212, !dbg !57
  %1218 = fadd <2 x float> %1217, splat (float 1.000000e+00), !dbg !58
  %1219 = fmul <2 x float> %1218, %1216, !dbg !59
  %1220 = fadd <2 x float> %1211, %1208, !dbg !60
  %1221 = fadd <2 x float> %1220, %1219, !dbg !61
  %1222 = extractelement <2 x float> %1221, i64 0, !dbg !62
  %1223 = select i1 %44, float %1222, float 0x7FF0000000000000, !dbg !63
  %1224 = extractelement <2 x float> %1221, i64 1, !dbg !62
  %1225 = select i1 %44, float %1224, float 0x7FF0000000000000, !dbg !63
  %1226 = select i1 %44, float %1222, float 0xFFF0000000000000, !dbg !62
  %1227 = select i1 %44, float %1224, float 0xFFF0000000000000, !dbg !62
  %1228 = fptrunc <2 x float> %1221 to <2 x bfloat>, !dbg !64
  %1229 = fpext <2 x bfloat> %800 to <2 x float>, !dbg !52
  %1230 = fsub <2 x float> %1229, %974, !dbg !53
  %1231 = fpext <2 x bfloat> %832 to <2 x float>, !dbg !54
  %1232 = insertelement <2 x i32> poison, i32 %864, i64 0, !dbg !45
  %1233 = insertelement <2 x i32> %1232, i32 %863, i64 1, !dbg !45
  %1234 = bitcast <2 x i32> %1233 to <2 x float>, !dbg !45
  %1235 = fpext <2 x bfloat> %896 to <2 x float>, !dbg !55
  %1236 = insertelement <2 x i32> poison, i32 %928, i64 0, !dbg !41
  %1237 = insertelement <2 x i32> %1236, i32 %927, i64 1, !dbg !41
  %1238 = bitcast <2 x i32> %1237 to <2 x float>, !dbg !41
  %1239 = fmul <2 x float> %1230, %985, !dbg !56
  %1240 = fadd <2 x float> %1238, %1235, !dbg !57
  %1241 = fadd <2 x float> %1240, splat (float 1.000000e+00), !dbg !58
  %1242 = fmul <2 x float> %1241, %1239, !dbg !59
  %1243 = fadd <2 x float> %1234, %1231, !dbg !60
  %1244 = fadd <2 x float> %1243, %1242, !dbg !61
  %1245 = extractelement <2 x float> %1244, i64 0, !dbg !62
  %1246 = select i1 %44, float %1245, float 0x7FF0000000000000, !dbg !63
  %1247 = extractelement <2 x float> %1244, i64 1, !dbg !62
  %1248 = select i1 %44, float %1247, float 0x7FF0000000000000, !dbg !63
  %1249 = select i1 %44, float %1245, float 0xFFF0000000000000, !dbg !62
  %1250 = select i1 %44, float %1247, float 0xFFF0000000000000, !dbg !62
  %1251 = fptrunc <2 x float> %1244 to <2 x bfloat>, !dbg !64
  %1252 = fpext <2 x bfloat> %798 to <2 x float>, !dbg !52
  %1253 = fsub <2 x float> %1252, %974, !dbg !53
  %1254 = fpext <2 x bfloat> %830 to <2 x float>, !dbg !54
  %1255 = insertelement <2 x i32> poison, i32 %862, i64 0, !dbg !45
  %1256 = insertelement <2 x i32> %1255, i32 %861, i64 1, !dbg !45
  %1257 = bitcast <2 x i32> %1256 to <2 x float>, !dbg !45
  %1258 = fpext <2 x bfloat> %894 to <2 x float>, !dbg !55
  %1259 = insertelement <2 x i32> poison, i32 %926, i64 0, !dbg !41
  %1260 = insertelement <2 x i32> %1259, i32 %925, i64 1, !dbg !41
  %1261 = bitcast <2 x i32> %1260 to <2 x float>, !dbg !41
  %1262 = fmul <2 x float> %1253, %985, !dbg !56
  %1263 = fadd <2 x float> %1261, %1258, !dbg !57
  %1264 = fadd <2 x float> %1263, splat (float 1.000000e+00), !dbg !58
  %1265 = fmul <2 x float> %1264, %1262, !dbg !59
  %1266 = fadd <2 x float> %1257, %1254, !dbg !60
  %1267 = fadd <2 x float> %1266, %1265, !dbg !61
  %1268 = extractelement <2 x float> %1267, i64 0, !dbg !62
  %1269 = select i1 %44, float %1268, float 0x7FF0000000000000, !dbg !63
  %1270 = extractelement <2 x float> %1267, i64 1, !dbg !62
  %1271 = select i1 %44, float %1270, float 0x7FF0000000000000, !dbg !63
  %1272 = select i1 %44, float %1268, float 0xFFF0000000000000, !dbg !62
  %1273 = select i1 %44, float %1270, float 0xFFF0000000000000, !dbg !62
  %1274 = fptrunc <2 x float> %1267 to <2 x bfloat>, !dbg !64
  %1275 = fpext <2 x bfloat> %796 to <2 x float>, !dbg !52
  %1276 = fsub <2 x float> %1275, %974, !dbg !53
  %1277 = fpext <2 x bfloat> %828 to <2 x float>, !dbg !54
  %1278 = insertelement <2 x i32> poison, i32 %860, i64 0, !dbg !45
  %1279 = insertelement <2 x i32> %1278, i32 %859, i64 1, !dbg !45
  %1280 = bitcast <2 x i32> %1279 to <2 x float>, !dbg !45
  %1281 = fpext <2 x bfloat> %892 to <2 x float>, !dbg !55
  %1282 = insertelement <2 x i32> poison, i32 %924, i64 0, !dbg !41
  %1283 = insertelement <2 x i32> %1282, i32 %923, i64 1, !dbg !41
  %1284 = bitcast <2 x i32> %1283 to <2 x float>, !dbg !41
  %1285 = fmul <2 x float> %1276, %985, !dbg !56
  %1286 = fadd <2 x float> %1284, %1281, !dbg !57
  %1287 = fadd <2 x float> %1286, splat (float 1.000000e+00), !dbg !58
  %1288 = fmul <2 x float> %1287, %1285, !dbg !59
  %1289 = fadd <2 x float> %1280, %1277, !dbg !60
  %1290 = fadd <2 x float> %1289, %1288, !dbg !61
  %1291 = extractelement <2 x float> %1290, i64 0, !dbg !62
  %1292 = select i1 %44, float %1291, float 0x7FF0000000000000, !dbg !63
  %1293 = extractelement <2 x float> %1290, i64 1, !dbg !62
  %1294 = select i1 %44, float %1293, float 0x7FF0000000000000, !dbg !63
  %1295 = select i1 %44, float %1291, float 0xFFF0000000000000, !dbg !62
  %1296 = select i1 %44, float %1293, float 0xFFF0000000000000, !dbg !62
  %1297 = fptrunc <2 x float> %1290 to <2 x bfloat>, !dbg !64
  %1298 = fpext <2 x bfloat> %794 to <2 x float>, !dbg !52
  %1299 = fsub <2 x float> %1298, %974, !dbg !53
  %1300 = fpext <2 x bfloat> %826 to <2 x float>, !dbg !54
  %1301 = insertelement <2 x i32> poison, i32 %858, i64 0, !dbg !45
  %1302 = insertelement <2 x i32> %1301, i32 %857, i64 1, !dbg !45
  %1303 = bitcast <2 x i32> %1302 to <2 x float>, !dbg !45
  %1304 = fpext <2 x bfloat> %890 to <2 x float>, !dbg !55
  %1305 = insertelement <2 x i32> poison, i32 %922, i64 0, !dbg !41
  %1306 = insertelement <2 x i32> %1305, i32 %921, i64 1, !dbg !41
  %1307 = bitcast <2 x i32> %1306 to <2 x float>, !dbg !41
  %1308 = fmul <2 x float> %1299, %985, !dbg !56
  %1309 = fadd <2 x float> %1307, %1304, !dbg !57
  %1310 = fadd <2 x float> %1309, splat (float 1.000000e+00), !dbg !58
  %1311 = fmul <2 x float> %1310, %1308, !dbg !59
  %1312 = fadd <2 x float> %1303, %1300, !dbg !60
  %1313 = fadd <2 x float> %1312, %1311, !dbg !61
  %1314 = extractelement <2 x float> %1313, i64 0, !dbg !62
  %1315 = select i1 %44, float %1314, float 0x7FF0000000000000, !dbg !63
  %1316 = extractelement <2 x float> %1313, i64 1, !dbg !62
  %1317 = select i1 %44, float %1316, float 0x7FF0000000000000, !dbg !63
  %1318 = select i1 %44, float %1314, float 0xFFF0000000000000, !dbg !62
  %1319 = select i1 %44, float %1316, float 0xFFF0000000000000, !dbg !62
  %1320 = fptrunc <2 x float> %1313 to <2 x bfloat>, !dbg !64
  %1321 = fpext <2 x bfloat> %792 to <2 x float>, !dbg !52
  %1322 = fsub <2 x float> %1321, %974, !dbg !53
  %1323 = fpext <2 x bfloat> %824 to <2 x float>, !dbg !54
  %1324 = insertelement <2 x i32> poison, i32 %856, i64 0, !dbg !45
  %1325 = insertelement <2 x i32> %1324, i32 %855, i64 1, !dbg !45
  %1326 = bitcast <2 x i32> %1325 to <2 x float>, !dbg !45
  %1327 = fpext <2 x bfloat> %888 to <2 x float>, !dbg !55
  %1328 = insertelement <2 x i32> poison, i32 %920, i64 0, !dbg !41
  %1329 = insertelement <2 x i32> %1328, i32 %919, i64 1, !dbg !41
  %1330 = bitcast <2 x i32> %1329 to <2 x float>, !dbg !41
  %1331 = fmul <2 x float> %1322, %985, !dbg !56
  %1332 = fadd <2 x float> %1330, %1327, !dbg !57
  %1333 = fadd <2 x float> %1332, splat (float 1.000000e+00), !dbg !58
  %1334 = fmul <2 x float> %1333, %1331, !dbg !59
  %1335 = fadd <2 x float> %1326, %1323, !dbg !60
  %1336 = fadd <2 x float> %1335, %1334, !dbg !61
  %1337 = extractelement <2 x float> %1336, i64 0, !dbg !62
  %1338 = select i1 %44, float %1337, float 0x7FF0000000000000, !dbg !63
  %1339 = extractelement <2 x float> %1336, i64 1, !dbg !62
  %1340 = select i1 %44, float %1339, float 0x7FF0000000000000, !dbg !63
  %1341 = select i1 %44, float %1337, float 0xFFF0000000000000, !dbg !62
  %1342 = select i1 %44, float %1339, float 0xFFF0000000000000, !dbg !62
  %1343 = fptrunc <2 x float> %1336 to <2 x bfloat>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1344 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22, !dbg !64
  %1345 = bitcast <2 x bfloat> %998 to i32, !dbg !64
  %1346 = bitcast <2 x bfloat> %1021 to i32, !dbg !64
  %1347 = bitcast <2 x bfloat> %1044 to i32, !dbg !64
  %1348 = bitcast <2 x bfloat> %1067 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1344, i32 %1345, i32 %1346, i32 %1347, i32 %1348, i1 true) #5, !dbg !64
  %1349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %24, !dbg !64
  %1350 = bitcast <2 x bfloat> %1090 to i32, !dbg !64
  %1351 = bitcast <2 x bfloat> %1113 to i32, !dbg !64
  %1352 = bitcast <2 x bfloat> %1136 to i32, !dbg !64
  %1353 = bitcast <2 x bfloat> %1159 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1349, i32 %1350, i32 %1351, i32 %1352, i32 %1353, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %952, !dbg !64
  %1355 = load <4 x i32>, ptr addrspace(3) %1354, align 16, !dbg !64
  %1356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %957, !dbg !64
  %1357 = load <4 x i32>, ptr addrspace(3) %1356, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1358 = bitcast <2 x bfloat> %1182 to i32, !dbg !64
  %1359 = bitcast <2 x bfloat> %1205 to i32, !dbg !64
  %1360 = bitcast <2 x bfloat> %1228 to i32, !dbg !64
  %1361 = bitcast <2 x bfloat> %1251 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1344, i32 %1358, i32 %1359, i32 %1360, i32 %1361, i1 true) #5, !dbg !64
  %1362 = bitcast <2 x bfloat> %1274 to i32, !dbg !64
  %1363 = bitcast <2 x bfloat> %1297 to i32, !dbg !64
  %1364 = bitcast <2 x bfloat> %1320 to i32, !dbg !64
  %1365 = bitcast <2 x bfloat> %1343 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1349, i32 %1362, i32 %1363, i32 %1364, i32 %1365, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1366 = load <4 x i32>, ptr addrspace(3) %1354, align 16, !dbg !64
  %1367 = load <4 x i32>, ptr addrspace(3) %1356, align 16, !dbg !64
  %.extract = extractelement <4 x i32> %1355, i64 0, !dbg !64
  %.extract94 = extractelement <4 x i32> %1355, i64 1, !dbg !64
  %.extract96 = extractelement <4 x i32> %1355, i64 2, !dbg !64
  %.extract98 = extractelement <4 x i32> %1355, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract94, i32 %.extract96, i32 %.extract98, ptr addrspace(1) %961, i1 %17) #5, !dbg !64
  %.extract100 = extractelement <4 x i32> %1357, i64 0, !dbg !64
  %.extract102 = extractelement <4 x i32> %1357, i64 1, !dbg !64
  %.extract104 = extractelement <4 x i32> %1357, i64 2, !dbg !64
  %.extract106 = extractelement <4 x i32> %1357, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract100, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %963, i1 %17) #5, !dbg !64
  %.extract108 = extractelement <4 x i32> %1366, i64 0, !dbg !64
  %.extract110 = extractelement <4 x i32> %1366, i64 1, !dbg !64
  %.extract112 = extractelement <4 x i32> %1366, i64 2, !dbg !64
  %.extract114 = extractelement <4 x i32> %1366, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %965, i1 %17) #5, !dbg !64
  %.extract116 = extractelement <4 x i32> %1367, i64 0, !dbg !64
  %.extract118 = extractelement <4 x i32> %1367, i64 1, !dbg !64
  %.extract120 = extractelement <4 x i32> %1367, i64 2, !dbg !64
  %.extract122 = extractelement <4 x i32> %1367, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %967, i1 false) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1368 = fcmp olt float %993, %995, !dbg !67
  %1369 = fcmp uno float %993, 0.000000e+00, !dbg !68
  %1370 = or i1 %1368, %1369, !dbg !69
  %1371 = select i1 %1370, float %993, float %995, !dbg !70
  %1372 = fcmp olt float %1371, %1016, !dbg !67
  %1373 = fcmp uno float %1371, 0.000000e+00, !dbg !68
  %1374 = or i1 %1372, %1373, !dbg !69
  %1375 = select i1 %1374, float %1371, float %1016, !dbg !70
  %1376 = fcmp olt float %1375, %1018, !dbg !67
  %1377 = fcmp uno float %1375, 0.000000e+00, !dbg !68
  %1378 = or i1 %1376, %1377, !dbg !69
  %1379 = select i1 %1378, float %1375, float %1018, !dbg !70
  %1380 = fcmp olt float %1379, %1039, !dbg !67
  %1381 = fcmp uno float %1379, 0.000000e+00, !dbg !68
  %1382 = or i1 %1380, %1381, !dbg !69
  %1383 = select i1 %1382, float %1379, float %1039, !dbg !70
  %1384 = fcmp olt float %1383, %1041, !dbg !67
  %1385 = fcmp uno float %1383, 0.000000e+00, !dbg !68
  %1386 = or i1 %1384, %1385, !dbg !69
  %1387 = select i1 %1386, float %1383, float %1041, !dbg !70
  %1388 = fcmp olt float %1387, %1062, !dbg !67
  %1389 = fcmp uno float %1387, 0.000000e+00, !dbg !68
  %1390 = or i1 %1388, %1389, !dbg !69
  %1391 = select i1 %1390, float %1387, float %1062, !dbg !70
  %1392 = fcmp olt float %1391, %1064, !dbg !67
  %1393 = fcmp uno float %1391, 0.000000e+00, !dbg !68
  %1394 = or i1 %1392, %1393, !dbg !69
  %1395 = select i1 %1394, float %1391, float %1064, !dbg !70
  %1396 = fcmp olt float %1395, %1085, !dbg !67
  %1397 = fcmp uno float %1395, 0.000000e+00, !dbg !68
  %1398 = or i1 %1396, %1397, !dbg !69
  %1399 = select i1 %1398, float %1395, float %1085, !dbg !70
  %1400 = fcmp olt float %1399, %1087, !dbg !67
  %1401 = fcmp uno float %1399, 0.000000e+00, !dbg !68
  %1402 = or i1 %1400, %1401, !dbg !69
  %1403 = select i1 %1402, float %1399, float %1087, !dbg !70
  %1404 = fcmp olt float %1403, %1108, !dbg !67
  %1405 = fcmp uno float %1403, 0.000000e+00, !dbg !68
  %1406 = or i1 %1404, %1405, !dbg !69
  %1407 = select i1 %1406, float %1403, float %1108, !dbg !70
  %1408 = fcmp olt float %1407, %1110, !dbg !67
  %1409 = fcmp uno float %1407, 0.000000e+00, !dbg !68
  %1410 = or i1 %1408, %1409, !dbg !69
  %1411 = select i1 %1410, float %1407, float %1110, !dbg !70
  %1412 = fcmp olt float %1411, %1131, !dbg !67
  %1413 = fcmp uno float %1411, 0.000000e+00, !dbg !68
  %1414 = or i1 %1412, %1413, !dbg !69
  %1415 = select i1 %1414, float %1411, float %1131, !dbg !70
  %1416 = fcmp olt float %1415, %1133, !dbg !67
  %1417 = fcmp uno float %1415, 0.000000e+00, !dbg !68
  %1418 = or i1 %1416, %1417, !dbg !69
  %1419 = select i1 %1418, float %1415, float %1133, !dbg !70
  %1420 = fcmp olt float %1419, %1154, !dbg !67
  %1421 = fcmp uno float %1419, 0.000000e+00, !dbg !68
  %1422 = or i1 %1420, %1421, !dbg !69
  %1423 = select i1 %1422, float %1419, float %1154, !dbg !70
  %1424 = fcmp olt float %1423, %1156, !dbg !67
  %1425 = fcmp uno float %1423, 0.000000e+00, !dbg !68
  %1426 = or i1 %1424, %1425, !dbg !69
  %1427 = select i1 %1426, float %1423, float %1156, !dbg !70
  %1428 = fcmp olt float %1427, %1177, !dbg !67
  %1429 = fcmp uno float %1427, 0.000000e+00, !dbg !68
  %1430 = or i1 %1428, %1429, !dbg !69
  %1431 = select i1 %1430, float %1427, float %1177, !dbg !70
  %1432 = fcmp olt float %1431, %1179, !dbg !67
  %1433 = fcmp uno float %1431, 0.000000e+00, !dbg !68
  %1434 = or i1 %1432, %1433, !dbg !69
  %1435 = select i1 %1434, float %1431, float %1179, !dbg !70
  %1436 = fcmp olt float %1435, %1200, !dbg !67
  %1437 = fcmp uno float %1435, 0.000000e+00, !dbg !68
  %1438 = or i1 %1436, %1437, !dbg !69
  %1439 = select i1 %1438, float %1435, float %1200, !dbg !70
  %1440 = fcmp olt float %1439, %1202, !dbg !67
  %1441 = fcmp uno float %1439, 0.000000e+00, !dbg !68
  %1442 = or i1 %1440, %1441, !dbg !69
  %1443 = select i1 %1442, float %1439, float %1202, !dbg !70
  %1444 = fcmp olt float %1443, %1223, !dbg !67
  %1445 = fcmp uno float %1443, 0.000000e+00, !dbg !68
  %1446 = or i1 %1444, %1445, !dbg !69
  %1447 = select i1 %1446, float %1443, float %1223, !dbg !70
  %1448 = fcmp olt float %1447, %1225, !dbg !67
  %1449 = fcmp uno float %1447, 0.000000e+00, !dbg !68
  %1450 = or i1 %1448, %1449, !dbg !69
  %1451 = select i1 %1450, float %1447, float %1225, !dbg !70
  %1452 = fcmp olt float %1451, %1246, !dbg !67
  %1453 = fcmp uno float %1451, 0.000000e+00, !dbg !68
  %1454 = or i1 %1452, %1453, !dbg !69
  %1455 = select i1 %1454, float %1451, float %1246, !dbg !70
  %1456 = fcmp olt float %1455, %1248, !dbg !67
  %1457 = fcmp uno float %1455, 0.000000e+00, !dbg !68
  %1458 = or i1 %1456, %1457, !dbg !69
  %1459 = select i1 %1458, float %1455, float %1248, !dbg !70
  %1460 = fcmp olt float %1459, %1269, !dbg !67
  %1461 = fcmp uno float %1459, 0.000000e+00, !dbg !68
  %1462 = or i1 %1460, %1461, !dbg !69
  %1463 = select i1 %1462, float %1459, float %1269, !dbg !70
  %1464 = fcmp olt float %1463, %1271, !dbg !67
  %1465 = fcmp uno float %1463, 0.000000e+00, !dbg !68
  %1466 = or i1 %1464, %1465, !dbg !69
  %1467 = select i1 %1466, float %1463, float %1271, !dbg !70
  %1468 = fcmp olt float %1467, %1292, !dbg !67
  %1469 = fcmp uno float %1467, 0.000000e+00, !dbg !68
  %1470 = or i1 %1468, %1469, !dbg !69
  %1471 = select i1 %1470, float %1467, float %1292, !dbg !70
  %1472 = fcmp olt float %1471, %1294, !dbg !67
  %1473 = fcmp uno float %1471, 0.000000e+00, !dbg !68
  %1474 = or i1 %1472, %1473, !dbg !69
  %1475 = select i1 %1474, float %1471, float %1294, !dbg !70
  %1476 = fcmp olt float %1475, %1315, !dbg !67
  %1477 = fcmp uno float %1475, 0.000000e+00, !dbg !68
  %1478 = or i1 %1476, %1477, !dbg !69
  %1479 = select i1 %1478, float %1475, float %1315, !dbg !70
  %1480 = fcmp olt float %1479, %1317, !dbg !67
  %1481 = fcmp uno float %1479, 0.000000e+00, !dbg !68
  %1482 = or i1 %1480, %1481, !dbg !69
  %1483 = select i1 %1482, float %1479, float %1317, !dbg !70
  %1484 = fcmp olt float %1483, %1338, !dbg !67
  %1485 = fcmp uno float %1483, 0.000000e+00, !dbg !68
  %1486 = or i1 %1484, %1485, !dbg !69
  %1487 = select i1 %1486, float %1483, float %1338, !dbg !70
  %1488 = fcmp olt float %1487, %1340, !dbg !67
  %1489 = fcmp uno float %1487, 0.000000e+00, !dbg !68
  %1490 = or i1 %1488, %1489, !dbg !69
  %1491 = select i1 %1490, float %1487, float %1340, !dbg !70
  %1492 = bitcast float %1491 to i32, !dbg !65
  %1493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1492, i32 16, i32 31), !dbg !65
  %1494 = bitcast i32 %1493 to float, !dbg !65
  %1495 = fcmp olt float %1491, %1494, !dbg !67
  %1496 = fcmp uno float %1491, 0.000000e+00, !dbg !68
  %1497 = or i1 %1495, %1496, !dbg !69
  %1498 = select i1 %1497, float %1491, float %1494, !dbg !70
  %1499 = bitcast float %1498 to i32, !dbg !65
  %1500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1499, i32 8, i32 31), !dbg !65
  %1501 = bitcast i32 %1500 to float, !dbg !65
  %1502 = fcmp olt float %1498, %1501, !dbg !67
  %1503 = fcmp uno float %1498, 0.000000e+00, !dbg !68
  %1504 = or i1 %1502, %1503, !dbg !69
  %1505 = select i1 %1504, float %1498, float %1501, !dbg !70
  %1506 = bitcast float %1505 to i32, !dbg !65
  %1507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1506, i32 4, i32 31), !dbg !65
  %1508 = bitcast i32 %1507 to float, !dbg !65
  %1509 = fcmp olt float %1505, %1508, !dbg !67
  %1510 = fcmp uno float %1505, 0.000000e+00, !dbg !68
  %1511 = or i1 %1509, %1510, !dbg !69
  %1512 = select i1 %1511, float %1505, float %1508, !dbg !70
  %1513 = bitcast float %1512 to i32, !dbg !65
  %1514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1513, i32 2, i32 31), !dbg !65
  %1515 = bitcast i32 %1514 to float, !dbg !65
  %1516 = fcmp olt float %1512, %1515, !dbg !67
  %1517 = fcmp uno float %1512, 0.000000e+00, !dbg !68
  %1518 = or i1 %1516, %1517, !dbg !69
  %1519 = select i1 %1518, float %1512, float %1515, !dbg !70
  %1520 = bitcast float %1519 to i32, !dbg !65
  %1521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1520, i32 1, i32 31), !dbg !65
  %1522 = bitcast i32 %1521 to float, !dbg !65
  %1523 = fcmp olt float %1519, %1522, !dbg !67
  %1524 = fcmp uno float %1519, 0.000000e+00, !dbg !68
  %1525 = or i1 %1523, %1524, !dbg !69
  %1526 = select i1 %1525, i32 %1520, i32 %1521, !dbg !70
  %1527 = insertelement <1 x i32> poison, i32 %1526, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1527, i1 %637) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1528 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %645, i1 %644) #5, !dbg !65
  %1529 = bitcast i32 %1528 to float, !dbg !65
  %1530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1528, i32 2, i32 31), !dbg !65
  %1531 = bitcast i32 %1530 to float, !dbg !65
  %1532 = fcmp olt float %1529, %1531, !dbg !67
  %1533 = fcmp uno float %1529, 0.000000e+00, !dbg !68
  %1534 = or i1 %1533, %1532, !dbg !69
  %1535 = select i1 %1534, float %1529, float %1531, !dbg !70
  %1536 = bitcast float %1535 to i32, !dbg !65
  %1537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1536, i32 1, i32 31), !dbg !65
  %1538 = bitcast i32 %1537 to float, !dbg !65
  %1539 = fcmp olt float %1535, %1538, !dbg !67
  %1540 = fcmp uno float %1535, 0.000000e+00, !dbg !68
  %1541 = or i1 %1539, %1540, !dbg !69
  %1542 = select i1 %1541, i32 %1536, i32 %1537, !dbg !70
  %1543 = insertelement <1 x i32> poison, i32 %1542, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %1543, i1 %695) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1544 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1545 = fcmp ogt float %996, %997, !dbg !73
  %1546 = fcmp uno float %996, 0.000000e+00, !dbg !74
  %1547 = or i1 %1545, %1546, !dbg !75
  %1548 = select i1 %1547, float %996, float %997, !dbg !76
  %1549 = fcmp ogt float %1548, %1019, !dbg !73
  %1550 = fcmp uno float %1548, 0.000000e+00, !dbg !74
  %1551 = or i1 %1549, %1550, !dbg !75
  %1552 = select i1 %1551, float %1548, float %1019, !dbg !76
  %1553 = fcmp ogt float %1552, %1020, !dbg !73
  %1554 = fcmp uno float %1552, 0.000000e+00, !dbg !74
  %1555 = or i1 %1553, %1554, !dbg !75
  %1556 = select i1 %1555, float %1552, float %1020, !dbg !76
  %1557 = fcmp ogt float %1556, %1042, !dbg !73
  %1558 = fcmp uno float %1556, 0.000000e+00, !dbg !74
  %1559 = or i1 %1557, %1558, !dbg !75
  %1560 = select i1 %1559, float %1556, float %1042, !dbg !76
  %1561 = fcmp ogt float %1560, %1043, !dbg !73
  %1562 = fcmp uno float %1560, 0.000000e+00, !dbg !74
  %1563 = or i1 %1561, %1562, !dbg !75
  %1564 = select i1 %1563, float %1560, float %1043, !dbg !76
  %1565 = fcmp ogt float %1564, %1065, !dbg !73
  %1566 = fcmp uno float %1564, 0.000000e+00, !dbg !74
  %1567 = or i1 %1565, %1566, !dbg !75
  %1568 = select i1 %1567, float %1564, float %1065, !dbg !76
  %1569 = fcmp ogt float %1568, %1066, !dbg !73
  %1570 = fcmp uno float %1568, 0.000000e+00, !dbg !74
  %1571 = or i1 %1569, %1570, !dbg !75
  %1572 = select i1 %1571, float %1568, float %1066, !dbg !76
  %1573 = fcmp ogt float %1572, %1088, !dbg !73
  %1574 = fcmp uno float %1572, 0.000000e+00, !dbg !74
  %1575 = or i1 %1573, %1574, !dbg !75
  %1576 = select i1 %1575, float %1572, float %1088, !dbg !76
  %1577 = fcmp ogt float %1576, %1089, !dbg !73
  %1578 = fcmp uno float %1576, 0.000000e+00, !dbg !74
  %1579 = or i1 %1577, %1578, !dbg !75
  %1580 = select i1 %1579, float %1576, float %1089, !dbg !76
  %1581 = fcmp ogt float %1580, %1111, !dbg !73
  %1582 = fcmp uno float %1580, 0.000000e+00, !dbg !74
  %1583 = or i1 %1581, %1582, !dbg !75
  %1584 = select i1 %1583, float %1580, float %1111, !dbg !76
  %1585 = fcmp ogt float %1584, %1112, !dbg !73
  %1586 = fcmp uno float %1584, 0.000000e+00, !dbg !74
  %1587 = or i1 %1585, %1586, !dbg !75
  %1588 = select i1 %1587, float %1584, float %1112, !dbg !76
  %1589 = fcmp ogt float %1588, %1134, !dbg !73
  %1590 = fcmp uno float %1588, 0.000000e+00, !dbg !74
  %1591 = or i1 %1589, %1590, !dbg !75
  %1592 = select i1 %1591, float %1588, float %1134, !dbg !76
  %1593 = fcmp ogt float %1592, %1135, !dbg !73
  %1594 = fcmp uno float %1592, 0.000000e+00, !dbg !74
  %1595 = or i1 %1593, %1594, !dbg !75
  %1596 = select i1 %1595, float %1592, float %1135, !dbg !76
  %1597 = fcmp ogt float %1596, %1157, !dbg !73
  %1598 = fcmp uno float %1596, 0.000000e+00, !dbg !74
  %1599 = or i1 %1597, %1598, !dbg !75
  %1600 = select i1 %1599, float %1596, float %1157, !dbg !76
  %1601 = fcmp ogt float %1600, %1158, !dbg !73
  %1602 = fcmp uno float %1600, 0.000000e+00, !dbg !74
  %1603 = or i1 %1601, %1602, !dbg !75
  %1604 = select i1 %1603, float %1600, float %1158, !dbg !76
  %1605 = fcmp ogt float %1604, %1180, !dbg !73
  %1606 = fcmp uno float %1604, 0.000000e+00, !dbg !74
  %1607 = or i1 %1605, %1606, !dbg !75
  %1608 = select i1 %1607, float %1604, float %1180, !dbg !76
  %1609 = fcmp ogt float %1608, %1181, !dbg !73
  %1610 = fcmp uno float %1608, 0.000000e+00, !dbg !74
  %1611 = or i1 %1609, %1610, !dbg !75
  %1612 = select i1 %1611, float %1608, float %1181, !dbg !76
  %1613 = fcmp ogt float %1612, %1203, !dbg !73
  %1614 = fcmp uno float %1612, 0.000000e+00, !dbg !74
  %1615 = or i1 %1613, %1614, !dbg !75
  %1616 = select i1 %1615, float %1612, float %1203, !dbg !76
  %1617 = fcmp ogt float %1616, %1204, !dbg !73
  %1618 = fcmp uno float %1616, 0.000000e+00, !dbg !74
  %1619 = or i1 %1617, %1618, !dbg !75
  %1620 = select i1 %1619, float %1616, float %1204, !dbg !76
  %1621 = fcmp ogt float %1620, %1226, !dbg !73
  %1622 = fcmp uno float %1620, 0.000000e+00, !dbg !74
  %1623 = or i1 %1621, %1622, !dbg !75
  %1624 = select i1 %1623, float %1620, float %1226, !dbg !76
  %1625 = fcmp ogt float %1624, %1227, !dbg !73
  %1626 = fcmp uno float %1624, 0.000000e+00, !dbg !74
  %1627 = or i1 %1625, %1626, !dbg !75
  %1628 = select i1 %1627, float %1624, float %1227, !dbg !76
  %1629 = fcmp ogt float %1628, %1249, !dbg !73
  %1630 = fcmp uno float %1628, 0.000000e+00, !dbg !74
  %1631 = or i1 %1629, %1630, !dbg !75
  %1632 = select i1 %1631, float %1628, float %1249, !dbg !76
  %1633 = fcmp ogt float %1632, %1250, !dbg !73
  %1634 = fcmp uno float %1632, 0.000000e+00, !dbg !74
  %1635 = or i1 %1633, %1634, !dbg !75
  %1636 = select i1 %1635, float %1632, float %1250, !dbg !76
  %1637 = fcmp ogt float %1636, %1272, !dbg !73
  %1638 = fcmp uno float %1636, 0.000000e+00, !dbg !74
  %1639 = or i1 %1637, %1638, !dbg !75
  %1640 = select i1 %1639, float %1636, float %1272, !dbg !76
  %1641 = fcmp ogt float %1640, %1273, !dbg !73
  %1642 = fcmp uno float %1640, 0.000000e+00, !dbg !74
  %1643 = or i1 %1641, %1642, !dbg !75
  %1644 = select i1 %1643, float %1640, float %1273, !dbg !76
  %1645 = fcmp ogt float %1644, %1295, !dbg !73
  %1646 = fcmp uno float %1644, 0.000000e+00, !dbg !74
  %1647 = or i1 %1645, %1646, !dbg !75
  %1648 = select i1 %1647, float %1644, float %1295, !dbg !76
  %1649 = fcmp ogt float %1648, %1296, !dbg !73
  %1650 = fcmp uno float %1648, 0.000000e+00, !dbg !74
  %1651 = or i1 %1649, %1650, !dbg !75
  %1652 = select i1 %1651, float %1648, float %1296, !dbg !76
  %1653 = fcmp ogt float %1652, %1318, !dbg !73
  %1654 = fcmp uno float %1652, 0.000000e+00, !dbg !74
  %1655 = or i1 %1653, %1654, !dbg !75
  %1656 = select i1 %1655, float %1652, float %1318, !dbg !76
  %1657 = fcmp ogt float %1656, %1319, !dbg !73
  %1658 = fcmp uno float %1656, 0.000000e+00, !dbg !74
  %1659 = or i1 %1657, %1658, !dbg !75
  %1660 = select i1 %1659, float %1656, float %1319, !dbg !76
  %1661 = fcmp ogt float %1660, %1341, !dbg !73
  %1662 = fcmp uno float %1660, 0.000000e+00, !dbg !74
  %1663 = or i1 %1661, %1662, !dbg !75
  %1664 = select i1 %1663, float %1660, float %1341, !dbg !76
  %1665 = fcmp ogt float %1664, %1342, !dbg !73
  %1666 = fcmp uno float %1664, 0.000000e+00, !dbg !74
  %1667 = or i1 %1665, %1666, !dbg !75
  %1668 = select i1 %1667, float %1664, float %1342, !dbg !76
  %1669 = bitcast float %1668 to i32, !dbg !71
  %1670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1669, i32 16, i32 31), !dbg !71
  %1671 = bitcast i32 %1670 to float, !dbg !71
  %1672 = fcmp ogt float %1668, %1671, !dbg !73
  %1673 = fcmp uno float %1668, 0.000000e+00, !dbg !74
  %1674 = or i1 %1672, %1673, !dbg !75
  %1675 = select i1 %1674, float %1668, float %1671, !dbg !76
  %1676 = bitcast float %1675 to i32, !dbg !71
  %1677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1676, i32 8, i32 31), !dbg !71
  %1678 = bitcast i32 %1677 to float, !dbg !71
  %1679 = fcmp ogt float %1675, %1678, !dbg !73
  %1680 = fcmp uno float %1675, 0.000000e+00, !dbg !74
  %1681 = or i1 %1679, %1680, !dbg !75
  %1682 = select i1 %1681, float %1675, float %1678, !dbg !76
  %1683 = bitcast float %1682 to i32, !dbg !71
  %1684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1683, i32 4, i32 31), !dbg !71
  %1685 = bitcast i32 %1684 to float, !dbg !71
  %1686 = fcmp ogt float %1682, %1685, !dbg !73
  %1687 = fcmp uno float %1682, 0.000000e+00, !dbg !74
  %1688 = or i1 %1686, %1687, !dbg !75
  %1689 = select i1 %1688, float %1682, float %1685, !dbg !76
  %1690 = bitcast float %1689 to i32, !dbg !71
  %1691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1690, i32 2, i32 31), !dbg !71
  %1692 = bitcast i32 %1691 to float, !dbg !71
  %1693 = fcmp ogt float %1689, %1692, !dbg !73
  %1694 = fcmp uno float %1689, 0.000000e+00, !dbg !74
  %1695 = or i1 %1693, %1694, !dbg !75
  %1696 = select i1 %1695, float %1689, float %1692, !dbg !76
  %1697 = bitcast float %1696 to i32, !dbg !71
  %1698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1697, i32 1, i32 31), !dbg !71
  %1699 = bitcast i32 %1698 to float, !dbg !71
  %1700 = fcmp ogt float %1696, %1699, !dbg !73
  %1701 = fcmp uno float %1696, 0.000000e+00, !dbg !74
  %1702 = or i1 %1700, %1701, !dbg !75
  %1703 = select i1 %1702, i32 %1697, i32 %1698, !dbg !76
  %1704 = insertelement <1 x i32> poison, i32 %1703, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1704, i1 %637) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1705 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %645, i1 %644) #5, !dbg !71
  %1706 = bitcast i32 %1705 to float, !dbg !71
  %1707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1705, i32 2, i32 31), !dbg !71
  %1708 = bitcast i32 %1707 to float, !dbg !71
  %1709 = fcmp ogt float %1706, %1708, !dbg !73
  %1710 = fcmp uno float %1706, 0.000000e+00, !dbg !74
  %1711 = or i1 %1710, %1709, !dbg !75
  %1712 = select i1 %1711, float %1706, float %1708, !dbg !76
  %1713 = bitcast float %1712 to i32, !dbg !71
  %1714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1713, i32 1, i32 31), !dbg !71
  %1715 = bitcast i32 %1714 to float, !dbg !71
  %1716 = fcmp ogt float %1712, %1715, !dbg !73
  %1717 = fcmp uno float %1712, 0.000000e+00, !dbg !74
  %1718 = or i1 %1716, %1717, !dbg !75
  %1719 = select i1 %1718, i32 %1713, i32 %1714, !dbg !76
  %1720 = insertelement <1 x i32> poison, i32 %1719, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %1720, i1 %695) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1721 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %1722 = sext i32 %16 to i64, !dbg !77
  %1723 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1722, !dbg !77
  %1724 = fptrunc float %1544 to bfloat, !dbg !78
  %1725 = and i32 %18, 127, !dbg !78
  %1726 = icmp eq i32 %1725, 0, !dbg !78
  %1727 = bitcast bfloat %1724 to i16, !dbg !78
  %1728 = and i1 %17, %1726, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1727, ptr addrspace(1) %1723, i1 %1728) #5, !dbg !78
  %1729 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1722, !dbg !79
  %1730 = fptrunc float %1721 to bfloat, !dbg !80
  %1731 = bitcast bfloat %1730 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1731, ptr addrspace(1) %1729, i1 %1728) #5, !dbg !80
  %1732 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1722, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1727, ptr addrspace(1) %1732, i1 %1728) #5, !dbg !82
  %1733 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1722, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1731, ptr addrspace(1) %1733, i1 %1728) #5, !dbg !84
  %1734 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1722, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1727, ptr addrspace(1) %1734, i1 %1728) #5, !dbg !86
  %1735 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1722, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1731, ptr addrspace(1) %1735, i1 %1728) #5, !dbg !88
  %1736 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %968, i1 %17) #5, !dbg !89
  %1737 = extractvalue { i32, i32, i32, i32 } %1736, 0, !dbg !89
  %1738 = bitcast i32 %1737 to <2 x bfloat>, !dbg !89
  %1739 = extractvalue { i32, i32, i32, i32 } %1736, 1, !dbg !89
  %1740 = bitcast i32 %1739 to <2 x bfloat>, !dbg !89
  %1741 = extractvalue { i32, i32, i32, i32 } %1736, 2, !dbg !89
  %1742 = bitcast i32 %1741 to <2 x bfloat>, !dbg !89
  %1743 = extractvalue { i32, i32, i32, i32 } %1736, 3, !dbg !89
  %1744 = bitcast i32 %1743 to <2 x bfloat>, !dbg !89
  %1745 = extractelement <2 x bfloat> %1738, i64 0, !dbg !89
  %1746 = extractelement <2 x bfloat> %1738, i64 1, !dbg !89
  %1747 = extractelement <2 x bfloat> %1740, i64 0, !dbg !89
  %1748 = extractelement <2 x bfloat> %1740, i64 1, !dbg !89
  %1749 = extractelement <2 x bfloat> %1742, i64 0, !dbg !89
  %1750 = extractelement <2 x bfloat> %1742, i64 1, !dbg !89
  %1751 = extractelement <2 x bfloat> %1744, i64 0, !dbg !89
  %1752 = extractelement <2 x bfloat> %1744, i64 1, !dbg !89
  %1753 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %969, i1 %17) #5, !dbg !89
  %1754 = extractvalue { i32, i32, i32, i32 } %1753, 0, !dbg !89
  %1755 = bitcast i32 %1754 to <2 x bfloat>, !dbg !89
  %1756 = extractvalue { i32, i32, i32, i32 } %1753, 1, !dbg !89
  %1757 = bitcast i32 %1756 to <2 x bfloat>, !dbg !89
  %1758 = extractvalue { i32, i32, i32, i32 } %1753, 2, !dbg !89
  %1759 = bitcast i32 %1758 to <2 x bfloat>, !dbg !89
  %1760 = extractvalue { i32, i32, i32, i32 } %1753, 3, !dbg !89
  %1761 = bitcast i32 %1760 to <2 x bfloat>, !dbg !89
  %1762 = extractelement <2 x bfloat> %1755, i64 0, !dbg !89
  %1763 = extractelement <2 x bfloat> %1755, i64 1, !dbg !89
  %1764 = extractelement <2 x bfloat> %1757, i64 0, !dbg !89
  %1765 = extractelement <2 x bfloat> %1757, i64 1, !dbg !89
  %1766 = extractelement <2 x bfloat> %1759, i64 0, !dbg !89
  %1767 = extractelement <2 x bfloat> %1759, i64 1, !dbg !89
  %1768 = extractelement <2 x bfloat> %1761, i64 0, !dbg !89
  %1769 = extractelement <2 x bfloat> %1761, i64 1, !dbg !89
  %1770 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %970, i1 %44) #5, !dbg !89
  %1771 = extractvalue { i32, i32, i32, i32 } %1770, 0, !dbg !89
  %1772 = bitcast i32 %1771 to <2 x bfloat>, !dbg !89
  %1773 = extractvalue { i32, i32, i32, i32 } %1770, 1, !dbg !89
  %1774 = bitcast i32 %1773 to <2 x bfloat>, !dbg !89
  %1775 = extractvalue { i32, i32, i32, i32 } %1770, 2, !dbg !89
  %1776 = bitcast i32 %1775 to <2 x bfloat>, !dbg !89
  %1777 = extractvalue { i32, i32, i32, i32 } %1770, 3, !dbg !89
  %1778 = bitcast i32 %1777 to <2 x bfloat>, !dbg !89
  %1779 = extractelement <2 x bfloat> %1772, i64 0, !dbg !89
  %1780 = extractelement <2 x bfloat> %1772, i64 1, !dbg !89
  %1781 = extractelement <2 x bfloat> %1774, i64 0, !dbg !89
  %1782 = extractelement <2 x bfloat> %1774, i64 1, !dbg !89
  %1783 = extractelement <2 x bfloat> %1776, i64 0, !dbg !89
  %1784 = extractelement <2 x bfloat> %1776, i64 1, !dbg !89
  %1785 = extractelement <2 x bfloat> %1778, i64 0, !dbg !89
  %1786 = extractelement <2 x bfloat> %1778, i64 1, !dbg !89
  %1787 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %971, i1 %44) #5, !dbg !89
  %1788 = extractvalue { i32, i32, i32, i32 } %1787, 0, !dbg !89
  %1789 = bitcast i32 %1788 to <2 x bfloat>, !dbg !89
  %1790 = extractvalue { i32, i32, i32, i32 } %1787, 1, !dbg !89
  %1791 = bitcast i32 %1790 to <2 x bfloat>, !dbg !89
  %1792 = extractvalue { i32, i32, i32, i32 } %1787, 2, !dbg !89
  %1793 = bitcast i32 %1792 to <2 x bfloat>, !dbg !89
  %1794 = extractvalue { i32, i32, i32, i32 } %1787, 3, !dbg !89
  %1795 = bitcast i32 %1794 to <2 x bfloat>, !dbg !89
  %1796 = extractelement <2 x bfloat> %1789, i64 0, !dbg !89
  %1797 = extractelement <2 x bfloat> %1789, i64 1, !dbg !89
  %1798 = extractelement <2 x bfloat> %1791, i64 0, !dbg !89
  %1799 = extractelement <2 x bfloat> %1791, i64 1, !dbg !89
  %1800 = extractelement <2 x bfloat> %1793, i64 0, !dbg !89
  %1801 = extractelement <2 x bfloat> %1793, i64 1, !dbg !89
  %1802 = extractelement <2 x bfloat> %1795, i64 0, !dbg !89
  %1803 = extractelement <2 x bfloat> %1795, i64 1, !dbg !89
  %1804 = fpext bfloat %1745 to float, !dbg !90
  %1805 = fpext bfloat %1746 to float, !dbg !90
  %1806 = fpext bfloat %1747 to float, !dbg !90
  %1807 = fpext bfloat %1748 to float, !dbg !90
  %1808 = fpext bfloat %1749 to float, !dbg !90
  %1809 = fpext bfloat %1750 to float, !dbg !90
  %1810 = fpext bfloat %1751 to float, !dbg !90
  %1811 = fpext bfloat %1752 to float, !dbg !90
  %1812 = fpext bfloat %1762 to float, !dbg !90
  %1813 = fpext bfloat %1763 to float, !dbg !90
  %1814 = fpext bfloat %1764 to float, !dbg !90
  %1815 = fpext bfloat %1765 to float, !dbg !90
  %1816 = fpext bfloat %1766 to float, !dbg !90
  %1817 = fpext bfloat %1767 to float, !dbg !90
  %1818 = fpext bfloat %1768 to float, !dbg !90
  %1819 = fpext bfloat %1769 to float, !dbg !90
  %1820 = fpext bfloat %1779 to float, !dbg !90
  %1821 = fpext bfloat %1780 to float, !dbg !90
  %1822 = fpext bfloat %1781 to float, !dbg !90
  %1823 = fpext bfloat %1782 to float, !dbg !90
  %1824 = fpext bfloat %1783 to float, !dbg !90
  %1825 = fpext bfloat %1784 to float, !dbg !90
  %1826 = fpext bfloat %1785 to float, !dbg !90
  %1827 = fpext bfloat %1786 to float, !dbg !90
  %1828 = fpext bfloat %1796 to float, !dbg !90
  %1829 = fpext bfloat %1797 to float, !dbg !90
  %1830 = fpext bfloat %1798 to float, !dbg !90
  %1831 = fpext bfloat %1799 to float, !dbg !90
  %1832 = fpext bfloat %1800 to float, !dbg !90
  %1833 = fpext bfloat %1801 to float, !dbg !90
  %1834 = fpext bfloat %1802 to float, !dbg !90
  %1835 = fpext bfloat %1803 to float, !dbg !90
  %.inv = fcmp oge float %1544, 0.000000e+00, !dbg !91
  %1836 = select i1 %.inv, float 0.000000e+00, float %1544, !dbg !91
  %1837 = fsub float 0.000000e+00, %1836, !dbg !93
  %.inv47 = fcmp ole float %1721, 0.000000e+00, !dbg !94
  %1838 = select i1 %.inv47, float 0.000000e+00, float %1721, !dbg !94
  %1839 = fcmp ogt float %1837, %1838, !dbg !96
  %1840 = fcmp uno float %1837, 0.000000e+00, !dbg !98
  %1841 = or i1 %1840, %1839, !dbg !99
  %1842 = select i1 %1841, float %1837, float %1838, !dbg !100
  %1843 = fmul float %1842, 0x3F80204080000000, !dbg !101
  %1844 = fcmp ogt float %1843, 0x3EE4F8B580000000, !dbg !102
  %1845 = fcmp uno float %1843, 0.000000e+00, !dbg !104
  %1846 = or i1 %1844, %1845, !dbg !105
  %1847 = select i1 %1846, float %1843, float 0x3EE4F8B580000000, !dbg !106
  %1848 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1847), !dbg !107
  %1849 = fmul float %1848, %1804, !dbg !108
  %1850 = fmul float %1848, %1805, !dbg !108
  %1851 = fmul float %1848, %1806, !dbg !108
  %1852 = fmul float %1848, %1807, !dbg !108
  %1853 = fmul float %1848, %1808, !dbg !108
  %1854 = fmul float %1848, %1809, !dbg !108
  %1855 = fmul float %1848, %1810, !dbg !108
  %1856 = fmul float %1848, %1811, !dbg !108
  %1857 = fmul float %1848, %1812, !dbg !108
  %1858 = fmul float %1848, %1813, !dbg !108
  %1859 = fmul float %1848, %1814, !dbg !108
  %1860 = fmul float %1848, %1815, !dbg !108
  %1861 = fmul float %1848, %1816, !dbg !108
  %1862 = fmul float %1848, %1817, !dbg !108
  %1863 = fmul float %1848, %1818, !dbg !108
  %1864 = fmul float %1848, %1819, !dbg !108
  %1865 = fmul float %1848, %1820, !dbg !108
  %1866 = fmul float %1848, %1821, !dbg !108
  %1867 = fmul float %1848, %1822, !dbg !108
  %1868 = fmul float %1848, %1823, !dbg !108
  %1869 = fmul float %1848, %1824, !dbg !108
  %1870 = fmul float %1848, %1825, !dbg !108
  %1871 = fmul float %1848, %1826, !dbg !108
  %1872 = fmul float %1848, %1827, !dbg !108
  %1873 = fmul float %1848, %1828, !dbg !108
  %1874 = fmul float %1848, %1829, !dbg !108
  %1875 = fmul float %1848, %1830, !dbg !108
  %1876 = fmul float %1848, %1831, !dbg !108
  %1877 = fmul float %1848, %1832, !dbg !108
  %1878 = fmul float %1848, %1833, !dbg !108
  %1879 = fmul float %1848, %1834, !dbg !108
  %1880 = fmul float %1848, %1835, !dbg !108
  %1881 = tail call float @llvm.nvvm.round.f(float %1849) #5, !dbg !109
  %1882 = tail call float @llvm.nvvm.round.f(float %1850) #5, !dbg !109
  %1883 = tail call float @llvm.nvvm.round.f(float %1851) #5, !dbg !109
  %1884 = tail call float @llvm.nvvm.round.f(float %1852) #5, !dbg !109
  %1885 = tail call float @llvm.nvvm.round.f(float %1853) #5, !dbg !109
  %1886 = tail call float @llvm.nvvm.round.f(float %1854) #5, !dbg !109
  %1887 = tail call float @llvm.nvvm.round.f(float %1855) #5, !dbg !109
  %1888 = tail call float @llvm.nvvm.round.f(float %1856) #5, !dbg !109
  %1889 = tail call float @llvm.nvvm.round.f(float %1857) #5, !dbg !109
  %1890 = tail call float @llvm.nvvm.round.f(float %1858) #5, !dbg !109
  %1891 = tail call float @llvm.nvvm.round.f(float %1859) #5, !dbg !109
  %1892 = tail call float @llvm.nvvm.round.f(float %1860) #5, !dbg !109
  %1893 = tail call float @llvm.nvvm.round.f(float %1861) #5, !dbg !109
  %1894 = tail call float @llvm.nvvm.round.f(float %1862) #5, !dbg !109
  %1895 = tail call float @llvm.nvvm.round.f(float %1863) #5, !dbg !109
  %1896 = tail call float @llvm.nvvm.round.f(float %1864) #5, !dbg !109
  %1897 = tail call float @llvm.nvvm.round.f(float %1865) #5, !dbg !109
  %1898 = tail call float @llvm.nvvm.round.f(float %1866) #5, !dbg !109
  %1899 = tail call float @llvm.nvvm.round.f(float %1867) #5, !dbg !109
  %1900 = tail call float @llvm.nvvm.round.f(float %1868) #5, !dbg !109
  %1901 = tail call float @llvm.nvvm.round.f(float %1869) #5, !dbg !109
  %1902 = tail call float @llvm.nvvm.round.f(float %1870) #5, !dbg !109
  %1903 = tail call float @llvm.nvvm.round.f(float %1871) #5, !dbg !109
  %1904 = tail call float @llvm.nvvm.round.f(float %1872) #5, !dbg !109
  %1905 = tail call float @llvm.nvvm.round.f(float %1873) #5, !dbg !109
  %1906 = tail call float @llvm.nvvm.round.f(float %1874) #5, !dbg !109
  %1907 = tail call float @llvm.nvvm.round.f(float %1875) #5, !dbg !109
  %1908 = tail call float @llvm.nvvm.round.f(float %1876) #5, !dbg !109
  %1909 = tail call float @llvm.nvvm.round.f(float %1877) #5, !dbg !109
  %1910 = tail call float @llvm.nvvm.round.f(float %1878) #5, !dbg !109
  %1911 = tail call float @llvm.nvvm.round.f(float %1879) #5, !dbg !109
  %1912 = tail call float @llvm.nvvm.round.f(float %1880) #5, !dbg !109
  %1913 = insertelement <4 x float> poison, float %1881, i64 0, !dbg !110
  %1914 = insertelement <4 x float> %1913, float %1882, i64 1, !dbg !110
  %1915 = insertelement <4 x float> %1914, float %1883, i64 2, !dbg !110
  %1916 = insertelement <4 x float> %1915, float %1884, i64 3, !dbg !110
  %1917 = fcmp ogt <4 x float> %1916, splat (float -1.270000e+02), !dbg !110
  %1918 = fcmp uno <4 x float> %1916, zeroinitializer, !dbg !112
  %1919 = or <4 x i1> %1917, %1918, !dbg !113
  %1920 = select <4 x i1> %1919, <4 x float> %1916, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1921 = fcmp olt <4 x float> %1920, splat (float 1.270000e+02), !dbg !115
  %1922 = fcmp uno <4 x float> %1920, zeroinitializer, !dbg !117
  %1923 = or <4 x i1> %1921, %1922, !dbg !118
  %1924 = fptosi <4 x float> %1920 to <4 x i8>, !dbg !119
  %1925 = select <4 x i1> %1923, <4 x i8> %1924, <4 x i8> splat (i8 127), !dbg !120
  %1926 = insertelement <4 x float> poison, float %1885, i64 0, !dbg !110
  %1927 = insertelement <4 x float> %1926, float %1886, i64 1, !dbg !110
  %1928 = insertelement <4 x float> %1927, float %1887, i64 2, !dbg !110
  %1929 = insertelement <4 x float> %1928, float %1888, i64 3, !dbg !110
  %1930 = fcmp ogt <4 x float> %1929, splat (float -1.270000e+02), !dbg !110
  %1931 = fcmp uno <4 x float> %1929, zeroinitializer, !dbg !112
  %1932 = or <4 x i1> %1930, %1931, !dbg !113
  %1933 = select <4 x i1> %1932, <4 x float> %1929, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1934 = fcmp olt <4 x float> %1933, splat (float 1.270000e+02), !dbg !115
  %1935 = fcmp uno <4 x float> %1933, zeroinitializer, !dbg !117
  %1936 = or <4 x i1> %1934, %1935, !dbg !118
  %1937 = fptosi <4 x float> %1933 to <4 x i8>, !dbg !119
  %1938 = select <4 x i1> %1936, <4 x i8> %1937, <4 x i8> splat (i8 127), !dbg !120
  %1939 = insertelement <4 x float> poison, float %1889, i64 0, !dbg !110
  %1940 = insertelement <4 x float> %1939, float %1890, i64 1, !dbg !110
  %1941 = insertelement <4 x float> %1940, float %1891, i64 2, !dbg !110
  %1942 = insertelement <4 x float> %1941, float %1892, i64 3, !dbg !110
  %1943 = fcmp ogt <4 x float> %1942, splat (float -1.270000e+02), !dbg !110
  %1944 = fcmp uno <4 x float> %1942, zeroinitializer, !dbg !112
  %1945 = or <4 x i1> %1943, %1944, !dbg !113
  %1946 = select <4 x i1> %1945, <4 x float> %1942, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1947 = fcmp olt <4 x float> %1946, splat (float 1.270000e+02), !dbg !115
  %1948 = fcmp uno <4 x float> %1946, zeroinitializer, !dbg !117
  %1949 = or <4 x i1> %1947, %1948, !dbg !118
  %1950 = fptosi <4 x float> %1946 to <4 x i8>, !dbg !119
  %1951 = select <4 x i1> %1949, <4 x i8> %1950, <4 x i8> splat (i8 127), !dbg !120
  %1952 = insertelement <4 x float> poison, float %1893, i64 0, !dbg !110
  %1953 = insertelement <4 x float> %1952, float %1894, i64 1, !dbg !110
  %1954 = insertelement <4 x float> %1953, float %1895, i64 2, !dbg !110
  %1955 = insertelement <4 x float> %1954, float %1896, i64 3, !dbg !110
  %1956 = fcmp ogt <4 x float> %1955, splat (float -1.270000e+02), !dbg !110
  %1957 = fcmp uno <4 x float> %1955, zeroinitializer, !dbg !112
  %1958 = or <4 x i1> %1956, %1957, !dbg !113
  %1959 = select <4 x i1> %1958, <4 x float> %1955, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1960 = fcmp olt <4 x float> %1959, splat (float 1.270000e+02), !dbg !115
  %1961 = fcmp uno <4 x float> %1959, zeroinitializer, !dbg !117
  %1962 = or <4 x i1> %1960, %1961, !dbg !118
  %1963 = fptosi <4 x float> %1959 to <4 x i8>, !dbg !119
  %1964 = select <4 x i1> %1962, <4 x i8> %1963, <4 x i8> splat (i8 127), !dbg !120
  %1965 = insertelement <4 x float> poison, float %1897, i64 0, !dbg !110
  %1966 = insertelement <4 x float> %1965, float %1898, i64 1, !dbg !110
  %1967 = insertelement <4 x float> %1966, float %1899, i64 2, !dbg !110
  %1968 = insertelement <4 x float> %1967, float %1900, i64 3, !dbg !110
  %1969 = fcmp ogt <4 x float> %1968, splat (float -1.270000e+02), !dbg !110
  %1970 = fcmp uno <4 x float> %1968, zeroinitializer, !dbg !112
  %1971 = or <4 x i1> %1969, %1970, !dbg !113
  %1972 = select <4 x i1> %1971, <4 x float> %1968, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1973 = fcmp olt <4 x float> %1972, splat (float 1.270000e+02), !dbg !115
  %1974 = fcmp uno <4 x float> %1972, zeroinitializer, !dbg !117
  %1975 = or <4 x i1> %1973, %1974, !dbg !118
  %1976 = fptosi <4 x float> %1972 to <4 x i8>, !dbg !119
  %1977 = select <4 x i1> %1975, <4 x i8> %1976, <4 x i8> splat (i8 127), !dbg !120
  %1978 = insertelement <4 x float> poison, float %1901, i64 0, !dbg !110
  %1979 = insertelement <4 x float> %1978, float %1902, i64 1, !dbg !110
  %1980 = insertelement <4 x float> %1979, float %1903, i64 2, !dbg !110
  %1981 = insertelement <4 x float> %1980, float %1904, i64 3, !dbg !110
  %1982 = fcmp ogt <4 x float> %1981, splat (float -1.270000e+02), !dbg !110
  %1983 = fcmp uno <4 x float> %1981, zeroinitializer, !dbg !112
  %1984 = or <4 x i1> %1982, %1983, !dbg !113
  %1985 = select <4 x i1> %1984, <4 x float> %1981, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1986 = fcmp olt <4 x float> %1985, splat (float 1.270000e+02), !dbg !115
  %1987 = fcmp uno <4 x float> %1985, zeroinitializer, !dbg !117
  %1988 = or <4 x i1> %1986, %1987, !dbg !118
  %1989 = fptosi <4 x float> %1985 to <4 x i8>, !dbg !119
  %1990 = select <4 x i1> %1988, <4 x i8> %1989, <4 x i8> splat (i8 127), !dbg !120
  %1991 = insertelement <4 x float> poison, float %1905, i64 0, !dbg !110
  %1992 = insertelement <4 x float> %1991, float %1906, i64 1, !dbg !110
  %1993 = insertelement <4 x float> %1992, float %1907, i64 2, !dbg !110
  %1994 = insertelement <4 x float> %1993, float %1908, i64 3, !dbg !110
  %1995 = fcmp ogt <4 x float> %1994, splat (float -1.270000e+02), !dbg !110
  %1996 = fcmp uno <4 x float> %1994, zeroinitializer, !dbg !112
  %1997 = or <4 x i1> %1995, %1996, !dbg !113
  %1998 = select <4 x i1> %1997, <4 x float> %1994, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1999 = fcmp olt <4 x float> %1998, splat (float 1.270000e+02), !dbg !115
  %2000 = fcmp uno <4 x float> %1998, zeroinitializer, !dbg !117
  %2001 = or <4 x i1> %1999, %2000, !dbg !118
  %2002 = fptosi <4 x float> %1998 to <4 x i8>, !dbg !119
  %2003 = select <4 x i1> %2001, <4 x i8> %2002, <4 x i8> splat (i8 127), !dbg !120
  %2004 = insertelement <4 x float> poison, float %1909, i64 0, !dbg !110
  %2005 = insertelement <4 x float> %2004, float %1910, i64 1, !dbg !110
  %2006 = insertelement <4 x float> %2005, float %1911, i64 2, !dbg !110
  %2007 = insertelement <4 x float> %2006, float %1912, i64 3, !dbg !110
  %2008 = fcmp ogt <4 x float> %2007, splat (float -1.270000e+02), !dbg !110
  %2009 = fcmp uno <4 x float> %2007, zeroinitializer, !dbg !112
  %2010 = or <4 x i1> %2008, %2009, !dbg !113
  %2011 = select <4 x i1> %2010, <4 x float> %2007, <4 x float> splat (float -1.270000e+02), !dbg !114
  %2012 = fcmp olt <4 x float> %2011, splat (float 1.270000e+02), !dbg !115
  %2013 = fcmp uno <4 x float> %2011, zeroinitializer, !dbg !117
  %2014 = or <4 x i1> %2012, %2013, !dbg !118
  %2015 = fptosi <4 x float> %2011 to <4 x i8>, !dbg !119
  %2016 = select <4 x i1> %2014, <4 x i8> %2015, <4 x i8> splat (i8 127), !dbg !120
  %2017 = getelementptr i8, ptr addrspace(1) %10, i64 %36, !dbg !121
  %2018 = getelementptr i8, ptr addrspace(1) %10, i64 %40, !dbg !121
  %2019 = bitcast <4 x i8> %1925 to i32, !dbg !122
  %2020 = bitcast <4 x i8> %1938 to i32, !dbg !122
  %2021 = bitcast <4 x i8> %1951 to i32, !dbg !122
  %2022 = bitcast <4 x i8> %1964 to i32, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2019, i32 %2020, i32 %2021, i32 %2022, ptr addrspace(1) %2017, i1 %17) #5, !dbg !122
  %2023 = bitcast <4 x i8> %1977 to i32, !dbg !122
  %2024 = bitcast <4 x i8> %1990 to i32, !dbg !122
  %2025 = bitcast <4 x i8> %2003 to i32, !dbg !122
  %2026 = bitcast <4 x i8> %2016 to i32, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2023, i32 %2024, i32 %2025, i32 %2026, ptr addrspace(1) %2018, i1 %44) #5, !dbg !122
  %2027 = getelementptr i8, ptr addrspace(1) %11, i64 %36, !dbg !123
  %2028 = getelementptr i8, ptr addrspace(1) %11, i64 %40, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2019, i32 %2020, i32 %2021, i32 %2022, ptr addrspace(1) %2027, i1 %17) #5, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2023, i32 %2024, i32 %2025, i32 %2026, ptr addrspace(1) %2028, i1 %44) #5, !dbg !124
  %2029 = getelementptr i8, ptr addrspace(1) %12, i64 %36, !dbg !125
  %2030 = getelementptr i8, ptr addrspace(1) %12, i64 %40, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2019, i32 %2020, i32 %2021, i32 %2022, ptr addrspace(1) %2029, i1 %17) #5, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2023, i32 %2024, i32 %2025, i32 %2026, ptr addrspace(1) %2030, i1 %44) #5, !dbg !126
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 59, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!37 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 101, column: 53, scope: !6)
!90 = !DILocation(line: 101, column: 115, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 103, column: 46, scope: !6)
!93 = !DILocation(line: 104, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !95)
!95 = !DILocation(line: 105, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !97)
!101 = !DILocation(line: 108, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !103)
!103 = !DILocation(line: 111, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !103)
!107 = !DILocation(line: 114, column: 25, scope: !6)
!108 = !DILocation(line: 117, column: 24, scope: !6)
!109 = !DILocation(line: 118, column: 36, scope: !6)
!110 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !111)
!111 = !DILocation(line: 121, column: 46, scope: !6)
!112 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !111)
!113 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !111)
!114 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !111)
!115 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !116)
!116 = !DILocation(line: 123, column: 46, scope: !6)
!117 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !116)
!118 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !116)
!119 = !DILocation(line: 125, column: 25, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !116)
!121 = !DILocation(line: 126, column: 29, scope: !6)
!122 = !DILocation(line: 126, column: 53, scope: !6)
!123 = !DILocation(line: 127, column: 30, scope: !6)
!124 = !DILocation(line: 127, column: 54, scope: !6)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 95, column: 4, scope: !6)
