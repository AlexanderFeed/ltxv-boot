; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 3, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 9216, !dbg !13
  %14 = shl i32 %9, 3, !dbg !14
  %15 = and i32 %14, 56, !dbg !14
  %16 = mul i32 %12, 3072, !dbg !15
  %17 = zext nneg i32 %15 to i64, !dbg !16
  %18 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !17
  %19 = shufflevector <8 x i1> %18, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %20, !dbg !16

20:                                               ; preds = %6, %20
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %20 ]
  %21 = phi <8 x float> [ zeroinitializer, %6 ], [ %125, %20 ]
  %22 = or disjoint i64 %indvars.iv, %17, !dbg !18
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 true) #4, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = trunc nuw nsw i64 %22 to i32, !dbg !21
  %34 = add i32 %16, %33, !dbg !21
  %35 = sext i32 %34 to i64, !dbg !22
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %13) #4, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !23
  %46 = shufflevector <2 x bfloat> %26, <2 x bfloat> %28, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %47 = shufflevector <2 x bfloat> %30, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %49 = shufflevector <2 x bfloat> %30, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %51 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %52 = shufflevector <8 x bfloat> %50, <8 x bfloat> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %53 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %54 = shufflevector <8 x bfloat> %52, <8 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %55 = fpext <8 x bfloat> %54 to <8 x float>, !dbg !24
  %56 = shufflevector <2 x bfloat> %39, <2 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %57 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %58 = shufflevector <8 x bfloat> %56, <8 x bfloat> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <8 x bfloat> %58, <8 x bfloat> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <8 x bfloat> %60, <8 x bfloat> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %63 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %64 = shufflevector <8 x bfloat> %62, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %65 = fpext <8 x bfloat> %64 to <8 x float>, !dbg !25
  %66 = extractelement <8 x float> %55, i64 0, !dbg !26
  %67 = fsub float 0.000000e+00, %66, !dbg !26
  %68 = extractelement <8 x float> %55, i64 1, !dbg !26
  %69 = fsub float 0.000000e+00, %68, !dbg !26
  %70 = extractelement <8 x float> %55, i64 2, !dbg !26
  %71 = fsub float 0.000000e+00, %70, !dbg !26
  %72 = extractelement <8 x float> %55, i64 3, !dbg !26
  %73 = fsub float 0.000000e+00, %72, !dbg !26
  %74 = extractelement <8 x float> %55, i64 4, !dbg !26
  %75 = fsub float 0.000000e+00, %74, !dbg !26
  %76 = extractelement <8 x float> %55, i64 5, !dbg !26
  %77 = fsub float 0.000000e+00, %76, !dbg !26
  %78 = extractelement <8 x float> %55, i64 6, !dbg !26
  %79 = fsub float 0.000000e+00, %78, !dbg !26
  %80 = extractelement <8 x float> %55, i64 7, !dbg !26
  %81 = fsub float 0.000000e+00, %80, !dbg !26
  %82 = fmul float %67, 0x3FF7154760000000, !dbg !30
  %83 = tail call float @llvm.nvvm.ex2.approx.f(float %82), !dbg !30
  %84 = fmul float %69, 0x3FF7154760000000, !dbg !30
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !30
  %86 = fmul float %71, 0x3FF7154760000000, !dbg !30
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !30
  %88 = fmul float %73, 0x3FF7154760000000, !dbg !30
  %89 = tail call float @llvm.nvvm.ex2.approx.f(float %88), !dbg !30
  %90 = fmul float %75, 0x3FF7154760000000, !dbg !30
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !30
  %92 = fmul float %77, 0x3FF7154760000000, !dbg !30
  %93 = tail call float @llvm.nvvm.ex2.approx.f(float %92), !dbg !30
  %94 = fmul float %79, 0x3FF7154760000000, !dbg !30
  %95 = tail call float @llvm.nvvm.ex2.approx.f(float %94), !dbg !30
  %96 = fmul float %81, 0x3FF7154760000000, !dbg !30
  %97 = tail call float @llvm.nvvm.ex2.approx.f(float %96), !dbg !30
  %98 = fadd float %83, 1.000000e+00, !dbg !31
  %99 = fadd float %85, 1.000000e+00, !dbg !31
  %100 = fadd float %87, 1.000000e+00, !dbg !31
  %101 = fadd float %89, 1.000000e+00, !dbg !31
  %102 = fadd float %91, 1.000000e+00, !dbg !31
  %103 = fadd float %93, 1.000000e+00, !dbg !31
  %104 = fadd float %95, 1.000000e+00, !dbg !31
  %105 = fadd float %97, 1.000000e+00, !dbg !31
  %106 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %98), !dbg !32
  %107 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %99), !dbg !32
  %108 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %100), !dbg !32
  %109 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %101), !dbg !32
  %110 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %102), !dbg !32
  %111 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %103), !dbg !32
  %112 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %104), !dbg !32
  %113 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %105), !dbg !32
  %114 = insertelement <8 x float> poison, float %106, i64 0, !dbg !33
  %115 = insertelement <8 x float> %114, float %107, i64 1, !dbg !33
  %116 = insertelement <8 x float> %115, float %108, i64 2, !dbg !33
  %117 = insertelement <8 x float> %116, float %109, i64 3, !dbg !33
  %118 = insertelement <8 x float> %117, float %110, i64 4, !dbg !33
  %119 = insertelement <8 x float> %118, float %111, i64 5, !dbg !33
  %120 = insertelement <8 x float> %119, float %112, i64 6, !dbg !33
  %121 = insertelement <8 x float> %120, float %113, i64 7, !dbg !33
  %122 = fmul <8 x float> %121, %55, !dbg !33
  %123 = fmul <8 x float> %122, %65, !dbg !34
  %124 = fadd <8 x float> %21, %123, !dbg !35
  %125 = select <8 x i1> %19, <8 x float> %124, <8 x float> %21, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %126 = icmp samesign ult i64 %indvars.iv, 3008, !dbg !16
  br i1 %126, label %20, label %127, !dbg !16

127:                                              ; preds = %20
  %128 = and i32 %9, 63, !dbg !11
  %129 = or disjoint i32 %8, %128, !dbg !12
  %130 = icmp slt i32 %129, 9216, !dbg !13
  %shift = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %131 = fadd <8 x float> %125, %shift, !dbg !36
  %shift24 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %132 = fadd <8 x float> %shift24, %131, !dbg !36
  %shift25 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %133 = fadd <8 x float> %shift25, %132, !dbg !36
  %shift26 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %134 = fadd <8 x float> %shift26, %133, !dbg !36
  %shift27 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %135 = fadd <8 x float> %shift27, %134, !dbg !36
  %shift28 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %136 = fadd <8 x float> %shift28, %135, !dbg !36
  %shift29 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %137 = fadd <8 x float> %shift29, %136, !dbg !36
  %138 = extractelement <8 x float> %137, i64 0, !dbg !36
  %139 = bitcast float %138 to i32, !dbg !39
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !39
  %141 = bitcast i32 %140 to float, !dbg !39
  %142 = fadd float %138, %141, !dbg !36
  %143 = bitcast float %142 to i32, !dbg !39
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !39
  %145 = bitcast i32 %144 to float, !dbg !39
  %146 = fadd float %142, %145, !dbg !36
  %147 = bitcast float %146 to i32, !dbg !39
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !39
  %149 = bitcast i32 %148 to float, !dbg !39
  %150 = fadd float %146, %149, !dbg !36
  %151 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %152 = bitcast float %150 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %153 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %128, !dbg !40
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !40
  %155 = sext i32 %129 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !41
  %157 = and i32 %9, 448, !dbg !42
  %158 = icmp eq i32 %157, 0, !dbg !42
  %159 = and i1 %158, %130, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %156, i1 %159) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 47, column: 50, scope: !6)
!18 = !DILocation(line: 31, column: 31, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 41, scope: !6)
!21 = !DILocation(line: 37, column: 41, scope: !6)
!22 = !DILocation(line: 37, column: 34, scope: !6)
!23 = !DILocation(line: 37, column: 51, scope: !6)
!24 = !DILocation(line: 36, column: 94, scope: !6)
!25 = !DILocation(line: 37, column: 113, scope: !6)
!26 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!29 = !DILocation(line: 39, column: 26, scope: !6)
!30 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 44, column: 22, scope: !6)
!35 = !DILocation(line: 46, column: 25, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!38 = !DILocation(line: 48, column: 27, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !38)
!40 = !DILocation(line: 48, column: 30, scope: !6)
!41 = !DILocation(line: 49, column: 25, scope: !6)
!42 = !DILocation(line: 49, column: 37, scope: !6)
!43 = !DILocation(line: 49, column: 4, scope: !6)
