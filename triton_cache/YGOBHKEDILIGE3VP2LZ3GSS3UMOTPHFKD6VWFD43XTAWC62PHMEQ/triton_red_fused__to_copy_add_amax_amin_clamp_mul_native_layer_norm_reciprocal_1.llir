; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
._crit_edge:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 256, !dbg !11
  %.lobit = lshr exact i32 %19, 8, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 3600, !dbg !13
  %23 = icmp slt i32 %17, 3600, !dbg !13
  %24 = shl i32 %18, 3, !dbg !14
  %25 = and i32 %24, 2040, !dbg !14
  %26 = shl i32 %18, 2, !dbg !14
  %27 = mul i32 %21, 3072, !dbg !15
  %28 = zext nneg i32 %25 to i64, !dbg !16
  %29 = add i32 %27, %25, !dbg !17
  %30 = sext i32 %29 to i64, !dbg !18
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %22) #5, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !19
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !19
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !19
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !19
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !19
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !19
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !19
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !19
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !19
  %49 = fpext bfloat %41 to float, !dbg !20
  %50 = fpext bfloat %42 to float, !dbg !20
  %51 = fpext bfloat %43 to float, !dbg !20
  %52 = fpext bfloat %44 to float, !dbg !20
  %53 = fpext bfloat %45 to float, !dbg !20
  %54 = fpext bfloat %46 to float, !dbg !20
  %55 = fpext bfloat %47 to float, !dbg !20
  %56 = fpext bfloat %48 to float, !dbg !20
  %57 = select i1 %22, float %49, float 0.000000e+00, !dbg !21
  %58 = select i1 %22, float %50, float 0.000000e+00, !dbg !21
  %59 = select i1 %22, float %51, float 0.000000e+00, !dbg !21
  %60 = select i1 %22, float %52, float 0.000000e+00, !dbg !21
  %61 = select i1 %22, float %53, float 0.000000e+00, !dbg !21
  %62 = select i1 %22, float %54, float 0.000000e+00, !dbg !21
  %63 = select i1 %22, float %55, float 0.000000e+00, !dbg !21
  %64 = select i1 %22, float %56, float 0.000000e+00, !dbg !21
  %65 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %66 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %67 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %68 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %69 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %70 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %71 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %72 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %73 = or disjoint i64 %28, 2048, !dbg !23
  %74 = icmp samesign ult i64 %73, 3072, !dbg !24
  %75 = trunc nuw nsw i64 %73 to i32, !dbg !17
  %76 = add i32 %27, %75, !dbg !17
  %77 = sext i32 %76 to i64, !dbg !18
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !18
  %79 = and i1 %22, %74, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %78, i1 %79) #5, !dbg !19
  %81 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !19
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !19
  %83 = extractelement <2 x bfloat> %82, i64 1, !dbg !19
  %84 = fpext bfloat %83 to float, !dbg !20
  %85 = extractelement <2 x bfloat> %82, i64 0, !dbg !19
  %86 = fpext bfloat %85 to float, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !19
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !19
  %89 = extractelement <2 x bfloat> %88, i64 1, !dbg !19
  %90 = fpext bfloat %89 to float, !dbg !20
  %91 = extractelement <2 x bfloat> %88, i64 0, !dbg !19
  %92 = fpext bfloat %91 to float, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !19
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !19
  %95 = extractelement <2 x bfloat> %94, i64 1, !dbg !19
  %96 = fpext bfloat %95 to float, !dbg !20
  %97 = extractelement <2 x bfloat> %94, i64 0, !dbg !19
  %98 = fpext bfloat %97 to float, !dbg !20
  %99 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !19
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !19
  %101 = extractelement <2 x bfloat> %100, i64 1, !dbg !19
  %102 = fpext bfloat %101 to float, !dbg !20
  %103 = extractelement <2 x bfloat> %100, i64 0, !dbg !19
  %104 = fpext bfloat %103 to float, !dbg !20
  %105 = fsub float %104, %57, !dbg !26
  %106 = fsub float %102, %58, !dbg !26
  %107 = fsub float %98, %59, !dbg !26
  %108 = fsub float %96, %60, !dbg !26
  %109 = fsub float %92, %61, !dbg !26
  %110 = fsub float %90, %62, !dbg !26
  %111 = fsub float %86, %63, !dbg !26
  %112 = fsub float %84, %64, !dbg !26
  %113 = fadd float %65, 1.000000e+00, !dbg !30
  %114 = fadd float %66, 1.000000e+00, !dbg !30
  %115 = fadd float %67, 1.000000e+00, !dbg !30
  %116 = fadd float %68, 1.000000e+00, !dbg !30
  %117 = fadd float %69, 1.000000e+00, !dbg !30
  %118 = fadd float %70, 1.000000e+00, !dbg !30
  %119 = fadd float %71, 1.000000e+00, !dbg !30
  %120 = fadd float %72, 1.000000e+00, !dbg !30
  %121 = tail call float @llvm.nvvm.div.full(float %105, float %113), !dbg !31
  %122 = tail call float @llvm.nvvm.div.full(float %106, float %114), !dbg !31
  %123 = tail call float @llvm.nvvm.div.full(float %107, float %115), !dbg !31
  %124 = tail call float @llvm.nvvm.div.full(float %108, float %116), !dbg !31
  %125 = tail call float @llvm.nvvm.div.full(float %109, float %117), !dbg !31
  %126 = tail call float @llvm.nvvm.div.full(float %110, float %118), !dbg !31
  %127 = tail call float @llvm.nvvm.div.full(float %111, float %119), !dbg !31
  %128 = tail call float @llvm.nvvm.div.full(float %112, float %120), !dbg !31
  %129 = fadd float %57, %121, !dbg !32
  %130 = fadd float %58, %122, !dbg !32
  %131 = fadd float %59, %123, !dbg !32
  %132 = fadd float %60, %124, !dbg !32
  %133 = fadd float %61, %125, !dbg !32
  %134 = fadd float %62, %126, !dbg !32
  %135 = fadd float %63, %127, !dbg !32
  %136 = fadd float %64, %128, !dbg !32
  %137 = fsub float %104, %129, !dbg !33
  %138 = fsub float %102, %130, !dbg !33
  %139 = fsub float %98, %131, !dbg !33
  %140 = fsub float %96, %132, !dbg !33
  %141 = fsub float %92, %133, !dbg !33
  %142 = fsub float %90, %134, !dbg !33
  %143 = fsub float %86, %135, !dbg !33
  %144 = fsub float %84, %136, !dbg !33
  %145 = fmul float %105, %137, !dbg !34
  %146 = fmul float %106, %138, !dbg !34
  %147 = fmul float %107, %139, !dbg !34
  %148 = fmul float %108, %140, !dbg !34
  %149 = fmul float %109, %141, !dbg !34
  %150 = fmul float %110, %142, !dbg !34
  %151 = fmul float %111, %143, !dbg !34
  %152 = fmul float %112, %144, !dbg !34
  %153 = fadd float %145, 0.000000e+00, !dbg !35
  %154 = fadd float %146, 0.000000e+00, !dbg !35
  %155 = fadd float %147, 0.000000e+00, !dbg !35
  %156 = fadd float %148, 0.000000e+00, !dbg !35
  %157 = fadd float %149, 0.000000e+00, !dbg !35
  %158 = fadd float %150, 0.000000e+00, !dbg !35
  %159 = fadd float %151, 0.000000e+00, !dbg !35
  %160 = fadd float %152, 0.000000e+00, !dbg !35
  %161 = fadd float %153, %154, !dbg !36
  %162 = select i1 %79, float %129, float %57, !dbg !21
  %163 = select i1 %79, float %130, float %58, !dbg !21
  %164 = select i1 %79, float %131, float %59, !dbg !21
  %165 = select i1 %79, float %132, float %60, !dbg !21
  %166 = select i1 %79, float %133, float %61, !dbg !21
  %167 = select i1 %79, float %134, float %62, !dbg !21
  %168 = select i1 %79, float %135, float %63, !dbg !21
  %169 = select i1 %79, float %136, float %64, !dbg !21
  %170 = select i1 %79, float %155, float 0.000000e+00, !dbg !37
  %171 = select i1 %79, float %156, float 0.000000e+00, !dbg !37
  %172 = select i1 %79, float %157, float 0.000000e+00, !dbg !37
  %173 = select i1 %79, float %158, float 0.000000e+00, !dbg !37
  %174 = select i1 %79, float %159, float 0.000000e+00, !dbg !37
  %175 = select i1 %79, float %160, float 0.000000e+00, !dbg !37
  %176 = select i1 %79, float %113, float %65, !dbg !22
  %177 = select i1 %79, float %114, float %66, !dbg !22
  %178 = select i1 %79, float %115, float %67, !dbg !22
  %179 = select i1 %79, float %116, float %68, !dbg !22
  %180 = select i1 %79, float %117, float %69, !dbg !22
  %181 = select i1 %79, float %118, float %70, !dbg !22
  %182 = select i1 %79, float %119, float %71, !dbg !22
  %183 = select i1 %79, float %120, float %72, !dbg !22
  %184 = lshr i32 %18, 5, !dbg !11
  %185 = and i32 %26, 2044, !dbg !14
  %186 = fsub float %163, %162, !dbg !38
  %187 = fadd float %176, %177, !dbg !41
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !42
  %189 = tail call float @llvm.nvvm.div.full(float %177, float %187), !dbg !43
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !44
  %191 = fmul float %186, %190, !dbg !45
  %192 = fadd float %162, %191, !dbg !46
  %193 = select i1 %79, float %161, float 0.000000e+00, !dbg !47
  %194 = fmul float %186, %186, !dbg !48
  %195 = fmul float %194, %176, !dbg !49
  %196 = fmul float %195, %190, !dbg !50
  %197 = fadd float %193, %196, !dbg !51
  %198 = fsub float %164, %192, !dbg !38
  %199 = fadd float %178, %187, !dbg !41
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !42
  %201 = tail call float @llvm.nvvm.div.full(float %178, float %199), !dbg !43
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !44
  %203 = fmul float %202, %198, !dbg !45
  %204 = fadd float %192, %203, !dbg !46
  %205 = fadd float %170, %197, !dbg !47
  %206 = fmul float %198, %198, !dbg !48
  %207 = fmul float %187, %206, !dbg !49
  %208 = fmul float %202, %207, !dbg !50
  %209 = fadd float %205, %208, !dbg !51
  %210 = fsub float %165, %204, !dbg !38
  %211 = fadd float %179, %199, !dbg !41
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !42
  %213 = tail call float @llvm.nvvm.div.full(float %179, float %211), !dbg !43
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !44
  %215 = fmul float %214, %210, !dbg !45
  %216 = fadd float %204, %215, !dbg !46
  %217 = fadd float %171, %209, !dbg !47
  %218 = fmul float %210, %210, !dbg !48
  %219 = fmul float %199, %218, !dbg !49
  %220 = fmul float %214, %219, !dbg !50
  %221 = fadd float %217, %220, !dbg !51
  %222 = fsub float %166, %216, !dbg !38
  %223 = fadd float %180, %211, !dbg !41
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !42
  %225 = tail call float @llvm.nvvm.div.full(float %180, float %223), !dbg !43
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !44
  %227 = fmul float %226, %222, !dbg !45
  %228 = fadd float %216, %227, !dbg !46
  %229 = fadd float %172, %221, !dbg !47
  %230 = fmul float %222, %222, !dbg !48
  %231 = fmul float %211, %230, !dbg !49
  %232 = fmul float %226, %231, !dbg !50
  %233 = fadd float %229, %232, !dbg !51
  %234 = fsub float %167, %228, !dbg !38
  %235 = fadd float %181, %223, !dbg !41
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !42
  %237 = tail call float @llvm.nvvm.div.full(float %181, float %235), !dbg !43
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !44
  %239 = fmul float %238, %234, !dbg !45
  %240 = fadd float %228, %239, !dbg !46
  %241 = fadd float %173, %233, !dbg !47
  %242 = fmul float %234, %234, !dbg !48
  %243 = fmul float %223, %242, !dbg !49
  %244 = fmul float %238, %243, !dbg !50
  %245 = fadd float %241, %244, !dbg !51
  %246 = fsub float %168, %240, !dbg !38
  %247 = fadd float %182, %235, !dbg !41
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !42
  %249 = tail call float @llvm.nvvm.div.full(float %182, float %247), !dbg !43
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !44
  %251 = fmul float %250, %246, !dbg !45
  %252 = fadd float %240, %251, !dbg !46
  %253 = fadd float %174, %245, !dbg !47
  %254 = fmul float %246, %246, !dbg !48
  %255 = fmul float %235, %254, !dbg !49
  %256 = fmul float %250, %255, !dbg !50
  %257 = fadd float %253, %256, !dbg !51
  %258 = fsub float %169, %252, !dbg !38
  %259 = fadd float %183, %247, !dbg !41
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !42
  %261 = tail call float @llvm.nvvm.div.full(float %183, float %259), !dbg !43
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !44
  %263 = fmul float %262, %258, !dbg !45
  %264 = fadd float %252, %263, !dbg !46
  %265 = fadd float %175, %257, !dbg !47
  %266 = fmul float %258, %258, !dbg !48
  %267 = fmul float %247, %266, !dbg !49
  %268 = fmul float %262, %267, !dbg !50
  %269 = fadd float %265, %268, !dbg !51
  %270 = bitcast float %264 to i32, !dbg !52
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !52
  %272 = bitcast i32 %271 to float, !dbg !52
  %273 = bitcast float %269 to i32, !dbg !52
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !52
  %275 = bitcast i32 %274 to float, !dbg !52
  %276 = bitcast float %259 to i32, !dbg !52
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !52
  %278 = bitcast i32 %277 to float, !dbg !52
  %279 = fsub float %272, %264, !dbg !38
  %280 = fadd float %259, %278, !dbg !41
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !42
  %282 = tail call float @llvm.nvvm.div.full(float %278, float %280), !dbg !43
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !44
  %284 = fmul float %283, %279, !dbg !45
  %285 = fadd float %264, %284, !dbg !46
  %286 = fadd float %269, %275, !dbg !47
  %287 = fmul float %279, %279, !dbg !48
  %288 = fmul float %259, %287, !dbg !49
  %289 = fmul float %283, %288, !dbg !50
  %290 = fadd float %286, %289, !dbg !51
  %291 = bitcast float %285 to i32, !dbg !52
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !52
  %293 = bitcast i32 %292 to float, !dbg !52
  %294 = bitcast float %290 to i32, !dbg !52
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !52
  %296 = bitcast i32 %295 to float, !dbg !52
  %297 = bitcast float %280 to i32, !dbg !52
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = fsub float %293, %285, !dbg !38
  %301 = fadd float %280, %299, !dbg !41
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !42
  %303 = tail call float @llvm.nvvm.div.full(float %299, float %301), !dbg !43
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !44
  %305 = fmul float %304, %300, !dbg !45
  %306 = fadd float %285, %305, !dbg !46
  %307 = fadd float %290, %296, !dbg !47
  %308 = fmul float %300, %300, !dbg !48
  %309 = fmul float %280, %308, !dbg !49
  %310 = fmul float %304, %309, !dbg !50
  %311 = fadd float %307, %310, !dbg !51
  %312 = bitcast float %306 to i32, !dbg !52
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !52
  %314 = bitcast i32 %313 to float, !dbg !52
  %315 = bitcast float %311 to i32, !dbg !52
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !52
  %317 = bitcast i32 %316 to float, !dbg !52
  %318 = bitcast float %301 to i32, !dbg !52
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !52
  %320 = bitcast i32 %319 to float, !dbg !52
  %321 = fsub float %314, %306, !dbg !38
  %322 = fadd float %301, %320, !dbg !41
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !42
  %324 = tail call float @llvm.nvvm.div.full(float %320, float %322), !dbg !43
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !44
  %326 = fmul float %325, %321, !dbg !45
  %327 = fadd float %306, %326, !dbg !46
  %328 = fadd float %311, %317, !dbg !47
  %329 = fmul float %321, %321, !dbg !48
  %330 = fmul float %301, %329, !dbg !49
  %331 = fmul float %325, %330, !dbg !50
  %332 = fadd float %328, %331, !dbg !51
  %333 = bitcast float %327 to i32, !dbg !52
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !52
  %335 = bitcast i32 %334 to float, !dbg !52
  %336 = bitcast float %332 to i32, !dbg !52
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !52
  %338 = bitcast i32 %337 to float, !dbg !52
  %339 = bitcast float %322 to i32, !dbg !52
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !52
  %341 = bitcast i32 %340 to float, !dbg !52
  %342 = fsub float %335, %327, !dbg !38
  %343 = fadd float %322, %341, !dbg !41
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !42
  %345 = tail call float @llvm.nvvm.div.full(float %341, float %343), !dbg !43
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !44
  %347 = fmul float %346, %342, !dbg !45
  %348 = fadd float %327, %347, !dbg !46
  %349 = fadd float %332, %338, !dbg !47
  %350 = fmul float %342, %342, !dbg !48
  %351 = fmul float %322, %350, !dbg !49
  %352 = fmul float %346, %351, !dbg !50
  %353 = fadd float %349, %352, !dbg !51
  %354 = bitcast float %348 to i32, !dbg !52
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !52
  %356 = bitcast i32 %355 to float, !dbg !52
  %357 = bitcast float %353 to i32, !dbg !52
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !52
  %359 = bitcast i32 %358 to float, !dbg !52
  %360 = bitcast float %343 to i32, !dbg !52
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !52
  %362 = bitcast i32 %361 to float, !dbg !52
  %363 = fsub float %356, %348, !dbg !38
  %364 = fadd float %343, %362, !dbg !41
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !42
  %366 = tail call float @llvm.nvvm.div.full(float %362, float %364), !dbg !43
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !44
  %368 = fmul float %367, %363, !dbg !45
  %369 = fadd float %348, %368, !dbg !46
  %370 = fadd float %353, %359, !dbg !47
  %371 = fmul float %363, %363, !dbg !48
  %372 = fmul float %343, %371, !dbg !49
  %373 = fmul float %367, %372, !dbg !50
  %374 = fadd float %370, %373, !dbg !51
  %375 = and i32 %184, 7, !dbg !52
  %376 = icmp eq i32 %20, 0, !dbg !52
  %377 = lshr exact i32 %19, 5, !dbg !52
  %378 = or disjoint i32 %377, %375, !dbg !52
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %378, !dbg !52
  %380 = bitcast float %369 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 %376) #5, !dbg !52
  %381 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %378, !dbg !52
  %382 = bitcast float %374 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 %376) #5, !dbg !52
  %383 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %378, !dbg !52
  %384 = bitcast float %364 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 %376) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %385 = icmp slt i32 %18, 16, !dbg !52
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !52
  %387 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %385) #5, !dbg !52
  %388 = bitcast i32 %387 to float, !dbg !52
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !52
  %390 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %389, i1 %385) #5, !dbg !52
  %391 = bitcast i32 %390 to float, !dbg !52
  %392 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !52
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %385) #5, !dbg !52
  %394 = bitcast i32 %393 to float, !dbg !52
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !52
  %396 = bitcast i32 %395 to float, !dbg !52
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !52
  %398 = bitcast i32 %397 to float, !dbg !52
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !52
  %400 = bitcast i32 %399 to float, !dbg !52
  %401 = fsub float %396, %388, !dbg !38
  %402 = fadd float %394, %400, !dbg !41
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !42
  %404 = tail call float @llvm.nvvm.div.full(float %400, float %402), !dbg !43
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !44
  %406 = fmul float %401, %405, !dbg !45
  %407 = fadd float %406, %388, !dbg !46
  %408 = fadd float %391, %398, !dbg !47
  %409 = fmul float %401, %401, !dbg !48
  %410 = fmul float %409, %394, !dbg !49
  %411 = fmul float %410, %405, !dbg !50
  %412 = fadd float %408, %411, !dbg !51
  %413 = bitcast float %407 to i32, !dbg !52
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 2, i32 31), !dbg !52
  %415 = bitcast i32 %414 to float, !dbg !52
  %416 = bitcast float %412 to i32, !dbg !52
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 2, i32 31), !dbg !52
  %418 = bitcast i32 %417 to float, !dbg !52
  %419 = bitcast float %402 to i32, !dbg !52
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !52
  %421 = bitcast i32 %420 to float, !dbg !52
  %422 = fsub float %415, %407, !dbg !38
  %423 = fadd float %402, %421, !dbg !41
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !42
  %425 = tail call float @llvm.nvvm.div.full(float %421, float %423), !dbg !43
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !44
  %427 = fmul float %422, %426, !dbg !45
  %428 = fadd float %407, %427, !dbg !46
  %429 = fadd float %412, %418, !dbg !47
  %430 = fmul float %422, %422, !dbg !48
  %431 = fmul float %402, %430, !dbg !49
  %432 = fmul float %426, %431, !dbg !50
  %433 = fadd float %429, %432, !dbg !51
  %434 = bitcast float %428 to i32, !dbg !52
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !52
  %436 = bitcast i32 %435 to float, !dbg !52
  %437 = bitcast float %433 to i32, !dbg !52
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !52
  %439 = bitcast i32 %438 to float, !dbg !52
  %440 = bitcast float %423 to i32, !dbg !52
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !52
  %442 = bitcast i32 %441 to float, !dbg !52
  %443 = fsub float %436, %428, !dbg !38
  %444 = fadd float %423, %442, !dbg !41
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !42
  %446 = tail call float @llvm.nvvm.div.full(float %442, float %444), !dbg !43
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !44
  %448 = fmul float %443, %447, !dbg !45
  %449 = fadd float %428, %448, !dbg !46
  %450 = fadd float %433, %439, !dbg !47
  %451 = fmul float %443, %443, !dbg !48
  %452 = fmul float %423, %451, !dbg !49
  %453 = fmul float %447, %452, !dbg !50
  %454 = fadd float %450, %453, !dbg !51
  %455 = and i32 %18, 7, !dbg !52
  %456 = icmp eq i32 %455, 0, !dbg !52
  %457 = and i1 %385, %456, !dbg !52
  %458 = bitcast float %449 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %458, i1 %457) #5, !dbg !52
  %459 = bitcast float %454 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %459, i1 %457) #5, !dbg !52
  %460 = bitcast float %444 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %460, i1 %457) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !52
  %462 = load float, ptr addrspace(3) %461, align 16, !dbg !52
  %463 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %377, !dbg !52
  %464 = load float, ptr addrspace(3) %463, align 16, !dbg !52
  %465 = tail call float @llvm.nvvm.div.full(float %464, float 3.072000e+03), !dbg !53
  %466 = fadd float %465, 0x3EB0C6F7A0000000, !dbg !54
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i59 = icmp eq i32 %474, 0, !dbg !55
  br i1 %.not.i59, label %477, label %475, !dbg !55

475:                                              ; preds = %._crit_edge
  %476 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %466), !dbg !55
  br label %__nv_rsqrtf.exit61, !dbg !55

477:                                              ; preds = %._crit_edge
  %478 = tail call float @llvm.nvvm.rsqrt.approx.f(float %466), !dbg !55
  br label %__nv_rsqrtf.exit61, !dbg !55

__nv_rsqrtf.exit61:                               ; preds = %475, %477
  %.0.i60 = phi float [ %476, %475 ], [ %478, %477 ], !dbg !55
  %479 = and i32 %24, 4088
  %480 = lshr i32 %479, 11
  %481 = shl nuw nsw i32 %480, 2
  %482 = or disjoint i32 %481, %479
  %483 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %482
  %484 = or disjoint i32 %479, 4
  %485 = lshr i32 %24, 9
  %486 = and i32 %485, 4
  %487 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %486
  %488 = getelementptr inbounds nuw float, ptr addrspace(3) %487, i32 %484
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %185
  %490 = or disjoint i32 %185, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %490
  %491 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %185
  %gep72 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %490
  %.idx = shl nuw nsw i32 %480, 4
  %492 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx
  %493 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %492, i32 %479
  %494 = zext nneg i32 %185 to i64, !dbg !56
  %495 = getelementptr inbounds nuw i8, ptr addrspace(3) %489, i32 8
  %496 = getelementptr inbounds nuw i8, ptr addrspace(3) %493, i32 4
  %497 = getelementptr inbounds nuw i8, ptr addrspace(3) %493, i32 8
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) %493, i32 12
  br label %499, !dbg !56

499:                                              ; preds = %__nv_rsqrtf.exit61, %499
  %500 = phi i1 [ true, %__nv_rsqrtf.exit61 ], [ false, %499 ]
  %indvars.iv112 = phi i64 [ 0, %__nv_rsqrtf.exit61 ], [ 2048, %499 ]
  %501 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %636, %499 ]
  %502 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %637, %499 ]
  %503 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %635, %499 ]
  %504 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit61 ], [ %660, %499 ]
  %505 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %651, %499 ]
  %506 = or disjoint i64 %indvars.iv112, %494, !dbg !57
  %507 = or disjoint i64 %indvars.iv112, %28, !dbg !57
  %508 = icmp samesign ult i64 %506, 3072, !dbg !58
  %509 = icmp samesign ult i64 %507, 3072, !dbg !58
  %510 = trunc nuw nsw i64 %507 to i32, !dbg !59
  %511 = add i32 %27, %510, !dbg !59
  %512 = sext i32 %511 to i64, !dbg !60
  %513 = getelementptr bfloat, ptr addrspace(1) %0, i64 %512, !dbg !60
  %514 = and i1 %23, %508, !dbg !61
  %515 = and i1 %22, %509, !dbg !61
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %513, i1 %515) #5, !dbg !62
  %517 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !62
  %518 = bitcast i32 %517 to <2 x bfloat>, !dbg !62
  %519 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !62
  %520 = bitcast i32 %519 to <2 x bfloat>, !dbg !62
  %521 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !62
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !62
  %523 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !62
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !62
  %525 = extractelement <2 x bfloat> %518, i64 0, !dbg !62
  %526 = extractelement <2 x bfloat> %518, i64 1, !dbg !62
  %527 = extractelement <2 x bfloat> %520, i64 0, !dbg !62
  %528 = extractelement <2 x bfloat> %520, i64 1, !dbg !62
  %529 = extractelement <2 x bfloat> %522, i64 0, !dbg !62
  %530 = extractelement <2 x bfloat> %522, i64 1, !dbg !62
  %531 = extractelement <2 x bfloat> %524, i64 0, !dbg !62
  %532 = extractelement <2 x bfloat> %524, i64 1, !dbg !62
  %533 = fpext bfloat %525 to float, !dbg !63
  %534 = fpext bfloat %526 to float, !dbg !63
  %535 = fpext bfloat %527 to float, !dbg !63
  %536 = fpext bfloat %528 to float, !dbg !63
  %537 = fpext bfloat %529 to float, !dbg !63
  %538 = fpext bfloat %530 to float, !dbg !63
  %539 = fpext bfloat %531 to float, !dbg !63
  %540 = fpext bfloat %532 to float, !dbg !63
  %541 = add nuw nsw i64 %506, 3072, !dbg !64
  %542 = getelementptr float, ptr addrspace(1) %1, i64 %541, !dbg !65
  %543 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %542, i1 %508) #5, !dbg !66
  %544 = extractvalue { i32, i32, i32, i32 } %543, 0, !dbg !66
  %545 = extractvalue { i32, i32, i32, i32 } %543, 1, !dbg !66
  %546 = extractvalue { i32, i32, i32, i32 } %543, 2, !dbg !66
  %547 = extractvalue { i32, i32, i32, i32 } %543, 3, !dbg !66
  %548 = getelementptr bfloat, ptr addrspace(1) %2, i64 %541, !dbg !67
  %549 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %548, i1 %508) #5, !dbg !68
  %550 = extractvalue { i32, i32 } %549, 0, !dbg !68
  %551 = bitcast i32 %550 to <2 x bfloat>, !dbg !68
  %552 = extractvalue { i32, i32 } %549, 1, !dbg !68
  %553 = bitcast i32 %552 to <2 x bfloat>, !dbg !68
  %554 = getelementptr float, ptr addrspace(1) %1, i64 %506, !dbg !69
  %555 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %554, i1 %508) #5, !dbg !70
  %556 = extractvalue { i32, i32, i32, i32 } %555, 0, !dbg !70
  %557 = extractvalue { i32, i32, i32, i32 } %555, 1, !dbg !70
  %558 = extractvalue { i32, i32, i32, i32 } %555, 2, !dbg !70
  %559 = extractvalue { i32, i32, i32, i32 } %555, 3, !dbg !70
  %560 = getelementptr bfloat, ptr addrspace(1) %2, i64 %506, !dbg !71
  %561 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %560, i1 %508) #5, !dbg !72
  %562 = extractvalue { i32, i32 } %561, 0, !dbg !72
  %563 = bitcast i32 %562 to <2 x bfloat>, !dbg !72
  %564 = extractvalue { i32, i32 } %561, 1, !dbg !72
  %565 = bitcast i32 %564 to <2 x bfloat>, !dbg !72
  %566 = fsub float %533, %462, !dbg !73
  %567 = fsub float %534, %462, !dbg !73
  %568 = fsub float %535, %462, !dbg !73
  %569 = fsub float %536, %462, !dbg !73
  %570 = fsub float %537, %462, !dbg !73
  %571 = fsub float %538, %462, !dbg !73
  %572 = fsub float %539, %462, !dbg !73
  %573 = fsub float %540, %462, !dbg !73
  %574 = fmul float %.0.i60, %566, !dbg !74
  %575 = fmul float %.0.i60, %567, !dbg !74
  %576 = fmul float %.0.i60, %568, !dbg !74
  %577 = fmul float %.0.i60, %569, !dbg !74
  %578 = fmul float %.0.i60, %570, !dbg !74
  %579 = fmul float %.0.i60, %571, !dbg !74
  %580 = fmul float %.0.i60, %572, !dbg !74
  %581 = fmul float %.0.i60, %573, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %582 = bitcast float %574 to i32, !dbg !74
  %583 = bitcast float %575 to i32, !dbg !74
  %584 = bitcast float %576 to i32, !dbg !74
  %585 = bitcast float %577 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %483, i32 %582, i32 %583, i32 %584, i32 %585, i1 true) #5, !dbg !74
  %586 = bitcast float %578 to i32, !dbg !74
  %587 = bitcast float %579 to i32, !dbg !74
  %588 = bitcast float %580 to i32, !dbg !74
  %589 = bitcast float %581 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %488, i32 %586, i32 %587, i32 %588, i32 %589, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %590 = insertelement <2 x i32> poison, i32 %546, i64 0, !dbg !66
  %591 = insertelement <2 x i32> %590, i32 %547, i64 1, !dbg !66
  %592 = bitcast <2 x i32> %591 to <2 x float>, !dbg !66
  %593 = fpext <2 x bfloat> %553 to <2 x float>, !dbg !75
  %594 = insertelement <2 x i32> poison, i32 %558, i64 0, !dbg !70
  %595 = insertelement <2 x i32> %594, i32 %559, i64 1, !dbg !70
  %596 = bitcast <2 x i32> %595 to <2 x float>, !dbg !70
  %597 = fpext <2 x bfloat> %565 to <2 x float>, !dbg !76
  %598 = load <2 x float>, ptr addrspace(3) %495, align 8, !dbg !74
  %599 = fadd <2 x float> %592, %593, !dbg !77
  %600 = fadd <2 x float> %599, splat (float 1.000000e+00), !dbg !78
  %601 = fmul <2 x float> %600, %598, !dbg !79
  %602 = fadd <2 x float> %596, %597, !dbg !80
  %603 = fadd <2 x float> %602, %601, !dbg !81
  %604 = extractelement <2 x float> %603, i64 0, !dbg !82
  %605 = fcmp olt float %501, %604, !dbg !83
  %606 = extractelement <2 x float> %603, i64 1, !dbg !82
  %607 = fcmp olt float %502, %606, !dbg !83
  %608 = fcmp uno <2 x float> %503, zeroinitializer, !dbg !85
  %609 = fcmp uno float %501, 0.000000e+00, !dbg !85
  %610 = fcmp uno float %502, 0.000000e+00, !dbg !85
  %611 = fcmp uno <4 x float> %505, zeroinitializer, !dbg !85
  %612 = or i1 %609, %605, !dbg !86
  %613 = or i1 %610, %607, !dbg !86
  %614 = insertelement <2 x i32> poison, i32 %544, i64 0, !dbg !66
  %615 = insertelement <2 x i32> %614, i32 %545, i64 1, !dbg !66
  %616 = bitcast <2 x i32> %615 to <2 x float>, !dbg !66
  %617 = fpext <2 x bfloat> %551 to <2 x float>, !dbg !75
  %618 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !70
  %619 = insertelement <2 x i32> %618, i32 %557, i64 1, !dbg !70
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !70
  %621 = fpext <2 x bfloat> %563 to <2 x float>, !dbg !76
  %622 = load <2 x float>, ptr addrspace(3) %489, align 16, !dbg !74
  %623 = fadd <2 x float> %616, %617, !dbg !77
  %624 = fadd <2 x float> %623, splat (float 1.000000e+00), !dbg !78
  %625 = fmul <2 x float> %624, %622, !dbg !79
  %626 = fadd <2 x float> %620, %621, !dbg !80
  %627 = fadd <2 x float> %626, %625, !dbg !81
  %628 = fcmp olt <2 x float> %503, %627, !dbg !83
  %629 = or <2 x i1> %608, %628, !dbg !86
  %630 = select <2 x i1> %629, <2 x float> %503, <2 x float> %627, !dbg !87
  %631 = select i1 %612, float %501, float %604, !dbg !87
  %632 = select i1 %613, float %502, float %606, !dbg !87
  %633 = insertelement <2 x i1> poison, i1 %514, i64 0, !dbg !88
  %634 = shufflevector <2 x i1> %633, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !88
  %635 = select <2 x i1> %634, <2 x float> %630, <2 x float> %503, !dbg !88
  %636 = select i1 %514, float %631, float %501, !dbg !88
  %637 = select i1 %514, float %632, float %502, !dbg !88
  %638 = extractelement <2 x float> %627, i64 0, !dbg !82
  %639 = extractelement <2 x float> %627, i64 1, !dbg !82
  %640 = fcmp uno <8 x float> %504, zeroinitializer, !dbg !89
  %641 = load <4 x float>, ptr addrspace(3) %gep, align 16, !dbg !74
  %642 = shufflevector <2 x float> %624, <2 x float> %600, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %643 = fmul <4 x float> %642, %641, !dbg !79
  %644 = shufflevector <2 x float> %626, <2 x float> %602, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %645 = fadd <4 x float> %644, %643, !dbg !81
  %646 = fcmp olt <4 x float> %505, %645, !dbg !83
  %647 = or <4 x i1> %611, %646, !dbg !86
  %648 = select <4 x i1> %647, <4 x float> %505, <4 x float> %645, !dbg !87
  %649 = insertelement <4 x i1> poison, i1 %514, i64 0, !dbg !88
  %650 = shufflevector <4 x i1> %649, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !88
  %651 = select <4 x i1> %650, <4 x float> %648, <4 x float> %505, !dbg !88
  %652 = shufflevector <2 x float> %627, <2 x float> %603, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %653 = shufflevector <4 x float> %645, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %654 = shufflevector <8 x float> %652, <8 x float> %653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !91
  %655 = fcmp ogt <8 x float> %504, %654, !dbg !91
  %656 = or <8 x i1> %640, %655, !dbg !92
  %657 = select <8 x i1> %656, <8 x float> %504, <8 x float> %654, !dbg !93
  %658 = insertelement <8 x i1> poison, i1 %514, i64 0, !dbg !94
  %659 = shufflevector <8 x i1> %658, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !94
  %660 = select <8 x i1> %659, <8 x float> %657, <8 x float> %504, !dbg !94
  %661 = getelementptr bfloat, ptr addrspace(1) %3, i64 %512, !dbg !95
  %662 = fptrunc float %638 to bfloat, !dbg !82
  %663 = fptrunc float %639 to bfloat, !dbg !82
  %664 = fptrunc float %604 to bfloat, !dbg !82
  %665 = fptrunc float %606 to bfloat, !dbg !82
  %666 = extractelement <4 x float> %645, i64 0, !dbg !82
  %667 = fptrunc float %666 to bfloat, !dbg !82
  %668 = extractelement <4 x float> %645, i64 1, !dbg !82
  %669 = fptrunc float %668 to bfloat, !dbg !82
  %670 = extractelement <4 x float> %645, i64 2, !dbg !82
  %671 = fptrunc float %670 to bfloat, !dbg !82
  %672 = extractelement <4 x float> %645, i64 3, !dbg !82
  %673 = fptrunc float %672 to bfloat, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %674 = bitcast bfloat %662 to i16, !dbg !82
  %675 = bitcast bfloat %663 to i16, !dbg !82
  %676 = bitcast bfloat %664 to i16, !dbg !82
  %677 = bitcast bfloat %665 to i16, !dbg !82
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %491, i16 %674, i16 %675, i16 %676, i16 %677, i1 true) #5, !dbg !82
  %678 = bitcast bfloat %667 to i16, !dbg !82
  %679 = bitcast bfloat %669 to i16, !dbg !82
  %680 = bitcast bfloat %671 to i16, !dbg !82
  %681 = bitcast bfloat %673 to i16, !dbg !82
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %gep72, i16 %678, i16 %679, i16 %680, i16 %681, i1 true) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %.extract = load i32, ptr addrspace(3) %493, align 16, !dbg !82
  %.extract63 = load i32, ptr addrspace(3) %496, align 4, !dbg !82
  %.extract65 = load i32, ptr addrspace(3) %497, align 8, !dbg !82
  %.extract67 = load i32, ptr addrspace(3) %498, align 4, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %661, i1 %515) #5, !dbg !82
  br i1 %500, label %499, label %682, !dbg !56

682:                                              ; preds = %499
  %683 = and i32 %18, 1, !dbg !11
  %684 = or disjoint i32 %17, %683, !dbg !12
  %685 = icmp slt i32 %684, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %686 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %635, <2 x i32> <i32 0, i32 2>, !dbg !98
  %687 = fcmp olt <2 x float> %686, %635, !dbg !98
  %688 = fcmp uno <2 x float> %686, %635, !dbg !98
  %shift = shufflevector <2 x i1> %687, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %689 = or <2 x i1> %shift, %688, !dbg !99
  %690 = extractelement <2 x i1> %689, i64 0, !dbg !99
  %691 = extractelement <2 x float> %635, i64 0, !dbg !100
  %692 = extractelement <2 x float> %635, i64 1, !dbg !100
  %693 = select i1 %690, float %691, float %692, !dbg !100
  %694 = fcmp olt float %693, %636, !dbg !98
  %695 = fcmp uno float %693, 0.000000e+00, !dbg !101
  %696 = or i1 %694, %695, !dbg !99
  %697 = select i1 %696, float %693, float %636, !dbg !100
  %698 = fcmp olt float %697, %637, !dbg !98
  %699 = fcmp uno float %697, 0.000000e+00, !dbg !101
  %700 = or i1 %698, %699, !dbg !99
  %701 = select i1 %700, float %697, float %637, !dbg !100
  %702 = extractelement <4 x float> %651, i64 0, !dbg !98
  %703 = extractelement <4 x float> %651, i64 1, !dbg !98
  %704 = fcmp olt float %702, %703, !dbg !98
  %705 = fcmp uno float %702, 0.000000e+00, !dbg !101
  %706 = or i1 %704, %705, !dbg !99
  %707 = select i1 %706, float %702, float %703, !dbg !100
  %708 = extractelement <4 x float> %651, i64 2, !dbg !98
  %709 = fcmp olt float %707, %708, !dbg !98
  %710 = fcmp uno float %707, 0.000000e+00, !dbg !101
  %711 = or i1 %709, %710, !dbg !99
  %712 = select i1 %711, float %707, float %708, !dbg !100
  %713 = extractelement <4 x float> %651, i64 3, !dbg !98
  %714 = fcmp olt float %712, %713, !dbg !98
  %715 = fcmp uno float %712, 0.000000e+00, !dbg !101
  %716 = or i1 %714, %715, !dbg !99
  %717 = select i1 %716, float %712, float %713, !dbg !100
  %718 = bitcast float %701 to i32, !dbg !96
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 16, i32 31), !dbg !96
  %720 = bitcast i32 %719 to float, !dbg !96
  %721 = fcmp olt float %701, %720, !dbg !98
  %722 = fcmp uno float %701, 0.000000e+00, !dbg !101
  %723 = or i1 %722, %721, !dbg !99
  %724 = select i1 %723, float %701, float %720, !dbg !100
  %725 = bitcast float %724 to i32, !dbg !96
  %726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 8, i32 31), !dbg !96
  %727 = bitcast i32 %726 to float, !dbg !96
  %728 = fcmp olt float %724, %727, !dbg !98
  %729 = fcmp uno float %724, 0.000000e+00, !dbg !101
  %730 = or i1 %728, %729, !dbg !99
  %731 = select i1 %730, float %724, float %727, !dbg !100
  %732 = bitcast float %731 to i32, !dbg !96
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !96
  %734 = bitcast i32 %733 to float, !dbg !96
  %735 = fcmp olt float %731, %734, !dbg !98
  %736 = fcmp uno float %731, 0.000000e+00, !dbg !101
  %737 = or i1 %735, %736, !dbg !99
  %738 = select i1 %737, float %731, float %734, !dbg !100
  %739 = bitcast float %738 to i32, !dbg !96
  %740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %739, i32 2, i32 31), !dbg !96
  %741 = bitcast i32 %740 to float, !dbg !96
  %742 = fcmp olt float %738, %741, !dbg !98
  %743 = fcmp uno float %738, 0.000000e+00, !dbg !101
  %744 = or i1 %742, %743, !dbg !99
  %745 = select i1 %744, float %738, float %741, !dbg !100
  %746 = bitcast float %745 to i32, !dbg !96
  %747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %746, i32 1, i32 31), !dbg !96
  %748 = bitcast i32 %747 to float, !dbg !96
  %749 = fcmp olt float %745, %748, !dbg !98
  %750 = fcmp uno float %745, 0.000000e+00, !dbg !101
  %751 = or i1 %749, %750, !dbg !99
  %752 = bitcast float %717 to i32, !dbg !96
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 16, i32 31), !dbg !96
  %754 = bitcast i32 %753 to float, !dbg !96
  %755 = fcmp olt float %717, %754, !dbg !98
  %756 = fcmp uno float %717, 0.000000e+00, !dbg !101
  %757 = or i1 %756, %755, !dbg !99
  %758 = select i1 %757, float %717, float %754, !dbg !100
  %759 = bitcast float %758 to i32, !dbg !96
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 8, i32 31), !dbg !96
  %761 = bitcast i32 %760 to float, !dbg !96
  %762 = fcmp olt float %758, %761, !dbg !98
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !101
  %764 = or i1 %762, %763, !dbg !99
  %765 = select i1 %764, float %758, float %761, !dbg !100
  %766 = bitcast float %765 to i32, !dbg !96
  %767 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %766, i32 4, i32 31), !dbg !96
  %768 = bitcast i32 %767 to float, !dbg !96
  %769 = fcmp olt float %765, %768, !dbg !98
  %770 = fcmp uno float %765, 0.000000e+00, !dbg !101
  %771 = or i1 %769, %770, !dbg !99
  %772 = select i1 %771, float %765, float %768, !dbg !100
  %773 = bitcast float %772 to i32, !dbg !96
  %774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %773, i32 2, i32 31), !dbg !96
  %775 = bitcast i32 %774 to float, !dbg !96
  %776 = fcmp olt float %772, %775, !dbg !98
  %777 = fcmp uno float %772, 0.000000e+00, !dbg !101
  %778 = or i1 %776, %777, !dbg !99
  %779 = select i1 %778, float %772, float %775, !dbg !100
  %780 = bitcast float %779 to i32, !dbg !96
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 1, i32 31), !dbg !96
  %782 = bitcast i32 %781 to float, !dbg !96
  %783 = fcmp olt float %779, %782, !dbg !98
  %784 = fcmp uno float %779, 0.000000e+00, !dbg !101
  %785 = or i1 %783, %784, !dbg !99
  %786 = and i32 %184, 15, !dbg !96
  %787 = getelementptr float, ptr addrspace(3) @global_smem, i32 %786, !dbg !96
  %788 = select i1 %751, i32 %746, i32 %747, !dbg !100
  %789 = insertelement <1 x i32> poison, i32 %788, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %789, i1 %376) #5, !dbg !96
  %790 = or disjoint i32 %786, 16, !dbg !96
  %791 = getelementptr float, ptr addrspace(3) @global_smem, i32 %790, !dbg !96
  %792 = select i1 %785, i32 %780, i32 %781, !dbg !100
  %793 = insertelement <1 x i32> poison, i32 %792, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %791, <1 x i32> %793, i1 %376) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %794 = icmp slt i32 %18, 32, !dbg !96
  %795 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %794) #5, !dbg !96
  %796 = bitcast i32 %795 to float, !dbg !96
  %797 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 8, i32 31), !dbg !96
  %798 = bitcast i32 %797 to float, !dbg !96
  %799 = fcmp olt float %796, %798, !dbg !98
  %800 = fcmp uno float %796, 0.000000e+00, !dbg !101
  %801 = or i1 %800, %799, !dbg !99
  %802 = select i1 %801, float %796, float %798, !dbg !100
  %803 = bitcast float %802 to i32, !dbg !96
  %804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %803, i32 4, i32 31), !dbg !96
  %805 = bitcast i32 %804 to float, !dbg !96
  %806 = fcmp olt float %802, %805, !dbg !98
  %807 = fcmp uno float %802, 0.000000e+00, !dbg !101
  %808 = or i1 %806, %807, !dbg !99
  %809 = select i1 %808, float %802, float %805, !dbg !100
  %810 = bitcast float %809 to i32, !dbg !96
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 2, i32 31), !dbg !96
  %812 = bitcast i32 %811 to float, !dbg !96
  %813 = fcmp olt float %809, %812, !dbg !98
  %814 = fcmp uno float %809, 0.000000e+00, !dbg !101
  %815 = or i1 %813, %814, !dbg !99
  %816 = select i1 %815, float %809, float %812, !dbg !100
  %817 = bitcast float %816 to i32, !dbg !96
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 1, i32 31), !dbg !96
  %819 = bitcast i32 %818 to float, !dbg !96
  %820 = fcmp olt float %816, %819, !dbg !98
  %821 = fcmp uno float %816, 0.000000e+00, !dbg !101
  %822 = or i1 %820, %821, !dbg !99
  %823 = and i32 %18, 15, !dbg !96
  %824 = icmp eq i32 %823, 0, !dbg !96
  %825 = and i1 %794, %824, !dbg !96
  %826 = select i1 %822, i32 %817, i32 %818, !dbg !100
  %827 = insertelement <1 x i32> poison, i32 %826, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %827, i1 %825) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %828 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !96
  %829 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %830 = bitcast float %828 to i32, !dbg !102
  %831 = bitcast float %829 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %830, i32 %831, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %832 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %683, !dbg !102
  %833 = load float, ptr addrspace(3) %832, align 4, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %834 = extractelement <8 x float> %660, i64 0, !dbg !105
  %835 = extractelement <8 x float> %660, i64 1, !dbg !105
  %836 = fcmp ogt float %834, %835, !dbg !105
  %837 = fcmp uno float %834, 0.000000e+00, !dbg !106
  %838 = or i1 %836, %837, !dbg !107
  %839 = select i1 %838, float %834, float %835, !dbg !108
  %840 = extractelement <8 x float> %660, i64 2, !dbg !105
  %841 = fcmp ogt float %839, %840, !dbg !105
  %842 = fcmp uno float %839, 0.000000e+00, !dbg !106
  %843 = or i1 %841, %842, !dbg !107
  %844 = select i1 %843, float %839, float %840, !dbg !108
  %845 = extractelement <8 x float> %660, i64 3, !dbg !105
  %846 = fcmp ogt float %844, %845, !dbg !105
  %847 = fcmp uno float %844, 0.000000e+00, !dbg !106
  %848 = or i1 %846, %847, !dbg !107
  %849 = select i1 %848, float %844, float %845, !dbg !108
  %850 = extractelement <8 x float> %660, i64 4, !dbg !105
  %851 = extractelement <8 x float> %660, i64 5, !dbg !105
  %852 = fcmp ogt float %850, %851, !dbg !105
  %853 = fcmp uno float %850, 0.000000e+00, !dbg !106
  %854 = or i1 %852, %853, !dbg !107
  %855 = select i1 %854, float %850, float %851, !dbg !108
  %856 = extractelement <8 x float> %660, i64 6, !dbg !105
  %857 = fcmp ogt float %855, %856, !dbg !105
  %858 = fcmp uno float %855, 0.000000e+00, !dbg !106
  %859 = or i1 %857, %858, !dbg !107
  %860 = select i1 %859, float %855, float %856, !dbg !108
  %861 = extractelement <8 x float> %660, i64 7, !dbg !105
  %862 = fcmp ogt float %860, %861, !dbg !105
  %863 = fcmp uno float %860, 0.000000e+00, !dbg !106
  %864 = or i1 %862, %863, !dbg !107
  %865 = select i1 %864, float %860, float %861, !dbg !108
  %866 = bitcast float %849 to i32, !dbg !103
  %867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %866, i32 16, i32 31), !dbg !103
  %868 = bitcast i32 %867 to float, !dbg !103
  %869 = fcmp ogt float %849, %868, !dbg !105
  %870 = fcmp uno float %849, 0.000000e+00, !dbg !106
  %871 = or i1 %870, %869, !dbg !107
  %872 = select i1 %871, float %849, float %868, !dbg !108
  %873 = bitcast float %872 to i32, !dbg !103
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 8, i32 31), !dbg !103
  %875 = bitcast i32 %874 to float, !dbg !103
  %876 = fcmp ogt float %872, %875, !dbg !105
  %877 = fcmp uno float %872, 0.000000e+00, !dbg !106
  %878 = or i1 %876, %877, !dbg !107
  %879 = select i1 %878, float %872, float %875, !dbg !108
  %880 = bitcast float %879 to i32, !dbg !103
  %881 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %880, i32 4, i32 31), !dbg !103
  %882 = bitcast i32 %881 to float, !dbg !103
  %883 = fcmp ogt float %879, %882, !dbg !105
  %884 = fcmp uno float %879, 0.000000e+00, !dbg !106
  %885 = or i1 %883, %884, !dbg !107
  %886 = select i1 %885, float %879, float %882, !dbg !108
  %887 = bitcast float %886 to i32, !dbg !103
  %888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %887, i32 2, i32 31), !dbg !103
  %889 = bitcast i32 %888 to float, !dbg !103
  %890 = fcmp ogt float %886, %889, !dbg !105
  %891 = fcmp uno float %886, 0.000000e+00, !dbg !106
  %892 = or i1 %890, %891, !dbg !107
  %893 = select i1 %892, float %886, float %889, !dbg !108
  %894 = bitcast float %893 to i32, !dbg !103
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 1, i32 31), !dbg !103
  %896 = bitcast i32 %895 to float, !dbg !103
  %897 = fcmp ogt float %893, %896, !dbg !105
  %898 = fcmp uno float %893, 0.000000e+00, !dbg !106
  %899 = or i1 %897, %898, !dbg !107
  %900 = bitcast float %865 to i32, !dbg !103
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 16, i32 31), !dbg !103
  %902 = bitcast i32 %901 to float, !dbg !103
  %903 = fcmp ogt float %865, %902, !dbg !105
  %904 = fcmp uno float %865, 0.000000e+00, !dbg !106
  %905 = or i1 %904, %903, !dbg !107
  %906 = select i1 %905, float %865, float %902, !dbg !108
  %907 = bitcast float %906 to i32, !dbg !103
  %908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %907, i32 8, i32 31), !dbg !103
  %909 = bitcast i32 %908 to float, !dbg !103
  %910 = fcmp ogt float %906, %909, !dbg !105
  %911 = fcmp uno float %906, 0.000000e+00, !dbg !106
  %912 = or i1 %910, %911, !dbg !107
  %913 = select i1 %912, float %906, float %909, !dbg !108
  %914 = bitcast float %913 to i32, !dbg !103
  %915 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %914, i32 4, i32 31), !dbg !103
  %916 = bitcast i32 %915 to float, !dbg !103
  %917 = fcmp ogt float %913, %916, !dbg !105
  %918 = fcmp uno float %913, 0.000000e+00, !dbg !106
  %919 = or i1 %917, %918, !dbg !107
  %920 = select i1 %919, float %913, float %916, !dbg !108
  %921 = bitcast float %920 to i32, !dbg !103
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 2, i32 31), !dbg !103
  %923 = bitcast i32 %922 to float, !dbg !103
  %924 = fcmp ogt float %920, %923, !dbg !105
  %925 = fcmp uno float %920, 0.000000e+00, !dbg !106
  %926 = or i1 %924, %925, !dbg !107
  %927 = select i1 %926, float %920, float %923, !dbg !108
  %928 = bitcast float %927 to i32, !dbg !103
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %928, i32 1, i32 31), !dbg !103
  %930 = bitcast i32 %929 to float, !dbg !103
  %931 = fcmp ogt float %927, %930, !dbg !105
  %932 = fcmp uno float %927, 0.000000e+00, !dbg !106
  %933 = or i1 %931, %932, !dbg !107
  %934 = select i1 %899, i32 %894, i32 %895, !dbg !108
  %935 = insertelement <1 x i32> poison, i32 %934, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %787, <1 x i32> %935, i1 %376) #5, !dbg !103
  %936 = select i1 %933, i32 %928, i32 %929, !dbg !108
  %937 = insertelement <1 x i32> poison, i32 %936, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %791, <1 x i32> %937, i1 %376) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %938 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %794) #5, !dbg !103
  %939 = bitcast i32 %938 to float, !dbg !103
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 8, i32 31), !dbg !103
  %941 = bitcast i32 %940 to float, !dbg !103
  %942 = fcmp ogt float %939, %941, !dbg !105
  %943 = fcmp uno float %939, 0.000000e+00, !dbg !106
  %944 = or i1 %943, %942, !dbg !107
  %945 = select i1 %944, float %939, float %941, !dbg !108
  %946 = bitcast float %945 to i32, !dbg !103
  %947 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %946, i32 4, i32 31), !dbg !103
  %948 = bitcast i32 %947 to float, !dbg !103
  %949 = fcmp ogt float %945, %948, !dbg !105
  %950 = fcmp uno float %945, 0.000000e+00, !dbg !106
  %951 = or i1 %949, %950, !dbg !107
  %952 = select i1 %951, float %945, float %948, !dbg !108
  %953 = bitcast float %952 to i32, !dbg !103
  %954 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %953, i32 2, i32 31), !dbg !103
  %955 = bitcast i32 %954 to float, !dbg !103
  %956 = fcmp ogt float %952, %955, !dbg !105
  %957 = fcmp uno float %952, 0.000000e+00, !dbg !106
  %958 = or i1 %956, %957, !dbg !107
  %959 = select i1 %958, float %952, float %955, !dbg !108
  %960 = bitcast float %959 to i32, !dbg !103
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 1, i32 31), !dbg !103
  %962 = bitcast i32 %961 to float, !dbg !103
  %963 = fcmp ogt float %959, %962, !dbg !105
  %964 = fcmp uno float %959, 0.000000e+00, !dbg !106
  %965 = or i1 %963, %964, !dbg !107
  %966 = select i1 %965, i32 %960, i32 %961, !dbg !108
  %967 = insertelement <1 x i32> poison, i32 %966, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %967, i1 %825) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %968 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !103
  %969 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %970 = bitcast float %968 to i32, !dbg !109
  %971 = bitcast float %969 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %970, i32 %971, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %972 = load float, ptr addrspace(3) %832, align 4, !dbg !109
  %973 = sext i32 %684 to i64, !dbg !110
  %974 = getelementptr bfloat, ptr addrspace(1) %4, i64 %973, !dbg !110
  %975 = fptrunc float %833 to bfloat, !dbg !102
  %976 = and i32 %18, 510, !dbg !102
  %977 = icmp eq i32 %976, 0, !dbg !102
  %978 = bitcast bfloat %975 to i16, !dbg !102
  %979 = and i1 %977, %685, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %978, ptr addrspace(1) %974, i1 %979) #5, !dbg !102
  %980 = getelementptr bfloat, ptr addrspace(1) %5, i64 %973, !dbg !111
  %981 = fptrunc float %972 to bfloat, !dbg !109
  %982 = bitcast bfloat %981 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %982, ptr addrspace(1) %980, i1 %979) #5, !dbg !109
  %983 = getelementptr bfloat, ptr addrspace(1) %6, i64 %973, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %978, ptr addrspace(1) %983, i1 %979) #5, !dbg !113
  %984 = getelementptr bfloat, ptr addrspace(1) %7, i64 %973, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %982, ptr addrspace(1) %984, i1 %979) #5, !dbg !115
  %985 = getelementptr bfloat, ptr addrspace(1) %8, i64 %973, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %978, ptr addrspace(1) %985, i1 %979) #5, !dbg !117
  %986 = getelementptr bfloat, ptr addrspace(1) %9, i64 %973, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %982, ptr addrspace(1) %986, i1 %979) #5, !dbg !119
  %.inv = fcmp oge float %828, 0.000000e+00, !dbg !120
  %987 = select i1 %.inv, float 0.000000e+00, float %828, !dbg !120
  %.inv4 = fcmp oge float %829, 0.000000e+00, !dbg !120
  %988 = select i1 %.inv4, float 0.000000e+00, float %829, !dbg !120
  %989 = fsub float 0.000000e+00, %987, !dbg !122
  %990 = fsub float 0.000000e+00, %988, !dbg !122
  %.inv5 = fcmp ole float %968, 0.000000e+00, !dbg !123
  %991 = select i1 %.inv5, float 0.000000e+00, float %968, !dbg !123
  %.inv6 = fcmp ole float %969, 0.000000e+00, !dbg !123
  %992 = select i1 %.inv6, float 0.000000e+00, float %969, !dbg !123
  %993 = fcmp ogt float %989, %991, !dbg !125
  %994 = fcmp ogt float %990, %992, !dbg !125
  %995 = fcmp uno float %989, 0.000000e+00, !dbg !127
  %996 = fcmp uno float %990, 0.000000e+00, !dbg !127
  %997 = or i1 %995, %993, !dbg !128
  %998 = or i1 %996, %994, !dbg !128
  %999 = select i1 %997, float %989, float %991, !dbg !129
  %1000 = select i1 %998, float %990, float %992, !dbg !129
  %1001 = fmul float %999, 0x3F80204080000000, !dbg !130
  %1002 = fmul float %1000, 0x3F80204080000000, !dbg !130
  %1003 = fcmp ogt float %1001, 0x3EE4F8B580000000, !dbg !131
  %1004 = fcmp ogt float %1002, 0x3EE4F8B580000000, !dbg !131
  %1005 = fcmp uno float %1001, 0.000000e+00, !dbg !133
  %1006 = fcmp uno float %1002, 0.000000e+00, !dbg !133
  %1007 = or i1 %1003, %1005, !dbg !134
  %1008 = or i1 %1004, %1006, !dbg !134
  %1009 = select i1 %1007, float %1001, float 0x3EE4F8B580000000, !dbg !135
  %1010 = select i1 %1008, float %1002, float 0x3EE4F8B580000000, !dbg !135
  %1011 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1009), !dbg !136
  %1012 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1010), !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1013 = bitcast float %1011 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1013, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1013, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1013, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1013, i1 true) #5, !dbg !137
  %1014 = bitcast float %1012 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1014, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1014, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1014, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1014, i1 true) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1015 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %377, !dbg !137
  %1016 = load float, ptr addrspace(3) %1015, align 8, !dbg !137
  %1017 = add i32 %25, %27, !dbg !138
  %1018 = sext i32 %1017 to i64, !dbg !139
  %1019 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1018, !dbg !139
  %1020 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1019, i1 %22) #5, !dbg !140
  %1021 = extractvalue { i32, i32, i32, i32 } %1020, 0, !dbg !140
  %1022 = bitcast i32 %1021 to <2 x bfloat>, !dbg !140
  %1023 = extractvalue { i32, i32, i32, i32 } %1020, 1, !dbg !140
  %1024 = bitcast i32 %1023 to <2 x bfloat>, !dbg !140
  %1025 = extractvalue { i32, i32, i32, i32 } %1020, 2, !dbg !140
  %1026 = bitcast i32 %1025 to <2 x bfloat>, !dbg !140
  %1027 = extractvalue { i32, i32, i32, i32 } %1020, 3, !dbg !140
  %1028 = bitcast i32 %1027 to <2 x bfloat>, !dbg !140
  %1029 = extractelement <2 x bfloat> %1022, i64 0, !dbg !140
  %1030 = extractelement <2 x bfloat> %1022, i64 1, !dbg !140
  %1031 = extractelement <2 x bfloat> %1024, i64 0, !dbg !140
  %1032 = extractelement <2 x bfloat> %1024, i64 1, !dbg !140
  %1033 = extractelement <2 x bfloat> %1026, i64 0, !dbg !140
  %1034 = extractelement <2 x bfloat> %1026, i64 1, !dbg !140
  %1035 = extractelement <2 x bfloat> %1028, i64 0, !dbg !140
  %1036 = extractelement <2 x bfloat> %1028, i64 1, !dbg !140
  %1037 = fpext bfloat %1029 to float, !dbg !141
  %1038 = fpext bfloat %1030 to float, !dbg !141
  %1039 = fpext bfloat %1031 to float, !dbg !141
  %1040 = fpext bfloat %1032 to float, !dbg !141
  %1041 = fpext bfloat %1033 to float, !dbg !141
  %1042 = fpext bfloat %1034 to float, !dbg !141
  %1043 = fpext bfloat %1035 to float, !dbg !141
  %1044 = fpext bfloat %1036 to float, !dbg !141
  %1045 = fmul float %1016, %1037, !dbg !137
  %1046 = fmul float %1016, %1038, !dbg !137
  %1047 = fmul float %1016, %1039, !dbg !137
  %1048 = fmul float %1016, %1040, !dbg !137
  %1049 = fmul float %1016, %1041, !dbg !137
  %1050 = fmul float %1016, %1042, !dbg !137
  %1051 = fmul float %1016, %1043, !dbg !137
  %1052 = fmul float %1016, %1044, !dbg !137
  %1053 = tail call float @llvm.nvvm.round.f(float %1045) #5, !dbg !142
  %1054 = tail call float @llvm.nvvm.round.f(float %1046) #5, !dbg !142
  %1055 = tail call float @llvm.nvvm.round.f(float %1047) #5, !dbg !142
  %1056 = tail call float @llvm.nvvm.round.f(float %1048) #5, !dbg !142
  %1057 = tail call float @llvm.nvvm.round.f(float %1049) #5, !dbg !142
  %1058 = tail call float @llvm.nvvm.round.f(float %1050) #5, !dbg !142
  %1059 = tail call float @llvm.nvvm.round.f(float %1051) #5, !dbg !142
  %1060 = tail call float @llvm.nvvm.round.f(float %1052) #5, !dbg !142
  %1061 = insertelement <4 x float> poison, float %1053, i64 0, !dbg !143
  %1062 = insertelement <4 x float> %1061, float %1054, i64 1, !dbg !143
  %1063 = insertelement <4 x float> %1062, float %1055, i64 2, !dbg !143
  %1064 = insertelement <4 x float> %1063, float %1056, i64 3, !dbg !143
  %1065 = fcmp ogt <4 x float> %1064, splat (float -1.270000e+02), !dbg !143
  %1066 = fcmp uno <4 x float> %1064, zeroinitializer, !dbg !145
  %1067 = or <4 x i1> %1065, %1066, !dbg !146
  %1068 = select <4 x i1> %1067, <4 x float> %1064, <4 x float> splat (float -1.270000e+02), !dbg !147
  %1069 = fcmp olt <4 x float> %1068, splat (float 1.270000e+02), !dbg !148
  %1070 = fcmp uno <4 x float> %1068, zeroinitializer, !dbg !150
  %1071 = or <4 x i1> %1069, %1070, !dbg !151
  %1072 = fptosi <4 x float> %1068 to <4 x i8>, !dbg !152
  %1073 = select <4 x i1> %1071, <4 x i8> %1072, <4 x i8> splat (i8 127), !dbg !153
  %1074 = insertelement <4 x float> poison, float %1057, i64 0, !dbg !143
  %1075 = insertelement <4 x float> %1074, float %1058, i64 1, !dbg !143
  %1076 = insertelement <4 x float> %1075, float %1059, i64 2, !dbg !143
  %1077 = insertelement <4 x float> %1076, float %1060, i64 3, !dbg !143
  %1078 = fcmp ogt <4 x float> %1077, splat (float -1.270000e+02), !dbg !143
  %1079 = fcmp uno <4 x float> %1077, zeroinitializer, !dbg !145
  %1080 = or <4 x i1> %1078, %1079, !dbg !146
  %1081 = select <4 x i1> %1080, <4 x float> %1077, <4 x float> splat (float -1.270000e+02), !dbg !147
  %1082 = fcmp olt <4 x float> %1081, splat (float 1.270000e+02), !dbg !148
  %1083 = fcmp uno <4 x float> %1081, zeroinitializer, !dbg !150
  %1084 = or <4 x i1> %1082, %1083, !dbg !151
  %1085 = fptosi <4 x float> %1081 to <4 x i8>, !dbg !152
  %1086 = select <4 x i1> %1084, <4 x i8> %1085, <4 x i8> splat (i8 127), !dbg !153
  %1087 = getelementptr i8, ptr addrspace(1) %10, i64 %1018, !dbg !154
  %1088 = bitcast <4 x i8> %1073 to i32, !dbg !155
  %1089 = bitcast <4 x i8> %1086 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1088, i32 %1089, ptr addrspace(1) %1087, i1 %22) #5, !dbg !155
  %1090 = getelementptr i8, ptr addrspace(1) %11, i64 %1018, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1088, i32 %1089, ptr addrspace(1) %1090, i1 %22) #5, !dbg !157
  %1091 = getelementptr i8, ptr addrspace(1) %12, i64 %1018, !dbg !158
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1088, i32 %1089, ptr addrspace(1) %1091, i1 %22) #5, !dbg !159
  %1092 = or disjoint i64 %28, 2048, !dbg !160
  %1093 = icmp samesign ult i64 %1092, 3072, !dbg !161
  %1094 = trunc nuw nsw i64 %1092 to i32, !dbg !138
  %1095 = add i32 %27, %1094, !dbg !138
  %1096 = sext i32 %1095 to i64, !dbg !139
  %1097 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1096, !dbg !139
  %1098 = and i1 %22, %1093, !dbg !162
  %1099 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1097, i1 %1098) #5, !dbg !140
  %1100 = extractvalue { i32, i32, i32, i32 } %1099, 0, !dbg !140
  %1101 = bitcast i32 %1100 to <2 x bfloat>, !dbg !140
  %1102 = extractvalue { i32, i32, i32, i32 } %1099, 1, !dbg !140
  %1103 = bitcast i32 %1102 to <2 x bfloat>, !dbg !140
  %1104 = extractvalue { i32, i32, i32, i32 } %1099, 2, !dbg !140
  %1105 = bitcast i32 %1104 to <2 x bfloat>, !dbg !140
  %1106 = extractvalue { i32, i32, i32, i32 } %1099, 3, !dbg !140
  %1107 = bitcast i32 %1106 to <2 x bfloat>, !dbg !140
  %1108 = extractelement <2 x bfloat> %1101, i64 0, !dbg !140
  %1109 = extractelement <2 x bfloat> %1101, i64 1, !dbg !140
  %1110 = extractelement <2 x bfloat> %1103, i64 0, !dbg !140
  %1111 = extractelement <2 x bfloat> %1103, i64 1, !dbg !140
  %1112 = extractelement <2 x bfloat> %1105, i64 0, !dbg !140
  %1113 = extractelement <2 x bfloat> %1105, i64 1, !dbg !140
  %1114 = extractelement <2 x bfloat> %1107, i64 0, !dbg !140
  %1115 = extractelement <2 x bfloat> %1107, i64 1, !dbg !140
  %1116 = fpext bfloat %1108 to float, !dbg !141
  %1117 = fpext bfloat %1109 to float, !dbg !141
  %1118 = fpext bfloat %1110 to float, !dbg !141
  %1119 = fpext bfloat %1111 to float, !dbg !141
  %1120 = fpext bfloat %1112 to float, !dbg !141
  %1121 = fpext bfloat %1113 to float, !dbg !141
  %1122 = fpext bfloat %1114 to float, !dbg !141
  %1123 = fpext bfloat %1115 to float, !dbg !141
  %1124 = fmul float %1016, %1116, !dbg !137
  %1125 = fmul float %1016, %1117, !dbg !137
  %1126 = fmul float %1016, %1118, !dbg !137
  %1127 = fmul float %1016, %1119, !dbg !137
  %1128 = fmul float %1016, %1120, !dbg !137
  %1129 = fmul float %1016, %1121, !dbg !137
  %1130 = fmul float %1016, %1122, !dbg !137
  %1131 = fmul float %1016, %1123, !dbg !137
  %1132 = tail call float @llvm.nvvm.round.f(float %1124) #5, !dbg !142
  %1133 = tail call float @llvm.nvvm.round.f(float %1125) #5, !dbg !142
  %1134 = tail call float @llvm.nvvm.round.f(float %1126) #5, !dbg !142
  %1135 = tail call float @llvm.nvvm.round.f(float %1127) #5, !dbg !142
  %1136 = tail call float @llvm.nvvm.round.f(float %1128) #5, !dbg !142
  %1137 = tail call float @llvm.nvvm.round.f(float %1129) #5, !dbg !142
  %1138 = tail call float @llvm.nvvm.round.f(float %1130) #5, !dbg !142
  %1139 = tail call float @llvm.nvvm.round.f(float %1131) #5, !dbg !142
  %1140 = insertelement <4 x float> poison, float %1132, i64 0, !dbg !143
  %1141 = insertelement <4 x float> %1140, float %1133, i64 1, !dbg !143
  %1142 = insertelement <4 x float> %1141, float %1134, i64 2, !dbg !143
  %1143 = insertelement <4 x float> %1142, float %1135, i64 3, !dbg !143
  %1144 = fcmp ogt <4 x float> %1143, splat (float -1.270000e+02), !dbg !143
  %1145 = fcmp uno <4 x float> %1143, zeroinitializer, !dbg !145
  %1146 = or <4 x i1> %1144, %1145, !dbg !146
  %1147 = select <4 x i1> %1146, <4 x float> %1143, <4 x float> splat (float -1.270000e+02), !dbg !147
  %1148 = fcmp olt <4 x float> %1147, splat (float 1.270000e+02), !dbg !148
  %1149 = fcmp uno <4 x float> %1147, zeroinitializer, !dbg !150
  %1150 = or <4 x i1> %1148, %1149, !dbg !151
  %1151 = fptosi <4 x float> %1147 to <4 x i8>, !dbg !152
  %1152 = select <4 x i1> %1150, <4 x i8> %1151, <4 x i8> splat (i8 127), !dbg !153
  %1153 = insertelement <4 x float> poison, float %1136, i64 0, !dbg !143
  %1154 = insertelement <4 x float> %1153, float %1137, i64 1, !dbg !143
  %1155 = insertelement <4 x float> %1154, float %1138, i64 2, !dbg !143
  %1156 = insertelement <4 x float> %1155, float %1139, i64 3, !dbg !143
  %1157 = fcmp ogt <4 x float> %1156, splat (float -1.270000e+02), !dbg !143
  %1158 = fcmp uno <4 x float> %1156, zeroinitializer, !dbg !145
  %1159 = or <4 x i1> %1157, %1158, !dbg !146
  %1160 = select <4 x i1> %1159, <4 x float> %1156, <4 x float> splat (float -1.270000e+02), !dbg !147
  %1161 = fcmp olt <4 x float> %1160, splat (float 1.270000e+02), !dbg !148
  %1162 = fcmp uno <4 x float> %1160, zeroinitializer, !dbg !150
  %1163 = or <4 x i1> %1161, %1162, !dbg !151
  %1164 = fptosi <4 x float> %1160 to <4 x i8>, !dbg !152
  %1165 = select <4 x i1> %1163, <4 x i8> %1164, <4 x i8> splat (i8 127), !dbg !153
  %1166 = getelementptr i8, ptr addrspace(1) %10, i64 %1096, !dbg !154
  %1167 = bitcast <4 x i8> %1152 to i32, !dbg !155
  %1168 = bitcast <4 x i8> %1165 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1167, i32 %1168, ptr addrspace(1) %1166, i1 %1098) #5, !dbg !155
  %1169 = getelementptr i8, ptr addrspace(1) %11, i64 %1096, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1167, i32 %1168, ptr addrspace(1) %1169, i1 %1098) #5, !dbg !157
  %1170 = getelementptr i8, ptr addrspace(1) %12, i64 %1096, !dbg !158
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1167, i32 %1168, ptr addrspace(1) %1170, i1 %1098) #5, !dbg !159
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 44, column: 62, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 33, column: 31, scope: !6)
!24 = !DILocation(line: 34, column: 29, scope: !6)
!25 = !DILocation(line: 38, column: 59, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 42, column: 51, scope: !6)
!30 = !DILocation(line: 209, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 210, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 210, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 211, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 211, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 211, column: 22, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 203, column: 7, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 45, column: 58, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 67, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 32, scope: !6)
!56 = !DILocation(line: 53, column: 40, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 55, column: 29, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 59, scope: !6)
!62 = !DILocation(line: 59, column: 51, scope: !6)
!63 = !DILocation(line: 59, column: 113, scope: !6)
!64 = !DILocation(line: 60, column: 42, scope: !6)
!65 = !DILocation(line: 60, column: 35, scope: !6)
!66 = !DILocation(line: 60, column: 49, scope: !6)
!67 = !DILocation(line: 61, column: 35, scope: !6)
!68 = !DILocation(line: 61, column: 49, scope: !6)
!69 = !DILocation(line: 62, column: 35, scope: !6)
!70 = !DILocation(line: 62, column: 42, scope: !6)
!71 = !DILocation(line: 63, column: 35, scope: !6)
!72 = !DILocation(line: 63, column: 42, scope: !6)
!73 = !DILocation(line: 65, column: 24, scope: !6)
!74 = !DILocation(line: 71, column: 24, scope: !6)
!75 = !DILocation(line: 61, column: 102, scope: !6)
!76 = !DILocation(line: 63, column: 95, scope: !6)
!77 = !DILocation(line: 74, column: 24, scope: !6)
!78 = !DILocation(line: 76, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 80, column: 24, scope: !6)
!82 = !DILocation(line: 86, column: 53, scope: !6)
!83 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !84)
!84 = !DILocation(line: 82, column: 47, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !84)
!86 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !84)
!87 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !84)
!88 = !DILocation(line: 83, column: 50, scope: !6)
!89 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !90)
!90 = !DILocation(line: 84, column: 47, scope: !6)
!91 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !90)
!92 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !90)
!93 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !90)
!94 = !DILocation(line: 85, column: 50, scope: !6)
!95 = !DILocation(line: 86, column: 29, scope: !6)
!96 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !97)
!97 = !DILocation(line: 87, column: 40, scope: !6)
!98 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !97)
!99 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !97)
!100 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !97)
!101 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !97)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 90, column: 37, scope: !6)
!110 = !DILocation(line: 89, column: 25, scope: !6)
!111 = !DILocation(line: 90, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 37, scope: !6)
!114 = !DILocation(line: 92, column: 25, scope: !6)
!115 = !DILocation(line: 92, column: 37, scope: !6)
!116 = !DILocation(line: 93, column: 25, scope: !6)
!117 = !DILocation(line: 93, column: 37, scope: !6)
!118 = !DILocation(line: 94, column: 25, scope: !6)
!119 = !DILocation(line: 94, column: 37, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !121)
!121 = !DILocation(line: 103, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !124)
!124 = !DILocation(line: 105, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !126)
!126 = !DILocation(line: 106, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !126)
!130 = !DILocation(line: 108, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !132)
!132 = !DILocation(line: 111, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !132)
!136 = !DILocation(line: 114, column: 25, scope: !6)
!137 = !DILocation(line: 117, column: 24, scope: !6)
!138 = !DILocation(line: 101, column: 43, scope: !6)
!139 = !DILocation(line: 101, column: 36, scope: !6)
!140 = !DILocation(line: 101, column: 53, scope: !6)
!141 = !DILocation(line: 101, column: 115, scope: !6)
!142 = !DILocation(line: 118, column: 36, scope: !6)
!143 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !144)
!144 = !DILocation(line: 121, column: 46, scope: !6)
!145 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !144)
!147 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !144)
!148 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !149)
!149 = !DILocation(line: 123, column: 46, scope: !6)
!150 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !149)
!151 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !149)
!152 = !DILocation(line: 125, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !149)
!154 = !DILocation(line: 126, column: 29, scope: !6)
!155 = !DILocation(line: 126, column: 53, scope: !6)
!156 = !DILocation(line: 127, column: 30, scope: !6)
!157 = !DILocation(line: 127, column: 54, scope: !6)
!158 = !DILocation(line: 128, column: 30, scope: !6)
!159 = !DILocation(line: 128, column: 54, scope: !6)
!160 = !DILocation(line: 96, column: 31, scope: !6)
!161 = !DILocation(line: 97, column: 29, scope: !6)
!162 = !DILocation(line: 101, column: 61, scope: !6)
!163 = !DILocation(line: 95, column: 4, scope: !6)
