; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 11, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 1016, !dbg !11
  %14 = or disjoint i32 %13, 4, !dbg !11
  %15 = shl i32 %11, 2, !dbg !11
  %16 = and i32 %15, 508, !dbg !11
  %17 = or disjoint i32 %16, 512, !dbg !11
  %18 = or disjoint i32 %13, %10, !dbg !12
  %19 = or disjoint i32 %14, %10, !dbg !12
  %20 = or disjoint i32 %18, 1024, !dbg !12
  %21 = or disjoint i32 %18, 1028, !dbg !12
  %22 = or disjoint i32 %16, %10, !dbg !12
  %23 = or disjoint i32 %17, %10, !dbg !12
  %24 = or disjoint i32 %22, 1024, !dbg !12
  %25 = or disjoint i32 %22, 1536, !dbg !12
  %26 = sdiv i32 %18, 12288, !dbg !13
  %27 = sdiv i32 %20, 12288, !dbg !13
  %28 = mul i32 %26, 12288, !dbg !14
  %.decomposed = sub i32 %18, %28, !dbg !14
  %29 = mul i32 %27, 12288, !dbg !14
  %.decomposed62 = sub i32 %20, %29, !dbg !14
  %30 = sext i32 %18 to i64, !dbg !15
  %31 = getelementptr i32, ptr addrspace(1) %0, i64 %30, !dbg !15
  %32 = sext i32 %19 to i64, !dbg !15
  %33 = getelementptr i32, ptr addrspace(1) %0, i64 %32, !dbg !15
  %34 = sext i32 %20 to i64, !dbg !15
  %35 = getelementptr i32, ptr addrspace(1) %0, i64 %34, !dbg !15
  %36 = sext i32 %21 to i64, !dbg !15
  %37 = getelementptr i32, ptr addrspace(1) %0, i64 %36, !dbg !15
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %31) #2, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %33) #2, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !16
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %35) #2, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #2, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !16
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !16
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !16
  %58 = sext i32 %26 to i64, !dbg !17
  %59 = getelementptr bfloat, ptr addrspace(1) %1, i64 %58, !dbg !17
  %60 = sext i32 %27 to i64, !dbg !17
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !17
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %59) #2, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %61) #2, !dbg !18
  %78 = getelementptr bfloat, ptr addrspace(1) %2, i64 %58, !dbg !19
  %79 = getelementptr bfloat, ptr addrspace(1) %2, i64 %60, !dbg !19
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %78) #2, !dbg !20
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %79) #2, !dbg !20
  %96 = sext i32 %.decomposed to i64, !dbg !21
  %97 = getelementptr bfloat, ptr addrspace(1) %3, i64 %96, !dbg !21
  %98 = sext i32 %.decomposed62 to i64, !dbg !21
  %99 = getelementptr bfloat, ptr addrspace(1) %3, i64 %98, !dbg !21
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %97) #2, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !22
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !22
  %103 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !22
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !22
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !22
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !22
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !22
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !22
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !22
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !22
  %113 = extractelement <2 x bfloat> %106, i64 0, !dbg !22
  %114 = extractelement <2 x bfloat> %106, i64 1, !dbg !22
  %115 = extractelement <2 x bfloat> %108, i64 0, !dbg !22
  %116 = extractelement <2 x bfloat> %108, i64 1, !dbg !22
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %99) #2, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !22
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !22
  %120 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !22
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !22
  %122 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !22
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !22
  %124 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !22
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !22
  %126 = extractelement <2 x bfloat> %119, i64 0, !dbg !22
  %127 = extractelement <2 x bfloat> %119, i64 1, !dbg !22
  %128 = extractelement <2 x bfloat> %121, i64 0, !dbg !22
  %129 = extractelement <2 x bfloat> %121, i64 1, !dbg !22
  %130 = extractelement <2 x bfloat> %123, i64 0, !dbg !22
  %131 = extractelement <2 x bfloat> %123, i64 1, !dbg !22
  %132 = extractelement <2 x bfloat> %125, i64 0, !dbg !22
  %133 = extractelement <2 x bfloat> %125, i64 1, !dbg !22
  %134 = fpext bfloat %109 to float, !dbg !23
  %135 = fpext bfloat %110 to float, !dbg !23
  %136 = fpext bfloat %111 to float, !dbg !23
  %137 = fpext bfloat %112 to float, !dbg !23
  %138 = fpext bfloat %113 to float, !dbg !23
  %139 = fpext bfloat %114 to float, !dbg !23
  %140 = fpext bfloat %115 to float, !dbg !23
  %141 = fpext bfloat %116 to float, !dbg !23
  %142 = fpext bfloat %126 to float, !dbg !23
  %143 = fpext bfloat %127 to float, !dbg !23
  %144 = fpext bfloat %128 to float, !dbg !23
  %145 = fpext bfloat %129 to float, !dbg !23
  %146 = fpext bfloat %130 to float, !dbg !23
  %147 = fpext bfloat %131 to float, !dbg !23
  %148 = fpext bfloat %132 to float, !dbg !23
  %149 = fpext bfloat %133 to float, !dbg !23
  %150 = getelementptr bfloat, ptr addrspace(1) %4, i64 %96, !dbg !24
  %151 = getelementptr bfloat, ptr addrspace(1) %4, i64 %98, !dbg !24
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %150) #2, !dbg !25
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !25
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !25
  %155 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !25
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !25
  %157 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !25
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !25
  %159 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !25
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !25
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !25
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !25
  %163 = extractelement <2 x bfloat> %156, i64 0, !dbg !25
  %164 = extractelement <2 x bfloat> %156, i64 1, !dbg !25
  %165 = extractelement <2 x bfloat> %158, i64 0, !dbg !25
  %166 = extractelement <2 x bfloat> %158, i64 1, !dbg !25
  %167 = extractelement <2 x bfloat> %160, i64 0, !dbg !25
  %168 = extractelement <2 x bfloat> %160, i64 1, !dbg !25
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %151) #2, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !25
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !25
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !25
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !25
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !25
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !25
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !25
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !25
  %180 = extractelement <2 x bfloat> %173, i64 0, !dbg !25
  %181 = extractelement <2 x bfloat> %173, i64 1, !dbg !25
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !25
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !25
  %184 = extractelement <2 x bfloat> %177, i64 0, !dbg !25
  %185 = extractelement <2 x bfloat> %177, i64 1, !dbg !25
  %186 = fpext bfloat %161 to float, !dbg !26
  %187 = fpext bfloat %162 to float, !dbg !26
  %188 = fpext bfloat %163 to float, !dbg !26
  %189 = fpext bfloat %164 to float, !dbg !26
  %190 = fpext bfloat %165 to float, !dbg !26
  %191 = fpext bfloat %166 to float, !dbg !26
  %192 = fpext bfloat %167 to float, !dbg !26
  %193 = fpext bfloat %168 to float, !dbg !26
  %194 = fpext bfloat %178 to float, !dbg !26
  %195 = fpext bfloat %179 to float, !dbg !26
  %196 = fpext bfloat %180 to float, !dbg !26
  %197 = fpext bfloat %181 to float, !dbg !26
  %198 = fpext bfloat %182 to float, !dbg !26
  %199 = fpext bfloat %183 to float, !dbg !26
  %200 = fpext bfloat %184 to float, !dbg !26
  %201 = fpext bfloat %185 to float, !dbg !26
  %202 = sitofp i32 %39 to float, !dbg !27
  %203 = sitofp i32 %40 to float, !dbg !27
  %204 = sitofp i32 %41 to float, !dbg !27
  %205 = sitofp i32 %42 to float, !dbg !27
  %206 = sitofp i32 %44 to float, !dbg !27
  %207 = sitofp i32 %45 to float, !dbg !27
  %208 = sitofp i32 %46 to float, !dbg !27
  %209 = sitofp i32 %47 to float, !dbg !27
  %210 = sitofp i32 %49 to float, !dbg !27
  %211 = sitofp i32 %50 to float, !dbg !27
  %212 = sitofp i32 %51 to float, !dbg !27
  %213 = sitofp i32 %52 to float, !dbg !27
  %214 = sitofp i32 %54 to float, !dbg !27
  %215 = sitofp i32 %55 to float, !dbg !27
  %216 = sitofp i32 %56 to float, !dbg !27
  %217 = sitofp i32 %57 to float, !dbg !27
  %218 = insertelement <16 x i16> poison, i16 %77, i64 0, !dbg !18
  %219 = insertelement <16 x i16> %218, i16 %76, i64 1, !dbg !18
  %220 = insertelement <16 x i16> %219, i16 %75, i64 2, !dbg !18
  %221 = insertelement <16 x i16> %220, i16 %74, i64 3, !dbg !18
  %222 = insertelement <16 x i16> %221, i16 %73, i64 4, !dbg !18
  %223 = insertelement <16 x i16> %222, i16 %72, i64 5, !dbg !18
  %224 = insertelement <16 x i16> %223, i16 %71, i64 6, !dbg !18
  %225 = insertelement <16 x i16> %224, i16 %70, i64 7, !dbg !18
  %226 = insertelement <16 x i16> %225, i16 %69, i64 8, !dbg !18
  %227 = insertelement <16 x i16> %226, i16 %68, i64 9, !dbg !18
  %228 = insertelement <16 x i16> %227, i16 %67, i64 10, !dbg !18
  %229 = insertelement <16 x i16> %228, i16 %66, i64 11, !dbg !18
  %230 = insertelement <16 x i16> %229, i16 %65, i64 12, !dbg !18
  %231 = insertelement <16 x i16> %230, i16 %64, i64 13, !dbg !18
  %232 = insertelement <16 x i16> %231, i16 %63, i64 14, !dbg !18
  %233 = insertelement <16 x i16> %232, i16 %62, i64 15, !dbg !18
  %234 = bitcast <16 x i16> %233 to <16 x bfloat>, !dbg !18
  %235 = insertelement <16 x i16> poison, i16 %95, i64 0, !dbg !20
  %236 = insertelement <16 x i16> %235, i16 %94, i64 1, !dbg !20
  %237 = insertelement <16 x i16> %236, i16 %93, i64 2, !dbg !20
  %238 = insertelement <16 x i16> %237, i16 %92, i64 3, !dbg !20
  %239 = insertelement <16 x i16> %238, i16 %91, i64 4, !dbg !20
  %240 = insertelement <16 x i16> %239, i16 %90, i64 5, !dbg !20
  %241 = insertelement <16 x i16> %240, i16 %89, i64 6, !dbg !20
  %242 = insertelement <16 x i16> %241, i16 %88, i64 7, !dbg !20
  %243 = insertelement <16 x i16> %242, i16 %87, i64 8, !dbg !20
  %244 = insertelement <16 x i16> %243, i16 %86, i64 9, !dbg !20
  %245 = insertelement <16 x i16> %244, i16 %85, i64 10, !dbg !20
  %246 = insertelement <16 x i16> %245, i16 %84, i64 11, !dbg !20
  %247 = insertelement <16 x i16> %246, i16 %83, i64 12, !dbg !20
  %248 = insertelement <16 x i16> %247, i16 %82, i64 13, !dbg !20
  %249 = insertelement <16 x i16> %248, i16 %81, i64 14, !dbg !20
  %250 = insertelement <16 x i16> %249, i16 %80, i64 15, !dbg !20
  %251 = bitcast <16 x i16> %250 to <16 x bfloat>, !dbg !20
  %252 = fcmp oge <16 x bfloat> %234, zeroinitializer, !dbg !28
  %253 = select <16 x i1> %252, <16 x bfloat> zeroinitializer, <16 x bfloat> %234, !dbg !28
  %254 = fpext <16 x bfloat> %253 to <16 x float>, !dbg !28
  %255 = fsub <16 x float> zeroinitializer, %254, !dbg !32
  %256 = fcmp ole <16 x bfloat> %251, zeroinitializer, !dbg !33
  %257 = select <16 x i1> %256, <16 x bfloat> zeroinitializer, <16 x bfloat> %251, !dbg !33
  %258 = fpext <16 x bfloat> %257 to <16 x float>, !dbg !33
  %259 = fcmp ogt <16 x float> %255, %258, !dbg !35
  %260 = fcmp uno <16 x float> %255, zeroinitializer, !dbg !37
  %261 = or <16 x i1> %260, %259, !dbg !38
  %262 = select <16 x i1> %261, <16 x float> %255, <16 x float> %258, !dbg !39
  %263 = fmul <16 x float> %262, splat (float 0x3F80204080000000), !dbg !40
  %264 = fcmp ogt <16 x float> %263, splat (float 0x3EE4F8B580000000), !dbg !41
  %265 = extractelement <16 x float> %263, i64 15, !dbg !43
  %266 = fcmp uno float %265, 0.000000e+00, !dbg !44
  %267 = extractelement <16 x float> %263, i64 14, !dbg !43
  %268 = fcmp uno float %267, 0.000000e+00, !dbg !44
  %269 = extractelement <16 x float> %263, i64 13, !dbg !43
  %270 = fcmp uno float %269, 0.000000e+00, !dbg !44
  %271 = extractelement <16 x float> %263, i64 12, !dbg !43
  %272 = fcmp uno float %271, 0.000000e+00, !dbg !44
  %273 = extractelement <16 x float> %263, i64 11, !dbg !43
  %274 = fcmp uno float %273, 0.000000e+00, !dbg !44
  %275 = extractelement <16 x float> %263, i64 10, !dbg !43
  %276 = fcmp uno float %275, 0.000000e+00, !dbg !44
  %277 = extractelement <16 x float> %263, i64 9, !dbg !43
  %278 = fcmp uno float %277, 0.000000e+00, !dbg !44
  %279 = extractelement <16 x float> %263, i64 8, !dbg !43
  %280 = fcmp uno float %279, 0.000000e+00, !dbg !44
  %281 = extractelement <16 x float> %263, i64 7, !dbg !43
  %282 = fcmp uno float %281, 0.000000e+00, !dbg !44
  %283 = extractelement <16 x float> %263, i64 6, !dbg !43
  %284 = fcmp uno float %283, 0.000000e+00, !dbg !44
  %285 = extractelement <16 x float> %263, i64 5, !dbg !43
  %286 = fcmp uno float %285, 0.000000e+00, !dbg !44
  %287 = extractelement <16 x float> %263, i64 4, !dbg !43
  %288 = fcmp uno float %287, 0.000000e+00, !dbg !44
  %289 = extractelement <16 x float> %263, i64 3, !dbg !43
  %290 = fcmp uno float %289, 0.000000e+00, !dbg !44
  %291 = extractelement <16 x float> %263, i64 2, !dbg !43
  %292 = fcmp uno float %291, 0.000000e+00, !dbg !44
  %293 = extractelement <16 x float> %263, i64 1, !dbg !43
  %294 = fcmp uno float %293, 0.000000e+00, !dbg !44
  %295 = extractelement <16 x float> %263, i64 0, !dbg !43
  %296 = fcmp uno float %295, 0.000000e+00, !dbg !44
  %297 = extractelement <16 x i1> %264, i64 15, !dbg !45
  %298 = or i1 %297, %266, !dbg !45
  %299 = extractelement <16 x i1> %264, i64 14, !dbg !45
  %300 = or i1 %299, %268, !dbg !45
  %301 = extractelement <16 x i1> %264, i64 13, !dbg !45
  %302 = or i1 %301, %270, !dbg !45
  %303 = extractelement <16 x i1> %264, i64 12, !dbg !45
  %304 = or i1 %303, %272, !dbg !45
  %305 = extractelement <16 x i1> %264, i64 11, !dbg !45
  %306 = or i1 %305, %274, !dbg !45
  %307 = extractelement <16 x i1> %264, i64 10, !dbg !45
  %308 = or i1 %307, %276, !dbg !45
  %309 = extractelement <16 x i1> %264, i64 9, !dbg !45
  %310 = or i1 %309, %278, !dbg !45
  %311 = extractelement <16 x i1> %264, i64 8, !dbg !45
  %312 = or i1 %311, %280, !dbg !45
  %313 = extractelement <16 x i1> %264, i64 7, !dbg !45
  %314 = or i1 %313, %282, !dbg !45
  %315 = extractelement <16 x i1> %264, i64 6, !dbg !45
  %316 = or i1 %315, %284, !dbg !45
  %317 = extractelement <16 x i1> %264, i64 5, !dbg !45
  %318 = or i1 %317, %286, !dbg !45
  %319 = extractelement <16 x i1> %264, i64 4, !dbg !45
  %320 = or i1 %319, %288, !dbg !45
  %321 = extractelement <16 x i1> %264, i64 3, !dbg !45
  %322 = or i1 %321, %290, !dbg !45
  %323 = extractelement <16 x i1> %264, i64 2, !dbg !45
  %324 = or i1 %323, %292, !dbg !45
  %325 = extractelement <16 x i1> %264, i64 1, !dbg !45
  %326 = or i1 %325, %294, !dbg !45
  %327 = extractelement <16 x i1> %264, i64 0, !dbg !45
  %328 = or i1 %327, %296, !dbg !45
  %329 = select i1 %298, float %265, float 0x3EE4F8B580000000, !dbg !43
  %330 = select i1 %300, float %267, float 0x3EE4F8B580000000, !dbg !43
  %331 = select i1 %302, float %269, float 0x3EE4F8B580000000, !dbg !43
  %332 = select i1 %304, float %271, float 0x3EE4F8B580000000, !dbg !43
  %333 = select i1 %306, float %273, float 0x3EE4F8B580000000, !dbg !43
  %334 = select i1 %308, float %275, float 0x3EE4F8B580000000, !dbg !43
  %335 = select i1 %310, float %277, float 0x3EE4F8B580000000, !dbg !43
  %336 = select i1 %312, float %279, float 0x3EE4F8B580000000, !dbg !43
  %337 = select i1 %314, float %281, float 0x3EE4F8B580000000, !dbg !43
  %338 = select i1 %316, float %283, float 0x3EE4F8B580000000, !dbg !43
  %339 = select i1 %318, float %285, float 0x3EE4F8B580000000, !dbg !43
  %340 = select i1 %320, float %287, float 0x3EE4F8B580000000, !dbg !43
  %341 = select i1 %322, float %289, float 0x3EE4F8B580000000, !dbg !43
  %342 = select i1 %324, float %291, float 0x3EE4F8B580000000, !dbg !43
  %343 = select i1 %326, float %293, float 0x3EE4F8B580000000, !dbg !43
  %344 = select i1 %328, float %295, float 0x3EE4F8B580000000, !dbg !43
  %345 = fmul float %329, %202, !dbg !46
  %346 = fmul float %330, %203, !dbg !46
  %347 = fmul float %331, %204, !dbg !46
  %348 = fmul float %332, %205, !dbg !46
  %349 = fmul float %333, %206, !dbg !46
  %350 = fmul float %334, %207, !dbg !46
  %351 = fmul float %335, %208, !dbg !46
  %352 = fmul float %336, %209, !dbg !46
  %353 = fmul float %337, %210, !dbg !46
  %354 = fmul float %338, %211, !dbg !46
  %355 = fmul float %339, %212, !dbg !46
  %356 = fmul float %340, %213, !dbg !46
  %357 = fmul float %341, %214, !dbg !46
  %358 = fmul float %342, %215, !dbg !46
  %359 = fmul float %343, %216, !dbg !46
  %360 = fmul float %344, %217, !dbg !46
  %361 = fmul float %345, %134, !dbg !47
  %362 = fmul float %346, %135, !dbg !47
  %363 = fmul float %347, %136, !dbg !47
  %364 = fmul float %348, %137, !dbg !47
  %365 = fmul float %349, %138, !dbg !47
  %366 = fmul float %350, %139, !dbg !47
  %367 = fmul float %351, %140, !dbg !47
  %368 = fmul float %352, %141, !dbg !47
  %369 = fmul float %353, %142, !dbg !47
  %370 = fmul float %354, %143, !dbg !47
  %371 = fmul float %355, %144, !dbg !47
  %372 = fmul float %356, %145, !dbg !47
  %373 = fmul float %357, %146, !dbg !47
  %374 = fmul float %358, %147, !dbg !47
  %375 = fmul float %359, %148, !dbg !47
  %376 = fmul float %360, %149, !dbg !47
  %377 = fadd float %361, %186, !dbg !48
  %378 = fadd float %362, %187, !dbg !48
  %379 = fadd float %363, %188, !dbg !48
  %380 = fadd float %364, %189, !dbg !48
  %381 = fadd float %365, %190, !dbg !48
  %382 = fadd float %366, %191, !dbg !48
  %383 = fadd float %367, %192, !dbg !48
  %384 = fadd float %368, %193, !dbg !48
  %385 = fadd float %369, %194, !dbg !48
  %386 = fadd float %370, %195, !dbg !48
  %387 = fadd float %371, %196, !dbg !48
  %388 = fadd float %372, %197, !dbg !48
  %389 = fadd float %373, %198, !dbg !48
  %390 = fadd float %374, %199, !dbg !48
  %391 = fadd float %375, %200, !dbg !48
  %392 = fadd float %376, %201, !dbg !48
  %393 = sext i32 %22 to i64, !dbg !49
  %394 = getelementptr float, ptr addrspace(1) %5, i64 %393, !dbg !49
  %395 = sext i32 %23 to i64, !dbg !49
  %396 = getelementptr float, ptr addrspace(1) %5, i64 %395, !dbg !49
  %397 = sext i32 %24 to i64, !dbg !49
  %398 = getelementptr float, ptr addrspace(1) %5, i64 %397, !dbg !49
  %399 = sext i32 %25 to i64, !dbg !49
  %400 = getelementptr float, ptr addrspace(1) %5, i64 %399, !dbg !49
  %401 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %402 = bitcast float %377 to i32, !dbg !50
  %403 = bitcast float %378 to i32, !dbg !50
  %404 = bitcast float %379 to i32, !dbg !50
  %405 = bitcast float %380 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %401, i32 %402, i32 %403, i32 %404, i32 %405, i1 true) #2, !dbg !50
  %406 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %407 = bitcast float %381 to i32, !dbg !50
  %408 = bitcast float %382 to i32, !dbg !50
  %409 = bitcast float %383 to i32, !dbg !50
  %410 = bitcast float %384 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %406, i32 %407, i32 %408, i32 %409, i32 %410, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %411 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %412 = load <4 x i32>, ptr addrspace(3) %411, align 16, !dbg !50
  %413 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %414 = load <4 x i32>, ptr addrspace(3) %413, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %415 = bitcast float %385 to i32, !dbg !50
  %416 = bitcast float %386 to i32, !dbg !50
  %417 = bitcast float %387 to i32, !dbg !50
  %418 = bitcast float %388 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %401, i32 %415, i32 %416, i32 %417, i32 %418, i1 true) #2, !dbg !50
  %419 = bitcast float %389 to i32, !dbg !50
  %420 = bitcast float %390 to i32, !dbg !50
  %421 = bitcast float %391 to i32, !dbg !50
  %422 = bitcast float %392 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %406, i32 %419, i32 %420, i32 %421, i32 %422, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %423 = load <4 x i32>, ptr addrspace(3) %411, align 16, !dbg !50
  %424 = load <4 x i32>, ptr addrspace(3) %413, align 16, !dbg !50
  %.extract = extractelement <4 x i32> %412, i64 0, !dbg !50
  %.extract47 = extractelement <4 x i32> %412, i64 1, !dbg !50
  %.extract48 = extractelement <4 x i32> %412, i64 2, !dbg !50
  %.extract49 = extractelement <4 x i32> %412, i64 3, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract47, i32 %.extract48, i32 %.extract49, ptr addrspace(1) %394) #2, !dbg !50
  %.extract50 = extractelement <4 x i32> %414, i64 0, !dbg !50
  %.extract51 = extractelement <4 x i32> %414, i64 1, !dbg !50
  %.extract52 = extractelement <4 x i32> %414, i64 2, !dbg !50
  %.extract53 = extractelement <4 x i32> %414, i64 3, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract50, i32 %.extract51, i32 %.extract52, i32 %.extract53, ptr addrspace(1) %396) #2, !dbg !50
  %.extract54 = extractelement <4 x i32> %423, i64 0, !dbg !50
  %.extract55 = extractelement <4 x i32> %423, i64 1, !dbg !50
  %.extract56 = extractelement <4 x i32> %423, i64 2, !dbg !50
  %.extract57 = extractelement <4 x i32> %423, i64 3, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract54, i32 %.extract55, i32 %.extract56, i32 %.extract57, ptr addrspace(1) %398) #2, !dbg !50
  %.extract58 = extractelement <4 x i32> %424, i64 0, !dbg !50
  %.extract59 = extractelement <4 x i32> %424, i64 1, !dbg !50
  %.extract60 = extractelement <4 x i32> %424, i64 2, !dbg !50
  %.extract61 = extractelement <4 x i32> %424, i64 3, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract58, i32 %.extract59, i32 %.extract60, i32 %.extract61, ptr addrspace(1) %400) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caryk6d7c3hobidnlgz4bgme5erjqj5rswnko6bmmu26ylszour7.py", directory: "/tmp/torchinductor_root/ar")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 28, column: 19, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 30, scope: !6)
!16 = !DILocation(line: 30, column: 35, scope: !6)
!17 = !DILocation(line: 31, column: 30, scope: !6)
!18 = !DILocation(line: 31, column: 35, scope: !6)
!19 = !DILocation(line: 32, column: 30, scope: !6)
!20 = !DILocation(line: 32, column: 35, scope: !6)
!21 = !DILocation(line: 33, column: 31, scope: !6)
!22 = !DILocation(line: 33, column: 36, scope: !6)
!23 = !DILocation(line: 33, column: 75, scope: !6)
!24 = !DILocation(line: 34, column: 31, scope: !6)
!25 = !DILocation(line: 34, column: 36, scope: !6)
!26 = !DILocation(line: 34, column: 75, scope: !6)
!27 = !DILocation(line: 35, column: 19, scope: !6)
!28 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 37, column: 40, scope: !6)
!32 = !DILocation(line: 38, column: 12, scope: !6)
!33 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 39, column: 40, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 40, column: 40, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 42, column: 19, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 45, column: 42, scope: !6)
!43 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !42)
!46 = !DILocation(line: 47, column: 19, scope: !6)
!47 = !DILocation(line: 48, column: 20, scope: !6)
!48 = !DILocation(line: 49, column: 20, scope: !6)
!49 = !DILocation(line: 51, column: 25, scope: !6)
!50 = !DILocation(line: 51, column: 37, scope: !6)
!51 = !DILocation(line: 51, column: 4, scope: !6)
