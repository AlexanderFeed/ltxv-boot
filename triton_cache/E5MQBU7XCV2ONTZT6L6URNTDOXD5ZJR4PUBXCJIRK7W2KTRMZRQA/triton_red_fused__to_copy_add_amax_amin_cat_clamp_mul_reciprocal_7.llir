; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = and i32 %11, 31, !dbg !11
  %15 = or disjoint i32 %13, %10, !dbg !12
  %16 = icmp slt i32 %15, 4112, !dbg !13
  %17 = shl i32 %11, 2, !dbg !14
  %18 = and i32 %17, 252, !dbg !14
  %19 = mul i32 %15, 3072, !dbg !15
  %20 = mul i32 %15, 12288, !dbg !16
  %21 = add i32 %20, -3072
  %22 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !17
  %23 = shufflevector <4 x i1> %22, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %24, !dbg !18

24:                                               ; preds = %8, %__nv_tanhf.exit135
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit135 ]
  %25 = phi <4 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %231, %__nv_tanhf.exit135 ]
  %26 = phi <4 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %227, %__nv_tanhf.exit135 ]
  %27 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !19
  %28 = trunc i64 %indvars.iv to i32, !dbg !20
  %29 = or disjoint i32 %18, %28, !dbg !20
  %30 = add i32 %29, %19, !dbg !20
  %31 = sext i32 %30 to i64, !dbg !21
  %32 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = and i1 %16, %27, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %33) #5, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !23
  %37 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !23
  %39 = shufflevector <2 x bfloat> %38, <2 x bfloat> %36, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !24
  %40 = fpext <4 x bfloat> %39 to <4 x float>, !dbg !24
  %41 = icmp samesign ugt i64 %indvars.iv, 3071, !dbg !25
  %42 = add i32 %21, %29, !dbg !26
  %43 = sext i32 %42 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = and i1 %16, %41, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %45) #5, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !29
  %52 = insertelement <4 x i32> %51, i32 %49, i64 1, !dbg !29
  %53 = insertelement <4 x i32> %52, i32 %48, i64 2, !dbg !29
  %54 = insertelement <4 x i32> %53, i32 %47, i64 3, !dbg !29
  %55 = bitcast <4 x i32> %54 to <4 x float>, !dbg !29
  %56 = fmul <4 x float> %55, splat (float 5.000000e-01), !dbg !30
  %57 = bitcast i32 %47 to float, !dbg !31
  %58 = fmul float %57, %57, !dbg !31
  %59 = bitcast i32 %48 to float, !dbg !31
  %60 = fmul float %59, %59, !dbg !31
  %61 = bitcast i32 %49 to float, !dbg !31
  %62 = fmul float %61, %61, !dbg !31
  %63 = bitcast i32 %50 to float, !dbg !31
  %64 = fmul float %63, %63, !dbg !31
  %65 = fmul float %58, %57, !dbg !32
  %66 = fmul float %60, %59, !dbg !32
  %67 = fmul float %62, %61, !dbg !32
  %68 = fmul float %64, %63, !dbg !32
  %69 = fmul float %65, 0x3FA6E4E260000000, !dbg !33
  %70 = fmul float %66, 0x3FA6E4E260000000, !dbg !33
  %71 = fmul float %67, 0x3FA6E4E260000000, !dbg !33
  %72 = fmul float %68, 0x3FA6E4E260000000, !dbg !33
  %73 = fadd float %69, %57, !dbg !34
  %74 = fadd float %70, %59, !dbg !34
  %75 = fadd float %71, %61, !dbg !34
  %76 = fadd float %72, %63, !dbg !34
  %77 = fmul float %73, 0x3FE9884540000000, !dbg !35
  %78 = fmul float %74, 0x3FE9884540000000, !dbg !35
  %79 = fmul float %75, 0x3FE9884540000000, !dbg !35
  %80 = fmul float %76, 0x3FE9884540000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i60 = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call float @llvm.nvvm.fabs.ftz.f(float %77) #5, !dbg !36
  %83 = tail call float @llvm.nvvm.fabs.f(float %77) #5, !dbg !36
  %.01.i61 = select i1 %.not.i60, float %83, float %82, !dbg !36
  %84 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !36
  br i1 %84, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !36

__internal_fmad.exit1.i62:                        ; preds = %24
  %85 = fmul float %.01.i61, 0x4007154760000000, !dbg !36
  %86 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %85) #5, !dbg !36
  %87 = fadd float %86, 1.000000e+00, !dbg !36
  %88 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %87) #6, !dbg !36, !srcloc !37
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i63 = icmp eq i32 %89, 0, !dbg !36
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %88, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %88, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i64 = select i1 %.not6.i63, float %91, float %90, !dbg !36
  %92 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !36
  %s.0.i65 = select i1 %92, float 1.000000e+00, float %.03.i64, !dbg !36
  %93 = bitcast float %s.0.i65 to i32, !dbg !36
  %94 = bitcast float %77 to i32, !dbg !36
  %95 = and i32 %94, -2147483648, !dbg !36
  %96 = or i32 %95, %93, !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  br label %__nv_tanhf.exit78, !dbg !36

__internal_fmad.exit3.i67:                        ; preds = %24
  %98 = fmul float %77, %77, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i68 = icmp eq i32 %99, 0, !dbg !36
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %98, float 0xBFAAC795C0000000) #5, !dbg !36
  %101 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %98, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i69 = select i1 %.not1.i68, float %101, float %100, !dbg !36
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i70 = icmp eq i32 %102, 0, !dbg !36
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %98, float 0x3FC10B2820000000) #5, !dbg !36
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %98, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i71 = select i1 %.not2.i70, float %104, float %103, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i72 = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %98, float 0xBFD5553DA0000000) #5, !dbg !36
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %98, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i73 = select i1 %.not3.i72, float %107, float %106, !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i74 = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %98, float 0.000000e+00) #5, !dbg !36
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %98, float 0.000000e+00) #5, !dbg !36
  %.04.i75 = select i1 %.not4.i74, float %110, float %109, !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i76 = icmp eq i32 %111, 0, !dbg !36
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %77, float %77) #5, !dbg !36
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %77, float %77) #5, !dbg !36
  %.02.i77 = select i1 %.not5.i76, float %113, float %112, !dbg !36
  br label %__nv_tanhf.exit78, !dbg !36

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %97, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !36
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i79 = icmp eq i32 %114, 0, !dbg !36
  %115 = tail call float @llvm.nvvm.fabs.ftz.f(float %78) #5, !dbg !36
  %116 = tail call float @llvm.nvvm.fabs.f(float %78) #5, !dbg !36
  %.01.i80 = select i1 %.not.i79, float %116, float %115, !dbg !36
  %117 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !36
  br i1 %117, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !36

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %118 = fmul float %.01.i80, 0x4007154760000000, !dbg !36
  %119 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %118) #5, !dbg !36
  %120 = fadd float %119, 1.000000e+00, !dbg !36
  %121 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %120) #6, !dbg !36, !srcloc !37
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i82 = icmp eq i32 %122, 0, !dbg !36
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %121, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %121, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i83 = select i1 %.not6.i82, float %124, float %123, !dbg !36
  %125 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !36
  %s.0.i84 = select i1 %125, float 1.000000e+00, float %.03.i83, !dbg !36
  %126 = bitcast float %s.0.i84 to i32, !dbg !36
  %127 = bitcast float %78 to i32, !dbg !36
  %128 = and i32 %127, -2147483648, !dbg !36
  %129 = or i32 %128, %126, !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  br label %__nv_tanhf.exit97, !dbg !36

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %131 = fmul float %78, %78, !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i87 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %131, float 0xBFAAC795C0000000) #5, !dbg !36
  %134 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %131, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i88 = select i1 %.not1.i87, float %134, float %133, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i89 = icmp eq i32 %135, 0, !dbg !36
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %131, float 0x3FC10B2820000000) #5, !dbg !36
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %131, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i90 = select i1 %.not2.i89, float %137, float %136, !dbg !36
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i91 = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %131, float 0xBFD5553DA0000000) #5, !dbg !36
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %131, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i92 = select i1 %.not3.i91, float %140, float %139, !dbg !36
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i93 = icmp eq i32 %141, 0, !dbg !36
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %131, float 0.000000e+00) #5, !dbg !36
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %131, float 0.000000e+00) #5, !dbg !36
  %.04.i94 = select i1 %.not4.i93, float %143, float %142, !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i95 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %78, float %78) #5, !dbg !36
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %78, float %78) #5, !dbg !36
  %.02.i96 = select i1 %.not5.i95, float %146, float %145, !dbg !36
  br label %__nv_tanhf.exit97, !dbg !36

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %130, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !36
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i98 = icmp eq i32 %147, 0, !dbg !36
  %148 = tail call float @llvm.nvvm.fabs.ftz.f(float %79) #5, !dbg !36
  %149 = tail call float @llvm.nvvm.fabs.f(float %79) #5, !dbg !36
  %.01.i99 = select i1 %.not.i98, float %149, float %148, !dbg !36
  %150 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !36
  br i1 %150, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !36

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %151 = fmul float %.01.i99, 0x4007154760000000, !dbg !36
  %152 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %151) #5, !dbg !36
  %153 = fadd float %152, 1.000000e+00, !dbg !36
  %154 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %153) #6, !dbg !36, !srcloc !37
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i101 = icmp eq i32 %155, 0, !dbg !36
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %154, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %154, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i102 = select i1 %.not6.i101, float %157, float %156, !dbg !36
  %158 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !36
  %s.0.i103 = select i1 %158, float 1.000000e+00, float %.03.i102, !dbg !36
  %159 = bitcast float %s.0.i103 to i32, !dbg !36
  %160 = bitcast float %79 to i32, !dbg !36
  %161 = and i32 %160, -2147483648, !dbg !36
  %162 = or i32 %161, %159, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  br label %__nv_tanhf.exit116, !dbg !36

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %164 = fmul float %79, %79, !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i106 = icmp eq i32 %165, 0, !dbg !36
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %164, float 0xBFAAC795C0000000) #5, !dbg !36
  %167 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %164, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i107 = select i1 %.not1.i106, float %167, float %166, !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i108 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %164, float 0x3FC10B2820000000) #5, !dbg !36
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %164, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i109 = select i1 %.not2.i108, float %170, float %169, !dbg !36
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i110 = icmp eq i32 %171, 0, !dbg !36
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %164, float 0xBFD5553DA0000000) #5, !dbg !36
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %164, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i111 = select i1 %.not3.i110, float %173, float %172, !dbg !36
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i112 = icmp eq i32 %174, 0, !dbg !36
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %164, float 0.000000e+00) #5, !dbg !36
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %164, float 0.000000e+00) #5, !dbg !36
  %.04.i113 = select i1 %.not4.i112, float %176, float %175, !dbg !36
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i114 = icmp eq i32 %177, 0, !dbg !36
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %79, float %79) #5, !dbg !36
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %79, float %79) #5, !dbg !36
  %.02.i115 = select i1 %.not5.i114, float %179, float %178, !dbg !36
  br label %__nv_tanhf.exit116, !dbg !36

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %163, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i117 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call float @llvm.nvvm.fabs.ftz.f(float %80) #5, !dbg !36
  %182 = tail call float @llvm.nvvm.fabs.f(float %80) #5, !dbg !36
  %.01.i118 = select i1 %.not.i117, float %182, float %181, !dbg !36
  %183 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !36
  br i1 %183, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !36

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %184 = fmul float %.01.i118, 0x4007154760000000, !dbg !36
  %185 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %184) #5, !dbg !36
  %186 = fadd float %185, 1.000000e+00, !dbg !36
  %187 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %186) #6, !dbg !36, !srcloc !37
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i120 = icmp eq i32 %188, 0, !dbg !36
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %187, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %187, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i121 = select i1 %.not6.i120, float %190, float %189, !dbg !36
  %191 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !36
  %s.0.i122 = select i1 %191, float 1.000000e+00, float %.03.i121, !dbg !36
  %192 = bitcast float %s.0.i122 to i32, !dbg !36
  %193 = bitcast float %80 to i32, !dbg !36
  %194 = and i32 %193, -2147483648, !dbg !36
  %195 = or i32 %194, %192, !dbg !36
  %196 = bitcast i32 %195 to float, !dbg !36
  br label %__nv_tanhf.exit135, !dbg !36

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %197 = fmul float %80, %80, !dbg !36
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i125 = icmp eq i32 %198, 0, !dbg !36
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %197, float 0xBFAAC795C0000000) #5, !dbg !36
  %200 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %197, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i126 = select i1 %.not1.i125, float %200, float %199, !dbg !36
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i127 = icmp eq i32 %201, 0, !dbg !36
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %197, float 0x3FC10B2820000000) #5, !dbg !36
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %197, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i128 = select i1 %.not2.i127, float %203, float %202, !dbg !36
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i129 = icmp eq i32 %204, 0, !dbg !36
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %197, float 0xBFD5553DA0000000) #5, !dbg !36
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %197, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i130 = select i1 %.not3.i129, float %206, float %205, !dbg !36
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i131 = icmp eq i32 %207, 0, !dbg !36
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %197, float 0.000000e+00) #5, !dbg !36
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %197, float 0.000000e+00) #5, !dbg !36
  %.04.i132 = select i1 %.not4.i131, float %209, float %208, !dbg !36
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i133 = icmp eq i32 %210, 0, !dbg !36
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %80, float %80) #5, !dbg !36
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %80, float %80) #5, !dbg !36
  %.02.i134 = select i1 %.not5.i133, float %212, float %211, !dbg !36
  br label %__nv_tanhf.exit135, !dbg !36

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %196, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !36
  %213 = insertelement <4 x float> poison, float %s.1.i123, i64 0, !dbg !38
  %214 = insertelement <4 x float> %213, float %s.1.i104, i64 1, !dbg !38
  %215 = insertelement <4 x float> %214, float %s.1.i85, i64 2, !dbg !38
  %216 = insertelement <4 x float> %215, float %s.1.i66, i64 3, !dbg !38
  %217 = fadd <4 x float> %216, splat (float 1.000000e+00), !dbg !38
  %218 = fcmp uno <4 x float> %26, zeroinitializer, !dbg !39
  %219 = fcmp uno <4 x float> %25, zeroinitializer, !dbg !43
  %220 = fmul <4 x float> %56, %217, !dbg !45
  %221 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !46
  %222 = shufflevector <4 x i1> %221, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !46
  %223 = select <4 x i1> %222, <4 x float> %40, <4 x float> %220, !dbg !46
  %224 = fcmp olt <4 x float> %26, %223, !dbg !47
  %225 = or <4 x i1> %218, %224, !dbg !48
  %226 = select <4 x i1> %225, <4 x float> %26, <4 x float> %223, !dbg !49
  %227 = select <4 x i1> %23, <4 x float> %226, <4 x float> %26, !dbg !50
  %228 = fcmp ogt <4 x float> %25, %223, !dbg !51
  %229 = or <4 x i1> %219, %228, !dbg !52
  %230 = select <4 x i1> %229, <4 x float> %25, <4 x float> %223, !dbg !53
  %231 = select <4 x i1> %23, <4 x float> %230, <4 x float> %25, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !18
  %232 = icmp samesign ult i64 %indvars.iv, 15104, !dbg !18
  br i1 %232, label %24, label %233, !dbg !18

233:                                              ; preds = %__nv_tanhf.exit135
  %234 = lshr i32 %11, 5, !dbg !11
  %235 = and i32 %11, 7, !dbg !11
  %236 = or disjoint i32 %10, %235, !dbg !12
  %237 = icmp slt i32 %236, 4112, !dbg !13
  %238 = extractelement <4 x float> %227, i64 2, !dbg !54
  %239 = extractelement <4 x float> %227, i64 3, !dbg !54
  %240 = fcmp olt float %239, %238, !dbg !54
  %241 = fcmp uno float %239, 0.000000e+00, !dbg !57
  %242 = or i1 %240, %241, !dbg !58
  %243 = select i1 %242, float %239, float %238, !dbg !59
  %244 = extractelement <4 x float> %227, i64 1, !dbg !54
  %245 = fcmp olt float %243, %244, !dbg !54
  %246 = fcmp uno float %243, 0.000000e+00, !dbg !57
  %247 = or i1 %245, %246, !dbg !58
  %248 = select i1 %247, float %243, float %244, !dbg !59
  %249 = extractelement <4 x float> %227, i64 0, !dbg !54
  %250 = fcmp olt float %248, %249, !dbg !54
  %251 = fcmp uno float %248, 0.000000e+00, !dbg !57
  %252 = or i1 %250, %251, !dbg !58
  %253 = select i1 %252, float %248, float %249, !dbg !59
  %254 = bitcast float %253 to i32, !dbg !60
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 16, i32 31), !dbg !60
  %256 = bitcast i32 %255 to float, !dbg !60
  %257 = fcmp olt float %253, %256, !dbg !54
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !57
  %259 = or i1 %258, %257, !dbg !58
  %260 = select i1 %259, float %253, float %256, !dbg !59
  %261 = bitcast float %260 to i32, !dbg !60
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !60
  %263 = bitcast i32 %262 to float, !dbg !60
  %264 = fcmp olt float %260, %263, !dbg !54
  %265 = fcmp uno float %260, 0.000000e+00, !dbg !57
  %266 = or i1 %264, %265, !dbg !58
  %267 = select i1 %266, float %260, float %263, !dbg !59
  %268 = bitcast float %267 to i32, !dbg !60
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !60
  %270 = bitcast i32 %269 to float, !dbg !60
  %271 = fcmp olt float %267, %270, !dbg !54
  %272 = fcmp uno float %267, 0.000000e+00, !dbg !57
  %273 = or i1 %271, %272, !dbg !58
  %274 = select i1 %273, float %267, float %270, !dbg !59
  %275 = bitcast float %274 to i32, !dbg !60
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !60
  %277 = bitcast i32 %276 to float, !dbg !60
  %278 = fcmp olt float %274, %277, !dbg !54
  %279 = fcmp uno float %274, 0.000000e+00, !dbg !57
  %280 = or i1 %278, %279, !dbg !58
  %281 = select i1 %280, float %274, float %277, !dbg !59
  %282 = bitcast float %281 to i32, !dbg !60
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !60
  %284 = bitcast i32 %283 to float, !dbg !60
  %285 = fcmp olt float %281, %284, !dbg !54
  %286 = fcmp uno float %281, 0.000000e+00, !dbg !57
  %287 = or i1 %285, %286, !dbg !58
  %288 = and i32 %234, 1, !dbg !60
  %289 = icmp eq i32 %14, 0, !dbg !60
  %290 = shl nuw nsw i32 %13, 1, !dbg !60
  %291 = or disjoint i32 %290, %288, !dbg !60
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !60
  %293 = select i1 %287, i32 %282, i32 %283, !dbg !59
  %294 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %294, i1 %289) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %295 = icmp slt i32 %11, 16, !dbg !60
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %295) #5, !dbg !60
  %298 = bitcast i32 %297 to float, !dbg !60
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !60
  %300 = bitcast i32 %299 to float, !dbg !60
  %301 = fcmp olt float %298, %300, !dbg !54
  %302 = fcmp uno float %298, 0.000000e+00, !dbg !57
  %303 = or i1 %302, %301, !dbg !58
  %304 = and i32 %11, 1, !dbg !60
  %305 = icmp eq i32 %304, 0, !dbg !60
  %306 = and i1 %295, %305, !dbg !60
  %307 = select i1 %303, i32 %297, i32 %299, !dbg !59
  %308 = insertelement <1 x i32> poison, i32 %307, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %308, i1 %306) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !60
  %310 = load float, ptr addrspace(3) %309, align 8, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %311 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !61
  %312 = bitcast float %310 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %313 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %235, !dbg !61
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %315 = extractelement <4 x float> %231, i64 2, !dbg !64
  %316 = extractelement <4 x float> %231, i64 3, !dbg !64
  %317 = fcmp ogt float %316, %315, !dbg !64
  %318 = fcmp uno float %316, 0.000000e+00, !dbg !65
  %319 = or i1 %317, %318, !dbg !66
  %320 = select i1 %319, float %316, float %315, !dbg !67
  %321 = extractelement <4 x float> %231, i64 1, !dbg !64
  %322 = fcmp ogt float %320, %321, !dbg !64
  %323 = fcmp uno float %320, 0.000000e+00, !dbg !65
  %324 = or i1 %322, %323, !dbg !66
  %325 = select i1 %324, float %320, float %321, !dbg !67
  %326 = extractelement <4 x float> %231, i64 0, !dbg !64
  %327 = fcmp ogt float %325, %326, !dbg !64
  %328 = fcmp uno float %325, 0.000000e+00, !dbg !65
  %329 = or i1 %327, %328, !dbg !66
  %330 = select i1 %329, float %325, float %326, !dbg !67
  %331 = bitcast float %330 to i32, !dbg !62
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 16, i32 31), !dbg !62
  %333 = bitcast i32 %332 to float, !dbg !62
  %334 = fcmp ogt float %330, %333, !dbg !64
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !65
  %336 = or i1 %335, %334, !dbg !66
  %337 = select i1 %336, float %330, float %333, !dbg !67
  %338 = bitcast float %337 to i32, !dbg !62
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 8, i32 31), !dbg !62
  %340 = bitcast i32 %339 to float, !dbg !62
  %341 = fcmp ogt float %337, %340, !dbg !64
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !65
  %343 = or i1 %341, %342, !dbg !66
  %344 = select i1 %343, float %337, float %340, !dbg !67
  %345 = bitcast float %344 to i32, !dbg !62
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !62
  %347 = bitcast i32 %346 to float, !dbg !62
  %348 = fcmp ogt float %344, %347, !dbg !64
  %349 = fcmp uno float %344, 0.000000e+00, !dbg !65
  %350 = or i1 %348, %349, !dbg !66
  %351 = select i1 %350, float %344, float %347, !dbg !67
  %352 = bitcast float %351 to i32, !dbg !62
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !62
  %354 = bitcast i32 %353 to float, !dbg !62
  %355 = fcmp ogt float %351, %354, !dbg !64
  %356 = fcmp uno float %351, 0.000000e+00, !dbg !65
  %357 = or i1 %355, %356, !dbg !66
  %358 = select i1 %357, float %351, float %354, !dbg !67
  %359 = bitcast float %358 to i32, !dbg !62
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !62
  %361 = bitcast i32 %360 to float, !dbg !62
  %362 = fcmp ogt float %358, %361, !dbg !64
  %363 = fcmp uno float %358, 0.000000e+00, !dbg !65
  %364 = or i1 %362, %363, !dbg !66
  %365 = select i1 %364, i32 %359, i32 %360, !dbg !67
  %366 = insertelement <1 x i32> poison, i32 %365, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %366, i1 %289) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %367 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %295) #5, !dbg !62
  %368 = bitcast i32 %367 to float, !dbg !62
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 1, i32 31), !dbg !62
  %370 = bitcast i32 %369 to float, !dbg !62
  %371 = fcmp ogt float %368, %370, !dbg !64
  %372 = fcmp uno float %368, 0.000000e+00, !dbg !65
  %373 = or i1 %372, %371, !dbg !66
  %374 = select i1 %373, i32 %367, i32 %369, !dbg !67
  %375 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %375, i1 %306) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %376 = load float, ptr addrspace(3) %309, align 8, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %377 = bitcast float %376 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %377, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %378 = load float, ptr addrspace(3) %313, align 4, !dbg !68
  %379 = sext i32 %236 to i64, !dbg !69
  %380 = getelementptr bfloat, ptr addrspace(1) %2, i64 %379, !dbg !69
  %381 = fptrunc float %314 to bfloat, !dbg !61
  %382 = and i32 %11, 504, !dbg !61
  %383 = icmp eq i32 %382, 0, !dbg !61
  %384 = bitcast bfloat %381 to i16, !dbg !61
  %385 = and i1 %383, %237, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %384, ptr addrspace(1) %380, i1 %385) #5, !dbg !61
  %386 = getelementptr bfloat, ptr addrspace(1) %3, i64 %379, !dbg !70
  %387 = fptrunc float %378 to bfloat, !dbg !68
  %388 = bitcast bfloat %387 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %388, ptr addrspace(1) %386, i1 %385) #5, !dbg !68
  %.inv = fcmp oge float %310, 0.000000e+00, !dbg !71
  %389 = select i1 %.inv, float 0.000000e+00, float %310, !dbg !71
  %390 = fsub float 0.000000e+00, %389, !dbg !73
  %.inv2 = fcmp ole float %376, 0.000000e+00, !dbg !74
  %391 = select i1 %.inv2, float 0.000000e+00, float %376, !dbg !74
  %392 = fcmp ogt float %390, %391, !dbg !76
  %393 = fcmp uno float %390, 0.000000e+00, !dbg !78
  %394 = or i1 %393, %392, !dbg !79
  %395 = select i1 %394, float %390, float %391, !dbg !80
  %396 = fmul float %395, 0x3F80204080000000, !dbg !81
  %397 = fcmp ogt float %396, 0x3EE4F8B580000000, !dbg !82
  %398 = fcmp uno float %396, 0.000000e+00, !dbg !84
  %399 = or i1 %397, %398, !dbg !85
  %400 = select i1 %399, float %396, float 0x3EE4F8B580000000, !dbg !86
  %401 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %400), !dbg !87
  %402 = mul i32 %15, 15360, !dbg !88
  br label %403, !dbg !89

403:                                              ; preds = %233, %__nv_tanhf.exit59
  %indvars.iv144 = phi i64 [ 0, %233 ], [ %indvars.iv.next145, %__nv_tanhf.exit59 ]
  %404 = icmp samesign ult i64 %indvars.iv144, 3072, !dbg !90
  %405 = trunc i64 %indvars.iv144 to i32, !dbg !91
  %406 = or disjoint i32 %18, %405, !dbg !91
  %407 = add i32 %406, %19, !dbg !91
  %408 = sext i32 %407 to i64, !dbg !92
  %409 = getelementptr bfloat, ptr addrspace(1) %0, i64 %408, !dbg !92
  %410 = and i1 %16, %404, !dbg !93
  %411 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %409, i1 %410) #5, !dbg !94
  %412 = extractvalue { i32, i32 } %411, 0, !dbg !94
  %413 = bitcast i32 %412 to <2 x bfloat>, !dbg !94
  %414 = extractvalue { i32, i32 } %411, 1, !dbg !94
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !94
  %416 = extractelement <2 x bfloat> %413, i64 0, !dbg !94
  %417 = extractelement <2 x bfloat> %413, i64 1, !dbg !94
  %418 = extractelement <2 x bfloat> %415, i64 0, !dbg !94
  %419 = extractelement <2 x bfloat> %415, i64 1, !dbg !94
  %420 = fpext bfloat %416 to float, !dbg !95
  %421 = fpext bfloat %417 to float, !dbg !95
  %422 = fpext bfloat %418 to float, !dbg !95
  %423 = fpext bfloat %419 to float, !dbg !95
  %424 = icmp samesign ugt i64 %indvars.iv144, 3071, !dbg !96
  %425 = add i32 %21, %406, !dbg !97
  %426 = sext i32 %425 to i64, !dbg !98
  %427 = getelementptr float, ptr addrspace(1) %1, i64 %426, !dbg !98
  %428 = and i1 %16, %424, !dbg !99
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %427, i1 %428) #5, !dbg !100
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !100
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !100
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !100
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !100
  %434 = bitcast i32 %430 to float, !dbg !100
  %435 = bitcast i32 %431 to float, !dbg !100
  %436 = bitcast i32 %432 to float, !dbg !100
  %437 = bitcast i32 %433 to float, !dbg !100
  %438 = fmul float %434, 5.000000e-01, !dbg !101
  %439 = fmul float %435, 5.000000e-01, !dbg !101
  %440 = fmul float %436, 5.000000e-01, !dbg !101
  %441 = fmul float %437, 5.000000e-01, !dbg !101
  %442 = fmul float %434, %434, !dbg !102
  %443 = fmul float %435, %435, !dbg !102
  %444 = fmul float %436, %436, !dbg !102
  %445 = fmul float %437, %437, !dbg !102
  %446 = fmul float %442, %434, !dbg !103
  %447 = fmul float %443, %435, !dbg !103
  %448 = fmul float %444, %436, !dbg !103
  %449 = fmul float %445, %437, !dbg !103
  %450 = fmul float %446, 0x3FA6E4E260000000, !dbg !104
  %451 = fmul float %447, 0x3FA6E4E260000000, !dbg !104
  %452 = fmul float %448, 0x3FA6E4E260000000, !dbg !104
  %453 = fmul float %449, 0x3FA6E4E260000000, !dbg !104
  %454 = fadd float %450, %434, !dbg !105
  %455 = fadd float %451, %435, !dbg !105
  %456 = fadd float %452, %436, !dbg !105
  %457 = fadd float %453, %437, !dbg !105
  %458 = fmul float %454, 0x3FE9884540000000, !dbg !106
  %459 = fmul float %455, 0x3FE9884540000000, !dbg !106
  %460 = fmul float %456, 0x3FE9884540000000, !dbg !106
  %461 = fmul float %457, 0x3FE9884540000000, !dbg !106
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i = icmp eq i32 %462, 0, !dbg !107
  %463 = tail call float @llvm.nvvm.fabs.ftz.f(float %458) #5, !dbg !107
  %464 = tail call float @llvm.nvvm.fabs.f(float %458) #5, !dbg !107
  %.01.i = select i1 %.not.i, float %464, float %463, !dbg !107
  %465 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !107
  br i1 %465, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !107

__internal_fmad.exit1.i:                          ; preds = %403
  %466 = fmul float %.01.i, 0x4007154760000000, !dbg !107
  %467 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %466) #5, !dbg !107
  %468 = fadd float %467, 1.000000e+00, !dbg !107
  %469 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %468) #6, !dbg !107, !srcloc !37
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i = icmp eq i32 %470, 0, !dbg !107
  %471 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %469, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %472 = tail call float @llvm.nvvm.fma.rn.f(float %469, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i = select i1 %.not6.i, float %472, float %471, !dbg !107
  %473 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !107
  %s.0.i = select i1 %473, float 1.000000e+00, float %.03.i, !dbg !107
  %474 = bitcast float %s.0.i to i32, !dbg !107
  %475 = bitcast float %458 to i32, !dbg !107
  %476 = and i32 %475, -2147483648, !dbg !107
  %477 = or i32 %476, %474, !dbg !107
  %478 = bitcast i32 %477 to float, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__internal_fmad.exit3.i:                          ; preds = %403
  %479 = fmul float %458, %458, !dbg !107
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i = icmp eq i32 %480, 0, !dbg !107
  %481 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %479, float 0xBFAAC795C0000000) #5, !dbg !107
  %482 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %479, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i = select i1 %.not1.i, float %482, float %481, !dbg !107
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i = icmp eq i32 %483, 0, !dbg !107
  %484 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %479, float 0x3FC10B2820000000) #5, !dbg !107
  %485 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %479, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i = select i1 %.not2.i, float %485, float %484, !dbg !107
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i = icmp eq i32 %486, 0, !dbg !107
  %487 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %479, float 0xBFD5553DA0000000) #5, !dbg !107
  %488 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %479, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i = select i1 %.not3.i, float %488, float %487, !dbg !107
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i = icmp eq i32 %489, 0, !dbg !107
  %490 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %479, float 0.000000e+00) #5, !dbg !107
  %491 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %479, float 0.000000e+00) #5, !dbg !107
  %.04.i = select i1 %.not4.i, float %491, float %490, !dbg !107
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i = icmp eq i32 %492, 0, !dbg !107
  %493 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %458, float %458) #5, !dbg !107
  %494 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %458, float %458) #5, !dbg !107
  %.02.i = select i1 %.not5.i, float %494, float %493, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %478, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !107
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i3 = icmp eq i32 %495, 0, !dbg !107
  %496 = tail call float @llvm.nvvm.fabs.ftz.f(float %459) #5, !dbg !107
  %497 = tail call float @llvm.nvvm.fabs.f(float %459) #5, !dbg !107
  %.01.i4 = select i1 %.not.i3, float %497, float %496, !dbg !107
  %498 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !107
  br i1 %498, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !107

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %499 = fmul float %.01.i4, 0x4007154760000000, !dbg !107
  %500 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %499) #5, !dbg !107
  %501 = fadd float %500, 1.000000e+00, !dbg !107
  %502 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %501) #6, !dbg !107, !srcloc !37
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i6 = icmp eq i32 %503, 0, !dbg !107
  %504 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %502, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %505 = tail call float @llvm.nvvm.fma.rn.f(float %502, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i7 = select i1 %.not6.i6, float %505, float %504, !dbg !107
  %506 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !107
  %s.0.i8 = select i1 %506, float 1.000000e+00, float %.03.i7, !dbg !107
  %507 = bitcast float %s.0.i8 to i32, !dbg !107
  %508 = bitcast float %459 to i32, !dbg !107
  %509 = and i32 %508, -2147483648, !dbg !107
  %510 = or i32 %509, %507, !dbg !107
  %511 = bitcast i32 %510 to float, !dbg !107
  br label %__nv_tanhf.exit21, !dbg !107

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %512 = fmul float %459, %459, !dbg !107
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i11 = icmp eq i32 %513, 0, !dbg !107
  %514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %512, float 0xBFAAC795C0000000) #5, !dbg !107
  %515 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %512, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i12 = select i1 %.not1.i11, float %515, float %514, !dbg !107
  %516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i13 = icmp eq i32 %516, 0, !dbg !107
  %517 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %512, float 0x3FC10B2820000000) #5, !dbg !107
  %518 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %512, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i14 = select i1 %.not2.i13, float %518, float %517, !dbg !107
  %519 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i15 = icmp eq i32 %519, 0, !dbg !107
  %520 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %512, float 0xBFD5553DA0000000) #5, !dbg !107
  %521 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %512, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i16 = select i1 %.not3.i15, float %521, float %520, !dbg !107
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i17 = icmp eq i32 %522, 0, !dbg !107
  %523 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %512, float 0.000000e+00) #5, !dbg !107
  %524 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %512, float 0.000000e+00) #5, !dbg !107
  %.04.i18 = select i1 %.not4.i17, float %524, float %523, !dbg !107
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i19 = icmp eq i32 %525, 0, !dbg !107
  %526 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %459, float %459) #5, !dbg !107
  %527 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %459, float %459) #5, !dbg !107
  %.02.i20 = select i1 %.not5.i19, float %527, float %526, !dbg !107
  br label %__nv_tanhf.exit21, !dbg !107

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %511, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !107
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i22 = icmp eq i32 %528, 0, !dbg !107
  %529 = tail call float @llvm.nvvm.fabs.ftz.f(float %460) #5, !dbg !107
  %530 = tail call float @llvm.nvvm.fabs.f(float %460) #5, !dbg !107
  %.01.i23 = select i1 %.not.i22, float %530, float %529, !dbg !107
  %531 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !107
  br i1 %531, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !107

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %532 = fmul float %.01.i23, 0x4007154760000000, !dbg !107
  %533 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %532) #5, !dbg !107
  %534 = fadd float %533, 1.000000e+00, !dbg !107
  %535 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %534) #6, !dbg !107, !srcloc !37
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i25 = icmp eq i32 %536, 0, !dbg !107
  %537 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %535, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %538 = tail call float @llvm.nvvm.fma.rn.f(float %535, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i26 = select i1 %.not6.i25, float %538, float %537, !dbg !107
  %539 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !107
  %s.0.i27 = select i1 %539, float 1.000000e+00, float %.03.i26, !dbg !107
  %540 = bitcast float %s.0.i27 to i32, !dbg !107
  %541 = bitcast float %460 to i32, !dbg !107
  %542 = and i32 %541, -2147483648, !dbg !107
  %543 = or i32 %542, %540, !dbg !107
  %544 = bitcast i32 %543 to float, !dbg !107
  br label %__nv_tanhf.exit40, !dbg !107

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %545 = fmul float %460, %460, !dbg !107
  %546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i30 = icmp eq i32 %546, 0, !dbg !107
  %547 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %545, float 0xBFAAC795C0000000) #5, !dbg !107
  %548 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %545, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i31 = select i1 %.not1.i30, float %548, float %547, !dbg !107
  %549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i32 = icmp eq i32 %549, 0, !dbg !107
  %550 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %545, float 0x3FC10B2820000000) #5, !dbg !107
  %551 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %545, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i33 = select i1 %.not2.i32, float %551, float %550, !dbg !107
  %552 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i34 = icmp eq i32 %552, 0, !dbg !107
  %553 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %545, float 0xBFD5553DA0000000) #5, !dbg !107
  %554 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %545, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i35 = select i1 %.not3.i34, float %554, float %553, !dbg !107
  %555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i36 = icmp eq i32 %555, 0, !dbg !107
  %556 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %545, float 0.000000e+00) #5, !dbg !107
  %557 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %545, float 0.000000e+00) #5, !dbg !107
  %.04.i37 = select i1 %.not4.i36, float %557, float %556, !dbg !107
  %558 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i38 = icmp eq i32 %558, 0, !dbg !107
  %559 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %460, float %460) #5, !dbg !107
  %560 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %460, float %460) #5, !dbg !107
  %.02.i39 = select i1 %.not5.i38, float %560, float %559, !dbg !107
  br label %__nv_tanhf.exit40, !dbg !107

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %544, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !107
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i41 = icmp eq i32 %561, 0, !dbg !107
  %562 = tail call float @llvm.nvvm.fabs.ftz.f(float %461) #5, !dbg !107
  %563 = tail call float @llvm.nvvm.fabs.f(float %461) #5, !dbg !107
  %.01.i42 = select i1 %.not.i41, float %563, float %562, !dbg !107
  %564 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !107
  br i1 %564, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !107

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %565 = fmul float %.01.i42, 0x4007154760000000, !dbg !107
  %566 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %565) #5, !dbg !107
  %567 = fadd float %566, 1.000000e+00, !dbg !107
  %568 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %567) #6, !dbg !107, !srcloc !37
  %569 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i44 = icmp eq i32 %569, 0, !dbg !107
  %570 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %568, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %571 = tail call float @llvm.nvvm.fma.rn.f(float %568, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i45 = select i1 %.not6.i44, float %571, float %570, !dbg !107
  %572 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !107
  %s.0.i46 = select i1 %572, float 1.000000e+00, float %.03.i45, !dbg !107
  %573 = bitcast float %s.0.i46 to i32, !dbg !107
  %574 = bitcast float %461 to i32, !dbg !107
  %575 = and i32 %574, -2147483648, !dbg !107
  %576 = or i32 %575, %573, !dbg !107
  %577 = bitcast i32 %576 to float, !dbg !107
  br label %__nv_tanhf.exit59, !dbg !107

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %578 = fmul float %461, %461, !dbg !107
  %579 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i49 = icmp eq i32 %579, 0, !dbg !107
  %580 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %578, float 0xBFAAC795C0000000) #5, !dbg !107
  %581 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %578, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i50 = select i1 %.not1.i49, float %581, float %580, !dbg !107
  %582 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i51 = icmp eq i32 %582, 0, !dbg !107
  %583 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %578, float 0x3FC10B2820000000) #5, !dbg !107
  %584 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %578, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i52 = select i1 %.not2.i51, float %584, float %583, !dbg !107
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i53 = icmp eq i32 %585, 0, !dbg !107
  %586 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %578, float 0xBFD5553DA0000000) #5, !dbg !107
  %587 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %578, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i54 = select i1 %.not3.i53, float %587, float %586, !dbg !107
  %588 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i55 = icmp eq i32 %588, 0, !dbg !107
  %589 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %578, float 0.000000e+00) #5, !dbg !107
  %590 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %578, float 0.000000e+00) #5, !dbg !107
  %.04.i56 = select i1 %.not4.i55, float %590, float %589, !dbg !107
  %591 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i57 = icmp eq i32 %591, 0, !dbg !107
  %592 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %461, float %461) #5, !dbg !107
  %593 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %461, float %461) #5, !dbg !107
  %.02.i58 = select i1 %.not5.i57, float %593, float %592, !dbg !107
  br label %__nv_tanhf.exit59, !dbg !107

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %577, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !107
  %594 = fadd float %s.1.i, 1.000000e+00, !dbg !108
  %595 = fadd float %s.1.i9, 1.000000e+00, !dbg !108
  %596 = fadd float %s.1.i28, 1.000000e+00, !dbg !108
  %597 = fadd float %s.1.i47, 1.000000e+00, !dbg !108
  %598 = fmul float %438, %594, !dbg !109
  %599 = fmul float %439, %595, !dbg !109
  %600 = fmul float %440, %596, !dbg !109
  %601 = fmul float %441, %597, !dbg !109
  %602 = select i1 %404, float %420, float %598, !dbg !110
  %603 = select i1 %404, float %421, float %599, !dbg !110
  %604 = select i1 %404, float %422, float %600, !dbg !110
  %605 = select i1 %404, float %423, float %601, !dbg !110
  %606 = fmul float %401, %602, !dbg !111
  %607 = fmul float %401, %603, !dbg !111
  %608 = fmul float %401, %604, !dbg !111
  %609 = fmul float %401, %605, !dbg !111
  %610 = tail call float @llvm.nvvm.round.f(float %606) #5, !dbg !112
  %611 = tail call float @llvm.nvvm.round.f(float %607) #5, !dbg !112
  %612 = tail call float @llvm.nvvm.round.f(float %608) #5, !dbg !112
  %613 = tail call float @llvm.nvvm.round.f(float %609) #5, !dbg !112
  %614 = insertelement <4 x float> poison, float %610, i64 0, !dbg !113
  %615 = insertelement <4 x float> %614, float %611, i64 1, !dbg !113
  %616 = insertelement <4 x float> %615, float %612, i64 2, !dbg !113
  %617 = insertelement <4 x float> %616, float %613, i64 3, !dbg !113
  %618 = fcmp ogt <4 x float> %617, splat (float -1.270000e+02), !dbg !113
  %619 = fcmp uno <4 x float> %617, zeroinitializer, !dbg !115
  %620 = or <4 x i1> %618, %619, !dbg !116
  %621 = select <4 x i1> %620, <4 x float> %617, <4 x float> splat (float -1.270000e+02), !dbg !117
  %622 = fcmp olt <4 x float> %621, splat (float 1.270000e+02), !dbg !118
  %623 = fcmp uno <4 x float> %621, zeroinitializer, !dbg !120
  %624 = or <4 x i1> %622, %623, !dbg !121
  %625 = fptosi <4 x float> %621 to <4 x i8>, !dbg !122
  %626 = select <4 x i1> %624, <4 x i8> %625, <4 x i8> splat (i8 127), !dbg !123
  %627 = add i32 %406, %402, !dbg !124
  %628 = sext i32 %627 to i64, !dbg !125
  %629 = getelementptr i8, ptr addrspace(1) %4, i64 %628, !dbg !125
  %630 = bitcast <4 x i8> %626 to i32, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %630, ptr addrspace(1) %629, i1 %16) #5, !dbg !126
  %indvars.iv.next145 = add nuw nsw i64 %indvars.iv144, 256, !dbg !89
  %631 = icmp samesign ult i64 %indvars.iv144, 15104, !dbg !89
  br i1 %631, label %403, label %632, !dbg !89

632:                                              ; preds = %__nv_tanhf.exit59
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 42, column: 39, scope: !6)
!16 = !DILocation(line: 46, column: 40, scope: !6)
!17 = !DILocation(line: 68, column: 50, scope: !6)
!18 = !DILocation(line: 31, column: 40, scope: !6)
!19 = !DILocation(line: 41, column: 22, scope: !6)
!20 = !DILocation(line: 42, column: 45, scope: !6)
!21 = !DILocation(line: 42, column: 34, scope: !6)
!22 = !DILocation(line: 42, column: 71, scope: !6)
!23 = !DILocation(line: 42, column: 53, scope: !6)
!24 = !DILocation(line: 42, column: 121, scope: !6)
!25 = !DILocation(line: 43, column: 23, scope: !6)
!26 = !DILocation(line: 46, column: 46, scope: !6)
!27 = !DILocation(line: 46, column: 34, scope: !6)
!28 = !DILocation(line: 46, column: 82, scope: !6)
!29 = !DILocation(line: 46, column: 64, scope: !6)
!30 = !DILocation(line: 48, column: 23, scope: !6)
!31 = !DILocation(line: 49, column: 23, scope: !6)
!32 = !DILocation(line: 50, column: 24, scope: !6)
!33 = !DILocation(line: 52, column: 24, scope: !6)
!34 = !DILocation(line: 53, column: 23, scope: !6)
!35 = !DILocation(line: 55, column: 24, scope: !6)
!36 = !DILocation(line: 56, column: 31, scope: !6)
!37 = !{i32 21046}
!38 = !DILocation(line: 58, column: 24, scope: !6)
!39 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 65, column: 47, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 67, column: 47, scope: !6)
!45 = !DILocation(line: 59, column: 24, scope: !6)
!46 = !DILocation(line: 63, column: 37, scope: !6)
!47 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !42)
!50 = !DILocation(line: 66, column: 50, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !44)
!52 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !44)
!53 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !44)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !40, inlinedAt: !56)
!61 = !DILocation(line: 71, column: 37, scope: !6)
!62 = !DILocation(line: 115, column: 29, scope: !40, inlinedAt: !63)
!63 = !DILocation(line: 70, column: 40, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !63)
!66 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !63)
!67 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !63)
!68 = !DILocation(line: 72, column: 37, scope: !6)
!69 = !DILocation(line: 71, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 25, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 83, column: 24, scope: !6)
!91 = !DILocation(line: 84, column: 46, scope: !6)
!92 = !DILocation(line: 84, column: 35, scope: !6)
!93 = !DILocation(line: 84, column: 72, scope: !6)
!94 = !DILocation(line: 84, column: 54, scope: !6)
!95 = !DILocation(line: 84, column: 123, scope: !6)
!96 = !DILocation(line: 85, column: 25, scope: !6)
!97 = !DILocation(line: 88, column: 47, scope: !6)
!98 = !DILocation(line: 88, column: 35, scope: !6)
!99 = !DILocation(line: 88, column: 83, scope: !6)
!100 = !DILocation(line: 88, column: 65, scope: !6)
!101 = !DILocation(line: 90, column: 24, scope: !6)
!102 = !DILocation(line: 91, column: 24, scope: !6)
!103 = !DILocation(line: 92, column: 24, scope: !6)
!104 = !DILocation(line: 94, column: 24, scope: !6)
!105 = !DILocation(line: 95, column: 24, scope: !6)
!106 = !DILocation(line: 97, column: 24, scope: !6)
!107 = !DILocation(line: 98, column: 31, scope: !6)
!108 = !DILocation(line: 100, column: 24, scope: !6)
!109 = !DILocation(line: 101, column: 24, scope: !6)
!110 = !DILocation(line: 105, column: 39, scope: !6)
!111 = !DILocation(line: 121, column: 24, scope: !6)
!112 = !DILocation(line: 122, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !114)
!114 = !DILocation(line: 125, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !119)
!119 = !DILocation(line: 127, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !119)
!122 = !DILocation(line: 129, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !119)
!124 = !DILocation(line: 130, column: 36, scope: !6)
!125 = !DILocation(line: 130, column: 29, scope: !6)
!126 = !DILocation(line: 130, column: 54, scope: !6)
!127 = !DILocation(line: 73, column: 4, scope: !6)
