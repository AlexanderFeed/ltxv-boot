; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 1, !dbg !11
  %11 = and i32 %10, 1022, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  br i1 %8, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %6
  %16 = or disjoint i32 %11, %12, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 false) #4, !dbg !18
  %20 = or disjoint i64 %13, 1024, !dbg !19
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %21, i1 true) #4, !dbg !15
  %23 = trunc nuw nsw i64 %20 to i32, !dbg !16
  %24 = add i32 %12, %23, !dbg !16
  %25 = sext i32 %24 to i64, !dbg !17
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 false) #4, !dbg !18
  %28 = or disjoint i64 %13, 2048, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !14
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 true) #4, !dbg !15
  %31 = trunc nuw nsw i64 %28 to i32, !dbg !16
  %32 = add i32 %12, %31, !dbg !16
  %33 = sext i32 %32 to i64, !dbg !17
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %34, i1 false) #4, !dbg !18
  br label %.split2.us, !dbg !11

.split.us.preheader:                              ; preds = %6
  %36 = bitcast i32 %15 to <2 x bfloat>, !dbg !15
  %37 = or disjoint i32 %11, %12, !dbg !16
  %38 = sext i32 %37 to i64, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 true) #4, !dbg !18
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !18
  %42 = or disjoint i64 %13, 1024, !dbg !19
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !14
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 true) #4, !dbg !15
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !15
  %46 = trunc nuw nsw i64 %42 to i32, !dbg !16
  %47 = add i32 %12, %46, !dbg !16
  %48 = sext i32 %47 to i64, !dbg !17
  %49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !17
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 true) #4, !dbg !18
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !18
  %52 = or disjoint i64 %13, 2048, !dbg !19
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !14
  %54 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #4, !dbg !15
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !15
  %56 = trunc nuw nsw i64 %52 to i32, !dbg !16
  %57 = add i32 %12, %56, !dbg !16
  %58 = sext i32 %57 to i64, !dbg !17
  %59 = getelementptr bfloat, ptr addrspace(1) %1, i64 %58, !dbg !17
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %59, i1 true) #4, !dbg !18
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !18
  %62 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !20
  %63 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !21
  %64 = extractelement <2 x float> %62, i64 0, !dbg !22
  %65 = fsub float 0.000000e+00, %64, !dbg !22
  %66 = extractelement <2 x float> %62, i64 1, !dbg !22
  %67 = fsub float 0.000000e+00, %66, !dbg !22
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !26
  %69 = tail call float @llvm.nvvm.ex2.approx.f(float %68), !dbg !26
  %70 = fmul float %67, 0x3FF7154760000000, !dbg !26
  %71 = tail call float @llvm.nvvm.ex2.approx.f(float %70), !dbg !26
  %72 = fadd float %69, 1.000000e+00, !dbg !27
  %73 = fadd float %71, 1.000000e+00, !dbg !27
  %74 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %72), !dbg !28
  %75 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %73), !dbg !28
  %76 = insertelement <2 x float> poison, float %74, i64 0, !dbg !29
  %77 = insertelement <2 x float> %76, float %75, i64 1, !dbg !29
  %78 = fmul <2 x float> %77, %62, !dbg !29
  %79 = fmul <2 x float> %78, %63, !dbg !30
  %80 = fadd <2 x float> %79, zeroinitializer, !dbg !31
  %81 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !20
  %82 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !21
  %83 = extractelement <2 x float> %81, i64 0, !dbg !22
  %84 = fsub float 0.000000e+00, %83, !dbg !22
  %85 = extractelement <2 x float> %81, i64 1, !dbg !22
  %86 = fsub float 0.000000e+00, %85, !dbg !22
  %87 = fmul float %84, 0x3FF7154760000000, !dbg !26
  %88 = tail call float @llvm.nvvm.ex2.approx.f(float %87), !dbg !26
  %89 = fmul float %86, 0x3FF7154760000000, !dbg !26
  %90 = tail call float @llvm.nvvm.ex2.approx.f(float %89), !dbg !26
  %91 = fadd float %88, 1.000000e+00, !dbg !27
  %92 = fadd float %90, 1.000000e+00, !dbg !27
  %93 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %91), !dbg !28
  %94 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %92), !dbg !28
  %95 = insertelement <2 x float> poison, float %93, i64 0, !dbg !29
  %96 = insertelement <2 x float> %95, float %94, i64 1, !dbg !29
  %97 = fmul <2 x float> %96, %81, !dbg !29
  %98 = fmul <2 x float> %97, %82, !dbg !30
  %99 = fadd <2 x float> %80, %98, !dbg !31
  %100 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !20
  %101 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !21
  %102 = extractelement <2 x float> %100, i64 0, !dbg !22
  %103 = fsub float 0.000000e+00, %102, !dbg !22
  %104 = extractelement <2 x float> %100, i64 1, !dbg !22
  %105 = fsub float 0.000000e+00, %104, !dbg !22
  %106 = fmul float %103, 0x3FF7154760000000, !dbg !26
  %107 = tail call float @llvm.nvvm.ex2.approx.f(float %106), !dbg !26
  %108 = fmul float %105, 0x3FF7154760000000, !dbg !26
  %109 = tail call float @llvm.nvvm.ex2.approx.f(float %108), !dbg !26
  %110 = fadd float %107, 1.000000e+00, !dbg !27
  %111 = fadd float %109, 1.000000e+00, !dbg !27
  %112 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %110), !dbg !28
  %113 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %111), !dbg !28
  %114 = insertelement <2 x float> poison, float %112, i64 0, !dbg !29
  %115 = insertelement <2 x float> %114, float %113, i64 1, !dbg !29
  %116 = fmul <2 x float> %115, %100, !dbg !29
  %117 = fmul <2 x float> %116, %101, !dbg !30
  %118 = fadd <2 x float> %99, %117, !dbg !31
  %shift = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !11
  %119 = fadd <2 x float> %118, %shift, !dbg !11
  %120 = extractelement <2 x float> %119, i64 0, !dbg !11
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %121 = phi float [ %120, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !32
  %122 = lshr i32 %9, 5, !dbg !11
  %123 = and i32 %9, 31, !dbg !11
  %124 = bitcast float %121 to i32, !dbg !35
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = fadd float %121, %126, !dbg !32
  %128 = bitcast float %127 to i32, !dbg !35
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = fadd float %127, %130, !dbg !32
  %132 = bitcast float %131 to i32, !dbg !35
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = fadd float %131, %134, !dbg !32
  %136 = bitcast float %135 to i32, !dbg !35
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fadd float %135, %138, !dbg !32
  %140 = bitcast float %139 to i32, !dbg !35
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !35
  %142 = bitcast i32 %141 to float, !dbg !35
  %143 = fadd float %139, %142, !dbg !32
  %144 = and i32 %122, 15, !dbg !35
  %145 = icmp eq i32 %123, 0, !dbg !35
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !35
  %147 = bitcast float %143 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 %145) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %148 = icmp slt i32 %9, 16, !dbg !35
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %149, i1 %148) #4, !dbg !35
  %151 = bitcast i32 %150 to float, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %151, %153, !dbg !32
  %155 = bitcast float %154 to i32, !dbg !35
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = fadd float %154, %157, !dbg !32
  %159 = bitcast float %158 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %158, %161, !dbg !32
  %163 = bitcast float %162 to i32, !dbg !35
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = fadd float %162, %165, !dbg !32
  %167 = and i32 %9, 15, !dbg !35
  %168 = icmp eq i32 %167, 0, !dbg !35
  %169 = and i1 %148, %168, !dbg !35
  %170 = bitcast float %166 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %170, i1 %169) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %171 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %172 = sext i32 %7 to i64, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !36
  %174 = and i32 %9, 511, !dbg !37
  %175 = icmp eq i32 %174, 0, !dbg !37
  %176 = and i1 %8, %175, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %173, i1 %176) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 113, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!34 = !DILocation(line: 48, column: 27, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
