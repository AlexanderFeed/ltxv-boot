; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 128, !dbg !11
  %.lobit = lshr exact i32 %19, 7, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 512, !dbg !13
  %23 = icmp slt i32 %17, 512, !dbg !13
  %24 = shl i32 %18, 3, !dbg !14
  %25 = and i32 %24, 1016, !dbg !14
  %26 = shl i32 %18, 2, !dbg !14
  %27 = mul i32 %21, 3072, !dbg !15
  %28 = or disjoint i32 %27, %25
  %29 = sext i32 %28 to i64, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %22) #5, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !17
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !17
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !17
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %48 = fpext bfloat %40 to float, !dbg !18
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = select i1 %22, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %22, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %22, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %22, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %22, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %22, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %22, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %22, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %65 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %97 = add i32 %28, %96, !dbg !22
  %98 = sext i32 %97 to i64, !dbg !16
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !16
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %99, i1 %22) #5, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !17
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !17
  %103 = extractelement <2 x bfloat> %102, i64 1, !dbg !17
  %104 = fpext bfloat %103 to float, !dbg !18
  %105 = extractelement <2 x bfloat> %102, i64 0, !dbg !17
  %106 = fpext bfloat %105 to float, !dbg !18
  %107 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !17
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !17
  %109 = extractelement <2 x bfloat> %108, i64 1, !dbg !17
  %110 = fpext bfloat %109 to float, !dbg !18
  %111 = extractelement <2 x bfloat> %108, i64 0, !dbg !17
  %112 = fpext bfloat %111 to float, !dbg !18
  %113 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !17
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !17
  %115 = extractelement <2 x bfloat> %114, i64 1, !dbg !17
  %116 = fpext bfloat %115 to float, !dbg !18
  %117 = extractelement <2 x bfloat> %114, i64 0, !dbg !17
  %118 = fpext bfloat %117 to float, !dbg !18
  %119 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !17
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !17
  %121 = extractelement <2 x bfloat> %120, i64 1, !dbg !17
  %122 = fpext bfloat %121 to float, !dbg !18
  %123 = extractelement <2 x bfloat> %120, i64 0, !dbg !17
  %124 = fpext bfloat %123 to float, !dbg !18
  %125 = fsub float %124, %88, !dbg !23
  %126 = fsub float %122, %89, !dbg !23
  %127 = fsub float %118, %90, !dbg !23
  %128 = fsub float %116, %91, !dbg !23
  %129 = fsub float %112, %92, !dbg !23
  %130 = fsub float %110, %93, !dbg !23
  %131 = fsub float %106, %94, !dbg !23
  %132 = fsub float %104, %95, !dbg !23
  %133 = fadd float %72, 1.000000e+00, !dbg !27
  %134 = fadd float %73, 1.000000e+00, !dbg !27
  %135 = fadd float %74, 1.000000e+00, !dbg !27
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !28
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !28
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !28
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = fadd float %88, %141, !dbg !29
  %150 = fadd float %89, %142, !dbg !29
  %151 = fadd float %90, %143, !dbg !29
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fsub float %124, %149, !dbg !30
  %158 = fsub float %122, %150, !dbg !30
  %159 = fsub float %118, %151, !dbg !30
  %160 = fsub float %116, %152, !dbg !30
  %161 = fsub float %112, %153, !dbg !30
  %162 = fsub float %110, %154, !dbg !30
  %163 = fsub float %106, %155, !dbg !30
  %164 = fsub float %104, %156, !dbg !30
  %165 = fmul float %125, %157, !dbg !31
  %166 = fmul float %126, %158, !dbg !31
  %167 = fmul float %127, %159, !dbg !31
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fadd float %80, %165, !dbg !32
  %174 = fadd float %81, %166, !dbg !32
  %175 = fadd float %82, %167, !dbg !32
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = select i1 %22, float %149, float %88, !dbg !19
  %182 = select i1 %22, float %150, float %89, !dbg !19
  %183 = select i1 %22, float %151, float %90, !dbg !19
  %184 = select i1 %22, float %152, float %91, !dbg !19
  %185 = select i1 %22, float %153, float %92, !dbg !19
  %186 = select i1 %22, float %154, float %93, !dbg !19
  %187 = select i1 %22, float %155, float %94, !dbg !19
  %188 = select i1 %22, float %156, float %95, !dbg !19
  %189 = select i1 %22, float %173, float %80, !dbg !33
  %190 = select i1 %22, float %174, float %81, !dbg !33
  %191 = select i1 %22, float %175, float %82, !dbg !33
  %192 = select i1 %22, float %176, float %83, !dbg !33
  %193 = select i1 %22, float %177, float %84, !dbg !33
  %194 = select i1 %22, float %178, float %85, !dbg !33
  %195 = select i1 %22, float %179, float %86, !dbg !33
  %196 = select i1 %22, float %180, float %87, !dbg !33
  %197 = select i1 %22, float %133, float %72, !dbg !20
  %198 = select i1 %22, float %134, float %73, !dbg !20
  %199 = select i1 %22, float %135, float %74, !dbg !20
  %200 = select i1 %22, float %136, float %75, !dbg !20
  %201 = select i1 %22, float %137, float %76, !dbg !20
  %202 = select i1 %22, float %138, float %77, !dbg !20
  %203 = select i1 %22, float %139, float %78, !dbg !20
  %204 = select i1 %22, float %140, float %79, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !21
  %205 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !21
  br i1 %205, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %206 = fadd float %189, %190, !dbg !11
  %207 = lshr i32 %18, 5, !dbg !11
  %208 = and i32 %18, 1, !dbg !11
  %209 = or disjoint i32 %17, %208, !dbg !12
  %210 = icmp slt i32 %209, 512, !dbg !13
  %211 = and i32 %26, 1020, !dbg !14
  %212 = fsub float %182, %181, !dbg !36
  %213 = fadd float %197, %198, !dbg !39
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !40
  %215 = tail call float @llvm.nvvm.div.full(float %198, float %213), !dbg !41
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !42
  %217 = fmul float %212, %216, !dbg !43
  %218 = fadd float %181, %217, !dbg !44
  %219 = fmul float %212, %212, !dbg !45
  %220 = fmul float %219, %197, !dbg !46
  %221 = fmul float %220, %216, !dbg !47
  %222 = fadd float %206, %221, !dbg !48
  %223 = fsub float %183, %218, !dbg !36
  %224 = fadd float %199, %213, !dbg !39
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !40
  %226 = tail call float @llvm.nvvm.div.full(float %199, float %224), !dbg !41
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !42
  %228 = fmul float %227, %223, !dbg !43
  %229 = fadd float %218, %228, !dbg !44
  %230 = fadd float %191, %222, !dbg !49
  %231 = fmul float %223, %223, !dbg !45
  %232 = fmul float %213, %231, !dbg !46
  %233 = fmul float %227, %232, !dbg !47
  %234 = fadd float %230, %233, !dbg !48
  %235 = fsub float %184, %229, !dbg !36
  %236 = fadd float %200, %224, !dbg !39
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !40
  %238 = tail call float @llvm.nvvm.div.full(float %200, float %236), !dbg !41
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !42
  %240 = fmul float %239, %235, !dbg !43
  %241 = fadd float %229, %240, !dbg !44
  %242 = fadd float %192, %234, !dbg !49
  %243 = fmul float %235, %235, !dbg !45
  %244 = fmul float %224, %243, !dbg !46
  %245 = fmul float %239, %244, !dbg !47
  %246 = fadd float %242, %245, !dbg !48
  %247 = fsub float %185, %241, !dbg !36
  %248 = fadd float %201, %236, !dbg !39
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !40
  %250 = tail call float @llvm.nvvm.div.full(float %201, float %248), !dbg !41
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !42
  %252 = fmul float %251, %247, !dbg !43
  %253 = fadd float %241, %252, !dbg !44
  %254 = fadd float %193, %246, !dbg !49
  %255 = fmul float %247, %247, !dbg !45
  %256 = fmul float %236, %255, !dbg !46
  %257 = fmul float %251, %256, !dbg !47
  %258 = fadd float %254, %257, !dbg !48
  %259 = fsub float %186, %253, !dbg !36
  %260 = fadd float %202, %248, !dbg !39
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !40
  %262 = tail call float @llvm.nvvm.div.full(float %202, float %260), !dbg !41
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !42
  %264 = fmul float %263, %259, !dbg !43
  %265 = fadd float %253, %264, !dbg !44
  %266 = fadd float %194, %258, !dbg !49
  %267 = fmul float %259, %259, !dbg !45
  %268 = fmul float %248, %267, !dbg !46
  %269 = fmul float %263, %268, !dbg !47
  %270 = fadd float %266, %269, !dbg !48
  %271 = fsub float %187, %265, !dbg !36
  %272 = fadd float %203, %260, !dbg !39
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !40
  %274 = tail call float @llvm.nvvm.div.full(float %203, float %272), !dbg !41
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !42
  %276 = fmul float %275, %271, !dbg !43
  %277 = fadd float %265, %276, !dbg !44
  %278 = fadd float %195, %270, !dbg !49
  %279 = fmul float %271, %271, !dbg !45
  %280 = fmul float %260, %279, !dbg !46
  %281 = fmul float %275, %280, !dbg !47
  %282 = fadd float %278, %281, !dbg !48
  %283 = fsub float %188, %277, !dbg !36
  %284 = fadd float %204, %272, !dbg !39
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !40
  %286 = tail call float @llvm.nvvm.div.full(float %204, float %284), !dbg !41
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !42
  %288 = fmul float %287, %283, !dbg !43
  %289 = fadd float %277, %288, !dbg !44
  %290 = fadd float %196, %282, !dbg !49
  %291 = fmul float %283, %283, !dbg !45
  %292 = fmul float %272, %291, !dbg !46
  %293 = fmul float %287, %292, !dbg !47
  %294 = fadd float %290, %293, !dbg !48
  %295 = bitcast float %289 to i32, !dbg !50
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !50
  %297 = bitcast i32 %296 to float, !dbg !50
  %298 = bitcast float %294 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %284 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = fsub float %297, %289, !dbg !36
  %305 = fadd float %284, %303, !dbg !39
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !40
  %307 = tail call float @llvm.nvvm.div.full(float %303, float %305), !dbg !41
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !42
  %309 = fmul float %308, %304, !dbg !43
  %310 = fadd float %289, %309, !dbg !44
  %311 = fadd float %294, %300, !dbg !49
  %312 = fmul float %304, %304, !dbg !45
  %313 = fmul float %284, %312, !dbg !46
  %314 = fmul float %308, %313, !dbg !47
  %315 = fadd float %311, %314, !dbg !48
  %316 = bitcast float %310 to i32, !dbg !50
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !50
  %318 = bitcast i32 %317 to float, !dbg !50
  %319 = bitcast float %315 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %305 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = fsub float %318, %310, !dbg !36
  %326 = fadd float %305, %324, !dbg !39
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !40
  %328 = tail call float @llvm.nvvm.div.full(float %324, float %326), !dbg !41
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !42
  %330 = fmul float %329, %325, !dbg !43
  %331 = fadd float %310, %330, !dbg !44
  %332 = fadd float %315, %321, !dbg !49
  %333 = fmul float %325, %325, !dbg !45
  %334 = fmul float %305, %333, !dbg !46
  %335 = fmul float %329, %334, !dbg !47
  %336 = fadd float %332, %335, !dbg !48
  %337 = bitcast float %331 to i32, !dbg !50
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !50
  %339 = bitcast i32 %338 to float, !dbg !50
  %340 = bitcast float %336 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %326 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = fsub float %339, %331, !dbg !36
  %347 = fadd float %326, %345, !dbg !39
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !40
  %349 = tail call float @llvm.nvvm.div.full(float %345, float %347), !dbg !41
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !42
  %351 = fmul float %350, %346, !dbg !43
  %352 = fadd float %331, %351, !dbg !44
  %353 = fadd float %336, %342, !dbg !49
  %354 = fmul float %346, %346, !dbg !45
  %355 = fmul float %326, %354, !dbg !46
  %356 = fmul float %350, %355, !dbg !47
  %357 = fadd float %353, %356, !dbg !48
  %358 = bitcast float %352 to i32, !dbg !50
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !50
  %360 = bitcast i32 %359 to float, !dbg !50
  %361 = bitcast float %357 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %347 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = fsub float %360, %352, !dbg !36
  %368 = fadd float %347, %366, !dbg !39
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !40
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !41
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !42
  %372 = fmul float %371, %367, !dbg !43
  %373 = fadd float %352, %372, !dbg !44
  %374 = fadd float %357, %363, !dbg !49
  %375 = fmul float %367, %367, !dbg !45
  %376 = fmul float %347, %375, !dbg !46
  %377 = fmul float %371, %376, !dbg !47
  %378 = fadd float %374, %377, !dbg !48
  %379 = bitcast float %373 to i32, !dbg !50
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !50
  %381 = bitcast i32 %380 to float, !dbg !50
  %382 = bitcast float %378 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %368 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = fsub float %381, %373, !dbg !36
  %389 = fadd float %368, %387, !dbg !39
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !40
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !41
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !42
  %393 = fmul float %392, %388, !dbg !43
  %394 = fadd float %373, %393, !dbg !44
  %395 = fadd float %378, %384, !dbg !49
  %396 = fmul float %388, %388, !dbg !45
  %397 = fmul float %368, %396, !dbg !46
  %398 = fmul float %392, %397, !dbg !47
  %399 = fadd float %395, %398, !dbg !48
  %400 = and i32 %207, 3, !dbg !50
  %401 = icmp eq i32 %20, 0, !dbg !50
  %402 = lshr exact i32 %19, 5, !dbg !50
  %403 = or disjoint i32 %402, %400, !dbg !50
  %404 = zext nneg i32 %403 to i64, !dbg !50
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i64 %404, !dbg !50
  %406 = bitcast float %394 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 %401) #5, !dbg !50
  %407 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %404, !dbg !50
  %408 = bitcast float %399 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 %401) #5, !dbg !50
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %404, !dbg !50
  %410 = bitcast float %389 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 %401) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %411 = icmp slt i32 %18, 8, !dbg !50
  %412 = sext i32 %18 to i64, !dbg !50
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i64 %412, !dbg !50
  %414 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %413, i1 %411) #5, !dbg !50
  %415 = bitcast i32 %414 to float, !dbg !50
  %416 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %412, !dbg !50
  %417 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %416, i1 %411) #5, !dbg !50
  %418 = bitcast i32 %417 to float, !dbg !50
  %419 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %412, !dbg !50
  %420 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %419, i1 %411) #5, !dbg !50
  %421 = bitcast i32 %420 to float, !dbg !50
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 2, i32 31), !dbg !50
  %423 = bitcast i32 %422 to float, !dbg !50
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 2, i32 31), !dbg !50
  %425 = bitcast i32 %424 to float, !dbg !50
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !50
  %427 = bitcast i32 %426 to float, !dbg !50
  %428 = fsub float %423, %415, !dbg !36
  %429 = fadd float %421, %427, !dbg !39
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !40
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !41
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !42
  %433 = fmul float %428, %432, !dbg !43
  %434 = fadd float %433, %415, !dbg !44
  %435 = fadd float %418, %425, !dbg !49
  %436 = fmul float %428, %428, !dbg !45
  %437 = fmul float %436, %421, !dbg !46
  %438 = fmul float %437, %432, !dbg !47
  %439 = fadd float %435, %438, !dbg !48
  %440 = bitcast float %434 to i32, !dbg !50
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !50
  %442 = bitcast i32 %441 to float, !dbg !50
  %443 = bitcast float %439 to i32, !dbg !50
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !50
  %445 = bitcast i32 %444 to float, !dbg !50
  %446 = bitcast float %429 to i32, !dbg !50
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !50
  %448 = bitcast i32 %447 to float, !dbg !50
  %449 = fsub float %442, %434, !dbg !36
  %450 = fadd float %429, %448, !dbg !39
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !40
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !41
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !42
  %454 = fmul float %449, %453, !dbg !43
  %455 = fadd float %434, %454, !dbg !44
  %456 = fadd float %439, %445, !dbg !49
  %457 = fmul float %449, %449, !dbg !45
  %458 = fmul float %429, %457, !dbg !46
  %459 = fmul float %453, %458, !dbg !47
  %460 = fadd float %456, %459, !dbg !48
  %461 = and i32 %18, 3, !dbg !50
  %462 = icmp eq i32 %461, 0, !dbg !50
  %463 = and i1 %411, %462, !dbg !50
  %464 = bitcast float %455 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %464, i1 %463) #5, !dbg !50
  %465 = bitcast float %460 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %465, i1 %463) #5, !dbg !50
  %466 = bitcast float %450 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %466, i1 %463) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %467 = zext nneg i32 %402 to i64, !dbg !50
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i64 %467, !dbg !50
  %469 = load float, ptr addrspace(3) %468, align 16, !dbg !50
  %470 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %467, !dbg !50
  %471 = load float, ptr addrspace(3) %470, align 16, !dbg !50
  %472 = tail call float @llvm.nvvm.div.full(float %471, float 3.072000e+03), !dbg !51
  %473 = fadd float %472, 0x3EB0C6F7A0000000, !dbg !52
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i59 = icmp eq i32 %481, 0, !dbg !53
  br i1 %.not.i59, label %484, label %482, !dbg !53

482:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %483 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %473), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

484:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %485 = tail call float @llvm.nvvm.rsqrt.approx.f(float %473), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

__nv_rsqrtf.exit61:                               ; preds = %482, %484
  %.0.i60 = phi float [ %483, %482 ], [ %485, %484 ], !dbg !53
  %486 = and i32 %24, 2040
  %487 = lshr i32 %486, 10
  %488 = shl nuw nsw i32 %487, 2
  %489 = or disjoint i32 %488, %486
  %490 = zext nneg i32 %489 to i64
  %491 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %490
  %492 = or disjoint i32 %486, 4
  %493 = lshr i32 %24, 8
  %494 = and i32 %493, 4
  %495 = add nuw nsw i32 %492, %494
  %496 = zext nneg i32 %495 to i64
  %497 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %496
  %498 = zext nneg i32 %211 to i64
  %499 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %498
  %500 = or disjoint i32 %211, 1024
  %501 = zext nneg i32 %500 to i64
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16), i64 %501
  %502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %498
  %gep72 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16), i64 %501
  %503 = shl nuw nsw i32 %487, 3
  %504 = add nuw nsw i32 %503, %486
  %505 = zext nneg i32 %504 to i64
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %505
  %507 = zext nneg i32 %211 to i64, !dbg !54
  %508 = getelementptr inbounds nuw i8, ptr addrspace(3) %499, i64 8
  %509 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !55
  %510 = shufflevector <2 x i1> %509, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %511 = insertelement <8 x i1> poison, i1 %23, i64 0, !dbg !56
  %512 = shufflevector <8 x i1> %511, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !56
  %513 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !55
  %514 = shufflevector <4 x i1> %513, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  %515 = getelementptr inbounds nuw i8, ptr addrspace(3) %506, i64 4
  %516 = getelementptr inbounds nuw i8, ptr addrspace(3) %506, i64 8
  %517 = getelementptr inbounds nuw i8, ptr addrspace(3) %506, i64 12
  br label %518, !dbg !54

518:                                              ; preds = %__nv_rsqrtf.exit61, %518
  %indvars.iv112 = phi i64 [ 0, %__nv_rsqrtf.exit61 ], [ %indvars.iv.next113, %518 ]
  %519 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %647, %518 ]
  %520 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %648, %518 ]
  %521 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %646, %518 ]
  %522 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit61 ], [ %667, %518 ]
  %523 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %660, %518 ]
  %524 = or disjoint i64 %indvars.iv112, %507, !dbg !57
  %525 = trunc nuw nsw i64 %indvars.iv112 to i32, !dbg !58
  %526 = add i32 %28, %525, !dbg !58
  %527 = sext i32 %526 to i64, !dbg !59
  %528 = getelementptr bfloat, ptr addrspace(1) %0, i64 %527, !dbg !59
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %528, i1 %22) #5, !dbg !60
  %530 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !60
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !60
  %532 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !60
  %533 = bitcast i32 %532 to <2 x bfloat>, !dbg !60
  %534 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !60
  %535 = bitcast i32 %534 to <2 x bfloat>, !dbg !60
  %536 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !60
  %537 = bitcast i32 %536 to <2 x bfloat>, !dbg !60
  %538 = extractelement <2 x bfloat> %531, i64 0, !dbg !60
  %539 = extractelement <2 x bfloat> %531, i64 1, !dbg !60
  %540 = extractelement <2 x bfloat> %533, i64 0, !dbg !60
  %541 = extractelement <2 x bfloat> %533, i64 1, !dbg !60
  %542 = extractelement <2 x bfloat> %535, i64 0, !dbg !60
  %543 = extractelement <2 x bfloat> %535, i64 1, !dbg !60
  %544 = extractelement <2 x bfloat> %537, i64 0, !dbg !60
  %545 = extractelement <2 x bfloat> %537, i64 1, !dbg !60
  %546 = fpext bfloat %538 to float, !dbg !61
  %547 = fpext bfloat %539 to float, !dbg !61
  %548 = fpext bfloat %540 to float, !dbg !61
  %549 = fpext bfloat %541 to float, !dbg !61
  %550 = fpext bfloat %542 to float, !dbg !61
  %551 = fpext bfloat %543 to float, !dbg !61
  %552 = fpext bfloat %544 to float, !dbg !61
  %553 = fpext bfloat %545 to float, !dbg !61
  %554 = add nuw nsw i64 %524, 3072, !dbg !62
  %555 = getelementptr float, ptr addrspace(1) %1, i64 %554, !dbg !63
  %556 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %555, i1 true) #5, !dbg !64
  %557 = extractvalue { i32, i32, i32, i32 } %556, 0, !dbg !64
  %558 = extractvalue { i32, i32, i32, i32 } %556, 1, !dbg !64
  %559 = extractvalue { i32, i32, i32, i32 } %556, 2, !dbg !64
  %560 = extractvalue { i32, i32, i32, i32 } %556, 3, !dbg !64
  %561 = getelementptr bfloat, ptr addrspace(1) %2, i64 %554, !dbg !65
  %562 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %561, i1 true) #5, !dbg !66
  %563 = extractvalue { i32, i32 } %562, 0, !dbg !66
  %564 = bitcast i32 %563 to <2 x bfloat>, !dbg !66
  %565 = extractvalue { i32, i32 } %562, 1, !dbg !66
  %566 = bitcast i32 %565 to <2 x bfloat>, !dbg !66
  %567 = getelementptr float, ptr addrspace(1) %1, i64 %524, !dbg !67
  %568 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %567, i1 true) #5, !dbg !68
  %569 = extractvalue { i32, i32, i32, i32 } %568, 0, !dbg !68
  %570 = extractvalue { i32, i32, i32, i32 } %568, 1, !dbg !68
  %571 = extractvalue { i32, i32, i32, i32 } %568, 2, !dbg !68
  %572 = extractvalue { i32, i32, i32, i32 } %568, 3, !dbg !68
  %573 = getelementptr bfloat, ptr addrspace(1) %2, i64 %524, !dbg !69
  %574 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %573, i1 true) #5, !dbg !70
  %575 = extractvalue { i32, i32 } %574, 0, !dbg !70
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !70
  %577 = extractvalue { i32, i32 } %574, 1, !dbg !70
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !70
  %579 = fsub float %546, %469, !dbg !71
  %580 = fsub float %547, %469, !dbg !71
  %581 = fsub float %548, %469, !dbg !71
  %582 = fsub float %549, %469, !dbg !71
  %583 = fsub float %550, %469, !dbg !71
  %584 = fsub float %551, %469, !dbg !71
  %585 = fsub float %552, %469, !dbg !71
  %586 = fsub float %553, %469, !dbg !71
  %587 = fmul float %.0.i60, %579, !dbg !72
  %588 = fmul float %.0.i60, %580, !dbg !72
  %589 = fmul float %.0.i60, %581, !dbg !72
  %590 = fmul float %.0.i60, %582, !dbg !72
  %591 = fmul float %.0.i60, %583, !dbg !72
  %592 = fmul float %.0.i60, %584, !dbg !72
  %593 = fmul float %.0.i60, %585, !dbg !72
  %594 = fmul float %.0.i60, %586, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %595 = bitcast float %587 to i32, !dbg !72
  %596 = bitcast float %588 to i32, !dbg !72
  %597 = bitcast float %589 to i32, !dbg !72
  %598 = bitcast float %590 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %491, i32 %595, i32 %596, i32 %597, i32 %598, i1 true) #5, !dbg !72
  %599 = bitcast float %591 to i32, !dbg !72
  %600 = bitcast float %592 to i32, !dbg !72
  %601 = bitcast float %593 to i32, !dbg !72
  %602 = bitcast float %594 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %497, i32 %599, i32 %600, i32 %601, i32 %602, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %603 = insertelement <2 x i32> poison, i32 %559, i64 0, !dbg !64
  %604 = insertelement <2 x i32> %603, i32 %560, i64 1, !dbg !64
  %605 = bitcast <2 x i32> %604 to <2 x float>, !dbg !64
  %606 = fpext <2 x bfloat> %566 to <2 x float>, !dbg !73
  %607 = insertelement <2 x i32> poison, i32 %571, i64 0, !dbg !68
  %608 = insertelement <2 x i32> %607, i32 %572, i64 1, !dbg !68
  %609 = bitcast <2 x i32> %608 to <2 x float>, !dbg !68
  %610 = fpext <2 x bfloat> %578 to <2 x float>, !dbg !74
  %611 = load <2 x float>, ptr addrspace(3) %508, align 8, !dbg !72
  %612 = fadd <2 x float> %605, %606, !dbg !75
  %613 = fadd <2 x float> %612, splat (float 1.000000e+00), !dbg !76
  %614 = fmul <2 x float> %613, %611, !dbg !77
  %615 = fadd <2 x float> %609, %610, !dbg !78
  %616 = fadd <2 x float> %615, %614, !dbg !79
  %617 = extractelement <2 x float> %616, i64 0, !dbg !80
  %618 = fcmp olt float %519, %617, !dbg !81
  %619 = extractelement <2 x float> %616, i64 1, !dbg !80
  %620 = fcmp olt float %520, %619, !dbg !81
  %621 = fcmp uno <2 x float> %521, zeroinitializer, !dbg !83
  %622 = fcmp uno float %519, 0.000000e+00, !dbg !83
  %623 = fcmp uno float %520, 0.000000e+00, !dbg !83
  %624 = fcmp uno <4 x float> %523, zeroinitializer, !dbg !83
  %625 = or i1 %622, %618, !dbg !84
  %626 = or i1 %623, %620, !dbg !84
  %627 = insertelement <2 x i32> poison, i32 %557, i64 0, !dbg !64
  %628 = insertelement <2 x i32> %627, i32 %558, i64 1, !dbg !64
  %629 = bitcast <2 x i32> %628 to <2 x float>, !dbg !64
  %630 = fpext <2 x bfloat> %564 to <2 x float>, !dbg !73
  %631 = insertelement <2 x i32> poison, i32 %569, i64 0, !dbg !68
  %632 = insertelement <2 x i32> %631, i32 %570, i64 1, !dbg !68
  %633 = bitcast <2 x i32> %632 to <2 x float>, !dbg !68
  %634 = fpext <2 x bfloat> %576 to <2 x float>, !dbg !74
  %635 = load <2 x float>, ptr addrspace(3) %499, align 16, !dbg !72
  %636 = fadd <2 x float> %629, %630, !dbg !75
  %637 = fadd <2 x float> %636, splat (float 1.000000e+00), !dbg !76
  %638 = fmul <2 x float> %637, %635, !dbg !77
  %639 = fadd <2 x float> %633, %634, !dbg !78
  %640 = fadd <2 x float> %639, %638, !dbg !79
  %641 = fcmp olt <2 x float> %521, %640, !dbg !81
  %642 = or <2 x i1> %621, %641, !dbg !84
  %643 = select <2 x i1> %642, <2 x float> %521, <2 x float> %640, !dbg !85
  %644 = select i1 %625, float %519, float %617, !dbg !85
  %645 = select i1 %626, float %520, float %619, !dbg !85
  %646 = select <2 x i1> %510, <2 x float> %643, <2 x float> %521, !dbg !55
  %647 = select i1 %23, float %644, float %519, !dbg !55
  %648 = select i1 %23, float %645, float %520, !dbg !55
  %649 = extractelement <2 x float> %640, i64 0, !dbg !80
  %650 = extractelement <2 x float> %640, i64 1, !dbg !80
  %651 = fcmp uno <8 x float> %522, zeroinitializer, !dbg !86
  %652 = load <4 x float>, ptr addrspace(3) %gep, align 16, !dbg !72
  %653 = shufflevector <2 x float> %637, <2 x float> %613, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !77
  %654 = fmul <4 x float> %653, %652, !dbg !77
  %655 = shufflevector <2 x float> %639, <2 x float> %615, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %656 = fadd <4 x float> %655, %654, !dbg !79
  %657 = fcmp olt <4 x float> %523, %656, !dbg !81
  %658 = or <4 x i1> %624, %657, !dbg !84
  %659 = select <4 x i1> %658, <4 x float> %523, <4 x float> %656, !dbg !85
  %660 = select <4 x i1> %514, <4 x float> %659, <4 x float> %523, !dbg !55
  %661 = shufflevector <2 x float> %640, <2 x float> %616, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %662 = shufflevector <4 x float> %656, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %663 = shufflevector <8 x float> %661, <8 x float> %662, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !88
  %664 = fcmp ogt <8 x float> %522, %663, !dbg !88
  %665 = or <8 x i1> %651, %664, !dbg !89
  %666 = select <8 x i1> %665, <8 x float> %522, <8 x float> %663, !dbg !90
  %667 = select <8 x i1> %512, <8 x float> %666, <8 x float> %522, !dbg !56
  %668 = getelementptr bfloat, ptr addrspace(1) %3, i64 %527, !dbg !91
  %669 = fptrunc float %649 to bfloat, !dbg !80
  %670 = fptrunc float %650 to bfloat, !dbg !80
  %671 = fptrunc float %617 to bfloat, !dbg !80
  %672 = fptrunc float %619 to bfloat, !dbg !80
  %673 = extractelement <4 x float> %656, i64 0, !dbg !80
  %674 = fptrunc float %673 to bfloat, !dbg !80
  %675 = extractelement <4 x float> %656, i64 1, !dbg !80
  %676 = fptrunc float %675 to bfloat, !dbg !80
  %677 = extractelement <4 x float> %656, i64 2, !dbg !80
  %678 = fptrunc float %677 to bfloat, !dbg !80
  %679 = extractelement <4 x float> %656, i64 3, !dbg !80
  %680 = fptrunc float %679 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %681 = bitcast bfloat %669 to i16, !dbg !80
  %682 = bitcast bfloat %670 to i16, !dbg !80
  %683 = bitcast bfloat %671 to i16, !dbg !80
  %684 = bitcast bfloat %672 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %502, i16 %681, i16 %682, i16 %683, i16 %684, i1 true) #5, !dbg !80
  %685 = bitcast bfloat %674 to i16, !dbg !80
  %686 = bitcast bfloat %676 to i16, !dbg !80
  %687 = bitcast bfloat %678 to i16, !dbg !80
  %688 = bitcast bfloat %680 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %gep72, i16 %685, i16 %686, i16 %687, i16 %688, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.extract = load i32, ptr addrspace(3) %506, align 16, !dbg !80
  %.extract63 = load i32, ptr addrspace(3) %515, align 4, !dbg !80
  %.extract65 = load i32, ptr addrspace(3) %516, align 8, !dbg !80
  %.extract67 = load i32, ptr addrspace(3) %517, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %668, i1 %22) #5, !dbg !80
  %indvars.iv.next113 = add nuw nsw i64 %indvars.iv112, 1024, !dbg !54
  %689 = icmp samesign ult i64 %indvars.iv112, 2048, !dbg !54
  br i1 %689, label %518, label %690, !dbg !54

690:                                              ; preds = %518
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %691 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %646, <2 x i32> <i32 0, i32 2>, !dbg !94
  %692 = fcmp olt <2 x float> %691, %646, !dbg !94
  %693 = fcmp uno <2 x float> %691, %646, !dbg !94
  %shift = shufflevector <2 x i1> %692, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !95
  %694 = or <2 x i1> %shift, %693, !dbg !95
  %695 = extractelement <2 x i1> %694, i64 0, !dbg !95
  %696 = extractelement <2 x float> %646, i64 0, !dbg !96
  %697 = extractelement <2 x float> %646, i64 1, !dbg !96
  %698 = select i1 %695, float %696, float %697, !dbg !96
  %699 = fcmp olt float %698, %647, !dbg !94
  %700 = fcmp uno float %698, 0.000000e+00, !dbg !97
  %701 = or i1 %699, %700, !dbg !95
  %702 = select i1 %701, float %698, float %647, !dbg !96
  %703 = fcmp olt float %702, %648, !dbg !94
  %704 = fcmp uno float %702, 0.000000e+00, !dbg !97
  %705 = or i1 %703, %704, !dbg !95
  %706 = select i1 %705, float %702, float %648, !dbg !96
  %707 = extractelement <4 x float> %660, i64 0, !dbg !94
  %708 = extractelement <4 x float> %660, i64 1, !dbg !94
  %709 = fcmp olt float %707, %708, !dbg !94
  %710 = fcmp uno float %707, 0.000000e+00, !dbg !97
  %711 = or i1 %709, %710, !dbg !95
  %712 = select i1 %711, float %707, float %708, !dbg !96
  %713 = extractelement <4 x float> %660, i64 2, !dbg !94
  %714 = fcmp olt float %712, %713, !dbg !94
  %715 = fcmp uno float %712, 0.000000e+00, !dbg !97
  %716 = or i1 %714, %715, !dbg !95
  %717 = select i1 %716, float %712, float %713, !dbg !96
  %718 = extractelement <4 x float> %660, i64 3, !dbg !94
  %719 = fcmp olt float %717, %718, !dbg !94
  %720 = fcmp uno float %717, 0.000000e+00, !dbg !97
  %721 = or i1 %719, %720, !dbg !95
  %722 = select i1 %721, float %717, float %718, !dbg !96
  %723 = bitcast float %706 to i32, !dbg !92
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 16, i32 31), !dbg !92
  %725 = bitcast i32 %724 to float, !dbg !92
  %726 = fcmp olt float %706, %725, !dbg !94
  %727 = fcmp uno float %706, 0.000000e+00, !dbg !97
  %728 = or i1 %727, %726, !dbg !95
  %729 = select i1 %728, float %706, float %725, !dbg !96
  %730 = bitcast float %729 to i32, !dbg !92
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 8, i32 31), !dbg !92
  %732 = bitcast i32 %731 to float, !dbg !92
  %733 = fcmp olt float %729, %732, !dbg !94
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !97
  %735 = or i1 %733, %734, !dbg !95
  %736 = select i1 %735, float %729, float %732, !dbg !96
  %737 = bitcast float %736 to i32, !dbg !92
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 4, i32 31), !dbg !92
  %739 = bitcast i32 %738 to float, !dbg !92
  %740 = fcmp olt float %736, %739, !dbg !94
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !97
  %742 = or i1 %740, %741, !dbg !95
  %743 = select i1 %742, float %736, float %739, !dbg !96
  %744 = bitcast float %743 to i32, !dbg !92
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 2, i32 31), !dbg !92
  %746 = bitcast i32 %745 to float, !dbg !92
  %747 = fcmp olt float %743, %746, !dbg !94
  %748 = fcmp uno float %743, 0.000000e+00, !dbg !97
  %749 = or i1 %747, %748, !dbg !95
  %750 = select i1 %749, float %743, float %746, !dbg !96
  %751 = bitcast float %750 to i32, !dbg !92
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 1, i32 31), !dbg !92
  %753 = bitcast i32 %752 to float, !dbg !92
  %754 = fcmp olt float %750, %753, !dbg !94
  %755 = fcmp uno float %750, 0.000000e+00, !dbg !97
  %756 = or i1 %754, %755, !dbg !95
  %757 = bitcast float %722 to i32, !dbg !92
  %758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 16, i32 31), !dbg !92
  %759 = bitcast i32 %758 to float, !dbg !92
  %760 = fcmp olt float %722, %759, !dbg !94
  %761 = fcmp uno float %722, 0.000000e+00, !dbg !97
  %762 = or i1 %761, %760, !dbg !95
  %763 = select i1 %762, float %722, float %759, !dbg !96
  %764 = bitcast float %763 to i32, !dbg !92
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 8, i32 31), !dbg !92
  %766 = bitcast i32 %765 to float, !dbg !92
  %767 = fcmp olt float %763, %766, !dbg !94
  %768 = fcmp uno float %763, 0.000000e+00, !dbg !97
  %769 = or i1 %767, %768, !dbg !95
  %770 = select i1 %769, float %763, float %766, !dbg !96
  %771 = bitcast float %770 to i32, !dbg !92
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 4, i32 31), !dbg !92
  %773 = bitcast i32 %772 to float, !dbg !92
  %774 = fcmp olt float %770, %773, !dbg !94
  %775 = fcmp uno float %770, 0.000000e+00, !dbg !97
  %776 = or i1 %774, %775, !dbg !95
  %777 = select i1 %776, float %770, float %773, !dbg !96
  %778 = bitcast float %777 to i32, !dbg !92
  %779 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %778, i32 2, i32 31), !dbg !92
  %780 = bitcast i32 %779 to float, !dbg !92
  %781 = fcmp olt float %777, %780, !dbg !94
  %782 = fcmp uno float %777, 0.000000e+00, !dbg !97
  %783 = or i1 %781, %782, !dbg !95
  %784 = select i1 %783, float %777, float %780, !dbg !96
  %785 = bitcast float %784 to i32, !dbg !92
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 1, i32 31), !dbg !92
  %787 = bitcast i32 %786 to float, !dbg !92
  %788 = fcmp olt float %784, %787, !dbg !94
  %789 = fcmp uno float %784, 0.000000e+00, !dbg !97
  %790 = or i1 %788, %789, !dbg !95
  %791 = and i32 %207, 7, !dbg !92
  %792 = zext nneg i32 %791 to i64, !dbg !92
  %793 = getelementptr float, ptr addrspace(3) @global_smem, i64 %792, !dbg !92
  %794 = select i1 %756, i32 %751, i32 %752, !dbg !96
  %795 = insertelement <1 x i32> poison, i32 %794, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %793, <1 x i32> %795, i1 %401) #5, !dbg !92
  %796 = or disjoint i32 %791, 8, !dbg !92
  %797 = zext nneg i32 %796 to i64, !dbg !92
  %798 = getelementptr float, ptr addrspace(3) @global_smem, i64 %797, !dbg !92
  %799 = select i1 %790, i32 %785, i32 %786, !dbg !96
  %800 = insertelement <1 x i32> poison, i32 %799, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %798, <1 x i32> %800, i1 %401) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %801 = icmp slt i32 %18, 16, !dbg !92
  %802 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %413, i1 %801) #5, !dbg !92
  %803 = bitcast i32 %802 to float, !dbg !92
  %804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %802, i32 4, i32 31), !dbg !92
  %805 = bitcast i32 %804 to float, !dbg !92
  %806 = fcmp olt float %803, %805, !dbg !94
  %807 = fcmp uno float %803, 0.000000e+00, !dbg !97
  %808 = or i1 %807, %806, !dbg !95
  %809 = select i1 %808, float %803, float %805, !dbg !96
  %810 = bitcast float %809 to i32, !dbg !92
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 2, i32 31), !dbg !92
  %812 = bitcast i32 %811 to float, !dbg !92
  %813 = fcmp olt float %809, %812, !dbg !94
  %814 = fcmp uno float %809, 0.000000e+00, !dbg !97
  %815 = or i1 %813, %814, !dbg !95
  %816 = select i1 %815, float %809, float %812, !dbg !96
  %817 = bitcast float %816 to i32, !dbg !92
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 1, i32 31), !dbg !92
  %819 = bitcast i32 %818 to float, !dbg !92
  %820 = fcmp olt float %816, %819, !dbg !94
  %821 = fcmp uno float %816, 0.000000e+00, !dbg !97
  %822 = or i1 %820, %821, !dbg !95
  %823 = and i32 %18, 7, !dbg !92
  %824 = icmp eq i32 %823, 0, !dbg !92
  %825 = and i1 %801, %824, !dbg !92
  %826 = select i1 %822, i32 %817, i32 %818, !dbg !96
  %827 = insertelement <1 x i32> poison, i32 %826, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %827, i1 %825) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %828 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %829 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %830 = bitcast float %828 to i32, !dbg !98
  %831 = bitcast float %829 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %830, i32 %831, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %832 = zext nneg i32 %208 to i64, !dbg !98
  %833 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %832, !dbg !98
  %834 = load float, ptr addrspace(3) %833, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %835 = extractelement <8 x float> %667, i64 0, !dbg !101
  %836 = extractelement <8 x float> %667, i64 1, !dbg !101
  %837 = fcmp ogt float %835, %836, !dbg !101
  %838 = fcmp uno float %835, 0.000000e+00, !dbg !102
  %839 = or i1 %837, %838, !dbg !103
  %840 = select i1 %839, float %835, float %836, !dbg !104
  %841 = extractelement <8 x float> %667, i64 2, !dbg !101
  %842 = fcmp ogt float %840, %841, !dbg !101
  %843 = fcmp uno float %840, 0.000000e+00, !dbg !102
  %844 = or i1 %842, %843, !dbg !103
  %845 = select i1 %844, float %840, float %841, !dbg !104
  %846 = extractelement <8 x float> %667, i64 3, !dbg !101
  %847 = fcmp ogt float %845, %846, !dbg !101
  %848 = fcmp uno float %845, 0.000000e+00, !dbg !102
  %849 = or i1 %847, %848, !dbg !103
  %850 = select i1 %849, float %845, float %846, !dbg !104
  %851 = extractelement <8 x float> %667, i64 4, !dbg !101
  %852 = extractelement <8 x float> %667, i64 5, !dbg !101
  %853 = fcmp ogt float %851, %852, !dbg !101
  %854 = fcmp uno float %851, 0.000000e+00, !dbg !102
  %855 = or i1 %853, %854, !dbg !103
  %856 = select i1 %855, float %851, float %852, !dbg !104
  %857 = extractelement <8 x float> %667, i64 6, !dbg !101
  %858 = fcmp ogt float %856, %857, !dbg !101
  %859 = fcmp uno float %856, 0.000000e+00, !dbg !102
  %860 = or i1 %858, %859, !dbg !103
  %861 = select i1 %860, float %856, float %857, !dbg !104
  %862 = extractelement <8 x float> %667, i64 7, !dbg !101
  %863 = fcmp ogt float %861, %862, !dbg !101
  %864 = fcmp uno float %861, 0.000000e+00, !dbg !102
  %865 = or i1 %863, %864, !dbg !103
  %866 = select i1 %865, float %861, float %862, !dbg !104
  %867 = bitcast float %850 to i32, !dbg !99
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 16, i32 31), !dbg !99
  %869 = bitcast i32 %868 to float, !dbg !99
  %870 = fcmp ogt float %850, %869, !dbg !101
  %871 = fcmp uno float %850, 0.000000e+00, !dbg !102
  %872 = or i1 %871, %870, !dbg !103
  %873 = select i1 %872, float %850, float %869, !dbg !104
  %874 = bitcast float %873 to i32, !dbg !99
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %874, i32 8, i32 31), !dbg !99
  %876 = bitcast i32 %875 to float, !dbg !99
  %877 = fcmp ogt float %873, %876, !dbg !101
  %878 = fcmp uno float %873, 0.000000e+00, !dbg !102
  %879 = or i1 %877, %878, !dbg !103
  %880 = select i1 %879, float %873, float %876, !dbg !104
  %881 = bitcast float %880 to i32, !dbg !99
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 4, i32 31), !dbg !99
  %883 = bitcast i32 %882 to float, !dbg !99
  %884 = fcmp ogt float %880, %883, !dbg !101
  %885 = fcmp uno float %880, 0.000000e+00, !dbg !102
  %886 = or i1 %884, %885, !dbg !103
  %887 = select i1 %886, float %880, float %883, !dbg !104
  %888 = bitcast float %887 to i32, !dbg !99
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 2, i32 31), !dbg !99
  %890 = bitcast i32 %889 to float, !dbg !99
  %891 = fcmp ogt float %887, %890, !dbg !101
  %892 = fcmp uno float %887, 0.000000e+00, !dbg !102
  %893 = or i1 %891, %892, !dbg !103
  %894 = select i1 %893, float %887, float %890, !dbg !104
  %895 = bitcast float %894 to i32, !dbg !99
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %895, i32 1, i32 31), !dbg !99
  %897 = bitcast i32 %896 to float, !dbg !99
  %898 = fcmp ogt float %894, %897, !dbg !101
  %899 = fcmp uno float %894, 0.000000e+00, !dbg !102
  %900 = or i1 %898, %899, !dbg !103
  %901 = bitcast float %866 to i32, !dbg !99
  %902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %901, i32 16, i32 31), !dbg !99
  %903 = bitcast i32 %902 to float, !dbg !99
  %904 = fcmp ogt float %866, %903, !dbg !101
  %905 = fcmp uno float %866, 0.000000e+00, !dbg !102
  %906 = or i1 %905, %904, !dbg !103
  %907 = select i1 %906, float %866, float %903, !dbg !104
  %908 = bitcast float %907 to i32, !dbg !99
  %909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %908, i32 8, i32 31), !dbg !99
  %910 = bitcast i32 %909 to float, !dbg !99
  %911 = fcmp ogt float %907, %910, !dbg !101
  %912 = fcmp uno float %907, 0.000000e+00, !dbg !102
  %913 = or i1 %911, %912, !dbg !103
  %914 = select i1 %913, float %907, float %910, !dbg !104
  %915 = bitcast float %914 to i32, !dbg !99
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 4, i32 31), !dbg !99
  %917 = bitcast i32 %916 to float, !dbg !99
  %918 = fcmp ogt float %914, %917, !dbg !101
  %919 = fcmp uno float %914, 0.000000e+00, !dbg !102
  %920 = or i1 %918, %919, !dbg !103
  %921 = select i1 %920, float %914, float %917, !dbg !104
  %922 = bitcast float %921 to i32, !dbg !99
  %923 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %922, i32 2, i32 31), !dbg !99
  %924 = bitcast i32 %923 to float, !dbg !99
  %925 = fcmp ogt float %921, %924, !dbg !101
  %926 = fcmp uno float %921, 0.000000e+00, !dbg !102
  %927 = or i1 %925, %926, !dbg !103
  %928 = select i1 %927, float %921, float %924, !dbg !104
  %929 = bitcast float %928 to i32, !dbg !99
  %930 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %929, i32 1, i32 31), !dbg !99
  %931 = bitcast i32 %930 to float, !dbg !99
  %932 = fcmp ogt float %928, %931, !dbg !101
  %933 = fcmp uno float %928, 0.000000e+00, !dbg !102
  %934 = or i1 %932, %933, !dbg !103
  %935 = select i1 %900, i32 %895, i32 %896, !dbg !104
  %936 = insertelement <1 x i32> poison, i32 %935, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %793, <1 x i32> %936, i1 %401) #5, !dbg !99
  %937 = select i1 %934, i32 %929, i32 %930, !dbg !104
  %938 = insertelement <1 x i32> poison, i32 %937, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %798, <1 x i32> %938, i1 %401) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %939 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %413, i1 %801) #5, !dbg !99
  %940 = bitcast i32 %939 to float, !dbg !99
  %941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 4, i32 31), !dbg !99
  %942 = bitcast i32 %941 to float, !dbg !99
  %943 = fcmp ogt float %940, %942, !dbg !101
  %944 = fcmp uno float %940, 0.000000e+00, !dbg !102
  %945 = or i1 %944, %943, !dbg !103
  %946 = select i1 %945, float %940, float %942, !dbg !104
  %947 = bitcast float %946 to i32, !dbg !99
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 2, i32 31), !dbg !99
  %949 = bitcast i32 %948 to float, !dbg !99
  %950 = fcmp ogt float %946, %949, !dbg !101
  %951 = fcmp uno float %946, 0.000000e+00, !dbg !102
  %952 = or i1 %950, %951, !dbg !103
  %953 = select i1 %952, float %946, float %949, !dbg !104
  %954 = bitcast float %953 to i32, !dbg !99
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 1, i32 31), !dbg !99
  %956 = bitcast i32 %955 to float, !dbg !99
  %957 = fcmp ogt float %953, %956, !dbg !101
  %958 = fcmp uno float %953, 0.000000e+00, !dbg !102
  %959 = or i1 %957, %958, !dbg !103
  %960 = select i1 %959, i32 %954, i32 %955, !dbg !104
  %961 = insertelement <1 x i32> poison, i32 %960, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %961, i1 %825) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %962 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %963 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %964 = bitcast float %962 to i32, !dbg !105
  %965 = bitcast float %963 to i32, !dbg !105
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %964, i32 %965, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %966 = load float, ptr addrspace(3) %833, align 4, !dbg !105
  %967 = sext i32 %209 to i64, !dbg !106
  %968 = getelementptr bfloat, ptr addrspace(1) %4, i64 %967, !dbg !106
  %969 = fptrunc float %834 to bfloat, !dbg !98
  %970 = and i32 %18, 254, !dbg !98
  %971 = icmp eq i32 %970, 0, !dbg !98
  %972 = bitcast bfloat %969 to i16, !dbg !98
  %973 = and i1 %971, %210, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %972, ptr addrspace(1) %968, i1 %973) #5, !dbg !98
  %974 = getelementptr bfloat, ptr addrspace(1) %5, i64 %967, !dbg !107
  %975 = fptrunc float %966 to bfloat, !dbg !105
  %976 = bitcast bfloat %975 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %976, ptr addrspace(1) %974, i1 %973) #5, !dbg !105
  %977 = getelementptr bfloat, ptr addrspace(1) %6, i64 %967, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %972, ptr addrspace(1) %977, i1 %973) #5, !dbg !109
  %978 = getelementptr bfloat, ptr addrspace(1) %7, i64 %967, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %976, ptr addrspace(1) %978, i1 %973) #5, !dbg !111
  %979 = getelementptr bfloat, ptr addrspace(1) %8, i64 %967, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %972, ptr addrspace(1) %979, i1 %973) #5, !dbg !113
  %980 = getelementptr bfloat, ptr addrspace(1) %9, i64 %967, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %976, ptr addrspace(1) %980, i1 %973) #5, !dbg !115
  %.inv = fcmp oge float %828, 0.000000e+00, !dbg !116
  %981 = select i1 %.inv, float 0.000000e+00, float %828, !dbg !116
  %.inv4 = fcmp oge float %829, 0.000000e+00, !dbg !116
  %982 = select i1 %.inv4, float 0.000000e+00, float %829, !dbg !116
  %983 = fsub float 0.000000e+00, %981, !dbg !118
  %984 = fsub float 0.000000e+00, %982, !dbg !118
  %.inv5 = fcmp ole float %962, 0.000000e+00, !dbg !119
  %985 = select i1 %.inv5, float 0.000000e+00, float %962, !dbg !119
  %.inv6 = fcmp ole float %963, 0.000000e+00, !dbg !119
  %986 = select i1 %.inv6, float 0.000000e+00, float %963, !dbg !119
  %987 = fcmp ogt float %983, %985, !dbg !121
  %988 = fcmp ogt float %984, %986, !dbg !121
  %989 = fcmp uno float %983, 0.000000e+00, !dbg !123
  %990 = fcmp uno float %984, 0.000000e+00, !dbg !123
  %991 = or i1 %989, %987, !dbg !124
  %992 = or i1 %990, %988, !dbg !124
  %993 = select i1 %991, float %983, float %985, !dbg !125
  %994 = select i1 %992, float %984, float %986, !dbg !125
  %995 = fmul float %993, 0x3F80204080000000, !dbg !126
  %996 = fmul float %994, 0x3F80204080000000, !dbg !126
  %997 = fcmp ogt float %995, 0x3EE4F8B580000000, !dbg !127
  %998 = fcmp ogt float %996, 0x3EE4F8B580000000, !dbg !127
  %999 = fcmp uno float %995, 0.000000e+00, !dbg !129
  %1000 = fcmp uno float %996, 0.000000e+00, !dbg !129
  %1001 = or i1 %997, %999, !dbg !130
  %1002 = or i1 %998, %1000, !dbg !130
  %1003 = select i1 %1001, float %995, float 0x3EE4F8B580000000, !dbg !131
  %1004 = select i1 %1002, float %996, float 0x3EE4F8B580000000, !dbg !131
  %1005 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1003), !dbg !132
  %1006 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1004), !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %1007 = bitcast float %1005 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1007, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1007, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1007, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1007, i1 true) #5, !dbg !133
  %1008 = bitcast float %1006 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i64 8), <1 x i32> %1008, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i64 8), <1 x i32> %1008, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i64 8), <1 x i32> %1008, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i64 8), <1 x i32> %1008, i1 true) #5, !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %1009 = lshr exact i32 %19, 6, !dbg !133
  %1010 = zext nneg i32 %1009 to i64, !dbg !133
  %1011 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %1010, !dbg !133
  %1012 = load float, ptr addrspace(3) %1011, align 8, !dbg !133
  %1013 = sext i32 %28 to i64, !dbg !134
  %1014 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1013, !dbg !134
  %1015 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1014, i1 %22) #5, !dbg !135
  %1016 = extractvalue { i32, i32, i32, i32 } %1015, 0, !dbg !135
  %1017 = bitcast i32 %1016 to <2 x bfloat>, !dbg !135
  %1018 = extractvalue { i32, i32, i32, i32 } %1015, 1, !dbg !135
  %1019 = bitcast i32 %1018 to <2 x bfloat>, !dbg !135
  %1020 = extractvalue { i32, i32, i32, i32 } %1015, 2, !dbg !135
  %1021 = bitcast i32 %1020 to <2 x bfloat>, !dbg !135
  %1022 = extractvalue { i32, i32, i32, i32 } %1015, 3, !dbg !135
  %1023 = bitcast i32 %1022 to <2 x bfloat>, !dbg !135
  %1024 = extractelement <2 x bfloat> %1017, i64 0, !dbg !135
  %1025 = extractelement <2 x bfloat> %1017, i64 1, !dbg !135
  %1026 = extractelement <2 x bfloat> %1019, i64 0, !dbg !135
  %1027 = extractelement <2 x bfloat> %1019, i64 1, !dbg !135
  %1028 = extractelement <2 x bfloat> %1021, i64 0, !dbg !135
  %1029 = extractelement <2 x bfloat> %1021, i64 1, !dbg !135
  %1030 = extractelement <2 x bfloat> %1023, i64 0, !dbg !135
  %1031 = extractelement <2 x bfloat> %1023, i64 1, !dbg !135
  %1032 = fpext bfloat %1024 to float, !dbg !136
  %1033 = fpext bfloat %1025 to float, !dbg !136
  %1034 = fpext bfloat %1026 to float, !dbg !136
  %1035 = fpext bfloat %1027 to float, !dbg !136
  %1036 = fpext bfloat %1028 to float, !dbg !136
  %1037 = fpext bfloat %1029 to float, !dbg !136
  %1038 = fpext bfloat %1030 to float, !dbg !136
  %1039 = fpext bfloat %1031 to float, !dbg !136
  %1040 = fmul float %1012, %1032, !dbg !133
  %1041 = fmul float %1012, %1033, !dbg !133
  %1042 = fmul float %1012, %1034, !dbg !133
  %1043 = fmul float %1012, %1035, !dbg !133
  %1044 = fmul float %1012, %1036, !dbg !133
  %1045 = fmul float %1012, %1037, !dbg !133
  %1046 = fmul float %1012, %1038, !dbg !133
  %1047 = fmul float %1012, %1039, !dbg !133
  %1048 = tail call float @llvm.nvvm.round.f(float %1040) #5, !dbg !137
  %1049 = tail call float @llvm.nvvm.round.f(float %1041) #5, !dbg !137
  %1050 = tail call float @llvm.nvvm.round.f(float %1042) #5, !dbg !137
  %1051 = tail call float @llvm.nvvm.round.f(float %1043) #5, !dbg !137
  %1052 = tail call float @llvm.nvvm.round.f(float %1044) #5, !dbg !137
  %1053 = tail call float @llvm.nvvm.round.f(float %1045) #5, !dbg !137
  %1054 = tail call float @llvm.nvvm.round.f(float %1046) #5, !dbg !137
  %1055 = tail call float @llvm.nvvm.round.f(float %1047) #5, !dbg !137
  %1056 = insertelement <4 x float> poison, float %1048, i64 0, !dbg !138
  %1057 = insertelement <4 x float> %1056, float %1049, i64 1, !dbg !138
  %1058 = insertelement <4 x float> %1057, float %1050, i64 2, !dbg !138
  %1059 = insertelement <4 x float> %1058, float %1051, i64 3, !dbg !138
  %1060 = fcmp ogt <4 x float> %1059, splat (float -1.270000e+02), !dbg !138
  %1061 = fcmp uno <4 x float> %1059, zeroinitializer, !dbg !140
  %1062 = or <4 x i1> %1060, %1061, !dbg !141
  %1063 = select <4 x i1> %1062, <4 x float> %1059, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1064 = fcmp olt <4 x float> %1063, splat (float 1.270000e+02), !dbg !143
  %1065 = fcmp uno <4 x float> %1063, zeroinitializer, !dbg !145
  %1066 = or <4 x i1> %1064, %1065, !dbg !146
  %1067 = fptosi <4 x float> %1063 to <4 x i8>, !dbg !147
  %1068 = select <4 x i1> %1066, <4 x i8> %1067, <4 x i8> splat (i8 127), !dbg !148
  %1069 = insertelement <4 x float> poison, float %1052, i64 0, !dbg !138
  %1070 = insertelement <4 x float> %1069, float %1053, i64 1, !dbg !138
  %1071 = insertelement <4 x float> %1070, float %1054, i64 2, !dbg !138
  %1072 = insertelement <4 x float> %1071, float %1055, i64 3, !dbg !138
  %1073 = fcmp ogt <4 x float> %1072, splat (float -1.270000e+02), !dbg !138
  %1074 = fcmp uno <4 x float> %1072, zeroinitializer, !dbg !140
  %1075 = or <4 x i1> %1073, %1074, !dbg !141
  %1076 = select <4 x i1> %1075, <4 x float> %1072, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1077 = fcmp olt <4 x float> %1076, splat (float 1.270000e+02), !dbg !143
  %1078 = fcmp uno <4 x float> %1076, zeroinitializer, !dbg !145
  %1079 = or <4 x i1> %1077, %1078, !dbg !146
  %1080 = fptosi <4 x float> %1076 to <4 x i8>, !dbg !147
  %1081 = select <4 x i1> %1079, <4 x i8> %1080, <4 x i8> splat (i8 127), !dbg !148
  %1082 = getelementptr i8, ptr addrspace(1) %10, i64 %1013, !dbg !149
  %1083 = bitcast <4 x i8> %1068 to i32, !dbg !150
  %1084 = bitcast <4 x i8> %1081 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1083, i32 %1084, ptr addrspace(1) %1082, i1 %22) #5, !dbg !150
  %1085 = getelementptr i8, ptr addrspace(1) %11, i64 %1013, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1083, i32 %1084, ptr addrspace(1) %1085, i1 %22) #5, !dbg !152
  %1086 = getelementptr i8, ptr addrspace(1) %12, i64 %1013, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1083, i32 %1084, ptr addrspace(1) %1086, i1 %22) #5, !dbg !154
  %1087 = add i32 %28, 1024, !dbg !155
  %1088 = sext i32 %1087 to i64, !dbg !134
  %1089 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1088, !dbg !134
  %1090 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1089, i1 %22) #5, !dbg !135
  %1091 = extractvalue { i32, i32, i32, i32 } %1090, 0, !dbg !135
  %1092 = bitcast i32 %1091 to <2 x bfloat>, !dbg !135
  %1093 = extractvalue { i32, i32, i32, i32 } %1090, 1, !dbg !135
  %1094 = bitcast i32 %1093 to <2 x bfloat>, !dbg !135
  %1095 = extractvalue { i32, i32, i32, i32 } %1090, 2, !dbg !135
  %1096 = bitcast i32 %1095 to <2 x bfloat>, !dbg !135
  %1097 = extractvalue { i32, i32, i32, i32 } %1090, 3, !dbg !135
  %1098 = bitcast i32 %1097 to <2 x bfloat>, !dbg !135
  %1099 = extractelement <2 x bfloat> %1092, i64 0, !dbg !135
  %1100 = extractelement <2 x bfloat> %1092, i64 1, !dbg !135
  %1101 = extractelement <2 x bfloat> %1094, i64 0, !dbg !135
  %1102 = extractelement <2 x bfloat> %1094, i64 1, !dbg !135
  %1103 = extractelement <2 x bfloat> %1096, i64 0, !dbg !135
  %1104 = extractelement <2 x bfloat> %1096, i64 1, !dbg !135
  %1105 = extractelement <2 x bfloat> %1098, i64 0, !dbg !135
  %1106 = extractelement <2 x bfloat> %1098, i64 1, !dbg !135
  %1107 = fpext bfloat %1099 to float, !dbg !136
  %1108 = fpext bfloat %1100 to float, !dbg !136
  %1109 = fpext bfloat %1101 to float, !dbg !136
  %1110 = fpext bfloat %1102 to float, !dbg !136
  %1111 = fpext bfloat %1103 to float, !dbg !136
  %1112 = fpext bfloat %1104 to float, !dbg !136
  %1113 = fpext bfloat %1105 to float, !dbg !136
  %1114 = fpext bfloat %1106 to float, !dbg !136
  %1115 = fmul float %1012, %1107, !dbg !133
  %1116 = fmul float %1012, %1108, !dbg !133
  %1117 = fmul float %1012, %1109, !dbg !133
  %1118 = fmul float %1012, %1110, !dbg !133
  %1119 = fmul float %1012, %1111, !dbg !133
  %1120 = fmul float %1012, %1112, !dbg !133
  %1121 = fmul float %1012, %1113, !dbg !133
  %1122 = fmul float %1012, %1114, !dbg !133
  %1123 = tail call float @llvm.nvvm.round.f(float %1115) #5, !dbg !137
  %1124 = tail call float @llvm.nvvm.round.f(float %1116) #5, !dbg !137
  %1125 = tail call float @llvm.nvvm.round.f(float %1117) #5, !dbg !137
  %1126 = tail call float @llvm.nvvm.round.f(float %1118) #5, !dbg !137
  %1127 = tail call float @llvm.nvvm.round.f(float %1119) #5, !dbg !137
  %1128 = tail call float @llvm.nvvm.round.f(float %1120) #5, !dbg !137
  %1129 = tail call float @llvm.nvvm.round.f(float %1121) #5, !dbg !137
  %1130 = tail call float @llvm.nvvm.round.f(float %1122) #5, !dbg !137
  %1131 = insertelement <4 x float> poison, float %1123, i64 0, !dbg !138
  %1132 = insertelement <4 x float> %1131, float %1124, i64 1, !dbg !138
  %1133 = insertelement <4 x float> %1132, float %1125, i64 2, !dbg !138
  %1134 = insertelement <4 x float> %1133, float %1126, i64 3, !dbg !138
  %1135 = fcmp ogt <4 x float> %1134, splat (float -1.270000e+02), !dbg !138
  %1136 = fcmp uno <4 x float> %1134, zeroinitializer, !dbg !140
  %1137 = or <4 x i1> %1135, %1136, !dbg !141
  %1138 = select <4 x i1> %1137, <4 x float> %1134, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1139 = fcmp olt <4 x float> %1138, splat (float 1.270000e+02), !dbg !143
  %1140 = fcmp uno <4 x float> %1138, zeroinitializer, !dbg !145
  %1141 = or <4 x i1> %1139, %1140, !dbg !146
  %1142 = fptosi <4 x float> %1138 to <4 x i8>, !dbg !147
  %1143 = select <4 x i1> %1141, <4 x i8> %1142, <4 x i8> splat (i8 127), !dbg !148
  %1144 = insertelement <4 x float> poison, float %1127, i64 0, !dbg !138
  %1145 = insertelement <4 x float> %1144, float %1128, i64 1, !dbg !138
  %1146 = insertelement <4 x float> %1145, float %1129, i64 2, !dbg !138
  %1147 = insertelement <4 x float> %1146, float %1130, i64 3, !dbg !138
  %1148 = fcmp ogt <4 x float> %1147, splat (float -1.270000e+02), !dbg !138
  %1149 = fcmp uno <4 x float> %1147, zeroinitializer, !dbg !140
  %1150 = or <4 x i1> %1148, %1149, !dbg !141
  %1151 = select <4 x i1> %1150, <4 x float> %1147, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1152 = fcmp olt <4 x float> %1151, splat (float 1.270000e+02), !dbg !143
  %1153 = fcmp uno <4 x float> %1151, zeroinitializer, !dbg !145
  %1154 = or <4 x i1> %1152, %1153, !dbg !146
  %1155 = fptosi <4 x float> %1151 to <4 x i8>, !dbg !147
  %1156 = select <4 x i1> %1154, <4 x i8> %1155, <4 x i8> splat (i8 127), !dbg !148
  %1157 = getelementptr i8, ptr addrspace(1) %10, i64 %1088, !dbg !149
  %1158 = bitcast <4 x i8> %1143 to i32, !dbg !150
  %1159 = bitcast <4 x i8> %1156 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1158, i32 %1159, ptr addrspace(1) %1157, i1 %22) #5, !dbg !150
  %1160 = getelementptr i8, ptr addrspace(1) %11, i64 %1088, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1158, i32 %1159, ptr addrspace(1) %1160, i1 %22) #5, !dbg !152
  %1161 = getelementptr i8, ptr addrspace(1) %12, i64 %1088, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1158, i32 %1159, ptr addrspace(1) %1161, i1 %22) #5, !dbg !154
  %1162 = add i32 %28, 2048, !dbg !155
  %1163 = sext i32 %1162 to i64, !dbg !134
  %1164 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1163, !dbg !134
  %1165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1164, i1 %22) #5, !dbg !135
  %1166 = extractvalue { i32, i32, i32, i32 } %1165, 0, !dbg !135
  %1167 = bitcast i32 %1166 to <2 x bfloat>, !dbg !135
  %1168 = extractvalue { i32, i32, i32, i32 } %1165, 1, !dbg !135
  %1169 = bitcast i32 %1168 to <2 x bfloat>, !dbg !135
  %1170 = extractvalue { i32, i32, i32, i32 } %1165, 2, !dbg !135
  %1171 = bitcast i32 %1170 to <2 x bfloat>, !dbg !135
  %1172 = extractvalue { i32, i32, i32, i32 } %1165, 3, !dbg !135
  %1173 = bitcast i32 %1172 to <2 x bfloat>, !dbg !135
  %1174 = extractelement <2 x bfloat> %1167, i64 0, !dbg !135
  %1175 = extractelement <2 x bfloat> %1167, i64 1, !dbg !135
  %1176 = extractelement <2 x bfloat> %1169, i64 0, !dbg !135
  %1177 = extractelement <2 x bfloat> %1169, i64 1, !dbg !135
  %1178 = extractelement <2 x bfloat> %1171, i64 0, !dbg !135
  %1179 = extractelement <2 x bfloat> %1171, i64 1, !dbg !135
  %1180 = extractelement <2 x bfloat> %1173, i64 0, !dbg !135
  %1181 = extractelement <2 x bfloat> %1173, i64 1, !dbg !135
  %1182 = fpext bfloat %1174 to float, !dbg !136
  %1183 = fpext bfloat %1175 to float, !dbg !136
  %1184 = fpext bfloat %1176 to float, !dbg !136
  %1185 = fpext bfloat %1177 to float, !dbg !136
  %1186 = fpext bfloat %1178 to float, !dbg !136
  %1187 = fpext bfloat %1179 to float, !dbg !136
  %1188 = fpext bfloat %1180 to float, !dbg !136
  %1189 = fpext bfloat %1181 to float, !dbg !136
  %1190 = fmul float %1012, %1182, !dbg !133
  %1191 = fmul float %1012, %1183, !dbg !133
  %1192 = fmul float %1012, %1184, !dbg !133
  %1193 = fmul float %1012, %1185, !dbg !133
  %1194 = fmul float %1012, %1186, !dbg !133
  %1195 = fmul float %1012, %1187, !dbg !133
  %1196 = fmul float %1012, %1188, !dbg !133
  %1197 = fmul float %1012, %1189, !dbg !133
  %1198 = tail call float @llvm.nvvm.round.f(float %1190) #5, !dbg !137
  %1199 = tail call float @llvm.nvvm.round.f(float %1191) #5, !dbg !137
  %1200 = tail call float @llvm.nvvm.round.f(float %1192) #5, !dbg !137
  %1201 = tail call float @llvm.nvvm.round.f(float %1193) #5, !dbg !137
  %1202 = tail call float @llvm.nvvm.round.f(float %1194) #5, !dbg !137
  %1203 = tail call float @llvm.nvvm.round.f(float %1195) #5, !dbg !137
  %1204 = tail call float @llvm.nvvm.round.f(float %1196) #5, !dbg !137
  %1205 = tail call float @llvm.nvvm.round.f(float %1197) #5, !dbg !137
  %1206 = insertelement <4 x float> poison, float %1198, i64 0, !dbg !138
  %1207 = insertelement <4 x float> %1206, float %1199, i64 1, !dbg !138
  %1208 = insertelement <4 x float> %1207, float %1200, i64 2, !dbg !138
  %1209 = insertelement <4 x float> %1208, float %1201, i64 3, !dbg !138
  %1210 = fcmp ogt <4 x float> %1209, splat (float -1.270000e+02), !dbg !138
  %1211 = fcmp uno <4 x float> %1209, zeroinitializer, !dbg !140
  %1212 = or <4 x i1> %1210, %1211, !dbg !141
  %1213 = select <4 x i1> %1212, <4 x float> %1209, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1214 = fcmp olt <4 x float> %1213, splat (float 1.270000e+02), !dbg !143
  %1215 = fcmp uno <4 x float> %1213, zeroinitializer, !dbg !145
  %1216 = or <4 x i1> %1214, %1215, !dbg !146
  %1217 = fptosi <4 x float> %1213 to <4 x i8>, !dbg !147
  %1218 = select <4 x i1> %1216, <4 x i8> %1217, <4 x i8> splat (i8 127), !dbg !148
  %1219 = insertelement <4 x float> poison, float %1202, i64 0, !dbg !138
  %1220 = insertelement <4 x float> %1219, float %1203, i64 1, !dbg !138
  %1221 = insertelement <4 x float> %1220, float %1204, i64 2, !dbg !138
  %1222 = insertelement <4 x float> %1221, float %1205, i64 3, !dbg !138
  %1223 = fcmp ogt <4 x float> %1222, splat (float -1.270000e+02), !dbg !138
  %1224 = fcmp uno <4 x float> %1222, zeroinitializer, !dbg !140
  %1225 = or <4 x i1> %1223, %1224, !dbg !141
  %1226 = select <4 x i1> %1225, <4 x float> %1222, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1227 = fcmp olt <4 x float> %1226, splat (float 1.270000e+02), !dbg !143
  %1228 = fcmp uno <4 x float> %1226, zeroinitializer, !dbg !145
  %1229 = or <4 x i1> %1227, %1228, !dbg !146
  %1230 = fptosi <4 x float> %1226 to <4 x i8>, !dbg !147
  %1231 = select <4 x i1> %1229, <4 x i8> %1230, <4 x i8> splat (i8 127), !dbg !148
  %1232 = getelementptr i8, ptr addrspace(1) %10, i64 %1163, !dbg !149
  %1233 = bitcast <4 x i8> %1218 to i32, !dbg !150
  %1234 = bitcast <4 x i8> %1231 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1233, i32 %1234, ptr addrspace(1) %1232, i1 %22) #5, !dbg !150
  %1235 = getelementptr i8, ptr addrspace(1) %11, i64 %1163, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1233, i32 %1234, ptr addrspace(1) %1235, i1 %22) #5, !dbg !152
  %1236 = getelementptr i8, ptr addrspace(1) %12, i64 %1163, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1233, i32 %1234, ptr addrspace(1) %1236, i1 %22) #5, !dbg !154
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnq5kypkxynbedcqliharabokygizohwfifu2kgtra4bb5nhr3nw.py", directory: "/tmp/torchinductor_root/nq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 51, scope: !6)
!61 = !DILocation(line: 59, column: 113, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 65, column: 24, scope: !6)
!72 = !DILocation(line: 71, column: 24, scope: !6)
!73 = !DILocation(line: 61, column: 102, scope: !6)
!74 = !DILocation(line: 63, column: 95, scope: !6)
!75 = !DILocation(line: 74, column: 24, scope: !6)
!76 = !DILocation(line: 76, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 80, column: 24, scope: !6)
!80 = !DILocation(line: 86, column: 53, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !82)
!82 = !DILocation(line: 82, column: 47, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !82)
!85 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !82)
!86 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 84, column: 47, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !87)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !87)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !117)
!117 = !DILocation(line: 103, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 17, scope: !6)
!119 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 105, column: 46, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 106, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !122)
!126 = !DILocation(line: 108, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !128)
!128 = !DILocation(line: 111, column: 46, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !128)
!132 = !DILocation(line: 114, column: 25, scope: !6)
!133 = !DILocation(line: 117, column: 24, scope: !6)
!134 = !DILocation(line: 101, column: 36, scope: !6)
!135 = !DILocation(line: 101, column: 53, scope: !6)
!136 = !DILocation(line: 101, column: 115, scope: !6)
!137 = !DILocation(line: 118, column: 36, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !139)
!139 = !DILocation(line: 121, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !139)
!143 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !144)
!144 = !DILocation(line: 123, column: 46, scope: !6)
!145 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !144)
!146 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !144)
!147 = !DILocation(line: 125, column: 25, scope: !6)
!148 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !144)
!149 = !DILocation(line: 126, column: 29, scope: !6)
!150 = !DILocation(line: 126, column: 53, scope: !6)
!151 = !DILocation(line: 127, column: 30, scope: !6)
!152 = !DILocation(line: 127, column: 54, scope: !6)
!153 = !DILocation(line: 128, column: 30, scope: !6)
!154 = !DILocation(line: 128, column: 54, scope: !6)
!155 = !DILocation(line: 101, column: 43, scope: !6)
!156 = !DILocation(line: 95, column: 4, scope: !6)
