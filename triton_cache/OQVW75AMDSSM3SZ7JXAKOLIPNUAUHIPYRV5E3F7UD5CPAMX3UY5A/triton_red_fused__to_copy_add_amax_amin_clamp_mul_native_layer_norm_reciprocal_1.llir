; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = icmp slt i32 %20, 4112, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 31, !dbg !11
  %24 = shl i32 %22, 4, !dbg !11
  %25 = and i32 %24, 2032, !dbg !11
  %26 = or disjoint i32 %25, 8, !dbg !11
  %27 = shl i32 %22, 3, !dbg !11
  %28 = and i32 %27, 1016, !dbg !11
  %29 = mul i32 %20, 3072, !dbg !12
  %30 = add i32 %26, %29
  %31 = zext nneg i32 %25 to i64, !dbg !13
  br label %32, !dbg !13

32:                                               ; preds = %19, %._crit_edge
  %33 = phi i1 [ true, %19 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %19 ], [ 2048, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %19 ], [ %320, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %19 ], [ %321, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %19 ], [ %322, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %19 ], [ %323, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %19 ], [ %324, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %19 ], [ %325, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %19 ], [ %326, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %327, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %328, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %329, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %330, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %331, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %332, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %333, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %334, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %335, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %304, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %305, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %306, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %307, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %308, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %309, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %310, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %311, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %312, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %313, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %314, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %315, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %316, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %317, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %318, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %319, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %288, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %289, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %290, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %291, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %292, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %293, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %294, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %295, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %296, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %297, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %298, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %299, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %300, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %301, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %302, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %303, %._crit_edge ]
  %82 = or disjoint i64 %indvars.iv, %31, !dbg !14
  %83 = icmp samesign ult i64 %82, 3072, !dbg !15
  %84 = trunc nuw nsw i64 %82 to i32, !dbg !16
  %85 = add i32 %29, %84, !dbg !16
  %86 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !16
  %87 = add i32 %30, %86, !dbg !16
  %88 = sext i32 %85 to i64, !dbg !17
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !17
  %90 = sext i32 %87 to i64, !dbg !17
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !17
  %92 = and i1 %21, %83, !dbg !18
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %89, i1 %92) #5, !dbg !19
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !19
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !19
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !19
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !19
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !19
  %100 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !19
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !19
  %102 = extractelement <2 x bfloat> %95, i64 0, !dbg !19
  %103 = extractelement <2 x bfloat> %95, i64 1, !dbg !19
  %104 = extractelement <2 x bfloat> %97, i64 0, !dbg !19
  %105 = extractelement <2 x bfloat> %97, i64 1, !dbg !19
  %106 = extractelement <2 x bfloat> %99, i64 0, !dbg !19
  %107 = extractelement <2 x bfloat> %99, i64 1, !dbg !19
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !19
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !19
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %91, i1 %92) #5, !dbg !19
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !19
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !19
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !19
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !19
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !19
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !19
  %117 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !19
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !19
  %119 = extractelement <2 x bfloat> %112, i64 0, !dbg !19
  %120 = extractelement <2 x bfloat> %112, i64 1, !dbg !19
  %121 = extractelement <2 x bfloat> %114, i64 0, !dbg !19
  %122 = extractelement <2 x bfloat> %114, i64 1, !dbg !19
  %123 = extractelement <2 x bfloat> %116, i64 0, !dbg !19
  %124 = extractelement <2 x bfloat> %116, i64 1, !dbg !19
  %125 = extractelement <2 x bfloat> %118, i64 0, !dbg !19
  %126 = extractelement <2 x bfloat> %118, i64 1, !dbg !19
  %127 = fpext bfloat %102 to float, !dbg !20
  %128 = fpext bfloat %103 to float, !dbg !20
  %129 = fpext bfloat %104 to float, !dbg !20
  %130 = fpext bfloat %105 to float, !dbg !20
  %131 = fpext bfloat %106 to float, !dbg !20
  %132 = fpext bfloat %107 to float, !dbg !20
  %133 = fpext bfloat %108 to float, !dbg !20
  %134 = fpext bfloat %109 to float, !dbg !20
  %135 = fpext bfloat %119 to float, !dbg !20
  %136 = fpext bfloat %120 to float, !dbg !20
  %137 = fpext bfloat %121 to float, !dbg !20
  %138 = fpext bfloat %122 to float, !dbg !20
  %139 = fpext bfloat %123 to float, !dbg !20
  %140 = fpext bfloat %124 to float, !dbg !20
  %141 = fpext bfloat %125 to float, !dbg !20
  %142 = fpext bfloat %126 to float, !dbg !20
  br i1 %33, label %._crit_edge, label %143, !dbg !21

143:                                              ; preds = %32
  %144 = fsub float %127, %66, !dbg !25
  %145 = fsub float %128, %67, !dbg !25
  %146 = fsub float %129, %68, !dbg !25
  %147 = fsub float %130, %69, !dbg !25
  %148 = fsub float %131, %70, !dbg !25
  %149 = fsub float %132, %71, !dbg !25
  %150 = fsub float %133, %72, !dbg !25
  %151 = fsub float %134, %73, !dbg !25
  %152 = fsub float %135, %74, !dbg !25
  %153 = fsub float %136, %75, !dbg !25
  %154 = fsub float %137, %76, !dbg !25
  %155 = fsub float %138, %77, !dbg !25
  %156 = fsub float %139, %78, !dbg !25
  %157 = fsub float %140, %79, !dbg !25
  %158 = fsub float %141, %80, !dbg !25
  %159 = fsub float %142, %81, !dbg !25
  %160 = fadd float %34, 1.000000e+00, !dbg !26
  %161 = fadd float %35, 1.000000e+00, !dbg !26
  %162 = fadd float %36, 1.000000e+00, !dbg !26
  %163 = fadd float %37, 1.000000e+00, !dbg !26
  %164 = fadd float %38, 1.000000e+00, !dbg !26
  %165 = fadd float %39, 1.000000e+00, !dbg !26
  %166 = fadd float %40, 1.000000e+00, !dbg !26
  %167 = fadd float %41, 1.000000e+00, !dbg !26
  %168 = fadd float %42, 1.000000e+00, !dbg !26
  %169 = fadd float %43, 1.000000e+00, !dbg !26
  %170 = fadd float %44, 1.000000e+00, !dbg !26
  %171 = fadd float %45, 1.000000e+00, !dbg !26
  %172 = fadd float %46, 1.000000e+00, !dbg !26
  %173 = fadd float %47, 1.000000e+00, !dbg !26
  %174 = fadd float %48, 1.000000e+00, !dbg !26
  %175 = fadd float %49, 1.000000e+00, !dbg !26
  %176 = tail call float @llvm.nvvm.div.full(float %144, float %160), !dbg !27
  %177 = tail call float @llvm.nvvm.div.full(float %145, float %161), !dbg !27
  %178 = tail call float @llvm.nvvm.div.full(float %146, float %162), !dbg !27
  %179 = tail call float @llvm.nvvm.div.full(float %147, float %163), !dbg !27
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !27
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !27
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !27
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !27
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !27
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !27
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !27
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !27
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !27
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !27
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !27
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !27
  %192 = fadd float %66, %176, !dbg !28
  %193 = fadd float %67, %177, !dbg !28
  %194 = fadd float %68, %178, !dbg !28
  %195 = fadd float %69, %179, !dbg !28
  %196 = fadd float %70, %180, !dbg !28
  %197 = fadd float %71, %181, !dbg !28
  %198 = fadd float %72, %182, !dbg !28
  %199 = fadd float %73, %183, !dbg !28
  %200 = fadd float %74, %184, !dbg !28
  %201 = fadd float %75, %185, !dbg !28
  %202 = fadd float %76, %186, !dbg !28
  %203 = fadd float %77, %187, !dbg !28
  %204 = fadd float %78, %188, !dbg !28
  %205 = fadd float %79, %189, !dbg !28
  %206 = fadd float %80, %190, !dbg !28
  %207 = fadd float %81, %191, !dbg !28
  %208 = fsub float %127, %192, !dbg !29
  %209 = fsub float %128, %193, !dbg !29
  %210 = fsub float %129, %194, !dbg !29
  %211 = fsub float %130, %195, !dbg !29
  %212 = fsub float %131, %196, !dbg !29
  %213 = fsub float %132, %197, !dbg !29
  %214 = fsub float %133, %198, !dbg !29
  %215 = fsub float %134, %199, !dbg !29
  %216 = fsub float %135, %200, !dbg !29
  %217 = fsub float %136, %201, !dbg !29
  %218 = fsub float %137, %202, !dbg !29
  %219 = fsub float %138, %203, !dbg !29
  %220 = fsub float %139, %204, !dbg !29
  %221 = fsub float %140, %205, !dbg !29
  %222 = fsub float %141, %206, !dbg !29
  %223 = fsub float %142, %207, !dbg !29
  %224 = fmul float %144, %208, !dbg !30
  %225 = fmul float %145, %209, !dbg !30
  %226 = fmul float %146, %210, !dbg !30
  %227 = fmul float %147, %211, !dbg !30
  %228 = fmul float %148, %212, !dbg !30
  %229 = fmul float %149, %213, !dbg !30
  %230 = fmul float %150, %214, !dbg !30
  %231 = fmul float %151, %215, !dbg !30
  %232 = fmul float %152, %216, !dbg !30
  %233 = fmul float %153, %217, !dbg !30
  %234 = fmul float %154, %218, !dbg !30
  %235 = fmul float %155, %219, !dbg !30
  %236 = fmul float %156, %220, !dbg !30
  %237 = fmul float %157, %221, !dbg !30
  %238 = fmul float %158, %222, !dbg !30
  %239 = fmul float %159, %223, !dbg !30
  %240 = fadd float %50, %224, !dbg !31
  %241 = fadd float %51, %225, !dbg !31
  %242 = fadd float %52, %226, !dbg !31
  %243 = fadd float %53, %227, !dbg !31
  %244 = fadd float %54, %228, !dbg !31
  %245 = fadd float %55, %229, !dbg !31
  %246 = fadd float %56, %230, !dbg !31
  %247 = fadd float %57, %231, !dbg !31
  %248 = fadd float %58, %232, !dbg !31
  %249 = fadd float %59, %233, !dbg !31
  %250 = fadd float %60, %234, !dbg !31
  %251 = fadd float %61, %235, !dbg !31
  %252 = fadd float %62, %236, !dbg !31
  %253 = fadd float %63, %237, !dbg !31
  %254 = fadd float %64, %238, !dbg !31
  %255 = fadd float %65, %239, !dbg !31
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %32, %143
  %256 = phi float [ %240, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %257 = phi float [ %241, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %258 = phi float [ %242, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %259 = phi float [ %243, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %260 = phi float [ %244, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %261 = phi float [ %245, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %262 = phi float [ %246, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %263 = phi float [ %247, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %264 = phi float [ %248, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %265 = phi float [ %249, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %266 = phi float [ %250, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %267 = phi float [ %251, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %268 = phi float [ %252, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %269 = phi float [ %253, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %270 = phi float [ %254, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %271 = phi float [ %255, %143 ], [ 0.000000e+00, %32 ], !dbg !24
  %.pn56 = phi float [ %192, %143 ], [ %127, %32 ]
  %.pn54 = phi float [ %193, %143 ], [ %128, %32 ]
  %.pn52 = phi float [ %194, %143 ], [ %129, %32 ]
  %.pn50 = phi float [ %195, %143 ], [ %130, %32 ]
  %.pn48 = phi float [ %196, %143 ], [ %131, %32 ]
  %.pn46 = phi float [ %197, %143 ], [ %132, %32 ]
  %.pn44 = phi float [ %198, %143 ], [ %133, %32 ]
  %.pn42 = phi float [ %199, %143 ], [ %134, %32 ]
  %.pn40 = phi float [ %200, %143 ], [ %135, %32 ]
  %.pn38 = phi float [ %201, %143 ], [ %136, %32 ]
  %.pn36 = phi float [ %202, %143 ], [ %137, %32 ]
  %.pn34 = phi float [ %203, %143 ], [ %138, %32 ]
  %.pn32 = phi float [ %204, %143 ], [ %139, %32 ]
  %.pn30 = phi float [ %205, %143 ], [ %140, %32 ]
  %.pn28 = phi float [ %206, %143 ], [ %141, %32 ]
  %.pn26 = phi float [ %207, %143 ], [ %142, %32 ]
  %272 = phi float [ %160, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %273 = phi float [ %161, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %274 = phi float [ %162, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %275 = phi float [ %163, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %276 = phi float [ %164, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %277 = phi float [ %165, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %278 = phi float [ %166, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %279 = phi float [ %167, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %280 = phi float [ %168, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %281 = phi float [ %169, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %282 = phi float [ %170, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %283 = phi float [ %171, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %284 = phi float [ %172, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %285 = phi float [ %173, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %286 = phi float [ %174, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %287 = phi float [ %175, %143 ], [ 1.000000e+00, %32 ], !dbg !24
  %288 = select i1 %92, float %.pn56, float %66, !dbg !32
  %289 = select i1 %92, float %.pn54, float %67, !dbg !32
  %290 = select i1 %92, float %.pn52, float %68, !dbg !32
  %291 = select i1 %92, float %.pn50, float %69, !dbg !32
  %292 = select i1 %92, float %.pn48, float %70, !dbg !32
  %293 = select i1 %92, float %.pn46, float %71, !dbg !32
  %294 = select i1 %92, float %.pn44, float %72, !dbg !32
  %295 = select i1 %92, float %.pn42, float %73, !dbg !32
  %296 = select i1 %92, float %.pn40, float %74, !dbg !32
  %297 = select i1 %92, float %.pn38, float %75, !dbg !32
  %298 = select i1 %92, float %.pn36, float %76, !dbg !32
  %299 = select i1 %92, float %.pn34, float %77, !dbg !32
  %300 = select i1 %92, float %.pn32, float %78, !dbg !32
  %301 = select i1 %92, float %.pn30, float %79, !dbg !32
  %302 = select i1 %92, float %.pn28, float %80, !dbg !32
  %303 = select i1 %92, float %.pn26, float %81, !dbg !32
  %304 = select i1 %92, float %256, float %50, !dbg !33
  %305 = select i1 %92, float %257, float %51, !dbg !33
  %306 = select i1 %92, float %258, float %52, !dbg !33
  %307 = select i1 %92, float %259, float %53, !dbg !33
  %308 = select i1 %92, float %260, float %54, !dbg !33
  %309 = select i1 %92, float %261, float %55, !dbg !33
  %310 = select i1 %92, float %262, float %56, !dbg !33
  %311 = select i1 %92, float %263, float %57, !dbg !33
  %312 = select i1 %92, float %264, float %58, !dbg !33
  %313 = select i1 %92, float %265, float %59, !dbg !33
  %314 = select i1 %92, float %266, float %60, !dbg !33
  %315 = select i1 %92, float %267, float %61, !dbg !33
  %316 = select i1 %92, float %268, float %62, !dbg !33
  %317 = select i1 %92, float %269, float %63, !dbg !33
  %318 = select i1 %92, float %270, float %64, !dbg !33
  %319 = select i1 %92, float %271, float %65, !dbg !33
  %320 = select i1 %92, float %272, float %34, !dbg !34
  %321 = select i1 %92, float %273, float %35, !dbg !34
  %322 = select i1 %92, float %274, float %36, !dbg !34
  %323 = select i1 %92, float %275, float %37, !dbg !34
  %324 = select i1 %92, float %276, float %38, !dbg !34
  %325 = select i1 %92, float %277, float %39, !dbg !34
  %326 = select i1 %92, float %278, float %40, !dbg !34
  %327 = select i1 %92, float %279, float %41, !dbg !34
  %328 = select i1 %92, float %280, float %42, !dbg !34
  %329 = select i1 %92, float %281, float %43, !dbg !34
  %330 = select i1 %92, float %282, float %44, !dbg !34
  %331 = select i1 %92, float %283, float %45, !dbg !34
  %332 = select i1 %92, float %284, float %46, !dbg !34
  %333 = select i1 %92, float %285, float %47, !dbg !34
  %334 = select i1 %92, float %286, float %48, !dbg !34
  %335 = select i1 %92, float %287, float %49, !dbg !34
  br i1 %33, label %32, label %__nv_rsqrtf.exit, !dbg !13

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %336 = lshr i32 %22, 5, !dbg !11
  %337 = or disjoint i32 %28, 1024, !dbg !11
  %338 = fsub float %289, %288, !dbg !35
  %339 = fadd float %320, %321, !dbg !38
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !39
  %341 = tail call float @llvm.nvvm.div.full(float %321, float %339), !dbg !40
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !41
  %343 = fmul float %338, %342, !dbg !42
  %344 = fadd float %288, %343, !dbg !43
  %345 = fadd float %304, %305, !dbg !44
  %346 = fmul float %338, %338, !dbg !45
  %347 = fmul float %346, %320, !dbg !46
  %348 = fmul float %347, %342, !dbg !47
  %349 = fadd float %345, %348, !dbg !48
  %350 = fsub float %290, %344, !dbg !35
  %351 = fadd float %322, %339, !dbg !38
  %352 = fcmp oeq float %351, 0.000000e+00, !dbg !39
  %353 = tail call float @llvm.nvvm.div.full(float %322, float %351), !dbg !40
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !41
  %355 = fmul float %354, %350, !dbg !42
  %356 = fadd float %344, %355, !dbg !43
  %357 = fadd float %306, %349, !dbg !44
  %358 = fmul float %350, %350, !dbg !45
  %359 = fmul float %339, %358, !dbg !46
  %360 = fmul float %354, %359, !dbg !47
  %361 = fadd float %357, %360, !dbg !48
  %362 = fsub float %291, %356, !dbg !35
  %363 = fadd float %323, %351, !dbg !38
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !39
  %365 = tail call float @llvm.nvvm.div.full(float %323, float %363), !dbg !40
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !41
  %367 = fmul float %366, %362, !dbg !42
  %368 = fadd float %356, %367, !dbg !43
  %369 = fadd float %307, %361, !dbg !44
  %370 = fmul float %362, %362, !dbg !45
  %371 = fmul float %351, %370, !dbg !46
  %372 = fmul float %366, %371, !dbg !47
  %373 = fadd float %369, %372, !dbg !48
  %374 = fsub float %292, %368, !dbg !35
  %375 = fadd float %324, %363, !dbg !38
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !39
  %377 = tail call float @llvm.nvvm.div.full(float %324, float %375), !dbg !40
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !41
  %379 = fmul float %378, %374, !dbg !42
  %380 = fadd float %368, %379, !dbg !43
  %381 = fadd float %308, %373, !dbg !44
  %382 = fmul float %374, %374, !dbg !45
  %383 = fmul float %363, %382, !dbg !46
  %384 = fmul float %378, %383, !dbg !47
  %385 = fadd float %381, %384, !dbg !48
  %386 = fsub float %293, %380, !dbg !35
  %387 = fadd float %325, %375, !dbg !38
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !39
  %389 = tail call float @llvm.nvvm.div.full(float %325, float %387), !dbg !40
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !41
  %391 = fmul float %390, %386, !dbg !42
  %392 = fadd float %380, %391, !dbg !43
  %393 = fadd float %309, %385, !dbg !44
  %394 = fmul float %386, %386, !dbg !45
  %395 = fmul float %375, %394, !dbg !46
  %396 = fmul float %390, %395, !dbg !47
  %397 = fadd float %393, %396, !dbg !48
  %398 = fsub float %294, %392, !dbg !35
  %399 = fadd float %326, %387, !dbg !38
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !39
  %401 = tail call float @llvm.nvvm.div.full(float %326, float %399), !dbg !40
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !41
  %403 = fmul float %402, %398, !dbg !42
  %404 = fadd float %392, %403, !dbg !43
  %405 = fadd float %310, %397, !dbg !44
  %406 = fmul float %398, %398, !dbg !45
  %407 = fmul float %387, %406, !dbg !46
  %408 = fmul float %402, %407, !dbg !47
  %409 = fadd float %405, %408, !dbg !48
  %410 = fsub float %295, %404, !dbg !35
  %411 = fadd float %327, %399, !dbg !38
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !39
  %413 = tail call float @llvm.nvvm.div.full(float %327, float %411), !dbg !40
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !41
  %415 = fmul float %414, %410, !dbg !42
  %416 = fadd float %404, %415, !dbg !43
  %417 = fadd float %311, %409, !dbg !44
  %418 = fmul float %410, %410, !dbg !45
  %419 = fmul float %399, %418, !dbg !46
  %420 = fmul float %414, %419, !dbg !47
  %421 = fadd float %417, %420, !dbg !48
  %422 = fsub float %296, %416, !dbg !35
  %423 = fadd float %328, %411, !dbg !38
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !39
  %425 = tail call float @llvm.nvvm.div.full(float %328, float %423), !dbg !40
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !41
  %427 = fmul float %426, %422, !dbg !42
  %428 = fadd float %416, %427, !dbg !43
  %429 = fadd float %312, %421, !dbg !44
  %430 = fmul float %422, %422, !dbg !45
  %431 = fmul float %411, %430, !dbg !46
  %432 = fmul float %426, %431, !dbg !47
  %433 = fadd float %429, %432, !dbg !48
  %434 = fsub float %297, %428, !dbg !35
  %435 = fadd float %329, %423, !dbg !38
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !39
  %437 = tail call float @llvm.nvvm.div.full(float %329, float %435), !dbg !40
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !41
  %439 = fmul float %438, %434, !dbg !42
  %440 = fadd float %428, %439, !dbg !43
  %441 = fadd float %313, %433, !dbg !44
  %442 = fmul float %434, %434, !dbg !45
  %443 = fmul float %423, %442, !dbg !46
  %444 = fmul float %438, %443, !dbg !47
  %445 = fadd float %441, %444, !dbg !48
  %446 = fsub float %298, %440, !dbg !35
  %447 = fadd float %330, %435, !dbg !38
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !39
  %449 = tail call float @llvm.nvvm.div.full(float %330, float %447), !dbg !40
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !41
  %451 = fmul float %450, %446, !dbg !42
  %452 = fadd float %440, %451, !dbg !43
  %453 = fadd float %314, %445, !dbg !44
  %454 = fmul float %446, %446, !dbg !45
  %455 = fmul float %435, %454, !dbg !46
  %456 = fmul float %450, %455, !dbg !47
  %457 = fadd float %453, %456, !dbg !48
  %458 = fsub float %299, %452, !dbg !35
  %459 = fadd float %331, %447, !dbg !38
  %460 = fcmp oeq float %459, 0.000000e+00, !dbg !39
  %461 = tail call float @llvm.nvvm.div.full(float %331, float %459), !dbg !40
  %462 = select i1 %460, float 0.000000e+00, float %461, !dbg !41
  %463 = fmul float %462, %458, !dbg !42
  %464 = fadd float %452, %463, !dbg !43
  %465 = fadd float %315, %457, !dbg !44
  %466 = fmul float %458, %458, !dbg !45
  %467 = fmul float %447, %466, !dbg !46
  %468 = fmul float %462, %467, !dbg !47
  %469 = fadd float %465, %468, !dbg !48
  %470 = fsub float %300, %464, !dbg !35
  %471 = fadd float %332, %459, !dbg !38
  %472 = fcmp oeq float %471, 0.000000e+00, !dbg !39
  %473 = tail call float @llvm.nvvm.div.full(float %332, float %471), !dbg !40
  %474 = select i1 %472, float 0.000000e+00, float %473, !dbg !41
  %475 = fmul float %474, %470, !dbg !42
  %476 = fadd float %464, %475, !dbg !43
  %477 = fadd float %316, %469, !dbg !44
  %478 = fmul float %470, %470, !dbg !45
  %479 = fmul float %459, %478, !dbg !46
  %480 = fmul float %474, %479, !dbg !47
  %481 = fadd float %477, %480, !dbg !48
  %482 = fsub float %301, %476, !dbg !35
  %483 = fadd float %333, %471, !dbg !38
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !39
  %485 = tail call float @llvm.nvvm.div.full(float %333, float %483), !dbg !40
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !41
  %487 = fmul float %486, %482, !dbg !42
  %488 = fadd float %476, %487, !dbg !43
  %489 = fadd float %317, %481, !dbg !44
  %490 = fmul float %482, %482, !dbg !45
  %491 = fmul float %471, %490, !dbg !46
  %492 = fmul float %486, %491, !dbg !47
  %493 = fadd float %489, %492, !dbg !48
  %494 = fsub float %302, %488, !dbg !35
  %495 = fadd float %334, %483, !dbg !38
  %496 = fcmp oeq float %495, 0.000000e+00, !dbg !39
  %497 = tail call float @llvm.nvvm.div.full(float %334, float %495), !dbg !40
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !41
  %499 = fmul float %498, %494, !dbg !42
  %500 = fadd float %488, %499, !dbg !43
  %501 = fadd float %318, %493, !dbg !44
  %502 = fmul float %494, %494, !dbg !45
  %503 = fmul float %483, %502, !dbg !46
  %504 = fmul float %498, %503, !dbg !47
  %505 = fadd float %501, %504, !dbg !48
  %506 = fsub float %303, %500, !dbg !35
  %507 = fadd float %335, %495, !dbg !38
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !39
  %509 = tail call float @llvm.nvvm.div.full(float %335, float %507), !dbg !40
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !41
  %511 = fmul float %510, %506, !dbg !42
  %512 = fadd float %500, %511, !dbg !43
  %513 = fadd float %319, %505, !dbg !44
  %514 = fmul float %506, %506, !dbg !45
  %515 = fmul float %495, %514, !dbg !46
  %516 = fmul float %510, %515, !dbg !47
  %517 = fadd float %513, %516, !dbg !48
  %518 = bitcast float %512 to i32, !dbg !49
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 16, i32 31), !dbg !49
  %520 = bitcast i32 %519 to float, !dbg !49
  %521 = bitcast float %517 to i32, !dbg !49
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 16, i32 31), !dbg !49
  %523 = bitcast i32 %522 to float, !dbg !49
  %524 = bitcast float %507 to i32, !dbg !49
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 16, i32 31), !dbg !49
  %526 = bitcast i32 %525 to float, !dbg !49
  %527 = fsub float %520, %512, !dbg !35
  %528 = fadd float %507, %526, !dbg !38
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !39
  %530 = tail call float @llvm.nvvm.div.full(float %526, float %528), !dbg !40
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !41
  %532 = fmul float %531, %527, !dbg !42
  %533 = fadd float %512, %532, !dbg !43
  %534 = fadd float %517, %523, !dbg !44
  %535 = fmul float %527, %527, !dbg !45
  %536 = fmul float %507, %535, !dbg !46
  %537 = fmul float %531, %536, !dbg !47
  %538 = fadd float %534, %537, !dbg !48
  %539 = bitcast float %533 to i32, !dbg !49
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 8, i32 31), !dbg !49
  %541 = bitcast i32 %540 to float, !dbg !49
  %542 = bitcast float %538 to i32, !dbg !49
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 8, i32 31), !dbg !49
  %544 = bitcast i32 %543 to float, !dbg !49
  %545 = bitcast float %528 to i32, !dbg !49
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 8, i32 31), !dbg !49
  %547 = bitcast i32 %546 to float, !dbg !49
  %548 = fsub float %541, %533, !dbg !35
  %549 = fadd float %528, %547, !dbg !38
  %550 = fcmp oeq float %549, 0.000000e+00, !dbg !39
  %551 = tail call float @llvm.nvvm.div.full(float %547, float %549), !dbg !40
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !41
  %553 = fmul float %552, %548, !dbg !42
  %554 = fadd float %533, %553, !dbg !43
  %555 = fadd float %538, %544, !dbg !44
  %556 = fmul float %548, %548, !dbg !45
  %557 = fmul float %528, %556, !dbg !46
  %558 = fmul float %552, %557, !dbg !47
  %559 = fadd float %555, %558, !dbg !48
  %560 = bitcast float %554 to i32, !dbg !49
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 4, i32 31), !dbg !49
  %562 = bitcast i32 %561 to float, !dbg !49
  %563 = bitcast float %559 to i32, !dbg !49
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 4, i32 31), !dbg !49
  %565 = bitcast i32 %564 to float, !dbg !49
  %566 = bitcast float %549 to i32, !dbg !49
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 4, i32 31), !dbg !49
  %568 = bitcast i32 %567 to float, !dbg !49
  %569 = fsub float %562, %554, !dbg !35
  %570 = fadd float %549, %568, !dbg !38
  %571 = fcmp oeq float %570, 0.000000e+00, !dbg !39
  %572 = tail call float @llvm.nvvm.div.full(float %568, float %570), !dbg !40
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !41
  %574 = fmul float %573, %569, !dbg !42
  %575 = fadd float %554, %574, !dbg !43
  %576 = fadd float %559, %565, !dbg !44
  %577 = fmul float %569, %569, !dbg !45
  %578 = fmul float %549, %577, !dbg !46
  %579 = fmul float %573, %578, !dbg !47
  %580 = fadd float %576, %579, !dbg !48
  %581 = bitcast float %575 to i32, !dbg !49
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 2, i32 31), !dbg !49
  %583 = bitcast i32 %582 to float, !dbg !49
  %584 = bitcast float %580 to i32, !dbg !49
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 2, i32 31), !dbg !49
  %586 = bitcast i32 %585 to float, !dbg !49
  %587 = bitcast float %570 to i32, !dbg !49
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 2, i32 31), !dbg !49
  %589 = bitcast i32 %588 to float, !dbg !49
  %590 = fsub float %583, %575, !dbg !35
  %591 = fadd float %570, %589, !dbg !38
  %592 = fcmp oeq float %591, 0.000000e+00, !dbg !39
  %593 = tail call float @llvm.nvvm.div.full(float %589, float %591), !dbg !40
  %594 = select i1 %592, float 0.000000e+00, float %593, !dbg !41
  %595 = fmul float %594, %590, !dbg !42
  %596 = fadd float %575, %595, !dbg !43
  %597 = fadd float %580, %586, !dbg !44
  %598 = fmul float %590, %590, !dbg !45
  %599 = fmul float %570, %598, !dbg !46
  %600 = fmul float %594, %599, !dbg !47
  %601 = fadd float %597, %600, !dbg !48
  %602 = bitcast float %596 to i32, !dbg !49
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 1, i32 31), !dbg !49
  %604 = bitcast i32 %603 to float, !dbg !49
  %605 = bitcast float %601 to i32, !dbg !49
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 1, i32 31), !dbg !49
  %607 = bitcast i32 %606 to float, !dbg !49
  %608 = bitcast float %591 to i32, !dbg !49
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 1, i32 31), !dbg !49
  %610 = bitcast i32 %609 to float, !dbg !49
  %611 = fsub float %604, %596, !dbg !35
  %612 = fadd float %591, %610, !dbg !38
  %613 = fcmp oeq float %612, 0.000000e+00, !dbg !39
  %614 = tail call float @llvm.nvvm.div.full(float %610, float %612), !dbg !40
  %615 = select i1 %613, float 0.000000e+00, float %614, !dbg !41
  %616 = fmul float %615, %611, !dbg !42
  %617 = fadd float %596, %616, !dbg !43
  %618 = fadd float %601, %607, !dbg !44
  %619 = fmul float %611, %611, !dbg !45
  %620 = fmul float %591, %619, !dbg !46
  %621 = fmul float %615, %620, !dbg !47
  %622 = fadd float %618, %621, !dbg !48
  %623 = and i32 %336, 3, !dbg !49
  %624 = icmp eq i32 %23, 0, !dbg !49
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !49
  %626 = bitcast float %617 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %626, i1 %624) #5, !dbg !49
  %627 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %623, !dbg !49
  %628 = bitcast float %622 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %628, i1 %624) #5, !dbg !49
  %629 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %623, !dbg !49
  %630 = bitcast float %612 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %630, i1 %624) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %631 = icmp slt i32 %22, 4, !dbg !49
  %632 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !49
  %633 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %632, i1 %631) #5, !dbg !49
  %634 = bitcast i32 %633 to float, !dbg !49
  %635 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %22, !dbg !49
  %636 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %635, i1 %631) #5, !dbg !49
  %637 = bitcast i32 %636 to float, !dbg !49
  %638 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %22, !dbg !49
  %639 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %631) #5, !dbg !49
  %640 = bitcast i32 %639 to float, !dbg !49
  %641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 2, i32 31), !dbg !49
  %642 = bitcast i32 %641 to float, !dbg !49
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 2, i32 31), !dbg !49
  %644 = bitcast i32 %643 to float, !dbg !49
  %645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !49
  %646 = bitcast i32 %645 to float, !dbg !49
  %647 = fsub float %642, %634, !dbg !35
  %648 = fadd float %640, %646, !dbg !38
  %649 = fcmp oeq float %648, 0.000000e+00, !dbg !39
  %650 = tail call float @llvm.nvvm.div.full(float %646, float %648), !dbg !40
  %651 = select i1 %649, float 0.000000e+00, float %650, !dbg !41
  %652 = fmul float %647, %651, !dbg !42
  %653 = fadd float %652, %634, !dbg !43
  %654 = fadd float %637, %644, !dbg !44
  %655 = fmul float %647, %647, !dbg !45
  %656 = fmul float %655, %640, !dbg !46
  %657 = fmul float %656, %651, !dbg !47
  %658 = fadd float %654, %657, !dbg !48
  %659 = bitcast float %653 to i32, !dbg !49
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 1, i32 31), !dbg !49
  %661 = bitcast i32 %660 to float, !dbg !49
  %662 = bitcast float %658 to i32, !dbg !49
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 1, i32 31), !dbg !49
  %664 = bitcast i32 %663 to float, !dbg !49
  %665 = bitcast float %648 to i32, !dbg !49
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 1, i32 31), !dbg !49
  %667 = bitcast i32 %666 to float, !dbg !49
  %668 = fsub float %661, %653, !dbg !35
  %669 = fadd float %648, %667, !dbg !38
  %670 = fcmp oeq float %669, 0.000000e+00, !dbg !39
  %671 = tail call float @llvm.nvvm.div.full(float %667, float %669), !dbg !40
  %672 = select i1 %670, float 0.000000e+00, float %671, !dbg !41
  %673 = fmul float %668, %672, !dbg !42
  %674 = fadd float %653, %673, !dbg !43
  %675 = fadd float %658, %664, !dbg !44
  %676 = fmul float %668, %668, !dbg !45
  %677 = fmul float %648, %676, !dbg !46
  %678 = fmul float %672, %677, !dbg !47
  %679 = fadd float %675, %678, !dbg !48
  %680 = and i32 %22, 3, !dbg !49
  %681 = icmp eq i32 %680, 0, !dbg !49
  %682 = and i1 %631, %681, !dbg !49
  %683 = bitcast float %674 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %683, i1 %682) #5, !dbg !49
  %684 = bitcast float %679 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %684, i1 %682) #5, !dbg !49
  %685 = bitcast float %669 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %685, i1 %682) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %686 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %687 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !49
  %688 = tail call float @llvm.nvvm.div.full(float %687, float 3.072000e+03), !dbg !50
  %689 = fadd float %688, 0x3EB0C6F7A0000000, !dbg !51
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %693 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %694 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %695 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %696 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %704 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %705 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i99 = icmp eq i32 %705, 0, !dbg !52
  br i1 %.not.i99, label %708, label %706, !dbg !52

706:                                              ; preds = %__nv_rsqrtf.exit
  %707 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %689), !dbg !52
  br label %__nv_rsqrtf.exit101, !dbg !52

708:                                              ; preds = %__nv_rsqrtf.exit
  %709 = tail call float @llvm.nvvm.rsqrt.approx.f(float %689), !dbg !52
  br label %__nv_rsqrtf.exit101, !dbg !52

__nv_rsqrtf.exit101:                              ; preds = %706, %708
  %.0.i100 = phi float [ %707, %706 ], [ %709, %708 ], !dbg !52
  %710 = or disjoint i32 %28, %29
  %711 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25
  %712 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %713 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %714 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %337
  %715 = zext nneg i32 %337 to i64, !dbg !53
  %716 = zext nneg i32 %26 to i64, !dbg !53
  %717 = insertelement <2 x float> poison, float %.0.i100, i64 0, !dbg !54
  %718 = shufflevector <2 x float> %717, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %719 = insertelement <2 x float> poison, float %686, i64 0, !dbg !55
  %720 = shufflevector <2 x float> %719, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %721 = insertelement <8 x float> poison, float %.0.i100, i64 0, !dbg !54
  %722 = shufflevector <8 x float> %721, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !54
  %723 = insertelement <8 x float> poison, float %686, i64 0, !dbg !55
  %724 = shufflevector <8 x float> %723, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !55
  %725 = insertelement <4 x float> poison, float %.0.i100, i64 0, !dbg !54
  %726 = shufflevector <4 x float> %725, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  %727 = insertelement <4 x float> poison, float %686, i64 0, !dbg !55
  %728 = shufflevector <4 x float> %727, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !55
  %729 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 4
  %730 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 8
  %731 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 12
  br label %732, !dbg !53

732:                                              ; preds = %__nv_rsqrtf.exit101, %732
  %733 = phi i1 [ true, %__nv_rsqrtf.exit101 ], [ false, %732 ]
  %indvars.iv199 = phi i64 [ 0, %__nv_rsqrtf.exit101 ], [ 2048, %732 ]
  %734 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit101 ], [ %1018, %732 ]
  %735 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit101 ], [ %1019, %732 ]
  %736 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit101 ], [ %1038, %732 ]
  %737 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit101 ], [ %1041, %732 ]
  %738 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit101 ], [ %1025, %732 ]
  %739 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit101 ], [ %1022, %732 ]
  %740 = or disjoint i64 %indvars.iv199, %31, !dbg !56
  %741 = or disjoint i64 %740, 4, !dbg !56
  %742 = or disjoint i64 %indvars.iv199, %716, !dbg !56
  %743 = or disjoint i64 %740, 12, !dbg !56
  %744 = or disjoint i64 %indvars.iv199, %715, !dbg !56
  %745 = icmp samesign ult i64 %740, 3072, !dbg !57
  %746 = icmp samesign ult i64 %744, 3072, !dbg !57
  %747 = trunc nuw nsw i64 %740 to i32, !dbg !58
  %748 = add i32 %29, %747, !dbg !58
  %749 = trunc nuw nsw i64 %742 to i32, !dbg !58
  %750 = add i32 %29, %749, !dbg !58
  %751 = trunc nuw nsw i64 %indvars.iv199 to i32, !dbg !58
  %752 = add i32 %710, %751, !dbg !58
  %753 = trunc nuw nsw i64 %744 to i32, !dbg !58
  %754 = add i32 %29, %753, !dbg !58
  %755 = sext i32 %748 to i64, !dbg !59
  %756 = getelementptr bfloat, ptr addrspace(1) %0, i64 %755, !dbg !59
  %757 = sext i32 %750 to i64, !dbg !59
  %758 = getelementptr bfloat, ptr addrspace(1) %0, i64 %757, !dbg !59
  %759 = and i1 %21, %745, !dbg !60
  %760 = and i1 %21, %746, !dbg !60
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %756, i1 %759) #5, !dbg !61
  %762 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !61
  %763 = bitcast i32 %762 to <2 x bfloat>, !dbg !61
  %764 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !61
  %765 = bitcast i32 %764 to <2 x bfloat>, !dbg !61
  %766 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !61
  %767 = bitcast i32 %766 to <2 x bfloat>, !dbg !61
  %768 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !61
  %769 = bitcast i32 %768 to <2 x bfloat>, !dbg !61
  %770 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %758, i1 %759) #5, !dbg !61
  %771 = extractvalue { i32, i32, i32, i32 } %770, 0, !dbg !61
  %772 = bitcast i32 %771 to <2 x bfloat>, !dbg !61
  %773 = extractvalue { i32, i32, i32, i32 } %770, 1, !dbg !61
  %774 = bitcast i32 %773 to <2 x bfloat>, !dbg !61
  %775 = extractvalue { i32, i32, i32, i32 } %770, 2, !dbg !61
  %776 = bitcast i32 %775 to <2 x bfloat>, !dbg !61
  %777 = extractvalue { i32, i32, i32, i32 } %770, 3, !dbg !61
  %778 = bitcast i32 %777 to <2 x bfloat>, !dbg !61
  %779 = add nuw nsw i64 %740, 3072, !dbg !62
  %780 = add nuw nsw i64 %742, 3072, !dbg !62
  %781 = getelementptr float, ptr addrspace(1) %1, i64 %779, !dbg !63
  %782 = getelementptr float, ptr addrspace(1) %1, i64 %741, !dbg !63
  %783 = getelementptr i8, ptr addrspace(1) %782, i64 12288, !dbg !63
  %784 = getelementptr float, ptr addrspace(1) %1, i64 %780, !dbg !63
  %785 = getelementptr float, ptr addrspace(1) %1, i64 %743, !dbg !63
  %786 = getelementptr i8, ptr addrspace(1) %785, i64 12288, !dbg !63
  %787 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %781, i1 %745) #5, !dbg !64
  %788 = extractvalue { i32, i32, i32, i32 } %787, 0, !dbg !64
  %789 = extractvalue { i32, i32, i32, i32 } %787, 1, !dbg !64
  %790 = extractvalue { i32, i32, i32, i32 } %787, 2, !dbg !64
  %791 = extractvalue { i32, i32, i32, i32 } %787, 3, !dbg !64
  %792 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %783, i1 %745) #5, !dbg !64
  %793 = extractvalue { i32, i32, i32, i32 } %792, 0, !dbg !64
  %794 = extractvalue { i32, i32, i32, i32 } %792, 1, !dbg !64
  %795 = extractvalue { i32, i32, i32, i32 } %792, 2, !dbg !64
  %796 = extractvalue { i32, i32, i32, i32 } %792, 3, !dbg !64
  %797 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %784, i1 %745) #5, !dbg !64
  %798 = extractvalue { i32, i32, i32, i32 } %797, 0, !dbg !64
  %799 = extractvalue { i32, i32, i32, i32 } %797, 1, !dbg !64
  %800 = extractvalue { i32, i32, i32, i32 } %797, 2, !dbg !64
  %801 = extractvalue { i32, i32, i32, i32 } %797, 3, !dbg !64
  %802 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %786, i1 %745) #5, !dbg !64
  %803 = extractvalue { i32, i32, i32, i32 } %802, 0, !dbg !64
  %804 = extractvalue { i32, i32, i32, i32 } %802, 1, !dbg !64
  %805 = extractvalue { i32, i32, i32, i32 } %802, 2, !dbg !64
  %806 = extractvalue { i32, i32, i32, i32 } %802, 3, !dbg !64
  %807 = getelementptr bfloat, ptr addrspace(1) %2, i64 %779, !dbg !65
  %808 = getelementptr bfloat, ptr addrspace(1) %2, i64 %780, !dbg !65
  %809 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %807, i1 %745) #5, !dbg !66
  %810 = extractvalue { i32, i32, i32, i32 } %809, 0, !dbg !66
  %811 = bitcast i32 %810 to <2 x bfloat>, !dbg !66
  %812 = extractvalue { i32, i32, i32, i32 } %809, 1, !dbg !66
  %813 = bitcast i32 %812 to <2 x bfloat>, !dbg !66
  %814 = extractvalue { i32, i32, i32, i32 } %809, 2, !dbg !66
  %815 = bitcast i32 %814 to <2 x bfloat>, !dbg !66
  %816 = extractvalue { i32, i32, i32, i32 } %809, 3, !dbg !66
  %817 = bitcast i32 %816 to <2 x bfloat>, !dbg !66
  %818 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %808, i1 %745) #5, !dbg !66
  %819 = extractvalue { i32, i32, i32, i32 } %818, 0, !dbg !66
  %820 = bitcast i32 %819 to <2 x bfloat>, !dbg !66
  %821 = extractvalue { i32, i32, i32, i32 } %818, 1, !dbg !66
  %822 = bitcast i32 %821 to <2 x bfloat>, !dbg !66
  %823 = extractvalue { i32, i32, i32, i32 } %818, 2, !dbg !66
  %824 = bitcast i32 %823 to <2 x bfloat>, !dbg !66
  %825 = extractvalue { i32, i32, i32, i32 } %818, 3, !dbg !66
  %826 = bitcast i32 %825 to <2 x bfloat>, !dbg !66
  %827 = getelementptr float, ptr addrspace(1) %1, i64 %740, !dbg !67
  %828 = getelementptr float, ptr addrspace(1) %1, i64 %742, !dbg !67
  %829 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %827, i1 %745) #5, !dbg !68
  %830 = extractvalue { i32, i32, i32, i32 } %829, 0, !dbg !68
  %831 = extractvalue { i32, i32, i32, i32 } %829, 1, !dbg !68
  %832 = extractvalue { i32, i32, i32, i32 } %829, 2, !dbg !68
  %833 = extractvalue { i32, i32, i32, i32 } %829, 3, !dbg !68
  %834 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %782, i1 %745) #5, !dbg !68
  %835 = extractvalue { i32, i32, i32, i32 } %834, 0, !dbg !68
  %836 = extractvalue { i32, i32, i32, i32 } %834, 1, !dbg !68
  %837 = extractvalue { i32, i32, i32, i32 } %834, 2, !dbg !68
  %838 = extractvalue { i32, i32, i32, i32 } %834, 3, !dbg !68
  %839 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %828, i1 %745) #5, !dbg !68
  %840 = extractvalue { i32, i32, i32, i32 } %839, 0, !dbg !68
  %841 = extractvalue { i32, i32, i32, i32 } %839, 1, !dbg !68
  %842 = extractvalue { i32, i32, i32, i32 } %839, 2, !dbg !68
  %843 = extractvalue { i32, i32, i32, i32 } %839, 3, !dbg !68
  %844 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %785, i1 %745) #5, !dbg !68
  %845 = extractvalue { i32, i32, i32, i32 } %844, 0, !dbg !68
  %846 = extractvalue { i32, i32, i32, i32 } %844, 1, !dbg !68
  %847 = extractvalue { i32, i32, i32, i32 } %844, 2, !dbg !68
  %848 = extractvalue { i32, i32, i32, i32 } %844, 3, !dbg !68
  %849 = getelementptr bfloat, ptr addrspace(1) %2, i64 %740, !dbg !69
  %850 = getelementptr bfloat, ptr addrspace(1) %2, i64 %742, !dbg !69
  %851 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %849, i1 %745) #5, !dbg !70
  %852 = extractvalue { i32, i32, i32, i32 } %851, 0, !dbg !70
  %853 = bitcast i32 %852 to <2 x bfloat>, !dbg !70
  %854 = extractvalue { i32, i32, i32, i32 } %851, 1, !dbg !70
  %855 = bitcast i32 %854 to <2 x bfloat>, !dbg !70
  %856 = extractvalue { i32, i32, i32, i32 } %851, 2, !dbg !70
  %857 = bitcast i32 %856 to <2 x bfloat>, !dbg !70
  %858 = extractvalue { i32, i32, i32, i32 } %851, 3, !dbg !70
  %859 = bitcast i32 %858 to <2 x bfloat>, !dbg !70
  %860 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %850, i1 %745) #5, !dbg !70
  %861 = extractvalue { i32, i32, i32, i32 } %860, 0, !dbg !70
  %862 = bitcast i32 %861 to <2 x bfloat>, !dbg !70
  %863 = extractvalue { i32, i32, i32, i32 } %860, 1, !dbg !70
  %864 = bitcast i32 %863 to <2 x bfloat>, !dbg !70
  %865 = extractvalue { i32, i32, i32, i32 } %860, 2, !dbg !70
  %866 = bitcast i32 %865 to <2 x bfloat>, !dbg !70
  %867 = extractvalue { i32, i32, i32, i32 } %860, 3, !dbg !70
  %868 = bitcast i32 %867 to <2 x bfloat>, !dbg !70
  %869 = fpext <2 x bfloat> %778 to <2 x float>, !dbg !71
  %870 = insertelement <2 x i32> poison, i32 %805, i64 0, !dbg !64
  %871 = insertelement <2 x i32> %870, i32 %806, i64 1, !dbg !64
  %872 = bitcast <2 x i32> %871 to <2 x float>, !dbg !64
  %873 = fpext <2 x bfloat> %826 to <2 x float>, !dbg !72
  %874 = insertelement <2 x i32> poison, i32 %847, i64 0, !dbg !68
  %875 = insertelement <2 x i32> %874, i32 %848, i64 1, !dbg !68
  %876 = bitcast <2 x i32> %875 to <2 x float>, !dbg !68
  %877 = fpext <2 x bfloat> %868 to <2 x float>, !dbg !73
  %878 = fsub <2 x float> %869, %720, !dbg !55
  %879 = fmul <2 x float> %718, %878, !dbg !54
  %880 = fadd <2 x float> %872, %873, !dbg !74
  %881 = fadd <2 x float> %880, splat (float 1.000000e+00), !dbg !75
  %882 = fmul <2 x float> %879, %881, !dbg !76
  %883 = fadd <2 x float> %876, %877, !dbg !77
  %884 = fadd <2 x float> %882, %883, !dbg !78
  %885 = extractelement <2 x float> %884, i64 0, !dbg !79
  %886 = extractelement <2 x float> %884, i64 1, !dbg !79
  %887 = fcmp uno <16 x float> %737, zeroinitializer, !dbg !80
  %888 = fcmp uno float %734, 0.000000e+00, !dbg !82
  %889 = fcmp uno float %735, 0.000000e+00, !dbg !82
  %890 = fcmp uno <4 x float> %739, zeroinitializer, !dbg !82
  %891 = fcmp uno <8 x float> %738, zeroinitializer, !dbg !82
  %892 = fcmp uno <2 x float> %736, zeroinitializer, !dbg !80
  %893 = fpext <2 x bfloat> %763 to <2 x float>, !dbg !71
  %894 = insertelement <2 x i32> poison, i32 %788, i64 0, !dbg !64
  %895 = insertelement <2 x i32> %894, i32 %789, i64 1, !dbg !64
  %896 = bitcast <2 x i32> %895 to <2 x float>, !dbg !64
  %897 = fpext <2 x bfloat> %811 to <2 x float>, !dbg !72
  %898 = insertelement <2 x i32> poison, i32 %830, i64 0, !dbg !68
  %899 = insertelement <2 x i32> %898, i32 %831, i64 1, !dbg !68
  %900 = bitcast <2 x i32> %899 to <2 x float>, !dbg !68
  %901 = fpext <2 x bfloat> %853 to <2 x float>, !dbg !73
  %902 = fsub <2 x float> %893, %720, !dbg !55
  %903 = fmul <2 x float> %718, %902, !dbg !54
  %904 = fadd <2 x float> %896, %897, !dbg !74
  %905 = fadd <2 x float> %904, splat (float 1.000000e+00), !dbg !75
  %906 = fmul <2 x float> %903, %905, !dbg !76
  %907 = fadd <2 x float> %900, %901, !dbg !77
  %908 = fadd <2 x float> %906, %907, !dbg !78
  %909 = fcmp ogt <2 x float> %736, %908, !dbg !84
  %910 = or <2 x i1> %892, %909, !dbg !85
  %911 = select <2 x i1> %910, <2 x float> %736, <2 x float> %908, !dbg !86
  %912 = shufflevector <2 x bfloat> %765, <2 x bfloat> %767, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %913 = shufflevector <2 x bfloat> %769, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %914 = shufflevector <8 x bfloat> %912, <8 x bfloat> %913, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !71
  %915 = shufflevector <2 x bfloat> %769, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %916 = shufflevector <8 x bfloat> %914, <8 x bfloat> %915, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !71
  %917 = shufflevector <2 x bfloat> %772, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %918 = shufflevector <8 x bfloat> %916, <8 x bfloat> %917, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !71
  %919 = shufflevector <2 x bfloat> %772, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !71
  %920 = shufflevector <8 x bfloat> %918, <8 x bfloat> %919, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !71
  %921 = fpext <8 x bfloat> %920 to <8 x float>, !dbg !71
  %922 = shufflevector <2 x bfloat> %774, <2 x bfloat> %776, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !71
  %923 = fpext <4 x bfloat> %922 to <4 x float>, !dbg !71
  %924 = insertelement <8 x i32> poison, i32 %790, i64 0, !dbg !64
  %925 = insertelement <8 x i32> %924, i32 %791, i64 1, !dbg !64
  %926 = insertelement <8 x i32> %925, i32 %793, i64 2, !dbg !64
  %927 = insertelement <8 x i32> %926, i32 %794, i64 3, !dbg !64
  %928 = insertelement <8 x i32> %927, i32 %795, i64 4, !dbg !64
  %929 = insertelement <8 x i32> %928, i32 %796, i64 5, !dbg !64
  %930 = insertelement <8 x i32> %929, i32 %798, i64 6, !dbg !64
  %931 = insertelement <8 x i32> %930, i32 %799, i64 7, !dbg !64
  %932 = bitcast <8 x i32> %931 to <8 x float>, !dbg !64
  %933 = insertelement <4 x i32> poison, i32 %800, i64 0, !dbg !64
  %934 = insertelement <4 x i32> %933, i32 %801, i64 1, !dbg !64
  %935 = insertelement <4 x i32> %934, i32 %803, i64 2, !dbg !64
  %936 = insertelement <4 x i32> %935, i32 %804, i64 3, !dbg !64
  %937 = bitcast <4 x i32> %936 to <4 x float>, !dbg !64
  %938 = shufflevector <2 x bfloat> %813, <2 x bfloat> %815, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %939 = shufflevector <2 x bfloat> %817, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %940 = shufflevector <8 x bfloat> %938, <8 x bfloat> %939, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !72
  %941 = shufflevector <2 x bfloat> %817, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %942 = shufflevector <8 x bfloat> %940, <8 x bfloat> %941, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !72
  %943 = shufflevector <2 x bfloat> %820, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %944 = shufflevector <8 x bfloat> %942, <8 x bfloat> %943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !72
  %945 = shufflevector <2 x bfloat> %820, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %946 = shufflevector <8 x bfloat> %944, <8 x bfloat> %945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !72
  %947 = fpext <8 x bfloat> %946 to <8 x float>, !dbg !72
  %948 = shufflevector <2 x bfloat> %822, <2 x bfloat> %824, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !72
  %949 = fpext <4 x bfloat> %948 to <4 x float>, !dbg !72
  %950 = insertelement <8 x i32> poison, i32 %832, i64 0, !dbg !68
  %951 = insertelement <8 x i32> %950, i32 %833, i64 1, !dbg !68
  %952 = insertelement <8 x i32> %951, i32 %835, i64 2, !dbg !68
  %953 = insertelement <8 x i32> %952, i32 %836, i64 3, !dbg !68
  %954 = insertelement <8 x i32> %953, i32 %837, i64 4, !dbg !68
  %955 = insertelement <8 x i32> %954, i32 %838, i64 5, !dbg !68
  %956 = insertelement <8 x i32> %955, i32 %840, i64 6, !dbg !68
  %957 = insertelement <8 x i32> %956, i32 %841, i64 7, !dbg !68
  %958 = bitcast <8 x i32> %957 to <8 x float>, !dbg !68
  %959 = insertelement <4 x i32> poison, i32 %842, i64 0, !dbg !68
  %960 = insertelement <4 x i32> %959, i32 %843, i64 1, !dbg !68
  %961 = insertelement <4 x i32> %960, i32 %845, i64 2, !dbg !68
  %962 = insertelement <4 x i32> %961, i32 %846, i64 3, !dbg !68
  %963 = bitcast <4 x i32> %962 to <4 x float>, !dbg !68
  %964 = shufflevector <2 x bfloat> %855, <2 x bfloat> %857, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %965 = shufflevector <2 x bfloat> %859, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %966 = shufflevector <8 x bfloat> %964, <8 x bfloat> %965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !73
  %967 = shufflevector <2 x bfloat> %859, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %968 = shufflevector <8 x bfloat> %966, <8 x bfloat> %967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !73
  %969 = shufflevector <2 x bfloat> %862, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %970 = shufflevector <8 x bfloat> %968, <8 x bfloat> %969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !73
  %971 = shufflevector <2 x bfloat> %862, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !73
  %972 = shufflevector <8 x bfloat> %970, <8 x bfloat> %971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !73
  %973 = fpext <8 x bfloat> %972 to <8 x float>, !dbg !73
  %974 = shufflevector <2 x bfloat> %864, <2 x bfloat> %866, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !73
  %975 = fpext <4 x bfloat> %974 to <4 x float>, !dbg !73
  %976 = fsub <8 x float> %921, %724, !dbg !55
  %977 = fsub <4 x float> %923, %728, !dbg !55
  %978 = fmul <8 x float> %722, %976, !dbg !54
  %979 = fmul <4 x float> %726, %977, !dbg !54
  %980 = fadd <8 x float> %932, %947, !dbg !74
  %981 = fadd <4 x float> %937, %949, !dbg !74
  %982 = fadd <8 x float> %980, splat (float 1.000000e+00), !dbg !75
  %983 = fadd <4 x float> %981, splat (float 1.000000e+00), !dbg !75
  %984 = fmul <8 x float> %978, %982, !dbg !76
  %985 = fmul <4 x float> %979, %983, !dbg !76
  %986 = fadd <8 x float> %958, %973, !dbg !77
  %987 = fadd <4 x float> %963, %975, !dbg !77
  %988 = fadd <8 x float> %984, %986, !dbg !78
  %989 = fadd <4 x float> %985, %987, !dbg !78
  %990 = extractelement <8 x float> %988, i64 0, !dbg !79
  %991 = fcmp olt float %734, %990, !dbg !87
  %992 = extractelement <8 x float> %988, i64 1, !dbg !79
  %993 = fcmp olt float %735, %992, !dbg !87
  %994 = extractelement <8 x float> %988, i64 2, !dbg !79
  %995 = extractelement <8 x float> %988, i64 3, !dbg !79
  %996 = extractelement <8 x float> %988, i64 4, !dbg !79
  %997 = extractelement <8 x float> %988, i64 5, !dbg !79
  %998 = extractelement <8 x float> %988, i64 6, !dbg !79
  %999 = extractelement <8 x float> %988, i64 7, !dbg !79
  %1000 = extractelement <4 x float> %989, i64 0, !dbg !79
  %1001 = extractelement <4 x float> %989, i64 1, !dbg !79
  %1002 = extractelement <4 x float> %989, i64 2, !dbg !79
  %1003 = extractelement <4 x float> %989, i64 3, !dbg !79
  %1004 = or i1 %888, %991, !dbg !88
  %1005 = or i1 %889, %993, !dbg !88
  %1006 = select i1 %1004, float %734, float %990, !dbg !89
  %1007 = select i1 %1005, float %735, float %992, !dbg !89
  %1008 = shufflevector <2 x float> %884, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1009 = shufflevector <8 x float> %1008, <8 x float> %988, <4 x i32> <i32 1, i32 0, i32 11, i32 10>, !dbg !87
  %1010 = fcmp olt <4 x float> %739, %1009, !dbg !87
  %1011 = or <4 x i1> %890, %1010, !dbg !88
  %1012 = select <4 x i1> %1011, <4 x float> %739, <4 x float> %1009, !dbg !89
  %1013 = shufflevector <4 x float> %989, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1014 = shufflevector <8 x float> %1013, <8 x float> %988, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 15, i32 14, i32 13, i32 12>, !dbg !87
  %1015 = fcmp olt <8 x float> %738, %1014, !dbg !87
  %1016 = or <8 x i1> %891, %1015, !dbg !88
  %1017 = select <8 x i1> %1016, <8 x float> %738, <8 x float> %1014, !dbg !89
  %1018 = select i1 %759, float %1006, float %734, !dbg !90
  %1019 = select i1 %759, float %1007, float %735, !dbg !90
  %1020 = insertelement <4 x i1> poison, i1 %759, i64 0, !dbg !90
  %1021 = shufflevector <4 x i1> %1020, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !90
  %1022 = select <4 x i1> %1021, <4 x float> %1012, <4 x float> %739, !dbg !90
  %1023 = insertelement <8 x i1> poison, i1 %759, i64 0, !dbg !90
  %1024 = shufflevector <8 x i1> %1023, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !90
  %1025 = select <8 x i1> %1024, <8 x float> %1017, <8 x float> %738, !dbg !90
  %1026 = shufflevector <2 x float> %884, <2 x float> %908, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %1027 = shufflevector <8 x float> %988, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1028 = shufflevector <16 x float> %1027, <16 x float> %1026, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1029 = shufflevector <4 x float> %989, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1030 = shufflevector <16 x float> %1028, <16 x float> %1029, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !84
  %1031 = fcmp ogt <16 x float> %737, %1030, !dbg !84
  %1032 = fcmp olt <16 x float> %737, %1030, !dbg !84
  %1033 = shufflevector <16 x i1> %1031, <16 x i1> %1032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !84
  %1034 = or <16 x i1> %887, %1033, !dbg !85
  %1035 = select <16 x i1> %1034, <16 x float> %737, <16 x float> %1030, !dbg !86
  %1036 = insertelement <2 x i1> poison, i1 %759, i64 0, !dbg !91
  %1037 = shufflevector <2 x i1> %1036, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !91
  %1038 = select <2 x i1> %1037, <2 x float> %911, <2 x float> %736, !dbg !91
  %1039 = insertelement <16 x i1> poison, i1 %759, i64 0, !dbg !91
  %1040 = shufflevector <16 x i1> %1039, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !91
  %1041 = select <16 x i1> %1040, <16 x float> %1035, <16 x float> %737, !dbg !91
  %1042 = sext i32 %752 to i64, !dbg !92
  %1043 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1042, !dbg !92
  %1044 = sext i32 %754 to i64, !dbg !92
  %1045 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1044, !dbg !92
  %1046 = fptrunc <2 x float> %908 to <2 x bfloat>, !dbg !79
  %1047 = fptrunc float %990 to bfloat, !dbg !79
  %1048 = fptrunc float %992 to bfloat, !dbg !79
  %1049 = fptrunc float %994 to bfloat, !dbg !79
  %1050 = fptrunc float %995 to bfloat, !dbg !79
  %1051 = fptrunc float %996 to bfloat, !dbg !79
  %1052 = fptrunc float %997 to bfloat, !dbg !79
  %1053 = fptrunc float %998 to bfloat, !dbg !79
  %1054 = fptrunc float %999 to bfloat, !dbg !79
  %1055 = fptrunc float %1000 to bfloat, !dbg !79
  %1056 = fptrunc float %1001 to bfloat, !dbg !79
  %1057 = fptrunc float %1002 to bfloat, !dbg !79
  %1058 = fptrunc float %1003 to bfloat, !dbg !79
  %1059 = fptrunc float %885 to bfloat, !dbg !79
  %1060 = fptrunc float %886 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1061 = bitcast <2 x bfloat> %1046 to i32, !dbg !79
  %1062 = insertelement <2 x bfloat> poison, bfloat %1047, i64 0, !dbg !79
  %1063 = insertelement <2 x bfloat> %1062, bfloat %1048, i64 1, !dbg !79
  %1064 = bitcast <2 x bfloat> %1063 to i32, !dbg !79
  %1065 = insertelement <2 x bfloat> poison, bfloat %1049, i64 0, !dbg !79
  %1066 = insertelement <2 x bfloat> %1065, bfloat %1050, i64 1, !dbg !79
  %1067 = bitcast <2 x bfloat> %1066 to i32, !dbg !79
  %1068 = insertelement <2 x bfloat> poison, bfloat %1051, i64 0, !dbg !79
  %1069 = insertelement <2 x bfloat> %1068, bfloat %1052, i64 1, !dbg !79
  %1070 = bitcast <2 x bfloat> %1069 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %711, i32 %1061, i32 %1064, i32 %1067, i32 %1070, i1 true) #5, !dbg !79
  %1071 = insertelement <2 x bfloat> poison, bfloat %1053, i64 0, !dbg !79
  %1072 = insertelement <2 x bfloat> %1071, bfloat %1054, i64 1, !dbg !79
  %1073 = bitcast <2 x bfloat> %1072 to i32, !dbg !79
  %1074 = insertelement <2 x bfloat> poison, bfloat %1055, i64 0, !dbg !79
  %1075 = insertelement <2 x bfloat> %1074, bfloat %1056, i64 1, !dbg !79
  %1076 = bitcast <2 x bfloat> %1075 to i32, !dbg !79
  %1077 = insertelement <2 x bfloat> poison, bfloat %1057, i64 0, !dbg !79
  %1078 = insertelement <2 x bfloat> %1077, bfloat %1058, i64 1, !dbg !79
  %1079 = bitcast <2 x bfloat> %1078 to i32, !dbg !79
  %1080 = insertelement <2 x bfloat> poison, bfloat %1059, i64 0, !dbg !79
  %1081 = insertelement <2 x bfloat> %1080, bfloat %1060, i64 1, !dbg !79
  %1082 = bitcast <2 x bfloat> %1081 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %712, i32 %1073, i32 %1076, i32 %1079, i32 %1082, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1083 = load <4 x i32>, ptr addrspace(3) %714, align 16, !dbg !79
  %.extract = load i32, ptr addrspace(3) %713, align 16, !dbg !79
  %.extract103 = load i32, ptr addrspace(3) %729, align 4, !dbg !79
  %.extract105 = load i32, ptr addrspace(3) %730, align 8, !dbg !79
  %.extract107 = load i32, ptr addrspace(3) %731, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %1043, i1 %21) #5, !dbg !79
  %.extract109 = extractelement <4 x i32> %1083, i64 0, !dbg !79
  %.extract111 = extractelement <4 x i32> %1083, i64 1, !dbg !79
  %.extract113 = extractelement <4 x i32> %1083, i64 2, !dbg !79
  %.extract115 = extractelement <4 x i32> %1083, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %1045, i1 %760) #5, !dbg !79
  br i1 %733, label %732, label %1084, !dbg !53

1084:                                             ; preds = %732
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1085 = extractelement <16 x float> %1041, i64 14, !dbg !95
  %1086 = extractelement <16 x float> %1041, i64 15, !dbg !95
  %1087 = fcmp olt float %1085, %1086, !dbg !95
  %1088 = fcmp uno float %1085, 0.000000e+00, !dbg !96
  %1089 = or i1 %1087, %1088, !dbg !97
  %1090 = select i1 %1089, float %1085, float %1086, !dbg !98
  %1091 = fcmp olt float %1090, %1018, !dbg !95
  %1092 = fcmp uno float %1090, 0.000000e+00, !dbg !96
  %1093 = or i1 %1091, %1092, !dbg !97
  %1094 = select i1 %1093, float %1090, float %1018, !dbg !98
  %1095 = fcmp olt float %1094, %1019, !dbg !95
  %1096 = fcmp uno float %1094, 0.000000e+00, !dbg !96
  %1097 = or i1 %1095, %1096, !dbg !97
  %1098 = select i1 %1097, float %1094, float %1019, !dbg !98
  %1099 = extractelement <4 x float> %1022, i64 3, !dbg !95
  %1100 = fcmp olt float %1098, %1099, !dbg !95
  %1101 = fcmp uno float %1098, 0.000000e+00, !dbg !96
  %1102 = or i1 %1100, %1101, !dbg !97
  %1103 = select i1 %1102, float %1098, float %1099, !dbg !98
  %1104 = extractelement <4 x float> %1022, i64 2, !dbg !95
  %1105 = fcmp olt float %1103, %1104, !dbg !95
  %1106 = fcmp uno float %1103, 0.000000e+00, !dbg !96
  %1107 = or i1 %1105, %1106, !dbg !97
  %1108 = select i1 %1107, float %1103, float %1104, !dbg !98
  %1109 = extractelement <8 x float> %1025, i64 7, !dbg !95
  %1110 = fcmp olt float %1108, %1109, !dbg !95
  %1111 = fcmp uno float %1108, 0.000000e+00, !dbg !96
  %1112 = or i1 %1110, %1111, !dbg !97
  %1113 = select i1 %1112, float %1108, float %1109, !dbg !98
  %1114 = extractelement <8 x float> %1025, i64 6, !dbg !95
  %1115 = fcmp olt float %1113, %1114, !dbg !95
  %1116 = fcmp uno float %1113, 0.000000e+00, !dbg !96
  %1117 = or i1 %1115, %1116, !dbg !97
  %1118 = select i1 %1117, float %1113, float %1114, !dbg !98
  %1119 = extractelement <8 x float> %1025, i64 5, !dbg !95
  %1120 = fcmp olt float %1118, %1119, !dbg !95
  %1121 = fcmp uno float %1118, 0.000000e+00, !dbg !96
  %1122 = or i1 %1120, %1121, !dbg !97
  %1123 = select i1 %1122, float %1118, float %1119, !dbg !98
  %1124 = extractelement <8 x float> %1025, i64 4, !dbg !95
  %1125 = fcmp olt float %1123, %1124, !dbg !95
  %1126 = fcmp uno float %1123, 0.000000e+00, !dbg !96
  %1127 = or i1 %1125, %1126, !dbg !97
  %1128 = select i1 %1127, float %1123, float %1124, !dbg !98
  %1129 = extractelement <8 x float> %1025, i64 3, !dbg !95
  %1130 = fcmp olt float %1128, %1129, !dbg !95
  %1131 = fcmp uno float %1128, 0.000000e+00, !dbg !96
  %1132 = or i1 %1130, %1131, !dbg !97
  %1133 = select i1 %1132, float %1128, float %1129, !dbg !98
  %1134 = extractelement <8 x float> %1025, i64 2, !dbg !95
  %1135 = fcmp olt float %1133, %1134, !dbg !95
  %1136 = fcmp uno float %1133, 0.000000e+00, !dbg !96
  %1137 = or i1 %1135, %1136, !dbg !97
  %1138 = select i1 %1137, float %1133, float %1134, !dbg !98
  %1139 = extractelement <8 x float> %1025, i64 1, !dbg !95
  %1140 = fcmp olt float %1138, %1139, !dbg !95
  %1141 = fcmp uno float %1138, 0.000000e+00, !dbg !96
  %1142 = or i1 %1140, %1141, !dbg !97
  %1143 = select i1 %1142, float %1138, float %1139, !dbg !98
  %1144 = extractelement <8 x float> %1025, i64 0, !dbg !95
  %1145 = fcmp olt float %1143, %1144, !dbg !95
  %1146 = fcmp uno float %1143, 0.000000e+00, !dbg !96
  %1147 = or i1 %1145, %1146, !dbg !97
  %1148 = select i1 %1147, float %1143, float %1144, !dbg !98
  %1149 = extractelement <4 x float> %1022, i64 1, !dbg !95
  %1150 = fcmp olt float %1148, %1149, !dbg !95
  %1151 = fcmp uno float %1148, 0.000000e+00, !dbg !96
  %1152 = or i1 %1150, %1151, !dbg !97
  %1153 = select i1 %1152, float %1148, float %1149, !dbg !98
  %1154 = extractelement <4 x float> %1022, i64 0, !dbg !95
  %1155 = fcmp olt float %1153, %1154, !dbg !95
  %1156 = fcmp uno float %1153, 0.000000e+00, !dbg !96
  %1157 = or i1 %1155, %1156, !dbg !97
  %1158 = select i1 %1157, float %1153, float %1154, !dbg !98
  %1159 = bitcast float %1158 to i32, !dbg !93
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 16, i32 31), !dbg !93
  %1161 = bitcast i32 %1160 to float, !dbg !93
  %1162 = fcmp olt float %1158, %1161, !dbg !95
  %1163 = fcmp uno float %1158, 0.000000e+00, !dbg !96
  %1164 = or i1 %1163, %1162, !dbg !97
  %1165 = select i1 %1164, float %1158, float %1161, !dbg !98
  %1166 = bitcast float %1165 to i32, !dbg !93
  %1167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1166, i32 8, i32 31), !dbg !93
  %1168 = bitcast i32 %1167 to float, !dbg !93
  %1169 = fcmp olt float %1165, %1168, !dbg !95
  %1170 = fcmp uno float %1165, 0.000000e+00, !dbg !96
  %1171 = or i1 %1169, %1170, !dbg !97
  %1172 = select i1 %1171, float %1165, float %1168, !dbg !98
  %1173 = bitcast float %1172 to i32, !dbg !93
  %1174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1173, i32 4, i32 31), !dbg !93
  %1175 = bitcast i32 %1174 to float, !dbg !93
  %1176 = fcmp olt float %1172, %1175, !dbg !95
  %1177 = fcmp uno float %1172, 0.000000e+00, !dbg !96
  %1178 = or i1 %1176, %1177, !dbg !97
  %1179 = select i1 %1178, float %1172, float %1175, !dbg !98
  %1180 = bitcast float %1179 to i32, !dbg !93
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 2, i32 31), !dbg !93
  %1182 = bitcast i32 %1181 to float, !dbg !93
  %1183 = fcmp olt float %1179, %1182, !dbg !95
  %1184 = fcmp uno float %1179, 0.000000e+00, !dbg !96
  %1185 = or i1 %1183, %1184, !dbg !97
  %1186 = select i1 %1185, float %1179, float %1182, !dbg !98
  %1187 = bitcast float %1186 to i32, !dbg !93
  %1188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1187, i32 1, i32 31), !dbg !93
  %1189 = bitcast i32 %1188 to float, !dbg !93
  %1190 = fcmp olt float %1186, %1189, !dbg !95
  %1191 = fcmp uno float %1186, 0.000000e+00, !dbg !96
  %1192 = or i1 %1190, %1191, !dbg !97
  %1193 = select i1 %1192, i32 %1187, i32 %1188, !dbg !98
  %1194 = insertelement <1 x i32> poison, i32 %1193, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %1194, i1 %624) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1195 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %632, i1 %631) #5, !dbg !93
  %1196 = bitcast i32 %1195 to float, !dbg !93
  %1197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 2, i32 31), !dbg !93
  %1198 = bitcast i32 %1197 to float, !dbg !93
  %1199 = fcmp olt float %1196, %1198, !dbg !95
  %1200 = fcmp uno float %1196, 0.000000e+00, !dbg !96
  %1201 = or i1 %1200, %1199, !dbg !97
  %1202 = select i1 %1201, float %1196, float %1198, !dbg !98
  %1203 = bitcast float %1202 to i32, !dbg !93
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 1, i32 31), !dbg !93
  %1205 = bitcast i32 %1204 to float, !dbg !93
  %1206 = fcmp olt float %1202, %1205, !dbg !95
  %1207 = fcmp uno float %1202, 0.000000e+00, !dbg !96
  %1208 = or i1 %1206, %1207, !dbg !97
  %1209 = select i1 %1208, i32 %1203, i32 %1204, !dbg !98
  %1210 = insertelement <1 x i32> poison, i32 %1209, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %1210, i1 %682) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1211 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1212 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1038, <2 x i32> <i32 0, i32 2>, !dbg !101
  %1213 = fcmp ogt <2 x float> %1212, %1038, !dbg !101
  %1214 = fcmp uno <2 x float> %1212, %1038, !dbg !101
  %shift = shufflevector <2 x i1> %1213, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !102
  %1215 = or <2 x i1> %shift, %1214, !dbg !102
  %1216 = extractelement <2 x i1> %1215, i64 0, !dbg !102
  %1217 = extractelement <2 x float> %1038, i64 0, !dbg !103
  %1218 = extractelement <2 x float> %1038, i64 1, !dbg !103
  %1219 = select i1 %1216, float %1217, float %1218, !dbg !103
  %1220 = extractelement <16 x float> %1041, i64 0, !dbg !101
  %1221 = fcmp ogt float %1219, %1220, !dbg !101
  %1222 = fcmp uno float %1219, 0.000000e+00, !dbg !104
  %1223 = or i1 %1221, %1222, !dbg !102
  %1224 = select i1 %1223, float %1219, float %1220, !dbg !103
  %1225 = extractelement <16 x float> %1041, i64 1, !dbg !101
  %1226 = fcmp ogt float %1224, %1225, !dbg !101
  %1227 = fcmp uno float %1224, 0.000000e+00, !dbg !104
  %1228 = or i1 %1226, %1227, !dbg !102
  %1229 = select i1 %1228, float %1224, float %1225, !dbg !103
  %1230 = extractelement <16 x float> %1041, i64 2, !dbg !101
  %1231 = fcmp ogt float %1229, %1230, !dbg !101
  %1232 = fcmp uno float %1229, 0.000000e+00, !dbg !104
  %1233 = or i1 %1231, %1232, !dbg !102
  %1234 = select i1 %1233, float %1229, float %1230, !dbg !103
  %1235 = extractelement <16 x float> %1041, i64 3, !dbg !101
  %1236 = fcmp ogt float %1234, %1235, !dbg !101
  %1237 = fcmp uno float %1234, 0.000000e+00, !dbg !104
  %1238 = or i1 %1236, %1237, !dbg !102
  %1239 = select i1 %1238, float %1234, float %1235, !dbg !103
  %1240 = extractelement <16 x float> %1041, i64 4, !dbg !101
  %1241 = fcmp ogt float %1239, %1240, !dbg !101
  %1242 = fcmp uno float %1239, 0.000000e+00, !dbg !104
  %1243 = or i1 %1241, %1242, !dbg !102
  %1244 = select i1 %1243, float %1239, float %1240, !dbg !103
  %1245 = extractelement <16 x float> %1041, i64 5, !dbg !101
  %1246 = fcmp ogt float %1244, %1245, !dbg !101
  %1247 = fcmp uno float %1244, 0.000000e+00, !dbg !104
  %1248 = or i1 %1246, %1247, !dbg !102
  %1249 = select i1 %1248, float %1244, float %1245, !dbg !103
  %1250 = extractelement <16 x float> %1041, i64 6, !dbg !101
  %1251 = fcmp ogt float %1249, %1250, !dbg !101
  %1252 = fcmp uno float %1249, 0.000000e+00, !dbg !104
  %1253 = or i1 %1251, %1252, !dbg !102
  %1254 = select i1 %1253, float %1249, float %1250, !dbg !103
  %1255 = extractelement <16 x float> %1041, i64 7, !dbg !101
  %1256 = fcmp ogt float %1254, %1255, !dbg !101
  %1257 = fcmp uno float %1254, 0.000000e+00, !dbg !104
  %1258 = or i1 %1256, %1257, !dbg !102
  %1259 = select i1 %1258, float %1254, float %1255, !dbg !103
  %1260 = extractelement <16 x float> %1041, i64 8, !dbg !101
  %1261 = fcmp ogt float %1259, %1260, !dbg !101
  %1262 = fcmp uno float %1259, 0.000000e+00, !dbg !104
  %1263 = or i1 %1261, %1262, !dbg !102
  %1264 = select i1 %1263, float %1259, float %1260, !dbg !103
  %1265 = extractelement <16 x float> %1041, i64 9, !dbg !101
  %1266 = fcmp ogt float %1264, %1265, !dbg !101
  %1267 = fcmp uno float %1264, 0.000000e+00, !dbg !104
  %1268 = or i1 %1266, %1267, !dbg !102
  %1269 = select i1 %1268, float %1264, float %1265, !dbg !103
  %1270 = extractelement <16 x float> %1041, i64 10, !dbg !101
  %1271 = fcmp ogt float %1269, %1270, !dbg !101
  %1272 = fcmp uno float %1269, 0.000000e+00, !dbg !104
  %1273 = or i1 %1271, %1272, !dbg !102
  %1274 = select i1 %1273, float %1269, float %1270, !dbg !103
  %1275 = extractelement <16 x float> %1041, i64 11, !dbg !101
  %1276 = fcmp ogt float %1274, %1275, !dbg !101
  %1277 = fcmp uno float %1274, 0.000000e+00, !dbg !104
  %1278 = or i1 %1276, %1277, !dbg !102
  %1279 = select i1 %1278, float %1274, float %1275, !dbg !103
  %1280 = extractelement <16 x float> %1041, i64 12, !dbg !101
  %1281 = fcmp ogt float %1279, %1280, !dbg !101
  %1282 = fcmp uno float %1279, 0.000000e+00, !dbg !104
  %1283 = or i1 %1281, %1282, !dbg !102
  %1284 = select i1 %1283, float %1279, float %1280, !dbg !103
  %1285 = extractelement <16 x float> %1041, i64 13, !dbg !101
  %1286 = fcmp ogt float %1284, %1285, !dbg !101
  %1287 = fcmp uno float %1284, 0.000000e+00, !dbg !104
  %1288 = or i1 %1286, %1287, !dbg !102
  %1289 = select i1 %1288, float %1284, float %1285, !dbg !103
  %1290 = bitcast float %1289 to i32, !dbg !99
  %1291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1290, i32 16, i32 31), !dbg !99
  %1292 = bitcast i32 %1291 to float, !dbg !99
  %1293 = fcmp ogt float %1289, %1292, !dbg !101
  %1294 = fcmp uno float %1289, 0.000000e+00, !dbg !104
  %1295 = or i1 %1294, %1293, !dbg !102
  %1296 = select i1 %1295, float %1289, float %1292, !dbg !103
  %1297 = bitcast float %1296 to i32, !dbg !99
  %1298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1297, i32 8, i32 31), !dbg !99
  %1299 = bitcast i32 %1298 to float, !dbg !99
  %1300 = fcmp ogt float %1296, %1299, !dbg !101
  %1301 = fcmp uno float %1296, 0.000000e+00, !dbg !104
  %1302 = or i1 %1300, %1301, !dbg !102
  %1303 = select i1 %1302, float %1296, float %1299, !dbg !103
  %1304 = bitcast float %1303 to i32, !dbg !99
  %1305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1304, i32 4, i32 31), !dbg !99
  %1306 = bitcast i32 %1305 to float, !dbg !99
  %1307 = fcmp ogt float %1303, %1306, !dbg !101
  %1308 = fcmp uno float %1303, 0.000000e+00, !dbg !104
  %1309 = or i1 %1307, %1308, !dbg !102
  %1310 = select i1 %1309, float %1303, float %1306, !dbg !103
  %1311 = bitcast float %1310 to i32, !dbg !99
  %1312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1311, i32 2, i32 31), !dbg !99
  %1313 = bitcast i32 %1312 to float, !dbg !99
  %1314 = fcmp ogt float %1310, %1313, !dbg !101
  %1315 = fcmp uno float %1310, 0.000000e+00, !dbg !104
  %1316 = or i1 %1314, %1315, !dbg !102
  %1317 = select i1 %1316, float %1310, float %1313, !dbg !103
  %1318 = bitcast float %1317 to i32, !dbg !99
  %1319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1318, i32 1, i32 31), !dbg !99
  %1320 = bitcast i32 %1319 to float, !dbg !99
  %1321 = fcmp ogt float %1317, %1320, !dbg !101
  %1322 = fcmp uno float %1317, 0.000000e+00, !dbg !104
  %1323 = or i1 %1321, %1322, !dbg !102
  %1324 = select i1 %1323, i32 %1318, i32 %1319, !dbg !103
  %1325 = insertelement <1 x i32> poison, i32 %1324, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %1325, i1 %624) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1326 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %632, i1 %631) #5, !dbg !99
  %1327 = bitcast i32 %1326 to float, !dbg !99
  %1328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1326, i32 2, i32 31), !dbg !99
  %1329 = bitcast i32 %1328 to float, !dbg !99
  %1330 = fcmp ogt float %1327, %1329, !dbg !101
  %1331 = fcmp uno float %1327, 0.000000e+00, !dbg !104
  %1332 = or i1 %1331, %1330, !dbg !102
  %1333 = select i1 %1332, float %1327, float %1329, !dbg !103
  %1334 = bitcast float %1333 to i32, !dbg !99
  %1335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1334, i32 1, i32 31), !dbg !99
  %1336 = bitcast i32 %1335 to float, !dbg !99
  %1337 = fcmp ogt float %1333, %1336, !dbg !101
  %1338 = fcmp uno float %1333, 0.000000e+00, !dbg !104
  %1339 = or i1 %1337, %1338, !dbg !102
  %1340 = select i1 %1339, i32 %1334, i32 %1335, !dbg !103
  %1341 = insertelement <1 x i32> poison, i32 %1340, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %1341, i1 %682) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1342 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %1343 = sext i32 %20 to i64, !dbg !105
  %1344 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1343, !dbg !105
  %1345 = fptrunc float %1211 to bfloat, !dbg !106
  %1346 = and i32 %22, 127, !dbg !106
  %1347 = icmp eq i32 %1346, 0, !dbg !106
  %1348 = bitcast bfloat %1345 to i16, !dbg !106
  %1349 = and i1 %21, %1347, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1348, ptr addrspace(1) %1344, i1 %1349) #5, !dbg !106
  %1350 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1343, !dbg !107
  %1351 = fptrunc float %1342 to bfloat, !dbg !108
  %1352 = bitcast bfloat %1351 to i16, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1352, ptr addrspace(1) %1350, i1 %1349) #5, !dbg !108
  %1353 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1343, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1348, ptr addrspace(1) %1353, i1 %1349) #5, !dbg !110
  %1354 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1343, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1352, ptr addrspace(1) %1354, i1 %1349) #5, !dbg !112
  %1355 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1343, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1348, ptr addrspace(1) %1355, i1 %1349) #5, !dbg !114
  %1356 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1343, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1352, ptr addrspace(1) %1356, i1 %1349) #5, !dbg !116
  %1357 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1343, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1348, ptr addrspace(1) %1357, i1 %1349) #5, !dbg !118
  %1358 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1343, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1352, ptr addrspace(1) %1358, i1 %1349) #5, !dbg !120
  %.inv = fcmp oge float %1211, 0.000000e+00, !dbg !121
  %1359 = select i1 %.inv, float 0.000000e+00, float %1211, !dbg !121
  %1360 = fsub float 0.000000e+00, %1359, !dbg !123
  %.inv3 = fcmp ole float %1342, 0.000000e+00, !dbg !124
  %1361 = select i1 %.inv3, float 0.000000e+00, float %1342, !dbg !124
  %1362 = fcmp ogt float %1360, %1361, !dbg !126
  %1363 = fcmp uno float %1360, 0.000000e+00, !dbg !128
  %1364 = or i1 %1363, %1362, !dbg !129
  %1365 = select i1 %1364, float %1360, float %1361, !dbg !130
  %1366 = fmul float %1365, 0x3F80204080000000, !dbg !131
  %1367 = fcmp ogt float %1366, 0x3EE4F8B580000000, !dbg !132
  %1368 = fcmp uno float %1366, 0.000000e+00, !dbg !134
  %1369 = or i1 %1367, %1368, !dbg !135
  %1370 = select i1 %1369, float %1366, float 0x3EE4F8B580000000, !dbg !136
  %1371 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1370), !dbg !137
  br label %1372, !dbg !138

1372:                                             ; preds = %1084, %1372
  %1373 = phi i1 [ true, %1084 ], [ false, %1372 ]
  %indvars.iv201 = phi i64 [ 0, %1084 ], [ 2048, %1372 ]
  %1374 = or disjoint i64 %indvars.iv201, %31, !dbg !139
  %1375 = icmp samesign ult i64 %1374, 3072, !dbg !140
  %1376 = trunc nuw nsw i64 %1374 to i32, !dbg !141
  %1377 = add i32 %29, %1376, !dbg !141
  %1378 = trunc nuw nsw i64 %indvars.iv201 to i32, !dbg !141
  %1379 = add i32 %30, %1378, !dbg !141
  %1380 = sext i32 %1377 to i64, !dbg !142
  %1381 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1380, !dbg !142
  %1382 = sext i32 %1379 to i64, !dbg !142
  %1383 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1382, !dbg !142
  %1384 = and i1 %21, %1375, !dbg !143
  %1385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1381, i1 %1384) #5, !dbg !144
  %1386 = extractvalue { i32, i32, i32, i32 } %1385, 0, !dbg !144
  %1387 = bitcast i32 %1386 to <2 x bfloat>, !dbg !144
  %1388 = extractvalue { i32, i32, i32, i32 } %1385, 1, !dbg !144
  %1389 = bitcast i32 %1388 to <2 x bfloat>, !dbg !144
  %1390 = extractvalue { i32, i32, i32, i32 } %1385, 2, !dbg !144
  %1391 = bitcast i32 %1390 to <2 x bfloat>, !dbg !144
  %1392 = extractvalue { i32, i32, i32, i32 } %1385, 3, !dbg !144
  %1393 = bitcast i32 %1392 to <2 x bfloat>, !dbg !144
  %1394 = extractelement <2 x bfloat> %1387, i64 0, !dbg !144
  %1395 = extractelement <2 x bfloat> %1387, i64 1, !dbg !144
  %1396 = extractelement <2 x bfloat> %1389, i64 0, !dbg !144
  %1397 = extractelement <2 x bfloat> %1389, i64 1, !dbg !144
  %1398 = extractelement <2 x bfloat> %1391, i64 0, !dbg !144
  %1399 = extractelement <2 x bfloat> %1391, i64 1, !dbg !144
  %1400 = extractelement <2 x bfloat> %1393, i64 0, !dbg !144
  %1401 = extractelement <2 x bfloat> %1393, i64 1, !dbg !144
  %1402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1383, i1 %1384) #5, !dbg !144
  %1403 = extractvalue { i32, i32, i32, i32 } %1402, 0, !dbg !144
  %1404 = bitcast i32 %1403 to <2 x bfloat>, !dbg !144
  %1405 = extractvalue { i32, i32, i32, i32 } %1402, 1, !dbg !144
  %1406 = bitcast i32 %1405 to <2 x bfloat>, !dbg !144
  %1407 = extractvalue { i32, i32, i32, i32 } %1402, 2, !dbg !144
  %1408 = bitcast i32 %1407 to <2 x bfloat>, !dbg !144
  %1409 = extractvalue { i32, i32, i32, i32 } %1402, 3, !dbg !144
  %1410 = bitcast i32 %1409 to <2 x bfloat>, !dbg !144
  %1411 = extractelement <2 x bfloat> %1404, i64 0, !dbg !144
  %1412 = extractelement <2 x bfloat> %1404, i64 1, !dbg !144
  %1413 = extractelement <2 x bfloat> %1406, i64 0, !dbg !144
  %1414 = extractelement <2 x bfloat> %1406, i64 1, !dbg !144
  %1415 = extractelement <2 x bfloat> %1408, i64 0, !dbg !144
  %1416 = extractelement <2 x bfloat> %1408, i64 1, !dbg !144
  %1417 = extractelement <2 x bfloat> %1410, i64 0, !dbg !144
  %1418 = extractelement <2 x bfloat> %1410, i64 1, !dbg !144
  %1419 = fpext bfloat %1394 to float, !dbg !145
  %1420 = fpext bfloat %1395 to float, !dbg !145
  %1421 = fpext bfloat %1396 to float, !dbg !145
  %1422 = fpext bfloat %1397 to float, !dbg !145
  %1423 = fpext bfloat %1398 to float, !dbg !145
  %1424 = fpext bfloat %1399 to float, !dbg !145
  %1425 = fpext bfloat %1400 to float, !dbg !145
  %1426 = fpext bfloat %1401 to float, !dbg !145
  %1427 = fpext bfloat %1411 to float, !dbg !145
  %1428 = fpext bfloat %1412 to float, !dbg !145
  %1429 = fpext bfloat %1413 to float, !dbg !145
  %1430 = fpext bfloat %1414 to float, !dbg !145
  %1431 = fpext bfloat %1415 to float, !dbg !145
  %1432 = fpext bfloat %1416 to float, !dbg !145
  %1433 = fpext bfloat %1417 to float, !dbg !145
  %1434 = fpext bfloat %1418 to float, !dbg !145
  %1435 = fmul float %1371, %1419, !dbg !146
  %1436 = fmul float %1371, %1420, !dbg !146
  %1437 = fmul float %1371, %1421, !dbg !146
  %1438 = fmul float %1371, %1422, !dbg !146
  %1439 = fmul float %1371, %1423, !dbg !146
  %1440 = fmul float %1371, %1424, !dbg !146
  %1441 = fmul float %1371, %1425, !dbg !146
  %1442 = fmul float %1371, %1426, !dbg !146
  %1443 = fmul float %1371, %1427, !dbg !146
  %1444 = fmul float %1371, %1428, !dbg !146
  %1445 = fmul float %1371, %1429, !dbg !146
  %1446 = fmul float %1371, %1430, !dbg !146
  %1447 = fmul float %1371, %1431, !dbg !146
  %1448 = fmul float %1371, %1432, !dbg !146
  %1449 = fmul float %1371, %1433, !dbg !146
  %1450 = fmul float %1371, %1434, !dbg !146
  %1451 = tail call float @llvm.nvvm.round.f(float %1435) #5, !dbg !147
  %1452 = tail call float @llvm.nvvm.round.f(float %1436) #5, !dbg !147
  %1453 = tail call float @llvm.nvvm.round.f(float %1437) #5, !dbg !147
  %1454 = tail call float @llvm.nvvm.round.f(float %1438) #5, !dbg !147
  %1455 = tail call float @llvm.nvvm.round.f(float %1439) #5, !dbg !147
  %1456 = tail call float @llvm.nvvm.round.f(float %1440) #5, !dbg !147
  %1457 = tail call float @llvm.nvvm.round.f(float %1441) #5, !dbg !147
  %1458 = tail call float @llvm.nvvm.round.f(float %1442) #5, !dbg !147
  %1459 = tail call float @llvm.nvvm.round.f(float %1443) #5, !dbg !147
  %1460 = tail call float @llvm.nvvm.round.f(float %1444) #5, !dbg !147
  %1461 = tail call float @llvm.nvvm.round.f(float %1445) #5, !dbg !147
  %1462 = tail call float @llvm.nvvm.round.f(float %1446) #5, !dbg !147
  %1463 = tail call float @llvm.nvvm.round.f(float %1447) #5, !dbg !147
  %1464 = tail call float @llvm.nvvm.round.f(float %1448) #5, !dbg !147
  %1465 = tail call float @llvm.nvvm.round.f(float %1449) #5, !dbg !147
  %1466 = tail call float @llvm.nvvm.round.f(float %1450) #5, !dbg !147
  %1467 = insertelement <4 x float> poison, float %1451, i64 0, !dbg !148
  %1468 = insertelement <4 x float> %1467, float %1452, i64 1, !dbg !148
  %1469 = insertelement <4 x float> %1468, float %1453, i64 2, !dbg !148
  %1470 = insertelement <4 x float> %1469, float %1454, i64 3, !dbg !148
  %1471 = fcmp ogt <4 x float> %1470, splat (float -1.270000e+02), !dbg !148
  %1472 = fcmp uno <4 x float> %1470, zeroinitializer, !dbg !150
  %1473 = or <4 x i1> %1471, %1472, !dbg !151
  %1474 = select <4 x i1> %1473, <4 x float> %1470, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1475 = fcmp olt <4 x float> %1474, splat (float 1.270000e+02), !dbg !153
  %1476 = fcmp uno <4 x float> %1474, zeroinitializer, !dbg !155
  %1477 = or <4 x i1> %1475, %1476, !dbg !156
  %1478 = fptosi <4 x float> %1474 to <4 x i8>, !dbg !157
  %1479 = select <4 x i1> %1477, <4 x i8> %1478, <4 x i8> splat (i8 127), !dbg !158
  %1480 = insertelement <4 x float> poison, float %1455, i64 0, !dbg !148
  %1481 = insertelement <4 x float> %1480, float %1456, i64 1, !dbg !148
  %1482 = insertelement <4 x float> %1481, float %1457, i64 2, !dbg !148
  %1483 = insertelement <4 x float> %1482, float %1458, i64 3, !dbg !148
  %1484 = fcmp ogt <4 x float> %1483, splat (float -1.270000e+02), !dbg !148
  %1485 = fcmp uno <4 x float> %1483, zeroinitializer, !dbg !150
  %1486 = or <4 x i1> %1484, %1485, !dbg !151
  %1487 = select <4 x i1> %1486, <4 x float> %1483, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1488 = fcmp olt <4 x float> %1487, splat (float 1.270000e+02), !dbg !153
  %1489 = fcmp uno <4 x float> %1487, zeroinitializer, !dbg !155
  %1490 = or <4 x i1> %1488, %1489, !dbg !156
  %1491 = fptosi <4 x float> %1487 to <4 x i8>, !dbg !157
  %1492 = select <4 x i1> %1490, <4 x i8> %1491, <4 x i8> splat (i8 127), !dbg !158
  %1493 = insertelement <4 x float> poison, float %1459, i64 0, !dbg !148
  %1494 = insertelement <4 x float> %1493, float %1460, i64 1, !dbg !148
  %1495 = insertelement <4 x float> %1494, float %1461, i64 2, !dbg !148
  %1496 = insertelement <4 x float> %1495, float %1462, i64 3, !dbg !148
  %1497 = fcmp ogt <4 x float> %1496, splat (float -1.270000e+02), !dbg !148
  %1498 = fcmp uno <4 x float> %1496, zeroinitializer, !dbg !150
  %1499 = or <4 x i1> %1497, %1498, !dbg !151
  %1500 = select <4 x i1> %1499, <4 x float> %1496, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1501 = fcmp olt <4 x float> %1500, splat (float 1.270000e+02), !dbg !153
  %1502 = fcmp uno <4 x float> %1500, zeroinitializer, !dbg !155
  %1503 = or <4 x i1> %1501, %1502, !dbg !156
  %1504 = fptosi <4 x float> %1500 to <4 x i8>, !dbg !157
  %1505 = select <4 x i1> %1503, <4 x i8> %1504, <4 x i8> splat (i8 127), !dbg !158
  %1506 = insertelement <4 x float> poison, float %1463, i64 0, !dbg !148
  %1507 = insertelement <4 x float> %1506, float %1464, i64 1, !dbg !148
  %1508 = insertelement <4 x float> %1507, float %1465, i64 2, !dbg !148
  %1509 = insertelement <4 x float> %1508, float %1466, i64 3, !dbg !148
  %1510 = fcmp ogt <4 x float> %1509, splat (float -1.270000e+02), !dbg !148
  %1511 = fcmp uno <4 x float> %1509, zeroinitializer, !dbg !150
  %1512 = or <4 x i1> %1510, %1511, !dbg !151
  %1513 = select <4 x i1> %1512, <4 x float> %1509, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1514 = fcmp olt <4 x float> %1513, splat (float 1.270000e+02), !dbg !153
  %1515 = fcmp uno <4 x float> %1513, zeroinitializer, !dbg !155
  %1516 = or <4 x i1> %1514, %1515, !dbg !156
  %1517 = fptosi <4 x float> %1513 to <4 x i8>, !dbg !157
  %1518 = select <4 x i1> %1516, <4 x i8> %1517, <4 x i8> splat (i8 127), !dbg !158
  %1519 = getelementptr i8, ptr addrspace(1) %12, i64 %1380, !dbg !159
  %1520 = bitcast <4 x i8> %1479 to i32, !dbg !160
  %1521 = bitcast <4 x i8> %1492 to i32, !dbg !160
  %1522 = bitcast <4 x i8> %1505 to i32, !dbg !160
  %1523 = bitcast <4 x i8> %1518 to i32, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1520, i32 %1521, i32 %1522, i32 %1523, ptr addrspace(1) %1519, i1 %1384) #5, !dbg !160
  %1524 = getelementptr i8, ptr addrspace(1) %13, i64 %1380, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1520, i32 %1521, i32 %1522, i32 %1523, ptr addrspace(1) %1524, i1 %1384) #5, !dbg !162
  %1525 = getelementptr i8, ptr addrspace(1) %14, i64 %1380, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1520, i32 %1521, i32 %1522, i32 %1523, ptr addrspace(1) %1525, i1 %1384) #5, !dbg !164
  %1526 = getelementptr i8, ptr addrspace(1) %15, i64 %1380, !dbg !165
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1520, i32 %1521, i32 %1522, i32 %1523, ptr addrspace(1) %1526, i1 %1384) #5, !dbg !166
  br i1 %1373, label %1372, label %1527, !dbg !138

1527:                                             ; preds = %1372
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 33, column: 31, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 41, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 61, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 203, column: 7, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 42, column: 51, scope: !6)
!25 = !DILocation(line: 208, column: 24, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 209, column: 30, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 210, column: 34, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 210, column: 26, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 211, column: 39, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 211, column: 31, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 211, column: 22, scope: !22, inlinedAt: !24)
!32 = !DILocation(line: 44, column: 62, scope: !6)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = !DILocation(line: 46, column: 66, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!37 = !DILocation(line: 47, column: 79, scope: !6)
!38 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !37)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 69, column: 24, scope: !6)
!52 = !DILocation(line: 70, column: 32, scope: !6)
!53 = !DILocation(line: 53, column: 40, scope: !6)
!54 = !DILocation(line: 71, column: 24, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 55, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 61, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 59, column: 113, scope: !6)
!72 = !DILocation(line: 61, column: 102, scope: !6)
!73 = !DILocation(line: 63, column: 95, scope: !6)
!74 = !DILocation(line: 74, column: 24, scope: !6)
!75 = !DILocation(line: 76, column: 24, scope: !6)
!76 = !DILocation(line: 77, column: 24, scope: !6)
!77 = !DILocation(line: 79, column: 24, scope: !6)
!78 = !DILocation(line: 80, column: 24, scope: !6)
!79 = !DILocation(line: 86, column: 53, scope: !6)
!80 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !81)
!81 = !DILocation(line: 84, column: 47, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !83)
!83 = !DILocation(line: 82, column: 47, scope: !6)
!84 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !81)
!85 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !81)
!86 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !81)
!87 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !83)
!88 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !83)
!89 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !83)
!90 = !DILocation(line: 83, column: 50, scope: !6)
!91 = !DILocation(line: 85, column: 50, scope: !6)
!92 = !DILocation(line: 86, column: 29, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !22, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !94)
!99 = !DILocation(line: 115, column: 29, scope: !22, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !100)
!104 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !100)
!105 = !DILocation(line: 89, column: 25, scope: !6)
!106 = !DILocation(line: 89, column: 37, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 37, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 95, column: 25, scope: !6)
!118 = !DILocation(line: 95, column: 37, scope: !6)
!119 = !DILocation(line: 96, column: 26, scope: !6)
!120 = !DILocation(line: 96, column: 38, scope: !6)
!121 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !122)
!122 = !DILocation(line: 105, column: 46, scope: !6)
!123 = !DILocation(line: 106, column: 17, scope: !6)
!124 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !125)
!125 = !DILocation(line: 107, column: 46, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !127)
!127 = !DILocation(line: 108, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !127)
!131 = !DILocation(line: 110, column: 24, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !133)
!133 = !DILocation(line: 113, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !133)
!137 = !DILocation(line: 116, column: 25, scope: !6)
!138 = !DILocation(line: 97, column: 40, scope: !6)
!139 = !DILocation(line: 98, column: 31, scope: !6)
!140 = !DILocation(line: 99, column: 29, scope: !6)
!141 = !DILocation(line: 103, column: 43, scope: !6)
!142 = !DILocation(line: 103, column: 36, scope: !6)
!143 = !DILocation(line: 103, column: 63, scope: !6)
!144 = !DILocation(line: 103, column: 53, scope: !6)
!145 = !DILocation(line: 103, column: 115, scope: !6)
!146 = !DILocation(line: 119, column: 24, scope: !6)
!147 = !DILocation(line: 120, column: 36, scope: !6)
!148 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !149)
!149 = !DILocation(line: 123, column: 46, scope: !6)
!150 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !149)
!151 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !149)
!152 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !149)
!153 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !154)
!154 = !DILocation(line: 125, column: 46, scope: !6)
!155 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !154)
!156 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !154)
!157 = !DILocation(line: 127, column: 25, scope: !6)
!158 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !154)
!159 = !DILocation(line: 128, column: 30, scope: !6)
!160 = !DILocation(line: 128, column: 54, scope: !6)
!161 = !DILocation(line: 129, column: 30, scope: !6)
!162 = !DILocation(line: 129, column: 54, scope: !6)
!163 = !DILocation(line: 130, column: 30, scope: !6)
!164 = !DILocation(line: 130, column: 54, scope: !6)
!165 = !DILocation(line: 131, column: 30, scope: !6)
!166 = !DILocation(line: 131, column: 54, scope: !6)
!167 = !DILocation(line: 97, column: 4, scope: !6)
