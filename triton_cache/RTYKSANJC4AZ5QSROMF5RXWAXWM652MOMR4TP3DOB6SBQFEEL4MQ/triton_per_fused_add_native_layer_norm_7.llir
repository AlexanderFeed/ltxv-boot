; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_native_layer_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 31, !dbg !10
  %12 = lshr i32 %10, 5, !dbg !10
  %13 = shl i32 %10, 2, !dbg !10
  %14 = and i32 %13, 1020, !dbg !10
  %15 = icmp samesign ult i32 %14, 768, !dbg !11
  %16 = mul i32 %9, 768, !dbg !12
  %17 = add i32 %14, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %15) #5, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !15
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !15
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %15) #5, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !17
  %31 = zext nneg i32 %14 to i64, !dbg !18
  %32 = getelementptr bfloat, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %15) #5, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !19
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = getelementptr bfloat, ptr addrspace(1) %3, i64 %31, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %15) #5, !dbg !21
  %40 = getelementptr bfloat, ptr addrspace(1) %4, i64 %31, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %15) #5, !dbg !23
  %42 = and i32 %12, 7, !dbg !24
  %43 = icmp eq i32 %11, 0, !dbg !24
  %44 = zext nneg i32 %42 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !24
  %46 = icmp slt i32 %10, 8, !dbg !24
  %47 = sext i32 %10 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !24
  %49 = and i32 %10, 7, !dbg !24
  %50 = icmp eq i32 %49, 0, !dbg !24
  %51 = and i1 %46, %50, !dbg !24
  %52 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !28
  %53 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !29
  %54 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !30
  %55 = fadd <2 x float> %53, %54, !dbg !31
  %56 = fadd <2 x float> %55, %52, !dbg !32
  %57 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !28
  %58 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !29
  %59 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !30
  %60 = fadd <2 x float> %58, %59, !dbg !31
  %61 = fadd <2 x float> %60, %57, !dbg !32
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %62 = fadd <2 x float> %61, %shift, !dbg !33
  %63 = fadd <2 x float> %56, %62, !dbg !33
  %shift1 = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %64 = fadd <2 x float> %shift1, %63, !dbg !33
  %65 = extractelement <2 x float> %64, i64 0, !dbg !33
  %66 = select i1 %15, float %65, float 0.000000e+00, !dbg !33
  %67 = bitcast float %66 to i32, !dbg !24
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = fadd float %66, %69, !dbg !33
  %71 = bitcast float %70 to i32, !dbg !24
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = fadd float %70, %73, !dbg !33
  %75 = bitcast float %74 to i32, !dbg !24
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !24
  %77 = bitcast i32 %76 to float, !dbg !24
  %78 = fadd float %74, %77, !dbg !33
  %79 = bitcast float %78 to i32, !dbg !24
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = fadd float %78, %81, !dbg !33
  %83 = bitcast float %82 to i32, !dbg !24
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = fadd float %82, %85, !dbg !33
  %87 = bitcast float %86 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %87, i1 %43) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !24
  %89 = bitcast i32 %88 to float, !dbg !24
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = fadd float %89, %91, !dbg !33
  %93 = bitcast float %92 to i32, !dbg !24
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = fadd float %92, %95, !dbg !33
  %97 = bitcast float %96 to i32, !dbg !24
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !24
  %99 = bitcast i32 %98 to float, !dbg !24
  %100 = fadd float %96, %99, !dbg !33
  %101 = bitcast float %100 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %101, i1 %51) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %103 = fadd float %102, 0.000000e+00, !dbg !35
  %104 = tail call float @llvm.nvvm.div.full(float %103, float 7.680000e+02), !dbg !39
  %105 = insertelement <2 x float> poison, float %104, i64 0, !dbg !40
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %107 = fsub <2 x float> %61, %106, !dbg !40
  %108 = fsub <2 x float> %56, %106, !dbg !40
  %109 = fmul <2 x float> %107, %107, !dbg !41
  %110 = fmul <2 x float> %107, %107, !dbg !41
  %111 = fmul <2 x float> %108, %108, !dbg !41
  %112 = fmul <2 x float> %108, %108, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift2 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %113 = fadd <2 x float> %109, %shift2, !dbg !44
  %114 = fadd <2 x float> %111, %113, !dbg !44
  %shift3 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %115 = fadd <2 x float> %shift3, %114, !dbg !44
  %116 = extractelement <2 x float> %115, i64 0, !dbg !44
  %117 = select i1 %15, float %116, float 0.000000e+00, !dbg !44
  %118 = bitcast float %117 to i32, !dbg !42
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !42
  %120 = bitcast i32 %119 to float, !dbg !42
  %121 = fadd float %117, %120, !dbg !44
  %122 = bitcast float %121 to i32, !dbg !42
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !42
  %124 = bitcast i32 %123 to float, !dbg !42
  %125 = fadd float %121, %124, !dbg !44
  %126 = bitcast float %125 to i32, !dbg !42
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !42
  %128 = bitcast i32 %127 to float, !dbg !42
  %129 = fadd float %125, %128, !dbg !44
  %130 = bitcast float %129 to i32, !dbg !42
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !42
  %132 = bitcast i32 %131 to float, !dbg !42
  %133 = fadd float %129, %132, !dbg !44
  %134 = bitcast float %133 to i32, !dbg !42
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !42
  %136 = bitcast i32 %135 to float, !dbg !42
  %137 = fadd float %133, %136, !dbg !44
  %138 = bitcast float %137 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %138, i1 %43) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %139 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !42
  %140 = bitcast i32 %139 to float, !dbg !42
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = fadd float %140, %142, !dbg !44
  %144 = bitcast float %143 to i32, !dbg !42
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = fadd float %143, %146, !dbg !44
  %148 = bitcast float %147 to i32, !dbg !42
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !42
  %150 = bitcast i32 %149 to float, !dbg !42
  %151 = fadd float %147, %150, !dbg !44
  %152 = bitcast float %151 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %152, i1 %51) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %153 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %154 = fadd float %153, 0.000000e+00, !dbg !45
  %155 = tail call float @llvm.nvvm.div.full(float %154, float 7.680000e+02), !dbg !47
  %156 = fadd float %155, 0x3EE4F8B580000000, !dbg !48
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %157, 0, !dbg !49
  br i1 %.not.i, label %160, label %158, !dbg !49

158:                                              ; preds = %8
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

160:                                              ; preds = %8
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %158, %160
  %.0.i = phi float [ %159, %158 ], [ %161, %160 ], !dbg !49
  %162 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !23
  %164 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !23
  %166 = extractvalue { i32, i32 } %39, 1, !dbg !21
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !21
  %168 = extractvalue { i32, i32 } %39, 0, !dbg !21
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !21
  %170 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !50
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %172 = fmul <2 x float> %107, %171, !dbg !50
  %173 = fmul <2 x float> %108, %171, !dbg !50
  %174 = fpext <2 x bfloat> %165 to <2 x float>, !dbg !51
  %175 = fpext <2 x bfloat> %169 to <2 x float>, !dbg !52
  %176 = fmul <2 x float> %172, %175, !dbg !53
  %177 = fadd <2 x float> %176, %174, !dbg !54
  %178 = fptrunc <2 x float> %177 to <2 x bfloat>, !dbg !55
  %179 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !51
  %180 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !52
  %181 = fmul <2 x float> %173, %180, !dbg !53
  %182 = fadd <2 x float> %181, %179, !dbg !54
  %183 = fptrunc <2 x float> %182 to <2 x bfloat>, !dbg !55
  %184 = bitcast <2 x bfloat> %178 to i32, !dbg !55
  %185 = bitcast <2 x bfloat> %183 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %19, i1 %15) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnviyzfqzwukjaeqec5ztgbxqac4ybyozmk7v44dunnunx3mv7nx.py", directory: "/tmp/torchinductor_root/nv")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_7, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_7", linkageName: "triton_per_fused_add_native_layer_norm_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 45, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 37, scope: !6)
!20 = !DILocation(line: 38, column: 31, scope: !6)
!21 = !DILocation(line: 38, column: 38, scope: !6)
!22 = !DILocation(line: 39, column: 31, scope: !6)
!23 = !DILocation(line: 39, column: 38, scope: !6)
!24 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 47, column: 59, scope: !6)
!28 = !DILocation(line: 35, column: 73, scope: !6)
!29 = !DILocation(line: 36, column: 69, scope: !6)
!30 = !DILocation(line: 37, column: 90, scope: !6)
!31 = !DILocation(line: 40, column: 18, scope: !6)
!32 = !DILocation(line: 41, column: 18, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !27)
!34 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!35 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 47, column: 45, scope: !6)
!39 = !DILocation(line: 50, column: 21, scope: !6)
!40 = !DILocation(line: 51, column: 19, scope: !6)
!41 = !DILocation(line: 52, column: 20, scope: !6)
!42 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !43)
!43 = !DILocation(line: 55, column: 59, scope: !6)
!44 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 45, scope: !6)
!47 = !DILocation(line: 58, column: 21, scope: !6)
!48 = !DILocation(line: 60, column: 20, scope: !6)
!49 = !DILocation(line: 61, column: 28, scope: !6)
!50 = !DILocation(line: 62, column: 20, scope: !6)
!51 = !DILocation(line: 39, column: 91, scope: !6)
!52 = !DILocation(line: 38, column: 91, scope: !6)
!53 = !DILocation(line: 64, column: 20, scope: !6)
!54 = !DILocation(line: 66, column: 20, scope: !6)
!55 = !DILocation(line: 68, column: 51, scope: !6)
!56 = !DILocation(line: 68, column: 4, scope: !6)
