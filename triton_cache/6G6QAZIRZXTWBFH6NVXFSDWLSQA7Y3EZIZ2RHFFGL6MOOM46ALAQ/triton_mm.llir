; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 33, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = or disjoint i32 %23, 64, !dbg !19
  %26 = or disjoint i32 %23, 96, !dbg !19
  %27 = or disjoint i32 %14, %23, !dbg !20
  %28 = or disjoint i32 %14, %24, !dbg !20
  %29 = or disjoint i32 %14, %25, !dbg !20
  %30 = or disjoint i32 %14, %26, !dbg !20
  %31 = shl nsw i32 %13, 8, !dbg !21
  %32 = or disjoint i32 %31, %23, !dbg !22
  %33 = or disjoint i32 %31, %24, !dbg !22
  %34 = or disjoint i32 %31, %25, !dbg !22
  %35 = or disjoint i32 %31, %26, !dbg !22
  %36 = or disjoint i32 %32, 128, !dbg !22
  %37 = or disjoint i32 %32, 160, !dbg !22
  %38 = or disjoint i32 %32, 192, !dbg !22
  %39 = or disjoint i32 %32, 224, !dbg !22
  %40 = srem i32 %27, 4112, !dbg !23
  %41 = srem i32 %28, 4112, !dbg !23
  %42 = srem i32 %29, 4112, !dbg !23
  %43 = srem i32 %30, 4112, !dbg !23
  %44 = srem i32 %32, 12288, !dbg !24
  %45 = srem i32 %33, 12288, !dbg !24
  %46 = srem i32 %34, 12288, !dbg !24
  %47 = srem i32 %35, 12288, !dbg !24
  %48 = srem i32 %36, 12288, !dbg !24
  %49 = srem i32 %37, 12288, !dbg !24
  %50 = srem i32 %38, 12288, !dbg !24
  %51 = srem i32 %39, 12288, !dbg !24
  %52 = shl i32 %15, 4, !dbg !25
  %53 = and i32 %52, 16, !dbg !25
  %54 = and i32 %52, 32, !dbg !25
  %55 = and i32 %52, 48, !dbg !25
  %56 = and i32 %52, 64, !dbg !25
  %57 = and i32 %52, 112, !dbg !25
  %58 = mul nsw i32 %40, 3072, !dbg !26
  %59 = mul nsw i32 %41, 3072, !dbg !26
  %60 = mul nsw i32 %42, 3072, !dbg !26
  %61 = mul nsw i32 %43, 3072, !dbg !26
  %62 = mul nsw i32 %44, 3072, !dbg !27
  %63 = mul nsw i32 %45, 3072, !dbg !27
  %64 = mul nsw i32 %46, 3072, !dbg !27
  %65 = mul nsw i32 %47, 3072, !dbg !27
  %66 = mul nsw i32 %48, 3072, !dbg !27
  %67 = mul nsw i32 %49, 3072, !dbg !27
  %68 = mul nsw i32 %50, 3072, !dbg !27
  %69 = mul nsw i32 %51, 3072, !dbg !27
  %70 = or disjoint i32 %58, %57, !dbg !28
  %71 = or disjoint i32 %59, %57, !dbg !28
  %72 = or disjoint i32 %60, %57, !dbg !28
  %73 = or disjoint i32 %61, %57, !dbg !28
  %74 = sext i32 %70 to i64, !dbg !29
  %75 = getelementptr i8, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %71 to i64, !dbg !29
  %77 = getelementptr i8, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %72 to i64, !dbg !29
  %79 = getelementptr i8, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = sext i32 %73 to i64, !dbg !29
  %81 = getelementptr i8, ptr addrspace(1) %0, i64 %80, !dbg !29
  %82 = shl i32 %15, 1, !dbg !30
  %83 = and i32 %82, 48, !dbg !30
  %84 = xor i32 %83, %57, !dbg !30
  %85 = shl nuw nsw i32 %18, 1, !dbg !30
  %86 = xor i32 %84, %85, !dbg !30
  %87 = shl nuw nsw i32 %23, 7, !dbg !30
  %88 = or disjoint i32 %86, %87, !dbg !30
  %89 = zext nneg i32 %88 to i64, !dbg !30
  %90 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %89, !dbg !30
  %91 = or disjoint i32 %87, 4096, !dbg !30
  %92 = or disjoint i32 %86, %91, !dbg !30
  %93 = zext nneg i32 %92 to i64, !dbg !30
  %94 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %93, !dbg !30
  %95 = or disjoint i32 %87, 8192, !dbg !30
  %96 = or disjoint i32 %86, %95, !dbg !30
  %97 = zext nneg i32 %96 to i64, !dbg !30
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %97, !dbg !30
  %99 = or disjoint i32 %87, 12288, !dbg !30
  %100 = or disjoint i32 %86, %99, !dbg !30
  %101 = zext nneg i32 %100 to i64, !dbg !30
  %102 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %101, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %90, ptr addrspace(1) %75, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %77, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %79, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %81, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %103 = or disjoint i32 %62, %57, !dbg !31
  %104 = or disjoint i32 %63, %57, !dbg !31
  %105 = or disjoint i32 %64, %57, !dbg !31
  %106 = or disjoint i32 %65, %57, !dbg !31
  %107 = or disjoint i32 %66, %57, !dbg !31
  %108 = or disjoint i32 %67, %57, !dbg !31
  %109 = or disjoint i32 %68, %57, !dbg !31
  %110 = or disjoint i32 %69, %57, !dbg !31
  %111 = sext i32 %103 to i64, !dbg !32
  %112 = getelementptr i8, ptr addrspace(1) %1, i64 %111, !dbg !32
  %113 = sext i32 %104 to i64, !dbg !32
  %114 = getelementptr i8, ptr addrspace(1) %1, i64 %113, !dbg !32
  %115 = sext i32 %105 to i64, !dbg !32
  %116 = getelementptr i8, ptr addrspace(1) %1, i64 %115, !dbg !32
  %117 = sext i32 %106 to i64, !dbg !32
  %118 = getelementptr i8, ptr addrspace(1) %1, i64 %117, !dbg !32
  %119 = sext i32 %107 to i64, !dbg !32
  %120 = getelementptr i8, ptr addrspace(1) %1, i64 %119, !dbg !32
  %121 = sext i32 %108 to i64, !dbg !32
  %122 = getelementptr i8, ptr addrspace(1) %1, i64 %121, !dbg !32
  %123 = sext i32 %109 to i64, !dbg !32
  %124 = getelementptr i8, ptr addrspace(1) %1, i64 %123, !dbg !32
  %125 = sext i32 %110 to i64, !dbg !32
  %126 = getelementptr i8, ptr addrspace(1) %1, i64 %125, !dbg !32
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %89, !dbg !33
  %128 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %93, !dbg !33
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %97, !dbg !33
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %101, !dbg !33
  %131 = or disjoint i32 %87, 16384, !dbg !33
  %132 = or disjoint i32 %86, %131, !dbg !33
  %133 = zext nneg i32 %132 to i64, !dbg !33
  %134 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %133, !dbg !33
  %135 = or disjoint i32 %87, 20480, !dbg !33
  %136 = or disjoint i32 %86, %135, !dbg !33
  %137 = zext nneg i32 %136 to i64, !dbg !33
  %138 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %137, !dbg !33
  %139 = or disjoint i32 %87, 24576, !dbg !33
  %140 = or disjoint i32 %86, %139, !dbg !33
  %141 = zext nneg i32 %140 to i64, !dbg !33
  %142 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %141, !dbg !33
  %143 = or disjoint i32 %87, 28672, !dbg !33
  %144 = or disjoint i32 %86, %143, !dbg !33
  %145 = zext nneg i32 %144 to i64, !dbg !33
  %146 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %145, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %127, ptr addrspace(1) %112, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %114, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %129, ptr addrspace(1) %116, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %130, ptr addrspace(1) %118, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %134, ptr addrspace(1) %120, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %122, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %124, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %126, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %147 = or disjoint i32 %57, 128, !dbg !34
  %148 = or disjoint i32 %58, %147, !dbg !28
  %149 = or disjoint i32 %59, %147, !dbg !28
  %150 = or disjoint i32 %60, %147, !dbg !28
  %151 = or disjoint i32 %61, %147, !dbg !28
  %152 = sext i32 %148 to i64, !dbg !29
  %153 = getelementptr i8, ptr addrspace(1) %0, i64 %152, !dbg !29
  %154 = sext i32 %149 to i64, !dbg !29
  %155 = getelementptr i8, ptr addrspace(1) %0, i64 %154, !dbg !29
  %156 = sext i32 %150 to i64, !dbg !29
  %157 = getelementptr i8, ptr addrspace(1) %0, i64 %156, !dbg !29
  %158 = sext i32 %151 to i64, !dbg !29
  %159 = getelementptr i8, ptr addrspace(1) %0, i64 %158, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %89, !dbg !30
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %93, !dbg !30
  %162 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %97, !dbg !30
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %101, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %160, ptr addrspace(1) %153, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %161, ptr addrspace(1) %155, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %162, ptr addrspace(1) %157, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %163, ptr addrspace(1) %159, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %164 = or disjoint i32 %62, %147, !dbg !31
  %165 = or disjoint i32 %63, %147, !dbg !31
  %166 = or disjoint i32 %64, %147, !dbg !31
  %167 = or disjoint i32 %65, %147, !dbg !31
  %168 = or disjoint i32 %66, %147, !dbg !31
  %169 = or disjoint i32 %67, %147, !dbg !31
  %170 = or disjoint i32 %68, %147, !dbg !31
  %171 = or disjoint i32 %69, %147, !dbg !31
  %172 = sext i32 %164 to i64, !dbg !32
  %173 = getelementptr i8, ptr addrspace(1) %1, i64 %172, !dbg !32
  %174 = sext i32 %165 to i64, !dbg !32
  %175 = getelementptr i8, ptr addrspace(1) %1, i64 %174, !dbg !32
  %176 = sext i32 %166 to i64, !dbg !32
  %177 = getelementptr i8, ptr addrspace(1) %1, i64 %176, !dbg !32
  %178 = sext i32 %167 to i64, !dbg !32
  %179 = getelementptr i8, ptr addrspace(1) %1, i64 %178, !dbg !32
  %180 = sext i32 %168 to i64, !dbg !32
  %181 = getelementptr i8, ptr addrspace(1) %1, i64 %180, !dbg !32
  %182 = sext i32 %169 to i64, !dbg !32
  %183 = getelementptr i8, ptr addrspace(1) %1, i64 %182, !dbg !32
  %184 = sext i32 %170 to i64, !dbg !32
  %185 = getelementptr i8, ptr addrspace(1) %1, i64 %184, !dbg !32
  %186 = sext i32 %171 to i64, !dbg !32
  %187 = getelementptr i8, ptr addrspace(1) %1, i64 %186, !dbg !32
  %188 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %89, !dbg !33
  %189 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %93, !dbg !33
  %190 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %97, !dbg !33
  %191 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %101, !dbg !33
  %192 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %133, !dbg !33
  %193 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %137, !dbg !33
  %194 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %141, !dbg !33
  %195 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %145, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %188, ptr addrspace(1) %173, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %175, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %177, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %179, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %192, ptr addrspace(1) %181, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %193, ptr addrspace(1) %183, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %194, ptr addrspace(1) %185, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %195, ptr addrspace(1) %187, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %56, %17, !dbg !35
  %invariant.op132 = or disjoint i32 %16, %22, !dbg !35
  %invariant.op134 = or disjoint i32 %invariant.op132, 32, !dbg !35
  %invariant.op138 = or disjoint i32 %invariant.op132, 64, !dbg !35
  %invariant.op142 = or disjoint i32 %invariant.op132, 96, !dbg !35
  %invariant.op144 = or disjoint i32 %84, 16384, !dbg !35
  %invariant.op146 = or disjoint i32 %84, 20480, !dbg !35
  %invariant.op148 = or disjoint i32 %84, 24576, !dbg !35
  %invariant.op150 = or disjoint i32 %84, 28672, !dbg !35
  %invariant.op152 = or disjoint i32 %57, 256, !dbg !35
  %196 = and i32 %15, 7
  %197 = and i32 %15, 15
  %198 = xor i32 %57, %17
  %199 = or disjoint i32 %22, %197
  %200 = shl nuw nsw i32 %199, 7
  %201 = or disjoint i32 %200, %198
  %202 = zext nneg i32 %201 to i64
  %203 = or disjoint i32 %53, 32
  %204 = xor i32 %203, %54
  %205 = or disjoint i32 %204, %56
  %206 = xor i32 %205, %17
  %207 = or disjoint i32 %206, %200
  %208 = zext nneg i32 %207 to i64
  %209 = or disjoint i32 %55, 64
  %.reass = xor i32 %209, %invariant.op
  %210 = or disjoint i32 %.reass, %200
  %211 = zext nneg i32 %210 to i64
  %212 = or disjoint i32 %53, 96
  %and.ra = and i32 %52, 96
  %213 = or disjoint i32 %and.ra, %17
  %214 = xor i32 %213, %212
  %215 = or disjoint i32 %214, %200
  %216 = zext nneg i32 %215 to i64
  %217 = or disjoint i32 %196, 32
  %.reass135 = or disjoint i32 %196, %invariant.op134
  %218 = shl nuw nsw i32 %.reass135, 7
  %219 = or disjoint i32 %218, %198
  %220 = zext nneg i32 %219 to i64
  %221 = or disjoint i32 %206, %218
  %222 = zext nneg i32 %221 to i64
  %223 = or disjoint i32 %.reass, %218
  %224 = zext nneg i32 %223 to i64
  %225 = or disjoint i32 %214, %218
  %226 = zext nneg i32 %225 to i64
  %227 = or disjoint i32 %196, 64
  %.reass139 = or disjoint i32 %196, %invariant.op138
  %228 = shl nuw nsw i32 %.reass139, 7
  %229 = or disjoint i32 %228, %198
  %230 = zext nneg i32 %229 to i64
  %231 = or disjoint i32 %206, %228
  %232 = zext nneg i32 %231 to i64
  %233 = or disjoint i32 %.reass, %228
  %234 = zext nneg i32 %233 to i64
  %235 = or disjoint i32 %214, %228
  %236 = zext nneg i32 %235 to i64
  %237 = or disjoint i32 %196, 96
  %.reass143 = or disjoint i32 %196, %invariant.op142
  %238 = shl nuw nsw i32 %.reass143, 7
  %239 = or disjoint i32 %238, %198
  %240 = zext nneg i32 %239 to i64
  %241 = or disjoint i32 %206, %238
  %242 = zext nneg i32 %241 to i64
  %243 = or disjoint i32 %.reass, %238
  %244 = zext nneg i32 %243 to i64
  %245 = or disjoint i32 %214, %238
  %246 = zext nneg i32 %245 to i64
  %247 = lshr exact i32 %18, 2
  %248 = lshr i32 %15, 2
  %249 = and i32 %248, 16
  %250 = or disjoint i32 %249, %247
  %251 = or disjoint i32 %250, %196
  %252 = shl nuw nsw i32 %251, 7
  %253 = or disjoint i32 %252, %84
  %254 = zext nneg i32 %253 to i64
  %255 = or disjoint i32 %56, %83
  %256 = xor i32 %255, %209
  %257 = or disjoint i32 %256, %252
  %258 = zext nneg i32 %257 to i64
  %259 = or disjoint i32 %247, %217
  %260 = or disjoint i32 %259, %249
  %261 = shl nuw nsw i32 %260, 7
  %262 = or disjoint i32 %261, %84
  %263 = zext nneg i32 %262 to i64
  %264 = or disjoint i32 %256, %261
  %265 = zext nneg i32 %264 to i64
  %266 = or disjoint i32 %247, %227
  %267 = or disjoint i32 %266, %249
  %268 = shl nuw nsw i32 %267, 7
  %269 = or disjoint i32 %268, %84
  %270 = zext nneg i32 %269 to i64
  %271 = or disjoint i32 %256, %268
  %272 = zext nneg i32 %271 to i64
  %273 = or disjoint i32 %247, %237
  %274 = or disjoint i32 %273, %249
  %275 = shl nuw nsw i32 %274, 7
  %276 = or disjoint i32 %275, %84
  %277 = zext nneg i32 %276 to i64
  %278 = or disjoint i32 %256, %275
  %279 = zext nneg i32 %278 to i64
  %280 = or disjoint i32 %252, 16384
  %.reass145 = or disjoint i32 %252, %invariant.op144
  %281 = zext nneg i32 %.reass145 to i64
  %282 = or disjoint i32 %256, %280
  %283 = zext nneg i32 %282 to i64
  %284 = or disjoint i32 %252, 20480
  %.reass147 = or disjoint i32 %252, %invariant.op146
  %285 = zext nneg i32 %.reass147 to i64
  %286 = or disjoint i32 %256, %284
  %287 = zext nneg i32 %286 to i64
  %288 = or disjoint i32 %252, 24576
  %.reass149 = or disjoint i32 %252, %invariant.op148
  %289 = zext nneg i32 %.reass149 to i64
  %290 = or disjoint i32 %256, %288
  %291 = zext nneg i32 %290 to i64
  %292 = or disjoint i32 %252, 28672
  %.reass151 = or disjoint i32 %252, %invariant.op150
  %293 = zext nneg i32 %.reass151 to i64
  %294 = or disjoint i32 %256, %292
  %295 = zext nneg i32 %294 to i64
  %296 = zext nneg i32 %invariant.op152 to i64, !dbg !35
  %297 = sext i32 %69 to i64, !dbg !35
  %298 = sext i32 %68 to i64, !dbg !35
  %299 = sext i32 %67 to i64, !dbg !35
  %300 = sext i32 %66 to i64, !dbg !35
  %301 = sext i32 %65 to i64, !dbg !35
  %302 = sext i32 %64 to i64, !dbg !35
  %303 = sext i32 %63 to i64, !dbg !35
  %304 = sext i32 %62 to i64, !dbg !35
  %305 = sext i32 %61 to i64, !dbg !35
  %306 = sext i32 %60 to i64, !dbg !35
  %307 = sext i32 %59 to i64, !dbg !35
  %308 = sext i32 %58 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %308, !dbg !35
  %invariant.gep409 = getelementptr i8, ptr addrspace(1) %0, i64 %307, !dbg !35
  %invariant.gep411 = getelementptr i8, ptr addrspace(1) %0, i64 %306, !dbg !35
  %invariant.gep413 = getelementptr i8, ptr addrspace(1) %0, i64 %305, !dbg !35
  %invariant.gep415 = getelementptr i8, ptr addrspace(1) %1, i64 %304, !dbg !35
  %invariant.gep417 = getelementptr i8, ptr addrspace(1) %1, i64 %303, !dbg !35
  %invariant.gep419 = getelementptr i8, ptr addrspace(1) %1, i64 %302, !dbg !35
  %invariant.gep421 = getelementptr i8, ptr addrspace(1) %1, i64 %301, !dbg !35
  %invariant.gep423 = getelementptr i8, ptr addrspace(1) %1, i64 %300, !dbg !35
  %invariant.gep425 = getelementptr i8, ptr addrspace(1) %1, i64 %299, !dbg !35
  %invariant.gep427 = getelementptr i8, ptr addrspace(1) %1, i64 %298, !dbg !35
  %invariant.gep429 = getelementptr i8, ptr addrspace(1) %1, i64 %297, !dbg !35
  br label %309, !dbg !35

309:                                              ; preds = %4, %309
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %309 ]
  %310 = phi i32 [ -1, %4 ], [ %443, %309 ]
  %311 = phi i32 [ 1, %4 ], [ %1348, %309 ]
  %312 = phi i32 [ 0, %4 ], [ %1187, %309 ]
  %313 = phi i32 [ 0, %4 ], [ %1188, %309 ]
  %314 = phi i32 [ 0, %4 ], [ %1189, %309 ]
  %315 = phi i32 [ 0, %4 ], [ %1190, %309 ]
  %316 = phi i32 [ 0, %4 ], [ %1192, %309 ]
  %317 = phi i32 [ 0, %4 ], [ %1193, %309 ]
  %318 = phi i32 [ 0, %4 ], [ %1194, %309 ]
  %319 = phi i32 [ 0, %4 ], [ %1195, %309 ]
  %320 = phi i32 [ 0, %4 ], [ %1197, %309 ]
  %321 = phi i32 [ 0, %4 ], [ %1198, %309 ]
  %322 = phi i32 [ 0, %4 ], [ %1199, %309 ]
  %323 = phi i32 [ 0, %4 ], [ %1200, %309 ]
  %324 = phi i32 [ 0, %4 ], [ %1202, %309 ]
  %325 = phi i32 [ 0, %4 ], [ %1203, %309 ]
  %326 = phi i32 [ 0, %4 ], [ %1204, %309 ]
  %327 = phi i32 [ 0, %4 ], [ %1205, %309 ]
  %328 = phi i32 [ 0, %4 ], [ %1207, %309 ]
  %329 = phi i32 [ 0, %4 ], [ %1208, %309 ]
  %330 = phi i32 [ 0, %4 ], [ %1209, %309 ]
  %331 = phi i32 [ 0, %4 ], [ %1210, %309 ]
  %332 = phi i32 [ 0, %4 ], [ %1212, %309 ]
  %333 = phi i32 [ 0, %4 ], [ %1213, %309 ]
  %334 = phi i32 [ 0, %4 ], [ %1214, %309 ]
  %335 = phi i32 [ 0, %4 ], [ %1215, %309 ]
  %336 = phi i32 [ 0, %4 ], [ %1217, %309 ]
  %337 = phi i32 [ 0, %4 ], [ %1218, %309 ]
  %338 = phi i32 [ 0, %4 ], [ %1219, %309 ]
  %339 = phi i32 [ 0, %4 ], [ %1220, %309 ]
  %340 = phi i32 [ 0, %4 ], [ %1222, %309 ]
  %341 = phi i32 [ 0, %4 ], [ %1223, %309 ]
  %342 = phi i32 [ 0, %4 ], [ %1224, %309 ]
  %343 = phi i32 [ 0, %4 ], [ %1225, %309 ]
  %344 = phi i32 [ 0, %4 ], [ %1227, %309 ]
  %345 = phi i32 [ 0, %4 ], [ %1228, %309 ]
  %346 = phi i32 [ 0, %4 ], [ %1229, %309 ]
  %347 = phi i32 [ 0, %4 ], [ %1230, %309 ]
  %348 = phi i32 [ 0, %4 ], [ %1232, %309 ]
  %349 = phi i32 [ 0, %4 ], [ %1233, %309 ]
  %350 = phi i32 [ 0, %4 ], [ %1234, %309 ]
  %351 = phi i32 [ 0, %4 ], [ %1235, %309 ]
  %352 = phi i32 [ 0, %4 ], [ %1237, %309 ]
  %353 = phi i32 [ 0, %4 ], [ %1238, %309 ]
  %354 = phi i32 [ 0, %4 ], [ %1239, %309 ]
  %355 = phi i32 [ 0, %4 ], [ %1240, %309 ]
  %356 = phi i32 [ 0, %4 ], [ %1242, %309 ]
  %357 = phi i32 [ 0, %4 ], [ %1243, %309 ]
  %358 = phi i32 [ 0, %4 ], [ %1244, %309 ]
  %359 = phi i32 [ 0, %4 ], [ %1245, %309 ]
  %360 = phi i32 [ 0, %4 ], [ %1247, %309 ]
  %361 = phi i32 [ 0, %4 ], [ %1248, %309 ]
  %362 = phi i32 [ 0, %4 ], [ %1249, %309 ]
  %363 = phi i32 [ 0, %4 ], [ %1250, %309 ]
  %364 = phi i32 [ 0, %4 ], [ %1252, %309 ]
  %365 = phi i32 [ 0, %4 ], [ %1253, %309 ]
  %366 = phi i32 [ 0, %4 ], [ %1254, %309 ]
  %367 = phi i32 [ 0, %4 ], [ %1255, %309 ]
  %368 = phi i32 [ 0, %4 ], [ %1257, %309 ]
  %369 = phi i32 [ 0, %4 ], [ %1258, %309 ]
  %370 = phi i32 [ 0, %4 ], [ %1259, %309 ]
  %371 = phi i32 [ 0, %4 ], [ %1260, %309 ]
  %372 = phi i32 [ 0, %4 ], [ %1262, %309 ]
  %373 = phi i32 [ 0, %4 ], [ %1263, %309 ]
  %374 = phi i32 [ 0, %4 ], [ %1264, %309 ]
  %375 = phi i32 [ 0, %4 ], [ %1265, %309 ]
  %376 = phi i32 [ 0, %4 ], [ %1267, %309 ]
  %377 = phi i32 [ 0, %4 ], [ %1268, %309 ]
  %378 = phi i32 [ 0, %4 ], [ %1269, %309 ]
  %379 = phi i32 [ 0, %4 ], [ %1270, %309 ]
  %380 = phi i32 [ 0, %4 ], [ %1272, %309 ]
  %381 = phi i32 [ 0, %4 ], [ %1273, %309 ]
  %382 = phi i32 [ 0, %4 ], [ %1274, %309 ]
  %383 = phi i32 [ 0, %4 ], [ %1275, %309 ]
  %384 = phi i32 [ 0, %4 ], [ %1277, %309 ]
  %385 = phi i32 [ 0, %4 ], [ %1278, %309 ]
  %386 = phi i32 [ 0, %4 ], [ %1279, %309 ]
  %387 = phi i32 [ 0, %4 ], [ %1280, %309 ]
  %388 = phi i32 [ 0, %4 ], [ %1282, %309 ]
  %389 = phi i32 [ 0, %4 ], [ %1283, %309 ]
  %390 = phi i32 [ 0, %4 ], [ %1284, %309 ]
  %391 = phi i32 [ 0, %4 ], [ %1285, %309 ]
  %392 = phi i32 [ 0, %4 ], [ %1287, %309 ]
  %393 = phi i32 [ 0, %4 ], [ %1288, %309 ]
  %394 = phi i32 [ 0, %4 ], [ %1289, %309 ]
  %395 = phi i32 [ 0, %4 ], [ %1290, %309 ]
  %396 = phi i32 [ 0, %4 ], [ %1292, %309 ]
  %397 = phi i32 [ 0, %4 ], [ %1293, %309 ]
  %398 = phi i32 [ 0, %4 ], [ %1294, %309 ]
  %399 = phi i32 [ 0, %4 ], [ %1295, %309 ]
  %400 = phi i32 [ 0, %4 ], [ %1297, %309 ]
  %401 = phi i32 [ 0, %4 ], [ %1298, %309 ]
  %402 = phi i32 [ 0, %4 ], [ %1299, %309 ]
  %403 = phi i32 [ 0, %4 ], [ %1300, %309 ]
  %404 = phi i32 [ 0, %4 ], [ %1302, %309 ]
  %405 = phi i32 [ 0, %4 ], [ %1303, %309 ]
  %406 = phi i32 [ 0, %4 ], [ %1304, %309 ]
  %407 = phi i32 [ 0, %4 ], [ %1305, %309 ]
  %408 = phi i32 [ 0, %4 ], [ %1307, %309 ]
  %409 = phi i32 [ 0, %4 ], [ %1308, %309 ]
  %410 = phi i32 [ 0, %4 ], [ %1309, %309 ]
  %411 = phi i32 [ 0, %4 ], [ %1310, %309 ]
  %412 = phi i32 [ 0, %4 ], [ %1312, %309 ]
  %413 = phi i32 [ 0, %4 ], [ %1313, %309 ]
  %414 = phi i32 [ 0, %4 ], [ %1314, %309 ]
  %415 = phi i32 [ 0, %4 ], [ %1315, %309 ]
  %416 = phi i32 [ 0, %4 ], [ %1317, %309 ]
  %417 = phi i32 [ 0, %4 ], [ %1318, %309 ]
  %418 = phi i32 [ 0, %4 ], [ %1319, %309 ]
  %419 = phi i32 [ 0, %4 ], [ %1320, %309 ]
  %420 = phi i32 [ 0, %4 ], [ %1322, %309 ]
  %421 = phi i32 [ 0, %4 ], [ %1323, %309 ]
  %422 = phi i32 [ 0, %4 ], [ %1324, %309 ]
  %423 = phi i32 [ 0, %4 ], [ %1325, %309 ]
  %424 = phi i32 [ 0, %4 ], [ %1327, %309 ]
  %425 = phi i32 [ 0, %4 ], [ %1328, %309 ]
  %426 = phi i32 [ 0, %4 ], [ %1329, %309 ]
  %427 = phi i32 [ 0, %4 ], [ %1330, %309 ]
  %428 = phi i32 [ 0, %4 ], [ %1332, %309 ]
  %429 = phi i32 [ 0, %4 ], [ %1333, %309 ]
  %430 = phi i32 [ 0, %4 ], [ %1334, %309 ]
  %431 = phi i32 [ 0, %4 ], [ %1335, %309 ]
  %432 = phi i32 [ 0, %4 ], [ %1337, %309 ]
  %433 = phi i32 [ 0, %4 ], [ %1338, %309 ]
  %434 = phi i32 [ 0, %4 ], [ %1339, %309 ]
  %435 = phi i32 [ 0, %4 ], [ %1340, %309 ]
  %436 = phi i32 [ 0, %4 ], [ %1342, %309 ]
  %437 = phi i32 [ 0, %4 ], [ %1343, %309 ]
  %438 = phi i32 [ 0, %4 ], [ %1344, %309 ]
  %439 = phi i32 [ 0, %4 ], [ %1345, %309 ]
  %440 = icmp samesign ult i64 %indvars.iv, 22, !dbg !35
  %441 = add i32 %310, 1, !dbg !35
  %442 = icmp slt i32 %441, 2, !dbg !35
  %443 = select i1 %442, i32 %441, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %444 = shl i32 %443, 14, !dbg !30
  %445 = sext i32 %444 to i64, !dbg !30
  %446 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %445, !dbg !30
  %447 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %202, !dbg !30
  %448 = ptrtoint ptr addrspace(3) %447 to i64, !dbg !30
  %449 = trunc i64 %448 to i32, !dbg !30
  %450 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %449) #1, !dbg !30
  %451 = extractvalue { i32, i32, i32, i32 } %450, 0, !dbg !30
  %452 = extractvalue { i32, i32, i32, i32 } %450, 1, !dbg !30
  %453 = extractvalue { i32, i32, i32, i32 } %450, 2, !dbg !30
  %454 = extractvalue { i32, i32, i32, i32 } %450, 3, !dbg !30
  %455 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %208, !dbg !30
  %456 = ptrtoint ptr addrspace(3) %455 to i64, !dbg !30
  %457 = trunc i64 %456 to i32, !dbg !30
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %457) #1, !dbg !30
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !30
  %460 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !30
  %461 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !30
  %462 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !30
  %463 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %211, !dbg !30
  %464 = ptrtoint ptr addrspace(3) %463 to i64, !dbg !30
  %465 = trunc i64 %464 to i32, !dbg !30
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %465) #1, !dbg !30
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !30
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !30
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !30
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !30
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %216, !dbg !30
  %472 = ptrtoint ptr addrspace(3) %471 to i64, !dbg !30
  %473 = trunc i64 %472 to i32, !dbg !30
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %473) #1, !dbg !30
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !30
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !30
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !30
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !30
  %479 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %220, !dbg !30
  %480 = ptrtoint ptr addrspace(3) %479 to i64, !dbg !30
  %481 = trunc i64 %480 to i32, !dbg !30
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %481) #1, !dbg !30
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !30
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !30
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !30
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !30
  %487 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %222, !dbg !30
  %488 = ptrtoint ptr addrspace(3) %487 to i64, !dbg !30
  %489 = trunc i64 %488 to i32, !dbg !30
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #1, !dbg !30
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !30
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !30
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !30
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !30
  %495 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %224, !dbg !30
  %496 = ptrtoint ptr addrspace(3) %495 to i64, !dbg !30
  %497 = trunc i64 %496 to i32, !dbg !30
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %497) #1, !dbg !30
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !30
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !30
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !30
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !30
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %226, !dbg !30
  %504 = ptrtoint ptr addrspace(3) %503 to i64, !dbg !30
  %505 = trunc i64 %504 to i32, !dbg !30
  %506 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %505) #1, !dbg !30
  %507 = extractvalue { i32, i32, i32, i32 } %506, 0, !dbg !30
  %508 = extractvalue { i32, i32, i32, i32 } %506, 1, !dbg !30
  %509 = extractvalue { i32, i32, i32, i32 } %506, 2, !dbg !30
  %510 = extractvalue { i32, i32, i32, i32 } %506, 3, !dbg !30
  %511 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %230, !dbg !30
  %512 = ptrtoint ptr addrspace(3) %511 to i64, !dbg !30
  %513 = trunc i64 %512 to i32, !dbg !30
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %513) #1, !dbg !30
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !30
  %516 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !30
  %517 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !30
  %518 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !30
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %232, !dbg !30
  %520 = ptrtoint ptr addrspace(3) %519 to i64, !dbg !30
  %521 = trunc i64 %520 to i32, !dbg !30
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %521) #1, !dbg !30
  %523 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !30
  %524 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !30
  %525 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !30
  %526 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !30
  %527 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %234, !dbg !30
  %528 = ptrtoint ptr addrspace(3) %527 to i64, !dbg !30
  %529 = trunc i64 %528 to i32, !dbg !30
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %529) #1, !dbg !30
  %531 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !30
  %532 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !30
  %533 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !30
  %534 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !30
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %236, !dbg !30
  %536 = ptrtoint ptr addrspace(3) %535 to i64, !dbg !30
  %537 = trunc i64 %536 to i32, !dbg !30
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %537) #1, !dbg !30
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !30
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !30
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !30
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !30
  %543 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %240, !dbg !30
  %544 = ptrtoint ptr addrspace(3) %543 to i64, !dbg !30
  %545 = trunc i64 %544 to i32, !dbg !30
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %545) #1, !dbg !30
  %547 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !30
  %548 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !30
  %549 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !30
  %550 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !30
  %551 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %242, !dbg !30
  %552 = ptrtoint ptr addrspace(3) %551 to i64, !dbg !30
  %553 = trunc i64 %552 to i32, !dbg !30
  %554 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %553) #1, !dbg !30
  %555 = extractvalue { i32, i32, i32, i32 } %554, 0, !dbg !30
  %556 = extractvalue { i32, i32, i32, i32 } %554, 1, !dbg !30
  %557 = extractvalue { i32, i32, i32, i32 } %554, 2, !dbg !30
  %558 = extractvalue { i32, i32, i32, i32 } %554, 3, !dbg !30
  %559 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %244, !dbg !30
  %560 = ptrtoint ptr addrspace(3) %559 to i64, !dbg !30
  %561 = trunc i64 %560 to i32, !dbg !30
  %562 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %561) #1, !dbg !30
  %563 = extractvalue { i32, i32, i32, i32 } %562, 0, !dbg !30
  %564 = extractvalue { i32, i32, i32, i32 } %562, 1, !dbg !30
  %565 = extractvalue { i32, i32, i32, i32 } %562, 2, !dbg !30
  %566 = extractvalue { i32, i32, i32, i32 } %562, 3, !dbg !30
  %567 = getelementptr inbounds nuw i8, ptr addrspace(3) %446, i64 %246, !dbg !30
  %568 = ptrtoint ptr addrspace(3) %567 to i64, !dbg !30
  %569 = trunc i64 %568 to i32, !dbg !30
  %570 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %569) #1, !dbg !30
  %571 = extractvalue { i32, i32, i32, i32 } %570, 0, !dbg !30
  %572 = extractvalue { i32, i32, i32, i32 } %570, 1, !dbg !30
  %573 = extractvalue { i32, i32, i32, i32 } %570, 2, !dbg !30
  %574 = extractvalue { i32, i32, i32, i32 } %570, 3, !dbg !30
  %575 = shl i32 %443, 15, !dbg !33
  %576 = sext i32 %575 to i64, !dbg !33
  %577 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %576, !dbg !33
  %578 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %254, !dbg !33
  %579 = ptrtoint ptr addrspace(3) %578 to i64, !dbg !33
  %580 = trunc i64 %579 to i32, !dbg !33
  %581 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %580) #1, !dbg !33
  %582 = extractvalue { i32, i32, i32, i32 } %581, 0, !dbg !33
  %583 = extractvalue { i32, i32, i32, i32 } %581, 1, !dbg !33
  %584 = extractvalue { i32, i32, i32, i32 } %581, 2, !dbg !33
  %585 = extractvalue { i32, i32, i32, i32 } %581, 3, !dbg !33
  %586 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %258, !dbg !33
  %587 = ptrtoint ptr addrspace(3) %586 to i64, !dbg !33
  %588 = trunc i64 %587 to i32, !dbg !33
  %589 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %588) #1, !dbg !33
  %590 = extractvalue { i32, i32, i32, i32 } %589, 0, !dbg !33
  %591 = extractvalue { i32, i32, i32, i32 } %589, 1, !dbg !33
  %592 = extractvalue { i32, i32, i32, i32 } %589, 2, !dbg !33
  %593 = extractvalue { i32, i32, i32, i32 } %589, 3, !dbg !33
  %594 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %263, !dbg !33
  %595 = ptrtoint ptr addrspace(3) %594 to i64, !dbg !33
  %596 = trunc i64 %595 to i32, !dbg !33
  %597 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %596) #1, !dbg !33
  %598 = extractvalue { i32, i32, i32, i32 } %597, 0, !dbg !33
  %599 = extractvalue { i32, i32, i32, i32 } %597, 1, !dbg !33
  %600 = extractvalue { i32, i32, i32, i32 } %597, 2, !dbg !33
  %601 = extractvalue { i32, i32, i32, i32 } %597, 3, !dbg !33
  %602 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %265, !dbg !33
  %603 = ptrtoint ptr addrspace(3) %602 to i64, !dbg !33
  %604 = trunc i64 %603 to i32, !dbg !33
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %604) #1, !dbg !33
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !33
  %607 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !33
  %608 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !33
  %609 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !33
  %610 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %270, !dbg !33
  %611 = ptrtoint ptr addrspace(3) %610 to i64, !dbg !33
  %612 = trunc i64 %611 to i32, !dbg !33
  %613 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %612) #1, !dbg !33
  %614 = extractvalue { i32, i32, i32, i32 } %613, 0, !dbg !33
  %615 = extractvalue { i32, i32, i32, i32 } %613, 1, !dbg !33
  %616 = extractvalue { i32, i32, i32, i32 } %613, 2, !dbg !33
  %617 = extractvalue { i32, i32, i32, i32 } %613, 3, !dbg !33
  %618 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %272, !dbg !33
  %619 = ptrtoint ptr addrspace(3) %618 to i64, !dbg !33
  %620 = trunc i64 %619 to i32, !dbg !33
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %620) #1, !dbg !33
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !33
  %623 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !33
  %624 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !33
  %625 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !33
  %626 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %277, !dbg !33
  %627 = ptrtoint ptr addrspace(3) %626 to i64, !dbg !33
  %628 = trunc i64 %627 to i32, !dbg !33
  %629 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %628) #1, !dbg !33
  %630 = extractvalue { i32, i32, i32, i32 } %629, 0, !dbg !33
  %631 = extractvalue { i32, i32, i32, i32 } %629, 1, !dbg !33
  %632 = extractvalue { i32, i32, i32, i32 } %629, 2, !dbg !33
  %633 = extractvalue { i32, i32, i32, i32 } %629, 3, !dbg !33
  %634 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %279, !dbg !33
  %635 = ptrtoint ptr addrspace(3) %634 to i64, !dbg !33
  %636 = trunc i64 %635 to i32, !dbg !33
  %637 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %636) #1, !dbg !33
  %638 = extractvalue { i32, i32, i32, i32 } %637, 0, !dbg !33
  %639 = extractvalue { i32, i32, i32, i32 } %637, 1, !dbg !33
  %640 = extractvalue { i32, i32, i32, i32 } %637, 2, !dbg !33
  %641 = extractvalue { i32, i32, i32, i32 } %637, 3, !dbg !33
  %642 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %281, !dbg !33
  %643 = ptrtoint ptr addrspace(3) %642 to i64, !dbg !33
  %644 = trunc i64 %643 to i32, !dbg !33
  %645 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %644) #1, !dbg !33
  %646 = extractvalue { i32, i32, i32, i32 } %645, 0, !dbg !33
  %647 = extractvalue { i32, i32, i32, i32 } %645, 1, !dbg !33
  %648 = extractvalue { i32, i32, i32, i32 } %645, 2, !dbg !33
  %649 = extractvalue { i32, i32, i32, i32 } %645, 3, !dbg !33
  %650 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %283, !dbg !33
  %651 = ptrtoint ptr addrspace(3) %650 to i64, !dbg !33
  %652 = trunc i64 %651 to i32, !dbg !33
  %653 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %652) #1, !dbg !33
  %654 = extractvalue { i32, i32, i32, i32 } %653, 0, !dbg !33
  %655 = extractvalue { i32, i32, i32, i32 } %653, 1, !dbg !33
  %656 = extractvalue { i32, i32, i32, i32 } %653, 2, !dbg !33
  %657 = extractvalue { i32, i32, i32, i32 } %653, 3, !dbg !33
  %658 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %285, !dbg !33
  %659 = ptrtoint ptr addrspace(3) %658 to i64, !dbg !33
  %660 = trunc i64 %659 to i32, !dbg !33
  %661 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %660) #1, !dbg !33
  %662 = extractvalue { i32, i32, i32, i32 } %661, 0, !dbg !33
  %663 = extractvalue { i32, i32, i32, i32 } %661, 1, !dbg !33
  %664 = extractvalue { i32, i32, i32, i32 } %661, 2, !dbg !33
  %665 = extractvalue { i32, i32, i32, i32 } %661, 3, !dbg !33
  %666 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %287, !dbg !33
  %667 = ptrtoint ptr addrspace(3) %666 to i64, !dbg !33
  %668 = trunc i64 %667 to i32, !dbg !33
  %669 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %668) #1, !dbg !33
  %670 = extractvalue { i32, i32, i32, i32 } %669, 0, !dbg !33
  %671 = extractvalue { i32, i32, i32, i32 } %669, 1, !dbg !33
  %672 = extractvalue { i32, i32, i32, i32 } %669, 2, !dbg !33
  %673 = extractvalue { i32, i32, i32, i32 } %669, 3, !dbg !33
  %674 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %289, !dbg !33
  %675 = ptrtoint ptr addrspace(3) %674 to i64, !dbg !33
  %676 = trunc i64 %675 to i32, !dbg !33
  %677 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %676) #1, !dbg !33
  %678 = extractvalue { i32, i32, i32, i32 } %677, 0, !dbg !33
  %679 = extractvalue { i32, i32, i32, i32 } %677, 1, !dbg !33
  %680 = extractvalue { i32, i32, i32, i32 } %677, 2, !dbg !33
  %681 = extractvalue { i32, i32, i32, i32 } %677, 3, !dbg !33
  %682 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %291, !dbg !33
  %683 = ptrtoint ptr addrspace(3) %682 to i64, !dbg !33
  %684 = trunc i64 %683 to i32, !dbg !33
  %685 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %684) #1, !dbg !33
  %686 = extractvalue { i32, i32, i32, i32 } %685, 0, !dbg !33
  %687 = extractvalue { i32, i32, i32, i32 } %685, 1, !dbg !33
  %688 = extractvalue { i32, i32, i32, i32 } %685, 2, !dbg !33
  %689 = extractvalue { i32, i32, i32, i32 } %685, 3, !dbg !33
  %690 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %293, !dbg !33
  %691 = ptrtoint ptr addrspace(3) %690 to i64, !dbg !33
  %692 = trunc i64 %691 to i32, !dbg !33
  %693 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %692) #1, !dbg !33
  %694 = extractvalue { i32, i32, i32, i32 } %693, 0, !dbg !33
  %695 = extractvalue { i32, i32, i32, i32 } %693, 1, !dbg !33
  %696 = extractvalue { i32, i32, i32, i32 } %693, 2, !dbg !33
  %697 = extractvalue { i32, i32, i32, i32 } %693, 3, !dbg !33
  %698 = getelementptr inbounds nuw i8, ptr addrspace(3) %577, i64 %295, !dbg !33
  %699 = ptrtoint ptr addrspace(3) %698 to i64, !dbg !33
  %700 = trunc i64 %699 to i32, !dbg !33
  %701 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %700) #1, !dbg !33
  %702 = extractvalue { i32, i32, i32, i32 } %701, 0, !dbg !33
  %703 = extractvalue { i32, i32, i32, i32 } %701, 1, !dbg !33
  %704 = extractvalue { i32, i32, i32, i32 } %701, 2, !dbg !33
  %705 = extractvalue { i32, i32, i32, i32 } %701, 3, !dbg !33
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %312, i32 %313, i32 %314, i32 %315, i32 %451, i32 %452, i32 %453, i32 %454, i32 %582, i32 %583) #1, !dbg !36
  %707 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !36
  %708 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !36
  %709 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !36
  %710 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !36
  %711 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %316, i32 %317, i32 %318, i32 %319, i32 %451, i32 %452, i32 %453, i32 %454, i32 %598, i32 %599) #1, !dbg !36
  %712 = extractvalue { i32, i32, i32, i32 } %711, 0, !dbg !36
  %713 = extractvalue { i32, i32, i32, i32 } %711, 1, !dbg !36
  %714 = extractvalue { i32, i32, i32, i32 } %711, 2, !dbg !36
  %715 = extractvalue { i32, i32, i32, i32 } %711, 3, !dbg !36
  %716 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %320, i32 %321, i32 %322, i32 %323, i32 %451, i32 %452, i32 %453, i32 %454, i32 %614, i32 %615) #1, !dbg !36
  %717 = extractvalue { i32, i32, i32, i32 } %716, 0, !dbg !36
  %718 = extractvalue { i32, i32, i32, i32 } %716, 1, !dbg !36
  %719 = extractvalue { i32, i32, i32, i32 } %716, 2, !dbg !36
  %720 = extractvalue { i32, i32, i32, i32 } %716, 3, !dbg !36
  %721 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %324, i32 %325, i32 %326, i32 %327, i32 %451, i32 %452, i32 %453, i32 %454, i32 %630, i32 %631) #1, !dbg !36
  %722 = extractvalue { i32, i32, i32, i32 } %721, 0, !dbg !36
  %723 = extractvalue { i32, i32, i32, i32 } %721, 1, !dbg !36
  %724 = extractvalue { i32, i32, i32, i32 } %721, 2, !dbg !36
  %725 = extractvalue { i32, i32, i32, i32 } %721, 3, !dbg !36
  %726 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %328, i32 %329, i32 %330, i32 %331, i32 %451, i32 %452, i32 %453, i32 %454, i32 %646, i32 %647) #1, !dbg !36
  %727 = extractvalue { i32, i32, i32, i32 } %726, 0, !dbg !36
  %728 = extractvalue { i32, i32, i32, i32 } %726, 1, !dbg !36
  %729 = extractvalue { i32, i32, i32, i32 } %726, 2, !dbg !36
  %730 = extractvalue { i32, i32, i32, i32 } %726, 3, !dbg !36
  %731 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %332, i32 %333, i32 %334, i32 %335, i32 %451, i32 %452, i32 %453, i32 %454, i32 %662, i32 %663) #1, !dbg !36
  %732 = extractvalue { i32, i32, i32, i32 } %731, 0, !dbg !36
  %733 = extractvalue { i32, i32, i32, i32 } %731, 1, !dbg !36
  %734 = extractvalue { i32, i32, i32, i32 } %731, 2, !dbg !36
  %735 = extractvalue { i32, i32, i32, i32 } %731, 3, !dbg !36
  %736 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %336, i32 %337, i32 %338, i32 %339, i32 %451, i32 %452, i32 %453, i32 %454, i32 %678, i32 %679) #1, !dbg !36
  %737 = extractvalue { i32, i32, i32, i32 } %736, 0, !dbg !36
  %738 = extractvalue { i32, i32, i32, i32 } %736, 1, !dbg !36
  %739 = extractvalue { i32, i32, i32, i32 } %736, 2, !dbg !36
  %740 = extractvalue { i32, i32, i32, i32 } %736, 3, !dbg !36
  %741 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %340, i32 %341, i32 %342, i32 %343, i32 %451, i32 %452, i32 %453, i32 %454, i32 %694, i32 %695) #1, !dbg !36
  %742 = extractvalue { i32, i32, i32, i32 } %741, 0, !dbg !36
  %743 = extractvalue { i32, i32, i32, i32 } %741, 1, !dbg !36
  %744 = extractvalue { i32, i32, i32, i32 } %741, 2, !dbg !36
  %745 = extractvalue { i32, i32, i32, i32 } %741, 3, !dbg !36
  %746 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %344, i32 %345, i32 %346, i32 %347, i32 %483, i32 %484, i32 %485, i32 %486, i32 %582, i32 %583) #1, !dbg !36
  %747 = extractvalue { i32, i32, i32, i32 } %746, 0, !dbg !36
  %748 = extractvalue { i32, i32, i32, i32 } %746, 1, !dbg !36
  %749 = extractvalue { i32, i32, i32, i32 } %746, 2, !dbg !36
  %750 = extractvalue { i32, i32, i32, i32 } %746, 3, !dbg !36
  %751 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %348, i32 %349, i32 %350, i32 %351, i32 %483, i32 %484, i32 %485, i32 %486, i32 %598, i32 %599) #1, !dbg !36
  %752 = extractvalue { i32, i32, i32, i32 } %751, 0, !dbg !36
  %753 = extractvalue { i32, i32, i32, i32 } %751, 1, !dbg !36
  %754 = extractvalue { i32, i32, i32, i32 } %751, 2, !dbg !36
  %755 = extractvalue { i32, i32, i32, i32 } %751, 3, !dbg !36
  %756 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %352, i32 %353, i32 %354, i32 %355, i32 %483, i32 %484, i32 %485, i32 %486, i32 %614, i32 %615) #1, !dbg !36
  %757 = extractvalue { i32, i32, i32, i32 } %756, 0, !dbg !36
  %758 = extractvalue { i32, i32, i32, i32 } %756, 1, !dbg !36
  %759 = extractvalue { i32, i32, i32, i32 } %756, 2, !dbg !36
  %760 = extractvalue { i32, i32, i32, i32 } %756, 3, !dbg !36
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %356, i32 %357, i32 %358, i32 %359, i32 %483, i32 %484, i32 %485, i32 %486, i32 %630, i32 %631) #1, !dbg !36
  %762 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !36
  %763 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !36
  %764 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !36
  %765 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !36
  %766 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %360, i32 %361, i32 %362, i32 %363, i32 %483, i32 %484, i32 %485, i32 %486, i32 %646, i32 %647) #1, !dbg !36
  %767 = extractvalue { i32, i32, i32, i32 } %766, 0, !dbg !36
  %768 = extractvalue { i32, i32, i32, i32 } %766, 1, !dbg !36
  %769 = extractvalue { i32, i32, i32, i32 } %766, 2, !dbg !36
  %770 = extractvalue { i32, i32, i32, i32 } %766, 3, !dbg !36
  %771 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %364, i32 %365, i32 %366, i32 %367, i32 %483, i32 %484, i32 %485, i32 %486, i32 %662, i32 %663) #1, !dbg !36
  %772 = extractvalue { i32, i32, i32, i32 } %771, 0, !dbg !36
  %773 = extractvalue { i32, i32, i32, i32 } %771, 1, !dbg !36
  %774 = extractvalue { i32, i32, i32, i32 } %771, 2, !dbg !36
  %775 = extractvalue { i32, i32, i32, i32 } %771, 3, !dbg !36
  %776 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %368, i32 %369, i32 %370, i32 %371, i32 %483, i32 %484, i32 %485, i32 %486, i32 %678, i32 %679) #1, !dbg !36
  %777 = extractvalue { i32, i32, i32, i32 } %776, 0, !dbg !36
  %778 = extractvalue { i32, i32, i32, i32 } %776, 1, !dbg !36
  %779 = extractvalue { i32, i32, i32, i32 } %776, 2, !dbg !36
  %780 = extractvalue { i32, i32, i32, i32 } %776, 3, !dbg !36
  %781 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %372, i32 %373, i32 %374, i32 %375, i32 %483, i32 %484, i32 %485, i32 %486, i32 %694, i32 %695) #1, !dbg !36
  %782 = extractvalue { i32, i32, i32, i32 } %781, 0, !dbg !36
  %783 = extractvalue { i32, i32, i32, i32 } %781, 1, !dbg !36
  %784 = extractvalue { i32, i32, i32, i32 } %781, 2, !dbg !36
  %785 = extractvalue { i32, i32, i32, i32 } %781, 3, !dbg !36
  %786 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %376, i32 %377, i32 %378, i32 %379, i32 %515, i32 %516, i32 %517, i32 %518, i32 %582, i32 %583) #1, !dbg !36
  %787 = extractvalue { i32, i32, i32, i32 } %786, 0, !dbg !36
  %788 = extractvalue { i32, i32, i32, i32 } %786, 1, !dbg !36
  %789 = extractvalue { i32, i32, i32, i32 } %786, 2, !dbg !36
  %790 = extractvalue { i32, i32, i32, i32 } %786, 3, !dbg !36
  %791 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %380, i32 %381, i32 %382, i32 %383, i32 %515, i32 %516, i32 %517, i32 %518, i32 %598, i32 %599) #1, !dbg !36
  %792 = extractvalue { i32, i32, i32, i32 } %791, 0, !dbg !36
  %793 = extractvalue { i32, i32, i32, i32 } %791, 1, !dbg !36
  %794 = extractvalue { i32, i32, i32, i32 } %791, 2, !dbg !36
  %795 = extractvalue { i32, i32, i32, i32 } %791, 3, !dbg !36
  %796 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %384, i32 %385, i32 %386, i32 %387, i32 %515, i32 %516, i32 %517, i32 %518, i32 %614, i32 %615) #1, !dbg !36
  %797 = extractvalue { i32, i32, i32, i32 } %796, 0, !dbg !36
  %798 = extractvalue { i32, i32, i32, i32 } %796, 1, !dbg !36
  %799 = extractvalue { i32, i32, i32, i32 } %796, 2, !dbg !36
  %800 = extractvalue { i32, i32, i32, i32 } %796, 3, !dbg !36
  %801 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %388, i32 %389, i32 %390, i32 %391, i32 %515, i32 %516, i32 %517, i32 %518, i32 %630, i32 %631) #1, !dbg !36
  %802 = extractvalue { i32, i32, i32, i32 } %801, 0, !dbg !36
  %803 = extractvalue { i32, i32, i32, i32 } %801, 1, !dbg !36
  %804 = extractvalue { i32, i32, i32, i32 } %801, 2, !dbg !36
  %805 = extractvalue { i32, i32, i32, i32 } %801, 3, !dbg !36
  %806 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %392, i32 %393, i32 %394, i32 %395, i32 %515, i32 %516, i32 %517, i32 %518, i32 %646, i32 %647) #1, !dbg !36
  %807 = extractvalue { i32, i32, i32, i32 } %806, 0, !dbg !36
  %808 = extractvalue { i32, i32, i32, i32 } %806, 1, !dbg !36
  %809 = extractvalue { i32, i32, i32, i32 } %806, 2, !dbg !36
  %810 = extractvalue { i32, i32, i32, i32 } %806, 3, !dbg !36
  %811 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %396, i32 %397, i32 %398, i32 %399, i32 %515, i32 %516, i32 %517, i32 %518, i32 %662, i32 %663) #1, !dbg !36
  %812 = extractvalue { i32, i32, i32, i32 } %811, 0, !dbg !36
  %813 = extractvalue { i32, i32, i32, i32 } %811, 1, !dbg !36
  %814 = extractvalue { i32, i32, i32, i32 } %811, 2, !dbg !36
  %815 = extractvalue { i32, i32, i32, i32 } %811, 3, !dbg !36
  %816 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %400, i32 %401, i32 %402, i32 %403, i32 %515, i32 %516, i32 %517, i32 %518, i32 %678, i32 %679) #1, !dbg !36
  %817 = extractvalue { i32, i32, i32, i32 } %816, 0, !dbg !36
  %818 = extractvalue { i32, i32, i32, i32 } %816, 1, !dbg !36
  %819 = extractvalue { i32, i32, i32, i32 } %816, 2, !dbg !36
  %820 = extractvalue { i32, i32, i32, i32 } %816, 3, !dbg !36
  %821 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %404, i32 %405, i32 %406, i32 %407, i32 %515, i32 %516, i32 %517, i32 %518, i32 %694, i32 %695) #1, !dbg !36
  %822 = extractvalue { i32, i32, i32, i32 } %821, 0, !dbg !36
  %823 = extractvalue { i32, i32, i32, i32 } %821, 1, !dbg !36
  %824 = extractvalue { i32, i32, i32, i32 } %821, 2, !dbg !36
  %825 = extractvalue { i32, i32, i32, i32 } %821, 3, !dbg !36
  %826 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %408, i32 %409, i32 %410, i32 %411, i32 %547, i32 %548, i32 %549, i32 %550, i32 %582, i32 %583) #1, !dbg !36
  %827 = extractvalue { i32, i32, i32, i32 } %826, 0, !dbg !36
  %828 = extractvalue { i32, i32, i32, i32 } %826, 1, !dbg !36
  %829 = extractvalue { i32, i32, i32, i32 } %826, 2, !dbg !36
  %830 = extractvalue { i32, i32, i32, i32 } %826, 3, !dbg !36
  %831 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %412, i32 %413, i32 %414, i32 %415, i32 %547, i32 %548, i32 %549, i32 %550, i32 %598, i32 %599) #1, !dbg !36
  %832 = extractvalue { i32, i32, i32, i32 } %831, 0, !dbg !36
  %833 = extractvalue { i32, i32, i32, i32 } %831, 1, !dbg !36
  %834 = extractvalue { i32, i32, i32, i32 } %831, 2, !dbg !36
  %835 = extractvalue { i32, i32, i32, i32 } %831, 3, !dbg !36
  %836 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %416, i32 %417, i32 %418, i32 %419, i32 %547, i32 %548, i32 %549, i32 %550, i32 %614, i32 %615) #1, !dbg !36
  %837 = extractvalue { i32, i32, i32, i32 } %836, 0, !dbg !36
  %838 = extractvalue { i32, i32, i32, i32 } %836, 1, !dbg !36
  %839 = extractvalue { i32, i32, i32, i32 } %836, 2, !dbg !36
  %840 = extractvalue { i32, i32, i32, i32 } %836, 3, !dbg !36
  %841 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %420, i32 %421, i32 %422, i32 %423, i32 %547, i32 %548, i32 %549, i32 %550, i32 %630, i32 %631) #1, !dbg !36
  %842 = extractvalue { i32, i32, i32, i32 } %841, 0, !dbg !36
  %843 = extractvalue { i32, i32, i32, i32 } %841, 1, !dbg !36
  %844 = extractvalue { i32, i32, i32, i32 } %841, 2, !dbg !36
  %845 = extractvalue { i32, i32, i32, i32 } %841, 3, !dbg !36
  %846 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %424, i32 %425, i32 %426, i32 %427, i32 %547, i32 %548, i32 %549, i32 %550, i32 %646, i32 %647) #1, !dbg !36
  %847 = extractvalue { i32, i32, i32, i32 } %846, 0, !dbg !36
  %848 = extractvalue { i32, i32, i32, i32 } %846, 1, !dbg !36
  %849 = extractvalue { i32, i32, i32, i32 } %846, 2, !dbg !36
  %850 = extractvalue { i32, i32, i32, i32 } %846, 3, !dbg !36
  %851 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %428, i32 %429, i32 %430, i32 %431, i32 %547, i32 %548, i32 %549, i32 %550, i32 %662, i32 %663) #1, !dbg !36
  %852 = extractvalue { i32, i32, i32, i32 } %851, 0, !dbg !36
  %853 = extractvalue { i32, i32, i32, i32 } %851, 1, !dbg !36
  %854 = extractvalue { i32, i32, i32, i32 } %851, 2, !dbg !36
  %855 = extractvalue { i32, i32, i32, i32 } %851, 3, !dbg !36
  %856 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %432, i32 %433, i32 %434, i32 %435, i32 %547, i32 %548, i32 %549, i32 %550, i32 %678, i32 %679) #1, !dbg !36
  %857 = extractvalue { i32, i32, i32, i32 } %856, 0, !dbg !36
  %858 = extractvalue { i32, i32, i32, i32 } %856, 1, !dbg !36
  %859 = extractvalue { i32, i32, i32, i32 } %856, 2, !dbg !36
  %860 = extractvalue { i32, i32, i32, i32 } %856, 3, !dbg !36
  %861 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %436, i32 %437, i32 %438, i32 %439, i32 %547, i32 %548, i32 %549, i32 %550, i32 %694, i32 %695) #1, !dbg !36
  %862 = extractvalue { i32, i32, i32, i32 } %861, 0, !dbg !36
  %863 = extractvalue { i32, i32, i32, i32 } %861, 1, !dbg !36
  %864 = extractvalue { i32, i32, i32, i32 } %861, 2, !dbg !36
  %865 = extractvalue { i32, i32, i32, i32 } %861, 3, !dbg !36
  %866 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %707, i32 %708, i32 %709, i32 %710, i32 %459, i32 %460, i32 %461, i32 %462, i32 %584, i32 %585) #1, !dbg !36
  %867 = extractvalue { i32, i32, i32, i32 } %866, 0, !dbg !36
  %868 = extractvalue { i32, i32, i32, i32 } %866, 1, !dbg !36
  %869 = extractvalue { i32, i32, i32, i32 } %866, 2, !dbg !36
  %870 = extractvalue { i32, i32, i32, i32 } %866, 3, !dbg !36
  %871 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %712, i32 %713, i32 %714, i32 %715, i32 %459, i32 %460, i32 %461, i32 %462, i32 %600, i32 %601) #1, !dbg !36
  %872 = extractvalue { i32, i32, i32, i32 } %871, 0, !dbg !36
  %873 = extractvalue { i32, i32, i32, i32 } %871, 1, !dbg !36
  %874 = extractvalue { i32, i32, i32, i32 } %871, 2, !dbg !36
  %875 = extractvalue { i32, i32, i32, i32 } %871, 3, !dbg !36
  %876 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %717, i32 %718, i32 %719, i32 %720, i32 %459, i32 %460, i32 %461, i32 %462, i32 %616, i32 %617) #1, !dbg !36
  %877 = extractvalue { i32, i32, i32, i32 } %876, 0, !dbg !36
  %878 = extractvalue { i32, i32, i32, i32 } %876, 1, !dbg !36
  %879 = extractvalue { i32, i32, i32, i32 } %876, 2, !dbg !36
  %880 = extractvalue { i32, i32, i32, i32 } %876, 3, !dbg !36
  %881 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %722, i32 %723, i32 %724, i32 %725, i32 %459, i32 %460, i32 %461, i32 %462, i32 %632, i32 %633) #1, !dbg !36
  %882 = extractvalue { i32, i32, i32, i32 } %881, 0, !dbg !36
  %883 = extractvalue { i32, i32, i32, i32 } %881, 1, !dbg !36
  %884 = extractvalue { i32, i32, i32, i32 } %881, 2, !dbg !36
  %885 = extractvalue { i32, i32, i32, i32 } %881, 3, !dbg !36
  %886 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %727, i32 %728, i32 %729, i32 %730, i32 %459, i32 %460, i32 %461, i32 %462, i32 %648, i32 %649) #1, !dbg !36
  %887 = extractvalue { i32, i32, i32, i32 } %886, 0, !dbg !36
  %888 = extractvalue { i32, i32, i32, i32 } %886, 1, !dbg !36
  %889 = extractvalue { i32, i32, i32, i32 } %886, 2, !dbg !36
  %890 = extractvalue { i32, i32, i32, i32 } %886, 3, !dbg !36
  %891 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %732, i32 %733, i32 %734, i32 %735, i32 %459, i32 %460, i32 %461, i32 %462, i32 %664, i32 %665) #1, !dbg !36
  %892 = extractvalue { i32, i32, i32, i32 } %891, 0, !dbg !36
  %893 = extractvalue { i32, i32, i32, i32 } %891, 1, !dbg !36
  %894 = extractvalue { i32, i32, i32, i32 } %891, 2, !dbg !36
  %895 = extractvalue { i32, i32, i32, i32 } %891, 3, !dbg !36
  %896 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %737, i32 %738, i32 %739, i32 %740, i32 %459, i32 %460, i32 %461, i32 %462, i32 %680, i32 %681) #1, !dbg !36
  %897 = extractvalue { i32, i32, i32, i32 } %896, 0, !dbg !36
  %898 = extractvalue { i32, i32, i32, i32 } %896, 1, !dbg !36
  %899 = extractvalue { i32, i32, i32, i32 } %896, 2, !dbg !36
  %900 = extractvalue { i32, i32, i32, i32 } %896, 3, !dbg !36
  %901 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %742, i32 %743, i32 %744, i32 %745, i32 %459, i32 %460, i32 %461, i32 %462, i32 %696, i32 %697) #1, !dbg !36
  %902 = extractvalue { i32, i32, i32, i32 } %901, 0, !dbg !36
  %903 = extractvalue { i32, i32, i32, i32 } %901, 1, !dbg !36
  %904 = extractvalue { i32, i32, i32, i32 } %901, 2, !dbg !36
  %905 = extractvalue { i32, i32, i32, i32 } %901, 3, !dbg !36
  %906 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %747, i32 %748, i32 %749, i32 %750, i32 %491, i32 %492, i32 %493, i32 %494, i32 %584, i32 %585) #1, !dbg !36
  %907 = extractvalue { i32, i32, i32, i32 } %906, 0, !dbg !36
  %908 = extractvalue { i32, i32, i32, i32 } %906, 1, !dbg !36
  %909 = extractvalue { i32, i32, i32, i32 } %906, 2, !dbg !36
  %910 = extractvalue { i32, i32, i32, i32 } %906, 3, !dbg !36
  %911 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %752, i32 %753, i32 %754, i32 %755, i32 %491, i32 %492, i32 %493, i32 %494, i32 %600, i32 %601) #1, !dbg !36
  %912 = extractvalue { i32, i32, i32, i32 } %911, 0, !dbg !36
  %913 = extractvalue { i32, i32, i32, i32 } %911, 1, !dbg !36
  %914 = extractvalue { i32, i32, i32, i32 } %911, 2, !dbg !36
  %915 = extractvalue { i32, i32, i32, i32 } %911, 3, !dbg !36
  %916 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %757, i32 %758, i32 %759, i32 %760, i32 %491, i32 %492, i32 %493, i32 %494, i32 %616, i32 %617) #1, !dbg !36
  %917 = extractvalue { i32, i32, i32, i32 } %916, 0, !dbg !36
  %918 = extractvalue { i32, i32, i32, i32 } %916, 1, !dbg !36
  %919 = extractvalue { i32, i32, i32, i32 } %916, 2, !dbg !36
  %920 = extractvalue { i32, i32, i32, i32 } %916, 3, !dbg !36
  %921 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %762, i32 %763, i32 %764, i32 %765, i32 %491, i32 %492, i32 %493, i32 %494, i32 %632, i32 %633) #1, !dbg !36
  %922 = extractvalue { i32, i32, i32, i32 } %921, 0, !dbg !36
  %923 = extractvalue { i32, i32, i32, i32 } %921, 1, !dbg !36
  %924 = extractvalue { i32, i32, i32, i32 } %921, 2, !dbg !36
  %925 = extractvalue { i32, i32, i32, i32 } %921, 3, !dbg !36
  %926 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %767, i32 %768, i32 %769, i32 %770, i32 %491, i32 %492, i32 %493, i32 %494, i32 %648, i32 %649) #1, !dbg !36
  %927 = extractvalue { i32, i32, i32, i32 } %926, 0, !dbg !36
  %928 = extractvalue { i32, i32, i32, i32 } %926, 1, !dbg !36
  %929 = extractvalue { i32, i32, i32, i32 } %926, 2, !dbg !36
  %930 = extractvalue { i32, i32, i32, i32 } %926, 3, !dbg !36
  %931 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %772, i32 %773, i32 %774, i32 %775, i32 %491, i32 %492, i32 %493, i32 %494, i32 %664, i32 %665) #1, !dbg !36
  %932 = extractvalue { i32, i32, i32, i32 } %931, 0, !dbg !36
  %933 = extractvalue { i32, i32, i32, i32 } %931, 1, !dbg !36
  %934 = extractvalue { i32, i32, i32, i32 } %931, 2, !dbg !36
  %935 = extractvalue { i32, i32, i32, i32 } %931, 3, !dbg !36
  %936 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %777, i32 %778, i32 %779, i32 %780, i32 %491, i32 %492, i32 %493, i32 %494, i32 %680, i32 %681) #1, !dbg !36
  %937 = extractvalue { i32, i32, i32, i32 } %936, 0, !dbg !36
  %938 = extractvalue { i32, i32, i32, i32 } %936, 1, !dbg !36
  %939 = extractvalue { i32, i32, i32, i32 } %936, 2, !dbg !36
  %940 = extractvalue { i32, i32, i32, i32 } %936, 3, !dbg !36
  %941 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %782, i32 %783, i32 %784, i32 %785, i32 %491, i32 %492, i32 %493, i32 %494, i32 %696, i32 %697) #1, !dbg !36
  %942 = extractvalue { i32, i32, i32, i32 } %941, 0, !dbg !36
  %943 = extractvalue { i32, i32, i32, i32 } %941, 1, !dbg !36
  %944 = extractvalue { i32, i32, i32, i32 } %941, 2, !dbg !36
  %945 = extractvalue { i32, i32, i32, i32 } %941, 3, !dbg !36
  %946 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %787, i32 %788, i32 %789, i32 %790, i32 %523, i32 %524, i32 %525, i32 %526, i32 %584, i32 %585) #1, !dbg !36
  %947 = extractvalue { i32, i32, i32, i32 } %946, 0, !dbg !36
  %948 = extractvalue { i32, i32, i32, i32 } %946, 1, !dbg !36
  %949 = extractvalue { i32, i32, i32, i32 } %946, 2, !dbg !36
  %950 = extractvalue { i32, i32, i32, i32 } %946, 3, !dbg !36
  %951 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %792, i32 %793, i32 %794, i32 %795, i32 %523, i32 %524, i32 %525, i32 %526, i32 %600, i32 %601) #1, !dbg !36
  %952 = extractvalue { i32, i32, i32, i32 } %951, 0, !dbg !36
  %953 = extractvalue { i32, i32, i32, i32 } %951, 1, !dbg !36
  %954 = extractvalue { i32, i32, i32, i32 } %951, 2, !dbg !36
  %955 = extractvalue { i32, i32, i32, i32 } %951, 3, !dbg !36
  %956 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %797, i32 %798, i32 %799, i32 %800, i32 %523, i32 %524, i32 %525, i32 %526, i32 %616, i32 %617) #1, !dbg !36
  %957 = extractvalue { i32, i32, i32, i32 } %956, 0, !dbg !36
  %958 = extractvalue { i32, i32, i32, i32 } %956, 1, !dbg !36
  %959 = extractvalue { i32, i32, i32, i32 } %956, 2, !dbg !36
  %960 = extractvalue { i32, i32, i32, i32 } %956, 3, !dbg !36
  %961 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %802, i32 %803, i32 %804, i32 %805, i32 %523, i32 %524, i32 %525, i32 %526, i32 %632, i32 %633) #1, !dbg !36
  %962 = extractvalue { i32, i32, i32, i32 } %961, 0, !dbg !36
  %963 = extractvalue { i32, i32, i32, i32 } %961, 1, !dbg !36
  %964 = extractvalue { i32, i32, i32, i32 } %961, 2, !dbg !36
  %965 = extractvalue { i32, i32, i32, i32 } %961, 3, !dbg !36
  %966 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %807, i32 %808, i32 %809, i32 %810, i32 %523, i32 %524, i32 %525, i32 %526, i32 %648, i32 %649) #1, !dbg !36
  %967 = extractvalue { i32, i32, i32, i32 } %966, 0, !dbg !36
  %968 = extractvalue { i32, i32, i32, i32 } %966, 1, !dbg !36
  %969 = extractvalue { i32, i32, i32, i32 } %966, 2, !dbg !36
  %970 = extractvalue { i32, i32, i32, i32 } %966, 3, !dbg !36
  %971 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %812, i32 %813, i32 %814, i32 %815, i32 %523, i32 %524, i32 %525, i32 %526, i32 %664, i32 %665) #1, !dbg !36
  %972 = extractvalue { i32, i32, i32, i32 } %971, 0, !dbg !36
  %973 = extractvalue { i32, i32, i32, i32 } %971, 1, !dbg !36
  %974 = extractvalue { i32, i32, i32, i32 } %971, 2, !dbg !36
  %975 = extractvalue { i32, i32, i32, i32 } %971, 3, !dbg !36
  %976 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %817, i32 %818, i32 %819, i32 %820, i32 %523, i32 %524, i32 %525, i32 %526, i32 %680, i32 %681) #1, !dbg !36
  %977 = extractvalue { i32, i32, i32, i32 } %976, 0, !dbg !36
  %978 = extractvalue { i32, i32, i32, i32 } %976, 1, !dbg !36
  %979 = extractvalue { i32, i32, i32, i32 } %976, 2, !dbg !36
  %980 = extractvalue { i32, i32, i32, i32 } %976, 3, !dbg !36
  %981 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %822, i32 %823, i32 %824, i32 %825, i32 %523, i32 %524, i32 %525, i32 %526, i32 %696, i32 %697) #1, !dbg !36
  %982 = extractvalue { i32, i32, i32, i32 } %981, 0, !dbg !36
  %983 = extractvalue { i32, i32, i32, i32 } %981, 1, !dbg !36
  %984 = extractvalue { i32, i32, i32, i32 } %981, 2, !dbg !36
  %985 = extractvalue { i32, i32, i32, i32 } %981, 3, !dbg !36
  %986 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %827, i32 %828, i32 %829, i32 %830, i32 %555, i32 %556, i32 %557, i32 %558, i32 %584, i32 %585) #1, !dbg !36
  %987 = extractvalue { i32, i32, i32, i32 } %986, 0, !dbg !36
  %988 = extractvalue { i32, i32, i32, i32 } %986, 1, !dbg !36
  %989 = extractvalue { i32, i32, i32, i32 } %986, 2, !dbg !36
  %990 = extractvalue { i32, i32, i32, i32 } %986, 3, !dbg !36
  %991 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %832, i32 %833, i32 %834, i32 %835, i32 %555, i32 %556, i32 %557, i32 %558, i32 %600, i32 %601) #1, !dbg !36
  %992 = extractvalue { i32, i32, i32, i32 } %991, 0, !dbg !36
  %993 = extractvalue { i32, i32, i32, i32 } %991, 1, !dbg !36
  %994 = extractvalue { i32, i32, i32, i32 } %991, 2, !dbg !36
  %995 = extractvalue { i32, i32, i32, i32 } %991, 3, !dbg !36
  %996 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %837, i32 %838, i32 %839, i32 %840, i32 %555, i32 %556, i32 %557, i32 %558, i32 %616, i32 %617) #1, !dbg !36
  %997 = extractvalue { i32, i32, i32, i32 } %996, 0, !dbg !36
  %998 = extractvalue { i32, i32, i32, i32 } %996, 1, !dbg !36
  %999 = extractvalue { i32, i32, i32, i32 } %996, 2, !dbg !36
  %1000 = extractvalue { i32, i32, i32, i32 } %996, 3, !dbg !36
  %1001 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %842, i32 %843, i32 %844, i32 %845, i32 %555, i32 %556, i32 %557, i32 %558, i32 %632, i32 %633) #1, !dbg !36
  %1002 = extractvalue { i32, i32, i32, i32 } %1001, 0, !dbg !36
  %1003 = extractvalue { i32, i32, i32, i32 } %1001, 1, !dbg !36
  %1004 = extractvalue { i32, i32, i32, i32 } %1001, 2, !dbg !36
  %1005 = extractvalue { i32, i32, i32, i32 } %1001, 3, !dbg !36
  %1006 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %847, i32 %848, i32 %849, i32 %850, i32 %555, i32 %556, i32 %557, i32 %558, i32 %648, i32 %649) #1, !dbg !36
  %1007 = extractvalue { i32, i32, i32, i32 } %1006, 0, !dbg !36
  %1008 = extractvalue { i32, i32, i32, i32 } %1006, 1, !dbg !36
  %1009 = extractvalue { i32, i32, i32, i32 } %1006, 2, !dbg !36
  %1010 = extractvalue { i32, i32, i32, i32 } %1006, 3, !dbg !36
  %1011 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %852, i32 %853, i32 %854, i32 %855, i32 %555, i32 %556, i32 %557, i32 %558, i32 %664, i32 %665) #1, !dbg !36
  %1012 = extractvalue { i32, i32, i32, i32 } %1011, 0, !dbg !36
  %1013 = extractvalue { i32, i32, i32, i32 } %1011, 1, !dbg !36
  %1014 = extractvalue { i32, i32, i32, i32 } %1011, 2, !dbg !36
  %1015 = extractvalue { i32, i32, i32, i32 } %1011, 3, !dbg !36
  %1016 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %857, i32 %858, i32 %859, i32 %860, i32 %555, i32 %556, i32 %557, i32 %558, i32 %680, i32 %681) #1, !dbg !36
  %1017 = extractvalue { i32, i32, i32, i32 } %1016, 0, !dbg !36
  %1018 = extractvalue { i32, i32, i32, i32 } %1016, 1, !dbg !36
  %1019 = extractvalue { i32, i32, i32, i32 } %1016, 2, !dbg !36
  %1020 = extractvalue { i32, i32, i32, i32 } %1016, 3, !dbg !36
  %1021 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %862, i32 %863, i32 %864, i32 %865, i32 %555, i32 %556, i32 %557, i32 %558, i32 %696, i32 %697) #1, !dbg !36
  %1022 = extractvalue { i32, i32, i32, i32 } %1021, 0, !dbg !36
  %1023 = extractvalue { i32, i32, i32, i32 } %1021, 1, !dbg !36
  %1024 = extractvalue { i32, i32, i32, i32 } %1021, 2, !dbg !36
  %1025 = extractvalue { i32, i32, i32, i32 } %1021, 3, !dbg !36
  %1026 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %867, i32 %868, i32 %869, i32 %870, i32 %467, i32 %468, i32 %469, i32 %470, i32 %590, i32 %591) #1, !dbg !36
  %1027 = extractvalue { i32, i32, i32, i32 } %1026, 0, !dbg !36
  %1028 = extractvalue { i32, i32, i32, i32 } %1026, 1, !dbg !36
  %1029 = extractvalue { i32, i32, i32, i32 } %1026, 2, !dbg !36
  %1030 = extractvalue { i32, i32, i32, i32 } %1026, 3, !dbg !36
  %1031 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %872, i32 %873, i32 %874, i32 %875, i32 %467, i32 %468, i32 %469, i32 %470, i32 %606, i32 %607) #1, !dbg !36
  %1032 = extractvalue { i32, i32, i32, i32 } %1031, 0, !dbg !36
  %1033 = extractvalue { i32, i32, i32, i32 } %1031, 1, !dbg !36
  %1034 = extractvalue { i32, i32, i32, i32 } %1031, 2, !dbg !36
  %1035 = extractvalue { i32, i32, i32, i32 } %1031, 3, !dbg !36
  %1036 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %877, i32 %878, i32 %879, i32 %880, i32 %467, i32 %468, i32 %469, i32 %470, i32 %622, i32 %623) #1, !dbg !36
  %1037 = extractvalue { i32, i32, i32, i32 } %1036, 0, !dbg !36
  %1038 = extractvalue { i32, i32, i32, i32 } %1036, 1, !dbg !36
  %1039 = extractvalue { i32, i32, i32, i32 } %1036, 2, !dbg !36
  %1040 = extractvalue { i32, i32, i32, i32 } %1036, 3, !dbg !36
  %1041 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %882, i32 %883, i32 %884, i32 %885, i32 %467, i32 %468, i32 %469, i32 %470, i32 %638, i32 %639) #1, !dbg !36
  %1042 = extractvalue { i32, i32, i32, i32 } %1041, 0, !dbg !36
  %1043 = extractvalue { i32, i32, i32, i32 } %1041, 1, !dbg !36
  %1044 = extractvalue { i32, i32, i32, i32 } %1041, 2, !dbg !36
  %1045 = extractvalue { i32, i32, i32, i32 } %1041, 3, !dbg !36
  %1046 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %887, i32 %888, i32 %889, i32 %890, i32 %467, i32 %468, i32 %469, i32 %470, i32 %654, i32 %655) #1, !dbg !36
  %1047 = extractvalue { i32, i32, i32, i32 } %1046, 0, !dbg !36
  %1048 = extractvalue { i32, i32, i32, i32 } %1046, 1, !dbg !36
  %1049 = extractvalue { i32, i32, i32, i32 } %1046, 2, !dbg !36
  %1050 = extractvalue { i32, i32, i32, i32 } %1046, 3, !dbg !36
  %1051 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %892, i32 %893, i32 %894, i32 %895, i32 %467, i32 %468, i32 %469, i32 %470, i32 %670, i32 %671) #1, !dbg !36
  %1052 = extractvalue { i32, i32, i32, i32 } %1051, 0, !dbg !36
  %1053 = extractvalue { i32, i32, i32, i32 } %1051, 1, !dbg !36
  %1054 = extractvalue { i32, i32, i32, i32 } %1051, 2, !dbg !36
  %1055 = extractvalue { i32, i32, i32, i32 } %1051, 3, !dbg !36
  %1056 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %897, i32 %898, i32 %899, i32 %900, i32 %467, i32 %468, i32 %469, i32 %470, i32 %686, i32 %687) #1, !dbg !36
  %1057 = extractvalue { i32, i32, i32, i32 } %1056, 0, !dbg !36
  %1058 = extractvalue { i32, i32, i32, i32 } %1056, 1, !dbg !36
  %1059 = extractvalue { i32, i32, i32, i32 } %1056, 2, !dbg !36
  %1060 = extractvalue { i32, i32, i32, i32 } %1056, 3, !dbg !36
  %1061 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %902, i32 %903, i32 %904, i32 %905, i32 %467, i32 %468, i32 %469, i32 %470, i32 %702, i32 %703) #1, !dbg !36
  %1062 = extractvalue { i32, i32, i32, i32 } %1061, 0, !dbg !36
  %1063 = extractvalue { i32, i32, i32, i32 } %1061, 1, !dbg !36
  %1064 = extractvalue { i32, i32, i32, i32 } %1061, 2, !dbg !36
  %1065 = extractvalue { i32, i32, i32, i32 } %1061, 3, !dbg !36
  %1066 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %907, i32 %908, i32 %909, i32 %910, i32 %499, i32 %500, i32 %501, i32 %502, i32 %590, i32 %591) #1, !dbg !36
  %1067 = extractvalue { i32, i32, i32, i32 } %1066, 0, !dbg !36
  %1068 = extractvalue { i32, i32, i32, i32 } %1066, 1, !dbg !36
  %1069 = extractvalue { i32, i32, i32, i32 } %1066, 2, !dbg !36
  %1070 = extractvalue { i32, i32, i32, i32 } %1066, 3, !dbg !36
  %1071 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %912, i32 %913, i32 %914, i32 %915, i32 %499, i32 %500, i32 %501, i32 %502, i32 %606, i32 %607) #1, !dbg !36
  %1072 = extractvalue { i32, i32, i32, i32 } %1071, 0, !dbg !36
  %1073 = extractvalue { i32, i32, i32, i32 } %1071, 1, !dbg !36
  %1074 = extractvalue { i32, i32, i32, i32 } %1071, 2, !dbg !36
  %1075 = extractvalue { i32, i32, i32, i32 } %1071, 3, !dbg !36
  %1076 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %917, i32 %918, i32 %919, i32 %920, i32 %499, i32 %500, i32 %501, i32 %502, i32 %622, i32 %623) #1, !dbg !36
  %1077 = extractvalue { i32, i32, i32, i32 } %1076, 0, !dbg !36
  %1078 = extractvalue { i32, i32, i32, i32 } %1076, 1, !dbg !36
  %1079 = extractvalue { i32, i32, i32, i32 } %1076, 2, !dbg !36
  %1080 = extractvalue { i32, i32, i32, i32 } %1076, 3, !dbg !36
  %1081 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %922, i32 %923, i32 %924, i32 %925, i32 %499, i32 %500, i32 %501, i32 %502, i32 %638, i32 %639) #1, !dbg !36
  %1082 = extractvalue { i32, i32, i32, i32 } %1081, 0, !dbg !36
  %1083 = extractvalue { i32, i32, i32, i32 } %1081, 1, !dbg !36
  %1084 = extractvalue { i32, i32, i32, i32 } %1081, 2, !dbg !36
  %1085 = extractvalue { i32, i32, i32, i32 } %1081, 3, !dbg !36
  %1086 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %927, i32 %928, i32 %929, i32 %930, i32 %499, i32 %500, i32 %501, i32 %502, i32 %654, i32 %655) #1, !dbg !36
  %1087 = extractvalue { i32, i32, i32, i32 } %1086, 0, !dbg !36
  %1088 = extractvalue { i32, i32, i32, i32 } %1086, 1, !dbg !36
  %1089 = extractvalue { i32, i32, i32, i32 } %1086, 2, !dbg !36
  %1090 = extractvalue { i32, i32, i32, i32 } %1086, 3, !dbg !36
  %1091 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %932, i32 %933, i32 %934, i32 %935, i32 %499, i32 %500, i32 %501, i32 %502, i32 %670, i32 %671) #1, !dbg !36
  %1092 = extractvalue { i32, i32, i32, i32 } %1091, 0, !dbg !36
  %1093 = extractvalue { i32, i32, i32, i32 } %1091, 1, !dbg !36
  %1094 = extractvalue { i32, i32, i32, i32 } %1091, 2, !dbg !36
  %1095 = extractvalue { i32, i32, i32, i32 } %1091, 3, !dbg !36
  %1096 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %937, i32 %938, i32 %939, i32 %940, i32 %499, i32 %500, i32 %501, i32 %502, i32 %686, i32 %687) #1, !dbg !36
  %1097 = extractvalue { i32, i32, i32, i32 } %1096, 0, !dbg !36
  %1098 = extractvalue { i32, i32, i32, i32 } %1096, 1, !dbg !36
  %1099 = extractvalue { i32, i32, i32, i32 } %1096, 2, !dbg !36
  %1100 = extractvalue { i32, i32, i32, i32 } %1096, 3, !dbg !36
  %1101 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %942, i32 %943, i32 %944, i32 %945, i32 %499, i32 %500, i32 %501, i32 %502, i32 %702, i32 %703) #1, !dbg !36
  %1102 = extractvalue { i32, i32, i32, i32 } %1101, 0, !dbg !36
  %1103 = extractvalue { i32, i32, i32, i32 } %1101, 1, !dbg !36
  %1104 = extractvalue { i32, i32, i32, i32 } %1101, 2, !dbg !36
  %1105 = extractvalue { i32, i32, i32, i32 } %1101, 3, !dbg !36
  %1106 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %947, i32 %948, i32 %949, i32 %950, i32 %531, i32 %532, i32 %533, i32 %534, i32 %590, i32 %591) #1, !dbg !36
  %1107 = extractvalue { i32, i32, i32, i32 } %1106, 0, !dbg !36
  %1108 = extractvalue { i32, i32, i32, i32 } %1106, 1, !dbg !36
  %1109 = extractvalue { i32, i32, i32, i32 } %1106, 2, !dbg !36
  %1110 = extractvalue { i32, i32, i32, i32 } %1106, 3, !dbg !36
  %1111 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %952, i32 %953, i32 %954, i32 %955, i32 %531, i32 %532, i32 %533, i32 %534, i32 %606, i32 %607) #1, !dbg !36
  %1112 = extractvalue { i32, i32, i32, i32 } %1111, 0, !dbg !36
  %1113 = extractvalue { i32, i32, i32, i32 } %1111, 1, !dbg !36
  %1114 = extractvalue { i32, i32, i32, i32 } %1111, 2, !dbg !36
  %1115 = extractvalue { i32, i32, i32, i32 } %1111, 3, !dbg !36
  %1116 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %957, i32 %958, i32 %959, i32 %960, i32 %531, i32 %532, i32 %533, i32 %534, i32 %622, i32 %623) #1, !dbg !36
  %1117 = extractvalue { i32, i32, i32, i32 } %1116, 0, !dbg !36
  %1118 = extractvalue { i32, i32, i32, i32 } %1116, 1, !dbg !36
  %1119 = extractvalue { i32, i32, i32, i32 } %1116, 2, !dbg !36
  %1120 = extractvalue { i32, i32, i32, i32 } %1116, 3, !dbg !36
  %1121 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %962, i32 %963, i32 %964, i32 %965, i32 %531, i32 %532, i32 %533, i32 %534, i32 %638, i32 %639) #1, !dbg !36
  %1122 = extractvalue { i32, i32, i32, i32 } %1121, 0, !dbg !36
  %1123 = extractvalue { i32, i32, i32, i32 } %1121, 1, !dbg !36
  %1124 = extractvalue { i32, i32, i32, i32 } %1121, 2, !dbg !36
  %1125 = extractvalue { i32, i32, i32, i32 } %1121, 3, !dbg !36
  %1126 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %967, i32 %968, i32 %969, i32 %970, i32 %531, i32 %532, i32 %533, i32 %534, i32 %654, i32 %655) #1, !dbg !36
  %1127 = extractvalue { i32, i32, i32, i32 } %1126, 0, !dbg !36
  %1128 = extractvalue { i32, i32, i32, i32 } %1126, 1, !dbg !36
  %1129 = extractvalue { i32, i32, i32, i32 } %1126, 2, !dbg !36
  %1130 = extractvalue { i32, i32, i32, i32 } %1126, 3, !dbg !36
  %1131 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %972, i32 %973, i32 %974, i32 %975, i32 %531, i32 %532, i32 %533, i32 %534, i32 %670, i32 %671) #1, !dbg !36
  %1132 = extractvalue { i32, i32, i32, i32 } %1131, 0, !dbg !36
  %1133 = extractvalue { i32, i32, i32, i32 } %1131, 1, !dbg !36
  %1134 = extractvalue { i32, i32, i32, i32 } %1131, 2, !dbg !36
  %1135 = extractvalue { i32, i32, i32, i32 } %1131, 3, !dbg !36
  %1136 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %977, i32 %978, i32 %979, i32 %980, i32 %531, i32 %532, i32 %533, i32 %534, i32 %686, i32 %687) #1, !dbg !36
  %1137 = extractvalue { i32, i32, i32, i32 } %1136, 0, !dbg !36
  %1138 = extractvalue { i32, i32, i32, i32 } %1136, 1, !dbg !36
  %1139 = extractvalue { i32, i32, i32, i32 } %1136, 2, !dbg !36
  %1140 = extractvalue { i32, i32, i32, i32 } %1136, 3, !dbg !36
  %1141 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %982, i32 %983, i32 %984, i32 %985, i32 %531, i32 %532, i32 %533, i32 %534, i32 %702, i32 %703) #1, !dbg !36
  %1142 = extractvalue { i32, i32, i32, i32 } %1141, 0, !dbg !36
  %1143 = extractvalue { i32, i32, i32, i32 } %1141, 1, !dbg !36
  %1144 = extractvalue { i32, i32, i32, i32 } %1141, 2, !dbg !36
  %1145 = extractvalue { i32, i32, i32, i32 } %1141, 3, !dbg !36
  %1146 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %987, i32 %988, i32 %989, i32 %990, i32 %563, i32 %564, i32 %565, i32 %566, i32 %590, i32 %591) #1, !dbg !36
  %1147 = extractvalue { i32, i32, i32, i32 } %1146, 0, !dbg !36
  %1148 = extractvalue { i32, i32, i32, i32 } %1146, 1, !dbg !36
  %1149 = extractvalue { i32, i32, i32, i32 } %1146, 2, !dbg !36
  %1150 = extractvalue { i32, i32, i32, i32 } %1146, 3, !dbg !36
  %1151 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %992, i32 %993, i32 %994, i32 %995, i32 %563, i32 %564, i32 %565, i32 %566, i32 %606, i32 %607) #1, !dbg !36
  %1152 = extractvalue { i32, i32, i32, i32 } %1151, 0, !dbg !36
  %1153 = extractvalue { i32, i32, i32, i32 } %1151, 1, !dbg !36
  %1154 = extractvalue { i32, i32, i32, i32 } %1151, 2, !dbg !36
  %1155 = extractvalue { i32, i32, i32, i32 } %1151, 3, !dbg !36
  %1156 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %997, i32 %998, i32 %999, i32 %1000, i32 %563, i32 %564, i32 %565, i32 %566, i32 %622, i32 %623) #1, !dbg !36
  %1157 = extractvalue { i32, i32, i32, i32 } %1156, 0, !dbg !36
  %1158 = extractvalue { i32, i32, i32, i32 } %1156, 1, !dbg !36
  %1159 = extractvalue { i32, i32, i32, i32 } %1156, 2, !dbg !36
  %1160 = extractvalue { i32, i32, i32, i32 } %1156, 3, !dbg !36
  %1161 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1002, i32 %1003, i32 %1004, i32 %1005, i32 %563, i32 %564, i32 %565, i32 %566, i32 %638, i32 %639) #1, !dbg !36
  %1162 = extractvalue { i32, i32, i32, i32 } %1161, 0, !dbg !36
  %1163 = extractvalue { i32, i32, i32, i32 } %1161, 1, !dbg !36
  %1164 = extractvalue { i32, i32, i32, i32 } %1161, 2, !dbg !36
  %1165 = extractvalue { i32, i32, i32, i32 } %1161, 3, !dbg !36
  %1166 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1007, i32 %1008, i32 %1009, i32 %1010, i32 %563, i32 %564, i32 %565, i32 %566, i32 %654, i32 %655) #1, !dbg !36
  %1167 = extractvalue { i32, i32, i32, i32 } %1166, 0, !dbg !36
  %1168 = extractvalue { i32, i32, i32, i32 } %1166, 1, !dbg !36
  %1169 = extractvalue { i32, i32, i32, i32 } %1166, 2, !dbg !36
  %1170 = extractvalue { i32, i32, i32, i32 } %1166, 3, !dbg !36
  %1171 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1012, i32 %1013, i32 %1014, i32 %1015, i32 %563, i32 %564, i32 %565, i32 %566, i32 %670, i32 %671) #1, !dbg !36
  %1172 = extractvalue { i32, i32, i32, i32 } %1171, 0, !dbg !36
  %1173 = extractvalue { i32, i32, i32, i32 } %1171, 1, !dbg !36
  %1174 = extractvalue { i32, i32, i32, i32 } %1171, 2, !dbg !36
  %1175 = extractvalue { i32, i32, i32, i32 } %1171, 3, !dbg !36
  %1176 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1017, i32 %1018, i32 %1019, i32 %1020, i32 %563, i32 %564, i32 %565, i32 %566, i32 %686, i32 %687) #1, !dbg !36
  %1177 = extractvalue { i32, i32, i32, i32 } %1176, 0, !dbg !36
  %1178 = extractvalue { i32, i32, i32, i32 } %1176, 1, !dbg !36
  %1179 = extractvalue { i32, i32, i32, i32 } %1176, 2, !dbg !36
  %1180 = extractvalue { i32, i32, i32, i32 } %1176, 3, !dbg !36
  %1181 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1022, i32 %1023, i32 %1024, i32 %1025, i32 %563, i32 %564, i32 %565, i32 %566, i32 %702, i32 %703) #1, !dbg !36
  %1182 = extractvalue { i32, i32, i32, i32 } %1181, 0, !dbg !36
  %1183 = extractvalue { i32, i32, i32, i32 } %1181, 1, !dbg !36
  %1184 = extractvalue { i32, i32, i32, i32 } %1181, 2, !dbg !36
  %1185 = extractvalue { i32, i32, i32, i32 } %1181, 3, !dbg !36
  %1186 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %475, i32 %476, i32 %477, i32 %478, i32 %592, i32 %593) #1, !dbg !36
  %1187 = extractvalue { i32, i32, i32, i32 } %1186, 0, !dbg !36
  %1188 = extractvalue { i32, i32, i32, i32 } %1186, 1, !dbg !36
  %1189 = extractvalue { i32, i32, i32, i32 } %1186, 2, !dbg !36
  %1190 = extractvalue { i32, i32, i32, i32 } %1186, 3, !dbg !36
  %1191 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1032, i32 %1033, i32 %1034, i32 %1035, i32 %475, i32 %476, i32 %477, i32 %478, i32 %608, i32 %609) #1, !dbg !36
  %1192 = extractvalue { i32, i32, i32, i32 } %1191, 0, !dbg !36
  %1193 = extractvalue { i32, i32, i32, i32 } %1191, 1, !dbg !36
  %1194 = extractvalue { i32, i32, i32, i32 } %1191, 2, !dbg !36
  %1195 = extractvalue { i32, i32, i32, i32 } %1191, 3, !dbg !36
  %1196 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1037, i32 %1038, i32 %1039, i32 %1040, i32 %475, i32 %476, i32 %477, i32 %478, i32 %624, i32 %625) #1, !dbg !36
  %1197 = extractvalue { i32, i32, i32, i32 } %1196, 0, !dbg !36
  %1198 = extractvalue { i32, i32, i32, i32 } %1196, 1, !dbg !36
  %1199 = extractvalue { i32, i32, i32, i32 } %1196, 2, !dbg !36
  %1200 = extractvalue { i32, i32, i32, i32 } %1196, 3, !dbg !36
  %1201 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1042, i32 %1043, i32 %1044, i32 %1045, i32 %475, i32 %476, i32 %477, i32 %478, i32 %640, i32 %641) #1, !dbg !36
  %1202 = extractvalue { i32, i32, i32, i32 } %1201, 0, !dbg !36
  %1203 = extractvalue { i32, i32, i32, i32 } %1201, 1, !dbg !36
  %1204 = extractvalue { i32, i32, i32, i32 } %1201, 2, !dbg !36
  %1205 = extractvalue { i32, i32, i32, i32 } %1201, 3, !dbg !36
  %1206 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1047, i32 %1048, i32 %1049, i32 %1050, i32 %475, i32 %476, i32 %477, i32 %478, i32 %656, i32 %657) #1, !dbg !36
  %1207 = extractvalue { i32, i32, i32, i32 } %1206, 0, !dbg !36
  %1208 = extractvalue { i32, i32, i32, i32 } %1206, 1, !dbg !36
  %1209 = extractvalue { i32, i32, i32, i32 } %1206, 2, !dbg !36
  %1210 = extractvalue { i32, i32, i32, i32 } %1206, 3, !dbg !36
  %1211 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1052, i32 %1053, i32 %1054, i32 %1055, i32 %475, i32 %476, i32 %477, i32 %478, i32 %672, i32 %673) #1, !dbg !36
  %1212 = extractvalue { i32, i32, i32, i32 } %1211, 0, !dbg !36
  %1213 = extractvalue { i32, i32, i32, i32 } %1211, 1, !dbg !36
  %1214 = extractvalue { i32, i32, i32, i32 } %1211, 2, !dbg !36
  %1215 = extractvalue { i32, i32, i32, i32 } %1211, 3, !dbg !36
  %1216 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1057, i32 %1058, i32 %1059, i32 %1060, i32 %475, i32 %476, i32 %477, i32 %478, i32 %688, i32 %689) #1, !dbg !36
  %1217 = extractvalue { i32, i32, i32, i32 } %1216, 0, !dbg !36
  %1218 = extractvalue { i32, i32, i32, i32 } %1216, 1, !dbg !36
  %1219 = extractvalue { i32, i32, i32, i32 } %1216, 2, !dbg !36
  %1220 = extractvalue { i32, i32, i32, i32 } %1216, 3, !dbg !36
  %1221 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1062, i32 %1063, i32 %1064, i32 %1065, i32 %475, i32 %476, i32 %477, i32 %478, i32 %704, i32 %705) #1, !dbg !36
  %1222 = extractvalue { i32, i32, i32, i32 } %1221, 0, !dbg !36
  %1223 = extractvalue { i32, i32, i32, i32 } %1221, 1, !dbg !36
  %1224 = extractvalue { i32, i32, i32, i32 } %1221, 2, !dbg !36
  %1225 = extractvalue { i32, i32, i32, i32 } %1221, 3, !dbg !36
  %1226 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1067, i32 %1068, i32 %1069, i32 %1070, i32 %507, i32 %508, i32 %509, i32 %510, i32 %592, i32 %593) #1, !dbg !36
  %1227 = extractvalue { i32, i32, i32, i32 } %1226, 0, !dbg !36
  %1228 = extractvalue { i32, i32, i32, i32 } %1226, 1, !dbg !36
  %1229 = extractvalue { i32, i32, i32, i32 } %1226, 2, !dbg !36
  %1230 = extractvalue { i32, i32, i32, i32 } %1226, 3, !dbg !36
  %1231 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1072, i32 %1073, i32 %1074, i32 %1075, i32 %507, i32 %508, i32 %509, i32 %510, i32 %608, i32 %609) #1, !dbg !36
  %1232 = extractvalue { i32, i32, i32, i32 } %1231, 0, !dbg !36
  %1233 = extractvalue { i32, i32, i32, i32 } %1231, 1, !dbg !36
  %1234 = extractvalue { i32, i32, i32, i32 } %1231, 2, !dbg !36
  %1235 = extractvalue { i32, i32, i32, i32 } %1231, 3, !dbg !36
  %1236 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1077, i32 %1078, i32 %1079, i32 %1080, i32 %507, i32 %508, i32 %509, i32 %510, i32 %624, i32 %625) #1, !dbg !36
  %1237 = extractvalue { i32, i32, i32, i32 } %1236, 0, !dbg !36
  %1238 = extractvalue { i32, i32, i32, i32 } %1236, 1, !dbg !36
  %1239 = extractvalue { i32, i32, i32, i32 } %1236, 2, !dbg !36
  %1240 = extractvalue { i32, i32, i32, i32 } %1236, 3, !dbg !36
  %1241 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1082, i32 %1083, i32 %1084, i32 %1085, i32 %507, i32 %508, i32 %509, i32 %510, i32 %640, i32 %641) #1, !dbg !36
  %1242 = extractvalue { i32, i32, i32, i32 } %1241, 0, !dbg !36
  %1243 = extractvalue { i32, i32, i32, i32 } %1241, 1, !dbg !36
  %1244 = extractvalue { i32, i32, i32, i32 } %1241, 2, !dbg !36
  %1245 = extractvalue { i32, i32, i32, i32 } %1241, 3, !dbg !36
  %1246 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1087, i32 %1088, i32 %1089, i32 %1090, i32 %507, i32 %508, i32 %509, i32 %510, i32 %656, i32 %657) #1, !dbg !36
  %1247 = extractvalue { i32, i32, i32, i32 } %1246, 0, !dbg !36
  %1248 = extractvalue { i32, i32, i32, i32 } %1246, 1, !dbg !36
  %1249 = extractvalue { i32, i32, i32, i32 } %1246, 2, !dbg !36
  %1250 = extractvalue { i32, i32, i32, i32 } %1246, 3, !dbg !36
  %1251 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1092, i32 %1093, i32 %1094, i32 %1095, i32 %507, i32 %508, i32 %509, i32 %510, i32 %672, i32 %673) #1, !dbg !36
  %1252 = extractvalue { i32, i32, i32, i32 } %1251, 0, !dbg !36
  %1253 = extractvalue { i32, i32, i32, i32 } %1251, 1, !dbg !36
  %1254 = extractvalue { i32, i32, i32, i32 } %1251, 2, !dbg !36
  %1255 = extractvalue { i32, i32, i32, i32 } %1251, 3, !dbg !36
  %1256 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1097, i32 %1098, i32 %1099, i32 %1100, i32 %507, i32 %508, i32 %509, i32 %510, i32 %688, i32 %689) #1, !dbg !36
  %1257 = extractvalue { i32, i32, i32, i32 } %1256, 0, !dbg !36
  %1258 = extractvalue { i32, i32, i32, i32 } %1256, 1, !dbg !36
  %1259 = extractvalue { i32, i32, i32, i32 } %1256, 2, !dbg !36
  %1260 = extractvalue { i32, i32, i32, i32 } %1256, 3, !dbg !36
  %1261 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1102, i32 %1103, i32 %1104, i32 %1105, i32 %507, i32 %508, i32 %509, i32 %510, i32 %704, i32 %705) #1, !dbg !36
  %1262 = extractvalue { i32, i32, i32, i32 } %1261, 0, !dbg !36
  %1263 = extractvalue { i32, i32, i32, i32 } %1261, 1, !dbg !36
  %1264 = extractvalue { i32, i32, i32, i32 } %1261, 2, !dbg !36
  %1265 = extractvalue { i32, i32, i32, i32 } %1261, 3, !dbg !36
  %1266 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1107, i32 %1108, i32 %1109, i32 %1110, i32 %539, i32 %540, i32 %541, i32 %542, i32 %592, i32 %593) #1, !dbg !36
  %1267 = extractvalue { i32, i32, i32, i32 } %1266, 0, !dbg !36
  %1268 = extractvalue { i32, i32, i32, i32 } %1266, 1, !dbg !36
  %1269 = extractvalue { i32, i32, i32, i32 } %1266, 2, !dbg !36
  %1270 = extractvalue { i32, i32, i32, i32 } %1266, 3, !dbg !36
  %1271 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1112, i32 %1113, i32 %1114, i32 %1115, i32 %539, i32 %540, i32 %541, i32 %542, i32 %608, i32 %609) #1, !dbg !36
  %1272 = extractvalue { i32, i32, i32, i32 } %1271, 0, !dbg !36
  %1273 = extractvalue { i32, i32, i32, i32 } %1271, 1, !dbg !36
  %1274 = extractvalue { i32, i32, i32, i32 } %1271, 2, !dbg !36
  %1275 = extractvalue { i32, i32, i32, i32 } %1271, 3, !dbg !36
  %1276 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %539, i32 %540, i32 %541, i32 %542, i32 %624, i32 %625) #1, !dbg !36
  %1277 = extractvalue { i32, i32, i32, i32 } %1276, 0, !dbg !36
  %1278 = extractvalue { i32, i32, i32, i32 } %1276, 1, !dbg !36
  %1279 = extractvalue { i32, i32, i32, i32 } %1276, 2, !dbg !36
  %1280 = extractvalue { i32, i32, i32, i32 } %1276, 3, !dbg !36
  %1281 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1122, i32 %1123, i32 %1124, i32 %1125, i32 %539, i32 %540, i32 %541, i32 %542, i32 %640, i32 %641) #1, !dbg !36
  %1282 = extractvalue { i32, i32, i32, i32 } %1281, 0, !dbg !36
  %1283 = extractvalue { i32, i32, i32, i32 } %1281, 1, !dbg !36
  %1284 = extractvalue { i32, i32, i32, i32 } %1281, 2, !dbg !36
  %1285 = extractvalue { i32, i32, i32, i32 } %1281, 3, !dbg !36
  %1286 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1127, i32 %1128, i32 %1129, i32 %1130, i32 %539, i32 %540, i32 %541, i32 %542, i32 %656, i32 %657) #1, !dbg !36
  %1287 = extractvalue { i32, i32, i32, i32 } %1286, 0, !dbg !36
  %1288 = extractvalue { i32, i32, i32, i32 } %1286, 1, !dbg !36
  %1289 = extractvalue { i32, i32, i32, i32 } %1286, 2, !dbg !36
  %1290 = extractvalue { i32, i32, i32, i32 } %1286, 3, !dbg !36
  %1291 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1132, i32 %1133, i32 %1134, i32 %1135, i32 %539, i32 %540, i32 %541, i32 %542, i32 %672, i32 %673) #1, !dbg !36
  %1292 = extractvalue { i32, i32, i32, i32 } %1291, 0, !dbg !36
  %1293 = extractvalue { i32, i32, i32, i32 } %1291, 1, !dbg !36
  %1294 = extractvalue { i32, i32, i32, i32 } %1291, 2, !dbg !36
  %1295 = extractvalue { i32, i32, i32, i32 } %1291, 3, !dbg !36
  %1296 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1137, i32 %1138, i32 %1139, i32 %1140, i32 %539, i32 %540, i32 %541, i32 %542, i32 %688, i32 %689) #1, !dbg !36
  %1297 = extractvalue { i32, i32, i32, i32 } %1296, 0, !dbg !36
  %1298 = extractvalue { i32, i32, i32, i32 } %1296, 1, !dbg !36
  %1299 = extractvalue { i32, i32, i32, i32 } %1296, 2, !dbg !36
  %1300 = extractvalue { i32, i32, i32, i32 } %1296, 3, !dbg !36
  %1301 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1142, i32 %1143, i32 %1144, i32 %1145, i32 %539, i32 %540, i32 %541, i32 %542, i32 %704, i32 %705) #1, !dbg !36
  %1302 = extractvalue { i32, i32, i32, i32 } %1301, 0, !dbg !36
  %1303 = extractvalue { i32, i32, i32, i32 } %1301, 1, !dbg !36
  %1304 = extractvalue { i32, i32, i32, i32 } %1301, 2, !dbg !36
  %1305 = extractvalue { i32, i32, i32, i32 } %1301, 3, !dbg !36
  %1306 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1147, i32 %1148, i32 %1149, i32 %1150, i32 %571, i32 %572, i32 %573, i32 %574, i32 %592, i32 %593) #1, !dbg !36
  %1307 = extractvalue { i32, i32, i32, i32 } %1306, 0, !dbg !36
  %1308 = extractvalue { i32, i32, i32, i32 } %1306, 1, !dbg !36
  %1309 = extractvalue { i32, i32, i32, i32 } %1306, 2, !dbg !36
  %1310 = extractvalue { i32, i32, i32, i32 } %1306, 3, !dbg !36
  %1311 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1152, i32 %1153, i32 %1154, i32 %1155, i32 %571, i32 %572, i32 %573, i32 %574, i32 %608, i32 %609) #1, !dbg !36
  %1312 = extractvalue { i32, i32, i32, i32 } %1311, 0, !dbg !36
  %1313 = extractvalue { i32, i32, i32, i32 } %1311, 1, !dbg !36
  %1314 = extractvalue { i32, i32, i32, i32 } %1311, 2, !dbg !36
  %1315 = extractvalue { i32, i32, i32, i32 } %1311, 3, !dbg !36
  %1316 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1157, i32 %1158, i32 %1159, i32 %1160, i32 %571, i32 %572, i32 %573, i32 %574, i32 %624, i32 %625) #1, !dbg !36
  %1317 = extractvalue { i32, i32, i32, i32 } %1316, 0, !dbg !36
  %1318 = extractvalue { i32, i32, i32, i32 } %1316, 1, !dbg !36
  %1319 = extractvalue { i32, i32, i32, i32 } %1316, 2, !dbg !36
  %1320 = extractvalue { i32, i32, i32, i32 } %1316, 3, !dbg !36
  %1321 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1162, i32 %1163, i32 %1164, i32 %1165, i32 %571, i32 %572, i32 %573, i32 %574, i32 %640, i32 %641) #1, !dbg !36
  %1322 = extractvalue { i32, i32, i32, i32 } %1321, 0, !dbg !36
  %1323 = extractvalue { i32, i32, i32, i32 } %1321, 1, !dbg !36
  %1324 = extractvalue { i32, i32, i32, i32 } %1321, 2, !dbg !36
  %1325 = extractvalue { i32, i32, i32, i32 } %1321, 3, !dbg !36
  %1326 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1167, i32 %1168, i32 %1169, i32 %1170, i32 %571, i32 %572, i32 %573, i32 %574, i32 %656, i32 %657) #1, !dbg !36
  %1327 = extractvalue { i32, i32, i32, i32 } %1326, 0, !dbg !36
  %1328 = extractvalue { i32, i32, i32, i32 } %1326, 1, !dbg !36
  %1329 = extractvalue { i32, i32, i32, i32 } %1326, 2, !dbg !36
  %1330 = extractvalue { i32, i32, i32, i32 } %1326, 3, !dbg !36
  %1331 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1172, i32 %1173, i32 %1174, i32 %1175, i32 %571, i32 %572, i32 %573, i32 %574, i32 %672, i32 %673) #1, !dbg !36
  %1332 = extractvalue { i32, i32, i32, i32 } %1331, 0, !dbg !36
  %1333 = extractvalue { i32, i32, i32, i32 } %1331, 1, !dbg !36
  %1334 = extractvalue { i32, i32, i32, i32 } %1331, 2, !dbg !36
  %1335 = extractvalue { i32, i32, i32, i32 } %1331, 3, !dbg !36
  %1336 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1177, i32 %1178, i32 %1179, i32 %1180, i32 %571, i32 %572, i32 %573, i32 %574, i32 %688, i32 %689) #1, !dbg !36
  %1337 = extractvalue { i32, i32, i32, i32 } %1336, 0, !dbg !36
  %1338 = extractvalue { i32, i32, i32, i32 } %1336, 1, !dbg !36
  %1339 = extractvalue { i32, i32, i32, i32 } %1336, 2, !dbg !36
  %1340 = extractvalue { i32, i32, i32, i32 } %1336, 3, !dbg !36
  %1341 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1182, i32 %1183, i32 %1184, i32 %1185, i32 %571, i32 %572, i32 %573, i32 %574, i32 %704, i32 %705) #1, !dbg !36
  %1342 = extractvalue { i32, i32, i32, i32 } %1341, 0, !dbg !36
  %1343 = extractvalue { i32, i32, i32, i32 } %1341, 1, !dbg !36
  %1344 = extractvalue { i32, i32, i32, i32 } %1341, 2, !dbg !36
  %1345 = extractvalue { i32, i32, i32, i32 } %1341, 3, !dbg !36
  %1346 = add i32 %311, 1, !dbg !35
  %1347 = icmp slt i32 %1346, 2, !dbg !35
  %1348 = select i1 %1347, i32 %1346, i32 0, !dbg !35
  %1349 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1350 = add nuw nsw i64 %1349, %296
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %1350, !dbg !29
  %gep410 = getelementptr i8, ptr addrspace(1) %invariant.gep409, i64 %1350, !dbg !29
  %gep412 = getelementptr i8, ptr addrspace(1) %invariant.gep411, i64 %1350, !dbg !29
  %gep414 = getelementptr i8, ptr addrspace(1) %invariant.gep413, i64 %1350, !dbg !29
  %1351 = shl i32 %1348, 14, !dbg !30
  %1352 = sext i32 %1351 to i64, !dbg !30
  %1353 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %1352, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1354 = getelementptr inbounds nuw i8, ptr addrspace(3) %1353, i64 %89, !dbg !30
  %1355 = getelementptr inbounds nuw i8, ptr addrspace(3) %1353, i64 %93, !dbg !30
  %1356 = getelementptr inbounds nuw i8, ptr addrspace(3) %1353, i64 %97, !dbg !30
  %1357 = getelementptr inbounds nuw i8, ptr addrspace(3) %1353, i64 %101, !dbg !30
  %1358 = select i1 %440, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1354, ptr addrspace(1) %gep, i32 %1358) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1355, ptr addrspace(1) %gep410, i32 %1358) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1356, ptr addrspace(1) %gep412, i32 %1358) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1357, ptr addrspace(1) %gep414, i32 %1358) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep416 = getelementptr i8, ptr addrspace(1) %invariant.gep415, i64 %1350, !dbg !32
  %gep418 = getelementptr i8, ptr addrspace(1) %invariant.gep417, i64 %1350, !dbg !32
  %gep420 = getelementptr i8, ptr addrspace(1) %invariant.gep419, i64 %1350, !dbg !32
  %gep422 = getelementptr i8, ptr addrspace(1) %invariant.gep421, i64 %1350, !dbg !32
  %gep424 = getelementptr i8, ptr addrspace(1) %invariant.gep423, i64 %1350, !dbg !32
  %gep426 = getelementptr i8, ptr addrspace(1) %invariant.gep425, i64 %1350, !dbg !32
  %gep428 = getelementptr i8, ptr addrspace(1) %invariant.gep427, i64 %1350, !dbg !32
  %gep430 = getelementptr i8, ptr addrspace(1) %invariant.gep429, i64 %1350, !dbg !32
  %1359 = shl i32 %1348, 15, !dbg !33
  %1360 = sext i32 %1359 to i64, !dbg !33
  %1361 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %1360, !dbg !33
  %1362 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %89, !dbg !33
  %1363 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %93, !dbg !33
  %1364 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %97, !dbg !33
  %1365 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %101, !dbg !33
  %1366 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %133, !dbg !33
  %1367 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %137, !dbg !33
  %1368 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %141, !dbg !33
  %1369 = getelementptr inbounds nuw i8, ptr addrspace(3) %1361, i64 %145, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1362, ptr addrspace(1) %gep416, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1363, ptr addrspace(1) %gep418, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1364, ptr addrspace(1) %gep420, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1365, ptr addrspace(1) %gep422, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1366, ptr addrspace(1) %gep424, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1367, ptr addrspace(1) %gep426, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1368, ptr addrspace(1) %gep428, i32 %1358) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1369, ptr addrspace(1) %gep430, i32 %1358) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %1370, label %309, !dbg !35

1370:                                             ; preds = %309
  %1371 = shl i32 %15, 2, !dbg !38
  %1372 = and i32 %1371, 252, !dbg !38
  %1373 = or disjoint i32 %31, %1372, !dbg !22
  %.lobit13 = lshr i32 %15, 6, !dbg !19
  %1374 = and i32 %.lobit13, 3, !dbg !19
  %1375 = or disjoint i32 %1374, %14, !dbg !20
  %1376 = or disjoint i32 %1375, 124, !dbg !20
  %1377 = or disjoint i32 %1375, 120, !dbg !20
  %1378 = or disjoint i32 %1375, 116, !dbg !20
  %1379 = or disjoint i32 %1375, 112, !dbg !20
  %1380 = or disjoint i32 %1375, 108, !dbg !20
  %1381 = or disjoint i32 %1375, 104, !dbg !20
  %1382 = or disjoint i32 %1375, 100, !dbg !20
  %1383 = or disjoint i32 %1375, 96, !dbg !20
  %1384 = or disjoint i32 %1375, 92, !dbg !20
  %1385 = or disjoint i32 %1375, 88, !dbg !20
  %1386 = or disjoint i32 %1375, 84, !dbg !20
  %1387 = or disjoint i32 %1375, 80, !dbg !20
  %1388 = or disjoint i32 %1375, 76, !dbg !20
  %1389 = or disjoint i32 %1375, 72, !dbg !20
  %1390 = or disjoint i32 %1375, 68, !dbg !20
  %1391 = or disjoint i32 %1375, 64, !dbg !20
  %1392 = or disjoint i32 %1375, 60, !dbg !20
  %1393 = or disjoint i32 %1375, 56, !dbg !20
  %1394 = or disjoint i32 %1375, 52, !dbg !20
  %1395 = or disjoint i32 %1375, 48, !dbg !20
  %1396 = or disjoint i32 %1375, 44, !dbg !20
  %1397 = or disjoint i32 %1375, 40, !dbg !20
  %1398 = or disjoint i32 %1375, 36, !dbg !20
  %1399 = or disjoint i32 %1375, 32, !dbg !20
  %1400 = or disjoint i32 %1375, 28, !dbg !20
  %1401 = or disjoint i32 %1375, 24, !dbg !20
  %1402 = or disjoint i32 %1375, 20, !dbg !20
  %1403 = or disjoint i32 %1375, 16, !dbg !20
  %1404 = or disjoint i32 %1375, 12, !dbg !20
  %1405 = or disjoint i32 %1375, 8, !dbg !20
  %1406 = or disjoint i32 %1375, 4, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1407 = icmp slt i32 %1375, 4112, !dbg !39
  %1408 = icmp slt i32 %1406, 4112, !dbg !39
  %1409 = icmp slt i32 %1405, 4112, !dbg !39
  %1410 = icmp slt i32 %1404, 4112, !dbg !39
  %1411 = icmp slt i32 %1403, 4112, !dbg !39
  %1412 = icmp slt i32 %1402, 4112, !dbg !39
  %1413 = icmp slt i32 %1401, 4112, !dbg !39
  %1414 = icmp slt i32 %1400, 4112, !dbg !39
  %1415 = icmp slt i32 %1399, 4112, !dbg !39
  %1416 = icmp slt i32 %1398, 4112, !dbg !39
  %1417 = icmp slt i32 %1397, 4112, !dbg !39
  %1418 = icmp slt i32 %1396, 4112, !dbg !39
  %1419 = icmp slt i32 %1395, 4112, !dbg !39
  %1420 = icmp slt i32 %1394, 4112, !dbg !39
  %1421 = icmp slt i32 %1393, 4112, !dbg !39
  %1422 = icmp slt i32 %1392, 4112, !dbg !39
  %1423 = icmp slt i32 %1391, 4112, !dbg !39
  %1424 = icmp slt i32 %1390, 4112, !dbg !39
  %1425 = icmp slt i32 %1389, 4112, !dbg !39
  %1426 = icmp slt i32 %1388, 4112, !dbg !39
  %1427 = icmp slt i32 %1387, 4112, !dbg !39
  %1428 = icmp slt i32 %1386, 4112, !dbg !39
  %1429 = icmp slt i32 %1385, 4112, !dbg !39
  %1430 = icmp slt i32 %1384, 4112, !dbg !39
  %1431 = icmp slt i32 %1383, 4112, !dbg !39
  %1432 = icmp slt i32 %1382, 4112, !dbg !39
  %1433 = icmp slt i32 %1381, 4112, !dbg !39
  %1434 = icmp slt i32 %1380, 4112, !dbg !39
  %1435 = icmp slt i32 %1379, 4112, !dbg !39
  %1436 = icmp slt i32 %1378, 4112, !dbg !39
  %1437 = icmp slt i32 %1377, 4112, !dbg !39
  %1438 = icmp slt i32 %1376, 4112, !dbg !39
  %1439 = icmp slt i32 %1373, 12288, !dbg !40
  %1440 = and i1 %1407, %1439, !dbg !41
  %1441 = and i1 %1408, %1439, !dbg !41
  %1442 = and i1 %1409, %1439, !dbg !41
  %1443 = and i1 %1410, %1439, !dbg !41
  %1444 = and i1 %1411, %1439, !dbg !41
  %1445 = and i1 %1412, %1439, !dbg !41
  %1446 = and i1 %1413, %1439, !dbg !41
  %1447 = and i1 %1414, %1439, !dbg !41
  %1448 = and i1 %1415, %1439, !dbg !41
  %1449 = and i1 %1416, %1439, !dbg !41
  %1450 = and i1 %1417, %1439, !dbg !41
  %1451 = and i1 %1418, %1439, !dbg !41
  %1452 = and i1 %1419, %1439, !dbg !41
  %1453 = and i1 %1420, %1439, !dbg !41
  %1454 = and i1 %1421, %1439, !dbg !41
  %1455 = and i1 %1422, %1439, !dbg !41
  %1456 = and i1 %1423, %1439, !dbg !41
  %1457 = and i1 %1424, %1439, !dbg !41
  %1458 = and i1 %1425, %1439, !dbg !41
  %1459 = and i1 %1426, %1439, !dbg !41
  %1460 = and i1 %1427, %1439, !dbg !41
  %1461 = and i1 %1428, %1439, !dbg !41
  %1462 = and i1 %1429, %1439, !dbg !41
  %1463 = and i1 %1430, %1439, !dbg !41
  %1464 = and i1 %1431, %1439, !dbg !41
  %1465 = and i1 %1432, %1439, !dbg !41
  %1466 = and i1 %1433, %1439, !dbg !41
  %1467 = and i1 %1434, %1439, !dbg !41
  %1468 = and i1 %1435, %1439, !dbg !41
  %1469 = and i1 %1436, %1439, !dbg !41
  %1470 = and i1 %1437, %1439, !dbg !41
  %1471 = and i1 %1438, %1439, !dbg !41
  %1472 = mul i32 %1375, 12288, !dbg !42
  %1473 = mul i32 %1406, 12288, !dbg !42
  %1474 = mul i32 %1405, 12288, !dbg !42
  %1475 = mul i32 %1404, 12288, !dbg !42
  %1476 = mul i32 %1403, 12288, !dbg !42
  %1477 = mul i32 %1402, 12288, !dbg !42
  %1478 = mul i32 %1401, 12288, !dbg !42
  %1479 = mul i32 %1400, 12288, !dbg !42
  %1480 = mul i32 %1399, 12288, !dbg !42
  %1481 = mul i32 %1398, 12288, !dbg !42
  %1482 = mul i32 %1397, 12288, !dbg !42
  %1483 = mul i32 %1396, 12288, !dbg !42
  %1484 = mul i32 %1395, 12288, !dbg !42
  %1485 = mul i32 %1394, 12288, !dbg !42
  %1486 = mul i32 %1393, 12288, !dbg !42
  %1487 = mul i32 %1392, 12288, !dbg !42
  %1488 = mul i32 %1391, 12288, !dbg !42
  %1489 = mul i32 %1390, 12288, !dbg !42
  %1490 = mul i32 %1389, 12288, !dbg !42
  %1491 = mul i32 %1388, 12288, !dbg !42
  %1492 = mul i32 %1387, 12288, !dbg !42
  %1493 = mul i32 %1386, 12288, !dbg !42
  %1494 = mul i32 %1385, 12288, !dbg !42
  %1495 = mul i32 %1384, 12288, !dbg !42
  %1496 = mul i32 %1383, 12288, !dbg !42
  %1497 = mul i32 %1382, 12288, !dbg !42
  %1498 = mul i32 %1381, 12288, !dbg !42
  %1499 = mul i32 %1380, 12288, !dbg !42
  %1500 = mul i32 %1379, 12288, !dbg !42
  %1501 = mul i32 %1378, 12288, !dbg !42
  %1502 = mul i32 %1377, 12288, !dbg !42
  %1503 = mul i32 %1376, 12288, !dbg !42
  %1504 = add i32 %1472, %1373, !dbg !43
  %1505 = add i32 %1473, %1373, !dbg !43
  %1506 = add i32 %1474, %1373, !dbg !43
  %1507 = add i32 %1475, %1373, !dbg !43
  %1508 = add i32 %1476, %1373, !dbg !43
  %1509 = add i32 %1477, %1373, !dbg !43
  %1510 = add i32 %1478, %1373, !dbg !43
  %1511 = add i32 %1479, %1373, !dbg !43
  %1512 = add i32 %1480, %1373, !dbg !43
  %1513 = add i32 %1481, %1373, !dbg !43
  %1514 = add i32 %1482, %1373, !dbg !43
  %1515 = add i32 %1483, %1373, !dbg !43
  %1516 = add i32 %1484, %1373, !dbg !43
  %1517 = add i32 %1485, %1373, !dbg !43
  %1518 = add i32 %1486, %1373, !dbg !43
  %1519 = add i32 %1487, %1373, !dbg !43
  %1520 = add i32 %1488, %1373, !dbg !43
  %1521 = add i32 %1489, %1373, !dbg !43
  %1522 = add i32 %1490, %1373, !dbg !43
  %1523 = add i32 %1491, %1373, !dbg !43
  %1524 = add i32 %1492, %1373, !dbg !43
  %1525 = add i32 %1493, %1373, !dbg !43
  %1526 = add i32 %1494, %1373, !dbg !43
  %1527 = add i32 %1495, %1373, !dbg !43
  %1528 = add i32 %1496, %1373, !dbg !43
  %1529 = add i32 %1497, %1373, !dbg !43
  %1530 = add i32 %1498, %1373, !dbg !43
  %1531 = add i32 %1499, %1373, !dbg !43
  %1532 = add i32 %1500, %1373, !dbg !43
  %1533 = add i32 %1501, %1373, !dbg !43
  %1534 = add i32 %1502, %1373, !dbg !43
  %1535 = add i32 %1503, %1373, !dbg !43
  %1536 = sext i32 %1504 to i64, !dbg !44
  %1537 = getelementptr i32, ptr addrspace(1) %2, i64 %1536, !dbg !44
  %1538 = sext i32 %1505 to i64, !dbg !44
  %1539 = getelementptr i32, ptr addrspace(1) %2, i64 %1538, !dbg !44
  %1540 = sext i32 %1506 to i64, !dbg !44
  %1541 = getelementptr i32, ptr addrspace(1) %2, i64 %1540, !dbg !44
  %1542 = sext i32 %1507 to i64, !dbg !44
  %1543 = getelementptr i32, ptr addrspace(1) %2, i64 %1542, !dbg !44
  %1544 = sext i32 %1508 to i64, !dbg !44
  %1545 = getelementptr i32, ptr addrspace(1) %2, i64 %1544, !dbg !44
  %1546 = sext i32 %1509 to i64, !dbg !44
  %1547 = getelementptr i32, ptr addrspace(1) %2, i64 %1546, !dbg !44
  %1548 = sext i32 %1510 to i64, !dbg !44
  %1549 = getelementptr i32, ptr addrspace(1) %2, i64 %1548, !dbg !44
  %1550 = sext i32 %1511 to i64, !dbg !44
  %1551 = getelementptr i32, ptr addrspace(1) %2, i64 %1550, !dbg !44
  %1552 = sext i32 %1512 to i64, !dbg !44
  %1553 = getelementptr i32, ptr addrspace(1) %2, i64 %1552, !dbg !44
  %1554 = sext i32 %1513 to i64, !dbg !44
  %1555 = getelementptr i32, ptr addrspace(1) %2, i64 %1554, !dbg !44
  %1556 = sext i32 %1514 to i64, !dbg !44
  %1557 = getelementptr i32, ptr addrspace(1) %2, i64 %1556, !dbg !44
  %1558 = sext i32 %1515 to i64, !dbg !44
  %1559 = getelementptr i32, ptr addrspace(1) %2, i64 %1558, !dbg !44
  %1560 = sext i32 %1516 to i64, !dbg !44
  %1561 = getelementptr i32, ptr addrspace(1) %2, i64 %1560, !dbg !44
  %1562 = sext i32 %1517 to i64, !dbg !44
  %1563 = getelementptr i32, ptr addrspace(1) %2, i64 %1562, !dbg !44
  %1564 = sext i32 %1518 to i64, !dbg !44
  %1565 = getelementptr i32, ptr addrspace(1) %2, i64 %1564, !dbg !44
  %1566 = sext i32 %1519 to i64, !dbg !44
  %1567 = getelementptr i32, ptr addrspace(1) %2, i64 %1566, !dbg !44
  %1568 = sext i32 %1520 to i64, !dbg !44
  %1569 = getelementptr i32, ptr addrspace(1) %2, i64 %1568, !dbg !44
  %1570 = sext i32 %1521 to i64, !dbg !44
  %1571 = getelementptr i32, ptr addrspace(1) %2, i64 %1570, !dbg !44
  %1572 = sext i32 %1522 to i64, !dbg !44
  %1573 = getelementptr i32, ptr addrspace(1) %2, i64 %1572, !dbg !44
  %1574 = sext i32 %1523 to i64, !dbg !44
  %1575 = getelementptr i32, ptr addrspace(1) %2, i64 %1574, !dbg !44
  %1576 = sext i32 %1524 to i64, !dbg !44
  %1577 = getelementptr i32, ptr addrspace(1) %2, i64 %1576, !dbg !44
  %1578 = sext i32 %1525 to i64, !dbg !44
  %1579 = getelementptr i32, ptr addrspace(1) %2, i64 %1578, !dbg !44
  %1580 = sext i32 %1526 to i64, !dbg !44
  %1581 = getelementptr i32, ptr addrspace(1) %2, i64 %1580, !dbg !44
  %1582 = sext i32 %1527 to i64, !dbg !44
  %1583 = getelementptr i32, ptr addrspace(1) %2, i64 %1582, !dbg !44
  %1584 = sext i32 %1528 to i64, !dbg !44
  %1585 = getelementptr i32, ptr addrspace(1) %2, i64 %1584, !dbg !44
  %1586 = sext i32 %1529 to i64, !dbg !44
  %1587 = getelementptr i32, ptr addrspace(1) %2, i64 %1586, !dbg !44
  %1588 = sext i32 %1530 to i64, !dbg !44
  %1589 = getelementptr i32, ptr addrspace(1) %2, i64 %1588, !dbg !44
  %1590 = sext i32 %1531 to i64, !dbg !44
  %1591 = getelementptr i32, ptr addrspace(1) %2, i64 %1590, !dbg !44
  %1592 = sext i32 %1532 to i64, !dbg !44
  %1593 = getelementptr i32, ptr addrspace(1) %2, i64 %1592, !dbg !44
  %1594 = sext i32 %1533 to i64, !dbg !44
  %1595 = getelementptr i32, ptr addrspace(1) %2, i64 %1594, !dbg !44
  %1596 = sext i32 %1534 to i64, !dbg !44
  %1597 = getelementptr i32, ptr addrspace(1) %2, i64 %1596, !dbg !44
  %1598 = sext i32 %1535 to i64, !dbg !44
  %1599 = getelementptr i32, ptr addrspace(1) %2, i64 %1598, !dbg !44
  %1600 = shl i32 %15, 1, !dbg !45
  %1601 = and i32 %1600, 6, !dbg !45
  %1602 = shl i32 %15, 6, !dbg !45
  %1603 = and i32 %1602, 768, !dbg !45
  %1604 = or disjoint i32 %1603, %1601, !dbg !45
  %1605 = shl nuw nsw i32 %17, 6, !dbg !45
  %1606 = or disjoint i32 %1604, %1605, !dbg !45
  %1607 = and i32 %248, 24, !dbg !45
  %1608 = or disjoint i32 %1606, %1607, !dbg !45
  %1609 = shl nuw nsw i32 %21, 5, !dbg !45
  %1610 = or disjoint i32 %1608, %1609, !dbg !45
  %1611 = and i32 %1371, 1020, !dbg !45
  %1612 = lshr i32 %1610, 6, !dbg !45
  %1613 = add nuw nsw i32 %1612, %1610, !dbg !45
  %1614 = zext nneg i32 %1613 to i64, !dbg !45
  %1615 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1614, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1615, i32 %1187, i32 %1188, i1 true) #1, !dbg !45
  %1616 = or disjoint i32 %1610, 2048, !dbg !45
  %1617 = lshr i32 %1616, 6, !dbg !45
  %1618 = add nuw nsw i32 %1617, %1616, !dbg !45
  %1619 = zext nneg i32 %1618 to i64, !dbg !45
  %1620 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1619, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1620, i32 %1189, i32 %1190, i1 true) #1, !dbg !45
  %1621 = or disjoint i32 %1610, 32, !dbg !45
  %1622 = add nuw nsw i32 %1621, %1612, !dbg !45
  %1623 = zext nneg i32 %1622 to i64, !dbg !45
  %1624 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1623, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1624, i32 %1192, i32 %1193, i1 true) #1, !dbg !45
  %1625 = or disjoint i32 %1610, 2080, !dbg !45
  %1626 = lshr i32 %1625, 6, !dbg !45
  %1627 = add nuw nsw i32 %1626, %1625, !dbg !45
  %1628 = zext nneg i32 %1627 to i64, !dbg !45
  %1629 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1628, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1629, i32 %1194, i32 %1195, i1 true) #1, !dbg !45
  %1630 = or disjoint i32 %1610, 64, !dbg !45
  %1631 = add nuw nsw i32 %1630, %1612, !dbg !45
  %1632 = zext nneg i32 %1631 to i64, !dbg !45
  %1633 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1632, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1633, i32 %1197, i32 %1198, i1 true) #1, !dbg !45
  %1634 = or disjoint i32 %1610, 2112, !dbg !45
  %1635 = lshr i32 %1634, 6, !dbg !45
  %1636 = and i32 %1635, 67108860, !dbg !45
  %1637 = add nuw nsw i32 %1636, %1634, !dbg !45
  %1638 = zext nneg i32 %1637 to i64, !dbg !45
  %1639 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1638, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1639, i32 %1199, i32 %1200, i1 true) #1, !dbg !45
  %1640 = or disjoint i32 %1610, 96, !dbg !45
  %1641 = add nuw nsw i32 %1640, %1612, !dbg !45
  %1642 = zext nneg i32 %1641 to i64, !dbg !45
  %1643 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1642, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1643, i32 %1202, i32 %1203, i1 true) #1, !dbg !45
  %1644 = or disjoint i32 %1610, 2144, !dbg !45
  %1645 = lshr i32 %1644, 6, !dbg !45
  %1646 = and i32 %1645, 67108860, !dbg !45
  %1647 = add nuw nsw i32 %1646, %1644, !dbg !45
  %1648 = zext nneg i32 %1647 to i64, !dbg !45
  %1649 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1648, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1649, i32 %1204, i32 %1205, i1 true) #1, !dbg !45
  %1650 = or disjoint i32 %1610, 128, !dbg !45
  %1651 = add nuw nsw i32 %1650, %1612, !dbg !45
  %1652 = zext nneg i32 %1651 to i64, !dbg !45
  %1653 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1652, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1653, i32 %1207, i32 %1208, i1 true) #1, !dbg !45
  %1654 = or disjoint i32 %1610, 2176, !dbg !45
  %1655 = lshr i32 %1654, 6, !dbg !45
  %1656 = and i32 %1655, 67108860, !dbg !45
  %1657 = add nuw nsw i32 %1656, %1654, !dbg !45
  %1658 = zext nneg i32 %1657 to i64, !dbg !45
  %1659 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1658, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1659, i32 %1209, i32 %1210, i1 true) #1, !dbg !45
  %1660 = or disjoint i32 %1610, 160, !dbg !45
  %1661 = add nuw nsw i32 %1660, %1612, !dbg !45
  %1662 = zext nneg i32 %1661 to i64, !dbg !45
  %1663 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1662, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1663, i32 %1212, i32 %1213, i1 true) #1, !dbg !45
  %1664 = or disjoint i32 %1610, 2208, !dbg !45
  %1665 = lshr i32 %1664, 6, !dbg !45
  %1666 = and i32 %1665, 67108860, !dbg !45
  %1667 = add nuw nsw i32 %1666, %1664, !dbg !45
  %1668 = zext nneg i32 %1667 to i64, !dbg !45
  %1669 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1668, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1669, i32 %1214, i32 %1215, i1 true) #1, !dbg !45
  %1670 = or disjoint i32 %1610, 192, !dbg !45
  %1671 = add nuw nsw i32 %1670, %1612, !dbg !45
  %1672 = zext nneg i32 %1671 to i64, !dbg !45
  %1673 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1672, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1673, i32 %1217, i32 %1218, i1 true) #1, !dbg !45
  %1674 = or disjoint i32 %1610, 2240, !dbg !45
  %1675 = lshr i32 %1674, 6, !dbg !45
  %1676 = and i32 %1675, 67108860, !dbg !45
  %1677 = add nuw nsw i32 %1676, %1674, !dbg !45
  %1678 = zext nneg i32 %1677 to i64, !dbg !45
  %1679 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1678, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1679, i32 %1219, i32 %1220, i1 true) #1, !dbg !45
  %1680 = or disjoint i32 %1610, 224, !dbg !45
  %1681 = add nuw nsw i32 %1680, %1612, !dbg !45
  %1682 = zext nneg i32 %1681 to i64, !dbg !45
  %1683 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1682, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1683, i32 %1222, i32 %1223, i1 true) #1, !dbg !45
  %1684 = or disjoint i32 %1610, 2272, !dbg !45
  %1685 = lshr i32 %1684, 6, !dbg !45
  %1686 = and i32 %1685, 67108860, !dbg !45
  %1687 = add nuw nsw i32 %1686, %1684, !dbg !45
  %1688 = zext nneg i32 %1687 to i64, !dbg !45
  %1689 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1688, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1689, i32 %1224, i32 %1225, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1690 = lshr i32 %1371, 6, !dbg !45
  %1691 = and i32 %1690, 12, !dbg !45
  %1692 = add nuw nsw i32 %1691, %1611, !dbg !45
  %1693 = zext nneg i32 %1692 to i64, !dbg !45
  %1694 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1693, !dbg !45
  %1695 = load <4 x i32>, ptr addrspace(3) %1694, align 16, !dbg !45
  %1696 = or disjoint i32 %1611, 1024, !dbg !45
  %1697 = lshr i32 %1696, 6, !dbg !45
  %1698 = and i32 %1697, 28, !dbg !45
  %1699 = add nuw nsw i32 %1698, %1696, !dbg !45
  %1700 = zext nneg i32 %1699 to i64, !dbg !45
  %1701 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1700, !dbg !45
  %1702 = load <4 x i32>, ptr addrspace(3) %1701, align 16, !dbg !45
  %1703 = or disjoint i32 %1611, 2048, !dbg !45
  %1704 = lshr i32 %1703, 6, !dbg !45
  %1705 = and i32 %1704, 44, !dbg !45
  %1706 = add nuw nsw i32 %1705, %1703, !dbg !45
  %1707 = zext nneg i32 %1706 to i64, !dbg !45
  %1708 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1707, !dbg !45
  %1709 = load <4 x i32>, ptr addrspace(3) %1708, align 16, !dbg !45
  %1710 = or disjoint i32 %1611, 3072, !dbg !45
  %1711 = lshr i32 %1710, 6, !dbg !45
  %1712 = and i32 %1711, 60, !dbg !45
  %1713 = add nuw nsw i32 %1712, %1710, !dbg !45
  %1714 = zext nneg i32 %1713 to i64, !dbg !45
  %1715 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1714, !dbg !45
  %1716 = load <4 x i32>, ptr addrspace(3) %1715, align 16, !dbg !45
  %1717 = or disjoint i32 %1611, 4096, !dbg !45
  %1718 = lshr i32 %1717, 6, !dbg !45
  %1719 = and i32 %1718, 76, !dbg !45
  %1720 = add nuw nsw i32 %1719, %1717, !dbg !45
  %1721 = zext nneg i32 %1720 to i64, !dbg !45
  %1722 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1721, !dbg !45
  %1723 = load <4 x i32>, ptr addrspace(3) %1722, align 16, !dbg !45
  %1724 = or disjoint i32 %1611, 5120, !dbg !45
  %1725 = lshr i32 %1724, 6, !dbg !45
  %1726 = and i32 %1725, 92, !dbg !45
  %1727 = add nuw nsw i32 %1726, %1724, !dbg !45
  %1728 = zext nneg i32 %1727 to i64, !dbg !45
  %1729 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1728, !dbg !45
  %1730 = load <4 x i32>, ptr addrspace(3) %1729, align 16, !dbg !45
  %1731 = or disjoint i32 %1611, 6144, !dbg !45
  %1732 = lshr i32 %1731, 6, !dbg !45
  %1733 = and i32 %1732, 108, !dbg !45
  %1734 = add nuw nsw i32 %1733, %1731, !dbg !45
  %1735 = zext nneg i32 %1734 to i64, !dbg !45
  %1736 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1735, !dbg !45
  %1737 = load <4 x i32>, ptr addrspace(3) %1736, align 16, !dbg !45
  %1738 = or disjoint i32 %1611, 7168, !dbg !45
  %1739 = lshr i32 %1738, 6, !dbg !45
  %1740 = and i32 %1739, 124, !dbg !45
  %1741 = add nuw nsw i32 %1740, %1738, !dbg !45
  %1742 = zext nneg i32 %1741 to i64, !dbg !45
  %1743 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1742, !dbg !45
  %1744 = load <4 x i32>, ptr addrspace(3) %1743, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1615, i32 %1227, i32 %1228, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1620, i32 %1229, i32 %1230, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1624, i32 %1232, i32 %1233, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1629, i32 %1234, i32 %1235, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1633, i32 %1237, i32 %1238, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1639, i32 %1239, i32 %1240, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1643, i32 %1242, i32 %1243, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1649, i32 %1244, i32 %1245, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1653, i32 %1247, i32 %1248, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1659, i32 %1249, i32 %1250, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1663, i32 %1252, i32 %1253, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1669, i32 %1254, i32 %1255, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1673, i32 %1257, i32 %1258, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1679, i32 %1259, i32 %1260, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1683, i32 %1262, i32 %1263, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1689, i32 %1264, i32 %1265, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1745 = load <4 x i32>, ptr addrspace(3) %1694, align 16, !dbg !45
  %1746 = load <4 x i32>, ptr addrspace(3) %1701, align 16, !dbg !45
  %1747 = load <4 x i32>, ptr addrspace(3) %1708, align 16, !dbg !45
  %1748 = load <4 x i32>, ptr addrspace(3) %1715, align 16, !dbg !45
  %1749 = load <4 x i32>, ptr addrspace(3) %1722, align 16, !dbg !45
  %1750 = load <4 x i32>, ptr addrspace(3) %1729, align 16, !dbg !45
  %1751 = load <4 x i32>, ptr addrspace(3) %1736, align 16, !dbg !45
  %1752 = load <4 x i32>, ptr addrspace(3) %1743, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1615, i32 %1267, i32 %1268, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1620, i32 %1269, i32 %1270, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1624, i32 %1272, i32 %1273, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1629, i32 %1274, i32 %1275, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1633, i32 %1277, i32 %1278, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1639, i32 %1279, i32 %1280, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1643, i32 %1282, i32 %1283, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1649, i32 %1284, i32 %1285, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1653, i32 %1287, i32 %1288, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1659, i32 %1289, i32 %1290, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1663, i32 %1292, i32 %1293, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1669, i32 %1294, i32 %1295, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1673, i32 %1297, i32 %1298, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1679, i32 %1299, i32 %1300, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1683, i32 %1302, i32 %1303, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1689, i32 %1304, i32 %1305, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1753 = load <4 x i32>, ptr addrspace(3) %1694, align 16, !dbg !45
  %1754 = load <4 x i32>, ptr addrspace(3) %1701, align 16, !dbg !45
  %1755 = load <4 x i32>, ptr addrspace(3) %1708, align 16, !dbg !45
  %1756 = load <4 x i32>, ptr addrspace(3) %1715, align 16, !dbg !45
  %1757 = load <4 x i32>, ptr addrspace(3) %1722, align 16, !dbg !45
  %1758 = load <4 x i32>, ptr addrspace(3) %1729, align 16, !dbg !45
  %1759 = load <4 x i32>, ptr addrspace(3) %1736, align 16, !dbg !45
  %1760 = load <4 x i32>, ptr addrspace(3) %1743, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1615, i32 %1307, i32 %1308, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1620, i32 %1309, i32 %1310, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1624, i32 %1312, i32 %1313, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1629, i32 %1314, i32 %1315, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1633, i32 %1317, i32 %1318, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1639, i32 %1319, i32 %1320, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1643, i32 %1322, i32 %1323, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1649, i32 %1324, i32 %1325, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1653, i32 %1327, i32 %1328, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1659, i32 %1329, i32 %1330, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1663, i32 %1332, i32 %1333, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1669, i32 %1334, i32 %1335, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1673, i32 %1337, i32 %1338, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1679, i32 %1339, i32 %1340, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1683, i32 %1342, i32 %1343, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1689, i32 %1344, i32 %1345, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1761 = load <4 x i32>, ptr addrspace(3) %1694, align 16, !dbg !45
  %1762 = load <4 x i32>, ptr addrspace(3) %1701, align 16, !dbg !45
  %1763 = load <4 x i32>, ptr addrspace(3) %1708, align 16, !dbg !45
  %1764 = load <4 x i32>, ptr addrspace(3) %1715, align 16, !dbg !45
  %1765 = load <4 x i32>, ptr addrspace(3) %1722, align 16, !dbg !45
  %1766 = load <4 x i32>, ptr addrspace(3) %1729, align 16, !dbg !45
  %1767 = load <4 x i32>, ptr addrspace(3) %1736, align 16, !dbg !45
  %1768 = load <4 x i32>, ptr addrspace(3) %1743, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %1695, i64 0, !dbg !45
  %.extract4 = extractelement <4 x i32> %1695, i64 1, !dbg !45
  %.extract5 = extractelement <4 x i32> %1695, i64 2, !dbg !45
  %.extract6 = extractelement <4 x i32> %1695, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %1537, i1 %1440) #1, !dbg !45
  %.extract7 = extractelement <4 x i32> %1702, i64 0, !dbg !45
  %.extract8 = extractelement <4 x i32> %1702, i64 1, !dbg !45
  %.extract9 = extractelement <4 x i32> %1702, i64 2, !dbg !45
  %.extract10 = extractelement <4 x i32> %1702, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %1539, i1 %1441) #1, !dbg !45
  %.extract11 = extractelement <4 x i32> %1709, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %1709, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %1709, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %1709, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %1541, i1 %1442) #1, !dbg !45
  %.extract15 = extractelement <4 x i32> %1716, i64 0, !dbg !45
  %.extract16 = extractelement <4 x i32> %1716, i64 1, !dbg !45
  %.extract17 = extractelement <4 x i32> %1716, i64 2, !dbg !45
  %.extract18 = extractelement <4 x i32> %1716, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %1543, i1 %1443) #1, !dbg !45
  %.extract19 = extractelement <4 x i32> %1723, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %1723, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %1723, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %1723, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %1545, i1 %1444) #1, !dbg !45
  %.extract23 = extractelement <4 x i32> %1730, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %1730, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %1730, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %1730, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %1547, i1 %1445) #1, !dbg !45
  %.extract27 = extractelement <4 x i32> %1737, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %1737, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %1737, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %1737, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %1549, i1 %1446) #1, !dbg !45
  %.extract31 = extractelement <4 x i32> %1744, i64 0, !dbg !45
  %.extract32 = extractelement <4 x i32> %1744, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %1744, i64 2, !dbg !45
  %.extract34 = extractelement <4 x i32> %1744, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %1551, i1 %1447) #1, !dbg !45
  %.extract35 = extractelement <4 x i32> %1745, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %1745, i64 1, !dbg !45
  %.extract37 = extractelement <4 x i32> %1745, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %1745, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %1553, i1 %1448) #1, !dbg !45
  %.extract39 = extractelement <4 x i32> %1746, i64 0, !dbg !45
  %.extract40 = extractelement <4 x i32> %1746, i64 1, !dbg !45
  %.extract41 = extractelement <4 x i32> %1746, i64 2, !dbg !45
  %.extract42 = extractelement <4 x i32> %1746, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %1555, i1 %1449) #1, !dbg !45
  %.extract43 = extractelement <4 x i32> %1747, i64 0, !dbg !45
  %.extract44 = extractelement <4 x i32> %1747, i64 1, !dbg !45
  %.extract45 = extractelement <4 x i32> %1747, i64 2, !dbg !45
  %.extract46 = extractelement <4 x i32> %1747, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %1557, i1 %1450) #1, !dbg !45
  %.extract47 = extractelement <4 x i32> %1748, i64 0, !dbg !45
  %.extract48 = extractelement <4 x i32> %1748, i64 1, !dbg !45
  %.extract49 = extractelement <4 x i32> %1748, i64 2, !dbg !45
  %.extract50 = extractelement <4 x i32> %1748, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %1559, i1 %1451) #1, !dbg !45
  %.extract51 = extractelement <4 x i32> %1749, i64 0, !dbg !45
  %.extract52 = extractelement <4 x i32> %1749, i64 1, !dbg !45
  %.extract53 = extractelement <4 x i32> %1749, i64 2, !dbg !45
  %.extract54 = extractelement <4 x i32> %1749, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %1561, i1 %1452) #1, !dbg !45
  %.extract55 = extractelement <4 x i32> %1750, i64 0, !dbg !45
  %.extract56 = extractelement <4 x i32> %1750, i64 1, !dbg !45
  %.extract57 = extractelement <4 x i32> %1750, i64 2, !dbg !45
  %.extract58 = extractelement <4 x i32> %1750, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %1563, i1 %1453) #1, !dbg !45
  %.extract59 = extractelement <4 x i32> %1751, i64 0, !dbg !45
  %.extract60 = extractelement <4 x i32> %1751, i64 1, !dbg !45
  %.extract61 = extractelement <4 x i32> %1751, i64 2, !dbg !45
  %.extract62 = extractelement <4 x i32> %1751, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %1565, i1 %1454) #1, !dbg !45
  %.extract63 = extractelement <4 x i32> %1752, i64 0, !dbg !45
  %.extract64 = extractelement <4 x i32> %1752, i64 1, !dbg !45
  %.extract65 = extractelement <4 x i32> %1752, i64 2, !dbg !45
  %.extract66 = extractelement <4 x i32> %1752, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %1567, i1 %1455) #1, !dbg !45
  %.extract67 = extractelement <4 x i32> %1753, i64 0, !dbg !45
  %.extract68 = extractelement <4 x i32> %1753, i64 1, !dbg !45
  %.extract69 = extractelement <4 x i32> %1753, i64 2, !dbg !45
  %.extract70 = extractelement <4 x i32> %1753, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract68, i32 %.extract69, i32 %.extract70, ptr addrspace(1) %1569, i1 %1456) #1, !dbg !45
  %.extract71 = extractelement <4 x i32> %1754, i64 0, !dbg !45
  %.extract72 = extractelement <4 x i32> %1754, i64 1, !dbg !45
  %.extract73 = extractelement <4 x i32> %1754, i64 2, !dbg !45
  %.extract74 = extractelement <4 x i32> %1754, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract72, i32 %.extract73, i32 %.extract74, ptr addrspace(1) %1571, i1 %1457) #1, !dbg !45
  %.extract75 = extractelement <4 x i32> %1755, i64 0, !dbg !45
  %.extract76 = extractelement <4 x i32> %1755, i64 1, !dbg !45
  %.extract77 = extractelement <4 x i32> %1755, i64 2, !dbg !45
  %.extract78 = extractelement <4 x i32> %1755, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract76, i32 %.extract77, i32 %.extract78, ptr addrspace(1) %1573, i1 %1458) #1, !dbg !45
  %.extract79 = extractelement <4 x i32> %1756, i64 0, !dbg !45
  %.extract80 = extractelement <4 x i32> %1756, i64 1, !dbg !45
  %.extract81 = extractelement <4 x i32> %1756, i64 2, !dbg !45
  %.extract82 = extractelement <4 x i32> %1756, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract80, i32 %.extract81, i32 %.extract82, ptr addrspace(1) %1575, i1 %1459) #1, !dbg !45
  %.extract83 = extractelement <4 x i32> %1757, i64 0, !dbg !45
  %.extract84 = extractelement <4 x i32> %1757, i64 1, !dbg !45
  %.extract85 = extractelement <4 x i32> %1757, i64 2, !dbg !45
  %.extract86 = extractelement <4 x i32> %1757, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract83, i32 %.extract84, i32 %.extract85, i32 %.extract86, ptr addrspace(1) %1577, i1 %1460) #1, !dbg !45
  %.extract87 = extractelement <4 x i32> %1758, i64 0, !dbg !45
  %.extract88 = extractelement <4 x i32> %1758, i64 1, !dbg !45
  %.extract89 = extractelement <4 x i32> %1758, i64 2, !dbg !45
  %.extract90 = extractelement <4 x i32> %1758, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract88, i32 %.extract89, i32 %.extract90, ptr addrspace(1) %1579, i1 %1461) #1, !dbg !45
  %.extract91 = extractelement <4 x i32> %1759, i64 0, !dbg !45
  %.extract92 = extractelement <4 x i32> %1759, i64 1, !dbg !45
  %.extract93 = extractelement <4 x i32> %1759, i64 2, !dbg !45
  %.extract94 = extractelement <4 x i32> %1759, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract91, i32 %.extract92, i32 %.extract93, i32 %.extract94, ptr addrspace(1) %1581, i1 %1462) #1, !dbg !45
  %.extract95 = extractelement <4 x i32> %1760, i64 0, !dbg !45
  %.extract96 = extractelement <4 x i32> %1760, i64 1, !dbg !45
  %.extract97 = extractelement <4 x i32> %1760, i64 2, !dbg !45
  %.extract98 = extractelement <4 x i32> %1760, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract95, i32 %.extract96, i32 %.extract97, i32 %.extract98, ptr addrspace(1) %1583, i1 %1463) #1, !dbg !45
  %.extract99 = extractelement <4 x i32> %1761, i64 0, !dbg !45
  %.extract100 = extractelement <4 x i32> %1761, i64 1, !dbg !45
  %.extract101 = extractelement <4 x i32> %1761, i64 2, !dbg !45
  %.extract102 = extractelement <4 x i32> %1761, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract99, i32 %.extract100, i32 %.extract101, i32 %.extract102, ptr addrspace(1) %1585, i1 %1464) #1, !dbg !45
  %.extract103 = extractelement <4 x i32> %1762, i64 0, !dbg !45
  %.extract104 = extractelement <4 x i32> %1762, i64 1, !dbg !45
  %.extract105 = extractelement <4 x i32> %1762, i64 2, !dbg !45
  %.extract106 = extractelement <4 x i32> %1762, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract103, i32 %.extract104, i32 %.extract105, i32 %.extract106, ptr addrspace(1) %1587, i1 %1465) #1, !dbg !45
  %.extract107 = extractelement <4 x i32> %1763, i64 0, !dbg !45
  %.extract108 = extractelement <4 x i32> %1763, i64 1, !dbg !45
  %.extract109 = extractelement <4 x i32> %1763, i64 2, !dbg !45
  %.extract110 = extractelement <4 x i32> %1763, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract107, i32 %.extract108, i32 %.extract109, i32 %.extract110, ptr addrspace(1) %1589, i1 %1466) #1, !dbg !45
  %.extract111 = extractelement <4 x i32> %1764, i64 0, !dbg !45
  %.extract112 = extractelement <4 x i32> %1764, i64 1, !dbg !45
  %.extract113 = extractelement <4 x i32> %1764, i64 2, !dbg !45
  %.extract114 = extractelement <4 x i32> %1764, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract112, i32 %.extract113, i32 %.extract114, ptr addrspace(1) %1591, i1 %1467) #1, !dbg !45
  %.extract115 = extractelement <4 x i32> %1765, i64 0, !dbg !45
  %.extract116 = extractelement <4 x i32> %1765, i64 1, !dbg !45
  %.extract117 = extractelement <4 x i32> %1765, i64 2, !dbg !45
  %.extract118 = extractelement <4 x i32> %1765, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract116, i32 %.extract117, i32 %.extract118, ptr addrspace(1) %1593, i1 %1468) #1, !dbg !45
  %.extract119 = extractelement <4 x i32> %1766, i64 0, !dbg !45
  %.extract120 = extractelement <4 x i32> %1766, i64 1, !dbg !45
  %.extract121 = extractelement <4 x i32> %1766, i64 2, !dbg !45
  %.extract122 = extractelement <4 x i32> %1766, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract119, i32 %.extract120, i32 %.extract121, i32 %.extract122, ptr addrspace(1) %1595, i1 %1469) #1, !dbg !45
  %.extract123 = extractelement <4 x i32> %1767, i64 0, !dbg !45
  %.extract124 = extractelement <4 x i32> %1767, i64 1, !dbg !45
  %.extract125 = extractelement <4 x i32> %1767, i64 2, !dbg !45
  %.extract126 = extractelement <4 x i32> %1767, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract123, i32 %.extract124, i32 %.extract125, i32 %.extract126, ptr addrspace(1) %1597, i1 %1470) #1, !dbg !45
  %.extract127 = extractelement <4 x i32> %1768, i64 0, !dbg !45
  %.extract128 = extractelement <4 x i32> %1768, i64 1, !dbg !45
  %.extract129 = extractelement <4 x i32> %1768, i64 2, !dbg !45
  %.extract130 = extractelement <4 x i32> %1768, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract127, i32 %.extract128, i32 %.extract129, i32 %.extract130, ptr addrspace(1) %1599, i1 %1471) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuhb4zeb4cjhalvetob5fmvjbfbugxtpivvucb4h556ebwgppvd6.py", directory: "/tmp/torchinductor_root/uh")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 52, column: 40, scope: !6)
!39 = !DILocation(line: 85, column: 20, scope: !6)
!40 = !DILocation(line: 85, column: 34, scope: !6)
!41 = !DILocation(line: 85, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 27, scope: !6)
!43 = !DILocation(line: 88, column: 21, scope: !6)
!44 = !DILocation(line: 89, column: 25, scope: !6)
!45 = !DILocation(line: 89, column: 67, scope: !6)
!46 = !DILocation(line: 89, column: 4, scope: !6)
