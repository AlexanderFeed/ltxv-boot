; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 11, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 2040, !dbg !11
  %14 = or disjoint i32 %13, 4, !dbg !11
  %15 = shl i32 %11, 2, !dbg !11
  %16 = and i32 %15, 1020, !dbg !11
  %17 = or disjoint i32 %16, 1024, !dbg !11
  %18 = or disjoint i32 %13, %10, !dbg !12
  %19 = or disjoint i32 %14, %10, !dbg !12
  %20 = or disjoint i32 %16, %10, !dbg !12
  %21 = or disjoint i32 %17, %10, !dbg !12
  %22 = sdiv i32 %18, 12288, !dbg !13
  %23 = mul i32 %22, 12288, !dbg !14
  %.decomposed = sub i32 %18, %23, !dbg !14
  %24 = sext i32 %18 to i64, !dbg !15
  %25 = getelementptr i32, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = sext i32 %19 to i64, !dbg !15
  %27 = getelementptr i32, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %25) #2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %27) #2, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %38 = sext i32 %22 to i64, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %39) #2, !dbg !18
  %48 = getelementptr bfloat, ptr addrspace(1) %2, i64 %38, !dbg !19
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %48) #2, !dbg !20
  %57 = sext i32 %.decomposed to i64, !dbg !21
  %58 = getelementptr bfloat, ptr addrspace(1) %3, i64 %57, !dbg !21
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %58) #2, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !22
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !22
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !22
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !22
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !22
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !22
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !22
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !22
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !22
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !22
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !22
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !22
  %72 = extractelement <2 x bfloat> %65, i64 0, !dbg !22
  %73 = extractelement <2 x bfloat> %65, i64 1, !dbg !22
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !22
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !22
  %76 = fpext bfloat %68 to float, !dbg !23
  %77 = fpext bfloat %69 to float, !dbg !23
  %78 = fpext bfloat %70 to float, !dbg !23
  %79 = fpext bfloat %71 to float, !dbg !23
  %80 = fpext bfloat %72 to float, !dbg !23
  %81 = fpext bfloat %73 to float, !dbg !23
  %82 = fpext bfloat %74 to float, !dbg !23
  %83 = fpext bfloat %75 to float, !dbg !23
  %84 = getelementptr bfloat, ptr addrspace(1) %4, i64 %57, !dbg !24
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %84) #2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !25
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !25
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !25
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !25
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !25
  %94 = extractelement <2 x bfloat> %87, i64 0, !dbg !25
  %95 = extractelement <2 x bfloat> %87, i64 1, !dbg !25
  %96 = extractelement <2 x bfloat> %89, i64 0, !dbg !25
  %97 = extractelement <2 x bfloat> %89, i64 1, !dbg !25
  %98 = extractelement <2 x bfloat> %91, i64 0, !dbg !25
  %99 = extractelement <2 x bfloat> %91, i64 1, !dbg !25
  %100 = extractelement <2 x bfloat> %93, i64 0, !dbg !25
  %101 = extractelement <2 x bfloat> %93, i64 1, !dbg !25
  %102 = fpext bfloat %94 to float, !dbg !26
  %103 = fpext bfloat %95 to float, !dbg !26
  %104 = fpext bfloat %96 to float, !dbg !26
  %105 = fpext bfloat %97 to float, !dbg !26
  %106 = fpext bfloat %98 to float, !dbg !26
  %107 = fpext bfloat %99 to float, !dbg !26
  %108 = fpext bfloat %100 to float, !dbg !26
  %109 = fpext bfloat %101 to float, !dbg !26
  %110 = sitofp i32 %29 to float, !dbg !27
  %111 = sitofp i32 %30 to float, !dbg !27
  %112 = sitofp i32 %31 to float, !dbg !27
  %113 = sitofp i32 %32 to float, !dbg !27
  %114 = sitofp i32 %34 to float, !dbg !27
  %115 = sitofp i32 %35 to float, !dbg !27
  %116 = sitofp i32 %36 to float, !dbg !27
  %117 = sitofp i32 %37 to float, !dbg !27
  %118 = insertelement <8 x i16> poison, i16 %47, i64 0, !dbg !18
  %119 = insertelement <8 x i16> %118, i16 %46, i64 1, !dbg !18
  %120 = insertelement <8 x i16> %119, i16 %45, i64 2, !dbg !18
  %121 = insertelement <8 x i16> %120, i16 %44, i64 3, !dbg !18
  %122 = insertelement <8 x i16> %121, i16 %43, i64 4, !dbg !18
  %123 = insertelement <8 x i16> %122, i16 %42, i64 5, !dbg !18
  %124 = insertelement <8 x i16> %123, i16 %41, i64 6, !dbg !18
  %125 = insertelement <8 x i16> %124, i16 %40, i64 7, !dbg !18
  %126 = bitcast <8 x i16> %125 to <8 x bfloat>, !dbg !18
  %127 = insertelement <8 x i16> poison, i16 %56, i64 0, !dbg !20
  %128 = insertelement <8 x i16> %127, i16 %55, i64 1, !dbg !20
  %129 = insertelement <8 x i16> %128, i16 %54, i64 2, !dbg !20
  %130 = insertelement <8 x i16> %129, i16 %53, i64 3, !dbg !20
  %131 = insertelement <8 x i16> %130, i16 %52, i64 4, !dbg !20
  %132 = insertelement <8 x i16> %131, i16 %51, i64 5, !dbg !20
  %133 = insertelement <8 x i16> %132, i16 %50, i64 6, !dbg !20
  %134 = insertelement <8 x i16> %133, i16 %49, i64 7, !dbg !20
  %135 = bitcast <8 x i16> %134 to <8 x bfloat>, !dbg !20
  %136 = fcmp oge <8 x bfloat> %126, zeroinitializer, !dbg !28
  %137 = select <8 x i1> %136, <8 x bfloat> zeroinitializer, <8 x bfloat> %126, !dbg !28
  %138 = fpext <8 x bfloat> %137 to <8 x float>, !dbg !28
  %139 = fsub <8 x float> zeroinitializer, %138, !dbg !32
  %140 = fcmp ole <8 x bfloat> %135, zeroinitializer, !dbg !33
  %141 = select <8 x i1> %140, <8 x bfloat> zeroinitializer, <8 x bfloat> %135, !dbg !33
  %142 = fpext <8 x bfloat> %141 to <8 x float>, !dbg !33
  %143 = fcmp ogt <8 x float> %139, %142, !dbg !35
  %144 = fcmp uno <8 x float> %139, zeroinitializer, !dbg !37
  %145 = or <8 x i1> %144, %143, !dbg !38
  %146 = select <8 x i1> %145, <8 x float> %139, <8 x float> %142, !dbg !39
  %147 = fmul <8 x float> %146, splat (float 0x3F80204080000000), !dbg !40
  %148 = fcmp ogt <8 x float> %147, splat (float 0x3EE4F8B580000000), !dbg !41
  %149 = extractelement <8 x float> %147, i64 7, !dbg !43
  %150 = fcmp uno float %149, 0.000000e+00, !dbg !44
  %151 = extractelement <8 x float> %147, i64 6, !dbg !43
  %152 = fcmp uno float %151, 0.000000e+00, !dbg !44
  %153 = extractelement <8 x float> %147, i64 5, !dbg !43
  %154 = fcmp uno float %153, 0.000000e+00, !dbg !44
  %155 = extractelement <8 x float> %147, i64 4, !dbg !43
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !44
  %157 = extractelement <8 x float> %147, i64 3, !dbg !43
  %158 = fcmp uno float %157, 0.000000e+00, !dbg !44
  %159 = extractelement <8 x float> %147, i64 2, !dbg !43
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !44
  %161 = extractelement <8 x float> %147, i64 1, !dbg !43
  %162 = fcmp uno float %161, 0.000000e+00, !dbg !44
  %163 = extractelement <8 x float> %147, i64 0, !dbg !43
  %164 = fcmp uno float %163, 0.000000e+00, !dbg !44
  %165 = extractelement <8 x i1> %148, i64 7, !dbg !45
  %166 = or i1 %165, %150, !dbg !45
  %167 = extractelement <8 x i1> %148, i64 6, !dbg !45
  %168 = or i1 %167, %152, !dbg !45
  %169 = extractelement <8 x i1> %148, i64 5, !dbg !45
  %170 = or i1 %169, %154, !dbg !45
  %171 = extractelement <8 x i1> %148, i64 4, !dbg !45
  %172 = or i1 %171, %156, !dbg !45
  %173 = extractelement <8 x i1> %148, i64 3, !dbg !45
  %174 = or i1 %173, %158, !dbg !45
  %175 = extractelement <8 x i1> %148, i64 2, !dbg !45
  %176 = or i1 %175, %160, !dbg !45
  %177 = extractelement <8 x i1> %148, i64 1, !dbg !45
  %178 = or i1 %177, %162, !dbg !45
  %179 = extractelement <8 x i1> %148, i64 0, !dbg !45
  %180 = or i1 %179, %164, !dbg !45
  %181 = select i1 %166, float %149, float 0x3EE4F8B580000000, !dbg !43
  %182 = select i1 %168, float %151, float 0x3EE4F8B580000000, !dbg !43
  %183 = select i1 %170, float %153, float 0x3EE4F8B580000000, !dbg !43
  %184 = select i1 %172, float %155, float 0x3EE4F8B580000000, !dbg !43
  %185 = select i1 %174, float %157, float 0x3EE4F8B580000000, !dbg !43
  %186 = select i1 %176, float %159, float 0x3EE4F8B580000000, !dbg !43
  %187 = select i1 %178, float %161, float 0x3EE4F8B580000000, !dbg !43
  %188 = select i1 %180, float %163, float 0x3EE4F8B580000000, !dbg !43
  %189 = fmul float %181, %110, !dbg !46
  %190 = fmul float %182, %111, !dbg !46
  %191 = fmul float %183, %112, !dbg !46
  %192 = fmul float %184, %113, !dbg !46
  %193 = fmul float %185, %114, !dbg !46
  %194 = fmul float %186, %115, !dbg !46
  %195 = fmul float %187, %116, !dbg !46
  %196 = fmul float %188, %117, !dbg !46
  %197 = fmul float %189, %76, !dbg !47
  %198 = fmul float %190, %77, !dbg !47
  %199 = fmul float %191, %78, !dbg !47
  %200 = fmul float %192, %79, !dbg !47
  %201 = fmul float %193, %80, !dbg !47
  %202 = fmul float %194, %81, !dbg !47
  %203 = fmul float %195, %82, !dbg !47
  %204 = fmul float %196, %83, !dbg !47
  %205 = fadd float %197, %102, !dbg !48
  %206 = fadd float %198, %103, !dbg !48
  %207 = fadd float %199, %104, !dbg !48
  %208 = fadd float %200, %105, !dbg !48
  %209 = fadd float %201, %106, !dbg !48
  %210 = fadd float %202, %107, !dbg !48
  %211 = fadd float %203, %108, !dbg !48
  %212 = fadd float %204, %109, !dbg !48
  %213 = sext i32 %20 to i64, !dbg !49
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !49
  %215 = sext i32 %21 to i64, !dbg !49
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !49
  %217 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %218 = bitcast float %205 to i32, !dbg !50
  %219 = bitcast float %206 to i32, !dbg !50
  %220 = bitcast float %207 to i32, !dbg !50
  %221 = bitcast float %208 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %217, i32 %218, i32 %219, i32 %220, i32 %221, i1 true) #2, !dbg !50
  %222 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %223 = bitcast float %209 to i32, !dbg !50
  %224 = bitcast float %210 to i32, !dbg !50
  %225 = bitcast float %211 to i32, !dbg !50
  %226 = bitcast float %212 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %222, i32 %223, i32 %224, i32 %225, i32 %226, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %227 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %228 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %229 = load <4 x i32>, ptr addrspace(3) %228, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %227, align 16, !dbg !50
  %230 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 4, !dbg !50
  %.extract23 = load i32, ptr addrspace(3) %230, align 4, !dbg !50
  %231 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 8, !dbg !50
  %.extract24 = load i32, ptr addrspace(3) %231, align 8, !dbg !50
  %232 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 12, !dbg !50
  %.extract25 = load i32, ptr addrspace(3) %232, align 4, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %214) #2, !dbg !50
  %.extract26 = extractelement <4 x i32> %229, i64 0, !dbg !50
  %.extract27 = extractelement <4 x i32> %229, i64 1, !dbg !50
  %.extract28 = extractelement <4 x i32> %229, i64 2, !dbg !50
  %.extract29 = extractelement <4 x i32> %229, i64 3, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %216) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caryk6d7c3hobidnlgz4bgme5erjqj5rswnko6bmmu26ylszour7.py", directory: "/tmp/torchinductor_root/ar")
!4 = !{ptr @triton_, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 28, column: 19, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 30, scope: !6)
!16 = !DILocation(line: 30, column: 35, scope: !6)
!17 = !DILocation(line: 31, column: 30, scope: !6)
!18 = !DILocation(line: 31, column: 35, scope: !6)
!19 = !DILocation(line: 32, column: 30, scope: !6)
!20 = !DILocation(line: 32, column: 35, scope: !6)
!21 = !DILocation(line: 33, column: 31, scope: !6)
!22 = !DILocation(line: 33, column: 36, scope: !6)
!23 = !DILocation(line: 33, column: 75, scope: !6)
!24 = !DILocation(line: 34, column: 31, scope: !6)
!25 = !DILocation(line: 34, column: 36, scope: !6)
!26 = !DILocation(line: 34, column: 75, scope: !6)
!27 = !DILocation(line: 35, column: 19, scope: !6)
!28 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 37, column: 40, scope: !6)
!32 = !DILocation(line: 38, column: 12, scope: !6)
!33 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 39, column: 40, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 40, column: 40, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 42, column: 19, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 45, column: 42, scope: !6)
!43 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !42)
!46 = !DILocation(line: 47, column: 19, scope: !6)
!47 = !DILocation(line: 48, column: 20, scope: !6)
!48 = !DILocation(line: 49, column: 20, scope: !6)
!49 = !DILocation(line: 51, column: 25, scope: !6)
!50 = !DILocation(line: 51, column: 37, scope: !6)
!51 = !DILocation(line: 51, column: 4, scope: !6)
