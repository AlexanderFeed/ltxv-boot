; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = or disjoint i32 %19, 8, !dbg !19
  %21 = or disjoint i32 %19, 16, !dbg !19
  %22 = or disjoint i32 %19, 24, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = lshr exact i32 %17, 2, !dbg !19
  %26 = or disjoint i32 %14, %19, !dbg !20
  %27 = or disjoint i32 %14, %20, !dbg !20
  %28 = or disjoint i32 %14, %21, !dbg !20
  %29 = or disjoint i32 %14, %22, !dbg !20
  %30 = or disjoint i32 %26, 32, !dbg !20
  %31 = or disjoint i32 %26, 40, !dbg !20
  %32 = or disjoint i32 %26, 48, !dbg !20
  %33 = or disjoint i32 %26, 56, !dbg !20
  %34 = shl nsw i32 %13, 5, !dbg !21
  %35 = shl i32 %15, 3, !dbg !22
  %36 = and i32 %35, 8, !dbg !22
  %37 = and i32 %35, 16, !dbg !22
  %38 = and i32 %35, 24, !dbg !22
  %39 = or disjoint i32 %34, %19, !dbg !23
  %40 = or disjoint i32 %34, %20, !dbg !23
  %41 = or disjoint i32 %34, %21, !dbg !23
  %42 = or disjoint i32 %34, %22, !dbg !23
  %43 = srem i32 %26, 77, !dbg !24
  %44 = srem i32 %27, 77, !dbg !24
  %45 = srem i32 %28, 77, !dbg !24
  %46 = srem i32 %29, 77, !dbg !24
  %47 = srem i32 %30, 77, !dbg !24
  %48 = srem i32 %31, 77, !dbg !24
  %49 = srem i32 %32, 77, !dbg !24
  %50 = srem i32 %33, 77, !dbg !24
  %51 = srem i32 %39, 768, !dbg !25
  %52 = srem i32 %40, 768, !dbg !25
  %53 = srem i32 %41, 768, !dbg !25
  %54 = srem i32 %42, 768, !dbg !25
  %55 = and i32 %35, 32, !dbg !26
  %56 = and i32 %35, 56, !dbg !26
  %57 = and i32 %35, 120, !dbg !26
  %58 = mul nsw i32 %43, 768, !dbg !27
  %59 = mul nsw i32 %44, 768, !dbg !27
  %60 = mul nsw i32 %45, 768, !dbg !27
  %61 = mul nsw i32 %46, 768, !dbg !27
  %62 = mul nsw i32 %47, 768, !dbg !27
  %63 = mul nsw i32 %48, 768, !dbg !27
  %64 = mul nsw i32 %49, 768, !dbg !27
  %65 = mul nsw i32 %50, 768, !dbg !27
  %66 = mul nsw i32 %51, 768, !dbg !28
  %67 = mul nsw i32 %52, 768, !dbg !28
  %68 = mul nsw i32 %53, 768, !dbg !28
  %69 = mul nsw i32 %54, 768, !dbg !28
  %70 = or disjoint i32 %58, %57, !dbg !29
  %71 = or disjoint i32 %59, %57, !dbg !29
  %72 = or disjoint i32 %60, %57, !dbg !29
  %73 = or disjoint i32 %61, %57, !dbg !29
  %74 = or disjoint i32 %62, %57, !dbg !29
  %75 = or disjoint i32 %63, %57, !dbg !29
  %76 = or disjoint i32 %64, %57, !dbg !29
  %77 = or disjoint i32 %65, %57, !dbg !29
  %78 = sext i32 %70 to i64, !dbg !30
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %71 to i64, !dbg !30
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %72 to i64, !dbg !30
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %73 to i64, !dbg !30
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = sext i32 %74 to i64, !dbg !30
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !30
  %88 = sext i32 %75 to i64, !dbg !30
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !30
  %90 = sext i32 %76 to i64, !dbg !30
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !30
  %92 = sext i32 %77 to i64, !dbg !30
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !30
  %94 = lshr exact i32 %16, 1, !dbg !31
  %95 = lshr i32 %15, 1, !dbg !31
  %96 = and i32 %95, 56, !dbg !31
  %97 = xor i32 %57, %96, !dbg !31
  %98 = shl nuw nsw i32 %19, 7, !dbg !31
  %99 = or disjoint i32 %97, %98, !dbg !31
  %100 = zext nneg i32 %99 to i64, !dbg !31
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %100, !dbg !31
  %102 = or disjoint i32 %99, 1024, !dbg !31
  %103 = zext nneg i32 %102 to i64, !dbg !31
  %104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %103, !dbg !31
  %105 = or disjoint i32 %99, 2048, !dbg !31
  %106 = zext nneg i32 %105 to i64, !dbg !31
  %107 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %106, !dbg !31
  %108 = or disjoint i32 %99, 3072, !dbg !31
  %109 = zext nneg i32 %108 to i64, !dbg !31
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %109, !dbg !31
  %111 = or disjoint i32 %99, 4096, !dbg !31
  %112 = zext nneg i32 %111 to i64, !dbg !31
  %113 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %112, !dbg !31
  %114 = or disjoint i32 %99, 5120, !dbg !31
  %115 = zext nneg i32 %114 to i64, !dbg !31
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %115, !dbg !31
  %117 = or disjoint i32 %99, 6144, !dbg !31
  %118 = zext nneg i32 %117 to i64, !dbg !31
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %118, !dbg !31
  %120 = or disjoint i32 %99, 7168, !dbg !31
  %121 = zext nneg i32 %120 to i64, !dbg !31
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %121, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %79, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %104, ptr addrspace(1) %81, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %107, ptr addrspace(1) %83, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %110, ptr addrspace(1) %85, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %113, ptr addrspace(1) %87, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %89, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %91, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %122, ptr addrspace(1) %93, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %123 = or disjoint i32 %66, %57, !dbg !32
  %124 = or disjoint i32 %67, %57, !dbg !32
  %125 = or disjoint i32 %68, %57, !dbg !32
  %126 = or disjoint i32 %69, %57, !dbg !32
  %127 = sext i32 %123 to i64, !dbg !33
  %128 = getelementptr bfloat, ptr addrspace(1) %1, i64 %127, !dbg !33
  %129 = sext i32 %124 to i64, !dbg !33
  %130 = getelementptr bfloat, ptr addrspace(1) %1, i64 %129, !dbg !33
  %131 = sext i32 %125 to i64, !dbg !33
  %132 = getelementptr bfloat, ptr addrspace(1) %1, i64 %131, !dbg !33
  %133 = sext i32 %126 to i64, !dbg !33
  %134 = getelementptr bfloat, ptr addrspace(1) %1, i64 %133, !dbg !33
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %100, !dbg !34
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %103, !dbg !34
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %106, !dbg !34
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %109, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %135, ptr addrspace(1) %128, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %136, ptr addrspace(1) %130, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %137, ptr addrspace(1) %132, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %134, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %139 = or disjoint i32 %57, 128, !dbg !35
  %140 = or disjoint i32 %58, %139, !dbg !29
  %141 = or disjoint i32 %59, %139, !dbg !29
  %142 = or disjoint i32 %60, %139, !dbg !29
  %143 = or disjoint i32 %61, %139, !dbg !29
  %144 = or disjoint i32 %62, %139, !dbg !29
  %145 = or disjoint i32 %63, %139, !dbg !29
  %146 = or disjoint i32 %64, %139, !dbg !29
  %147 = or disjoint i32 %65, %139, !dbg !29
  %148 = sext i32 %140 to i64, !dbg !30
  %149 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !30
  %150 = sext i32 %141 to i64, !dbg !30
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !30
  %152 = sext i32 %142 to i64, !dbg !30
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !30
  %154 = sext i32 %143 to i64, !dbg !30
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !30
  %156 = sext i32 %144 to i64, !dbg !30
  %157 = getelementptr bfloat, ptr addrspace(1) %0, i64 %156, !dbg !30
  %158 = sext i32 %145 to i64, !dbg !30
  %159 = getelementptr bfloat, ptr addrspace(1) %0, i64 %158, !dbg !30
  %160 = sext i32 %146 to i64, !dbg !30
  %161 = getelementptr bfloat, ptr addrspace(1) %0, i64 %160, !dbg !30
  %162 = sext i32 %147 to i64, !dbg !30
  %163 = getelementptr bfloat, ptr addrspace(1) %0, i64 %162, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %164 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %100, !dbg !31
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %103, !dbg !31
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %106, !dbg !31
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %109, !dbg !31
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %112, !dbg !31
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %115, !dbg !31
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %118, !dbg !31
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %121, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %164, ptr addrspace(1) %149, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %165, ptr addrspace(1) %151, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %166, ptr addrspace(1) %153, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %167, ptr addrspace(1) %155, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %168, ptr addrspace(1) %157, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %169, ptr addrspace(1) %159, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %161, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %171, ptr addrspace(1) %163, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %172 = or disjoint i32 %66, %139, !dbg !32
  %173 = or disjoint i32 %67, %139, !dbg !32
  %174 = or disjoint i32 %68, %139, !dbg !32
  %175 = or disjoint i32 %69, %139, !dbg !32
  %176 = sext i32 %172 to i64, !dbg !33
  %177 = getelementptr bfloat, ptr addrspace(1) %1, i64 %176, !dbg !33
  %178 = sext i32 %173 to i64, !dbg !33
  %179 = getelementptr bfloat, ptr addrspace(1) %1, i64 %178, !dbg !33
  %180 = sext i32 %174 to i64, !dbg !33
  %181 = getelementptr bfloat, ptr addrspace(1) %1, i64 %180, !dbg !33
  %182 = sext i32 %175 to i64, !dbg !33
  %183 = getelementptr bfloat, ptr addrspace(1) %1, i64 %182, !dbg !33
  %184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 73728), i64 %100, !dbg !34
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 73728), i64 %103, !dbg !34
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 73728), i64 %106, !dbg !34
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 73728), i64 %109, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %184, ptr addrspace(1) %177, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %185, ptr addrspace(1) %179, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %181, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %183, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %188 = or disjoint i32 %57, 256, !dbg !35
  %189 = add nsw i32 %58, %188, !dbg !29
  %190 = add nsw i32 %59, %188, !dbg !29
  %191 = add nsw i32 %60, %188, !dbg !29
  %192 = add nsw i32 %61, %188, !dbg !29
  %193 = add nsw i32 %62, %188, !dbg !29
  %194 = add nsw i32 %63, %188, !dbg !29
  %195 = add nsw i32 %64, %188, !dbg !29
  %196 = add nsw i32 %65, %188, !dbg !29
  %197 = sext i32 %189 to i64, !dbg !30
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %197, !dbg !30
  %199 = sext i32 %190 to i64, !dbg !30
  %200 = getelementptr bfloat, ptr addrspace(1) %0, i64 %199, !dbg !30
  %201 = sext i32 %191 to i64, !dbg !30
  %202 = getelementptr bfloat, ptr addrspace(1) %0, i64 %201, !dbg !30
  %203 = sext i32 %192 to i64, !dbg !30
  %204 = getelementptr bfloat, ptr addrspace(1) %0, i64 %203, !dbg !30
  %205 = sext i32 %193 to i64, !dbg !30
  %206 = getelementptr bfloat, ptr addrspace(1) %0, i64 %205, !dbg !30
  %207 = sext i32 %194 to i64, !dbg !30
  %208 = getelementptr bfloat, ptr addrspace(1) %0, i64 %207, !dbg !30
  %209 = sext i32 %195 to i64, !dbg !30
  %210 = getelementptr bfloat, ptr addrspace(1) %0, i64 %209, !dbg !30
  %211 = sext i32 %196 to i64, !dbg !30
  %212 = getelementptr bfloat, ptr addrspace(1) %0, i64 %211, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %100, !dbg !31
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %103, !dbg !31
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %106, !dbg !31
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %109, !dbg !31
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %112, !dbg !31
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %115, !dbg !31
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %118, !dbg !31
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %121, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %213, ptr addrspace(1) %198, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %200, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %215, ptr addrspace(1) %202, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %204, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %217, ptr addrspace(1) %206, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %218, ptr addrspace(1) %208, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %210, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %220, ptr addrspace(1) %212, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %221 = add nsw i32 %66, %188, !dbg !32
  %222 = add nsw i32 %67, %188, !dbg !32
  %223 = add nsw i32 %68, %188, !dbg !32
  %224 = add nsw i32 %69, %188, !dbg !32
  %225 = sext i32 %221 to i64, !dbg !33
  %226 = getelementptr bfloat, ptr addrspace(1) %1, i64 %225, !dbg !33
  %227 = sext i32 %222 to i64, !dbg !33
  %228 = getelementptr bfloat, ptr addrspace(1) %1, i64 %227, !dbg !33
  %229 = sext i32 %223 to i64, !dbg !33
  %230 = getelementptr bfloat, ptr addrspace(1) %1, i64 %229, !dbg !33
  %231 = sext i32 %224 to i64, !dbg !33
  %232 = getelementptr bfloat, ptr addrspace(1) %1, i64 %231, !dbg !33
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %100, !dbg !34
  %234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %103, !dbg !34
  %235 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %106, !dbg !34
  %236 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %109, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %233, ptr addrspace(1) %226, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %234, ptr addrspace(1) %228, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %235, ptr addrspace(1) %230, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %236, ptr addrspace(1) %232, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %237 = or disjoint i32 %57, 384, !dbg !35
  %238 = add nsw i32 %58, %237, !dbg !29
  %239 = add nsw i32 %59, %237, !dbg !29
  %240 = add nsw i32 %60, %237, !dbg !29
  %241 = add nsw i32 %61, %237, !dbg !29
  %242 = add nsw i32 %62, %237, !dbg !29
  %243 = add nsw i32 %63, %237, !dbg !29
  %244 = add nsw i32 %64, %237, !dbg !29
  %245 = add nsw i32 %65, %237, !dbg !29
  %246 = sext i32 %238 to i64, !dbg !30
  %247 = getelementptr bfloat, ptr addrspace(1) %0, i64 %246, !dbg !30
  %248 = sext i32 %239 to i64, !dbg !30
  %249 = getelementptr bfloat, ptr addrspace(1) %0, i64 %248, !dbg !30
  %250 = sext i32 %240 to i64, !dbg !30
  %251 = getelementptr bfloat, ptr addrspace(1) %0, i64 %250, !dbg !30
  %252 = sext i32 %241 to i64, !dbg !30
  %253 = getelementptr bfloat, ptr addrspace(1) %0, i64 %252, !dbg !30
  %254 = sext i32 %242 to i64, !dbg !30
  %255 = getelementptr bfloat, ptr addrspace(1) %0, i64 %254, !dbg !30
  %256 = sext i32 %243 to i64, !dbg !30
  %257 = getelementptr bfloat, ptr addrspace(1) %0, i64 %256, !dbg !30
  %258 = sext i32 %244 to i64, !dbg !30
  %259 = getelementptr bfloat, ptr addrspace(1) %0, i64 %258, !dbg !30
  %260 = sext i32 %245 to i64, !dbg !30
  %261 = getelementptr bfloat, ptr addrspace(1) %0, i64 %260, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %100, !dbg !31
  %263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %103, !dbg !31
  %264 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %106, !dbg !31
  %265 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %109, !dbg !31
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %112, !dbg !31
  %267 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %115, !dbg !31
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %118, !dbg !31
  %269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %121, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %262, ptr addrspace(1) %247, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %263, ptr addrspace(1) %249, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %264, ptr addrspace(1) %251, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %265, ptr addrspace(1) %253, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %266, ptr addrspace(1) %255, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %267, ptr addrspace(1) %257, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %268, ptr addrspace(1) %259, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %269, ptr addrspace(1) %261, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %270 = add nsw i32 %66, %237, !dbg !32
  %271 = add nsw i32 %67, %237, !dbg !32
  %272 = add nsw i32 %68, %237, !dbg !32
  %273 = add nsw i32 %69, %237, !dbg !32
  %274 = sext i32 %270 to i64, !dbg !33
  %275 = getelementptr bfloat, ptr addrspace(1) %1, i64 %274, !dbg !33
  %276 = sext i32 %271 to i64, !dbg !33
  %277 = getelementptr bfloat, ptr addrspace(1) %1, i64 %276, !dbg !33
  %278 = sext i32 %272 to i64, !dbg !33
  %279 = getelementptr bfloat, ptr addrspace(1) %1, i64 %278, !dbg !33
  %280 = sext i32 %273 to i64, !dbg !33
  %281 = getelementptr bfloat, ptr addrspace(1) %1, i64 %280, !dbg !33
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %100, !dbg !34
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %103, !dbg !34
  %284 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %106, !dbg !34
  %285 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %109, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %282, ptr addrspace(1) %275, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %277, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %284, ptr addrspace(1) %279, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %285, ptr addrspace(1) %281, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %invariant.op = or disjoint i32 %55, %94, !dbg !36
  %invariant.op48 = or disjoint i32 %57, 512, !dbg !36
  %286 = and i32 %15, 7
  %287 = and i32 %15, 15
  %288 = xor i32 %56, %94
  %289 = or disjoint i32 %25, %287
  %290 = shl nuw nsw i32 %289, 7
  %291 = or disjoint i32 %290, %288
  %292 = zext nneg i32 %291 to i64
  %293 = or disjoint i32 %36, 16
  %294 = xor i32 %293, %37
  %295 = or disjoint i32 %294, %55
  %296 = xor i32 %295, %94
  %297 = or disjoint i32 %296, %290
  %298 = zext nneg i32 %297 to i64
  %299 = or disjoint i32 %38, 32
  %.reass = xor i32 %299, %invariant.op
  %300 = or disjoint i32 %.reass, %290
  %301 = zext nneg i32 %300 to i64
  %302 = or disjoint i32 %36, 48
  %and.ra = and i32 %35, 48
  %303 = or disjoint i32 %94, %and.ra
  %304 = xor i32 %303, %302
  %305 = or disjoint i32 %304, %290
  %306 = zext nneg i32 %305 to i64
  %307 = or disjoint i32 %56, 64
  %308 = xor i32 %307, %94
  %309 = or disjoint i32 %308, %290
  %310 = zext nneg i32 %309 to i64
  %311 = or disjoint i32 %36, 80
  %312 = xor i32 %311, %37
  %313 = or disjoint i32 %312, %55
  %314 = xor i32 %313, %94
  %315 = or disjoint i32 %314, %290
  %316 = zext nneg i32 %315 to i64
  %317 = or disjoint i32 %38, 96
  %.reass47 = xor i32 %317, %invariant.op
  %318 = or disjoint i32 %.reass47, %290
  %319 = zext nneg i32 %318 to i64
  %320 = or disjoint i32 %36, 112
  %321 = xor i32 %303, %320
  %322 = or disjoint i32 %321, %290
  %323 = zext nneg i32 %322 to i64
  %324 = or disjoint i32 %290, 4096
  %325 = or disjoint i32 %324, %288
  %326 = zext nneg i32 %325 to i64
  %327 = or disjoint i32 %296, %324
  %328 = zext nneg i32 %327 to i64
  %329 = or disjoint i32 %.reass, %324
  %330 = zext nneg i32 %329 to i64
  %331 = or disjoint i32 %304, %324
  %332 = zext nneg i32 %331 to i64
  %333 = or disjoint i32 %324, %308
  %334 = zext nneg i32 %333 to i64
  %335 = or disjoint i32 %314, %324
  %336 = zext nneg i32 %335 to i64
  %337 = or disjoint i32 %.reass47, %324
  %338 = zext nneg i32 %337 to i64
  %339 = or disjoint i32 %321, %324
  %340 = zext nneg i32 %339 to i64
  %and.ra42 = and i32 %15, 24
  %341 = xor i32 %56, %and.ra42
  %342 = or disjoint i32 %24, %286
  %343 = shl nuw nsw i32 %342, 7
  %344 = or disjoint i32 %343, %341
  %345 = zext nneg i32 %344 to i64
  %346 = or disjoint i32 %55, %and.ra42
  %347 = xor i32 %346, %299
  %348 = or disjoint i32 %347, %343
  %349 = zext nneg i32 %348 to i64
  %350 = xor i32 %307, %and.ra42
  %351 = or disjoint i32 %350, %343
  %352 = zext nneg i32 %351 to i64
  %353 = xor i32 %346, %317
  %354 = or disjoint i32 %353, %343
  %355 = zext nneg i32 %354 to i64
  %356 = or disjoint i32 %343, 2048
  %357 = or disjoint i32 %356, %341
  %358 = zext nneg i32 %357 to i64
  %359 = or disjoint i32 %347, %356
  %360 = zext nneg i32 %359 to i64
  %361 = or disjoint i32 %356, %350
  %362 = zext nneg i32 %361 to i64
  %363 = or disjoint i32 %353, %356
  %364 = zext nneg i32 %363 to i64
  %365 = zext nneg i32 %invariant.op48 to i64, !dbg !36
  %366 = sext i32 %69 to i64, !dbg !36
  %367 = sext i32 %68 to i64, !dbg !36
  %368 = sext i32 %67 to i64, !dbg !36
  %369 = sext i32 %66 to i64, !dbg !36
  %370 = sext i32 %65 to i64, !dbg !36
  %371 = sext i32 %64 to i64, !dbg !36
  %372 = sext i32 %63 to i64, !dbg !36
  %373 = sext i32 %62 to i64, !dbg !36
  %374 = sext i32 %61 to i64, !dbg !36
  %375 = sext i32 %60 to i64, !dbg !36
  %376 = sext i32 %59 to i64, !dbg !36
  %377 = sext i32 %58 to i64, !dbg !36
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %377, !dbg !36
  %invariant.gep81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %376, !dbg !36
  %invariant.gep83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %375, !dbg !36
  %invariant.gep85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %374, !dbg !36
  %invariant.gep87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %373, !dbg !36
  %invariant.gep89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %372, !dbg !36
  %invariant.gep91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %371, !dbg !36
  %invariant.gep93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %370, !dbg !36
  %invariant.gep95 = getelementptr bfloat, ptr addrspace(1) %1, i64 %369, !dbg !36
  %invariant.gep97 = getelementptr bfloat, ptr addrspace(1) %1, i64 %368, !dbg !36
  %invariant.gep99 = getelementptr bfloat, ptr addrspace(1) %1, i64 %367, !dbg !36
  %invariant.gep101 = getelementptr bfloat, ptr addrspace(1) %1, i64 %366, !dbg !36
  br label %378, !dbg !36

378:                                              ; preds = %4, %378
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %378 ]
  %379 = phi i32 [ -1, %4 ], [ %400, %378 ]
  %380 = phi i32 [ 3, %4 ], [ %761, %378 ]
  %381 = phi float [ 0.000000e+00, %4 ], [ %740, %378 ]
  %382 = phi float [ 0.000000e+00, %4 ], [ %741, %378 ]
  %383 = phi float [ 0.000000e+00, %4 ], [ %742, %378 ]
  %384 = phi float [ 0.000000e+00, %4 ], [ %743, %378 ]
  %385 = phi float [ 0.000000e+00, %4 ], [ %745, %378 ]
  %386 = phi float [ 0.000000e+00, %4 ], [ %746, %378 ]
  %387 = phi float [ 0.000000e+00, %4 ], [ %747, %378 ]
  %388 = phi float [ 0.000000e+00, %4 ], [ %748, %378 ]
  %389 = phi float [ 0.000000e+00, %4 ], [ %750, %378 ]
  %390 = phi float [ 0.000000e+00, %4 ], [ %751, %378 ]
  %391 = phi float [ 0.000000e+00, %4 ], [ %752, %378 ]
  %392 = phi float [ 0.000000e+00, %4 ], [ %753, %378 ]
  %393 = phi float [ 0.000000e+00, %4 ], [ %755, %378 ]
  %394 = phi float [ 0.000000e+00, %4 ], [ %756, %378 ]
  %395 = phi float [ 0.000000e+00, %4 ], [ %757, %378 ]
  %396 = phi float [ 0.000000e+00, %4 ], [ %758, %378 ]
  %397 = icmp samesign ult i64 %indvars.iv, 2, !dbg !36
  %398 = add i32 %379, 1, !dbg !36
  %399 = icmp slt i32 %398, 4, !dbg !36
  %400 = select i1 %399, i32 %398, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %401 = shl i32 %400, 13, !dbg !31
  %402 = sext i32 %401 to i64, !dbg !31
  %403 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %402, !dbg !31
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %292, !dbg !31
  %405 = ptrtoint ptr addrspace(3) %404 to i64, !dbg !31
  %406 = trunc i64 %405 to i32, !dbg !31
  %407 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %406) #1, !dbg !31
  %408 = extractvalue { i32, i32, i32, i32 } %407, 0, !dbg !31
  %409 = extractvalue { i32, i32, i32, i32 } %407, 1, !dbg !31
  %410 = extractvalue { i32, i32, i32, i32 } %407, 2, !dbg !31
  %411 = extractvalue { i32, i32, i32, i32 } %407, 3, !dbg !31
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %298, !dbg !31
  %413 = ptrtoint ptr addrspace(3) %412 to i64, !dbg !31
  %414 = trunc i64 %413 to i32, !dbg !31
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %414) #1, !dbg !31
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !31
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !31
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !31
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !31
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %301, !dbg !31
  %421 = ptrtoint ptr addrspace(3) %420 to i64, !dbg !31
  %422 = trunc i64 %421 to i32, !dbg !31
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %422) #1, !dbg !31
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !31
  %425 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !31
  %426 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !31
  %427 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !31
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %306, !dbg !31
  %429 = ptrtoint ptr addrspace(3) %428 to i64, !dbg !31
  %430 = trunc i64 %429 to i32, !dbg !31
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %430) #1, !dbg !31
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !31
  %433 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !31
  %434 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !31
  %435 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !31
  %436 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %310, !dbg !31
  %437 = ptrtoint ptr addrspace(3) %436 to i64, !dbg !31
  %438 = trunc i64 %437 to i32, !dbg !31
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #1, !dbg !31
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !31
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !31
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !31
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !31
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %316, !dbg !31
  %445 = ptrtoint ptr addrspace(3) %444 to i64, !dbg !31
  %446 = trunc i64 %445 to i32, !dbg !31
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #1, !dbg !31
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !31
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !31
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !31
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !31
  %452 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %319, !dbg !31
  %453 = ptrtoint ptr addrspace(3) %452 to i64, !dbg !31
  %454 = trunc i64 %453 to i32, !dbg !31
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %454) #1, !dbg !31
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !31
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !31
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !31
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !31
  %460 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %323, !dbg !31
  %461 = ptrtoint ptr addrspace(3) %460 to i64, !dbg !31
  %462 = trunc i64 %461 to i32, !dbg !31
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %462) #1, !dbg !31
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !31
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !31
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !31
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !31
  %468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %326, !dbg !31
  %469 = ptrtoint ptr addrspace(3) %468 to i64, !dbg !31
  %470 = trunc i64 %469 to i32, !dbg !31
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %470) #1, !dbg !31
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !31
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !31
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !31
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !31
  %476 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %328, !dbg !31
  %477 = ptrtoint ptr addrspace(3) %476 to i64, !dbg !31
  %478 = trunc i64 %477 to i32, !dbg !31
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %478) #1, !dbg !31
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !31
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !31
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !31
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !31
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %330, !dbg !31
  %485 = ptrtoint ptr addrspace(3) %484 to i64, !dbg !31
  %486 = trunc i64 %485 to i32, !dbg !31
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %486) #1, !dbg !31
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !31
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !31
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !31
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !31
  %492 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %332, !dbg !31
  %493 = ptrtoint ptr addrspace(3) %492 to i64, !dbg !31
  %494 = trunc i64 %493 to i32, !dbg !31
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %494) #1, !dbg !31
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !31
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !31
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !31
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !31
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %334, !dbg !31
  %501 = ptrtoint ptr addrspace(3) %500 to i64, !dbg !31
  %502 = trunc i64 %501 to i32, !dbg !31
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %502) #1, !dbg !31
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !31
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !31
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !31
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !31
  %508 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %336, !dbg !31
  %509 = ptrtoint ptr addrspace(3) %508 to i64, !dbg !31
  %510 = trunc i64 %509 to i32, !dbg !31
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %510) #1, !dbg !31
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !31
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !31
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !31
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !31
  %516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %338, !dbg !31
  %517 = ptrtoint ptr addrspace(3) %516 to i64, !dbg !31
  %518 = trunc i64 %517 to i32, !dbg !31
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #1, !dbg !31
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !31
  %521 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !31
  %522 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !31
  %523 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !31
  %524 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i64 %340, !dbg !31
  %525 = ptrtoint ptr addrspace(3) %524 to i64, !dbg !31
  %526 = trunc i64 %525 to i32, !dbg !31
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %526) #1, !dbg !31
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !31
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !31
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !31
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !31
  %532 = shl i32 %400, 12, !dbg !34
  %533 = sext i32 %532 to i64, !dbg !34
  %534 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %533, !dbg !34
  %535 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %345, !dbg !34
  %536 = ptrtoint ptr addrspace(3) %535 to i64, !dbg !34
  %537 = trunc i64 %536 to i32, !dbg !34
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %537) #1, !dbg !34
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !34
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !34
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !34
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !34
  %543 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %349, !dbg !34
  %544 = ptrtoint ptr addrspace(3) %543 to i64, !dbg !34
  %545 = trunc i64 %544 to i32, !dbg !34
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %545) #1, !dbg !34
  %547 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !34
  %548 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !34
  %549 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !34
  %550 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !34
  %551 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %352, !dbg !34
  %552 = ptrtoint ptr addrspace(3) %551 to i64, !dbg !34
  %553 = trunc i64 %552 to i32, !dbg !34
  %554 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %553) #1, !dbg !34
  %555 = extractvalue { i32, i32, i32, i32 } %554, 0, !dbg !34
  %556 = extractvalue { i32, i32, i32, i32 } %554, 1, !dbg !34
  %557 = extractvalue { i32, i32, i32, i32 } %554, 2, !dbg !34
  %558 = extractvalue { i32, i32, i32, i32 } %554, 3, !dbg !34
  %559 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %355, !dbg !34
  %560 = ptrtoint ptr addrspace(3) %559 to i64, !dbg !34
  %561 = trunc i64 %560 to i32, !dbg !34
  %562 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %561) #1, !dbg !34
  %563 = extractvalue { i32, i32, i32, i32 } %562, 0, !dbg !34
  %564 = extractvalue { i32, i32, i32, i32 } %562, 1, !dbg !34
  %565 = extractvalue { i32, i32, i32, i32 } %562, 2, !dbg !34
  %566 = extractvalue { i32, i32, i32, i32 } %562, 3, !dbg !34
  %567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %358, !dbg !34
  %568 = ptrtoint ptr addrspace(3) %567 to i64, !dbg !34
  %569 = trunc i64 %568 to i32, !dbg !34
  %570 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %569) #1, !dbg !34
  %571 = extractvalue { i32, i32, i32, i32 } %570, 0, !dbg !34
  %572 = extractvalue { i32, i32, i32, i32 } %570, 1, !dbg !34
  %573 = extractvalue { i32, i32, i32, i32 } %570, 2, !dbg !34
  %574 = extractvalue { i32, i32, i32, i32 } %570, 3, !dbg !34
  %575 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %360, !dbg !34
  %576 = ptrtoint ptr addrspace(3) %575 to i64, !dbg !34
  %577 = trunc i64 %576 to i32, !dbg !34
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %577) #1, !dbg !34
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !34
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !34
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !34
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !34
  %583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %362, !dbg !34
  %584 = ptrtoint ptr addrspace(3) %583 to i64, !dbg !34
  %585 = trunc i64 %584 to i32, !dbg !34
  %586 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %585) #1, !dbg !34
  %587 = extractvalue { i32, i32, i32, i32 } %586, 0, !dbg !34
  %588 = extractvalue { i32, i32, i32, i32 } %586, 1, !dbg !34
  %589 = extractvalue { i32, i32, i32, i32 } %586, 2, !dbg !34
  %590 = extractvalue { i32, i32, i32, i32 } %586, 3, !dbg !34
  %591 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %534, i64 %364, !dbg !34
  %592 = ptrtoint ptr addrspace(3) %591 to i64, !dbg !34
  %593 = trunc i64 %592 to i32, !dbg !34
  %594 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %593) #1, !dbg !34
  %595 = extractvalue { i32, i32, i32, i32 } %594, 0, !dbg !34
  %596 = extractvalue { i32, i32, i32, i32 } %594, 1, !dbg !34
  %597 = extractvalue { i32, i32, i32, i32 } %594, 2, !dbg !34
  %598 = extractvalue { i32, i32, i32, i32 } %594, 3, !dbg !34
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %381, float %382, float %383, float %384, i32 %408, i32 %409, i32 %410, i32 %411, i32 %539, i32 %540) #1, !dbg !37
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !37
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !37
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !37
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !37
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %385, float %386, float %387, float %388, i32 %408, i32 %409, i32 %410, i32 %411, i32 %571, i32 %572) #1, !dbg !37
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !37
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !37
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !37
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !37
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %389, float %390, float %391, float %392, i32 %472, i32 %473, i32 %474, i32 %475, i32 %539, i32 %540) #1, !dbg !37
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !37
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !37
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !37
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !37
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %393, float %394, float %395, float %396, i32 %472, i32 %473, i32 %474, i32 %475, i32 %571, i32 %572) #1, !dbg !37
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !37
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !37
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !37
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !37
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %416, i32 %417, i32 %418, i32 %419, i32 %541, i32 %542) #1, !dbg !37
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !37
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !37
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !37
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !37
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %416, i32 %417, i32 %418, i32 %419, i32 %573, i32 %574) #1, !dbg !37
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !37
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !37
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !37
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !37
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %480, i32 %481, i32 %482, i32 %483, i32 %541, i32 %542) #1, !dbg !37
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !37
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !37
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !37
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !37
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %480, i32 %481, i32 %482, i32 %483, i32 %573, i32 %574) #1, !dbg !37
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !37
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !37
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !37
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !37
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %424, i32 %425, i32 %426, i32 %427, i32 %547, i32 %548) #1, !dbg !37
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !37
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !37
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !37
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !37
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %424, i32 %425, i32 %426, i32 %427, i32 %579, i32 %580) #1, !dbg !37
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !37
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !37
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !37
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !37
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %488, i32 %489, i32 %490, i32 %491, i32 %547, i32 %548) #1, !dbg !37
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !37
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !37
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !37
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !37
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %488, i32 %489, i32 %490, i32 %491, i32 %579, i32 %580) #1, !dbg !37
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !37
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !37
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !37
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !37
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %432, i32 %433, i32 %434, i32 %435, i32 %549, i32 %550) #1, !dbg !37
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !37
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !37
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !37
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !37
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %432, i32 %433, i32 %434, i32 %435, i32 %581, i32 %582) #1, !dbg !37
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !37
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !37
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !37
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !37
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %496, i32 %497, i32 %498, i32 %499, i32 %549, i32 %550) #1, !dbg !37
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !37
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !37
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !37
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !37
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %496, i32 %497, i32 %498, i32 %499, i32 %581, i32 %582) #1, !dbg !37
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !37
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !37
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !37
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !37
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %440, i32 %441, i32 %442, i32 %443, i32 %555, i32 %556) #1, !dbg !37
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !37
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !37
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !37
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !37
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %440, i32 %441, i32 %442, i32 %443, i32 %587, i32 %588) #1, !dbg !37
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !37
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !37
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !37
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !37
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %504, i32 %505, i32 %506, i32 %507, i32 %555, i32 %556) #1, !dbg !37
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !37
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !37
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !37
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !37
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %675, float %676, float %677, float %678, i32 %504, i32 %505, i32 %506, i32 %507, i32 %587, i32 %588) #1, !dbg !37
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !37
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !37
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !37
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !37
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %680, float %681, float %682, float %683, i32 %448, i32 %449, i32 %450, i32 %451, i32 %557, i32 %558) #1, !dbg !37
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !37
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !37
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !37
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !37
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %685, float %686, float %687, float %688, i32 %448, i32 %449, i32 %450, i32 %451, i32 %589, i32 %590) #1, !dbg !37
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !37
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !37
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !37
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !37
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %690, float %691, float %692, float %693, i32 %512, i32 %513, i32 %514, i32 %515, i32 %557, i32 %558) #1, !dbg !37
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !37
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !37
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !37
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !37
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %695, float %696, float %697, float %698, i32 %512, i32 %513, i32 %514, i32 %515, i32 %589, i32 %590) #1, !dbg !37
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !37
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !37
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !37
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !37
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %700, float %701, float %702, float %703, i32 %456, i32 %457, i32 %458, i32 %459, i32 %563, i32 %564) #1, !dbg !37
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !37
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !37
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !37
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !37
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %705, float %706, float %707, float %708, i32 %456, i32 %457, i32 %458, i32 %459, i32 %595, i32 %596) #1, !dbg !37
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !37
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !37
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !37
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !37
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %710, float %711, float %712, float %713, i32 %520, i32 %521, i32 %522, i32 %523, i32 %563, i32 %564) #1, !dbg !37
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !37
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !37
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !37
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !37
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %715, float %716, float %717, float %718, i32 %520, i32 %521, i32 %522, i32 %523, i32 %595, i32 %596) #1, !dbg !37
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !37
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !37
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !37
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !37
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %720, float %721, float %722, float %723, i32 %464, i32 %465, i32 %466, i32 %467, i32 %565, i32 %566) #1, !dbg !37
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !37
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !37
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !37
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !37
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %725, float %726, float %727, float %728, i32 %464, i32 %465, i32 %466, i32 %467, i32 %597, i32 %598) #1, !dbg !37
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !37
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !37
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !37
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !37
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %730, float %731, float %732, float %733, i32 %528, i32 %529, i32 %530, i32 %531, i32 %565, i32 %566) #1, !dbg !37
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !37
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !37
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !37
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !37
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %735, float %736, float %737, float %738, i32 %528, i32 %529, i32 %530, i32 %531, i32 %597, i32 %598) #1, !dbg !37
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !37
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !37
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !37
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !37
  %759 = add i32 %380, 1, !dbg !36
  %760 = icmp slt i32 %759, 4, !dbg !36
  %761 = select i1 %760, i32 %759, i32 0, !dbg !36
  %762 = shl nuw nsw i64 %indvars.iv, 7, !dbg !38
  %763 = add nuw nsw i64 %762, %365
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %763, !dbg !30
  %gep82 = getelementptr bfloat, ptr addrspace(1) %invariant.gep81, i64 %763, !dbg !30
  %gep84 = getelementptr bfloat, ptr addrspace(1) %invariant.gep83, i64 %763, !dbg !30
  %gep86 = getelementptr bfloat, ptr addrspace(1) %invariant.gep85, i64 %763, !dbg !30
  %gep88 = getelementptr bfloat, ptr addrspace(1) %invariant.gep87, i64 %763, !dbg !30
  %gep90 = getelementptr bfloat, ptr addrspace(1) %invariant.gep89, i64 %763, !dbg !30
  %gep92 = getelementptr bfloat, ptr addrspace(1) %invariant.gep91, i64 %763, !dbg !30
  %gep94 = getelementptr bfloat, ptr addrspace(1) %invariant.gep93, i64 %763, !dbg !30
  %764 = shl i32 %761, 13, !dbg !31
  %765 = sext i32 %764 to i64, !dbg !31
  %766 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %765, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %767 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %100, !dbg !31
  %768 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %103, !dbg !31
  %769 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %106, !dbg !31
  %770 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %109, !dbg !31
  %771 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %112, !dbg !31
  %772 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %115, !dbg !31
  %773 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %118, !dbg !31
  %774 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %766, i64 %121, !dbg !31
  %775 = select i1 %397, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %767, ptr addrspace(1) %gep, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %768, ptr addrspace(1) %gep82, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %769, ptr addrspace(1) %gep84, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %770, ptr addrspace(1) %gep86, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %771, ptr addrspace(1) %gep88, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %772, ptr addrspace(1) %gep90, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %773, ptr addrspace(1) %gep92, i32 %775) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %774, ptr addrspace(1) %gep94, i32 %775) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep96 = getelementptr bfloat, ptr addrspace(1) %invariant.gep95, i64 %763, !dbg !33
  %gep98 = getelementptr bfloat, ptr addrspace(1) %invariant.gep97, i64 %763, !dbg !33
  %gep100 = getelementptr bfloat, ptr addrspace(1) %invariant.gep99, i64 %763, !dbg !33
  %gep102 = getelementptr bfloat, ptr addrspace(1) %invariant.gep101, i64 %763, !dbg !33
  %776 = shl i32 %761, 12, !dbg !34
  %777 = sext i32 %776 to i64, !dbg !34
  %778 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %777, !dbg !34
  %779 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %778, i64 %100, !dbg !34
  %780 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %778, i64 %103, !dbg !34
  %781 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %778, i64 %106, !dbg !34
  %782 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %778, i64 %109, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %779, ptr addrspace(1) %gep96, i32 %775) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %780, ptr addrspace(1) %gep98, i32 %775) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %781, ptr addrspace(1) %gep100, i32 %775) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %782, ptr addrspace(1) %gep102, i32 %775) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !36
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !36
  br i1 %exitcond.not, label %783, label %378, !dbg !36

783:                                              ; preds = %378
  %784 = and i32 %35, 64, !dbg !26
  %785 = or disjoint i32 %34, %38, !dbg !23
  %786 = and i32 %23, 15, !dbg !19
  %787 = or disjoint i32 %786, %25, !dbg !19
  %788 = or disjoint i32 %787, %14, !dbg !20
  %789 = or disjoint i32 %788, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %790 = icmp slt i32 %788, 77, !dbg !39
  %791 = icmp slt i32 %789, 77, !dbg !39
  %792 = icmp slt i32 %785, 768, !dbg !40
  %793 = and i1 %790, %792, !dbg !41
  %794 = and i1 %791, %792, !dbg !41
  %795 = mul i32 %788, 768, !dbg !42
  %796 = mul i32 %789, 768, !dbg !42
  %797 = add i32 %795, %785, !dbg !43
  %798 = add i32 %796, %785, !dbg !43
  %799 = sext i32 %797 to i64, !dbg !44
  %800 = getelementptr bfloat, ptr addrspace(1) %2, i64 %799, !dbg !44
  %801 = sext i32 %798 to i64, !dbg !44
  %802 = getelementptr bfloat, ptr addrspace(1) %2, i64 %801, !dbg !44
  %803 = fptrunc float %740 to bfloat, !dbg !45
  %804 = fptrunc float %741 to bfloat, !dbg !45
  %805 = fptrunc float %742 to bfloat, !dbg !45
  %806 = fptrunc float %743 to bfloat, !dbg !45
  %807 = fptrunc float %745 to bfloat, !dbg !45
  %808 = fptrunc float %746 to bfloat, !dbg !45
  %809 = fptrunc float %747 to bfloat, !dbg !45
  %810 = fptrunc float %748 to bfloat, !dbg !45
  %811 = fptrunc float %750 to bfloat, !dbg !45
  %812 = fptrunc float %751 to bfloat, !dbg !45
  %813 = fptrunc float %752 to bfloat, !dbg !45
  %814 = fptrunc float %753 to bfloat, !dbg !45
  %815 = fptrunc float %755 to bfloat, !dbg !45
  %816 = fptrunc float %756 to bfloat, !dbg !45
  %817 = fptrunc float %757 to bfloat, !dbg !45
  %818 = fptrunc float %758 to bfloat, !dbg !45
  %819 = shl i32 %15, 1, !dbg !45
  %820 = and i32 %819, 6, !dbg !45
  %821 = shl nuw nsw i32 %16, 3, !dbg !45
  %822 = or disjoint i32 %820, %821, !dbg !45
  %823 = or disjoint i32 %822, %784, !dbg !45
  %824 = or disjoint i32 %823, %55, !dbg !45
  %825 = or disjoint i32 %824, %24, !dbg !45
  %826 = shl nuw nsw i32 %17, 3, !dbg !45
  %827 = or disjoint i32 %825, %826, !dbg !45
  %828 = and i32 %35, 384, !dbg !45
  %829 = or disjoint i32 %826, %828, !dbg !45
  %830 = or disjoint i32 %829, %57, !dbg !45
  %831 = lshr i32 %827, 2, !dbg !45
  %832 = and i32 %831, 1073741816, !dbg !45
  %833 = add nuw nsw i32 %832, %827, !dbg !45
  %834 = zext nneg i32 %833 to i64, !dbg !45
  %835 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %834, !dbg !45
  %836 = bitcast bfloat %803 to i16, !dbg !45
  %837 = bitcast bfloat %804 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %835, i16 %836, i16 %837, i1 true) #1, !dbg !45
  %838 = xor i32 %827, 256, !dbg !45
  %839 = lshr i32 %838, 2, !dbg !45
  %840 = and i32 %839, 1073741816, !dbg !45
  %841 = add nuw nsw i32 %840, %838, !dbg !45
  %842 = zext nneg i32 %841 to i64, !dbg !45
  %843 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %842, !dbg !45
  %844 = bitcast bfloat %805 to i16, !dbg !45
  %845 = bitcast bfloat %806 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %843, i16 %844, i16 %845, i1 true) #1, !dbg !45
  %846 = xor i32 %827, 16, !dbg !45
  %847 = add nuw nsw i32 %832, %846, !dbg !45
  %848 = zext nneg i32 %847 to i64, !dbg !45
  %849 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %848, !dbg !45
  %850 = bitcast bfloat %807 to i16, !dbg !45
  %851 = bitcast bfloat %808 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %849, i16 %850, i16 %851, i1 true) #1, !dbg !45
  %852 = xor i32 %827, 272, !dbg !45
  %853 = lshr i32 %852, 2, !dbg !45
  %854 = and i32 %853, 1073741816, !dbg !45
  %855 = add nuw nsw i32 %854, %852, !dbg !45
  %856 = zext nneg i32 %855 to i64, !dbg !45
  %857 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %856, !dbg !45
  %858 = bitcast bfloat %809 to i16, !dbg !45
  %859 = bitcast bfloat %810 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %857, i16 %858, i16 %859, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %860 = lshr exact i32 %830, 2, !dbg !45
  %861 = and i32 %860, 248, !dbg !45
  %862 = add nuw nsw i32 %861, %830, !dbg !45
  %863 = zext nneg i32 %862 to i64, !dbg !45
  %864 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %863, !dbg !45
  %865 = load <4 x i32>, ptr addrspace(3) %864, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %866 = bitcast bfloat %811 to i16, !dbg !45
  %867 = bitcast bfloat %812 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %835, i16 %866, i16 %867, i1 true) #1, !dbg !45
  %868 = bitcast bfloat %813 to i16, !dbg !45
  %869 = bitcast bfloat %814 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %843, i16 %868, i16 %869, i1 true) #1, !dbg !45
  %870 = bitcast bfloat %815 to i16, !dbg !45
  %871 = bitcast bfloat %816 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %849, i16 %870, i16 %871, i1 true) #1, !dbg !45
  %872 = bitcast bfloat %817 to i16, !dbg !45
  %873 = bitcast bfloat %818 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %857, i16 %872, i16 %873, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %874 = load <4 x i32>, ptr addrspace(3) %864, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %865, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %865, i64 1, !dbg !45
  %.extract30 = extractelement <4 x i32> %865, i64 2, !dbg !45
  %.extract32 = extractelement <4 x i32> %865, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract28, i32 %.extract30, i32 %.extract32, ptr addrspace(1) %800, i1 %793) #1, !dbg !45
  %.extract34 = extractelement <4 x i32> %874, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %874, i64 1, !dbg !45
  %.extract38 = extractelement <4 x i32> %874, i64 2, !dbg !45
  %.extract40 = extractelement <4 x i32> %874, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract36, i32 %.extract38, i32 %.extract40, ptr addrspace(1) %802, i1 %794) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxahu64mo4kn2ybui4hfelky67h2ydmtqkrjn6dtsd2utit6uawg.py", directory: "/tmp/torchinductor_root/xa")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 29, scope: !6)
!28 = !DILocation(line: 77, column: 54, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 66, column: 42, scope: !6)
!36 = !DILocation(line: 64, column: 26, scope: !6)
!37 = !DILocation(line: 78, column: 25, scope: !6)
!38 = !DILocation(line: 66, column: 50, scope: !6)
!39 = !DILocation(line: 85, column: 20, scope: !6)
!40 = !DILocation(line: 85, column: 34, scope: !6)
!41 = !DILocation(line: 85, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 25, scope: !6)
!43 = !DILocation(line: 88, column: 21, scope: !6)
!44 = !DILocation(line: 89, column: 25, scope: !6)
!45 = !DILocation(line: 89, column: 67, scope: !6)
!46 = !DILocation(line: 89, column: 4, scope: !6)
