; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 2, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = and i32 %9, 3, !dbg !14
  %15 = shl i32 %12, 12, !dbg !15
  %16 = or disjoint i32 %15, %14
  br i1 %13, label %.split.us, label %.split

.split.us:                                        ; preds = %6, %.split.us
  %17 = phi float [ %31, %.split.us ], [ 0.000000e+00, %6 ]
  %18 = phi i32 [ %32, %.split.us ], [ 0, %6 ]
  %19 = or i32 %16, %18, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i16 %22 to bfloat, !dbg !18
  %24 = fpext bfloat %23 to float, !dbg !19
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !20
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 true) #4, !dbg !21
  %27 = bitcast i16 %26 to bfloat, !dbg !21
  %28 = fpext bfloat %27 to float, !dbg !22
  %29 = fadd float %24, %28, !dbg !23
  %30 = fmul float %29, %29, !dbg !24
  %31 = fadd float %17, %30, !dbg !25
  %32 = add nuw nsw i32 %18, 4, !dbg !26
  %33 = icmp samesign ult i32 %18, 4092, !dbg !26
  br i1 %33, label %.split.us, label %.split3.us, !dbg !26

.split:                                           ; preds = %6, %.split
  %34 = phi i32 [ %41, %.split ], [ 0, %6 ]
  %35 = or i32 %16, %34, !dbg !16
  %36 = sext i32 %35 to i64, !dbg !17
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #4, !dbg !18
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %36, !dbg !20
  %40 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %39, i1 false) #4, !dbg !21
  %41 = add nuw nsw i32 %34, 4, !dbg !26
  %42 = icmp samesign ult i32 %34, 4092, !dbg !26
  br i1 %42, label %.split, label %.split3.us, !dbg !26

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %31, %.split.us ], [ 0.000000e+00, %.split ], !dbg !27
  %43 = bitcast float %.us-phi to i32, !dbg !27
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fadd float %.us-phi, %45, !dbg !31
  %47 = bitcast float %46 to i32, !dbg !27
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = fadd float %46, %49, !dbg !31
  %51 = tail call float @llvm.nvvm.div.full(float %50, float 4.096000e+03), !dbg !33
  %52 = fadd float %51, 0x3EB0C6F7A0000000, !dbg !34
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %53, 0, !dbg !35
  br i1 %.not.i, label %56, label %54, !dbg !35

54:                                               ; preds = %.split3.us
  %55 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %52), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

56:                                               ; preds = %.split3.us
  %57 = tail call float @llvm.nvvm.rsqrt.approx.f(float %52), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %54, %56
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], !dbg !35
  %58 = zext nneg i32 %14 to i64, !dbg !36
  br label %59, !dbg !36

59:                                               ; preds = %__nv_rsqrtf.exit, %59
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next, %59 ]
  %60 = or disjoint i64 %indvars.iv, %58, !dbg !37
  %61 = getelementptr bfloat, ptr addrspace(1) %2, i64 %60, !dbg !38
  %62 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %61, i1 true) #4, !dbg !39
  %63 = bitcast i16 %62 to bfloat, !dbg !39
  %64 = fpext bfloat %63 to float, !dbg !40
  %65 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %16, %65
  %66 = sext i32 %.reass to i64, !dbg !41
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !41
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %67, i1 %13) #4, !dbg !42
  %69 = bitcast i16 %68 to bfloat, !dbg !42
  %70 = fpext bfloat %69 to float, !dbg !43
  %71 = getelementptr bfloat, ptr addrspace(1) %1, i64 %66, !dbg !44
  %72 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %71, i1 %13) #4, !dbg !45
  %73 = bitcast i16 %72 to bfloat, !dbg !45
  %74 = fpext bfloat %73 to float, !dbg !46
  %75 = fadd float %70, %74, !dbg !47
  %76 = fmul float %.0.i, %75, !dbg !48
  %77 = fmul float %76, %64, !dbg !49
  %78 = fptrunc float %77 to bfloat, !dbg !50
  %79 = bitcast bfloat %78 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %79, ptr addrspace(1) %67, i1 %13) #4, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !36
  %80 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !36
  br i1 %80, label %59, label %81, !dbg !36

81:                                               ; preds = %59
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py", directory: "/tmp/torchinductor_root/df")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 36, column: 45, scope: !6)
!17 = !DILocation(line: 36, column: 38, scope: !6)
!18 = !DILocation(line: 36, column: 55, scope: !6)
!19 = !DILocation(line: 36, column: 116, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 112, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 40, column: 22, scope: !6)
!25 = !DILocation(line: 42, column: 23, scope: !6)
!26 = !DILocation(line: 30, column: 40, scope: !6)
!27 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!30 = !DILocation(line: 44, column: 25, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 57, column: 24, scope: !6)
!34 = !DILocation(line: 59, column: 24, scope: !6)
!35 = !DILocation(line: 60, column: 32, scope: !6)
!36 = !DILocation(line: 45, column: 40, scope: !6)
!37 = !DILocation(line: 46, column: 31, scope: !6)
!38 = !DILocation(line: 51, column: 34, scope: !6)
!39 = !DILocation(line: 51, column: 41, scope: !6)
!40 = !DILocation(line: 51, column: 94, scope: !6)
!41 = !DILocation(line: 52, column: 38, scope: !6)
!42 = !DILocation(line: 52, column: 55, scope: !6)
!43 = !DILocation(line: 52, column: 117, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 52, scope: !6)
!46 = !DILocation(line: 53, column: 114, scope: !6)
!47 = !DILocation(line: 54, column: 23, scope: !6)
!48 = !DILocation(line: 61, column: 24, scope: !6)
!49 = !DILocation(line: 63, column: 23, scope: !6)
!50 = !DILocation(line: 64, column: 56, scope: !6)
!51 = !DILocation(line: 45, column: 4, scope: !6)
