; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 1, !dbg !11
  %21 = or disjoint i32 %18, 1, !dbg !12
  %22 = or disjoint i32 %18, %20, !dbg !12
  %23 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !13
  %24 = insertelement <2 x i32> %23, i32 %21, i64 1, !dbg !13
  %25 = icmp slt <2 x i32> %24, splat (i32 512), !dbg !13
  %26 = shufflevector <2 x i1> %25, <2 x i1> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !13
  %27 = extractelement <2 x i1> %25, i64 1, !dbg !13
  %28 = extractelement <2 x i1> %25, i64 0, !dbg !13
  %29 = icmp slt i32 %22, 512, !dbg !13
  %30 = shl i32 %19, 3, !dbg !14
  %31 = and i32 %30, 504, !dbg !14
  %32 = or disjoint i32 %31, 4, !dbg !14
  %33 = or disjoint i32 %31, 512, !dbg !14
  %34 = or disjoint i32 %31, 516, !dbg !14
  %35 = shl i32 %19, 4, !dbg !14
  %36 = and i32 %35, 1008, !dbg !14
  %37 = or disjoint i32 %36, 4, !dbg !14
  %38 = or disjoint i32 %36, 8, !dbg !14
  %39 = or disjoint i32 %36, 12, !dbg !14
  %40 = sext i32 %18 to i64, !dbg !15
  %41 = getelementptr bfloat, ptr addrspace(1) %4, i64 %40, !dbg !15
  %42 = sext i32 %21 to i64, !dbg !15
  %43 = getelementptr bfloat, ptr addrspace(1) %4, i64 %42, !dbg !15
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %28) #5, !dbg !16
  %60 = bitcast i16 %59 to bfloat, !dbg !16
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %27) #5, !dbg !16
  %77 = bitcast i16 %76 to bfloat, !dbg !16
  %78 = getelementptr bfloat, ptr addrspace(1) %5, i64 %40, !dbg !17
  %79 = getelementptr bfloat, ptr addrspace(1) %5, i64 %42, !dbg !17
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %28) #5, !dbg !18
  %96 = bitcast i16 %95 to bfloat, !dbg !18
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %27) #5, !dbg !18
  %113 = bitcast i16 %112 to bfloat, !dbg !18
  %114 = mul i32 %17, 6144, !dbg !19
  %115 = mul i32 %21, 3072, !dbg !19
  %.inv = fcmp oge bfloat %60, 0xR0000, !dbg !20
  %116 = select i1 %.inv, bfloat 0xR0000, bfloat %60, !dbg !20
  %117 = fpext bfloat %116 to float, !dbg !20
  %.inv3 = fcmp oge bfloat %77, 0xR0000, !dbg !20
  %118 = select i1 %.inv3, bfloat 0xR0000, bfloat %77, !dbg !20
  %119 = fpext bfloat %118 to float, !dbg !20
  %120 = fsub float 0.000000e+00, %117, !dbg !24
  %121 = fsub float 0.000000e+00, %119, !dbg !24
  %.inv4 = fcmp ole bfloat %96, 0xR0000, !dbg !25
  %122 = select i1 %.inv4, bfloat 0xR0000, bfloat %96, !dbg !25
  %123 = fpext bfloat %122 to float, !dbg !25
  %.inv5 = fcmp ole bfloat %113, 0xR0000, !dbg !25
  %124 = select i1 %.inv5, bfloat 0xR0000, bfloat %113, !dbg !25
  %125 = fpext bfloat %124 to float, !dbg !25
  %126 = fcmp ogt float %120, %123, !dbg !27
  %127 = fcmp ogt float %121, %125, !dbg !27
  %128 = fcmp uno float %120, 0.000000e+00, !dbg !29
  %129 = fcmp uno float %121, 0.000000e+00, !dbg !29
  %130 = or i1 %128, %126, !dbg !30
  %131 = or i1 %129, %127, !dbg !30
  %132 = select i1 %130, float %120, float %123, !dbg !31
  %133 = select i1 %131, float %121, float %125, !dbg !31
  %134 = fmul float %132, 0x3F80204080000000, !dbg !32
  %135 = fmul float %133, 0x3F80204080000000, !dbg !32
  %136 = fcmp ogt float %134, 0x3EE4F8B580000000, !dbg !33
  %137 = fcmp ogt float %135, 0x3EE4F8B580000000, !dbg !33
  %138 = fcmp uno float %134, 0.000000e+00, !dbg !35
  %139 = fcmp uno float %135, 0.000000e+00, !dbg !35
  %140 = or i1 %136, %138, !dbg !36
  %141 = or i1 %137, %139, !dbg !36
  %142 = select i1 %140, float %134, float 0x3EE4F8B580000000, !dbg !37
  %143 = select i1 %141, float %135, float 0x3EE4F8B580000000, !dbg !37
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %36
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %38
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %31
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %33
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %36
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %37
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %38
  %151 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %39
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31
  %153 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %154 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %33
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %34
  %156 = zext nneg i32 %34 to i64, !dbg !38
  %157 = zext nneg i32 %33 to i64, !dbg !38
  %158 = zext nneg i32 %32 to i64, !dbg !38
  %159 = zext nneg i32 %31 to i64, !dbg !38
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) %152, i32 8
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 8
  %162 = getelementptr inbounds nuw i8, ptr addrspace(3) %154, i32 8
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8
  %164 = shufflevector <2 x i1> %25, <2 x i1> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  br label %165, !dbg !38

165:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %16 ], [ %1028, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %16 ], [ %1029, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %16 ], [ %1030, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %16 ], [ %1031, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %16 ], [ %1032, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %16 ], [ %1033, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %16 ], [ %1034, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %16 ], [ %1035, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %16 ], [ %1036, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %16 ], [ %1037, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %16 ], [ %1038, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %16 ], [ %1039, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %16 ], [ %1040, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %16 ], [ %1041, %._crit_edge ]
  %180 = phi float [ 0.000000e+00, %16 ], [ %1042, %._crit_edge ]
  %181 = phi float [ 0.000000e+00, %16 ], [ %1043, %._crit_edge ]
  %182 = phi float [ 0.000000e+00, %16 ], [ %1044, %._crit_edge ]
  %183 = phi float [ 0.000000e+00, %16 ], [ %1045, %._crit_edge ]
  %184 = phi float [ 0.000000e+00, %16 ], [ %1046, %._crit_edge ]
  %185 = phi float [ 0.000000e+00, %16 ], [ %1047, %._crit_edge ]
  %186 = phi float [ 0.000000e+00, %16 ], [ %1048, %._crit_edge ]
  %187 = phi float [ 0.000000e+00, %16 ], [ %1049, %._crit_edge ]
  %188 = phi float [ 0.000000e+00, %16 ], [ %1050, %._crit_edge ]
  %189 = phi float [ 0.000000e+00, %16 ], [ %1051, %._crit_edge ]
  %190 = phi float [ 0.000000e+00, %16 ], [ %1052, %._crit_edge ]
  %191 = phi float [ 0.000000e+00, %16 ], [ %1053, %._crit_edge ]
  %192 = phi float [ 0.000000e+00, %16 ], [ %1054, %._crit_edge ]
  %193 = phi float [ 0.000000e+00, %16 ], [ %1055, %._crit_edge ]
  %194 = phi float [ 0.000000e+00, %16 ], [ %1056, %._crit_edge ]
  %195 = phi float [ 0.000000e+00, %16 ], [ %1057, %._crit_edge ]
  %196 = phi float [ 0.000000e+00, %16 ], [ %1058, %._crit_edge ]
  %197 = phi float [ 0.000000e+00, %16 ], [ %1059, %._crit_edge ]
  %198 = phi float [ 0.000000e+00, %16 ], [ %996, %._crit_edge ]
  %199 = phi float [ 0.000000e+00, %16 ], [ %997, %._crit_edge ]
  %200 = phi float [ 0.000000e+00, %16 ], [ %998, %._crit_edge ]
  %201 = phi float [ 0.000000e+00, %16 ], [ %999, %._crit_edge ]
  %202 = phi float [ 0.000000e+00, %16 ], [ %1000, %._crit_edge ]
  %203 = phi float [ 0.000000e+00, %16 ], [ %1001, %._crit_edge ]
  %204 = phi float [ 0.000000e+00, %16 ], [ %1002, %._crit_edge ]
  %205 = phi float [ 0.000000e+00, %16 ], [ %1003, %._crit_edge ]
  %206 = phi float [ 0.000000e+00, %16 ], [ %1004, %._crit_edge ]
  %207 = phi float [ 0.000000e+00, %16 ], [ %1005, %._crit_edge ]
  %208 = phi float [ 0.000000e+00, %16 ], [ %1006, %._crit_edge ]
  %209 = phi float [ 0.000000e+00, %16 ], [ %1007, %._crit_edge ]
  %210 = phi float [ 0.000000e+00, %16 ], [ %1008, %._crit_edge ]
  %211 = phi float [ 0.000000e+00, %16 ], [ %1009, %._crit_edge ]
  %212 = phi float [ 0.000000e+00, %16 ], [ %1010, %._crit_edge ]
  %213 = phi float [ 0.000000e+00, %16 ], [ %1011, %._crit_edge ]
  %214 = phi float [ 0.000000e+00, %16 ], [ %1012, %._crit_edge ]
  %215 = phi float [ 0.000000e+00, %16 ], [ %1013, %._crit_edge ]
  %216 = phi float [ 0.000000e+00, %16 ], [ %1014, %._crit_edge ]
  %217 = phi float [ 0.000000e+00, %16 ], [ %1015, %._crit_edge ]
  %218 = phi float [ 0.000000e+00, %16 ], [ %1016, %._crit_edge ]
  %219 = phi float [ 0.000000e+00, %16 ], [ %1017, %._crit_edge ]
  %220 = phi float [ 0.000000e+00, %16 ], [ %1018, %._crit_edge ]
  %221 = phi float [ 0.000000e+00, %16 ], [ %1019, %._crit_edge ]
  %222 = phi float [ 0.000000e+00, %16 ], [ %1020, %._crit_edge ]
  %223 = phi float [ 0.000000e+00, %16 ], [ %1021, %._crit_edge ]
  %224 = phi float [ 0.000000e+00, %16 ], [ %1022, %._crit_edge ]
  %225 = phi float [ 0.000000e+00, %16 ], [ %1023, %._crit_edge ]
  %226 = phi float [ 0.000000e+00, %16 ], [ %1024, %._crit_edge ]
  %227 = phi float [ 0.000000e+00, %16 ], [ %1025, %._crit_edge ]
  %228 = phi float [ 0.000000e+00, %16 ], [ %1026, %._crit_edge ]
  %229 = phi float [ 0.000000e+00, %16 ], [ %1027, %._crit_edge ]
  %230 = phi <32 x float> [ zeroinitializer, %16 ], [ %995, %._crit_edge ]
  %231 = or disjoint i64 %indvars.iv, %159, !dbg !40
  %232 = or disjoint i64 %indvars.iv, %158, !dbg !40
  %233 = or disjoint i64 %indvars.iv, %157, !dbg !40
  %234 = or disjoint i64 %indvars.iv, %156, !dbg !40
  %235 = trunc i64 %indvars.iv to i32, !dbg !41
  %236 = or disjoint i32 %36, %235, !dbg !41
  %237 = add i32 %236, %114, !dbg !41
  %238 = trunc i64 %indvars.iv to i32, !dbg !41
  %239 = or disjoint i32 %37, %238, !dbg !41
  %240 = add i32 %239, %114, !dbg !41
  %241 = trunc i64 %indvars.iv to i32, !dbg !41
  %242 = or disjoint i32 %38, %241, !dbg !41
  %243 = add i32 %242, %114, !dbg !41
  %244 = trunc i64 %indvars.iv to i32, !dbg !41
  %245 = or disjoint i32 %39, %244, !dbg !41
  %246 = add i32 %245, %114, !dbg !41
  %247 = add i32 %236, %115, !dbg !41
  %248 = add i32 %239, %115, !dbg !41
  %249 = add i32 %242, %115, !dbg !41
  %250 = add i32 %245, %115, !dbg !41
  %251 = trunc nuw nsw i64 %231 to i32, !dbg !41
  %252 = add i32 %114, %251, !dbg !41
  %253 = trunc nuw nsw i64 %233 to i32, !dbg !41
  %254 = add i32 %114, %253, !dbg !41
  %255 = add i32 %115, %251, !dbg !41
  %256 = add i32 %115, %253, !dbg !41
  %257 = sext i32 %237 to i64, !dbg !42
  %258 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !42
  %259 = sext i32 %243 to i64, !dbg !42
  %260 = getelementptr bfloat, ptr addrspace(1) %0, i64 %259, !dbg !42
  %261 = sext i32 %247 to i64, !dbg !42
  %262 = getelementptr bfloat, ptr addrspace(1) %0, i64 %261, !dbg !42
  %263 = sext i32 %249 to i64, !dbg !42
  %264 = getelementptr bfloat, ptr addrspace(1) %0, i64 %263, !dbg !42
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %258, i1 %28) #5, !dbg !43
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !43
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !43
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !43
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !43
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %260, i1 %28) #5, !dbg !43
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !43
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !43
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !43
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !43
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %262, i1 %28) #5, !dbg !43
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !43
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !43
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !43
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !43
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %264, i1 %28) #5, !dbg !43
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !43
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !43
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !43
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %266, i32 %267, i32 %268, i32 %269, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %145, i32 %271, i32 %272, i32 %273, i32 %274, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %285 = add nuw nsw i64 %231, 6144, !dbg !45
  %286 = add nuw nsw i64 %233, 6144, !dbg !45
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %232, !dbg !46
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !46
  %gep262 = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %234, !dbg !46
  %289 = getelementptr bfloat, ptr addrspace(1) %2, i64 %285, !dbg !47
  %290 = getelementptr bfloat, ptr addrspace(1) %2, i64 %286, !dbg !47
  %291 = getelementptr i32, ptr addrspace(1) %3, i64 %257, !dbg !48
  %292 = sext i32 %240 to i64, !dbg !48
  %293 = getelementptr i32, ptr addrspace(1) %3, i64 %292, !dbg !48
  %294 = getelementptr i32, ptr addrspace(1) %3, i64 %259, !dbg !48
  %295 = sext i32 %246 to i64, !dbg !48
  %296 = getelementptr i32, ptr addrspace(1) %3, i64 %295, !dbg !48
  %297 = getelementptr i32, ptr addrspace(1) %3, i64 %261, !dbg !48
  %298 = sext i32 %248 to i64, !dbg !48
  %299 = getelementptr i32, ptr addrspace(1) %3, i64 %298, !dbg !48
  %300 = getelementptr i32, ptr addrspace(1) %3, i64 %263, !dbg !48
  %301 = sext i32 %250 to i64, !dbg !48
  %302 = getelementptr i32, ptr addrspace(1) %3, i64 %301, !dbg !48
  %303 = getelementptr bfloat, ptr addrspace(1) %6, i64 %231, !dbg !49
  %304 = getelementptr bfloat, ptr addrspace(1) %6, i64 %233, !dbg !49
  %305 = getelementptr bfloat, ptr addrspace(1) %7, i64 %231, !dbg !50
  %306 = getelementptr bfloat, ptr addrspace(1) %7, i64 %233, !dbg !50
  %307 = load <8 x bfloat>, ptr addrspace(3) %146, align 16, !dbg !44
  %308 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %276, i32 %277, i32 %278, i32 %279, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %145, i32 %281, i32 %282, i32 %283, i32 %284, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %309 = load <8 x bfloat>, ptr addrspace(3) %146, align 16, !dbg !44
  %310 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !44
  %311 = shufflevector <8 x bfloat> %307, <8 x bfloat> %308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %312 = shufflevector <8 x bfloat> %309, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %313 = shufflevector <32 x bfloat> %311, <32 x bfloat> %312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %314 = shufflevector <8 x bfloat> %310, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %315 = shufflevector <32 x bfloat> %313, <32 x bfloat> %314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !44
  %316 = fpext <32 x bfloat> %315 to <32 x float>, !dbg !44
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %287, i1 true) #5, !dbg !51
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !51
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !51
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !51
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !51
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !51
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !51
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !51
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !51
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !51
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %288, i1 true) #5, !dbg !51
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !51
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !51
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !51
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !51
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep262, i1 true) #5, !dbg !51
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !51
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !51
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !51
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !51
  %337 = insertelement <16 x i32> poison, i32 %318, i64 0, !dbg !51
  %338 = insertelement <16 x i32> %337, i32 %319, i64 1, !dbg !51
  %339 = insertelement <16 x i32> %338, i32 %320, i64 2, !dbg !51
  %340 = insertelement <16 x i32> %339, i32 %321, i64 3, !dbg !51
  %341 = insertelement <16 x i32> %340, i32 %323, i64 4, !dbg !51
  %342 = insertelement <16 x i32> %341, i32 %324, i64 5, !dbg !51
  %343 = insertelement <16 x i32> %342, i32 %325, i64 6, !dbg !51
  %344 = insertelement <16 x i32> %343, i32 %326, i64 7, !dbg !51
  %345 = insertelement <16 x i32> %344, i32 %328, i64 8, !dbg !51
  %346 = insertelement <16 x i32> %345, i32 %329, i64 9, !dbg !51
  %347 = insertelement <16 x i32> %346, i32 %330, i64 10, !dbg !51
  %348 = insertelement <16 x i32> %347, i32 %331, i64 11, !dbg !51
  %349 = insertelement <16 x i32> %348, i32 %333, i64 12, !dbg !51
  %350 = insertelement <16 x i32> %349, i32 %334, i64 13, !dbg !51
  %351 = insertelement <16 x i32> %350, i32 %335, i64 14, !dbg !51
  %352 = insertelement <16 x i32> %351, i32 %336, i64 15, !dbg !51
  %353 = bitcast <16 x i32> %352 to <16 x float>, !dbg !51
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %289, i1 true) #5, !dbg !52
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !52
  %356 = bitcast i32 %355 to <2 x bfloat>, !dbg !52
  %357 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !52
  %358 = bitcast i32 %357 to <2 x bfloat>, !dbg !52
  %359 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !52
  %360 = bitcast i32 %359 to <2 x bfloat>, !dbg !52
  %361 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !52
  %362 = bitcast i32 %361 to <2 x bfloat>, !dbg !52
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %290, i1 true) #5, !dbg !52
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !52
  %365 = bitcast i32 %364 to <2 x bfloat>, !dbg !52
  %366 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !52
  %367 = bitcast i32 %366 to <2 x bfloat>, !dbg !52
  %368 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !52
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !52
  %370 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !52
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !52
  %372 = shufflevector <2 x bfloat> %356, <2 x bfloat> %358, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %373 = shufflevector <2 x bfloat> %360, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %374 = shufflevector <16 x bfloat> %372, <16 x bfloat> %373, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %375 = shufflevector <2 x bfloat> %360, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %376 = shufflevector <16 x bfloat> %374, <16 x bfloat> %375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %377 = shufflevector <2 x bfloat> %362, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %378 = shufflevector <16 x bfloat> %376, <16 x bfloat> %377, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %379 = shufflevector <2 x bfloat> %362, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %380 = shufflevector <16 x bfloat> %378, <16 x bfloat> %379, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %381 = shufflevector <2 x bfloat> %365, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %382 = shufflevector <16 x bfloat> %380, <16 x bfloat> %381, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %383 = shufflevector <2 x bfloat> %365, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %384 = shufflevector <16 x bfloat> %382, <16 x bfloat> %383, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %385 = shufflevector <2 x bfloat> %367, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %386 = shufflevector <16 x bfloat> %384, <16 x bfloat> %385, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %387 = shufflevector <2 x bfloat> %367, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %388 = shufflevector <16 x bfloat> %386, <16 x bfloat> %387, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %389 = shufflevector <2 x bfloat> %369, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %390 = shufflevector <16 x bfloat> %388, <16 x bfloat> %389, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !53
  %391 = shufflevector <2 x bfloat> %369, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %392 = shufflevector <16 x bfloat> %390, <16 x bfloat> %391, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !53
  %393 = shufflevector <2 x bfloat> %371, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %394 = shufflevector <16 x bfloat> %392, <16 x bfloat> %393, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !53
  %395 = shufflevector <2 x bfloat> %371, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %396 = shufflevector <16 x bfloat> %394, <16 x bfloat> %395, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !53
  %397 = fpext <16 x bfloat> %396 to <16 x float>, !dbg !53
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %291, i1 %28) #5, !dbg !54
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !54
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !54
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !54
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !54
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %293, i1 %28) #5, !dbg !54
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !54
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !54
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !54
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !54
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %28) #5, !dbg !54
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !54
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !54
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !54
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !54
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %296, i1 %28) #5, !dbg !54
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !54
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !54
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !54
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !54
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %28) #5, !dbg !54
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !54
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !54
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !54
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !54
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %28) #5, !dbg !54
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !54
  %425 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !54
  %426 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !54
  %427 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !54
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 %28) #5, !dbg !54
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !54
  %430 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !54
  %431 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !54
  %432 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !54
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %302, i1 %28) #5, !dbg !54
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !54
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !54
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !54
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !54
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %303, i1 true) #5, !dbg !55
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !55
  %440 = bitcast i32 %439 to <2 x bfloat>, !dbg !55
  %441 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !55
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !55
  %443 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !55
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !55
  %445 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !55
  %446 = bitcast i32 %445 to <2 x bfloat>, !dbg !55
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %304, i1 true) #5, !dbg !55
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !55
  %449 = bitcast i32 %448 to <2 x bfloat>, !dbg !55
  %450 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !55
  %451 = bitcast i32 %450 to <2 x bfloat>, !dbg !55
  %452 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !55
  %453 = bitcast i32 %452 to <2 x bfloat>, !dbg !55
  %454 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !55
  %455 = bitcast i32 %454 to <2 x bfloat>, !dbg !55
  %456 = shufflevector <2 x bfloat> %440, <2 x bfloat> %442, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %457 = shufflevector <2 x bfloat> %444, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %458 = shufflevector <16 x bfloat> %456, <16 x bfloat> %457, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %459 = shufflevector <2 x bfloat> %444, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %460 = shufflevector <16 x bfloat> %458, <16 x bfloat> %459, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %461 = shufflevector <2 x bfloat> %446, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %462 = shufflevector <16 x bfloat> %460, <16 x bfloat> %461, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %463 = shufflevector <2 x bfloat> %446, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %464 = shufflevector <16 x bfloat> %462, <16 x bfloat> %463, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %465 = shufflevector <2 x bfloat> %449, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %466 = shufflevector <16 x bfloat> %464, <16 x bfloat> %465, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %467 = shufflevector <2 x bfloat> %449, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %468 = shufflevector <16 x bfloat> %466, <16 x bfloat> %467, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %469 = shufflevector <2 x bfloat> %451, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %470 = shufflevector <16 x bfloat> %468, <16 x bfloat> %469, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %471 = shufflevector <2 x bfloat> %451, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %472 = shufflevector <16 x bfloat> %470, <16 x bfloat> %471, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %473 = shufflevector <2 x bfloat> %453, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %474 = shufflevector <16 x bfloat> %472, <16 x bfloat> %473, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !56
  %475 = shufflevector <2 x bfloat> %453, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %476 = shufflevector <16 x bfloat> %474, <16 x bfloat> %475, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !56
  %477 = shufflevector <2 x bfloat> %455, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %478 = shufflevector <16 x bfloat> %476, <16 x bfloat> %477, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !56
  %479 = shufflevector <2 x bfloat> %455, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %480 = shufflevector <16 x bfloat> %478, <16 x bfloat> %479, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !56
  %481 = fpext <16 x bfloat> %480 to <16 x float>, !dbg !56
  %482 = shufflevector <16 x float> %481, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !56
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %305, i1 true) #5, !dbg !57
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !57
  %485 = bitcast i32 %484 to <2 x bfloat>, !dbg !57
  %486 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !57
  %487 = bitcast i32 %486 to <2 x bfloat>, !dbg !57
  %488 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !57
  %489 = bitcast i32 %488 to <2 x bfloat>, !dbg !57
  %490 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !57
  %491 = bitcast i32 %490 to <2 x bfloat>, !dbg !57
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %306, i1 true) #5, !dbg !57
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !57
  %494 = bitcast i32 %493 to <2 x bfloat>, !dbg !57
  %495 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !57
  %496 = bitcast i32 %495 to <2 x bfloat>, !dbg !57
  %497 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !57
  %498 = bitcast i32 %497 to <2 x bfloat>, !dbg !57
  %499 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !57
  %500 = bitcast i32 %499 to <2 x bfloat>, !dbg !57
  %501 = shufflevector <2 x bfloat> %485, <2 x bfloat> %487, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %502 = shufflevector <2 x bfloat> %489, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %503 = shufflevector <16 x bfloat> %501, <16 x bfloat> %502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %504 = shufflevector <2 x bfloat> %489, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %505 = shufflevector <16 x bfloat> %503, <16 x bfloat> %504, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %506 = shufflevector <2 x bfloat> %491, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %507 = shufflevector <16 x bfloat> %505, <16 x bfloat> %506, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %508 = shufflevector <2 x bfloat> %491, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %509 = shufflevector <16 x bfloat> %507, <16 x bfloat> %508, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %510 = shufflevector <2 x bfloat> %494, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %511 = shufflevector <16 x bfloat> %509, <16 x bfloat> %510, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %512 = shufflevector <2 x bfloat> %494, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %513 = shufflevector <16 x bfloat> %511, <16 x bfloat> %512, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %514 = shufflevector <2 x bfloat> %496, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %515 = shufflevector <16 x bfloat> %513, <16 x bfloat> %514, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %516 = shufflevector <2 x bfloat> %496, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %517 = shufflevector <16 x bfloat> %515, <16 x bfloat> %516, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %518 = shufflevector <2 x bfloat> %498, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %519 = shufflevector <16 x bfloat> %517, <16 x bfloat> %518, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !58
  %520 = shufflevector <2 x bfloat> %498, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %521 = shufflevector <16 x bfloat> %519, <16 x bfloat> %520, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !58
  %522 = shufflevector <2 x bfloat> %500, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %523 = shufflevector <16 x bfloat> %521, <16 x bfloat> %522, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !58
  %524 = shufflevector <2 x bfloat> %500, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %525 = shufflevector <16 x bfloat> %523, <16 x bfloat> %524, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !58
  %526 = fpext <16 x bfloat> %525 to <16 x float>, !dbg !58
  %527 = shufflevector <16 x float> %526, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !58
  %528 = fadd <16 x float> %353, %397, !dbg !59
  %529 = shufflevector <16 x float> %528, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !59
  %530 = sitofp i32 %399 to float, !dbg !60
  %531 = sitofp i32 %400 to float, !dbg !60
  %532 = sitofp i32 %401 to float, !dbg !60
  %533 = sitofp i32 %402 to float, !dbg !60
  %534 = sitofp i32 %404 to float, !dbg !60
  %535 = sitofp i32 %405 to float, !dbg !60
  %536 = sitofp i32 %406 to float, !dbg !60
  %537 = sitofp i32 %407 to float, !dbg !60
  %538 = sitofp i32 %409 to float, !dbg !60
  %539 = sitofp i32 %410 to float, !dbg !60
  %540 = sitofp i32 %411 to float, !dbg !60
  %541 = sitofp i32 %412 to float, !dbg !60
  %542 = sitofp i32 %414 to float, !dbg !60
  %543 = sitofp i32 %415 to float, !dbg !60
  %544 = sitofp i32 %416 to float, !dbg !60
  %545 = sitofp i32 %417 to float, !dbg !60
  %546 = sitofp i32 %419 to float, !dbg !60
  %547 = sitofp i32 %420 to float, !dbg !60
  %548 = sitofp i32 %421 to float, !dbg !60
  %549 = sitofp i32 %422 to float, !dbg !60
  %550 = sitofp i32 %424 to float, !dbg !60
  %551 = sitofp i32 %425 to float, !dbg !60
  %552 = sitofp i32 %426 to float, !dbg !60
  %553 = sitofp i32 %427 to float, !dbg !60
  %554 = sitofp i32 %429 to float, !dbg !60
  %555 = sitofp i32 %430 to float, !dbg !60
  %556 = sitofp i32 %431 to float, !dbg !60
  %557 = sitofp i32 %432 to float, !dbg !60
  %558 = sitofp i32 %434 to float, !dbg !60
  %559 = sitofp i32 %435 to float, !dbg !60
  %560 = sitofp i32 %436 to float, !dbg !60
  %561 = sitofp i32 %437 to float, !dbg !60
  %562 = fmul float %142, %530, !dbg !61
  %563 = fmul float %142, %531, !dbg !61
  %564 = fmul float %142, %532, !dbg !61
  %565 = fmul float %142, %533, !dbg !61
  %566 = fmul float %142, %534, !dbg !61
  %567 = fmul float %142, %535, !dbg !61
  %568 = fmul float %142, %536, !dbg !61
  %569 = fmul float %142, %537, !dbg !61
  %570 = fmul float %142, %538, !dbg !61
  %571 = fmul float %142, %539, !dbg !61
  %572 = fmul float %142, %540, !dbg !61
  %573 = fmul float %142, %541, !dbg !61
  %574 = fmul float %142, %542, !dbg !61
  %575 = fmul float %142, %543, !dbg !61
  %576 = fmul float %142, %544, !dbg !61
  %577 = fmul float %142, %545, !dbg !61
  %578 = fmul float %143, %546, !dbg !61
  %579 = fmul float %143, %547, !dbg !61
  %580 = fmul float %143, %548, !dbg !61
  %581 = fmul float %143, %549, !dbg !61
  %582 = fmul float %143, %550, !dbg !61
  %583 = fmul float %143, %551, !dbg !61
  %584 = fmul float %143, %552, !dbg !61
  %585 = fmul float %143, %553, !dbg !61
  %586 = fmul float %143, %554, !dbg !61
  %587 = fmul float %143, %555, !dbg !61
  %588 = fmul float %143, %556, !dbg !61
  %589 = fmul float %143, %557, !dbg !61
  %590 = fmul float %143, %558, !dbg !61
  %591 = fmul float %143, %559, !dbg !61
  %592 = fmul float %143, %560, !dbg !61
  %593 = fmul float %143, %561, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %594 = bitcast float %562 to i32, !dbg !61
  %595 = bitcast float %563 to i32, !dbg !61
  %596 = bitcast float %564 to i32, !dbg !61
  %597 = bitcast float %565 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %594, i32 %595, i32 %596, i32 %597, i1 true) #5, !dbg !61
  %598 = bitcast float %566 to i32, !dbg !61
  %599 = bitcast float %567 to i32, !dbg !61
  %600 = bitcast float %568 to i32, !dbg !61
  %601 = bitcast float %569 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %149, i32 %598, i32 %599, i32 %600, i32 %601, i1 true) #5, !dbg !61
  %602 = bitcast float %570 to i32, !dbg !61
  %603 = bitcast float %571 to i32, !dbg !61
  %604 = bitcast float %572 to i32, !dbg !61
  %605 = bitcast float %573 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %150, i32 %602, i32 %603, i32 %604, i32 %605, i1 true) #5, !dbg !61
  %606 = bitcast float %574 to i32, !dbg !61
  %607 = bitcast float %575 to i32, !dbg !61
  %608 = bitcast float %576 to i32, !dbg !61
  %609 = bitcast float %577 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %151, i32 %606, i32 %607, i32 %608, i32 %609, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %610 = load <8 x float>, ptr addrspace(3) %152, align 16, !dbg !61
  %611 = load <8 x float>, ptr addrspace(3) %154, align 16, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %612 = bitcast float %578 to i32, !dbg !61
  %613 = bitcast float %579 to i32, !dbg !61
  %614 = bitcast float %580 to i32, !dbg !61
  %615 = bitcast float %581 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %612, i32 %613, i32 %614, i32 %615, i1 true) #5, !dbg !61
  %616 = bitcast float %582 to i32, !dbg !61
  %617 = bitcast float %583 to i32, !dbg !61
  %618 = bitcast float %584 to i32, !dbg !61
  %619 = bitcast float %585 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %149, i32 %616, i32 %617, i32 %618, i32 %619, i1 true) #5, !dbg !61
  %620 = bitcast float %586 to i32, !dbg !61
  %621 = bitcast float %587 to i32, !dbg !61
  %622 = bitcast float %588 to i32, !dbg !61
  %623 = bitcast float %589 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %150, i32 %620, i32 %621, i32 %622, i32 %623, i1 true) #5, !dbg !61
  %624 = bitcast float %590 to i32, !dbg !61
  %625 = bitcast float %591 to i32, !dbg !61
  %626 = bitcast float %592 to i32, !dbg !61
  %627 = bitcast float %593 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %151, i32 %624, i32 %625, i32 %626, i32 %627, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %628 = load <8 x float>, ptr addrspace(3) %152, align 16, !dbg !61
  %629 = load <8 x float>, ptr addrspace(3) %154, align 16, !dbg !61
  %630 = shufflevector <8 x float> %610, <8 x float> %611, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %631 = shufflevector <8 x float> %628, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %632 = shufflevector <32 x float> %630, <32 x float> %631, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %633 = shufflevector <8 x float> %629, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %634 = shufflevector <32 x float> %632, <32 x float> %633, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !62
  %635 = fmul <32 x float> %634, %482, !dbg !62
  %636 = fadd <32 x float> %635, %527, !dbg !63
  %637 = fmul <32 x float> %529, %636, !dbg !64
  %638 = fadd <32 x float> %637, %316, !dbg !65
  %639 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %639, label %._crit_edge, label %640, !dbg !67

640:                                              ; preds = %165
  %641 = fsub <32 x float> %638, %230, !dbg !69
  %642 = extractelement <32 x float> %641, i64 0, !dbg !69
  %643 = fsub <32 x float> %638, %230, !dbg !69
  %644 = extractelement <32 x float> %643, i64 1, !dbg !69
  %645 = fsub <32 x float> %638, %230, !dbg !69
  %646 = extractelement <32 x float> %645, i64 2, !dbg !69
  %647 = fsub <32 x float> %638, %230, !dbg !69
  %648 = extractelement <32 x float> %647, i64 3, !dbg !69
  %649 = fsub <32 x float> %638, %230, !dbg !69
  %650 = extractelement <32 x float> %649, i64 4, !dbg !69
  %651 = fsub <32 x float> %638, %230, !dbg !69
  %652 = extractelement <32 x float> %651, i64 5, !dbg !69
  %653 = fsub <32 x float> %638, %230, !dbg !69
  %654 = extractelement <32 x float> %653, i64 6, !dbg !69
  %655 = fsub <32 x float> %638, %230, !dbg !69
  %656 = extractelement <32 x float> %655, i64 7, !dbg !69
  %657 = fsub <32 x float> %638, %230, !dbg !69
  %658 = extractelement <32 x float> %657, i64 8, !dbg !69
  %659 = fsub <32 x float> %638, %230, !dbg !69
  %660 = extractelement <32 x float> %659, i64 9, !dbg !69
  %661 = fsub <32 x float> %638, %230, !dbg !69
  %662 = extractelement <32 x float> %661, i64 10, !dbg !69
  %663 = fsub <32 x float> %638, %230, !dbg !69
  %664 = extractelement <32 x float> %663, i64 11, !dbg !69
  %665 = fsub <32 x float> %638, %230, !dbg !69
  %666 = extractelement <32 x float> %665, i64 12, !dbg !69
  %667 = fsub <32 x float> %638, %230, !dbg !69
  %668 = extractelement <32 x float> %667, i64 13, !dbg !69
  %669 = fsub <32 x float> %638, %230, !dbg !69
  %670 = extractelement <32 x float> %669, i64 14, !dbg !69
  %671 = fsub <32 x float> %638, %230, !dbg !69
  %672 = extractelement <32 x float> %671, i64 15, !dbg !69
  %673 = fsub <32 x float> %638, %230, !dbg !69
  %674 = extractelement <32 x float> %673, i64 16, !dbg !69
  %675 = fsub <32 x float> %638, %230, !dbg !69
  %676 = extractelement <32 x float> %675, i64 17, !dbg !69
  %677 = fsub <32 x float> %638, %230, !dbg !69
  %678 = extractelement <32 x float> %677, i64 18, !dbg !69
  %679 = fsub <32 x float> %638, %230, !dbg !69
  %680 = extractelement <32 x float> %679, i64 19, !dbg !69
  %681 = fsub <32 x float> %638, %230, !dbg !69
  %682 = extractelement <32 x float> %681, i64 20, !dbg !69
  %683 = fsub <32 x float> %638, %230, !dbg !69
  %684 = extractelement <32 x float> %683, i64 21, !dbg !69
  %685 = fsub <32 x float> %638, %230, !dbg !69
  %686 = extractelement <32 x float> %685, i64 22, !dbg !69
  %687 = fsub <32 x float> %638, %230, !dbg !69
  %688 = extractelement <32 x float> %687, i64 23, !dbg !69
  %689 = fsub <32 x float> %638, %230, !dbg !69
  %690 = extractelement <32 x float> %689, i64 24, !dbg !69
  %691 = fsub <32 x float> %638, %230, !dbg !69
  %692 = extractelement <32 x float> %691, i64 25, !dbg !69
  %693 = fsub <32 x float> %638, %230, !dbg !69
  %694 = extractelement <32 x float> %693, i64 26, !dbg !69
  %695 = fsub <32 x float> %638, %230, !dbg !69
  %696 = extractelement <32 x float> %695, i64 27, !dbg !69
  %697 = fsub <32 x float> %638, %230, !dbg !69
  %698 = extractelement <32 x float> %697, i64 28, !dbg !69
  %699 = fsub <32 x float> %638, %230, !dbg !69
  %700 = extractelement <32 x float> %699, i64 29, !dbg !69
  %701 = fsub <32 x float> %638, %230, !dbg !69
  %702 = extractelement <32 x float> %701, i64 30, !dbg !69
  %703 = fsub <32 x float> %638, %230, !dbg !69
  %704 = extractelement <32 x float> %703, i64 31, !dbg !69
  %705 = fadd float %166, 1.000000e+00, !dbg !70
  %706 = fadd float %167, 1.000000e+00, !dbg !70
  %707 = fadd float %168, 1.000000e+00, !dbg !70
  %708 = fadd float %169, 1.000000e+00, !dbg !70
  %709 = fadd float %170, 1.000000e+00, !dbg !70
  %710 = fadd float %171, 1.000000e+00, !dbg !70
  %711 = fadd float %172, 1.000000e+00, !dbg !70
  %712 = fadd float %173, 1.000000e+00, !dbg !70
  %713 = fadd float %174, 1.000000e+00, !dbg !70
  %714 = fadd float %175, 1.000000e+00, !dbg !70
  %715 = fadd float %176, 1.000000e+00, !dbg !70
  %716 = fadd float %177, 1.000000e+00, !dbg !70
  %717 = fadd float %178, 1.000000e+00, !dbg !70
  %718 = fadd float %179, 1.000000e+00, !dbg !70
  %719 = fadd float %180, 1.000000e+00, !dbg !70
  %720 = fadd float %181, 1.000000e+00, !dbg !70
  %721 = fadd float %182, 1.000000e+00, !dbg !70
  %722 = fadd float %183, 1.000000e+00, !dbg !70
  %723 = fadd float %184, 1.000000e+00, !dbg !70
  %724 = fadd float %185, 1.000000e+00, !dbg !70
  %725 = fadd float %186, 1.000000e+00, !dbg !70
  %726 = fadd float %187, 1.000000e+00, !dbg !70
  %727 = fadd float %188, 1.000000e+00, !dbg !70
  %728 = fadd float %189, 1.000000e+00, !dbg !70
  %729 = fadd float %190, 1.000000e+00, !dbg !70
  %730 = fadd float %191, 1.000000e+00, !dbg !70
  %731 = fadd float %192, 1.000000e+00, !dbg !70
  %732 = fadd float %193, 1.000000e+00, !dbg !70
  %733 = fadd float %194, 1.000000e+00, !dbg !70
  %734 = fadd float %195, 1.000000e+00, !dbg !70
  %735 = fadd float %196, 1.000000e+00, !dbg !70
  %736 = fadd float %197, 1.000000e+00, !dbg !70
  %737 = tail call float @llvm.nvvm.div.full(float %642, float %705), !dbg !71
  %738 = tail call float @llvm.nvvm.div.full(float %644, float %706), !dbg !71
  %739 = tail call float @llvm.nvvm.div.full(float %646, float %707), !dbg !71
  %740 = tail call float @llvm.nvvm.div.full(float %648, float %708), !dbg !71
  %741 = tail call float @llvm.nvvm.div.full(float %650, float %709), !dbg !71
  %742 = tail call float @llvm.nvvm.div.full(float %652, float %710), !dbg !71
  %743 = tail call float @llvm.nvvm.div.full(float %654, float %711), !dbg !71
  %744 = tail call float @llvm.nvvm.div.full(float %656, float %712), !dbg !71
  %745 = tail call float @llvm.nvvm.div.full(float %658, float %713), !dbg !71
  %746 = tail call float @llvm.nvvm.div.full(float %660, float %714), !dbg !71
  %747 = tail call float @llvm.nvvm.div.full(float %662, float %715), !dbg !71
  %748 = tail call float @llvm.nvvm.div.full(float %664, float %716), !dbg !71
  %749 = tail call float @llvm.nvvm.div.full(float %666, float %717), !dbg !71
  %750 = tail call float @llvm.nvvm.div.full(float %668, float %718), !dbg !71
  %751 = tail call float @llvm.nvvm.div.full(float %670, float %719), !dbg !71
  %752 = tail call float @llvm.nvvm.div.full(float %672, float %720), !dbg !71
  %753 = tail call float @llvm.nvvm.div.full(float %674, float %721), !dbg !71
  %754 = tail call float @llvm.nvvm.div.full(float %676, float %722), !dbg !71
  %755 = tail call float @llvm.nvvm.div.full(float %678, float %723), !dbg !71
  %756 = tail call float @llvm.nvvm.div.full(float %680, float %724), !dbg !71
  %757 = tail call float @llvm.nvvm.div.full(float %682, float %725), !dbg !71
  %758 = tail call float @llvm.nvvm.div.full(float %684, float %726), !dbg !71
  %759 = tail call float @llvm.nvvm.div.full(float %686, float %727), !dbg !71
  %760 = tail call float @llvm.nvvm.div.full(float %688, float %728), !dbg !71
  %761 = tail call float @llvm.nvvm.div.full(float %690, float %729), !dbg !71
  %762 = tail call float @llvm.nvvm.div.full(float %692, float %730), !dbg !71
  %763 = tail call float @llvm.nvvm.div.full(float %694, float %731), !dbg !71
  %764 = tail call float @llvm.nvvm.div.full(float %696, float %732), !dbg !71
  %765 = tail call float @llvm.nvvm.div.full(float %698, float %733), !dbg !71
  %766 = tail call float @llvm.nvvm.div.full(float %700, float %734), !dbg !71
  %767 = tail call float @llvm.nvvm.div.full(float %702, float %735), !dbg !71
  %768 = tail call float @llvm.nvvm.div.full(float %704, float %736), !dbg !71
  %769 = insertelement <32 x float> poison, float %737, i64 0, !dbg !72
  %770 = insertelement <32 x float> %769, float %738, i64 1, !dbg !72
  %771 = insertelement <32 x float> %770, float %739, i64 2, !dbg !72
  %772 = insertelement <32 x float> %771, float %740, i64 3, !dbg !72
  %773 = insertelement <32 x float> %772, float %741, i64 4, !dbg !72
  %774 = insertelement <32 x float> %773, float %742, i64 5, !dbg !72
  %775 = insertelement <32 x float> %774, float %743, i64 6, !dbg !72
  %776 = insertelement <32 x float> %775, float %744, i64 7, !dbg !72
  %777 = insertelement <32 x float> %776, float %745, i64 8, !dbg !72
  %778 = insertelement <32 x float> %777, float %746, i64 9, !dbg !72
  %779 = insertelement <32 x float> %778, float %747, i64 10, !dbg !72
  %780 = insertelement <32 x float> %779, float %748, i64 11, !dbg !72
  %781 = insertelement <32 x float> %780, float %749, i64 12, !dbg !72
  %782 = insertelement <32 x float> %781, float %750, i64 13, !dbg !72
  %783 = insertelement <32 x float> %782, float %751, i64 14, !dbg !72
  %784 = insertelement <32 x float> %783, float %752, i64 15, !dbg !72
  %785 = insertelement <32 x float> %784, float %753, i64 16, !dbg !72
  %786 = insertelement <32 x float> %785, float %754, i64 17, !dbg !72
  %787 = insertelement <32 x float> %786, float %755, i64 18, !dbg !72
  %788 = insertelement <32 x float> %787, float %756, i64 19, !dbg !72
  %789 = insertelement <32 x float> %788, float %757, i64 20, !dbg !72
  %790 = insertelement <32 x float> %789, float %758, i64 21, !dbg !72
  %791 = insertelement <32 x float> %790, float %759, i64 22, !dbg !72
  %792 = insertelement <32 x float> %791, float %760, i64 23, !dbg !72
  %793 = insertelement <32 x float> %792, float %761, i64 24, !dbg !72
  %794 = insertelement <32 x float> %793, float %762, i64 25, !dbg !72
  %795 = insertelement <32 x float> %794, float %763, i64 26, !dbg !72
  %796 = insertelement <32 x float> %795, float %764, i64 27, !dbg !72
  %797 = insertelement <32 x float> %796, float %765, i64 28, !dbg !72
  %798 = insertelement <32 x float> %797, float %766, i64 29, !dbg !72
  %799 = insertelement <32 x float> %798, float %767, i64 30, !dbg !72
  %800 = insertelement <32 x float> %799, float %768, i64 31, !dbg !72
  %801 = fadd <32 x float> %230, %800, !dbg !72
  %802 = fsub <32 x float> %638, %801, !dbg !73
  %803 = fsub <32 x float> %638, %801, !dbg !73
  %804 = fsub <32 x float> %638, %801, !dbg !73
  %805 = fsub <32 x float> %638, %801, !dbg !73
  %806 = fsub <32 x float> %638, %801, !dbg !73
  %807 = fsub <32 x float> %638, %801, !dbg !73
  %808 = fsub <32 x float> %638, %801, !dbg !73
  %809 = fsub <32 x float> %638, %801, !dbg !73
  %810 = fsub <32 x float> %638, %801, !dbg !73
  %811 = fsub <32 x float> %638, %801, !dbg !73
  %812 = fsub <32 x float> %638, %801, !dbg !73
  %813 = fsub <32 x float> %638, %801, !dbg !73
  %814 = fsub <32 x float> %638, %801, !dbg !73
  %815 = fsub <32 x float> %638, %801, !dbg !73
  %816 = fsub <32 x float> %638, %801, !dbg !73
  %817 = fsub <32 x float> %638, %801, !dbg !73
  %818 = fsub <32 x float> %638, %801, !dbg !73
  %819 = fsub <32 x float> %638, %801, !dbg !73
  %820 = fsub <32 x float> %638, %801, !dbg !73
  %821 = fsub <32 x float> %638, %801, !dbg !73
  %822 = fsub <32 x float> %638, %801, !dbg !73
  %823 = fsub <32 x float> %638, %801, !dbg !73
  %824 = fsub <32 x float> %638, %801, !dbg !73
  %825 = fsub <32 x float> %638, %801, !dbg !73
  %826 = fsub <32 x float> %638, %801, !dbg !73
  %827 = fsub <32 x float> %638, %801, !dbg !73
  %828 = fsub <32 x float> %638, %801, !dbg !73
  %829 = fsub <32 x float> %638, %801, !dbg !73
  %830 = fsub <32 x float> %638, %801, !dbg !73
  %831 = fsub <32 x float> %638, %801, !dbg !73
  %832 = fsub <32 x float> %638, %801, !dbg !73
  %833 = fsub <32 x float> %638, %801, !dbg !73
  %834 = fmul <32 x float> %641, %802, !dbg !74
  %835 = extractelement <32 x float> %834, i64 0, !dbg !74
  %836 = fmul <32 x float> %643, %803, !dbg !74
  %837 = extractelement <32 x float> %836, i64 1, !dbg !74
  %838 = fmul <32 x float> %645, %804, !dbg !74
  %839 = extractelement <32 x float> %838, i64 2, !dbg !74
  %840 = fmul <32 x float> %647, %805, !dbg !74
  %841 = extractelement <32 x float> %840, i64 3, !dbg !74
  %842 = fmul <32 x float> %649, %806, !dbg !74
  %843 = extractelement <32 x float> %842, i64 4, !dbg !74
  %844 = fmul <32 x float> %651, %807, !dbg !74
  %845 = extractelement <32 x float> %844, i64 5, !dbg !74
  %846 = fmul <32 x float> %653, %808, !dbg !74
  %847 = extractelement <32 x float> %846, i64 6, !dbg !74
  %848 = fmul <32 x float> %655, %809, !dbg !74
  %849 = extractelement <32 x float> %848, i64 7, !dbg !74
  %850 = fmul <32 x float> %657, %810, !dbg !74
  %851 = extractelement <32 x float> %850, i64 8, !dbg !74
  %852 = fmul <32 x float> %659, %811, !dbg !74
  %853 = extractelement <32 x float> %852, i64 9, !dbg !74
  %854 = fmul <32 x float> %661, %812, !dbg !74
  %855 = extractelement <32 x float> %854, i64 10, !dbg !74
  %856 = fmul <32 x float> %663, %813, !dbg !74
  %857 = extractelement <32 x float> %856, i64 11, !dbg !74
  %858 = fmul <32 x float> %665, %814, !dbg !74
  %859 = extractelement <32 x float> %858, i64 12, !dbg !74
  %860 = fmul <32 x float> %667, %815, !dbg !74
  %861 = extractelement <32 x float> %860, i64 13, !dbg !74
  %862 = fmul <32 x float> %669, %816, !dbg !74
  %863 = extractelement <32 x float> %862, i64 14, !dbg !74
  %864 = fmul <32 x float> %671, %817, !dbg !74
  %865 = extractelement <32 x float> %864, i64 15, !dbg !74
  %866 = fmul <32 x float> %673, %818, !dbg !74
  %867 = extractelement <32 x float> %866, i64 16, !dbg !74
  %868 = fmul <32 x float> %675, %819, !dbg !74
  %869 = extractelement <32 x float> %868, i64 17, !dbg !74
  %870 = fmul <32 x float> %677, %820, !dbg !74
  %871 = extractelement <32 x float> %870, i64 18, !dbg !74
  %872 = fmul <32 x float> %679, %821, !dbg !74
  %873 = extractelement <32 x float> %872, i64 19, !dbg !74
  %874 = fmul <32 x float> %681, %822, !dbg !74
  %875 = extractelement <32 x float> %874, i64 20, !dbg !74
  %876 = fmul <32 x float> %683, %823, !dbg !74
  %877 = extractelement <32 x float> %876, i64 21, !dbg !74
  %878 = fmul <32 x float> %685, %824, !dbg !74
  %879 = extractelement <32 x float> %878, i64 22, !dbg !74
  %880 = fmul <32 x float> %687, %825, !dbg !74
  %881 = extractelement <32 x float> %880, i64 23, !dbg !74
  %882 = fmul <32 x float> %689, %826, !dbg !74
  %883 = extractelement <32 x float> %882, i64 24, !dbg !74
  %884 = fmul <32 x float> %691, %827, !dbg !74
  %885 = extractelement <32 x float> %884, i64 25, !dbg !74
  %886 = fmul <32 x float> %693, %828, !dbg !74
  %887 = extractelement <32 x float> %886, i64 26, !dbg !74
  %888 = fmul <32 x float> %695, %829, !dbg !74
  %889 = extractelement <32 x float> %888, i64 27, !dbg !74
  %890 = fmul <32 x float> %697, %830, !dbg !74
  %891 = extractelement <32 x float> %890, i64 28, !dbg !74
  %892 = fmul <32 x float> %699, %831, !dbg !74
  %893 = extractelement <32 x float> %892, i64 29, !dbg !74
  %894 = fmul <32 x float> %701, %832, !dbg !74
  %895 = extractelement <32 x float> %894, i64 30, !dbg !74
  %896 = fmul <32 x float> %703, %833, !dbg !74
  %897 = extractelement <32 x float> %896, i64 31, !dbg !74
  %898 = fadd float %198, %835, !dbg !75
  %899 = fadd float %199, %837, !dbg !75
  %900 = fadd float %200, %839, !dbg !75
  %901 = fadd float %201, %841, !dbg !75
  %902 = fadd float %202, %843, !dbg !75
  %903 = fadd float %203, %845, !dbg !75
  %904 = fadd float %204, %847, !dbg !75
  %905 = fadd float %205, %849, !dbg !75
  %906 = fadd float %206, %851, !dbg !75
  %907 = fadd float %207, %853, !dbg !75
  %908 = fadd float %208, %855, !dbg !75
  %909 = fadd float %209, %857, !dbg !75
  %910 = fadd float %210, %859, !dbg !75
  %911 = fadd float %211, %861, !dbg !75
  %912 = fadd float %212, %863, !dbg !75
  %913 = fadd float %213, %865, !dbg !75
  %914 = fadd float %214, %867, !dbg !75
  %915 = fadd float %215, %869, !dbg !75
  %916 = fadd float %216, %871, !dbg !75
  %917 = fadd float %217, %873, !dbg !75
  %918 = fadd float %218, %875, !dbg !75
  %919 = fadd float %219, %877, !dbg !75
  %920 = fadd float %220, %879, !dbg !75
  %921 = fadd float %221, %881, !dbg !75
  %922 = fadd float %222, %883, !dbg !75
  %923 = fadd float %223, %885, !dbg !75
  %924 = fadd float %224, %887, !dbg !75
  %925 = fadd float %225, %889, !dbg !75
  %926 = fadd float %226, %891, !dbg !75
  %927 = fadd float %227, %893, !dbg !75
  %928 = fadd float %228, %895, !dbg !75
  %929 = fadd float %229, %897, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %165, %640
  %930 = phi float [ %898, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %931 = phi float [ %899, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %932 = phi float [ %900, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %933 = phi float [ %901, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %934 = phi float [ %902, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %935 = phi float [ %903, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %936 = phi float [ %904, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %937 = phi float [ %905, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %938 = phi float [ %906, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %939 = phi float [ %907, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %940 = phi float [ %908, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %941 = phi float [ %909, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %942 = phi float [ %910, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %943 = phi float [ %911, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %944 = phi float [ %912, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %945 = phi float [ %913, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %946 = phi float [ %914, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %947 = phi float [ %915, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %948 = phi float [ %916, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %949 = phi float [ %917, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %950 = phi float [ %918, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %951 = phi float [ %919, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %952 = phi float [ %920, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %953 = phi float [ %921, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %954 = phi float [ %922, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %955 = phi float [ %923, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %956 = phi float [ %924, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %957 = phi float [ %925, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %958 = phi float [ %926, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %959 = phi float [ %927, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %960 = phi float [ %928, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %961 = phi float [ %929, %640 ], [ 0.000000e+00, %165 ], !dbg !68
  %962 = phi float [ %705, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %963 = phi float [ %706, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %964 = phi float [ %707, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %965 = phi float [ %708, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %966 = phi float [ %709, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %967 = phi float [ %710, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %968 = phi float [ %711, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %969 = phi float [ %712, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %970 = phi float [ %713, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %971 = phi float [ %714, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %972 = phi float [ %715, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %973 = phi float [ %716, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %974 = phi float [ %717, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %975 = phi float [ %718, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %976 = phi float [ %719, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %977 = phi float [ %720, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %978 = phi float [ %721, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %979 = phi float [ %722, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %980 = phi float [ %723, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %981 = phi float [ %724, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %982 = phi float [ %725, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %983 = phi float [ %726, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %984 = phi float [ %727, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %985 = phi float [ %728, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %986 = phi float [ %729, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %987 = phi float [ %730, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %988 = phi float [ %731, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %989 = phi float [ %732, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %990 = phi float [ %733, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %991 = phi float [ %734, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %992 = phi float [ %735, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %993 = phi float [ %736, %640 ], [ 1.000000e+00, %165 ], !dbg !68
  %994 = phi <32 x float> [ %801, %640 ], [ %638, %165 ]
  %995 = select <32 x i1> %164, <32 x float> %994, <32 x float> %230, !dbg !39
  %996 = select i1 %28, float %930, float %198, !dbg !76
  %997 = select i1 %28, float %931, float %199, !dbg !76
  %998 = select i1 %28, float %932, float %200, !dbg !76
  %999 = select i1 %28, float %933, float %201, !dbg !76
  %1000 = select i1 %28, float %934, float %202, !dbg !76
  %1001 = select i1 %28, float %935, float %203, !dbg !76
  %1002 = select i1 %28, float %936, float %204, !dbg !76
  %1003 = select i1 %28, float %937, float %205, !dbg !76
  %1004 = select i1 %28, float %938, float %206, !dbg !76
  %1005 = select i1 %28, float %939, float %207, !dbg !76
  %1006 = select i1 %28, float %940, float %208, !dbg !76
  %1007 = select i1 %28, float %941, float %209, !dbg !76
  %1008 = select i1 %28, float %942, float %210, !dbg !76
  %1009 = select i1 %28, float %943, float %211, !dbg !76
  %1010 = select i1 %28, float %944, float %212, !dbg !76
  %1011 = select i1 %28, float %945, float %213, !dbg !76
  %1012 = select i1 %27, float %946, float %214, !dbg !76
  %1013 = select i1 %27, float %947, float %215, !dbg !76
  %1014 = select i1 %27, float %948, float %216, !dbg !76
  %1015 = select i1 %27, float %949, float %217, !dbg !76
  %1016 = select i1 %27, float %950, float %218, !dbg !76
  %1017 = select i1 %27, float %951, float %219, !dbg !76
  %1018 = select i1 %27, float %952, float %220, !dbg !76
  %1019 = select i1 %27, float %953, float %221, !dbg !76
  %1020 = select i1 %27, float %954, float %222, !dbg !76
  %1021 = select i1 %27, float %955, float %223, !dbg !76
  %1022 = select i1 %27, float %956, float %224, !dbg !76
  %1023 = select i1 %27, float %957, float %225, !dbg !76
  %1024 = select i1 %27, float %958, float %226, !dbg !76
  %1025 = select i1 %27, float %959, float %227, !dbg !76
  %1026 = select i1 %27, float %960, float %228, !dbg !76
  %1027 = select i1 %27, float %961, float %229, !dbg !76
  %1028 = select i1 %28, float %962, float %166, !dbg !77
  %1029 = select i1 %28, float %963, float %167, !dbg !77
  %1030 = select i1 %28, float %964, float %168, !dbg !77
  %1031 = select i1 %28, float %965, float %169, !dbg !77
  %1032 = select i1 %28, float %966, float %170, !dbg !77
  %1033 = select i1 %28, float %967, float %171, !dbg !77
  %1034 = select i1 %28, float %968, float %172, !dbg !77
  %1035 = select i1 %28, float %969, float %173, !dbg !77
  %1036 = select i1 %28, float %970, float %174, !dbg !77
  %1037 = select i1 %28, float %971, float %175, !dbg !77
  %1038 = select i1 %28, float %972, float %176, !dbg !77
  %1039 = select i1 %28, float %973, float %177, !dbg !77
  %1040 = select i1 %28, float %974, float %178, !dbg !77
  %1041 = select i1 %28, float %975, float %179, !dbg !77
  %1042 = select i1 %28, float %976, float %180, !dbg !77
  %1043 = select i1 %28, float %977, float %181, !dbg !77
  %1044 = select i1 %27, float %978, float %182, !dbg !77
  %1045 = select i1 %27, float %979, float %183, !dbg !77
  %1046 = select i1 %27, float %980, float %184, !dbg !77
  %1047 = select i1 %27, float %981, float %185, !dbg !77
  %1048 = select i1 %27, float %982, float %186, !dbg !77
  %1049 = select i1 %27, float %983, float %187, !dbg !77
  %1050 = select i1 %27, float %984, float %188, !dbg !77
  %1051 = select i1 %27, float %985, float %189, !dbg !77
  %1052 = select i1 %27, float %986, float %190, !dbg !77
  %1053 = select i1 %27, float %987, float %191, !dbg !77
  %1054 = select i1 %27, float %988, float %192, !dbg !77
  %1055 = select i1 %27, float %989, float %193, !dbg !77
  %1056 = select i1 %27, float %990, float %194, !dbg !77
  %1057 = select i1 %27, float %991, float %195, !dbg !77
  %1058 = select i1 %27, float %992, float %196, !dbg !77
  %1059 = select i1 %27, float %993, float %197, !dbg !77
  %1060 = sext i32 %252 to i64, !dbg !78
  %1061 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1060, !dbg !78
  %1062 = sext i32 %254 to i64, !dbg !78
  %1063 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1062, !dbg !78
  %1064 = sext i32 %255 to i64, !dbg !78
  %1065 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1064, !dbg !78
  %1066 = sext i32 %256 to i64, !dbg !78
  %1067 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1066, !dbg !78
  %1068 = extractelement <32 x float> %638, i64 0, !dbg !79
  %1069 = fptrunc float %1068 to bfloat, !dbg !79
  %1070 = extractelement <32 x float> %638, i64 1, !dbg !79
  %1071 = fptrunc float %1070 to bfloat, !dbg !79
  %1072 = extractelement <32 x float> %638, i64 2, !dbg !79
  %1073 = fptrunc float %1072 to bfloat, !dbg !79
  %1074 = extractelement <32 x float> %638, i64 3, !dbg !79
  %1075 = fptrunc float %1074 to bfloat, !dbg !79
  %1076 = extractelement <32 x float> %638, i64 4, !dbg !79
  %1077 = fptrunc float %1076 to bfloat, !dbg !79
  %1078 = extractelement <32 x float> %638, i64 5, !dbg !79
  %1079 = fptrunc float %1078 to bfloat, !dbg !79
  %1080 = extractelement <32 x float> %638, i64 6, !dbg !79
  %1081 = fptrunc float %1080 to bfloat, !dbg !79
  %1082 = extractelement <32 x float> %638, i64 7, !dbg !79
  %1083 = fptrunc float %1082 to bfloat, !dbg !79
  %1084 = extractelement <32 x float> %638, i64 8, !dbg !79
  %1085 = fptrunc float %1084 to bfloat, !dbg !79
  %1086 = extractelement <32 x float> %638, i64 9, !dbg !79
  %1087 = fptrunc float %1086 to bfloat, !dbg !79
  %1088 = extractelement <32 x float> %638, i64 10, !dbg !79
  %1089 = fptrunc float %1088 to bfloat, !dbg !79
  %1090 = extractelement <32 x float> %638, i64 11, !dbg !79
  %1091 = fptrunc float %1090 to bfloat, !dbg !79
  %1092 = extractelement <32 x float> %638, i64 12, !dbg !79
  %1093 = fptrunc float %1092 to bfloat, !dbg !79
  %1094 = extractelement <32 x float> %638, i64 13, !dbg !79
  %1095 = fptrunc float %1094 to bfloat, !dbg !79
  %1096 = extractelement <32 x float> %638, i64 14, !dbg !79
  %1097 = fptrunc float %1096 to bfloat, !dbg !79
  %1098 = extractelement <32 x float> %638, i64 15, !dbg !79
  %1099 = fptrunc float %1098 to bfloat, !dbg !79
  %1100 = extractelement <32 x float> %638, i64 16, !dbg !79
  %1101 = fptrunc float %1100 to bfloat, !dbg !79
  %1102 = extractelement <32 x float> %638, i64 17, !dbg !79
  %1103 = fptrunc float %1102 to bfloat, !dbg !79
  %1104 = extractelement <32 x float> %638, i64 18, !dbg !79
  %1105 = fptrunc float %1104 to bfloat, !dbg !79
  %1106 = extractelement <32 x float> %638, i64 19, !dbg !79
  %1107 = fptrunc float %1106 to bfloat, !dbg !79
  %1108 = extractelement <32 x float> %638, i64 20, !dbg !79
  %1109 = fptrunc float %1108 to bfloat, !dbg !79
  %1110 = extractelement <32 x float> %638, i64 21, !dbg !79
  %1111 = fptrunc float %1110 to bfloat, !dbg !79
  %1112 = extractelement <32 x float> %638, i64 22, !dbg !79
  %1113 = fptrunc float %1112 to bfloat, !dbg !79
  %1114 = extractelement <32 x float> %638, i64 23, !dbg !79
  %1115 = fptrunc float %1114 to bfloat, !dbg !79
  %1116 = extractelement <32 x float> %638, i64 24, !dbg !79
  %1117 = fptrunc float %1116 to bfloat, !dbg !79
  %1118 = extractelement <32 x float> %638, i64 25, !dbg !79
  %1119 = fptrunc float %1118 to bfloat, !dbg !79
  %1120 = extractelement <32 x float> %638, i64 26, !dbg !79
  %1121 = fptrunc float %1120 to bfloat, !dbg !79
  %1122 = extractelement <32 x float> %638, i64 27, !dbg !79
  %1123 = fptrunc float %1122 to bfloat, !dbg !79
  %1124 = extractelement <32 x float> %638, i64 28, !dbg !79
  %1125 = fptrunc float %1124 to bfloat, !dbg !79
  %1126 = extractelement <32 x float> %638, i64 29, !dbg !79
  %1127 = fptrunc float %1126 to bfloat, !dbg !79
  %1128 = extractelement <32 x float> %638, i64 30, !dbg !79
  %1129 = fptrunc float %1128 to bfloat, !dbg !79
  %1130 = extractelement <32 x float> %638, i64 31, !dbg !79
  %1131 = fptrunc float %1130 to bfloat, !dbg !79
  %1132 = insertelement <2 x bfloat> poison, bfloat %1069, i64 0, !dbg !79
  %1133 = insertelement <2 x bfloat> %1132, bfloat %1071, i64 1, !dbg !79
  %1134 = bitcast <2 x bfloat> %1133 to i32, !dbg !79
  %1135 = insertelement <2 x bfloat> poison, bfloat %1073, i64 0, !dbg !79
  %1136 = insertelement <2 x bfloat> %1135, bfloat %1075, i64 1, !dbg !79
  %1137 = bitcast <2 x bfloat> %1136 to i32, !dbg !79
  %1138 = insertelement <2 x bfloat> poison, bfloat %1077, i64 0, !dbg !79
  %1139 = insertelement <2 x bfloat> %1138, bfloat %1079, i64 1, !dbg !79
  %1140 = bitcast <2 x bfloat> %1139 to i32, !dbg !79
  %1141 = insertelement <2 x bfloat> poison, bfloat %1081, i64 0, !dbg !79
  %1142 = insertelement <2 x bfloat> %1141, bfloat %1083, i64 1, !dbg !79
  %1143 = bitcast <2 x bfloat> %1142 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1134, i32 %1137, i32 %1140, i32 %1143, ptr addrspace(1) %1061, i1 %28) #5, !dbg !79
  %1144 = insertelement <2 x bfloat> poison, bfloat %1085, i64 0, !dbg !79
  %1145 = insertelement <2 x bfloat> %1144, bfloat %1087, i64 1, !dbg !79
  %1146 = bitcast <2 x bfloat> %1145 to i32, !dbg !79
  %1147 = insertelement <2 x bfloat> poison, bfloat %1089, i64 0, !dbg !79
  %1148 = insertelement <2 x bfloat> %1147, bfloat %1091, i64 1, !dbg !79
  %1149 = bitcast <2 x bfloat> %1148 to i32, !dbg !79
  %1150 = insertelement <2 x bfloat> poison, bfloat %1093, i64 0, !dbg !79
  %1151 = insertelement <2 x bfloat> %1150, bfloat %1095, i64 1, !dbg !79
  %1152 = bitcast <2 x bfloat> %1151 to i32, !dbg !79
  %1153 = insertelement <2 x bfloat> poison, bfloat %1097, i64 0, !dbg !79
  %1154 = insertelement <2 x bfloat> %1153, bfloat %1099, i64 1, !dbg !79
  %1155 = bitcast <2 x bfloat> %1154 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1146, i32 %1149, i32 %1152, i32 %1155, ptr addrspace(1) %1063, i1 %28) #5, !dbg !79
  %1156 = insertelement <2 x bfloat> poison, bfloat %1101, i64 0, !dbg !79
  %1157 = insertelement <2 x bfloat> %1156, bfloat %1103, i64 1, !dbg !79
  %1158 = bitcast <2 x bfloat> %1157 to i32, !dbg !79
  %1159 = insertelement <2 x bfloat> poison, bfloat %1105, i64 0, !dbg !79
  %1160 = insertelement <2 x bfloat> %1159, bfloat %1107, i64 1, !dbg !79
  %1161 = bitcast <2 x bfloat> %1160 to i32, !dbg !79
  %1162 = insertelement <2 x bfloat> poison, bfloat %1109, i64 0, !dbg !79
  %1163 = insertelement <2 x bfloat> %1162, bfloat %1111, i64 1, !dbg !79
  %1164 = bitcast <2 x bfloat> %1163 to i32, !dbg !79
  %1165 = insertelement <2 x bfloat> poison, bfloat %1113, i64 0, !dbg !79
  %1166 = insertelement <2 x bfloat> %1165, bfloat %1115, i64 1, !dbg !79
  %1167 = bitcast <2 x bfloat> %1166 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1158, i32 %1161, i32 %1164, i32 %1167, ptr addrspace(1) %1065, i1 %27) #5, !dbg !79
  %1168 = insertelement <2 x bfloat> poison, bfloat %1117, i64 0, !dbg !79
  %1169 = insertelement <2 x bfloat> %1168, bfloat %1119, i64 1, !dbg !79
  %1170 = bitcast <2 x bfloat> %1169 to i32, !dbg !79
  %1171 = insertelement <2 x bfloat> poison, bfloat %1121, i64 0, !dbg !79
  %1172 = insertelement <2 x bfloat> %1171, bfloat %1123, i64 1, !dbg !79
  %1173 = bitcast <2 x bfloat> %1172 to i32, !dbg !79
  %1174 = insertelement <2 x bfloat> poison, bfloat %1125, i64 0, !dbg !79
  %1175 = insertelement <2 x bfloat> %1174, bfloat %1127, i64 1, !dbg !79
  %1176 = bitcast <2 x bfloat> %1175 to i32, !dbg !79
  %1177 = insertelement <2 x bfloat> poison, bfloat %1129, i64 0, !dbg !79
  %1178 = insertelement <2 x bfloat> %1177, bfloat %1131, i64 1, !dbg !79
  %1179 = bitcast <2 x bfloat> %1178 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1170, i32 %1173, i32 %1176, i32 %1179, ptr addrspace(1) %1067, i1 %27) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %1180 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %1180, label %165, label %1181, !dbg !38

1181:                                             ; preds = %._crit_edge
  %1182 = and i32 %19, 31, !dbg !11
  %1183 = lshr i32 %19, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1184 = extractelement <32 x float> %995, i64 0, !dbg !82
  %1185 = extractelement <32 x float> %995, i64 1, !dbg !82
  %1186 = fsub float %1185, %1184, !dbg !82
  %1187 = fadd float %1028, %1029, !dbg !84
  %1188 = fcmp oeq float %1187, 0.000000e+00, !dbg !85
  %1189 = tail call float @llvm.nvvm.div.full(float %1029, float %1187), !dbg !86
  %1190 = select i1 %1188, float 0.000000e+00, float %1189, !dbg !87
  %1191 = fmul float %1186, %1190, !dbg !88
  %1192 = fadd float %1184, %1191, !dbg !89
  %1193 = fadd float %996, %997, !dbg !90
  %1194 = fmul float %1186, %1186, !dbg !91
  %1195 = fmul float %1194, %1028, !dbg !92
  %1196 = fmul float %1195, %1190, !dbg !93
  %1197 = fadd float %1193, %1196, !dbg !94
  %1198 = extractelement <32 x float> %995, i64 2, !dbg !82
  %1199 = fsub float %1198, %1192, !dbg !82
  %1200 = fadd float %1030, %1187, !dbg !84
  %1201 = fcmp oeq float %1200, 0.000000e+00, !dbg !85
  %1202 = tail call float @llvm.nvvm.div.full(float %1030, float %1200), !dbg !86
  %1203 = select i1 %1201, float 0.000000e+00, float %1202, !dbg !87
  %1204 = fmul float %1203, %1199, !dbg !88
  %1205 = fadd float %1192, %1204, !dbg !89
  %1206 = fadd float %998, %1197, !dbg !90
  %1207 = fmul float %1199, %1199, !dbg !91
  %1208 = fmul float %1187, %1207, !dbg !92
  %1209 = fmul float %1203, %1208, !dbg !93
  %1210 = fadd float %1206, %1209, !dbg !94
  %1211 = extractelement <32 x float> %995, i64 3, !dbg !82
  %1212 = fsub float %1211, %1205, !dbg !82
  %1213 = fadd float %1031, %1200, !dbg !84
  %1214 = fcmp oeq float %1213, 0.000000e+00, !dbg !85
  %1215 = tail call float @llvm.nvvm.div.full(float %1031, float %1213), !dbg !86
  %1216 = select i1 %1214, float 0.000000e+00, float %1215, !dbg !87
  %1217 = fmul float %1216, %1212, !dbg !88
  %1218 = fadd float %1205, %1217, !dbg !89
  %1219 = fadd float %999, %1210, !dbg !90
  %1220 = fmul float %1212, %1212, !dbg !91
  %1221 = fmul float %1200, %1220, !dbg !92
  %1222 = fmul float %1216, %1221, !dbg !93
  %1223 = fadd float %1219, %1222, !dbg !94
  %1224 = extractelement <32 x float> %995, i64 4, !dbg !82
  %1225 = fsub float %1224, %1218, !dbg !82
  %1226 = fadd float %1032, %1213, !dbg !84
  %1227 = fcmp oeq float %1226, 0.000000e+00, !dbg !85
  %1228 = tail call float @llvm.nvvm.div.full(float %1032, float %1226), !dbg !86
  %1229 = select i1 %1227, float 0.000000e+00, float %1228, !dbg !87
  %1230 = fmul float %1229, %1225, !dbg !88
  %1231 = fadd float %1218, %1230, !dbg !89
  %1232 = fadd float %1000, %1223, !dbg !90
  %1233 = fmul float %1225, %1225, !dbg !91
  %1234 = fmul float %1213, %1233, !dbg !92
  %1235 = fmul float %1229, %1234, !dbg !93
  %1236 = fadd float %1232, %1235, !dbg !94
  %1237 = extractelement <32 x float> %995, i64 5, !dbg !82
  %1238 = fsub float %1237, %1231, !dbg !82
  %1239 = fadd float %1033, %1226, !dbg !84
  %1240 = fcmp oeq float %1239, 0.000000e+00, !dbg !85
  %1241 = tail call float @llvm.nvvm.div.full(float %1033, float %1239), !dbg !86
  %1242 = select i1 %1240, float 0.000000e+00, float %1241, !dbg !87
  %1243 = fmul float %1242, %1238, !dbg !88
  %1244 = fadd float %1231, %1243, !dbg !89
  %1245 = fadd float %1001, %1236, !dbg !90
  %1246 = fmul float %1238, %1238, !dbg !91
  %1247 = fmul float %1226, %1246, !dbg !92
  %1248 = fmul float %1242, %1247, !dbg !93
  %1249 = fadd float %1245, %1248, !dbg !94
  %1250 = extractelement <32 x float> %995, i64 6, !dbg !82
  %1251 = fsub float %1250, %1244, !dbg !82
  %1252 = fadd float %1034, %1239, !dbg !84
  %1253 = fcmp oeq float %1252, 0.000000e+00, !dbg !85
  %1254 = tail call float @llvm.nvvm.div.full(float %1034, float %1252), !dbg !86
  %1255 = select i1 %1253, float 0.000000e+00, float %1254, !dbg !87
  %1256 = fmul float %1255, %1251, !dbg !88
  %1257 = fadd float %1244, %1256, !dbg !89
  %1258 = fadd float %1002, %1249, !dbg !90
  %1259 = fmul float %1251, %1251, !dbg !91
  %1260 = fmul float %1239, %1259, !dbg !92
  %1261 = fmul float %1255, %1260, !dbg !93
  %1262 = fadd float %1258, %1261, !dbg !94
  %1263 = extractelement <32 x float> %995, i64 7, !dbg !82
  %1264 = fsub float %1263, %1257, !dbg !82
  %1265 = fadd float %1035, %1252, !dbg !84
  %1266 = fcmp oeq float %1265, 0.000000e+00, !dbg !85
  %1267 = tail call float @llvm.nvvm.div.full(float %1035, float %1265), !dbg !86
  %1268 = select i1 %1266, float 0.000000e+00, float %1267, !dbg !87
  %1269 = fmul float %1268, %1264, !dbg !88
  %1270 = fadd float %1257, %1269, !dbg !89
  %1271 = fadd float %1003, %1262, !dbg !90
  %1272 = fmul float %1264, %1264, !dbg !91
  %1273 = fmul float %1252, %1272, !dbg !92
  %1274 = fmul float %1268, %1273, !dbg !93
  %1275 = fadd float %1271, %1274, !dbg !94
  %1276 = extractelement <32 x float> %995, i64 8, !dbg !82
  %1277 = fsub float %1276, %1270, !dbg !82
  %1278 = fadd float %1036, %1265, !dbg !84
  %1279 = fcmp oeq float %1278, 0.000000e+00, !dbg !85
  %1280 = tail call float @llvm.nvvm.div.full(float %1036, float %1278), !dbg !86
  %1281 = select i1 %1279, float 0.000000e+00, float %1280, !dbg !87
  %1282 = fmul float %1281, %1277, !dbg !88
  %1283 = fadd float %1270, %1282, !dbg !89
  %1284 = fadd float %1004, %1275, !dbg !90
  %1285 = fmul float %1277, %1277, !dbg !91
  %1286 = fmul float %1265, %1285, !dbg !92
  %1287 = fmul float %1281, %1286, !dbg !93
  %1288 = fadd float %1284, %1287, !dbg !94
  %1289 = extractelement <32 x float> %995, i64 9, !dbg !82
  %1290 = fsub float %1289, %1283, !dbg !82
  %1291 = fadd float %1037, %1278, !dbg !84
  %1292 = fcmp oeq float %1291, 0.000000e+00, !dbg !85
  %1293 = tail call float @llvm.nvvm.div.full(float %1037, float %1291), !dbg !86
  %1294 = select i1 %1292, float 0.000000e+00, float %1293, !dbg !87
  %1295 = fmul float %1294, %1290, !dbg !88
  %1296 = fadd float %1283, %1295, !dbg !89
  %1297 = fadd float %1005, %1288, !dbg !90
  %1298 = fmul float %1290, %1290, !dbg !91
  %1299 = fmul float %1278, %1298, !dbg !92
  %1300 = fmul float %1294, %1299, !dbg !93
  %1301 = fadd float %1297, %1300, !dbg !94
  %1302 = extractelement <32 x float> %995, i64 10, !dbg !82
  %1303 = fsub float %1302, %1296, !dbg !82
  %1304 = fadd float %1038, %1291, !dbg !84
  %1305 = fcmp oeq float %1304, 0.000000e+00, !dbg !85
  %1306 = tail call float @llvm.nvvm.div.full(float %1038, float %1304), !dbg !86
  %1307 = select i1 %1305, float 0.000000e+00, float %1306, !dbg !87
  %1308 = fmul float %1307, %1303, !dbg !88
  %1309 = fadd float %1296, %1308, !dbg !89
  %1310 = fadd float %1006, %1301, !dbg !90
  %1311 = fmul float %1303, %1303, !dbg !91
  %1312 = fmul float %1291, %1311, !dbg !92
  %1313 = fmul float %1307, %1312, !dbg !93
  %1314 = fadd float %1310, %1313, !dbg !94
  %1315 = extractelement <32 x float> %995, i64 11, !dbg !82
  %1316 = fsub float %1315, %1309, !dbg !82
  %1317 = fadd float %1039, %1304, !dbg !84
  %1318 = fcmp oeq float %1317, 0.000000e+00, !dbg !85
  %1319 = tail call float @llvm.nvvm.div.full(float %1039, float %1317), !dbg !86
  %1320 = select i1 %1318, float 0.000000e+00, float %1319, !dbg !87
  %1321 = fmul float %1320, %1316, !dbg !88
  %1322 = fadd float %1309, %1321, !dbg !89
  %1323 = fadd float %1007, %1314, !dbg !90
  %1324 = fmul float %1316, %1316, !dbg !91
  %1325 = fmul float %1304, %1324, !dbg !92
  %1326 = fmul float %1320, %1325, !dbg !93
  %1327 = fadd float %1323, %1326, !dbg !94
  %1328 = extractelement <32 x float> %995, i64 12, !dbg !82
  %1329 = fsub float %1328, %1322, !dbg !82
  %1330 = fadd float %1040, %1317, !dbg !84
  %1331 = fcmp oeq float %1330, 0.000000e+00, !dbg !85
  %1332 = tail call float @llvm.nvvm.div.full(float %1040, float %1330), !dbg !86
  %1333 = select i1 %1331, float 0.000000e+00, float %1332, !dbg !87
  %1334 = fmul float %1333, %1329, !dbg !88
  %1335 = fadd float %1322, %1334, !dbg !89
  %1336 = fadd float %1008, %1327, !dbg !90
  %1337 = fmul float %1329, %1329, !dbg !91
  %1338 = fmul float %1317, %1337, !dbg !92
  %1339 = fmul float %1333, %1338, !dbg !93
  %1340 = fadd float %1336, %1339, !dbg !94
  %1341 = extractelement <32 x float> %995, i64 13, !dbg !82
  %1342 = fsub float %1341, %1335, !dbg !82
  %1343 = fadd float %1041, %1330, !dbg !84
  %1344 = fcmp oeq float %1343, 0.000000e+00, !dbg !85
  %1345 = tail call float @llvm.nvvm.div.full(float %1041, float %1343), !dbg !86
  %1346 = select i1 %1344, float 0.000000e+00, float %1345, !dbg !87
  %1347 = fmul float %1346, %1342, !dbg !88
  %1348 = fadd float %1335, %1347, !dbg !89
  %1349 = fadd float %1009, %1340, !dbg !90
  %1350 = fmul float %1342, %1342, !dbg !91
  %1351 = fmul float %1330, %1350, !dbg !92
  %1352 = fmul float %1346, %1351, !dbg !93
  %1353 = fadd float %1349, %1352, !dbg !94
  %1354 = extractelement <32 x float> %995, i64 14, !dbg !82
  %1355 = fsub float %1354, %1348, !dbg !82
  %1356 = fadd float %1042, %1343, !dbg !84
  %1357 = fcmp oeq float %1356, 0.000000e+00, !dbg !85
  %1358 = tail call float @llvm.nvvm.div.full(float %1042, float %1356), !dbg !86
  %1359 = select i1 %1357, float 0.000000e+00, float %1358, !dbg !87
  %1360 = fmul float %1359, %1355, !dbg !88
  %1361 = fadd float %1348, %1360, !dbg !89
  %1362 = fadd float %1010, %1353, !dbg !90
  %1363 = fmul float %1355, %1355, !dbg !91
  %1364 = fmul float %1343, %1363, !dbg !92
  %1365 = fmul float %1359, %1364, !dbg !93
  %1366 = fadd float %1362, %1365, !dbg !94
  %1367 = extractelement <32 x float> %995, i64 15, !dbg !82
  %1368 = fsub float %1367, %1361, !dbg !82
  %1369 = fadd float %1043, %1356, !dbg !84
  %1370 = fcmp oeq float %1369, 0.000000e+00, !dbg !85
  %1371 = tail call float @llvm.nvvm.div.full(float %1043, float %1369), !dbg !86
  %1372 = select i1 %1370, float 0.000000e+00, float %1371, !dbg !87
  %1373 = fmul float %1372, %1368, !dbg !88
  %1374 = fadd float %1361, %1373, !dbg !89
  %1375 = fadd float %1011, %1366, !dbg !90
  %1376 = fmul float %1368, %1368, !dbg !91
  %1377 = fmul float %1356, %1376, !dbg !92
  %1378 = fmul float %1372, %1377, !dbg !93
  %1379 = fadd float %1375, %1378, !dbg !94
  %1380 = extractelement <32 x float> %995, i64 16, !dbg !82
  %1381 = extractelement <32 x float> %995, i64 17, !dbg !82
  %1382 = fsub float %1381, %1380, !dbg !82
  %1383 = fadd float %1044, %1045, !dbg !84
  %1384 = fcmp oeq float %1383, 0.000000e+00, !dbg !85
  %1385 = tail call float @llvm.nvvm.div.full(float %1045, float %1383), !dbg !86
  %1386 = select i1 %1384, float 0.000000e+00, float %1385, !dbg !87
  %1387 = fmul float %1382, %1386, !dbg !88
  %1388 = fadd float %1380, %1387, !dbg !89
  %1389 = fadd float %1012, %1013, !dbg !90
  %1390 = fmul float %1382, %1382, !dbg !91
  %1391 = fmul float %1390, %1044, !dbg !92
  %1392 = fmul float %1391, %1386, !dbg !93
  %1393 = fadd float %1389, %1392, !dbg !94
  %1394 = extractelement <32 x float> %995, i64 18, !dbg !82
  %1395 = fsub float %1394, %1388, !dbg !82
  %1396 = fadd float %1046, %1383, !dbg !84
  %1397 = fcmp oeq float %1396, 0.000000e+00, !dbg !85
  %1398 = tail call float @llvm.nvvm.div.full(float %1046, float %1396), !dbg !86
  %1399 = select i1 %1397, float 0.000000e+00, float %1398, !dbg !87
  %1400 = fmul float %1399, %1395, !dbg !88
  %1401 = fadd float %1388, %1400, !dbg !89
  %1402 = fadd float %1014, %1393, !dbg !90
  %1403 = fmul float %1395, %1395, !dbg !91
  %1404 = fmul float %1383, %1403, !dbg !92
  %1405 = fmul float %1399, %1404, !dbg !93
  %1406 = fadd float %1402, %1405, !dbg !94
  %1407 = extractelement <32 x float> %995, i64 19, !dbg !82
  %1408 = fsub float %1407, %1401, !dbg !82
  %1409 = fadd float %1047, %1396, !dbg !84
  %1410 = fcmp oeq float %1409, 0.000000e+00, !dbg !85
  %1411 = tail call float @llvm.nvvm.div.full(float %1047, float %1409), !dbg !86
  %1412 = select i1 %1410, float 0.000000e+00, float %1411, !dbg !87
  %1413 = fmul float %1412, %1408, !dbg !88
  %1414 = fadd float %1401, %1413, !dbg !89
  %1415 = fadd float %1015, %1406, !dbg !90
  %1416 = fmul float %1408, %1408, !dbg !91
  %1417 = fmul float %1396, %1416, !dbg !92
  %1418 = fmul float %1412, %1417, !dbg !93
  %1419 = fadd float %1415, %1418, !dbg !94
  %1420 = extractelement <32 x float> %995, i64 20, !dbg !82
  %1421 = fsub float %1420, %1414, !dbg !82
  %1422 = fadd float %1048, %1409, !dbg !84
  %1423 = fcmp oeq float %1422, 0.000000e+00, !dbg !85
  %1424 = tail call float @llvm.nvvm.div.full(float %1048, float %1422), !dbg !86
  %1425 = select i1 %1423, float 0.000000e+00, float %1424, !dbg !87
  %1426 = fmul float %1425, %1421, !dbg !88
  %1427 = fadd float %1414, %1426, !dbg !89
  %1428 = fadd float %1016, %1419, !dbg !90
  %1429 = fmul float %1421, %1421, !dbg !91
  %1430 = fmul float %1409, %1429, !dbg !92
  %1431 = fmul float %1425, %1430, !dbg !93
  %1432 = fadd float %1428, %1431, !dbg !94
  %1433 = extractelement <32 x float> %995, i64 21, !dbg !82
  %1434 = fsub float %1433, %1427, !dbg !82
  %1435 = fadd float %1049, %1422, !dbg !84
  %1436 = fcmp oeq float %1435, 0.000000e+00, !dbg !85
  %1437 = tail call float @llvm.nvvm.div.full(float %1049, float %1435), !dbg !86
  %1438 = select i1 %1436, float 0.000000e+00, float %1437, !dbg !87
  %1439 = fmul float %1438, %1434, !dbg !88
  %1440 = fadd float %1427, %1439, !dbg !89
  %1441 = fadd float %1017, %1432, !dbg !90
  %1442 = fmul float %1434, %1434, !dbg !91
  %1443 = fmul float %1422, %1442, !dbg !92
  %1444 = fmul float %1438, %1443, !dbg !93
  %1445 = fadd float %1441, %1444, !dbg !94
  %1446 = extractelement <32 x float> %995, i64 22, !dbg !82
  %1447 = fsub float %1446, %1440, !dbg !82
  %1448 = fadd float %1050, %1435, !dbg !84
  %1449 = fcmp oeq float %1448, 0.000000e+00, !dbg !85
  %1450 = tail call float @llvm.nvvm.div.full(float %1050, float %1448), !dbg !86
  %1451 = select i1 %1449, float 0.000000e+00, float %1450, !dbg !87
  %1452 = fmul float %1451, %1447, !dbg !88
  %1453 = fadd float %1440, %1452, !dbg !89
  %1454 = fadd float %1018, %1445, !dbg !90
  %1455 = fmul float %1447, %1447, !dbg !91
  %1456 = fmul float %1435, %1455, !dbg !92
  %1457 = fmul float %1451, %1456, !dbg !93
  %1458 = fadd float %1454, %1457, !dbg !94
  %1459 = extractelement <32 x float> %995, i64 23, !dbg !82
  %1460 = fsub float %1459, %1453, !dbg !82
  %1461 = fadd float %1051, %1448, !dbg !84
  %1462 = fcmp oeq float %1461, 0.000000e+00, !dbg !85
  %1463 = tail call float @llvm.nvvm.div.full(float %1051, float %1461), !dbg !86
  %1464 = select i1 %1462, float 0.000000e+00, float %1463, !dbg !87
  %1465 = fmul float %1464, %1460, !dbg !88
  %1466 = fadd float %1453, %1465, !dbg !89
  %1467 = fadd float %1019, %1458, !dbg !90
  %1468 = fmul float %1460, %1460, !dbg !91
  %1469 = fmul float %1448, %1468, !dbg !92
  %1470 = fmul float %1464, %1469, !dbg !93
  %1471 = fadd float %1467, %1470, !dbg !94
  %1472 = extractelement <32 x float> %995, i64 24, !dbg !82
  %1473 = fsub float %1472, %1466, !dbg !82
  %1474 = fadd float %1052, %1461, !dbg !84
  %1475 = fcmp oeq float %1474, 0.000000e+00, !dbg !85
  %1476 = tail call float @llvm.nvvm.div.full(float %1052, float %1474), !dbg !86
  %1477 = select i1 %1475, float 0.000000e+00, float %1476, !dbg !87
  %1478 = fmul float %1477, %1473, !dbg !88
  %1479 = fadd float %1466, %1478, !dbg !89
  %1480 = fadd float %1020, %1471, !dbg !90
  %1481 = fmul float %1473, %1473, !dbg !91
  %1482 = fmul float %1461, %1481, !dbg !92
  %1483 = fmul float %1477, %1482, !dbg !93
  %1484 = fadd float %1480, %1483, !dbg !94
  %1485 = extractelement <32 x float> %995, i64 25, !dbg !82
  %1486 = fsub float %1485, %1479, !dbg !82
  %1487 = fadd float %1053, %1474, !dbg !84
  %1488 = fcmp oeq float %1487, 0.000000e+00, !dbg !85
  %1489 = tail call float @llvm.nvvm.div.full(float %1053, float %1487), !dbg !86
  %1490 = select i1 %1488, float 0.000000e+00, float %1489, !dbg !87
  %1491 = fmul float %1490, %1486, !dbg !88
  %1492 = fadd float %1479, %1491, !dbg !89
  %1493 = fadd float %1021, %1484, !dbg !90
  %1494 = fmul float %1486, %1486, !dbg !91
  %1495 = fmul float %1474, %1494, !dbg !92
  %1496 = fmul float %1490, %1495, !dbg !93
  %1497 = fadd float %1493, %1496, !dbg !94
  %1498 = extractelement <32 x float> %995, i64 26, !dbg !82
  %1499 = fsub float %1498, %1492, !dbg !82
  %1500 = fadd float %1054, %1487, !dbg !84
  %1501 = fcmp oeq float %1500, 0.000000e+00, !dbg !85
  %1502 = tail call float @llvm.nvvm.div.full(float %1054, float %1500), !dbg !86
  %1503 = select i1 %1501, float 0.000000e+00, float %1502, !dbg !87
  %1504 = fmul float %1503, %1499, !dbg !88
  %1505 = fadd float %1492, %1504, !dbg !89
  %1506 = fadd float %1022, %1497, !dbg !90
  %1507 = fmul float %1499, %1499, !dbg !91
  %1508 = fmul float %1487, %1507, !dbg !92
  %1509 = fmul float %1503, %1508, !dbg !93
  %1510 = fadd float %1506, %1509, !dbg !94
  %1511 = extractelement <32 x float> %995, i64 27, !dbg !82
  %1512 = fsub float %1511, %1505, !dbg !82
  %1513 = fadd float %1055, %1500, !dbg !84
  %1514 = fcmp oeq float %1513, 0.000000e+00, !dbg !85
  %1515 = tail call float @llvm.nvvm.div.full(float %1055, float %1513), !dbg !86
  %1516 = select i1 %1514, float 0.000000e+00, float %1515, !dbg !87
  %1517 = fmul float %1516, %1512, !dbg !88
  %1518 = fadd float %1505, %1517, !dbg !89
  %1519 = fadd float %1023, %1510, !dbg !90
  %1520 = fmul float %1512, %1512, !dbg !91
  %1521 = fmul float %1500, %1520, !dbg !92
  %1522 = fmul float %1516, %1521, !dbg !93
  %1523 = fadd float %1519, %1522, !dbg !94
  %1524 = extractelement <32 x float> %995, i64 28, !dbg !82
  %1525 = fsub float %1524, %1518, !dbg !82
  %1526 = fadd float %1056, %1513, !dbg !84
  %1527 = fcmp oeq float %1526, 0.000000e+00, !dbg !85
  %1528 = tail call float @llvm.nvvm.div.full(float %1056, float %1526), !dbg !86
  %1529 = select i1 %1527, float 0.000000e+00, float %1528, !dbg !87
  %1530 = fmul float %1529, %1525, !dbg !88
  %1531 = fadd float %1518, %1530, !dbg !89
  %1532 = fadd float %1024, %1523, !dbg !90
  %1533 = fmul float %1525, %1525, !dbg !91
  %1534 = fmul float %1513, %1533, !dbg !92
  %1535 = fmul float %1529, %1534, !dbg !93
  %1536 = fadd float %1532, %1535, !dbg !94
  %1537 = extractelement <32 x float> %995, i64 29, !dbg !82
  %1538 = fsub float %1537, %1531, !dbg !82
  %1539 = fadd float %1057, %1526, !dbg !84
  %1540 = fcmp oeq float %1539, 0.000000e+00, !dbg !85
  %1541 = tail call float @llvm.nvvm.div.full(float %1057, float %1539), !dbg !86
  %1542 = select i1 %1540, float 0.000000e+00, float %1541, !dbg !87
  %1543 = fmul float %1542, %1538, !dbg !88
  %1544 = fadd float %1531, %1543, !dbg !89
  %1545 = fadd float %1025, %1536, !dbg !90
  %1546 = fmul float %1538, %1538, !dbg !91
  %1547 = fmul float %1526, %1546, !dbg !92
  %1548 = fmul float %1542, %1547, !dbg !93
  %1549 = fadd float %1545, %1548, !dbg !94
  %1550 = extractelement <32 x float> %995, i64 30, !dbg !82
  %1551 = fsub float %1550, %1544, !dbg !82
  %1552 = fadd float %1058, %1539, !dbg !84
  %1553 = fcmp oeq float %1552, 0.000000e+00, !dbg !85
  %1554 = tail call float @llvm.nvvm.div.full(float %1058, float %1552), !dbg !86
  %1555 = select i1 %1553, float 0.000000e+00, float %1554, !dbg !87
  %1556 = fmul float %1555, %1551, !dbg !88
  %1557 = fadd float %1544, %1556, !dbg !89
  %1558 = fadd float %1026, %1549, !dbg !90
  %1559 = fmul float %1551, %1551, !dbg !91
  %1560 = fmul float %1539, %1559, !dbg !92
  %1561 = fmul float %1555, %1560, !dbg !93
  %1562 = fadd float %1558, %1561, !dbg !94
  %1563 = extractelement <32 x float> %995, i64 31, !dbg !82
  %1564 = fsub float %1563, %1557, !dbg !82
  %1565 = fadd float %1059, %1552, !dbg !84
  %1566 = fcmp oeq float %1565, 0.000000e+00, !dbg !85
  %1567 = tail call float @llvm.nvvm.div.full(float %1059, float %1565), !dbg !86
  %1568 = select i1 %1566, float 0.000000e+00, float %1567, !dbg !87
  %1569 = fmul float %1568, %1564, !dbg !88
  %1570 = fadd float %1557, %1569, !dbg !89
  %1571 = fadd float %1027, %1562, !dbg !90
  %1572 = fmul float %1564, %1564, !dbg !91
  %1573 = fmul float %1552, %1572, !dbg !92
  %1574 = fmul float %1568, %1573, !dbg !93
  %1575 = fadd float %1571, %1574, !dbg !94
  %1576 = bitcast float %1374 to i32, !dbg !80
  %1577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1576, i32 16, i32 31), !dbg !80
  %1578 = bitcast i32 %1577 to float, !dbg !80
  %1579 = bitcast float %1379 to i32, !dbg !80
  %1580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1579, i32 16, i32 31), !dbg !80
  %1581 = bitcast i32 %1580 to float, !dbg !80
  %1582 = bitcast float %1369 to i32, !dbg !80
  %1583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1582, i32 16, i32 31), !dbg !80
  %1584 = bitcast i32 %1583 to float, !dbg !80
  %1585 = fsub float %1578, %1374, !dbg !82
  %1586 = fadd float %1369, %1584, !dbg !84
  %1587 = fcmp oeq float %1586, 0.000000e+00, !dbg !85
  %1588 = tail call float @llvm.nvvm.div.full(float %1584, float %1586), !dbg !86
  %1589 = select i1 %1587, float 0.000000e+00, float %1588, !dbg !87
  %1590 = fmul float %1589, %1585, !dbg !88
  %1591 = fadd float %1374, %1590, !dbg !89
  %1592 = fadd float %1379, %1581, !dbg !90
  %1593 = fmul float %1585, %1585, !dbg !91
  %1594 = fmul float %1369, %1593, !dbg !92
  %1595 = fmul float %1589, %1594, !dbg !93
  %1596 = fadd float %1592, %1595, !dbg !94
  %1597 = bitcast float %1591 to i32, !dbg !80
  %1598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1597, i32 8, i32 31), !dbg !80
  %1599 = bitcast i32 %1598 to float, !dbg !80
  %1600 = bitcast float %1596 to i32, !dbg !80
  %1601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1600, i32 8, i32 31), !dbg !80
  %1602 = bitcast i32 %1601 to float, !dbg !80
  %1603 = bitcast float %1586 to i32, !dbg !80
  %1604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1603, i32 8, i32 31), !dbg !80
  %1605 = bitcast i32 %1604 to float, !dbg !80
  %1606 = fsub float %1599, %1591, !dbg !82
  %1607 = fadd float %1586, %1605, !dbg !84
  %1608 = fcmp oeq float %1607, 0.000000e+00, !dbg !85
  %1609 = tail call float @llvm.nvvm.div.full(float %1605, float %1607), !dbg !86
  %1610 = select i1 %1608, float 0.000000e+00, float %1609, !dbg !87
  %1611 = fmul float %1610, %1606, !dbg !88
  %1612 = fadd float %1591, %1611, !dbg !89
  %1613 = fadd float %1596, %1602, !dbg !90
  %1614 = fmul float %1606, %1606, !dbg !91
  %1615 = fmul float %1586, %1614, !dbg !92
  %1616 = fmul float %1610, %1615, !dbg !93
  %1617 = fadd float %1613, %1616, !dbg !94
  %1618 = bitcast float %1612 to i32, !dbg !80
  %1619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1618, i32 4, i32 31), !dbg !80
  %1620 = bitcast i32 %1619 to float, !dbg !80
  %1621 = bitcast float %1617 to i32, !dbg !80
  %1622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1621, i32 4, i32 31), !dbg !80
  %1623 = bitcast i32 %1622 to float, !dbg !80
  %1624 = bitcast float %1607 to i32, !dbg !80
  %1625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1624, i32 4, i32 31), !dbg !80
  %1626 = bitcast i32 %1625 to float, !dbg !80
  %1627 = fsub float %1620, %1612, !dbg !82
  %1628 = fadd float %1607, %1626, !dbg !84
  %1629 = fcmp oeq float %1628, 0.000000e+00, !dbg !85
  %1630 = tail call float @llvm.nvvm.div.full(float %1626, float %1628), !dbg !86
  %1631 = select i1 %1629, float 0.000000e+00, float %1630, !dbg !87
  %1632 = fmul float %1631, %1627, !dbg !88
  %1633 = fadd float %1612, %1632, !dbg !89
  %1634 = fadd float %1617, %1623, !dbg !90
  %1635 = fmul float %1627, %1627, !dbg !91
  %1636 = fmul float %1607, %1635, !dbg !92
  %1637 = fmul float %1631, %1636, !dbg !93
  %1638 = fadd float %1634, %1637, !dbg !94
  %1639 = bitcast float %1633 to i32, !dbg !80
  %1640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1639, i32 2, i32 31), !dbg !80
  %1641 = bitcast i32 %1640 to float, !dbg !80
  %1642 = bitcast float %1638 to i32, !dbg !80
  %1643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1642, i32 2, i32 31), !dbg !80
  %1644 = bitcast i32 %1643 to float, !dbg !80
  %1645 = bitcast float %1628 to i32, !dbg !80
  %1646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1645, i32 2, i32 31), !dbg !80
  %1647 = bitcast i32 %1646 to float, !dbg !80
  %1648 = fsub float %1641, %1633, !dbg !82
  %1649 = fadd float %1628, %1647, !dbg !84
  %1650 = fcmp oeq float %1649, 0.000000e+00, !dbg !85
  %1651 = tail call float @llvm.nvvm.div.full(float %1647, float %1649), !dbg !86
  %1652 = select i1 %1650, float 0.000000e+00, float %1651, !dbg !87
  %1653 = fmul float %1652, %1648, !dbg !88
  %1654 = fadd float %1633, %1653, !dbg !89
  %1655 = fadd float %1638, %1644, !dbg !90
  %1656 = fmul float %1648, %1648, !dbg !91
  %1657 = fmul float %1628, %1656, !dbg !92
  %1658 = fmul float %1652, %1657, !dbg !93
  %1659 = fadd float %1655, %1658, !dbg !94
  %1660 = bitcast float %1654 to i32, !dbg !80
  %1661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1660, i32 1, i32 31), !dbg !80
  %1662 = bitcast i32 %1661 to float, !dbg !80
  %1663 = bitcast float %1659 to i32, !dbg !80
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1663, i32 1, i32 31), !dbg !80
  %1665 = bitcast i32 %1664 to float, !dbg !80
  %1666 = bitcast float %1649 to i32, !dbg !80
  %1667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1666, i32 1, i32 31), !dbg !80
  %1668 = bitcast i32 %1667 to float, !dbg !80
  %1669 = fsub float %1662, %1654, !dbg !82
  %1670 = fadd float %1649, %1668, !dbg !84
  %1671 = fcmp oeq float %1670, 0.000000e+00, !dbg !85
  %1672 = tail call float @llvm.nvvm.div.full(float %1668, float %1670), !dbg !86
  %1673 = select i1 %1671, float 0.000000e+00, float %1672, !dbg !87
  %1674 = fmul float %1673, %1669, !dbg !88
  %1675 = fadd float %1654, %1674, !dbg !89
  %1676 = fadd float %1659, %1665, !dbg !90
  %1677 = fmul float %1669, %1669, !dbg !91
  %1678 = fmul float %1649, %1677, !dbg !92
  %1679 = fmul float %1673, %1678, !dbg !93
  %1680 = fadd float %1676, %1679, !dbg !94
  %1681 = bitcast float %1570 to i32, !dbg !80
  %1682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1681, i32 16, i32 31), !dbg !80
  %1683 = bitcast i32 %1682 to float, !dbg !80
  %1684 = bitcast float %1575 to i32, !dbg !80
  %1685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1684, i32 16, i32 31), !dbg !80
  %1686 = bitcast i32 %1685 to float, !dbg !80
  %1687 = bitcast float %1565 to i32, !dbg !80
  %1688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1687, i32 16, i32 31), !dbg !80
  %1689 = bitcast i32 %1688 to float, !dbg !80
  %1690 = fsub float %1683, %1570, !dbg !82
  %1691 = fadd float %1565, %1689, !dbg !84
  %1692 = fcmp oeq float %1691, 0.000000e+00, !dbg !85
  %1693 = tail call float @llvm.nvvm.div.full(float %1689, float %1691), !dbg !86
  %1694 = select i1 %1692, float 0.000000e+00, float %1693, !dbg !87
  %1695 = fmul float %1694, %1690, !dbg !88
  %1696 = fadd float %1570, %1695, !dbg !89
  %1697 = fadd float %1575, %1686, !dbg !90
  %1698 = fmul float %1690, %1690, !dbg !91
  %1699 = fmul float %1565, %1698, !dbg !92
  %1700 = fmul float %1694, %1699, !dbg !93
  %1701 = fadd float %1697, %1700, !dbg !94
  %1702 = bitcast float %1696 to i32, !dbg !80
  %1703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1702, i32 8, i32 31), !dbg !80
  %1704 = bitcast i32 %1703 to float, !dbg !80
  %1705 = bitcast float %1701 to i32, !dbg !80
  %1706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1705, i32 8, i32 31), !dbg !80
  %1707 = bitcast i32 %1706 to float, !dbg !80
  %1708 = bitcast float %1691 to i32, !dbg !80
  %1709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1708, i32 8, i32 31), !dbg !80
  %1710 = bitcast i32 %1709 to float, !dbg !80
  %1711 = fsub float %1704, %1696, !dbg !82
  %1712 = fadd float %1691, %1710, !dbg !84
  %1713 = fcmp oeq float %1712, 0.000000e+00, !dbg !85
  %1714 = tail call float @llvm.nvvm.div.full(float %1710, float %1712), !dbg !86
  %1715 = select i1 %1713, float 0.000000e+00, float %1714, !dbg !87
  %1716 = fmul float %1715, %1711, !dbg !88
  %1717 = fadd float %1696, %1716, !dbg !89
  %1718 = fadd float %1701, %1707, !dbg !90
  %1719 = fmul float %1711, %1711, !dbg !91
  %1720 = fmul float %1691, %1719, !dbg !92
  %1721 = fmul float %1715, %1720, !dbg !93
  %1722 = fadd float %1718, %1721, !dbg !94
  %1723 = bitcast float %1717 to i32, !dbg !80
  %1724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1723, i32 4, i32 31), !dbg !80
  %1725 = bitcast i32 %1724 to float, !dbg !80
  %1726 = bitcast float %1722 to i32, !dbg !80
  %1727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1726, i32 4, i32 31), !dbg !80
  %1728 = bitcast i32 %1727 to float, !dbg !80
  %1729 = bitcast float %1712 to i32, !dbg !80
  %1730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1729, i32 4, i32 31), !dbg !80
  %1731 = bitcast i32 %1730 to float, !dbg !80
  %1732 = fsub float %1725, %1717, !dbg !82
  %1733 = fadd float %1712, %1731, !dbg !84
  %1734 = fcmp oeq float %1733, 0.000000e+00, !dbg !85
  %1735 = tail call float @llvm.nvvm.div.full(float %1731, float %1733), !dbg !86
  %1736 = select i1 %1734, float 0.000000e+00, float %1735, !dbg !87
  %1737 = fmul float %1736, %1732, !dbg !88
  %1738 = fadd float %1717, %1737, !dbg !89
  %1739 = fadd float %1722, %1728, !dbg !90
  %1740 = fmul float %1732, %1732, !dbg !91
  %1741 = fmul float %1712, %1740, !dbg !92
  %1742 = fmul float %1736, %1741, !dbg !93
  %1743 = fadd float %1739, %1742, !dbg !94
  %1744 = bitcast float %1738 to i32, !dbg !80
  %1745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1744, i32 2, i32 31), !dbg !80
  %1746 = bitcast i32 %1745 to float, !dbg !80
  %1747 = bitcast float %1743 to i32, !dbg !80
  %1748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1747, i32 2, i32 31), !dbg !80
  %1749 = bitcast i32 %1748 to float, !dbg !80
  %1750 = bitcast float %1733 to i32, !dbg !80
  %1751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1750, i32 2, i32 31), !dbg !80
  %1752 = bitcast i32 %1751 to float, !dbg !80
  %1753 = fsub float %1746, %1738, !dbg !82
  %1754 = fadd float %1733, %1752, !dbg !84
  %1755 = fcmp oeq float %1754, 0.000000e+00, !dbg !85
  %1756 = tail call float @llvm.nvvm.div.full(float %1752, float %1754), !dbg !86
  %1757 = select i1 %1755, float 0.000000e+00, float %1756, !dbg !87
  %1758 = fmul float %1757, %1753, !dbg !88
  %1759 = fadd float %1738, %1758, !dbg !89
  %1760 = fadd float %1743, %1749, !dbg !90
  %1761 = fmul float %1753, %1753, !dbg !91
  %1762 = fmul float %1733, %1761, !dbg !92
  %1763 = fmul float %1757, %1762, !dbg !93
  %1764 = fadd float %1760, %1763, !dbg !94
  %1765 = bitcast float %1759 to i32, !dbg !80
  %1766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1765, i32 1, i32 31), !dbg !80
  %1767 = bitcast i32 %1766 to float, !dbg !80
  %1768 = bitcast float %1764 to i32, !dbg !80
  %1769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 1, i32 31), !dbg !80
  %1770 = bitcast i32 %1769 to float, !dbg !80
  %1771 = bitcast float %1754 to i32, !dbg !80
  %1772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1771, i32 1, i32 31), !dbg !80
  %1773 = bitcast i32 %1772 to float, !dbg !80
  %1774 = fsub float %1767, %1759, !dbg !82
  %1775 = fadd float %1754, %1773, !dbg !84
  %1776 = fcmp oeq float %1775, 0.000000e+00, !dbg !85
  %1777 = tail call float @llvm.nvvm.div.full(float %1773, float %1775), !dbg !86
  %1778 = select i1 %1776, float 0.000000e+00, float %1777, !dbg !87
  %1779 = fmul float %1778, %1774, !dbg !88
  %1780 = fadd float %1759, %1779, !dbg !89
  %1781 = fadd float %1764, %1770, !dbg !90
  %1782 = fmul float %1774, %1774, !dbg !91
  %1783 = fmul float %1754, %1782, !dbg !92
  %1784 = fmul float %1778, %1783, !dbg !93
  %1785 = fadd float %1781, %1784, !dbg !94
  %1786 = and i32 %1183, 1, !dbg !80
  %1787 = icmp eq i32 %1182, 0, !dbg !80
  %1788 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1786, !dbg !80
  %1789 = bitcast float %1675 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1788, <1 x i32> %1789, i1 %1787) #5, !dbg !80
  %1790 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1786, !dbg !80
  %1791 = bitcast float %1680 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1790, <1 x i32> %1791, i1 %1787) #5, !dbg !80
  %1792 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1786, !dbg !80
  %1793 = bitcast float %1670 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1792, <1 x i32> %1793, i1 %1787) #5, !dbg !80
  %1794 = or disjoint i32 %1786, 2, !dbg !80
  %1795 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1794, !dbg !80
  %1796 = bitcast float %1780 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1795, <1 x i32> %1796, i1 %1787) #5, !dbg !80
  %1797 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1794, !dbg !80
  %1798 = bitcast float %1785 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1797, <1 x i32> %1798, i1 %1787) #5, !dbg !80
  %1799 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1794, !dbg !80
  %1800 = bitcast float %1775 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1799, <1 x i32> %1800, i1 %1787) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1801 = icmp slt i32 %19, 4, !dbg !80
  %1802 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1803 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1802, i1 %1801) #5, !dbg !80
  %1804 = bitcast i32 %1803 to float, !dbg !80
  %1805 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !80
  %1806 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1805, i1 %1801) #5, !dbg !80
  %1807 = bitcast i32 %1806 to float, !dbg !80
  %1808 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !80
  %1809 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1808, i1 %1801) #5, !dbg !80
  %1810 = bitcast i32 %1809 to float, !dbg !80
  %1811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1803, i32 1, i32 31), !dbg !80
  %1812 = bitcast i32 %1811 to float, !dbg !80
  %1813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1806, i32 1, i32 31), !dbg !80
  %1814 = bitcast i32 %1813 to float, !dbg !80
  %1815 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1809, i32 1, i32 31), !dbg !80
  %1816 = bitcast i32 %1815 to float, !dbg !80
  %1817 = fsub float %1812, %1804, !dbg !82
  %1818 = fadd float %1810, %1816, !dbg !84
  %1819 = fcmp oeq float %1818, 0.000000e+00, !dbg !85
  %1820 = tail call float @llvm.nvvm.div.full(float %1816, float %1818), !dbg !86
  %1821 = select i1 %1819, float 0.000000e+00, float %1820, !dbg !87
  %1822 = fmul float %1817, %1821, !dbg !88
  %1823 = fadd float %1822, %1804, !dbg !89
  %1824 = fadd float %1807, %1814, !dbg !90
  %1825 = fmul float %1817, %1817, !dbg !91
  %1826 = fmul float %1825, %1810, !dbg !92
  %1827 = fmul float %1826, %1821, !dbg !93
  %1828 = fadd float %1824, %1827, !dbg !94
  %1829 = icmp eq i32 %20, 0, !dbg !80
  %1830 = and i1 %1801, %1829, !dbg !80
  %1831 = bitcast float %1823 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1802, <1 x i32> %1831, i1 %1830) #5, !dbg !80
  %1832 = bitcast float %1828 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1805, <1 x i32> %1832, i1 %1830) #5, !dbg !80
  %1833 = bitcast float %1818 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1808, <1 x i32> %1833, i1 %1830) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1834 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1835 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !80
  %1836 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !80
  %1837 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24), align 8, !dbg !80
  %1838 = tail call float @llvm.nvvm.div.full(float %1836, float 3.072000e+03), !dbg !95
  %1839 = tail call float @llvm.nvvm.div.full(float %1837, float 3.072000e+03), !dbg !95
  %1840 = fadd float %1838, 0x3EB0C6F7A0000000, !dbg !96
  %1841 = fadd float %1839, 0x3EB0C6F7A0000000, !dbg !96
  %1842 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i = icmp eq i32 %1842, 0, !dbg !97
  br i1 %.not.i, label %1845, label %1843, !dbg !97

1843:                                             ; preds = %1181
  %1844 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1840), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

1845:                                             ; preds = %1181
  %1846 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1840), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

__nv_rsqrtf.exit:                                 ; preds = %1843, %1845
  %.0.i = phi float [ %1844, %1843 ], [ %1846, %1845 ], !dbg !97
  %1847 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1849 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1851 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1852 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1853 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1854 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i233 = icmp eq i32 %1854, 0, !dbg !97
  br i1 %.not.i233, label %1857, label %1855, !dbg !97

1855:                                             ; preds = %__nv_rsqrtf.exit
  %1856 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1841), !dbg !97
  br label %__nv_rsqrtf.exit235, !dbg !97

1857:                                             ; preds = %__nv_rsqrtf.exit
  %1858 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1841), !dbg !97
  br label %__nv_rsqrtf.exit235, !dbg !97

__nv_rsqrtf.exit235:                              ; preds = %1855, %1857
  %.0.i234 = phi float [ %1856, %1855 ], [ %1858, %1857 ], !dbg !97
  %1859 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1860 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1861 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1862 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1864 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1865 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %invariant.gep265 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !98
  %1866 = shufflevector <2 x i1> %25, <2 x i1> poison, <2 x i32> <i32 1, i32 1>, !dbg !99
  %1867 = shufflevector <2 x i1> %25, <2 x i1> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !100
  %1868 = shufflevector <2 x i1> %25, <2 x i1> poison, <8 x i32> zeroinitializer, !dbg !100
  %invariant.op1101 = or i32 %31, 12292, !dbg !98
  %invariant.op1102 = or i32 %31, 12804, !dbg !98
  br label %1869, !dbg !98

1869:                                             ; preds = %__nv_rsqrtf.exit235, %1869
  %indvars.iv428 = phi i64 [ 0, %__nv_rsqrtf.exit235 ], [ %indvars.iv.next429, %1869 ]
  %1870 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2375, %1869 ]
  %1871 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2376, %1869 ]
  %1872 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2377, %1869 ]
  %1873 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2378, %1869 ]
  %1874 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2379, %1869 ]
  %1875 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit235 ], [ %2380, %1869 ]
  %1876 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit235 ], [ %2401, %1869 ]
  %1877 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit235 ], [ %2402, %1869 ]
  %1878 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit235 ], [ %2397, %1869 ]
  %1879 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit235 ], [ %2381, %1869 ]
  %1880 = or disjoint i64 %indvars.iv428, %159, !dbg !101
  %1881 = or disjoint i64 %indvars.iv428, %158, !dbg !101
  %1882 = or disjoint i64 %indvars.iv428, %157, !dbg !101
  %1883 = or disjoint i64 %indvars.iv428, %156, !dbg !101
  %1884 = trunc i64 %indvars.iv428 to i32, !dbg !102
  %1885 = or disjoint i32 %36, %1884, !dbg !102
  %1886 = add i32 %1885, %114, !dbg !102
  %1887 = trunc i64 %indvars.iv428 to i32, !dbg !102
  %1888 = or disjoint i32 %38, %1887, !dbg !102
  %1889 = add i32 %1888, %114, !dbg !102
  %1890 = add i32 %1885, %115, !dbg !102
  %1891 = add i32 %1888, %115, !dbg !102
  %1892 = trunc nuw nsw i64 %1880 to i32, !dbg !102
  %1893 = add i32 %114, %1892, !dbg !102
  %1894 = trunc nuw nsw i64 %1882 to i32, !dbg !102
  %1895 = add i32 %114, %1894, !dbg !102
  %1896 = add i32 %115, %1892, !dbg !102
  %1897 = add i32 %115, %1894, !dbg !102
  %1898 = sext i32 %1886 to i64, !dbg !103
  %1899 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1898, !dbg !103
  %1900 = sext i32 %1889 to i64, !dbg !103
  %1901 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1900, !dbg !103
  %1902 = sext i32 %1890 to i64, !dbg !103
  %1903 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1902, !dbg !103
  %1904 = sext i32 %1891 to i64, !dbg !103
  %1905 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1904, !dbg !103
  %1906 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1899, i1 %28) #5, !dbg !104
  %1907 = extractvalue { i32, i32, i32, i32 } %1906, 0, !dbg !104
  %1908 = bitcast i32 %1907 to <2 x bfloat>, !dbg !104
  %1909 = extractvalue { i32, i32, i32, i32 } %1906, 1, !dbg !104
  %1910 = bitcast i32 %1909 to <2 x bfloat>, !dbg !104
  %1911 = extractvalue { i32, i32, i32, i32 } %1906, 2, !dbg !104
  %1912 = bitcast i32 %1911 to <2 x bfloat>, !dbg !104
  %1913 = extractvalue { i32, i32, i32, i32 } %1906, 3, !dbg !104
  %1914 = bitcast i32 %1913 to <2 x bfloat>, !dbg !104
  %1915 = extractelement <2 x bfloat> %1908, i64 0, !dbg !104
  %1916 = extractelement <2 x bfloat> %1908, i64 1, !dbg !104
  %1917 = extractelement <2 x bfloat> %1910, i64 0, !dbg !104
  %1918 = extractelement <2 x bfloat> %1910, i64 1, !dbg !104
  %1919 = extractelement <2 x bfloat> %1912, i64 0, !dbg !104
  %1920 = extractelement <2 x bfloat> %1912, i64 1, !dbg !104
  %1921 = extractelement <2 x bfloat> %1914, i64 0, !dbg !104
  %1922 = extractelement <2 x bfloat> %1914, i64 1, !dbg !104
  %1923 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1901, i1 %28) #5, !dbg !104
  %1924 = extractvalue { i32, i32, i32, i32 } %1923, 0, !dbg !104
  %1925 = bitcast i32 %1924 to <2 x bfloat>, !dbg !104
  %1926 = extractvalue { i32, i32, i32, i32 } %1923, 1, !dbg !104
  %1927 = bitcast i32 %1926 to <2 x bfloat>, !dbg !104
  %1928 = extractvalue { i32, i32, i32, i32 } %1923, 2, !dbg !104
  %1929 = bitcast i32 %1928 to <2 x bfloat>, !dbg !104
  %1930 = extractvalue { i32, i32, i32, i32 } %1923, 3, !dbg !104
  %1931 = bitcast i32 %1930 to <2 x bfloat>, !dbg !104
  %1932 = extractelement <2 x bfloat> %1925, i64 0, !dbg !104
  %1933 = extractelement <2 x bfloat> %1925, i64 1, !dbg !104
  %1934 = extractelement <2 x bfloat> %1927, i64 0, !dbg !104
  %1935 = extractelement <2 x bfloat> %1927, i64 1, !dbg !104
  %1936 = extractelement <2 x bfloat> %1929, i64 0, !dbg !104
  %1937 = extractelement <2 x bfloat> %1929, i64 1, !dbg !104
  %1938 = extractelement <2 x bfloat> %1931, i64 0, !dbg !104
  %1939 = extractelement <2 x bfloat> %1931, i64 1, !dbg !104
  %1940 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1903, i1 %28) #5, !dbg !104
  %1941 = extractvalue { i32, i32, i32, i32 } %1940, 0, !dbg !104
  %1942 = bitcast i32 %1941 to <2 x bfloat>, !dbg !104
  %1943 = extractvalue { i32, i32, i32, i32 } %1940, 1, !dbg !104
  %1944 = bitcast i32 %1943 to <2 x bfloat>, !dbg !104
  %1945 = extractvalue { i32, i32, i32, i32 } %1940, 2, !dbg !104
  %1946 = bitcast i32 %1945 to <2 x bfloat>, !dbg !104
  %1947 = extractvalue { i32, i32, i32, i32 } %1940, 3, !dbg !104
  %1948 = bitcast i32 %1947 to <2 x bfloat>, !dbg !104
  %1949 = extractelement <2 x bfloat> %1942, i64 0, !dbg !104
  %1950 = extractelement <2 x bfloat> %1942, i64 1, !dbg !104
  %1951 = extractelement <2 x bfloat> %1944, i64 0, !dbg !104
  %1952 = extractelement <2 x bfloat> %1944, i64 1, !dbg !104
  %1953 = extractelement <2 x bfloat> %1946, i64 0, !dbg !104
  %1954 = extractelement <2 x bfloat> %1946, i64 1, !dbg !104
  %1955 = extractelement <2 x bfloat> %1948, i64 0, !dbg !104
  %1956 = extractelement <2 x bfloat> %1948, i64 1, !dbg !104
  %1957 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1905, i1 %28) #5, !dbg !104
  %1958 = extractvalue { i32, i32, i32, i32 } %1957, 0, !dbg !104
  %1959 = bitcast i32 %1958 to <2 x bfloat>, !dbg !104
  %1960 = extractvalue { i32, i32, i32, i32 } %1957, 1, !dbg !104
  %1961 = bitcast i32 %1960 to <2 x bfloat>, !dbg !104
  %1962 = extractvalue { i32, i32, i32, i32 } %1957, 2, !dbg !104
  %1963 = bitcast i32 %1962 to <2 x bfloat>, !dbg !104
  %1964 = extractvalue { i32, i32, i32, i32 } %1957, 3, !dbg !104
  %1965 = bitcast i32 %1964 to <2 x bfloat>, !dbg !104
  %1966 = extractelement <2 x bfloat> %1959, i64 0, !dbg !104
  %1967 = extractelement <2 x bfloat> %1959, i64 1, !dbg !104
  %1968 = extractelement <2 x bfloat> %1961, i64 0, !dbg !104
  %1969 = extractelement <2 x bfloat> %1961, i64 1, !dbg !104
  %1970 = extractelement <2 x bfloat> %1963, i64 0, !dbg !104
  %1971 = extractelement <2 x bfloat> %1963, i64 1, !dbg !104
  %1972 = extractelement <2 x bfloat> %1965, i64 0, !dbg !104
  %1973 = extractelement <2 x bfloat> %1965, i64 1, !dbg !104
  %1974 = fpext bfloat %1915 to float, !dbg !105
  %1975 = fpext bfloat %1916 to float, !dbg !105
  %1976 = fpext bfloat %1917 to float, !dbg !105
  %1977 = fpext bfloat %1918 to float, !dbg !105
  %1978 = fpext bfloat %1919 to float, !dbg !105
  %1979 = fpext bfloat %1920 to float, !dbg !105
  %1980 = fpext bfloat %1921 to float, !dbg !105
  %1981 = fpext bfloat %1922 to float, !dbg !105
  %1982 = fpext bfloat %1932 to float, !dbg !105
  %1983 = fpext bfloat %1933 to float, !dbg !105
  %1984 = fpext bfloat %1934 to float, !dbg !105
  %1985 = fpext bfloat %1935 to float, !dbg !105
  %1986 = fpext bfloat %1936 to float, !dbg !105
  %1987 = fpext bfloat %1937 to float, !dbg !105
  %1988 = fpext bfloat %1938 to float, !dbg !105
  %1989 = fpext bfloat %1939 to float, !dbg !105
  %1990 = fpext bfloat %1949 to float, !dbg !105
  %1991 = fpext bfloat %1950 to float, !dbg !105
  %1992 = fpext bfloat %1951 to float, !dbg !105
  %1993 = fpext bfloat %1952 to float, !dbg !105
  %1994 = fpext bfloat %1953 to float, !dbg !105
  %1995 = fpext bfloat %1954 to float, !dbg !105
  %1996 = fpext bfloat %1955 to float, !dbg !105
  %1997 = fpext bfloat %1956 to float, !dbg !105
  %1998 = fpext bfloat %1966 to float, !dbg !105
  %1999 = fpext bfloat %1967 to float, !dbg !105
  %2000 = fpext bfloat %1968 to float, !dbg !105
  %2001 = fpext bfloat %1969 to float, !dbg !105
  %2002 = fpext bfloat %1970 to float, !dbg !105
  %2003 = fpext bfloat %1971 to float, !dbg !105
  %2004 = fpext bfloat %1972 to float, !dbg !105
  %2005 = fpext bfloat %1973 to float, !dbg !105
  %2006 = or disjoint i64 %1880, 12288, !dbg !106
  %2007 = trunc nuw nsw i64 %indvars.iv428 to i32
  %.reass.reass.reass = or i32 %2007, %invariant.op1101
  %2008 = or disjoint i64 %1882, 12288, !dbg !106
  %.reass264.reass.reass = or i32 %2007, %invariant.op1102
  %2009 = getelementptr float, ptr addrspace(1) %1, i64 %2006, !dbg !107
  %2010 = zext nneg i32 %.reass.reass.reass to i64, !dbg !107
  %2011 = getelementptr float, ptr addrspace(1) %1, i64 %2010, !dbg !107
  %2012 = getelementptr float, ptr addrspace(1) %1, i64 %2008, !dbg !107
  %2013 = zext nneg i32 %.reass264.reass.reass to i64, !dbg !107
  %2014 = getelementptr float, ptr addrspace(1) %1, i64 %2013, !dbg !107
  %2015 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2009, i1 true) #5, !dbg !108
  %2016 = extractvalue { i32, i32, i32, i32 } %2015, 0, !dbg !108
  %2017 = extractvalue { i32, i32, i32, i32 } %2015, 1, !dbg !108
  %2018 = extractvalue { i32, i32, i32, i32 } %2015, 2, !dbg !108
  %2019 = extractvalue { i32, i32, i32, i32 } %2015, 3, !dbg !108
  %2020 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2011, i1 true) #5, !dbg !108
  %2021 = extractvalue { i32, i32, i32, i32 } %2020, 0, !dbg !108
  %2022 = extractvalue { i32, i32, i32, i32 } %2020, 1, !dbg !108
  %2023 = extractvalue { i32, i32, i32, i32 } %2020, 2, !dbg !108
  %2024 = extractvalue { i32, i32, i32, i32 } %2020, 3, !dbg !108
  %2025 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2012, i1 true) #5, !dbg !108
  %2026 = extractvalue { i32, i32, i32, i32 } %2025, 0, !dbg !108
  %2027 = extractvalue { i32, i32, i32, i32 } %2025, 1, !dbg !108
  %2028 = extractvalue { i32, i32, i32, i32 } %2025, 2, !dbg !108
  %2029 = extractvalue { i32, i32, i32, i32 } %2025, 3, !dbg !108
  %2030 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2014, i1 true) #5, !dbg !108
  %2031 = extractvalue { i32, i32, i32, i32 } %2030, 0, !dbg !108
  %2032 = extractvalue { i32, i32, i32, i32 } %2030, 1, !dbg !108
  %2033 = extractvalue { i32, i32, i32, i32 } %2030, 2, !dbg !108
  %2034 = extractvalue { i32, i32, i32, i32 } %2030, 3, !dbg !108
  %2035 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2006, !dbg !109
  %2036 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2008, !dbg !109
  %2037 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2035, i1 true) #5, !dbg !110
  %2038 = extractvalue { i32, i32, i32, i32 } %2037, 0, !dbg !110
  %2039 = bitcast i32 %2038 to <2 x bfloat>, !dbg !110
  %2040 = extractvalue { i32, i32, i32, i32 } %2037, 1, !dbg !110
  %2041 = bitcast i32 %2040 to <2 x bfloat>, !dbg !110
  %2042 = extractvalue { i32, i32, i32, i32 } %2037, 2, !dbg !110
  %2043 = bitcast i32 %2042 to <2 x bfloat>, !dbg !110
  %2044 = extractvalue { i32, i32, i32, i32 } %2037, 3, !dbg !110
  %2045 = bitcast i32 %2044 to <2 x bfloat>, !dbg !110
  %2046 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2036, i1 true) #5, !dbg !110
  %2047 = extractvalue { i32, i32, i32, i32 } %2046, 0, !dbg !110
  %2048 = bitcast i32 %2047 to <2 x bfloat>, !dbg !110
  %2049 = extractvalue { i32, i32, i32, i32 } %2046, 1, !dbg !110
  %2050 = bitcast i32 %2049 to <2 x bfloat>, !dbg !110
  %2051 = extractvalue { i32, i32, i32, i32 } %2046, 2, !dbg !110
  %2052 = bitcast i32 %2051 to <2 x bfloat>, !dbg !110
  %2053 = extractvalue { i32, i32, i32, i32 } %2046, 3, !dbg !110
  %2054 = bitcast i32 %2053 to <2 x bfloat>, !dbg !110
  %2055 = add nuw nsw i64 %1880, 9216, !dbg !111
  %2056 = add nuw nsw i64 %1882, 9216, !dbg !111
  %2057 = getelementptr float, ptr addrspace(1) %1, i64 %2055, !dbg !112
  %gep266 = getelementptr float, ptr addrspace(1) %invariant.gep265, i64 %1881, !dbg !112
  %2058 = getelementptr float, ptr addrspace(1) %1, i64 %2056, !dbg !112
  %gep268 = getelementptr float, ptr addrspace(1) %invariant.gep265, i64 %1883, !dbg !112
  %2059 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2057, i1 true) #5, !dbg !113
  %2060 = extractvalue { i32, i32, i32, i32 } %2059, 0, !dbg !113
  %2061 = extractvalue { i32, i32, i32, i32 } %2059, 1, !dbg !113
  %2062 = extractvalue { i32, i32, i32, i32 } %2059, 2, !dbg !113
  %2063 = extractvalue { i32, i32, i32, i32 } %2059, 3, !dbg !113
  %2064 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep266, i1 true) #5, !dbg !113
  %2065 = extractvalue { i32, i32, i32, i32 } %2064, 0, !dbg !113
  %2066 = extractvalue { i32, i32, i32, i32 } %2064, 1, !dbg !113
  %2067 = extractvalue { i32, i32, i32, i32 } %2064, 2, !dbg !113
  %2068 = extractvalue { i32, i32, i32, i32 } %2064, 3, !dbg !113
  %2069 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2058, i1 true) #5, !dbg !113
  %2070 = extractvalue { i32, i32, i32, i32 } %2069, 0, !dbg !113
  %2071 = extractvalue { i32, i32, i32, i32 } %2069, 1, !dbg !113
  %2072 = extractvalue { i32, i32, i32, i32 } %2069, 2, !dbg !113
  %2073 = extractvalue { i32, i32, i32, i32 } %2069, 3, !dbg !113
  %2074 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep268, i1 true) #5, !dbg !113
  %2075 = extractvalue { i32, i32, i32, i32 } %2074, 0, !dbg !113
  %2076 = extractvalue { i32, i32, i32, i32 } %2074, 1, !dbg !113
  %2077 = extractvalue { i32, i32, i32, i32 } %2074, 2, !dbg !113
  %2078 = extractvalue { i32, i32, i32, i32 } %2074, 3, !dbg !113
  %2079 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2055, !dbg !114
  %2080 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2056, !dbg !114
  %2081 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2079, i1 true) #5, !dbg !115
  %2082 = extractvalue { i32, i32, i32, i32 } %2081, 0, !dbg !115
  %2083 = bitcast i32 %2082 to <2 x bfloat>, !dbg !115
  %2084 = extractvalue { i32, i32, i32, i32 } %2081, 1, !dbg !115
  %2085 = bitcast i32 %2084 to <2 x bfloat>, !dbg !115
  %2086 = extractvalue { i32, i32, i32, i32 } %2081, 2, !dbg !115
  %2087 = bitcast i32 %2086 to <2 x bfloat>, !dbg !115
  %2088 = extractvalue { i32, i32, i32, i32 } %2081, 3, !dbg !115
  %2089 = bitcast i32 %2088 to <2 x bfloat>, !dbg !115
  %2090 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2080, i1 true) #5, !dbg !115
  %2091 = extractvalue { i32, i32, i32, i32 } %2090, 0, !dbg !115
  %2092 = bitcast i32 %2091 to <2 x bfloat>, !dbg !115
  %2093 = extractvalue { i32, i32, i32, i32 } %2090, 1, !dbg !115
  %2094 = bitcast i32 %2093 to <2 x bfloat>, !dbg !115
  %2095 = extractvalue { i32, i32, i32, i32 } %2090, 2, !dbg !115
  %2096 = bitcast i32 %2095 to <2 x bfloat>, !dbg !115
  %2097 = extractvalue { i32, i32, i32, i32 } %2090, 3, !dbg !115
  %2098 = bitcast i32 %2097 to <2 x bfloat>, !dbg !115
  %2099 = fsub float %1974, %1834, !dbg !116
  %2100 = fsub float %1975, %1834, !dbg !116
  %2101 = fsub float %1976, %1834, !dbg !116
  %2102 = fsub float %1977, %1834, !dbg !116
  %2103 = fsub float %1978, %1834, !dbg !116
  %2104 = fsub float %1979, %1834, !dbg !116
  %2105 = fsub float %1980, %1834, !dbg !116
  %2106 = fsub float %1981, %1834, !dbg !116
  %2107 = fsub float %1982, %1834, !dbg !116
  %2108 = fsub float %1983, %1834, !dbg !116
  %2109 = fsub float %1984, %1834, !dbg !116
  %2110 = fsub float %1985, %1834, !dbg !116
  %2111 = fsub float %1986, %1834, !dbg !116
  %2112 = fsub float %1987, %1834, !dbg !116
  %2113 = fsub float %1988, %1834, !dbg !116
  %2114 = fsub float %1989, %1834, !dbg !116
  %2115 = fsub float %1990, %1835, !dbg !116
  %2116 = fsub float %1991, %1835, !dbg !116
  %2117 = fsub float %1992, %1835, !dbg !116
  %2118 = fsub float %1993, %1835, !dbg !116
  %2119 = fsub float %1994, %1835, !dbg !116
  %2120 = fsub float %1995, %1835, !dbg !116
  %2121 = fsub float %1996, %1835, !dbg !116
  %2122 = fsub float %1997, %1835, !dbg !116
  %2123 = fsub float %1998, %1835, !dbg !116
  %2124 = fsub float %1999, %1835, !dbg !116
  %2125 = fsub float %2000, %1835, !dbg !116
  %2126 = fsub float %2001, %1835, !dbg !116
  %2127 = fsub float %2002, %1835, !dbg !116
  %2128 = fsub float %2003, %1835, !dbg !116
  %2129 = fsub float %2004, %1835, !dbg !116
  %2130 = fsub float %2005, %1835, !dbg !116
  %2131 = fmul float %.0.i, %2099, !dbg !117
  %2132 = fmul float %.0.i, %2100, !dbg !117
  %2133 = fmul float %.0.i, %2101, !dbg !117
  %2134 = fmul float %.0.i, %2102, !dbg !117
  %2135 = fmul float %.0.i, %2103, !dbg !117
  %2136 = fmul float %.0.i, %2104, !dbg !117
  %2137 = fmul float %.0.i, %2105, !dbg !117
  %2138 = fmul float %.0.i, %2106, !dbg !117
  %2139 = fmul float %.0.i, %2107, !dbg !117
  %2140 = fmul float %.0.i, %2108, !dbg !117
  %2141 = fmul float %.0.i, %2109, !dbg !117
  %2142 = fmul float %.0.i, %2110, !dbg !117
  %2143 = fmul float %.0.i, %2111, !dbg !117
  %2144 = fmul float %.0.i, %2112, !dbg !117
  %2145 = fmul float %.0.i, %2113, !dbg !117
  %2146 = fmul float %.0.i, %2114, !dbg !117
  %2147 = fmul float %.0.i234, %2115, !dbg !117
  %2148 = fmul float %.0.i234, %2116, !dbg !117
  %2149 = fmul float %.0.i234, %2117, !dbg !117
  %2150 = fmul float %.0.i234, %2118, !dbg !117
  %2151 = fmul float %.0.i234, %2119, !dbg !117
  %2152 = fmul float %.0.i234, %2120, !dbg !117
  %2153 = fmul float %.0.i234, %2121, !dbg !117
  %2154 = fmul float %.0.i234, %2122, !dbg !117
  %2155 = fmul float %.0.i234, %2123, !dbg !117
  %2156 = fmul float %.0.i234, %2124, !dbg !117
  %2157 = fmul float %.0.i234, %2125, !dbg !117
  %2158 = fmul float %.0.i234, %2126, !dbg !117
  %2159 = fmul float %.0.i234, %2127, !dbg !117
  %2160 = fmul float %.0.i234, %2128, !dbg !117
  %2161 = fmul float %.0.i234, %2129, !dbg !117
  %2162 = fmul float %.0.i234, %2130, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %2163 = bitcast float %2131 to i32, !dbg !117
  %2164 = bitcast float %2132 to i32, !dbg !117
  %2165 = bitcast float %2133 to i32, !dbg !117
  %2166 = bitcast float %2134 to i32, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %2163, i32 %2164, i32 %2165, i32 %2166, i1 true) #5, !dbg !117
  %2167 = bitcast float %2135 to i32, !dbg !117
  %2168 = bitcast float %2136 to i32, !dbg !117
  %2169 = bitcast float %2137 to i32, !dbg !117
  %2170 = bitcast float %2138 to i32, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %149, i32 %2167, i32 %2168, i32 %2169, i32 %2170, i1 true) #5, !dbg !117
  %2171 = bitcast float %2139 to i32, !dbg !117
  %2172 = bitcast float %2140 to i32, !dbg !117
  %2173 = bitcast float %2141 to i32, !dbg !117
  %2174 = bitcast float %2142 to i32, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %150, i32 %2171, i32 %2172, i32 %2173, i32 %2174, i1 true) #5, !dbg !117
  %2175 = bitcast float %2143 to i32, !dbg !117
  %2176 = bitcast float %2144 to i32, !dbg !117
  %2177 = bitcast float %2145 to i32, !dbg !117
  %2178 = bitcast float %2146 to i32, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %151, i32 %2175, i32 %2176, i32 %2177, i32 %2178, i1 true) #5, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %2179 = bitcast float %2147 to i32, !dbg !117
  %2180 = bitcast float %2148 to i32, !dbg !117
  %2181 = bitcast float %2149 to i32, !dbg !117
  %2182 = bitcast float %2150 to i32, !dbg !117
  %2183 = bitcast float %2151 to i32, !dbg !117
  %2184 = bitcast float %2152 to i32, !dbg !117
  %2185 = bitcast float %2153 to i32, !dbg !117
  %2186 = bitcast float %2154 to i32, !dbg !117
  %2187 = bitcast float %2155 to i32, !dbg !117
  %2188 = bitcast float %2156 to i32, !dbg !117
  %2189 = bitcast float %2157 to i32, !dbg !117
  %2190 = bitcast float %2158 to i32, !dbg !117
  %2191 = bitcast float %2159 to i32, !dbg !117
  %2192 = bitcast float %2160 to i32, !dbg !117
  %2193 = bitcast float %2161 to i32, !dbg !117
  %2194 = bitcast float %2162 to i32, !dbg !117
  %2195 = fcmp uno <32 x float> %1877, zeroinitializer, !dbg !118
  %2196 = fcmp uno float %1870, 0.000000e+00, !dbg !120
  %2197 = fcmp uno float %1871, 0.000000e+00, !dbg !120
  %2198 = fcmp uno float %1872, 0.000000e+00, !dbg !120
  %2199 = fcmp uno float %1873, 0.000000e+00, !dbg !120
  %2200 = fcmp uno float %1874, 0.000000e+00, !dbg !120
  %2201 = fcmp uno float %1875, 0.000000e+00, !dbg !120
  %2202 = fcmp uno <8 x float> %1879, zeroinitializer, !dbg !120
  %2203 = fcmp uno <16 x float> %1878, zeroinitializer, !dbg !120
  %2204 = fcmp uno <2 x float> %1876, zeroinitializer, !dbg !118
  %2205 = insertelement <2 x i32> poison, i32 %2016, i64 0, !dbg !108
  %2206 = insertelement <2 x i32> %2205, i32 %2017, i64 1, !dbg !108
  %2207 = bitcast <2 x i32> %2206 to <2 x float>, !dbg !108
  %2208 = fpext <2 x bfloat> %2039 to <2 x float>, !dbg !122
  %2209 = insertelement <2 x i32> poison, i32 %2060, i64 0, !dbg !113
  %2210 = insertelement <2 x i32> %2209, i32 %2061, i64 1, !dbg !113
  %2211 = bitcast <2 x i32> %2210 to <2 x float>, !dbg !113
  %2212 = fpext <2 x bfloat> %2083 to <2 x float>, !dbg !123
  %2213 = fadd <2 x float> %2207, %2208, !dbg !124
  %2214 = fadd <2 x float> %2213, splat (float 1.000000e+00), !dbg !125
  %2215 = fadd <2 x float> %2211, %2212, !dbg !126
  %2216 = insertelement <2 x i32> poison, i32 %2018, i64 0, !dbg !108
  %2217 = insertelement <2 x i32> %2216, i32 %2019, i64 1, !dbg !108
  %2218 = bitcast <2 x i32> %2217 to <2 x float>, !dbg !108
  %2219 = insertelement <4 x i32> poison, i32 %2021, i64 0, !dbg !108
  %2220 = insertelement <4 x i32> %2219, i32 %2022, i64 1, !dbg !108
  %2221 = insertelement <4 x i32> %2220, i32 %2023, i64 2, !dbg !108
  %2222 = insertelement <4 x i32> %2221, i32 %2024, i64 3, !dbg !108
  %2223 = bitcast <4 x i32> %2222 to <4 x float>, !dbg !108
  %2224 = insertelement <8 x i32> poison, i32 %2026, i64 0, !dbg !108
  %2225 = insertelement <8 x i32> %2224, i32 %2027, i64 1, !dbg !108
  %2226 = insertelement <8 x i32> %2225, i32 %2028, i64 2, !dbg !108
  %2227 = insertelement <8 x i32> %2226, i32 %2029, i64 3, !dbg !108
  %2228 = insertelement <8 x i32> %2227, i32 %2031, i64 4, !dbg !108
  %2229 = insertelement <8 x i32> %2228, i32 %2032, i64 5, !dbg !108
  %2230 = insertelement <8 x i32> %2229, i32 %2033, i64 6, !dbg !108
  %2231 = insertelement <8 x i32> %2230, i32 %2034, i64 7, !dbg !108
  %2232 = bitcast <8 x i32> %2231 to <8 x float>, !dbg !108
  %2233 = fpext <2 x bfloat> %2041 to <2 x float>, !dbg !122
  %2234 = shufflevector <2 x bfloat> %2043, <2 x bfloat> %2045, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !122
  %2235 = fpext <4 x bfloat> %2234 to <4 x float>, !dbg !122
  %2236 = shufflevector <2 x bfloat> %2048, <2 x bfloat> %2050, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2237 = shufflevector <2 x bfloat> %2052, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2238 = shufflevector <8 x bfloat> %2236, <8 x bfloat> %2237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2239 = shufflevector <2 x bfloat> %2052, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2240 = shufflevector <8 x bfloat> %2238, <8 x bfloat> %2239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !122
  %2241 = shufflevector <2 x bfloat> %2054, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2242 = shufflevector <8 x bfloat> %2240, <8 x bfloat> %2241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !122
  %2243 = shufflevector <2 x bfloat> %2054, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !122
  %2244 = shufflevector <8 x bfloat> %2242, <8 x bfloat> %2243, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !122
  %2245 = fpext <8 x bfloat> %2244 to <8 x float>, !dbg !122
  %2246 = insertelement <2 x i32> poison, i32 %2062, i64 0, !dbg !113
  %2247 = insertelement <2 x i32> %2246, i32 %2063, i64 1, !dbg !113
  %2248 = bitcast <2 x i32> %2247 to <2 x float>, !dbg !113
  %2249 = insertelement <4 x i32> poison, i32 %2065, i64 0, !dbg !113
  %2250 = insertelement <4 x i32> %2249, i32 %2066, i64 1, !dbg !113
  %2251 = insertelement <4 x i32> %2250, i32 %2067, i64 2, !dbg !113
  %2252 = insertelement <4 x i32> %2251, i32 %2068, i64 3, !dbg !113
  %2253 = bitcast <4 x i32> %2252 to <4 x float>, !dbg !113
  %2254 = insertelement <8 x i32> poison, i32 %2070, i64 0, !dbg !113
  %2255 = insertelement <8 x i32> %2254, i32 %2071, i64 1, !dbg !113
  %2256 = insertelement <8 x i32> %2255, i32 %2072, i64 2, !dbg !113
  %2257 = insertelement <8 x i32> %2256, i32 %2073, i64 3, !dbg !113
  %2258 = insertelement <8 x i32> %2257, i32 %2075, i64 4, !dbg !113
  %2259 = insertelement <8 x i32> %2258, i32 %2076, i64 5, !dbg !113
  %2260 = insertelement <8 x i32> %2259, i32 %2077, i64 6, !dbg !113
  %2261 = insertelement <8 x i32> %2260, i32 %2078, i64 7, !dbg !113
  %2262 = bitcast <8 x i32> %2261 to <8 x float>, !dbg !113
  %2263 = fpext <2 x bfloat> %2085 to <2 x float>, !dbg !123
  %2264 = shufflevector <2 x bfloat> %2087, <2 x bfloat> %2089, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !123
  %2265 = fpext <4 x bfloat> %2264 to <4 x float>, !dbg !123
  %2266 = shufflevector <2 x bfloat> %2092, <2 x bfloat> %2094, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2267 = shufflevector <2 x bfloat> %2096, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2268 = shufflevector <8 x bfloat> %2266, <8 x bfloat> %2267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2269 = shufflevector <2 x bfloat> %2096, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2270 = shufflevector <8 x bfloat> %2268, <8 x bfloat> %2269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !123
  %2271 = shufflevector <2 x bfloat> %2098, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2272 = shufflevector <8 x bfloat> %2270, <8 x bfloat> %2271, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !123
  %2273 = shufflevector <2 x bfloat> %2098, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !123
  %2274 = shufflevector <8 x bfloat> %2272, <8 x bfloat> %2273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !123
  %2275 = fpext <8 x bfloat> %2274 to <8 x float>, !dbg !123
  %2276 = load <8 x float>, ptr addrspace(3) %152, align 16, !dbg !117
  %2277 = load <8 x float>, ptr addrspace(3) %154, align 16, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %2179, i32 %2180, i32 %2181, i32 %2182, i1 true) #5, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %149, i32 %2183, i32 %2184, i32 %2185, i32 %2186, i1 true) #5, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %150, i32 %2187, i32 %2188, i32 %2189, i32 %2190, i1 true) #5, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %151, i32 %2191, i32 %2192, i32 %2193, i32 %2194, i1 true) #5, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %2278 = load <4 x float>, ptr addrspace(3) %160, align 8, !dbg !117
  %2279 = load <2 x float>, ptr addrspace(3) %161, align 8, !dbg !117
  %2280 = load <2 x float>, ptr addrspace(3) %154, align 16, !dbg !117
  %2281 = load <4 x float>, ptr addrspace(3) %162, align 8, !dbg !117
  %2282 = load <2 x float>, ptr addrspace(3) %163, align 8, !dbg !117
  %2283 = fadd <2 x float> %2218, %2233, !dbg !124
  %2284 = fadd <4 x float> %2223, %2235, !dbg !124
  %2285 = fadd <8 x float> %2232, %2245, !dbg !124
  %2286 = fadd <2 x float> %2283, splat (float 1.000000e+00), !dbg !125
  %2287 = fadd <4 x float> %2284, splat (float 1.000000e+00), !dbg !125
  %2288 = fadd <8 x float> %2285, splat (float 1.000000e+00), !dbg !125
  %2289 = fadd <2 x float> %2248, %2263, !dbg !126
  %2290 = fadd <4 x float> %2253, %2265, !dbg !126
  %2291 = fadd <8 x float> %2262, %2275, !dbg !126
  %2292 = shufflevector <2 x float> %2214, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2293 = shufflevector <8 x float> %2288, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2294 = shufflevector <16 x float> %2292, <16 x float> %2293, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !127
  %2295 = shufflevector <4 x float> %2287, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2296 = shufflevector <16 x float> %2294, <16 x float> %2295, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !127
  %2297 = shufflevector <2 x float> %2286, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2298 = shufflevector <16 x float> %2296, <16 x float> %2297, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !127
  %2299 = shufflevector <16 x float> %2298, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !127
  %2300 = shufflevector <8 x float> %2276, <8 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !127
  %2301 = shufflevector <8 x float> %2276, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2302 = shufflevector <32 x float> %2301, <32 x float> %2300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 62, i32 63>, !dbg !127
  %2303 = shufflevector <8 x float> %2277, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2304 = shufflevector <32 x float> %2302, <32 x float> %2303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !127
  %2305 = shufflevector <4 x float> %2278, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2306 = shufflevector <32 x float> %2304, <32 x float> %2305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !127
  %2307 = shufflevector <4 x float> %2281, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2308 = shufflevector <32 x float> %2306, <32 x float> %2307, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 30, i32 31>, !dbg !127
  %2309 = shufflevector <2 x float> %2279, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2310 = shufflevector <32 x float> %2308, <32 x float> %2309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !127
  %2311 = shufflevector <2 x float> %2280, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2312 = shufflevector <32 x float> %2310, <32 x float> %2311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 32, i32 33, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !127
  %2313 = shufflevector <2 x float> %2282, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2314 = shufflevector <32 x float> %2312, <32 x float> %2313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 30, i32 31>, !dbg !127
  %2315 = fmul <32 x float> %2299, %2314, !dbg !127
  %2316 = shufflevector <2 x float> %2215, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2317 = shufflevector <8 x float> %2291, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2318 = shufflevector <16 x float> %2316, <16 x float> %2317, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !128
  %2319 = shufflevector <4 x float> %2290, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2320 = shufflevector <16 x float> %2318, <16 x float> %2319, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !128
  %2321 = shufflevector <2 x float> %2289, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %2322 = shufflevector <16 x float> %2320, <16 x float> %2321, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !128
  %2323 = shufflevector <16 x float> %2322, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !128
  %2324 = fadd <32 x float> %2323, %2315, !dbg !128
  %2325 = extractelement <32 x float> %2324, i64 2, !dbg !129
  %2326 = fcmp olt float %1870, %2325, !dbg !130
  %2327 = extractelement <32 x float> %2324, i64 3, !dbg !129
  %2328 = fcmp olt float %1871, %2327, !dbg !130
  %2329 = extractelement <32 x float> %2324, i64 4, !dbg !129
  %2330 = fcmp olt float %1872, %2329, !dbg !130
  %2331 = extractelement <32 x float> %2324, i64 5, !dbg !129
  %2332 = fcmp olt float %1873, %2331, !dbg !130
  %2333 = extractelement <32 x float> %2324, i64 6, !dbg !129
  %2334 = fcmp olt float %1874, %2333, !dbg !130
  %2335 = extractelement <32 x float> %2324, i64 7, !dbg !129
  %2336 = fcmp olt float %1875, %2335, !dbg !130
  %2337 = extractelement <32 x float> %2324, i64 8, !dbg !129
  %2338 = extractelement <32 x float> %2324, i64 9, !dbg !129
  %2339 = extractelement <32 x float> %2324, i64 10, !dbg !129
  %2340 = extractelement <32 x float> %2324, i64 11, !dbg !129
  %2341 = extractelement <32 x float> %2324, i64 12, !dbg !129
  %2342 = extractelement <32 x float> %2324, i64 13, !dbg !129
  %2343 = extractelement <32 x float> %2324, i64 14, !dbg !129
  %2344 = extractelement <32 x float> %2324, i64 15, !dbg !129
  %2345 = extractelement <32 x float> %2324, i64 16, !dbg !129
  %2346 = extractelement <32 x float> %2324, i64 17, !dbg !129
  %2347 = extractelement <32 x float> %2324, i64 18, !dbg !129
  %2348 = extractelement <32 x float> %2324, i64 19, !dbg !129
  %2349 = extractelement <32 x float> %2324, i64 20, !dbg !129
  %2350 = extractelement <32 x float> %2324, i64 21, !dbg !129
  %2351 = extractelement <32 x float> %2324, i64 22, !dbg !129
  %2352 = extractelement <32 x float> %2324, i64 23, !dbg !129
  %2353 = extractelement <32 x float> %2324, i64 24, !dbg !129
  %2354 = extractelement <32 x float> %2324, i64 25, !dbg !129
  %2355 = extractelement <32 x float> %2324, i64 26, !dbg !129
  %2356 = extractelement <32 x float> %2324, i64 27, !dbg !129
  %2357 = extractelement <32 x float> %2324, i64 28, !dbg !129
  %2358 = extractelement <32 x float> %2324, i64 29, !dbg !129
  %2359 = or i1 %2196, %2326, !dbg !131
  %2360 = or i1 %2197, %2328, !dbg !131
  %2361 = or i1 %2198, %2330, !dbg !131
  %2362 = or i1 %2199, %2332, !dbg !131
  %2363 = or i1 %2200, %2334, !dbg !131
  %2364 = or i1 %2201, %2336, !dbg !131
  %2365 = select i1 %2359, float %1870, float %2325, !dbg !132
  %2366 = select i1 %2360, float %1871, float %2327, !dbg !132
  %2367 = select i1 %2361, float %1872, float %2329, !dbg !132
  %2368 = select i1 %2362, float %1873, float %2331, !dbg !132
  %2369 = select i1 %2363, float %1874, float %2333, !dbg !132
  %2370 = select i1 %2364, float %1875, float %2335, !dbg !132
  %2371 = shufflevector <32 x float> %2324, <32 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !130
  %2372 = fcmp olt <8 x float> %1879, %2371, !dbg !130
  %2373 = or <8 x i1> %2202, %2372, !dbg !131
  %2374 = select <8 x i1> %2373, <8 x float> %1879, <8 x float> %2371, !dbg !132
  %2375 = select i1 %28, float %2365, float %1870, !dbg !100
  %2376 = select i1 %28, float %2366, float %1871, !dbg !100
  %2377 = select i1 %28, float %2367, float %1872, !dbg !100
  %2378 = select i1 %28, float %2368, float %1873, !dbg !100
  %2379 = select i1 %28, float %2369, float %1874, !dbg !100
  %2380 = select i1 %28, float %2370, float %1875, !dbg !100
  %2381 = select <8 x i1> %1868, <8 x float> %2374, <8 x float> %1879, !dbg !100
  %2382 = load <2 x float>, ptr addrspace(3) %152, align 16, !dbg !117
  %2383 = fmul <2 x float> %2214, %2382, !dbg !127
  %2384 = fadd <2 x float> %2215, %2383, !dbg !128
  %2385 = extractelement <2 x float> %2384, i64 0, !dbg !129
  %2386 = extractelement <2 x float> %2384, i64 1, !dbg !129
  %2387 = shufflevector <2 x float> %2384, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !130
  %2388 = shufflevector <32 x float> %2387, <32 x float> %2324, <16 x i32> <i32 1, i32 0, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48>, !dbg !130
  %2389 = fcmp olt <16 x float> %1878, %2388, !dbg !130
  %2390 = or <16 x i1> %2203, %2389, !dbg !131
  %2391 = select <16 x i1> %2390, <16 x float> %1878, <16 x float> %2388, !dbg !132
  %2392 = fcmp ogt <32 x float> %1877, %2324, !dbg !133
  %2393 = fcmp olt <32 x float> %1877, %2324, !dbg !133
  %2394 = shufflevector <32 x i1> %2392, <32 x i1> %2393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 62, i32 63>, !dbg !133
  %2395 = or <32 x i1> %2195, %2394, !dbg !134
  %2396 = select <32 x i1> %2395, <32 x float> %1877, <32 x float> %2324, !dbg !135
  %2397 = select <16 x i1> %1867, <16 x float> %2391, <16 x float> %1878, !dbg !100
  %2398 = fcmp ogt <2 x float> %1876, %2384, !dbg !133
  %2399 = or <2 x i1> %2204, %2398, !dbg !134
  %2400 = select <2 x i1> %2399, <2 x float> %1876, <2 x float> %2384, !dbg !135
  %2401 = select <2 x i1> %1866, <2 x float> %2400, <2 x float> %1876, !dbg !99
  %2402 = select <32 x i1> %26, <32 x float> %2396, <32 x float> %1877, !dbg !99
  %2403 = sext i32 %1893 to i64, !dbg !136
  %2404 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2403, !dbg !136
  %2405 = sext i32 %1895 to i64, !dbg !136
  %2406 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2405, !dbg !136
  %2407 = sext i32 %1896 to i64, !dbg !136
  %2408 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2407, !dbg !136
  %2409 = sext i32 %1897 to i64, !dbg !136
  %2410 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2409, !dbg !136
  %2411 = extractelement <32 x float> %2324, i64 0, !dbg !129
  %2412 = fptrunc float %2411 to bfloat, !dbg !129
  %2413 = extractelement <32 x float> %2324, i64 1, !dbg !129
  %2414 = fptrunc float %2413 to bfloat, !dbg !129
  %2415 = fptrunc float %2325 to bfloat, !dbg !129
  %2416 = fptrunc float %2327 to bfloat, !dbg !129
  %2417 = fptrunc float %2329 to bfloat, !dbg !129
  %2418 = fptrunc float %2331 to bfloat, !dbg !129
  %2419 = fptrunc float %2333 to bfloat, !dbg !129
  %2420 = fptrunc float %2335 to bfloat, !dbg !129
  %2421 = fptrunc float %2337 to bfloat, !dbg !129
  %2422 = fptrunc float %2338 to bfloat, !dbg !129
  %2423 = fptrunc float %2339 to bfloat, !dbg !129
  %2424 = fptrunc float %2340 to bfloat, !dbg !129
  %2425 = fptrunc float %2341 to bfloat, !dbg !129
  %2426 = fptrunc float %2342 to bfloat, !dbg !129
  %2427 = fptrunc float %2343 to bfloat, !dbg !129
  %2428 = fptrunc float %2344 to bfloat, !dbg !129
  %2429 = fptrunc float %2385 to bfloat, !dbg !129
  %2430 = fptrunc float %2386 to bfloat, !dbg !129
  %2431 = fptrunc float %2345 to bfloat, !dbg !129
  %2432 = fptrunc float %2346 to bfloat, !dbg !129
  %2433 = fptrunc float %2347 to bfloat, !dbg !129
  %2434 = fptrunc float %2348 to bfloat, !dbg !129
  %2435 = fptrunc float %2349 to bfloat, !dbg !129
  %2436 = fptrunc float %2350 to bfloat, !dbg !129
  %2437 = fptrunc float %2351 to bfloat, !dbg !129
  %2438 = fptrunc float %2352 to bfloat, !dbg !129
  %2439 = fptrunc float %2353 to bfloat, !dbg !129
  %2440 = fptrunc float %2354 to bfloat, !dbg !129
  %2441 = fptrunc float %2355 to bfloat, !dbg !129
  %2442 = fptrunc float %2356 to bfloat, !dbg !129
  %2443 = fptrunc float %2357 to bfloat, !dbg !129
  %2444 = fptrunc float %2358 to bfloat, !dbg !129
  %2445 = insertelement <2 x bfloat> poison, bfloat %2412, i64 0, !dbg !129
  %2446 = insertelement <2 x bfloat> %2445, bfloat %2414, i64 1, !dbg !129
  %2447 = bitcast <2 x bfloat> %2446 to i32, !dbg !129
  %2448 = insertelement <2 x bfloat> poison, bfloat %2415, i64 0, !dbg !129
  %2449 = insertelement <2 x bfloat> %2448, bfloat %2416, i64 1, !dbg !129
  %2450 = bitcast <2 x bfloat> %2449 to i32, !dbg !129
  %2451 = insertelement <2 x bfloat> poison, bfloat %2417, i64 0, !dbg !129
  %2452 = insertelement <2 x bfloat> %2451, bfloat %2418, i64 1, !dbg !129
  %2453 = bitcast <2 x bfloat> %2452 to i32, !dbg !129
  %2454 = insertelement <2 x bfloat> poison, bfloat %2419, i64 0, !dbg !129
  %2455 = insertelement <2 x bfloat> %2454, bfloat %2420, i64 1, !dbg !129
  %2456 = bitcast <2 x bfloat> %2455 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2447, i32 %2450, i32 %2453, i32 %2456, ptr addrspace(1) %2404, i1 %28) #5, !dbg !129
  %2457 = insertelement <2 x bfloat> poison, bfloat %2421, i64 0, !dbg !129
  %2458 = insertelement <2 x bfloat> %2457, bfloat %2422, i64 1, !dbg !129
  %2459 = bitcast <2 x bfloat> %2458 to i32, !dbg !129
  %2460 = insertelement <2 x bfloat> poison, bfloat %2423, i64 0, !dbg !129
  %2461 = insertelement <2 x bfloat> %2460, bfloat %2424, i64 1, !dbg !129
  %2462 = bitcast <2 x bfloat> %2461 to i32, !dbg !129
  %2463 = insertelement <2 x bfloat> poison, bfloat %2425, i64 0, !dbg !129
  %2464 = insertelement <2 x bfloat> %2463, bfloat %2426, i64 1, !dbg !129
  %2465 = bitcast <2 x bfloat> %2464 to i32, !dbg !129
  %2466 = insertelement <2 x bfloat> poison, bfloat %2427, i64 0, !dbg !129
  %2467 = insertelement <2 x bfloat> %2466, bfloat %2428, i64 1, !dbg !129
  %2468 = bitcast <2 x bfloat> %2467 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2459, i32 %2462, i32 %2465, i32 %2468, ptr addrspace(1) %2406, i1 %28) #5, !dbg !129
  %2469 = insertelement <2 x bfloat> poison, bfloat %2429, i64 0, !dbg !129
  %2470 = insertelement <2 x bfloat> %2469, bfloat %2430, i64 1, !dbg !129
  %2471 = bitcast <2 x bfloat> %2470 to i32, !dbg !129
  %2472 = insertelement <2 x bfloat> poison, bfloat %2431, i64 0, !dbg !129
  %2473 = insertelement <2 x bfloat> %2472, bfloat %2432, i64 1, !dbg !129
  %2474 = bitcast <2 x bfloat> %2473 to i32, !dbg !129
  %2475 = insertelement <2 x bfloat> poison, bfloat %2433, i64 0, !dbg !129
  %2476 = insertelement <2 x bfloat> %2475, bfloat %2434, i64 1, !dbg !129
  %2477 = bitcast <2 x bfloat> %2476 to i32, !dbg !129
  %2478 = insertelement <2 x bfloat> poison, bfloat %2435, i64 0, !dbg !129
  %2479 = insertelement <2 x bfloat> %2478, bfloat %2436, i64 1, !dbg !129
  %2480 = bitcast <2 x bfloat> %2479 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2471, i32 %2474, i32 %2477, i32 %2480, ptr addrspace(1) %2408, i1 %27) #5, !dbg !129
  %2481 = insertelement <2 x bfloat> poison, bfloat %2437, i64 0, !dbg !129
  %2482 = insertelement <2 x bfloat> %2481, bfloat %2438, i64 1, !dbg !129
  %2483 = bitcast <2 x bfloat> %2482 to i32, !dbg !129
  %2484 = insertelement <2 x bfloat> poison, bfloat %2439, i64 0, !dbg !129
  %2485 = insertelement <2 x bfloat> %2484, bfloat %2440, i64 1, !dbg !129
  %2486 = bitcast <2 x bfloat> %2485 to i32, !dbg !129
  %2487 = insertelement <2 x bfloat> poison, bfloat %2441, i64 0, !dbg !129
  %2488 = insertelement <2 x bfloat> %2487, bfloat %2442, i64 1, !dbg !129
  %2489 = bitcast <2 x bfloat> %2488 to i32, !dbg !129
  %2490 = insertelement <2 x bfloat> poison, bfloat %2443, i64 0, !dbg !129
  %2491 = insertelement <2 x bfloat> %2490, bfloat %2444, i64 1, !dbg !129
  %2492 = bitcast <2 x bfloat> %2491 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2483, i32 %2486, i32 %2489, i32 %2492, ptr addrspace(1) %2410, i1 %27) #5, !dbg !129
  %indvars.iv.next429 = add nuw nsw i64 %indvars.iv428, 1024, !dbg !98
  %2493 = icmp samesign ult i64 %indvars.iv428, 2048, !dbg !98
  br i1 %2493, label %1869, label %2494, !dbg !98

2494:                                             ; preds = %1869
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2495 = extractelement <32 x float> %2402, i64 30, !dbg !139
  %2496 = extractelement <32 x float> %2402, i64 31, !dbg !139
  %2497 = fcmp olt float %2495, %2496, !dbg !139
  %2498 = fcmp uno float %2495, 0.000000e+00, !dbg !140
  %2499 = or i1 %2497, %2498, !dbg !141
  %2500 = select i1 %2499, float %2495, float %2496, !dbg !142
  %2501 = fcmp olt float %2500, %2375, !dbg !139
  %2502 = fcmp uno float %2500, 0.000000e+00, !dbg !140
  %2503 = or i1 %2501, %2502, !dbg !141
  %2504 = select i1 %2503, float %2500, float %2375, !dbg !142
  %2505 = fcmp olt float %2504, %2376, !dbg !139
  %2506 = fcmp uno float %2504, 0.000000e+00, !dbg !140
  %2507 = or i1 %2505, %2506, !dbg !141
  %2508 = select i1 %2507, float %2504, float %2376, !dbg !142
  %2509 = fcmp olt float %2508, %2377, !dbg !139
  %2510 = fcmp uno float %2508, 0.000000e+00, !dbg !140
  %2511 = or i1 %2509, %2510, !dbg !141
  %2512 = select i1 %2511, float %2508, float %2377, !dbg !142
  %2513 = fcmp olt float %2512, %2378, !dbg !139
  %2514 = fcmp uno float %2512, 0.000000e+00, !dbg !140
  %2515 = or i1 %2513, %2514, !dbg !141
  %2516 = select i1 %2515, float %2512, float %2378, !dbg !142
  %2517 = fcmp olt float %2516, %2379, !dbg !139
  %2518 = fcmp uno float %2516, 0.000000e+00, !dbg !140
  %2519 = or i1 %2517, %2518, !dbg !141
  %2520 = select i1 %2519, float %2516, float %2379, !dbg !142
  %2521 = fcmp olt float %2520, %2380, !dbg !139
  %2522 = fcmp uno float %2520, 0.000000e+00, !dbg !140
  %2523 = or i1 %2521, %2522, !dbg !141
  %2524 = select i1 %2523, float %2520, float %2380, !dbg !142
  %2525 = extractelement <8 x float> %2381, i64 0, !dbg !139
  %2526 = fcmp olt float %2524, %2525, !dbg !139
  %2527 = fcmp uno float %2524, 0.000000e+00, !dbg !140
  %2528 = or i1 %2526, %2527, !dbg !141
  %2529 = select i1 %2528, float %2524, float %2525, !dbg !142
  %2530 = extractelement <8 x float> %2381, i64 1, !dbg !139
  %2531 = fcmp olt float %2529, %2530, !dbg !139
  %2532 = fcmp uno float %2529, 0.000000e+00, !dbg !140
  %2533 = or i1 %2531, %2532, !dbg !141
  %2534 = select i1 %2533, float %2529, float %2530, !dbg !142
  %2535 = extractelement <8 x float> %2381, i64 2, !dbg !139
  %2536 = fcmp olt float %2534, %2535, !dbg !139
  %2537 = fcmp uno float %2534, 0.000000e+00, !dbg !140
  %2538 = or i1 %2536, %2537, !dbg !141
  %2539 = select i1 %2538, float %2534, float %2535, !dbg !142
  %2540 = extractelement <8 x float> %2381, i64 3, !dbg !139
  %2541 = fcmp olt float %2539, %2540, !dbg !139
  %2542 = fcmp uno float %2539, 0.000000e+00, !dbg !140
  %2543 = or i1 %2541, %2542, !dbg !141
  %2544 = select i1 %2543, float %2539, float %2540, !dbg !142
  %2545 = extractelement <8 x float> %2381, i64 4, !dbg !139
  %2546 = fcmp olt float %2544, %2545, !dbg !139
  %2547 = fcmp uno float %2544, 0.000000e+00, !dbg !140
  %2548 = or i1 %2546, %2547, !dbg !141
  %2549 = select i1 %2548, float %2544, float %2545, !dbg !142
  %2550 = extractelement <8 x float> %2381, i64 5, !dbg !139
  %2551 = fcmp olt float %2549, %2550, !dbg !139
  %2552 = fcmp uno float %2549, 0.000000e+00, !dbg !140
  %2553 = or i1 %2551, %2552, !dbg !141
  %2554 = select i1 %2553, float %2549, float %2550, !dbg !142
  %2555 = extractelement <8 x float> %2381, i64 6, !dbg !139
  %2556 = fcmp olt float %2554, %2555, !dbg !139
  %2557 = fcmp uno float %2554, 0.000000e+00, !dbg !140
  %2558 = or i1 %2556, %2557, !dbg !141
  %2559 = select i1 %2558, float %2554, float %2555, !dbg !142
  %2560 = extractelement <8 x float> %2381, i64 7, !dbg !139
  %2561 = fcmp olt float %2559, %2560, !dbg !139
  %2562 = fcmp uno float %2559, 0.000000e+00, !dbg !140
  %2563 = or i1 %2561, %2562, !dbg !141
  %2564 = select i1 %2563, float %2559, float %2560, !dbg !142
  %2565 = extractelement <16 x float> %2397, i64 0, !dbg !139
  %2566 = extractelement <16 x float> %2397, i64 1, !dbg !139
  %2567 = fcmp olt float %2566, %2565, !dbg !139
  %2568 = fcmp uno float %2566, 0.000000e+00, !dbg !140
  %2569 = or i1 %2567, %2568, !dbg !141
  %2570 = select i1 %2569, float %2566, float %2565, !dbg !142
  %2571 = extractelement <16 x float> %2397, i64 15, !dbg !139
  %2572 = fcmp olt float %2570, %2571, !dbg !139
  %2573 = fcmp uno float %2570, 0.000000e+00, !dbg !140
  %2574 = or i1 %2572, %2573, !dbg !141
  %2575 = select i1 %2574, float %2570, float %2571, !dbg !142
  %2576 = extractelement <16 x float> %2397, i64 14, !dbg !139
  %2577 = fcmp olt float %2575, %2576, !dbg !139
  %2578 = fcmp uno float %2575, 0.000000e+00, !dbg !140
  %2579 = or i1 %2577, %2578, !dbg !141
  %2580 = select i1 %2579, float %2575, float %2576, !dbg !142
  %2581 = extractelement <16 x float> %2397, i64 13, !dbg !139
  %2582 = fcmp olt float %2580, %2581, !dbg !139
  %2583 = fcmp uno float %2580, 0.000000e+00, !dbg !140
  %2584 = or i1 %2582, %2583, !dbg !141
  %2585 = select i1 %2584, float %2580, float %2581, !dbg !142
  %2586 = extractelement <16 x float> %2397, i64 12, !dbg !139
  %2587 = fcmp olt float %2585, %2586, !dbg !139
  %2588 = fcmp uno float %2585, 0.000000e+00, !dbg !140
  %2589 = or i1 %2587, %2588, !dbg !141
  %2590 = select i1 %2589, float %2585, float %2586, !dbg !142
  %2591 = extractelement <16 x float> %2397, i64 11, !dbg !139
  %2592 = fcmp olt float %2590, %2591, !dbg !139
  %2593 = fcmp uno float %2590, 0.000000e+00, !dbg !140
  %2594 = or i1 %2592, %2593, !dbg !141
  %2595 = select i1 %2594, float %2590, float %2591, !dbg !142
  %2596 = extractelement <16 x float> %2397, i64 10, !dbg !139
  %2597 = fcmp olt float %2595, %2596, !dbg !139
  %2598 = fcmp uno float %2595, 0.000000e+00, !dbg !140
  %2599 = or i1 %2597, %2598, !dbg !141
  %2600 = select i1 %2599, float %2595, float %2596, !dbg !142
  %2601 = extractelement <16 x float> %2397, i64 9, !dbg !139
  %2602 = fcmp olt float %2600, %2601, !dbg !139
  %2603 = fcmp uno float %2600, 0.000000e+00, !dbg !140
  %2604 = or i1 %2602, %2603, !dbg !141
  %2605 = select i1 %2604, float %2600, float %2601, !dbg !142
  %2606 = extractelement <16 x float> %2397, i64 8, !dbg !139
  %2607 = fcmp olt float %2605, %2606, !dbg !139
  %2608 = fcmp uno float %2605, 0.000000e+00, !dbg !140
  %2609 = or i1 %2607, %2608, !dbg !141
  %2610 = select i1 %2609, float %2605, float %2606, !dbg !142
  %2611 = extractelement <16 x float> %2397, i64 7, !dbg !139
  %2612 = fcmp olt float %2610, %2611, !dbg !139
  %2613 = fcmp uno float %2610, 0.000000e+00, !dbg !140
  %2614 = or i1 %2612, %2613, !dbg !141
  %2615 = select i1 %2614, float %2610, float %2611, !dbg !142
  %2616 = extractelement <16 x float> %2397, i64 6, !dbg !139
  %2617 = fcmp olt float %2615, %2616, !dbg !139
  %2618 = fcmp uno float %2615, 0.000000e+00, !dbg !140
  %2619 = or i1 %2617, %2618, !dbg !141
  %2620 = select i1 %2619, float %2615, float %2616, !dbg !142
  %2621 = extractelement <16 x float> %2397, i64 5, !dbg !139
  %2622 = fcmp olt float %2620, %2621, !dbg !139
  %2623 = fcmp uno float %2620, 0.000000e+00, !dbg !140
  %2624 = or i1 %2622, %2623, !dbg !141
  %2625 = select i1 %2624, float %2620, float %2621, !dbg !142
  %2626 = extractelement <16 x float> %2397, i64 4, !dbg !139
  %2627 = fcmp olt float %2625, %2626, !dbg !139
  %2628 = fcmp uno float %2625, 0.000000e+00, !dbg !140
  %2629 = or i1 %2627, %2628, !dbg !141
  %2630 = select i1 %2629, float %2625, float %2626, !dbg !142
  %2631 = extractelement <16 x float> %2397, i64 3, !dbg !139
  %2632 = fcmp olt float %2630, %2631, !dbg !139
  %2633 = fcmp uno float %2630, 0.000000e+00, !dbg !140
  %2634 = or i1 %2632, %2633, !dbg !141
  %2635 = select i1 %2634, float %2630, float %2631, !dbg !142
  %2636 = extractelement <16 x float> %2397, i64 2, !dbg !139
  %2637 = fcmp olt float %2635, %2636, !dbg !139
  %2638 = fcmp uno float %2635, 0.000000e+00, !dbg !140
  %2639 = or i1 %2637, %2638, !dbg !141
  %2640 = select i1 %2639, float %2635, float %2636, !dbg !142
  %2641 = bitcast float %2564 to i32, !dbg !137
  %2642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2641, i32 16, i32 31), !dbg !137
  %2643 = bitcast i32 %2642 to float, !dbg !137
  %2644 = fcmp olt float %2564, %2643, !dbg !139
  %2645 = fcmp uno float %2564, 0.000000e+00, !dbg !140
  %2646 = or i1 %2645, %2644, !dbg !141
  %2647 = select i1 %2646, float %2564, float %2643, !dbg !142
  %2648 = bitcast float %2647 to i32, !dbg !137
  %2649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2648, i32 8, i32 31), !dbg !137
  %2650 = bitcast i32 %2649 to float, !dbg !137
  %2651 = fcmp olt float %2647, %2650, !dbg !139
  %2652 = fcmp uno float %2647, 0.000000e+00, !dbg !140
  %2653 = or i1 %2651, %2652, !dbg !141
  %2654 = select i1 %2653, float %2647, float %2650, !dbg !142
  %2655 = bitcast float %2654 to i32, !dbg !137
  %2656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2655, i32 4, i32 31), !dbg !137
  %2657 = bitcast i32 %2656 to float, !dbg !137
  %2658 = fcmp olt float %2654, %2657, !dbg !139
  %2659 = fcmp uno float %2654, 0.000000e+00, !dbg !140
  %2660 = or i1 %2658, %2659, !dbg !141
  %2661 = select i1 %2660, float %2654, float %2657, !dbg !142
  %2662 = bitcast float %2661 to i32, !dbg !137
  %2663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2662, i32 2, i32 31), !dbg !137
  %2664 = bitcast i32 %2663 to float, !dbg !137
  %2665 = fcmp olt float %2661, %2664, !dbg !139
  %2666 = fcmp uno float %2661, 0.000000e+00, !dbg !140
  %2667 = or i1 %2665, %2666, !dbg !141
  %2668 = select i1 %2667, float %2661, float %2664, !dbg !142
  %2669 = bitcast float %2668 to i32, !dbg !137
  %2670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2669, i32 1, i32 31), !dbg !137
  %2671 = bitcast i32 %2670 to float, !dbg !137
  %2672 = fcmp olt float %2668, %2671, !dbg !139
  %2673 = fcmp uno float %2668, 0.000000e+00, !dbg !140
  %2674 = or i1 %2672, %2673, !dbg !141
  %2675 = bitcast float %2640 to i32, !dbg !137
  %2676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2675, i32 16, i32 31), !dbg !137
  %2677 = bitcast i32 %2676 to float, !dbg !137
  %2678 = fcmp olt float %2640, %2677, !dbg !139
  %2679 = fcmp uno float %2640, 0.000000e+00, !dbg !140
  %2680 = or i1 %2679, %2678, !dbg !141
  %2681 = select i1 %2680, float %2640, float %2677, !dbg !142
  %2682 = bitcast float %2681 to i32, !dbg !137
  %2683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2682, i32 8, i32 31), !dbg !137
  %2684 = bitcast i32 %2683 to float, !dbg !137
  %2685 = fcmp olt float %2681, %2684, !dbg !139
  %2686 = fcmp uno float %2681, 0.000000e+00, !dbg !140
  %2687 = or i1 %2685, %2686, !dbg !141
  %2688 = select i1 %2687, float %2681, float %2684, !dbg !142
  %2689 = bitcast float %2688 to i32, !dbg !137
  %2690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2689, i32 4, i32 31), !dbg !137
  %2691 = bitcast i32 %2690 to float, !dbg !137
  %2692 = fcmp olt float %2688, %2691, !dbg !139
  %2693 = fcmp uno float %2688, 0.000000e+00, !dbg !140
  %2694 = or i1 %2692, %2693, !dbg !141
  %2695 = select i1 %2694, float %2688, float %2691, !dbg !142
  %2696 = bitcast float %2695 to i32, !dbg !137
  %2697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2696, i32 2, i32 31), !dbg !137
  %2698 = bitcast i32 %2697 to float, !dbg !137
  %2699 = fcmp olt float %2695, %2698, !dbg !139
  %2700 = fcmp uno float %2695, 0.000000e+00, !dbg !140
  %2701 = or i1 %2699, %2700, !dbg !141
  %2702 = select i1 %2701, float %2695, float %2698, !dbg !142
  %2703 = bitcast float %2702 to i32, !dbg !137
  %2704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2703, i32 1, i32 31), !dbg !137
  %2705 = bitcast i32 %2704 to float, !dbg !137
  %2706 = fcmp olt float %2702, %2705, !dbg !139
  %2707 = fcmp uno float %2702, 0.000000e+00, !dbg !140
  %2708 = or i1 %2706, %2707, !dbg !141
  %2709 = select i1 %2674, i32 %2669, i32 %2670, !dbg !142
  %2710 = insertelement <1 x i32> poison, i32 %2709, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1788, <1 x i32> %2710, i1 %1787) #5, !dbg !137
  %2711 = select i1 %2708, i32 %2703, i32 %2704, !dbg !142
  %2712 = insertelement <1 x i32> poison, i32 %2711, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1795, <1 x i32> %2712, i1 %1787) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2713 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1802, i1 %1801) #5, !dbg !137
  %2714 = bitcast i32 %2713 to float, !dbg !137
  %2715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2713, i32 1, i32 31), !dbg !137
  %2716 = bitcast i32 %2715 to float, !dbg !137
  %2717 = fcmp olt float %2714, %2716, !dbg !139
  %2718 = fcmp uno float %2714, 0.000000e+00, !dbg !140
  %2719 = or i1 %2718, %2717, !dbg !141
  %2720 = select i1 %2719, i32 %2713, i32 %2715, !dbg !142
  %2721 = insertelement <1 x i32> poison, i32 %2720, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1802, <1 x i32> %2721, i1 %1830) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %2722 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  %2723 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2724 = bitcast float %2722 to i32, !dbg !143
  %2725 = bitcast float %2723 to i32, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2724, i32 %2725, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2726 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !143
  %2727 = load float, ptr addrspace(3) %2726, align 4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %2728 = extractelement <32 x float> %2402, i64 0, !dbg !146
  %2729 = extractelement <32 x float> %2402, i64 1, !dbg !146
  %2730 = fcmp ogt float %2728, %2729, !dbg !146
  %2731 = fcmp uno float %2728, 0.000000e+00, !dbg !147
  %2732 = or i1 %2730, %2731, !dbg !148
  %2733 = select i1 %2732, float %2728, float %2729, !dbg !149
  %2734 = extractelement <32 x float> %2402, i64 2, !dbg !146
  %2735 = fcmp ogt float %2733, %2734, !dbg !146
  %2736 = fcmp uno float %2733, 0.000000e+00, !dbg !147
  %2737 = or i1 %2735, %2736, !dbg !148
  %2738 = select i1 %2737, float %2733, float %2734, !dbg !149
  %2739 = extractelement <32 x float> %2402, i64 3, !dbg !146
  %2740 = fcmp ogt float %2738, %2739, !dbg !146
  %2741 = fcmp uno float %2738, 0.000000e+00, !dbg !147
  %2742 = or i1 %2740, %2741, !dbg !148
  %2743 = select i1 %2742, float %2738, float %2739, !dbg !149
  %2744 = extractelement <32 x float> %2402, i64 4, !dbg !146
  %2745 = fcmp ogt float %2743, %2744, !dbg !146
  %2746 = fcmp uno float %2743, 0.000000e+00, !dbg !147
  %2747 = or i1 %2745, %2746, !dbg !148
  %2748 = select i1 %2747, float %2743, float %2744, !dbg !149
  %2749 = extractelement <32 x float> %2402, i64 5, !dbg !146
  %2750 = fcmp ogt float %2748, %2749, !dbg !146
  %2751 = fcmp uno float %2748, 0.000000e+00, !dbg !147
  %2752 = or i1 %2750, %2751, !dbg !148
  %2753 = select i1 %2752, float %2748, float %2749, !dbg !149
  %2754 = extractelement <32 x float> %2402, i64 6, !dbg !146
  %2755 = fcmp ogt float %2753, %2754, !dbg !146
  %2756 = fcmp uno float %2753, 0.000000e+00, !dbg !147
  %2757 = or i1 %2755, %2756, !dbg !148
  %2758 = select i1 %2757, float %2753, float %2754, !dbg !149
  %2759 = extractelement <32 x float> %2402, i64 7, !dbg !146
  %2760 = fcmp ogt float %2758, %2759, !dbg !146
  %2761 = fcmp uno float %2758, 0.000000e+00, !dbg !147
  %2762 = or i1 %2760, %2761, !dbg !148
  %2763 = select i1 %2762, float %2758, float %2759, !dbg !149
  %2764 = extractelement <32 x float> %2402, i64 8, !dbg !146
  %2765 = fcmp ogt float %2763, %2764, !dbg !146
  %2766 = fcmp uno float %2763, 0.000000e+00, !dbg !147
  %2767 = or i1 %2765, %2766, !dbg !148
  %2768 = select i1 %2767, float %2763, float %2764, !dbg !149
  %2769 = extractelement <32 x float> %2402, i64 9, !dbg !146
  %2770 = fcmp ogt float %2768, %2769, !dbg !146
  %2771 = fcmp uno float %2768, 0.000000e+00, !dbg !147
  %2772 = or i1 %2770, %2771, !dbg !148
  %2773 = select i1 %2772, float %2768, float %2769, !dbg !149
  %2774 = extractelement <32 x float> %2402, i64 10, !dbg !146
  %2775 = fcmp ogt float %2773, %2774, !dbg !146
  %2776 = fcmp uno float %2773, 0.000000e+00, !dbg !147
  %2777 = or i1 %2775, %2776, !dbg !148
  %2778 = select i1 %2777, float %2773, float %2774, !dbg !149
  %2779 = extractelement <32 x float> %2402, i64 11, !dbg !146
  %2780 = fcmp ogt float %2778, %2779, !dbg !146
  %2781 = fcmp uno float %2778, 0.000000e+00, !dbg !147
  %2782 = or i1 %2780, %2781, !dbg !148
  %2783 = select i1 %2782, float %2778, float %2779, !dbg !149
  %2784 = extractelement <32 x float> %2402, i64 12, !dbg !146
  %2785 = fcmp ogt float %2783, %2784, !dbg !146
  %2786 = fcmp uno float %2783, 0.000000e+00, !dbg !147
  %2787 = or i1 %2785, %2786, !dbg !148
  %2788 = select i1 %2787, float %2783, float %2784, !dbg !149
  %2789 = extractelement <32 x float> %2402, i64 13, !dbg !146
  %2790 = fcmp ogt float %2788, %2789, !dbg !146
  %2791 = fcmp uno float %2788, 0.000000e+00, !dbg !147
  %2792 = or i1 %2790, %2791, !dbg !148
  %2793 = select i1 %2792, float %2788, float %2789, !dbg !149
  %2794 = extractelement <32 x float> %2402, i64 14, !dbg !146
  %2795 = fcmp ogt float %2793, %2794, !dbg !146
  %2796 = fcmp uno float %2793, 0.000000e+00, !dbg !147
  %2797 = or i1 %2795, %2796, !dbg !148
  %2798 = select i1 %2797, float %2793, float %2794, !dbg !149
  %2799 = extractelement <32 x float> %2402, i64 15, !dbg !146
  %2800 = fcmp ogt float %2798, %2799, !dbg !146
  %2801 = fcmp uno float %2798, 0.000000e+00, !dbg !147
  %2802 = or i1 %2800, %2801, !dbg !148
  %2803 = select i1 %2802, float %2798, float %2799, !dbg !149
  %2804 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %2401, <2 x i32> <i32 0, i32 2>, !dbg !146
  %2805 = fcmp ogt <2 x float> %2804, %2401, !dbg !146
  %2806 = fcmp uno <2 x float> %2804, %2401, !dbg !146
  %shift = shufflevector <2 x i1> %2805, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !148
  %2807 = or <2 x i1> %shift, %2806, !dbg !148
  %2808 = extractelement <2 x i1> %2807, i64 0, !dbg !148
  %2809 = extractelement <2 x float> %2401, i64 0, !dbg !149
  %2810 = extractelement <2 x float> %2401, i64 1, !dbg !149
  %2811 = select i1 %2808, float %2809, float %2810, !dbg !149
  %2812 = extractelement <32 x float> %2402, i64 16, !dbg !146
  %2813 = fcmp ogt float %2811, %2812, !dbg !146
  %2814 = fcmp uno float %2811, 0.000000e+00, !dbg !147
  %2815 = or i1 %2813, %2814, !dbg !148
  %2816 = select i1 %2815, float %2811, float %2812, !dbg !149
  %2817 = extractelement <32 x float> %2402, i64 17, !dbg !146
  %2818 = fcmp ogt float %2816, %2817, !dbg !146
  %2819 = fcmp uno float %2816, 0.000000e+00, !dbg !147
  %2820 = or i1 %2818, %2819, !dbg !148
  %2821 = select i1 %2820, float %2816, float %2817, !dbg !149
  %2822 = extractelement <32 x float> %2402, i64 18, !dbg !146
  %2823 = fcmp ogt float %2821, %2822, !dbg !146
  %2824 = fcmp uno float %2821, 0.000000e+00, !dbg !147
  %2825 = or i1 %2823, %2824, !dbg !148
  %2826 = select i1 %2825, float %2821, float %2822, !dbg !149
  %2827 = extractelement <32 x float> %2402, i64 19, !dbg !146
  %2828 = fcmp ogt float %2826, %2827, !dbg !146
  %2829 = fcmp uno float %2826, 0.000000e+00, !dbg !147
  %2830 = or i1 %2828, %2829, !dbg !148
  %2831 = select i1 %2830, float %2826, float %2827, !dbg !149
  %2832 = extractelement <32 x float> %2402, i64 20, !dbg !146
  %2833 = fcmp ogt float %2831, %2832, !dbg !146
  %2834 = fcmp uno float %2831, 0.000000e+00, !dbg !147
  %2835 = or i1 %2833, %2834, !dbg !148
  %2836 = select i1 %2835, float %2831, float %2832, !dbg !149
  %2837 = extractelement <32 x float> %2402, i64 21, !dbg !146
  %2838 = fcmp ogt float %2836, %2837, !dbg !146
  %2839 = fcmp uno float %2836, 0.000000e+00, !dbg !147
  %2840 = or i1 %2838, %2839, !dbg !148
  %2841 = select i1 %2840, float %2836, float %2837, !dbg !149
  %2842 = extractelement <32 x float> %2402, i64 22, !dbg !146
  %2843 = fcmp ogt float %2841, %2842, !dbg !146
  %2844 = fcmp uno float %2841, 0.000000e+00, !dbg !147
  %2845 = or i1 %2843, %2844, !dbg !148
  %2846 = select i1 %2845, float %2841, float %2842, !dbg !149
  %2847 = extractelement <32 x float> %2402, i64 23, !dbg !146
  %2848 = fcmp ogt float %2846, %2847, !dbg !146
  %2849 = fcmp uno float %2846, 0.000000e+00, !dbg !147
  %2850 = or i1 %2848, %2849, !dbg !148
  %2851 = select i1 %2850, float %2846, float %2847, !dbg !149
  %2852 = extractelement <32 x float> %2402, i64 24, !dbg !146
  %2853 = fcmp ogt float %2851, %2852, !dbg !146
  %2854 = fcmp uno float %2851, 0.000000e+00, !dbg !147
  %2855 = or i1 %2853, %2854, !dbg !148
  %2856 = select i1 %2855, float %2851, float %2852, !dbg !149
  %2857 = extractelement <32 x float> %2402, i64 25, !dbg !146
  %2858 = fcmp ogt float %2856, %2857, !dbg !146
  %2859 = fcmp uno float %2856, 0.000000e+00, !dbg !147
  %2860 = or i1 %2858, %2859, !dbg !148
  %2861 = select i1 %2860, float %2856, float %2857, !dbg !149
  %2862 = extractelement <32 x float> %2402, i64 26, !dbg !146
  %2863 = fcmp ogt float %2861, %2862, !dbg !146
  %2864 = fcmp uno float %2861, 0.000000e+00, !dbg !147
  %2865 = or i1 %2863, %2864, !dbg !148
  %2866 = select i1 %2865, float %2861, float %2862, !dbg !149
  %2867 = extractelement <32 x float> %2402, i64 27, !dbg !146
  %2868 = fcmp ogt float %2866, %2867, !dbg !146
  %2869 = fcmp uno float %2866, 0.000000e+00, !dbg !147
  %2870 = or i1 %2868, %2869, !dbg !148
  %2871 = select i1 %2870, float %2866, float %2867, !dbg !149
  %2872 = extractelement <32 x float> %2402, i64 28, !dbg !146
  %2873 = fcmp ogt float %2871, %2872, !dbg !146
  %2874 = fcmp uno float %2871, 0.000000e+00, !dbg !147
  %2875 = or i1 %2873, %2874, !dbg !148
  %2876 = select i1 %2875, float %2871, float %2872, !dbg !149
  %2877 = extractelement <32 x float> %2402, i64 29, !dbg !146
  %2878 = fcmp ogt float %2876, %2877, !dbg !146
  %2879 = fcmp uno float %2876, 0.000000e+00, !dbg !147
  %2880 = or i1 %2878, %2879, !dbg !148
  %2881 = select i1 %2880, float %2876, float %2877, !dbg !149
  %2882 = bitcast float %2803 to i32, !dbg !144
  %2883 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2882, i32 16, i32 31), !dbg !144
  %2884 = bitcast i32 %2883 to float, !dbg !144
  %2885 = fcmp ogt float %2803, %2884, !dbg !146
  %2886 = fcmp uno float %2803, 0.000000e+00, !dbg !147
  %2887 = or i1 %2886, %2885, !dbg !148
  %2888 = select i1 %2887, float %2803, float %2884, !dbg !149
  %2889 = bitcast float %2888 to i32, !dbg !144
  %2890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2889, i32 8, i32 31), !dbg !144
  %2891 = bitcast i32 %2890 to float, !dbg !144
  %2892 = fcmp ogt float %2888, %2891, !dbg !146
  %2893 = fcmp uno float %2888, 0.000000e+00, !dbg !147
  %2894 = or i1 %2892, %2893, !dbg !148
  %2895 = select i1 %2894, float %2888, float %2891, !dbg !149
  %2896 = bitcast float %2895 to i32, !dbg !144
  %2897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2896, i32 4, i32 31), !dbg !144
  %2898 = bitcast i32 %2897 to float, !dbg !144
  %2899 = fcmp ogt float %2895, %2898, !dbg !146
  %2900 = fcmp uno float %2895, 0.000000e+00, !dbg !147
  %2901 = or i1 %2899, %2900, !dbg !148
  %2902 = select i1 %2901, float %2895, float %2898, !dbg !149
  %2903 = bitcast float %2902 to i32, !dbg !144
  %2904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2903, i32 2, i32 31), !dbg !144
  %2905 = bitcast i32 %2904 to float, !dbg !144
  %2906 = fcmp ogt float %2902, %2905, !dbg !146
  %2907 = fcmp uno float %2902, 0.000000e+00, !dbg !147
  %2908 = or i1 %2906, %2907, !dbg !148
  %2909 = select i1 %2908, float %2902, float %2905, !dbg !149
  %2910 = bitcast float %2909 to i32, !dbg !144
  %2911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2910, i32 1, i32 31), !dbg !144
  %2912 = bitcast i32 %2911 to float, !dbg !144
  %2913 = fcmp ogt float %2909, %2912, !dbg !146
  %2914 = fcmp uno float %2909, 0.000000e+00, !dbg !147
  %2915 = or i1 %2913, %2914, !dbg !148
  %2916 = bitcast float %2881 to i32, !dbg !144
  %2917 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2916, i32 16, i32 31), !dbg !144
  %2918 = bitcast i32 %2917 to float, !dbg !144
  %2919 = fcmp ogt float %2881, %2918, !dbg !146
  %2920 = fcmp uno float %2881, 0.000000e+00, !dbg !147
  %2921 = or i1 %2920, %2919, !dbg !148
  %2922 = select i1 %2921, float %2881, float %2918, !dbg !149
  %2923 = bitcast float %2922 to i32, !dbg !144
  %2924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2923, i32 8, i32 31), !dbg !144
  %2925 = bitcast i32 %2924 to float, !dbg !144
  %2926 = fcmp ogt float %2922, %2925, !dbg !146
  %2927 = fcmp uno float %2922, 0.000000e+00, !dbg !147
  %2928 = or i1 %2926, %2927, !dbg !148
  %2929 = select i1 %2928, float %2922, float %2925, !dbg !149
  %2930 = bitcast float %2929 to i32, !dbg !144
  %2931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2930, i32 4, i32 31), !dbg !144
  %2932 = bitcast i32 %2931 to float, !dbg !144
  %2933 = fcmp ogt float %2929, %2932, !dbg !146
  %2934 = fcmp uno float %2929, 0.000000e+00, !dbg !147
  %2935 = or i1 %2933, %2934, !dbg !148
  %2936 = select i1 %2935, float %2929, float %2932, !dbg !149
  %2937 = bitcast float %2936 to i32, !dbg !144
  %2938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2937, i32 2, i32 31), !dbg !144
  %2939 = bitcast i32 %2938 to float, !dbg !144
  %2940 = fcmp ogt float %2936, %2939, !dbg !146
  %2941 = fcmp uno float %2936, 0.000000e+00, !dbg !147
  %2942 = or i1 %2940, %2941, !dbg !148
  %2943 = select i1 %2942, float %2936, float %2939, !dbg !149
  %2944 = bitcast float %2943 to i32, !dbg !144
  %2945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2944, i32 1, i32 31), !dbg !144
  %2946 = bitcast i32 %2945 to float, !dbg !144
  %2947 = fcmp ogt float %2943, %2946, !dbg !146
  %2948 = fcmp uno float %2943, 0.000000e+00, !dbg !147
  %2949 = or i1 %2947, %2948, !dbg !148
  %2950 = select i1 %2915, i32 %2910, i32 %2911, !dbg !149
  %2951 = insertelement <1 x i32> poison, i32 %2950, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1788, <1 x i32> %2951, i1 %1787) #5, !dbg !144
  %2952 = select i1 %2949, i32 %2944, i32 %2945, !dbg !149
  %2953 = insertelement <1 x i32> poison, i32 %2952, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1795, <1 x i32> %2953, i1 %1787) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %2954 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1802, i1 %1801) #5, !dbg !144
  %2955 = bitcast i32 %2954 to float, !dbg !144
  %2956 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2954, i32 1, i32 31), !dbg !144
  %2957 = bitcast i32 %2956 to float, !dbg !144
  %2958 = fcmp ogt float %2955, %2957, !dbg !146
  %2959 = fcmp uno float %2955, 0.000000e+00, !dbg !147
  %2960 = or i1 %2959, %2958, !dbg !148
  %2961 = select i1 %2960, i32 %2954, i32 %2956, !dbg !149
  %2962 = insertelement <1 x i32> poison, i32 %2961, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1802, <1 x i32> %2962, i1 %1830) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %2963 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !144
  %2964 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %2965 = bitcast float %2963 to i32, !dbg !150
  %2966 = bitcast float %2964 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2965, i32 %2966, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %2967 = load float, ptr addrspace(3) %2726, align 4, !dbg !150
  %2968 = sext i32 %22 to i64, !dbg !151
  %2969 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2968, !dbg !151
  %2970 = fptrunc float %2727 to bfloat, !dbg !143
  %2971 = and i32 %19, 62, !dbg !143
  %2972 = icmp eq i32 %2971, 0, !dbg !143
  %2973 = bitcast bfloat %2970 to i16, !dbg !143
  %2974 = and i1 %2972, %29, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2973, ptr addrspace(1) %2969, i1 %2974) #5, !dbg !143
  %2975 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2968, !dbg !152
  %2976 = fptrunc float %2967 to bfloat, !dbg !150
  %2977 = bitcast bfloat %2976 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2977, ptr addrspace(1) %2975, i1 %2974) #5, !dbg !150
  %.inv6 = fcmp oge float %2722, 0.000000e+00, !dbg !153
  %2978 = select i1 %.inv6, float 0.000000e+00, float %2722, !dbg !153
  %.inv7 = fcmp oge float %2723, 0.000000e+00, !dbg !153
  %2979 = select i1 %.inv7, float 0.000000e+00, float %2723, !dbg !153
  %2980 = fsub float 0.000000e+00, %2978, !dbg !155
  %2981 = fsub float 0.000000e+00, %2979, !dbg !155
  %.inv8 = fcmp ole float %2963, 0.000000e+00, !dbg !156
  %2982 = select i1 %.inv8, float 0.000000e+00, float %2963, !dbg !156
  %.inv9 = fcmp ole float %2964, 0.000000e+00, !dbg !156
  %2983 = select i1 %.inv9, float 0.000000e+00, float %2964, !dbg !156
  %2984 = fcmp ogt float %2980, %2982, !dbg !158
  %2985 = fcmp ogt float %2981, %2983, !dbg !158
  %2986 = fcmp uno float %2980, 0.000000e+00, !dbg !160
  %2987 = fcmp uno float %2981, 0.000000e+00, !dbg !160
  %2988 = or i1 %2986, %2984, !dbg !161
  %2989 = or i1 %2987, %2985, !dbg !161
  %2990 = select i1 %2988, float %2980, float %2982, !dbg !162
  %2991 = select i1 %2989, float %2981, float %2983, !dbg !162
  %2992 = fmul float %2990, 0x3F80204080000000, !dbg !163
  %2993 = fmul float %2991, 0x3F80204080000000, !dbg !163
  %2994 = fcmp ogt float %2992, 0x3EE4F8B580000000, !dbg !164
  %2995 = fcmp ogt float %2993, 0x3EE4F8B580000000, !dbg !164
  %2996 = fcmp uno float %2992, 0.000000e+00, !dbg !166
  %2997 = fcmp uno float %2993, 0.000000e+00, !dbg !166
  %2998 = or i1 %2994, %2996, !dbg !167
  %2999 = or i1 %2995, %2997, !dbg !167
  %3000 = select i1 %2998, float %2992, float 0x3EE4F8B580000000, !dbg !168
  %3001 = select i1 %2999, float %2993, float 0x3EE4F8B580000000, !dbg !168
  %3002 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3000), !dbg !169
  %3003 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3001), !dbg !169
  br label %3004, !dbg !170

3004:                                             ; preds = %2494, %3004
  %indvars.iv430 = phi i64 [ 0, %2494 ], [ %indvars.iv.next431, %3004 ]
  %3005 = trunc i64 %indvars.iv430 to i32, !dbg !171
  %3006 = or disjoint i32 %36, %3005, !dbg !171
  %3007 = add i32 %3006, %114, !dbg !171
  %3008 = trunc i64 %indvars.iv430 to i32, !dbg !171
  %3009 = or disjoint i32 %38, %3008, !dbg !171
  %3010 = add i32 %3009, %114, !dbg !171
  %3011 = add i32 %3006, %115, !dbg !171
  %3012 = add i32 %3009, %115, !dbg !171
  %3013 = sext i32 %3007 to i64, !dbg !172
  %3014 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3013, !dbg !172
  %3015 = sext i32 %3010 to i64, !dbg !172
  %3016 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3015, !dbg !172
  %3017 = sext i32 %3011 to i64, !dbg !172
  %3018 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3017, !dbg !172
  %3019 = sext i32 %3012 to i64, !dbg !172
  %3020 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3019, !dbg !172
  %3021 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3014, i1 %28) #5, !dbg !173
  %3022 = extractvalue { i32, i32, i32, i32 } %3021, 0, !dbg !173
  %3023 = bitcast i32 %3022 to <2 x bfloat>, !dbg !173
  %3024 = extractvalue { i32, i32, i32, i32 } %3021, 1, !dbg !173
  %3025 = bitcast i32 %3024 to <2 x bfloat>, !dbg !173
  %3026 = extractvalue { i32, i32, i32, i32 } %3021, 2, !dbg !173
  %3027 = bitcast i32 %3026 to <2 x bfloat>, !dbg !173
  %3028 = extractvalue { i32, i32, i32, i32 } %3021, 3, !dbg !173
  %3029 = bitcast i32 %3028 to <2 x bfloat>, !dbg !173
  %3030 = extractelement <2 x bfloat> %3023, i64 0, !dbg !173
  %3031 = extractelement <2 x bfloat> %3023, i64 1, !dbg !173
  %3032 = extractelement <2 x bfloat> %3025, i64 0, !dbg !173
  %3033 = extractelement <2 x bfloat> %3025, i64 1, !dbg !173
  %3034 = extractelement <2 x bfloat> %3027, i64 0, !dbg !173
  %3035 = extractelement <2 x bfloat> %3027, i64 1, !dbg !173
  %3036 = extractelement <2 x bfloat> %3029, i64 0, !dbg !173
  %3037 = extractelement <2 x bfloat> %3029, i64 1, !dbg !173
  %3038 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3016, i1 %28) #5, !dbg !173
  %3039 = extractvalue { i32, i32, i32, i32 } %3038, 0, !dbg !173
  %3040 = bitcast i32 %3039 to <2 x bfloat>, !dbg !173
  %3041 = extractvalue { i32, i32, i32, i32 } %3038, 1, !dbg !173
  %3042 = bitcast i32 %3041 to <2 x bfloat>, !dbg !173
  %3043 = extractvalue { i32, i32, i32, i32 } %3038, 2, !dbg !173
  %3044 = bitcast i32 %3043 to <2 x bfloat>, !dbg !173
  %3045 = extractvalue { i32, i32, i32, i32 } %3038, 3, !dbg !173
  %3046 = bitcast i32 %3045 to <2 x bfloat>, !dbg !173
  %3047 = extractelement <2 x bfloat> %3040, i64 0, !dbg !173
  %3048 = extractelement <2 x bfloat> %3040, i64 1, !dbg !173
  %3049 = extractelement <2 x bfloat> %3042, i64 0, !dbg !173
  %3050 = extractelement <2 x bfloat> %3042, i64 1, !dbg !173
  %3051 = extractelement <2 x bfloat> %3044, i64 0, !dbg !173
  %3052 = extractelement <2 x bfloat> %3044, i64 1, !dbg !173
  %3053 = extractelement <2 x bfloat> %3046, i64 0, !dbg !173
  %3054 = extractelement <2 x bfloat> %3046, i64 1, !dbg !173
  %3055 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3018, i1 %28) #5, !dbg !173
  %3056 = extractvalue { i32, i32, i32, i32 } %3055, 0, !dbg !173
  %3057 = bitcast i32 %3056 to <2 x bfloat>, !dbg !173
  %3058 = extractvalue { i32, i32, i32, i32 } %3055, 1, !dbg !173
  %3059 = bitcast i32 %3058 to <2 x bfloat>, !dbg !173
  %3060 = extractvalue { i32, i32, i32, i32 } %3055, 2, !dbg !173
  %3061 = bitcast i32 %3060 to <2 x bfloat>, !dbg !173
  %3062 = extractvalue { i32, i32, i32, i32 } %3055, 3, !dbg !173
  %3063 = bitcast i32 %3062 to <2 x bfloat>, !dbg !173
  %3064 = extractelement <2 x bfloat> %3057, i64 0, !dbg !173
  %3065 = extractelement <2 x bfloat> %3057, i64 1, !dbg !173
  %3066 = extractelement <2 x bfloat> %3059, i64 0, !dbg !173
  %3067 = extractelement <2 x bfloat> %3059, i64 1, !dbg !173
  %3068 = extractelement <2 x bfloat> %3061, i64 0, !dbg !173
  %3069 = extractelement <2 x bfloat> %3061, i64 1, !dbg !173
  %3070 = extractelement <2 x bfloat> %3063, i64 0, !dbg !173
  %3071 = extractelement <2 x bfloat> %3063, i64 1, !dbg !173
  %3072 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3020, i1 %28) #5, !dbg !173
  %3073 = extractvalue { i32, i32, i32, i32 } %3072, 0, !dbg !173
  %3074 = bitcast i32 %3073 to <2 x bfloat>, !dbg !173
  %3075 = extractvalue { i32, i32, i32, i32 } %3072, 1, !dbg !173
  %3076 = bitcast i32 %3075 to <2 x bfloat>, !dbg !173
  %3077 = extractvalue { i32, i32, i32, i32 } %3072, 2, !dbg !173
  %3078 = bitcast i32 %3077 to <2 x bfloat>, !dbg !173
  %3079 = extractvalue { i32, i32, i32, i32 } %3072, 3, !dbg !173
  %3080 = bitcast i32 %3079 to <2 x bfloat>, !dbg !173
  %3081 = extractelement <2 x bfloat> %3074, i64 0, !dbg !173
  %3082 = extractelement <2 x bfloat> %3074, i64 1, !dbg !173
  %3083 = extractelement <2 x bfloat> %3076, i64 0, !dbg !173
  %3084 = extractelement <2 x bfloat> %3076, i64 1, !dbg !173
  %3085 = extractelement <2 x bfloat> %3078, i64 0, !dbg !173
  %3086 = extractelement <2 x bfloat> %3078, i64 1, !dbg !173
  %3087 = extractelement <2 x bfloat> %3080, i64 0, !dbg !173
  %3088 = extractelement <2 x bfloat> %3080, i64 1, !dbg !173
  %3089 = fpext bfloat %3030 to float, !dbg !174
  %3090 = fpext bfloat %3031 to float, !dbg !174
  %3091 = fpext bfloat %3032 to float, !dbg !174
  %3092 = fpext bfloat %3033 to float, !dbg !174
  %3093 = fpext bfloat %3034 to float, !dbg !174
  %3094 = fpext bfloat %3035 to float, !dbg !174
  %3095 = fpext bfloat %3036 to float, !dbg !174
  %3096 = fpext bfloat %3037 to float, !dbg !174
  %3097 = fpext bfloat %3047 to float, !dbg !174
  %3098 = fpext bfloat %3048 to float, !dbg !174
  %3099 = fpext bfloat %3049 to float, !dbg !174
  %3100 = fpext bfloat %3050 to float, !dbg !174
  %3101 = fpext bfloat %3051 to float, !dbg !174
  %3102 = fpext bfloat %3052 to float, !dbg !174
  %3103 = fpext bfloat %3053 to float, !dbg !174
  %3104 = fpext bfloat %3054 to float, !dbg !174
  %3105 = fpext bfloat %3064 to float, !dbg !174
  %3106 = fpext bfloat %3065 to float, !dbg !174
  %3107 = fpext bfloat %3066 to float, !dbg !174
  %3108 = fpext bfloat %3067 to float, !dbg !174
  %3109 = fpext bfloat %3068 to float, !dbg !174
  %3110 = fpext bfloat %3069 to float, !dbg !174
  %3111 = fpext bfloat %3070 to float, !dbg !174
  %3112 = fpext bfloat %3071 to float, !dbg !174
  %3113 = fpext bfloat %3081 to float, !dbg !174
  %3114 = fpext bfloat %3082 to float, !dbg !174
  %3115 = fpext bfloat %3083 to float, !dbg !174
  %3116 = fpext bfloat %3084 to float, !dbg !174
  %3117 = fpext bfloat %3085 to float, !dbg !174
  %3118 = fpext bfloat %3086 to float, !dbg !174
  %3119 = fpext bfloat %3087 to float, !dbg !174
  %3120 = fpext bfloat %3088 to float, !dbg !174
  %3121 = fmul float %3002, %3089, !dbg !175
  %3122 = fmul float %3002, %3090, !dbg !175
  %3123 = fmul float %3002, %3091, !dbg !175
  %3124 = fmul float %3002, %3092, !dbg !175
  %3125 = fmul float %3002, %3093, !dbg !175
  %3126 = fmul float %3002, %3094, !dbg !175
  %3127 = fmul float %3002, %3095, !dbg !175
  %3128 = fmul float %3002, %3096, !dbg !175
  %3129 = fmul float %3002, %3097, !dbg !175
  %3130 = fmul float %3002, %3098, !dbg !175
  %3131 = fmul float %3002, %3099, !dbg !175
  %3132 = fmul float %3002, %3100, !dbg !175
  %3133 = fmul float %3002, %3101, !dbg !175
  %3134 = fmul float %3002, %3102, !dbg !175
  %3135 = fmul float %3002, %3103, !dbg !175
  %3136 = fmul float %3002, %3104, !dbg !175
  %3137 = fmul float %3003, %3105, !dbg !175
  %3138 = fmul float %3003, %3106, !dbg !175
  %3139 = fmul float %3003, %3107, !dbg !175
  %3140 = fmul float %3003, %3108, !dbg !175
  %3141 = fmul float %3003, %3109, !dbg !175
  %3142 = fmul float %3003, %3110, !dbg !175
  %3143 = fmul float %3003, %3111, !dbg !175
  %3144 = fmul float %3003, %3112, !dbg !175
  %3145 = fmul float %3003, %3113, !dbg !175
  %3146 = fmul float %3003, %3114, !dbg !175
  %3147 = fmul float %3003, %3115, !dbg !175
  %3148 = fmul float %3003, %3116, !dbg !175
  %3149 = fmul float %3003, %3117, !dbg !175
  %3150 = fmul float %3003, %3118, !dbg !175
  %3151 = fmul float %3003, %3119, !dbg !175
  %3152 = fmul float %3003, %3120, !dbg !175
  %3153 = tail call float @llvm.nvvm.round.f(float %3121) #5, !dbg !176
  %3154 = tail call float @llvm.nvvm.round.f(float %3122) #5, !dbg !176
  %3155 = tail call float @llvm.nvvm.round.f(float %3123) #5, !dbg !176
  %3156 = tail call float @llvm.nvvm.round.f(float %3124) #5, !dbg !176
  %3157 = tail call float @llvm.nvvm.round.f(float %3125) #5, !dbg !176
  %3158 = tail call float @llvm.nvvm.round.f(float %3126) #5, !dbg !176
  %3159 = tail call float @llvm.nvvm.round.f(float %3127) #5, !dbg !176
  %3160 = tail call float @llvm.nvvm.round.f(float %3128) #5, !dbg !176
  %3161 = tail call float @llvm.nvvm.round.f(float %3129) #5, !dbg !176
  %3162 = tail call float @llvm.nvvm.round.f(float %3130) #5, !dbg !176
  %3163 = tail call float @llvm.nvvm.round.f(float %3131) #5, !dbg !176
  %3164 = tail call float @llvm.nvvm.round.f(float %3132) #5, !dbg !176
  %3165 = tail call float @llvm.nvvm.round.f(float %3133) #5, !dbg !176
  %3166 = tail call float @llvm.nvvm.round.f(float %3134) #5, !dbg !176
  %3167 = tail call float @llvm.nvvm.round.f(float %3135) #5, !dbg !176
  %3168 = tail call float @llvm.nvvm.round.f(float %3136) #5, !dbg !176
  %3169 = tail call float @llvm.nvvm.round.f(float %3137) #5, !dbg !176
  %3170 = tail call float @llvm.nvvm.round.f(float %3138) #5, !dbg !176
  %3171 = tail call float @llvm.nvvm.round.f(float %3139) #5, !dbg !176
  %3172 = tail call float @llvm.nvvm.round.f(float %3140) #5, !dbg !176
  %3173 = tail call float @llvm.nvvm.round.f(float %3141) #5, !dbg !176
  %3174 = tail call float @llvm.nvvm.round.f(float %3142) #5, !dbg !176
  %3175 = tail call float @llvm.nvvm.round.f(float %3143) #5, !dbg !176
  %3176 = tail call float @llvm.nvvm.round.f(float %3144) #5, !dbg !176
  %3177 = tail call float @llvm.nvvm.round.f(float %3145) #5, !dbg !176
  %3178 = tail call float @llvm.nvvm.round.f(float %3146) #5, !dbg !176
  %3179 = tail call float @llvm.nvvm.round.f(float %3147) #5, !dbg !176
  %3180 = tail call float @llvm.nvvm.round.f(float %3148) #5, !dbg !176
  %3181 = tail call float @llvm.nvvm.round.f(float %3149) #5, !dbg !176
  %3182 = tail call float @llvm.nvvm.round.f(float %3150) #5, !dbg !176
  %3183 = tail call float @llvm.nvvm.round.f(float %3151) #5, !dbg !176
  %3184 = tail call float @llvm.nvvm.round.f(float %3152) #5, !dbg !176
  %3185 = insertelement <4 x float> poison, float %3153, i64 0, !dbg !177
  %3186 = insertelement <4 x float> %3185, float %3154, i64 1, !dbg !177
  %3187 = insertelement <4 x float> %3186, float %3155, i64 2, !dbg !177
  %3188 = insertelement <4 x float> %3187, float %3156, i64 3, !dbg !177
  %3189 = fcmp ogt <4 x float> %3188, splat (float -1.270000e+02), !dbg !177
  %3190 = fcmp uno <4 x float> %3188, zeroinitializer, !dbg !179
  %3191 = or <4 x i1> %3189, %3190, !dbg !180
  %3192 = select <4 x i1> %3191, <4 x float> %3188, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3193 = fcmp olt <4 x float> %3192, splat (float 1.270000e+02), !dbg !182
  %3194 = fcmp uno <4 x float> %3192, zeroinitializer, !dbg !184
  %3195 = or <4 x i1> %3193, %3194, !dbg !185
  %3196 = fptosi <4 x float> %3192 to <4 x i8>, !dbg !186
  %3197 = select <4 x i1> %3195, <4 x i8> %3196, <4 x i8> splat (i8 127), !dbg !187
  %3198 = insertelement <4 x float> poison, float %3157, i64 0, !dbg !177
  %3199 = insertelement <4 x float> %3198, float %3158, i64 1, !dbg !177
  %3200 = insertelement <4 x float> %3199, float %3159, i64 2, !dbg !177
  %3201 = insertelement <4 x float> %3200, float %3160, i64 3, !dbg !177
  %3202 = fcmp ogt <4 x float> %3201, splat (float -1.270000e+02), !dbg !177
  %3203 = fcmp uno <4 x float> %3201, zeroinitializer, !dbg !179
  %3204 = or <4 x i1> %3202, %3203, !dbg !180
  %3205 = select <4 x i1> %3204, <4 x float> %3201, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3206 = fcmp olt <4 x float> %3205, splat (float 1.270000e+02), !dbg !182
  %3207 = fcmp uno <4 x float> %3205, zeroinitializer, !dbg !184
  %3208 = or <4 x i1> %3206, %3207, !dbg !185
  %3209 = fptosi <4 x float> %3205 to <4 x i8>, !dbg !186
  %3210 = select <4 x i1> %3208, <4 x i8> %3209, <4 x i8> splat (i8 127), !dbg !187
  %3211 = insertelement <4 x float> poison, float %3161, i64 0, !dbg !177
  %3212 = insertelement <4 x float> %3211, float %3162, i64 1, !dbg !177
  %3213 = insertelement <4 x float> %3212, float %3163, i64 2, !dbg !177
  %3214 = insertelement <4 x float> %3213, float %3164, i64 3, !dbg !177
  %3215 = fcmp ogt <4 x float> %3214, splat (float -1.270000e+02), !dbg !177
  %3216 = fcmp uno <4 x float> %3214, zeroinitializer, !dbg !179
  %3217 = or <4 x i1> %3215, %3216, !dbg !180
  %3218 = select <4 x i1> %3217, <4 x float> %3214, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3219 = fcmp olt <4 x float> %3218, splat (float 1.270000e+02), !dbg !182
  %3220 = fcmp uno <4 x float> %3218, zeroinitializer, !dbg !184
  %3221 = or <4 x i1> %3219, %3220, !dbg !185
  %3222 = fptosi <4 x float> %3218 to <4 x i8>, !dbg !186
  %3223 = select <4 x i1> %3221, <4 x i8> %3222, <4 x i8> splat (i8 127), !dbg !187
  %3224 = insertelement <4 x float> poison, float %3165, i64 0, !dbg !177
  %3225 = insertelement <4 x float> %3224, float %3166, i64 1, !dbg !177
  %3226 = insertelement <4 x float> %3225, float %3167, i64 2, !dbg !177
  %3227 = insertelement <4 x float> %3226, float %3168, i64 3, !dbg !177
  %3228 = fcmp ogt <4 x float> %3227, splat (float -1.270000e+02), !dbg !177
  %3229 = fcmp uno <4 x float> %3227, zeroinitializer, !dbg !179
  %3230 = or <4 x i1> %3228, %3229, !dbg !180
  %3231 = select <4 x i1> %3230, <4 x float> %3227, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3232 = fcmp olt <4 x float> %3231, splat (float 1.270000e+02), !dbg !182
  %3233 = fcmp uno <4 x float> %3231, zeroinitializer, !dbg !184
  %3234 = or <4 x i1> %3232, %3233, !dbg !185
  %3235 = fptosi <4 x float> %3231 to <4 x i8>, !dbg !186
  %3236 = select <4 x i1> %3234, <4 x i8> %3235, <4 x i8> splat (i8 127), !dbg !187
  %3237 = insertelement <4 x float> poison, float %3169, i64 0, !dbg !177
  %3238 = insertelement <4 x float> %3237, float %3170, i64 1, !dbg !177
  %3239 = insertelement <4 x float> %3238, float %3171, i64 2, !dbg !177
  %3240 = insertelement <4 x float> %3239, float %3172, i64 3, !dbg !177
  %3241 = fcmp ogt <4 x float> %3240, splat (float -1.270000e+02), !dbg !177
  %3242 = fcmp uno <4 x float> %3240, zeroinitializer, !dbg !179
  %3243 = or <4 x i1> %3241, %3242, !dbg !180
  %3244 = select <4 x i1> %3243, <4 x float> %3240, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3245 = fcmp olt <4 x float> %3244, splat (float 1.270000e+02), !dbg !182
  %3246 = fcmp uno <4 x float> %3244, zeroinitializer, !dbg !184
  %3247 = or <4 x i1> %3245, %3246, !dbg !185
  %3248 = fptosi <4 x float> %3244 to <4 x i8>, !dbg !186
  %3249 = select <4 x i1> %3247, <4 x i8> %3248, <4 x i8> splat (i8 127), !dbg !187
  %3250 = insertelement <4 x float> poison, float %3173, i64 0, !dbg !177
  %3251 = insertelement <4 x float> %3250, float %3174, i64 1, !dbg !177
  %3252 = insertelement <4 x float> %3251, float %3175, i64 2, !dbg !177
  %3253 = insertelement <4 x float> %3252, float %3176, i64 3, !dbg !177
  %3254 = fcmp ogt <4 x float> %3253, splat (float -1.270000e+02), !dbg !177
  %3255 = fcmp uno <4 x float> %3253, zeroinitializer, !dbg !179
  %3256 = or <4 x i1> %3254, %3255, !dbg !180
  %3257 = select <4 x i1> %3256, <4 x float> %3253, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3258 = fcmp olt <4 x float> %3257, splat (float 1.270000e+02), !dbg !182
  %3259 = fcmp uno <4 x float> %3257, zeroinitializer, !dbg !184
  %3260 = or <4 x i1> %3258, %3259, !dbg !185
  %3261 = fptosi <4 x float> %3257 to <4 x i8>, !dbg !186
  %3262 = select <4 x i1> %3260, <4 x i8> %3261, <4 x i8> splat (i8 127), !dbg !187
  %3263 = insertelement <4 x float> poison, float %3177, i64 0, !dbg !177
  %3264 = insertelement <4 x float> %3263, float %3178, i64 1, !dbg !177
  %3265 = insertelement <4 x float> %3264, float %3179, i64 2, !dbg !177
  %3266 = insertelement <4 x float> %3265, float %3180, i64 3, !dbg !177
  %3267 = fcmp ogt <4 x float> %3266, splat (float -1.270000e+02), !dbg !177
  %3268 = fcmp uno <4 x float> %3266, zeroinitializer, !dbg !179
  %3269 = or <4 x i1> %3267, %3268, !dbg !180
  %3270 = select <4 x i1> %3269, <4 x float> %3266, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3271 = fcmp olt <4 x float> %3270, splat (float 1.270000e+02), !dbg !182
  %3272 = fcmp uno <4 x float> %3270, zeroinitializer, !dbg !184
  %3273 = or <4 x i1> %3271, %3272, !dbg !185
  %3274 = fptosi <4 x float> %3270 to <4 x i8>, !dbg !186
  %3275 = select <4 x i1> %3273, <4 x i8> %3274, <4 x i8> splat (i8 127), !dbg !187
  %3276 = insertelement <4 x float> poison, float %3181, i64 0, !dbg !177
  %3277 = insertelement <4 x float> %3276, float %3182, i64 1, !dbg !177
  %3278 = insertelement <4 x float> %3277, float %3183, i64 2, !dbg !177
  %3279 = insertelement <4 x float> %3278, float %3184, i64 3, !dbg !177
  %3280 = fcmp ogt <4 x float> %3279, splat (float -1.270000e+02), !dbg !177
  %3281 = fcmp uno <4 x float> %3279, zeroinitializer, !dbg !179
  %3282 = or <4 x i1> %3280, %3281, !dbg !180
  %3283 = select <4 x i1> %3282, <4 x float> %3279, <4 x float> splat (float -1.270000e+02), !dbg !181
  %3284 = fcmp olt <4 x float> %3283, splat (float 1.270000e+02), !dbg !182
  %3285 = fcmp uno <4 x float> %3283, zeroinitializer, !dbg !184
  %3286 = or <4 x i1> %3284, %3285, !dbg !185
  %3287 = fptosi <4 x float> %3283 to <4 x i8>, !dbg !186
  %3288 = select <4 x i1> %3286, <4 x i8> %3287, <4 x i8> splat (i8 127), !dbg !187
  %3289 = getelementptr i8, ptr addrspace(1) %12, i64 %3013, !dbg !188
  %3290 = getelementptr i8, ptr addrspace(1) %12, i64 %3017, !dbg !188
  %3291 = bitcast <4 x i8> %3197 to i32, !dbg !189
  %3292 = bitcast <4 x i8> %3210 to i32, !dbg !189
  %3293 = bitcast <4 x i8> %3223 to i32, !dbg !189
  %3294 = bitcast <4 x i8> %3236 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3291, i32 %3292, i32 %3293, i32 %3294, ptr addrspace(1) %3289, i1 %28) #5, !dbg !189
  %3295 = bitcast <4 x i8> %3249 to i32, !dbg !189
  %3296 = bitcast <4 x i8> %3262 to i32, !dbg !189
  %3297 = bitcast <4 x i8> %3275 to i32, !dbg !189
  %3298 = bitcast <4 x i8> %3288 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3295, i32 %3296, i32 %3297, i32 %3298, ptr addrspace(1) %3290, i1 %28) #5, !dbg !189
  %indvars.iv.next431 = add nuw nsw i64 %indvars.iv430, 1024, !dbg !170
  %3299 = icmp samesign ult i64 %indvars.iv430, 2048, !dbg !170
  br i1 %3299, label %3004, label %3300, !dbg !170

3300:                                             ; preds = %3004
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 112, column: 50, scope: !6)
!100 = !DILocation(line: 110, column: 50, scope: !6)
!101 = !DILocation(line: 81, column: 31, scope: !6)
!102 = !DILocation(line: 86, column: 43, scope: !6)
!103 = !DILocation(line: 86, column: 36, scope: !6)
!104 = !DILocation(line: 86, column: 53, scope: !6)
!105 = !DILocation(line: 86, column: 115, scope: !6)
!106 = !DILocation(line: 87, column: 43, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 87, column: 50, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 50, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 89, column: 49, scope: !6)
!114 = !DILocation(line: 90, column: 35, scope: !6)
!115 = !DILocation(line: 90, column: 49, scope: !6)
!116 = !DILocation(line: 92, column: 24, scope: !6)
!117 = !DILocation(line: 98, column: 24, scope: !6)
!118 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !119)
!119 = !DILocation(line: 111, column: 47, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !121)
!121 = !DILocation(line: 109, column: 47, scope: !6)
!122 = !DILocation(line: 88, column: 103, scope: !6)
!123 = !DILocation(line: 90, column: 102, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 103, column: 24, scope: !6)
!126 = !DILocation(line: 106, column: 24, scope: !6)
!127 = !DILocation(line: 104, column: 24, scope: !6)
!128 = !DILocation(line: 107, column: 24, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !121)
!131 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !121)
!132 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !121)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !119)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !119)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !119)
!136 = !DILocation(line: 113, column: 29, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !145)
!148 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !145)
!149 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 140, column: 24, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
