; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 6, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 3, !dbg !11
  %15 = and i32 %13, 63, !dbg !11
  %16 = lshr i32 %13, 2, !dbg !11
  %17 = and i32 %16, 63, !dbg !11
  %18 = or disjoint i32 %12, %15, !dbg !12
  %19 = or disjoint i32 %17, %12, !dbg !12
  %20 = icmp slt i32 %18, 98688, !dbg !13
  %21 = icmp slt i32 %19, 98688, !dbg !13
  %22 = lshr i32 %13, 6, !dbg !14
  %.lobit = and i32 %22, 1, !dbg !14
  %23 = and i32 %22, 2, !dbg !14
  %24 = sdiv i32 %18, 24, !dbg !15
  %25 = sdiv i32 %19, 24, !dbg !15
  %26 = shl i32 %19, 7
  %27 = mul i32 %25, 6144
  %28 = add i32 %27, %26
  %29 = add i32 %28, 3072
  br i1 %21, label %.split.us, label %.split

.split.us:                                        ; preds = %10, %.split.us
  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %.split.us ], [ 0, %10 ]
  %30 = phi float [ %49, %.split.us ], [ 0.000000e+00, %10 ]
  %31 = phi float [ %47, %.split.us ], [ 0.000000e+00, %10 ]
  %32 = trunc i64 %indvars.iv16 to i32, !dbg !16
  %33 = or disjoint i32 %14, %32, !dbg !16
  %34 = add i32 %29, %33, !dbg !16
  %35 = sext i32 %34 to i64, !dbg !17
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %36, i1 true) #5, !dbg !18
  %38 = bitcast i16 %37 to bfloat, !dbg !18
  %39 = fpext bfloat %38 to float, !dbg !19
  %40 = add i32 %28, %33, !dbg !20
  %41 = sext i32 %40 to i64, !dbg !21
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 true) #5, !dbg !22
  %44 = bitcast i16 %43 to bfloat, !dbg !22
  %45 = fpext bfloat %44 to float, !dbg !23
  %46 = fmul float %39, %39, !dbg !24
  %47 = fadd float %31, %46, !dbg !25
  %48 = fmul float %45, %45, !dbg !26
  %49 = fadd float %30, %48, !dbg !27
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 4, !dbg !28
  %50 = icmp samesign ult i64 %indvars.iv16, 124, !dbg !28
  br i1 %50, label %.split.us, label %.split11.us, !dbg !28

.split:                                           ; preds = %10, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %10 ]
  %51 = trunc i64 %indvars.iv to i32, !dbg !16
  %52 = or disjoint i32 %14, %51, !dbg !16
  %53 = add i32 %29, %52, !dbg !16
  %54 = sext i32 %53 to i64, !dbg !17
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !17
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %55, i1 false) #5, !dbg !18
  %57 = add i32 %28, %52, !dbg !20
  %58 = sext i32 %57 to i64, !dbg !21
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %59, i1 false) #5, !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !28
  %61 = icmp samesign ult i64 %indvars.iv, 124, !dbg !28
  br i1 %61, label %.split, label %.split11.us, !dbg !28

.split11.us:                                      ; preds = %.split, %.split.us
  %.us-phi = phi float [ %47, %.split.us ], [ 0.000000e+00, %.split ], !dbg !29
  %.us-phi12 = phi float [ %49, %.split.us ], [ 0.000000e+00, %.split ], !dbg !29
  %62 = bitcast float %.us-phi to i32, !dbg !29
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = fadd float %.us-phi, %64, !dbg !33
  %66 = bitcast float %65 to i32, !dbg !29
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = fadd float %65, %68, !dbg !33
  %70 = bitcast float %.us-phi12 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %.us-phi12, %72, !dbg !37
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !37
  %78 = shl i32 %25, 7, !dbg !38
  %79 = tail call float @llvm.nvvm.div.full(float %77, float 1.280000e+02), !dbg !39
  %80 = fadd float %79, 0x3EB0C6F7A0000000, !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %81, 0, !dbg !41
  br i1 %.not.i, label %84, label %82, !dbg !41

82:                                               ; preds = %.split11.us
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

84:                                               ; preds = %.split11.us
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %82, %84
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], !dbg !41
  %.idx = shl nuw nsw i32 %17, 3, !dbg !42
  %86 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !42
  %87 = bitcast float %.0.i to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !42
  %88 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !42
  %89 = load float, ptr addrspace(3) %88, align 8, !dbg !42
  %90 = tail call float @llvm.nvvm.div.full(float %69, float 1.280000e+02), !dbg !43
  %91 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !44
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i6 = icmp eq i32 %92, 0, !dbg !45
  br i1 %.not.i6, label %95, label %93, !dbg !45

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !45
  br label %__nv_rsqrtf.exit8, !dbg !45

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !45
  br label %__nv_rsqrtf.exit8, !dbg !45

__nv_rsqrtf.exit8:                                ; preds = %93, %95
  %.0.i7 = phi float [ %94, %93 ], [ %96, %95 ], !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %97 = bitcast float %.0.i7 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %97, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %98 = load float, ptr addrspace(3) %88, align 8, !dbg !46
  %99 = shl i32 %19, 7, !dbg !47
  %invariant.op = and i32 %22, 3, !dbg !48
  %100 = and i32 %13, 255
  %101 = shl i32 %13, 2
  %102 = and i32 %101, 252
  %.reass = or disjoint i32 %102, %invariant.op
  %103 = lshr i32 %100, 2
  %104 = add nuw nsw i32 %103, %100
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %104
  %106 = lshr exact i32 %102, 2
  %107 = add nuw nsw i32 %.reass, %106
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %107
  %109 = icmp eq i32 %.lobit, 0
  %110 = shl i32 %18, 7
  %111 = mul i32 %24, 6144
  %112 = add i32 %111, %110
  %113 = and i1 %20, %109
  %114 = icmp ne i32 %.lobit, 0
  %115 = and i1 %20, %114
  %116 = add i32 %112, 3073
  %117 = add i32 %112, 3072
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %107
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %104
  %120 = zext nneg i32 %14 to i64, !dbg !48
  %121 = sext i32 %78 to i64, !dbg !48
  %122 = sext i32 %99 to i64, !dbg !48
  %123 = zext nneg i32 %23 to i64, !dbg !48
  br label %124, !dbg !48

124:                                              ; preds = %__nv_rsqrtf.exit8, %124
  %indvars.iv18 = phi i64 [ 0, %__nv_rsqrtf.exit8 ], [ %indvars.iv.next19, %124 ]
  %125 = or disjoint i64 %indvars.iv18, %123, !dbg !49
  %126 = or disjoint i64 %indvars.iv18, %120, !dbg !49
  %127 = trunc nuw nsw i64 %126 to i32, !dbg !50
  %128 = add i32 %28, %127, !dbg !50
  %129 = sext i32 %128 to i64, !dbg !51
  %130 = getelementptr bfloat, ptr addrspace(1) %0, i64 %129, !dbg !51
  %131 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %130, i1 %21) #5, !dbg !52
  %132 = bitcast i16 %131 to bfloat, !dbg !52
  %133 = fpext bfloat %132 to float, !dbg !53
  %134 = getelementptr bfloat, ptr addrspace(1) %1, i64 %126, !dbg !54
  %135 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %134, i1 true) #5, !dbg !55
  %136 = bitcast i16 %135 to bfloat, !dbg !55
  %137 = fpext bfloat %136 to float, !dbg !56
  %138 = add nuw nsw i64 %126, %121, !dbg !57
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !58
  %140 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %139, i1 %21) #5, !dbg !59
  %141 = bitcast i32 %140 to float, !dbg !59
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !60
  %143 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %142, i1 %21) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %144 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %144, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %145 = load float, ptr addrspace(3) %108, align 4, !dbg !61
  %146 = add i32 %29, %127, !dbg !62
  %147 = sext i32 %146 to i64, !dbg !63
  %148 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !63
  %149 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %148, i1 %21) #5, !dbg !64
  %150 = bitcast i16 %149 to bfloat, !dbg !64
  %151 = fpext bfloat %150 to float, !dbg !65
  %152 = getelementptr bfloat, ptr addrspace(1) %4, i64 %126, !dbg !66
  %153 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 true) #5, !dbg !67
  %154 = bitcast i16 %153 to bfloat, !dbg !67
  %155 = fpext bfloat %154 to float, !dbg !68
  %156 = or disjoint i64 %125, 1, !dbg !69
  %157 = trunc nuw nsw i64 %156 to i32, !dbg !70
  %158 = add i32 %112, %157, !dbg !70
  %159 = sext i32 %158 to i64, !dbg !71
  %160 = getelementptr bfloat, ptr addrspace(1) %0, i64 %159, !dbg !71
  %161 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %160, i1 %113) #5, !dbg !72
  %162 = bitcast i16 %161 to bfloat, !dbg !72
  %163 = fpext bfloat %162 to float, !dbg !73
  %164 = fmul float %89, %163, !dbg !42
  %165 = getelementptr bfloat, ptr addrspace(1) %1, i64 %156, !dbg !74
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 %113) #5, !dbg !75
  %167 = bitcast i16 %166 to bfloat, !dbg !75
  %168 = fpext bfloat %167 to float, !dbg !76
  %169 = fmul float %164, %168, !dbg !77
  %170 = fsub float 0.000000e+00, %169, !dbg !78
  %171 = trunc nuw nsw i64 %125 to i32, !dbg !79
  %172 = add i32 %112, %171, !dbg !79
  %173 = sext i32 %172 to i64, !dbg !80
  %174 = getelementptr bfloat, ptr addrspace(1) %0, i64 %173, !dbg !80
  %175 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %174, i1 %115) #5, !dbg !81
  %176 = bitcast i16 %175 to bfloat, !dbg !81
  %177 = fpext bfloat %176 to float, !dbg !82
  %178 = fmul float %89, %177, !dbg !83
  %179 = getelementptr bfloat, ptr addrspace(1) %1, i64 %125, !dbg !84
  %180 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %179, i1 %115) #5, !dbg !85
  %181 = bitcast i16 %180 to bfloat, !dbg !85
  %182 = fpext bfloat %181 to float, !dbg !86
  %183 = fmul float %178, %182, !dbg !87
  %184 = select i1 %109, float %170, float %183, !dbg !88
  %185 = fmul float %.0.i, %133, !dbg !89
  %186 = fmul float %185, %137, !dbg !90
  %187 = fmul float %186, %141, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %188 = bitcast float %187 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %188, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %189 = load float, ptr addrspace(3) %108, align 4, !dbg !91
  %190 = fmul float %145, %184, !dbg !92
  %191 = fadd float %189, %190, !dbg !93
  %192 = add i32 %116, %171, !dbg !94
  %193 = sext i32 %192 to i64, !dbg !95
  %194 = getelementptr bfloat, ptr addrspace(1) %0, i64 %193, !dbg !95
  %195 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %194, i1 %113) #5, !dbg !96
  %196 = bitcast i16 %195 to bfloat, !dbg !96
  %197 = fpext bfloat %196 to float, !dbg !97
  %198 = fmul float %98, %197, !dbg !46
  %199 = getelementptr bfloat, ptr addrspace(1) %4, i64 %156, !dbg !98
  %200 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %199, i1 %113) #5, !dbg !99
  %201 = bitcast i16 %200 to bfloat, !dbg !99
  %202 = fpext bfloat %201 to float, !dbg !100
  %203 = fmul float %198, %202, !dbg !101
  %204 = fsub float 0.000000e+00, %203, !dbg !102
  %205 = add i32 %117, %171, !dbg !103
  %206 = sext i32 %205 to i64, !dbg !104
  %207 = getelementptr bfloat, ptr addrspace(1) %0, i64 %206, !dbg !104
  %208 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %207, i1 %115) #5, !dbg !105
  %209 = bitcast i16 %208 to bfloat, !dbg !105
  %210 = fpext bfloat %209 to float, !dbg !106
  %211 = fmul float %98, %210, !dbg !107
  %212 = getelementptr bfloat, ptr addrspace(1) %4, i64 %125, !dbg !108
  %213 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %212, i1 %115) #5, !dbg !109
  %214 = bitcast i16 %213 to bfloat, !dbg !109
  %215 = fpext bfloat %214 to float, !dbg !110
  %216 = fmul float %211, %215, !dbg !111
  %217 = select i1 %109, float %204, float %216, !dbg !88
  %218 = fmul float %.0.i7, %151, !dbg !112
  %219 = fmul float %218, %155, !dbg !113
  %220 = fmul float %219, %141, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %221 = bitcast float %220 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %221, i1 true) #5, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %222 = load float, ptr addrspace(3) %108, align 4, !dbg !114
  %223 = fmul float %145, %217, !dbg !115
  %224 = fadd float %222, %223, !dbg !116
  %225 = add nuw nsw i64 %126, %122, !dbg !117
  %226 = getelementptr bfloat, ptr addrspace(1) %5, i64 %225, !dbg !118
  %227 = fptrunc float %191 to bfloat, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %228 = bitcast bfloat %227 to <1 x i16>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i16> %228, i1 true) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %229 = load i16, ptr addrspace(3) %119, align 2, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %229, ptr addrspace(1) %226, i1 %21) #5, !dbg !119
  %230 = getelementptr bfloat, ptr addrspace(1) %6, i64 %225, !dbg !120
  %231 = fptrunc float %224 to bfloat, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %232 = bitcast bfloat %231 to <1 x i16>, !dbg !121
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i16> %232, i1 true) #5, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %233 = load i16, ptr addrspace(3) %119, align 2, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %233, ptr addrspace(1) %230, i1 %21) #5, !dbg !121
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 4, !dbg !48
  %234 = icmp samesign ult i64 %indvars.iv18, 124, !dbg !48
  br i1 %234, label %124, label %235, !dbg !48

235:                                              ; preds = %124
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 39, column: 57, scope: !6)
!17 = !DILocation(line: 39, column: 34, scope: !6)
!18 = !DILocation(line: 39, column: 67, scope: !6)
!19 = !DILocation(line: 39, column: 128, scope: !6)
!20 = !DILocation(line: 40, column: 50, scope: !6)
!21 = !DILocation(line: 40, column: 34, scope: !6)
!22 = !DILocation(line: 40, column: 60, scope: !6)
!23 = !DILocation(line: 40, column: 121, scope: !6)
!24 = !DILocation(line: 42, column: 22, scope: !6)
!25 = !DILocation(line: 44, column: 23, scope: !6)
!26 = !DILocation(line: 47, column: 22, scope: !6)
!27 = !DILocation(line: 49, column: 25, scope: !6)
!28 = !DILocation(line: 33, column: 40, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!32 = !DILocation(line: 51, column: 25, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !36)
!36 = !DILocation(line: 52, column: 27, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 46, scope: !6)
!39 = !DILocation(line: 73, column: 25, scope: !6)
!40 = !DILocation(line: 75, column: 24, scope: !6)
!41 = !DILocation(line: 76, column: 32, scope: !6)
!42 = !DILocation(line: 77, column: 24, scope: !6)
!43 = !DILocation(line: 118, column: 24, scope: !6)
!44 = !DILocation(line: 119, column: 24, scope: !6)
!45 = !DILocation(line: 120, column: 32, scope: !6)
!46 = !DILocation(line: 121, column: 24, scope: !6)
!47 = !DILocation(line: 153, column: 40, scope: !6)
!48 = !DILocation(line: 53, column: 40, scope: !6)
!49 = !DILocation(line: 54, column: 31, scope: !6)
!50 = !DILocation(line: 59, column: 51, scope: !6)
!51 = !DILocation(line: 59, column: 35, scope: !6)
!52 = !DILocation(line: 59, column: 61, scope: !6)
!53 = !DILocation(line: 59, column: 122, scope: !6)
!54 = !DILocation(line: 60, column: 35, scope: !6)
!55 = !DILocation(line: 60, column: 42, scope: !6)
!56 = !DILocation(line: 60, column: 95, scope: !6)
!57 = !DILocation(line: 61, column: 42, scope: !6)
!58 = !DILocation(line: 61, column: 35, scope: !6)
!59 = !DILocation(line: 61, column: 51, scope: !6)
!60 = !DILocation(line: 62, column: 35, scope: !6)
!61 = !DILocation(line: 62, column: 51, scope: !6)
!62 = !DILocation(line: 63, column: 58, scope: !6)
!63 = !DILocation(line: 63, column: 35, scope: !6)
!64 = !DILocation(line: 63, column: 68, scope: !6)
!65 = !DILocation(line: 63, column: 130, scope: !6)
!66 = !DILocation(line: 64, column: 35, scope: !6)
!67 = !DILocation(line: 64, column: 42, scope: !6)
!68 = !DILocation(line: 64, column: 95, scope: !6)
!69 = !DILocation(line: 70, column: 39, scope: !6)
!70 = !DILocation(line: 70, column: 64, scope: !6)
!71 = !DILocation(line: 70, column: 35, scope: !6)
!72 = !DILocation(line: 70, column: 74, scope: !6)
!73 = !DILocation(line: 70, column: 143, scope: !6)
!74 = !DILocation(line: 79, column: 35, scope: !6)
!75 = !DILocation(line: 79, column: 92, scope: !6)
!76 = !DILocation(line: 79, column: 161, scope: !6)
!77 = !DILocation(line: 80, column: 24, scope: !6)
!78 = !DILocation(line: 81, column: 17, scope: !6)
!79 = !DILocation(line: 87, column: 60, scope: !6)
!80 = !DILocation(line: 87, column: 35, scope: !6)
!81 = !DILocation(line: 87, column: 70, scope: !6)
!82 = !DILocation(line: 87, column: 139, scope: !6)
!83 = !DILocation(line: 94, column: 24, scope: !6)
!84 = !DILocation(line: 96, column: 35, scope: !6)
!85 = !DILocation(line: 96, column: 88, scope: !6)
!86 = !DILocation(line: 96, column: 157, scope: !6)
!87 = !DILocation(line: 97, column: 24, scope: !6)
!88 = !DILocation(line: 0, scope: !6)
!89 = !DILocation(line: 108, column: 24, scope: !6)
!90 = !DILocation(line: 110, column: 24, scope: !6)
!91 = !DILocation(line: 112, column: 24, scope: !6)
!92 = !DILocation(line: 113, column: 24, scope: !6)
!93 = !DILocation(line: 114, column: 24, scope: !6)
!94 = !DILocation(line: 116, column: 67, scope: !6)
!95 = !DILocation(line: 116, column: 35, scope: !6)
!96 = !DILocation(line: 116, column: 77, scope: !6)
!97 = !DILocation(line: 116, column: 146, scope: !6)
!98 = !DILocation(line: 123, column: 35, scope: !6)
!99 = !DILocation(line: 123, column: 92, scope: !6)
!100 = !DILocation(line: 123, column: 161, scope: !6)
!101 = !DILocation(line: 124, column: 24, scope: !6)
!102 = !DILocation(line: 125, column: 17, scope: !6)
!103 = !DILocation(line: 128, column: 67, scope: !6)
!104 = !DILocation(line: 128, column: 35, scope: !6)
!105 = !DILocation(line: 128, column: 77, scope: !6)
!106 = !DILocation(line: 128, column: 146, scope: !6)
!107 = !DILocation(line: 133, column: 24, scope: !6)
!108 = !DILocation(line: 135, column: 35, scope: !6)
!109 = !DILocation(line: 135, column: 88, scope: !6)
!110 = !DILocation(line: 135, column: 157, scope: !6)
!111 = !DILocation(line: 136, column: 24, scope: !6)
!112 = !DILocation(line: 145, column: 24, scope: !6)
!113 = !DILocation(line: 147, column: 25, scope: !6)
!114 = !DILocation(line: 149, column: 26, scope: !6)
!115 = !DILocation(line: 150, column: 25, scope: !6)
!116 = !DILocation(line: 151, column: 26, scope: !6)
!117 = !DILocation(line: 153, column: 36, scope: !6)
!118 = !DILocation(line: 153, column: 29, scope: !6)
!119 = !DILocation(line: 153, column: 52, scope: !6)
!120 = !DILocation(line: 154, column: 29, scope: !6)
!121 = !DILocation(line: 154, column: 53, scope: !6)
!122 = !DILocation(line: 53, column: 4, scope: !6)
