; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 6, !dbg !11
  %11 = and i32 %10, 7, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %9, 3, !dbg !14
  %15 = and i32 %14, 504, !dbg !14
  %16 = shl i32 %12, 12, !dbg !15
  %17 = or disjoint i32 %16, %15
  %18 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !16
  %19 = shufflevector <8 x i1> %18, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %20, !dbg !17

20:                                               ; preds = %6, %20
  %21 = phi i32 [ 0, %6 ], [ %69, %20 ]
  %22 = phi <8 x float> [ zeroinitializer, %6 ], [ %68, %20 ]
  %23 = or i32 %17, %21, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %13) #5, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %13) #5, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = shufflevector <2 x bfloat> %28, <2 x bfloat> %30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %46 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <8 x bfloat> %45, <8 x bfloat> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <8 x bfloat> %47, <8 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %52 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %53 = shufflevector <8 x bfloat> %51, <8 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %54 = fpext <8 x bfloat> %53 to <8 x float>, !dbg !23
  %55 = shufflevector <2 x bfloat> %38, <2 x bfloat> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %56 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %57 = shufflevector <8 x bfloat> %55, <8 x bfloat> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <8 x bfloat> %57, <8 x bfloat> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <8 x bfloat> %59, <8 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %62 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %63 = shufflevector <8 x bfloat> %61, <8 x bfloat> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %64 = fpext <8 x bfloat> %63 to <8 x float>, !dbg !24
  %65 = fadd <8 x float> %54, %64, !dbg !25
  %66 = fmul <8 x float> %65, %65, !dbg !26
  %67 = fadd <8 x float> %22, %66, !dbg !27
  %68 = select <8 x i1> %19, <8 x float> %67, <8 x float> %22, !dbg !16
  %69 = add nuw nsw i32 %21, 512, !dbg !17
  %70 = icmp samesign ult i32 %21, 3584, !dbg !17
  br i1 %70, label %20, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %20
  %71 = lshr i32 %9, 5, !dbg !11
  %72 = and i32 %9, 31, !dbg !14
  %73 = and i32 %9, 511, !dbg !14
  %shift = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %74 = fadd <8 x float> %68, %shift, !dbg !28
  %shift52 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %75 = fadd <8 x float> %shift52, %74, !dbg !28
  %shift53 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %76 = fadd <8 x float> %shift53, %75, !dbg !28
  %shift54 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = fadd <8 x float> %shift54, %76, !dbg !28
  %shift55 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %78 = fadd <8 x float> %shift55, %77, !dbg !28
  %shift56 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = fadd <8 x float> %shift56, %78, !dbg !28
  %shift57 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = fadd <8 x float> %shift57, %79, !dbg !28
  %81 = extractelement <8 x float> %80, i64 0, !dbg !28
  %82 = bitcast float %81 to i32, !dbg !33
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !33
  %84 = bitcast i32 %83 to float, !dbg !33
  %85 = fadd float %81, %84, !dbg !28
  %86 = bitcast float %85 to i32, !dbg !33
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !33
  %88 = bitcast i32 %87 to float, !dbg !33
  %89 = fadd float %85, %88, !dbg !28
  %90 = bitcast float %89 to i32, !dbg !33
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = fadd float %89, %92, !dbg !28
  %94 = bitcast float %93 to i32, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %93, %96, !dbg !28
  %98 = bitcast float %97 to i32, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = fadd float %97, %100, !dbg !28
  %102 = and i32 %71, 1, !dbg !33
  %103 = icmp eq i32 %72, 0, !dbg !33
  %104 = shl nuw nsw i32 %11, 1, !dbg !33
  %105 = or disjoint i32 %104, %102, !dbg !33
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !33
  %107 = bitcast float %101 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %103) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %108 = icmp slt i32 %9, 16, !dbg !33
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !33
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %108) #5, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = fadd float %111, %113, !dbg !28
  %115 = and i32 %9, 1, !dbg !33
  %116 = icmp eq i32 %115, 0, !dbg !33
  %117 = and i1 %108, %116, !dbg !33
  %118 = bitcast float %114 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %118, i1 %117) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !33
  %120 = load float, ptr addrspace(3) %119, align 8, !dbg !33
  %121 = tail call float @llvm.nvvm.div.full(float %120, float 4.096000e+03), !dbg !34
  %122 = fadd float %121, 0x3EB0C6F7A0000000, !dbg !35
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i28 = icmp eq i32 %130, 0, !dbg !36
  br i1 %.not.i28, label %133, label %131, !dbg !36

131:                                              ; preds = %__nv_rsqrtf.exit
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !36
  br label %__nv_rsqrtf.exit30, !dbg !36

133:                                              ; preds = %__nv_rsqrtf.exit
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !36
  br label %__nv_rsqrtf.exit30, !dbg !36

__nv_rsqrtf.exit30:                               ; preds = %131, %133
  %.0.i29 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !36
  %135 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %73
  %136 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %137 = or disjoint i32 %15, 4
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %137
  %139 = zext nneg i32 %73 to i64, !dbg !37
  %140 = getelementptr inbounds nuw i8, ptr addrspace(3) %136, i32 8
  %141 = getelementptr inbounds nuw i8, ptr addrspace(3) %138, i32 8
  %142 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !38
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  br label %144, !dbg !37

144:                                              ; preds = %__nv_rsqrtf.exit30, %144
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit30 ], [ %indvars.iv.next, %144 ]
  %145 = or disjoint i64 %indvars.iv, %139, !dbg !39
  %146 = getelementptr bfloat, ptr addrspace(1) %2, i64 %145, !dbg !40
  %147 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %146, i1 true) #5, !dbg !41
  %148 = bitcast i16 %147 to bfloat, !dbg !41
  %149 = fpext bfloat %148 to float, !dbg !42
  %150 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !43
  %151 = or i32 %17, %150, !dbg !43
  %152 = sext i32 %151 to i64, !dbg !44
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !44
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %153, i1 %13) #5, !dbg !45
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !45
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !45
  %157 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !45
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !45
  %159 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !45
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !45
  %161 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !45
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !45
  %163 = getelementptr bfloat, ptr addrspace(1) %1, i64 %152, !dbg !46
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %163, i1 %13) #5, !dbg !47
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !47
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !47
  %167 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !47
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !47
  %169 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !47
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !47
  %171 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !47
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %173 = bitcast float %149 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %173, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %174 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !49
  %175 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !50
  %176 = fadd <2 x float> %174, %175, !dbg !51
  %177 = fmul <2 x float> %143, %176, !dbg !38
  %178 = load <2 x float>, ptr addrspace(3) %136, align 16, !dbg !48
  %179 = fmul <2 x float> %178, %177, !dbg !48
  %180 = fptrunc <2 x float> %179 to <2 x bfloat>, !dbg !52
  %181 = fpext <2 x bfloat> %158 to <2 x float>, !dbg !49
  %182 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !50
  %183 = fadd <2 x float> %181, %182, !dbg !51
  %184 = fmul <2 x float> %143, %183, !dbg !38
  %185 = load <2 x float>, ptr addrspace(3) %140, align 8, !dbg !48
  %186 = fmul <2 x float> %185, %184, !dbg !48
  %187 = fptrunc <2 x float> %186 to <2 x bfloat>, !dbg !52
  %188 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !49
  %189 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !50
  %190 = fadd <2 x float> %188, %189, !dbg !51
  %191 = fmul <2 x float> %143, %190, !dbg !38
  %192 = load <2 x float>, ptr addrspace(3) %138, align 16, !dbg !48
  %193 = fmul <2 x float> %192, %191, !dbg !48
  %194 = fptrunc <2 x float> %193 to <2 x bfloat>, !dbg !52
  %195 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !49
  %196 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !50
  %197 = fadd <2 x float> %195, %196, !dbg !51
  %198 = fmul <2 x float> %143, %197, !dbg !38
  %199 = load <2 x float>, ptr addrspace(3) %141, align 8, !dbg !48
  %200 = fmul <2 x float> %199, %198, !dbg !48
  %201 = fptrunc <2 x float> %200 to <2 x bfloat>, !dbg !52
  %202 = bitcast <2 x bfloat> %180 to i32, !dbg !52
  %203 = bitcast <2 x bfloat> %187 to i32, !dbg !52
  %204 = bitcast <2 x bfloat> %194 to i32, !dbg !52
  %205 = bitcast <2 x bfloat> %201 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %153, i1 %13) #5, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !37
  %206 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !37
  br i1 %206, label %144, label %207, !dbg !37

207:                                              ; preds = %144
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py", directory: "/tmp/torchinductor_root/df")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 43, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 45, scope: !6)
!19 = !DILocation(line: 36, column: 38, scope: !6)
!20 = !DILocation(line: 36, column: 55, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 116, scope: !6)
!24 = !DILocation(line: 37, column: 112, scope: !6)
!25 = !DILocation(line: 38, column: 22, scope: !6)
!26 = !DILocation(line: 40, column: 22, scope: !6)
!27 = !DILocation(line: 42, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 44, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 57, column: 24, scope: !6)
!35 = !DILocation(line: 59, column: 24, scope: !6)
!36 = !DILocation(line: 60, column: 32, scope: !6)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 46, column: 31, scope: !6)
!40 = !DILocation(line: 51, column: 34, scope: !6)
!41 = !DILocation(line: 51, column: 41, scope: !6)
!42 = !DILocation(line: 51, column: 94, scope: !6)
!43 = !DILocation(line: 52, column: 45, scope: !6)
!44 = !DILocation(line: 52, column: 38, scope: !6)
!45 = !DILocation(line: 52, column: 55, scope: !6)
!46 = !DILocation(line: 53, column: 35, scope: !6)
!47 = !DILocation(line: 53, column: 52, scope: !6)
!48 = !DILocation(line: 63, column: 23, scope: !6)
!49 = !DILocation(line: 52, column: 117, scope: !6)
!50 = !DILocation(line: 53, column: 114, scope: !6)
!51 = !DILocation(line: 54, column: 23, scope: !6)
!52 = !DILocation(line: 64, column: 56, scope: !6)
!53 = !DILocation(line: 45, column: 4, scope: !6)
