#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [8, 2], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0)
#loc1 = loc(unknown)
#loc26 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":44:25)
#loc52 = loc(callsite(#loc1 at #loc26))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 16 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4.096000e+03> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999997E-7> : tensor<8x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x512xbf16, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<1x512xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<8x512xbf16, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<1x512xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4096> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<8x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %9 = tt.expand_dims %7 {axis = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x512xi32, #blocked> loc(#loc7)
    %10 = tt.expand_dims %8 {axis = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x512xi32, #blocked1> loc(#loc7)
    %11 = arith.muli %5, %cst_7 : tensor<8x1xi32, #blocked> loc(#loc8)
    %12 = tt.broadcast %11 : tensor<8x1xi32, #blocked> -> tensor<8x512xi32, #blocked> loc(#loc9)
    %13 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc10)
    %14 = tt.broadcast %6 : tensor<8x1xi1, #blocked> -> tensor<8x512xi1, #blocked> loc(#loc11)
    %15 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc12)
    %16 = scf.for %arg5 = %c0_i32 to %c4096_i32 step %c512_i32 iter_args(%arg6 = %cst) -> (tensor<8x512xf32, #blocked>)  : i32 {
      %24 = tt.splat %arg5 : i32 -> tensor<1x512xi32, #blocked> loc(#loc14)
      %25 = arith.addi %24, %9 : tensor<1x512xi32, #blocked> loc(#loc14)
      %26 = arith.cmpi slt, %25, %cst_6 : tensor<1x512xi32, #blocked> loc(#loc15)
      %27 = tt.broadcast %25 : tensor<1x512xi32, #blocked> -> tensor<8x512xi32, #blocked> loc(#loc9)
      %28 = arith.addi %27, %12 : tensor<8x512xi32, #blocked> loc(#loc9)
      %29 = tt.addptr %13, %28 : tensor<8x512x!tt.ptr<bf16>, #blocked>, tensor<8x512xi32, #blocked> loc(#loc10)
      %30 = tt.broadcast %26 : tensor<1x512xi1, #blocked> -> tensor<8x512xi1, #blocked> loc(#loc11)
      %31 = arith.andi %14, %30 : tensor<8x512xi1, #blocked> loc(#loc11)
      %32 = tt.load %29, %31, %cst_4 evictionPolicy = evict_last : tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc16)
      %33 = arith.extf %32 : tensor<8x512xbf16, #blocked> to tensor<8x512xf32, #blocked> loc(#loc17)
      %34 = tt.addptr %15, %28 : tensor<8x512x!tt.ptr<bf16>, #blocked>, tensor<8x512xi32, #blocked> loc(#loc12)
      %35 = tt.load %34, %31, %cst_4 evictionPolicy = evict_last : tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc18)
      %36 = arith.extf %35 : tensor<8x512xbf16, #blocked> to tensor<8x512xf32, #blocked> loc(#loc19)
      %37 = arith.addf %33, %36 : tensor<8x512xf32, #blocked> loc(#loc20)
      %38 = arith.mulf %37, %37 : tensor<8x512xf32, #blocked> loc(#loc21)
      %39 = arith.addf %arg6, %38 : tensor<8x512xf32, #blocked> loc(#loc22)
      %40 = arith.select %31, %39, %arg6 : tensor<8x512xi1, #blocked>, tensor<8x512xf32, #blocked> loc(#loc23)
      scf.yield %40 : tensor<8x512xf32, #blocked> loc(#loc24)
    } loc(#loc13)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc26)), %arg6: f32 loc(callsite(#loc1 at #loc26))):
      %24 = arith.addf %arg5, %arg6 : f32 loc(#loc54)
      tt.reduce.return %24 : f32 loc(#loc51)
    }) : (tensor<8x512xf32, #blocked>) -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc51)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc28)
    %19 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x512x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %20 = arith.divf %18, %cst_0 : tensor<8x1xf32, #blocked> loc(#loc30)
    %21 = arith.addf %20, %cst_1 : tensor<8x1xf32, #blocked> loc(#loc31)
    %22 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc32)
    %23 = tt.broadcast %22 : tensor<8x1xf32, #blocked> -> tensor<8x512xf32, #blocked> loc(#loc33)
    scf.for %arg5 = %c0_i32 to %c4096_i32 step %c512_i32  : i32 {
      %24 = tt.splat %arg5 : i32 -> tensor<1x512xi32, #blocked> loc(#loc35)
      %25 = tt.splat %arg5 : i32 -> tensor<1x512xi32, #blocked1> loc(#loc35)
      %26 = arith.addi %24, %9 : tensor<1x512xi32, #blocked> loc(#loc35)
      %27 = arith.addi %25, %10 : tensor<1x512xi32, #blocked1> loc(#loc35)
      %28 = arith.cmpi slt, %26, %cst_6 : tensor<1x512xi32, #blocked> loc(#loc36)
      %29 = arith.cmpi slt, %27, %cst_3 : tensor<1x512xi32, #blocked1> loc(#loc36)
      %30 = tt.addptr %19, %27 : tensor<1x512x!tt.ptr<bf16>, #blocked1>, tensor<1x512xi32, #blocked1> loc(#loc29)
      %31 = tt.load %30, %29, %cst_2 evictionPolicy = evict_last : tensor<1x512x!tt.ptr<bf16>, #blocked1> loc(#loc37)
      %32 = arith.extf %31 : tensor<1x512xbf16, #blocked1> to tensor<1x512xf32, #blocked1> loc(#loc38)
      %33 = tt.broadcast %26 : tensor<1x512xi32, #blocked> -> tensor<8x512xi32, #blocked> loc(#loc39)
      %34 = arith.addi %33, %12 : tensor<8x512xi32, #blocked> loc(#loc39)
      %35 = tt.addptr %13, %34 : tensor<8x512x!tt.ptr<bf16>, #blocked>, tensor<8x512xi32, #blocked> loc(#loc40)
      %36 = tt.broadcast %28 : tensor<1x512xi1, #blocked> -> tensor<8x512xi1, #blocked> loc(#loc41)
      %37 = arith.andi %14, %36 : tensor<8x512xi1, #blocked> loc(#loc41)
      %38 = tt.load %35, %37, %cst_4 evictionPolicy = evict_first : tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc42)
      %39 = arith.extf %38 : tensor<8x512xbf16, #blocked> to tensor<8x512xf32, #blocked> loc(#loc43)
      %40 = tt.addptr %15, %34 : tensor<8x512x!tt.ptr<bf16>, #blocked>, tensor<8x512xi32, #blocked> loc(#loc44)
      %41 = tt.load %40, %37, %cst_4 evictionPolicy = evict_first : tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc45)
      %42 = arith.extf %41 : tensor<8x512xbf16, #blocked> to tensor<8x512xf32, #blocked> loc(#loc46)
      %43 = arith.addf %39, %42 : tensor<8x512xf32, #blocked> loc(#loc47)
      %44 = arith.mulf %43, %23 : tensor<8x512xf32, #blocked> loc(#loc33)
      %45 = ttg.convert_layout %32 : tensor<1x512xf32, #blocked1> -> tensor<1x512xf32, #blocked> loc(#loc48)
      %46 = tt.broadcast %45 : tensor<1x512xf32, #blocked> -> tensor<8x512xf32, #blocked> loc(#loc48)
      %47 = arith.mulf %46, %44 : tensor<8x512xf32, #blocked> loc(#loc48)
      %48 = arith.truncf %47 : tensor<8x512xf32, #blocked> to tensor<8x512xbf16, #blocked> loc(#loc49)
      tt.store %35, %48, %37 : tensor<8x512x!tt.ptr<bf16>, #blocked> loc(#loc49)
    } loc(#loc34)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":23:28)
#loc3 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":23:33)
#loc4 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":24:44)
#loc5 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":24:23)
#loc6 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":25:21)
#loc7 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":26:37)
#loc8 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:50)
#loc9 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:45)
#loc10 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:38)
#loc11 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:63)
#loc12 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":37:34)
#loc13 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":30:40)
#loc14 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":31:31)
#loc15 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":32:29)
#loc16 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:55)
#loc17 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":36:116)
#loc18 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":37:51)
#loc19 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":37:112)
#loc20 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":38:22)
#loc21 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":40:22)
#loc22 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":42:23)
#loc23 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":43:48)
#loc24 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":43:8)
#loc25 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":286:36)
#loc27 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":256:15)
#loc28 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":44:28)
#loc29 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":51:34)
#loc30 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":57:24)
#loc31 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":59:24)
#loc32 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":60:32)
#loc33 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":61:24)
#loc34 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":45:40)
#loc35 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":46:31)
#loc36 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":47:29)
#loc37 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":51:41)
#loc38 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":51:94)
#loc39 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":52:45)
#loc40 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":52:38)
#loc41 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":52:63)
#loc42 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":52:55)
#loc43 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":52:117)
#loc44 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":53:35)
#loc45 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":53:52)
#loc46 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":53:114)
#loc47 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":54:23)
#loc48 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":63:23)
#loc49 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":64:56)
#loc50 = loc("/tmp/torchinductor_root/df/cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py":45:4)
#loc51 = loc(callsite(#loc25 at #loc26))
#loc53 = loc(callsite(#loc27 at #loc25))
#loc54 = loc(callsite(#loc53 at #loc26))
