; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_native_layer_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 31, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = shl i32 %11, 2, !dbg !10
  %15 = and i32 %14, 1020, !dbg !10
  %16 = icmp samesign ult i32 %15, 768, !dbg !11
  %17 = mul i32 %10, 768, !dbg !12
  %18 = add i32 %15, %17, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !14
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %16) #5, !dbg !15
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !15
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %19, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %16) #5, !dbg !17
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !17
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = zext nneg i32 %15 to i64, !dbg !18
  %33 = getelementptr bfloat, ptr addrspace(1) %2, i64 %32, !dbg !18
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %16) #5, !dbg !19
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !19
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !19
  %37 = extractvalue { i32, i32 } %34, 1, !dbg !19
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !19
  %39 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !20
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %39, i1 %16) #5, !dbg !21
  %41 = getelementptr bfloat, ptr addrspace(1) %4, i64 %32, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %16) #5, !dbg !23
  %43 = and i32 %13, 7, !dbg !24
  %44 = icmp eq i32 %12, 0, !dbg !24
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %43, !dbg !24
  %46 = icmp slt i32 %11, 8, !dbg !24
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !24
  %48 = and i32 %11, 7, !dbg !24
  %49 = icmp eq i32 %48, 0, !dbg !24
  %50 = and i1 %46, %49, !dbg !24
  %51 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !28
  %52 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !29
  %53 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !30
  %54 = fadd <2 x float> %52, %53, !dbg !31
  %55 = fadd <2 x float> %54, %51, !dbg !32
  %56 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !28
  %57 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !29
  %58 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !30
  %59 = fadd <2 x float> %57, %58, !dbg !31
  %60 = fadd <2 x float> %59, %56, !dbg !32
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %61 = fadd <2 x float> %60, %shift, !dbg !33
  %62 = fadd <2 x float> %55, %61, !dbg !33
  %shift1 = shufflevector <2 x float> %55, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %63 = fadd <2 x float> %shift1, %62, !dbg !33
  %64 = extractelement <2 x float> %63, i64 0, !dbg !33
  %65 = select i1 %16, float %64, float 0.000000e+00, !dbg !33
  %66 = bitcast float %65 to i32, !dbg !24
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = fadd float %65, %68, !dbg !33
  %70 = bitcast float %69 to i32, !dbg !24
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !24
  %72 = bitcast i32 %71 to float, !dbg !24
  %73 = fadd float %69, %72, !dbg !33
  %74 = bitcast float %73 to i32, !dbg !24
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !24
  %76 = bitcast i32 %75 to float, !dbg !24
  %77 = fadd float %73, %76, !dbg !33
  %78 = bitcast float %77 to i32, !dbg !24
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = fadd float %77, %80, !dbg !33
  %82 = bitcast float %81 to i32, !dbg !24
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = fadd float %81, %84, !dbg !33
  %86 = bitcast float %85 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %86, i1 %44) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %46) #5, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = fadd float %88, %90, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !24
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = fadd float %91, %94, !dbg !33
  %96 = bitcast float %95 to i32, !dbg !24
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !24
  %98 = bitcast i32 %97 to float, !dbg !24
  %99 = fadd float %95, %98, !dbg !33
  %100 = bitcast float %99 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %100, i1 %50) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %101 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %102 = fadd float %101, 0.000000e+00, !dbg !35
  %103 = tail call float @llvm.nvvm.div.full(float %102, float 7.680000e+02), !dbg !39
  %104 = insertelement <2 x float> poison, float %103, i64 0, !dbg !40
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %106 = fsub <2 x float> %60, %105, !dbg !40
  %107 = fsub <2 x float> %55, %105, !dbg !40
  %108 = fmul <2 x float> %106, %106, !dbg !41
  %109 = fmul <2 x float> %106, %106, !dbg !41
  %110 = fmul <2 x float> %107, %107, !dbg !41
  %111 = fmul <2 x float> %107, %107, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift2 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %112 = fadd <2 x float> %108, %shift2, !dbg !44
  %113 = fadd <2 x float> %110, %112, !dbg !44
  %shift3 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %114 = fadd <2 x float> %shift3, %113, !dbg !44
  %115 = extractelement <2 x float> %114, i64 0, !dbg !44
  %116 = select i1 %16, float %115, float 0.000000e+00, !dbg !44
  %117 = bitcast float %116 to i32, !dbg !42
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !42
  %119 = bitcast i32 %118 to float, !dbg !42
  %120 = fadd float %116, %119, !dbg !44
  %121 = bitcast float %120 to i32, !dbg !42
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !42
  %123 = bitcast i32 %122 to float, !dbg !42
  %124 = fadd float %120, %123, !dbg !44
  %125 = bitcast float %124 to i32, !dbg !42
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !42
  %127 = bitcast i32 %126 to float, !dbg !42
  %128 = fadd float %124, %127, !dbg !44
  %129 = bitcast float %128 to i32, !dbg !42
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !42
  %131 = bitcast i32 %130 to float, !dbg !42
  %132 = fadd float %128, %131, !dbg !44
  %133 = bitcast float %132 to i32, !dbg !42
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !42
  %135 = bitcast i32 %134 to float, !dbg !42
  %136 = fadd float %132, %135, !dbg !44
  %137 = bitcast float %136 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %137, i1 %44) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %138 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %46) #5, !dbg !42
  %139 = bitcast i32 %138 to float, !dbg !42
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !42
  %141 = bitcast i32 %140 to float, !dbg !42
  %142 = fadd float %139, %141, !dbg !44
  %143 = bitcast float %142 to i32, !dbg !42
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !42
  %145 = bitcast i32 %144 to float, !dbg !42
  %146 = fadd float %142, %145, !dbg !44
  %147 = bitcast float %146 to i32, !dbg !42
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !42
  %149 = bitcast i32 %148 to float, !dbg !42
  %150 = fadd float %146, %149, !dbg !44
  %151 = bitcast float %150 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %151, i1 %50) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %152 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %153 = fadd float %152, 0.000000e+00, !dbg !45
  %154 = tail call float @llvm.nvvm.div.full(float %153, float 7.680000e+02), !dbg !47
  %155 = fadd float %154, 0x3EE4F8B580000000, !dbg !48
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %156, 0, !dbg !49
  br i1 %.not.i, label %159, label %157, !dbg !49

157:                                              ; preds = %9
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

159:                                              ; preds = %9
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %157, %159
  %.0.i = phi float [ %158, %157 ], [ %160, %159 ], !dbg !49
  %161 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !23
  %163 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !23
  %165 = extractvalue { i32, i32 } %40, 1, !dbg !21
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !21
  %167 = extractvalue { i32, i32 } %40, 0, !dbg !21
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !21
  %169 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !50
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %171 = fmul <2 x float> %106, %170, !dbg !50
  %172 = fmul <2 x float> %107, %170, !dbg !50
  %173 = getelementptr bfloat, ptr addrspace(1) %5, i64 %19, !dbg !51
  %174 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !52
  %175 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !53
  %176 = fmul <2 x float> %171, %175, !dbg !54
  %177 = fadd <2 x float> %176, %174, !dbg !55
  %178 = fptrunc <2 x float> %177 to <2 x bfloat>, !dbg !56
  %179 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !52
  %180 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !53
  %181 = fmul <2 x float> %172, %180, !dbg !54
  %182 = fadd <2 x float> %181, %179, !dbg !55
  %183 = fptrunc <2 x float> %182 to <2 x bfloat>, !dbg !56
  %184 = bitcast <2 x bfloat> %178 to i32, !dbg !56
  %185 = bitcast <2 x bfloat> %183 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %173, i1 %16) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd2jvwtfgrp76h2uwwupoyeci5thxcq4nhlzmamxbf7zxofrejh5.py", directory: "/tmp/torchinductor_root/d2")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_7, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_7", linkageName: "triton_per_fused_add_native_layer_norm_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 41, scope: !6)
!13 = !DILocation(line: 35, column: 37, scope: !6)
!14 = !DILocation(line: 35, column: 30, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 37, scope: !6)
!20 = !DILocation(line: 38, column: 31, scope: !6)
!21 = !DILocation(line: 38, column: 38, scope: !6)
!22 = !DILocation(line: 39, column: 31, scope: !6)
!23 = !DILocation(line: 39, column: 38, scope: !6)
!24 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 47, column: 59, scope: !6)
!28 = !DILocation(line: 35, column: 69, scope: !6)
!29 = !DILocation(line: 36, column: 69, scope: !6)
!30 = !DILocation(line: 37, column: 90, scope: !6)
!31 = !DILocation(line: 40, column: 18, scope: !6)
!32 = !DILocation(line: 41, column: 18, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !27)
!34 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!35 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 47, column: 45, scope: !6)
!39 = !DILocation(line: 50, column: 21, scope: !6)
!40 = !DILocation(line: 51, column: 19, scope: !6)
!41 = !DILocation(line: 52, column: 20, scope: !6)
!42 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !43)
!43 = !DILocation(line: 55, column: 59, scope: !6)
!44 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 45, scope: !6)
!47 = !DILocation(line: 58, column: 21, scope: !6)
!48 = !DILocation(line: 60, column: 20, scope: !6)
!49 = !DILocation(line: 61, column: 28, scope: !6)
!50 = !DILocation(line: 62, column: 20, scope: !6)
!51 = !DILocation(line: 68, column: 25, scope: !6)
!52 = !DILocation(line: 39, column: 91, scope: !6)
!53 = !DILocation(line: 38, column: 91, scope: !6)
!54 = !DILocation(line: 64, column: 20, scope: !6)
!55 = !DILocation(line: 66, column: 20, scope: !6)
!56 = !DILocation(line: 68, column: 48, scope: !6)
!57 = !DILocation(line: 68, column: 4, scope: !6)
