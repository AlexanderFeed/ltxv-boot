; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 57, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 16, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = and i32 %18, 63, !dbg !19
  %23 = or disjoint i32 %14, %22, !dbg !20
  %24 = shl nsw i32 %13, 6, !dbg !21
  %25 = or disjoint i32 %24, %22, !dbg !22
  %26 = srem i32 %23, 3600, !dbg !23
  %27 = srem i32 %25, 3072, !dbg !24
  %28 = shl i32 %15, 4, !dbg !25
  %29 = and i32 %28, 48, !dbg !25
  %30 = mul nsw i32 %26, 3072, !dbg !26
  %31 = mul nsw i32 %27, 3072, !dbg !27
  %32 = or disjoint i32 %30, %29, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = shl i32 %15, 1, !dbg !30
  %36 = and i32 %35, 48, !dbg !30
  %37 = xor i32 %36, %29, !dbg !30
  %38 = shl nuw nsw i32 %22, 6, !dbg !30
  %39 = or disjoint i32 %37, %38, !dbg !30
  %40 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %39, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %40, ptr addrspace(1) %34, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %41 = or disjoint i32 %31, %29, !dbg !31
  %42 = sext i32 %41 to i64, !dbg !32
  %43 = getelementptr i8, ptr addrspace(1) %1, i64 %42, !dbg !32
  %44 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %39, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %44, ptr addrspace(1) %43, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %45 = or disjoint i32 %29, 64, !dbg !34
  %46 = or disjoint i32 %30, %45, !dbg !28
  %47 = sext i32 %46 to i64, !dbg !29
  %48 = getelementptr i8, ptr addrspace(1) %0, i64 %47, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %49 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %39, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %48, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %50 = or disjoint i32 %31, %45, !dbg !31
  %51 = sext i32 %50 to i64, !dbg !32
  %52 = getelementptr i8, ptr addrspace(1) %1, i64 %51, !dbg !32
  %53 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %39, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %53, ptr addrspace(1) %52, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op21 = or disjoint i32 %19, 32, !dbg !35
  %invariant.op23 = or disjoint i32 %29, 128, !dbg !35
  %invariant.op25 = or disjoint i32 %invariant.op23, %30, !dbg !35
  %invariant.op27 = or disjoint i32 %invariant.op23, %31, !dbg !35
  %54 = shl i32 %15, 3
  %55 = and i32 %54, 16
  %56 = and i32 %54, 32
  %57 = and i32 %54, 48
  %58 = and i32 %15, 7
  %59 = and i32 %15, 15
  %60 = xor i32 %57, %17
  %61 = lshr exact i32 %21, 3
  %62 = or disjoint i32 %61, %59
  %63 = shl nuw nsw i32 %62, 6
  %64 = or disjoint i32 %63, %60
  %65 = or disjoint i32 %55, 32
  %66 = or disjoint i32 %56, %17
  %67 = xor i32 %66, %65
  %68 = or disjoint i32 %67, %63
  %.reass = or disjoint i32 %58, %invariant.op
  %69 = or disjoint i32 %.reass, %61
  %70 = shl nuw nsw i32 %69, 6
  %71 = or disjoint i32 %70, %60
  %72 = or disjoint i32 %67, %70
  %.reass20 = xor i32 %57, %36
  %73 = or disjoint i32 %58, %19
  %74 = or disjoint i32 %73, %20
  %75 = shl nuw nsw i32 %74, 6
  %76 = or disjoint i32 %75, %.reass20
  %.reass22 = or disjoint i32 %58, %invariant.op21
  %77 = or disjoint i32 %.reass22, %20
  %78 = shl nuw nsw i32 %77, 6
  %79 = or disjoint i32 %78, %.reass20
  %80 = sext i32 %invariant.op27 to i64, !dbg !35
  %81 = sext i32 %invariant.op25 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %81, !dbg !35
  %invariant.gep64 = getelementptr i8, ptr addrspace(1) %1, i64 %80, !dbg !35
  br label %82, !dbg !35

82:                                               ; preds = %4, %82
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %82 ]
  %83 = phi i32 [ -1, %4 ], [ %104, %82 ]
  %84 = phi i32 [ 1, %4 ], [ %192, %82 ]
  %85 = phi i32 [ 0, %4 ], [ %171, %82 ]
  %86 = phi i32 [ 0, %4 ], [ %172, %82 ]
  %87 = phi i32 [ 0, %4 ], [ %173, %82 ]
  %88 = phi i32 [ 0, %4 ], [ %174, %82 ]
  %89 = phi i32 [ 0, %4 ], [ %176, %82 ]
  %90 = phi i32 [ 0, %4 ], [ %177, %82 ]
  %91 = phi i32 [ 0, %4 ], [ %178, %82 ]
  %92 = phi i32 [ 0, %4 ], [ %179, %82 ]
  %93 = phi i32 [ 0, %4 ], [ %181, %82 ]
  %94 = phi i32 [ 0, %4 ], [ %182, %82 ]
  %95 = phi i32 [ 0, %4 ], [ %183, %82 ]
  %96 = phi i32 [ 0, %4 ], [ %184, %82 ]
  %97 = phi i32 [ 0, %4 ], [ %186, %82 ]
  %98 = phi i32 [ 0, %4 ], [ %187, %82 ]
  %99 = phi i32 [ 0, %4 ], [ %188, %82 ]
  %100 = phi i32 [ 0, %4 ], [ %189, %82 ]
  %101 = icmp samesign ult i64 %indvars.iv, 46, !dbg !35
  %102 = add i32 %83, 1, !dbg !35
  %103 = icmp slt i32 %102, 2, !dbg !35
  %104 = select i1 %103, i32 %102, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %105 = shl i32 %104, 12, !dbg !30
  %106 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !30
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) %106, i32 %64, !dbg !30
  %108 = ptrtoint ptr addrspace(3) %107 to i32, !dbg !30
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %108) #1, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !30
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %106, i32 %68, !dbg !30
  %115 = ptrtoint ptr addrspace(3) %114 to i32, !dbg !30
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %115) #1, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !30
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) %106, i32 %71, !dbg !30
  %122 = ptrtoint ptr addrspace(3) %121 to i32, !dbg !30
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %122) #1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !30
  %128 = getelementptr inbounds nuw i8, ptr addrspace(3) %106, i32 %72, !dbg !30
  %129 = ptrtoint ptr addrspace(3) %128 to i32, !dbg !30
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %129) #1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !30
  %135 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %105, !dbg !33
  %136 = getelementptr inbounds nuw i8, ptr addrspace(3) %135, i32 %76, !dbg !33
  %137 = ptrtoint ptr addrspace(3) %136 to i32, !dbg !33
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %137) #1, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !33
  %143 = getelementptr inbounds nuw i8, ptr addrspace(3) %135, i32 %79, !dbg !33
  %144 = ptrtoint ptr addrspace(3) %143 to i32, !dbg !33
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %144) #1, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !33
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %85, i32 %86, i32 %87, i32 %88, i32 %110, i32 %111, i32 %112, i32 %113, i32 %139, i32 %140) #1, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !36
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %89, i32 %90, i32 %91, i32 %92, i32 %110, i32 %111, i32 %112, i32 %113, i32 %146, i32 %147) #1, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !36
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %93, i32 %94, i32 %95, i32 %96, i32 %124, i32 %125, i32 %126, i32 %127, i32 %139, i32 %140) #1, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !36
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %97, i32 %98, i32 %99, i32 %100, i32 %124, i32 %125, i32 %126, i32 %127, i32 %146, i32 %147) #1, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !36
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %151, i32 %152, i32 %153, i32 %154, i32 %117, i32 %118, i32 %119, i32 %120, i32 %141, i32 %142) #1, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !36
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %156, i32 %157, i32 %158, i32 %159, i32 %117, i32 %118, i32 %119, i32 %120, i32 %148, i32 %149) #1, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !36
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %161, i32 %162, i32 %163, i32 %164, i32 %131, i32 %132, i32 %133, i32 %134, i32 %141, i32 %142) #1, !dbg !36
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !36
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !36
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %166, i32 %167, i32 %168, i32 %169, i32 %131, i32 %132, i32 %133, i32 %134, i32 %148, i32 %149) #1, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !36
  %190 = add i32 %84, 1, !dbg !35
  %191 = icmp slt i32 %190, 2, !dbg !35
  %192 = select i1 %191, i32 %190, i32 0, !dbg !35
  %193 = shl nuw nsw i64 %indvars.iv, 6, !dbg !37
  %gep63 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %193, !dbg !29
  %194 = shl i32 %192, 12, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %gep = getelementptr i8, ptr addrspace(3) %40, i32 %194, !dbg !30
  %195 = select i1 %101, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep63, i32 %195) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep65 = getelementptr i8, ptr addrspace(1) %invariant.gep64, i64 %193, !dbg !32
  %gep30 = getelementptr i8, ptr addrspace(3) %44, i32 %194, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep30, ptr addrspace(1) %gep65, i32 %195) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 48, !dbg !35
  br i1 %exitcond.not, label %196, label %82, !dbg !35

196:                                              ; preds = %82
  %197 = shl i32 %15, 2, !dbg !19
  %198 = and i32 %197, 60, !dbg !19
  %199 = or disjoint i32 %24, %198, !dbg !22
  %200 = lshr i32 %15, 4, !dbg !19
  %201 = and i32 %200, 15, !dbg !19
  %202 = or disjoint i32 %201, %14, !dbg !20
  %203 = or disjoint i32 %202, 48, !dbg !20
  %204 = or disjoint i32 %202, 32, !dbg !20
  %205 = or disjoint i32 %202, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %206 = icmp slt i32 %202, 3600, !dbg !38
  %207 = icmp slt i32 %205, 3600, !dbg !38
  %208 = icmp slt i32 %204, 3600, !dbg !38
  %209 = icmp slt i32 %203, 3600, !dbg !38
  %210 = icmp slt i32 %199, 3072, !dbg !39
  %211 = and i1 %206, %210, !dbg !40
  %212 = and i1 %207, %210, !dbg !40
  %213 = and i1 %208, %210, !dbg !40
  %214 = and i1 %209, %210, !dbg !40
  %215 = mul i32 %202, 3072, !dbg !41
  %216 = mul i32 %205, 3072, !dbg !41
  %217 = mul i32 %204, 3072, !dbg !41
  %218 = mul i32 %203, 3072, !dbg !41
  %219 = add i32 %215, %199, !dbg !42
  %220 = add i32 %216, %199, !dbg !42
  %221 = add i32 %217, %199, !dbg !42
  %222 = add i32 %218, %199, !dbg !42
  %223 = sext i32 %219 to i64, !dbg !43
  %224 = getelementptr i32, ptr addrspace(1) %2, i64 %223, !dbg !43
  %225 = sext i32 %220 to i64, !dbg !43
  %226 = getelementptr i32, ptr addrspace(1) %2, i64 %225, !dbg !43
  %227 = sext i32 %221 to i64, !dbg !43
  %228 = getelementptr i32, ptr addrspace(1) %2, i64 %227, !dbg !43
  %229 = sext i32 %222 to i64, !dbg !43
  %230 = getelementptr i32, ptr addrspace(1) %2, i64 %229, !dbg !43
  %231 = shl i32 %15, 1, !dbg !44
  %232 = and i32 %231, 6, !dbg !44
  %233 = and i32 %28, 192, !dbg !44
  %234 = or disjoint i32 %233, %232, !dbg !44
  %235 = shl nuw nsw i32 %17, 4, !dbg !44
  %236 = or disjoint i32 %234, %235, !dbg !44
  %237 = shl nuw nsw i32 %21, 3, !dbg !44
  %238 = or disjoint i32 %236, %237, !dbg !44
  %239 = and i32 %18, 24, !dbg !44
  %240 = or disjoint i32 %239, %238, !dbg !44
  %241 = and i32 %197, 1020, !dbg !44
  %242 = lshr i32 %238, 4, !dbg !44
  %243 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %242, !dbg !44
  %244 = getelementptr inbounds nuw i32, ptr addrspace(3) %243, i32 %240, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %244, i32 %171, i32 %172, i1 true) #1, !dbg !44
  %245 = or disjoint i32 %240, 512, !dbg !44
  %246 = lshr i32 %245, 4, !dbg !44
  %247 = and i32 %246, 268435452, !dbg !44
  %248 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %247, !dbg !44
  %249 = getelementptr i32, ptr addrspace(3) %248, i32 %245, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %249, i32 %173, i32 %174, i1 true) #1, !dbg !44
  %250 = or disjoint i32 %240, 32, !dbg !44
  %251 = getelementptr i32, ptr addrspace(3) %243, i32 %250, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %251, i32 %176, i32 %177, i1 true) #1, !dbg !44
  %252 = or disjoint i32 %240, 544, !dbg !44
  %253 = lshr i32 %252, 4, !dbg !44
  %254 = and i32 %253, 268435452, !dbg !44
  %255 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %254, !dbg !44
  %256 = getelementptr i32, ptr addrspace(3) %255, i32 %252, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %256, i32 %178, i32 %179, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %257 = lshr i32 %197, 4, !dbg !44
  %258 = and i32 %257, 60, !dbg !44
  %259 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %258, !dbg !44
  %260 = getelementptr inbounds nuw i32, ptr addrspace(3) %259, i32 %241, !dbg !44
  %261 = load <4 x i32>, ptr addrspace(3) %260, align 16, !dbg !44
  %262 = or disjoint i32 %241, 1024, !dbg !44
  %263 = lshr i32 %262, 4, !dbg !44
  %264 = and i32 %263, 124, !dbg !44
  %265 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %264, !dbg !44
  %266 = getelementptr inbounds nuw i32, ptr addrspace(3) %265, i32 %262, !dbg !44
  %267 = load <4 x i32>, ptr addrspace(3) %266, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %244, i32 %181, i32 %182, i1 true) #1, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %249, i32 %183, i32 %184, i1 true) #1, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %251, i32 %186, i32 %187, i1 true) #1, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %256, i32 %188, i32 %189, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %268 = load <4 x i32>, ptr addrspace(3) %260, align 16, !dbg !44
  %269 = load <4 x i32>, ptr addrspace(3) %266, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %261, i64 0, !dbg !44
  %.extract4 = extractelement <4 x i32> %261, i64 1, !dbg !44
  %.extract5 = extractelement <4 x i32> %261, i64 2, !dbg !44
  %.extract6 = extractelement <4 x i32> %261, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %224, i1 %211) #1, !dbg !44
  %.extract7 = extractelement <4 x i32> %267, i64 0, !dbg !44
  %.extract8 = extractelement <4 x i32> %267, i64 1, !dbg !44
  %.extract9 = extractelement <4 x i32> %267, i64 2, !dbg !44
  %.extract10 = extractelement <4 x i32> %267, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %226, i1 %212) #1, !dbg !44
  %.extract11 = extractelement <4 x i32> %268, i64 0, !dbg !44
  %.extract12 = extractelement <4 x i32> %268, i64 1, !dbg !44
  %.extract13 = extractelement <4 x i32> %268, i64 2, !dbg !44
  %.extract14 = extractelement <4 x i32> %268, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %228, i1 %213) #1, !dbg !44
  %.extract15 = extractelement <4 x i32> %269, i64 0, !dbg !44
  %.extract16 = extractelement <4 x i32> %269, i64 1, !dbg !44
  %.extract17 = extractelement <4 x i32> %269, i64 2, !dbg !44
  %.extract18 = extractelement <4 x i32> %269, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %230, i1 %214) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csatyctod7aq4plzwuzaker5a7qzqicjtqpi5ha3bvrotpdzqvw6.py", directory: "/tmp/torchinductor_root/sa")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
