; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 1, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 5, !dbg !11
  %.lobit = and i32 %14, 1, !dbg !11
  %15 = and i32 %13, 1, !dbg !11
  %16 = or disjoint i32 %.lobit, %12, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !12
  %18 = icmp slt i32 %16, 98688, !dbg !13
  %19 = icmp slt i32 %17, 98688, !dbg !13
  %20 = shl i32 %13, 2, !dbg !14
  %21 = and i32 %20, 124, !dbg !14
  %22 = sdiv i32 %16, 24, !dbg !15
  %23 = mul i32 %22, 24, !dbg !16
  %.decomposed = sub i32 %16, %23, !dbg !16
  %24 = shl i32 %16, 7, !dbg !17
  %25 = or disjoint i32 %24, %21, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr i32, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = sext i32 %22 to i64, !dbg !21
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !22
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !22
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !22
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !22
  %39 = bitcast i16 %38 to bfloat, !dbg !22
  %40 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !23
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !24
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !24
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !24
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !24
  %45 = bitcast i16 %44 to bfloat, !dbg !24
  %46 = shl nsw i32 %.decomposed, 7, !dbg !25
  %47 = or disjoint i32 %46, %21, !dbg !26
  %48 = sext i32 %47 to i64, !dbg !27
  %49 = getelementptr bfloat, ptr addrspace(1) %3, i64 %48, !dbg !27
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %18) #3, !dbg !28
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !28
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !28
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !28
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !28
  %55 = getelementptr bfloat, ptr addrspace(1) %4, i64 %48, !dbg !29
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %18) #3, !dbg !30
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !30
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !30
  %59 = extractvalue { i32, i32 } %56, 1, !dbg !30
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !30
  %.inv = fcmp oge bfloat %39, 0xR0000, !dbg !31
  %61 = select i1 %.inv, bfloat 0xR0000, bfloat %39, !dbg !31
  %62 = fpext bfloat %61 to float, !dbg !31
  %63 = fsub float 0.000000e+00, %62, !dbg !35
  %.inv2 = fcmp ole bfloat %45, 0xR0000, !dbg !36
  %64 = select i1 %.inv2, bfloat 0xR0000, bfloat %45, !dbg !36
  %65 = fpext bfloat %64 to float, !dbg !36
  %66 = fcmp ogt float %63, %65, !dbg !38
  %67 = fcmp uno float %63, 0.000000e+00, !dbg !40
  %68 = or i1 %67, %66, !dbg !41
  %69 = select i1 %68, float %63, float %65, !dbg !42
  %70 = fmul float %69, 0x3F80204080000000, !dbg !43
  %71 = fcmp ogt float %70, 0x3EE4F8B580000000, !dbg !44
  %72 = fcmp uno float %70, 0.000000e+00, !dbg !46
  %73 = or i1 %71, %72, !dbg !47
  %74 = select i1 %73, float %70, float 0x3EE4F8B580000000, !dbg !48
  %75 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !49
  %76 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !50
  %77 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !51
  %78 = insertelement <2 x i32> %77, i32 %30, i64 1, !dbg !51
  %79 = sitofp <2 x i32> %78 to <2 x float>, !dbg !51
  %80 = insertelement <2 x float> poison, float %74, i64 0, !dbg !52
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %82 = fmul <2 x float> %81, %79, !dbg !52
  %83 = fmul <2 x float> %82, %75, !dbg !53
  %84 = fadd <2 x float> %83, %76, !dbg !54
  %85 = fmul <2 x float> %84, %84, !dbg !55
  %86 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !49
  %87 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !50
  %88 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !51
  %89 = insertelement <2 x i32> %88, i32 %32, i64 1, !dbg !51
  %90 = sitofp <2 x i32> %89 to <2 x float>, !dbg !51
  %91 = fmul <2 x float> %81, %90, !dbg !52
  %92 = fmul <2 x float> %91, %86, !dbg !53
  %93 = fadd <2 x float> %92, %87, !dbg !54
  %94 = fmul <2 x float> %93, %93, !dbg !55
  %shift = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %95 = fadd <2 x float> %85, %shift, !dbg !56
  %96 = fadd <2 x float> %94, %95, !dbg !56
  %shift3 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %97 = fadd <2 x float> %shift3, %96, !dbg !56
  %98 = extractelement <2 x float> %97, i64 0, !dbg !56
  %99 = select i1 %18, float %98, float 0.000000e+00, !dbg !56
  %100 = bitcast float %99 to i32, !dbg !61
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !61
  %102 = bitcast i32 %101 to float, !dbg !61
  %103 = fadd float %99, %102, !dbg !56
  %104 = bitcast float %103 to i32, !dbg !61
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !61
  %106 = bitcast i32 %105 to float, !dbg !61
  %107 = fadd float %103, %106, !dbg !56
  %108 = bitcast float %107 to i32, !dbg !61
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !61
  %110 = bitcast i32 %109 to float, !dbg !61
  %111 = fadd float %107, %110, !dbg !56
  %112 = bitcast float %111 to i32, !dbg !61
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !61
  %114 = bitcast i32 %113 to float, !dbg !61
  %115 = fadd float %111, %114, !dbg !56
  %116 = bitcast float %115 to i32, !dbg !61
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !61
  %118 = bitcast i32 %117 to float, !dbg !61
  %119 = fadd float %115, %118, !dbg !56
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !62
  %121 = bitcast float %119 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %122 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !62
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !62
  %124 = getelementptr bfloat, ptr addrspace(1) %5, i64 %26, !dbg !63
  %125 = fptrunc <2 x float> %84 to <2 x bfloat>, !dbg !64
  %126 = fptrunc <2 x float> %93 to <2 x bfloat>, !dbg !64
  %127 = bitcast <2 x bfloat> %125 to i32, !dbg !64
  %128 = bitcast <2 x bfloat> %126 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %124, i1 %18) #3, !dbg !64
  %129 = sext i32 %17 to i64, !dbg !65
  %130 = getelementptr float, ptr addrspace(1) %6, i64 %129, !dbg !65
  %131 = and i32 %13, 62, !dbg !66
  %132 = icmp eq i32 %131, 0, !dbg !66
  %133 = and i1 %132, %19, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %130, i1 %133) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceqrvh7wabbdeykqepa3zmii6o4hoe3ux2wiocyvm5ynym6kf2go.py", directory: "/tmp/torchinductor_root/eq")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_2", linkageName: "triton_per_fused__to_copy_add_mean_pow_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 34, column: 19, scope: !6)
!16 = !DILocation(line: 35, column: 19, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 37, scope: !6)
!19 = !DILocation(line: 36, column: 30, scope: !6)
!20 = !DILocation(line: 36, column: 46, scope: !6)
!21 = !DILocation(line: 37, column: 30, scope: !6)
!22 = !DILocation(line: 37, column: 35, scope: !6)
!23 = !DILocation(line: 38, column: 30, scope: !6)
!24 = !DILocation(line: 38, column: 35, scope: !6)
!25 = !DILocation(line: 39, column: 42, scope: !6)
!26 = !DILocation(line: 39, column: 38, scope: !6)
!27 = !DILocation(line: 39, column: 31, scope: !6)
!28 = !DILocation(line: 39, column: 47, scope: !6)
!29 = !DILocation(line: 40, column: 31, scope: !6)
!30 = !DILocation(line: 40, column: 47, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 43, column: 40, scope: !6)
!35 = !DILocation(line: 44, column: 12, scope: !6)
!36 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 40, scope: !6)
!40 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 48, column: 19, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !45)
!45 = !DILocation(line: 51, column: 42, scope: !6)
!46 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !45)
!48 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !45)
!49 = !DILocation(line: 39, column: 98, scope: !6)
!50 = !DILocation(line: 40, column: 98, scope: !6)
!51 = !DILocation(line: 41, column: 19, scope: !6)
!52 = !DILocation(line: 53, column: 19, scope: !6)
!53 = !DILocation(line: 54, column: 20, scope: !6)
!54 = !DILocation(line: 55, column: 20, scope: !6)
!55 = !DILocation(line: 57, column: 20, scope: !6)
!56 = !DILocation(line: 256, column: 15, scope: !57, inlinedAt: !60)
!57 = distinct !DILexicalBlockFile(scope: !59, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!59 = distinct !DILexicalBlockFile(scope: !6, file: !58, discriminator: 0)
!60 = !DILocation(line: 60, column: 26, scope: !6)
!61 = !DILocation(line: 286, column: 36, scope: !59, inlinedAt: !60)
!62 = !DILocation(line: 60, column: 29, scope: !6)
!63 = !DILocation(line: 61, column: 25, scope: !6)
!64 = !DILocation(line: 61, column: 48, scope: !6)
!65 = !DILocation(line: 62, column: 25, scope: !6)
!66 = !DILocation(line: 62, column: 37, scope: !6)
!67 = !DILocation(line: 62, column: 4, scope: !6)
