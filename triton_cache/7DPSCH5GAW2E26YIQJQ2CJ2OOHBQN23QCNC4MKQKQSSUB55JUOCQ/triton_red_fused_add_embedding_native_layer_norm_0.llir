; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp11 < 77\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 49408\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 6, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 3, !dbg !13
  %15 = and i32 %14, 63, !dbg !13
  %16 = lshr i32 %13, 6, !dbg !13
  %17 = and i32 %16, 7, !dbg !13
  %18 = or disjoint i32 %15, %12, !dbg !14
  %19 = icmp slt i32 %18, 77, !dbg !15
  %20 = shl i32 %13, 3, !dbg !16
  %21 = and i32 %20, 56, !dbg !16
  %22 = sext i32 %18 to i64, !dbg !17
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %19) #6, !dbg !18
  %32 = getelementptr i64, ptr addrspace(1) %2, i64 %22, !dbg !19
  %33 = add i64 %31, 49408, !dbg !20
  %34 = icmp slt i64 %31, 0, !dbg !21
  %35 = select i1 %34, i64 %33, i64 %31, !dbg !22
  %36 = or disjoint i32 %17, %12, !dbg !14
  %37 = or disjoint i32 %36, 8, !dbg !14
  %38 = or disjoint i32 %36, 16, !dbg !14
  %39 = or disjoint i32 %36, 24, !dbg !14
  %40 = or disjoint i32 %36, 32, !dbg !14
  %41 = or disjoint i32 %36, 40, !dbg !14
  %42 = or disjoint i32 %36, 48, !dbg !14
  %43 = or disjoint i32 %36, 56, !dbg !14
  %44 = insertelement <8 x i32> poison, i32 %36, i64 0, !dbg !15
  %45 = insertelement <8 x i32> %44, i32 %37, i64 1, !dbg !15
  %46 = insertelement <8 x i32> %45, i32 %38, i64 2, !dbg !15
  %47 = insertelement <8 x i32> %46, i32 %39, i64 3, !dbg !15
  %48 = insertelement <8 x i32> %47, i32 %40, i64 4, !dbg !15
  %49 = insertelement <8 x i32> %48, i32 %41, i64 5, !dbg !15
  %50 = insertelement <8 x i32> %49, i32 %42, i64 6, !dbg !15
  %51 = insertelement <8 x i32> %50, i32 %43, i64 7, !dbg !15
  %52 = icmp slt <8 x i32> %51, splat (i32 77), !dbg !15
  %53 = sext i32 %36 to i64, !dbg !17
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !17
  %55 = sext i32 %37 to i64, !dbg !17
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55, !dbg !17
  %57 = sext i32 %38 to i64, !dbg !17
  %58 = getelementptr i64, ptr addrspace(1) %0, i64 %57, !dbg !17
  %59 = sext i32 %39 to i64, !dbg !17
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !17
  %61 = sext i32 %40 to i64, !dbg !17
  %62 = getelementptr i64, ptr addrspace(1) %0, i64 %61, !dbg !17
  %63 = sext i32 %41 to i64, !dbg !17
  %64 = getelementptr i64, ptr addrspace(1) %0, i64 %63, !dbg !17
  %65 = sext i32 %42 to i64, !dbg !17
  %66 = getelementptr i64, ptr addrspace(1) %0, i64 %65, !dbg !17
  %67 = sext i32 %43 to i64, !dbg !17
  %68 = getelementptr i64, ptr addrspace(1) %0, i64 %67, !dbg !17
  %69 = extractelement <8 x i1> %52, i64 0, !dbg !23
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %69) #6, !dbg !18
  %71 = extractelement <8 x i1> %52, i64 1, !dbg !23
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %71) #6, !dbg !18
  %73 = extractelement <8 x i1> %52, i64 2, !dbg !23
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %73) #6, !dbg !18
  %75 = extractelement <8 x i1> %52, i64 3, !dbg !23
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %75) #6, !dbg !18
  %77 = extractelement <8 x i1> %52, i64 4, !dbg !23
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %77) #6, !dbg !18
  %79 = extractelement <8 x i1> %52, i64 5, !dbg !23
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %79) #6, !dbg !18
  %81 = extractelement <8 x i1> %52, i64 6, !dbg !23
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %81) #6, !dbg !18
  %83 = extractelement <8 x i1> %52, i64 7, !dbg !23
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %83) #6, !dbg !18
  %85 = getelementptr i64, ptr addrspace(1) %2, i64 %53, !dbg !19
  %86 = getelementptr i64, ptr addrspace(1) %2, i64 %55, !dbg !19
  %87 = getelementptr i64, ptr addrspace(1) %2, i64 %57, !dbg !19
  %88 = getelementptr i64, ptr addrspace(1) %2, i64 %59, !dbg !19
  %89 = getelementptr i64, ptr addrspace(1) %2, i64 %61, !dbg !19
  %90 = getelementptr i64, ptr addrspace(1) %2, i64 %63, !dbg !19
  %91 = getelementptr i64, ptr addrspace(1) %2, i64 %65, !dbg !19
  %92 = getelementptr i64, ptr addrspace(1) %2, i64 %67, !dbg !19
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #6, !dbg !23
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %69) #6, !dbg !23
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %71) #6, !dbg !23
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 %73) #6, !dbg !23
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %75) #6, !dbg !23
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %77) #6, !dbg !23
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %79) #6, !dbg !23
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %81) #6, !dbg !23
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %83) #6, !dbg !23
  %109 = insertelement <8 x i64> poison, i64 %70, i64 0, !dbg !20
  %110 = insertelement <8 x i64> %109, i64 %72, i64 1, !dbg !20
  %111 = insertelement <8 x i64> %110, i64 %74, i64 2, !dbg !20
  %112 = insertelement <8 x i64> %111, i64 %76, i64 3, !dbg !20
  %113 = insertelement <8 x i64> %112, i64 %78, i64 4, !dbg !20
  %114 = insertelement <8 x i64> %113, i64 %80, i64 5, !dbg !20
  %115 = insertelement <8 x i64> %114, i64 %82, i64 6, !dbg !20
  %116 = insertelement <8 x i64> %115, i64 %84, i64 7, !dbg !20
  %117 = add <8 x i64> %116, splat (i64 49408), !dbg !20
  %118 = icmp slt <8 x i64> %116, zeroinitializer, !dbg !21
  %119 = select <8 x i1> %118, <8 x i64> %117, <8 x i64> %116, !dbg !22
  %120 = xor <8 x i1> %52, splat (i1 true), !dbg !24
  %121 = add i64 %100, 77, !dbg !25
  %122 = icmp slt i64 %100, 0, !dbg !26
  %123 = select i1 %122, i64 %121, i64 %100, !dbg !27
  %124 = insertelement <8 x i64> poison, i64 %108, i64 0, !dbg !25
  %125 = insertelement <8 x i64> %124, i64 %107, i64 1, !dbg !25
  %126 = insertelement <8 x i64> %125, i64 %106, i64 2, !dbg !25
  %127 = insertelement <8 x i64> %126, i64 %105, i64 3, !dbg !25
  %128 = insertelement <8 x i64> %127, i64 %104, i64 4, !dbg !25
  %129 = insertelement <8 x i64> %128, i64 %103, i64 5, !dbg !25
  %130 = insertelement <8 x i64> %129, i64 %102, i64 6, !dbg !25
  %131 = insertelement <8 x i64> %130, i64 %101, i64 7, !dbg !25
  %132 = add <8 x i64> %131, splat (i64 77), !dbg !25
  %133 = icmp slt <8 x i64> %131, zeroinitializer, !dbg !26
  %134 = select <8 x i1> %133, <8 x i64> %132, <8 x i64> %131, !dbg !27
  %135 = icmp ult <8 x i64> %134, splat (i64 77), !dbg !28
  %shift = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %136 = or <8 x i1> %shift, %120, !dbg !29
  %shift207 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %137 = or <8 x i1> %shift207, %120, !dbg !29
  %shift210 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %138 = or <8 x i1> %135, %shift210, !dbg !29
  %shift211 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %139 = or <8 x i1> %135, %shift211, !dbg !29
  %shift212 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %140 = or <8 x i1> %135, %shift212, !dbg !29
  %141 = icmp ugt <8 x i64> %119, splat (i64 49407)
  %142 = and <8 x i1> %141, %52
  %143 = bitcast <8 x i1> %142 to i8
  %144 = icmp eq i8 %143, 0
  %145 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %146 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift213 = or <8 x i1> %145, %146, !dbg !30
  %147 = and <8 x i1> %137, %shift213, !dbg !30
  %148 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %149 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift214 = or <8 x i1> %148, %149, !dbg !30
  %150 = and <8 x i1> %147, %shift214, !dbg !30
  %151 = and <8 x i1> %150, %138, !dbg !30
  %152 = shufflevector <8 x i1> %151, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %153 = shufflevector <8 x i1> %139, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift216 = and <8 x i1> %152, %153, !dbg !30
  %154 = and <8 x i1> %shift216, %140, !dbg !30
  %.idx = mul i64 %35, 1536
  %155 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx
  %156 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %157 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %shift217 = or <8 x i1> %156, %157
  %158 = and <8 x i1> %shift217, %154
  %159 = and <8 x i1> %158, %136
  %.demorgan29.reass = extractelement <8 x i1> %159, i64 0
  %.idx159 = mul i64 %123, 1536
  %160 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx159
  br i1 %144, label %.split.preheader, label %189, !dbg !31

.split.preheader:                                 ; preds = %10
  %161 = zext nneg i32 %21 to i64, !dbg !32
  br label %.split, !dbg !32

.split:                                           ; preds = %.split.preheader, %._crit_edge
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %.split.preheader ], [ %340, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %.split.preheader ], [ %341, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %.split.preheader ], [ %342, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %.split.preheader ], [ %343, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %.split.preheader ], [ %344, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %.split.preheader ], [ %345, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %.split.preheader ], [ %346, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %.split.preheader ], [ %347, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %.split.preheader ], [ %332, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %.split.preheader ], [ %333, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %.split.preheader ], [ %334, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %.split.preheader ], [ %335, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %.split.preheader ], [ %336, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %.split.preheader ], [ %337, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %.split.preheader ], [ %338, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %.split.preheader ], [ %339, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %.split.preheader ], [ %324, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %.split.preheader ], [ %325, %._crit_edge ]
  %180 = phi float [ 0.000000e+00, %.split.preheader ], [ %326, %._crit_edge ]
  %181 = phi float [ 0.000000e+00, %.split.preheader ], [ %327, %._crit_edge ]
  %182 = phi float [ 0.000000e+00, %.split.preheader ], [ %328, %._crit_edge ]
  %183 = phi float [ 0.000000e+00, %.split.preheader ], [ %329, %._crit_edge ]
  %184 = phi float [ 0.000000e+00, %.split.preheader ], [ %330, %._crit_edge ]
  %185 = phi float [ 0.000000e+00, %.split.preheader ], [ %331, %._crit_edge ]
  %186 = or disjoint i64 %indvars.iv, %161, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %187 = getelementptr bfloat, ptr addrspace(1) %155, i64 %186, !dbg !34
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %187, i1 %19) #6, !dbg !35
  br i1 %.demorgan29.reass, label %191, label %190, !dbg !32

189:                                              ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

190:                                              ; preds = %.split
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 50, ptr nonnull @assertFunc_1, i64 1), !dbg !32
  unreachable, !dbg !32

191:                                              ; preds = %.split
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !35
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !35
  %194 = extractelement <2 x bfloat> %193, i64 1, !dbg !35
  %195 = fpext bfloat %194 to float, !dbg !36
  %196 = extractelement <2 x bfloat> %193, i64 0, !dbg !35
  %197 = fpext bfloat %196 to float, !dbg !36
  %198 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !35
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !35
  %200 = extractelement <2 x bfloat> %199, i64 1, !dbg !35
  %201 = fpext bfloat %200 to float, !dbg !36
  %202 = extractelement <2 x bfloat> %199, i64 0, !dbg !35
  %203 = fpext bfloat %202 to float, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !35
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !35
  %206 = extractelement <2 x bfloat> %205, i64 1, !dbg !35
  %207 = fpext bfloat %206 to float, !dbg !36
  %208 = extractelement <2 x bfloat> %205, i64 0, !dbg !35
  %209 = fpext bfloat %208 to float, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !35
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !35
  %212 = extractelement <2 x bfloat> %211, i64 1, !dbg !35
  %213 = fpext bfloat %212 to float, !dbg !36
  %214 = extractelement <2 x bfloat> %211, i64 0, !dbg !35
  %215 = fpext bfloat %214 to float, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %216 = getelementptr bfloat, ptr addrspace(1) %160, i64 %186, !dbg !37
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %216, i1 %19) #6, !dbg !38
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !38
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !38
  %220 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !38
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !38
  %222 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !38
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !38
  %224 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !38
  %225 = bitcast i32 %224 to <2 x bfloat>, !dbg !38
  %226 = extractelement <2 x bfloat> %219, i64 0, !dbg !38
  %227 = extractelement <2 x bfloat> %219, i64 1, !dbg !38
  %228 = extractelement <2 x bfloat> %221, i64 0, !dbg !38
  %229 = extractelement <2 x bfloat> %221, i64 1, !dbg !38
  %230 = extractelement <2 x bfloat> %223, i64 0, !dbg !38
  %231 = extractelement <2 x bfloat> %223, i64 1, !dbg !38
  %232 = extractelement <2 x bfloat> %225, i64 0, !dbg !38
  %233 = extractelement <2 x bfloat> %225, i64 1, !dbg !38
  %234 = fpext bfloat %226 to float, !dbg !39
  %235 = fpext bfloat %227 to float, !dbg !39
  %236 = fpext bfloat %228 to float, !dbg !39
  %237 = fpext bfloat %229 to float, !dbg !39
  %238 = fpext bfloat %230 to float, !dbg !39
  %239 = fpext bfloat %231 to float, !dbg !39
  %240 = fpext bfloat %232 to float, !dbg !39
  %241 = fpext bfloat %233 to float, !dbg !39
  %242 = fadd float %215, %234, !dbg !40
  %243 = fadd float %213, %235, !dbg !40
  %244 = fadd float %209, %236, !dbg !40
  %245 = fadd float %207, %237, !dbg !40
  %246 = fadd float %203, %238, !dbg !40
  %247 = fadd float %201, %239, !dbg !40
  %248 = fadd float %197, %240, !dbg !40
  %249 = fadd float %195, %241, !dbg !40
  %250 = icmp eq i64 %indvars.iv, 0, !dbg !41
  br i1 %250, label %._crit_edge, label %251, !dbg !42

251:                                              ; preds = %191
  %252 = fsub float %242, %178, !dbg !46
  %253 = fsub float %243, %179, !dbg !46
  %254 = fsub float %244, %180, !dbg !46
  %255 = fsub float %245, %181, !dbg !46
  %256 = fsub float %246, %182, !dbg !46
  %257 = fsub float %247, %183, !dbg !46
  %258 = fsub float %248, %184, !dbg !46
  %259 = fsub float %249, %185, !dbg !46
  %260 = fadd float %162, 1.000000e+00, !dbg !47
  %261 = fadd float %163, 1.000000e+00, !dbg !47
  %262 = fadd float %164, 1.000000e+00, !dbg !47
  %263 = fadd float %165, 1.000000e+00, !dbg !47
  %264 = fadd float %166, 1.000000e+00, !dbg !47
  %265 = fadd float %167, 1.000000e+00, !dbg !47
  %266 = fadd float %168, 1.000000e+00, !dbg !47
  %267 = fadd float %169, 1.000000e+00, !dbg !47
  %268 = tail call float @llvm.nvvm.div.full(float %252, float %260), !dbg !48
  %269 = tail call float @llvm.nvvm.div.full(float %253, float %261), !dbg !48
  %270 = tail call float @llvm.nvvm.div.full(float %254, float %262), !dbg !48
  %271 = tail call float @llvm.nvvm.div.full(float %255, float %263), !dbg !48
  %272 = tail call float @llvm.nvvm.div.full(float %256, float %264), !dbg !48
  %273 = tail call float @llvm.nvvm.div.full(float %257, float %265), !dbg !48
  %274 = tail call float @llvm.nvvm.div.full(float %258, float %266), !dbg !48
  %275 = tail call float @llvm.nvvm.div.full(float %259, float %267), !dbg !48
  %276 = fadd float %178, %268, !dbg !49
  %277 = fadd float %179, %269, !dbg !49
  %278 = fadd float %180, %270, !dbg !49
  %279 = fadd float %181, %271, !dbg !49
  %280 = fadd float %182, %272, !dbg !49
  %281 = fadd float %183, %273, !dbg !49
  %282 = fadd float %184, %274, !dbg !49
  %283 = fadd float %185, %275, !dbg !49
  %284 = fsub float %242, %276, !dbg !50
  %285 = fsub float %243, %277, !dbg !50
  %286 = fsub float %244, %278, !dbg !50
  %287 = fsub float %245, %279, !dbg !50
  %288 = fsub float %246, %280, !dbg !50
  %289 = fsub float %247, %281, !dbg !50
  %290 = fsub float %248, %282, !dbg !50
  %291 = fsub float %249, %283, !dbg !50
  %292 = fmul float %252, %284, !dbg !51
  %293 = fmul float %253, %285, !dbg !51
  %294 = fmul float %254, %286, !dbg !51
  %295 = fmul float %255, %287, !dbg !51
  %296 = fmul float %256, %288, !dbg !51
  %297 = fmul float %257, %289, !dbg !51
  %298 = fmul float %258, %290, !dbg !51
  %299 = fmul float %259, %291, !dbg !51
  %300 = fadd float %170, %292, !dbg !52
  %301 = fadd float %171, %293, !dbg !52
  %302 = fadd float %172, %294, !dbg !52
  %303 = fadd float %173, %295, !dbg !52
  %304 = fadd float %174, %296, !dbg !52
  %305 = fadd float %175, %297, !dbg !52
  %306 = fadd float %176, %298, !dbg !52
  %307 = fadd float %177, %299, !dbg !52
  br label %._crit_edge, !dbg !42

._crit_edge:                                      ; preds = %191, %251
  %308 = phi float [ %300, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %309 = phi float [ %301, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %310 = phi float [ %302, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %311 = phi float [ %303, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %312 = phi float [ %304, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %313 = phi float [ %305, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %314 = phi float [ %306, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %315 = phi float [ %307, %251 ], [ 0.000000e+00, %191 ], !dbg !45
  %.pn44 = phi float [ %276, %251 ], [ %242, %191 ]
  %.pn42 = phi float [ %277, %251 ], [ %243, %191 ]
  %.pn40 = phi float [ %278, %251 ], [ %244, %191 ]
  %.pn38 = phi float [ %279, %251 ], [ %245, %191 ]
  %.pn36 = phi float [ %280, %251 ], [ %246, %191 ]
  %.pn34 = phi float [ %281, %251 ], [ %247, %191 ]
  %.pn32 = phi float [ %282, %251 ], [ %248, %191 ]
  %.pn30 = phi float [ %283, %251 ], [ %249, %191 ]
  %316 = phi float [ %260, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %317 = phi float [ %261, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %318 = phi float [ %262, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %319 = phi float [ %263, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %320 = phi float [ %264, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %321 = phi float [ %265, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %322 = phi float [ %266, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %323 = phi float [ %267, %251 ], [ 1.000000e+00, %191 ], !dbg !45
  %324 = select i1 %19, float %.pn44, float %178, !dbg !53
  %325 = select i1 %19, float %.pn42, float %179, !dbg !53
  %326 = select i1 %19, float %.pn40, float %180, !dbg !53
  %327 = select i1 %19, float %.pn38, float %181, !dbg !53
  %328 = select i1 %19, float %.pn36, float %182, !dbg !53
  %329 = select i1 %19, float %.pn34, float %183, !dbg !53
  %330 = select i1 %19, float %.pn32, float %184, !dbg !53
  %331 = select i1 %19, float %.pn30, float %185, !dbg !53
  %332 = select i1 %19, float %308, float %170, !dbg !54
  %333 = select i1 %19, float %309, float %171, !dbg !54
  %334 = select i1 %19, float %310, float %172, !dbg !54
  %335 = select i1 %19, float %311, float %173, !dbg !54
  %336 = select i1 %19, float %312, float %174, !dbg !54
  %337 = select i1 %19, float %313, float %175, !dbg !54
  %338 = select i1 %19, float %314, float %176, !dbg !54
  %339 = select i1 %19, float %315, float %177, !dbg !54
  %340 = select i1 %19, float %316, float %162, !dbg !55
  %341 = select i1 %19, float %317, float %163, !dbg !55
  %342 = select i1 %19, float %318, float %164, !dbg !55
  %343 = select i1 %19, float %319, float %165, !dbg !55
  %344 = select i1 %19, float %320, float %166, !dbg !55
  %345 = select i1 %19, float %321, float %167, !dbg !55
  %346 = select i1 %19, float %322, float %168, !dbg !55
  %347 = select i1 %19, float %323, float %169, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !30
  %348 = icmp samesign ult i64 %indvars.iv, 704, !dbg !30
  br i1 %348, label %.split, label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %349 = fsub float %325, %324, !dbg !56
  %350 = fadd float %340, %341, !dbg !59
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !60
  %352 = tail call float @llvm.nvvm.div.full(float %341, float %350), !dbg !61
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !62
  %354 = fmul float %349, %353, !dbg !63
  %355 = fadd float %324, %354, !dbg !64
  %356 = fadd float %332, %333, !dbg !65
  %357 = fmul float %349, %349, !dbg !66
  %358 = fmul float %357, %340, !dbg !67
  %359 = fmul float %358, %353, !dbg !68
  %360 = fadd float %356, %359, !dbg !69
  %361 = fsub float %326, %355, !dbg !56
  %362 = fadd float %342, %350, !dbg !59
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !60
  %364 = tail call float @llvm.nvvm.div.full(float %342, float %362), !dbg !61
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !62
  %366 = fmul float %365, %361, !dbg !63
  %367 = fadd float %355, %366, !dbg !64
  %368 = fadd float %334, %360, !dbg !65
  %369 = fmul float %361, %361, !dbg !66
  %370 = fmul float %350, %369, !dbg !67
  %371 = fmul float %365, %370, !dbg !68
  %372 = fadd float %368, %371, !dbg !69
  %373 = fsub float %327, %367, !dbg !56
  %374 = fadd float %343, %362, !dbg !59
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !60
  %376 = tail call float @llvm.nvvm.div.full(float %343, float %374), !dbg !61
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !62
  %378 = fmul float %377, %373, !dbg !63
  %379 = fadd float %367, %378, !dbg !64
  %380 = fadd float %335, %372, !dbg !65
  %381 = fmul float %373, %373, !dbg !66
  %382 = fmul float %362, %381, !dbg !67
  %383 = fmul float %377, %382, !dbg !68
  %384 = fadd float %380, %383, !dbg !69
  %385 = fsub float %328, %379, !dbg !56
  %386 = fadd float %344, %374, !dbg !59
  %387 = fcmp oeq float %386, 0.000000e+00, !dbg !60
  %388 = tail call float @llvm.nvvm.div.full(float %344, float %386), !dbg !61
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !62
  %390 = fmul float %389, %385, !dbg !63
  %391 = fadd float %379, %390, !dbg !64
  %392 = fadd float %336, %384, !dbg !65
  %393 = fmul float %385, %385, !dbg !66
  %394 = fmul float %374, %393, !dbg !67
  %395 = fmul float %389, %394, !dbg !68
  %396 = fadd float %392, %395, !dbg !69
  %397 = fsub float %329, %391, !dbg !56
  %398 = fadd float %345, %386, !dbg !59
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !60
  %400 = tail call float @llvm.nvvm.div.full(float %345, float %398), !dbg !61
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !62
  %402 = fmul float %401, %397, !dbg !63
  %403 = fadd float %391, %402, !dbg !64
  %404 = fadd float %337, %396, !dbg !65
  %405 = fmul float %397, %397, !dbg !66
  %406 = fmul float %386, %405, !dbg !67
  %407 = fmul float %401, %406, !dbg !68
  %408 = fadd float %404, %407, !dbg !69
  %409 = fsub float %330, %403, !dbg !56
  %410 = fadd float %346, %398, !dbg !59
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !60
  %412 = tail call float @llvm.nvvm.div.full(float %346, float %410), !dbg !61
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !62
  %414 = fmul float %413, %409, !dbg !63
  %415 = fadd float %403, %414, !dbg !64
  %416 = fadd float %338, %408, !dbg !65
  %417 = fmul float %409, %409, !dbg !66
  %418 = fmul float %398, %417, !dbg !67
  %419 = fmul float %413, %418, !dbg !68
  %420 = fadd float %416, %419, !dbg !69
  %421 = fsub float %331, %415, !dbg !56
  %422 = fadd float %347, %410, !dbg !59
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !60
  %424 = tail call float @llvm.nvvm.div.full(float %347, float %422), !dbg !61
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !62
  %426 = fmul float %425, %421, !dbg !63
  %427 = fadd float %415, %426, !dbg !64
  %428 = fadd float %339, %420, !dbg !65
  %429 = fmul float %421, %421, !dbg !66
  %430 = fmul float %410, %429, !dbg !67
  %431 = fmul float %425, %430, !dbg !68
  %432 = fadd float %428, %431, !dbg !69
  %433 = bitcast float %427 to i32, !dbg !70
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 4, i32 31), !dbg !70
  %435 = bitcast i32 %434 to float, !dbg !70
  %436 = bitcast float %432 to i32, !dbg !70
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 4, i32 31), !dbg !70
  %438 = bitcast i32 %437 to float, !dbg !70
  %439 = bitcast float %422 to i32, !dbg !70
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 4, i32 31), !dbg !70
  %441 = bitcast i32 %440 to float, !dbg !70
  %442 = fsub float %435, %427, !dbg !56
  %443 = fadd float %422, %441, !dbg !59
  %444 = fcmp oeq float %443, 0.000000e+00, !dbg !60
  %445 = tail call float @llvm.nvvm.div.full(float %441, float %443), !dbg !61
  %446 = select i1 %444, float 0.000000e+00, float %445, !dbg !62
  %447 = fmul float %446, %442, !dbg !63
  %448 = fadd float %427, %447, !dbg !64
  %449 = fadd float %432, %438, !dbg !65
  %450 = fmul float %442, %442, !dbg !66
  %451 = fmul float %422, %450, !dbg !67
  %452 = fmul float %446, %451, !dbg !68
  %453 = fadd float %449, %452, !dbg !69
  %454 = bitcast float %448 to i32, !dbg !70
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 2, i32 31), !dbg !70
  %456 = bitcast i32 %455 to float, !dbg !70
  %457 = bitcast float %453 to i32, !dbg !70
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 2, i32 31), !dbg !70
  %459 = bitcast i32 %458 to float, !dbg !70
  %460 = bitcast float %443 to i32, !dbg !70
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 2, i32 31), !dbg !70
  %462 = bitcast i32 %461 to float, !dbg !70
  %463 = fsub float %456, %448, !dbg !56
  %464 = fadd float %443, %462, !dbg !59
  %465 = fcmp oeq float %464, 0.000000e+00, !dbg !60
  %466 = tail call float @llvm.nvvm.div.full(float %462, float %464), !dbg !61
  %467 = select i1 %465, float 0.000000e+00, float %466, !dbg !62
  %468 = fmul float %467, %463, !dbg !63
  %469 = fadd float %448, %468, !dbg !64
  %470 = fadd float %453, %459, !dbg !65
  %471 = fmul float %463, %463, !dbg !66
  %472 = fmul float %443, %471, !dbg !67
  %473 = fmul float %467, %472, !dbg !68
  %474 = fadd float %470, %473, !dbg !69
  %475 = bitcast float %469 to i32, !dbg !70
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !70
  %477 = bitcast i32 %476 to float, !dbg !70
  %478 = bitcast float %474 to i32, !dbg !70
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !70
  %480 = bitcast i32 %479 to float, !dbg !70
  %481 = bitcast float %464 to i32, !dbg !70
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 1, i32 31), !dbg !70
  %483 = bitcast i32 %482 to float, !dbg !70
  %484 = fsub float %477, %469, !dbg !56
  %485 = fadd float %464, %483, !dbg !59
  %486 = fcmp oeq float %485, 0.000000e+00, !dbg !60
  %487 = tail call float @llvm.nvvm.div.full(float %483, float %485), !dbg !61
  %488 = select i1 %486, float 0.000000e+00, float %487, !dbg !62
  %489 = fmul float %488, %484, !dbg !63
  %490 = fadd float %469, %489, !dbg !64
  %491 = fadd float %474, %480, !dbg !65
  %492 = fmul float %484, %484, !dbg !66
  %493 = fmul float %464, %492, !dbg !67
  %494 = fmul float %488, %493, !dbg !68
  %495 = fadd float %491, %494, !dbg !69
  %496 = tail call float @llvm.nvvm.div.full(float %495, float 7.680000e+02), !dbg !71
  %497 = fadd float %496, 0x3EE4F8B580000000, !dbg !72
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i63 = icmp eq i32 %505, 0, !dbg !73
  br i1 %.not.i63, label %508, label %506, !dbg !73

506:                                              ; preds = %__nv_rsqrtf.exit
  %507 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %497), !dbg !73
  br label %__nv_rsqrtf.exit65, !dbg !73

508:                                              ; preds = %__nv_rsqrtf.exit
  %509 = tail call float @llvm.nvvm.rsqrt.approx.f(float %497), !dbg !73
  br label %__nv_rsqrtf.exit65, !dbg !73

__nv_rsqrtf.exit65:                               ; preds = %506, %508
  %.0.i64 = phi float [ %507, %506 ], [ %509, %508 ], !dbg !73
  %510 = mul i32 %18, 768, !dbg !74
  %511 = zext nneg i32 %21 to i64, !dbg !75
  %512 = insertelement <2 x float> poison, float %.0.i64, i64 0, !dbg !76
  %513 = shufflevector <2 x float> %512, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !76
  %514 = insertelement <2 x float> poison, float %490, i64 0, !dbg !77
  %515 = shufflevector <2 x float> %514, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  br label %516, !dbg !75

516:                                              ; preds = %__nv_rsqrtf.exit65, %516
  %indvars.iv111 = phi i64 [ 0, %__nv_rsqrtf.exit65 ], [ %indvars.iv.next112, %516 ]
  %517 = or disjoint i64 %indvars.iv111, %511, !dbg !78
  %518 = getelementptr bfloat, ptr addrspace(1) %4, i64 %517, !dbg !79
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %518, i1 true) #6, !dbg !80
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !80
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !80
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !80
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !80
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !80
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !80
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !80
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !80
  %528 = getelementptr bfloat, ptr addrspace(1) %5, i64 %517, !dbg !81
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %528, i1 true) #6, !dbg !82
  %530 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !82
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !82
  %532 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !82
  %533 = bitcast i32 %532 to <2 x bfloat>, !dbg !82
  %534 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !82
  %535 = bitcast i32 %534 to <2 x bfloat>, !dbg !82
  %536 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !82
  %537 = bitcast i32 %536 to <2 x bfloat>, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %538 = getelementptr bfloat, ptr addrspace(1) %155, i64 %517, !dbg !84
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %538, i1 %19) #6, !dbg !85
  %540 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !85
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !85
  %542 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !85
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !85
  %544 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !85
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !85
  %546 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !85
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %548 = getelementptr bfloat, ptr addrspace(1) %160, i64 %517, !dbg !87
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %548, i1 %19) #6, !dbg !88
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !88
  %551 = bitcast i32 %550 to <2 x bfloat>, !dbg !88
  %552 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !88
  %553 = bitcast i32 %552 to <2 x bfloat>, !dbg !88
  %554 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !88
  %555 = bitcast i32 %554 to <2 x bfloat>, !dbg !88
  %556 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !88
  %557 = bitcast i32 %556 to <2 x bfloat>, !dbg !88
  %558 = trunc nuw nsw i64 %517 to i32, !dbg !89
  %559 = add i32 %510, %558, !dbg !89
  %560 = sext i32 %559 to i64, !dbg !90
  %561 = getelementptr bfloat, ptr addrspace(1) %6, i64 %560, !dbg !90
  %562 = fpext <2 x bfloat> %521 to <2 x float>, !dbg !91
  %563 = fpext <2 x bfloat> %531 to <2 x float>, !dbg !92
  %564 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !93
  %565 = fpext <2 x bfloat> %551 to <2 x float>, !dbg !94
  %566 = fadd <2 x float> %564, %565, !dbg !95
  %567 = fsub <2 x float> %566, %515, !dbg !77
  %568 = fmul <2 x float> %513, %567, !dbg !76
  %569 = fmul <2 x float> %568, %562, !dbg !96
  %570 = fadd <2 x float> %569, %563, !dbg !97
  %571 = fptrunc <2 x float> %570 to <2 x bfloat>, !dbg !98
  %572 = fpext <2 x bfloat> %523 to <2 x float>, !dbg !91
  %573 = fpext <2 x bfloat> %533 to <2 x float>, !dbg !92
  %574 = fpext <2 x bfloat> %545 to <2 x float>, !dbg !93
  %575 = fpext <2 x bfloat> %553 to <2 x float>, !dbg !94
  %576 = fadd <2 x float> %574, %575, !dbg !95
  %577 = fsub <2 x float> %576, %515, !dbg !77
  %578 = fmul <2 x float> %513, %577, !dbg !76
  %579 = fmul <2 x float> %578, %572, !dbg !96
  %580 = fadd <2 x float> %579, %573, !dbg !97
  %581 = fptrunc <2 x float> %580 to <2 x bfloat>, !dbg !98
  %582 = fpext <2 x bfloat> %525 to <2 x float>, !dbg !91
  %583 = fpext <2 x bfloat> %535 to <2 x float>, !dbg !92
  %584 = fpext <2 x bfloat> %543 to <2 x float>, !dbg !93
  %585 = fpext <2 x bfloat> %555 to <2 x float>, !dbg !94
  %586 = fadd <2 x float> %584, %585, !dbg !95
  %587 = fsub <2 x float> %586, %515, !dbg !77
  %588 = fmul <2 x float> %513, %587, !dbg !76
  %589 = fmul <2 x float> %588, %582, !dbg !96
  %590 = fadd <2 x float> %589, %583, !dbg !97
  %591 = fptrunc <2 x float> %590 to <2 x bfloat>, !dbg !98
  %592 = fpext <2 x bfloat> %527 to <2 x float>, !dbg !91
  %593 = fpext <2 x bfloat> %537 to <2 x float>, !dbg !92
  %594 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !93
  %595 = fpext <2 x bfloat> %557 to <2 x float>, !dbg !94
  %596 = fadd <2 x float> %594, %595, !dbg !95
  %597 = fsub <2 x float> %596, %515, !dbg !77
  %598 = fmul <2 x float> %513, %597, !dbg !76
  %599 = fmul <2 x float> %598, %592, !dbg !96
  %600 = fadd <2 x float> %599, %593, !dbg !97
  %601 = fptrunc <2 x float> %600 to <2 x bfloat>, !dbg !98
  %602 = bitcast <2 x bfloat> %571 to i32, !dbg !98
  %603 = bitcast <2 x bfloat> %581 to i32, !dbg !98
  %604 = bitcast <2 x bfloat> %591 to i32, !dbg !98
  %605 = bitcast <2 x bfloat> %601 to i32, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %561, i1 %19) #6, !dbg !98
  %indvars.iv.next112 = add nuw nsw i64 %indvars.iv111, 64, !dbg !75
  %606 = icmp samesign ult i64 %indvars.iv111, 704, !dbg !75
  br i1 %606, label %516, label %607, !dbg !75

607:                                              ; preds = %516
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py", directory: "/tmp/torchinductor_root/3w")
!4 = !{ptr @triton_red_fused_add_embedding_native_layer_norm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_native_layer_norm_0", linkageName: "triton_red_fused_add_embedding_native_layer_norm_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 30, column: 30, scope: !10)
!20 = !DILocation(line: 41, column: 22, scope: !10)
!21 = !DILocation(line: 42, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 30, column: 35, scope: !10)
!24 = !DILocation(line: 44, column: 60, scope: !10)
!25 = !DILocation(line: 47, column: 22, scope: !10)
!26 = !DILocation(line: 48, column: 23, scope: !10)
!27 = !DILocation(line: 49, column: 38, scope: !10)
!28 = !DILocation(line: 50, column: 42, scope: !10)
!29 = !DILocation(line: 50, column: 57, scope: !10)
!30 = !DILocation(line: 34, column: 40, scope: !10)
!31 = !DILocation(line: 44, column: 68, scope: !10)
!32 = !DILocation(line: 50, column: 67, scope: !10)
!33 = !DILocation(line: 35, column: 31, scope: !10)
!34 = !DILocation(line: 45, column: 34, scope: !10)
!35 = !DILocation(line: 45, column: 52, scope: !10)
!36 = !DILocation(line: 45, column: 113, scope: !10)
!37 = !DILocation(line: 51, column: 35, scope: !10)
!38 = !DILocation(line: 51, column: 54, scope: !10)
!39 = !DILocation(line: 51, column: 115, scope: !10)
!40 = !DILocation(line: 52, column: 23, scope: !10)
!41 = !DILocation(line: 56, column: 66, scope: !10)
!42 = !DILocation(line: 203, column: 7, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !10, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 56, column: 55, scope: !10)
!46 = !DILocation(line: 208, column: 24, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 209, column: 30, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 210, column: 34, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 210, column: 26, scope: !43, inlinedAt: !45)
!50 = !DILocation(line: 211, column: 39, scope: !43, inlinedAt: !45)
!51 = !DILocation(line: 211, column: 31, scope: !43, inlinedAt: !45)
!52 = !DILocation(line: 211, column: 22, scope: !43, inlinedAt: !45)
!53 = !DILocation(line: 58, column: 64, scope: !10)
!54 = !DILocation(line: 59, column: 60, scope: !10)
!55 = !DILocation(line: 60, column: 68, scope: !10)
!56 = !DILocation(line: 217, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!58 = !DILocation(line: 61, column: 85, scope: !10)
!59 = !DILocation(line: 218, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 219, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 219, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 219, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 221, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 221, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 222, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 222, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 222, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 222, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 222, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 229, column: 46, scope: !43, inlinedAt: !58)
!71 = !DILocation(line: 89, column: 25, scope: !10)
!72 = !DILocation(line: 91, column: 24, scope: !10)
!73 = !DILocation(line: 92, column: 32, scope: !10)
!74 = !DILocation(line: 99, column: 40, scope: !10)
!75 = !DILocation(line: 65, column: 40, scope: !10)
!76 = !DILocation(line: 93, column: 24, scope: !10)
!77 = !DILocation(line: 87, column: 24, scope: !10)
!78 = !DILocation(line: 66, column: 31, scope: !10)
!79 = !DILocation(line: 71, column: 35, scope: !10)
!80 = !DILocation(line: 71, column: 42, scope: !10)
!81 = !DILocation(line: 72, column: 35, scope: !10)
!82 = !DILocation(line: 72, column: 42, scope: !10)
!83 = !DILocation(line: 77, column: 70, scope: !10)
!84 = !DILocation(line: 78, column: 35, scope: !10)
!85 = !DILocation(line: 78, column: 54, scope: !10)
!86 = !DILocation(line: 83, column: 67, scope: !10)
!87 = !DILocation(line: 84, column: 35, scope: !10)
!88 = !DILocation(line: 84, column: 54, scope: !10)
!89 = !DILocation(line: 99, column: 36, scope: !10)
!90 = !DILocation(line: 99, column: 29, scope: !10)
!91 = !DILocation(line: 71, column: 95, scope: !10)
!92 = !DILocation(line: 72, column: 95, scope: !10)
!93 = !DILocation(line: 78, column: 116, scope: !10)
!94 = !DILocation(line: 84, column: 116, scope: !10)
!95 = !DILocation(line: 85, column: 24, scope: !10)
!96 = !DILocation(line: 95, column: 24, scope: !10)
!97 = !DILocation(line: 97, column: 24, scope: !10)
!98 = !DILocation(line: 99, column: 52, scope: !10)
!99 = !DILocation(line: 65, column: 4, scope: !10)
