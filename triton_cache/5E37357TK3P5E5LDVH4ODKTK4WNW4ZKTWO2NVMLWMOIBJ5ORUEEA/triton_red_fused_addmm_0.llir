; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 2, !dbg !11
  %11 = and i32 %10, 1020, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !15
  %17 = bitcast i32 %16 to <2 x bfloat>, !dbg !15
  %18 = extractvalue { i32, i32 } %15, 1, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = or disjoint i32 %11, %12, !dbg !16
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr bfloat, ptr addrspace(1) %1, i64 %21, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %8) #4, !dbg !18
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !18
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !18
  %28 = or disjoint i64 %13, 1024, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !14
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 true) #4, !dbg !15
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !15
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !15
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !15
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !15
  %35 = trunc nuw nsw i64 %28 to i32, !dbg !16
  %36 = add i32 %12, %35, !dbg !16
  %37 = sext i32 %36 to i64, !dbg !17
  %38 = getelementptr bfloat, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %8) #4, !dbg !18
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !18
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !18
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !18
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !18
  %44 = or disjoint i64 %13, 2048, !dbg !19
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !14
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 true) #4, !dbg !15
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !15
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !15
  %49 = extractvalue { i32, i32 } %46, 1, !dbg !15
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !15
  %51 = trunc nuw nsw i64 %44 to i32, !dbg !16
  %52 = add i32 %12, %51, !dbg !16
  %53 = sext i32 %52 to i64, !dbg !17
  %54 = getelementptr bfloat, ptr addrspace(1) %1, i64 %53, !dbg !17
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %8) #4, !dbg !18
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !18
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !18
  %58 = extractvalue { i32, i32 } %55, 1, !dbg !18
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !18
  %60 = fpext <2 x bfloat> %17 to <2 x float>, !dbg !20
  %61 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !21
  %62 = extractelement <2 x float> %60, i64 0, !dbg !22
  %63 = fsub float 0.000000e+00, %62, !dbg !22
  %64 = extractelement <2 x float> %60, i64 1, !dbg !22
  %65 = fsub float 0.000000e+00, %64, !dbg !22
  %66 = fmul float %63, 0x3FF7154760000000, !dbg !26
  %67 = tail call float @llvm.nvvm.ex2.approx.f(float %66), !dbg !26
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !26
  %69 = tail call float @llvm.nvvm.ex2.approx.f(float %68), !dbg !26
  %70 = fadd float %67, 1.000000e+00, !dbg !27
  %71 = fadd float %69, 1.000000e+00, !dbg !27
  %72 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %70), !dbg !28
  %73 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %71), !dbg !28
  %74 = insertelement <2 x float> poison, float %72, i64 0, !dbg !29
  %75 = insertelement <2 x float> %74, float %73, i64 1, !dbg !29
  %76 = fmul <2 x float> %75, %60, !dbg !29
  %77 = fmul <2 x float> %76, %61, !dbg !30
  %78 = fadd <2 x float> %77, zeroinitializer, !dbg !31
  %79 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !20
  %80 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !21
  %81 = extractelement <2 x float> %79, i64 0, !dbg !22
  %82 = fsub float 0.000000e+00, %81, !dbg !22
  %83 = extractelement <2 x float> %79, i64 1, !dbg !22
  %84 = fsub float 0.000000e+00, %83, !dbg !22
  %85 = fmul float %82, 0x3FF7154760000000, !dbg !26
  %86 = tail call float @llvm.nvvm.ex2.approx.f(float %85), !dbg !26
  %87 = fmul float %84, 0x3FF7154760000000, !dbg !26
  %88 = tail call float @llvm.nvvm.ex2.approx.f(float %87), !dbg !26
  %89 = fadd float %86, 1.000000e+00, !dbg !27
  %90 = fadd float %88, 1.000000e+00, !dbg !27
  %91 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %89), !dbg !28
  %92 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %90), !dbg !28
  %93 = insertelement <2 x float> poison, float %91, i64 0, !dbg !29
  %94 = insertelement <2 x float> %93, float %92, i64 1, !dbg !29
  %95 = fmul <2 x float> %94, %79, !dbg !29
  %96 = fmul <2 x float> %95, %80, !dbg !30
  %97 = fadd <2 x float> %78, %96, !dbg !31
  %98 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !20
  %99 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !21
  %100 = extractelement <2 x float> %98, i64 0, !dbg !22
  %101 = fsub float 0.000000e+00, %100, !dbg !22
  %102 = extractelement <2 x float> %98, i64 1, !dbg !22
  %103 = fsub float 0.000000e+00, %102, !dbg !22
  %104 = fmul float %101, 0x3FF7154760000000, !dbg !26
  %105 = tail call float @llvm.nvvm.ex2.approx.f(float %104), !dbg !26
  %106 = fmul float %103, 0x3FF7154760000000, !dbg !26
  %107 = tail call float @llvm.nvvm.ex2.approx.f(float %106), !dbg !26
  %108 = fadd float %105, 1.000000e+00, !dbg !27
  %109 = fadd float %107, 1.000000e+00, !dbg !27
  %110 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %108), !dbg !28
  %111 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %109), !dbg !28
  %112 = insertelement <2 x float> poison, float %110, i64 0, !dbg !29
  %113 = insertelement <2 x float> %112, float %111, i64 1, !dbg !29
  %114 = fmul <2 x float> %113, %98, !dbg !29
  %115 = fmul <2 x float> %114, %99, !dbg !30
  %116 = fadd <2 x float> %97, %115, !dbg !31
  %117 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !20
  %118 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !21
  %119 = extractelement <2 x float> %117, i64 0, !dbg !22
  %120 = fsub float 0.000000e+00, %119, !dbg !22
  %121 = extractelement <2 x float> %117, i64 1, !dbg !22
  %122 = fsub float 0.000000e+00, %121, !dbg !22
  %123 = fmul float %120, 0x3FF7154760000000, !dbg !26
  %124 = tail call float @llvm.nvvm.ex2.approx.f(float %123), !dbg !26
  %125 = fmul float %122, 0x3FF7154760000000, !dbg !26
  %126 = tail call float @llvm.nvvm.ex2.approx.f(float %125), !dbg !26
  %127 = fadd float %124, 1.000000e+00, !dbg !27
  %128 = fadd float %126, 1.000000e+00, !dbg !27
  %129 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %127), !dbg !28
  %130 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %128), !dbg !28
  %131 = insertelement <2 x float> poison, float %129, i64 0, !dbg !29
  %132 = insertelement <2 x float> %131, float %130, i64 1, !dbg !29
  %133 = fmul <2 x float> %132, %117, !dbg !29
  %134 = fmul <2 x float> %133, %118, !dbg !30
  %135 = fadd <2 x float> %134, zeroinitializer, !dbg !31
  %136 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !20
  %137 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !21
  %138 = extractelement <2 x float> %136, i64 0, !dbg !22
  %139 = fsub float 0.000000e+00, %138, !dbg !22
  %140 = extractelement <2 x float> %136, i64 1, !dbg !22
  %141 = fsub float 0.000000e+00, %140, !dbg !22
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !26
  %143 = tail call float @llvm.nvvm.ex2.approx.f(float %142), !dbg !26
  %144 = fmul float %141, 0x3FF7154760000000, !dbg !26
  %145 = tail call float @llvm.nvvm.ex2.approx.f(float %144), !dbg !26
  %146 = fadd float %143, 1.000000e+00, !dbg !27
  %147 = fadd float %145, 1.000000e+00, !dbg !27
  %148 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %146), !dbg !28
  %149 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %147), !dbg !28
  %150 = insertelement <2 x float> poison, float %148, i64 0, !dbg !29
  %151 = insertelement <2 x float> %150, float %149, i64 1, !dbg !29
  %152 = fmul <2 x float> %151, %136, !dbg !29
  %153 = fmul <2 x float> %152, %137, !dbg !30
  %154 = fadd <2 x float> %135, %153, !dbg !31
  %155 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !20
  %156 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !21
  %157 = extractelement <2 x float> %155, i64 0, !dbg !22
  %158 = fsub float 0.000000e+00, %157, !dbg !22
  %159 = extractelement <2 x float> %155, i64 1, !dbg !22
  %160 = fsub float 0.000000e+00, %159, !dbg !22
  %161 = fmul float %158, 0x3FF7154760000000, !dbg !26
  %162 = tail call float @llvm.nvvm.ex2.approx.f(float %161), !dbg !26
  %163 = fmul float %160, 0x3FF7154760000000, !dbg !26
  %164 = tail call float @llvm.nvvm.ex2.approx.f(float %163), !dbg !26
  %165 = fadd float %162, 1.000000e+00, !dbg !27
  %166 = fadd float %164, 1.000000e+00, !dbg !27
  %167 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %165), !dbg !28
  %168 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %166), !dbg !28
  %169 = insertelement <2 x float> poison, float %167, i64 0, !dbg !29
  %170 = insertelement <2 x float> %169, float %168, i64 1, !dbg !29
  %171 = fmul <2 x float> %170, %155, !dbg !29
  %172 = fmul <2 x float> %171, %156, !dbg !30
  %173 = fadd <2 x float> %154, %172, !dbg !31
  %174 = lshr i32 %9, 5, !dbg !11
  %175 = and i32 %9, 31, !dbg !11
  %shift = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %176 = fadd <2 x float> %116, %shift, !dbg !32
  %177 = fadd <2 x float> %173, %176, !dbg !32
  %shift4 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %178 = fadd <2 x float> %shift4, %177, !dbg !32
  %179 = extractelement <2 x float> %178, i64 0, !dbg !32
  %180 = select i1 %8, float %179, float 0.000000e+00, !dbg !32
  %181 = bitcast float %180 to i32, !dbg !35
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !35
  %183 = bitcast i32 %182 to float, !dbg !35
  %184 = fadd float %180, %183, !dbg !32
  %185 = bitcast float %184 to i32, !dbg !35
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !35
  %187 = bitcast i32 %186 to float, !dbg !35
  %188 = fadd float %184, %187, !dbg !32
  %189 = bitcast float %188 to i32, !dbg !35
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !35
  %191 = bitcast i32 %190 to float, !dbg !35
  %192 = fadd float %188, %191, !dbg !32
  %193 = bitcast float %192 to i32, !dbg !35
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !35
  %195 = bitcast i32 %194 to float, !dbg !35
  %196 = fadd float %192, %195, !dbg !32
  %197 = bitcast float %196 to i32, !dbg !35
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = fadd float %196, %199, !dbg !32
  %201 = and i32 %174, 7, !dbg !35
  %202 = icmp eq i32 %175, 0, !dbg !35
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !35
  %204 = bitcast float %200 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 %202) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %205 = icmp slt i32 %9, 8, !dbg !35
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %207 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %206, i1 %205) #4, !dbg !35
  %208 = bitcast i32 %207 to float, !dbg !35
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !35
  %210 = bitcast i32 %209 to float, !dbg !35
  %211 = fadd float %208, %210, !dbg !32
  %212 = bitcast float %211 to i32, !dbg !35
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !35
  %214 = bitcast i32 %213 to float, !dbg !35
  %215 = fadd float %211, %214, !dbg !32
  %216 = bitcast float %215 to i32, !dbg !35
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !35
  %218 = bitcast i32 %217 to float, !dbg !35
  %219 = fadd float %215, %218, !dbg !32
  %220 = and i32 %9, 7, !dbg !35
  %221 = icmp eq i32 %220, 0, !dbg !35
  %222 = and i1 %205, %221, !dbg !35
  %223 = bitcast float %219 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %223, i1 %222) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %224 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %225 = sext i32 %7 to i64, !dbg !36
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !36
  %227 = and i32 %9, 255, !dbg !37
  %228 = icmp eq i32 %227, 0, !dbg !37
  %229 = and i1 %8, %228, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %226, i1 %229) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 113, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!34 = !DILocation(line: 48, column: 27, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
