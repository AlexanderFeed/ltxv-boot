; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 9, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = and i32 %10, 511, !dbg !14
  %15 = shl i32 %12, 7, !dbg !15
  %16 = and i32 %10, 127
  %invariant.op = or disjoint i32 %15, %16, !dbg !16
  %17 = zext nneg i32 %14 to i64, !dbg !16
  %18 = lshr i32 %14, 7, !dbg !17
  %19 = mul nuw nsw i32 %18, 526336, !dbg !18
  %.reass.us = add i32 %19, %invariant.op
  %20 = sext i32 %.reass.us to i64, !dbg !19
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !19
  br i1 %13, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 false) #4, !dbg !20
  %23 = or disjoint i64 %17, 512, !dbg !21
  %24 = lshr i64 %23, 7, !dbg !17
  %25 = trunc nuw nsw i64 %24 to i32
  %26 = mul nuw nsw i32 %25, 526336
  %.reass.1 = add i32 %26, %invariant.op
  %27 = sext i32 %.reass.1 to i64, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 false) #4, !dbg !20
  %30 = insertelement <4 x i64> poison, i64 %17, i64 0, !dbg !21
  %31 = shufflevector <4 x i64> %30, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !21
  %32 = or disjoint <4 x i64> %31, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !21
  %33 = lshr <4 x i64> %32, splat (i64 7), !dbg !17
  %34 = trunc nuw nsw <4 x i64> %33 to <4 x i32>
  %35 = mul nuw nsw <4 x i32> %34, splat (i32 526336)
  %36 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> poison, <4 x i32> zeroinitializer
  %38 = add <4 x i32> %35, %37
  %39 = extractelement <4 x i32> %38, i64 3, !dbg !19
  %40 = sext i32 %39 to i64, !dbg !19
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 false) #4, !dbg !20
  %43 = extractelement <4 x i32> %38, i64 2, !dbg !19
  %44 = sext i32 %43 to i64, !dbg !19
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !19
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 false) #4, !dbg !20
  %47 = extractelement <4 x i32> %38, i64 1, !dbg !19
  %48 = sext i32 %47 to i64, !dbg !19
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %49, i1 false) #4, !dbg !20
  %51 = extractelement <4 x i32> %38, i64 0, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !19
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %53, i1 false) #4, !dbg !20
  %55 = extractelement <4 x i64> %32, i64 0, !dbg !22
  %56 = extractelement <4 x i64> %32, i64 1, !dbg !22
  %57 = extractelement <4 x i64> %32, i64 2, !dbg !22
  %58 = extractelement <4 x i64> %32, i64 3, !dbg !22
  br label %.split5.us, !dbg !22

.split.us.preheader:                              ; preds = %7
  %59 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 true) #4, !dbg !20
  %60 = bitcast i16 %59 to bfloat, !dbg !20
  %61 = fpext bfloat %60 to float, !dbg !26
  %62 = or disjoint i64 %17, 512, !dbg !21
  %63 = lshr i64 %62, 7, !dbg !17
  %64 = trunc nuw nsw i64 %63 to i32
  %65 = mul nuw nsw i32 %64, 526336
  %.reass.us.1 = add i32 %65, %invariant.op
  %66 = sext i32 %.reass.us.1 to i64, !dbg !19
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !19
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %67, i1 true) #4, !dbg !20
  %69 = bitcast i16 %68 to bfloat, !dbg !20
  %70 = fpext bfloat %69 to float, !dbg !26
  %71 = fcmp olt bfloat %60, %69, !dbg !27
  %72 = fcmp uno bfloat %60, 0xR0000, !dbg !29
  %73 = or i1 %72, %71, !dbg !30
  %74 = select i1 %73, float %61, float %70, !dbg !31
  %75 = fcmp ogt bfloat %60, %69, !dbg !32
  %76 = or i1 %72, %75, !dbg !34
  %77 = select i1 %76, float %61, float %70, !dbg !35
  %78 = insertelement <4 x i64> poison, i64 %17, i64 0, !dbg !21
  %79 = shufflevector <4 x i64> %78, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !21
  %80 = or disjoint <4 x i64> %79, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !21
  %81 = fcmp uno float %74, 0.000000e+00, !dbg !29
  %82 = fcmp uno float %77, 0.000000e+00, !dbg !36
  %83 = lshr <4 x i64> %80, splat (i64 7), !dbg !17
  %84 = trunc nuw nsw <4 x i64> %83 to <4 x i32>
  %85 = mul nuw nsw <4 x i32> %84, splat (i32 526336)
  %86 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> poison, <4 x i32> zeroinitializer
  %88 = add <4 x i32> %85, %87
  %89 = extractelement <4 x i32> %88, i64 3, !dbg !19
  %90 = sext i32 %89 to i64, !dbg !19
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !19
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 true) #4, !dbg !20
  %93 = bitcast i16 %92 to bfloat, !dbg !20
  %94 = fpext bfloat %93 to float, !dbg !26
  %95 = fcmp olt float %74, %94, !dbg !27
  %96 = or i1 %81, %95, !dbg !30
  %97 = select i1 %96, float %74, float %94, !dbg !31
  %98 = fcmp ogt float %77, %94, !dbg !32
  %99 = or i1 %82, %98, !dbg !34
  %100 = select i1 %99, float %77, float %94, !dbg !35
  %101 = extractelement <4 x i32> %88, i64 2, !dbg !19
  %102 = sext i32 %101 to i64, !dbg !19
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !19
  %104 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %103, i1 true) #4, !dbg !20
  %105 = bitcast i16 %104 to bfloat, !dbg !20
  %106 = fpext bfloat %105 to float, !dbg !26
  %107 = fcmp olt float %97, %106, !dbg !27
  %108 = fcmp uno float %97, 0.000000e+00, !dbg !29
  %109 = or i1 %108, %107, !dbg !30
  %110 = select i1 %109, float %97, float %106, !dbg !31
  %111 = fcmp ogt float %100, %106, !dbg !32
  %112 = fcmp uno float %100, 0.000000e+00, !dbg !36
  %113 = or i1 %112, %111, !dbg !34
  %114 = select i1 %113, float %100, float %106, !dbg !35
  %115 = extractelement <4 x i32> %88, i64 1, !dbg !19
  %116 = sext i32 %115 to i64, !dbg !19
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !19
  %118 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %117, i1 true) #4, !dbg !20
  %119 = bitcast i16 %118 to bfloat, !dbg !20
  %120 = fpext bfloat %119 to float, !dbg !26
  %121 = fcmp olt float %110, %120, !dbg !27
  %122 = fcmp uno float %110, 0.000000e+00, !dbg !29
  %123 = or i1 %122, %121, !dbg !30
  %124 = select i1 %123, float %110, float %120, !dbg !31
  %125 = fcmp ogt float %114, %120, !dbg !32
  %126 = fcmp uno float %114, 0.000000e+00, !dbg !36
  %127 = or i1 %126, %125, !dbg !34
  %128 = select i1 %127, float %114, float %120, !dbg !35
  %129 = extractelement <4 x i32> %88, i64 0, !dbg !19
  %130 = sext i32 %129 to i64, !dbg !19
  %131 = getelementptr bfloat, ptr addrspace(1) %0, i64 %130, !dbg !19
  %132 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %131, i1 true) #4, !dbg !20
  %133 = bitcast i16 %132 to bfloat, !dbg !20
  %134 = fpext bfloat %133 to float, !dbg !26
  %135 = fcmp olt float %124, %134, !dbg !27
  %136 = fcmp uno float %124, 0.000000e+00, !dbg !29
  %137 = or i1 %136, %135, !dbg !30
  %138 = select i1 %137, float %124, float %134, !dbg !31
  %139 = fcmp ogt float %128, %134, !dbg !32
  %140 = fcmp uno float %128, 0.000000e+00, !dbg !36
  %141 = or i1 %140, %139, !dbg !34
  %142 = select i1 %141, float %128, float %134, !dbg !35
  %143 = extractelement <4 x i64> %80, i64 0, !dbg !22
  %144 = extractelement <4 x i64> %80, i64 1, !dbg !22
  %145 = extractelement <4 x i64> %80, i64 2, !dbg !22
  %146 = extractelement <4 x i64> %80, i64 3, !dbg !22
  br label %.split5.us, !dbg !22

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi36 = phi i64 [ %55, %.split.preheader ], [ %143, %.split.us.preheader ], !dbg !37
  %.pre-phi31 = phi i64 [ %56, %.split.preheader ], [ %144, %.split.us.preheader ], !dbg !37
  %.pre-phi26 = phi i64 [ %57, %.split.preheader ], [ %145, %.split.us.preheader ], !dbg !37
  %.pre-phi21 = phi i64 [ %58, %.split.preheader ], [ %146, %.split.us.preheader ], !dbg !37
  %.pre-phi20 = phi i64 [ %27, %.split.preheader ], [ %66, %.split.us.preheader ], !dbg !38
  %.pre-phi16 = phi i64 [ %23, %.split.preheader ], [ %62, %.split.us.preheader ], !dbg !37
  %.us-phi = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %138, %.split.us.preheader ], !dbg !22
  %.us-phi6 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %142, %.split.us.preheader ], !dbg !22
  %147 = phi <4 x i32> [ %38, %.split.preheader ], [ %88, %.split.us.preheader ], !dbg !38
  %148 = and i32 %10, 1, !dbg !11
  %149 = or disjoint i32 %9, %148, !dbg !12
  %150 = icmp slt i32 %149, 512, !dbg !13
  %151 = and i32 %10, 31, !dbg !11
  %152 = lshr i32 %10, 5, !dbg !11
  %153 = bitcast float %.us-phi to i32, !dbg !22
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !22
  %155 = bitcast i32 %154 to float, !dbg !22
  %156 = fcmp olt float %.us-phi, %155, !dbg !39
  %157 = fcmp uno float %.us-phi, 0.000000e+00, !dbg !41
  %158 = or i1 %157, %156, !dbg !42
  %159 = select i1 %158, float %.us-phi, float %155, !dbg !43
  %160 = bitcast float %159 to i32, !dbg !22
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !22
  %162 = bitcast i32 %161 to float, !dbg !22
  %163 = fcmp olt float %159, %162, !dbg !39
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !41
  %165 = or i1 %163, %164, !dbg !42
  %166 = select i1 %165, float %159, float %162, !dbg !43
  %167 = bitcast float %166 to i32, !dbg !22
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !22
  %169 = bitcast i32 %168 to float, !dbg !22
  %170 = fcmp olt float %166, %169, !dbg !39
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !41
  %172 = or i1 %170, %171, !dbg !42
  %173 = select i1 %172, float %166, float %169, !dbg !43
  %174 = bitcast float %173 to i32, !dbg !22
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !22
  %176 = bitcast i32 %175 to float, !dbg !22
  %177 = fcmp olt float %173, %176, !dbg !39
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !41
  %179 = or i1 %177, %178, !dbg !42
  %180 = select i1 %179, float %173, float %176, !dbg !43
  %181 = bitcast float %180 to i32, !dbg !22
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !22
  %183 = bitcast i32 %182 to float, !dbg !22
  %184 = fcmp olt float %180, %183, !dbg !39
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !41
  %186 = or i1 %184, %185, !dbg !42
  %187 = and i32 %152, 15, !dbg !22
  %188 = icmp eq i32 %151, 0, !dbg !22
  %189 = shl nuw nsw i32 %.lobit, 4, !dbg !22
  %190 = or disjoint i32 %189, %187, !dbg !22
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !22
  %192 = select i1 %186, i32 %181, i32 %182, !dbg !43
  %193 = insertelement <1 x i32> poison, i32 %192, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %193, i1 %188) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %194 = icmp slt i32 %10, 32, !dbg !22
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !22
  %196 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %195, i1 %194) #4, !dbg !22
  %197 = bitcast i32 %196 to float, !dbg !22
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !22
  %199 = bitcast i32 %198 to float, !dbg !22
  %200 = fcmp olt float %197, %199, !dbg !39
  %201 = fcmp uno float %197, 0.000000e+00, !dbg !41
  %202 = or i1 %201, %200, !dbg !42
  %203 = select i1 %202, float %197, float %199, !dbg !43
  %204 = bitcast float %203 to i32, !dbg !22
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !22
  %206 = bitcast i32 %205 to float, !dbg !22
  %207 = fcmp olt float %203, %206, !dbg !39
  %208 = fcmp uno float %203, 0.000000e+00, !dbg !41
  %209 = or i1 %207, %208, !dbg !42
  %210 = select i1 %209, float %203, float %206, !dbg !43
  %211 = bitcast float %210 to i32, !dbg !22
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !22
  %213 = bitcast i32 %212 to float, !dbg !22
  %214 = fcmp olt float %210, %213, !dbg !39
  %215 = fcmp uno float %210, 0.000000e+00, !dbg !41
  %216 = or i1 %214, %215, !dbg !42
  %217 = select i1 %216, float %210, float %213, !dbg !43
  %218 = bitcast float %217 to i32, !dbg !22
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !22
  %220 = bitcast i32 %219 to float, !dbg !22
  %221 = fcmp olt float %217, %220, !dbg !39
  %222 = fcmp uno float %217, 0.000000e+00, !dbg !41
  %223 = or i1 %221, %222, !dbg !42
  %224 = and i32 %10, 15, !dbg !22
  %225 = icmp eq i32 %224, 0, !dbg !22
  %226 = and i1 %194, %225, !dbg !22
  %227 = select i1 %223, i32 %218, i32 %219, !dbg !43
  %228 = insertelement <1 x i32> poison, i32 %227, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %228, i1 %226) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !22
  %230 = load float, ptr addrspace(3) %229, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %231 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !44
  %232 = bitcast float %230 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %233 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148, !dbg !44
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %235 = bitcast float %.us-phi6 to i32, !dbg !45
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 16, i32 31), !dbg !45
  %237 = bitcast i32 %236 to float, !dbg !45
  %238 = fcmp ogt float %.us-phi6, %237, !dbg !47
  %239 = fcmp uno float %.us-phi6, 0.000000e+00, !dbg !48
  %240 = or i1 %239, %238, !dbg !49
  %241 = select i1 %240, float %.us-phi6, float %237, !dbg !50
  %242 = bitcast float %241 to i32, !dbg !45
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !45
  %244 = bitcast i32 %243 to float, !dbg !45
  %245 = fcmp ogt float %241, %244, !dbg !47
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !48
  %247 = or i1 %245, %246, !dbg !49
  %248 = select i1 %247, float %241, float %244, !dbg !50
  %249 = bitcast float %248 to i32, !dbg !45
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !45
  %251 = bitcast i32 %250 to float, !dbg !45
  %252 = fcmp ogt float %248, %251, !dbg !47
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !48
  %254 = or i1 %252, %253, !dbg !49
  %255 = select i1 %254, float %248, float %251, !dbg !50
  %256 = bitcast float %255 to i32, !dbg !45
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !45
  %258 = bitcast i32 %257 to float, !dbg !45
  %259 = fcmp ogt float %255, %258, !dbg !47
  %260 = fcmp uno float %255, 0.000000e+00, !dbg !48
  %261 = or i1 %259, %260, !dbg !49
  %262 = select i1 %261, float %255, float %258, !dbg !50
  %263 = bitcast float %262 to i32, !dbg !45
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !45
  %265 = bitcast i32 %264 to float, !dbg !45
  %266 = fcmp ogt float %262, %265, !dbg !47
  %267 = fcmp uno float %262, 0.000000e+00, !dbg !48
  %268 = or i1 %266, %267, !dbg !49
  %269 = select i1 %268, i32 %263, i32 %264, !dbg !50
  %270 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %270, i1 %188) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %271 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %195, i1 %194) #4, !dbg !45
  %272 = bitcast i32 %271 to float, !dbg !45
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !45
  %274 = bitcast i32 %273 to float, !dbg !45
  %275 = fcmp ogt float %272, %274, !dbg !47
  %276 = fcmp uno float %272, 0.000000e+00, !dbg !48
  %277 = or i1 %276, %275, !dbg !49
  %278 = select i1 %277, float %272, float %274, !dbg !50
  %279 = bitcast float %278 to i32, !dbg !45
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 4, i32 31), !dbg !45
  %281 = bitcast i32 %280 to float, !dbg !45
  %282 = fcmp ogt float %278, %281, !dbg !47
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !48
  %284 = or i1 %282, %283, !dbg !49
  %285 = select i1 %284, float %278, float %281, !dbg !50
  %286 = bitcast float %285 to i32, !dbg !45
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !45
  %288 = bitcast i32 %287 to float, !dbg !45
  %289 = fcmp ogt float %285, %288, !dbg !47
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !48
  %291 = or i1 %289, %290, !dbg !49
  %292 = select i1 %291, float %285, float %288, !dbg !50
  %293 = bitcast float %292 to i32, !dbg !45
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !45
  %295 = bitcast i32 %294 to float, !dbg !45
  %296 = fcmp ogt float %292, %295, !dbg !47
  %297 = fcmp uno float %292, 0.000000e+00, !dbg !48
  %298 = or i1 %296, %297, !dbg !49
  %299 = select i1 %298, i32 %293, i32 %294, !dbg !50
  %300 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %300, i1 %226) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %301 = load float, ptr addrspace(3) %229, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %302 = bitcast float %301 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %302, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %303 = load float, ptr addrspace(3) %233, align 4, !dbg !51
  %304 = sext i32 %149 to i64, !dbg !52
  %305 = getelementptr bfloat, ptr addrspace(1) %1, i64 %304, !dbg !52
  %306 = fptrunc float %234 to bfloat, !dbg !44
  %307 = and i32 %10, 1022, !dbg !44
  %308 = icmp eq i32 %307, 0, !dbg !44
  %309 = bitcast bfloat %306 to i16, !dbg !44
  %310 = and i1 %308, %150, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %309, ptr addrspace(1) %305, i1 %310) #4, !dbg !44
  %311 = getelementptr bfloat, ptr addrspace(1) %2, i64 %304, !dbg !53
  %312 = fptrunc float %303 to bfloat, !dbg !51
  %313 = bitcast bfloat %312 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %313, ptr addrspace(1) %311, i1 %310) #4, !dbg !51
  %.inv = fcmp oge float %230, 0.000000e+00, !dbg !54
  %314 = select i1 %.inv, float 0.000000e+00, float %230, !dbg !54
  %315 = fsub float 0.000000e+00, %314, !dbg !56
  %.inv2 = fcmp ole float %301, 0.000000e+00, !dbg !57
  %316 = select i1 %.inv2, float 0.000000e+00, float %301, !dbg !57
  %317 = fcmp ogt float %315, %316, !dbg !59
  %318 = fcmp uno float %315, 0.000000e+00, !dbg !61
  %319 = or i1 %318, %317, !dbg !62
  %320 = select i1 %319, float %315, float %316, !dbg !63
  %321 = fmul float %320, 0x3F80204080000000, !dbg !64
  %322 = fcmp ogt float %321, 0x3EE4F8B580000000, !dbg !65
  %323 = fcmp uno float %321, 0.000000e+00, !dbg !67
  %324 = or i1 %322, %323, !dbg !68
  %325 = select i1 %324, float %321, float 0x3EE4F8B580000000, !dbg !69
  %326 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %325), !dbg !70
  %327 = mul i32 %12, 3072, !dbg !71
  %328 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !38
  %329 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %328, i1 %13) #4, !dbg !72
  %330 = bitcast i16 %329 to bfloat, !dbg !72
  %331 = fpext bfloat %330 to float, !dbg !73
  %332 = fmul float %326, %331, !dbg !74
  %333 = tail call float @llvm.nvvm.round.f(float %332) #4, !dbg !75
  %334 = fcmp ogt float %333, -1.270000e+02, !dbg !76
  %335 = fcmp uno float %333, 0.000000e+00, !dbg !78
  %336 = or i1 %334, %335, !dbg !79
  %337 = select i1 %336, float %333, float -1.270000e+02, !dbg !80
  %338 = fcmp olt float %337, 1.270000e+02, !dbg !81
  %339 = fcmp uno float %337, 0.000000e+00, !dbg !83
  %340 = or i1 %338, %339, !dbg !84
  %341 = fptosi float %337 to i8, !dbg !85
  %342 = select i1 %340, i8 %341, i8 127, !dbg !86
  %343 = or disjoint i32 %14, %327, !dbg !87
  %344 = sext i32 %343 to i64, !dbg !88
  %345 = getelementptr i8, ptr addrspace(1) %3, i64 %344, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %342, ptr addrspace(1) %345, i1 %13) #4, !dbg !89
  %346 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi20, !dbg !38
  %347 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %346, i1 %13) #4, !dbg !72
  %348 = bitcast i16 %347 to bfloat, !dbg !72
  %349 = fpext bfloat %348 to float, !dbg !73
  %350 = fmul float %326, %349, !dbg !74
  %351 = tail call float @llvm.nvvm.round.f(float %350) #4, !dbg !75
  %352 = fcmp ogt float %351, -1.270000e+02, !dbg !76
  %353 = fcmp uno float %351, 0.000000e+00, !dbg !78
  %354 = or i1 %352, %353, !dbg !79
  %355 = select i1 %354, float %351, float -1.270000e+02, !dbg !80
  %356 = fcmp olt float %355, 1.270000e+02, !dbg !81
  %357 = fcmp uno float %355, 0.000000e+00, !dbg !83
  %358 = or i1 %356, %357, !dbg !84
  %359 = fptosi float %355 to i8, !dbg !85
  %360 = select i1 %358, i8 %359, i8 127, !dbg !86
  %361 = trunc nuw nsw i64 %.pre-phi16 to i32, !dbg !87
  %362 = add i32 %327, %361, !dbg !87
  %363 = sext i32 %362 to i64, !dbg !88
  %364 = getelementptr i8, ptr addrspace(1) %3, i64 %363, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %360, ptr addrspace(1) %364, i1 %13) #4, !dbg !89
  %365 = extractelement <4 x i32> %147, i64 3, !dbg !38
  %366 = sext i32 %365 to i64, !dbg !38
  %367 = getelementptr bfloat, ptr addrspace(1) %0, i64 %366, !dbg !38
  %368 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %367, i1 %13) #4, !dbg !72
  %369 = bitcast i16 %368 to bfloat, !dbg !72
  %370 = fpext bfloat %369 to float, !dbg !73
  %371 = fmul float %326, %370, !dbg !74
  %372 = tail call float @llvm.nvvm.round.f(float %371) #4, !dbg !75
  %373 = fcmp ogt float %372, -1.270000e+02, !dbg !76
  %374 = fcmp uno float %372, 0.000000e+00, !dbg !78
  %375 = or i1 %373, %374, !dbg !79
  %376 = select i1 %375, float %372, float -1.270000e+02, !dbg !80
  %377 = fcmp olt float %376, 1.270000e+02, !dbg !81
  %378 = fcmp uno float %376, 0.000000e+00, !dbg !83
  %379 = or i1 %377, %378, !dbg !84
  %380 = fptosi float %376 to i8, !dbg !85
  %381 = select i1 %379, i8 %380, i8 127, !dbg !86
  %382 = trunc nuw nsw i64 %.pre-phi21 to i32, !dbg !87
  %383 = add i32 %327, %382, !dbg !87
  %384 = sext i32 %383 to i64, !dbg !88
  %385 = getelementptr i8, ptr addrspace(1) %3, i64 %384, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %381, ptr addrspace(1) %385, i1 %13) #4, !dbg !89
  %386 = extractelement <4 x i32> %147, i64 2, !dbg !38
  %387 = sext i32 %386 to i64, !dbg !38
  %388 = getelementptr bfloat, ptr addrspace(1) %0, i64 %387, !dbg !38
  %389 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %388, i1 %13) #4, !dbg !72
  %390 = bitcast i16 %389 to bfloat, !dbg !72
  %391 = fpext bfloat %390 to float, !dbg !73
  %392 = fmul float %326, %391, !dbg !74
  %393 = tail call float @llvm.nvvm.round.f(float %392) #4, !dbg !75
  %394 = fcmp ogt float %393, -1.270000e+02, !dbg !76
  %395 = fcmp uno float %393, 0.000000e+00, !dbg !78
  %396 = or i1 %394, %395, !dbg !79
  %397 = select i1 %396, float %393, float -1.270000e+02, !dbg !80
  %398 = fcmp olt float %397, 1.270000e+02, !dbg !81
  %399 = fcmp uno float %397, 0.000000e+00, !dbg !83
  %400 = or i1 %398, %399, !dbg !84
  %401 = fptosi float %397 to i8, !dbg !85
  %402 = select i1 %400, i8 %401, i8 127, !dbg !86
  %403 = trunc nuw nsw i64 %.pre-phi26 to i32, !dbg !87
  %404 = add i32 %327, %403, !dbg !87
  %405 = sext i32 %404 to i64, !dbg !88
  %406 = getelementptr i8, ptr addrspace(1) %3, i64 %405, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %402, ptr addrspace(1) %406, i1 %13) #4, !dbg !89
  %407 = extractelement <4 x i32> %147, i64 1, !dbg !38
  %408 = sext i32 %407 to i64, !dbg !38
  %409 = getelementptr bfloat, ptr addrspace(1) %0, i64 %408, !dbg !38
  %410 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %409, i1 %13) #4, !dbg !72
  %411 = bitcast i16 %410 to bfloat, !dbg !72
  %412 = fpext bfloat %411 to float, !dbg !73
  %413 = fmul float %326, %412, !dbg !74
  %414 = tail call float @llvm.nvvm.round.f(float %413) #4, !dbg !75
  %415 = fcmp ogt float %414, -1.270000e+02, !dbg !76
  %416 = fcmp uno float %414, 0.000000e+00, !dbg !78
  %417 = or i1 %415, %416, !dbg !79
  %418 = select i1 %417, float %414, float -1.270000e+02, !dbg !80
  %419 = fcmp olt float %418, 1.270000e+02, !dbg !81
  %420 = fcmp uno float %418, 0.000000e+00, !dbg !83
  %421 = or i1 %419, %420, !dbg !84
  %422 = fptosi float %418 to i8, !dbg !85
  %423 = select i1 %421, i8 %422, i8 127, !dbg !86
  %424 = trunc nuw nsw i64 %.pre-phi31 to i32, !dbg !87
  %425 = add i32 %327, %424, !dbg !87
  %426 = sext i32 %425 to i64, !dbg !88
  %427 = getelementptr i8, ptr addrspace(1) %3, i64 %426, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %423, ptr addrspace(1) %427, i1 %13) #4, !dbg !89
  %428 = extractelement <4 x i32> %147, i64 0, !dbg !38
  %429 = sext i32 %428 to i64, !dbg !38
  %430 = getelementptr bfloat, ptr addrspace(1) %0, i64 %429, !dbg !38
  %431 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %430, i1 %13) #4, !dbg !72
  %432 = bitcast i16 %431 to bfloat, !dbg !72
  %433 = fpext bfloat %432 to float, !dbg !73
  %434 = fmul float %326, %433, !dbg !74
  %435 = tail call float @llvm.nvvm.round.f(float %434) #4, !dbg !75
  %436 = fcmp ogt float %435, -1.270000e+02, !dbg !76
  %437 = fcmp uno float %435, 0.000000e+00, !dbg !78
  %438 = or i1 %436, %437, !dbg !79
  %439 = select i1 %438, float %435, float -1.270000e+02, !dbg !80
  %440 = fcmp olt float %439, 1.270000e+02, !dbg !81
  %441 = fcmp uno float %439, 0.000000e+00, !dbg !83
  %442 = or i1 %440, %441, !dbg !84
  %443 = fptosi float %439 to i8, !dbg !85
  %444 = select i1 %442, i8 %443, i8 127, !dbg !86
  %445 = trunc nuw nsw i64 %.pre-phi36 to i32, !dbg !87
  %446 = add i32 %327, %445, !dbg !87
  %447 = sext i32 %446 to i64, !dbg !88
  %448 = getelementptr i8, ptr addrspace(1) %3, i64 %447, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %444, ptr addrspace(1) %448, i1 %13) #4, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 43, column: 38, scope: !6)
!26 = !DILocation(line: 37, column: 144, scope: !6)
!27 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !28)
!28 = !DILocation(line: 39, column: 45, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !28)
!32 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 45, scope: !6)
!34 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !33)
!35 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !33)
!36 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !33)
!37 = !DILocation(line: 48, column: 31, scope: !6)
!38 = !DILocation(line: 53, column: 34, scope: !6)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !25)
!40 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!41 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !25)
!42 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !25)
!43 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !25)
!44 = !DILocation(line: 45, column: 36, scope: !6)
!45 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 38, scope: !6)
!47 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !46)
!49 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !46)
!50 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !46)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 45, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 25, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 53, column: 83, scope: !6)
!73 = !DILocation(line: 53, column: 145, scope: !6)
!74 = !DILocation(line: 69, column: 23, scope: !6)
!75 = !DILocation(line: 70, column: 36, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !77)
!81 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 46, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !82)
!85 = !DILocation(line: 77, column: 25, scope: !6)
!86 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !82)
!87 = !DILocation(line: 78, column: 36, scope: !6)
!88 = !DILocation(line: 78, column: 29, scope: !6)
!89 = !DILocation(line: 78, column: 53, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
