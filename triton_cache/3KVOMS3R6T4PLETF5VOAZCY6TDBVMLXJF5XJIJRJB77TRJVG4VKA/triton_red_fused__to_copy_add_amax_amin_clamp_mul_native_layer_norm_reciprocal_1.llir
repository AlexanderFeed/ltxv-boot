; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 3, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 6, !dbg !11
  %20 = and i32 %19, 7, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %20, %17, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = shl i32 %18, 2, !dbg !14
  %25 = and i32 %24, 252, !dbg !14
  %26 = mul i32 %22, 3072, !dbg !15
  %27 = or disjoint i32 %26, %25
  %28 = sext i32 %27 to i64, !dbg !16
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %23) #5, !dbg !17
  %31 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %32 = extractvalue { i32, i32 } %30, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32 } %30, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = shufflevector <2 x bfloat> %33, <2 x bfloat> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !19
  %37 = fpext <4 x bfloat> %36 to <4 x float>, !dbg !19
  %38 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !20
  %39 = shufflevector <4 x i1> %38, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  %40 = select <4 x i1> %39, <4 x float> %37, <4 x float> zeroinitializer, !dbg !20
  br label %41, !dbg !21

41:                                               ; preds = %.peel.next, %41
  %indvars.iv = phi i64 [ 256, %.peel.next ], [ %indvars.iv.next, %41 ]
  %.pn76 = phi float [ %31, %.peel.next ], [ %78, %41 ]
  %.pn74 = phi float [ %31, %.peel.next ], [ %79, %41 ]
  %.pn72 = phi float [ %31, %.peel.next ], [ %80, %41 ]
  %.pn70 = phi float [ %31, %.peel.next ], [ %81, %41 ]
  %42 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %77, %41 ]
  %43 = phi <4 x float> [ %40, %.peel.next ], [ %76, %41 ]
  %44 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %45 = add i32 %27, %44, !dbg !22
  %46 = sext i32 %45 to i64, !dbg !16
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !16
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %23) #5, !dbg !17
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !17
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !17
  %51 = fadd float %.pn76, 1.000000e+00, !dbg !23
  %52 = fadd float %.pn74, 1.000000e+00, !dbg !23
  %53 = extractvalue { i32, i32 } %48, 1, !dbg !17
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !17
  %55 = fadd float %.pn72, 1.000000e+00, !dbg !23
  %56 = fadd float %.pn70, 1.000000e+00, !dbg !23
  %57 = shufflevector <2 x bfloat> %50, <2 x bfloat> %54, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !19
  %58 = fpext <4 x bfloat> %57 to <4 x float>, !dbg !19
  %59 = fsub <4 x float> %58, %43, !dbg !27
  %60 = extractelement <4 x float> %59, i64 0, !dbg !28
  %61 = tail call float @llvm.nvvm.div.full(float %60, float %51), !dbg !28
  %62 = extractelement <4 x float> %59, i64 1, !dbg !28
  %63 = tail call float @llvm.nvvm.div.full(float %62, float %52), !dbg !28
  %64 = extractelement <4 x float> %59, i64 2, !dbg !28
  %65 = tail call float @llvm.nvvm.div.full(float %64, float %55), !dbg !28
  %66 = extractelement <4 x float> %59, i64 3, !dbg !28
  %67 = tail call float @llvm.nvvm.div.full(float %66, float %56), !dbg !28
  %68 = insertelement <4 x float> poison, float %61, i64 0, !dbg !29
  %69 = insertelement <4 x float> %68, float %63, i64 1, !dbg !29
  %70 = insertelement <4 x float> %69, float %65, i64 2, !dbg !29
  %71 = insertelement <4 x float> %70, float %67, i64 3, !dbg !29
  %72 = fadd <4 x float> %43, %71, !dbg !29
  %73 = fsub <4 x float> %58, %72, !dbg !30
  %74 = fmul <4 x float> %59, %73, !dbg !31
  %75 = fadd <4 x float> %42, %74, !dbg !32
  %76 = select <4 x i1> %39, <4 x float> %72, <4 x float> %43, !dbg !20
  %77 = select <4 x i1> %39, <4 x float> %75, <4 x float> %42, !dbg !33
  %78 = select i1 %23, float %51, float %.pn76, !dbg !18
  %79 = select i1 %23, float %52, float %.pn74, !dbg !18
  %80 = select i1 %23, float %55, float %.pn72, !dbg !18
  %81 = select i1 %23, float %56, float %.pn70, !dbg !18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !21
  %82 = icmp samesign ult i64 %indvars.iv, 2816, !dbg !21
  br i1 %82, label %41, label %__nv_rsqrtf.exit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit:                                 ; preds = %41
  %83 = lshr i32 %18, 5, !dbg !11
  %84 = and i32 %18, 7, !dbg !11
  %85 = or disjoint i32 %17, %84, !dbg !12
  %86 = icmp slt i32 %85, 3600, !dbg !13
  %87 = extractelement <4 x float> %76, i64 0, !dbg !36
  %88 = extractelement <4 x float> %76, i64 1, !dbg !36
  %89 = fsub float %88, %87, !dbg !36
  %90 = fadd float %78, %79, !dbg !39
  %91 = fcmp oeq float %90, 0.000000e+00, !dbg !40
  %92 = tail call float @llvm.nvvm.div.full(float %79, float %90), !dbg !41
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !42
  %94 = fmul float %89, %93, !dbg !43
  %95 = fadd float %87, %94, !dbg !44
  %shift = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !45
  %96 = fadd <4 x float> %77, %shift, !dbg !45
  %97 = extractelement <4 x float> %96, i64 0, !dbg !45
  %98 = fmul float %89, %89, !dbg !46
  %99 = fmul float %98, %78, !dbg !47
  %100 = fmul float %99, %93, !dbg !48
  %101 = fadd float %97, %100, !dbg !49
  %102 = extractelement <4 x float> %76, i64 2, !dbg !36
  %103 = fsub float %102, %95, !dbg !36
  %104 = fadd float %80, %90, !dbg !39
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !40
  %106 = tail call float @llvm.nvvm.div.full(float %80, float %104), !dbg !41
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !42
  %108 = fmul float %107, %103, !dbg !43
  %109 = fadd float %95, %108, !dbg !44
  %110 = extractelement <4 x float> %77, i64 2, !dbg !45
  %111 = fadd float %110, %101, !dbg !45
  %112 = fmul float %103, %103, !dbg !46
  %113 = fmul float %90, %112, !dbg !47
  %114 = fmul float %107, %113, !dbg !48
  %115 = fadd float %111, %114, !dbg !49
  %116 = extractelement <4 x float> %76, i64 3, !dbg !36
  %117 = fsub float %116, %109, !dbg !36
  %118 = fadd float %81, %104, !dbg !39
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !40
  %120 = tail call float @llvm.nvvm.div.full(float %81, float %118), !dbg !41
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !42
  %122 = fmul float %121, %117, !dbg !43
  %123 = fadd float %109, %122, !dbg !44
  %124 = extractelement <4 x float> %77, i64 3, !dbg !45
  %125 = fadd float %124, %115, !dbg !45
  %126 = fmul float %117, %117, !dbg !46
  %127 = fmul float %104, %126, !dbg !47
  %128 = fmul float %121, %127, !dbg !48
  %129 = fadd float %125, %128, !dbg !49
  %130 = bitcast float %123 to i32, !dbg !50
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !50
  %132 = bitcast i32 %131 to float, !dbg !50
  %133 = bitcast float %129 to i32, !dbg !50
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !50
  %135 = bitcast i32 %134 to float, !dbg !50
  %136 = bitcast float %118 to i32, !dbg !50
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !50
  %138 = bitcast i32 %137 to float, !dbg !50
  %139 = fsub float %132, %123, !dbg !36
  %140 = fadd float %118, %138, !dbg !39
  %141 = fcmp oeq float %140, 0.000000e+00, !dbg !40
  %142 = tail call float @llvm.nvvm.div.full(float %138, float %140), !dbg !41
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !42
  %144 = fmul float %143, %139, !dbg !43
  %145 = fadd float %123, %144, !dbg !44
  %146 = fadd float %129, %135, !dbg !45
  %147 = fmul float %139, %139, !dbg !46
  %148 = fmul float %118, %147, !dbg !47
  %149 = fmul float %143, %148, !dbg !48
  %150 = fadd float %146, %149, !dbg !49
  %151 = bitcast float %145 to i32, !dbg !50
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !50
  %153 = bitcast i32 %152 to float, !dbg !50
  %154 = bitcast float %150 to i32, !dbg !50
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !50
  %156 = bitcast i32 %155 to float, !dbg !50
  %157 = bitcast float %140 to i32, !dbg !50
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !50
  %159 = bitcast i32 %158 to float, !dbg !50
  %160 = fsub float %153, %145, !dbg !36
  %161 = fadd float %140, %159, !dbg !39
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !40
  %163 = tail call float @llvm.nvvm.div.full(float %159, float %161), !dbg !41
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !42
  %165 = fmul float %160, %164, !dbg !43
  %166 = fadd float %145, %165, !dbg !44
  %167 = fadd float %150, %156, !dbg !45
  %168 = fmul float %160, %160, !dbg !46
  %169 = fmul float %140, %168, !dbg !47
  %170 = fmul float %164, %169, !dbg !48
  %171 = fadd float %167, %170, !dbg !49
  %172 = bitcast float %166 to i32, !dbg !50
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !50
  %174 = bitcast i32 %173 to float, !dbg !50
  %175 = bitcast float %171 to i32, !dbg !50
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !50
  %177 = bitcast i32 %176 to float, !dbg !50
  %178 = bitcast float %161 to i32, !dbg !50
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !50
  %180 = bitcast i32 %179 to float, !dbg !50
  %181 = fsub float %174, %166, !dbg !36
  %182 = fadd float %161, %180, !dbg !39
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !40
  %184 = tail call float @llvm.nvvm.div.full(float %180, float %182), !dbg !41
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !42
  %186 = fmul float %181, %185, !dbg !43
  %187 = fadd float %166, %186, !dbg !44
  %188 = fadd float %171, %177, !dbg !45
  %189 = fmul float %181, %181, !dbg !46
  %190 = fmul float %161, %189, !dbg !47
  %191 = fmul float %185, %190, !dbg !48
  %192 = fadd float %188, %191, !dbg !49
  %193 = bitcast float %187 to i32, !dbg !50
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !50
  %195 = bitcast i32 %194 to float, !dbg !50
  %196 = bitcast float %192 to i32, !dbg !50
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !50
  %198 = bitcast i32 %197 to float, !dbg !50
  %199 = bitcast float %182 to i32, !dbg !50
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 2, i32 31), !dbg !50
  %201 = bitcast i32 %200 to float, !dbg !50
  %202 = fsub float %195, %187, !dbg !36
  %203 = fadd float %182, %201, !dbg !39
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !40
  %205 = tail call float @llvm.nvvm.div.full(float %201, float %203), !dbg !41
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !42
  %207 = fmul float %202, %206, !dbg !43
  %208 = fadd float %187, %207, !dbg !44
  %209 = fadd float %192, %198, !dbg !45
  %210 = fmul float %202, %202, !dbg !46
  %211 = fmul float %182, %210, !dbg !47
  %212 = fmul float %206, %211, !dbg !48
  %213 = fadd float %209, %212, !dbg !49
  %214 = bitcast float %208 to i32, !dbg !50
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !50
  %216 = bitcast i32 %215 to float, !dbg !50
  %217 = bitcast float %213 to i32, !dbg !50
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 1, i32 31), !dbg !50
  %219 = bitcast i32 %218 to float, !dbg !50
  %220 = bitcast float %203 to i32, !dbg !50
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !50
  %222 = bitcast i32 %221 to float, !dbg !50
  %223 = fsub float %216, %208, !dbg !36
  %224 = fadd float %203, %222, !dbg !39
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !40
  %226 = tail call float @llvm.nvvm.div.full(float %222, float %224), !dbg !41
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !42
  %228 = fmul float %223, %227, !dbg !43
  %229 = fadd float %208, %228, !dbg !44
  %230 = fadd float %213, %219, !dbg !45
  %231 = fmul float %223, %223, !dbg !46
  %232 = fmul float %203, %231, !dbg !47
  %233 = fmul float %227, %232, !dbg !48
  %234 = fadd float %230, %233, !dbg !49
  %235 = and i32 %83, 1, !dbg !50
  %236 = icmp eq i32 %21, 0, !dbg !50
  %237 = shl nuw nsw i32 %20, 1, !dbg !50
  %238 = or disjoint i32 %237, %235, !dbg !50
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !50
  %240 = bitcast float %229 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 %236) #5, !dbg !50
  %241 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %238, !dbg !50
  %242 = bitcast float %234 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 %236) #5, !dbg !50
  %243 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %238, !dbg !50
  %244 = bitcast float %224 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 %236) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %245 = icmp slt i32 %18, 16, !dbg !50
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !50
  %247 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %246, i1 %245) #5, !dbg !50
  %248 = bitcast i32 %247 to float, !dbg !50
  %249 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !50
  %250 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %249, i1 %245) #5, !dbg !50
  %251 = bitcast i32 %250 to float, !dbg !50
  %252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !50
  %253 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %245) #5, !dbg !50
  %254 = bitcast i32 %253 to float, !dbg !50
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !50
  %256 = bitcast i32 %255 to float, !dbg !50
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !50
  %258 = bitcast i32 %257 to float, !dbg !50
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !50
  %260 = bitcast i32 %259 to float, !dbg !50
  %261 = fsub float %256, %248, !dbg !36
  %262 = fadd float %254, %260, !dbg !39
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !40
  %264 = tail call float @llvm.nvvm.div.full(float %260, float %262), !dbg !41
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !42
  %266 = fmul float %261, %265, !dbg !43
  %267 = fadd float %266, %248, !dbg !44
  %268 = fadd float %251, %258, !dbg !45
  %269 = fmul float %261, %261, !dbg !46
  %270 = fmul float %269, %254, !dbg !47
  %271 = fmul float %270, %265, !dbg !48
  %272 = fadd float %268, %271, !dbg !49
  %273 = and i32 %18, 1, !dbg !50
  %274 = icmp eq i32 %273, 0, !dbg !50
  %275 = and i1 %245, %274, !dbg !50
  %276 = bitcast float %267 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %276, i1 %275) #5, !dbg !50
  %277 = bitcast float %272 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %277, i1 %275) #5, !dbg !50
  %278 = bitcast float %262 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %278, i1 %275) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !50
  %280 = load float, ptr addrspace(3) %279, align 8, !dbg !50
  %281 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %237, !dbg !50
  %282 = load float, ptr addrspace(3) %281, align 8, !dbg !50
  %283 = tail call float @llvm.nvvm.div.full(float %282, float 3.072000e+03), !dbg !51
  %284 = fadd float %283, 0x3EB0C6F7A0000000, !dbg !52
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i17 = icmp eq i32 %288, 0, !dbg !53
  br i1 %.not.i17, label %291, label %289, !dbg !53

289:                                              ; preds = %__nv_rsqrtf.exit
  %290 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %284), !dbg !53
  br label %__nv_rsqrtf.exit19, !dbg !53

291:                                              ; preds = %__nv_rsqrtf.exit
  %292 = tail call float @llvm.nvvm.rsqrt.approx.f(float %284), !dbg !53
  br label %__nv_rsqrtf.exit19, !dbg !53

__nv_rsqrtf.exit19:                               ; preds = %289, %291
  %.0.i18 = phi float [ %290, %289 ], [ %292, %291 ], !dbg !53
  %293 = zext nneg i32 %25 to i64, !dbg !54
  %294 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !55
  %295 = shufflevector <2 x i1> %294, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %296 = insertelement <2 x float> poison, float %.0.i18, i64 0, !dbg !56
  %297 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %298 = insertelement <2 x float> poison, float %280, i64 0, !dbg !57
  %299 = shufflevector <2 x float> %298, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  br label %300, !dbg !54

300:                                              ; preds = %__nv_rsqrtf.exit19, %300
  %indvars.iv44 = phi i64 [ 0, %__nv_rsqrtf.exit19 ], [ %indvars.iv.next45, %300 ]
  %301 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %390, %300 ]
  %302 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %391, %300 ]
  %303 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit19 ], [ %362, %300 ]
  %304 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit19 ], [ %396, %300 ]
  %305 = or disjoint i64 %indvars.iv44, %293, !dbg !58
  %306 = trunc nuw nsw i64 %305 to i32, !dbg !59
  %307 = add i32 %26, %306, !dbg !59
  %308 = sext i32 %307 to i64, !dbg !60
  %309 = getelementptr bfloat, ptr addrspace(1) %0, i64 %308, !dbg !60
  %310 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %309, i1 %23) #5, !dbg !61
  %311 = extractvalue { i32, i32 } %310, 0, !dbg !61
  %312 = bitcast i32 %311 to <2 x bfloat>, !dbg !61
  %313 = extractvalue { i32, i32 } %310, 1, !dbg !61
  %314 = bitcast i32 %313 to <2 x bfloat>, !dbg !61
  %315 = add nuw nsw i64 %305, 3072, !dbg !62
  %316 = getelementptr float, ptr addrspace(1) %1, i64 %315, !dbg !63
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %316, i1 true) #5, !dbg !64
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !64
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !64
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !64
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !64
  %322 = getelementptr bfloat, ptr addrspace(1) %2, i64 %315, !dbg !65
  %323 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %322, i1 true) #5, !dbg !66
  %324 = extractvalue { i32, i32 } %323, 0, !dbg !66
  %325 = bitcast i32 %324 to <2 x bfloat>, !dbg !66
  %326 = extractvalue { i32, i32 } %323, 1, !dbg !66
  %327 = bitcast i32 %326 to <2 x bfloat>, !dbg !66
  %328 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !67
  %329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %328, i1 true) #5, !dbg !68
  %330 = extractvalue { i32, i32, i32, i32 } %329, 0, !dbg !68
  %331 = extractvalue { i32, i32, i32, i32 } %329, 1, !dbg !68
  %332 = extractvalue { i32, i32, i32, i32 } %329, 2, !dbg !68
  %333 = extractvalue { i32, i32, i32, i32 } %329, 3, !dbg !68
  %334 = getelementptr bfloat, ptr addrspace(1) %2, i64 %305, !dbg !69
  %335 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %334, i1 true) #5, !dbg !70
  %336 = extractvalue { i32, i32 } %335, 0, !dbg !70
  %337 = bitcast i32 %336 to <2 x bfloat>, !dbg !70
  %338 = extractvalue { i32, i32 } %335, 1, !dbg !70
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !70
  %340 = fcmp uno <2 x float> %303, zeroinitializer, !dbg !71
  %341 = fcmp uno float %301, 0.000000e+00, !dbg !71
  %342 = fcmp uno float %302, 0.000000e+00, !dbg !71
  %343 = fpext <2 x bfloat> %312 to <2 x float>, !dbg !73
  %344 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !64
  %345 = insertelement <2 x i32> %344, i32 %319, i64 1, !dbg !64
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !64
  %347 = fpext <2 x bfloat> %325 to <2 x float>, !dbg !74
  %348 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !68
  %349 = insertelement <2 x i32> %348, i32 %331, i64 1, !dbg !68
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !68
  %351 = fpext <2 x bfloat> %337 to <2 x float>, !dbg !75
  %352 = fsub <2 x float> %343, %299, !dbg !57
  %353 = fmul <2 x float> %297, %352, !dbg !56
  %354 = fadd <2 x float> %346, %347, !dbg !76
  %355 = fadd <2 x float> %354, splat (float 1.000000e+00), !dbg !77
  %356 = fmul <2 x float> %353, %355, !dbg !78
  %357 = fadd <2 x float> %350, %351, !dbg !79
  %358 = fadd <2 x float> %356, %357, !dbg !80
  %359 = fcmp olt <2 x float> %303, %358, !dbg !81
  %360 = or <2 x i1> %340, %359, !dbg !82
  %361 = select <2 x i1> %360, <2 x float> %303, <2 x float> %358, !dbg !83
  %362 = select <2 x i1> %295, <2 x float> %361, <2 x float> %303, !dbg !55
  %363 = fcmp uno <4 x float> %304, zeroinitializer, !dbg !84
  %364 = getelementptr bfloat, ptr addrspace(1) %3, i64 %308, !dbg !86
  %365 = fptrunc <2 x float> %358 to <2 x bfloat>, !dbg !87
  %366 = fpext <2 x bfloat> %314 to <2 x float>, !dbg !73
  %367 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !64
  %368 = insertelement <2 x i32> %367, i32 %321, i64 1, !dbg !64
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !64
  %370 = fpext <2 x bfloat> %327 to <2 x float>, !dbg !74
  %371 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !68
  %372 = insertelement <2 x i32> %371, i32 %333, i64 1, !dbg !68
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !68
  %374 = fpext <2 x bfloat> %339 to <2 x float>, !dbg !75
  %375 = fsub <2 x float> %366, %299, !dbg !57
  %376 = fmul <2 x float> %297, %375, !dbg !56
  %377 = fadd <2 x float> %369, %370, !dbg !76
  %378 = fadd <2 x float> %377, splat (float 1.000000e+00), !dbg !77
  %379 = fmul <2 x float> %376, %378, !dbg !78
  %380 = fadd <2 x float> %373, %374, !dbg !79
  %381 = fadd <2 x float> %379, %380, !dbg !80
  %382 = extractelement <2 x float> %381, i64 0, !dbg !83
  %383 = fcmp olt float %301, %382, !dbg !81
  %384 = extractelement <2 x float> %381, i64 1, !dbg !83
  %385 = fcmp olt float %302, %384, !dbg !81
  %386 = or i1 %341, %383, !dbg !82
  %387 = or i1 %342, %385, !dbg !82
  %388 = select i1 %386, float %301, float %382, !dbg !83
  %389 = select i1 %387, float %302, float %384, !dbg !83
  %390 = select i1 %23, float %388, float %301, !dbg !55
  %391 = select i1 %23, float %389, float %302, !dbg !55
  %392 = shufflevector <2 x float> %358, <2 x float> %381, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !88
  %393 = fcmp ogt <4 x float> %304, %392, !dbg !88
  %394 = or <4 x i1> %363, %393, !dbg !89
  %395 = select <4 x i1> %394, <4 x float> %304, <4 x float> %392, !dbg !90
  %396 = select <4 x i1> %39, <4 x float> %395, <4 x float> %304, !dbg !91
  %397 = fptrunc <2 x float> %381 to <2 x bfloat>, !dbg !87
  %398 = bitcast <2 x bfloat> %365 to i32, !dbg !87
  %399 = bitcast <2 x bfloat> %397 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %398, i32 %399, ptr addrspace(1) %364, i1 %23) #5, !dbg !87
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 256, !dbg !54
  %400 = icmp samesign ult i64 %indvars.iv44, 2816, !dbg !54
  br i1 %400, label %300, label %401, !dbg !54

401:                                              ; preds = %300
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %402 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %362, <2 x i32> <i32 0, i32 2>, !dbg !94
  %403 = fcmp olt <2 x float> %402, %362, !dbg !94
  %404 = fcmp uno <2 x float> %402, %362, !dbg !94
  %shift123 = shufflevector <2 x i1> %403, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !95
  %405 = or <2 x i1> %shift123, %404, !dbg !95
  %406 = extractelement <2 x i1> %405, i64 0, !dbg !95
  %407 = extractelement <2 x float> %362, i64 0, !dbg !96
  %408 = extractelement <2 x float> %362, i64 1, !dbg !96
  %409 = select i1 %406, float %407, float %408, !dbg !96
  %410 = fcmp olt float %409, %390, !dbg !94
  %411 = fcmp uno float %409, 0.000000e+00, !dbg !97
  %412 = or i1 %410, %411, !dbg !95
  %413 = select i1 %412, float %409, float %390, !dbg !96
  %414 = fcmp olt float %413, %391, !dbg !94
  %415 = fcmp uno float %413, 0.000000e+00, !dbg !97
  %416 = or i1 %414, %415, !dbg !95
  %417 = select i1 %416, float %413, float %391, !dbg !96
  %418 = bitcast float %417 to i32, !dbg !92
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 16, i32 31), !dbg !92
  %420 = bitcast i32 %419 to float, !dbg !92
  %421 = fcmp olt float %417, %420, !dbg !94
  %422 = fcmp uno float %417, 0.000000e+00, !dbg !97
  %423 = or i1 %422, %421, !dbg !95
  %424 = select i1 %423, float %417, float %420, !dbg !96
  %425 = bitcast float %424 to i32, !dbg !92
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 8, i32 31), !dbg !92
  %427 = bitcast i32 %426 to float, !dbg !92
  %428 = fcmp olt float %424, %427, !dbg !94
  %429 = fcmp uno float %424, 0.000000e+00, !dbg !97
  %430 = or i1 %428, %429, !dbg !95
  %431 = select i1 %430, float %424, float %427, !dbg !96
  %432 = bitcast float %431 to i32, !dbg !92
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 4, i32 31), !dbg !92
  %434 = bitcast i32 %433 to float, !dbg !92
  %435 = fcmp olt float %431, %434, !dbg !94
  %436 = fcmp uno float %431, 0.000000e+00, !dbg !97
  %437 = or i1 %435, %436, !dbg !95
  %438 = select i1 %437, float %431, float %434, !dbg !96
  %439 = bitcast float %438 to i32, !dbg !92
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 2, i32 31), !dbg !92
  %441 = bitcast i32 %440 to float, !dbg !92
  %442 = fcmp olt float %438, %441, !dbg !94
  %443 = fcmp uno float %438, 0.000000e+00, !dbg !97
  %444 = or i1 %442, %443, !dbg !95
  %445 = select i1 %444, float %438, float %441, !dbg !96
  %446 = bitcast float %445 to i32, !dbg !92
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !92
  %448 = bitcast i32 %447 to float, !dbg !92
  %449 = fcmp olt float %445, %448, !dbg !94
  %450 = fcmp uno float %445, 0.000000e+00, !dbg !97
  %451 = or i1 %449, %450, !dbg !95
  %452 = select i1 %451, i32 %446, i32 %447, !dbg !96
  %453 = insertelement <1 x i32> poison, i32 %452, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %453, i1 %236) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %454 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %246, i1 %245) #5, !dbg !92
  %455 = bitcast i32 %454 to float, !dbg !92
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 1, i32 31), !dbg !92
  %457 = bitcast i32 %456 to float, !dbg !92
  %458 = fcmp olt float %455, %457, !dbg !94
  %459 = fcmp uno float %455, 0.000000e+00, !dbg !97
  %460 = or i1 %459, %458, !dbg !95
  %461 = select i1 %460, i32 %454, i32 %456, !dbg !96
  %462 = insertelement <1 x i32> poison, i32 %461, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %462, i1 %275) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %463 = load float, ptr addrspace(3) %279, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %464 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !98
  %465 = bitcast float %463 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %466 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %84, !dbg !98
  %467 = load float, ptr addrspace(3) %466, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %468 = extractelement <4 x float> %396, i64 0, !dbg !101
  %469 = extractelement <4 x float> %396, i64 1, !dbg !101
  %470 = fcmp ogt float %468, %469, !dbg !101
  %471 = fcmp uno float %468, 0.000000e+00, !dbg !102
  %472 = or i1 %470, %471, !dbg !103
  %473 = select i1 %472, float %468, float %469, !dbg !104
  %474 = extractelement <4 x float> %396, i64 2, !dbg !101
  %475 = fcmp ogt float %473, %474, !dbg !101
  %476 = fcmp uno float %473, 0.000000e+00, !dbg !102
  %477 = or i1 %475, %476, !dbg !103
  %478 = select i1 %477, float %473, float %474, !dbg !104
  %479 = extractelement <4 x float> %396, i64 3, !dbg !101
  %480 = fcmp ogt float %478, %479, !dbg !101
  %481 = fcmp uno float %478, 0.000000e+00, !dbg !102
  %482 = or i1 %480, %481, !dbg !103
  %483 = select i1 %482, float %478, float %479, !dbg !104
  %484 = bitcast float %483 to i32, !dbg !99
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 16, i32 31), !dbg !99
  %486 = bitcast i32 %485 to float, !dbg !99
  %487 = fcmp ogt float %483, %486, !dbg !101
  %488 = fcmp uno float %483, 0.000000e+00, !dbg !102
  %489 = or i1 %488, %487, !dbg !103
  %490 = select i1 %489, float %483, float %486, !dbg !104
  %491 = bitcast float %490 to i32, !dbg !99
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 8, i32 31), !dbg !99
  %493 = bitcast i32 %492 to float, !dbg !99
  %494 = fcmp ogt float %490, %493, !dbg !101
  %495 = fcmp uno float %490, 0.000000e+00, !dbg !102
  %496 = or i1 %494, %495, !dbg !103
  %497 = select i1 %496, float %490, float %493, !dbg !104
  %498 = bitcast float %497 to i32, !dbg !99
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 4, i32 31), !dbg !99
  %500 = bitcast i32 %499 to float, !dbg !99
  %501 = fcmp ogt float %497, %500, !dbg !101
  %502 = fcmp uno float %497, 0.000000e+00, !dbg !102
  %503 = or i1 %501, %502, !dbg !103
  %504 = select i1 %503, float %497, float %500, !dbg !104
  %505 = bitcast float %504 to i32, !dbg !99
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 2, i32 31), !dbg !99
  %507 = bitcast i32 %506 to float, !dbg !99
  %508 = fcmp ogt float %504, %507, !dbg !101
  %509 = fcmp uno float %504, 0.000000e+00, !dbg !102
  %510 = or i1 %508, %509, !dbg !103
  %511 = select i1 %510, float %504, float %507, !dbg !104
  %512 = bitcast float %511 to i32, !dbg !99
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !99
  %514 = bitcast i32 %513 to float, !dbg !99
  %515 = fcmp ogt float %511, %514, !dbg !101
  %516 = fcmp uno float %511, 0.000000e+00, !dbg !102
  %517 = or i1 %515, %516, !dbg !103
  %518 = select i1 %517, i32 %512, i32 %513, !dbg !104
  %519 = insertelement <1 x i32> poison, i32 %518, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %519, i1 %236) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %520 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %246, i1 %245) #5, !dbg !99
  %521 = bitcast i32 %520 to float, !dbg !99
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 1, i32 31), !dbg !99
  %523 = bitcast i32 %522 to float, !dbg !99
  %524 = fcmp ogt float %521, %523, !dbg !101
  %525 = fcmp uno float %521, 0.000000e+00, !dbg !102
  %526 = or i1 %525, %524, !dbg !103
  %527 = select i1 %526, i32 %520, i32 %522, !dbg !104
  %528 = insertelement <1 x i32> poison, i32 %527, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %528, i1 %275) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %529 = load float, ptr addrspace(3) %279, align 8, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %530 = bitcast float %529 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %530, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %531 = load float, ptr addrspace(3) %466, align 4, !dbg !105
  %532 = sext i32 %85 to i64, !dbg !106
  %533 = getelementptr bfloat, ptr addrspace(1) %4, i64 %532, !dbg !106
  %534 = fptrunc float %467 to bfloat, !dbg !98
  %535 = and i32 %18, 504, !dbg !98
  %536 = icmp eq i32 %535, 0, !dbg !98
  %537 = bitcast bfloat %534 to i16, !dbg !98
  %538 = and i1 %536, %86, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %537, ptr addrspace(1) %533, i1 %538) #5, !dbg !98
  %539 = getelementptr bfloat, ptr addrspace(1) %5, i64 %532, !dbg !107
  %540 = fptrunc float %531 to bfloat, !dbg !105
  %541 = bitcast bfloat %540 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %541, ptr addrspace(1) %539, i1 %538) #5, !dbg !105
  %542 = getelementptr bfloat, ptr addrspace(1) %6, i64 %532, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %537, ptr addrspace(1) %542, i1 %538) #5, !dbg !109
  %543 = getelementptr bfloat, ptr addrspace(1) %7, i64 %532, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %541, ptr addrspace(1) %543, i1 %538) #5, !dbg !111
  %544 = getelementptr bfloat, ptr addrspace(1) %8, i64 %532, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %537, ptr addrspace(1) %544, i1 %538) #5, !dbg !113
  %545 = getelementptr bfloat, ptr addrspace(1) %9, i64 %532, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %541, ptr addrspace(1) %545, i1 %538) #5, !dbg !115
  %.inv = fcmp oge float %463, 0.000000e+00, !dbg !116
  %546 = select i1 %.inv, float 0.000000e+00, float %463, !dbg !116
  %547 = fsub float 0.000000e+00, %546, !dbg !118
  %.inv3 = fcmp ole float %529, 0.000000e+00, !dbg !119
  %548 = select i1 %.inv3, float 0.000000e+00, float %529, !dbg !119
  %549 = fcmp ogt float %547, %548, !dbg !121
  %550 = fcmp uno float %547, 0.000000e+00, !dbg !123
  %551 = or i1 %550, %549, !dbg !124
  %552 = select i1 %551, float %547, float %548, !dbg !125
  %553 = fmul float %552, 0x3F80204080000000, !dbg !126
  %554 = fcmp ogt float %553, 0x3EE4F8B580000000, !dbg !127
  %555 = fcmp uno float %553, 0.000000e+00, !dbg !129
  %556 = or i1 %554, %555, !dbg !130
  %557 = select i1 %556, float %553, float 0x3EE4F8B580000000, !dbg !131
  %558 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %557), !dbg !132
  br label %559, !dbg !133

559:                                              ; preds = %401, %559
  %indvars.iv46 = phi i64 [ 0, %401 ], [ %indvars.iv.next47, %559 ]
  %560 = trunc nuw nsw i64 %indvars.iv46 to i32, !dbg !134
  %561 = add i32 %27, %560, !dbg !134
  %562 = sext i32 %561 to i64, !dbg !135
  %563 = getelementptr bfloat, ptr addrspace(1) %3, i64 %562, !dbg !135
  %564 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %563, i1 %23) #5, !dbg !136
  %565 = extractvalue { i32, i32 } %564, 0, !dbg !136
  %566 = bitcast i32 %565 to <2 x bfloat>, !dbg !136
  %567 = extractvalue { i32, i32 } %564, 1, !dbg !136
  %568 = bitcast i32 %567 to <2 x bfloat>, !dbg !136
  %569 = extractelement <2 x bfloat> %566, i64 0, !dbg !136
  %570 = extractelement <2 x bfloat> %566, i64 1, !dbg !136
  %571 = extractelement <2 x bfloat> %568, i64 0, !dbg !136
  %572 = extractelement <2 x bfloat> %568, i64 1, !dbg !136
  %573 = fpext bfloat %569 to float, !dbg !137
  %574 = fpext bfloat %570 to float, !dbg !137
  %575 = fpext bfloat %571 to float, !dbg !137
  %576 = fpext bfloat %572 to float, !dbg !137
  %577 = fmul float %558, %573, !dbg !138
  %578 = fmul float %558, %574, !dbg !138
  %579 = fmul float %558, %575, !dbg !138
  %580 = fmul float %558, %576, !dbg !138
  %581 = tail call float @llvm.nvvm.round.f(float %577) #5, !dbg !139
  %582 = tail call float @llvm.nvvm.round.f(float %578) #5, !dbg !139
  %583 = tail call float @llvm.nvvm.round.f(float %579) #5, !dbg !139
  %584 = tail call float @llvm.nvvm.round.f(float %580) #5, !dbg !139
  %585 = insertelement <4 x float> poison, float %581, i64 0, !dbg !140
  %586 = insertelement <4 x float> %585, float %582, i64 1, !dbg !140
  %587 = insertelement <4 x float> %586, float %583, i64 2, !dbg !140
  %588 = insertelement <4 x float> %587, float %584, i64 3, !dbg !140
  %589 = fcmp ogt <4 x float> %588, splat (float -1.270000e+02), !dbg !140
  %590 = fcmp uno <4 x float> %588, zeroinitializer, !dbg !142
  %591 = or <4 x i1> %589, %590, !dbg !143
  %592 = select <4 x i1> %591, <4 x float> %588, <4 x float> splat (float -1.270000e+02), !dbg !144
  %593 = fcmp olt <4 x float> %592, splat (float 1.270000e+02), !dbg !145
  %594 = fcmp uno <4 x float> %592, zeroinitializer, !dbg !147
  %595 = or <4 x i1> %593, %594, !dbg !148
  %596 = fptosi <4 x float> %592 to <4 x i8>, !dbg !149
  %597 = select <4 x i1> %595, <4 x i8> %596, <4 x i8> splat (i8 127), !dbg !150
  %598 = getelementptr i8, ptr addrspace(1) %10, i64 %562, !dbg !151
  %599 = bitcast <4 x i8> %597 to i32, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %599, ptr addrspace(1) %598, i1 %23) #5, !dbg !152
  %600 = getelementptr i8, ptr addrspace(1) %11, i64 %562, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %599, ptr addrspace(1) %600, i1 %23) #5, !dbg !154
  %601 = getelementptr i8, ptr addrspace(1) %12, i64 %562, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %599, ptr addrspace(1) %601, i1 %23) #5, !dbg !156
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 256, !dbg !133
  %602 = icmp samesign ult i64 %indvars.iv46, 2816, !dbg !133
  br i1 %602, label %559, label %603, !dbg !133

603:                                              ; preds = %559
  ret void, !dbg !157
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 46, column: 66, scope: !6)
!19 = !DILocation(line: 38, column: 112, scope: !6)
!20 = !DILocation(line: 44, column: 62, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 65, column: 24, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 59, column: 113, scope: !6)
!74 = !DILocation(line: 61, column: 102, scope: !6)
!75 = !DILocation(line: 63, column: 95, scope: !6)
!76 = !DILocation(line: 74, column: 24, scope: !6)
!77 = !DILocation(line: 76, column: 24, scope: !6)
!78 = !DILocation(line: 77, column: 24, scope: !6)
!79 = !DILocation(line: 79, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !72)
!82 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !72)
!83 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !72)
!84 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !85)
!85 = !DILocation(line: 84, column: 47, scope: !6)
!86 = !DILocation(line: 86, column: 29, scope: !6)
!87 = !DILocation(line: 86, column: 53, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !85)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !85)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !85)
!91 = !DILocation(line: 85, column: 50, scope: !6)
!92 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !117)
!117 = !DILocation(line: 103, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 17, scope: !6)
!119 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 105, column: 46, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 106, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !122)
!126 = !DILocation(line: 108, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !128)
!128 = !DILocation(line: 111, column: 46, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !128)
!132 = !DILocation(line: 114, column: 25, scope: !6)
!133 = !DILocation(line: 95, column: 40, scope: !6)
!134 = !DILocation(line: 101, column: 43, scope: !6)
!135 = !DILocation(line: 101, column: 36, scope: !6)
!136 = !DILocation(line: 101, column: 53, scope: !6)
!137 = !DILocation(line: 101, column: 115, scope: !6)
!138 = !DILocation(line: 117, column: 24, scope: !6)
!139 = !DILocation(line: 118, column: 36, scope: !6)
!140 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !141)
!141 = !DILocation(line: 121, column: 46, scope: !6)
!142 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !141)
!144 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !141)
!145 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !146)
!148 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !146)
!149 = !DILocation(line: 125, column: 25, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !146)
!151 = !DILocation(line: 126, column: 29, scope: !6)
!152 = !DILocation(line: 126, column: 53, scope: !6)
!153 = !DILocation(line: 127, column: 30, scope: !6)
!154 = !DILocation(line: 127, column: 54, scope: !6)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 95, column: 4, scope: !6)
