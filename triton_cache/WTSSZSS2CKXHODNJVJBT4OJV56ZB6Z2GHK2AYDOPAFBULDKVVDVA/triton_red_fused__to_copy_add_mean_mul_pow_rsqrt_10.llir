; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 512, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 504, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %22, !dbg !17

22:                                               ; preds = %8, %22
  %23 = phi i32 [ 0, %8 ], [ %92, %22 ]
  %24 = phi <8 x float> [ zeroinitializer, %8 ], [ %91, %22 ]
  %25 = or i32 %19, %23, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %15) #5, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !20
  %37 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %15) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %15) #5, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !24
  %57 = shufflevector <2 x bfloat> %30, <2 x bfloat> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %58 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <8 x bfloat> %57, <8 x bfloat> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <8 x bfloat> %59, <8 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %63 = shufflevector <8 x bfloat> %61, <8 x bfloat> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %64 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %65 = shufflevector <8 x bfloat> %63, <8 x bfloat> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %66 = fpext <8 x bfloat> %65 to <8 x float>, !dbg !25
  %67 = shufflevector <2 x bfloat> %40, <2 x bfloat> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %68 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %69 = shufflevector <8 x bfloat> %67, <8 x bfloat> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %71 = shufflevector <8 x bfloat> %69, <8 x bfloat> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %73 = shufflevector <8 x bfloat> %71, <8 x bfloat> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %74 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %75 = shufflevector <8 x bfloat> %73, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %76 = fpext <8 x bfloat> %75 to <8 x float>, !dbg !26
  %77 = shufflevector <2 x bfloat> %50, <2 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %78 = shufflevector <2 x bfloat> %54, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %79 = shufflevector <8 x bfloat> %77, <8 x bfloat> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %80 = shufflevector <2 x bfloat> %54, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %81 = shufflevector <8 x bfloat> %79, <8 x bfloat> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %82 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %83 = shufflevector <8 x bfloat> %81, <8 x bfloat> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %84 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %85 = shufflevector <8 x bfloat> %83, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %86 = fpext <8 x bfloat> %85 to <8 x float>, !dbg !27
  %87 = fadd <8 x float> %66, %76, !dbg !28
  %88 = fadd <8 x float> %87, %86, !dbg !29
  %89 = fmul <8 x float> %88, %88, !dbg !30
  %90 = fadd <8 x float> %24, %89, !dbg !31
  %91 = select <8 x i1> %21, <8 x float> %90, <8 x float> %24, !dbg !16
  %92 = add nuw nsw i32 %23, 512, !dbg !17
  %93 = icmp samesign ult i32 %23, 3584, !dbg !17
  br i1 %93, label %22, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %22
  %94 = lshr i32 %11, 5, !dbg !11
  %95 = and i32 %11, 31, !dbg !14
  %96 = and i32 %11, 511, !dbg !14
  %shift = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %97 = fadd <8 x float> %91, %shift, !dbg !32
  %shift52 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %98 = fadd <8 x float> %shift52, %97, !dbg !32
  %shift53 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %99 = fadd <8 x float> %shift53, %98, !dbg !32
  %shift54 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %100 = fadd <8 x float> %shift54, %99, !dbg !32
  %shift55 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %101 = fadd <8 x float> %shift55, %100, !dbg !32
  %shift56 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %102 = fadd <8 x float> %shift56, %101, !dbg !32
  %shift57 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %103 = fadd <8 x float> %shift57, %102, !dbg !32
  %104 = extractelement <8 x float> %103, i64 0, !dbg !32
  %105 = bitcast float %104 to i32, !dbg !37
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !37
  %107 = bitcast i32 %106 to float, !dbg !37
  %108 = fadd float %104, %107, !dbg !32
  %109 = bitcast float %108 to i32, !dbg !37
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !37
  %111 = bitcast i32 %110 to float, !dbg !37
  %112 = fadd float %108, %111, !dbg !32
  %113 = bitcast float %112 to i32, !dbg !37
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !37
  %115 = bitcast i32 %114 to float, !dbg !37
  %116 = fadd float %112, %115, !dbg !32
  %117 = bitcast float %116 to i32, !dbg !37
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = fadd float %116, %119, !dbg !32
  %121 = bitcast float %120 to i32, !dbg !37
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !37
  %123 = bitcast i32 %122 to float, !dbg !37
  %124 = fadd float %120, %123, !dbg !32
  %125 = and i32 %94, 1, !dbg !37
  %126 = icmp eq i32 %95, 0, !dbg !37
  %127 = shl nuw nsw i32 %13, 1, !dbg !37
  %128 = or disjoint i32 %127, %125, !dbg !37
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !37
  %130 = bitcast float %124 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %126) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %131 = icmp slt i32 %11, 16, !dbg !37
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %133 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %131) #5, !dbg !37
  %134 = bitcast i32 %133 to float, !dbg !37
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = fadd float %134, %136, !dbg !32
  %138 = and i32 %11, 1, !dbg !37
  %139 = icmp eq i32 %138, 0, !dbg !37
  %140 = and i1 %131, %139, !dbg !37
  %141 = bitcast float %137 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %141, i1 %140) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !37
  %143 = load float, ptr addrspace(3) %142, align 8, !dbg !37
  %144 = tail call float @llvm.nvvm.div.full(float %143, float 4.096000e+03), !dbg !38
  %145 = fadd float %144, 0x3EB0C6F7A0000000, !dbg !39
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i28 = icmp eq i32 %153, 0, !dbg !40
  br i1 %.not.i28, label %156, label %154, !dbg !40

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !40
  br label %__nv_rsqrtf.exit30, !dbg !40

156:                                              ; preds = %__nv_rsqrtf.exit
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !40
  br label %__nv_rsqrtf.exit30, !dbg !40

__nv_rsqrtf.exit30:                               ; preds = %154, %156
  %.0.i29 = phi float [ %155, %154 ], [ %157, %156 ], !dbg !40
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %96
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %160 = or disjoint i32 %17, 4
  %161 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %160
  %162 = zext nneg i32 %96 to i64, !dbg !41
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) %159, i32 8
  %164 = getelementptr inbounds nuw i8, ptr addrspace(3) %161, i32 8
  %165 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !42
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %167, !dbg !41

167:                                              ; preds = %__nv_rsqrtf.exit30, %167
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit30 ], [ %indvars.iv.next, %167 ]
  %168 = or disjoint i64 %indvars.iv, %162, !dbg !43
  %169 = getelementptr bfloat, ptr addrspace(1) %3, i64 %168, !dbg !44
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #5, !dbg !45
  %171 = bitcast i16 %170 to bfloat, !dbg !45
  %172 = fpext bfloat %171 to float, !dbg !46
  %173 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !47
  %174 = or i32 %19, %173, !dbg !47
  %175 = sext i32 %174 to i64, !dbg !48
  %176 = getelementptr bfloat, ptr addrspace(1) %0, i64 %175, !dbg !48
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %176, i1 %15) #5, !dbg !49
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !49
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !49
  %180 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !49
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !49
  %182 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !49
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !49
  %184 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !49
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !49
  %186 = getelementptr bfloat, ptr addrspace(1) %1, i64 %175, !dbg !50
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %186, i1 %15) #5, !dbg !51
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !51
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !51
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !51
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !51
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !51
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !51
  %194 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !51
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !51
  %196 = getelementptr bfloat, ptr addrspace(1) %2, i64 %175, !dbg !52
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %196, i1 %15) #5, !dbg !53
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !53
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !53
  %200 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !53
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !53
  %202 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !53
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !53
  %204 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !53
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %206 = bitcast float %172 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %206, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %207 = getelementptr bfloat, ptr addrspace(1) %4, i64 %175, !dbg !55
  %208 = fpext <2 x bfloat> %179 to <2 x float>, !dbg !56
  %209 = fpext <2 x bfloat> %189 to <2 x float>, !dbg !57
  %210 = fpext <2 x bfloat> %199 to <2 x float>, !dbg !58
  %211 = fadd <2 x float> %208, %209, !dbg !59
  %212 = fadd <2 x float> %211, %210, !dbg !60
  %213 = fmul <2 x float> %166, %212, !dbg !42
  %214 = load <2 x float>, ptr addrspace(3) %159, align 16, !dbg !54
  %215 = fmul <2 x float> %214, %213, !dbg !54
  %216 = fptrunc <2 x float> %215 to <2 x bfloat>, !dbg !61
  %217 = fpext <2 x bfloat> %181 to <2 x float>, !dbg !56
  %218 = fpext <2 x bfloat> %191 to <2 x float>, !dbg !57
  %219 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !58
  %220 = fadd <2 x float> %217, %218, !dbg !59
  %221 = fadd <2 x float> %220, %219, !dbg !60
  %222 = fmul <2 x float> %166, %221, !dbg !42
  %223 = load <2 x float>, ptr addrspace(3) %163, align 8, !dbg !54
  %224 = fmul <2 x float> %223, %222, !dbg !54
  %225 = fptrunc <2 x float> %224 to <2 x bfloat>, !dbg !61
  %226 = fpext <2 x bfloat> %183 to <2 x float>, !dbg !56
  %227 = fpext <2 x bfloat> %193 to <2 x float>, !dbg !57
  %228 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !58
  %229 = fadd <2 x float> %226, %227, !dbg !59
  %230 = fadd <2 x float> %229, %228, !dbg !60
  %231 = fmul <2 x float> %166, %230, !dbg !42
  %232 = load <2 x float>, ptr addrspace(3) %161, align 16, !dbg !54
  %233 = fmul <2 x float> %232, %231, !dbg !54
  %234 = fptrunc <2 x float> %233 to <2 x bfloat>, !dbg !61
  %235 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !56
  %236 = fpext <2 x bfloat> %195 to <2 x float>, !dbg !57
  %237 = fpext <2 x bfloat> %205 to <2 x float>, !dbg !58
  %238 = fadd <2 x float> %235, %236, !dbg !59
  %239 = fadd <2 x float> %238, %237, !dbg !60
  %240 = fmul <2 x float> %166, %239, !dbg !42
  %241 = load <2 x float>, ptr addrspace(3) %164, align 8, !dbg !54
  %242 = fmul <2 x float> %241, %240, !dbg !54
  %243 = fptrunc <2 x float> %242 to <2 x bfloat>, !dbg !61
  %244 = bitcast <2 x bfloat> %216 to i32, !dbg !61
  %245 = bitcast <2 x bfloat> %225 to i32, !dbg !61
  %246 = bitcast <2 x bfloat> %234 to i32, !dbg !61
  %247 = bitcast <2 x bfloat> %243 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %207, i1 %15) #5, !dbg !61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !41
  %248 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !41
  br i1 %248, label %167, label %249, !dbg !41

249:                                              ; preds = %167
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6asjslmly5ocj3s6mh3iu62oswtuony7ojqrjyoleomizjp2in.py", directory: "/tmp/torchinductor_root/m6")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 45, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 36, column: 112, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 112, scope: !6)
!28 = !DILocation(line: 39, column: 22, scope: !6)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 42, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 23, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 46, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 63, column: 24, scope: !6)
!40 = !DILocation(line: 64, column: 32, scope: !6)
!41 = !DILocation(line: 47, column: 40, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 48, column: 31, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 42, scope: !6)
!46 = !DILocation(line: 53, column: 95, scope: !6)
!47 = !DILocation(line: 54, column: 42, scope: !6)
!48 = !DILocation(line: 54, column: 35, scope: !6)
!49 = !DILocation(line: 54, column: 52, scope: !6)
!50 = !DILocation(line: 55, column: 35, scope: !6)
!51 = !DILocation(line: 55, column: 52, scope: !6)
!52 = !DILocation(line: 56, column: 35, scope: !6)
!53 = !DILocation(line: 56, column: 52, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 68, column: 29, scope: !6)
!56 = !DILocation(line: 54, column: 114, scope: !6)
!57 = !DILocation(line: 55, column: 114, scope: !6)
!58 = !DILocation(line: 56, column: 114, scope: !6)
!59 = !DILocation(line: 57, column: 24, scope: !6)
!60 = !DILocation(line: 58, column: 24, scope: !6)
!61 = !DILocation(line: 68, column: 53, scope: !6)
!62 = !DILocation(line: 47, column: 4, scope: !6)
