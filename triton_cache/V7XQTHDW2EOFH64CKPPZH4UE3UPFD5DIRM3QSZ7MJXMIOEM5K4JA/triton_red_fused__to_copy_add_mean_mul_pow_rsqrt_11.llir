; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 1, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, 512, !dbg !13
  %17 = shl i32 %12, 2, !dbg !14
  %18 = and i32 %17, 4, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  br label %21, !dbg !16

21:                                               ; preds = %9, %21
  %22 = phi float [ 0.000000e+00, %9 ], [ %105, %21 ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %106, %21 ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %107, %21 ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %108, %21 ]
  %26 = phi i32 [ 0, %9 ], [ %109, %21 ]
  %27 = or i32 %20, %26, !dbg !17
  %28 = sext i32 %27 to i64, !dbg !18
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %16) #4, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !19
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !19
  %35 = extractelement <2 x bfloat> %32, i64 0, !dbg !19
  %36 = extractelement <2 x bfloat> %32, i64 1, !dbg !19
  %37 = extractelement <2 x bfloat> %34, i64 0, !dbg !19
  %38 = extractelement <2 x bfloat> %34, i64 1, !dbg !19
  %39 = fpext bfloat %35 to float, !dbg !20
  %40 = fpext bfloat %36 to float, !dbg !20
  %41 = fpext bfloat %37 to float, !dbg !20
  %42 = fpext bfloat %38 to float, !dbg !20
  %43 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !21
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %16) #4, !dbg !22
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = extractelement <2 x bfloat> %46, i64 0, !dbg !22
  %50 = extractelement <2 x bfloat> %46, i64 1, !dbg !22
  %51 = extractelement <2 x bfloat> %48, i64 0, !dbg !22
  %52 = extractelement <2 x bfloat> %48, i64 1, !dbg !22
  %53 = fpext bfloat %49 to float, !dbg !23
  %54 = fpext bfloat %50 to float, !dbg !23
  %55 = fpext bfloat %51 to float, !dbg !23
  %56 = fpext bfloat %52 to float, !dbg !23
  %57 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !24
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 %16) #4, !dbg !25
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !25
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !25
  %61 = extractvalue { i32, i32 } %58, 1, !dbg !25
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !25
  %63 = extractelement <2 x bfloat> %60, i64 0, !dbg !25
  %64 = extractelement <2 x bfloat> %60, i64 1, !dbg !25
  %65 = extractelement <2 x bfloat> %62, i64 0, !dbg !25
  %66 = extractelement <2 x bfloat> %62, i64 1, !dbg !25
  %67 = fpext bfloat %63 to float, !dbg !26
  %68 = fpext bfloat %64 to float, !dbg !26
  %69 = fpext bfloat %65 to float, !dbg !26
  %70 = fpext bfloat %66 to float, !dbg !26
  %71 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !27
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %71, i1 %16) #4, !dbg !28
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !28
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !28
  %75 = extractvalue { i32, i32 } %72, 1, !dbg !28
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !28
  %77 = extractelement <2 x bfloat> %74, i64 0, !dbg !28
  %78 = extractelement <2 x bfloat> %74, i64 1, !dbg !28
  %79 = extractelement <2 x bfloat> %76, i64 0, !dbg !28
  %80 = extractelement <2 x bfloat> %76, i64 1, !dbg !28
  %81 = fpext bfloat %77 to float, !dbg !29
  %82 = fpext bfloat %78 to float, !dbg !29
  %83 = fpext bfloat %79 to float, !dbg !29
  %84 = fpext bfloat %80 to float, !dbg !29
  %85 = fadd float %39, %53, !dbg !30
  %86 = fadd float %40, %54, !dbg !30
  %87 = fadd float %41, %55, !dbg !30
  %88 = fadd float %42, %56, !dbg !30
  %89 = fadd float %85, %67, !dbg !31
  %90 = fadd float %86, %68, !dbg !31
  %91 = fadd float %87, %69, !dbg !31
  %92 = fadd float %88, %70, !dbg !31
  %93 = fadd float %89, %81, !dbg !32
  %94 = fadd float %90, %82, !dbg !32
  %95 = fadd float %91, %83, !dbg !32
  %96 = fadd float %92, %84, !dbg !32
  %97 = fmul float %93, %93, !dbg !33
  %98 = fmul float %94, %94, !dbg !33
  %99 = fmul float %95, %95, !dbg !33
  %100 = fmul float %96, %96, !dbg !33
  %101 = fadd float %22, %97, !dbg !34
  %102 = fadd float %23, %98, !dbg !34
  %103 = fadd float %24, %99, !dbg !34
  %104 = fadd float %25, %100, !dbg !34
  %105 = select i1 %16, float %101, float %22, !dbg !35
  %106 = select i1 %16, float %102, float %23, !dbg !35
  %107 = select i1 %16, float %103, float %24, !dbg !35
  %108 = select i1 %16, float %104, float %25, !dbg !35
  %109 = add nuw nsw i32 %26, 8, !dbg !16
  %110 = icmp samesign ult i32 %26, 4088, !dbg !16
  br i1 %110, label %21, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %21
  %111 = fadd float %105, %106, !dbg !36
  %112 = fadd float %107, %111, !dbg !36
  %113 = fadd float %108, %112, !dbg !36
  %114 = bitcast float %113 to i32, !dbg !41
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !41
  %116 = bitcast i32 %115 to float, !dbg !41
  %117 = fadd float %113, %116, !dbg !36
  %118 = tail call float @llvm.nvvm.div.full(float %117, float 4.096000e+03), !dbg !42
  %119 = fadd float %118, 0x3EB0C6F7A0000000, !dbg !43
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i8 = icmp eq i32 %123, 0, !dbg !44
  br i1 %.not.i8, label %126, label %124, !dbg !44

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !44
  br label %__nv_rsqrtf.exit10, !dbg !44

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !44
  br label %__nv_rsqrtf.exit10, !dbg !44

__nv_rsqrtf.exit10:                               ; preds = %124, %126
  %.0.i9 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !44
  %128 = zext nneg i32 %18 to i64, !dbg !45
  %129 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !46
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %131, !dbg !45

131:                                              ; preds = %__nv_rsqrtf.exit10, %131
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit10 ], [ %indvars.iv.next, %131 ]
  %132 = or disjoint i64 %indvars.iv, %128, !dbg !47
  %133 = getelementptr bfloat, ptr addrspace(1) %4, i64 %132, !dbg !48
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %133, i1 true) #4, !dbg !49
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !49
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !49
  %137 = extractvalue { i32, i32 } %134, 1, !dbg !49
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !49
  %139 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %20, %139
  %140 = sext i32 %.reass to i64, !dbg !50
  %141 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !50
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %141, i1 %16) #4, !dbg !51
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !51
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !51
  %145 = extractvalue { i32, i32 } %142, 1, !dbg !51
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !51
  %147 = getelementptr bfloat, ptr addrspace(1) %1, i64 %140, !dbg !52
  %148 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %147, i1 %16) #4, !dbg !53
  %149 = extractvalue { i32, i32 } %148, 0, !dbg !53
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !53
  %151 = extractvalue { i32, i32 } %148, 1, !dbg !53
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !53
  %153 = getelementptr bfloat, ptr addrspace(1) %2, i64 %140, !dbg !54
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %153, i1 %16) #4, !dbg !55
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !55
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !55
  %157 = extractvalue { i32, i32 } %154, 1, !dbg !55
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !55
  %159 = getelementptr bfloat, ptr addrspace(1) %3, i64 %140, !dbg !56
  %160 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %159, i1 %16) #4, !dbg !57
  %161 = extractvalue { i32, i32 } %160, 0, !dbg !57
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !57
  %163 = extractvalue { i32, i32 } %160, 1, !dbg !57
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !57
  %165 = getelementptr bfloat, ptr addrspace(1) %5, i64 %140, !dbg !58
  %166 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !59
  %167 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !60
  %168 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !61
  %169 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !62
  %170 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !63
  %171 = fadd <2 x float> %167, %168, !dbg !64
  %172 = fadd <2 x float> %171, %169, !dbg !65
  %173 = fadd <2 x float> %172, %170, !dbg !66
  %174 = fmul <2 x float> %130, %173, !dbg !46
  %175 = fmul <2 x float> %174, %166, !dbg !67
  %176 = fptrunc <2 x float> %175 to <2 x bfloat>, !dbg !68
  %177 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !59
  %178 = fpext <2 x bfloat> %146 to <2 x float>, !dbg !60
  %179 = fpext <2 x bfloat> %152 to <2 x float>, !dbg !61
  %180 = fpext <2 x bfloat> %158 to <2 x float>, !dbg !62
  %181 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !63
  %182 = fadd <2 x float> %178, %179, !dbg !64
  %183 = fadd <2 x float> %182, %180, !dbg !65
  %184 = fadd <2 x float> %183, %181, !dbg !66
  %185 = fmul <2 x float> %130, %184, !dbg !46
  %186 = fmul <2 x float> %185, %177, !dbg !67
  %187 = fptrunc <2 x float> %186 to <2 x bfloat>, !dbg !68
  %188 = bitcast <2 x bfloat> %176 to i32, !dbg !68
  %189 = bitcast <2 x bfloat> %187 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %188, i32 %189, ptr addrspace(1) %165, i1 %16) #4, !dbg !68
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !45
  %190 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !45
  br i1 %190, label %131, label %191, !dbg !45

191:                                              ; preds = %131
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4upwsrvkdze6mqedjhebpbnbrqt4kzathlmdnngjhyxujfmagd.py", directory: "/tmp/torchinductor_root/s4")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 112, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 112, scope: !6)
!24 = !DILocation(line: 38, column: 34, scope: !6)
!25 = !DILocation(line: 38, column: 51, scope: !6)
!26 = !DILocation(line: 38, column: 112, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 51, scope: !6)
!29 = !DILocation(line: 39, column: 112, scope: !6)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 42, column: 22, scope: !6)
!33 = !DILocation(line: 44, column: 22, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 47, column: 50, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!40 = !DILocation(line: 48, column: 27, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 65, column: 25, scope: !6)
!43 = !DILocation(line: 67, column: 24, scope: !6)
!44 = !DILocation(line: 68, column: 32, scope: !6)
!45 = !DILocation(line: 49, column: 40, scope: !6)
!46 = !DILocation(line: 69, column: 24, scope: !6)
!47 = !DILocation(line: 50, column: 31, scope: !6)
!48 = !DILocation(line: 55, column: 35, scope: !6)
!49 = !DILocation(line: 55, column: 42, scope: !6)
!50 = !DILocation(line: 56, column: 35, scope: !6)
!51 = !DILocation(line: 56, column: 52, scope: !6)
!52 = !DILocation(line: 57, column: 35, scope: !6)
!53 = !DILocation(line: 57, column: 52, scope: !6)
!54 = !DILocation(line: 58, column: 35, scope: !6)
!55 = !DILocation(line: 58, column: 52, scope: !6)
!56 = !DILocation(line: 59, column: 35, scope: !6)
!57 = !DILocation(line: 59, column: 52, scope: !6)
!58 = !DILocation(line: 72, column: 29, scope: !6)
!59 = !DILocation(line: 55, column: 95, scope: !6)
!60 = !DILocation(line: 56, column: 114, scope: !6)
!61 = !DILocation(line: 57, column: 114, scope: !6)
!62 = !DILocation(line: 58, column: 114, scope: !6)
!63 = !DILocation(line: 59, column: 114, scope: !6)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 61, column: 24, scope: !6)
!66 = !DILocation(line: 62, column: 24, scope: !6)
!67 = !DILocation(line: 71, column: 24, scope: !6)
!68 = !DILocation(line: 72, column: 53, scope: !6)
!69 = !DILocation(line: 49, column: 4, scope: !6)
