; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 2, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %22, 6, !dbg !11
  %23 = and i32 %.lobit3, 3, !dbg !11
  %24 = lshr i32 %22, 7, !dbg !11
  %.lobit = and i32 %24, 1, !dbg !11
  %25 = and i32 %22, 31, !dbg !11
  %26 = or disjoint i32 %23, %21, !dbg !12
  %27 = or disjoint i32 %.lobit, %21, !dbg !11
  %28 = or disjoint i32 %27, 2, !dbg !12
  %29 = icmp slt i32 %26, 4112, !dbg !13
  %30 = icmp slt i32 %21, 4112, !dbg !13
  %31 = icmp slt i32 %28, 4112, !dbg !13
  %32 = shl i32 %22, 4, !dbg !14
  %33 = and i32 %32, 1008, !dbg !14
  %34 = or disjoint i32 %33, 8, !dbg !14
  %35 = shl i32 %22, 2, !dbg !14
  %36 = shl i32 %22, 3, !dbg !14
  %37 = mul i32 %26, 3072, !dbg !15
  %38 = or disjoint i32 %37, %33
  %39 = or disjoint i32 %37, %34
  br label %40, !dbg !16

40:                                               ; preds = %19, %._crit_edge
  %indvars.iv = phi i64 [ 0, %19 ], [ %indvars.iv.next, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %324, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %325, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %326, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %327, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %328, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %329, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %330, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %331, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %332, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %333, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %334, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %335, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %336, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %337, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %338, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %339, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %308, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %309, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %310, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %311, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %312, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %313, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %314, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %315, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %316, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %317, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %318, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %319, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %320, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %321, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %322, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %323, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %292, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %293, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %294, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %295, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %296, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %297, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %298, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %299, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %300, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %301, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %302, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %303, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %19 ], [ %304, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %19 ], [ %305, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %19 ], [ %306, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %19 ], [ %307, %._crit_edge ]
  %89 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %90 = add i32 %38, %89, !dbg !17
  %91 = add i32 %39, %89, !dbg !17
  %92 = sext i32 %90 to i64, !dbg !18
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !18
  %94 = sext i32 %91 to i64, !dbg !18
  %95 = getelementptr bfloat, ptr addrspace(1) %0, i64 %94, !dbg !18
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %93, i1 %29) #5, !dbg !19
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !19
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !19
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !19
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !19
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !19
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !19
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !19
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !19
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !19
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !19
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !19
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !19
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !19
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !19
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !19
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !19
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %95, i1 %29) #5, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !19
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !19
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !19
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !19
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !19
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !19
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !19
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !19
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !19
  %124 = extractelement <2 x bfloat> %117, i64 0, !dbg !19
  %125 = extractelement <2 x bfloat> %117, i64 1, !dbg !19
  %126 = extractelement <2 x bfloat> %119, i64 0, !dbg !19
  %127 = extractelement <2 x bfloat> %119, i64 1, !dbg !19
  %128 = extractelement <2 x bfloat> %121, i64 0, !dbg !19
  %129 = extractelement <2 x bfloat> %121, i64 1, !dbg !19
  %130 = fpext bfloat %105 to float, !dbg !20
  %131 = fpext bfloat %106 to float, !dbg !20
  %132 = fpext bfloat %107 to float, !dbg !20
  %133 = fpext bfloat %108 to float, !dbg !20
  %134 = fpext bfloat %109 to float, !dbg !20
  %135 = fpext bfloat %110 to float, !dbg !20
  %136 = fpext bfloat %111 to float, !dbg !20
  %137 = fpext bfloat %112 to float, !dbg !20
  %138 = fpext bfloat %122 to float, !dbg !20
  %139 = fpext bfloat %123 to float, !dbg !20
  %140 = fpext bfloat %124 to float, !dbg !20
  %141 = fpext bfloat %125 to float, !dbg !20
  %142 = fpext bfloat %126 to float, !dbg !20
  %143 = fpext bfloat %127 to float, !dbg !20
  %144 = fpext bfloat %128 to float, !dbg !20
  %145 = fpext bfloat %129 to float, !dbg !20
  %146 = icmp eq i64 %indvars.iv, 0, !dbg !21
  br i1 %146, label %._crit_edge, label %147, !dbg !22

147:                                              ; preds = %40
  %148 = fsub float %130, %73, !dbg !26
  %149 = fsub float %131, %74, !dbg !26
  %150 = fsub float %132, %75, !dbg !26
  %151 = fsub float %133, %76, !dbg !26
  %152 = fsub float %134, %77, !dbg !26
  %153 = fsub float %135, %78, !dbg !26
  %154 = fsub float %136, %79, !dbg !26
  %155 = fsub float %137, %80, !dbg !26
  %156 = fsub float %138, %81, !dbg !26
  %157 = fsub float %139, %82, !dbg !26
  %158 = fsub float %140, %83, !dbg !26
  %159 = fsub float %141, %84, !dbg !26
  %160 = fsub float %142, %85, !dbg !26
  %161 = fsub float %143, %86, !dbg !26
  %162 = fsub float %144, %87, !dbg !26
  %163 = fsub float %145, %88, !dbg !26
  %164 = fadd float %41, 1.000000e+00, !dbg !27
  %165 = fadd float %42, 1.000000e+00, !dbg !27
  %166 = fadd float %43, 1.000000e+00, !dbg !27
  %167 = fadd float %44, 1.000000e+00, !dbg !27
  %168 = fadd float %45, 1.000000e+00, !dbg !27
  %169 = fadd float %46, 1.000000e+00, !dbg !27
  %170 = fadd float %47, 1.000000e+00, !dbg !27
  %171 = fadd float %48, 1.000000e+00, !dbg !27
  %172 = fadd float %49, 1.000000e+00, !dbg !27
  %173 = fadd float %50, 1.000000e+00, !dbg !27
  %174 = fadd float %51, 1.000000e+00, !dbg !27
  %175 = fadd float %52, 1.000000e+00, !dbg !27
  %176 = fadd float %53, 1.000000e+00, !dbg !27
  %177 = fadd float %54, 1.000000e+00, !dbg !27
  %178 = fadd float %55, 1.000000e+00, !dbg !27
  %179 = fadd float %56, 1.000000e+00, !dbg !27
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !28
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !28
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !28
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !28
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !28
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !28
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !28
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !28
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !28
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !28
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !28
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !28
  %192 = tail call float @llvm.nvvm.div.full(float %160, float %176), !dbg !28
  %193 = tail call float @llvm.nvvm.div.full(float %161, float %177), !dbg !28
  %194 = tail call float @llvm.nvvm.div.full(float %162, float %178), !dbg !28
  %195 = tail call float @llvm.nvvm.div.full(float %163, float %179), !dbg !28
  %196 = fadd float %73, %180, !dbg !29
  %197 = fadd float %74, %181, !dbg !29
  %198 = fadd float %75, %182, !dbg !29
  %199 = fadd float %76, %183, !dbg !29
  %200 = fadd float %77, %184, !dbg !29
  %201 = fadd float %78, %185, !dbg !29
  %202 = fadd float %79, %186, !dbg !29
  %203 = fadd float %80, %187, !dbg !29
  %204 = fadd float %81, %188, !dbg !29
  %205 = fadd float %82, %189, !dbg !29
  %206 = fadd float %83, %190, !dbg !29
  %207 = fadd float %84, %191, !dbg !29
  %208 = fadd float %85, %192, !dbg !29
  %209 = fadd float %86, %193, !dbg !29
  %210 = fadd float %87, %194, !dbg !29
  %211 = fadd float %88, %195, !dbg !29
  %212 = fsub float %130, %196, !dbg !30
  %213 = fsub float %131, %197, !dbg !30
  %214 = fsub float %132, %198, !dbg !30
  %215 = fsub float %133, %199, !dbg !30
  %216 = fsub float %134, %200, !dbg !30
  %217 = fsub float %135, %201, !dbg !30
  %218 = fsub float %136, %202, !dbg !30
  %219 = fsub float %137, %203, !dbg !30
  %220 = fsub float %138, %204, !dbg !30
  %221 = fsub float %139, %205, !dbg !30
  %222 = fsub float %140, %206, !dbg !30
  %223 = fsub float %141, %207, !dbg !30
  %224 = fsub float %142, %208, !dbg !30
  %225 = fsub float %143, %209, !dbg !30
  %226 = fsub float %144, %210, !dbg !30
  %227 = fsub float %145, %211, !dbg !30
  %228 = fmul float %148, %212, !dbg !31
  %229 = fmul float %149, %213, !dbg !31
  %230 = fmul float %150, %214, !dbg !31
  %231 = fmul float %151, %215, !dbg !31
  %232 = fmul float %152, %216, !dbg !31
  %233 = fmul float %153, %217, !dbg !31
  %234 = fmul float %154, %218, !dbg !31
  %235 = fmul float %155, %219, !dbg !31
  %236 = fmul float %156, %220, !dbg !31
  %237 = fmul float %157, %221, !dbg !31
  %238 = fmul float %158, %222, !dbg !31
  %239 = fmul float %159, %223, !dbg !31
  %240 = fmul float %160, %224, !dbg !31
  %241 = fmul float %161, %225, !dbg !31
  %242 = fmul float %162, %226, !dbg !31
  %243 = fmul float %163, %227, !dbg !31
  %244 = fadd float %57, %228, !dbg !32
  %245 = fadd float %58, %229, !dbg !32
  %246 = fadd float %59, %230, !dbg !32
  %247 = fadd float %60, %231, !dbg !32
  %248 = fadd float %61, %232, !dbg !32
  %249 = fadd float %62, %233, !dbg !32
  %250 = fadd float %63, %234, !dbg !32
  %251 = fadd float %64, %235, !dbg !32
  %252 = fadd float %65, %236, !dbg !32
  %253 = fadd float %66, %237, !dbg !32
  %254 = fadd float %67, %238, !dbg !32
  %255 = fadd float %68, %239, !dbg !32
  %256 = fadd float %69, %240, !dbg !32
  %257 = fadd float %70, %241, !dbg !32
  %258 = fadd float %71, %242, !dbg !32
  %259 = fadd float %72, %243, !dbg !32
  br label %._crit_edge, !dbg !22

._crit_edge:                                      ; preds = %40, %147
  %260 = phi float [ %244, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %261 = phi float [ %245, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %262 = phi float [ %246, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %263 = phi float [ %247, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %264 = phi float [ %248, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %265 = phi float [ %249, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %266 = phi float [ %250, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %267 = phi float [ %251, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %268 = phi float [ %252, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %269 = phi float [ %253, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %270 = phi float [ %254, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %271 = phi float [ %255, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %272 = phi float [ %256, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %273 = phi float [ %257, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %274 = phi float [ %258, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %275 = phi float [ %259, %147 ], [ 0.000000e+00, %40 ], !dbg !25
  %.pn82 = phi float [ %196, %147 ], [ %130, %40 ]
  %.pn80 = phi float [ %197, %147 ], [ %131, %40 ]
  %.pn78 = phi float [ %198, %147 ], [ %132, %40 ]
  %.pn76 = phi float [ %199, %147 ], [ %133, %40 ]
  %.pn74 = phi float [ %200, %147 ], [ %134, %40 ]
  %.pn72 = phi float [ %201, %147 ], [ %135, %40 ]
  %.pn70 = phi float [ %202, %147 ], [ %136, %40 ]
  %.pn68 = phi float [ %203, %147 ], [ %137, %40 ]
  %.pn66 = phi float [ %204, %147 ], [ %138, %40 ]
  %.pn64 = phi float [ %205, %147 ], [ %139, %40 ]
  %.pn62 = phi float [ %206, %147 ], [ %140, %40 ]
  %.pn60 = phi float [ %207, %147 ], [ %141, %40 ]
  %.pn58 = phi float [ %208, %147 ], [ %142, %40 ]
  %.pn56 = phi float [ %209, %147 ], [ %143, %40 ]
  %.pn54 = phi float [ %210, %147 ], [ %144, %40 ]
  %.pn52 = phi float [ %211, %147 ], [ %145, %40 ]
  %276 = phi float [ %164, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %277 = phi float [ %165, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %278 = phi float [ %166, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %279 = phi float [ %167, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %280 = phi float [ %168, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %281 = phi float [ %169, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %282 = phi float [ %170, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %283 = phi float [ %171, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %284 = phi float [ %172, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %285 = phi float [ %173, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %286 = phi float [ %174, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %287 = phi float [ %175, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %288 = phi float [ %176, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %289 = phi float [ %177, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %290 = phi float [ %178, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %291 = phi float [ %179, %147 ], [ 1.000000e+00, %40 ], !dbg !25
  %292 = select i1 %29, float %.pn82, float %73, !dbg !33
  %293 = select i1 %29, float %.pn80, float %74, !dbg !33
  %294 = select i1 %29, float %.pn78, float %75, !dbg !33
  %295 = select i1 %29, float %.pn76, float %76, !dbg !33
  %296 = select i1 %29, float %.pn74, float %77, !dbg !33
  %297 = select i1 %29, float %.pn72, float %78, !dbg !33
  %298 = select i1 %29, float %.pn70, float %79, !dbg !33
  %299 = select i1 %29, float %.pn68, float %80, !dbg !33
  %300 = select i1 %29, float %.pn66, float %81, !dbg !33
  %301 = select i1 %29, float %.pn64, float %82, !dbg !33
  %302 = select i1 %29, float %.pn62, float %83, !dbg !33
  %303 = select i1 %29, float %.pn60, float %84, !dbg !33
  %304 = select i1 %29, float %.pn58, float %85, !dbg !33
  %305 = select i1 %29, float %.pn56, float %86, !dbg !33
  %306 = select i1 %29, float %.pn54, float %87, !dbg !33
  %307 = select i1 %29, float %.pn52, float %88, !dbg !33
  %308 = select i1 %29, float %260, float %57, !dbg !34
  %309 = select i1 %29, float %261, float %58, !dbg !34
  %310 = select i1 %29, float %262, float %59, !dbg !34
  %311 = select i1 %29, float %263, float %60, !dbg !34
  %312 = select i1 %29, float %264, float %61, !dbg !34
  %313 = select i1 %29, float %265, float %62, !dbg !34
  %314 = select i1 %29, float %266, float %63, !dbg !34
  %315 = select i1 %29, float %267, float %64, !dbg !34
  %316 = select i1 %29, float %268, float %65, !dbg !34
  %317 = select i1 %29, float %269, float %66, !dbg !34
  %318 = select i1 %29, float %270, float %67, !dbg !34
  %319 = select i1 %29, float %271, float %68, !dbg !34
  %320 = select i1 %29, float %272, float %69, !dbg !34
  %321 = select i1 %29, float %273, float %70, !dbg !34
  %322 = select i1 %29, float %274, float %71, !dbg !34
  %323 = select i1 %29, float %275, float %72, !dbg !34
  %324 = select i1 %29, float %276, float %41, !dbg !35
  %325 = select i1 %29, float %277, float %42, !dbg !35
  %326 = select i1 %29, float %278, float %43, !dbg !35
  %327 = select i1 %29, float %279, float %44, !dbg !35
  %328 = select i1 %29, float %280, float %45, !dbg !35
  %329 = select i1 %29, float %281, float %46, !dbg !35
  %330 = select i1 %29, float %282, float %47, !dbg !35
  %331 = select i1 %29, float %283, float %48, !dbg !35
  %332 = select i1 %29, float %284, float %49, !dbg !35
  %333 = select i1 %29, float %285, float %50, !dbg !35
  %334 = select i1 %29, float %286, float %51, !dbg !35
  %335 = select i1 %29, float %287, float %52, !dbg !35
  %336 = select i1 %29, float %288, float %53, !dbg !35
  %337 = select i1 %29, float %289, float %54, !dbg !35
  %338 = select i1 %29, float %290, float %55, !dbg !35
  %339 = select i1 %29, float %291, float %56, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !16
  %340 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !16
  br i1 %340, label %40, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %341 = lshr i32 %22, 5, !dbg !11
  %342 = and i32 %22, 3, !dbg !11
  %343 = or disjoint i32 %21, %342, !dbg !12
  %344 = icmp slt i32 %27, 4112, !dbg !13
  %345 = icmp slt i32 %343, 4112, !dbg !13
  %346 = and i32 %35, 1020, !dbg !14
  %347 = and i32 %36, 1016, !dbg !14
  %348 = fsub float %293, %292, !dbg !36
  %349 = fadd float %324, %325, !dbg !39
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !40
  %351 = tail call float @llvm.nvvm.div.full(float %325, float %349), !dbg !41
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !42
  %353 = fmul float %348, %352, !dbg !43
  %354 = fadd float %292, %353, !dbg !44
  %355 = fadd float %308, %309, !dbg !45
  %356 = fmul float %348, %348, !dbg !46
  %357 = fmul float %356, %324, !dbg !47
  %358 = fmul float %357, %352, !dbg !48
  %359 = fadd float %355, %358, !dbg !49
  %360 = fsub float %294, %354, !dbg !36
  %361 = fadd float %326, %349, !dbg !39
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !40
  %363 = tail call float @llvm.nvvm.div.full(float %326, float %361), !dbg !41
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !42
  %365 = fmul float %364, %360, !dbg !43
  %366 = fadd float %354, %365, !dbg !44
  %367 = fadd float %310, %359, !dbg !45
  %368 = fmul float %360, %360, !dbg !46
  %369 = fmul float %349, %368, !dbg !47
  %370 = fmul float %364, %369, !dbg !48
  %371 = fadd float %367, %370, !dbg !49
  %372 = fsub float %295, %366, !dbg !36
  %373 = fadd float %327, %361, !dbg !39
  %374 = fcmp oeq float %373, 0.000000e+00, !dbg !40
  %375 = tail call float @llvm.nvvm.div.full(float %327, float %373), !dbg !41
  %376 = select i1 %374, float 0.000000e+00, float %375, !dbg !42
  %377 = fmul float %376, %372, !dbg !43
  %378 = fadd float %366, %377, !dbg !44
  %379 = fadd float %311, %371, !dbg !45
  %380 = fmul float %372, %372, !dbg !46
  %381 = fmul float %361, %380, !dbg !47
  %382 = fmul float %376, %381, !dbg !48
  %383 = fadd float %379, %382, !dbg !49
  %384 = fsub float %296, %378, !dbg !36
  %385 = fadd float %328, %373, !dbg !39
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !40
  %387 = tail call float @llvm.nvvm.div.full(float %328, float %385), !dbg !41
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !42
  %389 = fmul float %388, %384, !dbg !43
  %390 = fadd float %378, %389, !dbg !44
  %391 = fadd float %312, %383, !dbg !45
  %392 = fmul float %384, %384, !dbg !46
  %393 = fmul float %373, %392, !dbg !47
  %394 = fmul float %388, %393, !dbg !48
  %395 = fadd float %391, %394, !dbg !49
  %396 = fsub float %297, %390, !dbg !36
  %397 = fadd float %329, %385, !dbg !39
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !40
  %399 = tail call float @llvm.nvvm.div.full(float %329, float %397), !dbg !41
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !42
  %401 = fmul float %400, %396, !dbg !43
  %402 = fadd float %390, %401, !dbg !44
  %403 = fadd float %313, %395, !dbg !45
  %404 = fmul float %396, %396, !dbg !46
  %405 = fmul float %385, %404, !dbg !47
  %406 = fmul float %400, %405, !dbg !48
  %407 = fadd float %403, %406, !dbg !49
  %408 = fsub float %298, %402, !dbg !36
  %409 = fadd float %330, %397, !dbg !39
  %410 = fcmp oeq float %409, 0.000000e+00, !dbg !40
  %411 = tail call float @llvm.nvvm.div.full(float %330, float %409), !dbg !41
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !42
  %413 = fmul float %412, %408, !dbg !43
  %414 = fadd float %402, %413, !dbg !44
  %415 = fadd float %314, %407, !dbg !45
  %416 = fmul float %408, %408, !dbg !46
  %417 = fmul float %397, %416, !dbg !47
  %418 = fmul float %412, %417, !dbg !48
  %419 = fadd float %415, %418, !dbg !49
  %420 = fsub float %299, %414, !dbg !36
  %421 = fadd float %331, %409, !dbg !39
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !40
  %423 = tail call float @llvm.nvvm.div.full(float %331, float %421), !dbg !41
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !42
  %425 = fmul float %424, %420, !dbg !43
  %426 = fadd float %414, %425, !dbg !44
  %427 = fadd float %315, %419, !dbg !45
  %428 = fmul float %420, %420, !dbg !46
  %429 = fmul float %409, %428, !dbg !47
  %430 = fmul float %424, %429, !dbg !48
  %431 = fadd float %427, %430, !dbg !49
  %432 = fsub float %300, %426, !dbg !36
  %433 = fadd float %332, %421, !dbg !39
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !40
  %435 = tail call float @llvm.nvvm.div.full(float %332, float %433), !dbg !41
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !42
  %437 = fmul float %436, %432, !dbg !43
  %438 = fadd float %426, %437, !dbg !44
  %439 = fadd float %316, %431, !dbg !45
  %440 = fmul float %432, %432, !dbg !46
  %441 = fmul float %421, %440, !dbg !47
  %442 = fmul float %436, %441, !dbg !48
  %443 = fadd float %439, %442, !dbg !49
  %444 = fsub float %301, %438, !dbg !36
  %445 = fadd float %333, %433, !dbg !39
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !40
  %447 = tail call float @llvm.nvvm.div.full(float %333, float %445), !dbg !41
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !42
  %449 = fmul float %448, %444, !dbg !43
  %450 = fadd float %438, %449, !dbg !44
  %451 = fadd float %317, %443, !dbg !45
  %452 = fmul float %444, %444, !dbg !46
  %453 = fmul float %433, %452, !dbg !47
  %454 = fmul float %448, %453, !dbg !48
  %455 = fadd float %451, %454, !dbg !49
  %456 = fsub float %302, %450, !dbg !36
  %457 = fadd float %334, %445, !dbg !39
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !40
  %459 = tail call float @llvm.nvvm.div.full(float %334, float %457), !dbg !41
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !42
  %461 = fmul float %460, %456, !dbg !43
  %462 = fadd float %450, %461, !dbg !44
  %463 = fadd float %318, %455, !dbg !45
  %464 = fmul float %456, %456, !dbg !46
  %465 = fmul float %445, %464, !dbg !47
  %466 = fmul float %460, %465, !dbg !48
  %467 = fadd float %463, %466, !dbg !49
  %468 = fsub float %303, %462, !dbg !36
  %469 = fadd float %335, %457, !dbg !39
  %470 = fcmp oeq float %469, 0.000000e+00, !dbg !40
  %471 = tail call float @llvm.nvvm.div.full(float %335, float %469), !dbg !41
  %472 = select i1 %470, float 0.000000e+00, float %471, !dbg !42
  %473 = fmul float %472, %468, !dbg !43
  %474 = fadd float %462, %473, !dbg !44
  %475 = fadd float %319, %467, !dbg !45
  %476 = fmul float %468, %468, !dbg !46
  %477 = fmul float %457, %476, !dbg !47
  %478 = fmul float %472, %477, !dbg !48
  %479 = fadd float %475, %478, !dbg !49
  %480 = fsub float %304, %474, !dbg !36
  %481 = fadd float %336, %469, !dbg !39
  %482 = fcmp oeq float %481, 0.000000e+00, !dbg !40
  %483 = tail call float @llvm.nvvm.div.full(float %336, float %481), !dbg !41
  %484 = select i1 %482, float 0.000000e+00, float %483, !dbg !42
  %485 = fmul float %484, %480, !dbg !43
  %486 = fadd float %474, %485, !dbg !44
  %487 = fadd float %320, %479, !dbg !45
  %488 = fmul float %480, %480, !dbg !46
  %489 = fmul float %469, %488, !dbg !47
  %490 = fmul float %484, %489, !dbg !48
  %491 = fadd float %487, %490, !dbg !49
  %492 = fsub float %305, %486, !dbg !36
  %493 = fadd float %337, %481, !dbg !39
  %494 = fcmp oeq float %493, 0.000000e+00, !dbg !40
  %495 = tail call float @llvm.nvvm.div.full(float %337, float %493), !dbg !41
  %496 = select i1 %494, float 0.000000e+00, float %495, !dbg !42
  %497 = fmul float %496, %492, !dbg !43
  %498 = fadd float %486, %497, !dbg !44
  %499 = fadd float %321, %491, !dbg !45
  %500 = fmul float %492, %492, !dbg !46
  %501 = fmul float %481, %500, !dbg !47
  %502 = fmul float %496, %501, !dbg !48
  %503 = fadd float %499, %502, !dbg !49
  %504 = fsub float %306, %498, !dbg !36
  %505 = fadd float %338, %493, !dbg !39
  %506 = fcmp oeq float %505, 0.000000e+00, !dbg !40
  %507 = tail call float @llvm.nvvm.div.full(float %338, float %505), !dbg !41
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !42
  %509 = fmul float %508, %504, !dbg !43
  %510 = fadd float %498, %509, !dbg !44
  %511 = fadd float %322, %503, !dbg !45
  %512 = fmul float %504, %504, !dbg !46
  %513 = fmul float %493, %512, !dbg !47
  %514 = fmul float %508, %513, !dbg !48
  %515 = fadd float %511, %514, !dbg !49
  %516 = fsub float %307, %510, !dbg !36
  %517 = fadd float %339, %505, !dbg !39
  %518 = fcmp oeq float %517, 0.000000e+00, !dbg !40
  %519 = tail call float @llvm.nvvm.div.full(float %339, float %517), !dbg !41
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !42
  %521 = fmul float %520, %516, !dbg !43
  %522 = fadd float %510, %521, !dbg !44
  %523 = fadd float %323, %515, !dbg !45
  %524 = fmul float %516, %516, !dbg !46
  %525 = fmul float %505, %524, !dbg !47
  %526 = fmul float %520, %525, !dbg !48
  %527 = fadd float %523, %526, !dbg !49
  %528 = bitcast float %522 to i32, !dbg !50
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 16, i32 31), !dbg !50
  %530 = bitcast i32 %529 to float, !dbg !50
  %531 = bitcast float %527 to i32, !dbg !50
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 16, i32 31), !dbg !50
  %533 = bitcast i32 %532 to float, !dbg !50
  %534 = bitcast float %517 to i32, !dbg !50
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !50
  %536 = bitcast i32 %535 to float, !dbg !50
  %537 = fsub float %530, %522, !dbg !36
  %538 = fadd float %517, %536, !dbg !39
  %539 = fcmp oeq float %538, 0.000000e+00, !dbg !40
  %540 = tail call float @llvm.nvvm.div.full(float %536, float %538), !dbg !41
  %541 = select i1 %539, float 0.000000e+00, float %540, !dbg !42
  %542 = fmul float %541, %537, !dbg !43
  %543 = fadd float %522, %542, !dbg !44
  %544 = fadd float %527, %533, !dbg !45
  %545 = fmul float %537, %537, !dbg !46
  %546 = fmul float %517, %545, !dbg !47
  %547 = fmul float %541, %546, !dbg !48
  %548 = fadd float %544, %547, !dbg !49
  %549 = bitcast float %543 to i32, !dbg !50
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 8, i32 31), !dbg !50
  %551 = bitcast i32 %550 to float, !dbg !50
  %552 = bitcast float %548 to i32, !dbg !50
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !50
  %554 = bitcast i32 %553 to float, !dbg !50
  %555 = bitcast float %538 to i32, !dbg !50
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 8, i32 31), !dbg !50
  %557 = bitcast i32 %556 to float, !dbg !50
  %558 = fsub float %551, %543, !dbg !36
  %559 = fadd float %538, %557, !dbg !39
  %560 = fcmp oeq float %559, 0.000000e+00, !dbg !40
  %561 = tail call float @llvm.nvvm.div.full(float %557, float %559), !dbg !41
  %562 = select i1 %560, float 0.000000e+00, float %561, !dbg !42
  %563 = fmul float %562, %558, !dbg !43
  %564 = fadd float %543, %563, !dbg !44
  %565 = fadd float %548, %554, !dbg !45
  %566 = fmul float %558, %558, !dbg !46
  %567 = fmul float %538, %566, !dbg !47
  %568 = fmul float %562, %567, !dbg !48
  %569 = fadd float %565, %568, !dbg !49
  %570 = bitcast float %564 to i32, !dbg !50
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 4, i32 31), !dbg !50
  %572 = bitcast i32 %571 to float, !dbg !50
  %573 = bitcast float %569 to i32, !dbg !50
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 4, i32 31), !dbg !50
  %575 = bitcast i32 %574 to float, !dbg !50
  %576 = bitcast float %559 to i32, !dbg !50
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !50
  %578 = bitcast i32 %577 to float, !dbg !50
  %579 = fsub float %572, %564, !dbg !36
  %580 = fadd float %559, %578, !dbg !39
  %581 = fcmp oeq float %580, 0.000000e+00, !dbg !40
  %582 = tail call float @llvm.nvvm.div.full(float %578, float %580), !dbg !41
  %583 = select i1 %581, float 0.000000e+00, float %582, !dbg !42
  %584 = fmul float %583, %579, !dbg !43
  %585 = fadd float %564, %584, !dbg !44
  %586 = fadd float %569, %575, !dbg !45
  %587 = fmul float %579, %579, !dbg !46
  %588 = fmul float %559, %587, !dbg !47
  %589 = fmul float %583, %588, !dbg !48
  %590 = fadd float %586, %589, !dbg !49
  %591 = bitcast float %585 to i32, !dbg !50
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 2, i32 31), !dbg !50
  %593 = bitcast i32 %592 to float, !dbg !50
  %594 = bitcast float %590 to i32, !dbg !50
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !50
  %596 = bitcast i32 %595 to float, !dbg !50
  %597 = bitcast float %580 to i32, !dbg !50
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !50
  %599 = bitcast i32 %598 to float, !dbg !50
  %600 = fsub float %593, %585, !dbg !36
  %601 = fadd float %580, %599, !dbg !39
  %602 = fcmp oeq float %601, 0.000000e+00, !dbg !40
  %603 = tail call float @llvm.nvvm.div.full(float %599, float %601), !dbg !41
  %604 = select i1 %602, float 0.000000e+00, float %603, !dbg !42
  %605 = fmul float %604, %600, !dbg !43
  %606 = fadd float %585, %605, !dbg !44
  %607 = fadd float %590, %596, !dbg !45
  %608 = fmul float %600, %600, !dbg !46
  %609 = fmul float %580, %608, !dbg !47
  %610 = fmul float %604, %609, !dbg !48
  %611 = fadd float %607, %610, !dbg !49
  %612 = bitcast float %606 to i32, !dbg !50
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !50
  %614 = bitcast i32 %613 to float, !dbg !50
  %615 = bitcast float %611 to i32, !dbg !50
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !50
  %617 = bitcast i32 %616 to float, !dbg !50
  %618 = bitcast float %601 to i32, !dbg !50
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !50
  %620 = bitcast i32 %619 to float, !dbg !50
  %621 = fsub float %614, %606, !dbg !36
  %622 = fadd float %601, %620, !dbg !39
  %623 = fcmp oeq float %622, 0.000000e+00, !dbg !40
  %624 = tail call float @llvm.nvvm.div.full(float %620, float %622), !dbg !41
  %625 = select i1 %623, float 0.000000e+00, float %624, !dbg !42
  %626 = fmul float %625, %621, !dbg !43
  %627 = fadd float %606, %626, !dbg !44
  %628 = fadd float %611, %617, !dbg !45
  %629 = fmul float %621, %621, !dbg !46
  %630 = fmul float %601, %629, !dbg !47
  %631 = fmul float %625, %630, !dbg !48
  %632 = fadd float %628, %631, !dbg !49
  %633 = and i32 %341, 1, !dbg !50
  %634 = icmp eq i32 %25, 0, !dbg !50
  %635 = shl nuw nsw i32 %23, 1, !dbg !50
  %636 = or disjoint i32 %635, %633, !dbg !50
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i32 %636, !dbg !50
  %638 = bitcast float %627 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %638, i1 %634) #5, !dbg !50
  %639 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %636, !dbg !50
  %640 = bitcast float %632 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %639, <1 x i32> %640, i1 %634) #5, !dbg !50
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %636, !dbg !50
  %642 = bitcast float %622 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 %634) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %643 = icmp slt i32 %22, 8, !dbg !50
  %644 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !50
  %645 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %643) #5, !dbg !50
  %646 = bitcast i32 %645 to float, !dbg !50
  %647 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %22, !dbg !50
  %648 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %647, i1 %643) #5, !dbg !50
  %649 = bitcast i32 %648 to float, !dbg !50
  %650 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !50
  %651 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %650, i1 %643) #5, !dbg !50
  %652 = bitcast i32 %651 to float, !dbg !50
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 1, i32 31), !dbg !50
  %654 = bitcast i32 %653 to float, !dbg !50
  %655 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 1, i32 31), !dbg !50
  %656 = bitcast i32 %655 to float, !dbg !50
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 1, i32 31), !dbg !50
  %658 = bitcast i32 %657 to float, !dbg !50
  %659 = fsub float %654, %646, !dbg !36
  %660 = fadd float %652, %658, !dbg !39
  %661 = fcmp oeq float %660, 0.000000e+00, !dbg !40
  %662 = tail call float @llvm.nvvm.div.full(float %658, float %660), !dbg !41
  %663 = select i1 %661, float 0.000000e+00, float %662, !dbg !42
  %664 = fmul float %659, %663, !dbg !43
  %665 = fadd float %664, %646, !dbg !44
  %666 = fadd float %649, %656, !dbg !45
  %667 = fmul float %659, %659, !dbg !46
  %668 = fmul float %667, %652, !dbg !47
  %669 = fmul float %668, %663, !dbg !48
  %670 = fadd float %666, %669, !dbg !49
  %671 = and i32 %22, 1, !dbg !50
  %672 = icmp eq i32 %671, 0, !dbg !50
  %673 = and i1 %643, %672, !dbg !50
  %674 = bitcast float %665 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %674, i1 %673) #5, !dbg !50
  %675 = bitcast float %670 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %675, i1 %673) #5, !dbg !50
  %676 = bitcast float %660 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %676, i1 %673) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %677 = getelementptr float, ptr addrspace(3) @global_smem, i32 %635, !dbg !50
  %678 = load float, ptr addrspace(3) %677, align 8, !dbg !50
  %679 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %635, !dbg !50
  %680 = load float, ptr addrspace(3) %679, align 8, !dbg !50
  %681 = mul i32 %27, 3072, !dbg !51
  %682 = mul i32 %28, 3072, !dbg !51
  %683 = tail call float @llvm.nvvm.div.full(float %680, float 3.072000e+03), !dbg !52
  %684 = fadd float %683, 0x3EB0C6F7A0000000, !dbg !53
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %686 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %693 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %694 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %695 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %696 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i125 = icmp eq i32 %700, 0, !dbg !54
  br i1 %.not.i125, label %703, label %701, !dbg !54

701:                                              ; preds = %__nv_rsqrtf.exit
  %702 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %684), !dbg !54
  br label %__nv_rsqrtf.exit127, !dbg !54

703:                                              ; preds = %__nv_rsqrtf.exit
  %704 = tail call float @llvm.nvvm.rsqrt.approx.f(float %684), !dbg !54
  br label %__nv_rsqrtf.exit127, !dbg !54

__nv_rsqrtf.exit127:                              ; preds = %701, %703
  %.0.i126 = phi float [ %702, %701 ], [ %704, %703 ], !dbg !54
  %705 = and i32 %32, 4080
  %706 = lshr i32 %32, 8
  %707 = and i32 %706, 12
  %708 = or disjoint i32 %707, %705
  %709 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %708
  %710 = or disjoint i32 %705, 4
  %711 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %707
  %712 = getelementptr inbounds nuw float, ptr addrspace(3) %711, i32 %710
  %713 = or disjoint i32 %705, 8
  %714 = getelementptr inbounds nuw float, ptr addrspace(3) %711, i32 %713
  %715 = or disjoint i32 %705, 12
  %716 = getelementptr inbounds nuw float, ptr addrspace(3) %711, i32 %715
  %717 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %346
  %718 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 4112
  %719 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 8224
  %720 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 12336
  %721 = and i32 %36, 2040
  %722 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %346
  %723 = getelementptr inbounds nuw i8, ptr addrspace(3) %722, i32 2064
  %724 = lshr i32 %36, 7
  %725 = and i32 %724, 8
  %726 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %725
  %727 = getelementptr bfloat, ptr addrspace(3) %726, i32 %721
  %728 = zext nneg i32 %346 to i64, !dbg !55
  %729 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 8
  %730 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 4120
  %731 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 8232
  %732 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 12340
  %733 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 12344
  %734 = insertelement <2 x i1> poison, i1 %30, i64 0, !dbg !56
  %735 = shufflevector <2 x i1> %734, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !56
  %736 = insertelement <4 x i1> poison, i1 %30, i64 0, !dbg !57
  %737 = shufflevector <4 x i1> %736, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  %738 = insertelement <16 x i1> poison, i1 %30, i64 0, !dbg !57
  %739 = shufflevector <16 x i1> %738, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !57
  br label %740, !dbg !55

740:                                              ; preds = %__nv_rsqrtf.exit127, %740
  %indvars.iv225 = phi i64 [ 0, %__nv_rsqrtf.exit127 ], [ %indvars.iv.next226, %740 ]
  %741 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %922, %740 ]
  %742 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %923, %740 ]
  %743 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %921, %740 ]
  %744 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %996, %740 ]
  %745 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %997, %740 ]
  %746 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit127 ], [ %998, %740 ]
  %747 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %985, %740 ]
  %748 = or disjoint i64 %indvars.iv225, %728, !dbg !58
  %749 = trunc nuw nsw i64 %indvars.iv225 to i32, !dbg !59
  %750 = add i32 %38, %749, !dbg !59
  %751 = add i32 %39, %749, !dbg !59
  %752 = trunc i64 %indvars.iv225 to i32, !dbg !59
  %753 = or disjoint i32 %347, %752, !dbg !59
  %754 = add i32 %753, %681, !dbg !59
  %755 = add i32 %753, %682, !dbg !59
  %756 = sext i32 %750 to i64, !dbg !60
  %757 = getelementptr bfloat, ptr addrspace(1) %0, i64 %756, !dbg !60
  %758 = sext i32 %751 to i64, !dbg !60
  %759 = getelementptr bfloat, ptr addrspace(1) %0, i64 %758, !dbg !60
  %760 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %757, i1 %29) #5, !dbg !61
  %761 = extractvalue { i32, i32, i32, i32 } %760, 0, !dbg !61
  %762 = bitcast i32 %761 to <2 x bfloat>, !dbg !61
  %763 = extractvalue { i32, i32, i32, i32 } %760, 1, !dbg !61
  %764 = bitcast i32 %763 to <2 x bfloat>, !dbg !61
  %765 = extractvalue { i32, i32, i32, i32 } %760, 2, !dbg !61
  %766 = bitcast i32 %765 to <2 x bfloat>, !dbg !61
  %767 = extractvalue { i32, i32, i32, i32 } %760, 3, !dbg !61
  %768 = bitcast i32 %767 to <2 x bfloat>, !dbg !61
  %769 = extractelement <2 x bfloat> %762, i64 0, !dbg !61
  %770 = extractelement <2 x bfloat> %762, i64 1, !dbg !61
  %771 = extractelement <2 x bfloat> %764, i64 0, !dbg !61
  %772 = extractelement <2 x bfloat> %764, i64 1, !dbg !61
  %773 = extractelement <2 x bfloat> %766, i64 0, !dbg !61
  %774 = extractelement <2 x bfloat> %766, i64 1, !dbg !61
  %775 = extractelement <2 x bfloat> %768, i64 0, !dbg !61
  %776 = extractelement <2 x bfloat> %768, i64 1, !dbg !61
  %777 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %759, i1 %29) #5, !dbg !61
  %778 = extractvalue { i32, i32, i32, i32 } %777, 0, !dbg !61
  %779 = bitcast i32 %778 to <2 x bfloat>, !dbg !61
  %780 = extractvalue { i32, i32, i32, i32 } %777, 1, !dbg !61
  %781 = bitcast i32 %780 to <2 x bfloat>, !dbg !61
  %782 = extractvalue { i32, i32, i32, i32 } %777, 2, !dbg !61
  %783 = bitcast i32 %782 to <2 x bfloat>, !dbg !61
  %784 = extractvalue { i32, i32, i32, i32 } %777, 3, !dbg !61
  %785 = bitcast i32 %784 to <2 x bfloat>, !dbg !61
  %786 = extractelement <2 x bfloat> %779, i64 0, !dbg !61
  %787 = extractelement <2 x bfloat> %779, i64 1, !dbg !61
  %788 = extractelement <2 x bfloat> %781, i64 0, !dbg !61
  %789 = extractelement <2 x bfloat> %781, i64 1, !dbg !61
  %790 = extractelement <2 x bfloat> %783, i64 0, !dbg !61
  %791 = extractelement <2 x bfloat> %783, i64 1, !dbg !61
  %792 = extractelement <2 x bfloat> %785, i64 0, !dbg !61
  %793 = extractelement <2 x bfloat> %785, i64 1, !dbg !61
  %794 = fpext bfloat %769 to float, !dbg !62
  %795 = fpext bfloat %770 to float, !dbg !62
  %796 = fpext bfloat %771 to float, !dbg !62
  %797 = fpext bfloat %772 to float, !dbg !62
  %798 = fpext bfloat %773 to float, !dbg !62
  %799 = fpext bfloat %774 to float, !dbg !62
  %800 = fpext bfloat %775 to float, !dbg !62
  %801 = fpext bfloat %776 to float, !dbg !62
  %802 = fpext bfloat %786 to float, !dbg !62
  %803 = fpext bfloat %787 to float, !dbg !62
  %804 = fpext bfloat %788 to float, !dbg !62
  %805 = fpext bfloat %789 to float, !dbg !62
  %806 = fpext bfloat %790 to float, !dbg !62
  %807 = fpext bfloat %791 to float, !dbg !62
  %808 = fpext bfloat %792 to float, !dbg !62
  %809 = fpext bfloat %793 to float, !dbg !62
  %810 = add nuw nsw i64 %748, 3072, !dbg !63
  %811 = getelementptr float, ptr addrspace(1) %1, i64 %810, !dbg !64
  %812 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %811, i1 true) #5, !dbg !65
  %813 = extractvalue { i32, i32, i32, i32 } %812, 0, !dbg !65
  %814 = extractvalue { i32, i32, i32, i32 } %812, 1, !dbg !65
  %815 = extractvalue { i32, i32, i32, i32 } %812, 2, !dbg !65
  %816 = extractvalue { i32, i32, i32, i32 } %812, 3, !dbg !65
  %817 = getelementptr bfloat, ptr addrspace(1) %2, i64 %810, !dbg !66
  %818 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %817, i1 true) #5, !dbg !67
  %819 = extractvalue { i32, i32 } %818, 0, !dbg !67
  %820 = bitcast i32 %819 to <2 x bfloat>, !dbg !67
  %821 = extractvalue { i32, i32 } %818, 1, !dbg !67
  %822 = bitcast i32 %821 to <2 x bfloat>, !dbg !67
  %823 = getelementptr float, ptr addrspace(1) %1, i64 %748, !dbg !68
  %824 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %823, i1 true) #5, !dbg !69
  %825 = extractvalue { i32, i32, i32, i32 } %824, 0, !dbg !69
  %826 = extractvalue { i32, i32, i32, i32 } %824, 1, !dbg !69
  %827 = extractvalue { i32, i32, i32, i32 } %824, 2, !dbg !69
  %828 = extractvalue { i32, i32, i32, i32 } %824, 3, !dbg !69
  %829 = getelementptr bfloat, ptr addrspace(1) %2, i64 %748, !dbg !70
  %830 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %829, i1 true) #5, !dbg !71
  %831 = extractvalue { i32, i32 } %830, 0, !dbg !71
  %832 = bitcast i32 %831 to <2 x bfloat>, !dbg !71
  %833 = extractvalue { i32, i32 } %830, 1, !dbg !71
  %834 = bitcast i32 %833 to <2 x bfloat>, !dbg !71
  %835 = fsub float %794, %678, !dbg !72
  %836 = fsub float %795, %678, !dbg !72
  %837 = fsub float %796, %678, !dbg !72
  %838 = fsub float %797, %678, !dbg !72
  %839 = fsub float %798, %678, !dbg !72
  %840 = fsub float %799, %678, !dbg !72
  %841 = fsub float %800, %678, !dbg !72
  %842 = fsub float %801, %678, !dbg !72
  %843 = fsub float %802, %678, !dbg !72
  %844 = fsub float %803, %678, !dbg !72
  %845 = fsub float %804, %678, !dbg !72
  %846 = fsub float %805, %678, !dbg !72
  %847 = fsub float %806, %678, !dbg !72
  %848 = fsub float %807, %678, !dbg !72
  %849 = fsub float %808, %678, !dbg !72
  %850 = fsub float %809, %678, !dbg !72
  %851 = fmul float %.0.i126, %835, !dbg !73
  %852 = fmul float %.0.i126, %836, !dbg !73
  %853 = fmul float %.0.i126, %837, !dbg !73
  %854 = fmul float %.0.i126, %838, !dbg !73
  %855 = fmul float %.0.i126, %839, !dbg !73
  %856 = fmul float %.0.i126, %840, !dbg !73
  %857 = fmul float %.0.i126, %841, !dbg !73
  %858 = fmul float %.0.i126, %842, !dbg !73
  %859 = fmul float %.0.i126, %843, !dbg !73
  %860 = fmul float %.0.i126, %844, !dbg !73
  %861 = fmul float %.0.i126, %845, !dbg !73
  %862 = fmul float %.0.i126, %846, !dbg !73
  %863 = fmul float %.0.i126, %847, !dbg !73
  %864 = fmul float %.0.i126, %848, !dbg !73
  %865 = fmul float %.0.i126, %849, !dbg !73
  %866 = fmul float %.0.i126, %850, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %867 = bitcast float %851 to i32, !dbg !73
  %868 = bitcast float %852 to i32, !dbg !73
  %869 = bitcast float %853 to i32, !dbg !73
  %870 = bitcast float %854 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %709, i32 %867, i32 %868, i32 %869, i32 %870, i1 true) #5, !dbg !73
  %871 = bitcast float %855 to i32, !dbg !73
  %872 = bitcast float %856 to i32, !dbg !73
  %873 = bitcast float %857 to i32, !dbg !73
  %874 = bitcast float %858 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %712, i32 %871, i32 %872, i32 %873, i32 %874, i1 true) #5, !dbg !73
  %875 = bitcast float %859 to i32, !dbg !73
  %876 = bitcast float %860 to i32, !dbg !73
  %877 = bitcast float %861 to i32, !dbg !73
  %878 = bitcast float %862 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %714, i32 %875, i32 %876, i32 %877, i32 %878, i1 true) #5, !dbg !73
  %879 = bitcast float %863 to i32, !dbg !73
  %880 = bitcast float %864 to i32, !dbg !73
  %881 = bitcast float %865 to i32, !dbg !73
  %882 = bitcast float %866 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %716, i32 %879, i32 %880, i32 %881, i32 %882, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %883 = load float, ptr addrspace(3) %720, align 16, !dbg !73
  %884 = load float, ptr addrspace(3) %732, align 4, !dbg !73
  %885 = fcmp uno <2 x float> %743, zeroinitializer, !dbg !74
  %886 = fcmp uno <16 x float> %746, zeroinitializer, !dbg !76
  %887 = fcmp uno <4 x float> %747, zeroinitializer, !dbg !74
  %888 = fcmp uno float %741, 0.000000e+00, !dbg !74
  %889 = fcmp uno float %742, 0.000000e+00, !dbg !74
  %890 = insertelement <2 x i32> poison, i32 %813, i64 0, !dbg !65
  %891 = insertelement <2 x i32> %890, i32 %814, i64 1, !dbg !65
  %892 = bitcast <2 x i32> %891 to <2 x float>, !dbg !65
  %893 = fpext <2 x bfloat> %820 to <2 x float>, !dbg !78
  %894 = insertelement <2 x i32> poison, i32 %825, i64 0, !dbg !69
  %895 = insertelement <2 x i32> %894, i32 %826, i64 1, !dbg !69
  %896 = bitcast <2 x i32> %895 to <2 x float>, !dbg !69
  %897 = fpext <2 x bfloat> %832 to <2 x float>, !dbg !79
  %898 = load <2 x float>, ptr addrspace(3) %717, align 16, !dbg !73
  %899 = fadd <2 x float> %892, %893, !dbg !80
  %900 = fadd <2 x float> %899, splat (float 1.000000e+00), !dbg !81
  %901 = fmul <2 x float> %900, %898, !dbg !82
  %902 = extractelement <2 x float> %900, i64 0, !dbg !82
  %903 = extractelement <2 x float> %900, i64 1, !dbg !82
  %904 = fmul float %902, %883, !dbg !82
  %905 = fmul float %903, %884, !dbg !82
  %906 = fadd <2 x float> %896, %897, !dbg !83
  %907 = fadd <2 x float> %906, %901, !dbg !84
  %908 = extractelement <2 x float> %906, i64 0, !dbg !84
  %909 = extractelement <2 x float> %906, i64 1, !dbg !84
  %910 = fadd float %908, %904, !dbg !84
  %911 = fadd float %909, %905, !dbg !84
  %912 = fcmp olt <2 x float> %743, %907, !dbg !85
  %913 = fcmp olt float %741, %910, !dbg !85
  %914 = fcmp olt float %742, %911, !dbg !85
  %915 = or <2 x i1> %885, %912, !dbg !86
  %916 = or i1 %888, %913, !dbg !86
  %917 = or i1 %889, %914, !dbg !86
  %918 = select <2 x i1> %915, <2 x float> %743, <2 x float> %907, !dbg !87
  %919 = select i1 %916, float %741, float %910, !dbg !87
  %920 = select i1 %917, float %742, float %911, !dbg !87
  %921 = select <2 x i1> %735, <2 x float> %918, <2 x float> %743, !dbg !56
  %922 = select i1 %30, float %919, float %741, !dbg !56
  %923 = select i1 %30, float %920, float %742, !dbg !56
  %924 = extractelement <2 x float> %907, i64 0, !dbg !88
  %925 = extractelement <2 x float> %907, i64 1, !dbg !88
  %926 = fcmp uno <4 x float> %744, zeroinitializer, !dbg !76
  %927 = fcmp uno <4 x float> %745, zeroinitializer, !dbg !76
  %928 = shufflevector <2 x float> %907, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !89
  %929 = insertelement <4 x float> %928, float %910, i64 0, !dbg !89
  %930 = shufflevector <2 x float> %907, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !89
  %931 = insertelement <4 x float> %930, float %911, i64 0, !dbg !89
  %932 = insertelement <2 x i32> poison, i32 %815, i64 0, !dbg !65
  %933 = insertelement <2 x i32> %932, i32 %816, i64 1, !dbg !65
  %934 = bitcast <2 x i32> %933 to <2 x float>, !dbg !65
  %935 = fpext <2 x bfloat> %822 to <2 x float>, !dbg !78
  %936 = insertelement <2 x i32> poison, i32 %827, i64 0, !dbg !69
  %937 = insertelement <2 x i32> %936, i32 %828, i64 1, !dbg !69
  %938 = bitcast <2 x i32> %937 to <2 x float>, !dbg !69
  %939 = fpext <2 x bfloat> %834 to <2 x float>, !dbg !79
  %940 = load <2 x float>, ptr addrspace(3) %729, align 8, !dbg !73
  %941 = load <2 x float>, ptr addrspace(3) %718, align 16, !dbg !73
  %942 = load <2 x float>, ptr addrspace(3) %730, align 8, !dbg !73
  %943 = load <2 x float>, ptr addrspace(3) %719, align 16, !dbg !73
  %944 = load <2 x float>, ptr addrspace(3) %731, align 8, !dbg !73
  %945 = load <2 x float>, ptr addrspace(3) %733, align 8, !dbg !73
  %946 = fadd <2 x float> %934, %935, !dbg !80
  %947 = fadd <2 x float> %946, splat (float 1.000000e+00), !dbg !81
  %948 = fadd <2 x float> %938, %939, !dbg !83
  %949 = shufflevector <2 x float> %900, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !82
  %950 = shufflevector <2 x float> %947, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %951 = shufflevector <4 x float> %950, <4 x float> %949, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !82
  %952 = shufflevector <4 x float> %951, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !82
  %953 = shufflevector <2 x float> %940, <2 x float> %942, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %954 = shufflevector <2 x float> %944, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %955 = shufflevector <16 x float> %953, <16 x float> %954, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %956 = shufflevector <2 x float> %945, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %957 = shufflevector <16 x float> %955, <16 x float> %956, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %958 = shufflevector <2 x float> %940, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %959 = shufflevector <16 x float> %957, <16 x float> %958, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %960 = shufflevector <2 x float> %941, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %961 = shufflevector <16 x float> %959, <16 x float> %960, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %962 = shufflevector <2 x float> %942, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %963 = shufflevector <16 x float> %961, <16 x float> %962, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !82
  %964 = shufflevector <2 x float> %943, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %965 = shufflevector <16 x float> %963, <16 x float> %964, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !82
  %966 = fmul <16 x float> %952, %965, !dbg !82
  %967 = shufflevector <2 x float> %906, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !84
  %968 = shufflevector <2 x float> %948, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !84
  %969 = shufflevector <4 x float> %968, <4 x float> %967, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !84
  %970 = shufflevector <4 x float> %969, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %971 = fadd <16 x float> %970, %966, !dbg !84
  %972 = extractelement <16 x float> %971, i64 4, !dbg !88
  %973 = extractelement <16 x float> %971, i64 5, !dbg !88
  %974 = extractelement <16 x float> %971, i64 6, !dbg !88
  %975 = extractelement <16 x float> %971, i64 7, !dbg !88
  %976 = shufflevector <16 x float> %971, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !85
  %977 = fcmp olt <4 x float> %747, %976, !dbg !85
  %978 = or <4 x i1> %887, %977, !dbg !86
  %979 = select <4 x i1> %978, <4 x float> %747, <4 x float> %976, !dbg !87
  %980 = fcmp ogt <16 x float> %746, %971, !dbg !89
  %981 = fcmp olt <16 x float> %746, %971, !dbg !89
  %982 = shufflevector <16 x i1> %980, <16 x i1> %981, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !89
  %983 = or <16 x i1> %886, %982, !dbg !90
  %984 = select <16 x i1> %983, <16 x float> %746, <16 x float> %971, !dbg !91
  %985 = select <4 x i1> %737, <4 x float> %979, <4 x float> %747, !dbg !56
  %986 = shufflevector <16 x float> %971, <16 x float> poison, <4 x i32> <i32 poison, i32 14, i32 10, i32 poison>, !dbg !89
  %987 = shufflevector <4 x float> %929, <4 x float> %986, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !89
  %988 = fcmp ogt <4 x float> %744, %987, !dbg !89
  %989 = shufflevector <16 x float> %971, <16 x float> poison, <4 x i32> <i32 poison, i32 15, i32 11, i32 poison>, !dbg !89
  %990 = shufflevector <4 x float> %931, <4 x float> %989, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !89
  %991 = fcmp ogt <4 x float> %745, %990, !dbg !89
  %992 = or <4 x i1> %926, %988, !dbg !90
  %993 = or <4 x i1> %927, %991, !dbg !90
  %994 = select <4 x i1> %992, <4 x float> %744, <4 x float> %987, !dbg !91
  %995 = select <4 x i1> %993, <4 x float> %745, <4 x float> %990, !dbg !91
  %996 = select <4 x i1> %737, <4 x float> %994, <4 x float> %744, !dbg !57
  %997 = select <4 x i1> %737, <4 x float> %995, <4 x float> %745, !dbg !57
  %998 = select <16 x i1> %739, <16 x float> %984, <16 x float> %746, !dbg !57
  %999 = sext i32 %754 to i64, !dbg !92
  %1000 = getelementptr bfloat, ptr addrspace(1) %3, i64 %999, !dbg !92
  %1001 = sext i32 %755 to i64, !dbg !92
  %1002 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1001, !dbg !92
  %1003 = fptrunc float %924 to bfloat, !dbg !88
  %1004 = fptrunc float %925 to bfloat, !dbg !88
  %1005 = extractelement <16 x float> %971, i64 0, !dbg !88
  %1006 = fptrunc float %1005 to bfloat, !dbg !88
  %1007 = extractelement <16 x float> %971, i64 1, !dbg !88
  %1008 = fptrunc float %1007 to bfloat, !dbg !88
  %1009 = extractelement <16 x float> %971, i64 10, !dbg !88
  %1010 = fptrunc float %1009 to bfloat, !dbg !88
  %1011 = extractelement <16 x float> %971, i64 11, !dbg !88
  %1012 = fptrunc float %1011 to bfloat, !dbg !88
  %1013 = extractelement <16 x float> %971, i64 2, !dbg !88
  %1014 = fptrunc float %1013 to bfloat, !dbg !88
  %1015 = extractelement <16 x float> %971, i64 3, !dbg !88
  %1016 = fptrunc float %1015 to bfloat, !dbg !88
  %1017 = extractelement <16 x float> %971, i64 14, !dbg !88
  %1018 = fptrunc float %1017 to bfloat, !dbg !88
  %1019 = extractelement <16 x float> %971, i64 15, !dbg !88
  %1020 = fptrunc float %1019 to bfloat, !dbg !88
  %1021 = fptrunc float %972 to bfloat, !dbg !88
  %1022 = fptrunc float %973 to bfloat, !dbg !88
  %1023 = fptrunc float %910 to bfloat, !dbg !88
  %1024 = fptrunc float %911 to bfloat, !dbg !88
  %1025 = fptrunc float %974 to bfloat, !dbg !88
  %1026 = fptrunc float %975 to bfloat, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1027 = bitcast bfloat %1003 to i16, !dbg !88
  %1028 = bitcast bfloat %1004 to i16, !dbg !88
  %1029 = bitcast bfloat %1006 to i16, !dbg !88
  %1030 = bitcast bfloat %1008 to i16, !dbg !88
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %722, i16 %1027, i16 %1028, i16 %1029, i16 %1030, i1 true) #5, !dbg !88
  %1031 = bitcast bfloat %1010 to i16, !dbg !88
  %1032 = bitcast bfloat %1012 to i16, !dbg !88
  %1033 = bitcast bfloat %1014 to i16, !dbg !88
  %1034 = bitcast bfloat %1016 to i16, !dbg !88
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %723, i16 %1031, i16 %1032, i16 %1033, i16 %1034, i1 true) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1035 = load <4 x i32>, ptr addrspace(3) %727, align 16, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1036 = bitcast bfloat %1018 to i16, !dbg !88
  %1037 = bitcast bfloat %1020 to i16, !dbg !88
  %1038 = bitcast bfloat %1021 to i16, !dbg !88
  %1039 = bitcast bfloat %1022 to i16, !dbg !88
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %722, i16 %1036, i16 %1037, i16 %1038, i16 %1039, i1 true) #5, !dbg !88
  %1040 = bitcast bfloat %1023 to i16, !dbg !88
  %1041 = bitcast bfloat %1024 to i16, !dbg !88
  %1042 = bitcast bfloat %1025 to i16, !dbg !88
  %1043 = bitcast bfloat %1026 to i16, !dbg !88
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %723, i16 %1040, i16 %1041, i16 %1042, i16 %1043, i1 true) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1044 = load <4 x i32>, ptr addrspace(3) %727, align 16, !dbg !88
  %.extract = extractelement <4 x i32> %1035, i64 0, !dbg !88
  %.extract129 = extractelement <4 x i32> %1035, i64 1, !dbg !88
  %.extract131 = extractelement <4 x i32> %1035, i64 2, !dbg !88
  %.extract133 = extractelement <4 x i32> %1035, i64 3, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %1000, i1 %344) #5, !dbg !88
  %.extract135 = extractelement <4 x i32> %1044, i64 0, !dbg !88
  %.extract137 = extractelement <4 x i32> %1044, i64 1, !dbg !88
  %.extract139 = extractelement <4 x i32> %1044, i64 2, !dbg !88
  %.extract141 = extractelement <4 x i32> %1044, i64 3, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %1002, i1 %31) #5, !dbg !88
  %indvars.iv.next226 = add nuw nsw i64 %indvars.iv225, 1024, !dbg !55
  %1045 = icmp samesign ult i64 %indvars.iv225, 2048, !dbg !55
  br i1 %1045, label %740, label %1046, !dbg !55

1046:                                             ; preds = %740
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1047 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %921, <2 x i32> <i32 0, i32 2>, !dbg !95
  %1048 = fcmp olt <2 x float> %1047, %921, !dbg !95
  %1049 = fcmp uno <2 x float> %1047, %921, !dbg !95
  %shift = shufflevector <2 x i1> %1048, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !96
  %1050 = or <2 x i1> %shift, %1049, !dbg !96
  %1051 = extractelement <2 x i1> %1050, i64 0, !dbg !96
  %1052 = extractelement <2 x float> %921, i64 0, !dbg !97
  %1053 = extractelement <2 x float> %921, i64 1, !dbg !97
  %1054 = select i1 %1051, float %1052, float %1053, !dbg !97
  %1055 = extractelement <16 x float> %998, i64 8, !dbg !95
  %1056 = fcmp olt float %1054, %1055, !dbg !95
  %1057 = fcmp uno float %1054, 0.000000e+00, !dbg !98
  %1058 = or i1 %1056, %1057, !dbg !96
  %1059 = select i1 %1058, float %1054, float %1055, !dbg !97
  %1060 = extractelement <16 x float> %998, i64 9, !dbg !95
  %1061 = fcmp olt float %1059, %1060, !dbg !95
  %1062 = fcmp uno float %1059, 0.000000e+00, !dbg !98
  %1063 = or i1 %1061, %1062, !dbg !96
  %1064 = select i1 %1063, float %1059, float %1060, !dbg !97
  %1065 = extractelement <16 x float> %998, i64 10, !dbg !95
  %1066 = extractelement <16 x float> %998, i64 11, !dbg !95
  %1067 = fcmp olt float %1065, %1066, !dbg !95
  %1068 = fcmp uno float %1065, 0.000000e+00, !dbg !98
  %1069 = or i1 %1067, %1068, !dbg !96
  %1070 = select i1 %1069, float %1065, float %1066, !dbg !97
  %1071 = extractelement <16 x float> %998, i64 12, !dbg !95
  %1072 = fcmp olt float %1070, %1071, !dbg !95
  %1073 = fcmp uno float %1070, 0.000000e+00, !dbg !98
  %1074 = or i1 %1072, %1073, !dbg !96
  %1075 = select i1 %1074, float %1070, float %1071, !dbg !97
  %1076 = extractelement <16 x float> %998, i64 13, !dbg !95
  %1077 = fcmp olt float %1075, %1076, !dbg !95
  %1078 = fcmp uno float %1075, 0.000000e+00, !dbg !98
  %1079 = or i1 %1077, %1078, !dbg !96
  %1080 = select i1 %1079, float %1075, float %1076, !dbg !97
  %1081 = extractelement <16 x float> %998, i64 14, !dbg !95
  %1082 = extractelement <16 x float> %998, i64 15, !dbg !95
  %1083 = fcmp olt float %1081, %1082, !dbg !95
  %1084 = fcmp uno float %1081, 0.000000e+00, !dbg !98
  %1085 = or i1 %1083, %1084, !dbg !96
  %1086 = select i1 %1085, float %1081, float %1082, !dbg !97
  %1087 = extractelement <4 x float> %985, i64 0, !dbg !95
  %1088 = fcmp olt float %1086, %1087, !dbg !95
  %1089 = fcmp uno float %1086, 0.000000e+00, !dbg !98
  %1090 = or i1 %1088, %1089, !dbg !96
  %1091 = select i1 %1090, float %1086, float %1087, !dbg !97
  %1092 = extractelement <4 x float> %985, i64 1, !dbg !95
  %1093 = fcmp olt float %1091, %1092, !dbg !95
  %1094 = fcmp uno float %1091, 0.000000e+00, !dbg !98
  %1095 = or i1 %1093, %1094, !dbg !96
  %1096 = select i1 %1095, float %1091, float %1092, !dbg !97
  %1097 = fcmp olt float %922, %923, !dbg !95
  %1098 = fcmp uno float %922, 0.000000e+00, !dbg !98
  %1099 = or i1 %1097, %1098, !dbg !96
  %1100 = select i1 %1099, float %922, float %923, !dbg !97
  %1101 = extractelement <4 x float> %985, i64 2, !dbg !95
  %1102 = fcmp olt float %1100, %1101, !dbg !95
  %1103 = fcmp uno float %1100, 0.000000e+00, !dbg !98
  %1104 = or i1 %1102, %1103, !dbg !96
  %1105 = select i1 %1104, float %1100, float %1101, !dbg !97
  %1106 = extractelement <4 x float> %985, i64 3, !dbg !95
  %1107 = fcmp olt float %1105, %1106, !dbg !95
  %1108 = fcmp uno float %1105, 0.000000e+00, !dbg !98
  %1109 = or i1 %1107, %1108, !dbg !96
  %1110 = select i1 %1109, float %1105, float %1106, !dbg !97
  %1111 = bitcast float %1064 to i32, !dbg !93
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 16, i32 31), !dbg !93
  %1113 = bitcast i32 %1112 to float, !dbg !93
  %1114 = fcmp olt float %1064, %1113, !dbg !95
  %1115 = fcmp uno float %1064, 0.000000e+00, !dbg !98
  %1116 = or i1 %1115, %1114, !dbg !96
  %1117 = select i1 %1116, float %1064, float %1113, !dbg !97
  %1118 = bitcast float %1117 to i32, !dbg !93
  %1119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1118, i32 8, i32 31), !dbg !93
  %1120 = bitcast i32 %1119 to float, !dbg !93
  %1121 = fcmp olt float %1117, %1120, !dbg !95
  %1122 = fcmp uno float %1117, 0.000000e+00, !dbg !98
  %1123 = or i1 %1121, %1122, !dbg !96
  %1124 = select i1 %1123, float %1117, float %1120, !dbg !97
  %1125 = bitcast float %1124 to i32, !dbg !93
  %1126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1125, i32 4, i32 31), !dbg !93
  %1127 = bitcast i32 %1126 to float, !dbg !93
  %1128 = fcmp olt float %1124, %1127, !dbg !95
  %1129 = fcmp uno float %1124, 0.000000e+00, !dbg !98
  %1130 = or i1 %1128, %1129, !dbg !96
  %1131 = select i1 %1130, float %1124, float %1127, !dbg !97
  %1132 = bitcast float %1131 to i32, !dbg !93
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 2, i32 31), !dbg !93
  %1134 = bitcast i32 %1133 to float, !dbg !93
  %1135 = fcmp olt float %1131, %1134, !dbg !95
  %1136 = fcmp uno float %1131, 0.000000e+00, !dbg !98
  %1137 = or i1 %1135, %1136, !dbg !96
  %1138 = select i1 %1137, float %1131, float %1134, !dbg !97
  %1139 = bitcast float %1138 to i32, !dbg !93
  %1140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1139, i32 1, i32 31), !dbg !93
  %1141 = bitcast i32 %1140 to float, !dbg !93
  %1142 = fcmp olt float %1138, %1141, !dbg !95
  %1143 = fcmp uno float %1138, 0.000000e+00, !dbg !98
  %1144 = or i1 %1142, %1143, !dbg !96
  %1145 = bitcast float %1080 to i32, !dbg !93
  %1146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1145, i32 16, i32 31), !dbg !93
  %1147 = bitcast i32 %1146 to float, !dbg !93
  %1148 = fcmp olt float %1080, %1147, !dbg !95
  %1149 = fcmp uno float %1080, 0.000000e+00, !dbg !98
  %1150 = or i1 %1149, %1148, !dbg !96
  %1151 = select i1 %1150, float %1080, float %1147, !dbg !97
  %1152 = bitcast float %1151 to i32, !dbg !93
  %1153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1152, i32 8, i32 31), !dbg !93
  %1154 = bitcast i32 %1153 to float, !dbg !93
  %1155 = fcmp olt float %1151, %1154, !dbg !95
  %1156 = fcmp uno float %1151, 0.000000e+00, !dbg !98
  %1157 = or i1 %1155, %1156, !dbg !96
  %1158 = select i1 %1157, float %1151, float %1154, !dbg !97
  %1159 = bitcast float %1158 to i32, !dbg !93
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 4, i32 31), !dbg !93
  %1161 = bitcast i32 %1160 to float, !dbg !93
  %1162 = fcmp olt float %1158, %1161, !dbg !95
  %1163 = fcmp uno float %1158, 0.000000e+00, !dbg !98
  %1164 = or i1 %1162, %1163, !dbg !96
  %1165 = select i1 %1164, float %1158, float %1161, !dbg !97
  %1166 = bitcast float %1165 to i32, !dbg !93
  %1167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1166, i32 2, i32 31), !dbg !93
  %1168 = bitcast i32 %1167 to float, !dbg !93
  %1169 = fcmp olt float %1165, %1168, !dbg !95
  %1170 = fcmp uno float %1165, 0.000000e+00, !dbg !98
  %1171 = or i1 %1169, %1170, !dbg !96
  %1172 = select i1 %1171, float %1165, float %1168, !dbg !97
  %1173 = bitcast float %1172 to i32, !dbg !93
  %1174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1173, i32 1, i32 31), !dbg !93
  %1175 = bitcast i32 %1174 to float, !dbg !93
  %1176 = fcmp olt float %1172, %1175, !dbg !95
  %1177 = fcmp uno float %1172, 0.000000e+00, !dbg !98
  %1178 = or i1 %1176, %1177, !dbg !96
  %1179 = bitcast float %1096 to i32, !dbg !93
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 16, i32 31), !dbg !93
  %1181 = bitcast i32 %1180 to float, !dbg !93
  %1182 = fcmp olt float %1096, %1181, !dbg !95
  %1183 = fcmp uno float %1096, 0.000000e+00, !dbg !98
  %1184 = or i1 %1183, %1182, !dbg !96
  %1185 = select i1 %1184, float %1096, float %1181, !dbg !97
  %1186 = bitcast float %1185 to i32, !dbg !93
  %1187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1186, i32 8, i32 31), !dbg !93
  %1188 = bitcast i32 %1187 to float, !dbg !93
  %1189 = fcmp olt float %1185, %1188, !dbg !95
  %1190 = fcmp uno float %1185, 0.000000e+00, !dbg !98
  %1191 = or i1 %1189, %1190, !dbg !96
  %1192 = select i1 %1191, float %1185, float %1188, !dbg !97
  %1193 = bitcast float %1192 to i32, !dbg !93
  %1194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1193, i32 4, i32 31), !dbg !93
  %1195 = bitcast i32 %1194 to float, !dbg !93
  %1196 = fcmp olt float %1192, %1195, !dbg !95
  %1197 = fcmp uno float %1192, 0.000000e+00, !dbg !98
  %1198 = or i1 %1196, %1197, !dbg !96
  %1199 = select i1 %1198, float %1192, float %1195, !dbg !97
  %1200 = bitcast float %1199 to i32, !dbg !93
  %1201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1200, i32 2, i32 31), !dbg !93
  %1202 = bitcast i32 %1201 to float, !dbg !93
  %1203 = fcmp olt float %1199, %1202, !dbg !95
  %1204 = fcmp uno float %1199, 0.000000e+00, !dbg !98
  %1205 = or i1 %1203, %1204, !dbg !96
  %1206 = select i1 %1205, float %1199, float %1202, !dbg !97
  %1207 = bitcast float %1206 to i32, !dbg !93
  %1208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1207, i32 1, i32 31), !dbg !93
  %1209 = bitcast i32 %1208 to float, !dbg !93
  %1210 = fcmp olt float %1206, %1209, !dbg !95
  %1211 = fcmp uno float %1206, 0.000000e+00, !dbg !98
  %1212 = or i1 %1210, %1211, !dbg !96
  %1213 = bitcast float %1110 to i32, !dbg !93
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 16, i32 31), !dbg !93
  %1215 = bitcast i32 %1214 to float, !dbg !93
  %1216 = fcmp olt float %1110, %1215, !dbg !95
  %1217 = fcmp uno float %1110, 0.000000e+00, !dbg !98
  %1218 = or i1 %1217, %1216, !dbg !96
  %1219 = select i1 %1218, float %1110, float %1215, !dbg !97
  %1220 = bitcast float %1219 to i32, !dbg !93
  %1221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1220, i32 8, i32 31), !dbg !93
  %1222 = bitcast i32 %1221 to float, !dbg !93
  %1223 = fcmp olt float %1219, %1222, !dbg !95
  %1224 = fcmp uno float %1219, 0.000000e+00, !dbg !98
  %1225 = or i1 %1223, %1224, !dbg !96
  %1226 = select i1 %1225, float %1219, float %1222, !dbg !97
  %1227 = bitcast float %1226 to i32, !dbg !93
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 4, i32 31), !dbg !93
  %1229 = bitcast i32 %1228 to float, !dbg !93
  %1230 = fcmp olt float %1226, %1229, !dbg !95
  %1231 = fcmp uno float %1226, 0.000000e+00, !dbg !98
  %1232 = or i1 %1230, %1231, !dbg !96
  %1233 = select i1 %1232, float %1226, float %1229, !dbg !97
  %1234 = bitcast float %1233 to i32, !dbg !93
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 2, i32 31), !dbg !93
  %1236 = bitcast i32 %1235 to float, !dbg !93
  %1237 = fcmp olt float %1233, %1236, !dbg !95
  %1238 = fcmp uno float %1233, 0.000000e+00, !dbg !98
  %1239 = or i1 %1237, %1238, !dbg !96
  %1240 = select i1 %1239, float %1233, float %1236, !dbg !97
  %1241 = bitcast float %1240 to i32, !dbg !93
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1241, i32 1, i32 31), !dbg !93
  %1243 = bitcast i32 %1242 to float, !dbg !93
  %1244 = fcmp olt float %1240, %1243, !dbg !95
  %1245 = fcmp uno float %1240, 0.000000e+00, !dbg !98
  %1246 = or i1 %1244, %1245, !dbg !96
  %1247 = and i32 %341, 7, !dbg !93
  %1248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1247, !dbg !93
  %1249 = select i1 %1144, i32 %1139, i32 %1140, !dbg !97
  %1250 = insertelement <1 x i32> poison, i32 %1249, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1250, i1 %634) #5, !dbg !93
  %1251 = or disjoint i32 %1247, 8, !dbg !93
  %1252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1251, !dbg !93
  %1253 = select i1 %1178, i32 %1173, i32 %1174, !dbg !97
  %1254 = insertelement <1 x i32> poison, i32 %1253, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1252, <1 x i32> %1254, i1 %634) #5, !dbg !93
  %1255 = or disjoint i32 %1247, 16, !dbg !93
  %1256 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1255, !dbg !93
  %1257 = select i1 %1212, i32 %1207, i32 %1208, !dbg !97
  %1258 = insertelement <1 x i32> poison, i32 %1257, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1256, <1 x i32> %1258, i1 %634) #5, !dbg !93
  %1259 = or disjoint i32 %1247, 24, !dbg !93
  %1260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1259, !dbg !93
  %1261 = select i1 %1246, i32 %1241, i32 %1242, !dbg !97
  %1262 = insertelement <1 x i32> poison, i32 %1261, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %1262, i1 %634) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1263 = icmp slt i32 %22, 32, !dbg !93
  %1264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %1263) #5, !dbg !93
  %1265 = bitcast i32 %1264 to float, !dbg !93
  %1266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 4, i32 31), !dbg !93
  %1267 = bitcast i32 %1266 to float, !dbg !93
  %1268 = fcmp olt float %1265, %1267, !dbg !95
  %1269 = fcmp uno float %1265, 0.000000e+00, !dbg !98
  %1270 = or i1 %1269, %1268, !dbg !96
  %1271 = select i1 %1270, float %1265, float %1267, !dbg !97
  %1272 = bitcast float %1271 to i32, !dbg !93
  %1273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 2, i32 31), !dbg !93
  %1274 = bitcast i32 %1273 to float, !dbg !93
  %1275 = fcmp olt float %1271, %1274, !dbg !95
  %1276 = fcmp uno float %1271, 0.000000e+00, !dbg !98
  %1277 = or i1 %1275, %1276, !dbg !96
  %1278 = select i1 %1277, float %1271, float %1274, !dbg !97
  %1279 = bitcast float %1278 to i32, !dbg !93
  %1280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1279, i32 1, i32 31), !dbg !93
  %1281 = bitcast i32 %1280 to float, !dbg !93
  %1282 = fcmp olt float %1278, %1281, !dbg !95
  %1283 = fcmp uno float %1278, 0.000000e+00, !dbg !98
  %1284 = or i1 %1282, %1283, !dbg !96
  %1285 = and i32 %22, 7, !dbg !93
  %1286 = icmp eq i32 %1285, 0, !dbg !93
  %1287 = and i1 %1263, %1286, !dbg !93
  %1288 = select i1 %1284, i32 %1279, i32 %1280, !dbg !97
  %1289 = insertelement <1 x i32> poison, i32 %1288, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %1289, i1 %1287) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1290 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  %1291 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !93
  %1292 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !93
  %1293 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1294 = bitcast float %1290 to i32, !dbg !99
  %1295 = bitcast float %1291 to i32, !dbg !99
  %1296 = bitcast float %1292 to i32, !dbg !99
  %1297 = bitcast float %1293 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1294, i32 %1295, i32 %1296, i32 %1297, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1298 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %342, !dbg !99
  %1299 = load float, ptr addrspace(3) %1298, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1300 = fcmp ogt <4 x float> %996, %997, !dbg !102
  %1301 = extractelement <4 x float> %996, i64 3, !dbg !103
  %1302 = fcmp uno float %1301, 0.000000e+00, !dbg !103
  %1303 = extractelement <4 x i1> %1300, i64 3, !dbg !104
  %1304 = or i1 %1303, %1302, !dbg !104
  %1305 = extractelement <4 x float> %997, i64 3, !dbg !105
  %1306 = select i1 %1304, float %1301, float %1305, !dbg !105
  %1307 = extractelement <16 x float> %998, i64 0, !dbg !102
  %1308 = fcmp ogt float %1306, %1307, !dbg !102
  %1309 = fcmp uno float %1306, 0.000000e+00, !dbg !103
  %1310 = or i1 %1308, %1309, !dbg !104
  %1311 = select i1 %1310, float %1306, float %1307, !dbg !105
  %1312 = extractelement <16 x float> %998, i64 1, !dbg !102
  %1313 = fcmp ogt float %1311, %1312, !dbg !102
  %1314 = fcmp uno float %1311, 0.000000e+00, !dbg !103
  %1315 = or i1 %1313, %1314, !dbg !104
  %1316 = select i1 %1315, float %1311, float %1312, !dbg !105
  %1317 = extractelement <4 x float> %996, i64 2, !dbg !103
  %1318 = fcmp uno float %1317, 0.000000e+00, !dbg !103
  %1319 = extractelement <4 x i1> %1300, i64 2, !dbg !104
  %1320 = or i1 %1319, %1318, !dbg !104
  %1321 = extractelement <4 x float> %997, i64 2, !dbg !105
  %1322 = select i1 %1320, float %1317, float %1321, !dbg !105
  %1323 = extractelement <16 x float> %998, i64 2, !dbg !102
  %1324 = fcmp ogt float %1322, %1323, !dbg !102
  %1325 = fcmp uno float %1322, 0.000000e+00, !dbg !103
  %1326 = or i1 %1324, %1325, !dbg !104
  %1327 = select i1 %1326, float %1322, float %1323, !dbg !105
  %1328 = extractelement <16 x float> %998, i64 3, !dbg !102
  %1329 = fcmp ogt float %1327, %1328, !dbg !102
  %1330 = fcmp uno float %1327, 0.000000e+00, !dbg !103
  %1331 = or i1 %1329, %1330, !dbg !104
  %1332 = select i1 %1331, float %1327, float %1328, !dbg !105
  %1333 = extractelement <4 x float> %996, i64 1, !dbg !103
  %1334 = fcmp uno float %1333, 0.000000e+00, !dbg !103
  %1335 = extractelement <4 x i1> %1300, i64 1, !dbg !104
  %1336 = or i1 %1335, %1334, !dbg !104
  %1337 = extractelement <4 x float> %997, i64 1, !dbg !105
  %1338 = select i1 %1336, float %1333, float %1337, !dbg !105
  %1339 = extractelement <16 x float> %998, i64 4, !dbg !102
  %1340 = fcmp ogt float %1338, %1339, !dbg !102
  %1341 = fcmp uno float %1338, 0.000000e+00, !dbg !103
  %1342 = or i1 %1340, %1341, !dbg !104
  %1343 = select i1 %1342, float %1338, float %1339, !dbg !105
  %1344 = extractelement <16 x float> %998, i64 5, !dbg !102
  %1345 = fcmp ogt float %1343, %1344, !dbg !102
  %1346 = fcmp uno float %1343, 0.000000e+00, !dbg !103
  %1347 = or i1 %1345, %1346, !dbg !104
  %1348 = select i1 %1347, float %1343, float %1344, !dbg !105
  %1349 = extractelement <4 x float> %996, i64 0, !dbg !103
  %1350 = fcmp uno float %1349, 0.000000e+00, !dbg !103
  %1351 = extractelement <4 x i1> %1300, i64 0, !dbg !104
  %1352 = or i1 %1351, %1350, !dbg !104
  %1353 = extractelement <4 x float> %997, i64 0, !dbg !105
  %1354 = select i1 %1352, float %1349, float %1353, !dbg !105
  %1355 = extractelement <16 x float> %998, i64 6, !dbg !102
  %1356 = fcmp ogt float %1354, %1355, !dbg !102
  %1357 = fcmp uno float %1354, 0.000000e+00, !dbg !103
  %1358 = or i1 %1356, %1357, !dbg !104
  %1359 = select i1 %1358, float %1354, float %1355, !dbg !105
  %1360 = extractelement <16 x float> %998, i64 7, !dbg !102
  %1361 = fcmp ogt float %1359, %1360, !dbg !102
  %1362 = fcmp uno float %1359, 0.000000e+00, !dbg !103
  %1363 = or i1 %1361, %1362, !dbg !104
  %1364 = select i1 %1363, float %1359, float %1360, !dbg !105
  %1365 = bitcast float %1316 to i32, !dbg !100
  %1366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1365, i32 16, i32 31), !dbg !100
  %1367 = bitcast i32 %1366 to float, !dbg !100
  %1368 = fcmp ogt float %1316, %1367, !dbg !102
  %1369 = fcmp uno float %1316, 0.000000e+00, !dbg !103
  %1370 = or i1 %1369, %1368, !dbg !104
  %1371 = select i1 %1370, float %1316, float %1367, !dbg !105
  %1372 = bitcast float %1371 to i32, !dbg !100
  %1373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1372, i32 8, i32 31), !dbg !100
  %1374 = bitcast i32 %1373 to float, !dbg !100
  %1375 = fcmp ogt float %1371, %1374, !dbg !102
  %1376 = fcmp uno float %1371, 0.000000e+00, !dbg !103
  %1377 = or i1 %1375, %1376, !dbg !104
  %1378 = select i1 %1377, float %1371, float %1374, !dbg !105
  %1379 = bitcast float %1378 to i32, !dbg !100
  %1380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1379, i32 4, i32 31), !dbg !100
  %1381 = bitcast i32 %1380 to float, !dbg !100
  %1382 = fcmp ogt float %1378, %1381, !dbg !102
  %1383 = fcmp uno float %1378, 0.000000e+00, !dbg !103
  %1384 = or i1 %1382, %1383, !dbg !104
  %1385 = select i1 %1384, float %1378, float %1381, !dbg !105
  %1386 = bitcast float %1385 to i32, !dbg !100
  %1387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1386, i32 2, i32 31), !dbg !100
  %1388 = bitcast i32 %1387 to float, !dbg !100
  %1389 = fcmp ogt float %1385, %1388, !dbg !102
  %1390 = fcmp uno float %1385, 0.000000e+00, !dbg !103
  %1391 = or i1 %1389, %1390, !dbg !104
  %1392 = select i1 %1391, float %1385, float %1388, !dbg !105
  %1393 = bitcast float %1392 to i32, !dbg !100
  %1394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1393, i32 1, i32 31), !dbg !100
  %1395 = bitcast i32 %1394 to float, !dbg !100
  %1396 = fcmp ogt float %1392, %1395, !dbg !102
  %1397 = fcmp uno float %1392, 0.000000e+00, !dbg !103
  %1398 = or i1 %1396, %1397, !dbg !104
  %1399 = bitcast float %1332 to i32, !dbg !100
  %1400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1399, i32 16, i32 31), !dbg !100
  %1401 = bitcast i32 %1400 to float, !dbg !100
  %1402 = fcmp ogt float %1332, %1401, !dbg !102
  %1403 = fcmp uno float %1332, 0.000000e+00, !dbg !103
  %1404 = or i1 %1403, %1402, !dbg !104
  %1405 = select i1 %1404, float %1332, float %1401, !dbg !105
  %1406 = bitcast float %1405 to i32, !dbg !100
  %1407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1406, i32 8, i32 31), !dbg !100
  %1408 = bitcast i32 %1407 to float, !dbg !100
  %1409 = fcmp ogt float %1405, %1408, !dbg !102
  %1410 = fcmp uno float %1405, 0.000000e+00, !dbg !103
  %1411 = or i1 %1409, %1410, !dbg !104
  %1412 = select i1 %1411, float %1405, float %1408, !dbg !105
  %1413 = bitcast float %1412 to i32, !dbg !100
  %1414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1413, i32 4, i32 31), !dbg !100
  %1415 = bitcast i32 %1414 to float, !dbg !100
  %1416 = fcmp ogt float %1412, %1415, !dbg !102
  %1417 = fcmp uno float %1412, 0.000000e+00, !dbg !103
  %1418 = or i1 %1416, %1417, !dbg !104
  %1419 = select i1 %1418, float %1412, float %1415, !dbg !105
  %1420 = bitcast float %1419 to i32, !dbg !100
  %1421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1420, i32 2, i32 31), !dbg !100
  %1422 = bitcast i32 %1421 to float, !dbg !100
  %1423 = fcmp ogt float %1419, %1422, !dbg !102
  %1424 = fcmp uno float %1419, 0.000000e+00, !dbg !103
  %1425 = or i1 %1423, %1424, !dbg !104
  %1426 = select i1 %1425, float %1419, float %1422, !dbg !105
  %1427 = bitcast float %1426 to i32, !dbg !100
  %1428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1427, i32 1, i32 31), !dbg !100
  %1429 = bitcast i32 %1428 to float, !dbg !100
  %1430 = fcmp ogt float %1426, %1429, !dbg !102
  %1431 = fcmp uno float %1426, 0.000000e+00, !dbg !103
  %1432 = or i1 %1430, %1431, !dbg !104
  %1433 = bitcast float %1348 to i32, !dbg !100
  %1434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1433, i32 16, i32 31), !dbg !100
  %1435 = bitcast i32 %1434 to float, !dbg !100
  %1436 = fcmp ogt float %1348, %1435, !dbg !102
  %1437 = fcmp uno float %1348, 0.000000e+00, !dbg !103
  %1438 = or i1 %1437, %1436, !dbg !104
  %1439 = select i1 %1438, float %1348, float %1435, !dbg !105
  %1440 = bitcast float %1439 to i32, !dbg !100
  %1441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1440, i32 8, i32 31), !dbg !100
  %1442 = bitcast i32 %1441 to float, !dbg !100
  %1443 = fcmp ogt float %1439, %1442, !dbg !102
  %1444 = fcmp uno float %1439, 0.000000e+00, !dbg !103
  %1445 = or i1 %1443, %1444, !dbg !104
  %1446 = select i1 %1445, float %1439, float %1442, !dbg !105
  %1447 = bitcast float %1446 to i32, !dbg !100
  %1448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1447, i32 4, i32 31), !dbg !100
  %1449 = bitcast i32 %1448 to float, !dbg !100
  %1450 = fcmp ogt float %1446, %1449, !dbg !102
  %1451 = fcmp uno float %1446, 0.000000e+00, !dbg !103
  %1452 = or i1 %1450, %1451, !dbg !104
  %1453 = select i1 %1452, float %1446, float %1449, !dbg !105
  %1454 = bitcast float %1453 to i32, !dbg !100
  %1455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1454, i32 2, i32 31), !dbg !100
  %1456 = bitcast i32 %1455 to float, !dbg !100
  %1457 = fcmp ogt float %1453, %1456, !dbg !102
  %1458 = fcmp uno float %1453, 0.000000e+00, !dbg !103
  %1459 = or i1 %1457, %1458, !dbg !104
  %1460 = select i1 %1459, float %1453, float %1456, !dbg !105
  %1461 = bitcast float %1460 to i32, !dbg !100
  %1462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1461, i32 1, i32 31), !dbg !100
  %1463 = bitcast i32 %1462 to float, !dbg !100
  %1464 = fcmp ogt float %1460, %1463, !dbg !102
  %1465 = fcmp uno float %1460, 0.000000e+00, !dbg !103
  %1466 = or i1 %1464, %1465, !dbg !104
  %1467 = bitcast float %1364 to i32, !dbg !100
  %1468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1467, i32 16, i32 31), !dbg !100
  %1469 = bitcast i32 %1468 to float, !dbg !100
  %1470 = fcmp ogt float %1364, %1469, !dbg !102
  %1471 = fcmp uno float %1364, 0.000000e+00, !dbg !103
  %1472 = or i1 %1471, %1470, !dbg !104
  %1473 = select i1 %1472, float %1364, float %1469, !dbg !105
  %1474 = bitcast float %1473 to i32, !dbg !100
  %1475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1474, i32 8, i32 31), !dbg !100
  %1476 = bitcast i32 %1475 to float, !dbg !100
  %1477 = fcmp ogt float %1473, %1476, !dbg !102
  %1478 = fcmp uno float %1473, 0.000000e+00, !dbg !103
  %1479 = or i1 %1477, %1478, !dbg !104
  %1480 = select i1 %1479, float %1473, float %1476, !dbg !105
  %1481 = bitcast float %1480 to i32, !dbg !100
  %1482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1481, i32 4, i32 31), !dbg !100
  %1483 = bitcast i32 %1482 to float, !dbg !100
  %1484 = fcmp ogt float %1480, %1483, !dbg !102
  %1485 = fcmp uno float %1480, 0.000000e+00, !dbg !103
  %1486 = or i1 %1484, %1485, !dbg !104
  %1487 = select i1 %1486, float %1480, float %1483, !dbg !105
  %1488 = bitcast float %1487 to i32, !dbg !100
  %1489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1488, i32 2, i32 31), !dbg !100
  %1490 = bitcast i32 %1489 to float, !dbg !100
  %1491 = fcmp ogt float %1487, %1490, !dbg !102
  %1492 = fcmp uno float %1487, 0.000000e+00, !dbg !103
  %1493 = or i1 %1491, %1492, !dbg !104
  %1494 = select i1 %1493, float %1487, float %1490, !dbg !105
  %1495 = bitcast float %1494 to i32, !dbg !100
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1495, i32 1, i32 31), !dbg !100
  %1497 = bitcast i32 %1496 to float, !dbg !100
  %1498 = fcmp ogt float %1494, %1497, !dbg !102
  %1499 = fcmp uno float %1494, 0.000000e+00, !dbg !103
  %1500 = or i1 %1498, %1499, !dbg !104
  %1501 = select i1 %1398, i32 %1393, i32 %1394, !dbg !105
  %1502 = insertelement <1 x i32> poison, i32 %1501, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1502, i1 %634) #5, !dbg !100
  %1503 = select i1 %1432, i32 %1427, i32 %1428, !dbg !105
  %1504 = insertelement <1 x i32> poison, i32 %1503, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1252, <1 x i32> %1504, i1 %634) #5, !dbg !100
  %1505 = select i1 %1466, i32 %1461, i32 %1462, !dbg !105
  %1506 = insertelement <1 x i32> poison, i32 %1505, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1256, <1 x i32> %1506, i1 %634) #5, !dbg !100
  %1507 = select i1 %1500, i32 %1495, i32 %1496, !dbg !105
  %1508 = insertelement <1 x i32> poison, i32 %1507, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %1508, i1 %634) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1509 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %1263) #5, !dbg !100
  %1510 = bitcast i32 %1509 to float, !dbg !100
  %1511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 4, i32 31), !dbg !100
  %1512 = bitcast i32 %1511 to float, !dbg !100
  %1513 = fcmp ogt float %1510, %1512, !dbg !102
  %1514 = fcmp uno float %1510, 0.000000e+00, !dbg !103
  %1515 = or i1 %1514, %1513, !dbg !104
  %1516 = select i1 %1515, float %1510, float %1512, !dbg !105
  %1517 = bitcast float %1516 to i32, !dbg !100
  %1518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1517, i32 2, i32 31), !dbg !100
  %1519 = bitcast i32 %1518 to float, !dbg !100
  %1520 = fcmp ogt float %1516, %1519, !dbg !102
  %1521 = fcmp uno float %1516, 0.000000e+00, !dbg !103
  %1522 = or i1 %1520, %1521, !dbg !104
  %1523 = select i1 %1522, float %1516, float %1519, !dbg !105
  %1524 = bitcast float %1523 to i32, !dbg !100
  %1525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1524, i32 1, i32 31), !dbg !100
  %1526 = bitcast i32 %1525 to float, !dbg !100
  %1527 = fcmp ogt float %1523, %1526, !dbg !102
  %1528 = fcmp uno float %1523, 0.000000e+00, !dbg !103
  %1529 = or i1 %1527, %1528, !dbg !104
  %1530 = select i1 %1529, i32 %1524, i32 %1525, !dbg !105
  %1531 = insertelement <1 x i32> poison, i32 %1530, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %1531, i1 %1287) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1532 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !100
  %1533 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !100
  %1534 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !100
  %1535 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1536 = bitcast float %1532 to i32, !dbg !106
  %1537 = bitcast float %1533 to i32, !dbg !106
  %1538 = bitcast float %1534 to i32, !dbg !106
  %1539 = bitcast float %1535 to i32, !dbg !106
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1536, i32 %1537, i32 %1538, i32 %1539, i1 true) #5, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1540 = load float, ptr addrspace(3) %1298, align 4, !dbg !106
  %1541 = sext i32 %343 to i64, !dbg !107
  %1542 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1541, !dbg !107
  %1543 = fptrunc float %1299 to bfloat, !dbg !99
  %1544 = and i32 %22, 252, !dbg !99
  %1545 = icmp eq i32 %1544, 0, !dbg !99
  %1546 = bitcast bfloat %1543 to i16, !dbg !99
  %1547 = and i1 %1545, %345, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1546, ptr addrspace(1) %1542, i1 %1547) #5, !dbg !99
  %1548 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1541, !dbg !108
  %1549 = fptrunc float %1540 to bfloat, !dbg !106
  %1550 = bitcast bfloat %1549 to i16, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1550, ptr addrspace(1) %1548, i1 %1547) #5, !dbg !106
  %1551 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1541, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1546, ptr addrspace(1) %1551, i1 %1547) #5, !dbg !110
  %1552 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1541, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1550, ptr addrspace(1) %1552, i1 %1547) #5, !dbg !112
  %1553 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1541, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1546, ptr addrspace(1) %1553, i1 %1547) #5, !dbg !114
  %1554 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1541, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1550, ptr addrspace(1) %1554, i1 %1547) #5, !dbg !116
  %1555 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1541, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1546, ptr addrspace(1) %1555, i1 %1547) #5, !dbg !118
  %1556 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1541, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1550, ptr addrspace(1) %1556, i1 %1547) #5, !dbg !120
  %1557 = insertelement <4 x float> poison, float %1293, i64 0, !dbg !121
  %1558 = insertelement <4 x float> %1557, float %1292, i64 1, !dbg !121
  %1559 = insertelement <4 x float> %1558, float %1291, i64 2, !dbg !121
  %1560 = insertelement <4 x float> %1559, float %1290, i64 3, !dbg !121
  %1561 = fcmp oge <4 x float> %1560, zeroinitializer, !dbg !121
  %1562 = select <4 x i1> %1561, <4 x float> zeroinitializer, <4 x float> %1560, !dbg !121
  %1563 = fsub <4 x float> zeroinitializer, %1562, !dbg !123
  %1564 = insertelement <4 x float> poison, float %1535, i64 0, !dbg !124
  %1565 = insertelement <4 x float> %1564, float %1534, i64 1, !dbg !124
  %1566 = insertelement <4 x float> %1565, float %1533, i64 2, !dbg !124
  %1567 = insertelement <4 x float> %1566, float %1532, i64 3, !dbg !124
  %1568 = fcmp ole <4 x float> %1567, zeroinitializer, !dbg !124
  %1569 = select <4 x i1> %1568, <4 x float> zeroinitializer, <4 x float> %1567, !dbg !124
  %1570 = fcmp ogt <4 x float> %1563, %1569, !dbg !126
  %1571 = fcmp uno <4 x float> %1563, zeroinitializer, !dbg !128
  %1572 = or <4 x i1> %1571, %1570, !dbg !129
  %1573 = select <4 x i1> %1572, <4 x float> %1563, <4 x float> %1569, !dbg !130
  %1574 = fmul <4 x float> %1573, splat (float 0x3F80204080000000), !dbg !131
  %1575 = fcmp ogt <4 x float> %1574, splat (float 0x3EE4F8B580000000), !dbg !132
  %1576 = extractelement <4 x float> %1574, i64 3, !dbg !134
  %1577 = fcmp uno float %1576, 0.000000e+00, !dbg !135
  %1578 = extractelement <4 x float> %1574, i64 2, !dbg !134
  %1579 = fcmp uno float %1578, 0.000000e+00, !dbg !135
  %1580 = extractelement <4 x float> %1574, i64 1, !dbg !134
  %1581 = fcmp uno float %1580, 0.000000e+00, !dbg !135
  %1582 = extractelement <4 x float> %1574, i64 0, !dbg !134
  %1583 = fcmp uno float %1582, 0.000000e+00, !dbg !135
  %1584 = extractelement <4 x i1> %1575, i64 3, !dbg !136
  %1585 = or i1 %1584, %1577, !dbg !136
  %1586 = extractelement <4 x i1> %1575, i64 2, !dbg !136
  %1587 = or i1 %1586, %1579, !dbg !136
  %1588 = extractelement <4 x i1> %1575, i64 1, !dbg !136
  %1589 = or i1 %1588, %1581, !dbg !136
  %1590 = extractelement <4 x i1> %1575, i64 0, !dbg !136
  %1591 = or i1 %1590, %1583, !dbg !136
  %1592 = select i1 %1585, float %1576, float 0x3EE4F8B580000000, !dbg !134
  %1593 = select i1 %1587, float %1578, float 0x3EE4F8B580000000, !dbg !134
  %1594 = select i1 %1589, float %1580, float 0x3EE4F8B580000000, !dbg !134
  %1595 = select i1 %1591, float %1582, float 0x3EE4F8B580000000, !dbg !134
  %1596 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1592), !dbg !137
  %1597 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1593), !dbg !137
  %1598 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1594), !dbg !137
  %1599 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1595), !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1600 = bitcast float %1596 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1600, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1600, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1600, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1600, i1 true) #5, !dbg !138
  %1601 = bitcast float %1597 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1601, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1601, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1601, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1601, i1 true) #5, !dbg !138
  %1602 = bitcast float %1598 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1602, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1602, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1602, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1602, i1 true) #5, !dbg !138
  %1603 = bitcast float %1599 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1603, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1603, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1603, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1603, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %.idx = shl nuw nsw i32 %23, 3, !dbg !138
  %1604 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !138
  %1605 = load float, ptr addrspace(3) %1604, align 8, !dbg !138
  br label %1606, !dbg !139

1606:                                             ; preds = %1046, %1606
  %indvars.iv227 = phi i64 [ 0, %1046 ], [ %indvars.iv.next228, %1606 ]
  %1607 = trunc nuw nsw i64 %indvars.iv227 to i32, !dbg !140
  %1608 = add i32 %38, %1607, !dbg !140
  %1609 = add i32 %39, %1607, !dbg !140
  %1610 = sext i32 %1608 to i64, !dbg !141
  %1611 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1610, !dbg !141
  %1612 = sext i32 %1609 to i64, !dbg !141
  %1613 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1612, !dbg !141
  %1614 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1611, i1 %29) #5, !dbg !142
  %1615 = extractvalue { i32, i32, i32, i32 } %1614, 0, !dbg !142
  %1616 = bitcast i32 %1615 to <2 x bfloat>, !dbg !142
  %1617 = extractvalue { i32, i32, i32, i32 } %1614, 1, !dbg !142
  %1618 = bitcast i32 %1617 to <2 x bfloat>, !dbg !142
  %1619 = extractvalue { i32, i32, i32, i32 } %1614, 2, !dbg !142
  %1620 = bitcast i32 %1619 to <2 x bfloat>, !dbg !142
  %1621 = extractvalue { i32, i32, i32, i32 } %1614, 3, !dbg !142
  %1622 = bitcast i32 %1621 to <2 x bfloat>, !dbg !142
  %1623 = extractelement <2 x bfloat> %1616, i64 0, !dbg !142
  %1624 = extractelement <2 x bfloat> %1616, i64 1, !dbg !142
  %1625 = extractelement <2 x bfloat> %1618, i64 0, !dbg !142
  %1626 = extractelement <2 x bfloat> %1618, i64 1, !dbg !142
  %1627 = extractelement <2 x bfloat> %1620, i64 0, !dbg !142
  %1628 = extractelement <2 x bfloat> %1620, i64 1, !dbg !142
  %1629 = extractelement <2 x bfloat> %1622, i64 0, !dbg !142
  %1630 = extractelement <2 x bfloat> %1622, i64 1, !dbg !142
  %1631 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1613, i1 %29) #5, !dbg !142
  %1632 = extractvalue { i32, i32, i32, i32 } %1631, 0, !dbg !142
  %1633 = bitcast i32 %1632 to <2 x bfloat>, !dbg !142
  %1634 = extractvalue { i32, i32, i32, i32 } %1631, 1, !dbg !142
  %1635 = bitcast i32 %1634 to <2 x bfloat>, !dbg !142
  %1636 = extractvalue { i32, i32, i32, i32 } %1631, 2, !dbg !142
  %1637 = bitcast i32 %1636 to <2 x bfloat>, !dbg !142
  %1638 = extractvalue { i32, i32, i32, i32 } %1631, 3, !dbg !142
  %1639 = bitcast i32 %1638 to <2 x bfloat>, !dbg !142
  %1640 = extractelement <2 x bfloat> %1633, i64 0, !dbg !142
  %1641 = extractelement <2 x bfloat> %1633, i64 1, !dbg !142
  %1642 = extractelement <2 x bfloat> %1635, i64 0, !dbg !142
  %1643 = extractelement <2 x bfloat> %1635, i64 1, !dbg !142
  %1644 = extractelement <2 x bfloat> %1637, i64 0, !dbg !142
  %1645 = extractelement <2 x bfloat> %1637, i64 1, !dbg !142
  %1646 = extractelement <2 x bfloat> %1639, i64 0, !dbg !142
  %1647 = extractelement <2 x bfloat> %1639, i64 1, !dbg !142
  %1648 = fpext bfloat %1623 to float, !dbg !143
  %1649 = fpext bfloat %1624 to float, !dbg !143
  %1650 = fpext bfloat %1625 to float, !dbg !143
  %1651 = fpext bfloat %1626 to float, !dbg !143
  %1652 = fpext bfloat %1627 to float, !dbg !143
  %1653 = fpext bfloat %1628 to float, !dbg !143
  %1654 = fpext bfloat %1629 to float, !dbg !143
  %1655 = fpext bfloat %1630 to float, !dbg !143
  %1656 = fpext bfloat %1640 to float, !dbg !143
  %1657 = fpext bfloat %1641 to float, !dbg !143
  %1658 = fpext bfloat %1642 to float, !dbg !143
  %1659 = fpext bfloat %1643 to float, !dbg !143
  %1660 = fpext bfloat %1644 to float, !dbg !143
  %1661 = fpext bfloat %1645 to float, !dbg !143
  %1662 = fpext bfloat %1646 to float, !dbg !143
  %1663 = fpext bfloat %1647 to float, !dbg !143
  %1664 = fmul float %1605, %1648, !dbg !138
  %1665 = fmul float %1605, %1649, !dbg !138
  %1666 = fmul float %1605, %1650, !dbg !138
  %1667 = fmul float %1605, %1651, !dbg !138
  %1668 = fmul float %1605, %1652, !dbg !138
  %1669 = fmul float %1605, %1653, !dbg !138
  %1670 = fmul float %1605, %1654, !dbg !138
  %1671 = fmul float %1605, %1655, !dbg !138
  %1672 = fmul float %1605, %1656, !dbg !138
  %1673 = fmul float %1605, %1657, !dbg !138
  %1674 = fmul float %1605, %1658, !dbg !138
  %1675 = fmul float %1605, %1659, !dbg !138
  %1676 = fmul float %1605, %1660, !dbg !138
  %1677 = fmul float %1605, %1661, !dbg !138
  %1678 = fmul float %1605, %1662, !dbg !138
  %1679 = fmul float %1605, %1663, !dbg !138
  %1680 = tail call float @llvm.nvvm.round.f(float %1664) #5, !dbg !144
  %1681 = tail call float @llvm.nvvm.round.f(float %1665) #5, !dbg !144
  %1682 = tail call float @llvm.nvvm.round.f(float %1666) #5, !dbg !144
  %1683 = tail call float @llvm.nvvm.round.f(float %1667) #5, !dbg !144
  %1684 = tail call float @llvm.nvvm.round.f(float %1668) #5, !dbg !144
  %1685 = tail call float @llvm.nvvm.round.f(float %1669) #5, !dbg !144
  %1686 = tail call float @llvm.nvvm.round.f(float %1670) #5, !dbg !144
  %1687 = tail call float @llvm.nvvm.round.f(float %1671) #5, !dbg !144
  %1688 = tail call float @llvm.nvvm.round.f(float %1672) #5, !dbg !144
  %1689 = tail call float @llvm.nvvm.round.f(float %1673) #5, !dbg !144
  %1690 = tail call float @llvm.nvvm.round.f(float %1674) #5, !dbg !144
  %1691 = tail call float @llvm.nvvm.round.f(float %1675) #5, !dbg !144
  %1692 = tail call float @llvm.nvvm.round.f(float %1676) #5, !dbg !144
  %1693 = tail call float @llvm.nvvm.round.f(float %1677) #5, !dbg !144
  %1694 = tail call float @llvm.nvvm.round.f(float %1678) #5, !dbg !144
  %1695 = tail call float @llvm.nvvm.round.f(float %1679) #5, !dbg !144
  %1696 = insertelement <4 x float> poison, float %1680, i64 0, !dbg !145
  %1697 = insertelement <4 x float> %1696, float %1681, i64 1, !dbg !145
  %1698 = insertelement <4 x float> %1697, float %1682, i64 2, !dbg !145
  %1699 = insertelement <4 x float> %1698, float %1683, i64 3, !dbg !145
  %1700 = fcmp ogt <4 x float> %1699, splat (float -1.270000e+02), !dbg !145
  %1701 = fcmp uno <4 x float> %1699, zeroinitializer, !dbg !147
  %1702 = or <4 x i1> %1700, %1701, !dbg !148
  %1703 = select <4 x i1> %1702, <4 x float> %1699, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1704 = fcmp olt <4 x float> %1703, splat (float 1.270000e+02), !dbg !150
  %1705 = fcmp uno <4 x float> %1703, zeroinitializer, !dbg !152
  %1706 = or <4 x i1> %1704, %1705, !dbg !153
  %1707 = fptosi <4 x float> %1703 to <4 x i8>, !dbg !154
  %1708 = select <4 x i1> %1706, <4 x i8> %1707, <4 x i8> splat (i8 127), !dbg !155
  %1709 = insertelement <4 x float> poison, float %1684, i64 0, !dbg !145
  %1710 = insertelement <4 x float> %1709, float %1685, i64 1, !dbg !145
  %1711 = insertelement <4 x float> %1710, float %1686, i64 2, !dbg !145
  %1712 = insertelement <4 x float> %1711, float %1687, i64 3, !dbg !145
  %1713 = fcmp ogt <4 x float> %1712, splat (float -1.270000e+02), !dbg !145
  %1714 = fcmp uno <4 x float> %1712, zeroinitializer, !dbg !147
  %1715 = or <4 x i1> %1713, %1714, !dbg !148
  %1716 = select <4 x i1> %1715, <4 x float> %1712, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1717 = fcmp olt <4 x float> %1716, splat (float 1.270000e+02), !dbg !150
  %1718 = fcmp uno <4 x float> %1716, zeroinitializer, !dbg !152
  %1719 = or <4 x i1> %1717, %1718, !dbg !153
  %1720 = fptosi <4 x float> %1716 to <4 x i8>, !dbg !154
  %1721 = select <4 x i1> %1719, <4 x i8> %1720, <4 x i8> splat (i8 127), !dbg !155
  %1722 = insertelement <4 x float> poison, float %1688, i64 0, !dbg !145
  %1723 = insertelement <4 x float> %1722, float %1689, i64 1, !dbg !145
  %1724 = insertelement <4 x float> %1723, float %1690, i64 2, !dbg !145
  %1725 = insertelement <4 x float> %1724, float %1691, i64 3, !dbg !145
  %1726 = fcmp ogt <4 x float> %1725, splat (float -1.270000e+02), !dbg !145
  %1727 = fcmp uno <4 x float> %1725, zeroinitializer, !dbg !147
  %1728 = or <4 x i1> %1726, %1727, !dbg !148
  %1729 = select <4 x i1> %1728, <4 x float> %1725, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1730 = fcmp olt <4 x float> %1729, splat (float 1.270000e+02), !dbg !150
  %1731 = fcmp uno <4 x float> %1729, zeroinitializer, !dbg !152
  %1732 = or <4 x i1> %1730, %1731, !dbg !153
  %1733 = fptosi <4 x float> %1729 to <4 x i8>, !dbg !154
  %1734 = select <4 x i1> %1732, <4 x i8> %1733, <4 x i8> splat (i8 127), !dbg !155
  %1735 = insertelement <4 x float> poison, float %1692, i64 0, !dbg !145
  %1736 = insertelement <4 x float> %1735, float %1693, i64 1, !dbg !145
  %1737 = insertelement <4 x float> %1736, float %1694, i64 2, !dbg !145
  %1738 = insertelement <4 x float> %1737, float %1695, i64 3, !dbg !145
  %1739 = fcmp ogt <4 x float> %1738, splat (float -1.270000e+02), !dbg !145
  %1740 = fcmp uno <4 x float> %1738, zeroinitializer, !dbg !147
  %1741 = or <4 x i1> %1739, %1740, !dbg !148
  %1742 = select <4 x i1> %1741, <4 x float> %1738, <4 x float> splat (float -1.270000e+02), !dbg !149
  %1743 = fcmp olt <4 x float> %1742, splat (float 1.270000e+02), !dbg !150
  %1744 = fcmp uno <4 x float> %1742, zeroinitializer, !dbg !152
  %1745 = or <4 x i1> %1743, %1744, !dbg !153
  %1746 = fptosi <4 x float> %1742 to <4 x i8>, !dbg !154
  %1747 = select <4 x i1> %1745, <4 x i8> %1746, <4 x i8> splat (i8 127), !dbg !155
  %1748 = getelementptr i8, ptr addrspace(1) %12, i64 %1610, !dbg !156
  %1749 = bitcast <4 x i8> %1708 to i32, !dbg !157
  %1750 = bitcast <4 x i8> %1721 to i32, !dbg !157
  %1751 = bitcast <4 x i8> %1734 to i32, !dbg !157
  %1752 = bitcast <4 x i8> %1747 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1749, i32 %1750, i32 %1751, i32 %1752, ptr addrspace(1) %1748, i1 %29) #5, !dbg !157
  %1753 = getelementptr i8, ptr addrspace(1) %13, i64 %1610, !dbg !158
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1749, i32 %1750, i32 %1751, i32 %1752, ptr addrspace(1) %1753, i1 %29) #5, !dbg !159
  %1754 = getelementptr i8, ptr addrspace(1) %14, i64 %1610, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1749, i32 %1750, i32 %1751, i32 %1752, ptr addrspace(1) %1754, i1 %29) #5, !dbg !161
  %1755 = getelementptr i8, ptr addrspace(1) %15, i64 %1610, !dbg !162
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1749, i32 %1750, i32 %1751, i32 %1752, ptr addrspace(1) %1755, i1 %29) #5, !dbg !163
  %indvars.iv.next228 = add nuw nsw i64 %indvars.iv227, 1024, !dbg !139
  %1756 = icmp samesign ult i64 %indvars.iv227, 2048, !dbg !139
  br i1 %1756, label %1606, label %1757, !dbg !139

1757:                                             ; preds = %1606
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 42, column: 62, scope: !6)
!22 = !DILocation(line: 203, column: 7, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 42, column: 51, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 209, column: 30, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 210, column: 34, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 210, column: 26, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 211, column: 39, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 211, column: 31, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 211, column: 22, scope: !23, inlinedAt: !25)
!33 = !DILocation(line: 44, column: 62, scope: !6)
!34 = !DILocation(line: 45, column: 58, scope: !6)
!35 = !DILocation(line: 46, column: 66, scope: !6)
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !23, inlinedAt: !38)
!51 = !DILocation(line: 59, column: 46, scope: !6)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 32, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 83, column: 50, scope: !6)
!57 = !DILocation(line: 85, column: 50, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 59, column: 113, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !75)
!75 = !DILocation(line: 82, column: 47, scope: !6)
!76 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 84, column: 47, scope: !6)
!78 = !DILocation(line: 61, column: 102, scope: !6)
!79 = !DILocation(line: 63, column: 95, scope: !6)
!80 = !DILocation(line: 74, column: 24, scope: !6)
!81 = !DILocation(line: 76, column: 24, scope: !6)
!82 = !DILocation(line: 77, column: 24, scope: !6)
!83 = !DILocation(line: 79, column: 24, scope: !6)
!84 = !DILocation(line: 80, column: 24, scope: !6)
!85 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !75)
!86 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !75)
!87 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !75)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !77)
!90 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !77)
!91 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !77)
!92 = !DILocation(line: 86, column: 29, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !94)
!97 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !94)
!98 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !94)
!99 = !DILocation(line: 89, column: 37, scope: !6)
!100 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !101)
!101 = !DILocation(line: 88, column: 40, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !101)
!104 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !101)
!105 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !101)
!106 = !DILocation(line: 90, column: 37, scope: !6)
!107 = !DILocation(line: 89, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 95, column: 25, scope: !6)
!118 = !DILocation(line: 95, column: 37, scope: !6)
!119 = !DILocation(line: 96, column: 26, scope: !6)
!120 = !DILocation(line: 96, column: 38, scope: !6)
!121 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !122)
!122 = !DILocation(line: 105, column: 46, scope: !6)
!123 = !DILocation(line: 106, column: 17, scope: !6)
!124 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !125)
!125 = !DILocation(line: 107, column: 46, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !127)
!127 = !DILocation(line: 108, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !127)
!131 = !DILocation(line: 110, column: 24, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !133)
!133 = !DILocation(line: 113, column: 46, scope: !6)
!134 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !133)
!136 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !133)
!137 = !DILocation(line: 116, column: 25, scope: !6)
!138 = !DILocation(line: 119, column: 24, scope: !6)
!139 = !DILocation(line: 97, column: 40, scope: !6)
!140 = !DILocation(line: 103, column: 43, scope: !6)
!141 = !DILocation(line: 103, column: 36, scope: !6)
!142 = !DILocation(line: 103, column: 53, scope: !6)
!143 = !DILocation(line: 103, column: 115, scope: !6)
!144 = !DILocation(line: 120, column: 36, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !146)
!148 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !146)
!149 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !146)
!150 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !151)
!151 = !DILocation(line: 125, column: 46, scope: !6)
!152 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !151)
!153 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !151)
!154 = !DILocation(line: 127, column: 25, scope: !6)
!155 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !151)
!156 = !DILocation(line: 128, column: 30, scope: !6)
!157 = !DILocation(line: 128, column: 54, scope: !6)
!158 = !DILocation(line: 129, column: 30, scope: !6)
!159 = !DILocation(line: 129, column: 54, scope: !6)
!160 = !DILocation(line: 130, column: 30, scope: !6)
!161 = !DILocation(line: 130, column: 54, scope: !6)
!162 = !DILocation(line: 131, column: 30, scope: !6)
!163 = !DILocation(line: 131, column: 54, scope: !6)
!164 = !DILocation(line: 97, column: 4, scope: !6)
