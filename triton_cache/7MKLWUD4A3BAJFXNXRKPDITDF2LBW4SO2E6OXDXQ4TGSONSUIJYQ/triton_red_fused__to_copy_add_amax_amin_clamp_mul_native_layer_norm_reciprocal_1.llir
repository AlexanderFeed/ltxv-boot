; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.begin:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %21, 7, !dbg !11
  %22 = and i32 %.lobit3, 3, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %22, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = shl i32 %21, 1, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = or disjoint i32 %30, %28
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %25) #5, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !17
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !17
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !17
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !17
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = fpext bfloat %48 to float, !dbg !18
  %57 = fpext bfloat %49 to float, !dbg !18
  %58 = fpext bfloat %50 to float, !dbg !18
  %59 = select i1 %25, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %25, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %25, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %25, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %25, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %25, float %56, float 0.000000e+00, !dbg !19
  %65 = select i1 %25, float %57, float 0.000000e+00, !dbg !19
  %66 = select i1 %25, float %58, float 0.000000e+00, !dbg !19
  %67 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %72 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %73 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %74 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ %72, %.peel.begin ], [ %205, %._crit_edge ]
  %81 = phi float [ %73, %.peel.begin ], [ %206, %._crit_edge ]
  %82 = phi float [ %74, %.peel.begin ], [ %207, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %.peel.begin ], [ %197, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %.peel.begin ], [ %198, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %.peel.begin ], [ %199, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = phi float [ %64, %.peel.begin ], [ %189, %._crit_edge ]
  %97 = phi float [ %65, %.peel.begin ], [ %190, %._crit_edge ]
  %98 = phi float [ %66, %.peel.begin ], [ %191, %._crit_edge ]
  %99 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %100 = add i32 %31, %99, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !16
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !16
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 %25) #5, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !17
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !17
  %106 = extractelement <2 x bfloat> %105, i64 1, !dbg !17
  %107 = fpext bfloat %106 to float, !dbg !18
  %108 = extractelement <2 x bfloat> %105, i64 0, !dbg !17
  %109 = fpext bfloat %108 to float, !dbg !18
  %110 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !17
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !17
  %112 = extractelement <2 x bfloat> %111, i64 1, !dbg !17
  %113 = fpext bfloat %112 to float, !dbg !18
  %114 = extractelement <2 x bfloat> %111, i64 0, !dbg !17
  %115 = fpext bfloat %114 to float, !dbg !18
  %116 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !17
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !17
  %118 = extractelement <2 x bfloat> %117, i64 1, !dbg !17
  %119 = fpext bfloat %118 to float, !dbg !18
  %120 = extractelement <2 x bfloat> %117, i64 0, !dbg !17
  %121 = fpext bfloat %120 to float, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !17
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !17
  %124 = extractelement <2 x bfloat> %123, i64 1, !dbg !17
  %125 = fpext bfloat %124 to float, !dbg !18
  %126 = extractelement <2 x bfloat> %123, i64 0, !dbg !17
  %127 = fpext bfloat %126 to float, !dbg !18
  %128 = fsub float %127, %91, !dbg !23
  %129 = fsub float %125, %92, !dbg !23
  %130 = fsub float %121, %93, !dbg !23
  %131 = fsub float %119, %94, !dbg !23
  %132 = fsub float %115, %95, !dbg !23
  %133 = fsub float %113, %96, !dbg !23
  %134 = fsub float %109, %97, !dbg !23
  %135 = fsub float %107, %98, !dbg !23
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = fadd float %80, 1.000000e+00, !dbg !27
  %142 = fadd float %81, 1.000000e+00, !dbg !27
  %143 = fadd float %82, 1.000000e+00, !dbg !27
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = tail call float @llvm.nvvm.div.full(float %133, float %141), !dbg !28
  %150 = tail call float @llvm.nvvm.div.full(float %134, float %142), !dbg !28
  %151 = tail call float @llvm.nvvm.div.full(float %135, float %143), !dbg !28
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fadd float %96, %149, !dbg !29
  %158 = fadd float %97, %150, !dbg !29
  %159 = fadd float %98, %151, !dbg !29
  %160 = fsub float %127, %152, !dbg !30
  %161 = fsub float %125, %153, !dbg !30
  %162 = fsub float %121, %154, !dbg !30
  %163 = fsub float %119, %155, !dbg !30
  %164 = fsub float %115, %156, !dbg !30
  %165 = fsub float %113, %157, !dbg !30
  %166 = fsub float %109, %158, !dbg !30
  %167 = fsub float %107, %159, !dbg !30
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fmul float %133, %165, !dbg !31
  %174 = fmul float %134, %166, !dbg !31
  %175 = fmul float %135, %167, !dbg !31
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = fadd float %88, %173, !dbg !32
  %182 = fadd float %89, %174, !dbg !32
  %183 = fadd float %90, %175, !dbg !32
  %184 = select i1 %25, float %152, float %91, !dbg !19
  %185 = select i1 %25, float %153, float %92, !dbg !19
  %186 = select i1 %25, float %154, float %93, !dbg !19
  %187 = select i1 %25, float %155, float %94, !dbg !19
  %188 = select i1 %25, float %156, float %95, !dbg !19
  %189 = select i1 %25, float %157, float %96, !dbg !19
  %190 = select i1 %25, float %158, float %97, !dbg !19
  %191 = select i1 %25, float %159, float %98, !dbg !19
  %192 = select i1 %25, float %176, float %83, !dbg !33
  %193 = select i1 %25, float %177, float %84, !dbg !33
  %194 = select i1 %25, float %178, float %85, !dbg !33
  %195 = select i1 %25, float %179, float %86, !dbg !33
  %196 = select i1 %25, float %180, float %87, !dbg !33
  %197 = select i1 %25, float %181, float %88, !dbg !33
  %198 = select i1 %25, float %182, float %89, !dbg !33
  %199 = select i1 %25, float %183, float %90, !dbg !33
  %200 = select i1 %25, float %136, float %75, !dbg !20
  %201 = select i1 %25, float %137, float %76, !dbg !20
  %202 = select i1 %25, float %138, float %77, !dbg !20
  %203 = select i1 %25, float %139, float %78, !dbg !20
  %204 = select i1 %25, float %140, float %79, !dbg !20
  %205 = select i1 %25, float %141, float %80, !dbg !20
  %206 = select i1 %25, float %142, float %81, !dbg !20
  %207 = select i1 %25, float %143, float %82, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !21
  %208 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !21
  br i1 %208, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %209 = fadd float %192, %193, !dbg !11
  %210 = lshr i32 %21, 5, !dbg !11
  %211 = and i32 %21, 3, !dbg !11
  %212 = or disjoint i32 %20, %211, !dbg !12
  %213 = icmp slt i32 %212, 4112, !dbg !13
  %214 = and i32 %29, 1022, !dbg !14
  %215 = fsub float %185, %184, !dbg !36
  %216 = fadd float %200, %201, !dbg !39
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !40
  %218 = tail call float @llvm.nvvm.div.full(float %201, float %216), !dbg !41
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !42
  %220 = fmul float %215, %219, !dbg !43
  %221 = fadd float %184, %220, !dbg !44
  %222 = fmul float %215, %215, !dbg !45
  %223 = fmul float %222, %200, !dbg !46
  %224 = fmul float %223, %219, !dbg !47
  %225 = fadd float %209, %224, !dbg !48
  %226 = fsub float %186, %221, !dbg !36
  %227 = fadd float %202, %216, !dbg !39
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !40
  %229 = tail call float @llvm.nvvm.div.full(float %202, float %227), !dbg !41
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !42
  %231 = fmul float %230, %226, !dbg !43
  %232 = fadd float %221, %231, !dbg !44
  %233 = fadd float %194, %225, !dbg !49
  %234 = fmul float %226, %226, !dbg !45
  %235 = fmul float %216, %234, !dbg !46
  %236 = fmul float %230, %235, !dbg !47
  %237 = fadd float %233, %236, !dbg !48
  %238 = fsub float %187, %232, !dbg !36
  %239 = fadd float %203, %227, !dbg !39
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !40
  %241 = tail call float @llvm.nvvm.div.full(float %203, float %239), !dbg !41
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !42
  %243 = fmul float %242, %238, !dbg !43
  %244 = fadd float %232, %243, !dbg !44
  %245 = fadd float %195, %237, !dbg !49
  %246 = fmul float %238, %238, !dbg !45
  %247 = fmul float %227, %246, !dbg !46
  %248 = fmul float %242, %247, !dbg !47
  %249 = fadd float %245, %248, !dbg !48
  %250 = fsub float %188, %244, !dbg !36
  %251 = fadd float %204, %239, !dbg !39
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !40
  %253 = tail call float @llvm.nvvm.div.full(float %204, float %251), !dbg !41
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !42
  %255 = fmul float %254, %250, !dbg !43
  %256 = fadd float %244, %255, !dbg !44
  %257 = fadd float %196, %249, !dbg !49
  %258 = fmul float %250, %250, !dbg !45
  %259 = fmul float %239, %258, !dbg !46
  %260 = fmul float %254, %259, !dbg !47
  %261 = fadd float %257, %260, !dbg !48
  %262 = fsub float %189, %256, !dbg !36
  %263 = fadd float %205, %251, !dbg !39
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !40
  %265 = tail call float @llvm.nvvm.div.full(float %205, float %263), !dbg !41
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !42
  %267 = fmul float %266, %262, !dbg !43
  %268 = fadd float %256, %267, !dbg !44
  %269 = fadd float %197, %261, !dbg !49
  %270 = fmul float %262, %262, !dbg !45
  %271 = fmul float %251, %270, !dbg !46
  %272 = fmul float %266, %271, !dbg !47
  %273 = fadd float %269, %272, !dbg !48
  %274 = fsub float %190, %268, !dbg !36
  %275 = fadd float %206, %263, !dbg !39
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !40
  %277 = tail call float @llvm.nvvm.div.full(float %206, float %275), !dbg !41
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !42
  %279 = fmul float %278, %274, !dbg !43
  %280 = fadd float %268, %279, !dbg !44
  %281 = fadd float %198, %273, !dbg !49
  %282 = fmul float %274, %274, !dbg !45
  %283 = fmul float %263, %282, !dbg !46
  %284 = fmul float %278, %283, !dbg !47
  %285 = fadd float %281, %284, !dbg !48
  %286 = fsub float %191, %280, !dbg !36
  %287 = fadd float %207, %275, !dbg !39
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !40
  %289 = tail call float @llvm.nvvm.div.full(float %207, float %287), !dbg !41
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !42
  %291 = fmul float %290, %286, !dbg !43
  %292 = fadd float %280, %291, !dbg !44
  %293 = fadd float %199, %285, !dbg !49
  %294 = fmul float %286, %286, !dbg !45
  %295 = fmul float %275, %294, !dbg !46
  %296 = fmul float %290, %295, !dbg !47
  %297 = fadd float %293, %296, !dbg !48
  %298 = bitcast float %292 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %297 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = bitcast float %287 to i32, !dbg !50
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 16, i32 31), !dbg !50
  %306 = bitcast i32 %305 to float, !dbg !50
  %307 = fsub float %300, %292, !dbg !36
  %308 = fadd float %287, %306, !dbg !39
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !40
  %310 = tail call float @llvm.nvvm.div.full(float %306, float %308), !dbg !41
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !42
  %312 = fmul float %311, %307, !dbg !43
  %313 = fadd float %292, %312, !dbg !44
  %314 = fadd float %297, %303, !dbg !49
  %315 = fmul float %307, %307, !dbg !45
  %316 = fmul float %287, %315, !dbg !46
  %317 = fmul float %311, %316, !dbg !47
  %318 = fadd float %314, %317, !dbg !48
  %319 = bitcast float %313 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %318 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = bitcast float %308 to i32, !dbg !50
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = fsub float %321, %313, !dbg !36
  %329 = fadd float %308, %327, !dbg !39
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !40
  %331 = tail call float @llvm.nvvm.div.full(float %327, float %329), !dbg !41
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !42
  %333 = fmul float %332, %328, !dbg !43
  %334 = fadd float %313, %333, !dbg !44
  %335 = fadd float %318, %324, !dbg !49
  %336 = fmul float %328, %328, !dbg !45
  %337 = fmul float %308, %336, !dbg !46
  %338 = fmul float %332, %337, !dbg !47
  %339 = fadd float %335, %338, !dbg !48
  %340 = bitcast float %334 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %339 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = bitcast float %329 to i32, !dbg !50
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = fsub float %342, %334, !dbg !36
  %350 = fadd float %329, %348, !dbg !39
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !40
  %352 = tail call float @llvm.nvvm.div.full(float %348, float %350), !dbg !41
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !42
  %354 = fmul float %353, %349, !dbg !43
  %355 = fadd float %334, %354, !dbg !44
  %356 = fadd float %339, %345, !dbg !49
  %357 = fmul float %349, %349, !dbg !45
  %358 = fmul float %329, %357, !dbg !46
  %359 = fmul float %353, %358, !dbg !47
  %360 = fadd float %356, %359, !dbg !48
  %361 = bitcast float %355 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %360 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = bitcast float %350 to i32, !dbg !50
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !50
  %369 = bitcast i32 %368 to float, !dbg !50
  %370 = fsub float %363, %355, !dbg !36
  %371 = fadd float %350, %369, !dbg !39
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !40
  %373 = tail call float @llvm.nvvm.div.full(float %369, float %371), !dbg !41
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !42
  %375 = fmul float %374, %370, !dbg !43
  %376 = fadd float %355, %375, !dbg !44
  %377 = fadd float %360, %366, !dbg !49
  %378 = fmul float %370, %370, !dbg !45
  %379 = fmul float %350, %378, !dbg !46
  %380 = fmul float %374, %379, !dbg !47
  %381 = fadd float %377, %380, !dbg !48
  %382 = bitcast float %376 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %381 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = bitcast float %371 to i32, !dbg !50
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !50
  %390 = bitcast i32 %389 to float, !dbg !50
  %391 = fsub float %384, %376, !dbg !36
  %392 = fadd float %371, %390, !dbg !39
  %393 = fcmp oeq float %392, 0.000000e+00, !dbg !40
  %394 = tail call float @llvm.nvvm.div.full(float %390, float %392), !dbg !41
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !42
  %396 = fmul float %395, %391, !dbg !43
  %397 = fadd float %376, %396, !dbg !44
  %398 = fadd float %381, %387, !dbg !49
  %399 = fmul float %391, %391, !dbg !45
  %400 = fmul float %371, %399, !dbg !46
  %401 = fmul float %395, %400, !dbg !47
  %402 = fadd float %398, %401, !dbg !48
  %403 = and i32 %210, 3, !dbg !50
  %404 = icmp eq i32 %23, 0, !dbg !50
  %405 = shl nuw nsw i32 %22, 2, !dbg !50
  %406 = or disjoint i32 %405, %403, !dbg !50
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !50
  %408 = bitcast float %397 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 %404) #5, !dbg !50
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %406, !dbg !50
  %410 = bitcast float %402 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 %404) #5, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %406, !dbg !50
  %412 = bitcast float %392 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 %404) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %413 = icmp slt i32 %21, 16, !dbg !50
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !50
  %415 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %413) #5, !dbg !50
  %416 = bitcast i32 %415 to float, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !50
  %418 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %413) #5, !dbg !50
  %419 = bitcast i32 %418 to float, !dbg !50
  %420 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !50
  %421 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %420, i1 %413) #5, !dbg !50
  %422 = bitcast i32 %421 to float, !dbg !50
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 2, i32 31), !dbg !50
  %424 = bitcast i32 %423 to float, !dbg !50
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 2, i32 31), !dbg !50
  %426 = bitcast i32 %425 to float, !dbg !50
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 2, i32 31), !dbg !50
  %428 = bitcast i32 %427 to float, !dbg !50
  %429 = fsub float %424, %416, !dbg !36
  %430 = fadd float %422, %428, !dbg !39
  %431 = fcmp oeq float %430, 0.000000e+00, !dbg !40
  %432 = tail call float @llvm.nvvm.div.full(float %428, float %430), !dbg !41
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !42
  %434 = fmul float %429, %433, !dbg !43
  %435 = fadd float %434, %416, !dbg !44
  %436 = fadd float %419, %426, !dbg !49
  %437 = fmul float %429, %429, !dbg !45
  %438 = fmul float %437, %422, !dbg !46
  %439 = fmul float %438, %433, !dbg !47
  %440 = fadd float %436, %439, !dbg !48
  %441 = bitcast float %435 to i32, !dbg !50
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !50
  %443 = bitcast i32 %442 to float, !dbg !50
  %444 = bitcast float %440 to i32, !dbg !50
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !50
  %446 = bitcast i32 %445 to float, !dbg !50
  %447 = bitcast float %430 to i32, !dbg !50
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 1, i32 31), !dbg !50
  %449 = bitcast i32 %448 to float, !dbg !50
  %450 = fsub float %443, %435, !dbg !36
  %451 = fadd float %430, %449, !dbg !39
  %452 = fcmp oeq float %451, 0.000000e+00, !dbg !40
  %453 = tail call float @llvm.nvvm.div.full(float %449, float %451), !dbg !41
  %454 = select i1 %452, float 0.000000e+00, float %453, !dbg !42
  %455 = fmul float %450, %454, !dbg !43
  %456 = fadd float %435, %455, !dbg !44
  %457 = fadd float %440, %446, !dbg !49
  %458 = fmul float %450, %450, !dbg !45
  %459 = fmul float %430, %458, !dbg !46
  %460 = fmul float %454, %459, !dbg !47
  %461 = fadd float %457, %460, !dbg !48
  %462 = icmp eq i32 %211, 0, !dbg !50
  %463 = and i1 %413, %462, !dbg !50
  %464 = bitcast float %456 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %464, i1 %463) #5, !dbg !50
  %465 = bitcast float %461 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %465, i1 %463) #5, !dbg !50
  %466 = bitcast float %451 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %466, i1 %463) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !50
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !50
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %405, !dbg !50
  %470 = load float, ptr addrspace(3) %469, align 16, !dbg !50
  %471 = tail call float @llvm.nvvm.div.full(float %470, float 3.072000e+03), !dbg !51
  %472 = fadd float %471, 0x3EB0C6F7A0000000, !dbg !52
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i64 = icmp eq i32 %480, 0, !dbg !53
  br i1 %.not.i64, label %483, label %481, !dbg !53

481:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %472), !dbg !53
  br label %__nv_rsqrtf.exit66, !dbg !53

483:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %472), !dbg !53
  br label %__nv_rsqrtf.exit66, !dbg !53

__nv_rsqrtf.exit66:                               ; preds = %481, %483
  %.0.i65 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !53
  %485 = and i32 %27, 4088
  %486 = lshr i32 %27, 6
  %487 = and i32 %486, 48
  %488 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %487
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) %488, i32 %485
  %490 = or disjoint i32 %485, 4
  %491 = getelementptr inbounds nuw float, ptr addrspace(3) %488, i32 %490
  %492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %214
  %493 = or disjoint i32 %214, 1024
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %493
  %494 = or disjoint i32 %214, 2048
  %gep77 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %494
  %495 = or disjoint i32 %214, 3072
  %gep78 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), i32 %495
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %214
  %gep79 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %493
  %gep80 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %494
  %gep81 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), i32 %495
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %488, i32 %485
  %498 = zext nneg i32 %214 to i64, !dbg !54
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep78, i32 4
  %500 = insertelement <2 x i1> poison, i1 %26, i64 0, !dbg !55
  %501 = shufflevector <2 x i1> %500, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %502 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !56
  %503 = shufflevector <4 x i1> %502, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !56
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 4
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 8
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 12
  br label %507, !dbg !54

507:                                              ; preds = %__nv_rsqrtf.exit66, %507
  %indvars.iv121 = phi i64 [ 0, %__nv_rsqrtf.exit66 ], [ %indvars.iv.next122, %507 ]
  %508 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit66 ], [ %632, %507 ]
  %509 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit66 ], [ %633, %507 ]
  %510 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit66 ], [ %630, %507 ]
  %511 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit66 ], [ %650, %507 ]
  %512 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit66 ], [ %651, %507 ]
  %513 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit66 ], [ %631, %507 ]
  %514 = or disjoint i64 %indvars.iv121, %498, !dbg !57
  %515 = trunc nuw nsw i64 %indvars.iv121 to i32, !dbg !58
  %516 = add i32 %31, %515, !dbg !58
  %517 = sext i32 %516 to i64, !dbg !59
  %518 = getelementptr bfloat, ptr addrspace(1) %0, i64 %517, !dbg !59
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %518, i1 %25) #5, !dbg !60
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !60
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !60
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !60
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !60
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !60
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !60
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !60
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !60
  %528 = extractelement <2 x bfloat> %521, i64 0, !dbg !60
  %529 = extractelement <2 x bfloat> %521, i64 1, !dbg !60
  %530 = extractelement <2 x bfloat> %523, i64 0, !dbg !60
  %531 = extractelement <2 x bfloat> %523, i64 1, !dbg !60
  %532 = extractelement <2 x bfloat> %525, i64 0, !dbg !60
  %533 = extractelement <2 x bfloat> %525, i64 1, !dbg !60
  %534 = extractelement <2 x bfloat> %527, i64 0, !dbg !60
  %535 = extractelement <2 x bfloat> %527, i64 1, !dbg !60
  %536 = fpext bfloat %528 to float, !dbg !61
  %537 = fpext bfloat %529 to float, !dbg !61
  %538 = fpext bfloat %530 to float, !dbg !61
  %539 = fpext bfloat %531 to float, !dbg !61
  %540 = fpext bfloat %532 to float, !dbg !61
  %541 = fpext bfloat %533 to float, !dbg !61
  %542 = fpext bfloat %534 to float, !dbg !61
  %543 = fpext bfloat %535 to float, !dbg !61
  %544 = add nuw nsw i64 %514, 3072, !dbg !62
  %545 = getelementptr float, ptr addrspace(1) %1, i64 %544, !dbg !63
  %546 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %545, i1 true) #5, !dbg !64
  %547 = extractvalue { i32, i32 } %546, 0, !dbg !64
  %548 = extractvalue { i32, i32 } %546, 1, !dbg !64
  %549 = getelementptr bfloat, ptr addrspace(1) %2, i64 %544, !dbg !65
  %550 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %549, i1 true) #5, !dbg !66
  %551 = bitcast i32 %550 to <2 x bfloat>, !dbg !66
  %552 = getelementptr float, ptr addrspace(1) %1, i64 %514, !dbg !67
  %553 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %552, i1 true) #5, !dbg !68
  %554 = extractvalue { i32, i32 } %553, 0, !dbg !68
  %555 = extractvalue { i32, i32 } %553, 1, !dbg !68
  %556 = getelementptr bfloat, ptr addrspace(1) %2, i64 %514, !dbg !69
  %557 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %556, i1 true) #5, !dbg !70
  %558 = bitcast i32 %557 to <2 x bfloat>, !dbg !70
  %559 = fsub float %536, %468, !dbg !71
  %560 = fsub float %537, %468, !dbg !71
  %561 = fsub float %538, %468, !dbg !71
  %562 = fsub float %539, %468, !dbg !71
  %563 = fsub float %540, %468, !dbg !71
  %564 = fsub float %541, %468, !dbg !71
  %565 = fsub float %542, %468, !dbg !71
  %566 = fsub float %543, %468, !dbg !71
  %567 = fmul float %.0.i65, %559, !dbg !72
  %568 = fmul float %.0.i65, %560, !dbg !72
  %569 = fmul float %.0.i65, %561, !dbg !72
  %570 = fmul float %.0.i65, %562, !dbg !72
  %571 = fmul float %.0.i65, %563, !dbg !72
  %572 = fmul float %.0.i65, %564, !dbg !72
  %573 = fmul float %.0.i65, %565, !dbg !72
  %574 = fmul float %.0.i65, %566, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %575 = bitcast float %567 to i32, !dbg !72
  %576 = bitcast float %568 to i32, !dbg !72
  %577 = bitcast float %569 to i32, !dbg !72
  %578 = bitcast float %570 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %489, i32 %575, i32 %576, i32 %577, i32 %578, i1 true) #5, !dbg !72
  %579 = bitcast float %571 to i32, !dbg !72
  %580 = bitcast float %572 to i32, !dbg !72
  %581 = bitcast float %573 to i32, !dbg !72
  %582 = bitcast float %574 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %491, i32 %579, i32 %580, i32 %581, i32 %582, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %583 = load float, ptr addrspace(3) %gep78, align 8, !dbg !72
  %584 = load float, ptr addrspace(3) %499, align 4, !dbg !72
  %585 = fcmp uno <2 x float> %510, zeroinitializer, !dbg !73
  %586 = fcmp uno <4 x float> %513, zeroinitializer, !dbg !73
  %587 = fcmp uno float %508, 0.000000e+00, !dbg !73
  %588 = fcmp uno float %509, 0.000000e+00, !dbg !73
  %589 = insertelement <2 x i32> poison, i32 %547, i64 0, !dbg !64
  %590 = insertelement <2 x i32> %589, i32 %548, i64 1, !dbg !64
  %591 = bitcast <2 x i32> %590 to <2 x float>, !dbg !64
  %592 = fpext <2 x bfloat> %551 to <2 x float>, !dbg !75
  %593 = insertelement <2 x i32> poison, i32 %554, i64 0, !dbg !68
  %594 = insertelement <2 x i32> %593, i32 %555, i64 1, !dbg !68
  %595 = bitcast <2 x i32> %594 to <2 x float>, !dbg !68
  %596 = fpext <2 x bfloat> %558 to <2 x float>, !dbg !76
  %597 = load <2 x float>, ptr addrspace(3) %492, align 8, !dbg !72
  %598 = fadd <2 x float> %591, %592, !dbg !77
  %599 = fadd <2 x float> %598, splat (float 1.000000e+00), !dbg !78
  %600 = fmul <2 x float> %599, %597, !dbg !79
  %601 = shufflevector <2 x float> %599, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !79
  %602 = extractelement <2 x float> %599, i64 0, !dbg !79
  %603 = fmul float %602, %583, !dbg !79
  %604 = extractelement <2 x float> %599, i64 1, !dbg !79
  %605 = fmul float %604, %584, !dbg !79
  %606 = fadd <2 x float> %595, %596, !dbg !80
  %607 = fadd <2 x float> %606, %600, !dbg !81
  %608 = shufflevector <2 x float> %606, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !81
  %609 = extractelement <2 x float> %606, i64 0, !dbg !81
  %610 = fadd float %609, %603, !dbg !81
  %611 = extractelement <2 x float> %606, i64 1, !dbg !81
  %612 = fadd float %611, %605, !dbg !81
  %613 = fcmp olt <2 x float> %510, %607, !dbg !82
  %614 = fcmp olt float %508, %610, !dbg !82
  %615 = fcmp olt float %509, %612, !dbg !82
  %616 = or <2 x i1> %585, %613, !dbg !83
  %617 = or i1 %587, %614, !dbg !83
  %618 = or i1 %588, %615, !dbg !83
  %619 = select <2 x i1> %616, <2 x float> %510, <2 x float> %607, !dbg !84
  %620 = load <2 x float>, ptr addrspace(3) %gep, align 8, !dbg !72
  %621 = load <2 x float>, ptr addrspace(3) %gep77, align 8, !dbg !72
  %622 = shufflevector <2 x float> %620, <2 x float> %621, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %623 = fmul <4 x float> %601, %622, !dbg !79
  %624 = fadd <4 x float> %608, %623, !dbg !81
  %625 = fcmp olt <4 x float> %513, %624, !dbg !82
  %626 = or <4 x i1> %586, %625, !dbg !83
  %627 = select <4 x i1> %626, <4 x float> %513, <4 x float> %624, !dbg !84
  %628 = select i1 %617, float %508, float %610, !dbg !84
  %629 = select i1 %618, float %509, float %612, !dbg !84
  %630 = select <2 x i1> %501, <2 x float> %619, <2 x float> %510, !dbg !55
  %631 = select <4 x i1> %503, <4 x float> %627, <4 x float> %513, !dbg !55
  %632 = select i1 %26, float %628, float %508, !dbg !55
  %633 = select i1 %26, float %629, float %509, !dbg !55
  %634 = extractelement <2 x float> %607, i64 0, !dbg !85
  %635 = extractelement <2 x float> %607, i64 1, !dbg !85
  %636 = fcmp uno <4 x float> %511, zeroinitializer, !dbg !86
  %637 = fcmp uno <4 x float> %512, zeroinitializer, !dbg !86
  %638 = shufflevector <2 x float> %607, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !88
  %639 = insertelement <4 x float> %638, float %610, i64 0, !dbg !88
  %640 = shufflevector <4 x float> %639, <4 x float> %624, <4 x i32> <i32 0, i32 6, i32 4, i32 3>, !dbg !88
  %641 = fcmp ogt <4 x float> %511, %640, !dbg !88
  %642 = shufflevector <2 x float> %607, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !88
  %643 = insertelement <4 x float> %642, float %612, i64 0, !dbg !88
  %644 = shufflevector <4 x float> %643, <4 x float> %624, <4 x i32> <i32 0, i32 7, i32 5, i32 3>, !dbg !88
  %645 = fcmp ogt <4 x float> %512, %644, !dbg !88
  %646 = or <4 x i1> %636, %641, !dbg !89
  %647 = or <4 x i1> %637, %645, !dbg !89
  %648 = select <4 x i1> %646, <4 x float> %511, <4 x float> %640, !dbg !90
  %649 = select <4 x i1> %647, <4 x float> %512, <4 x float> %644, !dbg !90
  %650 = select <4 x i1> %503, <4 x float> %648, <4 x float> %511, !dbg !56
  %651 = select <4 x i1> %503, <4 x float> %649, <4 x float> %512, !dbg !56
  %652 = getelementptr bfloat, ptr addrspace(1) %3, i64 %517, !dbg !91
  %653 = fptrunc float %634 to bfloat, !dbg !85
  %654 = fptrunc float %635 to bfloat, !dbg !85
  %655 = extractelement <4 x float> %624, i64 0, !dbg !85
  %656 = fptrunc float %655 to bfloat, !dbg !85
  %657 = extractelement <4 x float> %624, i64 1, !dbg !85
  %658 = fptrunc float %657 to bfloat, !dbg !85
  %659 = extractelement <4 x float> %624, i64 2, !dbg !85
  %660 = fptrunc float %659 to bfloat, !dbg !85
  %661 = extractelement <4 x float> %624, i64 3, !dbg !85
  %662 = fptrunc float %661 to bfloat, !dbg !85
  %663 = fptrunc float %610 to bfloat, !dbg !85
  %664 = fptrunc float %612 to bfloat, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %665 = bitcast bfloat %653 to i16, !dbg !85
  %666 = bitcast bfloat %654 to i16, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %496, i16 %665, i16 %666, i1 true) #5, !dbg !85
  %667 = bitcast bfloat %656 to i16, !dbg !85
  %668 = bitcast bfloat %658 to i16, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep79, i16 %667, i16 %668, i1 true) #5, !dbg !85
  %669 = bitcast bfloat %660 to i16, !dbg !85
  %670 = bitcast bfloat %662 to i16, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep80, i16 %669, i16 %670, i1 true) #5, !dbg !85
  %671 = bitcast bfloat %663 to i16, !dbg !85
  %672 = bitcast bfloat %664 to i16, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep81, i16 %671, i16 %672, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %.extract = load i32, ptr addrspace(3) %497, align 16, !dbg !85
  %.extract68 = load i32, ptr addrspace(3) %504, align 4, !dbg !85
  %.extract70 = load i32, ptr addrspace(3) %505, align 8, !dbg !85
  %.extract72 = load i32, ptr addrspace(3) %506, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %652, i1 %25) #5, !dbg !85
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1024, !dbg !54
  %673 = icmp samesign ult i64 %indvars.iv121, 2048, !dbg !54
  br i1 %673, label %507, label %674, !dbg !54

674:                                              ; preds = %507
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %675 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %630, <2 x i32> <i32 0, i32 2>, !dbg !94
  %676 = fcmp olt <2 x float> %675, %630, !dbg !94
  %677 = fcmp uno <2 x float> %675, %630, !dbg !94
  %shift = shufflevector <2 x i1> %676, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !95
  %678 = or <2 x i1> %shift, %677, !dbg !95
  %679 = extractelement <2 x i1> %678, i64 0, !dbg !95
  %680 = extractelement <2 x float> %630, i64 0, !dbg !96
  %681 = extractelement <2 x float> %630, i64 1, !dbg !96
  %682 = select i1 %679, float %680, float %681, !dbg !96
  %683 = extractelement <4 x float> %631, i64 0, !dbg !94
  %684 = extractelement <4 x float> %631, i64 1, !dbg !94
  %685 = fcmp olt float %683, %684, !dbg !94
  %686 = fcmp uno float %683, 0.000000e+00, !dbg !97
  %687 = or i1 %685, %686, !dbg !95
  %688 = select i1 %687, float %683, float %684, !dbg !96
  %689 = extractelement <4 x float> %631, i64 2, !dbg !94
  %690 = extractelement <4 x float> %631, i64 3, !dbg !94
  %691 = fcmp olt float %689, %690, !dbg !94
  %692 = fcmp uno float %689, 0.000000e+00, !dbg !97
  %693 = or i1 %691, %692, !dbg !95
  %694 = select i1 %693, float %689, float %690, !dbg !96
  %695 = fcmp olt float %632, %633, !dbg !94
  %696 = fcmp uno float %632, 0.000000e+00, !dbg !97
  %697 = or i1 %695, %696, !dbg !95
  %698 = select i1 %697, float %632, float %633, !dbg !96
  %699 = bitcast float %682 to i32, !dbg !92
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 16, i32 31), !dbg !92
  %701 = bitcast i32 %700 to float, !dbg !92
  %702 = fcmp olt float %682, %701, !dbg !94
  %703 = fcmp uno float %682, 0.000000e+00, !dbg !97
  %704 = or i1 %703, %702, !dbg !95
  %705 = select i1 %704, float %682, float %701, !dbg !96
  %706 = bitcast float %705 to i32, !dbg !92
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 8, i32 31), !dbg !92
  %708 = bitcast i32 %707 to float, !dbg !92
  %709 = fcmp olt float %705, %708, !dbg !94
  %710 = fcmp uno float %705, 0.000000e+00, !dbg !97
  %711 = or i1 %709, %710, !dbg !95
  %712 = select i1 %711, float %705, float %708, !dbg !96
  %713 = bitcast float %712 to i32, !dbg !92
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 4, i32 31), !dbg !92
  %715 = bitcast i32 %714 to float, !dbg !92
  %716 = fcmp olt float %712, %715, !dbg !94
  %717 = fcmp uno float %712, 0.000000e+00, !dbg !97
  %718 = or i1 %716, %717, !dbg !95
  %719 = select i1 %718, float %712, float %715, !dbg !96
  %720 = bitcast float %719 to i32, !dbg !92
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %720, i32 2, i32 31), !dbg !92
  %722 = bitcast i32 %721 to float, !dbg !92
  %723 = fcmp olt float %719, %722, !dbg !94
  %724 = fcmp uno float %719, 0.000000e+00, !dbg !97
  %725 = or i1 %723, %724, !dbg !95
  %726 = select i1 %725, float %719, float %722, !dbg !96
  %727 = bitcast float %726 to i32, !dbg !92
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 1, i32 31), !dbg !92
  %729 = bitcast i32 %728 to float, !dbg !92
  %730 = fcmp olt float %726, %729, !dbg !94
  %731 = fcmp uno float %726, 0.000000e+00, !dbg !97
  %732 = or i1 %730, %731, !dbg !95
  %733 = bitcast float %688 to i32, !dbg !92
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %733, i32 16, i32 31), !dbg !92
  %735 = bitcast i32 %734 to float, !dbg !92
  %736 = fcmp olt float %688, %735, !dbg !94
  %737 = fcmp uno float %688, 0.000000e+00, !dbg !97
  %738 = or i1 %737, %736, !dbg !95
  %739 = select i1 %738, float %688, float %735, !dbg !96
  %740 = bitcast float %739 to i32, !dbg !92
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 8, i32 31), !dbg !92
  %742 = bitcast i32 %741 to float, !dbg !92
  %743 = fcmp olt float %739, %742, !dbg !94
  %744 = fcmp uno float %739, 0.000000e+00, !dbg !97
  %745 = or i1 %743, %744, !dbg !95
  %746 = select i1 %745, float %739, float %742, !dbg !96
  %747 = bitcast float %746 to i32, !dbg !92
  %748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %747, i32 4, i32 31), !dbg !92
  %749 = bitcast i32 %748 to float, !dbg !92
  %750 = fcmp olt float %746, %749, !dbg !94
  %751 = fcmp uno float %746, 0.000000e+00, !dbg !97
  %752 = or i1 %750, %751, !dbg !95
  %753 = select i1 %752, float %746, float %749, !dbg !96
  %754 = bitcast float %753 to i32, !dbg !92
  %755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %754, i32 2, i32 31), !dbg !92
  %756 = bitcast i32 %755 to float, !dbg !92
  %757 = fcmp olt float %753, %756, !dbg !94
  %758 = fcmp uno float %753, 0.000000e+00, !dbg !97
  %759 = or i1 %757, %758, !dbg !95
  %760 = select i1 %759, float %753, float %756, !dbg !96
  %761 = bitcast float %760 to i32, !dbg !92
  %762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %761, i32 1, i32 31), !dbg !92
  %763 = bitcast i32 %762 to float, !dbg !92
  %764 = fcmp olt float %760, %763, !dbg !94
  %765 = fcmp uno float %760, 0.000000e+00, !dbg !97
  %766 = or i1 %764, %765, !dbg !95
  %767 = bitcast float %694 to i32, !dbg !92
  %768 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %767, i32 16, i32 31), !dbg !92
  %769 = bitcast i32 %768 to float, !dbg !92
  %770 = fcmp olt float %694, %769, !dbg !94
  %771 = fcmp uno float %694, 0.000000e+00, !dbg !97
  %772 = or i1 %771, %770, !dbg !95
  %773 = select i1 %772, float %694, float %769, !dbg !96
  %774 = bitcast float %773 to i32, !dbg !92
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 8, i32 31), !dbg !92
  %776 = bitcast i32 %775 to float, !dbg !92
  %777 = fcmp olt float %773, %776, !dbg !94
  %778 = fcmp uno float %773, 0.000000e+00, !dbg !97
  %779 = or i1 %777, %778, !dbg !95
  %780 = select i1 %779, float %773, float %776, !dbg !96
  %781 = bitcast float %780 to i32, !dbg !92
  %782 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %781, i32 4, i32 31), !dbg !92
  %783 = bitcast i32 %782 to float, !dbg !92
  %784 = fcmp olt float %780, %783, !dbg !94
  %785 = fcmp uno float %780, 0.000000e+00, !dbg !97
  %786 = or i1 %784, %785, !dbg !95
  %787 = select i1 %786, float %780, float %783, !dbg !96
  %788 = bitcast float %787 to i32, !dbg !92
  %789 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %788, i32 2, i32 31), !dbg !92
  %790 = bitcast i32 %789 to float, !dbg !92
  %791 = fcmp olt float %787, %790, !dbg !94
  %792 = fcmp uno float %787, 0.000000e+00, !dbg !97
  %793 = or i1 %791, %792, !dbg !95
  %794 = select i1 %793, float %787, float %790, !dbg !96
  %795 = bitcast float %794 to i32, !dbg !92
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 1, i32 31), !dbg !92
  %797 = bitcast i32 %796 to float, !dbg !92
  %798 = fcmp olt float %794, %797, !dbg !94
  %799 = fcmp uno float %794, 0.000000e+00, !dbg !97
  %800 = or i1 %798, %799, !dbg !95
  %801 = bitcast float %698 to i32, !dbg !92
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 16, i32 31), !dbg !92
  %803 = bitcast i32 %802 to float, !dbg !92
  %804 = fcmp olt float %698, %803, !dbg !94
  %805 = fcmp uno float %698, 0.000000e+00, !dbg !97
  %806 = or i1 %805, %804, !dbg !95
  %807 = select i1 %806, float %698, float %803, !dbg !96
  %808 = bitcast float %807 to i32, !dbg !92
  %809 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %808, i32 8, i32 31), !dbg !92
  %810 = bitcast i32 %809 to float, !dbg !92
  %811 = fcmp olt float %807, %810, !dbg !94
  %812 = fcmp uno float %807, 0.000000e+00, !dbg !97
  %813 = or i1 %811, %812, !dbg !95
  %814 = select i1 %813, float %807, float %810, !dbg !96
  %815 = bitcast float %814 to i32, !dbg !92
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 4, i32 31), !dbg !92
  %817 = bitcast i32 %816 to float, !dbg !92
  %818 = fcmp olt float %814, %817, !dbg !94
  %819 = fcmp uno float %814, 0.000000e+00, !dbg !97
  %820 = or i1 %818, %819, !dbg !95
  %821 = select i1 %820, float %814, float %817, !dbg !96
  %822 = bitcast float %821 to i32, !dbg !92
  %823 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %822, i32 2, i32 31), !dbg !92
  %824 = bitcast i32 %823 to float, !dbg !92
  %825 = fcmp olt float %821, %824, !dbg !94
  %826 = fcmp uno float %821, 0.000000e+00, !dbg !97
  %827 = or i1 %825, %826, !dbg !95
  %828 = select i1 %827, float %821, float %824, !dbg !96
  %829 = bitcast float %828 to i32, !dbg !92
  %830 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %829, i32 1, i32 31), !dbg !92
  %831 = bitcast i32 %830 to float, !dbg !92
  %832 = fcmp olt float %828, %831, !dbg !94
  %833 = fcmp uno float %828, 0.000000e+00, !dbg !97
  %834 = or i1 %832, %833, !dbg !95
  %835 = and i32 %210, 15, !dbg !92
  %836 = getelementptr float, ptr addrspace(3) @global_smem, i32 %835, !dbg !92
  %837 = select i1 %732, i32 %727, i32 %728, !dbg !96
  %838 = insertelement <1 x i32> poison, i32 %837, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %836, <1 x i32> %838, i1 %404) #5, !dbg !92
  %839 = or disjoint i32 %835, 16, !dbg !92
  %840 = getelementptr float, ptr addrspace(3) @global_smem, i32 %839, !dbg !92
  %841 = select i1 %766, i32 %761, i32 %762, !dbg !96
  %842 = insertelement <1 x i32> poison, i32 %841, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %842, i1 %404) #5, !dbg !92
  %843 = or disjoint i32 %835, 32, !dbg !92
  %844 = getelementptr float, ptr addrspace(3) @global_smem, i32 %843, !dbg !92
  %845 = select i1 %800, i32 %795, i32 %796, !dbg !96
  %846 = insertelement <1 x i32> poison, i32 %845, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %846, i1 %404) #5, !dbg !92
  %847 = or disjoint i32 %835, 48, !dbg !92
  %848 = getelementptr float, ptr addrspace(3) @global_smem, i32 %847, !dbg !92
  %849 = select i1 %834, i32 %829, i32 %830, !dbg !96
  %850 = insertelement <1 x i32> poison, i32 %849, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %850, i1 %404) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %851 = icmp slt i32 %21, 64, !dbg !92
  %852 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %851) #5, !dbg !92
  %853 = bitcast i32 %852 to float, !dbg !92
  %854 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 8, i32 31), !dbg !92
  %855 = bitcast i32 %854 to float, !dbg !92
  %856 = fcmp olt float %853, %855, !dbg !94
  %857 = fcmp uno float %853, 0.000000e+00, !dbg !97
  %858 = or i1 %857, %856, !dbg !95
  %859 = select i1 %858, float %853, float %855, !dbg !96
  %860 = bitcast float %859 to i32, !dbg !92
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 4, i32 31), !dbg !92
  %862 = bitcast i32 %861 to float, !dbg !92
  %863 = fcmp olt float %859, %862, !dbg !94
  %864 = fcmp uno float %859, 0.000000e+00, !dbg !97
  %865 = or i1 %863, %864, !dbg !95
  %866 = select i1 %865, float %859, float %862, !dbg !96
  %867 = bitcast float %866 to i32, !dbg !92
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 2, i32 31), !dbg !92
  %869 = bitcast i32 %868 to float, !dbg !92
  %870 = fcmp olt float %866, %869, !dbg !94
  %871 = fcmp uno float %866, 0.000000e+00, !dbg !97
  %872 = or i1 %870, %871, !dbg !95
  %873 = select i1 %872, float %866, float %869, !dbg !96
  %874 = bitcast float %873 to i32, !dbg !92
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %874, i32 1, i32 31), !dbg !92
  %876 = bitcast i32 %875 to float, !dbg !92
  %877 = fcmp olt float %873, %876, !dbg !94
  %878 = fcmp uno float %873, 0.000000e+00, !dbg !97
  %879 = or i1 %877, %878, !dbg !95
  %880 = and i32 %21, 15, !dbg !92
  %881 = icmp eq i32 %880, 0, !dbg !92
  %882 = and i1 %851, %881, !dbg !92
  %883 = select i1 %879, i32 %874, i32 %875, !dbg !96
  %884 = insertelement <1 x i32> poison, i32 %883, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %884, i1 %882) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %885 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %886 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !92
  %887 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !92
  %888 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %889 = bitcast float %885 to i32, !dbg !98
  %890 = bitcast float %886 to i32, !dbg !98
  %891 = bitcast float %887 to i32, !dbg !98
  %892 = bitcast float %888 to i32, !dbg !98
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %889, i32 %890, i32 %891, i32 %892, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %893 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211, !dbg !98
  %894 = load float, ptr addrspace(3) %893, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %895 = fcmp ogt <4 x float> %650, %651, !dbg !101
  %896 = extractelement <4 x float> %650, i64 3, !dbg !102
  %897 = fcmp uno float %896, 0.000000e+00, !dbg !102
  %898 = extractelement <4 x i1> %895, i64 3, !dbg !103
  %899 = or i1 %898, %897, !dbg !103
  %900 = extractelement <4 x float> %651, i64 3, !dbg !104
  %901 = select i1 %899, float %896, float %900, !dbg !104
  %902 = extractelement <4 x float> %650, i64 2, !dbg !102
  %903 = fcmp uno float %902, 0.000000e+00, !dbg !102
  %904 = extractelement <4 x i1> %895, i64 2, !dbg !103
  %905 = or i1 %904, %903, !dbg !103
  %906 = extractelement <4 x float> %651, i64 2, !dbg !104
  %907 = select i1 %905, float %902, float %906, !dbg !104
  %908 = extractelement <4 x float> %650, i64 1, !dbg !102
  %909 = fcmp uno float %908, 0.000000e+00, !dbg !102
  %910 = extractelement <4 x i1> %895, i64 1, !dbg !103
  %911 = or i1 %910, %909, !dbg !103
  %912 = extractelement <4 x float> %651, i64 1, !dbg !104
  %913 = select i1 %911, float %908, float %912, !dbg !104
  %914 = extractelement <4 x float> %650, i64 0, !dbg !102
  %915 = fcmp uno float %914, 0.000000e+00, !dbg !102
  %916 = extractelement <4 x i1> %895, i64 0, !dbg !103
  %917 = or i1 %916, %915, !dbg !103
  %918 = extractelement <4 x float> %651, i64 0, !dbg !104
  %919 = select i1 %917, float %914, float %918, !dbg !104
  %920 = bitcast float %901 to i32, !dbg !99
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 16, i32 31), !dbg !99
  %922 = bitcast i32 %921 to float, !dbg !99
  %923 = fcmp ogt float %901, %922, !dbg !101
  %924 = fcmp uno float %901, 0.000000e+00, !dbg !102
  %925 = or i1 %924, %923, !dbg !103
  %926 = select i1 %925, float %901, float %922, !dbg !104
  %927 = bitcast float %926 to i32, !dbg !99
  %928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %927, i32 8, i32 31), !dbg !99
  %929 = bitcast i32 %928 to float, !dbg !99
  %930 = fcmp ogt float %926, %929, !dbg !101
  %931 = fcmp uno float %926, 0.000000e+00, !dbg !102
  %932 = or i1 %930, %931, !dbg !103
  %933 = select i1 %932, float %926, float %929, !dbg !104
  %934 = bitcast float %933 to i32, !dbg !99
  %935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %934, i32 4, i32 31), !dbg !99
  %936 = bitcast i32 %935 to float, !dbg !99
  %937 = fcmp ogt float %933, %936, !dbg !101
  %938 = fcmp uno float %933, 0.000000e+00, !dbg !102
  %939 = or i1 %937, %938, !dbg !103
  %940 = select i1 %939, float %933, float %936, !dbg !104
  %941 = bitcast float %940 to i32, !dbg !99
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 2, i32 31), !dbg !99
  %943 = bitcast i32 %942 to float, !dbg !99
  %944 = fcmp ogt float %940, %943, !dbg !101
  %945 = fcmp uno float %940, 0.000000e+00, !dbg !102
  %946 = or i1 %944, %945, !dbg !103
  %947 = select i1 %946, float %940, float %943, !dbg !104
  %948 = bitcast float %947 to i32, !dbg !99
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 1, i32 31), !dbg !99
  %950 = bitcast i32 %949 to float, !dbg !99
  %951 = fcmp ogt float %947, %950, !dbg !101
  %952 = fcmp uno float %947, 0.000000e+00, !dbg !102
  %953 = or i1 %951, %952, !dbg !103
  %954 = bitcast float %907 to i32, !dbg !99
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 16, i32 31), !dbg !99
  %956 = bitcast i32 %955 to float, !dbg !99
  %957 = fcmp ogt float %907, %956, !dbg !101
  %958 = fcmp uno float %907, 0.000000e+00, !dbg !102
  %959 = or i1 %958, %957, !dbg !103
  %960 = select i1 %959, float %907, float %956, !dbg !104
  %961 = bitcast float %960 to i32, !dbg !99
  %962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %961, i32 8, i32 31), !dbg !99
  %963 = bitcast i32 %962 to float, !dbg !99
  %964 = fcmp ogt float %960, %963, !dbg !101
  %965 = fcmp uno float %960, 0.000000e+00, !dbg !102
  %966 = or i1 %964, %965, !dbg !103
  %967 = select i1 %966, float %960, float %963, !dbg !104
  %968 = bitcast float %967 to i32, !dbg !99
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 4, i32 31), !dbg !99
  %970 = bitcast i32 %969 to float, !dbg !99
  %971 = fcmp ogt float %967, %970, !dbg !101
  %972 = fcmp uno float %967, 0.000000e+00, !dbg !102
  %973 = or i1 %971, %972, !dbg !103
  %974 = select i1 %973, float %967, float %970, !dbg !104
  %975 = bitcast float %974 to i32, !dbg !99
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %975, i32 2, i32 31), !dbg !99
  %977 = bitcast i32 %976 to float, !dbg !99
  %978 = fcmp ogt float %974, %977, !dbg !101
  %979 = fcmp uno float %974, 0.000000e+00, !dbg !102
  %980 = or i1 %978, %979, !dbg !103
  %981 = select i1 %980, float %974, float %977, !dbg !104
  %982 = bitcast float %981 to i32, !dbg !99
  %983 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %982, i32 1, i32 31), !dbg !99
  %984 = bitcast i32 %983 to float, !dbg !99
  %985 = fcmp ogt float %981, %984, !dbg !101
  %986 = fcmp uno float %981, 0.000000e+00, !dbg !102
  %987 = or i1 %985, %986, !dbg !103
  %988 = bitcast float %913 to i32, !dbg !99
  %989 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %988, i32 16, i32 31), !dbg !99
  %990 = bitcast i32 %989 to float, !dbg !99
  %991 = fcmp ogt float %913, %990, !dbg !101
  %992 = fcmp uno float %913, 0.000000e+00, !dbg !102
  %993 = or i1 %992, %991, !dbg !103
  %994 = select i1 %993, float %913, float %990, !dbg !104
  %995 = bitcast float %994 to i32, !dbg !99
  %996 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %995, i32 8, i32 31), !dbg !99
  %997 = bitcast i32 %996 to float, !dbg !99
  %998 = fcmp ogt float %994, %997, !dbg !101
  %999 = fcmp uno float %994, 0.000000e+00, !dbg !102
  %1000 = or i1 %998, %999, !dbg !103
  %1001 = select i1 %1000, float %994, float %997, !dbg !104
  %1002 = bitcast float %1001 to i32, !dbg !99
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 4, i32 31), !dbg !99
  %1004 = bitcast i32 %1003 to float, !dbg !99
  %1005 = fcmp ogt float %1001, %1004, !dbg !101
  %1006 = fcmp uno float %1001, 0.000000e+00, !dbg !102
  %1007 = or i1 %1005, %1006, !dbg !103
  %1008 = select i1 %1007, float %1001, float %1004, !dbg !104
  %1009 = bitcast float %1008 to i32, !dbg !99
  %1010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1009, i32 2, i32 31), !dbg !99
  %1011 = bitcast i32 %1010 to float, !dbg !99
  %1012 = fcmp ogt float %1008, %1011, !dbg !101
  %1013 = fcmp uno float %1008, 0.000000e+00, !dbg !102
  %1014 = or i1 %1012, %1013, !dbg !103
  %1015 = select i1 %1014, float %1008, float %1011, !dbg !104
  %1016 = bitcast float %1015 to i32, !dbg !99
  %1017 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1016, i32 1, i32 31), !dbg !99
  %1018 = bitcast i32 %1017 to float, !dbg !99
  %1019 = fcmp ogt float %1015, %1018, !dbg !101
  %1020 = fcmp uno float %1015, 0.000000e+00, !dbg !102
  %1021 = or i1 %1019, %1020, !dbg !103
  %1022 = bitcast float %919 to i32, !dbg !99
  %1023 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1022, i32 16, i32 31), !dbg !99
  %1024 = bitcast i32 %1023 to float, !dbg !99
  %1025 = fcmp ogt float %919, %1024, !dbg !101
  %1026 = fcmp uno float %919, 0.000000e+00, !dbg !102
  %1027 = or i1 %1026, %1025, !dbg !103
  %1028 = select i1 %1027, float %919, float %1024, !dbg !104
  %1029 = bitcast float %1028 to i32, !dbg !99
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 8, i32 31), !dbg !99
  %1031 = bitcast i32 %1030 to float, !dbg !99
  %1032 = fcmp ogt float %1028, %1031, !dbg !101
  %1033 = fcmp uno float %1028, 0.000000e+00, !dbg !102
  %1034 = or i1 %1032, %1033, !dbg !103
  %1035 = select i1 %1034, float %1028, float %1031, !dbg !104
  %1036 = bitcast float %1035 to i32, !dbg !99
  %1037 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1036, i32 4, i32 31), !dbg !99
  %1038 = bitcast i32 %1037 to float, !dbg !99
  %1039 = fcmp ogt float %1035, %1038, !dbg !101
  %1040 = fcmp uno float %1035, 0.000000e+00, !dbg !102
  %1041 = or i1 %1039, %1040, !dbg !103
  %1042 = select i1 %1041, float %1035, float %1038, !dbg !104
  %1043 = bitcast float %1042 to i32, !dbg !99
  %1044 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1043, i32 2, i32 31), !dbg !99
  %1045 = bitcast i32 %1044 to float, !dbg !99
  %1046 = fcmp ogt float %1042, %1045, !dbg !101
  %1047 = fcmp uno float %1042, 0.000000e+00, !dbg !102
  %1048 = or i1 %1046, %1047, !dbg !103
  %1049 = select i1 %1048, float %1042, float %1045, !dbg !104
  %1050 = bitcast float %1049 to i32, !dbg !99
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1050, i32 1, i32 31), !dbg !99
  %1052 = bitcast i32 %1051 to float, !dbg !99
  %1053 = fcmp ogt float %1049, %1052, !dbg !101
  %1054 = fcmp uno float %1049, 0.000000e+00, !dbg !102
  %1055 = or i1 %1053, %1054, !dbg !103
  %1056 = select i1 %953, i32 %948, i32 %949, !dbg !104
  %1057 = insertelement <1 x i32> poison, i32 %1056, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %836, <1 x i32> %1057, i1 %404) #5, !dbg !99
  %1058 = select i1 %987, i32 %982, i32 %983, !dbg !104
  %1059 = insertelement <1 x i32> poison, i32 %1058, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %1059, i1 %404) #5, !dbg !99
  %1060 = select i1 %1021, i32 %1016, i32 %1017, !dbg !104
  %1061 = insertelement <1 x i32> poison, i32 %1060, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %1061, i1 %404) #5, !dbg !99
  %1062 = select i1 %1055, i32 %1050, i32 %1051, !dbg !104
  %1063 = insertelement <1 x i32> poison, i32 %1062, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %1063, i1 %404) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1064 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %851) #5, !dbg !99
  %1065 = bitcast i32 %1064 to float, !dbg !99
  %1066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1064, i32 8, i32 31), !dbg !99
  %1067 = bitcast i32 %1066 to float, !dbg !99
  %1068 = fcmp ogt float %1065, %1067, !dbg !101
  %1069 = fcmp uno float %1065, 0.000000e+00, !dbg !102
  %1070 = or i1 %1069, %1068, !dbg !103
  %1071 = select i1 %1070, float %1065, float %1067, !dbg !104
  %1072 = bitcast float %1071 to i32, !dbg !99
  %1073 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1072, i32 4, i32 31), !dbg !99
  %1074 = bitcast i32 %1073 to float, !dbg !99
  %1075 = fcmp ogt float %1071, %1074, !dbg !101
  %1076 = fcmp uno float %1071, 0.000000e+00, !dbg !102
  %1077 = or i1 %1075, %1076, !dbg !103
  %1078 = select i1 %1077, float %1071, float %1074, !dbg !104
  %1079 = bitcast float %1078 to i32, !dbg !99
  %1080 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1079, i32 2, i32 31), !dbg !99
  %1081 = bitcast i32 %1080 to float, !dbg !99
  %1082 = fcmp ogt float %1078, %1081, !dbg !101
  %1083 = fcmp uno float %1078, 0.000000e+00, !dbg !102
  %1084 = or i1 %1082, %1083, !dbg !103
  %1085 = select i1 %1084, float %1078, float %1081, !dbg !104
  %1086 = bitcast float %1085 to i32, !dbg !99
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 1, i32 31), !dbg !99
  %1088 = bitcast i32 %1087 to float, !dbg !99
  %1089 = fcmp ogt float %1085, %1088, !dbg !101
  %1090 = fcmp uno float %1085, 0.000000e+00, !dbg !102
  %1091 = or i1 %1089, %1090, !dbg !103
  %1092 = select i1 %1091, i32 %1086, i32 %1087, !dbg !104
  %1093 = insertelement <1 x i32> poison, i32 %1092, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %1093, i1 %882) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1094 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %1095 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !99
  %1096 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !99
  %1097 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %1098 = bitcast float %1094 to i32, !dbg !105
  %1099 = bitcast float %1095 to i32, !dbg !105
  %1100 = bitcast float %1096 to i32, !dbg !105
  %1101 = bitcast float %1097 to i32, !dbg !105
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1098, i32 %1099, i32 %1100, i32 %1101, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %1102 = load float, ptr addrspace(3) %893, align 4, !dbg !105
  %1103 = sext i32 %212 to i64, !dbg !106
  %1104 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1103, !dbg !106
  %1105 = fptrunc float %894 to bfloat, !dbg !98
  %1106 = and i32 %21, 508, !dbg !98
  %1107 = icmp eq i32 %1106, 0, !dbg !98
  %1108 = bitcast bfloat %1105 to i16, !dbg !98
  %1109 = and i1 %1107, %213, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1108, ptr addrspace(1) %1104, i1 %1109) #5, !dbg !98
  %1110 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1103, !dbg !107
  %1111 = fptrunc float %1102 to bfloat, !dbg !105
  %1112 = bitcast bfloat %1111 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1112, ptr addrspace(1) %1110, i1 %1109) #5, !dbg !105
  %1113 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1103, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1108, ptr addrspace(1) %1113, i1 %1109) #5, !dbg !109
  %1114 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1103, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1112, ptr addrspace(1) %1114, i1 %1109) #5, !dbg !111
  %1115 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1103, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1108, ptr addrspace(1) %1115, i1 %1109) #5, !dbg !113
  %1116 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1103, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1112, ptr addrspace(1) %1116, i1 %1109) #5, !dbg !115
  %1117 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1103, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1108, ptr addrspace(1) %1117, i1 %1109) #5, !dbg !117
  %1118 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1103, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1112, ptr addrspace(1) %1118, i1 %1109) #5, !dbg !119
  %1119 = insertelement <4 x float> poison, float %888, i64 0, !dbg !120
  %1120 = insertelement <4 x float> %1119, float %887, i64 1, !dbg !120
  %1121 = insertelement <4 x float> %1120, float %886, i64 2, !dbg !120
  %1122 = insertelement <4 x float> %1121, float %885, i64 3, !dbg !120
  %1123 = fcmp oge <4 x float> %1122, zeroinitializer, !dbg !120
  %1124 = select <4 x i1> %1123, <4 x float> zeroinitializer, <4 x float> %1122, !dbg !120
  %1125 = fsub <4 x float> zeroinitializer, %1124, !dbg !122
  %1126 = insertelement <4 x float> poison, float %1097, i64 0, !dbg !123
  %1127 = insertelement <4 x float> %1126, float %1096, i64 1, !dbg !123
  %1128 = insertelement <4 x float> %1127, float %1095, i64 2, !dbg !123
  %1129 = insertelement <4 x float> %1128, float %1094, i64 3, !dbg !123
  %1130 = fcmp ole <4 x float> %1129, zeroinitializer, !dbg !123
  %1131 = select <4 x i1> %1130, <4 x float> zeroinitializer, <4 x float> %1129, !dbg !123
  %1132 = fcmp ogt <4 x float> %1125, %1131, !dbg !125
  %1133 = fcmp uno <4 x float> %1125, zeroinitializer, !dbg !127
  %1134 = or <4 x i1> %1133, %1132, !dbg !128
  %1135 = select <4 x i1> %1134, <4 x float> %1125, <4 x float> %1131, !dbg !129
  %1136 = fmul <4 x float> %1135, splat (float 0x3F80204080000000), !dbg !130
  %1137 = fcmp ogt <4 x float> %1136, splat (float 0x3EE4F8B580000000), !dbg !131
  %1138 = extractelement <4 x float> %1136, i64 3, !dbg !133
  %1139 = fcmp uno float %1138, 0.000000e+00, !dbg !134
  %1140 = extractelement <4 x float> %1136, i64 2, !dbg !133
  %1141 = fcmp uno float %1140, 0.000000e+00, !dbg !134
  %1142 = extractelement <4 x float> %1136, i64 1, !dbg !133
  %1143 = fcmp uno float %1142, 0.000000e+00, !dbg !134
  %1144 = extractelement <4 x float> %1136, i64 0, !dbg !133
  %1145 = fcmp uno float %1144, 0.000000e+00, !dbg !134
  %1146 = extractelement <4 x i1> %1137, i64 3, !dbg !135
  %1147 = or i1 %1146, %1139, !dbg !135
  %1148 = extractelement <4 x i1> %1137, i64 2, !dbg !135
  %1149 = or i1 %1148, %1141, !dbg !135
  %1150 = extractelement <4 x i1> %1137, i64 1, !dbg !135
  %1151 = or i1 %1150, %1143, !dbg !135
  %1152 = extractelement <4 x i1> %1137, i64 0, !dbg !135
  %1153 = or i1 %1152, %1145, !dbg !135
  %1154 = select i1 %1147, float %1138, float 0x3EE4F8B580000000, !dbg !133
  %1155 = select i1 %1149, float %1140, float 0x3EE4F8B580000000, !dbg !133
  %1156 = select i1 %1151, float %1142, float 0x3EE4F8B580000000, !dbg !133
  %1157 = select i1 %1153, float %1144, float 0x3EE4F8B580000000, !dbg !133
  %1158 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1154), !dbg !136
  %1159 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1155), !dbg !136
  %1160 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1156), !dbg !136
  %1161 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1157), !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1162 = bitcast float %1158 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1162, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1162, i1 true) #5, !dbg !137
  %1163 = bitcast float %1159 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1163, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1163, i1 true) #5, !dbg !137
  %1164 = bitcast float %1160 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1164, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1164, i1 true) #5, !dbg !137
  %1165 = bitcast float %1161 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1165, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1165, i1 true) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %.idx = shl nuw nsw i32 %22, 3, !dbg !137
  %1166 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !137
  %1167 = load float, ptr addrspace(3) %1166, align 8, !dbg !137
  %1168 = sext i32 %31 to i64, !dbg !138
  %1169 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1168, !dbg !138
  %1170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1169, i1 %25) #5, !dbg !139
  %1171 = extractvalue { i32, i32, i32, i32 } %1170, 0, !dbg !139
  %1172 = bitcast i32 %1171 to <2 x bfloat>, !dbg !139
  %1173 = extractvalue { i32, i32, i32, i32 } %1170, 1, !dbg !139
  %1174 = bitcast i32 %1173 to <2 x bfloat>, !dbg !139
  %1175 = extractvalue { i32, i32, i32, i32 } %1170, 2, !dbg !139
  %1176 = bitcast i32 %1175 to <2 x bfloat>, !dbg !139
  %1177 = extractvalue { i32, i32, i32, i32 } %1170, 3, !dbg !139
  %1178 = bitcast i32 %1177 to <2 x bfloat>, !dbg !139
  %1179 = extractelement <2 x bfloat> %1172, i64 0, !dbg !139
  %1180 = extractelement <2 x bfloat> %1172, i64 1, !dbg !139
  %1181 = extractelement <2 x bfloat> %1174, i64 0, !dbg !139
  %1182 = extractelement <2 x bfloat> %1174, i64 1, !dbg !139
  %1183 = extractelement <2 x bfloat> %1176, i64 0, !dbg !139
  %1184 = extractelement <2 x bfloat> %1176, i64 1, !dbg !139
  %1185 = extractelement <2 x bfloat> %1178, i64 0, !dbg !139
  %1186 = extractelement <2 x bfloat> %1178, i64 1, !dbg !139
  %1187 = fpext bfloat %1179 to float, !dbg !140
  %1188 = fpext bfloat %1180 to float, !dbg !140
  %1189 = fpext bfloat %1181 to float, !dbg !140
  %1190 = fpext bfloat %1182 to float, !dbg !140
  %1191 = fpext bfloat %1183 to float, !dbg !140
  %1192 = fpext bfloat %1184 to float, !dbg !140
  %1193 = fpext bfloat %1185 to float, !dbg !140
  %1194 = fpext bfloat %1186 to float, !dbg !140
  %1195 = fmul float %1167, %1187, !dbg !137
  %1196 = fmul float %1167, %1188, !dbg !137
  %1197 = fmul float %1167, %1189, !dbg !137
  %1198 = fmul float %1167, %1190, !dbg !137
  %1199 = fmul float %1167, %1191, !dbg !137
  %1200 = fmul float %1167, %1192, !dbg !137
  %1201 = fmul float %1167, %1193, !dbg !137
  %1202 = fmul float %1167, %1194, !dbg !137
  %1203 = tail call float @llvm.nvvm.round.f(float %1195) #5, !dbg !141
  %1204 = tail call float @llvm.nvvm.round.f(float %1196) #5, !dbg !141
  %1205 = tail call float @llvm.nvvm.round.f(float %1197) #5, !dbg !141
  %1206 = tail call float @llvm.nvvm.round.f(float %1198) #5, !dbg !141
  %1207 = tail call float @llvm.nvvm.round.f(float %1199) #5, !dbg !141
  %1208 = tail call float @llvm.nvvm.round.f(float %1200) #5, !dbg !141
  %1209 = tail call float @llvm.nvvm.round.f(float %1201) #5, !dbg !141
  %1210 = tail call float @llvm.nvvm.round.f(float %1202) #5, !dbg !141
  %1211 = insertelement <4 x float> poison, float %1203, i64 0, !dbg !142
  %1212 = insertelement <4 x float> %1211, float %1204, i64 1, !dbg !142
  %1213 = insertelement <4 x float> %1212, float %1205, i64 2, !dbg !142
  %1214 = insertelement <4 x float> %1213, float %1206, i64 3, !dbg !142
  %1215 = fcmp ogt <4 x float> %1214, splat (float -1.270000e+02), !dbg !142
  %1216 = fcmp uno <4 x float> %1214, zeroinitializer, !dbg !144
  %1217 = or <4 x i1> %1215, %1216, !dbg !145
  %1218 = select <4 x i1> %1217, <4 x float> %1214, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1219 = fcmp olt <4 x float> %1218, splat (float 1.270000e+02), !dbg !147
  %1220 = fcmp uno <4 x float> %1218, zeroinitializer, !dbg !149
  %1221 = or <4 x i1> %1219, %1220, !dbg !150
  %1222 = fptosi <4 x float> %1218 to <4 x i8>, !dbg !151
  %1223 = select <4 x i1> %1221, <4 x i8> %1222, <4 x i8> splat (i8 127), !dbg !152
  %1224 = insertelement <4 x float> poison, float %1207, i64 0, !dbg !142
  %1225 = insertelement <4 x float> %1224, float %1208, i64 1, !dbg !142
  %1226 = insertelement <4 x float> %1225, float %1209, i64 2, !dbg !142
  %1227 = insertelement <4 x float> %1226, float %1210, i64 3, !dbg !142
  %1228 = fcmp ogt <4 x float> %1227, splat (float -1.270000e+02), !dbg !142
  %1229 = fcmp uno <4 x float> %1227, zeroinitializer, !dbg !144
  %1230 = or <4 x i1> %1228, %1229, !dbg !145
  %1231 = select <4 x i1> %1230, <4 x float> %1227, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1232 = fcmp olt <4 x float> %1231, splat (float 1.270000e+02), !dbg !147
  %1233 = fcmp uno <4 x float> %1231, zeroinitializer, !dbg !149
  %1234 = or <4 x i1> %1232, %1233, !dbg !150
  %1235 = fptosi <4 x float> %1231 to <4 x i8>, !dbg !151
  %1236 = select <4 x i1> %1234, <4 x i8> %1235, <4 x i8> splat (i8 127), !dbg !152
  %1237 = getelementptr i8, ptr addrspace(1) %12, i64 %1168, !dbg !153
  %1238 = bitcast <4 x i8> %1223 to i32, !dbg !154
  %1239 = bitcast <4 x i8> %1236 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1238, i32 %1239, ptr addrspace(1) %1237, i1 %25) #5, !dbg !154
  %1240 = getelementptr i8, ptr addrspace(1) %13, i64 %1168, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1238, i32 %1239, ptr addrspace(1) %1240, i1 %25) #5, !dbg !156
  %1241 = getelementptr i8, ptr addrspace(1) %14, i64 %1168, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1238, i32 %1239, ptr addrspace(1) %1241, i1 %25) #5, !dbg !158
  %1242 = getelementptr i8, ptr addrspace(1) %15, i64 %1168, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1238, i32 %1239, ptr addrspace(1) %1242, i1 %25) #5, !dbg !160
  %1243 = add i32 %31, 1024, !dbg !161
  %1244 = sext i32 %1243 to i64, !dbg !138
  %1245 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1244, !dbg !138
  %1246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1245, i1 %25) #5, !dbg !139
  %1247 = extractvalue { i32, i32, i32, i32 } %1246, 0, !dbg !139
  %1248 = bitcast i32 %1247 to <2 x bfloat>, !dbg !139
  %1249 = extractvalue { i32, i32, i32, i32 } %1246, 1, !dbg !139
  %1250 = bitcast i32 %1249 to <2 x bfloat>, !dbg !139
  %1251 = extractvalue { i32, i32, i32, i32 } %1246, 2, !dbg !139
  %1252 = bitcast i32 %1251 to <2 x bfloat>, !dbg !139
  %1253 = extractvalue { i32, i32, i32, i32 } %1246, 3, !dbg !139
  %1254 = bitcast i32 %1253 to <2 x bfloat>, !dbg !139
  %1255 = extractelement <2 x bfloat> %1248, i64 0, !dbg !139
  %1256 = extractelement <2 x bfloat> %1248, i64 1, !dbg !139
  %1257 = extractelement <2 x bfloat> %1250, i64 0, !dbg !139
  %1258 = extractelement <2 x bfloat> %1250, i64 1, !dbg !139
  %1259 = extractelement <2 x bfloat> %1252, i64 0, !dbg !139
  %1260 = extractelement <2 x bfloat> %1252, i64 1, !dbg !139
  %1261 = extractelement <2 x bfloat> %1254, i64 0, !dbg !139
  %1262 = extractelement <2 x bfloat> %1254, i64 1, !dbg !139
  %1263 = fpext bfloat %1255 to float, !dbg !140
  %1264 = fpext bfloat %1256 to float, !dbg !140
  %1265 = fpext bfloat %1257 to float, !dbg !140
  %1266 = fpext bfloat %1258 to float, !dbg !140
  %1267 = fpext bfloat %1259 to float, !dbg !140
  %1268 = fpext bfloat %1260 to float, !dbg !140
  %1269 = fpext bfloat %1261 to float, !dbg !140
  %1270 = fpext bfloat %1262 to float, !dbg !140
  %1271 = fmul float %1167, %1263, !dbg !137
  %1272 = fmul float %1167, %1264, !dbg !137
  %1273 = fmul float %1167, %1265, !dbg !137
  %1274 = fmul float %1167, %1266, !dbg !137
  %1275 = fmul float %1167, %1267, !dbg !137
  %1276 = fmul float %1167, %1268, !dbg !137
  %1277 = fmul float %1167, %1269, !dbg !137
  %1278 = fmul float %1167, %1270, !dbg !137
  %1279 = tail call float @llvm.nvvm.round.f(float %1271) #5, !dbg !141
  %1280 = tail call float @llvm.nvvm.round.f(float %1272) #5, !dbg !141
  %1281 = tail call float @llvm.nvvm.round.f(float %1273) #5, !dbg !141
  %1282 = tail call float @llvm.nvvm.round.f(float %1274) #5, !dbg !141
  %1283 = tail call float @llvm.nvvm.round.f(float %1275) #5, !dbg !141
  %1284 = tail call float @llvm.nvvm.round.f(float %1276) #5, !dbg !141
  %1285 = tail call float @llvm.nvvm.round.f(float %1277) #5, !dbg !141
  %1286 = tail call float @llvm.nvvm.round.f(float %1278) #5, !dbg !141
  %1287 = insertelement <4 x float> poison, float %1279, i64 0, !dbg !142
  %1288 = insertelement <4 x float> %1287, float %1280, i64 1, !dbg !142
  %1289 = insertelement <4 x float> %1288, float %1281, i64 2, !dbg !142
  %1290 = insertelement <4 x float> %1289, float %1282, i64 3, !dbg !142
  %1291 = fcmp ogt <4 x float> %1290, splat (float -1.270000e+02), !dbg !142
  %1292 = fcmp uno <4 x float> %1290, zeroinitializer, !dbg !144
  %1293 = or <4 x i1> %1291, %1292, !dbg !145
  %1294 = select <4 x i1> %1293, <4 x float> %1290, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1295 = fcmp olt <4 x float> %1294, splat (float 1.270000e+02), !dbg !147
  %1296 = fcmp uno <4 x float> %1294, zeroinitializer, !dbg !149
  %1297 = or <4 x i1> %1295, %1296, !dbg !150
  %1298 = fptosi <4 x float> %1294 to <4 x i8>, !dbg !151
  %1299 = select <4 x i1> %1297, <4 x i8> %1298, <4 x i8> splat (i8 127), !dbg !152
  %1300 = insertelement <4 x float> poison, float %1283, i64 0, !dbg !142
  %1301 = insertelement <4 x float> %1300, float %1284, i64 1, !dbg !142
  %1302 = insertelement <4 x float> %1301, float %1285, i64 2, !dbg !142
  %1303 = insertelement <4 x float> %1302, float %1286, i64 3, !dbg !142
  %1304 = fcmp ogt <4 x float> %1303, splat (float -1.270000e+02), !dbg !142
  %1305 = fcmp uno <4 x float> %1303, zeroinitializer, !dbg !144
  %1306 = or <4 x i1> %1304, %1305, !dbg !145
  %1307 = select <4 x i1> %1306, <4 x float> %1303, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1308 = fcmp olt <4 x float> %1307, splat (float 1.270000e+02), !dbg !147
  %1309 = fcmp uno <4 x float> %1307, zeroinitializer, !dbg !149
  %1310 = or <4 x i1> %1308, %1309, !dbg !150
  %1311 = fptosi <4 x float> %1307 to <4 x i8>, !dbg !151
  %1312 = select <4 x i1> %1310, <4 x i8> %1311, <4 x i8> splat (i8 127), !dbg !152
  %1313 = getelementptr i8, ptr addrspace(1) %12, i64 %1244, !dbg !153
  %1314 = bitcast <4 x i8> %1299 to i32, !dbg !154
  %1315 = bitcast <4 x i8> %1312 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1314, i32 %1315, ptr addrspace(1) %1313, i1 %25) #5, !dbg !154
  %1316 = getelementptr i8, ptr addrspace(1) %13, i64 %1244, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1314, i32 %1315, ptr addrspace(1) %1316, i1 %25) #5, !dbg !156
  %1317 = getelementptr i8, ptr addrspace(1) %14, i64 %1244, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1314, i32 %1315, ptr addrspace(1) %1317, i1 %25) #5, !dbg !158
  %1318 = getelementptr i8, ptr addrspace(1) %15, i64 %1244, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1314, i32 %1315, ptr addrspace(1) %1318, i1 %25) #5, !dbg !160
  %1319 = add i32 %31, 2048, !dbg !161
  %1320 = sext i32 %1319 to i64, !dbg !138
  %1321 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1320, !dbg !138
  %1322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1321, i1 %25) #5, !dbg !139
  %1323 = extractvalue { i32, i32, i32, i32 } %1322, 0, !dbg !139
  %1324 = bitcast i32 %1323 to <2 x bfloat>, !dbg !139
  %1325 = extractvalue { i32, i32, i32, i32 } %1322, 1, !dbg !139
  %1326 = bitcast i32 %1325 to <2 x bfloat>, !dbg !139
  %1327 = extractvalue { i32, i32, i32, i32 } %1322, 2, !dbg !139
  %1328 = bitcast i32 %1327 to <2 x bfloat>, !dbg !139
  %1329 = extractvalue { i32, i32, i32, i32 } %1322, 3, !dbg !139
  %1330 = bitcast i32 %1329 to <2 x bfloat>, !dbg !139
  %1331 = extractelement <2 x bfloat> %1324, i64 0, !dbg !139
  %1332 = extractelement <2 x bfloat> %1324, i64 1, !dbg !139
  %1333 = extractelement <2 x bfloat> %1326, i64 0, !dbg !139
  %1334 = extractelement <2 x bfloat> %1326, i64 1, !dbg !139
  %1335 = extractelement <2 x bfloat> %1328, i64 0, !dbg !139
  %1336 = extractelement <2 x bfloat> %1328, i64 1, !dbg !139
  %1337 = extractelement <2 x bfloat> %1330, i64 0, !dbg !139
  %1338 = extractelement <2 x bfloat> %1330, i64 1, !dbg !139
  %1339 = fpext bfloat %1331 to float, !dbg !140
  %1340 = fpext bfloat %1332 to float, !dbg !140
  %1341 = fpext bfloat %1333 to float, !dbg !140
  %1342 = fpext bfloat %1334 to float, !dbg !140
  %1343 = fpext bfloat %1335 to float, !dbg !140
  %1344 = fpext bfloat %1336 to float, !dbg !140
  %1345 = fpext bfloat %1337 to float, !dbg !140
  %1346 = fpext bfloat %1338 to float, !dbg !140
  %1347 = fmul float %1167, %1339, !dbg !137
  %1348 = fmul float %1167, %1340, !dbg !137
  %1349 = fmul float %1167, %1341, !dbg !137
  %1350 = fmul float %1167, %1342, !dbg !137
  %1351 = fmul float %1167, %1343, !dbg !137
  %1352 = fmul float %1167, %1344, !dbg !137
  %1353 = fmul float %1167, %1345, !dbg !137
  %1354 = fmul float %1167, %1346, !dbg !137
  %1355 = tail call float @llvm.nvvm.round.f(float %1347) #5, !dbg !141
  %1356 = tail call float @llvm.nvvm.round.f(float %1348) #5, !dbg !141
  %1357 = tail call float @llvm.nvvm.round.f(float %1349) #5, !dbg !141
  %1358 = tail call float @llvm.nvvm.round.f(float %1350) #5, !dbg !141
  %1359 = tail call float @llvm.nvvm.round.f(float %1351) #5, !dbg !141
  %1360 = tail call float @llvm.nvvm.round.f(float %1352) #5, !dbg !141
  %1361 = tail call float @llvm.nvvm.round.f(float %1353) #5, !dbg !141
  %1362 = tail call float @llvm.nvvm.round.f(float %1354) #5, !dbg !141
  %1363 = insertelement <4 x float> poison, float %1355, i64 0, !dbg !142
  %1364 = insertelement <4 x float> %1363, float %1356, i64 1, !dbg !142
  %1365 = insertelement <4 x float> %1364, float %1357, i64 2, !dbg !142
  %1366 = insertelement <4 x float> %1365, float %1358, i64 3, !dbg !142
  %1367 = fcmp ogt <4 x float> %1366, splat (float -1.270000e+02), !dbg !142
  %1368 = fcmp uno <4 x float> %1366, zeroinitializer, !dbg !144
  %1369 = or <4 x i1> %1367, %1368, !dbg !145
  %1370 = select <4 x i1> %1369, <4 x float> %1366, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1371 = fcmp olt <4 x float> %1370, splat (float 1.270000e+02), !dbg !147
  %1372 = fcmp uno <4 x float> %1370, zeroinitializer, !dbg !149
  %1373 = or <4 x i1> %1371, %1372, !dbg !150
  %1374 = fptosi <4 x float> %1370 to <4 x i8>, !dbg !151
  %1375 = select <4 x i1> %1373, <4 x i8> %1374, <4 x i8> splat (i8 127), !dbg !152
  %1376 = insertelement <4 x float> poison, float %1359, i64 0, !dbg !142
  %1377 = insertelement <4 x float> %1376, float %1360, i64 1, !dbg !142
  %1378 = insertelement <4 x float> %1377, float %1361, i64 2, !dbg !142
  %1379 = insertelement <4 x float> %1378, float %1362, i64 3, !dbg !142
  %1380 = fcmp ogt <4 x float> %1379, splat (float -1.270000e+02), !dbg !142
  %1381 = fcmp uno <4 x float> %1379, zeroinitializer, !dbg !144
  %1382 = or <4 x i1> %1380, %1381, !dbg !145
  %1383 = select <4 x i1> %1382, <4 x float> %1379, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1384 = fcmp olt <4 x float> %1383, splat (float 1.270000e+02), !dbg !147
  %1385 = fcmp uno <4 x float> %1383, zeroinitializer, !dbg !149
  %1386 = or <4 x i1> %1384, %1385, !dbg !150
  %1387 = fptosi <4 x float> %1383 to <4 x i8>, !dbg !151
  %1388 = select <4 x i1> %1386, <4 x i8> %1387, <4 x i8> splat (i8 127), !dbg !152
  %1389 = getelementptr i8, ptr addrspace(1) %12, i64 %1320, !dbg !153
  %1390 = bitcast <4 x i8> %1375 to i32, !dbg !154
  %1391 = bitcast <4 x i8> %1388 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1390, i32 %1391, ptr addrspace(1) %1389, i1 %25) #5, !dbg !154
  %1392 = getelementptr i8, ptr addrspace(1) %13, i64 %1320, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1390, i32 %1391, ptr addrspace(1) %1392, i1 %25) #5, !dbg !156
  %1393 = getelementptr i8, ptr addrspace(1) %14, i64 %1320, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1390, i32 %1391, ptr addrspace(1) %1393, i1 %25) #5, !dbg !158
  %1394 = getelementptr i8, ptr addrspace(1) %15, i64 %1320, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1390, i32 %1391, ptr addrspace(1) %1394, i1 %25) #5, !dbg !160
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 51, scope: !6)
!61 = !DILocation(line: 59, column: 113, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 65, column: 24, scope: !6)
!72 = !DILocation(line: 71, column: 24, scope: !6)
!73 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !74)
!74 = !DILocation(line: 82, column: 47, scope: !6)
!75 = !DILocation(line: 61, column: 102, scope: !6)
!76 = !DILocation(line: 63, column: 95, scope: !6)
!77 = !DILocation(line: 74, column: 24, scope: !6)
!78 = !DILocation(line: 76, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 80, column: 24, scope: !6)
!82 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !74)
!83 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !74)
!84 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !74)
!85 = !DILocation(line: 86, column: 53, scope: !6)
!86 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 84, column: 47, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !87)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !87)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 95, column: 25, scope: !6)
!117 = !DILocation(line: 95, column: 37, scope: !6)
!118 = !DILocation(line: 96, column: 26, scope: !6)
!119 = !DILocation(line: 96, column: 38, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 106, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !124)
!124 = !DILocation(line: 107, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 108, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 110, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !132)
!132 = !DILocation(line: 113, column: 46, scope: !6)
!133 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !132)
!135 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !132)
!136 = !DILocation(line: 116, column: 25, scope: !6)
!137 = !DILocation(line: 119, column: 24, scope: !6)
!138 = !DILocation(line: 103, column: 36, scope: !6)
!139 = !DILocation(line: 103, column: 53, scope: !6)
!140 = !DILocation(line: 103, column: 115, scope: !6)
!141 = !DILocation(line: 120, column: 36, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !143)
!143 = !DILocation(line: 123, column: 46, scope: !6)
!144 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !143)
!145 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !143)
!146 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !143)
!147 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !148)
!148 = !DILocation(line: 125, column: 46, scope: !6)
!149 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !148)
!150 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !148)
!151 = !DILocation(line: 127, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !148)
!153 = !DILocation(line: 128, column: 30, scope: !6)
!154 = !DILocation(line: 128, column: 54, scope: !6)
!155 = !DILocation(line: 129, column: 30, scope: !6)
!156 = !DILocation(line: 129, column: 54, scope: !6)
!157 = !DILocation(line: 130, column: 30, scope: !6)
!158 = !DILocation(line: 130, column: 54, scope: !6)
!159 = !DILocation(line: 131, column: 30, scope: !6)
!160 = !DILocation(line: 131, column: 54, scope: !6)
!161 = !DILocation(line: 103, column: 43, scope: !6)
!162 = !DILocation(line: 97, column: 4, scope: !6)
