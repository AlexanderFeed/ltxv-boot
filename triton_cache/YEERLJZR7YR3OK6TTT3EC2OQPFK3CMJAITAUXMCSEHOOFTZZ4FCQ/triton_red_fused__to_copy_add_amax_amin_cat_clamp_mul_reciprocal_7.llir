; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 4112, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 4092, !dbg !11
  %15 = mul i32 %9, 3072, !dbg !12
  %16 = mul i32 %9, 12288, !dbg !13
  %17 = add i32 %16, -3072
  %18 = zext nneg i32 %14 to i64, !dbg !14
  br label %19, !dbg !14

19:                                               ; preds = %8, %__nv_tanhf.exit135
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit135 ]
  %20 = phi <4 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %230, %__nv_tanhf.exit135 ]
  %21 = phi <4 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %226, %__nv_tanhf.exit135 ]
  %22 = or disjoint i64 %indvars.iv, %18, !dbg !15
  %23 = icmp samesign ult i64 %22, 15360, !dbg !16
  %24 = icmp samesign ult i64 %22, 3072, !dbg !17
  %25 = trunc nuw nsw i64 %22 to i32, !dbg !18
  %26 = add i32 %15, %25, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = and i1 %10, %23, !dbg !20
  %30 = and i1 %10, %24, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %30) #5, !dbg !22
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !22
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !22
  %36 = shufflevector <2 x bfloat> %35, <2 x bfloat> %33, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !23
  %37 = fpext <4 x bfloat> %36 to <4 x float>, !dbg !23
  %38 = icmp samesign ugt i64 %22, 3071, !dbg !24
  %39 = add i32 %17, %25, !dbg !25
  %40 = sext i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = and i1 %38, %29, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %42) #5, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !28
  %49 = insertelement <4 x i32> %48, i32 %46, i64 1, !dbg !28
  %50 = insertelement <4 x i32> %49, i32 %45, i64 2, !dbg !28
  %51 = insertelement <4 x i32> %50, i32 %44, i64 3, !dbg !28
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !28
  %53 = fmul <4 x float> %52, splat (float 5.000000e-01), !dbg !29
  %54 = bitcast i32 %44 to float, !dbg !30
  %55 = fmul float %54, %54, !dbg !30
  %56 = bitcast i32 %45 to float, !dbg !30
  %57 = fmul float %56, %56, !dbg !30
  %58 = bitcast i32 %46 to float, !dbg !30
  %59 = fmul float %58, %58, !dbg !30
  %60 = bitcast i32 %47 to float, !dbg !30
  %61 = fmul float %60, %60, !dbg !30
  %62 = fmul float %55, %54, !dbg !31
  %63 = fmul float %57, %56, !dbg !31
  %64 = fmul float %59, %58, !dbg !31
  %65 = fmul float %61, %60, !dbg !31
  %66 = fmul float %62, 0x3FA6E4E260000000, !dbg !32
  %67 = fmul float %63, 0x3FA6E4E260000000, !dbg !32
  %68 = fmul float %64, 0x3FA6E4E260000000, !dbg !32
  %69 = fmul float %65, 0x3FA6E4E260000000, !dbg !32
  %70 = fadd float %66, %54, !dbg !33
  %71 = fadd float %67, %56, !dbg !33
  %72 = fadd float %68, %58, !dbg !33
  %73 = fadd float %69, %60, !dbg !33
  %74 = fmul float %70, 0x3FE9884540000000, !dbg !34
  %75 = fmul float %71, 0x3FE9884540000000, !dbg !34
  %76 = fmul float %72, 0x3FE9884540000000, !dbg !34
  %77 = fmul float %73, 0x3FE9884540000000, !dbg !34
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i60 = icmp eq i32 %78, 0, !dbg !35
  %79 = tail call float @llvm.nvvm.fabs.ftz.f(float %74) #5, !dbg !35
  %80 = tail call float @llvm.nvvm.fabs.f(float %74) #5, !dbg !35
  %.01.i61 = select i1 %.not.i60, float %80, float %79, !dbg !35
  %81 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !35
  br i1 %81, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !35

__internal_fmad.exit1.i62:                        ; preds = %19
  %82 = fmul float %.01.i61, 0x4007154760000000, !dbg !35
  %83 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %82) #5, !dbg !35
  %84 = fadd float %83, 1.000000e+00, !dbg !35
  %85 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %84) #6, !dbg !35, !srcloc !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i63 = icmp eq i32 %86, 0, !dbg !35
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %85, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %85, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i64 = select i1 %.not6.i63, float %88, float %87, !dbg !35
  %89 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !35
  %s.0.i65 = select i1 %89, float 1.000000e+00, float %.03.i64, !dbg !35
  %90 = bitcast float %s.0.i65 to i32, !dbg !35
  %91 = bitcast float %74 to i32, !dbg !35
  %92 = and i32 %91, -2147483648, !dbg !35
  %93 = or i32 %92, %90, !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  br label %__nv_tanhf.exit78, !dbg !35

__internal_fmad.exit3.i67:                        ; preds = %19
  %95 = fmul float %74, %74, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i68 = icmp eq i32 %96, 0, !dbg !35
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %95, float 0xBFAAC795C0000000) #5, !dbg !35
  %98 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %95, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i69 = select i1 %.not1.i68, float %98, float %97, !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i70 = icmp eq i32 %99, 0, !dbg !35
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %95, float 0x3FC10B2820000000) #5, !dbg !35
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %95, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i71 = select i1 %.not2.i70, float %101, float %100, !dbg !35
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i72 = icmp eq i32 %102, 0, !dbg !35
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %95, float 0xBFD5553DA0000000) #5, !dbg !35
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %95, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i73 = select i1 %.not3.i72, float %104, float %103, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i74 = icmp eq i32 %105, 0, !dbg !35
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %95, float 0.000000e+00) #5, !dbg !35
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %95, float 0.000000e+00) #5, !dbg !35
  %.04.i75 = select i1 %.not4.i74, float %107, float %106, !dbg !35
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i76 = icmp eq i32 %108, 0, !dbg !35
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %74, float %74) #5, !dbg !35
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %74, float %74) #5, !dbg !35
  %.02.i77 = select i1 %.not5.i76, float %110, float %109, !dbg !35
  br label %__nv_tanhf.exit78, !dbg !35

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %94, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !35
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i79 = icmp eq i32 %111, 0, !dbg !35
  %112 = tail call float @llvm.nvvm.fabs.ftz.f(float %75) #5, !dbg !35
  %113 = tail call float @llvm.nvvm.fabs.f(float %75) #5, !dbg !35
  %.01.i80 = select i1 %.not.i79, float %113, float %112, !dbg !35
  %114 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !35
  br i1 %114, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !35

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %115 = fmul float %.01.i80, 0x4007154760000000, !dbg !35
  %116 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %115) #5, !dbg !35
  %117 = fadd float %116, 1.000000e+00, !dbg !35
  %118 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %117) #6, !dbg !35, !srcloc !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i82 = icmp eq i32 %119, 0, !dbg !35
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %118, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %118, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i83 = select i1 %.not6.i82, float %121, float %120, !dbg !35
  %122 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !35
  %s.0.i84 = select i1 %122, float 1.000000e+00, float %.03.i83, !dbg !35
  %123 = bitcast float %s.0.i84 to i32, !dbg !35
  %124 = bitcast float %75 to i32, !dbg !35
  %125 = and i32 %124, -2147483648, !dbg !35
  %126 = or i32 %125, %123, !dbg !35
  %127 = bitcast i32 %126 to float, !dbg !35
  br label %__nv_tanhf.exit97, !dbg !35

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %128 = fmul float %75, %75, !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i87 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %128, float 0xBFAAC795C0000000) #5, !dbg !35
  %131 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %128, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i88 = select i1 %.not1.i87, float %131, float %130, !dbg !35
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i89 = icmp eq i32 %132, 0, !dbg !35
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %128, float 0x3FC10B2820000000) #5, !dbg !35
  %134 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %128, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i90 = select i1 %.not2.i89, float %134, float %133, !dbg !35
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i91 = icmp eq i32 %135, 0, !dbg !35
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %128, float 0xBFD5553DA0000000) #5, !dbg !35
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %128, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i92 = select i1 %.not3.i91, float %137, float %136, !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i93 = icmp eq i32 %138, 0, !dbg !35
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %128, float 0.000000e+00) #5, !dbg !35
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %128, float 0.000000e+00) #5, !dbg !35
  %.04.i94 = select i1 %.not4.i93, float %140, float %139, !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i95 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %75, float %75) #5, !dbg !35
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %75, float %75) #5, !dbg !35
  %.02.i96 = select i1 %.not5.i95, float %143, float %142, !dbg !35
  br label %__nv_tanhf.exit97, !dbg !35

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %127, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !35
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i98 = icmp eq i32 %144, 0, !dbg !35
  %145 = tail call float @llvm.nvvm.fabs.ftz.f(float %76) #5, !dbg !35
  %146 = tail call float @llvm.nvvm.fabs.f(float %76) #5, !dbg !35
  %.01.i99 = select i1 %.not.i98, float %146, float %145, !dbg !35
  %147 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !35
  br i1 %147, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !35

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %148 = fmul float %.01.i99, 0x4007154760000000, !dbg !35
  %149 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %148) #5, !dbg !35
  %150 = fadd float %149, 1.000000e+00, !dbg !35
  %151 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %150) #6, !dbg !35, !srcloc !36
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i101 = icmp eq i32 %152, 0, !dbg !35
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %151, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %151, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i102 = select i1 %.not6.i101, float %154, float %153, !dbg !35
  %155 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !35
  %s.0.i103 = select i1 %155, float 1.000000e+00, float %.03.i102, !dbg !35
  %156 = bitcast float %s.0.i103 to i32, !dbg !35
  %157 = bitcast float %76 to i32, !dbg !35
  %158 = and i32 %157, -2147483648, !dbg !35
  %159 = or i32 %158, %156, !dbg !35
  %160 = bitcast i32 %159 to float, !dbg !35
  br label %__nv_tanhf.exit116, !dbg !35

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %161 = fmul float %76, %76, !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i106 = icmp eq i32 %162, 0, !dbg !35
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %161, float 0xBFAAC795C0000000) #5, !dbg !35
  %164 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %161, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i107 = select i1 %.not1.i106, float %164, float %163, !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i108 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %161, float 0x3FC10B2820000000) #5, !dbg !35
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %161, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i109 = select i1 %.not2.i108, float %167, float %166, !dbg !35
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i110 = icmp eq i32 %168, 0, !dbg !35
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %161, float 0xBFD5553DA0000000) #5, !dbg !35
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %161, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i111 = select i1 %.not3.i110, float %170, float %169, !dbg !35
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i112 = icmp eq i32 %171, 0, !dbg !35
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %161, float 0.000000e+00) #5, !dbg !35
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %161, float 0.000000e+00) #5, !dbg !35
  %.04.i113 = select i1 %.not4.i112, float %173, float %172, !dbg !35
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i114 = icmp eq i32 %174, 0, !dbg !35
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %76, float %76) #5, !dbg !35
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %76, float %76) #5, !dbg !35
  %.02.i115 = select i1 %.not5.i114, float %176, float %175, !dbg !35
  br label %__nv_tanhf.exit116, !dbg !35

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %160, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i117 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call float @llvm.nvvm.fabs.ftz.f(float %77) #5, !dbg !35
  %179 = tail call float @llvm.nvvm.fabs.f(float %77) #5, !dbg !35
  %.01.i118 = select i1 %.not.i117, float %179, float %178, !dbg !35
  %180 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !35
  br i1 %180, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !35

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %181 = fmul float %.01.i118, 0x4007154760000000, !dbg !35
  %182 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %181) #5, !dbg !35
  %183 = fadd float %182, 1.000000e+00, !dbg !35
  %184 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %183) #6, !dbg !35, !srcloc !36
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i120 = icmp eq i32 %185, 0, !dbg !35
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %184, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %187 = tail call float @llvm.nvvm.fma.rn.f(float %184, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i121 = select i1 %.not6.i120, float %187, float %186, !dbg !35
  %188 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !35
  %s.0.i122 = select i1 %188, float 1.000000e+00, float %.03.i121, !dbg !35
  %189 = bitcast float %s.0.i122 to i32, !dbg !35
  %190 = bitcast float %77 to i32, !dbg !35
  %191 = and i32 %190, -2147483648, !dbg !35
  %192 = or i32 %191, %189, !dbg !35
  %193 = bitcast i32 %192 to float, !dbg !35
  br label %__nv_tanhf.exit135, !dbg !35

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %194 = fmul float %77, %77, !dbg !35
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i125 = icmp eq i32 %195, 0, !dbg !35
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %194, float 0xBFAAC795C0000000) #5, !dbg !35
  %197 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %194, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i126 = select i1 %.not1.i125, float %197, float %196, !dbg !35
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i127 = icmp eq i32 %198, 0, !dbg !35
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %194, float 0x3FC10B2820000000) #5, !dbg !35
  %200 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %194, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i128 = select i1 %.not2.i127, float %200, float %199, !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i129 = icmp eq i32 %201, 0, !dbg !35
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %194, float 0xBFD5553DA0000000) #5, !dbg !35
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %194, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i130 = select i1 %.not3.i129, float %203, float %202, !dbg !35
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i131 = icmp eq i32 %204, 0, !dbg !35
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %194, float 0.000000e+00) #5, !dbg !35
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %194, float 0.000000e+00) #5, !dbg !35
  %.04.i132 = select i1 %.not4.i131, float %206, float %205, !dbg !35
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i133 = icmp eq i32 %207, 0, !dbg !35
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %77, float %77) #5, !dbg !35
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %77, float %77) #5, !dbg !35
  %.02.i134 = select i1 %.not5.i133, float %209, float %208, !dbg !35
  br label %__nv_tanhf.exit135, !dbg !35

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %193, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !35
  %210 = insertelement <4 x float> poison, float %s.1.i123, i64 0, !dbg !37
  %211 = insertelement <4 x float> %210, float %s.1.i104, i64 1, !dbg !37
  %212 = insertelement <4 x float> %211, float %s.1.i85, i64 2, !dbg !37
  %213 = insertelement <4 x float> %212, float %s.1.i66, i64 3, !dbg !37
  %214 = fadd <4 x float> %213, splat (float 1.000000e+00), !dbg !37
  %215 = fcmp uno <4 x float> %21, zeroinitializer, !dbg !38
  %216 = fcmp uno <4 x float> %20, zeroinitializer, !dbg !42
  %217 = fmul <4 x float> %53, %214, !dbg !44
  %218 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !45
  %219 = shufflevector <4 x i1> %218, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !45
  %220 = select <4 x i1> %219, <4 x float> %37, <4 x float> %217, !dbg !45
  %221 = fcmp olt <4 x float> %21, %220, !dbg !46
  %222 = or <4 x i1> %215, %221, !dbg !47
  %223 = select <4 x i1> %222, <4 x float> %21, <4 x float> %220, !dbg !48
  %224 = insertelement <4 x i1> poison, i1 %29, i64 0, !dbg !49
  %225 = shufflevector <4 x i1> %224, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !49
  %226 = select <4 x i1> %225, <4 x float> %223, <4 x float> %21, !dbg !49
  %227 = fcmp ogt <4 x float> %20, %220, !dbg !50
  %228 = or <4 x i1> %216, %227, !dbg !51
  %229 = select <4 x i1> %228, <4 x float> %20, <4 x float> %220, !dbg !52
  %230 = select <4 x i1> %225, <4 x float> %229, <4 x float> %20, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4096, !dbg !14
  %231 = icmp samesign ult i64 %indvars.iv, 11264, !dbg !14
  br i1 %231, label %19, label %232, !dbg !14

232:                                              ; preds = %__nv_tanhf.exit135
  %233 = lshr i32 %11, 5, !dbg !11
  %234 = extractelement <4 x float> %226, i64 2, !dbg !54
  %235 = extractelement <4 x float> %226, i64 3, !dbg !54
  %236 = fcmp olt float %235, %234, !dbg !54
  %237 = fcmp uno float %235, 0.000000e+00, !dbg !57
  %238 = or i1 %236, %237, !dbg !58
  %239 = select i1 %238, float %235, float %234, !dbg !59
  %240 = extractelement <4 x float> %226, i64 1, !dbg !54
  %241 = fcmp olt float %239, %240, !dbg !54
  %242 = fcmp uno float %239, 0.000000e+00, !dbg !57
  %243 = or i1 %241, %242, !dbg !58
  %244 = select i1 %243, float %239, float %240, !dbg !59
  %245 = extractelement <4 x float> %226, i64 0, !dbg !54
  %246 = fcmp olt float %244, %245, !dbg !54
  %247 = fcmp uno float %244, 0.000000e+00, !dbg !57
  %248 = or i1 %246, %247, !dbg !58
  %249 = select i1 %248, float %244, float %245, !dbg !59
  %250 = bitcast float %249 to i32, !dbg !60
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !60
  %252 = bitcast i32 %251 to float, !dbg !60
  %253 = fcmp olt float %249, %252, !dbg !54
  %254 = fcmp uno float %249, 0.000000e+00, !dbg !57
  %255 = or i1 %254, %253, !dbg !58
  %256 = select i1 %255, float %249, float %252, !dbg !59
  %257 = bitcast float %256 to i32, !dbg !60
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !60
  %259 = bitcast i32 %258 to float, !dbg !60
  %260 = fcmp olt float %256, %259, !dbg !54
  %261 = fcmp uno float %256, 0.000000e+00, !dbg !57
  %262 = or i1 %260, %261, !dbg !58
  %263 = select i1 %262, float %256, float %259, !dbg !59
  %264 = bitcast float %263 to i32, !dbg !60
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !60
  %266 = bitcast i32 %265 to float, !dbg !60
  %267 = fcmp olt float %263, %266, !dbg !54
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !57
  %269 = or i1 %267, %268, !dbg !58
  %270 = select i1 %269, float %263, float %266, !dbg !59
  %271 = bitcast float %270 to i32, !dbg !60
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !60
  %273 = bitcast i32 %272 to float, !dbg !60
  %274 = fcmp olt float %270, %273, !dbg !54
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !57
  %276 = or i1 %274, %275, !dbg !58
  %277 = select i1 %276, float %270, float %273, !dbg !59
  %278 = bitcast float %277 to i32, !dbg !60
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !60
  %280 = bitcast i32 %279 to float, !dbg !60
  %281 = fcmp olt float %277, %280, !dbg !54
  %282 = fcmp uno float %277, 0.000000e+00, !dbg !57
  %283 = or i1 %281, %282, !dbg !58
  %284 = and i32 %233, 31, !dbg !60
  %285 = icmp eq i32 %12, 0, !dbg !60
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !60
  %287 = select i1 %283, i32 %278, i32 %279, !dbg !59
  %288 = insertelement <1 x i32> poison, i32 %287, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %288, i1 %285) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %289 = icmp slt i32 %11, 32, !dbg !60
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %291 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %290, i1 %289) #5, !dbg !60
  %292 = bitcast i32 %291 to float, !dbg !60
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 16, i32 31), !dbg !60
  %294 = bitcast i32 %293 to float, !dbg !60
  %295 = fcmp olt float %292, %294, !dbg !54
  %296 = fcmp uno float %292, 0.000000e+00, !dbg !57
  %297 = or i1 %296, %295, !dbg !58
  %298 = select i1 %297, float %292, float %294, !dbg !59
  %299 = bitcast float %298 to i32, !dbg !60
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 8, i32 31), !dbg !60
  %301 = bitcast i32 %300 to float, !dbg !60
  %302 = fcmp olt float %298, %301, !dbg !54
  %303 = fcmp uno float %298, 0.000000e+00, !dbg !57
  %304 = or i1 %302, %303, !dbg !58
  %305 = select i1 %304, float %298, float %301, !dbg !59
  %306 = bitcast float %305 to i32, !dbg !60
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !60
  %308 = bitcast i32 %307 to float, !dbg !60
  %309 = fcmp olt float %305, %308, !dbg !54
  %310 = fcmp uno float %305, 0.000000e+00, !dbg !57
  %311 = or i1 %309, %310, !dbg !58
  %312 = select i1 %311, float %305, float %308, !dbg !59
  %313 = bitcast float %312 to i32, !dbg !60
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !60
  %315 = bitcast i32 %314 to float, !dbg !60
  %316 = fcmp olt float %312, %315, !dbg !54
  %317 = fcmp uno float %312, 0.000000e+00, !dbg !57
  %318 = or i1 %316, %317, !dbg !58
  %319 = select i1 %318, float %312, float %315, !dbg !59
  %320 = bitcast float %319 to i32, !dbg !60
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 1, i32 31), !dbg !60
  %322 = bitcast i32 %321 to float, !dbg !60
  %323 = fcmp olt float %319, %322, !dbg !54
  %324 = fcmp uno float %319, 0.000000e+00, !dbg !57
  %325 = or i1 %323, %324, !dbg !58
  %326 = and i1 %289, %285, !dbg !60
  %327 = select i1 %325, i32 %320, i32 %321, !dbg !59
  %328 = insertelement <1 x i32> poison, i32 %327, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %328, i1 %326) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %329 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %330 = extractelement <4 x float> %230, i64 2, !dbg !63
  %331 = extractelement <4 x float> %230, i64 3, !dbg !63
  %332 = fcmp ogt float %331, %330, !dbg !63
  %333 = fcmp uno float %331, 0.000000e+00, !dbg !64
  %334 = or i1 %332, %333, !dbg !65
  %335 = select i1 %334, float %331, float %330, !dbg !66
  %336 = extractelement <4 x float> %230, i64 1, !dbg !63
  %337 = fcmp ogt float %335, %336, !dbg !63
  %338 = fcmp uno float %335, 0.000000e+00, !dbg !64
  %339 = or i1 %337, %338, !dbg !65
  %340 = select i1 %339, float %335, float %336, !dbg !66
  %341 = extractelement <4 x float> %230, i64 0, !dbg !63
  %342 = fcmp ogt float %340, %341, !dbg !63
  %343 = fcmp uno float %340, 0.000000e+00, !dbg !64
  %344 = or i1 %342, %343, !dbg !65
  %345 = select i1 %344, float %340, float %341, !dbg !66
  %346 = bitcast float %345 to i32, !dbg !61
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 16, i32 31), !dbg !61
  %348 = bitcast i32 %347 to float, !dbg !61
  %349 = fcmp ogt float %345, %348, !dbg !63
  %350 = fcmp uno float %345, 0.000000e+00, !dbg !64
  %351 = or i1 %350, %349, !dbg !65
  %352 = select i1 %351, float %345, float %348, !dbg !66
  %353 = bitcast float %352 to i32, !dbg !61
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !61
  %355 = bitcast i32 %354 to float, !dbg !61
  %356 = fcmp ogt float %352, %355, !dbg !63
  %357 = fcmp uno float %352, 0.000000e+00, !dbg !64
  %358 = or i1 %356, %357, !dbg !65
  %359 = select i1 %358, float %352, float %355, !dbg !66
  %360 = bitcast float %359 to i32, !dbg !61
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !61
  %362 = bitcast i32 %361 to float, !dbg !61
  %363 = fcmp ogt float %359, %362, !dbg !63
  %364 = fcmp uno float %359, 0.000000e+00, !dbg !64
  %365 = or i1 %363, %364, !dbg !65
  %366 = select i1 %365, float %359, float %362, !dbg !66
  %367 = bitcast float %366 to i32, !dbg !61
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !61
  %369 = bitcast i32 %368 to float, !dbg !61
  %370 = fcmp ogt float %366, %369, !dbg !63
  %371 = fcmp uno float %366, 0.000000e+00, !dbg !64
  %372 = or i1 %370, %371, !dbg !65
  %373 = select i1 %372, float %366, float %369, !dbg !66
  %374 = bitcast float %373 to i32, !dbg !61
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !61
  %376 = bitcast i32 %375 to float, !dbg !61
  %377 = fcmp ogt float %373, %376, !dbg !63
  %378 = fcmp uno float %373, 0.000000e+00, !dbg !64
  %379 = or i1 %377, %378, !dbg !65
  %380 = select i1 %379, i32 %374, i32 %375, !dbg !66
  %381 = insertelement <1 x i32> poison, i32 %380, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %381, i1 %285) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %382 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %290, i1 %289) #5, !dbg !61
  %383 = bitcast i32 %382 to float, !dbg !61
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 16, i32 31), !dbg !61
  %385 = bitcast i32 %384 to float, !dbg !61
  %386 = fcmp ogt float %383, %385, !dbg !63
  %387 = fcmp uno float %383, 0.000000e+00, !dbg !64
  %388 = or i1 %387, %386, !dbg !65
  %389 = select i1 %388, float %383, float %385, !dbg !66
  %390 = bitcast float %389 to i32, !dbg !61
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 8, i32 31), !dbg !61
  %392 = bitcast i32 %391 to float, !dbg !61
  %393 = fcmp ogt float %389, %392, !dbg !63
  %394 = fcmp uno float %389, 0.000000e+00, !dbg !64
  %395 = or i1 %393, %394, !dbg !65
  %396 = select i1 %395, float %389, float %392, !dbg !66
  %397 = bitcast float %396 to i32, !dbg !61
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 4, i32 31), !dbg !61
  %399 = bitcast i32 %398 to float, !dbg !61
  %400 = fcmp ogt float %396, %399, !dbg !63
  %401 = fcmp uno float %396, 0.000000e+00, !dbg !64
  %402 = or i1 %400, %401, !dbg !65
  %403 = select i1 %402, float %396, float %399, !dbg !66
  %404 = bitcast float %403 to i32, !dbg !61
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !61
  %406 = bitcast i32 %405 to float, !dbg !61
  %407 = fcmp ogt float %403, %406, !dbg !63
  %408 = fcmp uno float %403, 0.000000e+00, !dbg !64
  %409 = or i1 %407, %408, !dbg !65
  %410 = select i1 %409, float %403, float %406, !dbg !66
  %411 = bitcast float %410 to i32, !dbg !61
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !61
  %413 = bitcast i32 %412 to float, !dbg !61
  %414 = fcmp ogt float %410, %413, !dbg !63
  %415 = fcmp uno float %410, 0.000000e+00, !dbg !64
  %416 = or i1 %414, %415, !dbg !65
  %417 = select i1 %416, i32 %411, i32 %412, !dbg !66
  %418 = insertelement <1 x i32> poison, i32 %417, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %418, i1 %326) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %419 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %420 = sext i32 %9 to i64, !dbg !67
  %421 = getelementptr bfloat, ptr addrspace(1) %2, i64 %420, !dbg !67
  %422 = fptrunc float %329 to bfloat, !dbg !68
  %423 = and i32 %11, 1023, !dbg !68
  %424 = icmp eq i32 %423, 0, !dbg !68
  %425 = bitcast bfloat %422 to i16, !dbg !68
  %426 = and i1 %10, %424, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %425, ptr addrspace(1) %421, i1 %426) #5, !dbg !68
  %427 = getelementptr bfloat, ptr addrspace(1) %3, i64 %420, !dbg !69
  %428 = fptrunc float %419 to bfloat, !dbg !70
  %429 = bitcast bfloat %428 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %429, ptr addrspace(1) %427, i1 %426) #5, !dbg !70
  %.inv = fcmp oge float %329, 0.000000e+00, !dbg !71
  %430 = select i1 %.inv, float 0.000000e+00, float %329, !dbg !71
  %431 = fsub float 0.000000e+00, %430, !dbg !73
  %.inv2 = fcmp ole float %419, 0.000000e+00, !dbg !74
  %432 = select i1 %.inv2, float 0.000000e+00, float %419, !dbg !74
  %433 = fcmp ogt float %431, %432, !dbg !76
  %434 = fcmp uno float %431, 0.000000e+00, !dbg !78
  %435 = or i1 %434, %433, !dbg !79
  %436 = select i1 %435, float %431, float %432, !dbg !80
  %437 = fmul float %436, 0x3F80204080000000, !dbg !81
  %438 = fcmp ogt float %437, 0x3EE4F8B580000000, !dbg !82
  %439 = fcmp uno float %437, 0.000000e+00, !dbg !84
  %440 = or i1 %438, %439, !dbg !85
  %441 = select i1 %440, float %437, float 0x3EE4F8B580000000, !dbg !86
  %442 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %441), !dbg !87
  %443 = mul i32 %9, 15360, !dbg !88
  br label %444, !dbg !89

444:                                              ; preds = %232, %__nv_tanhf.exit59
  %indvars.iv144 = phi i64 [ 0, %232 ], [ %indvars.iv.next145, %__nv_tanhf.exit59 ]
  %445 = or disjoint i64 %indvars.iv144, %18, !dbg !90
  %446 = icmp samesign ult i64 %445, 15360, !dbg !91
  %447 = icmp samesign ult i64 %445, 3072, !dbg !92
  %448 = trunc nuw nsw i64 %445 to i32, !dbg !93
  %449 = add i32 %15, %448, !dbg !93
  %450 = sext i32 %449 to i64, !dbg !94
  %451 = getelementptr bfloat, ptr addrspace(1) %0, i64 %450, !dbg !94
  %452 = and i1 %10, %446, !dbg !95
  %453 = and i1 %10, %447, !dbg !96
  %454 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %451, i1 %453) #5, !dbg !97
  %455 = extractvalue { i32, i32 } %454, 0, !dbg !97
  %456 = bitcast i32 %455 to <2 x bfloat>, !dbg !97
  %457 = extractvalue { i32, i32 } %454, 1, !dbg !97
  %458 = bitcast i32 %457 to <2 x bfloat>, !dbg !97
  %459 = extractelement <2 x bfloat> %456, i64 0, !dbg !97
  %460 = extractelement <2 x bfloat> %456, i64 1, !dbg !97
  %461 = extractelement <2 x bfloat> %458, i64 0, !dbg !97
  %462 = extractelement <2 x bfloat> %458, i64 1, !dbg !97
  %463 = fpext bfloat %459 to float, !dbg !98
  %464 = fpext bfloat %460 to float, !dbg !98
  %465 = fpext bfloat %461 to float, !dbg !98
  %466 = fpext bfloat %462 to float, !dbg !98
  %467 = icmp samesign ugt i64 %445, 3071, !dbg !99
  %468 = add i32 %17, %448, !dbg !100
  %469 = sext i32 %468 to i64, !dbg !101
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !101
  %471 = and i1 %467, %452, !dbg !102
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i1 %471) #5, !dbg !103
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !103
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !103
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !103
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !103
  %477 = bitcast i32 %473 to float, !dbg !103
  %478 = bitcast i32 %474 to float, !dbg !103
  %479 = bitcast i32 %475 to float, !dbg !103
  %480 = bitcast i32 %476 to float, !dbg !103
  %481 = fmul float %477, 5.000000e-01, !dbg !104
  %482 = fmul float %478, 5.000000e-01, !dbg !104
  %483 = fmul float %479, 5.000000e-01, !dbg !104
  %484 = fmul float %480, 5.000000e-01, !dbg !104
  %485 = fmul float %477, %477, !dbg !105
  %486 = fmul float %478, %478, !dbg !105
  %487 = fmul float %479, %479, !dbg !105
  %488 = fmul float %480, %480, !dbg !105
  %489 = fmul float %485, %477, !dbg !106
  %490 = fmul float %486, %478, !dbg !106
  %491 = fmul float %487, %479, !dbg !106
  %492 = fmul float %488, %480, !dbg !106
  %493 = fmul float %489, 0x3FA6E4E260000000, !dbg !107
  %494 = fmul float %490, 0x3FA6E4E260000000, !dbg !107
  %495 = fmul float %491, 0x3FA6E4E260000000, !dbg !107
  %496 = fmul float %492, 0x3FA6E4E260000000, !dbg !107
  %497 = fadd float %493, %477, !dbg !108
  %498 = fadd float %494, %478, !dbg !108
  %499 = fadd float %495, %479, !dbg !108
  %500 = fadd float %496, %480, !dbg !108
  %501 = fmul float %497, 0x3FE9884540000000, !dbg !109
  %502 = fmul float %498, 0x3FE9884540000000, !dbg !109
  %503 = fmul float %499, 0x3FE9884540000000, !dbg !109
  %504 = fmul float %500, 0x3FE9884540000000, !dbg !109
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i = icmp eq i32 %505, 0, !dbg !110
  %506 = tail call float @llvm.nvvm.fabs.ftz.f(float %501) #5, !dbg !110
  %507 = tail call float @llvm.nvvm.fabs.f(float %501) #5, !dbg !110
  %.01.i = select i1 %.not.i, float %507, float %506, !dbg !110
  %508 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !110
  br i1 %508, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !110

__internal_fmad.exit1.i:                          ; preds = %444
  %509 = fmul float %.01.i, 0x4007154760000000, !dbg !110
  %510 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %509) #5, !dbg !110
  %511 = fadd float %510, 1.000000e+00, !dbg !110
  %512 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %511) #6, !dbg !110, !srcloc !36
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i = icmp eq i32 %513, 0, !dbg !110
  %514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %512, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %515 = tail call float @llvm.nvvm.fma.rn.f(float %512, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i = select i1 %.not6.i, float %515, float %514, !dbg !110
  %516 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !110
  %s.0.i = select i1 %516, float 1.000000e+00, float %.03.i, !dbg !110
  %517 = bitcast float %s.0.i to i32, !dbg !110
  %518 = bitcast float %501 to i32, !dbg !110
  %519 = and i32 %518, -2147483648, !dbg !110
  %520 = or i32 %519, %517, !dbg !110
  %521 = bitcast i32 %520 to float, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__internal_fmad.exit3.i:                          ; preds = %444
  %522 = fmul float %501, %501, !dbg !110
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i = icmp eq i32 %523, 0, !dbg !110
  %524 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %522, float 0xBFAAC795C0000000) #5, !dbg !110
  %525 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %522, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i = select i1 %.not1.i, float %525, float %524, !dbg !110
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i = icmp eq i32 %526, 0, !dbg !110
  %527 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %522, float 0x3FC10B2820000000) #5, !dbg !110
  %528 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %522, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i = select i1 %.not2.i, float %528, float %527, !dbg !110
  %529 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i = icmp eq i32 %529, 0, !dbg !110
  %530 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %522, float 0xBFD5553DA0000000) #5, !dbg !110
  %531 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %522, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i = select i1 %.not3.i, float %531, float %530, !dbg !110
  %532 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i = icmp eq i32 %532, 0, !dbg !110
  %533 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %522, float 0.000000e+00) #5, !dbg !110
  %534 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %522, float 0.000000e+00) #5, !dbg !110
  %.04.i = select i1 %.not4.i, float %534, float %533, !dbg !110
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i = icmp eq i32 %535, 0, !dbg !110
  %536 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %501, float %501) #5, !dbg !110
  %537 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %501, float %501) #5, !dbg !110
  %.02.i = select i1 %.not5.i, float %537, float %536, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %521, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !110
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i3 = icmp eq i32 %538, 0, !dbg !110
  %539 = tail call float @llvm.nvvm.fabs.ftz.f(float %502) #5, !dbg !110
  %540 = tail call float @llvm.nvvm.fabs.f(float %502) #5, !dbg !110
  %.01.i4 = select i1 %.not.i3, float %540, float %539, !dbg !110
  %541 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !110
  br i1 %541, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !110

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %542 = fmul float %.01.i4, 0x4007154760000000, !dbg !110
  %543 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %542) #5, !dbg !110
  %544 = fadd float %543, 1.000000e+00, !dbg !110
  %545 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %544) #6, !dbg !110, !srcloc !36
  %546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i6 = icmp eq i32 %546, 0, !dbg !110
  %547 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %545, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %548 = tail call float @llvm.nvvm.fma.rn.f(float %545, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i7 = select i1 %.not6.i6, float %548, float %547, !dbg !110
  %549 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !110
  %s.0.i8 = select i1 %549, float 1.000000e+00, float %.03.i7, !dbg !110
  %550 = bitcast float %s.0.i8 to i32, !dbg !110
  %551 = bitcast float %502 to i32, !dbg !110
  %552 = and i32 %551, -2147483648, !dbg !110
  %553 = or i32 %552, %550, !dbg !110
  %554 = bitcast i32 %553 to float, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %555 = fmul float %502, %502, !dbg !110
  %556 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i11 = icmp eq i32 %556, 0, !dbg !110
  %557 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %555, float 0xBFAAC795C0000000) #5, !dbg !110
  %558 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %555, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i12 = select i1 %.not1.i11, float %558, float %557, !dbg !110
  %559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i13 = icmp eq i32 %559, 0, !dbg !110
  %560 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %555, float 0x3FC10B2820000000) #5, !dbg !110
  %561 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %555, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i14 = select i1 %.not2.i13, float %561, float %560, !dbg !110
  %562 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i15 = icmp eq i32 %562, 0, !dbg !110
  %563 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %555, float 0xBFD5553DA0000000) #5, !dbg !110
  %564 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %555, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i16 = select i1 %.not3.i15, float %564, float %563, !dbg !110
  %565 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i17 = icmp eq i32 %565, 0, !dbg !110
  %566 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %555, float 0.000000e+00) #5, !dbg !110
  %567 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %555, float 0.000000e+00) #5, !dbg !110
  %.04.i18 = select i1 %.not4.i17, float %567, float %566, !dbg !110
  %568 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i19 = icmp eq i32 %568, 0, !dbg !110
  %569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %502, float %502) #5, !dbg !110
  %570 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %502, float %502) #5, !dbg !110
  %.02.i20 = select i1 %.not5.i19, float %570, float %569, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %554, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !110
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i22 = icmp eq i32 %571, 0, !dbg !110
  %572 = tail call float @llvm.nvvm.fabs.ftz.f(float %503) #5, !dbg !110
  %573 = tail call float @llvm.nvvm.fabs.f(float %503) #5, !dbg !110
  %.01.i23 = select i1 %.not.i22, float %573, float %572, !dbg !110
  %574 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !110
  br i1 %574, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !110

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %575 = fmul float %.01.i23, 0x4007154760000000, !dbg !110
  %576 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %575) #5, !dbg !110
  %577 = fadd float %576, 1.000000e+00, !dbg !110
  %578 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %577) #6, !dbg !110, !srcloc !36
  %579 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i25 = icmp eq i32 %579, 0, !dbg !110
  %580 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %578, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %581 = tail call float @llvm.nvvm.fma.rn.f(float %578, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i26 = select i1 %.not6.i25, float %581, float %580, !dbg !110
  %582 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !110
  %s.0.i27 = select i1 %582, float 1.000000e+00, float %.03.i26, !dbg !110
  %583 = bitcast float %s.0.i27 to i32, !dbg !110
  %584 = bitcast float %503 to i32, !dbg !110
  %585 = and i32 %584, -2147483648, !dbg !110
  %586 = or i32 %585, %583, !dbg !110
  %587 = bitcast i32 %586 to float, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %588 = fmul float %503, %503, !dbg !110
  %589 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i30 = icmp eq i32 %589, 0, !dbg !110
  %590 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %588, float 0xBFAAC795C0000000) #5, !dbg !110
  %591 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %588, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i31 = select i1 %.not1.i30, float %591, float %590, !dbg !110
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i32 = icmp eq i32 %592, 0, !dbg !110
  %593 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %588, float 0x3FC10B2820000000) #5, !dbg !110
  %594 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %588, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i33 = select i1 %.not2.i32, float %594, float %593, !dbg !110
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i34 = icmp eq i32 %595, 0, !dbg !110
  %596 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %588, float 0xBFD5553DA0000000) #5, !dbg !110
  %597 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %588, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i35 = select i1 %.not3.i34, float %597, float %596, !dbg !110
  %598 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i36 = icmp eq i32 %598, 0, !dbg !110
  %599 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %588, float 0.000000e+00) #5, !dbg !110
  %600 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %588, float 0.000000e+00) #5, !dbg !110
  %.04.i37 = select i1 %.not4.i36, float %600, float %599, !dbg !110
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i38 = icmp eq i32 %601, 0, !dbg !110
  %602 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %503, float %503) #5, !dbg !110
  %603 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %503, float %503) #5, !dbg !110
  %.02.i39 = select i1 %.not5.i38, float %603, float %602, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %587, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !110
  %604 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i41 = icmp eq i32 %604, 0, !dbg !110
  %605 = tail call float @llvm.nvvm.fabs.ftz.f(float %504) #5, !dbg !110
  %606 = tail call float @llvm.nvvm.fabs.f(float %504) #5, !dbg !110
  %.01.i42 = select i1 %.not.i41, float %606, float %605, !dbg !110
  %607 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !110
  br i1 %607, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !110

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %608 = fmul float %.01.i42, 0x4007154760000000, !dbg !110
  %609 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %608) #5, !dbg !110
  %610 = fadd float %609, 1.000000e+00, !dbg !110
  %611 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %610) #6, !dbg !110, !srcloc !36
  %612 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i44 = icmp eq i32 %612, 0, !dbg !110
  %613 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %611, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %614 = tail call float @llvm.nvvm.fma.rn.f(float %611, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i45 = select i1 %.not6.i44, float %614, float %613, !dbg !110
  %615 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !110
  %s.0.i46 = select i1 %615, float 1.000000e+00, float %.03.i45, !dbg !110
  %616 = bitcast float %s.0.i46 to i32, !dbg !110
  %617 = bitcast float %504 to i32, !dbg !110
  %618 = and i32 %617, -2147483648, !dbg !110
  %619 = or i32 %618, %616, !dbg !110
  %620 = bitcast i32 %619 to float, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %621 = fmul float %504, %504, !dbg !110
  %622 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i49 = icmp eq i32 %622, 0, !dbg !110
  %623 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %621, float 0xBFAAC795C0000000) #5, !dbg !110
  %624 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %621, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i50 = select i1 %.not1.i49, float %624, float %623, !dbg !110
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i51 = icmp eq i32 %625, 0, !dbg !110
  %626 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %621, float 0x3FC10B2820000000) #5, !dbg !110
  %627 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %621, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i52 = select i1 %.not2.i51, float %627, float %626, !dbg !110
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i53 = icmp eq i32 %628, 0, !dbg !110
  %629 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %621, float 0xBFD5553DA0000000) #5, !dbg !110
  %630 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %621, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i54 = select i1 %.not3.i53, float %630, float %629, !dbg !110
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i55 = icmp eq i32 %631, 0, !dbg !110
  %632 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %621, float 0.000000e+00) #5, !dbg !110
  %633 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %621, float 0.000000e+00) #5, !dbg !110
  %.04.i56 = select i1 %.not4.i55, float %633, float %632, !dbg !110
  %634 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i57 = icmp eq i32 %634, 0, !dbg !110
  %635 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %504, float %504) #5, !dbg !110
  %636 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %504, float %504) #5, !dbg !110
  %.02.i58 = select i1 %.not5.i57, float %636, float %635, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %620, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !110
  %637 = fadd float %s.1.i, 1.000000e+00, !dbg !111
  %638 = fadd float %s.1.i9, 1.000000e+00, !dbg !111
  %639 = fadd float %s.1.i28, 1.000000e+00, !dbg !111
  %640 = fadd float %s.1.i47, 1.000000e+00, !dbg !111
  %641 = fmul float %481, %637, !dbg !112
  %642 = fmul float %482, %638, !dbg !112
  %643 = fmul float %483, %639, !dbg !112
  %644 = fmul float %484, %640, !dbg !112
  %645 = select i1 %447, float %463, float %641, !dbg !113
  %646 = select i1 %447, float %464, float %642, !dbg !113
  %647 = select i1 %447, float %465, float %643, !dbg !113
  %648 = select i1 %447, float %466, float %644, !dbg !113
  %649 = fmul float %442, %645, !dbg !114
  %650 = fmul float %442, %646, !dbg !114
  %651 = fmul float %442, %647, !dbg !114
  %652 = fmul float %442, %648, !dbg !114
  %653 = tail call float @llvm.nvvm.round.f(float %649) #5, !dbg !115
  %654 = tail call float @llvm.nvvm.round.f(float %650) #5, !dbg !115
  %655 = tail call float @llvm.nvvm.round.f(float %651) #5, !dbg !115
  %656 = tail call float @llvm.nvvm.round.f(float %652) #5, !dbg !115
  %657 = insertelement <4 x float> poison, float %653, i64 0, !dbg !116
  %658 = insertelement <4 x float> %657, float %654, i64 1, !dbg !116
  %659 = insertelement <4 x float> %658, float %655, i64 2, !dbg !116
  %660 = insertelement <4 x float> %659, float %656, i64 3, !dbg !116
  %661 = fcmp ogt <4 x float> %660, splat (float -1.270000e+02), !dbg !116
  %662 = fcmp uno <4 x float> %660, zeroinitializer, !dbg !118
  %663 = or <4 x i1> %661, %662, !dbg !119
  %664 = select <4 x i1> %663, <4 x float> %660, <4 x float> splat (float -1.270000e+02), !dbg !120
  %665 = fcmp olt <4 x float> %664, splat (float 1.270000e+02), !dbg !121
  %666 = fcmp uno <4 x float> %664, zeroinitializer, !dbg !123
  %667 = or <4 x i1> %665, %666, !dbg !124
  %668 = fptosi <4 x float> %664 to <4 x i8>, !dbg !125
  %669 = select <4 x i1> %667, <4 x i8> %668, <4 x i8> splat (i8 127), !dbg !126
  %670 = add i32 %443, %448, !dbg !127
  %671 = sext i32 %670 to i64, !dbg !128
  %672 = getelementptr i8, ptr addrspace(1) %4, i64 %671, !dbg !128
  %673 = bitcast <4 x i8> %669 to i32, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %673, ptr addrspace(1) %672, i1 %452) #5, !dbg !129
  %indvars.iv.next145 = add nuw nsw i64 %indvars.iv144, 4096, !dbg !89
  %674 = icmp samesign ult i64 %indvars.iv144, 11264, !dbg !89
  br i1 %674, label %444, label %675, !dbg !89

675:                                              ; preds = %__nv_tanhf.exit59
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 42, column: 39, scope: !6)
!13 = !DILocation(line: 46, column: 40, scope: !6)
!14 = !DILocation(line: 31, column: 40, scope: !6)
!15 = !DILocation(line: 32, column: 31, scope: !6)
!16 = !DILocation(line: 33, column: 29, scope: !6)
!17 = !DILocation(line: 41, column: 22, scope: !6)
!18 = !DILocation(line: 42, column: 45, scope: !6)
!19 = !DILocation(line: 42, column: 34, scope: !6)
!20 = !DILocation(line: 42, column: 63, scope: !6)
!21 = !DILocation(line: 42, column: 71, scope: !6)
!22 = !DILocation(line: 42, column: 53, scope: !6)
!23 = !DILocation(line: 42, column: 121, scope: !6)
!24 = !DILocation(line: 43, column: 23, scope: !6)
!25 = !DILocation(line: 46, column: 46, scope: !6)
!26 = !DILocation(line: 46, column: 34, scope: !6)
!27 = !DILocation(line: 46, column: 82, scope: !6)
!28 = !DILocation(line: 46, column: 64, scope: !6)
!29 = !DILocation(line: 48, column: 23, scope: !6)
!30 = !DILocation(line: 49, column: 23, scope: !6)
!31 = !DILocation(line: 50, column: 24, scope: !6)
!32 = !DILocation(line: 52, column: 24, scope: !6)
!33 = !DILocation(line: 53, column: 23, scope: !6)
!34 = !DILocation(line: 55, column: 24, scope: !6)
!35 = !DILocation(line: 56, column: 31, scope: !6)
!36 = !{i32 21046}
!37 = !DILocation(line: 58, column: 24, scope: !6)
!38 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !6, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 65, column: 47, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 67, column: 47, scope: !6)
!44 = !DILocation(line: 59, column: 24, scope: !6)
!45 = !DILocation(line: 63, column: 37, scope: !6)
!46 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 66, column: 50, scope: !6)
!50 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !43)
!51 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !43)
!52 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !43)
!53 = !DILocation(line: 68, column: 50, scope: !6)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !39, inlinedAt: !56)
!61 = !DILocation(line: 115, column: 29, scope: !39, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 40, scope: !6)
!63 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !62)
!67 = !DILocation(line: 71, column: 25, scope: !6)
!68 = !DILocation(line: 71, column: 37, scope: !6)
!69 = !DILocation(line: 72, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 37, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 74, column: 31, scope: !6)
!91 = !DILocation(line: 75, column: 29, scope: !6)
!92 = !DILocation(line: 83, column: 24, scope: !6)
!93 = !DILocation(line: 84, column: 46, scope: !6)
!94 = !DILocation(line: 84, column: 35, scope: !6)
!95 = !DILocation(line: 84, column: 64, scope: !6)
!96 = !DILocation(line: 84, column: 72, scope: !6)
!97 = !DILocation(line: 84, column: 54, scope: !6)
!98 = !DILocation(line: 84, column: 123, scope: !6)
!99 = !DILocation(line: 85, column: 25, scope: !6)
!100 = !DILocation(line: 88, column: 47, scope: !6)
!101 = !DILocation(line: 88, column: 35, scope: !6)
!102 = !DILocation(line: 88, column: 83, scope: !6)
!103 = !DILocation(line: 88, column: 65, scope: !6)
!104 = !DILocation(line: 90, column: 24, scope: !6)
!105 = !DILocation(line: 91, column: 24, scope: !6)
!106 = !DILocation(line: 92, column: 24, scope: !6)
!107 = !DILocation(line: 94, column: 24, scope: !6)
!108 = !DILocation(line: 95, column: 24, scope: !6)
!109 = !DILocation(line: 97, column: 24, scope: !6)
!110 = !DILocation(line: 98, column: 31, scope: !6)
!111 = !DILocation(line: 100, column: 24, scope: !6)
!112 = !DILocation(line: 101, column: 24, scope: !6)
!113 = !DILocation(line: 105, column: 39, scope: !6)
!114 = !DILocation(line: 121, column: 24, scope: !6)
!115 = !DILocation(line: 122, column: 36, scope: !6)
!116 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !117)
!117 = !DILocation(line: 125, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !117)
!119 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !117)
!120 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !117)
!121 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !122)
!122 = !DILocation(line: 127, column: 46, scope: !6)
!123 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !122)
!124 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !122)
!125 = !DILocation(line: 129, column: 25, scope: !6)
!126 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !122)
!127 = !DILocation(line: 130, column: 36, scope: !6)
!128 = !DILocation(line: 130, column: 29, scope: !6)
!129 = !DILocation(line: 130, column: 54, scope: !6)
!130 = !DILocation(line: 73, column: 4, scope: !6)
