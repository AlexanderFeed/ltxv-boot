; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 96, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 96, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = shl i32 %15, 3, !dbg !19
  %26 = and i32 %25, 8, !dbg !19
  %27 = and i32 %25, 16, !dbg !19
  %28 = and i32 %25, 24, !dbg !19
  %29 = and i32 %25, 32, !dbg !19
  %30 = and i32 %25, 56, !dbg !19
  %31 = or disjoint i32 %14, %23, !dbg !20
  %32 = or disjoint i32 %14, %24, !dbg !20
  %33 = shl nsw i32 %13, 6, !dbg !21
  %34 = or disjoint i32 %33, %23, !dbg !22
  %35 = or disjoint i32 %33, %24, !dbg !22
  %36 = srem i32 %31, 77, !dbg !23
  %37 = srem i32 %32, 77, !dbg !23
  %38 = srem i32 %34, 768, !dbg !24
  %.lhs.trunc = trunc i32 %35 to i16, !dbg !24
  %39 = srem i16 %.lhs.trunc, 768, !dbg !24
  %.sext = sext i16 %39 to i32, !dbg !24
  %40 = mul nsw i32 %36, 768, !dbg !25
  %41 = mul nsw i32 %37, 768, !dbg !25
  %42 = mul nsw i32 %38, 768, !dbg !26
  %43 = mul nsw i32 %.sext, 768, !dbg !26
  %44 = or disjoint i32 %40, %30, !dbg !27
  %45 = or disjoint i32 %41, %30, !dbg !27
  %46 = sext i32 %44 to i64, !dbg !28
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !28
  %and.ra = and i32 %15, 24, !dbg !29
  %50 = xor i32 %30, %and.ra, !dbg !29
  %51 = xor i32 %50, %18, !dbg !29
  %52 = shl nuw nsw i32 %23, 6, !dbg !29
  %53 = or disjoint i32 %51, %52, !dbg !29
  %54 = zext nneg i32 %53 to i64, !dbg !29
  %55 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %54, !dbg !29
  %56 = or disjoint i32 %53, 2048, !dbg !29
  %57 = zext nneg i32 %56 to i64, !dbg !29
  %58 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %57, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %55, ptr addrspace(1) %47, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %58, ptr addrspace(1) %49, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %59 = or disjoint i32 %42, %30, !dbg !30
  %60 = or disjoint i32 %43, %30, !dbg !30
  %61 = sext i32 %59 to i64, !dbg !31
  %62 = getelementptr bfloat, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = sext i32 %60 to i64, !dbg !31
  %64 = getelementptr bfloat, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %54, !dbg !32
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %57, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %62, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %64, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %67 = or disjoint i32 %30, 64, !dbg !33
  %68 = or disjoint i32 %40, %67, !dbg !27
  %69 = or disjoint i32 %41, %67, !dbg !27
  %70 = sext i32 %68 to i64, !dbg !28
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %69 to i64, !dbg !28
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %54, !dbg !29
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %57, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %71, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %75, ptr addrspace(1) %73, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %76 = or disjoint i32 %42, %67, !dbg !30
  %77 = or disjoint i32 %43, %67, !dbg !30
  %78 = sext i32 %76 to i64, !dbg !31
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %78, !dbg !31
  %80 = sext i32 %77 to i64, !dbg !31
  %81 = getelementptr bfloat, ptr addrspace(1) %1, i64 %80, !dbg !31
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %54, !dbg !32
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %57, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %79, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %83, ptr addrspace(1) %81, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %22, !dbg !34
  %invariant.op40 = or disjoint i32 %invariant.op, 32, !dbg !34
  %invariant.op42 = or disjoint i32 %30, 128, !dbg !34
  %84 = and i32 %15, 7
  %85 = and i32 %15, 15
  %86 = lshr exact i32 %17, 1
  %87 = xor i32 %30, %86
  %88 = or disjoint i32 %22, %85
  %89 = shl nuw nsw i32 %88, 6
  %90 = or disjoint i32 %89, %87
  %91 = zext nneg i32 %90 to i64
  %92 = or disjoint i32 %26, 16
  %93 = xor i32 %92, %27
  %94 = or disjoint i32 %93, %29
  %95 = xor i32 %94, %86
  %96 = or disjoint i32 %95, %89
  %97 = zext nneg i32 %96 to i64
  %98 = or disjoint i32 %28, 32
  %99 = xor i32 %98, %29
  %100 = xor i32 %99, %86
  %101 = or disjoint i32 %100, %89
  %102 = zext nneg i32 %101 to i64
  %103 = or disjoint i32 %26, 48
  %and.ra38 = and i32 %25, 48
  %104 = or disjoint i32 %86, %and.ra38
  %105 = xor i32 %104, %103
  %106 = or disjoint i32 %105, %89
  %107 = zext nneg i32 %106 to i64
  %108 = or disjoint i32 %84, 32
  %.reass41 = or disjoint i32 %84, %invariant.op40
  %109 = shl nuw nsw i32 %.reass41, 6
  %110 = or disjoint i32 %109, %87
  %111 = zext nneg i32 %110 to i64
  %112 = or disjoint i32 %95, %109
  %113 = zext nneg i32 %112 to i64
  %114 = or disjoint i32 %100, %109
  %115 = zext nneg i32 %114 to i64
  %116 = or disjoint i32 %105, %109
  %117 = zext nneg i32 %116 to i64
  %118 = lshr exact i32 %18, 2
  %119 = lshr i32 %15, 2
  %120 = and i32 %119, 16
  %121 = or disjoint i32 %120, %118
  %122 = or disjoint i32 %121, %84
  %123 = shl nuw nsw i32 %122, 6
  %124 = or disjoint i32 %123, %50
  %125 = zext nneg i32 %124 to i64
  %126 = xor i32 %99, %and.ra
  %127 = or disjoint i32 %126, %123
  %128 = zext nneg i32 %127 to i64
  %129 = or disjoint i32 %118, %108
  %130 = or disjoint i32 %129, %120
  %131 = shl nuw nsw i32 %130, 6
  %132 = or disjoint i32 %131, %50
  %133 = zext nneg i32 %132 to i64
  %134 = or disjoint i32 %126, %131
  %135 = zext nneg i32 %134 to i64
  %136 = zext nneg i32 %invariant.op42 to i64, !dbg !34
  %137 = sext i32 %43 to i64, !dbg !34
  %138 = sext i32 %42 to i64, !dbg !34
  %139 = sext i32 %41 to i64, !dbg !34
  %140 = sext i32 %40 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !34
  %invariant.gep74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !34
  %invariant.gep76 = getelementptr bfloat, ptr addrspace(1) %1, i64 %138, !dbg !34
  %invariant.gep78 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !34
  br label %141, !dbg !34

141:                                              ; preds = %4, %141
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %141 ]
  %142 = phi i32 [ -1, %4 ], [ %163, %141 ]
  %143 = phi i32 [ 1, %4 ], [ %346, %141 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %325, %141 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %326, %141 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %327, %141 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %328, %141 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %330, %141 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %331, %141 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %332, %141 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %333, %141 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %335, %141 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %336, %141 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %337, %141 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %338, %141 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %340, %141 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %341, %141 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %342, %141 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %343, %141 ]
  %160 = icmp samesign ult i64 %indvars.iv, 10, !dbg !34
  %161 = add i32 %142, 1, !dbg !34
  %162 = icmp slt i32 %161, 2, !dbg !34
  %163 = select i1 %162, i32 %161, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %164 = shl i32 %163, 12, !dbg !29
  %165 = sext i32 %164 to i64, !dbg !29
  %166 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %165, !dbg !29
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %91, !dbg !29
  %168 = ptrtoint ptr addrspace(3) %167 to i64, !dbg !29
  %169 = trunc i64 %168 to i32, !dbg !29
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %169) #1, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !29
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !29
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !29
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !29
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %97, !dbg !29
  %176 = ptrtoint ptr addrspace(3) %175 to i64, !dbg !29
  %177 = trunc i64 %176 to i32, !dbg !29
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %177) #1, !dbg !29
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !29
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !29
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !29
  %183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %102, !dbg !29
  %184 = ptrtoint ptr addrspace(3) %183 to i64, !dbg !29
  %185 = trunc i64 %184 to i32, !dbg !29
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %185) #1, !dbg !29
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !29
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !29
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !29
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %107, !dbg !29
  %192 = ptrtoint ptr addrspace(3) %191 to i64, !dbg !29
  %193 = trunc i64 %192 to i32, !dbg !29
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %193) #1, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !29
  %199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %111, !dbg !29
  %200 = ptrtoint ptr addrspace(3) %199 to i64, !dbg !29
  %201 = trunc i64 %200 to i32, !dbg !29
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %201) #1, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !29
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %113, !dbg !29
  %208 = ptrtoint ptr addrspace(3) %207 to i64, !dbg !29
  %209 = trunc i64 %208 to i32, !dbg !29
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #1, !dbg !29
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !29
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !29
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !29
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !29
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %115, !dbg !29
  %216 = ptrtoint ptr addrspace(3) %215 to i64, !dbg !29
  %217 = trunc i64 %216 to i32, !dbg !29
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #1, !dbg !29
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !29
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !29
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !29
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i64 %117, !dbg !29
  %224 = ptrtoint ptr addrspace(3) %223 to i64, !dbg !29
  %225 = trunc i64 %224 to i32, !dbg !29
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %225) #1, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !29
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !29
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !29
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !29
  %231 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %165, !dbg !32
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i64 %125, !dbg !32
  %233 = ptrtoint ptr addrspace(3) %232 to i64, !dbg !32
  %234 = trunc i64 %233 to i32, !dbg !32
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %234) #1, !dbg !32
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !32
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !32
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !32
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !32
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i64 %128, !dbg !32
  %241 = ptrtoint ptr addrspace(3) %240 to i64, !dbg !32
  %242 = trunc i64 %241 to i32, !dbg !32
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %242) #1, !dbg !32
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !32
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !32
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !32
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !32
  %248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i64 %133, !dbg !32
  %249 = ptrtoint ptr addrspace(3) %248 to i64, !dbg !32
  %250 = trunc i64 %249 to i32, !dbg !32
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %250) #1, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !32
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !32
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %231, i64 %135, !dbg !32
  %257 = ptrtoint ptr addrspace(3) %256 to i64, !dbg !32
  %258 = trunc i64 %257 to i32, !dbg !32
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %258) #1, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !32
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !32
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !32
  %264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %144, float %145, float %146, float %147, i32 %171, i32 %172, i32 %173, i32 %174, i32 %236, i32 %237) #1, !dbg !35
  %265 = extractvalue { float, float, float, float } %264, 0, !dbg !35
  %266 = extractvalue { float, float, float, float } %264, 1, !dbg !35
  %267 = extractvalue { float, float, float, float } %264, 2, !dbg !35
  %268 = extractvalue { float, float, float, float } %264, 3, !dbg !35
  %269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %148, float %149, float %150, float %151, i32 %171, i32 %172, i32 %173, i32 %174, i32 %252, i32 %253) #1, !dbg !35
  %270 = extractvalue { float, float, float, float } %269, 0, !dbg !35
  %271 = extractvalue { float, float, float, float } %269, 1, !dbg !35
  %272 = extractvalue { float, float, float, float } %269, 2, !dbg !35
  %273 = extractvalue { float, float, float, float } %269, 3, !dbg !35
  %274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %152, float %153, float %154, float %155, i32 %203, i32 %204, i32 %205, i32 %206, i32 %236, i32 %237) #1, !dbg !35
  %275 = extractvalue { float, float, float, float } %274, 0, !dbg !35
  %276 = extractvalue { float, float, float, float } %274, 1, !dbg !35
  %277 = extractvalue { float, float, float, float } %274, 2, !dbg !35
  %278 = extractvalue { float, float, float, float } %274, 3, !dbg !35
  %279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %203, i32 %204, i32 %205, i32 %206, i32 %252, i32 %253) #1, !dbg !35
  %280 = extractvalue { float, float, float, float } %279, 0, !dbg !35
  %281 = extractvalue { float, float, float, float } %279, 1, !dbg !35
  %282 = extractvalue { float, float, float, float } %279, 2, !dbg !35
  %283 = extractvalue { float, float, float, float } %279, 3, !dbg !35
  %284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %179, i32 %180, i32 %181, i32 %182, i32 %238, i32 %239) #1, !dbg !35
  %285 = extractvalue { float, float, float, float } %284, 0, !dbg !35
  %286 = extractvalue { float, float, float, float } %284, 1, !dbg !35
  %287 = extractvalue { float, float, float, float } %284, 2, !dbg !35
  %288 = extractvalue { float, float, float, float } %284, 3, !dbg !35
  %289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %270, float %271, float %272, float %273, i32 %179, i32 %180, i32 %181, i32 %182, i32 %254, i32 %255) #1, !dbg !35
  %290 = extractvalue { float, float, float, float } %289, 0, !dbg !35
  %291 = extractvalue { float, float, float, float } %289, 1, !dbg !35
  %292 = extractvalue { float, float, float, float } %289, 2, !dbg !35
  %293 = extractvalue { float, float, float, float } %289, 3, !dbg !35
  %294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %275, float %276, float %277, float %278, i32 %211, i32 %212, i32 %213, i32 %214, i32 %238, i32 %239) #1, !dbg !35
  %295 = extractvalue { float, float, float, float } %294, 0, !dbg !35
  %296 = extractvalue { float, float, float, float } %294, 1, !dbg !35
  %297 = extractvalue { float, float, float, float } %294, 2, !dbg !35
  %298 = extractvalue { float, float, float, float } %294, 3, !dbg !35
  %299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %280, float %281, float %282, float %283, i32 %211, i32 %212, i32 %213, i32 %214, i32 %254, i32 %255) #1, !dbg !35
  %300 = extractvalue { float, float, float, float } %299, 0, !dbg !35
  %301 = extractvalue { float, float, float, float } %299, 1, !dbg !35
  %302 = extractvalue { float, float, float, float } %299, 2, !dbg !35
  %303 = extractvalue { float, float, float, float } %299, 3, !dbg !35
  %304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %187, i32 %188, i32 %189, i32 %190, i32 %244, i32 %245) #1, !dbg !35
  %305 = extractvalue { float, float, float, float } %304, 0, !dbg !35
  %306 = extractvalue { float, float, float, float } %304, 1, !dbg !35
  %307 = extractvalue { float, float, float, float } %304, 2, !dbg !35
  %308 = extractvalue { float, float, float, float } %304, 3, !dbg !35
  %309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %290, float %291, float %292, float %293, i32 %187, i32 %188, i32 %189, i32 %190, i32 %260, i32 %261) #1, !dbg !35
  %310 = extractvalue { float, float, float, float } %309, 0, !dbg !35
  %311 = extractvalue { float, float, float, float } %309, 1, !dbg !35
  %312 = extractvalue { float, float, float, float } %309, 2, !dbg !35
  %313 = extractvalue { float, float, float, float } %309, 3, !dbg !35
  %314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %295, float %296, float %297, float %298, i32 %219, i32 %220, i32 %221, i32 %222, i32 %244, i32 %245) #1, !dbg !35
  %315 = extractvalue { float, float, float, float } %314, 0, !dbg !35
  %316 = extractvalue { float, float, float, float } %314, 1, !dbg !35
  %317 = extractvalue { float, float, float, float } %314, 2, !dbg !35
  %318 = extractvalue { float, float, float, float } %314, 3, !dbg !35
  %319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %300, float %301, float %302, float %303, i32 %219, i32 %220, i32 %221, i32 %222, i32 %260, i32 %261) #1, !dbg !35
  %320 = extractvalue { float, float, float, float } %319, 0, !dbg !35
  %321 = extractvalue { float, float, float, float } %319, 1, !dbg !35
  %322 = extractvalue { float, float, float, float } %319, 2, !dbg !35
  %323 = extractvalue { float, float, float, float } %319, 3, !dbg !35
  %324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %305, float %306, float %307, float %308, i32 %195, i32 %196, i32 %197, i32 %198, i32 %246, i32 %247) #1, !dbg !35
  %325 = extractvalue { float, float, float, float } %324, 0, !dbg !35
  %326 = extractvalue { float, float, float, float } %324, 1, !dbg !35
  %327 = extractvalue { float, float, float, float } %324, 2, !dbg !35
  %328 = extractvalue { float, float, float, float } %324, 3, !dbg !35
  %329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %195, i32 %196, i32 %197, i32 %198, i32 %262, i32 %263) #1, !dbg !35
  %330 = extractvalue { float, float, float, float } %329, 0, !dbg !35
  %331 = extractvalue { float, float, float, float } %329, 1, !dbg !35
  %332 = extractvalue { float, float, float, float } %329, 2, !dbg !35
  %333 = extractvalue { float, float, float, float } %329, 3, !dbg !35
  %334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %315, float %316, float %317, float %318, i32 %227, i32 %228, i32 %229, i32 %230, i32 %246, i32 %247) #1, !dbg !35
  %335 = extractvalue { float, float, float, float } %334, 0, !dbg !35
  %336 = extractvalue { float, float, float, float } %334, 1, !dbg !35
  %337 = extractvalue { float, float, float, float } %334, 2, !dbg !35
  %338 = extractvalue { float, float, float, float } %334, 3, !dbg !35
  %339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %320, float %321, float %322, float %323, i32 %227, i32 %228, i32 %229, i32 %230, i32 %262, i32 %263) #1, !dbg !35
  %340 = extractvalue { float, float, float, float } %339, 0, !dbg !35
  %341 = extractvalue { float, float, float, float } %339, 1, !dbg !35
  %342 = extractvalue { float, float, float, float } %339, 2, !dbg !35
  %343 = extractvalue { float, float, float, float } %339, 3, !dbg !35
  %344 = add i32 %143, 1, !dbg !34
  %345 = icmp slt i32 %344, 2, !dbg !34
  %346 = select i1 %345, i32 %344, i32 0, !dbg !34
  %347 = shl nuw nsw i64 %indvars.iv, 6, !dbg !36
  %348 = add nuw nsw i64 %347, %136
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %348, !dbg !28
  %gep75 = getelementptr bfloat, ptr addrspace(1) %invariant.gep74, i64 %348, !dbg !28
  %349 = shl i32 %346, 12, !dbg !29
  %350 = sext i32 %349 to i64, !dbg !29
  %351 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %350, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %351, i64 %54, !dbg !29
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %351, i64 %57, !dbg !29
  %354 = select i1 %160, i32 16, i32 0, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %352, ptr addrspace(1) %gep, i32 %354) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %353, ptr addrspace(1) %gep75, i32 %354) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep77 = getelementptr bfloat, ptr addrspace(1) %invariant.gep76, i64 %348, !dbg !31
  %gep79 = getelementptr bfloat, ptr addrspace(1) %invariant.gep78, i64 %348, !dbg !31
  %355 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %350, !dbg !32
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %355, i64 %54, !dbg !32
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %355, i64 %57, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %356, ptr addrspace(1) %gep77, i32 %354) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %357, ptr addrspace(1) %gep79, i32 %354) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 12, !dbg !34
  br i1 %exitcond.not, label %358, label %141, !dbg !34

358:                                              ; preds = %141
  %359 = or disjoint i32 %33, %30, !dbg !22
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %360 = icmp slt i32 %31, 77, !dbg !37
  %361 = icmp slt i32 %32, 77, !dbg !37
  %362 = icmp slt i32 %359, 768, !dbg !38
  %363 = and i1 %360, %362, !dbg !39
  %364 = and i1 %361, %362, !dbg !39
  %365 = mul i32 %31, 768, !dbg !40
  %366 = mul i32 %32, 768, !dbg !40
  %367 = add i32 %365, %359, !dbg !41
  %368 = add i32 %366, %359, !dbg !41
  %369 = sext i32 %367 to i64, !dbg !42
  %370 = getelementptr bfloat, ptr addrspace(1) %2, i64 %369, !dbg !42
  %371 = sext i32 %368 to i64, !dbg !42
  %372 = getelementptr bfloat, ptr addrspace(1) %2, i64 %371, !dbg !42
  %373 = fptrunc float %325 to bfloat, !dbg !43
  %374 = fptrunc float %326 to bfloat, !dbg !43
  %375 = fptrunc float %327 to bfloat, !dbg !43
  %376 = fptrunc float %328 to bfloat, !dbg !43
  %377 = fptrunc float %330 to bfloat, !dbg !43
  %378 = fptrunc float %331 to bfloat, !dbg !43
  %379 = fptrunc float %332 to bfloat, !dbg !43
  %380 = fptrunc float %333 to bfloat, !dbg !43
  %381 = fptrunc float %335 to bfloat, !dbg !43
  %382 = fptrunc float %336 to bfloat, !dbg !43
  %383 = fptrunc float %337 to bfloat, !dbg !43
  %384 = fptrunc float %338 to bfloat, !dbg !43
  %385 = fptrunc float %340 to bfloat, !dbg !43
  %386 = fptrunc float %341 to bfloat, !dbg !43
  %387 = fptrunc float %342 to bfloat, !dbg !43
  %388 = fptrunc float %343 to bfloat, !dbg !43
  %389 = shl i32 %15, 1, !dbg !43
  %390 = and i32 %389, 6, !dbg !43
  %391 = shl i32 %15, 4, !dbg !43
  %392 = and i32 %391, 192, !dbg !43
  %393 = or disjoint i32 %392, %390, !dbg !43
  %394 = shl nuw nsw i32 %17, 4, !dbg !43
  %395 = or disjoint i32 %393, %394, !dbg !43
  %396 = and i32 %119, 24, !dbg !43
  %397 = or disjoint i32 %395, %396, !dbg !43
  %398 = shl nuw nsw i32 %21, 3, !dbg !43
  %399 = or disjoint i32 %397, %398, !dbg !43
  %400 = and i32 %25, 1016, !dbg !43
  %401 = or disjoint i32 %400, %398, !dbg !43
  %402 = lshr i32 %399, 3, !dbg !43
  %403 = and i32 %402, 536870904, !dbg !43
  %404 = add nuw nsw i32 %403, %399, !dbg !43
  %405 = zext nneg i32 %404 to i64, !dbg !43
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %405, !dbg !43
  %407 = bitcast bfloat %373 to i16, !dbg !43
  %408 = bitcast bfloat %374 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %406, i16 %407, i16 %408, i1 true) #1, !dbg !43
  %409 = or disjoint i32 %399, 512, !dbg !43
  %410 = lshr i32 %409, 3, !dbg !43
  %411 = and i32 %410, 536870904, !dbg !43
  %412 = add nuw nsw i32 %411, %409, !dbg !43
  %413 = zext nneg i32 %412 to i64, !dbg !43
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %413, !dbg !43
  %415 = bitcast bfloat %375 to i16, !dbg !43
  %416 = bitcast bfloat %376 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %414, i16 %415, i16 %416, i1 true) #1, !dbg !43
  %417 = or disjoint i32 %399, 32, !dbg !43
  %418 = add nuw nsw i32 %417, %403, !dbg !43
  %419 = zext nneg i32 %418 to i64, !dbg !43
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %419, !dbg !43
  %421 = bitcast bfloat %377 to i16, !dbg !43
  %422 = bitcast bfloat %378 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %420, i16 %421, i16 %422, i1 true) #1, !dbg !43
  %423 = or disjoint i32 %399, 544, !dbg !43
  %424 = lshr i32 %423, 3, !dbg !43
  %425 = and i32 %424, 536870904, !dbg !43
  %426 = add nuw nsw i32 %425, %423, !dbg !43
  %427 = zext nneg i32 %426 to i64, !dbg !43
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %427, !dbg !43
  %429 = bitcast bfloat %379 to i16, !dbg !43
  %430 = bitcast bfloat %380 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %428, i16 %429, i16 %430, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %431 = lshr exact i32 %401, 3, !dbg !43
  %432 = and i32 %431, 248, !dbg !43
  %433 = add nuw nsw i32 %432, %401, !dbg !43
  %434 = zext nneg i32 %433 to i64, !dbg !43
  %435 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %434, !dbg !43
  %436 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %437 = bitcast bfloat %381 to i16, !dbg !43
  %438 = bitcast bfloat %382 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %406, i16 %437, i16 %438, i1 true) #1, !dbg !43
  %439 = bitcast bfloat %383 to i16, !dbg !43
  %440 = bitcast bfloat %384 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %414, i16 %439, i16 %440, i1 true) #1, !dbg !43
  %441 = bitcast bfloat %385 to i16, !dbg !43
  %442 = bitcast bfloat %386 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %420, i16 %441, i16 %442, i1 true) #1, !dbg !43
  %443 = bitcast bfloat %387 to i16, !dbg !43
  %444 = bitcast bfloat %388 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %428, i16 %443, i16 %444, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %445 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %436, i64 0, !dbg !43
  %.extract25 = extractelement <4 x i32> %436, i64 1, !dbg !43
  %.extract27 = extractelement <4 x i32> %436, i64 2, !dbg !43
  %.extract29 = extractelement <4 x i32> %436, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract25, i32 %.extract27, i32 %.extract29, ptr addrspace(1) %370, i1 %363) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %445, i64 0, !dbg !43
  %.extract33 = extractelement <4 x i32> %445, i64 1, !dbg !43
  %.extract35 = extractelement <4 x i32> %445, i64 2, !dbg !43
  %.extract37 = extractelement <4 x i32> %445, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %372, i1 %364) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpssll6wf25zfmin3nwfiv7okwduudwzu4snorsiamgqutd2gajs.py", directory: "/tmp/torchinductor_root/ps")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 66, column: 42, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 25, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
