; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 9, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 1, !dbg !11
  %13 = and i32 %12, 510, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 1, !dbg !12
  %16 = srem i32 %14, 526336, !dbg !13
  %17 = sdiv i32 %14, 128, !dbg !14
  %18 = mul i32 %17, 128, !dbg !15
  %.decomposed = sub i32 %14, %18, !dbg !15
  %19 = srem i32 %15, 128, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %21) #1, !dbg !17
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !17
  %24 = sext i32 %16 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %25) #1, !dbg !19
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %29) #1, !dbg !21
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %33 = getelementptr bfloat, ptr addrspace(1) %3, i64 %20, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %33) #1, !dbg !23
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !23
  %36 = srem i32 %15, 2, !dbg !24
  %37 = icmp slt i32 %36, 1, !dbg !25
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !26
  %38 = ashr exact i8 %.lhs.trunc, 1, !dbg !26
  %.sext = sext i8 %38 to i32, !dbg !26
  %.lhs.trunc1 = trunc nsw i32 %19 to i8, !dbg !26
  %39 = sdiv i8 %.lhs.trunc1, 2, !dbg !26
  %.sext2 = sext i8 %39 to i32, !dbg !26
  %40 = shl nsw i32 %.sext, 1, !dbg !27
  %41 = shl nsw i32 %.sext2, 1, !dbg !27
  %42 = shl nsw i32 %17, 7, !dbg !28
  %43 = or disjoint i32 %42, 1, !dbg !29
  %44 = add i32 %43, %40, !dbg !30
  %45 = add i32 %43, %41, !dbg !30
  %46 = sext i32 %44 to i64, !dbg !31
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = sext i32 %45 to i64, !dbg !31
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 true) #1, !dbg !32
  %51 = bitcast i16 %50 to bfloat, !dbg !32
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %49, i1 %37) #1, !dbg !32
  %53 = bitcast i16 %52 to bfloat, !dbg !32
  %54 = fpext bfloat %51 to float, !dbg !33
  %55 = fpext bfloat %53 to float, !dbg !33
  %56 = fsub float 0.000000e+00, %54, !dbg !34
  %57 = fsub float 0.000000e+00, %55, !dbg !34
  %58 = icmp sgt i32 %36, 0, !dbg !35
  %59 = add i32 %40, %42, !dbg !36
  %60 = add i32 %41, %42, !dbg !36
  %61 = sext i32 %59 to i64, !dbg !37
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !37
  %63 = sext i32 %60 to i64, !dbg !37
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !37
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %62, i1 false) #1, !dbg !38
  %66 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 %58) #1, !dbg !38
  %67 = bitcast i16 %66 to bfloat, !dbg !38
  %68 = fpext bfloat %67 to float, !dbg !39
  %69 = select i1 %37, float %57, float %68, !dbg !40
  %70 = getelementptr bfloat, ptr addrspace(1) %3, i64 %46, !dbg !41
  %71 = getelementptr bfloat, ptr addrspace(1) %3, i64 %48, !dbg !41
  %72 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %70, i1 true) #1, !dbg !42
  %73 = bitcast i16 %72 to bfloat, !dbg !42
  %74 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %71, i1 %37) #1, !dbg !42
  %75 = bitcast i16 %74 to bfloat, !dbg !42
  %76 = fpext bfloat %73 to float, !dbg !43
  %77 = fpext bfloat %75 to float, !dbg !43
  %78 = fsub float 0.000000e+00, %76, !dbg !44
  %79 = fsub float 0.000000e+00, %77, !dbg !44
  %80 = getelementptr bfloat, ptr addrspace(1) %3, i64 %61, !dbg !45
  %81 = getelementptr bfloat, ptr addrspace(1) %3, i64 %63, !dbg !45
  %82 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %80, i1 false) #1, !dbg !46
  %83 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %81, i1 %58) #1, !dbg !46
  %84 = bitcast i16 %83 to bfloat, !dbg !46
  %85 = fpext bfloat %84 to float, !dbg !47
  %86 = select i1 %37, float %79, float %85, !dbg !40
  %87 = getelementptr bfloat, ptr addrspace(1) %4, i64 %20, !dbg !48
  %88 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !49
  %89 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %90 = insertelement <2 x i32> %89, i32 %28, i64 1, !dbg !19
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !19
  %92 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %93 = insertelement <2 x i32> %92, i32 %32, i64 1, !dbg !21
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !21
  %95 = fmul <2 x float> %88, %91, !dbg !50
  %96 = insertelement <2 x float> poison, float %56, i64 0, !dbg !51
  %97 = insertelement <2 x float> %96, float %69, i64 1, !dbg !51
  %98 = fmul <2 x float> %97, %94, !dbg !51
  %99 = fadd <2 x float> %95, %98, !dbg !52
  %100 = fptrunc <2 x float> %99 to <2 x bfloat>, !dbg !53
  %101 = bitcast <2 x bfloat> %100 to i32, !dbg !53
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %101, ptr addrspace(1) %87) #1, !dbg !53
  %102 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !54
  %103 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !55
  %104 = fmul <2 x float> %91, %103, !dbg !56
  %105 = insertelement <2 x float> poison, float %78, i64 0, !dbg !57
  %106 = insertelement <2 x float> %105, float %86, i64 1, !dbg !57
  %107 = fmul <2 x float> %106, %94, !dbg !57
  %108 = fadd <2 x float> %104, %107, !dbg !58
  %109 = fptrunc <2 x float> %108 to <2 x bfloat>, !dbg !59
  %110 = bitcast <2 x bfloat> %109 to i32, !dbg !59
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %110, ptr addrspace(1) %102) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqi2ajouraonbwbthagtwszunenxe2kxpx5ttht5ojcvmgyxwkf.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 26, column: 19, scope: !6)
!15 = !DILocation(line: 25, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 30, scope: !6)
!17 = !DILocation(line: 27, column: 35, scope: !6)
!18 = !DILocation(line: 28, column: 30, scope: !6)
!19 = !DILocation(line: 28, column: 35, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 31, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 33, column: 17, scope: !6)
!25 = !DILocation(line: 37, column: 18, scope: !6)
!26 = !DILocation(line: 38, column: 43, scope: !6)
!27 = !DILocation(line: 38, column: 37, scope: !6)
!28 = !DILocation(line: 38, column: 52, scope: !6)
!29 = !DILocation(line: 38, column: 34, scope: !6)
!30 = !DILocation(line: 38, column: 48, scope: !6)
!31 = !DILocation(line: 38, column: 30, scope: !6)
!32 = !DILocation(line: 38, column: 57, scope: !6)
!33 = !DILocation(line: 38, column: 107, scope: !6)
!34 = !DILocation(line: 39, column: 13, scope: !6)
!35 = !DILocation(line: 42, column: 20, scope: !6)
!36 = !DILocation(line: 45, column: 45, scope: !6)
!37 = !DILocation(line: 45, column: 31, scope: !6)
!38 = !DILocation(line: 45, column: 54, scope: !6)
!39 = !DILocation(line: 45, column: 105, scope: !6)
!40 = !DILocation(line: 0, scope: !6)
!41 = !DILocation(line: 53, column: 31, scope: !6)
!42 = !DILocation(line: 53, column: 58, scope: !6)
!43 = !DILocation(line: 53, column: 108, scope: !6)
!44 = !DILocation(line: 54, column: 13, scope: !6)
!45 = !DILocation(line: 57, column: 31, scope: !6)
!46 = !DILocation(line: 57, column: 54, scope: !6)
!47 = !DILocation(line: 57, column: 105, scope: !6)
!48 = !DILocation(line: 63, column: 25, scope: !6)
!49 = !DILocation(line: 27, column: 44, scope: !6)
!50 = !DILocation(line: 32, column: 18, scope: !6)
!51 = !DILocation(line: 48, column: 20, scope: !6)
!52 = !DILocation(line: 49, column: 19, scope: !6)
!53 = !DILocation(line: 63, column: 37, scope: !6)
!54 = !DILocation(line: 64, column: 25, scope: !6)
!55 = !DILocation(line: 30, column: 45, scope: !6)
!56 = !DILocation(line: 52, column: 20, scope: !6)
!57 = !DILocation(line: 60, column: 20, scope: !6)
!58 = !DILocation(line: 61, column: 20, scope: !6)
!59 = !DILocation(line: 64, column: 37, scope: !6)
!60 = !DILocation(line: 64, column: 4, scope: !6)
