; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 6, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 1, !dbg !11
  %15 = and i32 %14, 63, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, 512, !dbg !13
  %18 = shl i32 %13, 2, !dbg !14
  %19 = and i32 %18, 4, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %21 = or disjoint i32 %20, %19
  br label %22, !dbg !16

22:                                               ; preds = %10, %22
  %23 = phi float [ 0.000000e+00, %10 ], [ %75, %22 ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %76, %22 ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %93, %22 ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %94, %22 ]
  %27 = phi i32 [ 0, %10 ], [ %98, %22 ]
  %28 = or i32 %21, %27, !dbg !17
  %29 = sext i32 %28 to i64, !dbg !18
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !18
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %17) #4, !dbg !19
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !19
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !19
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !19
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !19
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %29, !dbg !20
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %17) #4, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !21
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !21
  %42 = getelementptr bfloat, ptr addrspace(1) %2, i64 %29, !dbg !22
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %17) #4, !dbg !23
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !23
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !23
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !23
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !23
  %48 = getelementptr bfloat, ptr addrspace(1) %3, i64 %29, !dbg !24
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %17) #4, !dbg !25
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !25
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !25
  %52 = extractvalue { i32, i32 } %49, 1, !dbg !25
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !25
  %54 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !26
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %17) #4, !dbg !27
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !27
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !27
  %58 = extractvalue { i32, i32 } %55, 1, !dbg !27
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !27
  %60 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !28
  %61 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !29
  %62 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !30
  %63 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !31
  %64 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !32
  %65 = fadd <2 x float> %60, %61, !dbg !33
  %66 = fadd <2 x float> %65, %62, !dbg !34
  %67 = fadd <2 x float> %66, %63, !dbg !35
  %68 = fadd <2 x float> %67, %64, !dbg !36
  %69 = fmul <2 x float> %68, %68, !dbg !37
  %70 = extractelement <2 x float> %69, i64 0, !dbg !37
  %71 = fmul <2 x float> %68, %68, !dbg !37
  %72 = extractelement <2 x float> %71, i64 1, !dbg !37
  %73 = fadd float %23, %70, !dbg !38
  %74 = fadd float %24, %72, !dbg !38
  %75 = select i1 %17, float %73, float %23, !dbg !39
  %76 = select i1 %17, float %74, float %24, !dbg !39
  %77 = fptrunc <2 x float> %68 to <2 x bfloat>, !dbg !40
  %78 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !28
  %79 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !29
  %80 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !30
  %81 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !31
  %82 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !32
  %83 = fadd <2 x float> %78, %79, !dbg !33
  %84 = fadd <2 x float> %83, %80, !dbg !34
  %85 = fadd <2 x float> %84, %81, !dbg !35
  %86 = fadd <2 x float> %85, %82, !dbg !36
  %87 = fmul <2 x float> %86, %86, !dbg !37
  %88 = extractelement <2 x float> %87, i64 0, !dbg !37
  %89 = fmul <2 x float> %86, %86, !dbg !37
  %90 = extractelement <2 x float> %89, i64 1, !dbg !37
  %91 = fadd float %25, %88, !dbg !38
  %92 = fadd float %26, %90, !dbg !38
  %93 = select i1 %17, float %91, float %25, !dbg !39
  %94 = select i1 %17, float %92, float %26, !dbg !39
  %95 = fptrunc <2 x float> %86 to <2 x bfloat>, !dbg !40
  %96 = bitcast <2 x bfloat> %77 to i32, !dbg !40
  %97 = bitcast <2 x bfloat> %95 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %30, i1 %17) #4, !dbg !40
  %98 = add nuw nsw i32 %27, 8, !dbg !16
  %99 = icmp samesign ult i32 %27, 4088, !dbg !16
  br i1 %99, label %22, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %22
  %100 = fadd float %75, %76, !dbg !41
  %101 = fadd float %93, %100, !dbg !41
  %102 = fadd float %94, %101, !dbg !41
  %103 = bitcast float %102 to i32, !dbg !46
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !46
  %105 = bitcast i32 %104 to float, !dbg !46
  %106 = fadd float %102, %105, !dbg !41
  %107 = tail call float @llvm.nvvm.div.full(float %106, float 4.096000e+03), !dbg !47
  %108 = fadd float %107, 0x3EB0C6F7A0000000, !dbg !48
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i8 = icmp eq i32 %112, 0, !dbg !49
  br i1 %.not.i8, label %115, label %113, !dbg !49

113:                                              ; preds = %__nv_rsqrtf.exit
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !49
  br label %__nv_rsqrtf.exit10, !dbg !49

115:                                              ; preds = %__nv_rsqrtf.exit
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !49
  br label %__nv_rsqrtf.exit10, !dbg !49

__nv_rsqrtf.exit10:                               ; preds = %113, %115
  %.0.i9 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !49
  %117 = zext nneg i32 %19 to i64, !dbg !50
  %118 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !51
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  br label %120, !dbg !50

120:                                              ; preds = %__nv_rsqrtf.exit10, %120
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit10 ], [ %indvars.iv.next, %120 ]
  %121 = or disjoint i64 %indvars.iv, %117, !dbg !52
  %122 = getelementptr bfloat, ptr addrspace(1) %5, i64 %121, !dbg !53
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %122, i1 true) #4, !dbg !54
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !54
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !54
  %126 = extractvalue { i32, i32 } %123, 1, !dbg !54
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !54
  %128 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %21, %128
  %129 = sext i32 %.reass to i64, !dbg !55
  %130 = getelementptr bfloat, ptr addrspace(1) %0, i64 %129, !dbg !55
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %130, i1 %17) #4, !dbg !56
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !56
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !56
  %134 = extractvalue { i32, i32 } %131, 1, !dbg !56
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !56
  %136 = getelementptr bfloat, ptr addrspace(1) %6, i64 %129, !dbg !57
  %137 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !58
  %138 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !59
  %139 = fmul <2 x float> %119, %138, !dbg !51
  %140 = fmul <2 x float> %139, %137, !dbg !60
  %141 = fptrunc <2 x float> %140 to <2 x bfloat>, !dbg !61
  %142 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !58
  %143 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !59
  %144 = fmul <2 x float> %119, %143, !dbg !51
  %145 = fmul <2 x float> %144, %142, !dbg !60
  %146 = fptrunc <2 x float> %145 to <2 x bfloat>, !dbg !61
  %147 = bitcast <2 x bfloat> %141 to i32, !dbg !61
  %148 = bitcast <2 x bfloat> %146 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %136, i1 %17) #4, !dbg !61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !50
  %149 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !50
  br i1 %149, label %120, label %150, !dbg !50

150:                                              ; preds = %120
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjpigwcltwckftsm2iokvi3tj3yi6tt4h3mtdooifowgpvdbvexp.py", directory: "/tmp/torchinductor_root/jp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 45, scope: !6)
!18 = !DILocation(line: 36, column: 38, scope: !6)
!19 = !DILocation(line: 36, column: 55, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 38, column: 34, scope: !6)
!23 = !DILocation(line: 38, column: 51, scope: !6)
!24 = !DILocation(line: 39, column: 34, scope: !6)
!25 = !DILocation(line: 39, column: 51, scope: !6)
!26 = !DILocation(line: 40, column: 34, scope: !6)
!27 = !DILocation(line: 40, column: 51, scope: !6)
!28 = !DILocation(line: 36, column: 117, scope: !6)
!29 = !DILocation(line: 37, column: 113, scope: !6)
!30 = !DILocation(line: 38, column: 113, scope: !6)
!31 = !DILocation(line: 39, column: 113, scope: !6)
!32 = !DILocation(line: 40, column: 113, scope: !6)
!33 = !DILocation(line: 41, column: 22, scope: !6)
!34 = !DILocation(line: 42, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 44, column: 22, scope: !6)
!37 = !DILocation(line: 46, column: 23, scope: !6)
!38 = !DILocation(line: 48, column: 25, scope: !6)
!39 = !DILocation(line: 49, column: 50, scope: !6)
!40 = !DILocation(line: 50, column: 55, scope: !6)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !6, file: !43, discriminator: 0)
!45 = !DILocation(line: 51, column: 27, scope: !6)
!46 = !DILocation(line: 286, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 62, column: 25, scope: !6)
!48 = !DILocation(line: 64, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 32, scope: !6)
!50 = !DILocation(line: 52, column: 40, scope: !6)
!51 = !DILocation(line: 66, column: 24, scope: !6)
!52 = !DILocation(line: 53, column: 31, scope: !6)
!53 = !DILocation(line: 58, column: 35, scope: !6)
!54 = !DILocation(line: 58, column: 42, scope: !6)
!55 = !DILocation(line: 59, column: 39, scope: !6)
!56 = !DILocation(line: 59, column: 56, scope: !6)
!57 = !DILocation(line: 69, column: 29, scope: !6)
!58 = !DILocation(line: 58, column: 95, scope: !6)
!59 = !DILocation(line: 59, column: 118, scope: !6)
!60 = !DILocation(line: 68, column: 24, scope: !6)
!61 = !DILocation(line: 69, column: 53, scope: !6)
!62 = !DILocation(line: 52, column: 4, scope: !6)
