; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 3, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = lshr i32 %15, 6, !dbg !11
  %17 = and i32 %16, 7, !dbg !11
  %18 = and i32 %15, 31, !dbg !11
  %19 = or disjoint i32 %17, %14, !dbg !12
  %20 = icmp slt i32 %19, 3600, !dbg !13
  %21 = shl i32 %15, 2, !dbg !14
  %22 = and i32 %21, 252, !dbg !14
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr bfloat, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %29 = bitcast i16 %28 to bfloat, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !17
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %35 = bitcast i16 %34 to bfloat, !dbg !18
  %36 = mul i32 %19, 12288, !dbg !19
  %.inv = fcmp oge bfloat %29, 0xR0000, !dbg !20
  %37 = select i1 %.inv, bfloat 0xR0000, bfloat %29, !dbg !20
  %38 = fpext bfloat %37 to float, !dbg !20
  %39 = fsub float 0.000000e+00, %38, !dbg !24
  %.inv2 = fcmp ole bfloat %35, 0xR0000, !dbg !25
  %40 = select i1 %.inv2, bfloat 0xR0000, bfloat %35, !dbg !25
  %41 = fpext bfloat %40 to float, !dbg !25
  %42 = fcmp ogt float %39, %41, !dbg !27
  %43 = fcmp uno float %39, 0.000000e+00, !dbg !29
  %44 = or i1 %43, %42, !dbg !30
  %45 = select i1 %44, float %39, float %41, !dbg !31
  %46 = fmul float %45, 0x3F80204080000000, !dbg !32
  %47 = fcmp ogt float %46, 0x3EE4F8B580000000, !dbg !33
  %48 = fcmp uno float %46, 0.000000e+00, !dbg !35
  %49 = or i1 %47, %48, !dbg !36
  %50 = select i1 %49, float %46, float 0x3EE4F8B580000000, !dbg !37
  %51 = zext nneg i32 %22 to i64, !dbg !38
  %52 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !39
  %53 = shufflevector <2 x i1> %52, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !39
  %54 = insertelement <2 x float> poison, float %50, i64 0, !dbg !40
  %55 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %56 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !41
  %57 = shufflevector <4 x i1> %56, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  br label %58, !dbg !38

58:                                               ; preds = %12, %__nv_tanhf.exit137
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit137 ]
  %59 = phi float [ 0x7FF0000000000000, %12 ], [ %282, %__nv_tanhf.exit137 ]
  %60 = phi float [ 0x7FF0000000000000, %12 ], [ %283, %__nv_tanhf.exit137 ]
  %61 = phi <2 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %281, %__nv_tanhf.exit137 ]
  %62 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %289, %__nv_tanhf.exit137 ]
  %63 = or disjoint i64 %indvars.iv, %51, !dbg !42
  %64 = trunc nuw nsw i64 %63 to i32, !dbg !43
  %65 = add i32 %36, %64, !dbg !43
  %66 = sext i32 %65 to i64, !dbg !44
  %67 = getelementptr i32, ptr addrspace(1) %0, i64 %66, !dbg !44
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %20) #5, !dbg !45
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !45
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !45
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !45
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !45
  %73 = getelementptr bfloat, ptr addrspace(1) %3, i64 %63, !dbg !46
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 true) #5, !dbg !47
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !47
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !47
  %77 = extractvalue { i32, i32 } %74, 1, !dbg !47
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !47
  %79 = getelementptr bfloat, ptr addrspace(1) %4, i64 %63, !dbg !48
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %79, i1 true) #5, !dbg !49
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !49
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !49
  %83 = extractvalue { i32, i32 } %80, 1, !dbg !49
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !49
  %85 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !50
  %86 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !51
  %87 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !52
  %88 = insertelement <2 x i32> %87, i32 %70, i64 1, !dbg !52
  %89 = sitofp <2 x i32> %88 to <2 x float>, !dbg !52
  %90 = fmul <2 x float> %55, %89, !dbg !40
  %91 = fmul <2 x float> %90, %85, !dbg !53
  %92 = fadd <2 x float> %91, %86, !dbg !54
  %93 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !50
  %94 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !51
  %95 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !52
  %96 = insertelement <2 x i32> %95, i32 %72, i64 1, !dbg !52
  %97 = sitofp <2 x i32> %96 to <2 x float>, !dbg !52
  %98 = fmul <2 x float> %55, %97, !dbg !40
  %99 = fmul <2 x float> %98, %93, !dbg !53
  %100 = fadd <2 x float> %99, %94, !dbg !54
  %101 = fmul <2 x float> %92, splat (float 5.000000e-01), !dbg !55
  %102 = fmul <2 x float> %100, splat (float 5.000000e-01), !dbg !55
  %103 = extractelement <2 x float> %92, i64 0, !dbg !56
  %104 = fmul float %103, %103, !dbg !57
  %105 = extractelement <2 x float> %92, i64 1, !dbg !56
  %106 = fmul float %105, %105, !dbg !57
  %107 = extractelement <2 x float> %100, i64 0, !dbg !56
  %108 = fmul float %107, %107, !dbg !57
  %109 = extractelement <2 x float> %100, i64 1, !dbg !56
  %110 = fmul float %109, %109, !dbg !57
  %111 = fmul float %103, %104, !dbg !58
  %112 = fmul float %105, %106, !dbg !58
  %113 = fmul float %107, %108, !dbg !58
  %114 = fmul float %109, %110, !dbg !58
  %115 = fmul float %111, 0x3FA6E4E260000000, !dbg !59
  %116 = fmul float %112, 0x3FA6E4E260000000, !dbg !59
  %117 = fmul float %113, 0x3FA6E4E260000000, !dbg !59
  %118 = fmul float %114, 0x3FA6E4E260000000, !dbg !59
  %119 = fadd float %103, %115, !dbg !56
  %120 = fadd float %105, %116, !dbg !56
  %121 = fadd float %107, %117, !dbg !56
  %122 = fadd float %109, %118, !dbg !56
  %123 = fmul float %119, 0x3FE9884540000000, !dbg !60
  %124 = fmul float %120, 0x3FE9884540000000, !dbg !60
  %125 = fmul float %121, 0x3FE9884540000000, !dbg !60
  %126 = fmul float %122, 0x3FE9884540000000, !dbg !60
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i62 = icmp eq i32 %127, 0, !dbg !61
  %128 = tail call float @llvm.nvvm.fabs.ftz.f(float %123) #5, !dbg !61
  %129 = tail call float @llvm.nvvm.fabs.f(float %123) #5, !dbg !61
  %.01.i63 = select i1 %.not.i62, float %129, float %128, !dbg !61
  %130 = fcmp ult float %.01.i63, 0x3FE3333340000000, !dbg !61
  br i1 %130, label %__internal_fmad.exit3.i69, label %__internal_fmad.exit1.i64, !dbg !61

__internal_fmad.exit1.i64:                        ; preds = %58
  %131 = fmul float %.01.i63, 0x4007154760000000, !dbg !61
  %132 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %131) #5, !dbg !61
  %133 = fadd float %132, 1.000000e+00, !dbg !61
  %134 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %133) #6, !dbg !61, !srcloc !62
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i65 = icmp eq i32 %135, 0, !dbg !61
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %134, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %134, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i66 = select i1 %.not6.i65, float %137, float %136, !dbg !61
  %138 = fcmp oge float %.01.i63, 0x4022059680000000, !dbg !61
  %s.0.i67 = select i1 %138, float 1.000000e+00, float %.03.i66, !dbg !61
  %139 = bitcast float %s.0.i67 to i32, !dbg !61
  %140 = bitcast float %123 to i32, !dbg !61
  %141 = and i32 %140, -2147483648, !dbg !61
  %142 = or i32 %141, %139, !dbg !61
  %143 = bitcast i32 %142 to float, !dbg !61
  br label %__nv_tanhf.exit80, !dbg !61

__internal_fmad.exit3.i69:                        ; preds = %58
  %144 = fmul float %123, %123, !dbg !61
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i70 = icmp eq i32 %145, 0, !dbg !61
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #5, !dbg !61
  %147 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i71 = select i1 %.not1.i70, float %147, float %146, !dbg !61
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i72 = icmp eq i32 %148, 0, !dbg !61
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i71, float %144, float 0x3FC10B2820000000) #5, !dbg !61
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i71, float %144, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i73 = select i1 %.not2.i72, float %150, float %149, !dbg !61
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i74 = icmp eq i32 %151, 0, !dbg !61
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i73, float %144, float 0xBFD5553DA0000000) #5, !dbg !61
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i73, float %144, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i75 = select i1 %.not3.i74, float %153, float %152, !dbg !61
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i76 = icmp eq i32 %154, 0, !dbg !61
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i75, float %144, float 0.000000e+00) #5, !dbg !61
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i75, float %144, float 0.000000e+00) #5, !dbg !61
  %.04.i77 = select i1 %.not4.i76, float %156, float %155, !dbg !61
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i78 = icmp eq i32 %157, 0, !dbg !61
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i77, float %123, float %123) #5, !dbg !61
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i77, float %123, float %123) #5, !dbg !61
  %.02.i79 = select i1 %.not5.i78, float %159, float %158, !dbg !61
  br label %__nv_tanhf.exit80, !dbg !61

__nv_tanhf.exit80:                                ; preds = %__internal_fmad.exit1.i64, %__internal_fmad.exit3.i69
  %s.1.i68 = phi float [ %143, %__internal_fmad.exit1.i64 ], [ %.02.i79, %__internal_fmad.exit3.i69 ], !dbg !61
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i81 = icmp eq i32 %160, 0, !dbg !61
  %161 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !61
  %162 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !61
  %.01.i82 = select i1 %.not.i81, float %162, float %161, !dbg !61
  %163 = fcmp ult float %.01.i82, 0x3FE3333340000000, !dbg !61
  br i1 %163, label %__internal_fmad.exit3.i88, label %__internal_fmad.exit1.i83, !dbg !61

__internal_fmad.exit1.i83:                        ; preds = %__nv_tanhf.exit80
  %164 = fmul float %.01.i82, 0x4007154760000000, !dbg !61
  %165 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %164) #5, !dbg !61
  %166 = fadd float %165, 1.000000e+00, !dbg !61
  %167 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %166) #6, !dbg !61, !srcloc !62
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i84 = icmp eq i32 %168, 0, !dbg !61
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %167, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %167, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i85 = select i1 %.not6.i84, float %170, float %169, !dbg !61
  %171 = fcmp oge float %.01.i82, 0x4022059680000000, !dbg !61
  %s.0.i86 = select i1 %171, float 1.000000e+00, float %.03.i85, !dbg !61
  %172 = bitcast float %s.0.i86 to i32, !dbg !61
  %173 = bitcast float %124 to i32, !dbg !61
  %174 = and i32 %173, -2147483648, !dbg !61
  %175 = or i32 %174, %172, !dbg !61
  %176 = bitcast i32 %175 to float, !dbg !61
  br label %__nv_tanhf.exit99, !dbg !61

__internal_fmad.exit3.i88:                        ; preds = %__nv_tanhf.exit80
  %177 = fmul float %124, %124, !dbg !61
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i89 = icmp eq i32 %178, 0, !dbg !61
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #5, !dbg !61
  %180 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i90 = select i1 %.not1.i89, float %180, float %179, !dbg !61
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i91 = icmp eq i32 %181, 0, !dbg !61
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i90, float %177, float 0x3FC10B2820000000) #5, !dbg !61
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i90, float %177, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i92 = select i1 %.not2.i91, float %183, float %182, !dbg !61
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i93 = icmp eq i32 %184, 0, !dbg !61
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i92, float %177, float 0xBFD5553DA0000000) #5, !dbg !61
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i92, float %177, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i94 = select i1 %.not3.i93, float %186, float %185, !dbg !61
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i95 = icmp eq i32 %187, 0, !dbg !61
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i94, float %177, float 0.000000e+00) #5, !dbg !61
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i94, float %177, float 0.000000e+00) #5, !dbg !61
  %.04.i96 = select i1 %.not4.i95, float %189, float %188, !dbg !61
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i97 = icmp eq i32 %190, 0, !dbg !61
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i96, float %124, float %124) #5, !dbg !61
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i96, float %124, float %124) #5, !dbg !61
  %.02.i98 = select i1 %.not5.i97, float %192, float %191, !dbg !61
  br label %__nv_tanhf.exit99, !dbg !61

__nv_tanhf.exit99:                                ; preds = %__internal_fmad.exit1.i83, %__internal_fmad.exit3.i88
  %s.1.i87 = phi float [ %176, %__internal_fmad.exit1.i83 ], [ %.02.i98, %__internal_fmad.exit3.i88 ], !dbg !61
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i100 = icmp eq i32 %193, 0, !dbg !61
  %194 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !61
  %195 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !61
  %.01.i101 = select i1 %.not.i100, float %195, float %194, !dbg !61
  %196 = fcmp ult float %.01.i101, 0x3FE3333340000000, !dbg !61
  br i1 %196, label %__internal_fmad.exit3.i107, label %__internal_fmad.exit1.i102, !dbg !61

__internal_fmad.exit1.i102:                       ; preds = %__nv_tanhf.exit99
  %197 = fmul float %.01.i101, 0x4007154760000000, !dbg !61
  %198 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %197) #5, !dbg !61
  %199 = fadd float %198, 1.000000e+00, !dbg !61
  %200 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %199) #6, !dbg !61, !srcloc !62
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i103 = icmp eq i32 %201, 0, !dbg !61
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %200, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %200, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i104 = select i1 %.not6.i103, float %203, float %202, !dbg !61
  %204 = fcmp oge float %.01.i101, 0x4022059680000000, !dbg !61
  %s.0.i105 = select i1 %204, float 1.000000e+00, float %.03.i104, !dbg !61
  %205 = bitcast float %s.0.i105 to i32, !dbg !61
  %206 = bitcast float %125 to i32, !dbg !61
  %207 = and i32 %206, -2147483648, !dbg !61
  %208 = or i32 %207, %205, !dbg !61
  %209 = bitcast i32 %208 to float, !dbg !61
  br label %__nv_tanhf.exit118, !dbg !61

__internal_fmad.exit3.i107:                       ; preds = %__nv_tanhf.exit99
  %210 = fmul float %125, %125, !dbg !61
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i108 = icmp eq i32 %211, 0, !dbg !61
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %210, float 0xBFAAC795C0000000) #5, !dbg !61
  %213 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %210, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i109 = select i1 %.not1.i108, float %213, float %212, !dbg !61
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i110 = icmp eq i32 %214, 0, !dbg !61
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i109, float %210, float 0x3FC10B2820000000) #5, !dbg !61
  %216 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i109, float %210, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i111 = select i1 %.not2.i110, float %216, float %215, !dbg !61
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i112 = icmp eq i32 %217, 0, !dbg !61
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i111, float %210, float 0xBFD5553DA0000000) #5, !dbg !61
  %219 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i111, float %210, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i113 = select i1 %.not3.i112, float %219, float %218, !dbg !61
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i114 = icmp eq i32 %220, 0, !dbg !61
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i113, float %210, float 0.000000e+00) #5, !dbg !61
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i113, float %210, float 0.000000e+00) #5, !dbg !61
  %.04.i115 = select i1 %.not4.i114, float %222, float %221, !dbg !61
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i116 = icmp eq i32 %223, 0, !dbg !61
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i115, float %125, float %125) #5, !dbg !61
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i115, float %125, float %125) #5, !dbg !61
  %.02.i117 = select i1 %.not5.i116, float %225, float %224, !dbg !61
  br label %__nv_tanhf.exit118, !dbg !61

__nv_tanhf.exit118:                               ; preds = %__internal_fmad.exit1.i102, %__internal_fmad.exit3.i107
  %s.1.i106 = phi float [ %209, %__internal_fmad.exit1.i102 ], [ %.02.i117, %__internal_fmad.exit3.i107 ], !dbg !61
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i119 = icmp eq i32 %226, 0, !dbg !61
  %227 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !61
  %228 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !61
  %.01.i120 = select i1 %.not.i119, float %228, float %227, !dbg !61
  %229 = fcmp ult float %.01.i120, 0x3FE3333340000000, !dbg !61
  br i1 %229, label %__internal_fmad.exit3.i126, label %__internal_fmad.exit1.i121, !dbg !61

__internal_fmad.exit1.i121:                       ; preds = %__nv_tanhf.exit118
  %230 = fmul float %.01.i120, 0x4007154760000000, !dbg !61
  %231 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %230) #5, !dbg !61
  %232 = fadd float %231, 1.000000e+00, !dbg !61
  %233 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %232) #6, !dbg !61, !srcloc !62
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i122 = icmp eq i32 %234, 0, !dbg !61
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %233, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %233, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i123 = select i1 %.not6.i122, float %236, float %235, !dbg !61
  %237 = fcmp oge float %.01.i120, 0x4022059680000000, !dbg !61
  %s.0.i124 = select i1 %237, float 1.000000e+00, float %.03.i123, !dbg !61
  %238 = bitcast float %s.0.i124 to i32, !dbg !61
  %239 = bitcast float %126 to i32, !dbg !61
  %240 = and i32 %239, -2147483648, !dbg !61
  %241 = or i32 %240, %238, !dbg !61
  %242 = bitcast i32 %241 to float, !dbg !61
  br label %__nv_tanhf.exit137, !dbg !61

__internal_fmad.exit3.i126:                       ; preds = %__nv_tanhf.exit118
  %243 = fmul float %126, %126, !dbg !61
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i127 = icmp eq i32 %244, 0, !dbg !61
  %245 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %243, float 0xBFAAC795C0000000) #5, !dbg !61
  %246 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %243, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i128 = select i1 %.not1.i127, float %246, float %245, !dbg !61
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i129 = icmp eq i32 %247, 0, !dbg !61
  %248 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i128, float %243, float 0x3FC10B2820000000) #5, !dbg !61
  %249 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i128, float %243, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i130 = select i1 %.not2.i129, float %249, float %248, !dbg !61
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i131 = icmp eq i32 %250, 0, !dbg !61
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i130, float %243, float 0xBFD5553DA0000000) #5, !dbg !61
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i130, float %243, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i132 = select i1 %.not3.i131, float %252, float %251, !dbg !61
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i133 = icmp eq i32 %253, 0, !dbg !61
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i132, float %243, float 0.000000e+00) #5, !dbg !61
  %255 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i132, float %243, float 0.000000e+00) #5, !dbg !61
  %.04.i134 = select i1 %.not4.i133, float %255, float %254, !dbg !61
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i135 = icmp eq i32 %256, 0, !dbg !61
  %257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i134, float %126, float %126) #5, !dbg !61
  %258 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i134, float %126, float %126) #5, !dbg !61
  %.02.i136 = select i1 %.not5.i135, float %258, float %257, !dbg !61
  br label %__nv_tanhf.exit137, !dbg !61

__nv_tanhf.exit137:                               ; preds = %__internal_fmad.exit1.i121, %__internal_fmad.exit3.i126
  %s.1.i125 = phi float [ %242, %__internal_fmad.exit1.i121 ], [ %.02.i136, %__internal_fmad.exit3.i126 ], !dbg !61
  %259 = insertelement <2 x float> poison, float %s.1.i68, i64 0, !dbg !63
  %260 = insertelement <2 x float> %259, float %s.1.i87, i64 1, !dbg !63
  %261 = fadd <2 x float> %260, splat (float 1.000000e+00), !dbg !63
  %262 = insertelement <2 x float> poison, float %s.1.i106, i64 0, !dbg !63
  %263 = insertelement <2 x float> %262, float %s.1.i125, i64 1, !dbg !63
  %264 = fadd <2 x float> %263, splat (float 1.000000e+00), !dbg !63
  %265 = fmul <2 x float> %102, %264, !dbg !64
  %266 = extractelement <2 x float> %265, i64 0, !dbg !65
  %267 = fcmp olt float %59, %266, !dbg !67
  %268 = extractelement <2 x float> %265, i64 1, !dbg !65
  %269 = fcmp olt float %60, %268, !dbg !67
  %270 = fcmp uno <2 x float> %61, zeroinitializer, !dbg !68
  %271 = fcmp uno float %59, 0.000000e+00, !dbg !68
  %272 = fcmp uno float %60, 0.000000e+00, !dbg !68
  %273 = or i1 %271, %267, !dbg !69
  %274 = or i1 %272, %269, !dbg !69
  %275 = fmul <2 x float> %101, %261, !dbg !64
  %276 = fcmp olt <2 x float> %61, %275, !dbg !67
  %277 = or <2 x i1> %270, %276, !dbg !69
  %278 = select <2 x i1> %277, <2 x float> %61, <2 x float> %275, !dbg !65
  %279 = select i1 %273, float %59, float %266, !dbg !65
  %280 = select i1 %274, float %60, float %268, !dbg !65
  %281 = select <2 x i1> %53, <2 x float> %278, <2 x float> %61, !dbg !39
  %282 = select i1 %20, float %279, float %59, !dbg !39
  %283 = select i1 %20, float %280, float %60, !dbg !39
  %284 = fcmp uno <4 x float> %62, zeroinitializer, !dbg !70
  %285 = shufflevector <2 x float> %265, <2 x float> %275, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !72
  %286 = fcmp ogt <4 x float> %62, %285, !dbg !72
  %287 = or <4 x i1> %284, %286, !dbg !73
  %288 = select <4 x i1> %287, <4 x float> %62, <4 x float> %285, !dbg !74
  %289 = select <4 x i1> %57, <4 x float> %288, <4 x float> %62, !dbg !41
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !75
  %291 = bitcast float %103 to i32, !dbg !76
  %292 = bitcast float %105 to i32, !dbg !76
  %293 = bitcast float %107 to i32, !dbg !76
  %294 = bitcast float %109 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %290, i1 %20) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !38
  %295 = icmp samesign ult i64 %indvars.iv, 12032, !dbg !38
  br i1 %295, label %58, label %296, !dbg !38

296:                                              ; preds = %__nv_tanhf.exit137
  %297 = lshr i32 %15, 5, !dbg !11
  %298 = and i32 %15, 7, !dbg !11
  %299 = or disjoint i32 %14, %298, !dbg !12
  %300 = icmp slt i32 %299, 3600, !dbg !13
  %301 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %281, <2 x i32> <i32 0, i32 2>, !dbg !77
  %302 = fcmp olt <2 x float> %301, %281, !dbg !77
  %303 = fcmp uno <2 x float> %301, %281, !dbg !77
  %shift = shufflevector <2 x i1> %302, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %304 = or <2 x i1> %shift, %303, !dbg !80
  %305 = extractelement <2 x i1> %304, i64 0, !dbg !80
  %306 = extractelement <2 x float> %281, i64 0, !dbg !81
  %307 = extractelement <2 x float> %281, i64 1, !dbg !81
  %308 = select i1 %305, float %306, float %307, !dbg !81
  %309 = fcmp olt float %308, %282, !dbg !77
  %310 = fcmp uno float %308, 0.000000e+00, !dbg !82
  %311 = or i1 %309, %310, !dbg !80
  %312 = select i1 %311, float %308, float %282, !dbg !81
  %313 = fcmp olt float %312, %283, !dbg !77
  %314 = fcmp uno float %312, 0.000000e+00, !dbg !82
  %315 = or i1 %313, %314, !dbg !80
  %316 = select i1 %315, float %312, float %283, !dbg !81
  %317 = bitcast float %316 to i32, !dbg !83
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 16, i32 31), !dbg !83
  %319 = bitcast i32 %318 to float, !dbg !83
  %320 = fcmp olt float %316, %319, !dbg !77
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !82
  %322 = or i1 %321, %320, !dbg !80
  %323 = select i1 %322, float %316, float %319, !dbg !81
  %324 = bitcast float %323 to i32, !dbg !83
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 8, i32 31), !dbg !83
  %326 = bitcast i32 %325 to float, !dbg !83
  %327 = fcmp olt float %323, %326, !dbg !77
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !82
  %329 = or i1 %327, %328, !dbg !80
  %330 = select i1 %329, float %323, float %326, !dbg !81
  %331 = bitcast float %330 to i32, !dbg !83
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !83
  %333 = bitcast i32 %332 to float, !dbg !83
  %334 = fcmp olt float %330, %333, !dbg !77
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !82
  %336 = or i1 %334, %335, !dbg !80
  %337 = select i1 %336, float %330, float %333, !dbg !81
  %338 = bitcast float %337 to i32, !dbg !83
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !83
  %340 = bitcast i32 %339 to float, !dbg !83
  %341 = fcmp olt float %337, %340, !dbg !77
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !82
  %343 = or i1 %341, %342, !dbg !80
  %344 = select i1 %343, float %337, float %340, !dbg !81
  %345 = bitcast float %344 to i32, !dbg !83
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !83
  %347 = bitcast i32 %346 to float, !dbg !83
  %348 = fcmp olt float %344, %347, !dbg !77
  %349 = fcmp uno float %344, 0.000000e+00, !dbg !82
  %350 = or i1 %348, %349, !dbg !80
  %351 = and i32 %297, 1, !dbg !83
  %352 = icmp eq i32 %18, 0, !dbg !83
  %353 = shl nuw nsw i32 %17, 1, !dbg !83
  %354 = or disjoint i32 %353, %351, !dbg !83
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !83
  %356 = select i1 %350, i32 %345, i32 %346, !dbg !81
  %357 = insertelement <1 x i32> poison, i32 %356, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %357, i1 %352) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %358 = icmp slt i32 %15, 16, !dbg !83
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !83
  %360 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %359, i1 %358) #5, !dbg !83
  %361 = bitcast i32 %360 to float, !dbg !83
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !83
  %363 = bitcast i32 %362 to float, !dbg !83
  %364 = fcmp olt float %361, %363, !dbg !77
  %365 = fcmp uno float %361, 0.000000e+00, !dbg !82
  %366 = or i1 %365, %364, !dbg !80
  %367 = and i32 %15, 1, !dbg !83
  %368 = icmp eq i32 %367, 0, !dbg !83
  %369 = and i1 %358, %368, !dbg !83
  %370 = select i1 %366, i32 %360, i32 %362, !dbg !81
  %371 = insertelement <1 x i32> poison, i32 %370, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %371, i1 %369) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !83
  %373 = load float, ptr addrspace(3) %372, align 8, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %374 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !84
  %375 = bitcast float %373 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #5, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %376 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %298, !dbg !84
  %377 = load float, ptr addrspace(3) %376, align 4, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %378 = extractelement <4 x float> %289, i64 2, !dbg !87
  %379 = extractelement <4 x float> %289, i64 3, !dbg !87
  %380 = fcmp ogt float %379, %378, !dbg !87
  %381 = fcmp uno float %379, 0.000000e+00, !dbg !88
  %382 = or i1 %380, %381, !dbg !89
  %383 = select i1 %382, float %379, float %378, !dbg !90
  %384 = extractelement <4 x float> %289, i64 1, !dbg !87
  %385 = fcmp ogt float %383, %384, !dbg !87
  %386 = fcmp uno float %383, 0.000000e+00, !dbg !88
  %387 = or i1 %385, %386, !dbg !89
  %388 = select i1 %387, float %383, float %384, !dbg !90
  %389 = extractelement <4 x float> %289, i64 0, !dbg !87
  %390 = fcmp ogt float %388, %389, !dbg !87
  %391 = fcmp uno float %388, 0.000000e+00, !dbg !88
  %392 = or i1 %390, %391, !dbg !89
  %393 = select i1 %392, float %388, float %389, !dbg !90
  %394 = bitcast float %393 to i32, !dbg !85
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 16, i32 31), !dbg !85
  %396 = bitcast i32 %395 to float, !dbg !85
  %397 = fcmp ogt float %393, %396, !dbg !87
  %398 = fcmp uno float %393, 0.000000e+00, !dbg !88
  %399 = or i1 %398, %397, !dbg !89
  %400 = select i1 %399, float %393, float %396, !dbg !90
  %401 = bitcast float %400 to i32, !dbg !85
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 8, i32 31), !dbg !85
  %403 = bitcast i32 %402 to float, !dbg !85
  %404 = fcmp ogt float %400, %403, !dbg !87
  %405 = fcmp uno float %400, 0.000000e+00, !dbg !88
  %406 = or i1 %404, %405, !dbg !89
  %407 = select i1 %406, float %400, float %403, !dbg !90
  %408 = bitcast float %407 to i32, !dbg !85
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 4, i32 31), !dbg !85
  %410 = bitcast i32 %409 to float, !dbg !85
  %411 = fcmp ogt float %407, %410, !dbg !87
  %412 = fcmp uno float %407, 0.000000e+00, !dbg !88
  %413 = or i1 %411, %412, !dbg !89
  %414 = select i1 %413, float %407, float %410, !dbg !90
  %415 = bitcast float %414 to i32, !dbg !85
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 2, i32 31), !dbg !85
  %417 = bitcast i32 %416 to float, !dbg !85
  %418 = fcmp ogt float %414, %417, !dbg !87
  %419 = fcmp uno float %414, 0.000000e+00, !dbg !88
  %420 = or i1 %418, %419, !dbg !89
  %421 = select i1 %420, float %414, float %417, !dbg !90
  %422 = bitcast float %421 to i32, !dbg !85
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !85
  %424 = bitcast i32 %423 to float, !dbg !85
  %425 = fcmp ogt float %421, %424, !dbg !87
  %426 = fcmp uno float %421, 0.000000e+00, !dbg !88
  %427 = or i1 %425, %426, !dbg !89
  %428 = select i1 %427, i32 %422, i32 %423, !dbg !90
  %429 = insertelement <1 x i32> poison, i32 %428, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %429, i1 %352) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %430 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %359, i1 %358) #5, !dbg !85
  %431 = bitcast i32 %430 to float, !dbg !85
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 1, i32 31), !dbg !85
  %433 = bitcast i32 %432 to float, !dbg !85
  %434 = fcmp ogt float %431, %433, !dbg !87
  %435 = fcmp uno float %431, 0.000000e+00, !dbg !88
  %436 = or i1 %435, %434, !dbg !89
  %437 = select i1 %436, i32 %430, i32 %432, !dbg !90
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %438, i1 %369) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %439 = load float, ptr addrspace(3) %372, align 8, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %440 = bitcast float %439 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %440, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %441 = load float, ptr addrspace(3) %376, align 4, !dbg !91
  %442 = sext i32 %299 to i64, !dbg !92
  %443 = getelementptr bfloat, ptr addrspace(1) %6, i64 %442, !dbg !92
  %444 = fptrunc float %377 to bfloat, !dbg !84
  %445 = and i32 %15, 504, !dbg !84
  %446 = icmp eq i32 %445, 0, !dbg !84
  %447 = bitcast bfloat %444 to i16, !dbg !84
  %448 = and i1 %446, %300, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %447, ptr addrspace(1) %443, i1 %448) #5, !dbg !84
  %449 = getelementptr bfloat, ptr addrspace(1) %7, i64 %442, !dbg !93
  %450 = fptrunc float %441 to bfloat, !dbg !91
  %451 = bitcast bfloat %450 to i16, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %451, ptr addrspace(1) %449, i1 %448) #5, !dbg !91
  %.inv3 = fcmp oge float %373, 0.000000e+00, !dbg !94
  %452 = select i1 %.inv3, float 0.000000e+00, float %373, !dbg !94
  %453 = fsub float 0.000000e+00, %452, !dbg !96
  %.inv4 = fcmp ole float %439, 0.000000e+00, !dbg !97
  %454 = select i1 %.inv4, float 0.000000e+00, float %439, !dbg !97
  %455 = fcmp ogt float %453, %454, !dbg !99
  %456 = fcmp uno float %453, 0.000000e+00, !dbg !101
  %457 = or i1 %456, %455, !dbg !102
  %458 = select i1 %457, float %453, float %454, !dbg !103
  %459 = fmul float %458, 0x3F80204080000000, !dbg !104
  %460 = fcmp ogt float %459, 0x3EE4F8B580000000, !dbg !105
  %461 = fcmp uno float %459, 0.000000e+00, !dbg !107
  %462 = or i1 %460, %461, !dbg !108
  %463 = select i1 %462, float %459, float 0x3EE4F8B580000000, !dbg !109
  %464 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %463), !dbg !110
  %465 = or disjoint i32 %36, %22
  br label %466, !dbg !111

466:                                              ; preds = %296, %__nv_tanhf.exit61
  %indvars.iv146 = phi i64 [ 0, %296 ], [ %indvars.iv.next147, %__nv_tanhf.exit61 ]
  %467 = trunc nuw nsw i64 %indvars.iv146 to i32, !dbg !112
  %468 = add i32 %465, %467, !dbg !112
  %469 = sext i32 %468 to i64, !dbg !113
  %470 = getelementptr float, ptr addrspace(1) %5, i64 %469, !dbg !113
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i1 %20) #5, !dbg !114
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !114
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !114
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !114
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !114
  %476 = bitcast i32 %472 to float, !dbg !114
  %477 = bitcast i32 %473 to float, !dbg !114
  %478 = bitcast i32 %474 to float, !dbg !114
  %479 = bitcast i32 %475 to float, !dbg !114
  %480 = fmul float %476, 5.000000e-01, !dbg !115
  %481 = fmul float %477, 5.000000e-01, !dbg !115
  %482 = fmul float %478, 5.000000e-01, !dbg !115
  %483 = fmul float %479, 5.000000e-01, !dbg !115
  %484 = fmul float %476, %476, !dbg !116
  %485 = fmul float %477, %477, !dbg !116
  %486 = fmul float %478, %478, !dbg !116
  %487 = fmul float %479, %479, !dbg !116
  %488 = fmul float %484, %476, !dbg !117
  %489 = fmul float %485, %477, !dbg !117
  %490 = fmul float %486, %478, !dbg !117
  %491 = fmul float %487, %479, !dbg !117
  %492 = fmul float %488, 0x3FA6E4E260000000, !dbg !118
  %493 = fmul float %489, 0x3FA6E4E260000000, !dbg !118
  %494 = fmul float %490, 0x3FA6E4E260000000, !dbg !118
  %495 = fmul float %491, 0x3FA6E4E260000000, !dbg !118
  %496 = fadd float %492, %476, !dbg !119
  %497 = fadd float %493, %477, !dbg !119
  %498 = fadd float %494, %478, !dbg !119
  %499 = fadd float %495, %479, !dbg !119
  %500 = fmul float %496, 0x3FE9884540000000, !dbg !120
  %501 = fmul float %497, 0x3FE9884540000000, !dbg !120
  %502 = fmul float %498, 0x3FE9884540000000, !dbg !120
  %503 = fmul float %499, 0x3FE9884540000000, !dbg !120
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i = icmp eq i32 %504, 0, !dbg !121
  %505 = tail call float @llvm.nvvm.fabs.ftz.f(float %500) #5, !dbg !121
  %506 = tail call float @llvm.nvvm.fabs.f(float %500) #5, !dbg !121
  %.01.i = select i1 %.not.i, float %506, float %505, !dbg !121
  %507 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !121
  br i1 %507, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !121

__internal_fmad.exit1.i:                          ; preds = %466
  %508 = fmul float %.01.i, 0x4007154760000000, !dbg !121
  %509 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %508) #5, !dbg !121
  %510 = fadd float %509, 1.000000e+00, !dbg !121
  %511 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %510) #6, !dbg !121, !srcloc !62
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i = icmp eq i32 %512, 0, !dbg !121
  %513 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %511, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %514 = tail call float @llvm.nvvm.fma.rn.f(float %511, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i = select i1 %.not6.i, float %514, float %513, !dbg !121
  %515 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !121
  %s.0.i = select i1 %515, float 1.000000e+00, float %.03.i, !dbg !121
  %516 = bitcast float %s.0.i to i32, !dbg !121
  %517 = bitcast float %500 to i32, !dbg !121
  %518 = and i32 %517, -2147483648, !dbg !121
  %519 = or i32 %518, %516, !dbg !121
  %520 = bitcast i32 %519 to float, !dbg !121
  br label %__nv_tanhf.exit, !dbg !121

__internal_fmad.exit3.i:                          ; preds = %466
  %521 = fmul float %500, %500, !dbg !121
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i = icmp eq i32 %522, 0, !dbg !121
  %523 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %521, float 0xBFAAC795C0000000) #5, !dbg !121
  %524 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %521, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i = select i1 %.not1.i, float %524, float %523, !dbg !121
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i = icmp eq i32 %525, 0, !dbg !121
  %526 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %521, float 0x3FC10B2820000000) #5, !dbg !121
  %527 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %521, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i = select i1 %.not2.i, float %527, float %526, !dbg !121
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i = icmp eq i32 %528, 0, !dbg !121
  %529 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %521, float 0xBFD5553DA0000000) #5, !dbg !121
  %530 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %521, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i = select i1 %.not3.i, float %530, float %529, !dbg !121
  %531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i = icmp eq i32 %531, 0, !dbg !121
  %532 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %521, float 0.000000e+00) #5, !dbg !121
  %533 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %521, float 0.000000e+00) #5, !dbg !121
  %.04.i = select i1 %.not4.i, float %533, float %532, !dbg !121
  %534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i = icmp eq i32 %534, 0, !dbg !121
  %535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %500, float %500) #5, !dbg !121
  %536 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %500, float %500) #5, !dbg !121
  %.02.i = select i1 %.not5.i, float %536, float %535, !dbg !121
  br label %__nv_tanhf.exit, !dbg !121

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %520, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !121
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i5 = icmp eq i32 %537, 0, !dbg !121
  %538 = tail call float @llvm.nvvm.fabs.ftz.f(float %501) #5, !dbg !121
  %539 = tail call float @llvm.nvvm.fabs.f(float %501) #5, !dbg !121
  %.01.i6 = select i1 %.not.i5, float %539, float %538, !dbg !121
  %540 = fcmp ult float %.01.i6, 0x3FE3333340000000, !dbg !121
  br i1 %540, label %__internal_fmad.exit3.i12, label %__internal_fmad.exit1.i7, !dbg !121

__internal_fmad.exit1.i7:                         ; preds = %__nv_tanhf.exit
  %541 = fmul float %.01.i6, 0x4007154760000000, !dbg !121
  %542 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %541) #5, !dbg !121
  %543 = fadd float %542, 1.000000e+00, !dbg !121
  %544 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %543) #6, !dbg !121, !srcloc !62
  %545 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i8 = icmp eq i32 %545, 0, !dbg !121
  %546 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %544, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %547 = tail call float @llvm.nvvm.fma.rn.f(float %544, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i9 = select i1 %.not6.i8, float %547, float %546, !dbg !121
  %548 = fcmp oge float %.01.i6, 0x4022059680000000, !dbg !121
  %s.0.i10 = select i1 %548, float 1.000000e+00, float %.03.i9, !dbg !121
  %549 = bitcast float %s.0.i10 to i32, !dbg !121
  %550 = bitcast float %501 to i32, !dbg !121
  %551 = and i32 %550, -2147483648, !dbg !121
  %552 = or i32 %551, %549, !dbg !121
  %553 = bitcast i32 %552 to float, !dbg !121
  br label %__nv_tanhf.exit23, !dbg !121

__internal_fmad.exit3.i12:                        ; preds = %__nv_tanhf.exit
  %554 = fmul float %501, %501, !dbg !121
  %555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i13 = icmp eq i32 %555, 0, !dbg !121
  %556 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %554, float 0xBFAAC795C0000000) #5, !dbg !121
  %557 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %554, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i14 = select i1 %.not1.i13, float %557, float %556, !dbg !121
  %558 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i15 = icmp eq i32 %558, 0, !dbg !121
  %559 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i14, float %554, float 0x3FC10B2820000000) #5, !dbg !121
  %560 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i14, float %554, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i16 = select i1 %.not2.i15, float %560, float %559, !dbg !121
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i17 = icmp eq i32 %561, 0, !dbg !121
  %562 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %554, float 0xBFD5553DA0000000) #5, !dbg !121
  %563 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %554, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i18 = select i1 %.not3.i17, float %563, float %562, !dbg !121
  %564 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i19 = icmp eq i32 %564, 0, !dbg !121
  %565 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %554, float 0.000000e+00) #5, !dbg !121
  %566 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %554, float 0.000000e+00) #5, !dbg !121
  %.04.i20 = select i1 %.not4.i19, float %566, float %565, !dbg !121
  %567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i21 = icmp eq i32 %567, 0, !dbg !121
  %568 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i20, float %501, float %501) #5, !dbg !121
  %569 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i20, float %501, float %501) #5, !dbg !121
  %.02.i22 = select i1 %.not5.i21, float %569, float %568, !dbg !121
  br label %__nv_tanhf.exit23, !dbg !121

__nv_tanhf.exit23:                                ; preds = %__internal_fmad.exit1.i7, %__internal_fmad.exit3.i12
  %s.1.i11 = phi float [ %553, %__internal_fmad.exit1.i7 ], [ %.02.i22, %__internal_fmad.exit3.i12 ], !dbg !121
  %570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i24 = icmp eq i32 %570, 0, !dbg !121
  %571 = tail call float @llvm.nvvm.fabs.ftz.f(float %502) #5, !dbg !121
  %572 = tail call float @llvm.nvvm.fabs.f(float %502) #5, !dbg !121
  %.01.i25 = select i1 %.not.i24, float %572, float %571, !dbg !121
  %573 = fcmp ult float %.01.i25, 0x3FE3333340000000, !dbg !121
  br i1 %573, label %__internal_fmad.exit3.i31, label %__internal_fmad.exit1.i26, !dbg !121

__internal_fmad.exit1.i26:                        ; preds = %__nv_tanhf.exit23
  %574 = fmul float %.01.i25, 0x4007154760000000, !dbg !121
  %575 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %574) #5, !dbg !121
  %576 = fadd float %575, 1.000000e+00, !dbg !121
  %577 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %576) #6, !dbg !121, !srcloc !62
  %578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i27 = icmp eq i32 %578, 0, !dbg !121
  %579 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %577, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %580 = tail call float @llvm.nvvm.fma.rn.f(float %577, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i28 = select i1 %.not6.i27, float %580, float %579, !dbg !121
  %581 = fcmp oge float %.01.i25, 0x4022059680000000, !dbg !121
  %s.0.i29 = select i1 %581, float 1.000000e+00, float %.03.i28, !dbg !121
  %582 = bitcast float %s.0.i29 to i32, !dbg !121
  %583 = bitcast float %502 to i32, !dbg !121
  %584 = and i32 %583, -2147483648, !dbg !121
  %585 = or i32 %584, %582, !dbg !121
  %586 = bitcast i32 %585 to float, !dbg !121
  br label %__nv_tanhf.exit42, !dbg !121

__internal_fmad.exit3.i31:                        ; preds = %__nv_tanhf.exit23
  %587 = fmul float %502, %502, !dbg !121
  %588 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i32 = icmp eq i32 %588, 0, !dbg !121
  %589 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %587, float 0xBFAAC795C0000000) #5, !dbg !121
  %590 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %587, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i33 = select i1 %.not1.i32, float %590, float %589, !dbg !121
  %591 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i34 = icmp eq i32 %591, 0, !dbg !121
  %592 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i33, float %587, float 0x3FC10B2820000000) #5, !dbg !121
  %593 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i33, float %587, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i35 = select i1 %.not2.i34, float %593, float %592, !dbg !121
  %594 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i36 = icmp eq i32 %594, 0, !dbg !121
  %595 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %587, float 0xBFD5553DA0000000) #5, !dbg !121
  %596 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %587, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i37 = select i1 %.not3.i36, float %596, float %595, !dbg !121
  %597 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i38 = icmp eq i32 %597, 0, !dbg !121
  %598 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i37, float %587, float 0.000000e+00) #5, !dbg !121
  %599 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i37, float %587, float 0.000000e+00) #5, !dbg !121
  %.04.i39 = select i1 %.not4.i38, float %599, float %598, !dbg !121
  %600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i40 = icmp eq i32 %600, 0, !dbg !121
  %601 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i39, float %502, float %502) #5, !dbg !121
  %602 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i39, float %502, float %502) #5, !dbg !121
  %.02.i41 = select i1 %.not5.i40, float %602, float %601, !dbg !121
  br label %__nv_tanhf.exit42, !dbg !121

__nv_tanhf.exit42:                                ; preds = %__internal_fmad.exit1.i26, %__internal_fmad.exit3.i31
  %s.1.i30 = phi float [ %586, %__internal_fmad.exit1.i26 ], [ %.02.i41, %__internal_fmad.exit3.i31 ], !dbg !121
  %603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i43 = icmp eq i32 %603, 0, !dbg !121
  %604 = tail call float @llvm.nvvm.fabs.ftz.f(float %503) #5, !dbg !121
  %605 = tail call float @llvm.nvvm.fabs.f(float %503) #5, !dbg !121
  %.01.i44 = select i1 %.not.i43, float %605, float %604, !dbg !121
  %606 = fcmp ult float %.01.i44, 0x3FE3333340000000, !dbg !121
  br i1 %606, label %__internal_fmad.exit3.i50, label %__internal_fmad.exit1.i45, !dbg !121

__internal_fmad.exit1.i45:                        ; preds = %__nv_tanhf.exit42
  %607 = fmul float %.01.i44, 0x4007154760000000, !dbg !121
  %608 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %607) #5, !dbg !121
  %609 = fadd float %608, 1.000000e+00, !dbg !121
  %610 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %609) #6, !dbg !121, !srcloc !62
  %611 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i46 = icmp eq i32 %611, 0, !dbg !121
  %612 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %610, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %613 = tail call float @llvm.nvvm.fma.rn.f(float %610, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i47 = select i1 %.not6.i46, float %613, float %612, !dbg !121
  %614 = fcmp oge float %.01.i44, 0x4022059680000000, !dbg !121
  %s.0.i48 = select i1 %614, float 1.000000e+00, float %.03.i47, !dbg !121
  %615 = bitcast float %s.0.i48 to i32, !dbg !121
  %616 = bitcast float %503 to i32, !dbg !121
  %617 = and i32 %616, -2147483648, !dbg !121
  %618 = or i32 %617, %615, !dbg !121
  %619 = bitcast i32 %618 to float, !dbg !121
  br label %__nv_tanhf.exit61, !dbg !121

__internal_fmad.exit3.i50:                        ; preds = %__nv_tanhf.exit42
  %620 = fmul float %503, %503, !dbg !121
  %621 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i51 = icmp eq i32 %621, 0, !dbg !121
  %622 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %620, float 0xBFAAC795C0000000) #5, !dbg !121
  %623 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %620, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i52 = select i1 %.not1.i51, float %623, float %622, !dbg !121
  %624 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i53 = icmp eq i32 %624, 0, !dbg !121
  %625 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i52, float %620, float 0x3FC10B2820000000) #5, !dbg !121
  %626 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i52, float %620, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i54 = select i1 %.not2.i53, float %626, float %625, !dbg !121
  %627 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i55 = icmp eq i32 %627, 0, !dbg !121
  %628 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i54, float %620, float 0xBFD5553DA0000000) #5, !dbg !121
  %629 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i54, float %620, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i56 = select i1 %.not3.i55, float %629, float %628, !dbg !121
  %630 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i57 = icmp eq i32 %630, 0, !dbg !121
  %631 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i56, float %620, float 0.000000e+00) #5, !dbg !121
  %632 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i56, float %620, float 0.000000e+00) #5, !dbg !121
  %.04.i58 = select i1 %.not4.i57, float %632, float %631, !dbg !121
  %633 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i59 = icmp eq i32 %633, 0, !dbg !121
  %634 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i58, float %503, float %503) #5, !dbg !121
  %635 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i58, float %503, float %503) #5, !dbg !121
  %.02.i60 = select i1 %.not5.i59, float %635, float %634, !dbg !121
  br label %__nv_tanhf.exit61, !dbg !121

__nv_tanhf.exit61:                                ; preds = %__internal_fmad.exit1.i45, %__internal_fmad.exit3.i50
  %s.1.i49 = phi float [ %619, %__internal_fmad.exit1.i45 ], [ %.02.i60, %__internal_fmad.exit3.i50 ], !dbg !121
  %636 = fadd float %s.1.i, 1.000000e+00, !dbg !122
  %637 = fadd float %s.1.i11, 1.000000e+00, !dbg !122
  %638 = fadd float %s.1.i30, 1.000000e+00, !dbg !122
  %639 = fadd float %s.1.i49, 1.000000e+00, !dbg !122
  %640 = fmul float %480, %636, !dbg !123
  %641 = fmul float %481, %637, !dbg !123
  %642 = fmul float %482, %638, !dbg !123
  %643 = fmul float %483, %639, !dbg !123
  %644 = fmul float %464, %640, !dbg !124
  %645 = fmul float %464, %641, !dbg !124
  %646 = fmul float %464, %642, !dbg !124
  %647 = fmul float %464, %643, !dbg !124
  %648 = tail call float @llvm.nvvm.round.f(float %644) #5, !dbg !125
  %649 = tail call float @llvm.nvvm.round.f(float %645) #5, !dbg !125
  %650 = tail call float @llvm.nvvm.round.f(float %646) #5, !dbg !125
  %651 = tail call float @llvm.nvvm.round.f(float %647) #5, !dbg !125
  %652 = insertelement <4 x float> poison, float %648, i64 0, !dbg !126
  %653 = insertelement <4 x float> %652, float %649, i64 1, !dbg !126
  %654 = insertelement <4 x float> %653, float %650, i64 2, !dbg !126
  %655 = insertelement <4 x float> %654, float %651, i64 3, !dbg !126
  %656 = fcmp ogt <4 x float> %655, splat (float -1.270000e+02), !dbg !126
  %657 = fcmp uno <4 x float> %655, zeroinitializer, !dbg !128
  %658 = or <4 x i1> %656, %657, !dbg !129
  %659 = select <4 x i1> %658, <4 x float> %655, <4 x float> splat (float -1.270000e+02), !dbg !130
  %660 = fcmp olt <4 x float> %659, splat (float 1.270000e+02), !dbg !131
  %661 = fcmp uno <4 x float> %659, zeroinitializer, !dbg !133
  %662 = or <4 x i1> %660, %661, !dbg !134
  %663 = fptosi <4 x float> %659 to <4 x i8>, !dbg !135
  %664 = select <4 x i1> %662, <4 x i8> %663, <4 x i8> splat (i8 127), !dbg !136
  %665 = getelementptr i8, ptr addrspace(1) %8, i64 %469, !dbg !137
  %666 = bitcast <4 x i8> %664 to i32, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %666, ptr addrspace(1) %665, i1 %20) #5, !dbg !138
  %indvars.iv.next147 = add nuw nsw i64 %indvars.iv146, 256, !dbg !111
  %667 = icmp samesign ult i64 %indvars.iv146, 12032, !dbg !111
  br i1 %667, label %466, label %668, !dbg !111

668:                                              ; preds = %__nv_tanhf.exit61
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 74, column: 50, scope: !6)
!40 = !DILocation(line: 54, column: 23, scope: !6)
!41 = !DILocation(line: 76, column: 50, scope: !6)
!42 = !DILocation(line: 34, column: 31, scope: !6)
!43 = !DILocation(line: 39, column: 41, scope: !6)
!44 = !DILocation(line: 39, column: 34, scope: !6)
!45 = !DILocation(line: 39, column: 52, scope: !6)
!46 = !DILocation(line: 40, column: 35, scope: !6)
!47 = !DILocation(line: 40, column: 42, scope: !6)
!48 = !DILocation(line: 41, column: 35, scope: !6)
!49 = !DILocation(line: 41, column: 42, scope: !6)
!50 = !DILocation(line: 40, column: 95, scope: !6)
!51 = !DILocation(line: 41, column: 95, scope: !6)
!52 = !DILocation(line: 42, column: 23, scope: !6)
!53 = !DILocation(line: 55, column: 24, scope: !6)
!54 = !DILocation(line: 56, column: 24, scope: !6)
!55 = !DILocation(line: 59, column: 24, scope: !6)
!56 = !DILocation(line: 64, column: 24, scope: !6)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 24, scope: !6)
!60 = !DILocation(line: 66, column: 24, scope: !6)
!61 = !DILocation(line: 67, column: 31, scope: !6)
!62 = !{i32 21046}
!63 = !DILocation(line: 69, column: 24, scope: !6)
!64 = !DILocation(line: 70, column: 24, scope: !6)
!65 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !66)
!66 = !DILocation(line: 73, column: 47, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !66)
!70 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !71)
!71 = !DILocation(line: 75, column: 47, scope: !6)
!72 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !71)
!73 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !71)
!74 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !71)
!75 = !DILocation(line: 77, column: 29, scope: !6)
!76 = !DILocation(line: 77, column: 54, scope: !6)
!77 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!79 = !DILocation(line: 78, column: 40, scope: !6)
!80 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !79)
!84 = !DILocation(line: 80, column: 37, scope: !6)
!85 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !86)
!86 = !DILocation(line: 79, column: 40, scope: !6)
!87 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !86)
!88 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !86)
!89 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !86)
!90 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !86)
!91 = !DILocation(line: 81, column: 37, scope: !6)
!92 = !DILocation(line: 80, column: 25, scope: !6)
!93 = !DILocation(line: 81, column: 25, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !95)
!95 = !DILocation(line: 104, column: 46, scope: !6)
!96 = !DILocation(line: 105, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !98)
!98 = !DILocation(line: 106, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 107, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 109, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !106)
!106 = !DILocation(line: 112, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !106)
!110 = !DILocation(line: 115, column: 25, scope: !6)
!111 = !DILocation(line: 82, column: 40, scope: !6)
!112 = !DILocation(line: 88, column: 43, scope: !6)
!113 = !DILocation(line: 88, column: 36, scope: !6)
!114 = !DILocation(line: 88, column: 54, scope: !6)
!115 = !DILocation(line: 90, column: 24, scope: !6)
!116 = !DILocation(line: 91, column: 24, scope: !6)
!117 = !DILocation(line: 92, column: 24, scope: !6)
!118 = !DILocation(line: 94, column: 24, scope: !6)
!119 = !DILocation(line: 95, column: 24, scope: !6)
!120 = !DILocation(line: 97, column: 24, scope: !6)
!121 = !DILocation(line: 98, column: 31, scope: !6)
!122 = !DILocation(line: 100, column: 24, scope: !6)
!123 = !DILocation(line: 101, column: 24, scope: !6)
!124 = !DILocation(line: 117, column: 24, scope: !6)
!125 = !DILocation(line: 118, column: 36, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !127)
!127 = !DILocation(line: 121, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !127)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 123, column: 46, scope: !6)
!133 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 125, column: 25, scope: !6)
!136 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !132)
!137 = !DILocation(line: 126, column: 29, scope: !6)
!138 = !DILocation(line: 126, column: 54, scope: !6)
!139 = !DILocation(line: 82, column: 4, scope: !6)
