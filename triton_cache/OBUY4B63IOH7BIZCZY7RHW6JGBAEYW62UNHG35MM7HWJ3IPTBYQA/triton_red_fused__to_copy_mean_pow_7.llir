; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 2, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = and i32 %8, 3, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = icmp slt i32 %12, 86400, !dbg !13
  %14 = sdiv i32 %12, 24, !dbg !14
  %15 = mul i32 %14, 24, !dbg !15
  %.decomposed = sub i32 %12, %15, !dbg !15
  %16 = shl nsw i32 %.decomposed, 7, !dbg !16
  %17 = mul i32 %14, 9216, !dbg !17
  %18 = add nsw i32 %16, 3072
  %19 = add i32 %18, %17
  br i1 %13, label %.split.us, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %20 = or disjoint i32 %19, %11, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %22, i1 false) #3, !dbg !20
  %24 = or disjoint i32 %11, 4, !dbg !21
  %25 = or disjoint i32 %19, %24, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 false) #3, !dbg !20
  %29 = or disjoint i32 %11, 8, !dbg !21
  %30 = or disjoint i32 %19, %29, !dbg !18
  %31 = sext i32 %30 to i64, !dbg !19
  %32 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %32, i1 false) #3, !dbg !20
  %34 = or disjoint i32 %11, 12, !dbg !21
  %35 = or disjoint i32 %19, %34, !dbg !18
  %36 = sext i32 %35 to i64, !dbg !19
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #3, !dbg !20
  %39 = or disjoint i32 %11, 16, !dbg !21
  %40 = or disjoint i32 %19, %39, !dbg !18
  %41 = sext i32 %40 to i64, !dbg !19
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 false) #3, !dbg !20
  %44 = or disjoint i32 %11, 20, !dbg !21
  %45 = or disjoint i32 %19, %44, !dbg !18
  %46 = sext i32 %45 to i64, !dbg !19
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 false) #3, !dbg !20
  %49 = or disjoint i32 %11, 24, !dbg !21
  %50 = or disjoint i32 %19, %49, !dbg !18
  %51 = sext i32 %50 to i64, !dbg !19
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 false) #3, !dbg !20
  %54 = or disjoint i32 %11, 28, !dbg !21
  %55 = or disjoint i32 %19, %54, !dbg !18
  %56 = sext i32 %55 to i64, !dbg !19
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !19
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #3, !dbg !20
  %59 = or disjoint i32 %11, 32, !dbg !21
  %60 = or disjoint i32 %19, %59, !dbg !18
  %61 = sext i32 %60 to i64, !dbg !19
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %62, i1 false) #3, !dbg !20
  %64 = or disjoint i32 %11, 36, !dbg !21
  %65 = or disjoint i32 %19, %64, !dbg !18
  %66 = sext i32 %65 to i64, !dbg !19
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !19
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %67, i1 false) #3, !dbg !20
  %69 = or disjoint i32 %11, 40, !dbg !21
  %70 = or disjoint i32 %19, %69, !dbg !18
  %71 = sext i32 %70 to i64, !dbg !19
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !19
  %73 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %72, i1 false) #3, !dbg !20
  %74 = or disjoint i32 %11, 44, !dbg !21
  %75 = or disjoint i32 %19, %74, !dbg !18
  %76 = sext i32 %75 to i64, !dbg !19
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !19
  %78 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %77, i1 false) #3, !dbg !20
  %79 = or disjoint i32 %11, 48, !dbg !21
  %80 = or disjoint i32 %19, %79, !dbg !18
  %81 = sext i32 %80 to i64, !dbg !19
  %82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %81, !dbg !19
  %83 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %82, i1 false) #3, !dbg !20
  %84 = or disjoint i32 %11, 52, !dbg !21
  %85 = or disjoint i32 %19, %84, !dbg !18
  %86 = sext i32 %85 to i64, !dbg !19
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !19
  %88 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %87, i1 false) #3, !dbg !20
  %89 = or disjoint i32 %11, 56, !dbg !21
  %90 = or disjoint i32 %19, %89, !dbg !18
  %91 = sext i32 %90 to i64, !dbg !19
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !19
  %93 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %92, i1 false) #3, !dbg !20
  %94 = or disjoint i32 %11, 60, !dbg !21
  %95 = or disjoint i32 %19, %94, !dbg !18
  %96 = sext i32 %95 to i64, !dbg !19
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !19
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 false) #3, !dbg !20
  %99 = or disjoint i32 %11, 64, !dbg !21
  %100 = or disjoint i32 %19, %99, !dbg !18
  %101 = sext i32 %100 to i64, !dbg !19
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !19
  %103 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %102, i1 false) #3, !dbg !20
  %104 = or disjoint i32 %11, 68, !dbg !21
  %105 = or disjoint i32 %19, %104, !dbg !18
  %106 = sext i32 %105 to i64, !dbg !19
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !19
  %108 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %107, i1 false) #3, !dbg !20
  %109 = or disjoint i32 %11, 72, !dbg !21
  %110 = or disjoint i32 %19, %109, !dbg !18
  %111 = sext i32 %110 to i64, !dbg !19
  %112 = getelementptr bfloat, ptr addrspace(1) %0, i64 %111, !dbg !19
  %113 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %112, i1 false) #3, !dbg !20
  %114 = or disjoint i32 %11, 76, !dbg !21
  %115 = or disjoint i32 %19, %114, !dbg !18
  %116 = sext i32 %115 to i64, !dbg !19
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !19
  %118 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %117, i1 false) #3, !dbg !20
  %119 = or disjoint i32 %11, 80, !dbg !21
  %120 = or disjoint i32 %19, %119, !dbg !18
  %121 = sext i32 %120 to i64, !dbg !19
  %122 = getelementptr bfloat, ptr addrspace(1) %0, i64 %121, !dbg !19
  %123 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %122, i1 false) #3, !dbg !20
  %124 = or disjoint i32 %11, 84, !dbg !21
  %125 = or disjoint i32 %19, %124, !dbg !18
  %126 = sext i32 %125 to i64, !dbg !19
  %127 = getelementptr bfloat, ptr addrspace(1) %0, i64 %126, !dbg !19
  %128 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %127, i1 false) #3, !dbg !20
  %129 = or disjoint i32 %11, 88, !dbg !21
  %130 = or disjoint i32 %19, %129, !dbg !18
  %131 = sext i32 %130 to i64, !dbg !19
  %132 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !19
  %133 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %132, i1 false) #3, !dbg !20
  %134 = or disjoint i32 %11, 92, !dbg !21
  %135 = or disjoint i32 %19, %134, !dbg !18
  %136 = sext i32 %135 to i64, !dbg !19
  %137 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !19
  %138 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %137, i1 false) #3, !dbg !20
  %139 = or disjoint i32 %11, 96, !dbg !21
  %140 = or disjoint i32 %19, %139, !dbg !18
  %141 = sext i32 %140 to i64, !dbg !19
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !19
  %143 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %142, i1 false) #3, !dbg !20
  %144 = or disjoint i32 %11, 100, !dbg !21
  %145 = or disjoint i32 %19, %144, !dbg !18
  %146 = sext i32 %145 to i64, !dbg !19
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !19
  %148 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %147, i1 false) #3, !dbg !20
  %149 = or disjoint i32 %11, 104, !dbg !21
  %150 = or disjoint i32 %19, %149, !dbg !18
  %151 = sext i32 %150 to i64, !dbg !19
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !19
  %153 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 false) #3, !dbg !20
  %154 = or disjoint i32 %11, 108, !dbg !21
  %155 = or disjoint i32 %19, %154, !dbg !18
  %156 = sext i32 %155 to i64, !dbg !19
  %157 = getelementptr bfloat, ptr addrspace(1) %0, i64 %156, !dbg !19
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %157, i1 false) #3, !dbg !20
  %159 = or disjoint i32 %11, 112, !dbg !21
  %160 = or disjoint i32 %19, %159, !dbg !18
  %161 = sext i32 %160 to i64, !dbg !19
  %162 = getelementptr bfloat, ptr addrspace(1) %0, i64 %161, !dbg !19
  %163 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %162, i1 false) #3, !dbg !20
  %164 = or disjoint i32 %11, 116, !dbg !21
  %165 = or disjoint i32 %19, %164, !dbg !18
  %166 = sext i32 %165 to i64, !dbg !19
  %167 = getelementptr bfloat, ptr addrspace(1) %0, i64 %166, !dbg !19
  %168 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %167, i1 false) #3, !dbg !20
  %169 = or disjoint i32 %11, 120, !dbg !21
  %170 = or disjoint i32 %19, %169, !dbg !18
  %171 = sext i32 %170 to i64, !dbg !19
  %172 = getelementptr bfloat, ptr addrspace(1) %0, i64 %171, !dbg !19
  %173 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %172, i1 false) #3, !dbg !20
  %174 = or disjoint i32 %11, 124, !dbg !21
  %175 = or disjoint i32 %19, %174, !dbg !18
  %176 = sext i32 %175 to i64, !dbg !19
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %176, !dbg !19
  %178 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %177, i1 false) #3, !dbg !20
  br label %.split3.us, !dbg !11

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split.us ], [ 0, %5 ]
  %179 = phi float [ %189, %.split.us ], [ 0.000000e+00, %5 ]
  %180 = trunc i64 %indvars.iv to i32, !dbg !18
  %181 = or disjoint i32 %11, %180, !dbg !18
  %182 = add i32 %19, %181, !dbg !18
  %183 = sext i32 %182 to i64, !dbg !19
  %184 = getelementptr bfloat, ptr addrspace(1) %0, i64 %183, !dbg !19
  %185 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %184, i1 true) #3, !dbg !20
  %186 = bitcast i16 %185 to bfloat, !dbg !20
  %187 = fpext bfloat %186 to float, !dbg !22
  %188 = fmul float %187, %187, !dbg !23
  %189 = fadd float %179, %188, !dbg !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !25
  %190 = icmp samesign ult i64 %indvars.iv, 124, !dbg !25
  br i1 %190, label %.split.us, label %.split3.us, !dbg !25

.split3.us:                                       ; preds = %.split.us, %.split.preheader
  %.us-phi = phi float [ 0.000000e+00, %.split.preheader ], [ %189, %.split.us ], !dbg !11
  %191 = and i32 %8, 63, !dbg !11
  %192 = or disjoint i32 %7, %191, !dbg !12
  %193 = icmp slt i32 %192, 86400, !dbg !13
  %194 = bitcast float %.us-phi to i32, !dbg !26
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 2, i32 31), !dbg !26
  %196 = bitcast i32 %195 to float, !dbg !26
  %197 = fadd float %.us-phi, %196, !dbg !30
  %198 = bitcast float %197 to i32, !dbg !26
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !26
  %200 = bitcast i32 %199 to float, !dbg !26
  %201 = fadd float %197, %200, !dbg !30
  %202 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %203 = bitcast float %201 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %204 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %191, !dbg !32
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !32
  %206 = sext i32 %192 to i64, !dbg !33
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !33
  %208 = and i32 %8, 192, !dbg !34
  %209 = icmp eq i32 %208, 0, !dbg !34
  %210 = and i1 %209, %193, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %207, i1 %210) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctukkjgi3ilus5xqhbuvomraszqcwuo43btmyeda555wzrbb4pe6.py", directory: "/tmp/torchinductor_root/tu")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_7, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_7", linkageName: "triton_red_fused__to_copy_mean_pow_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 52, scope: !6)
!17 = !DILocation(line: 38, column: 62, scope: !6)
!18 = !DILocation(line: 38, column: 57, scope: !6)
!19 = !DILocation(line: 38, column: 34, scope: !6)
!20 = !DILocation(line: 38, column: 67, scope: !6)
!21 = !DILocation(line: 33, column: 31, scope: !6)
!22 = !DILocation(line: 38, column: 129, scope: !6)
!23 = !DILocation(line: 40, column: 22, scope: !6)
!24 = !DILocation(line: 42, column: 23, scope: !6)
!25 = !DILocation(line: 32, column: 40, scope: !6)
!26 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!29 = !DILocation(line: 44, column: 25, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 44, column: 28, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 45, column: 36, scope: !6)
!35 = !DILocation(line: 45, column: 4, scope: !6)
