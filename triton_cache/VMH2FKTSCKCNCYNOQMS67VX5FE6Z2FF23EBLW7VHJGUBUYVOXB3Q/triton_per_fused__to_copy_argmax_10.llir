; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_argmax_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %6 = and i32 %5, 31, !dbg !9
  %7 = lshr i32 %5, 5, !dbg !9
  %8 = shl i32 %5, 1, !dbg !9
  %9 = and i32 %8, 126, !dbg !9
  %10 = or disjoint i32 %9, 1, !dbg !9
  %11 = icmp samesign ult i32 %9, 77, !dbg !10
  %12 = icmp samesign ult i32 %10, 77, !dbg !10
  %13 = zext nneg i32 %9 to i64, !dbg !11
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !11
  %15 = zext nneg i32 %10 to i64, !dbg !11
  %16 = getelementptr i64, ptr addrspace(1) %0, i64 %15, !dbg !11
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #4, !dbg !12
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %12) #4, !dbg !12
  %19 = trunc i64 %17 to i32, !dbg !13
  %20 = trunc i64 %18 to i32, !dbg !13
  %21 = select i1 %11, i32 %19, i32 -2147483648, !dbg !14
  %22 = select i1 %12, i32 %20, i32 -2147483648, !dbg !14
  %.not = icmp slt i32 %21, %22, !dbg !15
  %23 = tail call i32 @llvm.smax.i32(i32 %21, i32 %22), !dbg !20
  %24 = select i1 %.not, i32 %10, i32 %9, !dbg !21
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %23, i32 16, i32 31), !dbg !22
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 16, i32 31), !dbg !22
  %27 = icmp sgt i32 %23, %25, !dbg !23
  %28 = icmp eq i32 %23, %25, !dbg !24
  %29 = icmp slt i32 %24, %26, !dbg !25
  %30 = and i1 %28, %29, !dbg !26
  %31 = or i1 %27, %30, !dbg !15
  %32 = select i1 %31, i32 %23, i32 %25, !dbg !20
  %33 = select i1 %31, i32 %24, i32 %26, !dbg !21
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !22
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !22
  %36 = icmp sgt i32 %32, %34, !dbg !23
  %37 = icmp eq i32 %32, %34, !dbg !24
  %38 = icmp slt i32 %33, %35, !dbg !25
  %39 = and i1 %37, %38, !dbg !26
  %40 = or i1 %36, %39, !dbg !15
  %41 = select i1 %40, i32 %32, i32 %34, !dbg !20
  %42 = select i1 %40, i32 %33, i32 %35, !dbg !21
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !22
  %45 = icmp sgt i32 %41, %43, !dbg !23
  %46 = icmp eq i32 %41, %43, !dbg !24
  %47 = icmp slt i32 %42, %44, !dbg !25
  %48 = and i1 %46, %47, !dbg !26
  %49 = or i1 %45, %48, !dbg !15
  %50 = select i1 %49, i32 %41, i32 %43, !dbg !20
  %51 = select i1 %49, i32 %42, i32 %44, !dbg !21
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !22
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !22
  %54 = icmp sgt i32 %50, %52, !dbg !23
  %55 = icmp eq i32 %50, %52, !dbg !24
  %56 = icmp slt i32 %51, %53, !dbg !25
  %57 = and i1 %55, %56, !dbg !26
  %58 = or i1 %54, %57, !dbg !15
  %59 = select i1 %58, i32 %50, i32 %52, !dbg !20
  %60 = select i1 %58, i32 %51, i32 %53, !dbg !21
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !22
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !22
  %63 = icmp sgt i32 %59, %61, !dbg !23
  %64 = icmp eq i32 %59, %61, !dbg !24
  %65 = icmp slt i32 %60, %62, !dbg !25
  %66 = and i1 %64, %65, !dbg !26
  %67 = or i1 %63, %66, !dbg !15
  %68 = select i1 %67, i32 %59, i32 %61, !dbg !20
  %69 = select i1 %67, i32 %60, i32 %62, !dbg !21
  %70 = and i32 %7, 1, !dbg !22
  %71 = icmp eq i32 %6, 0, !dbg !22
  %72 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %70, !dbg !22
  %73 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 %71) #4, !dbg !22
  %74 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %70, !dbg !22
  %75 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 %71) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %76 = icmp slt i32 %5, 2, !dbg !22
  %77 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %5, !dbg !22
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #4, !dbg !22
  %79 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %5, !dbg !22
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %76) #4, !dbg !22
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !22
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !22
  %83 = icmp sgt i32 %78, %81, !dbg !23
  %84 = icmp eq i32 %78, %81, !dbg !24
  %85 = icmp slt i32 %80, %82, !dbg !25
  %86 = and i1 %84, %85, !dbg !26
  %87 = or i1 %83, %86, !dbg !15
  %88 = select i1 %87, i32 %78, i32 %81, !dbg !20
  %89 = select i1 %87, i32 %80, i32 %82, !dbg !21
  %90 = and i32 %5, 1, !dbg !22
  %91 = icmp eq i32 %90, 0, !dbg !22
  %92 = and i1 %76, %91, !dbg !22
  %93 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %93, i1 %92) #4, !dbg !22
  %94 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %94, i1 %92) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %95 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !22
  %96 = sext i32 %95 to i64, !dbg !27
  %97 = and i32 %5, 63, !dbg !27
  %98 = icmp eq i32 %97, 0, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %96, ptr addrspace(1) %1, i1 %98) #4, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dn3vezjkzzfryar5w6rgu3fnxykyfmpalg2k6ueujlxl6hcsbt.py", directory: "/tmp/torchinductor_root/4d")
!4 = !{ptr @triton_per_fused__to_copy_argmax_10, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_argmax_10", linkageName: "triton_per_fused__to_copy_argmax_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 27, column: 38, scope: !6)
!10 = !DILocation(line: 29, column: 25, scope: !6)
!11 = !DILocation(line: 33, column: 30, scope: !6)
!12 = !DILocation(line: 33, column: 37, scope: !6)
!13 = !DILocation(line: 34, column: 19, scope: !6)
!14 = !DILocation(line: 36, column: 35, scope: !6)
!15 = !DILocation(line: 146, column: 12, scope: !16, inlinedAt: !19)
!16 = distinct !DILexicalBlockFile(scope: !18, file: !17, discriminator: 0)
!17 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!18 = distinct !DILexicalBlockFile(scope: !6, file: !17, discriminator: 0)
!19 = !DILocation(line: 38, column: 67, scope: !6)
!20 = !DILocation(line: 147, column: 35, scope: !16, inlinedAt: !19)
!21 = !DILocation(line: 147, column: 69, scope: !16, inlinedAt: !19)
!22 = !DILocation(line: 157, column: 42, scope: !18, inlinedAt: !19)
!23 = !DILocation(line: 136, column: 21, scope: !16, inlinedAt: !19)
!24 = !DILocation(line: 137, column: 23, scope: !16, inlinedAt: !19)
!25 = !DILocation(line: 146, column: 31, scope: !16, inlinedAt: !19)
!26 = !DILocation(line: 146, column: 21, scope: !16, inlinedAt: !19)
!27 = !DILocation(line: 40, column: 67, scope: !6)
!28 = !DILocation(line: 40, column: 4, scope: !6)
