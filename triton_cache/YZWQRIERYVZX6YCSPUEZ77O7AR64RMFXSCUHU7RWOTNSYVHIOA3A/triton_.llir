; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 9, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 2, !dbg !11
  %9 = and i32 %8, 508, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = icmp slt i32 %10, 236544, !dbg !13
  %12 = srem i32 %10, 3072, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !15
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #2, !dbg !16
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !16
  %17 = bitcast i32 %16 to <2 x bfloat>, !dbg !16
  %18 = extractvalue { i32, i32 } %15, 1, !dbg !16
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !16
  %20 = sext i32 %12 to i64, !dbg !17
  %21 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %11) #2, !dbg !18
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !18
  %25 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !18
  %27 = fpext <2 x bfloat> %17 to <2 x float>, !dbg !19
  %28 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !20
  %29 = fadd <2 x float> %27, %28, !dbg !21
  %30 = extractelement <2 x float> %29, i64 0, !dbg !22
  %31 = fmul float %30, 0x3FFB3B6460000000, !dbg !22
  %32 = extractelement <2 x float> %29, i64 1, !dbg !22
  %33 = fmul float %32, 0x3FFB3B6460000000, !dbg !22
  %34 = fsub float 0.000000e+00, %31, !dbg !23
  %35 = fsub float 0.000000e+00, %33, !dbg !23
  %36 = fmul float %34, 0x3FF7154760000000, !dbg !27
  %37 = tail call float @llvm.nvvm.ex2.approx.f(float %36), !dbg !27
  %38 = fmul float %35, 0x3FF7154760000000, !dbg !27
  %39 = tail call float @llvm.nvvm.ex2.approx.f(float %38), !dbg !27
  %40 = fadd float %37, 1.000000e+00, !dbg !28
  %41 = fadd float %39, 1.000000e+00, !dbg !28
  %42 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %40), !dbg !29
  %43 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %41), !dbg !29
  %44 = insertelement <2 x float> poison, float %42, i64 0, !dbg !30
  %45 = insertelement <2 x float> %44, float %43, i64 1, !dbg !30
  %46 = fmul <2 x float> %29, %45, !dbg !30
  %47 = fptrunc <2 x float> %46 to <2 x bfloat>, !dbg !31
  %48 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !19
  %49 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !20
  %50 = fadd <2 x float> %48, %49, !dbg !21
  %51 = extractelement <2 x float> %50, i64 0, !dbg !22
  %52 = fmul float %51, 0x3FFB3B6460000000, !dbg !22
  %53 = extractelement <2 x float> %50, i64 1, !dbg !22
  %54 = fmul float %53, 0x3FFB3B6460000000, !dbg !22
  %55 = fsub float 0.000000e+00, %52, !dbg !23
  %56 = fsub float 0.000000e+00, %54, !dbg !23
  %57 = fmul float %55, 0x3FF7154760000000, !dbg !27
  %58 = tail call float @llvm.nvvm.ex2.approx.f(float %57), !dbg !27
  %59 = fmul float %56, 0x3FF7154760000000, !dbg !27
  %60 = tail call float @llvm.nvvm.ex2.approx.f(float %59), !dbg !27
  %61 = fadd float %58, 1.000000e+00, !dbg !28
  %62 = fadd float %60, 1.000000e+00, !dbg !28
  %63 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %61), !dbg !29
  %64 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %62), !dbg !29
  %65 = insertelement <2 x float> poison, float %63, i64 0, !dbg !30
  %66 = insertelement <2 x float> %65, float %64, i64 1, !dbg !30
  %67 = fmul <2 x float> %50, %66, !dbg !30
  %68 = fptrunc <2 x float> %67 to <2 x bfloat>, !dbg !31
  %69 = bitcast <2 x bfloat> %47 to i32, !dbg !31
  %70 = bitcast <2 x bfloat> %68 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %69, i32 %70, ptr addrspace(1) %14, i1 %11) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cays7uwl4mjrrpbn562uyt2hbd6b25qyzadsmdqftgdhj3yphang.py", directory: "/tmp/torchinductor_root/ay")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 29, column: 34, scope: !6)
!16 = !DILocation(line: 29, column: 39, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 29, column: 49, scope: !6)
!20 = !DILocation(line: 30, column: 75, scope: !6)
!21 = !DILocation(line: 31, column: 18, scope: !6)
!22 = !DILocation(line: 33, column: 18, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !6)
!31 = !DILocation(line: 36, column: 39, scope: !6)
!32 = !DILocation(line: 36, column: 4, scope: !6)
