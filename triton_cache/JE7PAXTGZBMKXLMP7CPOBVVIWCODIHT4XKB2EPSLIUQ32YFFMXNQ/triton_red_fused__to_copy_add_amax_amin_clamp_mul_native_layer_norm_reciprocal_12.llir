; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 512, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = shl i32 %19, 3, !dbg !11
  %22 = and i32 %21, 2040, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = sext i32 %17 to i64, !dbg !12
  %25 = getelementptr bfloat, ptr addrspace(1) %4, i64 %24, !dbg !12
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %18) #5, !dbg !13
  %34 = bitcast i16 %33 to bfloat, !dbg !13
  %35 = getelementptr bfloat, ptr addrspace(1) %5, i64 %24, !dbg !14
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !15
  %44 = bitcast i16 %43 to bfloat, !dbg !15
  %45 = mul i32 %17, 3072, !dbg !16
  %.inv = fcmp oge bfloat %34, 0xR0000, !dbg !17
  %46 = select i1 %.inv, bfloat 0xR0000, bfloat %34, !dbg !17
  %47 = fpext bfloat %46 to float, !dbg !17
  %48 = fsub float 0.000000e+00, %47, !dbg !21
  %.inv3 = fcmp ole bfloat %44, 0xR0000, !dbg !22
  %49 = select i1 %.inv3, bfloat 0xR0000, bfloat %44, !dbg !22
  %50 = fpext bfloat %49 to float, !dbg !22
  %51 = fcmp ogt float %48, %50, !dbg !24
  %52 = fcmp uno float %48, 0.000000e+00, !dbg !26
  %53 = or i1 %52, %51, !dbg !27
  %54 = select i1 %53, float %48, float %50, !dbg !28
  %55 = fmul float %54, 0x3F80204080000000, !dbg !29
  %56 = fcmp ogt float %55, 0x3EE4F8B580000000, !dbg !30
  %57 = fcmp uno float %55, 0.000000e+00, !dbg !32
  %58 = or i1 %56, %57, !dbg !33
  %59 = select i1 %58, float %55, float 0x3EE4F8B580000000, !dbg !34
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !35
  %60 = zext nneg i32 %23 to i64, !dbg !35
  %61 = zext nneg i32 %22 to i64, !dbg !35
  %62 = insertelement <8 x float> poison, float %59, i64 0, !dbg !36
  %63 = shufflevector <8 x float> %62, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  br label %64, !dbg !35

64:                                               ; preds = %16, %._crit_edge
  %65 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %329, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %330, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %82 = phi <8 x float> [ zeroinitializer, %16 ], [ %314, %._crit_edge ]
  %83 = or disjoint i64 %indvars.iv, %61, !dbg !37
  %84 = or disjoint i64 %indvars.iv, %60, !dbg !37
  %85 = icmp samesign ult i64 %83, 3072, !dbg !38
  %86 = trunc nuw nsw i64 %83 to i32, !dbg !39
  %87 = add i32 %45, %86, !dbg !39
  %88 = trunc nuw nsw i64 %84 to i32, !dbg !39
  %89 = add i32 %45, %88, !dbg !39
  %90 = sext i32 %87 to i64, !dbg !40
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !40
  %92 = and i1 %18, %85, !dbg !41
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %91, i1 %92) #5, !dbg !42
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !42
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !42
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !42
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !42
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !42
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !42
  %102 = add nuw nsw i64 %83, 6144, !dbg !43
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !44
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %84, !dbg !44
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %103, i1 %85) #5, !dbg !45
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !45
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !45
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !45
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !45
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 %85) #5, !dbg !45
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !45
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !45
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !45
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !45
  %114 = getelementptr bfloat, ptr addrspace(1) %2, i64 %102, !dbg !46
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %85) #5, !dbg !47
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !47
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !47
  %118 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !47
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !47
  %120 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !47
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !47
  %122 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !47
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !47
  %124 = getelementptr i32, ptr addrspace(1) %3, i64 %90, !dbg !48
  %125 = sext i32 %89 to i64, !dbg !48
  %126 = getelementptr i32, ptr addrspace(1) %3, i64 %125, !dbg !48
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %92) #5, !dbg !49
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !49
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !49
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !49
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !49
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %92) #5, !dbg !49
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !49
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !49
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !49
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !49
  %137 = getelementptr bfloat, ptr addrspace(1) %6, i64 %83, !dbg !50
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %137, i1 %85) #5, !dbg !51
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !51
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !51
  %141 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !51
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !51
  %143 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !51
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !51
  %145 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !51
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !51
  %147 = getelementptr bfloat, ptr addrspace(1) %7, i64 %83, !dbg !52
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %147, i1 %85) #5, !dbg !53
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !53
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !53
  %151 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !53
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !53
  %153 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !53
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !53
  %155 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !53
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !53
  %157 = shufflevector <2 x bfloat> %95, <2 x bfloat> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %158 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %159 = shufflevector <8 x bfloat> %157, <8 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !54
  %160 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %161 = shufflevector <8 x bfloat> %159, <8 x bfloat> %160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !54
  %162 = shufflevector <2 x bfloat> %101, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %163 = shufflevector <8 x bfloat> %161, <8 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !54
  %164 = shufflevector <2 x bfloat> %101, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %165 = shufflevector <8 x bfloat> %163, <8 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !54
  %166 = fpext <8 x bfloat> %165 to <8 x float>, !dbg !54
  %167 = insertelement <8 x i32> poison, i32 %105, i64 0, !dbg !45
  %168 = insertelement <8 x i32> %167, i32 %106, i64 1, !dbg !45
  %169 = insertelement <8 x i32> %168, i32 %107, i64 2, !dbg !45
  %170 = insertelement <8 x i32> %169, i32 %108, i64 3, !dbg !45
  %171 = insertelement <8 x i32> %170, i32 %110, i64 4, !dbg !45
  %172 = insertelement <8 x i32> %171, i32 %111, i64 5, !dbg !45
  %173 = insertelement <8 x i32> %172, i32 %112, i64 6, !dbg !45
  %174 = insertelement <8 x i32> %173, i32 %113, i64 7, !dbg !45
  %175 = bitcast <8 x i32> %174 to <8 x float>, !dbg !45
  %176 = shufflevector <2 x bfloat> %117, <2 x bfloat> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %177 = shufflevector <2 x bfloat> %121, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %178 = shufflevector <8 x bfloat> %176, <8 x bfloat> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !55
  %179 = shufflevector <2 x bfloat> %121, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %180 = shufflevector <8 x bfloat> %178, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !55
  %181 = shufflevector <2 x bfloat> %123, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %182 = shufflevector <8 x bfloat> %180, <8 x bfloat> %181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !55
  %183 = shufflevector <2 x bfloat> %123, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %184 = shufflevector <8 x bfloat> %182, <8 x bfloat> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !55
  %185 = fpext <8 x bfloat> %184 to <8 x float>, !dbg !55
  %186 = shufflevector <2 x bfloat> %140, <2 x bfloat> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %187 = shufflevector <2 x bfloat> %144, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %188 = shufflevector <8 x bfloat> %186, <8 x bfloat> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %189 = shufflevector <2 x bfloat> %144, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %190 = shufflevector <8 x bfloat> %188, <8 x bfloat> %189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %191 = shufflevector <2 x bfloat> %146, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %192 = shufflevector <8 x bfloat> %190, <8 x bfloat> %191, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %193 = shufflevector <2 x bfloat> %146, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %194 = shufflevector <8 x bfloat> %192, <8 x bfloat> %193, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %195 = fpext <8 x bfloat> %194 to <8 x float>, !dbg !56
  %196 = shufflevector <2 x bfloat> %150, <2 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %197 = shufflevector <2 x bfloat> %154, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %198 = shufflevector <8 x bfloat> %196, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !57
  %199 = shufflevector <2 x bfloat> %154, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %200 = shufflevector <8 x bfloat> %198, <8 x bfloat> %199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !57
  %201 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %202 = shufflevector <8 x bfloat> %200, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !57
  %203 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %204 = shufflevector <8 x bfloat> %202, <8 x bfloat> %203, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !57
  %205 = fpext <8 x bfloat> %204 to <8 x float>, !dbg !57
  %206 = fadd <8 x float> %175, %185, !dbg !58
  %207 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !59
  %208 = insertelement <8 x i32> %207, i32 %129, i64 1, !dbg !59
  %209 = insertelement <8 x i32> %208, i32 %130, i64 2, !dbg !59
  %210 = insertelement <8 x i32> %209, i32 %131, i64 3, !dbg !59
  %211 = insertelement <8 x i32> %210, i32 %133, i64 4, !dbg !59
  %212 = insertelement <8 x i32> %211, i32 %134, i64 5, !dbg !59
  %213 = insertelement <8 x i32> %212, i32 %135, i64 6, !dbg !59
  %214 = insertelement <8 x i32> %213, i32 %136, i64 7, !dbg !59
  %215 = sitofp <8 x i32> %214 to <8 x float>, !dbg !59
  %216 = fmul <8 x float> %63, %215, !dbg !36
  %217 = fmul <8 x float> %216, %195, !dbg !60
  %218 = fadd <8 x float> %217, %205, !dbg !61
  %219 = fmul <8 x float> %206, %218, !dbg !62
  %220 = fadd <8 x float> %219, %166, !dbg !63
  br i1 %65, label %._crit_edge, label %221, !dbg !64

221:                                              ; preds = %64
  %222 = fsub <8 x float> %220, %82, !dbg !66
  %223 = extractelement <8 x float> %222, i64 0, !dbg !66
  %224 = fsub <8 x float> %220, %82, !dbg !66
  %225 = extractelement <8 x float> %224, i64 1, !dbg !66
  %226 = fsub <8 x float> %220, %82, !dbg !66
  %227 = extractelement <8 x float> %226, i64 2, !dbg !66
  %228 = fsub <8 x float> %220, %82, !dbg !66
  %229 = extractelement <8 x float> %228, i64 3, !dbg !66
  %230 = fsub <8 x float> %220, %82, !dbg !66
  %231 = extractelement <8 x float> %230, i64 4, !dbg !66
  %232 = fsub <8 x float> %220, %82, !dbg !66
  %233 = extractelement <8 x float> %232, i64 5, !dbg !66
  %234 = fsub <8 x float> %220, %82, !dbg !66
  %235 = extractelement <8 x float> %234, i64 6, !dbg !66
  %236 = fsub <8 x float> %220, %82, !dbg !66
  %237 = extractelement <8 x float> %236, i64 7, !dbg !66
  %238 = fadd float %66, 1.000000e+00, !dbg !67
  %239 = fadd float %67, 1.000000e+00, !dbg !67
  %240 = fadd float %68, 1.000000e+00, !dbg !67
  %241 = fadd float %69, 1.000000e+00, !dbg !67
  %242 = fadd float %70, 1.000000e+00, !dbg !67
  %243 = fadd float %71, 1.000000e+00, !dbg !67
  %244 = fadd float %72, 1.000000e+00, !dbg !67
  %245 = fadd float %73, 1.000000e+00, !dbg !67
  %246 = tail call float @llvm.nvvm.div.full(float %223, float %238), !dbg !68
  %247 = tail call float @llvm.nvvm.div.full(float %225, float %239), !dbg !68
  %248 = tail call float @llvm.nvvm.div.full(float %227, float %240), !dbg !68
  %249 = tail call float @llvm.nvvm.div.full(float %229, float %241), !dbg !68
  %250 = tail call float @llvm.nvvm.div.full(float %231, float %242), !dbg !68
  %251 = tail call float @llvm.nvvm.div.full(float %233, float %243), !dbg !68
  %252 = tail call float @llvm.nvvm.div.full(float %235, float %244), !dbg !68
  %253 = tail call float @llvm.nvvm.div.full(float %237, float %245), !dbg !68
  %254 = insertelement <8 x float> poison, float %246, i64 0, !dbg !69
  %255 = insertelement <8 x float> %254, float %247, i64 1, !dbg !69
  %256 = insertelement <8 x float> %255, float %248, i64 2, !dbg !69
  %257 = insertelement <8 x float> %256, float %249, i64 3, !dbg !69
  %258 = insertelement <8 x float> %257, float %250, i64 4, !dbg !69
  %259 = insertelement <8 x float> %258, float %251, i64 5, !dbg !69
  %260 = insertelement <8 x float> %259, float %252, i64 6, !dbg !69
  %261 = insertelement <8 x float> %260, float %253, i64 7, !dbg !69
  %262 = fadd <8 x float> %82, %261, !dbg !69
  %263 = fsub <8 x float> %220, %262, !dbg !70
  %264 = fsub <8 x float> %220, %262, !dbg !70
  %265 = fsub <8 x float> %220, %262, !dbg !70
  %266 = fsub <8 x float> %220, %262, !dbg !70
  %267 = fsub <8 x float> %220, %262, !dbg !70
  %268 = fsub <8 x float> %220, %262, !dbg !70
  %269 = fsub <8 x float> %220, %262, !dbg !70
  %270 = fsub <8 x float> %220, %262, !dbg !70
  %271 = fmul <8 x float> %222, %263, !dbg !71
  %272 = extractelement <8 x float> %271, i64 0, !dbg !71
  %273 = fmul <8 x float> %224, %264, !dbg !71
  %274 = extractelement <8 x float> %273, i64 1, !dbg !71
  %275 = fmul <8 x float> %226, %265, !dbg !71
  %276 = extractelement <8 x float> %275, i64 2, !dbg !71
  %277 = fmul <8 x float> %228, %266, !dbg !71
  %278 = extractelement <8 x float> %277, i64 3, !dbg !71
  %279 = fmul <8 x float> %230, %267, !dbg !71
  %280 = extractelement <8 x float> %279, i64 4, !dbg !71
  %281 = fmul <8 x float> %232, %268, !dbg !71
  %282 = extractelement <8 x float> %281, i64 5, !dbg !71
  %283 = fmul <8 x float> %234, %269, !dbg !71
  %284 = extractelement <8 x float> %283, i64 6, !dbg !71
  %285 = fmul <8 x float> %236, %270, !dbg !71
  %286 = extractelement <8 x float> %285, i64 7, !dbg !71
  %287 = fadd float %74, %272, !dbg !72
  %288 = fadd float %75, %274, !dbg !72
  %289 = fadd float %76, %276, !dbg !72
  %290 = fadd float %77, %278, !dbg !72
  %291 = fadd float %78, %280, !dbg !72
  %292 = fadd float %79, %282, !dbg !72
  %293 = fadd float %80, %284, !dbg !72
  %294 = fadd float %81, %286, !dbg !72
  br label %._crit_edge, !dbg !64

._crit_edge:                                      ; preds = %64, %221
  %295 = phi float [ %287, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %296 = phi float [ %288, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %297 = phi float [ %289, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %298 = phi float [ %290, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %299 = phi float [ %291, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %300 = phi float [ %292, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %301 = phi float [ %293, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %302 = phi float [ %294, %221 ], [ 0.000000e+00, %64 ], !dbg !65
  %303 = phi float [ %238, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %304 = phi float [ %239, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %305 = phi float [ %240, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %306 = phi float [ %241, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %307 = phi float [ %242, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %308 = phi float [ %243, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %309 = phi float [ %244, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %310 = phi float [ %245, %221 ], [ 1.000000e+00, %64 ], !dbg !65
  %311 = phi <8 x float> [ %262, %221 ], [ %220, %64 ]
  %312 = insertelement <8 x i1> poison, i1 %92, i64 0, !dbg !73
  %313 = shufflevector <8 x i1> %312, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !73
  %314 = select <8 x i1> %313, <8 x float> %311, <8 x float> %82, !dbg !73
  %315 = select i1 %92, float %295, float %74, !dbg !74
  %316 = select i1 %92, float %296, float %75, !dbg !74
  %317 = select i1 %92, float %297, float %76, !dbg !74
  %318 = select i1 %92, float %298, float %77, !dbg !74
  %319 = select i1 %92, float %299, float %78, !dbg !74
  %320 = select i1 %92, float %300, float %79, !dbg !74
  %321 = select i1 %92, float %301, float %80, !dbg !74
  %322 = select i1 %92, float %302, float %81, !dbg !74
  %323 = select i1 %92, float %303, float %66, !dbg !75
  %324 = select i1 %92, float %304, float %67, !dbg !75
  %325 = select i1 %92, float %305, float %68, !dbg !75
  %326 = select i1 %92, float %306, float %69, !dbg !75
  %327 = select i1 %92, float %307, float %70, !dbg !75
  %328 = select i1 %92, float %308, float %71, !dbg !75
  %329 = select i1 %92, float %309, float %72, !dbg !75
  %330 = select i1 %92, float %310, float %73, !dbg !75
  %331 = getelementptr bfloat, ptr addrspace(1) %8, i64 %90, !dbg !76
  %332 = extractelement <8 x float> %220, i64 0, !dbg !77
  %333 = fptrunc float %332 to bfloat, !dbg !77
  %334 = extractelement <8 x float> %220, i64 1, !dbg !77
  %335 = fptrunc float %334 to bfloat, !dbg !77
  %336 = extractelement <8 x float> %220, i64 2, !dbg !77
  %337 = fptrunc float %336 to bfloat, !dbg !77
  %338 = extractelement <8 x float> %220, i64 3, !dbg !77
  %339 = fptrunc float %338 to bfloat, !dbg !77
  %340 = extractelement <8 x float> %220, i64 4, !dbg !77
  %341 = fptrunc float %340 to bfloat, !dbg !77
  %342 = extractelement <8 x float> %220, i64 5, !dbg !77
  %343 = fptrunc float %342 to bfloat, !dbg !77
  %344 = extractelement <8 x float> %220, i64 6, !dbg !77
  %345 = fptrunc float %344 to bfloat, !dbg !77
  %346 = extractelement <8 x float> %220, i64 7, !dbg !77
  %347 = fptrunc float %346 to bfloat, !dbg !77
  %348 = insertelement <2 x bfloat> poison, bfloat %333, i64 0, !dbg !77
  %349 = insertelement <2 x bfloat> %348, bfloat %335, i64 1, !dbg !77
  %350 = bitcast <2 x bfloat> %349 to i32, !dbg !77
  %351 = insertelement <2 x bfloat> poison, bfloat %337, i64 0, !dbg !77
  %352 = insertelement <2 x bfloat> %351, bfloat %339, i64 1, !dbg !77
  %353 = bitcast <2 x bfloat> %352 to i32, !dbg !77
  %354 = insertelement <2 x bfloat> poison, bfloat %341, i64 0, !dbg !77
  %355 = insertelement <2 x bfloat> %354, bfloat %343, i64 1, !dbg !77
  %356 = bitcast <2 x bfloat> %355 to i32, !dbg !77
  %357 = insertelement <2 x bfloat> poison, bfloat %345, i64 0, !dbg !77
  %358 = insertelement <2 x bfloat> %357, bfloat %347, i64 1, !dbg !77
  %359 = bitcast <2 x bfloat> %358 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %350, i32 %353, i32 %356, i32 %359, ptr addrspace(1) %331, i1 %92) #5, !dbg !77
  br i1 %65, label %64, label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %360 = lshr i32 %19, 5, !dbg !11
  %361 = extractelement <8 x float> %314, i64 0, !dbg !78
  %362 = extractelement <8 x float> %314, i64 1, !dbg !78
  %363 = fsub float %362, %361, !dbg !78
  %364 = fadd float %323, %324, !dbg !81
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !82
  %366 = tail call float @llvm.nvvm.div.full(float %324, float %364), !dbg !83
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !84
  %368 = fmul float %363, %367, !dbg !85
  %369 = fadd float %361, %368, !dbg !86
  %370 = fadd float %315, %316, !dbg !87
  %371 = fmul float %363, %363, !dbg !88
  %372 = fmul float %371, %323, !dbg !89
  %373 = fmul float %372, %367, !dbg !90
  %374 = fadd float %370, %373, !dbg !91
  %375 = extractelement <8 x float> %314, i64 2, !dbg !78
  %376 = fsub float %375, %369, !dbg !78
  %377 = fadd float %325, %364, !dbg !81
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !82
  %379 = tail call float @llvm.nvvm.div.full(float %325, float %377), !dbg !83
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !84
  %381 = fmul float %380, %376, !dbg !85
  %382 = fadd float %369, %381, !dbg !86
  %383 = fadd float %317, %374, !dbg !87
  %384 = fmul float %376, %376, !dbg !88
  %385 = fmul float %364, %384, !dbg !89
  %386 = fmul float %380, %385, !dbg !90
  %387 = fadd float %383, %386, !dbg !91
  %388 = extractelement <8 x float> %314, i64 3, !dbg !78
  %389 = fsub float %388, %382, !dbg !78
  %390 = fadd float %326, %377, !dbg !81
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !82
  %392 = tail call float @llvm.nvvm.div.full(float %326, float %390), !dbg !83
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !84
  %394 = fmul float %393, %389, !dbg !85
  %395 = fadd float %382, %394, !dbg !86
  %396 = fadd float %318, %387, !dbg !87
  %397 = fmul float %389, %389, !dbg !88
  %398 = fmul float %377, %397, !dbg !89
  %399 = fmul float %393, %398, !dbg !90
  %400 = fadd float %396, %399, !dbg !91
  %401 = extractelement <8 x float> %314, i64 4, !dbg !78
  %402 = fsub float %401, %395, !dbg !78
  %403 = fadd float %327, %390, !dbg !81
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !82
  %405 = tail call float @llvm.nvvm.div.full(float %327, float %403), !dbg !83
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !84
  %407 = fmul float %406, %402, !dbg !85
  %408 = fadd float %395, %407, !dbg !86
  %409 = fadd float %319, %400, !dbg !87
  %410 = fmul float %402, %402, !dbg !88
  %411 = fmul float %390, %410, !dbg !89
  %412 = fmul float %406, %411, !dbg !90
  %413 = fadd float %409, %412, !dbg !91
  %414 = extractelement <8 x float> %314, i64 5, !dbg !78
  %415 = fsub float %414, %408, !dbg !78
  %416 = fadd float %328, %403, !dbg !81
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !82
  %418 = tail call float @llvm.nvvm.div.full(float %328, float %416), !dbg !83
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !84
  %420 = fmul float %419, %415, !dbg !85
  %421 = fadd float %408, %420, !dbg !86
  %422 = fadd float %320, %413, !dbg !87
  %423 = fmul float %415, %415, !dbg !88
  %424 = fmul float %403, %423, !dbg !89
  %425 = fmul float %419, %424, !dbg !90
  %426 = fadd float %422, %425, !dbg !91
  %427 = extractelement <8 x float> %314, i64 6, !dbg !78
  %428 = fsub float %427, %421, !dbg !78
  %429 = fadd float %329, %416, !dbg !81
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !82
  %431 = tail call float @llvm.nvvm.div.full(float %329, float %429), !dbg !83
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !84
  %433 = fmul float %432, %428, !dbg !85
  %434 = fadd float %421, %433, !dbg !86
  %435 = fadd float %321, %426, !dbg !87
  %436 = fmul float %428, %428, !dbg !88
  %437 = fmul float %416, %436, !dbg !89
  %438 = fmul float %432, %437, !dbg !90
  %439 = fadd float %435, %438, !dbg !91
  %440 = extractelement <8 x float> %314, i64 7, !dbg !78
  %441 = fsub float %440, %434, !dbg !78
  %442 = fadd float %330, %429, !dbg !81
  %443 = fcmp oeq float %442, 0.000000e+00, !dbg !82
  %444 = tail call float @llvm.nvvm.div.full(float %330, float %442), !dbg !83
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !84
  %446 = fmul float %445, %441, !dbg !85
  %447 = fadd float %434, %446, !dbg !86
  %448 = fadd float %322, %439, !dbg !87
  %449 = fmul float %441, %441, !dbg !88
  %450 = fmul float %429, %449, !dbg !89
  %451 = fmul float %445, %450, !dbg !90
  %452 = fadd float %448, %451, !dbg !91
  %453 = bitcast float %447 to i32, !dbg !92
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 16, i32 31), !dbg !92
  %455 = bitcast i32 %454 to float, !dbg !92
  %456 = bitcast float %452 to i32, !dbg !92
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 16, i32 31), !dbg !92
  %458 = bitcast i32 %457 to float, !dbg !92
  %459 = bitcast float %442 to i32, !dbg !92
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 16, i32 31), !dbg !92
  %461 = bitcast i32 %460 to float, !dbg !92
  %462 = fsub float %455, %447, !dbg !78
  %463 = fadd float %442, %461, !dbg !81
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !82
  %465 = tail call float @llvm.nvvm.div.full(float %461, float %463), !dbg !83
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !84
  %467 = fmul float %466, %462, !dbg !85
  %468 = fadd float %447, %467, !dbg !86
  %469 = fadd float %452, %458, !dbg !87
  %470 = fmul float %462, %462, !dbg !88
  %471 = fmul float %442, %470, !dbg !89
  %472 = fmul float %466, %471, !dbg !90
  %473 = fadd float %469, %472, !dbg !91
  %474 = bitcast float %468 to i32, !dbg !92
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 8, i32 31), !dbg !92
  %476 = bitcast i32 %475 to float, !dbg !92
  %477 = bitcast float %473 to i32, !dbg !92
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 8, i32 31), !dbg !92
  %479 = bitcast i32 %478 to float, !dbg !92
  %480 = bitcast float %463 to i32, !dbg !92
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 8, i32 31), !dbg !92
  %482 = bitcast i32 %481 to float, !dbg !92
  %483 = fsub float %476, %468, !dbg !78
  %484 = fadd float %463, %482, !dbg !81
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !82
  %486 = tail call float @llvm.nvvm.div.full(float %482, float %484), !dbg !83
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !84
  %488 = fmul float %487, %483, !dbg !85
  %489 = fadd float %468, %488, !dbg !86
  %490 = fadd float %473, %479, !dbg !87
  %491 = fmul float %483, %483, !dbg !88
  %492 = fmul float %463, %491, !dbg !89
  %493 = fmul float %487, %492, !dbg !90
  %494 = fadd float %490, %493, !dbg !91
  %495 = bitcast float %489 to i32, !dbg !92
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 4, i32 31), !dbg !92
  %497 = bitcast i32 %496 to float, !dbg !92
  %498 = bitcast float %494 to i32, !dbg !92
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 4, i32 31), !dbg !92
  %500 = bitcast i32 %499 to float, !dbg !92
  %501 = bitcast float %484 to i32, !dbg !92
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 4, i32 31), !dbg !92
  %503 = bitcast i32 %502 to float, !dbg !92
  %504 = fsub float %497, %489, !dbg !78
  %505 = fadd float %484, %503, !dbg !81
  %506 = fcmp oeq float %505, 0.000000e+00, !dbg !82
  %507 = tail call float @llvm.nvvm.div.full(float %503, float %505), !dbg !83
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !84
  %509 = fmul float %508, %504, !dbg !85
  %510 = fadd float %489, %509, !dbg !86
  %511 = fadd float %494, %500, !dbg !87
  %512 = fmul float %504, %504, !dbg !88
  %513 = fmul float %484, %512, !dbg !89
  %514 = fmul float %508, %513, !dbg !90
  %515 = fadd float %511, %514, !dbg !91
  %516 = bitcast float %510 to i32, !dbg !92
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 2, i32 31), !dbg !92
  %518 = bitcast i32 %517 to float, !dbg !92
  %519 = bitcast float %515 to i32, !dbg !92
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 2, i32 31), !dbg !92
  %521 = bitcast i32 %520 to float, !dbg !92
  %522 = bitcast float %505 to i32, !dbg !92
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 2, i32 31), !dbg !92
  %524 = bitcast i32 %523 to float, !dbg !92
  %525 = fsub float %518, %510, !dbg !78
  %526 = fadd float %505, %524, !dbg !81
  %527 = fcmp oeq float %526, 0.000000e+00, !dbg !82
  %528 = tail call float @llvm.nvvm.div.full(float %524, float %526), !dbg !83
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !84
  %530 = fmul float %529, %525, !dbg !85
  %531 = fadd float %510, %530, !dbg !86
  %532 = fadd float %515, %521, !dbg !87
  %533 = fmul float %525, %525, !dbg !88
  %534 = fmul float %505, %533, !dbg !89
  %535 = fmul float %529, %534, !dbg !90
  %536 = fadd float %532, %535, !dbg !91
  %537 = bitcast float %531 to i32, !dbg !92
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 1, i32 31), !dbg !92
  %539 = bitcast i32 %538 to float, !dbg !92
  %540 = bitcast float %536 to i32, !dbg !92
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 1, i32 31), !dbg !92
  %542 = bitcast i32 %541 to float, !dbg !92
  %543 = bitcast float %526 to i32, !dbg !92
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 1, i32 31), !dbg !92
  %545 = bitcast i32 %544 to float, !dbg !92
  %546 = fsub float %539, %531, !dbg !78
  %547 = fadd float %526, %545, !dbg !81
  %548 = fcmp oeq float %547, 0.000000e+00, !dbg !82
  %549 = tail call float @llvm.nvvm.div.full(float %545, float %547), !dbg !83
  %550 = select i1 %548, float 0.000000e+00, float %549, !dbg !84
  %551 = fmul float %550, %546, !dbg !85
  %552 = fadd float %531, %551, !dbg !86
  %553 = fadd float %536, %542, !dbg !87
  %554 = fmul float %546, %546, !dbg !88
  %555 = fmul float %526, %554, !dbg !89
  %556 = fmul float %550, %555, !dbg !90
  %557 = fadd float %553, %556, !dbg !91
  %558 = and i32 %360, 7, !dbg !92
  %559 = icmp eq i32 %20, 0, !dbg !92
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %558, !dbg !92
  %561 = bitcast float %552 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %561, i1 %559) #5, !dbg !92
  %562 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %558, !dbg !92
  %563 = bitcast float %557 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %562, <1 x i32> %563, i1 %559) #5, !dbg !92
  %564 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %558, !dbg !92
  %565 = bitcast float %547 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %565, i1 %559) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %566 = icmp slt i32 %19, 8, !dbg !92
  %567 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !92
  %568 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %567, i1 %566) #5, !dbg !92
  %569 = bitcast i32 %568 to float, !dbg !92
  %570 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !92
  %571 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %570, i1 %566) #5, !dbg !92
  %572 = bitcast i32 %571 to float, !dbg !92
  %573 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !92
  %574 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %573, i1 %566) #5, !dbg !92
  %575 = bitcast i32 %574 to float, !dbg !92
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 4, i32 31), !dbg !92
  %577 = bitcast i32 %576 to float, !dbg !92
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !92
  %579 = bitcast i32 %578 to float, !dbg !92
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 4, i32 31), !dbg !92
  %581 = bitcast i32 %580 to float, !dbg !92
  %582 = fsub float %577, %569, !dbg !78
  %583 = fadd float %575, %581, !dbg !81
  %584 = fcmp oeq float %583, 0.000000e+00, !dbg !82
  %585 = tail call float @llvm.nvvm.div.full(float %581, float %583), !dbg !83
  %586 = select i1 %584, float 0.000000e+00, float %585, !dbg !84
  %587 = fmul float %582, %586, !dbg !85
  %588 = fadd float %587, %569, !dbg !86
  %589 = fadd float %572, %579, !dbg !87
  %590 = fmul float %582, %582, !dbg !88
  %591 = fmul float %590, %575, !dbg !89
  %592 = fmul float %591, %586, !dbg !90
  %593 = fadd float %589, %592, !dbg !91
  %594 = bitcast float %588 to i32, !dbg !92
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !92
  %596 = bitcast i32 %595 to float, !dbg !92
  %597 = bitcast float %593 to i32, !dbg !92
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !92
  %599 = bitcast i32 %598 to float, !dbg !92
  %600 = bitcast float %583 to i32, !dbg !92
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 2, i32 31), !dbg !92
  %602 = bitcast i32 %601 to float, !dbg !92
  %603 = fsub float %596, %588, !dbg !78
  %604 = fadd float %583, %602, !dbg !81
  %605 = fcmp oeq float %604, 0.000000e+00, !dbg !82
  %606 = tail call float @llvm.nvvm.div.full(float %602, float %604), !dbg !83
  %607 = select i1 %605, float 0.000000e+00, float %606, !dbg !84
  %608 = fmul float %603, %607, !dbg !85
  %609 = fadd float %588, %608, !dbg !86
  %610 = fadd float %593, %599, !dbg !87
  %611 = fmul float %603, %603, !dbg !88
  %612 = fmul float %583, %611, !dbg !89
  %613 = fmul float %607, %612, !dbg !90
  %614 = fadd float %610, %613, !dbg !91
  %615 = bitcast float %609 to i32, !dbg !92
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !92
  %617 = bitcast i32 %616 to float, !dbg !92
  %618 = bitcast float %614 to i32, !dbg !92
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !92
  %620 = bitcast i32 %619 to float, !dbg !92
  %621 = bitcast float %604 to i32, !dbg !92
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 1, i32 31), !dbg !92
  %623 = bitcast i32 %622 to float, !dbg !92
  %624 = fsub float %617, %609, !dbg !78
  %625 = fadd float %604, %623, !dbg !81
  %626 = fcmp oeq float %625, 0.000000e+00, !dbg !82
  %627 = tail call float @llvm.nvvm.div.full(float %623, float %625), !dbg !83
  %628 = select i1 %626, float 0.000000e+00, float %627, !dbg !84
  %629 = fmul float %624, %628, !dbg !85
  %630 = fadd float %609, %629, !dbg !86
  %631 = fadd float %614, %620, !dbg !87
  %632 = fmul float %624, %624, !dbg !88
  %633 = fmul float %604, %632, !dbg !89
  %634 = fmul float %628, %633, !dbg !90
  %635 = fadd float %631, %634, !dbg !91
  %636 = and i32 %19, 7, !dbg !92
  %637 = icmp eq i32 %636, 0, !dbg !92
  %638 = and i1 %566, %637, !dbg !92
  %639 = bitcast float %630 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %639, i1 %638) #5, !dbg !92
  %640 = bitcast float %635 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %640, i1 %638) #5, !dbg !92
  %641 = bitcast float %625 to <1 x i32>, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %641, i1 %638) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %642 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %643 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !92
  %644 = tail call float @llvm.nvvm.div.full(float %643, float 3.072000e+03), !dbg !93
  %645 = fadd float %644, 0x3EB0C6F7A0000000, !dbg !94
  %646 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %647 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %648 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %649 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %651 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %652 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %653 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i39 = icmp eq i32 %653, 0, !dbg !95
  br i1 %.not.i39, label %656, label %654, !dbg !95

654:                                              ; preds = %__nv_rsqrtf.exit
  %655 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %645), !dbg !95
  br label %__nv_rsqrtf.exit41, !dbg !95

656:                                              ; preds = %__nv_rsqrtf.exit
  %657 = tail call float @llvm.nvvm.rsqrt.approx.f(float %645), !dbg !95
  br label %__nv_rsqrtf.exit41, !dbg !95

__nv_rsqrtf.exit41:                               ; preds = %654, %656
  %.0.i40 = phi float [ %655, %654 ], [ %657, %656 ], !dbg !95
  %658 = insertelement <2 x float> poison, float %.0.i40, i64 0, !dbg !96
  %659 = shufflevector <2 x float> %658, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %660 = insertelement <2 x float> poison, float %642, i64 0, !dbg !97
  %661 = shufflevector <2 x float> %660, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %662 = insertelement <4 x float> poison, float %.0.i40, i64 0, !dbg !96
  %663 = shufflevector <4 x float> %662, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !96
  %664 = insertelement <4 x float> poison, float %642, i64 0, !dbg !97
  %665 = shufflevector <4 x float> %664, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !97
  br label %666, !dbg !98

666:                                              ; preds = %__nv_rsqrtf.exit41, %666
  %667 = phi i1 [ true, %__nv_rsqrtf.exit41 ], [ false, %666 ]
  %indvars.iv85 = phi i64 [ 0, %__nv_rsqrtf.exit41 ], [ 2048, %666 ]
  %668 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %829, %666 ]
  %669 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %830, %666 ]
  %670 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit41 ], [ %792, %666 ]
  %671 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit41 ], [ %839, %666 ]
  %672 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %789, %666 ]
  %673 = or disjoint i64 %indvars.iv85, %61, !dbg !99
  %674 = or disjoint i64 %indvars.iv85, %60, !dbg !99
  %675 = icmp samesign ult i64 %673, 3072, !dbg !100
  %676 = trunc nuw nsw i64 %673 to i32, !dbg !101
  %677 = add i32 %45, %676, !dbg !101
  %678 = sext i32 %677 to i64, !dbg !102
  %679 = getelementptr bfloat, ptr addrspace(1) %8, i64 %678, !dbg !102
  %680 = and i1 %18, %675, !dbg !103
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %679, i1 %680) #5, !dbg !104
  %682 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !104
  %683 = bitcast i32 %682 to <2 x bfloat>, !dbg !104
  %684 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !104
  %685 = bitcast i32 %684 to <2 x bfloat>, !dbg !104
  %686 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !104
  %687 = bitcast i32 %686 to <2 x bfloat>, !dbg !104
  %688 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !104
  %689 = bitcast i32 %688 to <2 x bfloat>, !dbg !104
  %690 = or disjoint i64 %673, 12288, !dbg !105
  %691 = getelementptr float, ptr addrspace(1) %1, i64 %690, !dbg !106
  %692 = getelementptr float, ptr addrspace(1) %1, i64 %674, !dbg !106
  %693 = getelementptr i8, ptr addrspace(1) %692, i64 49152, !dbg !106
  %694 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %691, i1 %675) #5, !dbg !107
  %695 = extractvalue { i32, i32, i32, i32 } %694, 0, !dbg !107
  %696 = extractvalue { i32, i32, i32, i32 } %694, 1, !dbg !107
  %697 = extractvalue { i32, i32, i32, i32 } %694, 2, !dbg !107
  %698 = extractvalue { i32, i32, i32, i32 } %694, 3, !dbg !107
  %699 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %693, i1 %675) #5, !dbg !107
  %700 = extractvalue { i32, i32, i32, i32 } %699, 0, !dbg !107
  %701 = extractvalue { i32, i32, i32, i32 } %699, 1, !dbg !107
  %702 = extractvalue { i32, i32, i32, i32 } %699, 2, !dbg !107
  %703 = extractvalue { i32, i32, i32, i32 } %699, 3, !dbg !107
  %704 = getelementptr bfloat, ptr addrspace(1) %2, i64 %690, !dbg !108
  %705 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %704, i1 %675) #5, !dbg !109
  %706 = extractvalue { i32, i32, i32, i32 } %705, 0, !dbg !109
  %707 = bitcast i32 %706 to <2 x bfloat>, !dbg !109
  %708 = extractvalue { i32, i32, i32, i32 } %705, 1, !dbg !109
  %709 = bitcast i32 %708 to <2 x bfloat>, !dbg !109
  %710 = extractvalue { i32, i32, i32, i32 } %705, 2, !dbg !109
  %711 = bitcast i32 %710 to <2 x bfloat>, !dbg !109
  %712 = extractvalue { i32, i32, i32, i32 } %705, 3, !dbg !109
  %713 = bitcast i32 %712 to <2 x bfloat>, !dbg !109
  %714 = add nuw nsw i64 %673, 9216, !dbg !110
  %715 = getelementptr float, ptr addrspace(1) %1, i64 %714, !dbg !111
  %716 = getelementptr i8, ptr addrspace(1) %692, i64 36864, !dbg !111
  %717 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %715, i1 %675) #5, !dbg !112
  %718 = extractvalue { i32, i32, i32, i32 } %717, 0, !dbg !112
  %719 = extractvalue { i32, i32, i32, i32 } %717, 1, !dbg !112
  %720 = extractvalue { i32, i32, i32, i32 } %717, 2, !dbg !112
  %721 = extractvalue { i32, i32, i32, i32 } %717, 3, !dbg !112
  %722 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %716, i1 %675) #5, !dbg !112
  %723 = extractvalue { i32, i32, i32, i32 } %722, 0, !dbg !112
  %724 = extractvalue { i32, i32, i32, i32 } %722, 1, !dbg !112
  %725 = extractvalue { i32, i32, i32, i32 } %722, 2, !dbg !112
  %726 = extractvalue { i32, i32, i32, i32 } %722, 3, !dbg !112
  %727 = getelementptr bfloat, ptr addrspace(1) %2, i64 %714, !dbg !113
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %727, i1 %675) #5, !dbg !114
  %729 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !114
  %730 = bitcast i32 %729 to <2 x bfloat>, !dbg !114
  %731 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !114
  %732 = bitcast i32 %731 to <2 x bfloat>, !dbg !114
  %733 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !114
  %734 = bitcast i32 %733 to <2 x bfloat>, !dbg !114
  %735 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !114
  %736 = bitcast i32 %735 to <2 x bfloat>, !dbg !114
  %737 = fcmp uno <8 x float> %671, zeroinitializer, !dbg !115
  %738 = fcmp uno <4 x float> %672, zeroinitializer, !dbg !117
  %739 = fcmp uno float %668, 0.000000e+00, !dbg !117
  %740 = fcmp uno float %669, 0.000000e+00, !dbg !117
  %741 = fcmp uno <2 x float> %670, zeroinitializer, !dbg !115
  %742 = fpext <2 x bfloat> %683 to <2 x float>, !dbg !119
  %743 = insertelement <2 x i32> poison, i32 %695, i64 0, !dbg !107
  %744 = insertelement <2 x i32> %743, i32 %696, i64 1, !dbg !107
  %745 = bitcast <2 x i32> %744 to <2 x float>, !dbg !107
  %746 = fpext <2 x bfloat> %707 to <2 x float>, !dbg !120
  %747 = insertelement <2 x i32> poison, i32 %718, i64 0, !dbg !112
  %748 = insertelement <2 x i32> %747, i32 %719, i64 1, !dbg !112
  %749 = bitcast <2 x i32> %748 to <2 x float>, !dbg !112
  %750 = fpext <2 x bfloat> %730 to <2 x float>, !dbg !121
  %751 = fsub <2 x float> %742, %661, !dbg !97
  %752 = fmul <2 x float> %659, %751, !dbg !96
  %753 = fadd <2 x float> %745, %746, !dbg !122
  %754 = fadd <2 x float> %753, splat (float 1.000000e+00), !dbg !123
  %755 = fmul <2 x float> %752, %754, !dbg !124
  %756 = fadd <2 x float> %749, %750, !dbg !125
  %757 = fadd <2 x float> %755, %756, !dbg !126
  %758 = fcmp ogt <2 x float> %670, %757, !dbg !127
  %759 = or <2 x i1> %741, %758, !dbg !128
  %760 = select <2 x i1> %759, <2 x float> %670, <2 x float> %757, !dbg !129
  %761 = shufflevector <2 x bfloat> %685, <2 x bfloat> %687, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !119
  %762 = fpext <4 x bfloat> %761 to <4 x float>, !dbg !119
  %763 = insertelement <4 x i32> poison, i32 %697, i64 0, !dbg !107
  %764 = insertelement <4 x i32> %763, i32 %698, i64 1, !dbg !107
  %765 = insertelement <4 x i32> %764, i32 %700, i64 2, !dbg !107
  %766 = insertelement <4 x i32> %765, i32 %701, i64 3, !dbg !107
  %767 = bitcast <4 x i32> %766 to <4 x float>, !dbg !107
  %768 = shufflevector <2 x bfloat> %709, <2 x bfloat> %711, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %769 = fpext <4 x bfloat> %768 to <4 x float>, !dbg !120
  %770 = insertelement <4 x i32> poison, i32 %720, i64 0, !dbg !112
  %771 = insertelement <4 x i32> %770, i32 %721, i64 1, !dbg !112
  %772 = insertelement <4 x i32> %771, i32 %723, i64 2, !dbg !112
  %773 = insertelement <4 x i32> %772, i32 %724, i64 3, !dbg !112
  %774 = bitcast <4 x i32> %773 to <4 x float>, !dbg !112
  %775 = shufflevector <2 x bfloat> %732, <2 x bfloat> %734, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !121
  %776 = fpext <4 x bfloat> %775 to <4 x float>, !dbg !121
  %777 = fsub <4 x float> %762, %665, !dbg !97
  %778 = fmul <4 x float> %663, %777, !dbg !96
  %779 = fadd <4 x float> %767, %769, !dbg !122
  %780 = fadd <4 x float> %779, splat (float 1.000000e+00), !dbg !123
  %781 = fmul <4 x float> %778, %780, !dbg !124
  %782 = fadd <4 x float> %774, %776, !dbg !125
  %783 = fadd <4 x float> %781, %782, !dbg !126
  %784 = fcmp olt <4 x float> %672, %783, !dbg !130
  %785 = or <4 x i1> %738, %784, !dbg !131
  %786 = select <4 x i1> %785, <4 x float> %672, <4 x float> %783, !dbg !132
  %787 = insertelement <4 x i1> poison, i1 %680, i64 0, !dbg !133
  %788 = shufflevector <4 x i1> %787, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !133
  %789 = select <4 x i1> %788, <4 x float> %786, <4 x float> %672, !dbg !133
  %790 = insertelement <2 x i1> poison, i1 %680, i64 0, !dbg !134
  %791 = shufflevector <2 x i1> %790, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !134
  %792 = select <2 x i1> %791, <2 x float> %760, <2 x float> %670, !dbg !134
  %793 = insertelement <8 x i1> poison, i1 %680, i64 0, !dbg !134
  %794 = shufflevector <8 x i1> %793, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !134
  %795 = getelementptr bfloat, ptr addrspace(1) %9, i64 %678, !dbg !135
  %796 = fptrunc <2 x float> %757 to <2 x bfloat>, !dbg !136
  %797 = extractelement <4 x float> %783, i64 0, !dbg !136
  %798 = fptrunc float %797 to bfloat, !dbg !136
  %799 = extractelement <4 x float> %783, i64 1, !dbg !136
  %800 = fptrunc float %799 to bfloat, !dbg !136
  %801 = extractelement <4 x float> %783, i64 2, !dbg !136
  %802 = fptrunc float %801 to bfloat, !dbg !136
  %803 = extractelement <4 x float> %783, i64 3, !dbg !136
  %804 = fptrunc float %803 to bfloat, !dbg !136
  %805 = fpext <2 x bfloat> %689 to <2 x float>, !dbg !119
  %806 = insertelement <2 x i32> poison, i32 %702, i64 0, !dbg !107
  %807 = insertelement <2 x i32> %806, i32 %703, i64 1, !dbg !107
  %808 = bitcast <2 x i32> %807 to <2 x float>, !dbg !107
  %809 = fpext <2 x bfloat> %713 to <2 x float>, !dbg !120
  %810 = insertelement <2 x i32> poison, i32 %725, i64 0, !dbg !112
  %811 = insertelement <2 x i32> %810, i32 %726, i64 1, !dbg !112
  %812 = bitcast <2 x i32> %811 to <2 x float>, !dbg !112
  %813 = fpext <2 x bfloat> %736 to <2 x float>, !dbg !121
  %814 = fsub <2 x float> %805, %661, !dbg !97
  %815 = fmul <2 x float> %659, %814, !dbg !96
  %816 = fadd <2 x float> %808, %809, !dbg !122
  %817 = fadd <2 x float> %816, splat (float 1.000000e+00), !dbg !123
  %818 = fmul <2 x float> %815, %817, !dbg !124
  %819 = fadd <2 x float> %812, %813, !dbg !125
  %820 = fadd <2 x float> %818, %819, !dbg !126
  %821 = extractelement <2 x float> %820, i64 0, !dbg !132
  %822 = fcmp olt float %668, %821, !dbg !130
  %823 = extractelement <2 x float> %820, i64 1, !dbg !132
  %824 = fcmp olt float %669, %823, !dbg !130
  %825 = or i1 %739, %822, !dbg !131
  %826 = or i1 %740, %824, !dbg !131
  %827 = select i1 %825, float %668, float %821, !dbg !132
  %828 = select i1 %826, float %669, float %823, !dbg !132
  %829 = select i1 %680, float %827, float %668, !dbg !133
  %830 = select i1 %680, float %828, float %669, !dbg !133
  %831 = shufflevector <2 x float> %757, <2 x float> %820, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !127
  %832 = shufflevector <4 x float> %783, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %833 = shufflevector <8 x float> %832, <8 x float> %831, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !127
  %834 = fcmp ogt <8 x float> %671, %833, !dbg !127
  %835 = fcmp olt <8 x float> %671, %833, !dbg !127
  %836 = shufflevector <8 x i1> %834, <8 x i1> %835, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !127
  %837 = or <8 x i1> %737, %836, !dbg !128
  %838 = select <8 x i1> %837, <8 x float> %671, <8 x float> %833, !dbg !129
  %839 = select <8 x i1> %794, <8 x float> %838, <8 x float> %671, !dbg !134
  %840 = fptrunc <2 x float> %820 to <2 x bfloat>, !dbg !136
  %841 = bitcast <2 x bfloat> %796 to i32, !dbg !136
  %842 = insertelement <2 x bfloat> poison, bfloat %798, i64 0, !dbg !136
  %843 = insertelement <2 x bfloat> %842, bfloat %800, i64 1, !dbg !136
  %844 = bitcast <2 x bfloat> %843 to i32, !dbg !136
  %845 = insertelement <2 x bfloat> poison, bfloat %802, i64 0, !dbg !136
  %846 = insertelement <2 x bfloat> %845, bfloat %804, i64 1, !dbg !136
  %847 = bitcast <2 x bfloat> %846 to i32, !dbg !136
  %848 = bitcast <2 x bfloat> %840 to i32, !dbg !136
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %841, i32 %844, i32 %847, i32 %848, ptr addrspace(1) %795, i1 %680) #5, !dbg !136
  br i1 %667, label %666, label %849, !dbg !98

849:                                              ; preds = %666
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %850 = extractelement <8 x float> %839, i64 6, !dbg !139
  %851 = extractelement <8 x float> %839, i64 7, !dbg !139
  %852 = fcmp olt float %850, %851, !dbg !139
  %853 = fcmp uno float %850, 0.000000e+00, !dbg !140
  %854 = or i1 %852, %853, !dbg !141
  %855 = select i1 %854, float %850, float %851, !dbg !142
  %856 = extractelement <4 x float> %789, i64 0, !dbg !139
  %857 = fcmp olt float %855, %856, !dbg !139
  %858 = fcmp uno float %855, 0.000000e+00, !dbg !140
  %859 = or i1 %857, %858, !dbg !141
  %860 = select i1 %859, float %855, float %856, !dbg !142
  %861 = extractelement <4 x float> %789, i64 1, !dbg !139
  %862 = fcmp olt float %860, %861, !dbg !139
  %863 = fcmp uno float %860, 0.000000e+00, !dbg !140
  %864 = or i1 %862, %863, !dbg !141
  %865 = select i1 %864, float %860, float %861, !dbg !142
  %866 = extractelement <4 x float> %789, i64 2, !dbg !139
  %867 = fcmp olt float %865, %866, !dbg !139
  %868 = fcmp uno float %865, 0.000000e+00, !dbg !140
  %869 = or i1 %867, %868, !dbg !141
  %870 = select i1 %869, float %865, float %866, !dbg !142
  %871 = extractelement <4 x float> %789, i64 3, !dbg !139
  %872 = fcmp olt float %870, %871, !dbg !139
  %873 = fcmp uno float %870, 0.000000e+00, !dbg !140
  %874 = or i1 %872, %873, !dbg !141
  %875 = select i1 %874, float %870, float %871, !dbg !142
  %876 = fcmp olt float %875, %829, !dbg !139
  %877 = fcmp uno float %875, 0.000000e+00, !dbg !140
  %878 = or i1 %876, %877, !dbg !141
  %879 = select i1 %878, float %875, float %829, !dbg !142
  %880 = fcmp olt float %879, %830, !dbg !139
  %881 = fcmp uno float %879, 0.000000e+00, !dbg !140
  %882 = or i1 %880, %881, !dbg !141
  %883 = select i1 %882, float %879, float %830, !dbg !142
  %884 = bitcast float %883 to i32, !dbg !137
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 16, i32 31), !dbg !137
  %886 = bitcast i32 %885 to float, !dbg !137
  %887 = fcmp olt float %883, %886, !dbg !139
  %888 = fcmp uno float %883, 0.000000e+00, !dbg !140
  %889 = or i1 %888, %887, !dbg !141
  %890 = select i1 %889, float %883, float %886, !dbg !142
  %891 = bitcast float %890 to i32, !dbg !137
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 8, i32 31), !dbg !137
  %893 = bitcast i32 %892 to float, !dbg !137
  %894 = fcmp olt float %890, %893, !dbg !139
  %895 = fcmp uno float %890, 0.000000e+00, !dbg !140
  %896 = or i1 %894, %895, !dbg !141
  %897 = select i1 %896, float %890, float %893, !dbg !142
  %898 = bitcast float %897 to i32, !dbg !137
  %899 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %898, i32 4, i32 31), !dbg !137
  %900 = bitcast i32 %899 to float, !dbg !137
  %901 = fcmp olt float %897, %900, !dbg !139
  %902 = fcmp uno float %897, 0.000000e+00, !dbg !140
  %903 = or i1 %901, %902, !dbg !141
  %904 = select i1 %903, float %897, float %900, !dbg !142
  %905 = bitcast float %904 to i32, !dbg !137
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 2, i32 31), !dbg !137
  %907 = bitcast i32 %906 to float, !dbg !137
  %908 = fcmp olt float %904, %907, !dbg !139
  %909 = fcmp uno float %904, 0.000000e+00, !dbg !140
  %910 = or i1 %908, %909, !dbg !141
  %911 = select i1 %910, float %904, float %907, !dbg !142
  %912 = bitcast float %911 to i32, !dbg !137
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 1, i32 31), !dbg !137
  %914 = bitcast i32 %913 to float, !dbg !137
  %915 = fcmp olt float %911, %914, !dbg !139
  %916 = fcmp uno float %911, 0.000000e+00, !dbg !140
  %917 = or i1 %915, %916, !dbg !141
  %918 = select i1 %917, i32 %912, i32 %913, !dbg !142
  %919 = insertelement <1 x i32> poison, i32 %918, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %919, i1 %559) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %920 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %567, i1 %566) #5, !dbg !137
  %921 = bitcast i32 %920 to float, !dbg !137
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 4, i32 31), !dbg !137
  %923 = bitcast i32 %922 to float, !dbg !137
  %924 = fcmp olt float %921, %923, !dbg !139
  %925 = fcmp uno float %921, 0.000000e+00, !dbg !140
  %926 = or i1 %925, %924, !dbg !141
  %927 = select i1 %926, float %921, float %923, !dbg !142
  %928 = bitcast float %927 to i32, !dbg !137
  %929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %928, i32 2, i32 31), !dbg !137
  %930 = bitcast i32 %929 to float, !dbg !137
  %931 = fcmp olt float %927, %930, !dbg !139
  %932 = fcmp uno float %927, 0.000000e+00, !dbg !140
  %933 = or i1 %931, %932, !dbg !141
  %934 = select i1 %933, float %927, float %930, !dbg !142
  %935 = bitcast float %934 to i32, !dbg !137
  %936 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %935, i32 1, i32 31), !dbg !137
  %937 = bitcast i32 %936 to float, !dbg !137
  %938 = fcmp olt float %934, %937, !dbg !139
  %939 = fcmp uno float %934, 0.000000e+00, !dbg !140
  %940 = or i1 %938, %939, !dbg !141
  %941 = select i1 %940, i32 %935, i32 %936, !dbg !142
  %942 = insertelement <1 x i32> poison, i32 %941, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %942, i1 %638) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %943 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %944 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %792, <2 x i32> <i32 0, i32 2>, !dbg !145
  %945 = fcmp ogt <2 x float> %944, %792, !dbg !145
  %946 = fcmp uno <2 x float> %944, %792, !dbg !145
  %shift = shufflevector <2 x i1> %945, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !146
  %947 = or <2 x i1> %shift, %946, !dbg !146
  %948 = extractelement <2 x i1> %947, i64 0, !dbg !146
  %949 = extractelement <2 x float> %792, i64 0, !dbg !147
  %950 = extractelement <2 x float> %792, i64 1, !dbg !147
  %951 = select i1 %948, float %949, float %950, !dbg !147
  %952 = extractelement <8 x float> %839, i64 0, !dbg !145
  %953 = fcmp ogt float %951, %952, !dbg !145
  %954 = fcmp uno float %951, 0.000000e+00, !dbg !148
  %955 = or i1 %953, %954, !dbg !146
  %956 = select i1 %955, float %951, float %952, !dbg !147
  %957 = extractelement <8 x float> %839, i64 1, !dbg !145
  %958 = fcmp ogt float %956, %957, !dbg !145
  %959 = fcmp uno float %956, 0.000000e+00, !dbg !148
  %960 = or i1 %958, %959, !dbg !146
  %961 = select i1 %960, float %956, float %957, !dbg !147
  %962 = extractelement <8 x float> %839, i64 2, !dbg !145
  %963 = fcmp ogt float %961, %962, !dbg !145
  %964 = fcmp uno float %961, 0.000000e+00, !dbg !148
  %965 = or i1 %963, %964, !dbg !146
  %966 = select i1 %965, float %961, float %962, !dbg !147
  %967 = extractelement <8 x float> %839, i64 3, !dbg !145
  %968 = fcmp ogt float %966, %967, !dbg !145
  %969 = fcmp uno float %966, 0.000000e+00, !dbg !148
  %970 = or i1 %968, %969, !dbg !146
  %971 = select i1 %970, float %966, float %967, !dbg !147
  %972 = extractelement <8 x float> %839, i64 4, !dbg !145
  %973 = fcmp ogt float %971, %972, !dbg !145
  %974 = fcmp uno float %971, 0.000000e+00, !dbg !148
  %975 = or i1 %973, %974, !dbg !146
  %976 = select i1 %975, float %971, float %972, !dbg !147
  %977 = extractelement <8 x float> %839, i64 5, !dbg !145
  %978 = fcmp ogt float %976, %977, !dbg !145
  %979 = fcmp uno float %976, 0.000000e+00, !dbg !148
  %980 = or i1 %978, %979, !dbg !146
  %981 = select i1 %980, float %976, float %977, !dbg !147
  %982 = bitcast float %981 to i32, !dbg !143
  %983 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %982, i32 16, i32 31), !dbg !143
  %984 = bitcast i32 %983 to float, !dbg !143
  %985 = fcmp ogt float %981, %984, !dbg !145
  %986 = fcmp uno float %981, 0.000000e+00, !dbg !148
  %987 = or i1 %986, %985, !dbg !146
  %988 = select i1 %987, float %981, float %984, !dbg !147
  %989 = bitcast float %988 to i32, !dbg !143
  %990 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %989, i32 8, i32 31), !dbg !143
  %991 = bitcast i32 %990 to float, !dbg !143
  %992 = fcmp ogt float %988, %991, !dbg !145
  %993 = fcmp uno float %988, 0.000000e+00, !dbg !148
  %994 = or i1 %992, %993, !dbg !146
  %995 = select i1 %994, float %988, float %991, !dbg !147
  %996 = bitcast float %995 to i32, !dbg !143
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 4, i32 31), !dbg !143
  %998 = bitcast i32 %997 to float, !dbg !143
  %999 = fcmp ogt float %995, %998, !dbg !145
  %1000 = fcmp uno float %995, 0.000000e+00, !dbg !148
  %1001 = or i1 %999, %1000, !dbg !146
  %1002 = select i1 %1001, float %995, float %998, !dbg !147
  %1003 = bitcast float %1002 to i32, !dbg !143
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 2, i32 31), !dbg !143
  %1005 = bitcast i32 %1004 to float, !dbg !143
  %1006 = fcmp ogt float %1002, %1005, !dbg !145
  %1007 = fcmp uno float %1002, 0.000000e+00, !dbg !148
  %1008 = or i1 %1006, %1007, !dbg !146
  %1009 = select i1 %1008, float %1002, float %1005, !dbg !147
  %1010 = bitcast float %1009 to i32, !dbg !143
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 1, i32 31), !dbg !143
  %1012 = bitcast i32 %1011 to float, !dbg !143
  %1013 = fcmp ogt float %1009, %1012, !dbg !145
  %1014 = fcmp uno float %1009, 0.000000e+00, !dbg !148
  %1015 = or i1 %1013, %1014, !dbg !146
  %1016 = select i1 %1015, i32 %1010, i32 %1011, !dbg !147
  %1017 = insertelement <1 x i32> poison, i32 %1016, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %1017, i1 %559) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1018 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %567, i1 %566) #5, !dbg !143
  %1019 = bitcast i32 %1018 to float, !dbg !143
  %1020 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1018, i32 4, i32 31), !dbg !143
  %1021 = bitcast i32 %1020 to float, !dbg !143
  %1022 = fcmp ogt float %1019, %1021, !dbg !145
  %1023 = fcmp uno float %1019, 0.000000e+00, !dbg !148
  %1024 = or i1 %1023, %1022, !dbg !146
  %1025 = select i1 %1024, float %1019, float %1021, !dbg !147
  %1026 = bitcast float %1025 to i32, !dbg !143
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 2, i32 31), !dbg !143
  %1028 = bitcast i32 %1027 to float, !dbg !143
  %1029 = fcmp ogt float %1025, %1028, !dbg !145
  %1030 = fcmp uno float %1025, 0.000000e+00, !dbg !148
  %1031 = or i1 %1029, %1030, !dbg !146
  %1032 = select i1 %1031, float %1025, float %1028, !dbg !147
  %1033 = bitcast float %1032 to i32, !dbg !143
  %1034 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1033, i32 1, i32 31), !dbg !143
  %1035 = bitcast i32 %1034 to float, !dbg !143
  %1036 = fcmp ogt float %1032, %1035, !dbg !145
  %1037 = fcmp uno float %1032, 0.000000e+00, !dbg !148
  %1038 = or i1 %1036, %1037, !dbg !146
  %1039 = select i1 %1038, i32 %1033, i32 %1034, !dbg !147
  %1040 = insertelement <1 x i32> poison, i32 %1039, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %1040, i1 %638) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1041 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %1042 = getelementptr bfloat, ptr addrspace(1) %10, i64 %24, !dbg !149
  %1043 = fptrunc float %943 to bfloat, !dbg !150
  %1044 = and i32 %19, 255, !dbg !150
  %1045 = icmp eq i32 %1044, 0, !dbg !150
  %1046 = bitcast bfloat %1043 to i16, !dbg !150
  %1047 = and i1 %18, %1045, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1046, ptr addrspace(1) %1042, i1 %1047) #5, !dbg !150
  %1048 = getelementptr bfloat, ptr addrspace(1) %11, i64 %24, !dbg !151
  %1049 = fptrunc float %1041 to bfloat, !dbg !152
  %1050 = bitcast bfloat %1049 to i16, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1050, ptr addrspace(1) %1048, i1 %1047) #5, !dbg !152
  %.inv4 = fcmp oge float %943, 0.000000e+00, !dbg !153
  %1051 = select i1 %.inv4, float 0.000000e+00, float %943, !dbg !153
  %1052 = fsub float 0.000000e+00, %1051, !dbg !155
  %.inv5 = fcmp ole float %1041, 0.000000e+00, !dbg !156
  %1053 = select i1 %.inv5, float 0.000000e+00, float %1041, !dbg !156
  %1054 = fcmp ogt float %1052, %1053, !dbg !158
  %1055 = fcmp uno float %1052, 0.000000e+00, !dbg !160
  %1056 = or i1 %1055, %1054, !dbg !161
  %1057 = select i1 %1056, float %1052, float %1053, !dbg !162
  %1058 = fmul float %1057, 0x3F80204080000000, !dbg !163
  %1059 = fcmp ogt float %1058, 0x3EE4F8B580000000, !dbg !164
  %1060 = fcmp uno float %1058, 0.000000e+00, !dbg !166
  %1061 = or i1 %1059, %1060, !dbg !167
  %1062 = select i1 %1061, float %1058, float 0x3EE4F8B580000000, !dbg !168
  %1063 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1062), !dbg !169
  %1064 = add i32 %22, %45, !dbg !170
  %1065 = sext i32 %1064 to i64, !dbg !171
  %1066 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1065, !dbg !171
  %1067 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1066, i1 %18) #5, !dbg !172
  %1068 = extractvalue { i32, i32, i32, i32 } %1067, 0, !dbg !172
  %1069 = bitcast i32 %1068 to <2 x bfloat>, !dbg !172
  %1070 = extractvalue { i32, i32, i32, i32 } %1067, 1, !dbg !172
  %1071 = bitcast i32 %1070 to <2 x bfloat>, !dbg !172
  %1072 = extractvalue { i32, i32, i32, i32 } %1067, 2, !dbg !172
  %1073 = bitcast i32 %1072 to <2 x bfloat>, !dbg !172
  %1074 = extractvalue { i32, i32, i32, i32 } %1067, 3, !dbg !172
  %1075 = bitcast i32 %1074 to <2 x bfloat>, !dbg !172
  %1076 = extractelement <2 x bfloat> %1069, i64 0, !dbg !172
  %1077 = extractelement <2 x bfloat> %1069, i64 1, !dbg !172
  %1078 = extractelement <2 x bfloat> %1071, i64 0, !dbg !172
  %1079 = extractelement <2 x bfloat> %1071, i64 1, !dbg !172
  %1080 = extractelement <2 x bfloat> %1073, i64 0, !dbg !172
  %1081 = extractelement <2 x bfloat> %1073, i64 1, !dbg !172
  %1082 = extractelement <2 x bfloat> %1075, i64 0, !dbg !172
  %1083 = extractelement <2 x bfloat> %1075, i64 1, !dbg !172
  %1084 = fpext bfloat %1076 to float, !dbg !173
  %1085 = fpext bfloat %1077 to float, !dbg !173
  %1086 = fpext bfloat %1078 to float, !dbg !173
  %1087 = fpext bfloat %1079 to float, !dbg !173
  %1088 = fpext bfloat %1080 to float, !dbg !173
  %1089 = fpext bfloat %1081 to float, !dbg !173
  %1090 = fpext bfloat %1082 to float, !dbg !173
  %1091 = fpext bfloat %1083 to float, !dbg !173
  %1092 = fmul float %1063, %1084, !dbg !174
  %1093 = fmul float %1063, %1085, !dbg !174
  %1094 = fmul float %1063, %1086, !dbg !174
  %1095 = fmul float %1063, %1087, !dbg !174
  %1096 = fmul float %1063, %1088, !dbg !174
  %1097 = fmul float %1063, %1089, !dbg !174
  %1098 = fmul float %1063, %1090, !dbg !174
  %1099 = fmul float %1063, %1091, !dbg !174
  %1100 = tail call float @llvm.nvvm.round.f(float %1092) #5, !dbg !175
  %1101 = tail call float @llvm.nvvm.round.f(float %1093) #5, !dbg !175
  %1102 = tail call float @llvm.nvvm.round.f(float %1094) #5, !dbg !175
  %1103 = tail call float @llvm.nvvm.round.f(float %1095) #5, !dbg !175
  %1104 = tail call float @llvm.nvvm.round.f(float %1096) #5, !dbg !175
  %1105 = tail call float @llvm.nvvm.round.f(float %1097) #5, !dbg !175
  %1106 = tail call float @llvm.nvvm.round.f(float %1098) #5, !dbg !175
  %1107 = tail call float @llvm.nvvm.round.f(float %1099) #5, !dbg !175
  %1108 = insertelement <4 x float> poison, float %1100, i64 0, !dbg !176
  %1109 = insertelement <4 x float> %1108, float %1101, i64 1, !dbg !176
  %1110 = insertelement <4 x float> %1109, float %1102, i64 2, !dbg !176
  %1111 = insertelement <4 x float> %1110, float %1103, i64 3, !dbg !176
  %1112 = fcmp ogt <4 x float> %1111, splat (float -1.270000e+02), !dbg !176
  %1113 = fcmp uno <4 x float> %1111, zeroinitializer, !dbg !178
  %1114 = or <4 x i1> %1112, %1113, !dbg !179
  %1115 = select <4 x i1> %1114, <4 x float> %1111, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1116 = fcmp olt <4 x float> %1115, splat (float 1.270000e+02), !dbg !181
  %1117 = fcmp uno <4 x float> %1115, zeroinitializer, !dbg !183
  %1118 = or <4 x i1> %1116, %1117, !dbg !184
  %1119 = fptosi <4 x float> %1115 to <4 x i8>, !dbg !185
  %1120 = select <4 x i1> %1118, <4 x i8> %1119, <4 x i8> splat (i8 127), !dbg !186
  %1121 = insertelement <4 x float> poison, float %1104, i64 0, !dbg !176
  %1122 = insertelement <4 x float> %1121, float %1105, i64 1, !dbg !176
  %1123 = insertelement <4 x float> %1122, float %1106, i64 2, !dbg !176
  %1124 = insertelement <4 x float> %1123, float %1107, i64 3, !dbg !176
  %1125 = fcmp ogt <4 x float> %1124, splat (float -1.270000e+02), !dbg !176
  %1126 = fcmp uno <4 x float> %1124, zeroinitializer, !dbg !178
  %1127 = or <4 x i1> %1125, %1126, !dbg !179
  %1128 = select <4 x i1> %1127, <4 x float> %1124, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1129 = fcmp olt <4 x float> %1128, splat (float 1.270000e+02), !dbg !181
  %1130 = fcmp uno <4 x float> %1128, zeroinitializer, !dbg !183
  %1131 = or <4 x i1> %1129, %1130, !dbg !184
  %1132 = fptosi <4 x float> %1128 to <4 x i8>, !dbg !185
  %1133 = select <4 x i1> %1131, <4 x i8> %1132, <4 x i8> splat (i8 127), !dbg !186
  %1134 = getelementptr i8, ptr addrspace(1) %12, i64 %1065, !dbg !187
  %1135 = bitcast <4 x i8> %1120 to i32, !dbg !188
  %1136 = bitcast <4 x i8> %1133 to i32, !dbg !188
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1135, i32 %1136, ptr addrspace(1) %1134, i1 %18) #5, !dbg !188
  %1137 = or disjoint i64 %61, 2048, !dbg !189
  %1138 = icmp samesign ult i64 %1137, 3072, !dbg !190
  %1139 = trunc nuw nsw i64 %1137 to i32, !dbg !170
  %1140 = add i32 %45, %1139, !dbg !170
  %1141 = sext i32 %1140 to i64, !dbg !171
  %1142 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1141, !dbg !171
  %1143 = and i1 %18, %1138, !dbg !191
  %1144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1142, i1 %1143) #5, !dbg !172
  %1145 = extractvalue { i32, i32, i32, i32 } %1144, 0, !dbg !172
  %1146 = bitcast i32 %1145 to <2 x bfloat>, !dbg !172
  %1147 = extractvalue { i32, i32, i32, i32 } %1144, 1, !dbg !172
  %1148 = bitcast i32 %1147 to <2 x bfloat>, !dbg !172
  %1149 = extractvalue { i32, i32, i32, i32 } %1144, 2, !dbg !172
  %1150 = bitcast i32 %1149 to <2 x bfloat>, !dbg !172
  %1151 = extractvalue { i32, i32, i32, i32 } %1144, 3, !dbg !172
  %1152 = bitcast i32 %1151 to <2 x bfloat>, !dbg !172
  %1153 = extractelement <2 x bfloat> %1146, i64 0, !dbg !172
  %1154 = extractelement <2 x bfloat> %1146, i64 1, !dbg !172
  %1155 = extractelement <2 x bfloat> %1148, i64 0, !dbg !172
  %1156 = extractelement <2 x bfloat> %1148, i64 1, !dbg !172
  %1157 = extractelement <2 x bfloat> %1150, i64 0, !dbg !172
  %1158 = extractelement <2 x bfloat> %1150, i64 1, !dbg !172
  %1159 = extractelement <2 x bfloat> %1152, i64 0, !dbg !172
  %1160 = extractelement <2 x bfloat> %1152, i64 1, !dbg !172
  %1161 = fpext bfloat %1153 to float, !dbg !173
  %1162 = fpext bfloat %1154 to float, !dbg !173
  %1163 = fpext bfloat %1155 to float, !dbg !173
  %1164 = fpext bfloat %1156 to float, !dbg !173
  %1165 = fpext bfloat %1157 to float, !dbg !173
  %1166 = fpext bfloat %1158 to float, !dbg !173
  %1167 = fpext bfloat %1159 to float, !dbg !173
  %1168 = fpext bfloat %1160 to float, !dbg !173
  %1169 = fmul float %1063, %1161, !dbg !174
  %1170 = fmul float %1063, %1162, !dbg !174
  %1171 = fmul float %1063, %1163, !dbg !174
  %1172 = fmul float %1063, %1164, !dbg !174
  %1173 = fmul float %1063, %1165, !dbg !174
  %1174 = fmul float %1063, %1166, !dbg !174
  %1175 = fmul float %1063, %1167, !dbg !174
  %1176 = fmul float %1063, %1168, !dbg !174
  %1177 = tail call float @llvm.nvvm.round.f(float %1169) #5, !dbg !175
  %1178 = tail call float @llvm.nvvm.round.f(float %1170) #5, !dbg !175
  %1179 = tail call float @llvm.nvvm.round.f(float %1171) #5, !dbg !175
  %1180 = tail call float @llvm.nvvm.round.f(float %1172) #5, !dbg !175
  %1181 = tail call float @llvm.nvvm.round.f(float %1173) #5, !dbg !175
  %1182 = tail call float @llvm.nvvm.round.f(float %1174) #5, !dbg !175
  %1183 = tail call float @llvm.nvvm.round.f(float %1175) #5, !dbg !175
  %1184 = tail call float @llvm.nvvm.round.f(float %1176) #5, !dbg !175
  %1185 = insertelement <4 x float> poison, float %1177, i64 0, !dbg !176
  %1186 = insertelement <4 x float> %1185, float %1178, i64 1, !dbg !176
  %1187 = insertelement <4 x float> %1186, float %1179, i64 2, !dbg !176
  %1188 = insertelement <4 x float> %1187, float %1180, i64 3, !dbg !176
  %1189 = fcmp ogt <4 x float> %1188, splat (float -1.270000e+02), !dbg !176
  %1190 = fcmp uno <4 x float> %1188, zeroinitializer, !dbg !178
  %1191 = or <4 x i1> %1189, %1190, !dbg !179
  %1192 = select <4 x i1> %1191, <4 x float> %1188, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1193 = fcmp olt <4 x float> %1192, splat (float 1.270000e+02), !dbg !181
  %1194 = fcmp uno <4 x float> %1192, zeroinitializer, !dbg !183
  %1195 = or <4 x i1> %1193, %1194, !dbg !184
  %1196 = fptosi <4 x float> %1192 to <4 x i8>, !dbg !185
  %1197 = select <4 x i1> %1195, <4 x i8> %1196, <4 x i8> splat (i8 127), !dbg !186
  %1198 = insertelement <4 x float> poison, float %1181, i64 0, !dbg !176
  %1199 = insertelement <4 x float> %1198, float %1182, i64 1, !dbg !176
  %1200 = insertelement <4 x float> %1199, float %1183, i64 2, !dbg !176
  %1201 = insertelement <4 x float> %1200, float %1184, i64 3, !dbg !176
  %1202 = fcmp ogt <4 x float> %1201, splat (float -1.270000e+02), !dbg !176
  %1203 = fcmp uno <4 x float> %1201, zeroinitializer, !dbg !178
  %1204 = or <4 x i1> %1202, %1203, !dbg !179
  %1205 = select <4 x i1> %1204, <4 x float> %1201, <4 x float> splat (float -1.270000e+02), !dbg !180
  %1206 = fcmp olt <4 x float> %1205, splat (float 1.270000e+02), !dbg !181
  %1207 = fcmp uno <4 x float> %1205, zeroinitializer, !dbg !183
  %1208 = or <4 x i1> %1206, %1207, !dbg !184
  %1209 = fptosi <4 x float> %1205 to <4 x i8>, !dbg !185
  %1210 = select <4 x i1> %1208, <4 x i8> %1209, <4 x i8> splat (i8 127), !dbg !186
  %1211 = getelementptr i8, ptr addrspace(1) %12, i64 %1141, !dbg !187
  %1212 = bitcast <4 x i8> %1197 to i32, !dbg !188
  %1213 = bitcast <4 x i8> %1210 to i32, !dbg !188
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1212, i32 %1213, ptr addrspace(1) %1211, i1 %1143) #5, !dbg !188
  ret void, !dbg !192
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 60, column: 23, scope: !6)
!37 = !DILocation(line: 35, column: 31, scope: !6)
!38 = !DILocation(line: 36, column: 29, scope: !6)
!39 = !DILocation(line: 40, column: 41, scope: !6)
!40 = !DILocation(line: 40, column: 34, scope: !6)
!41 = !DILocation(line: 40, column: 59, scope: !6)
!42 = !DILocation(line: 40, column: 51, scope: !6)
!43 = !DILocation(line: 41, column: 41, scope: !6)
!44 = !DILocation(line: 41, column: 34, scope: !6)
!45 = !DILocation(line: 41, column: 48, scope: !6)
!46 = !DILocation(line: 42, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 48, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 51, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 44, column: 42, scope: !6)
!52 = !DILocation(line: 45, column: 35, scope: !6)
!53 = !DILocation(line: 45, column: 42, scope: !6)
!54 = !DILocation(line: 40, column: 113, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 95, scope: !6)
!58 = !DILocation(line: 47, column: 22, scope: !6)
!59 = !DILocation(line: 48, column: 23, scope: !6)
!60 = !DILocation(line: 61, column: 24, scope: !6)
!61 = !DILocation(line: 62, column: 24, scope: !6)
!62 = !DILocation(line: 63, column: 23, scope: !6)
!63 = !DILocation(line: 64, column: 23, scope: !6)
!64 = !DILocation(line: 203, column: 7, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 55, scope: !6)
!66 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !65)
!67 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !65)
!68 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !65)
!69 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !65)
!70 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !65)
!73 = !DILocation(line: 70, column: 64, scope: !6)
!74 = !DILocation(line: 71, column: 60, scope: !6)
!75 = !DILocation(line: 72, column: 68, scope: !6)
!76 = !DILocation(line: 73, column: 29, scope: !6)
!77 = !DILocation(line: 73, column: 53, scope: !6)
!78 = !DILocation(line: 217, column: 21, scope: !79, inlinedAt: !80)
!79 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!80 = !DILocation(line: 74, column: 85, scope: !6)
!81 = !DILocation(line: 218, column: 28, scope: !79, inlinedAt: !80)
!82 = !DILocation(line: 219, column: 39, scope: !79, inlinedAt: !80)
!83 = !DILocation(line: 219, column: 60, scope: !79, inlinedAt: !80)
!84 = !DILocation(line: 219, column: 49, scope: !79, inlinedAt: !80)
!85 = !DILocation(line: 221, column: 25, scope: !79, inlinedAt: !80)
!86 = !DILocation(line: 221, column: 17, scope: !79, inlinedAt: !80)
!87 = !DILocation(line: 222, column: 15, scope: !79, inlinedAt: !80)
!88 = !DILocation(line: 222, column: 30, scope: !79, inlinedAt: !80)
!89 = !DILocation(line: 222, column: 38, scope: !79, inlinedAt: !80)
!90 = !DILocation(line: 222, column: 49, scope: !79, inlinedAt: !80)
!91 = !DILocation(line: 222, column: 22, scope: !79, inlinedAt: !80)
!92 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !80)
!93 = !DILocation(line: 94, column: 25, scope: !6)
!94 = !DILocation(line: 96, column: 24, scope: !6)
!95 = !DILocation(line: 97, column: 32, scope: !6)
!96 = !DILocation(line: 98, column: 24, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 81, column: 31, scope: !6)
!100 = !DILocation(line: 82, column: 29, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 61, scope: !6)
!104 = !DILocation(line: 86, column: 53, scope: !6)
!105 = !DILocation(line: 87, column: 43, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 87, column: 50, scope: !6)
!108 = !DILocation(line: 88, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 50, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 89, column: 49, scope: !6)
!113 = !DILocation(line: 90, column: 35, scope: !6)
!114 = !DILocation(line: 90, column: 49, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !116)
!116 = !DILocation(line: 111, column: 47, scope: !6)
!117 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !118)
!118 = !DILocation(line: 109, column: 47, scope: !6)
!119 = !DILocation(line: 86, column: 115, scope: !6)
!120 = !DILocation(line: 88, column: 103, scope: !6)
!121 = !DILocation(line: 90, column: 102, scope: !6)
!122 = !DILocation(line: 101, column: 24, scope: !6)
!123 = !DILocation(line: 103, column: 24, scope: !6)
!124 = !DILocation(line: 104, column: 24, scope: !6)
!125 = !DILocation(line: 106, column: 24, scope: !6)
!126 = !DILocation(line: 107, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !116)
!128 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !116)
!129 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !116)
!130 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !118)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !118)
!132 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !118)
!133 = !DILocation(line: 110, column: 50, scope: !6)
!134 = !DILocation(line: 112, column: 50, scope: !6)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 113, column: 53, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !79, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !79, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !79, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !79, inlinedAt: !138)
!143 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !79, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 16, scope: !79, inlinedAt: !144)
!147 = !DILocation(line: 105, column: 29, scope: !79, inlinedAt: !144)
!148 = !DILocation(line: 104, column: 21, scope: !79, inlinedAt: !144)
!149 = !DILocation(line: 116, column: 25, scope: !6)
!150 = !DILocation(line: 116, column: 37, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 37, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 124, column: 43, scope: !6)
!171 = !DILocation(line: 124, column: 36, scope: !6)
!172 = !DILocation(line: 124, column: 53, scope: !6)
!173 = !DILocation(line: 124, column: 115, scope: !6)
!174 = !DILocation(line: 140, column: 24, scope: !6)
!175 = !DILocation(line: 141, column: 36, scope: !6)
!176 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !177)
!177 = !DILocation(line: 144, column: 46, scope: !6)
!178 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !177)
!179 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !177)
!180 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !177)
!181 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !182)
!182 = !DILocation(line: 146, column: 46, scope: !6)
!183 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !182)
!184 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !182)
!185 = !DILocation(line: 148, column: 25, scope: !6)
!186 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !182)
!187 = !DILocation(line: 149, column: 29, scope: !6)
!188 = !DILocation(line: 149, column: 53, scope: !6)
!189 = !DILocation(line: 119, column: 31, scope: !6)
!190 = !DILocation(line: 120, column: 29, scope: !6)
!191 = !DILocation(line: 124, column: 61, scope: !6)
!192 = !DILocation(line: 118, column: 4, scope: !6)
