; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 5, !dbg !13
  %.lobit2 = lshr i32 %13, 6, !dbg !13
  %15 = or disjoint i32 %12, 2, !dbg !14
  %16 = or disjoint i32 %12, 4, !dbg !14
  %17 = or disjoint i32 %12, 6, !dbg !14
  %18 = and i32 %.lobit2, 3, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !14
  %21 = insertelement <2 x i32> %20, i32 %19, i64 1, !dbg !14
  %22 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !14
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %24 = or disjoint <2 x i32> %21, %23, !dbg !14
  %25 = icmp slt <2 x i32> %24, splat (i32 512), !dbg !15
  %26 = shufflevector <2 x i1> %25, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !15
  %27 = icmp slt i32 %12, 512, !dbg !15
  %28 = and i32 %13, 31, !dbg !16
  %29 = shl i32 %13, 3, !dbg !16
  %30 = and i32 %29, 504, !dbg !16
  %31 = shl i32 %13, 1, !dbg !16
  %32 = and i32 %31, 510, !dbg !16
  %33 = extractelement <2 x i32> %24, i64 0, !dbg !17
  %34 = sext i32 %33 to i64, !dbg !18
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = extractelement <2 x i32> %24, i64 1, !dbg !17
  %37 = sext i32 %36 to i64, !dbg !18
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = sext i32 %12 to i64, !dbg !18
  %40 = getelementptr i64, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = sext i32 %15 to i64, !dbg !18
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = sext i32 %16 to i64, !dbg !18
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !18
  %45 = sext i32 %17 to i64, !dbg !18
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !18
  %47 = extractelement <2 x i1> %25, i64 0, !dbg !19
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %47) #6, !dbg !19
  %56 = extractelement <2 x i1> %25, i64 1, !dbg !19
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %56) #6, !dbg !19
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 %27) #6, !dbg !19
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !19
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !19
  %68 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 %27) #6, !dbg !19
  %69 = extractvalue { i64, i64 } %68, 0, !dbg !19
  %70 = extractvalue { i64, i64 } %68, 1, !dbg !19
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 %27) #6, !dbg !19
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !19
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !19
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 %27) #6, !dbg !19
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !19
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !19
  %77 = shl i32 %33, 12, !dbg !17
  %78 = shl i32 %36, 12, !dbg !17
  %79 = icmp slt i64 %55, 0, !dbg !20
  %80 = icmp slt i64 %64, 0, !dbg !20
  %81 = insertelement <8 x i64> poison, i64 %76, i64 0, !dbg !21
  %82 = insertelement <8 x i64> %81, i64 %75, i64 1, !dbg !21
  %83 = insertelement <8 x i64> %82, i64 %73, i64 2, !dbg !21
  %84 = insertelement <8 x i64> %83, i64 %72, i64 3, !dbg !21
  %85 = insertelement <8 x i64> %84, i64 %70, i64 4, !dbg !21
  %86 = insertelement <8 x i64> %85, i64 %69, i64 5, !dbg !21
  %87 = insertelement <8 x i64> %86, i64 %67, i64 6, !dbg !21
  %88 = insertelement <8 x i64> %87, i64 %66, i64 7, !dbg !21
  %89 = add <8 x i64> %88, splat (i64 32128), !dbg !21
  %90 = icmp slt <8 x i64> %88, zeroinitializer, !dbg !20
  %91 = select <8 x i1> %90, <8 x i64> %89, <8 x i64> %88, !dbg !22
  %92 = icmp ugt <8 x i64> %91, splat (i64 32127), !dbg !23
  %93 = shl i64 %55, 12, !dbg !24
  %94 = add i64 %93, 131596288, !dbg !24
  %95 = select i1 %79, i64 %94, i64 %93, !dbg !24
  %96 = shl i64 %64, 12, !dbg !24
  %97 = add i64 %96, 131596288, !dbg !24
  %98 = select i1 %80, i64 %97, i64 %96, !dbg !24
  %99 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %100 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %101 = or <8 x i1> %99, %100, !dbg !25
  %102 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %103 = or <8 x i1> %101, %102, !dbg !25
  %104 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %105 = or <8 x i1> %103, %104, !dbg !25
  %106 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %shift125 = or <8 x i1> %105, %106, !dbg !25
  %107 = or <8 x i1> %shift125, %92, !dbg !25
  %108 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %109 = shufflevector <8 x i1> %92, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %shift127 = or <8 x i1> %108, %109
  %110 = or <8 x i1> %shift127, %107
  %.reass = extractelement <8 x i1> %110, i64 0
  %111 = and i1 %27, %.reass
  %112 = zext nneg i32 %30 to i64, !dbg !25
  %113 = sext i32 %77 to i64, !dbg !25
  %114 = sext i32 %78 to i64, !dbg !25
  br label %115, !dbg !25

115:                                              ; preds = %10, %133
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %133 ]
  %116 = phi <16 x float> [ zeroinitializer, %10 ], [ %294, %133 ]
  %117 = or disjoint i64 %indvars.iv, %112, !dbg !26
  %118 = or disjoint i64 %117, %113, !dbg !27
  %119 = or disjoint i64 %117, %114, !dbg !27
  %120 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !28
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %119, !dbg !28
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %120, i1 %47) #6, !dbg !29
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %121, i1 %56) #6, !dbg !29
  %124 = getelementptr bfloat, ptr addrspace(1) %3, i64 %118, !dbg !30
  %125 = getelementptr bfloat, ptr addrspace(1) %3, i64 %119, !dbg !30
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %124, i1 %47) #6, !dbg !31
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %125, i1 %56) #6, !dbg !31
  %128 = getelementptr bfloat, ptr addrspace(1) %4, i64 %118, !dbg !32
  %129 = getelementptr bfloat, ptr addrspace(1) %4, i64 %119, !dbg !32
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %128, i1 %47) #6, !dbg !33
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %129, i1 %56) #6, !dbg !33
  br i1 %111, label %132, label %133, !dbg !34

132:                                              ; preds = %115
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

133:                                              ; preds = %115
  %134 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !33
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !33
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !33
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !33
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !31
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !31
  %152 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !31
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !31
  %154 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !31
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !31
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !31
  %158 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !31
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !31
  %160 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !31
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !31
  %162 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !31
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !31
  %164 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !31
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !31
  %166 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !29
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !29
  %168 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !29
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !29
  %170 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !29
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !29
  %172 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !29
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !29
  %174 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !29
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !29
  %176 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !29
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !29
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !29
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %182 = or disjoint i64 %95, %117, !dbg !35
  %183 = or disjoint i64 %98, %117, !dbg !35
  %184 = getelementptr bfloat, ptr addrspace(1) %2, i64 %182, !dbg !36
  %185 = getelementptr bfloat, ptr addrspace(1) %2, i64 %183, !dbg !36
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %47) #6, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !37
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !37
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !37
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !37
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !37
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !37
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !37
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !37
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %56) #6, !dbg !37
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !37
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !37
  %198 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !37
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !37
  %200 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !37
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !37
  %202 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !37
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !37
  %204 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !38
  %205 = fpext <2 x bfloat> %165 to <2 x float>, !dbg !39
  %206 = fpext <2 x bfloat> %181 to <2 x float>, !dbg !40
  %207 = fpext <2 x bfloat> %188 to <2 x float>, !dbg !41
  %208 = fadd <2 x float> %206, %207, !dbg !42
  %209 = fadd <2 x float> %208, %205, !dbg !43
  %210 = fadd <2 x float> %209, %204, !dbg !44
  %211 = fptrunc <2 x float> %210 to <2 x bfloat>, !dbg !45
  %212 = fpext <2 x bfloat> %147 to <2 x float>, !dbg !38
  %213 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !39
  %214 = fpext <2 x bfloat> %179 to <2 x float>, !dbg !40
  %215 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !41
  %216 = fadd <2 x float> %214, %215, !dbg !42
  %217 = fadd <2 x float> %216, %213, !dbg !43
  %218 = fadd <2 x float> %217, %212, !dbg !44
  %219 = fptrunc <2 x float> %218 to <2 x bfloat>, !dbg !45
  %220 = fpext <2 x bfloat> %145 to <2 x float>, !dbg !38
  %221 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !39
  %222 = fpext <2 x bfloat> %177 to <2 x float>, !dbg !40
  %223 = fpext <2 x bfloat> %192 to <2 x float>, !dbg !41
  %224 = fadd <2 x float> %222, %223, !dbg !42
  %225 = fadd <2 x float> %224, %221, !dbg !43
  %226 = fadd <2 x float> %225, %220, !dbg !44
  %227 = fptrunc <2 x float> %226 to <2 x bfloat>, !dbg !45
  %228 = fpext <2 x bfloat> %143 to <2 x float>, !dbg !38
  %229 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !39
  %230 = fpext <2 x bfloat> %175 to <2 x float>, !dbg !40
  %231 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !41
  %232 = fadd <2 x float> %230, %231, !dbg !42
  %233 = fadd <2 x float> %232, %229, !dbg !43
  %234 = fadd <2 x float> %233, %228, !dbg !44
  %235 = fptrunc <2 x float> %234 to <2 x bfloat>, !dbg !45
  %236 = fpext <2 x bfloat> %141 to <2 x float>, !dbg !38
  %237 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !39
  %238 = fpext <2 x bfloat> %173 to <2 x float>, !dbg !40
  %239 = fpext <2 x bfloat> %197 to <2 x float>, !dbg !41
  %240 = fadd <2 x float> %238, %239, !dbg !42
  %241 = fadd <2 x float> %240, %237, !dbg !43
  %242 = fadd <2 x float> %241, %236, !dbg !44
  %243 = fptrunc <2 x float> %242 to <2 x bfloat>, !dbg !45
  %244 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !38
  %245 = fpext <2 x bfloat> %155 to <2 x float>, !dbg !39
  %246 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !40
  %247 = fpext <2 x bfloat> %199 to <2 x float>, !dbg !41
  %248 = fadd <2 x float> %246, %247, !dbg !42
  %249 = fadd <2 x float> %248, %245, !dbg !43
  %250 = fadd <2 x float> %249, %244, !dbg !44
  %251 = fptrunc <2 x float> %250 to <2 x bfloat>, !dbg !45
  %252 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !38
  %253 = fpext <2 x bfloat> %153 to <2 x float>, !dbg !39
  %254 = fpext <2 x bfloat> %169 to <2 x float>, !dbg !40
  %255 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !41
  %256 = fadd <2 x float> %254, %255, !dbg !42
  %257 = fadd <2 x float> %256, %253, !dbg !43
  %258 = fadd <2 x float> %257, %252, !dbg !44
  %259 = fptrunc <2 x float> %258 to <2 x bfloat>, !dbg !45
  %260 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !38
  %261 = fpext <2 x bfloat> %151 to <2 x float>, !dbg !39
  %262 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !40
  %263 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !41
  %264 = fadd <2 x float> %262, %263, !dbg !42
  %265 = fadd <2 x float> %264, %261, !dbg !43
  %266 = fadd <2 x float> %265, %260, !dbg !44
  %267 = shufflevector <2 x float> %210, <2 x float> %218, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %268 = shufflevector <2 x float> %226, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %269 = shufflevector <16 x float> %267, <16 x float> %268, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %270 = shufflevector <2 x float> %226, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %271 = shufflevector <16 x float> %269, <16 x float> %270, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %272 = shufflevector <2 x float> %234, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %273 = shufflevector <16 x float> %271, <16 x float> %272, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %274 = shufflevector <2 x float> %234, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %275 = shufflevector <16 x float> %273, <16 x float> %274, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %276 = shufflevector <2 x float> %242, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %277 = shufflevector <16 x float> %275, <16 x float> %276, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %278 = shufflevector <2 x float> %242, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %279 = shufflevector <16 x float> %277, <16 x float> %278, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %280 = shufflevector <2 x float> %250, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %281 = shufflevector <16 x float> %279, <16 x float> %280, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %282 = shufflevector <2 x float> %250, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %283 = shufflevector <16 x float> %281, <16 x float> %282, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %284 = shufflevector <2 x float> %258, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %285 = shufflevector <16 x float> %283, <16 x float> %284, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !46
  %286 = shufflevector <2 x float> %258, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %287 = shufflevector <16 x float> %285, <16 x float> %286, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !46
  %288 = shufflevector <2 x float> %266, <2 x float> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %289 = shufflevector <16 x float> %287, <16 x float> %288, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !46
  %290 = shufflevector <2 x float> %266, <2 x float> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %291 = shufflevector <16 x float> %289, <16 x float> %290, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !46
  %292 = fmul <16 x float> %291, %291, !dbg !46
  %293 = fadd <16 x float> %116, %292, !dbg !47
  %294 = select <16 x i1> %26, <16 x float> %293, <16 x float> %116, !dbg !48
  %295 = fptrunc <2 x float> %266 to <2 x bfloat>, !dbg !45
  %296 = bitcast <2 x bfloat> %211 to i32, !dbg !45
  %297 = bitcast <2 x bfloat> %219 to i32, !dbg !45
  %298 = bitcast <2 x bfloat> %227 to i32, !dbg !45
  %299 = bitcast <2 x bfloat> %235 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %120, i1 %47) #6, !dbg !45
  %300 = bitcast <2 x bfloat> %243 to i32, !dbg !45
  %301 = bitcast <2 x bfloat> %251 to i32, !dbg !45
  %302 = bitcast <2 x bfloat> %259 to i32, !dbg !45
  %303 = bitcast <2 x bfloat> %295 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %121, i1 %56) #6, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !25
  %304 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !25
  br i1 %304, label %115, label %__nv_rsqrtf.exit, !dbg !25

__nv_rsqrtf.exit:                                 ; preds = %133
  %shift128 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %305 = fadd <16 x float> %294, %shift128, !dbg !49
  %shift129 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %306 = fadd <16 x float> %shift129, %305, !dbg !49
  %shift130 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %307 = fadd <16 x float> %shift130, %306, !dbg !49
  %shift131 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %308 = fadd <16 x float> %shift131, %307, !dbg !49
  %shift132 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %309 = fadd <16 x float> %shift132, %308, !dbg !49
  %shift133 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %310 = fadd <16 x float> %shift133, %309, !dbg !49
  %shift134 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %311 = fadd <16 x float> %shift134, %310, !dbg !49
  %312 = extractelement <16 x float> %311, i64 0, !dbg !49
  %shift135 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %313 = fadd <16 x float> %294, %shift135, !dbg !49
  %shift136 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %314 = fadd <16 x float> %shift136, %313, !dbg !49
  %shift137 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %315 = fadd <16 x float> %shift137, %314, !dbg !49
  %shift138 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %316 = fadd <16 x float> %shift138, %315, !dbg !49
  %shift139 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %317 = fadd <16 x float> %shift139, %316, !dbg !49
  %shift140 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %318 = fadd <16 x float> %shift140, %317, !dbg !49
  %shift141 = shufflevector <16 x float> %294, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !49
  %319 = fadd <16 x float> %shift141, %318, !dbg !49
  %320 = extractelement <16 x float> %319, i64 8, !dbg !49
  %321 = bitcast float %312 to i32, !dbg !54
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 16, i32 31), !dbg !54
  %323 = bitcast i32 %322 to float, !dbg !54
  %324 = fadd float %312, %323, !dbg !49
  %325 = bitcast float %324 to i32, !dbg !54
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !54
  %327 = bitcast i32 %326 to float, !dbg !54
  %328 = fadd float %324, %327, !dbg !49
  %329 = bitcast float %328 to i32, !dbg !54
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !54
  %331 = bitcast i32 %330 to float, !dbg !54
  %332 = fadd float %328, %331, !dbg !49
  %333 = bitcast float %332 to i32, !dbg !54
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !54
  %335 = bitcast i32 %334 to float, !dbg !54
  %336 = fadd float %332, %335, !dbg !49
  %337 = bitcast float %336 to i32, !dbg !54
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !54
  %339 = bitcast i32 %338 to float, !dbg !54
  %340 = fadd float %336, %339, !dbg !49
  %341 = bitcast float %320 to i32, !dbg !54
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 16, i32 31), !dbg !54
  %343 = bitcast i32 %342 to float, !dbg !54
  %344 = fadd float %320, %343, !dbg !49
  %345 = bitcast float %344 to i32, !dbg !54
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !54
  %347 = bitcast i32 %346 to float, !dbg !54
  %348 = fadd float %344, %347, !dbg !49
  %349 = bitcast float %348 to i32, !dbg !54
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 4, i32 31), !dbg !54
  %351 = bitcast i32 %350 to float, !dbg !54
  %352 = fadd float %348, %351, !dbg !49
  %353 = bitcast float %352 to i32, !dbg !54
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 2, i32 31), !dbg !54
  %355 = bitcast i32 %354 to float, !dbg !54
  %356 = fadd float %352, %355, !dbg !49
  %357 = bitcast float %356 to i32, !dbg !54
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !54
  %359 = bitcast i32 %358 to float, !dbg !54
  %360 = fadd float %356, %359, !dbg !49
  %361 = and i32 %14, 1, !dbg !54
  %362 = icmp eq i32 %28, 0, !dbg !54
  %363 = shl nuw nsw i32 %18, 1, !dbg !54
  %364 = or disjoint i32 %363, %361, !dbg !54
  %365 = zext nneg i32 %364 to i64, !dbg !54
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !54
  %367 = bitcast float %340 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 %362) #6, !dbg !54
  %368 = shl nuw nsw i32 %19, 1, !dbg !54
  %369 = or disjoint i32 %368, %361, !dbg !54
  %370 = zext nneg i32 %369 to i64, !dbg !54
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !54
  %372 = bitcast float %360 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 %362) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %373 = icmp slt i32 %13, 16, !dbg !54
  %374 = sext i32 %13 to i64, !dbg !54
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !54
  %376 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %375, i1 %373) #6, !dbg !54
  %377 = bitcast i32 %376 to float, !dbg !54
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !54
  %379 = bitcast i32 %378 to float, !dbg !54
  %380 = fadd float %377, %379, !dbg !49
  %381 = and i32 %13, 1, !dbg !54
  %382 = icmp eq i32 %381, 0, !dbg !54
  %383 = and i1 %373, %382, !dbg !54
  %384 = bitcast float %380 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %384, i1 %383) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %385 = zext nneg i32 %363 to i64, !dbg !54
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i64 %385, !dbg !54
  %387 = load float, ptr addrspace(3) %386, align 8, !dbg !54
  %388 = zext nneg i32 %368 to i64, !dbg !54
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388, !dbg !54
  %390 = load float, ptr addrspace(3) %389, align 8, !dbg !54
  %391 = tail call float @llvm.nvvm.div.full(float %387, float 4.096000e+03), !dbg !55
  %392 = tail call float @llvm.nvvm.div.full(float %390, float 4.096000e+03), !dbg !55
  %393 = fadd float %391, 0x3EB0C6F7A0000000, !dbg !56
  %394 = fadd float %392, 0x3EB0C6F7A0000000, !dbg !56
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %.not.i37 = icmp eq i32 %402, 0, !dbg !57
  br i1 %.not.i37, label %405, label %403, !dbg !57

403:                                              ; preds = %__nv_rsqrtf.exit
  %404 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %393), !dbg !57
  br label %__nv_rsqrtf.exit39, !dbg !57

405:                                              ; preds = %__nv_rsqrtf.exit
  %406 = tail call float @llvm.nvvm.rsqrt.approx.f(float %393), !dbg !57
  br label %__nv_rsqrtf.exit39, !dbg !57

__nv_rsqrtf.exit39:                               ; preds = %403, %405
  %.0.i38 = phi float [ %404, %403 ], [ %406, %405 ], !dbg !57
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %.not.i61 = icmp eq i32 %414, 0, !dbg !57
  br i1 %.not.i61, label %417, label %415, !dbg !57

415:                                              ; preds = %__nv_rsqrtf.exit39
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %394), !dbg !57
  br label %__nv_rsqrtf.exit63, !dbg !57

417:                                              ; preds = %__nv_rsqrtf.exit39
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %394), !dbg !57
  br label %__nv_rsqrtf.exit63, !dbg !57

__nv_rsqrtf.exit63:                               ; preds = %415, %417
  %.0.i62 = phi float [ %416, %415 ], [ %418, %417 ], !dbg !57
  %invariant.op71 = or disjoint i32 %30, %77, !dbg !58
  %invariant.op73 = or disjoint i32 %30, %78, !dbg !58
  %419 = zext nneg i32 %32 to i64
  %420 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %419
  %421 = zext nneg i32 %30 to i64
  %422 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %421
  %423 = or disjoint i32 %30, 4
  %424 = zext nneg i32 %423 to i64
  %425 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %424
  %426 = getelementptr inbounds nuw i8, ptr addrspace(3) %422, i64 8
  %427 = getelementptr inbounds nuw i8, ptr addrspace(3) %425, i64 8
  %428 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !59
  %429 = shufflevector <2 x float> %428, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %430 = insertelement <2 x float> poison, float %.0.i62, i64 0, !dbg !59
  %431 = shufflevector <2 x float> %430, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  br label %432, !dbg !58

432:                                              ; preds = %__nv_rsqrtf.exit63, %432
  %indvars.iv90 = phi i64 [ 0, %__nv_rsqrtf.exit63 ], [ %indvars.iv.next91, %432 ]
  %433 = or disjoint i64 %indvars.iv90, %419, !dbg !60
  %434 = getelementptr bfloat, ptr addrspace(1) %5, i64 %433, !dbg !61
  %435 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %434, i1 true) #6, !dbg !62
  %436 = bitcast i32 %435 to <2 x bfloat>, !dbg !62
  %437 = extractelement <2 x bfloat> %436, i64 0, !dbg !62
  %438 = extractelement <2 x bfloat> %436, i64 1, !dbg !62
  %439 = fpext bfloat %437 to float, !dbg !63
  %440 = fpext bfloat %438 to float, !dbg !63
  %441 = trunc nuw nsw i64 %indvars.iv90 to i32
  %.reass72 = or i32 %invariant.op71, %441
  %.reass74 = or i32 %invariant.op73, %441
  %442 = sext i32 %.reass72 to i64, !dbg !64
  %443 = getelementptr bfloat, ptr addrspace(1) %0, i64 %442, !dbg !64
  %444 = sext i32 %.reass74 to i64, !dbg !64
  %445 = getelementptr bfloat, ptr addrspace(1) %0, i64 %444, !dbg !64
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %443, i1 %47) #6, !dbg !65
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !65
  %448 = bitcast i32 %447 to <2 x bfloat>, !dbg !65
  %449 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !65
  %450 = bitcast i32 %449 to <2 x bfloat>, !dbg !65
  %451 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !65
  %452 = bitcast i32 %451 to <2 x bfloat>, !dbg !65
  %453 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !65
  %454 = bitcast i32 %453 to <2 x bfloat>, !dbg !65
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %445, i1 %56) #6, !dbg !65
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !65
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !65
  %458 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !65
  %459 = bitcast i32 %458 to <2 x bfloat>, !dbg !65
  %460 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !65
  %461 = bitcast i32 %460 to <2 x bfloat>, !dbg !65
  %462 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !65
  %463 = bitcast i32 %462 to <2 x bfloat>, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %464 = bitcast float %439 to i32, !dbg !66
  %465 = bitcast float %440 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %420, i32 %464, i32 %465, i1 true) #6, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %466 = getelementptr bfloat, ptr addrspace(1) %6, i64 %442, !dbg !67
  %467 = getelementptr bfloat, ptr addrspace(1) %6, i64 %444, !dbg !67
  %468 = fpext <2 x bfloat> %448 to <2 x float>, !dbg !68
  %469 = fmul <2 x float> %429, %468, !dbg !59
  %470 = load <2 x float>, ptr addrspace(3) %422, align 16, !dbg !66
  %471 = fmul <2 x float> %469, %470, !dbg !66
  %472 = fptrunc <2 x float> %471 to <2 x bfloat>, !dbg !69
  %473 = fpext <2 x bfloat> %450 to <2 x float>, !dbg !68
  %474 = fmul <2 x float> %429, %473, !dbg !59
  %475 = load <2 x float>, ptr addrspace(3) %426, align 8, !dbg !66
  %476 = fmul <2 x float> %474, %475, !dbg !66
  %477 = fptrunc <2 x float> %476 to <2 x bfloat>, !dbg !69
  %478 = fpext <2 x bfloat> %452 to <2 x float>, !dbg !68
  %479 = fmul <2 x float> %429, %478, !dbg !59
  %480 = load <2 x float>, ptr addrspace(3) %425, align 16, !dbg !66
  %481 = fmul <2 x float> %479, %480, !dbg !66
  %482 = fptrunc <2 x float> %481 to <2 x bfloat>, !dbg !69
  %483 = fpext <2 x bfloat> %454 to <2 x float>, !dbg !68
  %484 = fmul <2 x float> %429, %483, !dbg !59
  %485 = load <2 x float>, ptr addrspace(3) %427, align 8, !dbg !66
  %486 = fmul <2 x float> %484, %485, !dbg !66
  %487 = fptrunc <2 x float> %486 to <2 x bfloat>, !dbg !69
  %488 = fpext <2 x bfloat> %457 to <2 x float>, !dbg !68
  %489 = fmul <2 x float> %431, %488, !dbg !59
  %490 = fmul <2 x float> %470, %489, !dbg !66
  %491 = fptrunc <2 x float> %490 to <2 x bfloat>, !dbg !69
  %492 = fpext <2 x bfloat> %459 to <2 x float>, !dbg !68
  %493 = fmul <2 x float> %431, %492, !dbg !59
  %494 = fmul <2 x float> %475, %493, !dbg !66
  %495 = fptrunc <2 x float> %494 to <2 x bfloat>, !dbg !69
  %496 = fpext <2 x bfloat> %461 to <2 x float>, !dbg !68
  %497 = fmul <2 x float> %431, %496, !dbg !59
  %498 = fmul <2 x float> %497, %480, !dbg !66
  %499 = fptrunc <2 x float> %498 to <2 x bfloat>, !dbg !69
  %500 = fpext <2 x bfloat> %463 to <2 x float>, !dbg !68
  %501 = fmul <2 x float> %431, %500, !dbg !59
  %502 = fmul <2 x float> %501, %485, !dbg !66
  %503 = fptrunc <2 x float> %502 to <2 x bfloat>, !dbg !69
  %504 = bitcast <2 x bfloat> %472 to i32, !dbg !69
  %505 = bitcast <2 x bfloat> %477 to i32, !dbg !69
  %506 = bitcast <2 x bfloat> %482 to i32, !dbg !69
  %507 = bitcast <2 x bfloat> %487 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %505, i32 %506, i32 %507, ptr addrspace(1) %466, i1 %47) #6, !dbg !69
  %508 = bitcast <2 x bfloat> %491 to i32, !dbg !69
  %509 = bitcast <2 x bfloat> %495 to i32, !dbg !69
  %510 = bitcast <2 x bfloat> %499 to i32, !dbg !69
  %511 = bitcast <2 x bfloat> %503 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %508, i32 %509, i32 %510, i32 %511, ptr addrspace(1) %467, i1 %56) #6, !dbg !69
  %indvars.iv.next91 = add nuw nsw i64 %indvars.iv90, 512, !dbg !58
  %512 = icmp samesign ult i64 %indvars.iv90, 3584, !dbg !58
  br i1 %512, label %432, label %513, !dbg !58

513:                                              ; preds = %432
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 37, column: 50, scope: !10)
!18 = !DILocation(line: 29, column: 30, scope: !10)
!19 = !DILocation(line: 29, column: 35, scope: !10)
!20 = !DILocation(line: 42, column: 22, scope: !10)
!21 = !DILocation(line: 41, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 44, column: 41, scope: !10)
!24 = !DILocation(line: 45, column: 46, scope: !10)
!25 = !DILocation(line: 31, column: 40, scope: !10)
!26 = !DILocation(line: 32, column: 31, scope: !10)
!27 = !DILocation(line: 37, column: 45, scope: !10)
!28 = !DILocation(line: 37, column: 38, scope: !10)
!29 = !DILocation(line: 37, column: 55, scope: !10)
!30 = !DILocation(line: 38, column: 34, scope: !10)
!31 = !DILocation(line: 38, column: 51, scope: !10)
!32 = !DILocation(line: 39, column: 35, scope: !10)
!33 = !DILocation(line: 39, column: 52, scope: !10)
!34 = !DILocation(line: 44, column: 68, scope: !10)
!35 = !DILocation(line: 45, column: 41, scope: !10)
!36 = !DILocation(line: 45, column: 34, scope: !10)
!37 = !DILocation(line: 45, column: 53, scope: !10)
!38 = !DILocation(line: 39, column: 114, scope: !10)
!39 = !DILocation(line: 38, column: 113, scope: !10)
!40 = !DILocation(line: 37, column: 117, scope: !10)
!41 = !DILocation(line: 45, column: 115, scope: !10)
!42 = !DILocation(line: 46, column: 22, scope: !10)
!43 = !DILocation(line: 47, column: 23, scope: !10)
!44 = !DILocation(line: 48, column: 24, scope: !10)
!45 = !DILocation(line: 54, column: 56, scope: !10)
!46 = !DILocation(line: 50, column: 24, scope: !10)
!47 = !DILocation(line: 52, column: 25, scope: !10)
!48 = !DILocation(line: 53, column: 50, scope: !10)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !53)
!50 = distinct !DILexicalBlockFile(scope: !52, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!52 = distinct !DILexicalBlockFile(scope: !10, file: !51, discriminator: 0)
!53 = !DILocation(line: 55, column: 27, scope: !10)
!54 = !DILocation(line: 286, column: 36, scope: !52, inlinedAt: !53)
!55 = !DILocation(line: 66, column: 25, scope: !10)
!56 = !DILocation(line: 68, column: 24, scope: !10)
!57 = !DILocation(line: 69, column: 32, scope: !10)
!58 = !DILocation(line: 56, column: 40, scope: !10)
!59 = !DILocation(line: 70, column: 24, scope: !10)
!60 = !DILocation(line: 57, column: 31, scope: !10)
!61 = !DILocation(line: 62, column: 35, scope: !10)
!62 = !DILocation(line: 62, column: 42, scope: !10)
!63 = !DILocation(line: 62, column: 95, scope: !10)
!64 = !DILocation(line: 63, column: 39, scope: !10)
!65 = !DILocation(line: 63, column: 56, scope: !10)
!66 = !DILocation(line: 72, column: 24, scope: !10)
!67 = !DILocation(line: 73, column: 29, scope: !10)
!68 = !DILocation(line: 63, column: 118, scope: !10)
!69 = !DILocation(line: 73, column: 53, scope: !10)
!70 = !DILocation(line: 56, column: 4, scope: !10)
