; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 8, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = shl i32 %9, 1, !dbg !14
  %14 = and i32 %13, 1022, !dbg !14
  %15 = shl i32 %9, 2, !dbg !14
  %16 = and i32 %15, 1020, !dbg !14
  %17 = mul i32 %11, 3072, !dbg !15
  %18 = or disjoint i32 %17, %16
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %21 = zext nneg i32 %14 to i64, !dbg !16
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 true) #4, !dbg !18
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !18
  %25 = extractelement <2 x bfloat> %24, i64 0, !dbg !18
  %26 = extractelement <2 x bfloat> %24, i64 1, !dbg !18
  %27 = fpext bfloat %25 to float, !dbg !19
  %28 = fpext bfloat %26 to float, !dbg !19
  %29 = sext i32 %18 to i64, !dbg !20
  %30 = getelementptr bfloat, ptr addrspace(1) %1, i64 %29, !dbg !20
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %12) #4, !dbg !21
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !21
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !21
  %36 = fsub float 0.000000e+00, %27, !dbg !22
  %37 = fsub float 0.000000e+00, %28, !dbg !22
  %38 = fmul float %36, 0x3FF7154760000000, !dbg !26
  %39 = tail call float @llvm.nvvm.ex2.approx.f(float %38), !dbg !26
  %40 = fmul float %37, 0x3FF7154760000000, !dbg !26
  %41 = tail call float @llvm.nvvm.ex2.approx.f(float %40), !dbg !26
  %42 = fadd float %39, 1.000000e+00, !dbg !27
  %43 = fadd float %41, 1.000000e+00, !dbg !27
  %44 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %42), !dbg !28
  %45 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %43), !dbg !28
  %46 = fmul float %44, %27, !dbg !29
  %47 = fmul float %45, %28, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %48 = bitcast float %46 to i32, !dbg !30
  %49 = bitcast float %47 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %19, i32 %48, i32 %49, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %50 = getelementptr inbounds nuw i8, ptr addrspace(3) %20, i32 8, !dbg !30
  %51 = or disjoint i64 %21, 1024, !dbg !31
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !17
  %53 = add i32 %18, 1024, !dbg !32
  %54 = sext i32 %53 to i64, !dbg !20
  %55 = getelementptr bfloat, ptr addrspace(1) %1, i64 %54, !dbg !20
  %56 = or disjoint i64 %21, 2048, !dbg !31
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !17
  %58 = add i32 %18, 2048, !dbg !32
  %59 = sext i32 %58 to i64, !dbg !20
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !20
  %61 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !33
  %62 = load <2 x float>, ptr addrspace(3) %50, align 8, !dbg !30
  %63 = fmul <2 x float> %62, %61, !dbg !30
  %64 = fadd <2 x float> %63, zeroinitializer, !dbg !34
  %65 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !33
  %66 = load <2 x float>, ptr addrspace(3) %20, align 16, !dbg !30
  %67 = fmul <2 x float> %66, %65, !dbg !30
  %68 = fadd <2 x float> %67, zeroinitializer, !dbg !34
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %52, i1 true) #4, !dbg !18
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !18
  %71 = extractelement <2 x bfloat> %70, i64 0, !dbg !18
  %72 = extractelement <2 x bfloat> %70, i64 1, !dbg !18
  %73 = fpext bfloat %71 to float, !dbg !19
  %74 = fpext bfloat %72 to float, !dbg !19
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %12) #4, !dbg !21
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !21
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !21
  %78 = extractvalue { i32, i32 } %75, 1, !dbg !21
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !21
  %80 = fpext <2 x bfloat> %77 to <2 x float>, !dbg !33
  %81 = fpext <2 x bfloat> %79 to <2 x float>, !dbg !33
  %82 = fsub float 0.000000e+00, %73, !dbg !22
  %83 = fsub float 0.000000e+00, %74, !dbg !22
  %84 = fmul float %82, 0x3FF7154760000000, !dbg !26
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !26
  %86 = fmul float %83, 0x3FF7154760000000, !dbg !26
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !26
  %88 = fadd float %85, 1.000000e+00, !dbg !27
  %89 = fadd float %87, 1.000000e+00, !dbg !27
  %90 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %88), !dbg !28
  %91 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %89), !dbg !28
  %92 = fmul float %90, %73, !dbg !29
  %93 = fmul float %91, %74, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %94 = bitcast float %92 to i32, !dbg !30
  %95 = bitcast float %93 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %19, i32 %94, i32 %95, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %96 = load <2 x float>, ptr addrspace(3) %20, align 16, !dbg !30
  %97 = load <2 x float>, ptr addrspace(3) %50, align 8, !dbg !30
  %98 = fmul <2 x float> %96, %80, !dbg !30
  %99 = fmul <2 x float> %97, %81, !dbg !30
  %100 = fadd <2 x float> %68, %98, !dbg !34
  %101 = fadd <2 x float> %64, %99, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 true) #4, !dbg !18
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !18
  %104 = extractelement <2 x bfloat> %103, i64 0, !dbg !18
  %105 = extractelement <2 x bfloat> %103, i64 1, !dbg !18
  %106 = fpext bfloat %104 to float, !dbg !19
  %107 = fpext bfloat %105 to float, !dbg !19
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %60, i1 %12) #4, !dbg !21
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !21
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !21
  %111 = extractvalue { i32, i32 } %108, 1, !dbg !21
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !21
  %113 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !33
  %114 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !33
  %115 = fsub float 0.000000e+00, %106, !dbg !22
  %116 = fsub float 0.000000e+00, %107, !dbg !22
  %117 = fmul float %115, 0x3FF7154760000000, !dbg !26
  %118 = tail call float @llvm.nvvm.ex2.approx.f(float %117), !dbg !26
  %119 = fmul float %116, 0x3FF7154760000000, !dbg !26
  %120 = tail call float @llvm.nvvm.ex2.approx.f(float %119), !dbg !26
  %121 = fadd float %118, 1.000000e+00, !dbg !27
  %122 = fadd float %120, 1.000000e+00, !dbg !27
  %123 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %121), !dbg !28
  %124 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %122), !dbg !28
  %125 = fmul float %123, %106, !dbg !29
  %126 = fmul float %124, %107, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %127 = bitcast float %125 to i32, !dbg !30
  %128 = bitcast float %126 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %19, i32 %127, i32 %128, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %129 = load <2 x float>, ptr addrspace(3) %20, align 16, !dbg !30
  %130 = load <2 x float>, ptr addrspace(3) %50, align 8, !dbg !30
  %131 = fmul <2 x float> %129, %113, !dbg !30
  %132 = fmul <2 x float> %130, %114, !dbg !30
  %133 = fadd <2 x float> %100, %131, !dbg !34
  %134 = fadd <2 x float> %101, %132, !dbg !34
  %135 = and i32 %9, 1, !dbg !11
  %136 = lshr i32 %9, 5, !dbg !11
  %137 = and i32 %9, 31, !dbg !11
  %138 = or disjoint i32 %8, %135, !dbg !12
  %139 = icmp slt i32 %138, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %shift = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %140 = fadd <2 x float> %133, %shift, !dbg !37
  %141 = fadd <2 x float> %134, %140, !dbg !37
  %shift8 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %142 = fadd <2 x float> %shift8, %141, !dbg !37
  %143 = extractelement <2 x float> %142, i64 0, !dbg !37
  %144 = select i1 %12, float %143, float 0.000000e+00, !dbg !37
  %145 = bitcast float %144 to i32, !dbg !35
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !35
  %147 = bitcast i32 %146 to float, !dbg !35
  %148 = fadd float %144, %147, !dbg !37
  %149 = bitcast float %148 to i32, !dbg !35
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !35
  %151 = bitcast i32 %150 to float, !dbg !35
  %152 = fadd float %148, %151, !dbg !37
  %153 = bitcast float %152 to i32, !dbg !35
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = fadd float %152, %155, !dbg !37
  %157 = bitcast float %156 to i32, !dbg !35
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = fadd float %156, %159, !dbg !37
  %161 = bitcast float %160 to i32, !dbg !35
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = fadd float %160, %163, !dbg !37
  %165 = and i32 %136, 7, !dbg !35
  %166 = icmp eq i32 %137, 0, !dbg !35
  %167 = shl nuw nsw i32 %.lobit, 3, !dbg !35
  %168 = or disjoint i32 %167, %165, !dbg !35
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !35
  %170 = bitcast float %164 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 %166) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %171 = icmp slt i32 %9, 16, !dbg !35
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #4, !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !35
  %176 = bitcast i32 %175 to float, !dbg !35
  %177 = fadd float %174, %176, !dbg !37
  %178 = bitcast float %177 to i32, !dbg !35
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !35
  %180 = bitcast i32 %179 to float, !dbg !35
  %181 = fadd float %177, %180, !dbg !37
  %182 = bitcast float %181 to i32, !dbg !35
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !35
  %184 = bitcast i32 %183 to float, !dbg !35
  %185 = fadd float %181, %184, !dbg !37
  %186 = and i32 %9, 7, !dbg !35
  %187 = icmp eq i32 %186, 0, !dbg !35
  %188 = and i1 %171, %187, !dbg !35
  %189 = bitcast float %185 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %189, i1 %188) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !35
  %191 = load i32, ptr addrspace(3) %190, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %192 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !39
  %193 = insertelement <1 x i32> poison, i32 %191, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %194 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %135, !dbg !39
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !39
  %196 = sext i32 %138 to i64, !dbg !40
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !40
  %198 = and i32 %9, 510, !dbg !41
  %199 = icmp eq i32 %198, 0, !dbg !41
  %200 = and i1 %199, %139, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %197, i1 %200) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 31, column: 31, scope: !6)
!32 = !DILocation(line: 37, column: 41, scope: !6)
!33 = !DILocation(line: 37, column: 113, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 27, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!39 = !DILocation(line: 48, column: 30, scope: !6)
!40 = !DILocation(line: 49, column: 25, scope: !6)
!41 = !DILocation(line: 49, column: 37, scope: !6)
!42 = !DILocation(line: 49, column: 4, scope: !6)
