; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 512, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 512, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = shl i32 %15, 3, !dbg !19
  %26 = and i32 %25, 8, !dbg !19
  %27 = and i32 %25, 16, !dbg !19
  %28 = and i32 %25, 24, !dbg !19
  %29 = and i32 %25, 32, !dbg !19
  %30 = and i32 %25, 56, !dbg !19
  %31 = or disjoint i32 %14, %23, !dbg !20
  %32 = or disjoint i32 %14, %24, !dbg !20
  %33 = shl nsw i32 %13, 6, !dbg !21
  %34 = or disjoint i32 %33, %23, !dbg !22
  %35 = or disjoint i32 %33, %24, !dbg !22
  %36 = srem i32 %31, 512, !dbg !23
  %37 = srem i32 %32, 512, !dbg !23
  %38 = srem i32 %34, 4096, !dbg !24
  %.lhs.trunc = trunc i32 %35 to i16, !dbg !24
  %39 = srem i16 %.lhs.trunc, 4096, !dbg !24
  %.sext = sext i16 %39 to i32, !dbg !24
  %40 = shl nsw i32 %36, 12, !dbg !25
  %41 = shl nsw i32 %37, 12, !dbg !25
  %42 = shl nsw i32 %38, 12, !dbg !26
  %43 = shl nsw i32 %.sext, 12, !dbg !26
  %44 = or disjoint i32 %40, %30, !dbg !27
  %45 = or disjoint i32 %41, %30, !dbg !27
  %46 = sext i32 %44 to i64, !dbg !28
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !28
  %and.ra = and i32 %15, 24, !dbg !29
  %50 = xor i32 %30, %and.ra, !dbg !29
  %51 = xor i32 %50, %18, !dbg !29
  %52 = shl nuw nsw i32 %23, 6, !dbg !29
  %53 = or disjoint i32 %51, %52, !dbg !29
  %54 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %53, !dbg !29
  %55 = or disjoint i32 %53, 2048, !dbg !29
  %56 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %55, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %54, ptr addrspace(1) %47, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %56, ptr addrspace(1) %49, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %57 = or disjoint i32 %42, %30, !dbg !30
  %58 = or disjoint i32 %43, %30, !dbg !30
  %59 = sext i32 %57 to i64, !dbg !31
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = sext i32 %58 to i64, !dbg !31
  %62 = getelementptr bfloat, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %53, !dbg !32
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %55, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %63, ptr addrspace(1) %60, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %64, ptr addrspace(1) %62, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %65 = or disjoint i32 %30, 64, !dbg !33
  %66 = or disjoint i32 %40, %65, !dbg !27
  %67 = or disjoint i32 %41, %65, !dbg !27
  %68 = sext i32 %66 to i64, !dbg !28
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %67 to i64, !dbg !28
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %53, !dbg !29
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %55, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %69, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %73, ptr addrspace(1) %71, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %74 = or disjoint i32 %42, %65, !dbg !30
  %75 = or disjoint i32 %43, %65, !dbg !30
  %76 = sext i32 %74 to i64, !dbg !31
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !31
  %78 = sext i32 %75 to i64, !dbg !31
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %78, !dbg !31
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %53, !dbg !32
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %55, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %77, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %79, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %22, !dbg !34
  %invariant.op40 = or disjoint i32 %invariant.op, 32, !dbg !34
  %invariant.op42 = or disjoint i32 %30, 128, !dbg !34
  %82 = and i32 %15, 7
  %83 = and i32 %15, 15
  %84 = lshr exact i32 %17, 1
  %85 = xor i32 %30, %84
  %86 = or disjoint i32 %22, %83
  %87 = shl nuw nsw i32 %86, 6
  %88 = or disjoint i32 %87, %85
  %89 = or disjoint i32 %26, 16
  %90 = xor i32 %89, %27
  %91 = or disjoint i32 %90, %29
  %92 = xor i32 %91, %84
  %93 = or disjoint i32 %92, %87
  %94 = or disjoint i32 %28, 32
  %95 = xor i32 %94, %29
  %96 = xor i32 %95, %84
  %97 = or disjoint i32 %96, %87
  %98 = or disjoint i32 %26, 48
  %and.ra38 = and i32 %25, 48
  %99 = or disjoint i32 %84, %and.ra38
  %100 = xor i32 %99, %98
  %101 = or disjoint i32 %100, %87
  %102 = or disjoint i32 %82, 32
  %.reass41 = or disjoint i32 %82, %invariant.op40
  %103 = shl nuw nsw i32 %.reass41, 6
  %104 = or disjoint i32 %103, %85
  %105 = or disjoint i32 %92, %103
  %106 = or disjoint i32 %96, %103
  %107 = or disjoint i32 %100, %103
  %108 = lshr exact i32 %18, 2
  %109 = lshr i32 %15, 2
  %110 = and i32 %109, 16
  %111 = or disjoint i32 %110, %108
  %112 = or disjoint i32 %111, %82
  %113 = shl nuw nsw i32 %112, 6
  %114 = or disjoint i32 %113, %50
  %115 = xor i32 %95, %and.ra
  %116 = or disjoint i32 %115, %113
  %117 = or disjoint i32 %108, %102
  %118 = or disjoint i32 %117, %110
  %119 = shl nuw nsw i32 %118, 6
  %120 = or disjoint i32 %119, %50
  %121 = or disjoint i32 %115, %119
  %122 = zext nneg i32 %invariant.op42 to i64, !dbg !34
  %123 = sext i32 %43 to i64, !dbg !34
  %124 = sext i32 %42 to i64, !dbg !34
  %125 = sext i32 %41 to i64, !dbg !34
  %126 = sext i32 %40 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %126, !dbg !34
  %invariant.gep74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %125, !dbg !34
  %invariant.gep76 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !34
  %invariant.gep78 = getelementptr bfloat, ptr addrspace(1) %1, i64 %123, !dbg !34
  br label %127, !dbg !34

127:                                              ; preds = %4, %127
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %127 ]
  %128 = phi i32 [ -1, %4 ], [ %149, %127 ]
  %129 = phi i32 [ 1, %4 ], [ %319, %127 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %298, %127 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %299, %127 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %300, %127 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %301, %127 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %303, %127 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %304, %127 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %305, %127 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %306, %127 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %308, %127 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %309, %127 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %310, %127 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %311, %127 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %313, %127 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %314, %127 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %315, %127 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %316, %127 ]
  %146 = icmp samesign ult i64 %indvars.iv, 62, !dbg !34
  %147 = add i32 %128, 1, !dbg !34
  %148 = icmp slt i32 %147, 2, !dbg !34
  %149 = select i1 %148, i32 %147, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %150 = shl i32 %149, 12, !dbg !29
  %151 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %150, !dbg !29
  %152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %88, !dbg !29
  %153 = ptrtoint ptr addrspace(3) %152 to i32, !dbg !29
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %153) #1, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !29
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %93, !dbg !29
  %160 = ptrtoint ptr addrspace(3) %159 to i32, !dbg !29
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #1, !dbg !29
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !29
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !29
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !29
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %97, !dbg !29
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !29
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #1, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !29
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !29
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !29
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %101, !dbg !29
  %174 = ptrtoint ptr addrspace(3) %173 to i32, !dbg !29
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #1, !dbg !29
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !29
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !29
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !29
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %104, !dbg !29
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !29
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #1, !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !29
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !29
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !29
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %105, !dbg !29
  %188 = ptrtoint ptr addrspace(3) %187 to i32, !dbg !29
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #1, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !29
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !29
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %106, !dbg !29
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !29
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #1, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !29
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %151, i32 %107, !dbg !29
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !29
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %202) #1, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !29
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !29
  %208 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %150, !dbg !32
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %208, i32 %114, !dbg !32
  %210 = ptrtoint ptr addrspace(3) %209 to i32, !dbg !32
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %210) #1, !dbg !32
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !32
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !32
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !32
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !32
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %208, i32 %116, !dbg !32
  %217 = ptrtoint ptr addrspace(3) %216 to i32, !dbg !32
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #1, !dbg !32
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !32
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !32
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !32
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !32
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %208, i32 %120, !dbg !32
  %224 = ptrtoint ptr addrspace(3) %223 to i32, !dbg !32
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !32
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !32
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !32
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !32
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %208, i32 %121, !dbg !32
  %231 = ptrtoint ptr addrspace(3) %230 to i32, !dbg !32
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %231) #1, !dbg !32
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !32
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !32
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !32
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !32
  %237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %155, i32 %156, i32 %157, i32 %158, i32 %212, i32 %213) #1, !dbg !35
  %238 = extractvalue { float, float, float, float } %237, 0, !dbg !35
  %239 = extractvalue { float, float, float, float } %237, 1, !dbg !35
  %240 = extractvalue { float, float, float, float } %237, 2, !dbg !35
  %241 = extractvalue { float, float, float, float } %237, 3, !dbg !35
  %242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %134, float %135, float %136, float %137, i32 %155, i32 %156, i32 %157, i32 %158, i32 %226, i32 %227) #1, !dbg !35
  %243 = extractvalue { float, float, float, float } %242, 0, !dbg !35
  %244 = extractvalue { float, float, float, float } %242, 1, !dbg !35
  %245 = extractvalue { float, float, float, float } %242, 2, !dbg !35
  %246 = extractvalue { float, float, float, float } %242, 3, !dbg !35
  %247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %138, float %139, float %140, float %141, i32 %183, i32 %184, i32 %185, i32 %186, i32 %212, i32 %213) #1, !dbg !35
  %248 = extractvalue { float, float, float, float } %247, 0, !dbg !35
  %249 = extractvalue { float, float, float, float } %247, 1, !dbg !35
  %250 = extractvalue { float, float, float, float } %247, 2, !dbg !35
  %251 = extractvalue { float, float, float, float } %247, 3, !dbg !35
  %252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %183, i32 %184, i32 %185, i32 %186, i32 %226, i32 %227) #1, !dbg !35
  %253 = extractvalue { float, float, float, float } %252, 0, !dbg !35
  %254 = extractvalue { float, float, float, float } %252, 1, !dbg !35
  %255 = extractvalue { float, float, float, float } %252, 2, !dbg !35
  %256 = extractvalue { float, float, float, float } %252, 3, !dbg !35
  %257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %238, float %239, float %240, float %241, i32 %162, i32 %163, i32 %164, i32 %165, i32 %214, i32 %215) #1, !dbg !35
  %258 = extractvalue { float, float, float, float } %257, 0, !dbg !35
  %259 = extractvalue { float, float, float, float } %257, 1, !dbg !35
  %260 = extractvalue { float, float, float, float } %257, 2, !dbg !35
  %261 = extractvalue { float, float, float, float } %257, 3, !dbg !35
  %262 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %243, float %244, float %245, float %246, i32 %162, i32 %163, i32 %164, i32 %165, i32 %228, i32 %229) #1, !dbg !35
  %263 = extractvalue { float, float, float, float } %262, 0, !dbg !35
  %264 = extractvalue { float, float, float, float } %262, 1, !dbg !35
  %265 = extractvalue { float, float, float, float } %262, 2, !dbg !35
  %266 = extractvalue { float, float, float, float } %262, 3, !dbg !35
  %267 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %248, float %249, float %250, float %251, i32 %190, i32 %191, i32 %192, i32 %193, i32 %214, i32 %215) #1, !dbg !35
  %268 = extractvalue { float, float, float, float } %267, 0, !dbg !35
  %269 = extractvalue { float, float, float, float } %267, 1, !dbg !35
  %270 = extractvalue { float, float, float, float } %267, 2, !dbg !35
  %271 = extractvalue { float, float, float, float } %267, 3, !dbg !35
  %272 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %253, float %254, float %255, float %256, i32 %190, i32 %191, i32 %192, i32 %193, i32 %228, i32 %229) #1, !dbg !35
  %273 = extractvalue { float, float, float, float } %272, 0, !dbg !35
  %274 = extractvalue { float, float, float, float } %272, 1, !dbg !35
  %275 = extractvalue { float, float, float, float } %272, 2, !dbg !35
  %276 = extractvalue { float, float, float, float } %272, 3, !dbg !35
  %277 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %258, float %259, float %260, float %261, i32 %169, i32 %170, i32 %171, i32 %172, i32 %219, i32 %220) #1, !dbg !35
  %278 = extractvalue { float, float, float, float } %277, 0, !dbg !35
  %279 = extractvalue { float, float, float, float } %277, 1, !dbg !35
  %280 = extractvalue { float, float, float, float } %277, 2, !dbg !35
  %281 = extractvalue { float, float, float, float } %277, 3, !dbg !35
  %282 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %263, float %264, float %265, float %266, i32 %169, i32 %170, i32 %171, i32 %172, i32 %233, i32 %234) #1, !dbg !35
  %283 = extractvalue { float, float, float, float } %282, 0, !dbg !35
  %284 = extractvalue { float, float, float, float } %282, 1, !dbg !35
  %285 = extractvalue { float, float, float, float } %282, 2, !dbg !35
  %286 = extractvalue { float, float, float, float } %282, 3, !dbg !35
  %287 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %268, float %269, float %270, float %271, i32 %197, i32 %198, i32 %199, i32 %200, i32 %219, i32 %220) #1, !dbg !35
  %288 = extractvalue { float, float, float, float } %287, 0, !dbg !35
  %289 = extractvalue { float, float, float, float } %287, 1, !dbg !35
  %290 = extractvalue { float, float, float, float } %287, 2, !dbg !35
  %291 = extractvalue { float, float, float, float } %287, 3, !dbg !35
  %292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %273, float %274, float %275, float %276, i32 %197, i32 %198, i32 %199, i32 %200, i32 %233, i32 %234) #1, !dbg !35
  %293 = extractvalue { float, float, float, float } %292, 0, !dbg !35
  %294 = extractvalue { float, float, float, float } %292, 1, !dbg !35
  %295 = extractvalue { float, float, float, float } %292, 2, !dbg !35
  %296 = extractvalue { float, float, float, float } %292, 3, !dbg !35
  %297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %278, float %279, float %280, float %281, i32 %176, i32 %177, i32 %178, i32 %179, i32 %221, i32 %222) #1, !dbg !35
  %298 = extractvalue { float, float, float, float } %297, 0, !dbg !35
  %299 = extractvalue { float, float, float, float } %297, 1, !dbg !35
  %300 = extractvalue { float, float, float, float } %297, 2, !dbg !35
  %301 = extractvalue { float, float, float, float } %297, 3, !dbg !35
  %302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %283, float %284, float %285, float %286, i32 %176, i32 %177, i32 %178, i32 %179, i32 %235, i32 %236) #1, !dbg !35
  %303 = extractvalue { float, float, float, float } %302, 0, !dbg !35
  %304 = extractvalue { float, float, float, float } %302, 1, !dbg !35
  %305 = extractvalue { float, float, float, float } %302, 2, !dbg !35
  %306 = extractvalue { float, float, float, float } %302, 3, !dbg !35
  %307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %288, float %289, float %290, float %291, i32 %204, i32 %205, i32 %206, i32 %207, i32 %221, i32 %222) #1, !dbg !35
  %308 = extractvalue { float, float, float, float } %307, 0, !dbg !35
  %309 = extractvalue { float, float, float, float } %307, 1, !dbg !35
  %310 = extractvalue { float, float, float, float } %307, 2, !dbg !35
  %311 = extractvalue { float, float, float, float } %307, 3, !dbg !35
  %312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %293, float %294, float %295, float %296, i32 %204, i32 %205, i32 %206, i32 %207, i32 %235, i32 %236) #1, !dbg !35
  %313 = extractvalue { float, float, float, float } %312, 0, !dbg !35
  %314 = extractvalue { float, float, float, float } %312, 1, !dbg !35
  %315 = extractvalue { float, float, float, float } %312, 2, !dbg !35
  %316 = extractvalue { float, float, float, float } %312, 3, !dbg !35
  %317 = add i32 %129, 1, !dbg !34
  %318 = icmp slt i32 %317, 2, !dbg !34
  %319 = select i1 %318, i32 %317, i32 0, !dbg !34
  %320 = shl nuw nsw i64 %indvars.iv, 6, !dbg !36
  %321 = add nuw nsw i64 %320, %122
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %321, !dbg !28
  %gep75 = getelementptr bfloat, ptr addrspace(1) %invariant.gep74, i64 %321, !dbg !28
  %322 = shl i32 %319, 12, !dbg !29
  %323 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %322, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %323, i32 %53, !dbg !29
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %323, i32 %55, !dbg !29
  %326 = select i1 %146, i32 16, i32 0, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %324, ptr addrspace(1) %gep, i32 %326) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %325, ptr addrspace(1) %gep75, i32 %326) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep77 = getelementptr bfloat, ptr addrspace(1) %invariant.gep76, i64 %321, !dbg !31
  %gep79 = getelementptr bfloat, ptr addrspace(1) %invariant.gep78, i64 %321, !dbg !31
  %327 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %322, !dbg !32
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %327, i32 %53, !dbg !32
  %329 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %327, i32 %55, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %328, ptr addrspace(1) %gep77, i32 %326) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %329, ptr addrspace(1) %gep79, i32 %326) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 64, !dbg !34
  br i1 %exitcond.not, label %330, label %127, !dbg !34

330:                                              ; preds = %127
  %331 = or disjoint i32 %33, %30, !dbg !22
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %332 = icmp slt i32 %31, 512, !dbg !37
  %333 = icmp slt i32 %32, 512, !dbg !37
  %334 = icmp slt i32 %331, 4096, !dbg !38
  %335 = and i1 %332, %334, !dbg !39
  %336 = and i1 %333, %334, !dbg !39
  %337 = shl i32 %31, 12, !dbg !40
  %338 = shl i32 %32, 12, !dbg !40
  %339 = add i32 %337, %331, !dbg !41
  %340 = add i32 %338, %331, !dbg !41
  %341 = sext i32 %339 to i64, !dbg !42
  %342 = getelementptr bfloat, ptr addrspace(1) %2, i64 %341, !dbg !42
  %343 = sext i32 %340 to i64, !dbg !42
  %344 = getelementptr bfloat, ptr addrspace(1) %2, i64 %343, !dbg !42
  %345 = fptrunc float %298 to bfloat, !dbg !43
  %346 = fptrunc float %299 to bfloat, !dbg !43
  %347 = fptrunc float %300 to bfloat, !dbg !43
  %348 = fptrunc float %301 to bfloat, !dbg !43
  %349 = fptrunc float %303 to bfloat, !dbg !43
  %350 = fptrunc float %304 to bfloat, !dbg !43
  %351 = fptrunc float %305 to bfloat, !dbg !43
  %352 = fptrunc float %306 to bfloat, !dbg !43
  %353 = fptrunc float %308 to bfloat, !dbg !43
  %354 = fptrunc float %309 to bfloat, !dbg !43
  %355 = fptrunc float %310 to bfloat, !dbg !43
  %356 = fptrunc float %311 to bfloat, !dbg !43
  %357 = fptrunc float %313 to bfloat, !dbg !43
  %358 = fptrunc float %314 to bfloat, !dbg !43
  %359 = fptrunc float %315 to bfloat, !dbg !43
  %360 = fptrunc float %316 to bfloat, !dbg !43
  %361 = shl i32 %15, 1, !dbg !43
  %362 = and i32 %361, 6, !dbg !43
  %363 = shl i32 %15, 4, !dbg !43
  %364 = and i32 %363, 192, !dbg !43
  %365 = or disjoint i32 %364, %362, !dbg !43
  %366 = shl nuw nsw i32 %17, 4, !dbg !43
  %367 = or disjoint i32 %365, %366, !dbg !43
  %368 = and i32 %109, 24, !dbg !43
  %369 = or disjoint i32 %367, %368, !dbg !43
  %370 = shl nuw nsw i32 %21, 3, !dbg !43
  %371 = or disjoint i32 %369, %370, !dbg !43
  %372 = and i32 %25, 1016, !dbg !43
  %373 = or disjoint i32 %372, %370, !dbg !43
  %374 = lshr i32 %371, 3, !dbg !43
  %375 = and i32 %374, 536870904, !dbg !43
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %375, !dbg !43
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %376, i32 %371, !dbg !43
  %378 = bitcast bfloat %345 to i16, !dbg !43
  %379 = bitcast bfloat %346 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %377, i16 %378, i16 %379, i1 true) #1, !dbg !43
  %380 = or disjoint i32 %371, 512, !dbg !43
  %381 = lshr i32 %380, 3, !dbg !43
  %382 = and i32 %381, 536870904, !dbg !43
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %382, !dbg !43
  %384 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %383, i32 %380, !dbg !43
  %385 = bitcast bfloat %347 to i16, !dbg !43
  %386 = bitcast bfloat %348 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %384, i16 %385, i16 %386, i1 true) #1, !dbg !43
  %387 = or disjoint i32 %371, 32, !dbg !43
  %388 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %376, i32 %387, !dbg !43
  %389 = bitcast bfloat %349 to i16, !dbg !43
  %390 = bitcast bfloat %350 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %388, i16 %389, i16 %390, i1 true) #1, !dbg !43
  %391 = or disjoint i32 %371, 544, !dbg !43
  %392 = lshr i32 %391, 3, !dbg !43
  %393 = and i32 %392, 536870904, !dbg !43
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %393, !dbg !43
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i32 %391, !dbg !43
  %396 = bitcast bfloat %351 to i16, !dbg !43
  %397 = bitcast bfloat %352 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %395, i16 %396, i16 %397, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %398 = lshr exact i32 %373, 3, !dbg !43
  %399 = and i32 %398, 248, !dbg !43
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %399, !dbg !43
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %400, i32 %373, !dbg !43
  %402 = load <4 x i32>, ptr addrspace(3) %401, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %403 = bitcast bfloat %353 to i16, !dbg !43
  %404 = bitcast bfloat %354 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %377, i16 %403, i16 %404, i1 true) #1, !dbg !43
  %405 = bitcast bfloat %355 to i16, !dbg !43
  %406 = bitcast bfloat %356 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %384, i16 %405, i16 %406, i1 true) #1, !dbg !43
  %407 = bitcast bfloat %357 to i16, !dbg !43
  %408 = bitcast bfloat %358 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %388, i16 %407, i16 %408, i1 true) #1, !dbg !43
  %409 = bitcast bfloat %359 to i16, !dbg !43
  %410 = bitcast bfloat %360 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %395, i16 %409, i16 %410, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %411 = load <4 x i32>, ptr addrspace(3) %401, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %402, i64 0, !dbg !43
  %.extract25 = extractelement <4 x i32> %402, i64 1, !dbg !43
  %.extract27 = extractelement <4 x i32> %402, i64 2, !dbg !43
  %.extract29 = extractelement <4 x i32> %402, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract25, i32 %.extract27, i32 %.extract29, ptr addrspace(1) %342, i1 %335) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %411, i64 0, !dbg !43
  %.extract33 = extractelement <4 x i32> %411, i64 1, !dbg !43
  %.extract35 = extractelement <4 x i32> %411, i64 2, !dbg !43
  %.extract37 = extractelement <4 x i32> %411, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract33, i32 %.extract35, i32 %.extract37, ptr addrspace(1) %344, i1 %336) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqpwczaddxque2naostygfgclgpdgrwsupx3fjxcztk64qgerra.py", directory: "/tmp/torchinductor_root/iq")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 30, scope: !6)
!26 = !DILocation(line: 77, column: 55, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 66, column: 42, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
