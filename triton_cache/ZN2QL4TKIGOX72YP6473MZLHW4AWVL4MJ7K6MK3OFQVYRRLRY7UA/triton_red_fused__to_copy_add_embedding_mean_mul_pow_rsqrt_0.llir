; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/ds/cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !10 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %9 = shl i32 %8, 3, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = lshr i32 %10, 5, !dbg !13
  %12 = lshr i32 %10, 6, !dbg !13
  %13 = and i32 %12, 7, !dbg !13
  %14 = or disjoint i32 %13, %9, !dbg !14
  %15 = or disjoint i32 %9, 2, !dbg !14
  %16 = or disjoint i32 %9, 4, !dbg !14
  %17 = or disjoint i32 %9, 6, !dbg !14
  %18 = icmp slt i32 %14, 512, !dbg !15
  %19 = icmp slt i32 %9, 512, !dbg !15
  %20 = and i32 %10, 31, !dbg !16
  %21 = shl i32 %10, 3, !dbg !16
  %22 = and i32 %21, 504, !dbg !16
  %23 = and i32 %10, 511, !dbg !16
  %24 = sext i32 %14 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %9 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = sext i32 %15 to i64, !dbg !17
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !17
  %30 = sext i32 %16 to i64, !dbg !17
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = sext i32 %17 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !17
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 %19) #6, !dbg !18
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !18
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !18
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 %19) #6, !dbg !18
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !18
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !18
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 %19) #6, !dbg !18
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !18
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !18
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 %19) #6, !dbg !18
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !18
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !18
  %54 = icmp slt i64 %41, 0, !dbg !19
  %55 = insertelement <8 x i64> poison, i64 %43, i64 0, !dbg !20
  %56 = insertelement <8 x i64> %55, i64 %44, i64 1, !dbg !20
  %57 = insertelement <8 x i64> %56, i64 %46, i64 2, !dbg !20
  %58 = insertelement <8 x i64> %57, i64 %47, i64 3, !dbg !20
  %59 = insertelement <8 x i64> %58, i64 %49, i64 4, !dbg !20
  %60 = insertelement <8 x i64> %59, i64 %50, i64 5, !dbg !20
  %61 = insertelement <8 x i64> %60, i64 %52, i64 6, !dbg !20
  %62 = insertelement <8 x i64> %61, i64 %53, i64 7, !dbg !20
  %63 = add <8 x i64> %62, splat (i64 32128), !dbg !20
  %64 = icmp slt <8 x i64> %62, zeroinitializer, !dbg !19
  %65 = select <8 x i1> %64, <8 x i64> %63, <8 x i64> %62, !dbg !21
  %66 = shl i64 %41, 12, !dbg !22
  %67 = add i64 %66, 131596288, !dbg !22
  %68 = select i1 %54, i64 %67, i64 %66, !dbg !22
  %69 = icmp ugt <8 x i64> %65, splat (i64 32127)
  %70 = bitcast <8 x i1> %69 to i8
  %71 = icmp ne i8 %70, 0
  %.demorgan22.not = and i1 %71, %19, !dbg !23
  br i1 %.demorgan22.not, label %308, label %.split, !dbg !23

.split:                                           ; preds = %7
  %72 = insertelement <8 x i1> poison, i1 %18, i64 0, !dbg !24
  %73 = shufflevector <8 x i1> %72, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  %74 = zext nneg i32 %22 to i64, !dbg !25
  %invariant.op = or disjoint i64 %68, %74, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %75 = getelementptr bfloat, ptr addrspace(1) %1, i64 %invariant.op, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %18) #6, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !27
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !27
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !27
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !27
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !27
  %85 = shufflevector <2 x bfloat> %78, <2 x bfloat> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %86 = shufflevector <2 x bfloat> %82, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %87 = shufflevector <8 x bfloat> %85, <8 x bfloat> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %88 = shufflevector <2 x bfloat> %82, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %89 = shufflevector <8 x bfloat> %87, <8 x bfloat> %88, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %90 = shufflevector <2 x bfloat> %84, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %91 = shufflevector <8 x bfloat> %89, <8 x bfloat> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %92 = shufflevector <2 x bfloat> %84, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %93 = shufflevector <8 x bfloat> %91, <8 x bfloat> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %94 = fpext <8 x bfloat> %93 to <8 x float>, !dbg !28
  %95 = fmul <8 x float> %94, %94, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.1 = or disjoint i64 %invariant.op, 512
  %96 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.1, !dbg !26
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %96, i1 %18) #6, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !27
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !27
  %100 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !27
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !27
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !27
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !27
  %106 = shufflevector <2 x bfloat> %99, <2 x bfloat> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %107 = shufflevector <2 x bfloat> %103, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %108 = shufflevector <8 x bfloat> %106, <8 x bfloat> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %109 = shufflevector <2 x bfloat> %103, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %110 = shufflevector <8 x bfloat> %108, <8 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %111 = shufflevector <2 x bfloat> %105, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %112 = shufflevector <8 x bfloat> %110, <8 x bfloat> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %113 = shufflevector <2 x bfloat> %105, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %114 = shufflevector <8 x bfloat> %112, <8 x bfloat> %113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %115 = fpext <8 x bfloat> %114 to <8 x float>, !dbg !28
  %116 = fmul <8 x float> %115, %115, !dbg !29
  %117 = fadd <8 x float> %95, %116, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.2 = or disjoint i64 %invariant.op, 1024
  %118 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.2, !dbg !26
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %118, i1 %18) #6, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !27
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !27
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !27
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !27
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !27
  %128 = shufflevector <2 x bfloat> %121, <2 x bfloat> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %129 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %130 = shufflevector <8 x bfloat> %128, <8 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %131 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %132 = shufflevector <8 x bfloat> %130, <8 x bfloat> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %133 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %134 = shufflevector <8 x bfloat> %132, <8 x bfloat> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %135 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %136 = shufflevector <8 x bfloat> %134, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %137 = fpext <8 x bfloat> %136 to <8 x float>, !dbg !28
  %138 = fmul <8 x float> %137, %137, !dbg !29
  %139 = fadd <8 x float> %117, %138, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.3 = or disjoint i64 %invariant.op, 1536
  %140 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.3, !dbg !26
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %140, i1 %18) #6, !dbg !27
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !27
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !27
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !27
  %146 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !27
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !27
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !27
  %150 = shufflevector <2 x bfloat> %143, <2 x bfloat> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %151 = shufflevector <2 x bfloat> %147, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %152 = shufflevector <8 x bfloat> %150, <8 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %153 = shufflevector <2 x bfloat> %147, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %154 = shufflevector <8 x bfloat> %152, <8 x bfloat> %153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %155 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %156 = shufflevector <8 x bfloat> %154, <8 x bfloat> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %157 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %158 = shufflevector <8 x bfloat> %156, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %159 = fpext <8 x bfloat> %158 to <8 x float>, !dbg !28
  %160 = fmul <8 x float> %159, %159, !dbg !29
  %161 = fadd <8 x float> %139, %160, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.4 = or disjoint i64 %invariant.op, 2048
  %162 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.4, !dbg !26
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %162, i1 %18) #6, !dbg !27
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !27
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !27
  %166 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !27
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !27
  %168 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !27
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !27
  %170 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !27
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !27
  %172 = shufflevector <2 x bfloat> %165, <2 x bfloat> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %173 = shufflevector <2 x bfloat> %169, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %174 = shufflevector <8 x bfloat> %172, <8 x bfloat> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %175 = shufflevector <2 x bfloat> %169, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %176 = shufflevector <8 x bfloat> %174, <8 x bfloat> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %177 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %178 = shufflevector <8 x bfloat> %176, <8 x bfloat> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %179 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %180 = shufflevector <8 x bfloat> %178, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %181 = fpext <8 x bfloat> %180 to <8 x float>, !dbg !28
  %182 = fmul <8 x float> %181, %181, !dbg !29
  %183 = fadd <8 x float> %161, %182, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.5 = or disjoint i64 %invariant.op, 2560
  %184 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.5, !dbg !26
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %18) #6, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !27
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !27
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !27
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !27
  %192 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !27
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !27
  %194 = shufflevector <2 x bfloat> %187, <2 x bfloat> %189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %195 = shufflevector <2 x bfloat> %191, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %196 = shufflevector <8 x bfloat> %194, <8 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %197 = shufflevector <2 x bfloat> %191, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %198 = shufflevector <8 x bfloat> %196, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %199 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %200 = shufflevector <8 x bfloat> %198, <8 x bfloat> %199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %201 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %202 = shufflevector <8 x bfloat> %200, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %203 = fpext <8 x bfloat> %202 to <8 x float>, !dbg !28
  %204 = fmul <8 x float> %203, %203, !dbg !29
  %205 = fadd <8 x float> %183, %204, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.6 = or disjoint i64 %invariant.op, 3072
  %206 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.6, !dbg !26
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %206, i1 %18) #6, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !27
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !27
  %210 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !27
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !27
  %212 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !27
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !27
  %214 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !27
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !27
  %216 = shufflevector <2 x bfloat> %209, <2 x bfloat> %211, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %217 = shufflevector <2 x bfloat> %213, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %218 = shufflevector <8 x bfloat> %216, <8 x bfloat> %217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %219 = shufflevector <2 x bfloat> %213, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %220 = shufflevector <8 x bfloat> %218, <8 x bfloat> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %221 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %222 = shufflevector <8 x bfloat> %220, <8 x bfloat> %221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %223 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %224 = shufflevector <8 x bfloat> %222, <8 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %225 = fpext <8 x bfloat> %224 to <8 x float>, !dbg !28
  %226 = fmul <8 x float> %225, %225, !dbg !29
  %227 = fadd <8 x float> %205, %226, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass.7 = or disjoint i64 %invariant.op, 3584
  %228 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass.7, !dbg !26
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %228, i1 %18) #6, !dbg !27
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !27
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !27
  %232 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !27
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !27
  %234 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !27
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !27
  %236 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !27
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !27
  %238 = shufflevector <2 x bfloat> %231, <2 x bfloat> %233, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %239 = shufflevector <2 x bfloat> %235, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %240 = shufflevector <8 x bfloat> %238, <8 x bfloat> %239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %241 = shufflevector <2 x bfloat> %235, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %242 = shufflevector <8 x bfloat> %240, <8 x bfloat> %241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %243 = shufflevector <2 x bfloat> %237, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %244 = shufflevector <8 x bfloat> %242, <8 x bfloat> %243, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %245 = shufflevector <2 x bfloat> %237, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %246 = shufflevector <8 x bfloat> %244, <8 x bfloat> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %247 = fpext <8 x bfloat> %246 to <8 x float>, !dbg !28
  %248 = fmul <8 x float> %247, %247, !dbg !29
  %249 = fadd <8 x float> %227, %248, !dbg !30
  %250 = select <8 x i1> %73, <8 x float> %249, <8 x float> zeroinitializer, !dbg !24
  %shift = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %251 = fadd <8 x float> %250, %shift, !dbg !31
  %shift75 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %252 = fadd <8 x float> %shift75, %251, !dbg !31
  %shift76 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %253 = fadd <8 x float> %shift76, %252, !dbg !31
  %shift77 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %254 = fadd <8 x float> %shift77, %253, !dbg !31
  %shift78 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %255 = fadd <8 x float> %shift78, %254, !dbg !31
  %shift79 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %256 = fadd <8 x float> %shift79, %255, !dbg !31
  %shift80 = shufflevector <8 x float> %250, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %257 = fadd <8 x float> %shift80, %256, !dbg !31
  %258 = extractelement <8 x float> %257, i64 0, !dbg !31
  %259 = bitcast float %258 to i32, !dbg !36
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 16, i32 31), !dbg !36
  %261 = bitcast i32 %260 to float, !dbg !36
  %262 = fadd float %258, %261, !dbg !31
  %263 = bitcast float %262 to i32, !dbg !36
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !36
  %265 = bitcast i32 %264 to float, !dbg !36
  %266 = fadd float %262, %265, !dbg !31
  %267 = bitcast float %266 to i32, !dbg !36
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !36
  %269 = bitcast i32 %268 to float, !dbg !36
  %270 = fadd float %266, %269, !dbg !31
  %271 = bitcast float %270 to i32, !dbg !36
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !36
  %273 = bitcast i32 %272 to float, !dbg !36
  %274 = fadd float %270, %273, !dbg !31
  %275 = bitcast float %274 to i32, !dbg !36
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !36
  %277 = bitcast i32 %276 to float, !dbg !36
  %278 = fadd float %274, %277, !dbg !31
  %279 = and i32 %11, 1, !dbg !36
  %280 = icmp eq i32 %20, 0, !dbg !36
  %281 = shl nuw nsw i32 %13, 1, !dbg !36
  %282 = or disjoint i32 %281, %279, !dbg !36
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !36
  %284 = bitcast float %278 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 %280) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %285 = icmp slt i32 %10, 16, !dbg !36
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !36
  %287 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %286, i1 %285) #6, !dbg !36
  %288 = bitcast i32 %287 to float, !dbg !36
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !36
  %290 = bitcast i32 %289 to float, !dbg !36
  %291 = fadd float %288, %290, !dbg !31
  %292 = and i32 %10, 1, !dbg !36
  %293 = icmp eq i32 %292, 0, !dbg !36
  %294 = and i1 %285, %293, !dbg !36
  %295 = bitcast float %291 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %295, i1 %294) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !36
  %297 = load float, ptr addrspace(3) %296, align 8, !dbg !36
  %298 = tail call float @llvm.nvvm.div.full(float %297, float 4.096000e+03), !dbg !37
  %299 = fadd float %298, 0x3EB0C6F7A0000000, !dbg !38
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i41 = icmp eq i32 %307, 0, !dbg !39
  br i1 %.not.i41, label %311, label %309, !dbg !39

308:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

309:                                              ; preds = %.split
  %310 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %299), !dbg !39
  br label %__nv_rsqrtf.exit43, !dbg !39

311:                                              ; preds = %.split
  %312 = tail call float @llvm.nvvm.rsqrt.approx.f(float %299), !dbg !39
  br label %__nv_rsqrtf.exit43, !dbg !39

__nv_rsqrtf.exit43:                               ; preds = %309, %311
  %.0.i42 = phi float [ %310, %309 ], [ %312, %311 ], !dbg !39
  %313 = shl i32 %14, 12, !dbg !40
  %314 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23
  %315 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %316 = or disjoint i32 %22, 4
  %317 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %316
  %318 = zext nneg i32 %23 to i64, !dbg !41
  %319 = zext nneg i32 %22 to i64, !dbg !41
  %320 = sext i32 %313 to i64, !dbg !41
  %invariant.op66 = or disjoint i64 %68, %319, !dbg !41
  %321 = getelementptr inbounds nuw i8, ptr addrspace(3) %315, i32 8
  %322 = getelementptr inbounds nuw i8, ptr addrspace(3) %317, i32 8
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %3, i64 %320, !dbg !41
  %323 = insertelement <2 x float> poison, float %.0.i42, i64 0, !dbg !42
  %324 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %325, !dbg !41

325:                                              ; preds = %325, %__nv_rsqrtf.exit43
  %indvars.iv56 = phi i64 [ 0, %__nv_rsqrtf.exit43 ], [ %indvars.iv.next57, %325 ]
  %326 = or disjoint i64 %indvars.iv56, %318, !dbg !43
  %327 = getelementptr bfloat, ptr addrspace(1) %2, i64 %326, !dbg !44
  %328 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %327, i1 true) #6, !dbg !45
  %329 = bitcast i16 %328 to bfloat, !dbg !45
  %330 = fpext bfloat %329 to float, !dbg !46
  %331 = or disjoint i64 %indvars.iv56, %319, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.reass67 = or i64 %indvars.iv56, %invariant.op66
  %332 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass67, !dbg !48
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %332, i1 %18) #6, !dbg !49
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !49
  %335 = bitcast i32 %334 to <2 x bfloat>, !dbg !49
  %336 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !49
  %337 = bitcast i32 %336 to <2 x bfloat>, !dbg !49
  %338 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !49
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !49
  %340 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !49
  %341 = bitcast i32 %340 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %342 = bitcast float %330 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %342, i1 true) #6, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %331, !dbg !51
  %343 = fpext <2 x bfloat> %335 to <2 x float>, !dbg !52
  %344 = fmul <2 x float> %324, %343, !dbg !42
  %345 = load <2 x float>, ptr addrspace(3) %315, align 16, !dbg !50
  %346 = fmul <2 x float> %345, %344, !dbg !50
  %347 = fptrunc <2 x float> %346 to <2 x bfloat>, !dbg !53
  %348 = fpext <2 x bfloat> %337 to <2 x float>, !dbg !52
  %349 = fmul <2 x float> %324, %348, !dbg !42
  %350 = load <2 x float>, ptr addrspace(3) %321, align 8, !dbg !50
  %351 = fmul <2 x float> %350, %349, !dbg !50
  %352 = fptrunc <2 x float> %351 to <2 x bfloat>, !dbg !53
  %353 = fpext <2 x bfloat> %339 to <2 x float>, !dbg !52
  %354 = fmul <2 x float> %324, %353, !dbg !42
  %355 = load <2 x float>, ptr addrspace(3) %317, align 16, !dbg !50
  %356 = fmul <2 x float> %354, %355, !dbg !50
  %357 = fptrunc <2 x float> %356 to <2 x bfloat>, !dbg !53
  %358 = fpext <2 x bfloat> %341 to <2 x float>, !dbg !52
  %359 = fmul <2 x float> %324, %358, !dbg !42
  %360 = load <2 x float>, ptr addrspace(3) %322, align 8, !dbg !50
  %361 = fmul <2 x float> %359, %360, !dbg !50
  %362 = fptrunc <2 x float> %361 to <2 x bfloat>, !dbg !53
  %363 = bitcast <2 x bfloat> %347 to i32, !dbg !53
  %364 = bitcast <2 x bfloat> %352 to i32, !dbg !53
  %365 = bitcast <2 x bfloat> %357 to i32, !dbg !53
  %366 = bitcast <2 x bfloat> %362 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %364, i32 %365, i32 %366, ptr addrspace(1) %gep, i1 %18) #6, !dbg !53
  %indvars.iv.next57 = add nuw nsw i64 %indvars.iv56, 512, !dbg !41
  %367 = icmp samesign ult i64 %indvars.iv56, 3584, !dbg !41
  br i1 %367, label %325, label %368, !dbg !41

368:                                              ; preds = %325
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py", directory: "/tmp/torchinductor_root/ds")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 39, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 36, scope: !10)
!22 = !DILocation(line: 42, column: 46, scope: !10)
!23 = !DILocation(line: 41, column: 68, scope: !10)
!24 = !DILocation(line: 47, column: 50, scope: !10)
!25 = !DILocation(line: 31, column: 40, scope: !10)
!26 = !DILocation(line: 42, column: 34, scope: !10)
!27 = !DILocation(line: 42, column: 53, scope: !10)
!28 = !DILocation(line: 42, column: 114, scope: !10)
!29 = !DILocation(line: 44, column: 22, scope: !10)
!30 = !DILocation(line: 46, column: 25, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 64, column: 25, scope: !10)
!38 = !DILocation(line: 66, column: 24, scope: !10)
!39 = !DILocation(line: 67, column: 32, scope: !10)
!40 = !DILocation(line: 71, column: 41, scope: !10)
!41 = !DILocation(line: 49, column: 40, scope: !10)
!42 = !DILocation(line: 68, column: 24, scope: !10)
!43 = !DILocation(line: 50, column: 31, scope: !10)
!44 = !DILocation(line: 55, column: 35, scope: !10)
!45 = !DILocation(line: 55, column: 42, scope: !10)
!46 = !DILocation(line: 55, column: 95, scope: !10)
!47 = !DILocation(line: 60, column: 70, scope: !10)
!48 = !DILocation(line: 61, column: 35, scope: !10)
!49 = !DILocation(line: 61, column: 55, scope: !10)
!50 = !DILocation(line: 70, column: 24, scope: !10)
!51 = !DILocation(line: 71, column: 29, scope: !10)
!52 = !DILocation(line: 61, column: 117, scope: !10)
!53 = !DILocation(line: 71, column: 53, scope: !10)
!54 = !DILocation(line: 49, column: 4, scope: !10)
