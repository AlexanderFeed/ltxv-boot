; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = shl i32 %15, 3, !dbg !19
  %23 = and i32 %22, 24, !dbg !19
  %24 = or disjoint i32 %14, %20, !dbg !20
  %25 = or disjoint i32 %14, %21, !dbg !20
  %26 = shl nsw i32 %13, 6, !dbg !21
  %27 = or disjoint i32 %26, %20, !dbg !22
  %28 = or disjoint i32 %26, %21, !dbg !22
  %29 = srem i32 %24, 512, !dbg !23
  %30 = srem i32 %25, 512, !dbg !23
  %31 = srem i32 %27, 512, !dbg !24
  %.lhs.trunc = trunc i32 %28 to i16, !dbg !24
  %32 = srem i16 %.lhs.trunc, 512, !dbg !24
  %.sext = sext i16 %32 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %34 = shl nsw i32 %29, 12, !dbg !26
  %35 = shl nsw i32 %30, 12, !dbg !26
  %36 = shl i32 %33, 6, !dbg !27
  %37 = or disjoint i32 %23, %36, !dbg !28
  %38 = add i32 %37, %34, !dbg !29
  %39 = add i32 %37, %35, !dbg !29
  %40 = sext i32 %38 to i64, !dbg !30
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = sext i32 %39 to i64, !dbg !30
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = shl nsw i32 %31, 12, !dbg !31
  %45 = shl nsw i32 %.sext, 12, !dbg !31
  %46 = add i32 %37, %44, !dbg !32
  %47 = add i32 %37, %45, !dbg !32
  %48 = sext i32 %46 to i64, !dbg !33
  %49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !33
  %50 = sext i32 %47 to i64, !dbg !33
  %51 = getelementptr bfloat, ptr addrspace(1) %1, i64 %50, !dbg !33
  %52 = xor i32 %22, %15, !dbg !34
  %53 = and i32 %52, 24, !dbg !34
  %54 = shl nuw nsw i32 %20, 5, !dbg !34
  %55 = or disjoint i32 %54, %53, !dbg !34
  %56 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %55, !dbg !34
  %57 = or disjoint i32 %55, 1024, !dbg !34
  %58 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %57, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %41, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %58, ptr addrspace(1) %43, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %59 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %55, !dbg !35
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %57, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %59, ptr addrspace(1) %49, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %60, ptr addrspace(1) %51, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %invariant.op = or disjoint i32 %16, %19, !dbg !36
  %invariant.op145 = or disjoint i32 %invariant.op, 32, !dbg !36
  %61 = shl i32 %15, 2
  %62 = and i32 %61, 8
  %63 = and i32 %61, 16
  %64 = and i32 %61, 24
  %65 = and i32 %15, 7
  %66 = and i32 %15, 15
  %67 = lshr i32 %15, 1
  %68 = and i32 %67, 8
  %69 = xor i32 %64, %68
  %70 = or disjoint i32 %19, %66
  %71 = shl nuw nsw i32 %70, 5
  %72 = or disjoint i32 %69, %71
  %73 = or disjoint i32 %62, 16
  %74 = or disjoint i32 %68, %63
  %75 = xor i32 %74, %73
  %76 = or disjoint i32 %75, %71
  %.reass146 = or disjoint i32 %65, %invariant.op145
  %77 = shl nuw nsw i32 %.reass146, 5
  %78 = or disjoint i32 %77, %69
  %79 = or disjoint i32 %75, %77
  %80 = xor i32 %61, %15
  %81 = and i32 %80, 24
  %82 = or disjoint i32 %18, %65
  %83 = shl nuw nsw i32 %82, 5
  %84 = or disjoint i32 %81, %83
  %85 = or disjoint i32 %84, 512
  %86 = or disjoint i32 %83, 1024
  %87 = or disjoint i32 %81, %86
  %88 = or disjoint i32 %84, 1536
  br label %89, !dbg !36

89:                                               ; preds = %4, %89
  %90 = phi i32 [ -1, %4 ], [ %126, %89 ]
  %.pn50150 = phi ptr addrspace(1) [ %51, %4 ], [ %269, %89 ]
  %.pn66149 = phi ptr addrspace(1) [ %49, %4 ], [ %268, %89 ]
  %.pn18148 = phi ptr addrspace(1) [ %43, %4 ], [ %267, %89 ]
  %.pn34147 = phi ptr addrspace(1) [ %41, %4 ], [ %266, %89 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %227, %89 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %228, %89 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %229, %89 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %230, %89 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %232, %89 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %233, %89 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %234, %89 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %235, %89 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %237, %89 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %238, %89 ]
  %101 = phi float [ 0.000000e+00, %4 ], [ %239, %89 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %240, %89 ]
  %103 = phi float [ 0.000000e+00, %4 ], [ %242, %89 ]
  %104 = phi float [ 0.000000e+00, %4 ], [ %243, %89 ]
  %105 = phi float [ 0.000000e+00, %4 ], [ %244, %89 ]
  %106 = phi float [ 0.000000e+00, %4 ], [ %245, %89 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %247, %89 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %248, %89 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %249, %89 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %250, %89 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %252, %89 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %253, %89 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %254, %89 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %255, %89 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %257, %89 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %258, %89 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %259, %89 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %260, %89 ]
  %119 = phi float [ 0.000000e+00, %4 ], [ %262, %89 ]
  %120 = phi float [ 0.000000e+00, %4 ], [ %263, %89 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %264, %89 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %265, %89 ]
  %123 = phi i1 [ true, %4 ], [ false, %89 ]
  %124 = add i32 %90, 1, !dbg !36
  %125 = icmp ugt i32 %90, 2147483646, !dbg !36
  %126 = select i1 %125, i32 %124, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %127 = shl i32 %126, 11, !dbg !34
  %128 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %127, !dbg !34
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %128, i32 %72, !dbg !34
  %130 = ptrtoint ptr addrspace(3) %129 to i32, !dbg !34
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %130) #1, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !34
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %128, i32 %76, !dbg !34
  %137 = ptrtoint ptr addrspace(3) %136 to i32, !dbg !34
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %137) #1, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !34
  %143 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %128, i32 %78, !dbg !34
  %144 = ptrtoint ptr addrspace(3) %143 to i32, !dbg !34
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %144) #1, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !34
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %128, i32 %79, !dbg !34
  %151 = ptrtoint ptr addrspace(3) %150 to i32, !dbg !34
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %151) #1, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !34
  %157 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %127, !dbg !35
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %84, !dbg !35
  %159 = ptrtoint ptr addrspace(3) %158 to i32, !dbg !35
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %159) #1, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !35
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %85, !dbg !35
  %166 = ptrtoint ptr addrspace(3) %165 to i32, !dbg !35
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %166) #1, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !35
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !35
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %87, !dbg !35
  %173 = ptrtoint ptr addrspace(3) %172 to i32, !dbg !35
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %173) #1, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !35
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !35
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !35
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %88, !dbg !35
  %180 = ptrtoint ptr addrspace(3) %179 to i32, !dbg !35
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %180) #1, !dbg !35
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !35
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !35
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !35
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !35
  %186 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %91, float %92, float %93, float %94, i32 %132, i32 %133, i32 %134, i32 %135, i32 %161, i32 %162) #1, !dbg !37
  %187 = extractvalue { float, float, float, float } %186, 0, !dbg !37
  %188 = extractvalue { float, float, float, float } %186, 1, !dbg !37
  %189 = extractvalue { float, float, float, float } %186, 2, !dbg !37
  %190 = extractvalue { float, float, float, float } %186, 3, !dbg !37
  %191 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %95, float %96, float %97, float %98, i32 %132, i32 %133, i32 %134, i32 %135, i32 %168, i32 %169) #1, !dbg !37
  %192 = extractvalue { float, float, float, float } %191, 0, !dbg !37
  %193 = extractvalue { float, float, float, float } %191, 1, !dbg !37
  %194 = extractvalue { float, float, float, float } %191, 2, !dbg !37
  %195 = extractvalue { float, float, float, float } %191, 3, !dbg !37
  %196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %99, float %100, float %101, float %102, i32 %132, i32 %133, i32 %134, i32 %135, i32 %175, i32 %176) #1, !dbg !37
  %197 = extractvalue { float, float, float, float } %196, 0, !dbg !37
  %198 = extractvalue { float, float, float, float } %196, 1, !dbg !37
  %199 = extractvalue { float, float, float, float } %196, 2, !dbg !37
  %200 = extractvalue { float, float, float, float } %196, 3, !dbg !37
  %201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %103, float %104, float %105, float %106, i32 %132, i32 %133, i32 %134, i32 %135, i32 %182, i32 %183) #1, !dbg !37
  %202 = extractvalue { float, float, float, float } %201, 0, !dbg !37
  %203 = extractvalue { float, float, float, float } %201, 1, !dbg !37
  %204 = extractvalue { float, float, float, float } %201, 2, !dbg !37
  %205 = extractvalue { float, float, float, float } %201, 3, !dbg !37
  %206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %107, float %108, float %109, float %110, i32 %146, i32 %147, i32 %148, i32 %149, i32 %161, i32 %162) #1, !dbg !37
  %207 = extractvalue { float, float, float, float } %206, 0, !dbg !37
  %208 = extractvalue { float, float, float, float } %206, 1, !dbg !37
  %209 = extractvalue { float, float, float, float } %206, 2, !dbg !37
  %210 = extractvalue { float, float, float, float } %206, 3, !dbg !37
  %211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %111, float %112, float %113, float %114, i32 %146, i32 %147, i32 %148, i32 %149, i32 %168, i32 %169) #1, !dbg !37
  %212 = extractvalue { float, float, float, float } %211, 0, !dbg !37
  %213 = extractvalue { float, float, float, float } %211, 1, !dbg !37
  %214 = extractvalue { float, float, float, float } %211, 2, !dbg !37
  %215 = extractvalue { float, float, float, float } %211, 3, !dbg !37
  %216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %115, float %116, float %117, float %118, i32 %146, i32 %147, i32 %148, i32 %149, i32 %175, i32 %176) #1, !dbg !37
  %217 = extractvalue { float, float, float, float } %216, 0, !dbg !37
  %218 = extractvalue { float, float, float, float } %216, 1, !dbg !37
  %219 = extractvalue { float, float, float, float } %216, 2, !dbg !37
  %220 = extractvalue { float, float, float, float } %216, 3, !dbg !37
  %221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %119, float %120, float %121, float %122, i32 %146, i32 %147, i32 %148, i32 %149, i32 %182, i32 %183) #1, !dbg !37
  %222 = extractvalue { float, float, float, float } %221, 0, !dbg !37
  %223 = extractvalue { float, float, float, float } %221, 1, !dbg !37
  %224 = extractvalue { float, float, float, float } %221, 2, !dbg !37
  %225 = extractvalue { float, float, float, float } %221, 3, !dbg !37
  %226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %187, float %188, float %189, float %190, i32 %139, i32 %140, i32 %141, i32 %142, i32 %163, i32 %164) #1, !dbg !37
  %227 = extractvalue { float, float, float, float } %226, 0, !dbg !37
  %228 = extractvalue { float, float, float, float } %226, 1, !dbg !37
  %229 = extractvalue { float, float, float, float } %226, 2, !dbg !37
  %230 = extractvalue { float, float, float, float } %226, 3, !dbg !37
  %231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %139, i32 %140, i32 %141, i32 %142, i32 %170, i32 %171) #1, !dbg !37
  %232 = extractvalue { float, float, float, float } %231, 0, !dbg !37
  %233 = extractvalue { float, float, float, float } %231, 1, !dbg !37
  %234 = extractvalue { float, float, float, float } %231, 2, !dbg !37
  %235 = extractvalue { float, float, float, float } %231, 3, !dbg !37
  %236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %197, float %198, float %199, float %200, i32 %139, i32 %140, i32 %141, i32 %142, i32 %177, i32 %178) #1, !dbg !37
  %237 = extractvalue { float, float, float, float } %236, 0, !dbg !37
  %238 = extractvalue { float, float, float, float } %236, 1, !dbg !37
  %239 = extractvalue { float, float, float, float } %236, 2, !dbg !37
  %240 = extractvalue { float, float, float, float } %236, 3, !dbg !37
  %241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %139, i32 %140, i32 %141, i32 %142, i32 %184, i32 %185) #1, !dbg !37
  %242 = extractvalue { float, float, float, float } %241, 0, !dbg !37
  %243 = extractvalue { float, float, float, float } %241, 1, !dbg !37
  %244 = extractvalue { float, float, float, float } %241, 2, !dbg !37
  %245 = extractvalue { float, float, float, float } %241, 3, !dbg !37
  %246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %153, i32 %154, i32 %155, i32 %156, i32 %163, i32 %164) #1, !dbg !37
  %247 = extractvalue { float, float, float, float } %246, 0, !dbg !37
  %248 = extractvalue { float, float, float, float } %246, 1, !dbg !37
  %249 = extractvalue { float, float, float, float } %246, 2, !dbg !37
  %250 = extractvalue { float, float, float, float } %246, 3, !dbg !37
  %251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %212, float %213, float %214, float %215, i32 %153, i32 %154, i32 %155, i32 %156, i32 %170, i32 %171) #1, !dbg !37
  %252 = extractvalue { float, float, float, float } %251, 0, !dbg !37
  %253 = extractvalue { float, float, float, float } %251, 1, !dbg !37
  %254 = extractvalue { float, float, float, float } %251, 2, !dbg !37
  %255 = extractvalue { float, float, float, float } %251, 3, !dbg !37
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %153, i32 %154, i32 %155, i32 %156, i32 %177, i32 %178) #1, !dbg !37
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !37
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !37
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !37
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !37
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %222, float %223, float %224, float %225, i32 %153, i32 %154, i32 %155, i32 %156, i32 %184, i32 %185) #1, !dbg !37
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !37
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !37
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !37
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !37
  %266 = getelementptr i8, ptr addrspace(1) %.pn34147, i64 64, !dbg !38
  %267 = getelementptr i8, ptr addrspace(1) %.pn18148, i64 64, !dbg !38
  %268 = getelementptr i8, ptr addrspace(1) %.pn66149, i64 64, !dbg !39
  %269 = getelementptr i8, ptr addrspace(1) %.pn50150, i64 64, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %270 = select i1 %123, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %266, i32 %270) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %58, ptr addrspace(1) %267, i32 %270) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %59, ptr addrspace(1) %268, i32 %270) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %60, ptr addrspace(1) %269, i32 %270) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  br i1 %123, label %89, label %271, !dbg !36

271:                                              ; preds = %89
  %272 = and i32 %22, 56, !dbg !19
  %273 = or disjoint i32 %26, %272, !dbg !22
  %274 = lshr i32 %15, 3, !dbg !19
  %275 = and i32 %274, 15, !dbg !19
  %276 = or disjoint i32 %275, %14, !dbg !20
  %277 = or disjoint i32 %276, 48, !dbg !20
  %278 = or disjoint i32 %276, 32, !dbg !20
  %279 = or disjoint i32 %276, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %280 = icmp slt i32 %276, 512, !dbg !40
  %281 = icmp slt i32 %279, 512, !dbg !40
  %282 = icmp slt i32 %278, 512, !dbg !40
  %283 = icmp slt i32 %277, 512, !dbg !40
  %284 = icmp slt i32 %273, 512, !dbg !41
  %285 = and i1 %280, %284, !dbg !42
  %286 = and i1 %281, %284, !dbg !42
  %287 = and i1 %282, %284, !dbg !42
  %288 = and i1 %283, %284, !dbg !42
  %289 = shl i32 %276, 9, !dbg !43
  %290 = shl i32 %279, 9, !dbg !43
  %291 = shl i32 %278, 9, !dbg !43
  %292 = shl i32 %277, 9, !dbg !43
  %293 = shl i32 %33, 18, !dbg !44
  %294 = add i32 %273, %293, !dbg !45
  %295 = add i32 %294, %289, !dbg !46
  %296 = add i32 %294, %290, !dbg !46
  %297 = add i32 %294, %291, !dbg !46
  %298 = add i32 %294, %292, !dbg !46
  %299 = sext i32 %295 to i64, !dbg !47
  %300 = getelementptr bfloat, ptr addrspace(1) %2, i64 %299, !dbg !47
  %301 = sext i32 %296 to i64, !dbg !47
  %302 = getelementptr bfloat, ptr addrspace(1) %2, i64 %301, !dbg !47
  %303 = sext i32 %297 to i64, !dbg !47
  %304 = getelementptr bfloat, ptr addrspace(1) %2, i64 %303, !dbg !47
  %305 = sext i32 %298 to i64, !dbg !47
  %306 = getelementptr bfloat, ptr addrspace(1) %2, i64 %305, !dbg !47
  %307 = fptrunc float %227 to bfloat, !dbg !48
  %308 = fptrunc float %228 to bfloat, !dbg !48
  %309 = fptrunc float %229 to bfloat, !dbg !48
  %310 = fptrunc float %230 to bfloat, !dbg !48
  %311 = fptrunc float %232 to bfloat, !dbg !48
  %312 = fptrunc float %233 to bfloat, !dbg !48
  %313 = fptrunc float %234 to bfloat, !dbg !48
  %314 = fptrunc float %235 to bfloat, !dbg !48
  %315 = fptrunc float %237 to bfloat, !dbg !48
  %316 = fptrunc float %238 to bfloat, !dbg !48
  %317 = fptrunc float %239 to bfloat, !dbg !48
  %318 = fptrunc float %240 to bfloat, !dbg !48
  %319 = fptrunc float %242 to bfloat, !dbg !48
  %320 = fptrunc float %243 to bfloat, !dbg !48
  %321 = fptrunc float %244 to bfloat, !dbg !48
  %322 = fptrunc float %245 to bfloat, !dbg !48
  %323 = fptrunc float %247 to bfloat, !dbg !48
  %324 = fptrunc float %248 to bfloat, !dbg !48
  %325 = fptrunc float %249 to bfloat, !dbg !48
  %326 = fptrunc float %250 to bfloat, !dbg !48
  %327 = fptrunc float %252 to bfloat, !dbg !48
  %328 = fptrunc float %253 to bfloat, !dbg !48
  %329 = fptrunc float %254 to bfloat, !dbg !48
  %330 = fptrunc float %255 to bfloat, !dbg !48
  %331 = fptrunc float %257 to bfloat, !dbg !48
  %332 = fptrunc float %258 to bfloat, !dbg !48
  %333 = fptrunc float %259 to bfloat, !dbg !48
  %334 = fptrunc float %260 to bfloat, !dbg !48
  %335 = fptrunc float %262 to bfloat, !dbg !48
  %336 = fptrunc float %263 to bfloat, !dbg !48
  %337 = fptrunc float %264 to bfloat, !dbg !48
  %338 = fptrunc float %265 to bfloat, !dbg !48
  %339 = shl i32 %15, 1, !dbg !48
  %340 = and i32 %339, 6, !dbg !48
  %341 = shl i32 %15, 4, !dbg !48
  %342 = and i32 %341, 1472, !dbg !48
  %343 = or disjoint i32 %342, %340, !dbg !48
  %344 = or disjoint i32 %343, %18, !dbg !48
  %345 = and i32 %22, 1016, !dbg !48
  %346 = lshr exact i32 %342, 2, !dbg !48
  %347 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %346, !dbg !48
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %344, !dbg !48
  %349 = bitcast bfloat %307 to i16, !dbg !48
  %350 = bitcast bfloat %308 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %348, i16 %349, i16 %350, i1 true) #1, !dbg !48
  %351 = or disjoint i32 %344, 512, !dbg !48
  %352 = lshr i32 %351, 3, !dbg !48
  %353 = and i32 %352, 248, !dbg !48
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %353, !dbg !48
  %355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %354, i32 %351, !dbg !48
  %356 = bitcast bfloat %309 to i16, !dbg !48
  %357 = bitcast bfloat %310 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %355, i16 %356, i16 %357, i1 true) #1, !dbg !48
  %358 = or disjoint i32 %344, 16, !dbg !48
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %358, !dbg !48
  %360 = bitcast bfloat %311 to i16, !dbg !48
  %361 = bitcast bfloat %312 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %359, i16 %360, i16 %361, i1 true) #1, !dbg !48
  %362 = or disjoint i32 %344, 528, !dbg !48
  %363 = lshr i32 %362, 3, !dbg !48
  %364 = and i32 %363, 248, !dbg !48
  %365 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %364, !dbg !48
  %366 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %362, !dbg !48
  %367 = bitcast bfloat %313 to i16, !dbg !48
  %368 = bitcast bfloat %314 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %366, i16 %367, i16 %368, i1 true) #1, !dbg !48
  %369 = or disjoint i32 %344, 32, !dbg !48
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %369, !dbg !48
  %371 = bitcast bfloat %315 to i16, !dbg !48
  %372 = bitcast bfloat %316 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %370, i16 %371, i16 %372, i1 true) #1, !dbg !48
  %373 = or disjoint i32 %344, 544, !dbg !48
  %374 = lshr i32 %373, 3, !dbg !48
  %375 = and i32 %374, 248, !dbg !48
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %375, !dbg !48
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %376, i32 %373, !dbg !48
  %378 = bitcast bfloat %317 to i16, !dbg !48
  %379 = bitcast bfloat %318 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %377, i16 %378, i16 %379, i1 true) #1, !dbg !48
  %380 = or disjoint i32 %344, 48, !dbg !48
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %380, !dbg !48
  %382 = bitcast bfloat %319 to i16, !dbg !48
  %383 = bitcast bfloat %320 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %381, i16 %382, i16 %383, i1 true) #1, !dbg !48
  %384 = or disjoint i32 %344, 560, !dbg !48
  %385 = lshr i32 %384, 3, !dbg !48
  %386 = and i32 %385, 248, !dbg !48
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %386, !dbg !48
  %388 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %387, i32 %384, !dbg !48
  %389 = bitcast bfloat %321 to i16, !dbg !48
  %390 = bitcast bfloat %322 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %388, i16 %389, i16 %390, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %391 = and i32 %15, 120, !dbg !48
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %391, !dbg !48
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %345, !dbg !48
  %394 = load <4 x i32>, ptr addrspace(3) %393, align 16, !dbg !48
  %395 = or disjoint i32 %345, 1024, !dbg !48
  %396 = lshr exact i32 %395, 3, !dbg !48
  %397 = and i32 %396, 248, !dbg !48
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %397, !dbg !48
  %399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %398, i32 %395, !dbg !48
  %400 = load <4 x i32>, ptr addrspace(3) %399, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %401 = bitcast bfloat %323 to i16, !dbg !48
  %402 = bitcast bfloat %324 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %348, i16 %401, i16 %402, i1 true) #1, !dbg !48
  %403 = bitcast bfloat %325 to i16, !dbg !48
  %404 = bitcast bfloat %326 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %355, i16 %403, i16 %404, i1 true) #1, !dbg !48
  %405 = bitcast bfloat %327 to i16, !dbg !48
  %406 = bitcast bfloat %328 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %359, i16 %405, i16 %406, i1 true) #1, !dbg !48
  %407 = bitcast bfloat %329 to i16, !dbg !48
  %408 = bitcast bfloat %330 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %366, i16 %407, i16 %408, i1 true) #1, !dbg !48
  %409 = bitcast bfloat %331 to i16, !dbg !48
  %410 = bitcast bfloat %332 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %370, i16 %409, i16 %410, i1 true) #1, !dbg !48
  %411 = bitcast bfloat %333 to i16, !dbg !48
  %412 = bitcast bfloat %334 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %377, i16 %411, i16 %412, i1 true) #1, !dbg !48
  %413 = bitcast bfloat %335 to i16, !dbg !48
  %414 = bitcast bfloat %336 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %381, i16 %413, i16 %414, i1 true) #1, !dbg !48
  %415 = bitcast bfloat %337 to i16, !dbg !48
  %416 = bitcast bfloat %338 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %388, i16 %415, i16 %416, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %417 = load <4 x i32>, ptr addrspace(3) %393, align 16, !dbg !48
  %418 = load <4 x i32>, ptr addrspace(3) %399, align 16, !dbg !48
  %.extract = extractelement <4 x i32> %394, i64 0, !dbg !48
  %.extract115 = extractelement <4 x i32> %394, i64 1, !dbg !48
  %.extract117 = extractelement <4 x i32> %394, i64 2, !dbg !48
  %.extract119 = extractelement <4 x i32> %394, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract115, i32 %.extract117, i32 %.extract119, ptr addrspace(1) %300, i1 %285) #1, !dbg !48
  %.extract121 = extractelement <4 x i32> %400, i64 0, !dbg !48
  %.extract123 = extractelement <4 x i32> %400, i64 1, !dbg !48
  %.extract125 = extractelement <4 x i32> %400, i64 2, !dbg !48
  %.extract127 = extractelement <4 x i32> %400, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract121, i32 %.extract123, i32 %.extract125, i32 %.extract127, ptr addrspace(1) %302, i1 %286) #1, !dbg !48
  %.extract129 = extractelement <4 x i32> %417, i64 0, !dbg !48
  %.extract131 = extractelement <4 x i32> %417, i64 1, !dbg !48
  %.extract133 = extractelement <4 x i32> %417, i64 2, !dbg !48
  %.extract135 = extractelement <4 x i32> %417, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract129, i32 %.extract131, i32 %.extract133, i32 %.extract135, ptr addrspace(1) %304, i1 %287) #1, !dbg !48
  %.extract137 = extractelement <4 x i32> %418, i64 0, !dbg !48
  %.extract139 = extractelement <4 x i32> %418, i64 1, !dbg !48
  %.extract141 = extractelement <4 x i32> %418, i64 2, !dbg !48
  %.extract143 = extractelement <4 x i32> %418, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract137, i32 %.extract139, i32 %.extract141, i32 %.extract143, ptr addrspace(1) %306, i1 %288) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce5ftx65atvf3hichoud2qlpamsipjcmlixpvqo7t5roasyxxuux.py", directory: "/tmp/torchinductor_root/e5")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 70, column: 25, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 78, column: 13, scope: !6)
!39 = !DILocation(line: 79, column: 13, scope: !6)
!40 = !DILocation(line: 87, column: 20, scope: !6)
!41 = !DILocation(line: 87, column: 34, scope: !6)
!42 = !DILocation(line: 87, column: 26, scope: !6)
!43 = !DILocation(line: 90, column: 25, scope: !6)
!44 = !DILocation(line: 90, column: 40, scope: !6)
!45 = !DILocation(line: 90, column: 21, scope: !6)
!46 = !DILocation(line: 90, column: 33, scope: !6)
!47 = !DILocation(line: 91, column: 25, scope: !6)
!48 = !DILocation(line: 91, column: 67, scope: !6)
!49 = !DILocation(line: 91, column: 4, scope: !6)
