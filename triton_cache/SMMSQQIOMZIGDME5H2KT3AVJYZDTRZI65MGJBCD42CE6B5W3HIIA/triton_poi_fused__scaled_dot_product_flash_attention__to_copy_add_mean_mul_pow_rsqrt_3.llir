; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 8, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = shl i32 %15, 1, !dbg !11
  %17 = and i32 %16, 254, !dbg !11
  %18 = or disjoint i32 %17, %14, !dbg !12
  %19 = or disjoint i32 %18, 1, !dbg !12
  %20 = sdiv i32 %18, 128, !dbg !13
  %21 = mul i32 %20, 128, !dbg !14
  %.decomposed = sub i32 %18, %21, !dbg !14
  %22 = srem i32 %19, 128, !dbg !14
  %23 = sdiv i32 %18, 3072, !dbg !15
  %24 = sext i32 %18 to i64, !dbg !16
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %25) #3, !dbg !17
  %27 = sext i32 %20 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %28) #3, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %28) #3, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = sext i32 %.decomposed to i64, !dbg !20
  %34 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %34) #3, !dbg !21
  %36 = shl nsw i32 %23, 7, !dbg !22
  %37 = add nsw i32 %36, %.decomposed, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !24
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %39) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !26
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %41) #3, !dbg !27
  %43 = getelementptr bfloat, ptr addrspace(1) %5, i64 %24, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %43) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %45) #3, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %45) #3, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = getelementptr bfloat, ptr addrspace(1) %7, i64 %33, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %50) #3, !dbg !33
  %52 = srem i32 %19, 2, !dbg !34
  %53 = icmp slt i32 %52, 1, !dbg !35
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !36
  %54 = ashr exact i8 %.lhs.trunc, 1, !dbg !36
  %.sext = sext i8 %54 to i32, !dbg !36
  %.lhs.trunc34 = trunc nsw i32 %22 to i8, !dbg !36
  %55 = sdiv i8 %.lhs.trunc34, 2, !dbg !36
  %.sext35 = sext i8 %55 to i32, !dbg !36
  %56 = shl nsw i32 %.sext, 1, !dbg !37
  %57 = shl nsw i32 %.sext35, 1, !dbg !37
  %58 = or disjoint i32 %56, 1, !dbg !38
  %59 = or disjoint i32 %57, 1, !dbg !38
  %60 = shl nsw i32 %20, 7, !dbg !39
  %61 = add i32 %58, %60, !dbg !40
  %62 = add i32 %59, %60, !dbg !40
  %63 = sext i32 %61 to i64, !dbg !41
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !41
  %65 = sext i32 %62 to i64, !dbg !41
  %66 = getelementptr bfloat, ptr addrspace(1) %0, i64 %65, !dbg !41
  %67 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 true) #3, !dbg !42
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %66, i1 %53) #3, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 true) #3, !dbg !43
  %70 = bitcast i32 %69 to float, !dbg !43
  %71 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 %53) #3, !dbg !43
  %72 = bitcast i32 %71 to float, !dbg !43
  %73 = tail call float @llvm.nvvm.div.full(float %70, float 1.280000e+02), !dbg !44
  %74 = tail call float @llvm.nvvm.div.full(float %72, float 1.280000e+02), !dbg !44
  %75 = fadd float %73, 0x3EB0C6F7A0000000, !dbg !45
  %76 = fadd float %74, 0x3EB0C6F7A0000000, !dbg !45
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %77, 0, !dbg !46
  br i1 %.not.i, label %80, label %78, !dbg !46

78:                                               ; preds = %12
  %79 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %75), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

80:                                               ; preds = %12
  %81 = tail call float @llvm.nvvm.rsqrt.approx.f(float %75), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %78, %80
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], !dbg !46
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %82, 0, !dbg !46
  br i1 %.not.i1, label %85, label %83, !dbg !46

83:                                               ; preds = %__nv_rsqrtf.exit
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %76), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

85:                                               ; preds = %__nv_rsqrtf.exit
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %76), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

__nv_rsqrtf.exit3:                                ; preds = %83, %85
  %.0.i2 = phi float [ %84, %83 ], [ %86, %85 ], !dbg !46
  %87 = sext i32 %58 to i64, !dbg !47
  %88 = getelementptr bfloat, ptr addrspace(1) %2, i64 %87, !dbg !47
  %89 = sext i32 %59 to i64, !dbg !47
  %90 = getelementptr bfloat, ptr addrspace(1) %2, i64 %89, !dbg !47
  %91 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %88, i1 true) #3, !dbg !48
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %90, i1 %53) #3, !dbg !48
  %93 = icmp sgt i32 %52, 0, !dbg !49
  %94 = add i32 %56, %60, !dbg !50
  %95 = add i32 %57, %60, !dbg !50
  %96 = sext i32 %94 to i64, !dbg !51
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !51
  %98 = sext i32 %95 to i64, !dbg !51
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !51
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 false) #3, !dbg !52
  %101 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 %93) #3, !dbg !52
  %102 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 false) #3, !dbg !53
  %103 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 %93) #3, !dbg !53
  %104 = bitcast i32 %103 to float, !dbg !53
  %105 = tail call float @llvm.nvvm.div.full(float %104, float 1.280000e+02), !dbg !54
  %106 = fadd float %105, 0x3EB0C6F7A0000000, !dbg !55
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i7 = icmp eq i32 %108, 0, !dbg !56
  br i1 %.not.i7, label %111, label %109, !dbg !56

109:                                              ; preds = %__nv_rsqrtf.exit3
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !56
  br label %__nv_rsqrtf.exit9, !dbg !56

111:                                              ; preds = %__nv_rsqrtf.exit3
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !56
  br label %__nv_rsqrtf.exit9, !dbg !56

__nv_rsqrtf.exit9:                                ; preds = %109, %111
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !56
  %113 = sext i32 %56 to i64, !dbg !57
  %114 = getelementptr bfloat, ptr addrspace(1) %2, i64 %113, !dbg !57
  %115 = sext i32 %57 to i64, !dbg !57
  %116 = getelementptr bfloat, ptr addrspace(1) %2, i64 %115, !dbg !57
  %117 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %114, i1 false) #3, !dbg !58
  %118 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %116, i1 %93) #3, !dbg !58
  %119 = tail call float @llvm.nvvm.div.full(float %30, float 1.280000e+02), !dbg !59
  %120 = tail call float @llvm.nvvm.div.full(float %32, float 1.280000e+02), !dbg !59
  %121 = fadd float %119, 0x3EB0C6F7A0000000, !dbg !60
  %122 = fadd float %120, 0x3EB0C6F7A0000000, !dbg !60
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i10 = icmp eq i32 %123, 0, !dbg !61
  br i1 %.not.i10, label %126, label %124, !dbg !61

124:                                              ; preds = %__nv_rsqrtf.exit9
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %121), !dbg !61
  br label %__nv_rsqrtf.exit12, !dbg !61

126:                                              ; preds = %__nv_rsqrtf.exit9
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %121), !dbg !61
  br label %__nv_rsqrtf.exit12, !dbg !61

__nv_rsqrtf.exit12:                               ; preds = %124, %126
  %.0.i11 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !61
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i13 = icmp eq i32 %128, 0, !dbg !61
  br i1 %.not.i13, label %131, label %129, !dbg !61

129:                                              ; preds = %__nv_rsqrtf.exit12
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !61
  br label %__nv_rsqrtf.exit15, !dbg !61

131:                                              ; preds = %__nv_rsqrtf.exit12
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !61
  br label %__nv_rsqrtf.exit15, !dbg !61

__nv_rsqrtf.exit15:                               ; preds = %129, %131
  %.0.i14 = phi float [ %130, %129 ], [ %132, %131 ], !dbg !61
  %133 = getelementptr bfloat, ptr addrspace(1) %5, i64 %63, !dbg !62
  %134 = getelementptr bfloat, ptr addrspace(1) %5, i64 %65, !dbg !62
  %135 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %133, i1 true) #3, !dbg !63
  %136 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %134, i1 %53) #3, !dbg !63
  %137 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 true) #3, !dbg !64
  %138 = bitcast i32 %137 to float, !dbg !64
  %139 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %53) #3, !dbg !64
  %140 = bitcast i32 %139 to float, !dbg !64
  %141 = tail call float @llvm.nvvm.div.full(float %138, float 1.280000e+02), !dbg !65
  %142 = tail call float @llvm.nvvm.div.full(float %140, float 1.280000e+02), !dbg !65
  %143 = fadd float %141, 0x3EB0C6F7A0000000, !dbg !66
  %144 = fadd float %142, 0x3EB0C6F7A0000000, !dbg !66
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i16 = icmp eq i32 %145, 0, !dbg !67
  br i1 %.not.i16, label %148, label %146, !dbg !67

146:                                              ; preds = %__nv_rsqrtf.exit15
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !67
  br label %__nv_rsqrtf.exit18, !dbg !67

148:                                              ; preds = %__nv_rsqrtf.exit15
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !67
  br label %__nv_rsqrtf.exit18, !dbg !67

__nv_rsqrtf.exit18:                               ; preds = %146, %148
  %.0.i17 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !67
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i19 = icmp eq i32 %150, 0, !dbg !67
  br i1 %.not.i19, label %153, label %151, !dbg !67

151:                                              ; preds = %__nv_rsqrtf.exit18
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !67
  br label %__nv_rsqrtf.exit21, !dbg !67

153:                                              ; preds = %__nv_rsqrtf.exit18
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !67
  br label %__nv_rsqrtf.exit21, !dbg !67

__nv_rsqrtf.exit21:                               ; preds = %151, %153
  %.0.i20 = phi float [ %152, %151 ], [ %154, %153 ], !dbg !67
  %155 = getelementptr bfloat, ptr addrspace(1) %7, i64 %87, !dbg !68
  %156 = getelementptr bfloat, ptr addrspace(1) %7, i64 %89, !dbg !68
  %157 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %155, i1 true) #3, !dbg !69
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %156, i1 %53) #3, !dbg !69
  %159 = getelementptr bfloat, ptr addrspace(1) %5, i64 %96, !dbg !70
  %160 = getelementptr bfloat, ptr addrspace(1) %5, i64 %98, !dbg !70
  %161 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %159, i1 false) #3, !dbg !71
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %160, i1 %93) #3, !dbg !71
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 false) #3, !dbg !72
  %164 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %93) #3, !dbg !72
  %165 = bitcast i32 %164 to float, !dbg !72
  %166 = tail call float @llvm.nvvm.div.full(float %165, float 1.280000e+02), !dbg !73
  %167 = fadd float %166, 0x3EB0C6F7A0000000, !dbg !74
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i25 = icmp eq i32 %169, 0, !dbg !75
  br i1 %.not.i25, label %172, label %170, !dbg !75

170:                                              ; preds = %__nv_rsqrtf.exit21
  %171 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !75
  br label %__nv_rsqrtf.exit27, !dbg !75

172:                                              ; preds = %__nv_rsqrtf.exit21
  %173 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !75
  br label %__nv_rsqrtf.exit27, !dbg !75

__nv_rsqrtf.exit27:                               ; preds = %170, %172
  %.0.i26 = phi float [ %171, %170 ], [ %173, %172 ], !dbg !75
  %174 = getelementptr bfloat, ptr addrspace(1) %7, i64 %113, !dbg !76
  %175 = getelementptr bfloat, ptr addrspace(1) %7, i64 %115, !dbg !76
  %176 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %174, i1 false) #3, !dbg !77
  %177 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %175, i1 %93) #3, !dbg !77
  %178 = tail call float @llvm.nvvm.div.full(float %47, float 1.280000e+02), !dbg !78
  %179 = tail call float @llvm.nvvm.div.full(float %49, float 1.280000e+02), !dbg !78
  %180 = fadd float %178, 0x3EB0C6F7A0000000, !dbg !79
  %181 = fadd float %179, 0x3EB0C6F7A0000000, !dbg !79
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i28 = icmp eq i32 %182, 0, !dbg !80
  br i1 %.not.i28, label %185, label %183, !dbg !80

183:                                              ; preds = %__nv_rsqrtf.exit27
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !80
  br label %__nv_rsqrtf.exit30, !dbg !80

185:                                              ; preds = %__nv_rsqrtf.exit27
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !80
  br label %__nv_rsqrtf.exit30, !dbg !80

__nv_rsqrtf.exit30:                               ; preds = %183, %185
  %.0.i29 = phi float [ %184, %183 ], [ %186, %185 ], !dbg !80
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i31 = icmp eq i32 %187, 0, !dbg !80
  br i1 %.not.i31, label %190, label %188, !dbg !80

188:                                              ; preds = %__nv_rsqrtf.exit30
  %189 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !80
  br label %__nv_rsqrtf.exit33, !dbg !80

190:                                              ; preds = %__nv_rsqrtf.exit30
  %191 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !80
  br label %__nv_rsqrtf.exit33, !dbg !80

__nv_rsqrtf.exit33:                               ; preds = %188, %190
  %.0.i32 = phi float [ %189, %188 ], [ %191, %190 ], !dbg !80
  %192 = bitcast i16 %136 to bfloat, !dbg !63
  %193 = fpext bfloat %192 to float, !dbg !81
  %194 = fmul float %.0.i20, %193, !dbg !82
  %195 = bitcast i16 %158 to bfloat, !dbg !69
  %196 = fpext bfloat %195 to float, !dbg !83
  %197 = fmul float %194, %196, !dbg !84
  %198 = fsub float 0.000000e+00, %197, !dbg !85
  %199 = bitcast i16 %162 to bfloat, !dbg !71
  %200 = fpext bfloat %199 to float, !dbg !86
  %201 = fmul float %.0.i26, %200, !dbg !87
  %202 = bitcast i16 %177 to bfloat, !dbg !77
  %203 = fpext bfloat %202 to float, !dbg !88
  %204 = fmul float %201, %203, !dbg !89
  %205 = select i1 %53, float %198, float %204, !dbg !90
  %206 = bitcast i16 %135 to bfloat, !dbg !63
  %207 = fpext bfloat %206 to float, !dbg !81
  %208 = fmul float %.0.i17, %207, !dbg !82
  %209 = bitcast i16 %157 to bfloat, !dbg !69
  %210 = fpext bfloat %209 to float, !dbg !83
  %211 = fmul float %208, %210, !dbg !84
  %212 = fsub float 0.000000e+00, %211, !dbg !85
  %213 = bitcast i32 %26 to <2 x bfloat>, !dbg !17
  %214 = bitcast i32 %35 to <2 x bfloat>, !dbg !21
  %215 = extractvalue { i32, i32 } %40, 1, !dbg !25
  %216 = bitcast i16 %68 to bfloat, !dbg !42
  %217 = fpext bfloat %216 to float, !dbg !91
  %218 = fmul float %.0.i2, %217, !dbg !92
  %219 = bitcast i16 %92 to bfloat, !dbg !48
  %220 = fpext bfloat %219 to float, !dbg !93
  %221 = fmul float %218, %220, !dbg !94
  %222 = fsub float 0.000000e+00, %221, !dbg !95
  %223 = bitcast i16 %101 to bfloat, !dbg !52
  %224 = fpext bfloat %223 to float, !dbg !96
  %225 = fmul float %.0.i8, %224, !dbg !97
  %226 = bitcast i16 %118 to bfloat, !dbg !58
  %227 = fpext bfloat %226 to float, !dbg !98
  %228 = fmul float %225, %227, !dbg !99
  %229 = select i1 %53, float %222, float %228, !dbg !90
  %230 = extractvalue { i32, i32 } %42, 1, !dbg !27
  %231 = extractvalue { i32, i32 } %40, 0, !dbg !25
  %232 = bitcast i16 %67 to bfloat, !dbg !42
  %233 = fpext bfloat %232 to float, !dbg !91
  %234 = fmul float %.0.i, %233, !dbg !92
  %235 = bitcast i16 %91 to bfloat, !dbg !48
  %236 = fpext bfloat %235 to float, !dbg !93
  %237 = fmul float %234, %236, !dbg !94
  %238 = fsub float 0.000000e+00, %237, !dbg !95
  %239 = extractvalue { i32, i32 } %42, 0, !dbg !27
  %240 = bitcast i32 %51 to <2 x bfloat>, !dbg !33
  %241 = bitcast i32 %44 to <2 x bfloat>, !dbg !29
  %242 = getelementptr bfloat, ptr addrspace(1) %8, i64 %24, !dbg !100
  %243 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !101
  %244 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !102
  %245 = insertelement <2 x float> %244, float %.0.i14, i64 1, !dbg !102
  %246 = fmul <2 x float> %245, %243, !dbg !102
  %247 = fpext <2 x bfloat> %214 to <2 x float>, !dbg !103
  %248 = fmul <2 x float> %246, %247, !dbg !104
  %249 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !25
  %250 = insertelement <2 x i32> %249, i32 %215, i64 1, !dbg !25
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !25
  %252 = fmul <2 x float> %248, %251, !dbg !105
  %253 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !27
  %254 = insertelement <2 x i32> %253, i32 %230, i64 1, !dbg !27
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !27
  %256 = insertelement <2 x float> poison, float %238, i64 0, !dbg !106
  %257 = insertelement <2 x float> %256, float %229, i64 1, !dbg !106
  %258 = fmul <2 x float> %257, %255, !dbg !106
  %259 = fadd <2 x float> %258, %252, !dbg !107
  %260 = fptrunc <2 x float> %259 to <2 x bfloat>, !dbg !108
  %261 = bitcast <2 x bfloat> %260 to i32, !dbg !108
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %261, ptr addrspace(1) %242) #3, !dbg !108
  %262 = getelementptr bfloat, ptr addrspace(1) %9, i64 %24, !dbg !109
  %263 = fpext <2 x bfloat> %240 to <2 x float>, !dbg !110
  %264 = fpext <2 x bfloat> %241 to <2 x float>, !dbg !111
  %265 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !112
  %266 = insertelement <2 x float> %265, float %.0.i32, i64 1, !dbg !112
  %267 = fmul <2 x float> %266, %264, !dbg !112
  %268 = fmul <2 x float> %267, %263, !dbg !113
  %269 = fmul <2 x float> %268, %251, !dbg !114
  %270 = insertelement <2 x float> poison, float %212, i64 0, !dbg !115
  %271 = insertelement <2 x float> %270, float %205, i64 1, !dbg !115
  %272 = fmul <2 x float> %271, %255, !dbg !115
  %273 = fadd <2 x float> %272, %269, !dbg !116
  %274 = fptrunc <2 x float> %273 to <2 x bfloat>, !dbg !117
  %275 = bitcast <2 x bfloat> %274 to i32, !dbg !117
  tail call void asm sideeffect "st.global.b32 [ $1 + 0 ], { $0 };", "r,l"(i32 %275, ptr addrspace(1) %262) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cka5htlgwcybbmfp5fo5rnnp6zvsmkuqgrybboel23tm5mabc2ia.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 31, scope: !6)
!17 = !DILocation(line: 27, column: 36, scope: !6)
!18 = !DILocation(line: 28, column: 31, scope: !6)
!19 = !DILocation(line: 28, column: 36, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 40, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 30, column: 31, scope: !6)
!25 = !DILocation(line: 30, column: 45, scope: !6)
!26 = !DILocation(line: 31, column: 31, scope: !6)
!27 = !DILocation(line: 31, column: 45, scope: !6)
!28 = !DILocation(line: 32, column: 31, scope: !6)
!29 = !DILocation(line: 32, column: 36, scope: !6)
!30 = !DILocation(line: 33, column: 31, scope: !6)
!31 = !DILocation(line: 33, column: 36, scope: !6)
!32 = !DILocation(line: 34, column: 31, scope: !6)
!33 = !DILocation(line: 34, column: 36, scope: !6)
!34 = !DILocation(line: 35, column: 17, scope: !6)
!35 = !DILocation(line: 39, column: 18, scope: !6)
!36 = !DILocation(line: 40, column: 43, scope: !6)
!37 = !DILocation(line: 40, column: 37, scope: !6)
!38 = !DILocation(line: 40, column: 34, scope: !6)
!39 = !DILocation(line: 40, column: 52, scope: !6)
!40 = !DILocation(line: 40, column: 48, scope: !6)
!41 = !DILocation(line: 40, column: 30, scope: !6)
!42 = !DILocation(line: 40, column: 57, scope: !6)
!43 = !DILocation(line: 42, column: 35, scope: !6)
!44 = !DILocation(line: 44, column: 19, scope: !6)
!45 = !DILocation(line: 46, column: 19, scope: !6)
!46 = !DILocation(line: 47, column: 28, scope: !6)
!47 = !DILocation(line: 50, column: 31, scope: !6)
!48 = !DILocation(line: 50, column: 49, scope: !6)
!49 = !DILocation(line: 55, column: 20, scope: !6)
!50 = !DILocation(line: 58, column: 45, scope: !6)
!51 = !DILocation(line: 58, column: 31, scope: !6)
!52 = !DILocation(line: 58, column: 54, scope: !6)
!53 = !DILocation(line: 60, column: 36, scope: !6)
!54 = !DILocation(line: 62, column: 21, scope: !6)
!55 = !DILocation(line: 64, column: 20, scope: !6)
!56 = !DILocation(line: 65, column: 28, scope: !6)
!57 = !DILocation(line: 68, column: 31, scope: !6)
!58 = !DILocation(line: 68, column: 45, scope: !6)
!59 = !DILocation(line: 76, column: 21, scope: !6)
!60 = !DILocation(line: 78, column: 20, scope: !6)
!61 = !DILocation(line: 79, column: 28, scope: !6)
!62 = !DILocation(line: 88, column: 31, scope: !6)
!63 = !DILocation(line: 88, column: 58, scope: !6)
!64 = !DILocation(line: 90, column: 36, scope: !6)
!65 = !DILocation(line: 91, column: 21, scope: !6)
!66 = !DILocation(line: 92, column: 20, scope: !6)
!67 = !DILocation(line: 93, column: 28, scope: !6)
!68 = !DILocation(line: 96, column: 31, scope: !6)
!69 = !DILocation(line: 96, column: 49, scope: !6)
!70 = !DILocation(line: 101, column: 31, scope: !6)
!71 = !DILocation(line: 101, column: 54, scope: !6)
!72 = !DILocation(line: 103, column: 36, scope: !6)
!73 = !DILocation(line: 104, column: 21, scope: !6)
!74 = !DILocation(line: 105, column: 20, scope: !6)
!75 = !DILocation(line: 106, column: 28, scope: !6)
!76 = !DILocation(line: 109, column: 31, scope: !6)
!77 = !DILocation(line: 109, column: 45, scope: !6)
!78 = !DILocation(line: 116, column: 21, scope: !6)
!79 = !DILocation(line: 117, column: 20, scope: !6)
!80 = !DILocation(line: 118, column: 28, scope: !6)
!81 = !DILocation(line: 88, column: 108, scope: !6)
!82 = !DILocation(line: 94, column: 20, scope: !6)
!83 = !DILocation(line: 96, column: 99, scope: !6)
!84 = !DILocation(line: 97, column: 20, scope: !6)
!85 = !DILocation(line: 98, column: 13, scope: !6)
!86 = !DILocation(line: 101, column: 105, scope: !6)
!87 = !DILocation(line: 107, column: 20, scope: !6)
!88 = !DILocation(line: 109, column: 96, scope: !6)
!89 = !DILocation(line: 110, column: 20, scope: !6)
!90 = !DILocation(line: 0, scope: !6)
!91 = !DILocation(line: 40, column: 107, scope: !6)
!92 = !DILocation(line: 48, column: 19, scope: !6)
!93 = !DILocation(line: 50, column: 99, scope: !6)
!94 = !DILocation(line: 51, column: 20, scope: !6)
!95 = !DILocation(line: 52, column: 13, scope: !6)
!96 = !DILocation(line: 58, column: 105, scope: !6)
!97 = !DILocation(line: 66, column: 20, scope: !6)
!98 = !DILocation(line: 68, column: 96, scope: !6)
!99 = !DILocation(line: 69, column: 20, scope: !6)
!100 = !DILocation(line: 127, column: 25, scope: !6)
!101 = !DILocation(line: 27, column: 45, scope: !6)
!102 = !DILocation(line: 80, column: 20, scope: !6)
!103 = !DILocation(line: 29, column: 75, scope: !6)
!104 = !DILocation(line: 82, column: 20, scope: !6)
!105 = !DILocation(line: 84, column: 20, scope: !6)
!106 = !DILocation(line: 85, column: 20, scope: !6)
!107 = !DILocation(line: 86, column: 20, scope: !6)
!108 = !DILocation(line: 127, column: 37, scope: !6)
!109 = !DILocation(line: 128, column: 25, scope: !6)
!110 = !DILocation(line: 34, column: 75, scope: !6)
!111 = !DILocation(line: 32, column: 45, scope: !6)
!112 = !DILocation(line: 119, column: 20, scope: !6)
!113 = !DILocation(line: 121, column: 20, scope: !6)
!114 = !DILocation(line: 123, column: 20, scope: !6)
!115 = !DILocation(line: 124, column: 20, scope: !6)
!116 = !DILocation(line: 125, column: 20, scope: !6)
!117 = !DILocation(line: 128, column: 37, scope: !6)
!118 = !DILocation(line: 128, column: 4, scope: !6)
