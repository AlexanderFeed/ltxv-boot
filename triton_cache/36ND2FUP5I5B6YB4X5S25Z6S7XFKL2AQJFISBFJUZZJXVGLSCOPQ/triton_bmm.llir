; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 32, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 32, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = or disjoint i32 %20, 32, !dbg !19
  %23 = or disjoint i32 %20, 48, !dbg !19
  %24 = lshr i32 %15, 4, !dbg !19
  %25 = and i32 %24, 7, !dbg !19
  %26 = or disjoint i32 %14, %20, !dbg !20
  %27 = or disjoint i32 %14, %21, !dbg !20
  %28 = or disjoint i32 %14, %22, !dbg !20
  %29 = or disjoint i32 %14, %23, !dbg !20
  %30 = or disjoint i32 %14, %25, !dbg !20
  %31 = or disjoint i32 %30, 8, !dbg !20
  %32 = or disjoint i32 %30, 16, !dbg !20
  %33 = or disjoint i32 %30, 24, !dbg !20
  %34 = or disjoint i32 %30, 32, !dbg !20
  %35 = or disjoint i32 %30, 40, !dbg !20
  %36 = or disjoint i32 %30, 48, !dbg !20
  %37 = or disjoint i32 %30, 56, !dbg !20
  %38 = shl nsw i32 %13, 7, !dbg !21
  %39 = shl i32 %15, 3, !dbg !22
  %40 = and i32 %39, 8, !dbg !22
  %41 = and i32 %39, 16, !dbg !22
  %42 = and i32 %39, 24, !dbg !22
  %43 = and i32 %39, 32, !dbg !22
  %44 = and i32 %39, 56, !dbg !22
  %45 = shl nuw nsw i32 %16, 3, !dbg !22
  %46 = or disjoint i32 %44, %45, !dbg !22
  %47 = or disjoint i32 %38, %20, !dbg !23
  %48 = or disjoint i32 %38, %21, !dbg !23
  %49 = or disjoint i32 %38, %22, !dbg !23
  %50 = or disjoint i32 %38, %23, !dbg !23
  %51 = or disjoint i32 %47, 64, !dbg !23
  %52 = or disjoint i32 %47, 80, !dbg !23
  %53 = or disjoint i32 %47, 96, !dbg !23
  %54 = or disjoint i32 %47, 112, !dbg !23
  %55 = or disjoint i32 %38, %46, !dbg !23
  %56 = srem i32 %26, 512, !dbg !24
  %57 = srem i32 %27, 512, !dbg !24
  %58 = srem i32 %28, 512, !dbg !24
  %59 = srem i32 %29, 512, !dbg !24
  %60 = srem i32 %47, 512, !dbg !25
  %61 = srem i32 %48, 512, !dbg !25
  %62 = srem i32 %49, 512, !dbg !25
  %63 = srem i32 %50, 512, !dbg !25
  %64 = srem i32 %51, 512, !dbg !25
  %65 = srem i32 %52, 512, !dbg !25
  %66 = srem i32 %53, 512, !dbg !25
  %67 = srem i32 %54, 512, !dbg !25
  %68 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %69 = shl nsw i32 %56, 12, !dbg !27
  %70 = shl nsw i32 %57, 12, !dbg !27
  %71 = shl nsw i32 %58, 12, !dbg !27
  %72 = shl nsw i32 %59, 12, !dbg !27
  %73 = shl i32 %68, 6, !dbg !28
  %74 = or disjoint i32 %44, %73, !dbg !29
  %75 = add i32 %74, %69, !dbg !30
  %76 = add i32 %74, %70, !dbg !30
  %77 = add i32 %74, %71, !dbg !30
  %78 = add i32 %74, %72, !dbg !30
  %79 = sext i32 %75 to i64, !dbg !31
  %80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %79, !dbg !31
  %81 = sext i32 %76 to i64, !dbg !31
  %82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %81, !dbg !31
  %83 = sext i32 %77 to i64, !dbg !31
  %84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %83, !dbg !31
  %85 = sext i32 %78 to i64, !dbg !31
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = shl nsw i32 %60, 12, !dbg !32
  %88 = shl nsw i32 %61, 12, !dbg !32
  %89 = shl nsw i32 %62, 12, !dbg !32
  %90 = shl nsw i32 %63, 12, !dbg !32
  %91 = shl nsw i32 %64, 12, !dbg !32
  %92 = shl nsw i32 %65, 12, !dbg !32
  %93 = shl nsw i32 %66, 12, !dbg !32
  %94 = shl nsw i32 %67, 12, !dbg !32
  %95 = add i32 %74, %87, !dbg !33
  %96 = add i32 %74, %88, !dbg !33
  %97 = add i32 %74, %89, !dbg !33
  %98 = add i32 %74, %90, !dbg !33
  %99 = add i32 %74, %91, !dbg !33
  %100 = add i32 %74, %92, !dbg !33
  %101 = add i32 %74, %93, !dbg !33
  %102 = add i32 %74, %94, !dbg !33
  %103 = sext i32 %95 to i64, !dbg !34
  %104 = getelementptr bfloat, ptr addrspace(1) %1, i64 %103, !dbg !34
  %105 = sext i32 %96 to i64, !dbg !34
  %106 = getelementptr bfloat, ptr addrspace(1) %1, i64 %105, !dbg !34
  %107 = sext i32 %97 to i64, !dbg !34
  %108 = getelementptr bfloat, ptr addrspace(1) %1, i64 %107, !dbg !34
  %109 = sext i32 %98 to i64, !dbg !34
  %110 = getelementptr bfloat, ptr addrspace(1) %1, i64 %109, !dbg !34
  %111 = sext i32 %99 to i64, !dbg !34
  %112 = getelementptr bfloat, ptr addrspace(1) %1, i64 %111, !dbg !34
  %113 = sext i32 %100 to i64, !dbg !34
  %114 = getelementptr bfloat, ptr addrspace(1) %1, i64 %113, !dbg !34
  %115 = sext i32 %101 to i64, !dbg !34
  %116 = getelementptr bfloat, ptr addrspace(1) %1, i64 %115, !dbg !34
  %117 = sext i32 %102 to i64, !dbg !34
  %118 = getelementptr bfloat, ptr addrspace(1) %1, i64 %117, !dbg !34
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %80) #2, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !35
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !35
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !35
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !35
  %126 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %127 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !35
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !35
  %129 = shufflevector <2 x bfloat> %128, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %82) #2, !dbg !35
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !35
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !35
  %133 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !35
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !35
  %135 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !35
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !35
  %137 = shufflevector <2 x bfloat> %136, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %138 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !35
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !35
  %140 = shufflevector <2 x bfloat> %139, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %84) #2, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !35
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !35
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !35
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !35
  %148 = shufflevector <2 x bfloat> %147, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %149 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !35
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !35
  %151 = shufflevector <2 x bfloat> %150, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %86) #2, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !35
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !35
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !35
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !35
  %159 = shufflevector <2 x bfloat> %158, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %160 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !35
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !35
  %162 = shufflevector <2 x bfloat> %161, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !35
  %163 = xor i32 %44, %and.ra, !dbg !35
  %164 = xor i32 %163, %18, !dbg !35
  %165 = shl nuw nsw i32 %20, 6, !dbg !35
  %166 = or disjoint i32 %164, %165, !dbg !35
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %166, !dbg !35
  %168 = shufflevector <2 x bfloat> %121, <2 x bfloat> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %169 = shufflevector <8 x bfloat> %168, <8 x bfloat> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %170 = shufflevector <8 x bfloat> %169, <8 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %170, ptr addrspace(3) %167, align 16, !dbg !35
  %171 = or disjoint i32 %166, 1024, !dbg !35
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %171, !dbg !35
  %173 = shufflevector <2 x bfloat> %132, <2 x bfloat> %134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %174 = shufflevector <8 x bfloat> %173, <8 x bfloat> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %175 = shufflevector <8 x bfloat> %174, <8 x bfloat> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %175, ptr addrspace(3) %172, align 16, !dbg !35
  %176 = or disjoint i32 %166, 2048, !dbg !35
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %176, !dbg !35
  %178 = shufflevector <2 x bfloat> %143, <2 x bfloat> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %179 = shufflevector <8 x bfloat> %178, <8 x bfloat> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %180 = shufflevector <8 x bfloat> %179, <8 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %180, ptr addrspace(3) %177, align 16, !dbg !35
  %181 = or disjoint i32 %166, 3072, !dbg !35
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %181, !dbg !35
  %183 = shufflevector <2 x bfloat> %154, <2 x bfloat> %156, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %184 = shufflevector <8 x bfloat> %183, <8 x bfloat> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %185 = shufflevector <8 x bfloat> %184, <8 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %185, ptr addrspace(3) %182, align 16, !dbg !35
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %104) #2, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !36
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !36
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !36
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !36
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !36
  %193 = shufflevector <2 x bfloat> %192, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %194 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !36
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !36
  %196 = shufflevector <2 x bfloat> %195, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %106) #2, !dbg !36
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !36
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !36
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !36
  %202 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !36
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !36
  %204 = shufflevector <2 x bfloat> %203, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %205 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !36
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !36
  %207 = shufflevector <2 x bfloat> %206, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %108) #2, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !36
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !36
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !36
  %214 = bitcast i32 %213 to <2 x bfloat>, !dbg !36
  %215 = shufflevector <2 x bfloat> %214, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %216 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !36
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !36
  %218 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %110) #2, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !36
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !36
  %222 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !36
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !36
  %224 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !36
  %225 = bitcast i32 %224 to <2 x bfloat>, !dbg !36
  %226 = shufflevector <2 x bfloat> %225, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %227 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !36
  %228 = bitcast i32 %227 to <2 x bfloat>, !dbg !36
  %229 = shufflevector <2 x bfloat> %228, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %112) #2, !dbg !36
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !36
  %232 = bitcast i32 %231 to <2 x bfloat>, !dbg !36
  %233 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !36
  %234 = bitcast i32 %233 to <2 x bfloat>, !dbg !36
  %235 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !36
  %236 = bitcast i32 %235 to <2 x bfloat>, !dbg !36
  %237 = shufflevector <2 x bfloat> %236, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %238 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !36
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !36
  %240 = shufflevector <2 x bfloat> %239, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %114) #2, !dbg !36
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !36
  %243 = bitcast i32 %242 to <2 x bfloat>, !dbg !36
  %244 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !36
  %245 = bitcast i32 %244 to <2 x bfloat>, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !36
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !36
  %248 = shufflevector <2 x bfloat> %247, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %249 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !36
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !36
  %251 = shufflevector <2 x bfloat> %250, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %116) #2, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !36
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !36
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !36
  %257 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !36
  %258 = bitcast i32 %257 to <2 x bfloat>, !dbg !36
  %259 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %260 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !36
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !36
  %262 = shufflevector <2 x bfloat> %261, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %118) #2, !dbg !36
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !36
  %265 = bitcast i32 %264 to <2 x bfloat>, !dbg !36
  %266 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !36
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !36
  %268 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !36
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !36
  %270 = shufflevector <2 x bfloat> %269, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %271 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !36
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !36
  %273 = shufflevector <2 x bfloat> %272, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %166, !dbg !36
  %275 = shufflevector <2 x bfloat> %188, <2 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %276 = shufflevector <8 x bfloat> %275, <8 x bfloat> %193, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %277 = shufflevector <8 x bfloat> %276, <8 x bfloat> %196, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %277, ptr addrspace(3) %274, align 16, !dbg !36
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %171, !dbg !36
  %279 = shufflevector <2 x bfloat> %199, <2 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %280 = shufflevector <8 x bfloat> %279, <8 x bfloat> %204, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %281 = shufflevector <8 x bfloat> %280, <8 x bfloat> %207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %281, ptr addrspace(3) %278, align 16, !dbg !36
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %176, !dbg !36
  %283 = shufflevector <2 x bfloat> %210, <2 x bfloat> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %284 = shufflevector <8 x bfloat> %283, <8 x bfloat> %215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %285 = shufflevector <8 x bfloat> %284, <8 x bfloat> %218, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %285, ptr addrspace(3) %282, align 16, !dbg !36
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %181, !dbg !36
  %287 = shufflevector <2 x bfloat> %221, <2 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %288 = shufflevector <8 x bfloat> %287, <8 x bfloat> %226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %289 = shufflevector <8 x bfloat> %288, <8 x bfloat> %229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %289, ptr addrspace(3) %286, align 16, !dbg !36
  %290 = or disjoint i32 %165, 4096, !dbg !36
  %291 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %164, !dbg !36
  %292 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %291, i32 %290, !dbg !36
  %293 = shufflevector <2 x bfloat> %232, <2 x bfloat> %234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %294 = shufflevector <8 x bfloat> %293, <8 x bfloat> %237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %295 = shufflevector <8 x bfloat> %294, <8 x bfloat> %240, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %295, ptr addrspace(3) %292, align 16, !dbg !36
  %296 = or disjoint i32 %165, 5120, !dbg !36
  %297 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %291, i32 %296, !dbg !36
  %298 = shufflevector <2 x bfloat> %243, <2 x bfloat> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %299 = shufflevector <8 x bfloat> %298, <8 x bfloat> %248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %300 = shufflevector <8 x bfloat> %299, <8 x bfloat> %251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %300, ptr addrspace(3) %297, align 16, !dbg !36
  %301 = or disjoint i32 %165, 6144, !dbg !36
  %302 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %291, i32 %301, !dbg !36
  %303 = shufflevector <2 x bfloat> %254, <2 x bfloat> %256, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %304 = shufflevector <8 x bfloat> %303, <8 x bfloat> %259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %305 = shufflevector <8 x bfloat> %304, <8 x bfloat> %262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %305, ptr addrspace(3) %302, align 16, !dbg !36
  %306 = or disjoint i32 %165, 7168, !dbg !36
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %291, i32 %306, !dbg !36
  %308 = shufflevector <2 x bfloat> %265, <2 x bfloat> %267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %309 = shufflevector <8 x bfloat> %308, <8 x bfloat> %270, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %310 = shufflevector <8 x bfloat> %309, <8 x bfloat> %273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %310, ptr addrspace(3) %307, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %311 = and i32 %15, 7, !dbg !35
  %312 = lshr exact i32 %17, 1, !dbg !35
  %313 = xor i32 %44, %312, !dbg !35
  %314 = shl i32 %15, 6, !dbg !35
  %315 = and i32 %314, 960, !dbg !35
  %316 = or disjoint i32 %313, %315, !dbg !35
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %316, !dbg !35
  %318 = ptrtoint ptr addrspace(3) %317 to i32, !dbg !35
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #2, !dbg !35
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !35
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !35
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !35
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !35
  %324 = or disjoint i32 %40, 16, !dbg !35
  %325 = xor i32 %324, %41, !dbg !35
  %326 = or disjoint i32 %325, %43, !dbg !35
  %327 = xor i32 %326, %312, !dbg !35
  %328 = or disjoint i32 %327, %315, !dbg !35
  %329 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %328, !dbg !35
  %330 = ptrtoint ptr addrspace(3) %329 to i32, !dbg !35
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %330) #2, !dbg !35
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !35
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !35
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !35
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !35
  %336 = or disjoint i32 %42, 32, !dbg !35
  %337 = xor i32 %336, %43, !dbg !35
  %338 = xor i32 %337, %312, !dbg !35
  %339 = or disjoint i32 %338, %315, !dbg !35
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %339, !dbg !35
  %341 = ptrtoint ptr addrspace(3) %340 to i32, !dbg !35
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %341) #2, !dbg !35
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !35
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !35
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !35
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !35
  %347 = or disjoint i32 %40, 48, !dbg !35
  %and.ra162 = and i32 %39, 48, !dbg !35
  %348 = or disjoint i32 %312, %and.ra162, !dbg !35
  %349 = xor i32 %348, %347, !dbg !35
  %350 = or disjoint i32 %349, %315, !dbg !35
  %351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %350, !dbg !35
  %352 = ptrtoint ptr addrspace(3) %351 to i32, !dbg !35
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %352) #2, !dbg !35
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !35
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !35
  %358 = or disjoint i32 %315, 1024, !dbg !35
  %359 = or disjoint i32 %313, %358, !dbg !35
  %360 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %359, !dbg !35
  %361 = ptrtoint ptr addrspace(3) %360 to i32, !dbg !35
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %361) #2, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !35
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !35
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !35
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !35
  %367 = or disjoint i32 %327, %358, !dbg !35
  %368 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %367, !dbg !35
  %369 = ptrtoint ptr addrspace(3) %368 to i32, !dbg !35
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %369) #2, !dbg !35
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !35
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !35
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !35
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !35
  %375 = or disjoint i32 %338, %358, !dbg !35
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %375, !dbg !35
  %377 = ptrtoint ptr addrspace(3) %376 to i32, !dbg !35
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %377) #2, !dbg !35
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !35
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !35
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !35
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !35
  %383 = or disjoint i32 %349, %358, !dbg !35
  %384 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %383, !dbg !35
  %385 = ptrtoint ptr addrspace(3) %384 to i32, !dbg !35
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %385) #2, !dbg !35
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !35
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !35
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !35
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !35
  %391 = or disjoint i32 %311, 32, !dbg !35
  %392 = or disjoint i32 %391, %16, !dbg !35
  %393 = shl nuw nsw i32 %392, 6, !dbg !35
  %394 = or disjoint i32 %393, %313, !dbg !35
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %394, !dbg !35
  %396 = ptrtoint ptr addrspace(3) %395 to i32, !dbg !35
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #2, !dbg !35
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !35
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !35
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !35
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !35
  %402 = or disjoint i32 %327, %393, !dbg !35
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %402, !dbg !35
  %404 = ptrtoint ptr addrspace(3) %403 to i32, !dbg !35
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #2, !dbg !35
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !35
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !35
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !35
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !35
  %410 = or disjoint i32 %338, %393, !dbg !35
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %410, !dbg !35
  %412 = ptrtoint ptr addrspace(3) %411 to i32, !dbg !35
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %412) #2, !dbg !35
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !35
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !35
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !35
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !35
  %418 = or disjoint i32 %349, %393, !dbg !35
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %418, !dbg !35
  %420 = ptrtoint ptr addrspace(3) %419 to i32, !dbg !35
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %420) #2, !dbg !35
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !35
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !35
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !35
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !35
  %426 = or disjoint i32 %315, 3072, !dbg !35
  %427 = or disjoint i32 %313, %426, !dbg !35
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %427, !dbg !35
  %429 = ptrtoint ptr addrspace(3) %428 to i32, !dbg !35
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %429) #2, !dbg !35
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !35
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !35
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !35
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !35
  %435 = or disjoint i32 %327, %426, !dbg !35
  %436 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %435, !dbg !35
  %437 = ptrtoint ptr addrspace(3) %436 to i32, !dbg !35
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %437) #2, !dbg !35
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !35
  %440 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !35
  %441 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !35
  %442 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !35
  %443 = or disjoint i32 %338, %426, !dbg !35
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %443, !dbg !35
  %445 = ptrtoint ptr addrspace(3) %444 to i32, !dbg !35
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #2, !dbg !35
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !35
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !35
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !35
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !35
  %451 = or disjoint i32 %349, %426, !dbg !35
  %452 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %451, !dbg !35
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !35
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #2, !dbg !35
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !35
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !35
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !35
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !35
  %459 = lshr i32 %15, 2, !dbg !36
  %460 = and i32 %459, 24, !dbg !36
  %461 = or disjoint i32 %460, %311, !dbg !36
  %462 = shl nuw nsw i32 %461, 6, !dbg !36
  %463 = or disjoint i32 %462, %163, !dbg !36
  %464 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %463, !dbg !36
  %465 = ptrtoint ptr addrspace(3) %464 to i32, !dbg !36
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %465) #2, !dbg !36
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !36
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !36
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !36
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !36
  %471 = xor i32 %337, %and.ra, !dbg !36
  %472 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %471, !dbg !36
  %473 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %472, i32 %462, !dbg !36
  %474 = ptrtoint ptr addrspace(3) %473 to i32, !dbg !36
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %474) #2, !dbg !36
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !36
  %477 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !36
  %478 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !36
  %479 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !36
  %480 = or disjoint i32 %460, %391, !dbg !36
  %481 = shl nuw nsw i32 %480, 6, !dbg !36
  %482 = or disjoint i32 %481, %163, !dbg !36
  %483 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %482, !dbg !36
  %484 = ptrtoint ptr addrspace(3) %483 to i32, !dbg !36
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #2, !dbg !36
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !36
  %487 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !36
  %488 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !36
  %489 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !36
  %490 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %472, i32 %481, !dbg !36
  %491 = ptrtoint ptr addrspace(3) %490 to i32, !dbg !36
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %491) #2, !dbg !36
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !36
  %494 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !36
  %495 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !36
  %496 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !36
  %497 = or disjoint i32 %462, 4096, !dbg !36
  %498 = or disjoint i32 %497, %163, !dbg !36
  %499 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %498, !dbg !36
  %500 = ptrtoint ptr addrspace(3) %499 to i32, !dbg !36
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %500) #2, !dbg !36
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !36
  %503 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !36
  %504 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !36
  %505 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !36
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %472, i32 %497, !dbg !36
  %507 = ptrtoint ptr addrspace(3) %506 to i32, !dbg !36
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %507) #2, !dbg !36
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !36
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !36
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !36
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !36
  %513 = or disjoint i32 %462, 6144, !dbg !36
  %514 = or disjoint i32 %513, %163, !dbg !36
  %515 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %514, !dbg !36
  %516 = ptrtoint ptr addrspace(3) %515 to i32, !dbg !36
  %517 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %516) #2, !dbg !36
  %518 = extractvalue { i32, i32, i32, i32 } %517, 0, !dbg !36
  %519 = extractvalue { i32, i32, i32, i32 } %517, 1, !dbg !36
  %520 = extractvalue { i32, i32, i32, i32 } %517, 2, !dbg !36
  %521 = extractvalue { i32, i32, i32, i32 } %517, 3, !dbg !36
  %522 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %472, i32 %513, !dbg !36
  %523 = ptrtoint ptr addrspace(3) %522 to i32, !dbg !36
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %523) #2, !dbg !36
  %525 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !36
  %526 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !36
  %527 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !36
  %528 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !36
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %320, i32 %321, i32 %322, i32 %323, i32 %467, i32 %468) #2, !dbg !37
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !37
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !37
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !37
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !37
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %320, i32 %321, i32 %322, i32 %323, i32 %486, i32 %487) #2, !dbg !37
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !37
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !37
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !37
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !37
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %320, i32 %321, i32 %322, i32 %323, i32 %502, i32 %503) #2, !dbg !37
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !37
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !37
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !37
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !37
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %320, i32 %321, i32 %322, i32 %323, i32 %518, i32 %519) #2, !dbg !37
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !37
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !37
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !37
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !37
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %363, i32 %364, i32 %365, i32 %366, i32 %467, i32 %468) #2, !dbg !37
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !37
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !37
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !37
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !37
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %363, i32 %364, i32 %365, i32 %366, i32 %486, i32 %487) #2, !dbg !37
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !37
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !37
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !37
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !37
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %363, i32 %364, i32 %365, i32 %366, i32 %502, i32 %503) #2, !dbg !37
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !37
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !37
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !37
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !37
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %363, i32 %364, i32 %365, i32 %366, i32 %518, i32 %519) #2, !dbg !37
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !37
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !37
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !37
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !37
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %398, i32 %399, i32 %400, i32 %401, i32 %467, i32 %468) #2, !dbg !37
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !37
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !37
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !37
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !37
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %398, i32 %399, i32 %400, i32 %401, i32 %486, i32 %487) #2, !dbg !37
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !37
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !37
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !37
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !37
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %398, i32 %399, i32 %400, i32 %401, i32 %502, i32 %503) #2, !dbg !37
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !37
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !37
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !37
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !37
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %398, i32 %399, i32 %400, i32 %401, i32 %518, i32 %519) #2, !dbg !37
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !37
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !37
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !37
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !37
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %431, i32 %432, i32 %433, i32 %434, i32 %467, i32 %468) #2, !dbg !37
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !37
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !37
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !37
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !37
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %431, i32 %432, i32 %433, i32 %434, i32 %486, i32 %487) #2, !dbg !37
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !37
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !37
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !37
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !37
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %431, i32 %432, i32 %433, i32 %434, i32 %502, i32 %503) #2, !dbg !37
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !37
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !37
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !37
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !37
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %431, i32 %432, i32 %433, i32 %434, i32 %518, i32 %519) #2, !dbg !37
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !37
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !37
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !37
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !37
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %332, i32 %333, i32 %334, i32 %335, i32 %469, i32 %470) #2, !dbg !37
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !37
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !37
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !37
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !37
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %332, i32 %333, i32 %334, i32 %335, i32 %488, i32 %489) #2, !dbg !37
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !37
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !37
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !37
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !37
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %332, i32 %333, i32 %334, i32 %335, i32 %504, i32 %505) #2, !dbg !37
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !37
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !37
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !37
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !37
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %332, i32 %333, i32 %334, i32 %335, i32 %520, i32 %521) #2, !dbg !37
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !37
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !37
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !37
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !37
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %371, i32 %372, i32 %373, i32 %374, i32 %469, i32 %470) #2, !dbg !37
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !37
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !37
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !37
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !37
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %371, i32 %372, i32 %373, i32 %374, i32 %488, i32 %489) #2, !dbg !37
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !37
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !37
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !37
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !37
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %371, i32 %372, i32 %373, i32 %374, i32 %504, i32 %505) #2, !dbg !37
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !37
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !37
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !37
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !37
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %371, i32 %372, i32 %373, i32 %374, i32 %520, i32 %521) #2, !dbg !37
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !37
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !37
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !37
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !37
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %406, i32 %407, i32 %408, i32 %409, i32 %469, i32 %470) #2, !dbg !37
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !37
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !37
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !37
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !37
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %406, i32 %407, i32 %408, i32 %409, i32 %488, i32 %489) #2, !dbg !37
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !37
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !37
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !37
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !37
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %406, i32 %407, i32 %408, i32 %409, i32 %504, i32 %505) #2, !dbg !37
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !37
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !37
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !37
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !37
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %406, i32 %407, i32 %408, i32 %409, i32 %520, i32 %521) #2, !dbg !37
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !37
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !37
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !37
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !37
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %439, i32 %440, i32 %441, i32 %442, i32 %469, i32 %470) #2, !dbg !37
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !37
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !37
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !37
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !37
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %439, i32 %440, i32 %441, i32 %442, i32 %488, i32 %489) #2, !dbg !37
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !37
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !37
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !37
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !37
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %439, i32 %440, i32 %441, i32 %442, i32 %504, i32 %505) #2, !dbg !37
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !37
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !37
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !37
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !37
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %439, i32 %440, i32 %441, i32 %442, i32 %520, i32 %521) #2, !dbg !37
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !37
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !37
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !37
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !37
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %343, i32 %344, i32 %345, i32 %346, i32 %476, i32 %477) #2, !dbg !37
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !37
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !37
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !37
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !37
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %343, i32 %344, i32 %345, i32 %346, i32 %493, i32 %494) #2, !dbg !37
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !37
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !37
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !37
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !37
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %343, i32 %344, i32 %345, i32 %346, i32 %509, i32 %510) #2, !dbg !37
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !37
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !37
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !37
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !37
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %343, i32 %344, i32 %345, i32 %346, i32 %525, i32 %526) #2, !dbg !37
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !37
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !37
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !37
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !37
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %379, i32 %380, i32 %381, i32 %382, i32 %476, i32 %477) #2, !dbg !37
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !37
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !37
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !37
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !37
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %379, i32 %380, i32 %381, i32 %382, i32 %493, i32 %494) #2, !dbg !37
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !37
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !37
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !37
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !37
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %379, i32 %380, i32 %381, i32 %382, i32 %509, i32 %510) #2, !dbg !37
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !37
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !37
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !37
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !37
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %379, i32 %380, i32 %381, i32 %382, i32 %525, i32 %526) #2, !dbg !37
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !37
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !37
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !37
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !37
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %414, i32 %415, i32 %416, i32 %417, i32 %476, i32 %477) #2, !dbg !37
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !37
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !37
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !37
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !37
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %414, i32 %415, i32 %416, i32 %417, i32 %493, i32 %494) #2, !dbg !37
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !37
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !37
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !37
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !37
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %414, i32 %415, i32 %416, i32 %417, i32 %509, i32 %510) #2, !dbg !37
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !37
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !37
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !37
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !37
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %414, i32 %415, i32 %416, i32 %417, i32 %525, i32 %526) #2, !dbg !37
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !37
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !37
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !37
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !37
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %447, i32 %448, i32 %449, i32 %450, i32 %476, i32 %477) #2, !dbg !37
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !37
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !37
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !37
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !37
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %675, float %676, float %677, float %678, i32 %447, i32 %448, i32 %449, i32 %450, i32 %493, i32 %494) #2, !dbg !37
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !37
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !37
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !37
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !37
  %759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %680, float %681, float %682, float %683, i32 %447, i32 %448, i32 %449, i32 %450, i32 %509, i32 %510) #2, !dbg !37
  %760 = extractvalue { float, float, float, float } %759, 0, !dbg !37
  %761 = extractvalue { float, float, float, float } %759, 1, !dbg !37
  %762 = extractvalue { float, float, float, float } %759, 2, !dbg !37
  %763 = extractvalue { float, float, float, float } %759, 3, !dbg !37
  %764 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %685, float %686, float %687, float %688, i32 %447, i32 %448, i32 %449, i32 %450, i32 %525, i32 %526) #2, !dbg !37
  %765 = extractvalue { float, float, float, float } %764, 0, !dbg !37
  %766 = extractvalue { float, float, float, float } %764, 1, !dbg !37
  %767 = extractvalue { float, float, float, float } %764, 2, !dbg !37
  %768 = extractvalue { float, float, float, float } %764, 3, !dbg !37
  %769 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %690, float %691, float %692, float %693, i32 %354, i32 %355, i32 %356, i32 %357, i32 %478, i32 %479) #2, !dbg !37
  %770 = extractvalue { float, float, float, float } %769, 0, !dbg !37
  %771 = extractvalue { float, float, float, float } %769, 1, !dbg !37
  %772 = extractvalue { float, float, float, float } %769, 2, !dbg !37
  %773 = extractvalue { float, float, float, float } %769, 3, !dbg !37
  %774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %695, float %696, float %697, float %698, i32 %354, i32 %355, i32 %356, i32 %357, i32 %495, i32 %496) #2, !dbg !37
  %775 = extractvalue { float, float, float, float } %774, 0, !dbg !37
  %776 = extractvalue { float, float, float, float } %774, 1, !dbg !37
  %777 = extractvalue { float, float, float, float } %774, 2, !dbg !37
  %778 = extractvalue { float, float, float, float } %774, 3, !dbg !37
  %779 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %700, float %701, float %702, float %703, i32 %354, i32 %355, i32 %356, i32 %357, i32 %511, i32 %512) #2, !dbg !37
  %780 = extractvalue { float, float, float, float } %779, 0, !dbg !37
  %781 = extractvalue { float, float, float, float } %779, 1, !dbg !37
  %782 = extractvalue { float, float, float, float } %779, 2, !dbg !37
  %783 = extractvalue { float, float, float, float } %779, 3, !dbg !37
  %784 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %705, float %706, float %707, float %708, i32 %354, i32 %355, i32 %356, i32 %357, i32 %527, i32 %528) #2, !dbg !37
  %785 = extractvalue { float, float, float, float } %784, 0, !dbg !37
  %786 = extractvalue { float, float, float, float } %784, 1, !dbg !37
  %787 = extractvalue { float, float, float, float } %784, 2, !dbg !37
  %788 = extractvalue { float, float, float, float } %784, 3, !dbg !37
  %789 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %710, float %711, float %712, float %713, i32 %387, i32 %388, i32 %389, i32 %390, i32 %478, i32 %479) #2, !dbg !37
  %790 = extractvalue { float, float, float, float } %789, 0, !dbg !37
  %791 = extractvalue { float, float, float, float } %789, 1, !dbg !37
  %792 = extractvalue { float, float, float, float } %789, 2, !dbg !37
  %793 = extractvalue { float, float, float, float } %789, 3, !dbg !37
  %794 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %715, float %716, float %717, float %718, i32 %387, i32 %388, i32 %389, i32 %390, i32 %495, i32 %496) #2, !dbg !37
  %795 = extractvalue { float, float, float, float } %794, 0, !dbg !37
  %796 = extractvalue { float, float, float, float } %794, 1, !dbg !37
  %797 = extractvalue { float, float, float, float } %794, 2, !dbg !37
  %798 = extractvalue { float, float, float, float } %794, 3, !dbg !37
  %799 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %720, float %721, float %722, float %723, i32 %387, i32 %388, i32 %389, i32 %390, i32 %511, i32 %512) #2, !dbg !37
  %800 = extractvalue { float, float, float, float } %799, 0, !dbg !37
  %801 = extractvalue { float, float, float, float } %799, 1, !dbg !37
  %802 = extractvalue { float, float, float, float } %799, 2, !dbg !37
  %803 = extractvalue { float, float, float, float } %799, 3, !dbg !37
  %804 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %725, float %726, float %727, float %728, i32 %387, i32 %388, i32 %389, i32 %390, i32 %527, i32 %528) #2, !dbg !37
  %805 = extractvalue { float, float, float, float } %804, 0, !dbg !37
  %806 = extractvalue { float, float, float, float } %804, 1, !dbg !37
  %807 = extractvalue { float, float, float, float } %804, 2, !dbg !37
  %808 = extractvalue { float, float, float, float } %804, 3, !dbg !37
  %809 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %730, float %731, float %732, float %733, i32 %422, i32 %423, i32 %424, i32 %425, i32 %478, i32 %479) #2, !dbg !37
  %810 = extractvalue { float, float, float, float } %809, 0, !dbg !37
  %811 = extractvalue { float, float, float, float } %809, 1, !dbg !37
  %812 = extractvalue { float, float, float, float } %809, 2, !dbg !37
  %813 = extractvalue { float, float, float, float } %809, 3, !dbg !37
  %814 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %735, float %736, float %737, float %738, i32 %422, i32 %423, i32 %424, i32 %425, i32 %495, i32 %496) #2, !dbg !37
  %815 = extractvalue { float, float, float, float } %814, 0, !dbg !37
  %816 = extractvalue { float, float, float, float } %814, 1, !dbg !37
  %817 = extractvalue { float, float, float, float } %814, 2, !dbg !37
  %818 = extractvalue { float, float, float, float } %814, 3, !dbg !37
  %819 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %740, float %741, float %742, float %743, i32 %422, i32 %423, i32 %424, i32 %425, i32 %511, i32 %512) #2, !dbg !37
  %820 = extractvalue { float, float, float, float } %819, 0, !dbg !37
  %821 = extractvalue { float, float, float, float } %819, 1, !dbg !37
  %822 = extractvalue { float, float, float, float } %819, 2, !dbg !37
  %823 = extractvalue { float, float, float, float } %819, 3, !dbg !37
  %824 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %745, float %746, float %747, float %748, i32 %422, i32 %423, i32 %424, i32 %425, i32 %527, i32 %528) #2, !dbg !37
  %825 = extractvalue { float, float, float, float } %824, 0, !dbg !37
  %826 = extractvalue { float, float, float, float } %824, 1, !dbg !37
  %827 = extractvalue { float, float, float, float } %824, 2, !dbg !37
  %828 = extractvalue { float, float, float, float } %824, 3, !dbg !37
  %829 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %750, float %751, float %752, float %753, i32 %455, i32 %456, i32 %457, i32 %458, i32 %478, i32 %479) #2, !dbg !37
  %830 = extractvalue { float, float, float, float } %829, 0, !dbg !37
  %831 = extractvalue { float, float, float, float } %829, 1, !dbg !37
  %832 = extractvalue { float, float, float, float } %829, 2, !dbg !37
  %833 = extractvalue { float, float, float, float } %829, 3, !dbg !37
  %834 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %755, float %756, float %757, float %758, i32 %455, i32 %456, i32 %457, i32 %458, i32 %495, i32 %496) #2, !dbg !37
  %835 = extractvalue { float, float, float, float } %834, 0, !dbg !37
  %836 = extractvalue { float, float, float, float } %834, 1, !dbg !37
  %837 = extractvalue { float, float, float, float } %834, 2, !dbg !37
  %838 = extractvalue { float, float, float, float } %834, 3, !dbg !37
  %839 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %760, float %761, float %762, float %763, i32 %455, i32 %456, i32 %457, i32 %458, i32 %511, i32 %512) #2, !dbg !37
  %840 = extractvalue { float, float, float, float } %839, 0, !dbg !37
  %841 = extractvalue { float, float, float, float } %839, 1, !dbg !37
  %842 = extractvalue { float, float, float, float } %839, 2, !dbg !37
  %843 = extractvalue { float, float, float, float } %839, 3, !dbg !37
  %844 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %765, float %766, float %767, float %768, i32 %455, i32 %456, i32 %457, i32 %458, i32 %527, i32 %528) #2, !dbg !37
  %845 = extractvalue { float, float, float, float } %844, 0, !dbg !37
  %846 = extractvalue { float, float, float, float } %844, 1, !dbg !37
  %847 = extractvalue { float, float, float, float } %844, 2, !dbg !37
  %848 = extractvalue { float, float, float, float } %844, 3, !dbg !37
  %849 = icmp slt i32 %30, 512, !dbg !38
  %850 = icmp slt i32 %31, 512, !dbg !38
  %851 = icmp slt i32 %32, 512, !dbg !38
  %852 = icmp slt i32 %33, 512, !dbg !38
  %853 = icmp slt i32 %34, 512, !dbg !38
  %854 = icmp slt i32 %35, 512, !dbg !38
  %855 = icmp slt i32 %36, 512, !dbg !38
  %856 = icmp slt i32 %37, 512, !dbg !38
  %857 = icmp slt i32 %55, 512, !dbg !39
  %858 = and i1 %849, %857, !dbg !40
  %859 = and i1 %850, %857, !dbg !40
  %860 = and i1 %851, %857, !dbg !40
  %861 = and i1 %852, %857, !dbg !40
  %862 = and i1 %853, %857, !dbg !40
  %863 = and i1 %854, %857, !dbg !40
  %864 = and i1 %855, %857, !dbg !40
  %865 = and i1 %856, %857, !dbg !40
  %866 = shl i32 %30, 9, !dbg !41
  %867 = shl i32 %31, 9, !dbg !41
  %868 = shl i32 %32, 9, !dbg !41
  %869 = shl i32 %33, 9, !dbg !41
  %870 = shl i32 %34, 9, !dbg !41
  %871 = shl i32 %35, 9, !dbg !41
  %872 = shl i32 %36, 9, !dbg !41
  %873 = shl i32 %37, 9, !dbg !41
  %874 = shl i32 %68, 18, !dbg !42
  %875 = add i32 %55, %874, !dbg !43
  %876 = add i32 %875, %866, !dbg !44
  %877 = add i32 %867, %874, !dbg !43
  %878 = add i32 %877, %55, !dbg !44
  %879 = add i32 %868, %874, !dbg !43
  %880 = add i32 %879, %55, !dbg !44
  %881 = add i32 %869, %874, !dbg !43
  %882 = add i32 %881, %55, !dbg !44
  %883 = add i32 %870, %874, !dbg !43
  %884 = add i32 %883, %55, !dbg !44
  %885 = add i32 %871, %874, !dbg !43
  %886 = add i32 %885, %55, !dbg !44
  %887 = add i32 %872, %874, !dbg !43
  %888 = add i32 %887, %55, !dbg !44
  %889 = add i32 %873, %874, !dbg !43
  %890 = add i32 %889, %55, !dbg !44
  %891 = sext i32 %876 to i64, !dbg !45
  %892 = getelementptr bfloat, ptr addrspace(1) %2, i64 %891, !dbg !45
  %893 = sext i32 %878 to i64, !dbg !45
  %894 = getelementptr bfloat, ptr addrspace(1) %2, i64 %893, !dbg !45
  %895 = sext i32 %880 to i64, !dbg !45
  %896 = getelementptr bfloat, ptr addrspace(1) %2, i64 %895, !dbg !45
  %897 = sext i32 %882 to i64, !dbg !45
  %898 = getelementptr bfloat, ptr addrspace(1) %2, i64 %897, !dbg !45
  %899 = sext i32 %884 to i64, !dbg !45
  %900 = getelementptr bfloat, ptr addrspace(1) %2, i64 %899, !dbg !45
  %901 = sext i32 %886 to i64, !dbg !45
  %902 = getelementptr bfloat, ptr addrspace(1) %2, i64 %901, !dbg !45
  %903 = sext i32 %888 to i64, !dbg !45
  %904 = getelementptr bfloat, ptr addrspace(1) %2, i64 %903, !dbg !45
  %905 = sext i32 %890 to i64, !dbg !45
  %906 = getelementptr bfloat, ptr addrspace(1) %2, i64 %905, !dbg !45
  %907 = fptrunc float %770 to bfloat, !dbg !46
  %908 = fptrunc float %771 to bfloat, !dbg !46
  %909 = fptrunc float %772 to bfloat, !dbg !46
  %910 = fptrunc float %773 to bfloat, !dbg !46
  %911 = fptrunc float %775 to bfloat, !dbg !46
  %912 = fptrunc float %776 to bfloat, !dbg !46
  %913 = fptrunc float %777 to bfloat, !dbg !46
  %914 = fptrunc float %778 to bfloat, !dbg !46
  %915 = fptrunc float %780 to bfloat, !dbg !46
  %916 = fptrunc float %781 to bfloat, !dbg !46
  %917 = fptrunc float %782 to bfloat, !dbg !46
  %918 = fptrunc float %783 to bfloat, !dbg !46
  %919 = fptrunc float %785 to bfloat, !dbg !46
  %920 = fptrunc float %786 to bfloat, !dbg !46
  %921 = fptrunc float %787 to bfloat, !dbg !46
  %922 = fptrunc float %788 to bfloat, !dbg !46
  %923 = fptrunc float %790 to bfloat, !dbg !46
  %924 = fptrunc float %791 to bfloat, !dbg !46
  %925 = fptrunc float %792 to bfloat, !dbg !46
  %926 = fptrunc float %793 to bfloat, !dbg !46
  %927 = fptrunc float %795 to bfloat, !dbg !46
  %928 = fptrunc float %796 to bfloat, !dbg !46
  %929 = fptrunc float %797 to bfloat, !dbg !46
  %930 = fptrunc float %798 to bfloat, !dbg !46
  %931 = fptrunc float %800 to bfloat, !dbg !46
  %932 = fptrunc float %801 to bfloat, !dbg !46
  %933 = fptrunc float %802 to bfloat, !dbg !46
  %934 = fptrunc float %803 to bfloat, !dbg !46
  %935 = fptrunc float %805 to bfloat, !dbg !46
  %936 = fptrunc float %806 to bfloat, !dbg !46
  %937 = fptrunc float %807 to bfloat, !dbg !46
  %938 = fptrunc float %808 to bfloat, !dbg !46
  %939 = fptrunc float %810 to bfloat, !dbg !46
  %940 = fptrunc float %811 to bfloat, !dbg !46
  %941 = fptrunc float %812 to bfloat, !dbg !46
  %942 = fptrunc float %813 to bfloat, !dbg !46
  %943 = fptrunc float %815 to bfloat, !dbg !46
  %944 = fptrunc float %816 to bfloat, !dbg !46
  %945 = fptrunc float %817 to bfloat, !dbg !46
  %946 = fptrunc float %818 to bfloat, !dbg !46
  %947 = fptrunc float %820 to bfloat, !dbg !46
  %948 = fptrunc float %821 to bfloat, !dbg !46
  %949 = fptrunc float %822 to bfloat, !dbg !46
  %950 = fptrunc float %823 to bfloat, !dbg !46
  %951 = fptrunc float %825 to bfloat, !dbg !46
  %952 = fptrunc float %826 to bfloat, !dbg !46
  %953 = fptrunc float %827 to bfloat, !dbg !46
  %954 = fptrunc float %828 to bfloat, !dbg !46
  %955 = fptrunc float %830 to bfloat, !dbg !46
  %956 = fptrunc float %831 to bfloat, !dbg !46
  %957 = fptrunc float %832 to bfloat, !dbg !46
  %958 = fptrunc float %833 to bfloat, !dbg !46
  %959 = fptrunc float %835 to bfloat, !dbg !46
  %960 = fptrunc float %836 to bfloat, !dbg !46
  %961 = fptrunc float %837 to bfloat, !dbg !46
  %962 = fptrunc float %838 to bfloat, !dbg !46
  %963 = fptrunc float %840 to bfloat, !dbg !46
  %964 = fptrunc float %841 to bfloat, !dbg !46
  %965 = fptrunc float %842 to bfloat, !dbg !46
  %966 = fptrunc float %843 to bfloat, !dbg !46
  %967 = fptrunc float %845 to bfloat, !dbg !46
  %968 = fptrunc float %846 to bfloat, !dbg !46
  %969 = fptrunc float %847 to bfloat, !dbg !46
  %970 = fptrunc float %848 to bfloat, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %971 = shl i32 %15, 1, !dbg !46
  %972 = and i32 %971, 6, !dbg !46
  %973 = shl i32 %15, 5, !dbg !46
  %974 = and i32 %973, 384, !dbg !46
  %975 = or disjoint i32 %974, %972, !dbg !46
  %976 = shl nuw nsw i32 %17, 5, !dbg !46
  %977 = or disjoint i32 %975, %976, !dbg !46
  %978 = or disjoint i32 %460, %977, !dbg !46
  %979 = and i32 %39, 1016, !dbg !46
  %980 = lshr i32 %977, 4, !dbg !46
  %981 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %980, !dbg !46
  %982 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %981, i32 %978, !dbg !46
  %983 = bitcast bfloat %907 to i16, !dbg !46
  %984 = bitcast bfloat %908 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %982, i16 %983, i16 %984, i1 true) #2, !dbg !46
  %985 = or disjoint i32 %978, 1024, !dbg !46
  %986 = lshr i32 %985, 4, !dbg !46
  %987 = and i32 %986, 268435448, !dbg !46
  %988 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %987, !dbg !46
  %989 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %988, i32 %985, !dbg !46
  %990 = bitcast bfloat %909 to i16, !dbg !46
  %991 = bitcast bfloat %910 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %989, i16 %990, i16 %991, i1 true) #2, !dbg !46
  %992 = or disjoint i32 %978, 32, !dbg !46
  %993 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %981, i32 %992, !dbg !46
  %994 = bitcast bfloat %911 to i16, !dbg !46
  %995 = bitcast bfloat %912 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %993, i16 %994, i16 %995, i1 true) #2, !dbg !46
  %996 = or disjoint i32 %978, 1056, !dbg !46
  %997 = lshr i32 %996, 4, !dbg !46
  %998 = and i32 %997, 268435448, !dbg !46
  %999 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %998, !dbg !46
  %1000 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %999, i32 %996, !dbg !46
  %1001 = bitcast bfloat %913 to i16, !dbg !46
  %1002 = bitcast bfloat %914 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1000, i16 %1001, i16 %1002, i1 true) #2, !dbg !46
  %1003 = or disjoint i32 %978, 64, !dbg !46
  %1004 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %981, i32 %1003, !dbg !46
  %1005 = bitcast bfloat %915 to i16, !dbg !46
  %1006 = bitcast bfloat %916 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1005, i16 %1006, i1 true) #2, !dbg !46
  %1007 = or disjoint i32 %978, 1088, !dbg !46
  %1008 = lshr i32 %1007, 4, !dbg !46
  %1009 = and i32 %1008, 268435448, !dbg !46
  %1010 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1009, !dbg !46
  %1011 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1010, i32 %1007, !dbg !46
  %1012 = bitcast bfloat %917 to i16, !dbg !46
  %1013 = bitcast bfloat %918 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1011, i16 %1012, i16 %1013, i1 true) #2, !dbg !46
  %1014 = or disjoint i32 %978, 96, !dbg !46
  %1015 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %981, i32 %1014, !dbg !46
  %1016 = bitcast bfloat %919 to i16, !dbg !46
  %1017 = bitcast bfloat %920 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1016, i16 %1017, i1 true) #2, !dbg !46
  %1018 = or disjoint i32 %978, 1120, !dbg !46
  %1019 = lshr i32 %1018, 4, !dbg !46
  %1020 = and i32 %1019, 268435448, !dbg !46
  %1021 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1020, !dbg !46
  %1022 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1021, i32 %1018, !dbg !46
  %1023 = bitcast bfloat %921 to i16, !dbg !46
  %1024 = bitcast bfloat %922 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1022, i16 %1023, i16 %1024, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1025 = lshr i32 %39, 4, !dbg !46
  %1026 = and i32 %1025, 56, !dbg !46
  %1027 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1026, !dbg !46
  %1028 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1027, i32 %979, !dbg !46
  %1029 = load <4 x i32>, ptr addrspace(3) %1028, align 16, !dbg !46
  %1030 = or disjoint i32 %979, 1024, !dbg !46
  %1031 = lshr i32 %1030, 4, !dbg !46
  %1032 = and i32 %1031, 120, !dbg !46
  %1033 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1032, !dbg !46
  %1034 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1033, i32 %1030, !dbg !46
  %1035 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1036 = bitcast bfloat %923 to i16, !dbg !46
  %1037 = bitcast bfloat %924 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %982, i16 %1036, i16 %1037, i1 true) #2, !dbg !46
  %1038 = bitcast bfloat %925 to i16, !dbg !46
  %1039 = bitcast bfloat %926 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %989, i16 %1038, i16 %1039, i1 true) #2, !dbg !46
  %1040 = bitcast bfloat %927 to i16, !dbg !46
  %1041 = bitcast bfloat %928 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %993, i16 %1040, i16 %1041, i1 true) #2, !dbg !46
  %1042 = bitcast bfloat %929 to i16, !dbg !46
  %1043 = bitcast bfloat %930 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1000, i16 %1042, i16 %1043, i1 true) #2, !dbg !46
  %1044 = bitcast bfloat %931 to i16, !dbg !46
  %1045 = bitcast bfloat %932 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1044, i16 %1045, i1 true) #2, !dbg !46
  %1046 = bitcast bfloat %933 to i16, !dbg !46
  %1047 = bitcast bfloat %934 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1011, i16 %1046, i16 %1047, i1 true) #2, !dbg !46
  %1048 = bitcast bfloat %935 to i16, !dbg !46
  %1049 = bitcast bfloat %936 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1048, i16 %1049, i1 true) #2, !dbg !46
  %1050 = bitcast bfloat %937 to i16, !dbg !46
  %1051 = bitcast bfloat %938 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1022, i16 %1050, i16 %1051, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1052 = load <4 x i32>, ptr addrspace(3) %1028, align 16, !dbg !46
  %1053 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1054 = bitcast bfloat %939 to i16, !dbg !46
  %1055 = bitcast bfloat %940 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %982, i16 %1054, i16 %1055, i1 true) #2, !dbg !46
  %1056 = bitcast bfloat %941 to i16, !dbg !46
  %1057 = bitcast bfloat %942 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %989, i16 %1056, i16 %1057, i1 true) #2, !dbg !46
  %1058 = bitcast bfloat %943 to i16, !dbg !46
  %1059 = bitcast bfloat %944 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %993, i16 %1058, i16 %1059, i1 true) #2, !dbg !46
  %1060 = bitcast bfloat %945 to i16, !dbg !46
  %1061 = bitcast bfloat %946 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1000, i16 %1060, i16 %1061, i1 true) #2, !dbg !46
  %1062 = bitcast bfloat %947 to i16, !dbg !46
  %1063 = bitcast bfloat %948 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1062, i16 %1063, i1 true) #2, !dbg !46
  %1064 = bitcast bfloat %949 to i16, !dbg !46
  %1065 = bitcast bfloat %950 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1011, i16 %1064, i16 %1065, i1 true) #2, !dbg !46
  %1066 = bitcast bfloat %951 to i16, !dbg !46
  %1067 = bitcast bfloat %952 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1066, i16 %1067, i1 true) #2, !dbg !46
  %1068 = bitcast bfloat %953 to i16, !dbg !46
  %1069 = bitcast bfloat %954 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1022, i16 %1068, i16 %1069, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1070 = load <4 x i32>, ptr addrspace(3) %1028, align 16, !dbg !46
  %1071 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1072 = bitcast bfloat %955 to i16, !dbg !46
  %1073 = bitcast bfloat %956 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %982, i16 %1072, i16 %1073, i1 true) #2, !dbg !46
  %1074 = bitcast bfloat %957 to i16, !dbg !46
  %1075 = bitcast bfloat %958 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %989, i16 %1074, i16 %1075, i1 true) #2, !dbg !46
  %1076 = bitcast bfloat %959 to i16, !dbg !46
  %1077 = bitcast bfloat %960 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %993, i16 %1076, i16 %1077, i1 true) #2, !dbg !46
  %1078 = bitcast bfloat %961 to i16, !dbg !46
  %1079 = bitcast bfloat %962 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1000, i16 %1078, i16 %1079, i1 true) #2, !dbg !46
  %1080 = bitcast bfloat %963 to i16, !dbg !46
  %1081 = bitcast bfloat %964 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1004, i16 %1080, i16 %1081, i1 true) #2, !dbg !46
  %1082 = bitcast bfloat %965 to i16, !dbg !46
  %1083 = bitcast bfloat %966 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1011, i16 %1082, i16 %1083, i1 true) #2, !dbg !46
  %1084 = bitcast bfloat %967 to i16, !dbg !46
  %1085 = bitcast bfloat %968 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1015, i16 %1084, i16 %1085, i1 true) #2, !dbg !46
  %1086 = bitcast bfloat %969 to i16, !dbg !46
  %1087 = bitcast bfloat %970 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1022, i16 %1086, i16 %1087, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %1088 = load <4 x i32>, ptr addrspace(3) %1028, align 16, !dbg !46
  %1089 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !46
  %.extract = extractelement <4 x i32> %1029, i64 0, !dbg !46
  %.extract101 = extractelement <4 x i32> %1029, i64 1, !dbg !46
  %.extract103 = extractelement <4 x i32> %1029, i64 2, !dbg !46
  %.extract105 = extractelement <4 x i32> %1029, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract101, i32 %.extract103, i32 %.extract105, ptr addrspace(1) %892, i1 %858) #2, !dbg !46
  %.extract107 = extractelement <4 x i32> %1035, i64 0, !dbg !46
  %.extract109 = extractelement <4 x i32> %1035, i64 1, !dbg !46
  %.extract111 = extractelement <4 x i32> %1035, i64 2, !dbg !46
  %.extract113 = extractelement <4 x i32> %1035, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract107, i32 %.extract109, i32 %.extract111, i32 %.extract113, ptr addrspace(1) %894, i1 %859) #2, !dbg !46
  %.extract115 = extractelement <4 x i32> %1052, i64 0, !dbg !46
  %.extract117 = extractelement <4 x i32> %1052, i64 1, !dbg !46
  %.extract119 = extractelement <4 x i32> %1052, i64 2, !dbg !46
  %.extract121 = extractelement <4 x i32> %1052, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract117, i32 %.extract119, i32 %.extract121, ptr addrspace(1) %896, i1 %860) #2, !dbg !46
  %.extract123 = extractelement <4 x i32> %1053, i64 0, !dbg !46
  %.extract125 = extractelement <4 x i32> %1053, i64 1, !dbg !46
  %.extract127 = extractelement <4 x i32> %1053, i64 2, !dbg !46
  %.extract129 = extractelement <4 x i32> %1053, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract123, i32 %.extract125, i32 %.extract127, i32 %.extract129, ptr addrspace(1) %898, i1 %861) #2, !dbg !46
  %.extract131 = extractelement <4 x i32> %1070, i64 0, !dbg !46
  %.extract133 = extractelement <4 x i32> %1070, i64 1, !dbg !46
  %.extract135 = extractelement <4 x i32> %1070, i64 2, !dbg !46
  %.extract137 = extractelement <4 x i32> %1070, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract131, i32 %.extract133, i32 %.extract135, i32 %.extract137, ptr addrspace(1) %900, i1 %862) #2, !dbg !46
  %.extract139 = extractelement <4 x i32> %1071, i64 0, !dbg !46
  %.extract141 = extractelement <4 x i32> %1071, i64 1, !dbg !46
  %.extract143 = extractelement <4 x i32> %1071, i64 2, !dbg !46
  %.extract145 = extractelement <4 x i32> %1071, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract139, i32 %.extract141, i32 %.extract143, i32 %.extract145, ptr addrspace(1) %902, i1 %863) #2, !dbg !46
  %.extract147 = extractelement <4 x i32> %1088, i64 0, !dbg !46
  %.extract149 = extractelement <4 x i32> %1088, i64 1, !dbg !46
  %.extract151 = extractelement <4 x i32> %1088, i64 2, !dbg !46
  %.extract153 = extractelement <4 x i32> %1088, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract147, i32 %.extract149, i32 %.extract151, i32 %.extract153, ptr addrspace(1) %904, i1 %864) #2, !dbg !46
  %.extract155 = extractelement <4 x i32> %1089, i64 0, !dbg !46
  %.extract157 = extractelement <4 x i32> %1089, i64 1, !dbg !46
  %.extract159 = extractelement <4 x i32> %1089, i64 2, !dbg !46
  %.extract161 = extractelement <4 x i32> %1089, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract155, i32 %.extract157, i32 %.extract159, i32 %.extract161, ptr addrspace(1) %906, i1 %865) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz74pdmy35dosjjiuybcjkmjkzro4kzvc5znbje53r6u7zcnn3qq.py", directory: "/tmp/torchinductor_root/z7")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 57, column: 19, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 54, scope: !6)
!33 = !DILocation(line: 67, column: 66, scope: !6)
!34 = !DILocation(line: 67, column: 13, scope: !6)
!35 = !DILocation(line: 72, column: 24, scope: !6)
!36 = !DILocation(line: 73, column: 24, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 87, column: 20, scope: !6)
!39 = !DILocation(line: 87, column: 34, scope: !6)
!40 = !DILocation(line: 87, column: 26, scope: !6)
!41 = !DILocation(line: 90, column: 25, scope: !6)
!42 = !DILocation(line: 90, column: 40, scope: !6)
!43 = !DILocation(line: 90, column: 21, scope: !6)
!44 = !DILocation(line: 90, column: 33, scope: !6)
!45 = !DILocation(line: 91, column: 25, scope: !6)
!46 = !DILocation(line: 91, column: 67, scope: !6)
!47 = !DILocation(line: 91, column: 4, scope: !6)
