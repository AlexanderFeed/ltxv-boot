; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 1, !dbg !10
  %8 = icmp slt i32 %7, 512, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 3, !dbg !12
  %13 = and i32 %12, 4088, !dbg !12
  %14 = shl i32 %6, 13, !dbg !13
  %15 = or disjoint i32 %13, %14, !dbg !14
  %16 = or disjoint i32 %15, 4096, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %8) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !16
  %30 = extractelement <2 x bfloat> %23, i64 0, !dbg !16
  %31 = extractelement <2 x bfloat> %23, i64 1, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i1 %8) #5, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !16
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !16
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !16
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !16
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !16
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !16
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !16
  %43 = fpext bfloat %30 to float, !dbg !17
  %44 = fpext bfloat %31 to float, !dbg !17
  %45 = fpext bfloat %41 to float, !dbg !17
  %46 = fpext bfloat %42 to float, !dbg !17
  %47 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !18
  %48 = getelementptr bfloat, ptr addrspace(1) %1, i64 %19, !dbg !18
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %8) #5, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !19
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !19
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !19
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !19
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !19
  %58 = extractelement <2 x bfloat> %51, i64 0, !dbg !19
  %59 = extractelement <2 x bfloat> %51, i64 1, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %8) #5, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !19
  %69 = extractelement <2 x bfloat> %62, i64 0, !dbg !19
  %70 = extractelement <2 x bfloat> %62, i64 1, !dbg !19
  %71 = fpext bfloat %58 to float, !dbg !20
  %72 = fpext bfloat %59 to float, !dbg !20
  %73 = fpext bfloat %69 to float, !dbg !20
  %74 = fpext bfloat %70 to float, !dbg !20
  %75 = fadd float %43, %71, !dbg !21
  %76 = fadd float %44, %72, !dbg !21
  %77 = fadd float %45, %73, !dbg !21
  %78 = fadd float %46, %74, !dbg !21
  %79 = fmul float %75, %75, !dbg !22
  %80 = fmul float %76, %76, !dbg !22
  %81 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !17
  %82 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !20
  %83 = fadd <2 x float> %81, %82, !dbg !21
  %84 = fmul <2 x float> %83, %83, !dbg !22
  %85 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !17
  %86 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !20
  %87 = fadd <2 x float> %85, %86, !dbg !21
  %88 = fmul <2 x float> %87, %87, !dbg !22
  %89 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !17
  %90 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !20
  %91 = fadd <2 x float> %89, %90, !dbg !21
  %92 = fmul <2 x float> %91, %91, !dbg !22
  %93 = fmul float %77, %77, !dbg !22
  %94 = fmul float %78, %78, !dbg !22
  %95 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !17
  %96 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !20
  %97 = fadd <2 x float> %95, %96, !dbg !21
  %98 = fmul <2 x float> %97, %97, !dbg !22
  %99 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !17
  %100 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !20
  %101 = fadd <2 x float> %99, %100, !dbg !21
  %102 = fmul <2 x float> %101, %101, !dbg !22
  %103 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !17
  %104 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !20
  %105 = fadd <2 x float> %103, %104, !dbg !21
  %106 = fmul <2 x float> %105, %105, !dbg !22
  %107 = fadd float %79, %80, !dbg !23
  %108 = extractelement <2 x float> %84, i64 0, !dbg !23
  %109 = fadd float %108, %107, !dbg !23
  %110 = extractelement <2 x float> %84, i64 1, !dbg !23
  %111 = fadd float %110, %109, !dbg !23
  %112 = extractelement <2 x float> %88, i64 0, !dbg !23
  %113 = fadd float %112, %111, !dbg !23
  %114 = extractelement <2 x float> %88, i64 1, !dbg !23
  %115 = fadd float %114, %113, !dbg !23
  %116 = extractelement <2 x float> %92, i64 0, !dbg !23
  %117 = fadd float %116, %115, !dbg !23
  %118 = extractelement <2 x float> %92, i64 1, !dbg !23
  %119 = fadd float %118, %117, !dbg !23
  %120 = select i1 %8, float %119, float 0.000000e+00, !dbg !23
  %121 = fadd float %93, %94, !dbg !23
  %122 = extractelement <2 x float> %98, i64 0, !dbg !23
  %123 = fadd float %122, %121, !dbg !23
  %124 = extractelement <2 x float> %98, i64 1, !dbg !23
  %125 = fadd float %124, %123, !dbg !23
  %126 = extractelement <2 x float> %102, i64 0, !dbg !23
  %127 = fadd float %126, %125, !dbg !23
  %128 = extractelement <2 x float> %102, i64 1, !dbg !23
  %129 = fadd float %128, %127, !dbg !23
  %130 = extractelement <2 x float> %106, i64 0, !dbg !23
  %131 = fadd float %130, %129, !dbg !23
  %132 = extractelement <2 x float> %106, i64 1, !dbg !23
  %133 = fadd float %132, %131, !dbg !23
  %134 = select i1 %8, float %133, float 0.000000e+00, !dbg !23
  %135 = bitcast float %120 to i32, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %120, %137, !dbg !23
  %139 = bitcast float %138 to i32, !dbg !28
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = fadd float %138, %141, !dbg !23
  %143 = bitcast float %142 to i32, !dbg !28
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = fadd float %142, %145, !dbg !23
  %147 = bitcast float %146 to i32, !dbg !28
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = fadd float %146, %149, !dbg !23
  %151 = bitcast float %150 to i32, !dbg !28
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = fadd float %150, %153, !dbg !23
  %155 = bitcast float %134 to i32, !dbg !28
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !28
  %157 = bitcast i32 %156 to float, !dbg !28
  %158 = fadd float %134, %157, !dbg !23
  %159 = bitcast float %158 to i32, !dbg !28
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = fadd float %158, %161, !dbg !23
  %163 = bitcast float %162 to i32, !dbg !28
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !28
  %165 = bitcast i32 %164 to float, !dbg !28
  %166 = fadd float %162, %165, !dbg !23
  %167 = bitcast float %166 to i32, !dbg !28
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !28
  %169 = bitcast i32 %168 to float, !dbg !28
  %170 = fadd float %166, %169, !dbg !23
  %171 = bitcast float %170 to i32, !dbg !28
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !28
  %173 = bitcast i32 %172 to float, !dbg !28
  %174 = fadd float %170, %173, !dbg !23
  %175 = and i32 %11, 15, !dbg !28
  %176 = icmp eq i32 %10, 0, !dbg !28
  %177 = zext nneg i32 %175 to i64, !dbg !28
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i64 %177, !dbg !28
  %179 = bitcast float %154 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 %176) #5, !dbg !28
  %180 = or disjoint i32 %175, 16, !dbg !28
  %181 = zext nneg i32 %180 to i64, !dbg !28
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !28
  %183 = bitcast float %174 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 %176) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %184 = icmp slt i32 %9, 32, !dbg !28
  %185 = sext i32 %9 to i64, !dbg !28
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i64 %185, !dbg !28
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %184) #5, !dbg !28
  %188 = bitcast i32 %187 to float, !dbg !28
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !28
  %190 = bitcast i32 %189 to float, !dbg !28
  %191 = fadd float %188, %190, !dbg !23
  %192 = bitcast float %191 to i32, !dbg !28
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !28
  %194 = bitcast i32 %193 to float, !dbg !28
  %195 = fadd float %191, %194, !dbg !23
  %196 = bitcast float %195 to i32, !dbg !28
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !28
  %198 = bitcast i32 %197 to float, !dbg !28
  %199 = fadd float %195, %198, !dbg !23
  %200 = bitcast float %199 to i32, !dbg !28
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !28
  %202 = bitcast i32 %201 to float, !dbg !28
  %203 = fadd float %199, %202, !dbg !23
  %204 = and i32 %9, 15, !dbg !28
  %205 = icmp eq i32 %204, 0, !dbg !28
  %206 = and i1 %184, %205, !dbg !28
  %207 = bitcast float %203 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %207, i1 %206) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %208 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %209 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !28
  %210 = zext nneg i32 %13 to i64, !dbg !29
  %211 = getelementptr bfloat, ptr addrspace(1) %2, i64 %210, !dbg !29
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %211, i1 true) #5, !dbg !30
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %8) #5, !dbg !31
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i1 %8) #5, !dbg !31
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %8) #5, !dbg !32
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %8) #5, !dbg !32
  %217 = tail call float @llvm.nvvm.div.full(float %208, float 4.096000e+03), !dbg !33
  %218 = tail call float @llvm.nvvm.div.full(float %209, float 4.096000e+03), !dbg !33
  %219 = fadd float %217, 0x3EB0C6F7A0000000, !dbg !34
  %220 = fadd float %218, 0x3EB0C6F7A0000000, !dbg !34
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i19 = icmp eq i32 %228, 0, !dbg !35
  br i1 %.not.i19, label %231, label %229, !dbg !35

229:                                              ; preds = %__nv_rsqrtf.exit
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

231:                                              ; preds = %__nv_rsqrtf.exit
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

__nv_rsqrtf.exit21:                               ; preds = %229, %231
  %.0.i20 = phi float [ %230, %229 ], [ %232, %231 ], !dbg !35
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i43 = icmp eq i32 %240, 0, !dbg !35
  br i1 %.not.i43, label %243, label %241, !dbg !35

241:                                              ; preds = %__nv_rsqrtf.exit21
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !35
  br label %__nv_rsqrtf.exit45, !dbg !35

243:                                              ; preds = %__nv_rsqrtf.exit21
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !35
  br label %__nv_rsqrtf.exit45, !dbg !35

__nv_rsqrtf.exit45:                               ; preds = %241, %243
  %.0.i44 = phi float [ %242, %241 ], [ %244, %243 ], !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !31
  %246 = bitcast i32 %245 to <2 x bfloat>, !dbg !31
  %247 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !32
  %248 = bitcast i32 %247 to <2 x bfloat>, !dbg !32
  %249 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !31
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !31
  %251 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !32
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !31
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !31
  %255 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !32
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !31
  %258 = bitcast i32 %257 to <2 x bfloat>, !dbg !31
  %259 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !32
  %260 = bitcast i32 %259 to <2 x bfloat>, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !31
  %262 = bitcast i32 %261 to <2 x bfloat>, !dbg !31
  %263 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !32
  %264 = bitcast i32 %263 to <2 x bfloat>, !dbg !32
  %265 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !31
  %266 = bitcast i32 %265 to <2 x bfloat>, !dbg !31
  %267 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !32
  %268 = bitcast i32 %267 to <2 x bfloat>, !dbg !32
  %269 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !31
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !31
  %271 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !32
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !32
  %273 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !31
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !31
  %275 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !32
  %276 = bitcast i32 %275 to <2 x bfloat>, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !30
  %278 = bitcast i32 %277 to <2 x bfloat>, !dbg !30
  %279 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !30
  %280 = bitcast i32 %279 to <2 x bfloat>, !dbg !30
  %281 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !30
  %282 = bitcast i32 %281 to <2 x bfloat>, !dbg !30
  %283 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !30
  %284 = bitcast i32 %283 to <2 x bfloat>, !dbg !30
  %285 = fpext <2 x bfloat> %274 to <2 x float>, !dbg !36
  %286 = fpext <2 x bfloat> %276 to <2 x float>, !dbg !37
  %287 = fadd <2 x float> %285, %286, !dbg !38
  %288 = fpext <2 x bfloat> %284 to <2 x float>, !dbg !39
  %289 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !40
  %290 = shufflevector <2 x float> %289, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %291 = fmul <2 x float> %287, %290, !dbg !40
  %292 = fmul <2 x float> %291, %288, !dbg !41
  %293 = fptrunc <2 x float> %292 to <2 x bfloat>, !dbg !42
  %294 = fpext <2 x bfloat> %270 to <2 x float>, !dbg !36
  %295 = fpext <2 x bfloat> %272 to <2 x float>, !dbg !37
  %296 = fadd <2 x float> %294, %295, !dbg !38
  %297 = fpext <2 x bfloat> %282 to <2 x float>, !dbg !39
  %298 = fmul <2 x float> %296, %290, !dbg !40
  %299 = fmul <2 x float> %298, %297, !dbg !41
  %300 = fptrunc <2 x float> %299 to <2 x bfloat>, !dbg !42
  %301 = fpext <2 x bfloat> %266 to <2 x float>, !dbg !36
  %302 = fpext <2 x bfloat> %268 to <2 x float>, !dbg !37
  %303 = fadd <2 x float> %301, %302, !dbg !38
  %304 = fpext <2 x bfloat> %280 to <2 x float>, !dbg !39
  %305 = fmul <2 x float> %303, %290, !dbg !40
  %306 = fmul <2 x float> %305, %304, !dbg !41
  %307 = fptrunc <2 x float> %306 to <2 x bfloat>, !dbg !42
  %308 = fpext <2 x bfloat> %262 to <2 x float>, !dbg !36
  %309 = fpext <2 x bfloat> %264 to <2 x float>, !dbg !37
  %310 = fadd <2 x float> %308, %309, !dbg !38
  %311 = fpext <2 x bfloat> %278 to <2 x float>, !dbg !39
  %312 = fmul <2 x float> %310, %290, !dbg !40
  %313 = fmul <2 x float> %312, %311, !dbg !41
  %314 = fptrunc <2 x float> %313 to <2 x bfloat>, !dbg !42
  %315 = fpext <2 x bfloat> %258 to <2 x float>, !dbg !36
  %316 = fpext <2 x bfloat> %260 to <2 x float>, !dbg !37
  %317 = fadd <2 x float> %315, %316, !dbg !38
  %318 = insertelement <2 x float> poison, float %.0.i44, i64 0, !dbg !40
  %319 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %320 = fmul <2 x float> %317, %319, !dbg !40
  %321 = fmul <2 x float> %320, %288, !dbg !41
  %322 = fptrunc <2 x float> %321 to <2 x bfloat>, !dbg !42
  %323 = fpext <2 x bfloat> %254 to <2 x float>, !dbg !36
  %324 = fpext <2 x bfloat> %256 to <2 x float>, !dbg !37
  %325 = fadd <2 x float> %323, %324, !dbg !38
  %326 = fmul <2 x float> %325, %319, !dbg !40
  %327 = fmul <2 x float> %326, %297, !dbg !41
  %328 = fptrunc <2 x float> %327 to <2 x bfloat>, !dbg !42
  %329 = fpext <2 x bfloat> %250 to <2 x float>, !dbg !36
  %330 = fpext <2 x bfloat> %252 to <2 x float>, !dbg !37
  %331 = fadd <2 x float> %329, %330, !dbg !38
  %332 = fmul <2 x float> %331, %319, !dbg !40
  %333 = fmul <2 x float> %332, %304, !dbg !41
  %334 = fptrunc <2 x float> %333 to <2 x bfloat>, !dbg !42
  %335 = fpext <2 x bfloat> %246 to <2 x float>, !dbg !36
  %336 = fpext <2 x bfloat> %248 to <2 x float>, !dbg !37
  %337 = fadd <2 x float> %335, %336, !dbg !38
  %338 = fmul <2 x float> %337, %319, !dbg !40
  %339 = fmul <2 x float> %338, %311, !dbg !41
  %340 = fptrunc <2 x float> %339 to <2 x bfloat>, !dbg !42
  %341 = bitcast <2 x bfloat> %293 to i32, !dbg !42
  %342 = bitcast <2 x bfloat> %300 to i32, !dbg !42
  %343 = bitcast <2 x bfloat> %307 to i32, !dbg !42
  %344 = bitcast <2 x bfloat> %314 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %342, i32 %343, i32 %344, ptr addrspace(1) %18, i1 %8) #5, !dbg !42
  %345 = bitcast <2 x bfloat> %322 to i32, !dbg !42
  %346 = bitcast <2 x bfloat> %328 to i32, !dbg !42
  %347 = bitcast <2 x bfloat> %334 to i32, !dbg !42
  %348 = bitcast <2 x bfloat> %340 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %346, i32 %347, i32 %348, ptr addrspace(1) %20, i1 %8) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py", directory: "/tmp/torchinductor_root/df")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 21, scope: !6)
!12 = !DILocation(line: 26, column: 37, scope: !6)
!13 = !DILocation(line: 36, column: 50, scope: !6)
!14 = !DILocation(line: 36, column: 45, scope: !6)
!15 = !DILocation(line: 36, column: 38, scope: !6)
!16 = !DILocation(line: 36, column: 55, scope: !6)
!17 = !DILocation(line: 36, column: 116, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 112, scope: !6)
!21 = !DILocation(line: 38, column: 22, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 51, column: 34, scope: !6)
!30 = !DILocation(line: 51, column: 41, scope: !6)
!31 = !DILocation(line: 52, column: 55, scope: !6)
!32 = !DILocation(line: 53, column: 52, scope: !6)
!33 = !DILocation(line: 57, column: 24, scope: !6)
!34 = !DILocation(line: 59, column: 24, scope: !6)
!35 = !DILocation(line: 60, column: 32, scope: !6)
!36 = !DILocation(line: 52, column: 117, scope: !6)
!37 = !DILocation(line: 53, column: 114, scope: !6)
!38 = !DILocation(line: 54, column: 23, scope: !6)
!39 = !DILocation(line: 51, column: 94, scope: !6)
!40 = !DILocation(line: 61, column: 24, scope: !6)
!41 = !DILocation(line: 63, column: 23, scope: !6)
!42 = !DILocation(line: 64, column: 56, scope: !6)
!43 = !DILocation(line: 45, column: 4, scope: !6)
