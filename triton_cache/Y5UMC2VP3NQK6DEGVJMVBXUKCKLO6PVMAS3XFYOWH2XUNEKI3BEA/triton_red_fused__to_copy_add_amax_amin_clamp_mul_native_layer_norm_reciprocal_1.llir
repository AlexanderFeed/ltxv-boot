; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.begin:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 3, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 6, !dbg !11
  %23 = and i32 %22, 7, !dbg !11
  %24 = and i32 %21, 31, !dbg !11
  %25 = or disjoint i32 %23, %20, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = icmp slt i32 %20, 4112, !dbg !13
  %28 = shl i32 %21, 3, !dbg !14
  %29 = and i32 %28, 504, !dbg !14
  %30 = mul i32 %25, 3072, !dbg !15
  %31 = or disjoint i32 %30, %29
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %26) #5, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !17
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !17
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !17
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !17
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = fpext bfloat %48 to float, !dbg !18
  %57 = fpext bfloat %49 to float, !dbg !18
  %58 = fpext bfloat %50 to float, !dbg !18
  %59 = select i1 %26, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %26, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %26, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %26, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %26, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %26, float %56, float 0.000000e+00, !dbg !19
  %65 = select i1 %26, float %57, float 0.000000e+00, !dbg !19
  %66 = select i1 %26, float %58, float 0.000000e+00, !dbg !19
  %67 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %72 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %73 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %74 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 512, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ %72, %.peel.begin ], [ %205, %._crit_edge ]
  %81 = phi float [ %73, %.peel.begin ], [ %206, %._crit_edge ]
  %82 = phi float [ %74, %.peel.begin ], [ %207, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %.peel.begin ], [ %197, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %.peel.begin ], [ %198, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %.peel.begin ], [ %199, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = phi float [ %64, %.peel.begin ], [ %189, %._crit_edge ]
  %97 = phi float [ %65, %.peel.begin ], [ %190, %._crit_edge ]
  %98 = phi float [ %66, %.peel.begin ], [ %191, %._crit_edge ]
  %99 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %100 = add i32 %31, %99, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !16
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !16
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 %26) #5, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !17
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !17
  %106 = extractelement <2 x bfloat> %105, i64 1, !dbg !17
  %107 = fpext bfloat %106 to float, !dbg !18
  %108 = extractelement <2 x bfloat> %105, i64 0, !dbg !17
  %109 = fpext bfloat %108 to float, !dbg !18
  %110 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !17
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !17
  %112 = extractelement <2 x bfloat> %111, i64 1, !dbg !17
  %113 = fpext bfloat %112 to float, !dbg !18
  %114 = extractelement <2 x bfloat> %111, i64 0, !dbg !17
  %115 = fpext bfloat %114 to float, !dbg !18
  %116 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !17
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !17
  %118 = extractelement <2 x bfloat> %117, i64 1, !dbg !17
  %119 = fpext bfloat %118 to float, !dbg !18
  %120 = extractelement <2 x bfloat> %117, i64 0, !dbg !17
  %121 = fpext bfloat %120 to float, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !17
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !17
  %124 = extractelement <2 x bfloat> %123, i64 1, !dbg !17
  %125 = fpext bfloat %124 to float, !dbg !18
  %126 = extractelement <2 x bfloat> %123, i64 0, !dbg !17
  %127 = fpext bfloat %126 to float, !dbg !18
  %128 = fsub float %127, %91, !dbg !23
  %129 = fsub float %125, %92, !dbg !23
  %130 = fsub float %121, %93, !dbg !23
  %131 = fsub float %119, %94, !dbg !23
  %132 = fsub float %115, %95, !dbg !23
  %133 = fsub float %113, %96, !dbg !23
  %134 = fsub float %109, %97, !dbg !23
  %135 = fsub float %107, %98, !dbg !23
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = fadd float %80, 1.000000e+00, !dbg !27
  %142 = fadd float %81, 1.000000e+00, !dbg !27
  %143 = fadd float %82, 1.000000e+00, !dbg !27
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = tail call float @llvm.nvvm.div.full(float %133, float %141), !dbg !28
  %150 = tail call float @llvm.nvvm.div.full(float %134, float %142), !dbg !28
  %151 = tail call float @llvm.nvvm.div.full(float %135, float %143), !dbg !28
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fadd float %96, %149, !dbg !29
  %158 = fadd float %97, %150, !dbg !29
  %159 = fadd float %98, %151, !dbg !29
  %160 = fsub float %127, %152, !dbg !30
  %161 = fsub float %125, %153, !dbg !30
  %162 = fsub float %121, %154, !dbg !30
  %163 = fsub float %119, %155, !dbg !30
  %164 = fsub float %115, %156, !dbg !30
  %165 = fsub float %113, %157, !dbg !30
  %166 = fsub float %109, %158, !dbg !30
  %167 = fsub float %107, %159, !dbg !30
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fmul float %133, %165, !dbg !31
  %174 = fmul float %134, %166, !dbg !31
  %175 = fmul float %135, %167, !dbg !31
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = fadd float %88, %173, !dbg !32
  %182 = fadd float %89, %174, !dbg !32
  %183 = fadd float %90, %175, !dbg !32
  %184 = select i1 %26, float %152, float %91, !dbg !19
  %185 = select i1 %26, float %153, float %92, !dbg !19
  %186 = select i1 %26, float %154, float %93, !dbg !19
  %187 = select i1 %26, float %155, float %94, !dbg !19
  %188 = select i1 %26, float %156, float %95, !dbg !19
  %189 = select i1 %26, float %157, float %96, !dbg !19
  %190 = select i1 %26, float %158, float %97, !dbg !19
  %191 = select i1 %26, float %159, float %98, !dbg !19
  %192 = select i1 %26, float %176, float %83, !dbg !33
  %193 = select i1 %26, float %177, float %84, !dbg !33
  %194 = select i1 %26, float %178, float %85, !dbg !33
  %195 = select i1 %26, float %179, float %86, !dbg !33
  %196 = select i1 %26, float %180, float %87, !dbg !33
  %197 = select i1 %26, float %181, float %88, !dbg !33
  %198 = select i1 %26, float %182, float %89, !dbg !33
  %199 = select i1 %26, float %183, float %90, !dbg !33
  %200 = select i1 %26, float %136, float %75, !dbg !20
  %201 = select i1 %26, float %137, float %76, !dbg !20
  %202 = select i1 %26, float %138, float %77, !dbg !20
  %203 = select i1 %26, float %139, float %78, !dbg !20
  %204 = select i1 %26, float %140, float %79, !dbg !20
  %205 = select i1 %26, float %141, float %80, !dbg !20
  %206 = select i1 %26, float %142, float %81, !dbg !20
  %207 = select i1 %26, float %143, float %82, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !21
  %208 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !21
  br i1 %208, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %209 = fadd float %192, %193, !dbg !11
  %210 = lshr i32 %21, 5, !dbg !11
  %211 = and i32 %21, 7, !dbg !11
  %212 = or disjoint i32 %20, %211, !dbg !12
  %213 = icmp slt i32 %212, 4112, !dbg !13
  %214 = and i32 %21, 511, !dbg !14
  %215 = fsub float %185, %184, !dbg !36
  %216 = fadd float %200, %201, !dbg !39
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !40
  %218 = tail call float @llvm.nvvm.div.full(float %201, float %216), !dbg !41
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !42
  %220 = fmul float %215, %219, !dbg !43
  %221 = fadd float %184, %220, !dbg !44
  %222 = fmul float %215, %215, !dbg !45
  %223 = fmul float %222, %200, !dbg !46
  %224 = fmul float %223, %219, !dbg !47
  %225 = fadd float %209, %224, !dbg !48
  %226 = fsub float %186, %221, !dbg !36
  %227 = fadd float %202, %216, !dbg !39
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !40
  %229 = tail call float @llvm.nvvm.div.full(float %202, float %227), !dbg !41
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !42
  %231 = fmul float %230, %226, !dbg !43
  %232 = fadd float %221, %231, !dbg !44
  %233 = fadd float %194, %225, !dbg !49
  %234 = fmul float %226, %226, !dbg !45
  %235 = fmul float %216, %234, !dbg !46
  %236 = fmul float %230, %235, !dbg !47
  %237 = fadd float %233, %236, !dbg !48
  %238 = fsub float %187, %232, !dbg !36
  %239 = fadd float %203, %227, !dbg !39
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !40
  %241 = tail call float @llvm.nvvm.div.full(float %203, float %239), !dbg !41
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !42
  %243 = fmul float %242, %238, !dbg !43
  %244 = fadd float %232, %243, !dbg !44
  %245 = fadd float %195, %237, !dbg !49
  %246 = fmul float %238, %238, !dbg !45
  %247 = fmul float %227, %246, !dbg !46
  %248 = fmul float %242, %247, !dbg !47
  %249 = fadd float %245, %248, !dbg !48
  %250 = fsub float %188, %244, !dbg !36
  %251 = fadd float %204, %239, !dbg !39
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !40
  %253 = tail call float @llvm.nvvm.div.full(float %204, float %251), !dbg !41
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !42
  %255 = fmul float %254, %250, !dbg !43
  %256 = fadd float %244, %255, !dbg !44
  %257 = fadd float %196, %249, !dbg !49
  %258 = fmul float %250, %250, !dbg !45
  %259 = fmul float %239, %258, !dbg !46
  %260 = fmul float %254, %259, !dbg !47
  %261 = fadd float %257, %260, !dbg !48
  %262 = fsub float %189, %256, !dbg !36
  %263 = fadd float %205, %251, !dbg !39
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !40
  %265 = tail call float @llvm.nvvm.div.full(float %205, float %263), !dbg !41
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !42
  %267 = fmul float %266, %262, !dbg !43
  %268 = fadd float %256, %267, !dbg !44
  %269 = fadd float %197, %261, !dbg !49
  %270 = fmul float %262, %262, !dbg !45
  %271 = fmul float %251, %270, !dbg !46
  %272 = fmul float %266, %271, !dbg !47
  %273 = fadd float %269, %272, !dbg !48
  %274 = fsub float %190, %268, !dbg !36
  %275 = fadd float %206, %263, !dbg !39
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !40
  %277 = tail call float @llvm.nvvm.div.full(float %206, float %275), !dbg !41
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !42
  %279 = fmul float %278, %274, !dbg !43
  %280 = fadd float %268, %279, !dbg !44
  %281 = fadd float %198, %273, !dbg !49
  %282 = fmul float %274, %274, !dbg !45
  %283 = fmul float %263, %282, !dbg !46
  %284 = fmul float %278, %283, !dbg !47
  %285 = fadd float %281, %284, !dbg !48
  %286 = fsub float %191, %280, !dbg !36
  %287 = fadd float %207, %275, !dbg !39
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !40
  %289 = tail call float @llvm.nvvm.div.full(float %207, float %287), !dbg !41
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !42
  %291 = fmul float %290, %286, !dbg !43
  %292 = fadd float %280, %291, !dbg !44
  %293 = fadd float %199, %285, !dbg !49
  %294 = fmul float %286, %286, !dbg !45
  %295 = fmul float %275, %294, !dbg !46
  %296 = fmul float %290, %295, !dbg !47
  %297 = fadd float %293, %296, !dbg !48
  %298 = bitcast float %292 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %297 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = bitcast float %287 to i32, !dbg !50
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 16, i32 31), !dbg !50
  %306 = bitcast i32 %305 to float, !dbg !50
  %307 = fsub float %300, %292, !dbg !36
  %308 = fadd float %287, %306, !dbg !39
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !40
  %310 = tail call float @llvm.nvvm.div.full(float %306, float %308), !dbg !41
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !42
  %312 = fmul float %311, %307, !dbg !43
  %313 = fadd float %292, %312, !dbg !44
  %314 = fadd float %297, %303, !dbg !49
  %315 = fmul float %307, %307, !dbg !45
  %316 = fmul float %287, %315, !dbg !46
  %317 = fmul float %311, %316, !dbg !47
  %318 = fadd float %314, %317, !dbg !48
  %319 = bitcast float %313 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %318 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = bitcast float %308 to i32, !dbg !50
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = fsub float %321, %313, !dbg !36
  %329 = fadd float %308, %327, !dbg !39
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !40
  %331 = tail call float @llvm.nvvm.div.full(float %327, float %329), !dbg !41
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !42
  %333 = fmul float %332, %328, !dbg !43
  %334 = fadd float %313, %333, !dbg !44
  %335 = fadd float %318, %324, !dbg !49
  %336 = fmul float %328, %328, !dbg !45
  %337 = fmul float %308, %336, !dbg !46
  %338 = fmul float %332, %337, !dbg !47
  %339 = fadd float %335, %338, !dbg !48
  %340 = bitcast float %334 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %339 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = bitcast float %329 to i32, !dbg !50
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = fsub float %342, %334, !dbg !36
  %350 = fadd float %329, %348, !dbg !39
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !40
  %352 = tail call float @llvm.nvvm.div.full(float %348, float %350), !dbg !41
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !42
  %354 = fmul float %353, %349, !dbg !43
  %355 = fadd float %334, %354, !dbg !44
  %356 = fadd float %339, %345, !dbg !49
  %357 = fmul float %349, %349, !dbg !45
  %358 = fmul float %329, %357, !dbg !46
  %359 = fmul float %353, %358, !dbg !47
  %360 = fadd float %356, %359, !dbg !48
  %361 = bitcast float %355 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %360 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = bitcast float %350 to i32, !dbg !50
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !50
  %369 = bitcast i32 %368 to float, !dbg !50
  %370 = fsub float %363, %355, !dbg !36
  %371 = fadd float %350, %369, !dbg !39
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !40
  %373 = tail call float @llvm.nvvm.div.full(float %369, float %371), !dbg !41
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !42
  %375 = fmul float %374, %370, !dbg !43
  %376 = fadd float %355, %375, !dbg !44
  %377 = fadd float %360, %366, !dbg !49
  %378 = fmul float %370, %370, !dbg !45
  %379 = fmul float %350, %378, !dbg !46
  %380 = fmul float %374, %379, !dbg !47
  %381 = fadd float %377, %380, !dbg !48
  %382 = bitcast float %376 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %381 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = bitcast float %371 to i32, !dbg !50
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !50
  %390 = bitcast i32 %389 to float, !dbg !50
  %391 = fsub float %384, %376, !dbg !36
  %392 = fadd float %371, %390, !dbg !39
  %393 = fcmp oeq float %392, 0.000000e+00, !dbg !40
  %394 = tail call float @llvm.nvvm.div.full(float %390, float %392), !dbg !41
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !42
  %396 = fmul float %395, %391, !dbg !43
  %397 = fadd float %376, %396, !dbg !44
  %398 = fadd float %381, %387, !dbg !49
  %399 = fmul float %391, %391, !dbg !45
  %400 = fmul float %371, %399, !dbg !46
  %401 = fmul float %395, %400, !dbg !47
  %402 = fadd float %398, %401, !dbg !48
  %403 = and i32 %210, 1, !dbg !50
  %404 = icmp eq i32 %24, 0, !dbg !50
  %405 = shl nuw nsw i32 %23, 1, !dbg !50
  %406 = or disjoint i32 %405, %403, !dbg !50
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !50
  %408 = bitcast float %397 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 %404) #5, !dbg !50
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %406, !dbg !50
  %410 = bitcast float %402 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 %404) #5, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %406, !dbg !50
  %412 = bitcast float %392 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 %404) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %413 = icmp slt i32 %21, 16, !dbg !50
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !50
  %415 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %413) #5, !dbg !50
  %416 = bitcast i32 %415 to float, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !50
  %418 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %413) #5, !dbg !50
  %419 = bitcast i32 %418 to float, !dbg !50
  %420 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !50
  %421 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %420, i1 %413) #5, !dbg !50
  %422 = bitcast i32 %421 to float, !dbg !50
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !50
  %424 = bitcast i32 %423 to float, !dbg !50
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !50
  %426 = bitcast i32 %425 to float, !dbg !50
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 1, i32 31), !dbg !50
  %428 = bitcast i32 %427 to float, !dbg !50
  %429 = fsub float %424, %416, !dbg !36
  %430 = fadd float %422, %428, !dbg !39
  %431 = fcmp oeq float %430, 0.000000e+00, !dbg !40
  %432 = tail call float @llvm.nvvm.div.full(float %428, float %430), !dbg !41
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !42
  %434 = fmul float %429, %433, !dbg !43
  %435 = fadd float %434, %416, !dbg !44
  %436 = fadd float %419, %426, !dbg !49
  %437 = fmul float %429, %429, !dbg !45
  %438 = fmul float %437, %422, !dbg !46
  %439 = fmul float %438, %433, !dbg !47
  %440 = fadd float %436, %439, !dbg !48
  %441 = and i32 %21, 1, !dbg !50
  %442 = icmp eq i32 %441, 0, !dbg !50
  %443 = and i1 %413, %442, !dbg !50
  %444 = bitcast float %435 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %444, i1 %443) #5, !dbg !50
  %445 = bitcast float %440 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %445, i1 %443) #5, !dbg !50
  %446 = bitcast float %430 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %446, i1 %443) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !50
  %448 = load float, ptr addrspace(3) %447, align 8, !dbg !50
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %405, !dbg !50
  %450 = load float, ptr addrspace(3) %449, align 8, !dbg !50
  %451 = tail call float @llvm.nvvm.div.full(float %450, float 3.072000e+03), !dbg !51
  %452 = fadd float %451, 0x3EB0C6F7A0000000, !dbg !52
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i62 = icmp eq i32 %460, 0, !dbg !53
  br i1 %.not.i62, label %463, label %461, !dbg !53

461:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %462 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %452), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

463:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %464 = tail call float @llvm.nvvm.rsqrt.approx.f(float %452), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

__nv_rsqrtf.exit64:                               ; preds = %461, %463
  %.0.i63 = phi float [ %462, %461 ], [ %464, %463 ], !dbg !53
  %465 = shl i32 %21, 6
  %466 = and i32 %465, 4032
  %467 = or disjoint i32 %466, %23
  %468 = and i32 %28, 4088
  %469 = lshr exact i32 %466, 1
  %470 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %469
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %467
  %472 = or disjoint i32 %467, 8
  %473 = lshr i32 %472, 3
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %472
  %476 = or disjoint i32 %467, 16
  %477 = lshr i32 %476, 3
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %476
  %480 = or disjoint i32 %467, 24
  %481 = lshr i32 %480, 3
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %480
  %484 = or disjoint i32 %467, 32
  %485 = lshr i32 %484, 3
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %484
  %488 = or disjoint i32 %467, 40
  %489 = lshr i32 %488, 3
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %488
  %492 = or disjoint i32 %467, 48
  %493 = lshr i32 %492, 3
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %492
  %496 = or disjoint i32 %467, 56
  %497 = lshr i32 %496, 3
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497
  %499 = getelementptr float, ptr addrspace(3) %498, i32 %496
  %500 = lshr exact i32 %468, 1
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %500
  %502 = getelementptr inbounds nuw float, ptr addrspace(3) %501, i32 %468
  %503 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %214
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 1040
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 2080
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 3120
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 4160
  %508 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 5200
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 6240
  %510 = getelementptr inbounds nuw i8, ptr addrspace(3) %503, i32 7280
  %511 = lshr i32 %28, 6
  %512 = and i32 %511, 56
  %513 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %512
  %514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %513, i32 %468
  %515 = zext nneg i32 %214 to i64, !dbg !54
  %516 = insertelement <16 x i1> poison, i1 %27, i64 0, !dbg !55
  %517 = shufflevector <16 x i1> %516, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !55
  %518 = getelementptr inbounds nuw i8, ptr addrspace(3) %514, i32 4
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %514, i32 8
  %520 = getelementptr inbounds nuw i8, ptr addrspace(3) %514, i32 12
  br label %521, !dbg !54

521:                                              ; preds = %__nv_rsqrtf.exit64, %521
  %indvars.iv114 = phi i64 [ 0, %__nv_rsqrtf.exit64 ], [ %indvars.iv.next115, %521 ]
  %522 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit64 ], [ %609, %521 ]
  %523 = or disjoint i64 %indvars.iv114, %515, !dbg !56
  %524 = trunc nuw nsw i64 %indvars.iv114 to i32, !dbg !57
  %525 = add i32 %31, %524, !dbg !57
  %526 = sext i32 %525 to i64, !dbg !58
  %527 = getelementptr bfloat, ptr addrspace(1) %0, i64 %526, !dbg !58
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %527, i1 %26) #5, !dbg !59
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !59
  %530 = bitcast i32 %529 to <2 x bfloat>, !dbg !59
  %531 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !59
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !59
  %533 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !59
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !59
  %535 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !59
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !59
  %537 = extractelement <2 x bfloat> %530, i64 0, !dbg !59
  %538 = extractelement <2 x bfloat> %530, i64 1, !dbg !59
  %539 = extractelement <2 x bfloat> %532, i64 0, !dbg !59
  %540 = extractelement <2 x bfloat> %532, i64 1, !dbg !59
  %541 = extractelement <2 x bfloat> %534, i64 0, !dbg !59
  %542 = extractelement <2 x bfloat> %534, i64 1, !dbg !59
  %543 = extractelement <2 x bfloat> %536, i64 0, !dbg !59
  %544 = extractelement <2 x bfloat> %536, i64 1, !dbg !59
  %545 = fpext bfloat %537 to float, !dbg !60
  %546 = fpext bfloat %538 to float, !dbg !60
  %547 = fpext bfloat %539 to float, !dbg !60
  %548 = fpext bfloat %540 to float, !dbg !60
  %549 = fpext bfloat %541 to float, !dbg !60
  %550 = fpext bfloat %542 to float, !dbg !60
  %551 = fpext bfloat %543 to float, !dbg !60
  %552 = fpext bfloat %544 to float, !dbg !60
  %553 = add nuw nsw i64 %523, 3072, !dbg !61
  %554 = getelementptr float, ptr addrspace(1) %1, i64 %553, !dbg !62
  %555 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %554, i1 true) #5, !dbg !63
  %556 = bitcast i32 %555 to float, !dbg !63
  %557 = getelementptr bfloat, ptr addrspace(1) %2, i64 %553, !dbg !64
  %558 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %557, i1 true) #5, !dbg !65
  %559 = bitcast i16 %558 to bfloat, !dbg !65
  %560 = fpext bfloat %559 to float, !dbg !66
  %561 = getelementptr float, ptr addrspace(1) %1, i64 %523, !dbg !67
  %562 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %561, i1 true) #5, !dbg !68
  %563 = bitcast i32 %562 to float, !dbg !68
  %564 = getelementptr bfloat, ptr addrspace(1) %2, i64 %523, !dbg !69
  %565 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %564, i1 true) #5, !dbg !70
  %566 = bitcast i16 %565 to bfloat, !dbg !70
  %567 = fpext bfloat %566 to float, !dbg !71
  %568 = fsub float %545, %448, !dbg !72
  %569 = fsub float %546, %448, !dbg !72
  %570 = fsub float %547, %448, !dbg !72
  %571 = fsub float %548, %448, !dbg !72
  %572 = fsub float %549, %448, !dbg !72
  %573 = fsub float %550, %448, !dbg !72
  %574 = fsub float %551, %448, !dbg !72
  %575 = fsub float %552, %448, !dbg !72
  %576 = fmul float %.0.i63, %568, !dbg !73
  %577 = fmul float %.0.i63, %569, !dbg !73
  %578 = fmul float %.0.i63, %570, !dbg !73
  %579 = fmul float %.0.i63, %571, !dbg !73
  %580 = fmul float %.0.i63, %572, !dbg !73
  %581 = fmul float %.0.i63, %573, !dbg !73
  %582 = fmul float %.0.i63, %574, !dbg !73
  %583 = fmul float %.0.i63, %575, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %584 = bitcast float %576 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %584, i1 true) #5, !dbg !73
  %585 = bitcast float %577 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %585, i1 true) #5, !dbg !73
  %586 = bitcast float %578 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %586, i1 true) #5, !dbg !73
  %587 = bitcast float %579 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %587, i1 true) #5, !dbg !73
  %588 = bitcast float %580 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %588, i1 true) #5, !dbg !73
  %589 = bitcast float %581 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %589, i1 true) #5, !dbg !73
  %590 = bitcast float %582 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %590, i1 true) #5, !dbg !73
  %591 = bitcast float %583 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %591, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %592 = fadd float %556, %560, !dbg !74
  %593 = fadd float %592, 1.000000e+00, !dbg !75
  %594 = fadd float %563, %567, !dbg !76
  %595 = fcmp uno <16 x float> %522, zeroinitializer, !dbg !77
  %596 = load <8 x float>, ptr addrspace(3) %502, align 4, !dbg !73
  %597 = insertelement <8 x float> poison, float %593, i64 0, !dbg !79
  %598 = shufflevector <8 x float> %597, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !79
  %599 = fmul <8 x float> %598, %596, !dbg !79
  %600 = insertelement <8 x float> poison, float %594, i64 0, !dbg !80
  %601 = shufflevector <8 x float> %600, <8 x float> poison, <16 x i32> zeroinitializer, !dbg !80
  %602 = shufflevector <8 x float> %599, <8 x float> poison, <16 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !80
  %603 = fadd <16 x float> %601, %602, !dbg !80
  %604 = fcmp ogt <16 x float> %522, %603, !dbg !81
  %605 = fcmp olt <16 x float> %522, %603, !dbg !81
  %606 = shufflevector <16 x i1> %604, <16 x i1> %605, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !81
  %607 = or <16 x i1> %595, %606, !dbg !82
  %608 = select <16 x i1> %607, <16 x float> %522, <16 x float> %603, !dbg !83
  %609 = select <16 x i1> %517, <16 x float> %608, <16 x float> %522, !dbg !55
  %610 = getelementptr bfloat, ptr addrspace(1) %3, i64 %526, !dbg !84
  %611 = extractelement <16 x float> %603, i64 7, !dbg !85
  %612 = fptrunc float %611 to bfloat, !dbg !85
  %613 = extractelement <16 x float> %603, i64 6, !dbg !85
  %614 = fptrunc float %613 to bfloat, !dbg !85
  %615 = extractelement <16 x float> %603, i64 5, !dbg !85
  %616 = fptrunc float %615 to bfloat, !dbg !85
  %617 = extractelement <16 x float> %603, i64 4, !dbg !85
  %618 = fptrunc float %617 to bfloat, !dbg !85
  %619 = extractelement <16 x float> %603, i64 3, !dbg !85
  %620 = fptrunc float %619 to bfloat, !dbg !85
  %621 = extractelement <16 x float> %603, i64 2, !dbg !85
  %622 = fptrunc float %621 to bfloat, !dbg !85
  %623 = extractelement <16 x float> %603, i64 1, !dbg !85
  %624 = fptrunc float %623 to bfloat, !dbg !85
  %625 = extractelement <16 x float> %603, i64 0, !dbg !85
  %626 = fptrunc float %625 to bfloat, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %627 = bitcast bfloat %612 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %503, <1 x i16> %627, i1 true) #5, !dbg !85
  %628 = bitcast bfloat %614 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %504, <1 x i16> %628, i1 true) #5, !dbg !85
  %629 = bitcast bfloat %616 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %505, <1 x i16> %629, i1 true) #5, !dbg !85
  %630 = bitcast bfloat %618 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %506, <1 x i16> %630, i1 true) #5, !dbg !85
  %631 = bitcast bfloat %620 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %507, <1 x i16> %631, i1 true) #5, !dbg !85
  %632 = bitcast bfloat %622 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %508, <1 x i16> %632, i1 true) #5, !dbg !85
  %633 = bitcast bfloat %624 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %509, <1 x i16> %633, i1 true) #5, !dbg !85
  %634 = bitcast bfloat %626 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %510, <1 x i16> %634, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %.extract = load i32, ptr addrspace(3) %514, align 16, !dbg !85
  %.extract66 = load i32, ptr addrspace(3) %518, align 4, !dbg !85
  %.extract68 = load i32, ptr addrspace(3) %519, align 8, !dbg !85
  %.extract70 = load i32, ptr addrspace(3) %520, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %610, i1 %26) #5, !dbg !85
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 512, !dbg !54
  %635 = icmp samesign ult i64 %indvars.iv114, 2560, !dbg !54
  br i1 %635, label %521, label %636, !dbg !54

636:                                              ; preds = %521
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %637 = extractelement <16 x float> %609, i64 15, !dbg !86
  %638 = bitcast float %637 to i32, !dbg !86
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 16, i32 31), !dbg !86
  %640 = bitcast i32 %639 to float, !dbg !86
  %641 = fcmp olt float %637, %640, !dbg !88
  %642 = fcmp uno <16 x float> %609, zeroinitializer, !dbg !89
  %643 = extractelement <16 x i1> %642, i64 15, !dbg !91
  %644 = or i1 %643, %641, !dbg !91
  %645 = select i1 %644, float %637, float %640, !dbg !92
  %646 = bitcast float %645 to i32, !dbg !86
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 8, i32 31), !dbg !86
  %648 = bitcast i32 %647 to float, !dbg !86
  %649 = fcmp olt float %645, %648, !dbg !88
  %650 = fcmp uno float %645, 0.000000e+00, !dbg !93
  %651 = or i1 %649, %650, !dbg !91
  %652 = select i1 %651, float %645, float %648, !dbg !92
  %653 = bitcast float %652 to i32, !dbg !86
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 4, i32 31), !dbg !86
  %655 = bitcast i32 %654 to float, !dbg !86
  %656 = fcmp olt float %652, %655, !dbg !88
  %657 = fcmp uno float %652, 0.000000e+00, !dbg !93
  %658 = or i1 %656, %657, !dbg !91
  %659 = select i1 %658, float %652, float %655, !dbg !92
  %660 = bitcast float %659 to i32, !dbg !86
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !86
  %662 = bitcast i32 %661 to float, !dbg !86
  %663 = fcmp olt float %659, %662, !dbg !88
  %664 = fcmp uno float %659, 0.000000e+00, !dbg !93
  %665 = or i1 %663, %664, !dbg !91
  %666 = select i1 %665, float %659, float %662, !dbg !92
  %667 = bitcast float %666 to i32, !dbg !86
  %668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %667, i32 1, i32 31), !dbg !86
  %669 = bitcast i32 %668 to float, !dbg !86
  %670 = fcmp olt float %666, %669, !dbg !88
  %671 = fcmp uno float %666, 0.000000e+00, !dbg !93
  %672 = or i1 %670, %671, !dbg !91
  %673 = extractelement <16 x float> %609, i64 14, !dbg !86
  %674 = bitcast float %673 to i32, !dbg !86
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 16, i32 31), !dbg !86
  %676 = bitcast i32 %675 to float, !dbg !86
  %677 = fcmp olt float %673, %676, !dbg !88
  %678 = extractelement <16 x i1> %642, i64 14, !dbg !91
  %679 = or i1 %678, %677, !dbg !91
  %680 = select i1 %679, float %673, float %676, !dbg !92
  %681 = bitcast float %680 to i32, !dbg !86
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 8, i32 31), !dbg !86
  %683 = bitcast i32 %682 to float, !dbg !86
  %684 = fcmp olt float %680, %683, !dbg !88
  %685 = fcmp uno float %680, 0.000000e+00, !dbg !93
  %686 = or i1 %684, %685, !dbg !91
  %687 = select i1 %686, float %680, float %683, !dbg !92
  %688 = bitcast float %687 to i32, !dbg !86
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %688, i32 4, i32 31), !dbg !86
  %690 = bitcast i32 %689 to float, !dbg !86
  %691 = fcmp olt float %687, %690, !dbg !88
  %692 = fcmp uno float %687, 0.000000e+00, !dbg !93
  %693 = or i1 %691, %692, !dbg !91
  %694 = select i1 %693, float %687, float %690, !dbg !92
  %695 = bitcast float %694 to i32, !dbg !86
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 2, i32 31), !dbg !86
  %697 = bitcast i32 %696 to float, !dbg !86
  %698 = fcmp olt float %694, %697, !dbg !88
  %699 = fcmp uno float %694, 0.000000e+00, !dbg !93
  %700 = or i1 %698, %699, !dbg !91
  %701 = select i1 %700, float %694, float %697, !dbg !92
  %702 = bitcast float %701 to i32, !dbg !86
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 1, i32 31), !dbg !86
  %704 = bitcast i32 %703 to float, !dbg !86
  %705 = fcmp olt float %701, %704, !dbg !88
  %706 = fcmp uno float %701, 0.000000e+00, !dbg !93
  %707 = or i1 %705, %706, !dbg !91
  %708 = extractelement <16 x float> %609, i64 13, !dbg !86
  %709 = bitcast float %708 to i32, !dbg !86
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 16, i32 31), !dbg !86
  %711 = bitcast i32 %710 to float, !dbg !86
  %712 = fcmp olt float %708, %711, !dbg !88
  %713 = extractelement <16 x i1> %642, i64 13, !dbg !91
  %714 = or i1 %713, %712, !dbg !91
  %715 = select i1 %714, float %708, float %711, !dbg !92
  %716 = bitcast float %715 to i32, !dbg !86
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 8, i32 31), !dbg !86
  %718 = bitcast i32 %717 to float, !dbg !86
  %719 = fcmp olt float %715, %718, !dbg !88
  %720 = fcmp uno float %715, 0.000000e+00, !dbg !93
  %721 = or i1 %719, %720, !dbg !91
  %722 = select i1 %721, float %715, float %718, !dbg !92
  %723 = bitcast float %722 to i32, !dbg !86
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 4, i32 31), !dbg !86
  %725 = bitcast i32 %724 to float, !dbg !86
  %726 = fcmp olt float %722, %725, !dbg !88
  %727 = fcmp uno float %722, 0.000000e+00, !dbg !93
  %728 = or i1 %726, %727, !dbg !91
  %729 = select i1 %728, float %722, float %725, !dbg !92
  %730 = bitcast float %729 to i32, !dbg !86
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 2, i32 31), !dbg !86
  %732 = bitcast i32 %731 to float, !dbg !86
  %733 = fcmp olt float %729, %732, !dbg !88
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !93
  %735 = or i1 %733, %734, !dbg !91
  %736 = select i1 %735, float %729, float %732, !dbg !92
  %737 = bitcast float %736 to i32, !dbg !86
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 1, i32 31), !dbg !86
  %739 = bitcast i32 %738 to float, !dbg !86
  %740 = fcmp olt float %736, %739, !dbg !88
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !93
  %742 = or i1 %740, %741, !dbg !91
  %743 = extractelement <16 x float> %609, i64 12, !dbg !86
  %744 = bitcast float %743 to i32, !dbg !86
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 16, i32 31), !dbg !86
  %746 = bitcast i32 %745 to float, !dbg !86
  %747 = fcmp olt float %743, %746, !dbg !88
  %748 = extractelement <16 x i1> %642, i64 12, !dbg !91
  %749 = or i1 %748, %747, !dbg !91
  %750 = select i1 %749, float %743, float %746, !dbg !92
  %751 = bitcast float %750 to i32, !dbg !86
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 8, i32 31), !dbg !86
  %753 = bitcast i32 %752 to float, !dbg !86
  %754 = fcmp olt float %750, %753, !dbg !88
  %755 = fcmp uno float %750, 0.000000e+00, !dbg !93
  %756 = or i1 %754, %755, !dbg !91
  %757 = select i1 %756, float %750, float %753, !dbg !92
  %758 = bitcast float %757 to i32, !dbg !86
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 4, i32 31), !dbg !86
  %760 = bitcast i32 %759 to float, !dbg !86
  %761 = fcmp olt float %757, %760, !dbg !88
  %762 = fcmp uno float %757, 0.000000e+00, !dbg !93
  %763 = or i1 %761, %762, !dbg !91
  %764 = select i1 %763, float %757, float %760, !dbg !92
  %765 = bitcast float %764 to i32, !dbg !86
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 2, i32 31), !dbg !86
  %767 = bitcast i32 %766 to float, !dbg !86
  %768 = fcmp olt float %764, %767, !dbg !88
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !93
  %770 = or i1 %768, %769, !dbg !91
  %771 = select i1 %770, float %764, float %767, !dbg !92
  %772 = bitcast float %771 to i32, !dbg !86
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 1, i32 31), !dbg !86
  %774 = bitcast i32 %773 to float, !dbg !86
  %775 = fcmp olt float %771, %774, !dbg !88
  %776 = fcmp uno float %771, 0.000000e+00, !dbg !93
  %777 = or i1 %775, %776, !dbg !91
  %778 = extractelement <16 x float> %609, i64 11, !dbg !86
  %779 = bitcast float %778 to i32, !dbg !86
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 16, i32 31), !dbg !86
  %781 = bitcast i32 %780 to float, !dbg !86
  %782 = fcmp olt float %778, %781, !dbg !88
  %783 = extractelement <16 x i1> %642, i64 11, !dbg !91
  %784 = or i1 %783, %782, !dbg !91
  %785 = select i1 %784, float %778, float %781, !dbg !92
  %786 = bitcast float %785 to i32, !dbg !86
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 8, i32 31), !dbg !86
  %788 = bitcast i32 %787 to float, !dbg !86
  %789 = fcmp olt float %785, %788, !dbg !88
  %790 = fcmp uno float %785, 0.000000e+00, !dbg !93
  %791 = or i1 %789, %790, !dbg !91
  %792 = select i1 %791, float %785, float %788, !dbg !92
  %793 = bitcast float %792 to i32, !dbg !86
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 4, i32 31), !dbg !86
  %795 = bitcast i32 %794 to float, !dbg !86
  %796 = fcmp olt float %792, %795, !dbg !88
  %797 = fcmp uno float %792, 0.000000e+00, !dbg !93
  %798 = or i1 %796, %797, !dbg !91
  %799 = select i1 %798, float %792, float %795, !dbg !92
  %800 = bitcast float %799 to i32, !dbg !86
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 2, i32 31), !dbg !86
  %802 = bitcast i32 %801 to float, !dbg !86
  %803 = fcmp olt float %799, %802, !dbg !88
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !93
  %805 = or i1 %803, %804, !dbg !91
  %806 = select i1 %805, float %799, float %802, !dbg !92
  %807 = bitcast float %806 to i32, !dbg !86
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 1, i32 31), !dbg !86
  %809 = bitcast i32 %808 to float, !dbg !86
  %810 = fcmp olt float %806, %809, !dbg !88
  %811 = fcmp uno float %806, 0.000000e+00, !dbg !93
  %812 = or i1 %810, %811, !dbg !91
  %813 = extractelement <16 x float> %609, i64 10, !dbg !86
  %814 = bitcast float %813 to i32, !dbg !86
  %815 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %814, i32 16, i32 31), !dbg !86
  %816 = bitcast i32 %815 to float, !dbg !86
  %817 = fcmp olt float %813, %816, !dbg !88
  %818 = extractelement <16 x i1> %642, i64 10, !dbg !91
  %819 = or i1 %818, %817, !dbg !91
  %820 = select i1 %819, float %813, float %816, !dbg !92
  %821 = bitcast float %820 to i32, !dbg !86
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 8, i32 31), !dbg !86
  %823 = bitcast i32 %822 to float, !dbg !86
  %824 = fcmp olt float %820, %823, !dbg !88
  %825 = fcmp uno float %820, 0.000000e+00, !dbg !93
  %826 = or i1 %824, %825, !dbg !91
  %827 = select i1 %826, float %820, float %823, !dbg !92
  %828 = bitcast float %827 to i32, !dbg !86
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 4, i32 31), !dbg !86
  %830 = bitcast i32 %829 to float, !dbg !86
  %831 = fcmp olt float %827, %830, !dbg !88
  %832 = fcmp uno float %827, 0.000000e+00, !dbg !93
  %833 = or i1 %831, %832, !dbg !91
  %834 = select i1 %833, float %827, float %830, !dbg !92
  %835 = bitcast float %834 to i32, !dbg !86
  %836 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %835, i32 2, i32 31), !dbg !86
  %837 = bitcast i32 %836 to float, !dbg !86
  %838 = fcmp olt float %834, %837, !dbg !88
  %839 = fcmp uno float %834, 0.000000e+00, !dbg !93
  %840 = or i1 %838, %839, !dbg !91
  %841 = select i1 %840, float %834, float %837, !dbg !92
  %842 = bitcast float %841 to i32, !dbg !86
  %843 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %842, i32 1, i32 31), !dbg !86
  %844 = bitcast i32 %843 to float, !dbg !86
  %845 = fcmp olt float %841, %844, !dbg !88
  %846 = fcmp uno float %841, 0.000000e+00, !dbg !93
  %847 = or i1 %845, %846, !dbg !91
  %848 = extractelement <16 x float> %609, i64 9, !dbg !86
  %849 = bitcast float %848 to i32, !dbg !86
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 16, i32 31), !dbg !86
  %851 = bitcast i32 %850 to float, !dbg !86
  %852 = fcmp olt float %848, %851, !dbg !88
  %853 = extractelement <16 x i1> %642, i64 9, !dbg !91
  %854 = or i1 %853, %852, !dbg !91
  %855 = select i1 %854, float %848, float %851, !dbg !92
  %856 = bitcast float %855 to i32, !dbg !86
  %857 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %856, i32 8, i32 31), !dbg !86
  %858 = bitcast i32 %857 to float, !dbg !86
  %859 = fcmp olt float %855, %858, !dbg !88
  %860 = fcmp uno float %855, 0.000000e+00, !dbg !93
  %861 = or i1 %859, %860, !dbg !91
  %862 = select i1 %861, float %855, float %858, !dbg !92
  %863 = bitcast float %862 to i32, !dbg !86
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 4, i32 31), !dbg !86
  %865 = bitcast i32 %864 to float, !dbg !86
  %866 = fcmp olt float %862, %865, !dbg !88
  %867 = fcmp uno float %862, 0.000000e+00, !dbg !93
  %868 = or i1 %866, %867, !dbg !91
  %869 = select i1 %868, float %862, float %865, !dbg !92
  %870 = bitcast float %869 to i32, !dbg !86
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 2, i32 31), !dbg !86
  %872 = bitcast i32 %871 to float, !dbg !86
  %873 = fcmp olt float %869, %872, !dbg !88
  %874 = fcmp uno float %869, 0.000000e+00, !dbg !93
  %875 = or i1 %873, %874, !dbg !91
  %876 = select i1 %875, float %869, float %872, !dbg !92
  %877 = bitcast float %876 to i32, !dbg !86
  %878 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %877, i32 1, i32 31), !dbg !86
  %879 = bitcast i32 %878 to float, !dbg !86
  %880 = fcmp olt float %876, %879, !dbg !88
  %881 = fcmp uno float %876, 0.000000e+00, !dbg !93
  %882 = or i1 %880, %881, !dbg !91
  %883 = extractelement <16 x float> %609, i64 8, !dbg !86
  %884 = bitcast float %883 to i32, !dbg !86
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 16, i32 31), !dbg !86
  %886 = bitcast i32 %885 to float, !dbg !86
  %887 = fcmp olt float %883, %886, !dbg !88
  %888 = extractelement <16 x i1> %642, i64 8, !dbg !91
  %889 = or i1 %888, %887, !dbg !91
  %890 = select i1 %889, float %883, float %886, !dbg !92
  %891 = bitcast float %890 to i32, !dbg !86
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 8, i32 31), !dbg !86
  %893 = bitcast i32 %892 to float, !dbg !86
  %894 = fcmp olt float %890, %893, !dbg !88
  %895 = fcmp uno float %890, 0.000000e+00, !dbg !93
  %896 = or i1 %894, %895, !dbg !91
  %897 = select i1 %896, float %890, float %893, !dbg !92
  %898 = bitcast float %897 to i32, !dbg !86
  %899 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %898, i32 4, i32 31), !dbg !86
  %900 = bitcast i32 %899 to float, !dbg !86
  %901 = fcmp olt float %897, %900, !dbg !88
  %902 = fcmp uno float %897, 0.000000e+00, !dbg !93
  %903 = or i1 %901, %902, !dbg !91
  %904 = select i1 %903, float %897, float %900, !dbg !92
  %905 = bitcast float %904 to i32, !dbg !86
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 2, i32 31), !dbg !86
  %907 = bitcast i32 %906 to float, !dbg !86
  %908 = fcmp olt float %904, %907, !dbg !88
  %909 = fcmp uno float %904, 0.000000e+00, !dbg !93
  %910 = or i1 %908, %909, !dbg !91
  %911 = select i1 %910, float %904, float %907, !dbg !92
  %912 = bitcast float %911 to i32, !dbg !86
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 1, i32 31), !dbg !86
  %914 = bitcast i32 %913 to float, !dbg !86
  %915 = fcmp olt float %911, %914, !dbg !88
  %916 = fcmp uno float %911, 0.000000e+00, !dbg !93
  %917 = or i1 %915, %916, !dbg !91
  %918 = and i32 %210, 15, !dbg !86
  %919 = getelementptr float, ptr addrspace(3) @global_smem, i32 %918, !dbg !86
  %920 = select i1 %672, i32 %667, i32 %668, !dbg !92
  %921 = insertelement <1 x i32> poison, i32 %920, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %919, <1 x i32> %921, i1 %404) #5, !dbg !86
  %922 = or disjoint i32 %918, 16, !dbg !86
  %923 = getelementptr float, ptr addrspace(3) @global_smem, i32 %922, !dbg !86
  %924 = select i1 %707, i32 %702, i32 %703, !dbg !92
  %925 = insertelement <1 x i32> poison, i32 %924, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %923, <1 x i32> %925, i1 %404) #5, !dbg !86
  %926 = or disjoint i32 %918, 32, !dbg !86
  %927 = getelementptr float, ptr addrspace(3) @global_smem, i32 %926, !dbg !86
  %928 = select i1 %742, i32 %737, i32 %738, !dbg !92
  %929 = insertelement <1 x i32> poison, i32 %928, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %927, <1 x i32> %929, i1 %404) #5, !dbg !86
  %930 = or disjoint i32 %918, 48, !dbg !86
  %931 = getelementptr float, ptr addrspace(3) @global_smem, i32 %930, !dbg !86
  %932 = select i1 %777, i32 %772, i32 %773, !dbg !92
  %933 = insertelement <1 x i32> poison, i32 %932, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %931, <1 x i32> %933, i1 %404) #5, !dbg !86
  %934 = or disjoint i32 %918, 64, !dbg !86
  %935 = getelementptr float, ptr addrspace(3) @global_smem, i32 %934, !dbg !86
  %936 = select i1 %812, i32 %807, i32 %808, !dbg !92
  %937 = insertelement <1 x i32> poison, i32 %936, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %935, <1 x i32> %937, i1 %404) #5, !dbg !86
  %938 = or disjoint i32 %918, 80, !dbg !86
  %939 = getelementptr float, ptr addrspace(3) @global_smem, i32 %938, !dbg !86
  %940 = select i1 %847, i32 %842, i32 %843, !dbg !92
  %941 = insertelement <1 x i32> poison, i32 %940, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %939, <1 x i32> %941, i1 %404) #5, !dbg !86
  %942 = or disjoint i32 %918, 96, !dbg !86
  %943 = getelementptr float, ptr addrspace(3) @global_smem, i32 %942, !dbg !86
  %944 = select i1 %882, i32 %877, i32 %878, !dbg !92
  %945 = insertelement <1 x i32> poison, i32 %944, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %943, <1 x i32> %945, i1 %404) #5, !dbg !86
  %946 = or disjoint i32 %918, 112, !dbg !86
  %947 = getelementptr float, ptr addrspace(3) @global_smem, i32 %946, !dbg !86
  %948 = select i1 %917, i32 %912, i32 %913, !dbg !92
  %949 = insertelement <1 x i32> poison, i32 %948, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %947, <1 x i32> %949, i1 %404) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %950 = icmp slt i32 %21, 128, !dbg !86
  %951 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %950) #5, !dbg !86
  %952 = bitcast i32 %951 to float, !dbg !86
  %953 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 8, i32 31), !dbg !86
  %954 = bitcast i32 %953 to float, !dbg !86
  %955 = fcmp olt float %952, %954, !dbg !88
  %956 = fcmp uno float %952, 0.000000e+00, !dbg !93
  %957 = or i1 %956, %955, !dbg !91
  %958 = select i1 %957, float %952, float %954, !dbg !92
  %959 = bitcast float %958 to i32, !dbg !86
  %960 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %959, i32 4, i32 31), !dbg !86
  %961 = bitcast i32 %960 to float, !dbg !86
  %962 = fcmp olt float %958, %961, !dbg !88
  %963 = fcmp uno float %958, 0.000000e+00, !dbg !93
  %964 = or i1 %962, %963, !dbg !91
  %965 = select i1 %964, float %958, float %961, !dbg !92
  %966 = bitcast float %965 to i32, !dbg !86
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 2, i32 31), !dbg !86
  %968 = bitcast i32 %967 to float, !dbg !86
  %969 = fcmp olt float %965, %968, !dbg !88
  %970 = fcmp uno float %965, 0.000000e+00, !dbg !93
  %971 = or i1 %969, %970, !dbg !91
  %972 = select i1 %971, float %965, float %968, !dbg !92
  %973 = bitcast float %972 to i32, !dbg !86
  %974 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %973, i32 1, i32 31), !dbg !86
  %975 = bitcast i32 %974 to float, !dbg !86
  %976 = fcmp olt float %972, %975, !dbg !88
  %977 = fcmp uno float %972, 0.000000e+00, !dbg !93
  %978 = or i1 %976, %977, !dbg !91
  %979 = and i32 %21, 15, !dbg !86
  %980 = icmp eq i32 %979, 0, !dbg !86
  %981 = and i1 %950, %980, !dbg !86
  %982 = select i1 %978, i32 %973, i32 %974, !dbg !92
  %983 = insertelement <1 x i32> poison, i32 %982, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %983, i1 %981) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %984 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !86
  %985 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !86
  %986 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !86
  %987 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !86
  %988 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !86
  %989 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !86
  %990 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !86
  %991 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %992 = bitcast float %984 to i32, !dbg !94
  %993 = bitcast float %985 to i32, !dbg !94
  %994 = bitcast float %986 to i32, !dbg !94
  %995 = bitcast float %987 to i32, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %992, i32 %993, i32 %994, i32 %995, i1 true) #5, !dbg !94
  %996 = bitcast float %988 to i32, !dbg !94
  %997 = bitcast float %989 to i32, !dbg !94
  %998 = bitcast float %990 to i32, !dbg !94
  %999 = bitcast float %991 to i32, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %996, i32 %997, i32 %998, i32 %999, i1 true) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %1000 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211, !dbg !94
  %1001 = load float, ptr addrspace(3) %1000, align 4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %1002 = extractelement <16 x float> %609, i64 7, !dbg !95
  %1003 = bitcast float %1002 to i32, !dbg !95
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 16, i32 31), !dbg !95
  %1005 = bitcast i32 %1004 to float, !dbg !95
  %1006 = fcmp ogt float %1002, %1005, !dbg !96
  %1007 = extractelement <16 x i1> %642, i64 7, !dbg !97
  %1008 = or i1 %1007, %1006, !dbg !97
  %1009 = select i1 %1008, float %1002, float %1005, !dbg !98
  %1010 = bitcast float %1009 to i32, !dbg !95
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 8, i32 31), !dbg !95
  %1012 = bitcast i32 %1011 to float, !dbg !95
  %1013 = fcmp ogt float %1009, %1012, !dbg !96
  %1014 = fcmp uno float %1009, 0.000000e+00, !dbg !89
  %1015 = or i1 %1013, %1014, !dbg !97
  %1016 = select i1 %1015, float %1009, float %1012, !dbg !98
  %1017 = bitcast float %1016 to i32, !dbg !95
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 4, i32 31), !dbg !95
  %1019 = bitcast i32 %1018 to float, !dbg !95
  %1020 = fcmp ogt float %1016, %1019, !dbg !96
  %1021 = fcmp uno float %1016, 0.000000e+00, !dbg !89
  %1022 = or i1 %1020, %1021, !dbg !97
  %1023 = select i1 %1022, float %1016, float %1019, !dbg !98
  %1024 = bitcast float %1023 to i32, !dbg !95
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 2, i32 31), !dbg !95
  %1026 = bitcast i32 %1025 to float, !dbg !95
  %1027 = fcmp ogt float %1023, %1026, !dbg !96
  %1028 = fcmp uno float %1023, 0.000000e+00, !dbg !89
  %1029 = or i1 %1027, %1028, !dbg !97
  %1030 = select i1 %1029, float %1023, float %1026, !dbg !98
  %1031 = bitcast float %1030 to i32, !dbg !95
  %1032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1031, i32 1, i32 31), !dbg !95
  %1033 = bitcast i32 %1032 to float, !dbg !95
  %1034 = fcmp ogt float %1030, %1033, !dbg !96
  %1035 = fcmp uno float %1030, 0.000000e+00, !dbg !89
  %1036 = or i1 %1034, %1035, !dbg !97
  %1037 = extractelement <16 x float> %609, i64 6, !dbg !95
  %1038 = bitcast float %1037 to i32, !dbg !95
  %1039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1038, i32 16, i32 31), !dbg !95
  %1040 = bitcast i32 %1039 to float, !dbg !95
  %1041 = fcmp ogt float %1037, %1040, !dbg !96
  %1042 = extractelement <16 x i1> %642, i64 6, !dbg !97
  %1043 = or i1 %1042, %1041, !dbg !97
  %1044 = select i1 %1043, float %1037, float %1040, !dbg !98
  %1045 = bitcast float %1044 to i32, !dbg !95
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 8, i32 31), !dbg !95
  %1047 = bitcast i32 %1046 to float, !dbg !95
  %1048 = fcmp ogt float %1044, %1047, !dbg !96
  %1049 = fcmp uno float %1044, 0.000000e+00, !dbg !89
  %1050 = or i1 %1048, %1049, !dbg !97
  %1051 = select i1 %1050, float %1044, float %1047, !dbg !98
  %1052 = bitcast float %1051 to i32, !dbg !95
  %1053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1052, i32 4, i32 31), !dbg !95
  %1054 = bitcast i32 %1053 to float, !dbg !95
  %1055 = fcmp ogt float %1051, %1054, !dbg !96
  %1056 = fcmp uno float %1051, 0.000000e+00, !dbg !89
  %1057 = or i1 %1055, %1056, !dbg !97
  %1058 = select i1 %1057, float %1051, float %1054, !dbg !98
  %1059 = bitcast float %1058 to i32, !dbg !95
  %1060 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1059, i32 2, i32 31), !dbg !95
  %1061 = bitcast i32 %1060 to float, !dbg !95
  %1062 = fcmp ogt float %1058, %1061, !dbg !96
  %1063 = fcmp uno float %1058, 0.000000e+00, !dbg !89
  %1064 = or i1 %1062, %1063, !dbg !97
  %1065 = select i1 %1064, float %1058, float %1061, !dbg !98
  %1066 = bitcast float %1065 to i32, !dbg !95
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 1, i32 31), !dbg !95
  %1068 = bitcast i32 %1067 to float, !dbg !95
  %1069 = fcmp ogt float %1065, %1068, !dbg !96
  %1070 = fcmp uno float %1065, 0.000000e+00, !dbg !89
  %1071 = or i1 %1069, %1070, !dbg !97
  %1072 = extractelement <16 x float> %609, i64 5, !dbg !95
  %1073 = bitcast float %1072 to i32, !dbg !95
  %1074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1073, i32 16, i32 31), !dbg !95
  %1075 = bitcast i32 %1074 to float, !dbg !95
  %1076 = fcmp ogt float %1072, %1075, !dbg !96
  %1077 = extractelement <16 x i1> %642, i64 5, !dbg !97
  %1078 = or i1 %1077, %1076, !dbg !97
  %1079 = select i1 %1078, float %1072, float %1075, !dbg !98
  %1080 = bitcast float %1079 to i32, !dbg !95
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 8, i32 31), !dbg !95
  %1082 = bitcast i32 %1081 to float, !dbg !95
  %1083 = fcmp ogt float %1079, %1082, !dbg !96
  %1084 = fcmp uno float %1079, 0.000000e+00, !dbg !89
  %1085 = or i1 %1083, %1084, !dbg !97
  %1086 = select i1 %1085, float %1079, float %1082, !dbg !98
  %1087 = bitcast float %1086 to i32, !dbg !95
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 4, i32 31), !dbg !95
  %1089 = bitcast i32 %1088 to float, !dbg !95
  %1090 = fcmp ogt float %1086, %1089, !dbg !96
  %1091 = fcmp uno float %1086, 0.000000e+00, !dbg !89
  %1092 = or i1 %1090, %1091, !dbg !97
  %1093 = select i1 %1092, float %1086, float %1089, !dbg !98
  %1094 = bitcast float %1093 to i32, !dbg !95
  %1095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1094, i32 2, i32 31), !dbg !95
  %1096 = bitcast i32 %1095 to float, !dbg !95
  %1097 = fcmp ogt float %1093, %1096, !dbg !96
  %1098 = fcmp uno float %1093, 0.000000e+00, !dbg !89
  %1099 = or i1 %1097, %1098, !dbg !97
  %1100 = select i1 %1099, float %1093, float %1096, !dbg !98
  %1101 = bitcast float %1100 to i32, !dbg !95
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 1, i32 31), !dbg !95
  %1103 = bitcast i32 %1102 to float, !dbg !95
  %1104 = fcmp ogt float %1100, %1103, !dbg !96
  %1105 = fcmp uno float %1100, 0.000000e+00, !dbg !89
  %1106 = or i1 %1104, %1105, !dbg !97
  %1107 = extractelement <16 x float> %609, i64 4, !dbg !95
  %1108 = bitcast float %1107 to i32, !dbg !95
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 16, i32 31), !dbg !95
  %1110 = bitcast i32 %1109 to float, !dbg !95
  %1111 = fcmp ogt float %1107, %1110, !dbg !96
  %1112 = extractelement <16 x i1> %642, i64 4, !dbg !97
  %1113 = or i1 %1112, %1111, !dbg !97
  %1114 = select i1 %1113, float %1107, float %1110, !dbg !98
  %1115 = bitcast float %1114 to i32, !dbg !95
  %1116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1115, i32 8, i32 31), !dbg !95
  %1117 = bitcast i32 %1116 to float, !dbg !95
  %1118 = fcmp ogt float %1114, %1117, !dbg !96
  %1119 = fcmp uno float %1114, 0.000000e+00, !dbg !89
  %1120 = or i1 %1118, %1119, !dbg !97
  %1121 = select i1 %1120, float %1114, float %1117, !dbg !98
  %1122 = bitcast float %1121 to i32, !dbg !95
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 4, i32 31), !dbg !95
  %1124 = bitcast i32 %1123 to float, !dbg !95
  %1125 = fcmp ogt float %1121, %1124, !dbg !96
  %1126 = fcmp uno float %1121, 0.000000e+00, !dbg !89
  %1127 = or i1 %1125, %1126, !dbg !97
  %1128 = select i1 %1127, float %1121, float %1124, !dbg !98
  %1129 = bitcast float %1128 to i32, !dbg !95
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 2, i32 31), !dbg !95
  %1131 = bitcast i32 %1130 to float, !dbg !95
  %1132 = fcmp ogt float %1128, %1131, !dbg !96
  %1133 = fcmp uno float %1128, 0.000000e+00, !dbg !89
  %1134 = or i1 %1132, %1133, !dbg !97
  %1135 = select i1 %1134, float %1128, float %1131, !dbg !98
  %1136 = bitcast float %1135 to i32, !dbg !95
  %1137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1136, i32 1, i32 31), !dbg !95
  %1138 = bitcast i32 %1137 to float, !dbg !95
  %1139 = fcmp ogt float %1135, %1138, !dbg !96
  %1140 = fcmp uno float %1135, 0.000000e+00, !dbg !89
  %1141 = or i1 %1139, %1140, !dbg !97
  %1142 = extractelement <16 x float> %609, i64 3, !dbg !95
  %1143 = bitcast float %1142 to i32, !dbg !95
  %1144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1143, i32 16, i32 31), !dbg !95
  %1145 = bitcast i32 %1144 to float, !dbg !95
  %1146 = fcmp ogt float %1142, %1145, !dbg !96
  %1147 = extractelement <16 x i1> %642, i64 3, !dbg !97
  %1148 = or i1 %1147, %1146, !dbg !97
  %1149 = select i1 %1148, float %1142, float %1145, !dbg !98
  %1150 = bitcast float %1149 to i32, !dbg !95
  %1151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1150, i32 8, i32 31), !dbg !95
  %1152 = bitcast i32 %1151 to float, !dbg !95
  %1153 = fcmp ogt float %1149, %1152, !dbg !96
  %1154 = fcmp uno float %1149, 0.000000e+00, !dbg !89
  %1155 = or i1 %1153, %1154, !dbg !97
  %1156 = select i1 %1155, float %1149, float %1152, !dbg !98
  %1157 = bitcast float %1156 to i32, !dbg !95
  %1158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1157, i32 4, i32 31), !dbg !95
  %1159 = bitcast i32 %1158 to float, !dbg !95
  %1160 = fcmp ogt float %1156, %1159, !dbg !96
  %1161 = fcmp uno float %1156, 0.000000e+00, !dbg !89
  %1162 = or i1 %1160, %1161, !dbg !97
  %1163 = select i1 %1162, float %1156, float %1159, !dbg !98
  %1164 = bitcast float %1163 to i32, !dbg !95
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 2, i32 31), !dbg !95
  %1166 = bitcast i32 %1165 to float, !dbg !95
  %1167 = fcmp ogt float %1163, %1166, !dbg !96
  %1168 = fcmp uno float %1163, 0.000000e+00, !dbg !89
  %1169 = or i1 %1167, %1168, !dbg !97
  %1170 = select i1 %1169, float %1163, float %1166, !dbg !98
  %1171 = bitcast float %1170 to i32, !dbg !95
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 1, i32 31), !dbg !95
  %1173 = bitcast i32 %1172 to float, !dbg !95
  %1174 = fcmp ogt float %1170, %1173, !dbg !96
  %1175 = fcmp uno float %1170, 0.000000e+00, !dbg !89
  %1176 = or i1 %1174, %1175, !dbg !97
  %1177 = extractelement <16 x float> %609, i64 2, !dbg !95
  %1178 = bitcast float %1177 to i32, !dbg !95
  %1179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1178, i32 16, i32 31), !dbg !95
  %1180 = bitcast i32 %1179 to float, !dbg !95
  %1181 = fcmp ogt float %1177, %1180, !dbg !96
  %1182 = extractelement <16 x i1> %642, i64 2, !dbg !97
  %1183 = or i1 %1182, %1181, !dbg !97
  %1184 = select i1 %1183, float %1177, float %1180, !dbg !98
  %1185 = bitcast float %1184 to i32, !dbg !95
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 8, i32 31), !dbg !95
  %1187 = bitcast i32 %1186 to float, !dbg !95
  %1188 = fcmp ogt float %1184, %1187, !dbg !96
  %1189 = fcmp uno float %1184, 0.000000e+00, !dbg !89
  %1190 = or i1 %1188, %1189, !dbg !97
  %1191 = select i1 %1190, float %1184, float %1187, !dbg !98
  %1192 = bitcast float %1191 to i32, !dbg !95
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 4, i32 31), !dbg !95
  %1194 = bitcast i32 %1193 to float, !dbg !95
  %1195 = fcmp ogt float %1191, %1194, !dbg !96
  %1196 = fcmp uno float %1191, 0.000000e+00, !dbg !89
  %1197 = or i1 %1195, %1196, !dbg !97
  %1198 = select i1 %1197, float %1191, float %1194, !dbg !98
  %1199 = bitcast float %1198 to i32, !dbg !95
  %1200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1199, i32 2, i32 31), !dbg !95
  %1201 = bitcast i32 %1200 to float, !dbg !95
  %1202 = fcmp ogt float %1198, %1201, !dbg !96
  %1203 = fcmp uno float %1198, 0.000000e+00, !dbg !89
  %1204 = or i1 %1202, %1203, !dbg !97
  %1205 = select i1 %1204, float %1198, float %1201, !dbg !98
  %1206 = bitcast float %1205 to i32, !dbg !95
  %1207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1206, i32 1, i32 31), !dbg !95
  %1208 = bitcast i32 %1207 to float, !dbg !95
  %1209 = fcmp ogt float %1205, %1208, !dbg !96
  %1210 = fcmp uno float %1205, 0.000000e+00, !dbg !89
  %1211 = or i1 %1209, %1210, !dbg !97
  %1212 = extractelement <16 x float> %609, i64 1, !dbg !95
  %1213 = bitcast float %1212 to i32, !dbg !95
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 16, i32 31), !dbg !95
  %1215 = bitcast i32 %1214 to float, !dbg !95
  %1216 = fcmp ogt float %1212, %1215, !dbg !96
  %1217 = extractelement <16 x i1> %642, i64 1, !dbg !97
  %1218 = or i1 %1217, %1216, !dbg !97
  %1219 = select i1 %1218, float %1212, float %1215, !dbg !98
  %1220 = bitcast float %1219 to i32, !dbg !95
  %1221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1220, i32 8, i32 31), !dbg !95
  %1222 = bitcast i32 %1221 to float, !dbg !95
  %1223 = fcmp ogt float %1219, %1222, !dbg !96
  %1224 = fcmp uno float %1219, 0.000000e+00, !dbg !89
  %1225 = or i1 %1223, %1224, !dbg !97
  %1226 = select i1 %1225, float %1219, float %1222, !dbg !98
  %1227 = bitcast float %1226 to i32, !dbg !95
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 4, i32 31), !dbg !95
  %1229 = bitcast i32 %1228 to float, !dbg !95
  %1230 = fcmp ogt float %1226, %1229, !dbg !96
  %1231 = fcmp uno float %1226, 0.000000e+00, !dbg !89
  %1232 = or i1 %1230, %1231, !dbg !97
  %1233 = select i1 %1232, float %1226, float %1229, !dbg !98
  %1234 = bitcast float %1233 to i32, !dbg !95
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 2, i32 31), !dbg !95
  %1236 = bitcast i32 %1235 to float, !dbg !95
  %1237 = fcmp ogt float %1233, %1236, !dbg !96
  %1238 = fcmp uno float %1233, 0.000000e+00, !dbg !89
  %1239 = or i1 %1237, %1238, !dbg !97
  %1240 = select i1 %1239, float %1233, float %1236, !dbg !98
  %1241 = bitcast float %1240 to i32, !dbg !95
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1241, i32 1, i32 31), !dbg !95
  %1243 = bitcast i32 %1242 to float, !dbg !95
  %1244 = fcmp ogt float %1240, %1243, !dbg !96
  %1245 = fcmp uno float %1240, 0.000000e+00, !dbg !89
  %1246 = or i1 %1244, %1245, !dbg !97
  %1247 = extractelement <16 x float> %609, i64 0, !dbg !95
  %1248 = bitcast float %1247 to i32, !dbg !95
  %1249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1248, i32 16, i32 31), !dbg !95
  %1250 = bitcast i32 %1249 to float, !dbg !95
  %1251 = fcmp ogt float %1247, %1250, !dbg !96
  %1252 = extractelement <16 x i1> %642, i64 0, !dbg !97
  %1253 = or i1 %1252, %1251, !dbg !97
  %1254 = select i1 %1253, float %1247, float %1250, !dbg !98
  %1255 = bitcast float %1254 to i32, !dbg !95
  %1256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1255, i32 8, i32 31), !dbg !95
  %1257 = bitcast i32 %1256 to float, !dbg !95
  %1258 = fcmp ogt float %1254, %1257, !dbg !96
  %1259 = fcmp uno float %1254, 0.000000e+00, !dbg !89
  %1260 = or i1 %1258, %1259, !dbg !97
  %1261 = select i1 %1260, float %1254, float %1257, !dbg !98
  %1262 = bitcast float %1261 to i32, !dbg !95
  %1263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1262, i32 4, i32 31), !dbg !95
  %1264 = bitcast i32 %1263 to float, !dbg !95
  %1265 = fcmp ogt float %1261, %1264, !dbg !96
  %1266 = fcmp uno float %1261, 0.000000e+00, !dbg !89
  %1267 = or i1 %1265, %1266, !dbg !97
  %1268 = select i1 %1267, float %1261, float %1264, !dbg !98
  %1269 = bitcast float %1268 to i32, !dbg !95
  %1270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1269, i32 2, i32 31), !dbg !95
  %1271 = bitcast i32 %1270 to float, !dbg !95
  %1272 = fcmp ogt float %1268, %1271, !dbg !96
  %1273 = fcmp uno float %1268, 0.000000e+00, !dbg !89
  %1274 = or i1 %1272, %1273, !dbg !97
  %1275 = select i1 %1274, float %1268, float %1271, !dbg !98
  %1276 = bitcast float %1275 to i32, !dbg !95
  %1277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1276, i32 1, i32 31), !dbg !95
  %1278 = bitcast i32 %1277 to float, !dbg !95
  %1279 = fcmp ogt float %1275, %1278, !dbg !96
  %1280 = fcmp uno float %1275, 0.000000e+00, !dbg !89
  %1281 = or i1 %1279, %1280, !dbg !97
  %1282 = select i1 %1036, i32 %1031, i32 %1032, !dbg !98
  %1283 = insertelement <1 x i32> poison, i32 %1282, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %919, <1 x i32> %1283, i1 %404) #5, !dbg !95
  %1284 = select i1 %1071, i32 %1066, i32 %1067, !dbg !98
  %1285 = insertelement <1 x i32> poison, i32 %1284, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %923, <1 x i32> %1285, i1 %404) #5, !dbg !95
  %1286 = select i1 %1106, i32 %1101, i32 %1102, !dbg !98
  %1287 = insertelement <1 x i32> poison, i32 %1286, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %927, <1 x i32> %1287, i1 %404) #5, !dbg !95
  %1288 = select i1 %1141, i32 %1136, i32 %1137, !dbg !98
  %1289 = insertelement <1 x i32> poison, i32 %1288, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %931, <1 x i32> %1289, i1 %404) #5, !dbg !95
  %1290 = select i1 %1176, i32 %1171, i32 %1172, !dbg !98
  %1291 = insertelement <1 x i32> poison, i32 %1290, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %935, <1 x i32> %1291, i1 %404) #5, !dbg !95
  %1292 = select i1 %1211, i32 %1206, i32 %1207, !dbg !98
  %1293 = insertelement <1 x i32> poison, i32 %1292, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %939, <1 x i32> %1293, i1 %404) #5, !dbg !95
  %1294 = select i1 %1246, i32 %1241, i32 %1242, !dbg !98
  %1295 = insertelement <1 x i32> poison, i32 %1294, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %943, <1 x i32> %1295, i1 %404) #5, !dbg !95
  %1296 = select i1 %1281, i32 %1276, i32 %1277, !dbg !98
  %1297 = insertelement <1 x i32> poison, i32 %1296, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %947, <1 x i32> %1297, i1 %404) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %1298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %950) #5, !dbg !95
  %1299 = bitcast i32 %1298 to float, !dbg !95
  %1300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 8, i32 31), !dbg !95
  %1301 = bitcast i32 %1300 to float, !dbg !95
  %1302 = fcmp ogt float %1299, %1301, !dbg !96
  %1303 = fcmp uno float %1299, 0.000000e+00, !dbg !89
  %1304 = or i1 %1303, %1302, !dbg !97
  %1305 = select i1 %1304, float %1299, float %1301, !dbg !98
  %1306 = bitcast float %1305 to i32, !dbg !95
  %1307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1306, i32 4, i32 31), !dbg !95
  %1308 = bitcast i32 %1307 to float, !dbg !95
  %1309 = fcmp ogt float %1305, %1308, !dbg !96
  %1310 = fcmp uno float %1305, 0.000000e+00, !dbg !89
  %1311 = or i1 %1309, %1310, !dbg !97
  %1312 = select i1 %1311, float %1305, float %1308, !dbg !98
  %1313 = bitcast float %1312 to i32, !dbg !95
  %1314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1313, i32 2, i32 31), !dbg !95
  %1315 = bitcast i32 %1314 to float, !dbg !95
  %1316 = fcmp ogt float %1312, %1315, !dbg !96
  %1317 = fcmp uno float %1312, 0.000000e+00, !dbg !89
  %1318 = or i1 %1316, %1317, !dbg !97
  %1319 = select i1 %1318, float %1312, float %1315, !dbg !98
  %1320 = bitcast float %1319 to i32, !dbg !95
  %1321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1320, i32 1, i32 31), !dbg !95
  %1322 = bitcast i32 %1321 to float, !dbg !95
  %1323 = fcmp ogt float %1319, %1322, !dbg !96
  %1324 = fcmp uno float %1319, 0.000000e+00, !dbg !89
  %1325 = or i1 %1323, %1324, !dbg !97
  %1326 = select i1 %1325, i32 %1320, i32 %1321, !dbg !98
  %1327 = insertelement <1 x i32> poison, i32 %1326, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %1327, i1 %981) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %1328 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %1329 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !95
  %1330 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !95
  %1331 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !95
  %1332 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !95
  %1333 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !95
  %1334 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !95
  %1335 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1336 = bitcast float %1328 to i32, !dbg !99
  %1337 = bitcast float %1329 to i32, !dbg !99
  %1338 = bitcast float %1330 to i32, !dbg !99
  %1339 = bitcast float %1331 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1336, i32 %1337, i32 %1338, i32 %1339, i1 true) #5, !dbg !99
  %1340 = bitcast float %1332 to i32, !dbg !99
  %1341 = bitcast float %1333 to i32, !dbg !99
  %1342 = bitcast float %1334 to i32, !dbg !99
  %1343 = bitcast float %1335 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1340, i32 %1341, i32 %1342, i32 %1343, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1344 = load float, ptr addrspace(3) %1000, align 4, !dbg !99
  %1345 = sext i32 %212 to i64, !dbg !100
  %1346 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1345, !dbg !100
  %1347 = fptrunc float %1001 to bfloat, !dbg !94
  %1348 = and i32 %21, 504, !dbg !94
  %1349 = icmp eq i32 %1348, 0, !dbg !94
  %1350 = bitcast bfloat %1347 to i16, !dbg !94
  %1351 = and i1 %1349, %213, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1350, ptr addrspace(1) %1346, i1 %1351) #5, !dbg !94
  %1352 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1345, !dbg !101
  %1353 = fptrunc float %1344 to bfloat, !dbg !99
  %1354 = bitcast bfloat %1353 to i16, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1354, ptr addrspace(1) %1352, i1 %1351) #5, !dbg !99
  %1355 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1345, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1350, ptr addrspace(1) %1355, i1 %1351) #5, !dbg !103
  %1356 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1345, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1354, ptr addrspace(1) %1356, i1 %1351) #5, !dbg !105
  %1357 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1345, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1350, ptr addrspace(1) %1357, i1 %1351) #5, !dbg !107
  %1358 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1345, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1354, ptr addrspace(1) %1358, i1 %1351) #5, !dbg !109
  %1359 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1345, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1350, ptr addrspace(1) %1359, i1 %1351) #5, !dbg !111
  %1360 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1345, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1354, ptr addrspace(1) %1360, i1 %1351) #5, !dbg !113
  %1361 = insertelement <8 x float> poison, float %991, i64 0, !dbg !114
  %1362 = insertelement <8 x float> %1361, float %990, i64 1, !dbg !114
  %1363 = insertelement <8 x float> %1362, float %989, i64 2, !dbg !114
  %1364 = insertelement <8 x float> %1363, float %988, i64 3, !dbg !114
  %1365 = insertelement <8 x float> %1364, float %987, i64 4, !dbg !114
  %1366 = insertelement <8 x float> %1365, float %986, i64 5, !dbg !114
  %1367 = insertelement <8 x float> %1366, float %985, i64 6, !dbg !114
  %1368 = insertelement <8 x float> %1367, float %984, i64 7, !dbg !114
  %1369 = fcmp oge <8 x float> %1368, zeroinitializer, !dbg !114
  %1370 = select <8 x i1> %1369, <8 x float> zeroinitializer, <8 x float> %1368, !dbg !114
  %1371 = fsub <8 x float> zeroinitializer, %1370, !dbg !116
  %1372 = insertelement <8 x float> poison, float %1335, i64 0, !dbg !117
  %1373 = insertelement <8 x float> %1372, float %1334, i64 1, !dbg !117
  %1374 = insertelement <8 x float> %1373, float %1333, i64 2, !dbg !117
  %1375 = insertelement <8 x float> %1374, float %1332, i64 3, !dbg !117
  %1376 = insertelement <8 x float> %1375, float %1331, i64 4, !dbg !117
  %1377 = insertelement <8 x float> %1376, float %1330, i64 5, !dbg !117
  %1378 = insertelement <8 x float> %1377, float %1329, i64 6, !dbg !117
  %1379 = insertelement <8 x float> %1378, float %1328, i64 7, !dbg !117
  %1380 = fcmp ole <8 x float> %1379, zeroinitializer, !dbg !117
  %1381 = select <8 x i1> %1380, <8 x float> zeroinitializer, <8 x float> %1379, !dbg !117
  %1382 = fcmp ogt <8 x float> %1371, %1381, !dbg !119
  %1383 = fcmp uno <8 x float> %1371, zeroinitializer, !dbg !121
  %1384 = or <8 x i1> %1383, %1382, !dbg !122
  %1385 = select <8 x i1> %1384, <8 x float> %1371, <8 x float> %1381, !dbg !123
  %1386 = fmul <8 x float> %1385, splat (float 0x3F80204080000000), !dbg !124
  %1387 = fcmp ogt <8 x float> %1386, splat (float 0x3EE4F8B580000000), !dbg !125
  %1388 = extractelement <8 x float> %1386, i64 7, !dbg !127
  %1389 = fcmp uno float %1388, 0.000000e+00, !dbg !128
  %1390 = extractelement <8 x float> %1386, i64 6, !dbg !127
  %1391 = fcmp uno float %1390, 0.000000e+00, !dbg !128
  %1392 = extractelement <8 x float> %1386, i64 5, !dbg !127
  %1393 = fcmp uno float %1392, 0.000000e+00, !dbg !128
  %1394 = extractelement <8 x float> %1386, i64 4, !dbg !127
  %1395 = fcmp uno float %1394, 0.000000e+00, !dbg !128
  %1396 = extractelement <8 x float> %1386, i64 3, !dbg !127
  %1397 = fcmp uno float %1396, 0.000000e+00, !dbg !128
  %1398 = extractelement <8 x float> %1386, i64 2, !dbg !127
  %1399 = fcmp uno float %1398, 0.000000e+00, !dbg !128
  %1400 = extractelement <8 x float> %1386, i64 1, !dbg !127
  %1401 = fcmp uno float %1400, 0.000000e+00, !dbg !128
  %1402 = extractelement <8 x float> %1386, i64 0, !dbg !127
  %1403 = fcmp uno float %1402, 0.000000e+00, !dbg !128
  %1404 = extractelement <8 x i1> %1387, i64 7, !dbg !129
  %1405 = or i1 %1404, %1389, !dbg !129
  %1406 = extractelement <8 x i1> %1387, i64 6, !dbg !129
  %1407 = or i1 %1406, %1391, !dbg !129
  %1408 = extractelement <8 x i1> %1387, i64 5, !dbg !129
  %1409 = or i1 %1408, %1393, !dbg !129
  %1410 = extractelement <8 x i1> %1387, i64 4, !dbg !129
  %1411 = or i1 %1410, %1395, !dbg !129
  %1412 = extractelement <8 x i1> %1387, i64 3, !dbg !129
  %1413 = or i1 %1412, %1397, !dbg !129
  %1414 = extractelement <8 x i1> %1387, i64 2, !dbg !129
  %1415 = or i1 %1414, %1399, !dbg !129
  %1416 = extractelement <8 x i1> %1387, i64 1, !dbg !129
  %1417 = or i1 %1416, %1401, !dbg !129
  %1418 = extractelement <8 x i1> %1387, i64 0, !dbg !129
  %1419 = or i1 %1418, %1403, !dbg !129
  %1420 = select i1 %1405, float %1388, float 0x3EE4F8B580000000, !dbg !127
  %1421 = select i1 %1407, float %1390, float 0x3EE4F8B580000000, !dbg !127
  %1422 = select i1 %1409, float %1392, float 0x3EE4F8B580000000, !dbg !127
  %1423 = select i1 %1411, float %1394, float 0x3EE4F8B580000000, !dbg !127
  %1424 = select i1 %1413, float %1396, float 0x3EE4F8B580000000, !dbg !127
  %1425 = select i1 %1415, float %1398, float 0x3EE4F8B580000000, !dbg !127
  %1426 = select i1 %1417, float %1400, float 0x3EE4F8B580000000, !dbg !127
  %1427 = select i1 %1419, float %1402, float 0x3EE4F8B580000000, !dbg !127
  %1428 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1420), !dbg !130
  %1429 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1421), !dbg !130
  %1430 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1422), !dbg !130
  %1431 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1423), !dbg !130
  %1432 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1424), !dbg !130
  %1433 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1425), !dbg !130
  %1434 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1426), !dbg !130
  %1435 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1427), !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %1436 = bitcast float %1428 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1436, i1 true) #5, !dbg !131
  %1437 = bitcast float %1429 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1437, i1 true) #5, !dbg !131
  %1438 = bitcast float %1430 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1438, i1 true) #5, !dbg !131
  %1439 = bitcast float %1431 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1439, i1 true) #5, !dbg !131
  %1440 = bitcast float %1432 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 32), <1 x i32> %1440, i1 true) #5, !dbg !131
  %1441 = bitcast float %1433 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 40), <1 x i32> %1441, i1 true) #5, !dbg !131
  %1442 = bitcast float %1434 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 48), <1 x i32> %1442, i1 true) #5, !dbg !131
  %1443 = bitcast float %1435 to <1 x i32>, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 56), <1 x i32> %1443, i1 true) #5, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %.idx = shl nuw nsw i32 %23, 3, !dbg !131
  %1444 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !131
  %1445 = load float, ptr addrspace(3) %1444, align 8, !dbg !131
  br label %1446, !dbg !132

1446:                                             ; preds = %636, %1446
  %indvars.iv116 = phi i64 [ 0, %636 ], [ %indvars.iv.next117, %1446 ]
  %1447 = trunc nuw nsw i64 %indvars.iv116 to i32, !dbg !133
  %1448 = add i32 %31, %1447, !dbg !133
  %1449 = sext i32 %1448 to i64, !dbg !134
  %1450 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1449, !dbg !134
  %1451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1450, i1 %26) #5, !dbg !135
  %1452 = extractvalue { i32, i32, i32, i32 } %1451, 0, !dbg !135
  %1453 = bitcast i32 %1452 to <2 x bfloat>, !dbg !135
  %1454 = extractvalue { i32, i32, i32, i32 } %1451, 1, !dbg !135
  %1455 = bitcast i32 %1454 to <2 x bfloat>, !dbg !135
  %1456 = extractvalue { i32, i32, i32, i32 } %1451, 2, !dbg !135
  %1457 = bitcast i32 %1456 to <2 x bfloat>, !dbg !135
  %1458 = extractvalue { i32, i32, i32, i32 } %1451, 3, !dbg !135
  %1459 = bitcast i32 %1458 to <2 x bfloat>, !dbg !135
  %1460 = extractelement <2 x bfloat> %1453, i64 0, !dbg !135
  %1461 = extractelement <2 x bfloat> %1453, i64 1, !dbg !135
  %1462 = extractelement <2 x bfloat> %1455, i64 0, !dbg !135
  %1463 = extractelement <2 x bfloat> %1455, i64 1, !dbg !135
  %1464 = extractelement <2 x bfloat> %1457, i64 0, !dbg !135
  %1465 = extractelement <2 x bfloat> %1457, i64 1, !dbg !135
  %1466 = extractelement <2 x bfloat> %1459, i64 0, !dbg !135
  %1467 = extractelement <2 x bfloat> %1459, i64 1, !dbg !135
  %1468 = fpext bfloat %1460 to float, !dbg !136
  %1469 = fpext bfloat %1461 to float, !dbg !136
  %1470 = fpext bfloat %1462 to float, !dbg !136
  %1471 = fpext bfloat %1463 to float, !dbg !136
  %1472 = fpext bfloat %1464 to float, !dbg !136
  %1473 = fpext bfloat %1465 to float, !dbg !136
  %1474 = fpext bfloat %1466 to float, !dbg !136
  %1475 = fpext bfloat %1467 to float, !dbg !136
  %1476 = fmul float %1445, %1468, !dbg !131
  %1477 = fmul float %1445, %1469, !dbg !131
  %1478 = fmul float %1445, %1470, !dbg !131
  %1479 = fmul float %1445, %1471, !dbg !131
  %1480 = fmul float %1445, %1472, !dbg !131
  %1481 = fmul float %1445, %1473, !dbg !131
  %1482 = fmul float %1445, %1474, !dbg !131
  %1483 = fmul float %1445, %1475, !dbg !131
  %1484 = tail call float @llvm.nvvm.round.f(float %1476) #5, !dbg !137
  %1485 = tail call float @llvm.nvvm.round.f(float %1477) #5, !dbg !137
  %1486 = tail call float @llvm.nvvm.round.f(float %1478) #5, !dbg !137
  %1487 = tail call float @llvm.nvvm.round.f(float %1479) #5, !dbg !137
  %1488 = tail call float @llvm.nvvm.round.f(float %1480) #5, !dbg !137
  %1489 = tail call float @llvm.nvvm.round.f(float %1481) #5, !dbg !137
  %1490 = tail call float @llvm.nvvm.round.f(float %1482) #5, !dbg !137
  %1491 = tail call float @llvm.nvvm.round.f(float %1483) #5, !dbg !137
  %1492 = insertelement <4 x float> poison, float %1484, i64 0, !dbg !138
  %1493 = insertelement <4 x float> %1492, float %1485, i64 1, !dbg !138
  %1494 = insertelement <4 x float> %1493, float %1486, i64 2, !dbg !138
  %1495 = insertelement <4 x float> %1494, float %1487, i64 3, !dbg !138
  %1496 = fcmp ogt <4 x float> %1495, splat (float -1.270000e+02), !dbg !138
  %1497 = fcmp uno <4 x float> %1495, zeroinitializer, !dbg !140
  %1498 = or <4 x i1> %1496, %1497, !dbg !141
  %1499 = select <4 x i1> %1498, <4 x float> %1495, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1500 = fcmp olt <4 x float> %1499, splat (float 1.270000e+02), !dbg !143
  %1501 = fcmp uno <4 x float> %1499, zeroinitializer, !dbg !145
  %1502 = or <4 x i1> %1500, %1501, !dbg !146
  %1503 = fptosi <4 x float> %1499 to <4 x i8>, !dbg !147
  %1504 = select <4 x i1> %1502, <4 x i8> %1503, <4 x i8> splat (i8 127), !dbg !148
  %1505 = insertelement <4 x float> poison, float %1488, i64 0, !dbg !138
  %1506 = insertelement <4 x float> %1505, float %1489, i64 1, !dbg !138
  %1507 = insertelement <4 x float> %1506, float %1490, i64 2, !dbg !138
  %1508 = insertelement <4 x float> %1507, float %1491, i64 3, !dbg !138
  %1509 = fcmp ogt <4 x float> %1508, splat (float -1.270000e+02), !dbg !138
  %1510 = fcmp uno <4 x float> %1508, zeroinitializer, !dbg !140
  %1511 = or <4 x i1> %1509, %1510, !dbg !141
  %1512 = select <4 x i1> %1511, <4 x float> %1508, <4 x float> splat (float -1.270000e+02), !dbg !142
  %1513 = fcmp olt <4 x float> %1512, splat (float 1.270000e+02), !dbg !143
  %1514 = fcmp uno <4 x float> %1512, zeroinitializer, !dbg !145
  %1515 = or <4 x i1> %1513, %1514, !dbg !146
  %1516 = fptosi <4 x float> %1512 to <4 x i8>, !dbg !147
  %1517 = select <4 x i1> %1515, <4 x i8> %1516, <4 x i8> splat (i8 127), !dbg !148
  %1518 = getelementptr i8, ptr addrspace(1) %12, i64 %1449, !dbg !149
  %1519 = bitcast <4 x i8> %1504 to i32, !dbg !150
  %1520 = bitcast <4 x i8> %1517 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1519, i32 %1520, ptr addrspace(1) %1518, i1 %26) #5, !dbg !150
  %1521 = getelementptr i8, ptr addrspace(1) %13, i64 %1449, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1519, i32 %1520, ptr addrspace(1) %1521, i1 %26) #5, !dbg !152
  %1522 = getelementptr i8, ptr addrspace(1) %14, i64 %1449, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1519, i32 %1520, ptr addrspace(1) %1522, i1 %26) #5, !dbg !154
  %1523 = getelementptr i8, ptr addrspace(1) %15, i64 %1449, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1519, i32 %1520, ptr addrspace(1) %1523, i1 %26) #5, !dbg !156
  %indvars.iv.next117 = add nuw nsw i64 %indvars.iv116, 512, !dbg !132
  %1524 = icmp samesign ult i64 %indvars.iv116, 2560, !dbg !132
  br i1 %1524, label %1446, label %1525, !dbg !132

1525:                                             ; preds = %1446
  ret void, !dbg !157
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 85, column: 50, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 59, column: 41, scope: !6)
!58 = !DILocation(line: 59, column: 34, scope: !6)
!59 = !DILocation(line: 59, column: 51, scope: !6)
!60 = !DILocation(line: 59, column: 113, scope: !6)
!61 = !DILocation(line: 60, column: 42, scope: !6)
!62 = !DILocation(line: 60, column: 35, scope: !6)
!63 = !DILocation(line: 60, column: 49, scope: !6)
!64 = !DILocation(line: 61, column: 35, scope: !6)
!65 = !DILocation(line: 61, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 102, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 63, column: 95, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 74, column: 24, scope: !6)
!75 = !DILocation(line: 76, column: 24, scope: !6)
!76 = !DILocation(line: 79, column: 24, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !78)
!82 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !78)
!83 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !78)
!84 = !DILocation(line: 86, column: 29, scope: !6)
!85 = !DILocation(line: 86, column: 53, scope: !6)
!86 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 87, column: 40, scope: !6)
!88 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !90)
!90 = !DILocation(line: 88, column: 40, scope: !6)
!91 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !87)
!92 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !87)
!93 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !87)
!94 = !DILocation(line: 89, column: 37, scope: !6)
!95 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !90)
!96 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !90)
!97 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !90)
!98 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !90)
!99 = !DILocation(line: 90, column: 37, scope: !6)
!100 = !DILocation(line: 89, column: 25, scope: !6)
!101 = !DILocation(line: 90, column: 25, scope: !6)
!102 = !DILocation(line: 91, column: 25, scope: !6)
!103 = !DILocation(line: 91, column: 37, scope: !6)
!104 = !DILocation(line: 92, column: 25, scope: !6)
!105 = !DILocation(line: 92, column: 37, scope: !6)
!106 = !DILocation(line: 93, column: 25, scope: !6)
!107 = !DILocation(line: 93, column: 37, scope: !6)
!108 = !DILocation(line: 94, column: 25, scope: !6)
!109 = !DILocation(line: 94, column: 37, scope: !6)
!110 = !DILocation(line: 95, column: 25, scope: !6)
!111 = !DILocation(line: 95, column: 37, scope: !6)
!112 = !DILocation(line: 96, column: 26, scope: !6)
!113 = !DILocation(line: 96, column: 38, scope: !6)
!114 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !115)
!115 = !DILocation(line: 105, column: 46, scope: !6)
!116 = !DILocation(line: 106, column: 17, scope: !6)
!117 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !118)
!118 = !DILocation(line: 107, column: 46, scope: !6)
!119 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 108, column: 46, scope: !6)
!121 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !120)
!122 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !120)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !120)
!124 = !DILocation(line: 110, column: 24, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 113, column: 46, scope: !6)
!127 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 116, column: 25, scope: !6)
!131 = !DILocation(line: 119, column: 24, scope: !6)
!132 = !DILocation(line: 97, column: 40, scope: !6)
!133 = !DILocation(line: 103, column: 43, scope: !6)
!134 = !DILocation(line: 103, column: 36, scope: !6)
!135 = !DILocation(line: 103, column: 53, scope: !6)
!136 = !DILocation(line: 103, column: 115, scope: !6)
!137 = !DILocation(line: 120, column: 36, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !139)
!139 = !DILocation(line: 123, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !139)
!143 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !144)
!144 = !DILocation(line: 125, column: 46, scope: !6)
!145 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !144)
!146 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !144)
!147 = !DILocation(line: 127, column: 25, scope: !6)
!148 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !144)
!149 = !DILocation(line: 128, column: 30, scope: !6)
!150 = !DILocation(line: 128, column: 54, scope: !6)
!151 = !DILocation(line: 129, column: 30, scope: !6)
!152 = !DILocation(line: 129, column: 54, scope: !6)
!153 = !DILocation(line: 130, column: 30, scope: !6)
!154 = !DILocation(line: 130, column: 54, scope: !6)
!155 = !DILocation(line: 131, column: 30, scope: !6)
!156 = !DILocation(line: 131, column: 54, scope: !6)
!157 = !DILocation(line: 97, column: 4, scope: !6)
