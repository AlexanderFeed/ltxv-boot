; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.begin:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 128, !dbg !11
  %.lobit = lshr exact i32 %22, 7, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %.lobit, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = shl i32 %21, 2, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = or disjoint i32 %30, %28
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %25) #5, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !17
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !17
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !17
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !17
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = fpext bfloat %48 to float, !dbg !18
  %57 = fpext bfloat %49 to float, !dbg !18
  %58 = fpext bfloat %50 to float, !dbg !18
  %59 = select i1 %25, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %25, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %25, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %25, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %25, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %25, float %56, float 0.000000e+00, !dbg !19
  %65 = select i1 %25, float %57, float 0.000000e+00, !dbg !19
  %66 = select i1 %25, float %58, float 0.000000e+00, !dbg !19
  %67 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %72 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %73 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %74 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ %72, %.peel.begin ], [ %205, %._crit_edge ]
  %81 = phi float [ %73, %.peel.begin ], [ %206, %._crit_edge ]
  %82 = phi float [ %74, %.peel.begin ], [ %207, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %.peel.begin ], [ %197, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %.peel.begin ], [ %198, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %.peel.begin ], [ %199, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = phi float [ %64, %.peel.begin ], [ %189, %._crit_edge ]
  %97 = phi float [ %65, %.peel.begin ], [ %190, %._crit_edge ]
  %98 = phi float [ %66, %.peel.begin ], [ %191, %._crit_edge ]
  %99 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %100 = add i32 %31, %99, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !16
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !16
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 %25) #5, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !17
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !17
  %106 = extractelement <2 x bfloat> %105, i64 1, !dbg !17
  %107 = fpext bfloat %106 to float, !dbg !18
  %108 = extractelement <2 x bfloat> %105, i64 0, !dbg !17
  %109 = fpext bfloat %108 to float, !dbg !18
  %110 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !17
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !17
  %112 = extractelement <2 x bfloat> %111, i64 1, !dbg !17
  %113 = fpext bfloat %112 to float, !dbg !18
  %114 = extractelement <2 x bfloat> %111, i64 0, !dbg !17
  %115 = fpext bfloat %114 to float, !dbg !18
  %116 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !17
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !17
  %118 = extractelement <2 x bfloat> %117, i64 1, !dbg !17
  %119 = fpext bfloat %118 to float, !dbg !18
  %120 = extractelement <2 x bfloat> %117, i64 0, !dbg !17
  %121 = fpext bfloat %120 to float, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !17
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !17
  %124 = extractelement <2 x bfloat> %123, i64 1, !dbg !17
  %125 = fpext bfloat %124 to float, !dbg !18
  %126 = extractelement <2 x bfloat> %123, i64 0, !dbg !17
  %127 = fpext bfloat %126 to float, !dbg !18
  %128 = fsub float %127, %91, !dbg !23
  %129 = fsub float %125, %92, !dbg !23
  %130 = fsub float %121, %93, !dbg !23
  %131 = fsub float %119, %94, !dbg !23
  %132 = fsub float %115, %95, !dbg !23
  %133 = fsub float %113, %96, !dbg !23
  %134 = fsub float %109, %97, !dbg !23
  %135 = fsub float %107, %98, !dbg !23
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = fadd float %80, 1.000000e+00, !dbg !27
  %142 = fadd float %81, 1.000000e+00, !dbg !27
  %143 = fadd float %82, 1.000000e+00, !dbg !27
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = tail call float @llvm.nvvm.div.full(float %133, float %141), !dbg !28
  %150 = tail call float @llvm.nvvm.div.full(float %134, float %142), !dbg !28
  %151 = tail call float @llvm.nvvm.div.full(float %135, float %143), !dbg !28
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fadd float %96, %149, !dbg !29
  %158 = fadd float %97, %150, !dbg !29
  %159 = fadd float %98, %151, !dbg !29
  %160 = fsub float %127, %152, !dbg !30
  %161 = fsub float %125, %153, !dbg !30
  %162 = fsub float %121, %154, !dbg !30
  %163 = fsub float %119, %155, !dbg !30
  %164 = fsub float %115, %156, !dbg !30
  %165 = fsub float %113, %157, !dbg !30
  %166 = fsub float %109, %158, !dbg !30
  %167 = fsub float %107, %159, !dbg !30
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fmul float %133, %165, !dbg !31
  %174 = fmul float %134, %166, !dbg !31
  %175 = fmul float %135, %167, !dbg !31
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = fadd float %88, %173, !dbg !32
  %182 = fadd float %89, %174, !dbg !32
  %183 = fadd float %90, %175, !dbg !32
  %184 = select i1 %25, float %152, float %91, !dbg !19
  %185 = select i1 %25, float %153, float %92, !dbg !19
  %186 = select i1 %25, float %154, float %93, !dbg !19
  %187 = select i1 %25, float %155, float %94, !dbg !19
  %188 = select i1 %25, float %156, float %95, !dbg !19
  %189 = select i1 %25, float %157, float %96, !dbg !19
  %190 = select i1 %25, float %158, float %97, !dbg !19
  %191 = select i1 %25, float %159, float %98, !dbg !19
  %192 = select i1 %25, float %176, float %83, !dbg !33
  %193 = select i1 %25, float %177, float %84, !dbg !33
  %194 = select i1 %25, float %178, float %85, !dbg !33
  %195 = select i1 %25, float %179, float %86, !dbg !33
  %196 = select i1 %25, float %180, float %87, !dbg !33
  %197 = select i1 %25, float %181, float %88, !dbg !33
  %198 = select i1 %25, float %182, float %89, !dbg !33
  %199 = select i1 %25, float %183, float %90, !dbg !33
  %200 = select i1 %25, float %136, float %75, !dbg !20
  %201 = select i1 %25, float %137, float %76, !dbg !20
  %202 = select i1 %25, float %138, float %77, !dbg !20
  %203 = select i1 %25, float %139, float %78, !dbg !20
  %204 = select i1 %25, float %140, float %79, !dbg !20
  %205 = select i1 %25, float %141, float %80, !dbg !20
  %206 = select i1 %25, float %142, float %81, !dbg !20
  %207 = select i1 %25, float %143, float %82, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !21
  %208 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !21
  br i1 %208, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %209 = fadd float %192, %193, !dbg !11
  %210 = lshr i32 %21, 5, !dbg !11
  %211 = and i32 %21, 1, !dbg !11
  %212 = or disjoint i32 %20, %211, !dbg !12
  %213 = icmp slt i32 %212, 4112, !dbg !13
  %214 = and i32 %29, 1020, !dbg !14
  %215 = fsub float %185, %184, !dbg !36
  %216 = fadd float %200, %201, !dbg !39
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !40
  %218 = tail call float @llvm.nvvm.div.full(float %201, float %216), !dbg !41
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !42
  %220 = fmul float %215, %219, !dbg !43
  %221 = fadd float %184, %220, !dbg !44
  %222 = fmul float %215, %215, !dbg !45
  %223 = fmul float %222, %200, !dbg !46
  %224 = fmul float %223, %219, !dbg !47
  %225 = fadd float %209, %224, !dbg !48
  %226 = fsub float %186, %221, !dbg !36
  %227 = fadd float %202, %216, !dbg !39
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !40
  %229 = tail call float @llvm.nvvm.div.full(float %202, float %227), !dbg !41
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !42
  %231 = fmul float %230, %226, !dbg !43
  %232 = fadd float %221, %231, !dbg !44
  %233 = fadd float %194, %225, !dbg !49
  %234 = fmul float %226, %226, !dbg !45
  %235 = fmul float %216, %234, !dbg !46
  %236 = fmul float %230, %235, !dbg !47
  %237 = fadd float %233, %236, !dbg !48
  %238 = fsub float %187, %232, !dbg !36
  %239 = fadd float %203, %227, !dbg !39
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !40
  %241 = tail call float @llvm.nvvm.div.full(float %203, float %239), !dbg !41
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !42
  %243 = fmul float %242, %238, !dbg !43
  %244 = fadd float %232, %243, !dbg !44
  %245 = fadd float %195, %237, !dbg !49
  %246 = fmul float %238, %238, !dbg !45
  %247 = fmul float %227, %246, !dbg !46
  %248 = fmul float %242, %247, !dbg !47
  %249 = fadd float %245, %248, !dbg !48
  %250 = fsub float %188, %244, !dbg !36
  %251 = fadd float %204, %239, !dbg !39
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !40
  %253 = tail call float @llvm.nvvm.div.full(float %204, float %251), !dbg !41
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !42
  %255 = fmul float %254, %250, !dbg !43
  %256 = fadd float %244, %255, !dbg !44
  %257 = fadd float %196, %249, !dbg !49
  %258 = fmul float %250, %250, !dbg !45
  %259 = fmul float %239, %258, !dbg !46
  %260 = fmul float %254, %259, !dbg !47
  %261 = fadd float %257, %260, !dbg !48
  %262 = fsub float %189, %256, !dbg !36
  %263 = fadd float %205, %251, !dbg !39
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !40
  %265 = tail call float @llvm.nvvm.div.full(float %205, float %263), !dbg !41
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !42
  %267 = fmul float %266, %262, !dbg !43
  %268 = fadd float %256, %267, !dbg !44
  %269 = fadd float %197, %261, !dbg !49
  %270 = fmul float %262, %262, !dbg !45
  %271 = fmul float %251, %270, !dbg !46
  %272 = fmul float %266, %271, !dbg !47
  %273 = fadd float %269, %272, !dbg !48
  %274 = fsub float %190, %268, !dbg !36
  %275 = fadd float %206, %263, !dbg !39
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !40
  %277 = tail call float @llvm.nvvm.div.full(float %206, float %275), !dbg !41
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !42
  %279 = fmul float %278, %274, !dbg !43
  %280 = fadd float %268, %279, !dbg !44
  %281 = fadd float %198, %273, !dbg !49
  %282 = fmul float %274, %274, !dbg !45
  %283 = fmul float %263, %282, !dbg !46
  %284 = fmul float %278, %283, !dbg !47
  %285 = fadd float %281, %284, !dbg !48
  %286 = fsub float %191, %280, !dbg !36
  %287 = fadd float %207, %275, !dbg !39
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !40
  %289 = tail call float @llvm.nvvm.div.full(float %207, float %287), !dbg !41
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !42
  %291 = fmul float %290, %286, !dbg !43
  %292 = fadd float %280, %291, !dbg !44
  %293 = fadd float %199, %285, !dbg !49
  %294 = fmul float %286, %286, !dbg !45
  %295 = fmul float %275, %294, !dbg !46
  %296 = fmul float %290, %295, !dbg !47
  %297 = fadd float %293, %296, !dbg !48
  %298 = bitcast float %292 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %297 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = bitcast float %287 to i32, !dbg !50
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 16, i32 31), !dbg !50
  %306 = bitcast i32 %305 to float, !dbg !50
  %307 = fsub float %300, %292, !dbg !36
  %308 = fadd float %287, %306, !dbg !39
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !40
  %310 = tail call float @llvm.nvvm.div.full(float %306, float %308), !dbg !41
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !42
  %312 = fmul float %311, %307, !dbg !43
  %313 = fadd float %292, %312, !dbg !44
  %314 = fadd float %297, %303, !dbg !49
  %315 = fmul float %307, %307, !dbg !45
  %316 = fmul float %287, %315, !dbg !46
  %317 = fmul float %311, %316, !dbg !47
  %318 = fadd float %314, %317, !dbg !48
  %319 = bitcast float %313 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %318 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = bitcast float %308 to i32, !dbg !50
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = fsub float %321, %313, !dbg !36
  %329 = fadd float %308, %327, !dbg !39
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !40
  %331 = tail call float @llvm.nvvm.div.full(float %327, float %329), !dbg !41
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !42
  %333 = fmul float %332, %328, !dbg !43
  %334 = fadd float %313, %333, !dbg !44
  %335 = fadd float %318, %324, !dbg !49
  %336 = fmul float %328, %328, !dbg !45
  %337 = fmul float %308, %336, !dbg !46
  %338 = fmul float %332, %337, !dbg !47
  %339 = fadd float %335, %338, !dbg !48
  %340 = bitcast float %334 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %339 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = bitcast float %329 to i32, !dbg !50
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = fsub float %342, %334, !dbg !36
  %350 = fadd float %329, %348, !dbg !39
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !40
  %352 = tail call float @llvm.nvvm.div.full(float %348, float %350), !dbg !41
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !42
  %354 = fmul float %353, %349, !dbg !43
  %355 = fadd float %334, %354, !dbg !44
  %356 = fadd float %339, %345, !dbg !49
  %357 = fmul float %349, %349, !dbg !45
  %358 = fmul float %329, %357, !dbg !46
  %359 = fmul float %353, %358, !dbg !47
  %360 = fadd float %356, %359, !dbg !48
  %361 = bitcast float %355 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %360 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = bitcast float %350 to i32, !dbg !50
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !50
  %369 = bitcast i32 %368 to float, !dbg !50
  %370 = fsub float %363, %355, !dbg !36
  %371 = fadd float %350, %369, !dbg !39
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !40
  %373 = tail call float @llvm.nvvm.div.full(float %369, float %371), !dbg !41
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !42
  %375 = fmul float %374, %370, !dbg !43
  %376 = fadd float %355, %375, !dbg !44
  %377 = fadd float %360, %366, !dbg !49
  %378 = fmul float %370, %370, !dbg !45
  %379 = fmul float %350, %378, !dbg !46
  %380 = fmul float %374, %379, !dbg !47
  %381 = fadd float %377, %380, !dbg !48
  %382 = bitcast float %376 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %381 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = bitcast float %371 to i32, !dbg !50
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !50
  %390 = bitcast i32 %389 to float, !dbg !50
  %391 = fsub float %384, %376, !dbg !36
  %392 = fadd float %371, %390, !dbg !39
  %393 = fcmp oeq float %392, 0.000000e+00, !dbg !40
  %394 = tail call float @llvm.nvvm.div.full(float %390, float %392), !dbg !41
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !42
  %396 = fmul float %395, %391, !dbg !43
  %397 = fadd float %376, %396, !dbg !44
  %398 = fadd float %381, %387, !dbg !49
  %399 = fmul float %391, %391, !dbg !45
  %400 = fmul float %371, %399, !dbg !46
  %401 = fmul float %395, %400, !dbg !47
  %402 = fadd float %398, %401, !dbg !48
  %403 = and i32 %210, 3, !dbg !50
  %404 = icmp eq i32 %23, 0, !dbg !50
  %405 = lshr exact i32 %22, 5, !dbg !50
  %406 = or disjoint i32 %405, %403, !dbg !50
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !50
  %408 = bitcast float %397 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 %404) #5, !dbg !50
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %406, !dbg !50
  %410 = bitcast float %402 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 %404) #5, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %406, !dbg !50
  %412 = bitcast float %392 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 %404) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %413 = icmp slt i32 %21, 8, !dbg !50
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !50
  %415 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %413) #5, !dbg !50
  %416 = bitcast i32 %415 to float, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !50
  %418 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %413) #5, !dbg !50
  %419 = bitcast i32 %418 to float, !dbg !50
  %420 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !50
  %421 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %420, i1 %413) #5, !dbg !50
  %422 = bitcast i32 %421 to float, !dbg !50
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 2, i32 31), !dbg !50
  %424 = bitcast i32 %423 to float, !dbg !50
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 2, i32 31), !dbg !50
  %426 = bitcast i32 %425 to float, !dbg !50
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 2, i32 31), !dbg !50
  %428 = bitcast i32 %427 to float, !dbg !50
  %429 = fsub float %424, %416, !dbg !36
  %430 = fadd float %422, %428, !dbg !39
  %431 = fcmp oeq float %430, 0.000000e+00, !dbg !40
  %432 = tail call float @llvm.nvvm.div.full(float %428, float %430), !dbg !41
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !42
  %434 = fmul float %429, %433, !dbg !43
  %435 = fadd float %434, %416, !dbg !44
  %436 = fadd float %419, %426, !dbg !49
  %437 = fmul float %429, %429, !dbg !45
  %438 = fmul float %437, %422, !dbg !46
  %439 = fmul float %438, %433, !dbg !47
  %440 = fadd float %436, %439, !dbg !48
  %441 = bitcast float %435 to i32, !dbg !50
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !50
  %443 = bitcast i32 %442 to float, !dbg !50
  %444 = bitcast float %440 to i32, !dbg !50
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !50
  %446 = bitcast i32 %445 to float, !dbg !50
  %447 = bitcast float %430 to i32, !dbg !50
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 1, i32 31), !dbg !50
  %449 = bitcast i32 %448 to float, !dbg !50
  %450 = fsub float %443, %435, !dbg !36
  %451 = fadd float %430, %449, !dbg !39
  %452 = fcmp oeq float %451, 0.000000e+00, !dbg !40
  %453 = tail call float @llvm.nvvm.div.full(float %449, float %451), !dbg !41
  %454 = select i1 %452, float 0.000000e+00, float %453, !dbg !42
  %455 = fmul float %450, %454, !dbg !43
  %456 = fadd float %435, %455, !dbg !44
  %457 = fadd float %440, %446, !dbg !49
  %458 = fmul float %450, %450, !dbg !45
  %459 = fmul float %430, %458, !dbg !46
  %460 = fmul float %454, %459, !dbg !47
  %461 = fadd float %457, %460, !dbg !48
  %462 = and i32 %21, 3, !dbg !50
  %463 = icmp eq i32 %462, 0, !dbg !50
  %464 = and i1 %413, %463, !dbg !50
  %465 = bitcast float %456 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %465, i1 %464) #5, !dbg !50
  %466 = bitcast float %461 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %466, i1 %464) #5, !dbg !50
  %467 = bitcast float %451 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %467, i1 %464) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !50
  %469 = load float, ptr addrspace(3) %468, align 16, !dbg !50
  %470 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %405, !dbg !50
  %471 = load float, ptr addrspace(3) %470, align 16, !dbg !50
  %472 = tail call float @llvm.nvvm.div.full(float %471, float 3.072000e+03), !dbg !51
  %473 = fadd float %472, 0x3EB0C6F7A0000000, !dbg !52
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i59 = icmp eq i32 %481, 0, !dbg !53
  br i1 %.not.i59, label %484, label %482, !dbg !53

482:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %483 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %473), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

484:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %485 = tail call float @llvm.nvvm.rsqrt.approx.f(float %473), !dbg !53
  br label %__nv_rsqrtf.exit61, !dbg !53

__nv_rsqrtf.exit61:                               ; preds = %482, %484
  %.0.i60 = phi float [ %483, %482 ], [ %485, %484 ], !dbg !53
  %486 = and i32 %27, 2040
  %487 = lshr i32 %486, 10
  %488 = shl nuw nsw i32 %487, 2
  %489 = or disjoint i32 %488, %486
  %490 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %489
  %491 = or disjoint i32 %486, 4
  %492 = lshr i32 %27, 8
  %493 = and i32 %492, 4
  %494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %493
  %495 = getelementptr inbounds nuw float, ptr addrspace(3) %494, i32 %491
  %496 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %214
  %497 = or disjoint i32 %214, 1024
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %497
  %498 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %214
  %gep72 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %497
  %.idx = shl nuw nsw i32 %487, 4
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %499, i32 %486
  %501 = zext nneg i32 %214 to i64, !dbg !54
  %502 = getelementptr inbounds nuw i8, ptr addrspace(3) %496, i32 8
  %503 = insertelement <2 x i1> poison, i1 %26, i64 0, !dbg !55
  %504 = shufflevector <2 x i1> %503, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %505 = insertelement <8 x i1> poison, i1 %26, i64 0, !dbg !56
  %506 = shufflevector <8 x i1> %505, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !56
  %507 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !55
  %508 = shufflevector <4 x i1> %507, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 4
  %510 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 8
  %511 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 12
  br label %512, !dbg !54

512:                                              ; preds = %__nv_rsqrtf.exit61, %512
  %indvars.iv112 = phi i64 [ 0, %__nv_rsqrtf.exit61 ], [ %indvars.iv.next113, %512 ]
  %513 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %641, %512 ]
  %514 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %642, %512 ]
  %515 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %640, %512 ]
  %516 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit61 ], [ %661, %512 ]
  %517 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %654, %512 ]
  %518 = or disjoint i64 %indvars.iv112, %501, !dbg !57
  %519 = trunc nuw nsw i64 %indvars.iv112 to i32, !dbg !58
  %520 = add i32 %31, %519, !dbg !58
  %521 = sext i32 %520 to i64, !dbg !59
  %522 = getelementptr bfloat, ptr addrspace(1) %0, i64 %521, !dbg !59
  %523 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %522, i1 %25) #5, !dbg !60
  %524 = extractvalue { i32, i32, i32, i32 } %523, 0, !dbg !60
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !60
  %526 = extractvalue { i32, i32, i32, i32 } %523, 1, !dbg !60
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !60
  %528 = extractvalue { i32, i32, i32, i32 } %523, 2, !dbg !60
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !60
  %530 = extractvalue { i32, i32, i32, i32 } %523, 3, !dbg !60
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !60
  %532 = extractelement <2 x bfloat> %525, i64 0, !dbg !60
  %533 = extractelement <2 x bfloat> %525, i64 1, !dbg !60
  %534 = extractelement <2 x bfloat> %527, i64 0, !dbg !60
  %535 = extractelement <2 x bfloat> %527, i64 1, !dbg !60
  %536 = extractelement <2 x bfloat> %529, i64 0, !dbg !60
  %537 = extractelement <2 x bfloat> %529, i64 1, !dbg !60
  %538 = extractelement <2 x bfloat> %531, i64 0, !dbg !60
  %539 = extractelement <2 x bfloat> %531, i64 1, !dbg !60
  %540 = fpext bfloat %532 to float, !dbg !61
  %541 = fpext bfloat %533 to float, !dbg !61
  %542 = fpext bfloat %534 to float, !dbg !61
  %543 = fpext bfloat %535 to float, !dbg !61
  %544 = fpext bfloat %536 to float, !dbg !61
  %545 = fpext bfloat %537 to float, !dbg !61
  %546 = fpext bfloat %538 to float, !dbg !61
  %547 = fpext bfloat %539 to float, !dbg !61
  %548 = add nuw nsw i64 %518, 3072, !dbg !62
  %549 = getelementptr float, ptr addrspace(1) %1, i64 %548, !dbg !63
  %550 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %549, i1 true) #5, !dbg !64
  %551 = extractvalue { i32, i32, i32, i32 } %550, 0, !dbg !64
  %552 = extractvalue { i32, i32, i32, i32 } %550, 1, !dbg !64
  %553 = extractvalue { i32, i32, i32, i32 } %550, 2, !dbg !64
  %554 = extractvalue { i32, i32, i32, i32 } %550, 3, !dbg !64
  %555 = getelementptr bfloat, ptr addrspace(1) %2, i64 %548, !dbg !65
  %556 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %555, i1 true) #5, !dbg !66
  %557 = extractvalue { i32, i32 } %556, 0, !dbg !66
  %558 = bitcast i32 %557 to <2 x bfloat>, !dbg !66
  %559 = extractvalue { i32, i32 } %556, 1, !dbg !66
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !66
  %561 = getelementptr float, ptr addrspace(1) %1, i64 %518, !dbg !67
  %562 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %561, i1 true) #5, !dbg !68
  %563 = extractvalue { i32, i32, i32, i32 } %562, 0, !dbg !68
  %564 = extractvalue { i32, i32, i32, i32 } %562, 1, !dbg !68
  %565 = extractvalue { i32, i32, i32, i32 } %562, 2, !dbg !68
  %566 = extractvalue { i32, i32, i32, i32 } %562, 3, !dbg !68
  %567 = getelementptr bfloat, ptr addrspace(1) %2, i64 %518, !dbg !69
  %568 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %567, i1 true) #5, !dbg !70
  %569 = extractvalue { i32, i32 } %568, 0, !dbg !70
  %570 = bitcast i32 %569 to <2 x bfloat>, !dbg !70
  %571 = extractvalue { i32, i32 } %568, 1, !dbg !70
  %572 = bitcast i32 %571 to <2 x bfloat>, !dbg !70
  %573 = fsub float %540, %469, !dbg !71
  %574 = fsub float %541, %469, !dbg !71
  %575 = fsub float %542, %469, !dbg !71
  %576 = fsub float %543, %469, !dbg !71
  %577 = fsub float %544, %469, !dbg !71
  %578 = fsub float %545, %469, !dbg !71
  %579 = fsub float %546, %469, !dbg !71
  %580 = fsub float %547, %469, !dbg !71
  %581 = fmul float %.0.i60, %573, !dbg !72
  %582 = fmul float %.0.i60, %574, !dbg !72
  %583 = fmul float %.0.i60, %575, !dbg !72
  %584 = fmul float %.0.i60, %576, !dbg !72
  %585 = fmul float %.0.i60, %577, !dbg !72
  %586 = fmul float %.0.i60, %578, !dbg !72
  %587 = fmul float %.0.i60, %579, !dbg !72
  %588 = fmul float %.0.i60, %580, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %589 = bitcast float %581 to i32, !dbg !72
  %590 = bitcast float %582 to i32, !dbg !72
  %591 = bitcast float %583 to i32, !dbg !72
  %592 = bitcast float %584 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %490, i32 %589, i32 %590, i32 %591, i32 %592, i1 true) #5, !dbg !72
  %593 = bitcast float %585 to i32, !dbg !72
  %594 = bitcast float %586 to i32, !dbg !72
  %595 = bitcast float %587 to i32, !dbg !72
  %596 = bitcast float %588 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %495, i32 %593, i32 %594, i32 %595, i32 %596, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %597 = insertelement <2 x i32> poison, i32 %553, i64 0, !dbg !64
  %598 = insertelement <2 x i32> %597, i32 %554, i64 1, !dbg !64
  %599 = bitcast <2 x i32> %598 to <2 x float>, !dbg !64
  %600 = fpext <2 x bfloat> %560 to <2 x float>, !dbg !73
  %601 = insertelement <2 x i32> poison, i32 %565, i64 0, !dbg !68
  %602 = insertelement <2 x i32> %601, i32 %566, i64 1, !dbg !68
  %603 = bitcast <2 x i32> %602 to <2 x float>, !dbg !68
  %604 = fpext <2 x bfloat> %572 to <2 x float>, !dbg !74
  %605 = load <2 x float>, ptr addrspace(3) %502, align 8, !dbg !72
  %606 = fadd <2 x float> %599, %600, !dbg !75
  %607 = fadd <2 x float> %606, splat (float 1.000000e+00), !dbg !76
  %608 = fmul <2 x float> %607, %605, !dbg !77
  %609 = fadd <2 x float> %603, %604, !dbg !78
  %610 = fadd <2 x float> %609, %608, !dbg !79
  %611 = extractelement <2 x float> %610, i64 0, !dbg !80
  %612 = fcmp olt float %513, %611, !dbg !81
  %613 = extractelement <2 x float> %610, i64 1, !dbg !80
  %614 = fcmp olt float %514, %613, !dbg !81
  %615 = fcmp uno <2 x float> %515, zeroinitializer, !dbg !83
  %616 = fcmp uno float %513, 0.000000e+00, !dbg !83
  %617 = fcmp uno float %514, 0.000000e+00, !dbg !83
  %618 = fcmp uno <4 x float> %517, zeroinitializer, !dbg !83
  %619 = or i1 %616, %612, !dbg !84
  %620 = or i1 %617, %614, !dbg !84
  %621 = insertelement <2 x i32> poison, i32 %551, i64 0, !dbg !64
  %622 = insertelement <2 x i32> %621, i32 %552, i64 1, !dbg !64
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !64
  %624 = fpext <2 x bfloat> %558 to <2 x float>, !dbg !73
  %625 = insertelement <2 x i32> poison, i32 %563, i64 0, !dbg !68
  %626 = insertelement <2 x i32> %625, i32 %564, i64 1, !dbg !68
  %627 = bitcast <2 x i32> %626 to <2 x float>, !dbg !68
  %628 = fpext <2 x bfloat> %570 to <2 x float>, !dbg !74
  %629 = load <2 x float>, ptr addrspace(3) %496, align 16, !dbg !72
  %630 = fadd <2 x float> %623, %624, !dbg !75
  %631 = fadd <2 x float> %630, splat (float 1.000000e+00), !dbg !76
  %632 = fmul <2 x float> %631, %629, !dbg !77
  %633 = fadd <2 x float> %627, %628, !dbg !78
  %634 = fadd <2 x float> %633, %632, !dbg !79
  %635 = fcmp olt <2 x float> %515, %634, !dbg !81
  %636 = or <2 x i1> %615, %635, !dbg !84
  %637 = select <2 x i1> %636, <2 x float> %515, <2 x float> %634, !dbg !85
  %638 = select i1 %619, float %513, float %611, !dbg !85
  %639 = select i1 %620, float %514, float %613, !dbg !85
  %640 = select <2 x i1> %504, <2 x float> %637, <2 x float> %515, !dbg !55
  %641 = select i1 %26, float %638, float %513, !dbg !55
  %642 = select i1 %26, float %639, float %514, !dbg !55
  %643 = extractelement <2 x float> %634, i64 0, !dbg !80
  %644 = extractelement <2 x float> %634, i64 1, !dbg !80
  %645 = fcmp uno <8 x float> %516, zeroinitializer, !dbg !86
  %646 = load <4 x float>, ptr addrspace(3) %gep, align 16, !dbg !72
  %647 = shufflevector <2 x float> %631, <2 x float> %607, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !77
  %648 = fmul <4 x float> %647, %646, !dbg !77
  %649 = shufflevector <2 x float> %633, <2 x float> %609, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %650 = fadd <4 x float> %649, %648, !dbg !79
  %651 = fcmp olt <4 x float> %517, %650, !dbg !81
  %652 = or <4 x i1> %618, %651, !dbg !84
  %653 = select <4 x i1> %652, <4 x float> %517, <4 x float> %650, !dbg !85
  %654 = select <4 x i1> %508, <4 x float> %653, <4 x float> %517, !dbg !55
  %655 = shufflevector <2 x float> %634, <2 x float> %610, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %656 = shufflevector <4 x float> %650, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !88
  %657 = shufflevector <8 x float> %655, <8 x float> %656, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !88
  %658 = fcmp ogt <8 x float> %516, %657, !dbg !88
  %659 = or <8 x i1> %645, %658, !dbg !89
  %660 = select <8 x i1> %659, <8 x float> %516, <8 x float> %657, !dbg !90
  %661 = select <8 x i1> %506, <8 x float> %660, <8 x float> %516, !dbg !56
  %662 = getelementptr bfloat, ptr addrspace(1) %3, i64 %521, !dbg !91
  %663 = fptrunc float %643 to bfloat, !dbg !80
  %664 = fptrunc float %644 to bfloat, !dbg !80
  %665 = fptrunc float %611 to bfloat, !dbg !80
  %666 = fptrunc float %613 to bfloat, !dbg !80
  %667 = extractelement <4 x float> %650, i64 0, !dbg !80
  %668 = fptrunc float %667 to bfloat, !dbg !80
  %669 = extractelement <4 x float> %650, i64 1, !dbg !80
  %670 = fptrunc float %669 to bfloat, !dbg !80
  %671 = extractelement <4 x float> %650, i64 2, !dbg !80
  %672 = fptrunc float %671 to bfloat, !dbg !80
  %673 = extractelement <4 x float> %650, i64 3, !dbg !80
  %674 = fptrunc float %673 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %675 = bitcast bfloat %663 to i16, !dbg !80
  %676 = bitcast bfloat %664 to i16, !dbg !80
  %677 = bitcast bfloat %665 to i16, !dbg !80
  %678 = bitcast bfloat %666 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %498, i16 %675, i16 %676, i16 %677, i16 %678, i1 true) #5, !dbg !80
  %679 = bitcast bfloat %668 to i16, !dbg !80
  %680 = bitcast bfloat %670 to i16, !dbg !80
  %681 = bitcast bfloat %672 to i16, !dbg !80
  %682 = bitcast bfloat %674 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %gep72, i16 %679, i16 %680, i16 %681, i16 %682, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.extract = load i32, ptr addrspace(3) %500, align 16, !dbg !80
  %.extract63 = load i32, ptr addrspace(3) %509, align 4, !dbg !80
  %.extract65 = load i32, ptr addrspace(3) %510, align 8, !dbg !80
  %.extract67 = load i32, ptr addrspace(3) %511, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %662, i1 %25) #5, !dbg !80
  %indvars.iv.next113 = add nuw nsw i64 %indvars.iv112, 1024, !dbg !54
  %683 = icmp samesign ult i64 %indvars.iv112, 2048, !dbg !54
  br i1 %683, label %512, label %684, !dbg !54

684:                                              ; preds = %512
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %685 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %640, <2 x i32> <i32 0, i32 2>, !dbg !94
  %686 = fcmp olt <2 x float> %685, %640, !dbg !94
  %687 = fcmp uno <2 x float> %685, %640, !dbg !94
  %shift = shufflevector <2 x i1> %686, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !95
  %688 = or <2 x i1> %shift, %687, !dbg !95
  %689 = extractelement <2 x i1> %688, i64 0, !dbg !95
  %690 = extractelement <2 x float> %640, i64 0, !dbg !96
  %691 = extractelement <2 x float> %640, i64 1, !dbg !96
  %692 = select i1 %689, float %690, float %691, !dbg !96
  %693 = fcmp olt float %692, %641, !dbg !94
  %694 = fcmp uno float %692, 0.000000e+00, !dbg !97
  %695 = or i1 %693, %694, !dbg !95
  %696 = select i1 %695, float %692, float %641, !dbg !96
  %697 = fcmp olt float %696, %642, !dbg !94
  %698 = fcmp uno float %696, 0.000000e+00, !dbg !97
  %699 = or i1 %697, %698, !dbg !95
  %700 = select i1 %699, float %696, float %642, !dbg !96
  %701 = extractelement <4 x float> %654, i64 0, !dbg !94
  %702 = extractelement <4 x float> %654, i64 1, !dbg !94
  %703 = fcmp olt float %701, %702, !dbg !94
  %704 = fcmp uno float %701, 0.000000e+00, !dbg !97
  %705 = or i1 %703, %704, !dbg !95
  %706 = select i1 %705, float %701, float %702, !dbg !96
  %707 = extractelement <4 x float> %654, i64 2, !dbg !94
  %708 = fcmp olt float %706, %707, !dbg !94
  %709 = fcmp uno float %706, 0.000000e+00, !dbg !97
  %710 = or i1 %708, %709, !dbg !95
  %711 = select i1 %710, float %706, float %707, !dbg !96
  %712 = extractelement <4 x float> %654, i64 3, !dbg !94
  %713 = fcmp olt float %711, %712, !dbg !94
  %714 = fcmp uno float %711, 0.000000e+00, !dbg !97
  %715 = or i1 %713, %714, !dbg !95
  %716 = select i1 %715, float %711, float %712, !dbg !96
  %717 = bitcast float %700 to i32, !dbg !92
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %717, i32 16, i32 31), !dbg !92
  %719 = bitcast i32 %718 to float, !dbg !92
  %720 = fcmp olt float %700, %719, !dbg !94
  %721 = fcmp uno float %700, 0.000000e+00, !dbg !97
  %722 = or i1 %721, %720, !dbg !95
  %723 = select i1 %722, float %700, float %719, !dbg !96
  %724 = bitcast float %723 to i32, !dbg !92
  %725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %724, i32 8, i32 31), !dbg !92
  %726 = bitcast i32 %725 to float, !dbg !92
  %727 = fcmp olt float %723, %726, !dbg !94
  %728 = fcmp uno float %723, 0.000000e+00, !dbg !97
  %729 = or i1 %727, %728, !dbg !95
  %730 = select i1 %729, float %723, float %726, !dbg !96
  %731 = bitcast float %730 to i32, !dbg !92
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 4, i32 31), !dbg !92
  %733 = bitcast i32 %732 to float, !dbg !92
  %734 = fcmp olt float %730, %733, !dbg !94
  %735 = fcmp uno float %730, 0.000000e+00, !dbg !97
  %736 = or i1 %734, %735, !dbg !95
  %737 = select i1 %736, float %730, float %733, !dbg !96
  %738 = bitcast float %737 to i32, !dbg !92
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 2, i32 31), !dbg !92
  %740 = bitcast i32 %739 to float, !dbg !92
  %741 = fcmp olt float %737, %740, !dbg !94
  %742 = fcmp uno float %737, 0.000000e+00, !dbg !97
  %743 = or i1 %741, %742, !dbg !95
  %744 = select i1 %743, float %737, float %740, !dbg !96
  %745 = bitcast float %744 to i32, !dbg !92
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 1, i32 31), !dbg !92
  %747 = bitcast i32 %746 to float, !dbg !92
  %748 = fcmp olt float %744, %747, !dbg !94
  %749 = fcmp uno float %744, 0.000000e+00, !dbg !97
  %750 = or i1 %748, %749, !dbg !95
  %751 = bitcast float %716 to i32, !dbg !92
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 16, i32 31), !dbg !92
  %753 = bitcast i32 %752 to float, !dbg !92
  %754 = fcmp olt float %716, %753, !dbg !94
  %755 = fcmp uno float %716, 0.000000e+00, !dbg !97
  %756 = or i1 %755, %754, !dbg !95
  %757 = select i1 %756, float %716, float %753, !dbg !96
  %758 = bitcast float %757 to i32, !dbg !92
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 8, i32 31), !dbg !92
  %760 = bitcast i32 %759 to float, !dbg !92
  %761 = fcmp olt float %757, %760, !dbg !94
  %762 = fcmp uno float %757, 0.000000e+00, !dbg !97
  %763 = or i1 %761, %762, !dbg !95
  %764 = select i1 %763, float %757, float %760, !dbg !96
  %765 = bitcast float %764 to i32, !dbg !92
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 4, i32 31), !dbg !92
  %767 = bitcast i32 %766 to float, !dbg !92
  %768 = fcmp olt float %764, %767, !dbg !94
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !97
  %770 = or i1 %768, %769, !dbg !95
  %771 = select i1 %770, float %764, float %767, !dbg !96
  %772 = bitcast float %771 to i32, !dbg !92
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 2, i32 31), !dbg !92
  %774 = bitcast i32 %773 to float, !dbg !92
  %775 = fcmp olt float %771, %774, !dbg !94
  %776 = fcmp uno float %771, 0.000000e+00, !dbg !97
  %777 = or i1 %775, %776, !dbg !95
  %778 = select i1 %777, float %771, float %774, !dbg !96
  %779 = bitcast float %778 to i32, !dbg !92
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !92
  %781 = bitcast i32 %780 to float, !dbg !92
  %782 = fcmp olt float %778, %781, !dbg !94
  %783 = fcmp uno float %778, 0.000000e+00, !dbg !97
  %784 = or i1 %782, %783, !dbg !95
  %785 = and i32 %210, 7, !dbg !92
  %786 = getelementptr float, ptr addrspace(3) @global_smem, i32 %785, !dbg !92
  %787 = select i1 %750, i32 %745, i32 %746, !dbg !96
  %788 = insertelement <1 x i32> poison, i32 %787, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %786, <1 x i32> %788, i1 %404) #5, !dbg !92
  %789 = or disjoint i32 %785, 8, !dbg !92
  %790 = getelementptr float, ptr addrspace(3) @global_smem, i32 %789, !dbg !92
  %791 = select i1 %784, i32 %779, i32 %780, !dbg !96
  %792 = insertelement <1 x i32> poison, i32 %791, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %790, <1 x i32> %792, i1 %404) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %793 = icmp slt i32 %21, 16, !dbg !92
  %794 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %793) #5, !dbg !92
  %795 = bitcast i32 %794 to float, !dbg !92
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 4, i32 31), !dbg !92
  %797 = bitcast i32 %796 to float, !dbg !92
  %798 = fcmp olt float %795, %797, !dbg !94
  %799 = fcmp uno float %795, 0.000000e+00, !dbg !97
  %800 = or i1 %799, %798, !dbg !95
  %801 = select i1 %800, float %795, float %797, !dbg !96
  %802 = bitcast float %801 to i32, !dbg !92
  %803 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %802, i32 2, i32 31), !dbg !92
  %804 = bitcast i32 %803 to float, !dbg !92
  %805 = fcmp olt float %801, %804, !dbg !94
  %806 = fcmp uno float %801, 0.000000e+00, !dbg !97
  %807 = or i1 %805, %806, !dbg !95
  %808 = select i1 %807, float %801, float %804, !dbg !96
  %809 = bitcast float %808 to i32, !dbg !92
  %810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %809, i32 1, i32 31), !dbg !92
  %811 = bitcast i32 %810 to float, !dbg !92
  %812 = fcmp olt float %808, %811, !dbg !94
  %813 = fcmp uno float %808, 0.000000e+00, !dbg !97
  %814 = or i1 %812, %813, !dbg !95
  %815 = and i32 %21, 7, !dbg !92
  %816 = icmp eq i32 %815, 0, !dbg !92
  %817 = and i1 %793, %816, !dbg !92
  %818 = select i1 %814, i32 %809, i32 %810, !dbg !96
  %819 = insertelement <1 x i32> poison, i32 %818, i64 0, !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %819, i1 %817) #5, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %820 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !92
  %821 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %822 = bitcast float %820 to i32, !dbg !98
  %823 = bitcast float %821 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %822, i32 %823, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %824 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211, !dbg !98
  %825 = load float, ptr addrspace(3) %824, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %826 = extractelement <8 x float> %661, i64 0, !dbg !101
  %827 = extractelement <8 x float> %661, i64 1, !dbg !101
  %828 = fcmp ogt float %826, %827, !dbg !101
  %829 = fcmp uno float %826, 0.000000e+00, !dbg !102
  %830 = or i1 %828, %829, !dbg !103
  %831 = select i1 %830, float %826, float %827, !dbg !104
  %832 = extractelement <8 x float> %661, i64 2, !dbg !101
  %833 = fcmp ogt float %831, %832, !dbg !101
  %834 = fcmp uno float %831, 0.000000e+00, !dbg !102
  %835 = or i1 %833, %834, !dbg !103
  %836 = select i1 %835, float %831, float %832, !dbg !104
  %837 = extractelement <8 x float> %661, i64 3, !dbg !101
  %838 = fcmp ogt float %836, %837, !dbg !101
  %839 = fcmp uno float %836, 0.000000e+00, !dbg !102
  %840 = or i1 %838, %839, !dbg !103
  %841 = select i1 %840, float %836, float %837, !dbg !104
  %842 = extractelement <8 x float> %661, i64 4, !dbg !101
  %843 = extractelement <8 x float> %661, i64 5, !dbg !101
  %844 = fcmp ogt float %842, %843, !dbg !101
  %845 = fcmp uno float %842, 0.000000e+00, !dbg !102
  %846 = or i1 %844, %845, !dbg !103
  %847 = select i1 %846, float %842, float %843, !dbg !104
  %848 = extractelement <8 x float> %661, i64 6, !dbg !101
  %849 = fcmp ogt float %847, %848, !dbg !101
  %850 = fcmp uno float %847, 0.000000e+00, !dbg !102
  %851 = or i1 %849, %850, !dbg !103
  %852 = select i1 %851, float %847, float %848, !dbg !104
  %853 = extractelement <8 x float> %661, i64 7, !dbg !101
  %854 = fcmp ogt float %852, %853, !dbg !101
  %855 = fcmp uno float %852, 0.000000e+00, !dbg !102
  %856 = or i1 %854, %855, !dbg !103
  %857 = select i1 %856, float %852, float %853, !dbg !104
  %858 = bitcast float %841 to i32, !dbg !99
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 16, i32 31), !dbg !99
  %860 = bitcast i32 %859 to float, !dbg !99
  %861 = fcmp ogt float %841, %860, !dbg !101
  %862 = fcmp uno float %841, 0.000000e+00, !dbg !102
  %863 = or i1 %862, %861, !dbg !103
  %864 = select i1 %863, float %841, float %860, !dbg !104
  %865 = bitcast float %864 to i32, !dbg !99
  %866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %865, i32 8, i32 31), !dbg !99
  %867 = bitcast i32 %866 to float, !dbg !99
  %868 = fcmp ogt float %864, %867, !dbg !101
  %869 = fcmp uno float %864, 0.000000e+00, !dbg !102
  %870 = or i1 %868, %869, !dbg !103
  %871 = select i1 %870, float %864, float %867, !dbg !104
  %872 = bitcast float %871 to i32, !dbg !99
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 4, i32 31), !dbg !99
  %874 = bitcast i32 %873 to float, !dbg !99
  %875 = fcmp ogt float %871, %874, !dbg !101
  %876 = fcmp uno float %871, 0.000000e+00, !dbg !102
  %877 = or i1 %875, %876, !dbg !103
  %878 = select i1 %877, float %871, float %874, !dbg !104
  %879 = bitcast float %878 to i32, !dbg !99
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 2, i32 31), !dbg !99
  %881 = bitcast i32 %880 to float, !dbg !99
  %882 = fcmp ogt float %878, %881, !dbg !101
  %883 = fcmp uno float %878, 0.000000e+00, !dbg !102
  %884 = or i1 %882, %883, !dbg !103
  %885 = select i1 %884, float %878, float %881, !dbg !104
  %886 = bitcast float %885 to i32, !dbg !99
  %887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %886, i32 1, i32 31), !dbg !99
  %888 = bitcast i32 %887 to float, !dbg !99
  %889 = fcmp ogt float %885, %888, !dbg !101
  %890 = fcmp uno float %885, 0.000000e+00, !dbg !102
  %891 = or i1 %889, %890, !dbg !103
  %892 = bitcast float %857 to i32, !dbg !99
  %893 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %892, i32 16, i32 31), !dbg !99
  %894 = bitcast i32 %893 to float, !dbg !99
  %895 = fcmp ogt float %857, %894, !dbg !101
  %896 = fcmp uno float %857, 0.000000e+00, !dbg !102
  %897 = or i1 %896, %895, !dbg !103
  %898 = select i1 %897, float %857, float %894, !dbg !104
  %899 = bitcast float %898 to i32, !dbg !99
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 8, i32 31), !dbg !99
  %901 = bitcast i32 %900 to float, !dbg !99
  %902 = fcmp ogt float %898, %901, !dbg !101
  %903 = fcmp uno float %898, 0.000000e+00, !dbg !102
  %904 = or i1 %902, %903, !dbg !103
  %905 = select i1 %904, float %898, float %901, !dbg !104
  %906 = bitcast float %905 to i32, !dbg !99
  %907 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %906, i32 4, i32 31), !dbg !99
  %908 = bitcast i32 %907 to float, !dbg !99
  %909 = fcmp ogt float %905, %908, !dbg !101
  %910 = fcmp uno float %905, 0.000000e+00, !dbg !102
  %911 = or i1 %909, %910, !dbg !103
  %912 = select i1 %911, float %905, float %908, !dbg !104
  %913 = bitcast float %912 to i32, !dbg !99
  %914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %913, i32 2, i32 31), !dbg !99
  %915 = bitcast i32 %914 to float, !dbg !99
  %916 = fcmp ogt float %912, %915, !dbg !101
  %917 = fcmp uno float %912, 0.000000e+00, !dbg !102
  %918 = or i1 %916, %917, !dbg !103
  %919 = select i1 %918, float %912, float %915, !dbg !104
  %920 = bitcast float %919 to i32, !dbg !99
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 1, i32 31), !dbg !99
  %922 = bitcast i32 %921 to float, !dbg !99
  %923 = fcmp ogt float %919, %922, !dbg !101
  %924 = fcmp uno float %919, 0.000000e+00, !dbg !102
  %925 = or i1 %923, %924, !dbg !103
  %926 = select i1 %891, i32 %886, i32 %887, !dbg !104
  %927 = insertelement <1 x i32> poison, i32 %926, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %786, <1 x i32> %927, i1 %404) #5, !dbg !99
  %928 = select i1 %925, i32 %920, i32 %921, !dbg !104
  %929 = insertelement <1 x i32> poison, i32 %928, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %790, <1 x i32> %929, i1 %404) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %930 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %793) #5, !dbg !99
  %931 = bitcast i32 %930 to float, !dbg !99
  %932 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %930, i32 4, i32 31), !dbg !99
  %933 = bitcast i32 %932 to float, !dbg !99
  %934 = fcmp ogt float %931, %933, !dbg !101
  %935 = fcmp uno float %931, 0.000000e+00, !dbg !102
  %936 = or i1 %935, %934, !dbg !103
  %937 = select i1 %936, float %931, float %933, !dbg !104
  %938 = bitcast float %937 to i32, !dbg !99
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 2, i32 31), !dbg !99
  %940 = bitcast i32 %939 to float, !dbg !99
  %941 = fcmp ogt float %937, %940, !dbg !101
  %942 = fcmp uno float %937, 0.000000e+00, !dbg !102
  %943 = or i1 %941, %942, !dbg !103
  %944 = select i1 %943, float %937, float %940, !dbg !104
  %945 = bitcast float %944 to i32, !dbg !99
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 1, i32 31), !dbg !99
  %947 = bitcast i32 %946 to float, !dbg !99
  %948 = fcmp ogt float %944, %947, !dbg !101
  %949 = fcmp uno float %944, 0.000000e+00, !dbg !102
  %950 = or i1 %948, %949, !dbg !103
  %951 = select i1 %950, i32 %945, i32 %946, !dbg !104
  %952 = insertelement <1 x i32> poison, i32 %951, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %952, i1 %817) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %953 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %954 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %955 = bitcast float %953 to i32, !dbg !105
  %956 = bitcast float %954 to i32, !dbg !105
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %955, i32 %956, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %957 = load float, ptr addrspace(3) %824, align 4, !dbg !105
  %958 = sext i32 %212 to i64, !dbg !106
  %959 = getelementptr bfloat, ptr addrspace(1) %4, i64 %958, !dbg !106
  %960 = fptrunc float %825 to bfloat, !dbg !98
  %961 = and i32 %21, 254, !dbg !98
  %962 = icmp eq i32 %961, 0, !dbg !98
  %963 = bitcast bfloat %960 to i16, !dbg !98
  %964 = and i1 %962, %213, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %963, ptr addrspace(1) %959, i1 %964) #5, !dbg !98
  %965 = getelementptr bfloat, ptr addrspace(1) %5, i64 %958, !dbg !107
  %966 = fptrunc float %957 to bfloat, !dbg !105
  %967 = bitcast bfloat %966 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %967, ptr addrspace(1) %965, i1 %964) #5, !dbg !105
  %968 = getelementptr bfloat, ptr addrspace(1) %6, i64 %958, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %963, ptr addrspace(1) %968, i1 %964) #5, !dbg !109
  %969 = getelementptr bfloat, ptr addrspace(1) %7, i64 %958, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %967, ptr addrspace(1) %969, i1 %964) #5, !dbg !111
  %970 = getelementptr bfloat, ptr addrspace(1) %8, i64 %958, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %963, ptr addrspace(1) %970, i1 %964) #5, !dbg !113
  %971 = getelementptr bfloat, ptr addrspace(1) %9, i64 %958, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %967, ptr addrspace(1) %971, i1 %964) #5, !dbg !115
  %972 = getelementptr bfloat, ptr addrspace(1) %10, i64 %958, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %963, ptr addrspace(1) %972, i1 %964) #5, !dbg !117
  %973 = getelementptr bfloat, ptr addrspace(1) %11, i64 %958, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %967, ptr addrspace(1) %973, i1 %964) #5, !dbg !119
  %.inv = fcmp oge float %820, 0.000000e+00, !dbg !120
  %974 = select i1 %.inv, float 0.000000e+00, float %820, !dbg !120
  %.inv4 = fcmp oge float %821, 0.000000e+00, !dbg !120
  %975 = select i1 %.inv4, float 0.000000e+00, float %821, !dbg !120
  %976 = fsub float 0.000000e+00, %974, !dbg !122
  %977 = fsub float 0.000000e+00, %975, !dbg !122
  %.inv5 = fcmp ole float %953, 0.000000e+00, !dbg !123
  %978 = select i1 %.inv5, float 0.000000e+00, float %953, !dbg !123
  %.inv6 = fcmp ole float %954, 0.000000e+00, !dbg !123
  %979 = select i1 %.inv6, float 0.000000e+00, float %954, !dbg !123
  %980 = fcmp ogt float %976, %978, !dbg !125
  %981 = fcmp ogt float %977, %979, !dbg !125
  %982 = fcmp uno float %976, 0.000000e+00, !dbg !127
  %983 = fcmp uno float %977, 0.000000e+00, !dbg !127
  %984 = or i1 %982, %980, !dbg !128
  %985 = or i1 %983, %981, !dbg !128
  %986 = select i1 %984, float %976, float %978, !dbg !129
  %987 = select i1 %985, float %977, float %979, !dbg !129
  %988 = fmul float %986, 0x3F80204080000000, !dbg !130
  %989 = fmul float %987, 0x3F80204080000000, !dbg !130
  %990 = fcmp ogt float %988, 0x3EE4F8B580000000, !dbg !131
  %991 = fcmp ogt float %989, 0x3EE4F8B580000000, !dbg !131
  %992 = fcmp uno float %988, 0.000000e+00, !dbg !133
  %993 = fcmp uno float %989, 0.000000e+00, !dbg !133
  %994 = or i1 %990, %992, !dbg !134
  %995 = or i1 %991, %993, !dbg !134
  %996 = select i1 %994, float %988, float 0x3EE4F8B580000000, !dbg !135
  %997 = select i1 %995, float %989, float 0x3EE4F8B580000000, !dbg !135
  %998 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %996), !dbg !136
  %999 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %997), !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1000 = bitcast float %998 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1000, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1000, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1000, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1000, i1 true) #5, !dbg !137
  %1001 = bitcast float %999 to <1 x i32>, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1001, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1001, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1001, i1 true) #5, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1001, i1 true) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1002 = lshr exact i32 %22, 4, !dbg !137
  %1003 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1002, !dbg !137
  %1004 = load float, ptr addrspace(3) %1003, align 8, !dbg !137
  %1005 = sext i32 %31 to i64, !dbg !138
  %1006 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1005, !dbg !138
  %1007 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1006, i1 %25) #5, !dbg !139
  %1008 = extractvalue { i32, i32, i32, i32 } %1007, 0, !dbg !139
  %1009 = bitcast i32 %1008 to <2 x bfloat>, !dbg !139
  %1010 = extractvalue { i32, i32, i32, i32 } %1007, 1, !dbg !139
  %1011 = bitcast i32 %1010 to <2 x bfloat>, !dbg !139
  %1012 = extractvalue { i32, i32, i32, i32 } %1007, 2, !dbg !139
  %1013 = bitcast i32 %1012 to <2 x bfloat>, !dbg !139
  %1014 = extractvalue { i32, i32, i32, i32 } %1007, 3, !dbg !139
  %1015 = bitcast i32 %1014 to <2 x bfloat>, !dbg !139
  %1016 = extractelement <2 x bfloat> %1009, i64 0, !dbg !139
  %1017 = extractelement <2 x bfloat> %1009, i64 1, !dbg !139
  %1018 = extractelement <2 x bfloat> %1011, i64 0, !dbg !139
  %1019 = extractelement <2 x bfloat> %1011, i64 1, !dbg !139
  %1020 = extractelement <2 x bfloat> %1013, i64 0, !dbg !139
  %1021 = extractelement <2 x bfloat> %1013, i64 1, !dbg !139
  %1022 = extractelement <2 x bfloat> %1015, i64 0, !dbg !139
  %1023 = extractelement <2 x bfloat> %1015, i64 1, !dbg !139
  %1024 = fpext bfloat %1016 to float, !dbg !140
  %1025 = fpext bfloat %1017 to float, !dbg !140
  %1026 = fpext bfloat %1018 to float, !dbg !140
  %1027 = fpext bfloat %1019 to float, !dbg !140
  %1028 = fpext bfloat %1020 to float, !dbg !140
  %1029 = fpext bfloat %1021 to float, !dbg !140
  %1030 = fpext bfloat %1022 to float, !dbg !140
  %1031 = fpext bfloat %1023 to float, !dbg !140
  %1032 = fmul float %1004, %1024, !dbg !137
  %1033 = fmul float %1004, %1025, !dbg !137
  %1034 = fmul float %1004, %1026, !dbg !137
  %1035 = fmul float %1004, %1027, !dbg !137
  %1036 = fmul float %1004, %1028, !dbg !137
  %1037 = fmul float %1004, %1029, !dbg !137
  %1038 = fmul float %1004, %1030, !dbg !137
  %1039 = fmul float %1004, %1031, !dbg !137
  %1040 = tail call float @llvm.nvvm.round.f(float %1032) #5, !dbg !141
  %1041 = tail call float @llvm.nvvm.round.f(float %1033) #5, !dbg !141
  %1042 = tail call float @llvm.nvvm.round.f(float %1034) #5, !dbg !141
  %1043 = tail call float @llvm.nvvm.round.f(float %1035) #5, !dbg !141
  %1044 = tail call float @llvm.nvvm.round.f(float %1036) #5, !dbg !141
  %1045 = tail call float @llvm.nvvm.round.f(float %1037) #5, !dbg !141
  %1046 = tail call float @llvm.nvvm.round.f(float %1038) #5, !dbg !141
  %1047 = tail call float @llvm.nvvm.round.f(float %1039) #5, !dbg !141
  %1048 = insertelement <4 x float> poison, float %1040, i64 0, !dbg !142
  %1049 = insertelement <4 x float> %1048, float %1041, i64 1, !dbg !142
  %1050 = insertelement <4 x float> %1049, float %1042, i64 2, !dbg !142
  %1051 = insertelement <4 x float> %1050, float %1043, i64 3, !dbg !142
  %1052 = fcmp ogt <4 x float> %1051, splat (float -1.270000e+02), !dbg !142
  %1053 = fcmp uno <4 x float> %1051, zeroinitializer, !dbg !144
  %1054 = or <4 x i1> %1052, %1053, !dbg !145
  %1055 = select <4 x i1> %1054, <4 x float> %1051, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1056 = fcmp olt <4 x float> %1055, splat (float 1.270000e+02), !dbg !147
  %1057 = fcmp uno <4 x float> %1055, zeroinitializer, !dbg !149
  %1058 = or <4 x i1> %1056, %1057, !dbg !150
  %1059 = fptosi <4 x float> %1055 to <4 x i8>, !dbg !151
  %1060 = select <4 x i1> %1058, <4 x i8> %1059, <4 x i8> splat (i8 127), !dbg !152
  %1061 = insertelement <4 x float> poison, float %1044, i64 0, !dbg !142
  %1062 = insertelement <4 x float> %1061, float %1045, i64 1, !dbg !142
  %1063 = insertelement <4 x float> %1062, float %1046, i64 2, !dbg !142
  %1064 = insertelement <4 x float> %1063, float %1047, i64 3, !dbg !142
  %1065 = fcmp ogt <4 x float> %1064, splat (float -1.270000e+02), !dbg !142
  %1066 = fcmp uno <4 x float> %1064, zeroinitializer, !dbg !144
  %1067 = or <4 x i1> %1065, %1066, !dbg !145
  %1068 = select <4 x i1> %1067, <4 x float> %1064, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1069 = fcmp olt <4 x float> %1068, splat (float 1.270000e+02), !dbg !147
  %1070 = fcmp uno <4 x float> %1068, zeroinitializer, !dbg !149
  %1071 = or <4 x i1> %1069, %1070, !dbg !150
  %1072 = fptosi <4 x float> %1068 to <4 x i8>, !dbg !151
  %1073 = select <4 x i1> %1071, <4 x i8> %1072, <4 x i8> splat (i8 127), !dbg !152
  %1074 = getelementptr i8, ptr addrspace(1) %12, i64 %1005, !dbg !153
  %1075 = bitcast <4 x i8> %1060 to i32, !dbg !154
  %1076 = bitcast <4 x i8> %1073 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1075, i32 %1076, ptr addrspace(1) %1074, i1 %25) #5, !dbg !154
  %1077 = getelementptr i8, ptr addrspace(1) %13, i64 %1005, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1075, i32 %1076, ptr addrspace(1) %1077, i1 %25) #5, !dbg !156
  %1078 = getelementptr i8, ptr addrspace(1) %14, i64 %1005, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1075, i32 %1076, ptr addrspace(1) %1078, i1 %25) #5, !dbg !158
  %1079 = getelementptr i8, ptr addrspace(1) %15, i64 %1005, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1075, i32 %1076, ptr addrspace(1) %1079, i1 %25) #5, !dbg !160
  %1080 = add i32 %31, 1024, !dbg !161
  %1081 = sext i32 %1080 to i64, !dbg !138
  %1082 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1081, !dbg !138
  %1083 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1082, i1 %25) #5, !dbg !139
  %1084 = extractvalue { i32, i32, i32, i32 } %1083, 0, !dbg !139
  %1085 = bitcast i32 %1084 to <2 x bfloat>, !dbg !139
  %1086 = extractvalue { i32, i32, i32, i32 } %1083, 1, !dbg !139
  %1087 = bitcast i32 %1086 to <2 x bfloat>, !dbg !139
  %1088 = extractvalue { i32, i32, i32, i32 } %1083, 2, !dbg !139
  %1089 = bitcast i32 %1088 to <2 x bfloat>, !dbg !139
  %1090 = extractvalue { i32, i32, i32, i32 } %1083, 3, !dbg !139
  %1091 = bitcast i32 %1090 to <2 x bfloat>, !dbg !139
  %1092 = extractelement <2 x bfloat> %1085, i64 0, !dbg !139
  %1093 = extractelement <2 x bfloat> %1085, i64 1, !dbg !139
  %1094 = extractelement <2 x bfloat> %1087, i64 0, !dbg !139
  %1095 = extractelement <2 x bfloat> %1087, i64 1, !dbg !139
  %1096 = extractelement <2 x bfloat> %1089, i64 0, !dbg !139
  %1097 = extractelement <2 x bfloat> %1089, i64 1, !dbg !139
  %1098 = extractelement <2 x bfloat> %1091, i64 0, !dbg !139
  %1099 = extractelement <2 x bfloat> %1091, i64 1, !dbg !139
  %1100 = fpext bfloat %1092 to float, !dbg !140
  %1101 = fpext bfloat %1093 to float, !dbg !140
  %1102 = fpext bfloat %1094 to float, !dbg !140
  %1103 = fpext bfloat %1095 to float, !dbg !140
  %1104 = fpext bfloat %1096 to float, !dbg !140
  %1105 = fpext bfloat %1097 to float, !dbg !140
  %1106 = fpext bfloat %1098 to float, !dbg !140
  %1107 = fpext bfloat %1099 to float, !dbg !140
  %1108 = fmul float %1004, %1100, !dbg !137
  %1109 = fmul float %1004, %1101, !dbg !137
  %1110 = fmul float %1004, %1102, !dbg !137
  %1111 = fmul float %1004, %1103, !dbg !137
  %1112 = fmul float %1004, %1104, !dbg !137
  %1113 = fmul float %1004, %1105, !dbg !137
  %1114 = fmul float %1004, %1106, !dbg !137
  %1115 = fmul float %1004, %1107, !dbg !137
  %1116 = tail call float @llvm.nvvm.round.f(float %1108) #5, !dbg !141
  %1117 = tail call float @llvm.nvvm.round.f(float %1109) #5, !dbg !141
  %1118 = tail call float @llvm.nvvm.round.f(float %1110) #5, !dbg !141
  %1119 = tail call float @llvm.nvvm.round.f(float %1111) #5, !dbg !141
  %1120 = tail call float @llvm.nvvm.round.f(float %1112) #5, !dbg !141
  %1121 = tail call float @llvm.nvvm.round.f(float %1113) #5, !dbg !141
  %1122 = tail call float @llvm.nvvm.round.f(float %1114) #5, !dbg !141
  %1123 = tail call float @llvm.nvvm.round.f(float %1115) #5, !dbg !141
  %1124 = insertelement <4 x float> poison, float %1116, i64 0, !dbg !142
  %1125 = insertelement <4 x float> %1124, float %1117, i64 1, !dbg !142
  %1126 = insertelement <4 x float> %1125, float %1118, i64 2, !dbg !142
  %1127 = insertelement <4 x float> %1126, float %1119, i64 3, !dbg !142
  %1128 = fcmp ogt <4 x float> %1127, splat (float -1.270000e+02), !dbg !142
  %1129 = fcmp uno <4 x float> %1127, zeroinitializer, !dbg !144
  %1130 = or <4 x i1> %1128, %1129, !dbg !145
  %1131 = select <4 x i1> %1130, <4 x float> %1127, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1132 = fcmp olt <4 x float> %1131, splat (float 1.270000e+02), !dbg !147
  %1133 = fcmp uno <4 x float> %1131, zeroinitializer, !dbg !149
  %1134 = or <4 x i1> %1132, %1133, !dbg !150
  %1135 = fptosi <4 x float> %1131 to <4 x i8>, !dbg !151
  %1136 = select <4 x i1> %1134, <4 x i8> %1135, <4 x i8> splat (i8 127), !dbg !152
  %1137 = insertelement <4 x float> poison, float %1120, i64 0, !dbg !142
  %1138 = insertelement <4 x float> %1137, float %1121, i64 1, !dbg !142
  %1139 = insertelement <4 x float> %1138, float %1122, i64 2, !dbg !142
  %1140 = insertelement <4 x float> %1139, float %1123, i64 3, !dbg !142
  %1141 = fcmp ogt <4 x float> %1140, splat (float -1.270000e+02), !dbg !142
  %1142 = fcmp uno <4 x float> %1140, zeroinitializer, !dbg !144
  %1143 = or <4 x i1> %1141, %1142, !dbg !145
  %1144 = select <4 x i1> %1143, <4 x float> %1140, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1145 = fcmp olt <4 x float> %1144, splat (float 1.270000e+02), !dbg !147
  %1146 = fcmp uno <4 x float> %1144, zeroinitializer, !dbg !149
  %1147 = or <4 x i1> %1145, %1146, !dbg !150
  %1148 = fptosi <4 x float> %1144 to <4 x i8>, !dbg !151
  %1149 = select <4 x i1> %1147, <4 x i8> %1148, <4 x i8> splat (i8 127), !dbg !152
  %1150 = getelementptr i8, ptr addrspace(1) %12, i64 %1081, !dbg !153
  %1151 = bitcast <4 x i8> %1136 to i32, !dbg !154
  %1152 = bitcast <4 x i8> %1149 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1151, i32 %1152, ptr addrspace(1) %1150, i1 %25) #5, !dbg !154
  %1153 = getelementptr i8, ptr addrspace(1) %13, i64 %1081, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1151, i32 %1152, ptr addrspace(1) %1153, i1 %25) #5, !dbg !156
  %1154 = getelementptr i8, ptr addrspace(1) %14, i64 %1081, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1151, i32 %1152, ptr addrspace(1) %1154, i1 %25) #5, !dbg !158
  %1155 = getelementptr i8, ptr addrspace(1) %15, i64 %1081, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1151, i32 %1152, ptr addrspace(1) %1155, i1 %25) #5, !dbg !160
  %1156 = add i32 %31, 2048, !dbg !161
  %1157 = sext i32 %1156 to i64, !dbg !138
  %1158 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1157, !dbg !138
  %1159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1158, i1 %25) #5, !dbg !139
  %1160 = extractvalue { i32, i32, i32, i32 } %1159, 0, !dbg !139
  %1161 = bitcast i32 %1160 to <2 x bfloat>, !dbg !139
  %1162 = extractvalue { i32, i32, i32, i32 } %1159, 1, !dbg !139
  %1163 = bitcast i32 %1162 to <2 x bfloat>, !dbg !139
  %1164 = extractvalue { i32, i32, i32, i32 } %1159, 2, !dbg !139
  %1165 = bitcast i32 %1164 to <2 x bfloat>, !dbg !139
  %1166 = extractvalue { i32, i32, i32, i32 } %1159, 3, !dbg !139
  %1167 = bitcast i32 %1166 to <2 x bfloat>, !dbg !139
  %1168 = extractelement <2 x bfloat> %1161, i64 0, !dbg !139
  %1169 = extractelement <2 x bfloat> %1161, i64 1, !dbg !139
  %1170 = extractelement <2 x bfloat> %1163, i64 0, !dbg !139
  %1171 = extractelement <2 x bfloat> %1163, i64 1, !dbg !139
  %1172 = extractelement <2 x bfloat> %1165, i64 0, !dbg !139
  %1173 = extractelement <2 x bfloat> %1165, i64 1, !dbg !139
  %1174 = extractelement <2 x bfloat> %1167, i64 0, !dbg !139
  %1175 = extractelement <2 x bfloat> %1167, i64 1, !dbg !139
  %1176 = fpext bfloat %1168 to float, !dbg !140
  %1177 = fpext bfloat %1169 to float, !dbg !140
  %1178 = fpext bfloat %1170 to float, !dbg !140
  %1179 = fpext bfloat %1171 to float, !dbg !140
  %1180 = fpext bfloat %1172 to float, !dbg !140
  %1181 = fpext bfloat %1173 to float, !dbg !140
  %1182 = fpext bfloat %1174 to float, !dbg !140
  %1183 = fpext bfloat %1175 to float, !dbg !140
  %1184 = fmul float %1004, %1176, !dbg !137
  %1185 = fmul float %1004, %1177, !dbg !137
  %1186 = fmul float %1004, %1178, !dbg !137
  %1187 = fmul float %1004, %1179, !dbg !137
  %1188 = fmul float %1004, %1180, !dbg !137
  %1189 = fmul float %1004, %1181, !dbg !137
  %1190 = fmul float %1004, %1182, !dbg !137
  %1191 = fmul float %1004, %1183, !dbg !137
  %1192 = tail call float @llvm.nvvm.round.f(float %1184) #5, !dbg !141
  %1193 = tail call float @llvm.nvvm.round.f(float %1185) #5, !dbg !141
  %1194 = tail call float @llvm.nvvm.round.f(float %1186) #5, !dbg !141
  %1195 = tail call float @llvm.nvvm.round.f(float %1187) #5, !dbg !141
  %1196 = tail call float @llvm.nvvm.round.f(float %1188) #5, !dbg !141
  %1197 = tail call float @llvm.nvvm.round.f(float %1189) #5, !dbg !141
  %1198 = tail call float @llvm.nvvm.round.f(float %1190) #5, !dbg !141
  %1199 = tail call float @llvm.nvvm.round.f(float %1191) #5, !dbg !141
  %1200 = insertelement <4 x float> poison, float %1192, i64 0, !dbg !142
  %1201 = insertelement <4 x float> %1200, float %1193, i64 1, !dbg !142
  %1202 = insertelement <4 x float> %1201, float %1194, i64 2, !dbg !142
  %1203 = insertelement <4 x float> %1202, float %1195, i64 3, !dbg !142
  %1204 = fcmp ogt <4 x float> %1203, splat (float -1.270000e+02), !dbg !142
  %1205 = fcmp uno <4 x float> %1203, zeroinitializer, !dbg !144
  %1206 = or <4 x i1> %1204, %1205, !dbg !145
  %1207 = select <4 x i1> %1206, <4 x float> %1203, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1208 = fcmp olt <4 x float> %1207, splat (float 1.270000e+02), !dbg !147
  %1209 = fcmp uno <4 x float> %1207, zeroinitializer, !dbg !149
  %1210 = or <4 x i1> %1208, %1209, !dbg !150
  %1211 = fptosi <4 x float> %1207 to <4 x i8>, !dbg !151
  %1212 = select <4 x i1> %1210, <4 x i8> %1211, <4 x i8> splat (i8 127), !dbg !152
  %1213 = insertelement <4 x float> poison, float %1196, i64 0, !dbg !142
  %1214 = insertelement <4 x float> %1213, float %1197, i64 1, !dbg !142
  %1215 = insertelement <4 x float> %1214, float %1198, i64 2, !dbg !142
  %1216 = insertelement <4 x float> %1215, float %1199, i64 3, !dbg !142
  %1217 = fcmp ogt <4 x float> %1216, splat (float -1.270000e+02), !dbg !142
  %1218 = fcmp uno <4 x float> %1216, zeroinitializer, !dbg !144
  %1219 = or <4 x i1> %1217, %1218, !dbg !145
  %1220 = select <4 x i1> %1219, <4 x float> %1216, <4 x float> splat (float -1.270000e+02), !dbg !146
  %1221 = fcmp olt <4 x float> %1220, splat (float 1.270000e+02), !dbg !147
  %1222 = fcmp uno <4 x float> %1220, zeroinitializer, !dbg !149
  %1223 = or <4 x i1> %1221, %1222, !dbg !150
  %1224 = fptosi <4 x float> %1220 to <4 x i8>, !dbg !151
  %1225 = select <4 x i1> %1223, <4 x i8> %1224, <4 x i8> splat (i8 127), !dbg !152
  %1226 = getelementptr i8, ptr addrspace(1) %12, i64 %1157, !dbg !153
  %1227 = bitcast <4 x i8> %1212 to i32, !dbg !154
  %1228 = bitcast <4 x i8> %1225 to i32, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1227, i32 %1228, ptr addrspace(1) %1226, i1 %25) #5, !dbg !154
  %1229 = getelementptr i8, ptr addrspace(1) %13, i64 %1157, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1227, i32 %1228, ptr addrspace(1) %1229, i1 %25) #5, !dbg !156
  %1230 = getelementptr i8, ptr addrspace(1) %14, i64 %1157, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1227, i32 %1228, ptr addrspace(1) %1230, i1 %25) #5, !dbg !158
  %1231 = getelementptr i8, ptr addrspace(1) %15, i64 %1157, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1227, i32 %1228, ptr addrspace(1) %1231, i1 %25) #5, !dbg !160
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 51, scope: !6)
!61 = !DILocation(line: 59, column: 113, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 65, column: 24, scope: !6)
!72 = !DILocation(line: 71, column: 24, scope: !6)
!73 = !DILocation(line: 61, column: 102, scope: !6)
!74 = !DILocation(line: 63, column: 95, scope: !6)
!75 = !DILocation(line: 74, column: 24, scope: !6)
!76 = !DILocation(line: 76, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 80, column: 24, scope: !6)
!80 = !DILocation(line: 86, column: 53, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !82)
!82 = !DILocation(line: 82, column: 47, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !82)
!85 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !82)
!86 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 84, column: 47, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !87)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !87)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 95, column: 25, scope: !6)
!117 = !DILocation(line: 95, column: 37, scope: !6)
!118 = !DILocation(line: 96, column: 26, scope: !6)
!119 = !DILocation(line: 96, column: 38, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 106, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !124)
!124 = !DILocation(line: 107, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 108, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 110, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !132)
!132 = !DILocation(line: 113, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !132)
!136 = !DILocation(line: 116, column: 25, scope: !6)
!137 = !DILocation(line: 119, column: 24, scope: !6)
!138 = !DILocation(line: 103, column: 36, scope: !6)
!139 = !DILocation(line: 103, column: 53, scope: !6)
!140 = !DILocation(line: 103, column: 115, scope: !6)
!141 = !DILocation(line: 120, column: 36, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !143)
!143 = !DILocation(line: 123, column: 46, scope: !6)
!144 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !143)
!145 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !143)
!146 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !143)
!147 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !148)
!148 = !DILocation(line: 125, column: 46, scope: !6)
!149 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !148)
!150 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !148)
!151 = !DILocation(line: 127, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !148)
!153 = !DILocation(line: 128, column: 30, scope: !6)
!154 = !DILocation(line: 128, column: 54, scope: !6)
!155 = !DILocation(line: 129, column: 30, scope: !6)
!156 = !DILocation(line: 129, column: 54, scope: !6)
!157 = !DILocation(line: 130, column: 30, scope: !6)
!158 = !DILocation(line: 130, column: 54, scope: !6)
!159 = !DILocation(line: 131, column: 30, scope: !6)
!160 = !DILocation(line: 131, column: 54, scope: !6)
!161 = !DILocation(line: 103, column: 43, scope: !6)
!162 = !DILocation(line: 97, column: 4, scope: !6)
