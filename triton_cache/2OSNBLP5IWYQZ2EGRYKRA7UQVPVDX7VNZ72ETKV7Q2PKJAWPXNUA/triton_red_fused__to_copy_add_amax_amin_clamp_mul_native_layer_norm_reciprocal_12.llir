; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 512, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = shl i32 %19, 4, !dbg !11
  %22 = and i32 %21, 2032, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = or disjoint i32 %22, 8, !dbg !11
  %25 = or disjoint i32 %22, 12, !dbg !11
  %26 = shl i32 %19, 3, !dbg !11
  %27 = and i32 %26, 1016, !dbg !11
  %28 = or disjoint i32 %27, 1024, !dbg !11
  %29 = sext i32 %17 to i64, !dbg !12
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !12
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %47 = bitcast i16 %46 to bfloat, !dbg !13
  %48 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !14
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %65 = bitcast i16 %64 to bfloat, !dbg !15
  %66 = mul i32 %17, 3072, !dbg !16
  %.inv = fcmp oge bfloat %47, 0xR0000, !dbg !17
  %67 = select i1 %.inv, bfloat 0xR0000, bfloat %47, !dbg !17
  %68 = fpext bfloat %67 to float, !dbg !17
  %69 = fsub float 0.000000e+00, %68, !dbg !21
  %.inv3 = fcmp ole bfloat %65, 0xR0000, !dbg !22
  %70 = select i1 %.inv3, bfloat 0xR0000, bfloat %65, !dbg !22
  %71 = fpext bfloat %70 to float, !dbg !22
  %72 = fcmp ogt float %69, %71, !dbg !24
  %73 = fcmp uno float %69, 0.000000e+00, !dbg !26
  %74 = or i1 %73, %72, !dbg !27
  %75 = select i1 %74, float %69, float %71, !dbg !28
  %76 = fmul float %75, 0x3F80204080000000, !dbg !29
  %77 = fcmp ogt float %76, 0x3EE4F8B580000000, !dbg !30
  %78 = fcmp uno float %76, 0.000000e+00, !dbg !32
  %79 = or i1 %77, %78, !dbg !33
  %80 = select i1 %79, float %76, float 0x3EE4F8B580000000, !dbg !34
  %81 = or disjoint i32 %27, %66
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !35
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %24
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %27
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %86 = zext nneg i32 %28 to i64, !dbg !35
  %87 = zext nneg i32 %25 to i64, !dbg !35
  %88 = zext nneg i32 %24 to i64, !dbg !35
  %89 = zext nneg i32 %23 to i64, !dbg !35
  %90 = zext nneg i32 %22 to i64, !dbg !35
  %91 = insertelement <16 x float> poison, float %80, i64 0, !dbg !36
  %92 = shufflevector <16 x float> %91, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !36
  %93 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 4
  %94 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 8
  %95 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 12
  br label %96, !dbg !35

96:                                               ; preds = %16, %._crit_edge
  %97 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %626, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %627, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %628, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %629, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %630, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %631, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %632, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %633, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %16 ], [ %634, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %16 ], [ %635, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %16 ], [ %636, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %16 ], [ %637, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %16 ], [ %638, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %16 ], [ %639, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %16 ], [ %640, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %16 ], [ %641, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %16 ], [ %610, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %16 ], [ %611, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %16 ], [ %612, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %16 ], [ %613, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %16 ], [ %614, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %16 ], [ %615, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %616, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %617, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %618, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %619, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %620, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %621, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %622, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %623, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %624, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %625, %._crit_edge ]
  %130 = phi <16 x float> [ zeroinitializer, %16 ], [ %609, %._crit_edge ]
  %131 = or disjoint i64 %indvars.iv, %90, !dbg !37
  %132 = or disjoint i64 %indvars.iv, %89, !dbg !37
  %133 = or disjoint i64 %indvars.iv, %88, !dbg !37
  %134 = or disjoint i64 %indvars.iv, %87, !dbg !37
  %135 = or disjoint i64 %indvars.iv, %86, !dbg !37
  %136 = icmp samesign ult i64 %131, 3072, !dbg !38
  %137 = icmp samesign ult i64 %135, 3072, !dbg !38
  %138 = trunc nuw nsw i64 %131 to i32, !dbg !39
  %139 = add i32 %66, %138, !dbg !39
  %140 = trunc nuw nsw i64 %132 to i32, !dbg !39
  %141 = add i32 %66, %140, !dbg !39
  %142 = trunc nuw nsw i64 %133 to i32, !dbg !39
  %143 = add i32 %66, %142, !dbg !39
  %144 = trunc nuw nsw i64 %134 to i32, !dbg !39
  %145 = add i32 %66, %144, !dbg !39
  %146 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !39
  %147 = add i32 %81, %146, !dbg !39
  %148 = trunc nuw nsw i64 %135 to i32, !dbg !39
  %149 = add i32 %66, %148, !dbg !39
  %150 = sext i32 %139 to i64, !dbg !40
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !40
  %152 = sext i32 %143 to i64, !dbg !40
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !40
  %154 = and i1 %18, %136, !dbg !41
  %155 = and i1 %18, %137, !dbg !41
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 %154) #5, !dbg !42
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !42
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !42
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !42
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !42
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !42
  %163 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !42
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !42
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %153, i1 %154) #5, !dbg !42
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !42
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !42
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !42
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !42
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !42
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !42
  %174 = add nuw nsw i64 %131, 6144, !dbg !43
  %175 = add nuw nsw i64 %133, 6144, !dbg !43
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !44
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %132, !dbg !44
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !44
  %gep163 = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %134, !dbg !44
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %176, i1 %136) #5, !dbg !45
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !45
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !45
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !45
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !45
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 %136) #5, !dbg !45
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !45
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !45
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !45
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !45
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %177, i1 %136) #5, !dbg !45
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !45
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !45
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !45
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !45
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep163, i1 %136) #5, !dbg !45
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !45
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !45
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !45
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !45
  %198 = getelementptr bfloat, ptr addrspace(1) %2, i64 %174, !dbg !46
  %199 = getelementptr bfloat, ptr addrspace(1) %2, i64 %175, !dbg !46
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %198, i1 %136) #5, !dbg !47
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !47
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !47
  %203 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !47
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !47
  %205 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !47
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !47
  %207 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !47
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !47
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %199, i1 %136) #5, !dbg !47
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !47
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !47
  %212 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !47
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !47
  %214 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !47
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !47
  %216 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !47
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !47
  %218 = getelementptr i32, ptr addrspace(1) %3, i64 %150, !dbg !48
  %219 = sext i32 %141 to i64, !dbg !48
  %220 = getelementptr i32, ptr addrspace(1) %3, i64 %219, !dbg !48
  %221 = getelementptr i32, ptr addrspace(1) %3, i64 %152, !dbg !48
  %222 = sext i32 %145 to i64, !dbg !48
  %223 = getelementptr i32, ptr addrspace(1) %3, i64 %222, !dbg !48
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %154) #5, !dbg !49
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !49
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !49
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !49
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !49
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %154) #5, !dbg !49
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !49
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !49
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !49
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !49
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %154) #5, !dbg !49
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !49
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !49
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !49
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !49
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %223, i1 %154) #5, !dbg !49
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !49
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !49
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !49
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !49
  %244 = getelementptr bfloat, ptr addrspace(1) %6, i64 %131, !dbg !50
  %245 = getelementptr bfloat, ptr addrspace(1) %6, i64 %133, !dbg !50
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %244, i1 %136) #5, !dbg !51
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !51
  %248 = bitcast i32 %247 to <2 x bfloat>, !dbg !51
  %249 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !51
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !51
  %251 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !51
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !51
  %253 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !51
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !51
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %245, i1 %136) #5, !dbg !51
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !51
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !51
  %258 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !51
  %259 = bitcast i32 %258 to <2 x bfloat>, !dbg !51
  %260 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !51
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !51
  %262 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !51
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !51
  %264 = getelementptr bfloat, ptr addrspace(1) %7, i64 %131, !dbg !52
  %265 = getelementptr bfloat, ptr addrspace(1) %7, i64 %133, !dbg !52
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %264, i1 %136) #5, !dbg !53
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !53
  %268 = bitcast i32 %267 to <2 x bfloat>, !dbg !53
  %269 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !53
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !53
  %271 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !53
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !53
  %273 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !53
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !53
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %265, i1 %136) #5, !dbg !53
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !53
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !53
  %278 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !53
  %279 = bitcast i32 %278 to <2 x bfloat>, !dbg !53
  %280 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !53
  %281 = bitcast i32 %280 to <2 x bfloat>, !dbg !53
  %282 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !53
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !53
  %284 = shufflevector <2 x bfloat> %158, <2 x bfloat> %160, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %285 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %286 = shufflevector <16 x bfloat> %284, <16 x bfloat> %285, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %287 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %288 = shufflevector <16 x bfloat> %286, <16 x bfloat> %287, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %289 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %290 = shufflevector <16 x bfloat> %288, <16 x bfloat> %289, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %291 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %292 = shufflevector <16 x bfloat> %290, <16 x bfloat> %291, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %293 = shufflevector <2 x bfloat> %167, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %294 = shufflevector <16 x bfloat> %292, <16 x bfloat> %293, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %295 = shufflevector <2 x bfloat> %167, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %296 = shufflevector <16 x bfloat> %294, <16 x bfloat> %295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %297 = shufflevector <2 x bfloat> %169, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %298 = shufflevector <16 x bfloat> %296, <16 x bfloat> %297, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %299 = shufflevector <2 x bfloat> %169, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %300 = shufflevector <16 x bfloat> %298, <16 x bfloat> %299, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %301 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %302 = shufflevector <16 x bfloat> %300, <16 x bfloat> %301, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !54
  %303 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %304 = shufflevector <16 x bfloat> %302, <16 x bfloat> %303, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !54
  %305 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %306 = shufflevector <16 x bfloat> %304, <16 x bfloat> %305, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !54
  %307 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %308 = shufflevector <16 x bfloat> %306, <16 x bfloat> %307, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !54
  %309 = fpext <16 x bfloat> %308 to <16 x float>, !dbg !54
  %310 = insertelement <16 x i32> poison, i32 %179, i64 0, !dbg !45
  %311 = insertelement <16 x i32> %310, i32 %180, i64 1, !dbg !45
  %312 = insertelement <16 x i32> %311, i32 %181, i64 2, !dbg !45
  %313 = insertelement <16 x i32> %312, i32 %182, i64 3, !dbg !45
  %314 = insertelement <16 x i32> %313, i32 %184, i64 4, !dbg !45
  %315 = insertelement <16 x i32> %314, i32 %185, i64 5, !dbg !45
  %316 = insertelement <16 x i32> %315, i32 %186, i64 6, !dbg !45
  %317 = insertelement <16 x i32> %316, i32 %187, i64 7, !dbg !45
  %318 = insertelement <16 x i32> %317, i32 %189, i64 8, !dbg !45
  %319 = insertelement <16 x i32> %318, i32 %190, i64 9, !dbg !45
  %320 = insertelement <16 x i32> %319, i32 %191, i64 10, !dbg !45
  %321 = insertelement <16 x i32> %320, i32 %192, i64 11, !dbg !45
  %322 = insertelement <16 x i32> %321, i32 %194, i64 12, !dbg !45
  %323 = insertelement <16 x i32> %322, i32 %195, i64 13, !dbg !45
  %324 = insertelement <16 x i32> %323, i32 %196, i64 14, !dbg !45
  %325 = insertelement <16 x i32> %324, i32 %197, i64 15, !dbg !45
  %326 = bitcast <16 x i32> %325 to <16 x float>, !dbg !45
  %327 = shufflevector <2 x bfloat> %202, <2 x bfloat> %204, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %328 = shufflevector <2 x bfloat> %206, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %329 = shufflevector <16 x bfloat> %327, <16 x bfloat> %328, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %330 = shufflevector <2 x bfloat> %206, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %331 = shufflevector <16 x bfloat> %329, <16 x bfloat> %330, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %332 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %333 = shufflevector <16 x bfloat> %331, <16 x bfloat> %332, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %334 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %335 = shufflevector <16 x bfloat> %333, <16 x bfloat> %334, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %336 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %337 = shufflevector <16 x bfloat> %335, <16 x bfloat> %336, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %338 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %339 = shufflevector <16 x bfloat> %337, <16 x bfloat> %338, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %340 = shufflevector <2 x bfloat> %213, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %341 = shufflevector <16 x bfloat> %339, <16 x bfloat> %340, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %342 = shufflevector <2 x bfloat> %213, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %343 = shufflevector <16 x bfloat> %341, <16 x bfloat> %342, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %344 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %345 = shufflevector <16 x bfloat> %343, <16 x bfloat> %344, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !55
  %346 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %347 = shufflevector <16 x bfloat> %345, <16 x bfloat> %346, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !55
  %348 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %349 = shufflevector <16 x bfloat> %347, <16 x bfloat> %348, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !55
  %350 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %351 = shufflevector <16 x bfloat> %349, <16 x bfloat> %350, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !55
  %352 = fpext <16 x bfloat> %351 to <16 x float>, !dbg !55
  %353 = shufflevector <2 x bfloat> %248, <2 x bfloat> %250, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %354 = shufflevector <2 x bfloat> %252, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %355 = shufflevector <16 x bfloat> %353, <16 x bfloat> %354, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %356 = shufflevector <2 x bfloat> %252, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %357 = shufflevector <16 x bfloat> %355, <16 x bfloat> %356, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %358 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %359 = shufflevector <16 x bfloat> %357, <16 x bfloat> %358, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %360 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %361 = shufflevector <16 x bfloat> %359, <16 x bfloat> %360, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %362 = shufflevector <2 x bfloat> %257, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %363 = shufflevector <16 x bfloat> %361, <16 x bfloat> %362, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %364 = shufflevector <2 x bfloat> %257, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %365 = shufflevector <16 x bfloat> %363, <16 x bfloat> %364, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %366 = shufflevector <2 x bfloat> %259, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %367 = shufflevector <16 x bfloat> %365, <16 x bfloat> %366, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %368 = shufflevector <2 x bfloat> %259, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %369 = shufflevector <16 x bfloat> %367, <16 x bfloat> %368, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %370 = shufflevector <2 x bfloat> %261, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %371 = shufflevector <16 x bfloat> %369, <16 x bfloat> %370, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !56
  %372 = shufflevector <2 x bfloat> %261, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %373 = shufflevector <16 x bfloat> %371, <16 x bfloat> %372, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !56
  %374 = shufflevector <2 x bfloat> %263, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %375 = shufflevector <16 x bfloat> %373, <16 x bfloat> %374, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !56
  %376 = shufflevector <2 x bfloat> %263, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %377 = shufflevector <16 x bfloat> %375, <16 x bfloat> %376, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !56
  %378 = fpext <16 x bfloat> %377 to <16 x float>, !dbg !56
  %379 = shufflevector <2 x bfloat> %268, <2 x bfloat> %270, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %380 = shufflevector <2 x bfloat> %272, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %381 = shufflevector <16 x bfloat> %379, <16 x bfloat> %380, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %382 = shufflevector <2 x bfloat> %272, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %383 = shufflevector <16 x bfloat> %381, <16 x bfloat> %382, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %384 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %385 = shufflevector <16 x bfloat> %383, <16 x bfloat> %384, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %386 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %387 = shufflevector <16 x bfloat> %385, <16 x bfloat> %386, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %388 = shufflevector <2 x bfloat> %277, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %389 = shufflevector <16 x bfloat> %387, <16 x bfloat> %388, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %390 = shufflevector <2 x bfloat> %277, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %391 = shufflevector <16 x bfloat> %389, <16 x bfloat> %390, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %392 = shufflevector <2 x bfloat> %279, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %393 = shufflevector <16 x bfloat> %391, <16 x bfloat> %392, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %394 = shufflevector <2 x bfloat> %279, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %395 = shufflevector <16 x bfloat> %393, <16 x bfloat> %394, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %396 = shufflevector <2 x bfloat> %281, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %397 = shufflevector <16 x bfloat> %395, <16 x bfloat> %396, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !57
  %398 = shufflevector <2 x bfloat> %281, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %399 = shufflevector <16 x bfloat> %397, <16 x bfloat> %398, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !57
  %400 = shufflevector <2 x bfloat> %283, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %401 = shufflevector <16 x bfloat> %399, <16 x bfloat> %400, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !57
  %402 = shufflevector <2 x bfloat> %283, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %403 = shufflevector <16 x bfloat> %401, <16 x bfloat> %402, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !57
  %404 = fpext <16 x bfloat> %403 to <16 x float>, !dbg !57
  %405 = fadd <16 x float> %326, %352, !dbg !58
  %406 = insertelement <16 x i32> poison, i32 %225, i64 0, !dbg !59
  %407 = insertelement <16 x i32> %406, i32 %226, i64 1, !dbg !59
  %408 = insertelement <16 x i32> %407, i32 %227, i64 2, !dbg !59
  %409 = insertelement <16 x i32> %408, i32 %228, i64 3, !dbg !59
  %410 = insertelement <16 x i32> %409, i32 %230, i64 4, !dbg !59
  %411 = insertelement <16 x i32> %410, i32 %231, i64 5, !dbg !59
  %412 = insertelement <16 x i32> %411, i32 %232, i64 6, !dbg !59
  %413 = insertelement <16 x i32> %412, i32 %233, i64 7, !dbg !59
  %414 = insertelement <16 x i32> %413, i32 %235, i64 8, !dbg !59
  %415 = insertelement <16 x i32> %414, i32 %236, i64 9, !dbg !59
  %416 = insertelement <16 x i32> %415, i32 %237, i64 10, !dbg !59
  %417 = insertelement <16 x i32> %416, i32 %238, i64 11, !dbg !59
  %418 = insertelement <16 x i32> %417, i32 %240, i64 12, !dbg !59
  %419 = insertelement <16 x i32> %418, i32 %241, i64 13, !dbg !59
  %420 = insertelement <16 x i32> %419, i32 %242, i64 14, !dbg !59
  %421 = insertelement <16 x i32> %420, i32 %243, i64 15, !dbg !59
  %422 = sitofp <16 x i32> %421 to <16 x float>, !dbg !59
  %423 = fmul <16 x float> %92, %422, !dbg !36
  %424 = fmul <16 x float> %423, %378, !dbg !60
  %425 = fadd <16 x float> %424, %404, !dbg !61
  %426 = fmul <16 x float> %405, %425, !dbg !62
  %427 = fadd <16 x float> %426, %309, !dbg !63
  br i1 %97, label %._crit_edge, label %428, !dbg !64

428:                                              ; preds = %96
  %429 = fsub <16 x float> %427, %130, !dbg !66
  %430 = extractelement <16 x float> %429, i64 0, !dbg !66
  %431 = fsub <16 x float> %427, %130, !dbg !66
  %432 = extractelement <16 x float> %431, i64 1, !dbg !66
  %433 = fsub <16 x float> %427, %130, !dbg !66
  %434 = extractelement <16 x float> %433, i64 2, !dbg !66
  %435 = fsub <16 x float> %427, %130, !dbg !66
  %436 = extractelement <16 x float> %435, i64 3, !dbg !66
  %437 = fsub <16 x float> %427, %130, !dbg !66
  %438 = extractelement <16 x float> %437, i64 4, !dbg !66
  %439 = fsub <16 x float> %427, %130, !dbg !66
  %440 = extractelement <16 x float> %439, i64 5, !dbg !66
  %441 = fsub <16 x float> %427, %130, !dbg !66
  %442 = extractelement <16 x float> %441, i64 6, !dbg !66
  %443 = fsub <16 x float> %427, %130, !dbg !66
  %444 = extractelement <16 x float> %443, i64 7, !dbg !66
  %445 = fsub <16 x float> %427, %130, !dbg !66
  %446 = extractelement <16 x float> %445, i64 8, !dbg !66
  %447 = fsub <16 x float> %427, %130, !dbg !66
  %448 = extractelement <16 x float> %447, i64 9, !dbg !66
  %449 = fsub <16 x float> %427, %130, !dbg !66
  %450 = extractelement <16 x float> %449, i64 10, !dbg !66
  %451 = fsub <16 x float> %427, %130, !dbg !66
  %452 = extractelement <16 x float> %451, i64 11, !dbg !66
  %453 = fsub <16 x float> %427, %130, !dbg !66
  %454 = extractelement <16 x float> %453, i64 12, !dbg !66
  %455 = fsub <16 x float> %427, %130, !dbg !66
  %456 = extractelement <16 x float> %455, i64 13, !dbg !66
  %457 = fsub <16 x float> %427, %130, !dbg !66
  %458 = extractelement <16 x float> %457, i64 14, !dbg !66
  %459 = fsub <16 x float> %427, %130, !dbg !66
  %460 = extractelement <16 x float> %459, i64 15, !dbg !66
  %461 = fadd float %98, 1.000000e+00, !dbg !67
  %462 = fadd float %99, 1.000000e+00, !dbg !67
  %463 = fadd float %100, 1.000000e+00, !dbg !67
  %464 = fadd float %101, 1.000000e+00, !dbg !67
  %465 = fadd float %102, 1.000000e+00, !dbg !67
  %466 = fadd float %103, 1.000000e+00, !dbg !67
  %467 = fadd float %104, 1.000000e+00, !dbg !67
  %468 = fadd float %105, 1.000000e+00, !dbg !67
  %469 = fadd float %106, 1.000000e+00, !dbg !67
  %470 = fadd float %107, 1.000000e+00, !dbg !67
  %471 = fadd float %108, 1.000000e+00, !dbg !67
  %472 = fadd float %109, 1.000000e+00, !dbg !67
  %473 = fadd float %110, 1.000000e+00, !dbg !67
  %474 = fadd float %111, 1.000000e+00, !dbg !67
  %475 = fadd float %112, 1.000000e+00, !dbg !67
  %476 = fadd float %113, 1.000000e+00, !dbg !67
  %477 = tail call float @llvm.nvvm.div.full(float %430, float %461), !dbg !68
  %478 = tail call float @llvm.nvvm.div.full(float %432, float %462), !dbg !68
  %479 = tail call float @llvm.nvvm.div.full(float %434, float %463), !dbg !68
  %480 = tail call float @llvm.nvvm.div.full(float %436, float %464), !dbg !68
  %481 = tail call float @llvm.nvvm.div.full(float %438, float %465), !dbg !68
  %482 = tail call float @llvm.nvvm.div.full(float %440, float %466), !dbg !68
  %483 = tail call float @llvm.nvvm.div.full(float %442, float %467), !dbg !68
  %484 = tail call float @llvm.nvvm.div.full(float %444, float %468), !dbg !68
  %485 = tail call float @llvm.nvvm.div.full(float %446, float %469), !dbg !68
  %486 = tail call float @llvm.nvvm.div.full(float %448, float %470), !dbg !68
  %487 = tail call float @llvm.nvvm.div.full(float %450, float %471), !dbg !68
  %488 = tail call float @llvm.nvvm.div.full(float %452, float %472), !dbg !68
  %489 = tail call float @llvm.nvvm.div.full(float %454, float %473), !dbg !68
  %490 = tail call float @llvm.nvvm.div.full(float %456, float %474), !dbg !68
  %491 = tail call float @llvm.nvvm.div.full(float %458, float %475), !dbg !68
  %492 = tail call float @llvm.nvvm.div.full(float %460, float %476), !dbg !68
  %493 = insertelement <16 x float> poison, float %477, i64 0, !dbg !69
  %494 = insertelement <16 x float> %493, float %478, i64 1, !dbg !69
  %495 = insertelement <16 x float> %494, float %479, i64 2, !dbg !69
  %496 = insertelement <16 x float> %495, float %480, i64 3, !dbg !69
  %497 = insertelement <16 x float> %496, float %481, i64 4, !dbg !69
  %498 = insertelement <16 x float> %497, float %482, i64 5, !dbg !69
  %499 = insertelement <16 x float> %498, float %483, i64 6, !dbg !69
  %500 = insertelement <16 x float> %499, float %484, i64 7, !dbg !69
  %501 = insertelement <16 x float> %500, float %485, i64 8, !dbg !69
  %502 = insertelement <16 x float> %501, float %486, i64 9, !dbg !69
  %503 = insertelement <16 x float> %502, float %487, i64 10, !dbg !69
  %504 = insertelement <16 x float> %503, float %488, i64 11, !dbg !69
  %505 = insertelement <16 x float> %504, float %489, i64 12, !dbg !69
  %506 = insertelement <16 x float> %505, float %490, i64 13, !dbg !69
  %507 = insertelement <16 x float> %506, float %491, i64 14, !dbg !69
  %508 = insertelement <16 x float> %507, float %492, i64 15, !dbg !69
  %509 = fadd <16 x float> %130, %508, !dbg !69
  %510 = fsub <16 x float> %427, %509, !dbg !70
  %511 = fsub <16 x float> %427, %509, !dbg !70
  %512 = fsub <16 x float> %427, %509, !dbg !70
  %513 = fsub <16 x float> %427, %509, !dbg !70
  %514 = fsub <16 x float> %427, %509, !dbg !70
  %515 = fsub <16 x float> %427, %509, !dbg !70
  %516 = fsub <16 x float> %427, %509, !dbg !70
  %517 = fsub <16 x float> %427, %509, !dbg !70
  %518 = fsub <16 x float> %427, %509, !dbg !70
  %519 = fsub <16 x float> %427, %509, !dbg !70
  %520 = fsub <16 x float> %427, %509, !dbg !70
  %521 = fsub <16 x float> %427, %509, !dbg !70
  %522 = fsub <16 x float> %427, %509, !dbg !70
  %523 = fsub <16 x float> %427, %509, !dbg !70
  %524 = fsub <16 x float> %427, %509, !dbg !70
  %525 = fsub <16 x float> %427, %509, !dbg !70
  %526 = fmul <16 x float> %429, %510, !dbg !71
  %527 = extractelement <16 x float> %526, i64 0, !dbg !71
  %528 = fmul <16 x float> %431, %511, !dbg !71
  %529 = extractelement <16 x float> %528, i64 1, !dbg !71
  %530 = fmul <16 x float> %433, %512, !dbg !71
  %531 = extractelement <16 x float> %530, i64 2, !dbg !71
  %532 = fmul <16 x float> %435, %513, !dbg !71
  %533 = extractelement <16 x float> %532, i64 3, !dbg !71
  %534 = fmul <16 x float> %437, %514, !dbg !71
  %535 = extractelement <16 x float> %534, i64 4, !dbg !71
  %536 = fmul <16 x float> %439, %515, !dbg !71
  %537 = extractelement <16 x float> %536, i64 5, !dbg !71
  %538 = fmul <16 x float> %441, %516, !dbg !71
  %539 = extractelement <16 x float> %538, i64 6, !dbg !71
  %540 = fmul <16 x float> %443, %517, !dbg !71
  %541 = extractelement <16 x float> %540, i64 7, !dbg !71
  %542 = fmul <16 x float> %445, %518, !dbg !71
  %543 = extractelement <16 x float> %542, i64 8, !dbg !71
  %544 = fmul <16 x float> %447, %519, !dbg !71
  %545 = extractelement <16 x float> %544, i64 9, !dbg !71
  %546 = fmul <16 x float> %449, %520, !dbg !71
  %547 = extractelement <16 x float> %546, i64 10, !dbg !71
  %548 = fmul <16 x float> %451, %521, !dbg !71
  %549 = extractelement <16 x float> %548, i64 11, !dbg !71
  %550 = fmul <16 x float> %453, %522, !dbg !71
  %551 = extractelement <16 x float> %550, i64 12, !dbg !71
  %552 = fmul <16 x float> %455, %523, !dbg !71
  %553 = extractelement <16 x float> %552, i64 13, !dbg !71
  %554 = fmul <16 x float> %457, %524, !dbg !71
  %555 = extractelement <16 x float> %554, i64 14, !dbg !71
  %556 = fmul <16 x float> %459, %525, !dbg !71
  %557 = extractelement <16 x float> %556, i64 15, !dbg !71
  %558 = fadd float %114, %527, !dbg !72
  %559 = fadd float %115, %529, !dbg !72
  %560 = fadd float %116, %531, !dbg !72
  %561 = fadd float %117, %533, !dbg !72
  %562 = fadd float %118, %535, !dbg !72
  %563 = fadd float %119, %537, !dbg !72
  %564 = fadd float %120, %539, !dbg !72
  %565 = fadd float %121, %541, !dbg !72
  %566 = fadd float %122, %543, !dbg !72
  %567 = fadd float %123, %545, !dbg !72
  %568 = fadd float %124, %547, !dbg !72
  %569 = fadd float %125, %549, !dbg !72
  %570 = fadd float %126, %551, !dbg !72
  %571 = fadd float %127, %553, !dbg !72
  %572 = fadd float %128, %555, !dbg !72
  %573 = fadd float %129, %557, !dbg !72
  br label %._crit_edge, !dbg !64

._crit_edge:                                      ; preds = %96, %428
  %574 = phi float [ %558, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %575 = phi float [ %559, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %576 = phi float [ %560, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %577 = phi float [ %561, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %578 = phi float [ %562, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %579 = phi float [ %563, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %580 = phi float [ %564, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %581 = phi float [ %565, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %582 = phi float [ %566, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %583 = phi float [ %567, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %584 = phi float [ %568, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %585 = phi float [ %569, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %586 = phi float [ %570, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %587 = phi float [ %571, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %588 = phi float [ %572, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %589 = phi float [ %573, %428 ], [ 0.000000e+00, %96 ], !dbg !65
  %590 = phi float [ %461, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %591 = phi float [ %462, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %592 = phi float [ %463, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %593 = phi float [ %464, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %594 = phi float [ %465, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %595 = phi float [ %466, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %596 = phi float [ %467, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %597 = phi float [ %468, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %598 = phi float [ %469, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %599 = phi float [ %470, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %600 = phi float [ %471, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %601 = phi float [ %472, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %602 = phi float [ %473, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %603 = phi float [ %474, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %604 = phi float [ %475, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %605 = phi float [ %476, %428 ], [ 1.000000e+00, %96 ], !dbg !65
  %606 = phi <16 x float> [ %509, %428 ], [ %427, %96 ]
  %607 = insertelement <16 x i1> poison, i1 %154, i64 0, !dbg !73
  %608 = shufflevector <16 x i1> %607, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !73
  %609 = select <16 x i1> %608, <16 x float> %606, <16 x float> %130, !dbg !73
  %610 = select i1 %154, float %574, float %114, !dbg !74
  %611 = select i1 %154, float %575, float %115, !dbg !74
  %612 = select i1 %154, float %576, float %116, !dbg !74
  %613 = select i1 %154, float %577, float %117, !dbg !74
  %614 = select i1 %154, float %578, float %118, !dbg !74
  %615 = select i1 %154, float %579, float %119, !dbg !74
  %616 = select i1 %154, float %580, float %120, !dbg !74
  %617 = select i1 %154, float %581, float %121, !dbg !74
  %618 = select i1 %154, float %582, float %122, !dbg !74
  %619 = select i1 %154, float %583, float %123, !dbg !74
  %620 = select i1 %154, float %584, float %124, !dbg !74
  %621 = select i1 %154, float %585, float %125, !dbg !74
  %622 = select i1 %154, float %586, float %126, !dbg !74
  %623 = select i1 %154, float %587, float %127, !dbg !74
  %624 = select i1 %154, float %588, float %128, !dbg !74
  %625 = select i1 %154, float %589, float %129, !dbg !74
  %626 = select i1 %154, float %590, float %98, !dbg !75
  %627 = select i1 %154, float %591, float %99, !dbg !75
  %628 = select i1 %154, float %592, float %100, !dbg !75
  %629 = select i1 %154, float %593, float %101, !dbg !75
  %630 = select i1 %154, float %594, float %102, !dbg !75
  %631 = select i1 %154, float %595, float %103, !dbg !75
  %632 = select i1 %154, float %596, float %104, !dbg !75
  %633 = select i1 %154, float %597, float %105, !dbg !75
  %634 = select i1 %154, float %598, float %106, !dbg !75
  %635 = select i1 %154, float %599, float %107, !dbg !75
  %636 = select i1 %154, float %600, float %108, !dbg !75
  %637 = select i1 %154, float %601, float %109, !dbg !75
  %638 = select i1 %154, float %602, float %110, !dbg !75
  %639 = select i1 %154, float %603, float %111, !dbg !75
  %640 = select i1 %154, float %604, float %112, !dbg !75
  %641 = select i1 %154, float %605, float %113, !dbg !75
  %642 = sext i32 %147 to i64, !dbg !76
  %643 = getelementptr bfloat, ptr addrspace(1) %8, i64 %642, !dbg !76
  %644 = sext i32 %149 to i64, !dbg !76
  %645 = getelementptr bfloat, ptr addrspace(1) %8, i64 %644, !dbg !76
  %646 = extractelement <16 x float> %427, i64 0, !dbg !77
  %647 = fptrunc float %646 to bfloat, !dbg !77
  %648 = extractelement <16 x float> %427, i64 1, !dbg !77
  %649 = fptrunc float %648 to bfloat, !dbg !77
  %650 = extractelement <16 x float> %427, i64 2, !dbg !77
  %651 = fptrunc float %650 to bfloat, !dbg !77
  %652 = extractelement <16 x float> %427, i64 3, !dbg !77
  %653 = fptrunc float %652 to bfloat, !dbg !77
  %654 = extractelement <16 x float> %427, i64 4, !dbg !77
  %655 = fptrunc float %654 to bfloat, !dbg !77
  %656 = extractelement <16 x float> %427, i64 5, !dbg !77
  %657 = fptrunc float %656 to bfloat, !dbg !77
  %658 = extractelement <16 x float> %427, i64 6, !dbg !77
  %659 = fptrunc float %658 to bfloat, !dbg !77
  %660 = extractelement <16 x float> %427, i64 7, !dbg !77
  %661 = fptrunc float %660 to bfloat, !dbg !77
  %662 = extractelement <16 x float> %427, i64 8, !dbg !77
  %663 = fptrunc float %662 to bfloat, !dbg !77
  %664 = extractelement <16 x float> %427, i64 9, !dbg !77
  %665 = fptrunc float %664 to bfloat, !dbg !77
  %666 = extractelement <16 x float> %427, i64 10, !dbg !77
  %667 = fptrunc float %666 to bfloat, !dbg !77
  %668 = extractelement <16 x float> %427, i64 11, !dbg !77
  %669 = fptrunc float %668 to bfloat, !dbg !77
  %670 = extractelement <16 x float> %427, i64 12, !dbg !77
  %671 = fptrunc float %670 to bfloat, !dbg !77
  %672 = extractelement <16 x float> %427, i64 13, !dbg !77
  %673 = fptrunc float %672 to bfloat, !dbg !77
  %674 = extractelement <16 x float> %427, i64 14, !dbg !77
  %675 = fptrunc float %674 to bfloat, !dbg !77
  %676 = extractelement <16 x float> %427, i64 15, !dbg !77
  %677 = fptrunc float %676 to bfloat, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %678 = insertelement <2 x bfloat> poison, bfloat %647, i64 0, !dbg !77
  %679 = insertelement <2 x bfloat> %678, bfloat %649, i64 1, !dbg !77
  %680 = bitcast <2 x bfloat> %679 to i32, !dbg !77
  %681 = insertelement <2 x bfloat> poison, bfloat %651, i64 0, !dbg !77
  %682 = insertelement <2 x bfloat> %681, bfloat %653, i64 1, !dbg !77
  %683 = bitcast <2 x bfloat> %682 to i32, !dbg !77
  %684 = insertelement <2 x bfloat> poison, bfloat %655, i64 0, !dbg !77
  %685 = insertelement <2 x bfloat> %684, bfloat %657, i64 1, !dbg !77
  %686 = bitcast <2 x bfloat> %685 to i32, !dbg !77
  %687 = insertelement <2 x bfloat> poison, bfloat %659, i64 0, !dbg !77
  %688 = insertelement <2 x bfloat> %687, bfloat %661, i64 1, !dbg !77
  %689 = bitcast <2 x bfloat> %688 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %82, i32 %680, i32 %683, i32 %686, i32 %689, i1 true) #5, !dbg !77
  %690 = insertelement <2 x bfloat> poison, bfloat %663, i64 0, !dbg !77
  %691 = insertelement <2 x bfloat> %690, bfloat %665, i64 1, !dbg !77
  %692 = bitcast <2 x bfloat> %691 to i32, !dbg !77
  %693 = insertelement <2 x bfloat> poison, bfloat %667, i64 0, !dbg !77
  %694 = insertelement <2 x bfloat> %693, bfloat %669, i64 1, !dbg !77
  %695 = bitcast <2 x bfloat> %694 to i32, !dbg !77
  %696 = insertelement <2 x bfloat> poison, bfloat %671, i64 0, !dbg !77
  %697 = insertelement <2 x bfloat> %696, bfloat %673, i64 1, !dbg !77
  %698 = bitcast <2 x bfloat> %697 to i32, !dbg !77
  %699 = insertelement <2 x bfloat> poison, bfloat %675, i64 0, !dbg !77
  %700 = insertelement <2 x bfloat> %699, bfloat %677, i64 1, !dbg !77
  %701 = bitcast <2 x bfloat> %700 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %83, i32 %692, i32 %695, i32 %698, i32 %701, i1 true) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %702 = load <4 x i32>, ptr addrspace(3) %85, align 16, !dbg !77
  %.extract143 = load i32, ptr addrspace(3) %84, align 16, !dbg !77
  %.extract145 = load i32, ptr addrspace(3) %93, align 4, !dbg !77
  %.extract147 = load i32, ptr addrspace(3) %94, align 8, !dbg !77
  %.extract149 = load i32, ptr addrspace(3) %95, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract143, i32 %.extract145, i32 %.extract147, i32 %.extract149, ptr addrspace(1) %643, i1 %18) #5, !dbg !77
  %.extract151 = extractelement <4 x i32> %702, i64 0, !dbg !77
  %.extract153 = extractelement <4 x i32> %702, i64 1, !dbg !77
  %.extract155 = extractelement <4 x i32> %702, i64 2, !dbg !77
  %.extract157 = extractelement <4 x i32> %702, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract151, i32 %.extract153, i32 %.extract155, i32 %.extract157, ptr addrspace(1) %645, i1 %155) #5, !dbg !77
  br i1 %97, label %96, label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %703 = lshr i32 %19, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %704 = extractelement <16 x float> %609, i64 0, !dbg !80
  %705 = extractelement <16 x float> %609, i64 1, !dbg !80
  %706 = fsub float %705, %704, !dbg !80
  %707 = fadd float %626, %627, !dbg !82
  %708 = fcmp oeq float %707, 0.000000e+00, !dbg !83
  %709 = tail call float @llvm.nvvm.div.full(float %627, float %707), !dbg !84
  %710 = select i1 %708, float 0.000000e+00, float %709, !dbg !85
  %711 = fmul float %706, %710, !dbg !86
  %712 = fadd float %704, %711, !dbg !87
  %713 = fadd float %610, %611, !dbg !88
  %714 = fmul float %706, %706, !dbg !89
  %715 = fmul float %714, %626, !dbg !90
  %716 = fmul float %715, %710, !dbg !91
  %717 = fadd float %713, %716, !dbg !92
  %718 = extractelement <16 x float> %609, i64 2, !dbg !80
  %719 = fsub float %718, %712, !dbg !80
  %720 = fadd float %628, %707, !dbg !82
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !83
  %722 = tail call float @llvm.nvvm.div.full(float %628, float %720), !dbg !84
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !85
  %724 = fmul float %723, %719, !dbg !86
  %725 = fadd float %712, %724, !dbg !87
  %726 = fadd float %612, %717, !dbg !88
  %727 = fmul float %719, %719, !dbg !89
  %728 = fmul float %707, %727, !dbg !90
  %729 = fmul float %723, %728, !dbg !91
  %730 = fadd float %726, %729, !dbg !92
  %731 = extractelement <16 x float> %609, i64 3, !dbg !80
  %732 = fsub float %731, %725, !dbg !80
  %733 = fadd float %629, %720, !dbg !82
  %734 = fcmp oeq float %733, 0.000000e+00, !dbg !83
  %735 = tail call float @llvm.nvvm.div.full(float %629, float %733), !dbg !84
  %736 = select i1 %734, float 0.000000e+00, float %735, !dbg !85
  %737 = fmul float %736, %732, !dbg !86
  %738 = fadd float %725, %737, !dbg !87
  %739 = fadd float %613, %730, !dbg !88
  %740 = fmul float %732, %732, !dbg !89
  %741 = fmul float %720, %740, !dbg !90
  %742 = fmul float %736, %741, !dbg !91
  %743 = fadd float %739, %742, !dbg !92
  %744 = extractelement <16 x float> %609, i64 4, !dbg !80
  %745 = fsub float %744, %738, !dbg !80
  %746 = fadd float %630, %733, !dbg !82
  %747 = fcmp oeq float %746, 0.000000e+00, !dbg !83
  %748 = tail call float @llvm.nvvm.div.full(float %630, float %746), !dbg !84
  %749 = select i1 %747, float 0.000000e+00, float %748, !dbg !85
  %750 = fmul float %749, %745, !dbg !86
  %751 = fadd float %738, %750, !dbg !87
  %752 = fadd float %614, %743, !dbg !88
  %753 = fmul float %745, %745, !dbg !89
  %754 = fmul float %733, %753, !dbg !90
  %755 = fmul float %749, %754, !dbg !91
  %756 = fadd float %752, %755, !dbg !92
  %757 = extractelement <16 x float> %609, i64 5, !dbg !80
  %758 = fsub float %757, %751, !dbg !80
  %759 = fadd float %631, %746, !dbg !82
  %760 = fcmp oeq float %759, 0.000000e+00, !dbg !83
  %761 = tail call float @llvm.nvvm.div.full(float %631, float %759), !dbg !84
  %762 = select i1 %760, float 0.000000e+00, float %761, !dbg !85
  %763 = fmul float %762, %758, !dbg !86
  %764 = fadd float %751, %763, !dbg !87
  %765 = fadd float %615, %756, !dbg !88
  %766 = fmul float %758, %758, !dbg !89
  %767 = fmul float %746, %766, !dbg !90
  %768 = fmul float %762, %767, !dbg !91
  %769 = fadd float %765, %768, !dbg !92
  %770 = extractelement <16 x float> %609, i64 6, !dbg !80
  %771 = fsub float %770, %764, !dbg !80
  %772 = fadd float %632, %759, !dbg !82
  %773 = fcmp oeq float %772, 0.000000e+00, !dbg !83
  %774 = tail call float @llvm.nvvm.div.full(float %632, float %772), !dbg !84
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !85
  %776 = fmul float %775, %771, !dbg !86
  %777 = fadd float %764, %776, !dbg !87
  %778 = fadd float %616, %769, !dbg !88
  %779 = fmul float %771, %771, !dbg !89
  %780 = fmul float %759, %779, !dbg !90
  %781 = fmul float %775, %780, !dbg !91
  %782 = fadd float %778, %781, !dbg !92
  %783 = extractelement <16 x float> %609, i64 7, !dbg !80
  %784 = fsub float %783, %777, !dbg !80
  %785 = fadd float %633, %772, !dbg !82
  %786 = fcmp oeq float %785, 0.000000e+00, !dbg !83
  %787 = tail call float @llvm.nvvm.div.full(float %633, float %785), !dbg !84
  %788 = select i1 %786, float 0.000000e+00, float %787, !dbg !85
  %789 = fmul float %788, %784, !dbg !86
  %790 = fadd float %777, %789, !dbg !87
  %791 = fadd float %617, %782, !dbg !88
  %792 = fmul float %784, %784, !dbg !89
  %793 = fmul float %772, %792, !dbg !90
  %794 = fmul float %788, %793, !dbg !91
  %795 = fadd float %791, %794, !dbg !92
  %796 = extractelement <16 x float> %609, i64 8, !dbg !80
  %797 = fsub float %796, %790, !dbg !80
  %798 = fadd float %634, %785, !dbg !82
  %799 = fcmp oeq float %798, 0.000000e+00, !dbg !83
  %800 = tail call float @llvm.nvvm.div.full(float %634, float %798), !dbg !84
  %801 = select i1 %799, float 0.000000e+00, float %800, !dbg !85
  %802 = fmul float %801, %797, !dbg !86
  %803 = fadd float %790, %802, !dbg !87
  %804 = fadd float %618, %795, !dbg !88
  %805 = fmul float %797, %797, !dbg !89
  %806 = fmul float %785, %805, !dbg !90
  %807 = fmul float %801, %806, !dbg !91
  %808 = fadd float %804, %807, !dbg !92
  %809 = extractelement <16 x float> %609, i64 9, !dbg !80
  %810 = fsub float %809, %803, !dbg !80
  %811 = fadd float %635, %798, !dbg !82
  %812 = fcmp oeq float %811, 0.000000e+00, !dbg !83
  %813 = tail call float @llvm.nvvm.div.full(float %635, float %811), !dbg !84
  %814 = select i1 %812, float 0.000000e+00, float %813, !dbg !85
  %815 = fmul float %814, %810, !dbg !86
  %816 = fadd float %803, %815, !dbg !87
  %817 = fadd float %619, %808, !dbg !88
  %818 = fmul float %810, %810, !dbg !89
  %819 = fmul float %798, %818, !dbg !90
  %820 = fmul float %814, %819, !dbg !91
  %821 = fadd float %817, %820, !dbg !92
  %822 = extractelement <16 x float> %609, i64 10, !dbg !80
  %823 = fsub float %822, %816, !dbg !80
  %824 = fadd float %636, %811, !dbg !82
  %825 = fcmp oeq float %824, 0.000000e+00, !dbg !83
  %826 = tail call float @llvm.nvvm.div.full(float %636, float %824), !dbg !84
  %827 = select i1 %825, float 0.000000e+00, float %826, !dbg !85
  %828 = fmul float %827, %823, !dbg !86
  %829 = fadd float %816, %828, !dbg !87
  %830 = fadd float %620, %821, !dbg !88
  %831 = fmul float %823, %823, !dbg !89
  %832 = fmul float %811, %831, !dbg !90
  %833 = fmul float %827, %832, !dbg !91
  %834 = fadd float %830, %833, !dbg !92
  %835 = extractelement <16 x float> %609, i64 11, !dbg !80
  %836 = fsub float %835, %829, !dbg !80
  %837 = fadd float %637, %824, !dbg !82
  %838 = fcmp oeq float %837, 0.000000e+00, !dbg !83
  %839 = tail call float @llvm.nvvm.div.full(float %637, float %837), !dbg !84
  %840 = select i1 %838, float 0.000000e+00, float %839, !dbg !85
  %841 = fmul float %840, %836, !dbg !86
  %842 = fadd float %829, %841, !dbg !87
  %843 = fadd float %621, %834, !dbg !88
  %844 = fmul float %836, %836, !dbg !89
  %845 = fmul float %824, %844, !dbg !90
  %846 = fmul float %840, %845, !dbg !91
  %847 = fadd float %843, %846, !dbg !92
  %848 = extractelement <16 x float> %609, i64 12, !dbg !80
  %849 = fsub float %848, %842, !dbg !80
  %850 = fadd float %638, %837, !dbg !82
  %851 = fcmp oeq float %850, 0.000000e+00, !dbg !83
  %852 = tail call float @llvm.nvvm.div.full(float %638, float %850), !dbg !84
  %853 = select i1 %851, float 0.000000e+00, float %852, !dbg !85
  %854 = fmul float %853, %849, !dbg !86
  %855 = fadd float %842, %854, !dbg !87
  %856 = fadd float %622, %847, !dbg !88
  %857 = fmul float %849, %849, !dbg !89
  %858 = fmul float %837, %857, !dbg !90
  %859 = fmul float %853, %858, !dbg !91
  %860 = fadd float %856, %859, !dbg !92
  %861 = extractelement <16 x float> %609, i64 13, !dbg !80
  %862 = fsub float %861, %855, !dbg !80
  %863 = fadd float %639, %850, !dbg !82
  %864 = fcmp oeq float %863, 0.000000e+00, !dbg !83
  %865 = tail call float @llvm.nvvm.div.full(float %639, float %863), !dbg !84
  %866 = select i1 %864, float 0.000000e+00, float %865, !dbg !85
  %867 = fmul float %866, %862, !dbg !86
  %868 = fadd float %855, %867, !dbg !87
  %869 = fadd float %623, %860, !dbg !88
  %870 = fmul float %862, %862, !dbg !89
  %871 = fmul float %850, %870, !dbg !90
  %872 = fmul float %866, %871, !dbg !91
  %873 = fadd float %869, %872, !dbg !92
  %874 = extractelement <16 x float> %609, i64 14, !dbg !80
  %875 = fsub float %874, %868, !dbg !80
  %876 = fadd float %640, %863, !dbg !82
  %877 = fcmp oeq float %876, 0.000000e+00, !dbg !83
  %878 = tail call float @llvm.nvvm.div.full(float %640, float %876), !dbg !84
  %879 = select i1 %877, float 0.000000e+00, float %878, !dbg !85
  %880 = fmul float %879, %875, !dbg !86
  %881 = fadd float %868, %880, !dbg !87
  %882 = fadd float %624, %873, !dbg !88
  %883 = fmul float %875, %875, !dbg !89
  %884 = fmul float %863, %883, !dbg !90
  %885 = fmul float %879, %884, !dbg !91
  %886 = fadd float %882, %885, !dbg !92
  %887 = extractelement <16 x float> %609, i64 15, !dbg !80
  %888 = fsub float %887, %881, !dbg !80
  %889 = fadd float %641, %876, !dbg !82
  %890 = fcmp oeq float %889, 0.000000e+00, !dbg !83
  %891 = tail call float @llvm.nvvm.div.full(float %641, float %889), !dbg !84
  %892 = select i1 %890, float 0.000000e+00, float %891, !dbg !85
  %893 = fmul float %892, %888, !dbg !86
  %894 = fadd float %881, %893, !dbg !87
  %895 = fadd float %625, %886, !dbg !88
  %896 = fmul float %888, %888, !dbg !89
  %897 = fmul float %876, %896, !dbg !90
  %898 = fmul float %892, %897, !dbg !91
  %899 = fadd float %895, %898, !dbg !92
  %900 = bitcast float %894 to i32, !dbg !78
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 16, i32 31), !dbg !78
  %902 = bitcast i32 %901 to float, !dbg !78
  %903 = bitcast float %899 to i32, !dbg !78
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 16, i32 31), !dbg !78
  %905 = bitcast i32 %904 to float, !dbg !78
  %906 = bitcast float %889 to i32, !dbg !78
  %907 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %906, i32 16, i32 31), !dbg !78
  %908 = bitcast i32 %907 to float, !dbg !78
  %909 = fsub float %902, %894, !dbg !80
  %910 = fadd float %889, %908, !dbg !82
  %911 = fcmp oeq float %910, 0.000000e+00, !dbg !83
  %912 = tail call float @llvm.nvvm.div.full(float %908, float %910), !dbg !84
  %913 = select i1 %911, float 0.000000e+00, float %912, !dbg !85
  %914 = fmul float %913, %909, !dbg !86
  %915 = fadd float %894, %914, !dbg !87
  %916 = fadd float %899, %905, !dbg !88
  %917 = fmul float %909, %909, !dbg !89
  %918 = fmul float %889, %917, !dbg !90
  %919 = fmul float %913, %918, !dbg !91
  %920 = fadd float %916, %919, !dbg !92
  %921 = bitcast float %915 to i32, !dbg !78
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 8, i32 31), !dbg !78
  %923 = bitcast i32 %922 to float, !dbg !78
  %924 = bitcast float %920 to i32, !dbg !78
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 8, i32 31), !dbg !78
  %926 = bitcast i32 %925 to float, !dbg !78
  %927 = bitcast float %910 to i32, !dbg !78
  %928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %927, i32 8, i32 31), !dbg !78
  %929 = bitcast i32 %928 to float, !dbg !78
  %930 = fsub float %923, %915, !dbg !80
  %931 = fadd float %910, %929, !dbg !82
  %932 = fcmp oeq float %931, 0.000000e+00, !dbg !83
  %933 = tail call float @llvm.nvvm.div.full(float %929, float %931), !dbg !84
  %934 = select i1 %932, float 0.000000e+00, float %933, !dbg !85
  %935 = fmul float %934, %930, !dbg !86
  %936 = fadd float %915, %935, !dbg !87
  %937 = fadd float %920, %926, !dbg !88
  %938 = fmul float %930, %930, !dbg !89
  %939 = fmul float %910, %938, !dbg !90
  %940 = fmul float %934, %939, !dbg !91
  %941 = fadd float %937, %940, !dbg !92
  %942 = bitcast float %936 to i32, !dbg !78
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 4, i32 31), !dbg !78
  %944 = bitcast i32 %943 to float, !dbg !78
  %945 = bitcast float %941 to i32, !dbg !78
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 4, i32 31), !dbg !78
  %947 = bitcast i32 %946 to float, !dbg !78
  %948 = bitcast float %931 to i32, !dbg !78
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 4, i32 31), !dbg !78
  %950 = bitcast i32 %949 to float, !dbg !78
  %951 = fsub float %944, %936, !dbg !80
  %952 = fadd float %931, %950, !dbg !82
  %953 = fcmp oeq float %952, 0.000000e+00, !dbg !83
  %954 = tail call float @llvm.nvvm.div.full(float %950, float %952), !dbg !84
  %955 = select i1 %953, float 0.000000e+00, float %954, !dbg !85
  %956 = fmul float %955, %951, !dbg !86
  %957 = fadd float %936, %956, !dbg !87
  %958 = fadd float %941, %947, !dbg !88
  %959 = fmul float %951, %951, !dbg !89
  %960 = fmul float %931, %959, !dbg !90
  %961 = fmul float %955, %960, !dbg !91
  %962 = fadd float %958, %961, !dbg !92
  %963 = bitcast float %957 to i32, !dbg !78
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 2, i32 31), !dbg !78
  %965 = bitcast i32 %964 to float, !dbg !78
  %966 = bitcast float %962 to i32, !dbg !78
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 2, i32 31), !dbg !78
  %968 = bitcast i32 %967 to float, !dbg !78
  %969 = bitcast float %952 to i32, !dbg !78
  %970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %969, i32 2, i32 31), !dbg !78
  %971 = bitcast i32 %970 to float, !dbg !78
  %972 = fsub float %965, %957, !dbg !80
  %973 = fadd float %952, %971, !dbg !82
  %974 = fcmp oeq float %973, 0.000000e+00, !dbg !83
  %975 = tail call float @llvm.nvvm.div.full(float %971, float %973), !dbg !84
  %976 = select i1 %974, float 0.000000e+00, float %975, !dbg !85
  %977 = fmul float %976, %972, !dbg !86
  %978 = fadd float %957, %977, !dbg !87
  %979 = fadd float %962, %968, !dbg !88
  %980 = fmul float %972, %972, !dbg !89
  %981 = fmul float %952, %980, !dbg !90
  %982 = fmul float %976, %981, !dbg !91
  %983 = fadd float %979, %982, !dbg !92
  %984 = bitcast float %978 to i32, !dbg !78
  %985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %984, i32 1, i32 31), !dbg !78
  %986 = bitcast i32 %985 to float, !dbg !78
  %987 = bitcast float %983 to i32, !dbg !78
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 1, i32 31), !dbg !78
  %989 = bitcast i32 %988 to float, !dbg !78
  %990 = bitcast float %973 to i32, !dbg !78
  %991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %990, i32 1, i32 31), !dbg !78
  %992 = bitcast i32 %991 to float, !dbg !78
  %993 = fsub float %986, %978, !dbg !80
  %994 = fadd float %973, %992, !dbg !82
  %995 = fcmp oeq float %994, 0.000000e+00, !dbg !83
  %996 = tail call float @llvm.nvvm.div.full(float %992, float %994), !dbg !84
  %997 = select i1 %995, float 0.000000e+00, float %996, !dbg !85
  %998 = fmul float %997, %993, !dbg !86
  %999 = fadd float %978, %998, !dbg !87
  %1000 = fadd float %983, %989, !dbg !88
  %1001 = fmul float %993, %993, !dbg !89
  %1002 = fmul float %973, %1001, !dbg !90
  %1003 = fmul float %997, %1002, !dbg !91
  %1004 = fadd float %1000, %1003, !dbg !92
  %1005 = and i32 %703, 3, !dbg !78
  %1006 = icmp eq i32 %20, 0, !dbg !78
  %1007 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1005, !dbg !78
  %1008 = bitcast float %999 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1007, <1 x i32> %1008, i1 %1006) #5, !dbg !78
  %1009 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1005, !dbg !78
  %1010 = bitcast float %1004 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1010, i1 %1006) #5, !dbg !78
  %1011 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1005, !dbg !78
  %1012 = bitcast float %994 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1011, <1 x i32> %1012, i1 %1006) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1013 = icmp slt i32 %19, 4, !dbg !78
  %1014 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !78
  %1015 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1014, i1 %1013) #5, !dbg !78
  %1016 = bitcast i32 %1015 to float, !dbg !78
  %1017 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !78
  %1018 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1017, i1 %1013) #5, !dbg !78
  %1019 = bitcast i32 %1018 to float, !dbg !78
  %1020 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !78
  %1021 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1020, i1 %1013) #5, !dbg !78
  %1022 = bitcast i32 %1021 to float, !dbg !78
  %1023 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1015, i32 2, i32 31), !dbg !78
  %1024 = bitcast i32 %1023 to float, !dbg !78
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1018, i32 2, i32 31), !dbg !78
  %1026 = bitcast i32 %1025 to float, !dbg !78
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 2, i32 31), !dbg !78
  %1028 = bitcast i32 %1027 to float, !dbg !78
  %1029 = fsub float %1024, %1016, !dbg !80
  %1030 = fadd float %1022, %1028, !dbg !82
  %1031 = fcmp oeq float %1030, 0.000000e+00, !dbg !83
  %1032 = tail call float @llvm.nvvm.div.full(float %1028, float %1030), !dbg !84
  %1033 = select i1 %1031, float 0.000000e+00, float %1032, !dbg !85
  %1034 = fmul float %1029, %1033, !dbg !86
  %1035 = fadd float %1034, %1016, !dbg !87
  %1036 = fadd float %1019, %1026, !dbg !88
  %1037 = fmul float %1029, %1029, !dbg !89
  %1038 = fmul float %1037, %1022, !dbg !90
  %1039 = fmul float %1038, %1033, !dbg !91
  %1040 = fadd float %1036, %1039, !dbg !92
  %1041 = bitcast float %1035 to i32, !dbg !78
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1041, i32 1, i32 31), !dbg !78
  %1043 = bitcast i32 %1042 to float, !dbg !78
  %1044 = bitcast float %1040 to i32, !dbg !78
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 1, i32 31), !dbg !78
  %1046 = bitcast i32 %1045 to float, !dbg !78
  %1047 = bitcast float %1030 to i32, !dbg !78
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 1, i32 31), !dbg !78
  %1049 = bitcast i32 %1048 to float, !dbg !78
  %1050 = fsub float %1043, %1035, !dbg !80
  %1051 = fadd float %1030, %1049, !dbg !82
  %1052 = fcmp oeq float %1051, 0.000000e+00, !dbg !83
  %1053 = tail call float @llvm.nvvm.div.full(float %1049, float %1051), !dbg !84
  %1054 = select i1 %1052, float 0.000000e+00, float %1053, !dbg !85
  %1055 = fmul float %1050, %1054, !dbg !86
  %1056 = fadd float %1035, %1055, !dbg !87
  %1057 = fadd float %1040, %1046, !dbg !88
  %1058 = fmul float %1050, %1050, !dbg !89
  %1059 = fmul float %1030, %1058, !dbg !90
  %1060 = fmul float %1054, %1059, !dbg !91
  %1061 = fadd float %1057, %1060, !dbg !92
  %1062 = and i32 %19, 3, !dbg !78
  %1063 = icmp eq i32 %1062, 0, !dbg !78
  %1064 = and i1 %1013, %1063, !dbg !78
  %1065 = bitcast float %1056 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1014, <1 x i32> %1065, i1 %1064) #5, !dbg !78
  %1066 = bitcast float %1061 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1066, i1 %1064) #5, !dbg !78
  %1067 = bitcast float %1051 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1020, <1 x i32> %1067, i1 %1064) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1068 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !78
  %1069 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !78
  %1070 = tail call float @llvm.nvvm.div.full(float %1069, float 3.072000e+03), !dbg !93
  %1071 = fadd float %1070, 0x3EB0C6F7A0000000, !dbg !94
  %1072 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1073 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1074 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1075 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1076 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1077 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1078 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1079 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1080 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1081 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1082 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1083 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1084 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1085 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1086 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %1087 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i125 = icmp eq i32 %1087, 0, !dbg !95
  br i1 %.not.i125, label %1090, label %1088, !dbg !95

1088:                                             ; preds = %__nv_rsqrtf.exit
  %1089 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1071), !dbg !95
  br label %__nv_rsqrtf.exit127, !dbg !95

1090:                                             ; preds = %__nv_rsqrtf.exit
  %1091 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1071), !dbg !95
  br label %__nv_rsqrtf.exit127, !dbg !95

__nv_rsqrtf.exit127:                              ; preds = %1088, %1090
  %.0.i126 = phi float [ %1089, %1088 ], [ %1091, %1090 ], !dbg !95
  %invariant.gep166 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !96
  %1092 = insertelement <2 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1093 = shufflevector <2 x float> %1092, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %1094 = insertelement <2 x float> poison, float %1068, i64 0, !dbg !98
  %1095 = shufflevector <2 x float> %1094, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !98
  %1096 = insertelement <8 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1097 = shufflevector <8 x float> %1096, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !97
  %1098 = insertelement <8 x float> poison, float %1068, i64 0, !dbg !98
  %1099 = shufflevector <8 x float> %1098, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !98
  %1100 = insertelement <4 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1101 = shufflevector <4 x float> %1100, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !97
  %1102 = insertelement <4 x float> poison, float %1068, i64 0, !dbg !98
  %1103 = shufflevector <4 x float> %1102, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %invariant.op582 = or i32 %22, 12292, !dbg !96
  %invariant.op583 = or i32 %22, 12300, !dbg !96
  %1104 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 4
  %1105 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 8
  %1106 = getelementptr inbounds nuw i8, ptr addrspace(3) %84, i32 12
  br label %1107, !dbg !96

1107:                                             ; preds = %__nv_rsqrtf.exit127, %1107
  %1108 = phi i1 [ true, %__nv_rsqrtf.exit127 ], [ false, %1107 ]
  %indvars.iv249 = phi i64 [ 0, %__nv_rsqrtf.exit127 ], [ 2048, %1107 ]
  %1109 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %1395, %1107 ]
  %1110 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %1396, %1107 ]
  %1111 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %1415, %1107 ]
  %1112 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit127 ], [ %1418, %1107 ]
  %1113 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %1402, %1107 ]
  %1114 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %1399, %1107 ]
  %1115 = or disjoint i64 %indvars.iv249, %90, !dbg !99
  %1116 = or disjoint i64 %indvars.iv249, %89, !dbg !99
  %1117 = or disjoint i64 %indvars.iv249, %88, !dbg !99
  %1118 = or disjoint i64 %indvars.iv249, %87, !dbg !99
  %1119 = or disjoint i64 %indvars.iv249, %86, !dbg !99
  %1120 = icmp samesign ult i64 %1115, 3072, !dbg !100
  %1121 = icmp samesign ult i64 %1119, 3072, !dbg !100
  %1122 = trunc nuw nsw i64 %1115 to i32, !dbg !101
  %1123 = add i32 %66, %1122, !dbg !101
  %1124 = trunc nuw nsw i64 %1117 to i32, !dbg !101
  %1125 = add i32 %66, %1124, !dbg !101
  %1126 = trunc nuw nsw i64 %indvars.iv249 to i32, !dbg !101
  %1127 = add i32 %81, %1126, !dbg !101
  %1128 = trunc nuw nsw i64 %1119 to i32, !dbg !101
  %1129 = add i32 %66, %1128, !dbg !101
  %1130 = sext i32 %1123 to i64, !dbg !102
  %1131 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1130, !dbg !102
  %1132 = sext i32 %1125 to i64, !dbg !102
  %1133 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1132, !dbg !102
  %1134 = and i1 %18, %1120, !dbg !103
  %1135 = and i1 %18, %1121, !dbg !103
  %1136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1131, i1 %1134) #5, !dbg !104
  %1137 = extractvalue { i32, i32, i32, i32 } %1136, 0, !dbg !104
  %1138 = bitcast i32 %1137 to <2 x bfloat>, !dbg !104
  %1139 = extractvalue { i32, i32, i32, i32 } %1136, 1, !dbg !104
  %1140 = bitcast i32 %1139 to <2 x bfloat>, !dbg !104
  %1141 = extractvalue { i32, i32, i32, i32 } %1136, 2, !dbg !104
  %1142 = bitcast i32 %1141 to <2 x bfloat>, !dbg !104
  %1143 = extractvalue { i32, i32, i32, i32 } %1136, 3, !dbg !104
  %1144 = bitcast i32 %1143 to <2 x bfloat>, !dbg !104
  %1145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1133, i1 %1134) #5, !dbg !104
  %1146 = extractvalue { i32, i32, i32, i32 } %1145, 0, !dbg !104
  %1147 = bitcast i32 %1146 to <2 x bfloat>, !dbg !104
  %1148 = extractvalue { i32, i32, i32, i32 } %1145, 1, !dbg !104
  %1149 = bitcast i32 %1148 to <2 x bfloat>, !dbg !104
  %1150 = extractvalue { i32, i32, i32, i32 } %1145, 2, !dbg !104
  %1151 = bitcast i32 %1150 to <2 x bfloat>, !dbg !104
  %1152 = extractvalue { i32, i32, i32, i32 } %1145, 3, !dbg !104
  %1153 = bitcast i32 %1152 to <2 x bfloat>, !dbg !104
  %1154 = or disjoint i64 %1115, 12288, !dbg !105
  %.reass.reass.reass = or i32 %1126, %invariant.op582
  %1155 = or disjoint i64 %1117, 12288, !dbg !105
  %.reass165.reass.reass = or i32 %1126, %invariant.op583
  %1156 = getelementptr float, ptr addrspace(1) %1, i64 %1154, !dbg !106
  %1157 = zext nneg i32 %.reass.reass.reass to i64, !dbg !106
  %1158 = getelementptr float, ptr addrspace(1) %1, i64 %1157, !dbg !106
  %1159 = getelementptr float, ptr addrspace(1) %1, i64 %1155, !dbg !106
  %1160 = zext nneg i32 %.reass165.reass.reass to i64, !dbg !106
  %1161 = getelementptr float, ptr addrspace(1) %1, i64 %1160, !dbg !106
  %1162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1156, i1 %1120) #5, !dbg !107
  %1163 = extractvalue { i32, i32, i32, i32 } %1162, 0, !dbg !107
  %1164 = extractvalue { i32, i32, i32, i32 } %1162, 1, !dbg !107
  %1165 = extractvalue { i32, i32, i32, i32 } %1162, 2, !dbg !107
  %1166 = extractvalue { i32, i32, i32, i32 } %1162, 3, !dbg !107
  %1167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1158, i1 %1120) #5, !dbg !107
  %1168 = extractvalue { i32, i32, i32, i32 } %1167, 0, !dbg !107
  %1169 = extractvalue { i32, i32, i32, i32 } %1167, 1, !dbg !107
  %1170 = extractvalue { i32, i32, i32, i32 } %1167, 2, !dbg !107
  %1171 = extractvalue { i32, i32, i32, i32 } %1167, 3, !dbg !107
  %1172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1159, i1 %1120) #5, !dbg !107
  %1173 = extractvalue { i32, i32, i32, i32 } %1172, 0, !dbg !107
  %1174 = extractvalue { i32, i32, i32, i32 } %1172, 1, !dbg !107
  %1175 = extractvalue { i32, i32, i32, i32 } %1172, 2, !dbg !107
  %1176 = extractvalue { i32, i32, i32, i32 } %1172, 3, !dbg !107
  %1177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1161, i1 %1120) #5, !dbg !107
  %1178 = extractvalue { i32, i32, i32, i32 } %1177, 0, !dbg !107
  %1179 = extractvalue { i32, i32, i32, i32 } %1177, 1, !dbg !107
  %1180 = extractvalue { i32, i32, i32, i32 } %1177, 2, !dbg !107
  %1181 = extractvalue { i32, i32, i32, i32 } %1177, 3, !dbg !107
  %1182 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1154, !dbg !108
  %1183 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1155, !dbg !108
  %1184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1182, i1 %1120) #5, !dbg !109
  %1185 = extractvalue { i32, i32, i32, i32 } %1184, 0, !dbg !109
  %1186 = bitcast i32 %1185 to <2 x bfloat>, !dbg !109
  %1187 = extractvalue { i32, i32, i32, i32 } %1184, 1, !dbg !109
  %1188 = bitcast i32 %1187 to <2 x bfloat>, !dbg !109
  %1189 = extractvalue { i32, i32, i32, i32 } %1184, 2, !dbg !109
  %1190 = bitcast i32 %1189 to <2 x bfloat>, !dbg !109
  %1191 = extractvalue { i32, i32, i32, i32 } %1184, 3, !dbg !109
  %1192 = bitcast i32 %1191 to <2 x bfloat>, !dbg !109
  %1193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1183, i1 %1120) #5, !dbg !109
  %1194 = extractvalue { i32, i32, i32, i32 } %1193, 0, !dbg !109
  %1195 = bitcast i32 %1194 to <2 x bfloat>, !dbg !109
  %1196 = extractvalue { i32, i32, i32, i32 } %1193, 1, !dbg !109
  %1197 = bitcast i32 %1196 to <2 x bfloat>, !dbg !109
  %1198 = extractvalue { i32, i32, i32, i32 } %1193, 2, !dbg !109
  %1199 = bitcast i32 %1198 to <2 x bfloat>, !dbg !109
  %1200 = extractvalue { i32, i32, i32, i32 } %1193, 3, !dbg !109
  %1201 = bitcast i32 %1200 to <2 x bfloat>, !dbg !109
  %1202 = add nuw nsw i64 %1115, 9216, !dbg !110
  %1203 = add nuw nsw i64 %1117, 9216, !dbg !110
  %1204 = getelementptr float, ptr addrspace(1) %1, i64 %1202, !dbg !111
  %gep167 = getelementptr float, ptr addrspace(1) %invariant.gep166, i64 %1116, !dbg !111
  %1205 = getelementptr float, ptr addrspace(1) %1, i64 %1203, !dbg !111
  %gep169 = getelementptr float, ptr addrspace(1) %invariant.gep166, i64 %1118, !dbg !111
  %1206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1204, i1 %1120) #5, !dbg !112
  %1207 = extractvalue { i32, i32, i32, i32 } %1206, 0, !dbg !112
  %1208 = extractvalue { i32, i32, i32, i32 } %1206, 1, !dbg !112
  %1209 = extractvalue { i32, i32, i32, i32 } %1206, 2, !dbg !112
  %1210 = extractvalue { i32, i32, i32, i32 } %1206, 3, !dbg !112
  %1211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep167, i1 %1120) #5, !dbg !112
  %1212 = extractvalue { i32, i32, i32, i32 } %1211, 0, !dbg !112
  %1213 = extractvalue { i32, i32, i32, i32 } %1211, 1, !dbg !112
  %1214 = extractvalue { i32, i32, i32, i32 } %1211, 2, !dbg !112
  %1215 = extractvalue { i32, i32, i32, i32 } %1211, 3, !dbg !112
  %1216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1205, i1 %1120) #5, !dbg !112
  %1217 = extractvalue { i32, i32, i32, i32 } %1216, 0, !dbg !112
  %1218 = extractvalue { i32, i32, i32, i32 } %1216, 1, !dbg !112
  %1219 = extractvalue { i32, i32, i32, i32 } %1216, 2, !dbg !112
  %1220 = extractvalue { i32, i32, i32, i32 } %1216, 3, !dbg !112
  %1221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep169, i1 %1120) #5, !dbg !112
  %1222 = extractvalue { i32, i32, i32, i32 } %1221, 0, !dbg !112
  %1223 = extractvalue { i32, i32, i32, i32 } %1221, 1, !dbg !112
  %1224 = extractvalue { i32, i32, i32, i32 } %1221, 2, !dbg !112
  %1225 = extractvalue { i32, i32, i32, i32 } %1221, 3, !dbg !112
  %1226 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1202, !dbg !113
  %1227 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1203, !dbg !113
  %1228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1226, i1 %1120) #5, !dbg !114
  %1229 = extractvalue { i32, i32, i32, i32 } %1228, 0, !dbg !114
  %1230 = bitcast i32 %1229 to <2 x bfloat>, !dbg !114
  %1231 = extractvalue { i32, i32, i32, i32 } %1228, 1, !dbg !114
  %1232 = bitcast i32 %1231 to <2 x bfloat>, !dbg !114
  %1233 = extractvalue { i32, i32, i32, i32 } %1228, 2, !dbg !114
  %1234 = bitcast i32 %1233 to <2 x bfloat>, !dbg !114
  %1235 = extractvalue { i32, i32, i32, i32 } %1228, 3, !dbg !114
  %1236 = bitcast i32 %1235 to <2 x bfloat>, !dbg !114
  %1237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1227, i1 %1120) #5, !dbg !114
  %1238 = extractvalue { i32, i32, i32, i32 } %1237, 0, !dbg !114
  %1239 = bitcast i32 %1238 to <2 x bfloat>, !dbg !114
  %1240 = extractvalue { i32, i32, i32, i32 } %1237, 1, !dbg !114
  %1241 = bitcast i32 %1240 to <2 x bfloat>, !dbg !114
  %1242 = extractvalue { i32, i32, i32, i32 } %1237, 2, !dbg !114
  %1243 = bitcast i32 %1242 to <2 x bfloat>, !dbg !114
  %1244 = extractvalue { i32, i32, i32, i32 } %1237, 3, !dbg !114
  %1245 = bitcast i32 %1244 to <2 x bfloat>, !dbg !114
  %1246 = fpext <2 x bfloat> %1153 to <2 x float>, !dbg !115
  %1247 = insertelement <2 x i32> poison, i32 %1180, i64 0, !dbg !107
  %1248 = insertelement <2 x i32> %1247, i32 %1181, i64 1, !dbg !107
  %1249 = bitcast <2 x i32> %1248 to <2 x float>, !dbg !107
  %1250 = fpext <2 x bfloat> %1201 to <2 x float>, !dbg !116
  %1251 = insertelement <2 x i32> poison, i32 %1224, i64 0, !dbg !112
  %1252 = insertelement <2 x i32> %1251, i32 %1225, i64 1, !dbg !112
  %1253 = bitcast <2 x i32> %1252 to <2 x float>, !dbg !112
  %1254 = fpext <2 x bfloat> %1245 to <2 x float>, !dbg !117
  %1255 = fsub <2 x float> %1246, %1095, !dbg !98
  %1256 = fmul <2 x float> %1093, %1255, !dbg !97
  %1257 = fadd <2 x float> %1249, %1250, !dbg !118
  %1258 = fadd <2 x float> %1257, splat (float 1.000000e+00), !dbg !119
  %1259 = fmul <2 x float> %1256, %1258, !dbg !120
  %1260 = fadd <2 x float> %1253, %1254, !dbg !121
  %1261 = fadd <2 x float> %1259, %1260, !dbg !122
  %1262 = extractelement <2 x float> %1261, i64 0, !dbg !123
  %1263 = extractelement <2 x float> %1261, i64 1, !dbg !123
  %1264 = fcmp uno <16 x float> %1112, zeroinitializer, !dbg !124
  %1265 = fcmp uno float %1109, 0.000000e+00, !dbg !126
  %1266 = fcmp uno float %1110, 0.000000e+00, !dbg !126
  %1267 = fcmp uno <4 x float> %1114, zeroinitializer, !dbg !126
  %1268 = fcmp uno <8 x float> %1113, zeroinitializer, !dbg !126
  %1269 = fcmp uno <2 x float> %1111, zeroinitializer, !dbg !124
  %1270 = fpext <2 x bfloat> %1138 to <2 x float>, !dbg !115
  %1271 = insertelement <2 x i32> poison, i32 %1163, i64 0, !dbg !107
  %1272 = insertelement <2 x i32> %1271, i32 %1164, i64 1, !dbg !107
  %1273 = bitcast <2 x i32> %1272 to <2 x float>, !dbg !107
  %1274 = fpext <2 x bfloat> %1186 to <2 x float>, !dbg !116
  %1275 = insertelement <2 x i32> poison, i32 %1207, i64 0, !dbg !112
  %1276 = insertelement <2 x i32> %1275, i32 %1208, i64 1, !dbg !112
  %1277 = bitcast <2 x i32> %1276 to <2 x float>, !dbg !112
  %1278 = fpext <2 x bfloat> %1230 to <2 x float>, !dbg !117
  %1279 = fsub <2 x float> %1270, %1095, !dbg !98
  %1280 = fmul <2 x float> %1093, %1279, !dbg !97
  %1281 = fadd <2 x float> %1273, %1274, !dbg !118
  %1282 = fadd <2 x float> %1281, splat (float 1.000000e+00), !dbg !119
  %1283 = fmul <2 x float> %1280, %1282, !dbg !120
  %1284 = fadd <2 x float> %1277, %1278, !dbg !121
  %1285 = fadd <2 x float> %1283, %1284, !dbg !122
  %1286 = fcmp ogt <2 x float> %1111, %1285, !dbg !128
  %1287 = or <2 x i1> %1269, %1286, !dbg !129
  %1288 = select <2 x i1> %1287, <2 x float> %1111, <2 x float> %1285, !dbg !130
  %1289 = shufflevector <2 x bfloat> %1140, <2 x bfloat> %1142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1290 = shufflevector <2 x bfloat> %1144, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1291 = shufflevector <8 x bfloat> %1289, <8 x bfloat> %1290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1292 = shufflevector <2 x bfloat> %1144, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1293 = shufflevector <8 x bfloat> %1291, <8 x bfloat> %1292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !115
  %1294 = shufflevector <2 x bfloat> %1147, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1295 = shufflevector <8 x bfloat> %1293, <8 x bfloat> %1294, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !115
  %1296 = shufflevector <2 x bfloat> %1147, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1297 = shufflevector <8 x bfloat> %1295, <8 x bfloat> %1296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !115
  %1298 = fpext <8 x bfloat> %1297 to <8 x float>, !dbg !115
  %1299 = shufflevector <2 x bfloat> %1149, <2 x bfloat> %1151, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !115
  %1300 = fpext <4 x bfloat> %1299 to <4 x float>, !dbg !115
  %1301 = insertelement <8 x i32> poison, i32 %1165, i64 0, !dbg !107
  %1302 = insertelement <8 x i32> %1301, i32 %1166, i64 1, !dbg !107
  %1303 = insertelement <8 x i32> %1302, i32 %1168, i64 2, !dbg !107
  %1304 = insertelement <8 x i32> %1303, i32 %1169, i64 3, !dbg !107
  %1305 = insertelement <8 x i32> %1304, i32 %1170, i64 4, !dbg !107
  %1306 = insertelement <8 x i32> %1305, i32 %1171, i64 5, !dbg !107
  %1307 = insertelement <8 x i32> %1306, i32 %1173, i64 6, !dbg !107
  %1308 = insertelement <8 x i32> %1307, i32 %1174, i64 7, !dbg !107
  %1309 = bitcast <8 x i32> %1308 to <8 x float>, !dbg !107
  %1310 = insertelement <4 x i32> poison, i32 %1175, i64 0, !dbg !107
  %1311 = insertelement <4 x i32> %1310, i32 %1176, i64 1, !dbg !107
  %1312 = insertelement <4 x i32> %1311, i32 %1178, i64 2, !dbg !107
  %1313 = insertelement <4 x i32> %1312, i32 %1179, i64 3, !dbg !107
  %1314 = bitcast <4 x i32> %1313 to <4 x float>, !dbg !107
  %1315 = shufflevector <2 x bfloat> %1188, <2 x bfloat> %1190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1316 = shufflevector <2 x bfloat> %1192, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1317 = shufflevector <8 x bfloat> %1315, <8 x bfloat> %1316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1318 = shufflevector <2 x bfloat> %1192, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1319 = shufflevector <8 x bfloat> %1317, <8 x bfloat> %1318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !116
  %1320 = shufflevector <2 x bfloat> %1195, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1321 = shufflevector <8 x bfloat> %1319, <8 x bfloat> %1320, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !116
  %1322 = shufflevector <2 x bfloat> %1195, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1323 = shufflevector <8 x bfloat> %1321, <8 x bfloat> %1322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !116
  %1324 = fpext <8 x bfloat> %1323 to <8 x float>, !dbg !116
  %1325 = shufflevector <2 x bfloat> %1197, <2 x bfloat> %1199, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !116
  %1326 = fpext <4 x bfloat> %1325 to <4 x float>, !dbg !116
  %1327 = insertelement <8 x i32> poison, i32 %1209, i64 0, !dbg !112
  %1328 = insertelement <8 x i32> %1327, i32 %1210, i64 1, !dbg !112
  %1329 = insertelement <8 x i32> %1328, i32 %1212, i64 2, !dbg !112
  %1330 = insertelement <8 x i32> %1329, i32 %1213, i64 3, !dbg !112
  %1331 = insertelement <8 x i32> %1330, i32 %1214, i64 4, !dbg !112
  %1332 = insertelement <8 x i32> %1331, i32 %1215, i64 5, !dbg !112
  %1333 = insertelement <8 x i32> %1332, i32 %1217, i64 6, !dbg !112
  %1334 = insertelement <8 x i32> %1333, i32 %1218, i64 7, !dbg !112
  %1335 = bitcast <8 x i32> %1334 to <8 x float>, !dbg !112
  %1336 = insertelement <4 x i32> poison, i32 %1219, i64 0, !dbg !112
  %1337 = insertelement <4 x i32> %1336, i32 %1220, i64 1, !dbg !112
  %1338 = insertelement <4 x i32> %1337, i32 %1222, i64 2, !dbg !112
  %1339 = insertelement <4 x i32> %1338, i32 %1223, i64 3, !dbg !112
  %1340 = bitcast <4 x i32> %1339 to <4 x float>, !dbg !112
  %1341 = shufflevector <2 x bfloat> %1232, <2 x bfloat> %1234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1342 = shufflevector <2 x bfloat> %1236, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1343 = shufflevector <8 x bfloat> %1341, <8 x bfloat> %1342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1344 = shufflevector <2 x bfloat> %1236, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1345 = shufflevector <8 x bfloat> %1343, <8 x bfloat> %1344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !117
  %1346 = shufflevector <2 x bfloat> %1239, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1347 = shufflevector <8 x bfloat> %1345, <8 x bfloat> %1346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !117
  %1348 = shufflevector <2 x bfloat> %1239, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1349 = shufflevector <8 x bfloat> %1347, <8 x bfloat> %1348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !117
  %1350 = fpext <8 x bfloat> %1349 to <8 x float>, !dbg !117
  %1351 = shufflevector <2 x bfloat> %1241, <2 x bfloat> %1243, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !117
  %1352 = fpext <4 x bfloat> %1351 to <4 x float>, !dbg !117
  %1353 = fsub <8 x float> %1298, %1099, !dbg !98
  %1354 = fsub <4 x float> %1300, %1103, !dbg !98
  %1355 = fmul <8 x float> %1097, %1353, !dbg !97
  %1356 = fmul <4 x float> %1101, %1354, !dbg !97
  %1357 = fadd <8 x float> %1309, %1324, !dbg !118
  %1358 = fadd <4 x float> %1314, %1326, !dbg !118
  %1359 = fadd <8 x float> %1357, splat (float 1.000000e+00), !dbg !119
  %1360 = fadd <4 x float> %1358, splat (float 1.000000e+00), !dbg !119
  %1361 = fmul <8 x float> %1355, %1359, !dbg !120
  %1362 = fmul <4 x float> %1356, %1360, !dbg !120
  %1363 = fadd <8 x float> %1335, %1350, !dbg !121
  %1364 = fadd <4 x float> %1340, %1352, !dbg !121
  %1365 = fadd <8 x float> %1361, %1363, !dbg !122
  %1366 = fadd <4 x float> %1362, %1364, !dbg !122
  %1367 = extractelement <8 x float> %1365, i64 0, !dbg !123
  %1368 = fcmp olt float %1109, %1367, !dbg !131
  %1369 = extractelement <8 x float> %1365, i64 1, !dbg !123
  %1370 = fcmp olt float %1110, %1369, !dbg !131
  %1371 = extractelement <8 x float> %1365, i64 2, !dbg !123
  %1372 = extractelement <8 x float> %1365, i64 3, !dbg !123
  %1373 = extractelement <8 x float> %1365, i64 4, !dbg !123
  %1374 = extractelement <8 x float> %1365, i64 5, !dbg !123
  %1375 = extractelement <8 x float> %1365, i64 6, !dbg !123
  %1376 = extractelement <8 x float> %1365, i64 7, !dbg !123
  %1377 = extractelement <4 x float> %1366, i64 0, !dbg !123
  %1378 = extractelement <4 x float> %1366, i64 1, !dbg !123
  %1379 = extractelement <4 x float> %1366, i64 2, !dbg !123
  %1380 = extractelement <4 x float> %1366, i64 3, !dbg !123
  %1381 = or i1 %1265, %1368, !dbg !132
  %1382 = or i1 %1266, %1370, !dbg !132
  %1383 = select i1 %1381, float %1109, float %1367, !dbg !133
  %1384 = select i1 %1382, float %1110, float %1369, !dbg !133
  %1385 = shufflevector <2 x float> %1261, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !131
  %1386 = shufflevector <8 x float> %1385, <8 x float> %1365, <4 x i32> <i32 1, i32 0, i32 11, i32 10>, !dbg !131
  %1387 = fcmp olt <4 x float> %1114, %1386, !dbg !131
  %1388 = or <4 x i1> %1267, %1387, !dbg !132
  %1389 = select <4 x i1> %1388, <4 x float> %1114, <4 x float> %1386, !dbg !133
  %1390 = shufflevector <4 x float> %1366, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !131
  %1391 = shufflevector <8 x float> %1390, <8 x float> %1365, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 15, i32 14, i32 13, i32 12>, !dbg !131
  %1392 = fcmp olt <8 x float> %1113, %1391, !dbg !131
  %1393 = or <8 x i1> %1268, %1392, !dbg !132
  %1394 = select <8 x i1> %1393, <8 x float> %1113, <8 x float> %1391, !dbg !133
  %1395 = select i1 %1134, float %1383, float %1109, !dbg !134
  %1396 = select i1 %1134, float %1384, float %1110, !dbg !134
  %1397 = insertelement <4 x i1> poison, i1 %1134, i64 0, !dbg !134
  %1398 = shufflevector <4 x i1> %1397, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !134
  %1399 = select <4 x i1> %1398, <4 x float> %1389, <4 x float> %1114, !dbg !134
  %1400 = insertelement <8 x i1> poison, i1 %1134, i64 0, !dbg !134
  %1401 = shufflevector <8 x i1> %1400, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !134
  %1402 = select <8 x i1> %1401, <8 x float> %1394, <8 x float> %1113, !dbg !134
  %1403 = shufflevector <2 x float> %1261, <2 x float> %1285, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !128
  %1404 = shufflevector <8 x float> %1365, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1405 = shufflevector <16 x float> %1404, <16 x float> %1403, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !128
  %1406 = shufflevector <4 x float> %1366, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1407 = shufflevector <16 x float> %1405, <16 x float> %1406, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !128
  %1408 = fcmp ogt <16 x float> %1112, %1407, !dbg !128
  %1409 = fcmp olt <16 x float> %1112, %1407, !dbg !128
  %1410 = shufflevector <16 x i1> %1408, <16 x i1> %1409, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !128
  %1411 = or <16 x i1> %1264, %1410, !dbg !129
  %1412 = select <16 x i1> %1411, <16 x float> %1112, <16 x float> %1407, !dbg !130
  %1413 = insertelement <2 x i1> poison, i1 %1134, i64 0, !dbg !135
  %1414 = shufflevector <2 x i1> %1413, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !135
  %1415 = select <2 x i1> %1414, <2 x float> %1288, <2 x float> %1111, !dbg !135
  %1416 = insertelement <16 x i1> poison, i1 %1134, i64 0, !dbg !135
  %1417 = shufflevector <16 x i1> %1416, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !135
  %1418 = select <16 x i1> %1417, <16 x float> %1412, <16 x float> %1112, !dbg !135
  %1419 = sext i32 %1127 to i64, !dbg !136
  %1420 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1419, !dbg !136
  %1421 = sext i32 %1129 to i64, !dbg !136
  %1422 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1421, !dbg !136
  %1423 = fptrunc <2 x float> %1285 to <2 x bfloat>, !dbg !123
  %1424 = fptrunc float %1367 to bfloat, !dbg !123
  %1425 = fptrunc float %1369 to bfloat, !dbg !123
  %1426 = fptrunc float %1371 to bfloat, !dbg !123
  %1427 = fptrunc float %1372 to bfloat, !dbg !123
  %1428 = fptrunc float %1373 to bfloat, !dbg !123
  %1429 = fptrunc float %1374 to bfloat, !dbg !123
  %1430 = fptrunc float %1375 to bfloat, !dbg !123
  %1431 = fptrunc float %1376 to bfloat, !dbg !123
  %1432 = fptrunc float %1377 to bfloat, !dbg !123
  %1433 = fptrunc float %1378 to bfloat, !dbg !123
  %1434 = fptrunc float %1379 to bfloat, !dbg !123
  %1435 = fptrunc float %1380 to bfloat, !dbg !123
  %1436 = fptrunc float %1262 to bfloat, !dbg !123
  %1437 = fptrunc float %1263 to bfloat, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %1438 = bitcast <2 x bfloat> %1423 to i32, !dbg !123
  %1439 = insertelement <2 x bfloat> poison, bfloat %1424, i64 0, !dbg !123
  %1440 = insertelement <2 x bfloat> %1439, bfloat %1425, i64 1, !dbg !123
  %1441 = bitcast <2 x bfloat> %1440 to i32, !dbg !123
  %1442 = insertelement <2 x bfloat> poison, bfloat %1426, i64 0, !dbg !123
  %1443 = insertelement <2 x bfloat> %1442, bfloat %1427, i64 1, !dbg !123
  %1444 = bitcast <2 x bfloat> %1443 to i32, !dbg !123
  %1445 = insertelement <2 x bfloat> poison, bfloat %1428, i64 0, !dbg !123
  %1446 = insertelement <2 x bfloat> %1445, bfloat %1429, i64 1, !dbg !123
  %1447 = bitcast <2 x bfloat> %1446 to i32, !dbg !123
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %82, i32 %1438, i32 %1441, i32 %1444, i32 %1447, i1 true) #5, !dbg !123
  %1448 = insertelement <2 x bfloat> poison, bfloat %1430, i64 0, !dbg !123
  %1449 = insertelement <2 x bfloat> %1448, bfloat %1431, i64 1, !dbg !123
  %1450 = bitcast <2 x bfloat> %1449 to i32, !dbg !123
  %1451 = insertelement <2 x bfloat> poison, bfloat %1432, i64 0, !dbg !123
  %1452 = insertelement <2 x bfloat> %1451, bfloat %1433, i64 1, !dbg !123
  %1453 = bitcast <2 x bfloat> %1452 to i32, !dbg !123
  %1454 = insertelement <2 x bfloat> poison, bfloat %1434, i64 0, !dbg !123
  %1455 = insertelement <2 x bfloat> %1454, bfloat %1435, i64 1, !dbg !123
  %1456 = bitcast <2 x bfloat> %1455 to i32, !dbg !123
  %1457 = insertelement <2 x bfloat> poison, bfloat %1436, i64 0, !dbg !123
  %1458 = insertelement <2 x bfloat> %1457, bfloat %1437, i64 1, !dbg !123
  %1459 = bitcast <2 x bfloat> %1458 to i32, !dbg !123
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %83, i32 %1450, i32 %1453, i32 %1456, i32 %1459, i1 true) #5, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %1460 = load <4 x i32>, ptr addrspace(3) %85, align 16, !dbg !123
  %.extract = load i32, ptr addrspace(3) %84, align 16, !dbg !123
  %.extract129 = load i32, ptr addrspace(3) %1104, align 4, !dbg !123
  %.extract131 = load i32, ptr addrspace(3) %1105, align 8, !dbg !123
  %.extract133 = load i32, ptr addrspace(3) %1106, align 4, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %1420, i1 %18) #5, !dbg !123
  %.extract135 = extractelement <4 x i32> %1460, i64 0, !dbg !123
  %.extract137 = extractelement <4 x i32> %1460, i64 1, !dbg !123
  %.extract139 = extractelement <4 x i32> %1460, i64 2, !dbg !123
  %.extract141 = extractelement <4 x i32> %1460, i64 3, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %1422, i1 %1135) #5, !dbg !123
  br i1 %1108, label %1107, label %1461, !dbg !96

1461:                                             ; preds = %1107
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1462 = extractelement <16 x float> %1418, i64 14, !dbg !139
  %1463 = extractelement <16 x float> %1418, i64 15, !dbg !139
  %1464 = fcmp olt float %1462, %1463, !dbg !139
  %1465 = fcmp uno float %1462, 0.000000e+00, !dbg !140
  %1466 = or i1 %1464, %1465, !dbg !141
  %1467 = select i1 %1466, float %1462, float %1463, !dbg !142
  %1468 = fcmp olt float %1467, %1395, !dbg !139
  %1469 = fcmp uno float %1467, 0.000000e+00, !dbg !140
  %1470 = or i1 %1468, %1469, !dbg !141
  %1471 = select i1 %1470, float %1467, float %1395, !dbg !142
  %1472 = fcmp olt float %1471, %1396, !dbg !139
  %1473 = fcmp uno float %1471, 0.000000e+00, !dbg !140
  %1474 = or i1 %1472, %1473, !dbg !141
  %1475 = select i1 %1474, float %1471, float %1396, !dbg !142
  %1476 = extractelement <4 x float> %1399, i64 3, !dbg !139
  %1477 = fcmp olt float %1475, %1476, !dbg !139
  %1478 = fcmp uno float %1475, 0.000000e+00, !dbg !140
  %1479 = or i1 %1477, %1478, !dbg !141
  %1480 = select i1 %1479, float %1475, float %1476, !dbg !142
  %1481 = extractelement <4 x float> %1399, i64 2, !dbg !139
  %1482 = fcmp olt float %1480, %1481, !dbg !139
  %1483 = fcmp uno float %1480, 0.000000e+00, !dbg !140
  %1484 = or i1 %1482, %1483, !dbg !141
  %1485 = select i1 %1484, float %1480, float %1481, !dbg !142
  %1486 = extractelement <8 x float> %1402, i64 7, !dbg !139
  %1487 = fcmp olt float %1485, %1486, !dbg !139
  %1488 = fcmp uno float %1485, 0.000000e+00, !dbg !140
  %1489 = or i1 %1487, %1488, !dbg !141
  %1490 = select i1 %1489, float %1485, float %1486, !dbg !142
  %1491 = extractelement <8 x float> %1402, i64 6, !dbg !139
  %1492 = fcmp olt float %1490, %1491, !dbg !139
  %1493 = fcmp uno float %1490, 0.000000e+00, !dbg !140
  %1494 = or i1 %1492, %1493, !dbg !141
  %1495 = select i1 %1494, float %1490, float %1491, !dbg !142
  %1496 = extractelement <8 x float> %1402, i64 5, !dbg !139
  %1497 = fcmp olt float %1495, %1496, !dbg !139
  %1498 = fcmp uno float %1495, 0.000000e+00, !dbg !140
  %1499 = or i1 %1497, %1498, !dbg !141
  %1500 = select i1 %1499, float %1495, float %1496, !dbg !142
  %1501 = extractelement <8 x float> %1402, i64 4, !dbg !139
  %1502 = fcmp olt float %1500, %1501, !dbg !139
  %1503 = fcmp uno float %1500, 0.000000e+00, !dbg !140
  %1504 = or i1 %1502, %1503, !dbg !141
  %1505 = select i1 %1504, float %1500, float %1501, !dbg !142
  %1506 = extractelement <8 x float> %1402, i64 3, !dbg !139
  %1507 = fcmp olt float %1505, %1506, !dbg !139
  %1508 = fcmp uno float %1505, 0.000000e+00, !dbg !140
  %1509 = or i1 %1507, %1508, !dbg !141
  %1510 = select i1 %1509, float %1505, float %1506, !dbg !142
  %1511 = extractelement <8 x float> %1402, i64 2, !dbg !139
  %1512 = fcmp olt float %1510, %1511, !dbg !139
  %1513 = fcmp uno float %1510, 0.000000e+00, !dbg !140
  %1514 = or i1 %1512, %1513, !dbg !141
  %1515 = select i1 %1514, float %1510, float %1511, !dbg !142
  %1516 = extractelement <8 x float> %1402, i64 1, !dbg !139
  %1517 = fcmp olt float %1515, %1516, !dbg !139
  %1518 = fcmp uno float %1515, 0.000000e+00, !dbg !140
  %1519 = or i1 %1517, %1518, !dbg !141
  %1520 = select i1 %1519, float %1515, float %1516, !dbg !142
  %1521 = extractelement <8 x float> %1402, i64 0, !dbg !139
  %1522 = fcmp olt float %1520, %1521, !dbg !139
  %1523 = fcmp uno float %1520, 0.000000e+00, !dbg !140
  %1524 = or i1 %1522, %1523, !dbg !141
  %1525 = select i1 %1524, float %1520, float %1521, !dbg !142
  %1526 = extractelement <4 x float> %1399, i64 1, !dbg !139
  %1527 = fcmp olt float %1525, %1526, !dbg !139
  %1528 = fcmp uno float %1525, 0.000000e+00, !dbg !140
  %1529 = or i1 %1527, %1528, !dbg !141
  %1530 = select i1 %1529, float %1525, float %1526, !dbg !142
  %1531 = extractelement <4 x float> %1399, i64 0, !dbg !139
  %1532 = fcmp olt float %1530, %1531, !dbg !139
  %1533 = fcmp uno float %1530, 0.000000e+00, !dbg !140
  %1534 = or i1 %1532, %1533, !dbg !141
  %1535 = select i1 %1534, float %1530, float %1531, !dbg !142
  %1536 = bitcast float %1535 to i32, !dbg !137
  %1537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1536, i32 16, i32 31), !dbg !137
  %1538 = bitcast i32 %1537 to float, !dbg !137
  %1539 = fcmp olt float %1535, %1538, !dbg !139
  %1540 = fcmp uno float %1535, 0.000000e+00, !dbg !140
  %1541 = or i1 %1540, %1539, !dbg !141
  %1542 = select i1 %1541, float %1535, float %1538, !dbg !142
  %1543 = bitcast float %1542 to i32, !dbg !137
  %1544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1543, i32 8, i32 31), !dbg !137
  %1545 = bitcast i32 %1544 to float, !dbg !137
  %1546 = fcmp olt float %1542, %1545, !dbg !139
  %1547 = fcmp uno float %1542, 0.000000e+00, !dbg !140
  %1548 = or i1 %1546, %1547, !dbg !141
  %1549 = select i1 %1548, float %1542, float %1545, !dbg !142
  %1550 = bitcast float %1549 to i32, !dbg !137
  %1551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1550, i32 4, i32 31), !dbg !137
  %1552 = bitcast i32 %1551 to float, !dbg !137
  %1553 = fcmp olt float %1549, %1552, !dbg !139
  %1554 = fcmp uno float %1549, 0.000000e+00, !dbg !140
  %1555 = or i1 %1553, %1554, !dbg !141
  %1556 = select i1 %1555, float %1549, float %1552, !dbg !142
  %1557 = bitcast float %1556 to i32, !dbg !137
  %1558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1557, i32 2, i32 31), !dbg !137
  %1559 = bitcast i32 %1558 to float, !dbg !137
  %1560 = fcmp olt float %1556, %1559, !dbg !139
  %1561 = fcmp uno float %1556, 0.000000e+00, !dbg !140
  %1562 = or i1 %1560, %1561, !dbg !141
  %1563 = select i1 %1562, float %1556, float %1559, !dbg !142
  %1564 = bitcast float %1563 to i32, !dbg !137
  %1565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1564, i32 1, i32 31), !dbg !137
  %1566 = bitcast i32 %1565 to float, !dbg !137
  %1567 = fcmp olt float %1563, %1566, !dbg !139
  %1568 = fcmp uno float %1563, 0.000000e+00, !dbg !140
  %1569 = or i1 %1567, %1568, !dbg !141
  %1570 = select i1 %1569, i32 %1564, i32 %1565, !dbg !142
  %1571 = insertelement <1 x i32> poison, i32 %1570, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1007, <1 x i32> %1571, i1 %1006) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1572 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1014, i1 %1013) #5, !dbg !137
  %1573 = bitcast i32 %1572 to float, !dbg !137
  %1574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1572, i32 2, i32 31), !dbg !137
  %1575 = bitcast i32 %1574 to float, !dbg !137
  %1576 = fcmp olt float %1573, %1575, !dbg !139
  %1577 = fcmp uno float %1573, 0.000000e+00, !dbg !140
  %1578 = or i1 %1577, %1576, !dbg !141
  %1579 = select i1 %1578, float %1573, float %1575, !dbg !142
  %1580 = bitcast float %1579 to i32, !dbg !137
  %1581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1580, i32 1, i32 31), !dbg !137
  %1582 = bitcast i32 %1581 to float, !dbg !137
  %1583 = fcmp olt float %1579, %1582, !dbg !139
  %1584 = fcmp uno float %1579, 0.000000e+00, !dbg !140
  %1585 = or i1 %1583, %1584, !dbg !141
  %1586 = select i1 %1585, i32 %1580, i32 %1581, !dbg !142
  %1587 = insertelement <1 x i32> poison, i32 %1586, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1014, <1 x i32> %1587, i1 %1064) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1588 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1589 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1415, <2 x i32> <i32 0, i32 2>, !dbg !145
  %1590 = fcmp ogt <2 x float> %1589, %1415, !dbg !145
  %1591 = fcmp uno <2 x float> %1589, %1415, !dbg !145
  %shift = shufflevector <2 x i1> %1590, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !146
  %1592 = or <2 x i1> %shift, %1591, !dbg !146
  %1593 = extractelement <2 x i1> %1592, i64 0, !dbg !146
  %1594 = extractelement <2 x float> %1415, i64 0, !dbg !147
  %1595 = extractelement <2 x float> %1415, i64 1, !dbg !147
  %1596 = select i1 %1593, float %1594, float %1595, !dbg !147
  %1597 = extractelement <16 x float> %1418, i64 0, !dbg !145
  %1598 = fcmp ogt float %1596, %1597, !dbg !145
  %1599 = fcmp uno float %1596, 0.000000e+00, !dbg !148
  %1600 = or i1 %1598, %1599, !dbg !146
  %1601 = select i1 %1600, float %1596, float %1597, !dbg !147
  %1602 = extractelement <16 x float> %1418, i64 1, !dbg !145
  %1603 = fcmp ogt float %1601, %1602, !dbg !145
  %1604 = fcmp uno float %1601, 0.000000e+00, !dbg !148
  %1605 = or i1 %1603, %1604, !dbg !146
  %1606 = select i1 %1605, float %1601, float %1602, !dbg !147
  %1607 = extractelement <16 x float> %1418, i64 2, !dbg !145
  %1608 = fcmp ogt float %1606, %1607, !dbg !145
  %1609 = fcmp uno float %1606, 0.000000e+00, !dbg !148
  %1610 = or i1 %1608, %1609, !dbg !146
  %1611 = select i1 %1610, float %1606, float %1607, !dbg !147
  %1612 = extractelement <16 x float> %1418, i64 3, !dbg !145
  %1613 = fcmp ogt float %1611, %1612, !dbg !145
  %1614 = fcmp uno float %1611, 0.000000e+00, !dbg !148
  %1615 = or i1 %1613, %1614, !dbg !146
  %1616 = select i1 %1615, float %1611, float %1612, !dbg !147
  %1617 = extractelement <16 x float> %1418, i64 4, !dbg !145
  %1618 = fcmp ogt float %1616, %1617, !dbg !145
  %1619 = fcmp uno float %1616, 0.000000e+00, !dbg !148
  %1620 = or i1 %1618, %1619, !dbg !146
  %1621 = select i1 %1620, float %1616, float %1617, !dbg !147
  %1622 = extractelement <16 x float> %1418, i64 5, !dbg !145
  %1623 = fcmp ogt float %1621, %1622, !dbg !145
  %1624 = fcmp uno float %1621, 0.000000e+00, !dbg !148
  %1625 = or i1 %1623, %1624, !dbg !146
  %1626 = select i1 %1625, float %1621, float %1622, !dbg !147
  %1627 = extractelement <16 x float> %1418, i64 6, !dbg !145
  %1628 = fcmp ogt float %1626, %1627, !dbg !145
  %1629 = fcmp uno float %1626, 0.000000e+00, !dbg !148
  %1630 = or i1 %1628, %1629, !dbg !146
  %1631 = select i1 %1630, float %1626, float %1627, !dbg !147
  %1632 = extractelement <16 x float> %1418, i64 7, !dbg !145
  %1633 = fcmp ogt float %1631, %1632, !dbg !145
  %1634 = fcmp uno float %1631, 0.000000e+00, !dbg !148
  %1635 = or i1 %1633, %1634, !dbg !146
  %1636 = select i1 %1635, float %1631, float %1632, !dbg !147
  %1637 = extractelement <16 x float> %1418, i64 8, !dbg !145
  %1638 = fcmp ogt float %1636, %1637, !dbg !145
  %1639 = fcmp uno float %1636, 0.000000e+00, !dbg !148
  %1640 = or i1 %1638, %1639, !dbg !146
  %1641 = select i1 %1640, float %1636, float %1637, !dbg !147
  %1642 = extractelement <16 x float> %1418, i64 9, !dbg !145
  %1643 = fcmp ogt float %1641, %1642, !dbg !145
  %1644 = fcmp uno float %1641, 0.000000e+00, !dbg !148
  %1645 = or i1 %1643, %1644, !dbg !146
  %1646 = select i1 %1645, float %1641, float %1642, !dbg !147
  %1647 = extractelement <16 x float> %1418, i64 10, !dbg !145
  %1648 = fcmp ogt float %1646, %1647, !dbg !145
  %1649 = fcmp uno float %1646, 0.000000e+00, !dbg !148
  %1650 = or i1 %1648, %1649, !dbg !146
  %1651 = select i1 %1650, float %1646, float %1647, !dbg !147
  %1652 = extractelement <16 x float> %1418, i64 11, !dbg !145
  %1653 = fcmp ogt float %1651, %1652, !dbg !145
  %1654 = fcmp uno float %1651, 0.000000e+00, !dbg !148
  %1655 = or i1 %1653, %1654, !dbg !146
  %1656 = select i1 %1655, float %1651, float %1652, !dbg !147
  %1657 = extractelement <16 x float> %1418, i64 12, !dbg !145
  %1658 = fcmp ogt float %1656, %1657, !dbg !145
  %1659 = fcmp uno float %1656, 0.000000e+00, !dbg !148
  %1660 = or i1 %1658, %1659, !dbg !146
  %1661 = select i1 %1660, float %1656, float %1657, !dbg !147
  %1662 = extractelement <16 x float> %1418, i64 13, !dbg !145
  %1663 = fcmp ogt float %1661, %1662, !dbg !145
  %1664 = fcmp uno float %1661, 0.000000e+00, !dbg !148
  %1665 = or i1 %1663, %1664, !dbg !146
  %1666 = select i1 %1665, float %1661, float %1662, !dbg !147
  %1667 = bitcast float %1666 to i32, !dbg !143
  %1668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1667, i32 16, i32 31), !dbg !143
  %1669 = bitcast i32 %1668 to float, !dbg !143
  %1670 = fcmp ogt float %1666, %1669, !dbg !145
  %1671 = fcmp uno float %1666, 0.000000e+00, !dbg !148
  %1672 = or i1 %1671, %1670, !dbg !146
  %1673 = select i1 %1672, float %1666, float %1669, !dbg !147
  %1674 = bitcast float %1673 to i32, !dbg !143
  %1675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1674, i32 8, i32 31), !dbg !143
  %1676 = bitcast i32 %1675 to float, !dbg !143
  %1677 = fcmp ogt float %1673, %1676, !dbg !145
  %1678 = fcmp uno float %1673, 0.000000e+00, !dbg !148
  %1679 = or i1 %1677, %1678, !dbg !146
  %1680 = select i1 %1679, float %1673, float %1676, !dbg !147
  %1681 = bitcast float %1680 to i32, !dbg !143
  %1682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1681, i32 4, i32 31), !dbg !143
  %1683 = bitcast i32 %1682 to float, !dbg !143
  %1684 = fcmp ogt float %1680, %1683, !dbg !145
  %1685 = fcmp uno float %1680, 0.000000e+00, !dbg !148
  %1686 = or i1 %1684, %1685, !dbg !146
  %1687 = select i1 %1686, float %1680, float %1683, !dbg !147
  %1688 = bitcast float %1687 to i32, !dbg !143
  %1689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1688, i32 2, i32 31), !dbg !143
  %1690 = bitcast i32 %1689 to float, !dbg !143
  %1691 = fcmp ogt float %1687, %1690, !dbg !145
  %1692 = fcmp uno float %1687, 0.000000e+00, !dbg !148
  %1693 = or i1 %1691, %1692, !dbg !146
  %1694 = select i1 %1693, float %1687, float %1690, !dbg !147
  %1695 = bitcast float %1694 to i32, !dbg !143
  %1696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1695, i32 1, i32 31), !dbg !143
  %1697 = bitcast i32 %1696 to float, !dbg !143
  %1698 = fcmp ogt float %1694, %1697, !dbg !145
  %1699 = fcmp uno float %1694, 0.000000e+00, !dbg !148
  %1700 = or i1 %1698, %1699, !dbg !146
  %1701 = select i1 %1700, i32 %1695, i32 %1696, !dbg !147
  %1702 = insertelement <1 x i32> poison, i32 %1701, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1007, <1 x i32> %1702, i1 %1006) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1703 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1014, i1 %1013) #5, !dbg !143
  %1704 = bitcast i32 %1703 to float, !dbg !143
  %1705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1703, i32 2, i32 31), !dbg !143
  %1706 = bitcast i32 %1705 to float, !dbg !143
  %1707 = fcmp ogt float %1704, %1706, !dbg !145
  %1708 = fcmp uno float %1704, 0.000000e+00, !dbg !148
  %1709 = or i1 %1708, %1707, !dbg !146
  %1710 = select i1 %1709, float %1704, float %1706, !dbg !147
  %1711 = bitcast float %1710 to i32, !dbg !143
  %1712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1711, i32 1, i32 31), !dbg !143
  %1713 = bitcast i32 %1712 to float, !dbg !143
  %1714 = fcmp ogt float %1710, %1713, !dbg !145
  %1715 = fcmp uno float %1710, 0.000000e+00, !dbg !148
  %1716 = or i1 %1714, %1715, !dbg !146
  %1717 = select i1 %1716, i32 %1711, i32 %1712, !dbg !147
  %1718 = insertelement <1 x i32> poison, i32 %1717, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1014, <1 x i32> %1718, i1 %1064) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1719 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %1720 = getelementptr bfloat, ptr addrspace(1) %10, i64 %29, !dbg !149
  %1721 = fptrunc float %1588 to bfloat, !dbg !150
  %1722 = and i32 %19, 127, !dbg !150
  %1723 = icmp eq i32 %1722, 0, !dbg !150
  %1724 = bitcast bfloat %1721 to i16, !dbg !150
  %1725 = and i1 %18, %1723, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1724, ptr addrspace(1) %1720, i1 %1725) #5, !dbg !150
  %1726 = getelementptr bfloat, ptr addrspace(1) %11, i64 %29, !dbg !151
  %1727 = fptrunc float %1719 to bfloat, !dbg !152
  %1728 = bitcast bfloat %1727 to i16, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1728, ptr addrspace(1) %1726, i1 %1725) #5, !dbg !152
  %.inv4 = fcmp oge float %1588, 0.000000e+00, !dbg !153
  %1729 = select i1 %.inv4, float 0.000000e+00, float %1588, !dbg !153
  %1730 = fsub float 0.000000e+00, %1729, !dbg !155
  %.inv5 = fcmp ole float %1719, 0.000000e+00, !dbg !156
  %1731 = select i1 %.inv5, float 0.000000e+00, float %1719, !dbg !156
  %1732 = fcmp ogt float %1730, %1731, !dbg !158
  %1733 = fcmp uno float %1730, 0.000000e+00, !dbg !160
  %1734 = or i1 %1733, %1732, !dbg !161
  %1735 = select i1 %1734, float %1730, float %1731, !dbg !162
  %1736 = fmul float %1735, 0x3F80204080000000, !dbg !163
  %1737 = fcmp ogt float %1736, 0x3EE4F8B580000000, !dbg !164
  %1738 = fcmp uno float %1736, 0.000000e+00, !dbg !166
  %1739 = or i1 %1737, %1738, !dbg !167
  %1740 = select i1 %1739, float %1736, float 0x3EE4F8B580000000, !dbg !168
  %1741 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1740), !dbg !169
  %1742 = add i32 %24, %66
  br label %1743, !dbg !170

1743:                                             ; preds = %1461, %1743
  %1744 = phi i1 [ true, %1461 ], [ false, %1743 ]
  %indvars.iv251 = phi i64 [ 0, %1461 ], [ 2048, %1743 ]
  %1745 = or disjoint i64 %indvars.iv251, %90, !dbg !171
  %1746 = icmp samesign ult i64 %1745, 3072, !dbg !172
  %1747 = trunc nuw nsw i64 %1745 to i32, !dbg !173
  %1748 = add i32 %66, %1747, !dbg !173
  %1749 = trunc nuw nsw i64 %indvars.iv251 to i32, !dbg !173
  %1750 = add i32 %1742, %1749, !dbg !173
  %1751 = sext i32 %1748 to i64, !dbg !174
  %1752 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1751, !dbg !174
  %1753 = sext i32 %1750 to i64, !dbg !174
  %1754 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1753, !dbg !174
  %1755 = and i1 %18, %1746, !dbg !175
  %1756 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1752, i1 %1755) #5, !dbg !176
  %1757 = extractvalue { i32, i32, i32, i32 } %1756, 0, !dbg !176
  %1758 = bitcast i32 %1757 to <2 x bfloat>, !dbg !176
  %1759 = extractvalue { i32, i32, i32, i32 } %1756, 1, !dbg !176
  %1760 = bitcast i32 %1759 to <2 x bfloat>, !dbg !176
  %1761 = extractvalue { i32, i32, i32, i32 } %1756, 2, !dbg !176
  %1762 = bitcast i32 %1761 to <2 x bfloat>, !dbg !176
  %1763 = extractvalue { i32, i32, i32, i32 } %1756, 3, !dbg !176
  %1764 = bitcast i32 %1763 to <2 x bfloat>, !dbg !176
  %1765 = extractelement <2 x bfloat> %1758, i64 0, !dbg !176
  %1766 = extractelement <2 x bfloat> %1758, i64 1, !dbg !176
  %1767 = extractelement <2 x bfloat> %1760, i64 0, !dbg !176
  %1768 = extractelement <2 x bfloat> %1760, i64 1, !dbg !176
  %1769 = extractelement <2 x bfloat> %1762, i64 0, !dbg !176
  %1770 = extractelement <2 x bfloat> %1762, i64 1, !dbg !176
  %1771 = extractelement <2 x bfloat> %1764, i64 0, !dbg !176
  %1772 = extractelement <2 x bfloat> %1764, i64 1, !dbg !176
  %1773 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1754, i1 %1755) #5, !dbg !176
  %1774 = extractvalue { i32, i32, i32, i32 } %1773, 0, !dbg !176
  %1775 = bitcast i32 %1774 to <2 x bfloat>, !dbg !176
  %1776 = extractvalue { i32, i32, i32, i32 } %1773, 1, !dbg !176
  %1777 = bitcast i32 %1776 to <2 x bfloat>, !dbg !176
  %1778 = extractvalue { i32, i32, i32, i32 } %1773, 2, !dbg !176
  %1779 = bitcast i32 %1778 to <2 x bfloat>, !dbg !176
  %1780 = extractvalue { i32, i32, i32, i32 } %1773, 3, !dbg !176
  %1781 = bitcast i32 %1780 to <2 x bfloat>, !dbg !176
  %1782 = extractelement <2 x bfloat> %1775, i64 0, !dbg !176
  %1783 = extractelement <2 x bfloat> %1775, i64 1, !dbg !176
  %1784 = extractelement <2 x bfloat> %1777, i64 0, !dbg !176
  %1785 = extractelement <2 x bfloat> %1777, i64 1, !dbg !176
  %1786 = extractelement <2 x bfloat> %1779, i64 0, !dbg !176
  %1787 = extractelement <2 x bfloat> %1779, i64 1, !dbg !176
  %1788 = extractelement <2 x bfloat> %1781, i64 0, !dbg !176
  %1789 = extractelement <2 x bfloat> %1781, i64 1, !dbg !176
  %1790 = fpext bfloat %1765 to float, !dbg !177
  %1791 = fpext bfloat %1766 to float, !dbg !177
  %1792 = fpext bfloat %1767 to float, !dbg !177
  %1793 = fpext bfloat %1768 to float, !dbg !177
  %1794 = fpext bfloat %1769 to float, !dbg !177
  %1795 = fpext bfloat %1770 to float, !dbg !177
  %1796 = fpext bfloat %1771 to float, !dbg !177
  %1797 = fpext bfloat %1772 to float, !dbg !177
  %1798 = fpext bfloat %1782 to float, !dbg !177
  %1799 = fpext bfloat %1783 to float, !dbg !177
  %1800 = fpext bfloat %1784 to float, !dbg !177
  %1801 = fpext bfloat %1785 to float, !dbg !177
  %1802 = fpext bfloat %1786 to float, !dbg !177
  %1803 = fpext bfloat %1787 to float, !dbg !177
  %1804 = fpext bfloat %1788 to float, !dbg !177
  %1805 = fpext bfloat %1789 to float, !dbg !177
  %1806 = fmul float %1741, %1790, !dbg !178
  %1807 = fmul float %1741, %1791, !dbg !178
  %1808 = fmul float %1741, %1792, !dbg !178
  %1809 = fmul float %1741, %1793, !dbg !178
  %1810 = fmul float %1741, %1794, !dbg !178
  %1811 = fmul float %1741, %1795, !dbg !178
  %1812 = fmul float %1741, %1796, !dbg !178
  %1813 = fmul float %1741, %1797, !dbg !178
  %1814 = fmul float %1741, %1798, !dbg !178
  %1815 = fmul float %1741, %1799, !dbg !178
  %1816 = fmul float %1741, %1800, !dbg !178
  %1817 = fmul float %1741, %1801, !dbg !178
  %1818 = fmul float %1741, %1802, !dbg !178
  %1819 = fmul float %1741, %1803, !dbg !178
  %1820 = fmul float %1741, %1804, !dbg !178
  %1821 = fmul float %1741, %1805, !dbg !178
  %1822 = tail call float @llvm.nvvm.round.f(float %1806) #5, !dbg !179
  %1823 = tail call float @llvm.nvvm.round.f(float %1807) #5, !dbg !179
  %1824 = tail call float @llvm.nvvm.round.f(float %1808) #5, !dbg !179
  %1825 = tail call float @llvm.nvvm.round.f(float %1809) #5, !dbg !179
  %1826 = tail call float @llvm.nvvm.round.f(float %1810) #5, !dbg !179
  %1827 = tail call float @llvm.nvvm.round.f(float %1811) #5, !dbg !179
  %1828 = tail call float @llvm.nvvm.round.f(float %1812) #5, !dbg !179
  %1829 = tail call float @llvm.nvvm.round.f(float %1813) #5, !dbg !179
  %1830 = tail call float @llvm.nvvm.round.f(float %1814) #5, !dbg !179
  %1831 = tail call float @llvm.nvvm.round.f(float %1815) #5, !dbg !179
  %1832 = tail call float @llvm.nvvm.round.f(float %1816) #5, !dbg !179
  %1833 = tail call float @llvm.nvvm.round.f(float %1817) #5, !dbg !179
  %1834 = tail call float @llvm.nvvm.round.f(float %1818) #5, !dbg !179
  %1835 = tail call float @llvm.nvvm.round.f(float %1819) #5, !dbg !179
  %1836 = tail call float @llvm.nvvm.round.f(float %1820) #5, !dbg !179
  %1837 = tail call float @llvm.nvvm.round.f(float %1821) #5, !dbg !179
  %1838 = insertelement <4 x float> poison, float %1822, i64 0, !dbg !180
  %1839 = insertelement <4 x float> %1838, float %1823, i64 1, !dbg !180
  %1840 = insertelement <4 x float> %1839, float %1824, i64 2, !dbg !180
  %1841 = insertelement <4 x float> %1840, float %1825, i64 3, !dbg !180
  %1842 = fcmp ogt <4 x float> %1841, splat (float -1.270000e+02), !dbg !180
  %1843 = fcmp uno <4 x float> %1841, zeroinitializer, !dbg !182
  %1844 = or <4 x i1> %1842, %1843, !dbg !183
  %1845 = select <4 x i1> %1844, <4 x float> %1841, <4 x float> splat (float -1.270000e+02), !dbg !184
  %1846 = fcmp olt <4 x float> %1845, splat (float 1.270000e+02), !dbg !185
  %1847 = fcmp uno <4 x float> %1845, zeroinitializer, !dbg !187
  %1848 = or <4 x i1> %1846, %1847, !dbg !188
  %1849 = fptosi <4 x float> %1845 to <4 x i8>, !dbg !189
  %1850 = select <4 x i1> %1848, <4 x i8> %1849, <4 x i8> splat (i8 127), !dbg !190
  %1851 = insertelement <4 x float> poison, float %1826, i64 0, !dbg !180
  %1852 = insertelement <4 x float> %1851, float %1827, i64 1, !dbg !180
  %1853 = insertelement <4 x float> %1852, float %1828, i64 2, !dbg !180
  %1854 = insertelement <4 x float> %1853, float %1829, i64 3, !dbg !180
  %1855 = fcmp ogt <4 x float> %1854, splat (float -1.270000e+02), !dbg !180
  %1856 = fcmp uno <4 x float> %1854, zeroinitializer, !dbg !182
  %1857 = or <4 x i1> %1855, %1856, !dbg !183
  %1858 = select <4 x i1> %1857, <4 x float> %1854, <4 x float> splat (float -1.270000e+02), !dbg !184
  %1859 = fcmp olt <4 x float> %1858, splat (float 1.270000e+02), !dbg !185
  %1860 = fcmp uno <4 x float> %1858, zeroinitializer, !dbg !187
  %1861 = or <4 x i1> %1859, %1860, !dbg !188
  %1862 = fptosi <4 x float> %1858 to <4 x i8>, !dbg !189
  %1863 = select <4 x i1> %1861, <4 x i8> %1862, <4 x i8> splat (i8 127), !dbg !190
  %1864 = insertelement <4 x float> poison, float %1830, i64 0, !dbg !180
  %1865 = insertelement <4 x float> %1864, float %1831, i64 1, !dbg !180
  %1866 = insertelement <4 x float> %1865, float %1832, i64 2, !dbg !180
  %1867 = insertelement <4 x float> %1866, float %1833, i64 3, !dbg !180
  %1868 = fcmp ogt <4 x float> %1867, splat (float -1.270000e+02), !dbg !180
  %1869 = fcmp uno <4 x float> %1867, zeroinitializer, !dbg !182
  %1870 = or <4 x i1> %1868, %1869, !dbg !183
  %1871 = select <4 x i1> %1870, <4 x float> %1867, <4 x float> splat (float -1.270000e+02), !dbg !184
  %1872 = fcmp olt <4 x float> %1871, splat (float 1.270000e+02), !dbg !185
  %1873 = fcmp uno <4 x float> %1871, zeroinitializer, !dbg !187
  %1874 = or <4 x i1> %1872, %1873, !dbg !188
  %1875 = fptosi <4 x float> %1871 to <4 x i8>, !dbg !189
  %1876 = select <4 x i1> %1874, <4 x i8> %1875, <4 x i8> splat (i8 127), !dbg !190
  %1877 = insertelement <4 x float> poison, float %1834, i64 0, !dbg !180
  %1878 = insertelement <4 x float> %1877, float %1835, i64 1, !dbg !180
  %1879 = insertelement <4 x float> %1878, float %1836, i64 2, !dbg !180
  %1880 = insertelement <4 x float> %1879, float %1837, i64 3, !dbg !180
  %1881 = fcmp ogt <4 x float> %1880, splat (float -1.270000e+02), !dbg !180
  %1882 = fcmp uno <4 x float> %1880, zeroinitializer, !dbg !182
  %1883 = or <4 x i1> %1881, %1882, !dbg !183
  %1884 = select <4 x i1> %1883, <4 x float> %1880, <4 x float> splat (float -1.270000e+02), !dbg !184
  %1885 = fcmp olt <4 x float> %1884, splat (float 1.270000e+02), !dbg !185
  %1886 = fcmp uno <4 x float> %1884, zeroinitializer, !dbg !187
  %1887 = or <4 x i1> %1885, %1886, !dbg !188
  %1888 = fptosi <4 x float> %1884 to <4 x i8>, !dbg !189
  %1889 = select <4 x i1> %1887, <4 x i8> %1888, <4 x i8> splat (i8 127), !dbg !190
  %1890 = getelementptr i8, ptr addrspace(1) %12, i64 %1751, !dbg !191
  %1891 = bitcast <4 x i8> %1850 to i32, !dbg !192
  %1892 = bitcast <4 x i8> %1863 to i32, !dbg !192
  %1893 = bitcast <4 x i8> %1876 to i32, !dbg !192
  %1894 = bitcast <4 x i8> %1889 to i32, !dbg !192
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1891, i32 %1892, i32 %1893, i32 %1894, ptr addrspace(1) %1890, i1 %1755) #5, !dbg !192
  br i1 %1744, label %1743, label %1895, !dbg !170

1895:                                             ; preds = %1743
  ret void, !dbg !193
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 60, column: 23, scope: !6)
!37 = !DILocation(line: 35, column: 31, scope: !6)
!38 = !DILocation(line: 36, column: 29, scope: !6)
!39 = !DILocation(line: 40, column: 41, scope: !6)
!40 = !DILocation(line: 40, column: 34, scope: !6)
!41 = !DILocation(line: 40, column: 59, scope: !6)
!42 = !DILocation(line: 40, column: 51, scope: !6)
!43 = !DILocation(line: 41, column: 41, scope: !6)
!44 = !DILocation(line: 41, column: 34, scope: !6)
!45 = !DILocation(line: 41, column: 48, scope: !6)
!46 = !DILocation(line: 42, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 48, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 51, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 44, column: 42, scope: !6)
!52 = !DILocation(line: 45, column: 35, scope: !6)
!53 = !DILocation(line: 45, column: 42, scope: !6)
!54 = !DILocation(line: 40, column: 113, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 95, scope: !6)
!58 = !DILocation(line: 47, column: 22, scope: !6)
!59 = !DILocation(line: 48, column: 23, scope: !6)
!60 = !DILocation(line: 61, column: 24, scope: !6)
!61 = !DILocation(line: 62, column: 24, scope: !6)
!62 = !DILocation(line: 63, column: 23, scope: !6)
!63 = !DILocation(line: 64, column: 23, scope: !6)
!64 = !DILocation(line: 203, column: 7, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 55, scope: !6)
!66 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !65)
!67 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !65)
!68 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !65)
!69 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !65)
!70 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !65)
!73 = !DILocation(line: 70, column: 64, scope: !6)
!74 = !DILocation(line: 71, column: 60, scope: !6)
!75 = !DILocation(line: 72, column: 68, scope: !6)
!76 = !DILocation(line: 73, column: 29, scope: !6)
!77 = !DILocation(line: 73, column: 53, scope: !6)
!78 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !79)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 217, column: 21, scope: !81, inlinedAt: !79)
!81 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!82 = !DILocation(line: 218, column: 28, scope: !81, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 39, scope: !81, inlinedAt: !79)
!84 = !DILocation(line: 219, column: 60, scope: !81, inlinedAt: !79)
!85 = !DILocation(line: 219, column: 49, scope: !81, inlinedAt: !79)
!86 = !DILocation(line: 221, column: 25, scope: !81, inlinedAt: !79)
!87 = !DILocation(line: 221, column: 17, scope: !81, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 15, scope: !81, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 30, scope: !81, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 38, scope: !81, inlinedAt: !79)
!91 = !DILocation(line: 222, column: 49, scope: !81, inlinedAt: !79)
!92 = !DILocation(line: 222, column: 22, scope: !81, inlinedAt: !79)
!93 = !DILocation(line: 94, column: 25, scope: !6)
!94 = !DILocation(line: 96, column: 24, scope: !6)
!95 = !DILocation(line: 97, column: 32, scope: !6)
!96 = !DILocation(line: 80, column: 40, scope: !6)
!97 = !DILocation(line: 98, column: 24, scope: !6)
!98 = !DILocation(line: 92, column: 24, scope: !6)
!99 = !DILocation(line: 81, column: 31, scope: !6)
!100 = !DILocation(line: 82, column: 29, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 61, scope: !6)
!104 = !DILocation(line: 86, column: 53, scope: !6)
!105 = !DILocation(line: 87, column: 43, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 87, column: 50, scope: !6)
!108 = !DILocation(line: 88, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 50, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 89, column: 49, scope: !6)
!113 = !DILocation(line: 90, column: 35, scope: !6)
!114 = !DILocation(line: 90, column: 49, scope: !6)
!115 = !DILocation(line: 86, column: 115, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 90, column: 102, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 103, column: 24, scope: !6)
!120 = !DILocation(line: 104, column: 24, scope: !6)
!121 = !DILocation(line: 106, column: 24, scope: !6)
!122 = !DILocation(line: 107, column: 24, scope: !6)
!123 = !DILocation(line: 113, column: 53, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 47, scope: !6)
!126 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !127)
!127 = !DILocation(line: 109, column: 47, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !125)
!129 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !125)
!130 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !125)
!131 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !127)
!132 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !127)
!133 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !127)
!134 = !DILocation(line: 110, column: 50, scope: !6)
!135 = !DILocation(line: 112, column: 50, scope: !6)
!136 = !DILocation(line: 113, column: 29, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !81, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !81, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !81, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !81, inlinedAt: !138)
!143 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !81, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 16, scope: !81, inlinedAt: !144)
!147 = !DILocation(line: 105, column: 29, scope: !81, inlinedAt: !144)
!148 = !DILocation(line: 104, column: 21, scope: !81, inlinedAt: !144)
!149 = !DILocation(line: 116, column: 25, scope: !6)
!150 = !DILocation(line: 116, column: 37, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 37, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 119, column: 31, scope: !6)
!172 = !DILocation(line: 120, column: 29, scope: !6)
!173 = !DILocation(line: 124, column: 43, scope: !6)
!174 = !DILocation(line: 124, column: 36, scope: !6)
!175 = !DILocation(line: 124, column: 61, scope: !6)
!176 = !DILocation(line: 124, column: 53, scope: !6)
!177 = !DILocation(line: 124, column: 115, scope: !6)
!178 = !DILocation(line: 140, column: 24, scope: !6)
!179 = !DILocation(line: 141, column: 36, scope: !6)
!180 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !181)
!181 = !DILocation(line: 144, column: 46, scope: !6)
!182 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !181)
!183 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !181)
!184 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !181)
!185 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !186)
!186 = !DILocation(line: 146, column: 46, scope: !6)
!187 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !186)
!188 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !186)
!189 = !DILocation(line: 148, column: 25, scope: !6)
!190 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !186)
!191 = !DILocation(line: 149, column: 29, scope: !6)
!192 = !DILocation(line: 149, column: 53, scope: !6)
!193 = !DILocation(line: 118, column: 4, scope: !6)
