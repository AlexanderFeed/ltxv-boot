; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 2, !dbg !11
  %21 = and i32 %20, 2044, !dbg !11
  %22 = mul i32 %16, 3072, !dbg !12
  %23 = zext nneg i32 %21 to i64, !dbg !13
  %24 = add i32 %21, %22, !dbg !14
  %25 = sext i32 %24 to i64, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %17) #5, !dbg !16
  %28 = extractvalue { i32, i32 } %27, 1, !dbg !16
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !16
  %30 = extractelement <2 x bfloat> %29, i64 1, !dbg !16
  %31 = fpext bfloat %30 to float, !dbg !17
  %32 = extractelement <2 x bfloat> %29, i64 0, !dbg !16
  %33 = fpext bfloat %32 to float, !dbg !17
  %34 = extractvalue { i32, i32 } %27, 0, !dbg !16
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !16
  %36 = extractelement <2 x bfloat> %35, i64 1, !dbg !16
  %37 = fpext bfloat %36 to float, !dbg !17
  %38 = extractelement <2 x bfloat> %35, i64 0, !dbg !16
  %39 = fpext bfloat %38 to float, !dbg !17
  %40 = select i1 %17, float %39, float 0.000000e+00, !dbg !18
  %41 = select i1 %17, float %37, float 0.000000e+00, !dbg !18
  %42 = select i1 %17, float %33, float 0.000000e+00, !dbg !18
  %43 = select i1 %17, float %31, float 0.000000e+00, !dbg !18
  %44 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %45 = or disjoint i64 %23, 2048, !dbg !20
  %46 = icmp samesign ult i64 %45, 3072, !dbg !21
  %47 = trunc nuw nsw i64 %45 to i32, !dbg !14
  %48 = add i32 %22, %47, !dbg !14
  %49 = sext i32 %48 to i64, !dbg !15
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !15
  %51 = and i1 %17, %46, !dbg !22
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %51) #5, !dbg !16
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !16
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !16
  %55 = extractelement <2 x bfloat> %54, i64 0, !dbg !16
  %56 = fpext bfloat %55 to float, !dbg !17
  %57 = fsub float %56, %40, !dbg !23
  %58 = fadd float %44, 1.000000e+00, !dbg !27
  %59 = tail call float @llvm.nvvm.div.full(float %57, float %58), !dbg !28
  %60 = fadd float %40, %59, !dbg !29
  %61 = fsub float %56, %60, !dbg !30
  %62 = fmul float %57, %61, !dbg !31
  %63 = fadd float %62, 0.000000e+00, !dbg !32
  %64 = extractelement <2 x bfloat> %54, i64 1, !dbg !16
  %65 = fpext bfloat %64 to float, !dbg !17
  %66 = fsub float %65, %41, !dbg !23
  %67 = tail call float @llvm.nvvm.div.full(float %66, float %58), !dbg !28
  %68 = fadd float %41, %67, !dbg !29
  %69 = fsub float %65, %68, !dbg !30
  %70 = fmul float %66, %69, !dbg !31
  %71 = fadd float %70, 0.000000e+00, !dbg !32
  %72 = extractvalue { i32, i32 } %52, 1, !dbg !16
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !16
  %74 = extractelement <2 x bfloat> %73, i64 0, !dbg !16
  %75 = fpext bfloat %74 to float, !dbg !17
  %76 = fsub float %75, %42, !dbg !23
  %77 = tail call float @llvm.nvvm.div.full(float %76, float %58), !dbg !28
  %78 = fadd float %42, %77, !dbg !29
  %79 = fsub float %75, %78, !dbg !30
  %80 = fmul float %76, %79, !dbg !31
  %81 = fadd float %80, 0.000000e+00, !dbg !32
  %82 = extractelement <2 x bfloat> %73, i64 1, !dbg !16
  %83 = fpext bfloat %82 to float, !dbg !17
  %84 = fsub float %83, %43, !dbg !23
  %85 = tail call float @llvm.nvvm.div.full(float %84, float %58), !dbg !28
  %86 = fadd float %43, %85, !dbg !29
  %87 = fsub float %83, %86, !dbg !30
  %88 = fmul float %84, %87, !dbg !31
  %89 = fadd float %88, 0.000000e+00, !dbg !32
  %90 = select i1 %51, float %60, float %40, !dbg !18
  %91 = select i1 %51, float %68, float %41, !dbg !18
  %92 = select i1 %51, float %78, float %42, !dbg !18
  %93 = select i1 %51, float %86, float %43, !dbg !18
  %94 = select i1 %51, float %81, float 0.000000e+00, !dbg !33
  %95 = select i1 %51, float %89, float 0.000000e+00, !dbg !33
  %96 = select i1 %51, float %58, float %44, !dbg !19
  %97 = select i1 %51, float %58, float %44, !dbg !19
  %98 = select i1 %51, float %58, float %44, !dbg !19
  %99 = select i1 %51, float %58, float %44, !dbg !19
  %100 = lshr i32 %18, 5, !dbg !11
  %101 = fsub float %91, %90, !dbg !34
  %102 = fadd float %96, %97, !dbg !37
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !38
  %104 = tail call float @llvm.nvvm.div.full(float %97, float %102), !dbg !39
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !40
  %106 = fmul float %101, %105, !dbg !41
  %107 = fadd float %90, %106, !dbg !42
  %108 = fadd float %63, %71, !dbg !43
  %109 = select i1 %51, float %108, float 0.000000e+00, !dbg !43
  %110 = fmul float %101, %101, !dbg !44
  %111 = fmul float %110, %96, !dbg !45
  %112 = fmul float %111, %105, !dbg !46
  %113 = fadd float %109, %112, !dbg !47
  %114 = fsub float %92, %107, !dbg !34
  %115 = fadd float %98, %102, !dbg !37
  %116 = fcmp oeq float %115, 0.000000e+00, !dbg !38
  %117 = tail call float @llvm.nvvm.div.full(float %98, float %115), !dbg !39
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !40
  %119 = fmul float %118, %114, !dbg !41
  %120 = fadd float %107, %119, !dbg !42
  %121 = fadd float %94, %113, !dbg !43
  %122 = fmul float %114, %114, !dbg !44
  %123 = fmul float %102, %122, !dbg !45
  %124 = fmul float %118, %123, !dbg !46
  %125 = fadd float %121, %124, !dbg !47
  %126 = fsub float %93, %120, !dbg !34
  %127 = fadd float %99, %115, !dbg !37
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !38
  %129 = tail call float @llvm.nvvm.div.full(float %99, float %127), !dbg !39
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !40
  %131 = fmul float %130, %126, !dbg !41
  %132 = fadd float %120, %131, !dbg !42
  %133 = fadd float %95, %125, !dbg !43
  %134 = fmul float %126, %126, !dbg !44
  %135 = fmul float %115, %134, !dbg !45
  %136 = fmul float %130, %135, !dbg !46
  %137 = fadd float %133, %136, !dbg !47
  %138 = bitcast float %132 to i32, !dbg !48
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !48
  %140 = bitcast i32 %139 to float, !dbg !48
  %141 = bitcast float %137 to i32, !dbg !48
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !48
  %143 = bitcast i32 %142 to float, !dbg !48
  %144 = bitcast float %127 to i32, !dbg !48
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !48
  %146 = bitcast i32 %145 to float, !dbg !48
  %147 = fsub float %140, %132, !dbg !34
  %148 = fadd float %127, %146, !dbg !37
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !38
  %150 = tail call float @llvm.nvvm.div.full(float %146, float %148), !dbg !39
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !40
  %152 = fmul float %151, %147, !dbg !41
  %153 = fadd float %132, %152, !dbg !42
  %154 = fadd float %137, %143, !dbg !43
  %155 = fmul float %147, %147, !dbg !44
  %156 = fmul float %127, %155, !dbg !45
  %157 = fmul float %151, %156, !dbg !46
  %158 = fadd float %154, %157, !dbg !47
  %159 = bitcast float %153 to i32, !dbg !48
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !48
  %161 = bitcast i32 %160 to float, !dbg !48
  %162 = bitcast float %158 to i32, !dbg !48
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !48
  %164 = bitcast i32 %163 to float, !dbg !48
  %165 = bitcast float %148 to i32, !dbg !48
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !48
  %167 = bitcast i32 %166 to float, !dbg !48
  %168 = fsub float %161, %153, !dbg !34
  %169 = fadd float %148, %167, !dbg !37
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !38
  %171 = tail call float @llvm.nvvm.div.full(float %167, float %169), !dbg !39
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !40
  %173 = fmul float %168, %172, !dbg !41
  %174 = fadd float %153, %173, !dbg !42
  %175 = fadd float %158, %164, !dbg !43
  %176 = fmul float %168, %168, !dbg !44
  %177 = fmul float %148, %176, !dbg !45
  %178 = fmul float %172, %177, !dbg !46
  %179 = fadd float %175, %178, !dbg !47
  %180 = bitcast float %174 to i32, !dbg !48
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !48
  %182 = bitcast i32 %181 to float, !dbg !48
  %183 = bitcast float %179 to i32, !dbg !48
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !48
  %185 = bitcast i32 %184 to float, !dbg !48
  %186 = bitcast float %169 to i32, !dbg !48
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !48
  %188 = bitcast i32 %187 to float, !dbg !48
  %189 = fsub float %182, %174, !dbg !34
  %190 = fadd float %169, %188, !dbg !37
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !38
  %192 = tail call float @llvm.nvvm.div.full(float %188, float %190), !dbg !39
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !40
  %194 = fmul float %189, %193, !dbg !41
  %195 = fadd float %174, %194, !dbg !42
  %196 = fadd float %179, %185, !dbg !43
  %197 = fmul float %189, %189, !dbg !44
  %198 = fmul float %169, %197, !dbg !45
  %199 = fmul float %193, %198, !dbg !46
  %200 = fadd float %196, %199, !dbg !47
  %201 = bitcast float %195 to i32, !dbg !48
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !48
  %203 = bitcast i32 %202 to float, !dbg !48
  %204 = bitcast float %200 to i32, !dbg !48
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !48
  %206 = bitcast i32 %205 to float, !dbg !48
  %207 = bitcast float %190 to i32, !dbg !48
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !48
  %209 = bitcast i32 %208 to float, !dbg !48
  %210 = fsub float %203, %195, !dbg !34
  %211 = fadd float %190, %209, !dbg !37
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !38
  %213 = tail call float @llvm.nvvm.div.full(float %209, float %211), !dbg !39
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !40
  %215 = fmul float %210, %214, !dbg !41
  %216 = fadd float %195, %215, !dbg !42
  %217 = fadd float %200, %206, !dbg !43
  %218 = fmul float %210, %210, !dbg !44
  %219 = fmul float %190, %218, !dbg !45
  %220 = fmul float %214, %219, !dbg !46
  %221 = fadd float %217, %220, !dbg !47
  %222 = bitcast float %216 to i32, !dbg !48
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !48
  %224 = bitcast i32 %223 to float, !dbg !48
  %225 = bitcast float %221 to i32, !dbg !48
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !48
  %227 = bitcast i32 %226 to float, !dbg !48
  %228 = bitcast float %211 to i32, !dbg !48
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !48
  %230 = bitcast i32 %229 to float, !dbg !48
  %231 = fsub float %224, %216, !dbg !34
  %232 = fadd float %211, %230, !dbg !37
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !38
  %234 = tail call float @llvm.nvvm.div.full(float %230, float %232), !dbg !39
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !40
  %236 = fmul float %231, %235, !dbg !41
  %237 = fadd float %216, %236, !dbg !42
  %238 = fadd float %221, %227, !dbg !43
  %239 = fmul float %231, %231, !dbg !44
  %240 = fmul float %211, %239, !dbg !45
  %241 = fmul float %235, %240, !dbg !46
  %242 = fadd float %238, %241, !dbg !47
  %243 = and i32 %100, 15, !dbg !48
  %244 = icmp eq i32 %19, 0, !dbg !48
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !48
  %246 = bitcast float %237 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 %244) #5, !dbg !48
  %247 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %243, !dbg !48
  %248 = bitcast float %242 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 %244) #5, !dbg !48
  %249 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %243, !dbg !48
  %250 = bitcast float %232 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 %244) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %251 = icmp slt i32 %18, 16, !dbg !48
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !48
  %253 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %251) #5, !dbg !48
  %254 = bitcast i32 %253 to float, !dbg !48
  %255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !48
  %256 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %251) #5, !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !48
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %251) #5, !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !48
  %262 = bitcast i32 %261 to float, !dbg !48
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !48
  %264 = bitcast i32 %263 to float, !dbg !48
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !48
  %266 = bitcast i32 %265 to float, !dbg !48
  %267 = fsub float %262, %254, !dbg !34
  %268 = fadd float %260, %266, !dbg !37
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !38
  %270 = tail call float @llvm.nvvm.div.full(float %266, float %268), !dbg !39
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !40
  %272 = fmul float %267, %271, !dbg !41
  %273 = fadd float %272, %254, !dbg !42
  %274 = fadd float %257, %264, !dbg !43
  %275 = fmul float %267, %267, !dbg !44
  %276 = fmul float %275, %260, !dbg !45
  %277 = fmul float %276, %271, !dbg !46
  %278 = fadd float %274, %277, !dbg !47
  %279 = bitcast float %273 to i32, !dbg !48
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 4, i32 31), !dbg !48
  %281 = bitcast i32 %280 to float, !dbg !48
  %282 = bitcast float %278 to i32, !dbg !48
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !48
  %284 = bitcast i32 %283 to float, !dbg !48
  %285 = bitcast float %268 to i32, !dbg !48
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !48
  %287 = bitcast i32 %286 to float, !dbg !48
  %288 = fsub float %281, %273, !dbg !34
  %289 = fadd float %268, %287, !dbg !37
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !38
  %291 = tail call float @llvm.nvvm.div.full(float %287, float %289), !dbg !39
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !40
  %293 = fmul float %288, %292, !dbg !41
  %294 = fadd float %273, %293, !dbg !42
  %295 = fadd float %278, %284, !dbg !43
  %296 = fmul float %288, %288, !dbg !44
  %297 = fmul float %268, %296, !dbg !45
  %298 = fmul float %292, %297, !dbg !46
  %299 = fadd float %295, %298, !dbg !47
  %300 = bitcast float %294 to i32, !dbg !48
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 2, i32 31), !dbg !48
  %302 = bitcast i32 %301 to float, !dbg !48
  %303 = bitcast float %299 to i32, !dbg !48
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !48
  %305 = bitcast i32 %304 to float, !dbg !48
  %306 = bitcast float %289 to i32, !dbg !48
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !48
  %308 = bitcast i32 %307 to float, !dbg !48
  %309 = fsub float %302, %294, !dbg !34
  %310 = fadd float %289, %308, !dbg !37
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !38
  %312 = tail call float @llvm.nvvm.div.full(float %308, float %310), !dbg !39
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !40
  %314 = fmul float %309, %313, !dbg !41
  %315 = fadd float %294, %314, !dbg !42
  %316 = fadd float %299, %305, !dbg !43
  %317 = fmul float %309, %309, !dbg !44
  %318 = fmul float %289, %317, !dbg !45
  %319 = fmul float %313, %318, !dbg !46
  %320 = fadd float %316, %319, !dbg !47
  %321 = bitcast float %315 to i32, !dbg !48
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 1, i32 31), !dbg !48
  %323 = bitcast i32 %322 to float, !dbg !48
  %324 = bitcast float %320 to i32, !dbg !48
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !48
  %326 = bitcast i32 %325 to float, !dbg !48
  %327 = bitcast float %310 to i32, !dbg !48
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !48
  %329 = bitcast i32 %328 to float, !dbg !48
  %330 = fsub float %323, %315, !dbg !34
  %331 = fadd float %310, %329, !dbg !37
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !38
  %333 = tail call float @llvm.nvvm.div.full(float %329, float %331), !dbg !39
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !40
  %335 = fmul float %330, %334, !dbg !41
  %336 = fadd float %315, %335, !dbg !42
  %337 = fadd float %320, %326, !dbg !43
  %338 = fmul float %330, %330, !dbg !44
  %339 = fmul float %310, %338, !dbg !45
  %340 = fmul float %334, %339, !dbg !46
  %341 = fadd float %337, %340, !dbg !47
  %342 = and i32 %18, 15, !dbg !48
  %343 = icmp eq i32 %342, 0, !dbg !48
  %344 = and i1 %251, %343, !dbg !48
  %345 = bitcast float %336 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %345, i1 %344) #5, !dbg !48
  %346 = bitcast float %341 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %346, i1 %344) #5, !dbg !48
  %347 = bitcast float %331 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %347, i1 %344) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %348 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %349 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !48
  %350 = tail call float @llvm.nvvm.div.full(float %349, float 3.072000e+03), !dbg !49
  %351 = fadd float %350, 0x3EB0C6F7A0000000, !dbg !50
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i17 = icmp eq i32 %355, 0, !dbg !51
  br i1 %.not.i17, label %358, label %356, !dbg !51

356:                                              ; preds = %__nv_rsqrtf.exit
  %357 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %351), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

358:                                              ; preds = %__nv_rsqrtf.exit
  %359 = tail call float @llvm.nvvm.rsqrt.approx.f(float %351), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

__nv_rsqrtf.exit19:                               ; preds = %358, %356
  %.0.i18 = phi float [ %357, %356 ], [ %359, %358 ], !dbg !51
  %360 = insertelement <2 x float> poison, float %348, i64 0, !dbg !52
  %361 = shufflevector <2 x float> %360, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %362 = insertelement <2 x float> poison, float %.0.i18, i64 0, !dbg !53
  %363 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %364 = add i32 %22, %21, !dbg !54
  %365 = sext i32 %364 to i64, !dbg !55
  %366 = getelementptr bfloat, ptr addrspace(1) %0, i64 %365, !dbg !55
  %367 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %366, i1 %17) #5, !dbg !56
  %368 = extractvalue { i32, i32 } %367, 0, !dbg !56
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !56
  %370 = extractvalue { i32, i32 } %367, 1, !dbg !56
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !56
  %372 = add nuw nsw i64 %23, 3072, !dbg !57
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %372, !dbg !58
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %373, i1 true) #5, !dbg !59
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !59
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !59
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !59
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !59
  %379 = getelementptr bfloat, ptr addrspace(1) %2, i64 %372, !dbg !60
  %380 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %379, i1 true) #5, !dbg !61
  %381 = extractvalue { i32, i32 } %380, 0, !dbg !61
  %382 = bitcast i32 %381 to <2 x bfloat>, !dbg !61
  %383 = extractvalue { i32, i32 } %380, 1, !dbg !61
  %384 = bitcast i32 %383 to <2 x bfloat>, !dbg !61
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !62
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %385, i1 true) #5, !dbg !63
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !63
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !63
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !63
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !63
  %391 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !64
  %392 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %391, i1 true) #5, !dbg !65
  %393 = extractvalue { i32, i32 } %392, 0, !dbg !65
  %394 = bitcast i32 %393 to <2 x bfloat>, !dbg !65
  %395 = extractvalue { i32, i32 } %392, 1, !dbg !65
  %396 = bitcast i32 %395 to <2 x bfloat>, !dbg !65
  %397 = fpext <2 x bfloat> %369 to <2 x float>, !dbg !66
  %398 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !59
  %399 = insertelement <2 x i32> %398, i32 %376, i64 1, !dbg !59
  %400 = bitcast <2 x i32> %399 to <2 x float>, !dbg !59
  %401 = fpext <2 x bfloat> %382 to <2 x float>, !dbg !67
  %402 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !63
  %403 = insertelement <2 x i32> %402, i32 %388, i64 1, !dbg !63
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !63
  %405 = fpext <2 x bfloat> %394 to <2 x float>, !dbg !68
  %406 = fsub <2 x float> %397, %361, !dbg !52
  %407 = fmul <2 x float> %363, %406, !dbg !53
  %408 = fadd <2 x float> %400, %401, !dbg !69
  %409 = fadd <2 x float> %408, splat (float 1.000000e+00), !dbg !70
  %410 = fmul <2 x float> %407, %409, !dbg !71
  %411 = fadd <2 x float> %404, %405, !dbg !72
  %412 = fadd <2 x float> %410, %411, !dbg !73
  %413 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !74
  %414 = shufflevector <2 x i1> %413, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !74
  %415 = select <2 x i1> %414, <2 x float> %412, <2 x float> splat (float 0x7FF0000000000000), !dbg !74
  %416 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !75
  %417 = shufflevector <4 x i1> %416, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !75
  %418 = getelementptr bfloat, ptr addrspace(1) %3, i64 %365, !dbg !76
  %419 = fptrunc <2 x float> %412 to <2 x bfloat>, !dbg !77
  %420 = fpext <2 x bfloat> %371 to <2 x float>, !dbg !66
  %421 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !59
  %422 = insertelement <2 x i32> %421, i32 %378, i64 1, !dbg !59
  %423 = bitcast <2 x i32> %422 to <2 x float>, !dbg !59
  %424 = fpext <2 x bfloat> %384 to <2 x float>, !dbg !67
  %425 = insertelement <2 x i32> poison, i32 %389, i64 0, !dbg !63
  %426 = insertelement <2 x i32> %425, i32 %390, i64 1, !dbg !63
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !63
  %428 = fpext <2 x bfloat> %396 to <2 x float>, !dbg !68
  %429 = fsub <2 x float> %420, %361, !dbg !52
  %430 = fmul <2 x float> %363, %429, !dbg !53
  %431 = fadd <2 x float> %423, %424, !dbg !69
  %432 = fadd <2 x float> %431, splat (float 1.000000e+00), !dbg !70
  %433 = fmul <2 x float> %430, %432, !dbg !71
  %434 = fadd <2 x float> %427, %428, !dbg !72
  %435 = fadd <2 x float> %433, %434, !dbg !73
  %436 = extractelement <2 x float> %435, i64 0, !dbg !78
  %437 = extractelement <2 x float> %435, i64 1, !dbg !78
  %438 = select i1 %17, float %436, float 0x7FF0000000000000, !dbg !74
  %439 = select i1 %17, float %437, float 0x7FF0000000000000, !dbg !74
  %440 = shufflevector <2 x float> %412, <2 x float> %435, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %441 = select <4 x i1> %417, <4 x float> %440, <4 x float> splat (float 0xFFF0000000000000), !dbg !75
  %442 = fptrunc <2 x float> %435 to <2 x bfloat>, !dbg !77
  %443 = bitcast <2 x bfloat> %419 to i32, !dbg !77
  %444 = bitcast <2 x bfloat> %442 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %443, i32 %444, ptr addrspace(1) %418, i1 %17) #5, !dbg !77
  %445 = or disjoint i64 %23, 2048, !dbg !82
  %446 = icmp samesign ult i64 %445, 3072, !dbg !83
  %447 = trunc nuw nsw i64 %445 to i32, !dbg !54
  %448 = add i32 %22, %447, !dbg !54
  %449 = sext i32 %448 to i64, !dbg !55
  %450 = getelementptr bfloat, ptr addrspace(1) %0, i64 %449, !dbg !55
  %451 = and i1 %17, %446, !dbg !84
  %452 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %450, i1 %451) #5, !dbg !56
  %453 = extractvalue { i32, i32 } %452, 0, !dbg !56
  %454 = bitcast i32 %453 to <2 x bfloat>, !dbg !56
  %455 = extractvalue { i32, i32 } %452, 1, !dbg !56
  %456 = bitcast i32 %455 to <2 x bfloat>, !dbg !56
  %457 = add nuw nsw i64 %23, 5120, !dbg !57
  %458 = getelementptr float, ptr addrspace(1) %1, i64 %457, !dbg !58
  %459 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %458, i1 %446) #5, !dbg !59
  %460 = extractvalue { i32, i32, i32, i32 } %459, 0, !dbg !59
  %461 = extractvalue { i32, i32, i32, i32 } %459, 1, !dbg !59
  %462 = extractvalue { i32, i32, i32, i32 } %459, 2, !dbg !59
  %463 = extractvalue { i32, i32, i32, i32 } %459, 3, !dbg !59
  %464 = getelementptr bfloat, ptr addrspace(1) %2, i64 %457, !dbg !60
  %465 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %464, i1 %446) #5, !dbg !61
  %466 = extractvalue { i32, i32 } %465, 0, !dbg !61
  %467 = bitcast i32 %466 to <2 x bfloat>, !dbg !61
  %468 = extractvalue { i32, i32 } %465, 1, !dbg !61
  %469 = bitcast i32 %468 to <2 x bfloat>, !dbg !61
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %445, !dbg !62
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i1 %446) #5, !dbg !63
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !63
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !63
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !63
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !63
  %476 = getelementptr bfloat, ptr addrspace(1) %2, i64 %445, !dbg !64
  %477 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %476, i1 %446) #5, !dbg !65
  %478 = extractvalue { i32, i32 } %477, 0, !dbg !65
  %479 = bitcast i32 %478 to <2 x bfloat>, !dbg !65
  %480 = extractvalue { i32, i32 } %477, 1, !dbg !65
  %481 = bitcast i32 %480 to <2 x bfloat>, !dbg !65
  %482 = fcmp uno <2 x float> %415, zeroinitializer, !dbg !85
  %483 = fcmp uno float %438, 0.000000e+00, !dbg !85
  %484 = fcmp uno float %439, 0.000000e+00, !dbg !85
  %485 = fpext <2 x bfloat> %454 to <2 x float>, !dbg !66
  %486 = insertelement <2 x i32> poison, i32 %460, i64 0, !dbg !59
  %487 = insertelement <2 x i32> %486, i32 %461, i64 1, !dbg !59
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !59
  %489 = fpext <2 x bfloat> %467 to <2 x float>, !dbg !67
  %490 = insertelement <2 x i32> poison, i32 %472, i64 0, !dbg !63
  %491 = insertelement <2 x i32> %490, i32 %473, i64 1, !dbg !63
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !63
  %493 = fpext <2 x bfloat> %479 to <2 x float>, !dbg !68
  %494 = fsub <2 x float> %485, %361, !dbg !52
  %495 = fmul <2 x float> %363, %494, !dbg !53
  %496 = fadd <2 x float> %488, %489, !dbg !69
  %497 = fadd <2 x float> %496, splat (float 1.000000e+00), !dbg !70
  %498 = fmul <2 x float> %495, %497, !dbg !71
  %499 = fadd <2 x float> %492, %493, !dbg !72
  %500 = fadd <2 x float> %498, %499, !dbg !73
  %501 = fcmp olt <2 x float> %415, %500, !dbg !86
  %502 = or <2 x i1> %482, %501, !dbg !87
  %503 = select <2 x i1> %502, <2 x float> %415, <2 x float> %500, !dbg !78
  %504 = insertelement <2 x i1> poison, i1 %451, i64 0, !dbg !74
  %505 = shufflevector <2 x i1> %504, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !74
  %506 = select <2 x i1> %505, <2 x float> %503, <2 x float> %415, !dbg !74
  %507 = fcmp uno <4 x float> %441, zeroinitializer, !dbg !88
  %508 = insertelement <4 x i1> poison, i1 %451, i64 0, !dbg !75
  %509 = shufflevector <4 x i1> %508, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !75
  %510 = getelementptr bfloat, ptr addrspace(1) %3, i64 %449, !dbg !76
  %511 = fptrunc <2 x float> %500 to <2 x bfloat>, !dbg !77
  %512 = fpext <2 x bfloat> %456 to <2 x float>, !dbg !66
  %513 = insertelement <2 x i32> poison, i32 %462, i64 0, !dbg !59
  %514 = insertelement <2 x i32> %513, i32 %463, i64 1, !dbg !59
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !59
  %516 = fpext <2 x bfloat> %469 to <2 x float>, !dbg !67
  %517 = insertelement <2 x i32> poison, i32 %474, i64 0, !dbg !63
  %518 = insertelement <2 x i32> %517, i32 %475, i64 1, !dbg !63
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !63
  %520 = fpext <2 x bfloat> %481 to <2 x float>, !dbg !68
  %521 = fsub <2 x float> %512, %361, !dbg !52
  %522 = fmul <2 x float> %363, %521, !dbg !53
  %523 = fadd <2 x float> %515, %516, !dbg !69
  %524 = fadd <2 x float> %523, splat (float 1.000000e+00), !dbg !70
  %525 = fmul <2 x float> %522, %524, !dbg !71
  %526 = fadd <2 x float> %519, %520, !dbg !72
  %527 = fadd <2 x float> %525, %526, !dbg !73
  %528 = extractelement <2 x float> %527, i64 0, !dbg !78
  %529 = fcmp olt float %438, %528, !dbg !86
  %530 = extractelement <2 x float> %527, i64 1, !dbg !78
  %531 = fcmp olt float %439, %530, !dbg !86
  %532 = or i1 %483, %529, !dbg !87
  %533 = or i1 %484, %531, !dbg !87
  %534 = select i1 %532, float %438, float %528, !dbg !78
  %535 = select i1 %533, float %439, float %530, !dbg !78
  %536 = select i1 %451, float %534, float %438, !dbg !74
  %537 = select i1 %451, float %535, float %439, !dbg !74
  %538 = shufflevector <2 x float> %500, <2 x float> %527, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %539 = fcmp ogt <4 x float> %441, %538, !dbg !80
  %540 = or <4 x i1> %507, %539, !dbg !89
  %541 = select <4 x i1> %540, <4 x float> %441, <4 x float> %538, !dbg !90
  %542 = select <4 x i1> %509, <4 x float> %541, <4 x float> %441, !dbg !75
  %543 = fptrunc <2 x float> %527 to <2 x bfloat>, !dbg !77
  %544 = bitcast <2 x bfloat> %511 to i32, !dbg !77
  %545 = bitcast <2 x bfloat> %543 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %544, i32 %545, ptr addrspace(1) %510, i1 %451) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %546 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %506, <2 x i32> <i32 0, i32 2>, !dbg !93
  %547 = fcmp olt <2 x float> %546, %506, !dbg !93
  %548 = fcmp uno <2 x float> %546, %506, !dbg !93
  %shift = shufflevector <2 x i1> %547, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %549 = or <2 x i1> %shift, %548, !dbg !94
  %550 = extractelement <2 x i1> %549, i64 0, !dbg !94
  %551 = extractelement <2 x float> %506, i64 0, !dbg !95
  %552 = extractelement <2 x float> %506, i64 1, !dbg !95
  %553 = select i1 %550, float %551, float %552, !dbg !95
  %554 = fcmp olt float %553, %536, !dbg !93
  %555 = fcmp uno float %553, 0.000000e+00, !dbg !96
  %556 = or i1 %554, %555, !dbg !94
  %557 = select i1 %556, float %553, float %536, !dbg !95
  %558 = fcmp olt float %557, %537, !dbg !93
  %559 = fcmp uno float %557, 0.000000e+00, !dbg !96
  %560 = or i1 %558, %559, !dbg !94
  %561 = select i1 %560, float %557, float %537, !dbg !95
  %562 = bitcast float %561 to i32, !dbg !91
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 16, i32 31), !dbg !91
  %564 = bitcast i32 %563 to float, !dbg !91
  %565 = fcmp olt float %561, %564, !dbg !93
  %566 = fcmp uno float %561, 0.000000e+00, !dbg !96
  %567 = or i1 %566, %565, !dbg !94
  %568 = select i1 %567, float %561, float %564, !dbg !95
  %569 = bitcast float %568 to i32, !dbg !91
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 8, i32 31), !dbg !91
  %571 = bitcast i32 %570 to float, !dbg !91
  %572 = fcmp olt float %568, %571, !dbg !93
  %573 = fcmp uno float %568, 0.000000e+00, !dbg !96
  %574 = or i1 %572, %573, !dbg !94
  %575 = select i1 %574, float %568, float %571, !dbg !95
  %576 = bitcast float %575 to i32, !dbg !91
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !91
  %578 = bitcast i32 %577 to float, !dbg !91
  %579 = fcmp olt float %575, %578, !dbg !93
  %580 = fcmp uno float %575, 0.000000e+00, !dbg !96
  %581 = or i1 %579, %580, !dbg !94
  %582 = select i1 %581, float %575, float %578, !dbg !95
  %583 = bitcast float %582 to i32, !dbg !91
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 2, i32 31), !dbg !91
  %585 = bitcast i32 %584 to float, !dbg !91
  %586 = fcmp olt float %582, %585, !dbg !93
  %587 = fcmp uno float %582, 0.000000e+00, !dbg !96
  %588 = or i1 %586, %587, !dbg !94
  %589 = select i1 %588, float %582, float %585, !dbg !95
  %590 = bitcast float %589 to i32, !dbg !91
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 1, i32 31), !dbg !91
  %592 = bitcast i32 %591 to float, !dbg !91
  %593 = fcmp olt float %589, %592, !dbg !93
  %594 = fcmp uno float %589, 0.000000e+00, !dbg !96
  %595 = or i1 %593, %594, !dbg !94
  %596 = select i1 %595, i32 %590, i32 %591, !dbg !95
  %597 = insertelement <1 x i32> poison, i32 %596, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %597, i1 %244) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %598 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %251) #5, !dbg !91
  %599 = bitcast i32 %598 to float, !dbg !91
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 8, i32 31), !dbg !91
  %601 = bitcast i32 %600 to float, !dbg !91
  %602 = fcmp olt float %599, %601, !dbg !93
  %603 = fcmp uno float %599, 0.000000e+00, !dbg !96
  %604 = or i1 %603, %602, !dbg !94
  %605 = select i1 %604, float %599, float %601, !dbg !95
  %606 = bitcast float %605 to i32, !dbg !91
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 4, i32 31), !dbg !91
  %608 = bitcast i32 %607 to float, !dbg !91
  %609 = fcmp olt float %605, %608, !dbg !93
  %610 = fcmp uno float %605, 0.000000e+00, !dbg !96
  %611 = or i1 %609, %610, !dbg !94
  %612 = select i1 %611, float %605, float %608, !dbg !95
  %613 = bitcast float %612 to i32, !dbg !91
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 2, i32 31), !dbg !91
  %615 = bitcast i32 %614 to float, !dbg !91
  %616 = fcmp olt float %612, %615, !dbg !93
  %617 = fcmp uno float %612, 0.000000e+00, !dbg !96
  %618 = or i1 %616, %617, !dbg !94
  %619 = select i1 %618, float %612, float %615, !dbg !95
  %620 = bitcast float %619 to i32, !dbg !91
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 1, i32 31), !dbg !91
  %622 = bitcast i32 %621 to float, !dbg !91
  %623 = fcmp olt float %619, %622, !dbg !93
  %624 = fcmp uno float %619, 0.000000e+00, !dbg !96
  %625 = or i1 %623, %624, !dbg !94
  %626 = select i1 %625, i32 %620, i32 %621, !dbg !95
  %627 = insertelement <1 x i32> poison, i32 %626, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %627, i1 %344) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %628 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %629 = extractelement <4 x float> %542, i64 0, !dbg !99
  %630 = extractelement <4 x float> %542, i64 1, !dbg !99
  %631 = fcmp ogt float %629, %630, !dbg !99
  %632 = fcmp uno float %629, 0.000000e+00, !dbg !100
  %633 = or i1 %631, %632, !dbg !101
  %634 = select i1 %633, float %629, float %630, !dbg !102
  %635 = extractelement <4 x float> %542, i64 2, !dbg !99
  %636 = fcmp ogt float %634, %635, !dbg !99
  %637 = fcmp uno float %634, 0.000000e+00, !dbg !100
  %638 = or i1 %636, %637, !dbg !101
  %639 = select i1 %638, float %634, float %635, !dbg !102
  %640 = extractelement <4 x float> %542, i64 3, !dbg !99
  %641 = fcmp ogt float %639, %640, !dbg !99
  %642 = fcmp uno float %639, 0.000000e+00, !dbg !100
  %643 = or i1 %641, %642, !dbg !101
  %644 = select i1 %643, float %639, float %640, !dbg !102
  %645 = bitcast float %644 to i32, !dbg !97
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 16, i32 31), !dbg !97
  %647 = bitcast i32 %646 to float, !dbg !97
  %648 = fcmp ogt float %644, %647, !dbg !99
  %649 = fcmp uno float %644, 0.000000e+00, !dbg !100
  %650 = or i1 %649, %648, !dbg !101
  %651 = select i1 %650, float %644, float %647, !dbg !102
  %652 = bitcast float %651 to i32, !dbg !97
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 8, i32 31), !dbg !97
  %654 = bitcast i32 %653 to float, !dbg !97
  %655 = fcmp ogt float %651, %654, !dbg !99
  %656 = fcmp uno float %651, 0.000000e+00, !dbg !100
  %657 = or i1 %655, %656, !dbg !101
  %658 = select i1 %657, float %651, float %654, !dbg !102
  %659 = bitcast float %658 to i32, !dbg !97
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !97
  %661 = bitcast i32 %660 to float, !dbg !97
  %662 = fcmp ogt float %658, %661, !dbg !99
  %663 = fcmp uno float %658, 0.000000e+00, !dbg !100
  %664 = or i1 %662, %663, !dbg !101
  %665 = select i1 %664, float %658, float %661, !dbg !102
  %666 = bitcast float %665 to i32, !dbg !97
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 2, i32 31), !dbg !97
  %668 = bitcast i32 %667 to float, !dbg !97
  %669 = fcmp ogt float %665, %668, !dbg !99
  %670 = fcmp uno float %665, 0.000000e+00, !dbg !100
  %671 = or i1 %669, %670, !dbg !101
  %672 = select i1 %671, float %665, float %668, !dbg !102
  %673 = bitcast float %672 to i32, !dbg !97
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 1, i32 31), !dbg !97
  %675 = bitcast i32 %674 to float, !dbg !97
  %676 = fcmp ogt float %672, %675, !dbg !99
  %677 = fcmp uno float %672, 0.000000e+00, !dbg !100
  %678 = or i1 %676, %677, !dbg !101
  %679 = select i1 %678, i32 %673, i32 %674, !dbg !102
  %680 = insertelement <1 x i32> poison, i32 %679, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %680, i1 %244) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %681 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %251) #5, !dbg !97
  %682 = bitcast i32 %681 to float, !dbg !97
  %683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 8, i32 31), !dbg !97
  %684 = bitcast i32 %683 to float, !dbg !97
  %685 = fcmp ogt float %682, %684, !dbg !99
  %686 = fcmp uno float %682, 0.000000e+00, !dbg !100
  %687 = or i1 %686, %685, !dbg !101
  %688 = select i1 %687, float %682, float %684, !dbg !102
  %689 = bitcast float %688 to i32, !dbg !97
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 4, i32 31), !dbg !97
  %691 = bitcast i32 %690 to float, !dbg !97
  %692 = fcmp ogt float %688, %691, !dbg !99
  %693 = fcmp uno float %688, 0.000000e+00, !dbg !100
  %694 = or i1 %692, %693, !dbg !101
  %695 = select i1 %694, float %688, float %691, !dbg !102
  %696 = bitcast float %695 to i32, !dbg !97
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 2, i32 31), !dbg !97
  %698 = bitcast i32 %697 to float, !dbg !97
  %699 = fcmp ogt float %695, %698, !dbg !99
  %700 = fcmp uno float %695, 0.000000e+00, !dbg !100
  %701 = or i1 %699, %700, !dbg !101
  %702 = select i1 %701, float %695, float %698, !dbg !102
  %703 = bitcast float %702 to i32, !dbg !97
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 1, i32 31), !dbg !97
  %705 = bitcast i32 %704 to float, !dbg !97
  %706 = fcmp ogt float %702, %705, !dbg !99
  %707 = fcmp uno float %702, 0.000000e+00, !dbg !100
  %708 = or i1 %706, %707, !dbg !101
  %709 = select i1 %708, i32 %703, i32 %704, !dbg !102
  %710 = insertelement <1 x i32> poison, i32 %709, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %710, i1 %344) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %711 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %712 = sext i32 %16 to i64, !dbg !103
  %713 = getelementptr bfloat, ptr addrspace(1) %4, i64 %712, !dbg !103
  %714 = fptrunc float %628 to bfloat, !dbg !104
  %715 = and i32 %18, 511, !dbg !104
  %716 = icmp eq i32 %715, 0, !dbg !104
  %717 = bitcast bfloat %714 to i16, !dbg !104
  %718 = and i1 %17, %716, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %717, ptr addrspace(1) %713, i1 %718) #5, !dbg !104
  %719 = getelementptr bfloat, ptr addrspace(1) %5, i64 %712, !dbg !105
  %720 = fptrunc float %711 to bfloat, !dbg !106
  %721 = bitcast bfloat %720 to i16, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %721, ptr addrspace(1) %719, i1 %718) #5, !dbg !106
  %722 = getelementptr bfloat, ptr addrspace(1) %6, i64 %712, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %717, ptr addrspace(1) %722, i1 %718) #5, !dbg !108
  %723 = getelementptr bfloat, ptr addrspace(1) %7, i64 %712, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %721, ptr addrspace(1) %723, i1 %718) #5, !dbg !110
  %724 = getelementptr bfloat, ptr addrspace(1) %8, i64 %712, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %717, ptr addrspace(1) %724, i1 %718) #5, !dbg !112
  %725 = getelementptr bfloat, ptr addrspace(1) %9, i64 %712, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %721, ptr addrspace(1) %725, i1 %718) #5, !dbg !114
  %.inv = fcmp oge float %628, 0.000000e+00, !dbg !115
  %726 = select i1 %.inv, float 0.000000e+00, float %628, !dbg !115
  %727 = fsub float 0.000000e+00, %726, !dbg !117
  %.inv3 = fcmp ole float %711, 0.000000e+00, !dbg !118
  %728 = select i1 %.inv3, float 0.000000e+00, float %711, !dbg !118
  %729 = fcmp ogt float %727, %728, !dbg !120
  %730 = fcmp uno float %727, 0.000000e+00, !dbg !122
  %731 = or i1 %730, %729, !dbg !123
  %732 = select i1 %731, float %727, float %728, !dbg !124
  %733 = fmul float %732, 0x3F80204080000000, !dbg !125
  %734 = fcmp ogt float %733, 0x3EE4F8B580000000, !dbg !126
  %735 = fcmp uno float %733, 0.000000e+00, !dbg !128
  %736 = or i1 %734, %735, !dbg !129
  %737 = select i1 %736, float %733, float 0x3EE4F8B580000000, !dbg !130
  %738 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %737), !dbg !131
  %739 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !132
  %740 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %739, i1 %17) #5, !dbg !133
  %741 = extractvalue { i32, i32 } %740, 0, !dbg !133
  %742 = bitcast i32 %741 to <2 x bfloat>, !dbg !133
  %743 = extractvalue { i32, i32 } %740, 1, !dbg !133
  %744 = bitcast i32 %743 to <2 x bfloat>, !dbg !133
  %745 = extractelement <2 x bfloat> %742, i64 0, !dbg !133
  %746 = extractelement <2 x bfloat> %742, i64 1, !dbg !133
  %747 = extractelement <2 x bfloat> %744, i64 0, !dbg !133
  %748 = extractelement <2 x bfloat> %744, i64 1, !dbg !133
  %749 = fpext bfloat %745 to float, !dbg !134
  %750 = fpext bfloat %746 to float, !dbg !134
  %751 = fpext bfloat %747 to float, !dbg !134
  %752 = fpext bfloat %748 to float, !dbg !134
  %753 = fmul float %738, %749, !dbg !135
  %754 = fmul float %738, %750, !dbg !135
  %755 = fmul float %738, %751, !dbg !135
  %756 = fmul float %738, %752, !dbg !135
  %757 = tail call float @llvm.nvvm.round.f(float %753) #5, !dbg !136
  %758 = tail call float @llvm.nvvm.round.f(float %754) #5, !dbg !136
  %759 = tail call float @llvm.nvvm.round.f(float %755) #5, !dbg !136
  %760 = tail call float @llvm.nvvm.round.f(float %756) #5, !dbg !136
  %761 = insertelement <4 x float> poison, float %757, i64 0, !dbg !137
  %762 = insertelement <4 x float> %761, float %758, i64 1, !dbg !137
  %763 = insertelement <4 x float> %762, float %759, i64 2, !dbg !137
  %764 = insertelement <4 x float> %763, float %760, i64 3, !dbg !137
  %765 = fcmp ogt <4 x float> %764, splat (float -1.270000e+02), !dbg !137
  %766 = fcmp uno <4 x float> %764, zeroinitializer, !dbg !139
  %767 = or <4 x i1> %765, %766, !dbg !140
  %768 = select <4 x i1> %767, <4 x float> %764, <4 x float> splat (float -1.270000e+02), !dbg !141
  %769 = fcmp olt <4 x float> %768, splat (float 1.270000e+02), !dbg !142
  %770 = fcmp uno <4 x float> %768, zeroinitializer, !dbg !144
  %771 = or <4 x i1> %769, %770, !dbg !145
  %772 = fptosi <4 x float> %768 to <4 x i8>, !dbg !146
  %773 = select <4 x i1> %771, <4 x i8> %772, <4 x i8> splat (i8 127), !dbg !147
  %774 = getelementptr i8, ptr addrspace(1) %10, i64 %25, !dbg !148
  %775 = bitcast <4 x i8> %773 to i32, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %775, ptr addrspace(1) %774, i1 %17) #5, !dbg !149
  %776 = getelementptr i8, ptr addrspace(1) %11, i64 %25, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %775, ptr addrspace(1) %776, i1 %17) #5, !dbg !151
  %777 = getelementptr i8, ptr addrspace(1) %12, i64 %25, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %775, ptr addrspace(1) %777, i1 %17) #5, !dbg !153
  %778 = getelementptr bfloat, ptr addrspace(1) %3, i64 %49, !dbg !132
  %779 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %778, i1 %51) #5, !dbg !133
  %780 = extractvalue { i32, i32 } %779, 0, !dbg !133
  %781 = bitcast i32 %780 to <2 x bfloat>, !dbg !133
  %782 = extractvalue { i32, i32 } %779, 1, !dbg !133
  %783 = bitcast i32 %782 to <2 x bfloat>, !dbg !133
  %784 = extractelement <2 x bfloat> %781, i64 0, !dbg !133
  %785 = extractelement <2 x bfloat> %781, i64 1, !dbg !133
  %786 = extractelement <2 x bfloat> %783, i64 0, !dbg !133
  %787 = extractelement <2 x bfloat> %783, i64 1, !dbg !133
  %788 = fpext bfloat %784 to float, !dbg !134
  %789 = fpext bfloat %785 to float, !dbg !134
  %790 = fpext bfloat %786 to float, !dbg !134
  %791 = fpext bfloat %787 to float, !dbg !134
  %792 = fmul float %738, %788, !dbg !135
  %793 = fmul float %738, %789, !dbg !135
  %794 = fmul float %738, %790, !dbg !135
  %795 = fmul float %738, %791, !dbg !135
  %796 = tail call float @llvm.nvvm.round.f(float %792) #5, !dbg !136
  %797 = tail call float @llvm.nvvm.round.f(float %793) #5, !dbg !136
  %798 = tail call float @llvm.nvvm.round.f(float %794) #5, !dbg !136
  %799 = tail call float @llvm.nvvm.round.f(float %795) #5, !dbg !136
  %800 = insertelement <4 x float> poison, float %796, i64 0, !dbg !137
  %801 = insertelement <4 x float> %800, float %797, i64 1, !dbg !137
  %802 = insertelement <4 x float> %801, float %798, i64 2, !dbg !137
  %803 = insertelement <4 x float> %802, float %799, i64 3, !dbg !137
  %804 = fcmp ogt <4 x float> %803, splat (float -1.270000e+02), !dbg !137
  %805 = fcmp uno <4 x float> %803, zeroinitializer, !dbg !139
  %806 = or <4 x i1> %804, %805, !dbg !140
  %807 = select <4 x i1> %806, <4 x float> %803, <4 x float> splat (float -1.270000e+02), !dbg !141
  %808 = fcmp olt <4 x float> %807, splat (float 1.270000e+02), !dbg !142
  %809 = fcmp uno <4 x float> %807, zeroinitializer, !dbg !144
  %810 = or <4 x i1> %808, %809, !dbg !145
  %811 = fptosi <4 x float> %807 to <4 x i8>, !dbg !146
  %812 = select <4 x i1> %810, <4 x i8> %811, <4 x i8> splat (i8 127), !dbg !147
  %813 = getelementptr i8, ptr addrspace(1) %10, i64 %49, !dbg !148
  %814 = bitcast <4 x i8> %812 to i32, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %814, ptr addrspace(1) %813, i1 %51) #5, !dbg !149
  %815 = getelementptr i8, ptr addrspace(1) %11, i64 %49, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %814, ptr addrspace(1) %815, i1 %51) #5, !dbg !151
  %816 = getelementptr i8, ptr addrspace(1) %12, i64 %49, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %814, ptr addrspace(1) %816, i1 %51) #5, !dbg !153
  ret void, !dbg !154
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnq5kypkxynbedcqliharabokygizohwfifu2kgtra4bb5nhr3nw.py", directory: "/tmp/torchinductor_root/nq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 59, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = !DILocation(line: 217, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 47, column: 79, scope: !6)
!37 = !DILocation(line: 218, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 219, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 219, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 219, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 221, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 221, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 222, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 222, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 222, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 222, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 222, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !36)
!49 = !DILocation(line: 67, column: 24, scope: !6)
!50 = !DILocation(line: 69, column: 24, scope: !6)
!51 = !DILocation(line: 70, column: 32, scope: !6)
!52 = !DILocation(line: 65, column: 24, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 41, scope: !6)
!55 = !DILocation(line: 59, column: 34, scope: !6)
!56 = !DILocation(line: 59, column: 51, scope: !6)
!57 = !DILocation(line: 60, column: 42, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 49, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 49, scope: !6)
!62 = !DILocation(line: 62, column: 35, scope: !6)
!63 = !DILocation(line: 62, column: 42, scope: !6)
!64 = !DILocation(line: 63, column: 35, scope: !6)
!65 = !DILocation(line: 63, column: 42, scope: !6)
!66 = !DILocation(line: 59, column: 113, scope: !6)
!67 = !DILocation(line: 61, column: 102, scope: !6)
!68 = !DILocation(line: 63, column: 95, scope: !6)
!69 = !DILocation(line: 74, column: 24, scope: !6)
!70 = !DILocation(line: 76, column: 24, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 79, column: 24, scope: !6)
!73 = !DILocation(line: 80, column: 24, scope: !6)
!74 = !DILocation(line: 83, column: 50, scope: !6)
!75 = !DILocation(line: 85, column: 50, scope: !6)
!76 = !DILocation(line: 86, column: 29, scope: !6)
!77 = !DILocation(line: 86, column: 53, scope: !6)
!78 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !79)
!79 = !DILocation(line: 82, column: 47, scope: !6)
!80 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !81)
!81 = !DILocation(line: 84, column: 47, scope: !6)
!82 = !DILocation(line: 54, column: 31, scope: !6)
!83 = !DILocation(line: 55, column: 29, scope: !6)
!84 = !DILocation(line: 59, column: 59, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !79)
!86 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !79)
!87 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !79)
!88 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !81)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !81)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !81)
!91 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 87, column: 40, scope: !6)
!93 = !DILocation(line: 94, column: 15, scope: !35, inlinedAt: !92)
!94 = !DILocation(line: 96, column: 16, scope: !35, inlinedAt: !92)
!95 = !DILocation(line: 97, column: 29, scope: !35, inlinedAt: !92)
!96 = !DILocation(line: 96, column: 21, scope: !35, inlinedAt: !92)
!97 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !98)
!98 = !DILocation(line: 88, column: 40, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !35, inlinedAt: !98)
!100 = !DILocation(line: 104, column: 21, scope: !35, inlinedAt: !98)
!101 = !DILocation(line: 104, column: 16, scope: !35, inlinedAt: !98)
!102 = !DILocation(line: 105, column: 29, scope: !35, inlinedAt: !98)
!103 = !DILocation(line: 89, column: 25, scope: !6)
!104 = !DILocation(line: 89, column: 37, scope: !6)
!105 = !DILocation(line: 90, column: 25, scope: !6)
!106 = !DILocation(line: 90, column: 37, scope: !6)
!107 = !DILocation(line: 91, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 37, scope: !6)
!109 = !DILocation(line: 92, column: 25, scope: !6)
!110 = !DILocation(line: 92, column: 37, scope: !6)
!111 = !DILocation(line: 93, column: 25, scope: !6)
!112 = !DILocation(line: 93, column: 37, scope: !6)
!113 = !DILocation(line: 94, column: 25, scope: !6)
!114 = !DILocation(line: 94, column: 37, scope: !6)
!115 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !116)
!116 = !DILocation(line: 103, column: 46, scope: !6)
!117 = !DILocation(line: 104, column: 17, scope: !6)
!118 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !119)
!119 = !DILocation(line: 105, column: 46, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 106, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !121)
!125 = !DILocation(line: 108, column: 24, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !127)
!127 = !DILocation(line: 111, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !127)
!131 = !DILocation(line: 114, column: 25, scope: !6)
!132 = !DILocation(line: 101, column: 36, scope: !6)
!133 = !DILocation(line: 101, column: 53, scope: !6)
!134 = !DILocation(line: 101, column: 115, scope: !6)
!135 = !DILocation(line: 117, column: 24, scope: !6)
!136 = !DILocation(line: 118, column: 36, scope: !6)
!137 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !138)
!138 = !DILocation(line: 121, column: 46, scope: !6)
!139 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !138)
!140 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !138)
!141 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !138)
!142 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !143)
!143 = !DILocation(line: 123, column: 46, scope: !6)
!144 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !143)
!145 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !143)
!146 = !DILocation(line: 125, column: 25, scope: !6)
!147 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !143)
!148 = !DILocation(line: 126, column: 29, scope: !6)
!149 = !DILocation(line: 126, column: 53, scope: !6)
!150 = !DILocation(line: 127, column: 30, scope: !6)
!151 = !DILocation(line: 127, column: 54, scope: !6)
!152 = !DILocation(line: 128, column: 30, scope: !6)
!153 = !DILocation(line: 128, column: 54, scope: !6)
!154 = !DILocation(line: 95, column: 4, scope: !6)
