; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !10 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = lshr i32 %11, 5, !dbg !13
  %13 = lshr i32 %11, 6, !dbg !13
  %14 = and i32 %13, 7, !dbg !13
  %15 = or disjoint i32 %14, %10, !dbg !14
  %16 = or disjoint i32 %10, 2, !dbg !14
  %17 = or disjoint i32 %10, 4, !dbg !14
  %18 = or disjoint i32 %10, 6, !dbg !14
  %19 = icmp slt i32 %15, 512, !dbg !15
  %20 = icmp slt i32 %10, 512, !dbg !15
  %21 = and i32 %11, 31, !dbg !16
  %22 = shl i32 %11, 3, !dbg !16
  %23 = and i32 %22, 504, !dbg !16
  %24 = and i32 %11, 511, !dbg !16
  %25 = sext i32 %15 to i64, !dbg !17
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %10 to i64, !dbg !17
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = sext i32 %16 to i64, !dbg !17
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = sext i32 %17 to i64, !dbg !17
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = sext i32 %18 to i64, !dbg !17
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %19) #6, !dbg !18
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 %20) #6, !dbg !18
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !18
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !18
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 %20) #6, !dbg !18
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !18
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !18
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 %20) #6, !dbg !18
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !18
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !18
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 %20) #6, !dbg !18
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !18
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !18
  %55 = shl i32 %15, 12, !dbg !19
  %56 = icmp slt i64 %42, 0, !dbg !20
  %57 = insertelement <8 x i64> poison, i64 %54, i64 0, !dbg !21
  %58 = insertelement <8 x i64> %57, i64 %53, i64 1, !dbg !21
  %59 = insertelement <8 x i64> %58, i64 %51, i64 2, !dbg !21
  %60 = insertelement <8 x i64> %59, i64 %50, i64 3, !dbg !21
  %61 = insertelement <8 x i64> %60, i64 %48, i64 4, !dbg !21
  %62 = insertelement <8 x i64> %61, i64 %47, i64 5, !dbg !21
  %63 = insertelement <8 x i64> %62, i64 %45, i64 6, !dbg !21
  %64 = insertelement <8 x i64> %63, i64 %44, i64 7, !dbg !21
  %65 = add <8 x i64> %64, splat (i64 32128), !dbg !21
  %66 = icmp slt <8 x i64> %64, zeroinitializer, !dbg !20
  %67 = select <8 x i1> %66, <8 x i64> %65, <8 x i64> %64, !dbg !22
  %68 = icmp ult <8 x i64> %67, splat (i64 32128), !dbg !23
  %69 = xor i1 %20, true, !dbg !24
  %70 = shl i64 %42, 12, !dbg !25
  %71 = add i64 %70, 131596288, !dbg !25
  %72 = select i1 %56, i64 %71, i64 %70, !dbg !25
  %invariant.op = or disjoint i32 %23, %55, !dbg !26
  %73 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %74 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %75 = and <8 x i1> %73, %74, !dbg !26
  %76 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %77 = and <8 x i1> %75, %76, !dbg !26
  %78 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %79 = and <8 x i1> %77, %78, !dbg !26
  %80 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %shift91 = and <8 x i1> %79, %80, !dbg !26
  %shift92 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %81 = and <8 x i1> %shift91, %shift92
  %shift93 = shufflevector <8 x i1> %68, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %82 = and <8 x i1> %81, %shift93
  %83 = and <8 x i1> %82, %68
  %84 = extractelement <8 x i1> %83, i64 0
  %.demorgan22.reass = or i1 %84, %69
  %85 = zext nneg i32 %23 to i64, !dbg !26
  %invariant.op77 = or disjoint i64 %72, %85, !dbg !26
  %86 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !27
  %87 = shufflevector <8 x i1> %86, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !27
  br label %88, !dbg !26

88:                                               ; preds = %8, %95
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %95 ]
  %89 = phi <8 x float> [ zeroinitializer, %8 ], [ %137, %95 ]
  %90 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %90
  %91 = sext i32 %.reass to i64, !dbg !28
  %92 = getelementptr bfloat, ptr addrspace(1) %2, i64 %91, !dbg !28
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i1 %19) #6, !dbg !29
  br i1 %.demorgan22.reass, label %95, label %94, !dbg !30

94:                                               ; preds = %88
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !30
  unreachable, !dbg !30

95:                                               ; preds = %88
  %96 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !29
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !29
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !29
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !29
  %100 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !29
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !29
  %102 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !29
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.reass78 = or i64 %indvars.iv, %invariant.op77
  %104 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass78, !dbg !31
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %104, i1 %19) #6, !dbg !32
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !32
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !32
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !32
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !32
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !32
  %114 = shufflevector <2 x bfloat> %103, <2 x bfloat> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %115 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %116 = shufflevector <8 x bfloat> %114, <8 x bfloat> %115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !33
  %117 = shufflevector <2 x bfloat> %99, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %118 = shufflevector <8 x bfloat> %116, <8 x bfloat> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !33
  %119 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %120 = shufflevector <8 x bfloat> %118, <8 x bfloat> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !33
  %121 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %122 = shufflevector <8 x bfloat> %120, <8 x bfloat> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !33
  %123 = fpext <8 x bfloat> %122 to <8 x float>, !dbg !33
  %124 = shufflevector <2 x bfloat> %107, <2 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %125 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %126 = shufflevector <8 x bfloat> %124, <8 x bfloat> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !34
  %127 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %128 = shufflevector <8 x bfloat> %126, <8 x bfloat> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !34
  %129 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %130 = shufflevector <8 x bfloat> %128, <8 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !34
  %131 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %132 = shufflevector <8 x bfloat> %130, <8 x bfloat> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !34
  %133 = fpext <8 x bfloat> %132 to <8 x float>, !dbg !34
  %134 = fadd <8 x float> %123, %133, !dbg !35
  %135 = fmul <8 x float> %134, %134, !dbg !36
  %136 = fadd <8 x float> %89, %135, !dbg !37
  %137 = select <8 x i1> %87, <8 x float> %136, <8 x float> %89, !dbg !27
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !26
  %138 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !26
  br i1 %138, label %88, label %__nv_rsqrtf.exit, !dbg !26

__nv_rsqrtf.exit:                                 ; preds = %95
  %shift94 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %139 = fadd <8 x float> %137, %shift94, !dbg !38
  %shift95 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %140 = fadd <8 x float> %shift95, %139, !dbg !38
  %shift96 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %141 = fadd <8 x float> %shift96, %140, !dbg !38
  %shift97 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %142 = fadd <8 x float> %shift97, %141, !dbg !38
  %shift98 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %143 = fadd <8 x float> %shift98, %142, !dbg !38
  %shift99 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %144 = fadd <8 x float> %shift99, %143, !dbg !38
  %shift100 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %145 = fadd <8 x float> %shift100, %144, !dbg !38
  %146 = extractelement <8 x float> %145, i64 0, !dbg !38
  %147 = bitcast float %146 to i32, !dbg !43
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = fadd float %146, %149, !dbg !38
  %151 = bitcast float %150 to i32, !dbg !43
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = fadd float %150, %153, !dbg !38
  %155 = bitcast float %154 to i32, !dbg !43
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = fadd float %154, %157, !dbg !38
  %159 = bitcast float %158 to i32, !dbg !43
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = fadd float %158, %161, !dbg !38
  %163 = bitcast float %162 to i32, !dbg !43
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = fadd float %162, %165, !dbg !38
  %167 = and i32 %12, 1, !dbg !43
  %168 = icmp eq i32 %21, 0, !dbg !43
  %169 = shl nuw nsw i32 %14, 1, !dbg !43
  %170 = or disjoint i32 %169, %167, !dbg !43
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170, !dbg !43
  %172 = bitcast float %166 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 %168) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %173 = icmp slt i32 %11, 16, !dbg !43
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !43
  %175 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %174, i1 %173) #6, !dbg !43
  %176 = bitcast i32 %175 to float, !dbg !43
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !43
  %178 = bitcast i32 %177 to float, !dbg !43
  %179 = fadd float %176, %178, !dbg !38
  %180 = and i32 %11, 1, !dbg !43
  %181 = icmp eq i32 %180, 0, !dbg !43
  %182 = and i1 %173, %181, !dbg !43
  %183 = bitcast float %179 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %183, i1 %182) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !43
  %185 = load float, ptr addrspace(3) %184, align 8, !dbg !43
  %186 = tail call float @llvm.nvvm.div.full(float %185, float 4.096000e+03), !dbg !44
  %187 = fadd float %186, 0x3EB0C6F7A0000000, !dbg !45
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %.not.i41 = icmp eq i32 %195, 0, !dbg !46
  br i1 %.not.i41, label %198, label %196, !dbg !46

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !46
  br label %__nv_rsqrtf.exit43, !dbg !46

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !46
  br label %__nv_rsqrtf.exit43, !dbg !46

__nv_rsqrtf.exit43:                               ; preds = %196, %198
  %.0.i42 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !46
  %200 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %201 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23
  %202 = or disjoint i32 %23, 4
  %203 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %202
  %204 = zext nneg i32 %24 to i64, !dbg !47
  %invariant.op79 = or disjoint i64 %72, %85, !dbg !47
  %205 = getelementptr inbounds nuw i8, ptr addrspace(3) %201, i32 8
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %203, i32 8
  %207 = insertelement <2 x float> poison, float %.0.i42, i64 0, !dbg !48
  %208 = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  br label %209, !dbg !47

209:                                              ; preds = %209, %__nv_rsqrtf.exit43
  %indvars.iv64 = phi i64 [ 0, %__nv_rsqrtf.exit43 ], [ %indvars.iv.next65, %209 ]
  %210 = or disjoint i64 %indvars.iv64, %204, !dbg !49
  %211 = getelementptr bfloat, ptr addrspace(1) %3, i64 %210, !dbg !50
  %212 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %211, i1 true) #6, !dbg !51
  %213 = trunc nuw nsw i64 %indvars.iv64 to i32
  %.reass51 = or i32 %invariant.op, %213
  %214 = sext i32 %.reass51 to i64, !dbg !52
  %215 = getelementptr bfloat, ptr addrspace(1) %2, i64 %214, !dbg !52
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %215, i1 %19) #6, !dbg !53
  %217 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !53
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !53
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !53
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !53
  %221 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !53
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !53
  %223 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !53
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !53
  %225 = bitcast i16 %212 to bfloat, !dbg !51
  %226 = fpext bfloat %225 to float, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.reass80 = or i64 %indvars.iv64, %invariant.op79
  %227 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass80, !dbg !56
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %227, i1 %19) #6, !dbg !57
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !57
  %230 = bitcast i32 %229 to <2 x bfloat>, !dbg !57
  %231 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !57
  %232 = bitcast i32 %231 to <2 x bfloat>, !dbg !57
  %233 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !57
  %234 = bitcast i32 %233 to <2 x bfloat>, !dbg !57
  %235 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !57
  %236 = bitcast i32 %235 to <2 x bfloat>, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %237 = bitcast float %226 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %237, i1 true) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %238 = getelementptr bfloat, ptr addrspace(1) %4, i64 %214, !dbg !59
  %239 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !60
  %240 = fpext <2 x bfloat> %230 to <2 x float>, !dbg !61
  %241 = fadd <2 x float> %239, %240, !dbg !62
  %242 = fmul <2 x float> %208, %241, !dbg !48
  %243 = load <2 x float>, ptr addrspace(3) %201, align 16, !dbg !58
  %244 = fmul <2 x float> %243, %242, !dbg !58
  %245 = fptrunc <2 x float> %244 to <2 x bfloat>, !dbg !63
  %246 = fpext <2 x bfloat> %222 to <2 x float>, !dbg !60
  %247 = fpext <2 x bfloat> %232 to <2 x float>, !dbg !61
  %248 = fadd <2 x float> %246, %247, !dbg !62
  %249 = fmul <2 x float> %208, %248, !dbg !48
  %250 = load <2 x float>, ptr addrspace(3) %205, align 8, !dbg !58
  %251 = fmul <2 x float> %250, %249, !dbg !58
  %252 = fptrunc <2 x float> %251 to <2 x bfloat>, !dbg !63
  %253 = fpext <2 x bfloat> %220 to <2 x float>, !dbg !60
  %254 = fpext <2 x bfloat> %234 to <2 x float>, !dbg !61
  %255 = fadd <2 x float> %253, %254, !dbg !62
  %256 = fmul <2 x float> %208, %255, !dbg !48
  %257 = load <2 x float>, ptr addrspace(3) %203, align 16, !dbg !58
  %258 = fmul <2 x float> %257, %256, !dbg !58
  %259 = fptrunc <2 x float> %258 to <2 x bfloat>, !dbg !63
  %260 = fpext <2 x bfloat> %218 to <2 x float>, !dbg !60
  %261 = fpext <2 x bfloat> %236 to <2 x float>, !dbg !61
  %262 = fadd <2 x float> %260, %261, !dbg !62
  %263 = fmul <2 x float> %208, %262, !dbg !48
  %264 = load <2 x float>, ptr addrspace(3) %206, align 8, !dbg !58
  %265 = fmul <2 x float> %264, %263, !dbg !58
  %266 = fptrunc <2 x float> %265 to <2 x bfloat>, !dbg !63
  %267 = bitcast <2 x bfloat> %245 to i32, !dbg !63
  %268 = bitcast <2 x bfloat> %252 to i32, !dbg !63
  %269 = bitcast <2 x bfloat> %259 to i32, !dbg !63
  %270 = bitcast <2 x bfloat> %266 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %238, i1 %19) #6, !dbg !63
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 512, !dbg !47
  %271 = icmp samesign ult i64 %indvars.iv64, 3584, !dbg !47
  br i1 %271, label %209, label %272, !dbg !47

272:                                              ; preds = %209
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 40, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 22, scope: !10)
!22 = !DILocation(line: 41, column: 36, scope: !10)
!23 = !DILocation(line: 42, column: 41, scope: !10)
!24 = !DILocation(line: 42, column: 60, scope: !10)
!25 = !DILocation(line: 43, column: 46, scope: !10)
!26 = !DILocation(line: 31, column: 40, scope: !10)
!27 = !DILocation(line: 49, column: 50, scope: !10)
!28 = !DILocation(line: 37, column: 34, scope: !10)
!29 = !DILocation(line: 37, column: 51, scope: !10)
!30 = !DILocation(line: 42, column: 68, scope: !10)
!31 = !DILocation(line: 43, column: 34, scope: !10)
!32 = !DILocation(line: 43, column: 53, scope: !10)
!33 = !DILocation(line: 37, column: 112, scope: !10)
!34 = !DILocation(line: 43, column: 114, scope: !10)
!35 = !DILocation(line: 44, column: 22, scope: !10)
!36 = !DILocation(line: 46, column: 23, scope: !10)
!37 = !DILocation(line: 48, column: 25, scope: !10)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !10, file: !40, discriminator: 0)
!42 = !DILocation(line: 50, column: 27, scope: !10)
!43 = !DILocation(line: 286, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 68, column: 25, scope: !10)
!45 = !DILocation(line: 70, column: 24, scope: !10)
!46 = !DILocation(line: 71, column: 32, scope: !10)
!47 = !DILocation(line: 51, column: 40, scope: !10)
!48 = !DILocation(line: 72, column: 24, scope: !10)
!49 = !DILocation(line: 52, column: 31, scope: !10)
!50 = !DILocation(line: 57, column: 35, scope: !10)
!51 = !DILocation(line: 57, column: 42, scope: !10)
!52 = !DILocation(line: 58, column: 35, scope: !10)
!53 = !DILocation(line: 58, column: 52, scope: !10)
!54 = !DILocation(line: 57, column: 95, scope: !10)
!55 = !DILocation(line: 63, column: 70, scope: !10)
!56 = !DILocation(line: 64, column: 35, scope: !10)
!57 = !DILocation(line: 64, column: 55, scope: !10)
!58 = !DILocation(line: 74, column: 24, scope: !10)
!59 = !DILocation(line: 75, column: 29, scope: !10)
!60 = !DILocation(line: 58, column: 114, scope: !10)
!61 = !DILocation(line: 64, column: 117, scope: !10)
!62 = !DILocation(line: 65, column: 24, scope: !10)
!63 = !DILocation(line: 75, column: 53, scope: !10)
!64 = !DILocation(line: 51, column: 4, scope: !10)
