; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 6, !dbg !11
  %14 = and i32 %13, 7, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, 512, !dbg !13
  %17 = shl i32 %12, 3, !dbg !14
  %18 = and i32 %17, 504, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  %21 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !16
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %23, !dbg !17

23:                                               ; preds = %9, %23
  %24 = phi i32 [ 0, %9 ], [ %114, %23 ]
  %25 = phi <8 x float> [ zeroinitializer, %9 ], [ %113, %23 ]
  %26 = or i32 %20, %24, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %16) #5, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !20
  %38 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %16) #5, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !22
  %48 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %16) #5, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !24
  %58 = getelementptr bfloat, ptr addrspace(1) %3, i64 %27, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %16) #5, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !26
  %68 = shufflevector <2 x bfloat> %31, <2 x bfloat> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %69 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %70 = shufflevector <8 x bfloat> %68, <8 x bfloat> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %71 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %72 = shufflevector <8 x bfloat> %70, <8 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %73 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %74 = shufflevector <8 x bfloat> %72, <8 x bfloat> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %75 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %76 = shufflevector <8 x bfloat> %74, <8 x bfloat> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %77 = fpext <8 x bfloat> %76 to <8 x float>, !dbg !27
  %78 = shufflevector <2 x bfloat> %41, <2 x bfloat> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = shufflevector <8 x bfloat> %78, <8 x bfloat> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %82 = shufflevector <8 x bfloat> %80, <8 x bfloat> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %83 = shufflevector <2 x bfloat> %47, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %84 = shufflevector <8 x bfloat> %82, <8 x bfloat> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %85 = shufflevector <2 x bfloat> %47, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %86 = shufflevector <8 x bfloat> %84, <8 x bfloat> %85, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %87 = fpext <8 x bfloat> %86 to <8 x float>, !dbg !28
  %88 = shufflevector <2 x bfloat> %51, <2 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %89 = shufflevector <2 x bfloat> %55, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %90 = shufflevector <8 x bfloat> %88, <8 x bfloat> %89, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %91 = shufflevector <2 x bfloat> %55, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %92 = shufflevector <8 x bfloat> %90, <8 x bfloat> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %93 = shufflevector <2 x bfloat> %57, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %94 = shufflevector <8 x bfloat> %92, <8 x bfloat> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %95 = shufflevector <2 x bfloat> %57, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %96 = shufflevector <8 x bfloat> %94, <8 x bfloat> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %97 = fpext <8 x bfloat> %96 to <8 x float>, !dbg !29
  %98 = shufflevector <2 x bfloat> %61, <2 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %99 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %100 = shufflevector <8 x bfloat> %98, <8 x bfloat> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %101 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %102 = shufflevector <8 x bfloat> %100, <8 x bfloat> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %103 = shufflevector <2 x bfloat> %67, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %104 = shufflevector <8 x bfloat> %102, <8 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %105 = shufflevector <2 x bfloat> %67, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %106 = shufflevector <8 x bfloat> %104, <8 x bfloat> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %107 = fpext <8 x bfloat> %106 to <8 x float>, !dbg !30
  %108 = fadd <8 x float> %77, %87, !dbg !31
  %109 = fadd <8 x float> %108, %97, !dbg !32
  %110 = fadd <8 x float> %109, %107, !dbg !33
  %111 = fmul <8 x float> %110, %110, !dbg !34
  %112 = fadd <8 x float> %25, %111, !dbg !35
  %113 = select <8 x i1> %22, <8 x float> %112, <8 x float> %25, !dbg !16
  %114 = add nuw nsw i32 %24, 512, !dbg !17
  %115 = icmp samesign ult i32 %24, 3584, !dbg !17
  br i1 %115, label %23, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %23
  %116 = lshr i32 %12, 5, !dbg !11
  %117 = and i32 %12, 31, !dbg !14
  %118 = and i32 %12, 511, !dbg !14
  %shift = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %119 = fadd <8 x float> %113, %shift, !dbg !36
  %shift52 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %120 = fadd <8 x float> %shift52, %119, !dbg !36
  %shift53 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %121 = fadd <8 x float> %shift53, %120, !dbg !36
  %shift54 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %122 = fadd <8 x float> %shift54, %121, !dbg !36
  %shift55 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %123 = fadd <8 x float> %shift55, %122, !dbg !36
  %shift56 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %124 = fadd <8 x float> %shift56, %123, !dbg !36
  %shift57 = shufflevector <8 x float> %113, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %125 = fadd <8 x float> %shift57, %124, !dbg !36
  %126 = extractelement <8 x float> %125, i64 0, !dbg !36
  %127 = bitcast float %126 to i32, !dbg !41
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !41
  %129 = bitcast i32 %128 to float, !dbg !41
  %130 = fadd float %126, %129, !dbg !36
  %131 = bitcast float %130 to i32, !dbg !41
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !41
  %133 = bitcast i32 %132 to float, !dbg !41
  %134 = fadd float %130, %133, !dbg !36
  %135 = bitcast float %134 to i32, !dbg !41
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !41
  %137 = bitcast i32 %136 to float, !dbg !41
  %138 = fadd float %134, %137, !dbg !36
  %139 = bitcast float %138 to i32, !dbg !41
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !41
  %141 = bitcast i32 %140 to float, !dbg !41
  %142 = fadd float %138, %141, !dbg !36
  %143 = bitcast float %142 to i32, !dbg !41
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !41
  %145 = bitcast i32 %144 to float, !dbg !41
  %146 = fadd float %142, %145, !dbg !36
  %147 = and i32 %116, 1, !dbg !41
  %148 = icmp eq i32 %117, 0, !dbg !41
  %149 = shl nuw nsw i32 %14, 1, !dbg !41
  %150 = or disjoint i32 %149, %147, !dbg !41
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !41
  %152 = bitcast float %146 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 %148) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %153 = icmp slt i32 %12, 16, !dbg !41
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #5, !dbg !41
  %156 = bitcast i32 %155 to float, !dbg !41
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !41
  %158 = bitcast i32 %157 to float, !dbg !41
  %159 = fadd float %156, %158, !dbg !36
  %160 = and i32 %12, 1, !dbg !41
  %161 = icmp eq i32 %160, 0, !dbg !41
  %162 = and i1 %153, %161, !dbg !41
  %163 = bitcast float %159 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %163, i1 %162) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !41
  %165 = load float, ptr addrspace(3) %164, align 8, !dbg !41
  %166 = tail call float @llvm.nvvm.div.full(float %165, float 4.096000e+03), !dbg !42
  %167 = fadd float %166, 0x3EB0C6F7A0000000, !dbg !43
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i28 = icmp eq i32 %175, 0, !dbg !44
  br i1 %.not.i28, label %178, label %176, !dbg !44

176:                                              ; preds = %__nv_rsqrtf.exit
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

178:                                              ; preds = %__nv_rsqrtf.exit
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

__nv_rsqrtf.exit30:                               ; preds = %176, %178
  %.0.i29 = phi float [ %177, %176 ], [ %179, %178 ], !dbg !44
  %180 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %118
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %182 = or disjoint i32 %18, 4
  %183 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %182
  %184 = zext nneg i32 %118 to i64, !dbg !45
  %185 = getelementptr inbounds nuw i8, ptr addrspace(3) %181, i32 8
  %186 = getelementptr inbounds nuw i8, ptr addrspace(3) %183, i32 8
  %187 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !46
  %188 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %189, !dbg !45

189:                                              ; preds = %__nv_rsqrtf.exit30, %189
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit30 ], [ %indvars.iv.next, %189 ]
  %190 = or disjoint i64 %indvars.iv, %184, !dbg !47
  %191 = getelementptr bfloat, ptr addrspace(1) %4, i64 %190, !dbg !48
  %192 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %191, i1 true) #5, !dbg !49
  %193 = bitcast i16 %192 to bfloat, !dbg !49
  %194 = fpext bfloat %193 to float, !dbg !50
  %195 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !51
  %196 = or i32 %20, %195, !dbg !51
  %197 = sext i32 %196 to i64, !dbg !52
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %197, !dbg !52
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %198, i1 %16) #5, !dbg !53
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !53
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !53
  %202 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !53
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !53
  %204 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !53
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !53
  %206 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !53
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !53
  %208 = getelementptr bfloat, ptr addrspace(1) %1, i64 %197, !dbg !54
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %208, i1 %16) #5, !dbg !55
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !55
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !55
  %212 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !55
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !55
  %214 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !55
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !55
  %216 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !55
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !55
  %218 = getelementptr bfloat, ptr addrspace(1) %2, i64 %197, !dbg !56
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %218, i1 %16) #5, !dbg !57
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !57
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !57
  %222 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !57
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !57
  %224 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !57
  %225 = bitcast i32 %224 to <2 x bfloat>, !dbg !57
  %226 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !57
  %227 = bitcast i32 %226 to <2 x bfloat>, !dbg !57
  %228 = getelementptr bfloat, ptr addrspace(1) %3, i64 %197, !dbg !58
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %228, i1 %16) #5, !dbg !59
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !59
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !59
  %232 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !59
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !59
  %234 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !59
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !59
  %236 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !59
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %238 = bitcast float %194 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %238, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %239 = getelementptr bfloat, ptr addrspace(1) %5, i64 %197, !dbg !61
  %240 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !62
  %241 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !63
  %242 = fpext <2 x bfloat> %221 to <2 x float>, !dbg !64
  %243 = fpext <2 x bfloat> %231 to <2 x float>, !dbg !65
  %244 = fadd <2 x float> %240, %241, !dbg !66
  %245 = fadd <2 x float> %244, %242, !dbg !67
  %246 = fadd <2 x float> %245, %243, !dbg !68
  %247 = fmul <2 x float> %188, %246, !dbg !46
  %248 = load <2 x float>, ptr addrspace(3) %181, align 16, !dbg !60
  %249 = fmul <2 x float> %248, %247, !dbg !60
  %250 = fptrunc <2 x float> %249 to <2 x bfloat>, !dbg !69
  %251 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !62
  %252 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !63
  %253 = fpext <2 x bfloat> %223 to <2 x float>, !dbg !64
  %254 = fpext <2 x bfloat> %233 to <2 x float>, !dbg !65
  %255 = fadd <2 x float> %251, %252, !dbg !66
  %256 = fadd <2 x float> %255, %253, !dbg !67
  %257 = fadd <2 x float> %256, %254, !dbg !68
  %258 = fmul <2 x float> %188, %257, !dbg !46
  %259 = load <2 x float>, ptr addrspace(3) %185, align 8, !dbg !60
  %260 = fmul <2 x float> %259, %258, !dbg !60
  %261 = fptrunc <2 x float> %260 to <2 x bfloat>, !dbg !69
  %262 = fpext <2 x bfloat> %205 to <2 x float>, !dbg !62
  %263 = fpext <2 x bfloat> %215 to <2 x float>, !dbg !63
  %264 = fpext <2 x bfloat> %225 to <2 x float>, !dbg !64
  %265 = fpext <2 x bfloat> %235 to <2 x float>, !dbg !65
  %266 = fadd <2 x float> %262, %263, !dbg !66
  %267 = fadd <2 x float> %266, %264, !dbg !67
  %268 = fadd <2 x float> %267, %265, !dbg !68
  %269 = fmul <2 x float> %188, %268, !dbg !46
  %270 = load <2 x float>, ptr addrspace(3) %183, align 16, !dbg !60
  %271 = fmul <2 x float> %270, %269, !dbg !60
  %272 = fptrunc <2 x float> %271 to <2 x bfloat>, !dbg !69
  %273 = fpext <2 x bfloat> %207 to <2 x float>, !dbg !62
  %274 = fpext <2 x bfloat> %217 to <2 x float>, !dbg !63
  %275 = fpext <2 x bfloat> %227 to <2 x float>, !dbg !64
  %276 = fpext <2 x bfloat> %237 to <2 x float>, !dbg !65
  %277 = fadd <2 x float> %273, %274, !dbg !66
  %278 = fadd <2 x float> %277, %275, !dbg !67
  %279 = fadd <2 x float> %278, %276, !dbg !68
  %280 = fmul <2 x float> %188, %279, !dbg !46
  %281 = load <2 x float>, ptr addrspace(3) %186, align 8, !dbg !60
  %282 = fmul <2 x float> %281, %280, !dbg !60
  %283 = fptrunc <2 x float> %282 to <2 x bfloat>, !dbg !69
  %284 = bitcast <2 x bfloat> %250 to i32, !dbg !69
  %285 = bitcast <2 x bfloat> %261 to i32, !dbg !69
  %286 = bitcast <2 x bfloat> %272 to i32, !dbg !69
  %287 = bitcast <2 x bfloat> %283 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %239, i1 %16) #5, !dbg !69
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !45
  %288 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !45
  br i1 %288, label %189, label %289, !dbg !45

289:                                              ; preds = %189
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4upwsrvkdze6mqedjhebpbnbrqt4kzathlmdnngjhyxujfmagd.py", directory: "/tmp/torchinductor_root/s4")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 47, column: 50, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 34, scope: !6)
!26 = !DILocation(line: 39, column: 51, scope: !6)
!27 = !DILocation(line: 36, column: 112, scope: !6)
!28 = !DILocation(line: 37, column: 112, scope: !6)
!29 = !DILocation(line: 38, column: 112, scope: !6)
!30 = !DILocation(line: 39, column: 112, scope: !6)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 41, column: 22, scope: !6)
!33 = !DILocation(line: 42, column: 22, scope: !6)
!34 = !DILocation(line: 44, column: 22, scope: !6)
!35 = !DILocation(line: 46, column: 25, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!40 = !DILocation(line: 48, column: 27, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 65, column: 25, scope: !6)
!43 = !DILocation(line: 67, column: 24, scope: !6)
!44 = !DILocation(line: 68, column: 32, scope: !6)
!45 = !DILocation(line: 49, column: 40, scope: !6)
!46 = !DILocation(line: 69, column: 24, scope: !6)
!47 = !DILocation(line: 50, column: 31, scope: !6)
!48 = !DILocation(line: 55, column: 35, scope: !6)
!49 = !DILocation(line: 55, column: 42, scope: !6)
!50 = !DILocation(line: 55, column: 95, scope: !6)
!51 = !DILocation(line: 56, column: 42, scope: !6)
!52 = !DILocation(line: 56, column: 35, scope: !6)
!53 = !DILocation(line: 56, column: 52, scope: !6)
!54 = !DILocation(line: 57, column: 35, scope: !6)
!55 = !DILocation(line: 57, column: 52, scope: !6)
!56 = !DILocation(line: 58, column: 35, scope: !6)
!57 = !DILocation(line: 58, column: 52, scope: !6)
!58 = !DILocation(line: 59, column: 35, scope: !6)
!59 = !DILocation(line: 59, column: 52, scope: !6)
!60 = !DILocation(line: 71, column: 24, scope: !6)
!61 = !DILocation(line: 72, column: 29, scope: !6)
!62 = !DILocation(line: 56, column: 114, scope: !6)
!63 = !DILocation(line: 57, column: 114, scope: !6)
!64 = !DILocation(line: 58, column: 114, scope: !6)
!65 = !DILocation(line: 59, column: 114, scope: !6)
!66 = !DILocation(line: 60, column: 24, scope: !6)
!67 = !DILocation(line: 61, column: 24, scope: !6)
!68 = !DILocation(line: 62, column: 24, scope: !6)
!69 = !DILocation(line: 72, column: 53, scope: !6)
!70 = !DILocation(line: 49, column: 4, scope: !6)
