; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/ds/cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !10 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %9 = icmp slt i32 %8, 512, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = shl i32 %10, 2, !dbg !13
  %12 = and i32 %11, 2044, !dbg !13
  %13 = sext i32 %8 to i64, !dbg !14
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %9) #6, !dbg !15
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %9) #6, !dbg !15
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %9) #6, !dbg !15
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %9) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %9) #6, !dbg !15
  %20 = add i64 %19, 32128, !dbg !16
  %21 = icmp slt i64 %18, 0, !dbg !17
  %22 = icmp slt i64 %19, 0, !dbg !17
  %23 = select i1 %22, i64 %20, i64 %19, !dbg !18
  %24 = icmp ugt i64 %23, 32127, !dbg !19
  %.not3 = and i1 %9, %24, !dbg !20
  %25 = shl i64 %18, 12, !dbg !20
  %26 = add i64 %25, 131596288, !dbg !20
  %27 = select i1 %21, i64 %26, i64 %25, !dbg !20
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27
  br i1 %.not3, label %116, label %.split.preheader, !dbg !21

.split.preheader:                                 ; preds = %7
  %29 = lshr i32 %10, 5, !dbg !13
  %30 = and i32 %10, 31, !dbg !13
  %31 = zext nneg i32 %12 to i64, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %32 = getelementptr bfloat, ptr addrspace(1) %28, i64 %31, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %9) #6, !dbg !24
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !24
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !24
  %38 = or disjoint i64 %31, 2048, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %39 = getelementptr bfloat, ptr addrspace(1) %28, i64 %38, !dbg !23
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %39, i1 %9) #6, !dbg !24
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !24
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !24
  %43 = extractvalue { i32, i32 } %40, 1, !dbg !24
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !24
  %45 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !26
  %46 = fmul <2 x float> %45, %45, !dbg !27
  %47 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !26
  %48 = fmul <2 x float> %47, %47, !dbg !27
  %49 = fadd <2 x float> %46, %48, !dbg !28
  %50 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !26
  %51 = fmul <2 x float> %50, %50, !dbg !27
  %52 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !26
  %53 = fmul <2 x float> %52, %52, !dbg !27
  %54 = fadd <2 x float> %51, %53, !dbg !28
  %shift = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %55 = fadd <2 x float> %49, %shift, !dbg !29
  %56 = fadd <2 x float> %54, %55, !dbg !29
  %shift17 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %57 = fadd <2 x float> %shift17, %56, !dbg !29
  %58 = extractelement <2 x float> %57, i64 0, !dbg !29
  %59 = select i1 %9, float %58, float 0.000000e+00, !dbg !29
  %60 = bitcast float %59 to i32, !dbg !34
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = fadd float %59, %62, !dbg !29
  %64 = bitcast float %63 to i32, !dbg !34
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = fadd float %63, %66, !dbg !29
  %68 = bitcast float %67 to i32, !dbg !34
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = fadd float %67, %70, !dbg !29
  %72 = bitcast float %71 to i32, !dbg !34
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = fadd float %71, %74, !dbg !29
  %76 = bitcast float %75 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = fadd float %75, %78, !dbg !29
  %80 = and i32 %29, 15, !dbg !34
  %81 = icmp eq i32 %30, 0, !dbg !34
  %82 = zext nneg i32 %80 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !34
  %84 = bitcast float %79 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %81) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %85 = icmp slt i32 %10, 16, !dbg !34
  %86 = sext i32 %10 to i64, !dbg !34
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !34
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %85) #6, !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !34
  %91 = bitcast i32 %90 to float, !dbg !34
  %92 = fadd float %89, %91, !dbg !29
  %93 = bitcast float %92 to i32, !dbg !34
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = fadd float %92, %95, !dbg !29
  %97 = bitcast float %96 to i32, !dbg !34
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !34
  %99 = bitcast i32 %98 to float, !dbg !34
  %100 = fadd float %96, %99, !dbg !29
  %101 = bitcast float %100 to i32, !dbg !34
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !34
  %103 = bitcast i32 %102 to float, !dbg !34
  %104 = fadd float %100, %103, !dbg !29
  %105 = and i32 %10, 15, !dbg !34
  %106 = icmp eq i32 %105, 0, !dbg !34
  %107 = and i1 %85, %106, !dbg !34
  %108 = bitcast float %104 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %108, i1 %107) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %109 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %110 = tail call float @llvm.nvvm.div.full(float %109, float 4.096000e+03), !dbg !35
  %111 = fadd float %110, 0x3EB0C6F7A0000000, !dbg !36
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i10 = icmp eq i32 %115, 0, !dbg !37
  br i1 %.not.i10, label %119, label %117, !dbg !37

116:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

117:                                              ; preds = %.split.preheader
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !37
  br label %121, !dbg !37

119:                                              ; preds = %.split.preheader
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !37
  br label %121, !dbg !37

121:                                              ; preds = %117, %119
  %.0.i11 = phi float [ %118, %117 ], [ %120, %119 ], !dbg !37
  %122 = shl i32 %8, 12, !dbg !38
  %123 = zext nneg i32 %12 to i64, !dbg !39
  %124 = sext i32 %122 to i64, !dbg !39
  %125 = getelementptr bfloat, ptr addrspace(1) %2, i64 %123, !dbg !40
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %125, i1 true) #6, !dbg !41
  %127 = extractvalue { i32, i32 } %126, 1, !dbg !41
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !41
  %129 = extractvalue { i32, i32 } %126, 0, !dbg !41
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %131 = getelementptr bfloat, ptr addrspace(1) %28, i64 %123, !dbg !43
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %131, i1 %9) #6, !dbg !44
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !44
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !44
  %135 = extractvalue { i32, i32 } %132, 1, !dbg !44
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !44
  %137 = or disjoint i64 %123, %124, !dbg !45
  %138 = getelementptr bfloat, ptr addrspace(1) %3, i64 %137, !dbg !46
  %139 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !47
  %140 = fpext <2 x bfloat> %134 to <2 x float>, !dbg !48
  %141 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !49
  %142 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %143 = fmul <2 x float> %142, %140, !dbg !49
  %144 = fmul <2 x float> %143, %139, !dbg !50
  %145 = fptrunc <2 x float> %144 to <2 x bfloat>, !dbg !51
  %146 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !47
  %147 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !48
  %148 = fmul <2 x float> %142, %147, !dbg !49
  %149 = fmul <2 x float> %148, %146, !dbg !50
  %150 = fptrunc <2 x float> %149 to <2 x bfloat>, !dbg !51
  %151 = bitcast <2 x bfloat> %145 to i32, !dbg !51
  %152 = bitcast <2 x bfloat> %150 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %152, ptr addrspace(1) %138, i1 %9) #6, !dbg !51
  %153 = or disjoint i64 %123, 2048, !dbg !52
  %154 = getelementptr bfloat, ptr addrspace(1) %2, i64 %153, !dbg !40
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %154, i1 true) #6, !dbg !41
  %156 = extractvalue { i32, i32 } %155, 1, !dbg !41
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !41
  %158 = extractvalue { i32, i32 } %155, 0, !dbg !41
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %160 = getelementptr bfloat, ptr addrspace(1) %28, i64 %153, !dbg !43
  %161 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %160, i1 %9) #6, !dbg !44
  %162 = extractvalue { i32, i32 } %161, 0, !dbg !44
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !44
  %164 = extractvalue { i32, i32 } %161, 1, !dbg !44
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !44
  %166 = or disjoint i64 %153, %124, !dbg !45
  %167 = getelementptr bfloat, ptr addrspace(1) %3, i64 %166, !dbg !46
  %168 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !47
  %169 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !48
  %170 = fmul <2 x float> %142, %169, !dbg !49
  %171 = fmul <2 x float> %170, %168, !dbg !50
  %172 = fptrunc <2 x float> %171 to <2 x bfloat>, !dbg !51
  %173 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !47
  %174 = fpext <2 x bfloat> %165 to <2 x float>, !dbg !48
  %175 = fmul <2 x float> %142, %174, !dbg !49
  %176 = fmul <2 x float> %175, %173, !dbg !50
  %177 = fptrunc <2 x float> %176 to <2 x bfloat>, !dbg !51
  %178 = bitcast <2 x bfloat> %172 to i32, !dbg !51
  %179 = bitcast <2 x bfloat> %177 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %167, i1 %9) #6, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py", directory: "/tmp/torchinductor_root/ds")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 25, column: 21, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 29, column: 30, scope: !10)
!15 = !DILocation(line: 29, column: 35, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 22, scope: !10)
!18 = !DILocation(line: 40, column: 36, scope: !10)
!19 = !DILocation(line: 41, column: 41, scope: !10)
!20 = !DILocation(line: 42, column: 46, scope: !10)
!21 = !DILocation(line: 41, column: 68, scope: !10)
!22 = !DILocation(line: 31, column: 40, scope: !10)
!23 = !DILocation(line: 42, column: 34, scope: !10)
!24 = !DILocation(line: 42, column: 53, scope: !10)
!25 = !DILocation(line: 32, column: 31, scope: !10)
!26 = !DILocation(line: 42, column: 114, scope: !10)
!27 = !DILocation(line: 44, column: 22, scope: !10)
!28 = !DILocation(line: 46, column: 25, scope: !10)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !10, file: !31, discriminator: 0)
!33 = !DILocation(line: 48, column: 27, scope: !10)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 64, column: 25, scope: !10)
!36 = !DILocation(line: 66, column: 24, scope: !10)
!37 = !DILocation(line: 67, column: 32, scope: !10)
!38 = !DILocation(line: 71, column: 41, scope: !10)
!39 = !DILocation(line: 49, column: 40, scope: !10)
!40 = !DILocation(line: 55, column: 35, scope: !10)
!41 = !DILocation(line: 55, column: 42, scope: !10)
!42 = !DILocation(line: 60, column: 70, scope: !10)
!43 = !DILocation(line: 61, column: 35, scope: !10)
!44 = !DILocation(line: 61, column: 55, scope: !10)
!45 = !DILocation(line: 71, column: 36, scope: !10)
!46 = !DILocation(line: 71, column: 29, scope: !10)
!47 = !DILocation(line: 55, column: 95, scope: !10)
!48 = !DILocation(line: 61, column: 117, scope: !10)
!49 = !DILocation(line: 68, column: 24, scope: !10)
!50 = !DILocation(line: 70, column: 24, scope: !10)
!51 = !DILocation(line: 71, column: 53, scope: !10)
!52 = !DILocation(line: 50, column: 31, scope: !10)
!53 = !DILocation(line: 49, column: 4, scope: !10)
