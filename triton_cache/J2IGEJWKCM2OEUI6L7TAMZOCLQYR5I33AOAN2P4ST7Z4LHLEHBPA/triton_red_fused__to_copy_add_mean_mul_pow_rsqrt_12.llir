; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 6, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 2, !dbg !11
  %15 = and i32 %14, 63, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, 512, !dbg !13
  %18 = and i32 %13, 3, !dbg !14
  %19 = shl i32 %16, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  br label %21, !dbg !16

21:                                               ; preds = %10, %21
  %22 = phi float [ 0.000000e+00, %10 ], [ %52, %21 ]
  %23 = phi i32 [ 0, %10 ], [ %55, %21 ]
  %24 = or i32 %20, %23, !dbg !17
  %25 = sext i32 %24 to i64, !dbg !18
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %26, i1 %17) #4, !dbg !19
  %28 = bitcast i16 %27 to bfloat, !dbg !19
  %29 = fpext bfloat %28 to float, !dbg !20
  %30 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !21
  %31 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %30, i1 %17) #4, !dbg !22
  %32 = bitcast i16 %31 to bfloat, !dbg !22
  %33 = fpext bfloat %32 to float, !dbg !23
  %34 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !24
  %35 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %34, i1 %17) #4, !dbg !25
  %36 = bitcast i16 %35 to bfloat, !dbg !25
  %37 = fpext bfloat %36 to float, !dbg !26
  %38 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !27
  %39 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %38, i1 %17) #4, !dbg !28
  %40 = bitcast i16 %39 to bfloat, !dbg !28
  %41 = fpext bfloat %40 to float, !dbg !29
  %42 = getelementptr bfloat, ptr addrspace(1) %4, i64 %25, !dbg !30
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 %17) #4, !dbg !31
  %44 = bitcast i16 %43 to bfloat, !dbg !31
  %45 = fpext bfloat %44 to float, !dbg !32
  %46 = fadd float %29, %33, !dbg !33
  %47 = fadd float %46, %37, !dbg !34
  %48 = fadd float %47, %41, !dbg !35
  %49 = fadd float %48, %45, !dbg !36
  %50 = fmul float %49, %49, !dbg !37
  %51 = fadd float %22, %50, !dbg !38
  %52 = select i1 %17, float %51, float %22, !dbg !39
  %53 = fptrunc float %49 to bfloat, !dbg !40
  %54 = bitcast bfloat %53 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %54, ptr addrspace(1) %26, i1 %17) #4, !dbg !40
  %55 = add nuw nsw i32 %23, 4, !dbg !16
  %56 = icmp samesign ult i32 %23, 4092, !dbg !16
  br i1 %56, label %21, label %57, !dbg !16

57:                                               ; preds = %21
  %58 = bitcast float %52 to i32, !dbg !41
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !41
  %60 = bitcast i32 %59 to float, !dbg !41
  %61 = fadd float %52, %60, !dbg !45
  %62 = bitcast float %61 to i32, !dbg !41
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !41
  %64 = bitcast i32 %63 to float, !dbg !41
  %65 = fadd float %61, %64, !dbg !45
  %66 = tail call float @llvm.nvvm.div.full(float %65, float 4.096000e+03), !dbg !47
  %67 = fadd float %66, 0x3EB0C6F7A0000000, !dbg !48
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i = icmp eq i32 %68, 0, !dbg !49
  br i1 %.not.i, label %71, label %69, !dbg !49

69:                                               ; preds = %57
  %70 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %67), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

71:                                               ; preds = %57
  %72 = tail call float @llvm.nvvm.rsqrt.approx.f(float %67), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %69, %71
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], !dbg !49
  %73 = zext nneg i32 %18 to i64, !dbg !50
  br label %74, !dbg !50

74:                                               ; preds = %__nv_rsqrtf.exit, %74
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next, %74 ]
  %75 = or disjoint i64 %indvars.iv, %73, !dbg !51
  %76 = getelementptr bfloat, ptr addrspace(1) %5, i64 %75, !dbg !52
  %77 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %76, i1 true) #4, !dbg !53
  %78 = bitcast i16 %77 to bfloat, !dbg !53
  %79 = fpext bfloat %78 to float, !dbg !54
  %80 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %20, %80
  %81 = sext i32 %.reass to i64, !dbg !55
  %82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %81, !dbg !55
  %83 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %82, i1 %17) #4, !dbg !56
  %84 = bitcast i16 %83 to bfloat, !dbg !56
  %85 = fpext bfloat %84 to float, !dbg !57
  %86 = fmul float %.0.i, %85, !dbg !58
  %87 = fmul float %86, %79, !dbg !59
  %88 = getelementptr bfloat, ptr addrspace(1) %6, i64 %81, !dbg !60
  %89 = fptrunc float %87 to bfloat, !dbg !61
  %90 = bitcast bfloat %89 to i16, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %90, ptr addrspace(1) %88, i1 %17) #4, !dbg !61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !50
  %91 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !50
  br i1 %91, label %74, label %92, !dbg !50

92:                                               ; preds = %74
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjpigwcltwckftsm2iokvi3tj3yi6tt4h3mtdooifowgpvdbvexp.py", directory: "/tmp/torchinductor_root/jp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 45, scope: !6)
!18 = !DILocation(line: 36, column: 38, scope: !6)
!19 = !DILocation(line: 36, column: 55, scope: !6)
!20 = !DILocation(line: 36, column: 117, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 113, scope: !6)
!24 = !DILocation(line: 38, column: 34, scope: !6)
!25 = !DILocation(line: 38, column: 51, scope: !6)
!26 = !DILocation(line: 38, column: 113, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 51, scope: !6)
!29 = !DILocation(line: 39, column: 113, scope: !6)
!30 = !DILocation(line: 40, column: 34, scope: !6)
!31 = !DILocation(line: 40, column: 51, scope: !6)
!32 = !DILocation(line: 40, column: 113, scope: !6)
!33 = !DILocation(line: 41, column: 22, scope: !6)
!34 = !DILocation(line: 42, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 44, column: 22, scope: !6)
!37 = !DILocation(line: 46, column: 23, scope: !6)
!38 = !DILocation(line: 48, column: 25, scope: !6)
!39 = !DILocation(line: 49, column: 50, scope: !6)
!40 = !DILocation(line: 50, column: 55, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !6, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!44 = !DILocation(line: 51, column: 27, scope: !6)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 62, column: 25, scope: !6)
!48 = !DILocation(line: 64, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 32, scope: !6)
!50 = !DILocation(line: 52, column: 40, scope: !6)
!51 = !DILocation(line: 53, column: 31, scope: !6)
!52 = !DILocation(line: 58, column: 35, scope: !6)
!53 = !DILocation(line: 58, column: 42, scope: !6)
!54 = !DILocation(line: 58, column: 95, scope: !6)
!55 = !DILocation(line: 59, column: 39, scope: !6)
!56 = !DILocation(line: 59, column: 56, scope: !6)
!57 = !DILocation(line: 59, column: 118, scope: !6)
!58 = !DILocation(line: 66, column: 24, scope: !6)
!59 = !DILocation(line: 68, column: 24, scope: !6)
!60 = !DILocation(line: 69, column: 29, scope: !6)
!61 = !DILocation(line: 69, column: 53, scope: !6)
!62 = !DILocation(line: 52, column: 4, scope: !6)
