; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 2, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %22, 7, !dbg !11
  %23 = and i32 %.lobit3, 3, !dbg !11
  %24 = lshr i32 %22, 8, !dbg !11
  %.lobit = and i32 %24, 1, !dbg !11
  %25 = and i32 %22, 31, !dbg !11
  %26 = or disjoint i32 %23, %21, !dbg !12
  %27 = or disjoint i32 %.lobit, %21, !dbg !11
  %28 = or disjoint i32 %27, 2, !dbg !12
  %29 = icmp slt i32 %26, 4112, !dbg !13
  %30 = icmp slt i32 %21, 4112, !dbg !13
  %31 = icmp slt i32 %28, 4112, !dbg !13
  %32 = shl i32 %22, 4, !dbg !14
  %33 = and i32 %32, 2032, !dbg !14
  %34 = or disjoint i32 %33, 8, !dbg !14
  %35 = shl i32 %22, 2, !dbg !14
  %36 = shl i32 %22, 3, !dbg !14
  %37 = mul i32 %26, 3072, !dbg !15
  %38 = add i32 %37, %34
  %39 = zext nneg i32 %33 to i64, !dbg !16
  br label %40, !dbg !16

40:                                               ; preds = %19, %._crit_edge
  %41 = phi i1 [ true, %19 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %19 ], [ 2048, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %328, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %329, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %330, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %331, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %332, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %333, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %334, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %335, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %336, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %337, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %338, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %339, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %340, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %341, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %342, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %343, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %312, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %313, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %314, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %315, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %316, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %317, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %318, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %319, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %320, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %321, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %322, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %323, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %324, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %325, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %326, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %327, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %296, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %297, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %298, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %299, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %300, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %301, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %302, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %303, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %304, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %305, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %306, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %19 ], [ %307, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %19 ], [ %308, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %19 ], [ %309, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %19 ], [ %310, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %19 ], [ %311, %._crit_edge ]
  %90 = or disjoint i64 %indvars.iv, %39, !dbg !17
  %91 = icmp samesign ult i64 %90, 3072, !dbg !18
  %92 = trunc nuw nsw i64 %90 to i32, !dbg !19
  %93 = add i32 %37, %92, !dbg !19
  %94 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %95 = add i32 %38, %94, !dbg !19
  %96 = sext i32 %93 to i64, !dbg !20
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !20
  %98 = sext i32 %95 to i64, !dbg !20
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !20
  %100 = and i1 %29, %91, !dbg !21
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %97, i1 %100) #5, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !22
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !22
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !22
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !22
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !22
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !22
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !22
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !22
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !22
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !22
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !22
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !22
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !22
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !22
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !22
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %99, i1 %100) #5, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !22
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !22
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !22
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !22
  %125 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !22
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !22
  %127 = extractelement <2 x bfloat> %120, i64 0, !dbg !22
  %128 = extractelement <2 x bfloat> %120, i64 1, !dbg !22
  %129 = extractelement <2 x bfloat> %122, i64 0, !dbg !22
  %130 = extractelement <2 x bfloat> %122, i64 1, !dbg !22
  %131 = extractelement <2 x bfloat> %124, i64 0, !dbg !22
  %132 = extractelement <2 x bfloat> %124, i64 1, !dbg !22
  %133 = extractelement <2 x bfloat> %126, i64 0, !dbg !22
  %134 = extractelement <2 x bfloat> %126, i64 1, !dbg !22
  %135 = fpext bfloat %110 to float, !dbg !23
  %136 = fpext bfloat %111 to float, !dbg !23
  %137 = fpext bfloat %112 to float, !dbg !23
  %138 = fpext bfloat %113 to float, !dbg !23
  %139 = fpext bfloat %114 to float, !dbg !23
  %140 = fpext bfloat %115 to float, !dbg !23
  %141 = fpext bfloat %116 to float, !dbg !23
  %142 = fpext bfloat %117 to float, !dbg !23
  %143 = fpext bfloat %127 to float, !dbg !23
  %144 = fpext bfloat %128 to float, !dbg !23
  %145 = fpext bfloat %129 to float, !dbg !23
  %146 = fpext bfloat %130 to float, !dbg !23
  %147 = fpext bfloat %131 to float, !dbg !23
  %148 = fpext bfloat %132 to float, !dbg !23
  %149 = fpext bfloat %133 to float, !dbg !23
  %150 = fpext bfloat %134 to float, !dbg !23
  br i1 %41, label %._crit_edge, label %151, !dbg !24

151:                                              ; preds = %40
  %152 = fsub float %135, %74, !dbg !28
  %153 = fsub float %136, %75, !dbg !28
  %154 = fsub float %137, %76, !dbg !28
  %155 = fsub float %138, %77, !dbg !28
  %156 = fsub float %139, %78, !dbg !28
  %157 = fsub float %140, %79, !dbg !28
  %158 = fsub float %141, %80, !dbg !28
  %159 = fsub float %142, %81, !dbg !28
  %160 = fsub float %143, %82, !dbg !28
  %161 = fsub float %144, %83, !dbg !28
  %162 = fsub float %145, %84, !dbg !28
  %163 = fsub float %146, %85, !dbg !28
  %164 = fsub float %147, %86, !dbg !28
  %165 = fsub float %148, %87, !dbg !28
  %166 = fsub float %149, %88, !dbg !28
  %167 = fsub float %150, %89, !dbg !28
  %168 = fadd float %42, 1.000000e+00, !dbg !29
  %169 = fadd float %43, 1.000000e+00, !dbg !29
  %170 = fadd float %44, 1.000000e+00, !dbg !29
  %171 = fadd float %45, 1.000000e+00, !dbg !29
  %172 = fadd float %46, 1.000000e+00, !dbg !29
  %173 = fadd float %47, 1.000000e+00, !dbg !29
  %174 = fadd float %48, 1.000000e+00, !dbg !29
  %175 = fadd float %49, 1.000000e+00, !dbg !29
  %176 = fadd float %50, 1.000000e+00, !dbg !29
  %177 = fadd float %51, 1.000000e+00, !dbg !29
  %178 = fadd float %52, 1.000000e+00, !dbg !29
  %179 = fadd float %53, 1.000000e+00, !dbg !29
  %180 = fadd float %54, 1.000000e+00, !dbg !29
  %181 = fadd float %55, 1.000000e+00, !dbg !29
  %182 = fadd float %56, 1.000000e+00, !dbg !29
  %183 = fadd float %57, 1.000000e+00, !dbg !29
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !30
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !30
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !30
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !30
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !30
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !30
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !30
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !30
  %192 = tail call float @llvm.nvvm.div.full(float %160, float %176), !dbg !30
  %193 = tail call float @llvm.nvvm.div.full(float %161, float %177), !dbg !30
  %194 = tail call float @llvm.nvvm.div.full(float %162, float %178), !dbg !30
  %195 = tail call float @llvm.nvvm.div.full(float %163, float %179), !dbg !30
  %196 = tail call float @llvm.nvvm.div.full(float %164, float %180), !dbg !30
  %197 = tail call float @llvm.nvvm.div.full(float %165, float %181), !dbg !30
  %198 = tail call float @llvm.nvvm.div.full(float %166, float %182), !dbg !30
  %199 = tail call float @llvm.nvvm.div.full(float %167, float %183), !dbg !30
  %200 = fadd float %74, %184, !dbg !31
  %201 = fadd float %75, %185, !dbg !31
  %202 = fadd float %76, %186, !dbg !31
  %203 = fadd float %77, %187, !dbg !31
  %204 = fadd float %78, %188, !dbg !31
  %205 = fadd float %79, %189, !dbg !31
  %206 = fadd float %80, %190, !dbg !31
  %207 = fadd float %81, %191, !dbg !31
  %208 = fadd float %82, %192, !dbg !31
  %209 = fadd float %83, %193, !dbg !31
  %210 = fadd float %84, %194, !dbg !31
  %211 = fadd float %85, %195, !dbg !31
  %212 = fadd float %86, %196, !dbg !31
  %213 = fadd float %87, %197, !dbg !31
  %214 = fadd float %88, %198, !dbg !31
  %215 = fadd float %89, %199, !dbg !31
  %216 = fsub float %135, %200, !dbg !32
  %217 = fsub float %136, %201, !dbg !32
  %218 = fsub float %137, %202, !dbg !32
  %219 = fsub float %138, %203, !dbg !32
  %220 = fsub float %139, %204, !dbg !32
  %221 = fsub float %140, %205, !dbg !32
  %222 = fsub float %141, %206, !dbg !32
  %223 = fsub float %142, %207, !dbg !32
  %224 = fsub float %143, %208, !dbg !32
  %225 = fsub float %144, %209, !dbg !32
  %226 = fsub float %145, %210, !dbg !32
  %227 = fsub float %146, %211, !dbg !32
  %228 = fsub float %147, %212, !dbg !32
  %229 = fsub float %148, %213, !dbg !32
  %230 = fsub float %149, %214, !dbg !32
  %231 = fsub float %150, %215, !dbg !32
  %232 = fmul float %152, %216, !dbg !33
  %233 = fmul float %153, %217, !dbg !33
  %234 = fmul float %154, %218, !dbg !33
  %235 = fmul float %155, %219, !dbg !33
  %236 = fmul float %156, %220, !dbg !33
  %237 = fmul float %157, %221, !dbg !33
  %238 = fmul float %158, %222, !dbg !33
  %239 = fmul float %159, %223, !dbg !33
  %240 = fmul float %160, %224, !dbg !33
  %241 = fmul float %161, %225, !dbg !33
  %242 = fmul float %162, %226, !dbg !33
  %243 = fmul float %163, %227, !dbg !33
  %244 = fmul float %164, %228, !dbg !33
  %245 = fmul float %165, %229, !dbg !33
  %246 = fmul float %166, %230, !dbg !33
  %247 = fmul float %167, %231, !dbg !33
  %248 = fadd float %58, %232, !dbg !34
  %249 = fadd float %59, %233, !dbg !34
  %250 = fadd float %60, %234, !dbg !34
  %251 = fadd float %61, %235, !dbg !34
  %252 = fadd float %62, %236, !dbg !34
  %253 = fadd float %63, %237, !dbg !34
  %254 = fadd float %64, %238, !dbg !34
  %255 = fadd float %65, %239, !dbg !34
  %256 = fadd float %66, %240, !dbg !34
  %257 = fadd float %67, %241, !dbg !34
  %258 = fadd float %68, %242, !dbg !34
  %259 = fadd float %69, %243, !dbg !34
  %260 = fadd float %70, %244, !dbg !34
  %261 = fadd float %71, %245, !dbg !34
  %262 = fadd float %72, %246, !dbg !34
  %263 = fadd float %73, %247, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %40, %151
  %264 = phi float [ %248, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %265 = phi float [ %249, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %266 = phi float [ %250, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %267 = phi float [ %251, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %268 = phi float [ %252, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %269 = phi float [ %253, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %270 = phi float [ %254, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %271 = phi float [ %255, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %272 = phi float [ %256, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %273 = phi float [ %257, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %274 = phi float [ %258, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %275 = phi float [ %259, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %276 = phi float [ %260, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %277 = phi float [ %261, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %278 = phi float [ %262, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %279 = phi float [ %263, %151 ], [ 0.000000e+00, %40 ], !dbg !27
  %.pn82 = phi float [ %200, %151 ], [ %135, %40 ]
  %.pn80 = phi float [ %201, %151 ], [ %136, %40 ]
  %.pn78 = phi float [ %202, %151 ], [ %137, %40 ]
  %.pn76 = phi float [ %203, %151 ], [ %138, %40 ]
  %.pn74 = phi float [ %204, %151 ], [ %139, %40 ]
  %.pn72 = phi float [ %205, %151 ], [ %140, %40 ]
  %.pn70 = phi float [ %206, %151 ], [ %141, %40 ]
  %.pn68 = phi float [ %207, %151 ], [ %142, %40 ]
  %.pn66 = phi float [ %208, %151 ], [ %143, %40 ]
  %.pn64 = phi float [ %209, %151 ], [ %144, %40 ]
  %.pn62 = phi float [ %210, %151 ], [ %145, %40 ]
  %.pn60 = phi float [ %211, %151 ], [ %146, %40 ]
  %.pn58 = phi float [ %212, %151 ], [ %147, %40 ]
  %.pn56 = phi float [ %213, %151 ], [ %148, %40 ]
  %.pn54 = phi float [ %214, %151 ], [ %149, %40 ]
  %.pn52 = phi float [ %215, %151 ], [ %150, %40 ]
  %280 = phi float [ %168, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %281 = phi float [ %169, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %282 = phi float [ %170, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %283 = phi float [ %171, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %284 = phi float [ %172, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %285 = phi float [ %173, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %286 = phi float [ %174, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %287 = phi float [ %175, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %288 = phi float [ %176, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %289 = phi float [ %177, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %290 = phi float [ %178, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %291 = phi float [ %179, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %292 = phi float [ %180, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %293 = phi float [ %181, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %294 = phi float [ %182, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %295 = phi float [ %183, %151 ], [ 1.000000e+00, %40 ], !dbg !27
  %296 = select i1 %100, float %.pn82, float %74, !dbg !35
  %297 = select i1 %100, float %.pn80, float %75, !dbg !35
  %298 = select i1 %100, float %.pn78, float %76, !dbg !35
  %299 = select i1 %100, float %.pn76, float %77, !dbg !35
  %300 = select i1 %100, float %.pn74, float %78, !dbg !35
  %301 = select i1 %100, float %.pn72, float %79, !dbg !35
  %302 = select i1 %100, float %.pn70, float %80, !dbg !35
  %303 = select i1 %100, float %.pn68, float %81, !dbg !35
  %304 = select i1 %100, float %.pn66, float %82, !dbg !35
  %305 = select i1 %100, float %.pn64, float %83, !dbg !35
  %306 = select i1 %100, float %.pn62, float %84, !dbg !35
  %307 = select i1 %100, float %.pn60, float %85, !dbg !35
  %308 = select i1 %100, float %.pn58, float %86, !dbg !35
  %309 = select i1 %100, float %.pn56, float %87, !dbg !35
  %310 = select i1 %100, float %.pn54, float %88, !dbg !35
  %311 = select i1 %100, float %.pn52, float %89, !dbg !35
  %312 = select i1 %100, float %264, float %58, !dbg !36
  %313 = select i1 %100, float %265, float %59, !dbg !36
  %314 = select i1 %100, float %266, float %60, !dbg !36
  %315 = select i1 %100, float %267, float %61, !dbg !36
  %316 = select i1 %100, float %268, float %62, !dbg !36
  %317 = select i1 %100, float %269, float %63, !dbg !36
  %318 = select i1 %100, float %270, float %64, !dbg !36
  %319 = select i1 %100, float %271, float %65, !dbg !36
  %320 = select i1 %100, float %272, float %66, !dbg !36
  %321 = select i1 %100, float %273, float %67, !dbg !36
  %322 = select i1 %100, float %274, float %68, !dbg !36
  %323 = select i1 %100, float %275, float %69, !dbg !36
  %324 = select i1 %100, float %276, float %70, !dbg !36
  %325 = select i1 %100, float %277, float %71, !dbg !36
  %326 = select i1 %100, float %278, float %72, !dbg !36
  %327 = select i1 %100, float %279, float %73, !dbg !36
  %328 = select i1 %100, float %280, float %42, !dbg !37
  %329 = select i1 %100, float %281, float %43, !dbg !37
  %330 = select i1 %100, float %282, float %44, !dbg !37
  %331 = select i1 %100, float %283, float %45, !dbg !37
  %332 = select i1 %100, float %284, float %46, !dbg !37
  %333 = select i1 %100, float %285, float %47, !dbg !37
  %334 = select i1 %100, float %286, float %48, !dbg !37
  %335 = select i1 %100, float %287, float %49, !dbg !37
  %336 = select i1 %100, float %288, float %50, !dbg !37
  %337 = select i1 %100, float %289, float %51, !dbg !37
  %338 = select i1 %100, float %290, float %52, !dbg !37
  %339 = select i1 %100, float %291, float %53, !dbg !37
  %340 = select i1 %100, float %292, float %54, !dbg !37
  %341 = select i1 %100, float %293, float %55, !dbg !37
  %342 = select i1 %100, float %294, float %56, !dbg !37
  %343 = select i1 %100, float %295, float %57, !dbg !37
  br i1 %41, label %40, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %344 = lshr i32 %22, 5, !dbg !11
  %345 = and i32 %22, 3, !dbg !11
  %346 = or disjoint i32 %21, %345, !dbg !12
  %347 = icmp slt i32 %27, 4112, !dbg !13
  %348 = icmp slt i32 %346, 4112, !dbg !13
  %349 = and i32 %35, 2044, !dbg !14
  %350 = and i32 %36, 2040, !dbg !14
  %351 = fsub float %297, %296, !dbg !38
  %352 = fadd float %328, %329, !dbg !41
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !42
  %354 = tail call float @llvm.nvvm.div.full(float %329, float %352), !dbg !43
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !44
  %356 = fmul float %351, %355, !dbg !45
  %357 = fadd float %296, %356, !dbg !46
  %358 = fadd float %312, %313, !dbg !47
  %359 = fmul float %351, %351, !dbg !48
  %360 = fmul float %359, %328, !dbg !49
  %361 = fmul float %360, %355, !dbg !50
  %362 = fadd float %358, %361, !dbg !51
  %363 = fsub float %298, %357, !dbg !38
  %364 = fadd float %330, %352, !dbg !41
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !42
  %366 = tail call float @llvm.nvvm.div.full(float %330, float %364), !dbg !43
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !44
  %368 = fmul float %367, %363, !dbg !45
  %369 = fadd float %357, %368, !dbg !46
  %370 = fadd float %314, %362, !dbg !47
  %371 = fmul float %363, %363, !dbg !48
  %372 = fmul float %352, %371, !dbg !49
  %373 = fmul float %367, %372, !dbg !50
  %374 = fadd float %370, %373, !dbg !51
  %375 = fsub float %299, %369, !dbg !38
  %376 = fadd float %331, %364, !dbg !41
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !42
  %378 = tail call float @llvm.nvvm.div.full(float %331, float %376), !dbg !43
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !44
  %380 = fmul float %379, %375, !dbg !45
  %381 = fadd float %369, %380, !dbg !46
  %382 = fadd float %315, %374, !dbg !47
  %383 = fmul float %375, %375, !dbg !48
  %384 = fmul float %364, %383, !dbg !49
  %385 = fmul float %379, %384, !dbg !50
  %386 = fadd float %382, %385, !dbg !51
  %387 = fsub float %300, %381, !dbg !38
  %388 = fadd float %332, %376, !dbg !41
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !42
  %390 = tail call float @llvm.nvvm.div.full(float %332, float %388), !dbg !43
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !44
  %392 = fmul float %391, %387, !dbg !45
  %393 = fadd float %381, %392, !dbg !46
  %394 = fadd float %316, %386, !dbg !47
  %395 = fmul float %387, %387, !dbg !48
  %396 = fmul float %376, %395, !dbg !49
  %397 = fmul float %391, %396, !dbg !50
  %398 = fadd float %394, %397, !dbg !51
  %399 = fsub float %301, %393, !dbg !38
  %400 = fadd float %333, %388, !dbg !41
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !42
  %402 = tail call float @llvm.nvvm.div.full(float %333, float %400), !dbg !43
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !44
  %404 = fmul float %403, %399, !dbg !45
  %405 = fadd float %393, %404, !dbg !46
  %406 = fadd float %317, %398, !dbg !47
  %407 = fmul float %399, %399, !dbg !48
  %408 = fmul float %388, %407, !dbg !49
  %409 = fmul float %403, %408, !dbg !50
  %410 = fadd float %406, %409, !dbg !51
  %411 = fsub float %302, %405, !dbg !38
  %412 = fadd float %334, %400, !dbg !41
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !42
  %414 = tail call float @llvm.nvvm.div.full(float %334, float %412), !dbg !43
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !44
  %416 = fmul float %415, %411, !dbg !45
  %417 = fadd float %405, %416, !dbg !46
  %418 = fadd float %318, %410, !dbg !47
  %419 = fmul float %411, %411, !dbg !48
  %420 = fmul float %400, %419, !dbg !49
  %421 = fmul float %415, %420, !dbg !50
  %422 = fadd float %418, %421, !dbg !51
  %423 = fsub float %303, %417, !dbg !38
  %424 = fadd float %335, %412, !dbg !41
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !42
  %426 = tail call float @llvm.nvvm.div.full(float %335, float %424), !dbg !43
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !44
  %428 = fmul float %427, %423, !dbg !45
  %429 = fadd float %417, %428, !dbg !46
  %430 = fadd float %319, %422, !dbg !47
  %431 = fmul float %423, %423, !dbg !48
  %432 = fmul float %412, %431, !dbg !49
  %433 = fmul float %427, %432, !dbg !50
  %434 = fadd float %430, %433, !dbg !51
  %435 = fsub float %304, %429, !dbg !38
  %436 = fadd float %336, %424, !dbg !41
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !42
  %438 = tail call float @llvm.nvvm.div.full(float %336, float %436), !dbg !43
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !44
  %440 = fmul float %439, %435, !dbg !45
  %441 = fadd float %429, %440, !dbg !46
  %442 = fadd float %320, %434, !dbg !47
  %443 = fmul float %435, %435, !dbg !48
  %444 = fmul float %424, %443, !dbg !49
  %445 = fmul float %439, %444, !dbg !50
  %446 = fadd float %442, %445, !dbg !51
  %447 = fsub float %305, %441, !dbg !38
  %448 = fadd float %337, %436, !dbg !41
  %449 = fcmp oeq float %448, 0.000000e+00, !dbg !42
  %450 = tail call float @llvm.nvvm.div.full(float %337, float %448), !dbg !43
  %451 = select i1 %449, float 0.000000e+00, float %450, !dbg !44
  %452 = fmul float %451, %447, !dbg !45
  %453 = fadd float %441, %452, !dbg !46
  %454 = fadd float %321, %446, !dbg !47
  %455 = fmul float %447, %447, !dbg !48
  %456 = fmul float %436, %455, !dbg !49
  %457 = fmul float %451, %456, !dbg !50
  %458 = fadd float %454, %457, !dbg !51
  %459 = fsub float %306, %453, !dbg !38
  %460 = fadd float %338, %448, !dbg !41
  %461 = fcmp oeq float %460, 0.000000e+00, !dbg !42
  %462 = tail call float @llvm.nvvm.div.full(float %338, float %460), !dbg !43
  %463 = select i1 %461, float 0.000000e+00, float %462, !dbg !44
  %464 = fmul float %463, %459, !dbg !45
  %465 = fadd float %453, %464, !dbg !46
  %466 = fadd float %322, %458, !dbg !47
  %467 = fmul float %459, %459, !dbg !48
  %468 = fmul float %448, %467, !dbg !49
  %469 = fmul float %463, %468, !dbg !50
  %470 = fadd float %466, %469, !dbg !51
  %471 = fsub float %307, %465, !dbg !38
  %472 = fadd float %339, %460, !dbg !41
  %473 = fcmp oeq float %472, 0.000000e+00, !dbg !42
  %474 = tail call float @llvm.nvvm.div.full(float %339, float %472), !dbg !43
  %475 = select i1 %473, float 0.000000e+00, float %474, !dbg !44
  %476 = fmul float %475, %471, !dbg !45
  %477 = fadd float %465, %476, !dbg !46
  %478 = fadd float %323, %470, !dbg !47
  %479 = fmul float %471, %471, !dbg !48
  %480 = fmul float %460, %479, !dbg !49
  %481 = fmul float %475, %480, !dbg !50
  %482 = fadd float %478, %481, !dbg !51
  %483 = fsub float %308, %477, !dbg !38
  %484 = fadd float %340, %472, !dbg !41
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !42
  %486 = tail call float @llvm.nvvm.div.full(float %340, float %484), !dbg !43
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !44
  %488 = fmul float %487, %483, !dbg !45
  %489 = fadd float %477, %488, !dbg !46
  %490 = fadd float %324, %482, !dbg !47
  %491 = fmul float %483, %483, !dbg !48
  %492 = fmul float %472, %491, !dbg !49
  %493 = fmul float %487, %492, !dbg !50
  %494 = fadd float %490, %493, !dbg !51
  %495 = fsub float %309, %489, !dbg !38
  %496 = fadd float %341, %484, !dbg !41
  %497 = fcmp oeq float %496, 0.000000e+00, !dbg !42
  %498 = tail call float @llvm.nvvm.div.full(float %341, float %496), !dbg !43
  %499 = select i1 %497, float 0.000000e+00, float %498, !dbg !44
  %500 = fmul float %499, %495, !dbg !45
  %501 = fadd float %489, %500, !dbg !46
  %502 = fadd float %325, %494, !dbg !47
  %503 = fmul float %495, %495, !dbg !48
  %504 = fmul float %484, %503, !dbg !49
  %505 = fmul float %499, %504, !dbg !50
  %506 = fadd float %502, %505, !dbg !51
  %507 = fsub float %310, %501, !dbg !38
  %508 = fadd float %342, %496, !dbg !41
  %509 = fcmp oeq float %508, 0.000000e+00, !dbg !42
  %510 = tail call float @llvm.nvvm.div.full(float %342, float %508), !dbg !43
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !44
  %512 = fmul float %511, %507, !dbg !45
  %513 = fadd float %501, %512, !dbg !46
  %514 = fadd float %326, %506, !dbg !47
  %515 = fmul float %507, %507, !dbg !48
  %516 = fmul float %496, %515, !dbg !49
  %517 = fmul float %511, %516, !dbg !50
  %518 = fadd float %514, %517, !dbg !51
  %519 = fsub float %311, %513, !dbg !38
  %520 = fadd float %343, %508, !dbg !41
  %521 = fcmp oeq float %520, 0.000000e+00, !dbg !42
  %522 = tail call float @llvm.nvvm.div.full(float %343, float %520), !dbg !43
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !44
  %524 = fmul float %523, %519, !dbg !45
  %525 = fadd float %513, %524, !dbg !46
  %526 = fadd float %327, %518, !dbg !47
  %527 = fmul float %519, %519, !dbg !48
  %528 = fmul float %508, %527, !dbg !49
  %529 = fmul float %523, %528, !dbg !50
  %530 = fadd float %526, %529, !dbg !51
  %531 = bitcast float %525 to i32, !dbg !52
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 16, i32 31), !dbg !52
  %533 = bitcast i32 %532 to float, !dbg !52
  %534 = bitcast float %530 to i32, !dbg !52
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !52
  %536 = bitcast i32 %535 to float, !dbg !52
  %537 = bitcast float %520 to i32, !dbg !52
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 16, i32 31), !dbg !52
  %539 = bitcast i32 %538 to float, !dbg !52
  %540 = fsub float %533, %525, !dbg !38
  %541 = fadd float %520, %539, !dbg !41
  %542 = fcmp oeq float %541, 0.000000e+00, !dbg !42
  %543 = tail call float @llvm.nvvm.div.full(float %539, float %541), !dbg !43
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !44
  %545 = fmul float %544, %540, !dbg !45
  %546 = fadd float %525, %545, !dbg !46
  %547 = fadd float %530, %536, !dbg !47
  %548 = fmul float %540, %540, !dbg !48
  %549 = fmul float %520, %548, !dbg !49
  %550 = fmul float %544, %549, !dbg !50
  %551 = fadd float %547, %550, !dbg !51
  %552 = bitcast float %546 to i32, !dbg !52
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !52
  %554 = bitcast i32 %553 to float, !dbg !52
  %555 = bitcast float %551 to i32, !dbg !52
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 8, i32 31), !dbg !52
  %557 = bitcast i32 %556 to float, !dbg !52
  %558 = bitcast float %541 to i32, !dbg !52
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 8, i32 31), !dbg !52
  %560 = bitcast i32 %559 to float, !dbg !52
  %561 = fsub float %554, %546, !dbg !38
  %562 = fadd float %541, %560, !dbg !41
  %563 = fcmp oeq float %562, 0.000000e+00, !dbg !42
  %564 = tail call float @llvm.nvvm.div.full(float %560, float %562), !dbg !43
  %565 = select i1 %563, float 0.000000e+00, float %564, !dbg !44
  %566 = fmul float %565, %561, !dbg !45
  %567 = fadd float %546, %566, !dbg !46
  %568 = fadd float %551, %557, !dbg !47
  %569 = fmul float %561, %561, !dbg !48
  %570 = fmul float %541, %569, !dbg !49
  %571 = fmul float %565, %570, !dbg !50
  %572 = fadd float %568, %571, !dbg !51
  %573 = bitcast float %567 to i32, !dbg !52
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 4, i32 31), !dbg !52
  %575 = bitcast i32 %574 to float, !dbg !52
  %576 = bitcast float %572 to i32, !dbg !52
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !52
  %578 = bitcast i32 %577 to float, !dbg !52
  %579 = bitcast float %562 to i32, !dbg !52
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 4, i32 31), !dbg !52
  %581 = bitcast i32 %580 to float, !dbg !52
  %582 = fsub float %575, %567, !dbg !38
  %583 = fadd float %562, %581, !dbg !41
  %584 = fcmp oeq float %583, 0.000000e+00, !dbg !42
  %585 = tail call float @llvm.nvvm.div.full(float %581, float %583), !dbg !43
  %586 = select i1 %584, float 0.000000e+00, float %585, !dbg !44
  %587 = fmul float %586, %582, !dbg !45
  %588 = fadd float %567, %587, !dbg !46
  %589 = fadd float %572, %578, !dbg !47
  %590 = fmul float %582, %582, !dbg !48
  %591 = fmul float %562, %590, !dbg !49
  %592 = fmul float %586, %591, !dbg !50
  %593 = fadd float %589, %592, !dbg !51
  %594 = bitcast float %588 to i32, !dbg !52
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !52
  %596 = bitcast i32 %595 to float, !dbg !52
  %597 = bitcast float %593 to i32, !dbg !52
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !52
  %599 = bitcast i32 %598 to float, !dbg !52
  %600 = bitcast float %583 to i32, !dbg !52
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 2, i32 31), !dbg !52
  %602 = bitcast i32 %601 to float, !dbg !52
  %603 = fsub float %596, %588, !dbg !38
  %604 = fadd float %583, %602, !dbg !41
  %605 = fcmp oeq float %604, 0.000000e+00, !dbg !42
  %606 = tail call float @llvm.nvvm.div.full(float %602, float %604), !dbg !43
  %607 = select i1 %605, float 0.000000e+00, float %606, !dbg !44
  %608 = fmul float %607, %603, !dbg !45
  %609 = fadd float %588, %608, !dbg !46
  %610 = fadd float %593, %599, !dbg !47
  %611 = fmul float %603, %603, !dbg !48
  %612 = fmul float %583, %611, !dbg !49
  %613 = fmul float %607, %612, !dbg !50
  %614 = fadd float %610, %613, !dbg !51
  %615 = bitcast float %609 to i32, !dbg !52
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 1, i32 31), !dbg !52
  %617 = bitcast i32 %616 to float, !dbg !52
  %618 = bitcast float %614 to i32, !dbg !52
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !52
  %620 = bitcast i32 %619 to float, !dbg !52
  %621 = bitcast float %604 to i32, !dbg !52
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 1, i32 31), !dbg !52
  %623 = bitcast i32 %622 to float, !dbg !52
  %624 = fsub float %617, %609, !dbg !38
  %625 = fadd float %604, %623, !dbg !41
  %626 = fcmp oeq float %625, 0.000000e+00, !dbg !42
  %627 = tail call float @llvm.nvvm.div.full(float %623, float %625), !dbg !43
  %628 = select i1 %626, float 0.000000e+00, float %627, !dbg !44
  %629 = fmul float %628, %624, !dbg !45
  %630 = fadd float %609, %629, !dbg !46
  %631 = fadd float %614, %620, !dbg !47
  %632 = fmul float %624, %624, !dbg !48
  %633 = fmul float %604, %632, !dbg !49
  %634 = fmul float %628, %633, !dbg !50
  %635 = fadd float %631, %634, !dbg !51
  %636 = and i32 %344, 3, !dbg !52
  %637 = icmp eq i32 %25, 0, !dbg !52
  %638 = shl nuw nsw i32 %23, 2, !dbg !52
  %639 = or disjoint i32 %638, %636, !dbg !52
  %640 = getelementptr float, ptr addrspace(3) @global_smem, i32 %639, !dbg !52
  %641 = bitcast float %630 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 %637) #5, !dbg !52
  %642 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %639, !dbg !52
  %643 = bitcast float %635 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %643, i1 %637) #5, !dbg !52
  %644 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %639, !dbg !52
  %645 = bitcast float %625 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 %637) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %646 = icmp slt i32 %22, 16, !dbg !52
  %647 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !52
  %648 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %647, i1 %646) #5, !dbg !52
  %649 = bitcast i32 %648 to float, !dbg !52
  %650 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !52
  %651 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %650, i1 %646) #5, !dbg !52
  %652 = bitcast i32 %651 to float, !dbg !52
  %653 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %22, !dbg !52
  %654 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %653, i1 %646) #5, !dbg !52
  %655 = bitcast i32 %654 to float, !dbg !52
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 2, i32 31), !dbg !52
  %657 = bitcast i32 %656 to float, !dbg !52
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 2, i32 31), !dbg !52
  %659 = bitcast i32 %658 to float, !dbg !52
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %654, i32 2, i32 31), !dbg !52
  %661 = bitcast i32 %660 to float, !dbg !52
  %662 = fsub float %657, %649, !dbg !38
  %663 = fadd float %655, %661, !dbg !41
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !42
  %665 = tail call float @llvm.nvvm.div.full(float %661, float %663), !dbg !43
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !44
  %667 = fmul float %662, %666, !dbg !45
  %668 = fadd float %667, %649, !dbg !46
  %669 = fadd float %652, %659, !dbg !47
  %670 = fmul float %662, %662, !dbg !48
  %671 = fmul float %670, %655, !dbg !49
  %672 = fmul float %671, %666, !dbg !50
  %673 = fadd float %669, %672, !dbg !51
  %674 = bitcast float %668 to i32, !dbg !52
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !52
  %676 = bitcast i32 %675 to float, !dbg !52
  %677 = bitcast float %673 to i32, !dbg !52
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 1, i32 31), !dbg !52
  %679 = bitcast i32 %678 to float, !dbg !52
  %680 = bitcast float %663 to i32, !dbg !52
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 1, i32 31), !dbg !52
  %682 = bitcast i32 %681 to float, !dbg !52
  %683 = fsub float %676, %668, !dbg !38
  %684 = fadd float %663, %682, !dbg !41
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !42
  %686 = tail call float @llvm.nvvm.div.full(float %682, float %684), !dbg !43
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !44
  %688 = fmul float %683, %687, !dbg !45
  %689 = fadd float %668, %688, !dbg !46
  %690 = fadd float %673, %679, !dbg !47
  %691 = fmul float %683, %683, !dbg !48
  %692 = fmul float %663, %691, !dbg !49
  %693 = fmul float %687, %692, !dbg !50
  %694 = fadd float %690, %693, !dbg !51
  %695 = icmp eq i32 %345, 0, !dbg !52
  %696 = and i1 %646, %695, !dbg !52
  %697 = bitcast float %689 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %697, i1 %696) #5, !dbg !52
  %698 = bitcast float %694 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %698, i1 %696) #5, !dbg !52
  %699 = bitcast float %684 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %699, i1 %696) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %700 = getelementptr float, ptr addrspace(3) @global_smem, i32 %638, !dbg !52
  %701 = load float, ptr addrspace(3) %700, align 16, !dbg !52
  %702 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %638, !dbg !52
  %703 = load float, ptr addrspace(3) %702, align 16, !dbg !52
  %704 = mul i32 %27, 3072, !dbg !53
  %705 = mul i32 %28, 3072, !dbg !53
  %706 = tail call float @llvm.nvvm.div.full(float %703, float 3.072000e+03), !dbg !54
  %707 = fadd float %706, 0x3EB0C6F7A0000000, !dbg !55
  %708 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %709 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %716 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %717 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %718 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %719 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %720 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %721 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %722 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %723 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i125 = icmp eq i32 %723, 0, !dbg !56
  br i1 %.not.i125, label %726, label %724, !dbg !56

724:                                              ; preds = %__nv_rsqrtf.exit
  %725 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %707), !dbg !56
  br label %__nv_rsqrtf.exit127, !dbg !56

726:                                              ; preds = %__nv_rsqrtf.exit
  %727 = tail call float @llvm.nvvm.rsqrt.approx.f(float %707), !dbg !56
  br label %__nv_rsqrtf.exit127, !dbg !56

__nv_rsqrtf.exit127:                              ; preds = %724, %726
  %.0.i126 = phi float [ %725, %724 ], [ %727, %726 ], !dbg !56
  %728 = and i32 %32, 8176
  %729 = lshr i32 %32, 9
  %730 = and i32 %729, 12
  %731 = or disjoint i32 %730, %728
  %732 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %731
  %733 = or disjoint i32 %728, 4
  %734 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %730
  %735 = getelementptr inbounds nuw float, ptr addrspace(3) %734, i32 %733
  %736 = or disjoint i32 %728, 8
  %737 = getelementptr inbounds nuw float, ptr addrspace(3) %734, i32 %736
  %738 = or disjoint i32 %728, 12
  %739 = getelementptr inbounds nuw float, ptr addrspace(3) %734, i32 %738
  %740 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %349
  %741 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 8208
  %742 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 16416
  %743 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 24624
  %744 = and i32 %36, 4088
  %745 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %349
  %746 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 4112
  %747 = lshr i32 %36, 8
  %748 = and i32 %747, 8
  %749 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %748
  %750 = getelementptr bfloat, ptr addrspace(3) %749, i32 %744
  %751 = zext nneg i32 %350 to i64, !dbg !57
  %752 = zext nneg i32 %349 to i64, !dbg !57
  %753 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 8
  %754 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 8216
  %755 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 16424
  %756 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 24628
  %757 = getelementptr inbounds nuw i8, ptr addrspace(3) %740, i32 24632
  br label %758, !dbg !57

758:                                              ; preds = %__nv_rsqrtf.exit127, %758
  %759 = phi i1 [ true, %__nv_rsqrtf.exit127 ], [ false, %758 ]
  %indvars.iv225 = phi i64 [ 0, %__nv_rsqrtf.exit127 ], [ 2048, %758 ]
  %760 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %952, %758 ]
  %761 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %953, %758 ]
  %762 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %951, %758 ]
  %763 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %1028, %758 ]
  %764 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %1029, %758 ]
  %765 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit127 ], [ %1032, %758 ]
  %766 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %1017, %758 ]
  %767 = or disjoint i64 %indvars.iv225, %752, !dbg !58
  %768 = or disjoint i64 %indvars.iv225, %39, !dbg !58
  %769 = or disjoint i64 %indvars.iv225, %751, !dbg !58
  %770 = icmp samesign ult i64 %767, 3072, !dbg !59
  %771 = icmp samesign ult i64 %768, 3072, !dbg !59
  %772 = icmp samesign ult i64 %769, 3072, !dbg !59
  %773 = trunc nuw nsw i64 %768 to i32, !dbg !60
  %774 = add i32 %37, %773, !dbg !60
  %775 = trunc nuw nsw i64 %indvars.iv225 to i32, !dbg !60
  %776 = add i32 %38, %775, !dbg !60
  %777 = trunc nuw nsw i64 %769 to i32, !dbg !60
  %778 = add i32 %704, %777, !dbg !60
  %779 = add i32 %705, %777, !dbg !60
  %780 = sext i32 %774 to i64, !dbg !61
  %781 = getelementptr bfloat, ptr addrspace(1) %0, i64 %780, !dbg !61
  %782 = sext i32 %776 to i64, !dbg !61
  %783 = getelementptr bfloat, ptr addrspace(1) %0, i64 %782, !dbg !61
  %784 = and i1 %30, %770, !dbg !62
  %785 = and i1 %29, %771, !dbg !62
  %786 = and i1 %347, %772, !dbg !62
  %787 = and i1 %31, %772, !dbg !62
  %788 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %781, i1 %785) #5, !dbg !63
  %789 = extractvalue { i32, i32, i32, i32 } %788, 0, !dbg !63
  %790 = bitcast i32 %789 to <2 x bfloat>, !dbg !63
  %791 = extractvalue { i32, i32, i32, i32 } %788, 1, !dbg !63
  %792 = bitcast i32 %791 to <2 x bfloat>, !dbg !63
  %793 = extractvalue { i32, i32, i32, i32 } %788, 2, !dbg !63
  %794 = bitcast i32 %793 to <2 x bfloat>, !dbg !63
  %795 = extractvalue { i32, i32, i32, i32 } %788, 3, !dbg !63
  %796 = bitcast i32 %795 to <2 x bfloat>, !dbg !63
  %797 = extractelement <2 x bfloat> %790, i64 0, !dbg !63
  %798 = extractelement <2 x bfloat> %790, i64 1, !dbg !63
  %799 = extractelement <2 x bfloat> %792, i64 0, !dbg !63
  %800 = extractelement <2 x bfloat> %792, i64 1, !dbg !63
  %801 = extractelement <2 x bfloat> %794, i64 0, !dbg !63
  %802 = extractelement <2 x bfloat> %794, i64 1, !dbg !63
  %803 = extractelement <2 x bfloat> %796, i64 0, !dbg !63
  %804 = extractelement <2 x bfloat> %796, i64 1, !dbg !63
  %805 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %783, i1 %785) #5, !dbg !63
  %806 = extractvalue { i32, i32, i32, i32 } %805, 0, !dbg !63
  %807 = bitcast i32 %806 to <2 x bfloat>, !dbg !63
  %808 = extractvalue { i32, i32, i32, i32 } %805, 1, !dbg !63
  %809 = bitcast i32 %808 to <2 x bfloat>, !dbg !63
  %810 = extractvalue { i32, i32, i32, i32 } %805, 2, !dbg !63
  %811 = bitcast i32 %810 to <2 x bfloat>, !dbg !63
  %812 = extractvalue { i32, i32, i32, i32 } %805, 3, !dbg !63
  %813 = bitcast i32 %812 to <2 x bfloat>, !dbg !63
  %814 = extractelement <2 x bfloat> %807, i64 0, !dbg !63
  %815 = extractelement <2 x bfloat> %807, i64 1, !dbg !63
  %816 = extractelement <2 x bfloat> %809, i64 0, !dbg !63
  %817 = extractelement <2 x bfloat> %809, i64 1, !dbg !63
  %818 = extractelement <2 x bfloat> %811, i64 0, !dbg !63
  %819 = extractelement <2 x bfloat> %811, i64 1, !dbg !63
  %820 = extractelement <2 x bfloat> %813, i64 0, !dbg !63
  %821 = extractelement <2 x bfloat> %813, i64 1, !dbg !63
  %822 = fpext bfloat %797 to float, !dbg !64
  %823 = fpext bfloat %798 to float, !dbg !64
  %824 = fpext bfloat %799 to float, !dbg !64
  %825 = fpext bfloat %800 to float, !dbg !64
  %826 = fpext bfloat %801 to float, !dbg !64
  %827 = fpext bfloat %802 to float, !dbg !64
  %828 = fpext bfloat %803 to float, !dbg !64
  %829 = fpext bfloat %804 to float, !dbg !64
  %830 = fpext bfloat %814 to float, !dbg !64
  %831 = fpext bfloat %815 to float, !dbg !64
  %832 = fpext bfloat %816 to float, !dbg !64
  %833 = fpext bfloat %817 to float, !dbg !64
  %834 = fpext bfloat %818 to float, !dbg !64
  %835 = fpext bfloat %819 to float, !dbg !64
  %836 = fpext bfloat %820 to float, !dbg !64
  %837 = fpext bfloat %821 to float, !dbg !64
  %838 = add nuw nsw i64 %767, 3072, !dbg !65
  %839 = getelementptr float, ptr addrspace(1) %1, i64 %838, !dbg !66
  %840 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %839, i1 %770) #5, !dbg !67
  %841 = extractvalue { i32, i32, i32, i32 } %840, 0, !dbg !67
  %842 = extractvalue { i32, i32, i32, i32 } %840, 1, !dbg !67
  %843 = extractvalue { i32, i32, i32, i32 } %840, 2, !dbg !67
  %844 = extractvalue { i32, i32, i32, i32 } %840, 3, !dbg !67
  %845 = getelementptr bfloat, ptr addrspace(1) %2, i64 %838, !dbg !68
  %846 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %845, i1 %770) #5, !dbg !69
  %847 = extractvalue { i32, i32 } %846, 0, !dbg !69
  %848 = bitcast i32 %847 to <2 x bfloat>, !dbg !69
  %849 = extractvalue { i32, i32 } %846, 1, !dbg !69
  %850 = bitcast i32 %849 to <2 x bfloat>, !dbg !69
  %851 = getelementptr float, ptr addrspace(1) %1, i64 %767, !dbg !70
  %852 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %851, i1 %770) #5, !dbg !71
  %853 = extractvalue { i32, i32, i32, i32 } %852, 0, !dbg !71
  %854 = extractvalue { i32, i32, i32, i32 } %852, 1, !dbg !71
  %855 = extractvalue { i32, i32, i32, i32 } %852, 2, !dbg !71
  %856 = extractvalue { i32, i32, i32, i32 } %852, 3, !dbg !71
  %857 = getelementptr bfloat, ptr addrspace(1) %2, i64 %767, !dbg !72
  %858 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %857, i1 %770) #5, !dbg !73
  %859 = extractvalue { i32, i32 } %858, 0, !dbg !73
  %860 = bitcast i32 %859 to <2 x bfloat>, !dbg !73
  %861 = extractvalue { i32, i32 } %858, 1, !dbg !73
  %862 = bitcast i32 %861 to <2 x bfloat>, !dbg !73
  %863 = fsub float %822, %701, !dbg !74
  %864 = fsub float %823, %701, !dbg !74
  %865 = fsub float %824, %701, !dbg !74
  %866 = fsub float %825, %701, !dbg !74
  %867 = fsub float %826, %701, !dbg !74
  %868 = fsub float %827, %701, !dbg !74
  %869 = fsub float %828, %701, !dbg !74
  %870 = fsub float %829, %701, !dbg !74
  %871 = fsub float %830, %701, !dbg !74
  %872 = fsub float %831, %701, !dbg !74
  %873 = fsub float %832, %701, !dbg !74
  %874 = fsub float %833, %701, !dbg !74
  %875 = fsub float %834, %701, !dbg !74
  %876 = fsub float %835, %701, !dbg !74
  %877 = fsub float %836, %701, !dbg !74
  %878 = fsub float %837, %701, !dbg !74
  %879 = fmul float %.0.i126, %863, !dbg !75
  %880 = fmul float %.0.i126, %864, !dbg !75
  %881 = fmul float %.0.i126, %865, !dbg !75
  %882 = fmul float %.0.i126, %866, !dbg !75
  %883 = fmul float %.0.i126, %867, !dbg !75
  %884 = fmul float %.0.i126, %868, !dbg !75
  %885 = fmul float %.0.i126, %869, !dbg !75
  %886 = fmul float %.0.i126, %870, !dbg !75
  %887 = fmul float %.0.i126, %871, !dbg !75
  %888 = fmul float %.0.i126, %872, !dbg !75
  %889 = fmul float %.0.i126, %873, !dbg !75
  %890 = fmul float %.0.i126, %874, !dbg !75
  %891 = fmul float %.0.i126, %875, !dbg !75
  %892 = fmul float %.0.i126, %876, !dbg !75
  %893 = fmul float %.0.i126, %877, !dbg !75
  %894 = fmul float %.0.i126, %878, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %895 = bitcast float %879 to i32, !dbg !75
  %896 = bitcast float %880 to i32, !dbg !75
  %897 = bitcast float %881 to i32, !dbg !75
  %898 = bitcast float %882 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %732, i32 %895, i32 %896, i32 %897, i32 %898, i1 true) #5, !dbg !75
  %899 = bitcast float %883 to i32, !dbg !75
  %900 = bitcast float %884 to i32, !dbg !75
  %901 = bitcast float %885 to i32, !dbg !75
  %902 = bitcast float %886 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %735, i32 %899, i32 %900, i32 %901, i32 %902, i1 true) #5, !dbg !75
  %903 = bitcast float %887 to i32, !dbg !75
  %904 = bitcast float %888 to i32, !dbg !75
  %905 = bitcast float %889 to i32, !dbg !75
  %906 = bitcast float %890 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %737, i32 %903, i32 %904, i32 %905, i32 %906, i1 true) #5, !dbg !75
  %907 = bitcast float %891 to i32, !dbg !75
  %908 = bitcast float %892 to i32, !dbg !75
  %909 = bitcast float %893 to i32, !dbg !75
  %910 = bitcast float %894 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %739, i32 %907, i32 %908, i32 %909, i32 %910, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %911 = load float, ptr addrspace(3) %743, align 16, !dbg !75
  %912 = load float, ptr addrspace(3) %756, align 4, !dbg !75
  %913 = fcmp uno <2 x float> %762, zeroinitializer, !dbg !76
  %914 = fcmp uno <16 x float> %765, zeroinitializer, !dbg !78
  %915 = fcmp uno <4 x float> %766, zeroinitializer, !dbg !76
  %916 = fcmp uno float %760, 0.000000e+00, !dbg !76
  %917 = fcmp uno float %761, 0.000000e+00, !dbg !76
  %918 = insertelement <2 x i32> poison, i32 %841, i64 0, !dbg !67
  %919 = insertelement <2 x i32> %918, i32 %842, i64 1, !dbg !67
  %920 = bitcast <2 x i32> %919 to <2 x float>, !dbg !67
  %921 = fpext <2 x bfloat> %848 to <2 x float>, !dbg !80
  %922 = insertelement <2 x i32> poison, i32 %853, i64 0, !dbg !71
  %923 = insertelement <2 x i32> %922, i32 %854, i64 1, !dbg !71
  %924 = bitcast <2 x i32> %923 to <2 x float>, !dbg !71
  %925 = fpext <2 x bfloat> %860 to <2 x float>, !dbg !81
  %926 = load <2 x float>, ptr addrspace(3) %740, align 16, !dbg !75
  %927 = fadd <2 x float> %920, %921, !dbg !82
  %928 = fadd <2 x float> %927, splat (float 1.000000e+00), !dbg !83
  %929 = fmul <2 x float> %928, %926, !dbg !84
  %930 = extractelement <2 x float> %928, i64 0, !dbg !84
  %931 = extractelement <2 x float> %928, i64 1, !dbg !84
  %932 = fmul float %930, %911, !dbg !84
  %933 = fmul float %931, %912, !dbg !84
  %934 = fadd <2 x float> %924, %925, !dbg !85
  %935 = fadd <2 x float> %934, %929, !dbg !86
  %936 = extractelement <2 x float> %934, i64 0, !dbg !86
  %937 = extractelement <2 x float> %934, i64 1, !dbg !86
  %938 = fadd float %936, %932, !dbg !86
  %939 = fadd float %937, %933, !dbg !86
  %940 = fcmp olt <2 x float> %762, %935, !dbg !87
  %941 = fcmp olt float %760, %938, !dbg !87
  %942 = fcmp olt float %761, %939, !dbg !87
  %943 = or <2 x i1> %913, %940, !dbg !88
  %944 = or i1 %916, %941, !dbg !88
  %945 = or i1 %917, %942, !dbg !88
  %946 = select <2 x i1> %943, <2 x float> %762, <2 x float> %935, !dbg !89
  %947 = select i1 %944, float %760, float %938, !dbg !89
  %948 = select i1 %945, float %761, float %939, !dbg !89
  %949 = insertelement <2 x i1> poison, i1 %784, i64 0, !dbg !90
  %950 = shufflevector <2 x i1> %949, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !90
  %951 = select <2 x i1> %950, <2 x float> %946, <2 x float> %762, !dbg !90
  %952 = select i1 %784, float %947, float %760, !dbg !90
  %953 = select i1 %784, float %948, float %761, !dbg !90
  %954 = extractelement <2 x float> %935, i64 0, !dbg !91
  %955 = extractelement <2 x float> %935, i64 1, !dbg !91
  %956 = fcmp uno <4 x float> %763, zeroinitializer, !dbg !78
  %957 = fcmp uno <4 x float> %764, zeroinitializer, !dbg !78
  %958 = shufflevector <2 x float> %935, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !92
  %959 = insertelement <4 x float> %958, float %938, i64 0, !dbg !92
  %960 = shufflevector <2 x float> %935, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !92
  %961 = insertelement <4 x float> %960, float %939, i64 0, !dbg !92
  %962 = insertelement <2 x i32> poison, i32 %843, i64 0, !dbg !67
  %963 = insertelement <2 x i32> %962, i32 %844, i64 1, !dbg !67
  %964 = bitcast <2 x i32> %963 to <2 x float>, !dbg !67
  %965 = fpext <2 x bfloat> %850 to <2 x float>, !dbg !80
  %966 = insertelement <2 x i32> poison, i32 %855, i64 0, !dbg !71
  %967 = insertelement <2 x i32> %966, i32 %856, i64 1, !dbg !71
  %968 = bitcast <2 x i32> %967 to <2 x float>, !dbg !71
  %969 = fpext <2 x bfloat> %862 to <2 x float>, !dbg !81
  %970 = load <2 x float>, ptr addrspace(3) %753, align 8, !dbg !75
  %971 = load <2 x float>, ptr addrspace(3) %741, align 16, !dbg !75
  %972 = load <2 x float>, ptr addrspace(3) %754, align 8, !dbg !75
  %973 = load <2 x float>, ptr addrspace(3) %742, align 16, !dbg !75
  %974 = load <2 x float>, ptr addrspace(3) %755, align 8, !dbg !75
  %975 = load <2 x float>, ptr addrspace(3) %757, align 8, !dbg !75
  %976 = fadd <2 x float> %964, %965, !dbg !82
  %977 = fadd <2 x float> %976, splat (float 1.000000e+00), !dbg !83
  %978 = fadd <2 x float> %968, %969, !dbg !85
  %979 = shufflevector <2 x float> %928, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !84
  %980 = shufflevector <2 x float> %977, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !84
  %981 = shufflevector <4 x float> %980, <4 x float> %979, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !84
  %982 = shufflevector <4 x float> %981, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %983 = shufflevector <2 x float> %970, <2 x float> %972, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %984 = shufflevector <2 x float> %974, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %985 = shufflevector <16 x float> %983, <16 x float> %984, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %986 = shufflevector <2 x float> %975, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %987 = shufflevector <16 x float> %985, <16 x float> %986, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %988 = shufflevector <2 x float> %970, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %989 = shufflevector <16 x float> %987, <16 x float> %988, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %990 = shufflevector <2 x float> %971, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %991 = shufflevector <16 x float> %989, <16 x float> %990, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %992 = shufflevector <2 x float> %972, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %993 = shufflevector <16 x float> %991, <16 x float> %992, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !84
  %994 = shufflevector <2 x float> %973, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %995 = shufflevector <16 x float> %993, <16 x float> %994, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !84
  %996 = fmul <16 x float> %982, %995, !dbg !84
  %997 = shufflevector <2 x float> %934, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !86
  %998 = shufflevector <2 x float> %978, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !86
  %999 = shufflevector <4 x float> %998, <4 x float> %997, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !86
  %1000 = shufflevector <4 x float> %999, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !86
  %1001 = fadd <16 x float> %1000, %996, !dbg !86
  %1002 = extractelement <16 x float> %1001, i64 4, !dbg !91
  %1003 = extractelement <16 x float> %1001, i64 5, !dbg !91
  %1004 = extractelement <16 x float> %1001, i64 6, !dbg !91
  %1005 = extractelement <16 x float> %1001, i64 7, !dbg !91
  %1006 = shufflevector <16 x float> %1001, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !87
  %1007 = fcmp olt <4 x float> %766, %1006, !dbg !87
  %1008 = or <4 x i1> %915, %1007, !dbg !88
  %1009 = select <4 x i1> %1008, <4 x float> %766, <4 x float> %1006, !dbg !89
  %1010 = fcmp ogt <16 x float> %765, %1001, !dbg !92
  %1011 = fcmp olt <16 x float> %765, %1001, !dbg !92
  %1012 = shufflevector <16 x i1> %1010, <16 x i1> %1011, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !92
  %1013 = or <16 x i1> %914, %1012, !dbg !93
  %1014 = select <16 x i1> %1013, <16 x float> %765, <16 x float> %1001, !dbg !94
  %1015 = insertelement <4 x i1> poison, i1 %784, i64 0, !dbg !90
  %1016 = shufflevector <4 x i1> %1015, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !90
  %1017 = select <4 x i1> %1016, <4 x float> %1009, <4 x float> %766, !dbg !90
  %1018 = shufflevector <16 x float> %1001, <16 x float> poison, <4 x i32> <i32 poison, i32 14, i32 10, i32 poison>, !dbg !92
  %1019 = shufflevector <4 x float> %959, <4 x float> %1018, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !92
  %1020 = fcmp ogt <4 x float> %763, %1019, !dbg !92
  %1021 = shufflevector <16 x float> %1001, <16 x float> poison, <4 x i32> <i32 poison, i32 15, i32 11, i32 poison>, !dbg !92
  %1022 = shufflevector <4 x float> %961, <4 x float> %1021, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !92
  %1023 = fcmp ogt <4 x float> %764, %1022, !dbg !92
  %1024 = or <4 x i1> %956, %1020, !dbg !93
  %1025 = or <4 x i1> %957, %1023, !dbg !93
  %1026 = select <4 x i1> %1024, <4 x float> %763, <4 x float> %1019, !dbg !94
  %1027 = select <4 x i1> %1025, <4 x float> %764, <4 x float> %1022, !dbg !94
  %1028 = select <4 x i1> %1016, <4 x float> %1026, <4 x float> %763, !dbg !95
  %1029 = select <4 x i1> %1016, <4 x float> %1027, <4 x float> %764, !dbg !95
  %1030 = insertelement <16 x i1> poison, i1 %784, i64 0, !dbg !95
  %1031 = shufflevector <16 x i1> %1030, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !95
  %1032 = select <16 x i1> %1031, <16 x float> %1014, <16 x float> %765, !dbg !95
  %1033 = sext i32 %778 to i64, !dbg !96
  %1034 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1033, !dbg !96
  %1035 = sext i32 %779 to i64, !dbg !96
  %1036 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1035, !dbg !96
  %1037 = fptrunc float %954 to bfloat, !dbg !91
  %1038 = fptrunc float %955 to bfloat, !dbg !91
  %1039 = extractelement <16 x float> %1001, i64 0, !dbg !91
  %1040 = fptrunc float %1039 to bfloat, !dbg !91
  %1041 = extractelement <16 x float> %1001, i64 1, !dbg !91
  %1042 = fptrunc float %1041 to bfloat, !dbg !91
  %1043 = extractelement <16 x float> %1001, i64 10, !dbg !91
  %1044 = fptrunc float %1043 to bfloat, !dbg !91
  %1045 = extractelement <16 x float> %1001, i64 11, !dbg !91
  %1046 = fptrunc float %1045 to bfloat, !dbg !91
  %1047 = extractelement <16 x float> %1001, i64 2, !dbg !91
  %1048 = fptrunc float %1047 to bfloat, !dbg !91
  %1049 = extractelement <16 x float> %1001, i64 3, !dbg !91
  %1050 = fptrunc float %1049 to bfloat, !dbg !91
  %1051 = extractelement <16 x float> %1001, i64 14, !dbg !91
  %1052 = fptrunc float %1051 to bfloat, !dbg !91
  %1053 = extractelement <16 x float> %1001, i64 15, !dbg !91
  %1054 = fptrunc float %1053 to bfloat, !dbg !91
  %1055 = fptrunc float %1002 to bfloat, !dbg !91
  %1056 = fptrunc float %1003 to bfloat, !dbg !91
  %1057 = fptrunc float %938 to bfloat, !dbg !91
  %1058 = fptrunc float %939 to bfloat, !dbg !91
  %1059 = fptrunc float %1004 to bfloat, !dbg !91
  %1060 = fptrunc float %1005 to bfloat, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1061 = bitcast bfloat %1037 to i16, !dbg !91
  %1062 = bitcast bfloat %1038 to i16, !dbg !91
  %1063 = bitcast bfloat %1040 to i16, !dbg !91
  %1064 = bitcast bfloat %1042 to i16, !dbg !91
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %745, i16 %1061, i16 %1062, i16 %1063, i16 %1064, i1 true) #5, !dbg !91
  %1065 = bitcast bfloat %1044 to i16, !dbg !91
  %1066 = bitcast bfloat %1046 to i16, !dbg !91
  %1067 = bitcast bfloat %1048 to i16, !dbg !91
  %1068 = bitcast bfloat %1050 to i16, !dbg !91
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %746, i16 %1065, i16 %1066, i16 %1067, i16 %1068, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1069 = load <4 x i32>, ptr addrspace(3) %750, align 16, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1070 = bitcast bfloat %1052 to i16, !dbg !91
  %1071 = bitcast bfloat %1054 to i16, !dbg !91
  %1072 = bitcast bfloat %1055 to i16, !dbg !91
  %1073 = bitcast bfloat %1056 to i16, !dbg !91
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %745, i16 %1070, i16 %1071, i16 %1072, i16 %1073, i1 true) #5, !dbg !91
  %1074 = bitcast bfloat %1057 to i16, !dbg !91
  %1075 = bitcast bfloat %1058 to i16, !dbg !91
  %1076 = bitcast bfloat %1059 to i16, !dbg !91
  %1077 = bitcast bfloat %1060 to i16, !dbg !91
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %746, i16 %1074, i16 %1075, i16 %1076, i16 %1077, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1078 = load <4 x i32>, ptr addrspace(3) %750, align 16, !dbg !91
  %.extract = extractelement <4 x i32> %1069, i64 0, !dbg !91
  %.extract129 = extractelement <4 x i32> %1069, i64 1, !dbg !91
  %.extract131 = extractelement <4 x i32> %1069, i64 2, !dbg !91
  %.extract133 = extractelement <4 x i32> %1069, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %1034, i1 %786) #5, !dbg !91
  %.extract135 = extractelement <4 x i32> %1078, i64 0, !dbg !91
  %.extract137 = extractelement <4 x i32> %1078, i64 1, !dbg !91
  %.extract139 = extractelement <4 x i32> %1078, i64 2, !dbg !91
  %.extract141 = extractelement <4 x i32> %1078, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %1036, i1 %787) #5, !dbg !91
  br i1 %759, label %758, label %1079, !dbg !57

1079:                                             ; preds = %758
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1080 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %951, <2 x i32> <i32 0, i32 2>, !dbg !99
  %1081 = fcmp olt <2 x float> %1080, %951, !dbg !99
  %1082 = fcmp uno <2 x float> %1080, %951, !dbg !99
  %shift = shufflevector <2 x i1> %1081, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !100
  %1083 = or <2 x i1> %shift, %1082, !dbg !100
  %1084 = extractelement <2 x i1> %1083, i64 0, !dbg !100
  %1085 = extractelement <2 x float> %951, i64 0, !dbg !101
  %1086 = extractelement <2 x float> %951, i64 1, !dbg !101
  %1087 = select i1 %1084, float %1085, float %1086, !dbg !101
  %1088 = extractelement <16 x float> %1032, i64 8, !dbg !99
  %1089 = fcmp olt float %1087, %1088, !dbg !99
  %1090 = fcmp uno float %1087, 0.000000e+00, !dbg !102
  %1091 = or i1 %1089, %1090, !dbg !100
  %1092 = select i1 %1091, float %1087, float %1088, !dbg !101
  %1093 = extractelement <16 x float> %1032, i64 9, !dbg !99
  %1094 = fcmp olt float %1092, %1093, !dbg !99
  %1095 = fcmp uno float %1092, 0.000000e+00, !dbg !102
  %1096 = or i1 %1094, %1095, !dbg !100
  %1097 = select i1 %1096, float %1092, float %1093, !dbg !101
  %1098 = extractelement <16 x float> %1032, i64 10, !dbg !99
  %1099 = extractelement <16 x float> %1032, i64 11, !dbg !99
  %1100 = fcmp olt float %1098, %1099, !dbg !99
  %1101 = fcmp uno float %1098, 0.000000e+00, !dbg !102
  %1102 = or i1 %1100, %1101, !dbg !100
  %1103 = select i1 %1102, float %1098, float %1099, !dbg !101
  %1104 = extractelement <16 x float> %1032, i64 12, !dbg !99
  %1105 = fcmp olt float %1103, %1104, !dbg !99
  %1106 = fcmp uno float %1103, 0.000000e+00, !dbg !102
  %1107 = or i1 %1105, %1106, !dbg !100
  %1108 = select i1 %1107, float %1103, float %1104, !dbg !101
  %1109 = extractelement <16 x float> %1032, i64 13, !dbg !99
  %1110 = fcmp olt float %1108, %1109, !dbg !99
  %1111 = fcmp uno float %1108, 0.000000e+00, !dbg !102
  %1112 = or i1 %1110, %1111, !dbg !100
  %1113 = select i1 %1112, float %1108, float %1109, !dbg !101
  %1114 = extractelement <16 x float> %1032, i64 14, !dbg !99
  %1115 = extractelement <16 x float> %1032, i64 15, !dbg !99
  %1116 = fcmp olt float %1114, %1115, !dbg !99
  %1117 = fcmp uno float %1114, 0.000000e+00, !dbg !102
  %1118 = or i1 %1116, %1117, !dbg !100
  %1119 = select i1 %1118, float %1114, float %1115, !dbg !101
  %1120 = extractelement <4 x float> %1017, i64 0, !dbg !99
  %1121 = fcmp olt float %1119, %1120, !dbg !99
  %1122 = fcmp uno float %1119, 0.000000e+00, !dbg !102
  %1123 = or i1 %1121, %1122, !dbg !100
  %1124 = select i1 %1123, float %1119, float %1120, !dbg !101
  %1125 = extractelement <4 x float> %1017, i64 1, !dbg !99
  %1126 = fcmp olt float %1124, %1125, !dbg !99
  %1127 = fcmp uno float %1124, 0.000000e+00, !dbg !102
  %1128 = or i1 %1126, %1127, !dbg !100
  %1129 = select i1 %1128, float %1124, float %1125, !dbg !101
  %1130 = fcmp olt float %952, %953, !dbg !99
  %1131 = fcmp uno float %952, 0.000000e+00, !dbg !102
  %1132 = or i1 %1130, %1131, !dbg !100
  %1133 = select i1 %1132, float %952, float %953, !dbg !101
  %1134 = extractelement <4 x float> %1017, i64 2, !dbg !99
  %1135 = fcmp olt float %1133, %1134, !dbg !99
  %1136 = fcmp uno float %1133, 0.000000e+00, !dbg !102
  %1137 = or i1 %1135, %1136, !dbg !100
  %1138 = select i1 %1137, float %1133, float %1134, !dbg !101
  %1139 = extractelement <4 x float> %1017, i64 3, !dbg !99
  %1140 = fcmp olt float %1138, %1139, !dbg !99
  %1141 = fcmp uno float %1138, 0.000000e+00, !dbg !102
  %1142 = or i1 %1140, %1141, !dbg !100
  %1143 = select i1 %1142, float %1138, float %1139, !dbg !101
  %1144 = bitcast float %1097 to i32, !dbg !97
  %1145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1144, i32 16, i32 31), !dbg !97
  %1146 = bitcast i32 %1145 to float, !dbg !97
  %1147 = fcmp olt float %1097, %1146, !dbg !99
  %1148 = fcmp uno float %1097, 0.000000e+00, !dbg !102
  %1149 = or i1 %1148, %1147, !dbg !100
  %1150 = select i1 %1149, float %1097, float %1146, !dbg !101
  %1151 = bitcast float %1150 to i32, !dbg !97
  %1152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1151, i32 8, i32 31), !dbg !97
  %1153 = bitcast i32 %1152 to float, !dbg !97
  %1154 = fcmp olt float %1150, %1153, !dbg !99
  %1155 = fcmp uno float %1150, 0.000000e+00, !dbg !102
  %1156 = or i1 %1154, %1155, !dbg !100
  %1157 = select i1 %1156, float %1150, float %1153, !dbg !101
  %1158 = bitcast float %1157 to i32, !dbg !97
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 4, i32 31), !dbg !97
  %1160 = bitcast i32 %1159 to float, !dbg !97
  %1161 = fcmp olt float %1157, %1160, !dbg !99
  %1162 = fcmp uno float %1157, 0.000000e+00, !dbg !102
  %1163 = or i1 %1161, %1162, !dbg !100
  %1164 = select i1 %1163, float %1157, float %1160, !dbg !101
  %1165 = bitcast float %1164 to i32, !dbg !97
  %1166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1165, i32 2, i32 31), !dbg !97
  %1167 = bitcast i32 %1166 to float, !dbg !97
  %1168 = fcmp olt float %1164, %1167, !dbg !99
  %1169 = fcmp uno float %1164, 0.000000e+00, !dbg !102
  %1170 = or i1 %1168, %1169, !dbg !100
  %1171 = select i1 %1170, float %1164, float %1167, !dbg !101
  %1172 = bitcast float %1171 to i32, !dbg !97
  %1173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 1, i32 31), !dbg !97
  %1174 = bitcast i32 %1173 to float, !dbg !97
  %1175 = fcmp olt float %1171, %1174, !dbg !99
  %1176 = fcmp uno float %1171, 0.000000e+00, !dbg !102
  %1177 = or i1 %1175, %1176, !dbg !100
  %1178 = bitcast float %1113 to i32, !dbg !97
  %1179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1178, i32 16, i32 31), !dbg !97
  %1180 = bitcast i32 %1179 to float, !dbg !97
  %1181 = fcmp olt float %1113, %1180, !dbg !99
  %1182 = fcmp uno float %1113, 0.000000e+00, !dbg !102
  %1183 = or i1 %1182, %1181, !dbg !100
  %1184 = select i1 %1183, float %1113, float %1180, !dbg !101
  %1185 = bitcast float %1184 to i32, !dbg !97
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 8, i32 31), !dbg !97
  %1187 = bitcast i32 %1186 to float, !dbg !97
  %1188 = fcmp olt float %1184, %1187, !dbg !99
  %1189 = fcmp uno float %1184, 0.000000e+00, !dbg !102
  %1190 = or i1 %1188, %1189, !dbg !100
  %1191 = select i1 %1190, float %1184, float %1187, !dbg !101
  %1192 = bitcast float %1191 to i32, !dbg !97
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 4, i32 31), !dbg !97
  %1194 = bitcast i32 %1193 to float, !dbg !97
  %1195 = fcmp olt float %1191, %1194, !dbg !99
  %1196 = fcmp uno float %1191, 0.000000e+00, !dbg !102
  %1197 = or i1 %1195, %1196, !dbg !100
  %1198 = select i1 %1197, float %1191, float %1194, !dbg !101
  %1199 = bitcast float %1198 to i32, !dbg !97
  %1200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1199, i32 2, i32 31), !dbg !97
  %1201 = bitcast i32 %1200 to float, !dbg !97
  %1202 = fcmp olt float %1198, %1201, !dbg !99
  %1203 = fcmp uno float %1198, 0.000000e+00, !dbg !102
  %1204 = or i1 %1202, %1203, !dbg !100
  %1205 = select i1 %1204, float %1198, float %1201, !dbg !101
  %1206 = bitcast float %1205 to i32, !dbg !97
  %1207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1206, i32 1, i32 31), !dbg !97
  %1208 = bitcast i32 %1207 to float, !dbg !97
  %1209 = fcmp olt float %1205, %1208, !dbg !99
  %1210 = fcmp uno float %1205, 0.000000e+00, !dbg !102
  %1211 = or i1 %1209, %1210, !dbg !100
  %1212 = bitcast float %1129 to i32, !dbg !97
  %1213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1212, i32 16, i32 31), !dbg !97
  %1214 = bitcast i32 %1213 to float, !dbg !97
  %1215 = fcmp olt float %1129, %1214, !dbg !99
  %1216 = fcmp uno float %1129, 0.000000e+00, !dbg !102
  %1217 = or i1 %1216, %1215, !dbg !100
  %1218 = select i1 %1217, float %1129, float %1214, !dbg !101
  %1219 = bitcast float %1218 to i32, !dbg !97
  %1220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1219, i32 8, i32 31), !dbg !97
  %1221 = bitcast i32 %1220 to float, !dbg !97
  %1222 = fcmp olt float %1218, %1221, !dbg !99
  %1223 = fcmp uno float %1218, 0.000000e+00, !dbg !102
  %1224 = or i1 %1222, %1223, !dbg !100
  %1225 = select i1 %1224, float %1218, float %1221, !dbg !101
  %1226 = bitcast float %1225 to i32, !dbg !97
  %1227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1226, i32 4, i32 31), !dbg !97
  %1228 = bitcast i32 %1227 to float, !dbg !97
  %1229 = fcmp olt float %1225, %1228, !dbg !99
  %1230 = fcmp uno float %1225, 0.000000e+00, !dbg !102
  %1231 = or i1 %1229, %1230, !dbg !100
  %1232 = select i1 %1231, float %1225, float %1228, !dbg !101
  %1233 = bitcast float %1232 to i32, !dbg !97
  %1234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1233, i32 2, i32 31), !dbg !97
  %1235 = bitcast i32 %1234 to float, !dbg !97
  %1236 = fcmp olt float %1232, %1235, !dbg !99
  %1237 = fcmp uno float %1232, 0.000000e+00, !dbg !102
  %1238 = or i1 %1236, %1237, !dbg !100
  %1239 = select i1 %1238, float %1232, float %1235, !dbg !101
  %1240 = bitcast float %1239 to i32, !dbg !97
  %1241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1240, i32 1, i32 31), !dbg !97
  %1242 = bitcast i32 %1241 to float, !dbg !97
  %1243 = fcmp olt float %1239, %1242, !dbg !99
  %1244 = fcmp uno float %1239, 0.000000e+00, !dbg !102
  %1245 = or i1 %1243, %1244, !dbg !100
  %1246 = bitcast float %1143 to i32, !dbg !97
  %1247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1246, i32 16, i32 31), !dbg !97
  %1248 = bitcast i32 %1247 to float, !dbg !97
  %1249 = fcmp olt float %1143, %1248, !dbg !99
  %1250 = fcmp uno float %1143, 0.000000e+00, !dbg !102
  %1251 = or i1 %1250, %1249, !dbg !100
  %1252 = select i1 %1251, float %1143, float %1248, !dbg !101
  %1253 = bitcast float %1252 to i32, !dbg !97
  %1254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1253, i32 8, i32 31), !dbg !97
  %1255 = bitcast i32 %1254 to float, !dbg !97
  %1256 = fcmp olt float %1252, %1255, !dbg !99
  %1257 = fcmp uno float %1252, 0.000000e+00, !dbg !102
  %1258 = or i1 %1256, %1257, !dbg !100
  %1259 = select i1 %1258, float %1252, float %1255, !dbg !101
  %1260 = bitcast float %1259 to i32, !dbg !97
  %1261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1260, i32 4, i32 31), !dbg !97
  %1262 = bitcast i32 %1261 to float, !dbg !97
  %1263 = fcmp olt float %1259, %1262, !dbg !99
  %1264 = fcmp uno float %1259, 0.000000e+00, !dbg !102
  %1265 = or i1 %1263, %1264, !dbg !100
  %1266 = select i1 %1265, float %1259, float %1262, !dbg !101
  %1267 = bitcast float %1266 to i32, !dbg !97
  %1268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1267, i32 2, i32 31), !dbg !97
  %1269 = bitcast i32 %1268 to float, !dbg !97
  %1270 = fcmp olt float %1266, %1269, !dbg !99
  %1271 = fcmp uno float %1266, 0.000000e+00, !dbg !102
  %1272 = or i1 %1270, %1271, !dbg !100
  %1273 = select i1 %1272, float %1266, float %1269, !dbg !101
  %1274 = bitcast float %1273 to i32, !dbg !97
  %1275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1274, i32 1, i32 31), !dbg !97
  %1276 = bitcast i32 %1275 to float, !dbg !97
  %1277 = fcmp olt float %1273, %1276, !dbg !99
  %1278 = fcmp uno float %1273, 0.000000e+00, !dbg !102
  %1279 = or i1 %1277, %1278, !dbg !100
  %1280 = and i32 %344, 15, !dbg !97
  %1281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1280, !dbg !97
  %1282 = select i1 %1177, i32 %1172, i32 %1173, !dbg !101
  %1283 = insertelement <1 x i32> poison, i32 %1282, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1281, <1 x i32> %1283, i1 %637) #5, !dbg !97
  %1284 = or disjoint i32 %1280, 16, !dbg !97
  %1285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1284, !dbg !97
  %1286 = select i1 %1211, i32 %1206, i32 %1207, !dbg !101
  %1287 = insertelement <1 x i32> poison, i32 %1286, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1285, <1 x i32> %1287, i1 %637) #5, !dbg !97
  %1288 = or disjoint i32 %1280, 32, !dbg !97
  %1289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1288, !dbg !97
  %1290 = select i1 %1245, i32 %1240, i32 %1241, !dbg !101
  %1291 = insertelement <1 x i32> poison, i32 %1290, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1289, <1 x i32> %1291, i1 %637) #5, !dbg !97
  %1292 = or disjoint i32 %1280, 48, !dbg !97
  %1293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1292, !dbg !97
  %1294 = select i1 %1279, i32 %1274, i32 %1275, !dbg !101
  %1295 = insertelement <1 x i32> poison, i32 %1294, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1293, <1 x i32> %1295, i1 %637) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1296 = icmp slt i32 %22, 64, !dbg !97
  %1297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %647, i1 %1296) #5, !dbg !97
  %1298 = bitcast i32 %1297 to float, !dbg !97
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1297, i32 8, i32 31), !dbg !97
  %1300 = bitcast i32 %1299 to float, !dbg !97
  %1301 = fcmp olt float %1298, %1300, !dbg !99
  %1302 = fcmp uno float %1298, 0.000000e+00, !dbg !102
  %1303 = or i1 %1302, %1301, !dbg !100
  %1304 = select i1 %1303, float %1298, float %1300, !dbg !101
  %1305 = bitcast float %1304 to i32, !dbg !97
  %1306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1305, i32 4, i32 31), !dbg !97
  %1307 = bitcast i32 %1306 to float, !dbg !97
  %1308 = fcmp olt float %1304, %1307, !dbg !99
  %1309 = fcmp uno float %1304, 0.000000e+00, !dbg !102
  %1310 = or i1 %1308, %1309, !dbg !100
  %1311 = select i1 %1310, float %1304, float %1307, !dbg !101
  %1312 = bitcast float %1311 to i32, !dbg !97
  %1313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1312, i32 2, i32 31), !dbg !97
  %1314 = bitcast i32 %1313 to float, !dbg !97
  %1315 = fcmp olt float %1311, %1314, !dbg !99
  %1316 = fcmp uno float %1311, 0.000000e+00, !dbg !102
  %1317 = or i1 %1315, %1316, !dbg !100
  %1318 = select i1 %1317, float %1311, float %1314, !dbg !101
  %1319 = bitcast float %1318 to i32, !dbg !97
  %1320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1319, i32 1, i32 31), !dbg !97
  %1321 = bitcast i32 %1320 to float, !dbg !97
  %1322 = fcmp olt float %1318, %1321, !dbg !99
  %1323 = fcmp uno float %1318, 0.000000e+00, !dbg !102
  %1324 = or i1 %1322, %1323, !dbg !100
  %1325 = and i32 %22, 15, !dbg !97
  %1326 = icmp eq i32 %1325, 0, !dbg !97
  %1327 = and i1 %1296, %1326, !dbg !97
  %1328 = select i1 %1324, i32 %1319, i32 %1320, !dbg !101
  %1329 = insertelement <1 x i32> poison, i32 %1328, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %1329, i1 %1327) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1330 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %1331 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !97
  %1332 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !97
  %1333 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1334 = bitcast float %1330 to i32, !dbg !103
  %1335 = bitcast float %1331 to i32, !dbg !103
  %1336 = bitcast float %1332 to i32, !dbg !103
  %1337 = bitcast float %1333 to i32, !dbg !103
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1334, i32 %1335, i32 %1336, i32 %1337, i1 true) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1338 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %345, !dbg !103
  %1339 = load float, ptr addrspace(3) %1338, align 4, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1340 = fcmp ogt <4 x float> %1028, %1029, !dbg !106
  %1341 = extractelement <4 x float> %1028, i64 3, !dbg !107
  %1342 = fcmp uno float %1341, 0.000000e+00, !dbg !107
  %1343 = extractelement <4 x i1> %1340, i64 3, !dbg !108
  %1344 = or i1 %1343, %1342, !dbg !108
  %1345 = extractelement <4 x float> %1029, i64 3, !dbg !109
  %1346 = select i1 %1344, float %1341, float %1345, !dbg !109
  %1347 = extractelement <16 x float> %1032, i64 0, !dbg !106
  %1348 = fcmp ogt float %1346, %1347, !dbg !106
  %1349 = fcmp uno float %1346, 0.000000e+00, !dbg !107
  %1350 = or i1 %1348, %1349, !dbg !108
  %1351 = select i1 %1350, float %1346, float %1347, !dbg !109
  %1352 = extractelement <16 x float> %1032, i64 1, !dbg !106
  %1353 = fcmp ogt float %1351, %1352, !dbg !106
  %1354 = fcmp uno float %1351, 0.000000e+00, !dbg !107
  %1355 = or i1 %1353, %1354, !dbg !108
  %1356 = select i1 %1355, float %1351, float %1352, !dbg !109
  %1357 = extractelement <4 x float> %1028, i64 2, !dbg !107
  %1358 = fcmp uno float %1357, 0.000000e+00, !dbg !107
  %1359 = extractelement <4 x i1> %1340, i64 2, !dbg !108
  %1360 = or i1 %1359, %1358, !dbg !108
  %1361 = extractelement <4 x float> %1029, i64 2, !dbg !109
  %1362 = select i1 %1360, float %1357, float %1361, !dbg !109
  %1363 = extractelement <16 x float> %1032, i64 2, !dbg !106
  %1364 = fcmp ogt float %1362, %1363, !dbg !106
  %1365 = fcmp uno float %1362, 0.000000e+00, !dbg !107
  %1366 = or i1 %1364, %1365, !dbg !108
  %1367 = select i1 %1366, float %1362, float %1363, !dbg !109
  %1368 = extractelement <16 x float> %1032, i64 3, !dbg !106
  %1369 = fcmp ogt float %1367, %1368, !dbg !106
  %1370 = fcmp uno float %1367, 0.000000e+00, !dbg !107
  %1371 = or i1 %1369, %1370, !dbg !108
  %1372 = select i1 %1371, float %1367, float %1368, !dbg !109
  %1373 = extractelement <4 x float> %1028, i64 1, !dbg !107
  %1374 = fcmp uno float %1373, 0.000000e+00, !dbg !107
  %1375 = extractelement <4 x i1> %1340, i64 1, !dbg !108
  %1376 = or i1 %1375, %1374, !dbg !108
  %1377 = extractelement <4 x float> %1029, i64 1, !dbg !109
  %1378 = select i1 %1376, float %1373, float %1377, !dbg !109
  %1379 = extractelement <16 x float> %1032, i64 4, !dbg !106
  %1380 = fcmp ogt float %1378, %1379, !dbg !106
  %1381 = fcmp uno float %1378, 0.000000e+00, !dbg !107
  %1382 = or i1 %1380, %1381, !dbg !108
  %1383 = select i1 %1382, float %1378, float %1379, !dbg !109
  %1384 = extractelement <16 x float> %1032, i64 5, !dbg !106
  %1385 = fcmp ogt float %1383, %1384, !dbg !106
  %1386 = fcmp uno float %1383, 0.000000e+00, !dbg !107
  %1387 = or i1 %1385, %1386, !dbg !108
  %1388 = select i1 %1387, float %1383, float %1384, !dbg !109
  %1389 = extractelement <4 x float> %1028, i64 0, !dbg !107
  %1390 = fcmp uno float %1389, 0.000000e+00, !dbg !107
  %1391 = extractelement <4 x i1> %1340, i64 0, !dbg !108
  %1392 = or i1 %1391, %1390, !dbg !108
  %1393 = extractelement <4 x float> %1029, i64 0, !dbg !109
  %1394 = select i1 %1392, float %1389, float %1393, !dbg !109
  %1395 = extractelement <16 x float> %1032, i64 6, !dbg !106
  %1396 = fcmp ogt float %1394, %1395, !dbg !106
  %1397 = fcmp uno float %1394, 0.000000e+00, !dbg !107
  %1398 = or i1 %1396, %1397, !dbg !108
  %1399 = select i1 %1398, float %1394, float %1395, !dbg !109
  %1400 = extractelement <16 x float> %1032, i64 7, !dbg !106
  %1401 = fcmp ogt float %1399, %1400, !dbg !106
  %1402 = fcmp uno float %1399, 0.000000e+00, !dbg !107
  %1403 = or i1 %1401, %1402, !dbg !108
  %1404 = select i1 %1403, float %1399, float %1400, !dbg !109
  %1405 = bitcast float %1356 to i32, !dbg !104
  %1406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1405, i32 16, i32 31), !dbg !104
  %1407 = bitcast i32 %1406 to float, !dbg !104
  %1408 = fcmp ogt float %1356, %1407, !dbg !106
  %1409 = fcmp uno float %1356, 0.000000e+00, !dbg !107
  %1410 = or i1 %1409, %1408, !dbg !108
  %1411 = select i1 %1410, float %1356, float %1407, !dbg !109
  %1412 = bitcast float %1411 to i32, !dbg !104
  %1413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1412, i32 8, i32 31), !dbg !104
  %1414 = bitcast i32 %1413 to float, !dbg !104
  %1415 = fcmp ogt float %1411, %1414, !dbg !106
  %1416 = fcmp uno float %1411, 0.000000e+00, !dbg !107
  %1417 = or i1 %1415, %1416, !dbg !108
  %1418 = select i1 %1417, float %1411, float %1414, !dbg !109
  %1419 = bitcast float %1418 to i32, !dbg !104
  %1420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1419, i32 4, i32 31), !dbg !104
  %1421 = bitcast i32 %1420 to float, !dbg !104
  %1422 = fcmp ogt float %1418, %1421, !dbg !106
  %1423 = fcmp uno float %1418, 0.000000e+00, !dbg !107
  %1424 = or i1 %1422, %1423, !dbg !108
  %1425 = select i1 %1424, float %1418, float %1421, !dbg !109
  %1426 = bitcast float %1425 to i32, !dbg !104
  %1427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1426, i32 2, i32 31), !dbg !104
  %1428 = bitcast i32 %1427 to float, !dbg !104
  %1429 = fcmp ogt float %1425, %1428, !dbg !106
  %1430 = fcmp uno float %1425, 0.000000e+00, !dbg !107
  %1431 = or i1 %1429, %1430, !dbg !108
  %1432 = select i1 %1431, float %1425, float %1428, !dbg !109
  %1433 = bitcast float %1432 to i32, !dbg !104
  %1434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1433, i32 1, i32 31), !dbg !104
  %1435 = bitcast i32 %1434 to float, !dbg !104
  %1436 = fcmp ogt float %1432, %1435, !dbg !106
  %1437 = fcmp uno float %1432, 0.000000e+00, !dbg !107
  %1438 = or i1 %1436, %1437, !dbg !108
  %1439 = bitcast float %1372 to i32, !dbg !104
  %1440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1439, i32 16, i32 31), !dbg !104
  %1441 = bitcast i32 %1440 to float, !dbg !104
  %1442 = fcmp ogt float %1372, %1441, !dbg !106
  %1443 = fcmp uno float %1372, 0.000000e+00, !dbg !107
  %1444 = or i1 %1443, %1442, !dbg !108
  %1445 = select i1 %1444, float %1372, float %1441, !dbg !109
  %1446 = bitcast float %1445 to i32, !dbg !104
  %1447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1446, i32 8, i32 31), !dbg !104
  %1448 = bitcast i32 %1447 to float, !dbg !104
  %1449 = fcmp ogt float %1445, %1448, !dbg !106
  %1450 = fcmp uno float %1445, 0.000000e+00, !dbg !107
  %1451 = or i1 %1449, %1450, !dbg !108
  %1452 = select i1 %1451, float %1445, float %1448, !dbg !109
  %1453 = bitcast float %1452 to i32, !dbg !104
  %1454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1453, i32 4, i32 31), !dbg !104
  %1455 = bitcast i32 %1454 to float, !dbg !104
  %1456 = fcmp ogt float %1452, %1455, !dbg !106
  %1457 = fcmp uno float %1452, 0.000000e+00, !dbg !107
  %1458 = or i1 %1456, %1457, !dbg !108
  %1459 = select i1 %1458, float %1452, float %1455, !dbg !109
  %1460 = bitcast float %1459 to i32, !dbg !104
  %1461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1460, i32 2, i32 31), !dbg !104
  %1462 = bitcast i32 %1461 to float, !dbg !104
  %1463 = fcmp ogt float %1459, %1462, !dbg !106
  %1464 = fcmp uno float %1459, 0.000000e+00, !dbg !107
  %1465 = or i1 %1463, %1464, !dbg !108
  %1466 = select i1 %1465, float %1459, float %1462, !dbg !109
  %1467 = bitcast float %1466 to i32, !dbg !104
  %1468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1467, i32 1, i32 31), !dbg !104
  %1469 = bitcast i32 %1468 to float, !dbg !104
  %1470 = fcmp ogt float %1466, %1469, !dbg !106
  %1471 = fcmp uno float %1466, 0.000000e+00, !dbg !107
  %1472 = or i1 %1470, %1471, !dbg !108
  %1473 = bitcast float %1388 to i32, !dbg !104
  %1474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1473, i32 16, i32 31), !dbg !104
  %1475 = bitcast i32 %1474 to float, !dbg !104
  %1476 = fcmp ogt float %1388, %1475, !dbg !106
  %1477 = fcmp uno float %1388, 0.000000e+00, !dbg !107
  %1478 = or i1 %1477, %1476, !dbg !108
  %1479 = select i1 %1478, float %1388, float %1475, !dbg !109
  %1480 = bitcast float %1479 to i32, !dbg !104
  %1481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1480, i32 8, i32 31), !dbg !104
  %1482 = bitcast i32 %1481 to float, !dbg !104
  %1483 = fcmp ogt float %1479, %1482, !dbg !106
  %1484 = fcmp uno float %1479, 0.000000e+00, !dbg !107
  %1485 = or i1 %1483, %1484, !dbg !108
  %1486 = select i1 %1485, float %1479, float %1482, !dbg !109
  %1487 = bitcast float %1486 to i32, !dbg !104
  %1488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1487, i32 4, i32 31), !dbg !104
  %1489 = bitcast i32 %1488 to float, !dbg !104
  %1490 = fcmp ogt float %1486, %1489, !dbg !106
  %1491 = fcmp uno float %1486, 0.000000e+00, !dbg !107
  %1492 = or i1 %1490, %1491, !dbg !108
  %1493 = select i1 %1492, float %1486, float %1489, !dbg !109
  %1494 = bitcast float %1493 to i32, !dbg !104
  %1495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1494, i32 2, i32 31), !dbg !104
  %1496 = bitcast i32 %1495 to float, !dbg !104
  %1497 = fcmp ogt float %1493, %1496, !dbg !106
  %1498 = fcmp uno float %1493, 0.000000e+00, !dbg !107
  %1499 = or i1 %1497, %1498, !dbg !108
  %1500 = select i1 %1499, float %1493, float %1496, !dbg !109
  %1501 = bitcast float %1500 to i32, !dbg !104
  %1502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1501, i32 1, i32 31), !dbg !104
  %1503 = bitcast i32 %1502 to float, !dbg !104
  %1504 = fcmp ogt float %1500, %1503, !dbg !106
  %1505 = fcmp uno float %1500, 0.000000e+00, !dbg !107
  %1506 = or i1 %1504, %1505, !dbg !108
  %1507 = bitcast float %1404 to i32, !dbg !104
  %1508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1507, i32 16, i32 31), !dbg !104
  %1509 = bitcast i32 %1508 to float, !dbg !104
  %1510 = fcmp ogt float %1404, %1509, !dbg !106
  %1511 = fcmp uno float %1404, 0.000000e+00, !dbg !107
  %1512 = or i1 %1511, %1510, !dbg !108
  %1513 = select i1 %1512, float %1404, float %1509, !dbg !109
  %1514 = bitcast float %1513 to i32, !dbg !104
  %1515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1514, i32 8, i32 31), !dbg !104
  %1516 = bitcast i32 %1515 to float, !dbg !104
  %1517 = fcmp ogt float %1513, %1516, !dbg !106
  %1518 = fcmp uno float %1513, 0.000000e+00, !dbg !107
  %1519 = or i1 %1517, %1518, !dbg !108
  %1520 = select i1 %1519, float %1513, float %1516, !dbg !109
  %1521 = bitcast float %1520 to i32, !dbg !104
  %1522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1521, i32 4, i32 31), !dbg !104
  %1523 = bitcast i32 %1522 to float, !dbg !104
  %1524 = fcmp ogt float %1520, %1523, !dbg !106
  %1525 = fcmp uno float %1520, 0.000000e+00, !dbg !107
  %1526 = or i1 %1524, %1525, !dbg !108
  %1527 = select i1 %1526, float %1520, float %1523, !dbg !109
  %1528 = bitcast float %1527 to i32, !dbg !104
  %1529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1528, i32 2, i32 31), !dbg !104
  %1530 = bitcast i32 %1529 to float, !dbg !104
  %1531 = fcmp ogt float %1527, %1530, !dbg !106
  %1532 = fcmp uno float %1527, 0.000000e+00, !dbg !107
  %1533 = or i1 %1531, %1532, !dbg !108
  %1534 = select i1 %1533, float %1527, float %1530, !dbg !109
  %1535 = bitcast float %1534 to i32, !dbg !104
  %1536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1535, i32 1, i32 31), !dbg !104
  %1537 = bitcast i32 %1536 to float, !dbg !104
  %1538 = fcmp ogt float %1534, %1537, !dbg !106
  %1539 = fcmp uno float %1534, 0.000000e+00, !dbg !107
  %1540 = or i1 %1538, %1539, !dbg !108
  %1541 = select i1 %1438, i32 %1433, i32 %1434, !dbg !109
  %1542 = insertelement <1 x i32> poison, i32 %1541, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1281, <1 x i32> %1542, i1 %637) #5, !dbg !104
  %1543 = select i1 %1472, i32 %1467, i32 %1468, !dbg !109
  %1544 = insertelement <1 x i32> poison, i32 %1543, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1285, <1 x i32> %1544, i1 %637) #5, !dbg !104
  %1545 = select i1 %1506, i32 %1501, i32 %1502, !dbg !109
  %1546 = insertelement <1 x i32> poison, i32 %1545, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1289, <1 x i32> %1546, i1 %637) #5, !dbg !104
  %1547 = select i1 %1540, i32 %1535, i32 %1536, !dbg !109
  %1548 = insertelement <1 x i32> poison, i32 %1547, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1293, <1 x i32> %1548, i1 %637) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1549 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %647, i1 %1296) #5, !dbg !104
  %1550 = bitcast i32 %1549 to float, !dbg !104
  %1551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1549, i32 8, i32 31), !dbg !104
  %1552 = bitcast i32 %1551 to float, !dbg !104
  %1553 = fcmp ogt float %1550, %1552, !dbg !106
  %1554 = fcmp uno float %1550, 0.000000e+00, !dbg !107
  %1555 = or i1 %1554, %1553, !dbg !108
  %1556 = select i1 %1555, float %1550, float %1552, !dbg !109
  %1557 = bitcast float %1556 to i32, !dbg !104
  %1558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1557, i32 4, i32 31), !dbg !104
  %1559 = bitcast i32 %1558 to float, !dbg !104
  %1560 = fcmp ogt float %1556, %1559, !dbg !106
  %1561 = fcmp uno float %1556, 0.000000e+00, !dbg !107
  %1562 = or i1 %1560, %1561, !dbg !108
  %1563 = select i1 %1562, float %1556, float %1559, !dbg !109
  %1564 = bitcast float %1563 to i32, !dbg !104
  %1565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1564, i32 2, i32 31), !dbg !104
  %1566 = bitcast i32 %1565 to float, !dbg !104
  %1567 = fcmp ogt float %1563, %1566, !dbg !106
  %1568 = fcmp uno float %1563, 0.000000e+00, !dbg !107
  %1569 = or i1 %1567, %1568, !dbg !108
  %1570 = select i1 %1569, float %1563, float %1566, !dbg !109
  %1571 = bitcast float %1570 to i32, !dbg !104
  %1572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1571, i32 1, i32 31), !dbg !104
  %1573 = bitcast i32 %1572 to float, !dbg !104
  %1574 = fcmp ogt float %1570, %1573, !dbg !106
  %1575 = fcmp uno float %1570, 0.000000e+00, !dbg !107
  %1576 = or i1 %1574, %1575, !dbg !108
  %1577 = select i1 %1576, i32 %1571, i32 %1572, !dbg !109
  %1578 = insertelement <1 x i32> poison, i32 %1577, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %1578, i1 %1327) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1579 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !104
  %1580 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !104
  %1581 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !104
  %1582 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1583 = bitcast float %1579 to i32, !dbg !110
  %1584 = bitcast float %1580 to i32, !dbg !110
  %1585 = bitcast float %1581 to i32, !dbg !110
  %1586 = bitcast float %1582 to i32, !dbg !110
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1583, i32 %1584, i32 %1585, i32 %1586, i1 true) #5, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1587 = load float, ptr addrspace(3) %1338, align 4, !dbg !110
  %1588 = sext i32 %346 to i64, !dbg !111
  %1589 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1588, !dbg !111
  %1590 = fptrunc float %1339 to bfloat, !dbg !103
  %1591 = and i32 %22, 508, !dbg !103
  %1592 = icmp eq i32 %1591, 0, !dbg !103
  %1593 = bitcast bfloat %1590 to i16, !dbg !103
  %1594 = and i1 %1592, %348, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1593, ptr addrspace(1) %1589, i1 %1594) #5, !dbg !103
  %1595 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1588, !dbg !112
  %1596 = fptrunc float %1587 to bfloat, !dbg !110
  %1597 = bitcast bfloat %1596 to i16, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1597, ptr addrspace(1) %1595, i1 %1594) #5, !dbg !110
  %1598 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1588, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1593, ptr addrspace(1) %1598, i1 %1594) #5, !dbg !114
  %1599 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1588, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1597, ptr addrspace(1) %1599, i1 %1594) #5, !dbg !116
  %1600 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1588, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1593, ptr addrspace(1) %1600, i1 %1594) #5, !dbg !118
  %1601 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1588, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1597, ptr addrspace(1) %1601, i1 %1594) #5, !dbg !120
  %1602 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1588, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1593, ptr addrspace(1) %1602, i1 %1594) #5, !dbg !122
  %1603 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1588, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1597, ptr addrspace(1) %1603, i1 %1594) #5, !dbg !124
  %1604 = insertelement <4 x float> poison, float %1333, i64 0, !dbg !125
  %1605 = insertelement <4 x float> %1604, float %1332, i64 1, !dbg !125
  %1606 = insertelement <4 x float> %1605, float %1331, i64 2, !dbg !125
  %1607 = insertelement <4 x float> %1606, float %1330, i64 3, !dbg !125
  %1608 = fcmp oge <4 x float> %1607, zeroinitializer, !dbg !125
  %1609 = select <4 x i1> %1608, <4 x float> zeroinitializer, <4 x float> %1607, !dbg !125
  %1610 = fsub <4 x float> zeroinitializer, %1609, !dbg !127
  %1611 = insertelement <4 x float> poison, float %1582, i64 0, !dbg !128
  %1612 = insertelement <4 x float> %1611, float %1581, i64 1, !dbg !128
  %1613 = insertelement <4 x float> %1612, float %1580, i64 2, !dbg !128
  %1614 = insertelement <4 x float> %1613, float %1579, i64 3, !dbg !128
  %1615 = fcmp ole <4 x float> %1614, zeroinitializer, !dbg !128
  %1616 = select <4 x i1> %1615, <4 x float> zeroinitializer, <4 x float> %1614, !dbg !128
  %1617 = fcmp ogt <4 x float> %1610, %1616, !dbg !130
  %1618 = fcmp uno <4 x float> %1610, zeroinitializer, !dbg !132
  %1619 = or <4 x i1> %1618, %1617, !dbg !133
  %1620 = select <4 x i1> %1619, <4 x float> %1610, <4 x float> %1616, !dbg !134
  %1621 = fmul <4 x float> %1620, splat (float 0x3F80204080000000), !dbg !135
  %1622 = fcmp ogt <4 x float> %1621, splat (float 0x3EE4F8B580000000), !dbg !136
  %1623 = extractelement <4 x float> %1621, i64 3, !dbg !138
  %1624 = fcmp uno float %1623, 0.000000e+00, !dbg !139
  %1625 = extractelement <4 x float> %1621, i64 2, !dbg !138
  %1626 = fcmp uno float %1625, 0.000000e+00, !dbg !139
  %1627 = extractelement <4 x float> %1621, i64 1, !dbg !138
  %1628 = fcmp uno float %1627, 0.000000e+00, !dbg !139
  %1629 = extractelement <4 x float> %1621, i64 0, !dbg !138
  %1630 = fcmp uno float %1629, 0.000000e+00, !dbg !139
  %1631 = extractelement <4 x i1> %1622, i64 3, !dbg !140
  %1632 = or i1 %1631, %1624, !dbg !140
  %1633 = extractelement <4 x i1> %1622, i64 2, !dbg !140
  %1634 = or i1 %1633, %1626, !dbg !140
  %1635 = extractelement <4 x i1> %1622, i64 1, !dbg !140
  %1636 = or i1 %1635, %1628, !dbg !140
  %1637 = extractelement <4 x i1> %1622, i64 0, !dbg !140
  %1638 = or i1 %1637, %1630, !dbg !140
  %1639 = select i1 %1632, float %1623, float 0x3EE4F8B580000000, !dbg !138
  %1640 = select i1 %1634, float %1625, float 0x3EE4F8B580000000, !dbg !138
  %1641 = select i1 %1636, float %1627, float 0x3EE4F8B580000000, !dbg !138
  %1642 = select i1 %1638, float %1629, float 0x3EE4F8B580000000, !dbg !138
  %1643 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1639), !dbg !141
  %1644 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1640), !dbg !141
  %1645 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1641), !dbg !141
  %1646 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1642), !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1647 = bitcast float %1643 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1647, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1647, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1647, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1647, i1 true) #5, !dbg !142
  %1648 = bitcast float %1644 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1648, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1648, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1648, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1648, i1 true) #5, !dbg !142
  %1649 = bitcast float %1645 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1649, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1649, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1649, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1649, i1 true) #5, !dbg !142
  %1650 = bitcast float %1646 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1650, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1650, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1650, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1650, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %.idx = shl nuw nsw i32 %23, 3, !dbg !142
  %1651 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !142
  %1652 = load float, ptr addrspace(3) %1651, align 8, !dbg !142
  br label %1653, !dbg !143

1653:                                             ; preds = %1079, %1653
  %1654 = phi i1 [ true, %1079 ], [ false, %1653 ]
  %indvars.iv227 = phi i64 [ 0, %1079 ], [ 2048, %1653 ]
  %1655 = or disjoint i64 %indvars.iv227, %39, !dbg !144
  %1656 = icmp samesign ult i64 %1655, 3072, !dbg !145
  %1657 = trunc nuw nsw i64 %1655 to i32, !dbg !146
  %1658 = add i32 %37, %1657, !dbg !146
  %1659 = trunc nuw nsw i64 %indvars.iv227 to i32, !dbg !146
  %1660 = add i32 %38, %1659, !dbg !146
  %1661 = sext i32 %1658 to i64, !dbg !147
  %1662 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1661, !dbg !147
  %1663 = sext i32 %1660 to i64, !dbg !147
  %1664 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1663, !dbg !147
  %1665 = and i1 %29, %1656, !dbg !148
  %1666 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1662, i1 %1665) #5, !dbg !149
  %1667 = extractvalue { i32, i32, i32, i32 } %1666, 0, !dbg !149
  %1668 = bitcast i32 %1667 to <2 x bfloat>, !dbg !149
  %1669 = extractvalue { i32, i32, i32, i32 } %1666, 1, !dbg !149
  %1670 = bitcast i32 %1669 to <2 x bfloat>, !dbg !149
  %1671 = extractvalue { i32, i32, i32, i32 } %1666, 2, !dbg !149
  %1672 = bitcast i32 %1671 to <2 x bfloat>, !dbg !149
  %1673 = extractvalue { i32, i32, i32, i32 } %1666, 3, !dbg !149
  %1674 = bitcast i32 %1673 to <2 x bfloat>, !dbg !149
  %1675 = extractelement <2 x bfloat> %1668, i64 0, !dbg !149
  %1676 = extractelement <2 x bfloat> %1668, i64 1, !dbg !149
  %1677 = extractelement <2 x bfloat> %1670, i64 0, !dbg !149
  %1678 = extractelement <2 x bfloat> %1670, i64 1, !dbg !149
  %1679 = extractelement <2 x bfloat> %1672, i64 0, !dbg !149
  %1680 = extractelement <2 x bfloat> %1672, i64 1, !dbg !149
  %1681 = extractelement <2 x bfloat> %1674, i64 0, !dbg !149
  %1682 = extractelement <2 x bfloat> %1674, i64 1, !dbg !149
  %1683 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1664, i1 %1665) #5, !dbg !149
  %1684 = extractvalue { i32, i32, i32, i32 } %1683, 0, !dbg !149
  %1685 = bitcast i32 %1684 to <2 x bfloat>, !dbg !149
  %1686 = extractvalue { i32, i32, i32, i32 } %1683, 1, !dbg !149
  %1687 = bitcast i32 %1686 to <2 x bfloat>, !dbg !149
  %1688 = extractvalue { i32, i32, i32, i32 } %1683, 2, !dbg !149
  %1689 = bitcast i32 %1688 to <2 x bfloat>, !dbg !149
  %1690 = extractvalue { i32, i32, i32, i32 } %1683, 3, !dbg !149
  %1691 = bitcast i32 %1690 to <2 x bfloat>, !dbg !149
  %1692 = extractelement <2 x bfloat> %1685, i64 0, !dbg !149
  %1693 = extractelement <2 x bfloat> %1685, i64 1, !dbg !149
  %1694 = extractelement <2 x bfloat> %1687, i64 0, !dbg !149
  %1695 = extractelement <2 x bfloat> %1687, i64 1, !dbg !149
  %1696 = extractelement <2 x bfloat> %1689, i64 0, !dbg !149
  %1697 = extractelement <2 x bfloat> %1689, i64 1, !dbg !149
  %1698 = extractelement <2 x bfloat> %1691, i64 0, !dbg !149
  %1699 = extractelement <2 x bfloat> %1691, i64 1, !dbg !149
  %1700 = fpext bfloat %1675 to float, !dbg !150
  %1701 = fpext bfloat %1676 to float, !dbg !150
  %1702 = fpext bfloat %1677 to float, !dbg !150
  %1703 = fpext bfloat %1678 to float, !dbg !150
  %1704 = fpext bfloat %1679 to float, !dbg !150
  %1705 = fpext bfloat %1680 to float, !dbg !150
  %1706 = fpext bfloat %1681 to float, !dbg !150
  %1707 = fpext bfloat %1682 to float, !dbg !150
  %1708 = fpext bfloat %1692 to float, !dbg !150
  %1709 = fpext bfloat %1693 to float, !dbg !150
  %1710 = fpext bfloat %1694 to float, !dbg !150
  %1711 = fpext bfloat %1695 to float, !dbg !150
  %1712 = fpext bfloat %1696 to float, !dbg !150
  %1713 = fpext bfloat %1697 to float, !dbg !150
  %1714 = fpext bfloat %1698 to float, !dbg !150
  %1715 = fpext bfloat %1699 to float, !dbg !150
  %1716 = fmul float %1652, %1700, !dbg !142
  %1717 = fmul float %1652, %1701, !dbg !142
  %1718 = fmul float %1652, %1702, !dbg !142
  %1719 = fmul float %1652, %1703, !dbg !142
  %1720 = fmul float %1652, %1704, !dbg !142
  %1721 = fmul float %1652, %1705, !dbg !142
  %1722 = fmul float %1652, %1706, !dbg !142
  %1723 = fmul float %1652, %1707, !dbg !142
  %1724 = fmul float %1652, %1708, !dbg !142
  %1725 = fmul float %1652, %1709, !dbg !142
  %1726 = fmul float %1652, %1710, !dbg !142
  %1727 = fmul float %1652, %1711, !dbg !142
  %1728 = fmul float %1652, %1712, !dbg !142
  %1729 = fmul float %1652, %1713, !dbg !142
  %1730 = fmul float %1652, %1714, !dbg !142
  %1731 = fmul float %1652, %1715, !dbg !142
  %1732 = tail call float @llvm.nvvm.round.f(float %1716) #5, !dbg !151
  %1733 = tail call float @llvm.nvvm.round.f(float %1717) #5, !dbg !151
  %1734 = tail call float @llvm.nvvm.round.f(float %1718) #5, !dbg !151
  %1735 = tail call float @llvm.nvvm.round.f(float %1719) #5, !dbg !151
  %1736 = tail call float @llvm.nvvm.round.f(float %1720) #5, !dbg !151
  %1737 = tail call float @llvm.nvvm.round.f(float %1721) #5, !dbg !151
  %1738 = tail call float @llvm.nvvm.round.f(float %1722) #5, !dbg !151
  %1739 = tail call float @llvm.nvvm.round.f(float %1723) #5, !dbg !151
  %1740 = tail call float @llvm.nvvm.round.f(float %1724) #5, !dbg !151
  %1741 = tail call float @llvm.nvvm.round.f(float %1725) #5, !dbg !151
  %1742 = tail call float @llvm.nvvm.round.f(float %1726) #5, !dbg !151
  %1743 = tail call float @llvm.nvvm.round.f(float %1727) #5, !dbg !151
  %1744 = tail call float @llvm.nvvm.round.f(float %1728) #5, !dbg !151
  %1745 = tail call float @llvm.nvvm.round.f(float %1729) #5, !dbg !151
  %1746 = tail call float @llvm.nvvm.round.f(float %1730) #5, !dbg !151
  %1747 = tail call float @llvm.nvvm.round.f(float %1731) #5, !dbg !151
  %1748 = insertelement <4 x float> poison, float %1732, i64 0, !dbg !152
  %1749 = insertelement <4 x float> %1748, float %1733, i64 1, !dbg !152
  %1750 = insertelement <4 x float> %1749, float %1734, i64 2, !dbg !152
  %1751 = insertelement <4 x float> %1750, float %1735, i64 3, !dbg !152
  %1752 = fcmp ogt <4 x float> %1751, splat (float -1.270000e+02), !dbg !152
  %1753 = fcmp uno <4 x float> %1751, zeroinitializer, !dbg !154
  %1754 = or <4 x i1> %1752, %1753, !dbg !155
  %1755 = select <4 x i1> %1754, <4 x float> %1751, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1756 = fcmp olt <4 x float> %1755, splat (float 1.270000e+02), !dbg !157
  %1757 = fcmp uno <4 x float> %1755, zeroinitializer, !dbg !159
  %1758 = or <4 x i1> %1756, %1757, !dbg !160
  %1759 = fptosi <4 x float> %1755 to <4 x i8>, !dbg !161
  %1760 = select <4 x i1> %1758, <4 x i8> %1759, <4 x i8> splat (i8 127), !dbg !162
  %1761 = insertelement <4 x float> poison, float %1736, i64 0, !dbg !152
  %1762 = insertelement <4 x float> %1761, float %1737, i64 1, !dbg !152
  %1763 = insertelement <4 x float> %1762, float %1738, i64 2, !dbg !152
  %1764 = insertelement <4 x float> %1763, float %1739, i64 3, !dbg !152
  %1765 = fcmp ogt <4 x float> %1764, splat (float -1.270000e+02), !dbg !152
  %1766 = fcmp uno <4 x float> %1764, zeroinitializer, !dbg !154
  %1767 = or <4 x i1> %1765, %1766, !dbg !155
  %1768 = select <4 x i1> %1767, <4 x float> %1764, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1769 = fcmp olt <4 x float> %1768, splat (float 1.270000e+02), !dbg !157
  %1770 = fcmp uno <4 x float> %1768, zeroinitializer, !dbg !159
  %1771 = or <4 x i1> %1769, %1770, !dbg !160
  %1772 = fptosi <4 x float> %1768 to <4 x i8>, !dbg !161
  %1773 = select <4 x i1> %1771, <4 x i8> %1772, <4 x i8> splat (i8 127), !dbg !162
  %1774 = insertelement <4 x float> poison, float %1740, i64 0, !dbg !152
  %1775 = insertelement <4 x float> %1774, float %1741, i64 1, !dbg !152
  %1776 = insertelement <4 x float> %1775, float %1742, i64 2, !dbg !152
  %1777 = insertelement <4 x float> %1776, float %1743, i64 3, !dbg !152
  %1778 = fcmp ogt <4 x float> %1777, splat (float -1.270000e+02), !dbg !152
  %1779 = fcmp uno <4 x float> %1777, zeroinitializer, !dbg !154
  %1780 = or <4 x i1> %1778, %1779, !dbg !155
  %1781 = select <4 x i1> %1780, <4 x float> %1777, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1782 = fcmp olt <4 x float> %1781, splat (float 1.270000e+02), !dbg !157
  %1783 = fcmp uno <4 x float> %1781, zeroinitializer, !dbg !159
  %1784 = or <4 x i1> %1782, %1783, !dbg !160
  %1785 = fptosi <4 x float> %1781 to <4 x i8>, !dbg !161
  %1786 = select <4 x i1> %1784, <4 x i8> %1785, <4 x i8> splat (i8 127), !dbg !162
  %1787 = insertelement <4 x float> poison, float %1744, i64 0, !dbg !152
  %1788 = insertelement <4 x float> %1787, float %1745, i64 1, !dbg !152
  %1789 = insertelement <4 x float> %1788, float %1746, i64 2, !dbg !152
  %1790 = insertelement <4 x float> %1789, float %1747, i64 3, !dbg !152
  %1791 = fcmp ogt <4 x float> %1790, splat (float -1.270000e+02), !dbg !152
  %1792 = fcmp uno <4 x float> %1790, zeroinitializer, !dbg !154
  %1793 = or <4 x i1> %1791, %1792, !dbg !155
  %1794 = select <4 x i1> %1793, <4 x float> %1790, <4 x float> splat (float -1.270000e+02), !dbg !156
  %1795 = fcmp olt <4 x float> %1794, splat (float 1.270000e+02), !dbg !157
  %1796 = fcmp uno <4 x float> %1794, zeroinitializer, !dbg !159
  %1797 = or <4 x i1> %1795, %1796, !dbg !160
  %1798 = fptosi <4 x float> %1794 to <4 x i8>, !dbg !161
  %1799 = select <4 x i1> %1797, <4 x i8> %1798, <4 x i8> splat (i8 127), !dbg !162
  %1800 = getelementptr i8, ptr addrspace(1) %12, i64 %1661, !dbg !163
  %1801 = bitcast <4 x i8> %1760 to i32, !dbg !164
  %1802 = bitcast <4 x i8> %1773 to i32, !dbg !164
  %1803 = bitcast <4 x i8> %1786 to i32, !dbg !164
  %1804 = bitcast <4 x i8> %1799 to i32, !dbg !164
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1801, i32 %1802, i32 %1803, i32 %1804, ptr addrspace(1) %1800, i1 %1665) #5, !dbg !164
  %1805 = getelementptr i8, ptr addrspace(1) %13, i64 %1661, !dbg !165
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1801, i32 %1802, i32 %1803, i32 %1804, ptr addrspace(1) %1805, i1 %1665) #5, !dbg !166
  %1806 = getelementptr i8, ptr addrspace(1) %14, i64 %1661, !dbg !167
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1801, i32 %1802, i32 %1803, i32 %1804, ptr addrspace(1) %1806, i1 %1665) #5, !dbg !168
  %1807 = getelementptr i8, ptr addrspace(1) %15, i64 %1661, !dbg !169
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1801, i32 %1802, i32 %1803, i32 %1804, ptr addrspace(1) %1807, i1 %1665) #5, !dbg !170
  br i1 %1654, label %1653, label %1808, !dbg !143

1808:                                             ; preds = %1653
  ret void, !dbg !171
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 61, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 46, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 69, column: 24, scope: !6)
!56 = !DILocation(line: 70, column: 32, scope: !6)
!57 = !DILocation(line: 53, column: 40, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 55, column: 29, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 61, scope: !6)
!63 = !DILocation(line: 59, column: 51, scope: !6)
!64 = !DILocation(line: 59, column: 113, scope: !6)
!65 = !DILocation(line: 60, column: 42, scope: !6)
!66 = !DILocation(line: 60, column: 35, scope: !6)
!67 = !DILocation(line: 60, column: 49, scope: !6)
!68 = !DILocation(line: 61, column: 35, scope: !6)
!69 = !DILocation(line: 61, column: 49, scope: !6)
!70 = !DILocation(line: 62, column: 35, scope: !6)
!71 = !DILocation(line: 62, column: 42, scope: !6)
!72 = !DILocation(line: 63, column: 35, scope: !6)
!73 = !DILocation(line: 63, column: 42, scope: !6)
!74 = !DILocation(line: 65, column: 24, scope: !6)
!75 = !DILocation(line: 71, column: 24, scope: !6)
!76 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !77)
!77 = !DILocation(line: 82, column: 47, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !79)
!79 = !DILocation(line: 84, column: 47, scope: !6)
!80 = !DILocation(line: 61, column: 102, scope: !6)
!81 = !DILocation(line: 63, column: 95, scope: !6)
!82 = !DILocation(line: 74, column: 24, scope: !6)
!83 = !DILocation(line: 76, column: 24, scope: !6)
!84 = !DILocation(line: 77, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 80, column: 24, scope: !6)
!87 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !77)
!88 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !77)
!89 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !77)
!90 = !DILocation(line: 83, column: 50, scope: !6)
!91 = !DILocation(line: 86, column: 53, scope: !6)
!92 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !79)
!93 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !79)
!94 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !79)
!95 = !DILocation(line: 85, column: 50, scope: !6)
!96 = !DILocation(line: 86, column: 29, scope: !6)
!97 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !98)
!98 = !DILocation(line: 87, column: 40, scope: !6)
!99 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !98)
!100 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !98)
!101 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !98)
!102 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !98)
!103 = !DILocation(line: 89, column: 37, scope: !6)
!104 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !105)
!105 = !DILocation(line: 88, column: 40, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !105)
!108 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !105)
!109 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !105)
!110 = !DILocation(line: 90, column: 37, scope: !6)
!111 = !DILocation(line: 89, column: 25, scope: !6)
!112 = !DILocation(line: 90, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 25, scope: !6)
!114 = !DILocation(line: 91, column: 37, scope: !6)
!115 = !DILocation(line: 92, column: 25, scope: !6)
!116 = !DILocation(line: 92, column: 37, scope: !6)
!117 = !DILocation(line: 93, column: 25, scope: !6)
!118 = !DILocation(line: 93, column: 37, scope: !6)
!119 = !DILocation(line: 94, column: 25, scope: !6)
!120 = !DILocation(line: 94, column: 37, scope: !6)
!121 = !DILocation(line: 95, column: 25, scope: !6)
!122 = !DILocation(line: 95, column: 37, scope: !6)
!123 = !DILocation(line: 96, column: 26, scope: !6)
!124 = !DILocation(line: 96, column: 38, scope: !6)
!125 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !126)
!126 = !DILocation(line: 105, column: 46, scope: !6)
!127 = !DILocation(line: 106, column: 17, scope: !6)
!128 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !129)
!129 = !DILocation(line: 107, column: 46, scope: !6)
!130 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !131)
!131 = !DILocation(line: 108, column: 46, scope: !6)
!132 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !131)
!135 = !DILocation(line: 110, column: 24, scope: !6)
!136 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !137)
!137 = !DILocation(line: 113, column: 46, scope: !6)
!138 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !137)
!139 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !137)
!140 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !137)
!141 = !DILocation(line: 116, column: 25, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 97, column: 40, scope: !6)
!144 = !DILocation(line: 98, column: 31, scope: !6)
!145 = !DILocation(line: 99, column: 29, scope: !6)
!146 = !DILocation(line: 103, column: 43, scope: !6)
!147 = !DILocation(line: 103, column: 36, scope: !6)
!148 = !DILocation(line: 103, column: 63, scope: !6)
!149 = !DILocation(line: 103, column: 53, scope: !6)
!150 = !DILocation(line: 103, column: 115, scope: !6)
!151 = !DILocation(line: 120, column: 36, scope: !6)
!152 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !153)
!153 = !DILocation(line: 123, column: 46, scope: !6)
!154 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !153)
!155 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !153)
!156 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !153)
!157 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !158)
!158 = !DILocation(line: 125, column: 46, scope: !6)
!159 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !158)
!160 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !158)
!161 = !DILocation(line: 127, column: 25, scope: !6)
!162 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !158)
!163 = !DILocation(line: 128, column: 30, scope: !6)
!164 = !DILocation(line: 128, column: 54, scope: !6)
!165 = !DILocation(line: 129, column: 30, scope: !6)
!166 = !DILocation(line: 129, column: 54, scope: !6)
!167 = !DILocation(line: 130, column: 30, scope: !6)
!168 = !DILocation(line: 130, column: 54, scope: !6)
!169 = !DILocation(line: 131, column: 30, scope: !6)
!170 = !DILocation(line: 131, column: 54, scope: !6)
!171 = !DILocation(line: 97, column: 4, scope: !6)
