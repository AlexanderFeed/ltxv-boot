; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %8 = lshr i32 %7, 7, !dbg !9
  %.lobit = and i32 %8, 1, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %10, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = insertelement <4 x i1> poison, i1 %12, i64 0, !dbg !14
  %14 = shufflevector <4 x i1> %13, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !14
  %15 = shl i32 %7, 1, !dbg !15
  %16 = and i32 %15, 510, !dbg !15
  %17 = zext nneg i32 %16 to i64, !dbg !16
  %18 = shl i32 %7, 2, !dbg !15
  %19 = and i32 %18, 508, !dbg !15
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %22 = mul i32 %11, 3072, !dbg !17
  %23 = or disjoint i32 %22, %19
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %24, i1 true) #4, !dbg !19
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !19
  %27 = extractelement <2 x bfloat> %26, i64 0, !dbg !19
  %28 = extractelement <2 x bfloat> %26, i64 1, !dbg !19
  %29 = fpext bfloat %27 to float, !dbg !20
  %30 = fpext bfloat %28 to float, !dbg !20
  %31 = sext i32 %23 to i64, !dbg !21
  %32 = getelementptr bfloat, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %12) #4, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !22
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !22
  %38 = fsub float 0.000000e+00, %29, !dbg !23
  %39 = fsub float 0.000000e+00, %30, !dbg !23
  %40 = fmul float %38, 0x3FF7154760000000, !dbg !27
  %41 = tail call float @llvm.nvvm.ex2.approx.f(float %40), !dbg !27
  %42 = fmul float %39, 0x3FF7154760000000, !dbg !27
  %43 = tail call float @llvm.nvvm.ex2.approx.f(float %42), !dbg !27
  %44 = fadd float %41, 1.000000e+00, !dbg !28
  %45 = fadd float %43, 1.000000e+00, !dbg !28
  %46 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %44), !dbg !29
  %47 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %45), !dbg !29
  %48 = fmul float %46, %29, !dbg !30
  %49 = fmul float %47, %30, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %50 = bitcast float %48 to i32, !dbg !31
  %51 = bitcast float %49 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %50, i32 %51, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %52 = shufflevector <2 x bfloat> %35, <2 x bfloat> %37, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %53 = fpext <4 x bfloat> %52 to <4 x float>, !dbg !32
  %54 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %55 = fmul <4 x float> %54, %53, !dbg !31
  %56 = fadd <4 x float> %55, zeroinitializer, !dbg !33
  %57 = or disjoint i64 %17, 512, !dbg !34
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %58, i1 true) #4, !dbg !19
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !19
  %61 = extractelement <2 x bfloat> %60, i64 0, !dbg !19
  %62 = extractelement <2 x bfloat> %60, i64 1, !dbg !19
  %63 = fpext bfloat %61 to float, !dbg !20
  %64 = fpext bfloat %62 to float, !dbg !20
  %65 = or disjoint i32 %23, 512, !dbg !35
  %66 = sext i32 %65 to i64, !dbg !21
  %67 = getelementptr bfloat, ptr addrspace(1) %1, i64 %66, !dbg !21
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %67, i1 %12) #4, !dbg !22
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !22
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !22
  %71 = extractvalue { i32, i32 } %68, 1, !dbg !22
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !22
  %73 = fsub float 0.000000e+00, %63, !dbg !23
  %74 = fsub float 0.000000e+00, %64, !dbg !23
  %75 = fmul float %73, 0x3FF7154760000000, !dbg !27
  %76 = tail call float @llvm.nvvm.ex2.approx.f(float %75), !dbg !27
  %77 = fmul float %74, 0x3FF7154760000000, !dbg !27
  %78 = tail call float @llvm.nvvm.ex2.approx.f(float %77), !dbg !27
  %79 = fadd float %76, 1.000000e+00, !dbg !28
  %80 = fadd float %78, 1.000000e+00, !dbg !28
  %81 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %79), !dbg !29
  %82 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %80), !dbg !29
  %83 = fmul float %81, %63, !dbg !30
  %84 = fmul float %82, %64, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %85 = bitcast float %83 to i32, !dbg !31
  %86 = bitcast float %84 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %85, i32 %86, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %87 = shufflevector <2 x bfloat> %70, <2 x bfloat> %72, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %88 = fpext <4 x bfloat> %87 to <4 x float>, !dbg !32
  %89 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %90 = fmul <4 x float> %89, %88, !dbg !31
  %91 = fadd <4 x float> %56, %90, !dbg !33
  %92 = or disjoint i64 %17, 1024, !dbg !34
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !18
  %94 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %93, i1 true) #4, !dbg !19
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !19
  %96 = extractelement <2 x bfloat> %95, i64 0, !dbg !19
  %97 = extractelement <2 x bfloat> %95, i64 1, !dbg !19
  %98 = fpext bfloat %96 to float, !dbg !20
  %99 = fpext bfloat %97 to float, !dbg !20
  %100 = add i32 %23, 1024, !dbg !35
  %101 = sext i32 %100 to i64, !dbg !21
  %102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %101, !dbg !21
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %102, i1 %12) #4, !dbg !22
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !22
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !22
  %106 = extractvalue { i32, i32 } %103, 1, !dbg !22
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !22
  %108 = fsub float 0.000000e+00, %98, !dbg !23
  %109 = fsub float 0.000000e+00, %99, !dbg !23
  %110 = fmul float %108, 0x3FF7154760000000, !dbg !27
  %111 = tail call float @llvm.nvvm.ex2.approx.f(float %110), !dbg !27
  %112 = fmul float %109, 0x3FF7154760000000, !dbg !27
  %113 = tail call float @llvm.nvvm.ex2.approx.f(float %112), !dbg !27
  %114 = fadd float %111, 1.000000e+00, !dbg !28
  %115 = fadd float %113, 1.000000e+00, !dbg !28
  %116 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %114), !dbg !29
  %117 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %115), !dbg !29
  %118 = fmul float %116, %98, !dbg !30
  %119 = fmul float %117, %99, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = bitcast float %118 to i32, !dbg !31
  %121 = bitcast float %119 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %120, i32 %121, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %122 = shufflevector <2 x bfloat> %105, <2 x bfloat> %107, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %123 = fpext <4 x bfloat> %122 to <4 x float>, !dbg !32
  %124 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %125 = fmul <4 x float> %124, %123, !dbg !31
  %126 = fadd <4 x float> %91, %125, !dbg !33
  %127 = or disjoint i64 %17, 1536, !dbg !34
  %128 = getelementptr bfloat, ptr addrspace(1) %0, i64 %127, !dbg !18
  %129 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %128, i1 true) #4, !dbg !19
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !19
  %131 = extractelement <2 x bfloat> %130, i64 0, !dbg !19
  %132 = extractelement <2 x bfloat> %130, i64 1, !dbg !19
  %133 = fpext bfloat %131 to float, !dbg !20
  %134 = fpext bfloat %132 to float, !dbg !20
  %135 = add i32 %23, 1536, !dbg !35
  %136 = sext i32 %135 to i64, !dbg !21
  %137 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !21
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %137, i1 %12) #4, !dbg !22
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !22
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !22
  %141 = extractvalue { i32, i32 } %138, 1, !dbg !22
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !22
  %143 = fsub float 0.000000e+00, %133, !dbg !23
  %144 = fsub float 0.000000e+00, %134, !dbg !23
  %145 = fmul float %143, 0x3FF7154760000000, !dbg !27
  %146 = tail call float @llvm.nvvm.ex2.approx.f(float %145), !dbg !27
  %147 = fmul float %144, 0x3FF7154760000000, !dbg !27
  %148 = tail call float @llvm.nvvm.ex2.approx.f(float %147), !dbg !27
  %149 = fadd float %146, 1.000000e+00, !dbg !28
  %150 = fadd float %148, 1.000000e+00, !dbg !28
  %151 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %149), !dbg !29
  %152 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %150), !dbg !29
  %153 = fmul float %151, %133, !dbg !30
  %154 = fmul float %152, %134, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %155 = bitcast float %153 to i32, !dbg !31
  %156 = bitcast float %154 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %155, i32 %156, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %157 = shufflevector <2 x bfloat> %140, <2 x bfloat> %142, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %158 = fpext <4 x bfloat> %157 to <4 x float>, !dbg !32
  %159 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %160 = fmul <4 x float> %159, %158, !dbg !31
  %161 = fadd <4 x float> %126, %160, !dbg !33
  %162 = or disjoint i64 %17, 2048, !dbg !34
  %163 = getelementptr bfloat, ptr addrspace(1) %0, i64 %162, !dbg !18
  %164 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %163, i1 true) #4, !dbg !19
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !19
  %166 = extractelement <2 x bfloat> %165, i64 0, !dbg !19
  %167 = extractelement <2 x bfloat> %165, i64 1, !dbg !19
  %168 = fpext bfloat %166 to float, !dbg !20
  %169 = fpext bfloat %167 to float, !dbg !20
  %170 = add i32 %23, 2048, !dbg !35
  %171 = sext i32 %170 to i64, !dbg !21
  %172 = getelementptr bfloat, ptr addrspace(1) %1, i64 %171, !dbg !21
  %173 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %172, i1 %12) #4, !dbg !22
  %174 = extractvalue { i32, i32 } %173, 0, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = extractvalue { i32, i32 } %173, 1, !dbg !22
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !22
  %178 = fsub float 0.000000e+00, %168, !dbg !23
  %179 = fsub float 0.000000e+00, %169, !dbg !23
  %180 = fmul float %178, 0x3FF7154760000000, !dbg !27
  %181 = tail call float @llvm.nvvm.ex2.approx.f(float %180), !dbg !27
  %182 = fmul float %179, 0x3FF7154760000000, !dbg !27
  %183 = tail call float @llvm.nvvm.ex2.approx.f(float %182), !dbg !27
  %184 = fadd float %181, 1.000000e+00, !dbg !28
  %185 = fadd float %183, 1.000000e+00, !dbg !28
  %186 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %184), !dbg !29
  %187 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %185), !dbg !29
  %188 = fmul float %186, %168, !dbg !30
  %189 = fmul float %187, %169, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %190 = bitcast float %188 to i32, !dbg !31
  %191 = bitcast float %189 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %190, i32 %191, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %192 = shufflevector <2 x bfloat> %175, <2 x bfloat> %177, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %193 = fpext <4 x bfloat> %192 to <4 x float>, !dbg !32
  %194 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %195 = fmul <4 x float> %194, %193, !dbg !31
  %196 = fadd <4 x float> %161, %195, !dbg !33
  %197 = or disjoint i64 %17, 2560, !dbg !34
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %197, !dbg !18
  %199 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %198, i1 true) #4, !dbg !19
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !19
  %201 = extractelement <2 x bfloat> %200, i64 0, !dbg !19
  %202 = extractelement <2 x bfloat> %200, i64 1, !dbg !19
  %203 = fpext bfloat %201 to float, !dbg !20
  %204 = fpext bfloat %202 to float, !dbg !20
  %205 = add i32 %23, 2560, !dbg !35
  %206 = sext i32 %205 to i64, !dbg !21
  %207 = getelementptr bfloat, ptr addrspace(1) %1, i64 %206, !dbg !21
  %208 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %207, i1 %12) #4, !dbg !22
  %209 = extractvalue { i32, i32 } %208, 0, !dbg !22
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !22
  %211 = extractvalue { i32, i32 } %208, 1, !dbg !22
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !22
  %213 = fsub float 0.000000e+00, %203, !dbg !23
  %214 = fsub float 0.000000e+00, %204, !dbg !23
  %215 = fmul float %213, 0x3FF7154760000000, !dbg !27
  %216 = tail call float @llvm.nvvm.ex2.approx.f(float %215), !dbg !27
  %217 = fmul float %214, 0x3FF7154760000000, !dbg !27
  %218 = tail call float @llvm.nvvm.ex2.approx.f(float %217), !dbg !27
  %219 = fadd float %216, 1.000000e+00, !dbg !28
  %220 = fadd float %218, 1.000000e+00, !dbg !28
  %221 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %219), !dbg !29
  %222 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %220), !dbg !29
  %223 = fmul float %221, %203, !dbg !30
  %224 = fmul float %222, %204, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %225 = bitcast float %223 to i32, !dbg !31
  %226 = bitcast float %224 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %21, i32 %225, i32 %226, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %227 = shufflevector <2 x bfloat> %210, <2 x bfloat> %212, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %228 = fpext <4 x bfloat> %227 to <4 x float>, !dbg !32
  %229 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %230 = fmul <4 x float> %229, %228, !dbg !31
  %231 = fadd <4 x float> %196, %230, !dbg !33
  %232 = select <4 x i1> %14, <4 x float> %231, <4 x float> zeroinitializer, !dbg !14
  %233 = and i32 %7, 1, !dbg !9
  %234 = lshr i32 %7, 5, !dbg !9
  %235 = and i32 %7, 31, !dbg !9
  %236 = or disjoint i32 %10, %233, !dbg !12
  %237 = icmp slt i32 %236, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %shift = shufflevector <4 x float> %232, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !38
  %238 = fadd <4 x float> %232, %shift, !dbg !38
  %shift14 = shufflevector <4 x float> %232, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !38
  %239 = fadd <4 x float> %shift14, %238, !dbg !38
  %shift15 = shufflevector <4 x float> %232, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !38
  %240 = fadd <4 x float> %shift15, %239, !dbg !38
  %241 = extractelement <4 x float> %240, i64 0, !dbg !38
  %242 = bitcast float %241 to i32, !dbg !36
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 16, i32 31), !dbg !36
  %244 = bitcast i32 %243 to float, !dbg !36
  %245 = fadd float %241, %244, !dbg !38
  %246 = bitcast float %245 to i32, !dbg !36
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !36
  %248 = bitcast i32 %247 to float, !dbg !36
  %249 = fadd float %245, %248, !dbg !38
  %250 = bitcast float %249 to i32, !dbg !36
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !36
  %252 = bitcast i32 %251 to float, !dbg !36
  %253 = fadd float %249, %252, !dbg !38
  %254 = bitcast float %253 to i32, !dbg !36
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 2, i32 31), !dbg !36
  %256 = bitcast i32 %255 to float, !dbg !36
  %257 = fadd float %253, %256, !dbg !38
  %258 = bitcast float %257 to i32, !dbg !36
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = fadd float %257, %260, !dbg !38
  %262 = and i32 %234, 3, !dbg !36
  %263 = icmp eq i32 %235, 0, !dbg !36
  %264 = shl nuw nsw i32 %.lobit, 2, !dbg !36
  %265 = or disjoint i32 %264, %262, !dbg !36
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !36
  %267 = bitcast float %261 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 %263) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %268 = icmp slt i32 %7, 8, !dbg !36
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !36
  %270 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %269, i1 %268) #4, !dbg !36
  %271 = bitcast i32 %270 to float, !dbg !36
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !36
  %273 = bitcast i32 %272 to float, !dbg !36
  %274 = fadd float %271, %273, !dbg !38
  %275 = bitcast float %274 to i32, !dbg !36
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !36
  %277 = bitcast i32 %276 to float, !dbg !36
  %278 = fadd float %274, %277, !dbg !38
  %279 = and i32 %7, 3, !dbg !36
  %280 = icmp eq i32 %279, 0, !dbg !36
  %281 = and i1 %268, %280, !dbg !36
  %282 = bitcast float %278 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %282, i1 %281) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !36
  %284 = load i32, ptr addrspace(3) %283, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %285 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !40
  %286 = insertelement <1 x i32> poison, i32 %284, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %287 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %233, !dbg !40
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !40
  %289 = sext i32 %236 to i64, !dbg !41
  %290 = getelementptr float, ptr addrspace(1) %2, i64 %289, !dbg !41
  %291 = and i32 %7, 254, !dbg !42
  %292 = icmp eq i32 %291, 0, !dbg !42
  %293 = and i1 %292, %237, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %290, i1 %293) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 44, scope: !6)
!10 = !DILocation(line: 23, column: 28, scope: !6)
!11 = !DILocation(line: 23, column: 33, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 47, column: 50, scope: !6)
!15 = !DILocation(line: 26, column: 37, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 46, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 41, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 39, column: 26, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 37, column: 113, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 31, column: 31, scope: !6)
!35 = !DILocation(line: 37, column: 41, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 48, column: 27, scope: !6)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 48, column: 30, scope: !6)
!41 = !DILocation(line: 49, column: 25, scope: !6)
!42 = !DILocation(line: 49, column: 37, scope: !6)
!43 = !DILocation(line: 49, column: 4, scope: !6)
