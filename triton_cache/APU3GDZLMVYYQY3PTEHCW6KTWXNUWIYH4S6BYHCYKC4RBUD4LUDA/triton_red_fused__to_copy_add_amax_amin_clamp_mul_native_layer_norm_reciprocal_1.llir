; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 3, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 6, !dbg !11
  %20 = and i32 %19, 7, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %20, %17, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %17, 3600, !dbg !13
  %25 = shl i32 %18, 3, !dbg !14
  %26 = and i32 %25, 504, !dbg !14
  %27 = mul i32 %22, 3072, !dbg !15
  %28 = or disjoint i32 %27, %26
  %29 = sext i32 %28 to i64, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %23) #5, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !17
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !17
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !17
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %48 = fpext bfloat %40 to float, !dbg !18
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = select i1 %23, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %23, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %23, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %23, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %23, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %23, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %23, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %23, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %65 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 512, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %97 = add i32 %28, %96, !dbg !22
  %98 = sext i32 %97 to i64, !dbg !16
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !16
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %99, i1 %23) #5, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !17
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !17
  %103 = extractelement <2 x bfloat> %102, i64 1, !dbg !17
  %104 = fpext bfloat %103 to float, !dbg !18
  %105 = extractelement <2 x bfloat> %102, i64 0, !dbg !17
  %106 = fpext bfloat %105 to float, !dbg !18
  %107 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !17
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !17
  %109 = extractelement <2 x bfloat> %108, i64 1, !dbg !17
  %110 = fpext bfloat %109 to float, !dbg !18
  %111 = extractelement <2 x bfloat> %108, i64 0, !dbg !17
  %112 = fpext bfloat %111 to float, !dbg !18
  %113 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !17
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !17
  %115 = extractelement <2 x bfloat> %114, i64 1, !dbg !17
  %116 = fpext bfloat %115 to float, !dbg !18
  %117 = extractelement <2 x bfloat> %114, i64 0, !dbg !17
  %118 = fpext bfloat %117 to float, !dbg !18
  %119 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !17
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !17
  %121 = extractelement <2 x bfloat> %120, i64 1, !dbg !17
  %122 = fpext bfloat %121 to float, !dbg !18
  %123 = extractelement <2 x bfloat> %120, i64 0, !dbg !17
  %124 = fpext bfloat %123 to float, !dbg !18
  %125 = fsub float %124, %88, !dbg !23
  %126 = fsub float %122, %89, !dbg !23
  %127 = fsub float %118, %90, !dbg !23
  %128 = fsub float %116, %91, !dbg !23
  %129 = fsub float %112, %92, !dbg !23
  %130 = fsub float %110, %93, !dbg !23
  %131 = fsub float %106, %94, !dbg !23
  %132 = fsub float %104, %95, !dbg !23
  %133 = fadd float %72, 1.000000e+00, !dbg !27
  %134 = fadd float %73, 1.000000e+00, !dbg !27
  %135 = fadd float %74, 1.000000e+00, !dbg !27
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !28
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !28
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !28
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = fadd float %88, %141, !dbg !29
  %150 = fadd float %89, %142, !dbg !29
  %151 = fadd float %90, %143, !dbg !29
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fsub float %124, %149, !dbg !30
  %158 = fsub float %122, %150, !dbg !30
  %159 = fsub float %118, %151, !dbg !30
  %160 = fsub float %116, %152, !dbg !30
  %161 = fsub float %112, %153, !dbg !30
  %162 = fsub float %110, %154, !dbg !30
  %163 = fsub float %106, %155, !dbg !30
  %164 = fsub float %104, %156, !dbg !30
  %165 = fmul float %125, %157, !dbg !31
  %166 = fmul float %126, %158, !dbg !31
  %167 = fmul float %127, %159, !dbg !31
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fadd float %80, %165, !dbg !32
  %174 = fadd float %81, %166, !dbg !32
  %175 = fadd float %82, %167, !dbg !32
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = select i1 %23, float %149, float %88, !dbg !19
  %182 = select i1 %23, float %150, float %89, !dbg !19
  %183 = select i1 %23, float %151, float %90, !dbg !19
  %184 = select i1 %23, float %152, float %91, !dbg !19
  %185 = select i1 %23, float %153, float %92, !dbg !19
  %186 = select i1 %23, float %154, float %93, !dbg !19
  %187 = select i1 %23, float %155, float %94, !dbg !19
  %188 = select i1 %23, float %156, float %95, !dbg !19
  %189 = select i1 %23, float %173, float %80, !dbg !33
  %190 = select i1 %23, float %174, float %81, !dbg !33
  %191 = select i1 %23, float %175, float %82, !dbg !33
  %192 = select i1 %23, float %176, float %83, !dbg !33
  %193 = select i1 %23, float %177, float %84, !dbg !33
  %194 = select i1 %23, float %178, float %85, !dbg !33
  %195 = select i1 %23, float %179, float %86, !dbg !33
  %196 = select i1 %23, float %180, float %87, !dbg !33
  %197 = select i1 %23, float %133, float %72, !dbg !20
  %198 = select i1 %23, float %134, float %73, !dbg !20
  %199 = select i1 %23, float %135, float %74, !dbg !20
  %200 = select i1 %23, float %136, float %75, !dbg !20
  %201 = select i1 %23, float %137, float %76, !dbg !20
  %202 = select i1 %23, float %138, float %77, !dbg !20
  %203 = select i1 %23, float %139, float %78, !dbg !20
  %204 = select i1 %23, float %140, float %79, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !21
  %205 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !21
  br i1 %205, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %206 = fadd float %189, %190, !dbg !11
  %207 = lshr i32 %18, 5, !dbg !11
  %208 = and i32 %18, 7, !dbg !11
  %209 = or disjoint i32 %17, %208, !dbg !12
  %210 = icmp slt i32 %209, 3600, !dbg !13
  %211 = and i32 %18, 511, !dbg !14
  %212 = fsub float %182, %181, !dbg !36
  %213 = fadd float %197, %198, !dbg !39
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !40
  %215 = tail call float @llvm.nvvm.div.full(float %198, float %213), !dbg !41
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !42
  %217 = fmul float %212, %216, !dbg !43
  %218 = fadd float %181, %217, !dbg !44
  %219 = fmul float %212, %212, !dbg !45
  %220 = fmul float %219, %197, !dbg !46
  %221 = fmul float %220, %216, !dbg !47
  %222 = fadd float %206, %221, !dbg !48
  %223 = fsub float %183, %218, !dbg !36
  %224 = fadd float %199, %213, !dbg !39
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !40
  %226 = tail call float @llvm.nvvm.div.full(float %199, float %224), !dbg !41
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !42
  %228 = fmul float %227, %223, !dbg !43
  %229 = fadd float %218, %228, !dbg !44
  %230 = fadd float %191, %222, !dbg !49
  %231 = fmul float %223, %223, !dbg !45
  %232 = fmul float %213, %231, !dbg !46
  %233 = fmul float %227, %232, !dbg !47
  %234 = fadd float %230, %233, !dbg !48
  %235 = fsub float %184, %229, !dbg !36
  %236 = fadd float %200, %224, !dbg !39
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !40
  %238 = tail call float @llvm.nvvm.div.full(float %200, float %236), !dbg !41
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !42
  %240 = fmul float %239, %235, !dbg !43
  %241 = fadd float %229, %240, !dbg !44
  %242 = fadd float %192, %234, !dbg !49
  %243 = fmul float %235, %235, !dbg !45
  %244 = fmul float %224, %243, !dbg !46
  %245 = fmul float %239, %244, !dbg !47
  %246 = fadd float %242, %245, !dbg !48
  %247 = fsub float %185, %241, !dbg !36
  %248 = fadd float %201, %236, !dbg !39
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !40
  %250 = tail call float @llvm.nvvm.div.full(float %201, float %248), !dbg !41
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !42
  %252 = fmul float %251, %247, !dbg !43
  %253 = fadd float %241, %252, !dbg !44
  %254 = fadd float %193, %246, !dbg !49
  %255 = fmul float %247, %247, !dbg !45
  %256 = fmul float %236, %255, !dbg !46
  %257 = fmul float %251, %256, !dbg !47
  %258 = fadd float %254, %257, !dbg !48
  %259 = fsub float %186, %253, !dbg !36
  %260 = fadd float %202, %248, !dbg !39
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !40
  %262 = tail call float @llvm.nvvm.div.full(float %202, float %260), !dbg !41
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !42
  %264 = fmul float %263, %259, !dbg !43
  %265 = fadd float %253, %264, !dbg !44
  %266 = fadd float %194, %258, !dbg !49
  %267 = fmul float %259, %259, !dbg !45
  %268 = fmul float %248, %267, !dbg !46
  %269 = fmul float %263, %268, !dbg !47
  %270 = fadd float %266, %269, !dbg !48
  %271 = fsub float %187, %265, !dbg !36
  %272 = fadd float %203, %260, !dbg !39
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !40
  %274 = tail call float @llvm.nvvm.div.full(float %203, float %272), !dbg !41
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !42
  %276 = fmul float %275, %271, !dbg !43
  %277 = fadd float %265, %276, !dbg !44
  %278 = fadd float %195, %270, !dbg !49
  %279 = fmul float %271, %271, !dbg !45
  %280 = fmul float %260, %279, !dbg !46
  %281 = fmul float %275, %280, !dbg !47
  %282 = fadd float %278, %281, !dbg !48
  %283 = fsub float %188, %277, !dbg !36
  %284 = fadd float %204, %272, !dbg !39
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !40
  %286 = tail call float @llvm.nvvm.div.full(float %204, float %284), !dbg !41
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !42
  %288 = fmul float %287, %283, !dbg !43
  %289 = fadd float %277, %288, !dbg !44
  %290 = fadd float %196, %282, !dbg !49
  %291 = fmul float %283, %283, !dbg !45
  %292 = fmul float %272, %291, !dbg !46
  %293 = fmul float %287, %292, !dbg !47
  %294 = fadd float %290, %293, !dbg !48
  %295 = bitcast float %289 to i32, !dbg !50
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !50
  %297 = bitcast i32 %296 to float, !dbg !50
  %298 = bitcast float %294 to i32, !dbg !50
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !50
  %300 = bitcast i32 %299 to float, !dbg !50
  %301 = bitcast float %284 to i32, !dbg !50
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 16, i32 31), !dbg !50
  %303 = bitcast i32 %302 to float, !dbg !50
  %304 = fsub float %297, %289, !dbg !36
  %305 = fadd float %284, %303, !dbg !39
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !40
  %307 = tail call float @llvm.nvvm.div.full(float %303, float %305), !dbg !41
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !42
  %309 = fmul float %308, %304, !dbg !43
  %310 = fadd float %289, %309, !dbg !44
  %311 = fadd float %294, %300, !dbg !49
  %312 = fmul float %304, %304, !dbg !45
  %313 = fmul float %284, %312, !dbg !46
  %314 = fmul float %308, %313, !dbg !47
  %315 = fadd float %311, %314, !dbg !48
  %316 = bitcast float %310 to i32, !dbg !50
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !50
  %318 = bitcast i32 %317 to float, !dbg !50
  %319 = bitcast float %315 to i32, !dbg !50
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = bitcast float %305 to i32, !dbg !50
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !50
  %324 = bitcast i32 %323 to float, !dbg !50
  %325 = fsub float %318, %310, !dbg !36
  %326 = fadd float %305, %324, !dbg !39
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !40
  %328 = tail call float @llvm.nvvm.div.full(float %324, float %326), !dbg !41
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !42
  %330 = fmul float %329, %325, !dbg !43
  %331 = fadd float %310, %330, !dbg !44
  %332 = fadd float %315, %321, !dbg !49
  %333 = fmul float %325, %325, !dbg !45
  %334 = fmul float %305, %333, !dbg !46
  %335 = fmul float %329, %334, !dbg !47
  %336 = fadd float %332, %335, !dbg !48
  %337 = bitcast float %331 to i32, !dbg !50
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !50
  %339 = bitcast i32 %338 to float, !dbg !50
  %340 = bitcast float %336 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = bitcast float %326 to i32, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = fsub float %339, %331, !dbg !36
  %347 = fadd float %326, %345, !dbg !39
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !40
  %349 = tail call float @llvm.nvvm.div.full(float %345, float %347), !dbg !41
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !42
  %351 = fmul float %350, %346, !dbg !43
  %352 = fadd float %331, %351, !dbg !44
  %353 = fadd float %336, %342, !dbg !49
  %354 = fmul float %346, %346, !dbg !45
  %355 = fmul float %326, %354, !dbg !46
  %356 = fmul float %350, %355, !dbg !47
  %357 = fadd float %353, %356, !dbg !48
  %358 = bitcast float %352 to i32, !dbg !50
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !50
  %360 = bitcast i32 %359 to float, !dbg !50
  %361 = bitcast float %357 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %347 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = fsub float %360, %352, !dbg !36
  %368 = fadd float %347, %366, !dbg !39
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !40
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !41
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !42
  %372 = fmul float %371, %367, !dbg !43
  %373 = fadd float %352, %372, !dbg !44
  %374 = fadd float %357, %363, !dbg !49
  %375 = fmul float %367, %367, !dbg !45
  %376 = fmul float %347, %375, !dbg !46
  %377 = fmul float %371, %376, !dbg !47
  %378 = fadd float %374, %377, !dbg !48
  %379 = bitcast float %373 to i32, !dbg !50
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !50
  %381 = bitcast i32 %380 to float, !dbg !50
  %382 = bitcast float %378 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %368 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = fsub float %381, %373, !dbg !36
  %389 = fadd float %368, %387, !dbg !39
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !40
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !41
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !42
  %393 = fmul float %392, %388, !dbg !43
  %394 = fadd float %373, %393, !dbg !44
  %395 = fadd float %378, %384, !dbg !49
  %396 = fmul float %388, %388, !dbg !45
  %397 = fmul float %368, %396, !dbg !46
  %398 = fmul float %392, %397, !dbg !47
  %399 = fadd float %395, %398, !dbg !48
  %400 = and i32 %207, 1, !dbg !50
  %401 = icmp eq i32 %21, 0, !dbg !50
  %402 = shl nuw nsw i32 %20, 1, !dbg !50
  %403 = or disjoint i32 %402, %400, !dbg !50
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i32 %403, !dbg !50
  %405 = bitcast float %394 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 %401) #5, !dbg !50
  %406 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %403, !dbg !50
  %407 = bitcast float %399 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 %401) #5, !dbg !50
  %408 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %403, !dbg !50
  %409 = bitcast float %389 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 %401) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %410 = icmp slt i32 %18, 16, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !50
  %412 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %410) #5, !dbg !50
  %413 = bitcast i32 %412 to float, !dbg !50
  %414 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !50
  %415 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %414, i1 %410) #5, !dbg !50
  %416 = bitcast i32 %415 to float, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !50
  %418 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %410) #5, !dbg !50
  %419 = bitcast i32 %418 to float, !dbg !50
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !50
  %421 = bitcast i32 %420 to float, !dbg !50
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !50
  %423 = bitcast i32 %422 to float, !dbg !50
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !50
  %425 = bitcast i32 %424 to float, !dbg !50
  %426 = fsub float %421, %413, !dbg !36
  %427 = fadd float %419, %425, !dbg !39
  %428 = fcmp oeq float %427, 0.000000e+00, !dbg !40
  %429 = tail call float @llvm.nvvm.div.full(float %425, float %427), !dbg !41
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !42
  %431 = fmul float %426, %430, !dbg !43
  %432 = fadd float %431, %413, !dbg !44
  %433 = fadd float %416, %423, !dbg !49
  %434 = fmul float %426, %426, !dbg !45
  %435 = fmul float %434, %419, !dbg !46
  %436 = fmul float %435, %430, !dbg !47
  %437 = fadd float %433, %436, !dbg !48
  %438 = and i32 %18, 1, !dbg !50
  %439 = icmp eq i32 %438, 0, !dbg !50
  %440 = and i1 %410, %439, !dbg !50
  %441 = bitcast float %432 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %441, i1 %440) #5, !dbg !50
  %442 = bitcast float %437 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %442, i1 %440) #5, !dbg !50
  %443 = bitcast float %427 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %443, i1 %440) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !50
  %445 = load float, ptr addrspace(3) %444, align 8, !dbg !50
  %446 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %402, !dbg !50
  %447 = load float, ptr addrspace(3) %446, align 8, !dbg !50
  %448 = tail call float @llvm.nvvm.div.full(float %447, float 3.072000e+03), !dbg !51
  %449 = fadd float %448, 0x3EB0C6F7A0000000, !dbg !52
  %450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i62 = icmp eq i32 %457, 0, !dbg !53
  br i1 %.not.i62, label %460, label %458, !dbg !53

458:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %459 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %449), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

460:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %461 = tail call float @llvm.nvvm.rsqrt.approx.f(float %449), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

__nv_rsqrtf.exit64:                               ; preds = %458, %460
  %.0.i63 = phi float [ %459, %458 ], [ %461, %460 ], !dbg !53
  %462 = shl i32 %18, 6
  %463 = and i32 %462, 4032
  %464 = or disjoint i32 %463, %20
  %465 = and i32 %25, 4088
  %466 = lshr exact i32 %463, 1
  %467 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %466
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %464
  %469 = or disjoint i32 %464, 8
  %470 = lshr i32 %469, 3
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %469
  %473 = or disjoint i32 %464, 16
  %474 = lshr i32 %473, 3
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %473
  %477 = or disjoint i32 %464, 24
  %478 = lshr i32 %477, 3
  %479 = getelementptr float, ptr addrspace(3) @global_smem, i32 %478
  %480 = getelementptr float, ptr addrspace(3) %479, i32 %477
  %481 = or disjoint i32 %464, 32
  %482 = lshr i32 %481, 3
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %481
  %485 = or disjoint i32 %464, 40
  %486 = lshr i32 %485, 3
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i32 %486
  %488 = getelementptr float, ptr addrspace(3) %487, i32 %485
  %489 = or disjoint i32 %464, 48
  %490 = lshr i32 %489, 3
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %489
  %493 = or disjoint i32 %464, 56
  %494 = lshr i32 %493, 3
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %493
  %497 = lshr exact i32 %465, 1
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %497
  %499 = getelementptr inbounds nuw float, ptr addrspace(3) %498, i32 %465
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %211
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 1040
  %502 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 2080
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 3120
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 4160
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 5200
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 6240
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %500, i32 7280
  %508 = lshr i32 %25, 6
  %509 = and i32 %508, 56
  %510 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %509
  %511 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %510, i32 %465
  %512 = zext nneg i32 %211 to i64, !dbg !54
  %513 = insertelement <16 x i1> poison, i1 %24, i64 0, !dbg !55
  %514 = shufflevector <16 x i1> %513, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !55
  %515 = getelementptr inbounds nuw i8, ptr addrspace(3) %511, i32 4
  %516 = getelementptr inbounds nuw i8, ptr addrspace(3) %511, i32 8
  %517 = getelementptr inbounds nuw i8, ptr addrspace(3) %511, i32 12
  br label %518, !dbg !54

518:                                              ; preds = %__nv_rsqrtf.exit64, %518
  %indvars.iv114 = phi i64 [ 0, %__nv_rsqrtf.exit64 ], [ %indvars.iv.next115, %518 ]
  %519 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit64 ], [ %606, %518 ]
  %520 = or disjoint i64 %indvars.iv114, %512, !dbg !56
  %521 = trunc nuw nsw i64 %indvars.iv114 to i32, !dbg !57
  %522 = add i32 %28, %521, !dbg !57
  %523 = sext i32 %522 to i64, !dbg !58
  %524 = getelementptr bfloat, ptr addrspace(1) %0, i64 %523, !dbg !58
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %524, i1 %23) #5, !dbg !59
  %526 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !59
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !59
  %528 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !59
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !59
  %530 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !59
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !59
  %532 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !59
  %533 = bitcast i32 %532 to <2 x bfloat>, !dbg !59
  %534 = extractelement <2 x bfloat> %527, i64 0, !dbg !59
  %535 = extractelement <2 x bfloat> %527, i64 1, !dbg !59
  %536 = extractelement <2 x bfloat> %529, i64 0, !dbg !59
  %537 = extractelement <2 x bfloat> %529, i64 1, !dbg !59
  %538 = extractelement <2 x bfloat> %531, i64 0, !dbg !59
  %539 = extractelement <2 x bfloat> %531, i64 1, !dbg !59
  %540 = extractelement <2 x bfloat> %533, i64 0, !dbg !59
  %541 = extractelement <2 x bfloat> %533, i64 1, !dbg !59
  %542 = fpext bfloat %534 to float, !dbg !60
  %543 = fpext bfloat %535 to float, !dbg !60
  %544 = fpext bfloat %536 to float, !dbg !60
  %545 = fpext bfloat %537 to float, !dbg !60
  %546 = fpext bfloat %538 to float, !dbg !60
  %547 = fpext bfloat %539 to float, !dbg !60
  %548 = fpext bfloat %540 to float, !dbg !60
  %549 = fpext bfloat %541 to float, !dbg !60
  %550 = add nuw nsw i64 %520, 3072, !dbg !61
  %551 = getelementptr float, ptr addrspace(1) %1, i64 %550, !dbg !62
  %552 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %551, i1 true) #5, !dbg !63
  %553 = bitcast i32 %552 to float, !dbg !63
  %554 = getelementptr bfloat, ptr addrspace(1) %2, i64 %550, !dbg !64
  %555 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %554, i1 true) #5, !dbg !65
  %556 = bitcast i16 %555 to bfloat, !dbg !65
  %557 = fpext bfloat %556 to float, !dbg !66
  %558 = getelementptr float, ptr addrspace(1) %1, i64 %520, !dbg !67
  %559 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %558, i1 true) #5, !dbg !68
  %560 = bitcast i32 %559 to float, !dbg !68
  %561 = getelementptr bfloat, ptr addrspace(1) %2, i64 %520, !dbg !69
  %562 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %561, i1 true) #5, !dbg !70
  %563 = bitcast i16 %562 to bfloat, !dbg !70
  %564 = fpext bfloat %563 to float, !dbg !71
  %565 = fsub float %542, %445, !dbg !72
  %566 = fsub float %543, %445, !dbg !72
  %567 = fsub float %544, %445, !dbg !72
  %568 = fsub float %545, %445, !dbg !72
  %569 = fsub float %546, %445, !dbg !72
  %570 = fsub float %547, %445, !dbg !72
  %571 = fsub float %548, %445, !dbg !72
  %572 = fsub float %549, %445, !dbg !72
  %573 = fmul float %.0.i63, %565, !dbg !73
  %574 = fmul float %.0.i63, %566, !dbg !73
  %575 = fmul float %.0.i63, %567, !dbg !73
  %576 = fmul float %.0.i63, %568, !dbg !73
  %577 = fmul float %.0.i63, %569, !dbg !73
  %578 = fmul float %.0.i63, %570, !dbg !73
  %579 = fmul float %.0.i63, %571, !dbg !73
  %580 = fmul float %.0.i63, %572, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %581 = bitcast float %573 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %581, i1 true) #5, !dbg !73
  %582 = bitcast float %574 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %582, i1 true) #5, !dbg !73
  %583 = bitcast float %575 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %583, i1 true) #5, !dbg !73
  %584 = bitcast float %576 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %584, i1 true) #5, !dbg !73
  %585 = bitcast float %577 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %585, i1 true) #5, !dbg !73
  %586 = bitcast float %578 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %586, i1 true) #5, !dbg !73
  %587 = bitcast float %579 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %587, i1 true) #5, !dbg !73
  %588 = bitcast float %580 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %588, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %589 = fadd float %553, %557, !dbg !74
  %590 = fadd float %589, 1.000000e+00, !dbg !75
  %591 = fadd float %560, %564, !dbg !76
  %592 = fcmp uno <16 x float> %519, zeroinitializer, !dbg !77
  %593 = load <8 x float>, ptr addrspace(3) %499, align 4, !dbg !73
  %594 = insertelement <8 x float> poison, float %590, i64 0, !dbg !79
  %595 = shufflevector <8 x float> %594, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !79
  %596 = fmul <8 x float> %595, %593, !dbg !79
  %597 = insertelement <8 x float> poison, float %591, i64 0, !dbg !80
  %598 = shufflevector <8 x float> %597, <8 x float> poison, <16 x i32> zeroinitializer, !dbg !80
  %599 = shufflevector <8 x float> %596, <8 x float> poison, <16 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !80
  %600 = fadd <16 x float> %598, %599, !dbg !80
  %601 = fcmp ogt <16 x float> %519, %600, !dbg !81
  %602 = fcmp olt <16 x float> %519, %600, !dbg !81
  %603 = shufflevector <16 x i1> %601, <16 x i1> %602, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !81
  %604 = or <16 x i1> %592, %603, !dbg !82
  %605 = select <16 x i1> %604, <16 x float> %519, <16 x float> %600, !dbg !83
  %606 = select <16 x i1> %514, <16 x float> %605, <16 x float> %519, !dbg !55
  %607 = getelementptr bfloat, ptr addrspace(1) %3, i64 %523, !dbg !84
  %608 = extractelement <16 x float> %600, i64 7, !dbg !85
  %609 = fptrunc float %608 to bfloat, !dbg !85
  %610 = extractelement <16 x float> %600, i64 6, !dbg !85
  %611 = fptrunc float %610 to bfloat, !dbg !85
  %612 = extractelement <16 x float> %600, i64 5, !dbg !85
  %613 = fptrunc float %612 to bfloat, !dbg !85
  %614 = extractelement <16 x float> %600, i64 4, !dbg !85
  %615 = fptrunc float %614 to bfloat, !dbg !85
  %616 = extractelement <16 x float> %600, i64 3, !dbg !85
  %617 = fptrunc float %616 to bfloat, !dbg !85
  %618 = extractelement <16 x float> %600, i64 2, !dbg !85
  %619 = fptrunc float %618 to bfloat, !dbg !85
  %620 = extractelement <16 x float> %600, i64 1, !dbg !85
  %621 = fptrunc float %620 to bfloat, !dbg !85
  %622 = extractelement <16 x float> %600, i64 0, !dbg !85
  %623 = fptrunc float %622 to bfloat, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %624 = bitcast bfloat %609 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %500, <1 x i16> %624, i1 true) #5, !dbg !85
  %625 = bitcast bfloat %611 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %501, <1 x i16> %625, i1 true) #5, !dbg !85
  %626 = bitcast bfloat %613 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %502, <1 x i16> %626, i1 true) #5, !dbg !85
  %627 = bitcast bfloat %615 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %503, <1 x i16> %627, i1 true) #5, !dbg !85
  %628 = bitcast bfloat %617 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %504, <1 x i16> %628, i1 true) #5, !dbg !85
  %629 = bitcast bfloat %619 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %505, <1 x i16> %629, i1 true) #5, !dbg !85
  %630 = bitcast bfloat %621 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %506, <1 x i16> %630, i1 true) #5, !dbg !85
  %631 = bitcast bfloat %623 to <1 x i16>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %507, <1 x i16> %631, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %.extract = load i32, ptr addrspace(3) %511, align 16, !dbg !85
  %.extract66 = load i32, ptr addrspace(3) %515, align 4, !dbg !85
  %.extract68 = load i32, ptr addrspace(3) %516, align 8, !dbg !85
  %.extract70 = load i32, ptr addrspace(3) %517, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %607, i1 %23) #5, !dbg !85
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 512, !dbg !54
  %632 = icmp samesign ult i64 %indvars.iv114, 2560, !dbg !54
  br i1 %632, label %518, label %633, !dbg !54

633:                                              ; preds = %518
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %634 = extractelement <16 x float> %606, i64 15, !dbg !86
  %635 = bitcast float %634 to i32, !dbg !86
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 16, i32 31), !dbg !86
  %637 = bitcast i32 %636 to float, !dbg !86
  %638 = fcmp olt float %634, %637, !dbg !88
  %639 = fcmp uno <16 x float> %606, zeroinitializer, !dbg !89
  %640 = extractelement <16 x i1> %639, i64 15, !dbg !91
  %641 = or i1 %640, %638, !dbg !91
  %642 = select i1 %641, float %634, float %637, !dbg !92
  %643 = bitcast float %642 to i32, !dbg !86
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 8, i32 31), !dbg !86
  %645 = bitcast i32 %644 to float, !dbg !86
  %646 = fcmp olt float %642, %645, !dbg !88
  %647 = fcmp uno float %642, 0.000000e+00, !dbg !93
  %648 = or i1 %646, %647, !dbg !91
  %649 = select i1 %648, float %642, float %645, !dbg !92
  %650 = bitcast float %649 to i32, !dbg !86
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %650, i32 4, i32 31), !dbg !86
  %652 = bitcast i32 %651 to float, !dbg !86
  %653 = fcmp olt float %649, %652, !dbg !88
  %654 = fcmp uno float %649, 0.000000e+00, !dbg !93
  %655 = or i1 %653, %654, !dbg !91
  %656 = select i1 %655, float %649, float %652, !dbg !92
  %657 = bitcast float %656 to i32, !dbg !86
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %657, i32 2, i32 31), !dbg !86
  %659 = bitcast i32 %658 to float, !dbg !86
  %660 = fcmp olt float %656, %659, !dbg !88
  %661 = fcmp uno float %656, 0.000000e+00, !dbg !93
  %662 = or i1 %660, %661, !dbg !91
  %663 = select i1 %662, float %656, float %659, !dbg !92
  %664 = bitcast float %663 to i32, !dbg !86
  %665 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %664, i32 1, i32 31), !dbg !86
  %666 = bitcast i32 %665 to float, !dbg !86
  %667 = fcmp olt float %663, %666, !dbg !88
  %668 = fcmp uno float %663, 0.000000e+00, !dbg !93
  %669 = or i1 %667, %668, !dbg !91
  %670 = extractelement <16 x float> %606, i64 14, !dbg !86
  %671 = bitcast float %670 to i32, !dbg !86
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 16, i32 31), !dbg !86
  %673 = bitcast i32 %672 to float, !dbg !86
  %674 = fcmp olt float %670, %673, !dbg !88
  %675 = extractelement <16 x i1> %639, i64 14, !dbg !91
  %676 = or i1 %675, %674, !dbg !91
  %677 = select i1 %676, float %670, float %673, !dbg !92
  %678 = bitcast float %677 to i32, !dbg !86
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 8, i32 31), !dbg !86
  %680 = bitcast i32 %679 to float, !dbg !86
  %681 = fcmp olt float %677, %680, !dbg !88
  %682 = fcmp uno float %677, 0.000000e+00, !dbg !93
  %683 = or i1 %681, %682, !dbg !91
  %684 = select i1 %683, float %677, float %680, !dbg !92
  %685 = bitcast float %684 to i32, !dbg !86
  %686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %685, i32 4, i32 31), !dbg !86
  %687 = bitcast i32 %686 to float, !dbg !86
  %688 = fcmp olt float %684, %687, !dbg !88
  %689 = fcmp uno float %684, 0.000000e+00, !dbg !93
  %690 = or i1 %688, %689, !dbg !91
  %691 = select i1 %690, float %684, float %687, !dbg !92
  %692 = bitcast float %691 to i32, !dbg !86
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 2, i32 31), !dbg !86
  %694 = bitcast i32 %693 to float, !dbg !86
  %695 = fcmp olt float %691, %694, !dbg !88
  %696 = fcmp uno float %691, 0.000000e+00, !dbg !93
  %697 = or i1 %695, %696, !dbg !91
  %698 = select i1 %697, float %691, float %694, !dbg !92
  %699 = bitcast float %698 to i32, !dbg !86
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 1, i32 31), !dbg !86
  %701 = bitcast i32 %700 to float, !dbg !86
  %702 = fcmp olt float %698, %701, !dbg !88
  %703 = fcmp uno float %698, 0.000000e+00, !dbg !93
  %704 = or i1 %702, %703, !dbg !91
  %705 = extractelement <16 x float> %606, i64 13, !dbg !86
  %706 = bitcast float %705 to i32, !dbg !86
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 16, i32 31), !dbg !86
  %708 = bitcast i32 %707 to float, !dbg !86
  %709 = fcmp olt float %705, %708, !dbg !88
  %710 = extractelement <16 x i1> %639, i64 13, !dbg !91
  %711 = or i1 %710, %709, !dbg !91
  %712 = select i1 %711, float %705, float %708, !dbg !92
  %713 = bitcast float %712 to i32, !dbg !86
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 8, i32 31), !dbg !86
  %715 = bitcast i32 %714 to float, !dbg !86
  %716 = fcmp olt float %712, %715, !dbg !88
  %717 = fcmp uno float %712, 0.000000e+00, !dbg !93
  %718 = or i1 %716, %717, !dbg !91
  %719 = select i1 %718, float %712, float %715, !dbg !92
  %720 = bitcast float %719 to i32, !dbg !86
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %720, i32 4, i32 31), !dbg !86
  %722 = bitcast i32 %721 to float, !dbg !86
  %723 = fcmp olt float %719, %722, !dbg !88
  %724 = fcmp uno float %719, 0.000000e+00, !dbg !93
  %725 = or i1 %723, %724, !dbg !91
  %726 = select i1 %725, float %719, float %722, !dbg !92
  %727 = bitcast float %726 to i32, !dbg !86
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 2, i32 31), !dbg !86
  %729 = bitcast i32 %728 to float, !dbg !86
  %730 = fcmp olt float %726, %729, !dbg !88
  %731 = fcmp uno float %726, 0.000000e+00, !dbg !93
  %732 = or i1 %730, %731, !dbg !91
  %733 = select i1 %732, float %726, float %729, !dbg !92
  %734 = bitcast float %733 to i32, !dbg !86
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 1, i32 31), !dbg !86
  %736 = bitcast i32 %735 to float, !dbg !86
  %737 = fcmp olt float %733, %736, !dbg !88
  %738 = fcmp uno float %733, 0.000000e+00, !dbg !93
  %739 = or i1 %737, %738, !dbg !91
  %740 = extractelement <16 x float> %606, i64 12, !dbg !86
  %741 = bitcast float %740 to i32, !dbg !86
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 16, i32 31), !dbg !86
  %743 = bitcast i32 %742 to float, !dbg !86
  %744 = fcmp olt float %740, %743, !dbg !88
  %745 = extractelement <16 x i1> %639, i64 12, !dbg !91
  %746 = or i1 %745, %744, !dbg !91
  %747 = select i1 %746, float %740, float %743, !dbg !92
  %748 = bitcast float %747 to i32, !dbg !86
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 8, i32 31), !dbg !86
  %750 = bitcast i32 %749 to float, !dbg !86
  %751 = fcmp olt float %747, %750, !dbg !88
  %752 = fcmp uno float %747, 0.000000e+00, !dbg !93
  %753 = or i1 %751, %752, !dbg !91
  %754 = select i1 %753, float %747, float %750, !dbg !92
  %755 = bitcast float %754 to i32, !dbg !86
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 4, i32 31), !dbg !86
  %757 = bitcast i32 %756 to float, !dbg !86
  %758 = fcmp olt float %754, %757, !dbg !88
  %759 = fcmp uno float %754, 0.000000e+00, !dbg !93
  %760 = or i1 %758, %759, !dbg !91
  %761 = select i1 %760, float %754, float %757, !dbg !92
  %762 = bitcast float %761 to i32, !dbg !86
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 2, i32 31), !dbg !86
  %764 = bitcast i32 %763 to float, !dbg !86
  %765 = fcmp olt float %761, %764, !dbg !88
  %766 = fcmp uno float %761, 0.000000e+00, !dbg !93
  %767 = or i1 %765, %766, !dbg !91
  %768 = select i1 %767, float %761, float %764, !dbg !92
  %769 = bitcast float %768 to i32, !dbg !86
  %770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 1, i32 31), !dbg !86
  %771 = bitcast i32 %770 to float, !dbg !86
  %772 = fcmp olt float %768, %771, !dbg !88
  %773 = fcmp uno float %768, 0.000000e+00, !dbg !93
  %774 = or i1 %772, %773, !dbg !91
  %775 = extractelement <16 x float> %606, i64 11, !dbg !86
  %776 = bitcast float %775 to i32, !dbg !86
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 16, i32 31), !dbg !86
  %778 = bitcast i32 %777 to float, !dbg !86
  %779 = fcmp olt float %775, %778, !dbg !88
  %780 = extractelement <16 x i1> %639, i64 11, !dbg !91
  %781 = or i1 %780, %779, !dbg !91
  %782 = select i1 %781, float %775, float %778, !dbg !92
  %783 = bitcast float %782 to i32, !dbg !86
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 8, i32 31), !dbg !86
  %785 = bitcast i32 %784 to float, !dbg !86
  %786 = fcmp olt float %782, %785, !dbg !88
  %787 = fcmp uno float %782, 0.000000e+00, !dbg !93
  %788 = or i1 %786, %787, !dbg !91
  %789 = select i1 %788, float %782, float %785, !dbg !92
  %790 = bitcast float %789 to i32, !dbg !86
  %791 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %790, i32 4, i32 31), !dbg !86
  %792 = bitcast i32 %791 to float, !dbg !86
  %793 = fcmp olt float %789, %792, !dbg !88
  %794 = fcmp uno float %789, 0.000000e+00, !dbg !93
  %795 = or i1 %793, %794, !dbg !91
  %796 = select i1 %795, float %789, float %792, !dbg !92
  %797 = bitcast float %796 to i32, !dbg !86
  %798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %797, i32 2, i32 31), !dbg !86
  %799 = bitcast i32 %798 to float, !dbg !86
  %800 = fcmp olt float %796, %799, !dbg !88
  %801 = fcmp uno float %796, 0.000000e+00, !dbg !93
  %802 = or i1 %800, %801, !dbg !91
  %803 = select i1 %802, float %796, float %799, !dbg !92
  %804 = bitcast float %803 to i32, !dbg !86
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 1, i32 31), !dbg !86
  %806 = bitcast i32 %805 to float, !dbg !86
  %807 = fcmp olt float %803, %806, !dbg !88
  %808 = fcmp uno float %803, 0.000000e+00, !dbg !93
  %809 = or i1 %807, %808, !dbg !91
  %810 = extractelement <16 x float> %606, i64 10, !dbg !86
  %811 = bitcast float %810 to i32, !dbg !86
  %812 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %811, i32 16, i32 31), !dbg !86
  %813 = bitcast i32 %812 to float, !dbg !86
  %814 = fcmp olt float %810, %813, !dbg !88
  %815 = extractelement <16 x i1> %639, i64 10, !dbg !91
  %816 = or i1 %815, %814, !dbg !91
  %817 = select i1 %816, float %810, float %813, !dbg !92
  %818 = bitcast float %817 to i32, !dbg !86
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 8, i32 31), !dbg !86
  %820 = bitcast i32 %819 to float, !dbg !86
  %821 = fcmp olt float %817, %820, !dbg !88
  %822 = fcmp uno float %817, 0.000000e+00, !dbg !93
  %823 = or i1 %821, %822, !dbg !91
  %824 = select i1 %823, float %817, float %820, !dbg !92
  %825 = bitcast float %824 to i32, !dbg !86
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 4, i32 31), !dbg !86
  %827 = bitcast i32 %826 to float, !dbg !86
  %828 = fcmp olt float %824, %827, !dbg !88
  %829 = fcmp uno float %824, 0.000000e+00, !dbg !93
  %830 = or i1 %828, %829, !dbg !91
  %831 = select i1 %830, float %824, float %827, !dbg !92
  %832 = bitcast float %831 to i32, !dbg !86
  %833 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %832, i32 2, i32 31), !dbg !86
  %834 = bitcast i32 %833 to float, !dbg !86
  %835 = fcmp olt float %831, %834, !dbg !88
  %836 = fcmp uno float %831, 0.000000e+00, !dbg !93
  %837 = or i1 %835, %836, !dbg !91
  %838 = select i1 %837, float %831, float %834, !dbg !92
  %839 = bitcast float %838 to i32, !dbg !86
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 1, i32 31), !dbg !86
  %841 = bitcast i32 %840 to float, !dbg !86
  %842 = fcmp olt float %838, %841, !dbg !88
  %843 = fcmp uno float %838, 0.000000e+00, !dbg !93
  %844 = or i1 %842, %843, !dbg !91
  %845 = extractelement <16 x float> %606, i64 9, !dbg !86
  %846 = bitcast float %845 to i32, !dbg !86
  %847 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %846, i32 16, i32 31), !dbg !86
  %848 = bitcast i32 %847 to float, !dbg !86
  %849 = fcmp olt float %845, %848, !dbg !88
  %850 = extractelement <16 x i1> %639, i64 9, !dbg !91
  %851 = or i1 %850, %849, !dbg !91
  %852 = select i1 %851, float %845, float %848, !dbg !92
  %853 = bitcast float %852 to i32, !dbg !86
  %854 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %853, i32 8, i32 31), !dbg !86
  %855 = bitcast i32 %854 to float, !dbg !86
  %856 = fcmp olt float %852, %855, !dbg !88
  %857 = fcmp uno float %852, 0.000000e+00, !dbg !93
  %858 = or i1 %856, %857, !dbg !91
  %859 = select i1 %858, float %852, float %855, !dbg !92
  %860 = bitcast float %859 to i32, !dbg !86
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 4, i32 31), !dbg !86
  %862 = bitcast i32 %861 to float, !dbg !86
  %863 = fcmp olt float %859, %862, !dbg !88
  %864 = fcmp uno float %859, 0.000000e+00, !dbg !93
  %865 = or i1 %863, %864, !dbg !91
  %866 = select i1 %865, float %859, float %862, !dbg !92
  %867 = bitcast float %866 to i32, !dbg !86
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 2, i32 31), !dbg !86
  %869 = bitcast i32 %868 to float, !dbg !86
  %870 = fcmp olt float %866, %869, !dbg !88
  %871 = fcmp uno float %866, 0.000000e+00, !dbg !93
  %872 = or i1 %870, %871, !dbg !91
  %873 = select i1 %872, float %866, float %869, !dbg !92
  %874 = bitcast float %873 to i32, !dbg !86
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %874, i32 1, i32 31), !dbg !86
  %876 = bitcast i32 %875 to float, !dbg !86
  %877 = fcmp olt float %873, %876, !dbg !88
  %878 = fcmp uno float %873, 0.000000e+00, !dbg !93
  %879 = or i1 %877, %878, !dbg !91
  %880 = extractelement <16 x float> %606, i64 8, !dbg !86
  %881 = bitcast float %880 to i32, !dbg !86
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 16, i32 31), !dbg !86
  %883 = bitcast i32 %882 to float, !dbg !86
  %884 = fcmp olt float %880, %883, !dbg !88
  %885 = extractelement <16 x i1> %639, i64 8, !dbg !91
  %886 = or i1 %885, %884, !dbg !91
  %887 = select i1 %886, float %880, float %883, !dbg !92
  %888 = bitcast float %887 to i32, !dbg !86
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 8, i32 31), !dbg !86
  %890 = bitcast i32 %889 to float, !dbg !86
  %891 = fcmp olt float %887, %890, !dbg !88
  %892 = fcmp uno float %887, 0.000000e+00, !dbg !93
  %893 = or i1 %891, %892, !dbg !91
  %894 = select i1 %893, float %887, float %890, !dbg !92
  %895 = bitcast float %894 to i32, !dbg !86
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %895, i32 4, i32 31), !dbg !86
  %897 = bitcast i32 %896 to float, !dbg !86
  %898 = fcmp olt float %894, %897, !dbg !88
  %899 = fcmp uno float %894, 0.000000e+00, !dbg !93
  %900 = or i1 %898, %899, !dbg !91
  %901 = select i1 %900, float %894, float %897, !dbg !92
  %902 = bitcast float %901 to i32, !dbg !86
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 2, i32 31), !dbg !86
  %904 = bitcast i32 %903 to float, !dbg !86
  %905 = fcmp olt float %901, %904, !dbg !88
  %906 = fcmp uno float %901, 0.000000e+00, !dbg !93
  %907 = or i1 %905, %906, !dbg !91
  %908 = select i1 %907, float %901, float %904, !dbg !92
  %909 = bitcast float %908 to i32, !dbg !86
  %910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 1, i32 31), !dbg !86
  %911 = bitcast i32 %910 to float, !dbg !86
  %912 = fcmp olt float %908, %911, !dbg !88
  %913 = fcmp uno float %908, 0.000000e+00, !dbg !93
  %914 = or i1 %912, %913, !dbg !91
  %915 = and i32 %207, 15, !dbg !86
  %916 = getelementptr float, ptr addrspace(3) @global_smem, i32 %915, !dbg !86
  %917 = select i1 %669, i32 %664, i32 %665, !dbg !92
  %918 = insertelement <1 x i32> poison, i32 %917, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %916, <1 x i32> %918, i1 %401) #5, !dbg !86
  %919 = or disjoint i32 %915, 16, !dbg !86
  %920 = getelementptr float, ptr addrspace(3) @global_smem, i32 %919, !dbg !86
  %921 = select i1 %704, i32 %699, i32 %700, !dbg !92
  %922 = insertelement <1 x i32> poison, i32 %921, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %920, <1 x i32> %922, i1 %401) #5, !dbg !86
  %923 = or disjoint i32 %915, 32, !dbg !86
  %924 = getelementptr float, ptr addrspace(3) @global_smem, i32 %923, !dbg !86
  %925 = select i1 %739, i32 %734, i32 %735, !dbg !92
  %926 = insertelement <1 x i32> poison, i32 %925, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %926, i1 %401) #5, !dbg !86
  %927 = or disjoint i32 %915, 48, !dbg !86
  %928 = getelementptr float, ptr addrspace(3) @global_smem, i32 %927, !dbg !86
  %929 = select i1 %774, i32 %769, i32 %770, !dbg !92
  %930 = insertelement <1 x i32> poison, i32 %929, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %928, <1 x i32> %930, i1 %401) #5, !dbg !86
  %931 = or disjoint i32 %915, 64, !dbg !86
  %932 = getelementptr float, ptr addrspace(3) @global_smem, i32 %931, !dbg !86
  %933 = select i1 %809, i32 %804, i32 %805, !dbg !92
  %934 = insertelement <1 x i32> poison, i32 %933, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %932, <1 x i32> %934, i1 %401) #5, !dbg !86
  %935 = or disjoint i32 %915, 80, !dbg !86
  %936 = getelementptr float, ptr addrspace(3) @global_smem, i32 %935, !dbg !86
  %937 = select i1 %844, i32 %839, i32 %840, !dbg !92
  %938 = insertelement <1 x i32> poison, i32 %937, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %938, i1 %401) #5, !dbg !86
  %939 = or disjoint i32 %915, 96, !dbg !86
  %940 = getelementptr float, ptr addrspace(3) @global_smem, i32 %939, !dbg !86
  %941 = select i1 %879, i32 %874, i32 %875, !dbg !92
  %942 = insertelement <1 x i32> poison, i32 %941, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %940, <1 x i32> %942, i1 %401) #5, !dbg !86
  %943 = or disjoint i32 %915, 112, !dbg !86
  %944 = getelementptr float, ptr addrspace(3) @global_smem, i32 %943, !dbg !86
  %945 = select i1 %914, i32 %909, i32 %910, !dbg !92
  %946 = insertelement <1 x i32> poison, i32 %945, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %944, <1 x i32> %946, i1 %401) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %947 = icmp slt i32 %18, 128, !dbg !86
  %948 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %947) #5, !dbg !86
  %949 = bitcast i32 %948 to float, !dbg !86
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 8, i32 31), !dbg !86
  %951 = bitcast i32 %950 to float, !dbg !86
  %952 = fcmp olt float %949, %951, !dbg !88
  %953 = fcmp uno float %949, 0.000000e+00, !dbg !93
  %954 = or i1 %953, %952, !dbg !91
  %955 = select i1 %954, float %949, float %951, !dbg !92
  %956 = bitcast float %955 to i32, !dbg !86
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %956, i32 4, i32 31), !dbg !86
  %958 = bitcast i32 %957 to float, !dbg !86
  %959 = fcmp olt float %955, %958, !dbg !88
  %960 = fcmp uno float %955, 0.000000e+00, !dbg !93
  %961 = or i1 %959, %960, !dbg !91
  %962 = select i1 %961, float %955, float %958, !dbg !92
  %963 = bitcast float %962 to i32, !dbg !86
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 2, i32 31), !dbg !86
  %965 = bitcast i32 %964 to float, !dbg !86
  %966 = fcmp olt float %962, %965, !dbg !88
  %967 = fcmp uno float %962, 0.000000e+00, !dbg !93
  %968 = or i1 %966, %967, !dbg !91
  %969 = select i1 %968, float %962, float %965, !dbg !92
  %970 = bitcast float %969 to i32, !dbg !86
  %971 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %970, i32 1, i32 31), !dbg !86
  %972 = bitcast i32 %971 to float, !dbg !86
  %973 = fcmp olt float %969, %972, !dbg !88
  %974 = fcmp uno float %969, 0.000000e+00, !dbg !93
  %975 = or i1 %973, %974, !dbg !91
  %976 = and i32 %18, 15, !dbg !86
  %977 = icmp eq i32 %976, 0, !dbg !86
  %978 = and i1 %947, %977, !dbg !86
  %979 = select i1 %975, i32 %970, i32 %971, !dbg !92
  %980 = insertelement <1 x i32> poison, i32 %979, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %980, i1 %978) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %981 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !86
  %982 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !86
  %983 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !86
  %984 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !86
  %985 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !86
  %986 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !86
  %987 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !86
  %988 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %989 = bitcast float %981 to i32, !dbg !94
  %990 = bitcast float %982 to i32, !dbg !94
  %991 = bitcast float %983 to i32, !dbg !94
  %992 = bitcast float %984 to i32, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %989, i32 %990, i32 %991, i32 %992, i1 true) #5, !dbg !94
  %993 = bitcast float %985 to i32, !dbg !94
  %994 = bitcast float %986 to i32, !dbg !94
  %995 = bitcast float %987 to i32, !dbg !94
  %996 = bitcast float %988 to i32, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %993, i32 %994, i32 %995, i32 %996, i1 true) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %997 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %208, !dbg !94
  %998 = load float, ptr addrspace(3) %997, align 4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %999 = extractelement <16 x float> %606, i64 7, !dbg !95
  %1000 = bitcast float %999 to i32, !dbg !95
  %1001 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1000, i32 16, i32 31), !dbg !95
  %1002 = bitcast i32 %1001 to float, !dbg !95
  %1003 = fcmp ogt float %999, %1002, !dbg !96
  %1004 = extractelement <16 x i1> %639, i64 7, !dbg !97
  %1005 = or i1 %1004, %1003, !dbg !97
  %1006 = select i1 %1005, float %999, float %1002, !dbg !98
  %1007 = bitcast float %1006 to i32, !dbg !95
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 8, i32 31), !dbg !95
  %1009 = bitcast i32 %1008 to float, !dbg !95
  %1010 = fcmp ogt float %1006, %1009, !dbg !96
  %1011 = fcmp uno float %1006, 0.000000e+00, !dbg !89
  %1012 = or i1 %1010, %1011, !dbg !97
  %1013 = select i1 %1012, float %1006, float %1009, !dbg !98
  %1014 = bitcast float %1013 to i32, !dbg !95
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 4, i32 31), !dbg !95
  %1016 = bitcast i32 %1015 to float, !dbg !95
  %1017 = fcmp ogt float %1013, %1016, !dbg !96
  %1018 = fcmp uno float %1013, 0.000000e+00, !dbg !89
  %1019 = or i1 %1017, %1018, !dbg !97
  %1020 = select i1 %1019, float %1013, float %1016, !dbg !98
  %1021 = bitcast float %1020 to i32, !dbg !95
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 2, i32 31), !dbg !95
  %1023 = bitcast i32 %1022 to float, !dbg !95
  %1024 = fcmp ogt float %1020, %1023, !dbg !96
  %1025 = fcmp uno float %1020, 0.000000e+00, !dbg !89
  %1026 = or i1 %1024, %1025, !dbg !97
  %1027 = select i1 %1026, float %1020, float %1023, !dbg !98
  %1028 = bitcast float %1027 to i32, !dbg !95
  %1029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1028, i32 1, i32 31), !dbg !95
  %1030 = bitcast i32 %1029 to float, !dbg !95
  %1031 = fcmp ogt float %1027, %1030, !dbg !96
  %1032 = fcmp uno float %1027, 0.000000e+00, !dbg !89
  %1033 = or i1 %1031, %1032, !dbg !97
  %1034 = extractelement <16 x float> %606, i64 6, !dbg !95
  %1035 = bitcast float %1034 to i32, !dbg !95
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 16, i32 31), !dbg !95
  %1037 = bitcast i32 %1036 to float, !dbg !95
  %1038 = fcmp ogt float %1034, %1037, !dbg !96
  %1039 = extractelement <16 x i1> %639, i64 6, !dbg !97
  %1040 = or i1 %1039, %1038, !dbg !97
  %1041 = select i1 %1040, float %1034, float %1037, !dbg !98
  %1042 = bitcast float %1041 to i32, !dbg !95
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 8, i32 31), !dbg !95
  %1044 = bitcast i32 %1043 to float, !dbg !95
  %1045 = fcmp ogt float %1041, %1044, !dbg !96
  %1046 = fcmp uno float %1041, 0.000000e+00, !dbg !89
  %1047 = or i1 %1045, %1046, !dbg !97
  %1048 = select i1 %1047, float %1041, float %1044, !dbg !98
  %1049 = bitcast float %1048 to i32, !dbg !95
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 4, i32 31), !dbg !95
  %1051 = bitcast i32 %1050 to float, !dbg !95
  %1052 = fcmp ogt float %1048, %1051, !dbg !96
  %1053 = fcmp uno float %1048, 0.000000e+00, !dbg !89
  %1054 = or i1 %1052, %1053, !dbg !97
  %1055 = select i1 %1054, float %1048, float %1051, !dbg !98
  %1056 = bitcast float %1055 to i32, !dbg !95
  %1057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1056, i32 2, i32 31), !dbg !95
  %1058 = bitcast i32 %1057 to float, !dbg !95
  %1059 = fcmp ogt float %1055, %1058, !dbg !96
  %1060 = fcmp uno float %1055, 0.000000e+00, !dbg !89
  %1061 = or i1 %1059, %1060, !dbg !97
  %1062 = select i1 %1061, float %1055, float %1058, !dbg !98
  %1063 = bitcast float %1062 to i32, !dbg !95
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 1, i32 31), !dbg !95
  %1065 = bitcast i32 %1064 to float, !dbg !95
  %1066 = fcmp ogt float %1062, %1065, !dbg !96
  %1067 = fcmp uno float %1062, 0.000000e+00, !dbg !89
  %1068 = or i1 %1066, %1067, !dbg !97
  %1069 = extractelement <16 x float> %606, i64 5, !dbg !95
  %1070 = bitcast float %1069 to i32, !dbg !95
  %1071 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1070, i32 16, i32 31), !dbg !95
  %1072 = bitcast i32 %1071 to float, !dbg !95
  %1073 = fcmp ogt float %1069, %1072, !dbg !96
  %1074 = extractelement <16 x i1> %639, i64 5, !dbg !97
  %1075 = or i1 %1074, %1073, !dbg !97
  %1076 = select i1 %1075, float %1069, float %1072, !dbg !98
  %1077 = bitcast float %1076 to i32, !dbg !95
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1077, i32 8, i32 31), !dbg !95
  %1079 = bitcast i32 %1078 to float, !dbg !95
  %1080 = fcmp ogt float %1076, %1079, !dbg !96
  %1081 = fcmp uno float %1076, 0.000000e+00, !dbg !89
  %1082 = or i1 %1080, %1081, !dbg !97
  %1083 = select i1 %1082, float %1076, float %1079, !dbg !98
  %1084 = bitcast float %1083 to i32, !dbg !95
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 4, i32 31), !dbg !95
  %1086 = bitcast i32 %1085 to float, !dbg !95
  %1087 = fcmp ogt float %1083, %1086, !dbg !96
  %1088 = fcmp uno float %1083, 0.000000e+00, !dbg !89
  %1089 = or i1 %1087, %1088, !dbg !97
  %1090 = select i1 %1089, float %1083, float %1086, !dbg !98
  %1091 = bitcast float %1090 to i32, !dbg !95
  %1092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1091, i32 2, i32 31), !dbg !95
  %1093 = bitcast i32 %1092 to float, !dbg !95
  %1094 = fcmp ogt float %1090, %1093, !dbg !96
  %1095 = fcmp uno float %1090, 0.000000e+00, !dbg !89
  %1096 = or i1 %1094, %1095, !dbg !97
  %1097 = select i1 %1096, float %1090, float %1093, !dbg !98
  %1098 = bitcast float %1097 to i32, !dbg !95
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 1, i32 31), !dbg !95
  %1100 = bitcast i32 %1099 to float, !dbg !95
  %1101 = fcmp ogt float %1097, %1100, !dbg !96
  %1102 = fcmp uno float %1097, 0.000000e+00, !dbg !89
  %1103 = or i1 %1101, %1102, !dbg !97
  %1104 = extractelement <16 x float> %606, i64 4, !dbg !95
  %1105 = bitcast float %1104 to i32, !dbg !95
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 16, i32 31), !dbg !95
  %1107 = bitcast i32 %1106 to float, !dbg !95
  %1108 = fcmp ogt float %1104, %1107, !dbg !96
  %1109 = extractelement <16 x i1> %639, i64 4, !dbg !97
  %1110 = or i1 %1109, %1108, !dbg !97
  %1111 = select i1 %1110, float %1104, float %1107, !dbg !98
  %1112 = bitcast float %1111 to i32, !dbg !95
  %1113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1112, i32 8, i32 31), !dbg !95
  %1114 = bitcast i32 %1113 to float, !dbg !95
  %1115 = fcmp ogt float %1111, %1114, !dbg !96
  %1116 = fcmp uno float %1111, 0.000000e+00, !dbg !89
  %1117 = or i1 %1115, %1116, !dbg !97
  %1118 = select i1 %1117, float %1111, float %1114, !dbg !98
  %1119 = bitcast float %1118 to i32, !dbg !95
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 4, i32 31), !dbg !95
  %1121 = bitcast i32 %1120 to float, !dbg !95
  %1122 = fcmp ogt float %1118, %1121, !dbg !96
  %1123 = fcmp uno float %1118, 0.000000e+00, !dbg !89
  %1124 = or i1 %1122, %1123, !dbg !97
  %1125 = select i1 %1124, float %1118, float %1121, !dbg !98
  %1126 = bitcast float %1125 to i32, !dbg !95
  %1127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1126, i32 2, i32 31), !dbg !95
  %1128 = bitcast i32 %1127 to float, !dbg !95
  %1129 = fcmp ogt float %1125, %1128, !dbg !96
  %1130 = fcmp uno float %1125, 0.000000e+00, !dbg !89
  %1131 = or i1 %1129, %1130, !dbg !97
  %1132 = select i1 %1131, float %1125, float %1128, !dbg !98
  %1133 = bitcast float %1132 to i32, !dbg !95
  %1134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1133, i32 1, i32 31), !dbg !95
  %1135 = bitcast i32 %1134 to float, !dbg !95
  %1136 = fcmp ogt float %1132, %1135, !dbg !96
  %1137 = fcmp uno float %1132, 0.000000e+00, !dbg !89
  %1138 = or i1 %1136, %1137, !dbg !97
  %1139 = extractelement <16 x float> %606, i64 3, !dbg !95
  %1140 = bitcast float %1139 to i32, !dbg !95
  %1141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1140, i32 16, i32 31), !dbg !95
  %1142 = bitcast i32 %1141 to float, !dbg !95
  %1143 = fcmp ogt float %1139, %1142, !dbg !96
  %1144 = extractelement <16 x i1> %639, i64 3, !dbg !97
  %1145 = or i1 %1144, %1143, !dbg !97
  %1146 = select i1 %1145, float %1139, float %1142, !dbg !98
  %1147 = bitcast float %1146 to i32, !dbg !95
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1147, i32 8, i32 31), !dbg !95
  %1149 = bitcast i32 %1148 to float, !dbg !95
  %1150 = fcmp ogt float %1146, %1149, !dbg !96
  %1151 = fcmp uno float %1146, 0.000000e+00, !dbg !89
  %1152 = or i1 %1150, %1151, !dbg !97
  %1153 = select i1 %1152, float %1146, float %1149, !dbg !98
  %1154 = bitcast float %1153 to i32, !dbg !95
  %1155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1154, i32 4, i32 31), !dbg !95
  %1156 = bitcast i32 %1155 to float, !dbg !95
  %1157 = fcmp ogt float %1153, %1156, !dbg !96
  %1158 = fcmp uno float %1153, 0.000000e+00, !dbg !89
  %1159 = or i1 %1157, %1158, !dbg !97
  %1160 = select i1 %1159, float %1153, float %1156, !dbg !98
  %1161 = bitcast float %1160 to i32, !dbg !95
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 2, i32 31), !dbg !95
  %1163 = bitcast i32 %1162 to float, !dbg !95
  %1164 = fcmp ogt float %1160, %1163, !dbg !96
  %1165 = fcmp uno float %1160, 0.000000e+00, !dbg !89
  %1166 = or i1 %1164, %1165, !dbg !97
  %1167 = select i1 %1166, float %1160, float %1163, !dbg !98
  %1168 = bitcast float %1167 to i32, !dbg !95
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 1, i32 31), !dbg !95
  %1170 = bitcast i32 %1169 to float, !dbg !95
  %1171 = fcmp ogt float %1167, %1170, !dbg !96
  %1172 = fcmp uno float %1167, 0.000000e+00, !dbg !89
  %1173 = or i1 %1171, %1172, !dbg !97
  %1174 = extractelement <16 x float> %606, i64 2, !dbg !95
  %1175 = bitcast float %1174 to i32, !dbg !95
  %1176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1175, i32 16, i32 31), !dbg !95
  %1177 = bitcast i32 %1176 to float, !dbg !95
  %1178 = fcmp ogt float %1174, %1177, !dbg !96
  %1179 = extractelement <16 x i1> %639, i64 2, !dbg !97
  %1180 = or i1 %1179, %1178, !dbg !97
  %1181 = select i1 %1180, float %1174, float %1177, !dbg !98
  %1182 = bitcast float %1181 to i32, !dbg !95
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 8, i32 31), !dbg !95
  %1184 = bitcast i32 %1183 to float, !dbg !95
  %1185 = fcmp ogt float %1181, %1184, !dbg !96
  %1186 = fcmp uno float %1181, 0.000000e+00, !dbg !89
  %1187 = or i1 %1185, %1186, !dbg !97
  %1188 = select i1 %1187, float %1181, float %1184, !dbg !98
  %1189 = bitcast float %1188 to i32, !dbg !95
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 4, i32 31), !dbg !95
  %1191 = bitcast i32 %1190 to float, !dbg !95
  %1192 = fcmp ogt float %1188, %1191, !dbg !96
  %1193 = fcmp uno float %1188, 0.000000e+00, !dbg !89
  %1194 = or i1 %1192, %1193, !dbg !97
  %1195 = select i1 %1194, float %1188, float %1191, !dbg !98
  %1196 = bitcast float %1195 to i32, !dbg !95
  %1197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1196, i32 2, i32 31), !dbg !95
  %1198 = bitcast i32 %1197 to float, !dbg !95
  %1199 = fcmp ogt float %1195, %1198, !dbg !96
  %1200 = fcmp uno float %1195, 0.000000e+00, !dbg !89
  %1201 = or i1 %1199, %1200, !dbg !97
  %1202 = select i1 %1201, float %1195, float %1198, !dbg !98
  %1203 = bitcast float %1202 to i32, !dbg !95
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 1, i32 31), !dbg !95
  %1205 = bitcast i32 %1204 to float, !dbg !95
  %1206 = fcmp ogt float %1202, %1205, !dbg !96
  %1207 = fcmp uno float %1202, 0.000000e+00, !dbg !89
  %1208 = or i1 %1206, %1207, !dbg !97
  %1209 = extractelement <16 x float> %606, i64 1, !dbg !95
  %1210 = bitcast float %1209 to i32, !dbg !95
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 16, i32 31), !dbg !95
  %1212 = bitcast i32 %1211 to float, !dbg !95
  %1213 = fcmp ogt float %1209, %1212, !dbg !96
  %1214 = extractelement <16 x i1> %639, i64 1, !dbg !97
  %1215 = or i1 %1214, %1213, !dbg !97
  %1216 = select i1 %1215, float %1209, float %1212, !dbg !98
  %1217 = bitcast float %1216 to i32, !dbg !95
  %1218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1217, i32 8, i32 31), !dbg !95
  %1219 = bitcast i32 %1218 to float, !dbg !95
  %1220 = fcmp ogt float %1216, %1219, !dbg !96
  %1221 = fcmp uno float %1216, 0.000000e+00, !dbg !89
  %1222 = or i1 %1220, %1221, !dbg !97
  %1223 = select i1 %1222, float %1216, float %1219, !dbg !98
  %1224 = bitcast float %1223 to i32, !dbg !95
  %1225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1224, i32 4, i32 31), !dbg !95
  %1226 = bitcast i32 %1225 to float, !dbg !95
  %1227 = fcmp ogt float %1223, %1226, !dbg !96
  %1228 = fcmp uno float %1223, 0.000000e+00, !dbg !89
  %1229 = or i1 %1227, %1228, !dbg !97
  %1230 = select i1 %1229, float %1223, float %1226, !dbg !98
  %1231 = bitcast float %1230 to i32, !dbg !95
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1231, i32 2, i32 31), !dbg !95
  %1233 = bitcast i32 %1232 to float, !dbg !95
  %1234 = fcmp ogt float %1230, %1233, !dbg !96
  %1235 = fcmp uno float %1230, 0.000000e+00, !dbg !89
  %1236 = or i1 %1234, %1235, !dbg !97
  %1237 = select i1 %1236, float %1230, float %1233, !dbg !98
  %1238 = bitcast float %1237 to i32, !dbg !95
  %1239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1238, i32 1, i32 31), !dbg !95
  %1240 = bitcast i32 %1239 to float, !dbg !95
  %1241 = fcmp ogt float %1237, %1240, !dbg !96
  %1242 = fcmp uno float %1237, 0.000000e+00, !dbg !89
  %1243 = or i1 %1241, %1242, !dbg !97
  %1244 = extractelement <16 x float> %606, i64 0, !dbg !95
  %1245 = bitcast float %1244 to i32, !dbg !95
  %1246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1245, i32 16, i32 31), !dbg !95
  %1247 = bitcast i32 %1246 to float, !dbg !95
  %1248 = fcmp ogt float %1244, %1247, !dbg !96
  %1249 = extractelement <16 x i1> %639, i64 0, !dbg !97
  %1250 = or i1 %1249, %1248, !dbg !97
  %1251 = select i1 %1250, float %1244, float %1247, !dbg !98
  %1252 = bitcast float %1251 to i32, !dbg !95
  %1253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1252, i32 8, i32 31), !dbg !95
  %1254 = bitcast i32 %1253 to float, !dbg !95
  %1255 = fcmp ogt float %1251, %1254, !dbg !96
  %1256 = fcmp uno float %1251, 0.000000e+00, !dbg !89
  %1257 = or i1 %1255, %1256, !dbg !97
  %1258 = select i1 %1257, float %1251, float %1254, !dbg !98
  %1259 = bitcast float %1258 to i32, !dbg !95
  %1260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1259, i32 4, i32 31), !dbg !95
  %1261 = bitcast i32 %1260 to float, !dbg !95
  %1262 = fcmp ogt float %1258, %1261, !dbg !96
  %1263 = fcmp uno float %1258, 0.000000e+00, !dbg !89
  %1264 = or i1 %1262, %1263, !dbg !97
  %1265 = select i1 %1264, float %1258, float %1261, !dbg !98
  %1266 = bitcast float %1265 to i32, !dbg !95
  %1267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1266, i32 2, i32 31), !dbg !95
  %1268 = bitcast i32 %1267 to float, !dbg !95
  %1269 = fcmp ogt float %1265, %1268, !dbg !96
  %1270 = fcmp uno float %1265, 0.000000e+00, !dbg !89
  %1271 = or i1 %1269, %1270, !dbg !97
  %1272 = select i1 %1271, float %1265, float %1268, !dbg !98
  %1273 = bitcast float %1272 to i32, !dbg !95
  %1274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1273, i32 1, i32 31), !dbg !95
  %1275 = bitcast i32 %1274 to float, !dbg !95
  %1276 = fcmp ogt float %1272, %1275, !dbg !96
  %1277 = fcmp uno float %1272, 0.000000e+00, !dbg !89
  %1278 = or i1 %1276, %1277, !dbg !97
  %1279 = select i1 %1033, i32 %1028, i32 %1029, !dbg !98
  %1280 = insertelement <1 x i32> poison, i32 %1279, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %916, <1 x i32> %1280, i1 %401) #5, !dbg !95
  %1281 = select i1 %1068, i32 %1063, i32 %1064, !dbg !98
  %1282 = insertelement <1 x i32> poison, i32 %1281, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %920, <1 x i32> %1282, i1 %401) #5, !dbg !95
  %1283 = select i1 %1103, i32 %1098, i32 %1099, !dbg !98
  %1284 = insertelement <1 x i32> poison, i32 %1283, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %1284, i1 %401) #5, !dbg !95
  %1285 = select i1 %1138, i32 %1133, i32 %1134, !dbg !98
  %1286 = insertelement <1 x i32> poison, i32 %1285, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %928, <1 x i32> %1286, i1 %401) #5, !dbg !95
  %1287 = select i1 %1173, i32 %1168, i32 %1169, !dbg !98
  %1288 = insertelement <1 x i32> poison, i32 %1287, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %932, <1 x i32> %1288, i1 %401) #5, !dbg !95
  %1289 = select i1 %1208, i32 %1203, i32 %1204, !dbg !98
  %1290 = insertelement <1 x i32> poison, i32 %1289, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %1290, i1 %401) #5, !dbg !95
  %1291 = select i1 %1243, i32 %1238, i32 %1239, !dbg !98
  %1292 = insertelement <1 x i32> poison, i32 %1291, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %940, <1 x i32> %1292, i1 %401) #5, !dbg !95
  %1293 = select i1 %1278, i32 %1273, i32 %1274, !dbg !98
  %1294 = insertelement <1 x i32> poison, i32 %1293, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %944, <1 x i32> %1294, i1 %401) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %1295 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %411, i1 %947) #5, !dbg !95
  %1296 = bitcast i32 %1295 to float, !dbg !95
  %1297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1295, i32 8, i32 31), !dbg !95
  %1298 = bitcast i32 %1297 to float, !dbg !95
  %1299 = fcmp ogt float %1296, %1298, !dbg !96
  %1300 = fcmp uno float %1296, 0.000000e+00, !dbg !89
  %1301 = or i1 %1300, %1299, !dbg !97
  %1302 = select i1 %1301, float %1296, float %1298, !dbg !98
  %1303 = bitcast float %1302 to i32, !dbg !95
  %1304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1303, i32 4, i32 31), !dbg !95
  %1305 = bitcast i32 %1304 to float, !dbg !95
  %1306 = fcmp ogt float %1302, %1305, !dbg !96
  %1307 = fcmp uno float %1302, 0.000000e+00, !dbg !89
  %1308 = or i1 %1306, %1307, !dbg !97
  %1309 = select i1 %1308, float %1302, float %1305, !dbg !98
  %1310 = bitcast float %1309 to i32, !dbg !95
  %1311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1310, i32 2, i32 31), !dbg !95
  %1312 = bitcast i32 %1311 to float, !dbg !95
  %1313 = fcmp ogt float %1309, %1312, !dbg !96
  %1314 = fcmp uno float %1309, 0.000000e+00, !dbg !89
  %1315 = or i1 %1313, %1314, !dbg !97
  %1316 = select i1 %1315, float %1309, float %1312, !dbg !98
  %1317 = bitcast float %1316 to i32, !dbg !95
  %1318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1317, i32 1, i32 31), !dbg !95
  %1319 = bitcast i32 %1318 to float, !dbg !95
  %1320 = fcmp ogt float %1316, %1319, !dbg !96
  %1321 = fcmp uno float %1316, 0.000000e+00, !dbg !89
  %1322 = or i1 %1320, %1321, !dbg !97
  %1323 = select i1 %1322, i32 %1317, i32 %1318, !dbg !98
  %1324 = insertelement <1 x i32> poison, i32 %1323, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %1324, i1 %978) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %1325 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %1326 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !95
  %1327 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !95
  %1328 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !95
  %1329 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !95
  %1330 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !95
  %1331 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !95
  %1332 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1333 = bitcast float %1325 to i32, !dbg !99
  %1334 = bitcast float %1326 to i32, !dbg !99
  %1335 = bitcast float %1327 to i32, !dbg !99
  %1336 = bitcast float %1328 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1333, i32 %1334, i32 %1335, i32 %1336, i1 true) #5, !dbg !99
  %1337 = bitcast float %1329 to i32, !dbg !99
  %1338 = bitcast float %1330 to i32, !dbg !99
  %1339 = bitcast float %1331 to i32, !dbg !99
  %1340 = bitcast float %1332 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1337, i32 %1338, i32 %1339, i32 %1340, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1341 = load float, ptr addrspace(3) %997, align 4, !dbg !99
  %1342 = sext i32 %209 to i64, !dbg !100
  %1343 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1342, !dbg !100
  %1344 = fptrunc float %998 to bfloat, !dbg !94
  %1345 = and i32 %18, 504, !dbg !94
  %1346 = icmp eq i32 %1345, 0, !dbg !94
  %1347 = bitcast bfloat %1344 to i16, !dbg !94
  %1348 = and i1 %1346, %210, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1347, ptr addrspace(1) %1343, i1 %1348) #5, !dbg !94
  %1349 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1342, !dbg !101
  %1350 = fptrunc float %1341 to bfloat, !dbg !99
  %1351 = bitcast bfloat %1350 to i16, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1351, ptr addrspace(1) %1349, i1 %1348) #5, !dbg !99
  %1352 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1342, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1347, ptr addrspace(1) %1352, i1 %1348) #5, !dbg !103
  %1353 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1342, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1351, ptr addrspace(1) %1353, i1 %1348) #5, !dbg !105
  %1354 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1342, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1347, ptr addrspace(1) %1354, i1 %1348) #5, !dbg !107
  %1355 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1342, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1351, ptr addrspace(1) %1355, i1 %1348) #5, !dbg !109
  %1356 = insertelement <8 x float> poison, float %988, i64 0, !dbg !110
  %1357 = insertelement <8 x float> %1356, float %987, i64 1, !dbg !110
  %1358 = insertelement <8 x float> %1357, float %986, i64 2, !dbg !110
  %1359 = insertelement <8 x float> %1358, float %985, i64 3, !dbg !110
  %1360 = insertelement <8 x float> %1359, float %984, i64 4, !dbg !110
  %1361 = insertelement <8 x float> %1360, float %983, i64 5, !dbg !110
  %1362 = insertelement <8 x float> %1361, float %982, i64 6, !dbg !110
  %1363 = insertelement <8 x float> %1362, float %981, i64 7, !dbg !110
  %1364 = fcmp oge <8 x float> %1363, zeroinitializer, !dbg !110
  %1365 = select <8 x i1> %1364, <8 x float> zeroinitializer, <8 x float> %1363, !dbg !110
  %1366 = fsub <8 x float> zeroinitializer, %1365, !dbg !112
  %1367 = insertelement <8 x float> poison, float %1332, i64 0, !dbg !113
  %1368 = insertelement <8 x float> %1367, float %1331, i64 1, !dbg !113
  %1369 = insertelement <8 x float> %1368, float %1330, i64 2, !dbg !113
  %1370 = insertelement <8 x float> %1369, float %1329, i64 3, !dbg !113
  %1371 = insertelement <8 x float> %1370, float %1328, i64 4, !dbg !113
  %1372 = insertelement <8 x float> %1371, float %1327, i64 5, !dbg !113
  %1373 = insertelement <8 x float> %1372, float %1326, i64 6, !dbg !113
  %1374 = insertelement <8 x float> %1373, float %1325, i64 7, !dbg !113
  %1375 = fcmp ole <8 x float> %1374, zeroinitializer, !dbg !113
  %1376 = select <8 x i1> %1375, <8 x float> zeroinitializer, <8 x float> %1374, !dbg !113
  %1377 = fcmp ogt <8 x float> %1366, %1376, !dbg !115
  %1378 = fcmp uno <8 x float> %1366, zeroinitializer, !dbg !117
  %1379 = or <8 x i1> %1378, %1377, !dbg !118
  %1380 = select <8 x i1> %1379, <8 x float> %1366, <8 x float> %1376, !dbg !119
  %1381 = fmul <8 x float> %1380, splat (float 0x3F80204080000000), !dbg !120
  %1382 = fcmp ogt <8 x float> %1381, splat (float 0x3EE4F8B580000000), !dbg !121
  %1383 = extractelement <8 x float> %1381, i64 7, !dbg !123
  %1384 = fcmp uno float %1383, 0.000000e+00, !dbg !124
  %1385 = extractelement <8 x float> %1381, i64 6, !dbg !123
  %1386 = fcmp uno float %1385, 0.000000e+00, !dbg !124
  %1387 = extractelement <8 x float> %1381, i64 5, !dbg !123
  %1388 = fcmp uno float %1387, 0.000000e+00, !dbg !124
  %1389 = extractelement <8 x float> %1381, i64 4, !dbg !123
  %1390 = fcmp uno float %1389, 0.000000e+00, !dbg !124
  %1391 = extractelement <8 x float> %1381, i64 3, !dbg !123
  %1392 = fcmp uno float %1391, 0.000000e+00, !dbg !124
  %1393 = extractelement <8 x float> %1381, i64 2, !dbg !123
  %1394 = fcmp uno float %1393, 0.000000e+00, !dbg !124
  %1395 = extractelement <8 x float> %1381, i64 1, !dbg !123
  %1396 = fcmp uno float %1395, 0.000000e+00, !dbg !124
  %1397 = extractelement <8 x float> %1381, i64 0, !dbg !123
  %1398 = fcmp uno float %1397, 0.000000e+00, !dbg !124
  %1399 = extractelement <8 x i1> %1382, i64 7, !dbg !125
  %1400 = or i1 %1399, %1384, !dbg !125
  %1401 = extractelement <8 x i1> %1382, i64 6, !dbg !125
  %1402 = or i1 %1401, %1386, !dbg !125
  %1403 = extractelement <8 x i1> %1382, i64 5, !dbg !125
  %1404 = or i1 %1403, %1388, !dbg !125
  %1405 = extractelement <8 x i1> %1382, i64 4, !dbg !125
  %1406 = or i1 %1405, %1390, !dbg !125
  %1407 = extractelement <8 x i1> %1382, i64 3, !dbg !125
  %1408 = or i1 %1407, %1392, !dbg !125
  %1409 = extractelement <8 x i1> %1382, i64 2, !dbg !125
  %1410 = or i1 %1409, %1394, !dbg !125
  %1411 = extractelement <8 x i1> %1382, i64 1, !dbg !125
  %1412 = or i1 %1411, %1396, !dbg !125
  %1413 = extractelement <8 x i1> %1382, i64 0, !dbg !125
  %1414 = or i1 %1413, %1398, !dbg !125
  %1415 = select i1 %1400, float %1383, float 0x3EE4F8B580000000, !dbg !123
  %1416 = select i1 %1402, float %1385, float 0x3EE4F8B580000000, !dbg !123
  %1417 = select i1 %1404, float %1387, float 0x3EE4F8B580000000, !dbg !123
  %1418 = select i1 %1406, float %1389, float 0x3EE4F8B580000000, !dbg !123
  %1419 = select i1 %1408, float %1391, float 0x3EE4F8B580000000, !dbg !123
  %1420 = select i1 %1410, float %1393, float 0x3EE4F8B580000000, !dbg !123
  %1421 = select i1 %1412, float %1395, float 0x3EE4F8B580000000, !dbg !123
  %1422 = select i1 %1414, float %1397, float 0x3EE4F8B580000000, !dbg !123
  %1423 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1415), !dbg !126
  %1424 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1416), !dbg !126
  %1425 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1417), !dbg !126
  %1426 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1418), !dbg !126
  %1427 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1419), !dbg !126
  %1428 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1420), !dbg !126
  %1429 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1421), !dbg !126
  %1430 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1422), !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %1431 = bitcast float %1423 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1431, i1 true) #5, !dbg !127
  %1432 = bitcast float %1424 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1432, i1 true) #5, !dbg !127
  %1433 = bitcast float %1425 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1433, i1 true) #5, !dbg !127
  %1434 = bitcast float %1426 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1434, i1 true) #5, !dbg !127
  %1435 = bitcast float %1427 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 32), <1 x i32> %1435, i1 true) #5, !dbg !127
  %1436 = bitcast float %1428 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 40), <1 x i32> %1436, i1 true) #5, !dbg !127
  %1437 = bitcast float %1429 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 48), <1 x i32> %1437, i1 true) #5, !dbg !127
  %1438 = bitcast float %1430 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 56), <1 x i32> %1438, i1 true) #5, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %.idx = shl nuw nsw i32 %20, 3, !dbg !127
  %1439 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !127
  %1440 = load float, ptr addrspace(3) %1439, align 8, !dbg !127
  br label %1441, !dbg !128

1441:                                             ; preds = %633, %1441
  %indvars.iv116 = phi i64 [ 0, %633 ], [ %indvars.iv.next117, %1441 ]
  %1442 = trunc nuw nsw i64 %indvars.iv116 to i32, !dbg !129
  %1443 = add i32 %28, %1442, !dbg !129
  %1444 = sext i32 %1443 to i64, !dbg !130
  %1445 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1444, !dbg !130
  %1446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1445, i1 %23) #5, !dbg !131
  %1447 = extractvalue { i32, i32, i32, i32 } %1446, 0, !dbg !131
  %1448 = bitcast i32 %1447 to <2 x bfloat>, !dbg !131
  %1449 = extractvalue { i32, i32, i32, i32 } %1446, 1, !dbg !131
  %1450 = bitcast i32 %1449 to <2 x bfloat>, !dbg !131
  %1451 = extractvalue { i32, i32, i32, i32 } %1446, 2, !dbg !131
  %1452 = bitcast i32 %1451 to <2 x bfloat>, !dbg !131
  %1453 = extractvalue { i32, i32, i32, i32 } %1446, 3, !dbg !131
  %1454 = bitcast i32 %1453 to <2 x bfloat>, !dbg !131
  %1455 = extractelement <2 x bfloat> %1448, i64 0, !dbg !131
  %1456 = extractelement <2 x bfloat> %1448, i64 1, !dbg !131
  %1457 = extractelement <2 x bfloat> %1450, i64 0, !dbg !131
  %1458 = extractelement <2 x bfloat> %1450, i64 1, !dbg !131
  %1459 = extractelement <2 x bfloat> %1452, i64 0, !dbg !131
  %1460 = extractelement <2 x bfloat> %1452, i64 1, !dbg !131
  %1461 = extractelement <2 x bfloat> %1454, i64 0, !dbg !131
  %1462 = extractelement <2 x bfloat> %1454, i64 1, !dbg !131
  %1463 = fpext bfloat %1455 to float, !dbg !132
  %1464 = fpext bfloat %1456 to float, !dbg !132
  %1465 = fpext bfloat %1457 to float, !dbg !132
  %1466 = fpext bfloat %1458 to float, !dbg !132
  %1467 = fpext bfloat %1459 to float, !dbg !132
  %1468 = fpext bfloat %1460 to float, !dbg !132
  %1469 = fpext bfloat %1461 to float, !dbg !132
  %1470 = fpext bfloat %1462 to float, !dbg !132
  %1471 = fmul float %1440, %1463, !dbg !127
  %1472 = fmul float %1440, %1464, !dbg !127
  %1473 = fmul float %1440, %1465, !dbg !127
  %1474 = fmul float %1440, %1466, !dbg !127
  %1475 = fmul float %1440, %1467, !dbg !127
  %1476 = fmul float %1440, %1468, !dbg !127
  %1477 = fmul float %1440, %1469, !dbg !127
  %1478 = fmul float %1440, %1470, !dbg !127
  %1479 = tail call float @llvm.nvvm.round.f(float %1471) #5, !dbg !133
  %1480 = tail call float @llvm.nvvm.round.f(float %1472) #5, !dbg !133
  %1481 = tail call float @llvm.nvvm.round.f(float %1473) #5, !dbg !133
  %1482 = tail call float @llvm.nvvm.round.f(float %1474) #5, !dbg !133
  %1483 = tail call float @llvm.nvvm.round.f(float %1475) #5, !dbg !133
  %1484 = tail call float @llvm.nvvm.round.f(float %1476) #5, !dbg !133
  %1485 = tail call float @llvm.nvvm.round.f(float %1477) #5, !dbg !133
  %1486 = tail call float @llvm.nvvm.round.f(float %1478) #5, !dbg !133
  %1487 = insertelement <4 x float> poison, float %1479, i64 0, !dbg !134
  %1488 = insertelement <4 x float> %1487, float %1480, i64 1, !dbg !134
  %1489 = insertelement <4 x float> %1488, float %1481, i64 2, !dbg !134
  %1490 = insertelement <4 x float> %1489, float %1482, i64 3, !dbg !134
  %1491 = fcmp ogt <4 x float> %1490, splat (float -1.270000e+02), !dbg !134
  %1492 = fcmp uno <4 x float> %1490, zeroinitializer, !dbg !136
  %1493 = or <4 x i1> %1491, %1492, !dbg !137
  %1494 = select <4 x i1> %1493, <4 x float> %1490, <4 x float> splat (float -1.270000e+02), !dbg !138
  %1495 = fcmp olt <4 x float> %1494, splat (float 1.270000e+02), !dbg !139
  %1496 = fcmp uno <4 x float> %1494, zeroinitializer, !dbg !141
  %1497 = or <4 x i1> %1495, %1496, !dbg !142
  %1498 = fptosi <4 x float> %1494 to <4 x i8>, !dbg !143
  %1499 = select <4 x i1> %1497, <4 x i8> %1498, <4 x i8> splat (i8 127), !dbg !144
  %1500 = insertelement <4 x float> poison, float %1483, i64 0, !dbg !134
  %1501 = insertelement <4 x float> %1500, float %1484, i64 1, !dbg !134
  %1502 = insertelement <4 x float> %1501, float %1485, i64 2, !dbg !134
  %1503 = insertelement <4 x float> %1502, float %1486, i64 3, !dbg !134
  %1504 = fcmp ogt <4 x float> %1503, splat (float -1.270000e+02), !dbg !134
  %1505 = fcmp uno <4 x float> %1503, zeroinitializer, !dbg !136
  %1506 = or <4 x i1> %1504, %1505, !dbg !137
  %1507 = select <4 x i1> %1506, <4 x float> %1503, <4 x float> splat (float -1.270000e+02), !dbg !138
  %1508 = fcmp olt <4 x float> %1507, splat (float 1.270000e+02), !dbg !139
  %1509 = fcmp uno <4 x float> %1507, zeroinitializer, !dbg !141
  %1510 = or <4 x i1> %1508, %1509, !dbg !142
  %1511 = fptosi <4 x float> %1507 to <4 x i8>, !dbg !143
  %1512 = select <4 x i1> %1510, <4 x i8> %1511, <4 x i8> splat (i8 127), !dbg !144
  %1513 = getelementptr i8, ptr addrspace(1) %10, i64 %1444, !dbg !145
  %1514 = bitcast <4 x i8> %1499 to i32, !dbg !146
  %1515 = bitcast <4 x i8> %1512 to i32, !dbg !146
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1514, i32 %1515, ptr addrspace(1) %1513, i1 %23) #5, !dbg !146
  %1516 = getelementptr i8, ptr addrspace(1) %11, i64 %1444, !dbg !147
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1514, i32 %1515, ptr addrspace(1) %1516, i1 %23) #5, !dbg !148
  %1517 = getelementptr i8, ptr addrspace(1) %12, i64 %1444, !dbg !149
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1514, i32 %1515, ptr addrspace(1) %1517, i1 %23) #5, !dbg !150
  %indvars.iv.next117 = add nuw nsw i64 %indvars.iv116, 512, !dbg !128
  %1518 = icmp samesign ult i64 %indvars.iv116, 2560, !dbg !128
  br i1 %1518, label %1441, label %1519, !dbg !128

1519:                                             ; preds = %1441
  ret void, !dbg !151
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 85, column: 50, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 59, column: 41, scope: !6)
!58 = !DILocation(line: 59, column: 34, scope: !6)
!59 = !DILocation(line: 59, column: 51, scope: !6)
!60 = !DILocation(line: 59, column: 113, scope: !6)
!61 = !DILocation(line: 60, column: 42, scope: !6)
!62 = !DILocation(line: 60, column: 35, scope: !6)
!63 = !DILocation(line: 60, column: 49, scope: !6)
!64 = !DILocation(line: 61, column: 35, scope: !6)
!65 = !DILocation(line: 61, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 102, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 63, column: 95, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 74, column: 24, scope: !6)
!75 = !DILocation(line: 76, column: 24, scope: !6)
!76 = !DILocation(line: 79, column: 24, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !78)
!82 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !78)
!83 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !78)
!84 = !DILocation(line: 86, column: 29, scope: !6)
!85 = !DILocation(line: 86, column: 53, scope: !6)
!86 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 87, column: 40, scope: !6)
!88 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !87)
!89 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !90)
!90 = !DILocation(line: 88, column: 40, scope: !6)
!91 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !87)
!92 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !87)
!93 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !87)
!94 = !DILocation(line: 89, column: 37, scope: !6)
!95 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !90)
!96 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !90)
!97 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !90)
!98 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !90)
!99 = !DILocation(line: 90, column: 37, scope: !6)
!100 = !DILocation(line: 89, column: 25, scope: !6)
!101 = !DILocation(line: 90, column: 25, scope: !6)
!102 = !DILocation(line: 91, column: 25, scope: !6)
!103 = !DILocation(line: 91, column: 37, scope: !6)
!104 = !DILocation(line: 92, column: 25, scope: !6)
!105 = !DILocation(line: 92, column: 37, scope: !6)
!106 = !DILocation(line: 93, column: 25, scope: !6)
!107 = !DILocation(line: 93, column: 37, scope: !6)
!108 = !DILocation(line: 94, column: 25, scope: !6)
!109 = !DILocation(line: 94, column: 37, scope: !6)
!110 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !111)
!111 = !DILocation(line: 103, column: 46, scope: !6)
!112 = !DILocation(line: 104, column: 17, scope: !6)
!113 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !114)
!114 = !DILocation(line: 105, column: 46, scope: !6)
!115 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !116)
!116 = !DILocation(line: 106, column: 46, scope: !6)
!117 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !116)
!119 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !116)
!120 = !DILocation(line: 108, column: 24, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 111, column: 46, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !122)
!125 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !122)
!126 = !DILocation(line: 114, column: 25, scope: !6)
!127 = !DILocation(line: 117, column: 24, scope: !6)
!128 = !DILocation(line: 95, column: 40, scope: !6)
!129 = !DILocation(line: 101, column: 43, scope: !6)
!130 = !DILocation(line: 101, column: 36, scope: !6)
!131 = !DILocation(line: 101, column: 53, scope: !6)
!132 = !DILocation(line: 101, column: 115, scope: !6)
!133 = !DILocation(line: 118, column: 36, scope: !6)
!134 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !135)
!135 = !DILocation(line: 121, column: 46, scope: !6)
!136 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !135)
!137 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !135)
!138 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !135)
!139 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !140)
!140 = !DILocation(line: 123, column: 46, scope: !6)
!141 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !140)
!142 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !140)
!143 = !DILocation(line: 125, column: 25, scope: !6)
!144 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !140)
!145 = !DILocation(line: 126, column: 29, scope: !6)
!146 = !DILocation(line: 126, column: 53, scope: !6)
!147 = !DILocation(line: 127, column: 30, scope: !6)
!148 = !DILocation(line: 127, column: 54, scope: !6)
!149 = !DILocation(line: 128, column: 30, scope: !6)
!150 = !DILocation(line: 128, column: 54, scope: !6)
!151 = !DILocation(line: 95, column: 4, scope: !6)
