; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %19, 7, !dbg !11
  %20 = and i32 %.lobit3, 3, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %20, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 1, !dbg !14
  %26 = and i32 %25, 1022, !dbg !14
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 1016, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = sext i32 %22 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !20
  %52 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !20
  %53 = fpext bfloat %52 to float, !dbg !20
  %54 = fsub float 0.000000e+00, %53, !dbg !24
  %.inv5 = fcmp ole bfloat %50, 0xR0000, !dbg !25
  %55 = select i1 %.inv5, bfloat 0xR0000, bfloat %50, !dbg !25
  %56 = fpext bfloat %55 to float, !dbg !25
  %57 = fcmp ogt float %54, %56, !dbg !27
  %58 = fcmp uno float %54, 0.000000e+00, !dbg !29
  %59 = or i1 %58, %57, !dbg !30
  %60 = select i1 %59, float %54, float %56, !dbg !31
  %61 = fmul float %60, 0x3F80204080000000, !dbg !32
  %62 = fcmp ogt float %61, 0x3EE4F8B580000000, !dbg !33
  %63 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %64 = or i1 %62, %63, !dbg !36
  %65 = select i1 %64, float %61, float 0x3EE4F8B580000000, !dbg !37
  %66 = or disjoint i32 %51, %28
  %67 = or disjoint i32 %51, %29
  %68 = and i32 %27, 4088
  %69 = lshr i32 %27, 6
  %.idx36 = and i32 %69, 48
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx36
  %71 = getelementptr bfloat, ptr addrspace(3) %70, i32 %68
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 2064
  %74 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 4128
  %75 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 6192
  %76 = getelementptr float, ptr addrspace(3) %70, i32 %68
  %77 = or disjoint i32 %68, 4
  %78 = lshr i32 %27, 8
  %79 = and i32 %78, 12
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %83 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 4112
  %84 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 8224
  %85 = getelementptr inbounds nuw i8, ptr addrspace(3) %82, i32 12336
  %86 = zext nneg i32 %26 to i64, !dbg !38
  %87 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 6194
  %88 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !39
  %89 = shufflevector <8 x i1> %88, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %90 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 4
  %91 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 8
  %92 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 12
  br label %93, !dbg !38

93:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %110 = phi <8 x float> [ zeroinitializer, %16 ], [ %298, %._crit_edge ]
  %111 = or disjoint i64 %indvars.iv, %86, !dbg !40
  %112 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %113 = add i32 %66, %112, !dbg !41
  %114 = add i32 %67, %112, !dbg !41
  %115 = sext i32 %113 to i64, !dbg !42
  %116 = getelementptr bfloat, ptr addrspace(1) %0, i64 %115, !dbg !42
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %116, i1 %23) #5, !dbg !43
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !43
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !43
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !43
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %118, i32 %119, i32 %120, i32 %121, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %122 = add nuw nsw i64 %111, 6144, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !46
  %124 = getelementptr bfloat, ptr addrspace(1) %2, i64 %122, !dbg !47
  %125 = getelementptr i32, ptr addrspace(1) %3, i64 %115, !dbg !48
  %126 = sext i32 %114 to i64, !dbg !48
  %127 = getelementptr i32, ptr addrspace(1) %3, i64 %126, !dbg !48
  %128 = getelementptr bfloat, ptr addrspace(1) %6, i64 %111, !dbg !49
  %129 = getelementptr bfloat, ptr addrspace(1) %7, i64 %111, !dbg !50
  %130 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !44
  %131 = load <2 x bfloat>, ptr addrspace(3) %73, align 4, !dbg !44
  %132 = load <2 x bfloat>, ptr addrspace(3) %74, align 4, !dbg !44
  %133 = load <2 x bfloat>, ptr addrspace(3) %75, align 4, !dbg !44
  %134 = shufflevector <2 x bfloat> %130, <2 x bfloat> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %135 = shufflevector <2 x bfloat> %132, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %136 = shufflevector <8 x bfloat> %134, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !44
  %137 = shufflevector <2 x bfloat> %133, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %138 = shufflevector <8 x bfloat> %136, <8 x bfloat> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !44
  %139 = fpext <8 x bfloat> %138 to <8 x float>, !dbg !44
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %123, i1 true) #5, !dbg !51
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !51
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !51
  %143 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !51
  %144 = insertelement <2 x i32> %143, i32 %142, i64 1, !dbg !51
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !51
  %146 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %124, i1 true) #5, !dbg !52
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !52
  %148 = fpext <2 x bfloat> %147 to <2 x float>, !dbg !53
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %23) #5, !dbg !54
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !54
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !54
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !54
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !54
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %23) #5, !dbg !54
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !54
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !54
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !54
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !54
  %159 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %128, i1 true) #5, !dbg !55
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !55
  %161 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !56
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !56
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %129, i1 true) #5, !dbg !57
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !57
  %165 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !58
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !58
  %167 = fadd <2 x float> %145, %148, !dbg !59
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !59
  %169 = sitofp i32 %150 to float, !dbg !60
  %170 = sitofp i32 %151 to float, !dbg !60
  %171 = sitofp i32 %152 to float, !dbg !60
  %172 = sitofp i32 %153 to float, !dbg !60
  %173 = sitofp i32 %155 to float, !dbg !60
  %174 = sitofp i32 %156 to float, !dbg !60
  %175 = sitofp i32 %157 to float, !dbg !60
  %176 = sitofp i32 %158 to float, !dbg !60
  %177 = fmul float %65, %169, !dbg !61
  %178 = fmul float %65, %170, !dbg !61
  %179 = fmul float %65, %171, !dbg !61
  %180 = fmul float %65, %172, !dbg !61
  %181 = fmul float %65, %173, !dbg !61
  %182 = fmul float %65, %174, !dbg !61
  %183 = fmul float %65, %175, !dbg !61
  %184 = fmul float %65, %176, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %185 = bitcast float %177 to i32, !dbg !61
  %186 = bitcast float %178 to i32, !dbg !61
  %187 = bitcast float %179 to i32, !dbg !61
  %188 = bitcast float %180 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %76, i32 %185, i32 %186, i32 %187, i32 %188, i1 true) #5, !dbg !61
  %189 = bitcast float %181 to i32, !dbg !61
  %190 = bitcast float %182 to i32, !dbg !61
  %191 = bitcast float %183 to i32, !dbg !61
  %192 = bitcast float %184 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %81, i32 %189, i32 %190, i32 %191, i32 %192, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %193 = load <2 x float>, ptr addrspace(3) %82, align 8, !dbg !61
  %194 = load <2 x float>, ptr addrspace(3) %83, align 8, !dbg !61
  %195 = load <2 x float>, ptr addrspace(3) %84, align 8, !dbg !61
  %196 = load <2 x float>, ptr addrspace(3) %85, align 8, !dbg !61
  %197 = shufflevector <2 x float> %193, <2 x float> %194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %198 = shufflevector <2 x float> %195, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %199 = shufflevector <8 x float> %197, <8 x float> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !62
  %200 = shufflevector <2 x float> %196, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %201 = shufflevector <8 x float> %199, <8 x float> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !62
  %202 = fmul <8 x float> %201, %162, !dbg !62
  %203 = fadd <8 x float> %202, %166, !dbg !63
  %204 = fmul <8 x float> %168, %203, !dbg !64
  %205 = fadd <8 x float> %204, %139, !dbg !65
  %206 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %206, label %._crit_edge, label %207, !dbg !67

207:                                              ; preds = %93
  %208 = fsub <8 x float> %205, %110, !dbg !69
  %209 = extractelement <8 x float> %208, i64 0, !dbg !69
  %210 = fsub <8 x float> %205, %110, !dbg !69
  %211 = extractelement <8 x float> %210, i64 1, !dbg !69
  %212 = fsub <8 x float> %205, %110, !dbg !69
  %213 = extractelement <8 x float> %212, i64 2, !dbg !69
  %214 = fsub <8 x float> %205, %110, !dbg !69
  %215 = extractelement <8 x float> %214, i64 3, !dbg !69
  %216 = fsub <8 x float> %205, %110, !dbg !69
  %217 = extractelement <8 x float> %216, i64 4, !dbg !69
  %218 = fsub <8 x float> %205, %110, !dbg !69
  %219 = extractelement <8 x float> %218, i64 5, !dbg !69
  %220 = fsub <8 x float> %205, %110, !dbg !69
  %221 = extractelement <8 x float> %220, i64 6, !dbg !69
  %222 = fsub <8 x float> %205, %110, !dbg !69
  %223 = extractelement <8 x float> %222, i64 7, !dbg !69
  %224 = fadd float %94, 1.000000e+00, !dbg !70
  %225 = fadd float %95, 1.000000e+00, !dbg !70
  %226 = fadd float %96, 1.000000e+00, !dbg !70
  %227 = fadd float %97, 1.000000e+00, !dbg !70
  %228 = fadd float %98, 1.000000e+00, !dbg !70
  %229 = fadd float %99, 1.000000e+00, !dbg !70
  %230 = fadd float %100, 1.000000e+00, !dbg !70
  %231 = fadd float %101, 1.000000e+00, !dbg !70
  %232 = tail call float @llvm.nvvm.div.full(float %209, float %224), !dbg !71
  %233 = tail call float @llvm.nvvm.div.full(float %211, float %225), !dbg !71
  %234 = tail call float @llvm.nvvm.div.full(float %213, float %226), !dbg !71
  %235 = tail call float @llvm.nvvm.div.full(float %215, float %227), !dbg !71
  %236 = tail call float @llvm.nvvm.div.full(float %217, float %228), !dbg !71
  %237 = tail call float @llvm.nvvm.div.full(float %219, float %229), !dbg !71
  %238 = tail call float @llvm.nvvm.div.full(float %221, float %230), !dbg !71
  %239 = tail call float @llvm.nvvm.div.full(float %223, float %231), !dbg !71
  %240 = insertelement <8 x float> poison, float %232, i64 0, !dbg !72
  %241 = insertelement <8 x float> %240, float %233, i64 1, !dbg !72
  %242 = insertelement <8 x float> %241, float %234, i64 2, !dbg !72
  %243 = insertelement <8 x float> %242, float %235, i64 3, !dbg !72
  %244 = insertelement <8 x float> %243, float %236, i64 4, !dbg !72
  %245 = insertelement <8 x float> %244, float %237, i64 5, !dbg !72
  %246 = insertelement <8 x float> %245, float %238, i64 6, !dbg !72
  %247 = insertelement <8 x float> %246, float %239, i64 7, !dbg !72
  %248 = fadd <8 x float> %110, %247, !dbg !72
  %249 = fsub <8 x float> %205, %248, !dbg !73
  %250 = fsub <8 x float> %205, %248, !dbg !73
  %251 = fsub <8 x float> %205, %248, !dbg !73
  %252 = fsub <8 x float> %205, %248, !dbg !73
  %253 = fsub <8 x float> %205, %248, !dbg !73
  %254 = fsub <8 x float> %205, %248, !dbg !73
  %255 = fsub <8 x float> %205, %248, !dbg !73
  %256 = fsub <8 x float> %205, %248, !dbg !73
  %257 = fmul <8 x float> %208, %249, !dbg !74
  %258 = extractelement <8 x float> %257, i64 0, !dbg !74
  %259 = fmul <8 x float> %210, %250, !dbg !74
  %260 = extractelement <8 x float> %259, i64 1, !dbg !74
  %261 = fmul <8 x float> %212, %251, !dbg !74
  %262 = extractelement <8 x float> %261, i64 2, !dbg !74
  %263 = fmul <8 x float> %214, %252, !dbg !74
  %264 = extractelement <8 x float> %263, i64 3, !dbg !74
  %265 = fmul <8 x float> %216, %253, !dbg !74
  %266 = extractelement <8 x float> %265, i64 4, !dbg !74
  %267 = fmul <8 x float> %218, %254, !dbg !74
  %268 = extractelement <8 x float> %267, i64 5, !dbg !74
  %269 = fmul <8 x float> %220, %255, !dbg !74
  %270 = extractelement <8 x float> %269, i64 6, !dbg !74
  %271 = fmul <8 x float> %222, %256, !dbg !74
  %272 = extractelement <8 x float> %271, i64 7, !dbg !74
  %273 = fadd float %102, %258, !dbg !75
  %274 = fadd float %103, %260, !dbg !75
  %275 = fadd float %104, %262, !dbg !75
  %276 = fadd float %105, %264, !dbg !75
  %277 = fadd float %106, %266, !dbg !75
  %278 = fadd float %107, %268, !dbg !75
  %279 = fadd float %108, %270, !dbg !75
  %280 = fadd float %109, %272, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %93, %207
  %281 = phi float [ %273, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %282 = phi float [ %274, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %283 = phi float [ %275, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %284 = phi float [ %276, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %285 = phi float [ %277, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %286 = phi float [ %278, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %287 = phi float [ %279, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %288 = phi float [ %280, %207 ], [ 0.000000e+00, %93 ], !dbg !68
  %289 = phi float [ %224, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %290 = phi float [ %225, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %291 = phi float [ %226, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %292 = phi float [ %227, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %293 = phi float [ %228, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %294 = phi float [ %229, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %295 = phi float [ %230, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %296 = phi float [ %231, %207 ], [ 1.000000e+00, %93 ], !dbg !68
  %297 = phi <8 x float> [ %248, %207 ], [ %205, %93 ]
  %298 = select <8 x i1> %89, <8 x float> %297, <8 x float> %110, !dbg !39
  %299 = select i1 %24, float %281, float %102, !dbg !76
  %300 = select i1 %24, float %282, float %103, !dbg !76
  %301 = select i1 %24, float %283, float %104, !dbg !76
  %302 = select i1 %24, float %284, float %105, !dbg !76
  %303 = select i1 %24, float %285, float %106, !dbg !76
  %304 = select i1 %24, float %286, float %107, !dbg !76
  %305 = select i1 %24, float %287, float %108, !dbg !76
  %306 = select i1 %24, float %288, float %109, !dbg !76
  %307 = select i1 %24, float %289, float %94, !dbg !77
  %308 = select i1 %24, float %290, float %95, !dbg !77
  %309 = select i1 %24, float %291, float %96, !dbg !77
  %310 = select i1 %24, float %292, float %97, !dbg !77
  %311 = select i1 %24, float %293, float %98, !dbg !77
  %312 = select i1 %24, float %294, float %99, !dbg !77
  %313 = select i1 %24, float %295, float %100, !dbg !77
  %314 = select i1 %24, float %296, float %101, !dbg !77
  %315 = getelementptr bfloat, ptr addrspace(1) %8, i64 %115, !dbg !78
  %316 = extractelement <8 x float> %205, i64 0, !dbg !79
  %317 = fptrunc float %316 to bfloat, !dbg !79
  %318 = extractelement <8 x float> %205, i64 1, !dbg !79
  %319 = fptrunc float %318 to bfloat, !dbg !79
  %320 = extractelement <8 x float> %205, i64 2, !dbg !79
  %321 = fptrunc float %320 to bfloat, !dbg !79
  %322 = extractelement <8 x float> %205, i64 3, !dbg !79
  %323 = fptrunc float %322 to bfloat, !dbg !79
  %324 = extractelement <8 x float> %205, i64 4, !dbg !79
  %325 = fptrunc float %324 to bfloat, !dbg !79
  %326 = extractelement <8 x float> %205, i64 5, !dbg !79
  %327 = fptrunc float %326 to bfloat, !dbg !79
  %328 = extractelement <8 x float> %205, i64 6, !dbg !79
  %329 = fptrunc float %328 to bfloat, !dbg !79
  %330 = extractelement <8 x float> %205, i64 7, !dbg !79
  %331 = fptrunc float %330 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %332 = bitcast bfloat %317 to i16, !dbg !79
  %333 = bitcast bfloat %319 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %72, i16 %332, i16 %333, i1 true) #5, !dbg !79
  %334 = bitcast bfloat %321 to i16, !dbg !79
  %335 = bitcast bfloat %323 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %73, i16 %334, i16 %335, i1 true) #5, !dbg !79
  %336 = bitcast bfloat %325 to i16, !dbg !79
  %337 = bitcast bfloat %327 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %74, i16 %336, i16 %337, i1 true) #5, !dbg !79
  %338 = bitcast bfloat %329 to i16, !dbg !79
  %339 = bitcast bfloat %331 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %75, i16 %338, i16 %339, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.extract116 = load i32, ptr addrspace(3) %71, align 16, !dbg !79
  %.extract118 = load i32, ptr addrspace(3) %90, align 4, !dbg !79
  %.extract120 = load i32, ptr addrspace(3) %91, align 8, !dbg !79
  %.extract122 = load i32, ptr addrspace(3) %92, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %315, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %340 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %340, label %93, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %341 = lshr i32 %19, 5, !dbg !11
  %342 = and i32 %19, 3, !dbg !11
  %343 = or disjoint i32 %18, %342, !dbg !12
  %344 = icmp slt i32 %343, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %345 = extractelement <8 x float> %298, i64 0, !dbg !82
  %346 = extractelement <8 x float> %298, i64 1, !dbg !82
  %347 = fsub float %346, %345, !dbg !82
  %348 = fadd float %307, %308, !dbg !84
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !85
  %350 = tail call float @llvm.nvvm.div.full(float %308, float %348), !dbg !86
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !87
  %352 = fmul float %347, %351, !dbg !88
  %353 = fadd float %345, %352, !dbg !89
  %354 = fadd float %299, %300, !dbg !90
  %355 = fmul float %347, %347, !dbg !91
  %356 = fmul float %355, %307, !dbg !92
  %357 = fmul float %356, %351, !dbg !93
  %358 = fadd float %354, %357, !dbg !94
  %359 = extractelement <8 x float> %298, i64 2, !dbg !82
  %360 = extractelement <8 x float> %298, i64 3, !dbg !82
  %361 = fsub float %360, %359, !dbg !82
  %362 = fadd float %309, %310, !dbg !84
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !85
  %364 = tail call float @llvm.nvvm.div.full(float %310, float %362), !dbg !86
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !87
  %366 = fmul float %361, %365, !dbg !88
  %367 = fadd float %359, %366, !dbg !89
  %368 = fadd float %301, %302, !dbg !90
  %369 = fmul float %361, %361, !dbg !91
  %370 = fmul float %369, %309, !dbg !92
  %371 = fmul float %370, %365, !dbg !93
  %372 = fadd float %368, %371, !dbg !94
  %373 = extractelement <8 x float> %298, i64 4, !dbg !82
  %374 = extractelement <8 x float> %298, i64 5, !dbg !82
  %375 = fsub float %374, %373, !dbg !82
  %376 = fadd float %311, %312, !dbg !84
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !85
  %378 = tail call float @llvm.nvvm.div.full(float %312, float %376), !dbg !86
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !87
  %380 = fmul float %375, %379, !dbg !88
  %381 = fadd float %373, %380, !dbg !89
  %382 = fadd float %303, %304, !dbg !90
  %383 = fmul float %375, %375, !dbg !91
  %384 = fmul float %383, %311, !dbg !92
  %385 = fmul float %384, %379, !dbg !93
  %386 = fadd float %382, %385, !dbg !94
  %387 = extractelement <8 x float> %298, i64 6, !dbg !82
  %388 = extractelement <8 x float> %298, i64 7, !dbg !82
  %389 = fsub float %388, %387, !dbg !82
  %390 = fadd float %313, %314, !dbg !84
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !85
  %392 = tail call float @llvm.nvvm.div.full(float %314, float %390), !dbg !86
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !87
  %394 = fmul float %389, %393, !dbg !88
  %395 = fadd float %387, %394, !dbg !89
  %396 = fadd float %305, %306, !dbg !90
  %397 = fmul float %389, %389, !dbg !91
  %398 = fmul float %397, %313, !dbg !92
  %399 = fmul float %398, %393, !dbg !93
  %400 = fadd float %396, %399, !dbg !94
  %401 = bitcast float %353 to i32, !dbg !80
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 16, i32 31), !dbg !80
  %403 = bitcast i32 %402 to float, !dbg !80
  %404 = bitcast float %358 to i32, !dbg !80
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 16, i32 31), !dbg !80
  %406 = bitcast i32 %405 to float, !dbg !80
  %407 = bitcast float %348 to i32, !dbg !80
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 16, i32 31), !dbg !80
  %409 = bitcast i32 %408 to float, !dbg !80
  %410 = fsub float %403, %353, !dbg !82
  %411 = fadd float %348, %409, !dbg !84
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !85
  %413 = tail call float @llvm.nvvm.div.full(float %409, float %411), !dbg !86
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !87
  %415 = fmul float %410, %414, !dbg !88
  %416 = fadd float %353, %415, !dbg !89
  %417 = fadd float %358, %406, !dbg !90
  %418 = fmul float %410, %410, !dbg !91
  %419 = fmul float %348, %418, !dbg !92
  %420 = fmul float %419, %414, !dbg !93
  %421 = fadd float %417, %420, !dbg !94
  %422 = bitcast float %416 to i32, !dbg !80
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 8, i32 31), !dbg !80
  %424 = bitcast i32 %423 to float, !dbg !80
  %425 = bitcast float %421 to i32, !dbg !80
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 8, i32 31), !dbg !80
  %427 = bitcast i32 %426 to float, !dbg !80
  %428 = bitcast float %411 to i32, !dbg !80
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 8, i32 31), !dbg !80
  %430 = bitcast i32 %429 to float, !dbg !80
  %431 = fsub float %424, %416, !dbg !82
  %432 = fadd float %411, %430, !dbg !84
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !85
  %434 = tail call float @llvm.nvvm.div.full(float %430, float %432), !dbg !86
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !87
  %436 = fmul float %431, %435, !dbg !88
  %437 = fadd float %416, %436, !dbg !89
  %438 = fadd float %421, %427, !dbg !90
  %439 = fmul float %431, %431, !dbg !91
  %440 = fmul float %411, %439, !dbg !92
  %441 = fmul float %435, %440, !dbg !93
  %442 = fadd float %438, %441, !dbg !94
  %443 = bitcast float %437 to i32, !dbg !80
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 4, i32 31), !dbg !80
  %445 = bitcast i32 %444 to float, !dbg !80
  %446 = bitcast float %442 to i32, !dbg !80
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 4, i32 31), !dbg !80
  %448 = bitcast i32 %447 to float, !dbg !80
  %449 = bitcast float %432 to i32, !dbg !80
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 4, i32 31), !dbg !80
  %451 = bitcast i32 %450 to float, !dbg !80
  %452 = fsub float %445, %437, !dbg !82
  %453 = fadd float %432, %451, !dbg !84
  %454 = fcmp oeq float %453, 0.000000e+00, !dbg !85
  %455 = tail call float @llvm.nvvm.div.full(float %451, float %453), !dbg !86
  %456 = select i1 %454, float 0.000000e+00, float %455, !dbg !87
  %457 = fmul float %452, %456, !dbg !88
  %458 = fadd float %437, %457, !dbg !89
  %459 = fadd float %442, %448, !dbg !90
  %460 = fmul float %452, %452, !dbg !91
  %461 = fmul float %432, %460, !dbg !92
  %462 = fmul float %456, %461, !dbg !93
  %463 = fadd float %459, %462, !dbg !94
  %464 = bitcast float %458 to i32, !dbg !80
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !80
  %466 = bitcast i32 %465 to float, !dbg !80
  %467 = bitcast float %463 to i32, !dbg !80
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 2, i32 31), !dbg !80
  %469 = bitcast i32 %468 to float, !dbg !80
  %470 = bitcast float %453 to i32, !dbg !80
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !80
  %472 = bitcast i32 %471 to float, !dbg !80
  %473 = fsub float %466, %458, !dbg !82
  %474 = fadd float %453, %472, !dbg !84
  %475 = fcmp oeq float %474, 0.000000e+00, !dbg !85
  %476 = tail call float @llvm.nvvm.div.full(float %472, float %474), !dbg !86
  %477 = select i1 %475, float 0.000000e+00, float %476, !dbg !87
  %478 = fmul float %473, %477, !dbg !88
  %479 = fadd float %458, %478, !dbg !89
  %480 = fadd float %463, %469, !dbg !90
  %481 = fmul float %473, %473, !dbg !91
  %482 = fmul float %453, %481, !dbg !92
  %483 = fmul float %477, %482, !dbg !93
  %484 = fadd float %480, %483, !dbg !94
  %485 = bitcast float %479 to i32, !dbg !80
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !80
  %487 = bitcast i32 %486 to float, !dbg !80
  %488 = bitcast float %484 to i32, !dbg !80
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 1, i32 31), !dbg !80
  %490 = bitcast i32 %489 to float, !dbg !80
  %491 = bitcast float %474 to i32, !dbg !80
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !80
  %493 = bitcast i32 %492 to float, !dbg !80
  %494 = fsub float %487, %479, !dbg !82
  %495 = fadd float %474, %493, !dbg !84
  %496 = fcmp oeq float %495, 0.000000e+00, !dbg !85
  %497 = tail call float @llvm.nvvm.div.full(float %493, float %495), !dbg !86
  %498 = select i1 %496, float 0.000000e+00, float %497, !dbg !87
  %499 = fmul float %494, %498, !dbg !88
  %500 = fadd float %479, %499, !dbg !89
  %501 = fadd float %484, %490, !dbg !90
  %502 = fmul float %494, %494, !dbg !91
  %503 = fmul float %474, %502, !dbg !92
  %504 = fmul float %498, %503, !dbg !93
  %505 = fadd float %501, %504, !dbg !94
  %506 = bitcast float %367 to i32, !dbg !80
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 16, i32 31), !dbg !80
  %508 = bitcast i32 %507 to float, !dbg !80
  %509 = bitcast float %372 to i32, !dbg !80
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 16, i32 31), !dbg !80
  %511 = bitcast i32 %510 to float, !dbg !80
  %512 = bitcast float %362 to i32, !dbg !80
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 16, i32 31), !dbg !80
  %514 = bitcast i32 %513 to float, !dbg !80
  %515 = fsub float %508, %367, !dbg !82
  %516 = fadd float %362, %514, !dbg !84
  %517 = fcmp oeq float %516, 0.000000e+00, !dbg !85
  %518 = tail call float @llvm.nvvm.div.full(float %514, float %516), !dbg !86
  %519 = select i1 %517, float 0.000000e+00, float %518, !dbg !87
  %520 = fmul float %515, %519, !dbg !88
  %521 = fadd float %367, %520, !dbg !89
  %522 = fadd float %372, %511, !dbg !90
  %523 = fmul float %515, %515, !dbg !91
  %524 = fmul float %362, %523, !dbg !92
  %525 = fmul float %524, %519, !dbg !93
  %526 = fadd float %522, %525, !dbg !94
  %527 = bitcast float %521 to i32, !dbg !80
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 8, i32 31), !dbg !80
  %529 = bitcast i32 %528 to float, !dbg !80
  %530 = bitcast float %526 to i32, !dbg !80
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 8, i32 31), !dbg !80
  %532 = bitcast i32 %531 to float, !dbg !80
  %533 = bitcast float %516 to i32, !dbg !80
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 8, i32 31), !dbg !80
  %535 = bitcast i32 %534 to float, !dbg !80
  %536 = fsub float %529, %521, !dbg !82
  %537 = fadd float %516, %535, !dbg !84
  %538 = fcmp oeq float %537, 0.000000e+00, !dbg !85
  %539 = tail call float @llvm.nvvm.div.full(float %535, float %537), !dbg !86
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !87
  %541 = fmul float %536, %540, !dbg !88
  %542 = fadd float %521, %541, !dbg !89
  %543 = fadd float %526, %532, !dbg !90
  %544 = fmul float %536, %536, !dbg !91
  %545 = fmul float %516, %544, !dbg !92
  %546 = fmul float %540, %545, !dbg !93
  %547 = fadd float %543, %546, !dbg !94
  %548 = bitcast float %542 to i32, !dbg !80
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 4, i32 31), !dbg !80
  %550 = bitcast i32 %549 to float, !dbg !80
  %551 = bitcast float %547 to i32, !dbg !80
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 4, i32 31), !dbg !80
  %553 = bitcast i32 %552 to float, !dbg !80
  %554 = bitcast float %537 to i32, !dbg !80
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 4, i32 31), !dbg !80
  %556 = bitcast i32 %555 to float, !dbg !80
  %557 = fsub float %550, %542, !dbg !82
  %558 = fadd float %537, %556, !dbg !84
  %559 = fcmp oeq float %558, 0.000000e+00, !dbg !85
  %560 = tail call float @llvm.nvvm.div.full(float %556, float %558), !dbg !86
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !87
  %562 = fmul float %557, %561, !dbg !88
  %563 = fadd float %542, %562, !dbg !89
  %564 = fadd float %547, %553, !dbg !90
  %565 = fmul float %557, %557, !dbg !91
  %566 = fmul float %537, %565, !dbg !92
  %567 = fmul float %561, %566, !dbg !93
  %568 = fadd float %564, %567, !dbg !94
  %569 = bitcast float %563 to i32, !dbg !80
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 2, i32 31), !dbg !80
  %571 = bitcast i32 %570 to float, !dbg !80
  %572 = bitcast float %568 to i32, !dbg !80
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 2, i32 31), !dbg !80
  %574 = bitcast i32 %573 to float, !dbg !80
  %575 = bitcast float %558 to i32, !dbg !80
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 2, i32 31), !dbg !80
  %577 = bitcast i32 %576 to float, !dbg !80
  %578 = fsub float %571, %563, !dbg !82
  %579 = fadd float %558, %577, !dbg !84
  %580 = fcmp oeq float %579, 0.000000e+00, !dbg !85
  %581 = tail call float @llvm.nvvm.div.full(float %577, float %579), !dbg !86
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !87
  %583 = fmul float %578, %582, !dbg !88
  %584 = fadd float %563, %583, !dbg !89
  %585 = fadd float %568, %574, !dbg !90
  %586 = fmul float %578, %578, !dbg !91
  %587 = fmul float %558, %586, !dbg !92
  %588 = fmul float %582, %587, !dbg !93
  %589 = fadd float %585, %588, !dbg !94
  %590 = bitcast float %584 to i32, !dbg !80
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 1, i32 31), !dbg !80
  %592 = bitcast i32 %591 to float, !dbg !80
  %593 = bitcast float %589 to i32, !dbg !80
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 1, i32 31), !dbg !80
  %595 = bitcast i32 %594 to float, !dbg !80
  %596 = bitcast float %579 to i32, !dbg !80
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 1, i32 31), !dbg !80
  %598 = bitcast i32 %597 to float, !dbg !80
  %599 = fsub float %592, %584, !dbg !82
  %600 = fadd float %579, %598, !dbg !84
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !85
  %602 = tail call float @llvm.nvvm.div.full(float %598, float %600), !dbg !86
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !87
  %604 = fmul float %599, %603, !dbg !88
  %605 = fadd float %584, %604, !dbg !89
  %606 = fadd float %589, %595, !dbg !90
  %607 = fmul float %599, %599, !dbg !91
  %608 = fmul float %579, %607, !dbg !92
  %609 = fmul float %603, %608, !dbg !93
  %610 = fadd float %606, %609, !dbg !94
  %611 = bitcast float %381 to i32, !dbg !80
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 16, i32 31), !dbg !80
  %613 = bitcast i32 %612 to float, !dbg !80
  %614 = bitcast float %386 to i32, !dbg !80
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 16, i32 31), !dbg !80
  %616 = bitcast i32 %615 to float, !dbg !80
  %617 = bitcast float %376 to i32, !dbg !80
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 16, i32 31), !dbg !80
  %619 = bitcast i32 %618 to float, !dbg !80
  %620 = fsub float %613, %381, !dbg !82
  %621 = fadd float %376, %619, !dbg !84
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !85
  %623 = tail call float @llvm.nvvm.div.full(float %619, float %621), !dbg !86
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !87
  %625 = fmul float %620, %624, !dbg !88
  %626 = fadd float %381, %625, !dbg !89
  %627 = fadd float %386, %616, !dbg !90
  %628 = fmul float %620, %620, !dbg !91
  %629 = fmul float %376, %628, !dbg !92
  %630 = fmul float %629, %624, !dbg !93
  %631 = fadd float %627, %630, !dbg !94
  %632 = bitcast float %626 to i32, !dbg !80
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 8, i32 31), !dbg !80
  %634 = bitcast i32 %633 to float, !dbg !80
  %635 = bitcast float %631 to i32, !dbg !80
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 8, i32 31), !dbg !80
  %637 = bitcast i32 %636 to float, !dbg !80
  %638 = bitcast float %621 to i32, !dbg !80
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 8, i32 31), !dbg !80
  %640 = bitcast i32 %639 to float, !dbg !80
  %641 = fsub float %634, %626, !dbg !82
  %642 = fadd float %621, %640, !dbg !84
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !85
  %644 = tail call float @llvm.nvvm.div.full(float %640, float %642), !dbg !86
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !87
  %646 = fmul float %641, %645, !dbg !88
  %647 = fadd float %626, %646, !dbg !89
  %648 = fadd float %631, %637, !dbg !90
  %649 = fmul float %641, %641, !dbg !91
  %650 = fmul float %621, %649, !dbg !92
  %651 = fmul float %645, %650, !dbg !93
  %652 = fadd float %648, %651, !dbg !94
  %653 = bitcast float %647 to i32, !dbg !80
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 4, i32 31), !dbg !80
  %655 = bitcast i32 %654 to float, !dbg !80
  %656 = bitcast float %652 to i32, !dbg !80
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !80
  %658 = bitcast i32 %657 to float, !dbg !80
  %659 = bitcast float %642 to i32, !dbg !80
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !80
  %661 = bitcast i32 %660 to float, !dbg !80
  %662 = fsub float %655, %647, !dbg !82
  %663 = fadd float %642, %661, !dbg !84
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !85
  %665 = tail call float @llvm.nvvm.div.full(float %661, float %663), !dbg !86
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !87
  %667 = fmul float %662, %666, !dbg !88
  %668 = fadd float %647, %667, !dbg !89
  %669 = fadd float %652, %658, !dbg !90
  %670 = fmul float %662, %662, !dbg !91
  %671 = fmul float %642, %670, !dbg !92
  %672 = fmul float %666, %671, !dbg !93
  %673 = fadd float %669, %672, !dbg !94
  %674 = bitcast float %668 to i32, !dbg !80
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 2, i32 31), !dbg !80
  %676 = bitcast i32 %675 to float, !dbg !80
  %677 = bitcast float %673 to i32, !dbg !80
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 2, i32 31), !dbg !80
  %679 = bitcast i32 %678 to float, !dbg !80
  %680 = bitcast float %663 to i32, !dbg !80
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 2, i32 31), !dbg !80
  %682 = bitcast i32 %681 to float, !dbg !80
  %683 = fsub float %676, %668, !dbg !82
  %684 = fadd float %663, %682, !dbg !84
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !85
  %686 = tail call float @llvm.nvvm.div.full(float %682, float %684), !dbg !86
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !87
  %688 = fmul float %683, %687, !dbg !88
  %689 = fadd float %668, %688, !dbg !89
  %690 = fadd float %673, %679, !dbg !90
  %691 = fmul float %683, %683, !dbg !91
  %692 = fmul float %663, %691, !dbg !92
  %693 = fmul float %687, %692, !dbg !93
  %694 = fadd float %690, %693, !dbg !94
  %695 = bitcast float %689 to i32, !dbg !80
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 1, i32 31), !dbg !80
  %697 = bitcast i32 %696 to float, !dbg !80
  %698 = bitcast float %694 to i32, !dbg !80
  %699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %698, i32 1, i32 31), !dbg !80
  %700 = bitcast i32 %699 to float, !dbg !80
  %701 = bitcast float %684 to i32, !dbg !80
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 1, i32 31), !dbg !80
  %703 = bitcast i32 %702 to float, !dbg !80
  %704 = fsub float %697, %689, !dbg !82
  %705 = fadd float %684, %703, !dbg !84
  %706 = fcmp oeq float %705, 0.000000e+00, !dbg !85
  %707 = tail call float @llvm.nvvm.div.full(float %703, float %705), !dbg !86
  %708 = select i1 %706, float 0.000000e+00, float %707, !dbg !87
  %709 = fmul float %704, %708, !dbg !88
  %710 = fadd float %689, %709, !dbg !89
  %711 = fadd float %694, %700, !dbg !90
  %712 = fmul float %704, %704, !dbg !91
  %713 = fmul float %684, %712, !dbg !92
  %714 = fmul float %708, %713, !dbg !93
  %715 = fadd float %711, %714, !dbg !94
  %716 = bitcast float %395 to i32, !dbg !80
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 16, i32 31), !dbg !80
  %718 = bitcast i32 %717 to float, !dbg !80
  %719 = bitcast float %400 to i32, !dbg !80
  %720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %719, i32 16, i32 31), !dbg !80
  %721 = bitcast i32 %720 to float, !dbg !80
  %722 = bitcast float %390 to i32, !dbg !80
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 16, i32 31), !dbg !80
  %724 = bitcast i32 %723 to float, !dbg !80
  %725 = fsub float %718, %395, !dbg !82
  %726 = fadd float %390, %724, !dbg !84
  %727 = fcmp oeq float %726, 0.000000e+00, !dbg !85
  %728 = tail call float @llvm.nvvm.div.full(float %724, float %726), !dbg !86
  %729 = select i1 %727, float 0.000000e+00, float %728, !dbg !87
  %730 = fmul float %725, %729, !dbg !88
  %731 = fadd float %395, %730, !dbg !89
  %732 = fadd float %400, %721, !dbg !90
  %733 = fmul float %725, %725, !dbg !91
  %734 = fmul float %390, %733, !dbg !92
  %735 = fmul float %734, %729, !dbg !93
  %736 = fadd float %732, %735, !dbg !94
  %737 = bitcast float %731 to i32, !dbg !80
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 8, i32 31), !dbg !80
  %739 = bitcast i32 %738 to float, !dbg !80
  %740 = bitcast float %736 to i32, !dbg !80
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 8, i32 31), !dbg !80
  %742 = bitcast i32 %741 to float, !dbg !80
  %743 = bitcast float %726 to i32, !dbg !80
  %744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %743, i32 8, i32 31), !dbg !80
  %745 = bitcast i32 %744 to float, !dbg !80
  %746 = fsub float %739, %731, !dbg !82
  %747 = fadd float %726, %745, !dbg !84
  %748 = fcmp oeq float %747, 0.000000e+00, !dbg !85
  %749 = tail call float @llvm.nvvm.div.full(float %745, float %747), !dbg !86
  %750 = select i1 %748, float 0.000000e+00, float %749, !dbg !87
  %751 = fmul float %746, %750, !dbg !88
  %752 = fadd float %731, %751, !dbg !89
  %753 = fadd float %736, %742, !dbg !90
  %754 = fmul float %746, %746, !dbg !91
  %755 = fmul float %726, %754, !dbg !92
  %756 = fmul float %750, %755, !dbg !93
  %757 = fadd float %753, %756, !dbg !94
  %758 = bitcast float %752 to i32, !dbg !80
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 4, i32 31), !dbg !80
  %760 = bitcast i32 %759 to float, !dbg !80
  %761 = bitcast float %757 to i32, !dbg !80
  %762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %761, i32 4, i32 31), !dbg !80
  %763 = bitcast i32 %762 to float, !dbg !80
  %764 = bitcast float %747 to i32, !dbg !80
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 4, i32 31), !dbg !80
  %766 = bitcast i32 %765 to float, !dbg !80
  %767 = fsub float %760, %752, !dbg !82
  %768 = fadd float %747, %766, !dbg !84
  %769 = fcmp oeq float %768, 0.000000e+00, !dbg !85
  %770 = tail call float @llvm.nvvm.div.full(float %766, float %768), !dbg !86
  %771 = select i1 %769, float 0.000000e+00, float %770, !dbg !87
  %772 = fmul float %767, %771, !dbg !88
  %773 = fadd float %752, %772, !dbg !89
  %774 = fadd float %757, %763, !dbg !90
  %775 = fmul float %767, %767, !dbg !91
  %776 = fmul float %747, %775, !dbg !92
  %777 = fmul float %771, %776, !dbg !93
  %778 = fadd float %774, %777, !dbg !94
  %779 = bitcast float %773 to i32, !dbg !80
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 2, i32 31), !dbg !80
  %781 = bitcast i32 %780 to float, !dbg !80
  %782 = bitcast float %778 to i32, !dbg !80
  %783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %782, i32 2, i32 31), !dbg !80
  %784 = bitcast i32 %783 to float, !dbg !80
  %785 = bitcast float %768 to i32, !dbg !80
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 2, i32 31), !dbg !80
  %787 = bitcast i32 %786 to float, !dbg !80
  %788 = fsub float %781, %773, !dbg !82
  %789 = fadd float %768, %787, !dbg !84
  %790 = fcmp oeq float %789, 0.000000e+00, !dbg !85
  %791 = tail call float @llvm.nvvm.div.full(float %787, float %789), !dbg !86
  %792 = select i1 %790, float 0.000000e+00, float %791, !dbg !87
  %793 = fmul float %788, %792, !dbg !88
  %794 = fadd float %773, %793, !dbg !89
  %795 = fadd float %778, %784, !dbg !90
  %796 = fmul float %788, %788, !dbg !91
  %797 = fmul float %768, %796, !dbg !92
  %798 = fmul float %792, %797, !dbg !93
  %799 = fadd float %795, %798, !dbg !94
  %800 = bitcast float %794 to i32, !dbg !80
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 1, i32 31), !dbg !80
  %802 = bitcast i32 %801 to float, !dbg !80
  %803 = bitcast float %799 to i32, !dbg !80
  %804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %803, i32 1, i32 31), !dbg !80
  %805 = bitcast i32 %804 to float, !dbg !80
  %806 = bitcast float %789 to i32, !dbg !80
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 1, i32 31), !dbg !80
  %808 = bitcast i32 %807 to float, !dbg !80
  %809 = fsub float %802, %794, !dbg !82
  %810 = fadd float %789, %808, !dbg !84
  %811 = fcmp oeq float %810, 0.000000e+00, !dbg !85
  %812 = tail call float @llvm.nvvm.div.full(float %808, float %810), !dbg !86
  %813 = select i1 %811, float 0.000000e+00, float %812, !dbg !87
  %814 = fmul float %809, %813, !dbg !88
  %815 = fadd float %794, %814, !dbg !89
  %816 = fadd float %799, %805, !dbg !90
  %817 = fmul float %809, %809, !dbg !91
  %818 = fmul float %789, %817, !dbg !92
  %819 = fmul float %813, %818, !dbg !93
  %820 = fadd float %816, %819, !dbg !94
  %821 = and i32 %341, 15, !dbg !80
  %822 = icmp eq i32 %21, 0, !dbg !80
  %823 = getelementptr float, ptr addrspace(3) @global_smem, i32 %821, !dbg !80
  %824 = bitcast float %500 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %824, i1 %822) #5, !dbg !80
  %825 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %821, !dbg !80
  %826 = bitcast float %505 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %826, i1 %822) #5, !dbg !80
  %827 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %821, !dbg !80
  %828 = bitcast float %495 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %827, <1 x i32> %828, i1 %822) #5, !dbg !80
  %829 = or disjoint i32 %821, 16, !dbg !80
  %830 = getelementptr float, ptr addrspace(3) @global_smem, i32 %829, !dbg !80
  %831 = bitcast float %605 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %831, i1 %822) #5, !dbg !80
  %832 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %829, !dbg !80
  %833 = bitcast float %610 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %833, i1 %822) #5, !dbg !80
  %834 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %829, !dbg !80
  %835 = bitcast float %600 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %834, <1 x i32> %835, i1 %822) #5, !dbg !80
  %836 = or disjoint i32 %821, 32, !dbg !80
  %837 = getelementptr float, ptr addrspace(3) @global_smem, i32 %836, !dbg !80
  %838 = bitcast float %710 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %838, i1 %822) #5, !dbg !80
  %839 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %836, !dbg !80
  %840 = bitcast float %715 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %839, <1 x i32> %840, i1 %822) #5, !dbg !80
  %841 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %836, !dbg !80
  %842 = bitcast float %705 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %842, i1 %822) #5, !dbg !80
  %843 = or disjoint i32 %821, 48, !dbg !80
  %844 = getelementptr float, ptr addrspace(3) @global_smem, i32 %843, !dbg !80
  %845 = bitcast float %815 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %845, i1 %822) #5, !dbg !80
  %846 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %843, !dbg !80
  %847 = bitcast float %820 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %846, <1 x i32> %847, i1 %822) #5, !dbg !80
  %848 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %843, !dbg !80
  %849 = bitcast float %810 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %849, i1 %822) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %850 = icmp slt i32 %19, 64, !dbg !80
  %851 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %852 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !80
  %853 = bitcast i32 %852 to float, !dbg !80
  %854 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !80
  %855 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %854, i1 %850) #5, !dbg !80
  %856 = bitcast i32 %855 to float, !dbg !80
  %857 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %19, !dbg !80
  %858 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %857, i1 %850) #5, !dbg !80
  %859 = bitcast i32 %858 to float, !dbg !80
  %860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 8, i32 31), !dbg !80
  %861 = bitcast i32 %860 to float, !dbg !80
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 8, i32 31), !dbg !80
  %863 = bitcast i32 %862 to float, !dbg !80
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 8, i32 31), !dbg !80
  %865 = bitcast i32 %864 to float, !dbg !80
  %866 = fsub float %861, %853, !dbg !82
  %867 = fadd float %859, %865, !dbg !84
  %868 = fcmp oeq float %867, 0.000000e+00, !dbg !85
  %869 = tail call float @llvm.nvvm.div.full(float %865, float %867), !dbg !86
  %870 = select i1 %868, float 0.000000e+00, float %869, !dbg !87
  %871 = fmul float %866, %870, !dbg !88
  %872 = fadd float %871, %853, !dbg !89
  %873 = fadd float %856, %863, !dbg !90
  %874 = fmul float %866, %866, !dbg !91
  %875 = fmul float %874, %859, !dbg !92
  %876 = fmul float %875, %870, !dbg !93
  %877 = fadd float %873, %876, !dbg !94
  %878 = bitcast float %872 to i32, !dbg !80
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 4, i32 31), !dbg !80
  %880 = bitcast i32 %879 to float, !dbg !80
  %881 = bitcast float %877 to i32, !dbg !80
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 4, i32 31), !dbg !80
  %883 = bitcast i32 %882 to float, !dbg !80
  %884 = bitcast float %867 to i32, !dbg !80
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 4, i32 31), !dbg !80
  %886 = bitcast i32 %885 to float, !dbg !80
  %887 = fsub float %880, %872, !dbg !82
  %888 = fadd float %867, %886, !dbg !84
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !85
  %890 = tail call float @llvm.nvvm.div.full(float %886, float %888), !dbg !86
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !87
  %892 = fmul float %887, %891, !dbg !88
  %893 = fadd float %872, %892, !dbg !89
  %894 = fadd float %877, %883, !dbg !90
  %895 = fmul float %887, %887, !dbg !91
  %896 = fmul float %867, %895, !dbg !92
  %897 = fmul float %891, %896, !dbg !93
  %898 = fadd float %894, %897, !dbg !94
  %899 = bitcast float %893 to i32, !dbg !80
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 2, i32 31), !dbg !80
  %901 = bitcast i32 %900 to float, !dbg !80
  %902 = bitcast float %898 to i32, !dbg !80
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 2, i32 31), !dbg !80
  %904 = bitcast i32 %903 to float, !dbg !80
  %905 = bitcast float %888 to i32, !dbg !80
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 2, i32 31), !dbg !80
  %907 = bitcast i32 %906 to float, !dbg !80
  %908 = fsub float %901, %893, !dbg !82
  %909 = fadd float %888, %907, !dbg !84
  %910 = fcmp oeq float %909, 0.000000e+00, !dbg !85
  %911 = tail call float @llvm.nvvm.div.full(float %907, float %909), !dbg !86
  %912 = select i1 %910, float 0.000000e+00, float %911, !dbg !87
  %913 = fmul float %908, %912, !dbg !88
  %914 = fadd float %893, %913, !dbg !89
  %915 = fadd float %898, %904, !dbg !90
  %916 = fmul float %908, %908, !dbg !91
  %917 = fmul float %888, %916, !dbg !92
  %918 = fmul float %912, %917, !dbg !93
  %919 = fadd float %915, %918, !dbg !94
  %920 = bitcast float %914 to i32, !dbg !80
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 1, i32 31), !dbg !80
  %922 = bitcast i32 %921 to float, !dbg !80
  %923 = bitcast float %919 to i32, !dbg !80
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 1, i32 31), !dbg !80
  %925 = bitcast i32 %924 to float, !dbg !80
  %926 = bitcast float %909 to i32, !dbg !80
  %927 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %926, i32 1, i32 31), !dbg !80
  %928 = bitcast i32 %927 to float, !dbg !80
  %929 = fsub float %922, %914, !dbg !82
  %930 = fadd float %909, %928, !dbg !84
  %931 = fcmp oeq float %930, 0.000000e+00, !dbg !85
  %932 = tail call float @llvm.nvvm.div.full(float %928, float %930), !dbg !86
  %933 = select i1 %931, float 0.000000e+00, float %932, !dbg !87
  %934 = fmul float %929, %933, !dbg !88
  %935 = fadd float %914, %934, !dbg !89
  %936 = fadd float %919, %925, !dbg !90
  %937 = fmul float %929, %929, !dbg !91
  %938 = fmul float %909, %937, !dbg !92
  %939 = fmul float %933, %938, !dbg !93
  %940 = fadd float %936, %939, !dbg !94
  %941 = and i32 %19, 15, !dbg !80
  %942 = icmp eq i32 %941, 0, !dbg !80
  %943 = and i1 %850, %942, !dbg !80
  %944 = bitcast float %935 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %944, i1 %943) #5, !dbg !80
  %945 = bitcast float %940 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %945, i1 %943) #5, !dbg !80
  %946 = bitcast float %930 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %857, <1 x i32> %946, i1 %943) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %947 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %948 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %949 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %950 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %951 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !80
  %952 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !80
  %953 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !80
  %954 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !80
  %955 = tail call float @llvm.nvvm.div.full(float %951, float 3.072000e+03), !dbg !95
  %956 = tail call float @llvm.nvvm.div.full(float %952, float 3.072000e+03), !dbg !95
  %957 = tail call float @llvm.nvvm.div.full(float %953, float 3.072000e+03), !dbg !95
  %958 = tail call float @llvm.nvvm.div.full(float %954, float 3.072000e+03), !dbg !95
  %959 = fadd float %955, 0x3EB0C6F7A0000000, !dbg !96
  %960 = fadd float %956, 0x3EB0C6F7A0000000, !dbg !96
  %961 = fadd float %957, 0x3EB0C6F7A0000000, !dbg !96
  %962 = fadd float %958, 0x3EB0C6F7A0000000, !dbg !96
  %963 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %964 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i88 = icmp eq i32 %964, 0, !dbg !97
  br i1 %.not.i88, label %967, label %965, !dbg !97

965:                                              ; preds = %__nv_rsqrtf.exit
  %966 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %959), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

967:                                              ; preds = %__nv_rsqrtf.exit
  %968 = tail call float @llvm.nvvm.rsqrt.approx.f(float %959), !dbg !97
  br label %__nv_rsqrtf.exit90, !dbg !97

__nv_rsqrtf.exit90:                               ; preds = %965, %967
  %.0.i89 = phi float [ %966, %965 ], [ %968, %967 ], !dbg !97
  %969 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %970 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i94 = icmp eq i32 %970, 0, !dbg !97
  br i1 %.not.i94, label %973, label %971, !dbg !97

971:                                              ; preds = %__nv_rsqrtf.exit90
  %972 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %960), !dbg !97
  br label %__nv_rsqrtf.exit96, !dbg !97

973:                                              ; preds = %__nv_rsqrtf.exit90
  %974 = tail call float @llvm.nvvm.rsqrt.approx.f(float %960), !dbg !97
  br label %__nv_rsqrtf.exit96, !dbg !97

__nv_rsqrtf.exit96:                               ; preds = %971, %973
  %.0.i95 = phi float [ %972, %971 ], [ %974, %973 ], !dbg !97
  %975 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %976 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i100 = icmp eq i32 %976, 0, !dbg !97
  br i1 %.not.i100, label %979, label %977, !dbg !97

977:                                              ; preds = %__nv_rsqrtf.exit96
  %978 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %961), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

979:                                              ; preds = %__nv_rsqrtf.exit96
  %980 = tail call float @llvm.nvvm.rsqrt.approx.f(float %961), !dbg !97
  br label %__nv_rsqrtf.exit102, !dbg !97

__nv_rsqrtf.exit102:                              ; preds = %977, %979
  %.0.i101 = phi float [ %978, %977 ], [ %980, %979 ], !dbg !97
  %981 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %982 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i106 = icmp eq i32 %982, 0, !dbg !97
  br i1 %.not.i106, label %985, label %983, !dbg !97

983:                                              ; preds = %__nv_rsqrtf.exit102
  %984 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %962), !dbg !97
  br label %__nv_rsqrtf.exit108, !dbg !97

985:                                              ; preds = %__nv_rsqrtf.exit102
  %986 = tail call float @llvm.nvvm.rsqrt.approx.f(float %962), !dbg !97
  br label %__nv_rsqrtf.exit108, !dbg !97

__nv_rsqrtf.exit108:                              ; preds = %983, %985
  %.0.i107 = phi float [ %984, %983 ], [ %986, %985 ], !dbg !97
  %987 = lshr i32 %27, 7
  %988 = and i32 %987, 24
  %989 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %988
  %990 = getelementptr bfloat, ptr addrspace(3) %989, i32 %68
  %991 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !98
  %992 = shufflevector <2 x i1> %991, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %993 = insertelement <2 x float> poison, float %.0.i89, i64 0, !dbg !99
  %994 = shufflevector <2 x float> %993, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %995 = insertelement <2 x float> poison, float %947, i64 0, !dbg !100
  %996 = shufflevector <2 x float> %995, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %997 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !101
  %998 = shufflevector <4 x i1> %997, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !101
  %999 = insertelement <4 x float> poison, float %.0.i95, i64 0, !dbg !99
  %1000 = insertelement <4 x float> %999, float %.0.i101, i64 1, !dbg !99
  %1001 = shufflevector <4 x float> %1000, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !99
  %1002 = insertelement <4 x float> poison, float %948, i64 0, !dbg !100
  %1003 = insertelement <4 x float> %1002, float %949, i64 1, !dbg !100
  %1004 = shufflevector <4 x float> %1003, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !100
  %invariant.op = or i32 %26, 12288, !dbg !102
  %1005 = getelementptr inbounds nuw i8, ptr addrspace(3) %990, i32 4
  %1006 = getelementptr inbounds nuw i8, ptr addrspace(3) %990, i32 8
  %1007 = getelementptr inbounds nuw i8, ptr addrspace(3) %990, i32 12
  br label %1008, !dbg !102

1008:                                             ; preds = %__nv_rsqrtf.exit108, %1008
  %indvars.iv166 = phi i64 [ 0, %__nv_rsqrtf.exit108 ], [ %indvars.iv.next167, %1008 ]
  %1009 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit108 ], [ %1102, %1008 ]
  %1010 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit108 ], [ %1103, %1008 ]
  %1011 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit108 ], [ %1100, %1008 ]
  %1012 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit108 ], [ %1120, %1008 ]
  %1013 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit108 ], [ %1121, %1008 ]
  %1014 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit108 ], [ %1101, %1008 ]
  %1015 = or disjoint i64 %indvars.iv166, %86, !dbg !103
  %1016 = trunc nuw nsw i64 %indvars.iv166 to i32, !dbg !104
  %1017 = add i32 %66, %1016, !dbg !104
  %1018 = sext i32 %1017 to i64, !dbg !105
  %1019 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1018, !dbg !105
  %1020 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1019, i1 %23) #5, !dbg !106
  %1021 = extractvalue { i32, i32, i32, i32 } %1020, 0, !dbg !106
  %1022 = extractvalue { i32, i32, i32, i32 } %1020, 1, !dbg !106
  %1023 = extractvalue { i32, i32, i32, i32 } %1020, 2, !dbg !106
  %1024 = extractvalue { i32, i32, i32, i32 } %1020, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %990, i32 %1021, i32 %1022, i32 %1023, i32 %1024, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1025 = load bfloat, ptr addrspace(3) %75, align 4, !dbg !99
  %1026 = load bfloat, ptr addrspace(3) %87, align 2, !dbg !99
  %1027 = fpext bfloat %1025 to float, !dbg !107
  %1028 = fpext bfloat %1026 to float, !dbg !107
  %.reass.reass.reass = or i32 %1016, %invariant.op
  %1029 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1030 = getelementptr float, ptr addrspace(1) %1, i64 %1029, !dbg !108
  %1031 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1029, !dbg !109
  %1032 = add nuw nsw i64 %1015, 9216, !dbg !110
  %1033 = getelementptr float, ptr addrspace(1) %1, i64 %1032, !dbg !111
  %1034 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1032, !dbg !112
  %1035 = fsub float %1027, %950, !dbg !100
  %1036 = fsub float %1028, %950, !dbg !100
  %1037 = fmul float %.0.i107, %1035, !dbg !99
  %1038 = fmul float %.0.i107, %1036, !dbg !99
  %1039 = fcmp uno <2 x float> %1011, zeroinitializer, !dbg !113
  %1040 = fcmp uno <4 x float> %1014, zeroinitializer, !dbg !113
  %1041 = fcmp uno float %1009, 0.000000e+00, !dbg !113
  %1042 = fcmp uno float %1010, 0.000000e+00, !dbg !113
  %1043 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !99
  %1044 = fpext <2 x bfloat> %1043 to <2 x float>, !dbg !107
  %1045 = fsub <2 x float> %1044, %996, !dbg !100
  %1046 = fmul <2 x float> %994, %1045, !dbg !99
  %1047 = load <2 x bfloat>, ptr addrspace(3) %73, align 4, !dbg !99
  %1048 = load <2 x bfloat>, ptr addrspace(3) %74, align 4, !dbg !99
  %1049 = shufflevector <2 x bfloat> %1047, <2 x bfloat> %1048, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !107
  %1050 = fpext <4 x bfloat> %1049 to <4 x float>, !dbg !107
  %1051 = fsub <4 x float> %1050, %1004, !dbg !100
  %1052 = fmul <4 x float> %1001, %1051, !dbg !99
  %1053 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1030, i1 true) #5, !dbg !115
  %1054 = extractvalue { i32, i32 } %1053, 0, !dbg !115
  %1055 = extractvalue { i32, i32 } %1053, 1, !dbg !115
  %1056 = insertelement <2 x i32> poison, i32 %1054, i64 0, !dbg !115
  %1057 = insertelement <2 x i32> %1056, i32 %1055, i64 1, !dbg !115
  %1058 = bitcast <2 x i32> %1057 to <2 x float>, !dbg !115
  %1059 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1031, i1 true) #5, !dbg !116
  %1060 = bitcast i32 %1059 to <2 x bfloat>, !dbg !116
  %1061 = fpext <2 x bfloat> %1060 to <2 x float>, !dbg !117
  %1062 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1033, i1 true) #5, !dbg !118
  %1063 = extractvalue { i32, i32 } %1062, 0, !dbg !118
  %1064 = extractvalue { i32, i32 } %1062, 1, !dbg !118
  %1065 = insertelement <2 x i32> poison, i32 %1063, i64 0, !dbg !118
  %1066 = insertelement <2 x i32> %1065, i32 %1064, i64 1, !dbg !118
  %1067 = bitcast <2 x i32> %1066 to <2 x float>, !dbg !118
  %1068 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1034, i1 true) #5, !dbg !119
  %1069 = bitcast i32 %1068 to <2 x bfloat>, !dbg !119
  %1070 = fpext <2 x bfloat> %1069 to <2 x float>, !dbg !120
  %1071 = fadd <2 x float> %1058, %1061, !dbg !121
  %1072 = fadd <2 x float> %1071, splat (float 1.000000e+00), !dbg !122
  %1073 = fmul <2 x float> %1046, %1072, !dbg !123
  %1074 = shufflevector <2 x float> %1072, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !123
  %1075 = fmul <4 x float> %1052, %1074, !dbg !123
  %1076 = extractelement <2 x float> %1072, i64 0, !dbg !123
  %1077 = fmul float %1037, %1076, !dbg !123
  %1078 = extractelement <2 x float> %1072, i64 1, !dbg !123
  %1079 = fmul float %1038, %1078, !dbg !123
  %1080 = fadd <2 x float> %1067, %1070, !dbg !124
  %1081 = fadd <2 x float> %1073, %1080, !dbg !125
  %1082 = shufflevector <2 x float> %1080, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !125
  %1083 = fadd <4 x float> %1075, %1082, !dbg !125
  %1084 = extractelement <2 x float> %1080, i64 0, !dbg !125
  %1085 = fadd float %1077, %1084, !dbg !125
  %1086 = extractelement <2 x float> %1080, i64 1, !dbg !125
  %1087 = fadd float %1079, %1086, !dbg !125
  %1088 = fcmp olt <2 x float> %1011, %1081, !dbg !126
  %1089 = fcmp olt <4 x float> %1014, %1083, !dbg !126
  %1090 = fcmp olt float %1009, %1085, !dbg !126
  %1091 = fcmp olt float %1010, %1087, !dbg !126
  %1092 = or <2 x i1> %1039, %1088, !dbg !127
  %1093 = or <4 x i1> %1040, %1089, !dbg !127
  %1094 = or i1 %1041, %1090, !dbg !127
  %1095 = or i1 %1042, %1091, !dbg !127
  %1096 = select <2 x i1> %1092, <2 x float> %1011, <2 x float> %1081, !dbg !128
  %1097 = select <4 x i1> %1093, <4 x float> %1014, <4 x float> %1083, !dbg !128
  %1098 = select i1 %1094, float %1009, float %1085, !dbg !128
  %1099 = select i1 %1095, float %1010, float %1087, !dbg !128
  %1100 = select <2 x i1> %992, <2 x float> %1096, <2 x float> %1011, !dbg !98
  %1101 = select <4 x i1> %998, <4 x float> %1097, <4 x float> %1014, !dbg !98
  %1102 = select i1 %24, float %1098, float %1009, !dbg !98
  %1103 = select i1 %24, float %1099, float %1010, !dbg !98
  %1104 = extractelement <2 x float> %1081, i64 0, !dbg !129
  %1105 = extractelement <2 x float> %1081, i64 1, !dbg !129
  %1106 = fcmp uno <4 x float> %1012, zeroinitializer, !dbg !130
  %1107 = fcmp uno <4 x float> %1013, zeroinitializer, !dbg !130
  %1108 = shufflevector <2 x float> %1081, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !132
  %1109 = insertelement <4 x float> %1108, float %1085, i64 0, !dbg !132
  %1110 = shufflevector <4 x float> %1109, <4 x float> %1083, <4 x i32> <i32 0, i32 6, i32 4, i32 3>, !dbg !132
  %1111 = fcmp ogt <4 x float> %1012, %1110, !dbg !132
  %1112 = shufflevector <2 x float> %1081, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !132
  %1113 = insertelement <4 x float> %1112, float %1087, i64 0, !dbg !132
  %1114 = shufflevector <4 x float> %1113, <4 x float> %1083, <4 x i32> <i32 0, i32 7, i32 5, i32 3>, !dbg !132
  %1115 = fcmp ogt <4 x float> %1013, %1114, !dbg !132
  %1116 = or <4 x i1> %1106, %1111, !dbg !133
  %1117 = or <4 x i1> %1107, %1115, !dbg !133
  %1118 = select <4 x i1> %1116, <4 x float> %1012, <4 x float> %1110, !dbg !134
  %1119 = select <4 x i1> %1117, <4 x float> %1013, <4 x float> %1114, !dbg !134
  %1120 = select <4 x i1> %998, <4 x float> %1118, <4 x float> %1012, !dbg !101
  %1121 = select <4 x i1> %998, <4 x float> %1119, <4 x float> %1013, !dbg !101
  %1122 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1018, !dbg !135
  %1123 = fptrunc float %1104 to bfloat, !dbg !129
  %1124 = fptrunc float %1105 to bfloat, !dbg !129
  %1125 = extractelement <4 x float> %1083, i64 0, !dbg !129
  %1126 = fptrunc float %1125 to bfloat, !dbg !129
  %1127 = extractelement <4 x float> %1083, i64 1, !dbg !129
  %1128 = fptrunc float %1127 to bfloat, !dbg !129
  %1129 = extractelement <4 x float> %1083, i64 2, !dbg !129
  %1130 = fptrunc float %1129 to bfloat, !dbg !129
  %1131 = extractelement <4 x float> %1083, i64 3, !dbg !129
  %1132 = fptrunc float %1131 to bfloat, !dbg !129
  %1133 = fptrunc float %1085 to bfloat, !dbg !129
  %1134 = fptrunc float %1087 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1135 = bitcast bfloat %1123 to i16, !dbg !129
  %1136 = bitcast bfloat %1124 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %72, i16 %1135, i16 %1136, i1 true) #5, !dbg !129
  %1137 = bitcast bfloat %1126 to i16, !dbg !129
  %1138 = bitcast bfloat %1128 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %73, i16 %1137, i16 %1138, i1 true) #5, !dbg !129
  %1139 = bitcast bfloat %1130 to i16, !dbg !129
  %1140 = bitcast bfloat %1132 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %74, i16 %1139, i16 %1140, i1 true) #5, !dbg !129
  %1141 = bitcast bfloat %1133 to i16, !dbg !129
  %1142 = bitcast bfloat %1134 to i16, !dbg !129
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %75, i16 %1141, i16 %1142, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %.extract = load i32, ptr addrspace(3) %990, align 16, !dbg !129
  %.extract110 = load i32, ptr addrspace(3) %1005, align 4, !dbg !129
  %.extract112 = load i32, ptr addrspace(3) %1006, align 8, !dbg !129
  %.extract114 = load i32, ptr addrspace(3) %1007, align 4, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %1122, i1 %23) #5, !dbg !129
  %indvars.iv.next167 = add nuw nsw i64 %indvars.iv166, 1024, !dbg !102
  %1143 = icmp samesign ult i64 %indvars.iv166, 2048, !dbg !102
  br i1 %1143, label %1008, label %1144, !dbg !102

1144:                                             ; preds = %1008
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1145 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1100, <2 x i32> <i32 0, i32 2>, !dbg !138
  %1146 = fcmp olt <2 x float> %1145, %1100, !dbg !138
  %1147 = fcmp uno <2 x float> %1145, %1100, !dbg !138
  %shift = shufflevector <2 x i1> %1146, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %1148 = or <2 x i1> %shift, %1147, !dbg !139
  %1149 = extractelement <2 x i1> %1148, i64 0, !dbg !139
  %1150 = extractelement <2 x float> %1100, i64 0, !dbg !140
  %1151 = extractelement <2 x float> %1100, i64 1, !dbg !140
  %1152 = select i1 %1149, float %1150, float %1151, !dbg !140
  %1153 = extractelement <4 x float> %1101, i64 0, !dbg !138
  %1154 = extractelement <4 x float> %1101, i64 1, !dbg !138
  %1155 = fcmp olt float %1153, %1154, !dbg !138
  %1156 = fcmp uno float %1153, 0.000000e+00, !dbg !141
  %1157 = or i1 %1155, %1156, !dbg !139
  %1158 = select i1 %1157, float %1153, float %1154, !dbg !140
  %1159 = extractelement <4 x float> %1101, i64 2, !dbg !138
  %1160 = extractelement <4 x float> %1101, i64 3, !dbg !138
  %1161 = fcmp olt float %1159, %1160, !dbg !138
  %1162 = fcmp uno float %1159, 0.000000e+00, !dbg !141
  %1163 = or i1 %1161, %1162, !dbg !139
  %1164 = select i1 %1163, float %1159, float %1160, !dbg !140
  %1165 = fcmp olt float %1102, %1103, !dbg !138
  %1166 = fcmp uno float %1102, 0.000000e+00, !dbg !141
  %1167 = or i1 %1165, %1166, !dbg !139
  %1168 = select i1 %1167, float %1102, float %1103, !dbg !140
  %1169 = bitcast float %1152 to i32, !dbg !136
  %1170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1169, i32 16, i32 31), !dbg !136
  %1171 = bitcast i32 %1170 to float, !dbg !136
  %1172 = fcmp olt float %1152, %1171, !dbg !138
  %1173 = fcmp uno float %1152, 0.000000e+00, !dbg !141
  %1174 = or i1 %1173, %1172, !dbg !139
  %1175 = select i1 %1174, float %1152, float %1171, !dbg !140
  %1176 = bitcast float %1175 to i32, !dbg !136
  %1177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1176, i32 8, i32 31), !dbg !136
  %1178 = bitcast i32 %1177 to float, !dbg !136
  %1179 = fcmp olt float %1175, %1178, !dbg !138
  %1180 = fcmp uno float %1175, 0.000000e+00, !dbg !141
  %1181 = or i1 %1179, %1180, !dbg !139
  %1182 = select i1 %1181, float %1175, float %1178, !dbg !140
  %1183 = bitcast float %1182 to i32, !dbg !136
  %1184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1183, i32 4, i32 31), !dbg !136
  %1185 = bitcast i32 %1184 to float, !dbg !136
  %1186 = fcmp olt float %1182, %1185, !dbg !138
  %1187 = fcmp uno float %1182, 0.000000e+00, !dbg !141
  %1188 = or i1 %1186, %1187, !dbg !139
  %1189 = select i1 %1188, float %1182, float %1185, !dbg !140
  %1190 = bitcast float %1189 to i32, !dbg !136
  %1191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1190, i32 2, i32 31), !dbg !136
  %1192 = bitcast i32 %1191 to float, !dbg !136
  %1193 = fcmp olt float %1189, %1192, !dbg !138
  %1194 = fcmp uno float %1189, 0.000000e+00, !dbg !141
  %1195 = or i1 %1193, %1194, !dbg !139
  %1196 = select i1 %1195, float %1189, float %1192, !dbg !140
  %1197 = bitcast float %1196 to i32, !dbg !136
  %1198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1197, i32 1, i32 31), !dbg !136
  %1199 = bitcast i32 %1198 to float, !dbg !136
  %1200 = fcmp olt float %1196, %1199, !dbg !138
  %1201 = fcmp uno float %1196, 0.000000e+00, !dbg !141
  %1202 = or i1 %1200, %1201, !dbg !139
  %1203 = bitcast float %1158 to i32, !dbg !136
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 16, i32 31), !dbg !136
  %1205 = bitcast i32 %1204 to float, !dbg !136
  %1206 = fcmp olt float %1158, %1205, !dbg !138
  %1207 = fcmp uno float %1158, 0.000000e+00, !dbg !141
  %1208 = or i1 %1207, %1206, !dbg !139
  %1209 = select i1 %1208, float %1158, float %1205, !dbg !140
  %1210 = bitcast float %1209 to i32, !dbg !136
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 8, i32 31), !dbg !136
  %1212 = bitcast i32 %1211 to float, !dbg !136
  %1213 = fcmp olt float %1209, %1212, !dbg !138
  %1214 = fcmp uno float %1209, 0.000000e+00, !dbg !141
  %1215 = or i1 %1213, %1214, !dbg !139
  %1216 = select i1 %1215, float %1209, float %1212, !dbg !140
  %1217 = bitcast float %1216 to i32, !dbg !136
  %1218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1217, i32 4, i32 31), !dbg !136
  %1219 = bitcast i32 %1218 to float, !dbg !136
  %1220 = fcmp olt float %1216, %1219, !dbg !138
  %1221 = fcmp uno float %1216, 0.000000e+00, !dbg !141
  %1222 = or i1 %1220, %1221, !dbg !139
  %1223 = select i1 %1222, float %1216, float %1219, !dbg !140
  %1224 = bitcast float %1223 to i32, !dbg !136
  %1225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1224, i32 2, i32 31), !dbg !136
  %1226 = bitcast i32 %1225 to float, !dbg !136
  %1227 = fcmp olt float %1223, %1226, !dbg !138
  %1228 = fcmp uno float %1223, 0.000000e+00, !dbg !141
  %1229 = or i1 %1227, %1228, !dbg !139
  %1230 = select i1 %1229, float %1223, float %1226, !dbg !140
  %1231 = bitcast float %1230 to i32, !dbg !136
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1231, i32 1, i32 31), !dbg !136
  %1233 = bitcast i32 %1232 to float, !dbg !136
  %1234 = fcmp olt float %1230, %1233, !dbg !138
  %1235 = fcmp uno float %1230, 0.000000e+00, !dbg !141
  %1236 = or i1 %1234, %1235, !dbg !139
  %1237 = bitcast float %1164 to i32, !dbg !136
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1237, i32 16, i32 31), !dbg !136
  %1239 = bitcast i32 %1238 to float, !dbg !136
  %1240 = fcmp olt float %1164, %1239, !dbg !138
  %1241 = fcmp uno float %1164, 0.000000e+00, !dbg !141
  %1242 = or i1 %1241, %1240, !dbg !139
  %1243 = select i1 %1242, float %1164, float %1239, !dbg !140
  %1244 = bitcast float %1243 to i32, !dbg !136
  %1245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1244, i32 8, i32 31), !dbg !136
  %1246 = bitcast i32 %1245 to float, !dbg !136
  %1247 = fcmp olt float %1243, %1246, !dbg !138
  %1248 = fcmp uno float %1243, 0.000000e+00, !dbg !141
  %1249 = or i1 %1247, %1248, !dbg !139
  %1250 = select i1 %1249, float %1243, float %1246, !dbg !140
  %1251 = bitcast float %1250 to i32, !dbg !136
  %1252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1251, i32 4, i32 31), !dbg !136
  %1253 = bitcast i32 %1252 to float, !dbg !136
  %1254 = fcmp olt float %1250, %1253, !dbg !138
  %1255 = fcmp uno float %1250, 0.000000e+00, !dbg !141
  %1256 = or i1 %1254, %1255, !dbg !139
  %1257 = select i1 %1256, float %1250, float %1253, !dbg !140
  %1258 = bitcast float %1257 to i32, !dbg !136
  %1259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1258, i32 2, i32 31), !dbg !136
  %1260 = bitcast i32 %1259 to float, !dbg !136
  %1261 = fcmp olt float %1257, %1260, !dbg !138
  %1262 = fcmp uno float %1257, 0.000000e+00, !dbg !141
  %1263 = or i1 %1261, %1262, !dbg !139
  %1264 = select i1 %1263, float %1257, float %1260, !dbg !140
  %1265 = bitcast float %1264 to i32, !dbg !136
  %1266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1265, i32 1, i32 31), !dbg !136
  %1267 = bitcast i32 %1266 to float, !dbg !136
  %1268 = fcmp olt float %1264, %1267, !dbg !138
  %1269 = fcmp uno float %1264, 0.000000e+00, !dbg !141
  %1270 = or i1 %1268, %1269, !dbg !139
  %1271 = bitcast float %1168 to i32, !dbg !136
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 16, i32 31), !dbg !136
  %1273 = bitcast i32 %1272 to float, !dbg !136
  %1274 = fcmp olt float %1168, %1273, !dbg !138
  %1275 = fcmp uno float %1168, 0.000000e+00, !dbg !141
  %1276 = or i1 %1275, %1274, !dbg !139
  %1277 = select i1 %1276, float %1168, float %1273, !dbg !140
  %1278 = bitcast float %1277 to i32, !dbg !136
  %1279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1278, i32 8, i32 31), !dbg !136
  %1280 = bitcast i32 %1279 to float, !dbg !136
  %1281 = fcmp olt float %1277, %1280, !dbg !138
  %1282 = fcmp uno float %1277, 0.000000e+00, !dbg !141
  %1283 = or i1 %1281, %1282, !dbg !139
  %1284 = select i1 %1283, float %1277, float %1280, !dbg !140
  %1285 = bitcast float %1284 to i32, !dbg !136
  %1286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1285, i32 4, i32 31), !dbg !136
  %1287 = bitcast i32 %1286 to float, !dbg !136
  %1288 = fcmp olt float %1284, %1287, !dbg !138
  %1289 = fcmp uno float %1284, 0.000000e+00, !dbg !141
  %1290 = or i1 %1288, %1289, !dbg !139
  %1291 = select i1 %1290, float %1284, float %1287, !dbg !140
  %1292 = bitcast float %1291 to i32, !dbg !136
  %1293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1292, i32 2, i32 31), !dbg !136
  %1294 = bitcast i32 %1293 to float, !dbg !136
  %1295 = fcmp olt float %1291, %1294, !dbg !138
  %1296 = fcmp uno float %1291, 0.000000e+00, !dbg !141
  %1297 = or i1 %1295, %1296, !dbg !139
  %1298 = select i1 %1297, float %1291, float %1294, !dbg !140
  %1299 = bitcast float %1298 to i32, !dbg !136
  %1300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1299, i32 1, i32 31), !dbg !136
  %1301 = bitcast i32 %1300 to float, !dbg !136
  %1302 = fcmp olt float %1298, %1301, !dbg !138
  %1303 = fcmp uno float %1298, 0.000000e+00, !dbg !141
  %1304 = or i1 %1302, %1303, !dbg !139
  %1305 = select i1 %1202, i32 %1197, i32 %1198, !dbg !140
  %1306 = insertelement <1 x i32> poison, i32 %1305, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %1306, i1 %822) #5, !dbg !136
  %1307 = select i1 %1236, i32 %1231, i32 %1232, !dbg !140
  %1308 = insertelement <1 x i32> poison, i32 %1307, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %1308, i1 %822) #5, !dbg !136
  %1309 = select i1 %1270, i32 %1265, i32 %1266, !dbg !140
  %1310 = insertelement <1 x i32> poison, i32 %1309, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %1310, i1 %822) #5, !dbg !136
  %1311 = select i1 %1304, i32 %1299, i32 %1300, !dbg !140
  %1312 = insertelement <1 x i32> poison, i32 %1311, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %1312, i1 %822) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !136
  %1314 = bitcast i32 %1313 to float, !dbg !136
  %1315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1313, i32 8, i32 31), !dbg !136
  %1316 = bitcast i32 %1315 to float, !dbg !136
  %1317 = fcmp olt float %1314, %1316, !dbg !138
  %1318 = fcmp uno float %1314, 0.000000e+00, !dbg !141
  %1319 = or i1 %1318, %1317, !dbg !139
  %1320 = select i1 %1319, float %1314, float %1316, !dbg !140
  %1321 = bitcast float %1320 to i32, !dbg !136
  %1322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1321, i32 4, i32 31), !dbg !136
  %1323 = bitcast i32 %1322 to float, !dbg !136
  %1324 = fcmp olt float %1320, %1323, !dbg !138
  %1325 = fcmp uno float %1320, 0.000000e+00, !dbg !141
  %1326 = or i1 %1324, %1325, !dbg !139
  %1327 = select i1 %1326, float %1320, float %1323, !dbg !140
  %1328 = bitcast float %1327 to i32, !dbg !136
  %1329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1328, i32 2, i32 31), !dbg !136
  %1330 = bitcast i32 %1329 to float, !dbg !136
  %1331 = fcmp olt float %1327, %1330, !dbg !138
  %1332 = fcmp uno float %1327, 0.000000e+00, !dbg !141
  %1333 = or i1 %1331, %1332, !dbg !139
  %1334 = select i1 %1333, float %1327, float %1330, !dbg !140
  %1335 = bitcast float %1334 to i32, !dbg !136
  %1336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1335, i32 1, i32 31), !dbg !136
  %1337 = bitcast i32 %1336 to float, !dbg !136
  %1338 = fcmp olt float %1334, %1337, !dbg !138
  %1339 = fcmp uno float %1334, 0.000000e+00, !dbg !141
  %1340 = or i1 %1338, %1339, !dbg !139
  %1341 = select i1 %1340, i32 %1335, i32 %1336, !dbg !140
  %1342 = insertelement <1 x i32> poison, i32 %1341, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %1342, i1 %943) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1343 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %1344 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !136
  %1345 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !136
  %1346 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1347 = bitcast float %1343 to i32, !dbg !142
  %1348 = bitcast float %1344 to i32, !dbg !142
  %1349 = bitcast float %1345 to i32, !dbg !142
  %1350 = bitcast float %1346 to i32, !dbg !142
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1347, i32 %1348, i32 %1349, i32 %1350, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1351 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %342, !dbg !142
  %1352 = load float, ptr addrspace(3) %1351, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1353 = fcmp ogt <4 x float> %1120, %1121, !dbg !145
  %1354 = extractelement <4 x float> %1120, i64 3, !dbg !146
  %1355 = fcmp uno float %1354, 0.000000e+00, !dbg !146
  %1356 = extractelement <4 x i1> %1353, i64 3, !dbg !147
  %1357 = or i1 %1356, %1355, !dbg !147
  %1358 = extractelement <4 x float> %1121, i64 3, !dbg !148
  %1359 = select i1 %1357, float %1354, float %1358, !dbg !148
  %1360 = extractelement <4 x float> %1120, i64 2, !dbg !146
  %1361 = fcmp uno float %1360, 0.000000e+00, !dbg !146
  %1362 = extractelement <4 x i1> %1353, i64 2, !dbg !147
  %1363 = or i1 %1362, %1361, !dbg !147
  %1364 = extractelement <4 x float> %1121, i64 2, !dbg !148
  %1365 = select i1 %1363, float %1360, float %1364, !dbg !148
  %1366 = extractelement <4 x float> %1120, i64 1, !dbg !146
  %1367 = fcmp uno float %1366, 0.000000e+00, !dbg !146
  %1368 = extractelement <4 x i1> %1353, i64 1, !dbg !147
  %1369 = or i1 %1368, %1367, !dbg !147
  %1370 = extractelement <4 x float> %1121, i64 1, !dbg !148
  %1371 = select i1 %1369, float %1366, float %1370, !dbg !148
  %1372 = extractelement <4 x float> %1120, i64 0, !dbg !146
  %1373 = fcmp uno float %1372, 0.000000e+00, !dbg !146
  %1374 = extractelement <4 x i1> %1353, i64 0, !dbg !147
  %1375 = or i1 %1374, %1373, !dbg !147
  %1376 = extractelement <4 x float> %1121, i64 0, !dbg !148
  %1377 = select i1 %1375, float %1372, float %1376, !dbg !148
  %1378 = bitcast float %1359 to i32, !dbg !143
  %1379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1378, i32 16, i32 31), !dbg !143
  %1380 = bitcast i32 %1379 to float, !dbg !143
  %1381 = fcmp ogt float %1359, %1380, !dbg !145
  %1382 = fcmp uno float %1359, 0.000000e+00, !dbg !146
  %1383 = or i1 %1382, %1381, !dbg !147
  %1384 = select i1 %1383, float %1359, float %1380, !dbg !148
  %1385 = bitcast float %1384 to i32, !dbg !143
  %1386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1385, i32 8, i32 31), !dbg !143
  %1387 = bitcast i32 %1386 to float, !dbg !143
  %1388 = fcmp ogt float %1384, %1387, !dbg !145
  %1389 = fcmp uno float %1384, 0.000000e+00, !dbg !146
  %1390 = or i1 %1388, %1389, !dbg !147
  %1391 = select i1 %1390, float %1384, float %1387, !dbg !148
  %1392 = bitcast float %1391 to i32, !dbg !143
  %1393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1392, i32 4, i32 31), !dbg !143
  %1394 = bitcast i32 %1393 to float, !dbg !143
  %1395 = fcmp ogt float %1391, %1394, !dbg !145
  %1396 = fcmp uno float %1391, 0.000000e+00, !dbg !146
  %1397 = or i1 %1395, %1396, !dbg !147
  %1398 = select i1 %1397, float %1391, float %1394, !dbg !148
  %1399 = bitcast float %1398 to i32, !dbg !143
  %1400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1399, i32 2, i32 31), !dbg !143
  %1401 = bitcast i32 %1400 to float, !dbg !143
  %1402 = fcmp ogt float %1398, %1401, !dbg !145
  %1403 = fcmp uno float %1398, 0.000000e+00, !dbg !146
  %1404 = or i1 %1402, %1403, !dbg !147
  %1405 = select i1 %1404, float %1398, float %1401, !dbg !148
  %1406 = bitcast float %1405 to i32, !dbg !143
  %1407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1406, i32 1, i32 31), !dbg !143
  %1408 = bitcast i32 %1407 to float, !dbg !143
  %1409 = fcmp ogt float %1405, %1408, !dbg !145
  %1410 = fcmp uno float %1405, 0.000000e+00, !dbg !146
  %1411 = or i1 %1409, %1410, !dbg !147
  %1412 = bitcast float %1365 to i32, !dbg !143
  %1413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1412, i32 16, i32 31), !dbg !143
  %1414 = bitcast i32 %1413 to float, !dbg !143
  %1415 = fcmp ogt float %1365, %1414, !dbg !145
  %1416 = fcmp uno float %1365, 0.000000e+00, !dbg !146
  %1417 = or i1 %1416, %1415, !dbg !147
  %1418 = select i1 %1417, float %1365, float %1414, !dbg !148
  %1419 = bitcast float %1418 to i32, !dbg !143
  %1420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1419, i32 8, i32 31), !dbg !143
  %1421 = bitcast i32 %1420 to float, !dbg !143
  %1422 = fcmp ogt float %1418, %1421, !dbg !145
  %1423 = fcmp uno float %1418, 0.000000e+00, !dbg !146
  %1424 = or i1 %1422, %1423, !dbg !147
  %1425 = select i1 %1424, float %1418, float %1421, !dbg !148
  %1426 = bitcast float %1425 to i32, !dbg !143
  %1427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1426, i32 4, i32 31), !dbg !143
  %1428 = bitcast i32 %1427 to float, !dbg !143
  %1429 = fcmp ogt float %1425, %1428, !dbg !145
  %1430 = fcmp uno float %1425, 0.000000e+00, !dbg !146
  %1431 = or i1 %1429, %1430, !dbg !147
  %1432 = select i1 %1431, float %1425, float %1428, !dbg !148
  %1433 = bitcast float %1432 to i32, !dbg !143
  %1434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1433, i32 2, i32 31), !dbg !143
  %1435 = bitcast i32 %1434 to float, !dbg !143
  %1436 = fcmp ogt float %1432, %1435, !dbg !145
  %1437 = fcmp uno float %1432, 0.000000e+00, !dbg !146
  %1438 = or i1 %1436, %1437, !dbg !147
  %1439 = select i1 %1438, float %1432, float %1435, !dbg !148
  %1440 = bitcast float %1439 to i32, !dbg !143
  %1441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1440, i32 1, i32 31), !dbg !143
  %1442 = bitcast i32 %1441 to float, !dbg !143
  %1443 = fcmp ogt float %1439, %1442, !dbg !145
  %1444 = fcmp uno float %1439, 0.000000e+00, !dbg !146
  %1445 = or i1 %1443, %1444, !dbg !147
  %1446 = bitcast float %1371 to i32, !dbg !143
  %1447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1446, i32 16, i32 31), !dbg !143
  %1448 = bitcast i32 %1447 to float, !dbg !143
  %1449 = fcmp ogt float %1371, %1448, !dbg !145
  %1450 = fcmp uno float %1371, 0.000000e+00, !dbg !146
  %1451 = or i1 %1450, %1449, !dbg !147
  %1452 = select i1 %1451, float %1371, float %1448, !dbg !148
  %1453 = bitcast float %1452 to i32, !dbg !143
  %1454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1453, i32 8, i32 31), !dbg !143
  %1455 = bitcast i32 %1454 to float, !dbg !143
  %1456 = fcmp ogt float %1452, %1455, !dbg !145
  %1457 = fcmp uno float %1452, 0.000000e+00, !dbg !146
  %1458 = or i1 %1456, %1457, !dbg !147
  %1459 = select i1 %1458, float %1452, float %1455, !dbg !148
  %1460 = bitcast float %1459 to i32, !dbg !143
  %1461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1460, i32 4, i32 31), !dbg !143
  %1462 = bitcast i32 %1461 to float, !dbg !143
  %1463 = fcmp ogt float %1459, %1462, !dbg !145
  %1464 = fcmp uno float %1459, 0.000000e+00, !dbg !146
  %1465 = or i1 %1463, %1464, !dbg !147
  %1466 = select i1 %1465, float %1459, float %1462, !dbg !148
  %1467 = bitcast float %1466 to i32, !dbg !143
  %1468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1467, i32 2, i32 31), !dbg !143
  %1469 = bitcast i32 %1468 to float, !dbg !143
  %1470 = fcmp ogt float %1466, %1469, !dbg !145
  %1471 = fcmp uno float %1466, 0.000000e+00, !dbg !146
  %1472 = or i1 %1470, %1471, !dbg !147
  %1473 = select i1 %1472, float %1466, float %1469, !dbg !148
  %1474 = bitcast float %1473 to i32, !dbg !143
  %1475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1474, i32 1, i32 31), !dbg !143
  %1476 = bitcast i32 %1475 to float, !dbg !143
  %1477 = fcmp ogt float %1473, %1476, !dbg !145
  %1478 = fcmp uno float %1473, 0.000000e+00, !dbg !146
  %1479 = or i1 %1477, %1478, !dbg !147
  %1480 = bitcast float %1377 to i32, !dbg !143
  %1481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1480, i32 16, i32 31), !dbg !143
  %1482 = bitcast i32 %1481 to float, !dbg !143
  %1483 = fcmp ogt float %1377, %1482, !dbg !145
  %1484 = fcmp uno float %1377, 0.000000e+00, !dbg !146
  %1485 = or i1 %1484, %1483, !dbg !147
  %1486 = select i1 %1485, float %1377, float %1482, !dbg !148
  %1487 = bitcast float %1486 to i32, !dbg !143
  %1488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1487, i32 8, i32 31), !dbg !143
  %1489 = bitcast i32 %1488 to float, !dbg !143
  %1490 = fcmp ogt float %1486, %1489, !dbg !145
  %1491 = fcmp uno float %1486, 0.000000e+00, !dbg !146
  %1492 = or i1 %1490, %1491, !dbg !147
  %1493 = select i1 %1492, float %1486, float %1489, !dbg !148
  %1494 = bitcast float %1493 to i32, !dbg !143
  %1495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1494, i32 4, i32 31), !dbg !143
  %1496 = bitcast i32 %1495 to float, !dbg !143
  %1497 = fcmp ogt float %1493, %1496, !dbg !145
  %1498 = fcmp uno float %1493, 0.000000e+00, !dbg !146
  %1499 = or i1 %1497, %1498, !dbg !147
  %1500 = select i1 %1499, float %1493, float %1496, !dbg !148
  %1501 = bitcast float %1500 to i32, !dbg !143
  %1502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1501, i32 2, i32 31), !dbg !143
  %1503 = bitcast i32 %1502 to float, !dbg !143
  %1504 = fcmp ogt float %1500, %1503, !dbg !145
  %1505 = fcmp uno float %1500, 0.000000e+00, !dbg !146
  %1506 = or i1 %1504, %1505, !dbg !147
  %1507 = select i1 %1506, float %1500, float %1503, !dbg !148
  %1508 = bitcast float %1507 to i32, !dbg !143
  %1509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1508, i32 1, i32 31), !dbg !143
  %1510 = bitcast i32 %1509 to float, !dbg !143
  %1511 = fcmp ogt float %1507, %1510, !dbg !145
  %1512 = fcmp uno float %1507, 0.000000e+00, !dbg !146
  %1513 = or i1 %1511, %1512, !dbg !147
  %1514 = select i1 %1411, i32 %1406, i32 %1407, !dbg !148
  %1515 = insertelement <1 x i32> poison, i32 %1514, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %1515, i1 %822) #5, !dbg !143
  %1516 = select i1 %1445, i32 %1440, i32 %1441, !dbg !148
  %1517 = insertelement <1 x i32> poison, i32 %1516, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %1517, i1 %822) #5, !dbg !143
  %1518 = select i1 %1479, i32 %1474, i32 %1475, !dbg !148
  %1519 = insertelement <1 x i32> poison, i32 %1518, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %1519, i1 %822) #5, !dbg !143
  %1520 = select i1 %1513, i32 %1508, i32 %1509, !dbg !148
  %1521 = insertelement <1 x i32> poison, i32 %1520, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %844, <1 x i32> %1521, i1 %822) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1522 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %851, i1 %850) #5, !dbg !143
  %1523 = bitcast i32 %1522 to float, !dbg !143
  %1524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1522, i32 8, i32 31), !dbg !143
  %1525 = bitcast i32 %1524 to float, !dbg !143
  %1526 = fcmp ogt float %1523, %1525, !dbg !145
  %1527 = fcmp uno float %1523, 0.000000e+00, !dbg !146
  %1528 = or i1 %1527, %1526, !dbg !147
  %1529 = select i1 %1528, float %1523, float %1525, !dbg !148
  %1530 = bitcast float %1529 to i32, !dbg !143
  %1531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1530, i32 4, i32 31), !dbg !143
  %1532 = bitcast i32 %1531 to float, !dbg !143
  %1533 = fcmp ogt float %1529, %1532, !dbg !145
  %1534 = fcmp uno float %1529, 0.000000e+00, !dbg !146
  %1535 = or i1 %1533, %1534, !dbg !147
  %1536 = select i1 %1535, float %1529, float %1532, !dbg !148
  %1537 = bitcast float %1536 to i32, !dbg !143
  %1538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1537, i32 2, i32 31), !dbg !143
  %1539 = bitcast i32 %1538 to float, !dbg !143
  %1540 = fcmp ogt float %1536, %1539, !dbg !145
  %1541 = fcmp uno float %1536, 0.000000e+00, !dbg !146
  %1542 = or i1 %1540, %1541, !dbg !147
  %1543 = select i1 %1542, float %1536, float %1539, !dbg !148
  %1544 = bitcast float %1543 to i32, !dbg !143
  %1545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1544, i32 1, i32 31), !dbg !143
  %1546 = bitcast i32 %1545 to float, !dbg !143
  %1547 = fcmp ogt float %1543, %1546, !dbg !145
  %1548 = fcmp uno float %1543, 0.000000e+00, !dbg !146
  %1549 = or i1 %1547, %1548, !dbg !147
  %1550 = select i1 %1549, i32 %1544, i32 %1545, !dbg !148
  %1551 = insertelement <1 x i32> poison, i32 %1550, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %851, <1 x i32> %1551, i1 %943) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1552 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %1553 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !143
  %1554 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !143
  %1555 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1556 = bitcast float %1552 to i32, !dbg !149
  %1557 = bitcast float %1553 to i32, !dbg !149
  %1558 = bitcast float %1554 to i32, !dbg !149
  %1559 = bitcast float %1555 to i32, !dbg !149
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1556, i32 %1557, i32 %1558, i32 %1559, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %1560 = load float, ptr addrspace(3) %1351, align 4, !dbg !149
  %1561 = sext i32 %343 to i64, !dbg !150
  %1562 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1561, !dbg !150
  %1563 = fptrunc float %1352 to bfloat, !dbg !142
  %1564 = and i32 %19, 508, !dbg !142
  %1565 = icmp eq i32 %1564, 0, !dbg !142
  %1566 = bitcast bfloat %1563 to i16, !dbg !142
  %1567 = and i1 %1565, %344, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1566, ptr addrspace(1) %1562, i1 %1567) #5, !dbg !142
  %1568 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1561, !dbg !151
  %1569 = fptrunc float %1560 to bfloat, !dbg !149
  %1570 = bitcast bfloat %1569 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1570, ptr addrspace(1) %1568, i1 %1567) #5, !dbg !149
  %1571 = insertelement <4 x float> poison, float %1346, i64 0, !dbg !152
  %1572 = insertelement <4 x float> %1571, float %1345, i64 1, !dbg !152
  %1573 = insertelement <4 x float> %1572, float %1344, i64 2, !dbg !152
  %1574 = insertelement <4 x float> %1573, float %1343, i64 3, !dbg !152
  %1575 = fcmp oge <4 x float> %1574, zeroinitializer, !dbg !152
  %1576 = select <4 x i1> %1575, <4 x float> zeroinitializer, <4 x float> %1574, !dbg !152
  %1577 = fsub <4 x float> zeroinitializer, %1576, !dbg !154
  %1578 = insertelement <4 x float> poison, float %1555, i64 0, !dbg !155
  %1579 = insertelement <4 x float> %1578, float %1554, i64 1, !dbg !155
  %1580 = insertelement <4 x float> %1579, float %1553, i64 2, !dbg !155
  %1581 = insertelement <4 x float> %1580, float %1552, i64 3, !dbg !155
  %1582 = fcmp ole <4 x float> %1581, zeroinitializer, !dbg !155
  %1583 = select <4 x i1> %1582, <4 x float> zeroinitializer, <4 x float> %1581, !dbg !155
  %1584 = fcmp ogt <4 x float> %1577, %1583, !dbg !157
  %1585 = fcmp uno <4 x float> %1577, zeroinitializer, !dbg !159
  %1586 = or <4 x i1> %1585, %1584, !dbg !160
  %1587 = select <4 x i1> %1586, <4 x float> %1577, <4 x float> %1583, !dbg !161
  %1588 = fmul <4 x float> %1587, splat (float 0x3F80204080000000), !dbg !162
  %1589 = fcmp ogt <4 x float> %1588, splat (float 0x3EE4F8B580000000), !dbg !163
  %1590 = extractelement <4 x float> %1588, i64 3, !dbg !165
  %1591 = fcmp uno float %1590, 0.000000e+00, !dbg !166
  %1592 = extractelement <4 x float> %1588, i64 2, !dbg !165
  %1593 = fcmp uno float %1592, 0.000000e+00, !dbg !166
  %1594 = extractelement <4 x float> %1588, i64 1, !dbg !165
  %1595 = fcmp uno float %1594, 0.000000e+00, !dbg !166
  %1596 = extractelement <4 x float> %1588, i64 0, !dbg !165
  %1597 = fcmp uno float %1596, 0.000000e+00, !dbg !166
  %1598 = extractelement <4 x i1> %1589, i64 3, !dbg !167
  %1599 = or i1 %1598, %1591, !dbg !167
  %1600 = extractelement <4 x i1> %1589, i64 2, !dbg !167
  %1601 = or i1 %1600, %1593, !dbg !167
  %1602 = extractelement <4 x i1> %1589, i64 1, !dbg !167
  %1603 = or i1 %1602, %1595, !dbg !167
  %1604 = extractelement <4 x i1> %1589, i64 0, !dbg !167
  %1605 = or i1 %1604, %1597, !dbg !167
  %1606 = select i1 %1599, float %1590, float 0x3EE4F8B580000000, !dbg !165
  %1607 = select i1 %1601, float %1592, float 0x3EE4F8B580000000, !dbg !165
  %1608 = select i1 %1603, float %1594, float 0x3EE4F8B580000000, !dbg !165
  %1609 = select i1 %1605, float %1596, float 0x3EE4F8B580000000, !dbg !165
  %1610 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1606), !dbg !168
  %1611 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1607), !dbg !168
  %1612 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1608), !dbg !168
  %1613 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1609), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %1614 = bitcast float %1610 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1614, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1614, i1 true) #5, !dbg !169
  %1615 = bitcast float %1611 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1615, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1615, i1 true) #5, !dbg !169
  %1616 = bitcast float %1612 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1616, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1616, i1 true) #5, !dbg !169
  %1617 = bitcast float %1613 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1617, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1617, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %.idx = shl nuw nsw i32 %20, 3, !dbg !169
  %1618 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !169
  %1619 = load float, ptr addrspace(3) %1618, align 8, !dbg !169
  %1620 = sext i32 %66 to i64, !dbg !170
  %1621 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1620, !dbg !170
  %1622 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1621, i1 %23) #5, !dbg !171
  %1623 = extractvalue { i32, i32, i32, i32 } %1622, 0, !dbg !171
  %1624 = bitcast i32 %1623 to <2 x bfloat>, !dbg !171
  %1625 = extractvalue { i32, i32, i32, i32 } %1622, 1, !dbg !171
  %1626 = bitcast i32 %1625 to <2 x bfloat>, !dbg !171
  %1627 = extractvalue { i32, i32, i32, i32 } %1622, 2, !dbg !171
  %1628 = bitcast i32 %1627 to <2 x bfloat>, !dbg !171
  %1629 = extractvalue { i32, i32, i32, i32 } %1622, 3, !dbg !171
  %1630 = bitcast i32 %1629 to <2 x bfloat>, !dbg !171
  %1631 = extractelement <2 x bfloat> %1624, i64 0, !dbg !171
  %1632 = extractelement <2 x bfloat> %1624, i64 1, !dbg !171
  %1633 = extractelement <2 x bfloat> %1626, i64 0, !dbg !171
  %1634 = extractelement <2 x bfloat> %1626, i64 1, !dbg !171
  %1635 = extractelement <2 x bfloat> %1628, i64 0, !dbg !171
  %1636 = extractelement <2 x bfloat> %1628, i64 1, !dbg !171
  %1637 = extractelement <2 x bfloat> %1630, i64 0, !dbg !171
  %1638 = extractelement <2 x bfloat> %1630, i64 1, !dbg !171
  %1639 = fpext bfloat %1631 to float, !dbg !172
  %1640 = fpext bfloat %1632 to float, !dbg !172
  %1641 = fpext bfloat %1633 to float, !dbg !172
  %1642 = fpext bfloat %1634 to float, !dbg !172
  %1643 = fpext bfloat %1635 to float, !dbg !172
  %1644 = fpext bfloat %1636 to float, !dbg !172
  %1645 = fpext bfloat %1637 to float, !dbg !172
  %1646 = fpext bfloat %1638 to float, !dbg !172
  %1647 = fmul float %1619, %1639, !dbg !169
  %1648 = fmul float %1619, %1640, !dbg !169
  %1649 = fmul float %1619, %1641, !dbg !169
  %1650 = fmul float %1619, %1642, !dbg !169
  %1651 = fmul float %1619, %1643, !dbg !169
  %1652 = fmul float %1619, %1644, !dbg !169
  %1653 = fmul float %1619, %1645, !dbg !169
  %1654 = fmul float %1619, %1646, !dbg !169
  %1655 = tail call float @llvm.nvvm.round.f(float %1647) #5, !dbg !173
  %1656 = tail call float @llvm.nvvm.round.f(float %1648) #5, !dbg !173
  %1657 = tail call float @llvm.nvvm.round.f(float %1649) #5, !dbg !173
  %1658 = tail call float @llvm.nvvm.round.f(float %1650) #5, !dbg !173
  %1659 = tail call float @llvm.nvvm.round.f(float %1651) #5, !dbg !173
  %1660 = tail call float @llvm.nvvm.round.f(float %1652) #5, !dbg !173
  %1661 = tail call float @llvm.nvvm.round.f(float %1653) #5, !dbg !173
  %1662 = tail call float @llvm.nvvm.round.f(float %1654) #5, !dbg !173
  %1663 = insertelement <4 x float> poison, float %1655, i64 0, !dbg !174
  %1664 = insertelement <4 x float> %1663, float %1656, i64 1, !dbg !174
  %1665 = insertelement <4 x float> %1664, float %1657, i64 2, !dbg !174
  %1666 = insertelement <4 x float> %1665, float %1658, i64 3, !dbg !174
  %1667 = fcmp ogt <4 x float> %1666, splat (float -1.270000e+02), !dbg !174
  %1668 = fcmp uno <4 x float> %1666, zeroinitializer, !dbg !176
  %1669 = or <4 x i1> %1667, %1668, !dbg !177
  %1670 = select <4 x i1> %1669, <4 x float> %1666, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1671 = fcmp olt <4 x float> %1670, splat (float 1.270000e+02), !dbg !179
  %1672 = fcmp uno <4 x float> %1670, zeroinitializer, !dbg !181
  %1673 = or <4 x i1> %1671, %1672, !dbg !182
  %1674 = fptosi <4 x float> %1670 to <4 x i8>, !dbg !183
  %1675 = select <4 x i1> %1673, <4 x i8> %1674, <4 x i8> splat (i8 127), !dbg !184
  %1676 = insertelement <4 x float> poison, float %1659, i64 0, !dbg !174
  %1677 = insertelement <4 x float> %1676, float %1660, i64 1, !dbg !174
  %1678 = insertelement <4 x float> %1677, float %1661, i64 2, !dbg !174
  %1679 = insertelement <4 x float> %1678, float %1662, i64 3, !dbg !174
  %1680 = fcmp ogt <4 x float> %1679, splat (float -1.270000e+02), !dbg !174
  %1681 = fcmp uno <4 x float> %1679, zeroinitializer, !dbg !176
  %1682 = or <4 x i1> %1680, %1681, !dbg !177
  %1683 = select <4 x i1> %1682, <4 x float> %1679, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1684 = fcmp olt <4 x float> %1683, splat (float 1.270000e+02), !dbg !179
  %1685 = fcmp uno <4 x float> %1683, zeroinitializer, !dbg !181
  %1686 = or <4 x i1> %1684, %1685, !dbg !182
  %1687 = fptosi <4 x float> %1683 to <4 x i8>, !dbg !183
  %1688 = select <4 x i1> %1686, <4 x i8> %1687, <4 x i8> splat (i8 127), !dbg !184
  %1689 = getelementptr i8, ptr addrspace(1) %12, i64 %1620, !dbg !185
  %1690 = bitcast <4 x i8> %1675 to i32, !dbg !186
  %1691 = bitcast <4 x i8> %1688 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1690, i32 %1691, ptr addrspace(1) %1689, i1 %23) #5, !dbg !186
  %1692 = add i32 %66, 1024, !dbg !187
  %1693 = sext i32 %1692 to i64, !dbg !170
  %1694 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1693, !dbg !170
  %1695 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1694, i1 %23) #5, !dbg !171
  %1696 = extractvalue { i32, i32, i32, i32 } %1695, 0, !dbg !171
  %1697 = bitcast i32 %1696 to <2 x bfloat>, !dbg !171
  %1698 = extractvalue { i32, i32, i32, i32 } %1695, 1, !dbg !171
  %1699 = bitcast i32 %1698 to <2 x bfloat>, !dbg !171
  %1700 = extractvalue { i32, i32, i32, i32 } %1695, 2, !dbg !171
  %1701 = bitcast i32 %1700 to <2 x bfloat>, !dbg !171
  %1702 = extractvalue { i32, i32, i32, i32 } %1695, 3, !dbg !171
  %1703 = bitcast i32 %1702 to <2 x bfloat>, !dbg !171
  %1704 = extractelement <2 x bfloat> %1697, i64 0, !dbg !171
  %1705 = extractelement <2 x bfloat> %1697, i64 1, !dbg !171
  %1706 = extractelement <2 x bfloat> %1699, i64 0, !dbg !171
  %1707 = extractelement <2 x bfloat> %1699, i64 1, !dbg !171
  %1708 = extractelement <2 x bfloat> %1701, i64 0, !dbg !171
  %1709 = extractelement <2 x bfloat> %1701, i64 1, !dbg !171
  %1710 = extractelement <2 x bfloat> %1703, i64 0, !dbg !171
  %1711 = extractelement <2 x bfloat> %1703, i64 1, !dbg !171
  %1712 = fpext bfloat %1704 to float, !dbg !172
  %1713 = fpext bfloat %1705 to float, !dbg !172
  %1714 = fpext bfloat %1706 to float, !dbg !172
  %1715 = fpext bfloat %1707 to float, !dbg !172
  %1716 = fpext bfloat %1708 to float, !dbg !172
  %1717 = fpext bfloat %1709 to float, !dbg !172
  %1718 = fpext bfloat %1710 to float, !dbg !172
  %1719 = fpext bfloat %1711 to float, !dbg !172
  %1720 = fmul float %1619, %1712, !dbg !169
  %1721 = fmul float %1619, %1713, !dbg !169
  %1722 = fmul float %1619, %1714, !dbg !169
  %1723 = fmul float %1619, %1715, !dbg !169
  %1724 = fmul float %1619, %1716, !dbg !169
  %1725 = fmul float %1619, %1717, !dbg !169
  %1726 = fmul float %1619, %1718, !dbg !169
  %1727 = fmul float %1619, %1719, !dbg !169
  %1728 = tail call float @llvm.nvvm.round.f(float %1720) #5, !dbg !173
  %1729 = tail call float @llvm.nvvm.round.f(float %1721) #5, !dbg !173
  %1730 = tail call float @llvm.nvvm.round.f(float %1722) #5, !dbg !173
  %1731 = tail call float @llvm.nvvm.round.f(float %1723) #5, !dbg !173
  %1732 = tail call float @llvm.nvvm.round.f(float %1724) #5, !dbg !173
  %1733 = tail call float @llvm.nvvm.round.f(float %1725) #5, !dbg !173
  %1734 = tail call float @llvm.nvvm.round.f(float %1726) #5, !dbg !173
  %1735 = tail call float @llvm.nvvm.round.f(float %1727) #5, !dbg !173
  %1736 = insertelement <4 x float> poison, float %1728, i64 0, !dbg !174
  %1737 = insertelement <4 x float> %1736, float %1729, i64 1, !dbg !174
  %1738 = insertelement <4 x float> %1737, float %1730, i64 2, !dbg !174
  %1739 = insertelement <4 x float> %1738, float %1731, i64 3, !dbg !174
  %1740 = fcmp ogt <4 x float> %1739, splat (float -1.270000e+02), !dbg !174
  %1741 = fcmp uno <4 x float> %1739, zeroinitializer, !dbg !176
  %1742 = or <4 x i1> %1740, %1741, !dbg !177
  %1743 = select <4 x i1> %1742, <4 x float> %1739, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1744 = fcmp olt <4 x float> %1743, splat (float 1.270000e+02), !dbg !179
  %1745 = fcmp uno <4 x float> %1743, zeroinitializer, !dbg !181
  %1746 = or <4 x i1> %1744, %1745, !dbg !182
  %1747 = fptosi <4 x float> %1743 to <4 x i8>, !dbg !183
  %1748 = select <4 x i1> %1746, <4 x i8> %1747, <4 x i8> splat (i8 127), !dbg !184
  %1749 = insertelement <4 x float> poison, float %1732, i64 0, !dbg !174
  %1750 = insertelement <4 x float> %1749, float %1733, i64 1, !dbg !174
  %1751 = insertelement <4 x float> %1750, float %1734, i64 2, !dbg !174
  %1752 = insertelement <4 x float> %1751, float %1735, i64 3, !dbg !174
  %1753 = fcmp ogt <4 x float> %1752, splat (float -1.270000e+02), !dbg !174
  %1754 = fcmp uno <4 x float> %1752, zeroinitializer, !dbg !176
  %1755 = or <4 x i1> %1753, %1754, !dbg !177
  %1756 = select <4 x i1> %1755, <4 x float> %1752, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1757 = fcmp olt <4 x float> %1756, splat (float 1.270000e+02), !dbg !179
  %1758 = fcmp uno <4 x float> %1756, zeroinitializer, !dbg !181
  %1759 = or <4 x i1> %1757, %1758, !dbg !182
  %1760 = fptosi <4 x float> %1756 to <4 x i8>, !dbg !183
  %1761 = select <4 x i1> %1759, <4 x i8> %1760, <4 x i8> splat (i8 127), !dbg !184
  %1762 = getelementptr i8, ptr addrspace(1) %12, i64 %1693, !dbg !185
  %1763 = bitcast <4 x i8> %1748 to i32, !dbg !186
  %1764 = bitcast <4 x i8> %1761 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1763, i32 %1764, ptr addrspace(1) %1762, i1 %23) #5, !dbg !186
  %1765 = add i32 %66, 2048, !dbg !187
  %1766 = sext i32 %1765 to i64, !dbg !170
  %1767 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1766, !dbg !170
  %1768 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1767, i1 %23) #5, !dbg !171
  %1769 = extractvalue { i32, i32, i32, i32 } %1768, 0, !dbg !171
  %1770 = bitcast i32 %1769 to <2 x bfloat>, !dbg !171
  %1771 = extractvalue { i32, i32, i32, i32 } %1768, 1, !dbg !171
  %1772 = bitcast i32 %1771 to <2 x bfloat>, !dbg !171
  %1773 = extractvalue { i32, i32, i32, i32 } %1768, 2, !dbg !171
  %1774 = bitcast i32 %1773 to <2 x bfloat>, !dbg !171
  %1775 = extractvalue { i32, i32, i32, i32 } %1768, 3, !dbg !171
  %1776 = bitcast i32 %1775 to <2 x bfloat>, !dbg !171
  %1777 = extractelement <2 x bfloat> %1770, i64 0, !dbg !171
  %1778 = extractelement <2 x bfloat> %1770, i64 1, !dbg !171
  %1779 = extractelement <2 x bfloat> %1772, i64 0, !dbg !171
  %1780 = extractelement <2 x bfloat> %1772, i64 1, !dbg !171
  %1781 = extractelement <2 x bfloat> %1774, i64 0, !dbg !171
  %1782 = extractelement <2 x bfloat> %1774, i64 1, !dbg !171
  %1783 = extractelement <2 x bfloat> %1776, i64 0, !dbg !171
  %1784 = extractelement <2 x bfloat> %1776, i64 1, !dbg !171
  %1785 = fpext bfloat %1777 to float, !dbg !172
  %1786 = fpext bfloat %1778 to float, !dbg !172
  %1787 = fpext bfloat %1779 to float, !dbg !172
  %1788 = fpext bfloat %1780 to float, !dbg !172
  %1789 = fpext bfloat %1781 to float, !dbg !172
  %1790 = fpext bfloat %1782 to float, !dbg !172
  %1791 = fpext bfloat %1783 to float, !dbg !172
  %1792 = fpext bfloat %1784 to float, !dbg !172
  %1793 = fmul float %1619, %1785, !dbg !169
  %1794 = fmul float %1619, %1786, !dbg !169
  %1795 = fmul float %1619, %1787, !dbg !169
  %1796 = fmul float %1619, %1788, !dbg !169
  %1797 = fmul float %1619, %1789, !dbg !169
  %1798 = fmul float %1619, %1790, !dbg !169
  %1799 = fmul float %1619, %1791, !dbg !169
  %1800 = fmul float %1619, %1792, !dbg !169
  %1801 = tail call float @llvm.nvvm.round.f(float %1793) #5, !dbg !173
  %1802 = tail call float @llvm.nvvm.round.f(float %1794) #5, !dbg !173
  %1803 = tail call float @llvm.nvvm.round.f(float %1795) #5, !dbg !173
  %1804 = tail call float @llvm.nvvm.round.f(float %1796) #5, !dbg !173
  %1805 = tail call float @llvm.nvvm.round.f(float %1797) #5, !dbg !173
  %1806 = tail call float @llvm.nvvm.round.f(float %1798) #5, !dbg !173
  %1807 = tail call float @llvm.nvvm.round.f(float %1799) #5, !dbg !173
  %1808 = tail call float @llvm.nvvm.round.f(float %1800) #5, !dbg !173
  %1809 = insertelement <4 x float> poison, float %1801, i64 0, !dbg !174
  %1810 = insertelement <4 x float> %1809, float %1802, i64 1, !dbg !174
  %1811 = insertelement <4 x float> %1810, float %1803, i64 2, !dbg !174
  %1812 = insertelement <4 x float> %1811, float %1804, i64 3, !dbg !174
  %1813 = fcmp ogt <4 x float> %1812, splat (float -1.270000e+02), !dbg !174
  %1814 = fcmp uno <4 x float> %1812, zeroinitializer, !dbg !176
  %1815 = or <4 x i1> %1813, %1814, !dbg !177
  %1816 = select <4 x i1> %1815, <4 x float> %1812, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1817 = fcmp olt <4 x float> %1816, splat (float 1.270000e+02), !dbg !179
  %1818 = fcmp uno <4 x float> %1816, zeroinitializer, !dbg !181
  %1819 = or <4 x i1> %1817, %1818, !dbg !182
  %1820 = fptosi <4 x float> %1816 to <4 x i8>, !dbg !183
  %1821 = select <4 x i1> %1819, <4 x i8> %1820, <4 x i8> splat (i8 127), !dbg !184
  %1822 = insertelement <4 x float> poison, float %1805, i64 0, !dbg !174
  %1823 = insertelement <4 x float> %1822, float %1806, i64 1, !dbg !174
  %1824 = insertelement <4 x float> %1823, float %1807, i64 2, !dbg !174
  %1825 = insertelement <4 x float> %1824, float %1808, i64 3, !dbg !174
  %1826 = fcmp ogt <4 x float> %1825, splat (float -1.270000e+02), !dbg !174
  %1827 = fcmp uno <4 x float> %1825, zeroinitializer, !dbg !176
  %1828 = or <4 x i1> %1826, %1827, !dbg !177
  %1829 = select <4 x i1> %1828, <4 x float> %1825, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1830 = fcmp olt <4 x float> %1829, splat (float 1.270000e+02), !dbg !179
  %1831 = fcmp uno <4 x float> %1829, zeroinitializer, !dbg !181
  %1832 = or <4 x i1> %1830, %1831, !dbg !182
  %1833 = fptosi <4 x float> %1829 to <4 x i8>, !dbg !183
  %1834 = select <4 x i1> %1832, <4 x i8> %1833, <4 x i8> splat (i8 127), !dbg !184
  %1835 = getelementptr i8, ptr addrspace(1) %12, i64 %1766, !dbg !185
  %1836 = bitcast <4 x i8> %1821 to i32, !dbg !186
  %1837 = bitcast <4 x i8> %1834 to i32, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1836, i32 %1837, ptr addrspace(1) %1835, i1 %23) #5, !dbg !186
  ret void, !dbg !188
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 112, column: 50, scope: !6)
!102 = !DILocation(line: 80, column: 40, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 86, column: 115, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 87, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 50, scope: !6)
!117 = !DILocation(line: 88, column: 103, scope: !6)
!118 = !DILocation(line: 89, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 49, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !114)
!127 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !114)
!128 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !114)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !131)
!131 = !DILocation(line: 111, column: 47, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !131)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 124, column: 36, scope: !6)
!171 = !DILocation(line: 124, column: 53, scope: !6)
!172 = !DILocation(line: 124, column: 115, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 124, column: 43, scope: !6)
!188 = !DILocation(line: 118, column: 4, scope: !6)
