#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 2], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":17:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 2, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 2, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":17:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":17:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":17:0)) attributes {noinline = false} {
    %cst = arith.constant dense<512> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<10240> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<10240> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<32x1xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<10240> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c2560_i32 = arith.constant 2560 : i32 loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c2560_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c16_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c2560_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %6, %c32_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc12)
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc12)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %14 = tt.splat %9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %15 = tt.splat %9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %16 = arith.addi %14, %10 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %17 = arith.addi %15, %11 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %18 = arith.muli %8, %c32_i32 : i32 loc(#loc14)
    %19 = tt.splat %18 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %20 = tt.splat %18 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %21 = arith.addi %19, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %22 = arith.addi %20, %13 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %23 = arith.remsi %16, %cst_5 {tt.contiguity = dense<32> : tensor<1xi32>, tt.divisibility = dense<32> : tensor<1xi32>} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc16)
    %24 = arith.remsi %21, %cst_4 {tt.contiguity = dense<32> : tensor<1xi32>, tt.divisibility = dense<32> : tensor<1xi32>} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc17)
    %25 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc18)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x16xi32, #blocked2> loc(#loc18)
    %27 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %28 = tt.expand_dims %27 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc19)
    %29 = tt.expand_dims %23 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc20)
    %30 = arith.muli %29, %cst_3 : tensor<32x1xi32, #blocked2> loc(#loc21)
    %31 = tt.broadcast %30 : tensor<32x1xi32, #blocked2> -> tensor<32x16xi32, #blocked2> loc(#loc22)
    %32 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<32x16x!tt.ptr<bf16>, #blocked2> loc(#loc23)
    %33 = tt.expand_dims %24 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc24)
    %34 = arith.muli %33, %cst_2 : tensor<1x32xi32, #blocked1> loc(#loc25)
    %35 = tt.broadcast %34 : tensor<1x32xi32, #blocked1> -> tensor<16x32xi32, #blocked1> loc(#loc26)
    %36 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<16x32x!tt.ptr<bf16>, #blocked1> loc(#loc27)
    %37 = scf.for %arg3 = %c0_i32 to %c256_i32 step %c1_i32 iter_args(%arg4 = %cst_6) -> (tensor<32x32xf32, #mma>)  : i32 {
      %53 = arith.muli %arg3, %c16_i32 : i32 loc(#loc29)
      %54 = tt.splat %53 : i32 -> tensor<1x16xi32, #blocked2> loc(#loc30)
      %55 = arith.addi %26, %54 : tensor<1x16xi32, #blocked2> loc(#loc30)
      %56 = tt.splat %53 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc31)
      %57 = arith.addi %28, %56 : tensor<16x1xi32, #blocked1> loc(#loc31)
      %58 = tt.broadcast %55 : tensor<1x16xi32, #blocked2> -> tensor<32x16xi32, #blocked2> loc(#loc22)
      %59 = arith.addi %58, %31 : tensor<32x16xi32, #blocked2> loc(#loc22)
      %60 = tt.addptr %32, %59 : tensor<32x16x!tt.ptr<bf16>, #blocked2>, tensor<32x16xi32, #blocked2> loc(#loc23)
      %61 = tt.load %60 : tensor<32x16x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %62 = ttg.local_alloc %61 : (tensor<32x16xbf16, #blocked2>) -> !ttg.memdesc<32x16xbf16, #shared, #smem> loc(#loc32)
      %63 = tt.broadcast %57 : tensor<16x1xi32, #blocked1> -> tensor<16x32xi32, #blocked1> loc(#loc26)
      %64 = arith.addi %63, %35 : tensor<16x32xi32, #blocked1> loc(#loc26)
      %65 = tt.addptr %36, %64 : tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<16x32xi32, #blocked1> loc(#loc27)
      %66 = tt.load %65 : tensor<16x32x!tt.ptr<bf16>, #blocked1> loc(#loc33)
      %67 = ttg.local_alloc %66 : (tensor<16x32xbf16, #blocked1>) -> !ttg.memdesc<16x32xbf16, #shared1, #smem> loc(#loc33)
      %68 = ttg.local_load %62 : !ttg.memdesc<32x16xbf16, #shared, #smem> -> tensor<32x16xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc32)
      %69 = ttg.local_load %67 : !ttg.memdesc<16x32xbf16, #shared1, #smem> -> tensor<16x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc33)
      %70 = tt.dot %68, %69, %arg4, inputPrecision = tf32 : tensor<32x16xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<32x32xf32, #mma> loc(#loc34)
      scf.yield %70 : tensor<32x32xf32, #mma> loc(#loc35)
    } loc(#loc28)
    %38 = tt.expand_dims %17 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc36)
    %39 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc37)
    %40 = arith.cmpi slt, %38, %cst : tensor<32x1xi32, #blocked> loc(#loc38)
    %41 = arith.cmpi slt, %39, %cst_0 : tensor<1x32xi32, #blocked> loc(#loc39)
    %42 = tt.broadcast %40 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc40)
    %43 = tt.broadcast %41 : tensor<1x32xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc40)
    %44 = arith.andi %42, %43 : tensor<32x32xi1, #blocked> loc(#loc40)
    %45 = arith.muli %38, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc41)
    %46 = tt.broadcast %39 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc42)
    %47 = tt.broadcast %45 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc42)
    %48 = arith.addi %46, %47 : tensor<32x32xi32, #blocked> loc(#loc42)
    %49 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<32x32x!tt.ptr<bf16>, #blocked> loc(#loc43)
    %50 = tt.addptr %49, %48 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc43)
    %51 = arith.truncf %37 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc44)
    %52 = ttg.convert_layout %51 : tensor<32x32xbf16, #mma> -> tensor<32x32xbf16, #blocked> loc(#loc44)
    tt.store %50, %52, %44 : tensor<32x32x!tt.ptr<bf16>, #blocked> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":40:24)
#loc3 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":46:22)
#loc4 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":47:41)
#loc5 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":47:30)
#loc6 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":47:50)
#loc7 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":48:40)
#loc8 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":48:34)
#loc9 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":49:19)
#loc10 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":49:30)
#loc11 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":51:17)
#loc12 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":51:40)
#loc13 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":51:27)
#loc14 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":52:17)
#loc15 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":52:27)
#loc16 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":54:57)
#loc17 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":58:57)
#loc18 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":66:30)
#loc19 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":67:30)
#loc20 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":69:25)
#loc21 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":71:30)
#loc22 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":71:25)
#loc23 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":72:25)
#loc24 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":75:25)
#loc25 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":77:55)
#loc26 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":77:50)
#loc27 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":77:25)
#loc28 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":64:26)
#loc29 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":66:50)
#loc30 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":66:42)
#loc31 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":67:42)
#loc32 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":72:20)
#loc33 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":77:20)
#loc34 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":78:25)
#loc35 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":78:8)
#loc36 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":83:15)
#loc37 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":84:15)
#loc38 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":85:20)
#loc39 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":85:34)
#loc40 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":85:26)
#loc41 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":88:27)
#loc42 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":88:21)
#loc43 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":89:25)
#loc44 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":89:67)
#loc45 = loc("/tmp/torchinductor_root/3b/c3b3xhar7xz2xdijaaw5ja5w5leg7so3rj23knltqii3mtgrd6wj.py":89:4)
