; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = lshr i32 %15, 1, !dbg !19
  %20 = and i32 %19, 55, !dbg !19
  %21 = or disjoint i32 %20, %18, !dbg !19
  %22 = shl i32 %15, 3, !dbg !19
  %23 = and i32 %22, 8, !dbg !19
  %24 = or disjoint i32 %14, %21, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = or disjoint i32 %25, %21, !dbg !22
  %27 = srem i32 %24, 512, !dbg !23
  %28 = srem i32 %26, 512, !dbg !24
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %30 = shl nsw i32 %27, 12, !dbg !26
  %31 = shl i32 %29, 6, !dbg !27
  %32 = or disjoint i32 %23, %31, !dbg !28
  %33 = add i32 %32, %30, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = shl nsw i32 %28, 12, !dbg !31
  %37 = add i32 %32, %36, !dbg !32
  %38 = sext i32 %37 to i64, !dbg !33
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !33
  %40 = xor i32 %23, %16, !dbg !34
  %41 = shl nuw nsw i32 %21, 4, !dbg !34
  %42 = or disjoint i32 %41, %40, !dbg !34
  %43 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %42, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %43, ptr addrspace(1) %35, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %44 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %42, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %44, ptr addrspace(1) %39, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %invariant.op = or disjoint i32 %16, 32, !dbg !36
  %45 = shl i32 %15, 1
  %46 = and i32 %45, 8
  %47 = and i32 %15, 7
  %48 = and i32 %15, 15
  %49 = xor i32 %46, %18
  %50 = lshr i32 %15, 2
  %51 = and i32 %50, 16
  %52 = or disjoint i32 %51, %48
  %53 = shl nuw nsw i32 %52, 4
  %54 = or disjoint i32 %53, %49
  %.reass = or disjoint i32 %47, %invariant.op
  %55 = or disjoint i32 %.reass, %51
  %56 = shl nuw nsw i32 %55, 4
  %57 = or disjoint i32 %56, %49
  %58 = xor i32 %46, %16
  %59 = lshr i32 %15, 2
  %60 = and i32 %59, 8
  %61 = or disjoint i32 %60, %47
  %62 = shl nuw nsw i32 %61, 4
  %63 = or disjoint i32 %62, %58
  %64 = or disjoint i32 %63, 256
  %65 = or disjoint i32 %63, 512
  %66 = or disjoint i32 %63, 768
  br label %67, !dbg !36

67:                                               ; preds = %4, %67
  %68 = phi i32 [ -1, %4 ], [ %105, %67 ]
  %.pn34112 = phi ptr addrspace(1) [ %39, %4 ], [ %184, %67 ]
  %.pn18111 = phi ptr addrspace(1) [ %35, %4 ], [ %183, %67 ]
  %69 = phi float [ 0.000000e+00, %4 ], [ %144, %67 ]
  %70 = phi float [ 0.000000e+00, %4 ], [ %145, %67 ]
  %71 = phi float [ 0.000000e+00, %4 ], [ %146, %67 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %147, %67 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %149, %67 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %150, %67 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %151, %67 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %152, %67 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %154, %67 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %155, %67 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %156, %67 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %157, %67 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %159, %67 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %160, %67 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %161, %67 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %162, %67 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %164, %67 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %165, %67 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %166, %67 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %167, %67 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %169, %67 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %170, %67 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %171, %67 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %172, %67 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %174, %67 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %175, %67 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %176, %67 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %177, %67 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %179, %67 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %180, %67 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %181, %67 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %182, %67 ]
  %101 = phi i32 [ 0, %4 ], [ %186, %67 ]
  %102 = icmp samesign ult i32 %101, 48, !dbg !36
  %103 = add i32 %68, 1, !dbg !36
  %104 = icmp ugt i32 %68, 2147483646, !dbg !36
  %105 = select i1 %104, i32 %103, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %106 = shl i32 %105, 10, !dbg !34
  %107 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %106, !dbg !34
  %108 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %107, i32 %54, !dbg !34
  %109 = ptrtoint ptr addrspace(3) %108 to i32, !dbg !34
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %109) #1, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !34
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %107, i32 %57, !dbg !34
  %116 = ptrtoint ptr addrspace(3) %115 to i32, !dbg !34
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %116) #1, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !34
  %122 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %106, !dbg !35
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i32 %63, !dbg !35
  %124 = ptrtoint ptr addrspace(3) %123 to i32, !dbg !35
  %125 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %124) #1, !dbg !35
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !35
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !35
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i32 %64, !dbg !35
  %129 = ptrtoint ptr addrspace(3) %128 to i32, !dbg !35
  %130 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %129) #1, !dbg !35
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !35
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !35
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i32 %65, !dbg !35
  %134 = ptrtoint ptr addrspace(3) %133 to i32, !dbg !35
  %135 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %134) #1, !dbg !35
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !35
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !35
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %122, i32 %66, !dbg !35
  %139 = ptrtoint ptr addrspace(3) %138 to i32, !dbg !35
  %140 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %139) #1, !dbg !35
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !35
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !35
  %143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %69, float %70, float %71, float %72, i32 %111, i32 %112, i32 %113, i32 %114, i32 %126, i32 %127) #1, !dbg !37
  %144 = extractvalue { float, float, float, float } %143, 0, !dbg !37
  %145 = extractvalue { float, float, float, float } %143, 1, !dbg !37
  %146 = extractvalue { float, float, float, float } %143, 2, !dbg !37
  %147 = extractvalue { float, float, float, float } %143, 3, !dbg !37
  %148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %73, float %74, float %75, float %76, i32 %111, i32 %112, i32 %113, i32 %114, i32 %131, i32 %132) #1, !dbg !37
  %149 = extractvalue { float, float, float, float } %148, 0, !dbg !37
  %150 = extractvalue { float, float, float, float } %148, 1, !dbg !37
  %151 = extractvalue { float, float, float, float } %148, 2, !dbg !37
  %152 = extractvalue { float, float, float, float } %148, 3, !dbg !37
  %153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %77, float %78, float %79, float %80, i32 %111, i32 %112, i32 %113, i32 %114, i32 %136, i32 %137) #1, !dbg !37
  %154 = extractvalue { float, float, float, float } %153, 0, !dbg !37
  %155 = extractvalue { float, float, float, float } %153, 1, !dbg !37
  %156 = extractvalue { float, float, float, float } %153, 2, !dbg !37
  %157 = extractvalue { float, float, float, float } %153, 3, !dbg !37
  %158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %81, float %82, float %83, float %84, i32 %111, i32 %112, i32 %113, i32 %114, i32 %141, i32 %142) #1, !dbg !37
  %159 = extractvalue { float, float, float, float } %158, 0, !dbg !37
  %160 = extractvalue { float, float, float, float } %158, 1, !dbg !37
  %161 = extractvalue { float, float, float, float } %158, 2, !dbg !37
  %162 = extractvalue { float, float, float, float } %158, 3, !dbg !37
  %163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %85, float %86, float %87, float %88, i32 %118, i32 %119, i32 %120, i32 %121, i32 %126, i32 %127) #1, !dbg !37
  %164 = extractvalue { float, float, float, float } %163, 0, !dbg !37
  %165 = extractvalue { float, float, float, float } %163, 1, !dbg !37
  %166 = extractvalue { float, float, float, float } %163, 2, !dbg !37
  %167 = extractvalue { float, float, float, float } %163, 3, !dbg !37
  %168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %89, float %90, float %91, float %92, i32 %118, i32 %119, i32 %120, i32 %121, i32 %131, i32 %132) #1, !dbg !37
  %169 = extractvalue { float, float, float, float } %168, 0, !dbg !37
  %170 = extractvalue { float, float, float, float } %168, 1, !dbg !37
  %171 = extractvalue { float, float, float, float } %168, 2, !dbg !37
  %172 = extractvalue { float, float, float, float } %168, 3, !dbg !37
  %173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %93, float %94, float %95, float %96, i32 %118, i32 %119, i32 %120, i32 %121, i32 %136, i32 %137) #1, !dbg !37
  %174 = extractvalue { float, float, float, float } %173, 0, !dbg !37
  %175 = extractvalue { float, float, float, float } %173, 1, !dbg !37
  %176 = extractvalue { float, float, float, float } %173, 2, !dbg !37
  %177 = extractvalue { float, float, float, float } %173, 3, !dbg !37
  %178 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %97, float %98, float %99, float %100, i32 %118, i32 %119, i32 %120, i32 %121, i32 %141, i32 %142) #1, !dbg !37
  %179 = extractvalue { float, float, float, float } %178, 0, !dbg !37
  %180 = extractvalue { float, float, float, float } %178, 1, !dbg !37
  %181 = extractvalue { float, float, float, float } %178, 2, !dbg !37
  %182 = extractvalue { float, float, float, float } %178, 3, !dbg !37
  %183 = getelementptr i8, ptr addrspace(1) %.pn18111, i64 32, !dbg !38
  %184 = getelementptr i8, ptr addrspace(1) %.pn34112, i64 32, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %185 = select i1 %102, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %43, ptr addrspace(1) %183, i32 %185) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %44, ptr addrspace(1) %184, i32 %185) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %186 = add nuw nsw i32 %101, 16, !dbg !36
  br i1 %102, label %67, label %187, !dbg !36

187:                                              ; preds = %67
  %188 = and i32 %22, 56, !dbg !19
  %189 = or disjoint i32 %25, %188, !dbg !22
  %190 = lshr i32 %15, 3, !dbg !19
  %191 = and i32 %190, 15, !dbg !19
  %192 = or disjoint i32 %191, %14, !dbg !20
  %193 = or disjoint i32 %192, 48, !dbg !20
  %194 = or disjoint i32 %192, 32, !dbg !20
  %195 = or disjoint i32 %192, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %196 = icmp slt i32 %192, 512, !dbg !40
  %197 = icmp slt i32 %195, 512, !dbg !40
  %198 = icmp slt i32 %194, 512, !dbg !40
  %199 = icmp slt i32 %193, 512, !dbg !40
  %200 = icmp slt i32 %189, 512, !dbg !41
  %201 = and i1 %196, %200, !dbg !42
  %202 = and i1 %197, %200, !dbg !42
  %203 = and i1 %198, %200, !dbg !42
  %204 = and i1 %199, %200, !dbg !42
  %205 = shl i32 %192, 9, !dbg !43
  %206 = shl i32 %195, 9, !dbg !43
  %207 = shl i32 %194, 9, !dbg !43
  %208 = shl i32 %193, 9, !dbg !43
  %209 = shl i32 %29, 18, !dbg !44
  %210 = add i32 %189, %209, !dbg !45
  %211 = add i32 %210, %205, !dbg !46
  %212 = add i32 %210, %206, !dbg !46
  %213 = add i32 %210, %207, !dbg !46
  %214 = add i32 %210, %208, !dbg !46
  %215 = sext i32 %211 to i64, !dbg !47
  %216 = getelementptr bfloat, ptr addrspace(1) %2, i64 %215, !dbg !47
  %217 = sext i32 %212 to i64, !dbg !47
  %218 = getelementptr bfloat, ptr addrspace(1) %2, i64 %217, !dbg !47
  %219 = sext i32 %213 to i64, !dbg !47
  %220 = getelementptr bfloat, ptr addrspace(1) %2, i64 %219, !dbg !47
  %221 = sext i32 %214 to i64, !dbg !47
  %222 = getelementptr bfloat, ptr addrspace(1) %2, i64 %221, !dbg !47
  %223 = fptrunc float %144 to bfloat, !dbg !48
  %224 = fptrunc float %145 to bfloat, !dbg !48
  %225 = fptrunc float %146 to bfloat, !dbg !48
  %226 = fptrunc float %147 to bfloat, !dbg !48
  %227 = fptrunc float %149 to bfloat, !dbg !48
  %228 = fptrunc float %150 to bfloat, !dbg !48
  %229 = fptrunc float %151 to bfloat, !dbg !48
  %230 = fptrunc float %152 to bfloat, !dbg !48
  %231 = fptrunc float %154 to bfloat, !dbg !48
  %232 = fptrunc float %155 to bfloat, !dbg !48
  %233 = fptrunc float %156 to bfloat, !dbg !48
  %234 = fptrunc float %157 to bfloat, !dbg !48
  %235 = fptrunc float %159 to bfloat, !dbg !48
  %236 = fptrunc float %160 to bfloat, !dbg !48
  %237 = fptrunc float %161 to bfloat, !dbg !48
  %238 = fptrunc float %162 to bfloat, !dbg !48
  %239 = fptrunc float %164 to bfloat, !dbg !48
  %240 = fptrunc float %165 to bfloat, !dbg !48
  %241 = fptrunc float %166 to bfloat, !dbg !48
  %242 = fptrunc float %167 to bfloat, !dbg !48
  %243 = fptrunc float %169 to bfloat, !dbg !48
  %244 = fptrunc float %170 to bfloat, !dbg !48
  %245 = fptrunc float %171 to bfloat, !dbg !48
  %246 = fptrunc float %172 to bfloat, !dbg !48
  %247 = fptrunc float %174 to bfloat, !dbg !48
  %248 = fptrunc float %175 to bfloat, !dbg !48
  %249 = fptrunc float %176 to bfloat, !dbg !48
  %250 = fptrunc float %177 to bfloat, !dbg !48
  %251 = fptrunc float %179 to bfloat, !dbg !48
  %252 = fptrunc float %180 to bfloat, !dbg !48
  %253 = fptrunc float %181 to bfloat, !dbg !48
  %254 = fptrunc float %182 to bfloat, !dbg !48
  %255 = and i32 %45, 6, !dbg !48
  %256 = shl i32 %15, 4, !dbg !48
  %257 = and i32 %256, 192, !dbg !48
  %258 = or disjoint i32 %257, %255, !dbg !48
  %259 = shl i32 %15, 4, !dbg !48
  %260 = and i32 %259, 1280, !dbg !48
  %261 = or disjoint i32 %260, %258, !dbg !48
  %262 = or disjoint i32 %261, %60, !dbg !48
  %263 = and i32 %22, 1016, !dbg !48
  %264 = lshr i32 %261, 3, !dbg !48
  %265 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %264, !dbg !48
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %265, i32 %262, !dbg !48
  %267 = bitcast bfloat %223 to i16, !dbg !48
  %268 = bitcast bfloat %224 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %266, i16 %267, i16 %268, i1 true) #1, !dbg !48
  %269 = or disjoint i32 %262, 512, !dbg !48
  %270 = lshr i32 %269, 3, !dbg !48
  %271 = and i32 %270, 536870904, !dbg !48
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %271, !dbg !48
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %272, i32 %269, !dbg !48
  %274 = bitcast bfloat %225 to i16, !dbg !48
  %275 = bitcast bfloat %226 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %273, i16 %274, i16 %275, i1 true) #1, !dbg !48
  %276 = or disjoint i32 %262, 16, !dbg !48
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %265, i32 %276, !dbg !48
  %278 = bitcast bfloat %227 to i16, !dbg !48
  %279 = bitcast bfloat %228 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %277, i16 %278, i16 %279, i1 true) #1, !dbg !48
  %280 = or disjoint i32 %262, 528, !dbg !48
  %281 = lshr i32 %280, 3, !dbg !48
  %282 = and i32 %281, 536870904, !dbg !48
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %282, !dbg !48
  %284 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %283, i32 %280, !dbg !48
  %285 = bitcast bfloat %229 to i16, !dbg !48
  %286 = bitcast bfloat %230 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %284, i16 %285, i16 %286, i1 true) #1, !dbg !48
  %287 = or disjoint i32 %262, 32, !dbg !48
  %288 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %265, i32 %287, !dbg !48
  %289 = bitcast bfloat %231 to i16, !dbg !48
  %290 = bitcast bfloat %232 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %288, i16 %289, i16 %290, i1 true) #1, !dbg !48
  %291 = or disjoint i32 %262, 544, !dbg !48
  %292 = lshr i32 %291, 3, !dbg !48
  %293 = and i32 %292, 536870904, !dbg !48
  %294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %293, !dbg !48
  %295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %294, i32 %291, !dbg !48
  %296 = bitcast bfloat %233 to i16, !dbg !48
  %297 = bitcast bfloat %234 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %295, i16 %296, i16 %297, i1 true) #1, !dbg !48
  %298 = or disjoint i32 %262, 48, !dbg !48
  %299 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %265, i32 %298, !dbg !48
  %300 = bitcast bfloat %235 to i16, !dbg !48
  %301 = bitcast bfloat %236 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %299, i16 %300, i16 %301, i1 true) #1, !dbg !48
  %302 = or disjoint i32 %262, 560, !dbg !48
  %303 = lshr i32 %302, 3, !dbg !48
  %304 = and i32 %303, 536870904, !dbg !48
  %305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %304, !dbg !48
  %306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %305, i32 %302, !dbg !48
  %307 = bitcast bfloat %237 to i16, !dbg !48
  %308 = bitcast bfloat %238 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %306, i16 %307, i16 %308, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %309 = and i32 %15, 120, !dbg !48
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %309, !dbg !48
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %310, i32 %263, !dbg !48
  %312 = load <4 x i32>, ptr addrspace(3) %311, align 16, !dbg !48
  %313 = or disjoint i32 %263, 1024, !dbg !48
  %314 = lshr exact i32 %313, 3, !dbg !48
  %315 = and i32 %314, 248, !dbg !48
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %315, !dbg !48
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %316, i32 %313, !dbg !48
  %318 = load <4 x i32>, ptr addrspace(3) %317, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %319 = bitcast bfloat %239 to i16, !dbg !48
  %320 = bitcast bfloat %240 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %266, i16 %319, i16 %320, i1 true) #1, !dbg !48
  %321 = bitcast bfloat %241 to i16, !dbg !48
  %322 = bitcast bfloat %242 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %273, i16 %321, i16 %322, i1 true) #1, !dbg !48
  %323 = bitcast bfloat %243 to i16, !dbg !48
  %324 = bitcast bfloat %244 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %277, i16 %323, i16 %324, i1 true) #1, !dbg !48
  %325 = bitcast bfloat %245 to i16, !dbg !48
  %326 = bitcast bfloat %246 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %284, i16 %325, i16 %326, i1 true) #1, !dbg !48
  %327 = bitcast bfloat %247 to i16, !dbg !48
  %328 = bitcast bfloat %248 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %288, i16 %327, i16 %328, i1 true) #1, !dbg !48
  %329 = bitcast bfloat %249 to i16, !dbg !48
  %330 = bitcast bfloat %250 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %295, i16 %329, i16 %330, i1 true) #1, !dbg !48
  %331 = bitcast bfloat %251 to i16, !dbg !48
  %332 = bitcast bfloat %252 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %299, i16 %331, i16 %332, i1 true) #1, !dbg !48
  %333 = bitcast bfloat %253 to i16, !dbg !48
  %334 = bitcast bfloat %254 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %306, i16 %333, i16 %334, i1 true) #1, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %335 = load <4 x i32>, ptr addrspace(3) %311, align 16, !dbg !48
  %336 = load <4 x i32>, ptr addrspace(3) %317, align 16, !dbg !48
  %.extract = extractelement <4 x i32> %312, i64 0, !dbg !48
  %.extract82 = extractelement <4 x i32> %312, i64 1, !dbg !48
  %.extract84 = extractelement <4 x i32> %312, i64 2, !dbg !48
  %.extract86 = extractelement <4 x i32> %312, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract82, i32 %.extract84, i32 %.extract86, ptr addrspace(1) %216, i1 %201) #1, !dbg !48
  %.extract88 = extractelement <4 x i32> %318, i64 0, !dbg !48
  %.extract90 = extractelement <4 x i32> %318, i64 1, !dbg !48
  %.extract92 = extractelement <4 x i32> %318, i64 2, !dbg !48
  %.extract94 = extractelement <4 x i32> %318, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract88, i32 %.extract90, i32 %.extract92, i32 %.extract94, ptr addrspace(1) %218, i1 %202) #1, !dbg !48
  %.extract96 = extractelement <4 x i32> %335, i64 0, !dbg !48
  %.extract98 = extractelement <4 x i32> %335, i64 1, !dbg !48
  %.extract100 = extractelement <4 x i32> %335, i64 2, !dbg !48
  %.extract102 = extractelement <4 x i32> %335, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract96, i32 %.extract98, i32 %.extract100, i32 %.extract102, ptr addrspace(1) %220, i1 %203) #1, !dbg !48
  %.extract104 = extractelement <4 x i32> %336, i64 0, !dbg !48
  %.extract106 = extractelement <4 x i32> %336, i64 1, !dbg !48
  %.extract108 = extractelement <4 x i32> %336, i64 2, !dbg !48
  %.extract110 = extractelement <4 x i32> %336, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract104, i32 %.extract106, i32 %.extract108, i32 %.extract110, ptr addrspace(1) %222, i1 %204) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csxdary65h2z473tk67yitgglzcgglb6ipizbqm7rc2flysq6m4f.py", directory: "/tmp/torchinductor_root/sx")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 70, column: 25, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 78, column: 13, scope: !6)
!39 = !DILocation(line: 79, column: 13, scope: !6)
!40 = !DILocation(line: 87, column: 20, scope: !6)
!41 = !DILocation(line: 87, column: 34, scope: !6)
!42 = !DILocation(line: 87, column: 26, scope: !6)
!43 = !DILocation(line: 90, column: 25, scope: !6)
!44 = !DILocation(line: 90, column: 40, scope: !6)
!45 = !DILocation(line: 90, column: 21, scope: !6)
!46 = !DILocation(line: 90, column: 33, scope: !6)
!47 = !DILocation(line: 91, column: 25, scope: !6)
!48 = !DILocation(line: 91, column: 67, scope: !6)
!49 = !DILocation(line: 91, column: 4, scope: !6)
