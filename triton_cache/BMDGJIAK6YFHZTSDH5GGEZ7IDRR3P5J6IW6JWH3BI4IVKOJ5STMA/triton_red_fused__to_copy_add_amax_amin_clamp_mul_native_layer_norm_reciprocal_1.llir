; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 5, !dbg !11
  %20 = and i32 %18, 256, !dbg !11
  %.lobit = lshr exact i32 %20, 8, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %17, !dbg !12
  %23 = icmp slt i32 %17, 3600, !dbg !13
  %24 = icmp slt i32 %22, 3600, !dbg !13
  %25 = shl i32 %18, 3, !dbg !14
  %26 = and i32 %25, 4088, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = shl i32 %18, 4, !dbg !14
  %29 = and i32 %28, 4080, !dbg !14
  %30 = or disjoint i32 %29, 8, !dbg !14
  %31 = icmp samesign ult i32 %26, 3072, !dbg !15
  %32 = icmp samesign ult i32 %29, 3072, !dbg !15
  %33 = mul i32 %22, 3072, !dbg !16
  %34 = add i32 %33, %29, !dbg !17
  %35 = add i32 %30, %33, !dbg !17
  %36 = sext i32 %34 to i64, !dbg !18
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %35 to i64, !dbg !18
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = and i1 %23, %31, !dbg !19
  %41 = and i1 %32, %24, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %41) #5, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !20
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !20
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !20
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !20
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !20
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !20
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !20
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !20
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !20
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %41) #5, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !20
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !20
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !20
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !20
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !20
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !20
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !20
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !20
  %72 = extractelement <2 x bfloat> %65, i64 0, !dbg !20
  %73 = extractelement <2 x bfloat> %65, i64 1, !dbg !20
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !20
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !20
  %76 = fpext bfloat %51 to float, !dbg !21
  %77 = fpext bfloat %52 to float, !dbg !21
  %78 = fpext bfloat %53 to float, !dbg !21
  %79 = fpext bfloat %54 to float, !dbg !21
  %80 = fpext bfloat %55 to float, !dbg !21
  %81 = fpext bfloat %56 to float, !dbg !21
  %82 = fpext bfloat %57 to float, !dbg !21
  %83 = fpext bfloat %58 to float, !dbg !21
  %84 = fpext bfloat %68 to float, !dbg !21
  %85 = fpext bfloat %69 to float, !dbg !21
  %86 = fpext bfloat %70 to float, !dbg !21
  %87 = fpext bfloat %71 to float, !dbg !21
  %88 = fpext bfloat %72 to float, !dbg !21
  %89 = fpext bfloat %73 to float, !dbg !21
  %90 = fpext bfloat %74 to float, !dbg !21
  %91 = fpext bfloat %75 to float, !dbg !21
  %92 = select i1 %41, float %76, float 0.000000e+00, !dbg !22
  %93 = select i1 %41, float %77, float 0.000000e+00, !dbg !22
  %94 = select i1 %41, float %78, float 0.000000e+00, !dbg !22
  %95 = select i1 %41, float %79, float 0.000000e+00, !dbg !22
  %96 = select i1 %41, float %80, float 0.000000e+00, !dbg !22
  %97 = select i1 %41, float %81, float 0.000000e+00, !dbg !22
  %98 = select i1 %41, float %82, float 0.000000e+00, !dbg !22
  %99 = select i1 %41, float %83, float 0.000000e+00, !dbg !22
  %100 = select i1 %41, float %84, float 0.000000e+00, !dbg !22
  %101 = select i1 %41, float %85, float 0.000000e+00, !dbg !22
  %102 = select i1 %41, float %86, float 0.000000e+00, !dbg !22
  %103 = select i1 %41, float %87, float 0.000000e+00, !dbg !22
  %104 = select i1 %41, float %88, float 0.000000e+00, !dbg !22
  %105 = select i1 %41, float %89, float 0.000000e+00, !dbg !22
  %106 = select i1 %41, float %90, float 0.000000e+00, !dbg !22
  %107 = select i1 %41, float %91, float 0.000000e+00, !dbg !22
  %108 = select i1 %41, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %109 = fsub float %93, %92, !dbg !24
  %110 = select i1 %41, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !30
  %112 = tail call float @llvm.nvvm.div.full(float %108, float %110), !dbg !31
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !32
  %114 = fmul float %113, %109, !dbg !33
  %115 = fadd float %92, %114, !dbg !34
  %116 = fmul float %109, %109, !dbg !35
  %117 = fmul float %108, %116, !dbg !36
  %118 = fmul float %113, %117, !dbg !37
  %119 = fadd float %118, 0.000000e+00, !dbg !38
  %120 = fsub float %94, %115, !dbg !24
  %121 = select i1 %41, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %122 = fcmp oeq float %121, 0.000000e+00, !dbg !30
  %123 = tail call float @llvm.nvvm.div.full(float %108, float %121), !dbg !31
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !32
  %125 = fmul float %124, %120, !dbg !33
  %126 = fadd float %115, %125, !dbg !34
  %127 = fmul float %120, %120, !dbg !35
  %128 = fmul float %110, %127, !dbg !36
  %129 = fmul float %124, %128, !dbg !37
  %130 = fadd float %119, %129, !dbg !38
  %131 = fsub float %95, %126, !dbg !24
  %132 = select i1 %41, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !30
  %134 = tail call float @llvm.nvvm.div.full(float %108, float %132), !dbg !31
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !32
  %136 = fmul float %135, %131, !dbg !33
  %137 = fadd float %126, %136, !dbg !34
  %138 = fmul float %131, %131, !dbg !35
  %139 = fmul float %121, %138, !dbg !36
  %140 = fmul float %135, %139, !dbg !37
  %141 = fadd float %130, %140, !dbg !38
  %142 = fsub float %96, %137, !dbg !24
  %143 = select i1 %41, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !30
  %145 = tail call float @llvm.nvvm.div.full(float %108, float %143), !dbg !31
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !32
  %147 = fmul float %146, %142, !dbg !33
  %148 = fadd float %137, %147, !dbg !34
  %149 = fmul float %142, %142, !dbg !35
  %150 = fmul float %132, %149, !dbg !36
  %151 = fmul float %146, %150, !dbg !37
  %152 = fadd float %141, %151, !dbg !38
  %153 = fsub float %97, %148, !dbg !24
  %154 = select i1 %41, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !30
  %156 = tail call float @llvm.nvvm.div.full(float %108, float %154), !dbg !31
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !32
  %158 = fmul float %157, %153, !dbg !33
  %159 = fadd float %148, %158, !dbg !34
  %160 = fmul float %153, %153, !dbg !35
  %161 = fmul float %143, %160, !dbg !36
  %162 = fmul float %157, %161, !dbg !37
  %163 = fadd float %152, %162, !dbg !38
  %164 = fsub float %98, %159, !dbg !24
  %165 = select i1 %41, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !30
  %167 = tail call float @llvm.nvvm.div.full(float %108, float %165), !dbg !31
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !32
  %169 = fmul float %168, %164, !dbg !33
  %170 = fadd float %159, %169, !dbg !34
  %171 = fmul float %164, %164, !dbg !35
  %172 = fmul float %154, %171, !dbg !36
  %173 = fmul float %168, %172, !dbg !37
  %174 = fadd float %163, %173, !dbg !38
  %175 = fsub float %99, %170, !dbg !24
  %176 = select i1 %41, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !30
  %178 = tail call float @llvm.nvvm.div.full(float %108, float %176), !dbg !31
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !32
  %180 = fmul float %179, %175, !dbg !33
  %181 = fadd float %170, %180, !dbg !34
  %182 = fmul float %175, %175, !dbg !35
  %183 = fmul float %165, %182, !dbg !36
  %184 = fmul float %179, %183, !dbg !37
  %185 = fadd float %174, %184, !dbg !38
  %186 = fsub float %100, %181, !dbg !24
  %187 = select i1 %41, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !30
  %189 = tail call float @llvm.nvvm.div.full(float %108, float %187), !dbg !31
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !32
  %191 = fmul float %190, %186, !dbg !33
  %192 = fadd float %181, %191, !dbg !34
  %193 = fadd float %185, 0.000000e+00, !dbg !39
  %194 = fmul float %186, %186, !dbg !35
  %195 = fmul float %176, %194, !dbg !36
  %196 = fmul float %190, %195, !dbg !37
  %197 = fadd float %193, %196, !dbg !38
  %198 = fsub float %101, %192, !dbg !24
  %199 = select i1 %41, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !30
  %201 = tail call float @llvm.nvvm.div.full(float %108, float %199), !dbg !31
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !32
  %203 = fmul float %202, %198, !dbg !33
  %204 = fadd float %192, %203, !dbg !34
  %205 = fmul float %198, %198, !dbg !35
  %206 = fmul float %187, %205, !dbg !36
  %207 = fmul float %202, %206, !dbg !37
  %208 = fadd float %197, %207, !dbg !38
  %209 = fsub float %102, %204, !dbg !24
  %210 = select i1 %41, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !30
  %212 = tail call float @llvm.nvvm.div.full(float %108, float %210), !dbg !31
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !32
  %214 = fmul float %213, %209, !dbg !33
  %215 = fadd float %204, %214, !dbg !34
  %216 = fmul float %209, %209, !dbg !35
  %217 = fmul float %199, %216, !dbg !36
  %218 = fmul float %213, %217, !dbg !37
  %219 = fadd float %208, %218, !dbg !38
  %220 = fsub float %103, %215, !dbg !24
  %221 = select i1 %41, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !30
  %223 = tail call float @llvm.nvvm.div.full(float %108, float %221), !dbg !31
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !32
  %225 = fmul float %224, %220, !dbg !33
  %226 = fadd float %215, %225, !dbg !34
  %227 = fmul float %220, %220, !dbg !35
  %228 = fmul float %210, %227, !dbg !36
  %229 = fmul float %224, %228, !dbg !37
  %230 = fadd float %219, %229, !dbg !38
  %231 = fsub float %104, %226, !dbg !24
  %232 = select i1 %41, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !30
  %234 = tail call float @llvm.nvvm.div.full(float %108, float %232), !dbg !31
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !32
  %236 = fmul float %235, %231, !dbg !33
  %237 = fadd float %226, %236, !dbg !34
  %238 = fmul float %231, %231, !dbg !35
  %239 = fmul float %221, %238, !dbg !36
  %240 = fmul float %235, %239, !dbg !37
  %241 = fadd float %230, %240, !dbg !38
  %242 = fsub float %105, %237, !dbg !24
  %243 = select i1 %41, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !30
  %245 = tail call float @llvm.nvvm.div.full(float %108, float %243), !dbg !31
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !32
  %247 = fmul float %246, %242, !dbg !33
  %248 = fadd float %237, %247, !dbg !34
  %249 = fmul float %242, %242, !dbg !35
  %250 = fmul float %232, %249, !dbg !36
  %251 = fmul float %246, %250, !dbg !37
  %252 = fadd float %241, %251, !dbg !38
  %253 = fsub float %106, %248, !dbg !24
  %254 = select i1 %41, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !30
  %256 = tail call float @llvm.nvvm.div.full(float %108, float %254), !dbg !31
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !32
  %258 = fmul float %257, %253, !dbg !33
  %259 = fadd float %248, %258, !dbg !34
  %260 = fadd float %252, 0.000000e+00, !dbg !39
  %261 = fmul float %253, %253, !dbg !35
  %262 = fmul float %243, %261, !dbg !36
  %263 = fmul float %257, %262, !dbg !37
  %264 = fadd float %260, %263, !dbg !38
  %265 = fsub float %107, %259, !dbg !24
  %266 = select i1 %41, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !30
  %268 = tail call float @llvm.nvvm.div.full(float %108, float %266), !dbg !31
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !32
  %270 = fmul float %269, %265, !dbg !33
  %271 = fadd float %259, %270, !dbg !34
  %272 = fmul float %265, %265, !dbg !35
  %273 = fmul float %254, %272, !dbg !36
  %274 = fmul float %269, %273, !dbg !37
  %275 = fadd float %264, %274, !dbg !38
  %276 = bitcast float %271 to i32, !dbg !40
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !40
  %278 = bitcast i32 %277 to float, !dbg !40
  %279 = bitcast float %275 to i32, !dbg !40
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = bitcast float %266 to i32, !dbg !40
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !40
  %284 = bitcast i32 %283 to float, !dbg !40
  %285 = fsub float %278, %271, !dbg !24
  %286 = fadd float %266, %284, !dbg !29
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !30
  %288 = tail call float @llvm.nvvm.div.full(float %284, float %286), !dbg !31
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !32
  %290 = fmul float %289, %285, !dbg !33
  %291 = fadd float %271, %290, !dbg !34
  %292 = fadd float %275, %281, !dbg !39
  %293 = fmul float %285, %285, !dbg !35
  %294 = fmul float %266, %293, !dbg !36
  %295 = fmul float %289, %294, !dbg !37
  %296 = fadd float %292, %295, !dbg !38
  %297 = bitcast float %291 to i32, !dbg !40
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = bitcast float %296 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = bitcast float %286 to i32, !dbg !40
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = fsub float %299, %291, !dbg !24
  %307 = fadd float %286, %305, !dbg !29
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !30
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !31
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !32
  %311 = fmul float %310, %306, !dbg !33
  %312 = fadd float %291, %311, !dbg !34
  %313 = fadd float %296, %302, !dbg !39
  %314 = fmul float %306, %306, !dbg !35
  %315 = fmul float %286, %314, !dbg !36
  %316 = fmul float %310, %315, !dbg !37
  %317 = fadd float %313, %316, !dbg !38
  %318 = bitcast float %312 to i32, !dbg !40
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !40
  %320 = bitcast i32 %319 to float, !dbg !40
  %321 = bitcast float %317 to i32, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = bitcast float %307 to i32, !dbg !40
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !40
  %326 = bitcast i32 %325 to float, !dbg !40
  %327 = fsub float %320, %312, !dbg !24
  %328 = fadd float %307, %326, !dbg !29
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !30
  %330 = tail call float @llvm.nvvm.div.full(float %326, float %328), !dbg !31
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !32
  %332 = fmul float %331, %327, !dbg !33
  %333 = fadd float %312, %332, !dbg !34
  %334 = fadd float %317, %323, !dbg !39
  %335 = fmul float %327, %327, !dbg !35
  %336 = fmul float %307, %335, !dbg !36
  %337 = fmul float %331, %336, !dbg !37
  %338 = fadd float %334, %337, !dbg !38
  %339 = bitcast float %333 to i32, !dbg !40
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !40
  %341 = bitcast i32 %340 to float, !dbg !40
  %342 = bitcast float %338 to i32, !dbg !40
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !40
  %344 = bitcast i32 %343 to float, !dbg !40
  %345 = bitcast float %328 to i32, !dbg !40
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !40
  %347 = bitcast i32 %346 to float, !dbg !40
  %348 = fsub float %341, %333, !dbg !24
  %349 = fadd float %328, %347, !dbg !29
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !30
  %351 = tail call float @llvm.nvvm.div.full(float %347, float %349), !dbg !31
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !32
  %353 = fmul float %352, %348, !dbg !33
  %354 = fadd float %333, %353, !dbg !34
  %355 = fadd float %338, %344, !dbg !39
  %356 = fmul float %348, %348, !dbg !35
  %357 = fmul float %328, %356, !dbg !36
  %358 = fmul float %352, %357, !dbg !37
  %359 = fadd float %355, %358, !dbg !38
  %360 = bitcast float %354 to i32, !dbg !40
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !40
  %362 = bitcast i32 %361 to float, !dbg !40
  %363 = bitcast float %359 to i32, !dbg !40
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !40
  %365 = bitcast i32 %364 to float, !dbg !40
  %366 = bitcast float %349 to i32, !dbg !40
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !40
  %368 = bitcast i32 %367 to float, !dbg !40
  %369 = fsub float %362, %354, !dbg !24
  %370 = fadd float %349, %368, !dbg !29
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !30
  %372 = tail call float @llvm.nvvm.div.full(float %368, float %370), !dbg !31
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !32
  %374 = fmul float %373, %369, !dbg !33
  %375 = fadd float %354, %374, !dbg !34
  %376 = fadd float %359, %365, !dbg !39
  %377 = fmul float %369, %369, !dbg !35
  %378 = fmul float %349, %377, !dbg !36
  %379 = fmul float %373, %378, !dbg !37
  %380 = fadd float %376, %379, !dbg !38
  %381 = and i32 %19, 7, !dbg !40
  %382 = icmp eq i32 %21, 0, !dbg !40
  %383 = lshr exact i32 %20, 5, !dbg !40
  %384 = or disjoint i32 %383, %381, !dbg !40
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !40
  %386 = bitcast float %375 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 %382) #5, !dbg !40
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %384, !dbg !40
  %388 = bitcast float %380 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 %382) #5, !dbg !40
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %384, !dbg !40
  %390 = bitcast float %370 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 %382) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %391 = icmp slt i32 %18, 16, !dbg !40
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %391) #5, !dbg !40
  %394 = bitcast i32 %393 to float, !dbg !40
  %395 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !40
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %391) #5, !dbg !40
  %397 = bitcast i32 %396 to float, !dbg !40
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !40
  %399 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %398, i1 %391) #5, !dbg !40
  %400 = bitcast i32 %399 to float, !dbg !40
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !40
  %402 = bitcast i32 %401 to float, !dbg !40
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !40
  %404 = bitcast i32 %403 to float, !dbg !40
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !40
  %406 = bitcast i32 %405 to float, !dbg !40
  %407 = fsub float %402, %394, !dbg !24
  %408 = fadd float %400, %406, !dbg !29
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !30
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !31
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !32
  %412 = fmul float %407, %411, !dbg !33
  %413 = fadd float %412, %394, !dbg !34
  %414 = fadd float %397, %404, !dbg !39
  %415 = fmul float %407, %407, !dbg !35
  %416 = fmul float %415, %400, !dbg !36
  %417 = fmul float %416, %411, !dbg !37
  %418 = fadd float %414, %417, !dbg !38
  %419 = bitcast float %413 to i32, !dbg !40
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !40
  %421 = bitcast i32 %420 to float, !dbg !40
  %422 = bitcast float %418 to i32, !dbg !40
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !40
  %424 = bitcast i32 %423 to float, !dbg !40
  %425 = bitcast float %408 to i32, !dbg !40
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !40
  %427 = bitcast i32 %426 to float, !dbg !40
  %428 = fsub float %421, %413, !dbg !24
  %429 = fadd float %408, %427, !dbg !29
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !30
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !31
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !32
  %433 = fmul float %428, %432, !dbg !33
  %434 = fadd float %413, %433, !dbg !34
  %435 = fadd float %418, %424, !dbg !39
  %436 = fmul float %428, %428, !dbg !35
  %437 = fmul float %408, %436, !dbg !36
  %438 = fmul float %432, %437, !dbg !37
  %439 = fadd float %435, %438, !dbg !38
  %440 = bitcast float %434 to i32, !dbg !40
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !40
  %442 = bitcast i32 %441 to float, !dbg !40
  %443 = bitcast float %439 to i32, !dbg !40
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !40
  %445 = bitcast i32 %444 to float, !dbg !40
  %446 = bitcast float %429 to i32, !dbg !40
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !40
  %448 = bitcast i32 %447 to float, !dbg !40
  %449 = fsub float %442, %434, !dbg !24
  %450 = fadd float %429, %448, !dbg !29
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !30
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !31
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !32
  %454 = fmul float %449, %453, !dbg !33
  %455 = fadd float %434, %454, !dbg !34
  %456 = fadd float %439, %445, !dbg !39
  %457 = fmul float %449, %449, !dbg !35
  %458 = fmul float %429, %457, !dbg !36
  %459 = fmul float %453, %458, !dbg !37
  %460 = fadd float %456, %459, !dbg !38
  %461 = and i32 %18, 7, !dbg !40
  %462 = icmp eq i32 %461, 0, !dbg !40
  %463 = and i1 %391, %462, !dbg !40
  %464 = bitcast float %455 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %464, i1 %463) #5, !dbg !40
  %465 = bitcast float %460 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %465, i1 %463) #5, !dbg !40
  %466 = bitcast float %450 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %466, i1 %463) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !40
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !40
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %383, !dbg !40
  %470 = load float, ptr addrspace(3) %469, align 16, !dbg !40
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %41) #5, !dbg !41
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %41) #5, !dbg !41
  %473 = add nuw nsw i32 %26, 3072, !dbg !42
  %474 = zext nneg i32 %473 to i64, !dbg !43
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !43
  %476 = zext nneg i32 %26 to i64, !dbg !43
  %477 = getelementptr float, ptr addrspace(1) %1, i64 %476, !dbg !43
  %478 = getelementptr i8, ptr addrspace(1) %477, i64 12304, !dbg !43
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %475, i1 %31) #5, !dbg !44
  %480 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %478, i1 %31) #5, !dbg !44
  %481 = getelementptr bfloat, ptr addrspace(1) %2, i64 %474, !dbg !45
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %481, i1 %31) #5, !dbg !46
  %483 = zext nneg i32 %27 to i64, !dbg !47
  %484 = getelementptr float, ptr addrspace(1) %1, i64 %483, !dbg !47
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %477, i1 %31) #5, !dbg !48
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %484, i1 %31) #5, !dbg !48
  %487 = getelementptr bfloat, ptr addrspace(1) %2, i64 %476, !dbg !49
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %487, i1 %31) #5, !dbg !50
  %489 = tail call float @llvm.nvvm.div.full(float %470, float 3.072000e+03), !dbg !51
  %490 = fadd float %489, 0x3EB0C6F7A0000000, !dbg !52
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i62 = icmp eq i32 %506, 0, !dbg !53
  br i1 %.not.i62, label %509, label %507, !dbg !53

507:                                              ; preds = %__nv_rsqrtf.exit
  %508 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %490), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

509:                                              ; preds = %__nv_rsqrtf.exit
  %510 = tail call float @llvm.nvvm.rsqrt.approx.f(float %490), !dbg !53
  br label %__nv_rsqrtf.exit64, !dbg !53

__nv_rsqrtf.exit64:                               ; preds = %507, %509
  %.0.i63 = phi float [ %508, %507 ], [ %510, %509 ], !dbg !53
  %511 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !41
  %512 = bitcast i32 %511 to <2 x bfloat>, !dbg !41
  %513 = extractelement <2 x bfloat> %512, i64 1, !dbg !41
  %514 = fpext bfloat %513 to float, !dbg !54
  %515 = fsub float %514, %468, !dbg !55
  %516 = extractelement <2 x bfloat> %512, i64 0, !dbg !41
  %517 = fpext bfloat %516 to float, !dbg !54
  %518 = fsub float %517, %468, !dbg !55
  %519 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !41
  %520 = bitcast i32 %519 to <2 x bfloat>, !dbg !41
  %521 = extractelement <2 x bfloat> %520, i64 1, !dbg !41
  %522 = fpext bfloat %521 to float, !dbg !54
  %523 = fsub float %522, %468, !dbg !55
  %524 = extractelement <2 x bfloat> %520, i64 0, !dbg !41
  %525 = fpext bfloat %524 to float, !dbg !54
  %526 = fsub float %525, %468, !dbg !55
  %527 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !41
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !41
  %529 = extractelement <2 x bfloat> %528, i64 1, !dbg !41
  %530 = fpext bfloat %529 to float, !dbg !54
  %531 = fsub float %530, %468, !dbg !55
  %532 = extractelement <2 x bfloat> %528, i64 0, !dbg !41
  %533 = fpext bfloat %532 to float, !dbg !54
  %534 = fsub float %533, %468, !dbg !55
  %535 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !41
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !41
  %537 = extractelement <2 x bfloat> %536, i64 1, !dbg !41
  %538 = fpext bfloat %537 to float, !dbg !54
  %539 = fsub float %538, %468, !dbg !55
  %540 = extractelement <2 x bfloat> %536, i64 0, !dbg !41
  %541 = fpext bfloat %540 to float, !dbg !54
  %542 = fsub float %541, %468, !dbg !55
  %543 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !41
  %544 = bitcast i32 %543 to <2 x bfloat>, !dbg !41
  %545 = extractelement <2 x bfloat> %544, i64 1, !dbg !41
  %546 = fpext bfloat %545 to float, !dbg !54
  %547 = fsub float %546, %468, !dbg !55
  %548 = extractelement <2 x bfloat> %544, i64 0, !dbg !41
  %549 = fpext bfloat %548 to float, !dbg !54
  %550 = fsub float %549, %468, !dbg !55
  %551 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !41
  %552 = bitcast i32 %551 to <2 x bfloat>, !dbg !41
  %553 = extractelement <2 x bfloat> %552, i64 1, !dbg !41
  %554 = fpext bfloat %553 to float, !dbg !54
  %555 = fsub float %554, %468, !dbg !55
  %556 = extractelement <2 x bfloat> %552, i64 0, !dbg !41
  %557 = fpext bfloat %556 to float, !dbg !54
  %558 = fsub float %557, %468, !dbg !55
  %559 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !41
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !41
  %561 = extractelement <2 x bfloat> %560, i64 1, !dbg !41
  %562 = fpext bfloat %561 to float, !dbg !54
  %563 = fsub float %562, %468, !dbg !55
  %564 = extractelement <2 x bfloat> %560, i64 0, !dbg !41
  %565 = fpext bfloat %564 to float, !dbg !54
  %566 = fsub float %565, %468, !dbg !55
  %567 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !41
  %568 = bitcast i32 %567 to <2 x bfloat>, !dbg !41
  %569 = extractelement <2 x bfloat> %568, i64 1, !dbg !41
  %570 = fpext bfloat %569 to float, !dbg !54
  %571 = fsub float %570, %468, !dbg !55
  %572 = extractelement <2 x bfloat> %568, i64 0, !dbg !41
  %573 = fpext bfloat %572 to float, !dbg !54
  %574 = fsub float %573, %468, !dbg !55
  %575 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !50
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !50
  %577 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !50
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !50
  %579 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !50
  %580 = bitcast i32 %579 to <2 x bfloat>, !dbg !50
  %581 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !50
  %582 = bitcast i32 %581 to <2 x bfloat>, !dbg !50
  %583 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !48
  %584 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !48
  %585 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !48
  %586 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !48
  %587 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !48
  %588 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !48
  %589 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !48
  %590 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !48
  %591 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !46
  %592 = bitcast i32 %591 to <2 x bfloat>, !dbg !46
  %593 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !46
  %594 = bitcast i32 %593 to <2 x bfloat>, !dbg !46
  %595 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !46
  %596 = bitcast i32 %595 to <2 x bfloat>, !dbg !46
  %597 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !46
  %598 = bitcast i32 %597 to <2 x bfloat>, !dbg !46
  %599 = extractvalue { i32, i32, i32, i32 } %480, 3, !dbg !44
  %600 = extractvalue { i32, i32, i32, i32 } %480, 2, !dbg !44
  %601 = extractvalue { i32, i32, i32, i32 } %480, 1, !dbg !44
  %602 = extractvalue { i32, i32, i32, i32 } %480, 0, !dbg !44
  %603 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !44
  %604 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !44
  %605 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !44
  %606 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !44
  %607 = mul i32 %16, 6144, !dbg !16
  %608 = add i32 %607, 3072, !dbg !16
  %609 = add i32 %608, %26, !dbg !17
  %610 = add i32 %26, %607, !dbg !17
  %611 = and i32 %18, 1, !dbg !11
  %612 = or disjoint i32 %17, %611, !dbg !12
  %613 = icmp slt i32 %612, 3600, !dbg !13
  %614 = fmul float %574, %.0.i63, !dbg !56
  %615 = fmul float %571, %.0.i63, !dbg !56
  %616 = fmul float %566, %.0.i63, !dbg !56
  %617 = fmul float %563, %.0.i63, !dbg !56
  %618 = fmul float %558, %.0.i63, !dbg !56
  %619 = fmul float %555, %.0.i63, !dbg !56
  %620 = fmul float %550, %.0.i63, !dbg !56
  %621 = fmul float %547, %.0.i63, !dbg !56
  %622 = fmul float %542, %.0.i63, !dbg !56
  %623 = fmul float %539, %.0.i63, !dbg !56
  %624 = fmul float %534, %.0.i63, !dbg !56
  %625 = fmul float %531, %.0.i63, !dbg !56
  %626 = fmul float %526, %.0.i63, !dbg !56
  %627 = fmul float %523, %.0.i63, !dbg !56
  %628 = fmul float %518, %.0.i63, !dbg !56
  %629 = fmul float %515, %.0.i63, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %630 = and i32 %28, 8176, !dbg !56
  %631 = lshr i32 %28, 10, !dbg !56
  %632 = and i32 %631, 4, !dbg !56
  %633 = getelementptr float, ptr addrspace(3) @global_smem, i32 %632, !dbg !56
  %634 = getelementptr float, ptr addrspace(3) %633, i32 %630, !dbg !56
  %635 = bitcast float %614 to i32, !dbg !56
  %636 = bitcast float %615 to i32, !dbg !56
  %637 = bitcast float %616 to i32, !dbg !56
  %638 = bitcast float %617 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %634, i32 %635, i32 %636, i32 %637, i32 %638, i1 true) #5, !dbg !56
  %639 = or disjoint i32 %630, 4, !dbg !56
  %640 = getelementptr float, ptr addrspace(3) %633, i32 %639, !dbg !56
  %641 = bitcast float %618 to i32, !dbg !56
  %642 = bitcast float %619 to i32, !dbg !56
  %643 = bitcast float %620 to i32, !dbg !56
  %644 = bitcast float %621 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %640, i32 %641, i32 %642, i32 %643, i32 %644, i1 true) #5, !dbg !56
  %645 = or disjoint i32 %630, 8, !dbg !56
  %646 = getelementptr float, ptr addrspace(3) %633, i32 %645, !dbg !56
  %647 = bitcast float %622 to i32, !dbg !56
  %648 = bitcast float %623 to i32, !dbg !56
  %649 = bitcast float %624 to i32, !dbg !56
  %650 = bitcast float %625 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %646, i32 %647, i32 %648, i32 %649, i32 %650, i1 true) #5, !dbg !56
  %651 = or disjoint i32 %630, 12, !dbg !56
  %652 = getelementptr float, ptr addrspace(3) %633, i32 %651, !dbg !56
  %653 = bitcast float %626 to i32, !dbg !56
  %654 = bitcast float %627 to i32, !dbg !56
  %655 = bitcast float %628 to i32, !dbg !56
  %656 = bitcast float %629 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %652, i32 %653, i32 %654, i32 %655, i32 %656, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %657 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !56
  %658 = getelementptr inbounds nuw i8, ptr addrspace(3) %657, i32 8, !dbg !56
  %659 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !56
  %660 = getelementptr inbounds nuw i8, ptr addrspace(3) %659, i32 8, !dbg !56
  %661 = or disjoint i32 %26, 4100, !dbg !56
  %662 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %661, !dbg !56
  %663 = getelementptr inbounds nuw i8, ptr addrspace(3) %662, i32 8, !dbg !56
  %664 = getelementptr inbounds nuw i8, ptr addrspace(3) %657, i32 16416, !dbg !56
  %665 = getelementptr inbounds nuw i8, ptr addrspace(3) %657, i32 16424, !dbg !56
  %666 = sext i32 %610 to i64, !dbg !57
  %667 = getelementptr bfloat, ptr addrspace(1) %3, i64 %666, !dbg !57
  %668 = sext i32 %609 to i64, !dbg !57
  %669 = getelementptr bfloat, ptr addrspace(1) %3, i64 %668, !dbg !57
  %670 = getelementptr bfloat, ptr addrspace(1) %3, i64 %36, !dbg !57
  %671 = getelementptr bfloat, ptr addrspace(1) %3, i64 %38, !dbg !57
  %672 = fpext <2 x bfloat> %582 to <2 x float>, !dbg !58
  %673 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !48
  %674 = insertelement <2 x i32> %673, i32 %589, i64 1, !dbg !48
  %675 = bitcast <2 x i32> %674 to <2 x float>, !dbg !48
  %676 = fpext <2 x bfloat> %598 to <2 x float>, !dbg !59
  %677 = insertelement <2 x i32> poison, i32 %606, i64 0, !dbg !44
  %678 = insertelement <2 x i32> %677, i32 %605, i64 1, !dbg !44
  %679 = bitcast <2 x i32> %678 to <2 x float>, !dbg !44
  %680 = load <2 x float>, ptr addrspace(3) %657, align 16, !dbg !56
  %681 = fadd <2 x float> %679, %676, !dbg !60
  %682 = fadd <2 x float> %681, splat (float 1.000000e+00), !dbg !61
  %683 = fmul <2 x float> %682, %680, !dbg !62
  %684 = fadd <2 x float> %675, %672, !dbg !63
  %685 = fadd <2 x float> %684, %683, !dbg !64
  %686 = extractelement <2 x float> %685, i64 0, !dbg !65
  %687 = select i1 %40, float %686, float 0x7FF0000000000000, !dbg !66
  %688 = extractelement <2 x float> %685, i64 1, !dbg !65
  %689 = select i1 %40, float %688, float 0x7FF0000000000000, !dbg !66
  %690 = select i1 %40, float %686, float 0xFFF0000000000000, !dbg !65
  %691 = select i1 %40, float %688, float 0xFFF0000000000000, !dbg !65
  %692 = fptrunc <2 x float> %685 to <2 x bfloat>, !dbg !67
  %693 = fpext <2 x bfloat> %580 to <2 x float>, !dbg !58
  %694 = insertelement <2 x i32> poison, i32 %588, i64 0, !dbg !48
  %695 = insertelement <2 x i32> %694, i32 %587, i64 1, !dbg !48
  %696 = bitcast <2 x i32> %695 to <2 x float>, !dbg !48
  %697 = fpext <2 x bfloat> %596 to <2 x float>, !dbg !59
  %698 = insertelement <2 x i32> poison, i32 %604, i64 0, !dbg !44
  %699 = insertelement <2 x i32> %698, i32 %603, i64 1, !dbg !44
  %700 = bitcast <2 x i32> %699 to <2 x float>, !dbg !44
  %701 = load <2 x float>, ptr addrspace(3) %658, align 8, !dbg !56
  %702 = fadd <2 x float> %700, %697, !dbg !60
  %703 = fadd <2 x float> %702, splat (float 1.000000e+00), !dbg !61
  %704 = fmul <2 x float> %703, %701, !dbg !62
  %705 = fadd <2 x float> %696, %693, !dbg !63
  %706 = fadd <2 x float> %705, %704, !dbg !64
  %707 = extractelement <2 x float> %706, i64 0, !dbg !65
  %708 = select i1 %40, float %707, float 0x7FF0000000000000, !dbg !66
  %709 = extractelement <2 x float> %706, i64 1, !dbg !65
  %710 = select i1 %40, float %709, float 0x7FF0000000000000, !dbg !66
  %711 = select i1 %40, float %707, float 0xFFF0000000000000, !dbg !65
  %712 = select i1 %40, float %709, float 0xFFF0000000000000, !dbg !65
  %713 = fptrunc <2 x float> %706 to <2 x bfloat>, !dbg !67
  %714 = fpext <2 x bfloat> %578 to <2 x float>, !dbg !58
  %715 = insertelement <2 x i32> poison, i32 %586, i64 0, !dbg !48
  %716 = insertelement <2 x i32> %715, i32 %585, i64 1, !dbg !48
  %717 = bitcast <2 x i32> %716 to <2 x float>, !dbg !48
  %718 = fpext <2 x bfloat> %594 to <2 x float>, !dbg !59
  %719 = insertelement <2 x i32> poison, i32 %602, i64 0, !dbg !44
  %720 = insertelement <2 x i32> %719, i32 %601, i64 1, !dbg !44
  %721 = bitcast <2 x i32> %720 to <2 x float>, !dbg !44
  %722 = load <2 x float>, ptr addrspace(3) %659, align 16, !dbg !56
  %723 = fadd <2 x float> %721, %718, !dbg !60
  %724 = fadd <2 x float> %723, splat (float 1.000000e+00), !dbg !61
  %725 = fmul <2 x float> %724, %722, !dbg !62
  %726 = fadd <2 x float> %717, %714, !dbg !63
  %727 = fadd <2 x float> %726, %725, !dbg !64
  %728 = extractelement <2 x float> %727, i64 0, !dbg !65
  %729 = select i1 %40, float %728, float 0x7FF0000000000000, !dbg !66
  %730 = extractelement <2 x float> %727, i64 1, !dbg !65
  %731 = select i1 %40, float %730, float 0x7FF0000000000000, !dbg !66
  %732 = select i1 %40, float %728, float 0xFFF0000000000000, !dbg !65
  %733 = select i1 %40, float %730, float 0xFFF0000000000000, !dbg !65
  %734 = fptrunc <2 x float> %727 to <2 x bfloat>, !dbg !67
  %735 = fpext <2 x bfloat> %576 to <2 x float>, !dbg !58
  %736 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !48
  %737 = insertelement <2 x i32> %736, i32 %583, i64 1, !dbg !48
  %738 = bitcast <2 x i32> %737 to <2 x float>, !dbg !48
  %739 = fpext <2 x bfloat> %592 to <2 x float>, !dbg !59
  %740 = insertelement <2 x i32> poison, i32 %600, i64 0, !dbg !44
  %741 = insertelement <2 x i32> %740, i32 %599, i64 1, !dbg !44
  %742 = bitcast <2 x i32> %741 to <2 x float>, !dbg !44
  %743 = load <2 x float>, ptr addrspace(3) %660, align 8, !dbg !56
  %744 = fadd <2 x float> %742, %739, !dbg !60
  %745 = fadd <2 x float> %744, splat (float 1.000000e+00), !dbg !61
  %746 = fmul <2 x float> %745, %743, !dbg !62
  %747 = fadd <2 x float> %738, %735, !dbg !63
  %748 = fadd <2 x float> %747, %746, !dbg !64
  %749 = extractelement <2 x float> %748, i64 0, !dbg !65
  %750 = select i1 %40, float %749, float 0x7FF0000000000000, !dbg !66
  %751 = extractelement <2 x float> %748, i64 1, !dbg !65
  %752 = select i1 %40, float %751, float 0x7FF0000000000000, !dbg !66
  %753 = select i1 %40, float %749, float 0xFFF0000000000000, !dbg !65
  %754 = select i1 %40, float %751, float 0xFFF0000000000000, !dbg !65
  %755 = fptrunc <2 x float> %748 to <2 x bfloat>, !dbg !67
  %756 = load <2 x float>, ptr addrspace(3) %662, align 16, !dbg !56
  %757 = fmul <2 x float> %682, %756, !dbg !62
  %758 = fadd <2 x float> %684, %757, !dbg !64
  %759 = extractelement <2 x float> %758, i64 0, !dbg !65
  %760 = select i1 %40, float %759, float 0x7FF0000000000000, !dbg !66
  %761 = extractelement <2 x float> %758, i64 1, !dbg !65
  %762 = select i1 %40, float %761, float 0x7FF0000000000000, !dbg !66
  %763 = select i1 %40, float %759, float 0xFFF0000000000000, !dbg !65
  %764 = select i1 %40, float %761, float 0xFFF0000000000000, !dbg !65
  %765 = fptrunc <2 x float> %758 to <2 x bfloat>, !dbg !67
  %766 = load <2 x float>, ptr addrspace(3) %663, align 8, !dbg !56
  %767 = fmul <2 x float> %703, %766, !dbg !62
  %768 = fadd <2 x float> %705, %767, !dbg !64
  %769 = extractelement <2 x float> %768, i64 0, !dbg !65
  %770 = select i1 %40, float %769, float 0x7FF0000000000000, !dbg !66
  %771 = extractelement <2 x float> %768, i64 1, !dbg !65
  %772 = select i1 %40, float %771, float 0x7FF0000000000000, !dbg !66
  %773 = select i1 %40, float %769, float 0xFFF0000000000000, !dbg !65
  %774 = select i1 %40, float %771, float 0xFFF0000000000000, !dbg !65
  %775 = fptrunc <2 x float> %768 to <2 x bfloat>, !dbg !67
  %776 = load <2 x float>, ptr addrspace(3) %664, align 16, !dbg !56
  %777 = fmul <2 x float> %724, %776, !dbg !62
  %778 = fadd <2 x float> %726, %777, !dbg !64
  %779 = extractelement <2 x float> %778, i64 0, !dbg !65
  %780 = select i1 %40, float %779, float 0x7FF0000000000000, !dbg !66
  %781 = extractelement <2 x float> %778, i64 1, !dbg !65
  %782 = select i1 %40, float %781, float 0x7FF0000000000000, !dbg !66
  %783 = select i1 %40, float %779, float 0xFFF0000000000000, !dbg !65
  %784 = select i1 %40, float %781, float 0xFFF0000000000000, !dbg !65
  %785 = fptrunc <2 x float> %778 to <2 x bfloat>, !dbg !67
  %786 = load <2 x float>, ptr addrspace(3) %665, align 8, !dbg !56
  %787 = fmul <2 x float> %745, %786, !dbg !62
  %788 = fadd <2 x float> %747, %787, !dbg !64
  %789 = extractelement <2 x float> %788, i64 0, !dbg !65
  %790 = select i1 %40, float %789, float 0x7FF0000000000000, !dbg !66
  %791 = extractelement <2 x float> %788, i64 1, !dbg !65
  %792 = select i1 %40, float %791, float 0x7FF0000000000000, !dbg !66
  %793 = select i1 %40, float %789, float 0xFFF0000000000000, !dbg !65
  %794 = select i1 %40, float %791, float 0xFFF0000000000000, !dbg !65
  %795 = fptrunc <2 x float> %788 to <2 x bfloat>, !dbg !67
  %796 = bitcast <2 x bfloat> %692 to i32, !dbg !67
  %797 = bitcast <2 x bfloat> %713 to i32, !dbg !67
  %798 = bitcast <2 x bfloat> %734 to i32, !dbg !67
  %799 = bitcast <2 x bfloat> %755 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %796, i32 %797, i32 %798, i32 %799, ptr addrspace(1) %667, i1 %40) #5, !dbg !67
  %800 = bitcast <2 x bfloat> %765 to i32, !dbg !67
  %801 = bitcast <2 x bfloat> %775 to i32, !dbg !67
  %802 = bitcast <2 x bfloat> %785 to i32, !dbg !67
  %803 = bitcast <2 x bfloat> %795 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %800, i32 %801, i32 %802, i32 %803, ptr addrspace(1) %669, i1 %40) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %804 = fcmp olt float %687, %689, !dbg !70
  %805 = fcmp uno float %687, 0.000000e+00, !dbg !71
  %806 = or i1 %804, %805, !dbg !72
  %807 = select i1 %806, float %687, float %689, !dbg !73
  %808 = fcmp olt float %807, %708, !dbg !70
  %809 = fcmp uno float %807, 0.000000e+00, !dbg !71
  %810 = or i1 %808, %809, !dbg !72
  %811 = select i1 %810, float %807, float %708, !dbg !73
  %812 = fcmp olt float %811, %710, !dbg !70
  %813 = fcmp uno float %811, 0.000000e+00, !dbg !71
  %814 = or i1 %812, %813, !dbg !72
  %815 = select i1 %814, float %811, float %710, !dbg !73
  %816 = fcmp olt float %815, %729, !dbg !70
  %817 = fcmp uno float %815, 0.000000e+00, !dbg !71
  %818 = or i1 %816, %817, !dbg !72
  %819 = select i1 %818, float %815, float %729, !dbg !73
  %820 = fcmp olt float %819, %731, !dbg !70
  %821 = fcmp uno float %819, 0.000000e+00, !dbg !71
  %822 = or i1 %820, %821, !dbg !72
  %823 = select i1 %822, float %819, float %731, !dbg !73
  %824 = fcmp olt float %823, %750, !dbg !70
  %825 = fcmp uno float %823, 0.000000e+00, !dbg !71
  %826 = or i1 %824, %825, !dbg !72
  %827 = select i1 %826, float %823, float %750, !dbg !73
  %828 = fcmp olt float %827, %752, !dbg !70
  %829 = fcmp uno float %827, 0.000000e+00, !dbg !71
  %830 = or i1 %828, %829, !dbg !72
  %831 = select i1 %830, float %827, float %752, !dbg !73
  %832 = fcmp olt float %760, %762, !dbg !70
  %833 = fcmp uno float %760, 0.000000e+00, !dbg !71
  %834 = or i1 %832, %833, !dbg !72
  %835 = select i1 %834, float %760, float %762, !dbg !73
  %836 = fcmp olt float %835, %770, !dbg !70
  %837 = fcmp uno float %835, 0.000000e+00, !dbg !71
  %838 = or i1 %836, %837, !dbg !72
  %839 = select i1 %838, float %835, float %770, !dbg !73
  %840 = fcmp olt float %839, %772, !dbg !70
  %841 = fcmp uno float %839, 0.000000e+00, !dbg !71
  %842 = or i1 %840, %841, !dbg !72
  %843 = select i1 %842, float %839, float %772, !dbg !73
  %844 = fcmp olt float %843, %780, !dbg !70
  %845 = fcmp uno float %843, 0.000000e+00, !dbg !71
  %846 = or i1 %844, %845, !dbg !72
  %847 = select i1 %846, float %843, float %780, !dbg !73
  %848 = fcmp olt float %847, %782, !dbg !70
  %849 = fcmp uno float %847, 0.000000e+00, !dbg !71
  %850 = or i1 %848, %849, !dbg !72
  %851 = select i1 %850, float %847, float %782, !dbg !73
  %852 = fcmp olt float %851, %790, !dbg !70
  %853 = fcmp uno float %851, 0.000000e+00, !dbg !71
  %854 = or i1 %852, %853, !dbg !72
  %855 = select i1 %854, float %851, float %790, !dbg !73
  %856 = fcmp olt float %855, %792, !dbg !70
  %857 = fcmp uno float %855, 0.000000e+00, !dbg !71
  %858 = or i1 %856, %857, !dbg !72
  %859 = select i1 %858, float %855, float %792, !dbg !73
  %860 = bitcast float %831 to i32, !dbg !68
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 16, i32 31), !dbg !68
  %862 = bitcast i32 %861 to float, !dbg !68
  %863 = fcmp olt float %831, %862, !dbg !70
  %864 = fcmp uno float %831, 0.000000e+00, !dbg !71
  %865 = or i1 %863, %864, !dbg !72
  %866 = select i1 %865, float %831, float %862, !dbg !73
  %867 = bitcast float %866 to i32, !dbg !68
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 8, i32 31), !dbg !68
  %869 = bitcast i32 %868 to float, !dbg !68
  %870 = fcmp olt float %866, %869, !dbg !70
  %871 = fcmp uno float %866, 0.000000e+00, !dbg !71
  %872 = or i1 %870, %871, !dbg !72
  %873 = select i1 %872, float %866, float %869, !dbg !73
  %874 = bitcast float %873 to i32, !dbg !68
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %874, i32 4, i32 31), !dbg !68
  %876 = bitcast i32 %875 to float, !dbg !68
  %877 = fcmp olt float %873, %876, !dbg !70
  %878 = fcmp uno float %873, 0.000000e+00, !dbg !71
  %879 = or i1 %877, %878, !dbg !72
  %880 = select i1 %879, float %873, float %876, !dbg !73
  %881 = bitcast float %880 to i32, !dbg !68
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 2, i32 31), !dbg !68
  %883 = bitcast i32 %882 to float, !dbg !68
  %884 = fcmp olt float %880, %883, !dbg !70
  %885 = fcmp uno float %880, 0.000000e+00, !dbg !71
  %886 = or i1 %884, %885, !dbg !72
  %887 = select i1 %886, float %880, float %883, !dbg !73
  %888 = bitcast float %887 to i32, !dbg !68
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 1, i32 31), !dbg !68
  %890 = bitcast i32 %889 to float, !dbg !68
  %891 = fcmp olt float %887, %890, !dbg !70
  %892 = fcmp uno float %887, 0.000000e+00, !dbg !71
  %893 = or i1 %891, %892, !dbg !72
  %894 = bitcast float %859 to i32, !dbg !68
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 16, i32 31), !dbg !68
  %896 = bitcast i32 %895 to float, !dbg !68
  %897 = fcmp olt float %859, %896, !dbg !70
  %898 = fcmp uno float %859, 0.000000e+00, !dbg !71
  %899 = or i1 %897, %898, !dbg !72
  %900 = select i1 %899, float %859, float %896, !dbg !73
  %901 = bitcast float %900 to i32, !dbg !68
  %902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %901, i32 8, i32 31), !dbg !68
  %903 = bitcast i32 %902 to float, !dbg !68
  %904 = fcmp olt float %900, %903, !dbg !70
  %905 = fcmp uno float %900, 0.000000e+00, !dbg !71
  %906 = or i1 %904, %905, !dbg !72
  %907 = select i1 %906, float %900, float %903, !dbg !73
  %908 = bitcast float %907 to i32, !dbg !68
  %909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %908, i32 4, i32 31), !dbg !68
  %910 = bitcast i32 %909 to float, !dbg !68
  %911 = fcmp olt float %907, %910, !dbg !70
  %912 = fcmp uno float %907, 0.000000e+00, !dbg !71
  %913 = or i1 %911, %912, !dbg !72
  %914 = select i1 %913, float %907, float %910, !dbg !73
  %915 = bitcast float %914 to i32, !dbg !68
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 2, i32 31), !dbg !68
  %917 = bitcast i32 %916 to float, !dbg !68
  %918 = fcmp olt float %914, %917, !dbg !70
  %919 = fcmp uno float %914, 0.000000e+00, !dbg !71
  %920 = or i1 %918, %919, !dbg !72
  %921 = select i1 %920, float %914, float %917, !dbg !73
  %922 = bitcast float %921 to i32, !dbg !68
  %923 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %922, i32 1, i32 31), !dbg !68
  %924 = bitcast i32 %923 to float, !dbg !68
  %925 = fcmp olt float %921, %924, !dbg !70
  %926 = fcmp uno float %921, 0.000000e+00, !dbg !71
  %927 = or i1 %925, %926, !dbg !72
  %928 = and i32 %19, 15, !dbg !68
  %929 = getelementptr float, ptr addrspace(3) @global_smem, i32 %928, !dbg !68
  %930 = select i1 %893, i32 %888, i32 %889, !dbg !73
  %931 = insertelement <1 x i32> poison, i32 %930, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %929, <1 x i32> %931, i1 %382) #5, !dbg !68
  %932 = or disjoint i32 %928, 16, !dbg !68
  %933 = getelementptr float, ptr addrspace(3) @global_smem, i32 %932, !dbg !68
  %934 = select i1 %927, i32 %922, i32 %923, !dbg !73
  %935 = insertelement <1 x i32> poison, i32 %934, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %933, <1 x i32> %935, i1 %382) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %936 = icmp slt i32 %18, 32, !dbg !68
  %937 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %936) #5, !dbg !68
  %938 = bitcast i32 %937 to float, !dbg !68
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %937, i32 8, i32 31), !dbg !68
  %940 = bitcast i32 %939 to float, !dbg !68
  %941 = fcmp olt float %938, %940, !dbg !70
  %942 = fcmp uno float %938, 0.000000e+00, !dbg !71
  %943 = or i1 %942, %941, !dbg !72
  %944 = select i1 %943, float %938, float %940, !dbg !73
  %945 = bitcast float %944 to i32, !dbg !68
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 4, i32 31), !dbg !68
  %947 = bitcast i32 %946 to float, !dbg !68
  %948 = fcmp olt float %944, %947, !dbg !70
  %949 = fcmp uno float %944, 0.000000e+00, !dbg !71
  %950 = or i1 %948, %949, !dbg !72
  %951 = select i1 %950, float %944, float %947, !dbg !73
  %952 = bitcast float %951 to i32, !dbg !68
  %953 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %952, i32 2, i32 31), !dbg !68
  %954 = bitcast i32 %953 to float, !dbg !68
  %955 = fcmp olt float %951, %954, !dbg !70
  %956 = fcmp uno float %951, 0.000000e+00, !dbg !71
  %957 = or i1 %955, %956, !dbg !72
  %958 = select i1 %957, float %951, float %954, !dbg !73
  %959 = bitcast float %958 to i32, !dbg !68
  %960 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %959, i32 1, i32 31), !dbg !68
  %961 = bitcast i32 %960 to float, !dbg !68
  %962 = fcmp olt float %958, %961, !dbg !70
  %963 = fcmp uno float %958, 0.000000e+00, !dbg !71
  %964 = or i1 %962, %963, !dbg !72
  %965 = and i32 %18, 15, !dbg !68
  %966 = icmp eq i32 %965, 0, !dbg !68
  %967 = and i1 %936, %966, !dbg !68
  %968 = select i1 %964, i32 %959, i32 %960, !dbg !73
  %969 = insertelement <1 x i32> poison, i32 %968, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %969, i1 %967) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %970 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %971 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %972 = bitcast float %970 to i32, !dbg !74
  %973 = bitcast float %971 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %972, i32 %973, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %974 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %611, !dbg !74
  %975 = load float, ptr addrspace(3) %974, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %976 = fcmp ogt float %690, %691, !dbg !77
  %977 = fcmp uno float %690, 0.000000e+00, !dbg !78
  %978 = or i1 %976, %977, !dbg !79
  %979 = select i1 %978, float %690, float %691, !dbg !80
  %980 = fcmp ogt float %979, %711, !dbg !77
  %981 = fcmp uno float %979, 0.000000e+00, !dbg !78
  %982 = or i1 %980, %981, !dbg !79
  %983 = select i1 %982, float %979, float %711, !dbg !80
  %984 = fcmp ogt float %983, %712, !dbg !77
  %985 = fcmp uno float %983, 0.000000e+00, !dbg !78
  %986 = or i1 %984, %985, !dbg !79
  %987 = select i1 %986, float %983, float %712, !dbg !80
  %988 = fcmp ogt float %987, %732, !dbg !77
  %989 = fcmp uno float %987, 0.000000e+00, !dbg !78
  %990 = or i1 %988, %989, !dbg !79
  %991 = select i1 %990, float %987, float %732, !dbg !80
  %992 = fcmp ogt float %991, %733, !dbg !77
  %993 = fcmp uno float %991, 0.000000e+00, !dbg !78
  %994 = or i1 %992, %993, !dbg !79
  %995 = select i1 %994, float %991, float %733, !dbg !80
  %996 = fcmp ogt float %995, %753, !dbg !77
  %997 = fcmp uno float %995, 0.000000e+00, !dbg !78
  %998 = or i1 %996, %997, !dbg !79
  %999 = select i1 %998, float %995, float %753, !dbg !80
  %1000 = fcmp ogt float %999, %754, !dbg !77
  %1001 = fcmp uno float %999, 0.000000e+00, !dbg !78
  %1002 = or i1 %1000, %1001, !dbg !79
  %1003 = select i1 %1002, float %999, float %754, !dbg !80
  %1004 = fcmp ogt float %763, %764, !dbg !77
  %1005 = fcmp uno float %763, 0.000000e+00, !dbg !78
  %1006 = or i1 %1004, %1005, !dbg !79
  %1007 = select i1 %1006, float %763, float %764, !dbg !80
  %1008 = fcmp ogt float %1007, %773, !dbg !77
  %1009 = fcmp uno float %1007, 0.000000e+00, !dbg !78
  %1010 = or i1 %1008, %1009, !dbg !79
  %1011 = select i1 %1010, float %1007, float %773, !dbg !80
  %1012 = fcmp ogt float %1011, %774, !dbg !77
  %1013 = fcmp uno float %1011, 0.000000e+00, !dbg !78
  %1014 = or i1 %1012, %1013, !dbg !79
  %1015 = select i1 %1014, float %1011, float %774, !dbg !80
  %1016 = fcmp ogt float %1015, %783, !dbg !77
  %1017 = fcmp uno float %1015, 0.000000e+00, !dbg !78
  %1018 = or i1 %1016, %1017, !dbg !79
  %1019 = select i1 %1018, float %1015, float %783, !dbg !80
  %1020 = fcmp ogt float %1019, %784, !dbg !77
  %1021 = fcmp uno float %1019, 0.000000e+00, !dbg !78
  %1022 = or i1 %1020, %1021, !dbg !79
  %1023 = select i1 %1022, float %1019, float %784, !dbg !80
  %1024 = fcmp ogt float %1023, %793, !dbg !77
  %1025 = fcmp uno float %1023, 0.000000e+00, !dbg !78
  %1026 = or i1 %1024, %1025, !dbg !79
  %1027 = select i1 %1026, float %1023, float %793, !dbg !80
  %1028 = fcmp ogt float %1027, %794, !dbg !77
  %1029 = fcmp uno float %1027, 0.000000e+00, !dbg !78
  %1030 = or i1 %1028, %1029, !dbg !79
  %1031 = select i1 %1030, float %1027, float %794, !dbg !80
  %1032 = bitcast float %1003 to i32, !dbg !75
  %1033 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1032, i32 16, i32 31), !dbg !75
  %1034 = bitcast i32 %1033 to float, !dbg !75
  %1035 = fcmp ogt float %1003, %1034, !dbg !77
  %1036 = fcmp uno float %1003, 0.000000e+00, !dbg !78
  %1037 = or i1 %1036, %1035, !dbg !79
  %1038 = select i1 %1037, float %1003, float %1034, !dbg !80
  %1039 = bitcast float %1038 to i32, !dbg !75
  %1040 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 8, i32 31), !dbg !75
  %1041 = bitcast i32 %1040 to float, !dbg !75
  %1042 = fcmp ogt float %1038, %1041, !dbg !77
  %1043 = fcmp uno float %1038, 0.000000e+00, !dbg !78
  %1044 = or i1 %1042, %1043, !dbg !79
  %1045 = select i1 %1044, float %1038, float %1041, !dbg !80
  %1046 = bitcast float %1045 to i32, !dbg !75
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1046, i32 4, i32 31), !dbg !75
  %1048 = bitcast i32 %1047 to float, !dbg !75
  %1049 = fcmp ogt float %1045, %1048, !dbg !77
  %1050 = fcmp uno float %1045, 0.000000e+00, !dbg !78
  %1051 = or i1 %1049, %1050, !dbg !79
  %1052 = select i1 %1051, float %1045, float %1048, !dbg !80
  %1053 = bitcast float %1052 to i32, !dbg !75
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1053, i32 2, i32 31), !dbg !75
  %1055 = bitcast i32 %1054 to float, !dbg !75
  %1056 = fcmp ogt float %1052, %1055, !dbg !77
  %1057 = fcmp uno float %1052, 0.000000e+00, !dbg !78
  %1058 = or i1 %1056, %1057, !dbg !79
  %1059 = select i1 %1058, float %1052, float %1055, !dbg !80
  %1060 = bitcast float %1059 to i32, !dbg !75
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 1, i32 31), !dbg !75
  %1062 = bitcast i32 %1061 to float, !dbg !75
  %1063 = fcmp ogt float %1059, %1062, !dbg !77
  %1064 = fcmp uno float %1059, 0.000000e+00, !dbg !78
  %1065 = or i1 %1063, %1064, !dbg !79
  %1066 = bitcast float %1031 to i32, !dbg !75
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 16, i32 31), !dbg !75
  %1068 = bitcast i32 %1067 to float, !dbg !75
  %1069 = fcmp ogt float %1031, %1068, !dbg !77
  %1070 = fcmp uno float %1031, 0.000000e+00, !dbg !78
  %1071 = or i1 %1070, %1069, !dbg !79
  %1072 = select i1 %1071, float %1031, float %1068, !dbg !80
  %1073 = bitcast float %1072 to i32, !dbg !75
  %1074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1073, i32 8, i32 31), !dbg !75
  %1075 = bitcast i32 %1074 to float, !dbg !75
  %1076 = fcmp ogt float %1072, %1075, !dbg !77
  %1077 = fcmp uno float %1072, 0.000000e+00, !dbg !78
  %1078 = or i1 %1076, %1077, !dbg !79
  %1079 = select i1 %1078, float %1072, float %1075, !dbg !80
  %1080 = bitcast float %1079 to i32, !dbg !75
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 4, i32 31), !dbg !75
  %1082 = bitcast i32 %1081 to float, !dbg !75
  %1083 = fcmp ogt float %1079, %1082, !dbg !77
  %1084 = fcmp uno float %1079, 0.000000e+00, !dbg !78
  %1085 = or i1 %1083, %1084, !dbg !79
  %1086 = select i1 %1085, float %1079, float %1082, !dbg !80
  %1087 = bitcast float %1086 to i32, !dbg !75
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 2, i32 31), !dbg !75
  %1089 = bitcast i32 %1088 to float, !dbg !75
  %1090 = fcmp ogt float %1086, %1089, !dbg !77
  %1091 = fcmp uno float %1086, 0.000000e+00, !dbg !78
  %1092 = or i1 %1090, %1091, !dbg !79
  %1093 = select i1 %1092, float %1086, float %1089, !dbg !80
  %1094 = bitcast float %1093 to i32, !dbg !75
  %1095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1094, i32 1, i32 31), !dbg !75
  %1096 = bitcast i32 %1095 to float, !dbg !75
  %1097 = fcmp ogt float %1093, %1096, !dbg !77
  %1098 = fcmp uno float %1093, 0.000000e+00, !dbg !78
  %1099 = or i1 %1097, %1098, !dbg !79
  %1100 = select i1 %1065, i32 %1060, i32 %1061, !dbg !80
  %1101 = insertelement <1 x i32> poison, i32 %1100, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %929, <1 x i32> %1101, i1 %382) #5, !dbg !75
  %1102 = select i1 %1099, i32 %1094, i32 %1095, !dbg !80
  %1103 = insertelement <1 x i32> poison, i32 %1102, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %933, <1 x i32> %1103, i1 %382) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %936) #5, !dbg !75
  %1105 = bitcast i32 %1104 to float, !dbg !75
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1104, i32 8, i32 31), !dbg !75
  %1107 = bitcast i32 %1106 to float, !dbg !75
  %1108 = fcmp ogt float %1105, %1107, !dbg !77
  %1109 = fcmp uno float %1105, 0.000000e+00, !dbg !78
  %1110 = or i1 %1109, %1108, !dbg !79
  %1111 = select i1 %1110, float %1105, float %1107, !dbg !80
  %1112 = bitcast float %1111 to i32, !dbg !75
  %1113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1112, i32 4, i32 31), !dbg !75
  %1114 = bitcast i32 %1113 to float, !dbg !75
  %1115 = fcmp ogt float %1111, %1114, !dbg !77
  %1116 = fcmp uno float %1111, 0.000000e+00, !dbg !78
  %1117 = or i1 %1115, %1116, !dbg !79
  %1118 = select i1 %1117, float %1111, float %1114, !dbg !80
  %1119 = bitcast float %1118 to i32, !dbg !75
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 2, i32 31), !dbg !75
  %1121 = bitcast i32 %1120 to float, !dbg !75
  %1122 = fcmp ogt float %1118, %1121, !dbg !77
  %1123 = fcmp uno float %1118, 0.000000e+00, !dbg !78
  %1124 = or i1 %1122, %1123, !dbg !79
  %1125 = select i1 %1124, float %1118, float %1121, !dbg !80
  %1126 = bitcast float %1125 to i32, !dbg !75
  %1127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1126, i32 1, i32 31), !dbg !75
  %1128 = bitcast i32 %1127 to float, !dbg !75
  %1129 = fcmp ogt float %1125, %1128, !dbg !77
  %1130 = fcmp uno float %1125, 0.000000e+00, !dbg !78
  %1131 = or i1 %1129, %1130, !dbg !79
  %1132 = select i1 %1131, i32 %1126, i32 %1127, !dbg !80
  %1133 = insertelement <1 x i32> poison, i32 %1132, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %1133, i1 %967) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %1135 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1136 = bitcast float %1134 to i32, !dbg !81
  %1137 = bitcast float %1135 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1136, i32 %1137, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1138 = load float, ptr addrspace(3) %974, align 4, !dbg !81
  %1139 = sext i32 %612 to i64, !dbg !82
  %1140 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1139, !dbg !82
  %1141 = fptrunc float %975 to bfloat, !dbg !74
  %1142 = and i32 %18, 510, !dbg !74
  %1143 = icmp eq i32 %1142, 0, !dbg !74
  %1144 = bitcast bfloat %1141 to i16, !dbg !74
  %1145 = and i1 %1143, %613, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1144, ptr addrspace(1) %1140, i1 %1145) #5, !dbg !74
  %1146 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1139, !dbg !83
  %1147 = fptrunc float %1138 to bfloat, !dbg !81
  %1148 = bitcast bfloat %1147 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1148, ptr addrspace(1) %1146, i1 %1145) #5, !dbg !81
  %1149 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1139, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1144, ptr addrspace(1) %1149, i1 %1145) #5, !dbg !85
  %1150 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1139, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1148, ptr addrspace(1) %1150, i1 %1145) #5, !dbg !87
  %1151 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1139, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1144, ptr addrspace(1) %1151, i1 %1145) #5, !dbg !89
  %1152 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1139, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1148, ptr addrspace(1) %1152, i1 %1145) #5, !dbg !91
  %1153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %670, i1 %41) #5, !dbg !92
  %1154 = extractvalue { i32, i32, i32, i32 } %1153, 0, !dbg !92
  %1155 = bitcast i32 %1154 to <2 x bfloat>, !dbg !92
  %1156 = extractvalue { i32, i32, i32, i32 } %1153, 1, !dbg !92
  %1157 = bitcast i32 %1156 to <2 x bfloat>, !dbg !92
  %1158 = extractvalue { i32, i32, i32, i32 } %1153, 2, !dbg !92
  %1159 = bitcast i32 %1158 to <2 x bfloat>, !dbg !92
  %1160 = extractvalue { i32, i32, i32, i32 } %1153, 3, !dbg !92
  %1161 = bitcast i32 %1160 to <2 x bfloat>, !dbg !92
  %1162 = extractelement <2 x bfloat> %1155, i64 0, !dbg !92
  %1163 = extractelement <2 x bfloat> %1155, i64 1, !dbg !92
  %1164 = extractelement <2 x bfloat> %1157, i64 0, !dbg !92
  %1165 = extractelement <2 x bfloat> %1157, i64 1, !dbg !92
  %1166 = extractelement <2 x bfloat> %1159, i64 0, !dbg !92
  %1167 = extractelement <2 x bfloat> %1159, i64 1, !dbg !92
  %1168 = extractelement <2 x bfloat> %1161, i64 0, !dbg !92
  %1169 = extractelement <2 x bfloat> %1161, i64 1, !dbg !92
  %1170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %671, i1 %41) #5, !dbg !92
  %1171 = extractvalue { i32, i32, i32, i32 } %1170, 0, !dbg !92
  %1172 = bitcast i32 %1171 to <2 x bfloat>, !dbg !92
  %1173 = extractvalue { i32, i32, i32, i32 } %1170, 1, !dbg !92
  %1174 = bitcast i32 %1173 to <2 x bfloat>, !dbg !92
  %1175 = extractvalue { i32, i32, i32, i32 } %1170, 2, !dbg !92
  %1176 = bitcast i32 %1175 to <2 x bfloat>, !dbg !92
  %1177 = extractvalue { i32, i32, i32, i32 } %1170, 3, !dbg !92
  %1178 = bitcast i32 %1177 to <2 x bfloat>, !dbg !92
  %1179 = extractelement <2 x bfloat> %1172, i64 0, !dbg !92
  %1180 = extractelement <2 x bfloat> %1172, i64 1, !dbg !92
  %1181 = extractelement <2 x bfloat> %1174, i64 0, !dbg !92
  %1182 = extractelement <2 x bfloat> %1174, i64 1, !dbg !92
  %1183 = extractelement <2 x bfloat> %1176, i64 0, !dbg !92
  %1184 = extractelement <2 x bfloat> %1176, i64 1, !dbg !92
  %1185 = extractelement <2 x bfloat> %1178, i64 0, !dbg !92
  %1186 = extractelement <2 x bfloat> %1178, i64 1, !dbg !92
  %1187 = fpext bfloat %1162 to float, !dbg !93
  %1188 = fpext bfloat %1163 to float, !dbg !93
  %1189 = fpext bfloat %1164 to float, !dbg !93
  %1190 = fpext bfloat %1165 to float, !dbg !93
  %1191 = fpext bfloat %1166 to float, !dbg !93
  %1192 = fpext bfloat %1167 to float, !dbg !93
  %1193 = fpext bfloat %1168 to float, !dbg !93
  %1194 = fpext bfloat %1169 to float, !dbg !93
  %1195 = fpext bfloat %1179 to float, !dbg !93
  %1196 = fpext bfloat %1180 to float, !dbg !93
  %1197 = fpext bfloat %1181 to float, !dbg !93
  %1198 = fpext bfloat %1182 to float, !dbg !93
  %1199 = fpext bfloat %1183 to float, !dbg !93
  %1200 = fpext bfloat %1184 to float, !dbg !93
  %1201 = fpext bfloat %1185 to float, !dbg !93
  %1202 = fpext bfloat %1186 to float, !dbg !93
  %.inv = fcmp oge float %970, 0.000000e+00, !dbg !94
  %1203 = select i1 %.inv, float 0.000000e+00, float %970, !dbg !94
  %.inv17 = fcmp oge float %971, 0.000000e+00, !dbg !94
  %1204 = select i1 %.inv17, float 0.000000e+00, float %971, !dbg !94
  %1205 = fsub float 0.000000e+00, %1203, !dbg !96
  %1206 = fsub float 0.000000e+00, %1204, !dbg !96
  %.inv18 = fcmp ole float %1134, 0.000000e+00, !dbg !97
  %1207 = select i1 %.inv18, float 0.000000e+00, float %1134, !dbg !97
  %.inv19 = fcmp ole float %1135, 0.000000e+00, !dbg !97
  %1208 = select i1 %.inv19, float 0.000000e+00, float %1135, !dbg !97
  %1209 = fcmp ogt float %1205, %1207, !dbg !99
  %1210 = fcmp ogt float %1206, %1208, !dbg !99
  %1211 = fcmp uno float %1205, 0.000000e+00, !dbg !101
  %1212 = fcmp uno float %1206, 0.000000e+00, !dbg !101
  %1213 = or i1 %1211, %1209, !dbg !102
  %1214 = or i1 %1212, %1210, !dbg !102
  %1215 = select i1 %1213, float %1205, float %1207, !dbg !103
  %1216 = select i1 %1214, float %1206, float %1208, !dbg !103
  %1217 = fmul float %1215, 0x3F80204080000000, !dbg !104
  %1218 = fmul float %1216, 0x3F80204080000000, !dbg !104
  %1219 = fcmp ogt float %1217, 0x3EE4F8B580000000, !dbg !105
  %1220 = fcmp ogt float %1218, 0x3EE4F8B580000000, !dbg !105
  %1221 = fcmp uno float %1217, 0.000000e+00, !dbg !107
  %1222 = fcmp uno float %1218, 0.000000e+00, !dbg !107
  %1223 = or i1 %1219, %1221, !dbg !108
  %1224 = or i1 %1220, %1222, !dbg !108
  %1225 = select i1 %1223, float %1217, float 0x3EE4F8B580000000, !dbg !109
  %1226 = select i1 %1224, float %1218, float 0x3EE4F8B580000000, !dbg !109
  %1227 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1225), !dbg !110
  %1228 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1226), !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1229 = bitcast float %1227 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1229, i1 true) #5, !dbg !111
  %1230 = bitcast float %1228 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1230, i1 true) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1231 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %383, !dbg !111
  %1232 = load float, ptr addrspace(3) %1231, align 8, !dbg !111
  %1233 = fmul float %1232, %1187, !dbg !111
  %1234 = fmul float %1232, %1188, !dbg !111
  %1235 = fmul float %1232, %1189, !dbg !111
  %1236 = fmul float %1232, %1190, !dbg !111
  %1237 = fmul float %1232, %1191, !dbg !111
  %1238 = fmul float %1232, %1192, !dbg !111
  %1239 = fmul float %1232, %1193, !dbg !111
  %1240 = fmul float %1232, %1194, !dbg !111
  %1241 = fmul float %1232, %1195, !dbg !111
  %1242 = fmul float %1232, %1196, !dbg !111
  %1243 = fmul float %1232, %1197, !dbg !111
  %1244 = fmul float %1232, %1198, !dbg !111
  %1245 = fmul float %1232, %1199, !dbg !111
  %1246 = fmul float %1232, %1200, !dbg !111
  %1247 = fmul float %1232, %1201, !dbg !111
  %1248 = fmul float %1232, %1202, !dbg !111
  %1249 = tail call float @llvm.nvvm.round.f(float %1233) #5, !dbg !112
  %1250 = tail call float @llvm.nvvm.round.f(float %1234) #5, !dbg !112
  %1251 = tail call float @llvm.nvvm.round.f(float %1235) #5, !dbg !112
  %1252 = tail call float @llvm.nvvm.round.f(float %1236) #5, !dbg !112
  %1253 = tail call float @llvm.nvvm.round.f(float %1237) #5, !dbg !112
  %1254 = tail call float @llvm.nvvm.round.f(float %1238) #5, !dbg !112
  %1255 = tail call float @llvm.nvvm.round.f(float %1239) #5, !dbg !112
  %1256 = tail call float @llvm.nvvm.round.f(float %1240) #5, !dbg !112
  %1257 = tail call float @llvm.nvvm.round.f(float %1241) #5, !dbg !112
  %1258 = tail call float @llvm.nvvm.round.f(float %1242) #5, !dbg !112
  %1259 = tail call float @llvm.nvvm.round.f(float %1243) #5, !dbg !112
  %1260 = tail call float @llvm.nvvm.round.f(float %1244) #5, !dbg !112
  %1261 = tail call float @llvm.nvvm.round.f(float %1245) #5, !dbg !112
  %1262 = tail call float @llvm.nvvm.round.f(float %1246) #5, !dbg !112
  %1263 = tail call float @llvm.nvvm.round.f(float %1247) #5, !dbg !112
  %1264 = tail call float @llvm.nvvm.round.f(float %1248) #5, !dbg !112
  %1265 = insertelement <4 x float> poison, float %1249, i64 0, !dbg !113
  %1266 = insertelement <4 x float> %1265, float %1250, i64 1, !dbg !113
  %1267 = insertelement <4 x float> %1266, float %1251, i64 2, !dbg !113
  %1268 = insertelement <4 x float> %1267, float %1252, i64 3, !dbg !113
  %1269 = fcmp ogt <4 x float> %1268, splat (float -1.270000e+02), !dbg !113
  %1270 = fcmp uno <4 x float> %1268, zeroinitializer, !dbg !115
  %1271 = or <4 x i1> %1269, %1270, !dbg !116
  %1272 = select <4 x i1> %1271, <4 x float> %1268, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1273 = fcmp olt <4 x float> %1272, splat (float 1.270000e+02), !dbg !118
  %1274 = fcmp uno <4 x float> %1272, zeroinitializer, !dbg !120
  %1275 = or <4 x i1> %1273, %1274, !dbg !121
  %1276 = fptosi <4 x float> %1272 to <4 x i8>, !dbg !122
  %1277 = select <4 x i1> %1275, <4 x i8> %1276, <4 x i8> splat (i8 127), !dbg !123
  %1278 = insertelement <4 x float> poison, float %1253, i64 0, !dbg !113
  %1279 = insertelement <4 x float> %1278, float %1254, i64 1, !dbg !113
  %1280 = insertelement <4 x float> %1279, float %1255, i64 2, !dbg !113
  %1281 = insertelement <4 x float> %1280, float %1256, i64 3, !dbg !113
  %1282 = fcmp ogt <4 x float> %1281, splat (float -1.270000e+02), !dbg !113
  %1283 = fcmp uno <4 x float> %1281, zeroinitializer, !dbg !115
  %1284 = or <4 x i1> %1282, %1283, !dbg !116
  %1285 = select <4 x i1> %1284, <4 x float> %1281, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1286 = fcmp olt <4 x float> %1285, splat (float 1.270000e+02), !dbg !118
  %1287 = fcmp uno <4 x float> %1285, zeroinitializer, !dbg !120
  %1288 = or <4 x i1> %1286, %1287, !dbg !121
  %1289 = fptosi <4 x float> %1285 to <4 x i8>, !dbg !122
  %1290 = select <4 x i1> %1288, <4 x i8> %1289, <4 x i8> splat (i8 127), !dbg !123
  %1291 = insertelement <4 x float> poison, float %1257, i64 0, !dbg !113
  %1292 = insertelement <4 x float> %1291, float %1258, i64 1, !dbg !113
  %1293 = insertelement <4 x float> %1292, float %1259, i64 2, !dbg !113
  %1294 = insertelement <4 x float> %1293, float %1260, i64 3, !dbg !113
  %1295 = fcmp ogt <4 x float> %1294, splat (float -1.270000e+02), !dbg !113
  %1296 = fcmp uno <4 x float> %1294, zeroinitializer, !dbg !115
  %1297 = or <4 x i1> %1295, %1296, !dbg !116
  %1298 = select <4 x i1> %1297, <4 x float> %1294, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1299 = fcmp olt <4 x float> %1298, splat (float 1.270000e+02), !dbg !118
  %1300 = fcmp uno <4 x float> %1298, zeroinitializer, !dbg !120
  %1301 = or <4 x i1> %1299, %1300, !dbg !121
  %1302 = fptosi <4 x float> %1298 to <4 x i8>, !dbg !122
  %1303 = select <4 x i1> %1301, <4 x i8> %1302, <4 x i8> splat (i8 127), !dbg !123
  %1304 = insertelement <4 x float> poison, float %1261, i64 0, !dbg !113
  %1305 = insertelement <4 x float> %1304, float %1262, i64 1, !dbg !113
  %1306 = insertelement <4 x float> %1305, float %1263, i64 2, !dbg !113
  %1307 = insertelement <4 x float> %1306, float %1264, i64 3, !dbg !113
  %1308 = fcmp ogt <4 x float> %1307, splat (float -1.270000e+02), !dbg !113
  %1309 = fcmp uno <4 x float> %1307, zeroinitializer, !dbg !115
  %1310 = or <4 x i1> %1308, %1309, !dbg !116
  %1311 = select <4 x i1> %1310, <4 x float> %1307, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1312 = fcmp olt <4 x float> %1311, splat (float 1.270000e+02), !dbg !118
  %1313 = fcmp uno <4 x float> %1311, zeroinitializer, !dbg !120
  %1314 = or <4 x i1> %1312, %1313, !dbg !121
  %1315 = fptosi <4 x float> %1311 to <4 x i8>, !dbg !122
  %1316 = select <4 x i1> %1314, <4 x i8> %1315, <4 x i8> splat (i8 127), !dbg !123
  %1317 = getelementptr i8, ptr addrspace(1) %10, i64 %36, !dbg !124
  %1318 = bitcast <4 x i8> %1277 to i32, !dbg !125
  %1319 = bitcast <4 x i8> %1290 to i32, !dbg !125
  %1320 = bitcast <4 x i8> %1303 to i32, !dbg !125
  %1321 = bitcast <4 x i8> %1316 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1318, i32 %1319, i32 %1320, i32 %1321, ptr addrspace(1) %1317, i1 %41) #5, !dbg !125
  %1322 = getelementptr i8, ptr addrspace(1) %11, i64 %36, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1318, i32 %1319, i32 %1320, i32 %1321, ptr addrspace(1) %1322, i1 %41) #5, !dbg !127
  %1323 = getelementptr i8, ptr addrspace(1) %12, i64 %36, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1318, i32 %1319, i32 %1320, i32 %1321, ptr addrspace(1) %1323, i1 %41) #5, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 59, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 101, column: 53, scope: !6)
!93 = !DILocation(line: 101, column: 115, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !95)
!95 = !DILocation(line: 103, column: 46, scope: !6)
!96 = !DILocation(line: 104, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !98)
!98 = !DILocation(line: 105, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !100)
!100 = !DILocation(line: 106, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !100)
!104 = !DILocation(line: 108, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !106)
!106 = !DILocation(line: 111, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !106)
!110 = !DILocation(line: 114, column: 25, scope: !6)
!111 = !DILocation(line: 117, column: 24, scope: !6)
!112 = !DILocation(line: 118, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !114)
!114 = !DILocation(line: 121, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !119)
!119 = !DILocation(line: 123, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !119)
!122 = !DILocation(line: 125, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !119)
!124 = !DILocation(line: 126, column: 29, scope: !6)
!125 = !DILocation(line: 126, column: 53, scope: !6)
!126 = !DILocation(line: 127, column: 30, scope: !6)
!127 = !DILocation(line: 127, column: 54, scope: !6)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 95, column: 4, scope: !6)
