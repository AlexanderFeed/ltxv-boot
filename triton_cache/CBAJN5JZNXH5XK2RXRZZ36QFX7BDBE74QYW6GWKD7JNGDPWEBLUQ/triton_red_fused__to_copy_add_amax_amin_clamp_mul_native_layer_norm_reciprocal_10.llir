; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 7, !dbg !11
  %.lobit = and i32 %20, 1, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = or disjoint i32 %22, 2, !dbg !12
  %24 = icmp slt i32 %22, 3600, !dbg !13
  %25 = icmp slt i32 %23, 3600, !dbg !13
  %26 = icmp slt i32 %18, 3600, !dbg !13
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 2040, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = shl i32 %19, 4, !dbg !14
  %31 = and i32 %30, 2032, !dbg !14
  %32 = or disjoint i32 %31, 8, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = sext i32 %23 to i64, !dbg !15
  %36 = getelementptr bfloat, ptr addrspace(1) %4, i64 %35, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !16
  %53 = bitcast i16 %52 to bfloat, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !16
  %70 = bitcast i16 %69 to bfloat, !dbg !16
  %71 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %72 = getelementptr bfloat, ptr addrspace(1) %5, i64 %35, !dbg !17
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %24) #5, !dbg !18
  %89 = bitcast i16 %88 to bfloat, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %25) #5, !dbg !18
  %106 = bitcast i16 %105 to bfloat, !dbg !18
  %107 = mul i32 %22, 3072, !dbg !19
  %108 = mul i32 %23, 3072, !dbg !19
  %109 = mul i32 %17, 12288, !dbg !19
  %110 = or disjoint i32 %109, 3072, !dbg !19
  %111 = add i32 %109, 6144, !dbg !19
  %112 = add i32 %109, 9216, !dbg !19
  %.inv = fcmp oge bfloat %53, 0xR0000, !dbg !20
  %113 = select i1 %.inv, bfloat 0xR0000, bfloat %53, !dbg !20
  %114 = fpext bfloat %113 to float, !dbg !20
  %.inv4 = fcmp oge bfloat %70, 0xR0000, !dbg !20
  %115 = select i1 %.inv4, bfloat 0xR0000, bfloat %70, !dbg !20
  %116 = fpext bfloat %115 to float, !dbg !20
  %117 = fsub float 0.000000e+00, %114, !dbg !24
  %118 = fsub float 0.000000e+00, %116, !dbg !24
  %.inv5 = fcmp ole bfloat %89, 0xR0000, !dbg !25
  %119 = select i1 %.inv5, bfloat 0xR0000, bfloat %89, !dbg !25
  %120 = fpext bfloat %119 to float, !dbg !25
  %.inv6 = fcmp ole bfloat %106, 0xR0000, !dbg !25
  %121 = select i1 %.inv6, bfloat 0xR0000, bfloat %106, !dbg !25
  %122 = fpext bfloat %121 to float, !dbg !25
  %123 = fcmp ogt float %117, %120, !dbg !27
  %124 = fcmp ogt float %118, %122, !dbg !27
  %125 = fcmp uno float %117, 0.000000e+00, !dbg !29
  %126 = fcmp uno float %118, 0.000000e+00, !dbg !29
  %127 = or i1 %125, %123, !dbg !30
  %128 = or i1 %126, %124, !dbg !30
  %129 = select i1 %127, float %117, float %120, !dbg !31
  %130 = select i1 %128, float %118, float %122, !dbg !31
  %131 = fmul float %129, 0x3F80204080000000, !dbg !32
  %132 = fmul float %130, 0x3F80204080000000, !dbg !32
  %133 = fcmp ogt float %131, 0x3EE4F8B580000000, !dbg !33
  %134 = fcmp ogt float %132, 0x3EE4F8B580000000, !dbg !33
  %135 = fcmp uno float %131, 0.000000e+00, !dbg !35
  %136 = fcmp uno float %132, 0.000000e+00, !dbg !35
  %137 = or i1 %133, %135, !dbg !36
  %138 = or i1 %134, %136, !dbg !36
  %139 = select i1 %137, float %131, float 0x3EE4F8B580000000, !dbg !37
  %140 = select i1 %138, float %132, float 0x3EE4F8B580000000, !dbg !37
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %141 = and i32 %30, 4080
  %142 = lshr i32 %30, 7
  %.idx = and i32 %142, 16
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %144 = getelementptr bfloat, ptr addrspace(3) %143, i32 %141
  %145 = or disjoint i32 %141, 8
  %146 = getelementptr bfloat, ptr addrspace(3) %143, i32 %145
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %148 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 4112
  %149 = getelementptr float, ptr addrspace(3) %143, i32 %141
  %150 = or disjoint i32 %141, 4
  %151 = lshr i32 %30, 9
  %152 = and i32 %151, 4
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150
  %155 = getelementptr float, ptr addrspace(3) %143, i32 %145
  %156 = or disjoint i32 %141, 12
  %157 = getelementptr float, ptr addrspace(3) %153, i32 %156
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28
  %159 = or disjoint i32 %28, 2052
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %159
  %161 = zext nneg i32 %31 to i64, !dbg !38
  %162 = zext nneg i32 %29 to i64, !dbg !38
  %163 = zext nneg i32 %28 to i64, !dbg !38
  %164 = sext i32 %109 to i64, !dbg !38
  %165 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 4
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 12
  %167 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 4116
  %168 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 4120
  br label %169, !dbg !38

169:                                              ; preds = %16, %._crit_edge
  %170 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %16 ], [ %938, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %16 ], [ %939, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %16 ], [ %940, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %16 ], [ %941, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %16 ], [ %942, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %16 ], [ %943, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %16 ], [ %944, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %16 ], [ %945, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %16 ], [ %946, %._crit_edge ]
  %180 = phi float [ 0.000000e+00, %16 ], [ %947, %._crit_edge ]
  %181 = phi float [ 0.000000e+00, %16 ], [ %948, %._crit_edge ]
  %182 = phi float [ 0.000000e+00, %16 ], [ %949, %._crit_edge ]
  %183 = phi float [ 0.000000e+00, %16 ], [ %950, %._crit_edge ]
  %184 = phi float [ 0.000000e+00, %16 ], [ %951, %._crit_edge ]
  %185 = phi float [ 0.000000e+00, %16 ], [ %952, %._crit_edge ]
  %186 = phi float [ 0.000000e+00, %16 ], [ %953, %._crit_edge ]
  %187 = phi float [ 0.000000e+00, %16 ], [ %954, %._crit_edge ]
  %188 = phi float [ 0.000000e+00, %16 ], [ %955, %._crit_edge ]
  %189 = phi float [ 0.000000e+00, %16 ], [ %956, %._crit_edge ]
  %190 = phi float [ 0.000000e+00, %16 ], [ %957, %._crit_edge ]
  %191 = phi float [ 0.000000e+00, %16 ], [ %958, %._crit_edge ]
  %192 = phi float [ 0.000000e+00, %16 ], [ %959, %._crit_edge ]
  %193 = phi float [ 0.000000e+00, %16 ], [ %960, %._crit_edge ]
  %194 = phi float [ 0.000000e+00, %16 ], [ %961, %._crit_edge ]
  %195 = phi float [ 0.000000e+00, %16 ], [ %962, %._crit_edge ]
  %196 = phi float [ 0.000000e+00, %16 ], [ %963, %._crit_edge ]
  %197 = phi float [ 0.000000e+00, %16 ], [ %964, %._crit_edge ]
  %198 = phi float [ 0.000000e+00, %16 ], [ %965, %._crit_edge ]
  %199 = phi float [ 0.000000e+00, %16 ], [ %966, %._crit_edge ]
  %200 = phi float [ 0.000000e+00, %16 ], [ %967, %._crit_edge ]
  %201 = phi float [ 0.000000e+00, %16 ], [ %968, %._crit_edge ]
  %202 = phi float [ 0.000000e+00, %16 ], [ %969, %._crit_edge ]
  %203 = phi float [ 0.000000e+00, %16 ], [ %906, %._crit_edge ]
  %204 = phi float [ 0.000000e+00, %16 ], [ %907, %._crit_edge ]
  %205 = phi float [ 0.000000e+00, %16 ], [ %908, %._crit_edge ]
  %206 = phi float [ 0.000000e+00, %16 ], [ %909, %._crit_edge ]
  %207 = phi float [ 0.000000e+00, %16 ], [ %910, %._crit_edge ]
  %208 = phi float [ 0.000000e+00, %16 ], [ %911, %._crit_edge ]
  %209 = phi float [ 0.000000e+00, %16 ], [ %912, %._crit_edge ]
  %210 = phi float [ 0.000000e+00, %16 ], [ %913, %._crit_edge ]
  %211 = phi float [ 0.000000e+00, %16 ], [ %914, %._crit_edge ]
  %212 = phi float [ 0.000000e+00, %16 ], [ %915, %._crit_edge ]
  %213 = phi float [ 0.000000e+00, %16 ], [ %916, %._crit_edge ]
  %214 = phi float [ 0.000000e+00, %16 ], [ %917, %._crit_edge ]
  %215 = phi float [ 0.000000e+00, %16 ], [ %918, %._crit_edge ]
  %216 = phi float [ 0.000000e+00, %16 ], [ %919, %._crit_edge ]
  %217 = phi float [ 0.000000e+00, %16 ], [ %920, %._crit_edge ]
  %218 = phi float [ 0.000000e+00, %16 ], [ %921, %._crit_edge ]
  %219 = phi float [ 0.000000e+00, %16 ], [ %922, %._crit_edge ]
  %220 = phi float [ 0.000000e+00, %16 ], [ %923, %._crit_edge ]
  %221 = phi float [ 0.000000e+00, %16 ], [ %924, %._crit_edge ]
  %222 = phi float [ 0.000000e+00, %16 ], [ %925, %._crit_edge ]
  %223 = phi float [ 0.000000e+00, %16 ], [ %926, %._crit_edge ]
  %224 = phi float [ 0.000000e+00, %16 ], [ %927, %._crit_edge ]
  %225 = phi float [ 0.000000e+00, %16 ], [ %928, %._crit_edge ]
  %226 = phi float [ 0.000000e+00, %16 ], [ %929, %._crit_edge ]
  %227 = phi float [ 0.000000e+00, %16 ], [ %930, %._crit_edge ]
  %228 = phi float [ 0.000000e+00, %16 ], [ %931, %._crit_edge ]
  %229 = phi float [ 0.000000e+00, %16 ], [ %932, %._crit_edge ]
  %230 = phi float [ 0.000000e+00, %16 ], [ %933, %._crit_edge ]
  %231 = phi float [ 0.000000e+00, %16 ], [ %934, %._crit_edge ]
  %232 = phi float [ 0.000000e+00, %16 ], [ %935, %._crit_edge ]
  %233 = phi float [ 0.000000e+00, %16 ], [ %936, %._crit_edge ]
  %234 = phi float [ 0.000000e+00, %16 ], [ %937, %._crit_edge ]
  %235 = phi <32 x float> [ zeroinitializer, %16 ], [ %905, %._crit_edge ]
  %236 = or disjoint i64 %indvars.iv, %163, !dbg !39
  %237 = or disjoint i64 %indvars.iv, %162, !dbg !39
  %238 = or disjoint i64 %indvars.iv, %161, !dbg !39
  %239 = icmp samesign ult i64 %236, 3072, !dbg !40
  %240 = icmp samesign ult i64 %238, 3072, !dbg !40
  %241 = trunc nuw nsw i64 %238 to i32, !dbg !41
  %242 = add i32 %107, %241, !dbg !41
  %243 = trunc nuw nsw i64 %238 to i32, !dbg !41
  %244 = or disjoint i32 %243, 4, !dbg !41
  %245 = add i32 %244, %107, !dbg !41
  %246 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %247 = or disjoint i32 %32, %246, !dbg !41
  %248 = add i32 %247, %107, !dbg !41
  %249 = trunc nuw nsw i64 %238 to i32, !dbg !41
  %250 = or disjoint i32 %249, 12, !dbg !41
  %251 = add i32 %250, %107, !dbg !41
  %252 = add i32 %108, %241, !dbg !41
  %253 = add i32 %244, %108, !dbg !41
  %254 = add i32 %247, %108, !dbg !41
  %255 = add i32 %250, %108, !dbg !41
  %256 = or disjoint i64 %236, %164, !dbg !41
  %257 = trunc nuw nsw i64 %236 to i32, !dbg !41
  %258 = add i32 %110, %257, !dbg !41
  %259 = add i32 %111, %257, !dbg !41
  %260 = add i32 %112, %257, !dbg !41
  %261 = sext i32 %242 to i64, !dbg !42
  %262 = getelementptr bfloat, ptr addrspace(1) %0, i64 %261, !dbg !42
  %263 = sext i32 %248 to i64, !dbg !42
  %264 = getelementptr bfloat, ptr addrspace(1) %0, i64 %263, !dbg !42
  %265 = sext i32 %252 to i64, !dbg !42
  %266 = getelementptr bfloat, ptr addrspace(1) %0, i64 %265, !dbg !42
  %267 = sext i32 %254 to i64, !dbg !42
  %268 = getelementptr bfloat, ptr addrspace(1) %0, i64 %267, !dbg !42
  %269 = and i1 %26, %239, !dbg !43
  %270 = and i1 %24, %240, !dbg !43
  %271 = and i1 %25, %240, !dbg !43
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %262, i1 %270) #5, !dbg !44
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !44
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !44
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !44
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !44
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %264, i1 %270) #5, !dbg !44
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !44
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !44
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !44
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !44
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %266, i1 %271) #5, !dbg !44
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !44
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !44
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !44
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !44
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %268, i1 %271) #5, !dbg !44
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !44
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !44
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !44
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %273, i32 %274, i32 %275, i32 %276, i1 true) #5, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %146, i32 %278, i32 %279, i32 %280, i32 %281, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %292 = add nuw nsw i64 %236, 6144, !dbg !46
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %292, !dbg !47
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %237, !dbg !47
  %294 = getelementptr bfloat, ptr addrspace(1) %2, i64 %292, !dbg !48
  %295 = getelementptr i32, ptr addrspace(1) %3, i64 %261, !dbg !49
  %296 = sext i32 %245 to i64, !dbg !49
  %297 = getelementptr i32, ptr addrspace(1) %3, i64 %296, !dbg !49
  %298 = getelementptr i32, ptr addrspace(1) %3, i64 %263, !dbg !49
  %299 = sext i32 %251 to i64, !dbg !49
  %300 = getelementptr i32, ptr addrspace(1) %3, i64 %299, !dbg !49
  %301 = getelementptr i32, ptr addrspace(1) %3, i64 %265, !dbg !49
  %302 = sext i32 %253 to i64, !dbg !49
  %303 = getelementptr i32, ptr addrspace(1) %3, i64 %302, !dbg !49
  %304 = getelementptr i32, ptr addrspace(1) %3, i64 %267, !dbg !49
  %305 = sext i32 %255 to i64, !dbg !49
  %306 = getelementptr i32, ptr addrspace(1) %3, i64 %305, !dbg !49
  %307 = getelementptr bfloat, ptr addrspace(1) %6, i64 %236, !dbg !50
  %308 = getelementptr bfloat, ptr addrspace(1) %7, i64 %236, !dbg !51
  %309 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !45
  %310 = load <8 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %283, i32 %284, i32 %285, i32 %286, i1 true) #5, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %146, i32 %288, i32 %289, i32 %290, i32 %291, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %311 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !45
  %312 = load <8 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !45
  %313 = shufflevector <8 x bfloat> %309, <8 x bfloat> %310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %314 = shufflevector <8 x bfloat> %311, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %315 = shufflevector <32 x bfloat> %313, <32 x bfloat> %314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %316 = shufflevector <8 x bfloat> %312, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %317 = shufflevector <32 x bfloat> %315, <32 x bfloat> %316, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !45
  %318 = fpext <32 x bfloat> %317 to <32 x float>, !dbg !45
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %293, i1 %239) #5, !dbg !52
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !52
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !52
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !52
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !52
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 %239) #5, !dbg !52
  %325 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !52
  %326 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !52
  %327 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !52
  %328 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !52
  %329 = insertelement <8 x i32> poison, i32 %320, i64 0, !dbg !52
  %330 = insertelement <8 x i32> %329, i32 %321, i64 1, !dbg !52
  %331 = insertelement <8 x i32> %330, i32 %322, i64 2, !dbg !52
  %332 = insertelement <8 x i32> %331, i32 %323, i64 3, !dbg !52
  %333 = insertelement <8 x i32> %332, i32 %325, i64 4, !dbg !52
  %334 = insertelement <8 x i32> %333, i32 %326, i64 5, !dbg !52
  %335 = insertelement <8 x i32> %334, i32 %327, i64 6, !dbg !52
  %336 = insertelement <8 x i32> %335, i32 %328, i64 7, !dbg !52
  %337 = bitcast <8 x i32> %336 to <8 x float>, !dbg !52
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %294, i1 %239) #5, !dbg !53
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !53
  %340 = bitcast i32 %339 to <2 x bfloat>, !dbg !53
  %341 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !53
  %342 = bitcast i32 %341 to <2 x bfloat>, !dbg !53
  %343 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !53
  %344 = bitcast i32 %343 to <2 x bfloat>, !dbg !53
  %345 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !53
  %346 = bitcast i32 %345 to <2 x bfloat>, !dbg !53
  %347 = shufflevector <2 x bfloat> %340, <2 x bfloat> %342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %348 = shufflevector <2 x bfloat> %344, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %349 = shufflevector <8 x bfloat> %347, <8 x bfloat> %348, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !54
  %350 = shufflevector <2 x bfloat> %344, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %351 = shufflevector <8 x bfloat> %349, <8 x bfloat> %350, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !54
  %352 = shufflevector <2 x bfloat> %346, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %353 = shufflevector <8 x bfloat> %351, <8 x bfloat> %352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !54
  %354 = shufflevector <2 x bfloat> %346, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %355 = shufflevector <8 x bfloat> %353, <8 x bfloat> %354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !54
  %356 = fpext <8 x bfloat> %355 to <8 x float>, !dbg !54
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %295, i1 %270) #5, !dbg !55
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !55
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !55
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !55
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !55
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %270) #5, !dbg !55
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !55
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !55
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !55
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !55
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %298, i1 %270) #5, !dbg !55
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !55
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !55
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !55
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !55
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 %270) #5, !dbg !55
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !55
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !55
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !55
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !55
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %301, i1 %271) #5, !dbg !55
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !55
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !55
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !55
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !55
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %303, i1 %271) #5, !dbg !55
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !55
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !55
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !55
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !55
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %304, i1 %271) #5, !dbg !55
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !55
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !55
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !55
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !55
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %306, i1 %271) #5, !dbg !55
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !55
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !55
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !55
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !55
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %307, i1 %239) #5, !dbg !56
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !56
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !56
  %400 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !56
  %401 = bitcast i32 %400 to <2 x bfloat>, !dbg !56
  %402 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !56
  %403 = bitcast i32 %402 to <2 x bfloat>, !dbg !56
  %404 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !56
  %405 = bitcast i32 %404 to <2 x bfloat>, !dbg !56
  %406 = shufflevector <2 x bfloat> %399, <2 x bfloat> %401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %407 = shufflevector <2 x bfloat> %403, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %408 = shufflevector <8 x bfloat> %406, <8 x bfloat> %407, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !57
  %409 = shufflevector <2 x bfloat> %403, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %410 = shufflevector <8 x bfloat> %408, <8 x bfloat> %409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !57
  %411 = shufflevector <2 x bfloat> %405, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %412 = shufflevector <8 x bfloat> %410, <8 x bfloat> %411, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !57
  %413 = shufflevector <2 x bfloat> %405, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %414 = shufflevector <8 x bfloat> %412, <8 x bfloat> %413, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !57
  %415 = fpext <8 x bfloat> %414 to <8 x float>, !dbg !57
  %416 = shufflevector <8 x float> %415, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !57
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %308, i1 %239) #5, !dbg !58
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !58
  %419 = bitcast i32 %418 to <2 x bfloat>, !dbg !58
  %420 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !58
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !58
  %422 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !58
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !58
  %424 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !58
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !58
  %426 = shufflevector <2 x bfloat> %419, <2 x bfloat> %421, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %427 = shufflevector <2 x bfloat> %423, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %428 = shufflevector <8 x bfloat> %426, <8 x bfloat> %427, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !59
  %429 = shufflevector <2 x bfloat> %423, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %430 = shufflevector <8 x bfloat> %428, <8 x bfloat> %429, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !59
  %431 = shufflevector <2 x bfloat> %425, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %432 = shufflevector <8 x bfloat> %430, <8 x bfloat> %431, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !59
  %433 = shufflevector <2 x bfloat> %425, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %434 = shufflevector <8 x bfloat> %432, <8 x bfloat> %433, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !59
  %435 = fpext <8 x bfloat> %434 to <8 x float>, !dbg !59
  %436 = shufflevector <8 x float> %435, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %437 = fadd <8 x float> %337, %356, !dbg !60
  %438 = shufflevector <8 x float> %437, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !60
  %439 = sitofp i32 %358 to float, !dbg !61
  %440 = sitofp i32 %359 to float, !dbg !61
  %441 = sitofp i32 %360 to float, !dbg !61
  %442 = sitofp i32 %361 to float, !dbg !61
  %443 = sitofp i32 %363 to float, !dbg !61
  %444 = sitofp i32 %364 to float, !dbg !61
  %445 = sitofp i32 %365 to float, !dbg !61
  %446 = sitofp i32 %366 to float, !dbg !61
  %447 = sitofp i32 %368 to float, !dbg !61
  %448 = sitofp i32 %369 to float, !dbg !61
  %449 = sitofp i32 %370 to float, !dbg !61
  %450 = sitofp i32 %371 to float, !dbg !61
  %451 = sitofp i32 %373 to float, !dbg !61
  %452 = sitofp i32 %374 to float, !dbg !61
  %453 = sitofp i32 %375 to float, !dbg !61
  %454 = sitofp i32 %376 to float, !dbg !61
  %455 = sitofp i32 %378 to float, !dbg !61
  %456 = sitofp i32 %379 to float, !dbg !61
  %457 = sitofp i32 %380 to float, !dbg !61
  %458 = sitofp i32 %381 to float, !dbg !61
  %459 = sitofp i32 %383 to float, !dbg !61
  %460 = sitofp i32 %384 to float, !dbg !61
  %461 = sitofp i32 %385 to float, !dbg !61
  %462 = sitofp i32 %386 to float, !dbg !61
  %463 = sitofp i32 %388 to float, !dbg !61
  %464 = sitofp i32 %389 to float, !dbg !61
  %465 = sitofp i32 %390 to float, !dbg !61
  %466 = sitofp i32 %391 to float, !dbg !61
  %467 = sitofp i32 %393 to float, !dbg !61
  %468 = sitofp i32 %394 to float, !dbg !61
  %469 = sitofp i32 %395 to float, !dbg !61
  %470 = sitofp i32 %396 to float, !dbg !61
  %471 = fmul float %139, %439, !dbg !62
  %472 = fmul float %139, %440, !dbg !62
  %473 = fmul float %139, %441, !dbg !62
  %474 = fmul float %139, %442, !dbg !62
  %475 = fmul float %139, %443, !dbg !62
  %476 = fmul float %139, %444, !dbg !62
  %477 = fmul float %139, %445, !dbg !62
  %478 = fmul float %139, %446, !dbg !62
  %479 = fmul float %139, %447, !dbg !62
  %480 = fmul float %139, %448, !dbg !62
  %481 = fmul float %139, %449, !dbg !62
  %482 = fmul float %139, %450, !dbg !62
  %483 = fmul float %139, %451, !dbg !62
  %484 = fmul float %139, %452, !dbg !62
  %485 = fmul float %139, %453, !dbg !62
  %486 = fmul float %139, %454, !dbg !62
  %487 = fmul float %140, %455, !dbg !62
  %488 = fmul float %140, %456, !dbg !62
  %489 = fmul float %140, %457, !dbg !62
  %490 = fmul float %140, %458, !dbg !62
  %491 = fmul float %140, %459, !dbg !62
  %492 = fmul float %140, %460, !dbg !62
  %493 = fmul float %140, %461, !dbg !62
  %494 = fmul float %140, %462, !dbg !62
  %495 = fmul float %140, %463, !dbg !62
  %496 = fmul float %140, %464, !dbg !62
  %497 = fmul float %140, %465, !dbg !62
  %498 = fmul float %140, %466, !dbg !62
  %499 = fmul float %140, %467, !dbg !62
  %500 = fmul float %140, %468, !dbg !62
  %501 = fmul float %140, %469, !dbg !62
  %502 = fmul float %140, %470, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %503 = bitcast float %471 to i32, !dbg !62
  %504 = bitcast float %472 to i32, !dbg !62
  %505 = bitcast float %473 to i32, !dbg !62
  %506 = bitcast float %474 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %503, i32 %504, i32 %505, i32 %506, i1 true) #5, !dbg !62
  %507 = bitcast float %475 to i32, !dbg !62
  %508 = bitcast float %476 to i32, !dbg !62
  %509 = bitcast float %477 to i32, !dbg !62
  %510 = bitcast float %478 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %154, i32 %507, i32 %508, i32 %509, i32 %510, i1 true) #5, !dbg !62
  %511 = bitcast float %479 to i32, !dbg !62
  %512 = bitcast float %480 to i32, !dbg !62
  %513 = bitcast float %481 to i32, !dbg !62
  %514 = bitcast float %482 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %511, i32 %512, i32 %513, i32 %514, i1 true) #5, !dbg !62
  %515 = bitcast float %483 to i32, !dbg !62
  %516 = bitcast float %484 to i32, !dbg !62
  %517 = bitcast float %485 to i32, !dbg !62
  %518 = bitcast float %486 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %157, i32 %515, i32 %516, i32 %517, i32 %518, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %519 = load <8 x float>, ptr addrspace(3) %158, align 16, !dbg !62
  %520 = load <8 x float>, ptr addrspace(3) %160, align 16, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %521 = bitcast float %487 to i32, !dbg !62
  %522 = bitcast float %488 to i32, !dbg !62
  %523 = bitcast float %489 to i32, !dbg !62
  %524 = bitcast float %490 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %521, i32 %522, i32 %523, i32 %524, i1 true) #5, !dbg !62
  %525 = bitcast float %491 to i32, !dbg !62
  %526 = bitcast float %492 to i32, !dbg !62
  %527 = bitcast float %493 to i32, !dbg !62
  %528 = bitcast float %494 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %154, i32 %525, i32 %526, i32 %527, i32 %528, i1 true) #5, !dbg !62
  %529 = bitcast float %495 to i32, !dbg !62
  %530 = bitcast float %496 to i32, !dbg !62
  %531 = bitcast float %497 to i32, !dbg !62
  %532 = bitcast float %498 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %529, i32 %530, i32 %531, i32 %532, i1 true) #5, !dbg !62
  %533 = bitcast float %499 to i32, !dbg !62
  %534 = bitcast float %500 to i32, !dbg !62
  %535 = bitcast float %501 to i32, !dbg !62
  %536 = bitcast float %502 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %157, i32 %533, i32 %534, i32 %535, i32 %536, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %537 = load <8 x float>, ptr addrspace(3) %158, align 16, !dbg !62
  %538 = load <8 x float>, ptr addrspace(3) %160, align 16, !dbg !62
  %539 = shufflevector <8 x float> %519, <8 x float> %520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %540 = shufflevector <8 x float> %537, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %541 = shufflevector <32 x float> %539, <32 x float> %540, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %542 = shufflevector <8 x float> %538, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %543 = shufflevector <32 x float> %541, <32 x float> %542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !63
  %544 = fmul <32 x float> %543, %416, !dbg !63
  %545 = fadd <32 x float> %544, %436, !dbg !64
  %546 = fmul <32 x float> %438, %545, !dbg !65
  %547 = fadd <32 x float> %546, %318, !dbg !66
  br i1 %170, label %._crit_edge, label %548, !dbg !67

548:                                              ; preds = %169
  %549 = fsub <32 x float> %547, %235, !dbg !69
  %550 = extractelement <32 x float> %549, i64 0, !dbg !69
  %551 = fsub <32 x float> %547, %235, !dbg !69
  %552 = extractelement <32 x float> %551, i64 1, !dbg !69
  %553 = fsub <32 x float> %547, %235, !dbg !69
  %554 = extractelement <32 x float> %553, i64 2, !dbg !69
  %555 = fsub <32 x float> %547, %235, !dbg !69
  %556 = extractelement <32 x float> %555, i64 3, !dbg !69
  %557 = fsub <32 x float> %547, %235, !dbg !69
  %558 = extractelement <32 x float> %557, i64 4, !dbg !69
  %559 = fsub <32 x float> %547, %235, !dbg !69
  %560 = extractelement <32 x float> %559, i64 5, !dbg !69
  %561 = fsub <32 x float> %547, %235, !dbg !69
  %562 = extractelement <32 x float> %561, i64 6, !dbg !69
  %563 = fsub <32 x float> %547, %235, !dbg !69
  %564 = extractelement <32 x float> %563, i64 7, !dbg !69
  %565 = fsub <32 x float> %547, %235, !dbg !69
  %566 = extractelement <32 x float> %565, i64 8, !dbg !69
  %567 = fsub <32 x float> %547, %235, !dbg !69
  %568 = extractelement <32 x float> %567, i64 9, !dbg !69
  %569 = fsub <32 x float> %547, %235, !dbg !69
  %570 = extractelement <32 x float> %569, i64 10, !dbg !69
  %571 = fsub <32 x float> %547, %235, !dbg !69
  %572 = extractelement <32 x float> %571, i64 11, !dbg !69
  %573 = fsub <32 x float> %547, %235, !dbg !69
  %574 = extractelement <32 x float> %573, i64 12, !dbg !69
  %575 = fsub <32 x float> %547, %235, !dbg !69
  %576 = extractelement <32 x float> %575, i64 13, !dbg !69
  %577 = fsub <32 x float> %547, %235, !dbg !69
  %578 = extractelement <32 x float> %577, i64 14, !dbg !69
  %579 = fsub <32 x float> %547, %235, !dbg !69
  %580 = extractelement <32 x float> %579, i64 15, !dbg !69
  %581 = fsub <32 x float> %547, %235, !dbg !69
  %582 = extractelement <32 x float> %581, i64 16, !dbg !69
  %583 = fsub <32 x float> %547, %235, !dbg !69
  %584 = extractelement <32 x float> %583, i64 17, !dbg !69
  %585 = fsub <32 x float> %547, %235, !dbg !69
  %586 = extractelement <32 x float> %585, i64 18, !dbg !69
  %587 = fsub <32 x float> %547, %235, !dbg !69
  %588 = extractelement <32 x float> %587, i64 19, !dbg !69
  %589 = fsub <32 x float> %547, %235, !dbg !69
  %590 = extractelement <32 x float> %589, i64 20, !dbg !69
  %591 = fsub <32 x float> %547, %235, !dbg !69
  %592 = extractelement <32 x float> %591, i64 21, !dbg !69
  %593 = fsub <32 x float> %547, %235, !dbg !69
  %594 = extractelement <32 x float> %593, i64 22, !dbg !69
  %595 = fsub <32 x float> %547, %235, !dbg !69
  %596 = extractelement <32 x float> %595, i64 23, !dbg !69
  %597 = fsub <32 x float> %547, %235, !dbg !69
  %598 = extractelement <32 x float> %597, i64 24, !dbg !69
  %599 = fsub <32 x float> %547, %235, !dbg !69
  %600 = extractelement <32 x float> %599, i64 25, !dbg !69
  %601 = fsub <32 x float> %547, %235, !dbg !69
  %602 = extractelement <32 x float> %601, i64 26, !dbg !69
  %603 = fsub <32 x float> %547, %235, !dbg !69
  %604 = extractelement <32 x float> %603, i64 27, !dbg !69
  %605 = fsub <32 x float> %547, %235, !dbg !69
  %606 = extractelement <32 x float> %605, i64 28, !dbg !69
  %607 = fsub <32 x float> %547, %235, !dbg !69
  %608 = extractelement <32 x float> %607, i64 29, !dbg !69
  %609 = fsub <32 x float> %547, %235, !dbg !69
  %610 = extractelement <32 x float> %609, i64 30, !dbg !69
  %611 = fsub <32 x float> %547, %235, !dbg !69
  %612 = extractelement <32 x float> %611, i64 31, !dbg !69
  %613 = fadd float %171, 1.000000e+00, !dbg !70
  %614 = fadd float %172, 1.000000e+00, !dbg !70
  %615 = fadd float %173, 1.000000e+00, !dbg !70
  %616 = fadd float %174, 1.000000e+00, !dbg !70
  %617 = fadd float %175, 1.000000e+00, !dbg !70
  %618 = fadd float %176, 1.000000e+00, !dbg !70
  %619 = fadd float %177, 1.000000e+00, !dbg !70
  %620 = fadd float %178, 1.000000e+00, !dbg !70
  %621 = fadd float %179, 1.000000e+00, !dbg !70
  %622 = fadd float %180, 1.000000e+00, !dbg !70
  %623 = fadd float %181, 1.000000e+00, !dbg !70
  %624 = fadd float %182, 1.000000e+00, !dbg !70
  %625 = fadd float %183, 1.000000e+00, !dbg !70
  %626 = fadd float %184, 1.000000e+00, !dbg !70
  %627 = fadd float %185, 1.000000e+00, !dbg !70
  %628 = fadd float %186, 1.000000e+00, !dbg !70
  %629 = fadd float %187, 1.000000e+00, !dbg !70
  %630 = fadd float %188, 1.000000e+00, !dbg !70
  %631 = fadd float %189, 1.000000e+00, !dbg !70
  %632 = fadd float %190, 1.000000e+00, !dbg !70
  %633 = fadd float %191, 1.000000e+00, !dbg !70
  %634 = fadd float %192, 1.000000e+00, !dbg !70
  %635 = fadd float %193, 1.000000e+00, !dbg !70
  %636 = fadd float %194, 1.000000e+00, !dbg !70
  %637 = fadd float %195, 1.000000e+00, !dbg !70
  %638 = fadd float %196, 1.000000e+00, !dbg !70
  %639 = fadd float %197, 1.000000e+00, !dbg !70
  %640 = fadd float %198, 1.000000e+00, !dbg !70
  %641 = fadd float %199, 1.000000e+00, !dbg !70
  %642 = fadd float %200, 1.000000e+00, !dbg !70
  %643 = fadd float %201, 1.000000e+00, !dbg !70
  %644 = fadd float %202, 1.000000e+00, !dbg !70
  %645 = tail call float @llvm.nvvm.div.full(float %550, float %613), !dbg !71
  %646 = tail call float @llvm.nvvm.div.full(float %552, float %614), !dbg !71
  %647 = tail call float @llvm.nvvm.div.full(float %554, float %615), !dbg !71
  %648 = tail call float @llvm.nvvm.div.full(float %556, float %616), !dbg !71
  %649 = tail call float @llvm.nvvm.div.full(float %558, float %617), !dbg !71
  %650 = tail call float @llvm.nvvm.div.full(float %560, float %618), !dbg !71
  %651 = tail call float @llvm.nvvm.div.full(float %562, float %619), !dbg !71
  %652 = tail call float @llvm.nvvm.div.full(float %564, float %620), !dbg !71
  %653 = tail call float @llvm.nvvm.div.full(float %566, float %621), !dbg !71
  %654 = tail call float @llvm.nvvm.div.full(float %568, float %622), !dbg !71
  %655 = tail call float @llvm.nvvm.div.full(float %570, float %623), !dbg !71
  %656 = tail call float @llvm.nvvm.div.full(float %572, float %624), !dbg !71
  %657 = tail call float @llvm.nvvm.div.full(float %574, float %625), !dbg !71
  %658 = tail call float @llvm.nvvm.div.full(float %576, float %626), !dbg !71
  %659 = tail call float @llvm.nvvm.div.full(float %578, float %627), !dbg !71
  %660 = tail call float @llvm.nvvm.div.full(float %580, float %628), !dbg !71
  %661 = tail call float @llvm.nvvm.div.full(float %582, float %629), !dbg !71
  %662 = tail call float @llvm.nvvm.div.full(float %584, float %630), !dbg !71
  %663 = tail call float @llvm.nvvm.div.full(float %586, float %631), !dbg !71
  %664 = tail call float @llvm.nvvm.div.full(float %588, float %632), !dbg !71
  %665 = tail call float @llvm.nvvm.div.full(float %590, float %633), !dbg !71
  %666 = tail call float @llvm.nvvm.div.full(float %592, float %634), !dbg !71
  %667 = tail call float @llvm.nvvm.div.full(float %594, float %635), !dbg !71
  %668 = tail call float @llvm.nvvm.div.full(float %596, float %636), !dbg !71
  %669 = tail call float @llvm.nvvm.div.full(float %598, float %637), !dbg !71
  %670 = tail call float @llvm.nvvm.div.full(float %600, float %638), !dbg !71
  %671 = tail call float @llvm.nvvm.div.full(float %602, float %639), !dbg !71
  %672 = tail call float @llvm.nvvm.div.full(float %604, float %640), !dbg !71
  %673 = tail call float @llvm.nvvm.div.full(float %606, float %641), !dbg !71
  %674 = tail call float @llvm.nvvm.div.full(float %608, float %642), !dbg !71
  %675 = tail call float @llvm.nvvm.div.full(float %610, float %643), !dbg !71
  %676 = tail call float @llvm.nvvm.div.full(float %612, float %644), !dbg !71
  %677 = insertelement <32 x float> poison, float %645, i64 0, !dbg !72
  %678 = insertelement <32 x float> %677, float %646, i64 1, !dbg !72
  %679 = insertelement <32 x float> %678, float %647, i64 2, !dbg !72
  %680 = insertelement <32 x float> %679, float %648, i64 3, !dbg !72
  %681 = insertelement <32 x float> %680, float %649, i64 4, !dbg !72
  %682 = insertelement <32 x float> %681, float %650, i64 5, !dbg !72
  %683 = insertelement <32 x float> %682, float %651, i64 6, !dbg !72
  %684 = insertelement <32 x float> %683, float %652, i64 7, !dbg !72
  %685 = insertelement <32 x float> %684, float %653, i64 8, !dbg !72
  %686 = insertelement <32 x float> %685, float %654, i64 9, !dbg !72
  %687 = insertelement <32 x float> %686, float %655, i64 10, !dbg !72
  %688 = insertelement <32 x float> %687, float %656, i64 11, !dbg !72
  %689 = insertelement <32 x float> %688, float %657, i64 12, !dbg !72
  %690 = insertelement <32 x float> %689, float %658, i64 13, !dbg !72
  %691 = insertelement <32 x float> %690, float %659, i64 14, !dbg !72
  %692 = insertelement <32 x float> %691, float %660, i64 15, !dbg !72
  %693 = insertelement <32 x float> %692, float %661, i64 16, !dbg !72
  %694 = insertelement <32 x float> %693, float %662, i64 17, !dbg !72
  %695 = insertelement <32 x float> %694, float %663, i64 18, !dbg !72
  %696 = insertelement <32 x float> %695, float %664, i64 19, !dbg !72
  %697 = insertelement <32 x float> %696, float %665, i64 20, !dbg !72
  %698 = insertelement <32 x float> %697, float %666, i64 21, !dbg !72
  %699 = insertelement <32 x float> %698, float %667, i64 22, !dbg !72
  %700 = insertelement <32 x float> %699, float %668, i64 23, !dbg !72
  %701 = insertelement <32 x float> %700, float %669, i64 24, !dbg !72
  %702 = insertelement <32 x float> %701, float %670, i64 25, !dbg !72
  %703 = insertelement <32 x float> %702, float %671, i64 26, !dbg !72
  %704 = insertelement <32 x float> %703, float %672, i64 27, !dbg !72
  %705 = insertelement <32 x float> %704, float %673, i64 28, !dbg !72
  %706 = insertelement <32 x float> %705, float %674, i64 29, !dbg !72
  %707 = insertelement <32 x float> %706, float %675, i64 30, !dbg !72
  %708 = insertelement <32 x float> %707, float %676, i64 31, !dbg !72
  %709 = fadd <32 x float> %235, %708, !dbg !72
  %710 = fsub <32 x float> %547, %709, !dbg !73
  %711 = fsub <32 x float> %547, %709, !dbg !73
  %712 = fsub <32 x float> %547, %709, !dbg !73
  %713 = fsub <32 x float> %547, %709, !dbg !73
  %714 = fsub <32 x float> %547, %709, !dbg !73
  %715 = fsub <32 x float> %547, %709, !dbg !73
  %716 = fsub <32 x float> %547, %709, !dbg !73
  %717 = fsub <32 x float> %547, %709, !dbg !73
  %718 = fsub <32 x float> %547, %709, !dbg !73
  %719 = fsub <32 x float> %547, %709, !dbg !73
  %720 = fsub <32 x float> %547, %709, !dbg !73
  %721 = fsub <32 x float> %547, %709, !dbg !73
  %722 = fsub <32 x float> %547, %709, !dbg !73
  %723 = fsub <32 x float> %547, %709, !dbg !73
  %724 = fsub <32 x float> %547, %709, !dbg !73
  %725 = fsub <32 x float> %547, %709, !dbg !73
  %726 = fsub <32 x float> %547, %709, !dbg !73
  %727 = fsub <32 x float> %547, %709, !dbg !73
  %728 = fsub <32 x float> %547, %709, !dbg !73
  %729 = fsub <32 x float> %547, %709, !dbg !73
  %730 = fsub <32 x float> %547, %709, !dbg !73
  %731 = fsub <32 x float> %547, %709, !dbg !73
  %732 = fsub <32 x float> %547, %709, !dbg !73
  %733 = fsub <32 x float> %547, %709, !dbg !73
  %734 = fsub <32 x float> %547, %709, !dbg !73
  %735 = fsub <32 x float> %547, %709, !dbg !73
  %736 = fsub <32 x float> %547, %709, !dbg !73
  %737 = fsub <32 x float> %547, %709, !dbg !73
  %738 = fsub <32 x float> %547, %709, !dbg !73
  %739 = fsub <32 x float> %547, %709, !dbg !73
  %740 = fsub <32 x float> %547, %709, !dbg !73
  %741 = fsub <32 x float> %547, %709, !dbg !73
  %742 = fmul <32 x float> %549, %710, !dbg !74
  %743 = extractelement <32 x float> %742, i64 0, !dbg !74
  %744 = fmul <32 x float> %551, %711, !dbg !74
  %745 = extractelement <32 x float> %744, i64 1, !dbg !74
  %746 = fmul <32 x float> %553, %712, !dbg !74
  %747 = extractelement <32 x float> %746, i64 2, !dbg !74
  %748 = fmul <32 x float> %555, %713, !dbg !74
  %749 = extractelement <32 x float> %748, i64 3, !dbg !74
  %750 = fmul <32 x float> %557, %714, !dbg !74
  %751 = extractelement <32 x float> %750, i64 4, !dbg !74
  %752 = fmul <32 x float> %559, %715, !dbg !74
  %753 = extractelement <32 x float> %752, i64 5, !dbg !74
  %754 = fmul <32 x float> %561, %716, !dbg !74
  %755 = extractelement <32 x float> %754, i64 6, !dbg !74
  %756 = fmul <32 x float> %563, %717, !dbg !74
  %757 = extractelement <32 x float> %756, i64 7, !dbg !74
  %758 = fmul <32 x float> %565, %718, !dbg !74
  %759 = extractelement <32 x float> %758, i64 8, !dbg !74
  %760 = fmul <32 x float> %567, %719, !dbg !74
  %761 = extractelement <32 x float> %760, i64 9, !dbg !74
  %762 = fmul <32 x float> %569, %720, !dbg !74
  %763 = extractelement <32 x float> %762, i64 10, !dbg !74
  %764 = fmul <32 x float> %571, %721, !dbg !74
  %765 = extractelement <32 x float> %764, i64 11, !dbg !74
  %766 = fmul <32 x float> %573, %722, !dbg !74
  %767 = extractelement <32 x float> %766, i64 12, !dbg !74
  %768 = fmul <32 x float> %575, %723, !dbg !74
  %769 = extractelement <32 x float> %768, i64 13, !dbg !74
  %770 = fmul <32 x float> %577, %724, !dbg !74
  %771 = extractelement <32 x float> %770, i64 14, !dbg !74
  %772 = fmul <32 x float> %579, %725, !dbg !74
  %773 = extractelement <32 x float> %772, i64 15, !dbg !74
  %774 = fmul <32 x float> %581, %726, !dbg !74
  %775 = extractelement <32 x float> %774, i64 16, !dbg !74
  %776 = fmul <32 x float> %583, %727, !dbg !74
  %777 = extractelement <32 x float> %776, i64 17, !dbg !74
  %778 = fmul <32 x float> %585, %728, !dbg !74
  %779 = extractelement <32 x float> %778, i64 18, !dbg !74
  %780 = fmul <32 x float> %587, %729, !dbg !74
  %781 = extractelement <32 x float> %780, i64 19, !dbg !74
  %782 = fmul <32 x float> %589, %730, !dbg !74
  %783 = extractelement <32 x float> %782, i64 20, !dbg !74
  %784 = fmul <32 x float> %591, %731, !dbg !74
  %785 = extractelement <32 x float> %784, i64 21, !dbg !74
  %786 = fmul <32 x float> %593, %732, !dbg !74
  %787 = extractelement <32 x float> %786, i64 22, !dbg !74
  %788 = fmul <32 x float> %595, %733, !dbg !74
  %789 = extractelement <32 x float> %788, i64 23, !dbg !74
  %790 = fmul <32 x float> %597, %734, !dbg !74
  %791 = extractelement <32 x float> %790, i64 24, !dbg !74
  %792 = fmul <32 x float> %599, %735, !dbg !74
  %793 = extractelement <32 x float> %792, i64 25, !dbg !74
  %794 = fmul <32 x float> %601, %736, !dbg !74
  %795 = extractelement <32 x float> %794, i64 26, !dbg !74
  %796 = fmul <32 x float> %603, %737, !dbg !74
  %797 = extractelement <32 x float> %796, i64 27, !dbg !74
  %798 = fmul <32 x float> %605, %738, !dbg !74
  %799 = extractelement <32 x float> %798, i64 28, !dbg !74
  %800 = fmul <32 x float> %607, %739, !dbg !74
  %801 = extractelement <32 x float> %800, i64 29, !dbg !74
  %802 = fmul <32 x float> %609, %740, !dbg !74
  %803 = extractelement <32 x float> %802, i64 30, !dbg !74
  %804 = fmul <32 x float> %611, %741, !dbg !74
  %805 = extractelement <32 x float> %804, i64 31, !dbg !74
  %806 = fadd float %203, %743, !dbg !75
  %807 = fadd float %204, %745, !dbg !75
  %808 = fadd float %205, %747, !dbg !75
  %809 = fadd float %206, %749, !dbg !75
  %810 = fadd float %207, %751, !dbg !75
  %811 = fadd float %208, %753, !dbg !75
  %812 = fadd float %209, %755, !dbg !75
  %813 = fadd float %210, %757, !dbg !75
  %814 = fadd float %211, %759, !dbg !75
  %815 = fadd float %212, %761, !dbg !75
  %816 = fadd float %213, %763, !dbg !75
  %817 = fadd float %214, %765, !dbg !75
  %818 = fadd float %215, %767, !dbg !75
  %819 = fadd float %216, %769, !dbg !75
  %820 = fadd float %217, %771, !dbg !75
  %821 = fadd float %218, %773, !dbg !75
  %822 = fadd float %219, %775, !dbg !75
  %823 = fadd float %220, %777, !dbg !75
  %824 = fadd float %221, %779, !dbg !75
  %825 = fadd float %222, %781, !dbg !75
  %826 = fadd float %223, %783, !dbg !75
  %827 = fadd float %224, %785, !dbg !75
  %828 = fadd float %225, %787, !dbg !75
  %829 = fadd float %226, %789, !dbg !75
  %830 = fadd float %227, %791, !dbg !75
  %831 = fadd float %228, %793, !dbg !75
  %832 = fadd float %229, %795, !dbg !75
  %833 = fadd float %230, %797, !dbg !75
  %834 = fadd float %231, %799, !dbg !75
  %835 = fadd float %232, %801, !dbg !75
  %836 = fadd float %233, %803, !dbg !75
  %837 = fadd float %234, %805, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %169, %548
  %838 = phi float [ %806, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %839 = phi float [ %807, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %840 = phi float [ %808, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %841 = phi float [ %809, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %842 = phi float [ %810, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %843 = phi float [ %811, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %844 = phi float [ %812, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %845 = phi float [ %813, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %846 = phi float [ %814, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %847 = phi float [ %815, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %848 = phi float [ %816, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %849 = phi float [ %817, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %850 = phi float [ %818, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %851 = phi float [ %819, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %852 = phi float [ %820, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %853 = phi float [ %821, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %854 = phi float [ %822, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %855 = phi float [ %823, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %856 = phi float [ %824, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %857 = phi float [ %825, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %858 = phi float [ %826, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %859 = phi float [ %827, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %860 = phi float [ %828, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %861 = phi float [ %829, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %862 = phi float [ %830, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %863 = phi float [ %831, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %864 = phi float [ %832, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %865 = phi float [ %833, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %866 = phi float [ %834, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %867 = phi float [ %835, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %868 = phi float [ %836, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %869 = phi float [ %837, %548 ], [ 0.000000e+00, %169 ], !dbg !68
  %870 = phi float [ %613, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %871 = phi float [ %614, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %872 = phi float [ %615, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %873 = phi float [ %616, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %874 = phi float [ %617, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %875 = phi float [ %618, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %876 = phi float [ %619, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %877 = phi float [ %620, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %878 = phi float [ %621, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %879 = phi float [ %622, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %880 = phi float [ %623, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %881 = phi float [ %624, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %882 = phi float [ %625, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %883 = phi float [ %626, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %884 = phi float [ %627, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %885 = phi float [ %628, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %886 = phi float [ %629, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %887 = phi float [ %630, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %888 = phi float [ %631, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %889 = phi float [ %632, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %890 = phi float [ %633, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %891 = phi float [ %634, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %892 = phi float [ %635, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %893 = phi float [ %636, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %894 = phi float [ %637, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %895 = phi float [ %638, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %896 = phi float [ %639, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %897 = phi float [ %640, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %898 = phi float [ %641, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %899 = phi float [ %642, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %900 = phi float [ %643, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %901 = phi float [ %644, %548 ], [ 1.000000e+00, %169 ], !dbg !68
  %902 = phi <32 x float> [ %709, %548 ], [ %547, %169 ]
  %903 = insertelement <32 x i1> poison, i1 %269, i64 0, !dbg !76
  %904 = shufflevector <32 x i1> %903, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !76
  %905 = select <32 x i1> %904, <32 x float> %902, <32 x float> %235, !dbg !76
  %906 = select i1 %269, float %838, float %203, !dbg !77
  %907 = select i1 %269, float %839, float %204, !dbg !77
  %908 = select i1 %269, float %840, float %205, !dbg !77
  %909 = select i1 %269, float %841, float %206, !dbg !77
  %910 = select i1 %269, float %842, float %207, !dbg !77
  %911 = select i1 %269, float %843, float %208, !dbg !77
  %912 = select i1 %269, float %844, float %209, !dbg !77
  %913 = select i1 %269, float %845, float %210, !dbg !77
  %914 = select i1 %269, float %846, float %211, !dbg !77
  %915 = select i1 %269, float %847, float %212, !dbg !77
  %916 = select i1 %269, float %848, float %213, !dbg !77
  %917 = select i1 %269, float %849, float %214, !dbg !77
  %918 = select i1 %269, float %850, float %215, !dbg !77
  %919 = select i1 %269, float %851, float %216, !dbg !77
  %920 = select i1 %269, float %852, float %217, !dbg !77
  %921 = select i1 %269, float %853, float %218, !dbg !77
  %922 = select i1 %269, float %854, float %219, !dbg !77
  %923 = select i1 %269, float %855, float %220, !dbg !77
  %924 = select i1 %269, float %856, float %221, !dbg !77
  %925 = select i1 %269, float %857, float %222, !dbg !77
  %926 = select i1 %269, float %858, float %223, !dbg !77
  %927 = select i1 %269, float %859, float %224, !dbg !77
  %928 = select i1 %269, float %860, float %225, !dbg !77
  %929 = select i1 %269, float %861, float %226, !dbg !77
  %930 = select i1 %269, float %862, float %227, !dbg !77
  %931 = select i1 %269, float %863, float %228, !dbg !77
  %932 = select i1 %269, float %864, float %229, !dbg !77
  %933 = select i1 %269, float %865, float %230, !dbg !77
  %934 = select i1 %269, float %866, float %231, !dbg !77
  %935 = select i1 %269, float %867, float %232, !dbg !77
  %936 = select i1 %269, float %868, float %233, !dbg !77
  %937 = select i1 %269, float %869, float %234, !dbg !77
  %938 = select i1 %269, float %870, float %171, !dbg !78
  %939 = select i1 %269, float %871, float %172, !dbg !78
  %940 = select i1 %269, float %872, float %173, !dbg !78
  %941 = select i1 %269, float %873, float %174, !dbg !78
  %942 = select i1 %269, float %874, float %175, !dbg !78
  %943 = select i1 %269, float %875, float %176, !dbg !78
  %944 = select i1 %269, float %876, float %177, !dbg !78
  %945 = select i1 %269, float %877, float %178, !dbg !78
  %946 = select i1 %269, float %878, float %179, !dbg !78
  %947 = select i1 %269, float %879, float %180, !dbg !78
  %948 = select i1 %269, float %880, float %181, !dbg !78
  %949 = select i1 %269, float %881, float %182, !dbg !78
  %950 = select i1 %269, float %882, float %183, !dbg !78
  %951 = select i1 %269, float %883, float %184, !dbg !78
  %952 = select i1 %269, float %884, float %185, !dbg !78
  %953 = select i1 %269, float %885, float %186, !dbg !78
  %954 = select i1 %269, float %886, float %187, !dbg !78
  %955 = select i1 %269, float %887, float %188, !dbg !78
  %956 = select i1 %269, float %888, float %189, !dbg !78
  %957 = select i1 %269, float %889, float %190, !dbg !78
  %958 = select i1 %269, float %890, float %191, !dbg !78
  %959 = select i1 %269, float %891, float %192, !dbg !78
  %960 = select i1 %269, float %892, float %193, !dbg !78
  %961 = select i1 %269, float %893, float %194, !dbg !78
  %962 = select i1 %269, float %894, float %195, !dbg !78
  %963 = select i1 %269, float %895, float %196, !dbg !78
  %964 = select i1 %269, float %896, float %197, !dbg !78
  %965 = select i1 %269, float %897, float %198, !dbg !78
  %966 = select i1 %269, float %898, float %199, !dbg !78
  %967 = select i1 %269, float %899, float %200, !dbg !78
  %968 = select i1 %269, float %900, float %201, !dbg !78
  %969 = select i1 %269, float %901, float %202, !dbg !78
  %970 = getelementptr bfloat, ptr addrspace(1) %8, i64 %256, !dbg !79
  %971 = sext i32 %258 to i64, !dbg !79
  %972 = getelementptr bfloat, ptr addrspace(1) %8, i64 %971, !dbg !79
  %973 = sext i32 %259 to i64, !dbg !79
  %974 = getelementptr bfloat, ptr addrspace(1) %8, i64 %973, !dbg !79
  %975 = sext i32 %260 to i64, !dbg !79
  %976 = getelementptr bfloat, ptr addrspace(1) %8, i64 %975, !dbg !79
  %977 = extractelement <32 x float> %547, i64 0, !dbg !80
  %978 = fptrunc float %977 to bfloat, !dbg !80
  %979 = extractelement <32 x float> %547, i64 1, !dbg !80
  %980 = fptrunc float %979 to bfloat, !dbg !80
  %981 = extractelement <32 x float> %547, i64 2, !dbg !80
  %982 = fptrunc float %981 to bfloat, !dbg !80
  %983 = extractelement <32 x float> %547, i64 3, !dbg !80
  %984 = fptrunc float %983 to bfloat, !dbg !80
  %985 = extractelement <32 x float> %547, i64 4, !dbg !80
  %986 = fptrunc float %985 to bfloat, !dbg !80
  %987 = extractelement <32 x float> %547, i64 5, !dbg !80
  %988 = fptrunc float %987 to bfloat, !dbg !80
  %989 = extractelement <32 x float> %547, i64 6, !dbg !80
  %990 = fptrunc float %989 to bfloat, !dbg !80
  %991 = extractelement <32 x float> %547, i64 7, !dbg !80
  %992 = fptrunc float %991 to bfloat, !dbg !80
  %993 = extractelement <32 x float> %547, i64 8, !dbg !80
  %994 = fptrunc float %993 to bfloat, !dbg !80
  %995 = extractelement <32 x float> %547, i64 9, !dbg !80
  %996 = fptrunc float %995 to bfloat, !dbg !80
  %997 = extractelement <32 x float> %547, i64 10, !dbg !80
  %998 = fptrunc float %997 to bfloat, !dbg !80
  %999 = extractelement <32 x float> %547, i64 11, !dbg !80
  %1000 = fptrunc float %999 to bfloat, !dbg !80
  %1001 = extractelement <32 x float> %547, i64 12, !dbg !80
  %1002 = fptrunc float %1001 to bfloat, !dbg !80
  %1003 = extractelement <32 x float> %547, i64 13, !dbg !80
  %1004 = fptrunc float %1003 to bfloat, !dbg !80
  %1005 = extractelement <32 x float> %547, i64 14, !dbg !80
  %1006 = fptrunc float %1005 to bfloat, !dbg !80
  %1007 = extractelement <32 x float> %547, i64 15, !dbg !80
  %1008 = fptrunc float %1007 to bfloat, !dbg !80
  %1009 = extractelement <32 x float> %547, i64 16, !dbg !80
  %1010 = fptrunc float %1009 to bfloat, !dbg !80
  %1011 = extractelement <32 x float> %547, i64 17, !dbg !80
  %1012 = fptrunc float %1011 to bfloat, !dbg !80
  %1013 = extractelement <32 x float> %547, i64 18, !dbg !80
  %1014 = fptrunc float %1013 to bfloat, !dbg !80
  %1015 = extractelement <32 x float> %547, i64 19, !dbg !80
  %1016 = fptrunc float %1015 to bfloat, !dbg !80
  %1017 = extractelement <32 x float> %547, i64 20, !dbg !80
  %1018 = fptrunc float %1017 to bfloat, !dbg !80
  %1019 = extractelement <32 x float> %547, i64 21, !dbg !80
  %1020 = fptrunc float %1019 to bfloat, !dbg !80
  %1021 = extractelement <32 x float> %547, i64 22, !dbg !80
  %1022 = fptrunc float %1021 to bfloat, !dbg !80
  %1023 = extractelement <32 x float> %547, i64 23, !dbg !80
  %1024 = fptrunc float %1023 to bfloat, !dbg !80
  %1025 = extractelement <32 x float> %547, i64 24, !dbg !80
  %1026 = fptrunc float %1025 to bfloat, !dbg !80
  %1027 = extractelement <32 x float> %547, i64 25, !dbg !80
  %1028 = fptrunc float %1027 to bfloat, !dbg !80
  %1029 = extractelement <32 x float> %547, i64 26, !dbg !80
  %1030 = fptrunc float %1029 to bfloat, !dbg !80
  %1031 = extractelement <32 x float> %547, i64 27, !dbg !80
  %1032 = fptrunc float %1031 to bfloat, !dbg !80
  %1033 = extractelement <32 x float> %547, i64 28, !dbg !80
  %1034 = fptrunc float %1033 to bfloat, !dbg !80
  %1035 = extractelement <32 x float> %547, i64 29, !dbg !80
  %1036 = fptrunc float %1035 to bfloat, !dbg !80
  %1037 = extractelement <32 x float> %547, i64 30, !dbg !80
  %1038 = fptrunc float %1037 to bfloat, !dbg !80
  %1039 = extractelement <32 x float> %547, i64 31, !dbg !80
  %1040 = fptrunc float %1039 to bfloat, !dbg !80
  %1041 = insertelement <2 x bfloat> poison, bfloat %978, i64 0, !dbg !80
  %1042 = insertelement <2 x bfloat> %1041, bfloat %980, i64 1, !dbg !80
  %1043 = bitcast <2 x bfloat> %1042 to i32, !dbg !80
  %1044 = insertelement <2 x bfloat> poison, bfloat %982, i64 0, !dbg !80
  %1045 = insertelement <2 x bfloat> %1044, bfloat %984, i64 1, !dbg !80
  %1046 = bitcast <2 x bfloat> %1045 to i32, !dbg !80
  %1047 = insertelement <2 x bfloat> poison, bfloat %986, i64 0, !dbg !80
  %1048 = insertelement <2 x bfloat> %1047, bfloat %988, i64 1, !dbg !80
  %1049 = bitcast <2 x bfloat> %1048 to i32, !dbg !80
  %1050 = insertelement <2 x bfloat> poison, bfloat %990, i64 0, !dbg !80
  %1051 = insertelement <2 x bfloat> %1050, bfloat %992, i64 1, !dbg !80
  %1052 = bitcast <2 x bfloat> %1051 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1043, i32 %1046, i32 %1049, i32 %1052, ptr addrspace(1) %970, i1 %269) #5, !dbg !80
  %1053 = insertelement <2 x bfloat> poison, bfloat %994, i64 0, !dbg !80
  %1054 = insertelement <2 x bfloat> %1053, bfloat %996, i64 1, !dbg !80
  %1055 = bitcast <2 x bfloat> %1054 to i32, !dbg !80
  %1056 = insertelement <2 x bfloat> poison, bfloat %998, i64 0, !dbg !80
  %1057 = insertelement <2 x bfloat> %1056, bfloat %1000, i64 1, !dbg !80
  %1058 = bitcast <2 x bfloat> %1057 to i32, !dbg !80
  %1059 = insertelement <2 x bfloat> poison, bfloat %1002, i64 0, !dbg !80
  %1060 = insertelement <2 x bfloat> %1059, bfloat %1004, i64 1, !dbg !80
  %1061 = bitcast <2 x bfloat> %1060 to i32, !dbg !80
  %1062 = insertelement <2 x bfloat> poison, bfloat %1006, i64 0, !dbg !80
  %1063 = insertelement <2 x bfloat> %1062, bfloat %1008, i64 1, !dbg !80
  %1064 = bitcast <2 x bfloat> %1063 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1055, i32 %1058, i32 %1061, i32 %1064, ptr addrspace(1) %972, i1 %269) #5, !dbg !80
  %1065 = insertelement <2 x bfloat> poison, bfloat %1010, i64 0, !dbg !80
  %1066 = insertelement <2 x bfloat> %1065, bfloat %1012, i64 1, !dbg !80
  %1067 = bitcast <2 x bfloat> %1066 to i32, !dbg !80
  %1068 = insertelement <2 x bfloat> poison, bfloat %1014, i64 0, !dbg !80
  %1069 = insertelement <2 x bfloat> %1068, bfloat %1016, i64 1, !dbg !80
  %1070 = bitcast <2 x bfloat> %1069 to i32, !dbg !80
  %1071 = insertelement <2 x bfloat> poison, bfloat %1018, i64 0, !dbg !80
  %1072 = insertelement <2 x bfloat> %1071, bfloat %1020, i64 1, !dbg !80
  %1073 = bitcast <2 x bfloat> %1072 to i32, !dbg !80
  %1074 = insertelement <2 x bfloat> poison, bfloat %1022, i64 0, !dbg !80
  %1075 = insertelement <2 x bfloat> %1074, bfloat %1024, i64 1, !dbg !80
  %1076 = bitcast <2 x bfloat> %1075 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1067, i32 %1070, i32 %1073, i32 %1076, ptr addrspace(1) %974, i1 %269) #5, !dbg !80
  %1077 = insertelement <2 x bfloat> poison, bfloat %1026, i64 0, !dbg !80
  %1078 = insertelement <2 x bfloat> %1077, bfloat %1028, i64 1, !dbg !80
  %1079 = bitcast <2 x bfloat> %1078 to i32, !dbg !80
  %1080 = insertelement <2 x bfloat> poison, bfloat %1030, i64 0, !dbg !80
  %1081 = insertelement <2 x bfloat> %1080, bfloat %1032, i64 1, !dbg !80
  %1082 = bitcast <2 x bfloat> %1081 to i32, !dbg !80
  %1083 = insertelement <2 x bfloat> poison, bfloat %1034, i64 0, !dbg !80
  %1084 = insertelement <2 x bfloat> %1083, bfloat %1036, i64 1, !dbg !80
  %1085 = bitcast <2 x bfloat> %1084 to i32, !dbg !80
  %1086 = insertelement <2 x bfloat> poison, bfloat %1038, i64 0, !dbg !80
  %1087 = insertelement <2 x bfloat> %1086, bfloat %1040, i64 1, !dbg !80
  %1088 = bitcast <2 x bfloat> %1087 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1079, i32 %1082, i32 %1085, i32 %1088, ptr addrspace(1) %976, i1 %269) #5, !dbg !80
  br i1 %170, label %169, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %1089 = lshr i32 %19, 5, !dbg !11
  %1090 = and i32 %19, 3, !dbg !11
  %1091 = or disjoint i32 %18, %1090, !dbg !12
  %1092 = icmp slt i32 %1091, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1093 = extractelement <32 x float> %905, i64 0, !dbg !83
  %1094 = extractelement <32 x float> %905, i64 1, !dbg !83
  %1095 = fsub float %1094, %1093, !dbg !83
  %1096 = fadd float %938, %939, !dbg !85
  %1097 = fcmp oeq float %1096, 0.000000e+00, !dbg !86
  %1098 = tail call float @llvm.nvvm.div.full(float %939, float %1096), !dbg !87
  %1099 = select i1 %1097, float 0.000000e+00, float %1098, !dbg !88
  %1100 = fmul float %1095, %1099, !dbg !89
  %1101 = fadd float %1093, %1100, !dbg !90
  %1102 = fadd float %906, %907, !dbg !91
  %1103 = fmul float %1095, %1095, !dbg !92
  %1104 = fmul float %1103, %938, !dbg !93
  %1105 = fmul float %1104, %1099, !dbg !94
  %1106 = fadd float %1102, %1105, !dbg !95
  %1107 = extractelement <32 x float> %905, i64 2, !dbg !83
  %1108 = fsub float %1107, %1101, !dbg !83
  %1109 = fadd float %940, %1096, !dbg !85
  %1110 = fcmp oeq float %1109, 0.000000e+00, !dbg !86
  %1111 = tail call float @llvm.nvvm.div.full(float %940, float %1109), !dbg !87
  %1112 = select i1 %1110, float 0.000000e+00, float %1111, !dbg !88
  %1113 = fmul float %1112, %1108, !dbg !89
  %1114 = fadd float %1101, %1113, !dbg !90
  %1115 = fadd float %908, %1106, !dbg !91
  %1116 = fmul float %1108, %1108, !dbg !92
  %1117 = fmul float %1096, %1116, !dbg !93
  %1118 = fmul float %1112, %1117, !dbg !94
  %1119 = fadd float %1115, %1118, !dbg !95
  %1120 = extractelement <32 x float> %905, i64 3, !dbg !83
  %1121 = fsub float %1120, %1114, !dbg !83
  %1122 = fadd float %941, %1109, !dbg !85
  %1123 = fcmp oeq float %1122, 0.000000e+00, !dbg !86
  %1124 = tail call float @llvm.nvvm.div.full(float %941, float %1122), !dbg !87
  %1125 = select i1 %1123, float 0.000000e+00, float %1124, !dbg !88
  %1126 = fmul float %1125, %1121, !dbg !89
  %1127 = fadd float %1114, %1126, !dbg !90
  %1128 = fadd float %909, %1119, !dbg !91
  %1129 = fmul float %1121, %1121, !dbg !92
  %1130 = fmul float %1109, %1129, !dbg !93
  %1131 = fmul float %1125, %1130, !dbg !94
  %1132 = fadd float %1128, %1131, !dbg !95
  %1133 = extractelement <32 x float> %905, i64 4, !dbg !83
  %1134 = fsub float %1133, %1127, !dbg !83
  %1135 = fadd float %942, %1122, !dbg !85
  %1136 = fcmp oeq float %1135, 0.000000e+00, !dbg !86
  %1137 = tail call float @llvm.nvvm.div.full(float %942, float %1135), !dbg !87
  %1138 = select i1 %1136, float 0.000000e+00, float %1137, !dbg !88
  %1139 = fmul float %1138, %1134, !dbg !89
  %1140 = fadd float %1127, %1139, !dbg !90
  %1141 = fadd float %910, %1132, !dbg !91
  %1142 = fmul float %1134, %1134, !dbg !92
  %1143 = fmul float %1122, %1142, !dbg !93
  %1144 = fmul float %1138, %1143, !dbg !94
  %1145 = fadd float %1141, %1144, !dbg !95
  %1146 = extractelement <32 x float> %905, i64 5, !dbg !83
  %1147 = fsub float %1146, %1140, !dbg !83
  %1148 = fadd float %943, %1135, !dbg !85
  %1149 = fcmp oeq float %1148, 0.000000e+00, !dbg !86
  %1150 = tail call float @llvm.nvvm.div.full(float %943, float %1148), !dbg !87
  %1151 = select i1 %1149, float 0.000000e+00, float %1150, !dbg !88
  %1152 = fmul float %1151, %1147, !dbg !89
  %1153 = fadd float %1140, %1152, !dbg !90
  %1154 = fadd float %911, %1145, !dbg !91
  %1155 = fmul float %1147, %1147, !dbg !92
  %1156 = fmul float %1135, %1155, !dbg !93
  %1157 = fmul float %1151, %1156, !dbg !94
  %1158 = fadd float %1154, %1157, !dbg !95
  %1159 = extractelement <32 x float> %905, i64 6, !dbg !83
  %1160 = fsub float %1159, %1153, !dbg !83
  %1161 = fadd float %944, %1148, !dbg !85
  %1162 = fcmp oeq float %1161, 0.000000e+00, !dbg !86
  %1163 = tail call float @llvm.nvvm.div.full(float %944, float %1161), !dbg !87
  %1164 = select i1 %1162, float 0.000000e+00, float %1163, !dbg !88
  %1165 = fmul float %1164, %1160, !dbg !89
  %1166 = fadd float %1153, %1165, !dbg !90
  %1167 = fadd float %912, %1158, !dbg !91
  %1168 = fmul float %1160, %1160, !dbg !92
  %1169 = fmul float %1148, %1168, !dbg !93
  %1170 = fmul float %1164, %1169, !dbg !94
  %1171 = fadd float %1167, %1170, !dbg !95
  %1172 = extractelement <32 x float> %905, i64 7, !dbg !83
  %1173 = fsub float %1172, %1166, !dbg !83
  %1174 = fadd float %945, %1161, !dbg !85
  %1175 = fcmp oeq float %1174, 0.000000e+00, !dbg !86
  %1176 = tail call float @llvm.nvvm.div.full(float %945, float %1174), !dbg !87
  %1177 = select i1 %1175, float 0.000000e+00, float %1176, !dbg !88
  %1178 = fmul float %1177, %1173, !dbg !89
  %1179 = fadd float %1166, %1178, !dbg !90
  %1180 = fadd float %913, %1171, !dbg !91
  %1181 = fmul float %1173, %1173, !dbg !92
  %1182 = fmul float %1161, %1181, !dbg !93
  %1183 = fmul float %1177, %1182, !dbg !94
  %1184 = fadd float %1180, %1183, !dbg !95
  %1185 = extractelement <32 x float> %905, i64 8, !dbg !83
  %1186 = extractelement <32 x float> %905, i64 9, !dbg !83
  %1187 = fsub float %1186, %1185, !dbg !83
  %1188 = fadd float %946, %947, !dbg !85
  %1189 = fcmp oeq float %1188, 0.000000e+00, !dbg !86
  %1190 = tail call float @llvm.nvvm.div.full(float %947, float %1188), !dbg !87
  %1191 = select i1 %1189, float 0.000000e+00, float %1190, !dbg !88
  %1192 = fmul float %1187, %1191, !dbg !89
  %1193 = fadd float %1185, %1192, !dbg !90
  %1194 = fadd float %914, %915, !dbg !91
  %1195 = fmul float %1187, %1187, !dbg !92
  %1196 = fmul float %1195, %946, !dbg !93
  %1197 = fmul float %1196, %1191, !dbg !94
  %1198 = fadd float %1194, %1197, !dbg !95
  %1199 = extractelement <32 x float> %905, i64 10, !dbg !83
  %1200 = fsub float %1199, %1193, !dbg !83
  %1201 = fadd float %948, %1188, !dbg !85
  %1202 = fcmp oeq float %1201, 0.000000e+00, !dbg !86
  %1203 = tail call float @llvm.nvvm.div.full(float %948, float %1201), !dbg !87
  %1204 = select i1 %1202, float 0.000000e+00, float %1203, !dbg !88
  %1205 = fmul float %1204, %1200, !dbg !89
  %1206 = fadd float %1193, %1205, !dbg !90
  %1207 = fadd float %916, %1198, !dbg !91
  %1208 = fmul float %1200, %1200, !dbg !92
  %1209 = fmul float %1188, %1208, !dbg !93
  %1210 = fmul float %1204, %1209, !dbg !94
  %1211 = fadd float %1207, %1210, !dbg !95
  %1212 = extractelement <32 x float> %905, i64 11, !dbg !83
  %1213 = fsub float %1212, %1206, !dbg !83
  %1214 = fadd float %949, %1201, !dbg !85
  %1215 = fcmp oeq float %1214, 0.000000e+00, !dbg !86
  %1216 = tail call float @llvm.nvvm.div.full(float %949, float %1214), !dbg !87
  %1217 = select i1 %1215, float 0.000000e+00, float %1216, !dbg !88
  %1218 = fmul float %1217, %1213, !dbg !89
  %1219 = fadd float %1206, %1218, !dbg !90
  %1220 = fadd float %917, %1211, !dbg !91
  %1221 = fmul float %1213, %1213, !dbg !92
  %1222 = fmul float %1201, %1221, !dbg !93
  %1223 = fmul float %1217, %1222, !dbg !94
  %1224 = fadd float %1220, %1223, !dbg !95
  %1225 = extractelement <32 x float> %905, i64 12, !dbg !83
  %1226 = fsub float %1225, %1219, !dbg !83
  %1227 = fadd float %950, %1214, !dbg !85
  %1228 = fcmp oeq float %1227, 0.000000e+00, !dbg !86
  %1229 = tail call float @llvm.nvvm.div.full(float %950, float %1227), !dbg !87
  %1230 = select i1 %1228, float 0.000000e+00, float %1229, !dbg !88
  %1231 = fmul float %1230, %1226, !dbg !89
  %1232 = fadd float %1219, %1231, !dbg !90
  %1233 = fadd float %918, %1224, !dbg !91
  %1234 = fmul float %1226, %1226, !dbg !92
  %1235 = fmul float %1214, %1234, !dbg !93
  %1236 = fmul float %1230, %1235, !dbg !94
  %1237 = fadd float %1233, %1236, !dbg !95
  %1238 = extractelement <32 x float> %905, i64 13, !dbg !83
  %1239 = fsub float %1238, %1232, !dbg !83
  %1240 = fadd float %951, %1227, !dbg !85
  %1241 = fcmp oeq float %1240, 0.000000e+00, !dbg !86
  %1242 = tail call float @llvm.nvvm.div.full(float %951, float %1240), !dbg !87
  %1243 = select i1 %1241, float 0.000000e+00, float %1242, !dbg !88
  %1244 = fmul float %1243, %1239, !dbg !89
  %1245 = fadd float %1232, %1244, !dbg !90
  %1246 = fadd float %919, %1237, !dbg !91
  %1247 = fmul float %1239, %1239, !dbg !92
  %1248 = fmul float %1227, %1247, !dbg !93
  %1249 = fmul float %1243, %1248, !dbg !94
  %1250 = fadd float %1246, %1249, !dbg !95
  %1251 = extractelement <32 x float> %905, i64 14, !dbg !83
  %1252 = fsub float %1251, %1245, !dbg !83
  %1253 = fadd float %952, %1240, !dbg !85
  %1254 = fcmp oeq float %1253, 0.000000e+00, !dbg !86
  %1255 = tail call float @llvm.nvvm.div.full(float %952, float %1253), !dbg !87
  %1256 = select i1 %1254, float 0.000000e+00, float %1255, !dbg !88
  %1257 = fmul float %1256, %1252, !dbg !89
  %1258 = fadd float %1245, %1257, !dbg !90
  %1259 = fadd float %920, %1250, !dbg !91
  %1260 = fmul float %1252, %1252, !dbg !92
  %1261 = fmul float %1240, %1260, !dbg !93
  %1262 = fmul float %1256, %1261, !dbg !94
  %1263 = fadd float %1259, %1262, !dbg !95
  %1264 = extractelement <32 x float> %905, i64 15, !dbg !83
  %1265 = fsub float %1264, %1258, !dbg !83
  %1266 = fadd float %953, %1253, !dbg !85
  %1267 = fcmp oeq float %1266, 0.000000e+00, !dbg !86
  %1268 = tail call float @llvm.nvvm.div.full(float %953, float %1266), !dbg !87
  %1269 = select i1 %1267, float 0.000000e+00, float %1268, !dbg !88
  %1270 = fmul float %1269, %1265, !dbg !89
  %1271 = fadd float %1258, %1270, !dbg !90
  %1272 = fadd float %921, %1263, !dbg !91
  %1273 = fmul float %1265, %1265, !dbg !92
  %1274 = fmul float %1253, %1273, !dbg !93
  %1275 = fmul float %1269, %1274, !dbg !94
  %1276 = fadd float %1272, %1275, !dbg !95
  %1277 = extractelement <32 x float> %905, i64 16, !dbg !83
  %1278 = extractelement <32 x float> %905, i64 17, !dbg !83
  %1279 = fsub float %1278, %1277, !dbg !83
  %1280 = fadd float %954, %955, !dbg !85
  %1281 = fcmp oeq float %1280, 0.000000e+00, !dbg !86
  %1282 = tail call float @llvm.nvvm.div.full(float %955, float %1280), !dbg !87
  %1283 = select i1 %1281, float 0.000000e+00, float %1282, !dbg !88
  %1284 = fmul float %1279, %1283, !dbg !89
  %1285 = fadd float %1277, %1284, !dbg !90
  %1286 = fadd float %922, %923, !dbg !91
  %1287 = fmul float %1279, %1279, !dbg !92
  %1288 = fmul float %1287, %954, !dbg !93
  %1289 = fmul float %1288, %1283, !dbg !94
  %1290 = fadd float %1286, %1289, !dbg !95
  %1291 = extractelement <32 x float> %905, i64 18, !dbg !83
  %1292 = fsub float %1291, %1285, !dbg !83
  %1293 = fadd float %956, %1280, !dbg !85
  %1294 = fcmp oeq float %1293, 0.000000e+00, !dbg !86
  %1295 = tail call float @llvm.nvvm.div.full(float %956, float %1293), !dbg !87
  %1296 = select i1 %1294, float 0.000000e+00, float %1295, !dbg !88
  %1297 = fmul float %1296, %1292, !dbg !89
  %1298 = fadd float %1285, %1297, !dbg !90
  %1299 = fadd float %924, %1290, !dbg !91
  %1300 = fmul float %1292, %1292, !dbg !92
  %1301 = fmul float %1280, %1300, !dbg !93
  %1302 = fmul float %1296, %1301, !dbg !94
  %1303 = fadd float %1299, %1302, !dbg !95
  %1304 = extractelement <32 x float> %905, i64 19, !dbg !83
  %1305 = fsub float %1304, %1298, !dbg !83
  %1306 = fadd float %957, %1293, !dbg !85
  %1307 = fcmp oeq float %1306, 0.000000e+00, !dbg !86
  %1308 = tail call float @llvm.nvvm.div.full(float %957, float %1306), !dbg !87
  %1309 = select i1 %1307, float 0.000000e+00, float %1308, !dbg !88
  %1310 = fmul float %1309, %1305, !dbg !89
  %1311 = fadd float %1298, %1310, !dbg !90
  %1312 = fadd float %925, %1303, !dbg !91
  %1313 = fmul float %1305, %1305, !dbg !92
  %1314 = fmul float %1293, %1313, !dbg !93
  %1315 = fmul float %1309, %1314, !dbg !94
  %1316 = fadd float %1312, %1315, !dbg !95
  %1317 = extractelement <32 x float> %905, i64 20, !dbg !83
  %1318 = fsub float %1317, %1311, !dbg !83
  %1319 = fadd float %958, %1306, !dbg !85
  %1320 = fcmp oeq float %1319, 0.000000e+00, !dbg !86
  %1321 = tail call float @llvm.nvvm.div.full(float %958, float %1319), !dbg !87
  %1322 = select i1 %1320, float 0.000000e+00, float %1321, !dbg !88
  %1323 = fmul float %1322, %1318, !dbg !89
  %1324 = fadd float %1311, %1323, !dbg !90
  %1325 = fadd float %926, %1316, !dbg !91
  %1326 = fmul float %1318, %1318, !dbg !92
  %1327 = fmul float %1306, %1326, !dbg !93
  %1328 = fmul float %1322, %1327, !dbg !94
  %1329 = fadd float %1325, %1328, !dbg !95
  %1330 = extractelement <32 x float> %905, i64 21, !dbg !83
  %1331 = fsub float %1330, %1324, !dbg !83
  %1332 = fadd float %959, %1319, !dbg !85
  %1333 = fcmp oeq float %1332, 0.000000e+00, !dbg !86
  %1334 = tail call float @llvm.nvvm.div.full(float %959, float %1332), !dbg !87
  %1335 = select i1 %1333, float 0.000000e+00, float %1334, !dbg !88
  %1336 = fmul float %1335, %1331, !dbg !89
  %1337 = fadd float %1324, %1336, !dbg !90
  %1338 = fadd float %927, %1329, !dbg !91
  %1339 = fmul float %1331, %1331, !dbg !92
  %1340 = fmul float %1319, %1339, !dbg !93
  %1341 = fmul float %1335, %1340, !dbg !94
  %1342 = fadd float %1338, %1341, !dbg !95
  %1343 = extractelement <32 x float> %905, i64 22, !dbg !83
  %1344 = fsub float %1343, %1337, !dbg !83
  %1345 = fadd float %960, %1332, !dbg !85
  %1346 = fcmp oeq float %1345, 0.000000e+00, !dbg !86
  %1347 = tail call float @llvm.nvvm.div.full(float %960, float %1345), !dbg !87
  %1348 = select i1 %1346, float 0.000000e+00, float %1347, !dbg !88
  %1349 = fmul float %1348, %1344, !dbg !89
  %1350 = fadd float %1337, %1349, !dbg !90
  %1351 = fadd float %928, %1342, !dbg !91
  %1352 = fmul float %1344, %1344, !dbg !92
  %1353 = fmul float %1332, %1352, !dbg !93
  %1354 = fmul float %1348, %1353, !dbg !94
  %1355 = fadd float %1351, %1354, !dbg !95
  %1356 = extractelement <32 x float> %905, i64 23, !dbg !83
  %1357 = fsub float %1356, %1350, !dbg !83
  %1358 = fadd float %961, %1345, !dbg !85
  %1359 = fcmp oeq float %1358, 0.000000e+00, !dbg !86
  %1360 = tail call float @llvm.nvvm.div.full(float %961, float %1358), !dbg !87
  %1361 = select i1 %1359, float 0.000000e+00, float %1360, !dbg !88
  %1362 = fmul float %1361, %1357, !dbg !89
  %1363 = fadd float %1350, %1362, !dbg !90
  %1364 = fadd float %929, %1355, !dbg !91
  %1365 = fmul float %1357, %1357, !dbg !92
  %1366 = fmul float %1345, %1365, !dbg !93
  %1367 = fmul float %1361, %1366, !dbg !94
  %1368 = fadd float %1364, %1367, !dbg !95
  %1369 = extractelement <32 x float> %905, i64 24, !dbg !83
  %1370 = extractelement <32 x float> %905, i64 25, !dbg !83
  %1371 = fsub float %1370, %1369, !dbg !83
  %1372 = fadd float %962, %963, !dbg !85
  %1373 = fcmp oeq float %1372, 0.000000e+00, !dbg !86
  %1374 = tail call float @llvm.nvvm.div.full(float %963, float %1372), !dbg !87
  %1375 = select i1 %1373, float 0.000000e+00, float %1374, !dbg !88
  %1376 = fmul float %1371, %1375, !dbg !89
  %1377 = fadd float %1369, %1376, !dbg !90
  %1378 = fadd float %930, %931, !dbg !91
  %1379 = fmul float %1371, %1371, !dbg !92
  %1380 = fmul float %1379, %962, !dbg !93
  %1381 = fmul float %1380, %1375, !dbg !94
  %1382 = fadd float %1378, %1381, !dbg !95
  %1383 = extractelement <32 x float> %905, i64 26, !dbg !83
  %1384 = fsub float %1383, %1377, !dbg !83
  %1385 = fadd float %964, %1372, !dbg !85
  %1386 = fcmp oeq float %1385, 0.000000e+00, !dbg !86
  %1387 = tail call float @llvm.nvvm.div.full(float %964, float %1385), !dbg !87
  %1388 = select i1 %1386, float 0.000000e+00, float %1387, !dbg !88
  %1389 = fmul float %1388, %1384, !dbg !89
  %1390 = fadd float %1377, %1389, !dbg !90
  %1391 = fadd float %932, %1382, !dbg !91
  %1392 = fmul float %1384, %1384, !dbg !92
  %1393 = fmul float %1372, %1392, !dbg !93
  %1394 = fmul float %1388, %1393, !dbg !94
  %1395 = fadd float %1391, %1394, !dbg !95
  %1396 = extractelement <32 x float> %905, i64 27, !dbg !83
  %1397 = fsub float %1396, %1390, !dbg !83
  %1398 = fadd float %965, %1385, !dbg !85
  %1399 = fcmp oeq float %1398, 0.000000e+00, !dbg !86
  %1400 = tail call float @llvm.nvvm.div.full(float %965, float %1398), !dbg !87
  %1401 = select i1 %1399, float 0.000000e+00, float %1400, !dbg !88
  %1402 = fmul float %1401, %1397, !dbg !89
  %1403 = fadd float %1390, %1402, !dbg !90
  %1404 = fadd float %933, %1395, !dbg !91
  %1405 = fmul float %1397, %1397, !dbg !92
  %1406 = fmul float %1385, %1405, !dbg !93
  %1407 = fmul float %1401, %1406, !dbg !94
  %1408 = fadd float %1404, %1407, !dbg !95
  %1409 = extractelement <32 x float> %905, i64 28, !dbg !83
  %1410 = fsub float %1409, %1403, !dbg !83
  %1411 = fadd float %966, %1398, !dbg !85
  %1412 = fcmp oeq float %1411, 0.000000e+00, !dbg !86
  %1413 = tail call float @llvm.nvvm.div.full(float %966, float %1411), !dbg !87
  %1414 = select i1 %1412, float 0.000000e+00, float %1413, !dbg !88
  %1415 = fmul float %1414, %1410, !dbg !89
  %1416 = fadd float %1403, %1415, !dbg !90
  %1417 = fadd float %934, %1408, !dbg !91
  %1418 = fmul float %1410, %1410, !dbg !92
  %1419 = fmul float %1398, %1418, !dbg !93
  %1420 = fmul float %1414, %1419, !dbg !94
  %1421 = fadd float %1417, %1420, !dbg !95
  %1422 = extractelement <32 x float> %905, i64 29, !dbg !83
  %1423 = fsub float %1422, %1416, !dbg !83
  %1424 = fadd float %967, %1411, !dbg !85
  %1425 = fcmp oeq float %1424, 0.000000e+00, !dbg !86
  %1426 = tail call float @llvm.nvvm.div.full(float %967, float %1424), !dbg !87
  %1427 = select i1 %1425, float 0.000000e+00, float %1426, !dbg !88
  %1428 = fmul float %1427, %1423, !dbg !89
  %1429 = fadd float %1416, %1428, !dbg !90
  %1430 = fadd float %935, %1421, !dbg !91
  %1431 = fmul float %1423, %1423, !dbg !92
  %1432 = fmul float %1411, %1431, !dbg !93
  %1433 = fmul float %1427, %1432, !dbg !94
  %1434 = fadd float %1430, %1433, !dbg !95
  %1435 = extractelement <32 x float> %905, i64 30, !dbg !83
  %1436 = fsub float %1435, %1429, !dbg !83
  %1437 = fadd float %968, %1424, !dbg !85
  %1438 = fcmp oeq float %1437, 0.000000e+00, !dbg !86
  %1439 = tail call float @llvm.nvvm.div.full(float %968, float %1437), !dbg !87
  %1440 = select i1 %1438, float 0.000000e+00, float %1439, !dbg !88
  %1441 = fmul float %1440, %1436, !dbg !89
  %1442 = fadd float %1429, %1441, !dbg !90
  %1443 = fadd float %936, %1434, !dbg !91
  %1444 = fmul float %1436, %1436, !dbg !92
  %1445 = fmul float %1424, %1444, !dbg !93
  %1446 = fmul float %1440, %1445, !dbg !94
  %1447 = fadd float %1443, %1446, !dbg !95
  %1448 = extractelement <32 x float> %905, i64 31, !dbg !83
  %1449 = fsub float %1448, %1442, !dbg !83
  %1450 = fadd float %969, %1437, !dbg !85
  %1451 = fcmp oeq float %1450, 0.000000e+00, !dbg !86
  %1452 = tail call float @llvm.nvvm.div.full(float %969, float %1450), !dbg !87
  %1453 = select i1 %1451, float 0.000000e+00, float %1452, !dbg !88
  %1454 = fmul float %1453, %1449, !dbg !89
  %1455 = fadd float %1442, %1454, !dbg !90
  %1456 = fadd float %937, %1447, !dbg !91
  %1457 = fmul float %1449, %1449, !dbg !92
  %1458 = fmul float %1437, %1457, !dbg !93
  %1459 = fmul float %1453, %1458, !dbg !94
  %1460 = fadd float %1456, %1459, !dbg !95
  %1461 = bitcast float %1179 to i32, !dbg !81
  %1462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1461, i32 16, i32 31), !dbg !81
  %1463 = bitcast i32 %1462 to float, !dbg !81
  %1464 = bitcast float %1184 to i32, !dbg !81
  %1465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1464, i32 16, i32 31), !dbg !81
  %1466 = bitcast i32 %1465 to float, !dbg !81
  %1467 = bitcast float %1174 to i32, !dbg !81
  %1468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1467, i32 16, i32 31), !dbg !81
  %1469 = bitcast i32 %1468 to float, !dbg !81
  %1470 = fsub float %1463, %1179, !dbg !83
  %1471 = fadd float %1174, %1469, !dbg !85
  %1472 = fcmp oeq float %1471, 0.000000e+00, !dbg !86
  %1473 = tail call float @llvm.nvvm.div.full(float %1469, float %1471), !dbg !87
  %1474 = select i1 %1472, float 0.000000e+00, float %1473, !dbg !88
  %1475 = fmul float %1470, %1474, !dbg !89
  %1476 = fadd float %1179, %1475, !dbg !90
  %1477 = fadd float %1184, %1466, !dbg !91
  %1478 = fmul float %1470, %1470, !dbg !92
  %1479 = fmul float %1174, %1478, !dbg !93
  %1480 = fmul float %1479, %1474, !dbg !94
  %1481 = fadd float %1477, %1480, !dbg !95
  %1482 = bitcast float %1476 to i32, !dbg !81
  %1483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1482, i32 8, i32 31), !dbg !81
  %1484 = bitcast i32 %1483 to float, !dbg !81
  %1485 = bitcast float %1481 to i32, !dbg !81
  %1486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1485, i32 8, i32 31), !dbg !81
  %1487 = bitcast i32 %1486 to float, !dbg !81
  %1488 = bitcast float %1471 to i32, !dbg !81
  %1489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1488, i32 8, i32 31), !dbg !81
  %1490 = bitcast i32 %1489 to float, !dbg !81
  %1491 = fsub float %1484, %1476, !dbg !83
  %1492 = fadd float %1471, %1490, !dbg !85
  %1493 = fcmp oeq float %1492, 0.000000e+00, !dbg !86
  %1494 = tail call float @llvm.nvvm.div.full(float %1490, float %1492), !dbg !87
  %1495 = select i1 %1493, float 0.000000e+00, float %1494, !dbg !88
  %1496 = fmul float %1491, %1495, !dbg !89
  %1497 = fadd float %1476, %1496, !dbg !90
  %1498 = fadd float %1481, %1487, !dbg !91
  %1499 = fmul float %1491, %1491, !dbg !92
  %1500 = fmul float %1471, %1499, !dbg !93
  %1501 = fmul float %1495, %1500, !dbg !94
  %1502 = fadd float %1498, %1501, !dbg !95
  %1503 = bitcast float %1497 to i32, !dbg !81
  %1504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1503, i32 4, i32 31), !dbg !81
  %1505 = bitcast i32 %1504 to float, !dbg !81
  %1506 = bitcast float %1502 to i32, !dbg !81
  %1507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1506, i32 4, i32 31), !dbg !81
  %1508 = bitcast i32 %1507 to float, !dbg !81
  %1509 = bitcast float %1492 to i32, !dbg !81
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 4, i32 31), !dbg !81
  %1511 = bitcast i32 %1510 to float, !dbg !81
  %1512 = fsub float %1505, %1497, !dbg !83
  %1513 = fadd float %1492, %1511, !dbg !85
  %1514 = fcmp oeq float %1513, 0.000000e+00, !dbg !86
  %1515 = tail call float @llvm.nvvm.div.full(float %1511, float %1513), !dbg !87
  %1516 = select i1 %1514, float 0.000000e+00, float %1515, !dbg !88
  %1517 = fmul float %1512, %1516, !dbg !89
  %1518 = fadd float %1497, %1517, !dbg !90
  %1519 = fadd float %1502, %1508, !dbg !91
  %1520 = fmul float %1512, %1512, !dbg !92
  %1521 = fmul float %1492, %1520, !dbg !93
  %1522 = fmul float %1516, %1521, !dbg !94
  %1523 = fadd float %1519, %1522, !dbg !95
  %1524 = bitcast float %1518 to i32, !dbg !81
  %1525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1524, i32 2, i32 31), !dbg !81
  %1526 = bitcast i32 %1525 to float, !dbg !81
  %1527 = bitcast float %1523 to i32, !dbg !81
  %1528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1527, i32 2, i32 31), !dbg !81
  %1529 = bitcast i32 %1528 to float, !dbg !81
  %1530 = bitcast float %1513 to i32, !dbg !81
  %1531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1530, i32 2, i32 31), !dbg !81
  %1532 = bitcast i32 %1531 to float, !dbg !81
  %1533 = fsub float %1526, %1518, !dbg !83
  %1534 = fadd float %1513, %1532, !dbg !85
  %1535 = fcmp oeq float %1534, 0.000000e+00, !dbg !86
  %1536 = tail call float @llvm.nvvm.div.full(float %1532, float %1534), !dbg !87
  %1537 = select i1 %1535, float 0.000000e+00, float %1536, !dbg !88
  %1538 = fmul float %1533, %1537, !dbg !89
  %1539 = fadd float %1518, %1538, !dbg !90
  %1540 = fadd float %1523, %1529, !dbg !91
  %1541 = fmul float %1533, %1533, !dbg !92
  %1542 = fmul float %1513, %1541, !dbg !93
  %1543 = fmul float %1537, %1542, !dbg !94
  %1544 = fadd float %1540, %1543, !dbg !95
  %1545 = bitcast float %1539 to i32, !dbg !81
  %1546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1545, i32 1, i32 31), !dbg !81
  %1547 = bitcast i32 %1546 to float, !dbg !81
  %1548 = bitcast float %1544 to i32, !dbg !81
  %1549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1548, i32 1, i32 31), !dbg !81
  %1550 = bitcast i32 %1549 to float, !dbg !81
  %1551 = bitcast float %1534 to i32, !dbg !81
  %1552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1551, i32 1, i32 31), !dbg !81
  %1553 = bitcast i32 %1552 to float, !dbg !81
  %1554 = fsub float %1547, %1539, !dbg !83
  %1555 = fadd float %1534, %1553, !dbg !85
  %1556 = fcmp oeq float %1555, 0.000000e+00, !dbg !86
  %1557 = tail call float @llvm.nvvm.div.full(float %1553, float %1555), !dbg !87
  %1558 = select i1 %1556, float 0.000000e+00, float %1557, !dbg !88
  %1559 = fmul float %1554, %1558, !dbg !89
  %1560 = fadd float %1539, %1559, !dbg !90
  %1561 = fadd float %1544, %1550, !dbg !91
  %1562 = fmul float %1554, %1554, !dbg !92
  %1563 = fmul float %1534, %1562, !dbg !93
  %1564 = fmul float %1558, %1563, !dbg !94
  %1565 = fadd float %1561, %1564, !dbg !95
  %1566 = bitcast float %1271 to i32, !dbg !81
  %1567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1566, i32 16, i32 31), !dbg !81
  %1568 = bitcast i32 %1567 to float, !dbg !81
  %1569 = bitcast float %1276 to i32, !dbg !81
  %1570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1569, i32 16, i32 31), !dbg !81
  %1571 = bitcast i32 %1570 to float, !dbg !81
  %1572 = bitcast float %1266 to i32, !dbg !81
  %1573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1572, i32 16, i32 31), !dbg !81
  %1574 = bitcast i32 %1573 to float, !dbg !81
  %1575 = fsub float %1568, %1271, !dbg !83
  %1576 = fadd float %1266, %1574, !dbg !85
  %1577 = fcmp oeq float %1576, 0.000000e+00, !dbg !86
  %1578 = tail call float @llvm.nvvm.div.full(float %1574, float %1576), !dbg !87
  %1579 = select i1 %1577, float 0.000000e+00, float %1578, !dbg !88
  %1580 = fmul float %1575, %1579, !dbg !89
  %1581 = fadd float %1271, %1580, !dbg !90
  %1582 = fadd float %1276, %1571, !dbg !91
  %1583 = fmul float %1575, %1575, !dbg !92
  %1584 = fmul float %1266, %1583, !dbg !93
  %1585 = fmul float %1584, %1579, !dbg !94
  %1586 = fadd float %1582, %1585, !dbg !95
  %1587 = bitcast float %1581 to i32, !dbg !81
  %1588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1587, i32 8, i32 31), !dbg !81
  %1589 = bitcast i32 %1588 to float, !dbg !81
  %1590 = bitcast float %1586 to i32, !dbg !81
  %1591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1590, i32 8, i32 31), !dbg !81
  %1592 = bitcast i32 %1591 to float, !dbg !81
  %1593 = bitcast float %1576 to i32, !dbg !81
  %1594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1593, i32 8, i32 31), !dbg !81
  %1595 = bitcast i32 %1594 to float, !dbg !81
  %1596 = fsub float %1589, %1581, !dbg !83
  %1597 = fadd float %1576, %1595, !dbg !85
  %1598 = fcmp oeq float %1597, 0.000000e+00, !dbg !86
  %1599 = tail call float @llvm.nvvm.div.full(float %1595, float %1597), !dbg !87
  %1600 = select i1 %1598, float 0.000000e+00, float %1599, !dbg !88
  %1601 = fmul float %1596, %1600, !dbg !89
  %1602 = fadd float %1581, %1601, !dbg !90
  %1603 = fadd float %1586, %1592, !dbg !91
  %1604 = fmul float %1596, %1596, !dbg !92
  %1605 = fmul float %1576, %1604, !dbg !93
  %1606 = fmul float %1600, %1605, !dbg !94
  %1607 = fadd float %1603, %1606, !dbg !95
  %1608 = bitcast float %1602 to i32, !dbg !81
  %1609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1608, i32 4, i32 31), !dbg !81
  %1610 = bitcast i32 %1609 to float, !dbg !81
  %1611 = bitcast float %1607 to i32, !dbg !81
  %1612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1611, i32 4, i32 31), !dbg !81
  %1613 = bitcast i32 %1612 to float, !dbg !81
  %1614 = bitcast float %1597 to i32, !dbg !81
  %1615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1614, i32 4, i32 31), !dbg !81
  %1616 = bitcast i32 %1615 to float, !dbg !81
  %1617 = fsub float %1610, %1602, !dbg !83
  %1618 = fadd float %1597, %1616, !dbg !85
  %1619 = fcmp oeq float %1618, 0.000000e+00, !dbg !86
  %1620 = tail call float @llvm.nvvm.div.full(float %1616, float %1618), !dbg !87
  %1621 = select i1 %1619, float 0.000000e+00, float %1620, !dbg !88
  %1622 = fmul float %1617, %1621, !dbg !89
  %1623 = fadd float %1602, %1622, !dbg !90
  %1624 = fadd float %1607, %1613, !dbg !91
  %1625 = fmul float %1617, %1617, !dbg !92
  %1626 = fmul float %1597, %1625, !dbg !93
  %1627 = fmul float %1621, %1626, !dbg !94
  %1628 = fadd float %1624, %1627, !dbg !95
  %1629 = bitcast float %1623 to i32, !dbg !81
  %1630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1629, i32 2, i32 31), !dbg !81
  %1631 = bitcast i32 %1630 to float, !dbg !81
  %1632 = bitcast float %1628 to i32, !dbg !81
  %1633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1632, i32 2, i32 31), !dbg !81
  %1634 = bitcast i32 %1633 to float, !dbg !81
  %1635 = bitcast float %1618 to i32, !dbg !81
  %1636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1635, i32 2, i32 31), !dbg !81
  %1637 = bitcast i32 %1636 to float, !dbg !81
  %1638 = fsub float %1631, %1623, !dbg !83
  %1639 = fadd float %1618, %1637, !dbg !85
  %1640 = fcmp oeq float %1639, 0.000000e+00, !dbg !86
  %1641 = tail call float @llvm.nvvm.div.full(float %1637, float %1639), !dbg !87
  %1642 = select i1 %1640, float 0.000000e+00, float %1641, !dbg !88
  %1643 = fmul float %1638, %1642, !dbg !89
  %1644 = fadd float %1623, %1643, !dbg !90
  %1645 = fadd float %1628, %1634, !dbg !91
  %1646 = fmul float %1638, %1638, !dbg !92
  %1647 = fmul float %1618, %1646, !dbg !93
  %1648 = fmul float %1642, %1647, !dbg !94
  %1649 = fadd float %1645, %1648, !dbg !95
  %1650 = bitcast float %1644 to i32, !dbg !81
  %1651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1650, i32 1, i32 31), !dbg !81
  %1652 = bitcast i32 %1651 to float, !dbg !81
  %1653 = bitcast float %1649 to i32, !dbg !81
  %1654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1653, i32 1, i32 31), !dbg !81
  %1655 = bitcast i32 %1654 to float, !dbg !81
  %1656 = bitcast float %1639 to i32, !dbg !81
  %1657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1656, i32 1, i32 31), !dbg !81
  %1658 = bitcast i32 %1657 to float, !dbg !81
  %1659 = fsub float %1652, %1644, !dbg !83
  %1660 = fadd float %1639, %1658, !dbg !85
  %1661 = fcmp oeq float %1660, 0.000000e+00, !dbg !86
  %1662 = tail call float @llvm.nvvm.div.full(float %1658, float %1660), !dbg !87
  %1663 = select i1 %1661, float 0.000000e+00, float %1662, !dbg !88
  %1664 = fmul float %1659, %1663, !dbg !89
  %1665 = fadd float %1644, %1664, !dbg !90
  %1666 = fadd float %1649, %1655, !dbg !91
  %1667 = fmul float %1659, %1659, !dbg !92
  %1668 = fmul float %1639, %1667, !dbg !93
  %1669 = fmul float %1663, %1668, !dbg !94
  %1670 = fadd float %1666, %1669, !dbg !95
  %1671 = bitcast float %1363 to i32, !dbg !81
  %1672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1671, i32 16, i32 31), !dbg !81
  %1673 = bitcast i32 %1672 to float, !dbg !81
  %1674 = bitcast float %1368 to i32, !dbg !81
  %1675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1674, i32 16, i32 31), !dbg !81
  %1676 = bitcast i32 %1675 to float, !dbg !81
  %1677 = bitcast float %1358 to i32, !dbg !81
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1677, i32 16, i32 31), !dbg !81
  %1679 = bitcast i32 %1678 to float, !dbg !81
  %1680 = fsub float %1673, %1363, !dbg !83
  %1681 = fadd float %1358, %1679, !dbg !85
  %1682 = fcmp oeq float %1681, 0.000000e+00, !dbg !86
  %1683 = tail call float @llvm.nvvm.div.full(float %1679, float %1681), !dbg !87
  %1684 = select i1 %1682, float 0.000000e+00, float %1683, !dbg !88
  %1685 = fmul float %1680, %1684, !dbg !89
  %1686 = fadd float %1363, %1685, !dbg !90
  %1687 = fadd float %1368, %1676, !dbg !91
  %1688 = fmul float %1680, %1680, !dbg !92
  %1689 = fmul float %1358, %1688, !dbg !93
  %1690 = fmul float %1689, %1684, !dbg !94
  %1691 = fadd float %1687, %1690, !dbg !95
  %1692 = bitcast float %1686 to i32, !dbg !81
  %1693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1692, i32 8, i32 31), !dbg !81
  %1694 = bitcast i32 %1693 to float, !dbg !81
  %1695 = bitcast float %1691 to i32, !dbg !81
  %1696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1695, i32 8, i32 31), !dbg !81
  %1697 = bitcast i32 %1696 to float, !dbg !81
  %1698 = bitcast float %1681 to i32, !dbg !81
  %1699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1698, i32 8, i32 31), !dbg !81
  %1700 = bitcast i32 %1699 to float, !dbg !81
  %1701 = fsub float %1694, %1686, !dbg !83
  %1702 = fadd float %1681, %1700, !dbg !85
  %1703 = fcmp oeq float %1702, 0.000000e+00, !dbg !86
  %1704 = tail call float @llvm.nvvm.div.full(float %1700, float %1702), !dbg !87
  %1705 = select i1 %1703, float 0.000000e+00, float %1704, !dbg !88
  %1706 = fmul float %1701, %1705, !dbg !89
  %1707 = fadd float %1686, %1706, !dbg !90
  %1708 = fadd float %1691, %1697, !dbg !91
  %1709 = fmul float %1701, %1701, !dbg !92
  %1710 = fmul float %1681, %1709, !dbg !93
  %1711 = fmul float %1705, %1710, !dbg !94
  %1712 = fadd float %1708, %1711, !dbg !95
  %1713 = bitcast float %1707 to i32, !dbg !81
  %1714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1713, i32 4, i32 31), !dbg !81
  %1715 = bitcast i32 %1714 to float, !dbg !81
  %1716 = bitcast float %1712 to i32, !dbg !81
  %1717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1716, i32 4, i32 31), !dbg !81
  %1718 = bitcast i32 %1717 to float, !dbg !81
  %1719 = bitcast float %1702 to i32, !dbg !81
  %1720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1719, i32 4, i32 31), !dbg !81
  %1721 = bitcast i32 %1720 to float, !dbg !81
  %1722 = fsub float %1715, %1707, !dbg !83
  %1723 = fadd float %1702, %1721, !dbg !85
  %1724 = fcmp oeq float %1723, 0.000000e+00, !dbg !86
  %1725 = tail call float @llvm.nvvm.div.full(float %1721, float %1723), !dbg !87
  %1726 = select i1 %1724, float 0.000000e+00, float %1725, !dbg !88
  %1727 = fmul float %1722, %1726, !dbg !89
  %1728 = fadd float %1707, %1727, !dbg !90
  %1729 = fadd float %1712, %1718, !dbg !91
  %1730 = fmul float %1722, %1722, !dbg !92
  %1731 = fmul float %1702, %1730, !dbg !93
  %1732 = fmul float %1726, %1731, !dbg !94
  %1733 = fadd float %1729, %1732, !dbg !95
  %1734 = bitcast float %1728 to i32, !dbg !81
  %1735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1734, i32 2, i32 31), !dbg !81
  %1736 = bitcast i32 %1735 to float, !dbg !81
  %1737 = bitcast float %1733 to i32, !dbg !81
  %1738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1737, i32 2, i32 31), !dbg !81
  %1739 = bitcast i32 %1738 to float, !dbg !81
  %1740 = bitcast float %1723 to i32, !dbg !81
  %1741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1740, i32 2, i32 31), !dbg !81
  %1742 = bitcast i32 %1741 to float, !dbg !81
  %1743 = fsub float %1736, %1728, !dbg !83
  %1744 = fadd float %1723, %1742, !dbg !85
  %1745 = fcmp oeq float %1744, 0.000000e+00, !dbg !86
  %1746 = tail call float @llvm.nvvm.div.full(float %1742, float %1744), !dbg !87
  %1747 = select i1 %1745, float 0.000000e+00, float %1746, !dbg !88
  %1748 = fmul float %1743, %1747, !dbg !89
  %1749 = fadd float %1728, %1748, !dbg !90
  %1750 = fadd float %1733, %1739, !dbg !91
  %1751 = fmul float %1743, %1743, !dbg !92
  %1752 = fmul float %1723, %1751, !dbg !93
  %1753 = fmul float %1747, %1752, !dbg !94
  %1754 = fadd float %1750, %1753, !dbg !95
  %1755 = bitcast float %1749 to i32, !dbg !81
  %1756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1755, i32 1, i32 31), !dbg !81
  %1757 = bitcast i32 %1756 to float, !dbg !81
  %1758 = bitcast float %1754 to i32, !dbg !81
  %1759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1758, i32 1, i32 31), !dbg !81
  %1760 = bitcast i32 %1759 to float, !dbg !81
  %1761 = bitcast float %1744 to i32, !dbg !81
  %1762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1761, i32 1, i32 31), !dbg !81
  %1763 = bitcast i32 %1762 to float, !dbg !81
  %1764 = fsub float %1757, %1749, !dbg !83
  %1765 = fadd float %1744, %1763, !dbg !85
  %1766 = fcmp oeq float %1765, 0.000000e+00, !dbg !86
  %1767 = tail call float @llvm.nvvm.div.full(float %1763, float %1765), !dbg !87
  %1768 = select i1 %1766, float 0.000000e+00, float %1767, !dbg !88
  %1769 = fmul float %1764, %1768, !dbg !89
  %1770 = fadd float %1749, %1769, !dbg !90
  %1771 = fadd float %1754, %1760, !dbg !91
  %1772 = fmul float %1764, %1764, !dbg !92
  %1773 = fmul float %1744, %1772, !dbg !93
  %1774 = fmul float %1768, %1773, !dbg !94
  %1775 = fadd float %1771, %1774, !dbg !95
  %1776 = bitcast float %1455 to i32, !dbg !81
  %1777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1776, i32 16, i32 31), !dbg !81
  %1778 = bitcast i32 %1777 to float, !dbg !81
  %1779 = bitcast float %1460 to i32, !dbg !81
  %1780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1779, i32 16, i32 31), !dbg !81
  %1781 = bitcast i32 %1780 to float, !dbg !81
  %1782 = bitcast float %1450 to i32, !dbg !81
  %1783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1782, i32 16, i32 31), !dbg !81
  %1784 = bitcast i32 %1783 to float, !dbg !81
  %1785 = fsub float %1778, %1455, !dbg !83
  %1786 = fadd float %1450, %1784, !dbg !85
  %1787 = fcmp oeq float %1786, 0.000000e+00, !dbg !86
  %1788 = tail call float @llvm.nvvm.div.full(float %1784, float %1786), !dbg !87
  %1789 = select i1 %1787, float 0.000000e+00, float %1788, !dbg !88
  %1790 = fmul float %1785, %1789, !dbg !89
  %1791 = fadd float %1455, %1790, !dbg !90
  %1792 = fadd float %1460, %1781, !dbg !91
  %1793 = fmul float %1785, %1785, !dbg !92
  %1794 = fmul float %1450, %1793, !dbg !93
  %1795 = fmul float %1794, %1789, !dbg !94
  %1796 = fadd float %1792, %1795, !dbg !95
  %1797 = bitcast float %1791 to i32, !dbg !81
  %1798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1797, i32 8, i32 31), !dbg !81
  %1799 = bitcast i32 %1798 to float, !dbg !81
  %1800 = bitcast float %1796 to i32, !dbg !81
  %1801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1800, i32 8, i32 31), !dbg !81
  %1802 = bitcast i32 %1801 to float, !dbg !81
  %1803 = bitcast float %1786 to i32, !dbg !81
  %1804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1803, i32 8, i32 31), !dbg !81
  %1805 = bitcast i32 %1804 to float, !dbg !81
  %1806 = fsub float %1799, %1791, !dbg !83
  %1807 = fadd float %1786, %1805, !dbg !85
  %1808 = fcmp oeq float %1807, 0.000000e+00, !dbg !86
  %1809 = tail call float @llvm.nvvm.div.full(float %1805, float %1807), !dbg !87
  %1810 = select i1 %1808, float 0.000000e+00, float %1809, !dbg !88
  %1811 = fmul float %1806, %1810, !dbg !89
  %1812 = fadd float %1791, %1811, !dbg !90
  %1813 = fadd float %1796, %1802, !dbg !91
  %1814 = fmul float %1806, %1806, !dbg !92
  %1815 = fmul float %1786, %1814, !dbg !93
  %1816 = fmul float %1810, %1815, !dbg !94
  %1817 = fadd float %1813, %1816, !dbg !95
  %1818 = bitcast float %1812 to i32, !dbg !81
  %1819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1818, i32 4, i32 31), !dbg !81
  %1820 = bitcast i32 %1819 to float, !dbg !81
  %1821 = bitcast float %1817 to i32, !dbg !81
  %1822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1821, i32 4, i32 31), !dbg !81
  %1823 = bitcast i32 %1822 to float, !dbg !81
  %1824 = bitcast float %1807 to i32, !dbg !81
  %1825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1824, i32 4, i32 31), !dbg !81
  %1826 = bitcast i32 %1825 to float, !dbg !81
  %1827 = fsub float %1820, %1812, !dbg !83
  %1828 = fadd float %1807, %1826, !dbg !85
  %1829 = fcmp oeq float %1828, 0.000000e+00, !dbg !86
  %1830 = tail call float @llvm.nvvm.div.full(float %1826, float %1828), !dbg !87
  %1831 = select i1 %1829, float 0.000000e+00, float %1830, !dbg !88
  %1832 = fmul float %1827, %1831, !dbg !89
  %1833 = fadd float %1812, %1832, !dbg !90
  %1834 = fadd float %1817, %1823, !dbg !91
  %1835 = fmul float %1827, %1827, !dbg !92
  %1836 = fmul float %1807, %1835, !dbg !93
  %1837 = fmul float %1831, %1836, !dbg !94
  %1838 = fadd float %1834, %1837, !dbg !95
  %1839 = bitcast float %1833 to i32, !dbg !81
  %1840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1839, i32 2, i32 31), !dbg !81
  %1841 = bitcast i32 %1840 to float, !dbg !81
  %1842 = bitcast float %1838 to i32, !dbg !81
  %1843 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1842, i32 2, i32 31), !dbg !81
  %1844 = bitcast i32 %1843 to float, !dbg !81
  %1845 = bitcast float %1828 to i32, !dbg !81
  %1846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1845, i32 2, i32 31), !dbg !81
  %1847 = bitcast i32 %1846 to float, !dbg !81
  %1848 = fsub float %1841, %1833, !dbg !83
  %1849 = fadd float %1828, %1847, !dbg !85
  %1850 = fcmp oeq float %1849, 0.000000e+00, !dbg !86
  %1851 = tail call float @llvm.nvvm.div.full(float %1847, float %1849), !dbg !87
  %1852 = select i1 %1850, float 0.000000e+00, float %1851, !dbg !88
  %1853 = fmul float %1848, %1852, !dbg !89
  %1854 = fadd float %1833, %1853, !dbg !90
  %1855 = fadd float %1838, %1844, !dbg !91
  %1856 = fmul float %1848, %1848, !dbg !92
  %1857 = fmul float %1828, %1856, !dbg !93
  %1858 = fmul float %1852, %1857, !dbg !94
  %1859 = fadd float %1855, %1858, !dbg !95
  %1860 = bitcast float %1854 to i32, !dbg !81
  %1861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1860, i32 1, i32 31), !dbg !81
  %1862 = bitcast i32 %1861 to float, !dbg !81
  %1863 = bitcast float %1859 to i32, !dbg !81
  %1864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1863, i32 1, i32 31), !dbg !81
  %1865 = bitcast i32 %1864 to float, !dbg !81
  %1866 = bitcast float %1849 to i32, !dbg !81
  %1867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1866, i32 1, i32 31), !dbg !81
  %1868 = bitcast i32 %1867 to float, !dbg !81
  %1869 = fsub float %1862, %1854, !dbg !83
  %1870 = fadd float %1849, %1868, !dbg !85
  %1871 = fcmp oeq float %1870, 0.000000e+00, !dbg !86
  %1872 = tail call float @llvm.nvvm.div.full(float %1868, float %1870), !dbg !87
  %1873 = select i1 %1871, float 0.000000e+00, float %1872, !dbg !88
  %1874 = fmul float %1869, %1873, !dbg !89
  %1875 = fadd float %1854, %1874, !dbg !90
  %1876 = fadd float %1859, %1865, !dbg !91
  %1877 = fmul float %1869, %1869, !dbg !92
  %1878 = fmul float %1849, %1877, !dbg !93
  %1879 = fmul float %1873, %1878, !dbg !94
  %1880 = fadd float %1876, %1879, !dbg !95
  %1881 = and i32 %1089, 7, !dbg !81
  %1882 = icmp eq i32 %21, 0, !dbg !81
  %1883 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1881, !dbg !81
  %1884 = bitcast float %1560 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1883, <1 x i32> %1884, i1 %1882) #5, !dbg !81
  %1885 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1881, !dbg !81
  %1886 = bitcast float %1565 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1885, <1 x i32> %1886, i1 %1882) #5, !dbg !81
  %1887 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1881, !dbg !81
  %1888 = bitcast float %1555 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1887, <1 x i32> %1888, i1 %1882) #5, !dbg !81
  %1889 = or disjoint i32 %1881, 8, !dbg !81
  %1890 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1889, !dbg !81
  %1891 = bitcast float %1665 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1890, <1 x i32> %1891, i1 %1882) #5, !dbg !81
  %1892 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1889, !dbg !81
  %1893 = bitcast float %1670 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1892, <1 x i32> %1893, i1 %1882) #5, !dbg !81
  %1894 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1889, !dbg !81
  %1895 = bitcast float %1660 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1894, <1 x i32> %1895, i1 %1882) #5, !dbg !81
  %1896 = or disjoint i32 %1881, 16, !dbg !81
  %1897 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1896, !dbg !81
  %1898 = bitcast float %1770 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1897, <1 x i32> %1898, i1 %1882) #5, !dbg !81
  %1899 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1896, !dbg !81
  %1900 = bitcast float %1775 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1899, <1 x i32> %1900, i1 %1882) #5, !dbg !81
  %1901 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1896, !dbg !81
  %1902 = bitcast float %1765 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1901, <1 x i32> %1902, i1 %1882) #5, !dbg !81
  %1903 = or disjoint i32 %1881, 24, !dbg !81
  %1904 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1903, !dbg !81
  %1905 = bitcast float %1875 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1904, <1 x i32> %1905, i1 %1882) #5, !dbg !81
  %1906 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1903, !dbg !81
  %1907 = bitcast float %1880 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1906, <1 x i32> %1907, i1 %1882) #5, !dbg !81
  %1908 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1903, !dbg !81
  %1909 = bitcast float %1870 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1908, <1 x i32> %1909, i1 %1882) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1910 = icmp slt i32 %19, 32, !dbg !81
  %1911 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !81
  %1912 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1911, i1 %1910) #5, !dbg !81
  %1913 = bitcast i32 %1912 to float, !dbg !81
  %1914 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !81
  %1915 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1914, i1 %1910) #5, !dbg !81
  %1916 = bitcast i32 %1915 to float, !dbg !81
  %1917 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !81
  %1918 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1917, i1 %1910) #5, !dbg !81
  %1919 = bitcast i32 %1918 to float, !dbg !81
  %1920 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1912, i32 4, i32 31), !dbg !81
  %1921 = bitcast i32 %1920 to float, !dbg !81
  %1922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1915, i32 4, i32 31), !dbg !81
  %1923 = bitcast i32 %1922 to float, !dbg !81
  %1924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1918, i32 4, i32 31), !dbg !81
  %1925 = bitcast i32 %1924 to float, !dbg !81
  %1926 = fsub float %1921, %1913, !dbg !83
  %1927 = fadd float %1919, %1925, !dbg !85
  %1928 = fcmp oeq float %1927, 0.000000e+00, !dbg !86
  %1929 = tail call float @llvm.nvvm.div.full(float %1925, float %1927), !dbg !87
  %1930 = select i1 %1928, float 0.000000e+00, float %1929, !dbg !88
  %1931 = fmul float %1926, %1930, !dbg !89
  %1932 = fadd float %1931, %1913, !dbg !90
  %1933 = fadd float %1916, %1923, !dbg !91
  %1934 = fmul float %1926, %1926, !dbg !92
  %1935 = fmul float %1934, %1919, !dbg !93
  %1936 = fmul float %1935, %1930, !dbg !94
  %1937 = fadd float %1933, %1936, !dbg !95
  %1938 = bitcast float %1932 to i32, !dbg !81
  %1939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1938, i32 2, i32 31), !dbg !81
  %1940 = bitcast i32 %1939 to float, !dbg !81
  %1941 = bitcast float %1937 to i32, !dbg !81
  %1942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1941, i32 2, i32 31), !dbg !81
  %1943 = bitcast i32 %1942 to float, !dbg !81
  %1944 = bitcast float %1927 to i32, !dbg !81
  %1945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1944, i32 2, i32 31), !dbg !81
  %1946 = bitcast i32 %1945 to float, !dbg !81
  %1947 = fsub float %1940, %1932, !dbg !83
  %1948 = fadd float %1927, %1946, !dbg !85
  %1949 = fcmp oeq float %1948, 0.000000e+00, !dbg !86
  %1950 = tail call float @llvm.nvvm.div.full(float %1946, float %1948), !dbg !87
  %1951 = select i1 %1949, float 0.000000e+00, float %1950, !dbg !88
  %1952 = fmul float %1947, %1951, !dbg !89
  %1953 = fadd float %1932, %1952, !dbg !90
  %1954 = fadd float %1937, %1943, !dbg !91
  %1955 = fmul float %1947, %1947, !dbg !92
  %1956 = fmul float %1927, %1955, !dbg !93
  %1957 = fmul float %1951, %1956, !dbg !94
  %1958 = fadd float %1954, %1957, !dbg !95
  %1959 = bitcast float %1953 to i32, !dbg !81
  %1960 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1959, i32 1, i32 31), !dbg !81
  %1961 = bitcast i32 %1960 to float, !dbg !81
  %1962 = bitcast float %1958 to i32, !dbg !81
  %1963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1962, i32 1, i32 31), !dbg !81
  %1964 = bitcast i32 %1963 to float, !dbg !81
  %1965 = bitcast float %1948 to i32, !dbg !81
  %1966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1965, i32 1, i32 31), !dbg !81
  %1967 = bitcast i32 %1966 to float, !dbg !81
  %1968 = fsub float %1961, %1953, !dbg !83
  %1969 = fadd float %1948, %1967, !dbg !85
  %1970 = fcmp oeq float %1969, 0.000000e+00, !dbg !86
  %1971 = tail call float @llvm.nvvm.div.full(float %1967, float %1969), !dbg !87
  %1972 = select i1 %1970, float 0.000000e+00, float %1971, !dbg !88
  %1973 = fmul float %1968, %1972, !dbg !89
  %1974 = fadd float %1953, %1973, !dbg !90
  %1975 = fadd float %1958, %1964, !dbg !91
  %1976 = fmul float %1968, %1968, !dbg !92
  %1977 = fmul float %1948, %1976, !dbg !93
  %1978 = fmul float %1972, %1977, !dbg !94
  %1979 = fadd float %1975, %1978, !dbg !95
  %1980 = and i32 %19, 7, !dbg !81
  %1981 = icmp eq i32 %1980, 0, !dbg !81
  %1982 = and i1 %1910, %1981, !dbg !81
  %1983 = bitcast float %1974 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1911, <1 x i32> %1983, i1 %1982) #5, !dbg !81
  %1984 = bitcast float %1979 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1914, <1 x i32> %1984, i1 %1982) #5, !dbg !81
  %1985 = bitcast float %1969 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1917, <1 x i32> %1985, i1 %1982) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1986 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %1987 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !81
  %1988 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  %1989 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !81
  %1990 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  %1991 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 160), align 16, !dbg !81
  %1992 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !81
  %1993 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 224), align 16, !dbg !81
  %1994 = tail call float @llvm.nvvm.div.full(float %1990, float 3.072000e+03), !dbg !96
  %1995 = tail call float @llvm.nvvm.div.full(float %1991, float 3.072000e+03), !dbg !96
  %1996 = tail call float @llvm.nvvm.div.full(float %1992, float 3.072000e+03), !dbg !96
  %1997 = tail call float @llvm.nvvm.div.full(float %1993, float 3.072000e+03), !dbg !96
  %1998 = fadd float %1994, 0x3EB0C6F7A0000000, !dbg !97
  %1999 = fadd float %1995, 0x3EB0C6F7A0000000, !dbg !97
  %2000 = fadd float %1996, 0x3EB0C6F7A0000000, !dbg !97
  %2001 = fadd float %1997, 0x3EB0C6F7A0000000, !dbg !97
  %2002 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2003 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2004 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2005 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2006 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2007 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2008 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2009 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i273 = icmp eq i32 %2009, 0, !dbg !98
  br i1 %.not.i273, label %2012, label %2010, !dbg !98

2010:                                             ; preds = %__nv_rsqrtf.exit
  %2011 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1998), !dbg !98
  br label %__nv_rsqrtf.exit275, !dbg !98

2012:                                             ; preds = %__nv_rsqrtf.exit
  %2013 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1998), !dbg !98
  br label %__nv_rsqrtf.exit275, !dbg !98

__nv_rsqrtf.exit275:                              ; preds = %2010, %2012
  %.0.i274 = phi float [ %2011, %2010 ], [ %2013, %2012 ], !dbg !98
  %2014 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2015 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2016 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2017 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2018 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2019 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2020 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2021 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i297 = icmp eq i32 %2021, 0, !dbg !98
  br i1 %.not.i297, label %2024, label %2022, !dbg !98

2022:                                             ; preds = %__nv_rsqrtf.exit275
  %2023 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1999), !dbg !98
  br label %__nv_rsqrtf.exit299, !dbg !98

2024:                                             ; preds = %__nv_rsqrtf.exit275
  %2025 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1999), !dbg !98
  br label %__nv_rsqrtf.exit299, !dbg !98

__nv_rsqrtf.exit299:                              ; preds = %2022, %2024
  %.0.i298 = phi float [ %2023, %2022 ], [ %2025, %2024 ], !dbg !98
  %2026 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2027 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2028 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2029 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2030 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2031 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2032 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2033 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i321 = icmp eq i32 %2033, 0, !dbg !98
  br i1 %.not.i321, label %2036, label %2034, !dbg !98

2034:                                             ; preds = %__nv_rsqrtf.exit299
  %2035 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %2000), !dbg !98
  br label %__nv_rsqrtf.exit323, !dbg !98

2036:                                             ; preds = %__nv_rsqrtf.exit299
  %2037 = tail call float @llvm.nvvm.rsqrt.approx.f(float %2000), !dbg !98
  br label %__nv_rsqrtf.exit323, !dbg !98

__nv_rsqrtf.exit323:                              ; preds = %2034, %2036
  %.0.i322 = phi float [ %2035, %2034 ], [ %2037, %2036 ], !dbg !98
  %2038 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2039 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2040 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2041 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2042 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2043 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2044 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %2045 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i345 = icmp eq i32 %2045, 0, !dbg !98
  br i1 %.not.i345, label %2048, label %2046, !dbg !98

2046:                                             ; preds = %__nv_rsqrtf.exit323
  %2047 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %2001), !dbg !98
  br label %__nv_rsqrtf.exit347, !dbg !98

2048:                                             ; preds = %__nv_rsqrtf.exit323
  %2049 = tail call float @llvm.nvvm.rsqrt.approx.f(float %2001), !dbg !98
  br label %__nv_rsqrtf.exit347, !dbg !98

__nv_rsqrtf.exit347:                              ; preds = %2046, %2048
  %.0.i346 = phi float [ %2047, %2046 ], [ %2049, %2048 ], !dbg !98
  %invariant.gep352 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !99
  %2050 = lshr i32 %30, 8
  %2051 = and i32 %2050, 8
  %2052 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %2051
  %2053 = getelementptr bfloat, ptr addrspace(3) %2052, i32 %141
  %2054 = getelementptr bfloat, ptr addrspace(3) %2052, i32 %145
  %2055 = insertelement <2 x float> poison, float %.0.i346, i64 0, !dbg !100
  %2056 = shufflevector <2 x float> %2055, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %2057 = insertelement <2 x float> poison, float %1989, i64 0, !dbg !101
  %2058 = shufflevector <2 x float> %2057, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %2059 = insertelement <32 x float> poison, float %.0.i274, i64 0, !dbg !100
  %2060 = insertelement <32 x float> %2059, float %.0.i298, i64 1, !dbg !100
  %2061 = insertelement <32 x float> %2060, float %.0.i322, i64 2, !dbg !100
  %2062 = insertelement <32 x float> %2061, float %.0.i346, i64 3, !dbg !100
  %2063 = shufflevector <32 x float> %2062, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !100
  %2064 = insertelement <32 x float> poison, float %1986, i64 0, !dbg !101
  %2065 = insertelement <32 x float> %2064, float %1987, i64 1, !dbg !101
  %2066 = insertelement <32 x float> %2065, float %1988, i64 2, !dbg !101
  %2067 = insertelement <32 x float> %2066, float %1989, i64 3, !dbg !101
  %2068 = shufflevector <32 x float> %2067, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !101
  %2069 = insertelement <4 x float> poison, float %.0.i322, i64 0, !dbg !100
  %2070 = insertelement <4 x float> %2069, float %.0.i298, i64 1, !dbg !100
  %2071 = shufflevector <4 x float> %2070, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !100
  %2072 = insertelement <4 x float> poison, float %1988, i64 0, !dbg !101
  %2073 = insertelement <4 x float> %2072, float %1987, i64 1, !dbg !101
  %2074 = shufflevector <4 x float> %2073, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !101
  %invariant.op = or i32 %28, 12292, !dbg !99
  br label %2075, !dbg !99

2075:                                             ; preds = %__nv_rsqrtf.exit347, %2075
  %2076 = phi i1 [ true, %__nv_rsqrtf.exit347 ], [ false, %2075 ]
  %indvars.iv513 = phi i64 [ 0, %__nv_rsqrtf.exit347 ], [ 2048, %2075 ]
  %2077 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit347 ], [ %2320, %2075 ]
  %2078 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit347 ], [ %2321, %2075 ]
  %2079 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit347 ], [ %2352, %2075 ]
  %2080 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2348, %2075 ]
  %2081 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2349, %2075 ]
  %2082 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit347 ], [ %2355, %2075 ]
  %2083 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit347 ], [ %2324, %2075 ]
  %2084 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit347 ], [ %2327, %2075 ]
  %2085 = or disjoint i64 %indvars.iv513, %163, !dbg !102
  %2086 = or disjoint i64 %indvars.iv513, %162, !dbg !102
  %2087 = or disjoint i64 %indvars.iv513, %161, !dbg !102
  %2088 = icmp samesign ult i64 %2085, 3072, !dbg !103
  %2089 = icmp samesign ult i64 %2087, 3072, !dbg !103
  %2090 = trunc nuw nsw i64 %2087 to i32, !dbg !104
  %2091 = add i32 %107, %2090, !dbg !104
  %2092 = trunc nuw nsw i64 %indvars.iv513 to i32, !dbg !104
  %2093 = or disjoint i32 %32, %2092, !dbg !104
  %2094 = add i32 %2093, %107, !dbg !104
  %2095 = add i32 %108, %2090, !dbg !104
  %2096 = add i32 %2093, %108, !dbg !104
  %2097 = or disjoint i64 %2085, %164, !dbg !104
  %2098 = trunc nuw nsw i64 %2085 to i32, !dbg !104
  %2099 = add i32 %110, %2098, !dbg !104
  %2100 = add i32 %111, %2098, !dbg !104
  %2101 = add i32 %112, %2098, !dbg !104
  %2102 = sext i32 %2091 to i64, !dbg !105
  %2103 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2102, !dbg !105
  %2104 = sext i32 %2094 to i64, !dbg !105
  %2105 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2104, !dbg !105
  %2106 = sext i32 %2095 to i64, !dbg !105
  %2107 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2106, !dbg !105
  %2108 = sext i32 %2096 to i64, !dbg !105
  %2109 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2108, !dbg !105
  %2110 = and i1 %26, %2088, !dbg !106
  %2111 = and i1 %24, %2089, !dbg !106
  %2112 = and i1 %25, %2089, !dbg !106
  %2113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2103, i1 %2111) #5, !dbg !107
  %2114 = extractvalue { i32, i32, i32, i32 } %2113, 0, !dbg !107
  %2115 = extractvalue { i32, i32, i32, i32 } %2113, 1, !dbg !107
  %2116 = extractvalue { i32, i32, i32, i32 } %2113, 2, !dbg !107
  %2117 = extractvalue { i32, i32, i32, i32 } %2113, 3, !dbg !107
  %2118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2105, i1 %2111) #5, !dbg !107
  %2119 = extractvalue { i32, i32, i32, i32 } %2118, 0, !dbg !107
  %2120 = extractvalue { i32, i32, i32, i32 } %2118, 1, !dbg !107
  %2121 = extractvalue { i32, i32, i32, i32 } %2118, 2, !dbg !107
  %2122 = extractvalue { i32, i32, i32, i32 } %2118, 3, !dbg !107
  %2123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2107, i1 %2112) #5, !dbg !107
  %2124 = extractvalue { i32, i32, i32, i32 } %2123, 0, !dbg !107
  %2125 = extractvalue { i32, i32, i32, i32 } %2123, 1, !dbg !107
  %2126 = extractvalue { i32, i32, i32, i32 } %2123, 2, !dbg !107
  %2127 = extractvalue { i32, i32, i32, i32 } %2123, 3, !dbg !107
  %2128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2109, i1 %2112) #5, !dbg !107
  %2129 = extractvalue { i32, i32, i32, i32 } %2128, 0, !dbg !107
  %2130 = extractvalue { i32, i32, i32, i32 } %2128, 1, !dbg !107
  %2131 = extractvalue { i32, i32, i32, i32 } %2128, 2, !dbg !107
  %2132 = extractvalue { i32, i32, i32, i32 } %2128, 3, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2053, i32 %2114, i32 %2115, i32 %2116, i32 %2117, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2054, i32 %2119, i32 %2120, i32 %2121, i32 %2122, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %2133 = or disjoint i64 %2085, 12288, !dbg !108
  %2134 = trunc nuw nsw i64 %indvars.iv513 to i32
  %.reass.reass.reass = or i32 %2134, %invariant.op
  %2135 = getelementptr float, ptr addrspace(1) %1, i64 %2133, !dbg !109
  %2136 = zext nneg i32 %.reass.reass.reass to i64, !dbg !109
  %2137 = getelementptr float, ptr addrspace(1) %1, i64 %2136, !dbg !109
  %2138 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2133, !dbg !110
  %2139 = add nuw nsw i64 %2085, 9216, !dbg !111
  %2140 = getelementptr float, ptr addrspace(1) %1, i64 %2139, !dbg !112
  %gep353 = getelementptr float, ptr addrspace(1) %invariant.gep352, i64 %2086, !dbg !112
  %2141 = getelementptr bfloat, ptr addrspace(1) %2, i64 %2139, !dbg !113
  %2142 = fcmp uno <32 x float> %2082, zeroinitializer, !dbg !114
  %2143 = fcmp uno <4 x float> %2083, zeroinitializer, !dbg !116
  %2144 = fcmp uno float %2077, 0.000000e+00, !dbg !116
  %2145 = fcmp uno float %2078, 0.000000e+00, !dbg !116
  %2146 = fcmp uno <16 x float> %2084, zeroinitializer, !dbg !116
  %2147 = fcmp uno <4 x float> %2081, zeroinitializer, !dbg !114
  %2148 = fcmp uno <4 x float> %2080, zeroinitializer, !dbg !114
  %2149 = fcmp uno <2 x float> %2079, zeroinitializer, !dbg !114
  %2150 = load <8 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !100
  %2151 = load <2 x bfloat>, ptr addrspace(3) %167, align 4, !dbg !100
  %2152 = load <4 x bfloat>, ptr addrspace(3) %168, align 8, !dbg !100
  %2153 = shufflevector <8 x bfloat> %2150, <8 x bfloat> poison, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2154 = shufflevector <8 x bfloat> %2150, <8 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2155 = shufflevector <32 x bfloat> %2153, <32 x bfloat> %2154, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !118
  %2156 = shufflevector <4 x bfloat> %2152, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2157 = shufflevector <32 x bfloat> %2155, <32 x bfloat> %2156, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2158 = load <2 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !100
  %2159 = shufflevector <2 x bfloat> %2158, <2 x bfloat> poison, <2 x i32> <i32 1, i32 0>, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2053, i32 %2124, i32 %2125, i32 %2126, i32 %2127, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %2054, i32 %2129, i32 %2130, i32 %2131, i32 %2132, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %2160 = load <2 x bfloat>, ptr addrspace(3) %147, align 16, !dbg !100
  %2161 = shufflevector <2 x bfloat> %2160, <2 x bfloat> poison, <2 x i32> <i32 1, i32 0>, !dbg !100
  %2162 = load <4 x bfloat>, ptr addrspace(3) %165, align 4, !dbg !100
  %2163 = load <2 x bfloat>, ptr addrspace(3) %166, align 4, !dbg !100
  %2164 = load <2 x bfloat>, ptr addrspace(3) %167, align 4, !dbg !100
  %2165 = load <4 x bfloat>, ptr addrspace(3) %168, align 8, !dbg !100
  %2166 = shufflevector <2 x bfloat> %2161, <2 x bfloat> %2159, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !118
  %2167 = fpext <4 x bfloat> %2166 to <4 x float>, !dbg !118
  %2168 = shufflevector <4 x bfloat> %2162, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2169 = shufflevector <32 x bfloat> %2157, <32 x bfloat> %2168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2170 = shufflevector <4 x bfloat> %2165, <4 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2171 = shufflevector <32 x bfloat> %2169, <32 x bfloat> %2170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2172 = shufflevector <2 x bfloat> %2151, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2173 = shufflevector <32 x bfloat> %2171, <32 x bfloat> %2172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 32, i32 33, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2174 = shufflevector <2 x bfloat> %2163, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2175 = shufflevector <32 x bfloat> %2173, <32 x bfloat> %2174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2176 = shufflevector <2 x bfloat> %2164, <2 x bfloat> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %2177 = shufflevector <32 x bfloat> %2175, <32 x bfloat> %2176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 32, i32 33, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !118
  %2178 = fpext <32 x bfloat> %2177 to <32 x float>, !dbg !118
  %2179 = fsub <4 x float> %2167, %2074, !dbg !101
  %2180 = fsub <32 x float> %2178, %2068, !dbg !101
  %2181 = fmul <4 x float> %2071, %2179, !dbg !100
  %2182 = fmul <32 x float> %2063, %2180, !dbg !100
  %2183 = load <2 x bfloat>, ptr addrspace(3) %148, align 16, !dbg !100
  %2184 = fpext <2 x bfloat> %2183 to <2 x float>, !dbg !118
  %2185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2135, i1 %2088) #5, !dbg !119
  %2186 = extractvalue { i32, i32, i32, i32 } %2185, 0, !dbg !119
  %2187 = extractvalue { i32, i32, i32, i32 } %2185, 1, !dbg !119
  %2188 = extractvalue { i32, i32, i32, i32 } %2185, 2, !dbg !119
  %2189 = extractvalue { i32, i32, i32, i32 } %2185, 3, !dbg !119
  %2190 = insertelement <2 x i32> poison, i32 %2186, i64 0, !dbg !119
  %2191 = insertelement <2 x i32> %2190, i32 %2187, i64 1, !dbg !119
  %2192 = bitcast <2 x i32> %2191 to <2 x float>, !dbg !119
  %2193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2137, i1 %2088) #5, !dbg !119
  %2194 = extractvalue { i32, i32, i32, i32 } %2193, 0, !dbg !119
  %2195 = extractvalue { i32, i32, i32, i32 } %2193, 1, !dbg !119
  %2196 = extractvalue { i32, i32, i32, i32 } %2193, 2, !dbg !119
  %2197 = extractvalue { i32, i32, i32, i32 } %2193, 3, !dbg !119
  %2198 = insertelement <4 x i32> poison, i32 %2188, i64 0, !dbg !119
  %2199 = insertelement <4 x i32> %2198, i32 %2189, i64 1, !dbg !119
  %2200 = insertelement <4 x i32> %2199, i32 %2194, i64 2, !dbg !119
  %2201 = insertelement <4 x i32> %2200, i32 %2195, i64 3, !dbg !119
  %2202 = bitcast <4 x i32> %2201 to <4 x float>, !dbg !119
  %2203 = insertelement <2 x i32> poison, i32 %2196, i64 0, !dbg !119
  %2204 = insertelement <2 x i32> %2203, i32 %2197, i64 1, !dbg !119
  %2205 = bitcast <2 x i32> %2204 to <2 x float>, !dbg !119
  %2206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2138, i1 %2088) #5, !dbg !120
  %2207 = extractvalue { i32, i32, i32, i32 } %2206, 0, !dbg !120
  %2208 = bitcast i32 %2207 to <2 x bfloat>, !dbg !120
  %2209 = extractvalue { i32, i32, i32, i32 } %2206, 1, !dbg !120
  %2210 = bitcast i32 %2209 to <2 x bfloat>, !dbg !120
  %2211 = extractvalue { i32, i32, i32, i32 } %2206, 2, !dbg !120
  %2212 = bitcast i32 %2211 to <2 x bfloat>, !dbg !120
  %2213 = extractvalue { i32, i32, i32, i32 } %2206, 3, !dbg !120
  %2214 = bitcast i32 %2213 to <2 x bfloat>, !dbg !120
  %2215 = fpext <2 x bfloat> %2208 to <2 x float>, !dbg !121
  %2216 = shufflevector <2 x bfloat> %2210, <2 x bfloat> %2212, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !121
  %2217 = fpext <4 x bfloat> %2216 to <4 x float>, !dbg !121
  %2218 = fpext <2 x bfloat> %2214 to <2 x float>, !dbg !121
  %2219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2140, i1 %2088) #5, !dbg !122
  %2220 = extractvalue { i32, i32, i32, i32 } %2219, 0, !dbg !122
  %2221 = extractvalue { i32, i32, i32, i32 } %2219, 1, !dbg !122
  %2222 = extractvalue { i32, i32, i32, i32 } %2219, 2, !dbg !122
  %2223 = extractvalue { i32, i32, i32, i32 } %2219, 3, !dbg !122
  %2224 = insertelement <2 x i32> poison, i32 %2220, i64 0, !dbg !122
  %2225 = insertelement <2 x i32> %2224, i32 %2221, i64 1, !dbg !122
  %2226 = bitcast <2 x i32> %2225 to <2 x float>, !dbg !122
  %2227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep353, i1 %2088) #5, !dbg !122
  %2228 = extractvalue { i32, i32, i32, i32 } %2227, 0, !dbg !122
  %2229 = extractvalue { i32, i32, i32, i32 } %2227, 1, !dbg !122
  %2230 = extractvalue { i32, i32, i32, i32 } %2227, 2, !dbg !122
  %2231 = extractvalue { i32, i32, i32, i32 } %2227, 3, !dbg !122
  %2232 = insertelement <4 x i32> poison, i32 %2222, i64 0, !dbg !122
  %2233 = insertelement <4 x i32> %2232, i32 %2223, i64 1, !dbg !122
  %2234 = insertelement <4 x i32> %2233, i32 %2228, i64 2, !dbg !122
  %2235 = insertelement <4 x i32> %2234, i32 %2229, i64 3, !dbg !122
  %2236 = bitcast <4 x i32> %2235 to <4 x float>, !dbg !122
  %2237 = insertelement <2 x i32> poison, i32 %2230, i64 0, !dbg !122
  %2238 = insertelement <2 x i32> %2237, i32 %2231, i64 1, !dbg !122
  %2239 = bitcast <2 x i32> %2238 to <2 x float>, !dbg !122
  %2240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2141, i1 %2088) #5, !dbg !123
  %2241 = extractvalue { i32, i32, i32, i32 } %2240, 0, !dbg !123
  %2242 = bitcast i32 %2241 to <2 x bfloat>, !dbg !123
  %2243 = extractvalue { i32, i32, i32, i32 } %2240, 1, !dbg !123
  %2244 = bitcast i32 %2243 to <2 x bfloat>, !dbg !123
  %2245 = extractvalue { i32, i32, i32, i32 } %2240, 2, !dbg !123
  %2246 = bitcast i32 %2245 to <2 x bfloat>, !dbg !123
  %2247 = extractvalue { i32, i32, i32, i32 } %2240, 3, !dbg !123
  %2248 = bitcast i32 %2247 to <2 x bfloat>, !dbg !123
  %2249 = fpext <2 x bfloat> %2242 to <2 x float>, !dbg !124
  %2250 = shufflevector <2 x bfloat> %2244, <2 x bfloat> %2246, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !124
  %2251 = fpext <4 x bfloat> %2250 to <4 x float>, !dbg !124
  %2252 = fpext <2 x bfloat> %2248 to <2 x float>, !dbg !124
  %2253 = fsub <2 x float> %2184, %2058, !dbg !101
  %2254 = fmul <2 x float> %2056, %2253, !dbg !100
  %2255 = fadd <2 x float> %2192, %2215, !dbg !125
  %2256 = fadd <4 x float> %2202, %2217, !dbg !125
  %2257 = fadd <2 x float> %2205, %2218, !dbg !125
  %2258 = fadd <2 x float> %2255, splat (float 1.000000e+00), !dbg !126
  %2259 = fadd <4 x float> %2256, splat (float 1.000000e+00), !dbg !126
  %2260 = fadd <2 x float> %2257, splat (float 1.000000e+00), !dbg !126
  %2261 = shufflevector <2 x float> %2258, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !127
  %2262 = fmul <4 x float> %2181, %2261, !dbg !127
  %2263 = fmul <2 x float> %2254, %2258, !dbg !127
  %2264 = shufflevector <2 x float> %2258, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !127
  %2265 = shufflevector <4 x float> %2259, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2266 = shufflevector <8 x float> %2265, <8 x float> %2264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !127
  %2267 = shufflevector <2 x float> %2260, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %2268 = shufflevector <8 x float> %2266, <8 x float> %2267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !127
  %2269 = shufflevector <8 x float> %2268, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !127
  %2270 = fmul <32 x float> %2182, %2269, !dbg !127
  %2271 = fadd <2 x float> %2226, %2249, !dbg !128
  %2272 = fadd <4 x float> %2236, %2251, !dbg !128
  %2273 = fadd <2 x float> %2239, %2252, !dbg !128
  %2274 = shufflevector <2 x float> %2271, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !129
  %2275 = fadd <4 x float> %2262, %2274, !dbg !129
  %2276 = fadd <2 x float> %2263, %2271, !dbg !129
  %2277 = shufflevector <2 x float> %2271, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !129
  %2278 = shufflevector <4 x float> %2272, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !129
  %2279 = shufflevector <8 x float> %2278, <8 x float> %2277, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !129
  %2280 = shufflevector <2 x float> %2273, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !129
  %2281 = shufflevector <8 x float> %2279, <8 x float> %2280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !129
  %2282 = shufflevector <8 x float> %2281, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !129
  %2283 = fadd <32 x float> %2270, %2282, !dbg !129
  %2284 = extractelement <32 x float> %2283, i64 6, !dbg !130
  %2285 = fcmp olt float %2077, %2284, !dbg !131
  %2286 = extractelement <32 x float> %2283, i64 7, !dbg !130
  %2287 = fcmp olt float %2078, %2286, !dbg !131
  %2288 = extractelement <32 x float> %2283, i64 8, !dbg !130
  %2289 = extractelement <32 x float> %2283, i64 9, !dbg !130
  %2290 = extractelement <32 x float> %2283, i64 10, !dbg !130
  %2291 = extractelement <32 x float> %2283, i64 11, !dbg !130
  %2292 = fcmp olt <4 x float> %2083, %2275, !dbg !131
  %2293 = extractelement <32 x float> %2283, i64 12, !dbg !130
  %2294 = extractelement <32 x float> %2283, i64 13, !dbg !130
  %2295 = extractelement <32 x float> %2283, i64 14, !dbg !130
  %2296 = extractelement <32 x float> %2283, i64 15, !dbg !130
  %2297 = extractelement <32 x float> %2283, i64 16, !dbg !130
  %2298 = extractelement <32 x float> %2283, i64 17, !dbg !130
  %2299 = extractelement <32 x float> %2283, i64 18, !dbg !130
  %2300 = extractelement <32 x float> %2283, i64 19, !dbg !130
  %2301 = extractelement <32 x float> %2283, i64 20, !dbg !130
  %2302 = extractelement <32 x float> %2283, i64 21, !dbg !130
  %2303 = extractelement <32 x float> %2283, i64 22, !dbg !130
  %2304 = extractelement <32 x float> %2283, i64 23, !dbg !130
  %2305 = or i1 %2144, %2285, !dbg !132
  %2306 = or i1 %2145, %2287, !dbg !132
  %2307 = or <4 x i1> %2143, %2292, !dbg !132
  %2308 = select i1 %2305, float %2077, float %2284, !dbg !133
  %2309 = select i1 %2306, float %2078, float %2286, !dbg !133
  %2310 = select <4 x i1> %2307, <4 x float> %2083, <4 x float> %2275, !dbg !133
  %2311 = shufflevector <32 x float> %2283, <32 x float> poison, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !131
  %2312 = fcmp olt <16 x float> %2084, %2311, !dbg !131
  %2313 = or <16 x i1> %2146, %2312, !dbg !132
  %2314 = select <16 x i1> %2313, <16 x float> %2084, <16 x float> %2311, !dbg !133
  %2315 = fcmp ogt <32 x float> %2082, %2283, !dbg !134
  %2316 = fcmp olt <32 x float> %2082, %2283, !dbg !134
  %2317 = shufflevector <32 x i1> %2315, <32 x i1> %2316, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !134
  %2318 = or <32 x i1> %2142, %2317, !dbg !135
  %2319 = select <32 x i1> %2318, <32 x float> %2082, <32 x float> %2283, !dbg !136
  %2320 = select i1 %2110, float %2308, float %2077, !dbg !137
  %2321 = select i1 %2110, float %2309, float %2078, !dbg !137
  %2322 = insertelement <4 x i1> poison, i1 %2110, i64 0, !dbg !137
  %2323 = shufflevector <4 x i1> %2322, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !137
  %2324 = select <4 x i1> %2323, <4 x float> %2310, <4 x float> %2083, !dbg !137
  %2325 = insertelement <16 x i1> poison, i1 %2110, i64 0, !dbg !137
  %2326 = shufflevector <16 x i1> %2325, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !137
  %2327 = select <16 x i1> %2326, <16 x float> %2314, <16 x float> %2084, !dbg !137
  %2328 = fcmp ogt <2 x float> %2079, %2276, !dbg !134
  %2329 = or <2 x i1> %2149, %2328, !dbg !135
  %2330 = shufflevector <2 x float> %2276, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 0>, !dbg !134
  %2331 = shufflevector <4 x float> %2330, <4 x float> %2275, <4 x i32> <i32 4, i32 6, i32 poison, i32 3>, !dbg !134
  %2332 = shufflevector <32 x float> %2283, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 25, i32 poison>, !dbg !134
  %2333 = shufflevector <4 x float> %2331, <4 x float> %2332, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !134
  %2334 = fcmp ogt <4 x float> %2081, %2333, !dbg !134
  %2335 = fcmp olt <4 x float> %2081, %2333, !dbg !134
  %2336 = shufflevector <4 x i1> %2334, <4 x i1> %2335, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !134
  %2337 = or <4 x i1> %2147, %2336, !dbg !135
  %2338 = select <4 x i1> %2337, <4 x float> %2081, <4 x float> %2333, !dbg !136
  %2339 = shufflevector <4 x float> %2330, <4 x float> %2275, <4 x i32> <i32 5, i32 7, i32 poison, i32 1>, !dbg !134
  %2340 = shufflevector <32 x float> %2283, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 24, i32 poison>, !dbg !134
  %2341 = shufflevector <4 x float> %2339, <4 x float> %2340, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !134
  %2342 = fcmp ogt <4 x float> %2080, %2341, !dbg !134
  %2343 = fcmp olt <4 x float> %2080, %2341, !dbg !134
  %2344 = shufflevector <4 x i1> %2342, <4 x i1> %2343, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !134
  %2345 = or <4 x i1> %2148, %2344, !dbg !135
  %2346 = select <4 x i1> %2345, <4 x float> %2080, <4 x float> %2341, !dbg !136
  %2347 = select <2 x i1> %2329, <2 x float> %2079, <2 x float> %2276, !dbg !136
  %2348 = select <4 x i1> %2323, <4 x float> %2346, <4 x float> %2080, !dbg !138
  %2349 = select <4 x i1> %2323, <4 x float> %2338, <4 x float> %2081, !dbg !138
  %2350 = insertelement <2 x i1> poison, i1 %2110, i64 0, !dbg !138
  %2351 = shufflevector <2 x i1> %2350, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !138
  %2352 = select <2 x i1> %2351, <2 x float> %2347, <2 x float> %2079, !dbg !138
  %2353 = insertelement <32 x i1> poison, i1 %2110, i64 0, !dbg !138
  %2354 = shufflevector <32 x i1> %2353, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !138
  %2355 = select <32 x i1> %2354, <32 x float> %2319, <32 x float> %2082, !dbg !138
  %2356 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2097, !dbg !139
  %2357 = sext i32 %2099 to i64, !dbg !139
  %2358 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2357, !dbg !139
  %2359 = sext i32 %2100 to i64, !dbg !139
  %2360 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2359, !dbg !139
  %2361 = sext i32 %2101 to i64, !dbg !139
  %2362 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2361, !dbg !139
  %2363 = extractelement <32 x float> %2283, i64 24, !dbg !130
  %2364 = fptrunc float %2363 to bfloat, !dbg !130
  %2365 = extractelement <32 x float> %2283, i64 25, !dbg !130
  %2366 = fptrunc float %2365 to bfloat, !dbg !130
  %2367 = extractelement <32 x float> %2283, i64 0, !dbg !130
  %2368 = fptrunc float %2367 to bfloat, !dbg !130
  %2369 = extractelement <32 x float> %2283, i64 1, !dbg !130
  %2370 = fptrunc float %2369 to bfloat, !dbg !130
  %2371 = extractelement <32 x float> %2283, i64 2, !dbg !130
  %2372 = fptrunc float %2371 to bfloat, !dbg !130
  %2373 = extractelement <32 x float> %2283, i64 3, !dbg !130
  %2374 = fptrunc float %2373 to bfloat, !dbg !130
  %2375 = extractelement <32 x float> %2283, i64 4, !dbg !130
  %2376 = fptrunc float %2375 to bfloat, !dbg !130
  %2377 = extractelement <32 x float> %2283, i64 5, !dbg !130
  %2378 = fptrunc float %2377 to bfloat, !dbg !130
  %2379 = extractelement <4 x float> %2275, i64 3, !dbg !130
  %2380 = fptrunc float %2379 to bfloat, !dbg !130
  %2381 = extractelement <4 x float> %2275, i64 2, !dbg !130
  %2382 = fptrunc float %2381 to bfloat, !dbg !130
  %2383 = fptrunc float %2284 to bfloat, !dbg !130
  %2384 = fptrunc float %2286 to bfloat, !dbg !130
  %2385 = fptrunc float %2288 to bfloat, !dbg !130
  %2386 = fptrunc float %2289 to bfloat, !dbg !130
  %2387 = fptrunc float %2290 to bfloat, !dbg !130
  %2388 = fptrunc float %2291 to bfloat, !dbg !130
  %2389 = extractelement <4 x float> %2275, i64 1, !dbg !130
  %2390 = fptrunc float %2389 to bfloat, !dbg !130
  %2391 = extractelement <4 x float> %2275, i64 0, !dbg !130
  %2392 = fptrunc float %2391 to bfloat, !dbg !130
  %2393 = fptrunc float %2293 to bfloat, !dbg !130
  %2394 = fptrunc float %2294 to bfloat, !dbg !130
  %2395 = fptrunc float %2295 to bfloat, !dbg !130
  %2396 = fptrunc float %2296 to bfloat, !dbg !130
  %2397 = fptrunc float %2297 to bfloat, !dbg !130
  %2398 = fptrunc float %2298 to bfloat, !dbg !130
  %2399 = fptrunc <2 x float> %2276 to <2 x bfloat>, !dbg !130
  %2400 = fptrunc float %2299 to bfloat, !dbg !130
  %2401 = fptrunc float %2300 to bfloat, !dbg !130
  %2402 = fptrunc float %2301 to bfloat, !dbg !130
  %2403 = fptrunc float %2302 to bfloat, !dbg !130
  %2404 = fptrunc float %2303 to bfloat, !dbg !130
  %2405 = fptrunc float %2304 to bfloat, !dbg !130
  %2406 = insertelement <2 x bfloat> poison, bfloat %2364, i64 0, !dbg !130
  %2407 = insertelement <2 x bfloat> %2406, bfloat %2366, i64 1, !dbg !130
  %2408 = bitcast <2 x bfloat> %2407 to i32, !dbg !130
  %2409 = insertelement <2 x bfloat> poison, bfloat %2368, i64 0, !dbg !130
  %2410 = insertelement <2 x bfloat> %2409, bfloat %2370, i64 1, !dbg !130
  %2411 = bitcast <2 x bfloat> %2410 to i32, !dbg !130
  %2412 = insertelement <2 x bfloat> poison, bfloat %2372, i64 0, !dbg !130
  %2413 = insertelement <2 x bfloat> %2412, bfloat %2374, i64 1, !dbg !130
  %2414 = bitcast <2 x bfloat> %2413 to i32, !dbg !130
  %2415 = insertelement <2 x bfloat> poison, bfloat %2376, i64 0, !dbg !130
  %2416 = insertelement <2 x bfloat> %2415, bfloat %2378, i64 1, !dbg !130
  %2417 = bitcast <2 x bfloat> %2416 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2408, i32 %2411, i32 %2414, i32 %2417, ptr addrspace(1) %2356, i1 %2110) #5, !dbg !130
  %2418 = insertelement <2 x bfloat> poison, bfloat %2380, i64 0, !dbg !130
  %2419 = insertelement <2 x bfloat> %2418, bfloat %2382, i64 1, !dbg !130
  %2420 = bitcast <2 x bfloat> %2419 to i32, !dbg !130
  %2421 = insertelement <2 x bfloat> poison, bfloat %2383, i64 0, !dbg !130
  %2422 = insertelement <2 x bfloat> %2421, bfloat %2384, i64 1, !dbg !130
  %2423 = bitcast <2 x bfloat> %2422 to i32, !dbg !130
  %2424 = insertelement <2 x bfloat> poison, bfloat %2385, i64 0, !dbg !130
  %2425 = insertelement <2 x bfloat> %2424, bfloat %2386, i64 1, !dbg !130
  %2426 = bitcast <2 x bfloat> %2425 to i32, !dbg !130
  %2427 = insertelement <2 x bfloat> poison, bfloat %2387, i64 0, !dbg !130
  %2428 = insertelement <2 x bfloat> %2427, bfloat %2388, i64 1, !dbg !130
  %2429 = bitcast <2 x bfloat> %2428 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2420, i32 %2423, i32 %2426, i32 %2429, ptr addrspace(1) %2358, i1 %2110) #5, !dbg !130
  %2430 = insertelement <2 x bfloat> poison, bfloat %2390, i64 0, !dbg !130
  %2431 = insertelement <2 x bfloat> %2430, bfloat %2392, i64 1, !dbg !130
  %2432 = bitcast <2 x bfloat> %2431 to i32, !dbg !130
  %2433 = insertelement <2 x bfloat> poison, bfloat %2393, i64 0, !dbg !130
  %2434 = insertelement <2 x bfloat> %2433, bfloat %2394, i64 1, !dbg !130
  %2435 = bitcast <2 x bfloat> %2434 to i32, !dbg !130
  %2436 = insertelement <2 x bfloat> poison, bfloat %2395, i64 0, !dbg !130
  %2437 = insertelement <2 x bfloat> %2436, bfloat %2396, i64 1, !dbg !130
  %2438 = bitcast <2 x bfloat> %2437 to i32, !dbg !130
  %2439 = insertelement <2 x bfloat> poison, bfloat %2397, i64 0, !dbg !130
  %2440 = insertelement <2 x bfloat> %2439, bfloat %2398, i64 1, !dbg !130
  %2441 = bitcast <2 x bfloat> %2440 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2432, i32 %2435, i32 %2438, i32 %2441, ptr addrspace(1) %2360, i1 %2110) #5, !dbg !130
  %2442 = bitcast <2 x bfloat> %2399 to i32, !dbg !130
  %2443 = insertelement <2 x bfloat> poison, bfloat %2400, i64 0, !dbg !130
  %2444 = insertelement <2 x bfloat> %2443, bfloat %2401, i64 1, !dbg !130
  %2445 = bitcast <2 x bfloat> %2444 to i32, !dbg !130
  %2446 = insertelement <2 x bfloat> poison, bfloat %2402, i64 0, !dbg !130
  %2447 = insertelement <2 x bfloat> %2446, bfloat %2403, i64 1, !dbg !130
  %2448 = bitcast <2 x bfloat> %2447 to i32, !dbg !130
  %2449 = insertelement <2 x bfloat> poison, bfloat %2404, i64 0, !dbg !130
  %2450 = insertelement <2 x bfloat> %2449, bfloat %2405, i64 1, !dbg !130
  %2451 = bitcast <2 x bfloat> %2450 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2442, i32 %2445, i32 %2448, i32 %2451, ptr addrspace(1) %2362, i1 %2110) #5, !dbg !130
  br i1 %2076, label %2075, label %2452, !dbg !99

2452:                                             ; preds = %2075
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %2453 = extractelement <32 x float> %2355, i64 24, !dbg !142
  %2454 = extractelement <32 x float> %2355, i64 25, !dbg !142
  %2455 = fcmp olt float %2453, %2454, !dbg !142
  %2456 = fcmp uno float %2453, 0.000000e+00, !dbg !143
  %2457 = or i1 %2455, %2456, !dbg !144
  %2458 = select i1 %2457, float %2453, float %2454, !dbg !145
  %2459 = extractelement <32 x float> %2355, i64 26, !dbg !142
  %2460 = fcmp olt float %2458, %2459, !dbg !142
  %2461 = fcmp uno float %2458, 0.000000e+00, !dbg !143
  %2462 = or i1 %2460, %2461, !dbg !144
  %2463 = select i1 %2462, float %2458, float %2459, !dbg !145
  %2464 = extractelement <32 x float> %2355, i64 27, !dbg !142
  %2465 = fcmp olt float %2463, %2464, !dbg !142
  %2466 = fcmp uno float %2463, 0.000000e+00, !dbg !143
  %2467 = or i1 %2465, %2466, !dbg !144
  %2468 = select i1 %2467, float %2463, float %2464, !dbg !145
  %2469 = extractelement <32 x float> %2355, i64 28, !dbg !142
  %2470 = fcmp olt float %2468, %2469, !dbg !142
  %2471 = fcmp uno float %2468, 0.000000e+00, !dbg !143
  %2472 = or i1 %2470, %2471, !dbg !144
  %2473 = select i1 %2472, float %2468, float %2469, !dbg !145
  %2474 = extractelement <32 x float> %2355, i64 29, !dbg !142
  %2475 = fcmp olt float %2473, %2474, !dbg !142
  %2476 = fcmp uno float %2473, 0.000000e+00, !dbg !143
  %2477 = or i1 %2475, %2476, !dbg !144
  %2478 = select i1 %2477, float %2473, float %2474, !dbg !145
  %2479 = extractelement <32 x float> %2355, i64 30, !dbg !142
  %2480 = fcmp olt float %2478, %2479, !dbg !142
  %2481 = fcmp uno float %2478, 0.000000e+00, !dbg !143
  %2482 = or i1 %2480, %2481, !dbg !144
  %2483 = select i1 %2482, float %2478, float %2479, !dbg !145
  %2484 = extractelement <32 x float> %2355, i64 31, !dbg !142
  %2485 = fcmp olt float %2483, %2484, !dbg !142
  %2486 = fcmp uno float %2483, 0.000000e+00, !dbg !143
  %2487 = or i1 %2485, %2486, !dbg !144
  %2488 = select i1 %2487, float %2483, float %2484, !dbg !145
  %2489 = extractelement <4 x float> %2324, i64 2, !dbg !142
  %2490 = extractelement <4 x float> %2324, i64 3, !dbg !142
  %2491 = fcmp olt float %2490, %2489, !dbg !142
  %2492 = fcmp uno float %2490, 0.000000e+00, !dbg !143
  %2493 = or i1 %2491, %2492, !dbg !144
  %2494 = select i1 %2493, float %2490, float %2489, !dbg !145
  %2495 = fcmp olt float %2494, %2320, !dbg !142
  %2496 = fcmp uno float %2494, 0.000000e+00, !dbg !143
  %2497 = or i1 %2495, %2496, !dbg !144
  %2498 = select i1 %2497, float %2494, float %2320, !dbg !145
  %2499 = fcmp olt float %2498, %2321, !dbg !142
  %2500 = fcmp uno float %2498, 0.000000e+00, !dbg !143
  %2501 = or i1 %2499, %2500, !dbg !144
  %2502 = select i1 %2501, float %2498, float %2321, !dbg !145
  %2503 = extractelement <16 x float> %2327, i64 0, !dbg !142
  %2504 = fcmp olt float %2502, %2503, !dbg !142
  %2505 = fcmp uno float %2502, 0.000000e+00, !dbg !143
  %2506 = or i1 %2504, %2505, !dbg !144
  %2507 = select i1 %2506, float %2502, float %2503, !dbg !145
  %2508 = extractelement <16 x float> %2327, i64 1, !dbg !142
  %2509 = fcmp olt float %2507, %2508, !dbg !142
  %2510 = fcmp uno float %2507, 0.000000e+00, !dbg !143
  %2511 = or i1 %2509, %2510, !dbg !144
  %2512 = select i1 %2511, float %2507, float %2508, !dbg !145
  %2513 = extractelement <16 x float> %2327, i64 2, !dbg !142
  %2514 = fcmp olt float %2512, %2513, !dbg !142
  %2515 = fcmp uno float %2512, 0.000000e+00, !dbg !143
  %2516 = or i1 %2514, %2515, !dbg !144
  %2517 = select i1 %2516, float %2512, float %2513, !dbg !145
  %2518 = extractelement <16 x float> %2327, i64 3, !dbg !142
  %2519 = fcmp olt float %2517, %2518, !dbg !142
  %2520 = fcmp uno float %2517, 0.000000e+00, !dbg !143
  %2521 = or i1 %2519, %2520, !dbg !144
  %2522 = select i1 %2521, float %2517, float %2518, !dbg !145
  %2523 = extractelement <4 x float> %2324, i64 0, !dbg !142
  %2524 = extractelement <4 x float> %2324, i64 1, !dbg !142
  %2525 = fcmp olt float %2524, %2523, !dbg !142
  %2526 = fcmp uno float %2524, 0.000000e+00, !dbg !143
  %2527 = or i1 %2525, %2526, !dbg !144
  %2528 = select i1 %2527, float %2524, float %2523, !dbg !145
  %2529 = extractelement <16 x float> %2327, i64 4, !dbg !142
  %2530 = fcmp olt float %2528, %2529, !dbg !142
  %2531 = fcmp uno float %2528, 0.000000e+00, !dbg !143
  %2532 = or i1 %2530, %2531, !dbg !144
  %2533 = select i1 %2532, float %2528, float %2529, !dbg !145
  %2534 = extractelement <16 x float> %2327, i64 5, !dbg !142
  %2535 = fcmp olt float %2533, %2534, !dbg !142
  %2536 = fcmp uno float %2533, 0.000000e+00, !dbg !143
  %2537 = or i1 %2535, %2536, !dbg !144
  %2538 = select i1 %2537, float %2533, float %2534, !dbg !145
  %2539 = extractelement <16 x float> %2327, i64 6, !dbg !142
  %2540 = fcmp olt float %2538, %2539, !dbg !142
  %2541 = fcmp uno float %2538, 0.000000e+00, !dbg !143
  %2542 = or i1 %2540, %2541, !dbg !144
  %2543 = select i1 %2542, float %2538, float %2539, !dbg !145
  %2544 = extractelement <16 x float> %2327, i64 7, !dbg !142
  %2545 = fcmp olt float %2543, %2544, !dbg !142
  %2546 = fcmp uno float %2543, 0.000000e+00, !dbg !143
  %2547 = or i1 %2545, %2546, !dbg !144
  %2548 = select i1 %2547, float %2543, float %2544, !dbg !145
  %2549 = extractelement <16 x float> %2327, i64 8, !dbg !142
  %2550 = fcmp olt float %2548, %2549, !dbg !142
  %2551 = fcmp uno float %2548, 0.000000e+00, !dbg !143
  %2552 = or i1 %2550, %2551, !dbg !144
  %2553 = select i1 %2552, float %2548, float %2549, !dbg !145
  %2554 = extractelement <16 x float> %2327, i64 9, !dbg !142
  %2555 = fcmp olt float %2553, %2554, !dbg !142
  %2556 = fcmp uno float %2553, 0.000000e+00, !dbg !143
  %2557 = or i1 %2555, %2556, !dbg !144
  %2558 = select i1 %2557, float %2553, float %2554, !dbg !145
  %2559 = fcmp ogt <4 x float> %2348, %2349, !dbg !146
  %2560 = extractelement <4 x float> %2349, i64 3, !dbg !143
  %2561 = fcmp uno float %2560, 0.000000e+00, !dbg !143
  %2562 = extractelement <4 x i1> %2559, i64 3, !dbg !144
  %2563 = or i1 %2562, %2561, !dbg !144
  %2564 = extractelement <4 x float> %2348, i64 3, !dbg !145
  %2565 = select i1 %2563, float %2560, float %2564, !dbg !145
  %2566 = extractelement <16 x float> %2327, i64 10, !dbg !142
  %2567 = fcmp olt float %2565, %2566, !dbg !142
  %2568 = fcmp uno float %2565, 0.000000e+00, !dbg !143
  %2569 = or i1 %2567, %2568, !dbg !144
  %2570 = select i1 %2569, float %2565, float %2566, !dbg !145
  %2571 = extractelement <16 x float> %2327, i64 11, !dbg !142
  %2572 = fcmp olt float %2570, %2571, !dbg !142
  %2573 = fcmp uno float %2570, 0.000000e+00, !dbg !143
  %2574 = or i1 %2572, %2573, !dbg !144
  %2575 = select i1 %2574, float %2570, float %2571, !dbg !145
  %2576 = extractelement <16 x float> %2327, i64 12, !dbg !142
  %2577 = fcmp olt float %2575, %2576, !dbg !142
  %2578 = fcmp uno float %2575, 0.000000e+00, !dbg !143
  %2579 = or i1 %2577, %2578, !dbg !144
  %2580 = select i1 %2579, float %2575, float %2576, !dbg !145
  %2581 = extractelement <16 x float> %2327, i64 13, !dbg !142
  %2582 = fcmp olt float %2580, %2581, !dbg !142
  %2583 = fcmp uno float %2580, 0.000000e+00, !dbg !143
  %2584 = or i1 %2582, %2583, !dbg !144
  %2585 = select i1 %2584, float %2580, float %2581, !dbg !145
  %2586 = extractelement <16 x float> %2327, i64 14, !dbg !142
  %2587 = fcmp olt float %2585, %2586, !dbg !142
  %2588 = fcmp uno float %2585, 0.000000e+00, !dbg !143
  %2589 = or i1 %2587, %2588, !dbg !144
  %2590 = select i1 %2589, float %2585, float %2586, !dbg !145
  %2591 = extractelement <16 x float> %2327, i64 15, !dbg !142
  %2592 = fcmp olt float %2590, %2591, !dbg !142
  %2593 = fcmp uno float %2590, 0.000000e+00, !dbg !143
  %2594 = or i1 %2592, %2593, !dbg !144
  %2595 = select i1 %2594, float %2590, float %2591, !dbg !145
  %2596 = bitcast float %2488 to i32, !dbg !140
  %2597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2596, i32 16, i32 31), !dbg !140
  %2598 = bitcast i32 %2597 to float, !dbg !140
  %2599 = fcmp olt float %2488, %2598, !dbg !142
  %2600 = fcmp uno float %2488, 0.000000e+00, !dbg !143
  %2601 = or i1 %2600, %2599, !dbg !144
  %2602 = select i1 %2601, float %2488, float %2598, !dbg !145
  %2603 = bitcast float %2602 to i32, !dbg !140
  %2604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2603, i32 8, i32 31), !dbg !140
  %2605 = bitcast i32 %2604 to float, !dbg !140
  %2606 = fcmp olt float %2602, %2605, !dbg !142
  %2607 = fcmp uno float %2602, 0.000000e+00, !dbg !143
  %2608 = or i1 %2606, %2607, !dbg !144
  %2609 = select i1 %2608, float %2602, float %2605, !dbg !145
  %2610 = bitcast float %2609 to i32, !dbg !140
  %2611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2610, i32 4, i32 31), !dbg !140
  %2612 = bitcast i32 %2611 to float, !dbg !140
  %2613 = fcmp olt float %2609, %2612, !dbg !142
  %2614 = fcmp uno float %2609, 0.000000e+00, !dbg !143
  %2615 = or i1 %2613, %2614, !dbg !144
  %2616 = select i1 %2615, float %2609, float %2612, !dbg !145
  %2617 = bitcast float %2616 to i32, !dbg !140
  %2618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2617, i32 2, i32 31), !dbg !140
  %2619 = bitcast i32 %2618 to float, !dbg !140
  %2620 = fcmp olt float %2616, %2619, !dbg !142
  %2621 = fcmp uno float %2616, 0.000000e+00, !dbg !143
  %2622 = or i1 %2620, %2621, !dbg !144
  %2623 = select i1 %2622, float %2616, float %2619, !dbg !145
  %2624 = bitcast float %2623 to i32, !dbg !140
  %2625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2624, i32 1, i32 31), !dbg !140
  %2626 = bitcast i32 %2625 to float, !dbg !140
  %2627 = fcmp olt float %2623, %2626, !dbg !142
  %2628 = fcmp uno float %2623, 0.000000e+00, !dbg !143
  %2629 = or i1 %2627, %2628, !dbg !144
  %2630 = bitcast float %2522 to i32, !dbg !140
  %2631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2630, i32 16, i32 31), !dbg !140
  %2632 = bitcast i32 %2631 to float, !dbg !140
  %2633 = fcmp olt float %2522, %2632, !dbg !142
  %2634 = fcmp uno float %2522, 0.000000e+00, !dbg !143
  %2635 = or i1 %2634, %2633, !dbg !144
  %2636 = select i1 %2635, float %2522, float %2632, !dbg !145
  %2637 = bitcast float %2636 to i32, !dbg !140
  %2638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2637, i32 8, i32 31), !dbg !140
  %2639 = bitcast i32 %2638 to float, !dbg !140
  %2640 = fcmp olt float %2636, %2639, !dbg !142
  %2641 = fcmp uno float %2636, 0.000000e+00, !dbg !143
  %2642 = or i1 %2640, %2641, !dbg !144
  %2643 = select i1 %2642, float %2636, float %2639, !dbg !145
  %2644 = bitcast float %2643 to i32, !dbg !140
  %2645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2644, i32 4, i32 31), !dbg !140
  %2646 = bitcast i32 %2645 to float, !dbg !140
  %2647 = fcmp olt float %2643, %2646, !dbg !142
  %2648 = fcmp uno float %2643, 0.000000e+00, !dbg !143
  %2649 = or i1 %2647, %2648, !dbg !144
  %2650 = select i1 %2649, float %2643, float %2646, !dbg !145
  %2651 = bitcast float %2650 to i32, !dbg !140
  %2652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2651, i32 2, i32 31), !dbg !140
  %2653 = bitcast i32 %2652 to float, !dbg !140
  %2654 = fcmp olt float %2650, %2653, !dbg !142
  %2655 = fcmp uno float %2650, 0.000000e+00, !dbg !143
  %2656 = or i1 %2654, %2655, !dbg !144
  %2657 = select i1 %2656, float %2650, float %2653, !dbg !145
  %2658 = bitcast float %2657 to i32, !dbg !140
  %2659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2658, i32 1, i32 31), !dbg !140
  %2660 = bitcast i32 %2659 to float, !dbg !140
  %2661 = fcmp olt float %2657, %2660, !dbg !142
  %2662 = fcmp uno float %2657, 0.000000e+00, !dbg !143
  %2663 = or i1 %2661, %2662, !dbg !144
  %2664 = bitcast float %2558 to i32, !dbg !140
  %2665 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2664, i32 16, i32 31), !dbg !140
  %2666 = bitcast i32 %2665 to float, !dbg !140
  %2667 = fcmp olt float %2558, %2666, !dbg !142
  %2668 = fcmp uno float %2558, 0.000000e+00, !dbg !143
  %2669 = or i1 %2668, %2667, !dbg !144
  %2670 = select i1 %2669, float %2558, float %2666, !dbg !145
  %2671 = bitcast float %2670 to i32, !dbg !140
  %2672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2671, i32 8, i32 31), !dbg !140
  %2673 = bitcast i32 %2672 to float, !dbg !140
  %2674 = fcmp olt float %2670, %2673, !dbg !142
  %2675 = fcmp uno float %2670, 0.000000e+00, !dbg !143
  %2676 = or i1 %2674, %2675, !dbg !144
  %2677 = select i1 %2676, float %2670, float %2673, !dbg !145
  %2678 = bitcast float %2677 to i32, !dbg !140
  %2679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2678, i32 4, i32 31), !dbg !140
  %2680 = bitcast i32 %2679 to float, !dbg !140
  %2681 = fcmp olt float %2677, %2680, !dbg !142
  %2682 = fcmp uno float %2677, 0.000000e+00, !dbg !143
  %2683 = or i1 %2681, %2682, !dbg !144
  %2684 = select i1 %2683, float %2677, float %2680, !dbg !145
  %2685 = bitcast float %2684 to i32, !dbg !140
  %2686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2685, i32 2, i32 31), !dbg !140
  %2687 = bitcast i32 %2686 to float, !dbg !140
  %2688 = fcmp olt float %2684, %2687, !dbg !142
  %2689 = fcmp uno float %2684, 0.000000e+00, !dbg !143
  %2690 = or i1 %2688, %2689, !dbg !144
  %2691 = select i1 %2690, float %2684, float %2687, !dbg !145
  %2692 = bitcast float %2691 to i32, !dbg !140
  %2693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2692, i32 1, i32 31), !dbg !140
  %2694 = bitcast i32 %2693 to float, !dbg !140
  %2695 = fcmp olt float %2691, %2694, !dbg !142
  %2696 = fcmp uno float %2691, 0.000000e+00, !dbg !143
  %2697 = or i1 %2695, %2696, !dbg !144
  %2698 = bitcast float %2595 to i32, !dbg !140
  %2699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2698, i32 16, i32 31), !dbg !140
  %2700 = bitcast i32 %2699 to float, !dbg !140
  %2701 = fcmp olt float %2595, %2700, !dbg !142
  %2702 = fcmp uno float %2595, 0.000000e+00, !dbg !143
  %2703 = or i1 %2702, %2701, !dbg !144
  %2704 = select i1 %2703, float %2595, float %2700, !dbg !145
  %2705 = bitcast float %2704 to i32, !dbg !140
  %2706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2705, i32 8, i32 31), !dbg !140
  %2707 = bitcast i32 %2706 to float, !dbg !140
  %2708 = fcmp olt float %2704, %2707, !dbg !142
  %2709 = fcmp uno float %2704, 0.000000e+00, !dbg !143
  %2710 = or i1 %2708, %2709, !dbg !144
  %2711 = select i1 %2710, float %2704, float %2707, !dbg !145
  %2712 = bitcast float %2711 to i32, !dbg !140
  %2713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2712, i32 4, i32 31), !dbg !140
  %2714 = bitcast i32 %2713 to float, !dbg !140
  %2715 = fcmp olt float %2711, %2714, !dbg !142
  %2716 = fcmp uno float %2711, 0.000000e+00, !dbg !143
  %2717 = or i1 %2715, %2716, !dbg !144
  %2718 = select i1 %2717, float %2711, float %2714, !dbg !145
  %2719 = bitcast float %2718 to i32, !dbg !140
  %2720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2719, i32 2, i32 31), !dbg !140
  %2721 = bitcast i32 %2720 to float, !dbg !140
  %2722 = fcmp olt float %2718, %2721, !dbg !142
  %2723 = fcmp uno float %2718, 0.000000e+00, !dbg !143
  %2724 = or i1 %2722, %2723, !dbg !144
  %2725 = select i1 %2724, float %2718, float %2721, !dbg !145
  %2726 = bitcast float %2725 to i32, !dbg !140
  %2727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2726, i32 1, i32 31), !dbg !140
  %2728 = bitcast i32 %2727 to float, !dbg !140
  %2729 = fcmp olt float %2725, %2728, !dbg !142
  %2730 = fcmp uno float %2725, 0.000000e+00, !dbg !143
  %2731 = or i1 %2729, %2730, !dbg !144
  %2732 = select i1 %2629, i32 %2624, i32 %2625, !dbg !145
  %2733 = insertelement <1 x i32> poison, i32 %2732, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1883, <1 x i32> %2733, i1 %1882) #5, !dbg !140
  %2734 = select i1 %2663, i32 %2658, i32 %2659, !dbg !145
  %2735 = insertelement <1 x i32> poison, i32 %2734, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1890, <1 x i32> %2735, i1 %1882) #5, !dbg !140
  %2736 = select i1 %2697, i32 %2692, i32 %2693, !dbg !145
  %2737 = insertelement <1 x i32> poison, i32 %2736, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1897, <1 x i32> %2737, i1 %1882) #5, !dbg !140
  %2738 = select i1 %2731, i32 %2726, i32 %2727, !dbg !145
  %2739 = insertelement <1 x i32> poison, i32 %2738, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1904, <1 x i32> %2739, i1 %1882) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %2740 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1911, i1 %1910) #5, !dbg !140
  %2741 = bitcast i32 %2740 to float, !dbg !140
  %2742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2740, i32 4, i32 31), !dbg !140
  %2743 = bitcast i32 %2742 to float, !dbg !140
  %2744 = fcmp olt float %2741, %2743, !dbg !142
  %2745 = fcmp uno float %2741, 0.000000e+00, !dbg !143
  %2746 = or i1 %2745, %2744, !dbg !144
  %2747 = select i1 %2746, float %2741, float %2743, !dbg !145
  %2748 = bitcast float %2747 to i32, !dbg !140
  %2749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2748, i32 2, i32 31), !dbg !140
  %2750 = bitcast i32 %2749 to float, !dbg !140
  %2751 = fcmp olt float %2747, %2750, !dbg !142
  %2752 = fcmp uno float %2747, 0.000000e+00, !dbg !143
  %2753 = or i1 %2751, %2752, !dbg !144
  %2754 = select i1 %2753, float %2747, float %2750, !dbg !145
  %2755 = bitcast float %2754 to i32, !dbg !140
  %2756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2755, i32 1, i32 31), !dbg !140
  %2757 = bitcast i32 %2756 to float, !dbg !140
  %2758 = fcmp olt float %2754, %2757, !dbg !142
  %2759 = fcmp uno float %2754, 0.000000e+00, !dbg !143
  %2760 = or i1 %2758, %2759, !dbg !144
  %2761 = select i1 %2760, i32 %2755, i32 %2756, !dbg !145
  %2762 = insertelement <1 x i32> poison, i32 %2761, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1911, <1 x i32> %2762, i1 %1982) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %2763 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %2764 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !140
  %2765 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !140
  %2766 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !148
  %2767 = bitcast float %2763 to i32, !dbg !148
  %2768 = bitcast float %2764 to i32, !dbg !148
  %2769 = bitcast float %2765 to i32, !dbg !148
  %2770 = bitcast float %2766 to i32, !dbg !148
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2767, i32 %2768, i32 %2769, i32 %2770, i1 true) #5, !dbg !148
  tail call void @llvm.nvvm.barrier0(), !dbg !148
  %2771 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1090, !dbg !148
  %2772 = load float, ptr addrspace(3) %2771, align 4, !dbg !148
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %2773 = extractelement <4 x float> %2348, i64 2, !dbg !150
  %2774 = fcmp uno float %2773, 0.000000e+00, !dbg !150
  %2775 = extractelement <4 x i1> %2559, i64 2, !dbg !151
  %2776 = or i1 %2775, %2774, !dbg !151
  %2777 = extractelement <4 x float> %2349, i64 2, !dbg !152
  %2778 = select i1 %2776, float %2773, float %2777, !dbg !152
  %2779 = extractelement <32 x float> %2355, i64 0, !dbg !146
  %2780 = fcmp ogt float %2778, %2779, !dbg !146
  %2781 = fcmp uno float %2778, 0.000000e+00, !dbg !150
  %2782 = or i1 %2780, %2781, !dbg !151
  %2783 = select i1 %2782, float %2778, float %2779, !dbg !152
  %2784 = extractelement <32 x float> %2355, i64 1, !dbg !146
  %2785 = fcmp ogt float %2783, %2784, !dbg !146
  %2786 = fcmp uno float %2783, 0.000000e+00, !dbg !150
  %2787 = or i1 %2785, %2786, !dbg !151
  %2788 = select i1 %2787, float %2783, float %2784, !dbg !152
  %2789 = extractelement <32 x float> %2355, i64 2, !dbg !146
  %2790 = fcmp ogt float %2788, %2789, !dbg !146
  %2791 = fcmp uno float %2788, 0.000000e+00, !dbg !150
  %2792 = or i1 %2790, %2791, !dbg !151
  %2793 = select i1 %2792, float %2788, float %2789, !dbg !152
  %2794 = extractelement <32 x float> %2355, i64 3, !dbg !146
  %2795 = fcmp ogt float %2793, %2794, !dbg !146
  %2796 = fcmp uno float %2793, 0.000000e+00, !dbg !150
  %2797 = or i1 %2795, %2796, !dbg !151
  %2798 = select i1 %2797, float %2793, float %2794, !dbg !152
  %2799 = extractelement <32 x float> %2355, i64 4, !dbg !146
  %2800 = fcmp ogt float %2798, %2799, !dbg !146
  %2801 = fcmp uno float %2798, 0.000000e+00, !dbg !150
  %2802 = or i1 %2800, %2801, !dbg !151
  %2803 = select i1 %2802, float %2798, float %2799, !dbg !152
  %2804 = extractelement <32 x float> %2355, i64 5, !dbg !146
  %2805 = fcmp ogt float %2803, %2804, !dbg !146
  %2806 = fcmp uno float %2803, 0.000000e+00, !dbg !150
  %2807 = or i1 %2805, %2806, !dbg !151
  %2808 = select i1 %2807, float %2803, float %2804, !dbg !152
  %2809 = extractelement <4 x float> %2348, i64 1, !dbg !150
  %2810 = fcmp uno float %2809, 0.000000e+00, !dbg !150
  %2811 = extractelement <4 x i1> %2559, i64 1, !dbg !151
  %2812 = or i1 %2811, %2810, !dbg !151
  %2813 = extractelement <4 x float> %2349, i64 1, !dbg !152
  %2814 = select i1 %2812, float %2809, float %2813, !dbg !152
  %2815 = extractelement <32 x float> %2355, i64 6, !dbg !146
  %2816 = fcmp ogt float %2814, %2815, !dbg !146
  %2817 = fcmp uno float %2814, 0.000000e+00, !dbg !150
  %2818 = or i1 %2816, %2817, !dbg !151
  %2819 = select i1 %2818, float %2814, float %2815, !dbg !152
  %2820 = extractelement <32 x float> %2355, i64 7, !dbg !146
  %2821 = fcmp ogt float %2819, %2820, !dbg !146
  %2822 = fcmp uno float %2819, 0.000000e+00, !dbg !150
  %2823 = or i1 %2821, %2822, !dbg !151
  %2824 = select i1 %2823, float %2819, float %2820, !dbg !152
  %2825 = extractelement <32 x float> %2355, i64 8, !dbg !146
  %2826 = fcmp ogt float %2824, %2825, !dbg !146
  %2827 = fcmp uno float %2824, 0.000000e+00, !dbg !150
  %2828 = or i1 %2826, %2827, !dbg !151
  %2829 = select i1 %2828, float %2824, float %2825, !dbg !152
  %2830 = extractelement <32 x float> %2355, i64 9, !dbg !146
  %2831 = fcmp ogt float %2829, %2830, !dbg !146
  %2832 = fcmp uno float %2829, 0.000000e+00, !dbg !150
  %2833 = or i1 %2831, %2832, !dbg !151
  %2834 = select i1 %2833, float %2829, float %2830, !dbg !152
  %2835 = extractelement <32 x float> %2355, i64 10, !dbg !146
  %2836 = fcmp ogt float %2834, %2835, !dbg !146
  %2837 = fcmp uno float %2834, 0.000000e+00, !dbg !150
  %2838 = or i1 %2836, %2837, !dbg !151
  %2839 = select i1 %2838, float %2834, float %2835, !dbg !152
  %2840 = extractelement <32 x float> %2355, i64 11, !dbg !146
  %2841 = fcmp ogt float %2839, %2840, !dbg !146
  %2842 = fcmp uno float %2839, 0.000000e+00, !dbg !150
  %2843 = or i1 %2841, %2842, !dbg !151
  %2844 = select i1 %2843, float %2839, float %2840, !dbg !152
  %2845 = extractelement <4 x float> %2348, i64 0, !dbg !150
  %2846 = fcmp uno float %2845, 0.000000e+00, !dbg !150
  %2847 = extractelement <4 x i1> %2559, i64 0, !dbg !151
  %2848 = or i1 %2847, %2846, !dbg !151
  %2849 = extractelement <4 x float> %2349, i64 0, !dbg !152
  %2850 = select i1 %2848, float %2845, float %2849, !dbg !152
  %2851 = extractelement <32 x float> %2355, i64 12, !dbg !146
  %2852 = fcmp ogt float %2850, %2851, !dbg !146
  %2853 = fcmp uno float %2850, 0.000000e+00, !dbg !150
  %2854 = or i1 %2852, %2853, !dbg !151
  %2855 = select i1 %2854, float %2850, float %2851, !dbg !152
  %2856 = extractelement <32 x float> %2355, i64 13, !dbg !146
  %2857 = fcmp ogt float %2855, %2856, !dbg !146
  %2858 = fcmp uno float %2855, 0.000000e+00, !dbg !150
  %2859 = or i1 %2857, %2858, !dbg !151
  %2860 = select i1 %2859, float %2855, float %2856, !dbg !152
  %2861 = extractelement <32 x float> %2355, i64 14, !dbg !146
  %2862 = fcmp ogt float %2860, %2861, !dbg !146
  %2863 = fcmp uno float %2860, 0.000000e+00, !dbg !150
  %2864 = or i1 %2862, %2863, !dbg !151
  %2865 = select i1 %2864, float %2860, float %2861, !dbg !152
  %2866 = extractelement <32 x float> %2355, i64 15, !dbg !146
  %2867 = fcmp ogt float %2865, %2866, !dbg !146
  %2868 = fcmp uno float %2865, 0.000000e+00, !dbg !150
  %2869 = or i1 %2867, %2868, !dbg !151
  %2870 = select i1 %2869, float %2865, float %2866, !dbg !152
  %2871 = extractelement <32 x float> %2355, i64 16, !dbg !146
  %2872 = fcmp ogt float %2870, %2871, !dbg !146
  %2873 = fcmp uno float %2870, 0.000000e+00, !dbg !150
  %2874 = or i1 %2872, %2873, !dbg !151
  %2875 = select i1 %2874, float %2870, float %2871, !dbg !152
  %2876 = extractelement <32 x float> %2355, i64 17, !dbg !146
  %2877 = fcmp ogt float %2875, %2876, !dbg !146
  %2878 = fcmp uno float %2875, 0.000000e+00, !dbg !150
  %2879 = or i1 %2877, %2878, !dbg !151
  %2880 = select i1 %2879, float %2875, float %2876, !dbg !152
  %2881 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %2352, <2 x i32> <i32 0, i32 2>, !dbg !146
  %2882 = fcmp ogt <2 x float> %2881, %2352, !dbg !146
  %2883 = fcmp uno <2 x float> %2881, %2352, !dbg !146
  %shift = shufflevector <2 x i1> %2882, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !151
  %2884 = or <2 x i1> %shift, %2883, !dbg !151
  %2885 = extractelement <2 x i1> %2884, i64 0, !dbg !151
  %2886 = extractelement <2 x float> %2352, i64 0, !dbg !152
  %2887 = extractelement <2 x float> %2352, i64 1, !dbg !152
  %2888 = select i1 %2885, float %2886, float %2887, !dbg !152
  %2889 = extractelement <32 x float> %2355, i64 18, !dbg !146
  %2890 = fcmp ogt float %2888, %2889, !dbg !146
  %2891 = fcmp uno float %2888, 0.000000e+00, !dbg !150
  %2892 = or i1 %2890, %2891, !dbg !151
  %2893 = select i1 %2892, float %2888, float %2889, !dbg !152
  %2894 = extractelement <32 x float> %2355, i64 19, !dbg !146
  %2895 = fcmp ogt float %2893, %2894, !dbg !146
  %2896 = fcmp uno float %2893, 0.000000e+00, !dbg !150
  %2897 = or i1 %2895, %2896, !dbg !151
  %2898 = select i1 %2897, float %2893, float %2894, !dbg !152
  %2899 = extractelement <32 x float> %2355, i64 20, !dbg !146
  %2900 = fcmp ogt float %2898, %2899, !dbg !146
  %2901 = fcmp uno float %2898, 0.000000e+00, !dbg !150
  %2902 = or i1 %2900, %2901, !dbg !151
  %2903 = select i1 %2902, float %2898, float %2899, !dbg !152
  %2904 = extractelement <32 x float> %2355, i64 21, !dbg !146
  %2905 = fcmp ogt float %2903, %2904, !dbg !146
  %2906 = fcmp uno float %2903, 0.000000e+00, !dbg !150
  %2907 = or i1 %2905, %2906, !dbg !151
  %2908 = select i1 %2907, float %2903, float %2904, !dbg !152
  %2909 = extractelement <32 x float> %2355, i64 22, !dbg !146
  %2910 = fcmp ogt float %2908, %2909, !dbg !146
  %2911 = fcmp uno float %2908, 0.000000e+00, !dbg !150
  %2912 = or i1 %2910, %2911, !dbg !151
  %2913 = select i1 %2912, float %2908, float %2909, !dbg !152
  %2914 = extractelement <32 x float> %2355, i64 23, !dbg !146
  %2915 = fcmp ogt float %2913, %2914, !dbg !146
  %2916 = fcmp uno float %2913, 0.000000e+00, !dbg !150
  %2917 = or i1 %2915, %2916, !dbg !151
  %2918 = select i1 %2917, float %2913, float %2914, !dbg !152
  %2919 = bitcast float %2808 to i32, !dbg !149
  %2920 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2919, i32 16, i32 31), !dbg !149
  %2921 = bitcast i32 %2920 to float, !dbg !149
  %2922 = fcmp ogt float %2808, %2921, !dbg !146
  %2923 = fcmp uno float %2808, 0.000000e+00, !dbg !150
  %2924 = or i1 %2923, %2922, !dbg !151
  %2925 = select i1 %2924, float %2808, float %2921, !dbg !152
  %2926 = bitcast float %2925 to i32, !dbg !149
  %2927 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2926, i32 8, i32 31), !dbg !149
  %2928 = bitcast i32 %2927 to float, !dbg !149
  %2929 = fcmp ogt float %2925, %2928, !dbg !146
  %2930 = fcmp uno float %2925, 0.000000e+00, !dbg !150
  %2931 = or i1 %2929, %2930, !dbg !151
  %2932 = select i1 %2931, float %2925, float %2928, !dbg !152
  %2933 = bitcast float %2932 to i32, !dbg !149
  %2934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2933, i32 4, i32 31), !dbg !149
  %2935 = bitcast i32 %2934 to float, !dbg !149
  %2936 = fcmp ogt float %2932, %2935, !dbg !146
  %2937 = fcmp uno float %2932, 0.000000e+00, !dbg !150
  %2938 = or i1 %2936, %2937, !dbg !151
  %2939 = select i1 %2938, float %2932, float %2935, !dbg !152
  %2940 = bitcast float %2939 to i32, !dbg !149
  %2941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2940, i32 2, i32 31), !dbg !149
  %2942 = bitcast i32 %2941 to float, !dbg !149
  %2943 = fcmp ogt float %2939, %2942, !dbg !146
  %2944 = fcmp uno float %2939, 0.000000e+00, !dbg !150
  %2945 = or i1 %2943, %2944, !dbg !151
  %2946 = select i1 %2945, float %2939, float %2942, !dbg !152
  %2947 = bitcast float %2946 to i32, !dbg !149
  %2948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2947, i32 1, i32 31), !dbg !149
  %2949 = bitcast i32 %2948 to float, !dbg !149
  %2950 = fcmp ogt float %2946, %2949, !dbg !146
  %2951 = fcmp uno float %2946, 0.000000e+00, !dbg !150
  %2952 = or i1 %2950, %2951, !dbg !151
  %2953 = bitcast float %2844 to i32, !dbg !149
  %2954 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2953, i32 16, i32 31), !dbg !149
  %2955 = bitcast i32 %2954 to float, !dbg !149
  %2956 = fcmp ogt float %2844, %2955, !dbg !146
  %2957 = fcmp uno float %2844, 0.000000e+00, !dbg !150
  %2958 = or i1 %2957, %2956, !dbg !151
  %2959 = select i1 %2958, float %2844, float %2955, !dbg !152
  %2960 = bitcast float %2959 to i32, !dbg !149
  %2961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2960, i32 8, i32 31), !dbg !149
  %2962 = bitcast i32 %2961 to float, !dbg !149
  %2963 = fcmp ogt float %2959, %2962, !dbg !146
  %2964 = fcmp uno float %2959, 0.000000e+00, !dbg !150
  %2965 = or i1 %2963, %2964, !dbg !151
  %2966 = select i1 %2965, float %2959, float %2962, !dbg !152
  %2967 = bitcast float %2966 to i32, !dbg !149
  %2968 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2967, i32 4, i32 31), !dbg !149
  %2969 = bitcast i32 %2968 to float, !dbg !149
  %2970 = fcmp ogt float %2966, %2969, !dbg !146
  %2971 = fcmp uno float %2966, 0.000000e+00, !dbg !150
  %2972 = or i1 %2970, %2971, !dbg !151
  %2973 = select i1 %2972, float %2966, float %2969, !dbg !152
  %2974 = bitcast float %2973 to i32, !dbg !149
  %2975 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2974, i32 2, i32 31), !dbg !149
  %2976 = bitcast i32 %2975 to float, !dbg !149
  %2977 = fcmp ogt float %2973, %2976, !dbg !146
  %2978 = fcmp uno float %2973, 0.000000e+00, !dbg !150
  %2979 = or i1 %2977, %2978, !dbg !151
  %2980 = select i1 %2979, float %2973, float %2976, !dbg !152
  %2981 = bitcast float %2980 to i32, !dbg !149
  %2982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2981, i32 1, i32 31), !dbg !149
  %2983 = bitcast i32 %2982 to float, !dbg !149
  %2984 = fcmp ogt float %2980, %2983, !dbg !146
  %2985 = fcmp uno float %2980, 0.000000e+00, !dbg !150
  %2986 = or i1 %2984, %2985, !dbg !151
  %2987 = bitcast float %2880 to i32, !dbg !149
  %2988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2987, i32 16, i32 31), !dbg !149
  %2989 = bitcast i32 %2988 to float, !dbg !149
  %2990 = fcmp ogt float %2880, %2989, !dbg !146
  %2991 = fcmp uno float %2880, 0.000000e+00, !dbg !150
  %2992 = or i1 %2991, %2990, !dbg !151
  %2993 = select i1 %2992, float %2880, float %2989, !dbg !152
  %2994 = bitcast float %2993 to i32, !dbg !149
  %2995 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2994, i32 8, i32 31), !dbg !149
  %2996 = bitcast i32 %2995 to float, !dbg !149
  %2997 = fcmp ogt float %2993, %2996, !dbg !146
  %2998 = fcmp uno float %2993, 0.000000e+00, !dbg !150
  %2999 = or i1 %2997, %2998, !dbg !151
  %3000 = select i1 %2999, float %2993, float %2996, !dbg !152
  %3001 = bitcast float %3000 to i32, !dbg !149
  %3002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3001, i32 4, i32 31), !dbg !149
  %3003 = bitcast i32 %3002 to float, !dbg !149
  %3004 = fcmp ogt float %3000, %3003, !dbg !146
  %3005 = fcmp uno float %3000, 0.000000e+00, !dbg !150
  %3006 = or i1 %3004, %3005, !dbg !151
  %3007 = select i1 %3006, float %3000, float %3003, !dbg !152
  %3008 = bitcast float %3007 to i32, !dbg !149
  %3009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3008, i32 2, i32 31), !dbg !149
  %3010 = bitcast i32 %3009 to float, !dbg !149
  %3011 = fcmp ogt float %3007, %3010, !dbg !146
  %3012 = fcmp uno float %3007, 0.000000e+00, !dbg !150
  %3013 = or i1 %3011, %3012, !dbg !151
  %3014 = select i1 %3013, float %3007, float %3010, !dbg !152
  %3015 = bitcast float %3014 to i32, !dbg !149
  %3016 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3015, i32 1, i32 31), !dbg !149
  %3017 = bitcast i32 %3016 to float, !dbg !149
  %3018 = fcmp ogt float %3014, %3017, !dbg !146
  %3019 = fcmp uno float %3014, 0.000000e+00, !dbg !150
  %3020 = or i1 %3018, %3019, !dbg !151
  %3021 = bitcast float %2918 to i32, !dbg !149
  %3022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3021, i32 16, i32 31), !dbg !149
  %3023 = bitcast i32 %3022 to float, !dbg !149
  %3024 = fcmp ogt float %2918, %3023, !dbg !146
  %3025 = fcmp uno float %2918, 0.000000e+00, !dbg !150
  %3026 = or i1 %3025, %3024, !dbg !151
  %3027 = select i1 %3026, float %2918, float %3023, !dbg !152
  %3028 = bitcast float %3027 to i32, !dbg !149
  %3029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3028, i32 8, i32 31), !dbg !149
  %3030 = bitcast i32 %3029 to float, !dbg !149
  %3031 = fcmp ogt float %3027, %3030, !dbg !146
  %3032 = fcmp uno float %3027, 0.000000e+00, !dbg !150
  %3033 = or i1 %3031, %3032, !dbg !151
  %3034 = select i1 %3033, float %3027, float %3030, !dbg !152
  %3035 = bitcast float %3034 to i32, !dbg !149
  %3036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3035, i32 4, i32 31), !dbg !149
  %3037 = bitcast i32 %3036 to float, !dbg !149
  %3038 = fcmp ogt float %3034, %3037, !dbg !146
  %3039 = fcmp uno float %3034, 0.000000e+00, !dbg !150
  %3040 = or i1 %3038, %3039, !dbg !151
  %3041 = select i1 %3040, float %3034, float %3037, !dbg !152
  %3042 = bitcast float %3041 to i32, !dbg !149
  %3043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3042, i32 2, i32 31), !dbg !149
  %3044 = bitcast i32 %3043 to float, !dbg !149
  %3045 = fcmp ogt float %3041, %3044, !dbg !146
  %3046 = fcmp uno float %3041, 0.000000e+00, !dbg !150
  %3047 = or i1 %3045, %3046, !dbg !151
  %3048 = select i1 %3047, float %3041, float %3044, !dbg !152
  %3049 = bitcast float %3048 to i32, !dbg !149
  %3050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3049, i32 1, i32 31), !dbg !149
  %3051 = bitcast i32 %3050 to float, !dbg !149
  %3052 = fcmp ogt float %3048, %3051, !dbg !146
  %3053 = fcmp uno float %3048, 0.000000e+00, !dbg !150
  %3054 = or i1 %3052, %3053, !dbg !151
  %3055 = select i1 %2952, i32 %2947, i32 %2948, !dbg !152
  %3056 = insertelement <1 x i32> poison, i32 %3055, i64 0, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1883, <1 x i32> %3056, i1 %1882) #5, !dbg !149
  %3057 = select i1 %2986, i32 %2981, i32 %2982, !dbg !152
  %3058 = insertelement <1 x i32> poison, i32 %3057, i64 0, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1890, <1 x i32> %3058, i1 %1882) #5, !dbg !149
  %3059 = select i1 %3020, i32 %3015, i32 %3016, !dbg !152
  %3060 = insertelement <1 x i32> poison, i32 %3059, i64 0, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1897, <1 x i32> %3060, i1 %1882) #5, !dbg !149
  %3061 = select i1 %3054, i32 %3049, i32 %3050, !dbg !152
  %3062 = insertelement <1 x i32> poison, i32 %3061, i64 0, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1904, <1 x i32> %3062, i1 %1882) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %3063 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1911, i1 %1910) #5, !dbg !149
  %3064 = bitcast i32 %3063 to float, !dbg !149
  %3065 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3063, i32 4, i32 31), !dbg !149
  %3066 = bitcast i32 %3065 to float, !dbg !149
  %3067 = fcmp ogt float %3064, %3066, !dbg !146
  %3068 = fcmp uno float %3064, 0.000000e+00, !dbg !150
  %3069 = or i1 %3068, %3067, !dbg !151
  %3070 = select i1 %3069, float %3064, float %3066, !dbg !152
  %3071 = bitcast float %3070 to i32, !dbg !149
  %3072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3071, i32 2, i32 31), !dbg !149
  %3073 = bitcast i32 %3072 to float, !dbg !149
  %3074 = fcmp ogt float %3070, %3073, !dbg !146
  %3075 = fcmp uno float %3070, 0.000000e+00, !dbg !150
  %3076 = or i1 %3074, %3075, !dbg !151
  %3077 = select i1 %3076, float %3070, float %3073, !dbg !152
  %3078 = bitcast float %3077 to i32, !dbg !149
  %3079 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %3078, i32 1, i32 31), !dbg !149
  %3080 = bitcast i32 %3079 to float, !dbg !149
  %3081 = fcmp ogt float %3077, %3080, !dbg !146
  %3082 = fcmp uno float %3077, 0.000000e+00, !dbg !150
  %3083 = or i1 %3081, %3082, !dbg !151
  %3084 = select i1 %3083, i32 %3078, i32 %3079, !dbg !152
  %3085 = insertelement <1 x i32> poison, i32 %3084, i64 0, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1911, <1 x i32> %3085, i1 %1982) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %3086 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !149
  %3087 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !149
  %3088 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !149
  %3089 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %3090 = bitcast float %3086 to i32, !dbg !153
  %3091 = bitcast float %3087 to i32, !dbg !153
  %3092 = bitcast float %3088 to i32, !dbg !153
  %3093 = bitcast float %3089 to i32, !dbg !153
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %3090, i32 %3091, i32 %3092, i32 %3093, i1 true) #5, !dbg !153
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %3094 = load float, ptr addrspace(3) %2771, align 4, !dbg !153
  %3095 = sext i32 %1091 to i64, !dbg !154
  %3096 = getelementptr bfloat, ptr addrspace(1) %10, i64 %3095, !dbg !154
  %3097 = fptrunc float %2772 to bfloat, !dbg !148
  %3098 = and i32 %19, 252, !dbg !148
  %3099 = icmp eq i32 %3098, 0, !dbg !148
  %3100 = bitcast bfloat %3097 to i16, !dbg !148
  %3101 = and i1 %3099, %1092, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3100, ptr addrspace(1) %3096, i1 %3101) #5, !dbg !148
  %3102 = getelementptr bfloat, ptr addrspace(1) %11, i64 %3095, !dbg !155
  %3103 = fptrunc float %3094 to bfloat, !dbg !153
  %3104 = bitcast bfloat %3103 to i16, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %3104, ptr addrspace(1) %3102, i1 %3101) #5, !dbg !153
  %3105 = insertelement <4 x float> poison, float %2766, i64 0, !dbg !156
  %3106 = insertelement <4 x float> %3105, float %2765, i64 1, !dbg !156
  %3107 = insertelement <4 x float> %3106, float %2764, i64 2, !dbg !156
  %3108 = insertelement <4 x float> %3107, float %2763, i64 3, !dbg !156
  %3109 = fcmp oge <4 x float> %3108, zeroinitializer, !dbg !156
  %3110 = select <4 x i1> %3109, <4 x float> zeroinitializer, <4 x float> %3108, !dbg !156
  %3111 = fsub <4 x float> zeroinitializer, %3110, !dbg !158
  %3112 = insertelement <4 x float> poison, float %3089, i64 0, !dbg !159
  %3113 = insertelement <4 x float> %3112, float %3088, i64 1, !dbg !159
  %3114 = insertelement <4 x float> %3113, float %3087, i64 2, !dbg !159
  %3115 = insertelement <4 x float> %3114, float %3086, i64 3, !dbg !159
  %3116 = fcmp ole <4 x float> %3115, zeroinitializer, !dbg !159
  %3117 = select <4 x i1> %3116, <4 x float> zeroinitializer, <4 x float> %3115, !dbg !159
  %3118 = fcmp ogt <4 x float> %3111, %3117, !dbg !161
  %3119 = fcmp uno <4 x float> %3111, zeroinitializer, !dbg !163
  %3120 = or <4 x i1> %3119, %3118, !dbg !164
  %3121 = select <4 x i1> %3120, <4 x float> %3111, <4 x float> %3117, !dbg !165
  %3122 = fmul <4 x float> %3121, splat (float 0x3F80204080000000), !dbg !166
  %3123 = fcmp ogt <4 x float> %3122, splat (float 0x3EE4F8B580000000), !dbg !167
  %3124 = extractelement <4 x float> %3122, i64 3, !dbg !169
  %3125 = fcmp uno float %3124, 0.000000e+00, !dbg !170
  %3126 = extractelement <4 x float> %3122, i64 2, !dbg !169
  %3127 = fcmp uno float %3126, 0.000000e+00, !dbg !170
  %3128 = extractelement <4 x float> %3122, i64 1, !dbg !169
  %3129 = fcmp uno float %3128, 0.000000e+00, !dbg !170
  %3130 = extractelement <4 x float> %3122, i64 0, !dbg !169
  %3131 = fcmp uno float %3130, 0.000000e+00, !dbg !170
  %3132 = extractelement <4 x i1> %3123, i64 3, !dbg !171
  %3133 = or i1 %3132, %3125, !dbg !171
  %3134 = extractelement <4 x i1> %3123, i64 2, !dbg !171
  %3135 = or i1 %3134, %3127, !dbg !171
  %3136 = extractelement <4 x i1> %3123, i64 1, !dbg !171
  %3137 = or i1 %3136, %3129, !dbg !171
  %3138 = extractelement <4 x i1> %3123, i64 0, !dbg !171
  %3139 = or i1 %3138, %3131, !dbg !171
  %3140 = select i1 %3133, float %3124, float 0x3EE4F8B580000000, !dbg !169
  %3141 = select i1 %3135, float %3126, float 0x3EE4F8B580000000, !dbg !169
  %3142 = select i1 %3137, float %3128, float 0x3EE4F8B580000000, !dbg !169
  %3143 = select i1 %3139, float %3130, float 0x3EE4F8B580000000, !dbg !169
  %3144 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3140), !dbg !172
  %3145 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3141), !dbg !172
  %3146 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3142), !dbg !172
  %3147 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %3143), !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %3148 = bitcast float %3144 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3148, i1 true) #5, !dbg !173
  %3149 = bitcast float %3145 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3149, i1 true) #5, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %3150 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !173
  %3151 = load float, ptr addrspace(3) %3150, align 4, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %3152 = bitcast float %3146 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %3152, i1 true) #5, !dbg !173
  %3153 = bitcast float %3147 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %3153, i1 true) #5, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %3154 = load float, ptr addrspace(3) %3150, align 4, !dbg !173
  br label %3155, !dbg !174

3155:                                             ; preds = %2452, %3155
  %3156 = phi i1 [ true, %2452 ], [ false, %3155 ]
  %indvars.iv515 = phi i64 [ 0, %2452 ], [ 2048, %3155 ]
  %3157 = or disjoint i64 %indvars.iv515, %161, !dbg !175
  %3158 = icmp samesign ult i64 %3157, 3072, !dbg !176
  %3159 = trunc nuw nsw i64 %3157 to i32, !dbg !177
  %3160 = add i32 %107, %3159, !dbg !177
  %3161 = trunc nuw nsw i64 %indvars.iv515 to i32, !dbg !177
  %3162 = or disjoint i32 %32, %3161, !dbg !177
  %3163 = add i32 %3162, %107, !dbg !177
  %3164 = add i32 %108, %3159, !dbg !177
  %3165 = add i32 %3162, %108, !dbg !177
  %3166 = sext i32 %3160 to i64, !dbg !178
  %3167 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3166, !dbg !178
  %3168 = sext i32 %3163 to i64, !dbg !178
  %3169 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3168, !dbg !178
  %3170 = sext i32 %3164 to i64, !dbg !178
  %3171 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3170, !dbg !178
  %3172 = sext i32 %3165 to i64, !dbg !178
  %3173 = getelementptr bfloat, ptr addrspace(1) %9, i64 %3172, !dbg !178
  %3174 = and i1 %24, %3158, !dbg !179
  %3175 = and i1 %25, %3158, !dbg !179
  %3176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3167, i1 %3174) #5, !dbg !180
  %3177 = extractvalue { i32, i32, i32, i32 } %3176, 0, !dbg !180
  %3178 = bitcast i32 %3177 to <2 x bfloat>, !dbg !180
  %3179 = extractvalue { i32, i32, i32, i32 } %3176, 1, !dbg !180
  %3180 = bitcast i32 %3179 to <2 x bfloat>, !dbg !180
  %3181 = extractvalue { i32, i32, i32, i32 } %3176, 2, !dbg !180
  %3182 = bitcast i32 %3181 to <2 x bfloat>, !dbg !180
  %3183 = extractvalue { i32, i32, i32, i32 } %3176, 3, !dbg !180
  %3184 = bitcast i32 %3183 to <2 x bfloat>, !dbg !180
  %3185 = extractelement <2 x bfloat> %3178, i64 0, !dbg !180
  %3186 = extractelement <2 x bfloat> %3178, i64 1, !dbg !180
  %3187 = extractelement <2 x bfloat> %3180, i64 0, !dbg !180
  %3188 = extractelement <2 x bfloat> %3180, i64 1, !dbg !180
  %3189 = extractelement <2 x bfloat> %3182, i64 0, !dbg !180
  %3190 = extractelement <2 x bfloat> %3182, i64 1, !dbg !180
  %3191 = extractelement <2 x bfloat> %3184, i64 0, !dbg !180
  %3192 = extractelement <2 x bfloat> %3184, i64 1, !dbg !180
  %3193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3169, i1 %3174) #5, !dbg !180
  %3194 = extractvalue { i32, i32, i32, i32 } %3193, 0, !dbg !180
  %3195 = bitcast i32 %3194 to <2 x bfloat>, !dbg !180
  %3196 = extractvalue { i32, i32, i32, i32 } %3193, 1, !dbg !180
  %3197 = bitcast i32 %3196 to <2 x bfloat>, !dbg !180
  %3198 = extractvalue { i32, i32, i32, i32 } %3193, 2, !dbg !180
  %3199 = bitcast i32 %3198 to <2 x bfloat>, !dbg !180
  %3200 = extractvalue { i32, i32, i32, i32 } %3193, 3, !dbg !180
  %3201 = bitcast i32 %3200 to <2 x bfloat>, !dbg !180
  %3202 = extractelement <2 x bfloat> %3195, i64 0, !dbg !180
  %3203 = extractelement <2 x bfloat> %3195, i64 1, !dbg !180
  %3204 = extractelement <2 x bfloat> %3197, i64 0, !dbg !180
  %3205 = extractelement <2 x bfloat> %3197, i64 1, !dbg !180
  %3206 = extractelement <2 x bfloat> %3199, i64 0, !dbg !180
  %3207 = extractelement <2 x bfloat> %3199, i64 1, !dbg !180
  %3208 = extractelement <2 x bfloat> %3201, i64 0, !dbg !180
  %3209 = extractelement <2 x bfloat> %3201, i64 1, !dbg !180
  %3210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3171, i1 %3175) #5, !dbg !180
  %3211 = extractvalue { i32, i32, i32, i32 } %3210, 0, !dbg !180
  %3212 = bitcast i32 %3211 to <2 x bfloat>, !dbg !180
  %3213 = extractvalue { i32, i32, i32, i32 } %3210, 1, !dbg !180
  %3214 = bitcast i32 %3213 to <2 x bfloat>, !dbg !180
  %3215 = extractvalue { i32, i32, i32, i32 } %3210, 2, !dbg !180
  %3216 = bitcast i32 %3215 to <2 x bfloat>, !dbg !180
  %3217 = extractvalue { i32, i32, i32, i32 } %3210, 3, !dbg !180
  %3218 = bitcast i32 %3217 to <2 x bfloat>, !dbg !180
  %3219 = extractelement <2 x bfloat> %3212, i64 0, !dbg !180
  %3220 = extractelement <2 x bfloat> %3212, i64 1, !dbg !180
  %3221 = extractelement <2 x bfloat> %3214, i64 0, !dbg !180
  %3222 = extractelement <2 x bfloat> %3214, i64 1, !dbg !180
  %3223 = extractelement <2 x bfloat> %3216, i64 0, !dbg !180
  %3224 = extractelement <2 x bfloat> %3216, i64 1, !dbg !180
  %3225 = extractelement <2 x bfloat> %3218, i64 0, !dbg !180
  %3226 = extractelement <2 x bfloat> %3218, i64 1, !dbg !180
  %3227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %3173, i1 %3175) #5, !dbg !180
  %3228 = extractvalue { i32, i32, i32, i32 } %3227, 0, !dbg !180
  %3229 = bitcast i32 %3228 to <2 x bfloat>, !dbg !180
  %3230 = extractvalue { i32, i32, i32, i32 } %3227, 1, !dbg !180
  %3231 = bitcast i32 %3230 to <2 x bfloat>, !dbg !180
  %3232 = extractvalue { i32, i32, i32, i32 } %3227, 2, !dbg !180
  %3233 = bitcast i32 %3232 to <2 x bfloat>, !dbg !180
  %3234 = extractvalue { i32, i32, i32, i32 } %3227, 3, !dbg !180
  %3235 = bitcast i32 %3234 to <2 x bfloat>, !dbg !180
  %3236 = extractelement <2 x bfloat> %3229, i64 0, !dbg !180
  %3237 = extractelement <2 x bfloat> %3229, i64 1, !dbg !180
  %3238 = extractelement <2 x bfloat> %3231, i64 0, !dbg !180
  %3239 = extractelement <2 x bfloat> %3231, i64 1, !dbg !180
  %3240 = extractelement <2 x bfloat> %3233, i64 0, !dbg !180
  %3241 = extractelement <2 x bfloat> %3233, i64 1, !dbg !180
  %3242 = extractelement <2 x bfloat> %3235, i64 0, !dbg !180
  %3243 = extractelement <2 x bfloat> %3235, i64 1, !dbg !180
  %3244 = fpext bfloat %3185 to float, !dbg !181
  %3245 = fpext bfloat %3186 to float, !dbg !181
  %3246 = fpext bfloat %3187 to float, !dbg !181
  %3247 = fpext bfloat %3188 to float, !dbg !181
  %3248 = fpext bfloat %3189 to float, !dbg !181
  %3249 = fpext bfloat %3190 to float, !dbg !181
  %3250 = fpext bfloat %3191 to float, !dbg !181
  %3251 = fpext bfloat %3192 to float, !dbg !181
  %3252 = fpext bfloat %3202 to float, !dbg !181
  %3253 = fpext bfloat %3203 to float, !dbg !181
  %3254 = fpext bfloat %3204 to float, !dbg !181
  %3255 = fpext bfloat %3205 to float, !dbg !181
  %3256 = fpext bfloat %3206 to float, !dbg !181
  %3257 = fpext bfloat %3207 to float, !dbg !181
  %3258 = fpext bfloat %3208 to float, !dbg !181
  %3259 = fpext bfloat %3209 to float, !dbg !181
  %3260 = fpext bfloat %3219 to float, !dbg !181
  %3261 = fpext bfloat %3220 to float, !dbg !181
  %3262 = fpext bfloat %3221 to float, !dbg !181
  %3263 = fpext bfloat %3222 to float, !dbg !181
  %3264 = fpext bfloat %3223 to float, !dbg !181
  %3265 = fpext bfloat %3224 to float, !dbg !181
  %3266 = fpext bfloat %3225 to float, !dbg !181
  %3267 = fpext bfloat %3226 to float, !dbg !181
  %3268 = fpext bfloat %3236 to float, !dbg !181
  %3269 = fpext bfloat %3237 to float, !dbg !181
  %3270 = fpext bfloat %3238 to float, !dbg !181
  %3271 = fpext bfloat %3239 to float, !dbg !181
  %3272 = fpext bfloat %3240 to float, !dbg !181
  %3273 = fpext bfloat %3241 to float, !dbg !181
  %3274 = fpext bfloat %3242 to float, !dbg !181
  %3275 = fpext bfloat %3243 to float, !dbg !181
  %3276 = fmul float %3151, %3244, !dbg !173
  %3277 = fmul float %3151, %3245, !dbg !173
  %3278 = fmul float %3151, %3246, !dbg !173
  %3279 = fmul float %3151, %3247, !dbg !173
  %3280 = fmul float %3151, %3248, !dbg !173
  %3281 = fmul float %3151, %3249, !dbg !173
  %3282 = fmul float %3151, %3250, !dbg !173
  %3283 = fmul float %3151, %3251, !dbg !173
  %3284 = fmul float %3151, %3252, !dbg !173
  %3285 = fmul float %3151, %3253, !dbg !173
  %3286 = fmul float %3151, %3254, !dbg !173
  %3287 = fmul float %3151, %3255, !dbg !173
  %3288 = fmul float %3151, %3256, !dbg !173
  %3289 = fmul float %3151, %3257, !dbg !173
  %3290 = fmul float %3151, %3258, !dbg !173
  %3291 = fmul float %3151, %3259, !dbg !173
  %3292 = fmul float %3154, %3260, !dbg !173
  %3293 = fmul float %3154, %3261, !dbg !173
  %3294 = fmul float %3154, %3262, !dbg !173
  %3295 = fmul float %3154, %3263, !dbg !173
  %3296 = fmul float %3154, %3264, !dbg !173
  %3297 = fmul float %3154, %3265, !dbg !173
  %3298 = fmul float %3154, %3266, !dbg !173
  %3299 = fmul float %3154, %3267, !dbg !173
  %3300 = fmul float %3154, %3268, !dbg !173
  %3301 = fmul float %3154, %3269, !dbg !173
  %3302 = fmul float %3154, %3270, !dbg !173
  %3303 = fmul float %3154, %3271, !dbg !173
  %3304 = fmul float %3154, %3272, !dbg !173
  %3305 = fmul float %3154, %3273, !dbg !173
  %3306 = fmul float %3154, %3274, !dbg !173
  %3307 = fmul float %3154, %3275, !dbg !173
  %3308 = tail call float @llvm.nvvm.round.f(float %3276) #5, !dbg !182
  %3309 = tail call float @llvm.nvvm.round.f(float %3277) #5, !dbg !182
  %3310 = tail call float @llvm.nvvm.round.f(float %3278) #5, !dbg !182
  %3311 = tail call float @llvm.nvvm.round.f(float %3279) #5, !dbg !182
  %3312 = tail call float @llvm.nvvm.round.f(float %3280) #5, !dbg !182
  %3313 = tail call float @llvm.nvvm.round.f(float %3281) #5, !dbg !182
  %3314 = tail call float @llvm.nvvm.round.f(float %3282) #5, !dbg !182
  %3315 = tail call float @llvm.nvvm.round.f(float %3283) #5, !dbg !182
  %3316 = tail call float @llvm.nvvm.round.f(float %3284) #5, !dbg !182
  %3317 = tail call float @llvm.nvvm.round.f(float %3285) #5, !dbg !182
  %3318 = tail call float @llvm.nvvm.round.f(float %3286) #5, !dbg !182
  %3319 = tail call float @llvm.nvvm.round.f(float %3287) #5, !dbg !182
  %3320 = tail call float @llvm.nvvm.round.f(float %3288) #5, !dbg !182
  %3321 = tail call float @llvm.nvvm.round.f(float %3289) #5, !dbg !182
  %3322 = tail call float @llvm.nvvm.round.f(float %3290) #5, !dbg !182
  %3323 = tail call float @llvm.nvvm.round.f(float %3291) #5, !dbg !182
  %3324 = tail call float @llvm.nvvm.round.f(float %3292) #5, !dbg !182
  %3325 = tail call float @llvm.nvvm.round.f(float %3293) #5, !dbg !182
  %3326 = tail call float @llvm.nvvm.round.f(float %3294) #5, !dbg !182
  %3327 = tail call float @llvm.nvvm.round.f(float %3295) #5, !dbg !182
  %3328 = tail call float @llvm.nvvm.round.f(float %3296) #5, !dbg !182
  %3329 = tail call float @llvm.nvvm.round.f(float %3297) #5, !dbg !182
  %3330 = tail call float @llvm.nvvm.round.f(float %3298) #5, !dbg !182
  %3331 = tail call float @llvm.nvvm.round.f(float %3299) #5, !dbg !182
  %3332 = tail call float @llvm.nvvm.round.f(float %3300) #5, !dbg !182
  %3333 = tail call float @llvm.nvvm.round.f(float %3301) #5, !dbg !182
  %3334 = tail call float @llvm.nvvm.round.f(float %3302) #5, !dbg !182
  %3335 = tail call float @llvm.nvvm.round.f(float %3303) #5, !dbg !182
  %3336 = tail call float @llvm.nvvm.round.f(float %3304) #5, !dbg !182
  %3337 = tail call float @llvm.nvvm.round.f(float %3305) #5, !dbg !182
  %3338 = tail call float @llvm.nvvm.round.f(float %3306) #5, !dbg !182
  %3339 = tail call float @llvm.nvvm.round.f(float %3307) #5, !dbg !182
  %3340 = insertelement <4 x float> poison, float %3308, i64 0, !dbg !183
  %3341 = insertelement <4 x float> %3340, float %3309, i64 1, !dbg !183
  %3342 = insertelement <4 x float> %3341, float %3310, i64 2, !dbg !183
  %3343 = insertelement <4 x float> %3342, float %3311, i64 3, !dbg !183
  %3344 = fcmp ogt <4 x float> %3343, splat (float -1.270000e+02), !dbg !183
  %3345 = fcmp uno <4 x float> %3343, zeroinitializer, !dbg !185
  %3346 = or <4 x i1> %3344, %3345, !dbg !186
  %3347 = select <4 x i1> %3346, <4 x float> %3343, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3348 = fcmp olt <4 x float> %3347, splat (float 1.270000e+02), !dbg !188
  %3349 = fcmp uno <4 x float> %3347, zeroinitializer, !dbg !190
  %3350 = or <4 x i1> %3348, %3349, !dbg !191
  %3351 = fptosi <4 x float> %3347 to <4 x i8>, !dbg !192
  %3352 = select <4 x i1> %3350, <4 x i8> %3351, <4 x i8> splat (i8 127), !dbg !193
  %3353 = insertelement <4 x float> poison, float %3312, i64 0, !dbg !183
  %3354 = insertelement <4 x float> %3353, float %3313, i64 1, !dbg !183
  %3355 = insertelement <4 x float> %3354, float %3314, i64 2, !dbg !183
  %3356 = insertelement <4 x float> %3355, float %3315, i64 3, !dbg !183
  %3357 = fcmp ogt <4 x float> %3356, splat (float -1.270000e+02), !dbg !183
  %3358 = fcmp uno <4 x float> %3356, zeroinitializer, !dbg !185
  %3359 = or <4 x i1> %3357, %3358, !dbg !186
  %3360 = select <4 x i1> %3359, <4 x float> %3356, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3361 = fcmp olt <4 x float> %3360, splat (float 1.270000e+02), !dbg !188
  %3362 = fcmp uno <4 x float> %3360, zeroinitializer, !dbg !190
  %3363 = or <4 x i1> %3361, %3362, !dbg !191
  %3364 = fptosi <4 x float> %3360 to <4 x i8>, !dbg !192
  %3365 = select <4 x i1> %3363, <4 x i8> %3364, <4 x i8> splat (i8 127), !dbg !193
  %3366 = insertelement <4 x float> poison, float %3316, i64 0, !dbg !183
  %3367 = insertelement <4 x float> %3366, float %3317, i64 1, !dbg !183
  %3368 = insertelement <4 x float> %3367, float %3318, i64 2, !dbg !183
  %3369 = insertelement <4 x float> %3368, float %3319, i64 3, !dbg !183
  %3370 = fcmp ogt <4 x float> %3369, splat (float -1.270000e+02), !dbg !183
  %3371 = fcmp uno <4 x float> %3369, zeroinitializer, !dbg !185
  %3372 = or <4 x i1> %3370, %3371, !dbg !186
  %3373 = select <4 x i1> %3372, <4 x float> %3369, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3374 = fcmp olt <4 x float> %3373, splat (float 1.270000e+02), !dbg !188
  %3375 = fcmp uno <4 x float> %3373, zeroinitializer, !dbg !190
  %3376 = or <4 x i1> %3374, %3375, !dbg !191
  %3377 = fptosi <4 x float> %3373 to <4 x i8>, !dbg !192
  %3378 = select <4 x i1> %3376, <4 x i8> %3377, <4 x i8> splat (i8 127), !dbg !193
  %3379 = insertelement <4 x float> poison, float %3320, i64 0, !dbg !183
  %3380 = insertelement <4 x float> %3379, float %3321, i64 1, !dbg !183
  %3381 = insertelement <4 x float> %3380, float %3322, i64 2, !dbg !183
  %3382 = insertelement <4 x float> %3381, float %3323, i64 3, !dbg !183
  %3383 = fcmp ogt <4 x float> %3382, splat (float -1.270000e+02), !dbg !183
  %3384 = fcmp uno <4 x float> %3382, zeroinitializer, !dbg !185
  %3385 = or <4 x i1> %3383, %3384, !dbg !186
  %3386 = select <4 x i1> %3385, <4 x float> %3382, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3387 = fcmp olt <4 x float> %3386, splat (float 1.270000e+02), !dbg !188
  %3388 = fcmp uno <4 x float> %3386, zeroinitializer, !dbg !190
  %3389 = or <4 x i1> %3387, %3388, !dbg !191
  %3390 = fptosi <4 x float> %3386 to <4 x i8>, !dbg !192
  %3391 = select <4 x i1> %3389, <4 x i8> %3390, <4 x i8> splat (i8 127), !dbg !193
  %3392 = insertelement <4 x float> poison, float %3324, i64 0, !dbg !183
  %3393 = insertelement <4 x float> %3392, float %3325, i64 1, !dbg !183
  %3394 = insertelement <4 x float> %3393, float %3326, i64 2, !dbg !183
  %3395 = insertelement <4 x float> %3394, float %3327, i64 3, !dbg !183
  %3396 = fcmp ogt <4 x float> %3395, splat (float -1.270000e+02), !dbg !183
  %3397 = fcmp uno <4 x float> %3395, zeroinitializer, !dbg !185
  %3398 = or <4 x i1> %3396, %3397, !dbg !186
  %3399 = select <4 x i1> %3398, <4 x float> %3395, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3400 = fcmp olt <4 x float> %3399, splat (float 1.270000e+02), !dbg !188
  %3401 = fcmp uno <4 x float> %3399, zeroinitializer, !dbg !190
  %3402 = or <4 x i1> %3400, %3401, !dbg !191
  %3403 = fptosi <4 x float> %3399 to <4 x i8>, !dbg !192
  %3404 = select <4 x i1> %3402, <4 x i8> %3403, <4 x i8> splat (i8 127), !dbg !193
  %3405 = insertelement <4 x float> poison, float %3328, i64 0, !dbg !183
  %3406 = insertelement <4 x float> %3405, float %3329, i64 1, !dbg !183
  %3407 = insertelement <4 x float> %3406, float %3330, i64 2, !dbg !183
  %3408 = insertelement <4 x float> %3407, float %3331, i64 3, !dbg !183
  %3409 = fcmp ogt <4 x float> %3408, splat (float -1.270000e+02), !dbg !183
  %3410 = fcmp uno <4 x float> %3408, zeroinitializer, !dbg !185
  %3411 = or <4 x i1> %3409, %3410, !dbg !186
  %3412 = select <4 x i1> %3411, <4 x float> %3408, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3413 = fcmp olt <4 x float> %3412, splat (float 1.270000e+02), !dbg !188
  %3414 = fcmp uno <4 x float> %3412, zeroinitializer, !dbg !190
  %3415 = or <4 x i1> %3413, %3414, !dbg !191
  %3416 = fptosi <4 x float> %3412 to <4 x i8>, !dbg !192
  %3417 = select <4 x i1> %3415, <4 x i8> %3416, <4 x i8> splat (i8 127), !dbg !193
  %3418 = insertelement <4 x float> poison, float %3332, i64 0, !dbg !183
  %3419 = insertelement <4 x float> %3418, float %3333, i64 1, !dbg !183
  %3420 = insertelement <4 x float> %3419, float %3334, i64 2, !dbg !183
  %3421 = insertelement <4 x float> %3420, float %3335, i64 3, !dbg !183
  %3422 = fcmp ogt <4 x float> %3421, splat (float -1.270000e+02), !dbg !183
  %3423 = fcmp uno <4 x float> %3421, zeroinitializer, !dbg !185
  %3424 = or <4 x i1> %3422, %3423, !dbg !186
  %3425 = select <4 x i1> %3424, <4 x float> %3421, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3426 = fcmp olt <4 x float> %3425, splat (float 1.270000e+02), !dbg !188
  %3427 = fcmp uno <4 x float> %3425, zeroinitializer, !dbg !190
  %3428 = or <4 x i1> %3426, %3427, !dbg !191
  %3429 = fptosi <4 x float> %3425 to <4 x i8>, !dbg !192
  %3430 = select <4 x i1> %3428, <4 x i8> %3429, <4 x i8> splat (i8 127), !dbg !193
  %3431 = insertelement <4 x float> poison, float %3336, i64 0, !dbg !183
  %3432 = insertelement <4 x float> %3431, float %3337, i64 1, !dbg !183
  %3433 = insertelement <4 x float> %3432, float %3338, i64 2, !dbg !183
  %3434 = insertelement <4 x float> %3433, float %3339, i64 3, !dbg !183
  %3435 = fcmp ogt <4 x float> %3434, splat (float -1.270000e+02), !dbg !183
  %3436 = fcmp uno <4 x float> %3434, zeroinitializer, !dbg !185
  %3437 = or <4 x i1> %3435, %3436, !dbg !186
  %3438 = select <4 x i1> %3437, <4 x float> %3434, <4 x float> splat (float -1.270000e+02), !dbg !187
  %3439 = fcmp olt <4 x float> %3438, splat (float 1.270000e+02), !dbg !188
  %3440 = fcmp uno <4 x float> %3438, zeroinitializer, !dbg !190
  %3441 = or <4 x i1> %3439, %3440, !dbg !191
  %3442 = fptosi <4 x float> %3438 to <4 x i8>, !dbg !192
  %3443 = select <4 x i1> %3441, <4 x i8> %3442, <4 x i8> splat (i8 127), !dbg !193
  %3444 = getelementptr i8, ptr addrspace(1) %12, i64 %3166, !dbg !194
  %3445 = getelementptr i8, ptr addrspace(1) %12, i64 %3170, !dbg !194
  %3446 = bitcast <4 x i8> %3352 to i32, !dbg !195
  %3447 = bitcast <4 x i8> %3365 to i32, !dbg !195
  %3448 = bitcast <4 x i8> %3378 to i32, !dbg !195
  %3449 = bitcast <4 x i8> %3391 to i32, !dbg !195
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3446, i32 %3447, i32 %3448, i32 %3449, ptr addrspace(1) %3444, i1 %3174) #5, !dbg !195
  %3450 = bitcast <4 x i8> %3404 to i32, !dbg !195
  %3451 = bitcast <4 x i8> %3417 to i32, !dbg !195
  %3452 = bitcast <4 x i8> %3430 to i32, !dbg !195
  %3453 = bitcast <4 x i8> %3443 to i32, !dbg !195
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3450, i32 %3451, i32 %3452, i32 %3453, ptr addrspace(1) %3445, i1 %3175) #5, !dbg !195
  br i1 %3156, label %3155, label %3454, !dbg !174

3454:                                             ; preds = %3155
  ret void, !dbg !196
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 35, column: 31, scope: !6)
!40 = !DILocation(line: 36, column: 29, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 59, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 40, column: 113, scope: !6)
!46 = !DILocation(line: 41, column: 41, scope: !6)
!47 = !DILocation(line: 41, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 60, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 70, column: 64, scope: !6)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 72, column: 68, scope: !6)
!79 = !DILocation(line: 73, column: 29, scope: !6)
!80 = !DILocation(line: 73, column: 53, scope: !6)
!81 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 217, column: 21, scope: !84, inlinedAt: !82)
!84 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!85 = !DILocation(line: 218, column: 28, scope: !84, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 39, scope: !84, inlinedAt: !82)
!87 = !DILocation(line: 219, column: 60, scope: !84, inlinedAt: !82)
!88 = !DILocation(line: 219, column: 49, scope: !84, inlinedAt: !82)
!89 = !DILocation(line: 221, column: 25, scope: !84, inlinedAt: !82)
!90 = !DILocation(line: 221, column: 17, scope: !84, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 15, scope: !84, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 30, scope: !84, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 38, scope: !84, inlinedAt: !82)
!94 = !DILocation(line: 222, column: 49, scope: !84, inlinedAt: !82)
!95 = !DILocation(line: 222, column: 22, scope: !84, inlinedAt: !82)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 80, column: 40, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 82, column: 29, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 61, scope: !6)
!107 = !DILocation(line: 86, column: 53, scope: !6)
!108 = !DILocation(line: 87, column: 43, scope: !6)
!109 = !DILocation(line: 87, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 35, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 90, column: 35, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !115)
!115 = !DILocation(line: 111, column: 47, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 87, column: 50, scope: !6)
!120 = !DILocation(line: 88, column: 50, scope: !6)
!121 = !DILocation(line: 88, column: 103, scope: !6)
!122 = !DILocation(line: 89, column: 49, scope: !6)
!123 = !DILocation(line: 90, column: 49, scope: !6)
!124 = !DILocation(line: 90, column: 102, scope: !6)
!125 = !DILocation(line: 101, column: 24, scope: !6)
!126 = !DILocation(line: 103, column: 24, scope: !6)
!127 = !DILocation(line: 104, column: 24, scope: !6)
!128 = !DILocation(line: 106, column: 24, scope: !6)
!129 = !DILocation(line: 107, column: 24, scope: !6)
!130 = !DILocation(line: 113, column: 53, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !117)
!132 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !117)
!133 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !117)
!134 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !115)
!135 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !115)
!136 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !115)
!137 = !DILocation(line: 110, column: 50, scope: !6)
!138 = !DILocation(line: 112, column: 50, scope: !6)
!139 = !DILocation(line: 113, column: 29, scope: !6)
!140 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !141)
!141 = !DILocation(line: 114, column: 40, scope: !6)
!142 = !DILocation(line: 94, column: 15, scope: !84, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 21, scope: !84, inlinedAt: !141)
!144 = !DILocation(line: 96, column: 16, scope: !84, inlinedAt: !141)
!145 = !DILocation(line: 97, column: 29, scope: !84, inlinedAt: !141)
!146 = !DILocation(line: 102, column: 15, scope: !84, inlinedAt: !147)
!147 = !DILocation(line: 115, column: 40, scope: !6)
!148 = !DILocation(line: 116, column: 37, scope: !6)
!149 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !147)
!150 = !DILocation(line: 104, column: 21, scope: !84, inlinedAt: !147)
!151 = !DILocation(line: 104, column: 16, scope: !84, inlinedAt: !147)
!152 = !DILocation(line: 105, column: 29, scope: !84, inlinedAt: !147)
!153 = !DILocation(line: 117, column: 37, scope: !6)
!154 = !DILocation(line: 116, column: 25, scope: !6)
!155 = !DILocation(line: 117, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 126, column: 46, scope: !6)
!158 = !DILocation(line: 127, column: 17, scope: !6)
!159 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !160)
!160 = !DILocation(line: 128, column: 46, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !162)
!162 = !DILocation(line: 129, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !162)
!166 = !DILocation(line: 131, column: 24, scope: !6)
!167 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !168)
!168 = !DILocation(line: 134, column: 46, scope: !6)
!169 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !168)
!170 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !168)
!171 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !168)
!172 = !DILocation(line: 137, column: 25, scope: !6)
!173 = !DILocation(line: 140, column: 24, scope: !6)
!174 = !DILocation(line: 118, column: 40, scope: !6)
!175 = !DILocation(line: 119, column: 31, scope: !6)
!176 = !DILocation(line: 120, column: 29, scope: !6)
!177 = !DILocation(line: 124, column: 43, scope: !6)
!178 = !DILocation(line: 124, column: 36, scope: !6)
!179 = !DILocation(line: 124, column: 61, scope: !6)
!180 = !DILocation(line: 124, column: 53, scope: !6)
!181 = !DILocation(line: 124, column: 115, scope: !6)
!182 = !DILocation(line: 141, column: 36, scope: !6)
!183 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !184)
!184 = !DILocation(line: 144, column: 46, scope: !6)
!185 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !184)
!186 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !184)
!187 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !184)
!188 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !189)
!189 = !DILocation(line: 146, column: 46, scope: !6)
!190 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !189)
!191 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !189)
!192 = !DILocation(line: 148, column: 25, scope: !6)
!193 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !189)
!194 = !DILocation(line: 149, column: 29, scope: !6)
!195 = !DILocation(line: 149, column: 53, scope: !6)
!196 = !DILocation(line: 118, column: 4, scope: !6)
