; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 1, !dbg !11
  %21 = and i32 %20, 254, !dbg !11
  %22 = sext i32 %16 to i64, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %4, i64 %22, !dbg !12
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %26 = bitcast i16 %25 to bfloat, !dbg !13
  %27 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !14
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %17) #5, !dbg !15
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %17) #5, !dbg !15
  %30 = bitcast i16 %29 to bfloat, !dbg !15
  %31 = mul i32 %16, 3072, !dbg !16
  %.inv = fcmp oge bfloat %26, 0xR0000, !dbg !17
  %32 = select i1 %.inv, bfloat 0xR0000, bfloat %26, !dbg !17
  %33 = fpext bfloat %32 to float, !dbg !17
  %34 = fsub float 0.000000e+00, %33, !dbg !21
  %.inv3 = fcmp ole bfloat %30, 0xR0000, !dbg !22
  %35 = select i1 %.inv3, bfloat 0xR0000, bfloat %30, !dbg !22
  %36 = fpext bfloat %35 to float, !dbg !22
  %37 = fcmp ogt float %34, %36, !dbg !24
  %38 = fcmp uno float %34, 0.000000e+00, !dbg !26
  %39 = or i1 %38, %37, !dbg !27
  %40 = select i1 %39, float %34, float %36, !dbg !28
  %41 = fmul float %40, 0x3F80204080000000, !dbg !29
  %42 = fcmp ogt float %41, 0x3EE4F8B580000000, !dbg !30
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !32
  %44 = or i1 %42, %43, !dbg !33
  %45 = select i1 %44, float %41, float 0x3EE4F8B580000000, !dbg !34
  %46 = zext nneg i32 %21 to i64, !dbg !35
  %47 = or disjoint i32 %21, %31, !dbg !36
  %48 = sext i32 %47 to i64, !dbg !37
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 %17) #5, !dbg !38
  %51 = or disjoint i64 %46, 6144, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !40
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %52, i1 true) #5, !dbg !41
  %54 = getelementptr bfloat, ptr addrspace(1) %2, i64 %51, !dbg !42
  %55 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %54, i1 true) #5, !dbg !43
  %56 = getelementptr i32, ptr addrspace(1) %3, i64 %48, !dbg !44
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %17) #5, !dbg !45
  %58 = getelementptr bfloat, ptr addrspace(1) %6, i64 %46, !dbg !46
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %58, i1 true) #5, !dbg !47
  %60 = getelementptr bfloat, ptr addrspace(1) %7, i64 %46, !dbg !48
  %61 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %60, i1 true) #5, !dbg !49
  %62 = extractvalue { i32, i32 } %53, 1, !dbg !41
  %63 = bitcast i32 %55 to <2 x bfloat>, !dbg !43
  %64 = extractvalue { i32, i32 } %57, 1, !dbg !45
  %65 = bitcast i32 %59 to <2 x bfloat>, !dbg !47
  %66 = bitcast i32 %61 to <2 x bfloat>, !dbg !49
  %67 = bitcast i32 %50 to <2 x bfloat>, !dbg !38
  %68 = extractvalue { i32, i32 } %53, 0, !dbg !41
  %69 = extractvalue { i32, i32 } %57, 0, !dbg !45
  %70 = getelementptr bfloat, ptr addrspace(1) %8, i64 %48, !dbg !50
  %71 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !41
  %72 = insertelement <2 x i32> %71, i32 %62, i64 1, !dbg !41
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !41
  %74 = fpext <2 x bfloat> %63 to <2 x float>, !dbg !51
  %75 = fadd <2 x float> %73, %74, !dbg !52
  %76 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !53
  %77 = insertelement <2 x i32> %76, i32 %64, i64 1, !dbg !53
  %78 = sitofp <2 x i32> %77 to <2 x float>, !dbg !53
  %79 = insertelement <2 x float> poison, float %45, i64 0, !dbg !54
  %80 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %81 = fmul <2 x float> %80, %78, !dbg !54
  %82 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !55
  %83 = fmul <2 x float> %81, %82, !dbg !56
  %84 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !57
  %85 = fadd <2 x float> %83, %84, !dbg !58
  %86 = fmul <2 x float> %75, %85, !dbg !59
  %87 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !60
  %88 = fadd <2 x float> %86, %87, !dbg !61
  %89 = fptrunc <2 x float> %88 to <2 x bfloat>, !dbg !62
  %90 = bitcast <2 x bfloat> %89 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %70, i1 %17) #5, !dbg !62
  %91 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %92 = extractelement <2 x float> %88, i64 0, !dbg !64
  %93 = select i1 %17, float %92, float 0.000000e+00, !dbg !64
  %94 = extractelement <2 x float> %88, i64 1, !dbg !64
  %95 = select i1 %17, float %94, float 0.000000e+00, !dbg !64
  br label %96, !dbg !35

96:                                               ; preds = %.peel.next, %96
  %indvars.iv = phi i64 [ 256, %.peel.next ], [ %indvars.iv.next, %96 ]
  %.pn42 = phi float [ %91, %.peel.next ], [ %126, %96 ]
  %.pn40 = phi float [ %91, %.peel.next ], [ %127, %96 ]
  %97 = phi float [ 0.000000e+00, %.peel.next ], [ %161, %96 ]
  %98 = phi float [ 0.000000e+00, %.peel.next ], [ %162, %96 ]
  %.pn46 = phi float [ %93, %.peel.next ], [ %159, %96 ]
  %.pn44 = phi float [ %95, %.peel.next ], [ %160, %96 ]
  %99 = or disjoint i64 %indvars.iv, %46, !dbg !65
  %100 = trunc nuw nsw i64 %99 to i32, !dbg !36
  %101 = add i32 %31, %100, !dbg !36
  %102 = sext i32 %101 to i64, !dbg !37
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !37
  %104 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %103, i1 %17) #5, !dbg !38
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !38
  %106 = add nuw nsw i64 %99, 6144, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !40
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %107, i1 true) #5, !dbg !41
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !41
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !41
  %111 = getelementptr bfloat, ptr addrspace(1) %2, i64 %106, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 true) #5, !dbg !43
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !43
  %114 = getelementptr i32, ptr addrspace(1) %3, i64 %102, !dbg !44
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %114, i1 %17) #5, !dbg !45
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !45
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !45
  %118 = getelementptr bfloat, ptr addrspace(1) %6, i64 %99, !dbg !46
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 true) #5, !dbg !47
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !47
  %121 = getelementptr bfloat, ptr addrspace(1) %7, i64 %99, !dbg !48
  %122 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %121, i1 true) #5, !dbg !49
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !49
  %124 = fadd float %.pn42, 1.000000e+00, !dbg !66
  %125 = fadd float %.pn40, 1.000000e+00, !dbg !66
  %126 = select i1 %17, float %124, float %.pn42, !dbg !63
  %127 = select i1 %17, float %125, float %.pn40, !dbg !63
  %128 = getelementptr bfloat, ptr addrspace(1) %8, i64 %102, !dbg !50
  %129 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !60
  %130 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !41
  %131 = insertelement <2 x i32> %130, i32 %110, i64 1, !dbg !41
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !41
  %133 = fpext <2 x bfloat> %113 to <2 x float>, !dbg !51
  %134 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !55
  %135 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !57
  %136 = fadd <2 x float> %132, %133, !dbg !52
  %137 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !53
  %138 = insertelement <2 x i32> %137, i32 %117, i64 1, !dbg !53
  %139 = sitofp <2 x i32> %138 to <2 x float>, !dbg !53
  %140 = fmul <2 x float> %80, %139, !dbg !54
  %141 = fmul <2 x float> %140, %134, !dbg !56
  %142 = fadd <2 x float> %141, %135, !dbg !58
  %143 = fmul <2 x float> %136, %142, !dbg !59
  %144 = fadd <2 x float> %143, %129, !dbg !61
  %145 = extractelement <2 x float> %144, i64 0, !dbg !68
  %146 = fsub float %145, %.pn46, !dbg !69
  %147 = tail call float @llvm.nvvm.div.full(float %146, float %124), !dbg !70
  %148 = fadd float %.pn46, %147, !dbg !71
  %149 = fsub float %145, %148, !dbg !68
  %150 = fmul float %146, %149, !dbg !72
  %151 = fadd float %97, %150, !dbg !73
  %152 = extractelement <2 x float> %144, i64 1, !dbg !68
  %153 = fsub float %152, %.pn44, !dbg !69
  %154 = tail call float @llvm.nvvm.div.full(float %153, float %125), !dbg !70
  %155 = fadd float %.pn44, %154, !dbg !71
  %156 = fsub float %152, %155, !dbg !68
  %157 = fmul float %153, %156, !dbg !72
  %158 = fadd float %98, %157, !dbg !73
  %159 = select i1 %17, float %148, float %.pn46, !dbg !64
  %160 = select i1 %17, float %155, float %.pn44, !dbg !64
  %161 = select i1 %17, float %151, float %97, !dbg !74
  %162 = select i1 %17, float %158, float %98, !dbg !74
  %163 = fptrunc <2 x float> %144 to <2 x bfloat>, !dbg !62
  %164 = bitcast <2 x bfloat> %163 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %128, i1 %17) #5, !dbg !62
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !35
  %165 = icmp samesign ult i64 %indvars.iv, 2816, !dbg !35
  br i1 %165, label %96, label %__nv_rsqrtf.exit, !dbg !35, !llvm.loop !75

__nv_rsqrtf.exit:                                 ; preds = %96
  %166 = lshr i32 %18, 5, !dbg !11
  %167 = fsub float %160, %159, !dbg !77
  %168 = fadd float %126, %127, !dbg !80
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !81
  %170 = tail call float @llvm.nvvm.div.full(float %127, float %168), !dbg !82
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !83
  %172 = fmul float %167, %171, !dbg !84
  %173 = fadd float %159, %172, !dbg !85
  %174 = fadd float %161, %162, !dbg !86
  %175 = fmul float %167, %167, !dbg !87
  %176 = fmul float %175, %126, !dbg !88
  %177 = fmul float %176, %171, !dbg !89
  %178 = fadd float %174, %177, !dbg !90
  %179 = bitcast float %173 to i32, !dbg !91
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !91
  %181 = bitcast i32 %180 to float, !dbg !91
  %182 = bitcast float %178 to i32, !dbg !91
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 16, i32 31), !dbg !91
  %184 = bitcast i32 %183 to float, !dbg !91
  %185 = bitcast float %168 to i32, !dbg !91
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !91
  %187 = bitcast i32 %186 to float, !dbg !91
  %188 = fsub float %181, %173, !dbg !77
  %189 = fadd float %168, %187, !dbg !80
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !81
  %191 = tail call float @llvm.nvvm.div.full(float %187, float %189), !dbg !82
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !83
  %193 = fmul float %188, %192, !dbg !84
  %194 = fadd float %173, %193, !dbg !85
  %195 = fadd float %178, %184, !dbg !86
  %196 = fmul float %188, %188, !dbg !87
  %197 = fmul float %168, %196, !dbg !88
  %198 = fmul float %197, %192, !dbg !89
  %199 = fadd float %195, %198, !dbg !90
  %200 = bitcast float %194 to i32, !dbg !91
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 8, i32 31), !dbg !91
  %202 = bitcast i32 %201 to float, !dbg !91
  %203 = bitcast float %199 to i32, !dbg !91
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !91
  %205 = bitcast i32 %204 to float, !dbg !91
  %206 = bitcast float %189 to i32, !dbg !91
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !91
  %208 = bitcast i32 %207 to float, !dbg !91
  %209 = fsub float %202, %194, !dbg !77
  %210 = fadd float %189, %208, !dbg !80
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !81
  %212 = tail call float @llvm.nvvm.div.full(float %208, float %210), !dbg !82
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !83
  %214 = fmul float %209, %213, !dbg !84
  %215 = fadd float %194, %214, !dbg !85
  %216 = fadd float %199, %205, !dbg !86
  %217 = fmul float %209, %209, !dbg !87
  %218 = fmul float %189, %217, !dbg !88
  %219 = fmul float %213, %218, !dbg !89
  %220 = fadd float %216, %219, !dbg !90
  %221 = bitcast float %215 to i32, !dbg !91
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 4, i32 31), !dbg !91
  %223 = bitcast i32 %222 to float, !dbg !91
  %224 = bitcast float %220 to i32, !dbg !91
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 4, i32 31), !dbg !91
  %226 = bitcast i32 %225 to float, !dbg !91
  %227 = bitcast float %210 to i32, !dbg !91
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !91
  %229 = bitcast i32 %228 to float, !dbg !91
  %230 = fsub float %223, %215, !dbg !77
  %231 = fadd float %210, %229, !dbg !80
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !81
  %233 = tail call float @llvm.nvvm.div.full(float %229, float %231), !dbg !82
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !83
  %235 = fmul float %230, %234, !dbg !84
  %236 = fadd float %215, %235, !dbg !85
  %237 = fadd float %220, %226, !dbg !86
  %238 = fmul float %230, %230, !dbg !87
  %239 = fmul float %210, %238, !dbg !88
  %240 = fmul float %234, %239, !dbg !89
  %241 = fadd float %237, %240, !dbg !90
  %242 = bitcast float %236 to i32, !dbg !91
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !91
  %244 = bitcast i32 %243 to float, !dbg !91
  %245 = bitcast float %241 to i32, !dbg !91
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 2, i32 31), !dbg !91
  %247 = bitcast i32 %246 to float, !dbg !91
  %248 = bitcast float %231 to i32, !dbg !91
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !91
  %250 = bitcast i32 %249 to float, !dbg !91
  %251 = fsub float %244, %236, !dbg !77
  %252 = fadd float %231, %250, !dbg !80
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !81
  %254 = tail call float @llvm.nvvm.div.full(float %250, float %252), !dbg !82
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !83
  %256 = fmul float %251, %255, !dbg !84
  %257 = fadd float %236, %256, !dbg !85
  %258 = fadd float %241, %247, !dbg !86
  %259 = fmul float %251, %251, !dbg !87
  %260 = fmul float %231, %259, !dbg !88
  %261 = fmul float %255, %260, !dbg !89
  %262 = fadd float %258, %261, !dbg !90
  %263 = bitcast float %257 to i32, !dbg !91
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !91
  %265 = bitcast i32 %264 to float, !dbg !91
  %266 = bitcast float %262 to i32, !dbg !91
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !91
  %268 = bitcast i32 %267 to float, !dbg !91
  %269 = bitcast float %252 to i32, !dbg !91
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !91
  %271 = bitcast i32 %270 to float, !dbg !91
  %272 = fsub float %265, %257, !dbg !77
  %273 = fadd float %252, %271, !dbg !80
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !81
  %275 = tail call float @llvm.nvvm.div.full(float %271, float %273), !dbg !82
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !83
  %277 = fmul float %272, %276, !dbg !84
  %278 = fadd float %257, %277, !dbg !85
  %279 = fadd float %262, %268, !dbg !86
  %280 = fmul float %272, %272, !dbg !87
  %281 = fmul float %252, %280, !dbg !88
  %282 = fmul float %276, %281, !dbg !89
  %283 = fadd float %279, %282, !dbg !90
  %284 = and i32 %166, 3, !dbg !91
  %285 = icmp eq i32 %19, 0, !dbg !91
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !91
  %287 = bitcast float %278 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %285) #5, !dbg !91
  %288 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %284, !dbg !91
  %289 = bitcast float %283 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 %285) #5, !dbg !91
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %284, !dbg !91
  %291 = bitcast float %273 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %285) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %292 = icmp slt i32 %18, 4, !dbg !91
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !91
  %294 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %292) #5, !dbg !91
  %295 = bitcast i32 %294 to float, !dbg !91
  %296 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %18, !dbg !91
  %297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %292) #5, !dbg !91
  %298 = bitcast i32 %297 to float, !dbg !91
  %299 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !91
  %300 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %299, i1 %292) #5, !dbg !91
  %301 = bitcast i32 %300 to float, !dbg !91
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !91
  %303 = bitcast i32 %302 to float, !dbg !91
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 2, i32 31), !dbg !91
  %305 = bitcast i32 %304 to float, !dbg !91
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 2, i32 31), !dbg !91
  %307 = bitcast i32 %306 to float, !dbg !91
  %308 = fsub float %303, %295, !dbg !77
  %309 = fadd float %301, %307, !dbg !80
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !81
  %311 = tail call float @llvm.nvvm.div.full(float %307, float %309), !dbg !82
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !83
  %313 = fmul float %308, %312, !dbg !84
  %314 = fadd float %313, %295, !dbg !85
  %315 = fadd float %298, %305, !dbg !86
  %316 = fmul float %308, %308, !dbg !87
  %317 = fmul float %316, %301, !dbg !88
  %318 = fmul float %317, %312, !dbg !89
  %319 = fadd float %315, %318, !dbg !90
  %320 = bitcast float %314 to i32, !dbg !91
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 1, i32 31), !dbg !91
  %322 = bitcast i32 %321 to float, !dbg !91
  %323 = bitcast float %319 to i32, !dbg !91
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !91
  %325 = bitcast i32 %324 to float, !dbg !91
  %326 = bitcast float %309 to i32, !dbg !91
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !91
  %328 = bitcast i32 %327 to float, !dbg !91
  %329 = fsub float %322, %314, !dbg !77
  %330 = fadd float %309, %328, !dbg !80
  %331 = fcmp oeq float %330, 0.000000e+00, !dbg !81
  %332 = tail call float @llvm.nvvm.div.full(float %328, float %330), !dbg !82
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !83
  %334 = fmul float %329, %333, !dbg !84
  %335 = fadd float %314, %334, !dbg !85
  %336 = fadd float %319, %325, !dbg !86
  %337 = fmul float %329, %329, !dbg !87
  %338 = fmul float %309, %337, !dbg !88
  %339 = fmul float %333, %338, !dbg !89
  %340 = fadd float %336, %339, !dbg !90
  %341 = and i32 %18, 3, !dbg !91
  %342 = icmp eq i32 %341, 0, !dbg !91
  %343 = and i1 %292, %342, !dbg !91
  %344 = bitcast float %335 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %344, i1 %343) #5, !dbg !91
  %345 = bitcast float %340 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %345, i1 %343) #5, !dbg !91
  %346 = bitcast float %330 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %346, i1 %343) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %347 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %348 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !91
  %349 = tail call float @llvm.nvvm.div.full(float %348, float 3.072000e+03), !dbg !92
  %350 = fadd float %349, 0x3EB0C6F7A0000000, !dbg !93
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i9 = icmp eq i32 %352, 0, !dbg !94
  br i1 %.not.i9, label %355, label %353, !dbg !94

353:                                              ; preds = %__nv_rsqrtf.exit
  %354 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %350), !dbg !94
  br label %__nv_rsqrtf.exit11, !dbg !94

355:                                              ; preds = %__nv_rsqrtf.exit
  %356 = tail call float @llvm.nvvm.rsqrt.approx.f(float %350), !dbg !94
  br label %__nv_rsqrtf.exit11, !dbg !94

__nv_rsqrtf.exit11:                               ; preds = %353, %355
  %.0.i10 = phi float [ %354, %353 ], [ %356, %355 ], !dbg !94
  %357 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !95
  %358 = shufflevector <2 x i1> %357, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %359 = insertelement <2 x float> poison, float %.0.i10, i64 0, !dbg !96
  %360 = shufflevector <2 x float> %359, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %361 = insertelement <2 x float> poison, float %347, i64 0, !dbg !97
  %362 = shufflevector <2 x float> %361, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  br label %363, !dbg !98

363:                                              ; preds = %__nv_rsqrtf.exit11, %363
  %indvars.iv26 = phi i64 [ 0, %__nv_rsqrtf.exit11 ], [ %indvars.iv.next27, %363 ]
  %364 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit11 ], [ %421, %363 ]
  %365 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit11 ], [ %422, %363 ]
  %366 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit11 ], [ %410, %363 ]
  %367 = or disjoint i64 %indvars.iv26, %46, !dbg !99
  %368 = trunc nuw nsw i64 %367 to i32, !dbg !100
  %369 = add i32 %31, %368, !dbg !100
  %370 = sext i32 %369 to i64, !dbg !101
  %371 = getelementptr bfloat, ptr addrspace(1) %8, i64 %370, !dbg !101
  %372 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %371, i1 %17) #5, !dbg !102
  %373 = bitcast i32 %372 to <2 x bfloat>, !dbg !102
  %374 = or disjoint i64 %367, 12288, !dbg !103
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !104
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !105
  %377 = extractvalue { i32, i32 } %376, 0, !dbg !105
  %378 = extractvalue { i32, i32 } %376, 1, !dbg !105
  %379 = getelementptr bfloat, ptr addrspace(1) %2, i64 %374, !dbg !106
  %380 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %379, i1 true) #5, !dbg !107
  %381 = bitcast i32 %380 to <2 x bfloat>, !dbg !107
  %382 = add nuw nsw i64 %367, 9216, !dbg !108
  %383 = getelementptr float, ptr addrspace(1) %1, i64 %382, !dbg !109
  %384 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %383, i1 true) #5, !dbg !110
  %385 = extractvalue { i32, i32 } %384, 0, !dbg !110
  %386 = extractvalue { i32, i32 } %384, 1, !dbg !110
  %387 = getelementptr bfloat, ptr addrspace(1) %2, i64 %382, !dbg !111
  %388 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %387, i1 true) #5, !dbg !112
  %389 = bitcast i32 %388 to <2 x bfloat>, !dbg !112
  %390 = fcmp uno <2 x float> %366, zeroinitializer, !dbg !113
  %391 = fpext <2 x bfloat> %373 to <2 x float>, !dbg !115
  %392 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !105
  %393 = insertelement <2 x i32> %392, i32 %378, i64 1, !dbg !105
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !105
  %395 = fpext <2 x bfloat> %381 to <2 x float>, !dbg !116
  %396 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !110
  %397 = insertelement <2 x i32> %396, i32 %386, i64 1, !dbg !110
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !110
  %399 = fpext <2 x bfloat> %389 to <2 x float>, !dbg !117
  %400 = fsub <2 x float> %391, %362, !dbg !97
  %401 = fmul <2 x float> %360, %400, !dbg !96
  %402 = fadd <2 x float> %394, %395, !dbg !118
  %403 = fadd <2 x float> %402, splat (float 1.000000e+00), !dbg !119
  %404 = fmul <2 x float> %401, %403, !dbg !120
  %405 = fadd <2 x float> %398, %399, !dbg !121
  %406 = fadd <2 x float> %404, %405, !dbg !122
  %407 = fcmp olt <2 x float> %366, %406, !dbg !123
  %408 = or <2 x i1> %390, %407, !dbg !124
  %409 = select <2 x i1> %408, <2 x float> %366, <2 x float> %406, !dbg !125
  %410 = select <2 x i1> %358, <2 x float> %409, <2 x float> %366, !dbg !95
  %411 = extractelement <2 x float> %406, i64 0, !dbg !126
  %412 = fcmp ogt float %364, %411, !dbg !127
  %413 = extractelement <2 x float> %406, i64 1, !dbg !126
  %414 = fcmp ogt float %365, %413, !dbg !127
  %415 = fcmp uno float %364, 0.000000e+00, !dbg !129
  %416 = fcmp uno float %365, 0.000000e+00, !dbg !129
  %417 = or i1 %415, %412, !dbg !130
  %418 = or i1 %416, %414, !dbg !130
  %419 = select i1 %417, float %364, float %411, !dbg !131
  %420 = select i1 %418, float %365, float %413, !dbg !131
  %421 = select i1 %17, float %419, float %364, !dbg !132
  %422 = select i1 %17, float %420, float %365, !dbg !132
  %423 = getelementptr bfloat, ptr addrspace(1) %9, i64 %370, !dbg !133
  %424 = fptrunc float %411 to bfloat, !dbg !126
  %425 = fptrunc float %413 to bfloat, !dbg !126
  %426 = insertelement <2 x bfloat> poison, bfloat %424, i64 0, !dbg !126
  %427 = insertelement <2 x bfloat> %426, bfloat %425, i64 1, !dbg !126
  %428 = bitcast <2 x bfloat> %427 to i32, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %423, i1 %17) #5, !dbg !126
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 256, !dbg !98
  %429 = icmp samesign ult i64 %indvars.iv26, 2816, !dbg !98
  br i1 %429, label %363, label %430, !dbg !98

430:                                              ; preds = %363
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %431 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %410, <2 x i32> <i32 0, i32 2>, !dbg !136
  %432 = fcmp olt <2 x float> %431, %410, !dbg !136
  %433 = fcmp uno <2 x float> %431, %410, !dbg !136
  %shift = shufflevector <2 x i1> %432, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !137
  %434 = or <2 x i1> %shift, %433, !dbg !137
  %435 = extractelement <2 x i1> %434, i64 0, !dbg !137
  %436 = extractelement <2 x float> %410, i64 0, !dbg !138
  %437 = extractelement <2 x float> %410, i64 1, !dbg !138
  %438 = select i1 %435, float %436, float %437, !dbg !138
  %439 = bitcast float %438 to i32, !dbg !134
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 16, i32 31), !dbg !134
  %441 = bitcast i32 %440 to float, !dbg !134
  %442 = fcmp olt float %438, %441, !dbg !136
  %443 = fcmp uno float %438, 0.000000e+00, !dbg !139
  %444 = or i1 %443, %442, !dbg !137
  %445 = select i1 %444, float %438, float %441, !dbg !138
  %446 = bitcast float %445 to i32, !dbg !134
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !134
  %448 = bitcast i32 %447 to float, !dbg !134
  %449 = fcmp olt float %445, %448, !dbg !136
  %450 = fcmp uno float %445, 0.000000e+00, !dbg !139
  %451 = or i1 %449, %450, !dbg !137
  %452 = select i1 %451, float %445, float %448, !dbg !138
  %453 = bitcast float %452 to i32, !dbg !134
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 4, i32 31), !dbg !134
  %455 = bitcast i32 %454 to float, !dbg !134
  %456 = fcmp olt float %452, %455, !dbg !136
  %457 = fcmp uno float %452, 0.000000e+00, !dbg !139
  %458 = or i1 %456, %457, !dbg !137
  %459 = select i1 %458, float %452, float %455, !dbg !138
  %460 = bitcast float %459 to i32, !dbg !134
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 2, i32 31), !dbg !134
  %462 = bitcast i32 %461 to float, !dbg !134
  %463 = fcmp olt float %459, %462, !dbg !136
  %464 = fcmp uno float %459, 0.000000e+00, !dbg !139
  %465 = or i1 %463, %464, !dbg !137
  %466 = select i1 %465, float %459, float %462, !dbg !138
  %467 = bitcast float %466 to i32, !dbg !134
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 1, i32 31), !dbg !134
  %469 = bitcast i32 %468 to float, !dbg !134
  %470 = fcmp olt float %466, %469, !dbg !136
  %471 = fcmp uno float %466, 0.000000e+00, !dbg !139
  %472 = or i1 %470, %471, !dbg !137
  %473 = select i1 %472, i32 %467, i32 %468, !dbg !138
  %474 = insertelement <1 x i32> poison, i32 %473, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %474, i1 %285) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %475 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %292) #5, !dbg !134
  %476 = bitcast i32 %475 to float, !dbg !134
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 2, i32 31), !dbg !134
  %478 = bitcast i32 %477 to float, !dbg !134
  %479 = fcmp olt float %476, %478, !dbg !136
  %480 = fcmp uno float %476, 0.000000e+00, !dbg !139
  %481 = or i1 %480, %479, !dbg !137
  %482 = select i1 %481, float %476, float %478, !dbg !138
  %483 = bitcast float %482 to i32, !dbg !134
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %483, i32 1, i32 31), !dbg !134
  %485 = bitcast i32 %484 to float, !dbg !134
  %486 = fcmp olt float %482, %485, !dbg !136
  %487 = fcmp uno float %482, 0.000000e+00, !dbg !139
  %488 = or i1 %486, %487, !dbg !137
  %489 = select i1 %488, i32 %483, i32 %484, !dbg !138
  %490 = insertelement <1 x i32> poison, i32 %489, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %490, i1 %343) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %491 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %492 = fcmp ogt float %421, %422, !dbg !142
  %493 = fcmp uno float %421, 0.000000e+00, !dbg !143
  %494 = or i1 %492, %493, !dbg !144
  %495 = select i1 %494, float %421, float %422, !dbg !145
  %496 = bitcast float %495 to i32, !dbg !140
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 16, i32 31), !dbg !140
  %498 = bitcast i32 %497 to float, !dbg !140
  %499 = fcmp ogt float %495, %498, !dbg !142
  %500 = fcmp uno float %495, 0.000000e+00, !dbg !143
  %501 = or i1 %500, %499, !dbg !144
  %502 = select i1 %501, float %495, float %498, !dbg !145
  %503 = bitcast float %502 to i32, !dbg !140
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 8, i32 31), !dbg !140
  %505 = bitcast i32 %504 to float, !dbg !140
  %506 = fcmp ogt float %502, %505, !dbg !142
  %507 = fcmp uno float %502, 0.000000e+00, !dbg !143
  %508 = or i1 %506, %507, !dbg !144
  %509 = select i1 %508, float %502, float %505, !dbg !145
  %510 = bitcast float %509 to i32, !dbg !140
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 4, i32 31), !dbg !140
  %512 = bitcast i32 %511 to float, !dbg !140
  %513 = fcmp ogt float %509, %512, !dbg !142
  %514 = fcmp uno float %509, 0.000000e+00, !dbg !143
  %515 = or i1 %513, %514, !dbg !144
  %516 = select i1 %515, float %509, float %512, !dbg !145
  %517 = bitcast float %516 to i32, !dbg !140
  %518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %517, i32 2, i32 31), !dbg !140
  %519 = bitcast i32 %518 to float, !dbg !140
  %520 = fcmp ogt float %516, %519, !dbg !142
  %521 = fcmp uno float %516, 0.000000e+00, !dbg !143
  %522 = or i1 %520, %521, !dbg !144
  %523 = select i1 %522, float %516, float %519, !dbg !145
  %524 = bitcast float %523 to i32, !dbg !140
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 1, i32 31), !dbg !140
  %526 = bitcast i32 %525 to float, !dbg !140
  %527 = fcmp ogt float %523, %526, !dbg !142
  %528 = fcmp uno float %523, 0.000000e+00, !dbg !143
  %529 = or i1 %527, %528, !dbg !144
  %530 = select i1 %529, i32 %524, i32 %525, !dbg !145
  %531 = insertelement <1 x i32> poison, i32 %530, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %531, i1 %285) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %532 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %292) #5, !dbg !140
  %533 = bitcast i32 %532 to float, !dbg !140
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 2, i32 31), !dbg !140
  %535 = bitcast i32 %534 to float, !dbg !140
  %536 = fcmp ogt float %533, %535, !dbg !142
  %537 = fcmp uno float %533, 0.000000e+00, !dbg !143
  %538 = or i1 %537, %536, !dbg !144
  %539 = select i1 %538, float %533, float %535, !dbg !145
  %540 = bitcast float %539 to i32, !dbg !140
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 1, i32 31), !dbg !140
  %542 = bitcast i32 %541 to float, !dbg !140
  %543 = fcmp ogt float %539, %542, !dbg !142
  %544 = fcmp uno float %539, 0.000000e+00, !dbg !143
  %545 = or i1 %543, %544, !dbg !144
  %546 = select i1 %545, i32 %540, i32 %541, !dbg !145
  %547 = insertelement <1 x i32> poison, i32 %546, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %547, i1 %343) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %548 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %549 = getelementptr bfloat, ptr addrspace(1) %10, i64 %22, !dbg !146
  %550 = fptrunc float %491 to bfloat, !dbg !147
  %551 = and i32 %18, 127, !dbg !147
  %552 = icmp eq i32 %551, 0, !dbg !147
  %553 = bitcast bfloat %550 to i16, !dbg !147
  %554 = and i1 %17, %552, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %553, ptr addrspace(1) %549, i1 %554) #5, !dbg !147
  %555 = getelementptr bfloat, ptr addrspace(1) %11, i64 %22, !dbg !148
  %556 = fptrunc float %548 to bfloat, !dbg !149
  %557 = bitcast bfloat %556 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %557, ptr addrspace(1) %555, i1 %554) #5, !dbg !149
  %.inv4 = fcmp oge float %491, 0.000000e+00, !dbg !150
  %558 = select i1 %.inv4, float 0.000000e+00, float %491, !dbg !150
  %559 = fsub float 0.000000e+00, %558, !dbg !152
  %.inv5 = fcmp ole float %548, 0.000000e+00, !dbg !153
  %560 = select i1 %.inv5, float 0.000000e+00, float %548, !dbg !153
  %561 = fcmp ogt float %559, %560, !dbg !155
  %562 = fcmp uno float %559, 0.000000e+00, !dbg !157
  %563 = or i1 %562, %561, !dbg !158
  %564 = select i1 %563, float %559, float %560, !dbg !159
  %565 = fmul float %564, 0x3F80204080000000, !dbg !160
  %566 = fcmp ogt float %565, 0x3EE4F8B580000000, !dbg !161
  %567 = fcmp uno float %565, 0.000000e+00, !dbg !163
  %568 = or i1 %566, %567, !dbg !164
  %569 = select i1 %568, float %565, float 0x3EE4F8B580000000, !dbg !165
  %570 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %569), !dbg !166
  %571 = or disjoint i32 %21, %31
  br label %572, !dbg !167

572:                                              ; preds = %430, %572
  %indvars.iv28 = phi i64 [ 0, %430 ], [ %indvars.iv.next29, %572 ]
  %573 = trunc nuw nsw i64 %indvars.iv28 to i32, !dbg !168
  %574 = add i32 %571, %573, !dbg !168
  %575 = sext i32 %574 to i64, !dbg !169
  %576 = getelementptr bfloat, ptr addrspace(1) %9, i64 %575, !dbg !169
  %577 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %576, i1 %17) #5, !dbg !170
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !170
  %579 = extractelement <2 x bfloat> %578, i64 0, !dbg !170
  %580 = extractelement <2 x bfloat> %578, i64 1, !dbg !170
  %581 = fpext bfloat %579 to float, !dbg !171
  %582 = fpext bfloat %580 to float, !dbg !171
  %583 = fmul float %570, %581, !dbg !172
  %584 = fmul float %570, %582, !dbg !172
  %585 = tail call float @llvm.nvvm.round.f(float %583) #5, !dbg !173
  %586 = tail call float @llvm.nvvm.round.f(float %584) #5, !dbg !173
  %587 = insertelement <2 x float> poison, float %585, i64 0, !dbg !174
  %588 = insertelement <2 x float> %587, float %586, i64 1, !dbg !174
  %589 = fcmp ogt <2 x float> %588, splat (float -1.270000e+02), !dbg !174
  %590 = fcmp uno <2 x float> %588, zeroinitializer, !dbg !176
  %591 = or <2 x i1> %589, %590, !dbg !177
  %592 = select <2 x i1> %591, <2 x float> %588, <2 x float> splat (float -1.270000e+02), !dbg !178
  %593 = fcmp olt <2 x float> %592, splat (float 1.270000e+02), !dbg !179
  %594 = fcmp uno <2 x float> %592, zeroinitializer, !dbg !181
  %595 = or <2 x i1> %593, %594, !dbg !182
  %596 = fptosi <2 x float> %592 to <2 x i8>, !dbg !183
  %597 = select <2 x i1> %595, <2 x i8> %596, <2 x i8> splat (i8 127), !dbg !184
  %598 = getelementptr i8, ptr addrspace(1) %12, i64 %575, !dbg !185
  %599 = bitcast <2 x i8> %597 to i16, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %599, ptr addrspace(1) %598, i1 %17) #5, !dbg !186
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 256, !dbg !167
  %600 = icmp samesign ult i64 %indvars.iv28, 2816, !dbg !167
  br i1 %600, label %572, label %601, !dbg !167

601:                                              ; preds = %572
  ret void, !dbg !187
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 40, column: 41, scope: !6)
!37 = !DILocation(line: 40, column: 34, scope: !6)
!38 = !DILocation(line: 40, column: 51, scope: !6)
!39 = !DILocation(line: 41, column: 41, scope: !6)
!40 = !DILocation(line: 41, column: 34, scope: !6)
!41 = !DILocation(line: 41, column: 48, scope: !6)
!42 = !DILocation(line: 42, column: 34, scope: !6)
!43 = !DILocation(line: 42, column: 48, scope: !6)
!44 = !DILocation(line: 43, column: 34, scope: !6)
!45 = !DILocation(line: 43, column: 51, scope: !6)
!46 = !DILocation(line: 44, column: 35, scope: !6)
!47 = !DILocation(line: 44, column: 42, scope: !6)
!48 = !DILocation(line: 45, column: 35, scope: !6)
!49 = !DILocation(line: 45, column: 42, scope: !6)
!50 = !DILocation(line: 73, column: 29, scope: !6)
!51 = !DILocation(line: 42, column: 101, scope: !6)
!52 = !DILocation(line: 47, column: 22, scope: !6)
!53 = !DILocation(line: 48, column: 23, scope: !6)
!54 = !DILocation(line: 60, column: 23, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 61, column: 24, scope: !6)
!57 = !DILocation(line: 45, column: 95, scope: !6)
!58 = !DILocation(line: 62, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 23, scope: !6)
!60 = !DILocation(line: 40, column: 113, scope: !6)
!61 = !DILocation(line: 64, column: 23, scope: !6)
!62 = !DILocation(line: 73, column: 53, scope: !6)
!63 = !DILocation(line: 72, column: 68, scope: !6)
!64 = !DILocation(line: 70, column: 64, scope: !6)
!65 = !DILocation(line: 35, column: 31, scope: !6)
!66 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !67)
!67 = !DILocation(line: 68, column: 55, scope: !6)
!68 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !67)
!69 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !67)
!70 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !67)
!71 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !67)
!72 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !67)
!73 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !67)
!74 = !DILocation(line: 71, column: 60, scope: !6)
!75 = distinct !{!75, !76}
!76 = !{!"llvm.loop.peeled.count", i32 1}
!77 = !DILocation(line: 217, column: 21, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 218, column: 28, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 219, column: 39, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 219, column: 60, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 49, scope: !78, inlinedAt: !79)
!84 = !DILocation(line: 221, column: 25, scope: !78, inlinedAt: !79)
!85 = !DILocation(line: 221, column: 17, scope: !78, inlinedAt: !79)
!86 = !DILocation(line: 222, column: 15, scope: !78, inlinedAt: !79)
!87 = !DILocation(line: 222, column: 30, scope: !78, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 38, scope: !78, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 49, scope: !78, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 22, scope: !78, inlinedAt: !79)
!91 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !79)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 110, column: 50, scope: !6)
!96 = !DILocation(line: 98, column: 24, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 81, column: 31, scope: !6)
!100 = !DILocation(line: 86, column: 43, scope: !6)
!101 = !DILocation(line: 86, column: 36, scope: !6)
!102 = !DILocation(line: 86, column: 53, scope: !6)
!103 = !DILocation(line: 87, column: 43, scope: !6)
!104 = !DILocation(line: 87, column: 35, scope: !6)
!105 = !DILocation(line: 87, column: 50, scope: !6)
!106 = !DILocation(line: 88, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 50, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 49, scope: !6)
!111 = !DILocation(line: 90, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 49, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 86, column: 115, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 90, column: 102, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 103, column: 24, scope: !6)
!120 = !DILocation(line: 104, column: 24, scope: !6)
!121 = !DILocation(line: 106, column: 24, scope: !6)
!122 = !DILocation(line: 107, column: 24, scope: !6)
!123 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !114)
!124 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !114)
!125 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !114)
!126 = !DILocation(line: 113, column: 53, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !128)
!128 = !DILocation(line: 111, column: 47, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !128)
!132 = !DILocation(line: 112, column: 50, scope: !6)
!133 = !DILocation(line: 113, column: 29, scope: !6)
!134 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !135)
!135 = !DILocation(line: 114, column: 40, scope: !6)
!136 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !135)
!137 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !135)
!138 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !135)
!139 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !135)
!140 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !141)
!141 = !DILocation(line: 115, column: 40, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !141)
!144 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !141)
!145 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 25, scope: !6)
!147 = !DILocation(line: 116, column: 37, scope: !6)
!148 = !DILocation(line: 117, column: 25, scope: !6)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !151)
!151 = !DILocation(line: 126, column: 46, scope: !6)
!152 = !DILocation(line: 127, column: 17, scope: !6)
!153 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 128, column: 46, scope: !6)
!155 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !156)
!156 = !DILocation(line: 129, column: 46, scope: !6)
!157 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !156)
!158 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !156)
!159 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !156)
!160 = !DILocation(line: 131, column: 24, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !162)
!162 = !DILocation(line: 134, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !162)
!166 = !DILocation(line: 137, column: 25, scope: !6)
!167 = !DILocation(line: 118, column: 40, scope: !6)
!168 = !DILocation(line: 124, column: 43, scope: !6)
!169 = !DILocation(line: 124, column: 36, scope: !6)
!170 = !DILocation(line: 124, column: 53, scope: !6)
!171 = !DILocation(line: 124, column: 115, scope: !6)
!172 = !DILocation(line: 140, column: 24, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 118, column: 4, scope: !6)
