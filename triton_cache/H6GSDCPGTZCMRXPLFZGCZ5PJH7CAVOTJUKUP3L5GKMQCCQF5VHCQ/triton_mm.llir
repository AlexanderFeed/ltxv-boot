; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 256, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 256, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = or disjoint i32 %23, 64, !dbg !19
  %26 = or disjoint i32 %23, 96, !dbg !19
  %27 = shl i32 %15, 3, !dbg !19
  %28 = and i32 %27, 8, !dbg !19
  %29 = and i32 %27, 16, !dbg !19
  %30 = and i32 %27, 24, !dbg !19
  %31 = and i32 %27, 32, !dbg !19
  %32 = and i32 %27, 56, !dbg !19
  %33 = or disjoint i32 %14, %23, !dbg !20
  %34 = or disjoint i32 %14, %24, !dbg !20
  %35 = or disjoint i32 %14, %25, !dbg !20
  %36 = or disjoint i32 %14, %26, !dbg !20
  %37 = shl nsw i32 %13, 7, !dbg !21
  %38 = or disjoint i32 %37, %23, !dbg !22
  %39 = or disjoint i32 %37, %24, !dbg !22
  %40 = or disjoint i32 %37, %25, !dbg !22
  %41 = or disjoint i32 %37, %26, !dbg !22
  %42 = srem i32 %33, 512, !dbg !23
  %43 = srem i32 %34, 512, !dbg !23
  %44 = srem i32 %35, 512, !dbg !23
  %45 = srem i32 %36, 512, !dbg !23
  %46 = srem i32 %38, 4096, !dbg !24
  %.lhs.trunc = trunc i32 %39 to i16, !dbg !24
  %47 = srem i16 %.lhs.trunc, 4096, !dbg !24
  %.sext = sext i16 %47 to i32, !dbg !24
  %.lhs.trunc98 = trunc i32 %40 to i16, !dbg !24
  %48 = srem i16 %.lhs.trunc98, 4096, !dbg !24
  %.sext99 = sext i16 %48 to i32, !dbg !24
  %.lhs.trunc100 = trunc i32 %41 to i16, !dbg !24
  %49 = srem i16 %.lhs.trunc100, 4096, !dbg !24
  %.sext101 = sext i16 %49 to i32, !dbg !24
  %50 = shl nsw i32 %42, 12, !dbg !25
  %51 = shl nsw i32 %43, 12, !dbg !25
  %52 = shl nsw i32 %44, 12, !dbg !25
  %53 = shl nsw i32 %45, 12, !dbg !25
  %54 = shl nsw i32 %46, 12, !dbg !26
  %55 = shl nsw i32 %.sext, 12, !dbg !26
  %56 = shl nsw i32 %.sext99, 12, !dbg !26
  %57 = shl nsw i32 %.sext101, 12, !dbg !26
  %58 = or disjoint i32 %50, %32, !dbg !27
  %59 = or disjoint i32 %51, %32, !dbg !27
  %60 = or disjoint i32 %52, %32, !dbg !27
  %61 = or disjoint i32 %53, %32, !dbg !27
  %62 = sext i32 %58 to i64, !dbg !28
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %59 to i64, !dbg !28
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %60 to i64, !dbg !28
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %61 to i64, !dbg !28
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !28
  %and.ra = and i32 %15, 24, !dbg !29
  %70 = xor i32 %32, %and.ra, !dbg !29
  %71 = xor i32 %70, %18, !dbg !29
  %72 = shl nuw nsw i32 %23, 6, !dbg !29
  %73 = or disjoint i32 %71, %72, !dbg !29
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %73, !dbg !29
  %75 = or disjoint i32 %73, 2048, !dbg !29
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75, !dbg !29
  %77 = or disjoint i32 %73, 4096, !dbg !29
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77, !dbg !29
  %79 = or disjoint i32 %73, 6144, !dbg !29
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %79, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %63, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %76, ptr addrspace(1) %65, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %67, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %69, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %81 = or disjoint i32 %54, %32, !dbg !30
  %82 = or disjoint i32 %55, %32, !dbg !30
  %83 = or disjoint i32 %56, %32, !dbg !30
  %84 = or disjoint i32 %57, %32, !dbg !30
  %85 = sext i32 %81 to i64, !dbg !31
  %86 = getelementptr bfloat, ptr addrspace(1) %1, i64 %85, !dbg !31
  %87 = sext i32 %82 to i64, !dbg !31
  %88 = getelementptr bfloat, ptr addrspace(1) %1, i64 %87, !dbg !31
  %89 = sext i32 %83 to i64, !dbg !31
  %90 = getelementptr bfloat, ptr addrspace(1) %1, i64 %89, !dbg !31
  %91 = sext i32 %84 to i64, !dbg !31
  %92 = getelementptr bfloat, ptr addrspace(1) %1, i64 %91, !dbg !31
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %73, !dbg !32
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %75, !dbg !32
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %77, !dbg !32
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %79, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %93, ptr addrspace(1) %86, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %88, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %90, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %92, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %97 = or disjoint i32 %32, 64, !dbg !33
  %98 = or disjoint i32 %50, %97, !dbg !27
  %99 = or disjoint i32 %51, %97, !dbg !27
  %100 = or disjoint i32 %52, %97, !dbg !27
  %101 = or disjoint i32 %53, %97, !dbg !27
  %102 = sext i32 %98 to i64, !dbg !28
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !28
  %104 = sext i32 %99 to i64, !dbg !28
  %105 = getelementptr bfloat, ptr addrspace(1) %0, i64 %104, !dbg !28
  %106 = sext i32 %100 to i64, !dbg !28
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !28
  %108 = sext i32 %101 to i64, !dbg !28
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %73, !dbg !29
  %111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %75, !dbg !29
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %77, !dbg !29
  %113 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %79, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %103, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %111, ptr addrspace(1) %105, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %107, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %113, ptr addrspace(1) %109, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %114 = or disjoint i32 %54, %97, !dbg !30
  %115 = or disjoint i32 %55, %97, !dbg !30
  %116 = or disjoint i32 %56, %97, !dbg !30
  %117 = or disjoint i32 %57, %97, !dbg !30
  %118 = sext i32 %114 to i64, !dbg !31
  %119 = getelementptr bfloat, ptr addrspace(1) %1, i64 %118, !dbg !31
  %120 = sext i32 %115 to i64, !dbg !31
  %121 = getelementptr bfloat, ptr addrspace(1) %1, i64 %120, !dbg !31
  %122 = sext i32 %116 to i64, !dbg !31
  %123 = getelementptr bfloat, ptr addrspace(1) %1, i64 %122, !dbg !31
  %124 = sext i32 %117 to i64, !dbg !31
  %125 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !31
  %126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %73, !dbg !32
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %75, !dbg !32
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %77, !dbg !32
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %79, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %126, ptr addrspace(1) %119, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %121, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %123, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %129, ptr addrspace(1) %125, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %130 = or disjoint i32 %32, 128, !dbg !33
  %131 = or disjoint i32 %50, %130, !dbg !27
  %132 = or disjoint i32 %51, %130, !dbg !27
  %133 = or disjoint i32 %52, %130, !dbg !27
  %134 = or disjoint i32 %53, %130, !dbg !27
  %135 = sext i32 %131 to i64, !dbg !28
  %136 = getelementptr bfloat, ptr addrspace(1) %0, i64 %135, !dbg !28
  %137 = sext i32 %132 to i64, !dbg !28
  %138 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !28
  %139 = sext i32 %133 to i64, !dbg !28
  %140 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !28
  %141 = sext i32 %134 to i64, !dbg !28
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %143 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %73, !dbg !29
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %75, !dbg !29
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %77, !dbg !29
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %79, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %143, ptr addrspace(1) %136, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %138, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %145, ptr addrspace(1) %140, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %142, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %147 = or disjoint i32 %54, %130, !dbg !30
  %148 = or disjoint i32 %55, %130, !dbg !30
  %149 = or disjoint i32 %56, %130, !dbg !30
  %150 = or disjoint i32 %57, %130, !dbg !30
  %151 = sext i32 %147 to i64, !dbg !31
  %152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !31
  %153 = sext i32 %148 to i64, !dbg !31
  %154 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !31
  %155 = sext i32 %149 to i64, !dbg !31
  %156 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !31
  %157 = sext i32 %150 to i64, !dbg !31
  %158 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !31
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %73, !dbg !32
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %75, !dbg !32
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %77, !dbg !32
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %79, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %159, ptr addrspace(1) %152, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %154, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %161, ptr addrspace(1) %156, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %162, ptr addrspace(1) %158, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %163 = or disjoint i32 %32, 192, !dbg !33
  %164 = or disjoint i32 %50, %163, !dbg !27
  %165 = or disjoint i32 %51, %163, !dbg !27
  %166 = or disjoint i32 %52, %163, !dbg !27
  %167 = or disjoint i32 %53, %163, !dbg !27
  %168 = sext i32 %164 to i64, !dbg !28
  %169 = getelementptr bfloat, ptr addrspace(1) %0, i64 %168, !dbg !28
  %170 = sext i32 %165 to i64, !dbg !28
  %171 = getelementptr bfloat, ptr addrspace(1) %0, i64 %170, !dbg !28
  %172 = sext i32 %166 to i64, !dbg !28
  %173 = getelementptr bfloat, ptr addrspace(1) %0, i64 %172, !dbg !28
  %174 = sext i32 %167 to i64, !dbg !28
  %175 = getelementptr bfloat, ptr addrspace(1) %0, i64 %174, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %73, !dbg !29
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %75, !dbg !29
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %77, !dbg !29
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %79, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %176, ptr addrspace(1) %169, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %171, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %173, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %175, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %180 = or disjoint i32 %54, %163, !dbg !30
  %181 = or disjoint i32 %55, %163, !dbg !30
  %182 = or disjoint i32 %56, %163, !dbg !30
  %183 = or disjoint i32 %57, %163, !dbg !30
  %184 = sext i32 %180 to i64, !dbg !31
  %185 = getelementptr bfloat, ptr addrspace(1) %1, i64 %184, !dbg !31
  %186 = sext i32 %181 to i64, !dbg !31
  %187 = getelementptr bfloat, ptr addrspace(1) %1, i64 %186, !dbg !31
  %188 = sext i32 %182 to i64, !dbg !31
  %189 = getelementptr bfloat, ptr addrspace(1) %1, i64 %188, !dbg !31
  %190 = sext i32 %183 to i64, !dbg !31
  %191 = getelementptr bfloat, ptr addrspace(1) %1, i64 %190, !dbg !31
  %192 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %73, !dbg !32
  %193 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %75, !dbg !32
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %77, !dbg !32
  %195 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %79, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %192, ptr addrspace(1) %185, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %193, ptr addrspace(1) %187, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %194, ptr addrspace(1) %189, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %195, ptr addrspace(1) %191, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %22, !dbg !34
  %invariant.op167 = or disjoint i32 %invariant.op, 32, !dbg !34
  %invariant.op170 = or disjoint i32 %invariant.op, 64, !dbg !34
  %invariant.op173 = or disjoint i32 %invariant.op, 96, !dbg !34
  %invariant.op175 = or disjoint i32 %32, 256, !dbg !34
  %196 = and i32 %15, 7
  %197 = and i32 %15, 15
  %198 = lshr exact i32 %17, 1
  %199 = xor i32 %32, %198
  %200 = or disjoint i32 %22, %197
  %201 = shl nuw nsw i32 %200, 6
  %202 = or disjoint i32 %201, %199
  %203 = or disjoint i32 %28, 16
  %204 = xor i32 %203, %29
  %205 = or disjoint i32 %204, %31
  %206 = xor i32 %205, %198
  %207 = or disjoint i32 %206, %201
  %208 = or disjoint i32 %30, 32
  %209 = xor i32 %208, %31
  %210 = xor i32 %209, %198
  %211 = or disjoint i32 %210, %201
  %212 = or disjoint i32 %28, 48
  %and.ra165 = and i32 %27, 48
  %213 = or disjoint i32 %198, %and.ra165
  %214 = xor i32 %213, %212
  %215 = or disjoint i32 %214, %201
  %216 = or disjoint i32 %196, 32
  %.reass168 = or disjoint i32 %196, %invariant.op167
  %217 = shl nuw nsw i32 %.reass168, 6
  %218 = or disjoint i32 %217, %199
  %219 = or disjoint i32 %206, %217
  %220 = or disjoint i32 %210, %217
  %221 = or disjoint i32 %214, %217
  %222 = or disjoint i32 %196, 64
  %.reass171 = or disjoint i32 %196, %invariant.op170
  %223 = shl nuw nsw i32 %.reass171, 6
  %224 = or disjoint i32 %223, %199
  %225 = or disjoint i32 %206, %223
  %226 = or disjoint i32 %210, %223
  %227 = or disjoint i32 %214, %223
  %228 = or disjoint i32 %196, 96
  %.reass174 = or disjoint i32 %196, %invariant.op173
  %229 = shl nuw nsw i32 %.reass174, 6
  %230 = or disjoint i32 %229, %199
  %231 = or disjoint i32 %206, %229
  %232 = or disjoint i32 %210, %229
  %233 = or disjoint i32 %214, %229
  %234 = lshr exact i32 %18, 2
  %235 = lshr i32 %15, 2
  %236 = and i32 %235, 16
  %237 = or disjoint i32 %236, %234
  %238 = or disjoint i32 %237, %196
  %239 = shl nuw nsw i32 %238, 6
  %240 = or disjoint i32 %239, %70
  %241 = xor i32 %209, %and.ra
  %242 = or disjoint i32 %241, %239
  %243 = or disjoint i32 %234, %216
  %244 = or disjoint i32 %243, %236
  %245 = shl nuw nsw i32 %244, 6
  %246 = or disjoint i32 %245, %70
  %247 = or disjoint i32 %241, %245
  %248 = or disjoint i32 %234, %222
  %249 = or disjoint i32 %248, %236
  %250 = shl nuw nsw i32 %249, 6
  %251 = or disjoint i32 %250, %70
  %252 = or disjoint i32 %241, %250
  %253 = or disjoint i32 %234, %228
  %254 = or disjoint i32 %253, %236
  %255 = shl nuw nsw i32 %254, 6
  %256 = or disjoint i32 %255, %70
  %257 = or disjoint i32 %241, %255
  %258 = zext nneg i32 %invariant.op175 to i64, !dbg !34
  %259 = sext i32 %57 to i64, !dbg !34
  %260 = sext i32 %56 to i64, !dbg !34
  %261 = sext i32 %55 to i64, !dbg !34
  %262 = sext i32 %54 to i64, !dbg !34
  %263 = sext i32 %53 to i64, !dbg !34
  %264 = sext i32 %52 to i64, !dbg !34
  %265 = sext i32 %51 to i64, !dbg !34
  %266 = sext i32 %50 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %266, !dbg !34
  %invariant.gep303 = getelementptr bfloat, ptr addrspace(1) %0, i64 %265, !dbg !34
  %invariant.gep305 = getelementptr bfloat, ptr addrspace(1) %0, i64 %264, !dbg !34
  %invariant.gep307 = getelementptr bfloat, ptr addrspace(1) %0, i64 %263, !dbg !34
  %invariant.gep309 = getelementptr bfloat, ptr addrspace(1) %1, i64 %262, !dbg !34
  %invariant.gep311 = getelementptr bfloat, ptr addrspace(1) %1, i64 %261, !dbg !34
  %invariant.gep313 = getelementptr bfloat, ptr addrspace(1) %1, i64 %260, !dbg !34
  %invariant.gep315 = getelementptr bfloat, ptr addrspace(1) %1, i64 %259, !dbg !34
  br label %267, !dbg !34

267:                                              ; preds = %4, %267
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %267 ]
  %268 = phi i32 [ -1, %4 ], [ %337, %267 ]
  %269 = phi i32 [ 3, %4 ], [ %831, %267 ]
  %270 = phi float [ 0.000000e+00, %4 ], [ %750, %267 ]
  %271 = phi float [ 0.000000e+00, %4 ], [ %751, %267 ]
  %272 = phi float [ 0.000000e+00, %4 ], [ %752, %267 ]
  %273 = phi float [ 0.000000e+00, %4 ], [ %753, %267 ]
  %274 = phi float [ 0.000000e+00, %4 ], [ %755, %267 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %756, %267 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %757, %267 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %758, %267 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %760, %267 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %761, %267 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %762, %267 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %763, %267 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %765, %267 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %766, %267 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %767, %267 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %768, %267 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %770, %267 ]
  %287 = phi float [ 0.000000e+00, %4 ], [ %771, %267 ]
  %288 = phi float [ 0.000000e+00, %4 ], [ %772, %267 ]
  %289 = phi float [ 0.000000e+00, %4 ], [ %773, %267 ]
  %290 = phi float [ 0.000000e+00, %4 ], [ %775, %267 ]
  %291 = phi float [ 0.000000e+00, %4 ], [ %776, %267 ]
  %292 = phi float [ 0.000000e+00, %4 ], [ %777, %267 ]
  %293 = phi float [ 0.000000e+00, %4 ], [ %778, %267 ]
  %294 = phi float [ 0.000000e+00, %4 ], [ %780, %267 ]
  %295 = phi float [ 0.000000e+00, %4 ], [ %781, %267 ]
  %296 = phi float [ 0.000000e+00, %4 ], [ %782, %267 ]
  %297 = phi float [ 0.000000e+00, %4 ], [ %783, %267 ]
  %298 = phi float [ 0.000000e+00, %4 ], [ %785, %267 ]
  %299 = phi float [ 0.000000e+00, %4 ], [ %786, %267 ]
  %300 = phi float [ 0.000000e+00, %4 ], [ %787, %267 ]
  %301 = phi float [ 0.000000e+00, %4 ], [ %788, %267 ]
  %302 = phi float [ 0.000000e+00, %4 ], [ %790, %267 ]
  %303 = phi float [ 0.000000e+00, %4 ], [ %791, %267 ]
  %304 = phi float [ 0.000000e+00, %4 ], [ %792, %267 ]
  %305 = phi float [ 0.000000e+00, %4 ], [ %793, %267 ]
  %306 = phi float [ 0.000000e+00, %4 ], [ %795, %267 ]
  %307 = phi float [ 0.000000e+00, %4 ], [ %796, %267 ]
  %308 = phi float [ 0.000000e+00, %4 ], [ %797, %267 ]
  %309 = phi float [ 0.000000e+00, %4 ], [ %798, %267 ]
  %310 = phi float [ 0.000000e+00, %4 ], [ %800, %267 ]
  %311 = phi float [ 0.000000e+00, %4 ], [ %801, %267 ]
  %312 = phi float [ 0.000000e+00, %4 ], [ %802, %267 ]
  %313 = phi float [ 0.000000e+00, %4 ], [ %803, %267 ]
  %314 = phi float [ 0.000000e+00, %4 ], [ %805, %267 ]
  %315 = phi float [ 0.000000e+00, %4 ], [ %806, %267 ]
  %316 = phi float [ 0.000000e+00, %4 ], [ %807, %267 ]
  %317 = phi float [ 0.000000e+00, %4 ], [ %808, %267 ]
  %318 = phi float [ 0.000000e+00, %4 ], [ %810, %267 ]
  %319 = phi float [ 0.000000e+00, %4 ], [ %811, %267 ]
  %320 = phi float [ 0.000000e+00, %4 ], [ %812, %267 ]
  %321 = phi float [ 0.000000e+00, %4 ], [ %813, %267 ]
  %322 = phi float [ 0.000000e+00, %4 ], [ %815, %267 ]
  %323 = phi float [ 0.000000e+00, %4 ], [ %816, %267 ]
  %324 = phi float [ 0.000000e+00, %4 ], [ %817, %267 ]
  %325 = phi float [ 0.000000e+00, %4 ], [ %818, %267 ]
  %326 = phi float [ 0.000000e+00, %4 ], [ %820, %267 ]
  %327 = phi float [ 0.000000e+00, %4 ], [ %821, %267 ]
  %328 = phi float [ 0.000000e+00, %4 ], [ %822, %267 ]
  %329 = phi float [ 0.000000e+00, %4 ], [ %823, %267 ]
  %330 = phi float [ 0.000000e+00, %4 ], [ %825, %267 ]
  %331 = phi float [ 0.000000e+00, %4 ], [ %826, %267 ]
  %332 = phi float [ 0.000000e+00, %4 ], [ %827, %267 ]
  %333 = phi float [ 0.000000e+00, %4 ], [ %828, %267 ]
  %334 = icmp samesign ult i64 %indvars.iv, 60, !dbg !34
  %335 = add i32 %268, 1, !dbg !34
  %336 = icmp slt i32 %335, 4, !dbg !34
  %337 = select i1 %336, i32 %335, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %338 = shl i32 %337, 13, !dbg !29
  %339 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %338, !dbg !29
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %202, !dbg !29
  %341 = ptrtoint ptr addrspace(3) %340 to i32, !dbg !29
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %341) #1, !dbg !29
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !29
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !29
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !29
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !29
  %347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %207, !dbg !29
  %348 = ptrtoint ptr addrspace(3) %347 to i32, !dbg !29
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %348) #1, !dbg !29
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !29
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !29
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !29
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !29
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %211, !dbg !29
  %355 = ptrtoint ptr addrspace(3) %354 to i32, !dbg !29
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %355) #1, !dbg !29
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !29
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !29
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !29
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !29
  %361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %215, !dbg !29
  %362 = ptrtoint ptr addrspace(3) %361 to i32, !dbg !29
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %362) #1, !dbg !29
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !29
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !29
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !29
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !29
  %368 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %218, !dbg !29
  %369 = ptrtoint ptr addrspace(3) %368 to i32, !dbg !29
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %369) #1, !dbg !29
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !29
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !29
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !29
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !29
  %375 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %219, !dbg !29
  %376 = ptrtoint ptr addrspace(3) %375 to i32, !dbg !29
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #1, !dbg !29
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !29
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !29
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !29
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !29
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %220, !dbg !29
  %383 = ptrtoint ptr addrspace(3) %382 to i32, !dbg !29
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %383) #1, !dbg !29
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !29
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !29
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !29
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !29
  %389 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %221, !dbg !29
  %390 = ptrtoint ptr addrspace(3) %389 to i32, !dbg !29
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %390) #1, !dbg !29
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !29
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !29
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !29
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !29
  %396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %224, !dbg !29
  %397 = ptrtoint ptr addrspace(3) %396 to i32, !dbg !29
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %397) #1, !dbg !29
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !29
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !29
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !29
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !29
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %225, !dbg !29
  %404 = ptrtoint ptr addrspace(3) %403 to i32, !dbg !29
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #1, !dbg !29
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !29
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !29
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !29
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !29
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %226, !dbg !29
  %411 = ptrtoint ptr addrspace(3) %410 to i32, !dbg !29
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #1, !dbg !29
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !29
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !29
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !29
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !29
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %227, !dbg !29
  %418 = ptrtoint ptr addrspace(3) %417 to i32, !dbg !29
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %418) #1, !dbg !29
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !29
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !29
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !29
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !29
  %424 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %230, !dbg !29
  %425 = ptrtoint ptr addrspace(3) %424 to i32, !dbg !29
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %425) #1, !dbg !29
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !29
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !29
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !29
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !29
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %231, !dbg !29
  %432 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !29
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #1, !dbg !29
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !29
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !29
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !29
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !29
  %438 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %232, !dbg !29
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !29
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #1, !dbg !29
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !29
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !29
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !29
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !29
  %445 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %339, i32 %233, !dbg !29
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !29
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #1, !dbg !29
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !29
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !29
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !29
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !29
  %452 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %338, !dbg !32
  %453 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %240, !dbg !32
  %454 = ptrtoint ptr addrspace(3) %453 to i32, !dbg !32
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %454) #1, !dbg !32
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !32
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !32
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !32
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !32
  %460 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %242, !dbg !32
  %461 = ptrtoint ptr addrspace(3) %460 to i32, !dbg !32
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %461) #1, !dbg !32
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !32
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !32
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !32
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !32
  %467 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %246, !dbg !32
  %468 = ptrtoint ptr addrspace(3) %467 to i32, !dbg !32
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %468) #1, !dbg !32
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !32
  %471 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !32
  %472 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !32
  %473 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !32
  %474 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %247, !dbg !32
  %475 = ptrtoint ptr addrspace(3) %474 to i32, !dbg !32
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %475) #1, !dbg !32
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !32
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !32
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !32
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !32
  %481 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %251, !dbg !32
  %482 = ptrtoint ptr addrspace(3) %481 to i32, !dbg !32
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %482) #1, !dbg !32
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !32
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !32
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !32
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !32
  %488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %252, !dbg !32
  %489 = ptrtoint ptr addrspace(3) %488 to i32, !dbg !32
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #1, !dbg !32
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !32
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !32
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !32
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !32
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %256, !dbg !32
  %496 = ptrtoint ptr addrspace(3) %495 to i32, !dbg !32
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %496) #1, !dbg !32
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !32
  %499 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !32
  %500 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !32
  %501 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !32
  %502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %452, i32 %257, !dbg !32
  %503 = ptrtoint ptr addrspace(3) %502 to i32, !dbg !32
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %503) #1, !dbg !32
  %505 = extractvalue { i32, i32, i32, i32 } %504, 0, !dbg !32
  %506 = extractvalue { i32, i32, i32, i32 } %504, 1, !dbg !32
  %507 = extractvalue { i32, i32, i32, i32 } %504, 2, !dbg !32
  %508 = extractvalue { i32, i32, i32, i32 } %504, 3, !dbg !32
  %509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %270, float %271, float %272, float %273, i32 %343, i32 %344, i32 %345, i32 %346, i32 %456, i32 %457) #1, !dbg !35
  %510 = extractvalue { float, float, float, float } %509, 0, !dbg !35
  %511 = extractvalue { float, float, float, float } %509, 1, !dbg !35
  %512 = extractvalue { float, float, float, float } %509, 2, !dbg !35
  %513 = extractvalue { float, float, float, float } %509, 3, !dbg !35
  %514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %274, float %275, float %276, float %277, i32 %343, i32 %344, i32 %345, i32 %346, i32 %470, i32 %471) #1, !dbg !35
  %515 = extractvalue { float, float, float, float } %514, 0, !dbg !35
  %516 = extractvalue { float, float, float, float } %514, 1, !dbg !35
  %517 = extractvalue { float, float, float, float } %514, 2, !dbg !35
  %518 = extractvalue { float, float, float, float } %514, 3, !dbg !35
  %519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %278, float %279, float %280, float %281, i32 %343, i32 %344, i32 %345, i32 %346, i32 %484, i32 %485) #1, !dbg !35
  %520 = extractvalue { float, float, float, float } %519, 0, !dbg !35
  %521 = extractvalue { float, float, float, float } %519, 1, !dbg !35
  %522 = extractvalue { float, float, float, float } %519, 2, !dbg !35
  %523 = extractvalue { float, float, float, float } %519, 3, !dbg !35
  %524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %343, i32 %344, i32 %345, i32 %346, i32 %498, i32 %499) #1, !dbg !35
  %525 = extractvalue { float, float, float, float } %524, 0, !dbg !35
  %526 = extractvalue { float, float, float, float } %524, 1, !dbg !35
  %527 = extractvalue { float, float, float, float } %524, 2, !dbg !35
  %528 = extractvalue { float, float, float, float } %524, 3, !dbg !35
  %529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %286, float %287, float %288, float %289, i32 %371, i32 %372, i32 %373, i32 %374, i32 %456, i32 %457) #1, !dbg !35
  %530 = extractvalue { float, float, float, float } %529, 0, !dbg !35
  %531 = extractvalue { float, float, float, float } %529, 1, !dbg !35
  %532 = extractvalue { float, float, float, float } %529, 2, !dbg !35
  %533 = extractvalue { float, float, float, float } %529, 3, !dbg !35
  %534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %290, float %291, float %292, float %293, i32 %371, i32 %372, i32 %373, i32 %374, i32 %470, i32 %471) #1, !dbg !35
  %535 = extractvalue { float, float, float, float } %534, 0, !dbg !35
  %536 = extractvalue { float, float, float, float } %534, 1, !dbg !35
  %537 = extractvalue { float, float, float, float } %534, 2, !dbg !35
  %538 = extractvalue { float, float, float, float } %534, 3, !dbg !35
  %539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %294, float %295, float %296, float %297, i32 %371, i32 %372, i32 %373, i32 %374, i32 %484, i32 %485) #1, !dbg !35
  %540 = extractvalue { float, float, float, float } %539, 0, !dbg !35
  %541 = extractvalue { float, float, float, float } %539, 1, !dbg !35
  %542 = extractvalue { float, float, float, float } %539, 2, !dbg !35
  %543 = extractvalue { float, float, float, float } %539, 3, !dbg !35
  %544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %371, i32 %372, i32 %373, i32 %374, i32 %498, i32 %499) #1, !dbg !35
  %545 = extractvalue { float, float, float, float } %544, 0, !dbg !35
  %546 = extractvalue { float, float, float, float } %544, 1, !dbg !35
  %547 = extractvalue { float, float, float, float } %544, 2, !dbg !35
  %548 = extractvalue { float, float, float, float } %544, 3, !dbg !35
  %549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %399, i32 %400, i32 %401, i32 %402, i32 %456, i32 %457) #1, !dbg !35
  %550 = extractvalue { float, float, float, float } %549, 0, !dbg !35
  %551 = extractvalue { float, float, float, float } %549, 1, !dbg !35
  %552 = extractvalue { float, float, float, float } %549, 2, !dbg !35
  %553 = extractvalue { float, float, float, float } %549, 3, !dbg !35
  %554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %399, i32 %400, i32 %401, i32 %402, i32 %470, i32 %471) #1, !dbg !35
  %555 = extractvalue { float, float, float, float } %554, 0, !dbg !35
  %556 = extractvalue { float, float, float, float } %554, 1, !dbg !35
  %557 = extractvalue { float, float, float, float } %554, 2, !dbg !35
  %558 = extractvalue { float, float, float, float } %554, 3, !dbg !35
  %559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %399, i32 %400, i32 %401, i32 %402, i32 %484, i32 %485) #1, !dbg !35
  %560 = extractvalue { float, float, float, float } %559, 0, !dbg !35
  %561 = extractvalue { float, float, float, float } %559, 1, !dbg !35
  %562 = extractvalue { float, float, float, float } %559, 2, !dbg !35
  %563 = extractvalue { float, float, float, float } %559, 3, !dbg !35
  %564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %399, i32 %400, i32 %401, i32 %402, i32 %498, i32 %499) #1, !dbg !35
  %565 = extractvalue { float, float, float, float } %564, 0, !dbg !35
  %566 = extractvalue { float, float, float, float } %564, 1, !dbg !35
  %567 = extractvalue { float, float, float, float } %564, 2, !dbg !35
  %568 = extractvalue { float, float, float, float } %564, 3, !dbg !35
  %569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %427, i32 %428, i32 %429, i32 %430, i32 %456, i32 %457) #1, !dbg !35
  %570 = extractvalue { float, float, float, float } %569, 0, !dbg !35
  %571 = extractvalue { float, float, float, float } %569, 1, !dbg !35
  %572 = extractvalue { float, float, float, float } %569, 2, !dbg !35
  %573 = extractvalue { float, float, float, float } %569, 3, !dbg !35
  %574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %427, i32 %428, i32 %429, i32 %430, i32 %470, i32 %471) #1, !dbg !35
  %575 = extractvalue { float, float, float, float } %574, 0, !dbg !35
  %576 = extractvalue { float, float, float, float } %574, 1, !dbg !35
  %577 = extractvalue { float, float, float, float } %574, 2, !dbg !35
  %578 = extractvalue { float, float, float, float } %574, 3, !dbg !35
  %579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %427, i32 %428, i32 %429, i32 %430, i32 %484, i32 %485) #1, !dbg !35
  %580 = extractvalue { float, float, float, float } %579, 0, !dbg !35
  %581 = extractvalue { float, float, float, float } %579, 1, !dbg !35
  %582 = extractvalue { float, float, float, float } %579, 2, !dbg !35
  %583 = extractvalue { float, float, float, float } %579, 3, !dbg !35
  %584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %427, i32 %428, i32 %429, i32 %430, i32 %498, i32 %499) #1, !dbg !35
  %585 = extractvalue { float, float, float, float } %584, 0, !dbg !35
  %586 = extractvalue { float, float, float, float } %584, 1, !dbg !35
  %587 = extractvalue { float, float, float, float } %584, 2, !dbg !35
  %588 = extractvalue { float, float, float, float } %584, 3, !dbg !35
  %589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %510, float %511, float %512, float %513, i32 %350, i32 %351, i32 %352, i32 %353, i32 %458, i32 %459) #1, !dbg !35
  %590 = extractvalue { float, float, float, float } %589, 0, !dbg !35
  %591 = extractvalue { float, float, float, float } %589, 1, !dbg !35
  %592 = extractvalue { float, float, float, float } %589, 2, !dbg !35
  %593 = extractvalue { float, float, float, float } %589, 3, !dbg !35
  %594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %515, float %516, float %517, float %518, i32 %350, i32 %351, i32 %352, i32 %353, i32 %472, i32 %473) #1, !dbg !35
  %595 = extractvalue { float, float, float, float } %594, 0, !dbg !35
  %596 = extractvalue { float, float, float, float } %594, 1, !dbg !35
  %597 = extractvalue { float, float, float, float } %594, 2, !dbg !35
  %598 = extractvalue { float, float, float, float } %594, 3, !dbg !35
  %599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %520, float %521, float %522, float %523, i32 %350, i32 %351, i32 %352, i32 %353, i32 %486, i32 %487) #1, !dbg !35
  %600 = extractvalue { float, float, float, float } %599, 0, !dbg !35
  %601 = extractvalue { float, float, float, float } %599, 1, !dbg !35
  %602 = extractvalue { float, float, float, float } %599, 2, !dbg !35
  %603 = extractvalue { float, float, float, float } %599, 3, !dbg !35
  %604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %350, i32 %351, i32 %352, i32 %353, i32 %500, i32 %501) #1, !dbg !35
  %605 = extractvalue { float, float, float, float } %604, 0, !dbg !35
  %606 = extractvalue { float, float, float, float } %604, 1, !dbg !35
  %607 = extractvalue { float, float, float, float } %604, 2, !dbg !35
  %608 = extractvalue { float, float, float, float } %604, 3, !dbg !35
  %609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %530, float %531, float %532, float %533, i32 %378, i32 %379, i32 %380, i32 %381, i32 %458, i32 %459) #1, !dbg !35
  %610 = extractvalue { float, float, float, float } %609, 0, !dbg !35
  %611 = extractvalue { float, float, float, float } %609, 1, !dbg !35
  %612 = extractvalue { float, float, float, float } %609, 2, !dbg !35
  %613 = extractvalue { float, float, float, float } %609, 3, !dbg !35
  %614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %535, float %536, float %537, float %538, i32 %378, i32 %379, i32 %380, i32 %381, i32 %472, i32 %473) #1, !dbg !35
  %615 = extractvalue { float, float, float, float } %614, 0, !dbg !35
  %616 = extractvalue { float, float, float, float } %614, 1, !dbg !35
  %617 = extractvalue { float, float, float, float } %614, 2, !dbg !35
  %618 = extractvalue { float, float, float, float } %614, 3, !dbg !35
  %619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %540, float %541, float %542, float %543, i32 %378, i32 %379, i32 %380, i32 %381, i32 %486, i32 %487) #1, !dbg !35
  %620 = extractvalue { float, float, float, float } %619, 0, !dbg !35
  %621 = extractvalue { float, float, float, float } %619, 1, !dbg !35
  %622 = extractvalue { float, float, float, float } %619, 2, !dbg !35
  %623 = extractvalue { float, float, float, float } %619, 3, !dbg !35
  %624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %378, i32 %379, i32 %380, i32 %381, i32 %500, i32 %501) #1, !dbg !35
  %625 = extractvalue { float, float, float, float } %624, 0, !dbg !35
  %626 = extractvalue { float, float, float, float } %624, 1, !dbg !35
  %627 = extractvalue { float, float, float, float } %624, 2, !dbg !35
  %628 = extractvalue { float, float, float, float } %624, 3, !dbg !35
  %629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %550, float %551, float %552, float %553, i32 %406, i32 %407, i32 %408, i32 %409, i32 %458, i32 %459) #1, !dbg !35
  %630 = extractvalue { float, float, float, float } %629, 0, !dbg !35
  %631 = extractvalue { float, float, float, float } %629, 1, !dbg !35
  %632 = extractvalue { float, float, float, float } %629, 2, !dbg !35
  %633 = extractvalue { float, float, float, float } %629, 3, !dbg !35
  %634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %555, float %556, float %557, float %558, i32 %406, i32 %407, i32 %408, i32 %409, i32 %472, i32 %473) #1, !dbg !35
  %635 = extractvalue { float, float, float, float } %634, 0, !dbg !35
  %636 = extractvalue { float, float, float, float } %634, 1, !dbg !35
  %637 = extractvalue { float, float, float, float } %634, 2, !dbg !35
  %638 = extractvalue { float, float, float, float } %634, 3, !dbg !35
  %639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %560, float %561, float %562, float %563, i32 %406, i32 %407, i32 %408, i32 %409, i32 %486, i32 %487) #1, !dbg !35
  %640 = extractvalue { float, float, float, float } %639, 0, !dbg !35
  %641 = extractvalue { float, float, float, float } %639, 1, !dbg !35
  %642 = extractvalue { float, float, float, float } %639, 2, !dbg !35
  %643 = extractvalue { float, float, float, float } %639, 3, !dbg !35
  %644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %406, i32 %407, i32 %408, i32 %409, i32 %500, i32 %501) #1, !dbg !35
  %645 = extractvalue { float, float, float, float } %644, 0, !dbg !35
  %646 = extractvalue { float, float, float, float } %644, 1, !dbg !35
  %647 = extractvalue { float, float, float, float } %644, 2, !dbg !35
  %648 = extractvalue { float, float, float, float } %644, 3, !dbg !35
  %649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %570, float %571, float %572, float %573, i32 %434, i32 %435, i32 %436, i32 %437, i32 %458, i32 %459) #1, !dbg !35
  %650 = extractvalue { float, float, float, float } %649, 0, !dbg !35
  %651 = extractvalue { float, float, float, float } %649, 1, !dbg !35
  %652 = extractvalue { float, float, float, float } %649, 2, !dbg !35
  %653 = extractvalue { float, float, float, float } %649, 3, !dbg !35
  %654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %575, float %576, float %577, float %578, i32 %434, i32 %435, i32 %436, i32 %437, i32 %472, i32 %473) #1, !dbg !35
  %655 = extractvalue { float, float, float, float } %654, 0, !dbg !35
  %656 = extractvalue { float, float, float, float } %654, 1, !dbg !35
  %657 = extractvalue { float, float, float, float } %654, 2, !dbg !35
  %658 = extractvalue { float, float, float, float } %654, 3, !dbg !35
  %659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %580, float %581, float %582, float %583, i32 %434, i32 %435, i32 %436, i32 %437, i32 %486, i32 %487) #1, !dbg !35
  %660 = extractvalue { float, float, float, float } %659, 0, !dbg !35
  %661 = extractvalue { float, float, float, float } %659, 1, !dbg !35
  %662 = extractvalue { float, float, float, float } %659, 2, !dbg !35
  %663 = extractvalue { float, float, float, float } %659, 3, !dbg !35
  %664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %434, i32 %435, i32 %436, i32 %437, i32 %500, i32 %501) #1, !dbg !35
  %665 = extractvalue { float, float, float, float } %664, 0, !dbg !35
  %666 = extractvalue { float, float, float, float } %664, 1, !dbg !35
  %667 = extractvalue { float, float, float, float } %664, 2, !dbg !35
  %668 = extractvalue { float, float, float, float } %664, 3, !dbg !35
  %669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %590, float %591, float %592, float %593, i32 %357, i32 %358, i32 %359, i32 %360, i32 %463, i32 %464) #1, !dbg !35
  %670 = extractvalue { float, float, float, float } %669, 0, !dbg !35
  %671 = extractvalue { float, float, float, float } %669, 1, !dbg !35
  %672 = extractvalue { float, float, float, float } %669, 2, !dbg !35
  %673 = extractvalue { float, float, float, float } %669, 3, !dbg !35
  %674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %595, float %596, float %597, float %598, i32 %357, i32 %358, i32 %359, i32 %360, i32 %477, i32 %478) #1, !dbg !35
  %675 = extractvalue { float, float, float, float } %674, 0, !dbg !35
  %676 = extractvalue { float, float, float, float } %674, 1, !dbg !35
  %677 = extractvalue { float, float, float, float } %674, 2, !dbg !35
  %678 = extractvalue { float, float, float, float } %674, 3, !dbg !35
  %679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %600, float %601, float %602, float %603, i32 %357, i32 %358, i32 %359, i32 %360, i32 %491, i32 %492) #1, !dbg !35
  %680 = extractvalue { float, float, float, float } %679, 0, !dbg !35
  %681 = extractvalue { float, float, float, float } %679, 1, !dbg !35
  %682 = extractvalue { float, float, float, float } %679, 2, !dbg !35
  %683 = extractvalue { float, float, float, float } %679, 3, !dbg !35
  %684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %605, float %606, float %607, float %608, i32 %357, i32 %358, i32 %359, i32 %360, i32 %505, i32 %506) #1, !dbg !35
  %685 = extractvalue { float, float, float, float } %684, 0, !dbg !35
  %686 = extractvalue { float, float, float, float } %684, 1, !dbg !35
  %687 = extractvalue { float, float, float, float } %684, 2, !dbg !35
  %688 = extractvalue { float, float, float, float } %684, 3, !dbg !35
  %689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %385, i32 %386, i32 %387, i32 %388, i32 %463, i32 %464) #1, !dbg !35
  %690 = extractvalue { float, float, float, float } %689, 0, !dbg !35
  %691 = extractvalue { float, float, float, float } %689, 1, !dbg !35
  %692 = extractvalue { float, float, float, float } %689, 2, !dbg !35
  %693 = extractvalue { float, float, float, float } %689, 3, !dbg !35
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %615, float %616, float %617, float %618, i32 %385, i32 %386, i32 %387, i32 %388, i32 %477, i32 %478) #1, !dbg !35
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !35
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !35
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !35
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !35
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %620, float %621, float %622, float %623, i32 %385, i32 %386, i32 %387, i32 %388, i32 %491, i32 %492) #1, !dbg !35
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !35
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !35
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !35
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !35
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %625, float %626, float %627, float %628, i32 %385, i32 %386, i32 %387, i32 %388, i32 %505, i32 %506) #1, !dbg !35
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !35
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !35
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !35
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !35
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %413, i32 %414, i32 %415, i32 %416, i32 %463, i32 %464) #1, !dbg !35
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !35
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !35
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !35
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !35
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %635, float %636, float %637, float %638, i32 %413, i32 %414, i32 %415, i32 %416, i32 %477, i32 %478) #1, !dbg !35
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !35
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !35
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !35
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !35
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %640, float %641, float %642, float %643, i32 %413, i32 %414, i32 %415, i32 %416, i32 %491, i32 %492) #1, !dbg !35
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !35
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !35
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !35
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !35
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %645, float %646, float %647, float %648, i32 %413, i32 %414, i32 %415, i32 %416, i32 %505, i32 %506) #1, !dbg !35
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !35
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !35
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !35
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !35
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %441, i32 %442, i32 %443, i32 %444, i32 %463, i32 %464) #1, !dbg !35
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !35
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !35
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !35
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !35
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %655, float %656, float %657, float %658, i32 %441, i32 %442, i32 %443, i32 %444, i32 %477, i32 %478) #1, !dbg !35
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !35
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !35
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !35
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !35
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %660, float %661, float %662, float %663, i32 %441, i32 %442, i32 %443, i32 %444, i32 %491, i32 %492) #1, !dbg !35
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !35
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !35
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !35
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !35
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %665, float %666, float %667, float %668, i32 %441, i32 %442, i32 %443, i32 %444, i32 %505, i32 %506) #1, !dbg !35
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !35
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !35
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !35
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !35
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %670, float %671, float %672, float %673, i32 %364, i32 %365, i32 %366, i32 %367, i32 %465, i32 %466) #1, !dbg !35
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !35
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !35
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !35
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !35
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %675, float %676, float %677, float %678, i32 %364, i32 %365, i32 %366, i32 %367, i32 %479, i32 %480) #1, !dbg !35
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !35
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !35
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !35
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !35
  %759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %680, float %681, float %682, float %683, i32 %364, i32 %365, i32 %366, i32 %367, i32 %493, i32 %494) #1, !dbg !35
  %760 = extractvalue { float, float, float, float } %759, 0, !dbg !35
  %761 = extractvalue { float, float, float, float } %759, 1, !dbg !35
  %762 = extractvalue { float, float, float, float } %759, 2, !dbg !35
  %763 = extractvalue { float, float, float, float } %759, 3, !dbg !35
  %764 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %685, float %686, float %687, float %688, i32 %364, i32 %365, i32 %366, i32 %367, i32 %507, i32 %508) #1, !dbg !35
  %765 = extractvalue { float, float, float, float } %764, 0, !dbg !35
  %766 = extractvalue { float, float, float, float } %764, 1, !dbg !35
  %767 = extractvalue { float, float, float, float } %764, 2, !dbg !35
  %768 = extractvalue { float, float, float, float } %764, 3, !dbg !35
  %769 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %690, float %691, float %692, float %693, i32 %392, i32 %393, i32 %394, i32 %395, i32 %465, i32 %466) #1, !dbg !35
  %770 = extractvalue { float, float, float, float } %769, 0, !dbg !35
  %771 = extractvalue { float, float, float, float } %769, 1, !dbg !35
  %772 = extractvalue { float, float, float, float } %769, 2, !dbg !35
  %773 = extractvalue { float, float, float, float } %769, 3, !dbg !35
  %774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %695, float %696, float %697, float %698, i32 %392, i32 %393, i32 %394, i32 %395, i32 %479, i32 %480) #1, !dbg !35
  %775 = extractvalue { float, float, float, float } %774, 0, !dbg !35
  %776 = extractvalue { float, float, float, float } %774, 1, !dbg !35
  %777 = extractvalue { float, float, float, float } %774, 2, !dbg !35
  %778 = extractvalue { float, float, float, float } %774, 3, !dbg !35
  %779 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %700, float %701, float %702, float %703, i32 %392, i32 %393, i32 %394, i32 %395, i32 %493, i32 %494) #1, !dbg !35
  %780 = extractvalue { float, float, float, float } %779, 0, !dbg !35
  %781 = extractvalue { float, float, float, float } %779, 1, !dbg !35
  %782 = extractvalue { float, float, float, float } %779, 2, !dbg !35
  %783 = extractvalue { float, float, float, float } %779, 3, !dbg !35
  %784 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %705, float %706, float %707, float %708, i32 %392, i32 %393, i32 %394, i32 %395, i32 %507, i32 %508) #1, !dbg !35
  %785 = extractvalue { float, float, float, float } %784, 0, !dbg !35
  %786 = extractvalue { float, float, float, float } %784, 1, !dbg !35
  %787 = extractvalue { float, float, float, float } %784, 2, !dbg !35
  %788 = extractvalue { float, float, float, float } %784, 3, !dbg !35
  %789 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %710, float %711, float %712, float %713, i32 %420, i32 %421, i32 %422, i32 %423, i32 %465, i32 %466) #1, !dbg !35
  %790 = extractvalue { float, float, float, float } %789, 0, !dbg !35
  %791 = extractvalue { float, float, float, float } %789, 1, !dbg !35
  %792 = extractvalue { float, float, float, float } %789, 2, !dbg !35
  %793 = extractvalue { float, float, float, float } %789, 3, !dbg !35
  %794 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %715, float %716, float %717, float %718, i32 %420, i32 %421, i32 %422, i32 %423, i32 %479, i32 %480) #1, !dbg !35
  %795 = extractvalue { float, float, float, float } %794, 0, !dbg !35
  %796 = extractvalue { float, float, float, float } %794, 1, !dbg !35
  %797 = extractvalue { float, float, float, float } %794, 2, !dbg !35
  %798 = extractvalue { float, float, float, float } %794, 3, !dbg !35
  %799 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %720, float %721, float %722, float %723, i32 %420, i32 %421, i32 %422, i32 %423, i32 %493, i32 %494) #1, !dbg !35
  %800 = extractvalue { float, float, float, float } %799, 0, !dbg !35
  %801 = extractvalue { float, float, float, float } %799, 1, !dbg !35
  %802 = extractvalue { float, float, float, float } %799, 2, !dbg !35
  %803 = extractvalue { float, float, float, float } %799, 3, !dbg !35
  %804 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %725, float %726, float %727, float %728, i32 %420, i32 %421, i32 %422, i32 %423, i32 %507, i32 %508) #1, !dbg !35
  %805 = extractvalue { float, float, float, float } %804, 0, !dbg !35
  %806 = extractvalue { float, float, float, float } %804, 1, !dbg !35
  %807 = extractvalue { float, float, float, float } %804, 2, !dbg !35
  %808 = extractvalue { float, float, float, float } %804, 3, !dbg !35
  %809 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %730, float %731, float %732, float %733, i32 %448, i32 %449, i32 %450, i32 %451, i32 %465, i32 %466) #1, !dbg !35
  %810 = extractvalue { float, float, float, float } %809, 0, !dbg !35
  %811 = extractvalue { float, float, float, float } %809, 1, !dbg !35
  %812 = extractvalue { float, float, float, float } %809, 2, !dbg !35
  %813 = extractvalue { float, float, float, float } %809, 3, !dbg !35
  %814 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %735, float %736, float %737, float %738, i32 %448, i32 %449, i32 %450, i32 %451, i32 %479, i32 %480) #1, !dbg !35
  %815 = extractvalue { float, float, float, float } %814, 0, !dbg !35
  %816 = extractvalue { float, float, float, float } %814, 1, !dbg !35
  %817 = extractvalue { float, float, float, float } %814, 2, !dbg !35
  %818 = extractvalue { float, float, float, float } %814, 3, !dbg !35
  %819 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %740, float %741, float %742, float %743, i32 %448, i32 %449, i32 %450, i32 %451, i32 %493, i32 %494) #1, !dbg !35
  %820 = extractvalue { float, float, float, float } %819, 0, !dbg !35
  %821 = extractvalue { float, float, float, float } %819, 1, !dbg !35
  %822 = extractvalue { float, float, float, float } %819, 2, !dbg !35
  %823 = extractvalue { float, float, float, float } %819, 3, !dbg !35
  %824 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %745, float %746, float %747, float %748, i32 %448, i32 %449, i32 %450, i32 %451, i32 %507, i32 %508) #1, !dbg !35
  %825 = extractvalue { float, float, float, float } %824, 0, !dbg !35
  %826 = extractvalue { float, float, float, float } %824, 1, !dbg !35
  %827 = extractvalue { float, float, float, float } %824, 2, !dbg !35
  %828 = extractvalue { float, float, float, float } %824, 3, !dbg !35
  %829 = add i32 %269, 1, !dbg !34
  %830 = icmp slt i32 %829, 4, !dbg !34
  %831 = select i1 %830, i32 %829, i32 0, !dbg !34
  %832 = shl nuw nsw i64 %indvars.iv, 6, !dbg !36
  %833 = add nuw nsw i64 %832, %258
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %833, !dbg !28
  %gep304 = getelementptr bfloat, ptr addrspace(1) %invariant.gep303, i64 %833, !dbg !28
  %gep306 = getelementptr bfloat, ptr addrspace(1) %invariant.gep305, i64 %833, !dbg !28
  %gep308 = getelementptr bfloat, ptr addrspace(1) %invariant.gep307, i64 %833, !dbg !28
  %834 = shl i32 %831, 13, !dbg !29
  %835 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %834, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %836 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %835, i32 %73, !dbg !29
  %837 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %835, i32 %75, !dbg !29
  %838 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %835, i32 %77, !dbg !29
  %839 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %835, i32 %79, !dbg !29
  %840 = select i1 %334, i32 16, i32 0, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %836, ptr addrspace(1) %gep, i32 %840) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %837, ptr addrspace(1) %gep304, i32 %840) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %838, ptr addrspace(1) %gep306, i32 %840) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %839, ptr addrspace(1) %gep308, i32 %840) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep310 = getelementptr bfloat, ptr addrspace(1) %invariant.gep309, i64 %833, !dbg !31
  %gep312 = getelementptr bfloat, ptr addrspace(1) %invariant.gep311, i64 %833, !dbg !31
  %gep314 = getelementptr bfloat, ptr addrspace(1) %invariant.gep313, i64 %833, !dbg !31
  %gep316 = getelementptr bfloat, ptr addrspace(1) %invariant.gep315, i64 %833, !dbg !31
  %841 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %834, !dbg !32
  %842 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %841, i32 %73, !dbg !32
  %843 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %841, i32 %75, !dbg !32
  %844 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %841, i32 %77, !dbg !32
  %845 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %841, i32 %79, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %842, ptr addrspace(1) %gep310, i32 %840) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %843, ptr addrspace(1) %gep312, i32 %840) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %844, ptr addrspace(1) %gep314, i32 %840) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %845, ptr addrspace(1) %gep316, i32 %840) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 64, !dbg !34
  br i1 %exitcond.not, label %846, label %267, !dbg !34

846:                                              ; preds = %267
  %847 = shl nuw nsw i32 %16, 3, !dbg !19
  %848 = or disjoint i32 %32, %847, !dbg !19
  %849 = or disjoint i32 %37, %848, !dbg !22
  %850 = lshr i32 %15, 4, !dbg !19
  %851 = and i32 %850, 15, !dbg !19
  %852 = or disjoint i32 %851, %14, !dbg !20
  %853 = or disjoint i32 %852, 112, !dbg !20
  %854 = or disjoint i32 %852, 96, !dbg !20
  %855 = or disjoint i32 %852, 80, !dbg !20
  %856 = or disjoint i32 %852, 64, !dbg !20
  %857 = or disjoint i32 %852, 48, !dbg !20
  %858 = or disjoint i32 %852, 32, !dbg !20
  %859 = or disjoint i32 %852, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %860 = icmp slt i32 %852, 512, !dbg !37
  %861 = icmp slt i32 %859, 512, !dbg !37
  %862 = icmp slt i32 %858, 512, !dbg !37
  %863 = icmp slt i32 %857, 512, !dbg !37
  %864 = icmp slt i32 %856, 512, !dbg !37
  %865 = icmp slt i32 %855, 512, !dbg !37
  %866 = icmp slt i32 %854, 512, !dbg !37
  %867 = icmp slt i32 %853, 512, !dbg !37
  %868 = icmp slt i32 %849, 4096, !dbg !38
  %869 = and i1 %860, %868, !dbg !39
  %870 = and i1 %861, %868, !dbg !39
  %871 = and i1 %862, %868, !dbg !39
  %872 = and i1 %863, %868, !dbg !39
  %873 = and i1 %864, %868, !dbg !39
  %874 = and i1 %865, %868, !dbg !39
  %875 = and i1 %866, %868, !dbg !39
  %876 = and i1 %867, %868, !dbg !39
  %877 = shl i32 %852, 12, !dbg !40
  %878 = shl i32 %859, 12, !dbg !40
  %879 = shl i32 %858, 12, !dbg !40
  %880 = shl i32 %857, 12, !dbg !40
  %881 = shl i32 %856, 12, !dbg !40
  %882 = shl i32 %855, 12, !dbg !40
  %883 = shl i32 %854, 12, !dbg !40
  %884 = shl i32 %853, 12, !dbg !40
  %885 = add i32 %877, %849, !dbg !41
  %886 = add i32 %878, %849, !dbg !41
  %887 = add i32 %879, %849, !dbg !41
  %888 = add i32 %880, %849, !dbg !41
  %889 = add i32 %881, %849, !dbg !41
  %890 = add i32 %882, %849, !dbg !41
  %891 = add i32 %883, %849, !dbg !41
  %892 = add i32 %884, %849, !dbg !41
  %893 = sext i32 %885 to i64, !dbg !42
  %894 = getelementptr bfloat, ptr addrspace(1) %2, i64 %893, !dbg !42
  %895 = sext i32 %886 to i64, !dbg !42
  %896 = getelementptr bfloat, ptr addrspace(1) %2, i64 %895, !dbg !42
  %897 = sext i32 %887 to i64, !dbg !42
  %898 = getelementptr bfloat, ptr addrspace(1) %2, i64 %897, !dbg !42
  %899 = sext i32 %888 to i64, !dbg !42
  %900 = getelementptr bfloat, ptr addrspace(1) %2, i64 %899, !dbg !42
  %901 = sext i32 %889 to i64, !dbg !42
  %902 = getelementptr bfloat, ptr addrspace(1) %2, i64 %901, !dbg !42
  %903 = sext i32 %890 to i64, !dbg !42
  %904 = getelementptr bfloat, ptr addrspace(1) %2, i64 %903, !dbg !42
  %905 = sext i32 %891 to i64, !dbg !42
  %906 = getelementptr bfloat, ptr addrspace(1) %2, i64 %905, !dbg !42
  %907 = sext i32 %892 to i64, !dbg !42
  %908 = getelementptr bfloat, ptr addrspace(1) %2, i64 %907, !dbg !42
  %909 = fptrunc float %750 to bfloat, !dbg !43
  %910 = fptrunc float %751 to bfloat, !dbg !43
  %911 = fptrunc float %752 to bfloat, !dbg !43
  %912 = fptrunc float %753 to bfloat, !dbg !43
  %913 = fptrunc float %755 to bfloat, !dbg !43
  %914 = fptrunc float %756 to bfloat, !dbg !43
  %915 = fptrunc float %757 to bfloat, !dbg !43
  %916 = fptrunc float %758 to bfloat, !dbg !43
  %917 = fptrunc float %760 to bfloat, !dbg !43
  %918 = fptrunc float %761 to bfloat, !dbg !43
  %919 = fptrunc float %762 to bfloat, !dbg !43
  %920 = fptrunc float %763 to bfloat, !dbg !43
  %921 = fptrunc float %765 to bfloat, !dbg !43
  %922 = fptrunc float %766 to bfloat, !dbg !43
  %923 = fptrunc float %767 to bfloat, !dbg !43
  %924 = fptrunc float %768 to bfloat, !dbg !43
  %925 = fptrunc float %770 to bfloat, !dbg !43
  %926 = fptrunc float %771 to bfloat, !dbg !43
  %927 = fptrunc float %772 to bfloat, !dbg !43
  %928 = fptrunc float %773 to bfloat, !dbg !43
  %929 = fptrunc float %775 to bfloat, !dbg !43
  %930 = fptrunc float %776 to bfloat, !dbg !43
  %931 = fptrunc float %777 to bfloat, !dbg !43
  %932 = fptrunc float %778 to bfloat, !dbg !43
  %933 = fptrunc float %780 to bfloat, !dbg !43
  %934 = fptrunc float %781 to bfloat, !dbg !43
  %935 = fptrunc float %782 to bfloat, !dbg !43
  %936 = fptrunc float %783 to bfloat, !dbg !43
  %937 = fptrunc float %785 to bfloat, !dbg !43
  %938 = fptrunc float %786 to bfloat, !dbg !43
  %939 = fptrunc float %787 to bfloat, !dbg !43
  %940 = fptrunc float %788 to bfloat, !dbg !43
  %941 = fptrunc float %790 to bfloat, !dbg !43
  %942 = fptrunc float %791 to bfloat, !dbg !43
  %943 = fptrunc float %792 to bfloat, !dbg !43
  %944 = fptrunc float %793 to bfloat, !dbg !43
  %945 = fptrunc float %795 to bfloat, !dbg !43
  %946 = fptrunc float %796 to bfloat, !dbg !43
  %947 = fptrunc float %797 to bfloat, !dbg !43
  %948 = fptrunc float %798 to bfloat, !dbg !43
  %949 = fptrunc float %800 to bfloat, !dbg !43
  %950 = fptrunc float %801 to bfloat, !dbg !43
  %951 = fptrunc float %802 to bfloat, !dbg !43
  %952 = fptrunc float %803 to bfloat, !dbg !43
  %953 = fptrunc float %805 to bfloat, !dbg !43
  %954 = fptrunc float %806 to bfloat, !dbg !43
  %955 = fptrunc float %807 to bfloat, !dbg !43
  %956 = fptrunc float %808 to bfloat, !dbg !43
  %957 = fptrunc float %810 to bfloat, !dbg !43
  %958 = fptrunc float %811 to bfloat, !dbg !43
  %959 = fptrunc float %812 to bfloat, !dbg !43
  %960 = fptrunc float %813 to bfloat, !dbg !43
  %961 = fptrunc float %815 to bfloat, !dbg !43
  %962 = fptrunc float %816 to bfloat, !dbg !43
  %963 = fptrunc float %817 to bfloat, !dbg !43
  %964 = fptrunc float %818 to bfloat, !dbg !43
  %965 = fptrunc float %820 to bfloat, !dbg !43
  %966 = fptrunc float %821 to bfloat, !dbg !43
  %967 = fptrunc float %822 to bfloat, !dbg !43
  %968 = fptrunc float %823 to bfloat, !dbg !43
  %969 = fptrunc float %825 to bfloat, !dbg !43
  %970 = fptrunc float %826 to bfloat, !dbg !43
  %971 = fptrunc float %827 to bfloat, !dbg !43
  %972 = fptrunc float %828 to bfloat, !dbg !43
  %973 = shl i32 %15, 1, !dbg !43
  %974 = and i32 %973, 6, !dbg !43
  %975 = shl i32 %15, 5, !dbg !43
  %976 = and i32 %975, 384, !dbg !43
  %977 = or disjoint i32 %976, %974, !dbg !43
  %978 = shl nuw nsw i32 %17, 5, !dbg !43
  %979 = or disjoint i32 %977, %978, !dbg !43
  %980 = and i32 %235, 24, !dbg !43
  %981 = or disjoint i32 %979, %980, !dbg !43
  %982 = shl nuw nsw i32 %21, 4, !dbg !43
  %983 = or disjoint i32 %981, %982, !dbg !43
  %984 = and i32 %27, 2040, !dbg !43
  %985 = lshr i32 %983, 4, !dbg !43
  %986 = and i32 %985, 268435448, !dbg !43
  %987 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %986, !dbg !43
  %988 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %987, i32 %983, !dbg !43
  %989 = bitcast bfloat %909 to i16, !dbg !43
  %990 = bitcast bfloat %910 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %988, i16 %989, i16 %990, i1 true) #1, !dbg !43
  %991 = or disjoint i32 %983, 1024, !dbg !43
  %992 = lshr i32 %991, 4, !dbg !43
  %993 = and i32 %992, 268435448, !dbg !43
  %994 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %993, !dbg !43
  %995 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %994, i32 %991, !dbg !43
  %996 = bitcast bfloat %911 to i16, !dbg !43
  %997 = bitcast bfloat %912 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %995, i16 %996, i16 %997, i1 true) #1, !dbg !43
  %998 = or disjoint i32 %983, 32, !dbg !43
  %999 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %987, i32 %998, !dbg !43
  %1000 = bitcast bfloat %913 to i16, !dbg !43
  %1001 = bitcast bfloat %914 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1000, i16 %1001, i1 true) #1, !dbg !43
  %1002 = or disjoint i32 %983, 1056, !dbg !43
  %1003 = lshr i32 %1002, 4, !dbg !43
  %1004 = and i32 %1003, 268435448, !dbg !43
  %1005 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1004, !dbg !43
  %1006 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1005, i32 %1002, !dbg !43
  %1007 = bitcast bfloat %915 to i16, !dbg !43
  %1008 = bitcast bfloat %916 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1006, i16 %1007, i16 %1008, i1 true) #1, !dbg !43
  %1009 = or disjoint i32 %983, 64, !dbg !43
  %1010 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %987, i32 %1009, !dbg !43
  %1011 = bitcast bfloat %917 to i16, !dbg !43
  %1012 = bitcast bfloat %918 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1010, i16 %1011, i16 %1012, i1 true) #1, !dbg !43
  %1013 = or disjoint i32 %983, 1088, !dbg !43
  %1014 = lshr i32 %1013, 4, !dbg !43
  %1015 = and i32 %1014, 268435448, !dbg !43
  %1016 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1015, !dbg !43
  %1017 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1016, i32 %1013, !dbg !43
  %1018 = bitcast bfloat %919 to i16, !dbg !43
  %1019 = bitcast bfloat %920 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1017, i16 %1018, i16 %1019, i1 true) #1, !dbg !43
  %1020 = or disjoint i32 %983, 96, !dbg !43
  %1021 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %987, i32 %1020, !dbg !43
  %1022 = bitcast bfloat %921 to i16, !dbg !43
  %1023 = bitcast bfloat %922 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1021, i16 %1022, i16 %1023, i1 true) #1, !dbg !43
  %1024 = or disjoint i32 %983, 1120, !dbg !43
  %1025 = lshr i32 %1024, 4, !dbg !43
  %1026 = and i32 %1025, 268435448, !dbg !43
  %1027 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1026, !dbg !43
  %1028 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1027, i32 %1024, !dbg !43
  %1029 = bitcast bfloat %923 to i16, !dbg !43
  %1030 = bitcast bfloat %924 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1028, i16 %1029, i16 %1030, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1031 = lshr i32 %27, 4, !dbg !43
  %1032 = and i32 %1031, 120, !dbg !43
  %1033 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1032, !dbg !43
  %1034 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1033, i32 %984, !dbg !43
  %1035 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !43
  %1036 = or disjoint i32 %984, 2048, !dbg !43
  %1037 = lshr i32 %1036, 4, !dbg !43
  %1038 = and i32 %1037, 248, !dbg !43
  %1039 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1038, !dbg !43
  %1040 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %1036, !dbg !43
  %1041 = load <4 x i32>, ptr addrspace(3) %1040, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1042 = bitcast bfloat %925 to i16, !dbg !43
  %1043 = bitcast bfloat %926 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %988, i16 %1042, i16 %1043, i1 true) #1, !dbg !43
  %1044 = bitcast bfloat %927 to i16, !dbg !43
  %1045 = bitcast bfloat %928 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %995, i16 %1044, i16 %1045, i1 true) #1, !dbg !43
  %1046 = bitcast bfloat %929 to i16, !dbg !43
  %1047 = bitcast bfloat %930 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1046, i16 %1047, i1 true) #1, !dbg !43
  %1048 = bitcast bfloat %931 to i16, !dbg !43
  %1049 = bitcast bfloat %932 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1006, i16 %1048, i16 %1049, i1 true) #1, !dbg !43
  %1050 = bitcast bfloat %933 to i16, !dbg !43
  %1051 = bitcast bfloat %934 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1010, i16 %1050, i16 %1051, i1 true) #1, !dbg !43
  %1052 = bitcast bfloat %935 to i16, !dbg !43
  %1053 = bitcast bfloat %936 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1017, i16 %1052, i16 %1053, i1 true) #1, !dbg !43
  %1054 = bitcast bfloat %937 to i16, !dbg !43
  %1055 = bitcast bfloat %938 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1021, i16 %1054, i16 %1055, i1 true) #1, !dbg !43
  %1056 = bitcast bfloat %939 to i16, !dbg !43
  %1057 = bitcast bfloat %940 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1028, i16 %1056, i16 %1057, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1058 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !43
  %1059 = load <4 x i32>, ptr addrspace(3) %1040, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1060 = bitcast bfloat %941 to i16, !dbg !43
  %1061 = bitcast bfloat %942 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %988, i16 %1060, i16 %1061, i1 true) #1, !dbg !43
  %1062 = bitcast bfloat %943 to i16, !dbg !43
  %1063 = bitcast bfloat %944 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %995, i16 %1062, i16 %1063, i1 true) #1, !dbg !43
  %1064 = bitcast bfloat %945 to i16, !dbg !43
  %1065 = bitcast bfloat %946 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1064, i16 %1065, i1 true) #1, !dbg !43
  %1066 = bitcast bfloat %947 to i16, !dbg !43
  %1067 = bitcast bfloat %948 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1006, i16 %1066, i16 %1067, i1 true) #1, !dbg !43
  %1068 = bitcast bfloat %949 to i16, !dbg !43
  %1069 = bitcast bfloat %950 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1010, i16 %1068, i16 %1069, i1 true) #1, !dbg !43
  %1070 = bitcast bfloat %951 to i16, !dbg !43
  %1071 = bitcast bfloat %952 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1017, i16 %1070, i16 %1071, i1 true) #1, !dbg !43
  %1072 = bitcast bfloat %953 to i16, !dbg !43
  %1073 = bitcast bfloat %954 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1021, i16 %1072, i16 %1073, i1 true) #1, !dbg !43
  %1074 = bitcast bfloat %955 to i16, !dbg !43
  %1075 = bitcast bfloat %956 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1028, i16 %1074, i16 %1075, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1076 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !43
  %1077 = load <4 x i32>, ptr addrspace(3) %1040, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1078 = bitcast bfloat %957 to i16, !dbg !43
  %1079 = bitcast bfloat %958 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %988, i16 %1078, i16 %1079, i1 true) #1, !dbg !43
  %1080 = bitcast bfloat %959 to i16, !dbg !43
  %1081 = bitcast bfloat %960 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %995, i16 %1080, i16 %1081, i1 true) #1, !dbg !43
  %1082 = bitcast bfloat %961 to i16, !dbg !43
  %1083 = bitcast bfloat %962 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1082, i16 %1083, i1 true) #1, !dbg !43
  %1084 = bitcast bfloat %963 to i16, !dbg !43
  %1085 = bitcast bfloat %964 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1006, i16 %1084, i16 %1085, i1 true) #1, !dbg !43
  %1086 = bitcast bfloat %965 to i16, !dbg !43
  %1087 = bitcast bfloat %966 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1010, i16 %1086, i16 %1087, i1 true) #1, !dbg !43
  %1088 = bitcast bfloat %967 to i16, !dbg !43
  %1089 = bitcast bfloat %968 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1017, i16 %1088, i16 %1089, i1 true) #1, !dbg !43
  %1090 = bitcast bfloat %969 to i16, !dbg !43
  %1091 = bitcast bfloat %970 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1021, i16 %1090, i16 %1091, i1 true) #1, !dbg !43
  %1092 = bitcast bfloat %971 to i16, !dbg !43
  %1093 = bitcast bfloat %972 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1028, i16 %1092, i16 %1093, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1094 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !43
  %1095 = load <4 x i32>, ptr addrspace(3) %1040, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %1035, i64 0, !dbg !43
  %.extract104 = extractelement <4 x i32> %1035, i64 1, !dbg !43
  %.extract106 = extractelement <4 x i32> %1035, i64 2, !dbg !43
  %.extract108 = extractelement <4 x i32> %1035, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %894, i1 %869) #1, !dbg !43
  %.extract110 = extractelement <4 x i32> %1041, i64 0, !dbg !43
  %.extract112 = extractelement <4 x i32> %1041, i64 1, !dbg !43
  %.extract114 = extractelement <4 x i32> %1041, i64 2, !dbg !43
  %.extract116 = extractelement <4 x i32> %1041, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract110, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %896, i1 %870) #1, !dbg !43
  %.extract118 = extractelement <4 x i32> %1058, i64 0, !dbg !43
  %.extract120 = extractelement <4 x i32> %1058, i64 1, !dbg !43
  %.extract122 = extractelement <4 x i32> %1058, i64 2, !dbg !43
  %.extract124 = extractelement <4 x i32> %1058, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract118, i32 %.extract120, i32 %.extract122, i32 %.extract124, ptr addrspace(1) %898, i1 %871) #1, !dbg !43
  %.extract126 = extractelement <4 x i32> %1059, i64 0, !dbg !43
  %.extract128 = extractelement <4 x i32> %1059, i64 1, !dbg !43
  %.extract130 = extractelement <4 x i32> %1059, i64 2, !dbg !43
  %.extract132 = extractelement <4 x i32> %1059, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract126, i32 %.extract128, i32 %.extract130, i32 %.extract132, ptr addrspace(1) %900, i1 %872) #1, !dbg !43
  %.extract134 = extractelement <4 x i32> %1076, i64 0, !dbg !43
  %.extract136 = extractelement <4 x i32> %1076, i64 1, !dbg !43
  %.extract138 = extractelement <4 x i32> %1076, i64 2, !dbg !43
  %.extract140 = extractelement <4 x i32> %1076, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract134, i32 %.extract136, i32 %.extract138, i32 %.extract140, ptr addrspace(1) %902, i1 %873) #1, !dbg !43
  %.extract142 = extractelement <4 x i32> %1077, i64 0, !dbg !43
  %.extract144 = extractelement <4 x i32> %1077, i64 1, !dbg !43
  %.extract146 = extractelement <4 x i32> %1077, i64 2, !dbg !43
  %.extract148 = extractelement <4 x i32> %1077, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract142, i32 %.extract144, i32 %.extract146, i32 %.extract148, ptr addrspace(1) %904, i1 %874) #1, !dbg !43
  %.extract150 = extractelement <4 x i32> %1094, i64 0, !dbg !43
  %.extract152 = extractelement <4 x i32> %1094, i64 1, !dbg !43
  %.extract154 = extractelement <4 x i32> %1094, i64 2, !dbg !43
  %.extract156 = extractelement <4 x i32> %1094, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract150, i32 %.extract152, i32 %.extract154, i32 %.extract156, ptr addrspace(1) %906, i1 %875) #1, !dbg !43
  %.extract158 = extractelement <4 x i32> %1095, i64 0, !dbg !43
  %.extract160 = extractelement <4 x i32> %1095, i64 1, !dbg !43
  %.extract162 = extractelement <4 x i32> %1095, i64 2, !dbg !43
  %.extract164 = extractelement <4 x i32> %1095, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract158, i32 %.extract160, i32 %.extract162, i32 %.extract164, ptr addrspace(1) %908, i1 %876) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct433hcpyy2polrrpyxmdzx4xkw2c3rso6sux3g3tnuxx7lls5bb.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 30, scope: !6)
!26 = !DILocation(line: 77, column: 55, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 66, column: 42, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
