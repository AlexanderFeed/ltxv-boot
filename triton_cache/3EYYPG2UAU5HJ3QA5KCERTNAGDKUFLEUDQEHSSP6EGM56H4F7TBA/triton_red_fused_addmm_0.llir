; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 2, !dbg !11
  %11 = and i32 %10, 2044, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !15
  %17 = bitcast i32 %16 to <2 x bfloat>, !dbg !15
  %18 = extractvalue { i32, i32 } %15, 1, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = extractelement <2 x bfloat> %19, i64 0, !dbg !15
  %21 = extractelement <2 x bfloat> %19, i64 1, !dbg !15
  %22 = fpext bfloat %20 to float, !dbg !16
  %23 = fpext bfloat %21 to float, !dbg !16
  %24 = add i32 %11, %12, !dbg !17
  %25 = sext i32 %24 to i64, !dbg !18
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %8) #4, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = extractelement <2 x bfloat> %31, i64 0, !dbg !19
  %33 = extractelement <2 x bfloat> %31, i64 1, !dbg !19
  %34 = fpext bfloat %32 to float, !dbg !20
  %35 = fpext bfloat %33 to float, !dbg !20
  %36 = fsub float 0.000000e+00, %22, !dbg !21
  %37 = fsub float 0.000000e+00, %23, !dbg !21
  %38 = fmul float %36, 0x3FF7154760000000, !dbg !25
  %39 = tail call float @llvm.nvvm.ex2.approx.f(float %38), !dbg !25
  %40 = fmul float %37, 0x3FF7154760000000, !dbg !25
  %41 = tail call float @llvm.nvvm.ex2.approx.f(float %40), !dbg !25
  %42 = fadd float %39, 1.000000e+00, !dbg !26
  %43 = fadd float %41, 1.000000e+00, !dbg !26
  %44 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %42), !dbg !27
  %45 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %43), !dbg !27
  %46 = fmul float %44, %22, !dbg !28
  %47 = fmul float %45, %23, !dbg !28
  %48 = fmul float %46, %34, !dbg !29
  %49 = fmul float %47, %35, !dbg !29
  %50 = fadd float %48, 0.000000e+00, !dbg !30
  %51 = fadd float %49, 0.000000e+00, !dbg !30
  %52 = select i1 %8, float %50, float 0.000000e+00, !dbg !31
  %53 = select i1 %8, float %51, float 0.000000e+00, !dbg !31
  %54 = or disjoint i64 %13, 2048, !dbg !32
  %55 = icmp samesign ult i64 %54, 3072, !dbg !33
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !14
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %55) #4, !dbg !15
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !15
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !15
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !15
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !15
  %62 = extractelement <2 x bfloat> %61, i64 0, !dbg !15
  %63 = extractelement <2 x bfloat> %61, i64 1, !dbg !15
  %64 = fpext bfloat %62 to float, !dbg !16
  %65 = fpext bfloat %63 to float, !dbg !16
  %66 = trunc nuw nsw i64 %54 to i32, !dbg !17
  %67 = add i32 %12, %66, !dbg !17
  %68 = sext i32 %67 to i64, !dbg !18
  %69 = getelementptr bfloat, ptr addrspace(1) %1, i64 %68, !dbg !18
  %70 = and i1 %8, %55, !dbg !34
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %69, i1 %70) #4, !dbg !19
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !19
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !19
  %74 = extractvalue { i32, i32 } %71, 1, !dbg !19
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !19
  %76 = extractelement <2 x bfloat> %75, i64 0, !dbg !19
  %77 = extractelement <2 x bfloat> %75, i64 1, !dbg !19
  %78 = fpext bfloat %76 to float, !dbg !20
  %79 = fpext bfloat %77 to float, !dbg !20
  %80 = fsub float 0.000000e+00, %64, !dbg !21
  %81 = fsub float 0.000000e+00, %65, !dbg !21
  %82 = fmul float %80, 0x3FF7154760000000, !dbg !25
  %83 = tail call float @llvm.nvvm.ex2.approx.f(float %82), !dbg !25
  %84 = fmul float %81, 0x3FF7154760000000, !dbg !25
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !25
  %86 = fadd float %83, 1.000000e+00, !dbg !26
  %87 = fadd float %85, 1.000000e+00, !dbg !26
  %88 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %86), !dbg !27
  %89 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %87), !dbg !27
  %90 = fmul float %88, %64, !dbg !28
  %91 = fmul float %89, %65, !dbg !28
  %92 = fmul float %90, %78, !dbg !29
  %93 = fmul float %91, %79, !dbg !29
  %94 = fadd float %52, %92, !dbg !30
  %95 = fadd float %53, %93, !dbg !30
  %96 = fpext <2 x bfloat> %17 to <2 x float>, !dbg !16
  %97 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !20
  %98 = extractelement <2 x float> %96, i64 0, !dbg !21
  %99 = fsub float 0.000000e+00, %98, !dbg !21
  %100 = extractelement <2 x float> %96, i64 1, !dbg !21
  %101 = fsub float 0.000000e+00, %100, !dbg !21
  %102 = fmul float %99, 0x3FF7154760000000, !dbg !25
  %103 = tail call float @llvm.nvvm.ex2.approx.f(float %102), !dbg !25
  %104 = fmul float %101, 0x3FF7154760000000, !dbg !25
  %105 = tail call float @llvm.nvvm.ex2.approx.f(float %104), !dbg !25
  %106 = fadd float %103, 1.000000e+00, !dbg !26
  %107 = fadd float %105, 1.000000e+00, !dbg !26
  %108 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %106), !dbg !27
  %109 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %107), !dbg !27
  %110 = insertelement <2 x float> poison, float %108, i64 0, !dbg !28
  %111 = insertelement <2 x float> %110, float %109, i64 1, !dbg !28
  %112 = fmul <2 x float> %111, %96, !dbg !28
  %113 = fmul <2 x float> %112, %97, !dbg !29
  %114 = fadd <2 x float> %113, zeroinitializer, !dbg !30
  %115 = insertelement <2 x i1> poison, i1 %8, i64 0, !dbg !31
  %116 = shufflevector <2 x i1> %115, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !31
  %117 = select <2 x i1> %116, <2 x float> %114, <2 x float> zeroinitializer, !dbg !31
  %118 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !16
  %119 = fpext <2 x bfloat> %73 to <2 x float>, !dbg !20
  %120 = extractelement <2 x float> %118, i64 0, !dbg !21
  %121 = fsub float 0.000000e+00, %120, !dbg !21
  %122 = extractelement <2 x float> %118, i64 1, !dbg !21
  %123 = fsub float 0.000000e+00, %122, !dbg !21
  %124 = fmul float %121, 0x3FF7154760000000, !dbg !25
  %125 = tail call float @llvm.nvvm.ex2.approx.f(float %124), !dbg !25
  %126 = fmul float %123, 0x3FF7154760000000, !dbg !25
  %127 = tail call float @llvm.nvvm.ex2.approx.f(float %126), !dbg !25
  %128 = fadd float %125, 1.000000e+00, !dbg !26
  %129 = fadd float %127, 1.000000e+00, !dbg !26
  %130 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %128), !dbg !27
  %131 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %129), !dbg !27
  %132 = insertelement <2 x float> poison, float %130, i64 0, !dbg !28
  %133 = insertelement <2 x float> %132, float %131, i64 1, !dbg !28
  %134 = fmul <2 x float> %133, %118, !dbg !28
  %135 = fmul <2 x float> %134, %119, !dbg !29
  %136 = fadd <2 x float> %117, %135, !dbg !30
  %137 = insertelement <2 x i1> poison, i1 %70, i64 0, !dbg !31
  %138 = shufflevector <2 x i1> %137, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !31
  %139 = select <2 x i1> %138, <2 x float> %136, <2 x float> %117, !dbg !31
  %140 = select i1 %70, float %94, float %52, !dbg !31
  %141 = select i1 %70, float %95, float %53, !dbg !31
  %142 = lshr i32 %9, 5, !dbg !11
  %143 = and i32 %9, 31, !dbg !11
  %shift = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %144 = fadd <2 x float> %139, %shift, !dbg !35
  %145 = extractelement <2 x float> %144, i64 0, !dbg !35
  %146 = fadd float %140, %145, !dbg !35
  %147 = fadd float %141, %146, !dbg !35
  %148 = bitcast float %147 to i32, !dbg !38
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 16, i32 31), !dbg !38
  %150 = bitcast i32 %149 to float, !dbg !38
  %151 = fadd float %147, %150, !dbg !35
  %152 = bitcast float %151 to i32, !dbg !38
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !38
  %154 = bitcast i32 %153 to float, !dbg !38
  %155 = fadd float %151, %154, !dbg !35
  %156 = bitcast float %155 to i32, !dbg !38
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !38
  %158 = bitcast i32 %157 to float, !dbg !38
  %159 = fadd float %155, %158, !dbg !35
  %160 = bitcast float %159 to i32, !dbg !38
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = fadd float %159, %162, !dbg !35
  %164 = bitcast float %163 to i32, !dbg !38
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !38
  %166 = bitcast i32 %165 to float, !dbg !38
  %167 = fadd float %163, %166, !dbg !35
  %168 = and i32 %142, 15, !dbg !38
  %169 = icmp eq i32 %143, 0, !dbg !38
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !38
  %171 = bitcast float %167 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 %169) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %172 = icmp slt i32 %9, 16, !dbg !38
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !38
  %174 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %173, i1 %172) #4, !dbg !38
  %175 = bitcast i32 %174 to float, !dbg !38
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !38
  %177 = bitcast i32 %176 to float, !dbg !38
  %178 = fadd float %175, %177, !dbg !35
  %179 = bitcast float %178 to i32, !dbg !38
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 4, i32 31), !dbg !38
  %181 = bitcast i32 %180 to float, !dbg !38
  %182 = fadd float %178, %181, !dbg !35
  %183 = bitcast float %182 to i32, !dbg !38
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !38
  %185 = bitcast i32 %184 to float, !dbg !38
  %186 = fadd float %182, %185, !dbg !35
  %187 = bitcast float %186 to i32, !dbg !38
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !38
  %189 = bitcast i32 %188 to float, !dbg !38
  %190 = fadd float %186, %189, !dbg !35
  %191 = and i32 %9, 15, !dbg !38
  %192 = icmp eq i32 %191, 0, !dbg !38
  %193 = and i1 %172, %192, !dbg !38
  %194 = bitcast float %190 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %194, i1 %193) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %195 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %196 = sext i32 %7 to i64, !dbg !39
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !39
  %198 = and i32 %9, 511, !dbg !40
  %199 = icmp eq i32 %198, 0, !dbg !40
  %200 = and i1 %8, %199, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %197, i1 %200) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 36, column: 94, scope: !6)
!17 = !DILocation(line: 37, column: 41, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 113, scope: !6)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!24 = !DILocation(line: 39, column: 26, scope: !6)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 40, column: 22, scope: !6)
!29 = !DILocation(line: 44, column: 22, scope: !6)
!30 = !DILocation(line: 46, column: 25, scope: !6)
!31 = !DILocation(line: 47, column: 50, scope: !6)
!32 = !DILocation(line: 31, column: 31, scope: !6)
!33 = !DILocation(line: 32, column: 29, scope: !6)
!34 = !DILocation(line: 37, column: 61, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!37 = !DILocation(line: 48, column: 27, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !22, inlinedAt: !37)
!39 = !DILocation(line: 49, column: 25, scope: !6)
!40 = !DILocation(line: 49, column: 37, scope: !6)
!41 = !DILocation(line: 49, column: 4, scope: !6)
