; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = shl i32 %15, 3, !dbg !19
  %26 = and i32 %25, 8, !dbg !19
  %27 = and i32 %25, 16, !dbg !19
  %28 = and i32 %25, 24, !dbg !19
  %29 = and i32 %25, 32, !dbg !19
  %30 = and i32 %25, 56, !dbg !19
  %31 = or disjoint i32 %14, %23, !dbg !20
  %32 = or disjoint i32 %14, %24, !dbg !20
  %33 = shl nsw i32 %13, 6, !dbg !21
  %34 = or disjoint i32 %33, %23, !dbg !22
  %35 = or disjoint i32 %33, %24, !dbg !22
  %36 = or disjoint i32 %33, %30, !dbg !22
  %37 = srem i32 %31, 512, !dbg !23
  %38 = srem i32 %32, 512, !dbg !23
  %39 = srem i32 %34, 512, !dbg !24
  %.lhs.trunc = trunc i32 %35 to i16, !dbg !24
  %40 = srem i16 %.lhs.trunc, 512, !dbg !24
  %.sext = sext i16 %40 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %42 = shl nsw i32 %37, 12, !dbg !26
  %43 = shl nsw i32 %38, 12, !dbg !26
  %44 = shl i32 %41, 6, !dbg !27
  %45 = or disjoint i32 %30, %44, !dbg !28
  %46 = add i32 %45, %42, !dbg !29
  %47 = add i32 %45, %43, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = shl nsw i32 %39, 12, !dbg !31
  %53 = shl nsw i32 %.sext, 12, !dbg !31
  %54 = add i32 %45, %52, !dbg !32
  %55 = add i32 %45, %53, !dbg !32
  %56 = sext i32 %54 to i64, !dbg !33
  %57 = getelementptr bfloat, ptr addrspace(1) %1, i64 %56, !dbg !33
  %58 = sext i32 %55 to i64, !dbg !33
  %59 = getelementptr bfloat, ptr addrspace(1) %1, i64 %58, !dbg !33
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %49) #2, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !34
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !34
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !34
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !34
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !34
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !34
  %67 = shufflevector <2 x bfloat> %66, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %68 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !34
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !34
  %70 = shufflevector <2 x bfloat> %69, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %51) #2, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !34
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !34
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !34
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !34
  %78 = shufflevector <2 x bfloat> %77, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %79 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !34
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !34
  %81 = shufflevector <2 x bfloat> %80, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !34
  %82 = xor i32 %30, %and.ra, !dbg !34
  %83 = xor i32 %82, %18, !dbg !34
  %84 = shl nuw nsw i32 %23, 6, !dbg !34
  %85 = or disjoint i32 %83, %84, !dbg !34
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %85, !dbg !34
  %87 = shufflevector <2 x bfloat> %62, <2 x bfloat> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %88 = shufflevector <8 x bfloat> %87, <8 x bfloat> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %89 = shufflevector <8 x bfloat> %88, <8 x bfloat> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %89, ptr addrspace(3) %86, align 16, !dbg !34
  %90 = or disjoint i32 %85, 2048, !dbg !34
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %90, !dbg !34
  %92 = shufflevector <2 x bfloat> %73, <2 x bfloat> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %93 = shufflevector <8 x bfloat> %92, <8 x bfloat> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %94 = shufflevector <8 x bfloat> %93, <8 x bfloat> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %94, ptr addrspace(3) %91, align 16, !dbg !34
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %57) #2, !dbg !35
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !35
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !35
  %98 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !35
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !35
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !35
  %102 = shufflevector <2 x bfloat> %101, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %103 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !35
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !35
  %105 = shufflevector <2 x bfloat> %104, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %59) #2, !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !35
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !35
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !35
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !35
  %113 = shufflevector <2 x bfloat> %112, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %114 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !35
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !35
  %116 = shufflevector <2 x bfloat> %115, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %85, !dbg !35
  %118 = shufflevector <2 x bfloat> %97, <2 x bfloat> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %119 = shufflevector <8 x bfloat> %118, <8 x bfloat> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %120 = shufflevector <8 x bfloat> %119, <8 x bfloat> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %120, ptr addrspace(3) %117, align 16, !dbg !35
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %90, !dbg !35
  %122 = shufflevector <2 x bfloat> %108, <2 x bfloat> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %123 = shufflevector <8 x bfloat> %122, <8 x bfloat> %113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %124 = shufflevector <8 x bfloat> %123, <8 x bfloat> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %124, ptr addrspace(3) %121, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %125 = and i32 %15, 7, !dbg !34
  %126 = and i32 %15, 15, !dbg !34
  %127 = lshr exact i32 %17, 1, !dbg !34
  %128 = xor i32 %30, %127, !dbg !34
  %129 = or disjoint i32 %22, %126, !dbg !34
  %130 = shl nuw nsw i32 %129, 6, !dbg !34
  %131 = or disjoint i32 %130, %128, !dbg !34
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %131, !dbg !34
  %133 = ptrtoint ptr addrspace(3) %132 to i32, !dbg !34
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %133) #2, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !34
  %139 = or disjoint i32 %26, 16, !dbg !34
  %140 = xor i32 %139, %27, !dbg !34
  %141 = or disjoint i32 %140, %29, !dbg !34
  %142 = xor i32 %141, %127, !dbg !34
  %143 = or disjoint i32 %142, %130, !dbg !34
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %143, !dbg !34
  %145 = ptrtoint ptr addrspace(3) %144 to i32, !dbg !34
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %145) #2, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !34
  %151 = or disjoint i32 %28, 32, !dbg !34
  %152 = xor i32 %151, %29, !dbg !34
  %153 = xor i32 %152, %127, !dbg !34
  %154 = or disjoint i32 %153, %130, !dbg !34
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %154, !dbg !34
  %156 = ptrtoint ptr addrspace(3) %155 to i32, !dbg !34
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %156) #2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !34
  %162 = or disjoint i32 %26, 48, !dbg !34
  %and.ra39 = and i32 %25, 48, !dbg !34
  %163 = or disjoint i32 %127, %and.ra39, !dbg !34
  %164 = xor i32 %163, %162, !dbg !34
  %165 = or disjoint i32 %164, %130, !dbg !34
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %165, !dbg !34
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !34
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #2, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !34
  %173 = or disjoint i32 %125, 32, !dbg !34
  %174 = or disjoint i32 %173, %16, !dbg !34
  %175 = or disjoint i32 %174, %22, !dbg !34
  %176 = shl nuw nsw i32 %175, 6, !dbg !34
  %177 = or disjoint i32 %176, %128, !dbg !34
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %177, !dbg !34
  %179 = ptrtoint ptr addrspace(3) %178 to i32, !dbg !34
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %179) #2, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !34
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !34
  %185 = or disjoint i32 %142, %176, !dbg !34
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %185, !dbg !34
  %187 = ptrtoint ptr addrspace(3) %186 to i32, !dbg !34
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %187) #2, !dbg !34
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !34
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !34
  %193 = or disjoint i32 %153, %176, !dbg !34
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %193, !dbg !34
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !34
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #2, !dbg !34
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !34
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !34
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !34
  %201 = or disjoint i32 %164, %176, !dbg !34
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %201, !dbg !34
  %203 = ptrtoint ptr addrspace(3) %202 to i32, !dbg !34
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %203) #2, !dbg !34
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !34
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !34
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !34
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !34
  %209 = lshr exact i32 %18, 2, !dbg !35
  %210 = lshr i32 %15, 2, !dbg !35
  %211 = and i32 %210, 16, !dbg !35
  %212 = or disjoint i32 %211, %209, !dbg !35
  %213 = or disjoint i32 %212, %125, !dbg !35
  %214 = shl nuw nsw i32 %213, 6, !dbg !35
  %215 = or disjoint i32 %214, %82, !dbg !35
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %215, !dbg !35
  %217 = ptrtoint ptr addrspace(3) %216 to i32, !dbg !35
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #2, !dbg !35
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !35
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !35
  %223 = xor i32 %152, %and.ra, !dbg !35
  %224 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %223, !dbg !35
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %224, i32 %214, !dbg !35
  %226 = ptrtoint ptr addrspace(3) %225 to i32, !dbg !35
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %226) #2, !dbg !35
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !35
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !35
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !35
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !35
  %232 = or disjoint i32 %212, %173, !dbg !35
  %233 = shl nuw nsw i32 %232, 6, !dbg !35
  %234 = or disjoint i32 %233, %82, !dbg !35
  %235 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %234, !dbg !35
  %236 = ptrtoint ptr addrspace(3) %235 to i32, !dbg !35
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %236) #2, !dbg !35
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !35
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !35
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !35
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %224, i32 %233, !dbg !35
  %243 = ptrtoint ptr addrspace(3) %242 to i32, !dbg !35
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %243) #2, !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !35
  %249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %135, i32 %136, i32 %137, i32 %138, i32 %219, i32 %220) #2, !dbg !36
  %250 = extractvalue { float, float, float, float } %249, 0, !dbg !36
  %251 = extractvalue { float, float, float, float } %249, 1, !dbg !36
  %252 = extractvalue { float, float, float, float } %249, 2, !dbg !36
  %253 = extractvalue { float, float, float, float } %249, 3, !dbg !36
  %254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %135, i32 %136, i32 %137, i32 %138, i32 %238, i32 %239) #2, !dbg !36
  %255 = extractvalue { float, float, float, float } %254, 0, !dbg !36
  %256 = extractvalue { float, float, float, float } %254, 1, !dbg !36
  %257 = extractvalue { float, float, float, float } %254, 2, !dbg !36
  %258 = extractvalue { float, float, float, float } %254, 3, !dbg !36
  %259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %181, i32 %182, i32 %183, i32 %184, i32 %219, i32 %220) #2, !dbg !36
  %260 = extractvalue { float, float, float, float } %259, 0, !dbg !36
  %261 = extractvalue { float, float, float, float } %259, 1, !dbg !36
  %262 = extractvalue { float, float, float, float } %259, 2, !dbg !36
  %263 = extractvalue { float, float, float, float } %259, 3, !dbg !36
  %264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %181, i32 %182, i32 %183, i32 %184, i32 %238, i32 %239) #2, !dbg !36
  %265 = extractvalue { float, float, float, float } %264, 0, !dbg !36
  %266 = extractvalue { float, float, float, float } %264, 1, !dbg !36
  %267 = extractvalue { float, float, float, float } %264, 2, !dbg !36
  %268 = extractvalue { float, float, float, float } %264, 3, !dbg !36
  %269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %250, float %251, float %252, float %253, i32 %147, i32 %148, i32 %149, i32 %150, i32 %221, i32 %222) #2, !dbg !36
  %270 = extractvalue { float, float, float, float } %269, 0, !dbg !36
  %271 = extractvalue { float, float, float, float } %269, 1, !dbg !36
  %272 = extractvalue { float, float, float, float } %269, 2, !dbg !36
  %273 = extractvalue { float, float, float, float } %269, 3, !dbg !36
  %274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %255, float %256, float %257, float %258, i32 %147, i32 %148, i32 %149, i32 %150, i32 %240, i32 %241) #2, !dbg !36
  %275 = extractvalue { float, float, float, float } %274, 0, !dbg !36
  %276 = extractvalue { float, float, float, float } %274, 1, !dbg !36
  %277 = extractvalue { float, float, float, float } %274, 2, !dbg !36
  %278 = extractvalue { float, float, float, float } %274, 3, !dbg !36
  %279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %260, float %261, float %262, float %263, i32 %189, i32 %190, i32 %191, i32 %192, i32 %221, i32 %222) #2, !dbg !36
  %280 = extractvalue { float, float, float, float } %279, 0, !dbg !36
  %281 = extractvalue { float, float, float, float } %279, 1, !dbg !36
  %282 = extractvalue { float, float, float, float } %279, 2, !dbg !36
  %283 = extractvalue { float, float, float, float } %279, 3, !dbg !36
  %284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %189, i32 %190, i32 %191, i32 %192, i32 %240, i32 %241) #2, !dbg !36
  %285 = extractvalue { float, float, float, float } %284, 0, !dbg !36
  %286 = extractvalue { float, float, float, float } %284, 1, !dbg !36
  %287 = extractvalue { float, float, float, float } %284, 2, !dbg !36
  %288 = extractvalue { float, float, float, float } %284, 3, !dbg !36
  %289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %270, float %271, float %272, float %273, i32 %158, i32 %159, i32 %160, i32 %161, i32 %228, i32 %229) #2, !dbg !36
  %290 = extractvalue { float, float, float, float } %289, 0, !dbg !36
  %291 = extractvalue { float, float, float, float } %289, 1, !dbg !36
  %292 = extractvalue { float, float, float, float } %289, 2, !dbg !36
  %293 = extractvalue { float, float, float, float } %289, 3, !dbg !36
  %294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %275, float %276, float %277, float %278, i32 %158, i32 %159, i32 %160, i32 %161, i32 %245, i32 %246) #2, !dbg !36
  %295 = extractvalue { float, float, float, float } %294, 0, !dbg !36
  %296 = extractvalue { float, float, float, float } %294, 1, !dbg !36
  %297 = extractvalue { float, float, float, float } %294, 2, !dbg !36
  %298 = extractvalue { float, float, float, float } %294, 3, !dbg !36
  %299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %280, float %281, float %282, float %283, i32 %197, i32 %198, i32 %199, i32 %200, i32 %228, i32 %229) #2, !dbg !36
  %300 = extractvalue { float, float, float, float } %299, 0, !dbg !36
  %301 = extractvalue { float, float, float, float } %299, 1, !dbg !36
  %302 = extractvalue { float, float, float, float } %299, 2, !dbg !36
  %303 = extractvalue { float, float, float, float } %299, 3, !dbg !36
  %304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %197, i32 %198, i32 %199, i32 %200, i32 %245, i32 %246) #2, !dbg !36
  %305 = extractvalue { float, float, float, float } %304, 0, !dbg !36
  %306 = extractvalue { float, float, float, float } %304, 1, !dbg !36
  %307 = extractvalue { float, float, float, float } %304, 2, !dbg !36
  %308 = extractvalue { float, float, float, float } %304, 3, !dbg !36
  %309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %290, float %291, float %292, float %293, i32 %169, i32 %170, i32 %171, i32 %172, i32 %230, i32 %231) #2, !dbg !36
  %310 = extractvalue { float, float, float, float } %309, 0, !dbg !36
  %311 = extractvalue { float, float, float, float } %309, 1, !dbg !36
  %312 = extractvalue { float, float, float, float } %309, 2, !dbg !36
  %313 = extractvalue { float, float, float, float } %309, 3, !dbg !36
  %314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %295, float %296, float %297, float %298, i32 %169, i32 %170, i32 %171, i32 %172, i32 %247, i32 %248) #2, !dbg !36
  %315 = extractvalue { float, float, float, float } %314, 0, !dbg !36
  %316 = extractvalue { float, float, float, float } %314, 1, !dbg !36
  %317 = extractvalue { float, float, float, float } %314, 2, !dbg !36
  %318 = extractvalue { float, float, float, float } %314, 3, !dbg !36
  %319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %300, float %301, float %302, float %303, i32 %205, i32 %206, i32 %207, i32 %208, i32 %230, i32 %231) #2, !dbg !36
  %320 = extractvalue { float, float, float, float } %319, 0, !dbg !36
  %321 = extractvalue { float, float, float, float } %319, 1, !dbg !36
  %322 = extractvalue { float, float, float, float } %319, 2, !dbg !36
  %323 = extractvalue { float, float, float, float } %319, 3, !dbg !36
  %324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %305, float %306, float %307, float %308, i32 %205, i32 %206, i32 %207, i32 %208, i32 %247, i32 %248) #2, !dbg !36
  %325 = extractvalue { float, float, float, float } %324, 0, !dbg !36
  %326 = extractvalue { float, float, float, float } %324, 1, !dbg !36
  %327 = extractvalue { float, float, float, float } %324, 2, !dbg !36
  %328 = extractvalue { float, float, float, float } %324, 3, !dbg !36
  %329 = icmp slt i32 %31, 512, !dbg !37
  %330 = icmp slt i32 %32, 512, !dbg !37
  %331 = icmp slt i32 %36, 512, !dbg !38
  %332 = and i1 %329, %331, !dbg !39
  %333 = and i1 %330, %331, !dbg !39
  %334 = shl i32 %31, 9, !dbg !40
  %335 = shl i32 %32, 9, !dbg !40
  %336 = shl i32 %41, 18, !dbg !41
  %337 = add i32 %36, %336, !dbg !42
  %338 = add i32 %337, %334, !dbg !43
  %339 = add i32 %337, %335, !dbg !43
  %340 = sext i32 %338 to i64, !dbg !44
  %341 = getelementptr bfloat, ptr addrspace(1) %2, i64 %340, !dbg !44
  %342 = sext i32 %339 to i64, !dbg !44
  %343 = getelementptr bfloat, ptr addrspace(1) %2, i64 %342, !dbg !44
  %344 = fptrunc float %310 to bfloat, !dbg !45
  %345 = fptrunc float %311 to bfloat, !dbg !45
  %346 = fptrunc float %312 to bfloat, !dbg !45
  %347 = fptrunc float %313 to bfloat, !dbg !45
  %348 = fptrunc float %315 to bfloat, !dbg !45
  %349 = fptrunc float %316 to bfloat, !dbg !45
  %350 = fptrunc float %317 to bfloat, !dbg !45
  %351 = fptrunc float %318 to bfloat, !dbg !45
  %352 = fptrunc float %320 to bfloat, !dbg !45
  %353 = fptrunc float %321 to bfloat, !dbg !45
  %354 = fptrunc float %322 to bfloat, !dbg !45
  %355 = fptrunc float %323 to bfloat, !dbg !45
  %356 = fptrunc float %325 to bfloat, !dbg !45
  %357 = fptrunc float %326 to bfloat, !dbg !45
  %358 = fptrunc float %327 to bfloat, !dbg !45
  %359 = fptrunc float %328 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %360 = shl i32 %15, 1, !dbg !45
  %361 = and i32 %360, 6, !dbg !45
  %362 = shl i32 %15, 4, !dbg !45
  %363 = and i32 %362, 192, !dbg !45
  %364 = or disjoint i32 %363, %361, !dbg !45
  %365 = shl nuw nsw i32 %17, 4, !dbg !45
  %366 = or disjoint i32 %364, %365, !dbg !45
  %367 = or disjoint i32 %366, %209, !dbg !45
  %368 = or disjoint i32 %367, %211, !dbg !45
  %369 = shl nuw nsw i32 %21, 3, !dbg !45
  %370 = or disjoint i32 %368, %369, !dbg !45
  %371 = and i32 %25, 1016, !dbg !45
  %372 = or disjoint i32 %371, %369, !dbg !45
  %373 = lshr i32 %370, 3, !dbg !45
  %374 = and i32 %373, 536870904, !dbg !45
  %375 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %374, !dbg !45
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %375, i32 %370, !dbg !45
  %377 = bitcast bfloat %344 to i16, !dbg !45
  %378 = bitcast bfloat %345 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %376, i16 %377, i16 %378, i1 true) #2, !dbg !45
  %379 = xor i32 %370, 512, !dbg !45
  %380 = lshr i32 %379, 3, !dbg !45
  %381 = and i32 %380, 536870904, !dbg !45
  %382 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %381, !dbg !45
  %383 = getelementptr bfloat, ptr addrspace(3) %382, i32 %379, !dbg !45
  %384 = bitcast bfloat %346 to i16, !dbg !45
  %385 = bitcast bfloat %347 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %383, i16 %384, i16 %385, i1 true) #2, !dbg !45
  %386 = xor i32 %370, 32, !dbg !45
  %387 = getelementptr bfloat, ptr addrspace(3) %375, i32 %386, !dbg !45
  %388 = bitcast bfloat %348 to i16, !dbg !45
  %389 = bitcast bfloat %349 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %387, i16 %388, i16 %389, i1 true) #2, !dbg !45
  %390 = xor i32 %370, 544, !dbg !45
  %391 = lshr i32 %390, 3, !dbg !45
  %392 = and i32 %391, 536870904, !dbg !45
  %393 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %392, !dbg !45
  %394 = getelementptr bfloat, ptr addrspace(3) %393, i32 %390, !dbg !45
  %395 = bitcast bfloat %350 to i16, !dbg !45
  %396 = bitcast bfloat %351 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %394, i16 %395, i16 %396, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %397 = lshr exact i32 %372, 3, !dbg !45
  %398 = and i32 %397, 248, !dbg !45
  %399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %398, !dbg !45
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %399, i32 %372, !dbg !45
  %401 = load <4 x i32>, ptr addrspace(3) %400, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %402 = bitcast bfloat %352 to i16, !dbg !45
  %403 = bitcast bfloat %353 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %376, i16 %402, i16 %403, i1 true) #2, !dbg !45
  %404 = bitcast bfloat %354 to i16, !dbg !45
  %405 = bitcast bfloat %355 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %383, i16 %404, i16 %405, i1 true) #2, !dbg !45
  %406 = bitcast bfloat %356 to i16, !dbg !45
  %407 = bitcast bfloat %357 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %387, i16 %406, i16 %407, i1 true) #2, !dbg !45
  %408 = bitcast bfloat %358 to i16, !dbg !45
  %409 = bitcast bfloat %359 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %394, i16 %408, i16 %409, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %410 = load <4 x i32>, ptr addrspace(3) %400, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %401, i64 0, !dbg !45
  %.extract26 = extractelement <4 x i32> %401, i64 1, !dbg !45
  %.extract28 = extractelement <4 x i32> %401, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %401, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract28, i32 %.extract30, ptr addrspace(1) %341, i1 %332) #2, !dbg !45
  %.extract32 = extractelement <4 x i32> %410, i64 0, !dbg !45
  %.extract34 = extractelement <4 x i32> %410, i64 1, !dbg !45
  %.extract36 = extractelement <4 x i32> %410, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %410, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract32, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %343, i1 %333) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnopmmzu5rvthcw762477t5sipljwy4j7zthg5v3zfgpize6jpbi.py", directory: "/tmp/torchinductor_root/no")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 77, column: 25, scope: !6)
!37 = !DILocation(line: 87, column: 20, scope: !6)
!38 = !DILocation(line: 87, column: 34, scope: !6)
!39 = !DILocation(line: 87, column: 26, scope: !6)
!40 = !DILocation(line: 90, column: 25, scope: !6)
!41 = !DILocation(line: 90, column: 40, scope: !6)
!42 = !DILocation(line: 90, column: 21, scope: !6)
!43 = !DILocation(line: 90, column: 33, scope: !6)
!44 = !DILocation(line: 91, column: 25, scope: !6)
!45 = !DILocation(line: 91, column: 67, scope: !6)
!46 = !DILocation(line: 91, column: 4, scope: !6)
