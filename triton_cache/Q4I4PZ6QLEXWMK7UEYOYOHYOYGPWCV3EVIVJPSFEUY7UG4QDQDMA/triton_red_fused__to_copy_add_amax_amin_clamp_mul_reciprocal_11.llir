; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 7, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %10, 3, !dbg !14
  %15 = and i32 %14, 120, !dbg !14
  %16 = and i32 %14, 1016, !dbg !14
  %17 = shl i32 %12, 7, !dbg !15
  %invariant.op = or disjoint i32 %17, %15, !dbg !16
  %18 = insertelement <16 x i1> poison, i1 %13, i64 0, !dbg !17
  %19 = shufflevector <16 x i1> %18, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !17
  %20 = and i32 %10, 31, !dbg !11
  %21 = lshr i32 %16, 7, !dbg !18
  %22 = mul nuw nsw i32 %21, 526336
  %.reass = add i32 %22, %invariant.op
  %23 = sext i32 %.reass to i64, !dbg !19
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %13) #4, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !20
  %34 = shufflevector <2 x bfloat> %27, <2 x bfloat> %29, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %35 = shufflevector <2 x bfloat> %31, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %36 = shufflevector <8 x bfloat> %34, <8 x bfloat> %35, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %37 = shufflevector <2 x bfloat> %31, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %38 = shufflevector <8 x bfloat> %36, <8 x bfloat> %37, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %39 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %40 = shufflevector <8 x bfloat> %38, <8 x bfloat> %39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %41 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %42 = shufflevector <8 x bfloat> %40, <8 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %43 = fpext <8 x bfloat> %42 to <8 x float>, !dbg !21
  %44 = shufflevector <8 x float> %43, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %45 = fcmp olt <16 x float> %44, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %46 = fcmp ogt <16 x float> %44, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %47 = shufflevector <16 x i1> %45, <16 x i1> %46, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %48 = select <16 x i1> %47, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %44, !dbg !26
  %49 = select <16 x i1> %19, <16 x float> %48, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %50 = lshr i32 %16, 7, !dbg !18
  %51 = mul nuw nsw i32 %50, 526336
  %52 = add nuw nsw i32 %51, 4210688
  %.reass.1 = add i32 %52, %invariant.op
  %53 = sext i32 %.reass.1 to i64, !dbg !19
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %13) #4, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !20
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !20
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !20
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !20
  %64 = fcmp uno <16 x float> %49, zeroinitializer, !dbg !27
  %65 = shufflevector <2 x bfloat> %57, <2 x bfloat> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %66 = shufflevector <2 x bfloat> %61, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %67 = shufflevector <8 x bfloat> %65, <8 x bfloat> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %68 = shufflevector <2 x bfloat> %61, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %69 = shufflevector <8 x bfloat> %67, <8 x bfloat> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %70 = shufflevector <2 x bfloat> %63, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %71 = shufflevector <8 x bfloat> %69, <8 x bfloat> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %72 = shufflevector <2 x bfloat> %63, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %73 = shufflevector <8 x bfloat> %71, <8 x bfloat> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %74 = fpext <8 x bfloat> %73 to <8 x float>, !dbg !21
  %75 = shufflevector <8 x float> %74, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %76 = fcmp ogt <16 x float> %49, %75, !dbg !22
  %77 = fcmp olt <16 x float> %49, %75, !dbg !22
  %78 = shufflevector <16 x i1> %76, <16 x i1> %77, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %79 = or <16 x i1> %64, %78, !dbg !28
  %80 = select <16 x i1> %79, <16 x float> %49, <16 x float> %75, !dbg !26
  %81 = select <16 x i1> %19, <16 x float> %80, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %82 = lshr i32 %16, 7, !dbg !18
  %83 = mul nuw nsw i32 %82, 526336
  %84 = add nuw nsw i32 %83, 8421376
  %.reass.2 = add i32 %84, %invariant.op
  %85 = sext i32 %.reass.2 to i64, !dbg !19
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !19
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %86, i1 %13) #4, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !20
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !20
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !20
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !20
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !20
  %96 = fcmp uno <16 x float> %81, zeroinitializer, !dbg !27
  %97 = shufflevector <2 x bfloat> %89, <2 x bfloat> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %98 = shufflevector <2 x bfloat> %93, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %99 = shufflevector <8 x bfloat> %97, <8 x bfloat> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %100 = shufflevector <2 x bfloat> %93, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %101 = shufflevector <8 x bfloat> %99, <8 x bfloat> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %102 = shufflevector <2 x bfloat> %95, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %103 = shufflevector <8 x bfloat> %101, <8 x bfloat> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %104 = shufflevector <2 x bfloat> %95, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %105 = shufflevector <8 x bfloat> %103, <8 x bfloat> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %106 = fpext <8 x bfloat> %105 to <8 x float>, !dbg !21
  %107 = shufflevector <8 x float> %106, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %108 = fcmp ogt <16 x float> %81, %107, !dbg !22
  %109 = fcmp olt <16 x float> %81, %107, !dbg !22
  %110 = shufflevector <16 x i1> %108, <16 x i1> %109, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %111 = or <16 x i1> %96, %110, !dbg !28
  %112 = select <16 x i1> %111, <16 x float> %81, <16 x float> %107, !dbg !26
  %113 = select <16 x i1> %19, <16 x float> %112, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %114 = lshr i32 %10, 5, !dbg !11
  %115 = and i32 %10, 1, !dbg !11
  %116 = or disjoint i32 %9, %115, !dbg !12
  %117 = icmp slt i32 %116, 512, !dbg !13
  %118 = extractelement <16 x float> %113, i64 8, !dbg !29
  %119 = extractelement <16 x float> %113, i64 9, !dbg !29
  %120 = fcmp olt float %118, %119, !dbg !29
  %121 = fcmp uno float %118, 0.000000e+00, !dbg !32
  %122 = or i1 %120, %121, !dbg !33
  %123 = select i1 %122, float %118, float %119, !dbg !34
  %124 = extractelement <16 x float> %113, i64 10, !dbg !29
  %125 = fcmp olt float %123, %124, !dbg !29
  %126 = fcmp uno float %123, 0.000000e+00, !dbg !32
  %127 = or i1 %125, %126, !dbg !33
  %128 = select i1 %127, float %123, float %124, !dbg !34
  %129 = extractelement <16 x float> %113, i64 11, !dbg !29
  %130 = fcmp olt float %128, %129, !dbg !29
  %131 = fcmp uno float %128, 0.000000e+00, !dbg !32
  %132 = or i1 %130, %131, !dbg !33
  %133 = select i1 %132, float %128, float %129, !dbg !34
  %134 = extractelement <16 x float> %113, i64 12, !dbg !29
  %135 = fcmp olt float %133, %134, !dbg !29
  %136 = fcmp uno float %133, 0.000000e+00, !dbg !32
  %137 = or i1 %135, %136, !dbg !33
  %138 = select i1 %137, float %133, float %134, !dbg !34
  %139 = extractelement <16 x float> %113, i64 13, !dbg !29
  %140 = fcmp olt float %138, %139, !dbg !29
  %141 = fcmp uno float %138, 0.000000e+00, !dbg !32
  %142 = or i1 %140, %141, !dbg !33
  %143 = select i1 %142, float %138, float %139, !dbg !34
  %144 = extractelement <16 x float> %113, i64 14, !dbg !29
  %145 = fcmp olt float %143, %144, !dbg !29
  %146 = fcmp uno float %143, 0.000000e+00, !dbg !32
  %147 = or i1 %145, %146, !dbg !33
  %148 = select i1 %147, float %143, float %144, !dbg !34
  %149 = extractelement <16 x float> %113, i64 15, !dbg !29
  %150 = fcmp olt float %148, %149, !dbg !29
  %151 = fcmp uno float %148, 0.000000e+00, !dbg !32
  %152 = or i1 %150, %151, !dbg !33
  %153 = select i1 %152, float %148, float %149, !dbg !34
  %154 = bitcast float %153 to i32, !dbg !35
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !35
  %156 = bitcast i32 %155 to float, !dbg !35
  %157 = fcmp olt float %153, %156, !dbg !29
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !32
  %159 = or i1 %158, %157, !dbg !33
  %160 = select i1 %159, float %153, float %156, !dbg !34
  %161 = bitcast float %160 to i32, !dbg !35
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = fcmp olt float %160, %163, !dbg !29
  %165 = fcmp uno float %160, 0.000000e+00, !dbg !32
  %166 = or i1 %164, %165, !dbg !33
  %167 = select i1 %166, float %160, float %163, !dbg !34
  %168 = bitcast float %167 to i32, !dbg !35
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = fcmp olt float %167, %170, !dbg !29
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !32
  %173 = or i1 %171, %172, !dbg !33
  %174 = select i1 %173, float %167, float %170, !dbg !34
  %175 = bitcast float %174 to i32, !dbg !35
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !35
  %177 = bitcast i32 %176 to float, !dbg !35
  %178 = fcmp olt float %174, %177, !dbg !29
  %179 = fcmp uno float %174, 0.000000e+00, !dbg !32
  %180 = or i1 %178, %179, !dbg !33
  %181 = select i1 %180, float %174, float %177, !dbg !34
  %182 = bitcast float %181 to i32, !dbg !35
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !35
  %184 = bitcast i32 %183 to float, !dbg !35
  %185 = fcmp olt float %181, %184, !dbg !29
  %186 = fcmp uno float %181, 0.000000e+00, !dbg !32
  %187 = or i1 %185, %186, !dbg !33
  %188 = and i32 %114, 3, !dbg !35
  %189 = icmp eq i32 %20, 0, !dbg !35
  %190 = shl nuw nsw i32 %.lobit, 2, !dbg !35
  %191 = or disjoint i32 %190, %188, !dbg !35
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !35
  %193 = select i1 %187, i32 %182, i32 %183, !dbg !34
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %194, i1 %189) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %195 = icmp slt i32 %10, 8, !dbg !35
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #4, !dbg !35
  %198 = bitcast i32 %197 to float, !dbg !35
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !35
  %200 = bitcast i32 %199 to float, !dbg !35
  %201 = fcmp olt float %198, %200, !dbg !29
  %202 = fcmp uno float %198, 0.000000e+00, !dbg !32
  %203 = or i1 %202, %201, !dbg !33
  %204 = select i1 %203, float %198, float %200, !dbg !34
  %205 = bitcast float %204 to i32, !dbg !35
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !35
  %207 = bitcast i32 %206 to float, !dbg !35
  %208 = fcmp olt float %204, %207, !dbg !29
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !32
  %210 = or i1 %208, %209, !dbg !33
  %211 = and i32 %10, 3, !dbg !35
  %212 = icmp eq i32 %211, 0, !dbg !35
  %213 = and i1 %195, %212, !dbg !35
  %214 = select i1 %210, i32 %205, i32 %206, !dbg !34
  %215 = insertelement <1 x i32> poison, i32 %214, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %215, i1 %213) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !35
  %217 = load float, ptr addrspace(3) %216, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %218 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !36
  %219 = bitcast float %217 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %220 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %222 = extractelement <16 x float> %113, i64 0, !dbg !39
  %223 = extractelement <16 x float> %113, i64 1, !dbg !39
  %224 = fcmp ogt float %222, %223, !dbg !39
  %225 = fcmp uno float %222, 0.000000e+00, !dbg !40
  %226 = or i1 %224, %225, !dbg !41
  %227 = select i1 %226, float %222, float %223, !dbg !42
  %228 = extractelement <16 x float> %113, i64 2, !dbg !39
  %229 = fcmp ogt float %227, %228, !dbg !39
  %230 = fcmp uno float %227, 0.000000e+00, !dbg !40
  %231 = or i1 %229, %230, !dbg !41
  %232 = select i1 %231, float %227, float %228, !dbg !42
  %233 = extractelement <16 x float> %113, i64 3, !dbg !39
  %234 = fcmp ogt float %232, %233, !dbg !39
  %235 = fcmp uno float %232, 0.000000e+00, !dbg !40
  %236 = or i1 %234, %235, !dbg !41
  %237 = select i1 %236, float %232, float %233, !dbg !42
  %238 = extractelement <16 x float> %113, i64 4, !dbg !39
  %239 = fcmp ogt float %237, %238, !dbg !39
  %240 = fcmp uno float %237, 0.000000e+00, !dbg !40
  %241 = or i1 %239, %240, !dbg !41
  %242 = select i1 %241, float %237, float %238, !dbg !42
  %243 = extractelement <16 x float> %113, i64 5, !dbg !39
  %244 = fcmp ogt float %242, %243, !dbg !39
  %245 = fcmp uno float %242, 0.000000e+00, !dbg !40
  %246 = or i1 %244, %245, !dbg !41
  %247 = select i1 %246, float %242, float %243, !dbg !42
  %248 = extractelement <16 x float> %113, i64 6, !dbg !39
  %249 = fcmp ogt float %247, %248, !dbg !39
  %250 = fcmp uno float %247, 0.000000e+00, !dbg !40
  %251 = or i1 %249, %250, !dbg !41
  %252 = select i1 %251, float %247, float %248, !dbg !42
  %253 = extractelement <16 x float> %113, i64 7, !dbg !39
  %254 = fcmp ogt float %252, %253, !dbg !39
  %255 = fcmp uno float %252, 0.000000e+00, !dbg !40
  %256 = or i1 %254, %255, !dbg !41
  %257 = select i1 %256, float %252, float %253, !dbg !42
  %258 = bitcast float %257 to i32, !dbg !37
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 16, i32 31), !dbg !37
  %260 = bitcast i32 %259 to float, !dbg !37
  %261 = fcmp ogt float %257, %260, !dbg !39
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !40
  %263 = or i1 %262, %261, !dbg !41
  %264 = select i1 %263, float %257, float %260, !dbg !42
  %265 = bitcast float %264 to i32, !dbg !37
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !37
  %267 = bitcast i32 %266 to float, !dbg !37
  %268 = fcmp ogt float %264, %267, !dbg !39
  %269 = fcmp uno float %264, 0.000000e+00, !dbg !40
  %270 = or i1 %268, %269, !dbg !41
  %271 = select i1 %270, float %264, float %267, !dbg !42
  %272 = bitcast float %271 to i32, !dbg !37
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = fcmp ogt float %271, %274, !dbg !39
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !40
  %277 = or i1 %275, %276, !dbg !41
  %278 = select i1 %277, float %271, float %274, !dbg !42
  %279 = bitcast float %278 to i32, !dbg !37
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !37
  %281 = bitcast i32 %280 to float, !dbg !37
  %282 = fcmp ogt float %278, %281, !dbg !39
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !40
  %284 = or i1 %282, %283, !dbg !41
  %285 = select i1 %284, float %278, float %281, !dbg !42
  %286 = bitcast float %285 to i32, !dbg !37
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !37
  %288 = bitcast i32 %287 to float, !dbg !37
  %289 = fcmp ogt float %285, %288, !dbg !39
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !40
  %291 = or i1 %289, %290, !dbg !41
  %292 = select i1 %291, i32 %286, i32 %287, !dbg !42
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %293, i1 %189) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %294 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #4, !dbg !37
  %295 = bitcast i32 %294 to float, !dbg !37
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !37
  %297 = bitcast i32 %296 to float, !dbg !37
  %298 = fcmp ogt float %295, %297, !dbg !39
  %299 = fcmp uno float %295, 0.000000e+00, !dbg !40
  %300 = or i1 %299, %298, !dbg !41
  %301 = select i1 %300, float %295, float %297, !dbg !42
  %302 = bitcast float %301 to i32, !dbg !37
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !37
  %304 = bitcast i32 %303 to float, !dbg !37
  %305 = fcmp ogt float %301, %304, !dbg !39
  %306 = fcmp uno float %301, 0.000000e+00, !dbg !40
  %307 = or i1 %305, %306, !dbg !41
  %308 = select i1 %307, i32 %302, i32 %303, !dbg !42
  %309 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %309, i1 %213) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %310 = load float, ptr addrspace(3) %216, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %311 = bitcast float %310 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %311, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %312 = load float, ptr addrspace(3) %220, align 4, !dbg !43
  %313 = sext i32 %116 to i64, !dbg !44
  %314 = getelementptr bfloat, ptr addrspace(1) %1, i64 %313, !dbg !44
  %315 = fptrunc float %221 to bfloat, !dbg !36
  %316 = and i32 %10, 254, !dbg !36
  %317 = icmp eq i32 %316, 0, !dbg !36
  %318 = bitcast bfloat %315 to i16, !dbg !36
  %319 = and i1 %317, %117, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %318, ptr addrspace(1) %314, i1 %319) #4, !dbg !36
  %320 = getelementptr bfloat, ptr addrspace(1) %2, i64 %313, !dbg !45
  %321 = fptrunc float %312 to bfloat, !dbg !43
  %322 = bitcast bfloat %321 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %322, ptr addrspace(1) %320, i1 %319) #4, !dbg !43
  %323 = mul i32 %12, 3072, !dbg !46
  %.inv = fcmp oge float %217, 0.000000e+00, !dbg !47
  %324 = select i1 %.inv, float 0.000000e+00, float %217, !dbg !47
  %325 = fsub float 0.000000e+00, %324, !dbg !49
  %326 = fcmp uno float %325, 0.000000e+00, !dbg !50
  %.inv2 = fcmp ole float %310, 0.000000e+00, !dbg !52
  %327 = select i1 %.inv2, float 0.000000e+00, float %310, !dbg !52
  %328 = fcmp ogt float %325, %327, !dbg !54
  %329 = or i1 %326, %328, !dbg !55
  %330 = select i1 %329, float %325, float %327, !dbg !56
  %331 = fmul float %330, 0x3F80204080000000, !dbg !57
  %332 = fcmp ogt float %331, 0x3EE4F8B580000000, !dbg !58
  %333 = fcmp uno float %331, 0.000000e+00, !dbg !60
  %334 = or i1 %332, %333, !dbg !61
  %335 = select i1 %334, float %331, float 0x3EE4F8B580000000, !dbg !62
  %336 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %335), !dbg !63
  %337 = zext nneg i32 %16 to i64, !dbg !16
  %338 = lshr i32 %16, 7, !dbg !64
  %339 = mul nuw nsw i32 %338, 526336
  %.reass5 = add i32 %339, %invariant.op
  %340 = sext i32 %.reass5 to i64, !dbg !65
  %341 = getelementptr bfloat, ptr addrspace(1) %0, i64 %340, !dbg !65
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %341, i1 %13) #4, !dbg !66
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !66
  %344 = bitcast i32 %343 to <2 x bfloat>, !dbg !66
  %345 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !66
  %346 = bitcast i32 %345 to <2 x bfloat>, !dbg !66
  %347 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !66
  %348 = bitcast i32 %347 to <2 x bfloat>, !dbg !66
  %349 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !66
  %350 = bitcast i32 %349 to <2 x bfloat>, !dbg !66
  %351 = extractelement <2 x bfloat> %344, i64 0, !dbg !66
  %352 = extractelement <2 x bfloat> %344, i64 1, !dbg !66
  %353 = extractelement <2 x bfloat> %346, i64 0, !dbg !66
  %354 = extractelement <2 x bfloat> %346, i64 1, !dbg !66
  %355 = extractelement <2 x bfloat> %348, i64 0, !dbg !66
  %356 = extractelement <2 x bfloat> %348, i64 1, !dbg !66
  %357 = extractelement <2 x bfloat> %350, i64 0, !dbg !66
  %358 = extractelement <2 x bfloat> %350, i64 1, !dbg !66
  %359 = fpext bfloat %351 to float, !dbg !67
  %360 = fpext bfloat %352 to float, !dbg !67
  %361 = fpext bfloat %353 to float, !dbg !67
  %362 = fpext bfloat %354 to float, !dbg !67
  %363 = fpext bfloat %355 to float, !dbg !67
  %364 = fpext bfloat %356 to float, !dbg !67
  %365 = fpext bfloat %357 to float, !dbg !67
  %366 = fpext bfloat %358 to float, !dbg !67
  %367 = fmul float %336, %359, !dbg !68
  %368 = fmul float %336, %360, !dbg !68
  %369 = fmul float %336, %361, !dbg !68
  %370 = fmul float %336, %362, !dbg !68
  %371 = fmul float %336, %363, !dbg !68
  %372 = fmul float %336, %364, !dbg !68
  %373 = fmul float %336, %365, !dbg !68
  %374 = fmul float %336, %366, !dbg !68
  %375 = tail call float @llvm.nvvm.round.f(float %367) #4, !dbg !69
  %376 = tail call float @llvm.nvvm.round.f(float %368) #4, !dbg !69
  %377 = tail call float @llvm.nvvm.round.f(float %369) #4, !dbg !69
  %378 = tail call float @llvm.nvvm.round.f(float %370) #4, !dbg !69
  %379 = tail call float @llvm.nvvm.round.f(float %371) #4, !dbg !69
  %380 = tail call float @llvm.nvvm.round.f(float %372) #4, !dbg !69
  %381 = tail call float @llvm.nvvm.round.f(float %373) #4, !dbg !69
  %382 = tail call float @llvm.nvvm.round.f(float %374) #4, !dbg !69
  %383 = insertelement <4 x float> poison, float %375, i64 0, !dbg !70
  %384 = insertelement <4 x float> %383, float %376, i64 1, !dbg !70
  %385 = insertelement <4 x float> %384, float %377, i64 2, !dbg !70
  %386 = insertelement <4 x float> %385, float %378, i64 3, !dbg !70
  %387 = fcmp ogt <4 x float> %386, splat (float -1.270000e+02), !dbg !70
  %388 = fcmp uno <4 x float> %386, zeroinitializer, !dbg !72
  %389 = or <4 x i1> %387, %388, !dbg !73
  %390 = select <4 x i1> %389, <4 x float> %386, <4 x float> splat (float -1.270000e+02), !dbg !74
  %391 = fcmp olt <4 x float> %390, splat (float 1.270000e+02), !dbg !75
  %392 = fcmp uno <4 x float> %390, zeroinitializer, !dbg !77
  %393 = or <4 x i1> %391, %392, !dbg !78
  %394 = fptosi <4 x float> %390 to <4 x i8>, !dbg !79
  %395 = select <4 x i1> %393, <4 x i8> %394, <4 x i8> splat (i8 127), !dbg !80
  %396 = insertelement <4 x float> poison, float %379, i64 0, !dbg !70
  %397 = insertelement <4 x float> %396, float %380, i64 1, !dbg !70
  %398 = insertelement <4 x float> %397, float %381, i64 2, !dbg !70
  %399 = insertelement <4 x float> %398, float %382, i64 3, !dbg !70
  %400 = fcmp ogt <4 x float> %399, splat (float -1.270000e+02), !dbg !70
  %401 = fcmp uno <4 x float> %399, zeroinitializer, !dbg !72
  %402 = or <4 x i1> %400, %401, !dbg !73
  %403 = select <4 x i1> %402, <4 x float> %399, <4 x float> splat (float -1.270000e+02), !dbg !74
  %404 = fcmp olt <4 x float> %403, splat (float 1.270000e+02), !dbg !75
  %405 = fcmp uno <4 x float> %403, zeroinitializer, !dbg !77
  %406 = or <4 x i1> %404, %405, !dbg !78
  %407 = fptosi <4 x float> %403 to <4 x i8>, !dbg !79
  %408 = select <4 x i1> %406, <4 x i8> %407, <4 x i8> splat (i8 127), !dbg !80
  %409 = or disjoint i32 %323, %16, !dbg !81
  %410 = sext i32 %409 to i64, !dbg !82
  %411 = getelementptr i8, ptr addrspace(1) %3, i64 %410, !dbg !82
  %412 = bitcast <4 x i8> %395 to i32, !dbg !83
  %413 = bitcast <4 x i8> %408 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %412, i32 %413, ptr addrspace(1) %411, i1 %13) #4, !dbg !83
  %414 = or disjoint i64 %337, 1024, !dbg !84
  %415 = lshr i64 %414, 7, !dbg !64
  %416 = trunc nuw nsw i64 %415 to i32
  %417 = mul nuw nsw i32 %416, 526336
  %.reass5.1 = add i32 %417, %invariant.op
  %418 = sext i32 %.reass5.1 to i64, !dbg !65
  %419 = getelementptr bfloat, ptr addrspace(1) %0, i64 %418, !dbg !65
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %419, i1 %13) #4, !dbg !66
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !66
  %422 = bitcast i32 %421 to <2 x bfloat>, !dbg !66
  %423 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !66
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !66
  %425 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !66
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !66
  %427 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !66
  %428 = bitcast i32 %427 to <2 x bfloat>, !dbg !66
  %429 = extractelement <2 x bfloat> %422, i64 0, !dbg !66
  %430 = extractelement <2 x bfloat> %422, i64 1, !dbg !66
  %431 = extractelement <2 x bfloat> %424, i64 0, !dbg !66
  %432 = extractelement <2 x bfloat> %424, i64 1, !dbg !66
  %433 = extractelement <2 x bfloat> %426, i64 0, !dbg !66
  %434 = extractelement <2 x bfloat> %426, i64 1, !dbg !66
  %435 = extractelement <2 x bfloat> %428, i64 0, !dbg !66
  %436 = extractelement <2 x bfloat> %428, i64 1, !dbg !66
  %437 = fpext bfloat %429 to float, !dbg !67
  %438 = fpext bfloat %430 to float, !dbg !67
  %439 = fpext bfloat %431 to float, !dbg !67
  %440 = fpext bfloat %432 to float, !dbg !67
  %441 = fpext bfloat %433 to float, !dbg !67
  %442 = fpext bfloat %434 to float, !dbg !67
  %443 = fpext bfloat %435 to float, !dbg !67
  %444 = fpext bfloat %436 to float, !dbg !67
  %445 = fmul float %336, %437, !dbg !68
  %446 = fmul float %336, %438, !dbg !68
  %447 = fmul float %336, %439, !dbg !68
  %448 = fmul float %336, %440, !dbg !68
  %449 = fmul float %336, %441, !dbg !68
  %450 = fmul float %336, %442, !dbg !68
  %451 = fmul float %336, %443, !dbg !68
  %452 = fmul float %336, %444, !dbg !68
  %453 = tail call float @llvm.nvvm.round.f(float %445) #4, !dbg !69
  %454 = tail call float @llvm.nvvm.round.f(float %446) #4, !dbg !69
  %455 = tail call float @llvm.nvvm.round.f(float %447) #4, !dbg !69
  %456 = tail call float @llvm.nvvm.round.f(float %448) #4, !dbg !69
  %457 = tail call float @llvm.nvvm.round.f(float %449) #4, !dbg !69
  %458 = tail call float @llvm.nvvm.round.f(float %450) #4, !dbg !69
  %459 = tail call float @llvm.nvvm.round.f(float %451) #4, !dbg !69
  %460 = tail call float @llvm.nvvm.round.f(float %452) #4, !dbg !69
  %461 = insertelement <4 x float> poison, float %453, i64 0, !dbg !70
  %462 = insertelement <4 x float> %461, float %454, i64 1, !dbg !70
  %463 = insertelement <4 x float> %462, float %455, i64 2, !dbg !70
  %464 = insertelement <4 x float> %463, float %456, i64 3, !dbg !70
  %465 = fcmp ogt <4 x float> %464, splat (float -1.270000e+02), !dbg !70
  %466 = fcmp uno <4 x float> %464, zeroinitializer, !dbg !72
  %467 = or <4 x i1> %465, %466, !dbg !73
  %468 = select <4 x i1> %467, <4 x float> %464, <4 x float> splat (float -1.270000e+02), !dbg !74
  %469 = fcmp olt <4 x float> %468, splat (float 1.270000e+02), !dbg !75
  %470 = fcmp uno <4 x float> %468, zeroinitializer, !dbg !77
  %471 = or <4 x i1> %469, %470, !dbg !78
  %472 = fptosi <4 x float> %468 to <4 x i8>, !dbg !79
  %473 = select <4 x i1> %471, <4 x i8> %472, <4 x i8> splat (i8 127), !dbg !80
  %474 = insertelement <4 x float> poison, float %457, i64 0, !dbg !70
  %475 = insertelement <4 x float> %474, float %458, i64 1, !dbg !70
  %476 = insertelement <4 x float> %475, float %459, i64 2, !dbg !70
  %477 = insertelement <4 x float> %476, float %460, i64 3, !dbg !70
  %478 = fcmp ogt <4 x float> %477, splat (float -1.270000e+02), !dbg !70
  %479 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !72
  %480 = or <4 x i1> %478, %479, !dbg !73
  %481 = select <4 x i1> %480, <4 x float> %477, <4 x float> splat (float -1.270000e+02), !dbg !74
  %482 = fcmp olt <4 x float> %481, splat (float 1.270000e+02), !dbg !75
  %483 = fcmp uno <4 x float> %481, zeroinitializer, !dbg !77
  %484 = or <4 x i1> %482, %483, !dbg !78
  %485 = fptosi <4 x float> %481 to <4 x i8>, !dbg !79
  %486 = select <4 x i1> %484, <4 x i8> %485, <4 x i8> splat (i8 127), !dbg !80
  %487 = trunc nuw nsw i64 %414 to i32, !dbg !81
  %488 = add i32 %323, %487, !dbg !81
  %489 = sext i32 %488 to i64, !dbg !82
  %490 = getelementptr i8, ptr addrspace(1) %3, i64 %489, !dbg !82
  %491 = bitcast <4 x i8> %473 to i32, !dbg !83
  %492 = bitcast <4 x i8> %486 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %491, i32 %492, ptr addrspace(1) %490, i1 %13) #4, !dbg !83
  %493 = or disjoint i64 %337, 2048, !dbg !84
  %494 = lshr i64 %493, 7, !dbg !64
  %495 = trunc nuw nsw i64 %494 to i32
  %496 = mul nuw nsw i32 %495, 526336
  %.reass5.2 = add i32 %496, %invariant.op
  %497 = sext i32 %.reass5.2 to i64, !dbg !65
  %498 = getelementptr bfloat, ptr addrspace(1) %0, i64 %497, !dbg !65
  %499 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %498, i1 %13) #4, !dbg !66
  %500 = extractvalue { i32, i32, i32, i32 } %499, 0, !dbg !66
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !66
  %502 = extractvalue { i32, i32, i32, i32 } %499, 1, !dbg !66
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !66
  %504 = extractvalue { i32, i32, i32, i32 } %499, 2, !dbg !66
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !66
  %506 = extractvalue { i32, i32, i32, i32 } %499, 3, !dbg !66
  %507 = bitcast i32 %506 to <2 x bfloat>, !dbg !66
  %508 = extractelement <2 x bfloat> %501, i64 0, !dbg !66
  %509 = extractelement <2 x bfloat> %501, i64 1, !dbg !66
  %510 = extractelement <2 x bfloat> %503, i64 0, !dbg !66
  %511 = extractelement <2 x bfloat> %503, i64 1, !dbg !66
  %512 = extractelement <2 x bfloat> %505, i64 0, !dbg !66
  %513 = extractelement <2 x bfloat> %505, i64 1, !dbg !66
  %514 = extractelement <2 x bfloat> %507, i64 0, !dbg !66
  %515 = extractelement <2 x bfloat> %507, i64 1, !dbg !66
  %516 = fpext bfloat %508 to float, !dbg !67
  %517 = fpext bfloat %509 to float, !dbg !67
  %518 = fpext bfloat %510 to float, !dbg !67
  %519 = fpext bfloat %511 to float, !dbg !67
  %520 = fpext bfloat %512 to float, !dbg !67
  %521 = fpext bfloat %513 to float, !dbg !67
  %522 = fpext bfloat %514 to float, !dbg !67
  %523 = fpext bfloat %515 to float, !dbg !67
  %524 = fmul float %336, %516, !dbg !68
  %525 = fmul float %336, %517, !dbg !68
  %526 = fmul float %336, %518, !dbg !68
  %527 = fmul float %336, %519, !dbg !68
  %528 = fmul float %336, %520, !dbg !68
  %529 = fmul float %336, %521, !dbg !68
  %530 = fmul float %336, %522, !dbg !68
  %531 = fmul float %336, %523, !dbg !68
  %532 = tail call float @llvm.nvvm.round.f(float %524) #4, !dbg !69
  %533 = tail call float @llvm.nvvm.round.f(float %525) #4, !dbg !69
  %534 = tail call float @llvm.nvvm.round.f(float %526) #4, !dbg !69
  %535 = tail call float @llvm.nvvm.round.f(float %527) #4, !dbg !69
  %536 = tail call float @llvm.nvvm.round.f(float %528) #4, !dbg !69
  %537 = tail call float @llvm.nvvm.round.f(float %529) #4, !dbg !69
  %538 = tail call float @llvm.nvvm.round.f(float %530) #4, !dbg !69
  %539 = tail call float @llvm.nvvm.round.f(float %531) #4, !dbg !69
  %540 = insertelement <4 x float> poison, float %532, i64 0, !dbg !70
  %541 = insertelement <4 x float> %540, float %533, i64 1, !dbg !70
  %542 = insertelement <4 x float> %541, float %534, i64 2, !dbg !70
  %543 = insertelement <4 x float> %542, float %535, i64 3, !dbg !70
  %544 = fcmp ogt <4 x float> %543, splat (float -1.270000e+02), !dbg !70
  %545 = fcmp uno <4 x float> %543, zeroinitializer, !dbg !72
  %546 = or <4 x i1> %544, %545, !dbg !73
  %547 = select <4 x i1> %546, <4 x float> %543, <4 x float> splat (float -1.270000e+02), !dbg !74
  %548 = fcmp olt <4 x float> %547, splat (float 1.270000e+02), !dbg !75
  %549 = fcmp uno <4 x float> %547, zeroinitializer, !dbg !77
  %550 = or <4 x i1> %548, %549, !dbg !78
  %551 = fptosi <4 x float> %547 to <4 x i8>, !dbg !79
  %552 = select <4 x i1> %550, <4 x i8> %551, <4 x i8> splat (i8 127), !dbg !80
  %553 = insertelement <4 x float> poison, float %536, i64 0, !dbg !70
  %554 = insertelement <4 x float> %553, float %537, i64 1, !dbg !70
  %555 = insertelement <4 x float> %554, float %538, i64 2, !dbg !70
  %556 = insertelement <4 x float> %555, float %539, i64 3, !dbg !70
  %557 = fcmp ogt <4 x float> %556, splat (float -1.270000e+02), !dbg !70
  %558 = fcmp uno <4 x float> %556, zeroinitializer, !dbg !72
  %559 = or <4 x i1> %557, %558, !dbg !73
  %560 = select <4 x i1> %559, <4 x float> %556, <4 x float> splat (float -1.270000e+02), !dbg !74
  %561 = fcmp olt <4 x float> %560, splat (float 1.270000e+02), !dbg !75
  %562 = fcmp uno <4 x float> %560, zeroinitializer, !dbg !77
  %563 = or <4 x i1> %561, %562, !dbg !78
  %564 = fptosi <4 x float> %560 to <4 x i8>, !dbg !79
  %565 = select <4 x i1> %563, <4 x i8> %564, <4 x i8> splat (i8 127), !dbg !80
  %566 = trunc nuw nsw i64 %493 to i32, !dbg !81
  %567 = add i32 %323, %566, !dbg !81
  %568 = sext i32 %567 to i64, !dbg !82
  %569 = getelementptr i8, ptr addrspace(1) %3, i64 %568, !dbg !82
  %570 = bitcast <4 x i8> %552 to i32, !dbg !83
  %571 = bitcast <4 x i8> %565 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %570, i32 %571, ptr addrspace(1) %569, i1 %13) #4, !dbg !83
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 42, column: 48, scope: !6)
!18 = !DILocation(line: 37, column: 59, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 41, column: 45, scope: !6)
!26 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 94, column: 15, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!31 = !DILocation(line: 43, column: 38, scope: !6)
!32 = !DILocation(line: 96, column: 21, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 96, column: 16, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 97, column: 29, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !31)
!36 = !DILocation(line: 45, column: 36, scope: !6)
!37 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 38, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !30, inlinedAt: !38)
!40 = !DILocation(line: 104, column: 21, scope: !30, inlinedAt: !38)
!41 = !DILocation(line: 104, column: 16, scope: !30, inlinedAt: !38)
!42 = !DILocation(line: 105, column: 29, scope: !30, inlinedAt: !38)
!43 = !DILocation(line: 46, column: 36, scope: !6)
!44 = !DILocation(line: 45, column: 25, scope: !6)
!45 = !DILocation(line: 46, column: 25, scope: !6)
!46 = !DILocation(line: 78, column: 41, scope: !6)
!47 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 44, scope: !6)
!49 = !DILocation(line: 56, column: 16, scope: !6)
!50 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !51)
!51 = !DILocation(line: 58, column: 45, scope: !6)
!52 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !53)
!53 = !DILocation(line: 57, column: 45, scope: !6)
!54 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !51)
!55 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !51)
!56 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !51)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !59)
!59 = !DILocation(line: 63, column: 46, scope: !6)
!60 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !59)
!61 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !59)
!62 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !59)
!63 = !DILocation(line: 66, column: 25, scope: !6)
!64 = !DILocation(line: 53, column: 59, scope: !6)
!65 = !DILocation(line: 53, column: 34, scope: !6)
!66 = !DILocation(line: 53, column: 83, scope: !6)
!67 = !DILocation(line: 53, column: 145, scope: !6)
!68 = !DILocation(line: 69, column: 23, scope: !6)
!69 = !DILocation(line: 70, column: 36, scope: !6)
!70 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !71)
!71 = !DILocation(line: 73, column: 46, scope: !6)
!72 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !71)
!73 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !71)
!74 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !71)
!75 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !76)
!76 = !DILocation(line: 75, column: 46, scope: !6)
!77 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !76)
!78 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !76)
!79 = !DILocation(line: 77, column: 25, scope: !6)
!80 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !76)
!81 = !DILocation(line: 78, column: 36, scope: !6)
!82 = !DILocation(line: 78, column: 29, scope: !6)
!83 = !DILocation(line: 78, column: 53, scope: !6)
!84 = !DILocation(line: 48, column: 31, scope: !6)
!85 = !DILocation(line: 47, column: 4, scope: !6)
